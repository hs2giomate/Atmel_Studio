
ECS_Box_Objects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010434  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010434  00010434  00020434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  0001043c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00001f64  20000610  00010a50  00030610  2**3
                  ALLOC
  6 .stack        00010004  20002574  000129b4  00030610  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00075bc5  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a714  00000000  00000000  000a6258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001d2bf  00000000  00000000  000b096c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003408  00000000  00000000  000cdc2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000030a0  00000000  00000000  000d1033  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004eeb0  00000000  00000000  000d40d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003d3bb  00000000  00000000  00122f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00140c1e  00000000  00000000  0016033e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000dbb8  00000000  00000000  002a0f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 25 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     x%. ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	49 80 00 00 f9 6d 00 00 09 6e 00 00 55 03 00 00     I....m...n..U...
      7c:	19 6e 00 00 29 6e 00 00 39 6e 00 00 49 6e 00 00     .n..)n..9n..In..
      8c:	59 6e 00 00 69 6e 00 00 79 6e 00 00 55 03 00 00     Yn..in..yn..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 3d 62 00 00 21 cf 00 00     U...U...=b..!...
     184:	31 cf 00 00 41 cf 00 00 51 cf 00 00 55 03 00 00     1...A...Q...U...
     194:	3d 99 00 00 55 03 00 00 55 03 00 00 55 03 00 00     =...U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 59 99 00 00     U...U...U...Y...
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 1d a6 00 00 55 03 00 00     U...U.......U...
     1f4:	39 a6 00 00 55 03 00 00 55 a6 00 00 71 a6 00 00     9...U...U...q...
     204:	8d a6 00 00 a9 a6 00 00 55 03 00 00 55 03 00 00     ........U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000610 	.word	0x20000610
     280:	00000000 	.word	0x00000000
     284:	0001043c 	.word	0x0001043c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001043c 	.word	0x0001043c
     2c4:	20000614 	.word	0x20000614
     2c8:	0001043c 	.word	0x0001043c
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	0001043c 	.word	0x0001043c
     334:	20000000 	.word	0x20000000
     338:	2000060c 	.word	0x2000060c
     33c:	20000610 	.word	0x20000610
     340:	20002574 	.word	0x20002574
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	0000f9a1 	.word	0x0000f9a1
     350:	000011bd 	.word	0x000011bd

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
     35a:	b480      	push	{r7}
     35c:	b083      	sub	sp, #12
     35e:	af00      	add	r7, sp, #0
     360:	6078      	str	r0, [r7, #4]
    return (void *)0;
     362:	2300      	movs	r3, #0
	}
     364:	4618      	mov	r0, r3
     366:	370c      	adds	r7, #12
     368:	46bd      	mov	sp, r7
     36a:	bc80      	pop	{r7}
     36c:	4770      	bx	lr

0000036e <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
     36e:	b480      	push	{r7}
     370:	af00      	add	r7, sp, #0
		}
     372:	bf00      	nop
     374:	46bd      	mov	sp, r7
     376:	bc80      	pop	{r7}
     378:	4770      	bx	lr

0000037a <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
     37a:	b480      	push	{r7}
     37c:	b083      	sub	sp, #12
     37e:	af00      	add	r7, sp, #0
     380:	6078      	str	r0, [r7, #4]
     382:	687b      	ldr	r3, [r7, #4]
     384:	4618      	mov	r0, r3
     386:	370c      	adds	r7, #12
     388:	46bd      	mov	sp, r7
     38a:	bc80      	pop	{r7}
     38c:	4770      	bx	lr

0000038e <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
     38e:	b480      	push	{r7}
     390:	b083      	sub	sp, #12
     392:	af00      	add	r7, sp, #0
     394:	6078      	str	r0, [r7, #4]
     396:	687b      	ldr	r3, [r7, #4]
     398:	4618      	mov	r0, r3
     39a:	370c      	adds	r7, #12
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
	...

000003a4 <_Z41__static_initialization_and_destruction_0ii>:
void Diagnostics::_printSupportLink(void) {
	usb.print(F("If this does not help resolve/clarify this issue, "));
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
}

Diagnostics diagnostics; // default instantiation of Diagnostics object
     3a4:	b580      	push	{r7, lr}
     3a6:	b082      	sub	sp, #8
     3a8:	af00      	add	r7, sp, #0
     3aa:	6078      	str	r0, [r7, #4]
     3ac:	6039      	str	r1, [r7, #0]
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	2b01      	cmp	r3, #1
     3b2:	d14b      	bne.n	44c <_Z41__static_initialization_and_destruction_0ii+0xa8>
     3b4:	683b      	ldr	r3, [r7, #0]
     3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3ba:	4293      	cmp	r3, r2
     3bc:	d146      	bne.n	44c <_Z41__static_initialization_and_destruction_0ii+0xa8>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     3be:	4925      	ldr	r1, [pc, #148]	; (454 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     3c0:	4825      	ldr	r0, [pc, #148]	; (458 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     3c2:	4b26      	ldr	r3, [pc, #152]	; (45c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     3c4:	4798      	blx	r3
     3c6:	4a26      	ldr	r2, [pc, #152]	; (460 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     3c8:	4926      	ldr	r1, [pc, #152]	; (464 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     3ca:	4823      	ldr	r0, [pc, #140]	; (458 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     3cc:	4b26      	ldr	r3, [pc, #152]	; (468 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     3ce:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     3d0:	4926      	ldr	r1, [pc, #152]	; (46c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     3d2:	4827      	ldr	r0, [pc, #156]	; (470 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     3d4:	4b21      	ldr	r3, [pc, #132]	; (45c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     3d6:	4798      	blx	r3
     3d8:	4a21      	ldr	r2, [pc, #132]	; (460 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     3da:	4922      	ldr	r1, [pc, #136]	; (464 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     3dc:	4824      	ldr	r0, [pc, #144]	; (470 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     3de:	4b22      	ldr	r3, [pc, #136]	; (468 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     3e0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     3e2:	4924      	ldr	r1, [pc, #144]	; (474 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     3e4:	4824      	ldr	r0, [pc, #144]	; (478 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     3e6:	4b1d      	ldr	r3, [pc, #116]	; (45c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     3e8:	4798      	blx	r3
     3ea:	4a1d      	ldr	r2, [pc, #116]	; (460 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     3ec:	491d      	ldr	r1, [pc, #116]	; (464 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     3ee:	4822      	ldr	r0, [pc, #136]	; (478 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     3f0:	4b1d      	ldr	r3, [pc, #116]	; (468 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     3f2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     3f4:	4921      	ldr	r1, [pc, #132]	; (47c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     3f6:	4822      	ldr	r0, [pc, #136]	; (480 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     3f8:	4b18      	ldr	r3, [pc, #96]	; (45c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     3fa:	4798      	blx	r3
     3fc:	4a18      	ldr	r2, [pc, #96]	; (460 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     3fe:	4919      	ldr	r1, [pc, #100]	; (464 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     400:	481f      	ldr	r0, [pc, #124]	; (480 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     402:	4b19      	ldr	r3, [pc, #100]	; (468 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     404:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     406:	491f      	ldr	r1, [pc, #124]	; (484 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     408:	481f      	ldr	r0, [pc, #124]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     40a:	4b14      	ldr	r3, [pc, #80]	; (45c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     40c:	4798      	blx	r3
     40e:	4a14      	ldr	r2, [pc, #80]	; (460 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     410:	4914      	ldr	r1, [pc, #80]	; (464 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     412:	481d      	ldr	r0, [pc, #116]	; (488 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     414:	4b14      	ldr	r3, [pc, #80]	; (468 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     416:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     418:	491c      	ldr	r1, [pc, #112]	; (48c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     41a:	481d      	ldr	r0, [pc, #116]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     41c:	4b0f      	ldr	r3, [pc, #60]	; (45c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     41e:	4798      	blx	r3
     420:	4a0f      	ldr	r2, [pc, #60]	; (460 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     422:	4910      	ldr	r1, [pc, #64]	; (464 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     424:	481a      	ldr	r0, [pc, #104]	; (490 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     426:	4b10      	ldr	r3, [pc, #64]	; (468 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     428:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     42a:	491a      	ldr	r1, [pc, #104]	; (494 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     42c:	481a      	ldr	r0, [pc, #104]	; (498 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     42e:	4b0b      	ldr	r3, [pc, #44]	; (45c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     430:	4798      	blx	r3
     432:	4a0b      	ldr	r2, [pc, #44]	; (460 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     434:	490b      	ldr	r1, [pc, #44]	; (464 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     436:	4818      	ldr	r0, [pc, #96]	; (498 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     438:	4b0b      	ldr	r3, [pc, #44]	; (468 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     43a:	4798      	blx	r3
     43c:	4817      	ldr	r0, [pc, #92]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     43e:	4b18      	ldr	r3, [pc, #96]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     440:	4798      	blx	r3
     442:	4a07      	ldr	r2, [pc, #28]	; (460 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     444:	4917      	ldr	r1, [pc, #92]	; (4a4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     446:	4815      	ldr	r0, [pc, #84]	; (49c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     448:	4b07      	ldr	r3, [pc, #28]	; (468 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     44a:	4798      	blx	r3
     44c:	bf00      	nop
     44e:	3708      	adds	r7, #8
     450:	46bd      	mov	sp, r7
     452:	bd80      	pop	{r7, pc}
     454:	200022dc 	.word	0x200022dc
     458:	2000062c 	.word	0x2000062c
     45c:	00001a0d 	.word	0x00001a0d
     460:	20000000 	.word	0x20000000
     464:	00001a45 	.word	0x00001a45
     468:	0000f4b1 	.word	0x0000f4b1
     46c:	20002370 	.word	0x20002370
     470:	2000064c 	.word	0x2000064c
     474:	20002474 	.word	0x20002474
     478:	2000066c 	.word	0x2000066c
     47c:	20002390 	.word	0x20002390
     480:	2000068c 	.word	0x2000068c
     484:	20002434 	.word	0x20002434
     488:	200006ac 	.word	0x200006ac
     48c:	20002454 	.word	0x20002454
     490:	200006cc 	.word	0x200006cc
     494:	2000234c 	.word	0x2000234c
     498:	200006ec 	.word	0x200006ec
     49c:	2000070c 	.word	0x2000070c
     4a0:	0000037b 	.word	0x0000037b
     4a4:	0000038f 	.word	0x0000038f

000004a8 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
     4a8:	b580      	push	{r7, lr}
     4aa:	af00      	add	r7, sp, #0
     4ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
     4b0:	2001      	movs	r0, #1
     4b2:	4b01      	ldr	r3, [pc, #4]	; (4b8 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
     4b4:	4798      	blx	r3
     4b6:	bd80      	pop	{r7, pc}
     4b8:	000003a5 	.word	0x000003a5

000004bc <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     4bc:	b480      	push	{r7}
     4be:	b083      	sub	sp, #12
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
     4c4:	6039      	str	r1, [r7, #0]
	{
	data = v;
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	683a      	ldr	r2, [r7, #0]
     4ca:	601a      	str	r2, [r3, #0]
	}
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	4618      	mov	r0, r3
     4d0:	370c      	adds	r7, #12
     4d2:	46bd      	mov	sp, r7
     4d4:	bc80      	pop	{r7}
     4d6:	4770      	bx	lr

000004d8 <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     4d8:	b580      	push	{r7, lr}
     4da:	b082      	sub	sp, #8
     4dc:	af00      	add	r7, sp, #0
     4de:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     4e6:	801a      	strh	r2, [r3, #0]
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
     4ee:	805a      	strh	r2, [r3, #2]
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	2200      	movs	r2, #0
     4f4:	605a      	str	r2, [r3, #4]
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	3308      	adds	r3, #8
     4fa:	2100      	movs	r1, #0
     4fc:	4618      	mov	r0, r3
     4fe:	4b05      	ldr	r3, [pc, #20]	; (514 <_ZN5eventC1Ev+0x3c>)
     500:	4798      	blx	r3
     502:	687b      	ldr	r3, [r7, #4]
     504:	2200      	movs	r2, #0
     506:	60da      	str	r2, [r3, #12]
	{
		
	}
     508:	687b      	ldr	r3, [r7, #4]
     50a:	4618      	mov	r0, r3
     50c:	3708      	adds	r7, #8
     50e:	46bd      	mov	sp, r7
     510:	bd80      	pop	{r7, pc}
     512:	bf00      	nop
     514:	000004bd 	.word	0x000004bd

00000518 <_ZN18EventHandler_ClassC1Ev>:
{
	eventTimer.ticks++;
}

// default constructor
EventHandler_Class::EventHandler_Class()
     518:	b580      	push	{r7, lr}
     51a:	b082      	sub	sp, #8
     51c:	af00      	add	r7, sp, #0
     51e:	6078      	str	r0, [r7, #4]
     520:	687b      	ldr	r3, [r7, #4]
     522:	4618      	mov	r0, r3
     524:	4b06      	ldr	r3, [pc, #24]	; (540 <_ZN18EventHandler_ClassC1Ev+0x28>)
     526:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
     528:	4a06      	ldr	r2, [pc, #24]	; (544 <_ZN18EventHandler_ClassC1Ev+0x2c>)
     52a:	687b      	ldr	r3, [r7, #4]
     52c:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
     52e:	687b      	ldr	r3, [r7, #4]
     530:	4a05      	ldr	r2, [pc, #20]	; (548 <_ZN18EventHandler_ClassC1Ev+0x30>)
     532:	631a      	str	r2, [r3, #48]	; 0x30
} //EventHandler_Class
     534:	687b      	ldr	r3, [r7, #4]
     536:	4618      	mov	r0, r3
     538:	3708      	adds	r7, #8
     53a:	46bd      	mov	sp, r7
     53c:	bd80      	pop	{r7, pc}
     53e:	bf00      	nop
     540:	000004d9 	.word	0x000004d9
     544:	20000ff4 	.word	0x20000ff4
     548:	200007f0 	.word	0x200007f0

0000054c <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
     54c:	b480      	push	{r7}
     54e:	b083      	sub	sp, #12
     550:	af00      	add	r7, sp, #0
     552:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     554:	4a04      	ldr	r2, [pc, #16]	; (568 <_ZN18EventHandler_ClassD1Ev+0x1c>)
     556:	687b      	ldr	r3, [r7, #4]
     558:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	4618      	mov	r0, r3
     55e:	370c      	adds	r7, #12
     560:	46bd      	mov	sp, r7
     562:	bc80      	pop	{r7}
     564:	4770      	bx	lr
     566:	bf00      	nop
     568:	20000ff4 	.word	0x20000ff4

0000056c <_Z41__static_initialization_and_destruction_0ii>:

	return	(uint32_t)eventsInUse;
	
}

	EventHandler_Class	listener;
     56c:	b5b0      	push	{r4, r5, r7, lr}
     56e:	b082      	sub	sp, #8
     570:	af00      	add	r7, sp, #0
     572:	6078      	str	r0, [r7, #4]
     574:	6039      	str	r1, [r7, #0]
     576:	687b      	ldr	r3, [r7, #4]
     578:	2b01      	cmp	r3, #1
     57a:	d156      	bne.n	62a <_Z41__static_initialization_and_destruction_0ii+0xbe>
     57c:	683b      	ldr	r3, [r7, #0]
     57e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     582:	4293      	cmp	r3, r2
     584:	d151      	bne.n	62a <_Z41__static_initialization_and_destruction_0ii+0xbe>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     586:	492b      	ldr	r1, [pc, #172]	; (634 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     588:	482b      	ldr	r0, [pc, #172]	; (638 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     58a:	4b2c      	ldr	r3, [pc, #176]	; (63c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     58c:	4798      	blx	r3
     58e:	4a2c      	ldr	r2, [pc, #176]	; (640 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     590:	492c      	ldr	r1, [pc, #176]	; (644 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     592:	4829      	ldr	r0, [pc, #164]	; (638 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     594:	4b2c      	ldr	r3, [pc, #176]	; (648 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     596:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     598:	492c      	ldr	r1, [pc, #176]	; (64c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     59a:	482d      	ldr	r0, [pc, #180]	; (650 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     59c:	4b27      	ldr	r3, [pc, #156]	; (63c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     59e:	4798      	blx	r3
     5a0:	4a27      	ldr	r2, [pc, #156]	; (640 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     5a2:	4928      	ldr	r1, [pc, #160]	; (644 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     5a4:	482a      	ldr	r0, [pc, #168]	; (650 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     5a6:	4b28      	ldr	r3, [pc, #160]	; (648 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     5a8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     5aa:	492a      	ldr	r1, [pc, #168]	; (654 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     5ac:	482a      	ldr	r0, [pc, #168]	; (658 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     5ae:	4b23      	ldr	r3, [pc, #140]	; (63c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     5b0:	4798      	blx	r3
     5b2:	4a23      	ldr	r2, [pc, #140]	; (640 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     5b4:	4923      	ldr	r1, [pc, #140]	; (644 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     5b6:	4828      	ldr	r0, [pc, #160]	; (658 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     5b8:	4b23      	ldr	r3, [pc, #140]	; (648 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     5ba:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     5bc:	4927      	ldr	r1, [pc, #156]	; (65c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     5be:	4828      	ldr	r0, [pc, #160]	; (660 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     5c0:	4b1e      	ldr	r3, [pc, #120]	; (63c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     5c2:	4798      	blx	r3
     5c4:	4a1e      	ldr	r2, [pc, #120]	; (640 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     5c6:	491f      	ldr	r1, [pc, #124]	; (644 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     5c8:	4825      	ldr	r0, [pc, #148]	; (660 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     5ca:	4b1f      	ldr	r3, [pc, #124]	; (648 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     5cc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     5ce:	4925      	ldr	r1, [pc, #148]	; (664 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     5d0:	4825      	ldr	r0, [pc, #148]	; (668 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     5d2:	4b1a      	ldr	r3, [pc, #104]	; (63c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     5d4:	4798      	blx	r3
     5d6:	4a1a      	ldr	r2, [pc, #104]	; (640 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     5d8:	491a      	ldr	r1, [pc, #104]	; (644 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     5da:	4823      	ldr	r0, [pc, #140]	; (668 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     5dc:	4b1a      	ldr	r3, [pc, #104]	; (648 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     5de:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     5e0:	4922      	ldr	r1, [pc, #136]	; (66c <_Z41__static_initialization_and_destruction_0ii+0x100>)
     5e2:	4823      	ldr	r0, [pc, #140]	; (670 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     5e4:	4b15      	ldr	r3, [pc, #84]	; (63c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     5e6:	4798      	blx	r3
     5e8:	4a15      	ldr	r2, [pc, #84]	; (640 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     5ea:	4916      	ldr	r1, [pc, #88]	; (644 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     5ec:	4820      	ldr	r0, [pc, #128]	; (670 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     5ee:	4b16      	ldr	r3, [pc, #88]	; (648 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     5f0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     5f2:	4920      	ldr	r1, [pc, #128]	; (674 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     5f4:	4820      	ldr	r0, [pc, #128]	; (678 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     5f6:	4b11      	ldr	r3, [pc, #68]	; (63c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     5f8:	4798      	blx	r3
     5fa:	4a11      	ldr	r2, [pc, #68]	; (640 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     5fc:	4911      	ldr	r1, [pc, #68]	; (644 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     5fe:	481e      	ldr	r0, [pc, #120]	; (678 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     600:	4b11      	ldr	r3, [pc, #68]	; (648 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     602:	4798      	blx	r3
static event	eventStorage[EVENT_QUEUE_BUFFER];
     604:	4b1d      	ldr	r3, [pc, #116]	; (67c <_Z41__static_initialization_and_destruction_0ii+0x110>)
     606:	247f      	movs	r4, #127	; 0x7f
     608:	461d      	mov	r5, r3
     60a:	2c00      	cmp	r4, #0
     60c:	db05      	blt.n	61a <_Z41__static_initialization_and_destruction_0ii+0xae>
     60e:	4628      	mov	r0, r5
     610:	4b1b      	ldr	r3, [pc, #108]	; (680 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     612:	4798      	blx	r3
     614:	3510      	adds	r5, #16
     616:	3c01      	subs	r4, #1
     618:	e7f7      	b.n	60a <_Z41__static_initialization_and_destruction_0ii+0x9e>
	EventHandler_Class	listener;
     61a:	481a      	ldr	r0, [pc, #104]	; (684 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     61c:	4b1a      	ldr	r3, [pc, #104]	; (688 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     61e:	4798      	blx	r3
     620:	4a07      	ldr	r2, [pc, #28]	; (640 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     622:	491a      	ldr	r1, [pc, #104]	; (68c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     624:	4817      	ldr	r0, [pc, #92]	; (684 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     626:	4b08      	ldr	r3, [pc, #32]	; (648 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     628:	4798      	blx	r3
     62a:	bf00      	nop
     62c:	3708      	adds	r7, #8
     62e:	46bd      	mov	sp, r7
     630:	bdb0      	pop	{r4, r5, r7, pc}
     632:	bf00      	nop
     634:	200022dc 	.word	0x200022dc
     638:	20000710 	.word	0x20000710
     63c:	00001a0d 	.word	0x00001a0d
     640:	20000000 	.word	0x20000000
     644:	00001a45 	.word	0x00001a45
     648:	0000f4b1 	.word	0x0000f4b1
     64c:	20002370 	.word	0x20002370
     650:	20000730 	.word	0x20000730
     654:	20002474 	.word	0x20002474
     658:	20000750 	.word	0x20000750
     65c:	20002390 	.word	0x20002390
     660:	20000770 	.word	0x20000770
     664:	20002434 	.word	0x20002434
     668:	20000790 	.word	0x20000790
     66c:	20002454 	.word	0x20002454
     670:	200007b0 	.word	0x200007b0
     674:	2000234c 	.word	0x2000234c
     678:	200007d0 	.word	0x200007d0
     67c:	200007f0 	.word	0x200007f0
     680:	000004d9 	.word	0x000004d9
     684:	20001004 	.word	0x20001004
     688:	00000519 	.word	0x00000519
     68c:	0000054d 	.word	0x0000054d

00000690 <_GLOBAL__sub_I_maxEventCount>:
     690:	b580      	push	{r7, lr}
     692:	af00      	add	r7, sp, #0
     694:	f64f 71ff 	movw	r1, #65535	; 0xffff
     698:	2001      	movs	r0, #1
     69a:	4b01      	ldr	r3, [pc, #4]	; (6a0 <_GLOBAL__sub_I_maxEventCount+0x10>)
     69c:	4798      	blx	r3
     69e:	bd80      	pop	{r7, pc}
     6a0:	0000056d 	.word	0x0000056d

000006a4 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
     6a4:	b480      	push	{r7}
     6a6:	b083      	sub	sp, #12
     6a8:	af00      	add	r7, sp, #0
     6aa:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
     6ac:	4b04      	ldr	r3, [pc, #16]	; (6c0 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	2201      	movs	r2, #1
     6b2:	709a      	strb	r2, [r3, #2]
	asm("nop");
     6b4:	bf00      	nop
}
     6b6:	bf00      	nop
     6b8:	370c      	adds	r7, #12
     6ba:	46bd      	mov	sp, r7
     6bc:	bc80      	pop	{r7}
     6be:	4770      	bx	lr
     6c0:	20001118 	.word	0x20001118

000006c4 <_ZN13LTC2983_ClassD1Ev>:
LTC2983_Class::LTC2983_Class()
{
} //LTC2983_Class

// default destructor
LTC2983_Class::~LTC2983_Class()
     6c4:	b480      	push	{r7}
     6c6:	b083      	sub	sp, #12
     6c8:	af00      	add	r7, sp, #0
     6ca:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	4618      	mov	r0, r3
     6d0:	370c      	adds	r7, #12
     6d2:	46bd      	mov	sp, r7
     6d4:	bc80      	pop	{r7}
     6d6:	4770      	bx	lr

000006d8 <_ZN13LTC2983_ClassC1EP21spi_m_sync_descriptor>:

LTC2983_Class::LTC2983_Class(spi_m_sync_descriptor *SPI_LTC){
     6d8:	b480      	push	{r7}
     6da:	b083      	sub	sp, #12
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
     6e0:	6039      	str	r1, [r7, #0]
	ptrLTCClass=this;
     6e2:	4a06      	ldr	r2, [pc, #24]	; (6fc <_ZN13LTC2983_ClassC1EP21spi_m_sync_descriptor+0x24>)
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	6013      	str	r3, [r2, #0]
	SPIA=SPI_LTC;
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	683a      	ldr	r2, [r7, #0]
     6ec:	63da      	str	r2, [r3, #60]	; 0x3c
	};
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	4618      	mov	r0, r3
     6f2:	370c      	adds	r7, #12
     6f4:	46bd      	mov	sp, r7
     6f6:	bc80      	pop	{r7}
     6f8:	4770      	bx	lr
     6fa:	bf00      	nop
     6fc:	20001118 	.word	0x20001118

00000700 <_ZN13LTC2983_Class4InitEv>:

bool LTC2983_Class::Init(){
     700:	b580      	push	{r7, lr}
     702:	b082      	sub	sp, #8
     704:	af00      	add	r7, sp, #0
     706:	6078      	str	r0, [r7, #4]
	rx=spiLT->rxLiteBuffer;
     708:	687b      	ldr	r3, [r7, #4]
     70a:	6a1b      	ldr	r3, [r3, #32]
     70c:	68da      	ldr	r2, [r3, #12]
     70e:	687b      	ldr	r3, [r7, #4]
     710:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
     712:	687b      	ldr	r3, [r7, #4]
     714:	6a1b      	ldr	r3, [r3, #32]
     716:	689a      	ldr	r2, [r3, #8]
     718:	687b      	ldr	r3, [r7, #4]
     71a:	629a      	str	r2, [r3, #40]	; 0x28
	chipSelect=CS_TEMP1;
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	223d      	movs	r2, #61	; 0x3d
     720:	659a      	str	r2, [r3, #88]	; 0x58
	auxTimer=&hvacTimer;
     722:	687b      	ldr	r3, [r7, #4]
     724:	4a19      	ldr	r2, [pc, #100]	; (78c <_ZN13LTC2983_Class4InitEv+0x8c>)
     726:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
     728:	687b      	ldr	r3, [r7, #4]
     72a:	2204      	movs	r2, #4
     72c:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=8;
     72e:	687b      	ldr	r3, [r7, #4]
     730:	2208      	movs	r2, #8
     732:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=15;
     734:	687b      	ldr	r3, [r7, #4]
     736:	220f      	movs	r2, #15
     738:	715a      	strb	r2, [r3, #5]
	spiLT->set_descriptor(SPIA);
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	6a1a      	ldr	r2, [r3, #32]
     73e:	687b      	ldr	r3, [r7, #4]
     740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     742:	4619      	mov	r1, r3
     744:	4610      	mov	r0, r2
     746:	4b12      	ldr	r3, [pc, #72]	; (790 <_ZN13LTC2983_Class4InitEv+0x90>)
     748:	4798      	blx	r3
	spiLT->init();
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	6a1b      	ldr	r3, [r3, #32]
     74e:	4618      	mov	r0, r3
     750:	4b10      	ldr	r3, [pc, #64]	; (794 <_ZN13LTC2983_Class4InitEv+0x94>)
     752:	4798      	blx	r3
	while(!IsConverterDone());
     754:	6878      	ldr	r0, [r7, #4]
     756:	4b10      	ldr	r3, [pc, #64]	; (798 <_ZN13LTC2983_Class4InitEv+0x98>)
     758:	4798      	blx	r3
     75a:	4603      	mov	r3, r0
     75c:	f083 0301 	eor.w	r3, r3, #1
     760:	b2db      	uxtb	r3, r3
     762:	2b00      	cmp	r3, #0
     764:	d000      	beq.n	768 <_ZN13LTC2983_Class4InitEv+0x68>
     766:	e7f5      	b.n	754 <_ZN13LTC2983_Class4InitEv+0x54>
	configure_channels();
     768:	6878      	ldr	r0, [r7, #4]
     76a:	4b0c      	ldr	r3, [pc, #48]	; (79c <_ZN13LTC2983_Class4InitEv+0x9c>)
     76c:	4798      	blx	r3
	configure_global_parameters();
     76e:	6878      	ldr	r0, [r7, #4]
     770:	4b0b      	ldr	r3, [pc, #44]	; (7a0 <_ZN13LTC2983_Class4InitEv+0xa0>)
     772:	4798      	blx	r3

	ready=true;	
     774:	687b      	ldr	r3, [r7, #4]
     776:	2201      	movs	r2, #1
     778:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
     77a:	6878      	ldr	r0, [r7, #4]
     77c:	4b09      	ldr	r3, [pc, #36]	; (7a4 <_ZN13LTC2983_Class4InitEv+0xa4>)
     77e:	4798      	blx	r3
     780:	4603      	mov	r3, r0
}
     782:	4618      	mov	r0, r3
     784:	3708      	adds	r7, #8
     786:	46bd      	mov	sp, r7
     788:	bd80      	pop	{r7, pc}
     78a:	bf00      	nop
     78c:	20001078 	.word	0x20001078
     790:	00000fed 	.word	0x00000fed
     794:	00000f91 	.word	0x00000f91
     798:	00000849 	.word	0x00000849
     79c:	00000be1 	.word	0x00000be1
     7a0:	00000c99 	.word	0x00000c99
     7a4:	00000cd1 	.word	0x00000cd1

000007a8 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
     7a8:	b590      	push	{r4, r7, lr}
     7aa:	b089      	sub	sp, #36	; 0x24
     7ac:	af02      	add	r7, sp, #8
     7ae:	60f8      	str	r0, [r7, #12]
     7b0:	60b9      	str	r1, [r7, #8]
     7b2:	603b      	str	r3, [r7, #0]
     7b4:	4613      	mov	r3, r2
     7b6:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
     7b8:	79fb      	ldrb	r3, [r7, #7]
     7ba:	461a      	mov	r2, r3
     7bc:	f44f 7100 	mov.w	r1, #512	; 0x200
     7c0:	68f8      	ldr	r0, [r7, #12]
     7c2:	4b0b      	ldr	r3, [pc, #44]	; (7f0 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
     7c4:	4798      	blx	r3
     7c6:	4603      	mov	r3, r0
     7c8:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
     7ca:	8afa      	ldrh	r2, [r7, #22]
     7cc:	683b      	ldr	r3, [r7, #0]
     7ce:	9300      	str	r3, [sp, #0]
     7d0:	4613      	mov	r3, r2
     7d2:	2202      	movs	r2, #2
     7d4:	68b9      	ldr	r1, [r7, #8]
     7d6:	68f8      	ldr	r0, [r7, #12]
     7d8:	4c06      	ldr	r4, [pc, #24]	; (7f4 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
     7da:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
     7dc:	8afb      	ldrh	r3, [r7, #22]
     7de:	79fa      	ldrb	r2, [r7, #7]
     7e0:	68b9      	ldr	r1, [r7, #8]
     7e2:	68f8      	ldr	r0, [r7, #12]
     7e4:	4c04      	ldr	r4, [pc, #16]	; (7f8 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
     7e6:	47a0      	blx	r4
}
     7e8:	bf00      	nop
     7ea:	371c      	adds	r7, #28
     7ec:	46bd      	mov	sp, r7
     7ee:	bd90      	pop	{r4, r7, pc}
     7f0:	00000bb5 	.word	0x00000bb5
     7f4:	00000a75 	.word	0x00000a75
     7f8:	000008a5 	.word	0x000008a5

000007fc <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
     7fc:	b590      	push	{r4, r7, lr}
     7fe:	b087      	sub	sp, #28
     800:	af02      	add	r7, sp, #8
     802:	6078      	str	r0, [r7, #4]
     804:	460b      	mov	r3, r1
     806:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
     808:	78fb      	ldrb	r3, [r7, #3]
     80a:	687a      	ldr	r2, [r7, #4]
     80c:	4413      	add	r3, r2
     80e:	78db      	ldrb	r3, [r3, #3]
     810:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
     812:	687b      	ldr	r3, [r7, #4]
     814:	2200      	movs	r2, #0
     816:	705a      	strb	r2, [r3, #1]
	ready=false;
     818:	687b      	ldr	r3, [r7, #4]
     81a:	2200      	movs	r2, #0
     81c:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
     81e:	687b      	ldr	r3, [r7, #4]
     820:	6d99      	ldr	r1, [r3, #88]	; 0x58
     822:	7bfb      	ldrb	r3, [r7, #15]
     824:	f063 037f 	orn	r3, r3, #127	; 0x7f
     828:	b2db      	uxtb	r3, r3
     82a:	9300      	str	r3, [sp, #0]
     82c:	2300      	movs	r3, #0
     82e:	2202      	movs	r2, #2
     830:	6878      	ldr	r0, [r7, #4]
     832:	4c04      	ldr	r4, [pc, #16]	; (844 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
     834:	47a0      	blx	r4
	channelOnProcess=channel_number;
     836:	687b      	ldr	r3, [r7, #4]
     838:	7bfa      	ldrb	r2, [r7, #15]
     83a:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
     83c:	bf00      	nop
     83e:	3714      	adds	r7, #20
     840:	46bd      	mov	sp, r7
     842:	bd90      	pop	{r4, r7, pc}
     844:	00000b45 	.word	0x00000b45

00000848 <_ZN13LTC2983_Class15IsConverterDoneEv>:
	}
	conversionFinished=process_finished == 0x40;
}

bool LTC2983_Class::IsConverterDone(void)
{
     848:	b590      	push	{r4, r7, lr}
     84a:	b087      	sub	sp, #28
     84c:	af02      	add	r7, sp, #8
     84e:	6078      	str	r0, [r7, #4]
	process_finished = 0;
     850:	687b      	ldr	r3, [r7, #4]
     852:	2200      	movs	r2, #0
     854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	uint8_t data;
	delay_ms(1);
     858:	2001      	movs	r0, #1
     85a:	4b10      	ldr	r3, [pc, #64]	; (89c <_ZN13LTC2983_Class15IsConverterDoneEv+0x54>)
     85c:	4798      	blx	r3
	data = transfer_byte(chipSelect, READ_FROM_RAM, COMMAND_STATUS_REGISTER, 0);
     85e:	687b      	ldr	r3, [r7, #4]
     860:	6d99      	ldr	r1, [r3, #88]	; 0x58
     862:	2300      	movs	r3, #0
     864:	9300      	str	r3, [sp, #0]
     866:	2300      	movs	r3, #0
     868:	2203      	movs	r2, #3
     86a:	6878      	ldr	r0, [r7, #4]
     86c:	4c0c      	ldr	r4, [pc, #48]	; (8a0 <_ZN13LTC2983_Class15IsConverterDoneEv+0x58>)
     86e:	47a0      	blx	r4
     870:	4603      	mov	r3, r0
     872:	73fb      	strb	r3, [r7, #15]
	process_finished  = data & 0x40;
     874:	7bfb      	ldrb	r3, [r7, #15]
     876:	f003 0340 	and.w	r3, r3, #64	; 0x40
     87a:	b2da      	uxtb	r2, r3
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return process_finished == 0x40;
     882:	687b      	ldr	r3, [r7, #4]
     884:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
     888:	2b40      	cmp	r3, #64	; 0x40
     88a:	bf0c      	ite	eq
     88c:	2301      	moveq	r3, #1
     88e:	2300      	movne	r3, #0
     890:	b2db      	uxtb	r3, r3
}
     892:	4618      	mov	r0, r3
     894:	3714      	adds	r7, #20
     896:	46bd      	mov	sp, r7
     898:	bd90      	pop	{r4, r7, pc}
     89a:	bf00      	nop
     89c:	00004441 	.word	0x00004441
     8a0:	00000b45 	.word	0x00000b45

000008a4 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
     8a4:	b590      	push	{r4, r7, lr}
     8a6:	b089      	sub	sp, #36	; 0x24
     8a8:	af02      	add	r7, sp, #8
     8aa:	60f8      	str	r0, [r7, #12]
     8ac:	60b9      	str	r1, [r7, #8]
     8ae:	4611      	mov	r1, r2
     8b0:	461a      	mov	r2, r3
     8b2:	460b      	mov	r3, r1
     8b4:	71fb      	strb	r3, [r7, #7]
     8b6:	4613      	mov	r3, r2
     8b8:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
     8ba:	88ba      	ldrh	r2, [r7, #4]
     8bc:	2300      	movs	r3, #0
     8be:	9300      	str	r3, [sp, #0]
     8c0:	4613      	mov	r3, r2
     8c2:	2203      	movs	r2, #3
     8c4:	68b9      	ldr	r1, [r7, #8]
     8c6:	68f8      	ldr	r0, [r7, #12]
     8c8:	4c03      	ldr	r4, [pc, #12]	; (8d8 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
     8ca:	47a0      	blx	r4
     8cc:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
     8ce:	bf00      	nop
     8d0:	371c      	adds	r7, #28
     8d2:	46bd      	mov	sp, r7
     8d4:	bd90      	pop	{r4, r7, pc}
     8d6:	bf00      	nop
     8d8:	00000a75 	.word	0x00000a75

000008dc <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
     8dc:	b590      	push	{r4, r7, lr}
     8de:	b085      	sub	sp, #20
     8e0:	af02      	add	r7, sp, #8
     8e2:	6078      	str	r0, [r7, #4]
     8e4:	460b      	mov	r3, r1
     8e6:	70fb      	strb	r3, [r7, #3]
     8e8:	4613      	mov	r3, r2
     8ea:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
     8ec:	78fb      	ldrb	r3, [r7, #3]
     8ee:	461a      	mov	r2, r3
     8f0:	2110      	movs	r1, #16
     8f2:	6878      	ldr	r0, [r7, #4]
     8f4:	4b17      	ldr	r3, [pc, #92]	; (954 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
     8f6:	4798      	blx	r3
     8f8:	4603      	mov	r3, r0
     8fa:	461a      	mov	r2, r3
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
     902:	687b      	ldr	r3, [r7, #4]
     904:	6d99      	ldr	r1, [r3, #88]	; 0x58
     906:	687b      	ldr	r3, [r7, #4]
     908:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
     90c:	2300      	movs	r3, #0
     90e:	9300      	str	r3, [sp, #0]
     910:	4613      	mov	r3, r2
     912:	2203      	movs	r2, #3
     914:	6878      	ldr	r0, [r7, #4]
     916:	4c10      	ldr	r4, [pc, #64]	; (958 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
     918:	47a0      	blx	r4
     91a:	4602      	mov	r2, r0
     91c:	687b      	ldr	r3, [r7, #4]
     91e:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
     920:	687b      	ldr	r3, [r7, #4]
     922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     924:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     928:	687b      	ldr	r3, [r7, #4]
     92a:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	6d19      	ldr	r1, [r3, #80]	; 0x50
     930:	78bb      	ldrb	r3, [r7, #2]
     932:	78fa      	ldrb	r2, [r7, #3]
     934:	6878      	ldr	r0, [r7, #4]
     936:	4c09      	ldr	r4, [pc, #36]	; (95c <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
     938:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
     93a:	687b      	ldr	r3, [r7, #4]
     93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     93e:	0e1b      	lsrs	r3, r3, #24
     940:	b2da      	uxtb	r2, r3
     942:	687b      	ldr	r3, [r7, #4]
     944:	71da      	strb	r2, [r3, #7]
	return scaled_result;
     946:	687b      	ldr	r3, [r7, #4]
     948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
     94a:	4618      	mov	r0, r3
     94c:	370c      	adds	r7, #12
     94e:	46bd      	mov	sp, r7
     950:	bd90      	pop	{r4, r7, pc}
     952:	bf00      	nop
     954:	00000bb5 	.word	0x00000bb5
     958:	00000a75 	.word	0x00000a75
     95c:	00000989 	.word	0x00000989

00000960 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
	return GetSingleChannelResult(activeChannels[channel_index]);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
     960:	b580      	push	{r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
     966:	6078      	str	r0, [r7, #4]
     968:	460b      	mov	r3, r1
     96a:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
     96c:	78fb      	ldrb	r3, [r7, #3]
     96e:	2202      	movs	r2, #2
     970:	4619      	mov	r1, r3
     972:	6878      	ldr	r0, [r7, #4]
     974:	4b03      	ldr	r3, [pc, #12]	; (984 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
     976:	4798      	blx	r3
     978:	4603      	mov	r3, r0
}
     97a:	4618      	mov	r0, r3
     97c:	3708      	adds	r7, #8
     97e:	46bd      	mov	sp, r7
     980:	bd80      	pop	{r7, pc}
     982:	bf00      	nop
     984:	000008dd 	.word	0x000008dd

00000988 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
     988:	b580      	push	{r7, lr}
     98a:	b084      	sub	sp, #16
     98c:	af00      	add	r7, sp, #0
     98e:	60f8      	str	r0, [r7, #12]
     990:	60b9      	str	r1, [r7, #8]
     992:	4611      	mov	r1, r2
     994:	461a      	mov	r2, r3
     996:	460b      	mov	r3, r1
     998:	71fb      	strb	r3, [r7, #7]
     99a:	4613      	mov	r3, r2
     99c:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
     99e:	68ba      	ldr	r2, [r7, #8]
     9a0:	68fb      	ldr	r3, [r7, #12]
     9a2:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     9a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
     9ac:	2b00      	cmp	r3, #0
     9ae:	d006      	beq.n	9be <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
     9b0:	68fb      	ldr	r3, [r7, #12]
     9b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     9b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
     9b8:	461a      	mov	r2, r3
     9ba:	68fb      	ldr	r3, [r7, #12]
     9bc:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
     9be:	79bb      	ldrb	r3, [r7, #6]
     9c0:	2b02      	cmp	r3, #2
     9c2:	d11d      	bne.n	a00 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
     9c4:	68fb      	ldr	r3, [r7, #12]
     9c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     9c8:	4b18      	ldr	r3, [pc, #96]	; (a2c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
     9ca:	4610      	mov	r0, r2
     9cc:	4798      	blx	r3
     9ce:	4602      	mov	r2, r0
     9d0:	4b17      	ldr	r3, [pc, #92]	; (a30 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
     9d2:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
     9d6:	4610      	mov	r0, r2
     9d8:	4798      	blx	r3
     9da:	4603      	mov	r3, r0
     9dc:	461a      	mov	r2, r3
     9de:	68fb      	ldr	r3, [r7, #12]
     9e0:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
     9e2:	79fb      	ldrb	r3, [r7, #7]
     9e4:	4619      	mov	r1, r3
     9e6:	68f8      	ldr	r0, [r7, #12]
     9e8:	4b12      	ldr	r3, [pc, #72]	; (a34 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
     9ea:	4798      	blx	r3
     9ec:	4603      	mov	r3, r0
     9ee:	4618      	mov	r0, r3
     9f0:	68fb      	ldr	r3, [r7, #12]
     9f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     9f4:	68f9      	ldr	r1, [r7, #12]
     9f6:	1c83      	adds	r3, r0, #2
     9f8:	009b      	lsls	r3, r3, #2
     9fa:	440b      	add	r3, r1
     9fc:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
     9fe:	e011      	b.n	a24 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
     a00:	79bb      	ldrb	r3, [r7, #6]
     a02:	2b01      	cmp	r3, #1
     a04:	d10e      	bne.n	a24 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     a0a:	4b08      	ldr	r3, [pc, #32]	; (a2c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
     a0c:	4610      	mov	r0, r2
     a0e:	4798      	blx	r3
     a10:	4602      	mov	r2, r0
     a12:	4b07      	ldr	r3, [pc, #28]	; (a30 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
     a14:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
     a18:	4610      	mov	r0, r2
     a1a:	4798      	blx	r3
     a1c:	4603      	mov	r3, r0
     a1e:	461a      	mov	r2, r3
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	65da      	str	r2, [r3, #92]	; 0x5c
}
     a24:	bf00      	nop
     a26:	3710      	adds	r7, #16
     a28:	46bd      	mov	sp, r7
     a2a:	bd80      	pop	{r7, pc}
     a2c:	0000f631 	.word	0x0000f631
     a30:	0000f841 	.word	0x0000f841
     a34:	00000a39 	.word	0x00000a39

00000a38 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
     a38:	b480      	push	{r7}
     a3a:	b085      	sub	sp, #20
     a3c:	af00      	add	r7, sp, #0
     a3e:	6078      	str	r0, [r7, #4]
     a40:	460b      	mov	r3, r1
     a42:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
     a44:	2300      	movs	r3, #0
     a46:	73fb      	strb	r3, [r7, #15]
     a48:	7bfb      	ldrb	r3, [r7, #15]
     a4a:	2b03      	cmp	r3, #3
     a4c:	dc0c      	bgt.n	a68 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
     a4e:	7bfb      	ldrb	r3, [r7, #15]
     a50:	687a      	ldr	r2, [r7, #4]
     a52:	4413      	add	r3, r2
     a54:	78db      	ldrb	r3, [r3, #3]
     a56:	78fa      	ldrb	r2, [r7, #3]
     a58:	429a      	cmp	r2, r3
     a5a:	d101      	bne.n	a60 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
     a5c:	7bfb      	ldrb	r3, [r7, #15]
     a5e:	e004      	b.n	a6a <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
     a60:	7bfb      	ldrb	r3, [r7, #15]
     a62:	3301      	adds	r3, #1
     a64:	73fb      	strb	r3, [r7, #15]
     a66:	e7ef      	b.n	a48 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
     a68:	2300      	movs	r3, #0
}
     a6a:	4618      	mov	r0, r3
     a6c:	3714      	adds	r7, #20
     a6e:	46bd      	mov	sp, r7
     a70:	bc80      	pop	{r7}
     a72:	4770      	bx	lr

00000a74 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
     a74:	b590      	push	{r4, r7, lr}
     a76:	b089      	sub	sp, #36	; 0x24
     a78:	af02      	add	r7, sp, #8
     a7a:	60f8      	str	r0, [r7, #12]
     a7c:	60b9      	str	r1, [r7, #8]
     a7e:	4611      	mov	r1, r2
     a80:	461a      	mov	r2, r3
     a82:	460b      	mov	r3, r1
     a84:	71fb      	strb	r3, [r7, #7]
     a86:	4613      	mov	r3, r2
     a88:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
     a8a:	2300      	movs	r3, #0
     a8c:	75fb      	strb	r3, [r7, #23]
     a8e:	7dfb      	ldrb	r3, [r7, #23]
     a90:	2b06      	cmp	r3, #6
     a92:	dc09      	bgt.n	aa8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
     a94:	68fb      	ldr	r3, [r7, #12]
     a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     a98:	7dfb      	ldrb	r3, [r7, #23]
     a9a:	4413      	add	r3, r2
     a9c:	2200      	movs	r2, #0
     a9e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
     aa0:	7dfb      	ldrb	r3, [r7, #23]
     aa2:	3301      	adds	r3, #1
     aa4:	75fb      	strb	r3, [r7, #23]
     aa6:	e7f2      	b.n	a8e <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
     aa8:	68fb      	ldr	r3, [r7, #12]
     aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     aac:	79fa      	ldrb	r2, [r7, #7]
     aae:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
     ab0:	68fb      	ldr	r3, [r7, #12]
     ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ab4:	3301      	adds	r3, #1
     ab6:	88ba      	ldrh	r2, [r7, #4]
     ab8:	1212      	asrs	r2, r2, #8
     aba:	b2d2      	uxtb	r2, r2
     abc:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
     abe:	68fb      	ldr	r3, [r7, #12]
     ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ac2:	3302      	adds	r3, #2
     ac4:	88ba      	ldrh	r2, [r7, #4]
     ac6:	b2d2      	uxtb	r2, r2
     ac8:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
     aca:	68fb      	ldr	r3, [r7, #12]
     acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ace:	3303      	adds	r3, #3
     ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
     ad2:	0e12      	lsrs	r2, r2, #24
     ad4:	b2d2      	uxtb	r2, r2
     ad6:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     adc:	3304      	adds	r3, #4
     ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
     ae0:	0c12      	lsrs	r2, r2, #16
     ae2:	b2d2      	uxtb	r2, r2
     ae4:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
     ae6:	68fb      	ldr	r3, [r7, #12]
     ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     aea:	3305      	adds	r3, #5
     aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
     aee:	0a12      	lsrs	r2, r2, #8
     af0:	b2d2      	uxtb	r2, r2
     af2:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
     af4:	68fb      	ldr	r3, [r7, #12]
     af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     af8:	3306      	adds	r3, #6
     afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
     afc:	b2d2      	uxtb	r2, r2
     afe:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
     b00:	68fb      	ldr	r3, [r7, #12]
     b02:	6a18      	ldr	r0, [r3, #32]
     b04:	68fb      	ldr	r3, [r7, #12]
     b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b08:	f107 0110 	add.w	r1, r7, #16
     b0c:	2307      	movs	r3, #7
     b0e:	9300      	str	r3, [sp, #0]
     b10:	460b      	mov	r3, r1
     b12:	68b9      	ldr	r1, [r7, #8]
     b14:	4c0a      	ldr	r4, [pc, #40]	; (b40 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
     b16:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
     b18:	7c3b      	ldrb	r3, [r7, #16]
     b1a:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
     b1c:	7c7b      	ldrb	r3, [r7, #17]
     b1e:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
     b20:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
     b22:	7cbb      	ldrb	r3, [r7, #18]
     b24:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
     b26:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
     b28:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
     b2a:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
     b2c:	68fb      	ldr	r3, [r7, #12]
     b2e:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
     b30:	bf00      	nop
	return output_data;
     b32:	68fb      	ldr	r3, [r7, #12]
     b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     b36:	4618      	mov	r0, r3
     b38:	371c      	adds	r7, #28
     b3a:	46bd      	mov	sp, r7
     b3c:	bd90      	pop	{r4, r7, pc}
     b3e:	bf00      	nop
     b40:	00001011 	.word	0x00001011

00000b44 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
     b44:	b590      	push	{r4, r7, lr}
     b46:	b087      	sub	sp, #28
     b48:	af02      	add	r7, sp, #8
     b4a:	60f8      	str	r0, [r7, #12]
     b4c:	60b9      	str	r1, [r7, #8]
     b4e:	4611      	mov	r1, r2
     b50:	461a      	mov	r2, r3
     b52:	460b      	mov	r3, r1
     b54:	71fb      	strb	r3, [r7, #7]
     b56:	4613      	mov	r3, r2
     b58:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
     b5a:	68fb      	ldr	r3, [r7, #12]
     b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b5e:	79fa      	ldrb	r2, [r7, #7]
     b60:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
     b62:	68fb      	ldr	r3, [r7, #12]
     b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b66:	3301      	adds	r3, #1
     b68:	88ba      	ldrh	r2, [r7, #4]
     b6a:	1212      	asrs	r2, r2, #8
     b6c:	b2d2      	uxtb	r2, r2
     b6e:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b74:	3302      	adds	r3, #2
     b76:	88ba      	ldrh	r2, [r7, #4]
     b78:	b2d2      	uxtb	r2, r2
     b7a:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
     b7c:	68fb      	ldr	r3, [r7, #12]
     b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b80:	3303      	adds	r3, #3
     b82:	f897 2020 	ldrb.w	r2, [r7, #32]
     b86:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
     b88:	68fb      	ldr	r3, [r7, #12]
     b8a:	6a18      	ldr	r0, [r3, #32]
     b8c:	68fb      	ldr	r3, [r7, #12]
     b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b90:	68fb      	ldr	r3, [r7, #12]
     b92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     b94:	2304      	movs	r3, #4
     b96:	9300      	str	r3, [sp, #0]
     b98:	460b      	mov	r3, r1
     b9a:	68b9      	ldr	r1, [r7, #8]
     b9c:	4c04      	ldr	r4, [pc, #16]	; (bb0 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
     b9e:	47a0      	blx	r4
	return rx[0];
     ba0:	68fb      	ldr	r3, [r7, #12]
     ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ba4:	781b      	ldrb	r3, [r3, #0]
}
     ba6:	4618      	mov	r0, r3
     ba8:	3714      	adds	r7, #20
     baa:	46bd      	mov	sp, r7
     bac:	bd90      	pop	{r4, r7, pc}
     bae:	bf00      	nop
     bb0:	00001011 	.word	0x00001011

00000bb4 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
     bb4:	b480      	push	{r7}
     bb6:	b083      	sub	sp, #12
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
     bbc:	460b      	mov	r3, r1
     bbe:	807b      	strh	r3, [r7, #2]
     bc0:	4613      	mov	r3, r2
     bc2:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
     bc4:	787b      	ldrb	r3, [r7, #1]
     bc6:	3b01      	subs	r3, #1
     bc8:	b29b      	uxth	r3, r3
     bca:	009b      	lsls	r3, r3, #2
     bcc:	b29a      	uxth	r2, r3
     bce:	887b      	ldrh	r3, [r7, #2]
     bd0:	4413      	add	r3, r2
     bd2:	b29b      	uxth	r3, r3
}
     bd4:	4618      	mov	r0, r3
     bd6:	370c      	adds	r7, #12
     bd8:	46bd      	mov	sp, r7
     bda:	bc80      	pop	{r7}
     bdc:	4770      	bx	lr
	...

00000be0 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
     be0:	b590      	push	{r4, r7, lr}
     be2:	b085      	sub	sp, #20
     be4:	af00      	add	r7, sp, #0
     be6:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
     be8:	4b25      	ldr	r3, [pc, #148]	; (c80 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
     bea:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	6d99      	ldr	r1, [r3, #88]	; 0x58
     bf0:	68fb      	ldr	r3, [r7, #12]
     bf2:	2202      	movs	r2, #2
     bf4:	6878      	ldr	r0, [r7, #4]
     bf6:	4c23      	ldr	r4, [pc, #140]	; (c84 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
     bf8:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
     bfa:	4b23      	ldr	r3, [pc, #140]	; (c88 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
     bfc:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	6d99      	ldr	r1, [r3, #88]	; 0x58
     c02:	68fb      	ldr	r3, [r7, #12]
     c04:	2204      	movs	r2, #4
     c06:	6878      	ldr	r0, [r7, #4]
     c08:	4c1e      	ldr	r4, [pc, #120]	; (c84 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
     c0a:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
     c0c:	4b1c      	ldr	r3, [pc, #112]	; (c80 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
     c0e:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	6d99      	ldr	r1, [r3, #88]	; 0x58
     c14:	68fb      	ldr	r3, [r7, #12]
     c16:	2207      	movs	r2, #7
     c18:	6878      	ldr	r0, [r7, #4]
     c1a:	4c1a      	ldr	r4, [pc, #104]	; (c84 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
     c1c:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
     c1e:	4b1b      	ldr	r3, [pc, #108]	; (c8c <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
     c20:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	6d99      	ldr	r1, [r3, #88]	; 0x58
     c26:	68fb      	ldr	r3, [r7, #12]
     c28:	2209      	movs	r2, #9
     c2a:	6878      	ldr	r0, [r7, #4]
     c2c:	4c15      	ldr	r4, [pc, #84]	; (c84 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
     c2e:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
     c30:	4b13      	ldr	r3, [pc, #76]	; (c80 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
     c32:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	6d99      	ldr	r1, [r3, #88]	; 0x58
     c38:	68fb      	ldr	r3, [r7, #12]
     c3a:	220c      	movs	r2, #12
     c3c:	6878      	ldr	r0, [r7, #4]
     c3e:	4c11      	ldr	r4, [pc, #68]	; (c84 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
     c40:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
     c42:	4b13      	ldr	r3, [pc, #76]	; (c90 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
     c44:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	6d99      	ldr	r1, [r3, #88]	; 0x58
     c4a:	68fb      	ldr	r3, [r7, #12]
     c4c:	220e      	movs	r2, #14
     c4e:	6878      	ldr	r0, [r7, #4]
     c50:	4c0c      	ldr	r4, [pc, #48]	; (c84 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
     c52:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
     c54:	4b0a      	ldr	r3, [pc, #40]	; (c80 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
     c56:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	6d99      	ldr	r1, [r3, #88]	; 0x58
     c5c:	68fb      	ldr	r3, [r7, #12]
     c5e:	2211      	movs	r2, #17
     c60:	6878      	ldr	r0, [r7, #4]
     c62:	4c08      	ldr	r4, [pc, #32]	; (c84 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
     c64:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
     c66:	4b0b      	ldr	r3, [pc, #44]	; (c94 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
     c68:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	6d99      	ldr	r1, [r3, #88]	; 0x58
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	2213      	movs	r2, #19
     c72:	6878      	ldr	r0, [r7, #4]
     c74:	4c03      	ldr	r4, [pc, #12]	; (c84 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
     c76:	47a0      	blx	r4

}
     c78:	bf00      	nop
     c7a:	3714      	adds	r7, #20
     c7c:	46bd      	mov	sp, r7
     c7e:	bd90      	pop	{r4, r7, pc}
     c80:	e89c4000 	.word	0xe89c4000
     c84:	000007a9 	.word	0x000007a9
     c88:	60a91000 	.word	0x60a91000
     c8c:	61e91000 	.word	0x61e91000
     c90:	63291000 	.word	0x63291000
     c94:	64691000 	.word	0x64691000

00000c98 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
     c98:	b590      	push	{r4, r7, lr}
     c9a:	b085      	sub	sp, #20
     c9c:	af02      	add	r7, sp, #8
     c9e:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
     ca4:	2300      	movs	r3, #0
     ca6:	9300      	str	r3, [sp, #0]
     ca8:	23f0      	movs	r3, #240	; 0xf0
     caa:	2202      	movs	r2, #2
     cac:	6878      	ldr	r0, [r7, #4]
     cae:	4c07      	ldr	r4, [pc, #28]	; (ccc <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
     cb0:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	6d99      	ldr	r1, [r3, #88]	; 0x58
     cb6:	2300      	movs	r3, #0
     cb8:	9300      	str	r3, [sp, #0]
     cba:	23ff      	movs	r3, #255	; 0xff
     cbc:	2202      	movs	r2, #2
     cbe:	6878      	ldr	r0, [r7, #4]
     cc0:	4c02      	ldr	r4, [pc, #8]	; (ccc <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
     cc2:	47a0      	blx	r4
}
     cc4:	bf00      	nop
     cc6:	370c      	adds	r7, #12
     cc8:	46bd      	mov	sp, r7
     cca:	bd90      	pop	{r4, r7, pc}
     ccc:	00000b45 	.word	0x00000b45

00000cd0 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
     cd0:	b580      	push	{r7, lr}
     cd2:	b082      	sub	sp, #8
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
	process_finished = 0;
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	2200      	movs	r2, #0
     cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
     ce0:	687b      	ldr	r3, [r7, #4]
     ce2:	2200      	movs	r2, #0
     ce4:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
     ce6:	4a31      	ldr	r2, [pc, #196]	; (dac <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
     cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     cf0:	492f      	ldr	r1, [pc, #188]	; (db0 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
     cf2:	4830      	ldr	r0, [pc, #192]	; (db4 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
     cf4:	4b30      	ldr	r3, [pc, #192]	; (db8 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
     cf6:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	79db      	ldrb	r3, [r3, #7]
     cfc:	2b01      	cmp	r3, #1
     cfe:	d009      	beq.n	d14 <_ZN13LTC2983_Class8SelfTestEv+0x44>
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	789b      	ldrb	r3, [r3, #2]
     d04:	b2db      	uxtb	r3, r3
     d06:	f083 0301 	eor.w	r3, r3, #1
     d0a:	b2db      	uxtb	r3, r3
     d0c:	2b00      	cmp	r3, #0
     d0e:	d001      	beq.n	d14 <_ZN13LTC2983_Class8SelfTestEv+0x44>
     d10:	2301      	movs	r3, #1
     d12:	e000      	b.n	d16 <_ZN13LTC2983_Class8SelfTestEv+0x46>
     d14:	2300      	movs	r3, #0
     d16:	2b00      	cmp	r3, #0
     d18:	d034      	beq.n	d84 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
     d1a:	2100      	movs	r1, #0
     d1c:	6878      	ldr	r0, [r7, #4]
     d1e:	4b27      	ldr	r3, [pc, #156]	; (dbc <_ZN13LTC2983_Class8SelfTestEv+0xec>)
     d20:	4798      	blx	r3
		delay_ms(1);
     d22:	2001      	movs	r0, #1
     d24:	4b26      	ldr	r3, [pc, #152]	; (dc0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
     d26:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	b2db      	uxtb	r3, r3
     d2e:	f083 0301 	eor.w	r3, r3, #1
     d32:	b2db      	uxtb	r3, r3
     d34:	2b00      	cmp	r3, #0
     d36:	d009      	beq.n	d4c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	789b      	ldrb	r3, [r3, #2]
     d3c:	b2db      	uxtb	r3, r3
     d3e:	f083 0301 	eor.w	r3, r3, #1
     d42:	b2db      	uxtb	r3, r3
     d44:	2b00      	cmp	r3, #0
     d46:	d001      	beq.n	d4c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
     d48:	2301      	movs	r3, #1
     d4a:	e000      	b.n	d4e <_ZN13LTC2983_Class8SelfTestEv+0x7e>
     d4c:	2300      	movs	r3, #0
     d4e:	2b00      	cmp	r3, #0
     d50:	d000      	beq.n	d54 <_ZN13LTC2983_Class8SelfTestEv+0x84>
     d52:	e7e9      	b.n	d28 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	789b      	ldrb	r3, [r3, #2]
     d58:	b2db      	uxtb	r3, r3
     d5a:	f083 0301 	eor.w	r3, r3, #1
     d5e:	b2db      	uxtb	r3, r3
     d60:	2b00      	cmp	r3, #0
     d62:	d0c9      	beq.n	cf8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	781b      	ldrb	r3, [r3, #0]
     d68:	b2db      	uxtb	r3, r3
     d6a:	2b00      	cmp	r3, #0
     d6c:	d006      	beq.n	d7c <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	78db      	ldrb	r3, [r3, #3]
     d72:	4619      	mov	r1, r3
     d74:	6878      	ldr	r0, [r7, #4]
     d76:	4b13      	ldr	r3, [pc, #76]	; (dc4 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
     d78:	4798      	blx	r3
     d7a:	e7bd      	b.n	cf8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
     d7c:	2001      	movs	r0, #1
     d7e:	4b10      	ldr	r3, [pc, #64]	; (dc0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
     d80:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
     d82:	e7b9      	b.n	cf8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
     d84:	490a      	ldr	r1, [pc, #40]	; (db0 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
     d86:	480b      	ldr	r0, [pc, #44]	; (db4 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
     d88:	4b0f      	ldr	r3, [pc, #60]	; (dc8 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
     d8a:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
     d8c:	687b      	ldr	r3, [r7, #4]
     d8e:	79db      	ldrb	r3, [r3, #7]
     d90:	2b01      	cmp	r3, #1
     d92:	bf0c      	ite	eq
     d94:	2301      	moveq	r3, #1
     d96:	2300      	movne	r3, #0
     d98:	b2da      	uxtb	r2, r3
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	771a      	strb	r2, [r3, #28]
	return	isOK;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	7f1b      	ldrb	r3, [r3, #28]
	}
     da2:	4618      	mov	r0, r3
     da4:	3708      	adds	r7, #8
     da6:	46bd      	mov	sp, r7
     da8:	bd80      	pop	{r7, pc}
     daa:	bf00      	nop
     dac:	20001118 	.word	0x20001118
     db0:	000006a5 	.word	0x000006a5
     db4:	20001038 	.word	0x20001038
     db8:	00001c41 	.word	0x00001c41
     dbc:	000007fd 	.word	0x000007fd
     dc0:	00004441 	.word	0x00004441
     dc4:	00000961 	.word	0x00000961
     dc8:	00001be9 	.word	0x00001be9

00000dcc <_Z41__static_initialization_and_destruction_0ii>:
     dcc:	b580      	push	{r7, lr}
     dce:	b082      	sub	sp, #8
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
     dd4:	6039      	str	r1, [r7, #0]
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	2b01      	cmp	r3, #1
     dda:	d143      	bne.n	e64 <_Z41__static_initialization_and_destruction_0ii+0x98>
     ddc:	683b      	ldr	r3, [r7, #0]
     dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
     de2:	4293      	cmp	r3, r2
     de4:	d13e      	bne.n	e64 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     de6:	4921      	ldr	r1, [pc, #132]	; (e6c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
     de8:	4821      	ldr	r0, [pc, #132]	; (e70 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     dea:	4b22      	ldr	r3, [pc, #136]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     dec:	4798      	blx	r3
     dee:	4a22      	ldr	r2, [pc, #136]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     df0:	4922      	ldr	r1, [pc, #136]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     df2:	481f      	ldr	r0, [pc, #124]	; (e70 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     df4:	4b22      	ldr	r3, [pc, #136]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     df6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     df8:	4922      	ldr	r1, [pc, #136]	; (e84 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     dfa:	4823      	ldr	r0, [pc, #140]	; (e88 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     dfc:	4b1d      	ldr	r3, [pc, #116]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     dfe:	4798      	blx	r3
     e00:	4a1d      	ldr	r2, [pc, #116]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e02:	491e      	ldr	r1, [pc, #120]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e04:	4820      	ldr	r0, [pc, #128]	; (e88 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     e06:	4b1e      	ldr	r3, [pc, #120]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e08:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     e0a:	4920      	ldr	r1, [pc, #128]	; (e8c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     e0c:	4820      	ldr	r0, [pc, #128]	; (e90 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     e0e:	4b19      	ldr	r3, [pc, #100]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e10:	4798      	blx	r3
     e12:	4a19      	ldr	r2, [pc, #100]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e14:	4919      	ldr	r1, [pc, #100]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e16:	481e      	ldr	r0, [pc, #120]	; (e90 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     e18:	4b19      	ldr	r3, [pc, #100]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e1a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     e1c:	491d      	ldr	r1, [pc, #116]	; (e94 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     e1e:	481e      	ldr	r0, [pc, #120]	; (e98 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     e20:	4b14      	ldr	r3, [pc, #80]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e22:	4798      	blx	r3
     e24:	4a14      	ldr	r2, [pc, #80]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e26:	4915      	ldr	r1, [pc, #84]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e28:	481b      	ldr	r0, [pc, #108]	; (e98 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     e2a:	4b15      	ldr	r3, [pc, #84]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e2c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     e2e:	491b      	ldr	r1, [pc, #108]	; (e9c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e30:	481b      	ldr	r0, [pc, #108]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     e32:	4b10      	ldr	r3, [pc, #64]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e34:	4798      	blx	r3
     e36:	4a10      	ldr	r2, [pc, #64]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e38:	4910      	ldr	r1, [pc, #64]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e3a:	4819      	ldr	r0, [pc, #100]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     e3c:	4b10      	ldr	r3, [pc, #64]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e3e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     e40:	4918      	ldr	r1, [pc, #96]	; (ea4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e42:	4819      	ldr	r0, [pc, #100]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     e44:	4b0b      	ldr	r3, [pc, #44]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e46:	4798      	blx	r3
     e48:	4a0b      	ldr	r2, [pc, #44]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e4a:	490c      	ldr	r1, [pc, #48]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e4c:	4816      	ldr	r0, [pc, #88]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     e4e:	4b0c      	ldr	r3, [pc, #48]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e50:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     e52:	4916      	ldr	r1, [pc, #88]	; (eac <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     e54:	4816      	ldr	r0, [pc, #88]	; (eb0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e56:	4b07      	ldr	r3, [pc, #28]	; (e74 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     e58:	4798      	blx	r3
     e5a:	4a07      	ldr	r2, [pc, #28]	; (e78 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     e5c:	4907      	ldr	r1, [pc, #28]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     e5e:	4814      	ldr	r0, [pc, #80]	; (eb0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e60:	4b07      	ldr	r3, [pc, #28]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     e62:	4798      	blx	r3
     e64:	bf00      	nop
     e66:	3708      	adds	r7, #8
     e68:	46bd      	mov	sp, r7
     e6a:	bd80      	pop	{r7, pc}
     e6c:	200022dc 	.word	0x200022dc
     e70:	20001038 	.word	0x20001038
     e74:	00001a0d 	.word	0x00001a0d
     e78:	20000000 	.word	0x20000000
     e7c:	00001a45 	.word	0x00001a45
     e80:	0000f4b1 	.word	0x0000f4b1
     e84:	20002370 	.word	0x20002370
     e88:	20001058 	.word	0x20001058
     e8c:	20002474 	.word	0x20002474
     e90:	20001078 	.word	0x20001078
     e94:	20002390 	.word	0x20002390
     e98:	20001098 	.word	0x20001098
     e9c:	20002434 	.word	0x20002434
     ea0:	200010b8 	.word	0x200010b8
     ea4:	20002454 	.word	0x20002454
     ea8:	200010d8 	.word	0x200010d8
     eac:	2000234c 	.word	0x2000234c
     eb0:	200010f8 	.word	0x200010f8

00000eb4 <_GLOBAL__sub_I_ptrLTCClass>:
     eb4:	b580      	push	{r7, lr}
     eb6:	af00      	add	r7, sp, #0
     eb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     ebc:	2001      	movs	r0, #1
     ebe:	4b01      	ldr	r3, [pc, #4]	; (ec4 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
     ec0:	4798      	blx	r3
     ec2:	bd80      	pop	{r7, pc}
     ec4:	00000dcd 	.word	0x00000dcd

00000ec8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     ec8:	b480      	push	{r7}
     eca:	b085      	sub	sp, #20
     ecc:	af00      	add	r7, sp, #0
     ece:	60f8      	str	r0, [r7, #12]
     ed0:	460b      	mov	r3, r1
     ed2:	607a      	str	r2, [r7, #4]
     ed4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ed6:	7afb      	ldrb	r3, [r7, #11]
     ed8:	68fa      	ldr	r2, [r7, #12]
     eda:	01db      	lsls	r3, r3, #7
     edc:	4413      	add	r3, r2
     ede:	3318      	adds	r3, #24
     ee0:	687a      	ldr	r2, [r7, #4]
     ee2:	601a      	str	r2, [r3, #0]
}
     ee4:	bf00      	nop
     ee6:	3714      	adds	r7, #20
     ee8:	46bd      	mov	sp, r7
     eea:	bc80      	pop	{r7}
     eec:	4770      	bx	lr

00000eee <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     eee:	b480      	push	{r7}
     ef0:	b085      	sub	sp, #20
     ef2:	af00      	add	r7, sp, #0
     ef4:	60f8      	str	r0, [r7, #12]
     ef6:	460b      	mov	r3, r1
     ef8:	607a      	str	r2, [r7, #4]
     efa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     efc:	7afb      	ldrb	r3, [r7, #11]
     efe:	68fa      	ldr	r2, [r7, #12]
     f00:	01db      	lsls	r3, r3, #7
     f02:	4413      	add	r3, r2
     f04:	3314      	adds	r3, #20
     f06:	687a      	ldr	r2, [r7, #4]
     f08:	601a      	str	r2, [r3, #0]
}
     f0a:	bf00      	nop
     f0c:	3714      	adds	r7, #20
     f0e:	46bd      	mov	sp, r7
     f10:	bc80      	pop	{r7}
     f12:	4770      	bx	lr

00000f14 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     f14:	b580      	push	{r7, lr}
     f16:	b082      	sub	sp, #8
     f18:	af00      	add	r7, sp, #0
     f1a:	4603      	mov	r3, r0
     f1c:	6039      	str	r1, [r7, #0]
     f1e:	71fb      	strb	r3, [r7, #7]
     f20:	4613      	mov	r3, r2
     f22:	71bb      	strb	r3, [r7, #6]
	if (level) {
     f24:	79bb      	ldrb	r3, [r7, #6]
     f26:	2b00      	cmp	r3, #0
     f28:	d006      	beq.n	f38 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     f2a:	79fb      	ldrb	r3, [r7, #7]
     f2c:	683a      	ldr	r2, [r7, #0]
     f2e:	4619      	mov	r1, r3
     f30:	4806      	ldr	r0, [pc, #24]	; (f4c <_gpio_set_level+0x38>)
     f32:	4b07      	ldr	r3, [pc, #28]	; (f50 <_gpio_set_level+0x3c>)
     f34:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     f36:	e005      	b.n	f44 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     f38:	79fb      	ldrb	r3, [r7, #7]
     f3a:	683a      	ldr	r2, [r7, #0]
     f3c:	4619      	mov	r1, r3
     f3e:	4803      	ldr	r0, [pc, #12]	; (f4c <_gpio_set_level+0x38>)
     f40:	4b04      	ldr	r3, [pc, #16]	; (f54 <_gpio_set_level+0x40>)
     f42:	4798      	blx	r3
}
     f44:	bf00      	nop
     f46:	3708      	adds	r7, #8
     f48:	46bd      	mov	sp, r7
     f4a:	bd80      	pop	{r7, pc}
     f4c:	41008000 	.word	0x41008000
     f50:	00000ec9 	.word	0x00000ec9
     f54:	00000eef 	.word	0x00000eef

00000f58 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     f58:	b580      	push	{r7, lr}
     f5a:	b082      	sub	sp, #8
     f5c:	af00      	add	r7, sp, #0
     f5e:	4603      	mov	r3, r0
     f60:	460a      	mov	r2, r1
     f62:	71fb      	strb	r3, [r7, #7]
     f64:	4613      	mov	r3, r2
     f66:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     f68:	79fb      	ldrb	r3, [r7, #7]
     f6a:	115b      	asrs	r3, r3, #5
     f6c:	b2d8      	uxtb	r0, r3
     f6e:	79fb      	ldrb	r3, [r7, #7]
     f70:	f003 031f 	and.w	r3, r3, #31
     f74:	2201      	movs	r2, #1
     f76:	fa02 f303 	lsl.w	r3, r2, r3
     f7a:	79ba      	ldrb	r2, [r7, #6]
     f7c:	4619      	mov	r1, r3
     f7e:	4b03      	ldr	r3, [pc, #12]	; (f8c <gpio_set_pin_level+0x34>)
     f80:	4798      	blx	r3
}
     f82:	bf00      	nop
     f84:	3708      	adds	r7, #8
     f86:	46bd      	mov	sp, r7
     f88:	bd80      	pop	{r7, pc}
     f8a:	bf00      	nop
     f8c:	00000f15 	.word	0x00000f15

00000f90 <_ZN6LT_SPI4initEv>:
// default destructor
LT_SPI::~LT_SPI()
{
} //~LT_SPI

void LT_SPI::init(){
     f90:	b580      	push	{r7, lr}
     f92:	b082      	sub	sp, #8
     f94:	af00      	add	r7, sp, #0
     f96:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	685a      	ldr	r2, [r3, #4]
     f9c:	687b      	ldr	r3, [r7, #4]
     f9e:	691b      	ldr	r3, [r3, #16]
     fa0:	4619      	mov	r1, r3
     fa2:	4610      	mov	r0, r2
     fa4:	4b0e      	ldr	r3, [pc, #56]	; (fe0 <_ZN6LT_SPI4initEv+0x50>)
     fa6:	4798      	blx	r3
	spiTemp->init();
     fa8:	687b      	ldr	r3, [r7, #4]
     faa:	685b      	ldr	r3, [r3, #4]
     fac:	4618      	mov	r0, r3
     fae:	4b0d      	ldr	r3, [pc, #52]	; (fe4 <_ZN6LT_SPI4initEv+0x54>)
     fb0:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	685b      	ldr	r3, [r3, #4]
     fb6:	685a      	ldr	r2, [r3, #4]
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	685b      	ldr	r3, [r3, #4]
     fc0:	689a      	ldr	r2, [r3, #8]
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
     fc6:	687b      	ldr	r3, [r7, #4]
     fc8:	685b      	ldr	r3, [r3, #4]
     fca:	4618      	mov	r0, r3
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <_ZN6LT_SPI4initEv+0x58>)
     fce:	4798      	blx	r3
	ready=true;
     fd0:	687b      	ldr	r3, [r7, #4]
     fd2:	2201      	movs	r2, #1
     fd4:	701a      	strb	r2, [r3, #0]
}
     fd6:	bf00      	nop
     fd8:	3708      	adds	r7, #8
     fda:	46bd      	mov	sp, r7
     fdc:	bd80      	pop	{r7, pc}
     fde:	bf00      	nop
     fe0:	00001451 	.word	0x00001451
     fe4:	00001409 	.word	0x00001409
     fe8:	00001475 	.word	0x00001475

00000fec <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
     fec:	b480      	push	{r7}
     fee:	b083      	sub	sp, #12
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
     ff4:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	683a      	ldr	r2, [r7, #0]
     ffa:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
     ffc:	4a03      	ldr	r2, [pc, #12]	; (100c <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	6013      	str	r3, [r2, #0]
}
    1002:	bf00      	nop
    1004:	370c      	adds	r7, #12
    1006:	46bd      	mov	sp, r7
    1008:	bc80      	pop	{r7}
    100a:	4770      	bx	lr
    100c:	2000111c 	.word	0x2000111c

00001010 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
    1010:	b580      	push	{r7, lr}
    1012:	b086      	sub	sp, #24
    1014:	af00      	add	r7, sp, #0
    1016:	60f8      	str	r0, [r7, #12]
    1018:	60b9      	str	r1, [r7, #8]
    101a:	607a      	str	r2, [r7, #4]
    101c:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
    1024:	68b9      	ldr	r1, [r7, #8]
    1026:	68f8      	ldr	r0, [r7, #12]
    1028:	4b25      	ldr	r3, [pc, #148]	; (10c0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
    102a:	4798      	blx	r3
	
	switch(rOrw){
    102c:	7dfb      	ldrb	r3, [r7, #23]
    102e:	2b02      	cmp	r3, #2
    1030:	d002      	beq.n	1038 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
    1032:	2b03      	cmp	r3, #3
    1034:	d009      	beq.n	104a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
    1036:	e028      	b.n	108a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
    1038:	68fb      	ldr	r3, [r7, #12]
    103a:	685b      	ldr	r3, [r3, #4]
    103c:	f897 2020 	ldrb.w	r2, [r7, #32]
    1040:	6879      	ldr	r1, [r7, #4]
    1042:	4618      	mov	r0, r3
    1044:	4b1f      	ldr	r3, [pc, #124]	; (10c4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    1046:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
    1048:	e031      	b.n	10ae <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
    104a:	68fb      	ldr	r3, [r7, #12]
    104c:	685b      	ldr	r3, [r3, #4]
    104e:	2203      	movs	r2, #3
    1050:	6879      	ldr	r1, [r7, #4]
    1052:	4618      	mov	r0, r3
    1054:	4b1b      	ldr	r3, [pc, #108]	; (10c4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    1056:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
    1058:	f897 3020 	ldrb.w	r3, [r7, #32]
    105c:	2b04      	cmp	r3, #4
    105e:	dd0b      	ble.n	1078 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
    1060:	68fb      	ldr	r3, [r7, #12]
    1062:	6858      	ldr	r0, [r3, #4]
    1064:	f897 3020 	ldrb.w	r3, [r7, #32]
    1068:	3b03      	subs	r3, #3
    106a:	461a      	mov	r2, r3
    106c:	6839      	ldr	r1, [r7, #0]
    106e:	4b16      	ldr	r3, [pc, #88]	; (10c8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    1070:	4798      	blx	r3
					asm("nop");
    1072:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
    1074:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
    1076:	e01a      	b.n	10ae <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
    1078:	68fb      	ldr	r3, [r7, #12]
    107a:	685b      	ldr	r3, [r3, #4]
    107c:	2201      	movs	r2, #1
    107e:	6839      	ldr	r1, [r7, #0]
    1080:	4618      	mov	r0, r3
    1082:	4b11      	ldr	r3, [pc, #68]	; (10c8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    1084:	4798      	blx	r3
				asm("nop");
    1086:	bf00      	nop
			break;
    1088:	e011      	b.n	10ae <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
    108a:	68fb      	ldr	r3, [r7, #12]
    108c:	685b      	ldr	r3, [r3, #4]
    108e:	f897 2020 	ldrb.w	r2, [r7, #32]
    1092:	6879      	ldr	r1, [r7, #4]
    1094:	4618      	mov	r0, r3
    1096:	4b0b      	ldr	r3, [pc, #44]	; (10c4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    1098:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
    109a:	68fb      	ldr	r3, [r7, #12]
    109c:	6858      	ldr	r0, [r3, #4]
    109e:	f897 3020 	ldrb.w	r3, [r7, #32]
    10a2:	3b03      	subs	r3, #3
    10a4:	461a      	mov	r2, r3
    10a6:	6839      	ldr	r1, [r7, #0]
    10a8:	4b07      	ldr	r3, [pc, #28]	; (10c8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    10aa:	4798      	blx	r3
			break;
    10ac:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
    10ae:	68b9      	ldr	r1, [r7, #8]
    10b0:	68f8      	ldr	r0, [r7, #12]
    10b2:	4b06      	ldr	r3, [pc, #24]	; (10cc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
    10b4:	4798      	blx	r3
	asm("nop");
    10b6:	bf00      	nop
	
}
    10b8:	bf00      	nop
    10ba:	3718      	adds	r7, #24
    10bc:	46bd      	mov	sp, r7
    10be:	bd80      	pop	{r7, pc}
    10c0:	000010d1 	.word	0x000010d1
    10c4:	000014b1 	.word	0x000014b1
    10c8:	000014f5 	.word	0x000014f5
    10cc:	00001119 	.word	0x00001119

000010d0 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
    10d0:	b580      	push	{r7, lr}
    10d2:	b082      	sub	sp, #8
    10d4:	af00      	add	r7, sp, #0
    10d6:	6078      	str	r0, [r7, #4]
    10d8:	6039      	str	r1, [r7, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    10da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    10de:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
    10e0:	683b      	ldr	r3, [r7, #0]
    10e2:	b2db      	uxtb	r3, r3
    10e4:	2100      	movs	r1, #0
    10e6:	4618      	mov	r0, r3
    10e8:	4b08      	ldr	r3, [pc, #32]	; (110c <_ZN6LT_SPI4OpenEm+0x3c>)
    10ea:	4798      	blx	r3
	 delay_us(10);
    10ec:	200a      	movs	r0, #10
    10ee:	4b08      	ldr	r3, [pc, #32]	; (1110 <_ZN6LT_SPI4OpenEm+0x40>)
    10f0:	4798      	blx	r3
	spiTemp->Enable();
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	685b      	ldr	r3, [r3, #4]
    10f6:	4618      	mov	r0, r3
    10f8:	4b06      	ldr	r3, [pc, #24]	; (1114 <_ZN6LT_SPI4OpenEm+0x44>)
    10fa:	4798      	blx	r3
	 delay_us(10);
    10fc:	200a      	movs	r0, #10
    10fe:	4b04      	ldr	r3, [pc, #16]	; (1110 <_ZN6LT_SPI4OpenEm+0x40>)
    1100:	4798      	blx	r3
 }
    1102:	bf00      	nop
    1104:	3708      	adds	r7, #8
    1106:	46bd      	mov	sp, r7
    1108:	bd80      	pop	{r7, pc}
    110a:	bf00      	nop
    110c:	00000f59 	.word	0x00000f59
    1110:	0000440d 	.word	0x0000440d
    1114:	00001475 	.word	0x00001475

00001118 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
    1118:	b580      	push	{r7, lr}
    111a:	b082      	sub	sp, #8
    111c:	af00      	add	r7, sp, #0
    111e:	6078      	str	r0, [r7, #4]
    1120:	6039      	str	r1, [r7, #0]

	  delay_us(10);
    1122:	200a      	movs	r0, #10
    1124:	4b0b      	ldr	r3, [pc, #44]	; (1154 <_ZN6LT_SPI5CloseEm+0x3c>)
    1126:	4798      	blx	r3
	 spiTemp->Disable();
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	685b      	ldr	r3, [r3, #4]
    112c:	4618      	mov	r0, r3
    112e:	4b0a      	ldr	r3, [pc, #40]	; (1158 <_ZN6LT_SPI5CloseEm+0x40>)
    1130:	4798      	blx	r3
	delay_us(10);
    1132:	200a      	movs	r0, #10
    1134:	4b07      	ldr	r3, [pc, #28]	; (1154 <_ZN6LT_SPI5CloseEm+0x3c>)
    1136:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
    1138:	683b      	ldr	r3, [r7, #0]
    113a:	b2db      	uxtb	r3, r3
    113c:	2101      	movs	r1, #1
    113e:	4618      	mov	r0, r3
    1140:	4b06      	ldr	r3, [pc, #24]	; (115c <_ZN6LT_SPI5CloseEm+0x44>)
    1142:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
    1144:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1148:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
    114a:	bf00      	nop
    114c:	3708      	adds	r7, #8
    114e:	46bd      	mov	sp, r7
    1150:	bd80      	pop	{r7, pc}
    1152:	bf00      	nop
    1154:	0000440d 	.word	0x0000440d
    1158:	00001539 	.word	0x00001539
    115c:	00000f59 	.word	0x00000f59

00001160 <_Z41__static_initialization_and_destruction_0ii>:
    1160:	b580      	push	{r7, lr}
    1162:	b082      	sub	sp, #8
    1164:	af00      	add	r7, sp, #0
    1166:	6078      	str	r0, [r7, #4]
    1168:	6039      	str	r1, [r7, #0]
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	2b01      	cmp	r3, #1
    116e:	d10c      	bne.n	118a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1170:	683b      	ldr	r3, [r7, #0]
    1172:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1176:	4293      	cmp	r3, r2
    1178:	d107      	bne.n	118a <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
    117a:	4806      	ldr	r0, [pc, #24]	; (1194 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    117c:	4b06      	ldr	r3, [pc, #24]	; (1198 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    117e:	4798      	blx	r3
    1180:	4a06      	ldr	r2, [pc, #24]	; (119c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1182:	4907      	ldr	r1, [pc, #28]	; (11a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1184:	4803      	ldr	r0, [pc, #12]	; (1194 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1188:	4798      	blx	r3
    118a:	bf00      	nop
    118c:	3708      	adds	r7, #8
    118e:	46bd      	mov	sp, r7
    1190:	bd80      	pop	{r7, pc}
    1192:	bf00      	nop
    1194:	20001120 	.word	0x20001120
    1198:	000013d5 	.word	0x000013d5
    119c:	20000000 	.word	0x20000000
    11a0:	000013f5 	.word	0x000013f5
    11a4:	0000f4b1 	.word	0x0000f4b1

000011a8 <_GLOBAL__sub_I_ptrLTSPIClass>:
    11a8:	b580      	push	{r7, lr}
    11aa:	af00      	add	r7, sp, #0
    11ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    11b0:	2001      	movs	r0, #1
    11b2:	4b01      	ldr	r3, [pc, #4]	; (11b8 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
    11b4:	4798      	blx	r3
    11b6:	bd80      	pop	{r7, pc}
    11b8:	00001161 	.word	0x00001161

000011bc <main>:
 */ 

#include "main.h"

int main(void)
{
    11bc:	b580      	push	{r7, lr}
    11be:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    11c0:	4b06      	ldr	r3, [pc, #24]	; (11dc <main+0x20>)
    11c2:	4798      	blx	r3
	
	usb.Init();
    11c4:	4806      	ldr	r0, [pc, #24]	; (11e0 <main+0x24>)
    11c6:	4b07      	ldr	r3, [pc, #28]	; (11e4 <main+0x28>)
    11c8:	4798      	blx	r3
	delay_ms(100);
    11ca:	2064      	movs	r0, #100	; 0x64
    11cc:	4b06      	ldr	r3, [pc, #24]	; (11e8 <main+0x2c>)
    11ce:	4798      	blx	r3
	StartLivePulse();
    11d0:	4b06      	ldr	r3, [pc, #24]	; (11ec <main+0x30>)
    11d2:	4798      	blx	r3
	LTC2983_test();
    11d4:	4b06      	ldr	r3, [pc, #24]	; (11f0 <main+0x34>)
    11d6:	4798      	blx	r3
	//QSPIDriverTest();
	//DateTimeTest();
//	EEPROM_Test();
//	IO_ExpanderTest();
		/* Replace with your application code */
	while (1) {
    11d8:	e7fe      	b.n	11d8 <main+0x1c>
    11da:	bf00      	nop
    11dc:	00002a41 	.word	0x00002a41
    11e0:	20001aa4 	.word	0x20001aa4
    11e4:	000020b1 	.word	0x000020b1
    11e8:	00004441 	.word	0x00004441
    11ec:	000011f5 	.word	0x000011f5
    11f0:	00001241 	.word	0x00001241

000011f4 <_Z14StartLivePulsev>:
		
		
	}
}

uint8_t	StartLivePulse(void){
    11f4:	b580      	push	{r7, lr}
    11f6:	b082      	sub	sp, #8
    11f8:	af00      	add	r7, sp, #0
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
    11fa:	490a      	ldr	r1, [pc, #40]	; (1224 <_Z14StartLivePulsev+0x30>)
    11fc:	480a      	ldr	r0, [pc, #40]	; (1228 <_Z14StartLivePulsev+0x34>)
    11fe:	4b0b      	ldr	r3, [pc, #44]	; (122c <_Z14StartLivePulsev+0x38>)
    1200:	4798      	blx	r3
    1202:	4603      	mov	r3, r0
    1204:	490a      	ldr	r1, [pc, #40]	; (1230 <_Z14StartLivePulsev+0x3c>)
    1206:	4618      	mov	r0, r3
    1208:	4b0a      	ldr	r3, [pc, #40]	; (1234 <_Z14StartLivePulsev+0x40>)
    120a:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
    120c:	480a      	ldr	r0, [pc, #40]	; (1238 <_Z14StartLivePulsev+0x44>)
    120e:	4b0b      	ldr	r3, [pc, #44]	; (123c <_Z14StartLivePulsev+0x48>)
    1210:	4798      	blx	r3
    1212:	4603      	mov	r3, r0
    1214:	607b      	str	r3, [r7, #4]
	return p;
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	b2db      	uxtb	r3, r3
}
    121a:	4618      	mov	r0, r3
    121c:	3708      	adds	r7, #8
    121e:	46bd      	mov	sp, r7
    1220:	bd80      	pop	{r7, pc}
    1222:	bf00      	nop
    1224:	0000fdbc 	.word	0x0000fdbc
    1228:	20001aa4 	.word	0x20001aa4
    122c:	00001299 	.word	0x00001299
    1230:	0000fddc 	.word	0x0000fddc
    1234:	000012b9 	.word	0x000012b9
    1238:	200023d0 	.word	0x200023d0
    123c:	000048b5 	.word	0x000048b5

00001240 <_Z12LTC2983_testv>:
// 	}

	return	 value;
}

void	LTC2983_test(void){
    1240:	b580      	push	{r7, lr}
    1242:	b09a      	sub	sp, #104	; 0x68
    1244:	af00      	add	r7, sp, #0
	LTC2983_Class	LTC(&SPI_TEMP);
    1246:	463b      	mov	r3, r7
    1248:	490e      	ldr	r1, [pc, #56]	; (1284 <_Z12LTC2983_testv+0x44>)
    124a:	4618      	mov	r0, r3
    124c:	4b0e      	ldr	r3, [pc, #56]	; (1288 <_Z12LTC2983_testv+0x48>)
    124e:	4798      	blx	r3
	LTC.Init();
    1250:	463b      	mov	r3, r7
    1252:	4618      	mov	r0, r3
    1254:	4b0d      	ldr	r3, [pc, #52]	; (128c <_Z12LTC2983_testv+0x4c>)
    1256:	4798      	blx	r3
//	LTC.print_title();
	//LTC.configure_channels();
	//LTC.configure_global_parameters();
	while (LTC.ready)
    1258:	783b      	ldrb	r3, [r7, #0]
    125a:	b2db      	uxtb	r3, r3
    125c:	2b00      	cmp	r3, #0
    125e:	d009      	beq.n	1274 <_Z12LTC2983_testv+0x34>
	{
		// LTC.measure_channel(, 4, TEMPERATURE);      // Ch 4: RTD PT-100
		 delay_ms(1);
    1260:	2001      	movs	r0, #1
    1262:	4b0b      	ldr	r3, [pc, #44]	; (1290 <_Z12LTC2983_testv+0x50>)
    1264:	4798      	blx	r3
	//	 LTC.measure_channel(CHIP_SELECT, 8, TEMPERATURE);      // Ch 8: RTD PT-100
		  delay_ms(1);
    1266:	2001      	movs	r0, #1
    1268:	4b09      	ldr	r3, [pc, #36]	; (1290 <_Z12LTC2983_testv+0x50>)
    126a:	4798      	blx	r3
	//	 LTC.measure_channel(CHIP_SELECT, 15, TEMPERATURE);     // Ch 15: RTD PT-100
		  delay_ms(1);
    126c:	2001      	movs	r0, #1
    126e:	4b08      	ldr	r3, [pc, #32]	; (1290 <_Z12LTC2983_testv+0x50>)
    1270:	4798      	blx	r3
	while (LTC.ready)
    1272:	e7f1      	b.n	1258 <_Z12LTC2983_testv+0x18>
	LTC2983_Class	LTC(&SPI_TEMP);
    1274:	463b      	mov	r3, r7
    1276:	4618      	mov	r0, r3
    1278:	4b06      	ldr	r3, [pc, #24]	; (1294 <_Z12LTC2983_testv+0x54>)
    127a:	4798      	blx	r3
	}
	
}
    127c:	bf00      	nop
    127e:	3768      	adds	r7, #104	; 0x68
    1280:	46bd      	mov	sp, r7
    1282:	bd80      	pop	{r7, pc}
    1284:	20002314 	.word	0x20002314
    1288:	000006d9 	.word	0x000006d9
    128c:	00000701 	.word	0x00000701
    1290:	00004441 	.word	0x00004441
    1294:	000006c5 	.word	0x000006c5

00001298 <_ZlsIA30_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
    1298:	b580      	push	{r7, lr}
    129a:	b082      	sub	sp, #8
    129c:	af00      	add	r7, sp, #0
    129e:	6078      	str	r0, [r7, #4]
    12a0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    12a2:	6839      	ldr	r1, [r7, #0]
    12a4:	6878      	ldr	r0, [r7, #4]
    12a6:	4b03      	ldr	r3, [pc, #12]	; (12b4 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
    12a8:	4798      	blx	r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	4618      	mov	r0, r3
    12ae:	3708      	adds	r7, #8
    12b0:	46bd      	mov	sp, r7
    12b2:	bd80      	pop	{r7, pc}
    12b4:	000025d1 	.word	0x000025d1

000012b8 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    12b8:	b580      	push	{r7, lr}
    12ba:	b082      	sub	sp, #8
    12bc:	af00      	add	r7, sp, #0
    12be:	6078      	str	r0, [r7, #4]
    12c0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    12c2:	6839      	ldr	r1, [r7, #0]
    12c4:	6878      	ldr	r0, [r7, #4]
    12c6:	4b03      	ldr	r3, [pc, #12]	; (12d4 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
    12c8:	4798      	blx	r3
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	4618      	mov	r0, r3
    12ce:	3708      	adds	r7, #8
    12d0:	46bd      	mov	sp, r7
    12d2:	bd80      	pop	{r7, pc}
    12d4:	000025d1 	.word	0x000025d1

000012d8 <_Z41__static_initialization_and_destruction_0ii>:
// 		{
// 			mcp.digitalWrite(8+i,mcp.digitalRead(i));
// 		}
// 		
// 	}
    12d8:	b580      	push	{r7, lr}
    12da:	b082      	sub	sp, #8
    12dc:	af00      	add	r7, sp, #0
    12de:	6078      	str	r0, [r7, #4]
    12e0:	6039      	str	r1, [r7, #0]
    12e2:	687b      	ldr	r3, [r7, #4]
    12e4:	2b01      	cmp	r3, #1
    12e6:	d143      	bne.n	1370 <_Z41__static_initialization_and_destruction_0ii+0x98>
    12e8:	683b      	ldr	r3, [r7, #0]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	4293      	cmp	r3, r2
    12f0:	d13e      	bne.n	1370 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    12f2:	4921      	ldr	r1, [pc, #132]	; (1378 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    12f4:	4821      	ldr	r0, [pc, #132]	; (137c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    12f6:	4b22      	ldr	r3, [pc, #136]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    12f8:	4798      	blx	r3
    12fa:	4a22      	ldr	r2, [pc, #136]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    12fc:	4922      	ldr	r1, [pc, #136]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    12fe:	481f      	ldr	r0, [pc, #124]	; (137c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    1300:	4b22      	ldr	r3, [pc, #136]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1302:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    1304:	4922      	ldr	r1, [pc, #136]	; (1390 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    1306:	4823      	ldr	r0, [pc, #140]	; (1394 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1308:	4b1d      	ldr	r3, [pc, #116]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    130a:	4798      	blx	r3
    130c:	4a1d      	ldr	r2, [pc, #116]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    130e:	491e      	ldr	r1, [pc, #120]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1310:	4820      	ldr	r0, [pc, #128]	; (1394 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1312:	4b1e      	ldr	r3, [pc, #120]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1314:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    1316:	4920      	ldr	r1, [pc, #128]	; (1398 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    1318:	4820      	ldr	r0, [pc, #128]	; (139c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    131a:	4b19      	ldr	r3, [pc, #100]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    131c:	4798      	blx	r3
    131e:	4a19      	ldr	r2, [pc, #100]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1320:	4919      	ldr	r1, [pc, #100]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1322:	481e      	ldr	r0, [pc, #120]	; (139c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    1324:	4b19      	ldr	r3, [pc, #100]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1326:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1328:	491d      	ldr	r1, [pc, #116]	; (13a0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    132a:	481e      	ldr	r0, [pc, #120]	; (13a4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    132c:	4b14      	ldr	r3, [pc, #80]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    132e:	4798      	blx	r3
    1330:	4a14      	ldr	r2, [pc, #80]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1332:	4915      	ldr	r1, [pc, #84]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1334:	481b      	ldr	r0, [pc, #108]	; (13a4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1336:	4b15      	ldr	r3, [pc, #84]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1338:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    133a:	491b      	ldr	r1, [pc, #108]	; (13a8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    133c:	481b      	ldr	r0, [pc, #108]	; (13ac <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    133e:	4b10      	ldr	r3, [pc, #64]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1340:	4798      	blx	r3
    1342:	4a10      	ldr	r2, [pc, #64]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1344:	4910      	ldr	r1, [pc, #64]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1346:	4819      	ldr	r0, [pc, #100]	; (13ac <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1348:	4b10      	ldr	r3, [pc, #64]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    134a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    134c:	4918      	ldr	r1, [pc, #96]	; (13b0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    134e:	4819      	ldr	r0, [pc, #100]	; (13b4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1350:	4b0b      	ldr	r3, [pc, #44]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1352:	4798      	blx	r3
    1354:	4a0b      	ldr	r2, [pc, #44]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1356:	490c      	ldr	r1, [pc, #48]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1358:	4816      	ldr	r0, [pc, #88]	; (13b4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    135a:	4b0c      	ldr	r3, [pc, #48]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    135c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    135e:	4916      	ldr	r1, [pc, #88]	; (13b8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1360:	4816      	ldr	r0, [pc, #88]	; (13bc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1362:	4b07      	ldr	r3, [pc, #28]	; (1380 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1364:	4798      	blx	r3
    1366:	4a07      	ldr	r2, [pc, #28]	; (1384 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1368:	4907      	ldr	r1, [pc, #28]	; (1388 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    136a:	4814      	ldr	r0, [pc, #80]	; (13bc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    136c:	4b07      	ldr	r3, [pc, #28]	; (138c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    136e:	4798      	blx	r3
    1370:	bf00      	nop
    1372:	3708      	adds	r7, #8
    1374:	46bd      	mov	sp, r7
    1376:	bd80      	pop	{r7, pc}
    1378:	200022dc 	.word	0x200022dc
    137c:	2000113c 	.word	0x2000113c
    1380:	00001a0d 	.word	0x00001a0d
    1384:	20000000 	.word	0x20000000
    1388:	00001a45 	.word	0x00001a45
    138c:	0000f4b1 	.word	0x0000f4b1
    1390:	20002370 	.word	0x20002370
    1394:	2000115c 	.word	0x2000115c
    1398:	20002474 	.word	0x20002474
    139c:	2000117c 	.word	0x2000117c
    13a0:	20002390 	.word	0x20002390
    13a4:	2000119c 	.word	0x2000119c
    13a8:	20002434 	.word	0x20002434
    13ac:	200011bc 	.word	0x200011bc
    13b0:	20002454 	.word	0x20002454
    13b4:	200011dc 	.word	0x200011dc
    13b8:	2000234c 	.word	0x2000234c
    13bc:	200011fc 	.word	0x200011fc

000013c0 <_GLOBAL__sub_I_main>:
    13c0:	b580      	push	{r7, lr}
    13c2:	af00      	add	r7, sp, #0
    13c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    13c8:	2001      	movs	r0, #1
    13ca:	4b01      	ldr	r3, [pc, #4]	; (13d0 <_GLOBAL__sub_I_main+0x10>)
    13cc:	4798      	blx	r3
    13ce:	bd80      	pop	{r7, pc}
    13d0:	000012d9 	.word	0x000012d9

000013d4 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    13d4:	b480      	push	{r7}
    13d6:	b083      	sub	sp, #12
    13d8:	af00      	add	r7, sp, #0
    13da:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    13dc:	4a04      	ldr	r2, [pc, #16]	; (13f0 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	4618      	mov	r0, r3
    13e6:	370c      	adds	r7, #12
    13e8:	46bd      	mov	sp, r7
    13ea:	bc80      	pop	{r7}
    13ec:	4770      	bx	lr
    13ee:	bf00      	nop
    13f0:	2000121c 	.word	0x2000121c

000013f4 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    13f4:	b480      	push	{r7}
    13f6:	b083      	sub	sp, #12
    13f8:	af00      	add	r7, sp, #0
    13fa:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	4618      	mov	r0, r3
    1400:	370c      	adds	r7, #12
    1402:	46bd      	mov	sp, r7
    1404:	bc80      	pop	{r7}
    1406:	4770      	bx	lr

00001408 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    1408:	b580      	push	{r7, lr}
    140a:	b082      	sub	sp, #8
    140c:	af00      	add	r7, sp, #0
    140e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    1410:	687b      	ldr	r3, [r7, #4]
    1412:	68da      	ldr	r2, [r3, #12]
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	3310      	adds	r3, #16
    1418:	4619      	mov	r1, r3
    141a:	4610      	mov	r0, r2
    141c:	4b09      	ldr	r3, [pc, #36]	; (1444 <_ZN13SPI_Syn_Class4initEv+0x3c>)
    141e:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	68db      	ldr	r3, [r3, #12]
    1424:	4618      	mov	r0, r3
    1426:	4b08      	ldr	r3, [pc, #32]	; (1448 <_ZN13SPI_Syn_Class4initEv+0x40>)
    1428:	4798      	blx	r3
		txBuffer=txStaticBuffer;
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	4a07      	ldr	r2, [pc, #28]	; (144c <_ZN13SPI_Syn_Class4initEv+0x44>)
    142e:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	4a06      	ldr	r2, [pc, #24]	; (144c <_ZN13SPI_Syn_Class4initEv+0x44>)
    1434:	609a      	str	r2, [r3, #8]
	ready=true;
    1436:	687b      	ldr	r3, [r7, #4]
    1438:	2201      	movs	r2, #1
    143a:	701a      	strb	r2, [r3, #0]
	
}
    143c:	bf00      	nop
    143e:	3708      	adds	r7, #8
    1440:	46bd      	mov	sp, r7
    1442:	bd80      	pop	{r7, pc}
    1444:	00004c6d 	.word	0x00004c6d
    1448:	00004ae1 	.word	0x00004ae1
    144c:	20001220 	.word	0x20001220

00001450 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
    1450:	b480      	push	{r7}
    1452:	b083      	sub	sp, #12
    1454:	af00      	add	r7, sp, #0
    1456:	6078      	str	r0, [r7, #4]
    1458:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    145a:	4a05      	ldr	r2, [pc, #20]	; (1470 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	683a      	ldr	r2, [r7, #0]
    1464:	60da      	str	r2, [r3, #12]
}
    1466:	bf00      	nop
    1468:	370c      	adds	r7, #12
    146a:	46bd      	mov	sp, r7
    146c:	bc80      	pop	{r7}
    146e:	4770      	bx	lr
    1470:	2000121c 	.word	0x2000121c

00001474 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
    1474:	b580      	push	{r7, lr}
    1476:	b082      	sub	sp, #8
    1478:	af00      	add	r7, sp, #0
    147a:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	68da      	ldr	r2, [r3, #12]
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	3310      	adds	r3, #16
    1484:	4619      	mov	r1, r3
    1486:	4610      	mov	r0, r2
    1488:	4b07      	ldr	r3, [pc, #28]	; (14a8 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    148a:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    148c:	687b      	ldr	r3, [r7, #4]
    148e:	68db      	ldr	r3, [r3, #12]
    1490:	4618      	mov	r0, r3
    1492:	4b06      	ldr	r3, [pc, #24]	; (14ac <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    1494:	4798      	blx	r3
	ready=true;
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	2201      	movs	r2, #1
    149a:	701a      	strb	r2, [r3, #0]
	return 0;
    149c:	2300      	movs	r3, #0
}
    149e:	4618      	mov	r0, r3
    14a0:	3708      	adds	r7, #8
    14a2:	46bd      	mov	sp, r7
    14a4:	bd80      	pop	{r7, pc}
    14a6:	bf00      	nop
    14a8:	00004c6d 	.word	0x00004c6d
    14ac:	00004ae1 	.word	0x00004ae1

000014b0 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    14b0:	b580      	push	{r7, lr}
    14b2:	b086      	sub	sp, #24
    14b4:	af00      	add	r7, sp, #0
    14b6:	60f8      	str	r0, [r7, #12]
    14b8:	60b9      	str	r1, [r7, #8]
    14ba:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    14bc:	68fb      	ldr	r3, [r7, #12]
    14be:	2201      	movs	r2, #1
    14c0:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    14c2:	68fb      	ldr	r3, [r7, #12]
    14c4:	691b      	ldr	r3, [r3, #16]
    14c6:	687a      	ldr	r2, [r7, #4]
    14c8:	b292      	uxth	r2, r2
    14ca:	68b9      	ldr	r1, [r7, #8]
    14cc:	4618      	mov	r0, r3
    14ce:	4b08      	ldr	r3, [pc, #32]	; (14f0 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    14d0:	4798      	blx	r3
    14d2:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    14d4:	697b      	ldr	r3, [r7, #20]
    14d6:	2b00      	cmp	r3, #0
    14d8:	bf14      	ite	ne
    14da:	2301      	movne	r3, #1
    14dc:	2300      	moveq	r3, #0
    14de:	b2da      	uxtb	r2, r3
    14e0:	68fb      	ldr	r3, [r7, #12]
    14e2:	761a      	strb	r2, [r3, #24]
	 return w;
    14e4:	697b      	ldr	r3, [r7, #20]
	
}
    14e6:	4618      	mov	r0, r3
    14e8:	3718      	adds	r7, #24
    14ea:	46bd      	mov	sp, r7
    14ec:	bd80      	pop	{r7, pc}
    14ee:	bf00      	nop
    14f0:	000047b1 	.word	0x000047b1

000014f4 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    14f4:	b580      	push	{r7, lr}
    14f6:	b086      	sub	sp, #24
    14f8:	af00      	add	r7, sp, #0
    14fa:	60f8      	str	r0, [r7, #12]
    14fc:	60b9      	str	r1, [r7, #8]
    14fe:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    1500:	68fb      	ldr	r3, [r7, #12]
    1502:	2201      	movs	r2, #1
    1504:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    1506:	68fb      	ldr	r3, [r7, #12]
    1508:	691b      	ldr	r3, [r3, #16]
    150a:	687a      	ldr	r2, [r7, #4]
    150c:	b292      	uxth	r2, r2
    150e:	68b9      	ldr	r1, [r7, #8]
    1510:	4618      	mov	r0, r3
    1512:	4b08      	ldr	r3, [pc, #32]	; (1534 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    1514:	4798      	blx	r3
    1516:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    1518:	697b      	ldr	r3, [r7, #20]
    151a:	2b00      	cmp	r3, #0
    151c:	bf14      	ite	ne
    151e:	2301      	movne	r3, #1
    1520:	2300      	moveq	r3, #0
    1522:	b2da      	uxtb	r2, r3
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	765a      	strb	r2, [r3, #25]
	return  r;
    1528:	697b      	ldr	r3, [r7, #20]
}
    152a:	4618      	mov	r0, r3
    152c:	3718      	adds	r7, #24
    152e:	46bd      	mov	sp, r7
    1530:	bd80      	pop	{r7, pc}
    1532:	bf00      	nop
    1534:	00004801 	.word	0x00004801

00001538 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    1538:	b580      	push	{r7, lr}
    153a:	b082      	sub	sp, #8
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    1540:	687b      	ldr	r3, [r7, #4]
    1542:	68db      	ldr	r3, [r3, #12]
    1544:	4618      	mov	r0, r3
    1546:	4b03      	ldr	r3, [pc, #12]	; (1554 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    1548:	4798      	blx	r3
	
}
    154a:	bf00      	nop
    154c:	3708      	adds	r7, #8
    154e:	46bd      	mov	sp, r7
    1550:	bd80      	pop	{r7, pc}
    1552:	bf00      	nop
    1554:	00004b1d 	.word	0x00004b1d

00001558 <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
    1558:	b580      	push	{r7, lr}
    155a:	b082      	sub	sp, #8
    155c:	af00      	add	r7, sp, #0
    155e:	6078      	str	r0, [r7, #4]
    1560:	687b      	ldr	r3, [r7, #4]
    1562:	3318      	adds	r3, #24
    1564:	4618      	mov	r0, r3
    1566:	4b03      	ldr	r3, [pc, #12]	; (1574 <_ZN17FRAM_Memory_ClassD1Ev+0x1c>)
    1568:	4798      	blx	r3
{
} //~FRAM_Memory_Class
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	4618      	mov	r0, r3
    156e:	3708      	adds	r7, #8
    1570:	46bd      	mov	sp, r7
    1572:	bd80      	pop	{r7, pc}
    1574:	000013f5 	.word	0x000013f5

00001578 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
    1580:	6039      	str	r1, [r7, #0]
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	3318      	adds	r3, #24
    1586:	4618      	mov	r0, r3
    1588:	4b09      	ldr	r3, [pc, #36]	; (15b0 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x38>)
    158a:	4798      	blx	r3
{
	appParameters=defaultParameters;
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	4a09      	ldr	r2, [pc, #36]	; (15b4 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x3c>)
    1590:	3310      	adds	r3, #16
    1592:	8812      	ldrh	r2, [r2, #0]
    1594:	801a      	strh	r2, [r3, #0]
	spi_descriptor=spi_des;
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	683a      	ldr	r2, [r7, #0]
    159a:	615a      	str	r2, [r3, #20]
	memoryAddress=framMemory;
    159c:	4b06      	ldr	r3, [pc, #24]	; (15b8 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x40>)
    159e:	681a      	ldr	r2, [r3, #0]
    15a0:	687b      	ldr	r3, [r7, #4]
    15a2:	60da      	str	r2, [r3, #12]
} //FlashMemoryClass
    15a4:	687b      	ldr	r3, [r7, #4]
    15a6:	4618      	mov	r0, r3
    15a8:	3708      	adds	r7, #8
    15aa:	46bd      	mov	sp, r7
    15ac:	bd80      	pop	{r7, pc}
    15ae:	bf00      	nop
    15b0:	000013d5 	.word	0x000013d5
    15b4:	0000ff1c 	.word	0x0000ff1c
    15b8:	20001260 	.word	0x20001260

000015bc <_Z41__static_initialization_and_destruction_0ii>:
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}

    15bc:	b580      	push	{r7, lr}
    15be:	b082      	sub	sp, #8
    15c0:	af00      	add	r7, sp, #0
    15c2:	6078      	str	r0, [r7, #4]
    15c4:	6039      	str	r1, [r7, #0]
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	2b01      	cmp	r3, #1
    15ca:	d10d      	bne.n	15e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    15cc:	683b      	ldr	r3, [r7, #0]
    15ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    15d2:	4293      	cmp	r3, r2
    15d4:	d108      	bne.n	15e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    15d6:	4906      	ldr	r1, [pc, #24]	; (15f0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    15d8:	4806      	ldr	r0, [pc, #24]	; (15f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    15da:	4b07      	ldr	r3, [pc, #28]	; (15f8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    15dc:	4798      	blx	r3
    15de:	4a07      	ldr	r2, [pc, #28]	; (15fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    15e0:	4907      	ldr	r1, [pc, #28]	; (1600 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    15e2:	4804      	ldr	r0, [pc, #16]	; (15f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    15e4:	4b07      	ldr	r3, [pc, #28]	; (1604 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    15e6:	4798      	blx	r3
    15e8:	bf00      	nop
    15ea:	3708      	adds	r7, #8
    15ec:	46bd      	mov	sp, r7
    15ee:	bd80      	pop	{r7, pc}
    15f0:	200022fc 	.word	0x200022fc
    15f4:	20001264 	.word	0x20001264
    15f8:	00001579 	.word	0x00001579
    15fc:	20000000 	.word	0x20000000
    1600:	00001559 	.word	0x00001559
    1604:	0000f4b1 	.word	0x0000f4b1

00001608 <_GLOBAL__sub_I_framMemory>:
    1608:	b580      	push	{r7, lr}
    160a:	af00      	add	r7, sp, #0
    160c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1610:	2001      	movs	r0, #1
    1612:	4b01      	ldr	r3, [pc, #4]	; (1618 <_GLOBAL__sub_I_framMemory+0x10>)
    1614:	4798      	blx	r3
    1616:	bd80      	pop	{r7, pc}
    1618:	000015bd 	.word	0x000015bd

0000161c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    161c:	b480      	push	{r7}
    161e:	b083      	sub	sp, #12
    1620:	af00      	add	r7, sp, #0
    1622:	6078      	str	r0, [r7, #4]
    1624:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	683a      	ldr	r2, [r7, #0]
    162a:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	4a04      	ldr	r2, [pc, #16]	; (1640 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    1630:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    1634:	687b      	ldr	r3, [r7, #4]
    1636:	4618      	mov	r0, r3
    1638:	370c      	adds	r7, #12
    163a:	46bd      	mov	sp, r7
    163c:	bc80      	pop	{r7}
    163e:	4770      	bx	lr
    1640:	001fff00 	.word	0x001fff00

00001644 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    1644:	b480      	push	{r7}
    1646:	b083      	sub	sp, #12
    1648:	af00      	add	r7, sp, #0
    164a:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    164c:	687b      	ldr	r3, [r7, #4]
    164e:	4618      	mov	r0, r3
    1650:	370c      	adds	r7, #12
    1652:	46bd      	mov	sp, r7
    1654:	bc80      	pop	{r7}
    1656:	4770      	bx	lr

00001658 <_Z41__static_initialization_and_destruction_0ii>:
		}
					
	}
	return	isOK;
}
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
    1658:	b580      	push	{r7, lr}
    165a:	b082      	sub	sp, #8
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	6039      	str	r1, [r7, #0]
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	2b01      	cmp	r3, #1
    1666:	d10d      	bne.n	1684 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1668:	683b      	ldr	r3, [r7, #0]
    166a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    166e:	4293      	cmp	r3, r2
    1670:	d108      	bne.n	1684 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1672:	4906      	ldr	r1, [pc, #24]	; (168c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1674:	4806      	ldr	r0, [pc, #24]	; (1690 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1676:	4b07      	ldr	r3, [pc, #28]	; (1694 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1678:	4798      	blx	r3
    167a:	4a07      	ldr	r2, [pc, #28]	; (1698 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    167c:	4907      	ldr	r1, [pc, #28]	; (169c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    167e:	4804      	ldr	r0, [pc, #16]	; (1690 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1680:	4b07      	ldr	r3, [pc, #28]	; (16a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1682:	4798      	blx	r3
    1684:	bf00      	nop
    1686:	3708      	adds	r7, #8
    1688:	46bd      	mov	sp, r7
    168a:	bd80      	pop	{r7, pc}
    168c:	2000236c 	.word	0x2000236c
    1690:	200012f0 	.word	0x200012f0
    1694:	0000161d 	.word	0x0000161d
    1698:	20000000 	.word	0x20000000
    169c:	00001645 	.word	0x00001645
    16a0:	0000f4b1 	.word	0x0000f4b1

000016a4 <_GLOBAL__sub_I_ptrN25Q256Class>:
    16a4:	b580      	push	{r7, lr}
    16a6:	af00      	add	r7, sp, #0
    16a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    16ac:	2001      	movs	r0, #1
    16ae:	4b01      	ldr	r3, [pc, #4]	; (16b4 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    16b0:	4798      	blx	r3
    16b2:	bd80      	pop	{r7, pc}
    16b4:	00001659 	.word	0x00001659

000016b8 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:
	ptrCalendarClass=this;
	//ptrMemory=&memory;
} //Calendar_Class

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    16b8:	b580      	push	{r7, lr}
    16ba:	b082      	sub	sp, #8
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
    16c0:	6039      	str	r1, [r7, #0]
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	4618      	mov	r0, r3
    16c6:	4b08      	ldr	r3, [pc, #32]	; (16e8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    16c8:	4798      	blx	r3
    16ca:	4a08      	ldr	r2, [pc, #32]	; (16ec <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    16cc:	687b      	ldr	r3, [r7, #4]
    16ce:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	683a      	ldr	r2, [r7, #0]
    16d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
    16d8:	4a05      	ldr	r2, [pc, #20]	; (16f0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	4618      	mov	r0, r3
    16e2:	3708      	adds	r7, #8
    16e4:	46bd      	mov	sp, r7
    16e6:	bd80      	pop	{r7, pc}
    16e8:	000019cd 	.word	0x000019cd
    16ec:	0000ff30 	.word	0x0000ff30
    16f0:	20001520 	.word	0x20001520

000016f4 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    16f4:	b580      	push	{r7, lr}
    16f6:	b082      	sub	sp, #8
    16f8:	af00      	add	r7, sp, #0
    16fa:	6078      	str	r0, [r7, #4]
    16fc:	4a05      	ldr	r2, [pc, #20]	; (1714 <_ZN14Calendar_ClassD1Ev+0x20>)
    16fe:	687b      	ldr	r3, [r7, #4]
    1700:	601a      	str	r2, [r3, #0]
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	4618      	mov	r0, r3
    1706:	4b04      	ldr	r3, [pc, #16]	; (1718 <_ZN14Calendar_ClassD1Ev+0x24>)
    1708:	4798      	blx	r3
{
} //~Calendar_Class
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	4618      	mov	r0, r3
    170e:	3708      	adds	r7, #8
    1710:	46bd      	mov	sp, r7
    1712:	bd80      	pop	{r7, pc}
    1714:	0000ff30 	.word	0x0000ff30
    1718:	000019ed 	.word	0x000019ed

0000171c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    171c:	b580      	push	{r7, lr}
    171e:	b082      	sub	sp, #8
    1720:	af00      	add	r7, sp, #0
    1722:	6078      	str	r0, [r7, #4]
    1724:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    1726:	687b      	ldr	r3, [r7, #4]
    1728:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    172c:	6839      	ldr	r1, [r7, #0]
    172e:	4618      	mov	r0, r3
    1730:	4b03      	ldr	r3, [pc, #12]	; (1740 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    1732:	4798      	blx	r3
    1734:	4603      	mov	r3, r0
}
    1736:	4618      	mov	r0, r3
    1738:	3708      	adds	r7, #8
    173a:	46bd      	mov	sp, r7
    173c:	bd80      	pop	{r7, pc}
    173e:	bf00      	nop
    1740:	00004285 	.word	0x00004285

00001744 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    1744:	b480      	push	{r7}
    1746:	b083      	sub	sp, #12
    1748:	af00      	add	r7, sp, #0
    174a:	6078      	str	r0, [r7, #4]
    174c:	460b      	mov	r3, r1
    174e:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    1750:	887b      	ldrh	r3, [r7, #2]
    1752:	f003 0303 	and.w	r3, r3, #3
    1756:	2b00      	cmp	r3, #0
    1758:	d001      	beq.n	175e <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    175a:	2300      	movs	r3, #0
    175c:	e000      	b.n	1760 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    175e:	2301      	movs	r3, #1
	}
}
    1760:	4618      	mov	r0, r3
    1762:	370c      	adds	r7, #12
    1764:	46bd      	mov	sp, r7
    1766:	bc80      	pop	{r7}
    1768:	4770      	bx	lr
	...

0000176c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    176c:	b580      	push	{r7, lr}
    176e:	b086      	sub	sp, #24
    1770:	af00      	add	r7, sp, #0
    1772:	6078      	str	r0, [r7, #4]
    1774:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    1776:	2300      	movs	r3, #0
    1778:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    177a:	2300      	movs	r3, #0
    177c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    177e:	683b      	ldr	r3, [r7, #0]
    1780:	88db      	ldrh	r3, [r3, #6]
    1782:	b2da      	uxtb	r2, r3
    1784:	687b      	ldr	r3, [r7, #4]
    1786:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    178a:	699b      	ldr	r3, [r3, #24]
    178c:	b2db      	uxtb	r3, r3
    178e:	1ad3      	subs	r3, r2, r3
    1790:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    1792:	683b      	ldr	r3, [r7, #0]
    1794:	795b      	ldrb	r3, [r3, #5]
    1796:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    1798:	683b      	ldr	r3, [r7, #0]
    179a:	791b      	ldrb	r3, [r3, #4]
    179c:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    179e:	683b      	ldr	r3, [r7, #0]
    17a0:	789b      	ldrb	r3, [r3, #2]
    17a2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    17a4:	683b      	ldr	r3, [r7, #0]
    17a6:	785b      	ldrb	r3, [r3, #1]
    17a8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    17aa:	683b      	ldr	r3, [r7, #0]
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    17b0:	2300      	movs	r3, #0
    17b2:	613b      	str	r3, [r7, #16]
    17b4:	7bfa      	ldrb	r2, [r7, #15]
    17b6:	693b      	ldr	r3, [r7, #16]
    17b8:	429a      	cmp	r2, r3
    17ba:	d91e      	bls.n	17fa <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    17bc:	687b      	ldr	r3, [r7, #4]
    17be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    17c2:	699b      	ldr	r3, [r3, #24]
    17c4:	b29a      	uxth	r2, r3
    17c6:	693b      	ldr	r3, [r7, #16]
    17c8:	b29b      	uxth	r3, r3
    17ca:	4413      	add	r3, r2
    17cc:	b29b      	uxth	r3, r3
    17ce:	4619      	mov	r1, r3
    17d0:	6878      	ldr	r0, [r7, #4]
    17d2:	4b27      	ldr	r3, [pc, #156]	; (1870 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    17d4:	4798      	blx	r3
    17d6:	4603      	mov	r3, r0
    17d8:	2b00      	cmp	r3, #0
    17da:	d006      	beq.n	17ea <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    17dc:	697b      	ldr	r3, [r7, #20]
    17de:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    17e2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    17e6:	617b      	str	r3, [r7, #20]
    17e8:	e003      	b.n	17f2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    17ea:	697a      	ldr	r2, [r7, #20]
    17ec:	4b21      	ldr	r3, [pc, #132]	; (1874 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    17ee:	4413      	add	r3, r2
    17f0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    17f2:	693b      	ldr	r3, [r7, #16]
    17f4:	3301      	adds	r3, #1
    17f6:	613b      	str	r3, [r7, #16]
    17f8:	e7dc      	b.n	17b4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    17fa:	2301      	movs	r3, #1
    17fc:	613b      	str	r3, [r7, #16]
    17fe:	7bba      	ldrb	r2, [r7, #14]
    1800:	693b      	ldr	r3, [r7, #16]
    1802:	429a      	cmp	r2, r3
    1804:	d910      	bls.n	1828 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    1806:	683b      	ldr	r3, [r7, #0]
    1808:	88db      	ldrh	r3, [r3, #6]
    180a:	4619      	mov	r1, r3
    180c:	693b      	ldr	r3, [r7, #16]
    180e:	b2db      	uxtb	r3, r3
    1810:	461a      	mov	r2, r3
    1812:	6878      	ldr	r0, [r7, #4]
    1814:	4b18      	ldr	r3, [pc, #96]	; (1878 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    1816:	4798      	blx	r3
    1818:	4602      	mov	r2, r0
    181a:	697b      	ldr	r3, [r7, #20]
    181c:	4413      	add	r3, r2
    181e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    1820:	693b      	ldr	r3, [r7, #16]
    1822:	3301      	adds	r3, #1
    1824:	613b      	str	r3, [r7, #16]
    1826:	e7ea      	b.n	17fe <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    1828:	7b7b      	ldrb	r3, [r7, #13]
    182a:	3b01      	subs	r3, #1
    182c:	4a13      	ldr	r2, [pc, #76]	; (187c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    182e:	fb02 f303 	mul.w	r3, r2, r3
    1832:	461a      	mov	r2, r3
    1834:	697b      	ldr	r3, [r7, #20]
    1836:	4413      	add	r3, r2
    1838:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    183a:	7b3b      	ldrb	r3, [r7, #12]
    183c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1840:	fb02 f303 	mul.w	r3, r2, r3
    1844:	461a      	mov	r2, r3
    1846:	697b      	ldr	r3, [r7, #20]
    1848:	4413      	add	r3, r2
    184a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    184c:	7afa      	ldrb	r2, [r7, #11]
    184e:	4613      	mov	r3, r2
    1850:	011b      	lsls	r3, r3, #4
    1852:	1a9b      	subs	r3, r3, r2
    1854:	009b      	lsls	r3, r3, #2
    1856:	461a      	mov	r2, r3
    1858:	697b      	ldr	r3, [r7, #20]
    185a:	4413      	add	r3, r2
    185c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    185e:	7abb      	ldrb	r3, [r7, #10]
    1860:	697a      	ldr	r2, [r7, #20]
    1862:	4413      	add	r3, r2
    1864:	617b      	str	r3, [r7, #20]

	return tmp;
    1866:	697b      	ldr	r3, [r7, #20]
}
    1868:	4618      	mov	r0, r3
    186a:	3718      	adds	r7, #24
    186c:	46bd      	mov	sp, r7
    186e:	bd80      	pop	{r7, pc}
    1870:	00001745 	.word	0x00001745
    1874:	01e13380 	.word	0x01e13380
    1878:	00001881 	.word	0x00001881
    187c:	00015180 	.word	0x00015180

00001880 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    1880:	b580      	push	{r7, lr}
    1882:	b086      	sub	sp, #24
    1884:	af00      	add	r7, sp, #0
    1886:	60f8      	str	r0, [r7, #12]
    1888:	60b9      	str	r1, [r7, #8]
    188a:	4613      	mov	r3, r2
    188c:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    188e:	2300      	movs	r3, #0
    1890:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    1892:	68bb      	ldr	r3, [r7, #8]
    1894:	b29b      	uxth	r3, r3
    1896:	4619      	mov	r1, r3
    1898:	68f8      	ldr	r0, [r7, #12]
    189a:	4b2f      	ldr	r3, [pc, #188]	; (1958 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    189c:	4798      	blx	r3
    189e:	4603      	mov	r3, r0
    18a0:	2b00      	cmp	r3, #0
    18a2:	d028      	beq.n	18f6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    18a4:	79fb      	ldrb	r3, [r7, #7]
    18a6:	3b01      	subs	r3, #1
    18a8:	2b0b      	cmp	r3, #11
    18aa:	d84c      	bhi.n	1946 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    18ac:	a201      	add	r2, pc, #4	; (adr r2, 18b4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    18ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    18b2:	bf00      	nop
    18b4:	000018e5 	.word	0x000018e5
    18b8:	000018eb 	.word	0x000018eb
    18bc:	000018e5 	.word	0x000018e5
    18c0:	000018f1 	.word	0x000018f1
    18c4:	000018e5 	.word	0x000018e5
    18c8:	000018f1 	.word	0x000018f1
    18cc:	000018e5 	.word	0x000018e5
    18d0:	000018e5 	.word	0x000018e5
    18d4:	000018f1 	.word	0x000018f1
    18d8:	000018e5 	.word	0x000018e5
    18dc:	000018f1 	.word	0x000018f1
    18e0:	000018e5 	.word	0x000018e5
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    18e4:	4b1d      	ldr	r3, [pc, #116]	; (195c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    18e6:	617b      	str	r3, [r7, #20]
			break;
    18e8:	e030      	b.n	194c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    18ea:	4b1d      	ldr	r3, [pc, #116]	; (1960 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    18ec:	617b      	str	r3, [r7, #20]
			break;
    18ee:	e02d      	b.n	194c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    18f0:	4b1c      	ldr	r3, [pc, #112]	; (1964 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    18f2:	617b      	str	r3, [r7, #20]
			break;
    18f4:	e02a      	b.n	194c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    18f6:	79fb      	ldrb	r3, [r7, #7]
    18f8:	3b01      	subs	r3, #1
    18fa:	2b0b      	cmp	r3, #11
    18fc:	d825      	bhi.n	194a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    18fe:	a201      	add	r2, pc, #4	; (adr r2, 1904 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    1900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1904:	00001935 	.word	0x00001935
    1908:	0000193b 	.word	0x0000193b
    190c:	00001935 	.word	0x00001935
    1910:	00001941 	.word	0x00001941
    1914:	00001935 	.word	0x00001935
    1918:	00001941 	.word	0x00001941
    191c:	00001935 	.word	0x00001935
    1920:	00001935 	.word	0x00001935
    1924:	00001941 	.word	0x00001941
    1928:	00001935 	.word	0x00001935
    192c:	00001941 	.word	0x00001941
    1930:	00001935 	.word	0x00001935
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1934:	4b09      	ldr	r3, [pc, #36]	; (195c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1936:	617b      	str	r3, [r7, #20]
			break;
    1938:	e008      	b.n	194c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    193a:	4b0b      	ldr	r3, [pc, #44]	; (1968 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    193c:	617b      	str	r3, [r7, #20]
			break;
    193e:	e005      	b.n	194c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    1940:	4b08      	ldr	r3, [pc, #32]	; (1964 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    1942:	617b      	str	r3, [r7, #20]
			break;
    1944:	e002      	b.n	194c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    1946:	bf00      	nop
    1948:	e000      	b.n	194c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    194a:	bf00      	nop
		}
	}

	return sec_in_month;
    194c:	697b      	ldr	r3, [r7, #20]
}
    194e:	4618      	mov	r0, r3
    1950:	3718      	adds	r7, #24
    1952:	46bd      	mov	sp, r7
    1954:	bd80      	pop	{r7, pc}
    1956:	bf00      	nop
    1958:	00001745 	.word	0x00001745
    195c:	0028de80 	.word	0x0028de80
    1960:	00263b80 	.word	0x00263b80
    1964:	00278d00 	.word	0x00278d00
    1968:	0024ea00 	.word	0x0024ea00

0000196c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
    1974:	6039      	str	r1, [r7, #0]
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	2b01      	cmp	r3, #1
    197a:	d10d      	bne.n	1998 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    197c:	683b      	ldr	r3, [r7, #0]
    197e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1982:	4293      	cmp	r3, r2
    1984:	d108      	bne.n	1998 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1986:	4906      	ldr	r1, [pc, #24]	; (19a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1988:	4806      	ldr	r0, [pc, #24]	; (19a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    198a:	4b07      	ldr	r3, [pc, #28]	; (19a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    198c:	4798      	blx	r3
    198e:	4a07      	ldr	r2, [pc, #28]	; (19ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1990:	4907      	ldr	r1, [pc, #28]	; (19b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1992:	4804      	ldr	r0, [pc, #16]	; (19a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1994:	4b07      	ldr	r3, [pc, #28]	; (19b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1996:	4798      	blx	r3
    1998:	bf00      	nop
    199a:	3708      	adds	r7, #8
    199c:	46bd      	mov	sp, r7
    199e:	bd80      	pop	{r7, pc}
    19a0:	20002494 	.word	0x20002494
    19a4:	20001528 	.word	0x20001528
    19a8:	000016b9 	.word	0x000016b9
    19ac:	20000000 	.word	0x20000000
    19b0:	000016f5 	.word	0x000016f5
    19b4:	0000f4b1 	.word	0x0000f4b1

000019b8 <_GLOBAL__sub_I_ptrCalendarClass>:
    19b8:	b580      	push	{r7, lr}
    19ba:	af00      	add	r7, sp, #0
    19bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    19c0:	2001      	movs	r0, #1
    19c2:	4b01      	ldr	r3, [pc, #4]	; (19c8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    19c4:	4798      	blx	r3
    19c6:	bd80      	pop	{r7, pc}
    19c8:	0000196d 	.word	0x0000196d

000019cc <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    19cc:	b480      	push	{r7}
    19ce:	b083      	sub	sp, #12
    19d0:	af00      	add	r7, sp, #0
    19d2:	6078      	str	r0, [r7, #4]
    19d4:	4a04      	ldr	r2, [pc, #16]	; (19e8 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    19d6:	687b      	ldr	r3, [r7, #4]
    19d8:	601a      	str	r2, [r3, #0]
{
} //~D
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	4618      	mov	r0, r3
    19de:	370c      	adds	r7, #12
    19e0:	46bd      	mov	sp, r7
    19e2:	bc80      	pop	{r7}
    19e4:	4770      	bx	lr
    19e6:	bf00      	nop
    19e8:	0000ff40 	.word	0x0000ff40

000019ec <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    19ec:	b480      	push	{r7}
    19ee:	b083      	sub	sp, #12
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
    19f4:	4a04      	ldr	r2, [pc, #16]	; (1a08 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    19f6:	687b      	ldr	r3, [r7, #4]
    19f8:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	4618      	mov	r0, r3
    19fe:	370c      	adds	r7, #12
    1a00:	46bd      	mov	sp, r7
    1a02:	bc80      	pop	{r7}
    1a04:	4770      	bx	lr
    1a06:	bf00      	nop
    1a08:	0000ff40 	.word	0x0000ff40

00001a0c <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    1a0c:	b480      	push	{r7}
    1a0e:	b083      	sub	sp, #12
    1a10:	af00      	add	r7, sp, #0
    1a12:	6078      	str	r0, [r7, #4]
    1a14:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    1a16:	687b      	ldr	r3, [r7, #4]
    1a18:	683a      	ldr	r2, [r7, #0]
    1a1a:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    1a1c:	687b      	ldr	r3, [r7, #4]
    1a1e:	68db      	ldr	r3, [r3, #12]
    1a20:	2200      	movs	r2, #0
    1a22:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    1a24:	4a06      	ldr	r2, [pc, #24]	; (1a40 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    1a26:	687b      	ldr	r3, [r7, #4]
    1a28:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1a30:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    1a32:	687b      	ldr	r3, [r7, #4]
    1a34:	4618      	mov	r0, r3
    1a36:	370c      	adds	r7, #12
    1a38:	46bd      	mov	sp, r7
    1a3a:	bc80      	pop	{r7}
    1a3c:	4770      	bx	lr
    1a3e:	bf00      	nop
    1a40:	200016b8 	.word	0x200016b8

00001a44 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    1a4c:	687b      	ldr	r3, [r7, #4]
    1a4e:	2200      	movs	r2, #0
    1a50:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	4618      	mov	r0, r3
    1a56:	370c      	adds	r7, #12
    1a58:	46bd      	mov	sp, r7
    1a5a:	bc80      	pop	{r7}
    1a5c:	4770      	bx	lr
	...

00001a60 <_ZL9InitArrayv>:


static void InitArray(){
    1a60:	b480      	push	{r7}
    1a62:	b083      	sub	sp, #12
    1a64:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    1a66:	2301      	movs	r3, #1
    1a68:	607b      	str	r3, [r7, #4]
    1a6a:	687b      	ldr	r3, [r7, #4]
    1a6c:	2b1f      	cmp	r3, #31
    1a6e:	dc34      	bgt.n	1ada <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    1a70:	491e      	ldr	r1, [pc, #120]	; (1aec <_ZL9InitArrayv+0x8c>)
    1a72:	687a      	ldr	r2, [r7, #4]
    1a74:	4613      	mov	r3, r2
    1a76:	009b      	lsls	r3, r3, #2
    1a78:	4413      	add	r3, r2
    1a7a:	009b      	lsls	r3, r3, #2
    1a7c:	440b      	add	r3, r1
    1a7e:	2200      	movs	r2, #0
    1a80:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    1a82:	491a      	ldr	r1, [pc, #104]	; (1aec <_ZL9InitArrayv+0x8c>)
    1a84:	687a      	ldr	r2, [r7, #4]
    1a86:	4613      	mov	r3, r2
    1a88:	009b      	lsls	r3, r3, #2
    1a8a:	4413      	add	r3, r2
    1a8c:	009b      	lsls	r3, r3, #2
    1a8e:	440b      	add	r3, r1
    1a90:	330c      	adds	r3, #12
    1a92:	2200      	movs	r2, #0
    1a94:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	1e5a      	subs	r2, r3, #1
    1a9a:	6879      	ldr	r1, [r7, #4]
    1a9c:	460b      	mov	r3, r1
    1a9e:	009b      	lsls	r3, r3, #2
    1aa0:	440b      	add	r3, r1
    1aa2:	009b      	lsls	r3, r3, #2
    1aa4:	4911      	ldr	r1, [pc, #68]	; (1aec <_ZL9InitArrayv+0x8c>)
    1aa6:	4419      	add	r1, r3
    1aa8:	4810      	ldr	r0, [pc, #64]	; (1aec <_ZL9InitArrayv+0x8c>)
    1aaa:	4613      	mov	r3, r2
    1aac:	009b      	lsls	r3, r3, #2
    1aae:	4413      	add	r3, r2
    1ab0:	009b      	lsls	r3, r3, #2
    1ab2:	4403      	add	r3, r0
    1ab4:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    1ab6:	4a0e      	ldr	r2, [pc, #56]	; (1af0 <_ZL9InitArrayv+0x90>)
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	2100      	movs	r1, #0
    1abc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	3b01      	subs	r3, #1
    1ac4:	687a      	ldr	r2, [r7, #4]
    1ac6:	0092      	lsls	r2, r2, #2
    1ac8:	4909      	ldr	r1, [pc, #36]	; (1af0 <_ZL9InitArrayv+0x90>)
    1aca:	440a      	add	r2, r1
    1acc:	4908      	ldr	r1, [pc, #32]	; (1af0 <_ZL9InitArrayv+0x90>)
    1ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	3301      	adds	r3, #1
    1ad6:	607b      	str	r3, [r7, #4]
    1ad8:	e7c7      	b.n	1a6a <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    1ada:	4b06      	ldr	r3, [pc, #24]	; (1af4 <_ZL9InitArrayv+0x94>)
    1adc:	2201      	movs	r2, #1
    1ade:	701a      	strb	r2, [r3, #0]
		
}
    1ae0:	bf00      	nop
    1ae2:	370c      	adds	r7, #12
    1ae4:	46bd      	mov	sp, r7
    1ae6:	bc80      	pop	{r7}
    1ae8:	4770      	bx	lr
    1aea:	bf00      	nop
    1aec:	200016bc 	.word	0x200016bc
    1af0:	2000193c 	.word	0x2000193c
    1af4:	200019bc 	.word	0x200019bc

00001af8 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    1af8:	b580      	push	{r7, lr}
    1afa:	b082      	sub	sp, #8
    1afc:	af00      	add	r7, sp, #0
    1afe:	6078      	str	r0, [r7, #4]
	ticks=0;
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	2200      	movs	r2, #0
    1b04:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    1b06:	4b0d      	ldr	r3, [pc, #52]	; (1b3c <_ZN11Timer_Class4InitEv+0x44>)
    1b08:	781b      	ldrb	r3, [r3, #0]
    1b0a:	f083 0301 	eor.w	r3, r3, #1
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	2b00      	cmp	r3, #0
    1b12:	d001      	beq.n	1b18 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    1b14:	4b0a      	ldr	r3, [pc, #40]	; (1b40 <_ZN11Timer_Class4InitEv+0x48>)
    1b16:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    1b18:	6878      	ldr	r0, [r7, #4]
    1b1a:	4b0a      	ldr	r3, [pc, #40]	; (1b44 <_ZN11Timer_Class4InitEv+0x4c>)
    1b1c:	4798      	blx	r3
    1b1e:	4603      	mov	r3, r0
    1b20:	2b00      	cmp	r3, #0
    1b22:	bf0c      	ite	eq
    1b24:	2301      	moveq	r3, #1
    1b26:	2300      	movne	r3, #0
    1b28:	b2da      	uxtb	r2, r3
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	709a      	strb	r2, [r3, #2]
	return isOK;
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	789b      	ldrb	r3, [r3, #2]
    1b32:	b2db      	uxtb	r3, r3
}
    1b34:	4618      	mov	r0, r3
    1b36:	3708      	adds	r7, #8
    1b38:	46bd      	mov	sp, r7
    1b3a:	bd80      	pop	{r7, pc}
    1b3c:	200019bc 	.word	0x200019bc
    1b40:	00001a61 	.word	0x00001a61
    1b44:	00001b49 	.word	0x00001b49

00001b48 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    1b48:	b580      	push	{r7, lr}
    1b4a:	b084      	sub	sp, #16
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    1b50:	687b      	ldr	r3, [r7, #4]
    1b52:	68db      	ldr	r3, [r3, #12]
    1b54:	4618      	mov	r0, r3
    1b56:	4b04      	ldr	r3, [pc, #16]	; (1b68 <_ZN11Timer_Class5StartEv+0x20>)
    1b58:	4798      	blx	r3
    1b5a:	60f8      	str	r0, [r7, #12]
	return status;
    1b5c:	68fb      	ldr	r3, [r7, #12]
	
}
    1b5e:	4618      	mov	r0, r3
    1b60:	3710      	adds	r7, #16
    1b62:	46bd      	mov	sp, r7
    1b64:	bd80      	pop	{r7, pc}
    1b66:	bf00      	nop
    1b68:	00004d5d 	.word	0x00004d5d

00001b6c <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    1b6c:	b580      	push	{r7, lr}
    1b6e:	b084      	sub	sp, #16
    1b70:	af00      	add	r7, sp, #0
    1b72:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	68db      	ldr	r3, [r3, #12]
    1b78:	4618      	mov	r0, r3
    1b7a:	4b05      	ldr	r3, [pc, #20]	; (1b90 <_ZN11Timer_Class4StopEv+0x24>)
    1b7c:	4798      	blx	r3
    1b7e:	60f8      	str	r0, [r7, #12]
	timeout=0;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	2200      	movs	r2, #0
    1b84:	705a      	strb	r2, [r3, #1]
	return status;
    1b86:	68fb      	ldr	r3, [r7, #12]
}
    1b88:	4618      	mov	r0, r3
    1b8a:	3710      	adds	r7, #16
    1b8c:	46bd      	mov	sp, r7
    1b8e:	bd80      	pop	{r7, pc}
    1b90:	00004dc5 	.word	0x00004dc5

00001b94 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    1b94:	b580      	push	{r7, lr}
    1b96:	b086      	sub	sp, #24
    1b98:	af00      	add	r7, sp, #0
    1b9a:	60f8      	str	r0, [r7, #12]
    1b9c:	60b9      	str	r1, [r7, #8]
    1b9e:	607a      	str	r2, [r7, #4]
    1ba0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    1ba2:	68b9      	ldr	r1, [r7, #8]
    1ba4:	68f8      	ldr	r0, [r7, #12]
    1ba6:	4b0e      	ldr	r3, [pc, #56]	; (1be0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    1ba8:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    1baa:	68fb      	ldr	r3, [r7, #12]
    1bac:	699b      	ldr	r3, [r3, #24]
    1bae:	687a      	ldr	r2, [r7, #4]
    1bb0:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    1bb2:	68fb      	ldr	r3, [r7, #12]
    1bb4:	699b      	ldr	r3, [r3, #24]
    1bb6:	68ba      	ldr	r2, [r7, #8]
    1bb8:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    1bba:	68fb      	ldr	r3, [r7, #12]
    1bbc:	699b      	ldr	r3, [r3, #24]
    1bbe:	78fa      	ldrb	r2, [r7, #3]
    1bc0:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    1bc2:	68fb      	ldr	r3, [r7, #12]
    1bc4:	68da      	ldr	r2, [r3, #12]
    1bc6:	68fb      	ldr	r3, [r7, #12]
    1bc8:	699b      	ldr	r3, [r3, #24]
    1bca:	4619      	mov	r1, r3
    1bcc:	4610      	mov	r0, r2
    1bce:	4b05      	ldr	r3, [pc, #20]	; (1be4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    1bd0:	4798      	blx	r3
    1bd2:	6178      	str	r0, [r7, #20]
	
	return status;
    1bd4:	697b      	ldr	r3, [r7, #20]
}
    1bd6:	4618      	mov	r0, r3
    1bd8:	3718      	adds	r7, #24
    1bda:	46bd      	mov	sp, r7
    1bdc:	bd80      	pop	{r7, pc}
    1bde:	bf00      	nop
    1be0:	00001cfd 	.word	0x00001cfd
    1be4:	00004e31 	.word	0x00004e31

00001be8 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    1be8:	b580      	push	{r7, lr}
    1bea:	b082      	sub	sp, #8
    1bec:	af00      	add	r7, sp, #0
    1bee:	6078      	str	r0, [r7, #4]
    1bf0:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    1bf2:	6839      	ldr	r1, [r7, #0]
    1bf4:	6878      	ldr	r0, [r7, #4]
    1bf6:	4b0f      	ldr	r3, [pc, #60]	; (1c34 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    1bf8:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	68db      	ldr	r3, [r3, #12]
    1bfe:	f103 0218 	add.w	r2, r3, #24
    1c02:	687b      	ldr	r3, [r7, #4]
    1c04:	699b      	ldr	r3, [r3, #24]
    1c06:	4619      	mov	r1, r3
    1c08:	4610      	mov	r0, r2
    1c0a:	4b0b      	ldr	r3, [pc, #44]	; (1c38 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    1c0c:	4798      	blx	r3
    1c0e:	4603      	mov	r3, r0
    1c10:	2b00      	cmp	r3, #0
    1c12:	d007      	beq.n	1c24 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    1c14:	687b      	ldr	r3, [r7, #4]
    1c16:	68da      	ldr	r2, [r3, #12]
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	699b      	ldr	r3, [r3, #24]
    1c1c:	4619      	mov	r1, r3
    1c1e:	4610      	mov	r0, r2
    1c20:	4b06      	ldr	r3, [pc, #24]	; (1c3c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    1c22:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	699b      	ldr	r3, [r3, #24]
    1c28:	2200      	movs	r2, #0
    1c2a:	60da      	str	r2, [r3, #12]
}
    1c2c:	bf00      	nop
    1c2e:	3708      	adds	r7, #8
    1c30:	46bd      	mov	sp, r7
    1c32:	bd80      	pop	{r7, pc}
    1c34:	00001d7d 	.word	0x00001d7d
    1c38:	00005b1d 	.word	0x00005b1d
    1c3c:	00004f35 	.word	0x00004f35

00001c40 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    1c40:	b590      	push	{r4, r7, lr}
    1c42:	b087      	sub	sp, #28
    1c44:	af00      	add	r7, sp, #0
    1c46:	60f8      	str	r0, [r7, #12]
    1c48:	60b9      	str	r1, [r7, #8]
    1c4a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    1c4c:	2300      	movs	r3, #0
    1c4e:	687a      	ldr	r2, [r7, #4]
    1c50:	68b9      	ldr	r1, [r7, #8]
    1c52:	68f8      	ldr	r0, [r7, #12]
    1c54:	4c0c      	ldr	r4, [pc, #48]	; (1c88 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    1c56:	47a0      	blx	r4
    1c58:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    1c5a:	68fb      	ldr	r3, [r7, #12]
    1c5c:	68db      	ldr	r3, [r3, #12]
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	699b      	ldr	r3, [r3, #24]
    1c62:	68fa      	ldr	r2, [r7, #12]
    1c64:	68d2      	ldr	r2, [r2, #12]
    1c66:	3204      	adds	r2, #4
    1c68:	4610      	mov	r0, r2
    1c6a:	4798      	blx	r3
    1c6c:	4603      	mov	r3, r0
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d105      	bne.n	1c7e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    1c72:	68fb      	ldr	r3, [r7, #12]
    1c74:	68db      	ldr	r3, [r3, #12]
    1c76:	4618      	mov	r0, r3
    1c78:	4b04      	ldr	r3, [pc, #16]	; (1c8c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    1c7a:	4798      	blx	r3
    1c7c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    1c7e:	697b      	ldr	r3, [r7, #20]
}
    1c80:	4618      	mov	r0, r3
    1c82:	371c      	adds	r7, #28
    1c84:	46bd      	mov	sp, r7
    1c86:	bd90      	pop	{r4, r7, pc}
    1c88:	00001b95 	.word	0x00001b95
    1c8c:	00004d5d 	.word	0x00004d5d

00001c90 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    1c90:	b480      	push	{r7}
    1c92:	b085      	sub	sp, #20
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    1c98:	2300      	movs	r3, #0
    1c9a:	73fb      	strb	r3, [r7, #15]
    1c9c:	7bfb      	ldrb	r3, [r7, #15]
    1c9e:	2b1f      	cmp	r3, #31
    1ca0:	dc23      	bgt.n	1cea <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	7f1a      	ldrb	r2, [r3, #28]
    1ca6:	7bfb      	ldrb	r3, [r7, #15]
    1ca8:	4413      	add	r3, r2
    1caa:	b2db      	uxtb	r3, r3
    1cac:	f003 031f 	and.w	r3, r3, #31
    1cb0:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    1cb2:	7bba      	ldrb	r2, [r7, #14]
    1cb4:	4910      	ldr	r1, [pc, #64]	; (1cf8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    1cb6:	4613      	mov	r3, r2
    1cb8:	009b      	lsls	r3, r3, #2
    1cba:	4413      	add	r3, r2
    1cbc:	009b      	lsls	r3, r3, #2
    1cbe:	440b      	add	r3, r1
    1cc0:	330c      	adds	r3, #12
    1cc2:	681b      	ldr	r3, [r3, #0]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d10c      	bne.n	1ce2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    1cc8:	7bba      	ldrb	r2, [r7, #14]
    1cca:	4613      	mov	r3, r2
    1ccc:	009b      	lsls	r3, r3, #2
    1cce:	4413      	add	r3, r2
    1cd0:	009b      	lsls	r3, r3, #2
    1cd2:	4a09      	ldr	r2, [pc, #36]	; (1cf8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    1cd4:	441a      	add	r2, r3
    1cd6:	687b      	ldr	r3, [r7, #4]
    1cd8:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	7bba      	ldrb	r2, [r7, #14]
    1cde:	771a      	strb	r2, [r3, #28]
			return;
    1ce0:	e006      	b.n	1cf0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    1ce2:	7bfb      	ldrb	r3, [r7, #15]
    1ce4:	3301      	adds	r3, #1
    1ce6:	73fb      	strb	r3, [r7, #15]
    1ce8:	e7d8      	b.n	1c9c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    1cea:	687b      	ldr	r3, [r7, #4]
    1cec:	4a02      	ldr	r2, [pc, #8]	; (1cf8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    1cee:	619a      	str	r2, [r3, #24]

}
    1cf0:	3714      	adds	r7, #20
    1cf2:	46bd      	mov	sp, r7
    1cf4:	bc80      	pop	{r7}
    1cf6:	4770      	bx	lr
    1cf8:	200016bc 	.word	0x200016bc

00001cfc <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b084      	sub	sp, #16
    1d00:	af00      	add	r7, sp, #0
    1d02:	6078      	str	r0, [r7, #4]
    1d04:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    1d06:	2300      	movs	r3, #0
    1d08:	73fb      	strb	r3, [r7, #15]
    1d0a:	7bfb      	ldrb	r3, [r7, #15]
    1d0c:	2b1f      	cmp	r3, #31
    1d0e:	dc28      	bgt.n	1d62 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	7f1a      	ldrb	r2, [r3, #28]
    1d14:	7bfb      	ldrb	r3, [r7, #15]
    1d16:	4413      	add	r3, r2
    1d18:	b2db      	uxtb	r3, r3
    1d1a:	f003 031f 	and.w	r3, r3, #31
    1d1e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    1d20:	7bba      	ldrb	r2, [r7, #14]
    1d22:	4913      	ldr	r1, [pc, #76]	; (1d70 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    1d24:	4613      	mov	r3, r2
    1d26:	009b      	lsls	r3, r3, #2
    1d28:	4413      	add	r3, r2
    1d2a:	009b      	lsls	r3, r3, #2
    1d2c:	440b      	add	r3, r1
    1d2e:	330c      	adds	r3, #12
    1d30:	681a      	ldr	r2, [r3, #0]
    1d32:	683b      	ldr	r3, [r7, #0]
    1d34:	429a      	cmp	r2, r3
    1d36:	d110      	bne.n	1d5a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    1d38:	6839      	ldr	r1, [r7, #0]
    1d3a:	6878      	ldr	r0, [r7, #4]
    1d3c:	4b0d      	ldr	r3, [pc, #52]	; (1d74 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    1d3e:	4798      	blx	r3
			task=&taskArray[j];
    1d40:	7bba      	ldrb	r2, [r7, #14]
    1d42:	4613      	mov	r3, r2
    1d44:	009b      	lsls	r3, r3, #2
    1d46:	4413      	add	r3, r2
    1d48:	009b      	lsls	r3, r3, #2
    1d4a:	4a09      	ldr	r2, [pc, #36]	; (1d70 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    1d4c:	441a      	add	r2, r3
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    1d52:	687b      	ldr	r3, [r7, #4]
    1d54:	7bba      	ldrb	r2, [r7, #14]
    1d56:	771a      	strb	r2, [r3, #28]
			return;
    1d58:	e006      	b.n	1d68 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    1d5a:	7bfb      	ldrb	r3, [r7, #15]
    1d5c:	3301      	adds	r3, #1
    1d5e:	73fb      	strb	r3, [r7, #15]
    1d60:	e7d3      	b.n	1d0a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    1d62:	6878      	ldr	r0, [r7, #4]
    1d64:	4b04      	ldr	r3, [pc, #16]	; (1d78 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    1d66:	4798      	blx	r3
	//task=&taskArray[0];

}
    1d68:	3710      	adds	r7, #16
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	bf00      	nop
    1d70:	200016bc 	.word	0x200016bc
    1d74:	00001be9 	.word	0x00001be9
    1d78:	00001c91 	.word	0x00001c91

00001d7c <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    1d7c:	b480      	push	{r7}
    1d7e:	b085      	sub	sp, #20
    1d80:	af00      	add	r7, sp, #0
    1d82:	6078      	str	r0, [r7, #4]
    1d84:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    1d86:	2300      	movs	r3, #0
    1d88:	73fb      	strb	r3, [r7, #15]
    1d8a:	7bfb      	ldrb	r3, [r7, #15]
    1d8c:	2b1f      	cmp	r3, #31
    1d8e:	dc19      	bgt.n	1dc4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    1d90:	7bfa      	ldrb	r2, [r7, #15]
    1d92:	490f      	ldr	r1, [pc, #60]	; (1dd0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    1d94:	4613      	mov	r3, r2
    1d96:	009b      	lsls	r3, r3, #2
    1d98:	4413      	add	r3, r2
    1d9a:	009b      	lsls	r3, r3, #2
    1d9c:	440b      	add	r3, r1
    1d9e:	330c      	adds	r3, #12
    1da0:	681a      	ldr	r2, [r3, #0]
    1da2:	683b      	ldr	r3, [r7, #0]
    1da4:	429a      	cmp	r2, r3
    1da6:	d109      	bne.n	1dbc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    1da8:	7bfa      	ldrb	r2, [r7, #15]
    1daa:	4613      	mov	r3, r2
    1dac:	009b      	lsls	r3, r3, #2
    1dae:	4413      	add	r3, r2
    1db0:	009b      	lsls	r3, r3, #2
    1db2:	4a07      	ldr	r2, [pc, #28]	; (1dd0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    1db4:	441a      	add	r2, r3
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	619a      	str	r2, [r3, #24]
			return;
    1dba:	e004      	b.n	1dc6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    1dbc:	7bfb      	ldrb	r3, [r7, #15]
    1dbe:	3301      	adds	r3, #1
    1dc0:	73fb      	strb	r3, [r7, #15]
    1dc2:	e7e2      	b.n	1d8a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    1dc4:	bf00      	nop
}
    1dc6:	3714      	adds	r7, #20
    1dc8:	46bd      	mov	sp, r7
    1dca:	bc80      	pop	{r7}
    1dcc:	4770      	bx	lr
    1dce:	bf00      	nop
    1dd0:	200016bc 	.word	0x200016bc

00001dd4 <_Z41__static_initialization_and_destruction_0ii>:
    1dd4:	b580      	push	{r7, lr}
    1dd6:	b082      	sub	sp, #8
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	6039      	str	r1, [r7, #0]
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	2b01      	cmp	r3, #1
    1de2:	d143      	bne.n	1e6c <_Z41__static_initialization_and_destruction_0ii+0x98>
    1de4:	683b      	ldr	r3, [r7, #0]
    1de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1dea:	4293      	cmp	r3, r2
    1dec:	d13e      	bne.n	1e6c <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1dee:	4921      	ldr	r1, [pc, #132]	; (1e74 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1df0:	4821      	ldr	r0, [pc, #132]	; (1e78 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    1df2:	4b22      	ldr	r3, [pc, #136]	; (1e7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1df4:	4798      	blx	r3
    1df6:	4a22      	ldr	r2, [pc, #136]	; (1e80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1df8:	4922      	ldr	r1, [pc, #136]	; (1e84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1dfa:	481f      	ldr	r0, [pc, #124]	; (1e78 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    1dfc:	4b22      	ldr	r3, [pc, #136]	; (1e88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1dfe:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    1e00:	4922      	ldr	r1, [pc, #136]	; (1e8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    1e02:	4823      	ldr	r0, [pc, #140]	; (1e90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1e04:	4b1d      	ldr	r3, [pc, #116]	; (1e7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1e06:	4798      	blx	r3
    1e08:	4a1d      	ldr	r2, [pc, #116]	; (1e80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1e0a:	491e      	ldr	r1, [pc, #120]	; (1e84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1e0c:	4820      	ldr	r0, [pc, #128]	; (1e90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1e0e:	4b1e      	ldr	r3, [pc, #120]	; (1e88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1e10:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    1e12:	4920      	ldr	r1, [pc, #128]	; (1e94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    1e14:	4820      	ldr	r0, [pc, #128]	; (1e98 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    1e16:	4b19      	ldr	r3, [pc, #100]	; (1e7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1e18:	4798      	blx	r3
    1e1a:	4a19      	ldr	r2, [pc, #100]	; (1e80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1e1c:	4919      	ldr	r1, [pc, #100]	; (1e84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1e1e:	481e      	ldr	r0, [pc, #120]	; (1e98 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    1e20:	4b19      	ldr	r3, [pc, #100]	; (1e88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1e22:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1e24:	491d      	ldr	r1, [pc, #116]	; (1e9c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    1e26:	481e      	ldr	r0, [pc, #120]	; (1ea0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1e28:	4b14      	ldr	r3, [pc, #80]	; (1e7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1e2a:	4798      	blx	r3
    1e2c:	4a14      	ldr	r2, [pc, #80]	; (1e80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1e2e:	4915      	ldr	r1, [pc, #84]	; (1e84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1e30:	481b      	ldr	r0, [pc, #108]	; (1ea0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1e32:	4b15      	ldr	r3, [pc, #84]	; (1e88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1e34:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    1e36:	491b      	ldr	r1, [pc, #108]	; (1ea4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1e38:	481b      	ldr	r0, [pc, #108]	; (1ea8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1e3a:	4b10      	ldr	r3, [pc, #64]	; (1e7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1e3c:	4798      	blx	r3
    1e3e:	4a10      	ldr	r2, [pc, #64]	; (1e80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1e40:	4910      	ldr	r1, [pc, #64]	; (1e84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1e42:	4819      	ldr	r0, [pc, #100]	; (1ea8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1e44:	4b10      	ldr	r3, [pc, #64]	; (1e88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1e46:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    1e48:	4918      	ldr	r1, [pc, #96]	; (1eac <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1e4a:	4819      	ldr	r0, [pc, #100]	; (1eb0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1e4c:	4b0b      	ldr	r3, [pc, #44]	; (1e7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1e4e:	4798      	blx	r3
    1e50:	4a0b      	ldr	r2, [pc, #44]	; (1e80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1e52:	490c      	ldr	r1, [pc, #48]	; (1e84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1e54:	4816      	ldr	r0, [pc, #88]	; (1eb0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    1e56:	4b0c      	ldr	r3, [pc, #48]	; (1e88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1e58:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    1e5a:	4916      	ldr	r1, [pc, #88]	; (1eb4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    1e5c:	4816      	ldr	r0, [pc, #88]	; (1eb8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1e5e:	4b07      	ldr	r3, [pc, #28]	; (1e7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    1e60:	4798      	blx	r3
    1e62:	4a07      	ldr	r2, [pc, #28]	; (1e80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    1e64:	4907      	ldr	r1, [pc, #28]	; (1e84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    1e66:	4814      	ldr	r0, [pc, #80]	; (1eb8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    1e68:	4b07      	ldr	r3, [pc, #28]	; (1e88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1e6a:	4798      	blx	r3
    1e6c:	bf00      	nop
    1e6e:	3708      	adds	r7, #8
    1e70:	46bd      	mov	sp, r7
    1e72:	bd80      	pop	{r7, pc}
    1e74:	200022dc 	.word	0x200022dc
    1e78:	200015d8 	.word	0x200015d8
    1e7c:	00001a0d 	.word	0x00001a0d
    1e80:	20000000 	.word	0x20000000
    1e84:	00001a45 	.word	0x00001a45
    1e88:	0000f4b1 	.word	0x0000f4b1
    1e8c:	20002370 	.word	0x20002370
    1e90:	200015f8 	.word	0x200015f8
    1e94:	20002474 	.word	0x20002474
    1e98:	20001618 	.word	0x20001618
    1e9c:	20002390 	.word	0x20002390
    1ea0:	20001638 	.word	0x20001638
    1ea4:	20002434 	.word	0x20002434
    1ea8:	20001658 	.word	0x20001658
    1eac:	20002454 	.word	0x20002454
    1eb0:	20001678 	.word	0x20001678
    1eb4:	2000234c 	.word	0x2000234c
    1eb8:	20001698 	.word	0x20001698

00001ebc <_GLOBAL__sub_I_ptrTimerClass>:
    1ebc:	b580      	push	{r7, lr}
    1ebe:	af00      	add	r7, sp, #0
    1ec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1ec4:	2001      	movs	r0, #1
    1ec6:	4b01      	ldr	r3, [pc, #4]	; (1ecc <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    1ec8:	4798      	blx	r3
    1eca:	bd80      	pop	{r7, pc}
    1ecc:	00001dd5 	.word	0x00001dd5

00001ed0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ed0:	b480      	push	{r7}
    1ed2:	b083      	sub	sp, #12
    1ed4:	af00      	add	r7, sp, #0
    1ed6:	6078      	str	r0, [r7, #4]
    1ed8:	4a05      	ldr	r2, [pc, #20]	; (1ef0 <_ZN5PrintC1Ev+0x20>)
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	601a      	str	r2, [r3, #0]
    1ede:	687b      	ldr	r3, [r7, #4]
    1ee0:	2200      	movs	r2, #0
    1ee2:	605a      	str	r2, [r3, #4]
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	4618      	mov	r0, r3
    1ee8:	370c      	adds	r7, #12
    1eea:	46bd      	mov	sp, r7
    1eec:	bc80      	pop	{r7}
    1eee:	4770      	bx	lr
    1ef0:	0000ffbc 	.word	0x0000ffbc

00001ef4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1ef4:	b480      	push	{r7}
    1ef6:	b083      	sub	sp, #12
    1ef8:	af00      	add	r7, sp, #0
    1efa:	6078      	str	r0, [r7, #4]
    1efc:	2300      	movs	r3, #0
    1efe:	4618      	mov	r0, r3
    1f00:	370c      	adds	r7, #12
    1f02:	46bd      	mov	sp, r7
    1f04:	bc80      	pop	{r7}
    1f06:	4770      	bx	lr

00001f08 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1f08:	b480      	push	{r7}
    1f0a:	b083      	sub	sp, #12
    1f0c:	af00      	add	r7, sp, #0
    1f0e:	6078      	str	r0, [r7, #4]
    1f10:	bf00      	nop
    1f12:	370c      	adds	r7, #12
    1f14:	46bd      	mov	sp, r7
    1f16:	bc80      	pop	{r7}
    1f18:	4770      	bx	lr
	...

00001f1c <_ZN6StreamC1Ev>:
    Stream() {_timeout=1000;}
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b082      	sub	sp, #8
    1f20:	af00      	add	r7, sp, #0
    1f22:	6078      	str	r0, [r7, #4]
    1f24:	687b      	ldr	r3, [r7, #4]
    1f26:	4618      	mov	r0, r3
    1f28:	4b06      	ldr	r3, [pc, #24]	; (1f44 <_ZN6StreamC1Ev+0x28>)
    1f2a:	4798      	blx	r3
    1f2c:	4a06      	ldr	r2, [pc, #24]	; (1f48 <_ZN6StreamC1Ev+0x2c>)
    1f2e:	687b      	ldr	r3, [r7, #4]
    1f30:	601a      	str	r2, [r3, #0]
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1f38:	609a      	str	r2, [r3, #8]
    1f3a:	687b      	ldr	r3, [r7, #4]
    1f3c:	4618      	mov	r0, r3
    1f3e:	3708      	adds	r7, #8
    1f40:	46bd      	mov	sp, r7
    1f42:	bd80      	pop	{r7, pc}
    1f44:	00001ed1 	.word	0x00001ed1
    1f48:	0000ff80 	.word	0x0000ff80

00001f4c <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    1f4c:	b480      	push	{r7}
    1f4e:	b083      	sub	sp, #12
    1f50:	af00      	add	r7, sp, #0
    1f52:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    1f54:	4b06      	ldr	r3, [pc, #24]	; (1f70 <_ZL10USBTimeoutPK10timer_task+0x24>)
    1f56:	681b      	ldr	r3, [r3, #0]
    1f58:	2201      	movs	r2, #1
    1f5a:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    1f5c:	4b04      	ldr	r3, [pc, #16]	; (1f70 <_ZL10USBTimeoutPK10timer_task+0x24>)
    1f5e:	681b      	ldr	r3, [r3, #0]
    1f60:	2200      	movs	r2, #0
    1f62:	741a      	strb	r2, [r3, #16]
	
}
    1f64:	bf00      	nop
    1f66:	370c      	adds	r7, #12
    1f68:	46bd      	mov	sp, r7
    1f6a:	bc80      	pop	{r7}
    1f6c:	4770      	bx	lr
    1f6e:	bf00      	nop
    1f70:	20001aa0 	.word	0x20001aa0

00001f74 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1f74:	b480      	push	{r7}
    1f76:	b083      	sub	sp, #12
    1f78:	af00      	add	r7, sp, #0
    1f7a:	4603      	mov	r3, r0
    1f7c:	603a      	str	r2, [r7, #0]
    1f7e:	71fb      	strb	r3, [r7, #7]
    1f80:	460b      	mov	r3, r1
    1f82:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    1f84:	4b08      	ldr	r3, [pc, #32]	; (1fa8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1f86:	681b      	ldr	r3, [r3, #0]
    1f88:	2201      	movs	r2, #1
    1f8a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    1f8c:	4b06      	ldr	r3, [pc, #24]	; (1fa8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	2201      	movs	r2, #1
    1f92:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    1f94:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1f96:	681b      	ldr	r3, [r3, #0]
    1f98:	2201      	movs	r2, #1
    1f9a:	741a      	strb	r2, [r3, #16]


	return false;
    1f9c:	2300      	movs	r3, #0
}
    1f9e:	4618      	mov	r0, r3
    1fa0:	370c      	adds	r7, #12
    1fa2:	46bd      	mov	sp, r7
    1fa4:	bc80      	pop	{r7}
    1fa6:	4770      	bx	lr
    1fa8:	20001aa0 	.word	0x20001aa0

00001fac <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1fac:	b480      	push	{r7}
    1fae:	b083      	sub	sp, #12
    1fb0:	af00      	add	r7, sp, #0
    1fb2:	4603      	mov	r3, r0
    1fb4:	603a      	str	r2, [r7, #0]
    1fb6:	71fb      	strb	r3, [r7, #7]
    1fb8:	460b      	mov	r3, r1
    1fba:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    1fbc:	4b08      	ldr	r3, [pc, #32]	; (1fe0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1fbe:	681b      	ldr	r3, [r3, #0]
    1fc0:	2201      	movs	r2, #1
    1fc2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    1fc4:	4b06      	ldr	r3, [pc, #24]	; (1fe0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	2201      	movs	r2, #1
    1fca:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    1fcc:	4b04      	ldr	r3, [pc, #16]	; (1fe0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1fce:	681b      	ldr	r3, [r3, #0]
    1fd0:	2201      	movs	r2, #1
    1fd2:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    1fd4:	2300      	movs	r3, #0
}
    1fd6:	4618      	mov	r0, r3
    1fd8:	370c      	adds	r7, #12
    1fda:	46bd      	mov	sp, r7
    1fdc:	bc80      	pop	{r7}
    1fde:	4770      	bx	lr
    1fe0:	20001aa0 	.word	0x20001aa0

00001fe4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    1fe4:	b580      	push	{r7, lr}
    1fe6:	b082      	sub	sp, #8
    1fe8:	af00      	add	r7, sp, #0
    1fea:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    1fec:	793b      	ldrb	r3, [r7, #4]
    1fee:	f003 0301 	and.w	r3, r3, #1
    1ff2:	b2db      	uxtb	r3, r3
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d013      	beq.n	2020 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    1ff8:	490c      	ldr	r1, [pc, #48]	; (202c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    1ffa:	2000      	movs	r0, #0
    1ffc:	4b0c      	ldr	r3, [pc, #48]	; (2030 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    1ffe:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    2000:	490c      	ldr	r1, [pc, #48]	; (2034 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    2002:	2001      	movs	r0, #1
    2004:	4b0a      	ldr	r3, [pc, #40]	; (2030 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    2006:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    2008:	4b0b      	ldr	r3, [pc, #44]	; (2038 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    200a:	681b      	ldr	r3, [r3, #0]
    200c:	2201      	movs	r2, #1
    200e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    2010:	4b09      	ldr	r3, [pc, #36]	; (2038 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    2012:	681b      	ldr	r3, [r3, #0]
    2014:	2201      	movs	r2, #1
    2016:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    2018:	4b07      	ldr	r3, [pc, #28]	; (2038 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    201a:	681b      	ldr	r3, [r3, #0]
    201c:	2201      	movs	r2, #1
    201e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    2020:	2300      	movs	r3, #0
}
    2022:	4618      	mov	r0, r3
    2024:	3708      	adds	r7, #8
    2026:	46bd      	mov	sp, r7
    2028:	bd80      	pop	{r7, pc}
    202a:	bf00      	nop
    202c:	00001f75 	.word	0x00001f75
    2030:	0000e435 	.word	0x0000e435
    2034:	00001fad 	.word	0x00001fad
    2038:	20001aa0 	.word	0x20001aa0

0000203c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    203c:	b580      	push	{r7, lr}
    203e:	b082      	sub	sp, #8
    2040:	af00      	add	r7, sp, #0
    2042:	6078      	str	r0, [r7, #4]
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	4618      	mov	r0, r3
    2048:	4b0a      	ldr	r3, [pc, #40]	; (2074 <_ZN9CDC_ClassC1Ev+0x38>)
    204a:	4798      	blx	r3
    204c:	687b      	ldr	r3, [r7, #4]
    204e:	3310      	adds	r3, #16
    2050:	4618      	mov	r0, r3
    2052:	4b09      	ldr	r3, [pc, #36]	; (2078 <_ZN9CDC_ClassC1Ev+0x3c>)
    2054:	4798      	blx	r3
    2056:	4a09      	ldr	r2, [pc, #36]	; (207c <_ZN9CDC_ClassC1Ev+0x40>)
    2058:	687b      	ldr	r3, [r7, #4]
    205a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	f04f 32ff 	mov.w	r2, #4294967295
    2062:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    2064:	4a06      	ldr	r2, [pc, #24]	; (2080 <_ZN9CDC_ClassC1Ev+0x44>)
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	4618      	mov	r0, r3
    206e:	3708      	adds	r7, #8
    2070:	46bd      	mov	sp, r7
    2072:	bd80      	pop	{r7, pc}
    2074:	00001f1d 	.word	0x00001f1d
    2078:	00002769 	.word	0x00002769
    207c:	0000ff50 	.word	0x0000ff50
    2080:	20001aa0 	.word	0x20001aa0

00002084 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    2084:	b580      	push	{r7, lr}
    2086:	b082      	sub	sp, #8
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
    208c:	4a06      	ldr	r2, [pc, #24]	; (20a8 <_ZN9CDC_ClassD1Ev+0x24>)
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	601a      	str	r2, [r3, #0]
    2092:	687b      	ldr	r3, [r7, #4]
    2094:	3310      	adds	r3, #16
    2096:	4618      	mov	r0, r3
    2098:	4b04      	ldr	r3, [pc, #16]	; (20ac <_ZN9CDC_ClassD1Ev+0x28>)
    209a:	4798      	blx	r3
{
} //~CDC_Class
    209c:	687b      	ldr	r3, [r7, #4]
    209e:	4618      	mov	r0, r3
    20a0:	3708      	adds	r7, #8
    20a2:	46bd      	mov	sp, r7
    20a4:	bd80      	pop	{r7, pc}
    20a6:	bf00      	nop
    20a8:	0000ff50 	.word	0x0000ff50
    20ac:	00002789 	.word	0x00002789

000020b0 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    20b0:	b580      	push	{r7, lr}
    20b2:	b082      	sub	sp, #8
    20b4:	af00      	add	r7, sp, #0
    20b6:	6078      	str	r0, [r7, #4]
	
	OnInit();
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	3310      	adds	r3, #16
    20bc:	4618      	mov	r0, r3
    20be:	4b09      	ldr	r3, [pc, #36]	; (20e4 <_ZN9CDC_Class4InitEv+0x34>)
    20c0:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    20c2:	4909      	ldr	r1, [pc, #36]	; (20e8 <_ZN9CDC_Class4InitEv+0x38>)
    20c4:	2003      	movs	r0, #3
    20c6:	4b09      	ldr	r3, [pc, #36]	; (20ec <_ZN9CDC_Class4InitEv+0x3c>)
    20c8:	4798      	blx	r3
	delay_ms(100);
    20ca:	2064      	movs	r0, #100	; 0x64
    20cc:	4b08      	ldr	r3, [pc, #32]	; (20f0 <_ZN9CDC_Class4InitEv+0x40>)
    20ce:	4798      	blx	r3
		
	if (connected)
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    20d4:	2064      	movs	r0, #100	; 0x64
    20d6:	4b06      	ldr	r3, [pc, #24]	; (20f0 <_ZN9CDC_Class4InitEv+0x40>)
    20d8:	4798      	blx	r3

	

}
    20da:	bf00      	nop
    20dc:	3708      	adds	r7, #8
    20de:	46bd      	mov	sp, r7
    20e0:	bd80      	pop	{r7, pc}
    20e2:	bf00      	nop
    20e4:	0000279d 	.word	0x0000279d
    20e8:	00001fe5 	.word	0x00001fe5
    20ec:	0000e435 	.word	0x0000e435
    20f0:	00004441 	.word	0x00004441

000020f4 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    20f4:	b580      	push	{r7, lr}
    20f6:	b082      	sub	sp, #8
    20f8:	af00      	add	r7, sp, #0
    20fa:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    20fc:	4b03      	ldr	r3, [pc, #12]	; (210c <_ZN9CDC_Class9IsEnabledEv+0x18>)
    20fe:	4798      	blx	r3
    2100:	4603      	mov	r3, r0
	
}
    2102:	4618      	mov	r0, r3
    2104:	3708      	adds	r7, #8
    2106:	46bd      	mov	sp, r7
    2108:	bd80      	pop	{r7, pc}
    210a:	bf00      	nop
    210c:	0000e4ad 	.word	0x0000e4ad

00002110 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    2110:	b580      	push	{r7, lr}
    2112:	b084      	sub	sp, #16
    2114:	af00      	add	r7, sp, #0
    2116:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	699b      	ldr	r3, [r3, #24]
    211c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2120:	bf14      	ite	ne
    2122:	2301      	movne	r3, #1
    2124:	2300      	moveq	r3, #0
    2126:	b2db      	uxtb	r3, r3
    2128:	2b00      	cmp	r3, #0
    212a:	d002      	beq.n	2132 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	699b      	ldr	r3, [r3, #24]
    2130:	e011      	b.n	2156 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	681b      	ldr	r3, [r3, #0]
    2136:	331c      	adds	r3, #28
    2138:	681b      	ldr	r3, [r3, #0]
    213a:	f107 010f 	add.w	r1, r7, #15
    213e:	2201      	movs	r2, #1
    2140:	6878      	ldr	r0, [r7, #4]
    2142:	4798      	blx	r3
    2144:	4602      	mov	r2, r0
    2146:	687b      	ldr	r3, [r7, #4]
    2148:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    214a:	7bfb      	ldrb	r3, [r7, #15]
    214c:	461a      	mov	r2, r3
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	699b      	ldr	r3, [r3, #24]
}
    2156:	4618      	mov	r0, r3
    2158:	3710      	adds	r7, #16
    215a:	46bd      	mov	sp, r7
    215c:	bd80      	pop	{r7, pc}
	...

00002160 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    2160:	b580      	push	{r7, lr}
    2162:	b086      	sub	sp, #24
    2164:	af00      	add	r7, sp, #0
    2166:	60f8      	str	r0, [r7, #12]
    2168:	60b9      	str	r1, [r7, #8]
    216a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    216c:	68fb      	ldr	r3, [r7, #12]
    216e:	7c1b      	ldrb	r3, [r3, #16]
    2170:	b2db      	uxtb	r3, r3
    2172:	2b00      	cmp	r3, #0
    2174:	d02e      	beq.n	21d4 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    2176:	687a      	ldr	r2, [r7, #4]
    2178:	4613      	mov	r3, r2
    217a:	009b      	lsls	r3, r3, #2
    217c:	4413      	add	r3, r2
    217e:	005b      	lsls	r3, r3, #1
    2180:	461a      	mov	r2, r3
    2182:	4918      	ldr	r1, [pc, #96]	; (21e4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    2184:	4818      	ldr	r0, [pc, #96]	; (21e8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    2186:	4b19      	ldr	r3, [pc, #100]	; (21ec <_ZN9CDC_Class8readDataEPvl+0x8c>)
    2188:	4798      	blx	r3
		rxReady=false;
    218a:	68fb      	ldr	r3, [r7, #12]
    218c:	2200      	movs	r2, #0
    218e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	4619      	mov	r1, r3
    2194:	68b8      	ldr	r0, [r7, #8]
    2196:	4b16      	ldr	r3, [pc, #88]	; (21f0 <_ZN9CDC_Class8readDataEPvl+0x90>)
    2198:	4798      	blx	r3
    219a:	4603      	mov	r3, r0
    219c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    219e:	68fb      	ldr	r3, [r7, #12]
    21a0:	7d5b      	ldrb	r3, [r3, #21]
    21a2:	b2db      	uxtb	r3, r3
    21a4:	f083 0301 	eor.w	r3, r3, #1
    21a8:	b2db      	uxtb	r3, r3
    21aa:	2b00      	cmp	r3, #0
    21ac:	d006      	beq.n	21bc <_ZN9CDC_Class8readDataEPvl+0x5c>
    21ae:	68fb      	ldr	r3, [r7, #12]
    21b0:	7c1b      	ldrb	r3, [r3, #16]
    21b2:	b2db      	uxtb	r3, r3
    21b4:	2b00      	cmp	r3, #0
    21b6:	d001      	beq.n	21bc <_ZN9CDC_Class8readDataEPvl+0x5c>
    21b8:	2301      	movs	r3, #1
    21ba:	e000      	b.n	21be <_ZN9CDC_Class8readDataEPvl+0x5e>
    21bc:	2300      	movs	r3, #0
    21be:	2b00      	cmp	r3, #0
    21c0:	d000      	beq.n	21c4 <_ZN9CDC_Class8readDataEPvl+0x64>
    21c2:	e7ec      	b.n	219e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    21c4:	4808      	ldr	r0, [pc, #32]	; (21e8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    21c6:	4b0b      	ldr	r3, [pc, #44]	; (21f4 <_ZN9CDC_Class8readDataEPvl+0x94>)
    21c8:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    21ca:	4906      	ldr	r1, [pc, #24]	; (21e4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    21cc:	4806      	ldr	r0, [pc, #24]	; (21e8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    21ce:	4b0a      	ldr	r3, [pc, #40]	; (21f8 <_ZN9CDC_Class8readDataEPvl+0x98>)
    21d0:	4798      	blx	r3
    21d2:	e001      	b.n	21d8 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    21d4:	2300      	movs	r3, #0
    21d6:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    21d8:	7dfb      	ldrb	r3, [r7, #23]
}
    21da:	4618      	mov	r0, r3
    21dc:	3718      	adds	r7, #24
    21de:	46bd      	mov	sp, r7
    21e0:	bd80      	pop	{r7, pc}
    21e2:	bf00      	nop
    21e4:	00001f4d 	.word	0x00001f4d
    21e8:	20001a60 	.word	0x20001a60
    21ec:	00001c41 	.word	0x00001c41
    21f0:	0000e389 	.word	0x0000e389
    21f4:	00001b6d 	.word	0x00001b6d
    21f8:	00001be9 	.word	0x00001be9

000021fc <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b084      	sub	sp, #16
    2200:	af00      	add	r7, sp, #0
    2202:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	2200      	movs	r2, #0
    2208:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    220a:	f107 030f 	add.w	r3, r7, #15
    220e:	2101      	movs	r1, #1
    2210:	4618      	mov	r0, r3
    2212:	4b08      	ldr	r3, [pc, #32]	; (2234 <_ZN9CDC_Class4readEv+0x38>)
    2214:	4798      	blx	r3
	while(!rxReady);
    2216:	687b      	ldr	r3, [r7, #4]
    2218:	7d5b      	ldrb	r3, [r3, #21]
    221a:	b2db      	uxtb	r3, r3
    221c:	f083 0301 	eor.w	r3, r3, #1
    2220:	b2db      	uxtb	r3, r3
    2222:	2b00      	cmp	r3, #0
    2224:	d000      	beq.n	2228 <_ZN9CDC_Class4readEv+0x2c>
    2226:	e7f6      	b.n	2216 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    2228:	7bfb      	ldrb	r3, [r7, #15]
}
    222a:	4618      	mov	r0, r3
    222c:	3710      	adds	r7, #16
    222e:	46bd      	mov	sp, r7
    2230:	bd80      	pop	{r7, pc}
    2232:	bf00      	nop
    2234:	0000e389 	.word	0x0000e389

00002238 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    2238:	b580      	push	{r7, lr}
    223a:	b082      	sub	sp, #8
    223c:	af00      	add	r7, sp, #0
    223e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    2240:	687b      	ldr	r3, [r7, #4]
    2242:	331c      	adds	r3, #28
    2244:	2140      	movs	r1, #64	; 0x40
    2246:	4618      	mov	r0, r3
    2248:	4b02      	ldr	r3, [pc, #8]	; (2254 <_ZN9CDC_Class5flushEv+0x1c>)
    224a:	4798      	blx	r3
}
    224c:	bf00      	nop
    224e:	3708      	adds	r7, #8
    2250:	46bd      	mov	sp, r7
    2252:	bd80      	pop	{r7, pc}
    2254:	0000e3cd 	.word	0x0000e3cd

00002258 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    2258:	b580      	push	{r7, lr}
    225a:	b082      	sub	sp, #8
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    2260:	4b02      	ldr	r3, [pc, #8]	; (226c <_ZN9CDC_Class5clearEv+0x14>)
    2262:	4798      	blx	r3
}
    2264:	bf00      	nop
    2266:	3708      	adds	r7, #8
    2268:	46bd      	mov	sp, r7
    226a:	bd80      	pop	{r7, pc}
    226c:	0000e411 	.word	0x0000e411

00002270 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    2270:	b580      	push	{r7, lr}
    2272:	b082      	sub	sp, #8
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
    2278:	460b      	mov	r3, r1
    227a:	70fb      	strb	r3, [r7, #3]
	if (connected){
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	7c1b      	ldrb	r3, [r3, #16]
    2280:	b2db      	uxtb	r3, r3
    2282:	2b00      	cmp	r3, #0
    2284:	d012      	beq.n	22ac <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    2286:	687b      	ldr	r3, [r7, #4]
    2288:	7d1b      	ldrb	r3, [r3, #20]
    228a:	b2db      	uxtb	r3, r3
    228c:	f083 0301 	eor.w	r3, r3, #1
    2290:	b2db      	uxtb	r3, r3
    2292:	2b00      	cmp	r3, #0
    2294:	d000      	beq.n	2298 <_ZN9CDC_Class5writeEh+0x28>
    2296:	e7f6      	b.n	2286 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	3324      	adds	r3, #36	; 0x24
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	1cf9      	adds	r1, r7, #3
    22a2:	2201      	movs	r2, #1
    22a4:	6878      	ldr	r0, [r7, #4]
    22a6:	4798      	blx	r3
    22a8:	4603      	mov	r3, r0
    22aa:	e000      	b.n	22ae <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    22ac:	2300      	movs	r3, #0
	}
		
}
    22ae:	4618      	mov	r0, r3
    22b0:	3708      	adds	r7, #8
    22b2:	46bd      	mov	sp, r7
    22b4:	bd80      	pop	{r7, pc}
	...

000022b8 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	b086      	sub	sp, #24
    22bc:	af00      	add	r7, sp, #0
    22be:	60f8      	str	r0, [r7, #12]
    22c0:	60b9      	str	r1, [r7, #8]
    22c2:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    22c4:	68fb      	ldr	r3, [r7, #12]
    22c6:	7c1b      	ldrb	r3, [r3, #16]
    22c8:	b2db      	uxtb	r3, r3
    22ca:	2b00      	cmp	r3, #0
    22cc:	d02f      	beq.n	232e <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    22ce:	687a      	ldr	r2, [r7, #4]
    22d0:	4613      	mov	r3, r2
    22d2:	009b      	lsls	r3, r3, #2
    22d4:	4413      	add	r3, r2
    22d6:	005b      	lsls	r3, r3, #1
    22d8:	461a      	mov	r2, r3
    22da:	4917      	ldr	r1, [pc, #92]	; (2338 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    22dc:	4817      	ldr	r0, [pc, #92]	; (233c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    22de:	4b18      	ldr	r3, [pc, #96]	; (2340 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    22e0:	4798      	blx	r3
		txReady=false;
    22e2:	68fb      	ldr	r3, [r7, #12]
    22e4:	2200      	movs	r2, #0
    22e6:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	4619      	mov	r1, r3
    22ec:	68b8      	ldr	r0, [r7, #8]
    22ee:	4b15      	ldr	r3, [pc, #84]	; (2344 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    22f0:	4798      	blx	r3
    22f2:	4603      	mov	r3, r0
    22f4:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	7d1b      	ldrb	r3, [r3, #20]
    22fa:	b2db      	uxtb	r3, r3
    22fc:	f083 0301 	eor.w	r3, r3, #1
    2300:	b2db      	uxtb	r3, r3
    2302:	2b00      	cmp	r3, #0
    2304:	d006      	beq.n	2314 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    2306:	68fb      	ldr	r3, [r7, #12]
    2308:	7c1b      	ldrb	r3, [r3, #16]
    230a:	b2db      	uxtb	r3, r3
    230c:	2b00      	cmp	r3, #0
    230e:	d001      	beq.n	2314 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    2310:	2301      	movs	r3, #1
    2312:	e000      	b.n	2316 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    2314:	2300      	movs	r3, #0
    2316:	2b00      	cmp	r3, #0
    2318:	d000      	beq.n	231c <_ZN9CDC_Class9writeDataEPKvl+0x64>
    231a:	e7ec      	b.n	22f6 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    231c:	4807      	ldr	r0, [pc, #28]	; (233c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    231e:	4b0a      	ldr	r3, [pc, #40]	; (2348 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    2320:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    2322:	4905      	ldr	r1, [pc, #20]	; (2338 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    2324:	4805      	ldr	r0, [pc, #20]	; (233c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    2326:	4b09      	ldr	r3, [pc, #36]	; (234c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    2328:	4798      	blx	r3
		return r;
    232a:	697b      	ldr	r3, [r7, #20]
    232c:	e000      	b.n	2330 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    232e:	2300      	movs	r3, #0
	}
	

}
    2330:	4618      	mov	r0, r3
    2332:	3718      	adds	r7, #24
    2334:	46bd      	mov	sp, r7
    2336:	bd80      	pop	{r7, pc}
    2338:	00001f4d 	.word	0x00001f4d
    233c:	20001a60 	.word	0x20001a60
    2340:	00001c41 	.word	0x00001c41
    2344:	0000e3cd 	.word	0x0000e3cd
    2348:	00001b6d 	.word	0x00001b6d
    234c:	00001be9 	.word	0x00001be9

00002350 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    2350:	b580      	push	{r7, lr}
    2352:	b086      	sub	sp, #24
    2354:	af00      	add	r7, sp, #0
    2356:	60f8      	str	r0, [r7, #12]
    2358:	60b9      	str	r1, [r7, #8]
    235a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    235c:	68fb      	ldr	r3, [r7, #12]
    235e:	2200      	movs	r2, #0
    2360:	751a      	strb	r2, [r3, #20]

 	if (connected){
    2362:	68fb      	ldr	r3, [r7, #12]
    2364:	7c1b      	ldrb	r3, [r3, #16]
    2366:	b2db      	uxtb	r3, r3
    2368:	2b00      	cmp	r3, #0
    236a:	d02a      	beq.n	23c2 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    236c:	687a      	ldr	r2, [r7, #4]
    236e:	4613      	mov	r3, r2
    2370:	009b      	lsls	r3, r3, #2
    2372:	4413      	add	r3, r2
    2374:	005b      	lsls	r3, r3, #1
    2376:	461a      	mov	r2, r3
    2378:	4915      	ldr	r1, [pc, #84]	; (23d0 <_ZN9CDC_Class5writeEPKhj+0x80>)
    237a:	4816      	ldr	r0, [pc, #88]	; (23d4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    237c:	4b16      	ldr	r3, [pc, #88]	; (23d8 <_ZN9CDC_Class5writeEPKhj+0x88>)
    237e:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    2380:	6879      	ldr	r1, [r7, #4]
    2382:	68b8      	ldr	r0, [r7, #8]
    2384:	4b15      	ldr	r3, [pc, #84]	; (23dc <_ZN9CDC_Class5writeEPKhj+0x8c>)
    2386:	4798      	blx	r3
    2388:	4603      	mov	r3, r0
    238a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    238c:	68fb      	ldr	r3, [r7, #12]
    238e:	7d1b      	ldrb	r3, [r3, #20]
    2390:	b2db      	uxtb	r3, r3
    2392:	f083 0301 	eor.w	r3, r3, #1
    2396:	b2db      	uxtb	r3, r3
    2398:	2b00      	cmp	r3, #0
    239a:	d006      	beq.n	23aa <_ZN9CDC_Class5writeEPKhj+0x5a>
    239c:	68fb      	ldr	r3, [r7, #12]
    239e:	7c1b      	ldrb	r3, [r3, #16]
    23a0:	b2db      	uxtb	r3, r3
    23a2:	2b00      	cmp	r3, #0
    23a4:	d001      	beq.n	23aa <_ZN9CDC_Class5writeEPKhj+0x5a>
    23a6:	2301      	movs	r3, #1
    23a8:	e000      	b.n	23ac <_ZN9CDC_Class5writeEPKhj+0x5c>
    23aa:	2300      	movs	r3, #0
    23ac:	2b00      	cmp	r3, #0
    23ae:	d000      	beq.n	23b2 <_ZN9CDC_Class5writeEPKhj+0x62>
    23b0:	e7ec      	b.n	238c <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    23b2:	4808      	ldr	r0, [pc, #32]	; (23d4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    23b4:	4b0a      	ldr	r3, [pc, #40]	; (23e0 <_ZN9CDC_Class5writeEPKhj+0x90>)
    23b6:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    23b8:	4905      	ldr	r1, [pc, #20]	; (23d0 <_ZN9CDC_Class5writeEPKhj+0x80>)
    23ba:	4806      	ldr	r0, [pc, #24]	; (23d4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    23bc:	4b09      	ldr	r3, [pc, #36]	; (23e4 <_ZN9CDC_Class5writeEPKhj+0x94>)
    23be:	4798      	blx	r3
    23c0:	e001      	b.n	23c6 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    23c2:	2300      	movs	r3, #0
    23c4:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    23c6:	697b      	ldr	r3, [r7, #20]
}
    23c8:	4618      	mov	r0, r3
    23ca:	3718      	adds	r7, #24
    23cc:	46bd      	mov	sp, r7
    23ce:	bd80      	pop	{r7, pc}
    23d0:	00001f4d 	.word	0x00001f4d
    23d4:	20001a60 	.word	0x20001a60
    23d8:	00001c41 	.word	0x00001c41
    23dc:	0000e3cd 	.word	0x0000e3cd
    23e0:	00001b6d 	.word	0x00001b6d
    23e4:	00001be9 	.word	0x00001be9

000023e8 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    23e8:	b480      	push	{r7}
    23ea:	b083      	sub	sp, #12
    23ec:	af00      	add	r7, sp, #0
    23ee:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    23f0:	687b      	ldr	r3, [r7, #4]
    23f2:	7d5b      	ldrb	r3, [r3, #21]
    23f4:	b2db      	uxtb	r3, r3
    23f6:	2b00      	cmp	r3, #0
    23f8:	d006      	beq.n	2408 <_ZN9CDC_Class9availableEv+0x20>
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	7d1b      	ldrb	r3, [r3, #20]
    23fe:	b2db      	uxtb	r3, r3
    2400:	2b00      	cmp	r3, #0
    2402:	d001      	beq.n	2408 <_ZN9CDC_Class9availableEv+0x20>
    2404:	2301      	movs	r3, #1
    2406:	e000      	b.n	240a <_ZN9CDC_Class9availableEv+0x22>
    2408:	2300      	movs	r3, #0
    240a:	2b00      	cmp	r3, #0
    240c:	d001      	beq.n	2412 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    240e:	2301      	movs	r3, #1
    2410:	e000      	b.n	2414 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    2412:	2300      	movs	r3, #0
	}
	
}
    2414:	4618      	mov	r0, r3
    2416:	370c      	adds	r7, #12
    2418:	46bd      	mov	sp, r7
    241a:	bc80      	pop	{r7}
    241c:	4770      	bx	lr
	...

00002420 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    2420:	b580      	push	{r7, lr}
    2422:	b082      	sub	sp, #8
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
    2428:	6039      	str	r1, [r7, #0]
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	2b01      	cmp	r3, #1
    242e:	d14b      	bne.n	24c8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
    2430:	683b      	ldr	r3, [r7, #0]
    2432:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2436:	4293      	cmp	r3, r2
    2438:	d146      	bne.n	24c8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    243a:	4925      	ldr	r1, [pc, #148]	; (24d0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    243c:	4825      	ldr	r0, [pc, #148]	; (24d4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    243e:	4b26      	ldr	r3, [pc, #152]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2440:	4798      	blx	r3
    2442:	4a26      	ldr	r2, [pc, #152]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2444:	4926      	ldr	r1, [pc, #152]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    2446:	4823      	ldr	r0, [pc, #140]	; (24d4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    2448:	4b26      	ldr	r3, [pc, #152]	; (24e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    244a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    244c:	4926      	ldr	r1, [pc, #152]	; (24e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    244e:	4827      	ldr	r0, [pc, #156]	; (24ec <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2450:	4b21      	ldr	r3, [pc, #132]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2452:	4798      	blx	r3
    2454:	4a21      	ldr	r2, [pc, #132]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2456:	4922      	ldr	r1, [pc, #136]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    2458:	4824      	ldr	r0, [pc, #144]	; (24ec <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    245a:	4b22      	ldr	r3, [pc, #136]	; (24e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    245c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    245e:	4924      	ldr	r1, [pc, #144]	; (24f0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2460:	4824      	ldr	r0, [pc, #144]	; (24f4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2462:	4b1d      	ldr	r3, [pc, #116]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2464:	4798      	blx	r3
    2466:	4a1d      	ldr	r2, [pc, #116]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2468:	491d      	ldr	r1, [pc, #116]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    246a:	4822      	ldr	r0, [pc, #136]	; (24f4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    246c:	4b1d      	ldr	r3, [pc, #116]	; (24e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    246e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    2470:	4921      	ldr	r1, [pc, #132]	; (24f8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    2472:	4822      	ldr	r0, [pc, #136]	; (24fc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    2474:	4b18      	ldr	r3, [pc, #96]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2476:	4798      	blx	r3
    2478:	4a18      	ldr	r2, [pc, #96]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    247a:	4919      	ldr	r1, [pc, #100]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    247c:	481f      	ldr	r0, [pc, #124]	; (24fc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    247e:	4b19      	ldr	r3, [pc, #100]	; (24e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    2480:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    2482:	491f      	ldr	r1, [pc, #124]	; (2500 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    2484:	481f      	ldr	r0, [pc, #124]	; (2504 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    2486:	4b14      	ldr	r3, [pc, #80]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2488:	4798      	blx	r3
    248a:	4a14      	ldr	r2, [pc, #80]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    248c:	4914      	ldr	r1, [pc, #80]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    248e:	481d      	ldr	r0, [pc, #116]	; (2504 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    2490:	4b14      	ldr	r3, [pc, #80]	; (24e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    2492:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    2494:	491c      	ldr	r1, [pc, #112]	; (2508 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    2496:	481d      	ldr	r0, [pc, #116]	; (250c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    2498:	4b0f      	ldr	r3, [pc, #60]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    249a:	4798      	blx	r3
    249c:	4a0f      	ldr	r2, [pc, #60]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    249e:	4910      	ldr	r1, [pc, #64]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    24a0:	481a      	ldr	r0, [pc, #104]	; (250c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    24a2:	4b10      	ldr	r3, [pc, #64]	; (24e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    24a4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    24a6:	491a      	ldr	r1, [pc, #104]	; (2510 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    24a8:	481a      	ldr	r0, [pc, #104]	; (2514 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    24aa:	4b0b      	ldr	r3, [pc, #44]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    24ac:	4798      	blx	r3
    24ae:	4a0b      	ldr	r2, [pc, #44]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    24b0:	490b      	ldr	r1, [pc, #44]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    24b2:	4818      	ldr	r0, [pc, #96]	; (2514 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    24b4:	4b0b      	ldr	r3, [pc, #44]	; (24e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    24b6:	4798      	blx	r3
    24b8:	4817      	ldr	r0, [pc, #92]	; (2518 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    24ba:	4b18      	ldr	r3, [pc, #96]	; (251c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    24bc:	4798      	blx	r3
    24be:	4a07      	ldr	r2, [pc, #28]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    24c0:	4917      	ldr	r1, [pc, #92]	; (2520 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    24c2:	4815      	ldr	r0, [pc, #84]	; (2518 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    24c4:	4b07      	ldr	r3, [pc, #28]	; (24e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    24c6:	4798      	blx	r3
    24c8:	bf00      	nop
    24ca:	3708      	adds	r7, #8
    24cc:	46bd      	mov	sp, r7
    24ce:	bd80      	pop	{r7, pc}
    24d0:	200022dc 	.word	0x200022dc
    24d4:	200019c0 	.word	0x200019c0
    24d8:	00001a0d 	.word	0x00001a0d
    24dc:	20000000 	.word	0x20000000
    24e0:	00001a45 	.word	0x00001a45
    24e4:	0000f4b1 	.word	0x0000f4b1
    24e8:	20002370 	.word	0x20002370
    24ec:	200019e0 	.word	0x200019e0
    24f0:	20002474 	.word	0x20002474
    24f4:	20001a00 	.word	0x20001a00
    24f8:	20002390 	.word	0x20002390
    24fc:	20001a20 	.word	0x20001a20
    2500:	20002434 	.word	0x20002434
    2504:	20001a40 	.word	0x20001a40
    2508:	20002454 	.word	0x20002454
    250c:	20001a60 	.word	0x20001a60
    2510:	2000234c 	.word	0x2000234c
    2514:	20001a80 	.word	0x20001a80
    2518:	20001aa4 	.word	0x20001aa4
    251c:	0000203d 	.word	0x0000203d
    2520:	00002085 	.word	0x00002085

00002524 <_GLOBAL__sub_I_ptrCDCClass>:
    2524:	b580      	push	{r7, lr}
    2526:	af00      	add	r7, sp, #0
    2528:	f64f 71ff 	movw	r1, #65535	; 0xffff
    252c:	2001      	movs	r0, #1
    252e:	4b01      	ldr	r3, [pc, #4]	; (2534 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    2530:	4798      	blx	r3
    2532:	bd80      	pop	{r7, pc}
    2534:	00002421 	.word	0x00002421

00002538 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    2538:	b590      	push	{r4, r7, lr}
    253a:	b083      	sub	sp, #12
    253c:	af00      	add	r7, sp, #0
    253e:	6078      	str	r0, [r7, #4]
    2540:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    2542:	683b      	ldr	r3, [r7, #0]
    2544:	2b00      	cmp	r3, #0
    2546:	d101      	bne.n	254c <_ZN5Print5writeEPKc+0x14>
    2548:	2300      	movs	r3, #0
    254a:	e00c      	b.n	2566 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	681b      	ldr	r3, [r3, #0]
    2550:	3304      	adds	r3, #4
    2552:	681c      	ldr	r4, [r3, #0]
    2554:	6838      	ldr	r0, [r7, #0]
    2556:	4b06      	ldr	r3, [pc, #24]	; (2570 <_ZN5Print5writeEPKc+0x38>)
    2558:	4798      	blx	r3
    255a:	4603      	mov	r3, r0
    255c:	461a      	mov	r2, r3
    255e:	6839      	ldr	r1, [r7, #0]
    2560:	6878      	ldr	r0, [r7, #4]
    2562:	47a0      	blx	r4
    2564:	4603      	mov	r3, r0
    }
    2566:	4618      	mov	r0, r3
    2568:	370c      	adds	r7, #12
    256a:	46bd      	mov	sp, r7
    256c:	bd90      	pop	{r4, r7, pc}
    256e:	bf00      	nop
    2570:	0000fbc1 	.word	0x0000fbc1

00002574 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2574:	b580      	push	{r7, lr}
    2576:	b086      	sub	sp, #24
    2578:	af00      	add	r7, sp, #0
    257a:	60f8      	str	r0, [r7, #12]
    257c:	60b9      	str	r1, [r7, #8]
    257e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    2580:	2300      	movs	r3, #0
    2582:	617b      	str	r3, [r7, #20]
  while (size--) {
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	1e5a      	subs	r2, r3, #1
    2588:	607a      	str	r2, [r7, #4]
    258a:	2b00      	cmp	r3, #0
    258c:	bf14      	ite	ne
    258e:	2301      	movne	r3, #1
    2590:	2300      	moveq	r3, #0
    2592:	b2db      	uxtb	r3, r3
    2594:	2b00      	cmp	r3, #0
    2596:	d016      	beq.n	25c6 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    2598:	68fb      	ldr	r3, [r7, #12]
    259a:	681b      	ldr	r3, [r3, #0]
    259c:	681a      	ldr	r2, [r3, #0]
    259e:	68bb      	ldr	r3, [r7, #8]
    25a0:	1c59      	adds	r1, r3, #1
    25a2:	60b9      	str	r1, [r7, #8]
    25a4:	781b      	ldrb	r3, [r3, #0]
    25a6:	4619      	mov	r1, r3
    25a8:	68f8      	ldr	r0, [r7, #12]
    25aa:	4790      	blx	r2
    25ac:	4603      	mov	r3, r0
    25ae:	2b00      	cmp	r3, #0
    25b0:	bf14      	ite	ne
    25b2:	2301      	movne	r3, #1
    25b4:	2300      	moveq	r3, #0
    25b6:	b2db      	uxtb	r3, r3
    25b8:	2b00      	cmp	r3, #0
    25ba:	d003      	beq.n	25c4 <_ZN5Print5writeEPKhj+0x50>
    25bc:	697b      	ldr	r3, [r7, #20]
    25be:	3301      	adds	r3, #1
    25c0:	617b      	str	r3, [r7, #20]
  while (size--) {
    25c2:	e7df      	b.n	2584 <_ZN5Print5writeEPKhj+0x10>
    else break;
    25c4:	bf00      	nop
  }
  return n;
    25c6:	697b      	ldr	r3, [r7, #20]
}
    25c8:	4618      	mov	r0, r3
    25ca:	3718      	adds	r7, #24
    25cc:	46bd      	mov	sp, r7
    25ce:	bd80      	pop	{r7, pc}

000025d0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    25d0:	b580      	push	{r7, lr}
    25d2:	b082      	sub	sp, #8
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
    25d8:	6039      	str	r1, [r7, #0]
  return write(str);
    25da:	6839      	ldr	r1, [r7, #0]
    25dc:	6878      	ldr	r0, [r7, #4]
    25de:	4b03      	ldr	r3, [pc, #12]	; (25ec <_ZN5Print5printEPKc+0x1c>)
    25e0:	4798      	blx	r3
    25e2:	4603      	mov	r3, r0
}
    25e4:	4618      	mov	r0, r3
    25e6:	3708      	adds	r7, #8
    25e8:	46bd      	mov	sp, r7
    25ea:	bd80      	pop	{r7, pc}
    25ec:	00002539 	.word	0x00002539

000025f0 <hri_port_read_DIR_reg>:
{
    25f0:	b480      	push	{r7}
    25f2:	b083      	sub	sp, #12
    25f4:	af00      	add	r7, sp, #0
    25f6:	6078      	str	r0, [r7, #4]
    25f8:	460b      	mov	r3, r1
    25fa:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25fc:	78fb      	ldrb	r3, [r7, #3]
    25fe:	687a      	ldr	r2, [r7, #4]
    2600:	01db      	lsls	r3, r3, #7
    2602:	4413      	add	r3, r2
    2604:	681b      	ldr	r3, [r3, #0]
}
    2606:	4618      	mov	r0, r3
    2608:	370c      	adds	r7, #12
    260a:	46bd      	mov	sp, r7
    260c:	bc80      	pop	{r7}
    260e:	4770      	bx	lr

00002610 <hri_port_read_OUT_reg>:
{
    2610:	b480      	push	{r7}
    2612:	b083      	sub	sp, #12
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
    2618:	460b      	mov	r3, r1
    261a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    261c:	78fb      	ldrb	r3, [r7, #3]
    261e:	687a      	ldr	r2, [r7, #4]
    2620:	01db      	lsls	r3, r3, #7
    2622:	4413      	add	r3, r2
    2624:	3310      	adds	r3, #16
    2626:	681b      	ldr	r3, [r3, #0]
}
    2628:	4618      	mov	r0, r3
    262a:	370c      	adds	r7, #12
    262c:	46bd      	mov	sp, r7
    262e:	bc80      	pop	{r7}
    2630:	4770      	bx	lr

00002632 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    2632:	b480      	push	{r7}
    2634:	b083      	sub	sp, #12
    2636:	af00      	add	r7, sp, #0
    2638:	6078      	str	r0, [r7, #4]
    263a:	460b      	mov	r3, r1
    263c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    263e:	78fb      	ldrb	r3, [r7, #3]
    2640:	687a      	ldr	r2, [r7, #4]
    2642:	01db      	lsls	r3, r3, #7
    2644:	4413      	add	r3, r2
    2646:	3320      	adds	r3, #32
    2648:	681b      	ldr	r3, [r3, #0]
}
    264a:	4618      	mov	r0, r3
    264c:	370c      	adds	r7, #12
    264e:	46bd      	mov	sp, r7
    2650:	bc80      	pop	{r7}
    2652:	4770      	bx	lr

00002654 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    2654:	b580      	push	{r7, lr}
    2656:	b086      	sub	sp, #24
    2658:	af00      	add	r7, sp, #0
    265a:	4603      	mov	r3, r0
    265c:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    265e:	f107 030c 	add.w	r3, r7, #12
    2662:	4618      	mov	r0, r3
    2664:	4b13      	ldr	r3, [pc, #76]	; (26b4 <_gpio_get_level+0x60>)
    2666:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    2668:	79fb      	ldrb	r3, [r7, #7]
    266a:	4619      	mov	r1, r3
    266c:	4812      	ldr	r0, [pc, #72]	; (26b8 <_gpio_get_level+0x64>)
    266e:	4b13      	ldr	r3, [pc, #76]	; (26bc <_gpio_get_level+0x68>)
    2670:	4798      	blx	r3
    2672:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    2674:	79fb      	ldrb	r3, [r7, #7]
    2676:	4619      	mov	r1, r3
    2678:	480f      	ldr	r0, [pc, #60]	; (26b8 <_gpio_get_level+0x64>)
    267a:	4b11      	ldr	r3, [pc, #68]	; (26c0 <_gpio_get_level+0x6c>)
    267c:	4798      	blx	r3
    267e:	4602      	mov	r2, r0
    2680:	697b      	ldr	r3, [r7, #20]
    2682:	43db      	mvns	r3, r3
    2684:	4013      	ands	r3, r2
    2686:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2688:	79fb      	ldrb	r3, [r7, #7]
    268a:	4619      	mov	r1, r3
    268c:	480a      	ldr	r0, [pc, #40]	; (26b8 <_gpio_get_level+0x64>)
    268e:	4b0d      	ldr	r3, [pc, #52]	; (26c4 <_gpio_get_level+0x70>)
    2690:	4798      	blx	r3
    2692:	4602      	mov	r2, r0
    2694:	697b      	ldr	r3, [r7, #20]
    2696:	4013      	ands	r3, r2
    2698:	693a      	ldr	r2, [r7, #16]
    269a:	4313      	orrs	r3, r2
    269c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    269e:	f107 030c 	add.w	r3, r7, #12
    26a2:	4618      	mov	r0, r3
    26a4:	4b08      	ldr	r3, [pc, #32]	; (26c8 <_gpio_get_level+0x74>)
    26a6:	4798      	blx	r3

	return tmp;
    26a8:	693b      	ldr	r3, [r7, #16]
}
    26aa:	4618      	mov	r0, r3
    26ac:	3718      	adds	r7, #24
    26ae:	46bd      	mov	sp, r7
    26b0:	bd80      	pop	{r7, pc}
    26b2:	bf00      	nop
    26b4:	00003fb1 	.word	0x00003fb1
    26b8:	41008000 	.word	0x41008000
    26bc:	000025f1 	.word	0x000025f1
    26c0:	00002633 	.word	0x00002633
    26c4:	00002611 	.word	0x00002611
    26c8:	00003fd7 	.word	0x00003fd7

000026cc <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	b082      	sub	sp, #8
    26d0:	af00      	add	r7, sp, #0
    26d2:	4603      	mov	r3, r0
    26d4:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    26d6:	79fb      	ldrb	r3, [r7, #7]
    26d8:	115b      	asrs	r3, r3, #5
    26da:	b2db      	uxtb	r3, r3
    26dc:	4618      	mov	r0, r3
    26de:	4b09      	ldr	r3, [pc, #36]	; (2704 <gpio_get_pin_level+0x38>)
    26e0:	4798      	blx	r3
    26e2:	4601      	mov	r1, r0
    26e4:	79fb      	ldrb	r3, [r7, #7]
    26e6:	f003 031f 	and.w	r3, r3, #31
    26ea:	2201      	movs	r2, #1
    26ec:	fa02 f303 	lsl.w	r3, r2, r3
    26f0:	400b      	ands	r3, r1
    26f2:	2b00      	cmp	r3, #0
    26f4:	bf14      	ite	ne
    26f6:	2301      	movne	r3, #1
    26f8:	2300      	moveq	r3, #0
    26fa:	b2db      	uxtb	r3, r3
}
    26fc:	4618      	mov	r0, r3
    26fe:	3708      	adds	r7, #8
    2700:	46bd      	mov	sp, r7
    2702:	bd80      	pop	{r7, pc}
    2704:	00002655 	.word	0x00002655

00002708 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    2708:	b480      	push	{r7}
    270a:	b083      	sub	sp, #12
    270c:	af00      	add	r7, sp, #0
    270e:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    2710:	4b06      	ldr	r3, [pc, #24]	; (272c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	2201      	movs	r2, #1
    2716:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    2718:	4b04      	ldr	r3, [pc, #16]	; (272c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	2200      	movs	r2, #0
    271e:	705a      	strb	r2, [r3, #1]
}
    2720:	bf00      	nop
    2722:	370c      	adds	r7, #12
    2724:	46bd      	mov	sp, r7
    2726:	bc80      	pop	{r7}
    2728:	4770      	bx	lr
    272a:	bf00      	nop
    272c:	20001be4 	.word	0x20001be4

00002730 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    2730:	b580      	push	{r7, lr}
    2732:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    2734:	2040      	movs	r0, #64	; 0x40
    2736:	4b0a      	ldr	r3, [pc, #40]	; (2760 <_ZL10USBPluggedv+0x30>)
    2738:	4798      	blx	r3
    273a:	4603      	mov	r3, r0
    273c:	2b00      	cmp	r3, #0
    273e:	d004      	beq.n	274a <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    2740:	4b08      	ldr	r3, [pc, #32]	; (2764 <_ZL10USBPluggedv+0x34>)
    2742:	681b      	ldr	r3, [r3, #0]
    2744:	2201      	movs	r2, #1
    2746:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    2748:	e007      	b.n	275a <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    274a:	4b06      	ldr	r3, [pc, #24]	; (2764 <_ZL10USBPluggedv+0x34>)
    274c:	681b      	ldr	r3, [r3, #0]
    274e:	2200      	movs	r2, #0
    2750:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    2752:	4b04      	ldr	r3, [pc, #16]	; (2764 <_ZL10USBPluggedv+0x34>)
    2754:	681b      	ldr	r3, [r3, #0]
    2756:	2200      	movs	r2, #0
    2758:	701a      	strb	r2, [r3, #0]
}
    275a:	bf00      	nop
    275c:	bd80      	pop	{r7, pc}
    275e:	bf00      	nop
    2760:	000026cd 	.word	0x000026cd
    2764:	20001be4 	.word	0x20001be4

00002768 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    2768:	b480      	push	{r7}
    276a:	b083      	sub	sp, #12
    276c:	af00      	add	r7, sp, #0
    276e:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    2770:	4a04      	ldr	r2, [pc, #16]	; (2784 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	4618      	mov	r0, r3
    277a:	370c      	adds	r7, #12
    277c:	46bd      	mov	sp, r7
    277e:	bc80      	pop	{r7}
    2780:	4770      	bx	lr
    2782:	bf00      	nop
    2784:	20001be4 	.word	0x20001be4

00002788 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    2788:	b480      	push	{r7}
    278a:	b083      	sub	sp, #12
    278c:	af00      	add	r7, sp, #0
    278e:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	4618      	mov	r0, r3
    2794:	370c      	adds	r7, #12
    2796:	46bd      	mov	sp, r7
    2798:	bc80      	pop	{r7}
    279a:	4770      	bx	lr

0000279c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    279c:	b580      	push	{r7, lr}
    279e:	b082      	sub	sp, #8
    27a0:	af00      	add	r7, sp, #0
    27a2:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    27a4:	491e      	ldr	r1, [pc, #120]	; (2820 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    27a6:	2040      	movs	r0, #64	; 0x40
    27a8:	4b1e      	ldr	r3, [pc, #120]	; (2824 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    27aa:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    27ac:	481e      	ldr	r0, [pc, #120]	; (2828 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    27ae:	4b1f      	ldr	r3, [pc, #124]	; (282c <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    27b0:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    27b2:	2040      	movs	r0, #64	; 0x40
    27b4:	4b1e      	ldr	r3, [pc, #120]	; (2830 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    27b6:	4798      	blx	r3
    27b8:	4603      	mov	r3, r0
    27ba:	461a      	mov	r2, r3
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	78db      	ldrb	r3, [r3, #3]
    27c4:	2b00      	cmp	r3, #0
    27c6:	d021      	beq.n	280c <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    27c8:	687b      	ldr	r3, [r7, #4]
    27ca:	2200      	movs	r2, #0
    27cc:	709a      	strb	r2, [r3, #2]
			plugged=true;
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	2201      	movs	r2, #1
    27d2:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    27d4:	f44f 7216 	mov.w	r2, #600	; 0x258
    27d8:	4916      	ldr	r1, [pc, #88]	; (2834 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    27da:	4813      	ldr	r0, [pc, #76]	; (2828 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    27dc:	4b16      	ldr	r3, [pc, #88]	; (2838 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    27de:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    27e0:	4816      	ldr	r0, [pc, #88]	; (283c <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    27e2:	4b17      	ldr	r3, [pc, #92]	; (2840 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    27e4:	4798      	blx	r3
    27e6:	4603      	mov	r3, r0
    27e8:	f083 0301 	eor.w	r3, r3, #1
    27ec:	b2db      	uxtb	r3, r3
    27ee:	2b00      	cmp	r3, #0
    27f0:	d008      	beq.n	2804 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	789b      	ldrb	r3, [r3, #2]
    27f6:	b2db      	uxtb	r3, r3
    27f8:	2b00      	cmp	r3, #0
    27fa:	d0f1      	beq.n	27e0 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    27fc:	687b      	ldr	r3, [r7, #4]
    27fe:	2200      	movs	r2, #0
    2800:	701a      	strb	r2, [r3, #0]
					return;
    2802:	e009      	b.n	2818 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    2804:	4808      	ldr	r0, [pc, #32]	; (2828 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    2806:	4b0f      	ldr	r3, [pc, #60]	; (2844 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    2808:	4798      	blx	r3
    280a:	e005      	b.n	2818 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	2200      	movs	r2, #0
    2810:	701a      	strb	r2, [r3, #0]
			plugged=false;
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	2200      	movs	r2, #0
    2816:	705a      	strb	r2, [r3, #1]
		}
		
}
    2818:	3708      	adds	r7, #8
    281a:	46bd      	mov	sp, r7
    281c:	bd80      	pop	{r7, pc}
    281e:	bf00      	nop
    2820:	00002731 	.word	0x00002731
    2824:	000044d5 	.word	0x000044d5
    2828:	20001ba4 	.word	0x20001ba4
    282c:	00001af9 	.word	0x00001af9
    2830:	000026cd 	.word	0x000026cd
    2834:	00002709 	.word	0x00002709
    2838:	00001c41 	.word	0x00001c41
    283c:	20001aa4 	.word	0x20001aa4
    2840:	000020f5 	.word	0x000020f5
    2844:	00001b6d 	.word	0x00001b6d

00002848 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    2848:	b580      	push	{r7, lr}
    284a:	b082      	sub	sp, #8
    284c:	af00      	add	r7, sp, #0
    284e:	6078      	str	r0, [r7, #4]
    2850:	6039      	str	r1, [r7, #0]
    2852:	687b      	ldr	r3, [r7, #4]
    2854:	2b01      	cmp	r3, #1
    2856:	d143      	bne.n	28e0 <_Z41__static_initialization_and_destruction_0ii+0x98>
    2858:	683b      	ldr	r3, [r7, #0]
    285a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    285e:	4293      	cmp	r3, r2
    2860:	d13e      	bne.n	28e0 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    2862:	4921      	ldr	r1, [pc, #132]	; (28e8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    2864:	4821      	ldr	r0, [pc, #132]	; (28ec <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    2866:	4b22      	ldr	r3, [pc, #136]	; (28f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    2868:	4798      	blx	r3
    286a:	4a22      	ldr	r2, [pc, #136]	; (28f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    286c:	4922      	ldr	r1, [pc, #136]	; (28f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    286e:	481f      	ldr	r0, [pc, #124]	; (28ec <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    2870:	4b22      	ldr	r3, [pc, #136]	; (28fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    2872:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    2874:	4922      	ldr	r1, [pc, #136]	; (2900 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2876:	4823      	ldr	r0, [pc, #140]	; (2904 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2878:	4b1d      	ldr	r3, [pc, #116]	; (28f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    287a:	4798      	blx	r3
    287c:	4a1d      	ldr	r2, [pc, #116]	; (28f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    287e:	491e      	ldr	r1, [pc, #120]	; (28f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    2880:	4820      	ldr	r0, [pc, #128]	; (2904 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2882:	4b1e      	ldr	r3, [pc, #120]	; (28fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    2884:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    2886:	4920      	ldr	r1, [pc, #128]	; (2908 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    2888:	4820      	ldr	r0, [pc, #128]	; (290c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    288a:	4b19      	ldr	r3, [pc, #100]	; (28f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    288c:	4798      	blx	r3
    288e:	4a19      	ldr	r2, [pc, #100]	; (28f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    2890:	4919      	ldr	r1, [pc, #100]	; (28f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    2892:	481e      	ldr	r0, [pc, #120]	; (290c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    2894:	4b19      	ldr	r3, [pc, #100]	; (28fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    2896:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    2898:	491d      	ldr	r1, [pc, #116]	; (2910 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    289a:	481e      	ldr	r0, [pc, #120]	; (2914 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    289c:	4b14      	ldr	r3, [pc, #80]	; (28f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    289e:	4798      	blx	r3
    28a0:	4a14      	ldr	r2, [pc, #80]	; (28f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    28a2:	4915      	ldr	r1, [pc, #84]	; (28f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    28a4:	481b      	ldr	r0, [pc, #108]	; (2914 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    28a6:	4b15      	ldr	r3, [pc, #84]	; (28fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    28a8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    28aa:	491b      	ldr	r1, [pc, #108]	; (2918 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    28ac:	481b      	ldr	r0, [pc, #108]	; (291c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    28ae:	4b10      	ldr	r3, [pc, #64]	; (28f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    28b0:	4798      	blx	r3
    28b2:	4a10      	ldr	r2, [pc, #64]	; (28f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    28b4:	4910      	ldr	r1, [pc, #64]	; (28f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    28b6:	4819      	ldr	r0, [pc, #100]	; (291c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    28b8:	4b10      	ldr	r3, [pc, #64]	; (28fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    28ba:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    28bc:	4918      	ldr	r1, [pc, #96]	; (2920 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    28be:	4819      	ldr	r0, [pc, #100]	; (2924 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    28c0:	4b0b      	ldr	r3, [pc, #44]	; (28f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    28c2:	4798      	blx	r3
    28c4:	4a0b      	ldr	r2, [pc, #44]	; (28f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    28c6:	490c      	ldr	r1, [pc, #48]	; (28f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    28c8:	4816      	ldr	r0, [pc, #88]	; (2924 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    28ca:	4b0c      	ldr	r3, [pc, #48]	; (28fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    28cc:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    28ce:	4916      	ldr	r1, [pc, #88]	; (2928 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    28d0:	4816      	ldr	r0, [pc, #88]	; (292c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    28d2:	4b07      	ldr	r3, [pc, #28]	; (28f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    28d4:	4798      	blx	r3
    28d6:	4a07      	ldr	r2, [pc, #28]	; (28f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    28d8:	4907      	ldr	r1, [pc, #28]	; (28f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    28da:	4814      	ldr	r0, [pc, #80]	; (292c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    28dc:	4b07      	ldr	r3, [pc, #28]	; (28fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    28de:	4798      	blx	r3
    28e0:	bf00      	nop
    28e2:	3708      	adds	r7, #8
    28e4:	46bd      	mov	sp, r7
    28e6:	bd80      	pop	{r7, pc}
    28e8:	200022dc 	.word	0x200022dc
    28ec:	20001b04 	.word	0x20001b04
    28f0:	00001a0d 	.word	0x00001a0d
    28f4:	20000000 	.word	0x20000000
    28f8:	00001a45 	.word	0x00001a45
    28fc:	0000f4b1 	.word	0x0000f4b1
    2900:	20002370 	.word	0x20002370
    2904:	20001b24 	.word	0x20001b24
    2908:	20002474 	.word	0x20002474
    290c:	20001b44 	.word	0x20001b44
    2910:	20002390 	.word	0x20002390
    2914:	20001b64 	.word	0x20001b64
    2918:	20002434 	.word	0x20002434
    291c:	20001b84 	.word	0x20001b84
    2920:	20002454 	.word	0x20002454
    2924:	20001ba4 	.word	0x20001ba4
    2928:	2000234c 	.word	0x2000234c
    292c:	20001bc4 	.word	0x20001bc4

00002930 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    2930:	b580      	push	{r7, lr}
    2932:	af00      	add	r7, sp, #0
    2934:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2938:	2001      	movs	r0, #1
    293a:	4b01      	ldr	r3, [pc, #4]	; (2940 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    293c:	4798      	blx	r3
    293e:	bd80      	pop	{r7, pc}
    2940:	00002849 	.word	0x00002849

00002944 <_Z41__static_initialization_and_destruction_0ii>:
unsigned long Stream::millis(void){
	uint32_t ticks;
	
	ticks= usbTerminalTimer.Get_ticks();
	return (unsigned long)ticks;
}
    2944:	b580      	push	{r7, lr}
    2946:	b082      	sub	sp, #8
    2948:	af00      	add	r7, sp, #0
    294a:	6078      	str	r0, [r7, #4]
    294c:	6039      	str	r1, [r7, #0]
    294e:	687b      	ldr	r3, [r7, #4]
    2950:	2b01      	cmp	r3, #1
    2952:	d143      	bne.n	29dc <_Z41__static_initialization_and_destruction_0ii+0x98>
    2954:	683b      	ldr	r3, [r7, #0]
    2956:	f64f 72ff 	movw	r2, #65535	; 0xffff
    295a:	4293      	cmp	r3, r2
    295c:	d13e      	bne.n	29dc <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    295e:	4921      	ldr	r1, [pc, #132]	; (29e4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    2960:	4821      	ldr	r0, [pc, #132]	; (29e8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    2962:	4b22      	ldr	r3, [pc, #136]	; (29ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    2964:	4798      	blx	r3
    2966:	4a22      	ldr	r2, [pc, #136]	; (29f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    2968:	4922      	ldr	r1, [pc, #136]	; (29f4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    296a:	481f      	ldr	r0, [pc, #124]	; (29e8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    296c:	4b22      	ldr	r3, [pc, #136]	; (29f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    296e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    2970:	4922      	ldr	r1, [pc, #136]	; (29fc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    2972:	4823      	ldr	r0, [pc, #140]	; (2a00 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    2974:	4b1d      	ldr	r3, [pc, #116]	; (29ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    2976:	4798      	blx	r3
    2978:	4a1d      	ldr	r2, [pc, #116]	; (29f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    297a:	491e      	ldr	r1, [pc, #120]	; (29f4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    297c:	4820      	ldr	r0, [pc, #128]	; (2a00 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    297e:	4b1e      	ldr	r3, [pc, #120]	; (29f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    2980:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    2982:	4920      	ldr	r1, [pc, #128]	; (2a04 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    2984:	4820      	ldr	r0, [pc, #128]	; (2a08 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    2986:	4b19      	ldr	r3, [pc, #100]	; (29ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    2988:	4798      	blx	r3
    298a:	4a19      	ldr	r2, [pc, #100]	; (29f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    298c:	4919      	ldr	r1, [pc, #100]	; (29f4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    298e:	481e      	ldr	r0, [pc, #120]	; (2a08 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    2990:	4b19      	ldr	r3, [pc, #100]	; (29f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    2992:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    2994:	491d      	ldr	r1, [pc, #116]	; (2a0c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    2996:	481e      	ldr	r0, [pc, #120]	; (2a10 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2998:	4b14      	ldr	r3, [pc, #80]	; (29ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    299a:	4798      	blx	r3
    299c:	4a14      	ldr	r2, [pc, #80]	; (29f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    299e:	4915      	ldr	r1, [pc, #84]	; (29f4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    29a0:	481b      	ldr	r0, [pc, #108]	; (2a10 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    29a2:	4b15      	ldr	r3, [pc, #84]	; (29f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    29a4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    29a6:	491b      	ldr	r1, [pc, #108]	; (2a14 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    29a8:	481b      	ldr	r0, [pc, #108]	; (2a18 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    29aa:	4b10      	ldr	r3, [pc, #64]	; (29ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    29ac:	4798      	blx	r3
    29ae:	4a10      	ldr	r2, [pc, #64]	; (29f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    29b0:	4910      	ldr	r1, [pc, #64]	; (29f4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    29b2:	4819      	ldr	r0, [pc, #100]	; (2a18 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    29b4:	4b10      	ldr	r3, [pc, #64]	; (29f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    29b6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    29b8:	4918      	ldr	r1, [pc, #96]	; (2a1c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    29ba:	4819      	ldr	r0, [pc, #100]	; (2a20 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    29bc:	4b0b      	ldr	r3, [pc, #44]	; (29ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    29be:	4798      	blx	r3
    29c0:	4a0b      	ldr	r2, [pc, #44]	; (29f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    29c2:	490c      	ldr	r1, [pc, #48]	; (29f4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    29c4:	4816      	ldr	r0, [pc, #88]	; (2a20 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    29c6:	4b0c      	ldr	r3, [pc, #48]	; (29f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    29c8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    29ca:	4916      	ldr	r1, [pc, #88]	; (2a24 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    29cc:	4816      	ldr	r0, [pc, #88]	; (2a28 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    29ce:	4b07      	ldr	r3, [pc, #28]	; (29ec <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    29d0:	4798      	blx	r3
    29d2:	4a07      	ldr	r2, [pc, #28]	; (29f0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    29d4:	4907      	ldr	r1, [pc, #28]	; (29f4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    29d6:	4814      	ldr	r0, [pc, #80]	; (2a28 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    29d8:	4b07      	ldr	r3, [pc, #28]	; (29f8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    29da:	4798      	blx	r3
    29dc:	bf00      	nop
    29de:	3708      	adds	r7, #8
    29e0:	46bd      	mov	sp, r7
    29e2:	bd80      	pop	{r7, pc}
    29e4:	200022dc 	.word	0x200022dc
    29e8:	20001be8 	.word	0x20001be8
    29ec:	00001a0d 	.word	0x00001a0d
    29f0:	20000000 	.word	0x20000000
    29f4:	00001a45 	.word	0x00001a45
    29f8:	0000f4b1 	.word	0x0000f4b1
    29fc:	20002370 	.word	0x20002370
    2a00:	20001c08 	.word	0x20001c08
    2a04:	20002474 	.word	0x20002474
    2a08:	20001c28 	.word	0x20001c28
    2a0c:	20002390 	.word	0x20002390
    2a10:	20001c48 	.word	0x20001c48
    2a14:	20002434 	.word	0x20002434
    2a18:	20001c68 	.word	0x20001c68
    2a1c:	20002454 	.word	0x20002454
    2a20:	20001c88 	.word	0x20001c88
    2a24:	2000234c 	.word	0x2000234c
    2a28:	20001ca8 	.word	0x20001ca8

00002a2c <_GLOBAL__sub_I__ZN6Stream9timedReadEv>:
    2a2c:	b580      	push	{r7, lr}
    2a2e:	af00      	add	r7, sp, #0
    2a30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2a34:	2001      	movs	r0, #1
    2a36:	4b01      	ldr	r3, [pc, #4]	; (2a3c <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x10>)
    2a38:	4798      	blx	r3
    2a3a:	bd80      	pop	{r7, pc}
    2a3c:	00002945 	.word	0x00002945

00002a40 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	af00      	add	r7, sp, #0
	system_init();
    2a44:	4b03      	ldr	r3, [pc, #12]	; (2a54 <atmel_start_init+0x14>)
    2a46:	4798      	blx	r3
	usb_init();
    2a48:	4b03      	ldr	r3, [pc, #12]	; (2a58 <atmel_start_init+0x18>)
    2a4a:	4798      	blx	r3
	spi_nor_flash_init();
    2a4c:	4b03      	ldr	r3, [pc, #12]	; (2a5c <atmel_start_init+0x1c>)
    2a4e:	4798      	blx	r3
}
    2a50:	bf00      	nop
    2a52:	bd80      	pop	{r7, pc}
    2a54:	00003dc9 	.word	0x00003dc9
    2a58:	0000f4a1 	.word	0x0000f4a1
    2a5c:	0000de61 	.word	0x0000de61

00002a60 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2a60:	b480      	push	{r7}
    2a62:	b085      	sub	sp, #20
    2a64:	af00      	add	r7, sp, #0
    2a66:	60f8      	str	r0, [r7, #12]
    2a68:	460b      	mov	r3, r1
    2a6a:	607a      	str	r2, [r7, #4]
    2a6c:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2a6e:	7afa      	ldrb	r2, [r7, #11]
    2a70:	68fb      	ldr	r3, [r7, #12]
    2a72:	3220      	adds	r2, #32
    2a74:	6879      	ldr	r1, [r7, #4]
    2a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2a7a:	bf00      	nop
    2a7c:	3714      	adds	r7, #20
    2a7e:	46bd      	mov	sp, r7
    2a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a84:	4770      	bx	lr

00002a86 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    2a86:	b480      	push	{r7}
    2a88:	b083      	sub	sp, #12
    2a8a:	af00      	add	r7, sp, #0
    2a8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2a8e:	687b      	ldr	r3, [r7, #4]
    2a90:	691b      	ldr	r3, [r3, #16]
    2a92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a9a:	bf00      	nop
    2a9c:	370c      	adds	r7, #12
    2a9e:	46bd      	mov	sp, r7
    2aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aa4:	4770      	bx	lr

00002aa6 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    2aa6:	b480      	push	{r7}
    2aa8:	b083      	sub	sp, #12
    2aaa:	af00      	add	r7, sp, #0
    2aac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	691b      	ldr	r3, [r3, #16]
    2ab2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2aba:	bf00      	nop
    2abc:	370c      	adds	r7, #12
    2abe:	46bd      	mov	sp, r7
    2ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac4:	4770      	bx	lr

00002ac6 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    2ac6:	b480      	push	{r7}
    2ac8:	b083      	sub	sp, #12
    2aca:	af00      	add	r7, sp, #0
    2acc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	691b      	ldr	r3, [r3, #16]
    2ad2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2ada:	bf00      	nop
    2adc:	370c      	adds	r7, #12
    2ade:	46bd      	mov	sp, r7
    2ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ae4:	4770      	bx	lr

00002ae6 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2ae6:	b480      	push	{r7}
    2ae8:	b083      	sub	sp, #12
    2aea:	af00      	add	r7, sp, #0
    2aec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2aee:	687b      	ldr	r3, [r7, #4]
    2af0:	691b      	ldr	r3, [r3, #16]
    2af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2afa:	bf00      	nop
    2afc:	370c      	adds	r7, #12
    2afe:	46bd      	mov	sp, r7
    2b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b04:	4770      	bx	lr

00002b06 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2b06:	b480      	push	{r7}
    2b08:	b083      	sub	sp, #12
    2b0a:	af00      	add	r7, sp, #0
    2b0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2b0e:	687b      	ldr	r3, [r7, #4]
    2b10:	695b      	ldr	r3, [r3, #20]
    2b12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b1a:	bf00      	nop
    2b1c:	370c      	adds	r7, #12
    2b1e:	46bd      	mov	sp, r7
    2b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b24:	4770      	bx	lr

00002b26 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2b26:	b480      	push	{r7}
    2b28:	b083      	sub	sp, #12
    2b2a:	af00      	add	r7, sp, #0
    2b2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	695b      	ldr	r3, [r3, #20]
    2b32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b3a:	bf00      	nop
    2b3c:	370c      	adds	r7, #12
    2b3e:	46bd      	mov	sp, r7
    2b40:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b44:	4770      	bx	lr

00002b46 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2b46:	b480      	push	{r7}
    2b48:	b083      	sub	sp, #12
    2b4a:	af00      	add	r7, sp, #0
    2b4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	695b      	ldr	r3, [r3, #20]
    2b52:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2b56:	687b      	ldr	r3, [r7, #4]
    2b58:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b5a:	bf00      	nop
    2b5c:	370c      	adds	r7, #12
    2b5e:	46bd      	mov	sp, r7
    2b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b64:	4770      	bx	lr

00002b66 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    2b66:	b480      	push	{r7}
    2b68:	b083      	sub	sp, #12
    2b6a:	af00      	add	r7, sp, #0
    2b6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	695b      	ldr	r3, [r3, #20]
    2b72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b7a:	bf00      	nop
    2b7c:	370c      	adds	r7, #12
    2b7e:	46bd      	mov	sp, r7
    2b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b84:	4770      	bx	lr

00002b86 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    2b86:	b480      	push	{r7}
    2b88:	b083      	sub	sp, #12
    2b8a:	af00      	add	r7, sp, #0
    2b8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	695b      	ldr	r3, [r3, #20]
    2b92:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2b96:	687b      	ldr	r3, [r7, #4]
    2b98:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b9a:	bf00      	nop
    2b9c:	370c      	adds	r7, #12
    2b9e:	46bd      	mov	sp, r7
    2ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ba4:	4770      	bx	lr

00002ba6 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    2ba6:	b480      	push	{r7}
    2ba8:	b083      	sub	sp, #12
    2baa:	af00      	add	r7, sp, #0
    2bac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	699b      	ldr	r3, [r3, #24]
    2bb2:	f043 0201 	orr.w	r2, r3, #1
    2bb6:	687b      	ldr	r3, [r7, #4]
    2bb8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bba:	bf00      	nop
    2bbc:	370c      	adds	r7, #12
    2bbe:	46bd      	mov	sp, r7
    2bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bc4:	4770      	bx	lr

00002bc6 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    2bc6:	b480      	push	{r7}
    2bc8:	b083      	sub	sp, #12
    2bca:	af00      	add	r7, sp, #0
    2bcc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	699b      	ldr	r3, [r3, #24]
    2bd2:	f043 0202 	orr.w	r2, r3, #2
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bda:	bf00      	nop
    2bdc:	370c      	adds	r7, #12
    2bde:	46bd      	mov	sp, r7
    2be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2be4:	4770      	bx	lr

00002be6 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2be6:	b480      	push	{r7}
    2be8:	b083      	sub	sp, #12
    2bea:	af00      	add	r7, sp, #0
    2bec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	699b      	ldr	r3, [r3, #24]
    2bf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bfa:	bf00      	nop
    2bfc:	370c      	adds	r7, #12
    2bfe:	46bd      	mov	sp, r7
    2c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c04:	4770      	bx	lr

00002c06 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    2c06:	b480      	push	{r7}
    2c08:	b083      	sub	sp, #12
    2c0a:	af00      	add	r7, sp, #0
    2c0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    2c0e:	687b      	ldr	r3, [r7, #4]
    2c10:	699b      	ldr	r3, [r3, #24]
    2c12:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c1a:	bf00      	nop
    2c1c:	370c      	adds	r7, #12
    2c1e:	46bd      	mov	sp, r7
    2c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c24:	4770      	bx	lr

00002c26 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    2c26:	b480      	push	{r7}
    2c28:	b083      	sub	sp, #12
    2c2a:	af00      	add	r7, sp, #0
    2c2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    2c2e:	687b      	ldr	r3, [r7, #4]
    2c30:	699b      	ldr	r3, [r3, #24]
    2c32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c3a:	bf00      	nop
    2c3c:	370c      	adds	r7, #12
    2c3e:	46bd      	mov	sp, r7
    2c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c44:	4770      	bx	lr

00002c46 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2c46:	b480      	push	{r7}
    2c48:	b083      	sub	sp, #12
    2c4a:	af00      	add	r7, sp, #0
    2c4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	699b      	ldr	r3, [r3, #24]
    2c52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c5a:	bf00      	nop
    2c5c:	370c      	adds	r7, #12
    2c5e:	46bd      	mov	sp, r7
    2c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c64:	4770      	bx	lr

00002c66 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    2c66:	b480      	push	{r7}
    2c68:	b083      	sub	sp, #12
    2c6a:	af00      	add	r7, sp, #0
    2c6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	69db      	ldr	r3, [r3, #28]
    2c72:	f043 0220 	orr.w	r2, r3, #32
    2c76:	687b      	ldr	r3, [r7, #4]
    2c78:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c7a:	bf00      	nop
    2c7c:	370c      	adds	r7, #12
    2c7e:	46bd      	mov	sp, r7
    2c80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c84:	4770      	bx	lr

00002c86 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    2c86:	b480      	push	{r7}
    2c88:	b083      	sub	sp, #12
    2c8a:	af00      	add	r7, sp, #0
    2c8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    2c8e:	687b      	ldr	r3, [r7, #4]
    2c90:	69db      	ldr	r3, [r3, #28]
    2c92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c9a:	bf00      	nop
    2c9c:	370c      	adds	r7, #12
    2c9e:	46bd      	mov	sp, r7
    2ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ca4:	4770      	bx	lr

00002ca6 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    2ca6:	b480      	push	{r7}
    2ca8:	b083      	sub	sp, #12
    2caa:	af00      	add	r7, sp, #0
    2cac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    2cae:	687b      	ldr	r3, [r7, #4]
    2cb0:	69db      	ldr	r3, [r3, #28]
    2cb2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cba:	bf00      	nop
    2cbc:	370c      	adds	r7, #12
    2cbe:	46bd      	mov	sp, r7
    2cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cc4:	4770      	bx	lr

00002cc6 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2cc6:	b480      	push	{r7}
    2cc8:	b083      	sub	sp, #12
    2cca:	af00      	add	r7, sp, #0
    2ccc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	6a1b      	ldr	r3, [r3, #32]
    2cd2:	f043 0201 	orr.w	r2, r3, #1
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cda:	bf00      	nop
    2cdc:	370c      	adds	r7, #12
    2cde:	46bd      	mov	sp, r7
    2ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ce4:	4770      	bx	lr

00002ce6 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    2ce6:	b480      	push	{r7}
    2ce8:	b083      	sub	sp, #12
    2cea:	af00      	add	r7, sp, #0
    2cec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	6a1b      	ldr	r3, [r3, #32]
    2cf2:	f043 0202 	orr.w	r2, r3, #2
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cfa:	bf00      	nop
    2cfc:	370c      	adds	r7, #12
    2cfe:	46bd      	mov	sp, r7
    2d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d04:	4770      	bx	lr

00002d06 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    2d06:	b480      	push	{r7}
    2d08:	b083      	sub	sp, #12
    2d0a:	af00      	add	r7, sp, #0
    2d0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	6a1b      	ldr	r3, [r3, #32]
    2d12:	f043 0204 	orr.w	r2, r3, #4
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d1a:	bf00      	nop
    2d1c:	370c      	adds	r7, #12
    2d1e:	46bd      	mov	sp, r7
    2d20:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d24:	4770      	bx	lr

00002d26 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2d26:	b480      	push	{r7}
    2d28:	b083      	sub	sp, #12
    2d2a:	af00      	add	r7, sp, #0
    2d2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	6a1b      	ldr	r3, [r3, #32]
    2d32:	f043 0208 	orr.w	r2, r3, #8
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d3a:	bf00      	nop
    2d3c:	370c      	adds	r7, #12
    2d3e:	46bd      	mov	sp, r7
    2d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d44:	4770      	bx	lr

00002d46 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    2d46:	b480      	push	{r7}
    2d48:	b083      	sub	sp, #12
    2d4a:	af00      	add	r7, sp, #0
    2d4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	6a1b      	ldr	r3, [r3, #32]
    2d52:	f043 0220 	orr.w	r2, r3, #32
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d5a:	bf00      	nop
    2d5c:	370c      	adds	r7, #12
    2d5e:	46bd      	mov	sp, r7
    2d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d64:	4770      	bx	lr

00002d66 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    2d66:	b480      	push	{r7}
    2d68:	b083      	sub	sp, #12
    2d6a:	af00      	add	r7, sp, #0
    2d6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	6a1b      	ldr	r3, [r3, #32]
    2d72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d7a:	bf00      	nop
    2d7c:	370c      	adds	r7, #12
    2d7e:	46bd      	mov	sp, r7
    2d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d84:	4770      	bx	lr

00002d86 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2d86:	b480      	push	{r7}
    2d88:	b085      	sub	sp, #20
    2d8a:	af00      	add	r7, sp, #0
    2d8c:	60f8      	str	r0, [r7, #12]
    2d8e:	460b      	mov	r3, r1
    2d90:	607a      	str	r2, [r7, #4]
    2d92:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d94:	7afb      	ldrb	r3, [r7, #11]
    2d96:	68fa      	ldr	r2, [r7, #12]
    2d98:	01db      	lsls	r3, r3, #7
    2d9a:	4413      	add	r3, r2
    2d9c:	3308      	adds	r3, #8
    2d9e:	687a      	ldr	r2, [r7, #4]
    2da0:	601a      	str	r2, [r3, #0]
}
    2da2:	bf00      	nop
    2da4:	3714      	adds	r7, #20
    2da6:	46bd      	mov	sp, r7
    2da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dac:	4770      	bx	lr

00002dae <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2dae:	b480      	push	{r7}
    2db0:	b085      	sub	sp, #20
    2db2:	af00      	add	r7, sp, #0
    2db4:	60f8      	str	r0, [r7, #12]
    2db6:	460b      	mov	r3, r1
    2db8:	607a      	str	r2, [r7, #4]
    2dba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2dbc:	7afb      	ldrb	r3, [r7, #11]
    2dbe:	68fa      	ldr	r2, [r7, #12]
    2dc0:	01db      	lsls	r3, r3, #7
    2dc2:	4413      	add	r3, r2
    2dc4:	3304      	adds	r3, #4
    2dc6:	687a      	ldr	r2, [r7, #4]
    2dc8:	601a      	str	r2, [r3, #0]
}
    2dca:	bf00      	nop
    2dcc:	3714      	adds	r7, #20
    2dce:	46bd      	mov	sp, r7
    2dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dd4:	4770      	bx	lr

00002dd6 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2dd6:	b480      	push	{r7}
    2dd8:	b085      	sub	sp, #20
    2dda:	af00      	add	r7, sp, #0
    2ddc:	60f8      	str	r0, [r7, #12]
    2dde:	460b      	mov	r3, r1
    2de0:	607a      	str	r2, [r7, #4]
    2de2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2de4:	7afb      	ldrb	r3, [r7, #11]
    2de6:	68fa      	ldr	r2, [r7, #12]
    2de8:	01db      	lsls	r3, r3, #7
    2dea:	4413      	add	r3, r2
    2dec:	3318      	adds	r3, #24
    2dee:	687a      	ldr	r2, [r7, #4]
    2df0:	601a      	str	r2, [r3, #0]
}
    2df2:	bf00      	nop
    2df4:	3714      	adds	r7, #20
    2df6:	46bd      	mov	sp, r7
    2df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dfc:	4770      	bx	lr

00002dfe <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2dfe:	b480      	push	{r7}
    2e00:	b085      	sub	sp, #20
    2e02:	af00      	add	r7, sp, #0
    2e04:	60f8      	str	r0, [r7, #12]
    2e06:	460b      	mov	r3, r1
    2e08:	607a      	str	r2, [r7, #4]
    2e0a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e0c:	7afb      	ldrb	r3, [r7, #11]
    2e0e:	68fa      	ldr	r2, [r7, #12]
    2e10:	01db      	lsls	r3, r3, #7
    2e12:	4413      	add	r3, r2
    2e14:	3314      	adds	r3, #20
    2e16:	687a      	ldr	r2, [r7, #4]
    2e18:	601a      	str	r2, [r3, #0]
}
    2e1a:	bf00      	nop
    2e1c:	3714      	adds	r7, #20
    2e1e:	46bd      	mov	sp, r7
    2e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e24:	4770      	bx	lr

00002e26 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2e26:	b480      	push	{r7}
    2e28:	b085      	sub	sp, #20
    2e2a:	af00      	add	r7, sp, #0
    2e2c:	6078      	str	r0, [r7, #4]
    2e2e:	4608      	mov	r0, r1
    2e30:	4611      	mov	r1, r2
    2e32:	461a      	mov	r2, r3
    2e34:	4603      	mov	r3, r0
    2e36:	70fb      	strb	r3, [r7, #3]
    2e38:	460b      	mov	r3, r1
    2e3a:	70bb      	strb	r3, [r7, #2]
    2e3c:	4613      	mov	r3, r2
    2e3e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e40:	78fa      	ldrb	r2, [r7, #3]
    2e42:	78bb      	ldrb	r3, [r7, #2]
    2e44:	6879      	ldr	r1, [r7, #4]
    2e46:	01d2      	lsls	r2, r2, #7
    2e48:	440a      	add	r2, r1
    2e4a:	4413      	add	r3, r2
    2e4c:	3330      	adds	r3, #48	; 0x30
    2e4e:	781b      	ldrb	r3, [r3, #0]
    2e50:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2e52:	7bfb      	ldrb	r3, [r7, #15]
    2e54:	f023 030f 	bic.w	r3, r3, #15
    2e58:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    2e5a:	787b      	ldrb	r3, [r7, #1]
    2e5c:	f003 030f 	and.w	r3, r3, #15
    2e60:	b2da      	uxtb	r2, r3
    2e62:	7bfb      	ldrb	r3, [r7, #15]
    2e64:	4313      	orrs	r3, r2
    2e66:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e68:	78fa      	ldrb	r2, [r7, #3]
    2e6a:	78bb      	ldrb	r3, [r7, #2]
    2e6c:	6879      	ldr	r1, [r7, #4]
    2e6e:	01d2      	lsls	r2, r2, #7
    2e70:	440a      	add	r2, r1
    2e72:	4413      	add	r3, r2
    2e74:	3330      	adds	r3, #48	; 0x30
    2e76:	7bfa      	ldrb	r2, [r7, #15]
    2e78:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2e7a:	bf00      	nop
    2e7c:	3714      	adds	r7, #20
    2e7e:	46bd      	mov	sp, r7
    2e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e84:	4770      	bx	lr

00002e86 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2e86:	b480      	push	{r7}
    2e88:	b085      	sub	sp, #20
    2e8a:	af00      	add	r7, sp, #0
    2e8c:	6078      	str	r0, [r7, #4]
    2e8e:	4608      	mov	r0, r1
    2e90:	4611      	mov	r1, r2
    2e92:	461a      	mov	r2, r3
    2e94:	4603      	mov	r3, r0
    2e96:	70fb      	strb	r3, [r7, #3]
    2e98:	460b      	mov	r3, r1
    2e9a:	70bb      	strb	r3, [r7, #2]
    2e9c:	4613      	mov	r3, r2
    2e9e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2ea0:	78fa      	ldrb	r2, [r7, #3]
    2ea2:	78bb      	ldrb	r3, [r7, #2]
    2ea4:	6879      	ldr	r1, [r7, #4]
    2ea6:	01d2      	lsls	r2, r2, #7
    2ea8:	440a      	add	r2, r1
    2eaa:	4413      	add	r3, r2
    2eac:	3330      	adds	r3, #48	; 0x30
    2eae:	781b      	ldrb	r3, [r3, #0]
    2eb0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2eb2:	7bfb      	ldrb	r3, [r7, #15]
    2eb4:	f003 030f 	and.w	r3, r3, #15
    2eb8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    2eba:	787b      	ldrb	r3, [r7, #1]
    2ebc:	011b      	lsls	r3, r3, #4
    2ebe:	b2da      	uxtb	r2, r3
    2ec0:	7bfb      	ldrb	r3, [r7, #15]
    2ec2:	4313      	orrs	r3, r2
    2ec4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ec6:	78fa      	ldrb	r2, [r7, #3]
    2ec8:	78bb      	ldrb	r3, [r7, #2]
    2eca:	6879      	ldr	r1, [r7, #4]
    2ecc:	01d2      	lsls	r2, r2, #7
    2ece:	440a      	add	r2, r1
    2ed0:	4413      	add	r3, r2
    2ed2:	3330      	adds	r3, #48	; 0x30
    2ed4:	7bfa      	ldrb	r2, [r7, #15]
    2ed6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2ed8:	bf00      	nop
    2eda:	3714      	adds	r7, #20
    2edc:	46bd      	mov	sp, r7
    2ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ee2:	4770      	bx	lr

00002ee4 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    2ee4:	b480      	push	{r7}
    2ee6:	b085      	sub	sp, #20
    2ee8:	af00      	add	r7, sp, #0
    2eea:	6078      	str	r0, [r7, #4]
    2eec:	4608      	mov	r0, r1
    2eee:	4611      	mov	r1, r2
    2ef0:	461a      	mov	r2, r3
    2ef2:	4603      	mov	r3, r0
    2ef4:	70fb      	strb	r3, [r7, #3]
    2ef6:	460b      	mov	r3, r1
    2ef8:	70bb      	strb	r3, [r7, #2]
    2efa:	4613      	mov	r3, r2
    2efc:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2efe:	78fa      	ldrb	r2, [r7, #3]
    2f00:	78bb      	ldrb	r3, [r7, #2]
    2f02:	6879      	ldr	r1, [r7, #4]
    2f04:	01d2      	lsls	r2, r2, #7
    2f06:	440a      	add	r2, r1
    2f08:	4413      	add	r3, r2
    2f0a:	3340      	adds	r3, #64	; 0x40
    2f0c:	781b      	ldrb	r3, [r3, #0]
    2f0e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f10:	7bfb      	ldrb	r3, [r7, #15]
    2f12:	f023 0301 	bic.w	r3, r3, #1
    2f16:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f18:	787a      	ldrb	r2, [r7, #1]
    2f1a:	7bfb      	ldrb	r3, [r7, #15]
    2f1c:	4313      	orrs	r3, r2
    2f1e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f20:	78fa      	ldrb	r2, [r7, #3]
    2f22:	78bb      	ldrb	r3, [r7, #2]
    2f24:	6879      	ldr	r1, [r7, #4]
    2f26:	01d2      	lsls	r2, r2, #7
    2f28:	440a      	add	r2, r1
    2f2a:	4413      	add	r3, r2
    2f2c:	3340      	adds	r3, #64	; 0x40
    2f2e:	7bfa      	ldrb	r2, [r7, #15]
    2f30:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2f32:	bf00      	nop
    2f34:	3714      	adds	r7, #20
    2f36:	46bd      	mov	sp, r7
    2f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f3c:	4770      	bx	lr

00002f3e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2f3e:	b490      	push	{r4, r7}
    2f40:	b082      	sub	sp, #8
    2f42:	af00      	add	r7, sp, #0
    2f44:	6078      	str	r0, [r7, #4]
    2f46:	460b      	mov	r3, r1
    2f48:	70fb      	strb	r3, [r7, #3]
    2f4a:	4613      	mov	r3, r2
    2f4c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2f4e:	78fa      	ldrb	r2, [r7, #3]
    2f50:	78bb      	ldrb	r3, [r7, #2]
    2f52:	78f8      	ldrb	r0, [r7, #3]
    2f54:	78b9      	ldrb	r1, [r7, #2]
    2f56:	687c      	ldr	r4, [r7, #4]
    2f58:	01c0      	lsls	r0, r0, #7
    2f5a:	4420      	add	r0, r4
    2f5c:	4401      	add	r1, r0
    2f5e:	3140      	adds	r1, #64	; 0x40
    2f60:	7809      	ldrb	r1, [r1, #0]
    2f62:	b2c9      	uxtb	r1, r1
    2f64:	f041 0104 	orr.w	r1, r1, #4
    2f68:	b2c8      	uxtb	r0, r1
    2f6a:	6879      	ldr	r1, [r7, #4]
    2f6c:	01d2      	lsls	r2, r2, #7
    2f6e:	440a      	add	r2, r1
    2f70:	4413      	add	r3, r2
    2f72:	3340      	adds	r3, #64	; 0x40
    2f74:	4602      	mov	r2, r0
    2f76:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2f78:	bf00      	nop
    2f7a:	3708      	adds	r7, #8
    2f7c:	46bd      	mov	sp, r7
    2f7e:	bc90      	pop	{r4, r7}
    2f80:	4770      	bx	lr

00002f82 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2f82:	b490      	push	{r4, r7}
    2f84:	b082      	sub	sp, #8
    2f86:	af00      	add	r7, sp, #0
    2f88:	6078      	str	r0, [r7, #4]
    2f8a:	460b      	mov	r3, r1
    2f8c:	70fb      	strb	r3, [r7, #3]
    2f8e:	4613      	mov	r3, r2
    2f90:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f92:	78fa      	ldrb	r2, [r7, #3]
    2f94:	78bb      	ldrb	r3, [r7, #2]
    2f96:	78f8      	ldrb	r0, [r7, #3]
    2f98:	78b9      	ldrb	r1, [r7, #2]
    2f9a:	687c      	ldr	r4, [r7, #4]
    2f9c:	01c0      	lsls	r0, r0, #7
    2f9e:	4420      	add	r0, r4
    2fa0:	4401      	add	r1, r0
    2fa2:	3140      	adds	r1, #64	; 0x40
    2fa4:	7809      	ldrb	r1, [r1, #0]
    2fa6:	b2c9      	uxtb	r1, r1
    2fa8:	f021 0104 	bic.w	r1, r1, #4
    2fac:	b2c8      	uxtb	r0, r1
    2fae:	6879      	ldr	r1, [r7, #4]
    2fb0:	01d2      	lsls	r2, r2, #7
    2fb2:	440a      	add	r2, r1
    2fb4:	4413      	add	r3, r2
    2fb6:	3340      	adds	r3, #64	; 0x40
    2fb8:	4602      	mov	r2, r0
    2fba:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2fbc:	bf00      	nop
    2fbe:	3708      	adds	r7, #8
    2fc0:	46bd      	mov	sp, r7
    2fc2:	bc90      	pop	{r4, r7}
    2fc4:	4770      	bx	lr

00002fc6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    2fc6:	b480      	push	{r7}
    2fc8:	b085      	sub	sp, #20
    2fca:	af00      	add	r7, sp, #0
    2fcc:	60f8      	str	r0, [r7, #12]
    2fce:	460b      	mov	r3, r1
    2fd0:	607a      	str	r2, [r7, #4]
    2fd2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2fd4:	7afb      	ldrb	r3, [r7, #11]
    2fd6:	68fa      	ldr	r2, [r7, #12]
    2fd8:	01db      	lsls	r3, r3, #7
    2fda:	4413      	add	r3, r2
    2fdc:	3328      	adds	r3, #40	; 0x28
    2fde:	687a      	ldr	r2, [r7, #4]
    2fe0:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2fe2:	bf00      	nop
    2fe4:	3714      	adds	r7, #20
    2fe6:	46bd      	mov	sp, r7
    2fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fec:	4770      	bx	lr
	...

00002ff0 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	4603      	mov	r3, r0
    2ff8:	6039      	str	r1, [r7, #0]
    2ffa:	71fb      	strb	r3, [r7, #7]
    2ffc:	4613      	mov	r3, r2
    2ffe:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    3000:	79bb      	ldrb	r3, [r7, #6]
    3002:	2b01      	cmp	r3, #1
    3004:	d01c      	beq.n	3040 <_gpio_set_direction+0x50>
    3006:	2b02      	cmp	r3, #2
    3008:	d037      	beq.n	307a <_gpio_set_direction+0x8a>
    300a:	2b00      	cmp	r3, #0
    300c:	d14e      	bne.n	30ac <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    300e:	79fb      	ldrb	r3, [r7, #7]
    3010:	683a      	ldr	r2, [r7, #0]
    3012:	4619      	mov	r1, r3
    3014:	482a      	ldr	r0, [pc, #168]	; (30c0 <_gpio_set_direction+0xd0>)
    3016:	4b2b      	ldr	r3, [pc, #172]	; (30c4 <_gpio_set_direction+0xd4>)
    3018:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    301a:	683b      	ldr	r3, [r7, #0]
    301c:	b29b      	uxth	r3, r3
    301e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3022:	79fb      	ldrb	r3, [r7, #7]
    3024:	4619      	mov	r1, r3
    3026:	4826      	ldr	r0, [pc, #152]	; (30c0 <_gpio_set_direction+0xd0>)
    3028:	4b27      	ldr	r3, [pc, #156]	; (30c8 <_gpio_set_direction+0xd8>)
    302a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    302c:	683b      	ldr	r3, [r7, #0]
    302e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3030:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3034:	79fb      	ldrb	r3, [r7, #7]
    3036:	4619      	mov	r1, r3
    3038:	4821      	ldr	r0, [pc, #132]	; (30c0 <_gpio_set_direction+0xd0>)
    303a:	4b23      	ldr	r3, [pc, #140]	; (30c8 <_gpio_set_direction+0xd8>)
    303c:	4798      	blx	r3
		break;
    303e:	e03a      	b.n	30b6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    3040:	79fb      	ldrb	r3, [r7, #7]
    3042:	683a      	ldr	r2, [r7, #0]
    3044:	4619      	mov	r1, r3
    3046:	481e      	ldr	r0, [pc, #120]	; (30c0 <_gpio_set_direction+0xd0>)
    3048:	4b1e      	ldr	r3, [pc, #120]	; (30c4 <_gpio_set_direction+0xd4>)
    304a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    304c:	683b      	ldr	r3, [r7, #0]
    304e:	b29b      	uxth	r3, r3
    3050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    3054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3058:	79f9      	ldrb	r1, [r7, #7]
    305a:	461a      	mov	r2, r3
    305c:	4818      	ldr	r0, [pc, #96]	; (30c0 <_gpio_set_direction+0xd0>)
    305e:	4b1a      	ldr	r3, [pc, #104]	; (30c8 <_gpio_set_direction+0xd8>)
    3060:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    3062:	683b      	ldr	r3, [r7, #0]
    3064:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    3066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    306a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    306e:	79f9      	ldrb	r1, [r7, #7]
    3070:	461a      	mov	r2, r3
    3072:	4813      	ldr	r0, [pc, #76]	; (30c0 <_gpio_set_direction+0xd0>)
    3074:	4b14      	ldr	r3, [pc, #80]	; (30c8 <_gpio_set_direction+0xd8>)
    3076:	4798      	blx	r3
		break;
    3078:	e01d      	b.n	30b6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    307a:	79fb      	ldrb	r3, [r7, #7]
    307c:	683a      	ldr	r2, [r7, #0]
    307e:	4619      	mov	r1, r3
    3080:	480f      	ldr	r0, [pc, #60]	; (30c0 <_gpio_set_direction+0xd0>)
    3082:	4b12      	ldr	r3, [pc, #72]	; (30cc <_gpio_set_direction+0xdc>)
    3084:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    3086:	683b      	ldr	r3, [r7, #0]
    3088:	b29b      	uxth	r3, r3
    308a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    308e:	79fb      	ldrb	r3, [r7, #7]
    3090:	4619      	mov	r1, r3
    3092:	480b      	ldr	r0, [pc, #44]	; (30c0 <_gpio_set_direction+0xd0>)
    3094:	4b0c      	ldr	r3, [pc, #48]	; (30c8 <_gpio_set_direction+0xd8>)
    3096:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3098:	683b      	ldr	r3, [r7, #0]
    309a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    309c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    30a0:	79fb      	ldrb	r3, [r7, #7]
    30a2:	4619      	mov	r1, r3
    30a4:	4806      	ldr	r0, [pc, #24]	; (30c0 <_gpio_set_direction+0xd0>)
    30a6:	4b08      	ldr	r3, [pc, #32]	; (30c8 <_gpio_set_direction+0xd8>)
    30a8:	4798      	blx	r3
		break;
    30aa:	e004      	b.n	30b6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    30ac:	2246      	movs	r2, #70	; 0x46
    30ae:	4908      	ldr	r1, [pc, #32]	; (30d0 <_gpio_set_direction+0xe0>)
    30b0:	2000      	movs	r0, #0
    30b2:	4b08      	ldr	r3, [pc, #32]	; (30d4 <_gpio_set_direction+0xe4>)
    30b4:	4798      	blx	r3
	}
}
    30b6:	bf00      	nop
    30b8:	3708      	adds	r7, #8
    30ba:	46bd      	mov	sp, r7
    30bc:	bd80      	pop	{r7, pc}
    30be:	bf00      	nop
    30c0:	41008000 	.word	0x41008000
    30c4:	00002daf 	.word	0x00002daf
    30c8:	00002fc7 	.word	0x00002fc7
    30cc:	00002d87 	.word	0x00002d87
    30d0:	0000ffcc 	.word	0x0000ffcc
    30d4:	00005af5 	.word	0x00005af5

000030d8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b082      	sub	sp, #8
    30dc:	af00      	add	r7, sp, #0
    30de:	4603      	mov	r3, r0
    30e0:	6039      	str	r1, [r7, #0]
    30e2:	71fb      	strb	r3, [r7, #7]
    30e4:	4613      	mov	r3, r2
    30e6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    30e8:	79bb      	ldrb	r3, [r7, #6]
    30ea:	2b00      	cmp	r3, #0
    30ec:	d006      	beq.n	30fc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    30ee:	79fb      	ldrb	r3, [r7, #7]
    30f0:	683a      	ldr	r2, [r7, #0]
    30f2:	4619      	mov	r1, r3
    30f4:	4806      	ldr	r0, [pc, #24]	; (3110 <_gpio_set_level+0x38>)
    30f6:	4b07      	ldr	r3, [pc, #28]	; (3114 <_gpio_set_level+0x3c>)
    30f8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    30fa:	e005      	b.n	3108 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    30fc:	79fb      	ldrb	r3, [r7, #7]
    30fe:	683a      	ldr	r2, [r7, #0]
    3100:	4619      	mov	r1, r3
    3102:	4803      	ldr	r0, [pc, #12]	; (3110 <_gpio_set_level+0x38>)
    3104:	4b04      	ldr	r3, [pc, #16]	; (3118 <_gpio_set_level+0x40>)
    3106:	4798      	blx	r3
}
    3108:	bf00      	nop
    310a:	3708      	adds	r7, #8
    310c:	46bd      	mov	sp, r7
    310e:	bd80      	pop	{r7, pc}
    3110:	41008000 	.word	0x41008000
    3114:	00002dd7 	.word	0x00002dd7
    3118:	00002dff 	.word	0x00002dff

0000311c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    311c:	b580      	push	{r7, lr}
    311e:	b082      	sub	sp, #8
    3120:	af00      	add	r7, sp, #0
    3122:	4603      	mov	r3, r0
    3124:	71fb      	strb	r3, [r7, #7]
    3126:	460b      	mov	r3, r1
    3128:	71bb      	strb	r3, [r7, #6]
    312a:	4613      	mov	r3, r2
    312c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    312e:	797b      	ldrb	r3, [r7, #5]
    3130:	2b01      	cmp	r3, #1
    3132:	d00a      	beq.n	314a <_gpio_set_pin_pull_mode+0x2e>
    3134:	2b02      	cmp	r3, #2
    3136:	d01f      	beq.n	3178 <_gpio_set_pin_pull_mode+0x5c>
    3138:	2b00      	cmp	r3, #0
    313a:	d134      	bne.n	31a6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    313c:	79ba      	ldrb	r2, [r7, #6]
    313e:	79fb      	ldrb	r3, [r7, #7]
    3140:	4619      	mov	r1, r3
    3142:	481e      	ldr	r0, [pc, #120]	; (31bc <_gpio_set_pin_pull_mode+0xa0>)
    3144:	4b1e      	ldr	r3, [pc, #120]	; (31c0 <_gpio_set_pin_pull_mode+0xa4>)
    3146:	4798      	blx	r3
		break;
    3148:	e033      	b.n	31b2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    314a:	79bb      	ldrb	r3, [r7, #6]
    314c:	2201      	movs	r2, #1
    314e:	409a      	lsls	r2, r3
    3150:	79fb      	ldrb	r3, [r7, #7]
    3152:	4619      	mov	r1, r3
    3154:	4819      	ldr	r0, [pc, #100]	; (31bc <_gpio_set_pin_pull_mode+0xa0>)
    3156:	4b1b      	ldr	r3, [pc, #108]	; (31c4 <_gpio_set_pin_pull_mode+0xa8>)
    3158:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    315a:	79ba      	ldrb	r2, [r7, #6]
    315c:	79fb      	ldrb	r3, [r7, #7]
    315e:	4619      	mov	r1, r3
    3160:	4816      	ldr	r0, [pc, #88]	; (31bc <_gpio_set_pin_pull_mode+0xa0>)
    3162:	4b19      	ldr	r3, [pc, #100]	; (31c8 <_gpio_set_pin_pull_mode+0xac>)
    3164:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    3166:	79bb      	ldrb	r3, [r7, #6]
    3168:	2201      	movs	r2, #1
    316a:	409a      	lsls	r2, r3
    316c:	79fb      	ldrb	r3, [r7, #7]
    316e:	4619      	mov	r1, r3
    3170:	4812      	ldr	r0, [pc, #72]	; (31bc <_gpio_set_pin_pull_mode+0xa0>)
    3172:	4b16      	ldr	r3, [pc, #88]	; (31cc <_gpio_set_pin_pull_mode+0xb0>)
    3174:	4798      	blx	r3
		break;
    3176:	e01c      	b.n	31b2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    3178:	79bb      	ldrb	r3, [r7, #6]
    317a:	2201      	movs	r2, #1
    317c:	409a      	lsls	r2, r3
    317e:	79fb      	ldrb	r3, [r7, #7]
    3180:	4619      	mov	r1, r3
    3182:	480e      	ldr	r0, [pc, #56]	; (31bc <_gpio_set_pin_pull_mode+0xa0>)
    3184:	4b0f      	ldr	r3, [pc, #60]	; (31c4 <_gpio_set_pin_pull_mode+0xa8>)
    3186:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3188:	79ba      	ldrb	r2, [r7, #6]
    318a:	79fb      	ldrb	r3, [r7, #7]
    318c:	4619      	mov	r1, r3
    318e:	480b      	ldr	r0, [pc, #44]	; (31bc <_gpio_set_pin_pull_mode+0xa0>)
    3190:	4b0d      	ldr	r3, [pc, #52]	; (31c8 <_gpio_set_pin_pull_mode+0xac>)
    3192:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    3194:	79bb      	ldrb	r3, [r7, #6]
    3196:	2201      	movs	r2, #1
    3198:	409a      	lsls	r2, r3
    319a:	79fb      	ldrb	r3, [r7, #7]
    319c:	4619      	mov	r1, r3
    319e:	4807      	ldr	r0, [pc, #28]	; (31bc <_gpio_set_pin_pull_mode+0xa0>)
    31a0:	4b0b      	ldr	r3, [pc, #44]	; (31d0 <_gpio_set_pin_pull_mode+0xb4>)
    31a2:	4798      	blx	r3
		break;
    31a4:	e005      	b.n	31b2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    31a6:	2289      	movs	r2, #137	; 0x89
    31a8:	490a      	ldr	r1, [pc, #40]	; (31d4 <_gpio_set_pin_pull_mode+0xb8>)
    31aa:	2000      	movs	r0, #0
    31ac:	4b0a      	ldr	r3, [pc, #40]	; (31d8 <_gpio_set_pin_pull_mode+0xbc>)
    31ae:	4798      	blx	r3
		break;
    31b0:	bf00      	nop
	}
}
    31b2:	bf00      	nop
    31b4:	3708      	adds	r7, #8
    31b6:	46bd      	mov	sp, r7
    31b8:	bd80      	pop	{r7, pc}
    31ba:	bf00      	nop
    31bc:	41008000 	.word	0x41008000
    31c0:	00002f83 	.word	0x00002f83
    31c4:	00002daf 	.word	0x00002daf
    31c8:	00002f3f 	.word	0x00002f3f
    31cc:	00002dd7 	.word	0x00002dd7
    31d0:	00002dff 	.word	0x00002dff
    31d4:	0000ffcc 	.word	0x0000ffcc
    31d8:	00005af5 	.word	0x00005af5

000031dc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    31dc:	b590      	push	{r4, r7, lr}
    31de:	b085      	sub	sp, #20
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
    31e4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	095b      	lsrs	r3, r3, #5
    31ea:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	b2db      	uxtb	r3, r3
    31f0:	f003 031f 	and.w	r3, r3, #31
    31f4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    31f6:	683b      	ldr	r3, [r7, #0]
    31f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    31fc:	d106      	bne.n	320c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    31fe:	7bba      	ldrb	r2, [r7, #14]
    3200:	7bf9      	ldrb	r1, [r7, #15]
    3202:	2300      	movs	r3, #0
    3204:	4812      	ldr	r0, [pc, #72]	; (3250 <_gpio_set_pin_function+0x74>)
    3206:	4c13      	ldr	r4, [pc, #76]	; (3254 <_gpio_set_pin_function+0x78>)
    3208:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    320a:	e01d      	b.n	3248 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    320c:	7bba      	ldrb	r2, [r7, #14]
    320e:	7bf9      	ldrb	r1, [r7, #15]
    3210:	2301      	movs	r3, #1
    3212:	480f      	ldr	r0, [pc, #60]	; (3250 <_gpio_set_pin_function+0x74>)
    3214:	4c0f      	ldr	r4, [pc, #60]	; (3254 <_gpio_set_pin_function+0x78>)
    3216:	47a0      	blx	r4
		if (pin & 1) {
    3218:	7bbb      	ldrb	r3, [r7, #14]
    321a:	f003 0301 	and.w	r3, r3, #1
    321e:	2b00      	cmp	r3, #0
    3220:	d009      	beq.n	3236 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3222:	7bbb      	ldrb	r3, [r7, #14]
    3224:	085b      	lsrs	r3, r3, #1
    3226:	b2da      	uxtb	r2, r3
    3228:	683b      	ldr	r3, [r7, #0]
    322a:	b2db      	uxtb	r3, r3
    322c:	7bf9      	ldrb	r1, [r7, #15]
    322e:	4808      	ldr	r0, [pc, #32]	; (3250 <_gpio_set_pin_function+0x74>)
    3230:	4c09      	ldr	r4, [pc, #36]	; (3258 <_gpio_set_pin_function+0x7c>)
    3232:	47a0      	blx	r4
}
    3234:	e008      	b.n	3248 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    3236:	7bbb      	ldrb	r3, [r7, #14]
    3238:	085b      	lsrs	r3, r3, #1
    323a:	b2da      	uxtb	r2, r3
    323c:	683b      	ldr	r3, [r7, #0]
    323e:	b2db      	uxtb	r3, r3
    3240:	7bf9      	ldrb	r1, [r7, #15]
    3242:	4803      	ldr	r0, [pc, #12]	; (3250 <_gpio_set_pin_function+0x74>)
    3244:	4c05      	ldr	r4, [pc, #20]	; (325c <_gpio_set_pin_function+0x80>)
    3246:	47a0      	blx	r4
}
    3248:	bf00      	nop
    324a:	3714      	adds	r7, #20
    324c:	46bd      	mov	sp, r7
    324e:	bd90      	pop	{r4, r7, pc}
    3250:	41008000 	.word	0x41008000
    3254:	00002ee5 	.word	0x00002ee5
    3258:	00002e87 	.word	0x00002e87
    325c:	00002e27 	.word	0x00002e27

00003260 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    3260:	b580      	push	{r7, lr}
    3262:	b082      	sub	sp, #8
    3264:	af00      	add	r7, sp, #0
    3266:	4603      	mov	r3, r0
    3268:	460a      	mov	r2, r1
    326a:	71fb      	strb	r3, [r7, #7]
    326c:	4613      	mov	r3, r2
    326e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3270:	79fb      	ldrb	r3, [r7, #7]
    3272:	095b      	lsrs	r3, r3, #5
    3274:	b2d8      	uxtb	r0, r3
    3276:	79fb      	ldrb	r3, [r7, #7]
    3278:	f003 031f 	and.w	r3, r3, #31
    327c:	b2db      	uxtb	r3, r3
    327e:	79ba      	ldrb	r2, [r7, #6]
    3280:	4619      	mov	r1, r3
    3282:	4b03      	ldr	r3, [pc, #12]	; (3290 <gpio_set_pin_pull_mode+0x30>)
    3284:	4798      	blx	r3
}
    3286:	bf00      	nop
    3288:	3708      	adds	r7, #8
    328a:	46bd      	mov	sp, r7
    328c:	bd80      	pop	{r7, pc}
    328e:	bf00      	nop
    3290:	0000311d 	.word	0x0000311d

00003294 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
    329c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    329e:	6839      	ldr	r1, [r7, #0]
    32a0:	6878      	ldr	r0, [r7, #4]
    32a2:	4b03      	ldr	r3, [pc, #12]	; (32b0 <gpio_set_pin_function+0x1c>)
    32a4:	4798      	blx	r3
}
    32a6:	bf00      	nop
    32a8:	3708      	adds	r7, #8
    32aa:	46bd      	mov	sp, r7
    32ac:	bd80      	pop	{r7, pc}
    32ae:	bf00      	nop
    32b0:	000031dd 	.word	0x000031dd

000032b4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b082      	sub	sp, #8
    32b8:	af00      	add	r7, sp, #0
    32ba:	4603      	mov	r3, r0
    32bc:	460a      	mov	r2, r1
    32be:	71fb      	strb	r3, [r7, #7]
    32c0:	4613      	mov	r3, r2
    32c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    32c4:	79fb      	ldrb	r3, [r7, #7]
    32c6:	095b      	lsrs	r3, r3, #5
    32c8:	b2d8      	uxtb	r0, r3
    32ca:	79fb      	ldrb	r3, [r7, #7]
    32cc:	f003 031f 	and.w	r3, r3, #31
    32d0:	2201      	movs	r2, #1
    32d2:	fa02 f303 	lsl.w	r3, r2, r3
    32d6:	79ba      	ldrb	r2, [r7, #6]
    32d8:	4619      	mov	r1, r3
    32da:	4b03      	ldr	r3, [pc, #12]	; (32e8 <gpio_set_pin_direction+0x34>)
    32dc:	4798      	blx	r3
}
    32de:	bf00      	nop
    32e0:	3708      	adds	r7, #8
    32e2:	46bd      	mov	sp, r7
    32e4:	bd80      	pop	{r7, pc}
    32e6:	bf00      	nop
    32e8:	00002ff1 	.word	0x00002ff1

000032ec <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    32ec:	b580      	push	{r7, lr}
    32ee:	b082      	sub	sp, #8
    32f0:	af00      	add	r7, sp, #0
    32f2:	4603      	mov	r3, r0
    32f4:	460a      	mov	r2, r1
    32f6:	71fb      	strb	r3, [r7, #7]
    32f8:	4613      	mov	r3, r2
    32fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    32fc:	79fb      	ldrb	r3, [r7, #7]
    32fe:	095b      	lsrs	r3, r3, #5
    3300:	b2d8      	uxtb	r0, r3
    3302:	79fb      	ldrb	r3, [r7, #7]
    3304:	f003 031f 	and.w	r3, r3, #31
    3308:	2201      	movs	r2, #1
    330a:	fa02 f303 	lsl.w	r3, r2, r3
    330e:	79ba      	ldrb	r2, [r7, #6]
    3310:	4619      	mov	r1, r3
    3312:	4b03      	ldr	r3, [pc, #12]	; (3320 <gpio_set_pin_level+0x34>)
    3314:	4798      	blx	r3
}
    3316:	bf00      	nop
    3318:	3708      	adds	r7, #8
    331a:	46bd      	mov	sp, r7
    331c:	bd80      	pop	{r7, pc}
    331e:	bf00      	nop
    3320:	000030d9 	.word	0x000030d9

00003324 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    3324:	b580      	push	{r7, lr}
    3326:	af00      	add	r7, sp, #0
	_init_chip();
    3328:	4b01      	ldr	r3, [pc, #4]	; (3330 <init_mcu+0xc>)
    332a:	4798      	blx	r3
}
    332c:	bf00      	nop
    332e:	bd80      	pop	{r7, pc}
    3330:	00006705 	.word	0x00006705

00003334 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    3334:	b580      	push	{r7, lr}
    3336:	b082      	sub	sp, #8
    3338:	af00      	add	r7, sp, #0
    333a:	6078      	str	r0, [r7, #4]
    333c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	2b00      	cmp	r3, #0
    3342:	d004      	beq.n	334e <wdt_init+0x1a>
    3344:	683b      	ldr	r3, [r7, #0]
    3346:	2b00      	cmp	r3, #0
    3348:	d001      	beq.n	334e <wdt_init+0x1a>
    334a:	2301      	movs	r3, #1
    334c:	e000      	b.n	3350 <wdt_init+0x1c>
    334e:	2300      	movs	r3, #0
    3350:	f003 0301 	and.w	r3, r3, #1
    3354:	b2db      	uxtb	r3, r3
    3356:	2248      	movs	r2, #72	; 0x48
    3358:	4907      	ldr	r1, [pc, #28]	; (3378 <wdt_init+0x44>)
    335a:	4618      	mov	r0, r3
    335c:	4b07      	ldr	r3, [pc, #28]	; (337c <wdt_init+0x48>)
    335e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	683a      	ldr	r2, [r7, #0]
    3364:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	4618      	mov	r0, r3
    336a:	4b05      	ldr	r3, [pc, #20]	; (3380 <wdt_init+0x4c>)
    336c:	4798      	blx	r3
    336e:	4603      	mov	r3, r0
}
    3370:	4618      	mov	r0, r3
    3372:	3708      	adds	r7, #8
    3374:	46bd      	mov	sp, r7
    3376:	bd80      	pop	{r7, pc}
    3378:	0000ffe8 	.word	0x0000ffe8
    337c:	00005af5 	.word	0x00005af5
    3380:	0000d05d 	.word	0x0000d05d

00003384 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    3384:	b580      	push	{r7, lr}
    3386:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    3388:	4804      	ldr	r0, [pc, #16]	; (339c <CRC_CALC_init+0x18>)
    338a:	4b05      	ldr	r3, [pc, #20]	; (33a0 <CRC_CALC_init+0x1c>)
    338c:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    338e:	4905      	ldr	r1, [pc, #20]	; (33a4 <CRC_CALC_init+0x20>)
    3390:	4805      	ldr	r0, [pc, #20]	; (33a8 <CRC_CALC_init+0x24>)
    3392:	4b06      	ldr	r3, [pc, #24]	; (33ac <CRC_CALC_init+0x28>)
    3394:	4798      	blx	r3
}
    3396:	bf00      	nop
    3398:	bd80      	pop	{r7, pc}
    339a:	bf00      	nop
    339c:	40000800 	.word	0x40000800
    33a0:	00002bc7 	.word	0x00002bc7
    33a4:	41002000 	.word	0x41002000
    33a8:	200024b8 	.word	0x200024b8
    33ac:	000043c1 	.word	0x000043c1

000033b0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    33b4:	2244      	movs	r2, #68	; 0x44
    33b6:	2104      	movs	r1, #4
    33b8:	483f      	ldr	r0, [pc, #252]	; (34b8 <EXTERNAL_IRQ_0_init+0x108>)
    33ba:	4b40      	ldr	r3, [pc, #256]	; (34bc <EXTERNAL_IRQ_0_init+0x10c>)
    33bc:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    33be:	4840      	ldr	r0, [pc, #256]	; (34c0 <EXTERNAL_IRQ_0_init+0x110>)
    33c0:	4b40      	ldr	r3, [pc, #256]	; (34c4 <EXTERNAL_IRQ_0_init+0x114>)
    33c2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    33c4:	2101      	movs	r1, #1
    33c6:	2040      	movs	r0, #64	; 0x40
    33c8:	4b3f      	ldr	r3, [pc, #252]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    33ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    33cc:	2100      	movs	r1, #0
    33ce:	2040      	movs	r0, #64	; 0x40
    33d0:	4b3e      	ldr	r3, [pc, #248]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    33d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    33d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    33d8:	2040      	movs	r0, #64	; 0x40
    33da:	4b3d      	ldr	r3, [pc, #244]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    33dc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    33de:	2101      	movs	r1, #1
    33e0:	2021      	movs	r0, #33	; 0x21
    33e2:	4b39      	ldr	r3, [pc, #228]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    33e4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    33e6:	2100      	movs	r1, #0
    33e8:	2021      	movs	r0, #33	; 0x21
    33ea:	4b38      	ldr	r3, [pc, #224]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    33ec:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    33ee:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    33f2:	2021      	movs	r0, #33	; 0x21
    33f4:	4b36      	ldr	r3, [pc, #216]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    33f6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    33f8:	2101      	movs	r1, #1
    33fa:	2003      	movs	r0, #3
    33fc:	4b32      	ldr	r3, [pc, #200]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    33fe:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    3400:	2102      	movs	r1, #2
    3402:	2003      	movs	r0, #3
    3404:	4b31      	ldr	r3, [pc, #196]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    3406:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    3408:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    340c:	2003      	movs	r0, #3
    340e:	4b30      	ldr	r3, [pc, #192]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    3410:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    3412:	2101      	movs	r1, #1
    3414:	2004      	movs	r0, #4
    3416:	4b2c      	ldr	r3, [pc, #176]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    3418:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    341a:	2102      	movs	r1, #2
    341c:	2004      	movs	r0, #4
    341e:	4b2b      	ldr	r3, [pc, #172]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    3420:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    3422:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    3426:	2004      	movs	r0, #4
    3428:	4b29      	ldr	r3, [pc, #164]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    342a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    342c:	2101      	movs	r1, #1
    342e:	2005      	movs	r0, #5
    3430:	4b25      	ldr	r3, [pc, #148]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    3432:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    3434:	2102      	movs	r1, #2
    3436:	2005      	movs	r0, #5
    3438:	4b24      	ldr	r3, [pc, #144]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    343a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    343c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3440:	2005      	movs	r0, #5
    3442:	4b23      	ldr	r3, [pc, #140]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    3444:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    3446:	2101      	movs	r1, #1
    3448:	2056      	movs	r0, #86	; 0x56
    344a:	4b1f      	ldr	r3, [pc, #124]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    344c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    344e:	2102      	movs	r1, #2
    3450:	2056      	movs	r0, #86	; 0x56
    3452:	4b1e      	ldr	r3, [pc, #120]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    3454:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    3456:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    345a:	2056      	movs	r0, #86	; 0x56
    345c:	4b1c      	ldr	r3, [pc, #112]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    345e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    3460:	2101      	movs	r1, #1
    3462:	2057      	movs	r0, #87	; 0x57
    3464:	4b18      	ldr	r3, [pc, #96]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    3466:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    3468:	2102      	movs	r1, #2
    346a:	2057      	movs	r0, #87	; 0x57
    346c:	4b17      	ldr	r3, [pc, #92]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    346e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    3470:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    3474:	2057      	movs	r0, #87	; 0x57
    3476:	4b16      	ldr	r3, [pc, #88]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    3478:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    347a:	2101      	movs	r1, #1
    347c:	2028      	movs	r0, #40	; 0x28
    347e:	4b12      	ldr	r3, [pc, #72]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    3480:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    3482:	2100      	movs	r1, #0
    3484:	2028      	movs	r0, #40	; 0x28
    3486:	4b11      	ldr	r3, [pc, #68]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    3488:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    348a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    348e:	2028      	movs	r0, #40	; 0x28
    3490:	4b0f      	ldr	r3, [pc, #60]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    3492:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    3494:	2101      	movs	r1, #1
    3496:	2029      	movs	r0, #41	; 0x29
    3498:	4b0b      	ldr	r3, [pc, #44]	; (34c8 <EXTERNAL_IRQ_0_init+0x118>)
    349a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    349c:	2100      	movs	r1, #0
    349e:	2029      	movs	r0, #41	; 0x29
    34a0:	4b0a      	ldr	r3, [pc, #40]	; (34cc <EXTERNAL_IRQ_0_init+0x11c>)
    34a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    34a4:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    34a8:	2029      	movs	r0, #41	; 0x29
    34aa:	4b09      	ldr	r3, [pc, #36]	; (34d0 <EXTERNAL_IRQ_0_init+0x120>)
    34ac:	4798      	blx	r3

	ext_irq_init();
    34ae:	4b09      	ldr	r3, [pc, #36]	; (34d4 <EXTERNAL_IRQ_0_init+0x124>)
    34b0:	4798      	blx	r3
}
    34b2:	bf00      	nop
    34b4:	bd80      	pop	{r7, pc}
    34b6:	bf00      	nop
    34b8:	40001c00 	.word	0x40001c00
    34bc:	00002a61 	.word	0x00002a61
    34c0:	40000800 	.word	0x40000800
    34c4:	00002b47 	.word	0x00002b47
    34c8:	000032b5 	.word	0x000032b5
    34cc:	00003261 	.word	0x00003261
    34d0:	00003295 	.word	0x00003295
    34d4:	00004489 	.word	0x00004489

000034d8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    34d8:	b580      	push	{r7, lr}
    34da:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    34dc:	2244      	movs	r2, #68	; 0x44
    34de:	210b      	movs	r1, #11
    34e0:	4807      	ldr	r0, [pc, #28]	; (3500 <EVENT_SYSTEM_0_init+0x28>)
    34e2:	4b08      	ldr	r3, [pc, #32]	; (3504 <EVENT_SYSTEM_0_init+0x2c>)
    34e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    34e6:	2244      	movs	r2, #68	; 0x44
    34e8:	210c      	movs	r1, #12
    34ea:	4805      	ldr	r0, [pc, #20]	; (3500 <EVENT_SYSTEM_0_init+0x28>)
    34ec:	4b05      	ldr	r3, [pc, #20]	; (3504 <EVENT_SYSTEM_0_init+0x2c>)
    34ee:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    34f0:	4805      	ldr	r0, [pc, #20]	; (3508 <EVENT_SYSTEM_0_init+0x30>)
    34f2:	4b06      	ldr	r3, [pc, #24]	; (350c <EVENT_SYSTEM_0_init+0x34>)
    34f4:	4798      	blx	r3

	event_system_init();
    34f6:	4b06      	ldr	r3, [pc, #24]	; (3510 <EVENT_SYSTEM_0_init+0x38>)
    34f8:	4798      	blx	r3
}
    34fa:	bf00      	nop
    34fc:	bd80      	pop	{r7, pc}
    34fe:	bf00      	nop
    3500:	40001c00 	.word	0x40001c00
    3504:	00002a61 	.word	0x00002a61
    3508:	40000800 	.word	0x40000800
    350c:	00002be7 	.word	0x00002be7
    3510:	00004475 	.word	0x00004475

00003514 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    3514:	b580      	push	{r7, lr}
    3516:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    3518:	2101      	movs	r1, #1
    351a:	202b      	movs	r0, #43	; 0x2b
    351c:	4b2b      	ldr	r3, [pc, #172]	; (35cc <QSPI_N25Q256_PORT_init+0xb8>)
    351e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3520:	2100      	movs	r1, #0
    3522:	202b      	movs	r0, #43	; 0x2b
    3524:	4b2a      	ldr	r3, [pc, #168]	; (35d0 <QSPI_N25Q256_PORT_init+0xbc>)
    3526:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    3528:	492a      	ldr	r1, [pc, #168]	; (35d4 <QSPI_N25Q256_PORT_init+0xc0>)
    352a:	202b      	movs	r0, #43	; 0x2b
    352c:	4b2a      	ldr	r3, [pc, #168]	; (35d8 <QSPI_N25Q256_PORT_init+0xc4>)
    352e:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3530:	2102      	movs	r1, #2
    3532:	2008      	movs	r0, #8
    3534:	4b25      	ldr	r3, [pc, #148]	; (35cc <QSPI_N25Q256_PORT_init+0xb8>)
    3536:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    3538:	2100      	movs	r1, #0
    353a:	2008      	movs	r0, #8
    353c:	4b27      	ldr	r3, [pc, #156]	; (35dc <QSPI_N25Q256_PORT_init+0xc8>)
    353e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    3540:	2100      	movs	r1, #0
    3542:	2008      	movs	r0, #8
    3544:	4b22      	ldr	r3, [pc, #136]	; (35d0 <QSPI_N25Q256_PORT_init+0xbc>)
    3546:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    3548:	4925      	ldr	r1, [pc, #148]	; (35e0 <QSPI_N25Q256_PORT_init+0xcc>)
    354a:	2008      	movs	r0, #8
    354c:	4b22      	ldr	r3, [pc, #136]	; (35d8 <QSPI_N25Q256_PORT_init+0xc4>)
    354e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    3550:	2102      	movs	r1, #2
    3552:	2009      	movs	r0, #9
    3554:	4b1d      	ldr	r3, [pc, #116]	; (35cc <QSPI_N25Q256_PORT_init+0xb8>)
    3556:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    3558:	2100      	movs	r1, #0
    355a:	2009      	movs	r0, #9
    355c:	4b1f      	ldr	r3, [pc, #124]	; (35dc <QSPI_N25Q256_PORT_init+0xc8>)
    355e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    3560:	2100      	movs	r1, #0
    3562:	2009      	movs	r0, #9
    3564:	4b1a      	ldr	r3, [pc, #104]	; (35d0 <QSPI_N25Q256_PORT_init+0xbc>)
    3566:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    3568:	491e      	ldr	r1, [pc, #120]	; (35e4 <QSPI_N25Q256_PORT_init+0xd0>)
    356a:	2009      	movs	r0, #9
    356c:	4b1a      	ldr	r3, [pc, #104]	; (35d8 <QSPI_N25Q256_PORT_init+0xc4>)
    356e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3570:	2102      	movs	r1, #2
    3572:	200a      	movs	r0, #10
    3574:	4b15      	ldr	r3, [pc, #84]	; (35cc <QSPI_N25Q256_PORT_init+0xb8>)
    3576:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    3578:	2100      	movs	r1, #0
    357a:	200a      	movs	r0, #10
    357c:	4b17      	ldr	r3, [pc, #92]	; (35dc <QSPI_N25Q256_PORT_init+0xc8>)
    357e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3580:	2100      	movs	r1, #0
    3582:	200a      	movs	r0, #10
    3584:	4b12      	ldr	r3, [pc, #72]	; (35d0 <QSPI_N25Q256_PORT_init+0xbc>)
    3586:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    3588:	4917      	ldr	r1, [pc, #92]	; (35e8 <QSPI_N25Q256_PORT_init+0xd4>)
    358a:	200a      	movs	r0, #10
    358c:	4b12      	ldr	r3, [pc, #72]	; (35d8 <QSPI_N25Q256_PORT_init+0xc4>)
    358e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    3590:	2102      	movs	r1, #2
    3592:	200b      	movs	r0, #11
    3594:	4b0d      	ldr	r3, [pc, #52]	; (35cc <QSPI_N25Q256_PORT_init+0xb8>)
    3596:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    3598:	2100      	movs	r1, #0
    359a:	200b      	movs	r0, #11
    359c:	4b0f      	ldr	r3, [pc, #60]	; (35dc <QSPI_N25Q256_PORT_init+0xc8>)
    359e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    35a0:	2100      	movs	r1, #0
    35a2:	200b      	movs	r0, #11
    35a4:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <QSPI_N25Q256_PORT_init+0xbc>)
    35a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    35a8:	4910      	ldr	r1, [pc, #64]	; (35ec <QSPI_N25Q256_PORT_init+0xd8>)
    35aa:	200b      	movs	r0, #11
    35ac:	4b0a      	ldr	r3, [pc, #40]	; (35d8 <QSPI_N25Q256_PORT_init+0xc4>)
    35ae:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    35b0:	2101      	movs	r1, #1
    35b2:	202a      	movs	r0, #42	; 0x2a
    35b4:	4b05      	ldr	r3, [pc, #20]	; (35cc <QSPI_N25Q256_PORT_init+0xb8>)
    35b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    35b8:	2100      	movs	r1, #0
    35ba:	202a      	movs	r0, #42	; 0x2a
    35bc:	4b04      	ldr	r3, [pc, #16]	; (35d0 <QSPI_N25Q256_PORT_init+0xbc>)
    35be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    35c0:	490b      	ldr	r1, [pc, #44]	; (35f0 <QSPI_N25Q256_PORT_init+0xdc>)
    35c2:	202a      	movs	r0, #42	; 0x2a
    35c4:	4b04      	ldr	r3, [pc, #16]	; (35d8 <QSPI_N25Q256_PORT_init+0xc4>)
    35c6:	4798      	blx	r3
}
    35c8:	bf00      	nop
    35ca:	bd80      	pop	{r7, pc}
    35cc:	000032b5 	.word	0x000032b5
    35d0:	00003261 	.word	0x00003261
    35d4:	002b0007 	.word	0x002b0007
    35d8:	00003295 	.word	0x00003295
    35dc:	000032ed 	.word	0x000032ed
    35e0:	00080007 	.word	0x00080007
    35e4:	00090007 	.word	0x00090007
    35e8:	000a0007 	.word	0x000a0007
    35ec:	000b0007 	.word	0x000b0007
    35f0:	002a0007 	.word	0x002a0007

000035f4 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    35f4:	b580      	push	{r7, lr}
    35f6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    35f8:	4805      	ldr	r0, [pc, #20]	; (3610 <QSPI_N25Q256_CLOCK_init+0x1c>)
    35fa:	4b06      	ldr	r3, [pc, #24]	; (3614 <QSPI_N25Q256_CLOCK_init+0x20>)
    35fc:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    35fe:	4804      	ldr	r0, [pc, #16]	; (3610 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3600:	4b05      	ldr	r3, [pc, #20]	; (3618 <QSPI_N25Q256_CLOCK_init+0x24>)
    3602:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3604:	4802      	ldr	r0, [pc, #8]	; (3610 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3606:	4b05      	ldr	r3, [pc, #20]	; (361c <QSPI_N25Q256_CLOCK_init+0x28>)
    3608:	4798      	blx	r3
}
    360a:	bf00      	nop
    360c:	bd80      	pop	{r7, pc}
    360e:	bf00      	nop
    3610:	40000800 	.word	0x40000800
    3614:	00002aa7 	.word	0x00002aa7
    3618:	00002ae7 	.word	0x00002ae7
    361c:	00002ca7 	.word	0x00002ca7

00003620 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3620:	b580      	push	{r7, lr}
    3622:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3624:	4b04      	ldr	r3, [pc, #16]	; (3638 <QSPI_N25Q256_init+0x18>)
    3626:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    3628:	4904      	ldr	r1, [pc, #16]	; (363c <QSPI_N25Q256_init+0x1c>)
    362a:	4805      	ldr	r0, [pc, #20]	; (3640 <QSPI_N25Q256_init+0x20>)
    362c:	4b05      	ldr	r3, [pc, #20]	; (3644 <QSPI_N25Q256_init+0x24>)
    362e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3630:	4b05      	ldr	r3, [pc, #20]	; (3648 <QSPI_N25Q256_init+0x28>)
    3632:	4798      	blx	r3
}
    3634:	bf00      	nop
    3636:	bd80      	pop	{r7, pc}
    3638:	000035f5 	.word	0x000035f5
    363c:	42003400 	.word	0x42003400
    3640:	2000236c 	.word	0x2000236c
    3644:	00004951 	.word	0x00004951
    3648:	00003515 	.word	0x00003515

0000364c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    364c:	b580      	push	{r7, lr}
    364e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3650:	4802      	ldr	r0, [pc, #8]	; (365c <DATETIME_CLOCK_CLOCK_init+0x10>)
    3652:	4b03      	ldr	r3, [pc, #12]	; (3660 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3654:	4798      	blx	r3
}
    3656:	bf00      	nop
    3658:	bd80      	pop	{r7, pc}
    365a:	bf00      	nop
    365c:	40000800 	.word	0x40000800
    3660:	00002b27 	.word	0x00002b27

00003664 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3664:	b580      	push	{r7, lr}
    3666:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    3668:	4b03      	ldr	r3, [pc, #12]	; (3678 <DATETIME_CLOCK_init+0x14>)
    366a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    366c:	4903      	ldr	r1, [pc, #12]	; (367c <DATETIME_CLOCK_init+0x18>)
    366e:	4804      	ldr	r0, [pc, #16]	; (3680 <DATETIME_CLOCK_init+0x1c>)
    3670:	4b04      	ldr	r3, [pc, #16]	; (3684 <DATETIME_CLOCK_init+0x20>)
    3672:	4798      	blx	r3
}
    3674:	bf00      	nop
    3676:	bd80      	pop	{r7, pc}
    3678:	0000364d 	.word	0x0000364d
    367c:	40002400 	.word	0x40002400
    3680:	20002494 	.word	0x20002494
    3684:	00004215 	.word	0x00004215

00003688 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    3688:	b580      	push	{r7, lr}
    368a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    368c:	2101      	movs	r1, #1
    368e:	2010      	movs	r0, #16
    3690:	4b07      	ldr	r3, [pc, #28]	; (36b0 <I2C_HEATERS_PORT_init+0x28>)
    3692:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    3694:	4907      	ldr	r1, [pc, #28]	; (36b4 <I2C_HEATERS_PORT_init+0x2c>)
    3696:	2010      	movs	r0, #16
    3698:	4b07      	ldr	r3, [pc, #28]	; (36b8 <I2C_HEATERS_PORT_init+0x30>)
    369a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    369c:	2101      	movs	r1, #1
    369e:	2011      	movs	r0, #17
    36a0:	4b03      	ldr	r3, [pc, #12]	; (36b0 <I2C_HEATERS_PORT_init+0x28>)
    36a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    36a4:	4905      	ldr	r1, [pc, #20]	; (36bc <I2C_HEATERS_PORT_init+0x34>)
    36a6:	2011      	movs	r0, #17
    36a8:	4b03      	ldr	r3, [pc, #12]	; (36b8 <I2C_HEATERS_PORT_init+0x30>)
    36aa:	4798      	blx	r3
}
    36ac:	bf00      	nop
    36ae:	bd80      	pop	{r7, pc}
    36b0:	00003261 	.word	0x00003261
    36b4:	00100002 	.word	0x00100002
    36b8:	00003295 	.word	0x00003295
    36bc:	00110002 	.word	0x00110002

000036c0 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    36c0:	b580      	push	{r7, lr}
    36c2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    36c4:	2242      	movs	r2, #66	; 0x42
    36c6:	2108      	movs	r1, #8
    36c8:	4806      	ldr	r0, [pc, #24]	; (36e4 <I2C_HEATERS_CLOCK_init+0x24>)
    36ca:	4b07      	ldr	r3, [pc, #28]	; (36e8 <I2C_HEATERS_CLOCK_init+0x28>)
    36cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    36ce:	224a      	movs	r2, #74	; 0x4a
    36d0:	2103      	movs	r1, #3
    36d2:	4804      	ldr	r0, [pc, #16]	; (36e4 <I2C_HEATERS_CLOCK_init+0x24>)
    36d4:	4b04      	ldr	r3, [pc, #16]	; (36e8 <I2C_HEATERS_CLOCK_init+0x28>)
    36d6:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    36d8:	4804      	ldr	r0, [pc, #16]	; (36ec <I2C_HEATERS_CLOCK_init+0x2c>)
    36da:	4b05      	ldr	r3, [pc, #20]	; (36f0 <I2C_HEATERS_CLOCK_init+0x30>)
    36dc:	4798      	blx	r3
}
    36de:	bf00      	nop
    36e0:	bd80      	pop	{r7, pc}
    36e2:	bf00      	nop
    36e4:	40001c00 	.word	0x40001c00
    36e8:	00002a61 	.word	0x00002a61
    36ec:	40000800 	.word	0x40000800
    36f0:	00002b67 	.word	0x00002b67

000036f4 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    36f4:	b580      	push	{r7, lr}
    36f6:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    36f8:	4b04      	ldr	r3, [pc, #16]	; (370c <I2C_HEATERS_init+0x18>)
    36fa:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    36fc:	4904      	ldr	r1, [pc, #16]	; (3710 <I2C_HEATERS_init+0x1c>)
    36fe:	4805      	ldr	r0, [pc, #20]	; (3714 <I2C_HEATERS_init+0x20>)
    3700:	4b05      	ldr	r3, [pc, #20]	; (3718 <I2C_HEATERS_init+0x24>)
    3702:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    3704:	4b05      	ldr	r3, [pc, #20]	; (371c <I2C_HEATERS_init+0x28>)
    3706:	4798      	blx	r3
}
    3708:	bf00      	nop
    370a:	bd80      	pop	{r7, pc}
    370c:	000036c1 	.word	0x000036c1
    3710:	40003400 	.word	0x40003400
    3714:	200023ec 	.word	0x200023ec
    3718:	00004751 	.word	0x00004751
    371c:	00003689 	.word	0x00003689

00003720 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    3720:	b580      	push	{r7, lr}
    3722:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    3724:	2100      	movs	r1, #0
    3726:	203b      	movs	r0, #59	; 0x3b
    3728:	4b11      	ldr	r3, [pc, #68]	; (3770 <SPI_TEMP_PORT_init+0x50>)
    372a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    372c:	2102      	movs	r1, #2
    372e:	203b      	movs	r0, #59	; 0x3b
    3730:	4b10      	ldr	r3, [pc, #64]	; (3774 <SPI_TEMP_PORT_init+0x54>)
    3732:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    3734:	4910      	ldr	r1, [pc, #64]	; (3778 <SPI_TEMP_PORT_init+0x58>)
    3736:	203b      	movs	r0, #59	; 0x3b
    3738:	4b10      	ldr	r3, [pc, #64]	; (377c <SPI_TEMP_PORT_init+0x5c>)
    373a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    373c:	2100      	movs	r1, #0
    373e:	203a      	movs	r0, #58	; 0x3a
    3740:	4b0b      	ldr	r3, [pc, #44]	; (3770 <SPI_TEMP_PORT_init+0x50>)
    3742:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    3744:	2102      	movs	r1, #2
    3746:	203a      	movs	r0, #58	; 0x3a
    3748:	4b0a      	ldr	r3, [pc, #40]	; (3774 <SPI_TEMP_PORT_init+0x54>)
    374a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    374c:	490c      	ldr	r1, [pc, #48]	; (3780 <SPI_TEMP_PORT_init+0x60>)
    374e:	203a      	movs	r0, #58	; 0x3a
    3750:	4b0a      	ldr	r3, [pc, #40]	; (377c <SPI_TEMP_PORT_init+0x5c>)
    3752:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    3754:	2101      	movs	r1, #1
    3756:	203c      	movs	r0, #60	; 0x3c
    3758:	4b06      	ldr	r3, [pc, #24]	; (3774 <SPI_TEMP_PORT_init+0x54>)
    375a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    375c:	2100      	movs	r1, #0
    375e:	203c      	movs	r0, #60	; 0x3c
    3760:	4b08      	ldr	r3, [pc, #32]	; (3784 <SPI_TEMP_PORT_init+0x64>)
    3762:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    3764:	4908      	ldr	r1, [pc, #32]	; (3788 <SPI_TEMP_PORT_init+0x68>)
    3766:	203c      	movs	r0, #60	; 0x3c
    3768:	4b04      	ldr	r3, [pc, #16]	; (377c <SPI_TEMP_PORT_init+0x5c>)
    376a:	4798      	blx	r3
}
    376c:	bf00      	nop
    376e:	bd80      	pop	{r7, pc}
    3770:	000032ed 	.word	0x000032ed
    3774:	000032b5 	.word	0x000032b5
    3778:	003b0003 	.word	0x003b0003
    377c:	00003295 	.word	0x00003295
    3780:	003a0003 	.word	0x003a0003
    3784:	00003261 	.word	0x00003261
    3788:	003c0003 	.word	0x003c0003

0000378c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    378c:	b580      	push	{r7, lr}
    378e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3790:	2245      	movs	r2, #69	; 0x45
    3792:	2122      	movs	r1, #34	; 0x22
    3794:	4806      	ldr	r0, [pc, #24]	; (37b0 <SPI_TEMP_CLOCK_init+0x24>)
    3796:	4b07      	ldr	r3, [pc, #28]	; (37b4 <SPI_TEMP_CLOCK_init+0x28>)
    3798:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    379a:	224a      	movs	r2, #74	; 0x4a
    379c:	2103      	movs	r1, #3
    379e:	4804      	ldr	r0, [pc, #16]	; (37b0 <SPI_TEMP_CLOCK_init+0x24>)
    37a0:	4b04      	ldr	r3, [pc, #16]	; (37b4 <SPI_TEMP_CLOCK_init+0x28>)
    37a2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    37a4:	4804      	ldr	r0, [pc, #16]	; (37b8 <SPI_TEMP_CLOCK_init+0x2c>)
    37a6:	4b05      	ldr	r3, [pc, #20]	; (37bc <SPI_TEMP_CLOCK_init+0x30>)
    37a8:	4798      	blx	r3
}
    37aa:	bf00      	nop
    37ac:	bd80      	pop	{r7, pc}
    37ae:	bf00      	nop
    37b0:	40001c00 	.word	0x40001c00
    37b4:	00002a61 	.word	0x00002a61
    37b8:	40000800 	.word	0x40000800
    37bc:	00002cc7 	.word	0x00002cc7

000037c0 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    37c0:	b580      	push	{r7, lr}
    37c2:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    37c4:	4b05      	ldr	r3, [pc, #20]	; (37dc <SPI_TEMP_init+0x1c>)
    37c6:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    37c8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    37cc:	4804      	ldr	r0, [pc, #16]	; (37e0 <SPI_TEMP_init+0x20>)
    37ce:	4b05      	ldr	r3, [pc, #20]	; (37e4 <SPI_TEMP_init+0x24>)
    37d0:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    37d2:	4b05      	ldr	r3, [pc, #20]	; (37e8 <SPI_TEMP_init+0x28>)
    37d4:	4798      	blx	r3
}
    37d6:	bf00      	nop
    37d8:	bd80      	pop	{r7, pc}
    37da:	bf00      	nop
    37dc:	0000378d 	.word	0x0000378d
    37e0:	20002314 	.word	0x20002314
    37e4:	00004a61 	.word	0x00004a61
    37e8:	00003721 	.word	0x00003721

000037ec <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    37ec:	b580      	push	{r7, lr}
    37ee:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    37f0:	2100      	movs	r1, #0
    37f2:	2017      	movs	r0, #23
    37f4:	4b07      	ldr	r3, [pc, #28]	; (3814 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    37f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    37f8:	4907      	ldr	r1, [pc, #28]	; (3818 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    37fa:	2017      	movs	r0, #23
    37fc:	4b07      	ldr	r3, [pc, #28]	; (381c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    37fe:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    3800:	2100      	movs	r1, #0
    3802:	2016      	movs	r0, #22
    3804:	4b03      	ldr	r3, [pc, #12]	; (3814 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    3806:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    3808:	4905      	ldr	r1, [pc, #20]	; (3820 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    380a:	2016      	movs	r0, #22
    380c:	4b03      	ldr	r3, [pc, #12]	; (381c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    380e:	4798      	blx	r3
}
    3810:	bf00      	nop
    3812:	bd80      	pop	{r7, pc}
    3814:	00003261 	.word	0x00003261
    3818:	00170003 	.word	0x00170003
    381c:	00003295 	.word	0x00003295
    3820:	00160003 	.word	0x00160003

00003824 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    3824:	b580      	push	{r7, lr}
    3826:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3828:	2244      	movs	r2, #68	; 0x44
    382a:	2123      	movs	r1, #35	; 0x23
    382c:	4806      	ldr	r0, [pc, #24]	; (3848 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    382e:	4b07      	ldr	r3, [pc, #28]	; (384c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    3830:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3832:	224a      	movs	r2, #74	; 0x4a
    3834:	2103      	movs	r1, #3
    3836:	4804      	ldr	r0, [pc, #16]	; (3848 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    3838:	4b04      	ldr	r3, [pc, #16]	; (384c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    383a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    383c:	4804      	ldr	r0, [pc, #16]	; (3850 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    383e:	4b05      	ldr	r3, [pc, #20]	; (3854 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    3840:	4798      	blx	r3
}
    3842:	bf00      	nop
    3844:	bd80      	pop	{r7, pc}
    3846:	bf00      	nop
    3848:	40001c00 	.word	0x40001c00
    384c:	00002a61 	.word	0x00002a61
    3850:	40000800 	.word	0x40000800
    3854:	00002ce7 	.word	0x00002ce7

00003858 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    3858:	b580      	push	{r7, lr}
    385a:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    385c:	4b04      	ldr	r3, [pc, #16]	; (3870 <I2C_FLAPPER_VALVE_init+0x18>)
    385e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    3860:	4904      	ldr	r1, [pc, #16]	; (3874 <I2C_FLAPPER_VALVE_init+0x1c>)
    3862:	4805      	ldr	r0, [pc, #20]	; (3878 <I2C_FLAPPER_VALVE_init+0x20>)
    3864:	4b05      	ldr	r3, [pc, #20]	; (387c <I2C_FLAPPER_VALVE_init+0x24>)
    3866:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    3868:	4b05      	ldr	r3, [pc, #20]	; (3880 <I2C_FLAPPER_VALVE_init+0x28>)
    386a:	4798      	blx	r3
}
    386c:	bf00      	nop
    386e:	bd80      	pop	{r7, pc}
    3870:	00003825 	.word	0x00003825
    3874:	43000400 	.word	0x43000400
    3878:	200023b0 	.word	0x200023b0
    387c:	00004751 	.word	0x00004751
    3880:	000037ed 	.word	0x000037ed

00003884 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    3884:	b580      	push	{r7, lr}
    3886:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    3888:	2100      	movs	r1, #0
    388a:	2044      	movs	r0, #68	; 0x44
    388c:	4b11      	ldr	r3, [pc, #68]	; (38d4 <SPI_HI3593_PORT_init+0x50>)
    388e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    3890:	2102      	movs	r1, #2
    3892:	2044      	movs	r0, #68	; 0x44
    3894:	4b10      	ldr	r3, [pc, #64]	; (38d8 <SPI_HI3593_PORT_init+0x54>)
    3896:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    3898:	4910      	ldr	r1, [pc, #64]	; (38dc <SPI_HI3593_PORT_init+0x58>)
    389a:	2044      	movs	r0, #68	; 0x44
    389c:	4b10      	ldr	r3, [pc, #64]	; (38e0 <SPI_HI3593_PORT_init+0x5c>)
    389e:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    38a0:	2100      	movs	r1, #0
    38a2:	2045      	movs	r0, #69	; 0x45
    38a4:	4b0b      	ldr	r3, [pc, #44]	; (38d4 <SPI_HI3593_PORT_init+0x50>)
    38a6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    38a8:	2102      	movs	r1, #2
    38aa:	2045      	movs	r0, #69	; 0x45
    38ac:	4b0a      	ldr	r3, [pc, #40]	; (38d8 <SPI_HI3593_PORT_init+0x54>)
    38ae:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    38b0:	490c      	ldr	r1, [pc, #48]	; (38e4 <SPI_HI3593_PORT_init+0x60>)
    38b2:	2045      	movs	r0, #69	; 0x45
    38b4:	4b0a      	ldr	r3, [pc, #40]	; (38e0 <SPI_HI3593_PORT_init+0x5c>)
    38b6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    38b8:	2101      	movs	r1, #1
    38ba:	2047      	movs	r0, #71	; 0x47
    38bc:	4b06      	ldr	r3, [pc, #24]	; (38d8 <SPI_HI3593_PORT_init+0x54>)
    38be:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    38c0:	2100      	movs	r1, #0
    38c2:	2047      	movs	r0, #71	; 0x47
    38c4:	4b08      	ldr	r3, [pc, #32]	; (38e8 <SPI_HI3593_PORT_init+0x64>)
    38c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    38c8:	4908      	ldr	r1, [pc, #32]	; (38ec <SPI_HI3593_PORT_init+0x68>)
    38ca:	2047      	movs	r0, #71	; 0x47
    38cc:	4b04      	ldr	r3, [pc, #16]	; (38e0 <SPI_HI3593_PORT_init+0x5c>)
    38ce:	4798      	blx	r3
}
    38d0:	bf00      	nop
    38d2:	bd80      	pop	{r7, pc}
    38d4:	000032ed 	.word	0x000032ed
    38d8:	000032b5 	.word	0x000032b5
    38dc:	00440002 	.word	0x00440002
    38e0:	00003295 	.word	0x00003295
    38e4:	00450002 	.word	0x00450002
    38e8:	00003261 	.word	0x00003261
    38ec:	00470002 	.word	0x00470002

000038f0 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38f4:	2242      	movs	r2, #66	; 0x42
    38f6:	2124      	movs	r1, #36	; 0x24
    38f8:	4806      	ldr	r0, [pc, #24]	; (3914 <SPI_HI3593_CLOCK_init+0x24>)
    38fa:	4b07      	ldr	r3, [pc, #28]	; (3918 <SPI_HI3593_CLOCK_init+0x28>)
    38fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38fe:	224a      	movs	r2, #74	; 0x4a
    3900:	2103      	movs	r1, #3
    3902:	4804      	ldr	r0, [pc, #16]	; (3914 <SPI_HI3593_CLOCK_init+0x24>)
    3904:	4b04      	ldr	r3, [pc, #16]	; (3918 <SPI_HI3593_CLOCK_init+0x28>)
    3906:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    3908:	4804      	ldr	r0, [pc, #16]	; (391c <SPI_HI3593_CLOCK_init+0x2c>)
    390a:	4b05      	ldr	r3, [pc, #20]	; (3920 <SPI_HI3593_CLOCK_init+0x30>)
    390c:	4798      	blx	r3
}
    390e:	bf00      	nop
    3910:	bd80      	pop	{r7, pc}
    3912:	bf00      	nop
    3914:	40001c00 	.word	0x40001c00
    3918:	00002a61 	.word	0x00002a61
    391c:	40000800 	.word	0x40000800
    3920:	00002d07 	.word	0x00002d07

00003924 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    3924:	b580      	push	{r7, lr}
    3926:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    3928:	4b04      	ldr	r3, [pc, #16]	; (393c <SPI_HI3593_init+0x18>)
    392a:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    392c:	4904      	ldr	r1, [pc, #16]	; (3940 <SPI_HI3593_init+0x1c>)
    392e:	4805      	ldr	r0, [pc, #20]	; (3944 <SPI_HI3593_init+0x20>)
    3930:	4b05      	ldr	r3, [pc, #20]	; (3948 <SPI_HI3593_init+0x24>)
    3932:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    3934:	4b05      	ldr	r3, [pc, #20]	; (394c <SPI_HI3593_init+0x28>)
    3936:	4798      	blx	r3
}
    3938:	bf00      	nop
    393a:	bd80      	pop	{r7, pc}
    393c:	000038f1 	.word	0x000038f1
    3940:	43000800 	.word	0x43000800
    3944:	200022fc 	.word	0x200022fc
    3948:	00004a61 	.word	0x00004a61
    394c:	00003885 	.word	0x00003885

00003950 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    3950:	b580      	push	{r7, lr}
    3952:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    3954:	2100      	movs	r1, #0
    3956:	2068      	movs	r0, #104	; 0x68
    3958:	4b07      	ldr	r3, [pc, #28]	; (3978 <I2C_FANS_PORT_init+0x28>)
    395a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    395c:	4907      	ldr	r1, [pc, #28]	; (397c <I2C_FANS_PORT_init+0x2c>)
    395e:	2068      	movs	r0, #104	; 0x68
    3960:	4b07      	ldr	r3, [pc, #28]	; (3980 <I2C_FANS_PORT_init+0x30>)
    3962:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    3964:	2100      	movs	r1, #0
    3966:	2069      	movs	r0, #105	; 0x69
    3968:	4b03      	ldr	r3, [pc, #12]	; (3978 <I2C_FANS_PORT_init+0x28>)
    396a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    396c:	4905      	ldr	r1, [pc, #20]	; (3984 <I2C_FANS_PORT_init+0x34>)
    396e:	2069      	movs	r0, #105	; 0x69
    3970:	4b03      	ldr	r3, [pc, #12]	; (3980 <I2C_FANS_PORT_init+0x30>)
    3972:	4798      	blx	r3
}
    3974:	bf00      	nop
    3976:	bd80      	pop	{r7, pc}
    3978:	00003261 	.word	0x00003261
    397c:	00680002 	.word	0x00680002
    3980:	00003295 	.word	0x00003295
    3984:	00690002 	.word	0x00690002

00003988 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    3988:	b580      	push	{r7, lr}
    398a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    398c:	2244      	movs	r2, #68	; 0x44
    398e:	2125      	movs	r1, #37	; 0x25
    3990:	4806      	ldr	r0, [pc, #24]	; (39ac <I2C_FANS_CLOCK_init+0x24>)
    3992:	4b07      	ldr	r3, [pc, #28]	; (39b0 <I2C_FANS_CLOCK_init+0x28>)
    3994:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3996:	224a      	movs	r2, #74	; 0x4a
    3998:	2103      	movs	r1, #3
    399a:	4804      	ldr	r0, [pc, #16]	; (39ac <I2C_FANS_CLOCK_init+0x24>)
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <I2C_FANS_CLOCK_init+0x28>)
    399e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    39a0:	4804      	ldr	r0, [pc, #16]	; (39b4 <I2C_FANS_CLOCK_init+0x2c>)
    39a2:	4b05      	ldr	r3, [pc, #20]	; (39b8 <I2C_FANS_CLOCK_init+0x30>)
    39a4:	4798      	blx	r3
}
    39a6:	bf00      	nop
    39a8:	bd80      	pop	{r7, pc}
    39aa:	bf00      	nop
    39ac:	40001c00 	.word	0x40001c00
    39b0:	00002a61 	.word	0x00002a61
    39b4:	40000800 	.word	0x40000800
    39b8:	00002d27 	.word	0x00002d27

000039bc <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    39bc:	b580      	push	{r7, lr}
    39be:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    39c0:	4b04      	ldr	r3, [pc, #16]	; (39d4 <I2C_FANS_init+0x18>)
    39c2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    39c4:	4904      	ldr	r1, [pc, #16]	; (39d8 <I2C_FANS_init+0x1c>)
    39c6:	4805      	ldr	r0, [pc, #20]	; (39dc <I2C_FANS_init+0x20>)
    39c8:	4b05      	ldr	r3, [pc, #20]	; (39e0 <I2C_FANS_init+0x24>)
    39ca:	4798      	blx	r3
	I2C_FANS_PORT_init();
    39cc:	4b05      	ldr	r3, [pc, #20]	; (39e4 <I2C_FANS_init+0x28>)
    39ce:	4798      	blx	r3
}
    39d0:	bf00      	nop
    39d2:	bd80      	pop	{r7, pc}
    39d4:	00003989 	.word	0x00003989
    39d8:	43000c00 	.word	0x43000c00
    39dc:	2000232c 	.word	0x2000232c
    39e0:	00004751 	.word	0x00004751
    39e4:	00003951 	.word	0x00003951

000039e8 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    39e8:	b580      	push	{r7, lr}
    39ea:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    39ec:	4808      	ldr	r0, [pc, #32]	; (3a10 <TIMER_USB_init+0x28>)
    39ee:	4b09      	ldr	r3, [pc, #36]	; (3a14 <TIMER_USB_init+0x2c>)
    39f0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    39f2:	2243      	movs	r2, #67	; 0x43
    39f4:	2109      	movs	r1, #9
    39f6:	4808      	ldr	r0, [pc, #32]	; (3a18 <TIMER_USB_init+0x30>)
    39f8:	4b08      	ldr	r3, [pc, #32]	; (3a1c <TIMER_USB_init+0x34>)
    39fa:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    39fc:	4b08      	ldr	r3, [pc, #32]	; (3a20 <TIMER_USB_init+0x38>)
    39fe:	4798      	blx	r3
    3a00:	4603      	mov	r3, r0
    3a02:	461a      	mov	r2, r3
    3a04:	4907      	ldr	r1, [pc, #28]	; (3a24 <TIMER_USB_init+0x3c>)
    3a06:	4808      	ldr	r0, [pc, #32]	; (3a28 <TIMER_USB_init+0x40>)
    3a08:	4b08      	ldr	r3, [pc, #32]	; (3a2c <TIMER_USB_init+0x44>)
    3a0a:	4798      	blx	r3
}
    3a0c:	bf00      	nop
    3a0e:	bd80      	pop	{r7, pc}
    3a10:	40000800 	.word	0x40000800
    3a14:	00002b87 	.word	0x00002b87
    3a18:	40001c00 	.word	0x40001c00
    3a1c:	00002a61 	.word	0x00002a61
    3a20:	0000a4f5 	.word	0x0000a4f5
    3a24:	40003800 	.word	0x40003800
    3a28:	20002454 	.word	0x20002454
    3a2c:	00004cf1 	.word	0x00004cf1

00003a30 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3a30:	b580      	push	{r7, lr}
    3a32:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3a34:	4808      	ldr	r0, [pc, #32]	; (3a58 <TIMER_ARINC_init+0x28>)
    3a36:	4b09      	ldr	r3, [pc, #36]	; (3a5c <TIMER_ARINC_init+0x2c>)
    3a38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a3a:	2244      	movs	r2, #68	; 0x44
    3a3c:	211a      	movs	r1, #26
    3a3e:	4808      	ldr	r0, [pc, #32]	; (3a60 <TIMER_ARINC_init+0x30>)
    3a40:	4b08      	ldr	r3, [pc, #32]	; (3a64 <TIMER_ARINC_init+0x34>)
    3a42:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3a44:	4b08      	ldr	r3, [pc, #32]	; (3a68 <TIMER_ARINC_init+0x38>)
    3a46:	4798      	blx	r3
    3a48:	4603      	mov	r3, r0
    3a4a:	461a      	mov	r2, r3
    3a4c:	4907      	ldr	r1, [pc, #28]	; (3a6c <TIMER_ARINC_init+0x3c>)
    3a4e:	4808      	ldr	r0, [pc, #32]	; (3a70 <TIMER_ARINC_init+0x40>)
    3a50:	4b08      	ldr	r3, [pc, #32]	; (3a74 <TIMER_ARINC_init+0x44>)
    3a52:	4798      	blx	r3
}
    3a54:	bf00      	nop
    3a56:	bd80      	pop	{r7, pc}
    3a58:	40000800 	.word	0x40000800
    3a5c:	00002c47 	.word	0x00002c47
    3a60:	40001c00 	.word	0x40001c00
    3a64:	00002a61 	.word	0x00002a61
    3a68:	0000a4f5 	.word	0x0000a4f5
    3a6c:	4101a000 	.word	0x4101a000
    3a70:	20002434 	.word	0x20002434
    3a74:	00004cf1 	.word	0x00004cf1

00003a78 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    3a78:	b580      	push	{r7, lr}
    3a7a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    3a7c:	4808      	ldr	r0, [pc, #32]	; (3aa0 <TIMER_MAINTENANCE_init+0x28>)
    3a7e:	4b09      	ldr	r3, [pc, #36]	; (3aa4 <TIMER_MAINTENANCE_init+0x2c>)
    3a80:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a82:	2246      	movs	r2, #70	; 0x46
    3a84:	211e      	movs	r1, #30
    3a86:	4808      	ldr	r0, [pc, #32]	; (3aa8 <TIMER_MAINTENANCE_init+0x30>)
    3a88:	4b08      	ldr	r3, [pc, #32]	; (3aac <TIMER_MAINTENANCE_init+0x34>)
    3a8a:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    3a8c:	4b08      	ldr	r3, [pc, #32]	; (3ab0 <TIMER_MAINTENANCE_init+0x38>)
    3a8e:	4798      	blx	r3
    3a90:	4603      	mov	r3, r0
    3a92:	461a      	mov	r2, r3
    3a94:	4907      	ldr	r1, [pc, #28]	; (3ab4 <TIMER_MAINTENANCE_init+0x3c>)
    3a96:	4808      	ldr	r0, [pc, #32]	; (3ab8 <TIMER_MAINTENANCE_init+0x40>)
    3a98:	4b08      	ldr	r3, [pc, #32]	; (3abc <TIMER_MAINTENANCE_init+0x44>)
    3a9a:	4798      	blx	r3
}
    3a9c:	bf00      	nop
    3a9e:	bd80      	pop	{r7, pc}
    3aa0:	40000800 	.word	0x40000800
    3aa4:	00002c67 	.word	0x00002c67
    3aa8:	40001c00 	.word	0x40001c00
    3aac:	00002a61 	.word	0x00002a61
    3ab0:	0000a4f5 	.word	0x0000a4f5
    3ab4:	42001400 	.word	0x42001400
    3ab8:	2000234c 	.word	0x2000234c
    3abc:	00004cf1 	.word	0x00004cf1

00003ac0 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3ac0:	b580      	push	{r7, lr}
    3ac2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    3ac4:	4808      	ldr	r0, [pc, #32]	; (3ae8 <TIMER_INTERFACE_init+0x28>)
    3ac6:	4b09      	ldr	r3, [pc, #36]	; (3aec <TIMER_INTERFACE_init+0x2c>)
    3ac8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3aca:	2246      	movs	r2, #70	; 0x46
    3acc:	211e      	movs	r1, #30
    3ace:	4808      	ldr	r0, [pc, #32]	; (3af0 <TIMER_INTERFACE_init+0x30>)
    3ad0:	4b08      	ldr	r3, [pc, #32]	; (3af4 <TIMER_INTERFACE_init+0x34>)
    3ad2:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    3ad4:	4b08      	ldr	r3, [pc, #32]	; (3af8 <TIMER_INTERFACE_init+0x38>)
    3ad6:	4798      	blx	r3
    3ad8:	4603      	mov	r3, r0
    3ada:	461a      	mov	r2, r3
    3adc:	4907      	ldr	r1, [pc, #28]	; (3afc <TIMER_INTERFACE_init+0x3c>)
    3ade:	4808      	ldr	r0, [pc, #32]	; (3b00 <TIMER_INTERFACE_init+0x40>)
    3ae0:	4b08      	ldr	r3, [pc, #32]	; (3b04 <TIMER_INTERFACE_init+0x44>)
    3ae2:	4798      	blx	r3
}
    3ae4:	bf00      	nop
    3ae6:	bd80      	pop	{r7, pc}
    3ae8:	40000800 	.word	0x40000800
    3aec:	00002c87 	.word	0x00002c87
    3af0:	40001c00 	.word	0x40001c00
    3af4:	00002a61 	.word	0x00002a61
    3af8:	0000a4f5 	.word	0x0000a4f5
    3afc:	42001800 	.word	0x42001800
    3b00:	20002390 	.word	0x20002390
    3b04:	00004cf1 	.word	0x00004cf1

00003b08 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    3b08:	b580      	push	{r7, lr}
    3b0a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    3b0c:	4808      	ldr	r0, [pc, #32]	; (3b30 <TIMER_EVENT_init+0x28>)
    3b0e:	4b09      	ldr	r3, [pc, #36]	; (3b34 <TIMER_EVENT_init+0x2c>)
    3b10:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b12:	2246      	movs	r2, #70	; 0x46
    3b14:	2127      	movs	r1, #39	; 0x27
    3b16:	4808      	ldr	r0, [pc, #32]	; (3b38 <TIMER_EVENT_init+0x30>)
    3b18:	4b08      	ldr	r3, [pc, #32]	; (3b3c <TIMER_EVENT_init+0x34>)
    3b1a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    3b1c:	4b08      	ldr	r3, [pc, #32]	; (3b40 <TIMER_EVENT_init+0x38>)
    3b1e:	4798      	blx	r3
    3b20:	4603      	mov	r3, r0
    3b22:	461a      	mov	r2, r3
    3b24:	4907      	ldr	r1, [pc, #28]	; (3b44 <TIMER_EVENT_init+0x3c>)
    3b26:	4808      	ldr	r0, [pc, #32]	; (3b48 <TIMER_EVENT_init+0x40>)
    3b28:	4b08      	ldr	r3, [pc, #32]	; (3b4c <TIMER_EVENT_init+0x44>)
    3b2a:	4798      	blx	r3
}
    3b2c:	bf00      	nop
    3b2e:	bd80      	pop	{r7, pc}
    3b30:	40000800 	.word	0x40000800
    3b34:	00002d47 	.word	0x00002d47
    3b38:	40001c00 	.word	0x40001c00
    3b3c:	00002a61 	.word	0x00002a61
    3b40:	0000a4f5 	.word	0x0000a4f5
    3b44:	43001400 	.word	0x43001400
    3b48:	20002370 	.word	0x20002370
    3b4c:	00004cf1 	.word	0x00004cf1

00003b50 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3b50:	b480      	push	{r7}
    3b52:	af00      	add	r7, sp, #0
}
    3b54:	bf00      	nop
    3b56:	46bd      	mov	sp, r7
    3b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b5c:	4770      	bx	lr
	...

00003b60 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    3b60:	b580      	push	{r7, lr}
    3b62:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    3b64:	4804      	ldr	r0, [pc, #16]	; (3b78 <LIVE_PULSE_CLOCK_init+0x18>)
    3b66:	4b05      	ldr	r3, [pc, #20]	; (3b7c <LIVE_PULSE_CLOCK_init+0x1c>)
    3b68:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b6a:	2240      	movs	r2, #64	; 0x40
    3b6c:	2127      	movs	r1, #39	; 0x27
    3b6e:	4804      	ldr	r0, [pc, #16]	; (3b80 <LIVE_PULSE_CLOCK_init+0x20>)
    3b70:	4b04      	ldr	r3, [pc, #16]	; (3b84 <LIVE_PULSE_CLOCK_init+0x24>)
    3b72:	4798      	blx	r3
}
    3b74:	bf00      	nop
    3b76:	bd80      	pop	{r7, pc}
    3b78:	40000800 	.word	0x40000800
    3b7c:	00002d67 	.word	0x00002d67
    3b80:	40001c00 	.word	0x40001c00
    3b84:	00002a61 	.word	0x00002a61

00003b88 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    3b88:	b580      	push	{r7, lr}
    3b8a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    3b8c:	4b06      	ldr	r3, [pc, #24]	; (3ba8 <LIVE_PULSE_init+0x20>)
    3b8e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    3b90:	4b06      	ldr	r3, [pc, #24]	; (3bac <LIVE_PULSE_init+0x24>)
    3b92:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    3b94:	4b06      	ldr	r3, [pc, #24]	; (3bb0 <LIVE_PULSE_init+0x28>)
    3b96:	4798      	blx	r3
    3b98:	4603      	mov	r3, r0
    3b9a:	461a      	mov	r2, r3
    3b9c:	4905      	ldr	r1, [pc, #20]	; (3bb4 <LIVE_PULSE_init+0x2c>)
    3b9e:	4806      	ldr	r0, [pc, #24]	; (3bb8 <LIVE_PULSE_init+0x30>)
    3ba0:	4b06      	ldr	r3, [pc, #24]	; (3bbc <LIVE_PULSE_init+0x34>)
    3ba2:	4798      	blx	r3
}
    3ba4:	bf00      	nop
    3ba6:	bd80      	pop	{r7, pc}
    3ba8:	00003b61 	.word	0x00003b61
    3bac:	00003b51 	.word	0x00003b51
    3bb0:	0000a509 	.word	0x0000a509
    3bb4:	43001800 	.word	0x43001800
    3bb8:	200023d0 	.word	0x200023d0
    3bbc:	00004851 	.word	0x00004851

00003bc0 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    3bc0:	b580      	push	{r7, lr}
    3bc2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    3bc4:	4804      	ldr	r0, [pc, #16]	; (3bd8 <TIMER_HVAC_CLOCK_init+0x18>)
    3bc6:	4b05      	ldr	r3, [pc, #20]	; (3bdc <TIMER_HVAC_CLOCK_init+0x1c>)
    3bc8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3bca:	2244      	movs	r2, #68	; 0x44
    3bcc:	2119      	movs	r1, #25
    3bce:	4804      	ldr	r0, [pc, #16]	; (3be0 <TIMER_HVAC_CLOCK_init+0x20>)
    3bd0:	4b04      	ldr	r3, [pc, #16]	; (3be4 <TIMER_HVAC_CLOCK_init+0x24>)
    3bd2:	4798      	blx	r3
}
    3bd4:	bf00      	nop
    3bd6:	bd80      	pop	{r7, pc}
    3bd8:	40000800 	.word	0x40000800
    3bdc:	00002c07 	.word	0x00002c07
    3be0:	40001c00 	.word	0x40001c00
    3be4:	00002a61 	.word	0x00002a61

00003be8 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    3be8:	b580      	push	{r7, lr}
    3bea:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    3bec:	4b05      	ldr	r3, [pc, #20]	; (3c04 <TIMER_HVAC_init+0x1c>)
    3bee:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    3bf0:	4b05      	ldr	r3, [pc, #20]	; (3c08 <TIMER_HVAC_init+0x20>)
    3bf2:	4798      	blx	r3
    3bf4:	4603      	mov	r3, r0
    3bf6:	461a      	mov	r2, r3
    3bf8:	4904      	ldr	r1, [pc, #16]	; (3c0c <TIMER_HVAC_init+0x24>)
    3bfa:	4805      	ldr	r0, [pc, #20]	; (3c10 <TIMER_HVAC_init+0x28>)
    3bfc:	4b05      	ldr	r3, [pc, #20]	; (3c14 <TIMER_HVAC_init+0x2c>)
    3bfe:	4798      	blx	r3
}
    3c00:	bf00      	nop
    3c02:	bd80      	pop	{r7, pc}
    3c04:	00003bc1 	.word	0x00003bc1
    3c08:	000098b5 	.word	0x000098b5
    3c0c:	41016000 	.word	0x41016000
    3c10:	20002474 	.word	0x20002474
    3c14:	00004cf1 	.word	0x00004cf1

00003c18 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    3c1c:	4804      	ldr	r0, [pc, #16]	; (3c30 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    3c1e:	4b05      	ldr	r3, [pc, #20]	; (3c34 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    3c20:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3c22:	2244      	movs	r2, #68	; 0x44
    3c24:	2119      	movs	r1, #25
    3c26:	4804      	ldr	r0, [pc, #16]	; (3c38 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    3c28:	4b04      	ldr	r3, [pc, #16]	; (3c3c <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    3c2a:	4798      	blx	r3
}
    3c2c:	bf00      	nop
    3c2e:	bd80      	pop	{r7, pc}
    3c30:	40000800 	.word	0x40000800
    3c34:	00002c27 	.word	0x00002c27
    3c38:	40001c00 	.word	0x40001c00
    3c3c:	00002a61 	.word	0x00002a61

00003c40 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    3c40:	b580      	push	{r7, lr}
    3c42:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    3c44:	4b05      	ldr	r3, [pc, #20]	; (3c5c <TIMER_TEMPERATURES_init+0x1c>)
    3c46:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    3c48:	4b05      	ldr	r3, [pc, #20]	; (3c60 <TIMER_TEMPERATURES_init+0x20>)
    3c4a:	4798      	blx	r3
    3c4c:	4603      	mov	r3, r0
    3c4e:	461a      	mov	r2, r3
    3c50:	4904      	ldr	r1, [pc, #16]	; (3c64 <TIMER_TEMPERATURES_init+0x24>)
    3c52:	4805      	ldr	r0, [pc, #20]	; (3c68 <TIMER_TEMPERATURES_init+0x28>)
    3c54:	4b05      	ldr	r3, [pc, #20]	; (3c6c <TIMER_TEMPERATURES_init+0x2c>)
    3c56:	4798      	blx	r3
}
    3c58:	bf00      	nop
    3c5a:	bd80      	pop	{r7, pc}
    3c5c:	00003c19 	.word	0x00003c19
    3c60:	000098b5 	.word	0x000098b5
    3c64:	41018000 	.word	0x41018000
    3c68:	200022dc 	.word	0x200022dc
    3c6c:	00004cf1 	.word	0x00004cf1

00003c70 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    3c74:	2102      	movs	r1, #2
    3c76:	2018      	movs	r0, #24
    3c78:	4b0f      	ldr	r3, [pc, #60]	; (3cb8 <CDCUSB_PORT_init+0x48>)
    3c7a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    3c7c:	2100      	movs	r1, #0
    3c7e:	2018      	movs	r0, #24
    3c80:	4b0e      	ldr	r3, [pc, #56]	; (3cbc <CDCUSB_PORT_init+0x4c>)
    3c82:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    3c84:	2100      	movs	r1, #0
    3c86:	2018      	movs	r0, #24
    3c88:	4b0d      	ldr	r3, [pc, #52]	; (3cc0 <CDCUSB_PORT_init+0x50>)
    3c8a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    3c8c:	490d      	ldr	r1, [pc, #52]	; (3cc4 <CDCUSB_PORT_init+0x54>)
    3c8e:	2018      	movs	r0, #24
    3c90:	4b0d      	ldr	r3, [pc, #52]	; (3cc8 <CDCUSB_PORT_init+0x58>)
    3c92:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    3c94:	2102      	movs	r1, #2
    3c96:	2019      	movs	r0, #25
    3c98:	4b07      	ldr	r3, [pc, #28]	; (3cb8 <CDCUSB_PORT_init+0x48>)
    3c9a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    3c9c:	2100      	movs	r1, #0
    3c9e:	2019      	movs	r0, #25
    3ca0:	4b06      	ldr	r3, [pc, #24]	; (3cbc <CDCUSB_PORT_init+0x4c>)
    3ca2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    3ca4:	2100      	movs	r1, #0
    3ca6:	2019      	movs	r0, #25
    3ca8:	4b05      	ldr	r3, [pc, #20]	; (3cc0 <CDCUSB_PORT_init+0x50>)
    3caa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    3cac:	4907      	ldr	r1, [pc, #28]	; (3ccc <CDCUSB_PORT_init+0x5c>)
    3cae:	2019      	movs	r0, #25
    3cb0:	4b05      	ldr	r3, [pc, #20]	; (3cc8 <CDCUSB_PORT_init+0x58>)
    3cb2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    3cb4:	bf00      	nop
    3cb6:	bd80      	pop	{r7, pc}
    3cb8:	000032b5 	.word	0x000032b5
    3cbc:	000032ed 	.word	0x000032ed
    3cc0:	00003261 	.word	0x00003261
    3cc4:	00180007 	.word	0x00180007
    3cc8:	00003295 	.word	0x00003295
    3ccc:	00190007 	.word	0x00190007

00003cd0 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3cd4:	2242      	movs	r2, #66	; 0x42
    3cd6:	210a      	movs	r1, #10
    3cd8:	4805      	ldr	r0, [pc, #20]	; (3cf0 <CDCUSB_CLOCK_init+0x20>)
    3cda:	4b06      	ldr	r3, [pc, #24]	; (3cf4 <CDCUSB_CLOCK_init+0x24>)
    3cdc:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    3cde:	4806      	ldr	r0, [pc, #24]	; (3cf8 <CDCUSB_CLOCK_init+0x28>)
    3ce0:	4b06      	ldr	r3, [pc, #24]	; (3cfc <CDCUSB_CLOCK_init+0x2c>)
    3ce2:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3ce4:	4804      	ldr	r0, [pc, #16]	; (3cf8 <CDCUSB_CLOCK_init+0x28>)
    3ce6:	4b06      	ldr	r3, [pc, #24]	; (3d00 <CDCUSB_CLOCK_init+0x30>)
    3ce8:	4798      	blx	r3
}
    3cea:	bf00      	nop
    3cec:	bd80      	pop	{r7, pc}
    3cee:	bf00      	nop
    3cf0:	40001c00 	.word	0x40001c00
    3cf4:	00002a61 	.word	0x00002a61
    3cf8:	40000800 	.word	0x40000800
    3cfc:	00002a87 	.word	0x00002a87
    3d00:	00002ba7 	.word	0x00002ba7

00003d04 <CDCUSB_init>:

void CDCUSB_init(void)
{
    3d04:	b580      	push	{r7, lr}
    3d06:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3d08:	4b03      	ldr	r3, [pc, #12]	; (3d18 <CDCUSB_init+0x14>)
    3d0a:	4798      	blx	r3
	usb_d_init();
    3d0c:	4b03      	ldr	r3, [pc, #12]	; (3d1c <CDCUSB_init+0x18>)
    3d0e:	4798      	blx	r3
	CDCUSB_PORT_init();
    3d10:	4b03      	ldr	r3, [pc, #12]	; (3d20 <CDCUSB_init+0x1c>)
    3d12:	4798      	blx	r3
}
    3d14:	bf00      	nop
    3d16:	bd80      	pop	{r7, pc}
    3d18:	00003cd1 	.word	0x00003cd1
    3d1c:	0000554d 	.word	0x0000554d
    3d20:	00003c71 	.word	0x00003c71

00003d24 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3d28:	4802      	ldr	r0, [pc, #8]	; (3d34 <WATCHDOG_CLOCK_init+0x10>)
    3d2a:	4b03      	ldr	r3, [pc, #12]	; (3d38 <WATCHDOG_CLOCK_init+0x14>)
    3d2c:	4798      	blx	r3
}
    3d2e:	bf00      	nop
    3d30:	bd80      	pop	{r7, pc}
    3d32:	bf00      	nop
    3d34:	40000800 	.word	0x40000800
    3d38:	00002b07 	.word	0x00002b07

00003d3c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    3d40:	4b03      	ldr	r3, [pc, #12]	; (3d50 <WATCHDOG_init+0x14>)
    3d42:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    3d44:	4903      	ldr	r1, [pc, #12]	; (3d54 <WATCHDOG_init+0x18>)
    3d46:	4804      	ldr	r0, [pc, #16]	; (3d58 <WATCHDOG_init+0x1c>)
    3d48:	4b04      	ldr	r3, [pc, #16]	; (3d5c <WATCHDOG_init+0x20>)
    3d4a:	4798      	blx	r3
}
    3d4c:	bf00      	nop
    3d4e:	bd80      	pop	{r7, pc}
    3d50:	00003d25 	.word	0x00003d25
    3d54:	40002000 	.word	0x40002000
    3d58:	200024b4 	.word	0x200024b4
    3d5c:	00003335 	.word	0x00003335

00003d60 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    3d60:	b580      	push	{r7, lr}
    3d62:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    3d64:	4904      	ldr	r1, [pc, #16]	; (3d78 <CAN_CCU_PORT_init+0x18>)
    3d66:	202d      	movs	r0, #45	; 0x2d
    3d68:	4b04      	ldr	r3, [pc, #16]	; (3d7c <CAN_CCU_PORT_init+0x1c>)
    3d6a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3d6c:	4904      	ldr	r1, [pc, #16]	; (3d80 <CAN_CCU_PORT_init+0x20>)
    3d6e:	202c      	movs	r0, #44	; 0x2c
    3d70:	4b02      	ldr	r3, [pc, #8]	; (3d7c <CAN_CCU_PORT_init+0x1c>)
    3d72:	4798      	blx	r3
}
    3d74:	bf00      	nop
    3d76:	bd80      	pop	{r7, pc}
    3d78:	002d0007 	.word	0x002d0007
    3d7c:	00003295 	.word	0x00003295
    3d80:	002c0007 	.word	0x002c0007

00003d84 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    3d84:	b580      	push	{r7, lr}
    3d86:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3d88:	4807      	ldr	r0, [pc, #28]	; (3da8 <CAN_CCU_init+0x24>)
    3d8a:	4b08      	ldr	r3, [pc, #32]	; (3dac <CAN_CCU_init+0x28>)
    3d8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3d8e:	2243      	movs	r2, #67	; 0x43
    3d90:	211c      	movs	r1, #28
    3d92:	4807      	ldr	r0, [pc, #28]	; (3db0 <CAN_CCU_init+0x2c>)
    3d94:	4b07      	ldr	r3, [pc, #28]	; (3db4 <CAN_CCU_init+0x30>)
    3d96:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3d98:	4907      	ldr	r1, [pc, #28]	; (3db8 <CAN_CCU_init+0x34>)
    3d9a:	4808      	ldr	r0, [pc, #32]	; (3dbc <CAN_CCU_init+0x38>)
    3d9c:	4b08      	ldr	r3, [pc, #32]	; (3dc0 <CAN_CCU_init+0x3c>)
    3d9e:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3da0:	4b08      	ldr	r3, [pc, #32]	; (3dc4 <CAN_CCU_init+0x40>)
    3da2:	4798      	blx	r3
}
    3da4:	bf00      	nop
    3da6:	bd80      	pop	{r7, pc}
    3da8:	40000800 	.word	0x40000800
    3dac:	00002ac7 	.word	0x00002ac7
    3db0:	40001c00 	.word	0x40001c00
    3db4:	00002a61 	.word	0x00002a61
    3db8:	42000400 	.word	0x42000400
    3dbc:	2000240c 	.word	0x2000240c
    3dc0:	000042d5 	.word	0x000042d5
    3dc4:	00003d61 	.word	0x00003d61

00003dc8 <system_init>:

void system_init(void)
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	af00      	add	r7, sp, #0
	init_mcu();
    3dcc:	4b5e      	ldr	r3, [pc, #376]	; (3f48 <system_init+0x180>)
    3dce:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    3dd0:	2100      	movs	r1, #0
    3dd2:	2007      	movs	r0, #7
    3dd4:	4b5d      	ldr	r3, [pc, #372]	; (3f4c <system_init+0x184>)
    3dd6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    3dd8:	2102      	movs	r1, #2
    3dda:	2007      	movs	r0, #7
    3ddc:	4b5c      	ldr	r3, [pc, #368]	; (3f50 <system_init+0x188>)
    3dde:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    3de0:	f04f 31ff 	mov.w	r1, #4294967295
    3de4:	2007      	movs	r0, #7
    3de6:	4b5b      	ldr	r3, [pc, #364]	; (3f54 <system_init+0x18c>)
    3de8:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    3dea:	2101      	movs	r1, #1
    3dec:	200f      	movs	r0, #15
    3dee:	4b57      	ldr	r3, [pc, #348]	; (3f4c <system_init+0x184>)
    3df0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    3df2:	2102      	movs	r1, #2
    3df4:	200f      	movs	r0, #15
    3df6:	4b56      	ldr	r3, [pc, #344]	; (3f50 <system_init+0x188>)
    3df8:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    3dfa:	f04f 31ff 	mov.w	r1, #4294967295
    3dfe:	200f      	movs	r0, #15
    3e00:	4b54      	ldr	r3, [pc, #336]	; (3f54 <system_init+0x18c>)
    3e02:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    3e04:	2101      	movs	r1, #1
    3e06:	2013      	movs	r0, #19
    3e08:	4b50      	ldr	r3, [pc, #320]	; (3f4c <system_init+0x184>)
    3e0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    3e0c:	2102      	movs	r1, #2
    3e0e:	2013      	movs	r0, #19
    3e10:	4b4f      	ldr	r3, [pc, #316]	; (3f50 <system_init+0x188>)
    3e12:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    3e14:	f04f 31ff 	mov.w	r1, #4294967295
    3e18:	2013      	movs	r0, #19
    3e1a:	4b4e      	ldr	r3, [pc, #312]	; (3f54 <system_init+0x18c>)
    3e1c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    3e1e:	2101      	movs	r1, #1
    3e20:	201b      	movs	r0, #27
    3e22:	4b4a      	ldr	r3, [pc, #296]	; (3f4c <system_init+0x184>)
    3e24:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    3e26:	2102      	movs	r1, #2
    3e28:	201b      	movs	r0, #27
    3e2a:	4b49      	ldr	r3, [pc, #292]	; (3f50 <system_init+0x188>)
    3e2c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    3e2e:	f04f 31ff 	mov.w	r1, #4294967295
    3e32:	201b      	movs	r0, #27
    3e34:	4b47      	ldr	r3, [pc, #284]	; (3f54 <system_init+0x18c>)
    3e36:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    3e38:	2101      	movs	r1, #1
    3e3a:	2027      	movs	r0, #39	; 0x27
    3e3c:	4b43      	ldr	r3, [pc, #268]	; (3f4c <system_init+0x184>)
    3e3e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    3e40:	2102      	movs	r1, #2
    3e42:	2027      	movs	r0, #39	; 0x27
    3e44:	4b42      	ldr	r3, [pc, #264]	; (3f50 <system_init+0x188>)
    3e46:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    3e48:	f04f 31ff 	mov.w	r1, #4294967295
    3e4c:	2027      	movs	r0, #39	; 0x27
    3e4e:	4b41      	ldr	r3, [pc, #260]	; (3f54 <system_init+0x18c>)
    3e50:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    3e52:	2101      	movs	r1, #1
    3e54:	203d      	movs	r0, #61	; 0x3d
    3e56:	4b3d      	ldr	r3, [pc, #244]	; (3f4c <system_init+0x184>)
    3e58:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    3e5a:	2102      	movs	r1, #2
    3e5c:	203d      	movs	r0, #61	; 0x3d
    3e5e:	4b3c      	ldr	r3, [pc, #240]	; (3f50 <system_init+0x188>)
    3e60:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    3e62:	f04f 31ff 	mov.w	r1, #4294967295
    3e66:	203d      	movs	r0, #61	; 0x3d
    3e68:	4b3a      	ldr	r3, [pc, #232]	; (3f54 <system_init+0x18c>)
    3e6a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    3e6c:	2101      	movs	r1, #1
    3e6e:	203f      	movs	r0, #63	; 0x3f
    3e70:	4b37      	ldr	r3, [pc, #220]	; (3f50 <system_init+0x188>)
    3e72:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    3e74:	2101      	movs	r1, #1
    3e76:	203f      	movs	r0, #63	; 0x3f
    3e78:	4b37      	ldr	r3, [pc, #220]	; (3f58 <system_init+0x190>)
    3e7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    3e7c:	f04f 31ff 	mov.w	r1, #4294967295
    3e80:	203f      	movs	r0, #63	; 0x3f
    3e82:	4b34      	ldr	r3, [pc, #208]	; (3f54 <system_init+0x18c>)
    3e84:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    3e86:	2100      	movs	r1, #0
    3e88:	204d      	movs	r0, #77	; 0x4d
    3e8a:	4b30      	ldr	r3, [pc, #192]	; (3f4c <system_init+0x184>)
    3e8c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    3e8e:	2102      	movs	r1, #2
    3e90:	204d      	movs	r0, #77	; 0x4d
    3e92:	4b2f      	ldr	r3, [pc, #188]	; (3f50 <system_init+0x188>)
    3e94:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    3e96:	f04f 31ff 	mov.w	r1, #4294967295
    3e9a:	204d      	movs	r0, #77	; 0x4d
    3e9c:	4b2d      	ldr	r3, [pc, #180]	; (3f54 <system_init+0x18c>)
    3e9e:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    3ea0:	2101      	movs	r1, #1
    3ea2:	204e      	movs	r0, #78	; 0x4e
    3ea4:	4b29      	ldr	r3, [pc, #164]	; (3f4c <system_init+0x184>)
    3ea6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    3ea8:	2102      	movs	r1, #2
    3eaa:	204e      	movs	r0, #78	; 0x4e
    3eac:	4b28      	ldr	r3, [pc, #160]	; (3f50 <system_init+0x188>)
    3eae:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    3eb0:	f04f 31ff 	mov.w	r1, #4294967295
    3eb4:	204e      	movs	r0, #78	; 0x4e
    3eb6:	4b27      	ldr	r3, [pc, #156]	; (3f54 <system_init+0x18c>)
    3eb8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    3eba:	2100      	movs	r1, #0
    3ebc:	204f      	movs	r0, #79	; 0x4f
    3ebe:	4b23      	ldr	r3, [pc, #140]	; (3f4c <system_init+0x184>)
    3ec0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    3ec2:	2102      	movs	r1, #2
    3ec4:	204f      	movs	r0, #79	; 0x4f
    3ec6:	4b22      	ldr	r3, [pc, #136]	; (3f50 <system_init+0x188>)
    3ec8:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    3eca:	f04f 31ff 	mov.w	r1, #4294967295
    3ece:	204f      	movs	r0, #79	; 0x4f
    3ed0:	4b20      	ldr	r3, [pc, #128]	; (3f54 <system_init+0x18c>)
    3ed2:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3ed4:	2100      	movs	r1, #0
    3ed6:	2052      	movs	r0, #82	; 0x52
    3ed8:	4b1c      	ldr	r3, [pc, #112]	; (3f4c <system_init+0x184>)
    3eda:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3edc:	2102      	movs	r1, #2
    3ede:	2052      	movs	r0, #82	; 0x52
    3ee0:	4b1b      	ldr	r3, [pc, #108]	; (3f50 <system_init+0x188>)
    3ee2:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3ee4:	f04f 31ff 	mov.w	r1, #4294967295
    3ee8:	2052      	movs	r0, #82	; 0x52
    3eea:	4b1a      	ldr	r3, [pc, #104]	; (3f54 <system_init+0x18c>)
    3eec:	4798      	blx	r3

	CRC_CALC_init();
    3eee:	4b1b      	ldr	r3, [pc, #108]	; (3f5c <system_init+0x194>)
    3ef0:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3ef2:	4b1b      	ldr	r3, [pc, #108]	; (3f60 <system_init+0x198>)
    3ef4:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3ef6:	4b1b      	ldr	r3, [pc, #108]	; (3f64 <system_init+0x19c>)
    3ef8:	4798      	blx	r3

	QSPI_N25Q256_init();
    3efa:	4b1b      	ldr	r3, [pc, #108]	; (3f68 <system_init+0x1a0>)
    3efc:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3efe:	4b1b      	ldr	r3, [pc, #108]	; (3f6c <system_init+0x1a4>)
    3f00:	4798      	blx	r3

	I2C_HEATERS_init();
    3f02:	4b1b      	ldr	r3, [pc, #108]	; (3f70 <system_init+0x1a8>)
    3f04:	4798      	blx	r3

	SPI_TEMP_init();
    3f06:	4b1b      	ldr	r3, [pc, #108]	; (3f74 <system_init+0x1ac>)
    3f08:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    3f0a:	4b1b      	ldr	r3, [pc, #108]	; (3f78 <system_init+0x1b0>)
    3f0c:	4798      	blx	r3

	SPI_HI3593_init();
    3f0e:	4b1b      	ldr	r3, [pc, #108]	; (3f7c <system_init+0x1b4>)
    3f10:	4798      	blx	r3

	I2C_FANS_init();
    3f12:	4b1b      	ldr	r3, [pc, #108]	; (3f80 <system_init+0x1b8>)
    3f14:	4798      	blx	r3

	TIMER_USB_init();
    3f16:	4b1b      	ldr	r3, [pc, #108]	; (3f84 <system_init+0x1bc>)
    3f18:	4798      	blx	r3
	TIMER_ARINC_init();
    3f1a:	4b1b      	ldr	r3, [pc, #108]	; (3f88 <system_init+0x1c0>)
    3f1c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    3f1e:	4b1b      	ldr	r3, [pc, #108]	; (3f8c <system_init+0x1c4>)
    3f20:	4798      	blx	r3
	TIMER_INTERFACE_init();
    3f22:	4b1b      	ldr	r3, [pc, #108]	; (3f90 <system_init+0x1c8>)
    3f24:	4798      	blx	r3
	TIMER_EVENT_init();
    3f26:	4b1b      	ldr	r3, [pc, #108]	; (3f94 <system_init+0x1cc>)
    3f28:	4798      	blx	r3
	LIVE_PULSE_init();
    3f2a:	4b1b      	ldr	r3, [pc, #108]	; (3f98 <system_init+0x1d0>)
    3f2c:	4798      	blx	r3

	TIMER_HVAC_init();
    3f2e:	4b1b      	ldr	r3, [pc, #108]	; (3f9c <system_init+0x1d4>)
    3f30:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    3f32:	4b1b      	ldr	r3, [pc, #108]	; (3fa0 <system_init+0x1d8>)
    3f34:	4798      	blx	r3

	CDCUSB_init();
    3f36:	4b1b      	ldr	r3, [pc, #108]	; (3fa4 <system_init+0x1dc>)
    3f38:	4798      	blx	r3

	WATCHDOG_init();
    3f3a:	4b1b      	ldr	r3, [pc, #108]	; (3fa8 <system_init+0x1e0>)
    3f3c:	4798      	blx	r3
	CAN_CCU_init();
    3f3e:	4b1b      	ldr	r3, [pc, #108]	; (3fac <system_init+0x1e4>)
    3f40:	4798      	blx	r3
}
    3f42:	bf00      	nop
    3f44:	bd80      	pop	{r7, pc}
    3f46:	bf00      	nop
    3f48:	00003325 	.word	0x00003325
    3f4c:	000032ed 	.word	0x000032ed
    3f50:	000032b5 	.word	0x000032b5
    3f54:	00003295 	.word	0x00003295
    3f58:	00003261 	.word	0x00003261
    3f5c:	00003385 	.word	0x00003385
    3f60:	000033b1 	.word	0x000033b1
    3f64:	000034d9 	.word	0x000034d9
    3f68:	00003621 	.word	0x00003621
    3f6c:	00003665 	.word	0x00003665
    3f70:	000036f5 	.word	0x000036f5
    3f74:	000037c1 	.word	0x000037c1
    3f78:	00003859 	.word	0x00003859
    3f7c:	00003925 	.word	0x00003925
    3f80:	000039bd 	.word	0x000039bd
    3f84:	000039e9 	.word	0x000039e9
    3f88:	00003a31 	.word	0x00003a31
    3f8c:	00003a79 	.word	0x00003a79
    3f90:	00003ac1 	.word	0x00003ac1
    3f94:	00003b09 	.word	0x00003b09
    3f98:	00003b89 	.word	0x00003b89
    3f9c:	00003be9 	.word	0x00003be9
    3fa0:	00003c41 	.word	0x00003c41
    3fa4:	00003d05 	.word	0x00003d05
    3fa8:	00003d3d 	.word	0x00003d3d
    3fac:	00003d85 	.word	0x00003d85

00003fb0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    3fb0:	b480      	push	{r7}
    3fb2:	b085      	sub	sp, #20
    3fb4:	af00      	add	r7, sp, #0
    3fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3fb8:	f3ef 8310 	mrs	r3, PRIMASK
    3fbc:	60fb      	str	r3, [r7, #12]
  return(result);
    3fbe:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3fc4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3fc6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    3fca:	bf00      	nop
    3fcc:	3714      	adds	r7, #20
    3fce:	46bd      	mov	sp, r7
    3fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd4:	4770      	bx	lr

00003fd6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    3fd6:	b480      	push	{r7}
    3fd8:	b085      	sub	sp, #20
    3fda:	af00      	add	r7, sp, #0
    3fdc:	6078      	str	r0, [r7, #4]
    3fde:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	681b      	ldr	r3, [r3, #0]
    3fe6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3fe8:	68fb      	ldr	r3, [r7, #12]
    3fea:	f383 8810 	msr	PRIMASK, r3
}
    3fee:	bf00      	nop
    3ff0:	3714      	adds	r7, #20
    3ff2:	46bd      	mov	sp, r7
    3ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff8:	4770      	bx	lr

00003ffa <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    3ffa:	b480      	push	{r7}
    3ffc:	b083      	sub	sp, #12
    3ffe:	af00      	add	r7, sp, #0
    4000:	4603      	mov	r3, r0
    4002:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    4004:	88fb      	ldrh	r3, [r7, #6]
    4006:	f003 0303 	and.w	r3, r3, #3
    400a:	2b00      	cmp	r3, #0
    400c:	d001      	beq.n	4012 <leap_year+0x18>
		return false;
    400e:	2300      	movs	r3, #0
    4010:	e000      	b.n	4014 <leap_year+0x1a>
	} else {
		return true;
    4012:	2301      	movs	r3, #1
	}
}
    4014:	4618      	mov	r0, r3
    4016:	370c      	adds	r7, #12
    4018:	46bd      	mov	sp, r7
    401a:	f85d 7b04 	ldr.w	r7, [sp], #4
    401e:	4770      	bx	lr

00004020 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    4020:	b580      	push	{r7, lr}
    4022:	b084      	sub	sp, #16
    4024:	af00      	add	r7, sp, #0
    4026:	6078      	str	r0, [r7, #4]
    4028:	460b      	mov	r3, r1
    402a:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    402c:	2300      	movs	r3, #0
    402e:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    4030:	687b      	ldr	r3, [r7, #4]
    4032:	b29b      	uxth	r3, r3
    4034:	4618      	mov	r0, r3
    4036:	4b2f      	ldr	r3, [pc, #188]	; (40f4 <get_secs_in_month+0xd4>)
    4038:	4798      	blx	r3
    403a:	4603      	mov	r3, r0
    403c:	2b00      	cmp	r3, #0
    403e:	d028      	beq.n	4092 <get_secs_in_month+0x72>
		switch (month) {
    4040:	78fb      	ldrb	r3, [r7, #3]
    4042:	3b01      	subs	r3, #1
    4044:	2b0b      	cmp	r3, #11
    4046:	d84c      	bhi.n	40e2 <get_secs_in_month+0xc2>
    4048:	a201      	add	r2, pc, #4	; (adr r2, 4050 <get_secs_in_month+0x30>)
    404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    404e:	bf00      	nop
    4050:	00004081 	.word	0x00004081
    4054:	00004087 	.word	0x00004087
    4058:	00004081 	.word	0x00004081
    405c:	0000408d 	.word	0x0000408d
    4060:	00004081 	.word	0x00004081
    4064:	0000408d 	.word	0x0000408d
    4068:	00004081 	.word	0x00004081
    406c:	00004081 	.word	0x00004081
    4070:	0000408d 	.word	0x0000408d
    4074:	00004081 	.word	0x00004081
    4078:	0000408d 	.word	0x0000408d
    407c:	00004081 	.word	0x00004081
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4080:	4b1d      	ldr	r3, [pc, #116]	; (40f8 <get_secs_in_month+0xd8>)
    4082:	60fb      	str	r3, [r7, #12]
			break;
    4084:	e030      	b.n	40e8 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    4086:	4b1d      	ldr	r3, [pc, #116]	; (40fc <get_secs_in_month+0xdc>)
    4088:	60fb      	str	r3, [r7, #12]
			break;
    408a:	e02d      	b.n	40e8 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    408c:	4b1c      	ldr	r3, [pc, #112]	; (4100 <get_secs_in_month+0xe0>)
    408e:	60fb      	str	r3, [r7, #12]
			break;
    4090:	e02a      	b.n	40e8 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    4092:	78fb      	ldrb	r3, [r7, #3]
    4094:	3b01      	subs	r3, #1
    4096:	2b0b      	cmp	r3, #11
    4098:	d825      	bhi.n	40e6 <get_secs_in_month+0xc6>
    409a:	a201      	add	r2, pc, #4	; (adr r2, 40a0 <get_secs_in_month+0x80>)
    409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    40a0:	000040d1 	.word	0x000040d1
    40a4:	000040d7 	.word	0x000040d7
    40a8:	000040d1 	.word	0x000040d1
    40ac:	000040dd 	.word	0x000040dd
    40b0:	000040d1 	.word	0x000040d1
    40b4:	000040dd 	.word	0x000040dd
    40b8:	000040d1 	.word	0x000040d1
    40bc:	000040d1 	.word	0x000040d1
    40c0:	000040dd 	.word	0x000040dd
    40c4:	000040d1 	.word	0x000040d1
    40c8:	000040dd 	.word	0x000040dd
    40cc:	000040d1 	.word	0x000040d1
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    40d0:	4b09      	ldr	r3, [pc, #36]	; (40f8 <get_secs_in_month+0xd8>)
    40d2:	60fb      	str	r3, [r7, #12]
			break;
    40d4:	e008      	b.n	40e8 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    40d6:	4b0b      	ldr	r3, [pc, #44]	; (4104 <get_secs_in_month+0xe4>)
    40d8:	60fb      	str	r3, [r7, #12]
			break;
    40da:	e005      	b.n	40e8 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <get_secs_in_month+0xe0>)
    40de:	60fb      	str	r3, [r7, #12]
			break;
    40e0:	e002      	b.n	40e8 <get_secs_in_month+0xc8>
			break;
    40e2:	bf00      	nop
    40e4:	e000      	b.n	40e8 <get_secs_in_month+0xc8>
		default:
			break;
    40e6:	bf00      	nop
		}
	}

	return sec_in_month;
    40e8:	68fb      	ldr	r3, [r7, #12]
}
    40ea:	4618      	mov	r0, r3
    40ec:	3710      	adds	r7, #16
    40ee:	46bd      	mov	sp, r7
    40f0:	bd80      	pop	{r7, pc}
    40f2:	bf00      	nop
    40f4:	00003ffb 	.word	0x00003ffb
    40f8:	0028de80 	.word	0x0028de80
    40fc:	00263b80 	.word	0x00263b80
    4100:	00278d00 	.word	0x00278d00
    4104:	0024ea00 	.word	0x0024ea00

00004108 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    4108:	b580      	push	{r7, lr}
    410a:	b08a      	sub	sp, #40	; 0x28
    410c:	af00      	add	r7, sp, #0
    410e:	60f8      	str	r0, [r7, #12]
    4110:	60b9      	str	r1, [r7, #8]
    4112:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    4114:	68fb      	ldr	r3, [r7, #12]
    4116:	699b      	ldr	r3, [r3, #24]
    4118:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    411a:	2301      	movs	r3, #1
    411c:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    411e:	2301      	movs	r3, #1
    4120:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    4122:	2300      	movs	r3, #0
    4124:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    4126:	2300      	movs	r3, #0
    4128:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    412a:	68bb      	ldr	r3, [r7, #8]
    412c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    412e:	6a3b      	ldr	r3, [r7, #32]
    4130:	b29b      	uxth	r3, r3
    4132:	4618      	mov	r0, r3
    4134:	4b32      	ldr	r3, [pc, #200]	; (4200 <convert_timestamp_to_datetime+0xf8>)
    4136:	4798      	blx	r3
    4138:	4603      	mov	r3, r0
    413a:	2b00      	cmp	r3, #0
    413c:	d001      	beq.n	4142 <convert_timestamp_to_datetime+0x3a>
    413e:	4b31      	ldr	r3, [pc, #196]	; (4204 <convert_timestamp_to_datetime+0xfc>)
    4140:	e000      	b.n	4144 <convert_timestamp_to_datetime+0x3c>
    4142:	4b31      	ldr	r3, [pc, #196]	; (4208 <convert_timestamp_to_datetime+0x100>)
    4144:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    4146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4148:	69bb      	ldr	r3, [r7, #24]
    414a:	429a      	cmp	r2, r3
    414c:	d307      	bcc.n	415e <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4150:	69bb      	ldr	r3, [r7, #24]
    4152:	1ad3      	subs	r3, r2, r3
    4154:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    4156:	6a3b      	ldr	r3, [r7, #32]
    4158:	3301      	adds	r3, #1
    415a:	623b      	str	r3, [r7, #32]
    415c:	e7e7      	b.n	412e <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    415e:	7ffb      	ldrb	r3, [r7, #31]
    4160:	4619      	mov	r1, r3
    4162:	6a38      	ldr	r0, [r7, #32]
    4164:	4b29      	ldr	r3, [pc, #164]	; (420c <convert_timestamp_to_datetime+0x104>)
    4166:	4798      	blx	r3
    4168:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    416c:	697b      	ldr	r3, [r7, #20]
    416e:	429a      	cmp	r2, r3
    4170:	d307      	bcc.n	4182 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    4172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4174:	697b      	ldr	r3, [r7, #20]
    4176:	1ad3      	subs	r3, r2, r3
    4178:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    417a:	7ffb      	ldrb	r3, [r7, #31]
    417c:	3301      	adds	r3, #1
    417e:	77fb      	strb	r3, [r7, #31]
    4180:	e7ed      	b.n	415e <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    4182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4184:	4a22      	ldr	r2, [pc, #136]	; (4210 <convert_timestamp_to_datetime+0x108>)
    4186:	4293      	cmp	r3, r2
    4188:	d909      	bls.n	419e <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    418c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    4190:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    4194:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    4196:	7fbb      	ldrb	r3, [r7, #30]
    4198:	3301      	adds	r3, #1
    419a:	77bb      	strb	r3, [r7, #30]
    419c:	e7f1      	b.n	4182 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41a0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    41a4:	d307      	bcc.n	41b6 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    41a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41a8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    41ac:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    41ae:	7f7b      	ldrb	r3, [r7, #29]
    41b0:	3301      	adds	r3, #1
    41b2:	777b      	strb	r3, [r7, #29]
    41b4:	e7f3      	b.n	419e <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    41b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41b8:	2b3b      	cmp	r3, #59	; 0x3b
    41ba:	d906      	bls.n	41ca <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    41bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41be:	3b3c      	subs	r3, #60	; 0x3c
    41c0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    41c2:	7f3b      	ldrb	r3, [r7, #28]
    41c4:	3301      	adds	r3, #1
    41c6:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    41c8:	e7f5      	b.n	41b6 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    41ca:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    41cc:	6a3b      	ldr	r3, [r7, #32]
    41ce:	b29a      	uxth	r2, r3
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	7ffa      	ldrb	r2, [r7, #31]
    41d8:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	7fba      	ldrb	r2, [r7, #30]
    41de:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	7f7a      	ldrb	r2, [r7, #29]
    41e4:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	7f3a      	ldrb	r2, [r7, #28]
    41ea:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    41ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41ee:	b2da      	uxtb	r2, r3
    41f0:	687b      	ldr	r3, [r7, #4]
    41f2:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    41f4:	2300      	movs	r3, #0
}
    41f6:	4618      	mov	r0, r3
    41f8:	3728      	adds	r7, #40	; 0x28
    41fa:	46bd      	mov	sp, r7
    41fc:	bd80      	pop	{r7, pc}
    41fe:	bf00      	nop
    4200:	00003ffb 	.word	0x00003ffb
    4204:	01e28500 	.word	0x01e28500
    4208:	01e13380 	.word	0x01e13380
    420c:	00004021 	.word	0x00004021
    4210:	0001517f 	.word	0x0001517f

00004214 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    4214:	b580      	push	{r7, lr}
    4216:	b084      	sub	sp, #16
    4218:	af00      	add	r7, sp, #0
    421a:	6078      	str	r0, [r7, #4]
    421c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    421e:	2300      	movs	r3, #0
    4220:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	2b00      	cmp	r3, #0
    4226:	bf14      	ite	ne
    4228:	2301      	movne	r3, #1
    422a:	2300      	moveq	r3, #0
    422c:	b2db      	uxtb	r3, r3
    422e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    4232:	4911      	ldr	r1, [pc, #68]	; (4278 <calendar_init+0x64>)
    4234:	4618      	mov	r0, r3
    4236:	4b11      	ldr	r3, [pc, #68]	; (427c <calendar_init+0x68>)
    4238:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	681a      	ldr	r2, [r3, #0]
    423e:	683b      	ldr	r3, [r7, #0]
    4240:	429a      	cmp	r2, r3
    4242:	d101      	bne.n	4248 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    4244:	2300      	movs	r3, #0
    4246:	e013      	b.n	4270 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	681b      	ldr	r3, [r3, #0]
    424c:	2b00      	cmp	r3, #0
    424e:	d002      	beq.n	4256 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    4250:	f06f 0311 	mvn.w	r3, #17
    4254:	e00c      	b.n	4270 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	683a      	ldr	r2, [r7, #0]
    425a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	4618      	mov	r0, r3
    4260:	4b07      	ldr	r3, [pc, #28]	; (4280 <calendar_init+0x6c>)
    4262:	4798      	blx	r3
    4264:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	f240 72b2 	movw	r2, #1970	; 0x7b2
    426c:	619a      	str	r2, [r3, #24]

	return ret;
    426e:	68fb      	ldr	r3, [r7, #12]
}
    4270:	4618      	mov	r0, r3
    4272:	3710      	adds	r7, #16
    4274:	46bd      	mov	sp, r7
    4276:	bd80      	pop	{r7, pc}
    4278:	00010004 	.word	0x00010004
    427c:	00005af5 	.word	0x00005af5
    4280:	00007ec1 	.word	0x00007ec1

00004284 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    4284:	b580      	push	{r7, lr}
    4286:	b084      	sub	sp, #16
    4288:	af00      	add	r7, sp, #0
    428a:	6078      	str	r0, [r7, #4]
    428c:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	2b00      	cmp	r3, #0
    4292:	bf14      	ite	ne
    4294:	2301      	movne	r3, #1
    4296:	2300      	moveq	r3, #0
    4298:	b2db      	uxtb	r3, r3
    429a:	f240 223b 	movw	r2, #571	; 0x23b
    429e:	4909      	ldr	r1, [pc, #36]	; (42c4 <calendar_get_date_time+0x40>)
    42a0:	4618      	mov	r0, r3
    42a2:	4b09      	ldr	r3, [pc, #36]	; (42c8 <calendar_get_date_time+0x44>)
    42a4:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	4618      	mov	r0, r3
    42aa:	4b08      	ldr	r3, [pc, #32]	; (42cc <calendar_get_date_time+0x48>)
    42ac:	4798      	blx	r3
    42ae:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    42b0:	683a      	ldr	r2, [r7, #0]
    42b2:	68f9      	ldr	r1, [r7, #12]
    42b4:	6878      	ldr	r0, [r7, #4]
    42b6:	4b06      	ldr	r3, [pc, #24]	; (42d0 <calendar_get_date_time+0x4c>)
    42b8:	4798      	blx	r3

	return ERR_NONE;
    42ba:	2300      	movs	r3, #0
}
    42bc:	4618      	mov	r0, r3
    42be:	3710      	adds	r7, #16
    42c0:	46bd      	mov	sp, r7
    42c2:	bd80      	pop	{r7, pc}
    42c4:	00010004 	.word	0x00010004
    42c8:	00005af5 	.word	0x00005af5
    42cc:	00007f79 	.word	0x00007f79
    42d0:	00004109 	.word	0x00004109

000042d4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b084      	sub	sp, #16
    42d8:	af00      	add	r7, sp, #0
    42da:	6078      	str	r0, [r7, #4]
    42dc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    42de:	687b      	ldr	r3, [r7, #4]
    42e0:	2b00      	cmp	r3, #0
    42e2:	d004      	beq.n	42ee <can_async_init+0x1a>
    42e4:	683b      	ldr	r3, [r7, #0]
    42e6:	2b00      	cmp	r3, #0
    42e8:	d001      	beq.n	42ee <can_async_init+0x1a>
    42ea:	2301      	movs	r3, #1
    42ec:	e000      	b.n	42f0 <can_async_init+0x1c>
    42ee:	2300      	movs	r3, #0
    42f0:	f003 0301 	and.w	r3, r3, #1
    42f4:	b2db      	uxtb	r3, r3
    42f6:	2241      	movs	r2, #65	; 0x41
    42f8:	490e      	ldr	r1, [pc, #56]	; (4334 <can_async_init+0x60>)
    42fa:	4618      	mov	r0, r3
    42fc:	4b0e      	ldr	r3, [pc, #56]	; (4338 <can_async_init+0x64>)
    42fe:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    4300:	687b      	ldr	r3, [r7, #4]
    4302:	6839      	ldr	r1, [r7, #0]
    4304:	4618      	mov	r0, r3
    4306:	4b0d      	ldr	r3, [pc, #52]	; (433c <can_async_init+0x68>)
    4308:	4798      	blx	r3
    430a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    430c:	68fb      	ldr	r3, [r7, #12]
    430e:	2b00      	cmp	r3, #0
    4310:	d001      	beq.n	4316 <can_async_init+0x42>
		return rc;
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	e009      	b.n	432a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	4a09      	ldr	r2, [pc, #36]	; (4340 <can_async_init+0x6c>)
    431a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	4a09      	ldr	r2, [pc, #36]	; (4344 <can_async_init+0x70>)
    4320:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	4a08      	ldr	r2, [pc, #32]	; (4348 <can_async_init+0x74>)
    4326:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4328:	2300      	movs	r3, #0
}
    432a:	4618      	mov	r0, r3
    432c:	3710      	adds	r7, #16
    432e:	46bd      	mov	sp, r7
    4330:	bd80      	pop	{r7, pc}
    4332:	bf00      	nop
    4334:	00010020 	.word	0x00010020
    4338:	00005af5 	.word	0x00005af5
    433c:	00006051 	.word	0x00006051
    4340:	0000434d 	.word	0x0000434d
    4344:	00004371 	.word	0x00004371
    4348:	00004395 	.word	0x00004395

0000434c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    434c:	b580      	push	{r7, lr}
    434e:	b084      	sub	sp, #16
    4350:	af00      	add	r7, sp, #0
    4352:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	69db      	ldr	r3, [r3, #28]
    435c:	2b00      	cmp	r3, #0
    435e:	d003      	beq.n	4368 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	69db      	ldr	r3, [r3, #28]
    4364:	68f8      	ldr	r0, [r7, #12]
    4366:	4798      	blx	r3
	}
}
    4368:	bf00      	nop
    436a:	3710      	adds	r7, #16
    436c:	46bd      	mov	sp, r7
    436e:	bd80      	pop	{r7, pc}

00004370 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    4370:	b580      	push	{r7, lr}
    4372:	b084      	sub	sp, #16
    4374:	af00      	add	r7, sp, #0
    4376:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    437c:	68fb      	ldr	r3, [r7, #12]
    437e:	6a1b      	ldr	r3, [r3, #32]
    4380:	2b00      	cmp	r3, #0
    4382:	d003      	beq.n	438c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	6a1b      	ldr	r3, [r3, #32]
    4388:	68f8      	ldr	r0, [r7, #12]
    438a:	4798      	blx	r3
	}
}
    438c:	bf00      	nop
    438e:	3710      	adds	r7, #16
    4390:	46bd      	mov	sp, r7
    4392:	bd80      	pop	{r7, pc}

00004394 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    4394:	b580      	push	{r7, lr}
    4396:	b084      	sub	sp, #16
    4398:	af00      	add	r7, sp, #0
    439a:	6078      	str	r0, [r7, #4]
    439c:	460b      	mov	r3, r1
    439e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43a8:	2b00      	cmp	r3, #0
    43aa:	d005      	beq.n	43b8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    43ac:	68fb      	ldr	r3, [r7, #12]
    43ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43b0:	78fa      	ldrb	r2, [r7, #3]
    43b2:	4611      	mov	r1, r2
    43b4:	68f8      	ldr	r0, [r7, #12]
    43b6:	4798      	blx	r3
	}
}
    43b8:	bf00      	nop
    43ba:	3710      	adds	r7, #16
    43bc:	46bd      	mov	sp, r7
    43be:	bd80      	pop	{r7, pc}

000043c0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    43c0:	b580      	push	{r7, lr}
    43c2:	b082      	sub	sp, #8
    43c4:	af00      	add	r7, sp, #0
    43c6:	6078      	str	r0, [r7, #4]
    43c8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	2b00      	cmp	r3, #0
    43ce:	d004      	beq.n	43da <crc_sync_init+0x1a>
    43d0:	683b      	ldr	r3, [r7, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d001      	beq.n	43da <crc_sync_init+0x1a>
    43d6:	2301      	movs	r3, #1
    43d8:	e000      	b.n	43dc <crc_sync_init+0x1c>
    43da:	2300      	movs	r3, #0
    43dc:	f003 0301 	and.w	r3, r3, #1
    43e0:	b2db      	uxtb	r3, r3
    43e2:	222b      	movs	r2, #43	; 0x2b
    43e4:	4906      	ldr	r1, [pc, #24]	; (4400 <crc_sync_init+0x40>)
    43e6:	4618      	mov	r0, r3
    43e8:	4b06      	ldr	r3, [pc, #24]	; (4404 <crc_sync_init+0x44>)
    43ea:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	6839      	ldr	r1, [r7, #0]
    43f0:	4618      	mov	r0, r3
    43f2:	4b05      	ldr	r3, [pc, #20]	; (4408 <crc_sync_init+0x48>)
    43f4:	4798      	blx	r3
    43f6:	4603      	mov	r3, r0
}
    43f8:	4618      	mov	r0, r3
    43fa:	3708      	adds	r7, #8
    43fc:	46bd      	mov	sp, r7
    43fe:	bd80      	pop	{r7, pc}
    4400:	0001003c 	.word	0x0001003c
    4404:	00005af5 	.word	0x00005af5
    4408:	00006759 	.word	0x00006759

0000440c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    440c:	b590      	push	{r4, r7, lr}
    440e:	b083      	sub	sp, #12
    4410:	af00      	add	r7, sp, #0
    4412:	4603      	mov	r3, r0
    4414:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4416:	4b07      	ldr	r3, [pc, #28]	; (4434 <delay_us+0x28>)
    4418:	681c      	ldr	r4, [r3, #0]
    441a:	88fb      	ldrh	r3, [r7, #6]
    441c:	4618      	mov	r0, r3
    441e:	4b06      	ldr	r3, [pc, #24]	; (4438 <delay_us+0x2c>)
    4420:	4798      	blx	r3
    4422:	4603      	mov	r3, r0
    4424:	4619      	mov	r1, r3
    4426:	4620      	mov	r0, r4
    4428:	4b04      	ldr	r3, [pc, #16]	; (443c <delay_us+0x30>)
    442a:	4798      	blx	r3
}
    442c:	bf00      	nop
    442e:	370c      	adds	r7, #12
    4430:	46bd      	mov	sp, r7
    4432:	bd90      	pop	{r4, r7, pc}
    4434:	20001cc8 	.word	0x20001cc8
    4438:	000064a9 	.word	0x000064a9
    443c:	00006641 	.word	0x00006641

00004440 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4440:	b590      	push	{r4, r7, lr}
    4442:	b083      	sub	sp, #12
    4444:	af00      	add	r7, sp, #0
    4446:	4603      	mov	r3, r0
    4448:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    444a:	4b07      	ldr	r3, [pc, #28]	; (4468 <delay_ms+0x28>)
    444c:	681c      	ldr	r4, [r3, #0]
    444e:	88fb      	ldrh	r3, [r7, #6]
    4450:	4618      	mov	r0, r3
    4452:	4b06      	ldr	r3, [pc, #24]	; (446c <delay_ms+0x2c>)
    4454:	4798      	blx	r3
    4456:	4603      	mov	r3, r0
    4458:	4619      	mov	r1, r3
    445a:	4620      	mov	r0, r4
    445c:	4b04      	ldr	r3, [pc, #16]	; (4470 <delay_ms+0x30>)
    445e:	4798      	blx	r3
}
    4460:	bf00      	nop
    4462:	370c      	adds	r7, #12
    4464:	46bd      	mov	sp, r7
    4466:	bd90      	pop	{r4, r7, pc}
    4468:	20001cc8 	.word	0x20001cc8
    446c:	00006615 	.word	0x00006615
    4470:	00006641 	.word	0x00006641

00004474 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4474:	b580      	push	{r7, lr}
    4476:	af00      	add	r7, sp, #0
	return _event_system_init();
    4478:	4b02      	ldr	r3, [pc, #8]	; (4484 <event_system_init+0x10>)
    447a:	4798      	blx	r3
    447c:	4603      	mov	r3, r0
}
    447e:	4618      	mov	r0, r3
    4480:	bd80      	pop	{r7, pc}
    4482:	bf00      	nop
    4484:	00006f15 	.word	0x00006f15

00004488 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    4488:	b580      	push	{r7, lr}
    448a:	b082      	sub	sp, #8
    448c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    448e:	2300      	movs	r3, #0
    4490:	80fb      	strh	r3, [r7, #6]
    4492:	e00e      	b.n	44b2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    4494:	88fb      	ldrh	r3, [r7, #6]
    4496:	4a0c      	ldr	r2, [pc, #48]	; (44c8 <ext_irq_init+0x40>)
    4498:	00db      	lsls	r3, r3, #3
    449a:	4413      	add	r3, r2
    449c:	f04f 32ff 	mov.w	r2, #4294967295
    44a0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    44a2:	88fb      	ldrh	r3, [r7, #6]
    44a4:	4a08      	ldr	r2, [pc, #32]	; (44c8 <ext_irq_init+0x40>)
    44a6:	2100      	movs	r1, #0
    44a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    44ac:	88fb      	ldrh	r3, [r7, #6]
    44ae:	3301      	adds	r3, #1
    44b0:	80fb      	strh	r3, [r7, #6]
    44b2:	88fb      	ldrh	r3, [r7, #6]
    44b4:	2b08      	cmp	r3, #8
    44b6:	d9ed      	bls.n	4494 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    44b8:	4804      	ldr	r0, [pc, #16]	; (44cc <ext_irq_init+0x44>)
    44ba:	4b05      	ldr	r3, [pc, #20]	; (44d0 <ext_irq_init+0x48>)
    44bc:	4798      	blx	r3
    44be:	4603      	mov	r3, r0
}
    44c0:	4618      	mov	r0, r3
    44c2:	3708      	adds	r7, #8
    44c4:	46bd      	mov	sp, r7
    44c6:	bd80      	pop	{r7, pc}
    44c8:	20001ccc 	.word	0x20001ccc
    44cc:	0000462d 	.word	0x0000462d
    44d0:	00006a99 	.word	0x00006a99

000044d4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    44d4:	b580      	push	{r7, lr}
    44d6:	b086      	sub	sp, #24
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
    44dc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    44de:	2300      	movs	r3, #0
    44e0:	75fb      	strb	r3, [r7, #23]
    44e2:	2300      	movs	r3, #0
    44e4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    44e6:	2300      	movs	r3, #0
    44e8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    44ea:	e012      	b.n	4512 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    44ec:	7dfb      	ldrb	r3, [r7, #23]
    44ee:	4a4d      	ldr	r2, [pc, #308]	; (4624 <ext_irq_register+0x150>)
    44f0:	00db      	lsls	r3, r3, #3
    44f2:	4413      	add	r3, r2
    44f4:	685a      	ldr	r2, [r3, #4]
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	429a      	cmp	r2, r3
    44fa:	d107      	bne.n	450c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    44fc:	7dfb      	ldrb	r3, [r7, #23]
    44fe:	4949      	ldr	r1, [pc, #292]	; (4624 <ext_irq_register+0x150>)
    4500:	683a      	ldr	r2, [r7, #0]
    4502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    4506:	2301      	movs	r3, #1
    4508:	757b      	strb	r3, [r7, #21]
			break;
    450a:	e005      	b.n	4518 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    450c:	7dfb      	ldrb	r3, [r7, #23]
    450e:	3301      	adds	r3, #1
    4510:	75fb      	strb	r3, [r7, #23]
    4512:	7dfb      	ldrb	r3, [r7, #23]
    4514:	2b08      	cmp	r3, #8
    4516:	d9e9      	bls.n	44ec <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    4518:	683b      	ldr	r3, [r7, #0]
    451a:	2b00      	cmp	r3, #0
    451c:	d10e      	bne.n	453c <ext_irq_register+0x68>
		if (!found) {
    451e:	7d7b      	ldrb	r3, [r7, #21]
    4520:	f083 0301 	eor.w	r3, r3, #1
    4524:	b2db      	uxtb	r3, r3
    4526:	2b00      	cmp	r3, #0
    4528:	d002      	beq.n	4530 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    452a:	f06f 030c 	mvn.w	r3, #12
    452e:	e074      	b.n	461a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    4530:	2100      	movs	r1, #0
    4532:	6878      	ldr	r0, [r7, #4]
    4534:	4b3c      	ldr	r3, [pc, #240]	; (4628 <ext_irq_register+0x154>)
    4536:	4798      	blx	r3
    4538:	4603      	mov	r3, r0
    453a:	e06e      	b.n	461a <ext_irq_register+0x146>
	}

	if (!found) {
    453c:	7d7b      	ldrb	r3, [r7, #21]
    453e:	f083 0301 	eor.w	r3, r3, #1
    4542:	b2db      	uxtb	r3, r3
    4544:	2b00      	cmp	r3, #0
    4546:	d05a      	beq.n	45fe <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4548:	2300      	movs	r3, #0
    454a:	75fb      	strb	r3, [r7, #23]
    454c:	e016      	b.n	457c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    454e:	7dfb      	ldrb	r3, [r7, #23]
    4550:	4a34      	ldr	r2, [pc, #208]	; (4624 <ext_irq_register+0x150>)
    4552:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4556:	2b00      	cmp	r3, #0
    4558:	d10d      	bne.n	4576 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    455a:	7dfb      	ldrb	r3, [r7, #23]
    455c:	4931      	ldr	r1, [pc, #196]	; (4624 <ext_irq_register+0x150>)
    455e:	683a      	ldr	r2, [r7, #0]
    4560:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    4564:	7dfb      	ldrb	r3, [r7, #23]
    4566:	4a2f      	ldr	r2, [pc, #188]	; (4624 <ext_irq_register+0x150>)
    4568:	00db      	lsls	r3, r3, #3
    456a:	4413      	add	r3, r2
    456c:	687a      	ldr	r2, [r7, #4]
    456e:	605a      	str	r2, [r3, #4]
				found           = true;
    4570:	2301      	movs	r3, #1
    4572:	757b      	strb	r3, [r7, #21]
				break;
    4574:	e005      	b.n	4582 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4576:	7dfb      	ldrb	r3, [r7, #23]
    4578:	3301      	adds	r3, #1
    457a:	75fb      	strb	r3, [r7, #23]
    457c:	7dfb      	ldrb	r3, [r7, #23]
    457e:	2b08      	cmp	r3, #8
    4580:	d9e5      	bls.n	454e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4582:	e036      	b.n	45f2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    4584:	7dfb      	ldrb	r3, [r7, #23]
    4586:	4a27      	ldr	r2, [pc, #156]	; (4624 <ext_irq_register+0x150>)
    4588:	00db      	lsls	r3, r3, #3
    458a:	4413      	add	r3, r2
    458c:	685a      	ldr	r2, [r3, #4]
    458e:	7dbb      	ldrb	r3, [r7, #22]
    4590:	4924      	ldr	r1, [pc, #144]	; (4624 <ext_irq_register+0x150>)
    4592:	00db      	lsls	r3, r3, #3
    4594:	440b      	add	r3, r1
    4596:	685b      	ldr	r3, [r3, #4]
    4598:	429a      	cmp	r2, r3
    459a:	d227      	bcs.n	45ec <ext_irq_register+0x118>
    459c:	7dbb      	ldrb	r3, [r7, #22]
    459e:	4a21      	ldr	r2, [pc, #132]	; (4624 <ext_irq_register+0x150>)
    45a0:	00db      	lsls	r3, r3, #3
    45a2:	4413      	add	r3, r2
    45a4:	685b      	ldr	r3, [r3, #4]
    45a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    45aa:	d01f      	beq.n	45ec <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    45ac:	7dbb      	ldrb	r3, [r7, #22]
    45ae:	491d      	ldr	r1, [pc, #116]	; (4624 <ext_irq_register+0x150>)
    45b0:	f107 020c 	add.w	r2, r7, #12
    45b4:	00db      	lsls	r3, r3, #3
    45b6:	440b      	add	r3, r1
    45b8:	e893 0003 	ldmia.w	r3, {r0, r1}
    45bc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    45c0:	7dbb      	ldrb	r3, [r7, #22]
    45c2:	7dfa      	ldrb	r2, [r7, #23]
    45c4:	4817      	ldr	r0, [pc, #92]	; (4624 <ext_irq_register+0x150>)
    45c6:	4917      	ldr	r1, [pc, #92]	; (4624 <ext_irq_register+0x150>)
    45c8:	00db      	lsls	r3, r3, #3
    45ca:	4403      	add	r3, r0
    45cc:	00d2      	lsls	r2, r2, #3
    45ce:	440a      	add	r2, r1
    45d0:	e892 0003 	ldmia.w	r2, {r0, r1}
    45d4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    45d8:	7dfb      	ldrb	r3, [r7, #23]
    45da:	4a12      	ldr	r2, [pc, #72]	; (4624 <ext_irq_register+0x150>)
    45dc:	00db      	lsls	r3, r3, #3
    45de:	4413      	add	r3, r2
    45e0:	f107 020c 	add.w	r2, r7, #12
    45e4:	e892 0003 	ldmia.w	r2, {r0, r1}
    45e8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    45ec:	7dbb      	ldrb	r3, [r7, #22]
    45ee:	3301      	adds	r3, #1
    45f0:	75bb      	strb	r3, [r7, #22]
    45f2:	7dbb      	ldrb	r3, [r7, #22]
    45f4:	2b08      	cmp	r3, #8
    45f6:	d802      	bhi.n	45fe <ext_irq_register+0x12a>
    45f8:	7dfb      	ldrb	r3, [r7, #23]
    45fa:	2b08      	cmp	r3, #8
    45fc:	d9c2      	bls.n	4584 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    45fe:	7d7b      	ldrb	r3, [r7, #21]
    4600:	f083 0301 	eor.w	r3, r3, #1
    4604:	b2db      	uxtb	r3, r3
    4606:	2b00      	cmp	r3, #0
    4608:	d002      	beq.n	4610 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    460a:	f06f 030c 	mvn.w	r3, #12
    460e:	e004      	b.n	461a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    4610:	2101      	movs	r1, #1
    4612:	6878      	ldr	r0, [r7, #4]
    4614:	4b04      	ldr	r3, [pc, #16]	; (4628 <ext_irq_register+0x154>)
    4616:	4798      	blx	r3
    4618:	4603      	mov	r3, r0
}
    461a:	4618      	mov	r0, r3
    461c:	3718      	adds	r7, #24
    461e:	46bd      	mov	sp, r7
    4620:	bd80      	pop	{r7, pc}
    4622:	bf00      	nop
    4624:	20001ccc 	.word	0x20001ccc
    4628:	00006c2d 	.word	0x00006c2d

0000462c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    462c:	b580      	push	{r7, lr}
    462e:	b084      	sub	sp, #16
    4630:	af00      	add	r7, sp, #0
    4632:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4634:	2300      	movs	r3, #0
    4636:	73fb      	strb	r3, [r7, #15]
    4638:	2309      	movs	r3, #9
    463a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    463c:	e02a      	b.n	4694 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    463e:	7bba      	ldrb	r2, [r7, #14]
    4640:	7bfb      	ldrb	r3, [r7, #15]
    4642:	4413      	add	r3, r2
    4644:	105b      	asrs	r3, r3, #1
    4646:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    4648:	7b7b      	ldrb	r3, [r7, #13]
    464a:	2b08      	cmp	r3, #8
    464c:	d827      	bhi.n	469e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    464e:	7b7b      	ldrb	r3, [r7, #13]
    4650:	4a16      	ldr	r2, [pc, #88]	; (46ac <process_ext_irq+0x80>)
    4652:	00db      	lsls	r3, r3, #3
    4654:	4413      	add	r3, r2
    4656:	685a      	ldr	r2, [r3, #4]
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	429a      	cmp	r2, r3
    465c:	d10b      	bne.n	4676 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    465e:	7b7b      	ldrb	r3, [r7, #13]
    4660:	4a12      	ldr	r2, [pc, #72]	; (46ac <process_ext_irq+0x80>)
    4662:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4666:	2b00      	cmp	r3, #0
    4668:	d01b      	beq.n	46a2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    466a:	7b7b      	ldrb	r3, [r7, #13]
    466c:	4a0f      	ldr	r2, [pc, #60]	; (46ac <process_ext_irq+0x80>)
    466e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4672:	4798      	blx	r3
			}
			return;
    4674:	e015      	b.n	46a2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    4676:	7b7b      	ldrb	r3, [r7, #13]
    4678:	4a0c      	ldr	r2, [pc, #48]	; (46ac <process_ext_irq+0x80>)
    467a:	00db      	lsls	r3, r3, #3
    467c:	4413      	add	r3, r2
    467e:	685a      	ldr	r2, [r3, #4]
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	429a      	cmp	r2, r3
    4684:	d203      	bcs.n	468e <process_ext_irq+0x62>
			lower = middle + 1;
    4686:	7b7b      	ldrb	r3, [r7, #13]
    4688:	3301      	adds	r3, #1
    468a:	73fb      	strb	r3, [r7, #15]
    468c:	e002      	b.n	4694 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    468e:	7b7b      	ldrb	r3, [r7, #13]
    4690:	3b01      	subs	r3, #1
    4692:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    4694:	7bba      	ldrb	r2, [r7, #14]
    4696:	7bfb      	ldrb	r3, [r7, #15]
    4698:	429a      	cmp	r2, r3
    469a:	d2d0      	bcs.n	463e <process_ext_irq+0x12>
    469c:	e002      	b.n	46a4 <process_ext_irq+0x78>
			return;
    469e:	bf00      	nop
    46a0:	e000      	b.n	46a4 <process_ext_irq+0x78>
			return;
    46a2:	bf00      	nop
		}
	}
}
    46a4:	3710      	adds	r7, #16
    46a6:	46bd      	mov	sp, r7
    46a8:	bd80      	pop	{r7, pc}
    46aa:	bf00      	nop
    46ac:	20001ccc 	.word	0x20001ccc

000046b0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    46b0:	b580      	push	{r7, lr}
    46b2:	b08a      	sub	sp, #40	; 0x28
    46b4:	af00      	add	r7, sp, #0
    46b6:	60f8      	str	r0, [r7, #12]
    46b8:	60b9      	str	r1, [r7, #8]
    46ba:	4613      	mov	r3, r2
    46bc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    46be:	68fb      	ldr	r3, [r7, #12]
    46c0:	3b14      	subs	r3, #20
    46c2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    46c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46c6:	8b9b      	ldrh	r3, [r3, #28]
    46c8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    46ca:	88fb      	ldrh	r3, [r7, #6]
    46cc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    46ce:	f248 0301 	movw	r3, #32769	; 0x8001
    46d2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    46d4:	68bb      	ldr	r3, [r7, #8]
    46d6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    46d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46da:	f107 0214 	add.w	r2, r7, #20
    46de:	4611      	mov	r1, r2
    46e0:	4618      	mov	r0, r3
    46e2:	4b06      	ldr	r3, [pc, #24]	; (46fc <i2c_m_sync_read+0x4c>)
    46e4:	4798      	blx	r3
    46e6:	6238      	str	r0, [r7, #32]

	if (ret) {
    46e8:	6a3b      	ldr	r3, [r7, #32]
    46ea:	2b00      	cmp	r3, #0
    46ec:	d001      	beq.n	46f2 <i2c_m_sync_read+0x42>
		return ret;
    46ee:	6a3b      	ldr	r3, [r7, #32]
    46f0:	e000      	b.n	46f4 <i2c_m_sync_read+0x44>
	}

	return n;
    46f2:	88fb      	ldrh	r3, [r7, #6]
}
    46f4:	4618      	mov	r0, r3
    46f6:	3728      	adds	r7, #40	; 0x28
    46f8:	46bd      	mov	sp, r7
    46fa:	bd80      	pop	{r7, pc}
    46fc:	00008ad9 	.word	0x00008ad9

00004700 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    4700:	b580      	push	{r7, lr}
    4702:	b08a      	sub	sp, #40	; 0x28
    4704:	af00      	add	r7, sp, #0
    4706:	60f8      	str	r0, [r7, #12]
    4708:	60b9      	str	r1, [r7, #8]
    470a:	4613      	mov	r3, r2
    470c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    470e:	68fb      	ldr	r3, [r7, #12]
    4710:	3b14      	subs	r3, #20
    4712:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    4714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4716:	8b9b      	ldrh	r3, [r3, #28]
    4718:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    471a:	88fb      	ldrh	r3, [r7, #6]
    471c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    471e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4722:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    4724:	68bb      	ldr	r3, [r7, #8]
    4726:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    4728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    472a:	f107 0214 	add.w	r2, r7, #20
    472e:	4611      	mov	r1, r2
    4730:	4618      	mov	r0, r3
    4732:	4b06      	ldr	r3, [pc, #24]	; (474c <i2c_m_sync_write+0x4c>)
    4734:	4798      	blx	r3
    4736:	6238      	str	r0, [r7, #32]

	if (ret) {
    4738:	6a3b      	ldr	r3, [r7, #32]
    473a:	2b00      	cmp	r3, #0
    473c:	d001      	beq.n	4742 <i2c_m_sync_write+0x42>
		return ret;
    473e:	6a3b      	ldr	r3, [r7, #32]
    4740:	e000      	b.n	4744 <i2c_m_sync_write+0x44>
	}

	return n;
    4742:	88fb      	ldrh	r3, [r7, #6]
}
    4744:	4618      	mov	r0, r3
    4746:	3728      	adds	r7, #40	; 0x28
    4748:	46bd      	mov	sp, r7
    474a:	bd80      	pop	{r7, pc}
    474c:	00008ad9 	.word	0x00008ad9

00004750 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    4750:	b580      	push	{r7, lr}
    4752:	b084      	sub	sp, #16
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
    4758:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	2b00      	cmp	r3, #0
    475e:	bf14      	ite	ne
    4760:	2301      	movne	r3, #1
    4762:	2300      	moveq	r3, #0
    4764:	b2db      	uxtb	r3, r3
    4766:	225e      	movs	r2, #94	; 0x5e
    4768:	490c      	ldr	r1, [pc, #48]	; (479c <i2c_m_sync_init+0x4c>)
    476a:	4618      	mov	r0, r3
    476c:	4b0c      	ldr	r3, [pc, #48]	; (47a0 <i2c_m_sync_init+0x50>)
    476e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	6839      	ldr	r1, [r7, #0]
    4774:	4618      	mov	r0, r3
    4776:	4b0b      	ldr	r3, [pc, #44]	; (47a4 <i2c_m_sync_init+0x54>)
    4778:	4798      	blx	r3
    477a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    477c:	68fb      	ldr	r3, [r7, #12]
    477e:	2b00      	cmp	r3, #0
    4780:	d001      	beq.n	4786 <i2c_m_sync_init+0x36>
		return init_status;
    4782:	68fb      	ldr	r3, [r7, #12]
    4784:	e006      	b.n	4794 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    4786:	687b      	ldr	r3, [r7, #4]
    4788:	4a07      	ldr	r2, [pc, #28]	; (47a8 <i2c_m_sync_init+0x58>)
    478a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	4a07      	ldr	r2, [pc, #28]	; (47ac <i2c_m_sync_init+0x5c>)
    4790:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    4792:	2300      	movs	r3, #0
}
    4794:	4618      	mov	r0, r3
    4796:	3710      	adds	r7, #16
    4798:	46bd      	mov	sp, r7
    479a:	bd80      	pop	{r7, pc}
    479c:	00010058 	.word	0x00010058
    47a0:	00005af5 	.word	0x00005af5
    47a4:	00008915 	.word	0x00008915
    47a8:	000046b1 	.word	0x000046b1
    47ac:	00004701 	.word	0x00004701

000047b0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    47b0:	b580      	push	{r7, lr}
    47b2:	b084      	sub	sp, #16
    47b4:	af00      	add	r7, sp, #0
    47b6:	60f8      	str	r0, [r7, #12]
    47b8:	60b9      	str	r1, [r7, #8]
    47ba:	4613      	mov	r3, r2
    47bc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    47be:	68fb      	ldr	r3, [r7, #12]
    47c0:	2b00      	cmp	r3, #0
    47c2:	d004      	beq.n	47ce <io_write+0x1e>
    47c4:	68bb      	ldr	r3, [r7, #8]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d001      	beq.n	47ce <io_write+0x1e>
    47ca:	2301      	movs	r3, #1
    47cc:	e000      	b.n	47d0 <io_write+0x20>
    47ce:	2300      	movs	r3, #0
    47d0:	f003 0301 	and.w	r3, r3, #1
    47d4:	b2db      	uxtb	r3, r3
    47d6:	2234      	movs	r2, #52	; 0x34
    47d8:	4907      	ldr	r1, [pc, #28]	; (47f8 <io_write+0x48>)
    47da:	4618      	mov	r0, r3
    47dc:	4b07      	ldr	r3, [pc, #28]	; (47fc <io_write+0x4c>)
    47de:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    47e0:	68fb      	ldr	r3, [r7, #12]
    47e2:	681b      	ldr	r3, [r3, #0]
    47e4:	88fa      	ldrh	r2, [r7, #6]
    47e6:	68b9      	ldr	r1, [r7, #8]
    47e8:	68f8      	ldr	r0, [r7, #12]
    47ea:	4798      	blx	r3
    47ec:	4603      	mov	r3, r0
}
    47ee:	4618      	mov	r0, r3
    47f0:	3710      	adds	r7, #16
    47f2:	46bd      	mov	sp, r7
    47f4:	bd80      	pop	{r7, pc}
    47f6:	bf00      	nop
    47f8:	00010074 	.word	0x00010074
    47fc:	00005af5 	.word	0x00005af5

00004800 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4800:	b580      	push	{r7, lr}
    4802:	b084      	sub	sp, #16
    4804:	af00      	add	r7, sp, #0
    4806:	60f8      	str	r0, [r7, #12]
    4808:	60b9      	str	r1, [r7, #8]
    480a:	4613      	mov	r3, r2
    480c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    480e:	68fb      	ldr	r3, [r7, #12]
    4810:	2b00      	cmp	r3, #0
    4812:	d004      	beq.n	481e <io_read+0x1e>
    4814:	68bb      	ldr	r3, [r7, #8]
    4816:	2b00      	cmp	r3, #0
    4818:	d001      	beq.n	481e <io_read+0x1e>
    481a:	2301      	movs	r3, #1
    481c:	e000      	b.n	4820 <io_read+0x20>
    481e:	2300      	movs	r3, #0
    4820:	f003 0301 	and.w	r3, r3, #1
    4824:	b2db      	uxtb	r3, r3
    4826:	223d      	movs	r2, #61	; 0x3d
    4828:	4907      	ldr	r1, [pc, #28]	; (4848 <io_read+0x48>)
    482a:	4618      	mov	r0, r3
    482c:	4b07      	ldr	r3, [pc, #28]	; (484c <io_read+0x4c>)
    482e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4830:	68fb      	ldr	r3, [r7, #12]
    4832:	685b      	ldr	r3, [r3, #4]
    4834:	88fa      	ldrh	r2, [r7, #6]
    4836:	68b9      	ldr	r1, [r7, #8]
    4838:	68f8      	ldr	r0, [r7, #12]
    483a:	4798      	blx	r3
    483c:	4603      	mov	r3, r0
}
    483e:	4618      	mov	r0, r3
    4840:	3710      	adds	r7, #16
    4842:	46bd      	mov	sp, r7
    4844:	bd80      	pop	{r7, pc}
    4846:	bf00      	nop
    4848:	00010074 	.word	0x00010074
    484c:	00005af5 	.word	0x00005af5

00004850 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4850:	b580      	push	{r7, lr}
    4852:	b084      	sub	sp, #16
    4854:	af00      	add	r7, sp, #0
    4856:	60f8      	str	r0, [r7, #12]
    4858:	60b9      	str	r1, [r7, #8]
    485a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	2b00      	cmp	r3, #0
    4860:	d004      	beq.n	486c <pwm_init+0x1c>
    4862:	68bb      	ldr	r3, [r7, #8]
    4864:	2b00      	cmp	r3, #0
    4866:	d001      	beq.n	486c <pwm_init+0x1c>
    4868:	2301      	movs	r3, #1
    486a:	e000      	b.n	486e <pwm_init+0x1e>
    486c:	2300      	movs	r3, #0
    486e:	f003 0301 	and.w	r3, r3, #1
    4872:	b2db      	uxtb	r3, r3
    4874:	2233      	movs	r2, #51	; 0x33
    4876:	490a      	ldr	r1, [pc, #40]	; (48a0 <pwm_init+0x50>)
    4878:	4618      	mov	r0, r3
    487a:	4b0a      	ldr	r3, [pc, #40]	; (48a4 <pwm_init+0x54>)
    487c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    487e:	68fb      	ldr	r3, [r7, #12]
    4880:	68b9      	ldr	r1, [r7, #8]
    4882:	4618      	mov	r0, r3
    4884:	4b08      	ldr	r3, [pc, #32]	; (48a8 <pwm_init+0x58>)
    4886:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	4a08      	ldr	r2, [pc, #32]	; (48ac <pwm_init+0x5c>)
    488c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    488e:	68fb      	ldr	r3, [r7, #12]
    4890:	4a07      	ldr	r2, [pc, #28]	; (48b0 <pwm_init+0x60>)
    4892:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    4894:	2300      	movs	r3, #0
}
    4896:	4618      	mov	r0, r3
    4898:	3710      	adds	r7, #16
    489a:	46bd      	mov	sp, r7
    489c:	bd80      	pop	{r7, pc}
    489e:	bf00      	nop
    48a0:	00010088 	.word	0x00010088
    48a4:	00005af5 	.word	0x00005af5
    48a8:	0000a0e5 	.word	0x0000a0e5
    48ac:	00004909 	.word	0x00004909
    48b0:	0000492d 	.word	0x0000492d

000048b4 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    48b4:	b580      	push	{r7, lr}
    48b6:	b082      	sub	sp, #8
    48b8:	af00      	add	r7, sp, #0
    48ba:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	2b00      	cmp	r3, #0
    48c0:	bf14      	ite	ne
    48c2:	2301      	movne	r3, #1
    48c4:	2300      	moveq	r3, #0
    48c6:	b2db      	uxtb	r3, r3
    48c8:	224a      	movs	r2, #74	; 0x4a
    48ca:	490b      	ldr	r1, [pc, #44]	; (48f8 <pwm_enable+0x44>)
    48cc:	4618      	mov	r0, r3
    48ce:	4b0b      	ldr	r3, [pc, #44]	; (48fc <pwm_enable+0x48>)
    48d0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    48d2:	687b      	ldr	r3, [r7, #4]
    48d4:	4618      	mov	r0, r3
    48d6:	4b0a      	ldr	r3, [pc, #40]	; (4900 <pwm_enable+0x4c>)
    48d8:	4798      	blx	r3
    48da:	4603      	mov	r3, r0
    48dc:	2b00      	cmp	r3, #0
    48de:	d002      	beq.n	48e6 <pwm_enable+0x32>
		return ERR_DENIED;
    48e0:	f06f 0310 	mvn.w	r3, #16
    48e4:	e004      	b.n	48f0 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    48e6:	687b      	ldr	r3, [r7, #4]
    48e8:	4618      	mov	r0, r3
    48ea:	4b06      	ldr	r3, [pc, #24]	; (4904 <pwm_enable+0x50>)
    48ec:	4798      	blx	r3

	return ERR_NONE;
    48ee:	2300      	movs	r3, #0
}
    48f0:	4618      	mov	r0, r3
    48f2:	3708      	adds	r7, #8
    48f4:	46bd      	mov	sp, r7
    48f6:	bd80      	pop	{r7, pc}
    48f8:	00010088 	.word	0x00010088
    48fc:	00005af5 	.word	0x00005af5
    4900:	0000a4d5 	.word	0x0000a4d5
    4904:	0000a391 	.word	0x0000a391

00004908 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    4908:	b580      	push	{r7, lr}
    490a:	b084      	sub	sp, #16
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    4914:	68fb      	ldr	r3, [r7, #12]
    4916:	695b      	ldr	r3, [r3, #20]
    4918:	2b00      	cmp	r3, #0
    491a:	d003      	beq.n	4924 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	695b      	ldr	r3, [r3, #20]
    4920:	68f8      	ldr	r0, [r7, #12]
    4922:	4798      	blx	r3
	}
}
    4924:	bf00      	nop
    4926:	3710      	adds	r7, #16
    4928:	46bd      	mov	sp, r7
    492a:	bd80      	pop	{r7, pc}

0000492c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    492c:	b580      	push	{r7, lr}
    492e:	b084      	sub	sp, #16
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    4938:	68fb      	ldr	r3, [r7, #12]
    493a:	699b      	ldr	r3, [r3, #24]
    493c:	2b00      	cmp	r3, #0
    493e:	d003      	beq.n	4948 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    4940:	68fb      	ldr	r3, [r7, #12]
    4942:	699b      	ldr	r3, [r3, #24]
    4944:	68f8      	ldr	r0, [r7, #12]
    4946:	4798      	blx	r3
	}
}
    4948:	bf00      	nop
    494a:	3710      	adds	r7, #16
    494c:	46bd      	mov	sp, r7
    494e:	bd80      	pop	{r7, pc}

00004950 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    4950:	b580      	push	{r7, lr}
    4952:	b082      	sub	sp, #8
    4954:	af00      	add	r7, sp, #0
    4956:	6078      	str	r0, [r7, #4]
    4958:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	2b00      	cmp	r3, #0
    495e:	d004      	beq.n	496a <qspi_sync_init+0x1a>
    4960:	683b      	ldr	r3, [r7, #0]
    4962:	2b00      	cmp	r3, #0
    4964:	d001      	beq.n	496a <qspi_sync_init+0x1a>
    4966:	2301      	movs	r3, #1
    4968:	e000      	b.n	496c <qspi_sync_init+0x1c>
    496a:	2300      	movs	r3, #0
    496c:	f003 0301 	and.w	r3, r3, #1
    4970:	b2db      	uxtb	r3, r3
    4972:	2231      	movs	r2, #49	; 0x31
    4974:	4906      	ldr	r1, [pc, #24]	; (4990 <qspi_sync_init+0x40>)
    4976:	4618      	mov	r0, r3
    4978:	4b06      	ldr	r3, [pc, #24]	; (4994 <qspi_sync_init+0x44>)
    497a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	6839      	ldr	r1, [r7, #0]
    4980:	4618      	mov	r0, r3
    4982:	4b05      	ldr	r3, [pc, #20]	; (4998 <qspi_sync_init+0x48>)
    4984:	4798      	blx	r3
    4986:	4603      	mov	r3, r0
}
    4988:	4618      	mov	r0, r3
    498a:	3708      	adds	r7, #8
    498c:	46bd      	mov	sp, r7
    498e:	bd80      	pop	{r7, pc}
    4990:	000100a0 	.word	0x000100a0
    4994:	00005af5 	.word	0x00005af5
    4998:	00007add 	.word	0x00007add

0000499c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    499c:	b580      	push	{r7, lr}
    499e:	b082      	sub	sp, #8
    49a0:	af00      	add	r7, sp, #0
    49a2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	2b00      	cmp	r3, #0
    49a8:	bf14      	ite	ne
    49aa:	2301      	movne	r3, #1
    49ac:	2300      	moveq	r3, #0
    49ae:	b2db      	uxtb	r3, r3
    49b0:	223f      	movs	r2, #63	; 0x3f
    49b2:	4906      	ldr	r1, [pc, #24]	; (49cc <qspi_sync_enable+0x30>)
    49b4:	4618      	mov	r0, r3
    49b6:	4b06      	ldr	r3, [pc, #24]	; (49d0 <qspi_sync_enable+0x34>)
    49b8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    49ba:	687b      	ldr	r3, [r7, #4]
    49bc:	4618      	mov	r0, r3
    49be:	4b05      	ldr	r3, [pc, #20]	; (49d4 <qspi_sync_enable+0x38>)
    49c0:	4798      	blx	r3
    49c2:	4603      	mov	r3, r0
}
    49c4:	4618      	mov	r0, r3
    49c6:	3708      	adds	r7, #8
    49c8:	46bd      	mov	sp, r7
    49ca:	bd80      	pop	{r7, pc}
    49cc:	000100a0 	.word	0x000100a0
    49d0:	00005af5 	.word	0x00005af5
    49d4:	00007b51 	.word	0x00007b51

000049d8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    49d8:	b580      	push	{r7, lr}
    49da:	b082      	sub	sp, #8
    49dc:	af00      	add	r7, sp, #0
    49de:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	2b00      	cmp	r3, #0
    49e4:	bf14      	ite	ne
    49e6:	2301      	movne	r3, #1
    49e8:	2300      	moveq	r3, #0
    49ea:	b2db      	uxtb	r3, r3
    49ec:	2246      	movs	r2, #70	; 0x46
    49ee:	4906      	ldr	r1, [pc, #24]	; (4a08 <qspi_sync_disable+0x30>)
    49f0:	4618      	mov	r0, r3
    49f2:	4b06      	ldr	r3, [pc, #24]	; (4a0c <qspi_sync_disable+0x34>)
    49f4:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    49f6:	687b      	ldr	r3, [r7, #4]
    49f8:	4618      	mov	r0, r3
    49fa:	4b05      	ldr	r3, [pc, #20]	; (4a10 <qspi_sync_disable+0x38>)
    49fc:	4798      	blx	r3
    49fe:	4603      	mov	r3, r0
}
    4a00:	4618      	mov	r0, r3
    4a02:	3708      	adds	r7, #8
    4a04:	46bd      	mov	sp, r7
    4a06:	bd80      	pop	{r7, pc}
    4a08:	000100a0 	.word	0x000100a0
    4a0c:	00005af5 	.word	0x00005af5
    4a10:	00007b75 	.word	0x00007b75

00004a14 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    4a14:	b580      	push	{r7, lr}
    4a16:	b082      	sub	sp, #8
    4a18:	af00      	add	r7, sp, #0
    4a1a:	6078      	str	r0, [r7, #4]
    4a1c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    4a1e:	687b      	ldr	r3, [r7, #4]
    4a20:	2b00      	cmp	r3, #0
    4a22:	d004      	beq.n	4a2e <qspi_sync_serial_run_command+0x1a>
    4a24:	683b      	ldr	r3, [r7, #0]
    4a26:	2b00      	cmp	r3, #0
    4a28:	d001      	beq.n	4a2e <qspi_sync_serial_run_command+0x1a>
    4a2a:	2301      	movs	r3, #1
    4a2c:	e000      	b.n	4a30 <qspi_sync_serial_run_command+0x1c>
    4a2e:	2300      	movs	r3, #0
    4a30:	f003 0301 	and.w	r3, r3, #1
    4a34:	b2db      	uxtb	r3, r3
    4a36:	224d      	movs	r2, #77	; 0x4d
    4a38:	4906      	ldr	r1, [pc, #24]	; (4a54 <qspi_sync_serial_run_command+0x40>)
    4a3a:	4618      	mov	r0, r3
    4a3c:	4b06      	ldr	r3, [pc, #24]	; (4a58 <qspi_sync_serial_run_command+0x44>)
    4a3e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	6839      	ldr	r1, [r7, #0]
    4a44:	4618      	mov	r0, r3
    4a46:	4b05      	ldr	r3, [pc, #20]	; (4a5c <qspi_sync_serial_run_command+0x48>)
    4a48:	4798      	blx	r3
    4a4a:	4603      	mov	r3, r0
}
    4a4c:	4618      	mov	r0, r3
    4a4e:	3708      	adds	r7, #8
    4a50:	46bd      	mov	sp, r7
    4a52:	bd80      	pop	{r7, pc}
    4a54:	000100a0 	.word	0x000100a0
    4a58:	00005af5 	.word	0x00005af5
    4a5c:	00007cc1 	.word	0x00007cc1

00004a60 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    4a60:	b580      	push	{r7, lr}
    4a62:	b084      	sub	sp, #16
    4a64:	af00      	add	r7, sp, #0
    4a66:	6078      	str	r0, [r7, #4]
    4a68:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    4a6a:	2300      	movs	r3, #0
    4a6c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    4a6e:	687b      	ldr	r3, [r7, #4]
    4a70:	2b00      	cmp	r3, #0
    4a72:	d004      	beq.n	4a7e <spi_m_sync_init+0x1e>
    4a74:	683b      	ldr	r3, [r7, #0]
    4a76:	2b00      	cmp	r3, #0
    4a78:	d001      	beq.n	4a7e <spi_m_sync_init+0x1e>
    4a7a:	2301      	movs	r3, #1
    4a7c:	e000      	b.n	4a80 <spi_m_sync_init+0x20>
    4a7e:	2300      	movs	r3, #0
    4a80:	f003 0301 	and.w	r3, r3, #1
    4a84:	b2db      	uxtb	r3, r3
    4a86:	2240      	movs	r2, #64	; 0x40
    4a88:	4910      	ldr	r1, [pc, #64]	; (4acc <spi_m_sync_init+0x6c>)
    4a8a:	4618      	mov	r0, r3
    4a8c:	4b10      	ldr	r3, [pc, #64]	; (4ad0 <spi_m_sync_init+0x70>)
    4a8e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	683a      	ldr	r2, [r7, #0]
    4a94:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	3304      	adds	r3, #4
    4a9a:	6839      	ldr	r1, [r7, #0]
    4a9c:	4618      	mov	r0, r3
    4a9e:	4b0d      	ldr	r3, [pc, #52]	; (4ad4 <spi_m_sync_init+0x74>)
    4aa0:	4798      	blx	r3
    4aa2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    4aa4:	68fb      	ldr	r3, [r7, #12]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	da01      	bge.n	4aae <spi_m_sync_init+0x4e>
		return rc;
    4aaa:	68fb      	ldr	r3, [r7, #12]
    4aac:	e00a      	b.n	4ac4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4ab4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	4a07      	ldr	r2, [pc, #28]	; (4ad8 <spi_m_sync_init+0x78>)
    4aba:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	4a07      	ldr	r2, [pc, #28]	; (4adc <spi_m_sync_init+0x7c>)
    4ac0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4ac2:	2300      	movs	r3, #0
}
    4ac4:	4618      	mov	r0, r3
    4ac6:	3710      	adds	r7, #16
    4ac8:	46bd      	mov	sp, r7
    4aca:	bd80      	pop	{r7, pc}
    4acc:	000100bc 	.word	0x000100bc
    4ad0:	00005af5 	.word	0x00005af5
    4ad4:	00008f49 	.word	0x00008f49
    4ad8:	00004b59 	.word	0x00004b59
    4adc:	00004bb1 	.word	0x00004bb1

00004ae0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b082      	sub	sp, #8
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	2b00      	cmp	r3, #0
    4aec:	bf14      	ite	ne
    4aee:	2301      	movne	r3, #1
    4af0:	2300      	moveq	r3, #0
    4af2:	b2db      	uxtb	r3, r3
    4af4:	2257      	movs	r2, #87	; 0x57
    4af6:	4906      	ldr	r1, [pc, #24]	; (4b10 <spi_m_sync_enable+0x30>)
    4af8:	4618      	mov	r0, r3
    4afa:	4b06      	ldr	r3, [pc, #24]	; (4b14 <spi_m_sync_enable+0x34>)
    4afc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    4afe:	687b      	ldr	r3, [r7, #4]
    4b00:	3304      	adds	r3, #4
    4b02:	4618      	mov	r0, r3
    4b04:	4b04      	ldr	r3, [pc, #16]	; (4b18 <spi_m_sync_enable+0x38>)
    4b06:	4798      	blx	r3
}
    4b08:	bf00      	nop
    4b0a:	3708      	adds	r7, #8
    4b0c:	46bd      	mov	sp, r7
    4b0e:	bd80      	pop	{r7, pc}
    4b10:	000100bc 	.word	0x000100bc
    4b14:	00005af5 	.word	0x00005af5
    4b18:	00009055 	.word	0x00009055

00004b1c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    4b1c:	b580      	push	{r7, lr}
    4b1e:	b082      	sub	sp, #8
    4b20:	af00      	add	r7, sp, #0
    4b22:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	2b00      	cmp	r3, #0
    4b28:	bf14      	ite	ne
    4b2a:	2301      	movne	r3, #1
    4b2c:	2300      	moveq	r3, #0
    4b2e:	b2db      	uxtb	r3, r3
    4b30:	225d      	movs	r2, #93	; 0x5d
    4b32:	4906      	ldr	r1, [pc, #24]	; (4b4c <spi_m_sync_disable+0x30>)
    4b34:	4618      	mov	r0, r3
    4b36:	4b06      	ldr	r3, [pc, #24]	; (4b50 <spi_m_sync_disable+0x34>)
    4b38:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    4b3a:	687b      	ldr	r3, [r7, #4]
    4b3c:	3304      	adds	r3, #4
    4b3e:	4618      	mov	r0, r3
    4b40:	4b04      	ldr	r3, [pc, #16]	; (4b54 <spi_m_sync_disable+0x38>)
    4b42:	4798      	blx	r3
}
    4b44:	bf00      	nop
    4b46:	3708      	adds	r7, #8
    4b48:	46bd      	mov	sp, r7
    4b4a:	bd80      	pop	{r7, pc}
    4b4c:	000100bc 	.word	0x000100bc
    4b50:	00005af5 	.word	0x00005af5
    4b54:	000090a5 	.word	0x000090a5

00004b58 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    4b58:	b580      	push	{r7, lr}
    4b5a:	b088      	sub	sp, #32
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	60f8      	str	r0, [r7, #12]
    4b60:	60b9      	str	r1, [r7, #8]
    4b62:	4613      	mov	r3, r2
    4b64:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4b66:	68fb      	ldr	r3, [r7, #12]
    4b68:	2b00      	cmp	r3, #0
    4b6a:	bf14      	ite	ne
    4b6c:	2301      	movne	r3, #1
    4b6e:	2300      	moveq	r3, #0
    4b70:	b2db      	uxtb	r3, r3
    4b72:	2287      	movs	r2, #135	; 0x87
    4b74:	490b      	ldr	r1, [pc, #44]	; (4ba4 <_spi_m_sync_io_read+0x4c>)
    4b76:	4618      	mov	r0, r3
    4b78:	4b0b      	ldr	r3, [pc, #44]	; (4ba8 <_spi_m_sync_io_read+0x50>)
    4b7a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    4b7c:	68fb      	ldr	r3, [r7, #12]
    4b7e:	3b0c      	subs	r3, #12
    4b80:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    4b82:	68bb      	ldr	r3, [r7, #8]
    4b84:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    4b86:	2300      	movs	r3, #0
    4b88:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    4b8a:	88fb      	ldrh	r3, [r7, #6]
    4b8c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    4b8e:	f107 0310 	add.w	r3, r7, #16
    4b92:	4619      	mov	r1, r3
    4b94:	69f8      	ldr	r0, [r7, #28]
    4b96:	4b05      	ldr	r3, [pc, #20]	; (4bac <_spi_m_sync_io_read+0x54>)
    4b98:	4798      	blx	r3
    4b9a:	4603      	mov	r3, r0
}
    4b9c:	4618      	mov	r0, r3
    4b9e:	3720      	adds	r7, #32
    4ba0:	46bd      	mov	sp, r7
    4ba2:	bd80      	pop	{r7, pc}
    4ba4:	000100bc 	.word	0x000100bc
    4ba8:	00005af5 	.word	0x00005af5
    4bac:	00004c09 	.word	0x00004c09

00004bb0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b088      	sub	sp, #32
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	60f8      	str	r0, [r7, #12]
    4bb8:	60b9      	str	r1, [r7, #8]
    4bba:	4613      	mov	r3, r2
    4bbc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4bbe:	68fb      	ldr	r3, [r7, #12]
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	bf14      	ite	ne
    4bc4:	2301      	movne	r3, #1
    4bc6:	2300      	moveq	r3, #0
    4bc8:	b2db      	uxtb	r3, r3
    4bca:	22a3      	movs	r2, #163	; 0xa3
    4bcc:	490b      	ldr	r1, [pc, #44]	; (4bfc <_spi_m_sync_io_write+0x4c>)
    4bce:	4618      	mov	r0, r3
    4bd0:	4b0b      	ldr	r3, [pc, #44]	; (4c00 <_spi_m_sync_io_write+0x50>)
    4bd2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    4bd4:	68fb      	ldr	r3, [r7, #12]
    4bd6:	3b0c      	subs	r3, #12
    4bd8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    4bda:	2300      	movs	r3, #0
    4bdc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    4bde:	68bb      	ldr	r3, [r7, #8]
    4be0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    4be2:	88fb      	ldrh	r3, [r7, #6]
    4be4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    4be6:	f107 0310 	add.w	r3, r7, #16
    4bea:	4619      	mov	r1, r3
    4bec:	69f8      	ldr	r0, [r7, #28]
    4bee:	4b05      	ldr	r3, [pc, #20]	; (4c04 <_spi_m_sync_io_write+0x54>)
    4bf0:	4798      	blx	r3
    4bf2:	4603      	mov	r3, r0
}
    4bf4:	4618      	mov	r0, r3
    4bf6:	3720      	adds	r7, #32
    4bf8:	46bd      	mov	sp, r7
    4bfa:	bd80      	pop	{r7, pc}
    4bfc:	000100bc 	.word	0x000100bc
    4c00:	00005af5 	.word	0x00005af5
    4c04:	00004c09 	.word	0x00004c09

00004c08 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    4c08:	b580      	push	{r7, lr}
    4c0a:	b086      	sub	sp, #24
    4c0c:	af00      	add	r7, sp, #0
    4c0e:	6078      	str	r0, [r7, #4]
    4c10:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    4c12:	687b      	ldr	r3, [r7, #4]
    4c14:	2b00      	cmp	r3, #0
    4c16:	d004      	beq.n	4c22 <spi_m_sync_transfer+0x1a>
    4c18:	683b      	ldr	r3, [r7, #0]
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	d001      	beq.n	4c22 <spi_m_sync_transfer+0x1a>
    4c1e:	2301      	movs	r3, #1
    4c20:	e000      	b.n	4c24 <spi_m_sync_transfer+0x1c>
    4c22:	2300      	movs	r3, #0
    4c24:	f003 0301 	and.w	r3, r3, #1
    4c28:	b2db      	uxtb	r3, r3
    4c2a:	22b3      	movs	r2, #179	; 0xb3
    4c2c:	490c      	ldr	r1, [pc, #48]	; (4c60 <spi_m_sync_transfer+0x58>)
    4c2e:	4618      	mov	r0, r3
    4c30:	4b0c      	ldr	r3, [pc, #48]	; (4c64 <spi_m_sync_transfer+0x5c>)
    4c32:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    4c34:	683b      	ldr	r3, [r7, #0]
    4c36:	681b      	ldr	r3, [r3, #0]
    4c38:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    4c3a:	683b      	ldr	r3, [r7, #0]
    4c3c:	685b      	ldr	r3, [r3, #4]
    4c3e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    4c40:	683b      	ldr	r3, [r7, #0]
    4c42:	689b      	ldr	r3, [r3, #8]
    4c44:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    4c46:	687b      	ldr	r3, [r7, #4]
    4c48:	3304      	adds	r3, #4
    4c4a:	f107 020c 	add.w	r2, r7, #12
    4c4e:	4611      	mov	r1, r2
    4c50:	4618      	mov	r0, r3
    4c52:	4b05      	ldr	r3, [pc, #20]	; (4c68 <spi_m_sync_transfer+0x60>)
    4c54:	4798      	blx	r3
    4c56:	4603      	mov	r3, r0
}
    4c58:	4618      	mov	r0, r3
    4c5a:	3718      	adds	r7, #24
    4c5c:	46bd      	mov	sp, r7
    4c5e:	bd80      	pop	{r7, pc}
    4c60:	000100bc 	.word	0x000100bc
    4c64:	00005af5 	.word	0x00005af5
    4c68:	00009249 	.word	0x00009249

00004c6c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    4c6c:	b580      	push	{r7, lr}
    4c6e:	b082      	sub	sp, #8
    4c70:	af00      	add	r7, sp, #0
    4c72:	6078      	str	r0, [r7, #4]
    4c74:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d004      	beq.n	4c86 <spi_m_sync_get_io_descriptor+0x1a>
    4c7c:	683b      	ldr	r3, [r7, #0]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d001      	beq.n	4c86 <spi_m_sync_get_io_descriptor+0x1a>
    4c82:	2301      	movs	r3, #1
    4c84:	e000      	b.n	4c88 <spi_m_sync_get_io_descriptor+0x1c>
    4c86:	2300      	movs	r3, #0
    4c88:	f003 0301 	and.w	r3, r3, #1
    4c8c:	b2db      	uxtb	r3, r3
    4c8e:	22bd      	movs	r2, #189	; 0xbd
    4c90:	4906      	ldr	r1, [pc, #24]	; (4cac <spi_m_sync_get_io_descriptor+0x40>)
    4c92:	4618      	mov	r0, r3
    4c94:	4b06      	ldr	r3, [pc, #24]	; (4cb0 <spi_m_sync_get_io_descriptor+0x44>)
    4c96:	4798      	blx	r3
	*io = &spi->io;
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	f103 020c 	add.w	r2, r3, #12
    4c9e:	683b      	ldr	r3, [r7, #0]
    4ca0:	601a      	str	r2, [r3, #0]
	return 0;
    4ca2:	2300      	movs	r3, #0
}
    4ca4:	4618      	mov	r0, r3
    4ca6:	3708      	adds	r7, #8
    4ca8:	46bd      	mov	sp, r7
    4caa:	bd80      	pop	{r7, pc}
    4cac:	000100bc 	.word	0x000100bc
    4cb0:	00005af5 	.word	0x00005af5

00004cb4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    4cb4:	b480      	push	{r7}
    4cb6:	b083      	sub	sp, #12
    4cb8:	af00      	add	r7, sp, #0
    4cba:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	681b      	ldr	r3, [r3, #0]
}
    4cc0:	4618      	mov	r0, r3
    4cc2:	370c      	adds	r7, #12
    4cc4:	46bd      	mov	sp, r7
    4cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cca:	4770      	bx	lr

00004ccc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    4ccc:	b480      	push	{r7}
    4cce:	b083      	sub	sp, #12
    4cd0:	af00      	add	r7, sp, #0
    4cd2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    4cd4:	687b      	ldr	r3, [r7, #4]
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d002      	beq.n	4ce0 <list_get_next_element+0x14>
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	681b      	ldr	r3, [r3, #0]
    4cde:	e000      	b.n	4ce2 <list_get_next_element+0x16>
    4ce0:	2300      	movs	r3, #0
}
    4ce2:	4618      	mov	r0, r3
    4ce4:	370c      	adds	r7, #12
    4ce6:	46bd      	mov	sp, r7
    4ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cec:	4770      	bx	lr
	...

00004cf0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    4cf0:	b580      	push	{r7, lr}
    4cf2:	b084      	sub	sp, #16
    4cf4:	af00      	add	r7, sp, #0
    4cf6:	60f8      	str	r0, [r7, #12]
    4cf8:	60b9      	str	r1, [r7, #8]
    4cfa:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    4cfc:	68fb      	ldr	r3, [r7, #12]
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d007      	beq.n	4d12 <timer_init+0x22>
    4d02:	68bb      	ldr	r3, [r7, #8]
    4d04:	2b00      	cmp	r3, #0
    4d06:	d004      	beq.n	4d12 <timer_init+0x22>
    4d08:	687b      	ldr	r3, [r7, #4]
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d001      	beq.n	4d12 <timer_init+0x22>
    4d0e:	2301      	movs	r3, #1
    4d10:	e000      	b.n	4d14 <timer_init+0x24>
    4d12:	2300      	movs	r3, #0
    4d14:	f003 0301 	and.w	r3, r3, #1
    4d18:	b2db      	uxtb	r3, r3
    4d1a:	223b      	movs	r2, #59	; 0x3b
    4d1c:	490c      	ldr	r1, [pc, #48]	; (4d50 <timer_init+0x60>)
    4d1e:	4618      	mov	r0, r3
    4d20:	4b0c      	ldr	r3, [pc, #48]	; (4d54 <timer_init+0x64>)
    4d22:	4798      	blx	r3
	descr->func = func;
    4d24:	68fb      	ldr	r3, [r7, #12]
    4d26:	687a      	ldr	r2, [r7, #4]
    4d28:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    4d2a:	68fb      	ldr	r3, [r7, #12]
    4d2c:	681b      	ldr	r3, [r3, #0]
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	68fa      	ldr	r2, [r7, #12]
    4d32:	3204      	adds	r2, #4
    4d34:	68b9      	ldr	r1, [r7, #8]
    4d36:	4610      	mov	r0, r2
    4d38:	4798      	blx	r3
	descr->time                           = 0;
    4d3a:	68fb      	ldr	r3, [r7, #12]
    4d3c:	2200      	movs	r2, #0
    4d3e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4d40:	68fb      	ldr	r3, [r7, #12]
    4d42:	4a05      	ldr	r2, [pc, #20]	; (4d58 <timer_init+0x68>)
    4d44:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    4d46:	2300      	movs	r3, #0
}
    4d48:	4618      	mov	r0, r3
    4d4a:	3710      	adds	r7, #16
    4d4c:	46bd      	mov	sp, r7
    4d4e:	bd80      	pop	{r7, pc}
    4d50:	000100d8 	.word	0x000100d8
    4d54:	00005af5 	.word	0x00005af5
    4d58:	000050e1 	.word	0x000050e1

00004d5c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    4d5c:	b580      	push	{r7, lr}
    4d5e:	b082      	sub	sp, #8
    4d60:	af00      	add	r7, sp, #0
    4d62:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    4d64:	687b      	ldr	r3, [r7, #4]
    4d66:	2b00      	cmp	r3, #0
    4d68:	d005      	beq.n	4d76 <timer_start+0x1a>
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	681b      	ldr	r3, [r3, #0]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d001      	beq.n	4d76 <timer_start+0x1a>
    4d72:	2301      	movs	r3, #1
    4d74:	e000      	b.n	4d78 <timer_start+0x1c>
    4d76:	2300      	movs	r3, #0
    4d78:	f003 0301 	and.w	r3, r3, #1
    4d7c:	b2db      	uxtb	r3, r3
    4d7e:	2254      	movs	r2, #84	; 0x54
    4d80:	490e      	ldr	r1, [pc, #56]	; (4dbc <timer_start+0x60>)
    4d82:	4618      	mov	r0, r3
    4d84:	4b0e      	ldr	r3, [pc, #56]	; (4dc0 <timer_start+0x64>)
    4d86:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	681b      	ldr	r3, [r3, #0]
    4d8c:	699b      	ldr	r3, [r3, #24]
    4d8e:	687a      	ldr	r2, [r7, #4]
    4d90:	3204      	adds	r2, #4
    4d92:	4610      	mov	r0, r2
    4d94:	4798      	blx	r3
    4d96:	4603      	mov	r3, r0
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d002      	beq.n	4da2 <timer_start+0x46>
		return ERR_DENIED;
    4d9c:	f06f 0310 	mvn.w	r3, #16
    4da0:	e007      	b.n	4db2 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	681b      	ldr	r3, [r3, #0]
    4da6:	689b      	ldr	r3, [r3, #8]
    4da8:	687a      	ldr	r2, [r7, #4]
    4daa:	3204      	adds	r2, #4
    4dac:	4610      	mov	r0, r2
    4dae:	4798      	blx	r3

	return ERR_NONE;
    4db0:	2300      	movs	r3, #0
}
    4db2:	4618      	mov	r0, r3
    4db4:	3708      	adds	r7, #8
    4db6:	46bd      	mov	sp, r7
    4db8:	bd80      	pop	{r7, pc}
    4dba:	bf00      	nop
    4dbc:	000100d8 	.word	0x000100d8
    4dc0:	00005af5 	.word	0x00005af5

00004dc4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    4dc4:	b580      	push	{r7, lr}
    4dc6:	b082      	sub	sp, #8
    4dc8:	af00      	add	r7, sp, #0
    4dca:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	2b00      	cmp	r3, #0
    4dd0:	d005      	beq.n	4dde <timer_stop+0x1a>
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	681b      	ldr	r3, [r3, #0]
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d001      	beq.n	4dde <timer_stop+0x1a>
    4dda:	2301      	movs	r3, #1
    4ddc:	e000      	b.n	4de0 <timer_stop+0x1c>
    4dde:	2300      	movs	r3, #0
    4de0:	f003 0301 	and.w	r3, r3, #1
    4de4:	b2db      	uxtb	r3, r3
    4de6:	2262      	movs	r2, #98	; 0x62
    4de8:	490f      	ldr	r1, [pc, #60]	; (4e28 <timer_stop+0x64>)
    4dea:	4618      	mov	r0, r3
    4dec:	4b0f      	ldr	r3, [pc, #60]	; (4e2c <timer_stop+0x68>)
    4dee:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	699b      	ldr	r3, [r3, #24]
    4df6:	687a      	ldr	r2, [r7, #4]
    4df8:	3204      	adds	r2, #4
    4dfa:	4610      	mov	r0, r2
    4dfc:	4798      	blx	r3
    4dfe:	4603      	mov	r3, r0
    4e00:	f083 0301 	eor.w	r3, r3, #1
    4e04:	b2db      	uxtb	r3, r3
    4e06:	2b00      	cmp	r3, #0
    4e08:	d002      	beq.n	4e10 <timer_stop+0x4c>
		return ERR_DENIED;
    4e0a:	f06f 0310 	mvn.w	r3, #16
    4e0e:	e007      	b.n	4e20 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	681b      	ldr	r3, [r3, #0]
    4e14:	68db      	ldr	r3, [r3, #12]
    4e16:	687a      	ldr	r2, [r7, #4]
    4e18:	3204      	adds	r2, #4
    4e1a:	4610      	mov	r0, r2
    4e1c:	4798      	blx	r3

	return ERR_NONE;
    4e1e:	2300      	movs	r3, #0
}
    4e20:	4618      	mov	r0, r3
    4e22:	3708      	adds	r7, #8
    4e24:	46bd      	mov	sp, r7
    4e26:	bd80      	pop	{r7, pc}
    4e28:	000100d8 	.word	0x000100d8
    4e2c:	00005af5 	.word	0x00005af5

00004e30 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    4e30:	b580      	push	{r7, lr}
    4e32:	b084      	sub	sp, #16
    4e34:	af00      	add	r7, sp, #0
    4e36:	6078      	str	r0, [r7, #4]
    4e38:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	2b00      	cmp	r3, #0
    4e3e:	d008      	beq.n	4e52 <timer_add_task+0x22>
    4e40:	683b      	ldr	r3, [r7, #0]
    4e42:	2b00      	cmp	r3, #0
    4e44:	d005      	beq.n	4e52 <timer_add_task+0x22>
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	681b      	ldr	r3, [r3, #0]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d001      	beq.n	4e52 <timer_add_task+0x22>
    4e4e:	2301      	movs	r3, #1
    4e50:	e000      	b.n	4e54 <timer_add_task+0x24>
    4e52:	2300      	movs	r3, #0
    4e54:	f003 0301 	and.w	r3, r3, #1
    4e58:	b2db      	uxtb	r3, r3
    4e5a:	227b      	movs	r2, #123	; 0x7b
    4e5c:	492f      	ldr	r1, [pc, #188]	; (4f1c <timer_add_task+0xec>)
    4e5e:	4618      	mov	r0, r3
    4e60:	4b2f      	ldr	r3, [pc, #188]	; (4f20 <timer_add_task+0xf0>)
    4e62:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	7f1b      	ldrb	r3, [r3, #28]
    4e68:	b2db      	uxtb	r3, r3
    4e6a:	f043 0301 	orr.w	r3, r3, #1
    4e6e:	b2da      	uxtb	r2, r3
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    4e74:	687b      	ldr	r3, [r7, #4]
    4e76:	3318      	adds	r3, #24
    4e78:	6839      	ldr	r1, [r7, #0]
    4e7a:	4618      	mov	r0, r3
    4e7c:	4b29      	ldr	r3, [pc, #164]	; (4f24 <timer_add_task+0xf4>)
    4e7e:	4798      	blx	r3
    4e80:	4603      	mov	r3, r0
    4e82:	2b00      	cmp	r3, #0
    4e84:	d00f      	beq.n	4ea6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	7f1b      	ldrb	r3, [r3, #28]
    4e8a:	b2db      	uxtb	r3, r3
    4e8c:	f023 0301 	bic.w	r3, r3, #1
    4e90:	b2da      	uxtb	r2, r3
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    4e96:	2280      	movs	r2, #128	; 0x80
    4e98:	4920      	ldr	r1, [pc, #128]	; (4f1c <timer_add_task+0xec>)
    4e9a:	2000      	movs	r0, #0
    4e9c:	4b20      	ldr	r3, [pc, #128]	; (4f20 <timer_add_task+0xf0>)
    4e9e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4ea0:	f06f 0311 	mvn.w	r3, #17
    4ea4:	e035      	b.n	4f12 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	695a      	ldr	r2, [r3, #20]
    4eaa:	683b      	ldr	r3, [r7, #0]
    4eac:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	f103 0018 	add.w	r0, r3, #24
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	695b      	ldr	r3, [r3, #20]
    4eb8:	461a      	mov	r2, r3
    4eba:	6839      	ldr	r1, [r7, #0]
    4ebc:	4b1a      	ldr	r3, [pc, #104]	; (4f28 <timer_add_task+0xf8>)
    4ebe:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	7f1b      	ldrb	r3, [r3, #28]
    4ec4:	b2db      	uxtb	r3, r3
    4ec6:	f023 0301 	bic.w	r3, r3, #1
    4eca:	b2da      	uxtb	r2, r3
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	7f1b      	ldrb	r3, [r3, #28]
    4ed4:	b2db      	uxtb	r3, r3
    4ed6:	f003 0302 	and.w	r3, r3, #2
    4eda:	2b00      	cmp	r3, #0
    4edc:	d018      	beq.n	4f10 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    4ede:	f107 030c 	add.w	r3, r7, #12
    4ee2:	4618      	mov	r0, r3
    4ee4:	4b11      	ldr	r3, [pc, #68]	; (4f2c <timer_add_task+0xfc>)
    4ee6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	7f1b      	ldrb	r3, [r3, #28]
    4eec:	b2db      	uxtb	r3, r3
    4eee:	f023 0302 	bic.w	r3, r3, #2
    4ef2:	b2da      	uxtb	r2, r3
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	681b      	ldr	r3, [r3, #0]
    4efc:	69db      	ldr	r3, [r3, #28]
    4efe:	687a      	ldr	r2, [r7, #4]
    4f00:	3204      	adds	r2, #4
    4f02:	4610      	mov	r0, r2
    4f04:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4f06:	f107 030c 	add.w	r3, r7, #12
    4f0a:	4618      	mov	r0, r3
    4f0c:	4b08      	ldr	r3, [pc, #32]	; (4f30 <timer_add_task+0x100>)
    4f0e:	4798      	blx	r3
	}

	return ERR_NONE;
    4f10:	2300      	movs	r3, #0
}
    4f12:	4618      	mov	r0, r3
    4f14:	3710      	adds	r7, #16
    4f16:	46bd      	mov	sp, r7
    4f18:	bd80      	pop	{r7, pc}
    4f1a:	bf00      	nop
    4f1c:	000100d8 	.word	0x000100d8
    4f20:	00005af5 	.word	0x00005af5
    4f24:	00005b1d 	.word	0x00005b1d
    4f28:	00005031 	.word	0x00005031
    4f2c:	00003fb1 	.word	0x00003fb1
    4f30:	00003fd7 	.word	0x00003fd7

00004f34 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    4f34:	b580      	push	{r7, lr}
    4f36:	b084      	sub	sp, #16
    4f38:	af00      	add	r7, sp, #0
    4f3a:	6078      	str	r0, [r7, #4]
    4f3c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    4f3e:	687b      	ldr	r3, [r7, #4]
    4f40:	2b00      	cmp	r3, #0
    4f42:	d008      	beq.n	4f56 <timer_remove_task+0x22>
    4f44:	683b      	ldr	r3, [r7, #0]
    4f46:	2b00      	cmp	r3, #0
    4f48:	d005      	beq.n	4f56 <timer_remove_task+0x22>
    4f4a:	687b      	ldr	r3, [r7, #4]
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d001      	beq.n	4f56 <timer_remove_task+0x22>
    4f52:	2301      	movs	r3, #1
    4f54:	e000      	b.n	4f58 <timer_remove_task+0x24>
    4f56:	2300      	movs	r3, #0
    4f58:	f003 0301 	and.w	r3, r3, #1
    4f5c:	b2db      	uxtb	r3, r3
    4f5e:	2296      	movs	r2, #150	; 0x96
    4f60:	492d      	ldr	r1, [pc, #180]	; (5018 <timer_remove_task+0xe4>)
    4f62:	4618      	mov	r0, r3
    4f64:	4b2d      	ldr	r3, [pc, #180]	; (501c <timer_remove_task+0xe8>)
    4f66:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	7f1b      	ldrb	r3, [r3, #28]
    4f6c:	b2db      	uxtb	r3, r3
    4f6e:	f043 0301 	orr.w	r3, r3, #1
    4f72:	b2da      	uxtb	r2, r3
    4f74:	687b      	ldr	r3, [r7, #4]
    4f76:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    4f78:	687b      	ldr	r3, [r7, #4]
    4f7a:	3318      	adds	r3, #24
    4f7c:	6839      	ldr	r1, [r7, #0]
    4f7e:	4618      	mov	r0, r3
    4f80:	4b27      	ldr	r3, [pc, #156]	; (5020 <timer_remove_task+0xec>)
    4f82:	4798      	blx	r3
    4f84:	4603      	mov	r3, r0
    4f86:	f083 0301 	eor.w	r3, r3, #1
    4f8a:	b2db      	uxtb	r3, r3
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d00f      	beq.n	4fb0 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	7f1b      	ldrb	r3, [r3, #28]
    4f94:	b2db      	uxtb	r3, r3
    4f96:	f023 0301 	bic.w	r3, r3, #1
    4f9a:	b2da      	uxtb	r2, r3
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    4fa0:	229b      	movs	r2, #155	; 0x9b
    4fa2:	491d      	ldr	r1, [pc, #116]	; (5018 <timer_remove_task+0xe4>)
    4fa4:	2000      	movs	r0, #0
    4fa6:	4b1d      	ldr	r3, [pc, #116]	; (501c <timer_remove_task+0xe8>)
    4fa8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    4faa:	f06f 0309 	mvn.w	r3, #9
    4fae:	e02e      	b.n	500e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	3318      	adds	r3, #24
    4fb4:	6839      	ldr	r1, [r7, #0]
    4fb6:	4618      	mov	r0, r3
    4fb8:	4b1a      	ldr	r3, [pc, #104]	; (5024 <timer_remove_task+0xf0>)
    4fba:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	7f1b      	ldrb	r3, [r3, #28]
    4fc0:	b2db      	uxtb	r3, r3
    4fc2:	f023 0301 	bic.w	r3, r3, #1
    4fc6:	b2da      	uxtb	r2, r3
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	7f1b      	ldrb	r3, [r3, #28]
    4fd0:	b2db      	uxtb	r3, r3
    4fd2:	f003 0302 	and.w	r3, r3, #2
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d018      	beq.n	500c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    4fda:	f107 030c 	add.w	r3, r7, #12
    4fde:	4618      	mov	r0, r3
    4fe0:	4b11      	ldr	r3, [pc, #68]	; (5028 <timer_remove_task+0xf4>)
    4fe2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	7f1b      	ldrb	r3, [r3, #28]
    4fe8:	b2db      	uxtb	r3, r3
    4fea:	f023 0302 	bic.w	r3, r3, #2
    4fee:	b2da      	uxtb	r2, r3
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	681b      	ldr	r3, [r3, #0]
    4ff8:	69db      	ldr	r3, [r3, #28]
    4ffa:	687a      	ldr	r2, [r7, #4]
    4ffc:	3204      	adds	r2, #4
    4ffe:	4610      	mov	r0, r2
    5000:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5002:	f107 030c 	add.w	r3, r7, #12
    5006:	4618      	mov	r0, r3
    5008:	4b08      	ldr	r3, [pc, #32]	; (502c <timer_remove_task+0xf8>)
    500a:	4798      	blx	r3
	}

	return ERR_NONE;
    500c:	2300      	movs	r3, #0
}
    500e:	4618      	mov	r0, r3
    5010:	3710      	adds	r7, #16
    5012:	46bd      	mov	sp, r7
    5014:	bd80      	pop	{r7, pc}
    5016:	bf00      	nop
    5018:	000100d8 	.word	0x000100d8
    501c:	00005af5 	.word	0x00005af5
    5020:	00005b1d 	.word	0x00005b1d
    5024:	00005c7f 	.word	0x00005c7f
    5028:	00003fb1 	.word	0x00003fb1
    502c:	00003fd7 	.word	0x00003fd7

00005030 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5030:	b580      	push	{r7, lr}
    5032:	b088      	sub	sp, #32
    5034:	af00      	add	r7, sp, #0
    5036:	60f8      	str	r0, [r7, #12]
    5038:	60b9      	str	r1, [r7, #8]
    503a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    503c:	2300      	movs	r3, #0
    503e:	61bb      	str	r3, [r7, #24]
    5040:	68f8      	ldr	r0, [r7, #12]
    5042:	4b23      	ldr	r3, [pc, #140]	; (50d0 <timer_add_timer_task+0xa0>)
    5044:	4798      	blx	r3
    5046:	6138      	str	r0, [r7, #16]

	if (!head) {
    5048:	693b      	ldr	r3, [r7, #16]
    504a:	2b00      	cmp	r3, #0
    504c:	d104      	bne.n	5058 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    504e:	68b9      	ldr	r1, [r7, #8]
    5050:	68f8      	ldr	r0, [r7, #12]
    5052:	4b20      	ldr	r3, [pc, #128]	; (50d4 <timer_add_timer_task+0xa4>)
    5054:	4798      	blx	r3
		return;
    5056:	e037      	b.n	50c8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5058:	693b      	ldr	r3, [r7, #16]
    505a:	61fb      	str	r3, [r7, #28]
    505c:	e022      	b.n	50a4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    505e:	69fb      	ldr	r3, [r7, #28]
    5060:	685a      	ldr	r2, [r3, #4]
    5062:	687b      	ldr	r3, [r7, #4]
    5064:	429a      	cmp	r2, r3
    5066:	d808      	bhi.n	507a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    5068:	69fb      	ldr	r3, [r7, #28]
    506a:	689a      	ldr	r2, [r3, #8]
    506c:	69fb      	ldr	r3, [r7, #28]
    506e:	6859      	ldr	r1, [r3, #4]
    5070:	687b      	ldr	r3, [r7, #4]
    5072:	1acb      	subs	r3, r1, r3
    5074:	4413      	add	r3, r2
    5076:	617b      	str	r3, [r7, #20]
    5078:	e009      	b.n	508e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    507a:	69fb      	ldr	r3, [r7, #28]
    507c:	689a      	ldr	r2, [r3, #8]
    507e:	69fb      	ldr	r3, [r7, #28]
    5080:	685b      	ldr	r3, [r3, #4]
    5082:	441a      	add	r2, r3
    5084:	687b      	ldr	r3, [r7, #4]
    5086:	425b      	negs	r3, r3
    5088:	4413      	add	r3, r2
    508a:	3301      	adds	r3, #1
    508c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    508e:	68bb      	ldr	r3, [r7, #8]
    5090:	689a      	ldr	r2, [r3, #8]
    5092:	697b      	ldr	r3, [r7, #20]
    5094:	429a      	cmp	r2, r3
    5096:	d909      	bls.n	50ac <timer_add_timer_task+0x7c>
			break;
		prev = it;
    5098:	69fb      	ldr	r3, [r7, #28]
    509a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    509c:	69f8      	ldr	r0, [r7, #28]
    509e:	4b0e      	ldr	r3, [pc, #56]	; (50d8 <timer_add_timer_task+0xa8>)
    50a0:	4798      	blx	r3
    50a2:	61f8      	str	r0, [r7, #28]
    50a4:	69fb      	ldr	r3, [r7, #28]
    50a6:	2b00      	cmp	r3, #0
    50a8:	d1d9      	bne.n	505e <timer_add_timer_task+0x2e>
    50aa:	e000      	b.n	50ae <timer_add_timer_task+0x7e>
			break;
    50ac:	bf00      	nop
	}

	if (it == head) {
    50ae:	69fa      	ldr	r2, [r7, #28]
    50b0:	693b      	ldr	r3, [r7, #16]
    50b2:	429a      	cmp	r2, r3
    50b4:	d104      	bne.n	50c0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    50b6:	68b9      	ldr	r1, [r7, #8]
    50b8:	68f8      	ldr	r0, [r7, #12]
    50ba:	4b06      	ldr	r3, [pc, #24]	; (50d4 <timer_add_timer_task+0xa4>)
    50bc:	4798      	blx	r3
    50be:	e003      	b.n	50c8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    50c0:	68b9      	ldr	r1, [r7, #8]
    50c2:	69b8      	ldr	r0, [r7, #24]
    50c4:	4b05      	ldr	r3, [pc, #20]	; (50dc <timer_add_timer_task+0xac>)
    50c6:	4798      	blx	r3
	}
}
    50c8:	3720      	adds	r7, #32
    50ca:	46bd      	mov	sp, r7
    50cc:	bd80      	pop	{r7, pc}
    50ce:	bf00      	nop
    50d0:	00004cb5 	.word	0x00004cb5
    50d4:	00005b55 	.word	0x00005b55
    50d8:	00004ccd 	.word	0x00004ccd
    50dc:	00005bad 	.word	0x00005bad

000050e0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    50e0:	b580      	push	{r7, lr}
    50e2:	b086      	sub	sp, #24
    50e4:	af00      	add	r7, sp, #0
    50e6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    50e8:	687b      	ldr	r3, [r7, #4]
    50ea:	3b04      	subs	r3, #4
    50ec:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    50ee:	693b      	ldr	r3, [r7, #16]
    50f0:	3318      	adds	r3, #24
    50f2:	4618      	mov	r0, r3
    50f4:	4b27      	ldr	r3, [pc, #156]	; (5194 <timer_process_counted+0xb4>)
    50f6:	4798      	blx	r3
    50f8:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    50fa:	693b      	ldr	r3, [r7, #16]
    50fc:	695b      	ldr	r3, [r3, #20]
    50fe:	1c5a      	adds	r2, r3, #1
    5100:	693b      	ldr	r3, [r7, #16]
    5102:	615a      	str	r2, [r3, #20]
    5104:	693b      	ldr	r3, [r7, #16]
    5106:	695b      	ldr	r3, [r3, #20]
    5108:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    510a:	693b      	ldr	r3, [r7, #16]
    510c:	7f1b      	ldrb	r3, [r3, #28]
    510e:	b2db      	uxtb	r3, r3
    5110:	f003 0301 	and.w	r3, r3, #1
    5114:	2b00      	cmp	r3, #0
    5116:	d106      	bne.n	5126 <timer_process_counted+0x46>
    5118:	693b      	ldr	r3, [r7, #16]
    511a:	7f1b      	ldrb	r3, [r3, #28]
    511c:	b2db      	uxtb	r3, r3
    511e:	f003 0302 	and.w	r3, r3, #2
    5122:	2b00      	cmp	r3, #0
    5124:	d027      	beq.n	5176 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    5126:	693b      	ldr	r3, [r7, #16]
    5128:	7f1b      	ldrb	r3, [r3, #28]
    512a:	b2db      	uxtb	r3, r3
    512c:	f043 0302 	orr.w	r3, r3, #2
    5130:	b2da      	uxtb	r2, r3
    5132:	693b      	ldr	r3, [r7, #16]
    5134:	771a      	strb	r2, [r3, #28]
		return;
    5136:	e029      	b.n	518c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    5138:	697b      	ldr	r3, [r7, #20]
    513a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    513c:	693b      	ldr	r3, [r7, #16]
    513e:	3318      	adds	r3, #24
    5140:	4618      	mov	r0, r3
    5142:	4b15      	ldr	r3, [pc, #84]	; (5198 <timer_process_counted+0xb8>)
    5144:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5146:	68bb      	ldr	r3, [r7, #8]
    5148:	7c1b      	ldrb	r3, [r3, #16]
    514a:	2b01      	cmp	r3, #1
    514c:	d109      	bne.n	5162 <timer_process_counted+0x82>
			tmp->time_label = time;
    514e:	68bb      	ldr	r3, [r7, #8]
    5150:	68fa      	ldr	r2, [r7, #12]
    5152:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    5154:	693b      	ldr	r3, [r7, #16]
    5156:	3318      	adds	r3, #24
    5158:	68fa      	ldr	r2, [r7, #12]
    515a:	68b9      	ldr	r1, [r7, #8]
    515c:	4618      	mov	r0, r3
    515e:	4b0f      	ldr	r3, [pc, #60]	; (519c <timer_process_counted+0xbc>)
    5160:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    5162:	693b      	ldr	r3, [r7, #16]
    5164:	3318      	adds	r3, #24
    5166:	4618      	mov	r0, r3
    5168:	4b0a      	ldr	r3, [pc, #40]	; (5194 <timer_process_counted+0xb4>)
    516a:	4798      	blx	r3
    516c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    516e:	68bb      	ldr	r3, [r7, #8]
    5170:	68db      	ldr	r3, [r3, #12]
    5172:	68b8      	ldr	r0, [r7, #8]
    5174:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    5176:	697b      	ldr	r3, [r7, #20]
    5178:	2b00      	cmp	r3, #0
    517a:	d007      	beq.n	518c <timer_process_counted+0xac>
    517c:	697b      	ldr	r3, [r7, #20]
    517e:	685b      	ldr	r3, [r3, #4]
    5180:	68fa      	ldr	r2, [r7, #12]
    5182:	1ad2      	subs	r2, r2, r3
    5184:	697b      	ldr	r3, [r7, #20]
    5186:	689b      	ldr	r3, [r3, #8]
    5188:	429a      	cmp	r2, r3
    518a:	d2d5      	bcs.n	5138 <timer_process_counted+0x58>
	}
}
    518c:	3718      	adds	r7, #24
    518e:	46bd      	mov	sp, r7
    5190:	bd80      	pop	{r7, pc}
    5192:	bf00      	nop
    5194:	00004cb5 	.word	0x00004cb5
    5198:	00005c4d 	.word	0x00005c4d
    519c:	00005031 	.word	0x00005031

000051a0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    51a0:	b480      	push	{r7}
    51a2:	b085      	sub	sp, #20
    51a4:	af00      	add	r7, sp, #0
    51a6:	4603      	mov	r3, r0
    51a8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    51aa:	2300      	movs	r3, #0
    51ac:	73fb      	strb	r3, [r7, #15]
    51ae:	e029      	b.n	5204 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    51b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51b4:	4a19      	ldr	r2, [pc, #100]	; (521c <_usb_d_find_ep+0x7c>)
    51b6:	015b      	lsls	r3, r3, #5
    51b8:	4413      	add	r3, r2
    51ba:	3301      	adds	r3, #1
    51bc:	781b      	ldrb	r3, [r3, #0]
    51be:	79fa      	ldrb	r2, [r7, #7]
    51c0:	429a      	cmp	r2, r3
    51c2:	d102      	bne.n	51ca <_usb_d_find_ep+0x2a>
			return i;
    51c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51c8:	e022      	b.n	5210 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    51ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51ce:	4a13      	ldr	r2, [pc, #76]	; (521c <_usb_d_find_ep+0x7c>)
    51d0:	015b      	lsls	r3, r3, #5
    51d2:	4413      	add	r3, r2
    51d4:	781b      	ldrb	r3, [r3, #0]
    51d6:	2b00      	cmp	r3, #0
    51d8:	d10e      	bne.n	51f8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    51da:	79fb      	ldrb	r3, [r7, #7]
    51dc:	f003 030f 	and.w	r3, r3, #15
    51e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    51e4:	490d      	ldr	r1, [pc, #52]	; (521c <_usb_d_find_ep+0x7c>)
    51e6:	0152      	lsls	r2, r2, #5
    51e8:	440a      	add	r2, r1
    51ea:	3201      	adds	r2, #1
    51ec:	7812      	ldrb	r2, [r2, #0]
    51ee:	4293      	cmp	r3, r2
    51f0:	d102      	bne.n	51f8 <_usb_d_find_ep+0x58>
			return i;
    51f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51f6:	e00b      	b.n	5210 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    51f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51fc:	b2db      	uxtb	r3, r3
    51fe:	3301      	adds	r3, #1
    5200:	b2db      	uxtb	r3, r3
    5202:	73fb      	strb	r3, [r7, #15]
    5204:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5208:	2b03      	cmp	r3, #3
    520a:	ddd1      	ble.n	51b0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    520c:	f04f 33ff 	mov.w	r3, #4294967295
}
    5210:	4618      	mov	r0, r3
    5212:	3714      	adds	r7, #20
    5214:	46bd      	mov	sp, r7
    5216:	f85d 7b04 	ldr.w	r7, [sp], #4
    521a:	4770      	bx	lr
    521c:	20001d14 	.word	0x20001d14

00005220 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    5220:	b580      	push	{r7, lr}
    5222:	b088      	sub	sp, #32
    5224:	af00      	add	r7, sp, #0
    5226:	60ba      	str	r2, [r7, #8]
    5228:	607b      	str	r3, [r7, #4]
    522a:	4603      	mov	r3, r0
    522c:	73fb      	strb	r3, [r7, #15]
    522e:	460b      	mov	r3, r1
    5230:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    5232:	68bb      	ldr	r3, [r7, #8]
    5234:	617b      	str	r3, [r7, #20]
    5236:	687b      	ldr	r3, [r7, #4]
    5238:	61bb      	str	r3, [r7, #24]
    523a:	7bbb      	ldrb	r3, [r7, #14]
    523c:	2b00      	cmp	r3, #0
    523e:	d004      	beq.n	524a <_usb_d_trans+0x2a>
    5240:	7bfb      	ldrb	r3, [r7, #15]
    5242:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5246:	b2db      	uxtb	r3, r3
    5248:	e003      	b.n	5252 <_usb_d_trans+0x32>
    524a:	7bfb      	ldrb	r3, [r7, #15]
    524c:	f003 030f 	and.w	r3, r3, #15
    5250:	b2db      	uxtb	r3, r3
    5252:	773b      	strb	r3, [r7, #28]
    5254:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    5258:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    525a:	f107 0314 	add.w	r3, r7, #20
    525e:	4618      	mov	r0, r3
    5260:	4b03      	ldr	r3, [pc, #12]	; (5270 <_usb_d_trans+0x50>)
    5262:	4798      	blx	r3
    5264:	4603      	mov	r3, r0
}
    5266:	4618      	mov	r0, r3
    5268:	3720      	adds	r7, #32
    526a:	46bd      	mov	sp, r7
    526c:	bd80      	pop	{r7, pc}
    526e:	bf00      	nop
    5270:	0000cc69 	.word	0x0000cc69

00005274 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    5274:	b480      	push	{r7}
    5276:	b085      	sub	sp, #20
    5278:	af00      	add	r7, sp, #0
    527a:	60f8      	str	r0, [r7, #12]
    527c:	60b9      	str	r1, [r7, #8]
    527e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    5280:	2300      	movs	r3, #0
}
    5282:	4618      	mov	r0, r3
    5284:	3714      	adds	r7, #20
    5286:	46bd      	mov	sp, r7
    5288:	f85d 7b04 	ldr.w	r7, [sp], #4
    528c:	4770      	bx	lr
	...

00005290 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    5290:	b580      	push	{r7, lr}
    5292:	b086      	sub	sp, #24
    5294:	af00      	add	r7, sp, #0
    5296:	4603      	mov	r3, r0
    5298:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    529a:	79fb      	ldrb	r3, [r7, #7]
    529c:	4618      	mov	r0, r3
    529e:	4b2a      	ldr	r3, [pc, #168]	; (5348 <usb_d_cb_trans_setup+0xb8>)
    52a0:	4798      	blx	r3
    52a2:	4603      	mov	r3, r0
    52a4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    52a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    52aa:	015b      	lsls	r3, r3, #5
    52ac:	4a27      	ldr	r2, [pc, #156]	; (534c <usb_d_cb_trans_setup+0xbc>)
    52ae:	4413      	add	r3, r2
    52b0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    52b2:	693b      	ldr	r3, [r7, #16]
    52b4:	330c      	adds	r3, #12
    52b6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    52b8:	79fb      	ldrb	r3, [r7, #7]
    52ba:	68f9      	ldr	r1, [r7, #12]
    52bc:	4618      	mov	r0, r3
    52be:	4b24      	ldr	r3, [pc, #144]	; (5350 <usb_d_cb_trans_setup+0xc0>)
    52c0:	4798      	blx	r3
    52c2:	4603      	mov	r3, r0
    52c4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    52c6:	7afb      	ldrb	r3, [r7, #11]
    52c8:	2b08      	cmp	r3, #8
    52ca:	d00d      	beq.n	52e8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    52cc:	79fb      	ldrb	r3, [r7, #7]
    52ce:	2101      	movs	r1, #1
    52d0:	4618      	mov	r0, r3
    52d2:	4b20      	ldr	r3, [pc, #128]	; (5354 <usb_d_cb_trans_setup+0xc4>)
    52d4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    52d6:	79fb      	ldrb	r3, [r7, #7]
    52d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    52dc:	b2db      	uxtb	r3, r3
    52de:	2101      	movs	r1, #1
    52e0:	4618      	mov	r0, r3
    52e2:	4b1c      	ldr	r3, [pc, #112]	; (5354 <usb_d_cb_trans_setup+0xc4>)
    52e4:	4798      	blx	r3
		return;
    52e6:	e02b      	b.n	5340 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    52e8:	79fb      	ldrb	r3, [r7, #7]
    52ea:	2100      	movs	r1, #0
    52ec:	4618      	mov	r0, r3
    52ee:	4b19      	ldr	r3, [pc, #100]	; (5354 <usb_d_cb_trans_setup+0xc4>)
    52f0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    52f2:	79fb      	ldrb	r3, [r7, #7]
    52f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    52f8:	b2db      	uxtb	r3, r3
    52fa:	2100      	movs	r1, #0
    52fc:	4618      	mov	r0, r3
    52fe:	4b15      	ldr	r3, [pc, #84]	; (5354 <usb_d_cb_trans_setup+0xc4>)
    5300:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5302:	693b      	ldr	r3, [r7, #16]
    5304:	2201      	movs	r2, #1
    5306:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    5308:	693b      	ldr	r3, [r7, #16]
    530a:	695b      	ldr	r3, [r3, #20]
    530c:	79fa      	ldrb	r2, [r7, #7]
    530e:	68f9      	ldr	r1, [r7, #12]
    5310:	4610      	mov	r0, r2
    5312:	4798      	blx	r3
    5314:	4603      	mov	r3, r0
    5316:	f083 0301 	eor.w	r3, r3, #1
    531a:	b2db      	uxtb	r3, r3
    531c:	2b00      	cmp	r3, #0
    531e:	d00f      	beq.n	5340 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5320:	693b      	ldr	r3, [r7, #16]
    5322:	2205      	movs	r2, #5
    5324:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5326:	79fb      	ldrb	r3, [r7, #7]
    5328:	2101      	movs	r1, #1
    532a:	4618      	mov	r0, r3
    532c:	4b09      	ldr	r3, [pc, #36]	; (5354 <usb_d_cb_trans_setup+0xc4>)
    532e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5330:	79fb      	ldrb	r3, [r7, #7]
    5332:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5336:	b2db      	uxtb	r3, r3
    5338:	2101      	movs	r1, #1
    533a:	4618      	mov	r0, r3
    533c:	4b05      	ldr	r3, [pc, #20]	; (5354 <usb_d_cb_trans_setup+0xc4>)
    533e:	4798      	blx	r3
	}
}
    5340:	3718      	adds	r7, #24
    5342:	46bd      	mov	sp, r7
    5344:	bd80      	pop	{r7, pc}
    5346:	bf00      	nop
    5348:	000051a1 	.word	0x000051a1
    534c:	20001d14 	.word	0x20001d14
    5350:	0000cbc1 	.word	0x0000cbc1
    5354:	0000ca39 	.word	0x0000ca39

00005358 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5358:	b580      	push	{r7, lr}
    535a:	b084      	sub	sp, #16
    535c:	af00      	add	r7, sp, #0
    535e:	4603      	mov	r3, r0
    5360:	6039      	str	r1, [r7, #0]
    5362:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5364:	79fb      	ldrb	r3, [r7, #7]
    5366:	4618      	mov	r0, r3
    5368:	4b0d      	ldr	r3, [pc, #52]	; (53a0 <usb_d_cb_trans_more+0x48>)
    536a:	4798      	blx	r3
    536c:	4603      	mov	r3, r0
    536e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5370:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5374:	015b      	lsls	r3, r3, #5
    5376:	4a0b      	ldr	r2, [pc, #44]	; (53a4 <usb_d_cb_trans_more+0x4c>)
    5378:	4413      	add	r3, r2
    537a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    537c:	68bb      	ldr	r3, [r7, #8]
    537e:	789b      	ldrb	r3, [r3, #2]
    5380:	2b03      	cmp	r3, #3
    5382:	d107      	bne.n	5394 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    5384:	68bb      	ldr	r3, [r7, #8]
    5386:	699b      	ldr	r3, [r3, #24]
    5388:	79fa      	ldrb	r2, [r7, #7]
    538a:	6839      	ldr	r1, [r7, #0]
    538c:	4610      	mov	r0, r2
    538e:	4798      	blx	r3
    5390:	4603      	mov	r3, r0
    5392:	e000      	b.n	5396 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    5394:	2300      	movs	r3, #0
}
    5396:	4618      	mov	r0, r3
    5398:	3710      	adds	r7, #16
    539a:	46bd      	mov	sp, r7
    539c:	bd80      	pop	{r7, pc}
    539e:	bf00      	nop
    53a0:	000051a1 	.word	0x000051a1
    53a4:	20001d14 	.word	0x20001d14

000053a8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    53a8:	b590      	push	{r4, r7, lr}
    53aa:	b087      	sub	sp, #28
    53ac:	af02      	add	r7, sp, #8
    53ae:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    53b0:	687b      	ldr	r3, [r7, #4]
    53b2:	789b      	ldrb	r3, [r3, #2]
    53b4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    53b6:	687b      	ldr	r3, [r7, #4]
    53b8:	7b1b      	ldrb	r3, [r3, #12]
    53ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    53be:	2b00      	cmp	r3, #0
    53c0:	bf14      	ite	ne
    53c2:	2301      	movne	r3, #1
    53c4:	2300      	moveq	r3, #0
    53c6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    53c8:	7bfb      	ldrb	r3, [r7, #15]
    53ca:	2b03      	cmp	r3, #3
    53cc:	d13a      	bne.n	5444 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    53ce:	687b      	ldr	r3, [r7, #4]
    53d0:	69db      	ldr	r3, [r3, #28]
    53d2:	687a      	ldr	r2, [r7, #4]
    53d4:	7850      	ldrb	r0, [r2, #1]
    53d6:	687a      	ldr	r2, [r7, #4]
    53d8:	320c      	adds	r2, #12
    53da:	2101      	movs	r1, #1
    53dc:	4798      	blx	r3
    53de:	4603      	mov	r3, r0
    53e0:	737b      	strb	r3, [r7, #13]
		if (err) {
    53e2:	7b7b      	ldrb	r3, [r7, #13]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d015      	beq.n	5414 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    53e8:	687b      	ldr	r3, [r7, #4]
    53ea:	2205      	movs	r2, #5
    53ec:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    53ee:	687b      	ldr	r3, [r7, #4]
    53f0:	2202      	movs	r2, #2
    53f2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    53f4:	7bbb      	ldrb	r3, [r7, #14]
    53f6:	2b00      	cmp	r3, #0
    53f8:	d002      	beq.n	5400 <usb_d_ctrl_trans_done+0x58>
    53fa:	687b      	ldr	r3, [r7, #4]
    53fc:	785b      	ldrb	r3, [r3, #1]
    53fe:	e004      	b.n	540a <usb_d_ctrl_trans_done+0x62>
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	785b      	ldrb	r3, [r3, #1]
    5404:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5408:	b2db      	uxtb	r3, r3
    540a:	2101      	movs	r1, #1
    540c:	4618      	mov	r0, r3
    540e:	4b15      	ldr	r3, [pc, #84]	; (5464 <usb_d_ctrl_trans_done+0xbc>)
    5410:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    5412:	e022      	b.n	545a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	2204      	movs	r2, #4
    5418:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    541a:	687b      	ldr	r3, [r7, #4]
    541c:	7858      	ldrb	r0, [r3, #1]
    541e:	7bbb      	ldrb	r3, [r7, #14]
    5420:	2b00      	cmp	r3, #0
    5422:	bf14      	ite	ne
    5424:	2301      	movne	r3, #1
    5426:	2300      	moveq	r3, #0
    5428:	b2db      	uxtb	r3, r3
    542a:	f083 0301 	eor.w	r3, r3, #1
    542e:	b2db      	uxtb	r3, r3
    5430:	f003 0301 	and.w	r3, r3, #1
    5434:	b2d9      	uxtb	r1, r3
    5436:	2301      	movs	r3, #1
    5438:	9300      	str	r3, [sp, #0]
    543a:	2300      	movs	r3, #0
    543c:	2200      	movs	r2, #0
    543e:	4c0a      	ldr	r4, [pc, #40]	; (5468 <usb_d_ctrl_trans_done+0xc0>)
    5440:	47a0      	blx	r4
}
    5442:	e00a      	b.n	545a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5444:	687b      	ldr	r3, [r7, #4]
    5446:	69db      	ldr	r3, [r3, #28]
    5448:	687a      	ldr	r2, [r7, #4]
    544a:	7850      	ldrb	r0, [r2, #1]
    544c:	687a      	ldr	r2, [r7, #4]
    544e:	320c      	adds	r2, #12
    5450:	2100      	movs	r1, #0
    5452:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5454:	687b      	ldr	r3, [r7, #4]
    5456:	2202      	movs	r2, #2
    5458:	709a      	strb	r2, [r3, #2]
}
    545a:	bf00      	nop
    545c:	3714      	adds	r7, #20
    545e:	46bd      	mov	sp, r7
    5460:	bd90      	pop	{r4, r7, pc}
    5462:	bf00      	nop
    5464:	0000ca39 	.word	0x0000ca39
    5468:	00005221 	.word	0x00005221

0000546c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    546c:	b580      	push	{r7, lr}
    546e:	b086      	sub	sp, #24
    5470:	af00      	add	r7, sp, #0
    5472:	4603      	mov	r3, r0
    5474:	60b9      	str	r1, [r7, #8]
    5476:	607a      	str	r2, [r7, #4]
    5478:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    547a:	7bfb      	ldrb	r3, [r7, #15]
    547c:	4618      	mov	r0, r3
    547e:	4b2f      	ldr	r3, [pc, #188]	; (553c <_usb_d_cb_trans_done+0xd0>)
    5480:	4798      	blx	r3
    5482:	4603      	mov	r3, r0
    5484:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5486:	f997 3017 	ldrsb.w	r3, [r7, #23]
    548a:	015b      	lsls	r3, r3, #5
    548c:	4a2c      	ldr	r2, [pc, #176]	; (5540 <_usb_d_cb_trans_done+0xd4>)
    548e:	4413      	add	r3, r2
    5490:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    5492:	68bb      	ldr	r3, [r7, #8]
    5494:	2b00      	cmp	r3, #0
    5496:	d10e      	bne.n	54b6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5498:	693b      	ldr	r3, [r7, #16]
    549a:	2200      	movs	r2, #0
    549c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    549e:	693b      	ldr	r3, [r7, #16]
    54a0:	781b      	ldrb	r3, [r3, #0]
    54a2:	2b00      	cmp	r3, #0
    54a4:	d103      	bne.n	54ae <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    54a6:	6938      	ldr	r0, [r7, #16]
    54a8:	4b26      	ldr	r3, [pc, #152]	; (5544 <_usb_d_cb_trans_done+0xd8>)
    54aa:	4798      	blx	r3
			return;
    54ac:	e043      	b.n	5536 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    54ae:	693b      	ldr	r3, [r7, #16]
    54b0:	2201      	movs	r2, #1
    54b2:	709a      	strb	r2, [r3, #2]
    54b4:	e038      	b.n	5528 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    54b6:	68bb      	ldr	r3, [r7, #8]
    54b8:	2b01      	cmp	r3, #1
    54ba:	d113      	bne.n	54e4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    54bc:	693b      	ldr	r3, [r7, #16]
    54be:	2202      	movs	r2, #2
    54c0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    54c2:	693b      	ldr	r3, [r7, #16]
    54c4:	781b      	ldrb	r3, [r3, #0]
    54c6:	2b00      	cmp	r3, #0
    54c8:	d108      	bne.n	54dc <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    54ca:	693b      	ldr	r3, [r7, #16]
    54cc:	2202      	movs	r2, #2
    54ce:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    54d0:	7bfb      	ldrb	r3, [r7, #15]
    54d2:	2100      	movs	r1, #0
    54d4:	4618      	mov	r0, r3
    54d6:	4b1c      	ldr	r3, [pc, #112]	; (5548 <_usb_d_cb_trans_done+0xdc>)
    54d8:	4798      	blx	r3
    54da:	e025      	b.n	5528 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    54dc:	693b      	ldr	r3, [r7, #16]
    54de:	2205      	movs	r2, #5
    54e0:	709a      	strb	r2, [r3, #2]
    54e2:	e021      	b.n	5528 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    54e4:	68bb      	ldr	r3, [r7, #8]
    54e6:	2b02      	cmp	r3, #2
    54e8:	d10e      	bne.n	5508 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    54ea:	693b      	ldr	r3, [r7, #16]
    54ec:	2204      	movs	r2, #4
    54ee:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    54f0:	693b      	ldr	r3, [r7, #16]
    54f2:	781b      	ldrb	r3, [r3, #0]
    54f4:	2b00      	cmp	r3, #0
    54f6:	d103      	bne.n	5500 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    54f8:	693b      	ldr	r3, [r7, #16]
    54fa:	2202      	movs	r2, #2
    54fc:	709a      	strb	r2, [r3, #2]
			return;
    54fe:	e01a      	b.n	5536 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5500:	693b      	ldr	r3, [r7, #16]
    5502:	2201      	movs	r2, #1
    5504:	709a      	strb	r2, [r3, #2]
    5506:	e00f      	b.n	5528 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    5508:	68bb      	ldr	r3, [r7, #8]
    550a:	2b03      	cmp	r3, #3
    550c:	d106      	bne.n	551c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    550e:	693b      	ldr	r3, [r7, #16]
    5510:	2200      	movs	r2, #0
    5512:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    5514:	693b      	ldr	r3, [r7, #16]
    5516:	2205      	movs	r2, #5
    5518:	70da      	strb	r2, [r3, #3]
    551a:	e005      	b.n	5528 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    551c:	693b      	ldr	r3, [r7, #16]
    551e:	2206      	movs	r2, #6
    5520:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5522:	693b      	ldr	r3, [r7, #16]
    5524:	2206      	movs	r2, #6
    5526:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5528:	693b      	ldr	r3, [r7, #16]
    552a:	69db      	ldr	r3, [r3, #28]
    552c:	693a      	ldr	r2, [r7, #16]
    552e:	78d1      	ldrb	r1, [r2, #3]
    5530:	687a      	ldr	r2, [r7, #4]
    5532:	7bf8      	ldrb	r0, [r7, #15]
    5534:	4798      	blx	r3
}
    5536:	3718      	adds	r7, #24
    5538:	46bd      	mov	sp, r7
    553a:	bd80      	pop	{r7, pc}
    553c:	000051a1 	.word	0x000051a1
    5540:	20001d14 	.word	0x20001d14
    5544:	000053a9 	.word	0x000053a9
    5548:	0000ca39 	.word	0x0000ca39

0000554c <usb_d_init>:

int32_t usb_d_init(void)
{
    554c:	b580      	push	{r7, lr}
    554e:	b082      	sub	sp, #8
    5550:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    5552:	4b21      	ldr	r3, [pc, #132]	; (55d8 <usb_d_init+0x8c>)
    5554:	4798      	blx	r3
    5556:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    5558:	683b      	ldr	r3, [r7, #0]
    555a:	2b00      	cmp	r3, #0
    555c:	da01      	bge.n	5562 <usb_d_init+0x16>
		return rc;
    555e:	683b      	ldr	r3, [r7, #0]
    5560:	e036      	b.n	55d0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5562:	2280      	movs	r2, #128	; 0x80
    5564:	2100      	movs	r1, #0
    5566:	481d      	ldr	r0, [pc, #116]	; (55dc <usb_d_init+0x90>)
    5568:	4b1d      	ldr	r3, [pc, #116]	; (55e0 <usb_d_init+0x94>)
    556a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    556c:	2300      	movs	r3, #0
    556e:	71fb      	strb	r3, [r7, #7]
    5570:	e01e      	b.n	55b0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5572:	79fb      	ldrb	r3, [r7, #7]
    5574:	4a19      	ldr	r2, [pc, #100]	; (55dc <usb_d_init+0x90>)
    5576:	015b      	lsls	r3, r3, #5
    5578:	4413      	add	r3, r2
    557a:	3301      	adds	r3, #1
    557c:	22ff      	movs	r2, #255	; 0xff
    557e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5580:	79fb      	ldrb	r3, [r7, #7]
    5582:	4a16      	ldr	r2, [pc, #88]	; (55dc <usb_d_init+0x90>)
    5584:	015b      	lsls	r3, r3, #5
    5586:	4413      	add	r3, r2
    5588:	3314      	adds	r3, #20
    558a:	4a16      	ldr	r2, [pc, #88]	; (55e4 <usb_d_init+0x98>)
    558c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    558e:	79fb      	ldrb	r3, [r7, #7]
    5590:	4a12      	ldr	r2, [pc, #72]	; (55dc <usb_d_init+0x90>)
    5592:	015b      	lsls	r3, r3, #5
    5594:	4413      	add	r3, r2
    5596:	3318      	adds	r3, #24
    5598:	4a12      	ldr	r2, [pc, #72]	; (55e4 <usb_d_init+0x98>)
    559a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    559c:	79fb      	ldrb	r3, [r7, #7]
    559e:	4a0f      	ldr	r2, [pc, #60]	; (55dc <usb_d_init+0x90>)
    55a0:	015b      	lsls	r3, r3, #5
    55a2:	4413      	add	r3, r2
    55a4:	331c      	adds	r3, #28
    55a6:	4a0f      	ldr	r2, [pc, #60]	; (55e4 <usb_d_init+0x98>)
    55a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    55aa:	79fb      	ldrb	r3, [r7, #7]
    55ac:	3301      	adds	r3, #1
    55ae:	71fb      	strb	r3, [r7, #7]
    55b0:	79fb      	ldrb	r3, [r7, #7]
    55b2:	2b03      	cmp	r3, #3
    55b4:	d9dd      	bls.n	5572 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    55b6:	490c      	ldr	r1, [pc, #48]	; (55e8 <usb_d_init+0x9c>)
    55b8:	2000      	movs	r0, #0
    55ba:	4b0c      	ldr	r3, [pc, #48]	; (55ec <usb_d_init+0xa0>)
    55bc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    55be:	490c      	ldr	r1, [pc, #48]	; (55f0 <usb_d_init+0xa4>)
    55c0:	2001      	movs	r0, #1
    55c2:	4b0a      	ldr	r3, [pc, #40]	; (55ec <usb_d_init+0xa0>)
    55c4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    55c6:	490b      	ldr	r1, [pc, #44]	; (55f4 <usb_d_init+0xa8>)
    55c8:	2002      	movs	r0, #2
    55ca:	4b08      	ldr	r3, [pc, #32]	; (55ec <usb_d_init+0xa0>)
    55cc:	4798      	blx	r3
	return ERR_NONE;
    55ce:	2300      	movs	r3, #0
}
    55d0:	4618      	mov	r0, r3
    55d2:	3708      	adds	r7, #8
    55d4:	46bd      	mov	sp, r7
    55d6:	bd80      	pop	{r7, pc}
    55d8:	0000c281 	.word	0x0000c281
    55dc:	20001d14 	.word	0x20001d14
    55e0:	0000fb25 	.word	0x0000fb25
    55e4:	00005275 	.word	0x00005275
    55e8:	00005291 	.word	0x00005291
    55ec:	0000cec9 	.word	0x0000cec9
    55f0:	00005359 	.word	0x00005359
    55f4:	0000546d 	.word	0x0000546d

000055f8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b082      	sub	sp, #8
    55fc:	af00      	add	r7, sp, #0
    55fe:	4603      	mov	r3, r0
    5600:	6039      	str	r1, [r7, #0]
    5602:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5604:	79fb      	ldrb	r3, [r7, #7]
    5606:	6839      	ldr	r1, [r7, #0]
    5608:	4618      	mov	r0, r3
    560a:	4b03      	ldr	r3, [pc, #12]	; (5618 <usb_d_register_callback+0x20>)
    560c:	4798      	blx	r3
}
    560e:	bf00      	nop
    5610:	3708      	adds	r7, #8
    5612:	46bd      	mov	sp, r7
    5614:	bd80      	pop	{r7, pc}
    5616:	bf00      	nop
    5618:	0000ce81 	.word	0x0000ce81

0000561c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    561c:	b580      	push	{r7, lr}
    561e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    5620:	4b02      	ldr	r3, [pc, #8]	; (562c <usb_d_enable+0x10>)
    5622:	4798      	blx	r3
    5624:	4603      	mov	r3, r0
}
    5626:	4618      	mov	r0, r3
    5628:	bd80      	pop	{r7, pc}
    562a:	bf00      	nop
    562c:	0000c371 	.word	0x0000c371

00005630 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5630:	b580      	push	{r7, lr}
    5632:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    5634:	4b01      	ldr	r3, [pc, #4]	; (563c <usb_d_attach+0xc>)
    5636:	4798      	blx	r3
}
    5638:	bf00      	nop
    563a:	bd80      	pop	{r7, pc}
    563c:	0000c3f5 	.word	0x0000c3f5

00005640 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    5646:	4603      	mov	r3, r0
    5648:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    564a:	79fb      	ldrb	r3, [r7, #7]
    564c:	4618      	mov	r0, r3
    564e:	4b03      	ldr	r3, [pc, #12]	; (565c <usb_d_set_address+0x1c>)
    5650:	4798      	blx	r3
}
    5652:	bf00      	nop
    5654:	3708      	adds	r7, #8
    5656:	46bd      	mov	sp, r7
    5658:	bd80      	pop	{r7, pc}
    565a:	bf00      	nop
    565c:	0000c409 	.word	0x0000c409

00005660 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    5660:	b580      	push	{r7, lr}
    5662:	b082      	sub	sp, #8
    5664:	af00      	add	r7, sp, #0
    5666:	4603      	mov	r3, r0
    5668:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    566a:	79fb      	ldrb	r3, [r7, #7]
    566c:	b29b      	uxth	r3, r3
    566e:	461a      	mov	r2, r3
    5670:	2100      	movs	r1, #0
    5672:	2000      	movs	r0, #0
    5674:	4b03      	ldr	r3, [pc, #12]	; (5684 <usb_d_ep0_init+0x24>)
    5676:	4798      	blx	r3
    5678:	4603      	mov	r3, r0
}
    567a:	4618      	mov	r0, r3
    567c:	3708      	adds	r7, #8
    567e:	46bd      	mov	sp, r7
    5680:	bd80      	pop	{r7, pc}
    5682:	bf00      	nop
    5684:	00005689 	.word	0x00005689

00005688 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5688:	b580      	push	{r7, lr}
    568a:	b086      	sub	sp, #24
    568c:	af00      	add	r7, sp, #0
    568e:	4603      	mov	r3, r0
    5690:	71fb      	strb	r3, [r7, #7]
    5692:	460b      	mov	r3, r1
    5694:	71bb      	strb	r3, [r7, #6]
    5696:	4613      	mov	r3, r2
    5698:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    569a:	79fb      	ldrb	r3, [r7, #7]
    569c:	4618      	mov	r0, r3
    569e:	4b1e      	ldr	r3, [pc, #120]	; (5718 <usb_d_ep_init+0x90>)
    56a0:	4798      	blx	r3
    56a2:	4603      	mov	r3, r0
    56a4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    56a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    56aa:	015b      	lsls	r3, r3, #5
    56ac:	4a1b      	ldr	r2, [pc, #108]	; (571c <usb_d_ep_init+0x94>)
    56ae:	4413      	add	r3, r2
    56b0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    56b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    56b6:	2b00      	cmp	r3, #0
    56b8:	db02      	blt.n	56c0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    56ba:	f06f 0313 	mvn.w	r3, #19
    56be:	e027      	b.n	5710 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    56c0:	20ff      	movs	r0, #255	; 0xff
    56c2:	4b15      	ldr	r3, [pc, #84]	; (5718 <usb_d_ep_init+0x90>)
    56c4:	4798      	blx	r3
    56c6:	4603      	mov	r3, r0
    56c8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    56ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    56ce:	2b00      	cmp	r3, #0
    56d0:	da02      	bge.n	56d8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    56d2:	f06f 0314 	mvn.w	r3, #20
    56d6:	e01b      	b.n	5710 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    56d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    56dc:	015b      	lsls	r3, r3, #5
    56de:	4a0f      	ldr	r2, [pc, #60]	; (571c <usb_d_ep_init+0x94>)
    56e0:	4413      	add	r3, r2
    56e2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    56e4:	88ba      	ldrh	r2, [r7, #4]
    56e6:	79b9      	ldrb	r1, [r7, #6]
    56e8:	79fb      	ldrb	r3, [r7, #7]
    56ea:	4618      	mov	r0, r3
    56ec:	4b0c      	ldr	r3, [pc, #48]	; (5720 <usb_d_ep_init+0x98>)
    56ee:	4798      	blx	r3
    56f0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    56f2:	68fb      	ldr	r3, [r7, #12]
    56f4:	2b00      	cmp	r3, #0
    56f6:	da01      	bge.n	56fc <usb_d_ep_init+0x74>
		return rc;
    56f8:	68fb      	ldr	r3, [r7, #12]
    56fa:	e009      	b.n	5710 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    56fc:	693b      	ldr	r3, [r7, #16]
    56fe:	79fa      	ldrb	r2, [r7, #7]
    5700:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5702:	79bb      	ldrb	r3, [r7, #6]
    5704:	f003 0303 	and.w	r3, r3, #3
    5708:	b2da      	uxtb	r2, r3
    570a:	693b      	ldr	r3, [r7, #16]
    570c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    570e:	2300      	movs	r3, #0
}
    5710:	4618      	mov	r0, r3
    5712:	3718      	adds	r7, #24
    5714:	46bd      	mov	sp, r7
    5716:	bd80      	pop	{r7, pc}
    5718:	000051a1 	.word	0x000051a1
    571c:	20001d14 	.word	0x20001d14
    5720:	0000c4a9 	.word	0x0000c4a9

00005724 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5724:	b580      	push	{r7, lr}
    5726:	b084      	sub	sp, #16
    5728:	af00      	add	r7, sp, #0
    572a:	4603      	mov	r3, r0
    572c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    572e:	79fb      	ldrb	r3, [r7, #7]
    5730:	4618      	mov	r0, r3
    5732:	4b0d      	ldr	r3, [pc, #52]	; (5768 <usb_d_ep_deinit+0x44>)
    5734:	4798      	blx	r3
    5736:	4603      	mov	r3, r0
    5738:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    573a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    573e:	015b      	lsls	r3, r3, #5
    5740:	4a0a      	ldr	r2, [pc, #40]	; (576c <usb_d_ep_deinit+0x48>)
    5742:	4413      	add	r3, r2
    5744:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5746:	f997 300f 	ldrsb.w	r3, [r7, #15]
    574a:	2b00      	cmp	r3, #0
    574c:	db07      	blt.n	575e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    574e:	79fb      	ldrb	r3, [r7, #7]
    5750:	4618      	mov	r0, r3
    5752:	4b07      	ldr	r3, [pc, #28]	; (5770 <usb_d_ep_deinit+0x4c>)
    5754:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5756:	68bb      	ldr	r3, [r7, #8]
    5758:	22ff      	movs	r2, #255	; 0xff
    575a:	705a      	strb	r2, [r3, #1]
    575c:	e000      	b.n	5760 <usb_d_ep_deinit+0x3c>
		return;
    575e:	bf00      	nop
}
    5760:	3710      	adds	r7, #16
    5762:	46bd      	mov	sp, r7
    5764:	bd80      	pop	{r7, pc}
    5766:	bf00      	nop
    5768:	000051a1 	.word	0x000051a1
    576c:	20001d14 	.word	0x20001d14
    5770:	0000c5dd 	.word	0x0000c5dd

00005774 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5774:	b580      	push	{r7, lr}
    5776:	b086      	sub	sp, #24
    5778:	af00      	add	r7, sp, #0
    577a:	4603      	mov	r3, r0
    577c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    577e:	79fb      	ldrb	r3, [r7, #7]
    5780:	4618      	mov	r0, r3
    5782:	4b15      	ldr	r3, [pc, #84]	; (57d8 <usb_d_ep_enable+0x64>)
    5784:	4798      	blx	r3
    5786:	4603      	mov	r3, r0
    5788:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    578a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    578e:	015b      	lsls	r3, r3, #5
    5790:	4a12      	ldr	r2, [pc, #72]	; (57dc <usb_d_ep_enable+0x68>)
    5792:	4413      	add	r3, r2
    5794:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5796:	f997 3017 	ldrsb.w	r3, [r7, #23]
    579a:	2b00      	cmp	r3, #0
    579c:	da02      	bge.n	57a4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    579e:	f06f 0311 	mvn.w	r3, #17
    57a2:	e014      	b.n	57ce <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    57a4:	693b      	ldr	r3, [r7, #16]
    57a6:	781b      	ldrb	r3, [r3, #0]
    57a8:	2b00      	cmp	r3, #0
    57aa:	d101      	bne.n	57b0 <usb_d_ep_enable+0x3c>
    57ac:	2202      	movs	r2, #2
    57ae:	e000      	b.n	57b2 <usb_d_ep_enable+0x3e>
    57b0:	2201      	movs	r2, #1
    57b2:	693b      	ldr	r3, [r7, #16]
    57b4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    57b6:	79fb      	ldrb	r3, [r7, #7]
    57b8:	4618      	mov	r0, r3
    57ba:	4b09      	ldr	r3, [pc, #36]	; (57e0 <usb_d_ep_enable+0x6c>)
    57bc:	4798      	blx	r3
    57be:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    57c0:	68fb      	ldr	r3, [r7, #12]
    57c2:	2b00      	cmp	r3, #0
    57c4:	da02      	bge.n	57cc <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    57c6:	693b      	ldr	r3, [r7, #16]
    57c8:	2200      	movs	r2, #0
    57ca:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    57cc:	68fb      	ldr	r3, [r7, #12]
}
    57ce:	4618      	mov	r0, r3
    57d0:	3718      	adds	r7, #24
    57d2:	46bd      	mov	sp, r7
    57d4:	bd80      	pop	{r7, pc}
    57d6:	bf00      	nop
    57d8:	000051a1 	.word	0x000051a1
    57dc:	20001d14 	.word	0x20001d14
    57e0:	0000c6c1 	.word	0x0000c6c1

000057e4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    57e4:	b590      	push	{r4, r7, lr}
    57e6:	b08d      	sub	sp, #52	; 0x34
    57e8:	af02      	add	r7, sp, #8
    57ea:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	7a1b      	ldrb	r3, [r3, #8]
    57f0:	4618      	mov	r0, r3
    57f2:	4b51      	ldr	r3, [pc, #324]	; (5938 <usb_d_ep_transfer+0x154>)
    57f4:	4798      	blx	r3
    57f6:	4603      	mov	r3, r0
    57f8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    57fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
    57fe:	015b      	lsls	r3, r3, #5
    5800:	4a4e      	ldr	r2, [pc, #312]	; (593c <usb_d_ep_transfer+0x158>)
    5802:	4413      	add	r3, r2
    5804:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5806:	687b      	ldr	r3, [r7, #4]
    5808:	7a1b      	ldrb	r3, [r3, #8]
    580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    580e:	2b00      	cmp	r3, #0
    5810:	bf14      	ite	ne
    5812:	2301      	movne	r3, #1
    5814:	2300      	moveq	r3, #0
    5816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    581a:	687b      	ldr	r3, [r7, #4]
    581c:	7a5b      	ldrb	r3, [r3, #9]
    581e:	2b00      	cmp	r3, #0
    5820:	bf14      	ite	ne
    5822:	2301      	movne	r3, #1
    5824:	2300      	moveq	r3, #0
    5826:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    582a:	687b      	ldr	r3, [r7, #4]
    582c:	685b      	ldr	r3, [r3, #4]
    582e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5830:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5834:	2b00      	cmp	r3, #0
    5836:	da02      	bge.n	583e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    5838:	f06f 0311 	mvn.w	r3, #17
    583c:	e077      	b.n	592e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    583e:	f107 0308 	add.w	r3, r7, #8
    5842:	4618      	mov	r0, r3
    5844:	4b3e      	ldr	r3, [pc, #248]	; (5940 <usb_d_ep_transfer+0x15c>)
    5846:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5848:	69bb      	ldr	r3, [r7, #24]
    584a:	789b      	ldrb	r3, [r3, #2]
    584c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    584e:	7bfb      	ldrb	r3, [r7, #15]
    5850:	b2db      	uxtb	r3, r3
    5852:	2b01      	cmp	r3, #1
    5854:	d10c      	bne.n	5870 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    5856:	69bb      	ldr	r3, [r7, #24]
    5858:	2203      	movs	r2, #3
    585a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    585c:	f107 0308 	add.w	r3, r7, #8
    5860:	4618      	mov	r0, r3
    5862:	4b38      	ldr	r3, [pc, #224]	; (5944 <usb_d_ep_transfer+0x160>)
    5864:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5866:	69bb      	ldr	r3, [r7, #24]
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	2b00      	cmp	r3, #0
    586c:	d151      	bne.n	5912 <usb_d_ep_transfer+0x12e>
    586e:	e017      	b.n	58a0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    5870:	f107 0308 	add.w	r3, r7, #8
    5874:	4618      	mov	r0, r3
    5876:	4b33      	ldr	r3, [pc, #204]	; (5944 <usb_d_ep_transfer+0x160>)
    5878:	4798      	blx	r3
		switch (state) {
    587a:	7bfb      	ldrb	r3, [r7, #15]
    587c:	b2db      	uxtb	r3, r3
    587e:	2b05      	cmp	r3, #5
    5880:	d004      	beq.n	588c <usb_d_ep_transfer+0xa8>
    5882:	2b06      	cmp	r3, #6
    5884:	d004      	beq.n	5890 <usb_d_ep_transfer+0xac>
    5886:	2b00      	cmp	r3, #0
    5888:	d005      	beq.n	5896 <usb_d_ep_transfer+0xb2>
    588a:	e007      	b.n	589c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    588c:	2302      	movs	r3, #2
    588e:	e04e      	b.n	592e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    5890:	f06f 030f 	mvn.w	r3, #15
    5894:	e04b      	b.n	592e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    5896:	f06f 0312 	mvn.w	r3, #18
    589a:	e048      	b.n	592e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    589c:	2301      	movs	r3, #1
    589e:	e046      	b.n	592e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    58a0:	69bb      	ldr	r3, [r7, #24]
    58a2:	7c9b      	ldrb	r3, [r3, #18]
    58a4:	b29a      	uxth	r2, r3
    58a6:	69bb      	ldr	r3, [r7, #24]
    58a8:	7cdb      	ldrb	r3, [r3, #19]
    58aa:	b29b      	uxth	r3, r3
    58ac:	021b      	lsls	r3, r3, #8
    58ae:	b29b      	uxth	r3, r3
    58b0:	4413      	add	r3, r2
    58b2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    58b4:	8afb      	ldrh	r3, [r7, #22]
    58b6:	2b00      	cmp	r3, #0
    58b8:	d10b      	bne.n	58d2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    58ba:	2301      	movs	r3, #1
    58bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    58c0:	2300      	movs	r3, #0
    58c2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    58c4:	2301      	movs	r3, #1
    58c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    58ca:	69bb      	ldr	r3, [r7, #24]
    58cc:	2204      	movs	r2, #4
    58ce:	709a      	strb	r2, [r3, #2]
    58d0:	e01f      	b.n	5912 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    58d2:	69bb      	ldr	r3, [r7, #24]
    58d4:	7b1b      	ldrb	r3, [r3, #12]
    58d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    58da:	2b00      	cmp	r3, #0
    58dc:	bf14      	ite	ne
    58de:	2301      	movne	r3, #1
    58e0:	2300      	moveq	r3, #0
    58e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    58e6:	8afa      	ldrh	r2, [r7, #22]
    58e8:	6a3b      	ldr	r3, [r7, #32]
    58ea:	429a      	cmp	r2, r3
    58ec:	d201      	bcs.n	58f2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    58ee:	8afb      	ldrh	r3, [r7, #22]
    58f0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    58f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    58f6:	2b00      	cmp	r3, #0
    58f8:	d008      	beq.n	590c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    58fa:	8afa      	ldrh	r2, [r7, #22]
    58fc:	6a3b      	ldr	r3, [r7, #32]
    58fe:	429a      	cmp	r2, r3
    5900:	bf8c      	ite	hi
    5902:	2301      	movhi	r3, #1
    5904:	2300      	movls	r3, #0
    5906:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    590a:	e002      	b.n	5912 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    590c:	2300      	movs	r3, #0
    590e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	7a18      	ldrb	r0, [r3, #8]
    5916:	687b      	ldr	r3, [r7, #4]
    5918:	681a      	ldr	r2, [r3, #0]
    591a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    591e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    5922:	9300      	str	r3, [sp, #0]
    5924:	6a3b      	ldr	r3, [r7, #32]
    5926:	4c08      	ldr	r4, [pc, #32]	; (5948 <usb_d_ep_transfer+0x164>)
    5928:	47a0      	blx	r4
    592a:	6138      	str	r0, [r7, #16]
	return rc;
    592c:	693b      	ldr	r3, [r7, #16]
}
    592e:	4618      	mov	r0, r3
    5930:	372c      	adds	r7, #44	; 0x2c
    5932:	46bd      	mov	sp, r7
    5934:	bd90      	pop	{r4, r7, pc}
    5936:	bf00      	nop
    5938:	000051a1 	.word	0x000051a1
    593c:	20001d14 	.word	0x20001d14
    5940:	00003fb1 	.word	0x00003fb1
    5944:	00003fd7 	.word	0x00003fd7
    5948:	00005221 	.word	0x00005221

0000594c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    594c:	b580      	push	{r7, lr}
    594e:	b084      	sub	sp, #16
    5950:	af00      	add	r7, sp, #0
    5952:	4603      	mov	r3, r0
    5954:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5956:	79fb      	ldrb	r3, [r7, #7]
    5958:	4618      	mov	r0, r3
    595a:	4b0e      	ldr	r3, [pc, #56]	; (5994 <usb_d_ep_abort+0x48>)
    595c:	4798      	blx	r3
    595e:	4603      	mov	r3, r0
    5960:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5962:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5966:	015b      	lsls	r3, r3, #5
    5968:	4a0b      	ldr	r2, [pc, #44]	; (5998 <usb_d_ep_abort+0x4c>)
    596a:	4413      	add	r3, r2
    596c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    596e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5972:	2b00      	cmp	r3, #0
    5974:	db0a      	blt.n	598c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    5976:	79fb      	ldrb	r3, [r7, #7]
    5978:	4618      	mov	r0, r3
    597a:	4b08      	ldr	r3, [pc, #32]	; (599c <usb_d_ep_abort+0x50>)
    597c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    597e:	68bb      	ldr	r3, [r7, #8]
    5980:	2201      	movs	r2, #1
    5982:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    5984:	68bb      	ldr	r3, [r7, #8]
    5986:	2204      	movs	r2, #4
    5988:	70da      	strb	r2, [r3, #3]
    598a:	e000      	b.n	598e <usb_d_ep_abort+0x42>
		return;
    598c:	bf00      	nop
}
    598e:	3710      	adds	r7, #16
    5990:	46bd      	mov	sp, r7
    5992:	bd80      	pop	{r7, pc}
    5994:	000051a1 	.word	0x000051a1
    5998:	20001d14 	.word	0x20001d14
    599c:	0000ce2d 	.word	0x0000ce2d

000059a0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    59a0:	b580      	push	{r7, lr}
    59a2:	b086      	sub	sp, #24
    59a4:	af00      	add	r7, sp, #0
    59a6:	4603      	mov	r3, r0
    59a8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    59aa:	79fb      	ldrb	r3, [r7, #7]
    59ac:	4618      	mov	r0, r3
    59ae:	4b1a      	ldr	r3, [pc, #104]	; (5a18 <_usb_d_ep_halt_clr+0x78>)
    59b0:	4798      	blx	r3
    59b2:	4603      	mov	r3, r0
    59b4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    59b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    59ba:	015b      	lsls	r3, r3, #5
    59bc:	4a17      	ldr	r2, [pc, #92]	; (5a1c <_usb_d_ep_halt_clr+0x7c>)
    59be:	4413      	add	r3, r2
    59c0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    59c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    59c6:	2b00      	cmp	r3, #0
    59c8:	da02      	bge.n	59d0 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    59ca:	f06f 0311 	mvn.w	r3, #17
    59ce:	e01f      	b.n	5a10 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    59d0:	79fb      	ldrb	r3, [r7, #7]
    59d2:	2102      	movs	r1, #2
    59d4:	4618      	mov	r0, r3
    59d6:	4b12      	ldr	r3, [pc, #72]	; (5a20 <_usb_d_ep_halt_clr+0x80>)
    59d8:	4798      	blx	r3
    59da:	4603      	mov	r3, r0
    59dc:	2b00      	cmp	r3, #0
    59de:	d016      	beq.n	5a0e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    59e0:	79fb      	ldrb	r3, [r7, #7]
    59e2:	2100      	movs	r1, #0
    59e4:	4618      	mov	r0, r3
    59e6:	4b0e      	ldr	r3, [pc, #56]	; (5a20 <_usb_d_ep_halt_clr+0x80>)
    59e8:	4798      	blx	r3
    59ea:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    59ec:	68fb      	ldr	r3, [r7, #12]
    59ee:	2b00      	cmp	r3, #0
    59f0:	da01      	bge.n	59f6 <_usb_d_ep_halt_clr+0x56>
			return rc;
    59f2:	68fb      	ldr	r3, [r7, #12]
    59f4:	e00c      	b.n	5a10 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    59f6:	693b      	ldr	r3, [r7, #16]
    59f8:	2201      	movs	r2, #1
    59fa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    59fc:	693b      	ldr	r3, [r7, #16]
    59fe:	2203      	movs	r2, #3
    5a00:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5a02:	693b      	ldr	r3, [r7, #16]
    5a04:	69db      	ldr	r3, [r3, #28]
    5a06:	79f8      	ldrb	r0, [r7, #7]
    5a08:	2200      	movs	r2, #0
    5a0a:	2103      	movs	r1, #3
    5a0c:	4798      	blx	r3
	}
	return ERR_NONE;
    5a0e:	2300      	movs	r3, #0
}
    5a10:	4618      	mov	r0, r3
    5a12:	3718      	adds	r7, #24
    5a14:	46bd      	mov	sp, r7
    5a16:	bd80      	pop	{r7, pc}
    5a18:	000051a1 	.word	0x000051a1
    5a1c:	20001d14 	.word	0x20001d14
    5a20:	0000ca39 	.word	0x0000ca39

00005a24 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5a24:	b580      	push	{r7, lr}
    5a26:	b082      	sub	sp, #8
    5a28:	af00      	add	r7, sp, #0
    5a2a:	4603      	mov	r3, r0
    5a2c:	460a      	mov	r2, r1
    5a2e:	71fb      	strb	r3, [r7, #7]
    5a30:	4613      	mov	r3, r2
    5a32:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    5a34:	79bb      	ldrb	r3, [r7, #6]
    5a36:	2b00      	cmp	r3, #0
    5a38:	d105      	bne.n	5a46 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    5a3a:	79fb      	ldrb	r3, [r7, #7]
    5a3c:	4618      	mov	r0, r3
    5a3e:	4b0c      	ldr	r3, [pc, #48]	; (5a70 <usb_d_ep_halt+0x4c>)
    5a40:	4798      	blx	r3
    5a42:	4603      	mov	r3, r0
    5a44:	e00f      	b.n	5a66 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    5a46:	79bb      	ldrb	r3, [r7, #6]
    5a48:	2b01      	cmp	r3, #1
    5a4a:	d106      	bne.n	5a5a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5a4c:	79fb      	ldrb	r3, [r7, #7]
    5a4e:	2101      	movs	r1, #1
    5a50:	4618      	mov	r0, r3
    5a52:	4b08      	ldr	r3, [pc, #32]	; (5a74 <usb_d_ep_halt+0x50>)
    5a54:	4798      	blx	r3
    5a56:	4603      	mov	r3, r0
    5a58:	e005      	b.n	5a66 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5a5a:	79fb      	ldrb	r3, [r7, #7]
    5a5c:	2102      	movs	r1, #2
    5a5e:	4618      	mov	r0, r3
    5a60:	4b04      	ldr	r3, [pc, #16]	; (5a74 <usb_d_ep_halt+0x50>)
    5a62:	4798      	blx	r3
    5a64:	4603      	mov	r3, r0
	}
}
    5a66:	4618      	mov	r0, r3
    5a68:	3708      	adds	r7, #8
    5a6a:	46bd      	mov	sp, r7
    5a6c:	bd80      	pop	{r7, pc}
    5a6e:	bf00      	nop
    5a70:	000059a1 	.word	0x000059a1
    5a74:	0000ca39 	.word	0x0000ca39

00005a78 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	b086      	sub	sp, #24
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	4603      	mov	r3, r0
    5a80:	603a      	str	r2, [r7, #0]
    5a82:	71fb      	strb	r3, [r7, #7]
    5a84:	460b      	mov	r3, r1
    5a86:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5a88:	79fb      	ldrb	r3, [r7, #7]
    5a8a:	4618      	mov	r0, r3
    5a8c:	4b16      	ldr	r3, [pc, #88]	; (5ae8 <usb_d_ep_register_callback+0x70>)
    5a8e:	4798      	blx	r3
    5a90:	4603      	mov	r3, r0
    5a92:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5a98:	015b      	lsls	r3, r3, #5
    5a9a:	4a14      	ldr	r2, [pc, #80]	; (5aec <usb_d_ep_register_callback+0x74>)
    5a9c:	4413      	add	r3, r2
    5a9e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5aa0:	683b      	ldr	r3, [r7, #0]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d001      	beq.n	5aaa <usb_d_ep_register_callback+0x32>
    5aa6:	683b      	ldr	r3, [r7, #0]
    5aa8:	e000      	b.n	5aac <usb_d_ep_register_callback+0x34>
    5aaa:	4b11      	ldr	r3, [pc, #68]	; (5af0 <usb_d_ep_register_callback+0x78>)
    5aac:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    5aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	db13      	blt.n	5ade <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    5ab6:	79bb      	ldrb	r3, [r7, #6]
    5ab8:	2b01      	cmp	r3, #1
    5aba:	d008      	beq.n	5ace <usb_d_ep_register_callback+0x56>
    5abc:	2b02      	cmp	r3, #2
    5abe:	d00a      	beq.n	5ad6 <usb_d_ep_register_callback+0x5e>
    5ac0:	2b00      	cmp	r3, #0
    5ac2:	d000      	beq.n	5ac6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    5ac4:	e00c      	b.n	5ae0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5ac6:	693b      	ldr	r3, [r7, #16]
    5ac8:	68fa      	ldr	r2, [r7, #12]
    5aca:	615a      	str	r2, [r3, #20]
		break;
    5acc:	e008      	b.n	5ae0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5ace:	693b      	ldr	r3, [r7, #16]
    5ad0:	68fa      	ldr	r2, [r7, #12]
    5ad2:	619a      	str	r2, [r3, #24]
		break;
    5ad4:	e004      	b.n	5ae0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5ad6:	693b      	ldr	r3, [r7, #16]
    5ad8:	68fa      	ldr	r2, [r7, #12]
    5ada:	61da      	str	r2, [r3, #28]
		break;
    5adc:	e000      	b.n	5ae0 <usb_d_ep_register_callback+0x68>
		return;
    5ade:	bf00      	nop
	}
}
    5ae0:	3718      	adds	r7, #24
    5ae2:	46bd      	mov	sp, r7
    5ae4:	bd80      	pop	{r7, pc}
    5ae6:	bf00      	nop
    5ae8:	000051a1 	.word	0x000051a1
    5aec:	20001d14 	.word	0x20001d14
    5af0:	00005275 	.word	0x00005275

00005af4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    5af4:	b480      	push	{r7}
    5af6:	b085      	sub	sp, #20
    5af8:	af00      	add	r7, sp, #0
    5afa:	4603      	mov	r3, r0
    5afc:	60b9      	str	r1, [r7, #8]
    5afe:	607a      	str	r2, [r7, #4]
    5b00:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    5b02:	7bfb      	ldrb	r3, [r7, #15]
    5b04:	f083 0301 	eor.w	r3, r3, #1
    5b08:	b2db      	uxtb	r3, r3
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	d000      	beq.n	5b10 <assert+0x1c>
		__asm("BKPT #0");
    5b0e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    5b10:	bf00      	nop
    5b12:	3714      	adds	r7, #20
    5b14:	46bd      	mov	sp, r7
    5b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b1a:	4770      	bx	lr

00005b1c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    5b1c:	b480      	push	{r7}
    5b1e:	b085      	sub	sp, #20
    5b20:	af00      	add	r7, sp, #0
    5b22:	6078      	str	r0, [r7, #4]
    5b24:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	681b      	ldr	r3, [r3, #0]
    5b2a:	60fb      	str	r3, [r7, #12]
    5b2c:	e008      	b.n	5b40 <is_list_element+0x24>
		if (it == element) {
    5b2e:	68fa      	ldr	r2, [r7, #12]
    5b30:	683b      	ldr	r3, [r7, #0]
    5b32:	429a      	cmp	r2, r3
    5b34:	d101      	bne.n	5b3a <is_list_element+0x1e>
			return true;
    5b36:	2301      	movs	r3, #1
    5b38:	e006      	b.n	5b48 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    5b3a:	68fb      	ldr	r3, [r7, #12]
    5b3c:	681b      	ldr	r3, [r3, #0]
    5b3e:	60fb      	str	r3, [r7, #12]
    5b40:	68fb      	ldr	r3, [r7, #12]
    5b42:	2b00      	cmp	r3, #0
    5b44:	d1f3      	bne.n	5b2e <is_list_element+0x12>
		}
	}

	return false;
    5b46:	2300      	movs	r3, #0
}
    5b48:	4618      	mov	r0, r3
    5b4a:	3714      	adds	r7, #20
    5b4c:	46bd      	mov	sp, r7
    5b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b52:	4770      	bx	lr

00005b54 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5b54:	b580      	push	{r7, lr}
    5b56:	b082      	sub	sp, #8
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
    5b5c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    5b5e:	6839      	ldr	r1, [r7, #0]
    5b60:	6878      	ldr	r0, [r7, #4]
    5b62:	4b0f      	ldr	r3, [pc, #60]	; (5ba0 <list_insert_as_head+0x4c>)
    5b64:	4798      	blx	r3
    5b66:	4603      	mov	r3, r0
    5b68:	2b00      	cmp	r3, #0
    5b6a:	bf14      	ite	ne
    5b6c:	2301      	movne	r3, #1
    5b6e:	2300      	moveq	r3, #0
    5b70:	b2db      	uxtb	r3, r3
    5b72:	f083 0301 	eor.w	r3, r3, #1
    5b76:	b2db      	uxtb	r3, r3
    5b78:	f003 0301 	and.w	r3, r3, #1
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	2239      	movs	r2, #57	; 0x39
    5b80:	4908      	ldr	r1, [pc, #32]	; (5ba4 <list_insert_as_head+0x50>)
    5b82:	4618      	mov	r0, r3
    5b84:	4b08      	ldr	r3, [pc, #32]	; (5ba8 <list_insert_as_head+0x54>)
    5b86:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5b88:	687b      	ldr	r3, [r7, #4]
    5b8a:	681a      	ldr	r2, [r3, #0]
    5b8c:	683b      	ldr	r3, [r7, #0]
    5b8e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	683a      	ldr	r2, [r7, #0]
    5b94:	601a      	str	r2, [r3, #0]
}
    5b96:	bf00      	nop
    5b98:	3708      	adds	r7, #8
    5b9a:	46bd      	mov	sp, r7
    5b9c:	bd80      	pop	{r7, pc}
    5b9e:	bf00      	nop
    5ba0:	00005b1d 	.word	0x00005b1d
    5ba4:	000100f0 	.word	0x000100f0
    5ba8:	00005af5 	.word	0x00005af5

00005bac <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    5bac:	b480      	push	{r7}
    5bae:	b083      	sub	sp, #12
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	6078      	str	r0, [r7, #4]
    5bb4:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	681a      	ldr	r2, [r3, #0]
    5bba:	683b      	ldr	r3, [r7, #0]
    5bbc:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	683a      	ldr	r2, [r7, #0]
    5bc2:	601a      	str	r2, [r3, #0]
}
    5bc4:	bf00      	nop
    5bc6:	370c      	adds	r7, #12
    5bc8:	46bd      	mov	sp, r7
    5bca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bce:	4770      	bx	lr

00005bd0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	b084      	sub	sp, #16
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	6078      	str	r0, [r7, #4]
    5bd8:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	681b      	ldr	r3, [r3, #0]
    5bde:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    5be0:	6839      	ldr	r1, [r7, #0]
    5be2:	6878      	ldr	r0, [r7, #4]
    5be4:	4b16      	ldr	r3, [pc, #88]	; (5c40 <list_insert_at_end+0x70>)
    5be6:	4798      	blx	r3
    5be8:	4603      	mov	r3, r0
    5bea:	2b00      	cmp	r3, #0
    5bec:	bf14      	ite	ne
    5bee:	2301      	movne	r3, #1
    5bf0:	2300      	moveq	r3, #0
    5bf2:	b2db      	uxtb	r3, r3
    5bf4:	f083 0301 	eor.w	r3, r3, #1
    5bf8:	b2db      	uxtb	r3, r3
    5bfa:	f003 0301 	and.w	r3, r3, #1
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	224f      	movs	r2, #79	; 0x4f
    5c02:	4910      	ldr	r1, [pc, #64]	; (5c44 <list_insert_at_end+0x74>)
    5c04:	4618      	mov	r0, r3
    5c06:	4b10      	ldr	r3, [pc, #64]	; (5c48 <list_insert_at_end+0x78>)
    5c08:	4798      	blx	r3

	if (!list->head) {
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	681b      	ldr	r3, [r3, #0]
    5c0e:	2b00      	cmp	r3, #0
    5c10:	d109      	bne.n	5c26 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    5c12:	687b      	ldr	r3, [r7, #4]
    5c14:	683a      	ldr	r2, [r7, #0]
    5c16:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    5c18:	683b      	ldr	r3, [r7, #0]
    5c1a:	2200      	movs	r2, #0
    5c1c:	601a      	str	r2, [r3, #0]
		return;
    5c1e:	e00c      	b.n	5c3a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    5c20:	68fb      	ldr	r3, [r7, #12]
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    5c26:	68fb      	ldr	r3, [r7, #12]
    5c28:	681b      	ldr	r3, [r3, #0]
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d1f8      	bne.n	5c20 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    5c2e:	68fb      	ldr	r3, [r7, #12]
    5c30:	683a      	ldr	r2, [r7, #0]
    5c32:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    5c34:	683b      	ldr	r3, [r7, #0]
    5c36:	2200      	movs	r2, #0
    5c38:	601a      	str	r2, [r3, #0]
}
    5c3a:	3710      	adds	r7, #16
    5c3c:	46bd      	mov	sp, r7
    5c3e:	bd80      	pop	{r7, pc}
    5c40:	00005b1d 	.word	0x00005b1d
    5c44:	000100f0 	.word	0x000100f0
    5c48:	00005af5 	.word	0x00005af5

00005c4c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    5c4c:	b480      	push	{r7}
    5c4e:	b085      	sub	sp, #20
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
	if (list->head) {
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	681b      	ldr	r3, [r3, #0]
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d009      	beq.n	5c70 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	681b      	ldr	r3, [r3, #0]
    5c60:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    5c62:	687b      	ldr	r3, [r7, #4]
    5c64:	681b      	ldr	r3, [r3, #0]
    5c66:	681a      	ldr	r2, [r3, #0]
    5c68:	687b      	ldr	r3, [r7, #4]
    5c6a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	e000      	b.n	5c72 <list_remove_head+0x26>
	}

	return NULL;
    5c70:	2300      	movs	r3, #0
}
    5c72:	4618      	mov	r0, r3
    5c74:	3714      	adds	r7, #20
    5c76:	46bd      	mov	sp, r7
    5c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c7c:	4770      	bx	lr

00005c7e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    5c7e:	b480      	push	{r7}
    5c80:	b085      	sub	sp, #20
    5c82:	af00      	add	r7, sp, #0
    5c84:	6078      	str	r0, [r7, #4]
    5c86:	6039      	str	r1, [r7, #0]
	if (!element) {
    5c88:	683b      	ldr	r3, [r7, #0]
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	d101      	bne.n	5c92 <list_delete_element+0x14>
		return false;
    5c8e:	2300      	movs	r3, #0
    5c90:	e024      	b.n	5cdc <list_delete_element+0x5e>
	}

	if (list->head == element) {
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	681a      	ldr	r2, [r3, #0]
    5c96:	683b      	ldr	r3, [r7, #0]
    5c98:	429a      	cmp	r2, r3
    5c9a:	d106      	bne.n	5caa <list_delete_element+0x2c>
		list->head = list->head->next;
    5c9c:	687b      	ldr	r3, [r7, #4]
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	681a      	ldr	r2, [r3, #0]
    5ca2:	687b      	ldr	r3, [r7, #4]
    5ca4:	601a      	str	r2, [r3, #0]
		return true;
    5ca6:	2301      	movs	r3, #1
    5ca8:	e018      	b.n	5cdc <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    5caa:	687b      	ldr	r3, [r7, #4]
    5cac:	681b      	ldr	r3, [r3, #0]
    5cae:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    5cb0:	e002      	b.n	5cb8 <list_delete_element+0x3a>
			it = it->next;
    5cb2:	68fb      	ldr	r3, [r7, #12]
    5cb4:	681b      	ldr	r3, [r3, #0]
    5cb6:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    5cb8:	68fb      	ldr	r3, [r7, #12]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d004      	beq.n	5cc8 <list_delete_element+0x4a>
    5cbe:	68fb      	ldr	r3, [r7, #12]
    5cc0:	681a      	ldr	r2, [r3, #0]
    5cc2:	683b      	ldr	r3, [r7, #0]
    5cc4:	429a      	cmp	r2, r3
    5cc6:	d1f4      	bne.n	5cb2 <list_delete_element+0x34>
		}
		if (it) {
    5cc8:	68fb      	ldr	r3, [r7, #12]
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d005      	beq.n	5cda <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    5cce:	683b      	ldr	r3, [r7, #0]
    5cd0:	681a      	ldr	r2, [r3, #0]
    5cd2:	68fb      	ldr	r3, [r7, #12]
    5cd4:	601a      	str	r2, [r3, #0]
			return true;
    5cd6:	2301      	movs	r3, #1
    5cd8:	e000      	b.n	5cdc <list_delete_element+0x5e>
		}
	}

	return false;
    5cda:	2300      	movs	r3, #0
}
    5cdc:	4618      	mov	r0, r3
    5cde:	3714      	adds	r7, #20
    5ce0:	46bd      	mov	sp, r7
    5ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ce6:	4770      	bx	lr

00005ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    5ce8:	b480      	push	{r7}
    5cea:	b083      	sub	sp, #12
    5cec:	af00      	add	r7, sp, #0
    5cee:	4603      	mov	r3, r0
    5cf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cf6:	2b00      	cmp	r3, #0
    5cf8:	db0b      	blt.n	5d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5cfa:	4909      	ldr	r1, [pc, #36]	; (5d20 <__NVIC_EnableIRQ+0x38>)
    5cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d00:	095b      	lsrs	r3, r3, #5
    5d02:	88fa      	ldrh	r2, [r7, #6]
    5d04:	f002 021f 	and.w	r2, r2, #31
    5d08:	2001      	movs	r0, #1
    5d0a:	fa00 f202 	lsl.w	r2, r0, r2
    5d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5d12:	bf00      	nop
    5d14:	370c      	adds	r7, #12
    5d16:	46bd      	mov	sp, r7
    5d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1c:	4770      	bx	lr
    5d1e:	bf00      	nop
    5d20:	e000e100 	.word	0xe000e100

00005d24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    5d24:	b480      	push	{r7}
    5d26:	b083      	sub	sp, #12
    5d28:	af00      	add	r7, sp, #0
    5d2a:	4603      	mov	r3, r0
    5d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d32:	2b00      	cmp	r3, #0
    5d34:	db10      	blt.n	5d58 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d36:	490b      	ldr	r1, [pc, #44]	; (5d64 <__NVIC_DisableIRQ+0x40>)
    5d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d3c:	095b      	lsrs	r3, r3, #5
    5d3e:	88fa      	ldrh	r2, [r7, #6]
    5d40:	f002 021f 	and.w	r2, r2, #31
    5d44:	2001      	movs	r0, #1
    5d46:	fa00 f202 	lsl.w	r2, r0, r2
    5d4a:	3320      	adds	r3, #32
    5d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d54:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    5d58:	bf00      	nop
    5d5a:	370c      	adds	r7, #12
    5d5c:	46bd      	mov	sp, r7
    5d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d62:	4770      	bx	lr
    5d64:	e000e100 	.word	0xe000e100

00005d68 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    5d68:	b480      	push	{r7}
    5d6a:	b083      	sub	sp, #12
    5d6c:	af00      	add	r7, sp, #0
    5d6e:	4603      	mov	r3, r0
    5d70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d76:	2b00      	cmp	r3, #0
    5d78:	db0c      	blt.n	5d94 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d7a:	4909      	ldr	r1, [pc, #36]	; (5da0 <__NVIC_ClearPendingIRQ+0x38>)
    5d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d80:	095b      	lsrs	r3, r3, #5
    5d82:	88fa      	ldrh	r2, [r7, #6]
    5d84:	f002 021f 	and.w	r2, r2, #31
    5d88:	2001      	movs	r0, #1
    5d8a:	fa00 f202 	lsl.w	r2, r0, r2
    5d8e:	3360      	adds	r3, #96	; 0x60
    5d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5d94:	bf00      	nop
    5d96:	370c      	adds	r7, #12
    5d98:	46bd      	mov	sp, r7
    5d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d9e:	4770      	bx	lr
    5da0:	e000e100 	.word	0xe000e100

00005da4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    5da4:	b480      	push	{r7}
    5da6:	b083      	sub	sp, #12
    5da8:	af00      	add	r7, sp, #0
    5daa:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    5dac:	687b      	ldr	r3, [r7, #4]
    5dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5db0:	095b      	lsrs	r3, r3, #5
    5db2:	f003 0301 	and.w	r3, r3, #1
    5db6:	2b00      	cmp	r3, #0
    5db8:	bf14      	ite	ne
    5dba:	2301      	movne	r3, #1
    5dbc:	2300      	moveq	r3, #0
    5dbe:	b2db      	uxtb	r3, r3
}
    5dc0:	4618      	mov	r0, r3
    5dc2:	370c      	adds	r7, #12
    5dc4:	46bd      	mov	sp, r7
    5dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dca:	4770      	bx	lr

00005dcc <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    5dcc:	b480      	push	{r7}
    5dce:	b083      	sub	sp, #12
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
    5dd4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    5dd6:	687b      	ldr	r3, [r7, #4]
    5dd8:	683a      	ldr	r2, [r7, #0]
    5dda:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5ddc:	bf00      	nop
    5dde:	370c      	adds	r7, #12
    5de0:	46bd      	mov	sp, r7
    5de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5de6:	4770      	bx	lr

00005de8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    5de8:	b480      	push	{r7}
    5dea:	b083      	sub	sp, #12
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
    5df0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    5df2:	687b      	ldr	r3, [r7, #4]
    5df4:	683a      	ldr	r2, [r7, #0]
    5df6:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5df8:	bf00      	nop
    5dfa:	370c      	adds	r7, #12
    5dfc:	46bd      	mov	sp, r7
    5dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e02:	4770      	bx	lr

00005e04 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    5e04:	b480      	push	{r7}
    5e06:	b083      	sub	sp, #12
    5e08:	af00      	add	r7, sp, #0
    5e0a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    5e0c:	687b      	ldr	r3, [r7, #4]
    5e0e:	699b      	ldr	r3, [r3, #24]
    5e10:	f043 0201 	orr.w	r2, r3, #1
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5e18:	bf00      	nop
    5e1a:	370c      	adds	r7, #12
    5e1c:	46bd      	mov	sp, r7
    5e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e22:	4770      	bx	lr

00005e24 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    5e24:	b480      	push	{r7}
    5e26:	b085      	sub	sp, #20
    5e28:	af00      	add	r7, sp, #0
    5e2a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	699b      	ldr	r3, [r3, #24]
    5e30:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    5e32:	68fb      	ldr	r3, [r7, #12]
    5e34:	f003 0301 	and.w	r3, r3, #1
    5e38:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5e3a:	68fb      	ldr	r3, [r7, #12]
    5e3c:	2b00      	cmp	r3, #0
    5e3e:	bf14      	ite	ne
    5e40:	2301      	movne	r3, #1
    5e42:	2300      	moveq	r3, #0
    5e44:	b2db      	uxtb	r3, r3
}
    5e46:	4618      	mov	r0, r3
    5e48:	3714      	adds	r7, #20
    5e4a:	46bd      	mov	sp, r7
    5e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e50:	4770      	bx	lr

00005e52 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    5e52:	b480      	push	{r7}
    5e54:	b083      	sub	sp, #12
    5e56:	af00      	add	r7, sp, #0
    5e58:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	699b      	ldr	r3, [r3, #24]
    5e5e:	f023 0201 	bic.w	r2, r3, #1
    5e62:	687b      	ldr	r3, [r7, #4]
    5e64:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5e66:	bf00      	nop
    5e68:	370c      	adds	r7, #12
    5e6a:	46bd      	mov	sp, r7
    5e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e70:	4770      	bx	lr

00005e72 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    5e72:	b480      	push	{r7}
    5e74:	b083      	sub	sp, #12
    5e76:	af00      	add	r7, sp, #0
    5e78:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    5e7a:	687b      	ldr	r3, [r7, #4]
    5e7c:	699b      	ldr	r3, [r3, #24]
    5e7e:	f043 0202 	orr.w	r2, r3, #2
    5e82:	687b      	ldr	r3, [r7, #4]
    5e84:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5e86:	bf00      	nop
    5e88:	370c      	adds	r7, #12
    5e8a:	46bd      	mov	sp, r7
    5e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e90:	4770      	bx	lr

00005e92 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    5e92:	b480      	push	{r7}
    5e94:	b083      	sub	sp, #12
    5e96:	af00      	add	r7, sp, #0
    5e98:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    5e9a:	687b      	ldr	r3, [r7, #4]
    5e9c:	699b      	ldr	r3, [r3, #24]
    5e9e:	f023 0202 	bic.w	r2, r3, #2
    5ea2:	687b      	ldr	r3, [r7, #4]
    5ea4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5ea6:	bf00      	nop
    5ea8:	370c      	adds	r7, #12
    5eaa:	46bd      	mov	sp, r7
    5eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eb0:	4770      	bx	lr

00005eb2 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    5eb2:	b480      	push	{r7}
    5eb4:	b083      	sub	sp, #12
    5eb6:	af00      	add	r7, sp, #0
    5eb8:	6078      	str	r0, [r7, #4]
    5eba:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	699a      	ldr	r2, [r3, #24]
    5ec0:	683b      	ldr	r3, [r7, #0]
    5ec2:	431a      	orrs	r2, r3
    5ec4:	687b      	ldr	r3, [r7, #4]
    5ec6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5ec8:	bf00      	nop
    5eca:	370c      	adds	r7, #12
    5ecc:	46bd      	mov	sp, r7
    5ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed2:	4770      	bx	lr

00005ed4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    5ed4:	b480      	push	{r7}
    5ed6:	b083      	sub	sp, #12
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
    5edc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    5ede:	687b      	ldr	r3, [r7, #4]
    5ee0:	683a      	ldr	r2, [r7, #0]
    5ee2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5ee4:	bf00      	nop
    5ee6:	370c      	adds	r7, #12
    5ee8:	46bd      	mov	sp, r7
    5eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eee:	4770      	bx	lr

00005ef0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    5ef0:	b480      	push	{r7}
    5ef2:	b083      	sub	sp, #12
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	6078      	str	r0, [r7, #4]
    5ef8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	683a      	ldr	r2, [r7, #0]
    5efe:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    5f00:	bf00      	nop
    5f02:	370c      	adds	r7, #12
    5f04:	46bd      	mov	sp, r7
    5f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f0a:	4770      	bx	lr

00005f0c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    5f0c:	b480      	push	{r7}
    5f0e:	b083      	sub	sp, #12
    5f10:	af00      	add	r7, sp, #0
    5f12:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    5f14:	687b      	ldr	r3, [r7, #4]
    5f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    5f18:	4618      	mov	r0, r3
    5f1a:	370c      	adds	r7, #12
    5f1c:	46bd      	mov	sp, r7
    5f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f22:	4770      	bx	lr

00005f24 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    5f24:	b480      	push	{r7}
    5f26:	b083      	sub	sp, #12
    5f28:	af00      	add	r7, sp, #0
    5f2a:	6078      	str	r0, [r7, #4]
    5f2c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	683a      	ldr	r2, [r7, #0]
    5f32:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    5f34:	bf00      	nop
    5f36:	370c      	adds	r7, #12
    5f38:	46bd      	mov	sp, r7
    5f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f3e:	4770      	bx	lr

00005f40 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    5f40:	b480      	push	{r7}
    5f42:	b083      	sub	sp, #12
    5f44:	af00      	add	r7, sp, #0
    5f46:	6078      	str	r0, [r7, #4]
    5f48:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    5f4a:	687b      	ldr	r3, [r7, #4]
    5f4c:	683a      	ldr	r2, [r7, #0]
    5f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    5f52:	bf00      	nop
    5f54:	370c      	adds	r7, #12
    5f56:	46bd      	mov	sp, r7
    5f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f5c:	4770      	bx	lr

00005f5e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    5f5e:	b480      	push	{r7}
    5f60:	b083      	sub	sp, #12
    5f62:	af00      	add	r7, sp, #0
    5f64:	6078      	str	r0, [r7, #4]
    5f66:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    5f68:	687b      	ldr	r3, [r7, #4]
    5f6a:	683a      	ldr	r2, [r7, #0]
    5f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    5f70:	bf00      	nop
    5f72:	370c      	adds	r7, #12
    5f74:	46bd      	mov	sp, r7
    5f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f7a:	4770      	bx	lr

00005f7c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    5f7c:	b480      	push	{r7}
    5f7e:	b083      	sub	sp, #12
    5f80:	af00      	add	r7, sp, #0
    5f82:	6078      	str	r0, [r7, #4]
    5f84:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	683a      	ldr	r2, [r7, #0]
    5f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    5f8e:	bf00      	nop
    5f90:	370c      	adds	r7, #12
    5f92:	46bd      	mov	sp, r7
    5f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f98:	4770      	bx	lr

00005f9a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    5f9a:	b480      	push	{r7}
    5f9c:	b083      	sub	sp, #12
    5f9e:	af00      	add	r7, sp, #0
    5fa0:	6078      	str	r0, [r7, #4]
    5fa2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	683a      	ldr	r2, [r7, #0]
    5fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    5fac:	bf00      	nop
    5fae:	370c      	adds	r7, #12
    5fb0:	46bd      	mov	sp, r7
    5fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fb6:	4770      	bx	lr

00005fb8 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    5fb8:	b480      	push	{r7}
    5fba:	b083      	sub	sp, #12
    5fbc:	af00      	add	r7, sp, #0
    5fbe:	6078      	str	r0, [r7, #4]
    5fc0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    5fc2:	687b      	ldr	r3, [r7, #4]
    5fc4:	683a      	ldr	r2, [r7, #0]
    5fc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5fca:	bf00      	nop
    5fcc:	370c      	adds	r7, #12
    5fce:	46bd      	mov	sp, r7
    5fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fd4:	4770      	bx	lr

00005fd6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    5fd6:	b480      	push	{r7}
    5fd8:	b083      	sub	sp, #12
    5fda:	af00      	add	r7, sp, #0
    5fdc:	6078      	str	r0, [r7, #4]
    5fde:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	683a      	ldr	r2, [r7, #0]
    5fe4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    5fe8:	bf00      	nop
    5fea:	370c      	adds	r7, #12
    5fec:	46bd      	mov	sp, r7
    5fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ff2:	4770      	bx	lr

00005ff4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    5ff4:	b480      	push	{r7}
    5ff6:	b083      	sub	sp, #12
    5ff8:	af00      	add	r7, sp, #0
    5ffa:	6078      	str	r0, [r7, #4]
    5ffc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    5ffe:	687b      	ldr	r3, [r7, #4]
    6000:	683a      	ldr	r2, [r7, #0]
    6002:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6006:	bf00      	nop
    6008:	370c      	adds	r7, #12
    600a:	46bd      	mov	sp, r7
    600c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6010:	4770      	bx	lr

00006012 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    6012:	b480      	push	{r7}
    6014:	b083      	sub	sp, #12
    6016:	af00      	add	r7, sp, #0
    6018:	6078      	str	r0, [r7, #4]
    601a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	683a      	ldr	r2, [r7, #0]
    6020:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    6024:	bf00      	nop
    6026:	370c      	adds	r7, #12
    6028:	46bd      	mov	sp, r7
    602a:	f85d 7b04 	ldr.w	r7, [sp], #4
    602e:	4770      	bx	lr

00006030 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    6030:	b480      	push	{r7}
    6032:	b083      	sub	sp, #12
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
    6038:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    603a:	687b      	ldr	r3, [r7, #4]
    603c:	683a      	ldr	r2, [r7, #0]
    603e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6042:	bf00      	nop
    6044:	370c      	adds	r7, #12
    6046:	46bd      	mov	sp, r7
    6048:	f85d 7b04 	ldr.w	r7, [sp], #4
    604c:	4770      	bx	lr
	...

00006050 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    6050:	b580      	push	{r7, lr}
    6052:	b082      	sub	sp, #8
    6054:	af00      	add	r7, sp, #0
    6056:	6078      	str	r0, [r7, #4]
    6058:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    605a:	687b      	ldr	r3, [r7, #4]
    605c:	683a      	ldr	r2, [r7, #0]
    605e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	681b      	ldr	r3, [r3, #0]
    6064:	4618      	mov	r0, r3
    6066:	4b55      	ldr	r3, [pc, #340]	; (61bc <_can_async_init+0x16c>)
    6068:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    606a:	bf00      	nop
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	681b      	ldr	r3, [r3, #0]
    6070:	4618      	mov	r0, r3
    6072:	4b53      	ldr	r3, [pc, #332]	; (61c0 <_can_async_init+0x170>)
    6074:	4798      	blx	r3
    6076:	4603      	mov	r3, r0
    6078:	f083 0301 	eor.w	r3, r3, #1
    607c:	b2db      	uxtb	r3, r3
    607e:	2b00      	cmp	r3, #0
    6080:	d1f4      	bne.n	606c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	681b      	ldr	r3, [r3, #0]
    6086:	4618      	mov	r0, r3
    6088:	4b4e      	ldr	r3, [pc, #312]	; (61c4 <_can_async_init+0x174>)
    608a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    608c:	683b      	ldr	r3, [r7, #0]
    608e:	4a4e      	ldr	r2, [pc, #312]	; (61c8 <_can_async_init+0x178>)
    6090:	4293      	cmp	r3, r2
    6092:	d17a      	bne.n	618a <_can_async_init+0x13a>
		_can1_dev    = dev;
    6094:	4a4d      	ldr	r2, [pc, #308]	; (61cc <_can_async_init+0x17c>)
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    609a:	687b      	ldr	r3, [r7, #4]
    609c:	4a4c      	ldr	r2, [pc, #304]	; (61d0 <_can_async_init+0x180>)
    609e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	681b      	ldr	r3, [r3, #0]
    60a4:	f44f 7140 	mov.w	r1, #768	; 0x300
    60a8:	4618      	mov	r0, r3
    60aa:	4b4a      	ldr	r3, [pc, #296]	; (61d4 <_can_async_init+0x184>)
    60ac:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    60ae:	687b      	ldr	r3, [r7, #4]
    60b0:	681b      	ldr	r3, [r3, #0]
    60b2:	2102      	movs	r1, #2
    60b4:	4618      	mov	r0, r3
    60b6:	4b48      	ldr	r3, [pc, #288]	; (61d8 <_can_async_init+0x188>)
    60b8:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    60ba:	687b      	ldr	r3, [r7, #4]
    60bc:	681b      	ldr	r3, [r3, #0]
    60be:	4947      	ldr	r1, [pc, #284]	; (61dc <_can_async_init+0x18c>)
    60c0:	4618      	mov	r0, r3
    60c2:	4b47      	ldr	r3, [pc, #284]	; (61e0 <_can_async_init+0x190>)
    60c4:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    60c6:	687b      	ldr	r3, [r7, #4]
    60c8:	681b      	ldr	r3, [r3, #0]
    60ca:	4946      	ldr	r1, [pc, #280]	; (61e4 <_can_async_init+0x194>)
    60cc:	4618      	mov	r0, r3
    60ce:	4b46      	ldr	r3, [pc, #280]	; (61e8 <_can_async_init+0x198>)
    60d0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	681a      	ldr	r2, [r3, #0]
    60d6:	4b45      	ldr	r3, [pc, #276]	; (61ec <_can_async_init+0x19c>)
    60d8:	b29b      	uxth	r3, r3
    60da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    60de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    60e2:	4619      	mov	r1, r3
    60e4:	4610      	mov	r0, r2
    60e6:	4b42      	ldr	r3, [pc, #264]	; (61f0 <_can_async_init+0x1a0>)
    60e8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    60ea:	687b      	ldr	r3, [r7, #4]
    60ec:	681b      	ldr	r3, [r3, #0]
    60ee:	2107      	movs	r1, #7
    60f0:	4618      	mov	r0, r3
    60f2:	4b40      	ldr	r3, [pc, #256]	; (61f4 <_can_async_init+0x1a4>)
    60f4:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	681b      	ldr	r3, [r3, #0]
    60fa:	2107      	movs	r1, #7
    60fc:	4618      	mov	r0, r3
    60fe:	4b3e      	ldr	r3, [pc, #248]	; (61f8 <_can_async_init+0x1a8>)
    6100:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    6102:	687b      	ldr	r3, [r7, #4]
    6104:	681a      	ldr	r2, [r3, #0]
    6106:	4b3d      	ldr	r3, [pc, #244]	; (61fc <_can_async_init+0x1ac>)
    6108:	b29b      	uxth	r3, r3
    610a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    610e:	4619      	mov	r1, r3
    6110:	4610      	mov	r0, r2
    6112:	4b3b      	ldr	r3, [pc, #236]	; (6200 <_can_async_init+0x1b0>)
    6114:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    6116:	687b      	ldr	r3, [r7, #4]
    6118:	681a      	ldr	r2, [r3, #0]
    611a:	4b3a      	ldr	r3, [pc, #232]	; (6204 <_can_async_init+0x1b4>)
    611c:	b29b      	uxth	r3, r3
    611e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6122:	4619      	mov	r1, r3
    6124:	4610      	mov	r0, r2
    6126:	4b38      	ldr	r3, [pc, #224]	; (6208 <_can_async_init+0x1b8>)
    6128:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	2108      	movs	r1, #8
    6130:	4618      	mov	r0, r3
    6132:	4b36      	ldr	r3, [pc, #216]	; (620c <_can_async_init+0x1bc>)
    6134:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    6136:	687b      	ldr	r3, [r7, #4]
    6138:	681a      	ldr	r2, [r3, #0]
    613a:	4b35      	ldr	r3, [pc, #212]	; (6210 <_can_async_init+0x1c0>)
    613c:	b29b      	uxth	r3, r3
    613e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    6142:	4619      	mov	r1, r3
    6144:	4610      	mov	r0, r2
    6146:	4b33      	ldr	r3, [pc, #204]	; (6214 <_can_async_init+0x1c4>)
    6148:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    614a:	687b      	ldr	r3, [r7, #4]
    614c:	681a      	ldr	r2, [r3, #0]
    614e:	4b32      	ldr	r3, [pc, #200]	; (6218 <_can_async_init+0x1c8>)
    6150:	b29b      	uxth	r3, r3
    6152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6156:	4619      	mov	r1, r3
    6158:	4610      	mov	r0, r2
    615a:	4b30      	ldr	r3, [pc, #192]	; (621c <_can_async_init+0x1cc>)
    615c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    615e:	687b      	ldr	r3, [r7, #4]
    6160:	681b      	ldr	r3, [r3, #0]
    6162:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    6166:	4618      	mov	r0, r3
    6168:	4b2d      	ldr	r3, [pc, #180]	; (6220 <_can_async_init+0x1d0>)
    616a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    616c:	204f      	movs	r0, #79	; 0x4f
    616e:	4b2d      	ldr	r3, [pc, #180]	; (6224 <_can_async_init+0x1d4>)
    6170:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    6172:	204f      	movs	r0, #79	; 0x4f
    6174:	4b2c      	ldr	r3, [pc, #176]	; (6228 <_can_async_init+0x1d8>)
    6176:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    6178:	204f      	movs	r0, #79	; 0x4f
    617a:	4b2c      	ldr	r3, [pc, #176]	; (622c <_can_async_init+0x1dc>)
    617c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	681b      	ldr	r3, [r3, #0]
    6182:	2101      	movs	r1, #1
    6184:	4618      	mov	r0, r3
    6186:	4b2a      	ldr	r3, [pc, #168]	; (6230 <_can_async_init+0x1e0>)
    6188:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    618a:	687b      	ldr	r3, [r7, #4]
    618c:	681b      	ldr	r3, [r3, #0]
    618e:	4618      	mov	r0, r3
    6190:	4b28      	ldr	r3, [pc, #160]	; (6234 <_can_async_init+0x1e4>)
    6192:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	4618      	mov	r0, r3
    619a:	4b27      	ldr	r3, [pc, #156]	; (6238 <_can_async_init+0x1e8>)
    619c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    619e:	bf00      	nop
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	681b      	ldr	r3, [r3, #0]
    61a4:	4618      	mov	r0, r3
    61a6:	4b06      	ldr	r3, [pc, #24]	; (61c0 <_can_async_init+0x170>)
    61a8:	4798      	blx	r3
    61aa:	4603      	mov	r3, r0
    61ac:	2b00      	cmp	r3, #0
    61ae:	d1f7      	bne.n	61a0 <_can_async_init+0x150>
	};

	return ERR_NONE;
    61b0:	2300      	movs	r3, #0
}
    61b2:	4618      	mov	r0, r3
    61b4:	3708      	adds	r7, #8
    61b6:	46bd      	mov	sp, r7
    61b8:	bd80      	pop	{r7, pc}
    61ba:	bf00      	nop
    61bc:	00005e05 	.word	0x00005e05
    61c0:	00005e25 	.word	0x00005e25
    61c4:	00005e73 	.word	0x00005e73
    61c8:	42000400 	.word	0x42000400
    61cc:	20001e34 	.word	0x20001e34
    61d0:	20000004 	.word	0x20000004
    61d4:	00005eb3 	.word	0x00005eb3
    61d8:	00005dcd 	.word	0x00005dcd
    61dc:	00010c01 	.word	0x00010c01
    61e0:	00005ed5 	.word	0x00005ed5
    61e4:	00010c10 	.word	0x00010c10
    61e8:	00005de9 	.word	0x00005de9
    61ec:	20002504 	.word	0x20002504
    61f0:	00005fb9 	.word	0x00005fb9
    61f4:	00005fd7 	.word	0x00005fd7
    61f8:	00006013 	.word	0x00006013
    61fc:	200024bc 	.word	0x200024bc
    6200:	00005ff5 	.word	0x00005ff5
    6204:	20001d94 	.word	0x20001d94
    6208:	00006031 	.word	0x00006031
    620c:	00005f41 	.word	0x00005f41
    6210:	20001da4 	.word	0x20001da4
    6214:	00005f5f 	.word	0x00005f5f
    6218:	20001e24 	.word	0x20001e24
    621c:	00005f7d 	.word	0x00005f7d
    6220:	00005f9b 	.word	0x00005f9b
    6224:	00005d25 	.word	0x00005d25
    6228:	00005d69 	.word	0x00005d69
    622c:	00005ce9 	.word	0x00005ce9
    6230:	00005f25 	.word	0x00005f25
    6234:	00005e93 	.word	0x00005e93
    6238:	00005e53 	.word	0x00005e53

0000623c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    623c:	b590      	push	{r4, r7, lr}
    623e:	b083      	sub	sp, #12
    6240:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    6242:	4b2c      	ldr	r3, [pc, #176]	; (62f4 <CAN1_Handler+0xb8>)
    6244:	681b      	ldr	r3, [r3, #0]
    6246:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	4618      	mov	r0, r3
    624e:	4b2a      	ldr	r3, [pc, #168]	; (62f8 <CAN1_Handler+0xbc>)
    6250:	4798      	blx	r3
    6252:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    6254:	683b      	ldr	r3, [r7, #0]
    6256:	f003 0301 	and.w	r3, r3, #1
    625a:	2b00      	cmp	r3, #0
    625c:	d003      	beq.n	6266 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	689b      	ldr	r3, [r3, #8]
    6262:	6878      	ldr	r0, [r7, #4]
    6264:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    6266:	683b      	ldr	r3, [r7, #0]
    6268:	f403 7300 	and.w	r3, r3, #512	; 0x200
    626c:	2b00      	cmp	r3, #0
    626e:	d003      	beq.n	6278 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	685b      	ldr	r3, [r3, #4]
    6274:	6878      	ldr	r0, [r7, #4]
    6276:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    6278:	683b      	ldr	r3, [r7, #0]
    627a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    627e:	2b00      	cmp	r3, #0
    6280:	d004      	beq.n	628c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	68db      	ldr	r3, [r3, #12]
    6286:	2103      	movs	r1, #3
    6288:	6878      	ldr	r0, [r7, #4]
    628a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    628c:	683b      	ldr	r3, [r7, #0]
    628e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6292:	2b00      	cmp	r3, #0
    6294:	d004      	beq.n	62a0 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	68db      	ldr	r3, [r3, #12]
    629a:	2100      	movs	r1, #0
    629c:	6878      	ldr	r0, [r7, #4]
    629e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    62a0:	683b      	ldr	r3, [r7, #0]
    62a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    62a6:	2b00      	cmp	r3, #0
    62a8:	d00f      	beq.n	62ca <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    62aa:	687b      	ldr	r3, [r7, #4]
    62ac:	68dc      	ldr	r4, [r3, #12]
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	681b      	ldr	r3, [r3, #0]
    62b2:	4618      	mov	r0, r3
    62b4:	4b11      	ldr	r3, [pc, #68]	; (62fc <CAN1_Handler+0xc0>)
    62b6:	4798      	blx	r3
    62b8:	4603      	mov	r3, r0
    62ba:	2b00      	cmp	r3, #0
    62bc:	d001      	beq.n	62c2 <CAN1_Handler+0x86>
    62be:	2302      	movs	r3, #2
    62c0:	e000      	b.n	62c4 <CAN1_Handler+0x88>
    62c2:	2301      	movs	r3, #1
    62c4:	4619      	mov	r1, r3
    62c6:	6878      	ldr	r0, [r7, #4]
    62c8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    62ca:	683b      	ldr	r3, [r7, #0]
    62cc:	f003 0308 	and.w	r3, r3, #8
    62d0:	2b00      	cmp	r3, #0
    62d2:	d004      	beq.n	62de <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	68db      	ldr	r3, [r3, #12]
    62d8:	2104      	movs	r1, #4
    62da:	6878      	ldr	r0, [r7, #4]
    62dc:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	681b      	ldr	r3, [r3, #0]
    62e2:	6839      	ldr	r1, [r7, #0]
    62e4:	4618      	mov	r0, r3
    62e6:	4b06      	ldr	r3, [pc, #24]	; (6300 <CAN1_Handler+0xc4>)
    62e8:	4798      	blx	r3
}
    62ea:	bf00      	nop
    62ec:	370c      	adds	r7, #12
    62ee:	46bd      	mov	sp, r7
    62f0:	bd90      	pop	{r4, r7, pc}
    62f2:	bf00      	nop
    62f4:	20001e34 	.word	0x20001e34
    62f8:	00005f0d 	.word	0x00005f0d
    62fc:	00005da5 	.word	0x00005da5
    6300:	00005ef1 	.word	0x00005ef1

00006304 <__NVIC_SetPendingIRQ>:
{
    6304:	b480      	push	{r7}
    6306:	b083      	sub	sp, #12
    6308:	af00      	add	r7, sp, #0
    630a:	4603      	mov	r3, r0
    630c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    630e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6312:	2b00      	cmp	r3, #0
    6314:	db0c      	blt.n	6330 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6316:	4909      	ldr	r1, [pc, #36]	; (633c <__NVIC_SetPendingIRQ+0x38>)
    6318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    631c:	095b      	lsrs	r3, r3, #5
    631e:	88fa      	ldrh	r2, [r7, #6]
    6320:	f002 021f 	and.w	r2, r2, #31
    6324:	2001      	movs	r0, #1
    6326:	fa00 f202 	lsl.w	r2, r0, r2
    632a:	3340      	adds	r3, #64	; 0x40
    632c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6330:	bf00      	nop
    6332:	370c      	adds	r7, #12
    6334:	46bd      	mov	sp, r7
    6336:	f85d 7b04 	ldr.w	r7, [sp], #4
    633a:	4770      	bx	lr
    633c:	e000e100 	.word	0xe000e100

00006340 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    6340:	b580      	push	{r7, lr}
    6342:	b082      	sub	sp, #8
    6344:	af00      	add	r7, sp, #0
    6346:	4603      	mov	r3, r0
    6348:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    634a:	79fb      	ldrb	r3, [r7, #7]
    634c:	b21b      	sxth	r3, r3
    634e:	4618      	mov	r0, r3
    6350:	4b02      	ldr	r3, [pc, #8]	; (635c <_irq_set+0x1c>)
    6352:	4798      	blx	r3
}
    6354:	bf00      	nop
    6356:	3708      	adds	r7, #8
    6358:	46bd      	mov	sp, r7
    635a:	bd80      	pop	{r7, pc}
    635c:	00006305 	.word	0x00006305

00006360 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    6360:	b480      	push	{r7}
    6362:	b083      	sub	sp, #12
    6364:	af00      	add	r7, sp, #0
    6366:	4603      	mov	r3, r0
    6368:	6039      	str	r1, [r7, #0]
    636a:	80fb      	strh	r3, [r7, #6]
    636c:	4613      	mov	r3, r2
    636e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6370:	797b      	ldrb	r3, [r7, #5]
    6372:	3b04      	subs	r3, #4
    6374:	2b05      	cmp	r3, #5
    6376:	d86b      	bhi.n	6450 <_get_cycles_for_us_internal+0xf0>
    6378:	a201      	add	r2, pc, #4	; (adr r2, 6380 <_get_cycles_for_us_internal+0x20>)
    637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    637e:	bf00      	nop
    6380:	0000642f 	.word	0x0000642f
    6384:	0000640f 	.word	0x0000640f
    6388:	000063f1 	.word	0x000063f1
    638c:	000063d3 	.word	0x000063d3
    6390:	000063b5 	.word	0x000063b5
    6394:	00006399 	.word	0x00006399
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    6398:	88fb      	ldrh	r3, [r7, #6]
    639a:	683a      	ldr	r2, [r7, #0]
    639c:	4935      	ldr	r1, [pc, #212]	; (6474 <_get_cycles_for_us_internal+0x114>)
    639e:	fba1 1202 	umull	r1, r2, r1, r2
    63a2:	0c92      	lsrs	r2, r2, #18
    63a4:	fb02 f303 	mul.w	r3, r2, r3
    63a8:	3302      	adds	r3, #2
    63aa:	4a33      	ldr	r2, [pc, #204]	; (6478 <_get_cycles_for_us_internal+0x118>)
    63ac:	fba2 2303 	umull	r2, r3, r2, r3
    63b0:	085b      	lsrs	r3, r3, #1
    63b2:	e059      	b.n	6468 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    63b4:	88fb      	ldrh	r3, [r7, #6]
    63b6:	683a      	ldr	r2, [r7, #0]
    63b8:	0952      	lsrs	r2, r2, #5
    63ba:	4930      	ldr	r1, [pc, #192]	; (647c <_get_cycles_for_us_internal+0x11c>)
    63bc:	fba1 1202 	umull	r1, r2, r1, r2
    63c0:	09d2      	lsrs	r2, r2, #7
    63c2:	fb02 f303 	mul.w	r3, r2, r3
    63c6:	331d      	adds	r3, #29
    63c8:	4a2d      	ldr	r2, [pc, #180]	; (6480 <_get_cycles_for_us_internal+0x120>)
    63ca:	fba2 2303 	umull	r2, r3, r2, r3
    63ce:	091b      	lsrs	r3, r3, #4
    63d0:	e04a      	b.n	6468 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    63d2:	88fb      	ldrh	r3, [r7, #6]
    63d4:	683a      	ldr	r2, [r7, #0]
    63d6:	492b      	ldr	r1, [pc, #172]	; (6484 <_get_cycles_for_us_internal+0x124>)
    63d8:	fba1 1202 	umull	r1, r2, r1, r2
    63dc:	0b52      	lsrs	r2, r2, #13
    63de:	fb02 f303 	mul.w	r3, r2, r3
    63e2:	f203 132b 	addw	r3, r3, #299	; 0x12b
    63e6:	4a28      	ldr	r2, [pc, #160]	; (6488 <_get_cycles_for_us_internal+0x128>)
    63e8:	fba2 2303 	umull	r2, r3, r2, r3
    63ec:	095b      	lsrs	r3, r3, #5
    63ee:	e03b      	b.n	6468 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    63f0:	88fb      	ldrh	r3, [r7, #6]
    63f2:	683a      	ldr	r2, [r7, #0]
    63f4:	4925      	ldr	r1, [pc, #148]	; (648c <_get_cycles_for_us_internal+0x12c>)
    63f6:	fba1 1202 	umull	r1, r2, r1, r2
    63fa:	0992      	lsrs	r2, r2, #6
    63fc:	fb02 f303 	mul.w	r3, r2, r3
    6400:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6404:	4a22      	ldr	r2, [pc, #136]	; (6490 <_get_cycles_for_us_internal+0x130>)
    6406:	fba2 2303 	umull	r2, r3, r2, r3
    640a:	099b      	lsrs	r3, r3, #6
    640c:	e02c      	b.n	6468 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    640e:	88fb      	ldrh	r3, [r7, #6]
    6410:	683a      	ldr	r2, [r7, #0]
    6412:	4920      	ldr	r1, [pc, #128]	; (6494 <_get_cycles_for_us_internal+0x134>)
    6414:	fba1 1202 	umull	r1, r2, r1, r2
    6418:	0952      	lsrs	r2, r2, #5
    641a:	fb02 f303 	mul.w	r3, r2, r3
    641e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    6422:	332f      	adds	r3, #47	; 0x2f
    6424:	4a1c      	ldr	r2, [pc, #112]	; (6498 <_get_cycles_for_us_internal+0x138>)
    6426:	fba2 2303 	umull	r2, r3, r2, r3
    642a:	0b5b      	lsrs	r3, r3, #13
    642c:	e01c      	b.n	6468 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    642e:	88fb      	ldrh	r3, [r7, #6]
    6430:	683a      	ldr	r2, [r7, #0]
    6432:	491a      	ldr	r1, [pc, #104]	; (649c <_get_cycles_for_us_internal+0x13c>)
    6434:	fba1 1202 	umull	r1, r2, r1, r2
    6438:	08d2      	lsrs	r2, r2, #3
    643a:	fb02 f303 	mul.w	r3, r2, r3
    643e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    6442:	f203 33df 	addw	r3, r3, #991	; 0x3df
    6446:	4a16      	ldr	r2, [pc, #88]	; (64a0 <_get_cycles_for_us_internal+0x140>)
    6448:	fba2 2303 	umull	r2, r3, r2, r3
    644c:	0c5b      	lsrs	r3, r3, #17
    644e:	e00b      	b.n	6468 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    6450:	88fb      	ldrh	r3, [r7, #6]
    6452:	683a      	ldr	r2, [r7, #0]
    6454:	fb02 f303 	mul.w	r3, r2, r3
    6458:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    645c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    6460:	4a10      	ldr	r2, [pc, #64]	; (64a4 <_get_cycles_for_us_internal+0x144>)
    6462:	fba2 2303 	umull	r2, r3, r2, r3
    6466:	0c9b      	lsrs	r3, r3, #18
	}
}
    6468:	4618      	mov	r0, r3
    646a:	370c      	adds	r7, #12
    646c:	46bd      	mov	sp, r7
    646e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6472:	4770      	bx	lr
    6474:	431bde83 	.word	0x431bde83
    6478:	aaaaaaab 	.word	0xaaaaaaab
    647c:	0a7c5ac5 	.word	0x0a7c5ac5
    6480:	88888889 	.word	0x88888889
    6484:	d1b71759 	.word	0xd1b71759
    6488:	1b4e81b5 	.word	0x1b4e81b5
    648c:	10624dd3 	.word	0x10624dd3
    6490:	057619f1 	.word	0x057619f1
    6494:	51eb851f 	.word	0x51eb851f
    6498:	45e7b273 	.word	0x45e7b273
    649c:	cccccccd 	.word	0xcccccccd
    64a0:	6fd91d85 	.word	0x6fd91d85
    64a4:	165e9f81 	.word	0x165e9f81

000064a8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    64a8:	b580      	push	{r7, lr}
    64aa:	b082      	sub	sp, #8
    64ac:	af00      	add	r7, sp, #0
    64ae:	4603      	mov	r3, r0
    64b0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    64b2:	88fb      	ldrh	r3, [r7, #6]
    64b4:	2209      	movs	r2, #9
    64b6:	4904      	ldr	r1, [pc, #16]	; (64c8 <_get_cycles_for_us+0x20>)
    64b8:	4618      	mov	r0, r3
    64ba:	4b04      	ldr	r3, [pc, #16]	; (64cc <_get_cycles_for_us+0x24>)
    64bc:	4798      	blx	r3
    64be:	4603      	mov	r3, r0
}
    64c0:	4618      	mov	r0, r3
    64c2:	3708      	adds	r7, #8
    64c4:	46bd      	mov	sp, r7
    64c6:	bd80      	pop	{r7, pc}
    64c8:	07270e00 	.word	0x07270e00
    64cc:	00006361 	.word	0x00006361

000064d0 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    64d0:	b480      	push	{r7}
    64d2:	b083      	sub	sp, #12
    64d4:	af00      	add	r7, sp, #0
    64d6:	4603      	mov	r3, r0
    64d8:	6039      	str	r1, [r7, #0]
    64da:	80fb      	strh	r3, [r7, #6]
    64dc:	4613      	mov	r3, r2
    64de:	717b      	strb	r3, [r7, #5]
	switch (power) {
    64e0:	797b      	ldrb	r3, [r7, #5]
    64e2:	3b04      	subs	r3, #4
    64e4:	2b05      	cmp	r3, #5
    64e6:	d870      	bhi.n	65ca <_get_cycles_for_ms_internal+0xfa>
    64e8:	a201      	add	r2, pc, #4	; (adr r2, 64f0 <_get_cycles_for_ms_internal+0x20>)
    64ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    64ee:	bf00      	nop
    64f0:	000065ad 	.word	0x000065ad
    64f4:	00006591 	.word	0x00006591
    64f8:	00006575 	.word	0x00006575
    64fc:	00006551 	.word	0x00006551
    6500:	0000652d 	.word	0x0000652d
    6504:	00006509 	.word	0x00006509
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    6508:	88fb      	ldrh	r3, [r7, #6]
    650a:	683a      	ldr	r2, [r7, #0]
    650c:	4937      	ldr	r1, [pc, #220]	; (65ec <_get_cycles_for_ms_internal+0x11c>)
    650e:	fba1 1202 	umull	r1, r2, r1, r2
    6512:	0c92      	lsrs	r2, r2, #18
    6514:	fb02 f303 	mul.w	r3, r2, r3
    6518:	3302      	adds	r3, #2
    651a:	4a35      	ldr	r2, [pc, #212]	; (65f0 <_get_cycles_for_ms_internal+0x120>)
    651c:	fba2 2303 	umull	r2, r3, r2, r3
    6520:	085b      	lsrs	r3, r3, #1
    6522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6526:	fb02 f303 	mul.w	r3, r2, r3
    652a:	e058      	b.n	65de <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    652c:	88fb      	ldrh	r3, [r7, #6]
    652e:	683a      	ldr	r2, [r7, #0]
    6530:	0952      	lsrs	r2, r2, #5
    6532:	4930      	ldr	r1, [pc, #192]	; (65f4 <_get_cycles_for_ms_internal+0x124>)
    6534:	fba1 1202 	umull	r1, r2, r1, r2
    6538:	09d2      	lsrs	r2, r2, #7
    653a:	fb02 f303 	mul.w	r3, r2, r3
    653e:	3302      	adds	r3, #2
    6540:	4a2b      	ldr	r2, [pc, #172]	; (65f0 <_get_cycles_for_ms_internal+0x120>)
    6542:	fba2 2303 	umull	r2, r3, r2, r3
    6546:	085b      	lsrs	r3, r3, #1
    6548:	2264      	movs	r2, #100	; 0x64
    654a:	fb02 f303 	mul.w	r3, r2, r3
    654e:	e046      	b.n	65de <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    6550:	88fb      	ldrh	r3, [r7, #6]
    6552:	683a      	ldr	r2, [r7, #0]
    6554:	4928      	ldr	r1, [pc, #160]	; (65f8 <_get_cycles_for_ms_internal+0x128>)
    6556:	fba1 1202 	umull	r1, r2, r1, r2
    655a:	0b52      	lsrs	r2, r2, #13
    655c:	fb02 f303 	mul.w	r3, r2, r3
    6560:	3302      	adds	r3, #2
    6562:	4a23      	ldr	r2, [pc, #140]	; (65f0 <_get_cycles_for_ms_internal+0x120>)
    6564:	fba2 2303 	umull	r2, r3, r2, r3
    6568:	085a      	lsrs	r2, r3, #1
    656a:	4613      	mov	r3, r2
    656c:	009b      	lsls	r3, r3, #2
    656e:	4413      	add	r3, r2
    6570:	005b      	lsls	r3, r3, #1
    6572:	e034      	b.n	65de <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    6574:	88fb      	ldrh	r3, [r7, #6]
    6576:	683a      	ldr	r2, [r7, #0]
    6578:	4920      	ldr	r1, [pc, #128]	; (65fc <_get_cycles_for_ms_internal+0x12c>)
    657a:	fba1 1202 	umull	r1, r2, r1, r2
    657e:	0992      	lsrs	r2, r2, #6
    6580:	fb02 f303 	mul.w	r3, r2, r3
    6584:	3302      	adds	r3, #2
    6586:	4a1a      	ldr	r2, [pc, #104]	; (65f0 <_get_cycles_for_ms_internal+0x120>)
    6588:	fba2 2303 	umull	r2, r3, r2, r3
    658c:	085b      	lsrs	r3, r3, #1
    658e:	e026      	b.n	65de <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    6590:	88fb      	ldrh	r3, [r7, #6]
    6592:	683a      	ldr	r2, [r7, #0]
    6594:	491a      	ldr	r1, [pc, #104]	; (6600 <_get_cycles_for_ms_internal+0x130>)
    6596:	fba1 1202 	umull	r1, r2, r1, r2
    659a:	0952      	lsrs	r2, r2, #5
    659c:	fb02 f303 	mul.w	r3, r2, r3
    65a0:	331d      	adds	r3, #29
    65a2:	4a18      	ldr	r2, [pc, #96]	; (6604 <_get_cycles_for_ms_internal+0x134>)
    65a4:	fba2 2303 	umull	r2, r3, r2, r3
    65a8:	091b      	lsrs	r3, r3, #4
    65aa:	e018      	b.n	65de <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    65ac:	88fb      	ldrh	r3, [r7, #6]
    65ae:	683a      	ldr	r2, [r7, #0]
    65b0:	4915      	ldr	r1, [pc, #84]	; (6608 <_get_cycles_for_ms_internal+0x138>)
    65b2:	fba1 1202 	umull	r1, r2, r1, r2
    65b6:	08d2      	lsrs	r2, r2, #3
    65b8:	fb02 f303 	mul.w	r3, r2, r3
    65bc:	f203 132b 	addw	r3, r3, #299	; 0x12b
    65c0:	4a12      	ldr	r2, [pc, #72]	; (660c <_get_cycles_for_ms_internal+0x13c>)
    65c2:	fba2 2303 	umull	r2, r3, r2, r3
    65c6:	095b      	lsrs	r3, r3, #5
    65c8:	e009      	b.n	65de <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    65ca:	88fb      	ldrh	r3, [r7, #6]
    65cc:	683a      	ldr	r2, [r7, #0]
    65ce:	fb02 f303 	mul.w	r3, r2, r3
    65d2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    65d6:	4a0e      	ldr	r2, [pc, #56]	; (6610 <_get_cycles_for_ms_internal+0x140>)
    65d8:	fba2 2303 	umull	r2, r3, r2, r3
    65dc:	099b      	lsrs	r3, r3, #6
	}
}
    65de:	4618      	mov	r0, r3
    65e0:	370c      	adds	r7, #12
    65e2:	46bd      	mov	sp, r7
    65e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    65e8:	4770      	bx	lr
    65ea:	bf00      	nop
    65ec:	431bde83 	.word	0x431bde83
    65f0:	aaaaaaab 	.word	0xaaaaaaab
    65f4:	0a7c5ac5 	.word	0x0a7c5ac5
    65f8:	d1b71759 	.word	0xd1b71759
    65fc:	10624dd3 	.word	0x10624dd3
    6600:	51eb851f 	.word	0x51eb851f
    6604:	88888889 	.word	0x88888889
    6608:	cccccccd 	.word	0xcccccccd
    660c:	1b4e81b5 	.word	0x1b4e81b5
    6610:	057619f1 	.word	0x057619f1

00006614 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    6614:	b580      	push	{r7, lr}
    6616:	b082      	sub	sp, #8
    6618:	af00      	add	r7, sp, #0
    661a:	4603      	mov	r3, r0
    661c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    661e:	88fb      	ldrh	r3, [r7, #6]
    6620:	2209      	movs	r2, #9
    6622:	4904      	ldr	r1, [pc, #16]	; (6634 <_get_cycles_for_ms+0x20>)
    6624:	4618      	mov	r0, r3
    6626:	4b04      	ldr	r3, [pc, #16]	; (6638 <_get_cycles_for_ms+0x24>)
    6628:	4798      	blx	r3
    662a:	4603      	mov	r3, r0
}
    662c:	4618      	mov	r0, r3
    662e:	3708      	adds	r7, #8
    6630:	46bd      	mov	sp, r7
    6632:	bd80      	pop	{r7, pc}
    6634:	07270e00 	.word	0x07270e00
    6638:	000064d1 	.word	0x000064d1
    663c:	00000000 	.word	0x00000000

00006640 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    6640:	b480      	push	{r7}
    6642:	b083      	sub	sp, #12
    6644:	af00      	add	r7, sp, #0
    6646:	6078      	str	r0, [r7, #4]
    6648:	6039      	str	r1, [r7, #0]
    664a:	bf00      	nop
    664c:	f3af 8000 	nop.w

00006650 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    6650:	3901      	subs	r1, #1
    6652:	d8fd      	bhi.n	6650 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    6654:	bf00      	nop
    6656:	370c      	adds	r7, #12
    6658:	46bd      	mov	sp, r7
    665a:	f85d 7b04 	ldr.w	r7, [sp], #4
    665e:	4770      	bx	lr

00006660 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    6660:	b480      	push	{r7}
    6662:	b083      	sub	sp, #12
    6664:	af00      	add	r7, sp, #0
    6666:	6078      	str	r0, [r7, #4]
    6668:	460b      	mov	r3, r1
    666a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    666c:	687b      	ldr	r3, [r7, #4]
    666e:	881b      	ldrh	r3, [r3, #0]
    6670:	b29a      	uxth	r2, r3
    6672:	887b      	ldrh	r3, [r7, #2]
    6674:	021b      	lsls	r3, r3, #8
    6676:	b29b      	uxth	r3, r3
    6678:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    667c:	b29b      	uxth	r3, r3
    667e:	4313      	orrs	r3, r2
    6680:	b29a      	uxth	r2, r3
    6682:	687b      	ldr	r3, [r7, #4]
    6684:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    6686:	bf00      	nop
    6688:	370c      	adds	r7, #12
    668a:	46bd      	mov	sp, r7
    668c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6690:	4770      	bx	lr

00006692 <hri_port_set_EVCTRL_reg>:
{
    6692:	b480      	push	{r7}
    6694:	b085      	sub	sp, #20
    6696:	af00      	add	r7, sp, #0
    6698:	60f8      	str	r0, [r7, #12]
    669a:	460b      	mov	r3, r1
    669c:	607a      	str	r2, [r7, #4]
    669e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    66a0:	7afb      	ldrb	r3, [r7, #11]
    66a2:	7afa      	ldrb	r2, [r7, #11]
    66a4:	68f9      	ldr	r1, [r7, #12]
    66a6:	01d2      	lsls	r2, r2, #7
    66a8:	440a      	add	r2, r1
    66aa:	322c      	adds	r2, #44	; 0x2c
    66ac:	6811      	ldr	r1, [r2, #0]
    66ae:	687a      	ldr	r2, [r7, #4]
    66b0:	430a      	orrs	r2, r1
    66b2:	68f9      	ldr	r1, [r7, #12]
    66b4:	01db      	lsls	r3, r3, #7
    66b6:	440b      	add	r3, r1
    66b8:	332c      	adds	r3, #44	; 0x2c
    66ba:	601a      	str	r2, [r3, #0]
}
    66bc:	bf00      	nop
    66be:	3714      	adds	r7, #20
    66c0:	46bd      	mov	sp, r7
    66c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    66c6:	4770      	bx	lr

000066c8 <_port_event_init>:

static inline void _port_event_init()
{
    66c8:	b580      	push	{r7, lr}
    66ca:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    66cc:	2200      	movs	r2, #0
    66ce:	2100      	movs	r1, #0
    66d0:	480a      	ldr	r0, [pc, #40]	; (66fc <_port_event_init+0x34>)
    66d2:	4b0b      	ldr	r3, [pc, #44]	; (6700 <_port_event_init+0x38>)
    66d4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    66d6:	2200      	movs	r2, #0
    66d8:	2101      	movs	r1, #1
    66da:	4808      	ldr	r0, [pc, #32]	; (66fc <_port_event_init+0x34>)
    66dc:	4b08      	ldr	r3, [pc, #32]	; (6700 <_port_event_init+0x38>)
    66de:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    66e0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    66e4:	2102      	movs	r1, #2
    66e6:	4805      	ldr	r0, [pc, #20]	; (66fc <_port_event_init+0x34>)
    66e8:	4b05      	ldr	r3, [pc, #20]	; (6700 <_port_event_init+0x38>)
    66ea:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    66ec:	2200      	movs	r2, #0
    66ee:	2103      	movs	r1, #3
    66f0:	4802      	ldr	r0, [pc, #8]	; (66fc <_port_event_init+0x34>)
    66f2:	4b03      	ldr	r3, [pc, #12]	; (6700 <_port_event_init+0x38>)
    66f4:	4798      	blx	r3
}
    66f6:	bf00      	nop
    66f8:	bd80      	pop	{r7, pc}
    66fa:	bf00      	nop
    66fc:	41008000 	.word	0x41008000
    6700:	00006693 	.word	0x00006693

00006704 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6704:	b580      	push	{r7, lr}
    6706:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    6708:	2104      	movs	r1, #4
    670a:	480b      	ldr	r0, [pc, #44]	; (6738 <_init_chip+0x34>)
    670c:	4b0b      	ldr	r3, [pc, #44]	; (673c <_init_chip+0x38>)
    670e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    6710:	4b0b      	ldr	r3, [pc, #44]	; (6740 <_init_chip+0x3c>)
    6712:	4798      	blx	r3
	_oscctrl_init_sources();
    6714:	4b0b      	ldr	r3, [pc, #44]	; (6744 <_init_chip+0x40>)
    6716:	4798      	blx	r3
	_mclk_init();
    6718:	4b0b      	ldr	r3, [pc, #44]	; (6748 <_init_chip+0x44>)
    671a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    671c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    6720:	4b0a      	ldr	r3, [pc, #40]	; (674c <_init_chip+0x48>)
    6722:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    6724:	4b0a      	ldr	r3, [pc, #40]	; (6750 <_init_chip+0x4c>)
    6726:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6728:	f640 30df 	movw	r0, #3039	; 0xbdf
    672c:	4b07      	ldr	r3, [pc, #28]	; (674c <_init_chip+0x48>)
    672e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    6730:	4b08      	ldr	r3, [pc, #32]	; (6754 <_init_chip+0x50>)
    6732:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    6734:	bf00      	nop
    6736:	bd80      	pop	{r7, pc}
    6738:	41004000 	.word	0x41004000
    673c:	00006661 	.word	0x00006661
    6740:	00007215 	.word	0x00007215
    6744:	000076dd 	.word	0x000076dd
    6748:	00007135 	.word	0x00007135
    674c:	00006ff5 	.word	0x00006ff5
    6750:	0000771d 	.word	0x0000771d
    6754:	000066c9 	.word	0x000066c9

00006758 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    6758:	b480      	push	{r7}
    675a:	b083      	sub	sp, #12
    675c:	af00      	add	r7, sp, #0
    675e:	6078      	str	r0, [r7, #4]
    6760:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	683a      	ldr	r2, [r7, #0]
    6766:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6768:	2300      	movs	r3, #0
}
    676a:	4618      	mov	r0, r3
    676c:	370c      	adds	r7, #12
    676e:	46bd      	mov	sp, r7
    6770:	f85d 7b04 	ldr.w	r7, [sp], #4
    6774:	4770      	bx	lr
	...

00006778 <__NVIC_EnableIRQ>:
{
    6778:	b480      	push	{r7}
    677a:	b083      	sub	sp, #12
    677c:	af00      	add	r7, sp, #0
    677e:	4603      	mov	r3, r0
    6780:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6786:	2b00      	cmp	r3, #0
    6788:	db0b      	blt.n	67a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    678a:	4909      	ldr	r1, [pc, #36]	; (67b0 <__NVIC_EnableIRQ+0x38>)
    678c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6790:	095b      	lsrs	r3, r3, #5
    6792:	88fa      	ldrh	r2, [r7, #6]
    6794:	f002 021f 	and.w	r2, r2, #31
    6798:	2001      	movs	r0, #1
    679a:	fa00 f202 	lsl.w	r2, r0, r2
    679e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    67a2:	bf00      	nop
    67a4:	370c      	adds	r7, #12
    67a6:	46bd      	mov	sp, r7
    67a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    67ac:	4770      	bx	lr
    67ae:	bf00      	nop
    67b0:	e000e100 	.word	0xe000e100

000067b4 <__NVIC_DisableIRQ>:
{
    67b4:	b480      	push	{r7}
    67b6:	b083      	sub	sp, #12
    67b8:	af00      	add	r7, sp, #0
    67ba:	4603      	mov	r3, r0
    67bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    67be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    67c2:	2b00      	cmp	r3, #0
    67c4:	db10      	blt.n	67e8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    67c6:	490b      	ldr	r1, [pc, #44]	; (67f4 <__NVIC_DisableIRQ+0x40>)
    67c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    67cc:	095b      	lsrs	r3, r3, #5
    67ce:	88fa      	ldrh	r2, [r7, #6]
    67d0:	f002 021f 	and.w	r2, r2, #31
    67d4:	2001      	movs	r0, #1
    67d6:	fa00 f202 	lsl.w	r2, r0, r2
    67da:	3320      	adds	r3, #32
    67dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    67e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    67e4:	f3bf 8f6f 	isb	sy
}
    67e8:	bf00      	nop
    67ea:	370c      	adds	r7, #12
    67ec:	46bd      	mov	sp, r7
    67ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    67f2:	4770      	bx	lr
    67f4:	e000e100 	.word	0xe000e100

000067f8 <__NVIC_ClearPendingIRQ>:
{
    67f8:	b480      	push	{r7}
    67fa:	b083      	sub	sp, #12
    67fc:	af00      	add	r7, sp, #0
    67fe:	4603      	mov	r3, r0
    6800:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6806:	2b00      	cmp	r3, #0
    6808:	db0c      	blt.n	6824 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    680a:	4909      	ldr	r1, [pc, #36]	; (6830 <__NVIC_ClearPendingIRQ+0x38>)
    680c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6810:	095b      	lsrs	r3, r3, #5
    6812:	88fa      	ldrh	r2, [r7, #6]
    6814:	f002 021f 	and.w	r2, r2, #31
    6818:	2001      	movs	r0, #1
    681a:	fa00 f202 	lsl.w	r2, r0, r2
    681e:	3360      	adds	r3, #96	; 0x60
    6820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6824:	bf00      	nop
    6826:	370c      	adds	r7, #12
    6828:	46bd      	mov	sp, r7
    682a:	f85d 7b04 	ldr.w	r7, [sp], #4
    682e:	4770      	bx	lr
    6830:	e000e100 	.word	0xe000e100

00006834 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6834:	b480      	push	{r7}
    6836:	b083      	sub	sp, #12
    6838:	af00      	add	r7, sp, #0
    683a:	6078      	str	r0, [r7, #4]
    683c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    683e:	bf00      	nop
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	685a      	ldr	r2, [r3, #4]
    6844:	683b      	ldr	r3, [r7, #0]
    6846:	4013      	ands	r3, r2
    6848:	2b00      	cmp	r3, #0
    684a:	d1f9      	bne.n	6840 <hri_eic_wait_for_sync+0xc>
	};
}
    684c:	bf00      	nop
    684e:	370c      	adds	r7, #12
    6850:	46bd      	mov	sp, r7
    6852:	f85d 7b04 	ldr.w	r7, [sp], #4
    6856:	4770      	bx	lr

00006858 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6858:	b480      	push	{r7}
    685a:	b083      	sub	sp, #12
    685c:	af00      	add	r7, sp, #0
    685e:	6078      	str	r0, [r7, #4]
    6860:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    6862:	687b      	ldr	r3, [r7, #4]
    6864:	685a      	ldr	r2, [r3, #4]
    6866:	683b      	ldr	r3, [r7, #0]
    6868:	4013      	ands	r3, r2
    686a:	2b00      	cmp	r3, #0
    686c:	bf14      	ite	ne
    686e:	2301      	movne	r3, #1
    6870:	2300      	moveq	r3, #0
    6872:	b2db      	uxtb	r3, r3
}
    6874:	4618      	mov	r0, r3
    6876:	370c      	adds	r7, #12
    6878:	46bd      	mov	sp, r7
    687a:	f85d 7b04 	ldr.w	r7, [sp], #4
    687e:	4770      	bx	lr

00006880 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    6880:	b480      	push	{r7}
    6882:	b083      	sub	sp, #12
    6884:	af00      	add	r7, sp, #0
    6886:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	695b      	ldr	r3, [r3, #20]
}
    688c:	4618      	mov	r0, r3
    688e:	370c      	adds	r7, #12
    6890:	46bd      	mov	sp, r7
    6892:	f85d 7b04 	ldr.w	r7, [sp], #4
    6896:	4770      	bx	lr

00006898 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    6898:	b480      	push	{r7}
    689a:	b083      	sub	sp, #12
    689c:	af00      	add	r7, sp, #0
    689e:	6078      	str	r0, [r7, #4]
    68a0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    68a2:	687b      	ldr	r3, [r7, #4]
    68a4:	683a      	ldr	r2, [r7, #0]
    68a6:	615a      	str	r2, [r3, #20]
}
    68a8:	bf00      	nop
    68aa:	370c      	adds	r7, #12
    68ac:	46bd      	mov	sp, r7
    68ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    68b2:	4770      	bx	lr

000068b4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    68b4:	b480      	push	{r7}
    68b6:	b083      	sub	sp, #12
    68b8:	af00      	add	r7, sp, #0
    68ba:	6078      	str	r0, [r7, #4]
    68bc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    68be:	687b      	ldr	r3, [r7, #4]
    68c0:	683a      	ldr	r2, [r7, #0]
    68c2:	611a      	str	r2, [r3, #16]
}
    68c4:	bf00      	nop
    68c6:	370c      	adds	r7, #12
    68c8:	46bd      	mov	sp, r7
    68ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ce:	4770      	bx	lr

000068d0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    68d0:	b480      	push	{r7}
    68d2:	b083      	sub	sp, #12
    68d4:	af00      	add	r7, sp, #0
    68d6:	6078      	str	r0, [r7, #4]
    68d8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    68da:	687b      	ldr	r3, [r7, #4]
    68dc:	683a      	ldr	r2, [r7, #0]
    68de:	60da      	str	r2, [r3, #12]
}
    68e0:	bf00      	nop
    68e2:	370c      	adds	r7, #12
    68e4:	46bd      	mov	sp, r7
    68e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ea:	4770      	bx	lr

000068ec <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    68ec:	b580      	push	{r7, lr}
    68ee:	b082      	sub	sp, #8
    68f0:	af00      	add	r7, sp, #0
    68f2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    68f4:	687b      	ldr	r3, [r7, #4]
    68f6:	781b      	ldrb	r3, [r3, #0]
    68f8:	b2db      	uxtb	r3, r3
    68fa:	f043 0302 	orr.w	r3, r3, #2
    68fe:	b2da      	uxtb	r2, r3
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6904:	2103      	movs	r1, #3
    6906:	6878      	ldr	r0, [r7, #4]
    6908:	4b02      	ldr	r3, [pc, #8]	; (6914 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    690a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    690c:	bf00      	nop
    690e:	3708      	adds	r7, #8
    6910:	46bd      	mov	sp, r7
    6912:	bd80      	pop	{r7, pc}
    6914:	00006835 	.word	0x00006835

00006918 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6918:	b580      	push	{r7, lr}
    691a:	b082      	sub	sp, #8
    691c:	af00      	add	r7, sp, #0
    691e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6920:	687b      	ldr	r3, [r7, #4]
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	b2db      	uxtb	r3, r3
    6926:	f023 0302 	bic.w	r3, r3, #2
    692a:	b2da      	uxtb	r2, r3
    692c:	687b      	ldr	r3, [r7, #4]
    692e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6930:	2103      	movs	r1, #3
    6932:	6878      	ldr	r0, [r7, #4]
    6934:	4b02      	ldr	r3, [pc, #8]	; (6940 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    6936:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6938:	bf00      	nop
    693a:	3708      	adds	r7, #8
    693c:	46bd      	mov	sp, r7
    693e:	bd80      	pop	{r7, pc}
    6940:	00006835 	.word	0x00006835

00006944 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    6944:	b580      	push	{r7, lr}
    6946:	b084      	sub	sp, #16
    6948:	af00      	add	r7, sp, #0
    694a:	6078      	str	r0, [r7, #4]
    694c:	460b      	mov	r3, r1
    694e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6950:	687b      	ldr	r3, [r7, #4]
    6952:	781b      	ldrb	r3, [r3, #0]
    6954:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    6956:	7bfb      	ldrb	r3, [r7, #15]
    6958:	f023 0310 	bic.w	r3, r3, #16
    695c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    695e:	78fb      	ldrb	r3, [r7, #3]
    6960:	011b      	lsls	r3, r3, #4
    6962:	b25a      	sxtb	r2, r3
    6964:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6968:	4313      	orrs	r3, r2
    696a:	b25b      	sxtb	r3, r3
    696c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    696e:	687b      	ldr	r3, [r7, #4]
    6970:	7bfa      	ldrb	r2, [r7, #15]
    6972:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6974:	2103      	movs	r1, #3
    6976:	6878      	ldr	r0, [r7, #4]
    6978:	4b02      	ldr	r3, [pc, #8]	; (6984 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    697a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    697c:	bf00      	nop
    697e:	3710      	adds	r7, #16
    6980:	46bd      	mov	sp, r7
    6982:	bd80      	pop	{r7, pc}
    6984:	00006835 	.word	0x00006835

00006988 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    6988:	b580      	push	{r7, lr}
    698a:	b084      	sub	sp, #16
    698c:	af00      	add	r7, sp, #0
    698e:	6078      	str	r0, [r7, #4]
    6990:	460b      	mov	r3, r1
    6992:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6994:	2103      	movs	r1, #3
    6996:	6878      	ldr	r0, [r7, #4]
    6998:	4b06      	ldr	r3, [pc, #24]	; (69b4 <hri_eic_get_CTRLA_reg+0x2c>)
    699a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    699c:	687b      	ldr	r3, [r7, #4]
    699e:	781b      	ldrb	r3, [r3, #0]
    69a0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    69a2:	7bfa      	ldrb	r2, [r7, #15]
    69a4:	78fb      	ldrb	r3, [r7, #3]
    69a6:	4013      	ands	r3, r2
    69a8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    69aa:	7bfb      	ldrb	r3, [r7, #15]
}
    69ac:	4618      	mov	r0, r3
    69ae:	3710      	adds	r7, #16
    69b0:	46bd      	mov	sp, r7
    69b2:	bd80      	pop	{r7, pc}
    69b4:	00006835 	.word	0x00006835

000069b8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    69b8:	b580      	push	{r7, lr}
    69ba:	b082      	sub	sp, #8
    69bc:	af00      	add	r7, sp, #0
    69be:	6078      	str	r0, [r7, #4]
    69c0:	460b      	mov	r3, r1
    69c2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    69c4:	687b      	ldr	r3, [r7, #4]
    69c6:	78fa      	ldrb	r2, [r7, #3]
    69c8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    69ca:	2103      	movs	r1, #3
    69cc:	6878      	ldr	r0, [r7, #4]
    69ce:	4b03      	ldr	r3, [pc, #12]	; (69dc <hri_eic_write_CTRLA_reg+0x24>)
    69d0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    69d2:	bf00      	nop
    69d4:	3708      	adds	r7, #8
    69d6:	46bd      	mov	sp, r7
    69d8:	bd80      	pop	{r7, pc}
    69da:	bf00      	nop
    69dc:	00006835 	.word	0x00006835

000069e0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    69e0:	b480      	push	{r7}
    69e2:	b083      	sub	sp, #12
    69e4:	af00      	add	r7, sp, #0
    69e6:	6078      	str	r0, [r7, #4]
    69e8:	460b      	mov	r3, r1
    69ea:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	78fa      	ldrb	r2, [r7, #3]
    69f0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    69f2:	bf00      	nop
    69f4:	370c      	adds	r7, #12
    69f6:	46bd      	mov	sp, r7
    69f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    69fc:	4770      	bx	lr

000069fe <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    69fe:	b480      	push	{r7}
    6a00:	b083      	sub	sp, #12
    6a02:	af00      	add	r7, sp, #0
    6a04:	6078      	str	r0, [r7, #4]
    6a06:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	683a      	ldr	r2, [r7, #0]
    6a0c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6a0e:	bf00      	nop
    6a10:	370c      	adds	r7, #12
    6a12:	46bd      	mov	sp, r7
    6a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a18:	4770      	bx	lr

00006a1a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    6a1a:	b480      	push	{r7}
    6a1c:	b083      	sub	sp, #12
    6a1e:	af00      	add	r7, sp, #0
    6a20:	6078      	str	r0, [r7, #4]
    6a22:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    6a24:	687b      	ldr	r3, [r7, #4]
    6a26:	683a      	ldr	r2, [r7, #0]
    6a28:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6a2a:	bf00      	nop
    6a2c:	370c      	adds	r7, #12
    6a2e:	46bd      	mov	sp, r7
    6a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a34:	4770      	bx	lr

00006a36 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    6a36:	b480      	push	{r7}
    6a38:	b085      	sub	sp, #20
    6a3a:	af00      	add	r7, sp, #0
    6a3c:	60f8      	str	r0, [r7, #12]
    6a3e:	460b      	mov	r3, r1
    6a40:	607a      	str	r2, [r7, #4]
    6a42:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    6a44:	7afb      	ldrb	r3, [r7, #11]
    6a46:	68fa      	ldr	r2, [r7, #12]
    6a48:	3306      	adds	r3, #6
    6a4a:	009b      	lsls	r3, r3, #2
    6a4c:	4413      	add	r3, r2
    6a4e:	687a      	ldr	r2, [r7, #4]
    6a50:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6a52:	bf00      	nop
    6a54:	3714      	adds	r7, #20
    6a56:	46bd      	mov	sp, r7
    6a58:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a5c:	4770      	bx	lr

00006a5e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    6a5e:	b480      	push	{r7}
    6a60:	b083      	sub	sp, #12
    6a62:	af00      	add	r7, sp, #0
    6a64:	6078      	str	r0, [r7, #4]
    6a66:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    6a68:	687b      	ldr	r3, [r7, #4]
    6a6a:	683a      	ldr	r2, [r7, #0]
    6a6c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    6a6e:	bf00      	nop
    6a70:	370c      	adds	r7, #12
    6a72:	46bd      	mov	sp, r7
    6a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a78:	4770      	bx	lr

00006a7a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    6a7a:	b480      	push	{r7}
    6a7c:	b083      	sub	sp, #12
    6a7e:	af00      	add	r7, sp, #0
    6a80:	6078      	str	r0, [r7, #4]
    6a82:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    6a84:	687b      	ldr	r3, [r7, #4]
    6a86:	683a      	ldr	r2, [r7, #0]
    6a88:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    6a8a:	bf00      	nop
    6a8c:	370c      	adds	r7, #12
    6a8e:	46bd      	mov	sp, r7
    6a90:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a94:	4770      	bx	lr
	...

00006a98 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    6a98:	b580      	push	{r7, lr}
    6a9a:	b082      	sub	sp, #8
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    6aa0:	2101      	movs	r1, #1
    6aa2:	484f      	ldr	r0, [pc, #316]	; (6be0 <_ext_irq_init+0x148>)
    6aa4:	4b4f      	ldr	r3, [pc, #316]	; (6be4 <_ext_irq_init+0x14c>)
    6aa6:	4798      	blx	r3
    6aa8:	4603      	mov	r3, r0
    6aaa:	f083 0301 	eor.w	r3, r3, #1
    6aae:	b2db      	uxtb	r3, r3
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	d011      	beq.n	6ad8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    6ab4:	2102      	movs	r1, #2
    6ab6:	484a      	ldr	r0, [pc, #296]	; (6be0 <_ext_irq_init+0x148>)
    6ab8:	4b4b      	ldr	r3, [pc, #300]	; (6be8 <_ext_irq_init+0x150>)
    6aba:	4798      	blx	r3
    6abc:	4603      	mov	r3, r0
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d006      	beq.n	6ad0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    6ac2:	4847      	ldr	r0, [pc, #284]	; (6be0 <_ext_irq_init+0x148>)
    6ac4:	4b49      	ldr	r3, [pc, #292]	; (6bec <_ext_irq_init+0x154>)
    6ac6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    6ac8:	2102      	movs	r1, #2
    6aca:	4845      	ldr	r0, [pc, #276]	; (6be0 <_ext_irq_init+0x148>)
    6acc:	4b48      	ldr	r3, [pc, #288]	; (6bf0 <_ext_irq_init+0x158>)
    6ace:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    6ad0:	2101      	movs	r1, #1
    6ad2:	4843      	ldr	r0, [pc, #268]	; (6be0 <_ext_irq_init+0x148>)
    6ad4:	4b47      	ldr	r3, [pc, #284]	; (6bf4 <_ext_irq_init+0x15c>)
    6ad6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    6ad8:	2101      	movs	r1, #1
    6ada:	4841      	ldr	r0, [pc, #260]	; (6be0 <_ext_irq_init+0x148>)
    6adc:	4b44      	ldr	r3, [pc, #272]	; (6bf0 <_ext_irq_init+0x158>)
    6ade:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    6ae0:	2100      	movs	r1, #0
    6ae2:	483f      	ldr	r0, [pc, #252]	; (6be0 <_ext_irq_init+0x148>)
    6ae4:	4b44      	ldr	r3, [pc, #272]	; (6bf8 <_ext_irq_init+0x160>)
    6ae6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    6ae8:	2100      	movs	r1, #0
    6aea:	483d      	ldr	r0, [pc, #244]	; (6be0 <_ext_irq_init+0x148>)
    6aec:	4b43      	ldr	r3, [pc, #268]	; (6bfc <_ext_irq_init+0x164>)
    6aee:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    6af0:	2100      	movs	r1, #0
    6af2:	483b      	ldr	r0, [pc, #236]	; (6be0 <_ext_irq_init+0x148>)
    6af4:	4b42      	ldr	r3, [pc, #264]	; (6c00 <_ext_irq_init+0x168>)
    6af6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    6af8:	f240 31bb 	movw	r1, #955	; 0x3bb
    6afc:	4838      	ldr	r0, [pc, #224]	; (6be0 <_ext_irq_init+0x148>)
    6afe:	4b41      	ldr	r3, [pc, #260]	; (6c04 <_ext_irq_init+0x16c>)
    6b00:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    6b02:	f240 313b 	movw	r1, #827	; 0x33b
    6b06:	4836      	ldr	r0, [pc, #216]	; (6be0 <_ext_irq_init+0x148>)
    6b08:	4b3f      	ldr	r3, [pc, #252]	; (6c08 <_ext_irq_init+0x170>)
    6b0a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    6b0c:	2100      	movs	r1, #0
    6b0e:	4834      	ldr	r0, [pc, #208]	; (6be0 <_ext_irq_init+0x148>)
    6b10:	4b3e      	ldr	r3, [pc, #248]	; (6c0c <_ext_irq_init+0x174>)
    6b12:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6b14:	4a3e      	ldr	r2, [pc, #248]	; (6c10 <_ext_irq_init+0x178>)
    6b16:	2100      	movs	r1, #0
    6b18:	4831      	ldr	r0, [pc, #196]	; (6be0 <_ext_irq_init+0x148>)
    6b1a:	4b3e      	ldr	r3, [pc, #248]	; (6c14 <_ext_irq_init+0x17c>)
    6b1c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6b1e:	2211      	movs	r2, #17
    6b20:	2101      	movs	r1, #1
    6b22:	482f      	ldr	r0, [pc, #188]	; (6be0 <_ext_irq_init+0x148>)
    6b24:	4b3b      	ldr	r3, [pc, #236]	; (6c14 <_ext_irq_init+0x17c>)
    6b26:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    6b28:	482d      	ldr	r0, [pc, #180]	; (6be0 <_ext_irq_init+0x148>)
    6b2a:	4b3b      	ldr	r3, [pc, #236]	; (6c18 <_ext_irq_init+0x180>)
    6b2c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    6b2e:	200c      	movs	r0, #12
    6b30:	4b3a      	ldr	r3, [pc, #232]	; (6c1c <_ext_irq_init+0x184>)
    6b32:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    6b34:	200c      	movs	r0, #12
    6b36:	4b3a      	ldr	r3, [pc, #232]	; (6c20 <_ext_irq_init+0x188>)
    6b38:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    6b3a:	200c      	movs	r0, #12
    6b3c:	4b39      	ldr	r3, [pc, #228]	; (6c24 <_ext_irq_init+0x18c>)
    6b3e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    6b40:	200d      	movs	r0, #13
    6b42:	4b36      	ldr	r3, [pc, #216]	; (6c1c <_ext_irq_init+0x184>)
    6b44:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    6b46:	200d      	movs	r0, #13
    6b48:	4b35      	ldr	r3, [pc, #212]	; (6c20 <_ext_irq_init+0x188>)
    6b4a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    6b4c:	200d      	movs	r0, #13
    6b4e:	4b35      	ldr	r3, [pc, #212]	; (6c24 <_ext_irq_init+0x18c>)
    6b50:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    6b52:	200f      	movs	r0, #15
    6b54:	4b31      	ldr	r3, [pc, #196]	; (6c1c <_ext_irq_init+0x184>)
    6b56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    6b58:	200f      	movs	r0, #15
    6b5a:	4b31      	ldr	r3, [pc, #196]	; (6c20 <_ext_irq_init+0x188>)
    6b5c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    6b5e:	200f      	movs	r0, #15
    6b60:	4b30      	ldr	r3, [pc, #192]	; (6c24 <_ext_irq_init+0x18c>)
    6b62:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    6b64:	2010      	movs	r0, #16
    6b66:	4b2d      	ldr	r3, [pc, #180]	; (6c1c <_ext_irq_init+0x184>)
    6b68:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    6b6a:	2010      	movs	r0, #16
    6b6c:	4b2c      	ldr	r3, [pc, #176]	; (6c20 <_ext_irq_init+0x188>)
    6b6e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    6b70:	2010      	movs	r0, #16
    6b72:	4b2c      	ldr	r3, [pc, #176]	; (6c24 <_ext_irq_init+0x18c>)
    6b74:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    6b76:	2011      	movs	r0, #17
    6b78:	4b28      	ldr	r3, [pc, #160]	; (6c1c <_ext_irq_init+0x184>)
    6b7a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    6b7c:	2011      	movs	r0, #17
    6b7e:	4b28      	ldr	r3, [pc, #160]	; (6c20 <_ext_irq_init+0x188>)
    6b80:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    6b82:	2011      	movs	r0, #17
    6b84:	4b27      	ldr	r3, [pc, #156]	; (6c24 <_ext_irq_init+0x18c>)
    6b86:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6b88:	2012      	movs	r0, #18
    6b8a:	4b24      	ldr	r3, [pc, #144]	; (6c1c <_ext_irq_init+0x184>)
    6b8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    6b8e:	2012      	movs	r0, #18
    6b90:	4b23      	ldr	r3, [pc, #140]	; (6c20 <_ext_irq_init+0x188>)
    6b92:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    6b94:	2012      	movs	r0, #18
    6b96:	4b23      	ldr	r3, [pc, #140]	; (6c24 <_ext_irq_init+0x18c>)
    6b98:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    6b9a:	2013      	movs	r0, #19
    6b9c:	4b1f      	ldr	r3, [pc, #124]	; (6c1c <_ext_irq_init+0x184>)
    6b9e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    6ba0:	2013      	movs	r0, #19
    6ba2:	4b1f      	ldr	r3, [pc, #124]	; (6c20 <_ext_irq_init+0x188>)
    6ba4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    6ba6:	2013      	movs	r0, #19
    6ba8:	4b1e      	ldr	r3, [pc, #120]	; (6c24 <_ext_irq_init+0x18c>)
    6baa:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    6bac:	2014      	movs	r0, #20
    6bae:	4b1b      	ldr	r3, [pc, #108]	; (6c1c <_ext_irq_init+0x184>)
    6bb0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    6bb2:	2014      	movs	r0, #20
    6bb4:	4b1a      	ldr	r3, [pc, #104]	; (6c20 <_ext_irq_init+0x188>)
    6bb6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    6bb8:	2014      	movs	r0, #20
    6bba:	4b1a      	ldr	r3, [pc, #104]	; (6c24 <_ext_irq_init+0x18c>)
    6bbc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    6bbe:	2015      	movs	r0, #21
    6bc0:	4b16      	ldr	r3, [pc, #88]	; (6c1c <_ext_irq_init+0x184>)
    6bc2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    6bc4:	2015      	movs	r0, #21
    6bc6:	4b16      	ldr	r3, [pc, #88]	; (6c20 <_ext_irq_init+0x188>)
    6bc8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    6bca:	2015      	movs	r0, #21
    6bcc:	4b15      	ldr	r3, [pc, #84]	; (6c24 <_ext_irq_init+0x18c>)
    6bce:	4798      	blx	r3

	callback = cb;
    6bd0:	4a15      	ldr	r2, [pc, #84]	; (6c28 <_ext_irq_init+0x190>)
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    6bd6:	2300      	movs	r3, #0
}
    6bd8:	4618      	mov	r0, r3
    6bda:	3708      	adds	r7, #8
    6bdc:	46bd      	mov	sp, r7
    6bde:	bd80      	pop	{r7, pc}
    6be0:	40002800 	.word	0x40002800
    6be4:	00006859 	.word	0x00006859
    6be8:	00006989 	.word	0x00006989
    6bec:	00006919 	.word	0x00006919
    6bf0:	00006835 	.word	0x00006835
    6bf4:	000069b9 	.word	0x000069b9
    6bf8:	00006945 	.word	0x00006945
    6bfc:	000069e1 	.word	0x000069e1
    6c00:	000069ff 	.word	0x000069ff
    6c04:	00006a1b 	.word	0x00006a1b
    6c08:	00006a5f 	.word	0x00006a5f
    6c0c:	00006a7b 	.word	0x00006a7b
    6c10:	90999013 	.word	0x90999013
    6c14:	00006a37 	.word	0x00006a37
    6c18:	000068ed 	.word	0x000068ed
    6c1c:	000067b5 	.word	0x000067b5
    6c20:	000067f9 	.word	0x000067f9
    6c24:	00006779 	.word	0x00006779
    6c28:	20001e38 	.word	0x20001e38

00006c2c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    6c2c:	b580      	push	{r7, lr}
    6c2e:	b084      	sub	sp, #16
    6c30:	af00      	add	r7, sp, #0
    6c32:	6078      	str	r0, [r7, #4]
    6c34:	460b      	mov	r3, r1
    6c36:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    6c38:	23ff      	movs	r3, #255	; 0xff
    6c3a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    6c3c:	2300      	movs	r3, #0
    6c3e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    6c40:	e010      	b.n	6c64 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    6c42:	7bbb      	ldrb	r3, [r7, #14]
    6c44:	4a1c      	ldr	r2, [pc, #112]	; (6cb8 <_ext_irq_enable+0x8c>)
    6c46:	00db      	lsls	r3, r3, #3
    6c48:	4413      	add	r3, r2
    6c4a:	685a      	ldr	r2, [r3, #4]
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	429a      	cmp	r2, r3
    6c50:	d105      	bne.n	6c5e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    6c52:	7bbb      	ldrb	r3, [r7, #14]
    6c54:	4a18      	ldr	r2, [pc, #96]	; (6cb8 <_ext_irq_enable+0x8c>)
    6c56:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6c5a:	73fb      	strb	r3, [r7, #15]
			break;
    6c5c:	e005      	b.n	6c6a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    6c5e:	7bbb      	ldrb	r3, [r7, #14]
    6c60:	3301      	adds	r3, #1
    6c62:	73bb      	strb	r3, [r7, #14]
    6c64:	7bbb      	ldrb	r3, [r7, #14]
    6c66:	2b08      	cmp	r3, #8
    6c68:	d9eb      	bls.n	6c42 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    6c6a:	7bfb      	ldrb	r3, [r7, #15]
    6c6c:	2bff      	cmp	r3, #255	; 0xff
    6c6e:	d102      	bne.n	6c76 <_ext_irq_enable+0x4a>
		return -1;
    6c70:	f04f 33ff 	mov.w	r3, #4294967295
    6c74:	e01c      	b.n	6cb0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    6c76:	78fb      	ldrb	r3, [r7, #3]
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d008      	beq.n	6c8e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    6c7c:	7bfb      	ldrb	r3, [r7, #15]
    6c7e:	2201      	movs	r2, #1
    6c80:	fa02 f303 	lsl.w	r3, r2, r3
    6c84:	4619      	mov	r1, r3
    6c86:	480d      	ldr	r0, [pc, #52]	; (6cbc <_ext_irq_enable+0x90>)
    6c88:	4b0d      	ldr	r3, [pc, #52]	; (6cc0 <_ext_irq_enable+0x94>)
    6c8a:	4798      	blx	r3
    6c8c:	e00f      	b.n	6cae <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    6c8e:	7bfb      	ldrb	r3, [r7, #15]
    6c90:	2201      	movs	r2, #1
    6c92:	fa02 f303 	lsl.w	r3, r2, r3
    6c96:	4619      	mov	r1, r3
    6c98:	4808      	ldr	r0, [pc, #32]	; (6cbc <_ext_irq_enable+0x90>)
    6c9a:	4b0a      	ldr	r3, [pc, #40]	; (6cc4 <_ext_irq_enable+0x98>)
    6c9c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    6c9e:	7bfb      	ldrb	r3, [r7, #15]
    6ca0:	2201      	movs	r2, #1
    6ca2:	fa02 f303 	lsl.w	r3, r2, r3
    6ca6:	4619      	mov	r1, r3
    6ca8:	4804      	ldr	r0, [pc, #16]	; (6cbc <_ext_irq_enable+0x90>)
    6caa:	4b07      	ldr	r3, [pc, #28]	; (6cc8 <_ext_irq_enable+0x9c>)
    6cac:	4798      	blx	r3
	}

	return ERR_NONE;
    6cae:	2300      	movs	r3, #0
}
    6cb0:	4618      	mov	r0, r3
    6cb2:	3710      	adds	r7, #16
    6cb4:	46bd      	mov	sp, r7
    6cb6:	bd80      	pop	{r7, pc}
    6cb8:	00010110 	.word	0x00010110
    6cbc:	40002800 	.word	0x40002800
    6cc0:	000068b5 	.word	0x000068b5
    6cc4:	000068d1 	.word	0x000068d1
    6cc8:	00006899 	.word	0x00006899

00006ccc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    6ccc:	b580      	push	{r7, lr}
    6cce:	b084      	sub	sp, #16
    6cd0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    6cd2:	4841      	ldr	r0, [pc, #260]	; (6dd8 <_ext_irq_handler+0x10c>)
    6cd4:	4b41      	ldr	r3, [pc, #260]	; (6ddc <_ext_irq_handler+0x110>)
    6cd6:	4798      	blx	r3
    6cd8:	4603      	mov	r3, r0
    6cda:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    6cdc:	f04f 33ff 	mov.w	r3, #4294967295
    6ce0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    6ce2:	683b      	ldr	r3, [r7, #0]
    6ce4:	4619      	mov	r1, r3
    6ce6:	483c      	ldr	r0, [pc, #240]	; (6dd8 <_ext_irq_handler+0x10c>)
    6ce8:	4b3d      	ldr	r3, [pc, #244]	; (6de0 <_ext_irq_handler+0x114>)
    6cea:	4798      	blx	r3

	ASSERT(callback);
    6cec:	4b3d      	ldr	r3, [pc, #244]	; (6de4 <_ext_irq_handler+0x118>)
    6cee:	681b      	ldr	r3, [r3, #0]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	bf14      	ite	ne
    6cf4:	2301      	movne	r3, #1
    6cf6:	2300      	moveq	r3, #0
    6cf8:	b2db      	uxtb	r3, r3
    6cfa:	f44f 7284 	mov.w	r2, #264	; 0x108
    6cfe:	493a      	ldr	r1, [pc, #232]	; (6de8 <_ext_irq_handler+0x11c>)
    6d00:	4618      	mov	r0, r3
    6d02:	4b3a      	ldr	r3, [pc, #232]	; (6dec <_ext_irq_handler+0x120>)
    6d04:	4798      	blx	r3

	while (flags) {
    6d06:	e060      	b.n	6dca <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    6d08:	683b      	ldr	r3, [r7, #0]
    6d0a:	4618      	mov	r0, r3
    6d0c:	4b38      	ldr	r3, [pc, #224]	; (6df0 <_ext_irq_handler+0x124>)
    6d0e:	4798      	blx	r3
    6d10:	4603      	mov	r3, r0
    6d12:	b2db      	uxtb	r3, r3
    6d14:	3b01      	subs	r3, #1
    6d16:	b2db      	uxtb	r3, r3
    6d18:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6d1a:	e047      	b.n	6dac <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6d1c:	2300      	movs	r3, #0
    6d1e:	71fb      	strb	r3, [r7, #7]
    6d20:	2309      	movs	r3, #9
    6d22:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    6d24:	e024      	b.n	6d70 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    6d26:	79ba      	ldrb	r2, [r7, #6]
    6d28:	79fb      	ldrb	r3, [r7, #7]
    6d2a:	4413      	add	r3, r2
    6d2c:	105b      	asrs	r3, r3, #1
    6d2e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    6d30:	797b      	ldrb	r3, [r7, #5]
    6d32:	4a30      	ldr	r2, [pc, #192]	; (6df4 <_ext_irq_handler+0x128>)
    6d34:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6d38:	461a      	mov	r2, r3
    6d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6d3e:	429a      	cmp	r2, r3
    6d40:	d106      	bne.n	6d50 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    6d42:	797b      	ldrb	r3, [r7, #5]
    6d44:	4a2b      	ldr	r2, [pc, #172]	; (6df4 <_ext_irq_handler+0x128>)
    6d46:	00db      	lsls	r3, r3, #3
    6d48:	4413      	add	r3, r2
    6d4a:	685b      	ldr	r3, [r3, #4]
    6d4c:	60bb      	str	r3, [r7, #8]
					break;
    6d4e:	e013      	b.n	6d78 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    6d50:	797b      	ldrb	r3, [r7, #5]
    6d52:	4a28      	ldr	r2, [pc, #160]	; (6df4 <_ext_irq_handler+0x128>)
    6d54:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6d58:	461a      	mov	r2, r3
    6d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6d5e:	429a      	cmp	r2, r3
    6d60:	da03      	bge.n	6d6a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    6d62:	797b      	ldrb	r3, [r7, #5]
    6d64:	3301      	adds	r3, #1
    6d66:	71fb      	strb	r3, [r7, #7]
    6d68:	e002      	b.n	6d70 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    6d6a:	797b      	ldrb	r3, [r7, #5]
    6d6c:	3b01      	subs	r3, #1
    6d6e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    6d70:	79ba      	ldrb	r2, [r7, #6]
    6d72:	79fb      	ldrb	r3, [r7, #7]
    6d74:	429a      	cmp	r2, r3
    6d76:	d2d6      	bcs.n	6d26 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    6d78:	68bb      	ldr	r3, [r7, #8]
    6d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
    6d7e:	d003      	beq.n	6d88 <_ext_irq_handler+0xbc>
				callback(pin);
    6d80:	4b18      	ldr	r3, [pc, #96]	; (6de4 <_ext_irq_handler+0x118>)
    6d82:	681b      	ldr	r3, [r3, #0]
    6d84:	68b8      	ldr	r0, [r7, #8]
    6d86:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    6d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6d8c:	2201      	movs	r2, #1
    6d8e:	fa02 f303 	lsl.w	r3, r2, r3
    6d92:	43da      	mvns	r2, r3
    6d94:	683b      	ldr	r3, [r7, #0]
    6d96:	4013      	ands	r3, r2
    6d98:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    6d9a:	683b      	ldr	r3, [r7, #0]
    6d9c:	4618      	mov	r0, r3
    6d9e:	4b14      	ldr	r3, [pc, #80]	; (6df0 <_ext_irq_handler+0x124>)
    6da0:	4798      	blx	r3
    6da2:	4603      	mov	r3, r0
    6da4:	b2db      	uxtb	r3, r3
    6da6:	3b01      	subs	r3, #1
    6da8:	b2db      	uxtb	r3, r3
    6daa:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6db0:	f1b3 3fff 	cmp.w	r3, #4294967295
    6db4:	d1b2      	bne.n	6d1c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    6db6:	4808      	ldr	r0, [pc, #32]	; (6dd8 <_ext_irq_handler+0x10c>)
    6db8:	4b08      	ldr	r3, [pc, #32]	; (6ddc <_ext_irq_handler+0x110>)
    6dba:	4798      	blx	r3
    6dbc:	4603      	mov	r3, r0
    6dbe:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    6dc0:	683b      	ldr	r3, [r7, #0]
    6dc2:	4619      	mov	r1, r3
    6dc4:	4804      	ldr	r0, [pc, #16]	; (6dd8 <_ext_irq_handler+0x10c>)
    6dc6:	4b06      	ldr	r3, [pc, #24]	; (6de0 <_ext_irq_handler+0x114>)
    6dc8:	4798      	blx	r3
	while (flags) {
    6dca:	683b      	ldr	r3, [r7, #0]
    6dcc:	2b00      	cmp	r3, #0
    6dce:	d19b      	bne.n	6d08 <_ext_irq_handler+0x3c>
	}
}
    6dd0:	bf00      	nop
    6dd2:	3710      	adds	r7, #16
    6dd4:	46bd      	mov	sp, r7
    6dd6:	bd80      	pop	{r7, pc}
    6dd8:	40002800 	.word	0x40002800
    6ddc:	00006881 	.word	0x00006881
    6de0:	00006899 	.word	0x00006899
    6de4:	20001e38 	.word	0x20001e38
    6de8:	00010158 	.word	0x00010158
    6dec:	00005af5 	.word	0x00005af5
    6df0:	0000f985 	.word	0x0000f985
    6df4:	00010110 	.word	0x00010110

00006df8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    6df8:	b580      	push	{r7, lr}
    6dfa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6dfc:	4b01      	ldr	r3, [pc, #4]	; (6e04 <EIC_0_Handler+0xc>)
    6dfe:	4798      	blx	r3
} /**
    6e00:	bf00      	nop
    6e02:	bd80      	pop	{r7, pc}
    6e04:	00006ccd 	.word	0x00006ccd

00006e08 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    6e08:	b580      	push	{r7, lr}
    6e0a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6e0c:	4b01      	ldr	r3, [pc, #4]	; (6e14 <EIC_1_Handler+0xc>)
    6e0e:	4798      	blx	r3
} /**
    6e10:	bf00      	nop
    6e12:	bd80      	pop	{r7, pc}
    6e14:	00006ccd 	.word	0x00006ccd

00006e18 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    6e18:	b580      	push	{r7, lr}
    6e1a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6e1c:	4b01      	ldr	r3, [pc, #4]	; (6e24 <EIC_3_Handler+0xc>)
    6e1e:	4798      	blx	r3
} /**
    6e20:	bf00      	nop
    6e22:	bd80      	pop	{r7, pc}
    6e24:	00006ccd 	.word	0x00006ccd

00006e28 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    6e28:	b580      	push	{r7, lr}
    6e2a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6e2c:	4b01      	ldr	r3, [pc, #4]	; (6e34 <EIC_4_Handler+0xc>)
    6e2e:	4798      	blx	r3
} /**
    6e30:	bf00      	nop
    6e32:	bd80      	pop	{r7, pc}
    6e34:	00006ccd 	.word	0x00006ccd

00006e38 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6e3c:	4b01      	ldr	r3, [pc, #4]	; (6e44 <EIC_5_Handler+0xc>)
    6e3e:	4798      	blx	r3
} /**
    6e40:	bf00      	nop
    6e42:	bd80      	pop	{r7, pc}
    6e44:	00006ccd 	.word	0x00006ccd

00006e48 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    6e48:	b580      	push	{r7, lr}
    6e4a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6e4c:	4b01      	ldr	r3, [pc, #4]	; (6e54 <EIC_6_Handler+0xc>)
    6e4e:	4798      	blx	r3
} /**
    6e50:	bf00      	nop
    6e52:	bd80      	pop	{r7, pc}
    6e54:	00006ccd 	.word	0x00006ccd

00006e58 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    6e58:	b580      	push	{r7, lr}
    6e5a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6e5c:	4b01      	ldr	r3, [pc, #4]	; (6e64 <EIC_7_Handler+0xc>)
    6e5e:	4798      	blx	r3
} /**
    6e60:	bf00      	nop
    6e62:	bd80      	pop	{r7, pc}
    6e64:	00006ccd 	.word	0x00006ccd

00006e68 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    6e68:	b580      	push	{r7, lr}
    6e6a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6e6c:	4b01      	ldr	r3, [pc, #4]	; (6e74 <EIC_8_Handler+0xc>)
    6e6e:	4798      	blx	r3
} /**
    6e70:	bf00      	nop
    6e72:	bd80      	pop	{r7, pc}
    6e74:	00006ccd 	.word	0x00006ccd

00006e78 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    6e78:	b580      	push	{r7, lr}
    6e7a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6e7c:	4b01      	ldr	r3, [pc, #4]	; (6e84 <EIC_9_Handler+0xc>)
    6e7e:	4798      	blx	r3
}
    6e80:	bf00      	nop
    6e82:	bd80      	pop	{r7, pc}
    6e84:	00006ccd 	.word	0x00006ccd

00006e88 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    6e88:	b480      	push	{r7}
    6e8a:	b085      	sub	sp, #20
    6e8c:	af00      	add	r7, sp, #0
    6e8e:	60f8      	str	r0, [r7, #12]
    6e90:	460b      	mov	r3, r1
    6e92:	607a      	str	r2, [r7, #4]
    6e94:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    6e96:	7afa      	ldrb	r2, [r7, #11]
    6e98:	68fb      	ldr	r3, [r7, #12]
    6e9a:	3248      	adds	r2, #72	; 0x48
    6e9c:	6879      	ldr	r1, [r7, #4]
    6e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    6ea2:	bf00      	nop
    6ea4:	3714      	adds	r7, #20
    6ea6:	46bd      	mov	sp, r7
    6ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eac:	4770      	bx	lr

00006eae <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    6eae:	b480      	push	{r7}
    6eb0:	b083      	sub	sp, #12
    6eb2:	af00      	add	r7, sp, #0
    6eb4:	6078      	str	r0, [r7, #4]
    6eb6:	460b      	mov	r3, r1
    6eb8:	70fb      	strb	r3, [r7, #3]
    6eba:	4613      	mov	r3, r2
    6ebc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6ebe:	78fb      	ldrb	r3, [r7, #3]
    6ec0:	687a      	ldr	r2, [r7, #4]
    6ec2:	3304      	adds	r3, #4
    6ec4:	00db      	lsls	r3, r3, #3
    6ec6:	4413      	add	r3, r2
    6ec8:	78ba      	ldrb	r2, [r7, #2]
    6eca:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6ecc:	78fb      	ldrb	r3, [r7, #3]
    6ece:	78ba      	ldrb	r2, [r7, #2]
    6ed0:	43d2      	mvns	r2, r2
    6ed2:	b2d1      	uxtb	r1, r2
    6ed4:	687a      	ldr	r2, [r7, #4]
    6ed6:	3304      	adds	r3, #4
    6ed8:	00db      	lsls	r3, r3, #3
    6eda:	4413      	add	r3, r2
    6edc:	460a      	mov	r2, r1
    6ede:	711a      	strb	r2, [r3, #4]
}
    6ee0:	bf00      	nop
    6ee2:	370c      	adds	r7, #12
    6ee4:	46bd      	mov	sp, r7
    6ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eea:	4770      	bx	lr

00006eec <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    6eec:	b480      	push	{r7}
    6eee:	b085      	sub	sp, #20
    6ef0:	af00      	add	r7, sp, #0
    6ef2:	60f8      	str	r0, [r7, #12]
    6ef4:	460b      	mov	r3, r1
    6ef6:	607a      	str	r2, [r7, #4]
    6ef8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6efa:	7afa      	ldrb	r2, [r7, #11]
    6efc:	68fb      	ldr	r3, [r7, #12]
    6efe:	3204      	adds	r2, #4
    6f00:	6879      	ldr	r1, [r7, #4]
    6f02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    6f06:	bf00      	nop
    6f08:	3714      	adds	r7, #20
    6f0a:	46bd      	mov	sp, r7
    6f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f10:	4770      	bx	lr
	...

00006f14 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6f14:	b580      	push	{r7, lr}
    6f16:	b082      	sub	sp, #8
    6f18:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    6f1a:	2300      	movs	r3, #0
    6f1c:	71fb      	strb	r3, [r7, #7]
    6f1e:	e00b      	b.n	6f38 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6f20:	79fb      	ldrb	r3, [r7, #7]
    6f22:	4a18      	ldr	r2, [pc, #96]	; (6f84 <_event_system_init+0x70>)
    6f24:	5cd3      	ldrb	r3, [r2, r3]
    6f26:	461a      	mov	r2, r3
    6f28:	79fb      	ldrb	r3, [r7, #7]
    6f2a:	4619      	mov	r1, r3
    6f2c:	4816      	ldr	r0, [pc, #88]	; (6f88 <_event_system_init+0x74>)
    6f2e:	4b17      	ldr	r3, [pc, #92]	; (6f8c <_event_system_init+0x78>)
    6f30:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    6f32:	79fb      	ldrb	r3, [r7, #7]
    6f34:	3301      	adds	r3, #1
    6f36:	71fb      	strb	r3, [r7, #7]
    6f38:	79fb      	ldrb	r3, [r7, #7]
    6f3a:	2b42      	cmp	r3, #66	; 0x42
    6f3c:	d9f0      	bls.n	6f20 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6f3e:	2300      	movs	r3, #0
    6f40:	71fb      	strb	r3, [r7, #7]
    6f42:	e016      	b.n	6f72 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6f44:	79fb      	ldrb	r3, [r7, #7]
    6f46:	4a12      	ldr	r2, [pc, #72]	; (6f90 <_event_system_init+0x7c>)
    6f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6f4c:	461a      	mov	r2, r3
    6f4e:	79fb      	ldrb	r3, [r7, #7]
    6f50:	4619      	mov	r1, r3
    6f52:	480d      	ldr	r0, [pc, #52]	; (6f88 <_event_system_init+0x74>)
    6f54:	4b0f      	ldr	r3, [pc, #60]	; (6f94 <_event_system_init+0x80>)
    6f56:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6f58:	79fb      	ldrb	r3, [r7, #7]
    6f5a:	4a0f      	ldr	r2, [pc, #60]	; (6f98 <_event_system_init+0x84>)
    6f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f60:	b2da      	uxtb	r2, r3
    6f62:	79fb      	ldrb	r3, [r7, #7]
    6f64:	4619      	mov	r1, r3
    6f66:	4808      	ldr	r0, [pc, #32]	; (6f88 <_event_system_init+0x74>)
    6f68:	4b0c      	ldr	r3, [pc, #48]	; (6f9c <_event_system_init+0x88>)
    6f6a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6f6c:	79fb      	ldrb	r3, [r7, #7]
    6f6e:	3301      	adds	r3, #1
    6f70:	71fb      	strb	r3, [r7, #7]
    6f72:	79fb      	ldrb	r3, [r7, #7]
    6f74:	2b1f      	cmp	r3, #31
    6f76:	d9e5      	bls.n	6f44 <_event_system_init+0x30>
	}

	return ERR_NONE;
    6f78:	2300      	movs	r3, #0
}
    6f7a:	4618      	mov	r0, r3
    6f7c:	3708      	adds	r7, #8
    6f7e:	46bd      	mov	sp, r7
    6f80:	bd80      	pop	{r7, pc}
    6f82:	bf00      	nop
    6f84:	00010170 	.word	0x00010170
    6f88:	4100e000 	.word	0x4100e000
    6f8c:	00006e89 	.word	0x00006e89
    6f90:	000101b4 	.word	0x000101b4
    6f94:	00006eed 	.word	0x00006eed
    6f98:	000101f4 	.word	0x000101f4
    6f9c:	00006eaf 	.word	0x00006eaf

00006fa0 <hri_gclk_wait_for_sync>:
{
    6fa0:	b480      	push	{r7}
    6fa2:	b083      	sub	sp, #12
    6fa4:	af00      	add	r7, sp, #0
    6fa6:	6078      	str	r0, [r7, #4]
    6fa8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6faa:	bf00      	nop
    6fac:	687b      	ldr	r3, [r7, #4]
    6fae:	685a      	ldr	r2, [r3, #4]
    6fb0:	683b      	ldr	r3, [r7, #0]
    6fb2:	4013      	ands	r3, r2
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d1f9      	bne.n	6fac <hri_gclk_wait_for_sync+0xc>
}
    6fb8:	bf00      	nop
    6fba:	370c      	adds	r7, #12
    6fbc:	46bd      	mov	sp, r7
    6fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fc2:	4770      	bx	lr

00006fc4 <hri_gclk_write_GENCTRL_reg>:
{
    6fc4:	b580      	push	{r7, lr}
    6fc6:	b084      	sub	sp, #16
    6fc8:	af00      	add	r7, sp, #0
    6fca:	60f8      	str	r0, [r7, #12]
    6fcc:	460b      	mov	r3, r1
    6fce:	607a      	str	r2, [r7, #4]
    6fd0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6fd2:	7afa      	ldrb	r2, [r7, #11]
    6fd4:	68fb      	ldr	r3, [r7, #12]
    6fd6:	3208      	adds	r2, #8
    6fd8:	6879      	ldr	r1, [r7, #4]
    6fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6fde:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6fe2:	68f8      	ldr	r0, [r7, #12]
    6fe4:	4b02      	ldr	r3, [pc, #8]	; (6ff0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    6fe6:	4798      	blx	r3
}
    6fe8:	bf00      	nop
    6fea:	3710      	adds	r7, #16
    6fec:	46bd      	mov	sp, r7
    6fee:	bd80      	pop	{r7, pc}
    6ff0:	00006fa1 	.word	0x00006fa1

00006ff4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b082      	sub	sp, #8
    6ff8:	af00      	add	r7, sp, #0
    6ffa:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	f003 0301 	and.w	r3, r3, #1
    7002:	2b00      	cmp	r3, #0
    7004:	d004      	beq.n	7010 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    7006:	4a36      	ldr	r2, [pc, #216]	; (70e0 <_gclk_init_generators_by_fref+0xec>)
    7008:	2100      	movs	r1, #0
    700a:	4836      	ldr	r0, [pc, #216]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    700c:	4b36      	ldr	r3, [pc, #216]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    700e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	f003 0302 	and.w	r3, r3, #2
    7016:	2b00      	cmp	r3, #0
    7018:	d004      	beq.n	7024 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    701a:	4a34      	ldr	r2, [pc, #208]	; (70ec <_gclk_init_generators_by_fref+0xf8>)
    701c:	2101      	movs	r1, #1
    701e:	4831      	ldr	r0, [pc, #196]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    7020:	4b31      	ldr	r3, [pc, #196]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    7022:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7024:	687b      	ldr	r3, [r7, #4]
    7026:	f003 0304 	and.w	r3, r3, #4
    702a:	2b00      	cmp	r3, #0
    702c:	d004      	beq.n	7038 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    702e:	4a30      	ldr	r2, [pc, #192]	; (70f0 <_gclk_init_generators_by_fref+0xfc>)
    7030:	2102      	movs	r1, #2
    7032:	482c      	ldr	r0, [pc, #176]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    7034:	4b2c      	ldr	r3, [pc, #176]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    7036:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    7038:	687b      	ldr	r3, [r7, #4]
    703a:	f003 0308 	and.w	r3, r3, #8
    703e:	2b00      	cmp	r3, #0
    7040:	d004      	beq.n	704c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    7042:	4a2c      	ldr	r2, [pc, #176]	; (70f4 <_gclk_init_generators_by_fref+0x100>)
    7044:	2103      	movs	r1, #3
    7046:	4827      	ldr	r0, [pc, #156]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    7048:	4b27      	ldr	r3, [pc, #156]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    704a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    704c:	687b      	ldr	r3, [r7, #4]
    704e:	f003 0310 	and.w	r3, r3, #16
    7052:	2b00      	cmp	r3, #0
    7054:	d004      	beq.n	7060 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    7056:	4a28      	ldr	r2, [pc, #160]	; (70f8 <_gclk_init_generators_by_fref+0x104>)
    7058:	2104      	movs	r1, #4
    705a:	4822      	ldr	r0, [pc, #136]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    705c:	4b22      	ldr	r3, [pc, #136]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    705e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    7060:	687b      	ldr	r3, [r7, #4]
    7062:	f003 0320 	and.w	r3, r3, #32
    7066:	2b00      	cmp	r3, #0
    7068:	d004      	beq.n	7074 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    706a:	4a24      	ldr	r2, [pc, #144]	; (70fc <_gclk_init_generators_by_fref+0x108>)
    706c:	2105      	movs	r1, #5
    706e:	481d      	ldr	r0, [pc, #116]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    7070:	4b1d      	ldr	r3, [pc, #116]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    7072:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    7074:	687b      	ldr	r3, [r7, #4]
    7076:	f003 0340 	and.w	r3, r3, #64	; 0x40
    707a:	2b00      	cmp	r3, #0
    707c:	d004      	beq.n	7088 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    707e:	4a20      	ldr	r2, [pc, #128]	; (7100 <_gclk_init_generators_by_fref+0x10c>)
    7080:	2106      	movs	r1, #6
    7082:	4818      	ldr	r0, [pc, #96]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    7084:	4b18      	ldr	r3, [pc, #96]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    7086:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    708e:	2b00      	cmp	r3, #0
    7090:	d004      	beq.n	709c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    7092:	4a1c      	ldr	r2, [pc, #112]	; (7104 <_gclk_init_generators_by_fref+0x110>)
    7094:	2107      	movs	r1, #7
    7096:	4813      	ldr	r0, [pc, #76]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    7098:	4b13      	ldr	r3, [pc, #76]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    709a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    70a2:	2b00      	cmp	r3, #0
    70a4:	d004      	beq.n	70b0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    70a6:	4a18      	ldr	r2, [pc, #96]	; (7108 <_gclk_init_generators_by_fref+0x114>)
    70a8:	2108      	movs	r1, #8
    70aa:	480e      	ldr	r0, [pc, #56]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    70ac:	4b0e      	ldr	r3, [pc, #56]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    70ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    70b0:	687b      	ldr	r3, [r7, #4]
    70b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    70b6:	2b00      	cmp	r3, #0
    70b8:	d004      	beq.n	70c4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    70ba:	4a14      	ldr	r2, [pc, #80]	; (710c <_gclk_init_generators_by_fref+0x118>)
    70bc:	210a      	movs	r1, #10
    70be:	4809      	ldr	r0, [pc, #36]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    70c0:	4b09      	ldr	r3, [pc, #36]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    70c2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    70ca:	2b00      	cmp	r3, #0
    70cc:	d004      	beq.n	70d8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    70ce:	4a10      	ldr	r2, [pc, #64]	; (7110 <_gclk_init_generators_by_fref+0x11c>)
    70d0:	210b      	movs	r1, #11
    70d2:	4804      	ldr	r0, [pc, #16]	; (70e4 <_gclk_init_generators_by_fref+0xf0>)
    70d4:	4b04      	ldr	r3, [pc, #16]	; (70e8 <_gclk_init_generators_by_fref+0xf4>)
    70d6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    70d8:	bf00      	nop
    70da:	3708      	adds	r7, #8
    70dc:	46bd      	mov	sp, r7
    70de:	bd80      	pop	{r7, pc}
    70e0:	00010107 	.word	0x00010107
    70e4:	40001c00 	.word	0x40001c00
    70e8:	00006fc5 	.word	0x00006fc5
    70ec:	00010907 	.word	0x00010907
    70f0:	00010906 	.word	0x00010906
    70f4:	00020908 	.word	0x00020908
    70f8:	00010901 	.word	0x00010901
    70fc:	00062901 	.word	0x00062901
    7100:	000c2901 	.word	0x000c2901
    7104:	00082908 	.word	0x00082908
    7108:	00032901 	.word	0x00032901
    710c:	00010905 	.word	0x00010905
    7110:	00041905 	.word	0x00041905

00007114 <hri_mclk_write_CPUDIV_reg>:
{
    7114:	b480      	push	{r7}
    7116:	b083      	sub	sp, #12
    7118:	af00      	add	r7, sp, #0
    711a:	6078      	str	r0, [r7, #4]
    711c:	460b      	mov	r3, r1
    711e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    7120:	687b      	ldr	r3, [r7, #4]
    7122:	78fa      	ldrb	r2, [r7, #3]
    7124:	715a      	strb	r2, [r3, #5]
}
    7126:	bf00      	nop
    7128:	370c      	adds	r7, #12
    712a:	46bd      	mov	sp, r7
    712c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7130:	4770      	bx	lr
	...

00007134 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    7134:	b580      	push	{r7, lr}
    7136:	b082      	sub	sp, #8
    7138:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    713a:	4b05      	ldr	r3, [pc, #20]	; (7150 <_mclk_init+0x1c>)
    713c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    713e:	2101      	movs	r1, #1
    7140:	6878      	ldr	r0, [r7, #4]
    7142:	4b04      	ldr	r3, [pc, #16]	; (7154 <_mclk_init+0x20>)
    7144:	4798      	blx	r3
}
    7146:	bf00      	nop
    7148:	3708      	adds	r7, #8
    714a:	46bd      	mov	sp, r7
    714c:	bd80      	pop	{r7, pc}
    714e:	bf00      	nop
    7150:	40000800 	.word	0x40000800
    7154:	00007115 	.word	0x00007115

00007158 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    7158:	b480      	push	{r7}
    715a:	b083      	sub	sp, #12
    715c:	af00      	add	r7, sp, #0
    715e:	6078      	str	r0, [r7, #4]
    7160:	460b      	mov	r3, r1
    7162:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	78fa      	ldrb	r2, [r7, #3]
    7168:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    716a:	bf00      	nop
    716c:	370c      	adds	r7, #12
    716e:	46bd      	mov	sp, r7
    7170:	f85d 7b04 	ldr.w	r7, [sp], #4
    7174:	4770      	bx	lr

00007176 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    7176:	b480      	push	{r7}
    7178:	b083      	sub	sp, #12
    717a:	af00      	add	r7, sp, #0
    717c:	6078      	str	r0, [r7, #4]
    717e:	460b      	mov	r3, r1
    7180:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	887a      	ldrh	r2, [r7, #2]
    7186:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7188:	bf00      	nop
    718a:	370c      	adds	r7, #12
    718c:	46bd      	mov	sp, r7
    718e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7192:	4770      	bx	lr

00007194 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    7194:	b480      	push	{r7}
    7196:	b083      	sub	sp, #12
    7198:	af00      	add	r7, sp, #0
    719a:	6078      	str	r0, [r7, #4]
    719c:	460b      	mov	r3, r1
    719e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	78fa      	ldrb	r2, [r7, #3]
    71a4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    71a6:	bf00      	nop
    71a8:	370c      	adds	r7, #12
    71aa:	46bd      	mov	sp, r7
    71ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    71b0:	4770      	bx	lr

000071b2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    71b2:	b480      	push	{r7}
    71b4:	b083      	sub	sp, #12
    71b6:	af00      	add	r7, sp, #0
    71b8:	6078      	str	r0, [r7, #4]
    71ba:	460b      	mov	r3, r1
    71bc:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    71be:	687b      	ldr	r3, [r7, #4]
    71c0:	78fa      	ldrb	r2, [r7, #3]
    71c2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    71c4:	bf00      	nop
    71c6:	370c      	adds	r7, #12
    71c8:	46bd      	mov	sp, r7
    71ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ce:	4770      	bx	lr

000071d0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    71d0:	b480      	push	{r7}
    71d2:	b085      	sub	sp, #20
    71d4:	af00      	add	r7, sp, #0
    71d6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    71d8:	687b      	ldr	r3, [r7, #4]
    71da:	69db      	ldr	r3, [r3, #28]
    71dc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    71de:	68fb      	ldr	r3, [r7, #12]
    71e0:	0a1b      	lsrs	r3, r3, #8
    71e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71e6:	60fb      	str	r3, [r7, #12]
	return tmp;
    71e8:	68fb      	ldr	r3, [r7, #12]
}
    71ea:	4618      	mov	r0, r3
    71ec:	3714      	adds	r7, #20
    71ee:	46bd      	mov	sp, r7
    71f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    71f4:	4770      	bx	lr

000071f6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    71f6:	b480      	push	{r7}
    71f8:	b083      	sub	sp, #12
    71fa:	af00      	add	r7, sp, #0
    71fc:	6078      	str	r0, [r7, #4]
    71fe:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7200:	687b      	ldr	r3, [r7, #4]
    7202:	683a      	ldr	r2, [r7, #0]
    7204:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7206:	bf00      	nop
    7208:	370c      	adds	r7, #12
    720a:	46bd      	mov	sp, r7
    720c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7210:	4770      	bx	lr
	...

00007214 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    7214:	b580      	push	{r7, lr}
    7216:	b082      	sub	sp, #8
    7218:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    721a:	4b13      	ldr	r3, [pc, #76]	; (7268 <_osc32kctrl_init_sources+0x54>)
    721c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    721e:	2300      	movs	r3, #0
    7220:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    7222:	f242 018e 	movw	r1, #8334	; 0x208e
    7226:	6878      	ldr	r0, [r7, #4]
    7228:	4b10      	ldr	r3, [pc, #64]	; (726c <_osc32kctrl_init_sources+0x58>)
    722a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    722c:	2100      	movs	r1, #0
    722e:	6878      	ldr	r0, [r7, #4]
    7230:	4b0f      	ldr	r3, [pc, #60]	; (7270 <_osc32kctrl_init_sources+0x5c>)
    7232:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    7234:	2100      	movs	r1, #0
    7236:	6878      	ldr	r0, [r7, #4]
    7238:	4b0e      	ldr	r3, [pc, #56]	; (7274 <_osc32kctrl_init_sources+0x60>)
    723a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    723c:	6878      	ldr	r0, [r7, #4]
    723e:	4b0e      	ldr	r3, [pc, #56]	; (7278 <_osc32kctrl_init_sources+0x64>)
    7240:	4798      	blx	r3
    7242:	4603      	mov	r3, r0
    7244:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    7246:	887b      	ldrh	r3, [r7, #2]
    7248:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    724a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    724e:	4619      	mov	r1, r3
    7250:	6878      	ldr	r0, [r7, #4]
    7252:	4b0a      	ldr	r3, [pc, #40]	; (727c <_osc32kctrl_init_sources+0x68>)
    7254:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    7256:	2100      	movs	r1, #0
    7258:	6878      	ldr	r0, [r7, #4]
    725a:	4b09      	ldr	r3, [pc, #36]	; (7280 <_osc32kctrl_init_sources+0x6c>)
    725c:	4798      	blx	r3
	(void)calib;
}
    725e:	bf00      	nop
    7260:	3708      	adds	r7, #8
    7262:	46bd      	mov	sp, r7
    7264:	bd80      	pop	{r7, pc}
    7266:	bf00      	nop
    7268:	40001400 	.word	0x40001400
    726c:	00007177 	.word	0x00007177
    7270:	00007195 	.word	0x00007195
    7274:	000071b3 	.word	0x000071b3
    7278:	000071d1 	.word	0x000071d1
    727c:	000071f7 	.word	0x000071f7
    7280:	00007159 	.word	0x00007159

00007284 <hri_gclk_wait_for_sync>:
{
    7284:	b480      	push	{r7}
    7286:	b083      	sub	sp, #12
    7288:	af00      	add	r7, sp, #0
    728a:	6078      	str	r0, [r7, #4]
    728c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    728e:	bf00      	nop
    7290:	687b      	ldr	r3, [r7, #4]
    7292:	685a      	ldr	r2, [r3, #4]
    7294:	683b      	ldr	r3, [r7, #0]
    7296:	4013      	ands	r3, r2
    7298:	2b00      	cmp	r3, #0
    729a:	d1f9      	bne.n	7290 <hri_gclk_wait_for_sync+0xc>
}
    729c:	bf00      	nop
    729e:	370c      	adds	r7, #12
    72a0:	46bd      	mov	sp, r7
    72a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72a6:	4770      	bx	lr

000072a8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    72a8:	b480      	push	{r7}
    72aa:	b083      	sub	sp, #12
    72ac:	af00      	add	r7, sp, #0
    72ae:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    72b0:	687b      	ldr	r3, [r7, #4]
    72b2:	685b      	ldr	r3, [r3, #4]
    72b4:	089b      	lsrs	r3, r3, #2
    72b6:	f003 0301 	and.w	r3, r3, #1
    72ba:	2b00      	cmp	r3, #0
    72bc:	bf14      	ite	ne
    72be:	2301      	movne	r3, #1
    72c0:	2300      	moveq	r3, #0
    72c2:	b2db      	uxtb	r3, r3
}
    72c4:	4618      	mov	r0, r3
    72c6:	370c      	adds	r7, #12
    72c8:	46bd      	mov	sp, r7
    72ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ce:	4770      	bx	lr

000072d0 <hri_gclk_read_SYNCBUSY_reg>:
{
    72d0:	b480      	push	{r7}
    72d2:	b083      	sub	sp, #12
    72d4:	af00      	add	r7, sp, #0
    72d6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    72d8:	687b      	ldr	r3, [r7, #4]
    72da:	685b      	ldr	r3, [r3, #4]
}
    72dc:	4618      	mov	r0, r3
    72de:	370c      	adds	r7, #12
    72e0:	46bd      	mov	sp, r7
    72e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72e6:	4770      	bx	lr

000072e8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    72e8:	b580      	push	{r7, lr}
    72ea:	b086      	sub	sp, #24
    72ec:	af00      	add	r7, sp, #0
    72ee:	60f8      	str	r0, [r7, #12]
    72f0:	460b      	mov	r3, r1
    72f2:	607a      	str	r2, [r7, #4]
    72f4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    72f6:	7afa      	ldrb	r2, [r7, #11]
    72f8:	68fb      	ldr	r3, [r7, #12]
    72fa:	3208      	adds	r2, #8
    72fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7300:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7302:	697b      	ldr	r3, [r7, #20]
    7304:	f023 030f 	bic.w	r3, r3, #15
    7308:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    730a:	687b      	ldr	r3, [r7, #4]
    730c:	f003 030f 	and.w	r3, r3, #15
    7310:	697a      	ldr	r2, [r7, #20]
    7312:	4313      	orrs	r3, r2
    7314:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    7316:	7afa      	ldrb	r2, [r7, #11]
    7318:	68fb      	ldr	r3, [r7, #12]
    731a:	3208      	adds	r2, #8
    731c:	6979      	ldr	r1, [r7, #20]
    731e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7322:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7326:	68f8      	ldr	r0, [r7, #12]
    7328:	4b02      	ldr	r3, [pc, #8]	; (7334 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    732a:	4798      	blx	r3
}
    732c:	bf00      	nop
    732e:	3718      	adds	r7, #24
    7330:	46bd      	mov	sp, r7
    7332:	bd80      	pop	{r7, pc}
    7334:	00007285 	.word	0x00007285

00007338 <hri_gclk_write_PCHCTRL_reg>:
{
    7338:	b480      	push	{r7}
    733a:	b085      	sub	sp, #20
    733c:	af00      	add	r7, sp, #0
    733e:	60f8      	str	r0, [r7, #12]
    7340:	460b      	mov	r3, r1
    7342:	607a      	str	r2, [r7, #4]
    7344:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    7346:	7afa      	ldrb	r2, [r7, #11]
    7348:	68fb      	ldr	r3, [r7, #12]
    734a:	3220      	adds	r2, #32
    734c:	6879      	ldr	r1, [r7, #4]
    734e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7352:	bf00      	nop
    7354:	3714      	adds	r7, #20
    7356:	46bd      	mov	sp, r7
    7358:	f85d 7b04 	ldr.w	r7, [sp], #4
    735c:	4770      	bx	lr

0000735e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    735e:	b480      	push	{r7}
    7360:	b085      	sub	sp, #20
    7362:	af00      	add	r7, sp, #0
    7364:	60f8      	str	r0, [r7, #12]
    7366:	460b      	mov	r3, r1
    7368:	607a      	str	r2, [r7, #4]
    736a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    736c:	bf00      	nop
    736e:	7afa      	ldrb	r2, [r7, #11]
    7370:	68f9      	ldr	r1, [r7, #12]
    7372:	4613      	mov	r3, r2
    7374:	009b      	lsls	r3, r3, #2
    7376:	4413      	add	r3, r2
    7378:	009b      	lsls	r3, r3, #2
    737a:	440b      	add	r3, r1
    737c:	333c      	adds	r3, #60	; 0x3c
    737e:	681a      	ldr	r2, [r3, #0]
    7380:	687b      	ldr	r3, [r7, #4]
    7382:	4013      	ands	r3, r2
    7384:	2b00      	cmp	r3, #0
    7386:	d1f2      	bne.n	736e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    7388:	bf00      	nop
    738a:	3714      	adds	r7, #20
    738c:	46bd      	mov	sp, r7
    738e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7392:	4770      	bx	lr

00007394 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    7394:	b480      	push	{r7}
    7396:	b083      	sub	sp, #12
    7398:	af00      	add	r7, sp, #0
    739a:	6078      	str	r0, [r7, #4]
    739c:	460b      	mov	r3, r1
    739e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    73a0:	78fa      	ldrb	r2, [r7, #3]
    73a2:	6879      	ldr	r1, [r7, #4]
    73a4:	4613      	mov	r3, r2
    73a6:	009b      	lsls	r3, r3, #2
    73a8:	4413      	add	r3, r2
    73aa:	009b      	lsls	r3, r3, #2
    73ac:	440b      	add	r3, r1
    73ae:	3340      	adds	r3, #64	; 0x40
    73b0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    73b2:	f003 0301 	and.w	r3, r3, #1
    73b6:	2b00      	cmp	r3, #0
    73b8:	bf14      	ite	ne
    73ba:	2301      	movne	r3, #1
    73bc:	2300      	moveq	r3, #0
    73be:	b2db      	uxtb	r3, r3
}
    73c0:	4618      	mov	r0, r3
    73c2:	370c      	adds	r7, #12
    73c4:	46bd      	mov	sp, r7
    73c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    73ca:	4770      	bx	lr

000073cc <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    73cc:	b480      	push	{r7}
    73ce:	b083      	sub	sp, #12
    73d0:	af00      	add	r7, sp, #0
    73d2:	6078      	str	r0, [r7, #4]
    73d4:	460b      	mov	r3, r1
    73d6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    73d8:	78fa      	ldrb	r2, [r7, #3]
    73da:	6879      	ldr	r1, [r7, #4]
    73dc:	4613      	mov	r3, r2
    73de:	009b      	lsls	r3, r3, #2
    73e0:	4413      	add	r3, r2
    73e2:	009b      	lsls	r3, r3, #2
    73e4:	440b      	add	r3, r1
    73e6:	3340      	adds	r3, #64	; 0x40
    73e8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    73ea:	085b      	lsrs	r3, r3, #1
    73ec:	f003 0301 	and.w	r3, r3, #1
    73f0:	2b00      	cmp	r3, #0
    73f2:	bf14      	ite	ne
    73f4:	2301      	movne	r3, #1
    73f6:	2300      	moveq	r3, #0
    73f8:	b2db      	uxtb	r3, r3
}
    73fa:	4618      	mov	r0, r3
    73fc:	370c      	adds	r7, #12
    73fe:	46bd      	mov	sp, r7
    7400:	f85d 7b04 	ldr.w	r7, [sp], #4
    7404:	4770      	bx	lr
	...

00007408 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    7408:	b580      	push	{r7, lr}
    740a:	b082      	sub	sp, #8
    740c:	af00      	add	r7, sp, #0
    740e:	6078      	str	r0, [r7, #4]
    7410:	460b      	mov	r3, r1
    7412:	70fb      	strb	r3, [r7, #3]
    7414:	4613      	mov	r3, r2
    7416:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    7418:	78fa      	ldrb	r2, [r7, #3]
    741a:	6879      	ldr	r1, [r7, #4]
    741c:	4613      	mov	r3, r2
    741e:	009b      	lsls	r3, r3, #2
    7420:	4413      	add	r3, r2
    7422:	009b      	lsls	r3, r3, #2
    7424:	440b      	add	r3, r1
    7426:	3330      	adds	r3, #48	; 0x30
    7428:	78ba      	ldrb	r2, [r7, #2]
    742a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    742c:	78fb      	ldrb	r3, [r7, #3]
    742e:	2202      	movs	r2, #2
    7430:	4619      	mov	r1, r3
    7432:	6878      	ldr	r0, [r7, #4]
    7434:	4b02      	ldr	r3, [pc, #8]	; (7440 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    7436:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7438:	bf00      	nop
    743a:	3708      	adds	r7, #8
    743c:	46bd      	mov	sp, r7
    743e:	bd80      	pop	{r7, pc}
    7440:	0000735f 	.word	0x0000735f

00007444 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    7444:	b580      	push	{r7, lr}
    7446:	b084      	sub	sp, #16
    7448:	af00      	add	r7, sp, #0
    744a:	60f8      	str	r0, [r7, #12]
    744c:	460b      	mov	r3, r1
    744e:	607a      	str	r2, [r7, #4]
    7450:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7452:	7afa      	ldrb	r2, [r7, #11]
    7454:	68f9      	ldr	r1, [r7, #12]
    7456:	4613      	mov	r3, r2
    7458:	009b      	lsls	r3, r3, #2
    745a:	4413      	add	r3, r2
    745c:	009b      	lsls	r3, r3, #2
    745e:	440b      	add	r3, r1
    7460:	3334      	adds	r3, #52	; 0x34
    7462:	687a      	ldr	r2, [r7, #4]
    7464:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    7466:	7afb      	ldrb	r3, [r7, #11]
    7468:	2206      	movs	r2, #6
    746a:	4619      	mov	r1, r3
    746c:	68f8      	ldr	r0, [r7, #12]
    746e:	4b03      	ldr	r3, [pc, #12]	; (747c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    7470:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7472:	bf00      	nop
    7474:	3710      	adds	r7, #16
    7476:	46bd      	mov	sp, r7
    7478:	bd80      	pop	{r7, pc}
    747a:	bf00      	nop
    747c:	0000735f 	.word	0x0000735f

00007480 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    7480:	b480      	push	{r7}
    7482:	b085      	sub	sp, #20
    7484:	af00      	add	r7, sp, #0
    7486:	60f8      	str	r0, [r7, #12]
    7488:	460b      	mov	r3, r1
    748a:	607a      	str	r2, [r7, #4]
    748c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    748e:	7afa      	ldrb	r2, [r7, #11]
    7490:	68f9      	ldr	r1, [r7, #12]
    7492:	4613      	mov	r3, r2
    7494:	009b      	lsls	r3, r3, #2
    7496:	4413      	add	r3, r2
    7498:	009b      	lsls	r3, r3, #2
    749a:	440b      	add	r3, r1
    749c:	3338      	adds	r3, #56	; 0x38
    749e:	687a      	ldr	r2, [r7, #4]
    74a0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    74a2:	bf00      	nop
    74a4:	3714      	adds	r7, #20
    74a6:	46bd      	mov	sp, r7
    74a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ac:	4770      	bx	lr

000074ae <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    74ae:	b480      	push	{r7}
    74b0:	b083      	sub	sp, #12
    74b2:	af00      	add	r7, sp, #0
    74b4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    74b6:	687b      	ldr	r3, [r7, #4]
    74b8:	691b      	ldr	r3, [r3, #16]
    74ba:	085b      	lsrs	r3, r3, #1
    74bc:	f003 0301 	and.w	r3, r3, #1
    74c0:	2b00      	cmp	r3, #0
    74c2:	bf14      	ite	ne
    74c4:	2301      	movne	r3, #1
    74c6:	2300      	moveq	r3, #0
    74c8:	b2db      	uxtb	r3, r3
}
    74ca:	4618      	mov	r0, r3
    74cc:	370c      	adds	r7, #12
    74ce:	46bd      	mov	sp, r7
    74d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    74d4:	4770      	bx	lr

000074d6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    74d6:	b480      	push	{r7}
    74d8:	b083      	sub	sp, #12
    74da:	af00      	add	r7, sp, #0
    74dc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    74de:	687b      	ldr	r3, [r7, #4]
    74e0:	691b      	ldr	r3, [r3, #16]
    74e2:	0a1b      	lsrs	r3, r3, #8
    74e4:	f003 0301 	and.w	r3, r3, #1
    74e8:	2b00      	cmp	r3, #0
    74ea:	bf14      	ite	ne
    74ec:	2301      	movne	r3, #1
    74ee:	2300      	moveq	r3, #0
    74f0:	b2db      	uxtb	r3, r3
}
    74f2:	4618      	mov	r0, r3
    74f4:	370c      	adds	r7, #12
    74f6:	46bd      	mov	sp, r7
    74f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    74fc:	4770      	bx	lr

000074fe <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    74fe:	b480      	push	{r7}
    7500:	b085      	sub	sp, #20
    7502:	af00      	add	r7, sp, #0
    7504:	6078      	str	r0, [r7, #4]
    7506:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	691b      	ldr	r3, [r3, #16]
    750c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    750e:	68fa      	ldr	r2, [r7, #12]
    7510:	683b      	ldr	r3, [r7, #0]
    7512:	4013      	ands	r3, r2
    7514:	60fb      	str	r3, [r7, #12]
	return tmp;
    7516:	68fb      	ldr	r3, [r7, #12]
}
    7518:	4618      	mov	r0, r3
    751a:	3714      	adds	r7, #20
    751c:	46bd      	mov	sp, r7
    751e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7522:	4770      	bx	lr

00007524 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    7524:	b480      	push	{r7}
    7526:	b085      	sub	sp, #20
    7528:	af00      	add	r7, sp, #0
    752a:	60f8      	str	r0, [r7, #12]
    752c:	460b      	mov	r3, r1
    752e:	607a      	str	r2, [r7, #4]
    7530:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    7532:	7afb      	ldrb	r3, [r7, #11]
    7534:	68fa      	ldr	r2, [r7, #12]
    7536:	3304      	adds	r3, #4
    7538:	009b      	lsls	r3, r3, #2
    753a:	4413      	add	r3, r2
    753c:	687a      	ldr	r2, [r7, #4]
    753e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7540:	bf00      	nop
    7542:	3714      	adds	r7, #20
    7544:	46bd      	mov	sp, r7
    7546:	f85d 7b04 	ldr.w	r7, [sp], #4
    754a:	4770      	bx	lr

0000754c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    754c:	b480      	push	{r7}
    754e:	b083      	sub	sp, #12
    7550:	af00      	add	r7, sp, #0
    7552:	6078      	str	r0, [r7, #4]
    7554:	460b      	mov	r3, r1
    7556:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    7558:	687b      	ldr	r3, [r7, #4]
    755a:	78fa      	ldrb	r2, [r7, #3]
    755c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    755e:	bf00      	nop
    7560:	370c      	adds	r7, #12
    7562:	46bd      	mov	sp, r7
    7564:	f85d 7b04 	ldr.w	r7, [sp], #4
    7568:	4770      	bx	lr

0000756a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    756a:	b480      	push	{r7}
    756c:	b085      	sub	sp, #20
    756e:	af00      	add	r7, sp, #0
    7570:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7572:	687b      	ldr	r3, [r7, #4]
    7574:	f893 3020 	ldrb.w	r3, [r3, #32]
    7578:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    757a:	7bfb      	ldrb	r3, [r7, #15]
    757c:	f003 0301 	and.w	r3, r3, #1
    7580:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7582:	7bfb      	ldrb	r3, [r7, #15]
    7584:	2b00      	cmp	r3, #0
    7586:	bf14      	ite	ne
    7588:	2301      	movne	r3, #1
    758a:	2300      	moveq	r3, #0
    758c:	b2db      	uxtb	r3, r3
}
    758e:	4618      	mov	r0, r3
    7590:	3714      	adds	r7, #20
    7592:	46bd      	mov	sp, r7
    7594:	f85d 7b04 	ldr.w	r7, [sp], #4
    7598:	4770      	bx	lr

0000759a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    759a:	b480      	push	{r7}
    759c:	b083      	sub	sp, #12
    759e:	af00      	add	r7, sp, #0
    75a0:	6078      	str	r0, [r7, #4]
    75a2:	460b      	mov	r3, r1
    75a4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    75a6:	687b      	ldr	r3, [r7, #4]
    75a8:	78fa      	ldrb	r2, [r7, #3]
    75aa:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    75ae:	bf00      	nop
    75b0:	370c      	adds	r7, #12
    75b2:	46bd      	mov	sp, r7
    75b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    75b8:	4770      	bx	lr

000075ba <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    75ba:	b480      	push	{r7}
    75bc:	b083      	sub	sp, #12
    75be:	af00      	add	r7, sp, #0
    75c0:	6078      	str	r0, [r7, #4]
    75c2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	683a      	ldr	r2, [r7, #0]
    75c8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    75ca:	bf00      	nop
    75cc:	370c      	adds	r7, #12
    75ce:	46bd      	mov	sp, r7
    75d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    75d4:	4770      	bx	lr

000075d6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    75d6:	b480      	push	{r7}
    75d8:	b083      	sub	sp, #12
    75da:	af00      	add	r7, sp, #0
    75dc:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    75de:	687b      	ldr	r3, [r7, #4]
    75e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    75e2:	4618      	mov	r0, r3
    75e4:	370c      	adds	r7, #12
    75e6:	46bd      	mov	sp, r7
    75e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ec:	4770      	bx	lr

000075ee <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    75ee:	b480      	push	{r7}
    75f0:	b083      	sub	sp, #12
    75f2:	af00      	add	r7, sp, #0
    75f4:	6078      	str	r0, [r7, #4]
    75f6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    75f8:	687b      	ldr	r3, [r7, #4]
    75fa:	683a      	ldr	r2, [r7, #0]
    75fc:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    75fe:	bf00      	nop
    7600:	370c      	adds	r7, #12
    7602:	46bd      	mov	sp, r7
    7604:	f85d 7b04 	ldr.w	r7, [sp], #4
    7608:	4770      	bx	lr

0000760a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    760a:	b480      	push	{r7}
    760c:	b085      	sub	sp, #20
    760e:	af00      	add	r7, sp, #0
    7610:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7612:	687b      	ldr	r3, [r7, #4]
    7614:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7618:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    761a:	7bfb      	ldrb	r3, [r7, #15]
    761c:	085b      	lsrs	r3, r3, #1
    761e:	b2db      	uxtb	r3, r3
    7620:	f003 0301 	and.w	r3, r3, #1
    7624:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7626:	7bfb      	ldrb	r3, [r7, #15]
    7628:	2b00      	cmp	r3, #0
    762a:	bf14      	ite	ne
    762c:	2301      	movne	r3, #1
    762e:	2300      	moveq	r3, #0
    7630:	b2db      	uxtb	r3, r3
}
    7632:	4618      	mov	r0, r3
    7634:	3714      	adds	r7, #20
    7636:	46bd      	mov	sp, r7
    7638:	f85d 7b04 	ldr.w	r7, [sp], #4
    763c:	4770      	bx	lr

0000763e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    763e:	b480      	push	{r7}
    7640:	b085      	sub	sp, #20
    7642:	af00      	add	r7, sp, #0
    7644:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7646:	687b      	ldr	r3, [r7, #4]
    7648:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    764c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    764e:	7bfb      	ldrb	r3, [r7, #15]
    7650:	089b      	lsrs	r3, r3, #2
    7652:	b2db      	uxtb	r3, r3
    7654:	f003 0301 	and.w	r3, r3, #1
    7658:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    765a:	7bfb      	ldrb	r3, [r7, #15]
    765c:	2b00      	cmp	r3, #0
    765e:	bf14      	ite	ne
    7660:	2301      	movne	r3, #1
    7662:	2300      	moveq	r3, #0
    7664:	b2db      	uxtb	r3, r3
}
    7666:	4618      	mov	r0, r3
    7668:	3714      	adds	r7, #20
    766a:	46bd      	mov	sp, r7
    766c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7670:	4770      	bx	lr

00007672 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    7672:	b480      	push	{r7}
    7674:	b085      	sub	sp, #20
    7676:	af00      	add	r7, sp, #0
    7678:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    767a:	687b      	ldr	r3, [r7, #4]
    767c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7680:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    7682:	7bfb      	ldrb	r3, [r7, #15]
    7684:	08db      	lsrs	r3, r3, #3
    7686:	b2db      	uxtb	r3, r3
    7688:	f003 0301 	and.w	r3, r3, #1
    768c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    768e:	7bfb      	ldrb	r3, [r7, #15]
    7690:	2b00      	cmp	r3, #0
    7692:	bf14      	ite	ne
    7694:	2301      	movne	r3, #1
    7696:	2300      	moveq	r3, #0
    7698:	b2db      	uxtb	r3, r3
}
    769a:	4618      	mov	r0, r3
    769c:	3714      	adds	r7, #20
    769e:	46bd      	mov	sp, r7
    76a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    76a4:	4770      	bx	lr

000076a6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    76a6:	b480      	push	{r7}
    76a8:	b085      	sub	sp, #20
    76aa:	af00      	add	r7, sp, #0
    76ac:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    76b4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    76b6:	7bfb      	ldrb	r3, [r7, #15]
    76b8:	091b      	lsrs	r3, r3, #4
    76ba:	b2db      	uxtb	r3, r3
    76bc:	f003 0301 	and.w	r3, r3, #1
    76c0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    76c2:	7bfb      	ldrb	r3, [r7, #15]
    76c4:	2b00      	cmp	r3, #0
    76c6:	bf14      	ite	ne
    76c8:	2301      	movne	r3, #1
    76ca:	2300      	moveq	r3, #0
    76cc:	b2db      	uxtb	r3, r3
}
    76ce:	4618      	mov	r0, r3
    76d0:	3714      	adds	r7, #20
    76d2:	46bd      	mov	sp, r7
    76d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    76d8:	4770      	bx	lr
	...

000076dc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    76dc:	b580      	push	{r7, lr}
    76de:	b082      	sub	sp, #8
    76e0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    76e2:	4b0a      	ldr	r3, [pc, #40]	; (770c <_oscctrl_init_sources+0x30>)
    76e4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    76e6:	4a0a      	ldr	r2, [pc, #40]	; (7710 <_oscctrl_init_sources+0x34>)
    76e8:	2101      	movs	r1, #1
    76ea:	6878      	ldr	r0, [r7, #4]
    76ec:	4b09      	ldr	r3, [pc, #36]	; (7714 <_oscctrl_init_sources+0x38>)
    76ee:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    76f0:	bf00      	nop
    76f2:	6878      	ldr	r0, [r7, #4]
    76f4:	4b08      	ldr	r3, [pc, #32]	; (7718 <_oscctrl_init_sources+0x3c>)
    76f6:	4798      	blx	r3
    76f8:	4603      	mov	r3, r0
    76fa:	f083 0301 	eor.w	r3, r3, #1
    76fe:	b2db      	uxtb	r3, r3
    7700:	2b00      	cmp	r3, #0
    7702:	d1f6      	bne.n	76f2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    7704:	bf00      	nop
    7706:	3708      	adds	r7, #8
    7708:	46bd      	mov	sp, r7
    770a:	bd80      	pop	{r7, pc}
    770c:	40001000 	.word	0x40001000
    7710:	03002646 	.word	0x03002646
    7714:	00007525 	.word	0x00007525
    7718:	000074af 	.word	0x000074af

0000771c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    771c:	b580      	push	{r7, lr}
    771e:	b084      	sub	sp, #16
    7720:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7722:	4b6b      	ldr	r3, [pc, #428]	; (78d0 <_oscctrl_init_referenced_generators+0x1b4>)
    7724:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    7726:	2204      	movs	r2, #4
    7728:	2100      	movs	r1, #0
    772a:	486a      	ldr	r0, [pc, #424]	; (78d4 <_oscctrl_init_referenced_generators+0x1b8>)
    772c:	4b6a      	ldr	r3, [pc, #424]	; (78d8 <_oscctrl_init_referenced_generators+0x1bc>)
    772e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7730:	bf00      	nop
    7732:	4868      	ldr	r0, [pc, #416]	; (78d4 <_oscctrl_init_referenced_generators+0x1b8>)
    7734:	4b69      	ldr	r3, [pc, #420]	; (78dc <_oscctrl_init_referenced_generators+0x1c0>)
    7736:	4798      	blx	r3
    7738:	4603      	mov	r3, r0
    773a:	2b00      	cmp	r3, #0
    773c:	d1f9      	bne.n	7732 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    773e:	2100      	movs	r1, #0
    7740:	68f8      	ldr	r0, [r7, #12]
    7742:	4b67      	ldr	r3, [pc, #412]	; (78e0 <_oscctrl_init_referenced_generators+0x1c4>)
    7744:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    7746:	4967      	ldr	r1, [pc, #412]	; (78e4 <_oscctrl_init_referenced_generators+0x1c8>)
    7748:	68f8      	ldr	r0, [r7, #12]
    774a:	4b67      	ldr	r3, [pc, #412]	; (78e8 <_oscctrl_init_referenced_generators+0x1cc>)
    774c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    774e:	bf00      	nop
    7750:	68f8      	ldr	r0, [r7, #12]
    7752:	4b66      	ldr	r3, [pc, #408]	; (78ec <_oscctrl_init_referenced_generators+0x1d0>)
    7754:	4798      	blx	r3
    7756:	4603      	mov	r3, r0
    7758:	2b00      	cmp	r3, #0
    775a:	d1f9      	bne.n	7750 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    775c:	2100      	movs	r1, #0
    775e:	68f8      	ldr	r0, [r7, #12]
    7760:	4b63      	ldr	r3, [pc, #396]	; (78f0 <_oscctrl_init_referenced_generators+0x1d4>)
    7762:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7764:	bf00      	nop
    7766:	68f8      	ldr	r0, [r7, #12]
    7768:	4b62      	ldr	r3, [pc, #392]	; (78f4 <_oscctrl_init_referenced_generators+0x1d8>)
    776a:	4798      	blx	r3
    776c:	4603      	mov	r3, r0
    776e:	2b00      	cmp	r3, #0
    7770:	d1f9      	bne.n	7766 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    7772:	2302      	movs	r3, #2
    7774:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    7776:	7afb      	ldrb	r3, [r7, #11]
    7778:	4619      	mov	r1, r3
    777a:	68f8      	ldr	r0, [r7, #12]
    777c:	4b58      	ldr	r3, [pc, #352]	; (78e0 <_oscctrl_init_referenced_generators+0x1c4>)
    777e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    7780:	bf00      	nop
    7782:	68f8      	ldr	r0, [r7, #12]
    7784:	4b5c      	ldr	r3, [pc, #368]	; (78f8 <_oscctrl_init_referenced_generators+0x1dc>)
    7786:	4798      	blx	r3
    7788:	4603      	mov	r3, r0
    778a:	2b00      	cmp	r3, #0
    778c:	d1f9      	bne.n	7782 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    778e:	68f8      	ldr	r0, [r7, #12]
    7790:	4b5a      	ldr	r3, [pc, #360]	; (78fc <_oscctrl_init_referenced_generators+0x1e0>)
    7792:	4798      	blx	r3
    7794:	4603      	mov	r3, r0
    7796:	4619      	mov	r1, r3
    7798:	68f8      	ldr	r0, [r7, #12]
    779a:	4b59      	ldr	r3, [pc, #356]	; (7900 <_oscctrl_init_referenced_generators+0x1e4>)
    779c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    779e:	bf00      	nop
    77a0:	68f8      	ldr	r0, [r7, #12]
    77a2:	4b58      	ldr	r3, [pc, #352]	; (7904 <_oscctrl_init_referenced_generators+0x1e8>)
    77a4:	4798      	blx	r3
    77a6:	4603      	mov	r3, r0
    77a8:	2b00      	cmp	r3, #0
    77aa:	d1f9      	bne.n	77a0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    77ac:	2319      	movs	r3, #25
    77ae:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    77b0:	7afb      	ldrb	r3, [r7, #11]
    77b2:	4619      	mov	r1, r3
    77b4:	68f8      	ldr	r0, [r7, #12]
    77b6:	4b4e      	ldr	r3, [pc, #312]	; (78f0 <_oscctrl_init_referenced_generators+0x1d4>)
    77b8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    77ba:	bf00      	nop
    77bc:	68f8      	ldr	r0, [r7, #12]
    77be:	4b4d      	ldr	r3, [pc, #308]	; (78f4 <_oscctrl_init_referenced_generators+0x1d8>)
    77c0:	4798      	blx	r3
    77c2:	4603      	mov	r3, r0
    77c4:	2b00      	cmp	r3, #0
    77c6:	d1f9      	bne.n	77bc <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    77c8:	2245      	movs	r2, #69	; 0x45
    77ca:	2101      	movs	r1, #1
    77cc:	4841      	ldr	r0, [pc, #260]	; (78d4 <_oscctrl_init_referenced_generators+0x1b8>)
    77ce:	4b4e      	ldr	r3, [pc, #312]	; (7908 <_oscctrl_init_referenced_generators+0x1ec>)
    77d0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    77d2:	223b      	movs	r2, #59	; 0x3b
    77d4:	2100      	movs	r1, #0
    77d6:	68f8      	ldr	r0, [r7, #12]
    77d8:	4b4c      	ldr	r3, [pc, #304]	; (790c <_oscctrl_init_referenced_generators+0x1f0>)
    77da:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    77dc:	f44f 6201 	mov.w	r2, #2064	; 0x810
    77e0:	2100      	movs	r1, #0
    77e2:	68f8      	ldr	r0, [r7, #12]
    77e4:	4b4a      	ldr	r3, [pc, #296]	; (7910 <_oscctrl_init_referenced_generators+0x1f4>)
    77e6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    77e8:	2242      	movs	r2, #66	; 0x42
    77ea:	2100      	movs	r1, #0
    77ec:	68f8      	ldr	r0, [r7, #12]
    77ee:	4b49      	ldr	r3, [pc, #292]	; (7914 <_oscctrl_init_referenced_generators+0x1f8>)
    77f0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    77f2:	4a49      	ldr	r2, [pc, #292]	; (7918 <_oscctrl_init_referenced_generators+0x1fc>)
    77f4:	2101      	movs	r1, #1
    77f6:	68f8      	ldr	r0, [r7, #12]
    77f8:	4b44      	ldr	r3, [pc, #272]	; (790c <_oscctrl_init_referenced_generators+0x1f0>)
    77fa:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    77fc:	f44f 6203 	mov.w	r2, #2096	; 0x830
    7800:	2101      	movs	r1, #1
    7802:	68f8      	ldr	r0, [r7, #12]
    7804:	4b42      	ldr	r3, [pc, #264]	; (7910 <_oscctrl_init_referenced_generators+0x1f4>)
    7806:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7808:	2202      	movs	r2, #2
    780a:	2101      	movs	r1, #1
    780c:	68f8      	ldr	r0, [r7, #12]
    780e:	4b41      	ldr	r3, [pc, #260]	; (7914 <_oscctrl_init_referenced_generators+0x1f8>)
    7810:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    7812:	68f8      	ldr	r0, [r7, #12]
    7814:	4b41      	ldr	r3, [pc, #260]	; (791c <_oscctrl_init_referenced_generators+0x200>)
    7816:	4798      	blx	r3
    7818:	4603      	mov	r3, r0
    781a:	2b00      	cmp	r3, #0
    781c:	d00c      	beq.n	7838 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    781e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    7822:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    7824:	bf00      	nop
    7826:	6879      	ldr	r1, [r7, #4]
    7828:	68f8      	ldr	r0, [r7, #12]
    782a:	4b3d      	ldr	r3, [pc, #244]	; (7920 <_oscctrl_init_referenced_generators+0x204>)
    782c:	4798      	blx	r3
    782e:	4602      	mov	r2, r0
    7830:	687b      	ldr	r3, [r7, #4]
    7832:	429a      	cmp	r2, r3
    7834:	d1f7      	bne.n	7826 <_oscctrl_init_referenced_generators+0x10a>
    7836:	e009      	b.n	784c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    7838:	bf00      	nop
    783a:	68f8      	ldr	r0, [r7, #12]
    783c:	4b39      	ldr	r3, [pc, #228]	; (7924 <_oscctrl_init_referenced_generators+0x208>)
    783e:	4798      	blx	r3
    7840:	4603      	mov	r3, r0
    7842:	f083 0301 	eor.w	r3, r3, #1
    7846:	b2db      	uxtb	r3, r3
    7848:	2b00      	cmp	r3, #0
    784a:	d1f6      	bne.n	783a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    784c:	bf00      	nop
    784e:	2100      	movs	r1, #0
    7850:	68f8      	ldr	r0, [r7, #12]
    7852:	4b35      	ldr	r3, [pc, #212]	; (7928 <_oscctrl_init_referenced_generators+0x20c>)
    7854:	4798      	blx	r3
    7856:	4603      	mov	r3, r0
    7858:	f083 0301 	eor.w	r3, r3, #1
    785c:	b2db      	uxtb	r3, r3
    785e:	2b00      	cmp	r3, #0
    7860:	d009      	beq.n	7876 <_oscctrl_init_referenced_generators+0x15a>
    7862:	2100      	movs	r1, #0
    7864:	68f8      	ldr	r0, [r7, #12]
    7866:	4b31      	ldr	r3, [pc, #196]	; (792c <_oscctrl_init_referenced_generators+0x210>)
    7868:	4798      	blx	r3
    786a:	4603      	mov	r3, r0
    786c:	f083 0301 	eor.w	r3, r3, #1
    7870:	b2db      	uxtb	r3, r3
    7872:	2b00      	cmp	r3, #0
    7874:	d1eb      	bne.n	784e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    7876:	bf00      	nop
    7878:	2101      	movs	r1, #1
    787a:	68f8      	ldr	r0, [r7, #12]
    787c:	4b2a      	ldr	r3, [pc, #168]	; (7928 <_oscctrl_init_referenced_generators+0x20c>)
    787e:	4798      	blx	r3
    7880:	4603      	mov	r3, r0
    7882:	f083 0301 	eor.w	r3, r3, #1
    7886:	b2db      	uxtb	r3, r3
    7888:	2b00      	cmp	r3, #0
    788a:	d009      	beq.n	78a0 <_oscctrl_init_referenced_generators+0x184>
    788c:	2101      	movs	r1, #1
    788e:	68f8      	ldr	r0, [r7, #12]
    7890:	4b26      	ldr	r3, [pc, #152]	; (792c <_oscctrl_init_referenced_generators+0x210>)
    7892:	4798      	blx	r3
    7894:	4603      	mov	r3, r0
    7896:	f083 0301 	eor.w	r3, r3, #1
    789a:	b2db      	uxtb	r3, r3
    789c:	2b00      	cmp	r3, #0
    789e:	d1eb      	bne.n	7878 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    78a0:	bf00      	nop
    78a2:	480c      	ldr	r0, [pc, #48]	; (78d4 <_oscctrl_init_referenced_generators+0x1b8>)
    78a4:	4b22      	ldr	r3, [pc, #136]	; (7930 <_oscctrl_init_referenced_generators+0x214>)
    78a6:	4798      	blx	r3
    78a8:	4603      	mov	r3, r0
    78aa:	2b00      	cmp	r3, #0
    78ac:	d1f9      	bne.n	78a2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    78ae:	2207      	movs	r2, #7
    78b0:	2100      	movs	r1, #0
    78b2:	4808      	ldr	r0, [pc, #32]	; (78d4 <_oscctrl_init_referenced_generators+0x1b8>)
    78b4:	4b08      	ldr	r3, [pc, #32]	; (78d8 <_oscctrl_init_referenced_generators+0x1bc>)
    78b6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    78b8:	bf00      	nop
    78ba:	4806      	ldr	r0, [pc, #24]	; (78d4 <_oscctrl_init_referenced_generators+0x1b8>)
    78bc:	4b07      	ldr	r3, [pc, #28]	; (78dc <_oscctrl_init_referenced_generators+0x1c0>)
    78be:	4798      	blx	r3
    78c0:	4603      	mov	r3, r0
    78c2:	2b00      	cmp	r3, #0
    78c4:	d1f9      	bne.n	78ba <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    78c6:	bf00      	nop
    78c8:	3710      	adds	r7, #16
    78ca:	46bd      	mov	sp, r7
    78cc:	bd80      	pop	{r7, pc}
    78ce:	bf00      	nop
    78d0:	40001000 	.word	0x40001000
    78d4:	40001c00 	.word	0x40001c00
    78d8:	000072e9 	.word	0x000072e9
    78dc:	000072a9 	.word	0x000072a9
    78e0:	0000754d 	.word	0x0000754d
    78e4:	0401bb80 	.word	0x0401bb80
    78e8:	000075ef 	.word	0x000075ef
    78ec:	000076a7 	.word	0x000076a7
    78f0:	0000759b 	.word	0x0000759b
    78f4:	0000763f 	.word	0x0000763f
    78f8:	0000760b 	.word	0x0000760b
    78fc:	000075d7 	.word	0x000075d7
    7900:	000075bb 	.word	0x000075bb
    7904:	00007673 	.word	0x00007673
    7908:	00007339 	.word	0x00007339
    790c:	00007445 	.word	0x00007445
    7910:	00007481 	.word	0x00007481
    7914:	00007409 	.word	0x00007409
    7918:	000407a0 	.word	0x000407a0
    791c:	0000756b 	.word	0x0000756b
    7920:	000074ff 	.word	0x000074ff
    7924:	000074d7 	.word	0x000074d7
    7928:	00007395 	.word	0x00007395
    792c:	000073cd 	.word	0x000073cd
    7930:	000072d1 	.word	0x000072d1

00007934 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    7934:	b480      	push	{r7}
    7936:	b083      	sub	sp, #12
    7938:	af00      	add	r7, sp, #0
    793a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    793c:	687b      	ldr	r3, [r7, #4]
    793e:	69db      	ldr	r3, [r3, #28]
    7940:	0a9b      	lsrs	r3, r3, #10
    7942:	f003 0301 	and.w	r3, r3, #1
    7946:	2b00      	cmp	r3, #0
    7948:	bf14      	ite	ne
    794a:	2301      	movne	r3, #1
    794c:	2300      	moveq	r3, #0
    794e:	b2db      	uxtb	r3, r3
}
    7950:	4618      	mov	r0, r3
    7952:	370c      	adds	r7, #12
    7954:	46bd      	mov	sp, r7
    7956:	f85d 7b04 	ldr.w	r7, [sp], #4
    795a:	4770      	bx	lr

0000795c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    795c:	b480      	push	{r7}
    795e:	b083      	sub	sp, #12
    7960:	af00      	add	r7, sp, #0
    7962:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    7964:	687b      	ldr	r3, [r7, #4]
    7966:	f44f 6280 	mov.w	r2, #1024	; 0x400
    796a:	61da      	str	r2, [r3, #28]
}
    796c:	bf00      	nop
    796e:	370c      	adds	r7, #12
    7970:	46bd      	mov	sp, r7
    7972:	f85d 7b04 	ldr.w	r7, [sp], #4
    7976:	4770      	bx	lr

00007978 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    7978:	b480      	push	{r7}
    797a:	b083      	sub	sp, #12
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
    7980:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	683a      	ldr	r2, [r7, #0]
    7986:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7988:	bf00      	nop
    798a:	370c      	adds	r7, #12
    798c:	46bd      	mov	sp, r7
    798e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7992:	4770      	bx	lr

00007994 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7994:	b480      	push	{r7}
    7996:	b083      	sub	sp, #12
    7998:	af00      	add	r7, sp, #0
    799a:	6078      	str	r0, [r7, #4]
    799c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    799e:	687b      	ldr	r3, [r7, #4]
    79a0:	683a      	ldr	r2, [r7, #0]
    79a2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    79a4:	bf00      	nop
    79a6:	370c      	adds	r7, #12
    79a8:	46bd      	mov	sp, r7
    79aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ae:	4770      	bx	lr

000079b0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    79b0:	b480      	push	{r7}
    79b2:	b083      	sub	sp, #12
    79b4:	af00      	add	r7, sp, #0
    79b6:	6078      	str	r0, [r7, #4]
    79b8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	683a      	ldr	r2, [r7, #0]
    79be:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    79c0:	bf00      	nop
    79c2:	370c      	adds	r7, #12
    79c4:	46bd      	mov	sp, r7
    79c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ca:	4770      	bx	lr

000079cc <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    79cc:	b480      	push	{r7}
    79ce:	b083      	sub	sp, #12
    79d0:	af00      	add	r7, sp, #0
    79d2:	6078      	str	r0, [r7, #4]
    79d4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    79d6:	687b      	ldr	r3, [r7, #4]
    79d8:	683a      	ldr	r2, [r7, #0]
    79da:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    79dc:	bf00      	nop
    79de:	370c      	adds	r7, #12
    79e0:	46bd      	mov	sp, r7
    79e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79e6:	4770      	bx	lr

000079e8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    79e8:	b480      	push	{r7}
    79ea:	b085      	sub	sp, #20
    79ec:	af00      	add	r7, sp, #0
    79ee:	6078      	str	r0, [r7, #4]
    79f0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    79f6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    79f8:	68fb      	ldr	r3, [r7, #12]
    79fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    79fe:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    7a00:	683b      	ldr	r3, [r7, #0]
    7a02:	b2db      	uxtb	r3, r3
    7a04:	68fa      	ldr	r2, [r7, #12]
    7a06:	4313      	orrs	r3, r2
    7a08:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7a0a:	687b      	ldr	r3, [r7, #4]
    7a0c:	68fa      	ldr	r2, [r7, #12]
    7a0e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7a10:	bf00      	nop
    7a12:	3714      	adds	r7, #20
    7a14:	46bd      	mov	sp, r7
    7a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a1a:	4770      	bx	lr

00007a1c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7a1c:	b480      	push	{r7}
    7a1e:	b085      	sub	sp, #20
    7a20:	af00      	add	r7, sp, #0
    7a22:	6078      	str	r0, [r7, #4]
    7a24:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7a2a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    7a2c:	68fb      	ldr	r3, [r7, #12]
    7a2e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    7a32:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    7a34:	683b      	ldr	r3, [r7, #0]
    7a36:	041b      	lsls	r3, r3, #16
    7a38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    7a3c:	68fa      	ldr	r2, [r7, #12]
    7a3e:	4313      	orrs	r3, r2
    7a40:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7a42:	687b      	ldr	r3, [r7, #4]
    7a44:	68fa      	ldr	r2, [r7, #12]
    7a46:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7a48:	bf00      	nop
    7a4a:	3714      	adds	r7, #20
    7a4c:	46bd      	mov	sp, r7
    7a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a52:	4770      	bx	lr

00007a54 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    7a54:	b480      	push	{r7}
    7a56:	b083      	sub	sp, #12
    7a58:	af00      	add	r7, sp, #0
    7a5a:	6078      	str	r0, [r7, #4]
    7a5c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	683a      	ldr	r2, [r7, #0]
    7a62:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7a64:	bf00      	nop
    7a66:	370c      	adds	r7, #12
    7a68:	46bd      	mov	sp, r7
    7a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a6e:	4770      	bx	lr

00007a70 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    7a70:	b480      	push	{r7}
    7a72:	b083      	sub	sp, #12
    7a74:	af00      	add	r7, sp, #0
    7a76:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    7a7c:	4618      	mov	r0, r3
    7a7e:	370c      	adds	r7, #12
    7a80:	46bd      	mov	sp, r7
    7a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a86:	4770      	bx	lr

00007a88 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    7a88:	b480      	push	{r7}
    7a8a:	b085      	sub	sp, #20
    7a8c:	af00      	add	r7, sp, #0
    7a8e:	60f8      	str	r0, [r7, #12]
    7a90:	60b9      	str	r1, [r7, #8]
    7a92:	607a      	str	r2, [r7, #4]
	while (count--) {
    7a94:	e007      	b.n	7aa6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    7a96:	68fb      	ldr	r3, [r7, #12]
    7a98:	1c5a      	adds	r2, r3, #1
    7a9a:	60fa      	str	r2, [r7, #12]
    7a9c:	68ba      	ldr	r2, [r7, #8]
    7a9e:	1c51      	adds	r1, r2, #1
    7aa0:	60b9      	str	r1, [r7, #8]
    7aa2:	7812      	ldrb	r2, [r2, #0]
    7aa4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    7aa6:	687b      	ldr	r3, [r7, #4]
    7aa8:	1e5a      	subs	r2, r3, #1
    7aaa:	607a      	str	r2, [r7, #4]
    7aac:	2b00      	cmp	r3, #0
    7aae:	d1f2      	bne.n	7a96 <_qspi_memcpy+0xe>
	}
}
    7ab0:	bf00      	nop
    7ab2:	3714      	adds	r7, #20
    7ab4:	46bd      	mov	sp, r7
    7ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aba:	4770      	bx	lr

00007abc <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    7abc:	b580      	push	{r7, lr}
    7abe:	b082      	sub	sp, #8
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7ac4:	4903      	ldr	r1, [pc, #12]	; (7ad4 <_qspi_end_transfer+0x18>)
    7ac6:	6878      	ldr	r0, [r7, #4]
    7ac8:	4b03      	ldr	r3, [pc, #12]	; (7ad8 <_qspi_end_transfer+0x1c>)
    7aca:	4798      	blx	r3
}
    7acc:	bf00      	nop
    7ace:	3708      	adds	r7, #8
    7ad0:	46bd      	mov	sp, r7
    7ad2:	bd80      	pop	{r7, pc}
    7ad4:	01000002 	.word	0x01000002
    7ad8:	00007979 	.word	0x00007979

00007adc <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    7adc:	b580      	push	{r7, lr}
    7ade:	b082      	sub	sp, #8
    7ae0:	af00      	add	r7, sp, #0
    7ae2:	6078      	str	r0, [r7, #4]
    7ae4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    7ae6:	687b      	ldr	r3, [r7, #4]
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d004      	beq.n	7af6 <_qspi_sync_init+0x1a>
    7aec:	683b      	ldr	r3, [r7, #0]
    7aee:	2b00      	cmp	r3, #0
    7af0:	d001      	beq.n	7af6 <_qspi_sync_init+0x1a>
    7af2:	2301      	movs	r3, #1
    7af4:	e000      	b.n	7af8 <_qspi_sync_init+0x1c>
    7af6:	2300      	movs	r3, #0
    7af8:	f003 0301 	and.w	r3, r3, #1
    7afc:	b2db      	uxtb	r3, r3
    7afe:	2240      	movs	r2, #64	; 0x40
    7b00:	490c      	ldr	r1, [pc, #48]	; (7b34 <_qspi_sync_init+0x58>)
    7b02:	4618      	mov	r0, r3
    7b04:	4b0c      	ldr	r3, [pc, #48]	; (7b38 <_qspi_sync_init+0x5c>)
    7b06:	4798      	blx	r3
	dev->prvt = hw;
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	683a      	ldr	r2, [r7, #0]
    7b0c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	681b      	ldr	r3, [r3, #0]
    7b12:	2101      	movs	r1, #1
    7b14:	4618      	mov	r0, r3
    7b16:	4b09      	ldr	r3, [pc, #36]	; (7b3c <_qspi_sync_init+0x60>)
    7b18:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    7b1a:	4909      	ldr	r1, [pc, #36]	; (7b40 <_qspi_sync_init+0x64>)
    7b1c:	6838      	ldr	r0, [r7, #0]
    7b1e:	4b09      	ldr	r3, [pc, #36]	; (7b44 <_qspi_sync_init+0x68>)
    7b20:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    7b22:	4909      	ldr	r1, [pc, #36]	; (7b48 <_qspi_sync_init+0x6c>)
    7b24:	6838      	ldr	r0, [r7, #0]
    7b26:	4b09      	ldr	r3, [pc, #36]	; (7b4c <_qspi_sync_init+0x70>)
    7b28:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    7b2a:	2300      	movs	r3, #0
}
    7b2c:	4618      	mov	r0, r3
    7b2e:	3708      	adds	r7, #8
    7b30:	46bd      	mov	sp, r7
    7b32:	bd80      	pop	{r7, pc}
    7b34:	00010274 	.word	0x00010274
    7b38:	00005af5 	.word	0x00005af5
    7b3c:	00007979 	.word	0x00007979
    7b40:	06000011 	.word	0x06000011
    7b44:	00007995 	.word	0x00007995
    7b48:	00241300 	.word	0x00241300
    7b4c:	000079b1 	.word	0x000079b1

00007b50 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    7b50:	b580      	push	{r7, lr}
    7b52:	b082      	sub	sp, #8
    7b54:	af00      	add	r7, sp, #0
    7b56:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    7b58:	687b      	ldr	r3, [r7, #4]
    7b5a:	681b      	ldr	r3, [r3, #0]
    7b5c:	2102      	movs	r1, #2
    7b5e:	4618      	mov	r0, r3
    7b60:	4b03      	ldr	r3, [pc, #12]	; (7b70 <_qspi_sync_enable+0x20>)
    7b62:	4798      	blx	r3
	return ERR_NONE;
    7b64:	2300      	movs	r3, #0
}
    7b66:	4618      	mov	r0, r3
    7b68:	3708      	adds	r7, #8
    7b6a:	46bd      	mov	sp, r7
    7b6c:	bd80      	pop	{r7, pc}
    7b6e:	bf00      	nop
    7b70:	00007979 	.word	0x00007979

00007b74 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    7b74:	b580      	push	{r7, lr}
    7b76:	b082      	sub	sp, #8
    7b78:	af00      	add	r7, sp, #0
    7b7a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	681b      	ldr	r3, [r3, #0]
    7b80:	2100      	movs	r1, #0
    7b82:	4618      	mov	r0, r3
    7b84:	4b03      	ldr	r3, [pc, #12]	; (7b94 <_qspi_sync_disable+0x20>)
    7b86:	4798      	blx	r3
	return ERR_NONE;
    7b88:	2300      	movs	r3, #0
}
    7b8a:	4618      	mov	r0, r3
    7b8c:	3708      	adds	r7, #8
    7b8e:	46bd      	mov	sp, r7
    7b90:	bd80      	pop	{r7, pc}
    7b92:	bf00      	nop
    7b94:	00007979 	.word	0x00007979

00007b98 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7b98:	b580      	push	{r7, lr}
    7b9a:	b084      	sub	sp, #16
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	6078      	str	r0, [r7, #4]
    7ba0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	681b      	ldr	r3, [r3, #0]
    7ba6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    7ba8:	683b      	ldr	r3, [r7, #0]
    7baa:	781b      	ldrb	r3, [r3, #0]
    7bac:	f003 0320 	and.w	r3, r3, #32
    7bb0:	b2db      	uxtb	r3, r3
    7bb2:	2b00      	cmp	r3, #0
    7bb4:	d005      	beq.n	7bc2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    7bb6:	683b      	ldr	r3, [r7, #0]
    7bb8:	689b      	ldr	r3, [r3, #8]
    7bba:	4619      	mov	r1, r3
    7bbc:	68f8      	ldr	r0, [r7, #12]
    7bbe:	4b13      	ldr	r3, [pc, #76]	; (7c0c <_qspi_sync_command_set_ifr+0x74>)
    7bc0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    7bc2:	683b      	ldr	r3, [r7, #0]
    7bc4:	781b      	ldrb	r3, [r3, #0]
    7bc6:	f003 0310 	and.w	r3, r3, #16
    7bca:	b2db      	uxtb	r3, r3
    7bcc:	2b00      	cmp	r3, #0
    7bce:	d005      	beq.n	7bdc <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    7bd0:	683b      	ldr	r3, [r7, #0]
    7bd2:	791b      	ldrb	r3, [r3, #4]
    7bd4:	4619      	mov	r1, r3
    7bd6:	68f8      	ldr	r0, [r7, #12]
    7bd8:	4b0d      	ldr	r3, [pc, #52]	; (7c10 <_qspi_sync_command_set_ifr+0x78>)
    7bda:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    7bdc:	683b      	ldr	r3, [r7, #0]
    7bde:	781b      	ldrb	r3, [r3, #0]
    7be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7be4:	b2db      	uxtb	r3, r3
    7be6:	2b00      	cmp	r3, #0
    7be8:	d005      	beq.n	7bf6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    7bea:	683b      	ldr	r3, [r7, #0]
    7bec:	795b      	ldrb	r3, [r3, #5]
    7bee:	4619      	mov	r1, r3
    7bf0:	68f8      	ldr	r0, [r7, #12]
    7bf2:	4b08      	ldr	r3, [pc, #32]	; (7c14 <_qspi_sync_command_set_ifr+0x7c>)
    7bf4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    7bf6:	683b      	ldr	r3, [r7, #0]
    7bf8:	681b      	ldr	r3, [r3, #0]
    7bfa:	4619      	mov	r1, r3
    7bfc:	68f8      	ldr	r0, [r7, #12]
    7bfe:	4b06      	ldr	r3, [pc, #24]	; (7c18 <_qspi_sync_command_set_ifr+0x80>)
    7c00:	4798      	blx	r3
}
    7c02:	bf00      	nop
    7c04:	3710      	adds	r7, #16
    7c06:	46bd      	mov	sp, r7
    7c08:	bd80      	pop	{r7, pc}
    7c0a:	bf00      	nop
    7c0c:	000079cd 	.word	0x000079cd
    7c10:	000079e9 	.word	0x000079e9
    7c14:	00007a1d 	.word	0x00007a1d
    7c18:	00007a55 	.word	0x00007a55

00007c1c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7c1c:	b580      	push	{r7, lr}
    7c1e:	b084      	sub	sp, #16
    7c20:	af00      	add	r7, sp, #0
    7c22:	6078      	str	r0, [r7, #4]
    7c24:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    7c26:	687b      	ldr	r3, [r7, #4]
    7c28:	681b      	ldr	r3, [r3, #0]
    7c2a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    7c2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7c30:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    7c32:	683b      	ldr	r3, [r7, #0]
    7c34:	781b      	ldrb	r3, [r3, #0]
    7c36:	f003 0320 	and.w	r3, r3, #32
    7c3a:	b2db      	uxtb	r3, r3
    7c3c:	2b00      	cmp	r3, #0
    7c3e:	d004      	beq.n	7c4a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    7c40:	683b      	ldr	r3, [r7, #0]
    7c42:	689b      	ldr	r3, [r3, #8]
    7c44:	68fa      	ldr	r2, [r7, #12]
    7c46:	4413      	add	r3, r2
    7c48:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    7c4a:	68b8      	ldr	r0, [r7, #8]
    7c4c:	4b18      	ldr	r3, [pc, #96]	; (7cb0 <_qspi_sync_run_transfer+0x94>)
    7c4e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    7c50:	683b      	ldr	r3, [r7, #0]
    7c52:	691b      	ldr	r3, [r3, #16]
    7c54:	2b00      	cmp	r3, #0
    7c56:	d103      	bne.n	7c60 <_qspi_sync_run_transfer+0x44>
    7c58:	683b      	ldr	r3, [r7, #0]
    7c5a:	695b      	ldr	r3, [r3, #20]
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d001      	beq.n	7c64 <_qspi_sync_run_transfer+0x48>
    7c60:	2301      	movs	r3, #1
    7c62:	e000      	b.n	7c66 <_qspi_sync_run_transfer+0x4a>
    7c64:	2300      	movs	r3, #0
    7c66:	f003 0301 	and.w	r3, r3, #1
    7c6a:	b2db      	uxtb	r3, r3
    7c6c:	2282      	movs	r2, #130	; 0x82
    7c6e:	4911      	ldr	r1, [pc, #68]	; (7cb4 <_qspi_sync_run_transfer+0x98>)
    7c70:	4618      	mov	r0, r3
    7c72:	4b11      	ldr	r3, [pc, #68]	; (7cb8 <_qspi_sync_run_transfer+0x9c>)
    7c74:	4798      	blx	r3

	if (cmd->tx_buf) {
    7c76:	683b      	ldr	r3, [r7, #0]
    7c78:	691b      	ldr	r3, [r3, #16]
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d008      	beq.n	7c90 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    7c7e:	683b      	ldr	r3, [r7, #0]
    7c80:	6919      	ldr	r1, [r3, #16]
    7c82:	683b      	ldr	r3, [r7, #0]
    7c84:	68db      	ldr	r3, [r3, #12]
    7c86:	461a      	mov	r2, r3
    7c88:	68f8      	ldr	r0, [r7, #12]
    7c8a:	4b0c      	ldr	r3, [pc, #48]	; (7cbc <_qspi_sync_run_transfer+0xa0>)
    7c8c:	4798      	blx	r3
    7c8e:	e007      	b.n	7ca0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    7c90:	683b      	ldr	r3, [r7, #0]
    7c92:	6958      	ldr	r0, [r3, #20]
    7c94:	683b      	ldr	r3, [r7, #0]
    7c96:	68db      	ldr	r3, [r3, #12]
    7c98:	461a      	mov	r2, r3
    7c9a:	68f9      	ldr	r1, [r7, #12]
    7c9c:	4b07      	ldr	r3, [pc, #28]	; (7cbc <_qspi_sync_run_transfer+0xa0>)
    7c9e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    7ca0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ca4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    7ca8:	bf00      	nop
    7caa:	3710      	adds	r7, #16
    7cac:	46bd      	mov	sp, r7
    7cae:	bd80      	pop	{r7, pc}
    7cb0:	00007a71 	.word	0x00007a71
    7cb4:	00010274 	.word	0x00010274
    7cb8:	00005af5 	.word	0x00005af5
    7cbc:	00007a89 	.word	0x00007a89

00007cc0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7cc0:	b580      	push	{r7, lr}
    7cc2:	b082      	sub	sp, #8
    7cc4:	af00      	add	r7, sp, #0
    7cc6:	6078      	str	r0, [r7, #4]
    7cc8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    7cca:	6839      	ldr	r1, [r7, #0]
    7ccc:	6878      	ldr	r0, [r7, #4]
    7cce:	4b14      	ldr	r3, [pc, #80]	; (7d20 <_qspi_sync_serial_run_command+0x60>)
    7cd0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    7cd2:	683b      	ldr	r3, [r7, #0]
    7cd4:	781b      	ldrb	r3, [r3, #0]
    7cd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7cda:	b2db      	uxtb	r3, r3
    7cdc:	2b00      	cmp	r3, #0
    7cde:	d003      	beq.n	7ce8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    7ce0:	6839      	ldr	r1, [r7, #0]
    7ce2:	6878      	ldr	r0, [r7, #4]
    7ce4:	4b0f      	ldr	r3, [pc, #60]	; (7d24 <_qspi_sync_serial_run_command+0x64>)
    7ce6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    7ce8:	687b      	ldr	r3, [r7, #4]
    7cea:	681b      	ldr	r3, [r3, #0]
    7cec:	4618      	mov	r0, r3
    7cee:	4b0e      	ldr	r3, [pc, #56]	; (7d28 <_qspi_sync_serial_run_command+0x68>)
    7cf0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    7cf2:	bf00      	nop
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	681b      	ldr	r3, [r3, #0]
    7cf8:	4618      	mov	r0, r3
    7cfa:	4b0c      	ldr	r3, [pc, #48]	; (7d2c <_qspi_sync_serial_run_command+0x6c>)
    7cfc:	4798      	blx	r3
    7cfe:	4603      	mov	r3, r0
    7d00:	f083 0301 	eor.w	r3, r3, #1
    7d04:	b2db      	uxtb	r3, r3
    7d06:	2b00      	cmp	r3, #0
    7d08:	d1f4      	bne.n	7cf4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    7d0a:	687b      	ldr	r3, [r7, #4]
    7d0c:	681b      	ldr	r3, [r3, #0]
    7d0e:	4618      	mov	r0, r3
    7d10:	4b07      	ldr	r3, [pc, #28]	; (7d30 <_qspi_sync_serial_run_command+0x70>)
    7d12:	4798      	blx	r3
	return ERR_NONE;
    7d14:	2300      	movs	r3, #0
}
    7d16:	4618      	mov	r0, r3
    7d18:	3708      	adds	r7, #8
    7d1a:	46bd      	mov	sp, r7
    7d1c:	bd80      	pop	{r7, pc}
    7d1e:	bf00      	nop
    7d20:	00007b99 	.word	0x00007b99
    7d24:	00007c1d 	.word	0x00007c1d
    7d28:	00007abd 	.word	0x00007abd
    7d2c:	00007935 	.word	0x00007935
    7d30:	0000795d 	.word	0x0000795d

00007d34 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    7d34:	b480      	push	{r7}
    7d36:	b083      	sub	sp, #12
    7d38:	af00      	add	r7, sp, #0
    7d3a:	6078      	str	r0, [r7, #4]
    7d3c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7d3e:	bf00      	nop
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	691a      	ldr	r2, [r3, #16]
    7d44:	683b      	ldr	r3, [r7, #0]
    7d46:	4013      	ands	r3, r2
    7d48:	2b00      	cmp	r3, #0
    7d4a:	d1f9      	bne.n	7d40 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    7d4c:	bf00      	nop
    7d4e:	370c      	adds	r7, #12
    7d50:	46bd      	mov	sp, r7
    7d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d56:	4770      	bx	lr

00007d58 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    7d58:	b480      	push	{r7}
    7d5a:	b083      	sub	sp, #12
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    7d60:	687b      	ldr	r3, [r7, #4]
    7d62:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d66:	819a      	strh	r2, [r3, #12]
}
    7d68:	bf00      	nop
    7d6a:	370c      	adds	r7, #12
    7d6c:	46bd      	mov	sp, r7
    7d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d72:	4770      	bx	lr

00007d74 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    7d74:	b480      	push	{r7}
    7d76:	b083      	sub	sp, #12
    7d78:	af00      	add	r7, sp, #0
    7d7a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    7d7c:	687b      	ldr	r3, [r7, #4]
    7d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7d82:	819a      	strh	r2, [r3, #12]
}
    7d84:	bf00      	nop
    7d86:	370c      	adds	r7, #12
    7d88:	46bd      	mov	sp, r7
    7d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d8e:	4770      	bx	lr

00007d90 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    7d90:	b480      	push	{r7}
    7d92:	b083      	sub	sp, #12
    7d94:	af00      	add	r7, sp, #0
    7d96:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    7d98:	687b      	ldr	r3, [r7, #4]
    7d9a:	899b      	ldrh	r3, [r3, #12]
    7d9c:	b29b      	uxth	r3, r3
}
    7d9e:	4618      	mov	r0, r3
    7da0:	370c      	adds	r7, #12
    7da2:	46bd      	mov	sp, r7
    7da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7da8:	4770      	bx	lr

00007daa <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    7daa:	b480      	push	{r7}
    7dac:	b083      	sub	sp, #12
    7dae:	af00      	add	r7, sp, #0
    7db0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    7db2:	687b      	ldr	r3, [r7, #4]
    7db4:	895b      	ldrh	r3, [r3, #10]
    7db6:	b29b      	uxth	r3, r3
}
    7db8:	4618      	mov	r0, r3
    7dba:	370c      	adds	r7, #12
    7dbc:	46bd      	mov	sp, r7
    7dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dc2:	4770      	bx	lr

00007dc4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	b082      	sub	sp, #8
    7dc8:	af00      	add	r7, sp, #0
    7dca:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	881b      	ldrh	r3, [r3, #0]
    7dd0:	b29b      	uxth	r3, r3
    7dd2:	f043 0301 	orr.w	r3, r3, #1
    7dd6:	b29a      	uxth	r2, r3
    7dd8:	687b      	ldr	r3, [r7, #4]
    7dda:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    7ddc:	2101      	movs	r1, #1
    7dde:	6878      	ldr	r0, [r7, #4]
    7de0:	4b02      	ldr	r3, [pc, #8]	; (7dec <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    7de2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7de4:	bf00      	nop
    7de6:	3708      	adds	r7, #8
    7de8:	46bd      	mov	sp, r7
    7dea:	bd80      	pop	{r7, pc}
    7dec:	00007d35 	.word	0x00007d35

00007df0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7df0:	b580      	push	{r7, lr}
    7df2:	b084      	sub	sp, #16
    7df4:	af00      	add	r7, sp, #0
    7df6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7df8:	f248 0103 	movw	r1, #32771	; 0x8003
    7dfc:	6878      	ldr	r0, [r7, #4]
    7dfe:	4b0a      	ldr	r3, [pc, #40]	; (7e28 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    7e00:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7e02:	687b      	ldr	r3, [r7, #4]
    7e04:	881b      	ldrh	r3, [r3, #0]
    7e06:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    7e08:	89fb      	ldrh	r3, [r7, #14]
    7e0a:	085b      	lsrs	r3, r3, #1
    7e0c:	b29b      	uxth	r3, r3
    7e0e:	f003 0301 	and.w	r3, r3, #1
    7e12:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    7e14:	89fb      	ldrh	r3, [r7, #14]
    7e16:	2b00      	cmp	r3, #0
    7e18:	bf14      	ite	ne
    7e1a:	2301      	movne	r3, #1
    7e1c:	2300      	moveq	r3, #0
    7e1e:	b2db      	uxtb	r3, r3
}
    7e20:	4618      	mov	r0, r3
    7e22:	3710      	adds	r7, #16
    7e24:	46bd      	mov	sp, r7
    7e26:	bd80      	pop	{r7, pc}
    7e28:	00007d35 	.word	0x00007d35

00007e2c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7e2c:	b580      	push	{r7, lr}
    7e2e:	b082      	sub	sp, #8
    7e30:	af00      	add	r7, sp, #0
    7e32:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	881b      	ldrh	r3, [r3, #0]
    7e38:	b29b      	uxth	r3, r3
    7e3a:	f023 0302 	bic.w	r3, r3, #2
    7e3e:	b29a      	uxth	r2, r3
    7e40:	687b      	ldr	r3, [r7, #4]
    7e42:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7e44:	f248 0103 	movw	r1, #32771	; 0x8003
    7e48:	6878      	ldr	r0, [r7, #4]
    7e4a:	4b03      	ldr	r3, [pc, #12]	; (7e58 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    7e4c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7e4e:	bf00      	nop
    7e50:	3708      	adds	r7, #8
    7e52:	46bd      	mov	sp, r7
    7e54:	bd80      	pop	{r7, pc}
    7e56:	bf00      	nop
    7e58:	00007d35 	.word	0x00007d35

00007e5c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    7e5c:	b580      	push	{r7, lr}
    7e5e:	b082      	sub	sp, #8
    7e60:	af00      	add	r7, sp, #0
    7e62:	6078      	str	r0, [r7, #4]
    7e64:	460b      	mov	r3, r1
    7e66:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	887a      	ldrh	r2, [r7, #2]
    7e6c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7e6e:	f248 0103 	movw	r1, #32771	; 0x8003
    7e72:	6878      	ldr	r0, [r7, #4]
    7e74:	4b02      	ldr	r3, [pc, #8]	; (7e80 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    7e76:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7e78:	bf00      	nop
    7e7a:	3708      	adds	r7, #8
    7e7c:	46bd      	mov	sp, r7
    7e7e:	bd80      	pop	{r7, pc}
    7e80:	00007d35 	.word	0x00007d35

00007e84 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    7e84:	b580      	push	{r7, lr}
    7e86:	b082      	sub	sp, #8
    7e88:	af00      	add	r7, sp, #0
    7e8a:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    7e8c:	2108      	movs	r1, #8
    7e8e:	6878      	ldr	r0, [r7, #4]
    7e90:	4b03      	ldr	r3, [pc, #12]	; (7ea0 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    7e92:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    7e94:	687b      	ldr	r3, [r7, #4]
    7e96:	699b      	ldr	r3, [r3, #24]
}
    7e98:	4618      	mov	r0, r3
    7e9a:	3708      	adds	r7, #8
    7e9c:	46bd      	mov	sp, r7
    7e9e:	bd80      	pop	{r7, pc}
    7ea0:	00007d35 	.word	0x00007d35

00007ea4 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    7ea4:	b480      	push	{r7}
    7ea6:	b083      	sub	sp, #12
    7ea8:	af00      	add	r7, sp, #0
    7eaa:	6078      	str	r0, [r7, #4]
    7eac:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    7eae:	687b      	ldr	r3, [r7, #4]
    7eb0:	683a      	ldr	r2, [r7, #0]
    7eb2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    7eb4:	bf00      	nop
    7eb6:	370c      	adds	r7, #12
    7eb8:	46bd      	mov	sp, r7
    7eba:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ebe:	4770      	bx	lr

00007ec0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    7ec0:	b580      	push	{r7, lr}
    7ec2:	b082      	sub	sp, #8
    7ec4:	af00      	add	r7, sp, #0
    7ec6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d005      	beq.n	7eda <_calendar_init+0x1a>
    7ece:	687b      	ldr	r3, [r7, #4]
    7ed0:	681b      	ldr	r3, [r3, #0]
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d001      	beq.n	7eda <_calendar_init+0x1a>
    7ed6:	2301      	movs	r3, #1
    7ed8:	e000      	b.n	7edc <_calendar_init+0x1c>
    7eda:	2300      	movs	r3, #0
    7edc:	f003 0301 	and.w	r3, r3, #1
    7ee0:	b2db      	uxtb	r3, r3
    7ee2:	222f      	movs	r2, #47	; 0x2f
    7ee4:	491b      	ldr	r1, [pc, #108]	; (7f54 <_calendar_init+0x94>)
    7ee6:	4618      	mov	r0, r3
    7ee8:	4b1b      	ldr	r3, [pc, #108]	; (7f58 <_calendar_init+0x98>)
    7eea:	4798      	blx	r3

	_rtc_dev = dev;
    7eec:	4a1b      	ldr	r2, [pc, #108]	; (7f5c <_calendar_init+0x9c>)
    7eee:	687b      	ldr	r3, [r7, #4]
    7ef0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    7ef2:	687b      	ldr	r3, [r7, #4]
    7ef4:	681b      	ldr	r3, [r3, #0]
    7ef6:	4618      	mov	r0, r3
    7ef8:	4b19      	ldr	r3, [pc, #100]	; (7f60 <_calendar_init+0xa0>)
    7efa:	4798      	blx	r3
    7efc:	4603      	mov	r3, r0
    7efe:	2b00      	cmp	r3, #0
    7f00:	d00a      	beq.n	7f18 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	681b      	ldr	r3, [r3, #0]
    7f06:	4618      	mov	r0, r3
    7f08:	4b16      	ldr	r3, [pc, #88]	; (7f64 <_calendar_init+0xa4>)
    7f0a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	681b      	ldr	r3, [r3, #0]
    7f10:	2102      	movs	r1, #2
    7f12:	4618      	mov	r0, r3
    7f14:	4b14      	ldr	r3, [pc, #80]	; (7f68 <_calendar_init+0xa8>)
    7f16:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	681b      	ldr	r3, [r3, #0]
    7f1c:	4618      	mov	r0, r3
    7f1e:	4b13      	ldr	r3, [pc, #76]	; (7f6c <_calendar_init+0xac>)
    7f20:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	681b      	ldr	r3, [r3, #0]
    7f26:	2101      	movs	r1, #1
    7f28:	4618      	mov	r0, r3
    7f2a:	4b0f      	ldr	r3, [pc, #60]	; (7f68 <_calendar_init+0xa8>)
    7f2c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    7f2e:	687b      	ldr	r3, [r7, #4]
    7f30:	681b      	ldr	r3, [r3, #0]
    7f32:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    7f36:	4618      	mov	r0, r3
    7f38:	4b0d      	ldr	r3, [pc, #52]	; (7f70 <_calendar_init+0xb0>)
    7f3a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    7f3c:	687b      	ldr	r3, [r7, #4]
    7f3e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    7f40:	2100      	movs	r1, #0
    7f42:	4618      	mov	r0, r3
    7f44:	4b0b      	ldr	r3, [pc, #44]	; (7f74 <_calendar_init+0xb4>)
    7f46:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    7f48:	2300      	movs	r3, #0
}
    7f4a:	4618      	mov	r0, r3
    7f4c:	3708      	adds	r7, #8
    7f4e:	46bd      	mov	sp, r7
    7f50:	bd80      	pop	{r7, pc}
    7f52:	bf00      	nop
    7f54:	0001028c 	.word	0x0001028c
    7f58:	00005af5 	.word	0x00005af5
    7f5c:	20001e3c 	.word	0x20001e3c
    7f60:	00007df1 	.word	0x00007df1
    7f64:	00007e2d 	.word	0x00007e2d
    7f68:	00007d35 	.word	0x00007d35
    7f6c:	00007dc5 	.word	0x00007dc5
    7f70:	00007e5d 	.word	0x00007e5d
    7f74:	00007ea5 	.word	0x00007ea5

00007f78 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    7f78:	b580      	push	{r7, lr}
    7f7a:	b082      	sub	sp, #8
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	2b00      	cmp	r3, #0
    7f84:	d005      	beq.n	7f92 <_calendar_get_counter+0x1a>
    7f86:	687b      	ldr	r3, [r7, #4]
    7f88:	681b      	ldr	r3, [r3, #0]
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d001      	beq.n	7f92 <_calendar_get_counter+0x1a>
    7f8e:	2301      	movs	r3, #1
    7f90:	e000      	b.n	7f94 <_calendar_get_counter+0x1c>
    7f92:	2300      	movs	r3, #0
    7f94:	f003 0301 	and.w	r3, r3, #1
    7f98:	b2db      	uxtb	r3, r3
    7f9a:	2299      	movs	r2, #153	; 0x99
    7f9c:	4906      	ldr	r1, [pc, #24]	; (7fb8 <_calendar_get_counter+0x40>)
    7f9e:	4618      	mov	r0, r3
    7fa0:	4b06      	ldr	r3, [pc, #24]	; (7fbc <_calendar_get_counter+0x44>)
    7fa2:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    7fa4:	687b      	ldr	r3, [r7, #4]
    7fa6:	681b      	ldr	r3, [r3, #0]
    7fa8:	4618      	mov	r0, r3
    7faa:	4b05      	ldr	r3, [pc, #20]	; (7fc0 <_calendar_get_counter+0x48>)
    7fac:	4798      	blx	r3
    7fae:	4603      	mov	r3, r0
}
    7fb0:	4618      	mov	r0, r3
    7fb2:	3708      	adds	r7, #8
    7fb4:	46bd      	mov	sp, r7
    7fb6:	bd80      	pop	{r7, pc}
    7fb8:	0001028c 	.word	0x0001028c
    7fbc:	00005af5 	.word	0x00005af5
    7fc0:	00007e85 	.word	0x00007e85

00007fc4 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    7fc4:	b580      	push	{r7, lr}
    7fc6:	b084      	sub	sp, #16
    7fc8:	af00      	add	r7, sp, #0
    7fca:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	681b      	ldr	r3, [r3, #0]
    7fd0:	4618      	mov	r0, r3
    7fd2:	4b19      	ldr	r3, [pc, #100]	; (8038 <_rtc_interrupt_handler+0x74>)
    7fd4:	4798      	blx	r3
    7fd6:	4603      	mov	r3, r0
    7fd8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    7fda:	687b      	ldr	r3, [r7, #4]
    7fdc:	681b      	ldr	r3, [r3, #0]
    7fde:	4618      	mov	r0, r3
    7fe0:	4b16      	ldr	r3, [pc, #88]	; (803c <_rtc_interrupt_handler+0x78>)
    7fe2:	4798      	blx	r3
    7fe4:	4603      	mov	r3, r0
    7fe6:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    7fe8:	89fa      	ldrh	r2, [r7, #14]
    7fea:	89bb      	ldrh	r3, [r7, #12]
    7fec:	4013      	ands	r3, r2
    7fee:	b29b      	uxth	r3, r3
    7ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	d009      	beq.n	800c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	685b      	ldr	r3, [r3, #4]
    7ffc:	6878      	ldr	r0, [r7, #4]
    7ffe:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	681b      	ldr	r3, [r3, #0]
    8004:	4618      	mov	r0, r3
    8006:	4b0e      	ldr	r3, [pc, #56]	; (8040 <_rtc_interrupt_handler+0x7c>)
    8008:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    800a:	e010      	b.n	802e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    800c:	89fa      	ldrh	r2, [r7, #14]
    800e:	89bb      	ldrh	r3, [r7, #12]
    8010:	4013      	ands	r3, r2
    8012:	b29b      	uxth	r3, r3
    8014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8018:	2b00      	cmp	r3, #0
    801a:	d008      	beq.n	802e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    801c:	687b      	ldr	r3, [r7, #4]
    801e:	689b      	ldr	r3, [r3, #8]
    8020:	6878      	ldr	r0, [r7, #4]
    8022:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	681b      	ldr	r3, [r3, #0]
    8028:	4618      	mov	r0, r3
    802a:	4b06      	ldr	r3, [pc, #24]	; (8044 <_rtc_interrupt_handler+0x80>)
    802c:	4798      	blx	r3
}
    802e:	bf00      	nop
    8030:	3710      	adds	r7, #16
    8032:	46bd      	mov	sp, r7
    8034:	bd80      	pop	{r7, pc}
    8036:	bf00      	nop
    8038:	00007d91 	.word	0x00007d91
    803c:	00007dab 	.word	0x00007dab
    8040:	00007d59 	.word	0x00007d59
    8044:	00007d75 	.word	0x00007d75

00008048 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    8048:	b580      	push	{r7, lr}
    804a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    804c:	4b03      	ldr	r3, [pc, #12]	; (805c <RTC_Handler+0x14>)
    804e:	681b      	ldr	r3, [r3, #0]
    8050:	4618      	mov	r0, r3
    8052:	4b03      	ldr	r3, [pc, #12]	; (8060 <RTC_Handler+0x18>)
    8054:	4798      	blx	r3
}
    8056:	bf00      	nop
    8058:	bd80      	pop	{r7, pc}
    805a:	bf00      	nop
    805c:	20001e3c 	.word	0x20001e3c
    8060:	00007fc5 	.word	0x00007fc5

00008064 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8064:	b480      	push	{r7}
    8066:	b083      	sub	sp, #12
    8068:	af00      	add	r7, sp, #0
    806a:	6078      	str	r0, [r7, #4]
    806c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    806e:	bf00      	nop
    8070:	687b      	ldr	r3, [r7, #4]
    8072:	69da      	ldr	r2, [r3, #28]
    8074:	683b      	ldr	r3, [r7, #0]
    8076:	4013      	ands	r3, r2
    8078:	2b00      	cmp	r3, #0
    807a:	d1f9      	bne.n	8070 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    807c:	bf00      	nop
    807e:	370c      	adds	r7, #12
    8080:	46bd      	mov	sp, r7
    8082:	f85d 7b04 	ldr.w	r7, [sp], #4
    8086:	4770      	bx	lr

00008088 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8088:	b480      	push	{r7}
    808a:	b083      	sub	sp, #12
    808c:	af00      	add	r7, sp, #0
    808e:	6078      	str	r0, [r7, #4]
    8090:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    8092:	687b      	ldr	r3, [r7, #4]
    8094:	69da      	ldr	r2, [r3, #28]
    8096:	683b      	ldr	r3, [r7, #0]
    8098:	4013      	ands	r3, r2
    809a:	2b00      	cmp	r3, #0
    809c:	bf14      	ite	ne
    809e:	2301      	movne	r3, #1
    80a0:	2300      	moveq	r3, #0
    80a2:	b2db      	uxtb	r3, r3
}
    80a4:	4618      	mov	r0, r3
    80a6:	370c      	adds	r7, #12
    80a8:	46bd      	mov	sp, r7
    80aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ae:	4770      	bx	lr

000080b0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    80b0:	b480      	push	{r7}
    80b2:	b083      	sub	sp, #12
    80b4:	af00      	add	r7, sp, #0
    80b6:	6078      	str	r0, [r7, #4]
    80b8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    80ba:	bf00      	nop
    80bc:	687b      	ldr	r3, [r7, #4]
    80be:	69da      	ldr	r2, [r3, #28]
    80c0:	683b      	ldr	r3, [r7, #0]
    80c2:	4013      	ands	r3, r2
    80c4:	2b00      	cmp	r3, #0
    80c6:	d1f9      	bne.n	80bc <hri_sercomspi_wait_for_sync+0xc>
	};
}
    80c8:	bf00      	nop
    80ca:	370c      	adds	r7, #12
    80cc:	46bd      	mov	sp, r7
    80ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    80d2:	4770      	bx	lr

000080d4 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    80d4:	b480      	push	{r7}
    80d6:	b083      	sub	sp, #12
    80d8:	af00      	add	r7, sp, #0
    80da:	6078      	str	r0, [r7, #4]
    80dc:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    80de:	687b      	ldr	r3, [r7, #4]
    80e0:	69da      	ldr	r2, [r3, #28]
    80e2:	683b      	ldr	r3, [r7, #0]
    80e4:	4013      	ands	r3, r2
    80e6:	2b00      	cmp	r3, #0
    80e8:	bf14      	ite	ne
    80ea:	2301      	movne	r3, #1
    80ec:	2300      	moveq	r3, #0
    80ee:	b2db      	uxtb	r3, r3
}
    80f0:	4618      	mov	r0, r3
    80f2:	370c      	adds	r7, #12
    80f4:	46bd      	mov	sp, r7
    80f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    80fa:	4770      	bx	lr

000080fc <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    80fc:	b480      	push	{r7}
    80fe:	b083      	sub	sp, #12
    8100:	af00      	add	r7, sp, #0
    8102:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    8104:	687b      	ldr	r3, [r7, #4]
    8106:	2201      	movs	r2, #1
    8108:	761a      	strb	r2, [r3, #24]
}
    810a:	bf00      	nop
    810c:	370c      	adds	r7, #12
    810e:	46bd      	mov	sp, r7
    8110:	f85d 7b04 	ldr.w	r7, [sp], #4
    8114:	4770      	bx	lr

00008116 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    8116:	b480      	push	{r7}
    8118:	b083      	sub	sp, #12
    811a:	af00      	add	r7, sp, #0
    811c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    811e:	687b      	ldr	r3, [r7, #4]
    8120:	2202      	movs	r2, #2
    8122:	761a      	strb	r2, [r3, #24]
}
    8124:	bf00      	nop
    8126:	370c      	adds	r7, #12
    8128:	46bd      	mov	sp, r7
    812a:	f85d 7b04 	ldr.w	r7, [sp], #4
    812e:	4770      	bx	lr

00008130 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    8130:	b480      	push	{r7}
    8132:	b083      	sub	sp, #12
    8134:	af00      	add	r7, sp, #0
    8136:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    8138:	687b      	ldr	r3, [r7, #4]
    813a:	7e1b      	ldrb	r3, [r3, #24]
    813c:	b2db      	uxtb	r3, r3
}
    813e:	4618      	mov	r0, r3
    8140:	370c      	adds	r7, #12
    8142:	46bd      	mov	sp, r7
    8144:	f85d 7b04 	ldr.w	r7, [sp], #4
    8148:	4770      	bx	lr

0000814a <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    814a:	b480      	push	{r7}
    814c:	b085      	sub	sp, #20
    814e:	af00      	add	r7, sp, #0
    8150:	6078      	str	r0, [r7, #4]
    8152:	460b      	mov	r3, r1
    8154:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    8156:	687b      	ldr	r3, [r7, #4]
    8158:	7e1b      	ldrb	r3, [r3, #24]
    815a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    815c:	7bfa      	ldrb	r2, [r7, #15]
    815e:	78fb      	ldrb	r3, [r7, #3]
    8160:	4013      	ands	r3, r2
    8162:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8164:	7bfb      	ldrb	r3, [r7, #15]
}
    8166:	4618      	mov	r0, r3
    8168:	3714      	adds	r7, #20
    816a:	46bd      	mov	sp, r7
    816c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8170:	4770      	bx	lr

00008172 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    8172:	b480      	push	{r7}
    8174:	b083      	sub	sp, #12
    8176:	af00      	add	r7, sp, #0
    8178:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    817a:	687b      	ldr	r3, [r7, #4]
    817c:	7e1b      	ldrb	r3, [r3, #24]
    817e:	b2db      	uxtb	r3, r3
}
    8180:	4618      	mov	r0, r3
    8182:	370c      	adds	r7, #12
    8184:	46bd      	mov	sp, r7
    8186:	f85d 7b04 	ldr.w	r7, [sp], #4
    818a:	4770      	bx	lr

0000818c <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    818c:	b480      	push	{r7}
    818e:	b083      	sub	sp, #12
    8190:	af00      	add	r7, sp, #0
    8192:	6078      	str	r0, [r7, #4]
    8194:	460b      	mov	r3, r1
    8196:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8198:	687b      	ldr	r3, [r7, #4]
    819a:	78fa      	ldrb	r2, [r7, #3]
    819c:	761a      	strb	r2, [r3, #24]
}
    819e:	bf00      	nop
    81a0:	370c      	adds	r7, #12
    81a2:	46bd      	mov	sp, r7
    81a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a8:	4770      	bx	lr
	...

000081ac <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    81ac:	b580      	push	{r7, lr}
    81ae:	b082      	sub	sp, #8
    81b0:	af00      	add	r7, sp, #0
    81b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    81b4:	687b      	ldr	r3, [r7, #4]
    81b6:	681b      	ldr	r3, [r3, #0]
    81b8:	f023 0202 	bic.w	r2, r3, #2
    81bc:	687b      	ldr	r3, [r7, #4]
    81be:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    81c0:	2103      	movs	r1, #3
    81c2:	6878      	ldr	r0, [r7, #4]
    81c4:	4b02      	ldr	r3, [pc, #8]	; (81d0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    81c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    81c8:	bf00      	nop
    81ca:	3708      	adds	r7, #8
    81cc:	46bd      	mov	sp, r7
    81ce:	bd80      	pop	{r7, pc}
    81d0:	00008065 	.word	0x00008065

000081d4 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    81d4:	b480      	push	{r7}
    81d6:	b085      	sub	sp, #20
    81d8:	af00      	add	r7, sp, #0
    81da:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    81dc:	687b      	ldr	r3, [r7, #4]
    81de:	681b      	ldr	r3, [r3, #0]
    81e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    81e2:	68fb      	ldr	r3, [r7, #12]
    81e4:	0edb      	lsrs	r3, r3, #27
    81e6:	f003 0301 	and.w	r3, r3, #1
    81ea:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    81ec:	68fb      	ldr	r3, [r7, #12]
    81ee:	2b00      	cmp	r3, #0
    81f0:	bf14      	ite	ne
    81f2:	2301      	movne	r3, #1
    81f4:	2300      	moveq	r3, #0
    81f6:	b2db      	uxtb	r3, r3
}
    81f8:	4618      	mov	r0, r3
    81fa:	3714      	adds	r7, #20
    81fc:	46bd      	mov	sp, r7
    81fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8202:	4770      	bx	lr

00008204 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    8204:	b580      	push	{r7, lr}
    8206:	b084      	sub	sp, #16
    8208:	af00      	add	r7, sp, #0
    820a:	6078      	str	r0, [r7, #4]
    820c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    820e:	2103      	movs	r1, #3
    8210:	6878      	ldr	r0, [r7, #4]
    8212:	4b07      	ldr	r3, [pc, #28]	; (8230 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    8214:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	681b      	ldr	r3, [r3, #0]
    821a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    821c:	68fa      	ldr	r2, [r7, #12]
    821e:	683b      	ldr	r3, [r7, #0]
    8220:	4013      	ands	r3, r2
    8222:	60fb      	str	r3, [r7, #12]
	return tmp;
    8224:	68fb      	ldr	r3, [r7, #12]
}
    8226:	4618      	mov	r0, r3
    8228:	3710      	adds	r7, #16
    822a:	46bd      	mov	sp, r7
    822c:	bd80      	pop	{r7, pc}
    822e:	bf00      	nop
    8230:	00008065 	.word	0x00008065

00008234 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    8234:	b580      	push	{r7, lr}
    8236:	b082      	sub	sp, #8
    8238:	af00      	add	r7, sp, #0
    823a:	6078      	str	r0, [r7, #4]
    823c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    823e:	687b      	ldr	r3, [r7, #4]
    8240:	683a      	ldr	r2, [r7, #0]
    8242:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    8244:	2103      	movs	r1, #3
    8246:	6878      	ldr	r0, [r7, #4]
    8248:	4b02      	ldr	r3, [pc, #8]	; (8254 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    824a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    824c:	bf00      	nop
    824e:	3708      	adds	r7, #8
    8250:	46bd      	mov	sp, r7
    8252:	bd80      	pop	{r7, pc}
    8254:	00008065 	.word	0x00008065

00008258 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8258:	b580      	push	{r7, lr}
    825a:	b082      	sub	sp, #8
    825c:	af00      	add	r7, sp, #0
    825e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	681b      	ldr	r3, [r3, #0]
    8264:	f043 0202 	orr.w	r2, r3, #2
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    826c:	2103      	movs	r1, #3
    826e:	6878      	ldr	r0, [r7, #4]
    8270:	4b02      	ldr	r3, [pc, #8]	; (827c <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    8272:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8274:	bf00      	nop
    8276:	3708      	adds	r7, #8
    8278:	46bd      	mov	sp, r7
    827a:	bd80      	pop	{r7, pc}
    827c:	000080b1 	.word	0x000080b1

00008280 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8280:	b580      	push	{r7, lr}
    8282:	b084      	sub	sp, #16
    8284:	af00      	add	r7, sp, #0
    8286:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8288:	2103      	movs	r1, #3
    828a:	6878      	ldr	r0, [r7, #4]
    828c:	4b09      	ldr	r3, [pc, #36]	; (82b4 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    828e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    8296:	68fb      	ldr	r3, [r7, #12]
    8298:	085b      	lsrs	r3, r3, #1
    829a:	f003 0301 	and.w	r3, r3, #1
    829e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    82a0:	68fb      	ldr	r3, [r7, #12]
    82a2:	2b00      	cmp	r3, #0
    82a4:	bf14      	ite	ne
    82a6:	2301      	movne	r3, #1
    82a8:	2300      	moveq	r3, #0
    82aa:	b2db      	uxtb	r3, r3
}
    82ac:	4618      	mov	r0, r3
    82ae:	3710      	adds	r7, #16
    82b0:	46bd      	mov	sp, r7
    82b2:	bd80      	pop	{r7, pc}
    82b4:	000080b1 	.word	0x000080b1

000082b8 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    82b8:	b580      	push	{r7, lr}
    82ba:	b082      	sub	sp, #8
    82bc:	af00      	add	r7, sp, #0
    82be:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    82c0:	687b      	ldr	r3, [r7, #4]
    82c2:	681b      	ldr	r3, [r3, #0]
    82c4:	f023 0202 	bic.w	r2, r3, #2
    82c8:	687b      	ldr	r3, [r7, #4]
    82ca:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    82cc:	2103      	movs	r1, #3
    82ce:	6878      	ldr	r0, [r7, #4]
    82d0:	4b02      	ldr	r3, [pc, #8]	; (82dc <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    82d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    82d4:	bf00      	nop
    82d6:	3708      	adds	r7, #8
    82d8:	46bd      	mov	sp, r7
    82da:	bd80      	pop	{r7, pc}
    82dc:	000080b1 	.word	0x000080b1

000082e0 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    82e0:	b580      	push	{r7, lr}
    82e2:	b084      	sub	sp, #16
    82e4:	af00      	add	r7, sp, #0
    82e6:	6078      	str	r0, [r7, #4]
    82e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    82ea:	2103      	movs	r1, #3
    82ec:	6878      	ldr	r0, [r7, #4]
    82ee:	4b07      	ldr	r3, [pc, #28]	; (830c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    82f0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    82f2:	687b      	ldr	r3, [r7, #4]
    82f4:	681b      	ldr	r3, [r3, #0]
    82f6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    82f8:	68fa      	ldr	r2, [r7, #12]
    82fa:	683b      	ldr	r3, [r7, #0]
    82fc:	4013      	ands	r3, r2
    82fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    8300:	68fb      	ldr	r3, [r7, #12]
}
    8302:	4618      	mov	r0, r3
    8304:	3710      	adds	r7, #16
    8306:	46bd      	mov	sp, r7
    8308:	bd80      	pop	{r7, pc}
    830a:	bf00      	nop
    830c:	000080b1 	.word	0x000080b1

00008310 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    8310:	b580      	push	{r7, lr}
    8312:	b082      	sub	sp, #8
    8314:	af00      	add	r7, sp, #0
    8316:	6078      	str	r0, [r7, #4]
    8318:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    831a:	687b      	ldr	r3, [r7, #4]
    831c:	683a      	ldr	r2, [r7, #0]
    831e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8320:	2103      	movs	r1, #3
    8322:	6878      	ldr	r0, [r7, #4]
    8324:	4b02      	ldr	r3, [pc, #8]	; (8330 <hri_sercomspi_write_CTRLA_reg+0x20>)
    8326:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8328:	bf00      	nop
    832a:	3708      	adds	r7, #8
    832c:	46bd      	mov	sp, r7
    832e:	bd80      	pop	{r7, pc}
    8330:	000080b1 	.word	0x000080b1

00008334 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    8334:	b580      	push	{r7, lr}
    8336:	b082      	sub	sp, #8
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    833c:	687b      	ldr	r3, [r7, #4]
    833e:	685b      	ldr	r3, [r3, #4]
    8340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8348:	2104      	movs	r1, #4
    834a:	6878      	ldr	r0, [r7, #4]
    834c:	4b02      	ldr	r3, [pc, #8]	; (8358 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    834e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8350:	bf00      	nop
    8352:	3708      	adds	r7, #8
    8354:	46bd      	mov	sp, r7
    8356:	bd80      	pop	{r7, pc}
    8358:	00008065 	.word	0x00008065

0000835c <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    835c:	b580      	push	{r7, lr}
    835e:	b082      	sub	sp, #8
    8360:	af00      	add	r7, sp, #0
    8362:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    8364:	687b      	ldr	r3, [r7, #4]
    8366:	685b      	ldr	r3, [r3, #4]
    8368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    836c:	687b      	ldr	r3, [r7, #4]
    836e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8370:	2104      	movs	r1, #4
    8372:	6878      	ldr	r0, [r7, #4]
    8374:	4b02      	ldr	r3, [pc, #8]	; (8380 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    8376:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8378:	bf00      	nop
    837a:	3708      	adds	r7, #8
    837c:	46bd      	mov	sp, r7
    837e:	bd80      	pop	{r7, pc}
    8380:	00008065 	.word	0x00008065

00008384 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    8384:	b580      	push	{r7, lr}
    8386:	b082      	sub	sp, #8
    8388:	af00      	add	r7, sp, #0
    838a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    838c:	687b      	ldr	r3, [r7, #4]
    838e:	685b      	ldr	r3, [r3, #4]
    8390:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    8394:	687b      	ldr	r3, [r7, #4]
    8396:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8398:	2104      	movs	r1, #4
    839a:	6878      	ldr	r0, [r7, #4]
    839c:	4b02      	ldr	r3, [pc, #8]	; (83a8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    839e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    83a0:	bf00      	nop
    83a2:	3708      	adds	r7, #8
    83a4:	46bd      	mov	sp, r7
    83a6:	bd80      	pop	{r7, pc}
    83a8:	00008065 	.word	0x00008065

000083ac <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    83ac:	b580      	push	{r7, lr}
    83ae:	b082      	sub	sp, #8
    83b0:	af00      	add	r7, sp, #0
    83b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    83b4:	687b      	ldr	r3, [r7, #4]
    83b6:	685b      	ldr	r3, [r3, #4]
    83b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    83bc:	687b      	ldr	r3, [r7, #4]
    83be:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    83c0:	2104      	movs	r1, #4
    83c2:	6878      	ldr	r0, [r7, #4]
    83c4:	4b02      	ldr	r3, [pc, #8]	; (83d0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    83c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    83c8:	bf00      	nop
    83ca:	3708      	adds	r7, #8
    83cc:	46bd      	mov	sp, r7
    83ce:	bd80      	pop	{r7, pc}
    83d0:	00008065 	.word	0x00008065

000083d4 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    83d4:	b580      	push	{r7, lr}
    83d6:	b082      	sub	sp, #8
    83d8:	af00      	add	r7, sp, #0
    83da:	6078      	str	r0, [r7, #4]
    83dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	685a      	ldr	r2, [r3, #4]
    83e2:	683b      	ldr	r3, [r7, #0]
    83e4:	041b      	lsls	r3, r3, #16
    83e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    83ea:	431a      	orrs	r2, r3
    83ec:	687b      	ldr	r3, [r7, #4]
    83ee:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    83f0:	2104      	movs	r1, #4
    83f2:	6878      	ldr	r0, [r7, #4]
    83f4:	4b02      	ldr	r3, [pc, #8]	; (8400 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    83f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    83f8:	bf00      	nop
    83fa:	3708      	adds	r7, #8
    83fc:	46bd      	mov	sp, r7
    83fe:	bd80      	pop	{r7, pc}
    8400:	00008065 	.word	0x00008065

00008404 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    8404:	b580      	push	{r7, lr}
    8406:	b082      	sub	sp, #8
    8408:	af00      	add	r7, sp, #0
    840a:	6078      	str	r0, [r7, #4]
    840c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    840e:	687b      	ldr	r3, [r7, #4]
    8410:	683a      	ldr	r2, [r7, #0]
    8412:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8414:	2104      	movs	r1, #4
    8416:	6878      	ldr	r0, [r7, #4]
    8418:	4b02      	ldr	r3, [pc, #8]	; (8424 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    841a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    841c:	bf00      	nop
    841e:	3708      	adds	r7, #8
    8420:	46bd      	mov	sp, r7
    8422:	bd80      	pop	{r7, pc}
    8424:	00008065 	.word	0x00008065

00008428 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    8428:	b580      	push	{r7, lr}
    842a:	b082      	sub	sp, #8
    842c:	af00      	add	r7, sp, #0
    842e:	6078      	str	r0, [r7, #4]
    8430:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    8432:	687b      	ldr	r3, [r7, #4]
    8434:	683a      	ldr	r2, [r7, #0]
    8436:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    8438:	2117      	movs	r1, #23
    843a:	6878      	ldr	r0, [r7, #4]
    843c:	4b02      	ldr	r3, [pc, #8]	; (8448 <hri_sercomspi_write_CTRLB_reg+0x20>)
    843e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8440:	bf00      	nop
    8442:	3708      	adds	r7, #8
    8444:	46bd      	mov	sp, r7
    8446:	bd80      	pop	{r7, pc}
    8448:	000080b1 	.word	0x000080b1

0000844c <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    844c:	b480      	push	{r7}
    844e:	b083      	sub	sp, #12
    8450:	af00      	add	r7, sp, #0
    8452:	6078      	str	r0, [r7, #4]
    8454:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    8456:	687b      	ldr	r3, [r7, #4]
    8458:	683a      	ldr	r2, [r7, #0]
    845a:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    845c:	bf00      	nop
    845e:	370c      	adds	r7, #12
    8460:	46bd      	mov	sp, r7
    8462:	f85d 7b04 	ldr.w	r7, [sp], #4
    8466:	4770      	bx	lr

00008468 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    8468:	b480      	push	{r7}
    846a:	b083      	sub	sp, #12
    846c:	af00      	add	r7, sp, #0
    846e:	6078      	str	r0, [r7, #4]
    8470:	460b      	mov	r3, r1
    8472:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	78fa      	ldrb	r2, [r7, #3]
    8478:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    847a:	bf00      	nop
    847c:	370c      	adds	r7, #12
    847e:	46bd      	mov	sp, r7
    8480:	f85d 7b04 	ldr.w	r7, [sp], #4
    8484:	4770      	bx	lr
	...

00008488 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    8488:	b580      	push	{r7, lr}
    848a:	b084      	sub	sp, #16
    848c:	af00      	add	r7, sp, #0
    848e:	6078      	str	r0, [r7, #4]
    8490:	460b      	mov	r3, r1
    8492:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8498:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    849a:	68fb      	ldr	r3, [r7, #12]
    849c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    84a0:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    84a2:	78fb      	ldrb	r3, [r7, #3]
    84a4:	039b      	lsls	r3, r3, #14
    84a6:	461a      	mov	r2, r3
    84a8:	68fb      	ldr	r3, [r7, #12]
    84aa:	4313      	orrs	r3, r2
    84ac:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    84ae:	687b      	ldr	r3, [r7, #4]
    84b0:	68fa      	ldr	r2, [r7, #12]
    84b2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    84b4:	2104      	movs	r1, #4
    84b6:	6878      	ldr	r0, [r7, #4]
    84b8:	4b02      	ldr	r3, [pc, #8]	; (84c4 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    84ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    84bc:	bf00      	nop
    84be:	3710      	adds	r7, #16
    84c0:	46bd      	mov	sp, r7
    84c2:	bd80      	pop	{r7, pc}
    84c4:	00008065 	.word	0x00008065

000084c8 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    84c8:	b580      	push	{r7, lr}
    84ca:	b082      	sub	sp, #8
    84cc:	af00      	add	r7, sp, #0
    84ce:	6078      	str	r0, [r7, #4]
    84d0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	683a      	ldr	r2, [r7, #0]
    84d6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    84d8:	2104      	movs	r1, #4
    84da:	6878      	ldr	r0, [r7, #4]
    84dc:	4b02      	ldr	r3, [pc, #8]	; (84e8 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    84de:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    84e0:	bf00      	nop
    84e2:	3708      	adds	r7, #8
    84e4:	46bd      	mov	sp, r7
    84e6:	bd80      	pop	{r7, pc}
    84e8:	00008065 	.word	0x00008065

000084ec <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    84ec:	b580      	push	{r7, lr}
    84ee:	b082      	sub	sp, #8
    84f0:	af00      	add	r7, sp, #0
    84f2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    84f4:	2104      	movs	r1, #4
    84f6:	6878      	ldr	r0, [r7, #4]
    84f8:	4b03      	ldr	r3, [pc, #12]	; (8508 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    84fa:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    84fc:	687b      	ldr	r3, [r7, #4]
    84fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    8500:	4618      	mov	r0, r3
    8502:	3708      	adds	r7, #8
    8504:	46bd      	mov	sp, r7
    8506:	bd80      	pop	{r7, pc}
    8508:	00008065 	.word	0x00008065

0000850c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    850c:	b480      	push	{r7}
    850e:	b083      	sub	sp, #12
    8510:	af00      	add	r7, sp, #0
    8512:	6078      	str	r0, [r7, #4]
    8514:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    8516:	687b      	ldr	r3, [r7, #4]
    8518:	683a      	ldr	r2, [r7, #0]
    851a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    851c:	bf00      	nop
    851e:	370c      	adds	r7, #12
    8520:	46bd      	mov	sp, r7
    8522:	f85d 7b04 	ldr.w	r7, [sp], #4
    8526:	4770      	bx	lr

00008528 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    8528:	b580      	push	{r7, lr}
    852a:	b082      	sub	sp, #8
    852c:	af00      	add	r7, sp, #0
    852e:	6078      	str	r0, [r7, #4]
    8530:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    8532:	687b      	ldr	r3, [r7, #4]
    8534:	683a      	ldr	r2, [r7, #0]
    8536:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8538:	2104      	movs	r1, #4
    853a:	6878      	ldr	r0, [r7, #4]
    853c:	4b02      	ldr	r3, [pc, #8]	; (8548 <hri_sercomi2cm_write_DATA_reg+0x20>)
    853e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8540:	bf00      	nop
    8542:	3708      	adds	r7, #8
    8544:	46bd      	mov	sp, r7
    8546:	bd80      	pop	{r7, pc}
    8548:	00008065 	.word	0x00008065

0000854c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    854c:	b580      	push	{r7, lr}
    854e:	b082      	sub	sp, #8
    8550:	af00      	add	r7, sp, #0
    8552:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8554:	2104      	movs	r1, #4
    8556:	6878      	ldr	r0, [r7, #4]
    8558:	4b03      	ldr	r3, [pc, #12]	; (8568 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    855a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    855c:	687b      	ldr	r3, [r7, #4]
    855e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8560:	4618      	mov	r0, r3
    8562:	3708      	adds	r7, #8
    8564:	46bd      	mov	sp, r7
    8566:	bd80      	pop	{r7, pc}
    8568:	00008065 	.word	0x00008065

0000856c <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    856c:	b480      	push	{r7}
    856e:	b083      	sub	sp, #12
    8570:	af00      	add	r7, sp, #0
    8572:	6078      	str	r0, [r7, #4]
    8574:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    8576:	687b      	ldr	r3, [r7, #4]
    8578:	683a      	ldr	r2, [r7, #0]
    857a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    857c:	bf00      	nop
    857e:	370c      	adds	r7, #12
    8580:	46bd      	mov	sp, r7
    8582:	f85d 7b04 	ldr.w	r7, [sp], #4
    8586:	4770      	bx	lr

00008588 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    8588:	b480      	push	{r7}
    858a:	b083      	sub	sp, #12
    858c:	af00      	add	r7, sp, #0
    858e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    8590:	687b      	ldr	r3, [r7, #4]
    8592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8594:	4618      	mov	r0, r3
    8596:	370c      	adds	r7, #12
    8598:	46bd      	mov	sp, r7
    859a:	f85d 7b04 	ldr.w	r7, [sp], #4
    859e:	4770      	bx	lr

000085a0 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    85a0:	b480      	push	{r7}
    85a2:	b083      	sub	sp, #12
    85a4:	af00      	add	r7, sp, #0
    85a6:	6078      	str	r0, [r7, #4]
    85a8:	460b      	mov	r3, r1
    85aa:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    85ac:	687b      	ldr	r3, [r7, #4]
    85ae:	78fa      	ldrb	r2, [r7, #3]
    85b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    85b4:	bf00      	nop
    85b6:	370c      	adds	r7, #12
    85b8:	46bd      	mov	sp, r7
    85ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    85be:	4770      	bx	lr

000085c0 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    85c0:	b480      	push	{r7}
    85c2:	b083      	sub	sp, #12
    85c4:	af00      	add	r7, sp, #0
    85c6:	6078      	str	r0, [r7, #4]
    85c8:	460b      	mov	r3, r1
    85ca:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    85cc:	687b      	ldr	r3, [r7, #4]
    85ce:	887a      	ldrh	r2, [r7, #2]
    85d0:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    85d2:	bf00      	nop
    85d4:	370c      	adds	r7, #12
    85d6:	46bd      	mov	sp, r7
    85d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    85dc:	4770      	bx	lr
	...

000085e0 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    85e0:	b580      	push	{r7, lr}
    85e2:	b082      	sub	sp, #8
    85e4:	af00      	add	r7, sp, #0
    85e6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    85e8:	2104      	movs	r1, #4
    85ea:	6878      	ldr	r0, [r7, #4]
    85ec:	4b04      	ldr	r3, [pc, #16]	; (8600 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    85ee:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    85f0:	687b      	ldr	r3, [r7, #4]
    85f2:	8b5b      	ldrh	r3, [r3, #26]
    85f4:	b29b      	uxth	r3, r3
}
    85f6:	4618      	mov	r0, r3
    85f8:	3708      	adds	r7, #8
    85fa:	46bd      	mov	sp, r7
    85fc:	bd80      	pop	{r7, pc}
    85fe:	bf00      	nop
    8600:	00008065 	.word	0x00008065

00008604 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    8604:	b4b0      	push	{r4, r5, r7}
    8606:	b08d      	sub	sp, #52	; 0x34
    8608:	af00      	add	r7, sp, #0
    860a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    860c:	4b13      	ldr	r3, [pc, #76]	; (865c <_sercom_get_hardware_index+0x58>)
    860e:	f107 040c 	add.w	r4, r7, #12
    8612:	461d      	mov	r5, r3
    8614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8618:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    861c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8620:	2300      	movs	r3, #0
    8622:	62fb      	str	r3, [r7, #44]	; 0x2c
    8624:	e010      	b.n	8648 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    8626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8628:	009b      	lsls	r3, r3, #2
    862a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    862e:	4413      	add	r3, r2
    8630:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8634:	461a      	mov	r2, r3
    8636:	687b      	ldr	r3, [r7, #4]
    8638:	429a      	cmp	r2, r3
    863a:	d102      	bne.n	8642 <_sercom_get_hardware_index+0x3e>
			return i;
    863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    863e:	b2db      	uxtb	r3, r3
    8640:	e006      	b.n	8650 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8644:	3301      	adds	r3, #1
    8646:	62fb      	str	r3, [r7, #44]	; 0x2c
    8648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    864a:	2b07      	cmp	r3, #7
    864c:	d9eb      	bls.n	8626 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    864e:	2300      	movs	r3, #0
}
    8650:	4618      	mov	r0, r3
    8652:	3734      	adds	r7, #52	; 0x34
    8654:	46bd      	mov	sp, r7
    8656:	bcb0      	pop	{r4, r5, r7}
    8658:	4770      	bx	lr
    865a:	bf00      	nop
    865c:	000102c0 	.word	0x000102c0

00008660 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    8660:	b580      	push	{r7, lr}
    8662:	b084      	sub	sp, #16
    8664:	af00      	add	r7, sp, #0
    8666:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    8668:	6878      	ldr	r0, [r7, #4]
    866a:	4b13      	ldr	r3, [pc, #76]	; (86b8 <_get_i2cm_index+0x58>)
    866c:	4798      	blx	r3
    866e:	4603      	mov	r3, r0
    8670:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    8672:	2300      	movs	r3, #0
    8674:	73fb      	strb	r3, [r7, #15]
    8676:	e010      	b.n	869a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    8678:	7bfa      	ldrb	r2, [r7, #15]
    867a:	4910      	ldr	r1, [pc, #64]	; (86bc <_get_i2cm_index+0x5c>)
    867c:	4613      	mov	r3, r2
    867e:	005b      	lsls	r3, r3, #1
    8680:	4413      	add	r3, r2
    8682:	00db      	lsls	r3, r3, #3
    8684:	440b      	add	r3, r1
    8686:	781b      	ldrb	r3, [r3, #0]
    8688:	7bba      	ldrb	r2, [r7, #14]
    868a:	429a      	cmp	r2, r3
    868c:	d102      	bne.n	8694 <_get_i2cm_index+0x34>
			return i;
    868e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8692:	e00d      	b.n	86b0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    8694:	7bfb      	ldrb	r3, [r7, #15]
    8696:	3301      	adds	r3, #1
    8698:	73fb      	strb	r3, [r7, #15]
    869a:	7bfb      	ldrb	r3, [r7, #15]
    869c:	2b02      	cmp	r3, #2
    869e:	d9eb      	bls.n	8678 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    86a0:	f240 32a6 	movw	r2, #934	; 0x3a6
    86a4:	4906      	ldr	r1, [pc, #24]	; (86c0 <_get_i2cm_index+0x60>)
    86a6:	2000      	movs	r0, #0
    86a8:	4b06      	ldr	r3, [pc, #24]	; (86c4 <_get_i2cm_index+0x64>)
    86aa:	4798      	blx	r3
	return -1;
    86ac:	f04f 33ff 	mov.w	r3, #4294967295
}
    86b0:	4618      	mov	r0, r3
    86b2:	3710      	adds	r7, #16
    86b4:	46bd      	mov	sp, r7
    86b6:	bd80      	pop	{r7, pc}
    86b8:	00008605 	.word	0x00008605
    86bc:	20000018 	.word	0x20000018
    86c0:	000102a4 	.word	0x000102a4
    86c4:	00005af5 	.word	0x00005af5

000086c8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    86c8:	b580      	push	{r7, lr}
    86ca:	b082      	sub	sp, #8
    86cc:	af00      	add	r7, sp, #0
    86ce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    86d0:	2103      	movs	r1, #3
    86d2:	6878      	ldr	r0, [r7, #4]
    86d4:	4b02      	ldr	r3, [pc, #8]	; (86e0 <_sercom_i2c_send_stop+0x18>)
    86d6:	4798      	blx	r3
}
    86d8:	bf00      	nop
    86da:	3708      	adds	r7, #8
    86dc:	46bd      	mov	sp, r7
    86de:	bd80      	pop	{r7, pc}
    86e0:	000083d5 	.word	0x000083d5

000086e4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    86e4:	b590      	push	{r4, r7, lr}
    86e6:	b087      	sub	sp, #28
    86e8:	af00      	add	r7, sp, #0
    86ea:	60f8      	str	r0, [r7, #12]
    86ec:	60b9      	str	r1, [r7, #8]
    86ee:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    86f0:	68f8      	ldr	r0, [r7, #12]
    86f2:	4b7d      	ldr	r3, [pc, #500]	; (88e8 <_sercom_i2c_sync_analyse_flags+0x204>)
    86f4:	4798      	blx	r3
    86f6:	4603      	mov	r3, r0
    86f8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    86fa:	68f8      	ldr	r0, [r7, #12]
    86fc:	4b7b      	ldr	r3, [pc, #492]	; (88ec <_sercom_i2c_sync_analyse_flags+0x208>)
    86fe:	4798      	blx	r3
    8700:	4603      	mov	r3, r0
    8702:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    8704:	68bb      	ldr	r3, [r7, #8]
    8706:	f003 0301 	and.w	r3, r3, #1
    870a:	2b00      	cmp	r3, #0
    870c:	f000 8095 	beq.w	883a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    8710:	8a7b      	ldrh	r3, [r7, #18]
    8712:	f003 0302 	and.w	r3, r3, #2
    8716:	2b00      	cmp	r3, #0
    8718:	d01d      	beq.n	8756 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    871a:	68f8      	ldr	r0, [r7, #12]
    871c:	4b74      	ldr	r3, [pc, #464]	; (88f0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    871e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	885b      	ldrh	r3, [r3, #2]
    8724:	b29b      	uxth	r3, r3
    8726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    872a:	b29a      	uxth	r2, r3
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	885b      	ldrh	r3, [r3, #2]
    8734:	b29b      	uxth	r3, r3
    8736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    873a:	b29a      	uxth	r2, r3
    873c:	687b      	ldr	r3, [r7, #4]
    873e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8740:	8a7b      	ldrh	r3, [r7, #18]
    8742:	f003 0301 	and.w	r3, r3, #1
    8746:	2b00      	cmp	r3, #0
    8748:	d002      	beq.n	8750 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    874a:	f06f 0304 	mvn.w	r3, #4
    874e:	e0c6      	b.n	88de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    8750:	f06f 0303 	mvn.w	r3, #3
    8754:	e0c3      	b.n	88de <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    8756:	8a7b      	ldrh	r3, [r7, #18]
    8758:	f003 0304 	and.w	r3, r3, #4
    875c:	2b00      	cmp	r3, #0
    875e:	d01f      	beq.n	87a0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    8760:	687b      	ldr	r3, [r7, #4]
    8762:	685b      	ldr	r3, [r3, #4]
    8764:	2b00      	cmp	r3, #0
    8766:	dd07      	ble.n	8778 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    8768:	687b      	ldr	r3, [r7, #4]
    876a:	885b      	ldrh	r3, [r3, #2]
    876c:	b29b      	uxth	r3, r3
    876e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8772:	b29a      	uxth	r2, r3
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    8778:	687b      	ldr	r3, [r7, #4]
    877a:	885b      	ldrh	r3, [r3, #2]
    877c:	b29b      	uxth	r3, r3
    877e:	b21b      	sxth	r3, r3
    8780:	2b00      	cmp	r3, #0
    8782:	da02      	bge.n	878a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    8784:	68f8      	ldr	r0, [r7, #12]
    8786:	4b5b      	ldr	r3, [pc, #364]	; (88f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    8788:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    878a:	687b      	ldr	r3, [r7, #4]
    878c:	885b      	ldrh	r3, [r3, #2]
    878e:	b29b      	uxth	r3, r3
    8790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8794:	b29a      	uxth	r2, r3
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    879a:	f06f 0301 	mvn.w	r3, #1
    879e:	e09e      	b.n	88de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    87a0:	687b      	ldr	r3, [r7, #4]
    87a2:	885b      	ldrh	r3, [r3, #2]
    87a4:	b29b      	uxth	r3, r3
    87a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    87aa:	2b00      	cmp	r3, #0
    87ac:	d01c      	beq.n	87e8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	881b      	ldrh	r3, [r3, #0]
    87b2:	121b      	asrs	r3, r3, #8
    87b4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    87b6:	f003 0406 	and.w	r4, r3, #6
    87ba:	68f8      	ldr	r0, [r7, #12]
    87bc:	4b4e      	ldr	r3, [pc, #312]	; (88f8 <_sercom_i2c_sync_analyse_flags+0x214>)
    87be:	4798      	blx	r3
    87c0:	4603      	mov	r3, r0
    87c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    87c6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    87c8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    87cc:	4619      	mov	r1, r3
    87ce:	68f8      	ldr	r0, [r7, #12]
    87d0:	4b4a      	ldr	r3, [pc, #296]	; (88fc <_sercom_i2c_sync_analyse_flags+0x218>)
    87d2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    87d4:	687b      	ldr	r3, [r7, #4]
    87d6:	885b      	ldrh	r3, [r3, #2]
    87d8:	b29b      	uxth	r3, r3
    87da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    87de:	b29a      	uxth	r2, r3
    87e0:	687b      	ldr	r3, [r7, #4]
    87e2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    87e4:	2300      	movs	r3, #0
    87e6:	e07a      	b.n	88de <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	685b      	ldr	r3, [r3, #4]
    87ec:	2b00      	cmp	r3, #0
    87ee:	d111      	bne.n	8814 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    87f0:	687b      	ldr	r3, [r7, #4]
    87f2:	885b      	ldrh	r3, [r3, #2]
    87f4:	b29b      	uxth	r3, r3
    87f6:	b21b      	sxth	r3, r3
    87f8:	2b00      	cmp	r3, #0
    87fa:	da02      	bge.n	8802 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    87fc:	68f8      	ldr	r0, [r7, #12]
    87fe:	4b3d      	ldr	r3, [pc, #244]	; (88f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    8800:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8802:	687b      	ldr	r3, [r7, #4]
    8804:	885b      	ldrh	r3, [r3, #2]
    8806:	b29b      	uxth	r3, r3
    8808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    880c:	b29a      	uxth	r2, r3
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	805a      	strh	r2, [r3, #2]
    8812:	e010      	b.n	8836 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    8814:	687b      	ldr	r3, [r7, #4]
    8816:	689b      	ldr	r3, [r3, #8]
    8818:	781b      	ldrb	r3, [r3, #0]
    881a:	4619      	mov	r1, r3
    881c:	68f8      	ldr	r0, [r7, #12]
    881e:	4b38      	ldr	r3, [pc, #224]	; (8900 <_sercom_i2c_sync_analyse_flags+0x21c>)
    8820:	4798      	blx	r3
				msg->buffer++;
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	689b      	ldr	r3, [r3, #8]
    8826:	1c5a      	adds	r2, r3, #1
    8828:	687b      	ldr	r3, [r7, #4]
    882a:	609a      	str	r2, [r3, #8]
				msg->len--;
    882c:	687b      	ldr	r3, [r7, #4]
    882e:	685b      	ldr	r3, [r3, #4]
    8830:	1e5a      	subs	r2, r3, #1
    8832:	687b      	ldr	r3, [r7, #4]
    8834:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    8836:	2300      	movs	r3, #0
    8838:	e051      	b.n	88de <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    883a:	68bb      	ldr	r3, [r7, #8]
    883c:	f003 0302 	and.w	r3, r3, #2
    8840:	2b00      	cmp	r3, #0
    8842:	d04b      	beq.n	88dc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    8844:	687b      	ldr	r3, [r7, #4]
    8846:	685b      	ldr	r3, [r3, #4]
    8848:	2b00      	cmp	r3, #0
    884a:	d041      	beq.n	88d0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    884c:	8a7b      	ldrh	r3, [r7, #18]
    884e:	f003 0304 	and.w	r3, r3, #4
    8852:	2b00      	cmp	r3, #0
    8854:	d13c      	bne.n	88d0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    8856:	687b      	ldr	r3, [r7, #4]
    8858:	685b      	ldr	r3, [r3, #4]
    885a:	1e5a      	subs	r2, r3, #1
    885c:	687b      	ldr	r3, [r7, #4]
    885e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    8860:	687b      	ldr	r3, [r7, #4]
    8862:	685b      	ldr	r3, [r3, #4]
    8864:	2b00      	cmp	r3, #0
    8866:	d102      	bne.n	886e <_sercom_i2c_sync_analyse_flags+0x18a>
    8868:	697b      	ldr	r3, [r7, #20]
    886a:	2b00      	cmp	r3, #0
    886c:	d006      	beq.n	887c <_sercom_i2c_sync_analyse_flags+0x198>
    886e:	687b      	ldr	r3, [r7, #4]
    8870:	685b      	ldr	r3, [r3, #4]
    8872:	2b01      	cmp	r3, #1
    8874:	d105      	bne.n	8882 <_sercom_i2c_sync_analyse_flags+0x19e>
    8876:	697b      	ldr	r3, [r7, #20]
    8878:	2b00      	cmp	r3, #0
    887a:	d002      	beq.n	8882 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    887c:	68f8      	ldr	r0, [r7, #12]
    887e:	4b21      	ldr	r3, [pc, #132]	; (8904 <_sercom_i2c_sync_analyse_flags+0x220>)
    8880:	4798      	blx	r3
			}

			if (msg->len == 0) {
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	685b      	ldr	r3, [r3, #4]
    8886:	2b00      	cmp	r3, #0
    8888:	d113      	bne.n	88b2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    888a:	687b      	ldr	r3, [r7, #4]
    888c:	885b      	ldrh	r3, [r3, #2]
    888e:	b29b      	uxth	r3, r3
    8890:	b21b      	sxth	r3, r3
    8892:	2b00      	cmp	r3, #0
    8894:	da05      	bge.n	88a2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    8896:	68f8      	ldr	r0, [r7, #12]
    8898:	4b1b      	ldr	r3, [pc, #108]	; (8908 <_sercom_i2c_sync_analyse_flags+0x224>)
    889a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    889c:	68f8      	ldr	r0, [r7, #12]
    889e:	4b15      	ldr	r3, [pc, #84]	; (88f4 <_sercom_i2c_sync_analyse_flags+0x210>)
    88a0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    88a2:	687b      	ldr	r3, [r7, #4]
    88a4:	885b      	ldrh	r3, [r3, #2]
    88a6:	b29b      	uxth	r3, r3
    88a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    88ac:	b29a      	uxth	r2, r3
    88ae:	687b      	ldr	r3, [r7, #4]
    88b0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    88b2:	687b      	ldr	r3, [r7, #4]
    88b4:	689c      	ldr	r4, [r3, #8]
    88b6:	1c62      	adds	r2, r4, #1
    88b8:	687b      	ldr	r3, [r7, #4]
    88ba:	609a      	str	r2, [r3, #8]
    88bc:	68f8      	ldr	r0, [r7, #12]
    88be:	4b13      	ldr	r3, [pc, #76]	; (890c <_sercom_i2c_sync_analyse_flags+0x228>)
    88c0:	4798      	blx	r3
    88c2:	4603      	mov	r3, r0
    88c4:	b2db      	uxtb	r3, r3
    88c6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    88c8:	68f8      	ldr	r0, [r7, #12]
    88ca:	4b11      	ldr	r3, [pc, #68]	; (8910 <_sercom_i2c_sync_analyse_flags+0x22c>)
    88cc:	4798      	blx	r3
    88ce:	e005      	b.n	88dc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    88d0:	68f8      	ldr	r0, [r7, #12]
    88d2:	4b0f      	ldr	r3, [pc, #60]	; (8910 <_sercom_i2c_sync_analyse_flags+0x22c>)
    88d4:	4798      	blx	r3
			return I2C_NACK;
    88d6:	f06f 0301 	mvn.w	r3, #1
    88da:	e000      	b.n	88de <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    88dc:	2300      	movs	r3, #0
}
    88de:	4618      	mov	r0, r3
    88e0:	371c      	adds	r7, #28
    88e2:	46bd      	mov	sp, r7
    88e4:	bd90      	pop	{r4, r7, pc}
    88e6:	bf00      	nop
    88e8:	000081d5 	.word	0x000081d5
    88ec:	000085e1 	.word	0x000085e1
    88f0:	000080fd 	.word	0x000080fd
    88f4:	000086c9 	.word	0x000086c9
    88f8:	000084ed 	.word	0x000084ed
    88fc:	000084c9 	.word	0x000084c9
    8900:	00008529 	.word	0x00008529
    8904:	00008385 	.word	0x00008385
    8908:	0000835d 	.word	0x0000835d
    890c:	0000854d 	.word	0x0000854d
    8910:	00008117 	.word	0x00008117

00008914 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    8914:	b580      	push	{r7, lr}
    8916:	b082      	sub	sp, #8
    8918:	af00      	add	r7, sp, #0
    891a:	6078      	str	r0, [r7, #4]
    891c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    891e:	687b      	ldr	r3, [r7, #4]
    8920:	2b00      	cmp	r3, #0
    8922:	bf14      	ite	ne
    8924:	2301      	movne	r3, #1
    8926:	2300      	moveq	r3, #0
    8928:	b2db      	uxtb	r3, r3
    892a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    892e:	4908      	ldr	r1, [pc, #32]	; (8950 <_i2c_m_sync_init+0x3c>)
    8930:	4618      	mov	r0, r3
    8932:	4b08      	ldr	r3, [pc, #32]	; (8954 <_i2c_m_sync_init+0x40>)
    8934:	4798      	blx	r3

	i2c_dev->hw = hw;
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	683a      	ldr	r2, [r7, #0]
    893a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	6839      	ldr	r1, [r7, #0]
    8940:	4618      	mov	r0, r3
    8942:	4b05      	ldr	r3, [pc, #20]	; (8958 <_i2c_m_sync_init+0x44>)
    8944:	4798      	blx	r3
    8946:	4603      	mov	r3, r0
}
    8948:	4618      	mov	r0, r3
    894a:	3708      	adds	r7, #8
    894c:	46bd      	mov	sp, r7
    894e:	bd80      	pop	{r7, pc}
    8950:	000102a4 	.word	0x000102a4
    8954:	00005af5 	.word	0x00005af5
    8958:	00008c05 	.word	0x00008c05

0000895c <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    895c:	b580      	push	{r7, lr}
    895e:	b084      	sub	sp, #16
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
    8964:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    8966:	f64f 73ff 	movw	r3, #65535	; 0xffff
    896a:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    896c:	687b      	ldr	r3, [r7, #4]
    896e:	691b      	ldr	r3, [r3, #16]
    8970:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    8972:	68b8      	ldr	r0, [r7, #8]
    8974:	4b0f      	ldr	r3, [pc, #60]	; (89b4 <_sercom_i2c_sync_wait_bus+0x58>)
    8976:	4798      	blx	r3
    8978:	4603      	mov	r3, r0
    897a:	461a      	mov	r2, r3
    897c:	683b      	ldr	r3, [r7, #0]
    897e:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    8980:	68fb      	ldr	r3, [r7, #12]
    8982:	1e5a      	subs	r2, r3, #1
    8984:	60fa      	str	r2, [r7, #12]
    8986:	2b00      	cmp	r3, #0
    8988:	d102      	bne.n	8990 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    898a:	f06f 0304 	mvn.w	r3, #4
    898e:	e00c      	b.n	89aa <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    8990:	683b      	ldr	r3, [r7, #0]
    8992:	681b      	ldr	r3, [r3, #0]
    8994:	f003 0301 	and.w	r3, r3, #1
    8998:	2b00      	cmp	r3, #0
    899a:	d105      	bne.n	89a8 <_sercom_i2c_sync_wait_bus+0x4c>
    899c:	683b      	ldr	r3, [r7, #0]
    899e:	681b      	ldr	r3, [r3, #0]
    89a0:	f003 0302 	and.w	r3, r3, #2
    89a4:	2b00      	cmp	r3, #0
    89a6:	d0e4      	beq.n	8972 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    89a8:	2300      	movs	r3, #0
}
    89aa:	4618      	mov	r0, r3
    89ac:	3710      	adds	r7, #16
    89ae:	46bd      	mov	sp, r7
    89b0:	bd80      	pop	{r7, pc}
    89b2:	bf00      	nop
    89b4:	00008131 	.word	0x00008131

000089b8 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    89b8:	b590      	push	{r4, r7, lr}
    89ba:	b087      	sub	sp, #28
    89bc:	af00      	add	r7, sp, #0
    89be:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    89c0:	687b      	ldr	r3, [r7, #4]
    89c2:	691b      	ldr	r3, [r3, #16]
    89c4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    89c6:	687b      	ldr	r3, [r7, #4]
    89c8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    89ca:	6978      	ldr	r0, [r7, #20]
    89cc:	4b39      	ldr	r3, [pc, #228]	; (8ab4 <_sercom_i2c_sync_send_address+0xfc>)
    89ce:	4798      	blx	r3
    89d0:	4603      	mov	r3, r0
    89d2:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    89d4:	687b      	ldr	r3, [r7, #4]
    89d6:	2b00      	cmp	r3, #0
    89d8:	bf14      	ite	ne
    89da:	2301      	movne	r3, #1
    89dc:	2300      	moveq	r3, #0
    89de:	b2db      	uxtb	r3, r3
    89e0:	f240 52a5 	movw	r2, #1445	; 0x5a5
    89e4:	4934      	ldr	r1, [pc, #208]	; (8ab8 <_sercom_i2c_sync_send_address+0x100>)
    89e6:	4618      	mov	r0, r3
    89e8:	4b34      	ldr	r3, [pc, #208]	; (8abc <_sercom_i2c_sync_send_address+0x104>)
    89ea:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    89ec:	693b      	ldr	r3, [r7, #16]
    89ee:	685b      	ldr	r3, [r3, #4]
    89f0:	2b01      	cmp	r3, #1
    89f2:	d106      	bne.n	8a02 <_sercom_i2c_sync_send_address+0x4a>
    89f4:	68fb      	ldr	r3, [r7, #12]
    89f6:	2b00      	cmp	r3, #0
    89f8:	d003      	beq.n	8a02 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    89fa:	6978      	ldr	r0, [r7, #20]
    89fc:	4b30      	ldr	r3, [pc, #192]	; (8ac0 <_sercom_i2c_sync_send_address+0x108>)
    89fe:	4798      	blx	r3
    8a00:	e002      	b.n	8a08 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    8a02:	6978      	ldr	r0, [r7, #20]
    8a04:	4b2f      	ldr	r3, [pc, #188]	; (8ac4 <_sercom_i2c_sync_send_address+0x10c>)
    8a06:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    8a08:	693b      	ldr	r3, [r7, #16]
    8a0a:	881b      	ldrh	r3, [r3, #0]
    8a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8a10:	2b00      	cmp	r3, #0
    8a12:	d022      	beq.n	8a5a <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    8a14:	693b      	ldr	r3, [r7, #16]
    8a16:	885b      	ldrh	r3, [r3, #2]
    8a18:	b29b      	uxth	r3, r3
    8a1a:	f003 0301 	and.w	r3, r3, #1
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d007      	beq.n	8a32 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    8a22:	693b      	ldr	r3, [r7, #16]
    8a24:	885b      	ldrh	r3, [r3, #2]
    8a26:	b29b      	uxth	r3, r3
    8a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    8a2c:	b29a      	uxth	r2, r3
    8a2e:	693b      	ldr	r3, [r7, #16]
    8a30:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    8a32:	693b      	ldr	r3, [r7, #16]
    8a34:	881b      	ldrh	r3, [r3, #0]
    8a36:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8a38:	f240 74fe 	movw	r4, #2046	; 0x7fe
    8a3c:	401c      	ands	r4, r3
    8a3e:	6978      	ldr	r0, [r7, #20]
    8a40:	4b21      	ldr	r3, [pc, #132]	; (8ac8 <_sercom_i2c_sync_send_address+0x110>)
    8a42:	4798      	blx	r3
    8a44:	4603      	mov	r3, r0
    8a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8a4a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    8a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8a50:	4619      	mov	r1, r3
    8a52:	6978      	ldr	r0, [r7, #20]
    8a54:	4b1d      	ldr	r3, [pc, #116]	; (8acc <_sercom_i2c_sync_send_address+0x114>)
    8a56:	4798      	blx	r3
    8a58:	e01a      	b.n	8a90 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    8a5a:	693b      	ldr	r3, [r7, #16]
    8a5c:	881b      	ldrh	r3, [r3, #0]
    8a5e:	005b      	lsls	r3, r3, #1
    8a60:	b2db      	uxtb	r3, r3
    8a62:	693a      	ldr	r2, [r7, #16]
    8a64:	8852      	ldrh	r2, [r2, #2]
    8a66:	b292      	uxth	r2, r2
    8a68:	f002 0201 	and.w	r2, r2, #1
    8a6c:	2a00      	cmp	r2, #0
    8a6e:	bf14      	ite	ne
    8a70:	2201      	movne	r2, #1
    8a72:	2200      	moveq	r2, #0
    8a74:	b2d2      	uxtb	r2, r2
    8a76:	4313      	orrs	r3, r2
    8a78:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8a7a:	6978      	ldr	r0, [r7, #20]
    8a7c:	4b12      	ldr	r3, [pc, #72]	; (8ac8 <_sercom_i2c_sync_send_address+0x110>)
    8a7e:	4798      	blx	r3
    8a80:	4603      	mov	r3, r0
    8a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    8a86:	4323      	orrs	r3, r4
    8a88:	4619      	mov	r1, r3
    8a8a:	6978      	ldr	r0, [r7, #20]
    8a8c:	4b0f      	ldr	r3, [pc, #60]	; (8acc <_sercom_i2c_sync_send_address+0x114>)
    8a8e:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8a90:	f107 0308 	add.w	r3, r7, #8
    8a94:	4619      	mov	r1, r3
    8a96:	6878      	ldr	r0, [r7, #4]
    8a98:	4b0d      	ldr	r3, [pc, #52]	; (8ad0 <_sercom_i2c_sync_send_address+0x118>)
    8a9a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    8a9c:	68bb      	ldr	r3, [r7, #8]
    8a9e:	693a      	ldr	r2, [r7, #16]
    8aa0:	4619      	mov	r1, r3
    8aa2:	6978      	ldr	r0, [r7, #20]
    8aa4:	4b0b      	ldr	r3, [pc, #44]	; (8ad4 <_sercom_i2c_sync_send_address+0x11c>)
    8aa6:	4798      	blx	r3
    8aa8:	4603      	mov	r3, r0
}
    8aaa:	4618      	mov	r0, r3
    8aac:	371c      	adds	r7, #28
    8aae:	46bd      	mov	sp, r7
    8ab0:	bd90      	pop	{r4, r7, pc}
    8ab2:	bf00      	nop
    8ab4:	000081d5 	.word	0x000081d5
    8ab8:	000102a4 	.word	0x000102a4
    8abc:	00005af5 	.word	0x00005af5
    8ac0:	00008385 	.word	0x00008385
    8ac4:	000083ad 	.word	0x000083ad
    8ac8:	000084ed 	.word	0x000084ed
    8acc:	000084c9 	.word	0x000084c9
    8ad0:	0000895d 	.word	0x0000895d
    8ad4:	000086e5 	.word	0x000086e5

00008ad8 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    8ad8:	b580      	push	{r7, lr}
    8ada:	b086      	sub	sp, #24
    8adc:	af00      	add	r7, sp, #0
    8ade:	6078      	str	r0, [r7, #4]
    8ae0:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    8ae2:	687b      	ldr	r3, [r7, #4]
    8ae4:	691b      	ldr	r3, [r3, #16]
    8ae6:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    8ae8:	687b      	ldr	r3, [r7, #4]
    8aea:	2b00      	cmp	r3, #0
    8aec:	bf14      	ite	ne
    8aee:	2301      	movne	r3, #1
    8af0:	2300      	moveq	r3, #0
    8af2:	b2db      	uxtb	r3, r3
    8af4:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    8af8:	493b      	ldr	r1, [pc, #236]	; (8be8 <_i2c_m_sync_transfer+0x110>)
    8afa:	4618      	mov	r0, r3
    8afc:	4b3b      	ldr	r3, [pc, #236]	; (8bec <_i2c_m_sync_transfer+0x114>)
    8afe:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8b00:	687b      	ldr	r3, [r7, #4]
    8b02:	691b      	ldr	r3, [r3, #16]
    8b04:	2b00      	cmp	r3, #0
    8b06:	bf14      	ite	ne
    8b08:	2301      	movne	r3, #1
    8b0a:	2300      	moveq	r3, #0
    8b0c:	b2db      	uxtb	r3, r3
    8b0e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    8b12:	4935      	ldr	r1, [pc, #212]	; (8be8 <_i2c_m_sync_transfer+0x110>)
    8b14:	4618      	mov	r0, r3
    8b16:	4b35      	ldr	r3, [pc, #212]	; (8bec <_i2c_m_sync_transfer+0x114>)
    8b18:	4798      	blx	r3
	ASSERT(msg);
    8b1a:	683b      	ldr	r3, [r7, #0]
    8b1c:	2b00      	cmp	r3, #0
    8b1e:	bf14      	ite	ne
    8b20:	2301      	movne	r3, #1
    8b22:	2300      	moveq	r3, #0
    8b24:	b2db      	uxtb	r3, r3
    8b26:	f240 52d2 	movw	r2, #1490	; 0x5d2
    8b2a:	492f      	ldr	r1, [pc, #188]	; (8be8 <_i2c_m_sync_transfer+0x110>)
    8b2c:	4618      	mov	r0, r3
    8b2e:	4b2f      	ldr	r3, [pc, #188]	; (8bec <_i2c_m_sync_transfer+0x114>)
    8b30:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8b32:	687b      	ldr	r3, [r7, #4]
    8b34:	885b      	ldrh	r3, [r3, #2]
    8b36:	b29b      	uxth	r3, r3
    8b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8b3c:	2b00      	cmp	r3, #0
    8b3e:	d002      	beq.n	8b46 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    8b40:	f06f 0305 	mvn.w	r3, #5
    8b44:	e04c      	b.n	8be0 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    8b46:	683b      	ldr	r3, [r7, #0]
    8b48:	885b      	ldrh	r3, [r3, #2]
    8b4a:	b29b      	uxth	r3, r3
    8b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8b50:	b29a      	uxth	r2, r3
    8b52:	683b      	ldr	r3, [r7, #0]
    8b54:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    8b56:	687b      	ldr	r3, [r7, #4]
    8b58:	683a      	ldr	r2, [r7, #0]
    8b5a:	ca07      	ldmia	r2, {r0, r1, r2}
    8b5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    8b60:	6938      	ldr	r0, [r7, #16]
    8b62:	4b23      	ldr	r3, [pc, #140]	; (8bf0 <_i2c_m_sync_transfer+0x118>)
    8b64:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    8b66:	6878      	ldr	r0, [r7, #4]
    8b68:	4b22      	ldr	r3, [pc, #136]	; (8bf4 <_i2c_m_sync_transfer+0x11c>)
    8b6a:	4798      	blx	r3
    8b6c:	6178      	str	r0, [r7, #20]

	if (ret) {
    8b6e:	697b      	ldr	r3, [r7, #20]
    8b70:	2b00      	cmp	r3, #0
    8b72:	d02d      	beq.n	8bd0 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	885b      	ldrh	r3, [r3, #2]
    8b78:	b29b      	uxth	r3, r3
    8b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8b7e:	b29a      	uxth	r2, r3
    8b80:	687b      	ldr	r3, [r7, #4]
    8b82:	805a      	strh	r2, [r3, #2]

		return ret;
    8b84:	697b      	ldr	r3, [r7, #20]
    8b86:	e02b      	b.n	8be0 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8b88:	f107 030c 	add.w	r3, r7, #12
    8b8c:	4619      	mov	r1, r3
    8b8e:	6878      	ldr	r0, [r7, #4]
    8b90:	4b19      	ldr	r3, [pc, #100]	; (8bf8 <_i2c_m_sync_transfer+0x120>)
    8b92:	4798      	blx	r3
    8b94:	6178      	str	r0, [r7, #20]

		if (ret) {
    8b96:	697b      	ldr	r3, [r7, #20]
    8b98:	2b00      	cmp	r3, #0
    8b9a:	d012      	beq.n	8bc2 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    8b9c:	683b      	ldr	r3, [r7, #0]
    8b9e:	885b      	ldrh	r3, [r3, #2]
    8ba0:	b29b      	uxth	r3, r3
    8ba2:	b21b      	sxth	r3, r3
    8ba4:	2b00      	cmp	r3, #0
    8ba6:	da02      	bge.n	8bae <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    8ba8:	6938      	ldr	r0, [r7, #16]
    8baa:	4b14      	ldr	r3, [pc, #80]	; (8bfc <_i2c_m_sync_transfer+0x124>)
    8bac:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8bae:	687b      	ldr	r3, [r7, #4]
    8bb0:	885b      	ldrh	r3, [r3, #2]
    8bb2:	b29b      	uxth	r3, r3
    8bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8bb8:	b29a      	uxth	r2, r3
    8bba:	687b      	ldr	r3, [r7, #4]
    8bbc:	805a      	strh	r2, [r3, #2]

			return ret;
    8bbe:	697b      	ldr	r3, [r7, #20]
    8bc0:	e00e      	b.n	8be0 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    8bc2:	68fb      	ldr	r3, [r7, #12]
    8bc4:	687a      	ldr	r2, [r7, #4]
    8bc6:	4619      	mov	r1, r3
    8bc8:	6938      	ldr	r0, [r7, #16]
    8bca:	4b0d      	ldr	r3, [pc, #52]	; (8c00 <_i2c_m_sync_transfer+0x128>)
    8bcc:	4798      	blx	r3
    8bce:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8bd0:	687b      	ldr	r3, [r7, #4]
    8bd2:	885b      	ldrh	r3, [r3, #2]
    8bd4:	b29b      	uxth	r3, r3
    8bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8bda:	2b00      	cmp	r3, #0
    8bdc:	d1d4      	bne.n	8b88 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    8bde:	697b      	ldr	r3, [r7, #20]
}
    8be0:	4618      	mov	r0, r3
    8be2:	3718      	adds	r7, #24
    8be4:	46bd      	mov	sp, r7
    8be6:	bd80      	pop	{r7, pc}
    8be8:	000102a4 	.word	0x000102a4
    8bec:	00005af5 	.word	0x00005af5
    8bf0:	00008335 	.word	0x00008335
    8bf4:	000089b9 	.word	0x000089b9
    8bf8:	0000895d 	.word	0x0000895d
    8bfc:	000086c9 	.word	0x000086c9
    8c00:	000086e5 	.word	0x000086e5

00008c04 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    8c04:	b580      	push	{r7, lr}
    8c06:	b084      	sub	sp, #16
    8c08:	af00      	add	r7, sp, #0
    8c0a:	6078      	str	r0, [r7, #4]
    8c0c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    8c0e:	6838      	ldr	r0, [r7, #0]
    8c10:	4b42      	ldr	r3, [pc, #264]	; (8d1c <_i2c_m_sync_init_impl+0x118>)
    8c12:	4798      	blx	r3
    8c14:	4603      	mov	r3, r0
    8c16:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    8c18:	2101      	movs	r1, #1
    8c1a:	6838      	ldr	r0, [r7, #0]
    8c1c:	4b40      	ldr	r3, [pc, #256]	; (8d20 <_i2c_m_sync_init_impl+0x11c>)
    8c1e:	4798      	blx	r3
    8c20:	4603      	mov	r3, r0
    8c22:	f083 0301 	eor.w	r3, r3, #1
    8c26:	b2db      	uxtb	r3, r3
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d020      	beq.n	8c6e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    8c2c:	7bfa      	ldrb	r2, [r7, #15]
    8c2e:	493d      	ldr	r1, [pc, #244]	; (8d24 <_i2c_m_sync_init_impl+0x120>)
    8c30:	4613      	mov	r3, r2
    8c32:	005b      	lsls	r3, r3, #1
    8c34:	4413      	add	r3, r2
    8c36:	00db      	lsls	r3, r3, #3
    8c38:	440b      	add	r3, r1
    8c3a:	3304      	adds	r3, #4
    8c3c:	681b      	ldr	r3, [r3, #0]
    8c3e:	f003 031c 	and.w	r3, r3, #28
    8c42:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    8c44:	2102      	movs	r1, #2
    8c46:	6838      	ldr	r0, [r7, #0]
    8c48:	4b37      	ldr	r3, [pc, #220]	; (8d28 <_i2c_m_sync_init_impl+0x124>)
    8c4a:	4798      	blx	r3
    8c4c:	4603      	mov	r3, r0
    8c4e:	2b00      	cmp	r3, #0
    8c50:	d006      	beq.n	8c60 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    8c52:	6838      	ldr	r0, [r7, #0]
    8c54:	4b35      	ldr	r3, [pc, #212]	; (8d2c <_i2c_m_sync_init_impl+0x128>)
    8c56:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    8c58:	2102      	movs	r1, #2
    8c5a:	6838      	ldr	r0, [r7, #0]
    8c5c:	4b34      	ldr	r3, [pc, #208]	; (8d30 <_i2c_m_sync_init_impl+0x12c>)
    8c5e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    8c60:	68bb      	ldr	r3, [r7, #8]
    8c62:	f043 0301 	orr.w	r3, r3, #1
    8c66:	4619      	mov	r1, r3
    8c68:	6838      	ldr	r0, [r7, #0]
    8c6a:	4b32      	ldr	r3, [pc, #200]	; (8d34 <_i2c_m_sync_init_impl+0x130>)
    8c6c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    8c6e:	2101      	movs	r1, #1
    8c70:	6838      	ldr	r0, [r7, #0]
    8c72:	4b2f      	ldr	r3, [pc, #188]	; (8d30 <_i2c_m_sync_init_impl+0x12c>)
    8c74:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    8c76:	7bfa      	ldrb	r2, [r7, #15]
    8c78:	492a      	ldr	r1, [pc, #168]	; (8d24 <_i2c_m_sync_init_impl+0x120>)
    8c7a:	4613      	mov	r3, r2
    8c7c:	005b      	lsls	r3, r3, #1
    8c7e:	4413      	add	r3, r2
    8c80:	00db      	lsls	r3, r3, #3
    8c82:	440b      	add	r3, r1
    8c84:	3304      	adds	r3, #4
    8c86:	681b      	ldr	r3, [r3, #0]
    8c88:	4619      	mov	r1, r3
    8c8a:	6838      	ldr	r0, [r7, #0]
    8c8c:	4b29      	ldr	r3, [pc, #164]	; (8d34 <_i2c_m_sync_init_impl+0x130>)
    8c8e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    8c90:	7bfa      	ldrb	r2, [r7, #15]
    8c92:	4924      	ldr	r1, [pc, #144]	; (8d24 <_i2c_m_sync_init_impl+0x120>)
    8c94:	4613      	mov	r3, r2
    8c96:	005b      	lsls	r3, r3, #1
    8c98:	4413      	add	r3, r2
    8c9a:	00db      	lsls	r3, r3, #3
    8c9c:	440b      	add	r3, r1
    8c9e:	3308      	adds	r3, #8
    8ca0:	681b      	ldr	r3, [r3, #0]
    8ca2:	4619      	mov	r1, r3
    8ca4:	6838      	ldr	r0, [r7, #0]
    8ca6:	4b24      	ldr	r3, [pc, #144]	; (8d38 <_i2c_m_sync_init_impl+0x134>)
    8ca8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    8caa:	7bfa      	ldrb	r2, [r7, #15]
    8cac:	491d      	ldr	r1, [pc, #116]	; (8d24 <_i2c_m_sync_init_impl+0x120>)
    8cae:	4613      	mov	r3, r2
    8cb0:	005b      	lsls	r3, r3, #1
    8cb2:	4413      	add	r3, r2
    8cb4:	00db      	lsls	r3, r3, #3
    8cb6:	440b      	add	r3, r1
    8cb8:	330c      	adds	r3, #12
    8cba:	681b      	ldr	r3, [r3, #0]
    8cbc:	4619      	mov	r1, r3
    8cbe:	6838      	ldr	r0, [r7, #0]
    8cc0:	4b1e      	ldr	r3, [pc, #120]	; (8d3c <_i2c_m_sync_init_impl+0x138>)
    8cc2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    8cc4:	7bfa      	ldrb	r2, [r7, #15]
    8cc6:	4917      	ldr	r1, [pc, #92]	; (8d24 <_i2c_m_sync_init_impl+0x120>)
    8cc8:	4613      	mov	r3, r2
    8cca:	005b      	lsls	r3, r3, #1
    8ccc:	4413      	add	r3, r2
    8cce:	00db      	lsls	r3, r3, #3
    8cd0:	440b      	add	r3, r1
    8cd2:	3304      	adds	r3, #4
    8cd4:	681b      	ldr	r3, [r3, #0]
    8cd6:	0e1b      	lsrs	r3, r3, #24
    8cd8:	b29b      	uxth	r3, r3
    8cda:	f003 0303 	and.w	r3, r3, #3
    8cde:	b29a      	uxth	r2, r3
    8ce0:	687b      	ldr	r3, [r7, #4]
    8ce2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    8ce4:	687b      	ldr	r3, [r7, #4]
    8ce6:	899b      	ldrh	r3, [r3, #12]
    8ce8:	2b01      	cmp	r3, #1
    8cea:	bf8c      	ite	hi
    8cec:	2301      	movhi	r3, #1
    8cee:	2300      	movls	r3, #0
    8cf0:	b2db      	uxtb	r3, r3
    8cf2:	4619      	mov	r1, r3
    8cf4:	6838      	ldr	r0, [r7, #0]
    8cf6:	4b12      	ldr	r3, [pc, #72]	; (8d40 <_i2c_m_sync_init_impl+0x13c>)
    8cf8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    8cfa:	7bfa      	ldrb	r2, [r7, #15]
    8cfc:	4909      	ldr	r1, [pc, #36]	; (8d24 <_i2c_m_sync_init_impl+0x120>)
    8cfe:	4613      	mov	r3, r2
    8d00:	005b      	lsls	r3, r3, #1
    8d02:	4413      	add	r3, r2
    8d04:	00db      	lsls	r3, r3, #3
    8d06:	440b      	add	r3, r1
    8d08:	3312      	adds	r3, #18
    8d0a:	881a      	ldrh	r2, [r3, #0]
    8d0c:	687b      	ldr	r3, [r7, #4]
    8d0e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    8d10:	2300      	movs	r3, #0
}
    8d12:	4618      	mov	r0, r3
    8d14:	3710      	adds	r7, #16
    8d16:	46bd      	mov	sp, r7
    8d18:	bd80      	pop	{r7, pc}
    8d1a:	bf00      	nop
    8d1c:	00008661 	.word	0x00008661
    8d20:	00008089 	.word	0x00008089
    8d24:	20000018 	.word	0x20000018
    8d28:	00008205 	.word	0x00008205
    8d2c:	000081ad 	.word	0x000081ad
    8d30:	00008065 	.word	0x00008065
    8d34:	00008235 	.word	0x00008235
    8d38:	00008405 	.word	0x00008405
    8d3c:	0000844d 	.word	0x0000844d
    8d40:	00008489 	.word	0x00008489

00008d44 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    8d44:	b580      	push	{r7, lr}
    8d46:	b082      	sub	sp, #8
    8d48:	af00      	add	r7, sp, #0
    8d4a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8d4c:	2101      	movs	r1, #1
    8d4e:	6878      	ldr	r0, [r7, #4]
    8d50:	4b07      	ldr	r3, [pc, #28]	; (8d70 <_spi_sync_enable+0x2c>)
    8d52:	4798      	blx	r3
    8d54:	4603      	mov	r3, r0
    8d56:	2b00      	cmp	r3, #0
    8d58:	d002      	beq.n	8d60 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    8d5a:	f06f 0303 	mvn.w	r3, #3
    8d5e:	e003      	b.n	8d68 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    8d60:	6878      	ldr	r0, [r7, #4]
    8d62:	4b04      	ldr	r3, [pc, #16]	; (8d74 <_spi_sync_enable+0x30>)
    8d64:	4798      	blx	r3

	return ERR_NONE;
    8d66:	2300      	movs	r3, #0
}
    8d68:	4618      	mov	r0, r3
    8d6a:	3708      	adds	r7, #8
    8d6c:	46bd      	mov	sp, r7
    8d6e:	bd80      	pop	{r7, pc}
    8d70:	000080d5 	.word	0x000080d5
    8d74:	00008259 	.word	0x00008259

00008d78 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    8d78:	b580      	push	{r7, lr}
    8d7a:	b082      	sub	sp, #8
    8d7c:	af00      	add	r7, sp, #0
    8d7e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8d80:	2101      	movs	r1, #1
    8d82:	6878      	ldr	r0, [r7, #4]
    8d84:	4b07      	ldr	r3, [pc, #28]	; (8da4 <_spi_sync_disable+0x2c>)
    8d86:	4798      	blx	r3
    8d88:	4603      	mov	r3, r0
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	d002      	beq.n	8d94 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    8d8e:	f06f 0303 	mvn.w	r3, #3
    8d92:	e003      	b.n	8d9c <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8d94:	6878      	ldr	r0, [r7, #4]
    8d96:	4b04      	ldr	r3, [pc, #16]	; (8da8 <_spi_sync_disable+0x30>)
    8d98:	4798      	blx	r3

	return ERR_NONE;
    8d9a:	2300      	movs	r3, #0
}
    8d9c:	4618      	mov	r0, r3
    8d9e:	3708      	adds	r7, #8
    8da0:	46bd      	mov	sp, r7
    8da2:	bd80      	pop	{r7, pc}
    8da4:	000080d5 	.word	0x000080d5
    8da8:	000082b9 	.word	0x000082b9

00008dac <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8dac:	b580      	push	{r7, lr}
    8dae:	b082      	sub	sp, #8
    8db0:	af00      	add	r7, sp, #0
    8db2:	6078      	str	r0, [r7, #4]
    8db4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8db6:	687b      	ldr	r3, [r7, #4]
    8db8:	2b00      	cmp	r3, #0
    8dba:	d004      	beq.n	8dc6 <_spi_load_regs_master+0x1a>
    8dbc:	683b      	ldr	r3, [r7, #0]
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d001      	beq.n	8dc6 <_spi_load_regs_master+0x1a>
    8dc2:	2301      	movs	r3, #1
    8dc4:	e000      	b.n	8dc8 <_spi_load_regs_master+0x1c>
    8dc6:	2300      	movs	r3, #0
    8dc8:	f003 0301 	and.w	r3, r3, #1
    8dcc:	b2db      	uxtb	r3, r3
    8dce:	f640 1209 	movw	r2, #2313	; 0x909
    8dd2:	4915      	ldr	r1, [pc, #84]	; (8e28 <_spi_load_regs_master+0x7c>)
    8dd4:	4618      	mov	r0, r3
    8dd6:	4b15      	ldr	r3, [pc, #84]	; (8e2c <_spi_load_regs_master+0x80>)
    8dd8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8dda:	683b      	ldr	r3, [r7, #0]
    8ddc:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8dde:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8de2:	f023 0301 	bic.w	r3, r3, #1
    8de6:	4619      	mov	r1, r3
    8de8:	6878      	ldr	r0, [r7, #4]
    8dea:	4b11      	ldr	r3, [pc, #68]	; (8e30 <_spi_load_regs_master+0x84>)
    8dec:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    8dee:	683b      	ldr	r3, [r7, #0]
    8df0:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    8df2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    8df6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    8dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8dfe:	4619      	mov	r1, r3
    8e00:	6878      	ldr	r0, [r7, #4]
    8e02:	4b0c      	ldr	r3, [pc, #48]	; (8e34 <_spi_load_regs_master+0x88>)
    8e04:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8e06:	683b      	ldr	r3, [r7, #0]
    8e08:	7b1b      	ldrb	r3, [r3, #12]
    8e0a:	4619      	mov	r1, r3
    8e0c:	6878      	ldr	r0, [r7, #4]
    8e0e:	4b0a      	ldr	r3, [pc, #40]	; (8e38 <_spi_load_regs_master+0x8c>)
    8e10:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8e12:	683b      	ldr	r3, [r7, #0]
    8e14:	7b5b      	ldrb	r3, [r3, #13]
    8e16:	4619      	mov	r1, r3
    8e18:	6878      	ldr	r0, [r7, #4]
    8e1a:	4b08      	ldr	r3, [pc, #32]	; (8e3c <_spi_load_regs_master+0x90>)
    8e1c:	4798      	blx	r3
}
    8e1e:	bf00      	nop
    8e20:	3708      	adds	r7, #8
    8e22:	46bd      	mov	sp, r7
    8e24:	bd80      	pop	{r7, pc}
    8e26:	bf00      	nop
    8e28:	000102a4 	.word	0x000102a4
    8e2c:	00005af5 	.word	0x00005af5
    8e30:	00008311 	.word	0x00008311
    8e34:	00008429 	.word	0x00008429
    8e38:	00008469 	.word	0x00008469
    8e3c:	000085a1 	.word	0x000085a1

00008e40 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8e40:	b580      	push	{r7, lr}
    8e42:	b082      	sub	sp, #8
    8e44:	af00      	add	r7, sp, #0
    8e46:	6078      	str	r0, [r7, #4]
    8e48:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8e4a:	687b      	ldr	r3, [r7, #4]
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d004      	beq.n	8e5a <_spi_load_regs_slave+0x1a>
    8e50:	683b      	ldr	r3, [r7, #0]
    8e52:	2b00      	cmp	r3, #0
    8e54:	d001      	beq.n	8e5a <_spi_load_regs_slave+0x1a>
    8e56:	2301      	movs	r3, #1
    8e58:	e000      	b.n	8e5c <_spi_load_regs_slave+0x1c>
    8e5a:	2300      	movs	r3, #0
    8e5c:	f003 0301 	and.w	r3, r3, #1
    8e60:	b2db      	uxtb	r3, r3
    8e62:	f640 121d 	movw	r2, #2333	; 0x91d
    8e66:	491a      	ldr	r1, [pc, #104]	; (8ed0 <_spi_load_regs_slave+0x90>)
    8e68:	4618      	mov	r0, r3
    8e6a:	4b1a      	ldr	r3, [pc, #104]	; (8ed4 <_spi_load_regs_slave+0x94>)
    8e6c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8e6e:	683b      	ldr	r3, [r7, #0]
    8e70:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8e72:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8e76:	f023 0301 	bic.w	r3, r3, #1
    8e7a:	4619      	mov	r1, r3
    8e7c:	6878      	ldr	r0, [r7, #4]
    8e7e:	4b16      	ldr	r3, [pc, #88]	; (8ed8 <_spi_load_regs_slave+0x98>)
    8e80:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8e82:	683b      	ldr	r3, [r7, #0]
    8e84:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    8e86:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    8e8a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8e92:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    8e96:	4619      	mov	r1, r3
    8e98:	6878      	ldr	r0, [r7, #4]
    8e9a:	4b10      	ldr	r3, [pc, #64]	; (8edc <_spi_load_regs_slave+0x9c>)
    8e9c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8e9e:	683b      	ldr	r3, [r7, #0]
    8ea0:	689b      	ldr	r3, [r3, #8]
    8ea2:	4619      	mov	r1, r3
    8ea4:	6878      	ldr	r0, [r7, #4]
    8ea6:	4b0e      	ldr	r3, [pc, #56]	; (8ee0 <_spi_load_regs_slave+0xa0>)
    8ea8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8eaa:	683b      	ldr	r3, [r7, #0]
    8eac:	7b5b      	ldrb	r3, [r3, #13]
    8eae:	4619      	mov	r1, r3
    8eb0:	6878      	ldr	r0, [r7, #4]
    8eb2:	4b0c      	ldr	r3, [pc, #48]	; (8ee4 <_spi_load_regs_slave+0xa4>)
    8eb4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    8eb6:	bf00      	nop
    8eb8:	f04f 31ff 	mov.w	r1, #4294967295
    8ebc:	6878      	ldr	r0, [r7, #4]
    8ebe:	4b0a      	ldr	r3, [pc, #40]	; (8ee8 <_spi_load_regs_slave+0xa8>)
    8ec0:	4798      	blx	r3
    8ec2:	4603      	mov	r3, r0
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d1f7      	bne.n	8eb8 <_spi_load_regs_slave+0x78>
		;
}
    8ec8:	bf00      	nop
    8eca:	3708      	adds	r7, #8
    8ecc:	46bd      	mov	sp, r7
    8ece:	bd80      	pop	{r7, pc}
    8ed0:	000102a4 	.word	0x000102a4
    8ed4:	00005af5 	.word	0x00005af5
    8ed8:	00008311 	.word	0x00008311
    8edc:	00008429 	.word	0x00008429
    8ee0:	0000850d 	.word	0x0000850d
    8ee4:	000085a1 	.word	0x000085a1
    8ee8:	000080d5 	.word	0x000080d5

00008eec <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    8eec:	b580      	push	{r7, lr}
    8eee:	b084      	sub	sp, #16
    8ef0:	af00      	add	r7, sp, #0
    8ef2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8ef4:	687b      	ldr	r3, [r7, #4]
    8ef6:	4618      	mov	r0, r3
    8ef8:	4b11      	ldr	r3, [pc, #68]	; (8f40 <_spi_get_regs+0x54>)
    8efa:	4798      	blx	r3
    8efc:	4603      	mov	r3, r0
    8efe:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8f00:	2300      	movs	r3, #0
    8f02:	73fb      	strb	r3, [r7, #15]
    8f04:	e014      	b.n	8f30 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    8f06:	7bfa      	ldrb	r2, [r7, #15]
    8f08:	490e      	ldr	r1, [pc, #56]	; (8f44 <_spi_get_regs+0x58>)
    8f0a:	4613      	mov	r3, r2
    8f0c:	011b      	lsls	r3, r3, #4
    8f0e:	4413      	add	r3, r2
    8f10:	440b      	add	r3, r1
    8f12:	3310      	adds	r3, #16
    8f14:	781b      	ldrb	r3, [r3, #0]
    8f16:	7bba      	ldrb	r2, [r7, #14]
    8f18:	429a      	cmp	r2, r3
    8f1a:	d106      	bne.n	8f2a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    8f1c:	7bfa      	ldrb	r2, [r7, #15]
    8f1e:	4613      	mov	r3, r2
    8f20:	011b      	lsls	r3, r3, #4
    8f22:	4413      	add	r3, r2
    8f24:	4a07      	ldr	r2, [pc, #28]	; (8f44 <_spi_get_regs+0x58>)
    8f26:	4413      	add	r3, r2
    8f28:	e006      	b.n	8f38 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8f2a:	7bfb      	ldrb	r3, [r7, #15]
    8f2c:	3301      	adds	r3, #1
    8f2e:	73fb      	strb	r3, [r7, #15]
    8f30:	7bfb      	ldrb	r3, [r7, #15]
    8f32:	2b01      	cmp	r3, #1
    8f34:	d9e7      	bls.n	8f06 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    8f36:	2300      	movs	r3, #0
}
    8f38:	4618      	mov	r0, r3
    8f3a:	3710      	adds	r7, #16
    8f3c:	46bd      	mov	sp, r7
    8f3e:	bd80      	pop	{r7, pc}
    8f40:	00008605 	.word	0x00008605
    8f44:	000102e0 	.word	0x000102e0

00008f48 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    8f48:	b580      	push	{r7, lr}
    8f4a:	b084      	sub	sp, #16
    8f4c:	af00      	add	r7, sp, #0
    8f4e:	6078      	str	r0, [r7, #4]
    8f50:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    8f52:	683b      	ldr	r3, [r7, #0]
    8f54:	4618      	mov	r0, r3
    8f56:	4b35      	ldr	r3, [pc, #212]	; (902c <_spi_m_sync_init+0xe4>)
    8f58:	4798      	blx	r3
    8f5a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	2b00      	cmp	r3, #0
    8f60:	d004      	beq.n	8f6c <_spi_m_sync_init+0x24>
    8f62:	683b      	ldr	r3, [r7, #0]
    8f64:	2b00      	cmp	r3, #0
    8f66:	d001      	beq.n	8f6c <_spi_m_sync_init+0x24>
    8f68:	2301      	movs	r3, #1
    8f6a:	e000      	b.n	8f6e <_spi_m_sync_init+0x26>
    8f6c:	2300      	movs	r3, #0
    8f6e:	f003 0301 	and.w	r3, r3, #1
    8f72:	b2db      	uxtb	r3, r3
    8f74:	f640 123f 	movw	r2, #2367	; 0x93f
    8f78:	492d      	ldr	r1, [pc, #180]	; (9030 <_spi_m_sync_init+0xe8>)
    8f7a:	4618      	mov	r0, r3
    8f7c:	4b2d      	ldr	r3, [pc, #180]	; (9034 <_spi_m_sync_init+0xec>)
    8f7e:	4798      	blx	r3

	if (regs == NULL) {
    8f80:	68fb      	ldr	r3, [r7, #12]
    8f82:	2b00      	cmp	r3, #0
    8f84:	d102      	bne.n	8f8c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    8f86:	f06f 030c 	mvn.w	r3, #12
    8f8a:	e04a      	b.n	9022 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8f8c:	2101      	movs	r1, #1
    8f8e:	6838      	ldr	r0, [r7, #0]
    8f90:	4b29      	ldr	r3, [pc, #164]	; (9038 <_spi_m_sync_init+0xf0>)
    8f92:	4798      	blx	r3
    8f94:	4603      	mov	r3, r0
    8f96:	f083 0301 	eor.w	r3, r3, #1
    8f9a:	b2db      	uxtb	r3, r3
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d019      	beq.n	8fd4 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8fa0:	68fb      	ldr	r3, [r7, #12]
    8fa2:	681b      	ldr	r3, [r3, #0]
    8fa4:	f003 031c 	and.w	r3, r3, #28
    8fa8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8faa:	2102      	movs	r1, #2
    8fac:	6838      	ldr	r0, [r7, #0]
    8fae:	4b23      	ldr	r3, [pc, #140]	; (903c <_spi_m_sync_init+0xf4>)
    8fb0:	4798      	blx	r3
    8fb2:	4603      	mov	r3, r0
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	d006      	beq.n	8fc6 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8fb8:	6838      	ldr	r0, [r7, #0]
    8fba:	4b21      	ldr	r3, [pc, #132]	; (9040 <_spi_m_sync_init+0xf8>)
    8fbc:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    8fbe:	2102      	movs	r1, #2
    8fc0:	6838      	ldr	r0, [r7, #0]
    8fc2:	4b20      	ldr	r3, [pc, #128]	; (9044 <_spi_m_sync_init+0xfc>)
    8fc4:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8fc6:	68bb      	ldr	r3, [r7, #8]
    8fc8:	f043 0301 	orr.w	r3, r3, #1
    8fcc:	4619      	mov	r1, r3
    8fce:	6838      	ldr	r0, [r7, #0]
    8fd0:	4b1d      	ldr	r3, [pc, #116]	; (9048 <_spi_m_sync_init+0x100>)
    8fd2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8fd4:	2101      	movs	r1, #1
    8fd6:	6838      	ldr	r0, [r7, #0]
    8fd8:	4b1a      	ldr	r3, [pc, #104]	; (9044 <_spi_m_sync_init+0xfc>)
    8fda:	4798      	blx	r3

	dev->prvt = hw;
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	683a      	ldr	r2, [r7, #0]
    8fe0:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    8fe2:	68fb      	ldr	r3, [r7, #12]
    8fe4:	681b      	ldr	r3, [r3, #0]
    8fe6:	f003 031c 	and.w	r3, r3, #28
    8fea:	2b08      	cmp	r3, #8
    8fec:	d104      	bne.n	8ff8 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    8fee:	68f9      	ldr	r1, [r7, #12]
    8ff0:	6838      	ldr	r0, [r7, #0]
    8ff2:	4b16      	ldr	r3, [pc, #88]	; (904c <_spi_m_sync_init+0x104>)
    8ff4:	4798      	blx	r3
    8ff6:	e003      	b.n	9000 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    8ff8:	68f9      	ldr	r1, [r7, #12]
    8ffa:	6838      	ldr	r0, [r7, #0]
    8ffc:	4b14      	ldr	r3, [pc, #80]	; (9050 <_spi_m_sync_init+0x108>)
    8ffe:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    9000:	68fb      	ldr	r3, [r7, #12]
    9002:	685b      	ldr	r3, [r3, #4]
    9004:	f003 0307 	and.w	r3, r3, #7
    9008:	2b00      	cmp	r3, #0
    900a:	d101      	bne.n	9010 <_spi_m_sync_init+0xc8>
    900c:	2201      	movs	r2, #1
    900e:	e000      	b.n	9012 <_spi_m_sync_init+0xca>
    9010:	2202      	movs	r2, #2
    9012:	687b      	ldr	r3, [r7, #4]
    9014:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    9016:	68fb      	ldr	r3, [r7, #12]
    9018:	89db      	ldrh	r3, [r3, #14]
    901a:	b29a      	uxth	r2, r3
    901c:	687b      	ldr	r3, [r7, #4]
    901e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    9020:	2300      	movs	r3, #0
}
    9022:	4618      	mov	r0, r3
    9024:	3710      	adds	r7, #16
    9026:	46bd      	mov	sp, r7
    9028:	bd80      	pop	{r7, pc}
    902a:	bf00      	nop
    902c:	00008eed 	.word	0x00008eed
    9030:	000102a4 	.word	0x000102a4
    9034:	00005af5 	.word	0x00005af5
    9038:	000080d5 	.word	0x000080d5
    903c:	000082e1 	.word	0x000082e1
    9040:	000082b9 	.word	0x000082b9
    9044:	000080b1 	.word	0x000080b1
    9048:	00008311 	.word	0x00008311
    904c:	00008e41 	.word	0x00008e41
    9050:	00008dad 	.word	0x00008dad

00009054 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    9054:	b580      	push	{r7, lr}
    9056:	b082      	sub	sp, #8
    9058:	af00      	add	r7, sp, #0
    905a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	2b00      	cmp	r3, #0
    9060:	d005      	beq.n	906e <_spi_m_sync_enable+0x1a>
    9062:	687b      	ldr	r3, [r7, #4]
    9064:	681b      	ldr	r3, [r3, #0]
    9066:	2b00      	cmp	r3, #0
    9068:	d001      	beq.n	906e <_spi_m_sync_enable+0x1a>
    906a:	2301      	movs	r3, #1
    906c:	e000      	b.n	9070 <_spi_m_sync_enable+0x1c>
    906e:	2300      	movs	r3, #0
    9070:	f003 0301 	and.w	r3, r3, #1
    9074:	b2db      	uxtb	r3, r3
    9076:	f640 129e 	movw	r2, #2462	; 0x99e
    907a:	4907      	ldr	r1, [pc, #28]	; (9098 <_spi_m_sync_enable+0x44>)
    907c:	4618      	mov	r0, r3
    907e:	4b07      	ldr	r3, [pc, #28]	; (909c <_spi_m_sync_enable+0x48>)
    9080:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	681b      	ldr	r3, [r3, #0]
    9086:	4618      	mov	r0, r3
    9088:	4b05      	ldr	r3, [pc, #20]	; (90a0 <_spi_m_sync_enable+0x4c>)
    908a:	4798      	blx	r3
    908c:	4603      	mov	r3, r0
}
    908e:	4618      	mov	r0, r3
    9090:	3708      	adds	r7, #8
    9092:	46bd      	mov	sp, r7
    9094:	bd80      	pop	{r7, pc}
    9096:	bf00      	nop
    9098:	000102a4 	.word	0x000102a4
    909c:	00005af5 	.word	0x00005af5
    90a0:	00008d45 	.word	0x00008d45

000090a4 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    90a4:	b580      	push	{r7, lr}
    90a6:	b082      	sub	sp, #8
    90a8:	af00      	add	r7, sp, #0
    90aa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	2b00      	cmp	r3, #0
    90b0:	d005      	beq.n	90be <_spi_m_sync_disable+0x1a>
    90b2:	687b      	ldr	r3, [r7, #4]
    90b4:	681b      	ldr	r3, [r3, #0]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d001      	beq.n	90be <_spi_m_sync_disable+0x1a>
    90ba:	2301      	movs	r3, #1
    90bc:	e000      	b.n	90c0 <_spi_m_sync_disable+0x1c>
    90be:	2300      	movs	r3, #0
    90c0:	f003 0301 	and.w	r3, r3, #1
    90c4:	b2db      	uxtb	r3, r3
    90c6:	f640 12ba 	movw	r2, #2490	; 0x9ba
    90ca:	4907      	ldr	r1, [pc, #28]	; (90e8 <_spi_m_sync_disable+0x44>)
    90cc:	4618      	mov	r0, r3
    90ce:	4b07      	ldr	r3, [pc, #28]	; (90ec <_spi_m_sync_disable+0x48>)
    90d0:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	681b      	ldr	r3, [r3, #0]
    90d6:	4618      	mov	r0, r3
    90d8:	4b05      	ldr	r3, [pc, #20]	; (90f0 <_spi_m_sync_disable+0x4c>)
    90da:	4798      	blx	r3
    90dc:	4603      	mov	r3, r0
}
    90de:	4618      	mov	r0, r3
    90e0:	3708      	adds	r7, #8
    90e2:	46bd      	mov	sp, r7
    90e4:	bd80      	pop	{r7, pc}
    90e6:	bf00      	nop
    90e8:	000102a4 	.word	0x000102a4
    90ec:	00005af5 	.word	0x00005af5
    90f0:	00008d79 	.word	0x00008d79

000090f4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    90f4:	b580      	push	{r7, lr}
    90f6:	b082      	sub	sp, #8
    90f8:	af00      	add	r7, sp, #0
    90fa:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    90fc:	bf00      	nop
    90fe:	2103      	movs	r1, #3
    9100:	6878      	ldr	r0, [r7, #4]
    9102:	4b06      	ldr	r3, [pc, #24]	; (911c <_spi_wait_bus_idle+0x28>)
    9104:	4798      	blx	r3
    9106:	4603      	mov	r3, r0
    9108:	2b00      	cmp	r3, #0
    910a:	d0f8      	beq.n	90fe <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    910c:	2103      	movs	r1, #3
    910e:	6878      	ldr	r0, [r7, #4]
    9110:	4b03      	ldr	r3, [pc, #12]	; (9120 <_spi_wait_bus_idle+0x2c>)
    9112:	4798      	blx	r3
}
    9114:	bf00      	nop
    9116:	3708      	adds	r7, #8
    9118:	46bd      	mov	sp, r7
    911a:	bd80      	pop	{r7, pc}
    911c:	0000814b 	.word	0x0000814b
    9120:	0000818d 	.word	0x0000818d

00009124 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    9124:	b580      	push	{r7, lr}
    9126:	b086      	sub	sp, #24
    9128:	af00      	add	r7, sp, #0
    912a:	60f8      	str	r0, [r7, #12]
    912c:	60b9      	str	r1, [r7, #8]
    912e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    9130:	68bb      	ldr	r3, [r7, #8]
    9132:	f003 0304 	and.w	r3, r3, #4
    9136:	2b00      	cmp	r3, #0
    9138:	d101      	bne.n	913e <_spi_rx_check_and_receive+0x1a>
		return false;
    913a:	2300      	movs	r3, #0
    913c:	e022      	b.n	9184 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    913e:	68f8      	ldr	r0, [r7, #12]
    9140:	4b12      	ldr	r3, [pc, #72]	; (918c <_spi_rx_check_and_receive+0x68>)
    9142:	4798      	blx	r3
    9144:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    9146:	687b      	ldr	r3, [r7, #4]
    9148:	685b      	ldr	r3, [r3, #4]
    914a:	2b00      	cmp	r3, #0
    914c:	d014      	beq.n	9178 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    914e:	687b      	ldr	r3, [r7, #4]
    9150:	685b      	ldr	r3, [r3, #4]
    9152:	1c59      	adds	r1, r3, #1
    9154:	687a      	ldr	r2, [r7, #4]
    9156:	6051      	str	r1, [r2, #4]
    9158:	697a      	ldr	r2, [r7, #20]
    915a:	b2d2      	uxtb	r2, r2
    915c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    915e:	687b      	ldr	r3, [r7, #4]
    9160:	7c1b      	ldrb	r3, [r3, #16]
    9162:	2b01      	cmp	r3, #1
    9164:	d908      	bls.n	9178 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    9166:	687b      	ldr	r3, [r7, #4]
    9168:	685b      	ldr	r3, [r3, #4]
    916a:	1c59      	adds	r1, r3, #1
    916c:	687a      	ldr	r2, [r7, #4]
    916e:	6051      	str	r1, [r2, #4]
    9170:	697a      	ldr	r2, [r7, #20]
    9172:	0a12      	lsrs	r2, r2, #8
    9174:	b2d2      	uxtb	r2, r2
    9176:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	68db      	ldr	r3, [r3, #12]
    917c:	1c5a      	adds	r2, r3, #1
    917e:	687b      	ldr	r3, [r7, #4]
    9180:	60da      	str	r2, [r3, #12]

	return true;
    9182:	2301      	movs	r3, #1
}
    9184:	4618      	mov	r0, r3
    9186:	3718      	adds	r7, #24
    9188:	46bd      	mov	sp, r7
    918a:	bd80      	pop	{r7, pc}
    918c:	00008589 	.word	0x00008589

00009190 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    9190:	b580      	push	{r7, lr}
    9192:	b086      	sub	sp, #24
    9194:	af00      	add	r7, sp, #0
    9196:	60f8      	str	r0, [r7, #12]
    9198:	60b9      	str	r1, [r7, #8]
    919a:	607a      	str	r2, [r7, #4]
    919c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    919e:	68bb      	ldr	r3, [r7, #8]
    91a0:	f003 0301 	and.w	r3, r3, #1
    91a4:	2b00      	cmp	r3, #0
    91a6:	d028      	beq.n	91fa <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	681b      	ldr	r3, [r3, #0]
    91ac:	2b00      	cmp	r3, #0
    91ae:	d018      	beq.n	91e2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    91b0:	687b      	ldr	r3, [r7, #4]
    91b2:	681b      	ldr	r3, [r3, #0]
    91b4:	1c59      	adds	r1, r3, #1
    91b6:	687a      	ldr	r2, [r7, #4]
    91b8:	6011      	str	r1, [r2, #0]
    91ba:	781b      	ldrb	r3, [r3, #0]
    91bc:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    91be:	687b      	ldr	r3, [r7, #4]
    91c0:	7c1b      	ldrb	r3, [r3, #16]
    91c2:	2b01      	cmp	r3, #1
    91c4:	d90f      	bls.n	91e6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    91c6:	687b      	ldr	r3, [r7, #4]
    91c8:	681b      	ldr	r3, [r3, #0]
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	021b      	lsls	r3, r3, #8
    91ce:	461a      	mov	r2, r3
    91d0:	697b      	ldr	r3, [r7, #20]
    91d2:	4313      	orrs	r3, r2
    91d4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    91d6:	687b      	ldr	r3, [r7, #4]
    91d8:	681b      	ldr	r3, [r3, #0]
    91da:	1c5a      	adds	r2, r3, #1
    91dc:	687b      	ldr	r3, [r7, #4]
    91de:	601a      	str	r2, [r3, #0]
    91e0:	e001      	b.n	91e6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    91e2:	887b      	ldrh	r3, [r7, #2]
    91e4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    91e6:	687b      	ldr	r3, [r7, #4]
    91e8:	689b      	ldr	r3, [r3, #8]
    91ea:	1c5a      	adds	r2, r3, #1
    91ec:	687b      	ldr	r3, [r7, #4]
    91ee:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    91f0:	6979      	ldr	r1, [r7, #20]
    91f2:	68f8      	ldr	r0, [r7, #12]
    91f4:	4b03      	ldr	r3, [pc, #12]	; (9204 <_spi_tx_check_and_send+0x74>)
    91f6:	4798      	blx	r3
    91f8:	e000      	b.n	91fc <_spi_tx_check_and_send+0x6c>
		return;
    91fa:	bf00      	nop
}
    91fc:	3718      	adds	r7, #24
    91fe:	46bd      	mov	sp, r7
    9200:	bd80      	pop	{r7, pc}
    9202:	bf00      	nop
    9204:	0000856d 	.word	0x0000856d

00009208 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    9208:	b580      	push	{r7, lr}
    920a:	b082      	sub	sp, #8
    920c:	af00      	add	r7, sp, #0
    920e:	6078      	str	r0, [r7, #4]
    9210:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    9212:	687b      	ldr	r3, [r7, #4]
    9214:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9218:	2b00      	cmp	r3, #0
    921a:	d00b      	beq.n	9234 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    921c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9220:	6838      	ldr	r0, [r7, #0]
    9222:	4b07      	ldr	r3, [pc, #28]	; (9240 <_spi_err_check+0x38>)
    9224:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    9226:	2180      	movs	r1, #128	; 0x80
    9228:	6838      	ldr	r0, [r7, #0]
    922a:	4b06      	ldr	r3, [pc, #24]	; (9244 <_spi_err_check+0x3c>)
    922c:	4798      	blx	r3
		return ERR_OVERFLOW;
    922e:	f06f 0312 	mvn.w	r3, #18
    9232:	e000      	b.n	9236 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    9234:	2300      	movs	r3, #0
}
    9236:	4618      	mov	r0, r3
    9238:	3708      	adds	r7, #8
    923a:	46bd      	mov	sp, r7
    923c:	bd80      	pop	{r7, pc}
    923e:	bf00      	nop
    9240:	000085c1 	.word	0x000085c1
    9244:	0000818d 	.word	0x0000818d

00009248 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    9248:	b590      	push	{r4, r7, lr}
    924a:	b08b      	sub	sp, #44	; 0x2c
    924c:	af00      	add	r7, sp, #0
    924e:	6078      	str	r0, [r7, #4]
    9250:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	681b      	ldr	r3, [r3, #0]
    9256:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    9258:	2300      	movs	r3, #0
    925a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    925c:	683b      	ldr	r3, [r7, #0]
    925e:	681b      	ldr	r3, [r3, #0]
    9260:	60bb      	str	r3, [r7, #8]
    9262:	683b      	ldr	r3, [r7, #0]
    9264:	685b      	ldr	r3, [r3, #4]
    9266:	60fb      	str	r3, [r7, #12]
    9268:	2300      	movs	r3, #0
    926a:	613b      	str	r3, [r7, #16]
    926c:	2300      	movs	r3, #0
    926e:	617b      	str	r3, [r7, #20]
    9270:	687b      	ldr	r3, [r7, #4]
    9272:	791b      	ldrb	r3, [r3, #4]
    9274:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    9276:	687b      	ldr	r3, [r7, #4]
    9278:	2b00      	cmp	r3, #0
    927a:	d004      	beq.n	9286 <_spi_m_sync_trans+0x3e>
    927c:	6a3b      	ldr	r3, [r7, #32]
    927e:	2b00      	cmp	r3, #0
    9280:	d001      	beq.n	9286 <_spi_m_sync_trans+0x3e>
    9282:	2301      	movs	r3, #1
    9284:	e000      	b.n	9288 <_spi_m_sync_trans+0x40>
    9286:	2300      	movs	r3, #0
    9288:	f003 0301 	and.w	r3, r3, #1
    928c:	b2db      	uxtb	r3, r3
    928e:	f640 22a3 	movw	r2, #2723	; 0xaa3
    9292:	492b      	ldr	r1, [pc, #172]	; (9340 <_spi_m_sync_trans+0xf8>)
    9294:	4618      	mov	r0, r3
    9296:	4b2b      	ldr	r3, [pc, #172]	; (9344 <_spi_m_sync_trans+0xfc>)
    9298:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    929a:	2107      	movs	r1, #7
    929c:	6a38      	ldr	r0, [r7, #32]
    929e:	4b2a      	ldr	r3, [pc, #168]	; (9348 <_spi_m_sync_trans+0x100>)
    92a0:	4798      	blx	r3
    92a2:	4603      	mov	r3, r0
    92a4:	2b00      	cmp	r3, #0
    92a6:	d002      	beq.n	92ae <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    92a8:	f06f 0303 	mvn.w	r3, #3
    92ac:	e043      	b.n	9336 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    92ae:	6a38      	ldr	r0, [r7, #32]
    92b0:	4b26      	ldr	r3, [pc, #152]	; (934c <_spi_m_sync_trans+0x104>)
    92b2:	4798      	blx	r3
    92b4:	4603      	mov	r3, r0
    92b6:	f083 0301 	eor.w	r3, r3, #1
    92ba:	b2db      	uxtb	r3, r3
    92bc:	2b00      	cmp	r3, #0
    92be:	d002      	beq.n	92c6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    92c0:	f06f 0313 	mvn.w	r3, #19
    92c4:	e037      	b.n	9336 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    92c6:	6a38      	ldr	r0, [r7, #32]
    92c8:	4b21      	ldr	r3, [pc, #132]	; (9350 <_spi_m_sync_trans+0x108>)
    92ca:	4798      	blx	r3
    92cc:	4603      	mov	r3, r0
    92ce:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    92d0:	f107 0308 	add.w	r3, r7, #8
    92d4:	461a      	mov	r2, r3
    92d6:	69f9      	ldr	r1, [r7, #28]
    92d8:	6a38      	ldr	r0, [r7, #32]
    92da:	4b1e      	ldr	r3, [pc, #120]	; (9354 <_spi_m_sync_trans+0x10c>)
    92dc:	4798      	blx	r3
    92de:	4603      	mov	r3, r0
    92e0:	f083 0301 	eor.w	r3, r3, #1
    92e4:	b2db      	uxtb	r3, r3
    92e6:	2b00      	cmp	r3, #0
    92e8:	d00b      	beq.n	9302 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    92ea:	697a      	ldr	r2, [r7, #20]
    92ec:	693b      	ldr	r3, [r7, #16]
    92ee:	429a      	cmp	r2, r3
    92f0:	d307      	bcc.n	9302 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	88db      	ldrh	r3, [r3, #6]
    92f6:	f107 0208 	add.w	r2, r7, #8
    92fa:	69f9      	ldr	r1, [r7, #28]
    92fc:	6a38      	ldr	r0, [r7, #32]
    92fe:	4c16      	ldr	r4, [pc, #88]	; (9358 <_spi_m_sync_trans+0x110>)
    9300:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    9302:	6a39      	ldr	r1, [r7, #32]
    9304:	69f8      	ldr	r0, [r7, #28]
    9306:	4b15      	ldr	r3, [pc, #84]	; (935c <_spi_m_sync_trans+0x114>)
    9308:	4798      	blx	r3
    930a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    930e:	2b00      	cmp	r3, #0
    9310:	db0c      	blt.n	932c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    9312:	693a      	ldr	r2, [r7, #16]
    9314:	683b      	ldr	r3, [r7, #0]
    9316:	689b      	ldr	r3, [r3, #8]
    9318:	429a      	cmp	r2, r3
    931a:	d3d4      	bcc.n	92c6 <_spi_m_sync_trans+0x7e>
    931c:	697a      	ldr	r2, [r7, #20]
    931e:	683b      	ldr	r3, [r7, #0]
    9320:	689b      	ldr	r3, [r3, #8]
    9322:	429a      	cmp	r2, r3
    9324:	d3cf      	bcc.n	92c6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    9326:	693b      	ldr	r3, [r7, #16]
    9328:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    932a:	e000      	b.n	932e <_spi_m_sync_trans+0xe6>
			break;
    932c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    932e:	6a38      	ldr	r0, [r7, #32]
    9330:	4b0b      	ldr	r3, [pc, #44]	; (9360 <_spi_m_sync_trans+0x118>)
    9332:	4798      	blx	r3

	return rc;
    9334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    9336:	4618      	mov	r0, r3
    9338:	372c      	adds	r7, #44	; 0x2c
    933a:	46bd      	mov	sp, r7
    933c:	bd90      	pop	{r4, r7, pc}
    933e:	bf00      	nop
    9340:	000102a4 	.word	0x000102a4
    9344:	00005af5 	.word	0x00005af5
    9348:	000080d5 	.word	0x000080d5
    934c:	00008281 	.word	0x00008281
    9350:	00008173 	.word	0x00008173
    9354:	00009125 	.word	0x00009125
    9358:	00009191 	.word	0x00009191
    935c:	00009209 	.word	0x00009209
    9360:	000090f5 	.word	0x000090f5

00009364 <__NVIC_EnableIRQ>:
{
    9364:	b480      	push	{r7}
    9366:	b083      	sub	sp, #12
    9368:	af00      	add	r7, sp, #0
    936a:	4603      	mov	r3, r0
    936c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    936e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9372:	2b00      	cmp	r3, #0
    9374:	db0b      	blt.n	938e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9376:	4909      	ldr	r1, [pc, #36]	; (939c <__NVIC_EnableIRQ+0x38>)
    9378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    937c:	095b      	lsrs	r3, r3, #5
    937e:	88fa      	ldrh	r2, [r7, #6]
    9380:	f002 021f 	and.w	r2, r2, #31
    9384:	2001      	movs	r0, #1
    9386:	fa00 f202 	lsl.w	r2, r0, r2
    938a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    938e:	bf00      	nop
    9390:	370c      	adds	r7, #12
    9392:	46bd      	mov	sp, r7
    9394:	f85d 7b04 	ldr.w	r7, [sp], #4
    9398:	4770      	bx	lr
    939a:	bf00      	nop
    939c:	e000e100 	.word	0xe000e100

000093a0 <__NVIC_DisableIRQ>:
{
    93a0:	b480      	push	{r7}
    93a2:	b083      	sub	sp, #12
    93a4:	af00      	add	r7, sp, #0
    93a6:	4603      	mov	r3, r0
    93a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    93aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    93ae:	2b00      	cmp	r3, #0
    93b0:	db10      	blt.n	93d4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    93b2:	490b      	ldr	r1, [pc, #44]	; (93e0 <__NVIC_DisableIRQ+0x40>)
    93b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    93b8:	095b      	lsrs	r3, r3, #5
    93ba:	88fa      	ldrh	r2, [r7, #6]
    93bc:	f002 021f 	and.w	r2, r2, #31
    93c0:	2001      	movs	r0, #1
    93c2:	fa00 f202 	lsl.w	r2, r0, r2
    93c6:	3320      	adds	r3, #32
    93c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    93cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    93d0:	f3bf 8f6f 	isb	sy
}
    93d4:	bf00      	nop
    93d6:	370c      	adds	r7, #12
    93d8:	46bd      	mov	sp, r7
    93da:	f85d 7b04 	ldr.w	r7, [sp], #4
    93de:	4770      	bx	lr
    93e0:	e000e100 	.word	0xe000e100

000093e4 <__NVIC_ClearPendingIRQ>:
{
    93e4:	b480      	push	{r7}
    93e6:	b083      	sub	sp, #12
    93e8:	af00      	add	r7, sp, #0
    93ea:	4603      	mov	r3, r0
    93ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    93ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    93f2:	2b00      	cmp	r3, #0
    93f4:	db0c      	blt.n	9410 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    93f6:	4909      	ldr	r1, [pc, #36]	; (941c <__NVIC_ClearPendingIRQ+0x38>)
    93f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    93fc:	095b      	lsrs	r3, r3, #5
    93fe:	88fa      	ldrh	r2, [r7, #6]
    9400:	f002 021f 	and.w	r2, r2, #31
    9404:	2001      	movs	r0, #1
    9406:	fa00 f202 	lsl.w	r2, r0, r2
    940a:	3360      	adds	r3, #96	; 0x60
    940c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9410:	bf00      	nop
    9412:	370c      	adds	r7, #12
    9414:	46bd      	mov	sp, r7
    9416:	f85d 7b04 	ldr.w	r7, [sp], #4
    941a:	4770      	bx	lr
    941c:	e000e100 	.word	0xe000e100

00009420 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    9420:	b480      	push	{r7}
    9422:	b083      	sub	sp, #12
    9424:	af00      	add	r7, sp, #0
    9426:	6078      	str	r0, [r7, #4]
    9428:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    942a:	bf00      	nop
    942c:	687b      	ldr	r3, [r7, #4]
    942e:	689a      	ldr	r2, [r3, #8]
    9430:	683b      	ldr	r3, [r7, #0]
    9432:	4013      	ands	r3, r2
    9434:	2b00      	cmp	r3, #0
    9436:	d1f9      	bne.n	942c <hri_tcc_wait_for_sync+0xc>
	};
}
    9438:	bf00      	nop
    943a:	370c      	adds	r7, #12
    943c:	46bd      	mov	sp, r7
    943e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9442:	4770      	bx	lr

00009444 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    9444:	b480      	push	{r7}
    9446:	b083      	sub	sp, #12
    9448:	af00      	add	r7, sp, #0
    944a:	6078      	str	r0, [r7, #4]
    944c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	689a      	ldr	r2, [r3, #8]
    9452:	683b      	ldr	r3, [r7, #0]
    9454:	4013      	ands	r3, r2
    9456:	2b00      	cmp	r3, #0
    9458:	bf14      	ite	ne
    945a:	2301      	movne	r3, #1
    945c:	2300      	moveq	r3, #0
    945e:	b2db      	uxtb	r3, r3
}
    9460:	4618      	mov	r0, r3
    9462:	370c      	adds	r7, #12
    9464:	46bd      	mov	sp, r7
    9466:	f85d 7b04 	ldr.w	r7, [sp], #4
    946a:	4770      	bx	lr

0000946c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    946c:	b480      	push	{r7}
    946e:	b083      	sub	sp, #12
    9470:	af00      	add	r7, sp, #0
    9472:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    9474:	687b      	ldr	r3, [r7, #4]
    9476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9478:	f003 0301 	and.w	r3, r3, #1
    947c:	2b00      	cmp	r3, #0
    947e:	bf14      	ite	ne
    9480:	2301      	movne	r3, #1
    9482:	2300      	moveq	r3, #0
    9484:	b2db      	uxtb	r3, r3
}
    9486:	4618      	mov	r0, r3
    9488:	370c      	adds	r7, #12
    948a:	46bd      	mov	sp, r7
    948c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9490:	4770      	bx	lr

00009492 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    9492:	b480      	push	{r7}
    9494:	b083      	sub	sp, #12
    9496:	af00      	add	r7, sp, #0
    9498:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    949a:	687b      	ldr	r3, [r7, #4]
    949c:	2201      	movs	r2, #1
    949e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    94a0:	bf00      	nop
    94a2:	370c      	adds	r7, #12
    94a4:	46bd      	mov	sp, r7
    94a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    94aa:	4770      	bx	lr

000094ac <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    94ac:	b480      	push	{r7}
    94ae:	b083      	sub	sp, #12
    94b0:	af00      	add	r7, sp, #0
    94b2:	6078      	str	r0, [r7, #4]
    94b4:	460b      	mov	r3, r1
    94b6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    94b8:	687b      	ldr	r3, [r7, #4]
    94ba:	78fa      	ldrb	r2, [r7, #3]
    94bc:	715a      	strb	r2, [r3, #5]
}
    94be:	bf00      	nop
    94c0:	370c      	adds	r7, #12
    94c2:	46bd      	mov	sp, r7
    94c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    94c8:	4770      	bx	lr

000094ca <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    94ca:	b480      	push	{r7}
    94cc:	b083      	sub	sp, #12
    94ce:	af00      	add	r7, sp, #0
    94d0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    94d2:	687b      	ldr	r3, [r7, #4]
    94d4:	2201      	movs	r2, #1
    94d6:	629a      	str	r2, [r3, #40]	; 0x28
}
    94d8:	bf00      	nop
    94da:	370c      	adds	r7, #12
    94dc:	46bd      	mov	sp, r7
    94de:	f85d 7b04 	ldr.w	r7, [sp], #4
    94e2:	4770      	bx	lr

000094e4 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    94e4:	b580      	push	{r7, lr}
    94e6:	b082      	sub	sp, #8
    94e8:	af00      	add	r7, sp, #0
    94ea:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    94ec:	687b      	ldr	r3, [r7, #4]
    94ee:	681b      	ldr	r3, [r3, #0]
    94f0:	f043 0201 	orr.w	r2, r3, #1
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    94f8:	2101      	movs	r1, #1
    94fa:	6878      	ldr	r0, [r7, #4]
    94fc:	4b02      	ldr	r3, [pc, #8]	; (9508 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    94fe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9500:	bf00      	nop
    9502:	3708      	adds	r7, #8
    9504:	46bd      	mov	sp, r7
    9506:	bd80      	pop	{r7, pc}
    9508:	00009421 	.word	0x00009421

0000950c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    950c:	b580      	push	{r7, lr}
    950e:	b082      	sub	sp, #8
    9510:	af00      	add	r7, sp, #0
    9512:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    9514:	687b      	ldr	r3, [r7, #4]
    9516:	681b      	ldr	r3, [r3, #0]
    9518:	f043 0202 	orr.w	r2, r3, #2
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9520:	2103      	movs	r1, #3
    9522:	6878      	ldr	r0, [r7, #4]
    9524:	4b02      	ldr	r3, [pc, #8]	; (9530 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    9526:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9528:	bf00      	nop
    952a:	3708      	adds	r7, #8
    952c:	46bd      	mov	sp, r7
    952e:	bd80      	pop	{r7, pc}
    9530:	00009421 	.word	0x00009421

00009534 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9534:	b580      	push	{r7, lr}
    9536:	b084      	sub	sp, #16
    9538:	af00      	add	r7, sp, #0
    953a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    953c:	2103      	movs	r1, #3
    953e:	6878      	ldr	r0, [r7, #4]
    9540:	4b09      	ldr	r3, [pc, #36]	; (9568 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    9542:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    9544:	687b      	ldr	r3, [r7, #4]
    9546:	681b      	ldr	r3, [r3, #0]
    9548:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    954a:	68fb      	ldr	r3, [r7, #12]
    954c:	085b      	lsrs	r3, r3, #1
    954e:	f003 0301 	and.w	r3, r3, #1
    9552:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9554:	68fb      	ldr	r3, [r7, #12]
    9556:	2b00      	cmp	r3, #0
    9558:	bf14      	ite	ne
    955a:	2301      	movne	r3, #1
    955c:	2300      	moveq	r3, #0
    955e:	b2db      	uxtb	r3, r3
}
    9560:	4618      	mov	r0, r3
    9562:	3710      	adds	r7, #16
    9564:	46bd      	mov	sp, r7
    9566:	bd80      	pop	{r7, pc}
    9568:	00009421 	.word	0x00009421

0000956c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    956c:	b580      	push	{r7, lr}
    956e:	b082      	sub	sp, #8
    9570:	af00      	add	r7, sp, #0
    9572:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    9574:	687b      	ldr	r3, [r7, #4]
    9576:	681b      	ldr	r3, [r3, #0]
    9578:	f023 0202 	bic.w	r2, r3, #2
    957c:	687b      	ldr	r3, [r7, #4]
    957e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9580:	2103      	movs	r1, #3
    9582:	6878      	ldr	r0, [r7, #4]
    9584:	4b02      	ldr	r3, [pc, #8]	; (9590 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    9586:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9588:	bf00      	nop
    958a:	3708      	adds	r7, #8
    958c:	46bd      	mov	sp, r7
    958e:	bd80      	pop	{r7, pc}
    9590:	00009421 	.word	0x00009421

00009594 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    9594:	b580      	push	{r7, lr}
    9596:	b084      	sub	sp, #16
    9598:	af00      	add	r7, sp, #0
    959a:	6078      	str	r0, [r7, #4]
    959c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    959e:	2103      	movs	r1, #3
    95a0:	6878      	ldr	r0, [r7, #4]
    95a2:	4b07      	ldr	r3, [pc, #28]	; (95c0 <hri_tcc_get_CTRLA_reg+0x2c>)
    95a4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    95a6:	687b      	ldr	r3, [r7, #4]
    95a8:	681b      	ldr	r3, [r3, #0]
    95aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    95ac:	68fa      	ldr	r2, [r7, #12]
    95ae:	683b      	ldr	r3, [r7, #0]
    95b0:	4013      	ands	r3, r2
    95b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    95b4:	68fb      	ldr	r3, [r7, #12]
}
    95b6:	4618      	mov	r0, r3
    95b8:	3710      	adds	r7, #16
    95ba:	46bd      	mov	sp, r7
    95bc:	bd80      	pop	{r7, pc}
    95be:	bf00      	nop
    95c0:	00009421 	.word	0x00009421

000095c4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    95c4:	b580      	push	{r7, lr}
    95c6:	b082      	sub	sp, #8
    95c8:	af00      	add	r7, sp, #0
    95ca:	6078      	str	r0, [r7, #4]
    95cc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    95ce:	687b      	ldr	r3, [r7, #4]
    95d0:	683a      	ldr	r2, [r7, #0]
    95d2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    95d4:	2103      	movs	r1, #3
    95d6:	6878      	ldr	r0, [r7, #4]
    95d8:	4b02      	ldr	r3, [pc, #8]	; (95e4 <hri_tcc_write_CTRLA_reg+0x20>)
    95da:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    95dc:	bf00      	nop
    95de:	3708      	adds	r7, #8
    95e0:	46bd      	mov	sp, r7
    95e2:	bd80      	pop	{r7, pc}
    95e4:	00009421 	.word	0x00009421

000095e8 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    95e8:	b480      	push	{r7}
    95ea:	b083      	sub	sp, #12
    95ec:	af00      	add	r7, sp, #0
    95ee:	6078      	str	r0, [r7, #4]
    95f0:	460b      	mov	r3, r1
    95f2:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    95f4:	687b      	ldr	r3, [r7, #4]
    95f6:	78fa      	ldrb	r2, [r7, #3]
    95f8:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    95fa:	bf00      	nop
    95fc:	370c      	adds	r7, #12
    95fe:	46bd      	mov	sp, r7
    9600:	f85d 7b04 	ldr.w	r7, [sp], #4
    9604:	4770      	bx	lr

00009606 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    9606:	b480      	push	{r7}
    9608:	b083      	sub	sp, #12
    960a:	af00      	add	r7, sp, #0
    960c:	6078      	str	r0, [r7, #4]
    960e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	683a      	ldr	r2, [r7, #0]
    9614:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    9616:	bf00      	nop
    9618:	370c      	adds	r7, #12
    961a:	46bd      	mov	sp, r7
    961c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9620:	4770      	bx	lr
	...

00009624 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    9624:	b580      	push	{r7, lr}
    9626:	b082      	sub	sp, #8
    9628:	af00      	add	r7, sp, #0
    962a:	6078      	str	r0, [r7, #4]
    962c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    962e:	687b      	ldr	r3, [r7, #4]
    9630:	683a      	ldr	r2, [r7, #0]
    9632:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    9634:	2180      	movs	r1, #128	; 0x80
    9636:	6878      	ldr	r0, [r7, #4]
    9638:	4b02      	ldr	r3, [pc, #8]	; (9644 <hri_tcc_write_PER_reg+0x20>)
    963a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    963c:	bf00      	nop
    963e:	3708      	adds	r7, #8
    9640:	46bd      	mov	sp, r7
    9642:	bd80      	pop	{r7, pc}
    9644:	00009421 	.word	0x00009421

00009648 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    9648:	b580      	push	{r7, lr}
    964a:	b082      	sub	sp, #8
    964c:	af00      	add	r7, sp, #0
    964e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    9650:	2180      	movs	r1, #128	; 0x80
    9652:	6878      	ldr	r0, [r7, #4]
    9654:	4b03      	ldr	r3, [pc, #12]	; (9664 <hri_tcc_read_PER_reg+0x1c>)
    9656:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    9658:	687b      	ldr	r3, [r7, #4]
    965a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    965c:	4618      	mov	r0, r3
    965e:	3708      	adds	r7, #8
    9660:	46bd      	mov	sp, r7
    9662:	bd80      	pop	{r7, pc}
    9664:	00009421 	.word	0x00009421

00009668 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    9668:	b480      	push	{r7}
    966a:	b083      	sub	sp, #12
    966c:	af00      	add	r7, sp, #0
    966e:	6078      	str	r0, [r7, #4]
    9670:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    9672:	687b      	ldr	r3, [r7, #4]
    9674:	4a09      	ldr	r2, [pc, #36]	; (969c <_tcc_init_irq_param+0x34>)
    9676:	4293      	cmp	r3, r2
    9678:	d102      	bne.n	9680 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    967a:	4a09      	ldr	r2, [pc, #36]	; (96a0 <_tcc_init_irq_param+0x38>)
    967c:	683b      	ldr	r3, [r7, #0]
    967e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	4a08      	ldr	r2, [pc, #32]	; (96a4 <_tcc_init_irq_param+0x3c>)
    9684:	4293      	cmp	r3, r2
    9686:	d102      	bne.n	968e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    9688:	4a07      	ldr	r2, [pc, #28]	; (96a8 <_tcc_init_irq_param+0x40>)
    968a:	683b      	ldr	r3, [r7, #0]
    968c:	6013      	str	r3, [r2, #0]
	}
}
    968e:	bf00      	nop
    9690:	370c      	adds	r7, #12
    9692:	46bd      	mov	sp, r7
    9694:	f85d 7b04 	ldr.w	r7, [sp], #4
    9698:	4770      	bx	lr
    969a:	bf00      	nop
    969c:	41016000 	.word	0x41016000
    96a0:	20001e40 	.word	0x20001e40
    96a4:	41018000 	.word	0x41018000
    96a8:	20001e44 	.word	0x20001e44

000096ac <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    96ac:	b580      	push	{r7, lr}
    96ae:	b084      	sub	sp, #16
    96b0:	af00      	add	r7, sp, #0
    96b2:	6078      	str	r0, [r7, #4]
    96b4:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    96b6:	6838      	ldr	r0, [r7, #0]
    96b8:	4b33      	ldr	r3, [pc, #204]	; (9788 <_tcc_timer_init+0xdc>)
    96ba:	4798      	blx	r3
    96bc:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    96be:	68fb      	ldr	r3, [r7, #12]
    96c0:	2b00      	cmp	r3, #0
    96c2:	d102      	bne.n	96ca <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    96c4:	f06f 0309 	mvn.w	r3, #9
    96c8:	e05a      	b.n	9780 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    96ca:	687b      	ldr	r3, [r7, #4]
    96cc:	683a      	ldr	r2, [r7, #0]
    96ce:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    96d0:	2101      	movs	r1, #1
    96d2:	6838      	ldr	r0, [r7, #0]
    96d4:	4b2d      	ldr	r3, [pc, #180]	; (978c <_tcc_timer_init+0xe0>)
    96d6:	4798      	blx	r3
    96d8:	4603      	mov	r3, r0
    96da:	f083 0301 	eor.w	r3, r3, #1
    96de:	b2db      	uxtb	r3, r3
    96e0:	2b00      	cmp	r3, #0
    96e2:	d011      	beq.n	9708 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    96e4:	2102      	movs	r1, #2
    96e6:	6838      	ldr	r0, [r7, #0]
    96e8:	4b29      	ldr	r3, [pc, #164]	; (9790 <_tcc_timer_init+0xe4>)
    96ea:	4798      	blx	r3
    96ec:	4603      	mov	r3, r0
    96ee:	2b00      	cmp	r3, #0
    96f0:	d006      	beq.n	9700 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    96f2:	6838      	ldr	r0, [r7, #0]
    96f4:	4b27      	ldr	r3, [pc, #156]	; (9794 <_tcc_timer_init+0xe8>)
    96f6:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    96f8:	2102      	movs	r1, #2
    96fa:	6838      	ldr	r0, [r7, #0]
    96fc:	4b26      	ldr	r3, [pc, #152]	; (9798 <_tcc_timer_init+0xec>)
    96fe:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    9700:	2101      	movs	r1, #1
    9702:	6838      	ldr	r0, [r7, #0]
    9704:	4b25      	ldr	r3, [pc, #148]	; (979c <_tcc_timer_init+0xf0>)
    9706:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    9708:	2101      	movs	r1, #1
    970a:	6838      	ldr	r0, [r7, #0]
    970c:	4b22      	ldr	r3, [pc, #136]	; (9798 <_tcc_timer_init+0xec>)
    970e:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    9710:	68fb      	ldr	r3, [r7, #12]
    9712:	689b      	ldr	r3, [r3, #8]
    9714:	4619      	mov	r1, r3
    9716:	6838      	ldr	r0, [r7, #0]
    9718:	4b20      	ldr	r3, [pc, #128]	; (979c <_tcc_timer_init+0xf0>)
    971a:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    971c:	68fb      	ldr	r3, [r7, #12]
    971e:	7b1b      	ldrb	r3, [r3, #12]
    9720:	4619      	mov	r1, r3
    9722:	6838      	ldr	r0, [r7, #0]
    9724:	4b1e      	ldr	r3, [pc, #120]	; (97a0 <_tcc_timer_init+0xf4>)
    9726:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    9728:	68fb      	ldr	r3, [r7, #12]
    972a:	7b5b      	ldrb	r3, [r3, #13]
    972c:	4619      	mov	r1, r3
    972e:	6838      	ldr	r0, [r7, #0]
    9730:	4b1c      	ldr	r3, [pc, #112]	; (97a4 <_tcc_timer_init+0xf8>)
    9732:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    9734:	68fb      	ldr	r3, [r7, #12]
    9736:	691b      	ldr	r3, [r3, #16]
    9738:	4619      	mov	r1, r3
    973a:	6838      	ldr	r0, [r7, #0]
    973c:	4b1a      	ldr	r3, [pc, #104]	; (97a8 <_tcc_timer_init+0xfc>)
    973e:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    9740:	68fb      	ldr	r3, [r7, #12]
    9742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9744:	4619      	mov	r1, r3
    9746:	6838      	ldr	r0, [r7, #0]
    9748:	4b18      	ldr	r3, [pc, #96]	; (97ac <_tcc_timer_init+0x100>)
    974a:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    974c:	6838      	ldr	r0, [r7, #0]
    974e:	4b18      	ldr	r3, [pc, #96]	; (97b0 <_tcc_timer_init+0x104>)
    9750:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    9752:	6879      	ldr	r1, [r7, #4]
    9754:	6838      	ldr	r0, [r7, #0]
    9756:	4b17      	ldr	r3, [pc, #92]	; (97b4 <_tcc_timer_init+0x108>)
    9758:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    975a:	68fb      	ldr	r3, [r7, #12]
    975c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9760:	4618      	mov	r0, r3
    9762:	4b15      	ldr	r3, [pc, #84]	; (97b8 <_tcc_timer_init+0x10c>)
    9764:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    9766:	68fb      	ldr	r3, [r7, #12]
    9768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    976c:	4618      	mov	r0, r3
    976e:	4b13      	ldr	r3, [pc, #76]	; (97bc <_tcc_timer_init+0x110>)
    9770:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    9772:	68fb      	ldr	r3, [r7, #12]
    9774:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9778:	4618      	mov	r0, r3
    977a:	4b11      	ldr	r3, [pc, #68]	; (97c0 <_tcc_timer_init+0x114>)
    977c:	4798      	blx	r3

	return ERR_NONE;
    977e:	2300      	movs	r3, #0
}
    9780:	4618      	mov	r0, r3
    9782:	3710      	adds	r7, #16
    9784:	46bd      	mov	sp, r7
    9786:	bd80      	pop	{r7, pc}
    9788:	00009975 	.word	0x00009975
    978c:	00009445 	.word	0x00009445
    9790:	00009595 	.word	0x00009595
    9794:	0000956d 	.word	0x0000956d
    9798:	00009421 	.word	0x00009421
    979c:	000095c5 	.word	0x000095c5
    97a0:	000094ad 	.word	0x000094ad
    97a4:	000095e9 	.word	0x000095e9
    97a8:	00009607 	.word	0x00009607
    97ac:	00009625 	.word	0x00009625
    97b0:	000094cb 	.word	0x000094cb
    97b4:	00009669 	.word	0x00009669
    97b8:	000093a1 	.word	0x000093a1
    97bc:	000093e5 	.word	0x000093e5
    97c0:	00009365 	.word	0x00009365

000097c4 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    97c4:	b580      	push	{r7, lr}
    97c6:	b084      	sub	sp, #16
    97c8:	af00      	add	r7, sp, #0
    97ca:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    97cc:	687b      	ldr	r3, [r7, #4]
    97ce:	68db      	ldr	r3, [r3, #12]
    97d0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    97d2:	68f8      	ldr	r0, [r7, #12]
    97d4:	4b0a      	ldr	r3, [pc, #40]	; (9800 <_tcc_timer_deinit+0x3c>)
    97d6:	4798      	blx	r3
    97d8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    97da:	68bb      	ldr	r3, [r7, #8]
    97dc:	2b00      	cmp	r3, #0
    97de:	d00b      	beq.n	97f8 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    97e0:	68bb      	ldr	r3, [r7, #8]
    97e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    97e6:	4618      	mov	r0, r3
    97e8:	4b06      	ldr	r3, [pc, #24]	; (9804 <_tcc_timer_deinit+0x40>)
    97ea:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    97ec:	68f8      	ldr	r0, [r7, #12]
    97ee:	4b06      	ldr	r3, [pc, #24]	; (9808 <_tcc_timer_deinit+0x44>)
    97f0:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    97f2:	68f8      	ldr	r0, [r7, #12]
    97f4:	4b05      	ldr	r3, [pc, #20]	; (980c <_tcc_timer_deinit+0x48>)
    97f6:	4798      	blx	r3
	}
}
    97f8:	bf00      	nop
    97fa:	3710      	adds	r7, #16
    97fc:	46bd      	mov	sp, r7
    97fe:	bd80      	pop	{r7, pc}
    9800:	00009975 	.word	0x00009975
    9804:	000093a1 	.word	0x000093a1
    9808:	0000956d 	.word	0x0000956d
    980c:	000094e5 	.word	0x000094e5

00009810 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    9810:	b580      	push	{r7, lr}
    9812:	b082      	sub	sp, #8
    9814:	af00      	add	r7, sp, #0
    9816:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    9818:	687b      	ldr	r3, [r7, #4]
    981a:	68db      	ldr	r3, [r3, #12]
    981c:	4618      	mov	r0, r3
    981e:	4b03      	ldr	r3, [pc, #12]	; (982c <_tcc_timer_start+0x1c>)
    9820:	4798      	blx	r3
}
    9822:	bf00      	nop
    9824:	3708      	adds	r7, #8
    9826:	46bd      	mov	sp, r7
    9828:	bd80      	pop	{r7, pc}
    982a:	bf00      	nop
    982c:	0000950d 	.word	0x0000950d

00009830 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    9830:	b580      	push	{r7, lr}
    9832:	b082      	sub	sp, #8
    9834:	af00      	add	r7, sp, #0
    9836:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    9838:	687b      	ldr	r3, [r7, #4]
    983a:	68db      	ldr	r3, [r3, #12]
    983c:	4618      	mov	r0, r3
    983e:	4b03      	ldr	r3, [pc, #12]	; (984c <_tcc_timer_stop+0x1c>)
    9840:	4798      	blx	r3
}
    9842:	bf00      	nop
    9844:	3708      	adds	r7, #8
    9846:	46bd      	mov	sp, r7
    9848:	bd80      	pop	{r7, pc}
    984a:	bf00      	nop
    984c:	0000956d 	.word	0x0000956d

00009850 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    9850:	b580      	push	{r7, lr}
    9852:	b082      	sub	sp, #8
    9854:	af00      	add	r7, sp, #0
    9856:	6078      	str	r0, [r7, #4]
    9858:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    985a:	687b      	ldr	r3, [r7, #4]
    985c:	68db      	ldr	r3, [r3, #12]
    985e:	6839      	ldr	r1, [r7, #0]
    9860:	4618      	mov	r0, r3
    9862:	4b03      	ldr	r3, [pc, #12]	; (9870 <_tcc_timer_set_period+0x20>)
    9864:	4798      	blx	r3
}
    9866:	bf00      	nop
    9868:	3708      	adds	r7, #8
    986a:	46bd      	mov	sp, r7
    986c:	bd80      	pop	{r7, pc}
    986e:	bf00      	nop
    9870:	00009625 	.word	0x00009625

00009874 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    9874:	b580      	push	{r7, lr}
    9876:	b082      	sub	sp, #8
    9878:	af00      	add	r7, sp, #0
    987a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    987c:	687b      	ldr	r3, [r7, #4]
    987e:	68db      	ldr	r3, [r3, #12]
    9880:	4618      	mov	r0, r3
    9882:	4b03      	ldr	r3, [pc, #12]	; (9890 <_tcc_timer_get_period+0x1c>)
    9884:	4798      	blx	r3
    9886:	4603      	mov	r3, r0
}
    9888:	4618      	mov	r0, r3
    988a:	3708      	adds	r7, #8
    988c:	46bd      	mov	sp, r7
    988e:	bd80      	pop	{r7, pc}
    9890:	00009649 	.word	0x00009649

00009894 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    9894:	b580      	push	{r7, lr}
    9896:	b082      	sub	sp, #8
    9898:	af00      	add	r7, sp, #0
    989a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    989c:	687b      	ldr	r3, [r7, #4]
    989e:	68db      	ldr	r3, [r3, #12]
    98a0:	4618      	mov	r0, r3
    98a2:	4b03      	ldr	r3, [pc, #12]	; (98b0 <_tcc_timer_is_started+0x1c>)
    98a4:	4798      	blx	r3
    98a6:	4603      	mov	r3, r0
}
    98a8:	4618      	mov	r0, r3
    98aa:	3708      	adds	r7, #8
    98ac:	46bd      	mov	sp, r7
    98ae:	bd80      	pop	{r7, pc}
    98b0:	00009535 	.word	0x00009535

000098b4 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    98b4:	b480      	push	{r7}
    98b6:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    98b8:	4b02      	ldr	r3, [pc, #8]	; (98c4 <_tcc_get_timer+0x10>)
}
    98ba:	4618      	mov	r0, r3
    98bc:	46bd      	mov	sp, r7
    98be:	f85d 7b04 	ldr.w	r7, [sp], #4
    98c2:	4770      	bx	lr
    98c4:	200000c0 	.word	0x200000c0

000098c8 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    98c8:	b580      	push	{r7, lr}
    98ca:	b084      	sub	sp, #16
    98cc:	af00      	add	r7, sp, #0
    98ce:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    98d0:	687b      	ldr	r3, [r7, #4]
    98d2:	68db      	ldr	r3, [r3, #12]
    98d4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    98d6:	68f8      	ldr	r0, [r7, #12]
    98d8:	4b08      	ldr	r3, [pc, #32]	; (98fc <_tcc_timer_set_irq+0x34>)
    98da:	4798      	blx	r3
    98dc:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    98de:	68bb      	ldr	r3, [r7, #8]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d006      	beq.n	98f2 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    98e4:	68bb      	ldr	r3, [r7, #8]
    98e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    98ea:	b2db      	uxtb	r3, r3
    98ec:	4618      	mov	r0, r3
    98ee:	4b04      	ldr	r3, [pc, #16]	; (9900 <_tcc_timer_set_irq+0x38>)
    98f0:	4798      	blx	r3
	}
}
    98f2:	bf00      	nop
    98f4:	3710      	adds	r7, #16
    98f6:	46bd      	mov	sp, r7
    98f8:	bd80      	pop	{r7, pc}
    98fa:	bf00      	nop
    98fc:	00009975 	.word	0x00009975
    9900:	00006341 	.word	0x00006341

00009904 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    9904:	b580      	push	{r7, lr}
    9906:	b084      	sub	sp, #16
    9908:	af00      	add	r7, sp, #0
    990a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    990c:	687b      	ldr	r3, [r7, #4]
    990e:	68db      	ldr	r3, [r3, #12]
    9910:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    9912:	68f8      	ldr	r0, [r7, #12]
    9914:	4b07      	ldr	r3, [pc, #28]	; (9934 <tcc_interrupt_handler+0x30>)
    9916:	4798      	blx	r3
    9918:	4603      	mov	r3, r0
    991a:	2b00      	cmp	r3, #0
    991c:	d006      	beq.n	992c <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    991e:	68f8      	ldr	r0, [r7, #12]
    9920:	4b05      	ldr	r3, [pc, #20]	; (9938 <tcc_interrupt_handler+0x34>)
    9922:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    9924:	687b      	ldr	r3, [r7, #4]
    9926:	681b      	ldr	r3, [r3, #0]
    9928:	6878      	ldr	r0, [r7, #4]
    992a:	4798      	blx	r3
	}
}
    992c:	bf00      	nop
    992e:	3710      	adds	r7, #16
    9930:	46bd      	mov	sp, r7
    9932:	bd80      	pop	{r7, pc}
    9934:	0000946d 	.word	0x0000946d
    9938:	00009493 	.word	0x00009493

0000993c <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    993c:	b580      	push	{r7, lr}
    993e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    9940:	4b03      	ldr	r3, [pc, #12]	; (9950 <TCC0_0_Handler+0x14>)
    9942:	681b      	ldr	r3, [r3, #0]
    9944:	4618      	mov	r0, r3
    9946:	4b03      	ldr	r3, [pc, #12]	; (9954 <TCC0_0_Handler+0x18>)
    9948:	4798      	blx	r3
}
    994a:	bf00      	nop
    994c:	bd80      	pop	{r7, pc}
    994e:	bf00      	nop
    9950:	20001e40 	.word	0x20001e40
    9954:	00009905 	.word	0x00009905

00009958 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    9958:	b580      	push	{r7, lr}
    995a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    995c:	4b03      	ldr	r3, [pc, #12]	; (996c <TCC1_0_Handler+0x14>)
    995e:	681b      	ldr	r3, [r3, #0]
    9960:	4618      	mov	r0, r3
    9962:	4b03      	ldr	r3, [pc, #12]	; (9970 <TCC1_0_Handler+0x18>)
    9964:	4798      	blx	r3
}
    9966:	bf00      	nop
    9968:	bd80      	pop	{r7, pc}
    996a:	bf00      	nop
    996c:	20001e44 	.word	0x20001e44
    9970:	00009905 	.word	0x00009905

00009974 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    9974:	b480      	push	{r7}
    9976:	b085      	sub	sp, #20
    9978:	af00      	add	r7, sp, #0
    997a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    997c:	2300      	movs	r3, #0
    997e:	73fb      	strb	r3, [r7, #15]
    9980:	e015      	b.n	99ae <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    9982:	7bfa      	ldrb	r2, [r7, #15]
    9984:	490f      	ldr	r1, [pc, #60]	; (99c4 <_get_tcc_cfg+0x50>)
    9986:	4613      	mov	r3, r2
    9988:	005b      	lsls	r3, r3, #1
    998a:	4413      	add	r3, r2
    998c:	011b      	lsls	r3, r3, #4
    998e:	440b      	add	r3, r1
    9990:	681a      	ldr	r2, [r3, #0]
    9992:	687b      	ldr	r3, [r7, #4]
    9994:	429a      	cmp	r2, r3
    9996:	d107      	bne.n	99a8 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    9998:	7bfa      	ldrb	r2, [r7, #15]
    999a:	4613      	mov	r3, r2
    999c:	005b      	lsls	r3, r3, #1
    999e:	4413      	add	r3, r2
    99a0:	011b      	lsls	r3, r3, #4
    99a2:	4a08      	ldr	r2, [pc, #32]	; (99c4 <_get_tcc_cfg+0x50>)
    99a4:	4413      	add	r3, r2
    99a6:	e006      	b.n	99b6 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    99a8:	7bfb      	ldrb	r3, [r7, #15]
    99aa:	3301      	adds	r3, #1
    99ac:	73fb      	strb	r3, [r7, #15]
    99ae:	7bfb      	ldrb	r3, [r7, #15]
    99b0:	2b01      	cmp	r3, #1
    99b2:	d9e6      	bls.n	9982 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    99b4:	2300      	movs	r3, #0
}
    99b6:	4618      	mov	r0, r3
    99b8:	3714      	adds	r7, #20
    99ba:	46bd      	mov	sp, r7
    99bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    99c0:	4770      	bx	lr
    99c2:	bf00      	nop
    99c4:	20000060 	.word	0x20000060

000099c8 <__NVIC_EnableIRQ>:
{
    99c8:	b480      	push	{r7}
    99ca:	b083      	sub	sp, #12
    99cc:	af00      	add	r7, sp, #0
    99ce:	4603      	mov	r3, r0
    99d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    99d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    99d6:	2b00      	cmp	r3, #0
    99d8:	db0b      	blt.n	99f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    99da:	4909      	ldr	r1, [pc, #36]	; (9a00 <__NVIC_EnableIRQ+0x38>)
    99dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    99e0:	095b      	lsrs	r3, r3, #5
    99e2:	88fa      	ldrh	r2, [r7, #6]
    99e4:	f002 021f 	and.w	r2, r2, #31
    99e8:	2001      	movs	r0, #1
    99ea:	fa00 f202 	lsl.w	r2, r0, r2
    99ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    99f2:	bf00      	nop
    99f4:	370c      	adds	r7, #12
    99f6:	46bd      	mov	sp, r7
    99f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    99fc:	4770      	bx	lr
    99fe:	bf00      	nop
    9a00:	e000e100 	.word	0xe000e100

00009a04 <__NVIC_DisableIRQ>:
{
    9a04:	b480      	push	{r7}
    9a06:	b083      	sub	sp, #12
    9a08:	af00      	add	r7, sp, #0
    9a0a:	4603      	mov	r3, r0
    9a0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9a12:	2b00      	cmp	r3, #0
    9a14:	db10      	blt.n	9a38 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9a16:	490b      	ldr	r1, [pc, #44]	; (9a44 <__NVIC_DisableIRQ+0x40>)
    9a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9a1c:	095b      	lsrs	r3, r3, #5
    9a1e:	88fa      	ldrh	r2, [r7, #6]
    9a20:	f002 021f 	and.w	r2, r2, #31
    9a24:	2001      	movs	r0, #1
    9a26:	fa00 f202 	lsl.w	r2, r0, r2
    9a2a:	3320      	adds	r3, #32
    9a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9a30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9a34:	f3bf 8f6f 	isb	sy
}
    9a38:	bf00      	nop
    9a3a:	370c      	adds	r7, #12
    9a3c:	46bd      	mov	sp, r7
    9a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a42:	4770      	bx	lr
    9a44:	e000e100 	.word	0xe000e100

00009a48 <__NVIC_ClearPendingIRQ>:
{
    9a48:	b480      	push	{r7}
    9a4a:	b083      	sub	sp, #12
    9a4c:	af00      	add	r7, sp, #0
    9a4e:	4603      	mov	r3, r0
    9a50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9a56:	2b00      	cmp	r3, #0
    9a58:	db0c      	blt.n	9a74 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9a5a:	4909      	ldr	r1, [pc, #36]	; (9a80 <__NVIC_ClearPendingIRQ+0x38>)
    9a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9a60:	095b      	lsrs	r3, r3, #5
    9a62:	88fa      	ldrh	r2, [r7, #6]
    9a64:	f002 021f 	and.w	r2, r2, #31
    9a68:	2001      	movs	r0, #1
    9a6a:	fa00 f202 	lsl.w	r2, r0, r2
    9a6e:	3360      	adds	r3, #96	; 0x60
    9a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a74:	bf00      	nop
    9a76:	370c      	adds	r7, #12
    9a78:	46bd      	mov	sp, r7
    9a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a7e:	4770      	bx	lr
    9a80:	e000e100 	.word	0xe000e100

00009a84 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9a84:	b480      	push	{r7}
    9a86:	b083      	sub	sp, #12
    9a88:	af00      	add	r7, sp, #0
    9a8a:	6078      	str	r0, [r7, #4]
    9a8c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9a8e:	bf00      	nop
    9a90:	687b      	ldr	r3, [r7, #4]
    9a92:	691a      	ldr	r2, [r3, #16]
    9a94:	683b      	ldr	r3, [r7, #0]
    9a96:	4013      	ands	r3, r2
    9a98:	2b00      	cmp	r3, #0
    9a9a:	d1f9      	bne.n	9a90 <hri_tc_wait_for_sync+0xc>
	};
}
    9a9c:	bf00      	nop
    9a9e:	370c      	adds	r7, #12
    9aa0:	46bd      	mov	sp, r7
    9aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aa6:	4770      	bx	lr

00009aa8 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9aa8:	b480      	push	{r7}
    9aaa:	b083      	sub	sp, #12
    9aac:	af00      	add	r7, sp, #0
    9aae:	6078      	str	r0, [r7, #4]
    9ab0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    9ab2:	687b      	ldr	r3, [r7, #4]
    9ab4:	691a      	ldr	r2, [r3, #16]
    9ab6:	683b      	ldr	r3, [r7, #0]
    9ab8:	4013      	ands	r3, r2
    9aba:	2b00      	cmp	r3, #0
    9abc:	bf14      	ite	ne
    9abe:	2301      	movne	r3, #1
    9ac0:	2300      	moveq	r3, #0
    9ac2:	b2db      	uxtb	r3, r3
}
    9ac4:	4618      	mov	r0, r3
    9ac6:	370c      	adds	r7, #12
    9ac8:	46bd      	mov	sp, r7
    9aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ace:	4770      	bx	lr

00009ad0 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    9ad0:	b480      	push	{r7}
    9ad2:	b083      	sub	sp, #12
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    9ad8:	687b      	ldr	r3, [r7, #4]
    9ada:	7a9b      	ldrb	r3, [r3, #10]
    9adc:	b2db      	uxtb	r3, r3
    9ade:	f003 0301 	and.w	r3, r3, #1
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	bf14      	ite	ne
    9ae6:	2301      	movne	r3, #1
    9ae8:	2300      	moveq	r3, #0
    9aea:	b2db      	uxtb	r3, r3
}
    9aec:	4618      	mov	r0, r3
    9aee:	370c      	adds	r7, #12
    9af0:	46bd      	mov	sp, r7
    9af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9af6:	4770      	bx	lr

00009af8 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    9af8:	b480      	push	{r7}
    9afa:	b083      	sub	sp, #12
    9afc:	af00      	add	r7, sp, #0
    9afe:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    9b00:	687b      	ldr	r3, [r7, #4]
    9b02:	2201      	movs	r2, #1
    9b04:	729a      	strb	r2, [r3, #10]
}
    9b06:	bf00      	nop
    9b08:	370c      	adds	r7, #12
    9b0a:	46bd      	mov	sp, r7
    9b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b10:	4770      	bx	lr

00009b12 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    9b12:	b480      	push	{r7}
    9b14:	b083      	sub	sp, #12
    9b16:	af00      	add	r7, sp, #0
    9b18:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    9b1a:	687b      	ldr	r3, [r7, #4]
    9b1c:	2202      	movs	r2, #2
    9b1e:	729a      	strb	r2, [r3, #10]
}
    9b20:	bf00      	nop
    9b22:	370c      	adds	r7, #12
    9b24:	46bd      	mov	sp, r7
    9b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b2a:	4770      	bx	lr

00009b2c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    9b2c:	b480      	push	{r7}
    9b2e:	b083      	sub	sp, #12
    9b30:	af00      	add	r7, sp, #0
    9b32:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    9b34:	687b      	ldr	r3, [r7, #4]
    9b36:	2201      	movs	r2, #1
    9b38:	725a      	strb	r2, [r3, #9]
}
    9b3a:	bf00      	nop
    9b3c:	370c      	adds	r7, #12
    9b3e:	46bd      	mov	sp, r7
    9b40:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b44:	4770      	bx	lr

00009b46 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    9b46:	b480      	push	{r7}
    9b48:	b083      	sub	sp, #12
    9b4a:	af00      	add	r7, sp, #0
    9b4c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	7a5b      	ldrb	r3, [r3, #9]
    9b52:	b2db      	uxtb	r3, r3
    9b54:	085b      	lsrs	r3, r3, #1
    9b56:	f003 0301 	and.w	r3, r3, #1
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	bf14      	ite	ne
    9b5e:	2301      	movne	r3, #1
    9b60:	2300      	moveq	r3, #0
    9b62:	b2db      	uxtb	r3, r3
}
    9b64:	4618      	mov	r0, r3
    9b66:	370c      	adds	r7, #12
    9b68:	46bd      	mov	sp, r7
    9b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b6e:	4770      	bx	lr

00009b70 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    9b70:	b580      	push	{r7, lr}
    9b72:	b082      	sub	sp, #8
    9b74:	af00      	add	r7, sp, #0
    9b76:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    9b78:	687b      	ldr	r3, [r7, #4]
    9b7a:	681b      	ldr	r3, [r3, #0]
    9b7c:	f043 0201 	orr.w	r2, r3, #1
    9b80:	687b      	ldr	r3, [r7, #4]
    9b82:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9b84:	2101      	movs	r1, #1
    9b86:	6878      	ldr	r0, [r7, #4]
    9b88:	4b02      	ldr	r3, [pc, #8]	; (9b94 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    9b8a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9b8c:	bf00      	nop
    9b8e:	3708      	adds	r7, #8
    9b90:	46bd      	mov	sp, r7
    9b92:	bd80      	pop	{r7, pc}
    9b94:	00009a85 	.word	0x00009a85

00009b98 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9b98:	b580      	push	{r7, lr}
    9b9a:	b082      	sub	sp, #8
    9b9c:	af00      	add	r7, sp, #0
    9b9e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    9ba0:	687b      	ldr	r3, [r7, #4]
    9ba2:	681b      	ldr	r3, [r3, #0]
    9ba4:	f043 0202 	orr.w	r2, r3, #2
    9ba8:	687b      	ldr	r3, [r7, #4]
    9baa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9bac:	2103      	movs	r1, #3
    9bae:	6878      	ldr	r0, [r7, #4]
    9bb0:	4b02      	ldr	r3, [pc, #8]	; (9bbc <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    9bb2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9bb4:	bf00      	nop
    9bb6:	3708      	adds	r7, #8
    9bb8:	46bd      	mov	sp, r7
    9bba:	bd80      	pop	{r7, pc}
    9bbc:	00009a85 	.word	0x00009a85

00009bc0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9bc0:	b580      	push	{r7, lr}
    9bc2:	b084      	sub	sp, #16
    9bc4:	af00      	add	r7, sp, #0
    9bc6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9bc8:	2103      	movs	r1, #3
    9bca:	6878      	ldr	r0, [r7, #4]
    9bcc:	4b09      	ldr	r3, [pc, #36]	; (9bf4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    9bce:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9bd0:	687b      	ldr	r3, [r7, #4]
    9bd2:	681b      	ldr	r3, [r3, #0]
    9bd4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    9bd6:	68fb      	ldr	r3, [r7, #12]
    9bd8:	085b      	lsrs	r3, r3, #1
    9bda:	f003 0301 	and.w	r3, r3, #1
    9bde:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9be0:	68fb      	ldr	r3, [r7, #12]
    9be2:	2b00      	cmp	r3, #0
    9be4:	bf14      	ite	ne
    9be6:	2301      	movne	r3, #1
    9be8:	2300      	moveq	r3, #0
    9bea:	b2db      	uxtb	r3, r3
}
    9bec:	4618      	mov	r0, r3
    9bee:	3710      	adds	r7, #16
    9bf0:	46bd      	mov	sp, r7
    9bf2:	bd80      	pop	{r7, pc}
    9bf4:	00009a85 	.word	0x00009a85

00009bf8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9bf8:	b580      	push	{r7, lr}
    9bfa:	b082      	sub	sp, #8
    9bfc:	af00      	add	r7, sp, #0
    9bfe:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9c00:	687b      	ldr	r3, [r7, #4]
    9c02:	681b      	ldr	r3, [r3, #0]
    9c04:	f023 0202 	bic.w	r2, r3, #2
    9c08:	687b      	ldr	r3, [r7, #4]
    9c0a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9c0c:	2103      	movs	r1, #3
    9c0e:	6878      	ldr	r0, [r7, #4]
    9c10:	4b02      	ldr	r3, [pc, #8]	; (9c1c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    9c12:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9c14:	bf00      	nop
    9c16:	3708      	adds	r7, #8
    9c18:	46bd      	mov	sp, r7
    9c1a:	bd80      	pop	{r7, pc}
    9c1c:	00009a85 	.word	0x00009a85

00009c20 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    9c20:	b480      	push	{r7}
    9c22:	b085      	sub	sp, #20
    9c24:	af00      	add	r7, sp, #0
    9c26:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	681b      	ldr	r3, [r3, #0]
    9c2c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    9c2e:	68fb      	ldr	r3, [r7, #12]
    9c30:	089b      	lsrs	r3, r3, #2
    9c32:	f003 0303 	and.w	r3, r3, #3
    9c36:	60fb      	str	r3, [r7, #12]
	return tmp;
    9c38:	68fb      	ldr	r3, [r7, #12]
}
    9c3a:	4618      	mov	r0, r3
    9c3c:	3714      	adds	r7, #20
    9c3e:	46bd      	mov	sp, r7
    9c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c44:	4770      	bx	lr
	...

00009c48 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    9c48:	b580      	push	{r7, lr}
    9c4a:	b084      	sub	sp, #16
    9c4c:	af00      	add	r7, sp, #0
    9c4e:	6078      	str	r0, [r7, #4]
    9c50:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9c52:	2103      	movs	r1, #3
    9c54:	6878      	ldr	r0, [r7, #4]
    9c56:	4b07      	ldr	r3, [pc, #28]	; (9c74 <hri_tc_get_CTRLA_reg+0x2c>)
    9c58:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9c5a:	687b      	ldr	r3, [r7, #4]
    9c5c:	681b      	ldr	r3, [r3, #0]
    9c5e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9c60:	68fa      	ldr	r2, [r7, #12]
    9c62:	683b      	ldr	r3, [r7, #0]
    9c64:	4013      	ands	r3, r2
    9c66:	60fb      	str	r3, [r7, #12]
	return tmp;
    9c68:	68fb      	ldr	r3, [r7, #12]
}
    9c6a:	4618      	mov	r0, r3
    9c6c:	3710      	adds	r7, #16
    9c6e:	46bd      	mov	sp, r7
    9c70:	bd80      	pop	{r7, pc}
    9c72:	bf00      	nop
    9c74:	00009a85 	.word	0x00009a85

00009c78 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    9c78:	b580      	push	{r7, lr}
    9c7a:	b082      	sub	sp, #8
    9c7c:	af00      	add	r7, sp, #0
    9c7e:	6078      	str	r0, [r7, #4]
    9c80:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    9c82:	687b      	ldr	r3, [r7, #4]
    9c84:	683a      	ldr	r2, [r7, #0]
    9c86:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9c88:	2103      	movs	r1, #3
    9c8a:	6878      	ldr	r0, [r7, #4]
    9c8c:	4b02      	ldr	r3, [pc, #8]	; (9c98 <hri_tc_write_CTRLA_reg+0x20>)
    9c8e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9c90:	bf00      	nop
    9c92:	3708      	adds	r7, #8
    9c94:	46bd      	mov	sp, r7
    9c96:	bd80      	pop	{r7, pc}
    9c98:	00009a85 	.word	0x00009a85

00009c9c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    9c9c:	b480      	push	{r7}
    9c9e:	b083      	sub	sp, #12
    9ca0:	af00      	add	r7, sp, #0
    9ca2:	6078      	str	r0, [r7, #4]
    9ca4:	460b      	mov	r3, r1
    9ca6:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	887a      	ldrh	r2, [r7, #2]
    9cac:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    9cae:	bf00      	nop
    9cb0:	370c      	adds	r7, #12
    9cb2:	46bd      	mov	sp, r7
    9cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cb8:	4770      	bx	lr

00009cba <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    9cba:	b480      	push	{r7}
    9cbc:	b083      	sub	sp, #12
    9cbe:	af00      	add	r7, sp, #0
    9cc0:	6078      	str	r0, [r7, #4]
    9cc2:	460b      	mov	r3, r1
    9cc4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    9cc6:	687b      	ldr	r3, [r7, #4]
    9cc8:	78fa      	ldrb	r2, [r7, #3]
    9cca:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    9ccc:	bf00      	nop
    9cce:	370c      	adds	r7, #12
    9cd0:	46bd      	mov	sp, r7
    9cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cd6:	4770      	bx	lr

00009cd8 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    9cd8:	b480      	push	{r7}
    9cda:	b083      	sub	sp, #12
    9cdc:	af00      	add	r7, sp, #0
    9cde:	6078      	str	r0, [r7, #4]
    9ce0:	460b      	mov	r3, r1
    9ce2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	78fa      	ldrb	r2, [r7, #3]
    9ce8:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    9cea:	bf00      	nop
    9cec:	370c      	adds	r7, #12
    9cee:	46bd      	mov	sp, r7
    9cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cf4:	4770      	bx	lr
	...

00009cf8 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    9cf8:	b580      	push	{r7, lr}
    9cfa:	b082      	sub	sp, #8
    9cfc:	af00      	add	r7, sp, #0
    9cfe:	6078      	str	r0, [r7, #4]
    9d00:	460b      	mov	r3, r1
    9d02:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    9d04:	687b      	ldr	r3, [r7, #4]
    9d06:	78fa      	ldrb	r2, [r7, #3]
    9d08:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    9d0a:	2120      	movs	r1, #32
    9d0c:	6878      	ldr	r0, [r7, #4]
    9d0e:	4b03      	ldr	r3, [pc, #12]	; (9d1c <hri_tccount8_write_PER_reg+0x24>)
    9d10:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9d12:	bf00      	nop
    9d14:	3708      	adds	r7, #8
    9d16:	46bd      	mov	sp, r7
    9d18:	bd80      	pop	{r7, pc}
    9d1a:	bf00      	nop
    9d1c:	00009a85 	.word	0x00009a85

00009d20 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    9d20:	b580      	push	{r7, lr}
    9d22:	b082      	sub	sp, #8
    9d24:	af00      	add	r7, sp, #0
    9d26:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    9d28:	2120      	movs	r1, #32
    9d2a:	6878      	ldr	r0, [r7, #4]
    9d2c:	4b04      	ldr	r3, [pc, #16]	; (9d40 <hri_tccount8_read_PER_reg+0x20>)
    9d2e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    9d30:	687b      	ldr	r3, [r7, #4]
    9d32:	7edb      	ldrb	r3, [r3, #27]
    9d34:	b2db      	uxtb	r3, r3
}
    9d36:	4618      	mov	r0, r3
    9d38:	3708      	adds	r7, #8
    9d3a:	46bd      	mov	sp, r7
    9d3c:	bd80      	pop	{r7, pc}
    9d3e:	bf00      	nop
    9d40:	00009a85 	.word	0x00009a85

00009d44 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    9d44:	b580      	push	{r7, lr}
    9d46:	b082      	sub	sp, #8
    9d48:	af00      	add	r7, sp, #0
    9d4a:	6078      	str	r0, [r7, #4]
    9d4c:	460b      	mov	r3, r1
    9d4e:	70fb      	strb	r3, [r7, #3]
    9d50:	4613      	mov	r3, r2
    9d52:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9d54:	78fb      	ldrb	r3, [r7, #3]
    9d56:	687a      	ldr	r2, [r7, #4]
    9d58:	4413      	add	r3, r2
    9d5a:	78ba      	ldrb	r2, [r7, #2]
    9d5c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9d5e:	21c0      	movs	r1, #192	; 0xc0
    9d60:	6878      	ldr	r0, [r7, #4]
    9d62:	4b03      	ldr	r3, [pc, #12]	; (9d70 <hri_tccount8_write_CC_reg+0x2c>)
    9d64:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9d66:	bf00      	nop
    9d68:	3708      	adds	r7, #8
    9d6a:	46bd      	mov	sp, r7
    9d6c:	bd80      	pop	{r7, pc}
    9d6e:	bf00      	nop
    9d70:	00009a85 	.word	0x00009a85

00009d74 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    9d74:	b580      	push	{r7, lr}
    9d76:	b082      	sub	sp, #8
    9d78:	af00      	add	r7, sp, #0
    9d7a:	6078      	str	r0, [r7, #4]
    9d7c:	460b      	mov	r3, r1
    9d7e:	70fb      	strb	r3, [r7, #3]
    9d80:	4613      	mov	r3, r2
    9d82:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    9d84:	78fb      	ldrb	r3, [r7, #3]
    9d86:	687a      	ldr	r2, [r7, #4]
    9d88:	330c      	adds	r3, #12
    9d8a:	005b      	lsls	r3, r3, #1
    9d8c:	4413      	add	r3, r2
    9d8e:	883a      	ldrh	r2, [r7, #0]
    9d90:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9d92:	21c0      	movs	r1, #192	; 0xc0
    9d94:	6878      	ldr	r0, [r7, #4]
    9d96:	4b03      	ldr	r3, [pc, #12]	; (9da4 <hri_tccount16_write_CC_reg+0x30>)
    9d98:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9d9a:	bf00      	nop
    9d9c:	3708      	adds	r7, #8
    9d9e:	46bd      	mov	sp, r7
    9da0:	bd80      	pop	{r7, pc}
    9da2:	bf00      	nop
    9da4:	00009a85 	.word	0x00009a85

00009da8 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    9da8:	b580      	push	{r7, lr}
    9daa:	b082      	sub	sp, #8
    9dac:	af00      	add	r7, sp, #0
    9dae:	6078      	str	r0, [r7, #4]
    9db0:	460b      	mov	r3, r1
    9db2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9db4:	21c0      	movs	r1, #192	; 0xc0
    9db6:	6878      	ldr	r0, [r7, #4]
    9db8:	4b06      	ldr	r3, [pc, #24]	; (9dd4 <hri_tccount16_read_CC_reg+0x2c>)
    9dba:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    9dbc:	78fb      	ldrb	r3, [r7, #3]
    9dbe:	687a      	ldr	r2, [r7, #4]
    9dc0:	330c      	adds	r3, #12
    9dc2:	005b      	lsls	r3, r3, #1
    9dc4:	4413      	add	r3, r2
    9dc6:	889b      	ldrh	r3, [r3, #4]
    9dc8:	b29b      	uxth	r3, r3
}
    9dca:	4618      	mov	r0, r3
    9dcc:	3708      	adds	r7, #8
    9dce:	46bd      	mov	sp, r7
    9dd0:	bd80      	pop	{r7, pc}
    9dd2:	bf00      	nop
    9dd4:	00009a85 	.word	0x00009a85

00009dd8 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    9dd8:	b580      	push	{r7, lr}
    9dda:	b084      	sub	sp, #16
    9ddc:	af00      	add	r7, sp, #0
    9dde:	60f8      	str	r0, [r7, #12]
    9de0:	460b      	mov	r3, r1
    9de2:	607a      	str	r2, [r7, #4]
    9de4:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    9de6:	7afb      	ldrb	r3, [r7, #11]
    9de8:	68fa      	ldr	r2, [r7, #12]
    9dea:	3306      	adds	r3, #6
    9dec:	009b      	lsls	r3, r3, #2
    9dee:	4413      	add	r3, r2
    9df0:	687a      	ldr	r2, [r7, #4]
    9df2:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9df4:	21c0      	movs	r1, #192	; 0xc0
    9df6:	68f8      	ldr	r0, [r7, #12]
    9df8:	4b02      	ldr	r3, [pc, #8]	; (9e04 <hri_tccount32_write_CC_reg+0x2c>)
    9dfa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9dfc:	bf00      	nop
    9dfe:	3710      	adds	r7, #16
    9e00:	46bd      	mov	sp, r7
    9e02:	bd80      	pop	{r7, pc}
    9e04:	00009a85 	.word	0x00009a85

00009e08 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    9e08:	b580      	push	{r7, lr}
    9e0a:	b082      	sub	sp, #8
    9e0c:	af00      	add	r7, sp, #0
    9e0e:	6078      	str	r0, [r7, #4]
    9e10:	460b      	mov	r3, r1
    9e12:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9e14:	21c0      	movs	r1, #192	; 0xc0
    9e16:	6878      	ldr	r0, [r7, #4]
    9e18:	4b05      	ldr	r3, [pc, #20]	; (9e30 <hri_tccount32_read_CC_reg+0x28>)
    9e1a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    9e1c:	78fb      	ldrb	r3, [r7, #3]
    9e1e:	687a      	ldr	r2, [r7, #4]
    9e20:	3306      	adds	r3, #6
    9e22:	009b      	lsls	r3, r3, #2
    9e24:	4413      	add	r3, r2
    9e26:	685b      	ldr	r3, [r3, #4]
}
    9e28:	4618      	mov	r0, r3
    9e2a:	3708      	adds	r7, #8
    9e2c:	46bd      	mov	sp, r7
    9e2e:	bd80      	pop	{r7, pc}
    9e30:	00009a85 	.word	0x00009a85

00009e34 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    9e34:	b580      	push	{r7, lr}
    9e36:	b084      	sub	sp, #16
    9e38:	af00      	add	r7, sp, #0
    9e3a:	6078      	str	r0, [r7, #4]
    9e3c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    9e3e:	6838      	ldr	r0, [r7, #0]
    9e40:	4b93      	ldr	r3, [pc, #588]	; (a090 <_tc_timer_init+0x25c>)
    9e42:	4798      	blx	r3
    9e44:	4603      	mov	r3, r0
    9e46:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    9e48:	687b      	ldr	r3, [r7, #4]
    9e4a:	683a      	ldr	r2, [r7, #0]
    9e4c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    9e4e:	22a4      	movs	r2, #164	; 0xa4
    9e50:	4990      	ldr	r1, [pc, #576]	; (a094 <_tc_timer_init+0x260>)
    9e52:	2001      	movs	r0, #1
    9e54:	4b90      	ldr	r3, [pc, #576]	; (a098 <_tc_timer_init+0x264>)
    9e56:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9e58:	2101      	movs	r1, #1
    9e5a:	6838      	ldr	r0, [r7, #0]
    9e5c:	4b8f      	ldr	r3, [pc, #572]	; (a09c <_tc_timer_init+0x268>)
    9e5e:	4798      	blx	r3
    9e60:	4603      	mov	r3, r0
    9e62:	f083 0301 	eor.w	r3, r3, #1
    9e66:	b2db      	uxtb	r3, r3
    9e68:	2b00      	cmp	r3, #0
    9e6a:	d011      	beq.n	9e90 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9e6c:	2102      	movs	r1, #2
    9e6e:	6838      	ldr	r0, [r7, #0]
    9e70:	4b8b      	ldr	r3, [pc, #556]	; (a0a0 <_tc_timer_init+0x26c>)
    9e72:	4798      	blx	r3
    9e74:	4603      	mov	r3, r0
    9e76:	2b00      	cmp	r3, #0
    9e78:	d006      	beq.n	9e88 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9e7a:	6838      	ldr	r0, [r7, #0]
    9e7c:	4b89      	ldr	r3, [pc, #548]	; (a0a4 <_tc_timer_init+0x270>)
    9e7e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9e80:	2102      	movs	r1, #2
    9e82:	6838      	ldr	r0, [r7, #0]
    9e84:	4b88      	ldr	r3, [pc, #544]	; (a0a8 <_tc_timer_init+0x274>)
    9e86:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9e88:	2101      	movs	r1, #1
    9e8a:	6838      	ldr	r0, [r7, #0]
    9e8c:	4b87      	ldr	r3, [pc, #540]	; (a0ac <_tc_timer_init+0x278>)
    9e8e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9e90:	2101      	movs	r1, #1
    9e92:	6838      	ldr	r0, [r7, #0]
    9e94:	4b84      	ldr	r3, [pc, #528]	; (a0a8 <_tc_timer_init+0x274>)
    9e96:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9e98:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9e9c:	4984      	ldr	r1, [pc, #528]	; (a0b0 <_tc_timer_init+0x27c>)
    9e9e:	4613      	mov	r3, r2
    9ea0:	009b      	lsls	r3, r3, #2
    9ea2:	4413      	add	r3, r2
    9ea4:	009b      	lsls	r3, r3, #2
    9ea6:	440b      	add	r3, r1
    9ea8:	3304      	adds	r3, #4
    9eaa:	681b      	ldr	r3, [r3, #0]
    9eac:	4619      	mov	r1, r3
    9eae:	6838      	ldr	r0, [r7, #0]
    9eb0:	4b7e      	ldr	r3, [pc, #504]	; (a0ac <_tc_timer_init+0x278>)
    9eb2:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9eb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9eb8:	497d      	ldr	r1, [pc, #500]	; (a0b0 <_tc_timer_init+0x27c>)
    9eba:	4613      	mov	r3, r2
    9ebc:	009b      	lsls	r3, r3, #2
    9ebe:	4413      	add	r3, r2
    9ec0:	009b      	lsls	r3, r3, #2
    9ec2:	440b      	add	r3, r1
    9ec4:	330a      	adds	r3, #10
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	4619      	mov	r1, r3
    9eca:	6838      	ldr	r0, [r7, #0]
    9ecc:	4b79      	ldr	r3, [pc, #484]	; (a0b4 <_tc_timer_init+0x280>)
    9ece:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9ed0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ed4:	4976      	ldr	r1, [pc, #472]	; (a0b0 <_tc_timer_init+0x27c>)
    9ed6:	4613      	mov	r3, r2
    9ed8:	009b      	lsls	r3, r3, #2
    9eda:	4413      	add	r3, r2
    9edc:	009b      	lsls	r3, r3, #2
    9ede:	440b      	add	r3, r1
    9ee0:	3308      	adds	r3, #8
    9ee2:	881b      	ldrh	r3, [r3, #0]
    9ee4:	4619      	mov	r1, r3
    9ee6:	6838      	ldr	r0, [r7, #0]
    9ee8:	4b73      	ldr	r3, [pc, #460]	; (a0b8 <_tc_timer_init+0x284>)
    9eea:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    9eec:	2101      	movs	r1, #1
    9eee:	6838      	ldr	r0, [r7, #0]
    9ef0:	4b72      	ldr	r3, [pc, #456]	; (a0bc <_tc_timer_init+0x288>)
    9ef2:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9ef4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ef8:	496d      	ldr	r1, [pc, #436]	; (a0b0 <_tc_timer_init+0x27c>)
    9efa:	4613      	mov	r3, r2
    9efc:	009b      	lsls	r3, r3, #2
    9efe:	4413      	add	r3, r2
    9f00:	009b      	lsls	r3, r3, #2
    9f02:	440b      	add	r3, r1
    9f04:	3304      	adds	r3, #4
    9f06:	681b      	ldr	r3, [r3, #0]
    9f08:	f003 030c 	and.w	r3, r3, #12
    9f0c:	2b08      	cmp	r3, #8
    9f0e:	d11e      	bne.n	9f4e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9f10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9f14:	4966      	ldr	r1, [pc, #408]	; (a0b0 <_tc_timer_init+0x27c>)
    9f16:	4613      	mov	r3, r2
    9f18:	009b      	lsls	r3, r3, #2
    9f1a:	4413      	add	r3, r2
    9f1c:	009b      	lsls	r3, r3, #2
    9f1e:	440b      	add	r3, r1
    9f20:	330c      	adds	r3, #12
    9f22:	681b      	ldr	r3, [r3, #0]
    9f24:	461a      	mov	r2, r3
    9f26:	2100      	movs	r1, #0
    9f28:	6838      	ldr	r0, [r7, #0]
    9f2a:	4b65      	ldr	r3, [pc, #404]	; (a0c0 <_tc_timer_init+0x28c>)
    9f2c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9f2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9f32:	495f      	ldr	r1, [pc, #380]	; (a0b0 <_tc_timer_init+0x27c>)
    9f34:	4613      	mov	r3, r2
    9f36:	009b      	lsls	r3, r3, #2
    9f38:	4413      	add	r3, r2
    9f3a:	009b      	lsls	r3, r3, #2
    9f3c:	440b      	add	r3, r1
    9f3e:	3310      	adds	r3, #16
    9f40:	681b      	ldr	r3, [r3, #0]
    9f42:	461a      	mov	r2, r3
    9f44:	2101      	movs	r1, #1
    9f46:	6838      	ldr	r0, [r7, #0]
    9f48:	4b5d      	ldr	r3, [pc, #372]	; (a0c0 <_tc_timer_init+0x28c>)
    9f4a:	4798      	blx	r3
    9f4c:	e06a      	b.n	a024 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9f4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9f52:	4957      	ldr	r1, [pc, #348]	; (a0b0 <_tc_timer_init+0x27c>)
    9f54:	4613      	mov	r3, r2
    9f56:	009b      	lsls	r3, r3, #2
    9f58:	4413      	add	r3, r2
    9f5a:	009b      	lsls	r3, r3, #2
    9f5c:	440b      	add	r3, r1
    9f5e:	3304      	adds	r3, #4
    9f60:	681b      	ldr	r3, [r3, #0]
    9f62:	f003 030c 	and.w	r3, r3, #12
    9f66:	2b00      	cmp	r3, #0
    9f68:	d120      	bne.n	9fac <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9f6a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9f6e:	4950      	ldr	r1, [pc, #320]	; (a0b0 <_tc_timer_init+0x27c>)
    9f70:	4613      	mov	r3, r2
    9f72:	009b      	lsls	r3, r3, #2
    9f74:	4413      	add	r3, r2
    9f76:	009b      	lsls	r3, r3, #2
    9f78:	440b      	add	r3, r1
    9f7a:	330c      	adds	r3, #12
    9f7c:	681b      	ldr	r3, [r3, #0]
    9f7e:	b29b      	uxth	r3, r3
    9f80:	461a      	mov	r2, r3
    9f82:	2100      	movs	r1, #0
    9f84:	6838      	ldr	r0, [r7, #0]
    9f86:	4b4f      	ldr	r3, [pc, #316]	; (a0c4 <_tc_timer_init+0x290>)
    9f88:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9f8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9f8e:	4948      	ldr	r1, [pc, #288]	; (a0b0 <_tc_timer_init+0x27c>)
    9f90:	4613      	mov	r3, r2
    9f92:	009b      	lsls	r3, r3, #2
    9f94:	4413      	add	r3, r2
    9f96:	009b      	lsls	r3, r3, #2
    9f98:	440b      	add	r3, r1
    9f9a:	3310      	adds	r3, #16
    9f9c:	681b      	ldr	r3, [r3, #0]
    9f9e:	b29b      	uxth	r3, r3
    9fa0:	461a      	mov	r2, r3
    9fa2:	2101      	movs	r1, #1
    9fa4:	6838      	ldr	r0, [r7, #0]
    9fa6:	4b47      	ldr	r3, [pc, #284]	; (a0c4 <_tc_timer_init+0x290>)
    9fa8:	4798      	blx	r3
    9faa:	e03b      	b.n	a024 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    9fac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9fb0:	493f      	ldr	r1, [pc, #252]	; (a0b0 <_tc_timer_init+0x27c>)
    9fb2:	4613      	mov	r3, r2
    9fb4:	009b      	lsls	r3, r3, #2
    9fb6:	4413      	add	r3, r2
    9fb8:	009b      	lsls	r3, r3, #2
    9fba:	440b      	add	r3, r1
    9fbc:	3304      	adds	r3, #4
    9fbe:	681b      	ldr	r3, [r3, #0]
    9fc0:	f003 030c 	and.w	r3, r3, #12
    9fc4:	2b04      	cmp	r3, #4
    9fc6:	d12d      	bne.n	a024 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    9fc8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9fcc:	4938      	ldr	r1, [pc, #224]	; (a0b0 <_tc_timer_init+0x27c>)
    9fce:	4613      	mov	r3, r2
    9fd0:	009b      	lsls	r3, r3, #2
    9fd2:	4413      	add	r3, r2
    9fd4:	009b      	lsls	r3, r3, #2
    9fd6:	440b      	add	r3, r1
    9fd8:	330c      	adds	r3, #12
    9fda:	681b      	ldr	r3, [r3, #0]
    9fdc:	b2db      	uxtb	r3, r3
    9fde:	461a      	mov	r2, r3
    9fe0:	2100      	movs	r1, #0
    9fe2:	6838      	ldr	r0, [r7, #0]
    9fe4:	4b38      	ldr	r3, [pc, #224]	; (a0c8 <_tc_timer_init+0x294>)
    9fe6:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    9fe8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9fec:	4930      	ldr	r1, [pc, #192]	; (a0b0 <_tc_timer_init+0x27c>)
    9fee:	4613      	mov	r3, r2
    9ff0:	009b      	lsls	r3, r3, #2
    9ff2:	4413      	add	r3, r2
    9ff4:	009b      	lsls	r3, r3, #2
    9ff6:	440b      	add	r3, r1
    9ff8:	3310      	adds	r3, #16
    9ffa:	681b      	ldr	r3, [r3, #0]
    9ffc:	b2db      	uxtb	r3, r3
    9ffe:	461a      	mov	r2, r3
    a000:	2101      	movs	r1, #1
    a002:	6838      	ldr	r0, [r7, #0]
    a004:	4b30      	ldr	r3, [pc, #192]	; (a0c8 <_tc_timer_init+0x294>)
    a006:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    a008:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a00c:	4928      	ldr	r1, [pc, #160]	; (a0b0 <_tc_timer_init+0x27c>)
    a00e:	4613      	mov	r3, r2
    a010:	009b      	lsls	r3, r3, #2
    a012:	4413      	add	r3, r2
    a014:	009b      	lsls	r3, r3, #2
    a016:	440b      	add	r3, r1
    a018:	330b      	adds	r3, #11
    a01a:	781b      	ldrb	r3, [r3, #0]
    a01c:	4619      	mov	r1, r3
    a01e:	6838      	ldr	r0, [r7, #0]
    a020:	4b2a      	ldr	r3, [pc, #168]	; (a0cc <_tc_timer_init+0x298>)
    a022:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    a024:	6838      	ldr	r0, [r7, #0]
    a026:	4b2a      	ldr	r3, [pc, #168]	; (a0d0 <_tc_timer_init+0x29c>)
    a028:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    a02a:	6879      	ldr	r1, [r7, #4]
    a02c:	6838      	ldr	r0, [r7, #0]
    a02e:	4b29      	ldr	r3, [pc, #164]	; (a0d4 <_tc_timer_init+0x2a0>)
    a030:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    a032:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a036:	491e      	ldr	r1, [pc, #120]	; (a0b0 <_tc_timer_init+0x27c>)
    a038:	4613      	mov	r3, r2
    a03a:	009b      	lsls	r3, r3, #2
    a03c:	4413      	add	r3, r2
    a03e:	009b      	lsls	r3, r3, #2
    a040:	440b      	add	r3, r1
    a042:	3302      	adds	r3, #2
    a044:	f9b3 3000 	ldrsh.w	r3, [r3]
    a048:	4618      	mov	r0, r3
    a04a:	4b23      	ldr	r3, [pc, #140]	; (a0d8 <_tc_timer_init+0x2a4>)
    a04c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    a04e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a052:	4917      	ldr	r1, [pc, #92]	; (a0b0 <_tc_timer_init+0x27c>)
    a054:	4613      	mov	r3, r2
    a056:	009b      	lsls	r3, r3, #2
    a058:	4413      	add	r3, r2
    a05a:	009b      	lsls	r3, r3, #2
    a05c:	440b      	add	r3, r1
    a05e:	3302      	adds	r3, #2
    a060:	f9b3 3000 	ldrsh.w	r3, [r3]
    a064:	4618      	mov	r0, r3
    a066:	4b1d      	ldr	r3, [pc, #116]	; (a0dc <_tc_timer_init+0x2a8>)
    a068:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    a06a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a06e:	4910      	ldr	r1, [pc, #64]	; (a0b0 <_tc_timer_init+0x27c>)
    a070:	4613      	mov	r3, r2
    a072:	009b      	lsls	r3, r3, #2
    a074:	4413      	add	r3, r2
    a076:	009b      	lsls	r3, r3, #2
    a078:	440b      	add	r3, r1
    a07a:	3302      	adds	r3, #2
    a07c:	f9b3 3000 	ldrsh.w	r3, [r3]
    a080:	4618      	mov	r0, r3
    a082:	4b17      	ldr	r3, [pc, #92]	; (a0e0 <_tc_timer_init+0x2ac>)
    a084:	4798      	blx	r3

	return ERR_NONE;
    a086:	2300      	movs	r3, #0
}
    a088:	4618      	mov	r0, r3
    a08a:	3710      	adds	r7, #16
    a08c:	46bd      	mov	sp, r7
    a08e:	bd80      	pop	{r7, pc}
    a090:	0000a6c5 	.word	0x0000a6c5
    a094:	00010304 	.word	0x00010304
    a098:	00005af5 	.word	0x00005af5
    a09c:	00009aa9 	.word	0x00009aa9
    a0a0:	00009c49 	.word	0x00009c49
    a0a4:	00009bf9 	.word	0x00009bf9
    a0a8:	00009a85 	.word	0x00009a85
    a0ac:	00009c79 	.word	0x00009c79
    a0b0:	200000e0 	.word	0x200000e0
    a0b4:	00009cd9 	.word	0x00009cd9
    a0b8:	00009c9d 	.word	0x00009c9d
    a0bc:	00009cbb 	.word	0x00009cbb
    a0c0:	00009dd9 	.word	0x00009dd9
    a0c4:	00009d75 	.word	0x00009d75
    a0c8:	00009d45 	.word	0x00009d45
    a0cc:	00009cf9 	.word	0x00009cf9
    a0d0:	00009b2d 	.word	0x00009b2d
    a0d4:	0000a72d 	.word	0x0000a72d
    a0d8:	00009a05 	.word	0x00009a05
    a0dc:	00009a49 	.word	0x00009a49
    a0e0:	000099c9 	.word	0x000099c9

0000a0e4 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    a0e4:	b580      	push	{r7, lr}
    a0e6:	b084      	sub	sp, #16
    a0e8:	af00      	add	r7, sp, #0
    a0ea:	6078      	str	r0, [r7, #4]
    a0ec:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    a0ee:	6838      	ldr	r0, [r7, #0]
    a0f0:	4b73      	ldr	r3, [pc, #460]	; (a2c0 <_pwm_init+0x1dc>)
    a0f2:	4798      	blx	r3
    a0f4:	4603      	mov	r3, r0
    a0f6:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	683a      	ldr	r2, [r7, #0]
    a0fc:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    a0fe:	2101      	movs	r1, #1
    a100:	6838      	ldr	r0, [r7, #0]
    a102:	4b70      	ldr	r3, [pc, #448]	; (a2c4 <_pwm_init+0x1e0>)
    a104:	4798      	blx	r3
    a106:	4603      	mov	r3, r0
    a108:	f083 0301 	eor.w	r3, r3, #1
    a10c:	b2db      	uxtb	r3, r3
    a10e:	2b00      	cmp	r3, #0
    a110:	d011      	beq.n	a136 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    a112:	2102      	movs	r1, #2
    a114:	6838      	ldr	r0, [r7, #0]
    a116:	4b6c      	ldr	r3, [pc, #432]	; (a2c8 <_pwm_init+0x1e4>)
    a118:	4798      	blx	r3
    a11a:	4603      	mov	r3, r0
    a11c:	2b00      	cmp	r3, #0
    a11e:	d006      	beq.n	a12e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    a120:	6838      	ldr	r0, [r7, #0]
    a122:	4b6a      	ldr	r3, [pc, #424]	; (a2cc <_pwm_init+0x1e8>)
    a124:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    a126:	2102      	movs	r1, #2
    a128:	6838      	ldr	r0, [r7, #0]
    a12a:	4b69      	ldr	r3, [pc, #420]	; (a2d0 <_pwm_init+0x1ec>)
    a12c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    a12e:	2101      	movs	r1, #1
    a130:	6838      	ldr	r0, [r7, #0]
    a132:	4b68      	ldr	r3, [pc, #416]	; (a2d4 <_pwm_init+0x1f0>)
    a134:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    a136:	2101      	movs	r1, #1
    a138:	6838      	ldr	r0, [r7, #0]
    a13a:	4b65      	ldr	r3, [pc, #404]	; (a2d0 <_pwm_init+0x1ec>)
    a13c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    a13e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a142:	4965      	ldr	r1, [pc, #404]	; (a2d8 <_pwm_init+0x1f4>)
    a144:	4613      	mov	r3, r2
    a146:	009b      	lsls	r3, r3, #2
    a148:	4413      	add	r3, r2
    a14a:	009b      	lsls	r3, r3, #2
    a14c:	440b      	add	r3, r1
    a14e:	3304      	adds	r3, #4
    a150:	681b      	ldr	r3, [r3, #0]
    a152:	4619      	mov	r1, r3
    a154:	6838      	ldr	r0, [r7, #0]
    a156:	4b5f      	ldr	r3, [pc, #380]	; (a2d4 <_pwm_init+0x1f0>)
    a158:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    a15a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a15e:	495e      	ldr	r1, [pc, #376]	; (a2d8 <_pwm_init+0x1f4>)
    a160:	4613      	mov	r3, r2
    a162:	009b      	lsls	r3, r3, #2
    a164:	4413      	add	r3, r2
    a166:	009b      	lsls	r3, r3, #2
    a168:	440b      	add	r3, r1
    a16a:	330a      	adds	r3, #10
    a16c:	781b      	ldrb	r3, [r3, #0]
    a16e:	4619      	mov	r1, r3
    a170:	6838      	ldr	r0, [r7, #0]
    a172:	4b5a      	ldr	r3, [pc, #360]	; (a2dc <_pwm_init+0x1f8>)
    a174:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    a176:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a17a:	4957      	ldr	r1, [pc, #348]	; (a2d8 <_pwm_init+0x1f4>)
    a17c:	4613      	mov	r3, r2
    a17e:	009b      	lsls	r3, r3, #2
    a180:	4413      	add	r3, r2
    a182:	009b      	lsls	r3, r3, #2
    a184:	440b      	add	r3, r1
    a186:	3308      	adds	r3, #8
    a188:	881b      	ldrh	r3, [r3, #0]
    a18a:	4619      	mov	r1, r3
    a18c:	6838      	ldr	r0, [r7, #0]
    a18e:	4b54      	ldr	r3, [pc, #336]	; (a2e0 <_pwm_init+0x1fc>)
    a190:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    a192:	2103      	movs	r1, #3
    a194:	6838      	ldr	r0, [r7, #0]
    a196:	4b53      	ldr	r3, [pc, #332]	; (a2e4 <_pwm_init+0x200>)
    a198:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    a19a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a19e:	494e      	ldr	r1, [pc, #312]	; (a2d8 <_pwm_init+0x1f4>)
    a1a0:	4613      	mov	r3, r2
    a1a2:	009b      	lsls	r3, r3, #2
    a1a4:	4413      	add	r3, r2
    a1a6:	009b      	lsls	r3, r3, #2
    a1a8:	440b      	add	r3, r1
    a1aa:	3304      	adds	r3, #4
    a1ac:	681b      	ldr	r3, [r3, #0]
    a1ae:	f003 030c 	and.w	r3, r3, #12
    a1b2:	2b08      	cmp	r3, #8
    a1b4:	d11e      	bne.n	a1f4 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    a1b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a1ba:	4947      	ldr	r1, [pc, #284]	; (a2d8 <_pwm_init+0x1f4>)
    a1bc:	4613      	mov	r3, r2
    a1be:	009b      	lsls	r3, r3, #2
    a1c0:	4413      	add	r3, r2
    a1c2:	009b      	lsls	r3, r3, #2
    a1c4:	440b      	add	r3, r1
    a1c6:	330c      	adds	r3, #12
    a1c8:	681b      	ldr	r3, [r3, #0]
    a1ca:	461a      	mov	r2, r3
    a1cc:	2100      	movs	r1, #0
    a1ce:	6838      	ldr	r0, [r7, #0]
    a1d0:	4b45      	ldr	r3, [pc, #276]	; (a2e8 <_pwm_init+0x204>)
    a1d2:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    a1d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a1d8:	493f      	ldr	r1, [pc, #252]	; (a2d8 <_pwm_init+0x1f4>)
    a1da:	4613      	mov	r3, r2
    a1dc:	009b      	lsls	r3, r3, #2
    a1de:	4413      	add	r3, r2
    a1e0:	009b      	lsls	r3, r3, #2
    a1e2:	440b      	add	r3, r1
    a1e4:	3310      	adds	r3, #16
    a1e6:	681b      	ldr	r3, [r3, #0]
    a1e8:	461a      	mov	r2, r3
    a1ea:	2101      	movs	r1, #1
    a1ec:	6838      	ldr	r0, [r7, #0]
    a1ee:	4b3e      	ldr	r3, [pc, #248]	; (a2e8 <_pwm_init+0x204>)
    a1f0:	4798      	blx	r3
    a1f2:	e031      	b.n	a258 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    a1f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a1f8:	4937      	ldr	r1, [pc, #220]	; (a2d8 <_pwm_init+0x1f4>)
    a1fa:	4613      	mov	r3, r2
    a1fc:	009b      	lsls	r3, r3, #2
    a1fe:	4413      	add	r3, r2
    a200:	009b      	lsls	r3, r3, #2
    a202:	440b      	add	r3, r1
    a204:	3304      	adds	r3, #4
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	f003 030c 	and.w	r3, r3, #12
    a20c:	2b00      	cmp	r3, #0
    a20e:	d120      	bne.n	a252 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    a210:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a214:	4930      	ldr	r1, [pc, #192]	; (a2d8 <_pwm_init+0x1f4>)
    a216:	4613      	mov	r3, r2
    a218:	009b      	lsls	r3, r3, #2
    a21a:	4413      	add	r3, r2
    a21c:	009b      	lsls	r3, r3, #2
    a21e:	440b      	add	r3, r1
    a220:	330c      	adds	r3, #12
    a222:	681b      	ldr	r3, [r3, #0]
    a224:	b29b      	uxth	r3, r3
    a226:	461a      	mov	r2, r3
    a228:	2100      	movs	r1, #0
    a22a:	6838      	ldr	r0, [r7, #0]
    a22c:	4b2f      	ldr	r3, [pc, #188]	; (a2ec <_pwm_init+0x208>)
    a22e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    a230:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a234:	4928      	ldr	r1, [pc, #160]	; (a2d8 <_pwm_init+0x1f4>)
    a236:	4613      	mov	r3, r2
    a238:	009b      	lsls	r3, r3, #2
    a23a:	4413      	add	r3, r2
    a23c:	009b      	lsls	r3, r3, #2
    a23e:	440b      	add	r3, r1
    a240:	3310      	adds	r3, #16
    a242:	681b      	ldr	r3, [r3, #0]
    a244:	b29b      	uxth	r3, r3
    a246:	461a      	mov	r2, r3
    a248:	2101      	movs	r1, #1
    a24a:	6838      	ldr	r0, [r7, #0]
    a24c:	4b27      	ldr	r3, [pc, #156]	; (a2ec <_pwm_init+0x208>)
    a24e:	4798      	blx	r3
    a250:	e002      	b.n	a258 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    a252:	f04f 33ff 	mov.w	r3, #4294967295
    a256:	e02e      	b.n	a2b6 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    a258:	6879      	ldr	r1, [r7, #4]
    a25a:	6838      	ldr	r0, [r7, #0]
    a25c:	4b24      	ldr	r3, [pc, #144]	; (a2f0 <_pwm_init+0x20c>)
    a25e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    a260:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a264:	491c      	ldr	r1, [pc, #112]	; (a2d8 <_pwm_init+0x1f4>)
    a266:	4613      	mov	r3, r2
    a268:	009b      	lsls	r3, r3, #2
    a26a:	4413      	add	r3, r2
    a26c:	009b      	lsls	r3, r3, #2
    a26e:	440b      	add	r3, r1
    a270:	3302      	adds	r3, #2
    a272:	f9b3 3000 	ldrsh.w	r3, [r3]
    a276:	4618      	mov	r0, r3
    a278:	4b1e      	ldr	r3, [pc, #120]	; (a2f4 <_pwm_init+0x210>)
    a27a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    a27c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a280:	4915      	ldr	r1, [pc, #84]	; (a2d8 <_pwm_init+0x1f4>)
    a282:	4613      	mov	r3, r2
    a284:	009b      	lsls	r3, r3, #2
    a286:	4413      	add	r3, r2
    a288:	009b      	lsls	r3, r3, #2
    a28a:	440b      	add	r3, r1
    a28c:	3302      	adds	r3, #2
    a28e:	f9b3 3000 	ldrsh.w	r3, [r3]
    a292:	4618      	mov	r0, r3
    a294:	4b18      	ldr	r3, [pc, #96]	; (a2f8 <_pwm_init+0x214>)
    a296:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    a298:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a29c:	490e      	ldr	r1, [pc, #56]	; (a2d8 <_pwm_init+0x1f4>)
    a29e:	4613      	mov	r3, r2
    a2a0:	009b      	lsls	r3, r3, #2
    a2a2:	4413      	add	r3, r2
    a2a4:	009b      	lsls	r3, r3, #2
    a2a6:	440b      	add	r3, r1
    a2a8:	3302      	adds	r3, #2
    a2aa:	f9b3 3000 	ldrsh.w	r3, [r3]
    a2ae:	4618      	mov	r0, r3
    a2b0:	4b12      	ldr	r3, [pc, #72]	; (a2fc <_pwm_init+0x218>)
    a2b2:	4798      	blx	r3

	return 0;
    a2b4:	2300      	movs	r3, #0
}
    a2b6:	4618      	mov	r0, r3
    a2b8:	3710      	adds	r7, #16
    a2ba:	46bd      	mov	sp, r7
    a2bc:	bd80      	pop	{r7, pc}
    a2be:	bf00      	nop
    a2c0:	0000a6c5 	.word	0x0000a6c5
    a2c4:	00009aa9 	.word	0x00009aa9
    a2c8:	00009c49 	.word	0x00009c49
    a2cc:	00009bf9 	.word	0x00009bf9
    a2d0:	00009a85 	.word	0x00009a85
    a2d4:	00009c79 	.word	0x00009c79
    a2d8:	200000e0 	.word	0x200000e0
    a2dc:	00009cd9 	.word	0x00009cd9
    a2e0:	00009c9d 	.word	0x00009c9d
    a2e4:	00009cbb 	.word	0x00009cbb
    a2e8:	00009dd9 	.word	0x00009dd9
    a2ec:	00009d75 	.word	0x00009d75
    a2f0:	0000a72d 	.word	0x0000a72d
    a2f4:	00009a05 	.word	0x00009a05
    a2f8:	00009a49 	.word	0x00009a49
    a2fc:	000099c9 	.word	0x000099c9

0000a300 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    a300:	b580      	push	{r7, lr}
    a302:	b084      	sub	sp, #16
    a304:	af00      	add	r7, sp, #0
    a306:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	68db      	ldr	r3, [r3, #12]
    a30c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    a30e:	68f8      	ldr	r0, [r7, #12]
    a310:	4b10      	ldr	r3, [pc, #64]	; (a354 <_tc_timer_deinit+0x54>)
    a312:	4798      	blx	r3
    a314:	4603      	mov	r3, r0
    a316:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    a318:	22f9      	movs	r2, #249	; 0xf9
    a31a:	490f      	ldr	r1, [pc, #60]	; (a358 <_tc_timer_deinit+0x58>)
    a31c:	2001      	movs	r0, #1
    a31e:	4b0f      	ldr	r3, [pc, #60]	; (a35c <_tc_timer_deinit+0x5c>)
    a320:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    a322:	f997 200b 	ldrsb.w	r2, [r7, #11]
    a326:	490e      	ldr	r1, [pc, #56]	; (a360 <_tc_timer_deinit+0x60>)
    a328:	4613      	mov	r3, r2
    a32a:	009b      	lsls	r3, r3, #2
    a32c:	4413      	add	r3, r2
    a32e:	009b      	lsls	r3, r3, #2
    a330:	440b      	add	r3, r1
    a332:	3302      	adds	r3, #2
    a334:	f9b3 3000 	ldrsh.w	r3, [r3]
    a338:	4618      	mov	r0, r3
    a33a:	4b0a      	ldr	r3, [pc, #40]	; (a364 <_tc_timer_deinit+0x64>)
    a33c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    a33e:	68f8      	ldr	r0, [r7, #12]
    a340:	4b09      	ldr	r3, [pc, #36]	; (a368 <_tc_timer_deinit+0x68>)
    a342:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    a344:	68f8      	ldr	r0, [r7, #12]
    a346:	4b09      	ldr	r3, [pc, #36]	; (a36c <_tc_timer_deinit+0x6c>)
    a348:	4798      	blx	r3
}
    a34a:	bf00      	nop
    a34c:	3710      	adds	r7, #16
    a34e:	46bd      	mov	sp, r7
    a350:	bd80      	pop	{r7, pc}
    a352:	bf00      	nop
    a354:	0000a6c5 	.word	0x0000a6c5
    a358:	00010304 	.word	0x00010304
    a35c:	00005af5 	.word	0x00005af5
    a360:	200000e0 	.word	0x200000e0
    a364:	00009a05 	.word	0x00009a05
    a368:	00009bf9 	.word	0x00009bf9
    a36c:	00009b71 	.word	0x00009b71

0000a370 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    a370:	b580      	push	{r7, lr}
    a372:	b082      	sub	sp, #8
    a374:	af00      	add	r7, sp, #0
    a376:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    a378:	687b      	ldr	r3, [r7, #4]
    a37a:	68db      	ldr	r3, [r3, #12]
    a37c:	4618      	mov	r0, r3
    a37e:	4b03      	ldr	r3, [pc, #12]	; (a38c <_tc_timer_start+0x1c>)
    a380:	4798      	blx	r3
}
    a382:	bf00      	nop
    a384:	3708      	adds	r7, #8
    a386:	46bd      	mov	sp, r7
    a388:	bd80      	pop	{r7, pc}
    a38a:	bf00      	nop
    a38c:	00009b99 	.word	0x00009b99

0000a390 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    a390:	b580      	push	{r7, lr}
    a392:	b082      	sub	sp, #8
    a394:	af00      	add	r7, sp, #0
    a396:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    a398:	687b      	ldr	r3, [r7, #4]
    a39a:	691b      	ldr	r3, [r3, #16]
    a39c:	4618      	mov	r0, r3
    a39e:	4b03      	ldr	r3, [pc, #12]	; (a3ac <_pwm_enable+0x1c>)
    a3a0:	4798      	blx	r3
}
    a3a2:	bf00      	nop
    a3a4:	3708      	adds	r7, #8
    a3a6:	46bd      	mov	sp, r7
    a3a8:	bd80      	pop	{r7, pc}
    a3aa:	bf00      	nop
    a3ac:	00009b99 	.word	0x00009b99

0000a3b0 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    a3b0:	b580      	push	{r7, lr}
    a3b2:	b082      	sub	sp, #8
    a3b4:	af00      	add	r7, sp, #0
    a3b6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    a3b8:	687b      	ldr	r3, [r7, #4]
    a3ba:	68db      	ldr	r3, [r3, #12]
    a3bc:	4618      	mov	r0, r3
    a3be:	4b03      	ldr	r3, [pc, #12]	; (a3cc <_tc_timer_stop+0x1c>)
    a3c0:	4798      	blx	r3
}
    a3c2:	bf00      	nop
    a3c4:	3708      	adds	r7, #8
    a3c6:	46bd      	mov	sp, r7
    a3c8:	bd80      	pop	{r7, pc}
    a3ca:	bf00      	nop
    a3cc:	00009bf9 	.word	0x00009bf9

0000a3d0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    a3d0:	b580      	push	{r7, lr}
    a3d2:	b084      	sub	sp, #16
    a3d4:	af00      	add	r7, sp, #0
    a3d6:	6078      	str	r0, [r7, #4]
    a3d8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    a3da:	687b      	ldr	r3, [r7, #4]
    a3dc:	68db      	ldr	r3, [r3, #12]
    a3de:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a3e0:	68f8      	ldr	r0, [r7, #12]
    a3e2:	4b14      	ldr	r3, [pc, #80]	; (a434 <_tc_timer_set_period+0x64>)
    a3e4:	4798      	blx	r3
    a3e6:	4603      	mov	r3, r0
    a3e8:	2b02      	cmp	r3, #2
    a3ea:	d105      	bne.n	a3f8 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    a3ec:	683a      	ldr	r2, [r7, #0]
    a3ee:	2100      	movs	r1, #0
    a3f0:	68f8      	ldr	r0, [r7, #12]
    a3f2:	4b11      	ldr	r3, [pc, #68]	; (a438 <_tc_timer_set_period+0x68>)
    a3f4:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    a3f6:	e019      	b.n	a42c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a3f8:	68f8      	ldr	r0, [r7, #12]
    a3fa:	4b0e      	ldr	r3, [pc, #56]	; (a434 <_tc_timer_set_period+0x64>)
    a3fc:	4798      	blx	r3
    a3fe:	4603      	mov	r3, r0
    a400:	2b00      	cmp	r3, #0
    a402:	d107      	bne.n	a414 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    a404:	683b      	ldr	r3, [r7, #0]
    a406:	b29b      	uxth	r3, r3
    a408:	461a      	mov	r2, r3
    a40a:	2100      	movs	r1, #0
    a40c:	68f8      	ldr	r0, [r7, #12]
    a40e:	4b0b      	ldr	r3, [pc, #44]	; (a43c <_tc_timer_set_period+0x6c>)
    a410:	4798      	blx	r3
}
    a412:	e00b      	b.n	a42c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a414:	68f8      	ldr	r0, [r7, #12]
    a416:	4b07      	ldr	r3, [pc, #28]	; (a434 <_tc_timer_set_period+0x64>)
    a418:	4798      	blx	r3
    a41a:	4603      	mov	r3, r0
    a41c:	2b01      	cmp	r3, #1
    a41e:	d105      	bne.n	a42c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    a420:	683b      	ldr	r3, [r7, #0]
    a422:	b2db      	uxtb	r3, r3
    a424:	4619      	mov	r1, r3
    a426:	68f8      	ldr	r0, [r7, #12]
    a428:	4b05      	ldr	r3, [pc, #20]	; (a440 <_tc_timer_set_period+0x70>)
    a42a:	4798      	blx	r3
}
    a42c:	bf00      	nop
    a42e:	3710      	adds	r7, #16
    a430:	46bd      	mov	sp, r7
    a432:	bd80      	pop	{r7, pc}
    a434:	00009c21 	.word	0x00009c21
    a438:	00009dd9 	.word	0x00009dd9
    a43c:	00009d75 	.word	0x00009d75
    a440:	00009cf9 	.word	0x00009cf9

0000a444 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    a444:	b580      	push	{r7, lr}
    a446:	b084      	sub	sp, #16
    a448:	af00      	add	r7, sp, #0
    a44a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a44c:	687b      	ldr	r3, [r7, #4]
    a44e:	68db      	ldr	r3, [r3, #12]
    a450:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a452:	68f8      	ldr	r0, [r7, #12]
    a454:	4b13      	ldr	r3, [pc, #76]	; (a4a4 <_tc_timer_get_period+0x60>)
    a456:	4798      	blx	r3
    a458:	4603      	mov	r3, r0
    a45a:	2b02      	cmp	r3, #2
    a45c:	d105      	bne.n	a46a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    a45e:	2100      	movs	r1, #0
    a460:	68f8      	ldr	r0, [r7, #12]
    a462:	4b11      	ldr	r3, [pc, #68]	; (a4a8 <_tc_timer_get_period+0x64>)
    a464:	4798      	blx	r3
    a466:	4603      	mov	r3, r0
    a468:	e017      	b.n	a49a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a46a:	68f8      	ldr	r0, [r7, #12]
    a46c:	4b0d      	ldr	r3, [pc, #52]	; (a4a4 <_tc_timer_get_period+0x60>)
    a46e:	4798      	blx	r3
    a470:	4603      	mov	r3, r0
    a472:	2b00      	cmp	r3, #0
    a474:	d105      	bne.n	a482 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    a476:	2100      	movs	r1, #0
    a478:	68f8      	ldr	r0, [r7, #12]
    a47a:	4b0c      	ldr	r3, [pc, #48]	; (a4ac <_tc_timer_get_period+0x68>)
    a47c:	4798      	blx	r3
    a47e:	4603      	mov	r3, r0
    a480:	e00b      	b.n	a49a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    a482:	68f8      	ldr	r0, [r7, #12]
    a484:	4b07      	ldr	r3, [pc, #28]	; (a4a4 <_tc_timer_get_period+0x60>)
    a486:	4798      	blx	r3
    a488:	4603      	mov	r3, r0
    a48a:	2b01      	cmp	r3, #1
    a48c:	d104      	bne.n	a498 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    a48e:	68f8      	ldr	r0, [r7, #12]
    a490:	4b07      	ldr	r3, [pc, #28]	; (a4b0 <_tc_timer_get_period+0x6c>)
    a492:	4798      	blx	r3
    a494:	4603      	mov	r3, r0
    a496:	e000      	b.n	a49a <_tc_timer_get_period+0x56>
	}

	return 0;
    a498:	2300      	movs	r3, #0
}
    a49a:	4618      	mov	r0, r3
    a49c:	3710      	adds	r7, #16
    a49e:	46bd      	mov	sp, r7
    a4a0:	bd80      	pop	{r7, pc}
    a4a2:	bf00      	nop
    a4a4:	00009c21 	.word	0x00009c21
    a4a8:	00009e09 	.word	0x00009e09
    a4ac:	00009da9 	.word	0x00009da9
    a4b0:	00009d21 	.word	0x00009d21

0000a4b4 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    a4b4:	b580      	push	{r7, lr}
    a4b6:	b082      	sub	sp, #8
    a4b8:	af00      	add	r7, sp, #0
    a4ba:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    a4bc:	687b      	ldr	r3, [r7, #4]
    a4be:	68db      	ldr	r3, [r3, #12]
    a4c0:	4618      	mov	r0, r3
    a4c2:	4b03      	ldr	r3, [pc, #12]	; (a4d0 <_tc_timer_is_started+0x1c>)
    a4c4:	4798      	blx	r3
    a4c6:	4603      	mov	r3, r0
}
    a4c8:	4618      	mov	r0, r3
    a4ca:	3708      	adds	r7, #8
    a4cc:	46bd      	mov	sp, r7
    a4ce:	bd80      	pop	{r7, pc}
    a4d0:	00009bc1 	.word	0x00009bc1

0000a4d4 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    a4d4:	b580      	push	{r7, lr}
    a4d6:	b082      	sub	sp, #8
    a4d8:	af00      	add	r7, sp, #0
    a4da:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    a4dc:	687b      	ldr	r3, [r7, #4]
    a4de:	691b      	ldr	r3, [r3, #16]
    a4e0:	4618      	mov	r0, r3
    a4e2:	4b03      	ldr	r3, [pc, #12]	; (a4f0 <_pwm_is_enabled+0x1c>)
    a4e4:	4798      	blx	r3
    a4e6:	4603      	mov	r3, r0
}
    a4e8:	4618      	mov	r0, r3
    a4ea:	3708      	adds	r7, #8
    a4ec:	46bd      	mov	sp, r7
    a4ee:	bd80      	pop	{r7, pc}
    a4f0:	00009bc1 	.word	0x00009bc1

0000a4f4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    a4f4:	b480      	push	{r7}
    a4f6:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    a4f8:	4b02      	ldr	r3, [pc, #8]	; (a504 <_tc_get_timer+0x10>)
}
    a4fa:	4618      	mov	r0, r3
    a4fc:	46bd      	mov	sp, r7
    a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a502:	4770      	bx	lr
    a504:	20000158 	.word	0x20000158

0000a508 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    a508:	b480      	push	{r7}
    a50a:	af00      	add	r7, sp, #0
	return NULL;
    a50c:	2300      	movs	r3, #0
}
    a50e:	4618      	mov	r0, r3
    a510:	46bd      	mov	sp, r7
    a512:	f85d 7b04 	ldr.w	r7, [sp], #4
    a516:	4770      	bx	lr

0000a518 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    a518:	b580      	push	{r7, lr}
    a51a:	b084      	sub	sp, #16
    a51c:	af00      	add	r7, sp, #0
    a51e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	68db      	ldr	r3, [r3, #12]
    a524:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    a526:	68f8      	ldr	r0, [r7, #12]
    a528:	4b0e      	ldr	r3, [pc, #56]	; (a564 <_tc_timer_set_irq+0x4c>)
    a52a:	4798      	blx	r3
    a52c:	4603      	mov	r3, r0
    a52e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    a530:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    a534:	490c      	ldr	r1, [pc, #48]	; (a568 <_tc_timer_set_irq+0x50>)
    a536:	2001      	movs	r0, #1
    a538:	4b0c      	ldr	r3, [pc, #48]	; (a56c <_tc_timer_set_irq+0x54>)
    a53a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    a53c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    a540:	490b      	ldr	r1, [pc, #44]	; (a570 <_tc_timer_set_irq+0x58>)
    a542:	4613      	mov	r3, r2
    a544:	009b      	lsls	r3, r3, #2
    a546:	4413      	add	r3, r2
    a548:	009b      	lsls	r3, r3, #2
    a54a:	440b      	add	r3, r1
    a54c:	3302      	adds	r3, #2
    a54e:	f9b3 3000 	ldrsh.w	r3, [r3]
    a552:	b2db      	uxtb	r3, r3
    a554:	4618      	mov	r0, r3
    a556:	4b07      	ldr	r3, [pc, #28]	; (a574 <_tc_timer_set_irq+0x5c>)
    a558:	4798      	blx	r3
}
    a55a:	bf00      	nop
    a55c:	3710      	adds	r7, #16
    a55e:	46bd      	mov	sp, r7
    a560:	bd80      	pop	{r7, pc}
    a562:	bf00      	nop
    a564:	0000a6c5 	.word	0x0000a6c5
    a568:	00010304 	.word	0x00010304
    a56c:	00005af5 	.word	0x00005af5
    a570:	200000e0 	.word	0x200000e0
    a574:	00006341 	.word	0x00006341

0000a578 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    a578:	b580      	push	{r7, lr}
    a57a:	b084      	sub	sp, #16
    a57c:	af00      	add	r7, sp, #0
    a57e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a580:	687b      	ldr	r3, [r7, #4]
    a582:	68db      	ldr	r3, [r3, #12]
    a584:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a586:	68f8      	ldr	r0, [r7, #12]
    a588:	4b07      	ldr	r3, [pc, #28]	; (a5a8 <tc_interrupt_handler+0x30>)
    a58a:	4798      	blx	r3
    a58c:	4603      	mov	r3, r0
    a58e:	2b00      	cmp	r3, #0
    a590:	d006      	beq.n	a5a0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a592:	68f8      	ldr	r0, [r7, #12]
    a594:	4b05      	ldr	r3, [pc, #20]	; (a5ac <tc_interrupt_handler+0x34>)
    a596:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	681b      	ldr	r3, [r3, #0]
    a59c:	6878      	ldr	r0, [r7, #4]
    a59e:	4798      	blx	r3
	}
}
    a5a0:	bf00      	nop
    a5a2:	3710      	adds	r7, #16
    a5a4:	46bd      	mov	sp, r7
    a5a6:	bd80      	pop	{r7, pc}
    a5a8:	00009ad1 	.word	0x00009ad1
    a5ac:	00009af9 	.word	0x00009af9

0000a5b0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	b084      	sub	sp, #16
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	691b      	ldr	r3, [r3, #16]
    a5bc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a5be:	68f8      	ldr	r0, [r7, #12]
    a5c0:	4b12      	ldr	r3, [pc, #72]	; (a60c <tc_pwm_interrupt_handler+0x5c>)
    a5c2:	4798      	blx	r3
    a5c4:	4603      	mov	r3, r0
    a5c6:	2b00      	cmp	r3, #0
    a5c8:	d00a      	beq.n	a5e0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a5ca:	68f8      	ldr	r0, [r7, #12]
    a5cc:	4b10      	ldr	r3, [pc, #64]	; (a610 <tc_pwm_interrupt_handler+0x60>)
    a5ce:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    a5d0:	687b      	ldr	r3, [r7, #4]
    a5d2:	681b      	ldr	r3, [r3, #0]
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d003      	beq.n	a5e0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    a5d8:	687b      	ldr	r3, [r7, #4]
    a5da:	681b      	ldr	r3, [r3, #0]
    a5dc:	6878      	ldr	r0, [r7, #4]
    a5de:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    a5e0:	68f8      	ldr	r0, [r7, #12]
    a5e2:	4b0c      	ldr	r3, [pc, #48]	; (a614 <tc_pwm_interrupt_handler+0x64>)
    a5e4:	4798      	blx	r3
    a5e6:	4603      	mov	r3, r0
    a5e8:	2b00      	cmp	r3, #0
    a5ea:	d00a      	beq.n	a602 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    a5ec:	68f8      	ldr	r0, [r7, #12]
    a5ee:	4b0a      	ldr	r3, [pc, #40]	; (a618 <tc_pwm_interrupt_handler+0x68>)
    a5f0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    a5f2:	687b      	ldr	r3, [r7, #4]
    a5f4:	685b      	ldr	r3, [r3, #4]
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d003      	beq.n	a602 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    a5fa:	687b      	ldr	r3, [r7, #4]
    a5fc:	685b      	ldr	r3, [r3, #4]
    a5fe:	6878      	ldr	r0, [r7, #4]
    a600:	4798      	blx	r3
		}
	}
}
    a602:	bf00      	nop
    a604:	3710      	adds	r7, #16
    a606:	46bd      	mov	sp, r7
    a608:	bd80      	pop	{r7, pc}
    a60a:	bf00      	nop
    a60c:	00009ad1 	.word	0x00009ad1
    a610:	00009af9 	.word	0x00009af9
    a614:	00009b47 	.word	0x00009b47
    a618:	00009b13 	.word	0x00009b13

0000a61c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    a61c:	b580      	push	{r7, lr}
    a61e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    a620:	4b03      	ldr	r3, [pc, #12]	; (a630 <TC0_Handler+0x14>)
    a622:	681b      	ldr	r3, [r3, #0]
    a624:	4618      	mov	r0, r3
    a626:	4b03      	ldr	r3, [pc, #12]	; (a634 <TC0_Handler+0x18>)
    a628:	4798      	blx	r3
}
    a62a:	bf00      	nop
    a62c:	bd80      	pop	{r7, pc}
    a62e:	bf00      	nop
    a630:	20001e48 	.word	0x20001e48
    a634:	0000a579 	.word	0x0000a579

0000a638 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    a638:	b580      	push	{r7, lr}
    a63a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    a63c:	4b03      	ldr	r3, [pc, #12]	; (a64c <TC2_Handler+0x14>)
    a63e:	681b      	ldr	r3, [r3, #0]
    a640:	4618      	mov	r0, r3
    a642:	4b03      	ldr	r3, [pc, #12]	; (a650 <TC2_Handler+0x18>)
    a644:	4798      	blx	r3
}
    a646:	bf00      	nop
    a648:	bd80      	pop	{r7, pc}
    a64a:	bf00      	nop
    a64c:	20001e4c 	.word	0x20001e4c
    a650:	0000a579 	.word	0x0000a579

0000a654 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    a654:	b580      	push	{r7, lr}
    a656:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    a658:	4b03      	ldr	r3, [pc, #12]	; (a668 <TC4_Handler+0x14>)
    a65a:	681b      	ldr	r3, [r3, #0]
    a65c:	4618      	mov	r0, r3
    a65e:	4b03      	ldr	r3, [pc, #12]	; (a66c <TC4_Handler+0x18>)
    a660:	4798      	blx	r3
}
    a662:	bf00      	nop
    a664:	bd80      	pop	{r7, pc}
    a666:	bf00      	nop
    a668:	20001e50 	.word	0x20001e50
    a66c:	0000a579 	.word	0x0000a579

0000a670 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    a670:	b580      	push	{r7, lr}
    a672:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    a674:	4b03      	ldr	r3, [pc, #12]	; (a684 <TC5_Handler+0x14>)
    a676:	681b      	ldr	r3, [r3, #0]
    a678:	4618      	mov	r0, r3
    a67a:	4b03      	ldr	r3, [pc, #12]	; (a688 <TC5_Handler+0x18>)
    a67c:	4798      	blx	r3
}
    a67e:	bf00      	nop
    a680:	bd80      	pop	{r7, pc}
    a682:	bf00      	nop
    a684:	20001e54 	.word	0x20001e54
    a688:	0000a579 	.word	0x0000a579

0000a68c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    a68c:	b580      	push	{r7, lr}
    a68e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    a690:	4b03      	ldr	r3, [pc, #12]	; (a6a0 <TC6_Handler+0x14>)
    a692:	681b      	ldr	r3, [r3, #0]
    a694:	4618      	mov	r0, r3
    a696:	4b03      	ldr	r3, [pc, #12]	; (a6a4 <TC6_Handler+0x18>)
    a698:	4798      	blx	r3
}
    a69a:	bf00      	nop
    a69c:	bd80      	pop	{r7, pc}
    a69e:	bf00      	nop
    a6a0:	20001e58 	.word	0x20001e58
    a6a4:	0000a579 	.word	0x0000a579

0000a6a8 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    a6a8:	b580      	push	{r7, lr}
    a6aa:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    a6ac:	4b03      	ldr	r3, [pc, #12]	; (a6bc <TC7_Handler+0x14>)
    a6ae:	681b      	ldr	r3, [r3, #0]
    a6b0:	4618      	mov	r0, r3
    a6b2:	4b03      	ldr	r3, [pc, #12]	; (a6c0 <TC7_Handler+0x18>)
    a6b4:	4798      	blx	r3
}
    a6b6:	bf00      	nop
    a6b8:	bd80      	pop	{r7, pc}
    a6ba:	bf00      	nop
    a6bc:	20001e5c 	.word	0x20001e5c
    a6c0:	0000a5b1 	.word	0x0000a5b1

0000a6c4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    a6c4:	b580      	push	{r7, lr}
    a6c6:	b084      	sub	sp, #16
    a6c8:	af00      	add	r7, sp, #0
    a6ca:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    a6cc:	6878      	ldr	r0, [r7, #4]
    a6ce:	4b13      	ldr	r3, [pc, #76]	; (a71c <get_tc_index+0x58>)
    a6d0:	4798      	blx	r3
    a6d2:	4603      	mov	r3, r0
    a6d4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a6d6:	2300      	movs	r3, #0
    a6d8:	73fb      	strb	r3, [r7, #15]
    a6da:	e010      	b.n	a6fe <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    a6dc:	7bfa      	ldrb	r2, [r7, #15]
    a6de:	4910      	ldr	r1, [pc, #64]	; (a720 <get_tc_index+0x5c>)
    a6e0:	4613      	mov	r3, r2
    a6e2:	009b      	lsls	r3, r3, #2
    a6e4:	4413      	add	r3, r2
    a6e6:	009b      	lsls	r3, r3, #2
    a6e8:	440b      	add	r3, r1
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	7bba      	ldrb	r2, [r7, #14]
    a6ee:	429a      	cmp	r2, r3
    a6f0:	d102      	bne.n	a6f8 <get_tc_index+0x34>
			return i;
    a6f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a6f6:	e00d      	b.n	a714 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a6f8:	7bfb      	ldrb	r3, [r7, #15]
    a6fa:	3301      	adds	r3, #1
    a6fc:	73fb      	strb	r3, [r7, #15]
    a6fe:	7bfb      	ldrb	r3, [r7, #15]
    a700:	2b05      	cmp	r3, #5
    a702:	d9eb      	bls.n	a6dc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    a704:	f240 221d 	movw	r2, #541	; 0x21d
    a708:	4906      	ldr	r1, [pc, #24]	; (a724 <get_tc_index+0x60>)
    a70a:	2000      	movs	r0, #0
    a70c:	4b06      	ldr	r3, [pc, #24]	; (a728 <get_tc_index+0x64>)
    a70e:	4798      	blx	r3
	return -1;
    a710:	f04f 33ff 	mov.w	r3, #4294967295
}
    a714:	4618      	mov	r0, r3
    a716:	3710      	adds	r7, #16
    a718:	46bd      	mov	sp, r7
    a71a:	bd80      	pop	{r7, pc}
    a71c:	0000a7c9 	.word	0x0000a7c9
    a720:	200000e0 	.word	0x200000e0
    a724:	00010304 	.word	0x00010304
    a728:	00005af5 	.word	0x00005af5

0000a72c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    a72c:	b480      	push	{r7}
    a72e:	b083      	sub	sp, #12
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]
    a734:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    a736:	687b      	ldr	r3, [r7, #4]
    a738:	4a17      	ldr	r2, [pc, #92]	; (a798 <_tc_init_irq_param+0x6c>)
    a73a:	4293      	cmp	r3, r2
    a73c:	d102      	bne.n	a744 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    a73e:	4a17      	ldr	r2, [pc, #92]	; (a79c <_tc_init_irq_param+0x70>)
    a740:	683b      	ldr	r3, [r7, #0]
    a742:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	4a16      	ldr	r2, [pc, #88]	; (a7a0 <_tc_init_irq_param+0x74>)
    a748:	4293      	cmp	r3, r2
    a74a:	d102      	bne.n	a752 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    a74c:	4a15      	ldr	r2, [pc, #84]	; (a7a4 <_tc_init_irq_param+0x78>)
    a74e:	683b      	ldr	r3, [r7, #0]
    a750:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    a752:	687b      	ldr	r3, [r7, #4]
    a754:	4a14      	ldr	r2, [pc, #80]	; (a7a8 <_tc_init_irq_param+0x7c>)
    a756:	4293      	cmp	r3, r2
    a758:	d102      	bne.n	a760 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    a75a:	4a14      	ldr	r2, [pc, #80]	; (a7ac <_tc_init_irq_param+0x80>)
    a75c:	683b      	ldr	r3, [r7, #0]
    a75e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    a760:	687b      	ldr	r3, [r7, #4]
    a762:	4a13      	ldr	r2, [pc, #76]	; (a7b0 <_tc_init_irq_param+0x84>)
    a764:	4293      	cmp	r3, r2
    a766:	d102      	bne.n	a76e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    a768:	4a12      	ldr	r2, [pc, #72]	; (a7b4 <_tc_init_irq_param+0x88>)
    a76a:	683b      	ldr	r3, [r7, #0]
    a76c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    a76e:	687b      	ldr	r3, [r7, #4]
    a770:	4a11      	ldr	r2, [pc, #68]	; (a7b8 <_tc_init_irq_param+0x8c>)
    a772:	4293      	cmp	r3, r2
    a774:	d102      	bne.n	a77c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    a776:	4a11      	ldr	r2, [pc, #68]	; (a7bc <_tc_init_irq_param+0x90>)
    a778:	683b      	ldr	r3, [r7, #0]
    a77a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	4a10      	ldr	r2, [pc, #64]	; (a7c0 <_tc_init_irq_param+0x94>)
    a780:	4293      	cmp	r3, r2
    a782:	d102      	bne.n	a78a <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    a784:	4a0f      	ldr	r2, [pc, #60]	; (a7c4 <_tc_init_irq_param+0x98>)
    a786:	683b      	ldr	r3, [r7, #0]
    a788:	6013      	str	r3, [r2, #0]
	}
}
    a78a:	bf00      	nop
    a78c:	370c      	adds	r7, #12
    a78e:	46bd      	mov	sp, r7
    a790:	f85d 7b04 	ldr.w	r7, [sp], #4
    a794:	4770      	bx	lr
    a796:	bf00      	nop
    a798:	40003800 	.word	0x40003800
    a79c:	20001e48 	.word	0x20001e48
    a7a0:	4101a000 	.word	0x4101a000
    a7a4:	20001e4c 	.word	0x20001e4c
    a7a8:	42001400 	.word	0x42001400
    a7ac:	20001e50 	.word	0x20001e50
    a7b0:	42001800 	.word	0x42001800
    a7b4:	20001e54 	.word	0x20001e54
    a7b8:	43001400 	.word	0x43001400
    a7bc:	20001e58 	.word	0x20001e58
    a7c0:	43001800 	.word	0x43001800
    a7c4:	20001e5c 	.word	0x20001e5c

0000a7c8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    a7c8:	b4b0      	push	{r4, r5, r7}
    a7ca:	b08d      	sub	sp, #52	; 0x34
    a7cc:	af00      	add	r7, sp, #0
    a7ce:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    a7d0:	4b13      	ldr	r3, [pc, #76]	; (a820 <_get_hardware_offset+0x58>)
    a7d2:	f107 040c 	add.w	r4, r7, #12
    a7d6:	461d      	mov	r5, r3
    a7d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a7da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a7dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a7e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a7e4:	2300      	movs	r3, #0
    a7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a7e8:	e010      	b.n	a80c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a7ec:	009b      	lsls	r3, r3, #2
    a7ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a7f2:	4413      	add	r3, r2
    a7f4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a7f8:	461a      	mov	r2, r3
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	429a      	cmp	r2, r3
    a7fe:	d102      	bne.n	a806 <_get_hardware_offset+0x3e>
			return i;
    a800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a802:	b2db      	uxtb	r3, r3
    a804:	e006      	b.n	a814 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a808:	3301      	adds	r3, #1
    a80a:	62fb      	str	r3, [r7, #44]	; 0x2c
    a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a80e:	2b07      	cmp	r3, #7
    a810:	d9eb      	bls.n	a7ea <_get_hardware_offset+0x22>
		}
	}
	return 0;
    a812:	2300      	movs	r3, #0
}
    a814:	4618      	mov	r0, r3
    a816:	3734      	adds	r7, #52	; 0x34
    a818:	46bd      	mov	sp, r7
    a81a:	bcb0      	pop	{r4, r5, r7}
    a81c:	4770      	bx	lr
    a81e:	bf00      	nop
    a820:	00010318 	.word	0x00010318

0000a824 <__NVIC_EnableIRQ>:
{
    a824:	b480      	push	{r7}
    a826:	b083      	sub	sp, #12
    a828:	af00      	add	r7, sp, #0
    a82a:	4603      	mov	r3, r0
    a82c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a82e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a832:	2b00      	cmp	r3, #0
    a834:	db0b      	blt.n	a84e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a836:	4909      	ldr	r1, [pc, #36]	; (a85c <__NVIC_EnableIRQ+0x38>)
    a838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a83c:	095b      	lsrs	r3, r3, #5
    a83e:	88fa      	ldrh	r2, [r7, #6]
    a840:	f002 021f 	and.w	r2, r2, #31
    a844:	2001      	movs	r0, #1
    a846:	fa00 f202 	lsl.w	r2, r0, r2
    a84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a84e:	bf00      	nop
    a850:	370c      	adds	r7, #12
    a852:	46bd      	mov	sp, r7
    a854:	f85d 7b04 	ldr.w	r7, [sp], #4
    a858:	4770      	bx	lr
    a85a:	bf00      	nop
    a85c:	e000e100 	.word	0xe000e100

0000a860 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    a860:	b480      	push	{r7}
    a862:	b087      	sub	sp, #28
    a864:	af00      	add	r7, sp, #0
    a866:	60f8      	str	r0, [r7, #12]
    a868:	460b      	mov	r3, r1
    a86a:	607a      	str	r2, [r7, #4]
    a86c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    a86e:	7afa      	ldrb	r2, [r7, #11]
    a870:	68f9      	ldr	r1, [r7, #12]
    a872:	4613      	mov	r3, r2
    a874:	009b      	lsls	r3, r3, #2
    a876:	4413      	add	r3, r2
    a878:	009b      	lsls	r3, r3, #2
    a87a:	440b      	add	r3, r1
    a87c:	3340      	adds	r3, #64	; 0x40
    a87e:	681b      	ldr	r3, [r3, #0]
    a880:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    a882:	697a      	ldr	r2, [r7, #20]
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	4013      	ands	r3, r2
    a888:	617b      	str	r3, [r7, #20]
	return tmp;
    a88a:	697b      	ldr	r3, [r7, #20]
}
    a88c:	4618      	mov	r0, r3
    a88e:	371c      	adds	r7, #28
    a890:	46bd      	mov	sp, r7
    a892:	f85d 7b04 	ldr.w	r7, [sp], #4
    a896:	4770      	bx	lr

0000a898 <hri_oscctrl_get_STATUS_reg>:
{
    a898:	b480      	push	{r7}
    a89a:	b085      	sub	sp, #20
    a89c:	af00      	add	r7, sp, #0
    a89e:	6078      	str	r0, [r7, #4]
    a8a0:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a8a2:	687b      	ldr	r3, [r7, #4]
    a8a4:	691b      	ldr	r3, [r3, #16]
    a8a6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a8a8:	68fa      	ldr	r2, [r7, #12]
    a8aa:	683b      	ldr	r3, [r7, #0]
    a8ac:	4013      	ands	r3, r2
    a8ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    a8b0:	68fb      	ldr	r3, [r7, #12]
}
    a8b2:	4618      	mov	r0, r3
    a8b4:	3714      	adds	r7, #20
    a8b6:	46bd      	mov	sp, r7
    a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8bc:	4770      	bx	lr

0000a8be <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    a8be:	b480      	push	{r7}
    a8c0:	b085      	sub	sp, #20
    a8c2:	af00      	add	r7, sp, #0
    a8c4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a8c6:	687b      	ldr	r3, [r7, #4]
    a8c8:	f893 3020 	ldrb.w	r3, [r3, #32]
    a8cc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    a8ce:	7bfb      	ldrb	r3, [r7, #15]
    a8d0:	f003 0301 	and.w	r3, r3, #1
    a8d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a8d6:	7bfb      	ldrb	r3, [r7, #15]
    a8d8:	2b00      	cmp	r3, #0
    a8da:	bf14      	ite	ne
    a8dc:	2301      	movne	r3, #1
    a8de:	2300      	moveq	r3, #0
    a8e0:	b2db      	uxtb	r3, r3
}
    a8e2:	4618      	mov	r0, r3
    a8e4:	3714      	adds	r7, #20
    a8e6:	46bd      	mov	sp, r7
    a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8ec:	4770      	bx	lr

0000a8ee <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a8ee:	b480      	push	{r7}
    a8f0:	b083      	sub	sp, #12
    a8f2:	af00      	add	r7, sp, #0
    a8f4:	6078      	str	r0, [r7, #4]
    a8f6:	460b      	mov	r3, r1
    a8f8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a8fa:	bf00      	nop
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	789b      	ldrb	r3, [r3, #2]
    a900:	b2da      	uxtb	r2, r3
    a902:	78fb      	ldrb	r3, [r7, #3]
    a904:	4013      	ands	r3, r2
    a906:	b2db      	uxtb	r3, r3
    a908:	2b00      	cmp	r3, #0
    a90a:	d1f7      	bne.n	a8fc <hri_usb_wait_for_sync+0xe>
	};
}
    a90c:	bf00      	nop
    a90e:	370c      	adds	r7, #12
    a910:	46bd      	mov	sp, r7
    a912:	f85d 7b04 	ldr.w	r7, [sp], #4
    a916:	4770      	bx	lr

0000a918 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a918:	b480      	push	{r7}
    a91a:	b083      	sub	sp, #12
    a91c:	af00      	add	r7, sp, #0
    a91e:	6078      	str	r0, [r7, #4]
    a920:	460b      	mov	r3, r1
    a922:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a924:	687b      	ldr	r3, [r7, #4]
    a926:	789b      	ldrb	r3, [r3, #2]
    a928:	b2da      	uxtb	r2, r3
    a92a:	78fb      	ldrb	r3, [r7, #3]
    a92c:	4013      	ands	r3, r2
    a92e:	b2db      	uxtb	r3, r3
    a930:	2b00      	cmp	r3, #0
    a932:	bf14      	ite	ne
    a934:	2301      	movne	r3, #1
    a936:	2300      	moveq	r3, #0
    a938:	b2db      	uxtb	r3, r3
}
    a93a:	4618      	mov	r0, r3
    a93c:	370c      	adds	r7, #12
    a93e:	46bd      	mov	sp, r7
    a940:	f85d 7b04 	ldr.w	r7, [sp], #4
    a944:	4770      	bx	lr

0000a946 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    a946:	b480      	push	{r7}
    a948:	b085      	sub	sp, #20
    a94a:	af00      	add	r7, sp, #0
    a94c:	6078      	str	r0, [r7, #4]
    a94e:	460b      	mov	r3, r1
    a950:	70fb      	strb	r3, [r7, #3]
    a952:	4613      	mov	r3, r2
    a954:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a956:	78fb      	ldrb	r3, [r7, #3]
    a958:	687a      	ldr	r2, [r7, #4]
    a95a:	3308      	adds	r3, #8
    a95c:	015b      	lsls	r3, r3, #5
    a95e:	4413      	add	r3, r2
    a960:	3307      	adds	r3, #7
    a962:	781b      	ldrb	r3, [r3, #0]
    a964:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a966:	7bfa      	ldrb	r2, [r7, #15]
    a968:	78bb      	ldrb	r3, [r7, #2]
    a96a:	4013      	ands	r3, r2
    a96c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a96e:	7bfb      	ldrb	r3, [r7, #15]
}
    a970:	4618      	mov	r0, r3
    a972:	3714      	adds	r7, #20
    a974:	46bd      	mov	sp, r7
    a976:	f85d 7b04 	ldr.w	r7, [sp], #4
    a97a:	4770      	bx	lr

0000a97c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    a97c:	b480      	push	{r7}
    a97e:	b083      	sub	sp, #12
    a980:	af00      	add	r7, sp, #0
    a982:	6078      	str	r0, [r7, #4]
    a984:	460b      	mov	r3, r1
    a986:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a988:	78fb      	ldrb	r3, [r7, #3]
    a98a:	687a      	ldr	r2, [r7, #4]
    a98c:	3308      	adds	r3, #8
    a98e:	015b      	lsls	r3, r3, #5
    a990:	4413      	add	r3, r2
    a992:	3307      	adds	r3, #7
    a994:	781b      	ldrb	r3, [r3, #0]
    a996:	b2db      	uxtb	r3, r3
}
    a998:	4618      	mov	r0, r3
    a99a:	370c      	adds	r7, #12
    a99c:	46bd      	mov	sp, r7
    a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9a2:	4770      	bx	lr

0000a9a4 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    a9a4:	b480      	push	{r7}
    a9a6:	b083      	sub	sp, #12
    a9a8:	af00      	add	r7, sp, #0
    a9aa:	6078      	str	r0, [r7, #4]
    a9ac:	460b      	mov	r3, r1
    a9ae:	70fb      	strb	r3, [r7, #3]
    a9b0:	4613      	mov	r3, r2
    a9b2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a9b4:	78fb      	ldrb	r3, [r7, #3]
    a9b6:	687a      	ldr	r2, [r7, #4]
    a9b8:	3308      	adds	r3, #8
    a9ba:	015b      	lsls	r3, r3, #5
    a9bc:	4413      	add	r3, r2
    a9be:	3307      	adds	r3, #7
    a9c0:	78ba      	ldrb	r2, [r7, #2]
    a9c2:	701a      	strb	r2, [r3, #0]
}
    a9c4:	bf00      	nop
    a9c6:	370c      	adds	r7, #12
    a9c8:	46bd      	mov	sp, r7
    a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ce:	4770      	bx	lr

0000a9d0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    a9d0:	b480      	push	{r7}
    a9d2:	b083      	sub	sp, #12
    a9d4:	af00      	add	r7, sp, #0
    a9d6:	6078      	str	r0, [r7, #4]
    a9d8:	460b      	mov	r3, r1
    a9da:	70fb      	strb	r3, [r7, #3]
    a9dc:	4613      	mov	r3, r2
    a9de:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a9e0:	78fb      	ldrb	r3, [r7, #3]
    a9e2:	687a      	ldr	r2, [r7, #4]
    a9e4:	3308      	adds	r3, #8
    a9e6:	015b      	lsls	r3, r3, #5
    a9e8:	4413      	add	r3, r2
    a9ea:	3305      	adds	r3, #5
    a9ec:	78ba      	ldrb	r2, [r7, #2]
    a9ee:	701a      	strb	r2, [r3, #0]
}
    a9f0:	bf00      	nop
    a9f2:	370c      	adds	r7, #12
    a9f4:	46bd      	mov	sp, r7
    a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9fa:	4770      	bx	lr

0000a9fc <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    a9fc:	b480      	push	{r7}
    a9fe:	b083      	sub	sp, #12
    aa00:	af00      	add	r7, sp, #0
    aa02:	6078      	str	r0, [r7, #4]
    aa04:	460b      	mov	r3, r1
    aa06:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    aa08:	78fb      	ldrb	r3, [r7, #3]
    aa0a:	687a      	ldr	r2, [r7, #4]
    aa0c:	3308      	adds	r3, #8
    aa0e:	015b      	lsls	r3, r3, #5
    aa10:	4413      	add	r3, r2
    aa12:	3306      	adds	r3, #6
    aa14:	781b      	ldrb	r3, [r3, #0]
    aa16:	b2db      	uxtb	r3, r3
}
    aa18:	4618      	mov	r0, r3
    aa1a:	370c      	adds	r7, #12
    aa1c:	46bd      	mov	sp, r7
    aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa22:	4770      	bx	lr

0000aa24 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    aa24:	b480      	push	{r7}
    aa26:	b083      	sub	sp, #12
    aa28:	af00      	add	r7, sp, #0
    aa2a:	6078      	str	r0, [r7, #4]
    aa2c:	460b      	mov	r3, r1
    aa2e:	70fb      	strb	r3, [r7, #3]
    aa30:	4613      	mov	r3, r2
    aa32:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    aa34:	78fb      	ldrb	r3, [r7, #3]
    aa36:	687a      	ldr	r2, [r7, #4]
    aa38:	3308      	adds	r3, #8
    aa3a:	015b      	lsls	r3, r3, #5
    aa3c:	4413      	add	r3, r2
    aa3e:	3304      	adds	r3, #4
    aa40:	78ba      	ldrb	r2, [r7, #2]
    aa42:	701a      	strb	r2, [r3, #0]
}
    aa44:	bf00      	nop
    aa46:	370c      	adds	r7, #12
    aa48:	46bd      	mov	sp, r7
    aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa4e:	4770      	bx	lr

0000aa50 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    aa50:	b480      	push	{r7}
    aa52:	b083      	sub	sp, #12
    aa54:	af00      	add	r7, sp, #0
    aa56:	6078      	str	r0, [r7, #4]
    aa58:	460b      	mov	r3, r1
    aa5a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    aa5c:	78fb      	ldrb	r3, [r7, #3]
    aa5e:	687a      	ldr	r2, [r7, #4]
    aa60:	015b      	lsls	r3, r3, #5
    aa62:	4413      	add	r3, r2
    aa64:	f503 7384 	add.w	r3, r3, #264	; 0x108
    aa68:	2210      	movs	r2, #16
    aa6a:	701a      	strb	r2, [r3, #0]
}
    aa6c:	bf00      	nop
    aa6e:	370c      	adds	r7, #12
    aa70:	46bd      	mov	sp, r7
    aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa76:	4770      	bx	lr

0000aa78 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    aa78:	b480      	push	{r7}
    aa7a:	b083      	sub	sp, #12
    aa7c:	af00      	add	r7, sp, #0
    aa7e:	6078      	str	r0, [r7, #4]
    aa80:	460b      	mov	r3, r1
    aa82:	70fb      	strb	r3, [r7, #3]
    aa84:	4613      	mov	r3, r2
    aa86:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    aa88:	78fb      	ldrb	r3, [r7, #3]
    aa8a:	687a      	ldr	r2, [r7, #4]
    aa8c:	015b      	lsls	r3, r3, #5
    aa8e:	4413      	add	r3, r2
    aa90:	f203 1309 	addw	r3, r3, #265	; 0x109
    aa94:	78ba      	ldrb	r2, [r7, #2]
    aa96:	701a      	strb	r2, [r3, #0]
}
    aa98:	bf00      	nop
    aa9a:	370c      	adds	r7, #12
    aa9c:	46bd      	mov	sp, r7
    aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaa2:	4770      	bx	lr

0000aaa4 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    aaa4:	b480      	push	{r7}
    aaa6:	b083      	sub	sp, #12
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	6078      	str	r0, [r7, #4]
    aaac:	460b      	mov	r3, r1
    aaae:	70fb      	strb	r3, [r7, #3]
    aab0:	4613      	mov	r3, r2
    aab2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    aab4:	78fb      	ldrb	r3, [r7, #3]
    aab6:	687a      	ldr	r2, [r7, #4]
    aab8:	015b      	lsls	r3, r3, #5
    aaba:	4413      	add	r3, r2
    aabc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    aac0:	78ba      	ldrb	r2, [r7, #2]
    aac2:	701a      	strb	r2, [r3, #0]
}
    aac4:	bf00      	nop
    aac6:	370c      	adds	r7, #12
    aac8:	46bd      	mov	sp, r7
    aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
    aace:	4770      	bx	lr

0000aad0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    aad0:	b480      	push	{r7}
    aad2:	b085      	sub	sp, #20
    aad4:	af00      	add	r7, sp, #0
    aad6:	6078      	str	r0, [r7, #4]
    aad8:	460b      	mov	r3, r1
    aada:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    aadc:	78fb      	ldrb	r3, [r7, #3]
    aade:	687a      	ldr	r2, [r7, #4]
    aae0:	3308      	adds	r3, #8
    aae2:	015b      	lsls	r3, r3, #5
    aae4:	4413      	add	r3, r2
    aae6:	781b      	ldrb	r3, [r3, #0]
    aae8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    aaea:	7bfb      	ldrb	r3, [r7, #15]
    aaec:	f003 0307 	and.w	r3, r3, #7
    aaf0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    aaf2:	7bfb      	ldrb	r3, [r7, #15]
}
    aaf4:	4618      	mov	r0, r3
    aaf6:	3714      	adds	r7, #20
    aaf8:	46bd      	mov	sp, r7
    aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
    aafe:	4770      	bx	lr

0000ab00 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    ab00:	b480      	push	{r7}
    ab02:	b085      	sub	sp, #20
    ab04:	af00      	add	r7, sp, #0
    ab06:	6078      	str	r0, [r7, #4]
    ab08:	460b      	mov	r3, r1
    ab0a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ab0c:	78fb      	ldrb	r3, [r7, #3]
    ab0e:	687a      	ldr	r2, [r7, #4]
    ab10:	3308      	adds	r3, #8
    ab12:	015b      	lsls	r3, r3, #5
    ab14:	4413      	add	r3, r2
    ab16:	781b      	ldrb	r3, [r3, #0]
    ab18:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    ab1a:	7bfb      	ldrb	r3, [r7, #15]
    ab1c:	091b      	lsrs	r3, r3, #4
    ab1e:	b2db      	uxtb	r3, r3
    ab20:	f003 0307 	and.w	r3, r3, #7
    ab24:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ab26:	7bfb      	ldrb	r3, [r7, #15]
}
    ab28:	4618      	mov	r0, r3
    ab2a:	3714      	adds	r7, #20
    ab2c:	46bd      	mov	sp, r7
    ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab32:	4770      	bx	lr

0000ab34 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    ab34:	b480      	push	{r7}
    ab36:	b083      	sub	sp, #12
    ab38:	af00      	add	r7, sp, #0
    ab3a:	6078      	str	r0, [r7, #4]
    ab3c:	460b      	mov	r3, r1
    ab3e:	70fb      	strb	r3, [r7, #3]
    ab40:	4613      	mov	r3, r2
    ab42:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    ab44:	78fb      	ldrb	r3, [r7, #3]
    ab46:	687a      	ldr	r2, [r7, #4]
    ab48:	3308      	adds	r3, #8
    ab4a:	015b      	lsls	r3, r3, #5
    ab4c:	4413      	add	r3, r2
    ab4e:	78ba      	ldrb	r2, [r7, #2]
    ab50:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    ab52:	bf00      	nop
    ab54:	370c      	adds	r7, #12
    ab56:	46bd      	mov	sp, r7
    ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab5c:	4770      	bx	lr

0000ab5e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    ab5e:	b480      	push	{r7}
    ab60:	b083      	sub	sp, #12
    ab62:	af00      	add	r7, sp, #0
    ab64:	6078      	str	r0, [r7, #4]
    ab66:	460b      	mov	r3, r1
    ab68:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ab6a:	78fb      	ldrb	r3, [r7, #3]
    ab6c:	687a      	ldr	r2, [r7, #4]
    ab6e:	3308      	adds	r3, #8
    ab70:	015b      	lsls	r3, r3, #5
    ab72:	4413      	add	r3, r2
    ab74:	781b      	ldrb	r3, [r3, #0]
    ab76:	b2db      	uxtb	r3, r3
}
    ab78:	4618      	mov	r0, r3
    ab7a:	370c      	adds	r7, #12
    ab7c:	46bd      	mov	sp, r7
    ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab82:	4770      	bx	lr

0000ab84 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    ab84:	b480      	push	{r7}
    ab86:	b083      	sub	sp, #12
    ab88:	af00      	add	r7, sp, #0
    ab8a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	8b9b      	ldrh	r3, [r3, #28]
    ab90:	b29b      	uxth	r3, r3
}
    ab92:	4618      	mov	r0, r3
    ab94:	370c      	adds	r7, #12
    ab96:	46bd      	mov	sp, r7
    ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab9c:	4770      	bx	lr

0000ab9e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    ab9e:	b480      	push	{r7}
    aba0:	b083      	sub	sp, #12
    aba2:	af00      	add	r7, sp, #0
    aba4:	6078      	str	r0, [r7, #4]
    aba6:	460b      	mov	r3, r1
    aba8:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    abaa:	687b      	ldr	r3, [r7, #4]
    abac:	887a      	ldrh	r2, [r7, #2]
    abae:	839a      	strh	r2, [r3, #28]
}
    abb0:	bf00      	nop
    abb2:	370c      	adds	r7, #12
    abb4:	46bd      	mov	sp, r7
    abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    abba:	4770      	bx	lr

0000abbc <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    abbc:	b480      	push	{r7}
    abbe:	b083      	sub	sp, #12
    abc0:	af00      	add	r7, sp, #0
    abc2:	6078      	str	r0, [r7, #4]
    abc4:	460b      	mov	r3, r1
    abc6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    abc8:	687b      	ldr	r3, [r7, #4]
    abca:	887a      	ldrh	r2, [r7, #2]
    abcc:	831a      	strh	r2, [r3, #24]
}
    abce:	bf00      	nop
    abd0:	370c      	adds	r7, #12
    abd2:	46bd      	mov	sp, r7
    abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    abd8:	4770      	bx	lr

0000abda <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    abda:	b480      	push	{r7}
    abdc:	b083      	sub	sp, #12
    abde:	af00      	add	r7, sp, #0
    abe0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    abe2:	687b      	ldr	r3, [r7, #4]
    abe4:	8b1b      	ldrh	r3, [r3, #24]
    abe6:	b29b      	uxth	r3, r3
}
    abe8:	4618      	mov	r0, r3
    abea:	370c      	adds	r7, #12
    abec:	46bd      	mov	sp, r7
    abee:	f85d 7b04 	ldr.w	r7, [sp], #4
    abf2:	4770      	bx	lr

0000abf4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    abf4:	b480      	push	{r7}
    abf6:	b083      	sub	sp, #12
    abf8:	af00      	add	r7, sp, #0
    abfa:	6078      	str	r0, [r7, #4]
    abfc:	460b      	mov	r3, r1
    abfe:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    ac00:	687b      	ldr	r3, [r7, #4]
    ac02:	887a      	ldrh	r2, [r7, #2]
    ac04:	829a      	strh	r2, [r3, #20]
}
    ac06:	bf00      	nop
    ac08:	370c      	adds	r7, #12
    ac0a:	46bd      	mov	sp, r7
    ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac10:	4770      	bx	lr

0000ac12 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    ac12:	b480      	push	{r7}
    ac14:	b085      	sub	sp, #20
    ac16:	af00      	add	r7, sp, #0
    ac18:	6078      	str	r0, [r7, #4]
    ac1a:	460b      	mov	r3, r1
    ac1c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    ac1e:	687b      	ldr	r3, [r7, #4]
    ac20:	789b      	ldrb	r3, [r3, #2]
    ac22:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ac24:	7bfa      	ldrb	r2, [r7, #15]
    ac26:	78fb      	ldrb	r3, [r7, #3]
    ac28:	4013      	ands	r3, r2
    ac2a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ac2c:	7bfb      	ldrb	r3, [r7, #15]
}
    ac2e:	4618      	mov	r0, r3
    ac30:	3714      	adds	r7, #20
    ac32:	46bd      	mov	sp, r7
    ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac38:	4770      	bx	lr
	...

0000ac3c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ac3c:	b580      	push	{r7, lr}
    ac3e:	b082      	sub	sp, #8
    ac40:	af00      	add	r7, sp, #0
    ac42:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    ac44:	687b      	ldr	r3, [r7, #4]
    ac46:	781b      	ldrb	r3, [r3, #0]
    ac48:	b2db      	uxtb	r3, r3
    ac4a:	f023 0302 	bic.w	r3, r3, #2
    ac4e:	b2da      	uxtb	r2, r3
    ac50:	687b      	ldr	r3, [r7, #4]
    ac52:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    ac54:	2103      	movs	r1, #3
    ac56:	6878      	ldr	r0, [r7, #4]
    ac58:	4b02      	ldr	r3, [pc, #8]	; (ac64 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    ac5a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    ac5c:	bf00      	nop
    ac5e:	3708      	adds	r7, #8
    ac60:	46bd      	mov	sp, r7
    ac62:	bd80      	pop	{r7, pc}
    ac64:	0000a8ef 	.word	0x0000a8ef

0000ac68 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    ac68:	b580      	push	{r7, lr}
    ac6a:	b084      	sub	sp, #16
    ac6c:	af00      	add	r7, sp, #0
    ac6e:	6078      	str	r0, [r7, #4]
    ac70:	460b      	mov	r3, r1
    ac72:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    ac74:	2103      	movs	r1, #3
    ac76:	6878      	ldr	r0, [r7, #4]
    ac78:	4b06      	ldr	r3, [pc, #24]	; (ac94 <hri_usb_get_CTRLA_reg+0x2c>)
    ac7a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    ac7c:	687b      	ldr	r3, [r7, #4]
    ac7e:	781b      	ldrb	r3, [r3, #0]
    ac80:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ac82:	7bfa      	ldrb	r2, [r7, #15]
    ac84:	78fb      	ldrb	r3, [r7, #3]
    ac86:	4013      	ands	r3, r2
    ac88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ac8a:	7bfb      	ldrb	r3, [r7, #15]
}
    ac8c:	4618      	mov	r0, r3
    ac8e:	3710      	adds	r7, #16
    ac90:	46bd      	mov	sp, r7
    ac92:	bd80      	pop	{r7, pc}
    ac94:	0000a8ef 	.word	0x0000a8ef

0000ac98 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    ac98:	b580      	push	{r7, lr}
    ac9a:	b082      	sub	sp, #8
    ac9c:	af00      	add	r7, sp, #0
    ac9e:	6078      	str	r0, [r7, #4]
    aca0:	460b      	mov	r3, r1
    aca2:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    aca4:	687b      	ldr	r3, [r7, #4]
    aca6:	78fa      	ldrb	r2, [r7, #3]
    aca8:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    acaa:	2103      	movs	r1, #3
    acac:	6878      	ldr	r0, [r7, #4]
    acae:	4b03      	ldr	r3, [pc, #12]	; (acbc <hri_usb_write_CTRLA_reg+0x24>)
    acb0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    acb2:	bf00      	nop
    acb4:	3708      	adds	r7, #8
    acb6:	46bd      	mov	sp, r7
    acb8:	bd80      	pop	{r7, pc}
    acba:	bf00      	nop
    acbc:	0000a8ef 	.word	0x0000a8ef

0000acc0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    acc0:	b580      	push	{r7, lr}
    acc2:	b082      	sub	sp, #8
    acc4:	af00      	add	r7, sp, #0
    acc6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    acc8:	2103      	movs	r1, #3
    acca:	6878      	ldr	r0, [r7, #4]
    accc:	4b04      	ldr	r3, [pc, #16]	; (ace0 <hri_usb_read_CTRLA_reg+0x20>)
    acce:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    acd0:	687b      	ldr	r3, [r7, #4]
    acd2:	781b      	ldrb	r3, [r3, #0]
    acd4:	b2db      	uxtb	r3, r3
}
    acd6:	4618      	mov	r0, r3
    acd8:	3708      	adds	r7, #8
    acda:	46bd      	mov	sp, r7
    acdc:	bd80      	pop	{r7, pc}
    acde:	bf00      	nop
    ace0:	0000a8ef 	.word	0x0000a8ef

0000ace4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    ace4:	b480      	push	{r7}
    ace6:	b083      	sub	sp, #12
    ace8:	af00      	add	r7, sp, #0
    acea:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    acec:	687b      	ldr	r3, [r7, #4]
    acee:	891b      	ldrh	r3, [r3, #8]
    acf0:	b29b      	uxth	r3, r3
    acf2:	f023 0301 	bic.w	r3, r3, #1
    acf6:	b29a      	uxth	r2, r3
    acf8:	687b      	ldr	r3, [r7, #4]
    acfa:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    acfc:	bf00      	nop
    acfe:	370c      	adds	r7, #12
    ad00:	46bd      	mov	sp, r7
    ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad06:	4770      	bx	lr

0000ad08 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    ad08:	b480      	push	{r7}
    ad0a:	b083      	sub	sp, #12
    ad0c:	af00      	add	r7, sp, #0
    ad0e:	6078      	str	r0, [r7, #4]
    ad10:	460b      	mov	r3, r1
    ad12:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    ad14:	687b      	ldr	r3, [r7, #4]
    ad16:	887a      	ldrh	r2, [r7, #2]
    ad18:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    ad1a:	bf00      	nop
    ad1c:	370c      	adds	r7, #12
    ad1e:	46bd      	mov	sp, r7
    ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad24:	4770      	bx	lr

0000ad26 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    ad26:	b480      	push	{r7}
    ad28:	b083      	sub	sp, #12
    ad2a:	af00      	add	r7, sp, #0
    ad2c:	6078      	str	r0, [r7, #4]
    ad2e:	460b      	mov	r3, r1
    ad30:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    ad32:	687b      	ldr	r3, [r7, #4]
    ad34:	78fa      	ldrb	r2, [r7, #3]
    ad36:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    ad38:	bf00      	nop
    ad3a:	370c      	adds	r7, #12
    ad3c:	46bd      	mov	sp, r7
    ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad42:	4770      	bx	lr

0000ad44 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    ad44:	b480      	push	{r7}
    ad46:	b083      	sub	sp, #12
    ad48:	af00      	add	r7, sp, #0
    ad4a:	6078      	str	r0, [r7, #4]
    ad4c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    ad4e:	687b      	ldr	r3, [r7, #4]
    ad50:	683a      	ldr	r2, [r7, #0]
    ad52:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    ad54:	bf00      	nop
    ad56:	370c      	adds	r7, #12
    ad58:	46bd      	mov	sp, r7
    ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad5e:	4770      	bx	lr

0000ad60 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    ad60:	b480      	push	{r7}
    ad62:	b083      	sub	sp, #12
    ad64:	af00      	add	r7, sp, #0
    ad66:	6078      	str	r0, [r7, #4]
    ad68:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    ad6a:	2300      	movs	r3, #0
}
    ad6c:	4618      	mov	r0, r3
    ad6e:	370c      	adds	r7, #12
    ad70:	46bd      	mov	sp, r7
    ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad76:	4770      	bx	lr

0000ad78 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    ad78:	b480      	push	{r7}
    ad7a:	b085      	sub	sp, #20
    ad7c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    ad7e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad82:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    ad84:	4b28      	ldr	r3, [pc, #160]	; (ae28 <_usb_load_calib+0xb0>)
    ad86:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    ad88:	f003 031f 	and.w	r3, r3, #31
    ad8c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    ad8e:	4b26      	ldr	r3, [pc, #152]	; (ae28 <_usb_load_calib+0xb0>)
    ad90:	681b      	ldr	r3, [r3, #0]
    ad92:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    ad94:	f003 031f 	and.w	r3, r3, #31
    ad98:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    ad9a:	4b23      	ldr	r3, [pc, #140]	; (ae28 <_usb_load_calib+0xb0>)
    ad9c:	681b      	ldr	r3, [r3, #0]
    ad9e:	0a9b      	lsrs	r3, r3, #10
    ada0:	f003 0307 	and.w	r3, r3, #7
    ada4:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    ada6:	68fb      	ldr	r3, [r7, #12]
    ada8:	2b00      	cmp	r3, #0
    adaa:	d002      	beq.n	adb2 <_usb_load_calib+0x3a>
    adac:	68fb      	ldr	r3, [r7, #12]
    adae:	2b1f      	cmp	r3, #31
    adb0:	d101      	bne.n	adb6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    adb2:	2309      	movs	r3, #9
    adb4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    adb6:	68bb      	ldr	r3, [r7, #8]
    adb8:	2b00      	cmp	r3, #0
    adba:	d002      	beq.n	adc2 <_usb_load_calib+0x4a>
    adbc:	68bb      	ldr	r3, [r7, #8]
    adbe:	2b1f      	cmp	r3, #31
    adc0:	d101      	bne.n	adc6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    adc2:	2319      	movs	r3, #25
    adc4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    adc6:	687b      	ldr	r3, [r7, #4]
    adc8:	2b00      	cmp	r3, #0
    adca:	d002      	beq.n	add2 <_usb_load_calib+0x5a>
    adcc:	687b      	ldr	r3, [r7, #4]
    adce:	2b07      	cmp	r3, #7
    add0:	d101      	bne.n	add6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    add2:	2306      	movs	r3, #6
    add4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    add6:	68fb      	ldr	r3, [r7, #12]
    add8:	b29b      	uxth	r3, r3
    adda:	019b      	lsls	r3, r3, #6
    addc:	b29b      	uxth	r3, r3
    adde:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    ade2:	b29a      	uxth	r2, r3
    ade4:	68bb      	ldr	r3, [r7, #8]
    ade6:	b29b      	uxth	r3, r3
    ade8:	f003 031f 	and.w	r3, r3, #31
    adec:	b29b      	uxth	r3, r3
    adee:	4313      	orrs	r3, r2
    adf0:	b29a      	uxth	r2, r3
    adf2:	687b      	ldr	r3, [r7, #4]
    adf4:	b29b      	uxth	r3, r3
    adf6:	031b      	lsls	r3, r3, #12
    adf8:	b29b      	uxth	r3, r3
    adfa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    adfe:	b29b      	uxth	r3, r3
    ae00:	4313      	orrs	r3, r2
    ae02:	b29a      	uxth	r2, r3
    ae04:	683b      	ldr	r3, [r7, #0]
    ae06:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    ae08:	683a      	ldr	r2, [r7, #0]
    ae0a:	78d3      	ldrb	r3, [r2, #3]
    ae0c:	f043 0303 	orr.w	r3, r3, #3
    ae10:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    ae12:	683a      	ldr	r2, [r7, #0]
    ae14:	78d3      	ldrb	r3, [r2, #3]
    ae16:	f043 030c 	orr.w	r3, r3, #12
    ae1a:	70d3      	strb	r3, [r2, #3]
}
    ae1c:	bf00      	nop
    ae1e:	3714      	adds	r7, #20
    ae20:	46bd      	mov	sp, r7
    ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae26:	4770      	bx	lr
    ae28:	00800084 	.word	0x00800084

0000ae2c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    ae2c:	b580      	push	{r7, lr}
    ae2e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    ae30:	bf00      	nop
    ae32:	2203      	movs	r2, #3
    ae34:	2100      	movs	r1, #0
    ae36:	4804      	ldr	r0, [pc, #16]	; (ae48 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    ae38:	4b04      	ldr	r3, [pc, #16]	; (ae4c <_usb_d_dev_wait_dpll_rdy+0x20>)
    ae3a:	4798      	blx	r3
    ae3c:	4603      	mov	r3, r0
    ae3e:	2b03      	cmp	r3, #3
    ae40:	d1f7      	bne.n	ae32 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    ae42:	bf00      	nop
    ae44:	bd80      	pop	{r7, pc}
    ae46:	bf00      	nop
    ae48:	40001000 	.word	0x40001000
    ae4c:	0000a861 	.word	0x0000a861

0000ae50 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    ae50:	b580      	push	{r7, lr}
    ae52:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    ae54:	480e      	ldr	r0, [pc, #56]	; (ae90 <_usb_d_dev_wait_dfll_rdy+0x40>)
    ae56:	4b0f      	ldr	r3, [pc, #60]	; (ae94 <_usb_d_dev_wait_dfll_rdy+0x44>)
    ae58:	4798      	blx	r3
    ae5a:	4603      	mov	r3, r0
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d00a      	beq.n	ae76 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    ae60:	bf00      	nop
    ae62:	f44f 6110 	mov.w	r1, #2304	; 0x900
    ae66:	480a      	ldr	r0, [pc, #40]	; (ae90 <_usb_d_dev_wait_dfll_rdy+0x40>)
    ae68:	4b0b      	ldr	r3, [pc, #44]	; (ae98 <_usb_d_dev_wait_dfll_rdy+0x48>)
    ae6a:	4798      	blx	r3
    ae6c:	4603      	mov	r3, r0
    ae6e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    ae72:	d1f6      	bne.n	ae62 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    ae74:	e009      	b.n	ae8a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    ae76:	bf00      	nop
    ae78:	f44f 7180 	mov.w	r1, #256	; 0x100
    ae7c:	4804      	ldr	r0, [pc, #16]	; (ae90 <_usb_d_dev_wait_dfll_rdy+0x40>)
    ae7e:	4b06      	ldr	r3, [pc, #24]	; (ae98 <_usb_d_dev_wait_dfll_rdy+0x48>)
    ae80:	4798      	blx	r3
    ae82:	4603      	mov	r3, r0
    ae84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ae88:	d1f6      	bne.n	ae78 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    ae8a:	bf00      	nop
    ae8c:	bd80      	pop	{r7, pc}
    ae8e:	bf00      	nop
    ae90:	40001000 	.word	0x40001000
    ae94:	0000a8bf 	.word	0x0000a8bf
    ae98:	0000a899 	.word	0x0000a899

0000ae9c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    ae9c:	b580      	push	{r7, lr}
    ae9e:	b082      	sub	sp, #8
    aea0:	af00      	add	r7, sp, #0
    aea2:	4603      	mov	r3, r0
    aea4:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    aea6:	79fb      	ldrb	r3, [r7, #7]
    aea8:	2b00      	cmp	r3, #0
    aeaa:	d102      	bne.n	aeb2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    aeac:	4b05      	ldr	r3, [pc, #20]	; (aec4 <_usb_d_dev_wait_clk_rdy+0x28>)
    aeae:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    aeb0:	e004      	b.n	aebc <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    aeb2:	79fb      	ldrb	r3, [r7, #7]
    aeb4:	2b01      	cmp	r3, #1
    aeb6:	d101      	bne.n	aebc <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    aeb8:	4b03      	ldr	r3, [pc, #12]	; (aec8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    aeba:	4798      	blx	r3
}
    aebc:	bf00      	nop
    aebe:	3708      	adds	r7, #8
    aec0:	46bd      	mov	sp, r7
    aec2:	bd80      	pop	{r7, pc}
    aec4:	0000ae51 	.word	0x0000ae51
    aec8:	0000ae2d 	.word	0x0000ae2d

0000aecc <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    aecc:	b580      	push	{r7, lr}
    aece:	b082      	sub	sp, #8
    aed0:	af00      	add	r7, sp, #0
    aed2:	4603      	mov	r3, r0
    aed4:	6039      	str	r1, [r7, #0]
    aed6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    aed8:	683b      	ldr	r3, [r7, #0]
    aeda:	b2da      	uxtb	r2, r3
    aedc:	79fb      	ldrb	r3, [r7, #7]
    aede:	4619      	mov	r1, r3
    aee0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aee4:	4b02      	ldr	r3, [pc, #8]	; (aef0 <_usbd_ep_int_ack+0x24>)
    aee6:	4798      	blx	r3
}
    aee8:	bf00      	nop
    aeea:	3708      	adds	r7, #8
    aeec:	46bd      	mov	sp, r7
    aeee:	bd80      	pop	{r7, pc}
    aef0:	0000a9a5 	.word	0x0000a9a5

0000aef4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    aef4:	b580      	push	{r7, lr}
    aef6:	b082      	sub	sp, #8
    aef8:	af00      	add	r7, sp, #0
    aefa:	4603      	mov	r3, r0
    aefc:	6039      	str	r1, [r7, #0]
    aefe:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    af00:	683b      	ldr	r3, [r7, #0]
    af02:	b2da      	uxtb	r2, r3
    af04:	79fb      	ldrb	r3, [r7, #7]
    af06:	4619      	mov	r1, r3
    af08:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af0c:	4b02      	ldr	r3, [pc, #8]	; (af18 <_usbd_ep_int_en+0x24>)
    af0e:	4798      	blx	r3
}
    af10:	bf00      	nop
    af12:	3708      	adds	r7, #8
    af14:	46bd      	mov	sp, r7
    af16:	bd80      	pop	{r7, pc}
    af18:	0000aa79 	.word	0x0000aa79

0000af1c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    af1c:	b580      	push	{r7, lr}
    af1e:	b082      	sub	sp, #8
    af20:	af00      	add	r7, sp, #0
    af22:	4603      	mov	r3, r0
    af24:	6039      	str	r1, [r7, #0]
    af26:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    af28:	683b      	ldr	r3, [r7, #0]
    af2a:	b2da      	uxtb	r2, r3
    af2c:	79fb      	ldrb	r3, [r7, #7]
    af2e:	4619      	mov	r1, r3
    af30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af34:	4b02      	ldr	r3, [pc, #8]	; (af40 <_usbd_ep_int_dis+0x24>)
    af36:	4798      	blx	r3
}
    af38:	bf00      	nop
    af3a:	3708      	adds	r7, #8
    af3c:	46bd      	mov	sp, r7
    af3e:	bd80      	pop	{r7, pc}
    af40:	0000aaa5 	.word	0x0000aaa5

0000af44 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    af44:	b580      	push	{r7, lr}
    af46:	b082      	sub	sp, #8
    af48:	af00      	add	r7, sp, #0
    af4a:	4603      	mov	r3, r0
    af4c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    af4e:	79fb      	ldrb	r3, [r7, #7]
    af50:	4619      	mov	r1, r3
    af52:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af56:	4b06      	ldr	r3, [pc, #24]	; (af70 <_usbd_ep_is_ctrl+0x2c>)
    af58:	4798      	blx	r3
    af5a:	4603      	mov	r3, r0
    af5c:	2b11      	cmp	r3, #17
    af5e:	bf0c      	ite	eq
    af60:	2301      	moveq	r3, #1
    af62:	2300      	movne	r3, #0
    af64:	b2db      	uxtb	r3, r3
}
    af66:	4618      	mov	r0, r3
    af68:	3708      	adds	r7, #8
    af6a:	46bd      	mov	sp, r7
    af6c:	bd80      	pop	{r7, pc}
    af6e:	bf00      	nop
    af70:	0000ab5f 	.word	0x0000ab5f

0000af74 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    af74:	b580      	push	{r7, lr}
    af76:	b082      	sub	sp, #8
    af78:	af00      	add	r7, sp, #0
    af7a:	4603      	mov	r3, r0
    af7c:	71fb      	strb	r3, [r7, #7]
    af7e:	460b      	mov	r3, r1
    af80:	71bb      	strb	r3, [r7, #6]
    af82:	4613      	mov	r3, r2
    af84:	717b      	strb	r3, [r7, #5]
	if (st) {
    af86:	797b      	ldrb	r3, [r7, #5]
    af88:	2b00      	cmp	r3, #0
    af8a:	d00b      	beq.n	afa4 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    af8c:	79bb      	ldrb	r3, [r7, #6]
    af8e:	2210      	movs	r2, #16
    af90:	fa02 f303 	lsl.w	r3, r2, r3
    af94:	b2da      	uxtb	r2, r3
    af96:	79fb      	ldrb	r3, [r7, #7]
    af98:	4619      	mov	r1, r3
    af9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af9e:	4b09      	ldr	r3, [pc, #36]	; (afc4 <_usbd_ep_set_stall+0x50>)
    afa0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    afa2:	e00a      	b.n	afba <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    afa4:	79bb      	ldrb	r3, [r7, #6]
    afa6:	2210      	movs	r2, #16
    afa8:	fa02 f303 	lsl.w	r3, r2, r3
    afac:	b2da      	uxtb	r2, r3
    afae:	79fb      	ldrb	r3, [r7, #7]
    afb0:	4619      	mov	r1, r3
    afb2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afb6:	4b04      	ldr	r3, [pc, #16]	; (afc8 <_usbd_ep_set_stall+0x54>)
    afb8:	4798      	blx	r3
}
    afba:	bf00      	nop
    afbc:	3708      	adds	r7, #8
    afbe:	46bd      	mov	sp, r7
    afc0:	bd80      	pop	{r7, pc}
    afc2:	bf00      	nop
    afc4:	0000a9d1 	.word	0x0000a9d1
    afc8:	0000aa25 	.word	0x0000aa25

0000afcc <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    afcc:	b580      	push	{r7, lr}
    afce:	b084      	sub	sp, #16
    afd0:	af00      	add	r7, sp, #0
    afd2:	4603      	mov	r3, r0
    afd4:	460a      	mov	r2, r1
    afd6:	71fb      	strb	r3, [r7, #7]
    afd8:	4613      	mov	r3, r2
    afda:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    afdc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    afe0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    afe2:	79fb      	ldrb	r3, [r7, #7]
    afe4:	4619      	mov	r1, r3
    afe6:	68f8      	ldr	r0, [r7, #12]
    afe8:	4b08      	ldr	r3, [pc, #32]	; (b00c <_usbd_ep_is_stalled+0x40>)
    afea:	4798      	blx	r3
    afec:	4603      	mov	r3, r0
    afee:	4619      	mov	r1, r3
    aff0:	79bb      	ldrb	r3, [r7, #6]
    aff2:	2210      	movs	r2, #16
    aff4:	fa02 f303 	lsl.w	r3, r2, r3
    aff8:	400b      	ands	r3, r1
    affa:	2b00      	cmp	r3, #0
    affc:	bf14      	ite	ne
    affe:	2301      	movne	r3, #1
    b000:	2300      	moveq	r3, #0
    b002:	b2db      	uxtb	r3, r3
}
    b004:	4618      	mov	r0, r3
    b006:	3710      	adds	r7, #16
    b008:	46bd      	mov	sp, r7
    b00a:	bd80      	pop	{r7, pc}
    b00c:	0000a9fd 	.word	0x0000a9fd

0000b010 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    b010:	b580      	push	{r7, lr}
    b012:	b084      	sub	sp, #16
    b014:	af00      	add	r7, sp, #0
    b016:	4603      	mov	r3, r0
    b018:	460a      	mov	r2, r1
    b01a:	71fb      	strb	r3, [r7, #7]
    b01c:	4613      	mov	r3, r2
    b01e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    b020:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b024:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    b026:	79fb      	ldrb	r3, [r7, #7]
    b028:	4619      	mov	r1, r3
    b02a:	68f8      	ldr	r0, [r7, #12]
    b02c:	4b08      	ldr	r3, [pc, #32]	; (b050 <_usbd_ep_is_stall_sent+0x40>)
    b02e:	4798      	blx	r3
    b030:	4603      	mov	r3, r0
    b032:	4619      	mov	r1, r3
    b034:	79bb      	ldrb	r3, [r7, #6]
    b036:	2220      	movs	r2, #32
    b038:	fa02 f303 	lsl.w	r3, r2, r3
    b03c:	400b      	ands	r3, r1
    b03e:	2b00      	cmp	r3, #0
    b040:	bf14      	ite	ne
    b042:	2301      	movne	r3, #1
    b044:	2300      	moveq	r3, #0
    b046:	b2db      	uxtb	r3, r3
}
    b048:	4618      	mov	r0, r3
    b04a:	3710      	adds	r7, #16
    b04c:	46bd      	mov	sp, r7
    b04e:	bd80      	pop	{r7, pc}
    b050:	0000a97d 	.word	0x0000a97d

0000b054 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    b054:	b580      	push	{r7, lr}
    b056:	b082      	sub	sp, #8
    b058:	af00      	add	r7, sp, #0
    b05a:	4603      	mov	r3, r0
    b05c:	460a      	mov	r2, r1
    b05e:	71fb      	strb	r3, [r7, #7]
    b060:	4613      	mov	r3, r2
    b062:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    b064:	79bb      	ldrb	r3, [r7, #6]
    b066:	2220      	movs	r2, #32
    b068:	409a      	lsls	r2, r3
    b06a:	79fb      	ldrb	r3, [r7, #7]
    b06c:	4611      	mov	r1, r2
    b06e:	4618      	mov	r0, r3
    b070:	4b02      	ldr	r3, [pc, #8]	; (b07c <_usbd_ep_ack_stall+0x28>)
    b072:	4798      	blx	r3
}
    b074:	bf00      	nop
    b076:	3708      	adds	r7, #8
    b078:	46bd      	mov	sp, r7
    b07a:	bd80      	pop	{r7, pc}
    b07c:	0000aecd 	.word	0x0000aecd

0000b080 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    b080:	b580      	push	{r7, lr}
    b082:	b082      	sub	sp, #8
    b084:	af00      	add	r7, sp, #0
    b086:	4603      	mov	r3, r0
    b088:	71fb      	strb	r3, [r7, #7]
    b08a:	460b      	mov	r3, r1
    b08c:	71bb      	strb	r3, [r7, #6]
    b08e:	4613      	mov	r3, r2
    b090:	717b      	strb	r3, [r7, #5]
	if (en) {
    b092:	797b      	ldrb	r3, [r7, #5]
    b094:	2b00      	cmp	r3, #0
    b096:	d008      	beq.n	b0aa <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    b098:	79bb      	ldrb	r3, [r7, #6]
    b09a:	2220      	movs	r2, #32
    b09c:	409a      	lsls	r2, r3
    b09e:	79fb      	ldrb	r3, [r7, #7]
    b0a0:	4611      	mov	r1, r2
    b0a2:	4618      	mov	r0, r3
    b0a4:	4b07      	ldr	r3, [pc, #28]	; (b0c4 <_usbd_ep_int_stall_en+0x44>)
    b0a6:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    b0a8:	e007      	b.n	b0ba <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    b0aa:	79bb      	ldrb	r3, [r7, #6]
    b0ac:	2220      	movs	r2, #32
    b0ae:	409a      	lsls	r2, r3
    b0b0:	79fb      	ldrb	r3, [r7, #7]
    b0b2:	4611      	mov	r1, r2
    b0b4:	4618      	mov	r0, r3
    b0b6:	4b04      	ldr	r3, [pc, #16]	; (b0c8 <_usbd_ep_int_stall_en+0x48>)
    b0b8:	4798      	blx	r3
}
    b0ba:	bf00      	nop
    b0bc:	3708      	adds	r7, #8
    b0be:	46bd      	mov	sp, r7
    b0c0:	bd80      	pop	{r7, pc}
    b0c2:	bf00      	nop
    b0c4:	0000aef5 	.word	0x0000aef5
    b0c8:	0000af1d 	.word	0x0000af1d

0000b0cc <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    b0cc:	b580      	push	{r7, lr}
    b0ce:	b082      	sub	sp, #8
    b0d0:	af00      	add	r7, sp, #0
    b0d2:	4603      	mov	r3, r0
    b0d4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    b0d6:	79fb      	ldrb	r3, [r7, #7]
    b0d8:	4619      	mov	r1, r3
    b0da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0de:	4b03      	ldr	r3, [pc, #12]	; (b0ec <_usbd_ep_stop_setup+0x20>)
    b0e0:	4798      	blx	r3
}
    b0e2:	bf00      	nop
    b0e4:	3708      	adds	r7, #8
    b0e6:	46bd      	mov	sp, r7
    b0e8:	bd80      	pop	{r7, pc}
    b0ea:	bf00      	nop
    b0ec:	0000aa51 	.word	0x0000aa51

0000b0f0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    b0f0:	b580      	push	{r7, lr}
    b0f2:	b082      	sub	sp, #8
    b0f4:	af00      	add	r7, sp, #0
    b0f6:	4603      	mov	r3, r0
    b0f8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    b0fa:	79fb      	ldrb	r3, [r7, #7]
    b0fc:	2210      	movs	r2, #16
    b0fe:	4619      	mov	r1, r3
    b100:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b104:	4b05      	ldr	r3, [pc, #20]	; (b11c <_usbd_ep_is_setup+0x2c>)
    b106:	4798      	blx	r3
    b108:	4603      	mov	r3, r0
    b10a:	2b00      	cmp	r3, #0
    b10c:	bf14      	ite	ne
    b10e:	2301      	movne	r3, #1
    b110:	2300      	moveq	r3, #0
    b112:	b2db      	uxtb	r3, r3
}
    b114:	4618      	mov	r0, r3
    b116:	3708      	adds	r7, #8
    b118:	46bd      	mov	sp, r7
    b11a:	bd80      	pop	{r7, pc}
    b11c:	0000a947 	.word	0x0000a947

0000b120 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    b120:	b580      	push	{r7, lr}
    b122:	b082      	sub	sp, #8
    b124:	af00      	add	r7, sp, #0
    b126:	4603      	mov	r3, r0
    b128:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    b12a:	79fb      	ldrb	r3, [r7, #7]
    b12c:	2110      	movs	r1, #16
    b12e:	4618      	mov	r0, r3
    b130:	4b02      	ldr	r3, [pc, #8]	; (b13c <_usbd_ep_ack_setup+0x1c>)
    b132:	4798      	blx	r3
}
    b134:	bf00      	nop
    b136:	3708      	adds	r7, #8
    b138:	46bd      	mov	sp, r7
    b13a:	bd80      	pop	{r7, pc}
    b13c:	0000aecd 	.word	0x0000aecd

0000b140 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    b140:	b580      	push	{r7, lr}
    b142:	b082      	sub	sp, #8
    b144:	af00      	add	r7, sp, #0
    b146:	4603      	mov	r3, r0
    b148:	71fb      	strb	r3, [r7, #7]
    b14a:	460b      	mov	r3, r1
    b14c:	71bb      	strb	r3, [r7, #6]
    b14e:	4613      	mov	r3, r2
    b150:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    b152:	797b      	ldrb	r3, [r7, #5]
    b154:	2b00      	cmp	r3, #0
    b156:	d00b      	beq.n	b170 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b158:	79bb      	ldrb	r3, [r7, #6]
    b15a:	2201      	movs	r2, #1
    b15c:	fa02 f303 	lsl.w	r3, r2, r3
    b160:	b2da      	uxtb	r2, r3
    b162:	79fb      	ldrb	r3, [r7, #7]
    b164:	4619      	mov	r1, r3
    b166:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b16a:	4b09      	ldr	r3, [pc, #36]	; (b190 <_usbd_ep_set_toggle+0x50>)
    b16c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    b16e:	e00a      	b.n	b186 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b170:	79bb      	ldrb	r3, [r7, #6]
    b172:	2201      	movs	r2, #1
    b174:	fa02 f303 	lsl.w	r3, r2, r3
    b178:	b2da      	uxtb	r2, r3
    b17a:	79fb      	ldrb	r3, [r7, #7]
    b17c:	4619      	mov	r1, r3
    b17e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b182:	4b04      	ldr	r3, [pc, #16]	; (b194 <_usbd_ep_set_toggle+0x54>)
    b184:	4798      	blx	r3
}
    b186:	bf00      	nop
    b188:	3708      	adds	r7, #8
    b18a:	46bd      	mov	sp, r7
    b18c:	bd80      	pop	{r7, pc}
    b18e:	bf00      	nop
    b190:	0000a9d1 	.word	0x0000a9d1
    b194:	0000aa25 	.word	0x0000aa25

0000b198 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    b198:	b580      	push	{r7, lr}
    b19a:	b082      	sub	sp, #8
    b19c:	af00      	add	r7, sp, #0
    b19e:	4603      	mov	r3, r0
    b1a0:	460a      	mov	r2, r1
    b1a2:	71fb      	strb	r3, [r7, #7]
    b1a4:	4613      	mov	r3, r2
    b1a6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    b1a8:	79bb      	ldrb	r3, [r7, #6]
    b1aa:	2201      	movs	r2, #1
    b1ac:	409a      	lsls	r2, r3
    b1ae:	79fb      	ldrb	r3, [r7, #7]
    b1b0:	4611      	mov	r1, r2
    b1b2:	4618      	mov	r0, r3
    b1b4:	4b02      	ldr	r3, [pc, #8]	; (b1c0 <_usbd_ep_ack_io_cpt+0x28>)
    b1b6:	4798      	blx	r3
}
    b1b8:	bf00      	nop
    b1ba:	3708      	adds	r7, #8
    b1bc:	46bd      	mov	sp, r7
    b1be:	bd80      	pop	{r7, pc}
    b1c0:	0000aecd 	.word	0x0000aecd

0000b1c4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    b1c4:	b480      	push	{r7}
    b1c6:	b085      	sub	sp, #20
    b1c8:	af00      	add	r7, sp, #0
    b1ca:	4603      	mov	r3, r0
    b1cc:	603a      	str	r2, [r7, #0]
    b1ce:	71fb      	strb	r3, [r7, #7]
    b1d0:	460b      	mov	r3, r1
    b1d2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b1d4:	79fa      	ldrb	r2, [r7, #7]
    b1d6:	79bb      	ldrb	r3, [r7, #6]
    b1d8:	0052      	lsls	r2, r2, #1
    b1da:	4413      	add	r3, r2
    b1dc:	011b      	lsls	r3, r3, #4
    b1de:	4a06      	ldr	r2, [pc, #24]	; (b1f8 <_usbd_ep_set_buf+0x34>)
    b1e0:	4413      	add	r3, r2
    b1e2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    b1e4:	68fb      	ldr	r3, [r7, #12]
    b1e6:	683a      	ldr	r2, [r7, #0]
    b1e8:	601a      	str	r2, [r3, #0]
}
    b1ea:	bf00      	nop
    b1ec:	3714      	adds	r7, #20
    b1ee:	46bd      	mov	sp, r7
    b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1f4:	4770      	bx	lr
    b1f6:	bf00      	nop
    b1f8:	20002168 	.word	0x20002168

0000b1fc <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    b1fc:	b480      	push	{r7}
    b1fe:	b085      	sub	sp, #20
    b200:	af00      	add	r7, sp, #0
    b202:	4603      	mov	r3, r0
    b204:	71fb      	strb	r3, [r7, #7]
    b206:	460b      	mov	r3, r1
    b208:	71bb      	strb	r3, [r7, #6]
    b20a:	4613      	mov	r3, r2
    b20c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b20e:	79fa      	ldrb	r2, [r7, #7]
    b210:	79bb      	ldrb	r3, [r7, #6]
    b212:	0052      	lsls	r2, r2, #1
    b214:	4413      	add	r3, r2
    b216:	011b      	lsls	r3, r3, #4
    b218:	4a08      	ldr	r2, [pc, #32]	; (b23c <_usbd_ep_set_in_count+0x40>)
    b21a:	4413      	add	r3, r2
    b21c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    b21e:	88bb      	ldrh	r3, [r7, #4]
    b220:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b224:	b299      	uxth	r1, r3
    b226:	68fa      	ldr	r2, [r7, #12]
    b228:	6853      	ldr	r3, [r2, #4]
    b22a:	f361 339b 	bfi	r3, r1, #14, #14
    b22e:	6053      	str	r3, [r2, #4]
}
    b230:	bf00      	nop
    b232:	3714      	adds	r7, #20
    b234:	46bd      	mov	sp, r7
    b236:	f85d 7b04 	ldr.w	r7, [sp], #4
    b23a:	4770      	bx	lr
    b23c:	20002168 	.word	0x20002168

0000b240 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    b240:	b480      	push	{r7}
    b242:	b085      	sub	sp, #20
    b244:	af00      	add	r7, sp, #0
    b246:	4603      	mov	r3, r0
    b248:	71fb      	strb	r3, [r7, #7]
    b24a:	460b      	mov	r3, r1
    b24c:	71bb      	strb	r3, [r7, #6]
    b24e:	4613      	mov	r3, r2
    b250:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b252:	79fa      	ldrb	r2, [r7, #7]
    b254:	79bb      	ldrb	r3, [r7, #6]
    b256:	0052      	lsls	r2, r2, #1
    b258:	4413      	add	r3, r2
    b25a:	011b      	lsls	r3, r3, #4
    b25c:	4a08      	ldr	r2, [pc, #32]	; (b280 <_usbd_ep_set_in_size+0x40>)
    b25e:	4413      	add	r3, r2
    b260:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    b262:	88bb      	ldrh	r3, [r7, #4]
    b264:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b268:	b299      	uxth	r1, r3
    b26a:	68fa      	ldr	r2, [r7, #12]
    b26c:	6853      	ldr	r3, [r2, #4]
    b26e:	f361 030d 	bfi	r3, r1, #0, #14
    b272:	6053      	str	r3, [r2, #4]
}
    b274:	bf00      	nop
    b276:	3714      	adds	r7, #20
    b278:	46bd      	mov	sp, r7
    b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b27e:	4770      	bx	lr
    b280:	20002168 	.word	0x20002168

0000b284 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    b284:	b480      	push	{r7}
    b286:	b085      	sub	sp, #20
    b288:	af00      	add	r7, sp, #0
    b28a:	4603      	mov	r3, r0
    b28c:	71fb      	strb	r3, [r7, #7]
    b28e:	460b      	mov	r3, r1
    b290:	71bb      	strb	r3, [r7, #6]
    b292:	4613      	mov	r3, r2
    b294:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b296:	79fa      	ldrb	r2, [r7, #7]
    b298:	79bb      	ldrb	r3, [r7, #6]
    b29a:	0052      	lsls	r2, r2, #1
    b29c:	4413      	add	r3, r2
    b29e:	011b      	lsls	r3, r3, #4
    b2a0:	4a08      	ldr	r2, [pc, #32]	; (b2c4 <_usbd_ep_set_out_count+0x40>)
    b2a2:	4413      	add	r3, r2
    b2a4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    b2a6:	88bb      	ldrh	r3, [r7, #4]
    b2a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b2ac:	b299      	uxth	r1, r3
    b2ae:	68fa      	ldr	r2, [r7, #12]
    b2b0:	6853      	ldr	r3, [r2, #4]
    b2b2:	f361 030d 	bfi	r3, r1, #0, #14
    b2b6:	6053      	str	r3, [r2, #4]
}
    b2b8:	bf00      	nop
    b2ba:	3714      	adds	r7, #20
    b2bc:	46bd      	mov	sp, r7
    b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2c2:	4770      	bx	lr
    b2c4:	20002168 	.word	0x20002168

0000b2c8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    b2c8:	b480      	push	{r7}
    b2ca:	b085      	sub	sp, #20
    b2cc:	af00      	add	r7, sp, #0
    b2ce:	4603      	mov	r3, r0
    b2d0:	71fb      	strb	r3, [r7, #7]
    b2d2:	460b      	mov	r3, r1
    b2d4:	71bb      	strb	r3, [r7, #6]
    b2d6:	4613      	mov	r3, r2
    b2d8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b2da:	79fa      	ldrb	r2, [r7, #7]
    b2dc:	79bb      	ldrb	r3, [r7, #6]
    b2de:	0052      	lsls	r2, r2, #1
    b2e0:	4413      	add	r3, r2
    b2e2:	011b      	lsls	r3, r3, #4
    b2e4:	4a08      	ldr	r2, [pc, #32]	; (b308 <_usbd_ep_set_out_size+0x40>)
    b2e6:	4413      	add	r3, r2
    b2e8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    b2ea:	88bb      	ldrh	r3, [r7, #4]
    b2ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b2f0:	b299      	uxth	r1, r3
    b2f2:	68fa      	ldr	r2, [r7, #12]
    b2f4:	6853      	ldr	r3, [r2, #4]
    b2f6:	f361 339b 	bfi	r3, r1, #14, #14
    b2fa:	6053      	str	r3, [r2, #4]
}
    b2fc:	bf00      	nop
    b2fe:	3714      	adds	r7, #20
    b300:	46bd      	mov	sp, r7
    b302:	f85d 7b04 	ldr.w	r7, [sp], #4
    b306:	4770      	bx	lr
    b308:	20002168 	.word	0x20002168

0000b30c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    b30c:	b580      	push	{r7, lr}
    b30e:	b084      	sub	sp, #16
    b310:	af00      	add	r7, sp, #0
    b312:	60ba      	str	r2, [r7, #8]
    b314:	607b      	str	r3, [r7, #4]
    b316:	4603      	mov	r3, r0
    b318:	73fb      	strb	r3, [r7, #15]
    b31a:	460b      	mov	r3, r1
    b31c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    b31e:	68bb      	ldr	r3, [r7, #8]
    b320:	b29a      	uxth	r2, r3
    b322:	7bb9      	ldrb	r1, [r7, #14]
    b324:	7bfb      	ldrb	r3, [r7, #15]
    b326:	4618      	mov	r0, r3
    b328:	4b06      	ldr	r3, [pc, #24]	; (b344 <_usbd_ep_set_in_trans+0x38>)
    b32a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    b32c:	687b      	ldr	r3, [r7, #4]
    b32e:	b29a      	uxth	r2, r3
    b330:	7bb9      	ldrb	r1, [r7, #14]
    b332:	7bfb      	ldrb	r3, [r7, #15]
    b334:	4618      	mov	r0, r3
    b336:	4b04      	ldr	r3, [pc, #16]	; (b348 <_usbd_ep_set_in_trans+0x3c>)
    b338:	4798      	blx	r3
}
    b33a:	bf00      	nop
    b33c:	3710      	adds	r7, #16
    b33e:	46bd      	mov	sp, r7
    b340:	bd80      	pop	{r7, pc}
    b342:	bf00      	nop
    b344:	0000b241 	.word	0x0000b241
    b348:	0000b1fd 	.word	0x0000b1fd

0000b34c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    b34c:	b580      	push	{r7, lr}
    b34e:	b084      	sub	sp, #16
    b350:	af00      	add	r7, sp, #0
    b352:	60ba      	str	r2, [r7, #8]
    b354:	607b      	str	r3, [r7, #4]
    b356:	4603      	mov	r3, r0
    b358:	73fb      	strb	r3, [r7, #15]
    b35a:	460b      	mov	r3, r1
    b35c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    b35e:	68bb      	ldr	r3, [r7, #8]
    b360:	b29a      	uxth	r2, r3
    b362:	7bb9      	ldrb	r1, [r7, #14]
    b364:	7bfb      	ldrb	r3, [r7, #15]
    b366:	4618      	mov	r0, r3
    b368:	4b06      	ldr	r3, [pc, #24]	; (b384 <_usbd_ep_set_out_trans+0x38>)
    b36a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    b36c:	687b      	ldr	r3, [r7, #4]
    b36e:	b29a      	uxth	r2, r3
    b370:	7bb9      	ldrb	r1, [r7, #14]
    b372:	7bfb      	ldrb	r3, [r7, #15]
    b374:	4618      	mov	r0, r3
    b376:	4b04      	ldr	r3, [pc, #16]	; (b388 <_usbd_ep_set_out_trans+0x3c>)
    b378:	4798      	blx	r3
}
    b37a:	bf00      	nop
    b37c:	3710      	adds	r7, #16
    b37e:	46bd      	mov	sp, r7
    b380:	bd80      	pop	{r7, pc}
    b382:	bf00      	nop
    b384:	0000b2c9 	.word	0x0000b2c9
    b388:	0000b285 	.word	0x0000b285

0000b38c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    b38c:	b480      	push	{r7}
    b38e:	b085      	sub	sp, #20
    b390:	af00      	add	r7, sp, #0
    b392:	4603      	mov	r3, r0
    b394:	460a      	mov	r2, r1
    b396:	71fb      	strb	r3, [r7, #7]
    b398:	4613      	mov	r3, r2
    b39a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b39c:	79fa      	ldrb	r2, [r7, #7]
    b39e:	79bb      	ldrb	r3, [r7, #6]
    b3a0:	0052      	lsls	r2, r2, #1
    b3a2:	4413      	add	r3, r2
    b3a4:	011b      	lsls	r3, r3, #4
    b3a6:	4a06      	ldr	r2, [pc, #24]	; (b3c0 <_usbd_ep_clear_bank_status+0x34>)
    b3a8:	4413      	add	r3, r2
    b3aa:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    b3ac:	68fb      	ldr	r3, [r7, #12]
    b3ae:	2200      	movs	r2, #0
    b3b0:	729a      	strb	r2, [r3, #10]
}
    b3b2:	bf00      	nop
    b3b4:	3714      	adds	r7, #20
    b3b6:	46bd      	mov	sp, r7
    b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3bc:	4770      	bx	lr
    b3be:	bf00      	nop
    b3c0:	20002168 	.word	0x20002168

0000b3c4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    b3c4:	b580      	push	{r7, lr}
    b3c6:	b082      	sub	sp, #8
    b3c8:	af00      	add	r7, sp, #0
    b3ca:	4603      	mov	r3, r0
    b3cc:	71fb      	strb	r3, [r7, #7]
    b3ce:	460b      	mov	r3, r1
    b3d0:	71bb      	strb	r3, [r7, #6]
    b3d2:	4613      	mov	r3, r2
    b3d4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    b3d6:	797b      	ldrb	r3, [r7, #5]
    b3d8:	2b00      	cmp	r3, #0
    b3da:	d00b      	beq.n	b3f4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b3dc:	79bb      	ldrb	r3, [r7, #6]
    b3de:	2240      	movs	r2, #64	; 0x40
    b3e0:	fa02 f303 	lsl.w	r3, r2, r3
    b3e4:	b2da      	uxtb	r2, r3
    b3e6:	79fb      	ldrb	r3, [r7, #7]
    b3e8:	4619      	mov	r1, r3
    b3ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b3ee:	4b09      	ldr	r3, [pc, #36]	; (b414 <_usbd_ep_set_in_rdy+0x50>)
    b3f0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    b3f2:	e00a      	b.n	b40a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b3f4:	79bb      	ldrb	r3, [r7, #6]
    b3f6:	2240      	movs	r2, #64	; 0x40
    b3f8:	fa02 f303 	lsl.w	r3, r2, r3
    b3fc:	b2da      	uxtb	r2, r3
    b3fe:	79fb      	ldrb	r3, [r7, #7]
    b400:	4619      	mov	r1, r3
    b402:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b406:	4b04      	ldr	r3, [pc, #16]	; (b418 <_usbd_ep_set_in_rdy+0x54>)
    b408:	4798      	blx	r3
}
    b40a:	bf00      	nop
    b40c:	3708      	adds	r7, #8
    b40e:	46bd      	mov	sp, r7
    b410:	bd80      	pop	{r7, pc}
    b412:	bf00      	nop
    b414:	0000a9d1 	.word	0x0000a9d1
    b418:	0000aa25 	.word	0x0000aa25

0000b41c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    b41c:	b580      	push	{r7, lr}
    b41e:	b082      	sub	sp, #8
    b420:	af00      	add	r7, sp, #0
    b422:	4603      	mov	r3, r0
    b424:	71fb      	strb	r3, [r7, #7]
    b426:	460b      	mov	r3, r1
    b428:	71bb      	strb	r3, [r7, #6]
    b42a:	4613      	mov	r3, r2
    b42c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    b42e:	797b      	ldrb	r3, [r7, #5]
    b430:	2b00      	cmp	r3, #0
    b432:	d00b      	beq.n	b44c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b434:	79bb      	ldrb	r3, [r7, #6]
    b436:	2240      	movs	r2, #64	; 0x40
    b438:	fa02 f303 	lsl.w	r3, r2, r3
    b43c:	b2da      	uxtb	r2, r3
    b43e:	79fb      	ldrb	r3, [r7, #7]
    b440:	4619      	mov	r1, r3
    b442:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b446:	4b09      	ldr	r3, [pc, #36]	; (b46c <_usbd_ep_set_out_rdy+0x50>)
    b448:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    b44a:	e00a      	b.n	b462 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b44c:	79bb      	ldrb	r3, [r7, #6]
    b44e:	2240      	movs	r2, #64	; 0x40
    b450:	fa02 f303 	lsl.w	r3, r2, r3
    b454:	b2da      	uxtb	r2, r3
    b456:	79fb      	ldrb	r3, [r7, #7]
    b458:	4619      	mov	r1, r3
    b45a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b45e:	4b04      	ldr	r3, [pc, #16]	; (b470 <_usbd_ep_set_out_rdy+0x54>)
    b460:	4798      	blx	r3
}
    b462:	bf00      	nop
    b464:	3708      	adds	r7, #8
    b466:	46bd      	mov	sp, r7
    b468:	bd80      	pop	{r7, pc}
    b46a:	bf00      	nop
    b46c:	0000aa25 	.word	0x0000aa25
    b470:	0000a9d1 	.word	0x0000a9d1

0000b474 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    b474:	b480      	push	{r7}
    b476:	b083      	sub	sp, #12
    b478:	af00      	add	r7, sp, #0
    b47a:	4603      	mov	r3, r0
    b47c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b47e:	88fb      	ldrh	r3, [r7, #6]
    b480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b484:	d820      	bhi.n	b4c8 <_usbd_ep_pcksize_size+0x54>
    b486:	88fb      	ldrh	r3, [r7, #6]
    b488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b48c:	d81a      	bhi.n	b4c4 <_usbd_ep_pcksize_size+0x50>
    b48e:	88fb      	ldrh	r3, [r7, #6]
    b490:	2b80      	cmp	r3, #128	; 0x80
    b492:	d815      	bhi.n	b4c0 <_usbd_ep_pcksize_size+0x4c>
    b494:	88fb      	ldrh	r3, [r7, #6]
    b496:	2b40      	cmp	r3, #64	; 0x40
    b498:	d810      	bhi.n	b4bc <_usbd_ep_pcksize_size+0x48>
    b49a:	88fb      	ldrh	r3, [r7, #6]
    b49c:	2b20      	cmp	r3, #32
    b49e:	d80b      	bhi.n	b4b8 <_usbd_ep_pcksize_size+0x44>
    b4a0:	88fb      	ldrh	r3, [r7, #6]
    b4a2:	2b10      	cmp	r3, #16
    b4a4:	d806      	bhi.n	b4b4 <_usbd_ep_pcksize_size+0x40>
    b4a6:	88fb      	ldrh	r3, [r7, #6]
    b4a8:	2b08      	cmp	r3, #8
    b4aa:	bf8c      	ite	hi
    b4ac:	2301      	movhi	r3, #1
    b4ae:	2300      	movls	r3, #0
    b4b0:	b2db      	uxtb	r3, r3
    b4b2:	e00a      	b.n	b4ca <_usbd_ep_pcksize_size+0x56>
    b4b4:	2302      	movs	r3, #2
    b4b6:	e008      	b.n	b4ca <_usbd_ep_pcksize_size+0x56>
    b4b8:	2303      	movs	r3, #3
    b4ba:	e006      	b.n	b4ca <_usbd_ep_pcksize_size+0x56>
    b4bc:	2304      	movs	r3, #4
    b4be:	e004      	b.n	b4ca <_usbd_ep_pcksize_size+0x56>
    b4c0:	2305      	movs	r3, #5
    b4c2:	e002      	b.n	b4ca <_usbd_ep_pcksize_size+0x56>
    b4c4:	2306      	movs	r3, #6
    b4c6:	e000      	b.n	b4ca <_usbd_ep_pcksize_size+0x56>
    b4c8:	2307      	movs	r3, #7
}
    b4ca:	4618      	mov	r0, r3
    b4cc:	370c      	adds	r7, #12
    b4ce:	46bd      	mov	sp, r7
    b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4d4:	4770      	bx	lr
	...

0000b4d8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    b4d8:	b480      	push	{r7}
    b4da:	b085      	sub	sp, #20
    b4dc:	af00      	add	r7, sp, #0
    b4de:	4603      	mov	r3, r0
    b4e0:	460a      	mov	r2, r1
    b4e2:	71fb      	strb	r3, [r7, #7]
    b4e4:	4613      	mov	r3, r2
    b4e6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b4e8:	79fb      	ldrb	r3, [r7, #7]
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d008      	beq.n	b500 <_usb_d_dev_ept+0x28>
    b4ee:	79bb      	ldrb	r3, [r7, #6]
    b4f0:	2b00      	cmp	r3, #0
    b4f2:	d003      	beq.n	b4fc <_usb_d_dev_ept+0x24>
    b4f4:	79fb      	ldrb	r3, [r7, #7]
    b4f6:	3304      	adds	r3, #4
    b4f8:	b2db      	uxtb	r3, r3
    b4fa:	e002      	b.n	b502 <_usb_d_dev_ept+0x2a>
    b4fc:	79fb      	ldrb	r3, [r7, #7]
    b4fe:	e000      	b.n	b502 <_usb_d_dev_ept+0x2a>
    b500:	2300      	movs	r3, #0
    b502:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    b504:	7bfa      	ldrb	r2, [r7, #15]
    b506:	4613      	mov	r3, r2
    b508:	009b      	lsls	r3, r3, #2
    b50a:	4413      	add	r3, r2
    b50c:	009b      	lsls	r3, r3, #2
    b50e:	3310      	adds	r3, #16
    b510:	4a04      	ldr	r2, [pc, #16]	; (b524 <_usb_d_dev_ept+0x4c>)
    b512:	4413      	add	r3, r2
    b514:	3304      	adds	r3, #4
}
    b516:	4618      	mov	r0, r3
    b518:	3714      	adds	r7, #20
    b51a:	46bd      	mov	sp, r7
    b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b520:	4770      	bx	lr
    b522:	bf00      	nop
    b524:	200020a0 	.word	0x200020a0

0000b528 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    b528:	b580      	push	{r7, lr}
    b52a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    b52c:	2104      	movs	r1, #4
    b52e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b532:	4b03      	ldr	r3, [pc, #12]	; (b540 <_usb_d_dev_sof+0x18>)
    b534:	4798      	blx	r3
	dev_inst.callbacks.sof();
    b536:	4b03      	ldr	r3, [pc, #12]	; (b544 <_usb_d_dev_sof+0x1c>)
    b538:	681b      	ldr	r3, [r3, #0]
    b53a:	4798      	blx	r3
}
    b53c:	bf00      	nop
    b53e:	bd80      	pop	{r7, pc}
    b540:	0000ab9f 	.word	0x0000ab9f
    b544:	200020a0 	.word	0x200020a0

0000b548 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    b548:	b580      	push	{r7, lr}
    b54a:	b084      	sub	sp, #16
    b54c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    b54e:	2300      	movs	r3, #0
    b550:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b552:	f240 2101 	movw	r1, #513	; 0x201
    b556:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b55a:	4b1a      	ldr	r3, [pc, #104]	; (b5c4 <_usb_d_dev_lpmsusp+0x7c>)
    b55c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b55e:	f240 2101 	movw	r1, #513	; 0x201
    b562:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b566:	4b18      	ldr	r3, [pc, #96]	; (b5c8 <_usb_d_dev_lpmsusp+0x80>)
    b568:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b56a:	2170      	movs	r1, #112	; 0x70
    b56c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b570:	4b16      	ldr	r3, [pc, #88]	; (b5cc <_usb_d_dev_lpmsusp+0x84>)
    b572:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b574:	2300      	movs	r3, #0
    b576:	73fb      	strb	r3, [r7, #15]
    b578:	e018      	b.n	b5ac <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    b57a:	7bfb      	ldrb	r3, [r7, #15]
    b57c:	015b      	lsls	r3, r3, #5
    b57e:	4a14      	ldr	r2, [pc, #80]	; (b5d0 <_usb_d_dev_lpmsusp+0x88>)
    b580:	4413      	add	r3, r2
    b582:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    b584:	687b      	ldr	r3, [r7, #4]
    b586:	891b      	ldrh	r3, [r3, #8]
    b588:	f3c3 0303 	ubfx	r3, r3, #0, #4
    b58c:	b2db      	uxtb	r3, r3
    b58e:	2b03      	cmp	r3, #3
    b590:	d109      	bne.n	b5a6 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    b592:	687b      	ldr	r3, [r7, #4]
    b594:	891b      	ldrh	r3, [r3, #8]
    b596:	f3c3 130a 	ubfx	r3, r3, #4, #11
    b59a:	b29b      	uxth	r3, r3
    b59c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    b59e:	687b      	ldr	r3, [r7, #4]
    b5a0:	2200      	movs	r2, #0
    b5a2:	811a      	strh	r2, [r3, #8]
			break;
    b5a4:	e005      	b.n	b5b2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b5a6:	7bfb      	ldrb	r3, [r7, #15]
    b5a8:	3301      	adds	r3, #1
    b5aa:	73fb      	strb	r3, [r7, #15]
    b5ac:	7bfb      	ldrb	r3, [r7, #15]
    b5ae:	2b03      	cmp	r3, #3
    b5b0:	d9e3      	bls.n	b57a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    b5b2:	4b08      	ldr	r3, [pc, #32]	; (b5d4 <_usb_d_dev_lpmsusp+0x8c>)
    b5b4:	685b      	ldr	r3, [r3, #4]
    b5b6:	68b9      	ldr	r1, [r7, #8]
    b5b8:	2003      	movs	r0, #3
    b5ba:	4798      	blx	r3
}
    b5bc:	bf00      	nop
    b5be:	3710      	adds	r7, #16
    b5c0:	46bd      	mov	sp, r7
    b5c2:	bd80      	pop	{r7, pc}
    b5c4:	0000ab9f 	.word	0x0000ab9f
    b5c8:	0000abf5 	.word	0x0000abf5
    b5cc:	0000abbd 	.word	0x0000abbd
    b5d0:	20002168 	.word	0x20002168
    b5d4:	200020a0 	.word	0x200020a0

0000b5d8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    b5d8:	b580      	push	{r7, lr}
    b5da:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    b5dc:	2180      	movs	r1, #128	; 0x80
    b5de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b5e2:	4b04      	ldr	r3, [pc, #16]	; (b5f4 <_usb_d_dev_ramerr+0x1c>)
    b5e4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    b5e6:	4b04      	ldr	r3, [pc, #16]	; (b5f8 <_usb_d_dev_ramerr+0x20>)
    b5e8:	685b      	ldr	r3, [r3, #4]
    b5ea:	2100      	movs	r1, #0
    b5ec:	2005      	movs	r0, #5
    b5ee:	4798      	blx	r3
}
    b5f0:	bf00      	nop
    b5f2:	bd80      	pop	{r7, pc}
    b5f4:	0000ab9f 	.word	0x0000ab9f
    b5f8:	200020a0 	.word	0x200020a0

0000b5fc <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    b5fc:	b580      	push	{r7, lr}
    b5fe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b600:	2170      	movs	r1, #112	; 0x70
    b602:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b606:	4b0b      	ldr	r3, [pc, #44]	; (b634 <_usb_d_dev_wakeup+0x38>)
    b608:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b60a:	2170      	movs	r1, #112	; 0x70
    b60c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b610:	4b09      	ldr	r3, [pc, #36]	; (b638 <_usb_d_dev_wakeup+0x3c>)
    b612:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b614:	f240 2101 	movw	r1, #513	; 0x201
    b618:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b61c:	4b07      	ldr	r3, [pc, #28]	; (b63c <_usb_d_dev_wakeup+0x40>)
    b61e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    b620:	2000      	movs	r0, #0
    b622:	4b07      	ldr	r3, [pc, #28]	; (b640 <_usb_d_dev_wakeup+0x44>)
    b624:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    b626:	4b07      	ldr	r3, [pc, #28]	; (b644 <_usb_d_dev_wakeup+0x48>)
    b628:	685b      	ldr	r3, [r3, #4]
    b62a:	2100      	movs	r1, #0
    b62c:	2002      	movs	r0, #2
    b62e:	4798      	blx	r3
}
    b630:	bf00      	nop
    b632:	bd80      	pop	{r7, pc}
    b634:	0000ab9f 	.word	0x0000ab9f
    b638:	0000abf5 	.word	0x0000abf5
    b63c:	0000abbd 	.word	0x0000abbd
    b640:	0000ae9d 	.word	0x0000ae9d
    b644:	200020a0 	.word	0x200020a0

0000b648 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    b648:	b580      	push	{r7, lr}
    b64a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    b64c:	2200      	movs	r2, #0
    b64e:	2100      	movs	r1, #0
    b650:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b654:	4b0d      	ldr	r3, [pc, #52]	; (b68c <_usb_d_dev_reset+0x44>)
    b656:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    b658:	2108      	movs	r1, #8
    b65a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b65e:	4b0c      	ldr	r3, [pc, #48]	; (b690 <_usb_d_dev_reset+0x48>)
    b660:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b662:	2170      	movs	r1, #112	; 0x70
    b664:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b668:	4b0a      	ldr	r3, [pc, #40]	; (b694 <_usb_d_dev_reset+0x4c>)
    b66a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b66c:	f240 2101 	movw	r1, #513	; 0x201
    b670:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b674:	4b08      	ldr	r3, [pc, #32]	; (b698 <_usb_d_dev_reset+0x50>)
    b676:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    b678:	4b08      	ldr	r3, [pc, #32]	; (b69c <_usb_d_dev_reset+0x54>)
    b67a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    b67c:	4b08      	ldr	r3, [pc, #32]	; (b6a0 <_usb_d_dev_reset+0x58>)
    b67e:	685b      	ldr	r3, [r3, #4]
    b680:	2100      	movs	r1, #0
    b682:	2001      	movs	r0, #1
    b684:	4798      	blx	r3
}
    b686:	bf00      	nop
    b688:	bd80      	pop	{r7, pc}
    b68a:	bf00      	nop
    b68c:	0000ab35 	.word	0x0000ab35
    b690:	0000ab9f 	.word	0x0000ab9f
    b694:	0000abf5 	.word	0x0000abf5
    b698:	0000abbd 	.word	0x0000abbd
    b69c:	0000c205 	.word	0x0000c205
    b6a0:	200020a0 	.word	0x200020a0

0000b6a4 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    b6a4:	b580      	push	{r7, lr}
    b6a6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b6a8:	f240 2101 	movw	r1, #513	; 0x201
    b6ac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b6b0:	4b09      	ldr	r3, [pc, #36]	; (b6d8 <_usb_d_dev_suspend+0x34>)
    b6b2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b6b4:	f240 2101 	movw	r1, #513	; 0x201
    b6b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b6bc:	4b07      	ldr	r3, [pc, #28]	; (b6dc <_usb_d_dev_suspend+0x38>)
    b6be:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b6c0:	2170      	movs	r1, #112	; 0x70
    b6c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b6c6:	4b06      	ldr	r3, [pc, #24]	; (b6e0 <_usb_d_dev_suspend+0x3c>)
    b6c8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    b6ca:	4b06      	ldr	r3, [pc, #24]	; (b6e4 <_usb_d_dev_suspend+0x40>)
    b6cc:	685b      	ldr	r3, [r3, #4]
    b6ce:	2100      	movs	r1, #0
    b6d0:	2004      	movs	r0, #4
    b6d2:	4798      	blx	r3
}
    b6d4:	bf00      	nop
    b6d6:	bd80      	pop	{r7, pc}
    b6d8:	0000ab9f 	.word	0x0000ab9f
    b6dc:	0000abf5 	.word	0x0000abf5
    b6e0:	0000abbd 	.word	0x0000abbd
    b6e4:	200020a0 	.word	0x200020a0

0000b6e8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    b6e8:	b580      	push	{r7, lr}
    b6ea:	b082      	sub	sp, #8
    b6ec:	af00      	add	r7, sp, #0
	bool     rc    = true;
    b6ee:	2301      	movs	r3, #1
    b6f0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    b6f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b6f6:	4b22      	ldr	r3, [pc, #136]	; (b780 <_usb_d_dev_handle_nep+0x98>)
    b6f8:	4798      	blx	r3
    b6fa:	4603      	mov	r3, r0
    b6fc:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    b6fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b702:	4b20      	ldr	r3, [pc, #128]	; (b784 <_usb_d_dev_handle_nep+0x9c>)
    b704:	4798      	blx	r3
    b706:	4603      	mov	r3, r0
    b708:	461a      	mov	r2, r3
    b70a:	88bb      	ldrh	r3, [r7, #4]
    b70c:	4013      	ands	r3, r2
    b70e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    b710:	88bb      	ldrh	r3, [r7, #4]
    b712:	f003 0304 	and.w	r3, r3, #4
    b716:	2b00      	cmp	r3, #0
    b718:	d003      	beq.n	b722 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    b71a:	4b1b      	ldr	r3, [pc, #108]	; (b788 <_usb_d_dev_handle_nep+0xa0>)
    b71c:	4798      	blx	r3
		return true;
    b71e:	2301      	movs	r3, #1
    b720:	e02a      	b.n	b778 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    b722:	88bb      	ldrh	r3, [r7, #4]
    b724:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b728:	2b00      	cmp	r3, #0
    b72a:	d002      	beq.n	b732 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    b72c:	4b17      	ldr	r3, [pc, #92]	; (b78c <_usb_d_dev_handle_nep+0xa4>)
    b72e:	4798      	blx	r3
    b730:	e021      	b.n	b776 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    b732:	88bb      	ldrh	r3, [r7, #4]
    b734:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b738:	2b00      	cmp	r3, #0
    b73a:	d002      	beq.n	b742 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    b73c:	4b14      	ldr	r3, [pc, #80]	; (b790 <_usb_d_dev_handle_nep+0xa8>)
    b73e:	4798      	blx	r3
    b740:	e019      	b.n	b776 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    b742:	88bb      	ldrh	r3, [r7, #4]
    b744:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b748:	2b00      	cmp	r3, #0
    b74a:	d002      	beq.n	b752 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    b74c:	4b11      	ldr	r3, [pc, #68]	; (b794 <_usb_d_dev_handle_nep+0xac>)
    b74e:	4798      	blx	r3
    b750:	e011      	b.n	b776 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    b752:	88bb      	ldrh	r3, [r7, #4]
    b754:	f003 0308 	and.w	r3, r3, #8
    b758:	2b00      	cmp	r3, #0
    b75a:	d002      	beq.n	b762 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    b75c:	4b0e      	ldr	r3, [pc, #56]	; (b798 <_usb_d_dev_handle_nep+0xb0>)
    b75e:	4798      	blx	r3
    b760:	e009      	b.n	b776 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    b762:	88bb      	ldrh	r3, [r7, #4]
    b764:	f003 0301 	and.w	r3, r3, #1
    b768:	2b00      	cmp	r3, #0
    b76a:	d002      	beq.n	b772 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    b76c:	4b0b      	ldr	r3, [pc, #44]	; (b79c <_usb_d_dev_handle_nep+0xb4>)
    b76e:	4798      	blx	r3
    b770:	e001      	b.n	b776 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    b772:	2300      	movs	r3, #0
    b774:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    b776:	79fb      	ldrb	r3, [r7, #7]
}
    b778:	4618      	mov	r0, r3
    b77a:	3708      	adds	r7, #8
    b77c:	46bd      	mov	sp, r7
    b77e:	bd80      	pop	{r7, pc}
    b780:	0000ab85 	.word	0x0000ab85
    b784:	0000abdb 	.word	0x0000abdb
    b788:	0000b529 	.word	0x0000b529
    b78c:	0000b549 	.word	0x0000b549
    b790:	0000b5d9 	.word	0x0000b5d9
    b794:	0000b5fd 	.word	0x0000b5fd
    b798:	0000b649 	.word	0x0000b649
    b79c:	0000b6a5 	.word	0x0000b6a5

0000b7a0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b7a0:	b590      	push	{r4, r7, lr}
    b7a2:	b089      	sub	sp, #36	; 0x24
    b7a4:	af00      	add	r7, sp, #0
    b7a6:	6078      	str	r0, [r7, #4]
    b7a8:	460b      	mov	r3, r1
    b7aa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    b7ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b7b0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    b7b2:	687b      	ldr	r3, [r7, #4]
    b7b4:	7c9b      	ldrb	r3, [r3, #18]
    b7b6:	f003 030f 	and.w	r3, r3, #15
    b7ba:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b7bc:	7dfb      	ldrb	r3, [r7, #23]
    b7be:	015b      	lsls	r3, r3, #5
    b7c0:	4a73      	ldr	r2, [pc, #460]	; (b990 <_usb_d_dev_in_next+0x1f0>)
    b7c2:	4413      	add	r3, r2
    b7c4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    b7c6:	78fb      	ldrb	r3, [r7, #3]
    b7c8:	2b00      	cmp	r3, #0
    b7ca:	d006      	beq.n	b7da <_usb_d_dev_in_next+0x3a>
    b7cc:	693b      	ldr	r3, [r7, #16]
    b7ce:	3310      	adds	r3, #16
    b7d0:	685b      	ldr	r3, [r3, #4]
    b7d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b7d6:	b29b      	uxth	r3, r3
    b7d8:	e000      	b.n	b7dc <_usb_d_dev_in_next+0x3c>
    b7da:	2300      	movs	r3, #0
    b7dc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    b7de:	687b      	ldr	r3, [r7, #4]
    b7e0:	8a1b      	ldrh	r3, [r3, #16]
    b7e2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b7e6:	4293      	cmp	r3, r2
    b7e8:	d103      	bne.n	b7f2 <_usb_d_dev_in_next+0x52>
    b7ea:	687b      	ldr	r3, [r7, #4]
    b7ec:	8a1b      	ldrh	r3, [r3, #16]
    b7ee:	b21b      	sxth	r3, r3
    b7f0:	e004      	b.n	b7fc <_usb_d_dev_in_next+0x5c>
    b7f2:	687b      	ldr	r3, [r7, #4]
    b7f4:	8a1b      	ldrh	r3, [r3, #16]
    b7f6:	3b01      	subs	r3, #1
    b7f8:	b29b      	uxth	r3, r3
    b7fa:	b21b      	sxth	r3, r3
    b7fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    b800:	4013      	ands	r3, r2
    b802:	b21b      	sxth	r3, r3
    b804:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    b806:	2300      	movs	r3, #0
    b808:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	7cdb      	ldrb	r3, [r3, #19]
    b80e:	f003 0307 	and.w	r3, r3, #7
    b812:	b2db      	uxtb	r3, r3
    b814:	2b01      	cmp	r3, #1
    b816:	bf0c      	ite	eq
    b818:	2301      	moveq	r3, #1
    b81a:	2300      	movne	r3, #0
    b81c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    b81e:	78fb      	ldrb	r3, [r7, #3]
    b820:	2b00      	cmp	r3, #0
    b822:	d004      	beq.n	b82e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    b824:	7dfb      	ldrb	r3, [r7, #23]
    b826:	2101      	movs	r1, #1
    b828:	4618      	mov	r0, r3
    b82a:	4b5a      	ldr	r3, [pc, #360]	; (b994 <_usb_d_dev_in_next+0x1f4>)
    b82c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    b82e:	687b      	ldr	r3, [r7, #4]
    b830:	689a      	ldr	r2, [r3, #8]
    b832:	89fb      	ldrh	r3, [r7, #14]
    b834:	441a      	add	r2, r3
    b836:	687b      	ldr	r3, [r7, #4]
    b838:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    b83a:	687b      	ldr	r3, [r7, #4]
    b83c:	689a      	ldr	r2, [r3, #8]
    b83e:	687b      	ldr	r3, [r7, #4]
    b840:	685b      	ldr	r3, [r3, #4]
    b842:	429a      	cmp	r2, r3
    b844:	d243      	bcs.n	b8ce <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    b846:	687b      	ldr	r3, [r7, #4]
    b848:	685b      	ldr	r3, [r3, #4]
    b84a:	b29a      	uxth	r2, r3
    b84c:	687b      	ldr	r3, [r7, #4]
    b84e:	689b      	ldr	r3, [r3, #8]
    b850:	b29b      	uxth	r3, r3
    b852:	1ad3      	subs	r3, r2, r3
    b854:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    b856:	687b      	ldr	r3, [r7, #4]
    b858:	7cdb      	ldrb	r3, [r3, #19]
    b85a:	f003 0320 	and.w	r3, r3, #32
    b85e:	b2db      	uxtb	r3, r3
    b860:	2b00      	cmp	r3, #0
    b862:	d01b      	beq.n	b89c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    b864:	687b      	ldr	r3, [r7, #4]
    b866:	8a1b      	ldrh	r3, [r3, #16]
    b868:	8bfa      	ldrh	r2, [r7, #30]
    b86a:	429a      	cmp	r2, r3
    b86c:	d902      	bls.n	b874 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    b86e:	687b      	ldr	r3, [r7, #4]
    b870:	8a1b      	ldrh	r3, [r3, #16]
    b872:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    b874:	687b      	ldr	r3, [r7, #4]
    b876:	68d8      	ldr	r0, [r3, #12]
    b878:	687b      	ldr	r3, [r7, #4]
    b87a:	681a      	ldr	r2, [r3, #0]
    b87c:	687b      	ldr	r3, [r7, #4]
    b87e:	689b      	ldr	r3, [r3, #8]
    b880:	4413      	add	r3, r2
    b882:	8bfa      	ldrh	r2, [r7, #30]
    b884:	4619      	mov	r1, r3
    b886:	4b44      	ldr	r3, [pc, #272]	; (b998 <_usb_d_dev_in_next+0x1f8>)
    b888:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	68db      	ldr	r3, [r3, #12]
    b88e:	461a      	mov	r2, r3
    b890:	7dfb      	ldrb	r3, [r7, #23]
    b892:	2101      	movs	r1, #1
    b894:	4618      	mov	r0, r3
    b896:	4b41      	ldr	r3, [pc, #260]	; (b99c <_usb_d_dev_in_next+0x1fc>)
    b898:	4798      	blx	r3
    b89a:	e011      	b.n	b8c0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    b89c:	8bfb      	ldrh	r3, [r7, #30]
    b89e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b8a2:	d902      	bls.n	b8aa <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    b8a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b8a8:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b8aa:	687b      	ldr	r3, [r7, #4]
    b8ac:	681a      	ldr	r2, [r3, #0]
    b8ae:	687b      	ldr	r3, [r7, #4]
    b8b0:	689b      	ldr	r3, [r3, #8]
    b8b2:	4413      	add	r3, r2
    b8b4:	461a      	mov	r2, r3
    b8b6:	7dfb      	ldrb	r3, [r7, #23]
    b8b8:	2101      	movs	r1, #1
    b8ba:	4618      	mov	r0, r3
    b8bc:	4b37      	ldr	r3, [pc, #220]	; (b99c <_usb_d_dev_in_next+0x1fc>)
    b8be:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    b8c0:	8bfa      	ldrh	r2, [r7, #30]
    b8c2:	7df8      	ldrb	r0, [r7, #23]
    b8c4:	2300      	movs	r3, #0
    b8c6:	2101      	movs	r1, #1
    b8c8:	4c35      	ldr	r4, [pc, #212]	; (b9a0 <_usb_d_dev_in_next+0x200>)
    b8ca:	47a0      	blx	r4
		goto _in_tx_exec;
    b8cc:	e041      	b.n	b952 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    b8ce:	687b      	ldr	r3, [r7, #4]
    b8d0:	7cdb      	ldrb	r3, [r3, #19]
    b8d2:	f003 0310 	and.w	r3, r3, #16
    b8d6:	b2db      	uxtb	r3, r3
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d00b      	beq.n	b8f4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    b8dc:	687a      	ldr	r2, [r7, #4]
    b8de:	7cd3      	ldrb	r3, [r2, #19]
    b8e0:	f36f 1304 	bfc	r3, #4, #1
    b8e4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    b8e6:	7df8      	ldrb	r0, [r7, #23]
    b8e8:	2300      	movs	r3, #0
    b8ea:	2200      	movs	r2, #0
    b8ec:	2101      	movs	r1, #1
    b8ee:	4c2c      	ldr	r4, [pc, #176]	; (b9a0 <_usb_d_dev_in_next+0x200>)
    b8f0:	47a0      	blx	r4
		goto _in_tx_exec;
    b8f2:	e02e      	b.n	b952 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    b8f4:	7afb      	ldrb	r3, [r7, #11]
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d006      	beq.n	b908 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    b8fa:	7dfb      	ldrb	r3, [r7, #23]
    b8fc:	224b      	movs	r2, #75	; 0x4b
    b8fe:	4619      	mov	r1, r3
    b900:	69b8      	ldr	r0, [r7, #24]
    b902:	4b28      	ldr	r3, [pc, #160]	; (b9a4 <_usb_d_dev_in_next+0x204>)
    b904:	4798      	blx	r3
    b906:	e005      	b.n	b914 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    b908:	7dfb      	ldrb	r3, [r7, #23]
    b90a:	224a      	movs	r2, #74	; 0x4a
    b90c:	4619      	mov	r1, r3
    b90e:	69b8      	ldr	r0, [r7, #24]
    b910:	4b24      	ldr	r3, [pc, #144]	; (b9a4 <_usb_d_dev_in_next+0x204>)
    b912:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    b914:	687b      	ldr	r3, [r7, #4]
    b916:	8a1b      	ldrh	r3, [r3, #16]
    b918:	89ba      	ldrh	r2, [r7, #12]
    b91a:	429a      	cmp	r2, r3
    b91c:	d114      	bne.n	b948 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    b91e:	687a      	ldr	r2, [r7, #4]
    b920:	7cd3      	ldrb	r3, [r2, #19]
    b922:	f36f 1386 	bfc	r3, #6, #1
    b926:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    b928:	4b1f      	ldr	r3, [pc, #124]	; (b9a8 <_usb_d_dev_in_next+0x208>)
    b92a:	68db      	ldr	r3, [r3, #12]
    b92c:	687a      	ldr	r2, [r7, #4]
    b92e:	7c90      	ldrb	r0, [r2, #18]
    b930:	687a      	ldr	r2, [r7, #4]
    b932:	6892      	ldr	r2, [r2, #8]
    b934:	4611      	mov	r1, r2
    b936:	4798      	blx	r3
    b938:	4603      	mov	r3, r0
    b93a:	2b00      	cmp	r3, #0
    b93c:	d124      	bne.n	b988 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    b93e:	687a      	ldr	r2, [r7, #4]
    b940:	7cd3      	ldrb	r3, [r2, #19]
    b942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b946:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b948:	2100      	movs	r1, #0
    b94a:	6878      	ldr	r0, [r7, #4]
    b94c:	4b17      	ldr	r3, [pc, #92]	; (b9ac <_usb_d_dev_in_next+0x20c>)
    b94e:	4798      	blx	r3
	return;
    b950:	e01b      	b.n	b98a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    b952:	78fb      	ldrb	r3, [r7, #3]
    b954:	f083 0301 	eor.w	r3, r3, #1
    b958:	b2db      	uxtb	r3, r3
    b95a:	2b00      	cmp	r3, #0
    b95c:	d00d      	beq.n	b97a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    b95e:	7afb      	ldrb	r3, [r7, #11]
    b960:	2b00      	cmp	r3, #0
    b962:	d002      	beq.n	b96a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    b964:	234e      	movs	r3, #78	; 0x4e
    b966:	777b      	strb	r3, [r7, #29]
    b968:	e001      	b.n	b96e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    b96a:	234a      	movs	r3, #74	; 0x4a
    b96c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b96e:	7f7a      	ldrb	r2, [r7, #29]
    b970:	7dfb      	ldrb	r3, [r7, #23]
    b972:	4619      	mov	r1, r3
    b974:	69b8      	ldr	r0, [r7, #24]
    b976:	4b0e      	ldr	r3, [pc, #56]	; (b9b0 <_usb_d_dev_in_next+0x210>)
    b978:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    b97a:	7dfb      	ldrb	r3, [r7, #23]
    b97c:	2201      	movs	r2, #1
    b97e:	2101      	movs	r1, #1
    b980:	4618      	mov	r0, r3
    b982:	4b0c      	ldr	r3, [pc, #48]	; (b9b4 <_usb_d_dev_in_next+0x214>)
    b984:	4798      	blx	r3
    b986:	e000      	b.n	b98a <_usb_d_dev_in_next+0x1ea>
			return;
    b988:	bf00      	nop
}
    b98a:	3724      	adds	r7, #36	; 0x24
    b98c:	46bd      	mov	sp, r7
    b98e:	bd90      	pop	{r4, r7, pc}
    b990:	20002168 	.word	0x20002168
    b994:	0000b199 	.word	0x0000b199
    b998:	0000f9f1 	.word	0x0000f9f1
    b99c:	0000b1c5 	.word	0x0000b1c5
    b9a0:	0000b30d 	.word	0x0000b30d
    b9a4:	0000aaa5 	.word	0x0000aaa5
    b9a8:	200020a0 	.word	0x200020a0
    b9ac:	0000cac9 	.word	0x0000cac9
    b9b0:	0000aa79 	.word	0x0000aa79
    b9b4:	0000b3c5 	.word	0x0000b3c5

0000b9b8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b9b8:	b590      	push	{r4, r7, lr}
    b9ba:	b08b      	sub	sp, #44	; 0x2c
    b9bc:	af00      	add	r7, sp, #0
    b9be:	6078      	str	r0, [r7, #4]
    b9c0:	460b      	mov	r3, r1
    b9c2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    b9c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b9c8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    b9ca:	687b      	ldr	r3, [r7, #4]
    b9cc:	7c9b      	ldrb	r3, [r3, #18]
    b9ce:	f003 030f 	and.w	r3, r3, #15
    b9d2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b9d4:	7ffb      	ldrb	r3, [r7, #31]
    b9d6:	015b      	lsls	r3, r3, #5
    b9d8:	4a94      	ldr	r2, [pc, #592]	; (bc2c <_usb_d_dev_out_next+0x274>)
    b9da:	4413      	add	r3, r2
    b9dc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    b9de:	78fb      	ldrb	r3, [r7, #3]
    b9e0:	2b00      	cmp	r3, #0
    b9e2:	d005      	beq.n	b9f0 <_usb_d_dev_out_next+0x38>
    b9e4:	69bb      	ldr	r3, [r7, #24]
    b9e6:	685b      	ldr	r3, [r3, #4]
    b9e8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    b9ec:	b29b      	uxth	r3, r3
    b9ee:	e000      	b.n	b9f2 <_usb_d_dev_out_next+0x3a>
    b9f0:	2300      	movs	r3, #0
    b9f2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    b9f4:	78fb      	ldrb	r3, [r7, #3]
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d005      	beq.n	ba06 <_usb_d_dev_out_next+0x4e>
    b9fa:	69bb      	ldr	r3, [r7, #24]
    b9fc:	685b      	ldr	r3, [r3, #4]
    b9fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ba02:	b29b      	uxth	r3, r3
    ba04:	e000      	b.n	ba08 <_usb_d_dev_out_next+0x50>
    ba06:	2300      	movs	r3, #0
    ba08:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ba0a:	687b      	ldr	r3, [r7, #4]
    ba0c:	8a1b      	ldrh	r3, [r3, #16]
    ba0e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ba12:	4293      	cmp	r3, r2
    ba14:	d004      	beq.n	ba20 <_usb_d_dev_out_next+0x68>
    ba16:	687b      	ldr	r3, [r7, #4]
    ba18:	8a1b      	ldrh	r3, [r3, #16]
    ba1a:	3b01      	subs	r3, #1
    ba1c:	b29b      	uxth	r3, r3
    ba1e:	e001      	b.n	ba24 <_usb_d_dev_out_next+0x6c>
    ba20:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ba24:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    ba26:	8aba      	ldrh	r2, [r7, #20]
    ba28:	8a7b      	ldrh	r3, [r7, #18]
    ba2a:	4013      	ands	r3, r2
    ba2c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ba2e:	687b      	ldr	r3, [r7, #4]
    ba30:	7cdb      	ldrb	r3, [r3, #19]
    ba32:	f003 0307 	and.w	r3, r3, #7
    ba36:	b2db      	uxtb	r3, r3
    ba38:	2b01      	cmp	r3, #1
    ba3a:	bf0c      	ite	eq
    ba3c:	2301      	moveq	r3, #1
    ba3e:	2300      	movne	r3, #0
    ba40:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    ba42:	78fb      	ldrb	r3, [r7, #3]
    ba44:	2b00      	cmp	r3, #0
    ba46:	d004      	beq.n	ba52 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    ba48:	7ffb      	ldrb	r3, [r7, #31]
    ba4a:	2100      	movs	r1, #0
    ba4c:	4618      	mov	r0, r3
    ba4e:	4b78      	ldr	r3, [pc, #480]	; (bc30 <_usb_d_dev_out_next+0x278>)
    ba50:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    ba52:	687b      	ldr	r3, [r7, #4]
    ba54:	7cdb      	ldrb	r3, [r3, #19]
    ba56:	f003 0320 	and.w	r3, r3, #32
    ba5a:	b2db      	uxtb	r3, r3
    ba5c:	2b00      	cmp	r3, #0
    ba5e:	d01c      	beq.n	ba9a <_usb_d_dev_out_next+0xe2>
    ba60:	687b      	ldr	r3, [r7, #4]
    ba62:	685b      	ldr	r3, [r3, #4]
    ba64:	2b00      	cmp	r3, #0
    ba66:	d018      	beq.n	ba9a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    ba68:	687b      	ldr	r3, [r7, #4]
    ba6a:	685b      	ldr	r3, [r3, #4]
    ba6c:	b29a      	uxth	r2, r3
    ba6e:	687b      	ldr	r3, [r7, #4]
    ba70:	689b      	ldr	r3, [r3, #8]
    ba72:	b29b      	uxth	r3, r3
    ba74:	1ad3      	subs	r3, r2, r3
    ba76:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    ba78:	687b      	ldr	r3, [r7, #4]
    ba7a:	681a      	ldr	r2, [r3, #0]
    ba7c:	687b      	ldr	r3, [r7, #4]
    ba7e:	689b      	ldr	r3, [r3, #8]
    ba80:	18d0      	adds	r0, r2, r3
    ba82:	687b      	ldr	r3, [r7, #4]
    ba84:	68d9      	ldr	r1, [r3, #12]
    ba86:	89ba      	ldrh	r2, [r7, #12]
    ba88:	8a3b      	ldrh	r3, [r7, #16]
    ba8a:	429a      	cmp	r2, r3
    ba8c:	d901      	bls.n	ba92 <_usb_d_dev_out_next+0xda>
    ba8e:	8a3b      	ldrh	r3, [r7, #16]
    ba90:	e000      	b.n	ba94 <_usb_d_dev_out_next+0xdc>
    ba92:	89bb      	ldrh	r3, [r7, #12]
    ba94:	461a      	mov	r2, r3
    ba96:	4b67      	ldr	r3, [pc, #412]	; (bc34 <_usb_d_dev_out_next+0x27c>)
    ba98:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    ba9a:	687b      	ldr	r3, [r7, #4]
    ba9c:	685b      	ldr	r3, [r3, #4]
    ba9e:	2b00      	cmp	r3, #0
    baa0:	d121      	bne.n	bae6 <_usb_d_dev_out_next+0x12e>
    baa2:	687b      	ldr	r3, [r7, #4]
    baa4:	7cdb      	ldrb	r3, [r3, #19]
    baa6:	f003 0310 	and.w	r3, r3, #16
    baaa:	b2db      	uxtb	r3, r3
    baac:	2b00      	cmp	r3, #0
    baae:	d01a      	beq.n	bae6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    bab0:	687a      	ldr	r2, [r7, #4]
    bab2:	7cd3      	ldrb	r3, [r2, #19]
    bab4:	f36f 1304 	bfc	r3, #4, #1
    bab8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    baba:	687a      	ldr	r2, [r7, #4]
    babc:	7cd3      	ldrb	r3, [r2, #19]
    babe:	f043 0320 	orr.w	r3, r3, #32
    bac2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bac4:	687b      	ldr	r3, [r7, #4]
    bac6:	68db      	ldr	r3, [r3, #12]
    bac8:	461a      	mov	r2, r3
    baca:	7ffb      	ldrb	r3, [r7, #31]
    bacc:	2100      	movs	r1, #0
    bace:	4618      	mov	r0, r3
    bad0:	4b59      	ldr	r3, [pc, #356]	; (bc38 <_usb_d_dev_out_next+0x280>)
    bad2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    bad4:	687b      	ldr	r3, [r7, #4]
    bad6:	8a1b      	ldrh	r3, [r3, #16]
    bad8:	461a      	mov	r2, r3
    bada:	7ff8      	ldrb	r0, [r7, #31]
    badc:	2300      	movs	r3, #0
    bade:	2100      	movs	r1, #0
    bae0:	4c56      	ldr	r4, [pc, #344]	; (bc3c <_usb_d_dev_out_next+0x284>)
    bae2:	47a0      	blx	r4
		goto _out_rx_exec;
    bae4:	e090      	b.n	bc08 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    bae6:	78fb      	ldrb	r3, [r7, #3]
    bae8:	2b00      	cmp	r3, #0
    baea:	d010      	beq.n	bb0e <_usb_d_dev_out_next+0x156>
    baec:	687b      	ldr	r3, [r7, #4]
    baee:	8a1b      	ldrh	r3, [r3, #16]
    baf0:	8a3a      	ldrh	r2, [r7, #16]
    baf2:	429a      	cmp	r2, r3
    baf4:	d20b      	bcs.n	bb0e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    baf6:	687a      	ldr	r2, [r7, #4]
    baf8:	7cd3      	ldrb	r3, [r2, #19]
    bafa:	f36f 1304 	bfc	r3, #4, #1
    bafe:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    bb00:	687b      	ldr	r3, [r7, #4]
    bb02:	689a      	ldr	r2, [r3, #8]
    bb04:	8abb      	ldrh	r3, [r7, #20]
    bb06:	441a      	add	r2, r3
    bb08:	687b      	ldr	r3, [r7, #4]
    bb0a:	609a      	str	r2, [r3, #8]
    bb0c:	e05c      	b.n	bbc8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    bb0e:	687b      	ldr	r3, [r7, #4]
    bb10:	689a      	ldr	r2, [r3, #8]
    bb12:	8afb      	ldrh	r3, [r7, #22]
    bb14:	441a      	add	r2, r3
    bb16:	687b      	ldr	r3, [r7, #4]
    bb18:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    bb1a:	687b      	ldr	r3, [r7, #4]
    bb1c:	689a      	ldr	r2, [r3, #8]
    bb1e:	687b      	ldr	r3, [r7, #4]
    bb20:	685b      	ldr	r3, [r3, #4]
    bb22:	429a      	cmp	r2, r3
    bb24:	d250      	bcs.n	bbc8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    bb26:	687b      	ldr	r3, [r7, #4]
    bb28:	685b      	ldr	r3, [r3, #4]
    bb2a:	b29a      	uxth	r2, r3
    bb2c:	687b      	ldr	r3, [r7, #4]
    bb2e:	689b      	ldr	r3, [r3, #8]
    bb30:	b29b      	uxth	r3, r3
    bb32:	1ad3      	subs	r3, r2, r3
    bb34:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    bb36:	687b      	ldr	r3, [r7, #4]
    bb38:	7cdb      	ldrb	r3, [r3, #19]
    bb3a:	f003 0320 	and.w	r3, r3, #32
    bb3e:	b2db      	uxtb	r3, r3
    bb40:	2b00      	cmp	r3, #0
    bb42:	d010      	beq.n	bb66 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    bb44:	687b      	ldr	r3, [r7, #4]
    bb46:	8a1b      	ldrh	r3, [r3, #16]
    bb48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bb4a:	429a      	cmp	r2, r3
    bb4c:	d902      	bls.n	bb54 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    bb4e:	687b      	ldr	r3, [r7, #4]
    bb50:	8a1b      	ldrh	r3, [r3, #16]
    bb52:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bb54:	687b      	ldr	r3, [r7, #4]
    bb56:	68db      	ldr	r3, [r3, #12]
    bb58:	461a      	mov	r2, r3
    bb5a:	7ffb      	ldrb	r3, [r7, #31]
    bb5c:	2100      	movs	r1, #0
    bb5e:	4618      	mov	r0, r3
    bb60:	4b35      	ldr	r3, [pc, #212]	; (bc38 <_usb_d_dev_out_next+0x280>)
    bb62:	4798      	blx	r3
    bb64:	e029      	b.n	bbba <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    bb66:	687b      	ldr	r3, [r7, #4]
    bb68:	8a1b      	ldrh	r3, [r3, #16]
    bb6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bb6c:	429a      	cmp	r2, r3
    bb6e:	d90f      	bls.n	bb90 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    bb70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    bb72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    bb76:	d903      	bls.n	bb80 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    bb78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bb7c:	84fb      	strh	r3, [r7, #38]	; 0x26
    bb7e:	e011      	b.n	bba4 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    bb80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bb82:	8a7b      	ldrh	r3, [r7, #18]
    bb84:	4013      	ands	r3, r2
    bb86:	b29b      	uxth	r3, r3
    bb88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bb8a:	1ad3      	subs	r3, r2, r3
    bb8c:	84fb      	strh	r3, [r7, #38]	; 0x26
    bb8e:	e009      	b.n	bba4 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    bb90:	687b      	ldr	r3, [r7, #4]
    bb92:	8a1b      	ldrh	r3, [r3, #16]
    bb94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bb96:	429a      	cmp	r2, r3
    bb98:	d204      	bcs.n	bba4 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    bb9a:	687a      	ldr	r2, [r7, #4]
    bb9c:	7cd3      	ldrb	r3, [r2, #19]
    bb9e:	f043 0320 	orr.w	r3, r3, #32
    bba2:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    bba4:	687b      	ldr	r3, [r7, #4]
    bba6:	681a      	ldr	r2, [r3, #0]
    bba8:	687b      	ldr	r3, [r7, #4]
    bbaa:	689b      	ldr	r3, [r3, #8]
    bbac:	4413      	add	r3, r2
    bbae:	461a      	mov	r2, r3
    bbb0:	7ffb      	ldrb	r3, [r7, #31]
    bbb2:	2100      	movs	r1, #0
    bbb4:	4618      	mov	r0, r3
    bbb6:	4b20      	ldr	r3, [pc, #128]	; (bc38 <_usb_d_dev_out_next+0x280>)
    bbb8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    bbba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bbbc:	7ff8      	ldrb	r0, [r7, #31]
    bbbe:	2300      	movs	r3, #0
    bbc0:	2100      	movs	r1, #0
    bbc2:	4c1e      	ldr	r4, [pc, #120]	; (bc3c <_usb_d_dev_out_next+0x284>)
    bbc4:	47a0      	blx	r4
			goto _out_rx_exec;
    bbc6:	e01f      	b.n	bc08 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    bbc8:	7bfb      	ldrb	r3, [r7, #15]
    bbca:	2b00      	cmp	r3, #0
    bbcc:	d006      	beq.n	bbdc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    bbce:	7ffb      	ldrb	r3, [r7, #31]
    bbd0:	222d      	movs	r2, #45	; 0x2d
    bbd2:	4619      	mov	r1, r3
    bbd4:	6a38      	ldr	r0, [r7, #32]
    bbd6:	4b1a      	ldr	r3, [pc, #104]	; (bc40 <_usb_d_dev_out_next+0x288>)
    bbd8:	4798      	blx	r3
    bbda:	e005      	b.n	bbe8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    bbdc:	7ffb      	ldrb	r3, [r7, #31]
    bbde:	2225      	movs	r2, #37	; 0x25
    bbe0:	4619      	mov	r1, r3
    bbe2:	6a38      	ldr	r0, [r7, #32]
    bbe4:	4b16      	ldr	r3, [pc, #88]	; (bc40 <_usb_d_dev_out_next+0x288>)
    bbe6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    bbe8:	7ffb      	ldrb	r3, [r7, #31]
    bbea:	2b00      	cmp	r3, #0
    bbec:	d107      	bne.n	bbfe <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bbee:	687b      	ldr	r3, [r7, #4]
    bbf0:	68db      	ldr	r3, [r3, #12]
    bbf2:	461a      	mov	r2, r3
    bbf4:	7ffb      	ldrb	r3, [r7, #31]
    bbf6:	2100      	movs	r1, #0
    bbf8:	4618      	mov	r0, r3
    bbfa:	4b0f      	ldr	r3, [pc, #60]	; (bc38 <_usb_d_dev_out_next+0x280>)
    bbfc:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    bbfe:	2100      	movs	r1, #0
    bc00:	6878      	ldr	r0, [r7, #4]
    bc02:	4b10      	ldr	r3, [pc, #64]	; (bc44 <_usb_d_dev_out_next+0x28c>)
    bc04:	4798      	blx	r3
	return;
    bc06:	e031      	b.n	bc6c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    bc08:	78fb      	ldrb	r3, [r7, #3]
    bc0a:	f083 0301 	eor.w	r3, r3, #1
    bc0e:	b2db      	uxtb	r3, r3
    bc10:	2b00      	cmp	r3, #0
    bc12:	d025      	beq.n	bc60 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    bc14:	7bfb      	ldrb	r3, [r7, #15]
    bc16:	2b00      	cmp	r3, #0
    bc18:	d018      	beq.n	bc4c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    bc1a:	7ffb      	ldrb	r3, [r7, #31]
    bc1c:	2101      	movs	r1, #1
    bc1e:	4618      	mov	r0, r3
    bc20:	4b09      	ldr	r3, [pc, #36]	; (bc48 <_usb_d_dev_out_next+0x290>)
    bc22:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    bc24:	232d      	movs	r3, #45	; 0x2d
    bc26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    bc2a:	e012      	b.n	bc52 <_usb_d_dev_out_next+0x29a>
    bc2c:	20002168 	.word	0x20002168
    bc30:	0000b199 	.word	0x0000b199
    bc34:	0000f9f1 	.word	0x0000f9f1
    bc38:	0000b1c5 	.word	0x0000b1c5
    bc3c:	0000b34d 	.word	0x0000b34d
    bc40:	0000aaa5 	.word	0x0000aaa5
    bc44:	0000cac9 	.word	0x0000cac9
    bc48:	0000b38d 	.word	0x0000b38d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    bc4c:	2325      	movs	r3, #37	; 0x25
    bc4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    bc52:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    bc56:	7ffb      	ldrb	r3, [r7, #31]
    bc58:	4619      	mov	r1, r3
    bc5a:	6a38      	ldr	r0, [r7, #32]
    bc5c:	4b05      	ldr	r3, [pc, #20]	; (bc74 <_usb_d_dev_out_next+0x2bc>)
    bc5e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    bc60:	7ffb      	ldrb	r3, [r7, #31]
    bc62:	2201      	movs	r2, #1
    bc64:	2100      	movs	r1, #0
    bc66:	4618      	mov	r0, r3
    bc68:	4b03      	ldr	r3, [pc, #12]	; (bc78 <_usb_d_dev_out_next+0x2c0>)
    bc6a:	4798      	blx	r3
}
    bc6c:	372c      	adds	r7, #44	; 0x2c
    bc6e:	46bd      	mov	sp, r7
    bc70:	bd90      	pop	{r4, r7, pc}
    bc72:	bf00      	nop
    bc74:	0000aa79 	.word	0x0000aa79
    bc78:	0000b41d 	.word	0x0000b41d

0000bc7c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    bc7c:	b580      	push	{r7, lr}
    bc7e:	b084      	sub	sp, #16
    bc80:	af00      	add	r7, sp, #0
    bc82:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    bc84:	687b      	ldr	r3, [r7, #4]
    bc86:	7c9b      	ldrb	r3, [r3, #18]
    bc88:	f003 030f 	and.w	r3, r3, #15
    bc8c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bc8e:	687b      	ldr	r3, [r7, #4]
    bc90:	7cdb      	ldrb	r3, [r3, #19]
    bc92:	f003 0307 	and.w	r3, r3, #7
    bc96:	b2db      	uxtb	r3, r3
    bc98:	2b01      	cmp	r3, #1
    bc9a:	bf0c      	ite	eq
    bc9c:	2301      	moveq	r3, #1
    bc9e:	2300      	movne	r3, #0
    bca0:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    bca2:	7bbb      	ldrb	r3, [r7, #14]
    bca4:	f083 0301 	eor.w	r3, r3, #1
    bca8:	b2db      	uxtb	r3, r3
    bcaa:	2b00      	cmp	r3, #0
    bcac:	d008      	beq.n	bcc0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    bcae:	7bfb      	ldrb	r3, [r7, #15]
    bcb0:	4618      	mov	r0, r3
    bcb2:	4b20      	ldr	r3, [pc, #128]	; (bd34 <_usb_d_dev_handle_setup+0xb8>)
    bcb4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    bcb6:	7bfb      	ldrb	r3, [r7, #15]
    bcb8:	4618      	mov	r0, r3
    bcba:	4b1f      	ldr	r3, [pc, #124]	; (bd38 <_usb_d_dev_handle_setup+0xbc>)
    bcbc:	4798      	blx	r3
		return;
    bcbe:	e036      	b.n	bd2e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    bcc0:	687b      	ldr	r3, [r7, #4]
    bcc2:	7cdb      	ldrb	r3, [r3, #19]
    bcc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bcc8:	b2db      	uxtb	r3, r3
    bcca:	2b00      	cmp	r3, #0
    bccc:	d010      	beq.n	bcf0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    bcce:	687a      	ldr	r2, [r7, #4]
    bcd0:	7cd3      	ldrb	r3, [r2, #19]
    bcd2:	f36f 1386 	bfc	r3, #6, #1
    bcd6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    bcd8:	7bfb      	ldrb	r3, [r7, #15]
    bcda:	2200      	movs	r2, #0
    bcdc:	2101      	movs	r1, #1
    bcde:	4618      	mov	r0, r3
    bce0:	4b16      	ldr	r3, [pc, #88]	; (bd3c <_usb_d_dev_handle_setup+0xc0>)
    bce2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    bce4:	7bfb      	ldrb	r3, [r7, #15]
    bce6:	2200      	movs	r2, #0
    bce8:	2100      	movs	r1, #0
    bcea:	4618      	mov	r0, r3
    bcec:	4b14      	ldr	r3, [pc, #80]	; (bd40 <_usb_d_dev_handle_setup+0xc4>)
    bcee:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    bcf0:	687a      	ldr	r2, [r7, #4]
    bcf2:	7cd3      	ldrb	r3, [r2, #19]
    bcf4:	f36f 03c3 	bfc	r3, #3, #1
    bcf8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    bcfa:	7bfb      	ldrb	r3, [r7, #15]
    bcfc:	2100      	movs	r1, #0
    bcfe:	4618      	mov	r0, r3
    bd00:	4b10      	ldr	r3, [pc, #64]	; (bd44 <_usb_d_dev_handle_setup+0xc8>)
    bd02:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    bd04:	7bfb      	ldrb	r3, [r7, #15]
    bd06:	2101      	movs	r1, #1
    bd08:	4618      	mov	r0, r3
    bd0a:	4b0e      	ldr	r3, [pc, #56]	; (bd44 <_usb_d_dev_handle_setup+0xc8>)
    bd0c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    bd0e:	7bfb      	ldrb	r3, [r7, #15]
    bd10:	216f      	movs	r1, #111	; 0x6f
    bd12:	4618      	mov	r0, r3
    bd14:	4b0c      	ldr	r3, [pc, #48]	; (bd48 <_usb_d_dev_handle_setup+0xcc>)
    bd16:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    bd18:	7bfb      	ldrb	r3, [r7, #15]
    bd1a:	216f      	movs	r1, #111	; 0x6f
    bd1c:	4618      	mov	r0, r3
    bd1e:	4b0b      	ldr	r3, [pc, #44]	; (bd4c <_usb_d_dev_handle_setup+0xd0>)
    bd20:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    bd22:	4b0b      	ldr	r3, [pc, #44]	; (bd50 <_usb_d_dev_handle_setup+0xd4>)
    bd24:	689b      	ldr	r3, [r3, #8]
    bd26:	687a      	ldr	r2, [r7, #4]
    bd28:	7c92      	ldrb	r2, [r2, #18]
    bd2a:	4610      	mov	r0, r2
    bd2c:	4798      	blx	r3
}
    bd2e:	3710      	adds	r7, #16
    bd30:	46bd      	mov	sp, r7
    bd32:	bd80      	pop	{r7, pc}
    bd34:	0000b121 	.word	0x0000b121
    bd38:	0000b0cd 	.word	0x0000b0cd
    bd3c:	0000b3c5 	.word	0x0000b3c5
    bd40:	0000b41d 	.word	0x0000b41d
    bd44:	0000b38d 	.word	0x0000b38d
    bd48:	0000aecd 	.word	0x0000aecd
    bd4c:	0000af1d 	.word	0x0000af1d
    bd50:	200020a0 	.word	0x200020a0

0000bd54 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    bd54:	b580      	push	{r7, lr}
    bd56:	b084      	sub	sp, #16
    bd58:	af00      	add	r7, sp, #0
    bd5a:	6078      	str	r0, [r7, #4]
    bd5c:	460b      	mov	r3, r1
    bd5e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bd60:	687b      	ldr	r3, [r7, #4]
    bd62:	7c9b      	ldrb	r3, [r3, #18]
    bd64:	f003 030f 	and.w	r3, r3, #15
    bd68:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    bd6a:	78f9      	ldrb	r1, [r7, #3]
    bd6c:	7bfb      	ldrb	r3, [r7, #15]
    bd6e:	2200      	movs	r2, #0
    bd70:	4618      	mov	r0, r3
    bd72:	4b07      	ldr	r3, [pc, #28]	; (bd90 <_usb_d_dev_handle_stall+0x3c>)
    bd74:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    bd76:	4b07      	ldr	r3, [pc, #28]	; (bd94 <_usb_d_dev_handle_stall+0x40>)
    bd78:	691b      	ldr	r3, [r3, #16]
    bd7a:	687a      	ldr	r2, [r7, #4]
    bd7c:	7c90      	ldrb	r0, [r2, #18]
    bd7e:	687a      	ldr	r2, [r7, #4]
    bd80:	6892      	ldr	r2, [r2, #8]
    bd82:	2101      	movs	r1, #1
    bd84:	4798      	blx	r3
}
    bd86:	bf00      	nop
    bd88:	3710      	adds	r7, #16
    bd8a:	46bd      	mov	sp, r7
    bd8c:	bd80      	pop	{r7, pc}
    bd8e:	bf00      	nop
    bd90:	0000b081 	.word	0x0000b081
    bd94:	200020a0 	.word	0x200020a0

0000bd98 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    bd98:	b580      	push	{r7, lr}
    bd9a:	b088      	sub	sp, #32
    bd9c:	af00      	add	r7, sp, #0
    bd9e:	6078      	str	r0, [r7, #4]
    bda0:	460b      	mov	r3, r1
    bda2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    bda4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bda8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    bdaa:	687b      	ldr	r3, [r7, #4]
    bdac:	7c9b      	ldrb	r3, [r3, #18]
    bdae:	f003 030f 	and.w	r3, r3, #15
    bdb2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    bdb4:	4b61      	ldr	r3, [pc, #388]	; (bf3c <_usb_d_dev_handle_trfail+0x1a4>)
    bdb6:	881b      	ldrh	r3, [r3, #0]
    bdb8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    bdba:	7efb      	ldrb	r3, [r7, #27]
    bdbc:	015b      	lsls	r3, r3, #5
    bdbe:	4a60      	ldr	r2, [pc, #384]	; (bf40 <_usb_d_dev_handle_trfail+0x1a8>)
    bdc0:	4413      	add	r3, r2
    bdc2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    bdc4:	78fb      	ldrb	r3, [r7, #3]
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	d006      	beq.n	bdd8 <_usb_d_dev_handle_trfail+0x40>
    bdca:	7efb      	ldrb	r3, [r7, #27]
    bdcc:	4619      	mov	r1, r3
    bdce:	69f8      	ldr	r0, [r7, #28]
    bdd0:	4b5c      	ldr	r3, [pc, #368]	; (bf44 <_usb_d_dev_handle_trfail+0x1ac>)
    bdd2:	4798      	blx	r3
    bdd4:	4603      	mov	r3, r0
    bdd6:	e005      	b.n	bde4 <_usb_d_dev_handle_trfail+0x4c>
    bdd8:	7efb      	ldrb	r3, [r7, #27]
    bdda:	4619      	mov	r1, r3
    bddc:	69f8      	ldr	r0, [r7, #28]
    bdde:	4b5a      	ldr	r3, [pc, #360]	; (bf48 <_usb_d_dev_handle_trfail+0x1b0>)
    bde0:	4798      	blx	r3
    bde2:	4603      	mov	r3, r0
    bde4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bde6:	687b      	ldr	r3, [r7, #4]
    bde8:	7cdb      	ldrb	r3, [r3, #19]
    bdea:	f003 0307 	and.w	r3, r3, #7
    bdee:	b2db      	uxtb	r3, r3
    bdf0:	2b01      	cmp	r3, #1
    bdf2:	bf0c      	ite	eq
    bdf4:	2301      	moveq	r3, #1
    bdf6:	2300      	movne	r3, #0
    bdf8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    bdfa:	78fb      	ldrb	r3, [r7, #3]
    bdfc:	011b      	lsls	r3, r3, #4
    bdfe:	697a      	ldr	r2, [r7, #20]
    be00:	4413      	add	r3, r2
    be02:	7a9b      	ldrb	r3, [r3, #10]
    be04:	b2db      	uxtb	r3, r3
    be06:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    be08:	7cfb      	ldrb	r3, [r7, #19]
    be0a:	2b02      	cmp	r3, #2
    be0c:	d12f      	bne.n	be6e <_usb_d_dev_handle_trfail+0xd6>
    be0e:	7b3b      	ldrb	r3, [r7, #12]
    be10:	f003 0301 	and.w	r3, r3, #1
    be14:	b2db      	uxtb	r3, r3
    be16:	2b00      	cmp	r3, #0
    be18:	d029      	beq.n	be6e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    be1a:	78fb      	ldrb	r3, [r7, #3]
    be1c:	011b      	lsls	r3, r3, #4
    be1e:	697a      	ldr	r2, [r7, #20]
    be20:	441a      	add	r2, r3
    be22:	7a93      	ldrb	r3, [r2, #10]
    be24:	f36f 0300 	bfc	r3, #0, #1
    be28:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    be2a:	78fb      	ldrb	r3, [r7, #3]
    be2c:	f107 0220 	add.w	r2, r7, #32
    be30:	4413      	add	r3, r2
    be32:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    be36:	7efb      	ldrb	r3, [r7, #27]
    be38:	4619      	mov	r1, r3
    be3a:	69f8      	ldr	r0, [r7, #28]
    be3c:	4b43      	ldr	r3, [pc, #268]	; (bf4c <_usb_d_dev_handle_trfail+0x1b4>)
    be3e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    be40:	78fb      	ldrb	r3, [r7, #3]
    be42:	f107 0220 	add.w	r2, r7, #32
    be46:	4413      	add	r3, r2
    be48:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    be4c:	7efb      	ldrb	r3, [r7, #27]
    be4e:	4619      	mov	r1, r3
    be50:	69f8      	ldr	r0, [r7, #28]
    be52:	4b3f      	ldr	r3, [pc, #252]	; (bf50 <_usb_d_dev_handle_trfail+0x1b8>)
    be54:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    be56:	78fb      	ldrb	r3, [r7, #3]
    be58:	2b00      	cmp	r3, #0
    be5a:	bf14      	ite	ne
    be5c:	2301      	movne	r3, #1
    be5e:	2300      	moveq	r3, #0
    be60:	b2db      	uxtb	r3, r3
    be62:	2204      	movs	r2, #4
    be64:	4619      	mov	r1, r3
    be66:	6878      	ldr	r0, [r7, #4]
    be68:	4b3a      	ldr	r3, [pc, #232]	; (bf54 <_usb_d_dev_handle_trfail+0x1bc>)
    be6a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    be6c:	e062      	b.n	bf34 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    be6e:	7b3b      	ldrb	r3, [r7, #12]
    be70:	f003 0302 	and.w	r3, r3, #2
    be74:	b2db      	uxtb	r3, r3
    be76:	2b00      	cmp	r3, #0
    be78:	d040      	beq.n	befc <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    be7a:	78fb      	ldrb	r3, [r7, #3]
    be7c:	011b      	lsls	r3, r3, #4
    be7e:	697a      	ldr	r2, [r7, #20]
    be80:	441a      	add	r2, r3
    be82:	7a93      	ldrb	r3, [r2, #10]
    be84:	f36f 0341 	bfc	r3, #1, #1
    be88:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    be8a:	78fb      	ldrb	r3, [r7, #3]
    be8c:	f107 0220 	add.w	r2, r7, #32
    be90:	4413      	add	r3, r2
    be92:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    be96:	7efb      	ldrb	r3, [r7, #27]
    be98:	4619      	mov	r1, r3
    be9a:	69f8      	ldr	r0, [r7, #28]
    be9c:	4b2b      	ldr	r3, [pc, #172]	; (bf4c <_usb_d_dev_handle_trfail+0x1b4>)
    be9e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    bea0:	78fb      	ldrb	r3, [r7, #3]
    bea2:	f107 0220 	add.w	r2, r7, #32
    bea6:	4413      	add	r3, r2
    bea8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    beac:	7efb      	ldrb	r3, [r7, #27]
    beae:	4619      	mov	r1, r3
    beb0:	69f8      	ldr	r0, [r7, #28]
    beb2:	4b27      	ldr	r3, [pc, #156]	; (bf50 <_usb_d_dev_handle_trfail+0x1b8>)
    beb4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    beb6:	7cbb      	ldrb	r3, [r7, #18]
    beb8:	2b00      	cmp	r3, #0
    beba:	d03b      	beq.n	bf34 <_usb_d_dev_handle_trfail+0x19c>
    bebc:	687b      	ldr	r3, [r7, #4]
    bebe:	7cdb      	ldrb	r3, [r3, #19]
    bec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bec4:	b2db      	uxtb	r3, r3
    bec6:	2b00      	cmp	r3, #0
    bec8:	d034      	beq.n	bf34 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    beca:	687b      	ldr	r3, [r7, #4]
    becc:	7cdb      	ldrb	r3, [r3, #19]
    bece:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    bed2:	b2db      	uxtb	r3, r3
    bed4:	461a      	mov	r2, r3
    bed6:	78fb      	ldrb	r3, [r7, #3]
    bed8:	4293      	cmp	r3, r2
    beda:	d02b      	beq.n	bf34 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    bedc:	687b      	ldr	r3, [r7, #4]
    bede:	7cdb      	ldrb	r3, [r3, #19]
    bee0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    bee4:	b2db      	uxtb	r3, r3
    bee6:	2b00      	cmp	r3, #0
    bee8:	bf14      	ite	ne
    beea:	2301      	movne	r3, #1
    beec:	2300      	moveq	r3, #0
    beee:	b2db      	uxtb	r3, r3
    bef0:	2200      	movs	r2, #0
    bef2:	4619      	mov	r1, r3
    bef4:	6878      	ldr	r0, [r7, #4]
    bef6:	4b17      	ldr	r3, [pc, #92]	; (bf54 <_usb_d_dev_handle_trfail+0x1bc>)
    bef8:	4798      	blx	r3
}
    befa:	e01b      	b.n	bf34 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    befc:	78fa      	ldrb	r2, [r7, #3]
    befe:	7efb      	ldrb	r3, [r7, #27]
    bf00:	4611      	mov	r1, r2
    bf02:	4618      	mov	r0, r3
    bf04:	4b14      	ldr	r3, [pc, #80]	; (bf58 <_usb_d_dev_handle_trfail+0x1c0>)
    bf06:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    bf08:	78fb      	ldrb	r3, [r7, #3]
    bf0a:	f107 0220 	add.w	r2, r7, #32
    bf0e:	4413      	add	r3, r2
    bf10:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    bf14:	7efb      	ldrb	r3, [r7, #27]
    bf16:	4619      	mov	r1, r3
    bf18:	69f8      	ldr	r0, [r7, #28]
    bf1a:	4b0c      	ldr	r3, [pc, #48]	; (bf4c <_usb_d_dev_handle_trfail+0x1b4>)
    bf1c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    bf1e:	78fb      	ldrb	r3, [r7, #3]
    bf20:	f107 0220 	add.w	r2, r7, #32
    bf24:	4413      	add	r3, r2
    bf26:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    bf2a:	7efb      	ldrb	r3, [r7, #27]
    bf2c:	4619      	mov	r1, r3
    bf2e:	69f8      	ldr	r0, [r7, #28]
    bf30:	4b07      	ldr	r3, [pc, #28]	; (bf50 <_usb_d_dev_handle_trfail+0x1b8>)
    bf32:	4798      	blx	r3
}
    bf34:	bf00      	nop
    bf36:	3720      	adds	r7, #32
    bf38:	46bd      	mov	sp, r7
    bf3a:	bd80      	pop	{r7, pc}
    bf3c:	00010374 	.word	0x00010374
    bf40:	20002168 	.word	0x20002168
    bf44:	0000ab01 	.word	0x0000ab01
    bf48:	0000aad1 	.word	0x0000aad1
    bf4c:	0000a9a5 	.word	0x0000a9a5
    bf50:	0000aaa5 	.word	0x0000aaa5
    bf54:	0000cb11 	.word	0x0000cb11
    bf58:	0000b38d 	.word	0x0000b38d

0000bf5c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    bf5c:	b580      	push	{r7, lr}
    bf5e:	b082      	sub	sp, #8
    bf60:	af00      	add	r7, sp, #0
    bf62:	6078      	str	r0, [r7, #4]
    bf64:	460b      	mov	r3, r1
    bf66:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bf68:	78fb      	ldrb	r3, [r7, #3]
    bf6a:	f003 0310 	and.w	r3, r3, #16
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d003      	beq.n	bf7a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    bf72:	6878      	ldr	r0, [r7, #4]
    bf74:	4b0c      	ldr	r3, [pc, #48]	; (bfa8 <_usb_d_dev_trans_setup_isr+0x4c>)
    bf76:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    bf78:	e012      	b.n	bfa0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    bf7a:	78fb      	ldrb	r3, [r7, #3]
    bf7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bf80:	2b00      	cmp	r3, #0
    bf82:	d004      	beq.n	bf8e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    bf84:	2101      	movs	r1, #1
    bf86:	6878      	ldr	r0, [r7, #4]
    bf88:	4b08      	ldr	r3, [pc, #32]	; (bfac <_usb_d_dev_trans_setup_isr+0x50>)
    bf8a:	4798      	blx	r3
}
    bf8c:	e008      	b.n	bfa0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    bf8e:	78fb      	ldrb	r3, [r7, #3]
    bf90:	f003 0320 	and.w	r3, r3, #32
    bf94:	2b00      	cmp	r3, #0
    bf96:	d003      	beq.n	bfa0 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    bf98:	2100      	movs	r1, #0
    bf9a:	6878      	ldr	r0, [r7, #4]
    bf9c:	4b03      	ldr	r3, [pc, #12]	; (bfac <_usb_d_dev_trans_setup_isr+0x50>)
    bf9e:	4798      	blx	r3
}
    bfa0:	bf00      	nop
    bfa2:	3708      	adds	r7, #8
    bfa4:	46bd      	mov	sp, r7
    bfa6:	bd80      	pop	{r7, pc}
    bfa8:	0000bc7d 	.word	0x0000bc7d
    bfac:	0000bd55 	.word	0x0000bd55

0000bfb0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    bfb0:	b580      	push	{r7, lr}
    bfb2:	b082      	sub	sp, #8
    bfb4:	af00      	add	r7, sp, #0
    bfb6:	6078      	str	r0, [r7, #4]
    bfb8:	460b      	mov	r3, r1
    bfba:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    bfbc:	78fb      	ldrb	r3, [r7, #3]
    bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d004      	beq.n	bfd0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    bfc6:	2101      	movs	r1, #1
    bfc8:	6878      	ldr	r0, [r7, #4]
    bfca:	4b1a      	ldr	r3, [pc, #104]	; (c034 <_usb_d_dev_trans_in_isr+0x84>)
    bfcc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    bfce:	e02c      	b.n	c02a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    bfd0:	78fb      	ldrb	r3, [r7, #3]
    bfd2:	f003 0308 	and.w	r3, r3, #8
    bfd6:	2b00      	cmp	r3, #0
    bfd8:	d004      	beq.n	bfe4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    bfda:	2101      	movs	r1, #1
    bfdc:	6878      	ldr	r0, [r7, #4]
    bfde:	4b16      	ldr	r3, [pc, #88]	; (c038 <_usb_d_dev_trans_in_isr+0x88>)
    bfe0:	4798      	blx	r3
}
    bfe2:	e022      	b.n	c02a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    bfe4:	78fb      	ldrb	r3, [r7, #3]
    bfe6:	f003 0302 	and.w	r3, r3, #2
    bfea:	2b00      	cmp	r3, #0
    bfec:	d004      	beq.n	bff8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    bfee:	2101      	movs	r1, #1
    bff0:	6878      	ldr	r0, [r7, #4]
    bff2:	4b12      	ldr	r3, [pc, #72]	; (c03c <_usb_d_dev_trans_in_isr+0x8c>)
    bff4:	4798      	blx	r3
}
    bff6:	e018      	b.n	c02a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    bff8:	687b      	ldr	r3, [r7, #4]
    bffa:	7cdb      	ldrb	r3, [r3, #19]
    bffc:	f003 0307 	and.w	r3, r3, #7
    c000:	b2db      	uxtb	r3, r3
    c002:	2b01      	cmp	r3, #1
    c004:	d111      	bne.n	c02a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c006:	78fb      	ldrb	r3, [r7, #3]
    c008:	f003 0304 	and.w	r3, r3, #4
    c00c:	2b00      	cmp	r3, #0
    c00e:	d004      	beq.n	c01a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    c010:	2100      	movs	r1, #0
    c012:	6878      	ldr	r0, [r7, #4]
    c014:	4b08      	ldr	r3, [pc, #32]	; (c038 <_usb_d_dev_trans_in_isr+0x88>)
    c016:	4798      	blx	r3
}
    c018:	e007      	b.n	c02a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c01a:	78fb      	ldrb	r3, [r7, #3]
    c01c:	f003 0310 	and.w	r3, r3, #16
    c020:	2b00      	cmp	r3, #0
    c022:	d002      	beq.n	c02a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    c024:	6878      	ldr	r0, [r7, #4]
    c026:	4b06      	ldr	r3, [pc, #24]	; (c040 <_usb_d_dev_trans_in_isr+0x90>)
    c028:	4798      	blx	r3
}
    c02a:	bf00      	nop
    c02c:	3708      	adds	r7, #8
    c02e:	46bd      	mov	sp, r7
    c030:	bd80      	pop	{r7, pc}
    c032:	bf00      	nop
    c034:	0000bd55 	.word	0x0000bd55
    c038:	0000bd99 	.word	0x0000bd99
    c03c:	0000b7a1 	.word	0x0000b7a1
    c040:	0000bc7d 	.word	0x0000bc7d

0000c044 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c044:	b580      	push	{r7, lr}
    c046:	b082      	sub	sp, #8
    c048:	af00      	add	r7, sp, #0
    c04a:	6078      	str	r0, [r7, #4]
    c04c:	460b      	mov	r3, r1
    c04e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c050:	78fb      	ldrb	r3, [r7, #3]
    c052:	f003 0320 	and.w	r3, r3, #32
    c056:	2b00      	cmp	r3, #0
    c058:	d004      	beq.n	c064 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    c05a:	2100      	movs	r1, #0
    c05c:	6878      	ldr	r0, [r7, #4]
    c05e:	4b1a      	ldr	r3, [pc, #104]	; (c0c8 <_usb_d_dev_trans_out_isr+0x84>)
    c060:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    c062:	e02c      	b.n	c0be <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c064:	78fb      	ldrb	r3, [r7, #3]
    c066:	f003 0304 	and.w	r3, r3, #4
    c06a:	2b00      	cmp	r3, #0
    c06c:	d004      	beq.n	c078 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    c06e:	2100      	movs	r1, #0
    c070:	6878      	ldr	r0, [r7, #4]
    c072:	4b16      	ldr	r3, [pc, #88]	; (c0cc <_usb_d_dev_trans_out_isr+0x88>)
    c074:	4798      	blx	r3
}
    c076:	e022      	b.n	c0be <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    c078:	78fb      	ldrb	r3, [r7, #3]
    c07a:	f003 0301 	and.w	r3, r3, #1
    c07e:	2b00      	cmp	r3, #0
    c080:	d004      	beq.n	c08c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    c082:	2101      	movs	r1, #1
    c084:	6878      	ldr	r0, [r7, #4]
    c086:	4b12      	ldr	r3, [pc, #72]	; (c0d0 <_usb_d_dev_trans_out_isr+0x8c>)
    c088:	4798      	blx	r3
}
    c08a:	e018      	b.n	c0be <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c08c:	687b      	ldr	r3, [r7, #4]
    c08e:	7cdb      	ldrb	r3, [r3, #19]
    c090:	f003 0307 	and.w	r3, r3, #7
    c094:	b2db      	uxtb	r3, r3
    c096:	2b01      	cmp	r3, #1
    c098:	d111      	bne.n	c0be <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c09a:	78fb      	ldrb	r3, [r7, #3]
    c09c:	f003 0308 	and.w	r3, r3, #8
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	d004      	beq.n	c0ae <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    c0a4:	2101      	movs	r1, #1
    c0a6:	6878      	ldr	r0, [r7, #4]
    c0a8:	4b08      	ldr	r3, [pc, #32]	; (c0cc <_usb_d_dev_trans_out_isr+0x88>)
    c0aa:	4798      	blx	r3
}
    c0ac:	e007      	b.n	c0be <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c0ae:	78fb      	ldrb	r3, [r7, #3]
    c0b0:	f003 0310 	and.w	r3, r3, #16
    c0b4:	2b00      	cmp	r3, #0
    c0b6:	d002      	beq.n	c0be <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    c0b8:	6878      	ldr	r0, [r7, #4]
    c0ba:	4b06      	ldr	r3, [pc, #24]	; (c0d4 <_usb_d_dev_trans_out_isr+0x90>)
    c0bc:	4798      	blx	r3
}
    c0be:	bf00      	nop
    c0c0:	3708      	adds	r7, #8
    c0c2:	46bd      	mov	sp, r7
    c0c4:	bd80      	pop	{r7, pc}
    c0c6:	bf00      	nop
    c0c8:	0000bd55 	.word	0x0000bd55
    c0cc:	0000bd99 	.word	0x0000bd99
    c0d0:	0000b9b9 	.word	0x0000b9b9
    c0d4:	0000bc7d 	.word	0x0000bc7d

0000c0d8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    c0d8:	b580      	push	{r7, lr}
    c0da:	b084      	sub	sp, #16
    c0dc:	af00      	add	r7, sp, #0
    c0de:	6078      	str	r0, [r7, #4]
    c0e0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    c0e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c0e6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c0e8:	683b      	ldr	r3, [r7, #0]
    c0ea:	7c9b      	ldrb	r3, [r3, #18]
    c0ec:	f003 030f 	and.w	r3, r3, #15
    c0f0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    c0f2:	7afb      	ldrb	r3, [r7, #11]
    c0f4:	2201      	movs	r2, #1
    c0f6:	409a      	lsls	r2, r3
    c0f8:	687b      	ldr	r3, [r7, #4]
    c0fa:	4013      	ands	r3, r2
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	d03d      	beq.n	c17c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c100:	7afb      	ldrb	r3, [r7, #11]
    c102:	68fa      	ldr	r2, [r7, #12]
    c104:	3308      	adds	r3, #8
    c106:	015b      	lsls	r3, r3, #5
    c108:	4413      	add	r3, r2
    c10a:	3307      	adds	r3, #7
    c10c:	781b      	ldrb	r3, [r3, #0]
    c10e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c110:	7afb      	ldrb	r3, [r7, #11]
    c112:	68fa      	ldr	r2, [r7, #12]
    c114:	015b      	lsls	r3, r3, #5
    c116:	4413      	add	r3, r2
    c118:	f203 1309 	addw	r3, r3, #265	; 0x109
    c11c:	781b      	ldrb	r3, [r3, #0]
    c11e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    c120:	7aba      	ldrb	r2, [r7, #10]
    c122:	7a7b      	ldrb	r3, [r7, #9]
    c124:	4013      	ands	r3, r2
    c126:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    c128:	7abb      	ldrb	r3, [r7, #10]
    c12a:	2b00      	cmp	r3, #0
    c12c:	d027      	beq.n	c17e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c12e:	683b      	ldr	r3, [r7, #0]
    c130:	7cdb      	ldrb	r3, [r3, #19]
    c132:	f003 0307 	and.w	r3, r3, #7
    c136:	b2db      	uxtb	r3, r3
    c138:	2b01      	cmp	r3, #1
    c13a:	d10c      	bne.n	c156 <_usb_d_dev_handle_eps+0x7e>
    c13c:	683b      	ldr	r3, [r7, #0]
    c13e:	7cdb      	ldrb	r3, [r3, #19]
    c140:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c144:	b2db      	uxtb	r3, r3
    c146:	2b00      	cmp	r3, #0
    c148:	d105      	bne.n	c156 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    c14a:	7abb      	ldrb	r3, [r7, #10]
    c14c:	4619      	mov	r1, r3
    c14e:	6838      	ldr	r0, [r7, #0]
    c150:	4b0c      	ldr	r3, [pc, #48]	; (c184 <_usb_d_dev_handle_eps+0xac>)
    c152:	4798      	blx	r3
    c154:	e013      	b.n	c17e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    c156:	683b      	ldr	r3, [r7, #0]
    c158:	7cdb      	ldrb	r3, [r3, #19]
    c15a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c15e:	b2db      	uxtb	r3, r3
    c160:	2b00      	cmp	r3, #0
    c162:	d005      	beq.n	c170 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    c164:	7abb      	ldrb	r3, [r7, #10]
    c166:	4619      	mov	r1, r3
    c168:	6838      	ldr	r0, [r7, #0]
    c16a:	4b07      	ldr	r3, [pc, #28]	; (c188 <_usb_d_dev_handle_eps+0xb0>)
    c16c:	4798      	blx	r3
    c16e:	e006      	b.n	c17e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    c170:	7abb      	ldrb	r3, [r7, #10]
    c172:	4619      	mov	r1, r3
    c174:	6838      	ldr	r0, [r7, #0]
    c176:	4b05      	ldr	r3, [pc, #20]	; (c18c <_usb_d_dev_handle_eps+0xb4>)
    c178:	4798      	blx	r3
    c17a:	e000      	b.n	c17e <_usb_d_dev_handle_eps+0xa6>
		return;
    c17c:	bf00      	nop
		}
	}
}
    c17e:	3710      	adds	r7, #16
    c180:	46bd      	mov	sp, r7
    c182:	bd80      	pop	{r7, pc}
    c184:	0000bf5d 	.word	0x0000bf5d
    c188:	0000bfb1 	.word	0x0000bfb1
    c18c:	0000c045 	.word	0x0000c045

0000c190 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    c190:	b580      	push	{r7, lr}
    c192:	b084      	sub	sp, #16
    c194:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    c196:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c19a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c19c:	68bb      	ldr	r3, [r7, #8]
    c19e:	8c1b      	ldrh	r3, [r3, #32]
    c1a0:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    c1a2:	88fb      	ldrh	r3, [r7, #6]
    c1a4:	2b00      	cmp	r3, #0
    c1a6:	d104      	bne.n	c1b2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    c1a8:	4b13      	ldr	r3, [pc, #76]	; (c1f8 <_usb_d_dev_handler+0x68>)
    c1aa:	4798      	blx	r3
    c1ac:	4603      	mov	r3, r0
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	d11e      	bne.n	c1f0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    c1b2:	2300      	movs	r3, #0
    c1b4:	73fb      	strb	r3, [r7, #15]
    c1b6:	e017      	b.n	c1e8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    c1b8:	7bfa      	ldrb	r2, [r7, #15]
    c1ba:	4613      	mov	r3, r2
    c1bc:	009b      	lsls	r3, r3, #2
    c1be:	4413      	add	r3, r2
    c1c0:	009b      	lsls	r3, r3, #2
    c1c2:	3310      	adds	r3, #16
    c1c4:	4a0d      	ldr	r2, [pc, #52]	; (c1fc <_usb_d_dev_handler+0x6c>)
    c1c6:	4413      	add	r3, r2
    c1c8:	3304      	adds	r3, #4
    c1ca:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    c1cc:	683b      	ldr	r3, [r7, #0]
    c1ce:	7c9b      	ldrb	r3, [r3, #18]
    c1d0:	2bff      	cmp	r3, #255	; 0xff
    c1d2:	d005      	beq.n	c1e0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    c1d4:	88fb      	ldrh	r3, [r7, #6]
    c1d6:	6839      	ldr	r1, [r7, #0]
    c1d8:	4618      	mov	r0, r3
    c1da:	4b09      	ldr	r3, [pc, #36]	; (c200 <_usb_d_dev_handler+0x70>)
    c1dc:	4798      	blx	r3
    c1de:	e000      	b.n	c1e2 <_usb_d_dev_handler+0x52>
			continue;
    c1e0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    c1e2:	7bfb      	ldrb	r3, [r7, #15]
    c1e4:	3301      	adds	r3, #1
    c1e6:	73fb      	strb	r3, [r7, #15]
    c1e8:	7bfb      	ldrb	r3, [r7, #15]
    c1ea:	2b08      	cmp	r3, #8
    c1ec:	d9e4      	bls.n	c1b8 <_usb_d_dev_handler+0x28>
    c1ee:	e000      	b.n	c1f2 <_usb_d_dev_handler+0x62>
			return;
    c1f0:	bf00      	nop
	}
}
    c1f2:	3710      	adds	r7, #16
    c1f4:	46bd      	mov	sp, r7
    c1f6:	bd80      	pop	{r7, pc}
    c1f8:	0000b6e9 	.word	0x0000b6e9
    c1fc:	200020a0 	.word	0x200020a0
    c200:	0000c0d9 	.word	0x0000c0d9

0000c204 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    c204:	b580      	push	{r7, lr}
    c206:	b082      	sub	sp, #8
    c208:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    c20a:	2300      	movs	r3, #0
    c20c:	71fb      	strb	r3, [r7, #7]
    c20e:	e023      	b.n	c258 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c210:	79fa      	ldrb	r2, [r7, #7]
    c212:	4613      	mov	r3, r2
    c214:	009b      	lsls	r3, r3, #2
    c216:	4413      	add	r3, r2
    c218:	009b      	lsls	r3, r3, #2
    c21a:	3310      	adds	r3, #16
    c21c:	4a14      	ldr	r2, [pc, #80]	; (c270 <_usb_d_dev_reset_epts+0x6c>)
    c21e:	4413      	add	r3, r2
    c220:	3304      	adds	r3, #4
    c222:	2103      	movs	r1, #3
    c224:	4618      	mov	r0, r3
    c226:	4b13      	ldr	r3, [pc, #76]	; (c274 <_usb_d_dev_reset_epts+0x70>)
    c228:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    c22a:	79fa      	ldrb	r2, [r7, #7]
    c22c:	4910      	ldr	r1, [pc, #64]	; (c270 <_usb_d_dev_reset_epts+0x6c>)
    c22e:	4613      	mov	r3, r2
    c230:	009b      	lsls	r3, r3, #2
    c232:	4413      	add	r3, r2
    c234:	009b      	lsls	r3, r3, #2
    c236:	440b      	add	r3, r1
    c238:	3326      	adds	r3, #38	; 0x26
    c23a:	22ff      	movs	r2, #255	; 0xff
    c23c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    c23e:	79fa      	ldrb	r2, [r7, #7]
    c240:	490b      	ldr	r1, [pc, #44]	; (c270 <_usb_d_dev_reset_epts+0x6c>)
    c242:	4613      	mov	r3, r2
    c244:	009b      	lsls	r3, r3, #2
    c246:	4413      	add	r3, r2
    c248:	009b      	lsls	r3, r3, #2
    c24a:	440b      	add	r3, r1
    c24c:	3327      	adds	r3, #39	; 0x27
    c24e:	2200      	movs	r2, #0
    c250:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    c252:	79fb      	ldrb	r3, [r7, #7]
    c254:	3301      	adds	r3, #1
    c256:	71fb      	strb	r3, [r7, #7]
    c258:	79fb      	ldrb	r3, [r7, #7]
    c25a:	2b08      	cmp	r3, #8
    c25c:	d9d8      	bls.n	c210 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    c25e:	22a0      	movs	r2, #160	; 0xa0
    c260:	2100      	movs	r1, #0
    c262:	4805      	ldr	r0, [pc, #20]	; (c278 <_usb_d_dev_reset_epts+0x74>)
    c264:	4b05      	ldr	r3, [pc, #20]	; (c27c <_usb_d_dev_reset_epts+0x78>)
    c266:	4798      	blx	r3
}
    c268:	bf00      	nop
    c26a:	3708      	adds	r7, #8
    c26c:	46bd      	mov	sp, r7
    c26e:	bd80      	pop	{r7, pc}
    c270:	200020a0 	.word	0x200020a0
    c274:	0000cac9 	.word	0x0000cac9
    c278:	20002168 	.word	0x20002168
    c27c:	0000fb25 	.word	0x0000fb25

0000c280 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    c280:	b580      	push	{r7, lr}
    c282:	b084      	sub	sp, #16
    c284:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    c286:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c28a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    c28c:	2301      	movs	r3, #1
    c28e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    c290:	2304      	movs	r3, #4
    c292:	713b      	strb	r3, [r7, #4]
    c294:	2300      	movs	r3, #0
    c296:	717b      	strb	r3, [r7, #5]
    c298:	2300      	movs	r3, #0
    c29a:	71bb      	strb	r3, [r7, #6]
    c29c:	2300      	movs	r3, #0
    c29e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    c2a0:	2101      	movs	r1, #1
    c2a2:	68f8      	ldr	r0, [r7, #12]
    c2a4:	4b26      	ldr	r3, [pc, #152]	; (c340 <_usb_d_dev_init+0xc0>)
    c2a6:	4798      	blx	r3
    c2a8:	4603      	mov	r3, r0
    c2aa:	f083 0301 	eor.w	r3, r3, #1
    c2ae:	b2db      	uxtb	r3, r3
    c2b0:	2b00      	cmp	r3, #0
    c2b2:	d011      	beq.n	c2d8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    c2b4:	2102      	movs	r1, #2
    c2b6:	68f8      	ldr	r0, [r7, #12]
    c2b8:	4b22      	ldr	r3, [pc, #136]	; (c344 <_usb_d_dev_init+0xc4>)
    c2ba:	4798      	blx	r3
    c2bc:	4603      	mov	r3, r0
    c2be:	2b00      	cmp	r3, #0
    c2c0:	d006      	beq.n	c2d0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    c2c2:	68f8      	ldr	r0, [r7, #12]
    c2c4:	4b20      	ldr	r3, [pc, #128]	; (c348 <_usb_d_dev_init+0xc8>)
    c2c6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    c2c8:	2102      	movs	r1, #2
    c2ca:	68f8      	ldr	r0, [r7, #12]
    c2cc:	4b1f      	ldr	r3, [pc, #124]	; (c34c <_usb_d_dev_init+0xcc>)
    c2ce:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    c2d0:	2101      	movs	r1, #1
    c2d2:	68f8      	ldr	r0, [r7, #12]
    c2d4:	4b1e      	ldr	r3, [pc, #120]	; (c350 <_usb_d_dev_init+0xd0>)
    c2d6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    c2d8:	2101      	movs	r1, #1
    c2da:	68f8      	ldr	r0, [r7, #12]
    c2dc:	4b1b      	ldr	r3, [pc, #108]	; (c34c <_usb_d_dev_init+0xcc>)
    c2de:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    c2e0:	4b1c      	ldr	r3, [pc, #112]	; (c354 <_usb_d_dev_init+0xd4>)
    c2e2:	4a1d      	ldr	r2, [pc, #116]	; (c358 <_usb_d_dev_init+0xd8>)
    c2e4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    c2e6:	4b1b      	ldr	r3, [pc, #108]	; (c354 <_usb_d_dev_init+0xd4>)
    c2e8:	4a1b      	ldr	r2, [pc, #108]	; (c358 <_usb_d_dev_init+0xd8>)
    c2ea:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    c2ec:	4b19      	ldr	r3, [pc, #100]	; (c354 <_usb_d_dev_init+0xd4>)
    c2ee:	4a1a      	ldr	r2, [pc, #104]	; (c358 <_usb_d_dev_init+0xd8>)
    c2f0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    c2f2:	4b18      	ldr	r3, [pc, #96]	; (c354 <_usb_d_dev_init+0xd4>)
    c2f4:	4a18      	ldr	r2, [pc, #96]	; (c358 <_usb_d_dev_init+0xd8>)
    c2f6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    c2f8:	4b16      	ldr	r3, [pc, #88]	; (c354 <_usb_d_dev_init+0xd4>)
    c2fa:	4a17      	ldr	r2, [pc, #92]	; (c358 <_usb_d_dev_init+0xd8>)
    c2fc:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    c2fe:	4b17      	ldr	r3, [pc, #92]	; (c35c <_usb_d_dev_init+0xdc>)
    c300:	4798      	blx	r3

	_usb_load_calib();
    c302:	4b17      	ldr	r3, [pc, #92]	; (c360 <_usb_d_dev_init+0xe0>)
    c304:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    c306:	2104      	movs	r1, #4
    c308:	68f8      	ldr	r0, [r7, #12]
    c30a:	4b11      	ldr	r3, [pc, #68]	; (c350 <_usb_d_dev_init+0xd0>)
    c30c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    c30e:	4b15      	ldr	r3, [pc, #84]	; (c364 <_usb_d_dev_init+0xe4>)
    c310:	4619      	mov	r1, r3
    c312:	68f8      	ldr	r0, [r7, #12]
    c314:	4b14      	ldr	r3, [pc, #80]	; (c368 <_usb_d_dev_init+0xe8>)
    c316:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    c318:	7afb      	ldrb	r3, [r7, #11]
    c31a:	f107 0210 	add.w	r2, r7, #16
    c31e:	4413      	add	r3, r2
    c320:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    c324:	f043 0301 	orr.w	r3, r3, #1
    c328:	b2db      	uxtb	r3, r3
    c32a:	b29b      	uxth	r3, r3
    c32c:	4619      	mov	r1, r3
    c32e:	68f8      	ldr	r0, [r7, #12]
    c330:	4b0e      	ldr	r3, [pc, #56]	; (c36c <_usb_d_dev_init+0xec>)
    c332:	4798      	blx	r3

	return ERR_NONE;
    c334:	2300      	movs	r3, #0
}
    c336:	4618      	mov	r0, r3
    c338:	3710      	adds	r7, #16
    c33a:	46bd      	mov	sp, r7
    c33c:	bd80      	pop	{r7, pc}
    c33e:	bf00      	nop
    c340:	0000a919 	.word	0x0000a919
    c344:	0000ac69 	.word	0x0000ac69
    c348:	0000ac3d 	.word	0x0000ac3d
    c34c:	0000a8ef 	.word	0x0000a8ef
    c350:	0000ac99 	.word	0x0000ac99
    c354:	200020a0 	.word	0x200020a0
    c358:	0000ad61 	.word	0x0000ad61
    c35c:	0000c205 	.word	0x0000c205
    c360:	0000ad79 	.word	0x0000ad79
    c364:	20002168 	.word	0x20002168
    c368:	0000ad45 	.word	0x0000ad45
    c36c:	0000ad09 	.word	0x0000ad09

0000c370 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    c370:	b580      	push	{r7, lr}
    c372:	b082      	sub	sp, #8
    c374:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    c376:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c37a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    c37c:	2103      	movs	r1, #3
    c37e:	6878      	ldr	r0, [r7, #4]
    c380:	4b17      	ldr	r3, [pc, #92]	; (c3e0 <_usb_d_dev_enable+0x70>)
    c382:	4798      	blx	r3
    c384:	4603      	mov	r3, r0
    c386:	2b00      	cmp	r3, #0
    c388:	d002      	beq.n	c390 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    c38a:	f06f 0310 	mvn.w	r3, #16
    c38e:	e023      	b.n	c3d8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    c390:	6878      	ldr	r0, [r7, #4]
    c392:	4b14      	ldr	r3, [pc, #80]	; (c3e4 <_usb_d_dev_enable+0x74>)
    c394:	4798      	blx	r3
    c396:	4603      	mov	r3, r0
    c398:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    c39a:	78fb      	ldrb	r3, [r7, #3]
    c39c:	f003 0302 	and.w	r3, r3, #2
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d107      	bne.n	c3b4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    c3a4:	78fb      	ldrb	r3, [r7, #3]
    c3a6:	f043 0302 	orr.w	r3, r3, #2
    c3aa:	b2db      	uxtb	r3, r3
    c3ac:	4619      	mov	r1, r3
    c3ae:	6878      	ldr	r0, [r7, #4]
    c3b0:	4b0d      	ldr	r3, [pc, #52]	; (c3e8 <_usb_d_dev_enable+0x78>)
    c3b2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    c3b4:	2050      	movs	r0, #80	; 0x50
    c3b6:	4b0d      	ldr	r3, [pc, #52]	; (c3ec <_usb_d_dev_enable+0x7c>)
    c3b8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    c3ba:	2051      	movs	r0, #81	; 0x51
    c3bc:	4b0b      	ldr	r3, [pc, #44]	; (c3ec <_usb_d_dev_enable+0x7c>)
    c3be:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    c3c0:	2052      	movs	r0, #82	; 0x52
    c3c2:	4b0a      	ldr	r3, [pc, #40]	; (c3ec <_usb_d_dev_enable+0x7c>)
    c3c4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    c3c6:	2053      	movs	r0, #83	; 0x53
    c3c8:	4b08      	ldr	r3, [pc, #32]	; (c3ec <_usb_d_dev_enable+0x7c>)
    c3ca:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    c3cc:	f240 218d 	movw	r1, #653	; 0x28d
    c3d0:	6878      	ldr	r0, [r7, #4]
    c3d2:	4b07      	ldr	r3, [pc, #28]	; (c3f0 <_usb_d_dev_enable+0x80>)
    c3d4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    c3d6:	2300      	movs	r3, #0
}
    c3d8:	4618      	mov	r0, r3
    c3da:	3708      	adds	r7, #8
    c3dc:	46bd      	mov	sp, r7
    c3de:	bd80      	pop	{r7, pc}
    c3e0:	0000ac13 	.word	0x0000ac13
    c3e4:	0000acc1 	.word	0x0000acc1
    c3e8:	0000ac99 	.word	0x0000ac99
    c3ec:	0000a825 	.word	0x0000a825
    c3f0:	0000abbd 	.word	0x0000abbd

0000c3f4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    c3f4:	b580      	push	{r7, lr}
    c3f6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    c3f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c3fc:	4b01      	ldr	r3, [pc, #4]	; (c404 <_usb_d_dev_attach+0x10>)
    c3fe:	4798      	blx	r3
}
    c400:	bf00      	nop
    c402:	bd80      	pop	{r7, pc}
    c404:	0000ace5 	.word	0x0000ace5

0000c408 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    c408:	b580      	push	{r7, lr}
    c40a:	b082      	sub	sp, #8
    c40c:	af00      	add	r7, sp, #0
    c40e:	4603      	mov	r3, r0
    c410:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    c412:	79fb      	ldrb	r3, [r7, #7]
    c414:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c418:	b2db      	uxtb	r3, r3
    c41a:	4619      	mov	r1, r3
    c41c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c420:	4b02      	ldr	r3, [pc, #8]	; (c42c <_usb_d_dev_set_address+0x24>)
    c422:	4798      	blx	r3
}
    c424:	bf00      	nop
    c426:	3708      	adds	r7, #8
    c428:	46bd      	mov	sp, r7
    c42a:	bd80      	pop	{r7, pc}
    c42c:	0000ad27 	.word	0x0000ad27

0000c430 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    c430:	b590      	push	{r4, r7, lr}
    c432:	b085      	sub	sp, #20
    c434:	af00      	add	r7, sp, #0
    c436:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    c438:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c43c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c43e:	687b      	ldr	r3, [r7, #4]
    c440:	7c9b      	ldrb	r3, [r3, #18]
    c442:	f003 030f 	and.w	r3, r3, #15
    c446:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c448:	687b      	ldr	r3, [r7, #4]
    c44a:	68db      	ldr	r3, [r3, #12]
    c44c:	461a      	mov	r2, r3
    c44e:	7afb      	ldrb	r3, [r7, #11]
    c450:	2100      	movs	r1, #0
    c452:	4618      	mov	r0, r3
    c454:	4b0f      	ldr	r3, [pc, #60]	; (c494 <_usb_d_dev_trans_setup+0x64>)
    c456:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    c458:	687b      	ldr	r3, [r7, #4]
    c45a:	8a1b      	ldrh	r3, [r3, #16]
    c45c:	461a      	mov	r2, r3
    c45e:	7af8      	ldrb	r0, [r7, #11]
    c460:	2300      	movs	r3, #0
    c462:	2100      	movs	r1, #0
    c464:	4c0c      	ldr	r4, [pc, #48]	; (c498 <_usb_d_dev_trans_setup+0x68>)
    c466:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    c468:	7afb      	ldrb	r3, [r7, #11]
    c46a:	22b0      	movs	r2, #176	; 0xb0
    c46c:	4619      	mov	r1, r3
    c46e:	68f8      	ldr	r0, [r7, #12]
    c470:	4b0a      	ldr	r3, [pc, #40]	; (c49c <_usb_d_dev_trans_setup+0x6c>)
    c472:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    c474:	7afb      	ldrb	r3, [r7, #11]
    c476:	2200      	movs	r2, #0
    c478:	2100      	movs	r1, #0
    c47a:	4618      	mov	r0, r3
    c47c:	4b08      	ldr	r3, [pc, #32]	; (c4a0 <_usb_d_dev_trans_setup+0x70>)
    c47e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    c480:	7afb      	ldrb	r3, [r7, #11]
    c482:	2210      	movs	r2, #16
    c484:	4619      	mov	r1, r3
    c486:	68f8      	ldr	r0, [r7, #12]
    c488:	4b06      	ldr	r3, [pc, #24]	; (c4a4 <_usb_d_dev_trans_setup+0x74>)
    c48a:	4798      	blx	r3
}
    c48c:	bf00      	nop
    c48e:	3714      	adds	r7, #20
    c490:	46bd      	mov	sp, r7
    c492:	bd90      	pop	{r4, r7, pc}
    c494:	0000b1c5 	.word	0x0000b1c5
    c498:	0000b34d 	.word	0x0000b34d
    c49c:	0000aa25 	.word	0x0000aa25
    c4a0:	0000b41d 	.word	0x0000b41d
    c4a4:	0000aa79 	.word	0x0000aa79

0000c4a8 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    c4a8:	b580      	push	{r7, lr}
    c4aa:	b088      	sub	sp, #32
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	4603      	mov	r3, r0
    c4b0:	71fb      	strb	r3, [r7, #7]
    c4b2:	460b      	mov	r3, r1
    c4b4:	71bb      	strb	r3, [r7, #6]
    c4b6:	4613      	mov	r3, r2
    c4b8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    c4ba:	79fb      	ldrb	r3, [r7, #7]
    c4bc:	f003 030f 	and.w	r3, r3, #15
    c4c0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    c4c2:	79fb      	ldrb	r3, [r7, #7]
    c4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	bf14      	ite	ne
    c4cc:	2301      	movne	r3, #1
    c4ce:	2300      	moveq	r3, #0
    c4d0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c4d2:	7fba      	ldrb	r2, [r7, #30]
    c4d4:	7ffb      	ldrb	r3, [r7, #31]
    c4d6:	4611      	mov	r1, r2
    c4d8:	4618      	mov	r0, r3
    c4da:	4b3e      	ldr	r3, [pc, #248]	; (c5d4 <_usb_d_dev_ep_init+0x12c>)
    c4dc:	4798      	blx	r3
    c4de:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    c4e0:	79bb      	ldrb	r3, [r7, #6]
    c4e2:	f003 0303 	and.w	r3, r3, #3
    c4e6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    c4e8:	7ffa      	ldrb	r2, [r7, #31]
    c4ea:	4613      	mov	r3, r2
    c4ec:	005b      	lsls	r3, r3, #1
    c4ee:	4413      	add	r3, r2
    c4f0:	009b      	lsls	r3, r3, #2
    c4f2:	4a39      	ldr	r2, [pc, #228]	; (c5d8 <_usb_d_dev_ep_init+0x130>)
    c4f4:	4413      	add	r3, r2
    c4f6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    c4f8:	7ffb      	ldrb	r3, [r7, #31]
    c4fa:	2b04      	cmp	r3, #4
    c4fc:	d902      	bls.n	c504 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    c4fe:	f06f 0311 	mvn.w	r3, #17
    c502:	e063      	b.n	c5cc <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    c504:	69bb      	ldr	r3, [r7, #24]
    c506:	7c9b      	ldrb	r3, [r3, #18]
    c508:	2bff      	cmp	r3, #255	; 0xff
    c50a:	d002      	beq.n	c512 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    c50c:	f06f 0313 	mvn.w	r3, #19
    c510:	e05c      	b.n	c5cc <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    c512:	7dfb      	ldrb	r3, [r7, #23]
    c514:	2b00      	cmp	r3, #0
    c516:	d11f      	bne.n	c558 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    c518:	7fbb      	ldrb	r3, [r7, #30]
    c51a:	2b00      	cmp	r3, #0
    c51c:	bf14      	ite	ne
    c51e:	2301      	movne	r3, #1
    c520:	2300      	moveq	r3, #0
    c522:	b2db      	uxtb	r3, r3
    c524:	f083 0301 	eor.w	r3, r3, #1
    c528:	b2db      	uxtb	r3, r3
    c52a:	f003 0301 	and.w	r3, r3, #1
    c52e:	b2da      	uxtb	r2, r3
    c530:	7ffb      	ldrb	r3, [r7, #31]
    c532:	4611      	mov	r1, r2
    c534:	4618      	mov	r0, r3
    c536:	4b27      	ldr	r3, [pc, #156]	; (c5d4 <_usb_d_dev_ep_init+0x12c>)
    c538:	4798      	blx	r3
    c53a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    c53c:	68fb      	ldr	r3, [r7, #12]
    c53e:	7c9b      	ldrb	r3, [r3, #18]
    c540:	2bff      	cmp	r3, #255	; 0xff
    c542:	d002      	beq.n	c54a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    c544:	f06f 0313 	mvn.w	r3, #19
    c548:	e040      	b.n	c5cc <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    c54a:	693b      	ldr	r3, [r7, #16]
    c54c:	681b      	ldr	r3, [r3, #0]
    c54e:	2b00      	cmp	r3, #0
    c550:	d102      	bne.n	c558 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    c552:	f06f 0312 	mvn.w	r3, #18
    c556:	e039      	b.n	c5cc <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    c558:	7fbb      	ldrb	r3, [r7, #30]
    c55a:	2b00      	cmp	r3, #0
    c55c:	d007      	beq.n	c56e <_usb_d_dev_ep_init+0xc6>
    c55e:	693b      	ldr	r3, [r7, #16]
    c560:	685b      	ldr	r3, [r3, #4]
    c562:	2b00      	cmp	r3, #0
    c564:	bf14      	ite	ne
    c566:	2301      	movne	r3, #1
    c568:	2300      	moveq	r3, #0
    c56a:	b2db      	uxtb	r3, r3
    c56c:	e006      	b.n	c57c <_usb_d_dev_ep_init+0xd4>
    c56e:	693b      	ldr	r3, [r7, #16]
    c570:	681b      	ldr	r3, [r3, #0]
    c572:	2b00      	cmp	r3, #0
    c574:	bf14      	ite	ne
    c576:	2301      	movne	r3, #1
    c578:	2300      	moveq	r3, #0
    c57a:	b2db      	uxtb	r3, r3
    c57c:	2b00      	cmp	r3, #0
    c57e:	d00f      	beq.n	c5a0 <_usb_d_dev_ep_init+0xf8>
    c580:	7fbb      	ldrb	r3, [r7, #30]
    c582:	2b00      	cmp	r3, #0
    c584:	d003      	beq.n	c58e <_usb_d_dev_ep_init+0xe6>
    c586:	693b      	ldr	r3, [r7, #16]
    c588:	895b      	ldrh	r3, [r3, #10]
    c58a:	461a      	mov	r2, r3
    c58c:	e002      	b.n	c594 <_usb_d_dev_ep_init+0xec>
    c58e:	693b      	ldr	r3, [r7, #16]
    c590:	891b      	ldrh	r3, [r3, #8]
    c592:	461a      	mov	r2, r3
    c594:	88bb      	ldrh	r3, [r7, #4]
    c596:	429a      	cmp	r2, r3
    c598:	da02      	bge.n	c5a0 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    c59a:	f06f 0312 	mvn.w	r3, #18
    c59e:	e015      	b.n	c5cc <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c5a0:	7fbb      	ldrb	r3, [r7, #30]
    c5a2:	2b00      	cmp	r3, #0
    c5a4:	d002      	beq.n	c5ac <_usb_d_dev_ep_init+0x104>
    c5a6:	693b      	ldr	r3, [r7, #16]
    c5a8:	685b      	ldr	r3, [r3, #4]
    c5aa:	e001      	b.n	c5b0 <_usb_d_dev_ep_init+0x108>
    c5ac:	693b      	ldr	r3, [r7, #16]
    c5ae:	681b      	ldr	r3, [r3, #0]
    c5b0:	69ba      	ldr	r2, [r7, #24]
    c5b2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    c5b4:	69bb      	ldr	r3, [r7, #24]
    c5b6:	88ba      	ldrh	r2, [r7, #4]
    c5b8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    c5ba:	7dfb      	ldrb	r3, [r7, #23]
    c5bc:	3301      	adds	r3, #1
    c5be:	b2da      	uxtb	r2, r3
    c5c0:	69bb      	ldr	r3, [r7, #24]
    c5c2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    c5c4:	69bb      	ldr	r3, [r7, #24]
    c5c6:	79fa      	ldrb	r2, [r7, #7]
    c5c8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    c5ca:	2300      	movs	r3, #0
}
    c5cc:	4618      	mov	r0, r3
    c5ce:	3720      	adds	r7, #32
    c5d0:	46bd      	mov	sp, r7
    c5d2:	bd80      	pop	{r7, pc}
    c5d4:	0000b4d9 	.word	0x0000b4d9
    c5d8:	00010338 	.word	0x00010338

0000c5dc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    c5dc:	b580      	push	{r7, lr}
    c5de:	b086      	sub	sp, #24
    c5e0:	af00      	add	r7, sp, #0
    c5e2:	4603      	mov	r3, r0
    c5e4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    c5e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c5ea:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    c5ec:	79fb      	ldrb	r3, [r7, #7]
    c5ee:	f003 030f 	and.w	r3, r3, #15
    c5f2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c5f4:	79fb      	ldrb	r3, [r7, #7]
    c5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c5fa:	2b00      	cmp	r3, #0
    c5fc:	bf14      	ite	ne
    c5fe:	2301      	movne	r3, #1
    c600:	2300      	moveq	r3, #0
    c602:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c604:	7cba      	ldrb	r2, [r7, #18]
    c606:	7cfb      	ldrb	r3, [r7, #19]
    c608:	4611      	mov	r1, r2
    c60a:	4618      	mov	r0, r3
    c60c:	4b2a      	ldr	r3, [pc, #168]	; (c6b8 <_usb_d_dev_ep_deinit+0xdc>)
    c60e:	4798      	blx	r3
    c610:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c612:	7cfb      	ldrb	r3, [r7, #19]
    c614:	2b04      	cmp	r3, #4
    c616:	d84a      	bhi.n	c6ae <_usb_d_dev_ep_deinit+0xd2>
    c618:	68fb      	ldr	r3, [r7, #12]
    c61a:	7c9b      	ldrb	r3, [r3, #18]
    c61c:	2bff      	cmp	r3, #255	; 0xff
    c61e:	d046      	beq.n	c6ae <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    c620:	7cbb      	ldrb	r3, [r7, #18]
    c622:	2203      	movs	r2, #3
    c624:	4619      	mov	r1, r3
    c626:	68f8      	ldr	r0, [r7, #12]
    c628:	4b24      	ldr	r3, [pc, #144]	; (c6bc <_usb_d_dev_ep_deinit+0xe0>)
    c62a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c62c:	68fb      	ldr	r3, [r7, #12]
    c62e:	7cdb      	ldrb	r3, [r3, #19]
    c630:	f003 0307 	and.w	r3, r3, #7
    c634:	b2db      	uxtb	r3, r3
    c636:	2b01      	cmp	r3, #1
    c638:	d107      	bne.n	c64a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    c63a:	79fb      	ldrb	r3, [r7, #7]
    c63c:	697a      	ldr	r2, [r7, #20]
    c63e:	3308      	adds	r3, #8
    c640:	015b      	lsls	r3, r3, #5
    c642:	4413      	add	r3, r2
    c644:	2200      	movs	r2, #0
    c646:	701a      	strb	r2, [r3, #0]
    c648:	e02a      	b.n	c6a0 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    c64a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c64e:	2b00      	cmp	r3, #0
    c650:	da15      	bge.n	c67e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    c652:	79fb      	ldrb	r3, [r7, #7]
    c654:	f003 030f 	and.w	r3, r3, #15
    c658:	79fa      	ldrb	r2, [r7, #7]
    c65a:	f002 020f 	and.w	r2, r2, #15
    c65e:	6979      	ldr	r1, [r7, #20]
    c660:	3208      	adds	r2, #8
    c662:	0152      	lsls	r2, r2, #5
    c664:	440a      	add	r2, r1
    c666:	7812      	ldrb	r2, [r2, #0]
    c668:	b2d2      	uxtb	r2, r2
    c66a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    c66e:	b2d1      	uxtb	r1, r2
    c670:	697a      	ldr	r2, [r7, #20]
    c672:	3308      	adds	r3, #8
    c674:	015b      	lsls	r3, r3, #5
    c676:	4413      	add	r3, r2
    c678:	460a      	mov	r2, r1
    c67a:	701a      	strb	r2, [r3, #0]
    c67c:	e010      	b.n	c6a0 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    c67e:	79fb      	ldrb	r3, [r7, #7]
    c680:	79fa      	ldrb	r2, [r7, #7]
    c682:	6979      	ldr	r1, [r7, #20]
    c684:	3208      	adds	r2, #8
    c686:	0152      	lsls	r2, r2, #5
    c688:	440a      	add	r2, r1
    c68a:	7812      	ldrb	r2, [r2, #0]
    c68c:	b2d2      	uxtb	r2, r2
    c68e:	f022 0207 	bic.w	r2, r2, #7
    c692:	b2d1      	uxtb	r1, r2
    c694:	697a      	ldr	r2, [r7, #20]
    c696:	3308      	adds	r3, #8
    c698:	015b      	lsls	r3, r3, #5
    c69a:	4413      	add	r3, r2
    c69c:	460a      	mov	r2, r1
    c69e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    c6a0:	68fb      	ldr	r3, [r7, #12]
    c6a2:	2200      	movs	r2, #0
    c6a4:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    c6a6:	68fb      	ldr	r3, [r7, #12]
    c6a8:	22ff      	movs	r2, #255	; 0xff
    c6aa:	749a      	strb	r2, [r3, #18]
    c6ac:	e000      	b.n	c6b0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    c6ae:	bf00      	nop
}
    c6b0:	3718      	adds	r7, #24
    c6b2:	46bd      	mov	sp, r7
    c6b4:	bd80      	pop	{r7, pc}
    c6b6:	bf00      	nop
    c6b8:	0000b4d9 	.word	0x0000b4d9
    c6bc:	0000cb11 	.word	0x0000cb11

0000c6c0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    c6c0:	b5b0      	push	{r4, r5, r7, lr}
    c6c2:	b088      	sub	sp, #32
    c6c4:	af00      	add	r7, sp, #0
    c6c6:	4603      	mov	r3, r0
    c6c8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    c6ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c6ce:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    c6d0:	79fb      	ldrb	r3, [r7, #7]
    c6d2:	f003 030f 	and.w	r3, r3, #15
    c6d6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    c6d8:	79fb      	ldrb	r3, [r7, #7]
    c6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c6de:	2b00      	cmp	r3, #0
    c6e0:	bf14      	ite	ne
    c6e2:	2301      	movne	r3, #1
    c6e4:	2300      	moveq	r3, #0
    c6e6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    c6e8:	7eba      	ldrb	r2, [r7, #26]
    c6ea:	7efb      	ldrb	r3, [r7, #27]
    c6ec:	4611      	mov	r1, r2
    c6ee:	4618      	mov	r0, r3
    c6f0:	4b70      	ldr	r3, [pc, #448]	; (c8b4 <_usb_d_dev_ep_enable+0x1f4>)
    c6f2:	4798      	blx	r3
    c6f4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    c6f6:	7efb      	ldrb	r3, [r7, #27]
    c6f8:	4619      	mov	r1, r3
    c6fa:	69f8      	ldr	r0, [r7, #28]
    c6fc:	4b6e      	ldr	r3, [pc, #440]	; (c8b8 <_usb_d_dev_ep_enable+0x1f8>)
    c6fe:	4798      	blx	r3
    c700:	4603      	mov	r3, r0
    c702:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c704:	7efb      	ldrb	r3, [r7, #27]
    c706:	2b04      	cmp	r3, #4
    c708:	d803      	bhi.n	c712 <_usb_d_dev_ep_enable+0x52>
    c70a:	697b      	ldr	r3, [r7, #20]
    c70c:	7c9b      	ldrb	r3, [r3, #18]
    c70e:	2bff      	cmp	r3, #255	; 0xff
    c710:	d102      	bne.n	c718 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    c712:	f06f 0311 	mvn.w	r3, #17
    c716:	e0c8      	b.n	c8aa <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c718:	7efb      	ldrb	r3, [r7, #27]
    c71a:	015b      	lsls	r3, r3, #5
    c71c:	4a67      	ldr	r2, [pc, #412]	; (c8bc <_usb_d_dev_ep_enable+0x1fc>)
    c71e:	4413      	add	r3, r2
    c720:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c722:	697b      	ldr	r3, [r7, #20]
    c724:	7cdb      	ldrb	r3, [r3, #19]
    c726:	f003 0307 	and.w	r3, r3, #7
    c72a:	b2db      	uxtb	r3, r3
    c72c:	2b01      	cmp	r3, #1
    c72e:	d14b      	bne.n	c7c8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    c730:	7cfb      	ldrb	r3, [r7, #19]
    c732:	f003 0377 	and.w	r3, r3, #119	; 0x77
    c736:	2b00      	cmp	r3, #0
    c738:	d002      	beq.n	c740 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    c73a:	f06f 0313 	mvn.w	r3, #19
    c73e:	e0b4      	b.n	c8aa <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    c740:	7efb      	ldrb	r3, [r7, #27]
    c742:	2211      	movs	r2, #17
    c744:	4619      	mov	r1, r3
    c746:	69f8      	ldr	r0, [r7, #28]
    c748:	4b5d      	ldr	r3, [pc, #372]	; (c8c0 <_usb_d_dev_ep_enable+0x200>)
    c74a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c74c:	697b      	ldr	r3, [r7, #20]
    c74e:	8a1b      	ldrh	r3, [r3, #16]
    c750:	039b      	lsls	r3, r3, #14
    c752:	4c5c      	ldr	r4, [pc, #368]	; (c8c4 <_usb_d_dev_ep_enable+0x204>)
    c754:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c756:	697b      	ldr	r3, [r7, #20]
    c758:	8a1b      	ldrh	r3, [r3, #16]
    c75a:	4618      	mov	r0, r3
    c75c:	4b5a      	ldr	r3, [pc, #360]	; (c8c8 <_usb_d_dev_ep_enable+0x208>)
    c75e:	4798      	blx	r3
    c760:	4603      	mov	r3, r0
    c762:	071b      	lsls	r3, r3, #28
    c764:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c768:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c76c:	68fb      	ldr	r3, [r7, #12]
    c76e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    c770:	68fb      	ldr	r3, [r7, #12]
    c772:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c776:	697b      	ldr	r3, [r7, #20]
    c778:	8a1b      	ldrh	r3, [r3, #16]
    c77a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c77e:	697b      	ldr	r3, [r7, #20]
    c780:	8a1b      	ldrh	r3, [r3, #16]
    c782:	4618      	mov	r0, r3
    c784:	4b50      	ldr	r3, [pc, #320]	; (c8c8 <_usb_d_dev_ep_enable+0x208>)
    c786:	4798      	blx	r3
    c788:	4603      	mov	r3, r0
    c78a:	071b      	lsls	r3, r3, #28
    c78c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c790:	432b      	orrs	r3, r5
    c792:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c794:	7efb      	ldrb	r3, [r7, #27]
    c796:	2200      	movs	r2, #0
    c798:	2100      	movs	r1, #0
    c79a:	4618      	mov	r0, r3
    c79c:	4b4b      	ldr	r3, [pc, #300]	; (c8cc <_usb_d_dev_ep_enable+0x20c>)
    c79e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    c7a0:	7efb      	ldrb	r3, [r7, #27]
    c7a2:	2200      	movs	r2, #0
    c7a4:	2101      	movs	r1, #1
    c7a6:	4618      	mov	r0, r3
    c7a8:	4b49      	ldr	r3, [pc, #292]	; (c8d0 <_usb_d_dev_ep_enable+0x210>)
    c7aa:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    c7ac:	7efb      	ldrb	r3, [r7, #27]
    c7ae:	2100      	movs	r1, #0
    c7b0:	4618      	mov	r0, r3
    c7b2:	4b48      	ldr	r3, [pc, #288]	; (c8d4 <_usb_d_dev_ep_enable+0x214>)
    c7b4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c7b6:	7efb      	ldrb	r3, [r7, #27]
    c7b8:	2101      	movs	r1, #1
    c7ba:	4618      	mov	r0, r3
    c7bc:	4b45      	ldr	r3, [pc, #276]	; (c8d4 <_usb_d_dev_ep_enable+0x214>)
    c7be:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    c7c0:	6978      	ldr	r0, [r7, #20]
    c7c2:	4b45      	ldr	r3, [pc, #276]	; (c8d8 <_usb_d_dev_ep_enable+0x218>)
    c7c4:	4798      	blx	r3
    c7c6:	e06f      	b.n	c8a8 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    c7c8:	7ebb      	ldrb	r3, [r7, #26]
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d038      	beq.n	c840 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c7ce:	7cfb      	ldrb	r3, [r7, #19]
    c7d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c7d4:	2b00      	cmp	r3, #0
    c7d6:	d002      	beq.n	c7de <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    c7d8:	f06f 0313 	mvn.w	r3, #19
    c7dc:	e065      	b.n	c8aa <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c7de:	697b      	ldr	r3, [r7, #20]
    c7e0:	7cdb      	ldrb	r3, [r3, #19]
    c7e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c7e6:	b2db      	uxtb	r3, r3
    c7e8:	011b      	lsls	r3, r3, #4
    c7ea:	b2db      	uxtb	r3, r3
    c7ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c7f0:	b2da      	uxtb	r2, r3
    c7f2:	7cfb      	ldrb	r3, [r7, #19]
    c7f4:	4313      	orrs	r3, r2
    c7f6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c7f8:	7cfa      	ldrb	r2, [r7, #19]
    c7fa:	7efb      	ldrb	r3, [r7, #27]
    c7fc:	4619      	mov	r1, r3
    c7fe:	69f8      	ldr	r0, [r7, #28]
    c800:	4b2f      	ldr	r3, [pc, #188]	; (c8c0 <_usb_d_dev_ep_enable+0x200>)
    c802:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    c804:	68fb      	ldr	r3, [r7, #12]
    c806:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c80a:	697b      	ldr	r3, [r7, #20]
    c80c:	8a1b      	ldrh	r3, [r3, #16]
    c80e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c812:	697b      	ldr	r3, [r7, #20]
    c814:	8a1b      	ldrh	r3, [r3, #16]
    c816:	4618      	mov	r0, r3
    c818:	4b2b      	ldr	r3, [pc, #172]	; (c8c8 <_usb_d_dev_ep_enable+0x208>)
    c81a:	4798      	blx	r3
    c81c:	4603      	mov	r3, r0
    c81e:	071b      	lsls	r3, r3, #28
    c820:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c824:	432b      	orrs	r3, r5
    c826:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c828:	7efb      	ldrb	r3, [r7, #27]
    c82a:	2200      	movs	r2, #0
    c82c:	2101      	movs	r1, #1
    c82e:	4618      	mov	r0, r3
    c830:	4b27      	ldr	r3, [pc, #156]	; (c8d0 <_usb_d_dev_ep_enable+0x210>)
    c832:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c834:	7efb      	ldrb	r3, [r7, #27]
    c836:	2101      	movs	r1, #1
    c838:	4618      	mov	r0, r3
    c83a:	4b26      	ldr	r3, [pc, #152]	; (c8d4 <_usb_d_dev_ep_enable+0x214>)
    c83c:	4798      	blx	r3
    c83e:	e033      	b.n	c8a8 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c840:	7cfb      	ldrb	r3, [r7, #19]
    c842:	f003 0307 	and.w	r3, r3, #7
    c846:	2b00      	cmp	r3, #0
    c848:	d002      	beq.n	c850 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    c84a:	f06f 0313 	mvn.w	r3, #19
    c84e:	e02c      	b.n	c8aa <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c850:	697b      	ldr	r3, [r7, #20]
    c852:	7cdb      	ldrb	r3, [r3, #19]
    c854:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c858:	b2db      	uxtb	r3, r3
    c85a:	461a      	mov	r2, r3
    c85c:	7cfb      	ldrb	r3, [r7, #19]
    c85e:	4313      	orrs	r3, r2
    c860:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c862:	7cfa      	ldrb	r2, [r7, #19]
    c864:	7efb      	ldrb	r3, [r7, #27]
    c866:	4619      	mov	r1, r3
    c868:	69f8      	ldr	r0, [r7, #28]
    c86a:	4b15      	ldr	r3, [pc, #84]	; (c8c0 <_usb_d_dev_ep_enable+0x200>)
    c86c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c86e:	697b      	ldr	r3, [r7, #20]
    c870:	8a1b      	ldrh	r3, [r3, #16]
    c872:	039b      	lsls	r3, r3, #14
    c874:	4c13      	ldr	r4, [pc, #76]	; (c8c4 <_usb_d_dev_ep_enable+0x204>)
    c876:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c878:	697b      	ldr	r3, [r7, #20]
    c87a:	8a1b      	ldrh	r3, [r3, #16]
    c87c:	4618      	mov	r0, r3
    c87e:	4b12      	ldr	r3, [pc, #72]	; (c8c8 <_usb_d_dev_ep_enable+0x208>)
    c880:	4798      	blx	r3
    c882:	4603      	mov	r3, r0
    c884:	071b      	lsls	r3, r3, #28
    c886:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c88a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c88e:	68fb      	ldr	r3, [r7, #12]
    c890:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c892:	7efb      	ldrb	r3, [r7, #27]
    c894:	2200      	movs	r2, #0
    c896:	2100      	movs	r1, #0
    c898:	4618      	mov	r0, r3
    c89a:	4b0c      	ldr	r3, [pc, #48]	; (c8cc <_usb_d_dev_ep_enable+0x20c>)
    c89c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    c89e:	7efb      	ldrb	r3, [r7, #27]
    c8a0:	2100      	movs	r1, #0
    c8a2:	4618      	mov	r0, r3
    c8a4:	4b0b      	ldr	r3, [pc, #44]	; (c8d4 <_usb_d_dev_ep_enable+0x214>)
    c8a6:	4798      	blx	r3
	}

	return USB_OK;
    c8a8:	2300      	movs	r3, #0
}
    c8aa:	4618      	mov	r0, r3
    c8ac:	3720      	adds	r7, #32
    c8ae:	46bd      	mov	sp, r7
    c8b0:	bdb0      	pop	{r4, r5, r7, pc}
    c8b2:	bf00      	nop
    c8b4:	0000b4d9 	.word	0x0000b4d9
    c8b8:	0000ab5f 	.word	0x0000ab5f
    c8bc:	20002168 	.word	0x20002168
    c8c0:	0000ab35 	.word	0x0000ab35
    c8c4:	0fffc000 	.word	0x0fffc000
    c8c8:	0000b475 	.word	0x0000b475
    c8cc:	0000b41d 	.word	0x0000b41d
    c8d0:	0000b3c5 	.word	0x0000b3c5
    c8d4:	0000b38d 	.word	0x0000b38d
    c8d8:	0000c431 	.word	0x0000c431

0000c8dc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    c8dc:	b580      	push	{r7, lr}
    c8de:	b084      	sub	sp, #16
    c8e0:	af00      	add	r7, sp, #0
    c8e2:	6078      	str	r0, [r7, #4]
    c8e4:	460b      	mov	r3, r1
    c8e6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	7c9b      	ldrb	r3, [r3, #18]
    c8ec:	f003 030f 	and.w	r3, r3, #15
    c8f0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    c8f2:	78fa      	ldrb	r2, [r7, #3]
    c8f4:	7bfb      	ldrb	r3, [r7, #15]
    c8f6:	4611      	mov	r1, r2
    c8f8:	4618      	mov	r0, r3
    c8fa:	4b03      	ldr	r3, [pc, #12]	; (c908 <_usb_d_dev_ep_stall_get+0x2c>)
    c8fc:	4798      	blx	r3
    c8fe:	4603      	mov	r3, r0
}
    c900:	4618      	mov	r0, r3
    c902:	3710      	adds	r7, #16
    c904:	46bd      	mov	sp, r7
    c906:	bd80      	pop	{r7, pc}
    c908:	0000afcd 	.word	0x0000afcd

0000c90c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    c90c:	b580      	push	{r7, lr}
    c90e:	b084      	sub	sp, #16
    c910:	af00      	add	r7, sp, #0
    c912:	6078      	str	r0, [r7, #4]
    c914:	460b      	mov	r3, r1
    c916:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c918:	687b      	ldr	r3, [r7, #4]
    c91a:	7c9b      	ldrb	r3, [r3, #18]
    c91c:	f003 030f 	and.w	r3, r3, #15
    c920:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    c922:	78f9      	ldrb	r1, [r7, #3]
    c924:	7bfb      	ldrb	r3, [r7, #15]
    c926:	2201      	movs	r2, #1
    c928:	4618      	mov	r0, r3
    c92a:	4b0a      	ldr	r3, [pc, #40]	; (c954 <_usb_d_dev_ep_stall_set+0x48>)
    c92c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c92e:	78fb      	ldrb	r3, [r7, #3]
    c930:	2220      	movs	r2, #32
    c932:	409a      	lsls	r2, r3
    c934:	7bfb      	ldrb	r3, [r7, #15]
    c936:	4611      	mov	r1, r2
    c938:	4618      	mov	r0, r3
    c93a:	4b07      	ldr	r3, [pc, #28]	; (c958 <_usb_d_dev_ep_stall_set+0x4c>)
    c93c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    c93e:	687a      	ldr	r2, [r7, #4]
    c940:	7cd3      	ldrb	r3, [r2, #19]
    c942:	f043 0308 	orr.w	r3, r3, #8
    c946:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    c948:	2300      	movs	r3, #0
}
    c94a:	4618      	mov	r0, r3
    c94c:	3710      	adds	r7, #16
    c94e:	46bd      	mov	sp, r7
    c950:	bd80      	pop	{r7, pc}
    c952:	bf00      	nop
    c954:	0000af75 	.word	0x0000af75
    c958:	0000aef5 	.word	0x0000aef5

0000c95c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    c95c:	b580      	push	{r7, lr}
    c95e:	b084      	sub	sp, #16
    c960:	af00      	add	r7, sp, #0
    c962:	6078      	str	r0, [r7, #4]
    c964:	460b      	mov	r3, r1
    c966:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	7c9b      	ldrb	r3, [r3, #18]
    c96c:	f003 030f 	and.w	r3, r3, #15
    c970:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    c972:	78fa      	ldrb	r2, [r7, #3]
    c974:	7bfb      	ldrb	r3, [r7, #15]
    c976:	4611      	mov	r1, r2
    c978:	4618      	mov	r0, r3
    c97a:	4b28      	ldr	r3, [pc, #160]	; (ca1c <_usb_d_dev_ep_stall_clr+0xc0>)
    c97c:	4798      	blx	r3
    c97e:	4603      	mov	r3, r0
    c980:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    c982:	7bbb      	ldrb	r3, [r7, #14]
    c984:	f083 0301 	eor.w	r3, r3, #1
    c988:	b2db      	uxtb	r3, r3
    c98a:	2b00      	cmp	r3, #0
    c98c:	d001      	beq.n	c992 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    c98e:	2300      	movs	r3, #0
    c990:	e040      	b.n	ca14 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    c992:	78f9      	ldrb	r1, [r7, #3]
    c994:	7bfb      	ldrb	r3, [r7, #15]
    c996:	2200      	movs	r2, #0
    c998:	4618      	mov	r0, r3
    c99a:	4b21      	ldr	r3, [pc, #132]	; (ca20 <_usb_d_dev_ep_stall_clr+0xc4>)
    c99c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c99e:	78fb      	ldrb	r3, [r7, #3]
    c9a0:	2220      	movs	r2, #32
    c9a2:	409a      	lsls	r2, r3
    c9a4:	7bfb      	ldrb	r3, [r7, #15]
    c9a6:	4611      	mov	r1, r2
    c9a8:	4618      	mov	r0, r3
    c9aa:	4b1e      	ldr	r3, [pc, #120]	; (ca24 <_usb_d_dev_ep_stall_clr+0xc8>)
    c9ac:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c9ae:	78fa      	ldrb	r2, [r7, #3]
    c9b0:	7bfb      	ldrb	r3, [r7, #15]
    c9b2:	4611      	mov	r1, r2
    c9b4:	4618      	mov	r0, r3
    c9b6:	4b1c      	ldr	r3, [pc, #112]	; (ca28 <_usb_d_dev_ep_stall_clr+0xcc>)
    c9b8:	4798      	blx	r3
    c9ba:	4603      	mov	r3, r0
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d00b      	beq.n	c9d8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    c9c0:	78fa      	ldrb	r2, [r7, #3]
    c9c2:	7bfb      	ldrb	r3, [r7, #15]
    c9c4:	4611      	mov	r1, r2
    c9c6:	4618      	mov	r0, r3
    c9c8:	4b18      	ldr	r3, [pc, #96]	; (ca2c <_usb_d_dev_ep_stall_clr+0xd0>)
    c9ca:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    c9cc:	78f9      	ldrb	r1, [r7, #3]
    c9ce:	7bfb      	ldrb	r3, [r7, #15]
    c9d0:	2200      	movs	r2, #0
    c9d2:	4618      	mov	r0, r3
    c9d4:	4b16      	ldr	r3, [pc, #88]	; (ca30 <_usb_d_dev_ep_stall_clr+0xd4>)
    c9d6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c9d8:	687b      	ldr	r3, [r7, #4]
    c9da:	7cdb      	ldrb	r3, [r3, #19]
    c9dc:	f003 0307 	and.w	r3, r3, #7
    c9e0:	b2db      	uxtb	r3, r3
    c9e2:	2b01      	cmp	r3, #1
    c9e4:	d110      	bne.n	ca08 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c9e6:	7bfb      	ldrb	r3, [r7, #15]
    c9e8:	4619      	mov	r1, r3
    c9ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c9ee:	4b11      	ldr	r3, [pc, #68]	; (ca34 <_usb_d_dev_ep_stall_clr+0xd8>)
    c9f0:	4798      	blx	r3
    c9f2:	4603      	mov	r3, r0
    c9f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c9f8:	2b00      	cmp	r3, #0
    c9fa:	d10a      	bne.n	ca12 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    c9fc:	687a      	ldr	r2, [r7, #4]
    c9fe:	7cd3      	ldrb	r3, [r2, #19]
    ca00:	f36f 03c3 	bfc	r3, #3, #1
    ca04:	74d3      	strb	r3, [r2, #19]
    ca06:	e004      	b.n	ca12 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    ca08:	687a      	ldr	r2, [r7, #4]
    ca0a:	7cd3      	ldrb	r3, [r2, #19]
    ca0c:	f36f 03c3 	bfc	r3, #3, #1
    ca10:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    ca12:	2300      	movs	r3, #0
}
    ca14:	4618      	mov	r0, r3
    ca16:	3710      	adds	r7, #16
    ca18:	46bd      	mov	sp, r7
    ca1a:	bd80      	pop	{r7, pc}
    ca1c:	0000afcd 	.word	0x0000afcd
    ca20:	0000af75 	.word	0x0000af75
    ca24:	0000af1d 	.word	0x0000af1d
    ca28:	0000b011 	.word	0x0000b011
    ca2c:	0000b055 	.word	0x0000b055
    ca30:	0000b141 	.word	0x0000b141
    ca34:	0000a9fd 	.word	0x0000a9fd

0000ca38 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    ca38:	b580      	push	{r7, lr}
    ca3a:	b086      	sub	sp, #24
    ca3c:	af00      	add	r7, sp, #0
    ca3e:	4603      	mov	r3, r0
    ca40:	460a      	mov	r2, r1
    ca42:	71fb      	strb	r3, [r7, #7]
    ca44:	4613      	mov	r3, r2
    ca46:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    ca48:	79fb      	ldrb	r3, [r7, #7]
    ca4a:	f003 030f 	and.w	r3, r3, #15
    ca4e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ca50:	79fb      	ldrb	r3, [r7, #7]
    ca52:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ca56:	2b00      	cmp	r3, #0
    ca58:	bf14      	ite	ne
    ca5a:	2301      	movne	r3, #1
    ca5c:	2300      	moveq	r3, #0
    ca5e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ca60:	7cba      	ldrb	r2, [r7, #18]
    ca62:	7cfb      	ldrb	r3, [r7, #19]
    ca64:	4611      	mov	r1, r2
    ca66:	4618      	mov	r0, r3
    ca68:	4b13      	ldr	r3, [pc, #76]	; (cab8 <_usb_d_dev_ep_stall+0x80>)
    ca6a:	4798      	blx	r3
    ca6c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ca6e:	7cfb      	ldrb	r3, [r7, #19]
    ca70:	2b04      	cmp	r3, #4
    ca72:	d902      	bls.n	ca7a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    ca74:	f06f 0311 	mvn.w	r3, #17
    ca78:	e01a      	b.n	cab0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    ca7a:	79bb      	ldrb	r3, [r7, #6]
    ca7c:	2b01      	cmp	r3, #1
    ca7e:	d106      	bne.n	ca8e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    ca80:	7cbb      	ldrb	r3, [r7, #18]
    ca82:	4619      	mov	r1, r3
    ca84:	68f8      	ldr	r0, [r7, #12]
    ca86:	4b0d      	ldr	r3, [pc, #52]	; (cabc <_usb_d_dev_ep_stall+0x84>)
    ca88:	4798      	blx	r3
    ca8a:	6178      	str	r0, [r7, #20]
    ca8c:	e00f      	b.n	caae <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    ca8e:	79bb      	ldrb	r3, [r7, #6]
    ca90:	2b00      	cmp	r3, #0
    ca92:	d106      	bne.n	caa2 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ca94:	7cbb      	ldrb	r3, [r7, #18]
    ca96:	4619      	mov	r1, r3
    ca98:	68f8      	ldr	r0, [r7, #12]
    ca9a:	4b09      	ldr	r3, [pc, #36]	; (cac0 <_usb_d_dev_ep_stall+0x88>)
    ca9c:	4798      	blx	r3
    ca9e:	6178      	str	r0, [r7, #20]
    caa0:	e005      	b.n	caae <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    caa2:	7cbb      	ldrb	r3, [r7, #18]
    caa4:	4619      	mov	r1, r3
    caa6:	68f8      	ldr	r0, [r7, #12]
    caa8:	4b06      	ldr	r3, [pc, #24]	; (cac4 <_usb_d_dev_ep_stall+0x8c>)
    caaa:	4798      	blx	r3
    caac:	6178      	str	r0, [r7, #20]
	}
	return rc;
    caae:	697b      	ldr	r3, [r7, #20]
}
    cab0:	4618      	mov	r0, r3
    cab2:	3718      	adds	r7, #24
    cab4:	46bd      	mov	sp, r7
    cab6:	bd80      	pop	{r7, pc}
    cab8:	0000b4d9 	.word	0x0000b4d9
    cabc:	0000c90d 	.word	0x0000c90d
    cac0:	0000c95d 	.word	0x0000c95d
    cac4:	0000c8dd 	.word	0x0000c8dd

0000cac8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    cac8:	b580      	push	{r7, lr}
    caca:	b082      	sub	sp, #8
    cacc:	af00      	add	r7, sp, #0
    cace:	6078      	str	r0, [r7, #4]
    cad0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    cad2:	687b      	ldr	r3, [r7, #4]
    cad4:	7c9b      	ldrb	r3, [r3, #18]
    cad6:	2bff      	cmp	r3, #255	; 0xff
    cad8:	d014      	beq.n	cb04 <_usb_d_dev_trans_done+0x3c>
    cada:	687b      	ldr	r3, [r7, #4]
    cadc:	7cdb      	ldrb	r3, [r3, #19]
    cade:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cae2:	b2db      	uxtb	r3, r3
    cae4:	2b00      	cmp	r3, #0
    cae6:	d00d      	beq.n	cb04 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    cae8:	687a      	ldr	r2, [r7, #4]
    caea:	7cd3      	ldrb	r3, [r2, #19]
    caec:	f36f 1386 	bfc	r3, #6, #1
    caf0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    caf2:	4b06      	ldr	r3, [pc, #24]	; (cb0c <_usb_d_dev_trans_done+0x44>)
    caf4:	691b      	ldr	r3, [r3, #16]
    caf6:	687a      	ldr	r2, [r7, #4]
    caf8:	7c90      	ldrb	r0, [r2, #18]
    cafa:	687a      	ldr	r2, [r7, #4]
    cafc:	6892      	ldr	r2, [r2, #8]
    cafe:	6839      	ldr	r1, [r7, #0]
    cb00:	4798      	blx	r3
    cb02:	e000      	b.n	cb06 <_usb_d_dev_trans_done+0x3e>
		return;
    cb04:	bf00      	nop
}
    cb06:	3708      	adds	r7, #8
    cb08:	46bd      	mov	sp, r7
    cb0a:	bd80      	pop	{r7, pc}
    cb0c:	200020a0 	.word	0x200020a0

0000cb10 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    cb10:	b580      	push	{r7, lr}
    cb12:	b086      	sub	sp, #24
    cb14:	af00      	add	r7, sp, #0
    cb16:	60f8      	str	r0, [r7, #12]
    cb18:	460b      	mov	r3, r1
    cb1a:	607a      	str	r2, [r7, #4]
    cb1c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cb1e:	68fb      	ldr	r3, [r7, #12]
    cb20:	7c9b      	ldrb	r3, [r3, #18]
    cb22:	f003 030f 	and.w	r3, r3, #15
    cb26:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    cb28:	4b1f      	ldr	r3, [pc, #124]	; (cba8 <_usb_d_dev_trans_stop+0x98>)
    cb2a:	881b      	ldrh	r3, [r3, #0]
    cb2c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    cb2e:	68fb      	ldr	r3, [r7, #12]
    cb30:	7c9b      	ldrb	r3, [r3, #18]
    cb32:	2bff      	cmp	r3, #255	; 0xff
    cb34:	d033      	beq.n	cb9e <_usb_d_dev_trans_stop+0x8e>
    cb36:	68fb      	ldr	r3, [r7, #12]
    cb38:	7cdb      	ldrb	r3, [r3, #19]
    cb3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cb3e:	b2db      	uxtb	r3, r3
    cb40:	2b00      	cmp	r3, #0
    cb42:	d02c      	beq.n	cb9e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    cb44:	7afb      	ldrb	r3, [r7, #11]
    cb46:	2b00      	cmp	r3, #0
    cb48:	d006      	beq.n	cb58 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cb4a:	7dfb      	ldrb	r3, [r7, #23]
    cb4c:	2200      	movs	r2, #0
    cb4e:	2101      	movs	r1, #1
    cb50:	4618      	mov	r0, r3
    cb52:	4b16      	ldr	r3, [pc, #88]	; (cbac <_usb_d_dev_trans_stop+0x9c>)
    cb54:	4798      	blx	r3
    cb56:	e005      	b.n	cb64 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    cb58:	7dfb      	ldrb	r3, [r7, #23]
    cb5a:	2200      	movs	r2, #0
    cb5c:	2100      	movs	r1, #0
    cb5e:	4618      	mov	r0, r3
    cb60:	4b13      	ldr	r3, [pc, #76]	; (cbb0 <_usb_d_dev_trans_stop+0xa0>)
    cb62:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    cb64:	7afb      	ldrb	r3, [r7, #11]
    cb66:	f107 0218 	add.w	r2, r7, #24
    cb6a:	4413      	add	r3, r2
    cb6c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    cb70:	461a      	mov	r2, r3
    cb72:	7dfb      	ldrb	r3, [r7, #23]
    cb74:	4611      	mov	r1, r2
    cb76:	4618      	mov	r0, r3
    cb78:	4b0e      	ldr	r3, [pc, #56]	; (cbb4 <_usb_d_dev_trans_stop+0xa4>)
    cb7a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    cb7c:	7afb      	ldrb	r3, [r7, #11]
    cb7e:	f107 0218 	add.w	r2, r7, #24
    cb82:	4413      	add	r3, r2
    cb84:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    cb88:	461a      	mov	r2, r3
    cb8a:	7dfb      	ldrb	r3, [r7, #23]
    cb8c:	4611      	mov	r1, r2
    cb8e:	4618      	mov	r0, r3
    cb90:	4b09      	ldr	r3, [pc, #36]	; (cbb8 <_usb_d_dev_trans_stop+0xa8>)
    cb92:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    cb94:	6879      	ldr	r1, [r7, #4]
    cb96:	68f8      	ldr	r0, [r7, #12]
    cb98:	4b08      	ldr	r3, [pc, #32]	; (cbbc <_usb_d_dev_trans_stop+0xac>)
    cb9a:	4798      	blx	r3
    cb9c:	e000      	b.n	cba0 <_usb_d_dev_trans_stop+0x90>
		return;
    cb9e:	bf00      	nop
}
    cba0:	3718      	adds	r7, #24
    cba2:	46bd      	mov	sp, r7
    cba4:	bd80      	pop	{r7, pc}
    cba6:	bf00      	nop
    cba8:	00010378 	.word	0x00010378
    cbac:	0000b3c5 	.word	0x0000b3c5
    cbb0:	0000b41d 	.word	0x0000b41d
    cbb4:	0000aecd 	.word	0x0000aecd
    cbb8:	0000af1d 	.word	0x0000af1d
    cbbc:	0000cac9 	.word	0x0000cac9

0000cbc0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    cbc0:	b580      	push	{r7, lr}
    cbc2:	b086      	sub	sp, #24
    cbc4:	af00      	add	r7, sp, #0
    cbc6:	4603      	mov	r3, r0
    cbc8:	6039      	str	r1, [r7, #0]
    cbca:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    cbcc:	79fb      	ldrb	r3, [r7, #7]
    cbce:	f003 030f 	and.w	r3, r3, #15
    cbd2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    cbd4:	7dfb      	ldrb	r3, [r7, #23]
    cbd6:	015b      	lsls	r3, r3, #5
    cbd8:	4a1e      	ldr	r2, [pc, #120]	; (cc54 <_usb_d_dev_ep_read_req+0x94>)
    cbda:	4413      	add	r3, r2
    cbdc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    cbde:	693b      	ldr	r3, [r7, #16]
    cbe0:	681b      	ldr	r3, [r3, #0]
    cbe2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    cbe4:	693b      	ldr	r3, [r7, #16]
    cbe6:	685b      	ldr	r3, [r3, #4]
    cbe8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cbec:	b29b      	uxth	r3, r3
    cbee:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    cbf0:	7dfb      	ldrb	r3, [r7, #23]
    cbf2:	2b04      	cmp	r3, #4
    cbf4:	d802      	bhi.n	cbfc <_usb_d_dev_ep_read_req+0x3c>
    cbf6:	683b      	ldr	r3, [r7, #0]
    cbf8:	2b00      	cmp	r3, #0
    cbfa:	d102      	bne.n	cc02 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    cbfc:	f06f 0311 	mvn.w	r3, #17
    cc00:	e023      	b.n	cc4a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    cc02:	7dfb      	ldrb	r3, [r7, #23]
    cc04:	4618      	mov	r0, r3
    cc06:	4b14      	ldr	r3, [pc, #80]	; (cc58 <_usb_d_dev_ep_read_req+0x98>)
    cc08:	4798      	blx	r3
    cc0a:	4603      	mov	r3, r0
    cc0c:	f083 0301 	eor.w	r3, r3, #1
    cc10:	b2db      	uxtb	r3, r3
    cc12:	2b00      	cmp	r3, #0
    cc14:	d002      	beq.n	cc1c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    cc16:	f06f 0312 	mvn.w	r3, #18
    cc1a:	e016      	b.n	cc4a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    cc1c:	7dfb      	ldrb	r3, [r7, #23]
    cc1e:	4618      	mov	r0, r3
    cc20:	4b0e      	ldr	r3, [pc, #56]	; (cc5c <_usb_d_dev_ep_read_req+0x9c>)
    cc22:	4798      	blx	r3
    cc24:	4603      	mov	r3, r0
    cc26:	f083 0301 	eor.w	r3, r3, #1
    cc2a:	b2db      	uxtb	r3, r3
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d001      	beq.n	cc34 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    cc30:	2300      	movs	r3, #0
    cc32:	e00a      	b.n	cc4a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    cc34:	68fb      	ldr	r3, [r7, #12]
    cc36:	2208      	movs	r2, #8
    cc38:	4619      	mov	r1, r3
    cc3a:	6838      	ldr	r0, [r7, #0]
    cc3c:	4b08      	ldr	r3, [pc, #32]	; (cc60 <_usb_d_dev_ep_read_req+0xa0>)
    cc3e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    cc40:	7dfb      	ldrb	r3, [r7, #23]
    cc42:	4618      	mov	r0, r3
    cc44:	4b07      	ldr	r3, [pc, #28]	; (cc64 <_usb_d_dev_ep_read_req+0xa4>)
    cc46:	4798      	blx	r3

	return bytes;
    cc48:	897b      	ldrh	r3, [r7, #10]
}
    cc4a:	4618      	mov	r0, r3
    cc4c:	3718      	adds	r7, #24
    cc4e:	46bd      	mov	sp, r7
    cc50:	bd80      	pop	{r7, pc}
    cc52:	bf00      	nop
    cc54:	20002168 	.word	0x20002168
    cc58:	0000af45 	.word	0x0000af45
    cc5c:	0000b0f1 	.word	0x0000b0f1
    cc60:	0000f9f1 	.word	0x0000f9f1
    cc64:	0000b121 	.word	0x0000b121

0000cc68 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    cc68:	b580      	push	{r7, lr}
    cc6a:	b086      	sub	sp, #24
    cc6c:	af00      	add	r7, sp, #0
    cc6e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    cc70:	687b      	ldr	r3, [r7, #4]
    cc72:	7a1b      	ldrb	r3, [r3, #8]
    cc74:	f003 030f 	and.w	r3, r3, #15
    cc78:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    cc7a:	687b      	ldr	r3, [r7, #4]
    cc7c:	7a1b      	ldrb	r3, [r3, #8]
    cc7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cc82:	2b00      	cmp	r3, #0
    cc84:	bf14      	ite	ne
    cc86:	2301      	movne	r3, #1
    cc88:	2300      	moveq	r3, #0
    cc8a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cc8c:	7d7a      	ldrb	r2, [r7, #21]
    cc8e:	7dbb      	ldrb	r3, [r7, #22]
    cc90:	4611      	mov	r1, r2
    cc92:	4618      	mov	r0, r3
    cc94:	4b5f      	ldr	r3, [pc, #380]	; (ce14 <_usb_d_dev_ep_trans+0x1ac>)
    cc96:	4798      	blx	r3
    cc98:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    cc9a:	693b      	ldr	r3, [r7, #16]
    cc9c:	8a1b      	ldrh	r3, [r3, #16]
    cc9e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    cca2:	4293      	cmp	r3, r2
    cca4:	d004      	beq.n	ccb0 <_usb_d_dev_ep_trans+0x48>
    cca6:	693b      	ldr	r3, [r7, #16]
    cca8:	8a1b      	ldrh	r3, [r3, #16]
    ccaa:	3b01      	subs	r3, #1
    ccac:	b29b      	uxth	r3, r3
    ccae:	e001      	b.n	ccb4 <_usb_d_dev_ep_trans+0x4c>
    ccb0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ccb4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    ccb6:	687b      	ldr	r3, [r7, #4]
    ccb8:	685a      	ldr	r2, [r3, #4]
    ccba:	89fb      	ldrh	r3, [r7, #14]
    ccbc:	4013      	ands	r3, r2
    ccbe:	2b00      	cmp	r3, #0
    ccc0:	bf14      	ite	ne
    ccc2:	2301      	movne	r3, #1
    ccc4:	2300      	moveq	r3, #0
    ccc6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    ccc8:	2300      	movs	r3, #0
    ccca:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    cccc:	7dbb      	ldrb	r3, [r7, #22]
    ccce:	2b04      	cmp	r3, #4
    ccd0:	d902      	bls.n	ccd8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    ccd2:	f06f 0311 	mvn.w	r3, #17
    ccd6:	e098      	b.n	ce0a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    ccd8:	687b      	ldr	r3, [r7, #4]
    ccda:	681b      	ldr	r3, [r3, #0]
    ccdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    cce0:	d31a      	bcc.n	cd18 <_usb_d_dev_ep_trans+0xb0>
    cce2:	687b      	ldr	r3, [r7, #4]
    cce4:	681b      	ldr	r3, [r3, #0]
    cce6:	461a      	mov	r2, r3
    cce8:	687b      	ldr	r3, [r7, #4]
    ccea:	685b      	ldr	r3, [r3, #4]
    ccec:	4413      	add	r3, r2
    ccee:	4a4a      	ldr	r2, [pc, #296]	; (ce18 <_usb_d_dev_ep_trans+0x1b0>)
    ccf0:	4293      	cmp	r3, r2
    ccf2:	d811      	bhi.n	cd18 <_usb_d_dev_ep_trans+0xb0>
    ccf4:	687b      	ldr	r3, [r7, #4]
    ccf6:	681b      	ldr	r3, [r3, #0]
    ccf8:	f003 0303 	and.w	r3, r3, #3
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	d10b      	bne.n	cd18 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    cd00:	7d7b      	ldrb	r3, [r7, #21]
    cd02:	f083 0301 	eor.w	r3, r3, #1
    cd06:	b2db      	uxtb	r3, r3
    cd08:	2b00      	cmp	r3, #0
    cd0a:	d00e      	beq.n	cd2a <_usb_d_dev_ep_trans+0xc2>
    cd0c:	687b      	ldr	r3, [r7, #4]
    cd0e:	685b      	ldr	r3, [r3, #4]
    cd10:	693a      	ldr	r2, [r7, #16]
    cd12:	8a12      	ldrh	r2, [r2, #16]
    cd14:	4293      	cmp	r3, r2
    cd16:	d208      	bcs.n	cd2a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    cd18:	693b      	ldr	r3, [r7, #16]
    cd1a:	68db      	ldr	r3, [r3, #12]
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d102      	bne.n	cd26 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    cd20:	f06f 0312 	mvn.w	r3, #18
    cd24:	e071      	b.n	ce0a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    cd26:	2301      	movs	r3, #1
    cd28:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    cd2a:	7d7b      	ldrb	r3, [r7, #21]
    cd2c:	f083 0301 	eor.w	r3, r3, #1
    cd30:	b2db      	uxtb	r3, r3
    cd32:	2b00      	cmp	r3, #0
    cd34:	d009      	beq.n	cd4a <_usb_d_dev_ep_trans+0xe2>
    cd36:	7b7b      	ldrb	r3, [r7, #13]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d006      	beq.n	cd4a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    cd3c:	693b      	ldr	r3, [r7, #16]
    cd3e:	68db      	ldr	r3, [r3, #12]
    cd40:	2b00      	cmp	r3, #0
    cd42:	d102      	bne.n	cd4a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    cd44:	f06f 0311 	mvn.w	r3, #17
    cd48:	e05f      	b.n	ce0a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    cd4a:	693b      	ldr	r3, [r7, #16]
    cd4c:	7cdb      	ldrb	r3, [r3, #19]
    cd4e:	f003 0308 	and.w	r3, r3, #8
    cd52:	b2db      	uxtb	r3, r3
    cd54:	2b00      	cmp	r3, #0
    cd56:	d001      	beq.n	cd5c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    cd58:	2302      	movs	r3, #2
    cd5a:	e056      	b.n	ce0a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    cd5c:	f107 0308 	add.w	r3, r7, #8
    cd60:	4618      	mov	r0, r3
    cd62:	4b2e      	ldr	r3, [pc, #184]	; (ce1c <_usb_d_dev_ep_trans+0x1b4>)
    cd64:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    cd66:	693b      	ldr	r3, [r7, #16]
    cd68:	7cdb      	ldrb	r3, [r3, #19]
    cd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cd6e:	b2db      	uxtb	r3, r3
    cd70:	2b00      	cmp	r3, #0
    cd72:	d006      	beq.n	cd82 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    cd74:	f107 0308 	add.w	r3, r7, #8
    cd78:	4618      	mov	r0, r3
    cd7a:	4b29      	ldr	r3, [pc, #164]	; (ce20 <_usb_d_dev_ep_trans+0x1b8>)
    cd7c:	4798      	blx	r3
		return USB_BUSY;
    cd7e:	2301      	movs	r3, #1
    cd80:	e043      	b.n	ce0a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    cd82:	693a      	ldr	r2, [r7, #16]
    cd84:	7cd3      	ldrb	r3, [r2, #19]
    cd86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cd8a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    cd8c:	f107 0308 	add.w	r3, r7, #8
    cd90:	4618      	mov	r0, r3
    cd92:	4b23      	ldr	r3, [pc, #140]	; (ce20 <_usb_d_dev_ep_trans+0x1b8>)
    cd94:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    cd96:	687b      	ldr	r3, [r7, #4]
    cd98:	681a      	ldr	r2, [r3, #0]
    cd9a:	693b      	ldr	r3, [r7, #16]
    cd9c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    cd9e:	687b      	ldr	r3, [r7, #4]
    cda0:	685a      	ldr	r2, [r3, #4]
    cda2:	693b      	ldr	r3, [r7, #16]
    cda4:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    cda6:	693b      	ldr	r3, [r7, #16]
    cda8:	2200      	movs	r2, #0
    cdaa:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    cdac:	693a      	ldr	r2, [r7, #16]
    cdae:	7cd3      	ldrb	r3, [r2, #19]
    cdb0:	7d79      	ldrb	r1, [r7, #21]
    cdb2:	f361 13c7 	bfi	r3, r1, #7, #1
    cdb6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    cdb8:	693a      	ldr	r2, [r7, #16]
    cdba:	7cd3      	ldrb	r3, [r2, #19]
    cdbc:	7df9      	ldrb	r1, [r7, #23]
    cdbe:	f361 1345 	bfi	r3, r1, #5, #1
    cdc2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    cdc4:	687b      	ldr	r3, [r7, #4]
    cdc6:	7a5b      	ldrb	r3, [r3, #9]
    cdc8:	2b00      	cmp	r3, #0
    cdca:	d007      	beq.n	cddc <_usb_d_dev_ep_trans+0x174>
    cdcc:	7b7b      	ldrb	r3, [r7, #13]
    cdce:	f083 0301 	eor.w	r3, r3, #1
    cdd2:	b2db      	uxtb	r3, r3
    cdd4:	2b00      	cmp	r3, #0
    cdd6:	d001      	beq.n	cddc <_usb_d_dev_ep_trans+0x174>
    cdd8:	2301      	movs	r3, #1
    cdda:	e000      	b.n	cdde <_usb_d_dev_ep_trans+0x176>
    cddc:	2300      	movs	r3, #0
    cdde:	b2db      	uxtb	r3, r3
    cde0:	f003 0301 	and.w	r3, r3, #1
    cde4:	b2d9      	uxtb	r1, r3
    cde6:	693a      	ldr	r2, [r7, #16]
    cde8:	7cd3      	ldrb	r3, [r2, #19]
    cdea:	f361 1304 	bfi	r3, r1, #4, #1
    cdee:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    cdf0:	7d7b      	ldrb	r3, [r7, #21]
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	d004      	beq.n	ce00 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    cdf6:	2100      	movs	r1, #0
    cdf8:	6938      	ldr	r0, [r7, #16]
    cdfa:	4b0a      	ldr	r3, [pc, #40]	; (ce24 <_usb_d_dev_ep_trans+0x1bc>)
    cdfc:	4798      	blx	r3
    cdfe:	e003      	b.n	ce08 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    ce00:	2100      	movs	r1, #0
    ce02:	6938      	ldr	r0, [r7, #16]
    ce04:	4b08      	ldr	r3, [pc, #32]	; (ce28 <_usb_d_dev_ep_trans+0x1c0>)
    ce06:	4798      	blx	r3
	}

	return ERR_NONE;
    ce08:	2300      	movs	r3, #0
}
    ce0a:	4618      	mov	r0, r3
    ce0c:	3718      	adds	r7, #24
    ce0e:	46bd      	mov	sp, r7
    ce10:	bd80      	pop	{r7, pc}
    ce12:	bf00      	nop
    ce14:	0000b4d9 	.word	0x0000b4d9
    ce18:	20041fff 	.word	0x20041fff
    ce1c:	00003fb1 	.word	0x00003fb1
    ce20:	00003fd7 	.word	0x00003fd7
    ce24:	0000b7a1 	.word	0x0000b7a1
    ce28:	0000b9b9 	.word	0x0000b9b9

0000ce2c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    ce2c:	b580      	push	{r7, lr}
    ce2e:	b084      	sub	sp, #16
    ce30:	af00      	add	r7, sp, #0
    ce32:	4603      	mov	r3, r0
    ce34:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    ce36:	79fb      	ldrb	r3, [r7, #7]
    ce38:	f003 030f 	and.w	r3, r3, #15
    ce3c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    ce3e:	79fb      	ldrb	r3, [r7, #7]
    ce40:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ce44:	2b00      	cmp	r3, #0
    ce46:	bf14      	ite	ne
    ce48:	2301      	movne	r3, #1
    ce4a:	2300      	moveq	r3, #0
    ce4c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ce4e:	7bba      	ldrb	r2, [r7, #14]
    ce50:	7bfb      	ldrb	r3, [r7, #15]
    ce52:	4611      	mov	r1, r2
    ce54:	4618      	mov	r0, r3
    ce56:	4b08      	ldr	r3, [pc, #32]	; (ce78 <_usb_d_dev_ep_abort+0x4c>)
    ce58:	4798      	blx	r3
    ce5a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    ce5c:	7bfb      	ldrb	r3, [r7, #15]
    ce5e:	2b04      	cmp	r3, #4
    ce60:	d806      	bhi.n	ce70 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    ce62:	7bbb      	ldrb	r3, [r7, #14]
    ce64:	2202      	movs	r2, #2
    ce66:	4619      	mov	r1, r3
    ce68:	68b8      	ldr	r0, [r7, #8]
    ce6a:	4b04      	ldr	r3, [pc, #16]	; (ce7c <_usb_d_dev_ep_abort+0x50>)
    ce6c:	4798      	blx	r3
    ce6e:	e000      	b.n	ce72 <_usb_d_dev_ep_abort+0x46>
		return;
    ce70:	bf00      	nop
}
    ce72:	3710      	adds	r7, #16
    ce74:	46bd      	mov	sp, r7
    ce76:	bd80      	pop	{r7, pc}
    ce78:	0000b4d9 	.word	0x0000b4d9
    ce7c:	0000cb11 	.word	0x0000cb11

0000ce80 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ce80:	b480      	push	{r7}
    ce82:	b085      	sub	sp, #20
    ce84:	af00      	add	r7, sp, #0
    ce86:	4603      	mov	r3, r0
    ce88:	6039      	str	r1, [r7, #0]
    ce8a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ce8c:	683b      	ldr	r3, [r7, #0]
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d001      	beq.n	ce96 <_usb_d_dev_register_callback+0x16>
    ce92:	683b      	ldr	r3, [r7, #0]
    ce94:	e000      	b.n	ce98 <_usb_d_dev_register_callback+0x18>
    ce96:	4b0a      	ldr	r3, [pc, #40]	; (cec0 <_usb_d_dev_register_callback+0x40>)
    ce98:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    ce9a:	79fb      	ldrb	r3, [r7, #7]
    ce9c:	2b01      	cmp	r3, #1
    ce9e:	d103      	bne.n	cea8 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    cea0:	4a08      	ldr	r2, [pc, #32]	; (cec4 <_usb_d_dev_register_callback+0x44>)
    cea2:	68fb      	ldr	r3, [r7, #12]
    cea4:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    cea6:	e005      	b.n	ceb4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    cea8:	79fb      	ldrb	r3, [r7, #7]
    ceaa:	2b00      	cmp	r3, #0
    ceac:	d102      	bne.n	ceb4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ceae:	4a05      	ldr	r2, [pc, #20]	; (cec4 <_usb_d_dev_register_callback+0x44>)
    ceb0:	68fb      	ldr	r3, [r7, #12]
    ceb2:	6013      	str	r3, [r2, #0]
}
    ceb4:	bf00      	nop
    ceb6:	3714      	adds	r7, #20
    ceb8:	46bd      	mov	sp, r7
    ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
    cebe:	4770      	bx	lr
    cec0:	0000ad61 	.word	0x0000ad61
    cec4:	200020a0 	.word	0x200020a0

0000cec8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    cec8:	b480      	push	{r7}
    ceca:	b085      	sub	sp, #20
    cecc:	af00      	add	r7, sp, #0
    cece:	4603      	mov	r3, r0
    ced0:	6039      	str	r1, [r7, #0]
    ced2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ced4:	683b      	ldr	r3, [r7, #0]
    ced6:	2b00      	cmp	r3, #0
    ced8:	d001      	beq.n	cede <_usb_d_dev_register_ep_callback+0x16>
    ceda:	683b      	ldr	r3, [r7, #0]
    cedc:	e000      	b.n	cee0 <_usb_d_dev_register_ep_callback+0x18>
    cede:	4b0e      	ldr	r3, [pc, #56]	; (cf18 <_usb_d_dev_register_ep_callback+0x50>)
    cee0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    cee2:	79fb      	ldrb	r3, [r7, #7]
    cee4:	2b00      	cmp	r3, #0
    cee6:	d103      	bne.n	cef0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    cee8:	4a0c      	ldr	r2, [pc, #48]	; (cf1c <_usb_d_dev_register_ep_callback+0x54>)
    ceea:	68fb      	ldr	r3, [r7, #12]
    ceec:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ceee:	e00c      	b.n	cf0a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    cef0:	79fb      	ldrb	r3, [r7, #7]
    cef2:	2b01      	cmp	r3, #1
    cef4:	d103      	bne.n	cefe <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    cef6:	4a09      	ldr	r2, [pc, #36]	; (cf1c <_usb_d_dev_register_ep_callback+0x54>)
    cef8:	68fb      	ldr	r3, [r7, #12]
    cefa:	60d3      	str	r3, [r2, #12]
}
    cefc:	e005      	b.n	cf0a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    cefe:	79fb      	ldrb	r3, [r7, #7]
    cf00:	2b02      	cmp	r3, #2
    cf02:	d102      	bne.n	cf0a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    cf04:	4a05      	ldr	r2, [pc, #20]	; (cf1c <_usb_d_dev_register_ep_callback+0x54>)
    cf06:	68fb      	ldr	r3, [r7, #12]
    cf08:	6113      	str	r3, [r2, #16]
}
    cf0a:	bf00      	nop
    cf0c:	3714      	adds	r7, #20
    cf0e:	46bd      	mov	sp, r7
    cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf14:	4770      	bx	lr
    cf16:	bf00      	nop
    cf18:	0000ad61 	.word	0x0000ad61
    cf1c:	200020a0 	.word	0x200020a0

0000cf20 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    cf20:	b580      	push	{r7, lr}
    cf22:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    cf24:	4b01      	ldr	r3, [pc, #4]	; (cf2c <USB_0_Handler+0xc>)
    cf26:	4798      	blx	r3
}
    cf28:	bf00      	nop
    cf2a:	bd80      	pop	{r7, pc}
    cf2c:	0000c191 	.word	0x0000c191

0000cf30 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    cf30:	b580      	push	{r7, lr}
    cf32:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    cf34:	4b01      	ldr	r3, [pc, #4]	; (cf3c <USB_1_Handler+0xc>)
    cf36:	4798      	blx	r3
}
    cf38:	bf00      	nop
    cf3a:	bd80      	pop	{r7, pc}
    cf3c:	0000c191 	.word	0x0000c191

0000cf40 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    cf40:	b580      	push	{r7, lr}
    cf42:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    cf44:	4b01      	ldr	r3, [pc, #4]	; (cf4c <USB_2_Handler+0xc>)
    cf46:	4798      	blx	r3
}
    cf48:	bf00      	nop
    cf4a:	bd80      	pop	{r7, pc}
    cf4c:	0000c191 	.word	0x0000c191

0000cf50 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    cf50:	b580      	push	{r7, lr}
    cf52:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    cf54:	4b01      	ldr	r3, [pc, #4]	; (cf5c <USB_3_Handler+0xc>)
    cf56:	4798      	blx	r3
}
    cf58:	bf00      	nop
    cf5a:	bd80      	pop	{r7, pc}
    cf5c:	0000c191 	.word	0x0000c191

0000cf60 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    cf60:	b480      	push	{r7}
    cf62:	b083      	sub	sp, #12
    cf64:	af00      	add	r7, sp, #0
    cf66:	6078      	str	r0, [r7, #4]
    cf68:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    cf6a:	bf00      	nop
    cf6c:	687b      	ldr	r3, [r7, #4]
    cf6e:	689a      	ldr	r2, [r3, #8]
    cf70:	683b      	ldr	r3, [r7, #0]
    cf72:	4013      	ands	r3, r2
    cf74:	2b00      	cmp	r3, #0
    cf76:	d1f9      	bne.n	cf6c <hri_wdt_wait_for_sync+0xc>
	};
}
    cf78:	bf00      	nop
    cf7a:	370c      	adds	r7, #12
    cf7c:	46bd      	mov	sp, r7
    cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf82:	4770      	bx	lr

0000cf84 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    cf84:	b580      	push	{r7, lr}
    cf86:	b084      	sub	sp, #16
    cf88:	af00      	add	r7, sp, #0
    cf8a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    cf8c:	210e      	movs	r1, #14
    cf8e:	6878      	ldr	r0, [r7, #4]
    cf90:	4b0a      	ldr	r3, [pc, #40]	; (cfbc <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    cf92:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    cf94:	687b      	ldr	r3, [r7, #4]
    cf96:	781b      	ldrb	r3, [r3, #0]
    cf98:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    cf9a:	7bfb      	ldrb	r3, [r7, #15]
    cf9c:	085b      	lsrs	r3, r3, #1
    cf9e:	b2db      	uxtb	r3, r3
    cfa0:	f003 0301 	and.w	r3, r3, #1
    cfa4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    cfa6:	7bfb      	ldrb	r3, [r7, #15]
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	bf14      	ite	ne
    cfac:	2301      	movne	r3, #1
    cfae:	2300      	moveq	r3, #0
    cfb0:	b2db      	uxtb	r3, r3
}
    cfb2:	4618      	mov	r0, r3
    cfb4:	3710      	adds	r7, #16
    cfb6:	46bd      	mov	sp, r7
    cfb8:	bd80      	pop	{r7, pc}
    cfba:	bf00      	nop
    cfbc:	0000cf61 	.word	0x0000cf61

0000cfc0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    cfc0:	b580      	push	{r7, lr}
    cfc2:	b082      	sub	sp, #8
    cfc4:	af00      	add	r7, sp, #0
    cfc6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    cfc8:	687b      	ldr	r3, [r7, #4]
    cfca:	781b      	ldrb	r3, [r3, #0]
    cfcc:	b2db      	uxtb	r3, r3
    cfce:	f023 0304 	bic.w	r3, r3, #4
    cfd2:	b2da      	uxtb	r2, r3
    cfd4:	687b      	ldr	r3, [r7, #4]
    cfd6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    cfd8:	210e      	movs	r1, #14
    cfda:	6878      	ldr	r0, [r7, #4]
    cfdc:	4b02      	ldr	r3, [pc, #8]	; (cfe8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    cfde:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    cfe0:	bf00      	nop
    cfe2:	3708      	adds	r7, #8
    cfe4:	46bd      	mov	sp, r7
    cfe6:	bd80      	pop	{r7, pc}
    cfe8:	0000cf61 	.word	0x0000cf61

0000cfec <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    cfec:	b580      	push	{r7, lr}
    cfee:	b084      	sub	sp, #16
    cff0:	af00      	add	r7, sp, #0
    cff2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    cff4:	210e      	movs	r1, #14
    cff6:	6878      	ldr	r0, [r7, #4]
    cff8:	4b08      	ldr	r3, [pc, #32]	; (d01c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    cffa:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    cffc:	687b      	ldr	r3, [r7, #4]
    cffe:	781b      	ldrb	r3, [r3, #0]
    d000:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    d002:	7bfb      	ldrb	r3, [r7, #15]
    d004:	09db      	lsrs	r3, r3, #7
    d006:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d008:	7bfb      	ldrb	r3, [r7, #15]
    d00a:	2b00      	cmp	r3, #0
    d00c:	bf14      	ite	ne
    d00e:	2301      	movne	r3, #1
    d010:	2300      	moveq	r3, #0
    d012:	b2db      	uxtb	r3, r3
}
    d014:	4618      	mov	r0, r3
    d016:	3710      	adds	r7, #16
    d018:	46bd      	mov	sp, r7
    d01a:	bd80      	pop	{r7, pc}
    d01c:	0000cf61 	.word	0x0000cf61

0000d020 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    d020:	b480      	push	{r7}
    d022:	b085      	sub	sp, #20
    d024:	af00      	add	r7, sp, #0
    d026:	6078      	str	r0, [r7, #4]
    d028:	460b      	mov	r3, r1
    d02a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    d02c:	687b      	ldr	r3, [r7, #4]
    d02e:	785b      	ldrb	r3, [r3, #1]
    d030:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    d032:	7bfb      	ldrb	r3, [r7, #15]
    d034:	f023 030f 	bic.w	r3, r3, #15
    d038:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    d03a:	78fb      	ldrb	r3, [r7, #3]
    d03c:	f003 030f 	and.w	r3, r3, #15
    d040:	b2da      	uxtb	r2, r3
    d042:	7bfb      	ldrb	r3, [r7, #15]
    d044:	4313      	orrs	r3, r2
    d046:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    d048:	687b      	ldr	r3, [r7, #4]
    d04a:	7bfa      	ldrb	r2, [r7, #15]
    d04c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    d04e:	bf00      	nop
    d050:	3714      	adds	r7, #20
    d052:	46bd      	mov	sp, r7
    d054:	f85d 7b04 	ldr.w	r7, [sp], #4
    d058:	4770      	bx	lr
	...

0000d05c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    d05c:	b580      	push	{r7, lr}
    d05e:	b082      	sub	sp, #8
    d060:	af00      	add	r7, sp, #0
    d062:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    d064:	687b      	ldr	r3, [r7, #4]
    d066:	2b00      	cmp	r3, #0
    d068:	d005      	beq.n	d076 <_wdt_init+0x1a>
    d06a:	687b      	ldr	r3, [r7, #4]
    d06c:	681b      	ldr	r3, [r3, #0]
    d06e:	2b00      	cmp	r3, #0
    d070:	d001      	beq.n	d076 <_wdt_init+0x1a>
    d072:	2301      	movs	r3, #1
    d074:	e000      	b.n	d078 <_wdt_init+0x1c>
    d076:	2300      	movs	r3, #0
    d078:	f003 0301 	and.w	r3, r3, #1
    d07c:	b2db      	uxtb	r3, r3
    d07e:	2250      	movs	r2, #80	; 0x50
    d080:	4913      	ldr	r1, [pc, #76]	; (d0d0 <_wdt_init+0x74>)
    d082:	4618      	mov	r0, r3
    d084:	4b13      	ldr	r3, [pc, #76]	; (d0d4 <_wdt_init+0x78>)
    d086:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    d088:	687b      	ldr	r3, [r7, #4]
    d08a:	681b      	ldr	r3, [r3, #0]
    d08c:	4618      	mov	r0, r3
    d08e:	4b12      	ldr	r3, [pc, #72]	; (d0d8 <_wdt_init+0x7c>)
    d090:	4798      	blx	r3
    d092:	4603      	mov	r3, r0
    d094:	2b00      	cmp	r3, #0
    d096:	d107      	bne.n	d0a8 <_wdt_init+0x4c>
    d098:	687b      	ldr	r3, [r7, #4]
    d09a:	681b      	ldr	r3, [r3, #0]
    d09c:	4618      	mov	r0, r3
    d09e:	4b0f      	ldr	r3, [pc, #60]	; (d0dc <_wdt_init+0x80>)
    d0a0:	4798      	blx	r3
    d0a2:	4603      	mov	r3, r0
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d002      	beq.n	d0ae <_wdt_init+0x52>
		return ERR_DENIED;
    d0a8:	f06f 0310 	mvn.w	r3, #16
    d0ac:	e00b      	b.n	d0c6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    d0ae:	687b      	ldr	r3, [r7, #4]
    d0b0:	681b      	ldr	r3, [r3, #0]
    d0b2:	4618      	mov	r0, r3
    d0b4:	4b0a      	ldr	r3, [pc, #40]	; (d0e0 <_wdt_init+0x84>)
    d0b6:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    d0b8:	687b      	ldr	r3, [r7, #4]
    d0ba:	681b      	ldr	r3, [r3, #0]
    d0bc:	210b      	movs	r1, #11
    d0be:	4618      	mov	r0, r3
    d0c0:	4b08      	ldr	r3, [pc, #32]	; (d0e4 <_wdt_init+0x88>)
    d0c2:	4798      	blx	r3
	}

	return ERR_NONE;
    d0c4:	2300      	movs	r3, #0
}
    d0c6:	4618      	mov	r0, r3
    d0c8:	3708      	adds	r7, #8
    d0ca:	46bd      	mov	sp, r7
    d0cc:	bd80      	pop	{r7, pc}
    d0ce:	bf00      	nop
    d0d0:	0001037c 	.word	0x0001037c
    d0d4:	00005af5 	.word	0x00005af5
    d0d8:	0000cfed 	.word	0x0000cfed
    d0dc:	0000cf85 	.word	0x0000cf85
    d0e0:	0000cfc1 	.word	0x0000cfc1
    d0e4:	0000d021 	.word	0x0000d021

0000d0e8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    d0e8:	b580      	push	{r7, lr}
    d0ea:	b08c      	sub	sp, #48	; 0x30
    d0ec:	af00      	add	r7, sp, #0
    d0ee:	6078      	str	r0, [r7, #4]
    d0f0:	460b      	mov	r3, r1
    d0f2:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d0f4:	687b      	ldr	r3, [r7, #4]
    d0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d0f8:	687b      	ldr	r3, [r7, #4]
    d0fa:	681b      	ldr	r3, [r3, #0]
    d0fc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    d0fe:	f107 030c 	add.w	r3, r7, #12
    d102:	2200      	movs	r2, #0
    d104:	601a      	str	r2, [r3, #0]
    d106:	605a      	str	r2, [r3, #4]
    d108:	609a      	str	r2, [r3, #8]
    d10a:	60da      	str	r2, [r3, #12]
    d10c:	611a      	str	r2, [r3, #16]
    d10e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d112:	7b1b      	ldrb	r3, [r3, #12]
    d114:	2b00      	cmp	r3, #0
    d116:	d001      	beq.n	d11c <n25q256a_xip_confirm+0x34>
    d118:	2206      	movs	r2, #6
    d11a:	e000      	b.n	d11e <n25q256a_xip_confirm+0x36>
    d11c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d11e:	7b3b      	ldrb	r3, [r7, #12]
    d120:	f362 0302 	bfi	r3, r2, #0, #3
    d124:	733b      	strb	r3, [r7, #12]
    d126:	7b3b      	ldrb	r3, [r7, #12]
    d128:	f043 0310 	orr.w	r3, r3, #16
    d12c:	733b      	strb	r3, [r7, #12]
    d12e:	7b3b      	ldrb	r3, [r7, #12]
    d130:	f043 0320 	orr.w	r3, r3, #32
    d134:	733b      	strb	r3, [r7, #12]
    d136:	7b3b      	ldrb	r3, [r7, #12]
    d138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d13c:	733b      	strb	r3, [r7, #12]
    d13e:	7b3b      	ldrb	r3, [r7, #12]
    d140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d144:	733b      	strb	r3, [r7, #12]
    d146:	7b7b      	ldrb	r3, [r7, #13]
    d148:	f043 0303 	orr.w	r3, r3, #3
    d14c:	737b      	strb	r3, [r7, #13]
    d14e:	7b7b      	ldrb	r3, [r7, #13]
    d150:	2201      	movs	r2, #1
    d152:	f362 1305 	bfi	r3, r2, #4, #2
    d156:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    d158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d15a:	7b1b      	ldrb	r3, [r3, #12]
    d15c:	2b00      	cmp	r3, #0
    d15e:	d001      	beq.n	d164 <n25q256a_xip_confirm+0x7c>
    d160:	2208      	movs	r2, #8
    d162:	e000      	b.n	d166 <n25q256a_xip_confirm+0x7e>
    d164:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d166:	7bbb      	ldrb	r3, [r7, #14]
    d168:	f362 0304 	bfi	r3, r2, #0, #5
    d16c:	73bb      	strb	r3, [r7, #14]
    d16e:	230b      	movs	r3, #11
    d170:	743b      	strb	r3, [r7, #16]
    d172:	78fb      	ldrb	r3, [r7, #3]
    d174:	2b00      	cmp	r3, #0
    d176:	d001      	beq.n	d17c <n25q256a_xip_confirm+0x94>
    d178:	2300      	movs	r3, #0
    d17a:	e000      	b.n	d17e <n25q256a_xip_confirm+0x96>
    d17c:	23ff      	movs	r3, #255	; 0xff
    d17e:	747b      	strb	r3, [r7, #17]
    d180:	2301      	movs	r3, #1
    d182:	61bb      	str	r3, [r7, #24]
    d184:	f107 0327 	add.w	r3, r7, #39	; 0x27
    d188:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    d18a:	f107 030c 	add.w	r3, r7, #12
    d18e:	4619      	mov	r1, r3
    d190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d192:	4b07      	ldr	r3, [pc, #28]	; (d1b0 <n25q256a_xip_confirm+0xc8>)
    d194:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    d196:	78fb      	ldrb	r3, [r7, #3]
    d198:	2b00      	cmp	r3, #0
    d19a:	d001      	beq.n	d1a0 <n25q256a_xip_confirm+0xb8>
    d19c:	2202      	movs	r2, #2
    d19e:	e000      	b.n	d1a2 <n25q256a_xip_confirm+0xba>
    d1a0:	2201      	movs	r2, #1
    d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1a4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d1a6:	2300      	movs	r3, #0
}
    d1a8:	4618      	mov	r0, r3
    d1aa:	3730      	adds	r7, #48	; 0x30
    d1ac:	46bd      	mov	sp, r7
    d1ae:	bd80      	pop	{r7, pc}
    d1b0:	00004a15 	.word	0x00004a15

0000d1b4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    d1b4:	b580      	push	{r7, lr}
    d1b6:	b08c      	sub	sp, #48	; 0x30
    d1b8:	af00      	add	r7, sp, #0
    d1ba:	6078      	str	r0, [r7, #4]
    d1bc:	460b      	mov	r3, r1
    d1be:	70fb      	strb	r3, [r7, #3]
    d1c0:	4613      	mov	r3, r2
    d1c2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    d1c4:	2300      	movs	r3, #0
    d1c6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    d1c8:	687b      	ldr	r3, [r7, #4]
    d1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    d1cc:	687b      	ldr	r3, [r7, #4]
    d1ce:	681b      	ldr	r3, [r3, #0]
    d1d0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    d1d2:	f107 030c 	add.w	r3, r7, #12
    d1d6:	2200      	movs	r2, #0
    d1d8:	601a      	str	r2, [r3, #0]
    d1da:	605a      	str	r2, [r3, #4]
    d1dc:	609a      	str	r2, [r3, #8]
    d1de:	60da      	str	r2, [r3, #12]
    d1e0:	611a      	str	r2, [r3, #16]
    d1e2:	615a      	str	r2, [r3, #20]
    d1e4:	78fb      	ldrb	r3, [r7, #3]
    d1e6:	f003 0307 	and.w	r3, r3, #7
    d1ea:	b2da      	uxtb	r2, r3
    d1ec:	7b3b      	ldrb	r3, [r7, #12]
    d1ee:	f362 0302 	bfi	r3, r2, #0, #3
    d1f2:	733b      	strb	r3, [r7, #12]
    d1f4:	7b3b      	ldrb	r3, [r7, #12]
    d1f6:	f043 0310 	orr.w	r3, r3, #16
    d1fa:	733b      	strb	r3, [r7, #12]
    d1fc:	7b3b      	ldrb	r3, [r7, #12]
    d1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d202:	733b      	strb	r3, [r7, #12]
    d204:	78bb      	ldrb	r3, [r7, #2]
    d206:	743b      	strb	r3, [r7, #16]
    d208:	2301      	movs	r3, #1
    d20a:	61bb      	str	r3, [r7, #24]
    d20c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d210:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d214:	7b5b      	ldrb	r3, [r3, #13]
    d216:	2b00      	cmp	r3, #0
    d218:	d003      	beq.n	d222 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    d21a:	2100      	movs	r1, #0
    d21c:	6878      	ldr	r0, [r7, #4]
    d21e:	4b0a      	ldr	r3, [pc, #40]	; (d248 <n25q256a_read_reg+0x94>)
    d220:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d222:	f107 030c 	add.w	r3, r7, #12
    d226:	4619      	mov	r1, r3
    d228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d22a:	4b08      	ldr	r3, [pc, #32]	; (d24c <n25q256a_read_reg+0x98>)
    d22c:	4798      	blx	r3
	if (n25q->xip_mode) {
    d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d230:	7b5b      	ldrb	r3, [r3, #13]
    d232:	2b00      	cmp	r3, #0
    d234:	d003      	beq.n	d23e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    d236:	2101      	movs	r1, #1
    d238:	6878      	ldr	r0, [r7, #4]
    d23a:	4b03      	ldr	r3, [pc, #12]	; (d248 <n25q256a_read_reg+0x94>)
    d23c:	4798      	blx	r3
	}
	return status;
    d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d240:	4618      	mov	r0, r3
    d242:	3730      	adds	r7, #48	; 0x30
    d244:	46bd      	mov	sp, r7
    d246:	bd80      	pop	{r7, pc}
    d248:	0000d0e9 	.word	0x0000d0e9
    d24c:	00004a15 	.word	0x00004a15

0000d250 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    d250:	b580      	push	{r7, lr}
    d252:	b08c      	sub	sp, #48	; 0x30
    d254:	af00      	add	r7, sp, #0
    d256:	60f8      	str	r0, [r7, #12]
    d258:	607b      	str	r3, [r7, #4]
    d25a:	460b      	mov	r3, r1
    d25c:	72fb      	strb	r3, [r7, #11]
    d25e:	4613      	mov	r3, r2
    d260:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d262:	68fb      	ldr	r3, [r7, #12]
    d264:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d266:	68fb      	ldr	r3, [r7, #12]
    d268:	681b      	ldr	r3, [r3, #0]
    d26a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    d26c:	f107 0310 	add.w	r3, r7, #16
    d270:	2200      	movs	r2, #0
    d272:	601a      	str	r2, [r3, #0]
    d274:	605a      	str	r2, [r3, #4]
    d276:	609a      	str	r2, [r3, #8]
    d278:	60da      	str	r2, [r3, #12]
    d27a:	611a      	str	r2, [r3, #16]
    d27c:	615a      	str	r2, [r3, #20]
    d27e:	7afb      	ldrb	r3, [r7, #11]
    d280:	f003 0307 	and.w	r3, r3, #7
    d284:	b2da      	uxtb	r2, r3
    d286:	7c3b      	ldrb	r3, [r7, #16]
    d288:	f362 0302 	bfi	r3, r2, #0, #3
    d28c:	743b      	strb	r3, [r7, #16]
    d28e:	7c3b      	ldrb	r3, [r7, #16]
    d290:	f043 0310 	orr.w	r3, r3, #16
    d294:	743b      	strb	r3, [r7, #16]
    d296:	7c3b      	ldrb	r3, [r7, #16]
    d298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d29c:	743b      	strb	r3, [r7, #16]
    d29e:	7c7b      	ldrb	r3, [r7, #17]
    d2a0:	2202      	movs	r2, #2
    d2a2:	f362 1305 	bfi	r3, r2, #4, #2
    d2a6:	747b      	strb	r3, [r7, #17]
    d2a8:	7abb      	ldrb	r3, [r7, #10]
    d2aa:	753b      	strb	r3, [r7, #20]
    d2ac:	2301      	movs	r3, #1
    d2ae:	61fb      	str	r3, [r7, #28]
    d2b0:	1d3b      	adds	r3, r7, #4
    d2b2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2b6:	7b5b      	ldrb	r3, [r3, #13]
    d2b8:	2b00      	cmp	r3, #0
    d2ba:	d003      	beq.n	d2c4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    d2bc:	2100      	movs	r1, #0
    d2be:	68f8      	ldr	r0, [r7, #12]
    d2c0:	4b09      	ldr	r3, [pc, #36]	; (d2e8 <n25q256a_write_reg+0x98>)
    d2c2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d2c4:	f107 0310 	add.w	r3, r7, #16
    d2c8:	4619      	mov	r1, r3
    d2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d2cc:	4b07      	ldr	r3, [pc, #28]	; (d2ec <n25q256a_write_reg+0x9c>)
    d2ce:	4798      	blx	r3
	if (n25q->xip_mode) {
    d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2d2:	7b5b      	ldrb	r3, [r3, #13]
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d003      	beq.n	d2e0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    d2d8:	2101      	movs	r1, #1
    d2da:	68f8      	ldr	r0, [r7, #12]
    d2dc:	4b02      	ldr	r3, [pc, #8]	; (d2e8 <n25q256a_write_reg+0x98>)
    d2de:	4798      	blx	r3
	}
}
    d2e0:	bf00      	nop
    d2e2:	3730      	adds	r7, #48	; 0x30
    d2e4:	46bd      	mov	sp, r7
    d2e6:	bd80      	pop	{r7, pc}
    d2e8:	0000d0e9 	.word	0x0000d0e9
    d2ec:	00004a15 	.word	0x00004a15

0000d2f0 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    d2f0:	b580      	push	{r7, lr}
    d2f2:	b090      	sub	sp, #64	; 0x40
    d2f4:	af00      	add	r7, sp, #0
    d2f6:	6078      	str	r0, [r7, #4]
    d2f8:	460b      	mov	r3, r1
    d2fa:	70fb      	strb	r3, [r7, #3]
    d2fc:	4613      	mov	r3, r2
    d2fe:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d300:	687b      	ldr	r3, [r7, #4]
    d302:	681b      	ldr	r3, [r3, #0]
    d304:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    d306:	78bb      	ldrb	r3, [r7, #2]
    d308:	2b00      	cmp	r3, #0
    d30a:	d001      	beq.n	d310 <n25q256a_write_enable+0x20>
    d30c:	2306      	movs	r3, #6
    d30e:	e000      	b.n	d312 <n25q256a_write_enable+0x22>
    d310:	2304      	movs	r3, #4
    d312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    d316:	f107 0320 	add.w	r3, r7, #32
    d31a:	2200      	movs	r2, #0
    d31c:	601a      	str	r2, [r3, #0]
    d31e:	605a      	str	r2, [r3, #4]
    d320:	609a      	str	r2, [r3, #8]
    d322:	60da      	str	r2, [r3, #12]
    d324:	611a      	str	r2, [r3, #16]
    d326:	615a      	str	r2, [r3, #20]
    d328:	78fb      	ldrb	r3, [r7, #3]
    d32a:	f003 0307 	and.w	r3, r3, #7
    d32e:	b2da      	uxtb	r2, r3
    d330:	f897 3020 	ldrb.w	r3, [r7, #32]
    d334:	f362 0302 	bfi	r3, r2, #0, #3
    d338:	f887 3020 	strb.w	r3, [r7, #32]
    d33c:	f897 3020 	ldrb.w	r3, [r7, #32]
    d340:	f043 0310 	orr.w	r3, r3, #16
    d344:	f887 3020 	strb.w	r3, [r7, #32]
    d348:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d34c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    d350:	f107 0308 	add.w	r3, r7, #8
    d354:	2200      	movs	r2, #0
    d356:	601a      	str	r2, [r3, #0]
    d358:	605a      	str	r2, [r3, #4]
    d35a:	609a      	str	r2, [r3, #8]
    d35c:	60da      	str	r2, [r3, #12]
    d35e:	611a      	str	r2, [r3, #16]
    d360:	615a      	str	r2, [r3, #20]
    d362:	78fb      	ldrb	r3, [r7, #3]
    d364:	f003 0307 	and.w	r3, r3, #7
    d368:	b2da      	uxtb	r2, r3
    d36a:	7a3b      	ldrb	r3, [r7, #8]
    d36c:	f362 0302 	bfi	r3, r2, #0, #3
    d370:	723b      	strb	r3, [r7, #8]
    d372:	7a3b      	ldrb	r3, [r7, #8]
    d374:	f043 0310 	orr.w	r3, r3, #16
    d378:	723b      	strb	r3, [r7, #8]
    d37a:	7a3b      	ldrb	r3, [r7, #8]
    d37c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d380:	723b      	strb	r3, [r7, #8]
    d382:	2305      	movs	r3, #5
    d384:	733b      	strb	r3, [r7, #12]
    d386:	2301      	movs	r3, #1
    d388:	617b      	str	r3, [r7, #20]
    d38a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    d38e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    d390:	f107 0320 	add.w	r3, r7, #32
    d394:	4619      	mov	r1, r3
    d396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d398:	4b08      	ldr	r3, [pc, #32]	; (d3bc <n25q256a_write_enable+0xcc>)
    d39a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    d39c:	f107 0308 	add.w	r3, r7, #8
    d3a0:	4619      	mov	r1, r3
    d3a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d3a4:	4b05      	ldr	r3, [pc, #20]	; (d3bc <n25q256a_write_enable+0xcc>)
    d3a6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    d3a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    d3ac:	f003 0302 	and.w	r3, r3, #2
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	d0ed      	beq.n	d390 <n25q256a_write_enable+0xa0>
}
    d3b4:	bf00      	nop
    d3b6:	3740      	adds	r7, #64	; 0x40
    d3b8:	46bd      	mov	sp, r7
    d3ba:	bd80      	pop	{r7, pc}
    d3bc:	00004a15 	.word	0x00004a15

0000d3c0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    d3c0:	b590      	push	{r4, r7, lr}
    d3c2:	b087      	sub	sp, #28
    d3c4:	af00      	add	r7, sp, #0
    d3c6:	6078      	str	r0, [r7, #4]
    d3c8:	460b      	mov	r3, r1
    d3ca:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    d3cc:	687b      	ldr	r3, [r7, #4]
    d3ce:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d3d0:	68fb      	ldr	r3, [r7, #12]
    d3d2:	7b1b      	ldrb	r3, [r3, #12]
    d3d4:	2b00      	cmp	r3, #0
    d3d6:	d001      	beq.n	d3dc <n25q256a_switch_mode+0x1c>
    d3d8:	2306      	movs	r3, #6
    d3da:	e000      	b.n	d3de <n25q256a_switch_mode+0x1e>
    d3dc:	2300      	movs	r3, #0
    d3de:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d3e0:	7afb      	ldrb	r3, [r7, #11]
    d3e2:	2265      	movs	r2, #101	; 0x65
    d3e4:	4619      	mov	r1, r3
    d3e6:	6878      	ldr	r0, [r7, #4]
    d3e8:	4b25      	ldr	r3, [pc, #148]	; (d480 <n25q256a_switch_mode+0xc0>)
    d3ea:	4798      	blx	r3
    d3ec:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    d3ee:	2300      	movs	r3, #0
    d3f0:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    d3f2:	68fb      	ldr	r3, [r7, #12]
    d3f4:	7b1b      	ldrb	r3, [r3, #12]
    d3f6:	78fa      	ldrb	r2, [r7, #3]
    d3f8:	429a      	cmp	r2, r3
    d3fa:	d03d      	beq.n	d478 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    d3fc:	78fb      	ldrb	r3, [r7, #3]
    d3fe:	2b00      	cmp	r3, #0
    d400:	d00b      	beq.n	d41a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    d402:	697b      	ldr	r3, [r7, #20]
    d404:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d408:	2b00      	cmp	r3, #0
    d40a:	d011      	beq.n	d430 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    d40c:	697b      	ldr	r3, [r7, #20]
    d40e:	f003 031f 	and.w	r3, r3, #31
    d412:	617b      	str	r3, [r7, #20]
			modify = 1;
    d414:	2301      	movs	r3, #1
    d416:	74fb      	strb	r3, [r7, #19]
    d418:	e00a      	b.n	d430 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    d41a:	697b      	ldr	r3, [r7, #20]
    d41c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d420:	2b00      	cmp	r3, #0
    d422:	d105      	bne.n	d430 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    d424:	697b      	ldr	r3, [r7, #20]
    d426:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    d42a:	617b      	str	r3, [r7, #20]
			modify = 1;
    d42c:	2301      	movs	r3, #1
    d42e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    d430:	7cfb      	ldrb	r3, [r7, #19]
    d432:	2b00      	cmp	r3, #0
    d434:	d021      	beq.n	d47a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    d436:	68fb      	ldr	r3, [r7, #12]
    d438:	78fa      	ldrb	r2, [r7, #3]
    d43a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    d43c:	7afb      	ldrb	r3, [r7, #11]
    d43e:	2201      	movs	r2, #1
    d440:	4619      	mov	r1, r3
    d442:	6878      	ldr	r0, [r7, #4]
    d444:	4b0f      	ldr	r3, [pc, #60]	; (d484 <n25q256a_switch_mode+0xc4>)
    d446:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    d448:	7af9      	ldrb	r1, [r7, #11]
    d44a:	697b      	ldr	r3, [r7, #20]
    d44c:	2261      	movs	r2, #97	; 0x61
    d44e:	6878      	ldr	r0, [r7, #4]
    d450:	4c0d      	ldr	r4, [pc, #52]	; (d488 <n25q256a_switch_mode+0xc8>)
    d452:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d454:	78fb      	ldrb	r3, [r7, #3]
    d456:	2b00      	cmp	r3, #0
    d458:	d001      	beq.n	d45e <n25q256a_switch_mode+0x9e>
    d45a:	2306      	movs	r3, #6
    d45c:	e000      	b.n	d460 <n25q256a_switch_mode+0xa0>
    d45e:	2300      	movs	r3, #0
    d460:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d462:	7afb      	ldrb	r3, [r7, #11]
    d464:	2265      	movs	r2, #101	; 0x65
    d466:	4619      	mov	r1, r3
    d468:	6878      	ldr	r0, [r7, #4]
    d46a:	4b05      	ldr	r3, [pc, #20]	; (d480 <n25q256a_switch_mode+0xc0>)
    d46c:	4798      	blx	r3
    d46e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    d470:	68fb      	ldr	r3, [r7, #12]
    d472:	78fa      	ldrb	r2, [r7, #3]
    d474:	731a      	strb	r2, [r3, #12]
    d476:	e000      	b.n	d47a <n25q256a_switch_mode+0xba>
		return;
    d478:	bf00      	nop
	}
}
    d47a:	371c      	adds	r7, #28
    d47c:	46bd      	mov	sp, r7
    d47e:	bd90      	pop	{r4, r7, pc}
    d480:	0000d1b5 	.word	0x0000d1b5
    d484:	0000d2f1 	.word	0x0000d2f1
    d488:	0000d251 	.word	0x0000d251

0000d48c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    d48c:	b580      	push	{r7, lr}
    d48e:	b086      	sub	sp, #24
    d490:	af00      	add	r7, sp, #0
    d492:	60f8      	str	r0, [r7, #12]
    d494:	60b9      	str	r1, [r7, #8]
    d496:	607a      	str	r2, [r7, #4]
    d498:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    d49a:	68fb      	ldr	r3, [r7, #12]
    d49c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    d49e:	4a0c      	ldr	r2, [pc, #48]	; (d4d0 <n25q256a_construct+0x44>)
    d4a0:	68b9      	ldr	r1, [r7, #8]
    d4a2:	68f8      	ldr	r0, [r7, #12]
    d4a4:	4b0b      	ldr	r3, [pc, #44]	; (d4d4 <n25q256a_construct+0x48>)
    d4a6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    d4a8:	697b      	ldr	r3, [r7, #20]
    d4aa:	2200      	movs	r2, #0
    d4ac:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    d4ae:	697b      	ldr	r3, [r7, #20]
    d4b0:	2200      	movs	r2, #0
    d4b2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    d4b4:	697b      	ldr	r3, [r7, #20]
    d4b6:	687a      	ldr	r2, [r7, #4]
    d4b8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    d4ba:	78fb      	ldrb	r3, [r7, #3]
    d4bc:	4619      	mov	r1, r3
    d4be:	68f8      	ldr	r0, [r7, #12]
    d4c0:	4b05      	ldr	r3, [pc, #20]	; (d4d8 <n25q256a_construct+0x4c>)
    d4c2:	4798      	blx	r3
	return me;
    d4c4:	68fb      	ldr	r3, [r7, #12]
}
    d4c6:	4618      	mov	r0, r3
    d4c8:	3718      	adds	r7, #24
    d4ca:	46bd      	mov	sp, r7
    d4cc:	bd80      	pop	{r7, pc}
    d4ce:	bf00      	nop
    d4d0:	00010394 	.word	0x00010394
    d4d4:	0000d969 	.word	0x0000d969
    d4d8:	0000d3c1 	.word	0x0000d3c1

0000d4dc <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d4dc:	b580      	push	{r7, lr}
    d4de:	b08c      	sub	sp, #48	; 0x30
    d4e0:	af00      	add	r7, sp, #0
    d4e2:	60f8      	str	r0, [r7, #12]
    d4e4:	60b9      	str	r1, [r7, #8]
    d4e6:	607a      	str	r2, [r7, #4]
    d4e8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d4ea:	68fb      	ldr	r3, [r7, #12]
    d4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d4ee:	68fb      	ldr	r3, [r7, #12]
    d4f0:	681b      	ldr	r3, [r3, #0]
    d4f2:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    d4f4:	f107 0310 	add.w	r3, r7, #16
    d4f8:	2200      	movs	r2, #0
    d4fa:	601a      	str	r2, [r3, #0]
    d4fc:	605a      	str	r2, [r3, #4]
    d4fe:	609a      	str	r2, [r3, #8]
    d500:	60da      	str	r2, [r3, #12]
    d502:	611a      	str	r2, [r3, #16]
    d504:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d508:	7b1b      	ldrb	r3, [r3, #12]
    d50a:	2b00      	cmp	r3, #0
    d50c:	d001      	beq.n	d512 <n25q256a_read+0x36>
    d50e:	2206      	movs	r2, #6
    d510:	e000      	b.n	d514 <n25q256a_read+0x38>
    d512:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    d514:	7c3b      	ldrb	r3, [r7, #16]
    d516:	f362 0302 	bfi	r3, r2, #0, #3
    d51a:	743b      	strb	r3, [r7, #16]
    d51c:	7c3b      	ldrb	r3, [r7, #16]
    d51e:	f043 0310 	orr.w	r3, r3, #16
    d522:	743b      	strb	r3, [r7, #16]
    d524:	7c3b      	ldrb	r3, [r7, #16]
    d526:	f043 0320 	orr.w	r3, r3, #32
    d52a:	743b      	strb	r3, [r7, #16]
    d52c:	7c3b      	ldrb	r3, [r7, #16]
    d52e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d532:	743b      	strb	r3, [r7, #16]
    d534:	7c7b      	ldrb	r3, [r7, #17]
    d536:	2201      	movs	r2, #1
    d538:	f362 1305 	bfi	r3, r2, #4, #2
    d53c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d540:	7b1b      	ldrb	r3, [r3, #12]
    d542:	2b00      	cmp	r3, #0
    d544:	d001      	beq.n	d54a <n25q256a_read+0x6e>
    d546:	220a      	movs	r2, #10
    d548:	e000      	b.n	d54c <n25q256a_read+0x70>
    d54a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    d54c:	7cbb      	ldrb	r3, [r7, #18]
    d54e:	f362 0304 	bfi	r3, r2, #0, #5
    d552:	74bb      	strb	r3, [r7, #18]
    d554:	230b      	movs	r3, #11
    d556:	753b      	strb	r3, [r7, #20]
    d558:	687b      	ldr	r3, [r7, #4]
    d55a:	61bb      	str	r3, [r7, #24]
    d55c:	683b      	ldr	r3, [r7, #0]
    d55e:	61fb      	str	r3, [r7, #28]
    d560:	68bb      	ldr	r3, [r7, #8]
    d562:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    d564:	f107 0310 	add.w	r3, r7, #16
    d568:	4619      	mov	r1, r3
    d56a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d56c:	4b03      	ldr	r3, [pc, #12]	; (d57c <n25q256a_read+0xa0>)
    d56e:	4798      	blx	r3
	return ERR_NONE;
    d570:	2300      	movs	r3, #0
}
    d572:	4618      	mov	r0, r3
    d574:	3730      	adds	r7, #48	; 0x30
    d576:	46bd      	mov	sp, r7
    d578:	bd80      	pop	{r7, pc}
    d57a:	bf00      	nop
    d57c:	00004a15 	.word	0x00004a15

0000d580 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d580:	b580      	push	{r7, lr}
    d582:	b08c      	sub	sp, #48	; 0x30
    d584:	af00      	add	r7, sp, #0
    d586:	60f8      	str	r0, [r7, #12]
    d588:	60b9      	str	r1, [r7, #8]
    d58a:	607a      	str	r2, [r7, #4]
    d58c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d58e:	68fb      	ldr	r3, [r7, #12]
    d590:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d592:	68fb      	ldr	r3, [r7, #12]
    d594:	681b      	ldr	r3, [r3, #0]
    d596:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    d598:	f107 0310 	add.w	r3, r7, #16
    d59c:	2200      	movs	r2, #0
    d59e:	601a      	str	r2, [r3, #0]
    d5a0:	605a      	str	r2, [r3, #4]
    d5a2:	609a      	str	r2, [r3, #8]
    d5a4:	60da      	str	r2, [r3, #12]
    d5a6:	611a      	str	r2, [r3, #16]
    d5a8:	615a      	str	r2, [r3, #20]
    d5aa:	7c3b      	ldrb	r3, [r7, #16]
    d5ac:	f043 0310 	orr.w	r3, r3, #16
    d5b0:	743b      	strb	r3, [r7, #16]
    d5b2:	7c3b      	ldrb	r3, [r7, #16]
    d5b4:	f043 0320 	orr.w	r3, r3, #32
    d5b8:	743b      	strb	r3, [r7, #16]
    d5ba:	7c3b      	ldrb	r3, [r7, #16]
    d5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5c0:	743b      	strb	r3, [r7, #16]
    d5c2:	7c7b      	ldrb	r3, [r7, #17]
    d5c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d5c8:	747b      	strb	r3, [r7, #17]
    d5ca:	2302      	movs	r3, #2
    d5cc:	753b      	strb	r3, [r7, #20]
    d5ce:	687b      	ldr	r3, [r7, #4]
    d5d0:	61bb      	str	r3, [r7, #24]
    d5d2:	683b      	ldr	r3, [r7, #0]
    d5d4:	61fb      	str	r3, [r7, #28]
    d5d6:	68bb      	ldr	r3, [r7, #8]
    d5d8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5dc:	7b1b      	ldrb	r3, [r3, #12]
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d001      	beq.n	d5e6 <n25q256a_write+0x66>
    d5e2:	2206      	movs	r2, #6
    d5e4:	e000      	b.n	d5e8 <n25q256a_write+0x68>
    d5e6:	2200      	movs	r2, #0
    d5e8:	7c3b      	ldrb	r3, [r7, #16]
    d5ea:	f362 0302 	bfi	r3, r2, #0, #3
    d5ee:	743b      	strb	r3, [r7, #16]
	while (length) {
    d5f0:	e035      	b.n	d65e <n25q256a_write+0xde>
		cmd.address = address;
    d5f2:	687b      	ldr	r3, [r7, #4]
    d5f4:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    d5f6:	683b      	ldr	r3, [r7, #0]
    d5f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d5fc:	d802      	bhi.n	d604 <n25q256a_write+0x84>
			cmd.buf_len = length;
    d5fe:	683b      	ldr	r3, [r7, #0]
    d600:	61fb      	str	r3, [r7, #28]
    d602:	e002      	b.n	d60a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    d604:	f44f 7380 	mov.w	r3, #256	; 0x100
    d608:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d60a:	7c3b      	ldrb	r3, [r7, #16]
    d60c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d610:	b2db      	uxtb	r3, r3
    d612:	2201      	movs	r2, #1
    d614:	4619      	mov	r1, r3
    d616:	68f8      	ldr	r0, [r7, #12]
    d618:	4b19      	ldr	r3, [pc, #100]	; (d680 <n25q256a_write+0x100>)
    d61a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    d61c:	f107 0310 	add.w	r3, r7, #16
    d620:	4619      	mov	r1, r3
    d622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d624:	4b17      	ldr	r3, [pc, #92]	; (d684 <n25q256a_write+0x104>)
    d626:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d628:	bf00      	nop
    d62a:	7c3b      	ldrb	r3, [r7, #16]
    d62c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d630:	b2db      	uxtb	r3, r3
    d632:	2270      	movs	r2, #112	; 0x70
    d634:	4619      	mov	r1, r3
    d636:	68f8      	ldr	r0, [r7, #12]
    d638:	4b13      	ldr	r3, [pc, #76]	; (d688 <n25q256a_write+0x108>)
    d63a:	4798      	blx	r3
    d63c:	4603      	mov	r3, r0
    d63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d642:	2b00      	cmp	r3, #0
    d644:	d0f1      	beq.n	d62a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    d646:	6a3a      	ldr	r2, [r7, #32]
    d648:	69fb      	ldr	r3, [r7, #28]
    d64a:	4413      	add	r3, r2
    d64c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    d64e:	69fb      	ldr	r3, [r7, #28]
    d650:	683a      	ldr	r2, [r7, #0]
    d652:	1ad3      	subs	r3, r2, r3
    d654:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    d656:	69fb      	ldr	r3, [r7, #28]
    d658:	687a      	ldr	r2, [r7, #4]
    d65a:	4413      	add	r3, r2
    d65c:	607b      	str	r3, [r7, #4]
	while (length) {
    d65e:	683b      	ldr	r3, [r7, #0]
    d660:	2b00      	cmp	r3, #0
    d662:	d1c6      	bne.n	d5f2 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d666:	7b5b      	ldrb	r3, [r3, #13]
    d668:	2b00      	cmp	r3, #0
    d66a:	d003      	beq.n	d674 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    d66c:	2101      	movs	r1, #1
    d66e:	68f8      	ldr	r0, [r7, #12]
    d670:	4b06      	ldr	r3, [pc, #24]	; (d68c <n25q256a_write+0x10c>)
    d672:	4798      	blx	r3
	}
	return ERR_NONE;
    d674:	2300      	movs	r3, #0
}
    d676:	4618      	mov	r0, r3
    d678:	3730      	adds	r7, #48	; 0x30
    d67a:	46bd      	mov	sp, r7
    d67c:	bd80      	pop	{r7, pc}
    d67e:	bf00      	nop
    d680:	0000d2f1 	.word	0x0000d2f1
    d684:	00004a15 	.word	0x00004a15
    d688:	0000d1b5 	.word	0x0000d1b5
    d68c:	0000d0e9 	.word	0x0000d0e9

0000d690 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    d690:	b580      	push	{r7, lr}
    d692:	b090      	sub	sp, #64	; 0x40
    d694:	af00      	add	r7, sp, #0
    d696:	60f8      	str	r0, [r7, #12]
    d698:	60b9      	str	r1, [r7, #8]
    d69a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d69c:	68fb      	ldr	r3, [r7, #12]
    d69e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d6a0:	68fb      	ldr	r3, [r7, #12]
    d6a2:	681b      	ldr	r3, [r3, #0]
    d6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    d6a6:	f107 0314 	add.w	r3, r7, #20
    d6aa:	2200      	movs	r2, #0
    d6ac:	601a      	str	r2, [r3, #0]
    d6ae:	605a      	str	r2, [r3, #4]
    d6b0:	609a      	str	r2, [r3, #8]
    d6b2:	60da      	str	r2, [r3, #12]
    d6b4:	611a      	str	r2, [r3, #16]
    d6b6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d6ba:	7b1b      	ldrb	r3, [r3, #12]
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d001      	beq.n	d6c4 <n25q256a_erase+0x34>
    d6c0:	2206      	movs	r2, #6
    d6c2:	e000      	b.n	d6c6 <n25q256a_erase+0x36>
    d6c4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    d6c6:	7d3b      	ldrb	r3, [r7, #20]
    d6c8:	f362 0302 	bfi	r3, r2, #0, #3
    d6cc:	753b      	strb	r3, [r7, #20]
    d6ce:	7d3b      	ldrb	r3, [r7, #20]
    d6d0:	f043 0310 	orr.w	r3, r3, #16
    d6d4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    d6d6:	687b      	ldr	r3, [r7, #4]
    d6d8:	4a56      	ldr	r2, [pc, #344]	; (d834 <n25q256a_erase+0x1a4>)
    d6da:	4293      	cmp	r3, r2
    d6dc:	bf94      	ite	ls
    d6de:	2301      	movls	r3, #1
    d6e0:	2300      	movhi	r3, #0
    d6e2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    d6e4:	7d3b      	ldrb	r3, [r7, #20]
    d6e6:	f362 1345 	bfi	r3, r2, #5, #1
    d6ea:	753b      	strb	r3, [r7, #20]
    d6ec:	7d7b      	ldrb	r3, [r7, #21]
    d6ee:	2202      	movs	r2, #2
    d6f0:	f362 1305 	bfi	r3, r2, #4, #2
    d6f4:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    d6f6:	68bb      	ldr	r3, [r7, #8]
    d6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    d6fa:	687b      	ldr	r3, [r7, #4]
    d6fc:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    d6fe:	2300      	movs	r3, #0
    d700:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    d702:	687b      	ldr	r3, [r7, #4]
    d704:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d708:	2b00      	cmp	r3, #0
    d70a:	d104      	bne.n	d716 <n25q256a_erase+0x86>
    d70c:	68bb      	ldr	r3, [r7, #8]
    d70e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d712:	2b00      	cmp	r3, #0
    d714:	d002      	beq.n	d71c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    d716:	f06f 030c 	mvn.w	r3, #12
    d71a:	e087      	b.n	d82c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    d71c:	687b      	ldr	r3, [r7, #4]
    d71e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    d722:	d368      	bcc.n	d7f6 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    d724:	23c7      	movs	r3, #199	; 0xc7
    d726:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d728:	7d3b      	ldrb	r3, [r7, #20]
    d72a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d72e:	b2db      	uxtb	r3, r3
    d730:	2201      	movs	r2, #1
    d732:	4619      	mov	r1, r3
    d734:	68f8      	ldr	r0, [r7, #12]
    d736:	4b40      	ldr	r3, [pc, #256]	; (d838 <n25q256a_erase+0x1a8>)
    d738:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    d73a:	f107 0314 	add.w	r3, r7, #20
    d73e:	4619      	mov	r1, r3
    d740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d742:	4b3e      	ldr	r3, [pc, #248]	; (d83c <n25q256a_erase+0x1ac>)
    d744:	4798      	blx	r3
    d746:	e059      	b.n	d7fc <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    d748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d74a:	b29b      	uxth	r3, r3
    d74c:	2b00      	cmp	r3, #0
    d74e:	d11f      	bne.n	d790 <n25q256a_erase+0x100>
    d750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d756:	d31b      	bcc.n	d790 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    d758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d75a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    d75c:	23d8      	movs	r3, #216	; 0xd8
    d75e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d760:	7d3b      	ldrb	r3, [r7, #20]
    d762:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d766:	b2db      	uxtb	r3, r3
    d768:	2201      	movs	r2, #1
    d76a:	4619      	mov	r1, r3
    d76c:	68f8      	ldr	r0, [r7, #12]
    d76e:	4b32      	ldr	r3, [pc, #200]	; (d838 <n25q256a_erase+0x1a8>)
    d770:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d772:	f107 0314 	add.w	r3, r7, #20
    d776:	4619      	mov	r1, r3
    d778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d77a:	4b30      	ldr	r3, [pc, #192]	; (d83c <n25q256a_erase+0x1ac>)
    d77c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    d77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d780:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d784:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    d786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d788:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d78c:	63bb      	str	r3, [r7, #56]	; 0x38
    d78e:	e023      	b.n	d7d8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d796:	d31b      	bcc.n	d7d0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    d798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d79a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    d79c:	2320      	movs	r3, #32
    d79e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d7a0:	7d3b      	ldrb	r3, [r7, #20]
    d7a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d7a6:	b2db      	uxtb	r3, r3
    d7a8:	2201      	movs	r2, #1
    d7aa:	4619      	mov	r1, r3
    d7ac:	68f8      	ldr	r0, [r7, #12]
    d7ae:	4b22      	ldr	r3, [pc, #136]	; (d838 <n25q256a_erase+0x1a8>)
    d7b0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d7b2:	f107 0314 	add.w	r3, r7, #20
    d7b6:	4619      	mov	r1, r3
    d7b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d7ba:	4b20      	ldr	r3, [pc, #128]	; (d83c <n25q256a_erase+0x1ac>)
    d7bc:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    d7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d7c8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d7cc:	63bb      	str	r3, [r7, #56]	; 0x38
    d7ce:	e003      	b.n	d7d8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    d7d0:	f06f 030c 	mvn.w	r3, #12
    d7d4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    d7d6:	e011      	b.n	d7fc <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d7d8:	bf00      	nop
    d7da:	7d3b      	ldrb	r3, [r7, #20]
    d7dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d7e0:	b2db      	uxtb	r3, r3
    d7e2:	2270      	movs	r2, #112	; 0x70
    d7e4:	4619      	mov	r1, r3
    d7e6:	68f8      	ldr	r0, [r7, #12]
    d7e8:	4b15      	ldr	r3, [pc, #84]	; (d840 <n25q256a_erase+0x1b0>)
    d7ea:	4798      	blx	r3
    d7ec:	4603      	mov	r3, r0
    d7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d7f2:	2b00      	cmp	r3, #0
    d7f4:	d0f1      	beq.n	d7da <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    d7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	d1a5      	bne.n	d748 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d7fc:	bf00      	nop
    d7fe:	7d3b      	ldrb	r3, [r7, #20]
    d800:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d804:	b2db      	uxtb	r3, r3
    d806:	2270      	movs	r2, #112	; 0x70
    d808:	4619      	mov	r1, r3
    d80a:	68f8      	ldr	r0, [r7, #12]
    d80c:	4b0c      	ldr	r3, [pc, #48]	; (d840 <n25q256a_erase+0x1b0>)
    d80e:	4798      	blx	r3
    d810:	4603      	mov	r3, r0
    d812:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d816:	2b00      	cmp	r3, #0
    d818:	d0f1      	beq.n	d7fe <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d81c:	7b5b      	ldrb	r3, [r3, #13]
    d81e:	2b00      	cmp	r3, #0
    d820:	d003      	beq.n	d82a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    d822:	2101      	movs	r1, #1
    d824:	68f8      	ldr	r0, [r7, #12]
    d826:	4b07      	ldr	r3, [pc, #28]	; (d844 <n25q256a_erase+0x1b4>)
    d828:	4798      	blx	r3
	}
	return rc;
    d82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    d82c:	4618      	mov	r0, r3
    d82e:	3740      	adds	r7, #64	; 0x40
    d830:	46bd      	mov	sp, r7
    d832:	bd80      	pop	{r7, pc}
    d834:	001fffff 	.word	0x001fffff
    d838:	0000d2f1 	.word	0x0000d2f1
    d83c:	00004a15 	.word	0x00004a15
    d840:	0000d1b5 	.word	0x0000d1b5
    d844:	0000d0e9 	.word	0x0000d0e9

0000d848 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    d848:	b590      	push	{r4, r7, lr}
    d84a:	b085      	sub	sp, #20
    d84c:	af00      	add	r7, sp, #0
    d84e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    d850:	687b      	ldr	r3, [r7, #4]
    d852:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d854:	68fb      	ldr	r3, [r7, #12]
    d856:	7b1b      	ldrb	r3, [r3, #12]
    d858:	2b00      	cmp	r3, #0
    d85a:	d001      	beq.n	d860 <n25q256a_enable_xip+0x18>
    d85c:	2306      	movs	r3, #6
    d85e:	e000      	b.n	d862 <n25q256a_enable_xip+0x1a>
    d860:	2300      	movs	r3, #0
    d862:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    d864:	68fb      	ldr	r3, [r7, #12]
    d866:	7b5b      	ldrb	r3, [r3, #13]
    d868:	2b00      	cmp	r3, #0
    d86a:	d129      	bne.n	d8c0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d86c:	7afb      	ldrb	r3, [r7, #11]
    d86e:	2285      	movs	r2, #133	; 0x85
    d870:	4619      	mov	r1, r3
    d872:	6878      	ldr	r0, [r7, #4]
    d874:	4b15      	ldr	r3, [pc, #84]	; (d8cc <n25q256a_enable_xip+0x84>)
    d876:	4798      	blx	r3
    d878:	4603      	mov	r3, r0
    d87a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    d87c:	7abb      	ldrb	r3, [r7, #10]
    d87e:	f003 0308 	and.w	r3, r3, #8
    d882:	2b00      	cmp	r3, #0
    d884:	d015      	beq.n	d8b2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    d886:	7abb      	ldrb	r3, [r7, #10]
    d888:	f023 0308 	bic.w	r3, r3, #8
    d88c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    d88e:	7abb      	ldrb	r3, [r7, #10]
    d890:	7af9      	ldrb	r1, [r7, #11]
    d892:	2281      	movs	r2, #129	; 0x81
    d894:	6878      	ldr	r0, [r7, #4]
    d896:	4c0e      	ldr	r4, [pc, #56]	; (d8d0 <n25q256a_enable_xip+0x88>)
    d898:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d89a:	bf00      	nop
    d89c:	7afb      	ldrb	r3, [r7, #11]
    d89e:	2270      	movs	r2, #112	; 0x70
    d8a0:	4619      	mov	r1, r3
    d8a2:	6878      	ldr	r0, [r7, #4]
    d8a4:	4b09      	ldr	r3, [pc, #36]	; (d8cc <n25q256a_enable_xip+0x84>)
    d8a6:	4798      	blx	r3
    d8a8:	4603      	mov	r3, r0
    d8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d8ae:	2b00      	cmp	r3, #0
    d8b0:	d0f4      	beq.n	d89c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    d8b2:	68fb      	ldr	r3, [r7, #12]
    d8b4:	2201      	movs	r2, #1
    d8b6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    d8b8:	2101      	movs	r1, #1
    d8ba:	6878      	ldr	r0, [r7, #4]
    d8bc:	4b05      	ldr	r3, [pc, #20]	; (d8d4 <n25q256a_enable_xip+0x8c>)
    d8be:	4798      	blx	r3
	}
	return ERR_NONE;
    d8c0:	2300      	movs	r3, #0
}
    d8c2:	4618      	mov	r0, r3
    d8c4:	3714      	adds	r7, #20
    d8c6:	46bd      	mov	sp, r7
    d8c8:	bd90      	pop	{r4, r7, pc}
    d8ca:	bf00      	nop
    d8cc:	0000d1b5 	.word	0x0000d1b5
    d8d0:	0000d251 	.word	0x0000d251
    d8d4:	0000d0e9 	.word	0x0000d0e9

0000d8d8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    d8d8:	b580      	push	{r7, lr}
    d8da:	b086      	sub	sp, #24
    d8dc:	af00      	add	r7, sp, #0
    d8de:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d8e0:	687b      	ldr	r3, [r7, #4]
    d8e2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d8e4:	687b      	ldr	r3, [r7, #4]
    d8e6:	681b      	ldr	r3, [r3, #0]
    d8e8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d8ea:	697b      	ldr	r3, [r7, #20]
    d8ec:	7b1b      	ldrb	r3, [r3, #12]
    d8ee:	2b00      	cmp	r3, #0
    d8f0:	d001      	beq.n	d8f6 <n25q256a_disable_xip+0x1e>
    d8f2:	2306      	movs	r3, #6
    d8f4:	e000      	b.n	d8f8 <n25q256a_disable_xip+0x20>
    d8f6:	2300      	movs	r3, #0
    d8f8:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    d8fa:	2100      	movs	r1, #0
    d8fc:	6878      	ldr	r0, [r7, #4]
    d8fe:	4b15      	ldr	r3, [pc, #84]	; (d954 <n25q256a_disable_xip+0x7c>)
    d900:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d902:	7bfb      	ldrb	r3, [r7, #15]
    d904:	2285      	movs	r2, #133	; 0x85
    d906:	4619      	mov	r1, r3
    d908:	6878      	ldr	r0, [r7, #4]
    d90a:	4b13      	ldr	r3, [pc, #76]	; (d958 <n25q256a_disable_xip+0x80>)
    d90c:	4798      	blx	r3
    d90e:	4603      	mov	r3, r0
    d910:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    d912:	7bbb      	ldrb	r3, [r7, #14]
    d914:	f003 0308 	and.w	r3, r3, #8
    d918:	2b00      	cmp	r3, #0
    d91a:	d113      	bne.n	d944 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    d91c:	697b      	ldr	r3, [r7, #20]
    d91e:	689b      	ldr	r3, [r3, #8]
    d920:	2b00      	cmp	r3, #0
    d922:	d00f      	beq.n	d944 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    d924:	693b      	ldr	r3, [r7, #16]
    d926:	681b      	ldr	r3, [r3, #0]
    d928:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    d92a:	6938      	ldr	r0, [r7, #16]
    d92c:	4b0b      	ldr	r3, [pc, #44]	; (d95c <n25q256a_disable_xip+0x84>)
    d92e:	4798      	blx	r3
			n25q->pin_exit_xip();
    d930:	697b      	ldr	r3, [r7, #20]
    d932:	689b      	ldr	r3, [r3, #8]
    d934:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    d936:	68b9      	ldr	r1, [r7, #8]
    d938:	6938      	ldr	r0, [r7, #16]
    d93a:	4b09      	ldr	r3, [pc, #36]	; (d960 <n25q256a_disable_xip+0x88>)
    d93c:	4798      	blx	r3
			qspi_sync_enable(descr);
    d93e:	6938      	ldr	r0, [r7, #16]
    d940:	4b08      	ldr	r3, [pc, #32]	; (d964 <n25q256a_disable_xip+0x8c>)
    d942:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    d944:	697b      	ldr	r3, [r7, #20]
    d946:	2200      	movs	r2, #0
    d948:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d94a:	2300      	movs	r3, #0
}
    d94c:	4618      	mov	r0, r3
    d94e:	3718      	adds	r7, #24
    d950:	46bd      	mov	sp, r7
    d952:	bd80      	pop	{r7, pc}
    d954:	0000d0e9 	.word	0x0000d0e9
    d958:	0000d1b5 	.word	0x0000d1b5
    d95c:	000049d9 	.word	0x000049d9
    d960:	00004951 	.word	0x00004951
    d964:	0000499d 	.word	0x0000499d

0000d968 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    d968:	b480      	push	{r7}
    d96a:	b085      	sub	sp, #20
    d96c:	af00      	add	r7, sp, #0
    d96e:	60f8      	str	r0, [r7, #12]
    d970:	60b9      	str	r1, [r7, #8]
    d972:	607a      	str	r2, [r7, #4]
	me->io        = io;
    d974:	68fb      	ldr	r3, [r7, #12]
    d976:	68ba      	ldr	r2, [r7, #8]
    d978:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    d97a:	68fb      	ldr	r3, [r7, #12]
    d97c:	687a      	ldr	r2, [r7, #4]
    d97e:	605a      	str	r2, [r3, #4]

	return me;
    d980:	68fb      	ldr	r3, [r7, #12]
}
    d982:	4618      	mov	r0, r3
    d984:	3714      	adds	r7, #20
    d986:	46bd      	mov	sp, r7
    d988:	f85d 7b04 	ldr.w	r7, [sp], #4
    d98c:	4770      	bx	lr

0000d98e <hri_port_set_DIR_reg>:
{
    d98e:	b480      	push	{r7}
    d990:	b085      	sub	sp, #20
    d992:	af00      	add	r7, sp, #0
    d994:	60f8      	str	r0, [r7, #12]
    d996:	460b      	mov	r3, r1
    d998:	607a      	str	r2, [r7, #4]
    d99a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    d99c:	7afb      	ldrb	r3, [r7, #11]
    d99e:	68fa      	ldr	r2, [r7, #12]
    d9a0:	01db      	lsls	r3, r3, #7
    d9a2:	4413      	add	r3, r2
    d9a4:	3308      	adds	r3, #8
    d9a6:	687a      	ldr	r2, [r7, #4]
    d9a8:	601a      	str	r2, [r3, #0]
}
    d9aa:	bf00      	nop
    d9ac:	3714      	adds	r7, #20
    d9ae:	46bd      	mov	sp, r7
    d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9b4:	4770      	bx	lr

0000d9b6 <hri_port_clear_DIR_reg>:
{
    d9b6:	b480      	push	{r7}
    d9b8:	b085      	sub	sp, #20
    d9ba:	af00      	add	r7, sp, #0
    d9bc:	60f8      	str	r0, [r7, #12]
    d9be:	460b      	mov	r3, r1
    d9c0:	607a      	str	r2, [r7, #4]
    d9c2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    d9c4:	7afb      	ldrb	r3, [r7, #11]
    d9c6:	68fa      	ldr	r2, [r7, #12]
    d9c8:	01db      	lsls	r3, r3, #7
    d9ca:	4413      	add	r3, r2
    d9cc:	3304      	adds	r3, #4
    d9ce:	687a      	ldr	r2, [r7, #4]
    d9d0:	601a      	str	r2, [r3, #0]
}
    d9d2:	bf00      	nop
    d9d4:	3714      	adds	r7, #20
    d9d6:	46bd      	mov	sp, r7
    d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9dc:	4770      	bx	lr

0000d9de <hri_port_set_OUT_reg>:
{
    d9de:	b480      	push	{r7}
    d9e0:	b085      	sub	sp, #20
    d9e2:	af00      	add	r7, sp, #0
    d9e4:	60f8      	str	r0, [r7, #12]
    d9e6:	460b      	mov	r3, r1
    d9e8:	607a      	str	r2, [r7, #4]
    d9ea:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d9ec:	7afb      	ldrb	r3, [r7, #11]
    d9ee:	68fa      	ldr	r2, [r7, #12]
    d9f0:	01db      	lsls	r3, r3, #7
    d9f2:	4413      	add	r3, r2
    d9f4:	3318      	adds	r3, #24
    d9f6:	687a      	ldr	r2, [r7, #4]
    d9f8:	601a      	str	r2, [r3, #0]
}
    d9fa:	bf00      	nop
    d9fc:	3714      	adds	r7, #20
    d9fe:	46bd      	mov	sp, r7
    da00:	f85d 7b04 	ldr.w	r7, [sp], #4
    da04:	4770      	bx	lr

0000da06 <hri_port_clear_OUT_reg>:
{
    da06:	b480      	push	{r7}
    da08:	b085      	sub	sp, #20
    da0a:	af00      	add	r7, sp, #0
    da0c:	60f8      	str	r0, [r7, #12]
    da0e:	460b      	mov	r3, r1
    da10:	607a      	str	r2, [r7, #4]
    da12:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    da14:	7afb      	ldrb	r3, [r7, #11]
    da16:	68fa      	ldr	r2, [r7, #12]
    da18:	01db      	lsls	r3, r3, #7
    da1a:	4413      	add	r3, r2
    da1c:	3314      	adds	r3, #20
    da1e:	687a      	ldr	r2, [r7, #4]
    da20:	601a      	str	r2, [r3, #0]
}
    da22:	bf00      	nop
    da24:	3714      	adds	r7, #20
    da26:	46bd      	mov	sp, r7
    da28:	f85d 7b04 	ldr.w	r7, [sp], #4
    da2c:	4770      	bx	lr

0000da2e <hri_port_write_PMUX_PMUXE_bf>:
{
    da2e:	b480      	push	{r7}
    da30:	b085      	sub	sp, #20
    da32:	af00      	add	r7, sp, #0
    da34:	6078      	str	r0, [r7, #4]
    da36:	4608      	mov	r0, r1
    da38:	4611      	mov	r1, r2
    da3a:	461a      	mov	r2, r3
    da3c:	4603      	mov	r3, r0
    da3e:	70fb      	strb	r3, [r7, #3]
    da40:	460b      	mov	r3, r1
    da42:	70bb      	strb	r3, [r7, #2]
    da44:	4613      	mov	r3, r2
    da46:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    da48:	78fa      	ldrb	r2, [r7, #3]
    da4a:	78bb      	ldrb	r3, [r7, #2]
    da4c:	6879      	ldr	r1, [r7, #4]
    da4e:	01d2      	lsls	r2, r2, #7
    da50:	440a      	add	r2, r1
    da52:	4413      	add	r3, r2
    da54:	3330      	adds	r3, #48	; 0x30
    da56:	781b      	ldrb	r3, [r3, #0]
    da58:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    da5a:	7bfb      	ldrb	r3, [r7, #15]
    da5c:	f023 030f 	bic.w	r3, r3, #15
    da60:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    da62:	787b      	ldrb	r3, [r7, #1]
    da64:	f003 030f 	and.w	r3, r3, #15
    da68:	b2da      	uxtb	r2, r3
    da6a:	7bfb      	ldrb	r3, [r7, #15]
    da6c:	4313      	orrs	r3, r2
    da6e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    da70:	78fa      	ldrb	r2, [r7, #3]
    da72:	78bb      	ldrb	r3, [r7, #2]
    da74:	6879      	ldr	r1, [r7, #4]
    da76:	01d2      	lsls	r2, r2, #7
    da78:	440a      	add	r2, r1
    da7a:	4413      	add	r3, r2
    da7c:	3330      	adds	r3, #48	; 0x30
    da7e:	7bfa      	ldrb	r2, [r7, #15]
    da80:	701a      	strb	r2, [r3, #0]
}
    da82:	bf00      	nop
    da84:	3714      	adds	r7, #20
    da86:	46bd      	mov	sp, r7
    da88:	f85d 7b04 	ldr.w	r7, [sp], #4
    da8c:	4770      	bx	lr

0000da8e <hri_port_write_PMUX_PMUXO_bf>:
{
    da8e:	b480      	push	{r7}
    da90:	b085      	sub	sp, #20
    da92:	af00      	add	r7, sp, #0
    da94:	6078      	str	r0, [r7, #4]
    da96:	4608      	mov	r0, r1
    da98:	4611      	mov	r1, r2
    da9a:	461a      	mov	r2, r3
    da9c:	4603      	mov	r3, r0
    da9e:	70fb      	strb	r3, [r7, #3]
    daa0:	460b      	mov	r3, r1
    daa2:	70bb      	strb	r3, [r7, #2]
    daa4:	4613      	mov	r3, r2
    daa6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    daa8:	78fa      	ldrb	r2, [r7, #3]
    daaa:	78bb      	ldrb	r3, [r7, #2]
    daac:	6879      	ldr	r1, [r7, #4]
    daae:	01d2      	lsls	r2, r2, #7
    dab0:	440a      	add	r2, r1
    dab2:	4413      	add	r3, r2
    dab4:	3330      	adds	r3, #48	; 0x30
    dab6:	781b      	ldrb	r3, [r3, #0]
    dab8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    daba:	7bfb      	ldrb	r3, [r7, #15]
    dabc:	f003 030f 	and.w	r3, r3, #15
    dac0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    dac2:	787b      	ldrb	r3, [r7, #1]
    dac4:	011b      	lsls	r3, r3, #4
    dac6:	b2da      	uxtb	r2, r3
    dac8:	7bfb      	ldrb	r3, [r7, #15]
    daca:	4313      	orrs	r3, r2
    dacc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    dace:	78fa      	ldrb	r2, [r7, #3]
    dad0:	78bb      	ldrb	r3, [r7, #2]
    dad2:	6879      	ldr	r1, [r7, #4]
    dad4:	01d2      	lsls	r2, r2, #7
    dad6:	440a      	add	r2, r1
    dad8:	4413      	add	r3, r2
    dada:	3330      	adds	r3, #48	; 0x30
    dadc:	7bfa      	ldrb	r2, [r7, #15]
    dade:	701a      	strb	r2, [r3, #0]
}
    dae0:	bf00      	nop
    dae2:	3714      	adds	r7, #20
    dae4:	46bd      	mov	sp, r7
    dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    daea:	4770      	bx	lr

0000daec <hri_port_write_PINCFG_PMUXEN_bit>:
{
    daec:	b480      	push	{r7}
    daee:	b085      	sub	sp, #20
    daf0:	af00      	add	r7, sp, #0
    daf2:	6078      	str	r0, [r7, #4]
    daf4:	4608      	mov	r0, r1
    daf6:	4611      	mov	r1, r2
    daf8:	461a      	mov	r2, r3
    dafa:	4603      	mov	r3, r0
    dafc:	70fb      	strb	r3, [r7, #3]
    dafe:	460b      	mov	r3, r1
    db00:	70bb      	strb	r3, [r7, #2]
    db02:	4613      	mov	r3, r2
    db04:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    db06:	78fa      	ldrb	r2, [r7, #3]
    db08:	78bb      	ldrb	r3, [r7, #2]
    db0a:	6879      	ldr	r1, [r7, #4]
    db0c:	01d2      	lsls	r2, r2, #7
    db0e:	440a      	add	r2, r1
    db10:	4413      	add	r3, r2
    db12:	3340      	adds	r3, #64	; 0x40
    db14:	781b      	ldrb	r3, [r3, #0]
    db16:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    db18:	7bfb      	ldrb	r3, [r7, #15]
    db1a:	f023 0301 	bic.w	r3, r3, #1
    db1e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    db20:	787a      	ldrb	r2, [r7, #1]
    db22:	7bfb      	ldrb	r3, [r7, #15]
    db24:	4313      	orrs	r3, r2
    db26:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    db28:	78fa      	ldrb	r2, [r7, #3]
    db2a:	78bb      	ldrb	r3, [r7, #2]
    db2c:	6879      	ldr	r1, [r7, #4]
    db2e:	01d2      	lsls	r2, r2, #7
    db30:	440a      	add	r2, r1
    db32:	4413      	add	r3, r2
    db34:	3340      	adds	r3, #64	; 0x40
    db36:	7bfa      	ldrb	r2, [r7, #15]
    db38:	701a      	strb	r2, [r3, #0]
}
    db3a:	bf00      	nop
    db3c:	3714      	adds	r7, #20
    db3e:	46bd      	mov	sp, r7
    db40:	f85d 7b04 	ldr.w	r7, [sp], #4
    db44:	4770      	bx	lr

0000db46 <hri_port_write_WRCONFIG_reg>:
{
    db46:	b480      	push	{r7}
    db48:	b085      	sub	sp, #20
    db4a:	af00      	add	r7, sp, #0
    db4c:	60f8      	str	r0, [r7, #12]
    db4e:	460b      	mov	r3, r1
    db50:	607a      	str	r2, [r7, #4]
    db52:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    db54:	7afb      	ldrb	r3, [r7, #11]
    db56:	68fa      	ldr	r2, [r7, #12]
    db58:	01db      	lsls	r3, r3, #7
    db5a:	4413      	add	r3, r2
    db5c:	3328      	adds	r3, #40	; 0x28
    db5e:	687a      	ldr	r2, [r7, #4]
    db60:	601a      	str	r2, [r3, #0]
}
    db62:	bf00      	nop
    db64:	3714      	adds	r7, #20
    db66:	46bd      	mov	sp, r7
    db68:	f85d 7b04 	ldr.w	r7, [sp], #4
    db6c:	4770      	bx	lr
	...

0000db70 <_gpio_set_direction>:
{
    db70:	b580      	push	{r7, lr}
    db72:	b082      	sub	sp, #8
    db74:	af00      	add	r7, sp, #0
    db76:	4603      	mov	r3, r0
    db78:	6039      	str	r1, [r7, #0]
    db7a:	71fb      	strb	r3, [r7, #7]
    db7c:	4613      	mov	r3, r2
    db7e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    db80:	79bb      	ldrb	r3, [r7, #6]
    db82:	2b01      	cmp	r3, #1
    db84:	d01c      	beq.n	dbc0 <_gpio_set_direction+0x50>
    db86:	2b02      	cmp	r3, #2
    db88:	d037      	beq.n	dbfa <_gpio_set_direction+0x8a>
    db8a:	2b00      	cmp	r3, #0
    db8c:	d14e      	bne.n	dc2c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    db8e:	79fb      	ldrb	r3, [r7, #7]
    db90:	683a      	ldr	r2, [r7, #0]
    db92:	4619      	mov	r1, r3
    db94:	482a      	ldr	r0, [pc, #168]	; (dc40 <_gpio_set_direction+0xd0>)
    db96:	4b2b      	ldr	r3, [pc, #172]	; (dc44 <_gpio_set_direction+0xd4>)
    db98:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    db9a:	683b      	ldr	r3, [r7, #0]
    db9c:	b29b      	uxth	r3, r3
    db9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    dba2:	79fb      	ldrb	r3, [r7, #7]
    dba4:	4619      	mov	r1, r3
    dba6:	4826      	ldr	r0, [pc, #152]	; (dc40 <_gpio_set_direction+0xd0>)
    dba8:	4b27      	ldr	r3, [pc, #156]	; (dc48 <_gpio_set_direction+0xd8>)
    dbaa:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    dbac:	683b      	ldr	r3, [r7, #0]
    dbae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    dbb0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    dbb4:	79fb      	ldrb	r3, [r7, #7]
    dbb6:	4619      	mov	r1, r3
    dbb8:	4821      	ldr	r0, [pc, #132]	; (dc40 <_gpio_set_direction+0xd0>)
    dbba:	4b23      	ldr	r3, [pc, #140]	; (dc48 <_gpio_set_direction+0xd8>)
    dbbc:	4798      	blx	r3
		break;
    dbbe:	e03a      	b.n	dc36 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    dbc0:	79fb      	ldrb	r3, [r7, #7]
    dbc2:	683a      	ldr	r2, [r7, #0]
    dbc4:	4619      	mov	r1, r3
    dbc6:	481e      	ldr	r0, [pc, #120]	; (dc40 <_gpio_set_direction+0xd0>)
    dbc8:	4b1e      	ldr	r3, [pc, #120]	; (dc44 <_gpio_set_direction+0xd4>)
    dbca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    dbcc:	683b      	ldr	r3, [r7, #0]
    dbce:	b29b      	uxth	r3, r3
    dbd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    dbd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    dbd8:	79f9      	ldrb	r1, [r7, #7]
    dbda:	461a      	mov	r2, r3
    dbdc:	4818      	ldr	r0, [pc, #96]	; (dc40 <_gpio_set_direction+0xd0>)
    dbde:	4b1a      	ldr	r3, [pc, #104]	; (dc48 <_gpio_set_direction+0xd8>)
    dbe0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    dbe2:	683b      	ldr	r3, [r7, #0]
    dbe4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    dbe6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    dbea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    dbee:	79f9      	ldrb	r1, [r7, #7]
    dbf0:	461a      	mov	r2, r3
    dbf2:	4813      	ldr	r0, [pc, #76]	; (dc40 <_gpio_set_direction+0xd0>)
    dbf4:	4b14      	ldr	r3, [pc, #80]	; (dc48 <_gpio_set_direction+0xd8>)
    dbf6:	4798      	blx	r3
		break;
    dbf8:	e01d      	b.n	dc36 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    dbfa:	79fb      	ldrb	r3, [r7, #7]
    dbfc:	683a      	ldr	r2, [r7, #0]
    dbfe:	4619      	mov	r1, r3
    dc00:	480f      	ldr	r0, [pc, #60]	; (dc40 <_gpio_set_direction+0xd0>)
    dc02:	4b12      	ldr	r3, [pc, #72]	; (dc4c <_gpio_set_direction+0xdc>)
    dc04:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    dc06:	683b      	ldr	r3, [r7, #0]
    dc08:	b29b      	uxth	r3, r3
    dc0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    dc0e:	79fb      	ldrb	r3, [r7, #7]
    dc10:	4619      	mov	r1, r3
    dc12:	480b      	ldr	r0, [pc, #44]	; (dc40 <_gpio_set_direction+0xd0>)
    dc14:	4b0c      	ldr	r3, [pc, #48]	; (dc48 <_gpio_set_direction+0xd8>)
    dc16:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    dc18:	683b      	ldr	r3, [r7, #0]
    dc1a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    dc1c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    dc20:	79fb      	ldrb	r3, [r7, #7]
    dc22:	4619      	mov	r1, r3
    dc24:	4806      	ldr	r0, [pc, #24]	; (dc40 <_gpio_set_direction+0xd0>)
    dc26:	4b08      	ldr	r3, [pc, #32]	; (dc48 <_gpio_set_direction+0xd8>)
    dc28:	4798      	blx	r3
		break;
    dc2a:	e004      	b.n	dc36 <_gpio_set_direction+0xc6>
		ASSERT(false);
    dc2c:	2246      	movs	r2, #70	; 0x46
    dc2e:	4908      	ldr	r1, [pc, #32]	; (dc50 <_gpio_set_direction+0xe0>)
    dc30:	2000      	movs	r0, #0
    dc32:	4b08      	ldr	r3, [pc, #32]	; (dc54 <_gpio_set_direction+0xe4>)
    dc34:	4798      	blx	r3
}
    dc36:	bf00      	nop
    dc38:	3708      	adds	r7, #8
    dc3a:	46bd      	mov	sp, r7
    dc3c:	bd80      	pop	{r7, pc}
    dc3e:	bf00      	nop
    dc40:	41008000 	.word	0x41008000
    dc44:	0000d9b7 	.word	0x0000d9b7
    dc48:	0000db47 	.word	0x0000db47
    dc4c:	0000d98f 	.word	0x0000d98f
    dc50:	000103a8 	.word	0x000103a8
    dc54:	00005af5 	.word	0x00005af5

0000dc58 <_gpio_set_level>:
{
    dc58:	b580      	push	{r7, lr}
    dc5a:	b082      	sub	sp, #8
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	4603      	mov	r3, r0
    dc60:	6039      	str	r1, [r7, #0]
    dc62:	71fb      	strb	r3, [r7, #7]
    dc64:	4613      	mov	r3, r2
    dc66:	71bb      	strb	r3, [r7, #6]
	if (level) {
    dc68:	79bb      	ldrb	r3, [r7, #6]
    dc6a:	2b00      	cmp	r3, #0
    dc6c:	d006      	beq.n	dc7c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    dc6e:	79fb      	ldrb	r3, [r7, #7]
    dc70:	683a      	ldr	r2, [r7, #0]
    dc72:	4619      	mov	r1, r3
    dc74:	4806      	ldr	r0, [pc, #24]	; (dc90 <_gpio_set_level+0x38>)
    dc76:	4b07      	ldr	r3, [pc, #28]	; (dc94 <_gpio_set_level+0x3c>)
    dc78:	4798      	blx	r3
}
    dc7a:	e005      	b.n	dc88 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    dc7c:	79fb      	ldrb	r3, [r7, #7]
    dc7e:	683a      	ldr	r2, [r7, #0]
    dc80:	4619      	mov	r1, r3
    dc82:	4803      	ldr	r0, [pc, #12]	; (dc90 <_gpio_set_level+0x38>)
    dc84:	4b04      	ldr	r3, [pc, #16]	; (dc98 <_gpio_set_level+0x40>)
    dc86:	4798      	blx	r3
}
    dc88:	bf00      	nop
    dc8a:	3708      	adds	r7, #8
    dc8c:	46bd      	mov	sp, r7
    dc8e:	bd80      	pop	{r7, pc}
    dc90:	41008000 	.word	0x41008000
    dc94:	0000d9df 	.word	0x0000d9df
    dc98:	0000da07 	.word	0x0000da07

0000dc9c <_gpio_set_pin_function>:
{
    dc9c:	b590      	push	{r4, r7, lr}
    dc9e:	b085      	sub	sp, #20
    dca0:	af00      	add	r7, sp, #0
    dca2:	6078      	str	r0, [r7, #4]
    dca4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    dca6:	687b      	ldr	r3, [r7, #4]
    dca8:	095b      	lsrs	r3, r3, #5
    dcaa:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    dcac:	687b      	ldr	r3, [r7, #4]
    dcae:	b2db      	uxtb	r3, r3
    dcb0:	f003 031f 	and.w	r3, r3, #31
    dcb4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    dcb6:	683b      	ldr	r3, [r7, #0]
    dcb8:	f1b3 3fff 	cmp.w	r3, #4294967295
    dcbc:	d106      	bne.n	dccc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    dcbe:	7bba      	ldrb	r2, [r7, #14]
    dcc0:	7bf9      	ldrb	r1, [r7, #15]
    dcc2:	2300      	movs	r3, #0
    dcc4:	4812      	ldr	r0, [pc, #72]	; (dd10 <_gpio_set_pin_function+0x74>)
    dcc6:	4c13      	ldr	r4, [pc, #76]	; (dd14 <_gpio_set_pin_function+0x78>)
    dcc8:	47a0      	blx	r4
}
    dcca:	e01d      	b.n	dd08 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    dccc:	7bba      	ldrb	r2, [r7, #14]
    dcce:	7bf9      	ldrb	r1, [r7, #15]
    dcd0:	2301      	movs	r3, #1
    dcd2:	480f      	ldr	r0, [pc, #60]	; (dd10 <_gpio_set_pin_function+0x74>)
    dcd4:	4c0f      	ldr	r4, [pc, #60]	; (dd14 <_gpio_set_pin_function+0x78>)
    dcd6:	47a0      	blx	r4
		if (pin & 1) {
    dcd8:	7bbb      	ldrb	r3, [r7, #14]
    dcda:	f003 0301 	and.w	r3, r3, #1
    dcde:	2b00      	cmp	r3, #0
    dce0:	d009      	beq.n	dcf6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    dce2:	7bbb      	ldrb	r3, [r7, #14]
    dce4:	085b      	lsrs	r3, r3, #1
    dce6:	b2da      	uxtb	r2, r3
    dce8:	683b      	ldr	r3, [r7, #0]
    dcea:	b2db      	uxtb	r3, r3
    dcec:	7bf9      	ldrb	r1, [r7, #15]
    dcee:	4808      	ldr	r0, [pc, #32]	; (dd10 <_gpio_set_pin_function+0x74>)
    dcf0:	4c09      	ldr	r4, [pc, #36]	; (dd18 <_gpio_set_pin_function+0x7c>)
    dcf2:	47a0      	blx	r4
}
    dcf4:	e008      	b.n	dd08 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    dcf6:	7bbb      	ldrb	r3, [r7, #14]
    dcf8:	085b      	lsrs	r3, r3, #1
    dcfa:	b2da      	uxtb	r2, r3
    dcfc:	683b      	ldr	r3, [r7, #0]
    dcfe:	b2db      	uxtb	r3, r3
    dd00:	7bf9      	ldrb	r1, [r7, #15]
    dd02:	4803      	ldr	r0, [pc, #12]	; (dd10 <_gpio_set_pin_function+0x74>)
    dd04:	4c05      	ldr	r4, [pc, #20]	; (dd1c <_gpio_set_pin_function+0x80>)
    dd06:	47a0      	blx	r4
}
    dd08:	bf00      	nop
    dd0a:	3714      	adds	r7, #20
    dd0c:	46bd      	mov	sp, r7
    dd0e:	bd90      	pop	{r4, r7, pc}
    dd10:	41008000 	.word	0x41008000
    dd14:	0000daed 	.word	0x0000daed
    dd18:	0000da8f 	.word	0x0000da8f
    dd1c:	0000da2f 	.word	0x0000da2f

0000dd20 <gpio_set_pin_function>:
{
    dd20:	b580      	push	{r7, lr}
    dd22:	b082      	sub	sp, #8
    dd24:	af00      	add	r7, sp, #0
    dd26:	6078      	str	r0, [r7, #4]
    dd28:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    dd2a:	6839      	ldr	r1, [r7, #0]
    dd2c:	6878      	ldr	r0, [r7, #4]
    dd2e:	4b03      	ldr	r3, [pc, #12]	; (dd3c <gpio_set_pin_function+0x1c>)
    dd30:	4798      	blx	r3
}
    dd32:	bf00      	nop
    dd34:	3708      	adds	r7, #8
    dd36:	46bd      	mov	sp, r7
    dd38:	bd80      	pop	{r7, pc}
    dd3a:	bf00      	nop
    dd3c:	0000dc9d 	.word	0x0000dc9d

0000dd40 <gpio_set_pin_direction>:
{
    dd40:	b580      	push	{r7, lr}
    dd42:	b082      	sub	sp, #8
    dd44:	af00      	add	r7, sp, #0
    dd46:	4603      	mov	r3, r0
    dd48:	460a      	mov	r2, r1
    dd4a:	71fb      	strb	r3, [r7, #7]
    dd4c:	4613      	mov	r3, r2
    dd4e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    dd50:	79fb      	ldrb	r3, [r7, #7]
    dd52:	095b      	lsrs	r3, r3, #5
    dd54:	b2d8      	uxtb	r0, r3
    dd56:	79fb      	ldrb	r3, [r7, #7]
    dd58:	f003 031f 	and.w	r3, r3, #31
    dd5c:	2201      	movs	r2, #1
    dd5e:	fa02 f303 	lsl.w	r3, r2, r3
    dd62:	79ba      	ldrb	r2, [r7, #6]
    dd64:	4619      	mov	r1, r3
    dd66:	4b03      	ldr	r3, [pc, #12]	; (dd74 <gpio_set_pin_direction+0x34>)
    dd68:	4798      	blx	r3
}
    dd6a:	bf00      	nop
    dd6c:	3708      	adds	r7, #8
    dd6e:	46bd      	mov	sp, r7
    dd70:	bd80      	pop	{r7, pc}
    dd72:	bf00      	nop
    dd74:	0000db71 	.word	0x0000db71

0000dd78 <gpio_set_pin_level>:
{
    dd78:	b580      	push	{r7, lr}
    dd7a:	b082      	sub	sp, #8
    dd7c:	af00      	add	r7, sp, #0
    dd7e:	4603      	mov	r3, r0
    dd80:	460a      	mov	r2, r1
    dd82:	71fb      	strb	r3, [r7, #7]
    dd84:	4613      	mov	r3, r2
    dd86:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    dd88:	79fb      	ldrb	r3, [r7, #7]
    dd8a:	095b      	lsrs	r3, r3, #5
    dd8c:	b2d8      	uxtb	r0, r3
    dd8e:	79fb      	ldrb	r3, [r7, #7]
    dd90:	f003 031f 	and.w	r3, r3, #31
    dd94:	2201      	movs	r2, #1
    dd96:	fa02 f303 	lsl.w	r3, r2, r3
    dd9a:	79ba      	ldrb	r2, [r7, #6]
    dd9c:	4619      	mov	r1, r3
    dd9e:	4b03      	ldr	r3, [pc, #12]	; (ddac <gpio_set_pin_level+0x34>)
    dda0:	4798      	blx	r3
}
    dda2:	bf00      	nop
    dda4:	3708      	adds	r7, #8
    dda6:	46bd      	mov	sp, r7
    dda8:	bd80      	pop	{r7, pc}
    ddaa:	bf00      	nop
    ddac:	0000dc59 	.word	0x0000dc59

0000ddb0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    ddb0:	b580      	push	{r7, lr}
    ddb2:	b082      	sub	sp, #8
    ddb4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    ddb6:	2100      	movs	r1, #0
    ddb8:	2008      	movs	r0, #8
    ddba:	4b24      	ldr	r3, [pc, #144]	; (de4c <QSPI_N25Q256_exit_xip+0x9c>)
    ddbc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    ddbe:	2100      	movs	r1, #0
    ddc0:	202b      	movs	r0, #43	; 0x2b
    ddc2:	4b22      	ldr	r3, [pc, #136]	; (de4c <QSPI_N25Q256_exit_xip+0x9c>)
    ddc4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    ddc6:	2100      	movs	r1, #0
    ddc8:	202a      	movs	r0, #42	; 0x2a
    ddca:	4b20      	ldr	r3, [pc, #128]	; (de4c <QSPI_N25Q256_exit_xip+0x9c>)
    ddcc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    ddce:	2102      	movs	r1, #2
    ddd0:	2008      	movs	r0, #8
    ddd2:	4b1f      	ldr	r3, [pc, #124]	; (de50 <QSPI_N25Q256_exit_xip+0xa0>)
    ddd4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    ddd6:	2102      	movs	r1, #2
    ddd8:	202b      	movs	r0, #43	; 0x2b
    ddda:	4b1d      	ldr	r3, [pc, #116]	; (de50 <QSPI_N25Q256_exit_xip+0xa0>)
    dddc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    ddde:	2102      	movs	r1, #2
    dde0:	202a      	movs	r0, #42	; 0x2a
    dde2:	4b1b      	ldr	r3, [pc, #108]	; (de50 <QSPI_N25Q256_exit_xip+0xa0>)
    dde4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    dde6:	2101      	movs	r1, #1
    dde8:	2008      	movs	r0, #8
    ddea:	4b1a      	ldr	r3, [pc, #104]	; (de54 <QSPI_N25Q256_exit_xip+0xa4>)
    ddec:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    ddee:	2100      	movs	r1, #0
    ddf0:	202b      	movs	r0, #43	; 0x2b
    ddf2:	4b18      	ldr	r3, [pc, #96]	; (de54 <QSPI_N25Q256_exit_xip+0xa4>)
    ddf4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    ddf6:	2100      	movs	r1, #0
    ddf8:	202a      	movs	r0, #42	; 0x2a
    ddfa:	4b16      	ldr	r3, [pc, #88]	; (de54 <QSPI_N25Q256_exit_xip+0xa4>)
    ddfc:	4798      	blx	r3

	delay_us(1);
    ddfe:	2001      	movs	r0, #1
    de00:	4b15      	ldr	r3, [pc, #84]	; (de58 <QSPI_N25Q256_exit_xip+0xa8>)
    de02:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    de04:	2300      	movs	r3, #0
    de06:	607b      	str	r3, [r7, #4]
    de08:	e010      	b.n	de2c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    de0a:	2101      	movs	r1, #1
    de0c:	202a      	movs	r0, #42	; 0x2a
    de0e:	4b11      	ldr	r3, [pc, #68]	; (de54 <QSPI_N25Q256_exit_xip+0xa4>)
    de10:	4798      	blx	r3
		delay_us(1);
    de12:	2001      	movs	r0, #1
    de14:	4b10      	ldr	r3, [pc, #64]	; (de58 <QSPI_N25Q256_exit_xip+0xa8>)
    de16:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    de18:	2100      	movs	r1, #0
    de1a:	202a      	movs	r0, #42	; 0x2a
    de1c:	4b0d      	ldr	r3, [pc, #52]	; (de54 <QSPI_N25Q256_exit_xip+0xa4>)
    de1e:	4798      	blx	r3
		delay_us(1);
    de20:	2001      	movs	r0, #1
    de22:	4b0d      	ldr	r3, [pc, #52]	; (de58 <QSPI_N25Q256_exit_xip+0xa8>)
    de24:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    de26:	687b      	ldr	r3, [r7, #4]
    de28:	3301      	adds	r3, #1
    de2a:	607b      	str	r3, [r7, #4]
    de2c:	687b      	ldr	r3, [r7, #4]
    de2e:	2b06      	cmp	r3, #6
    de30:	ddeb      	ble.n	de0a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    de32:	2101      	movs	r1, #1
    de34:	202b      	movs	r0, #43	; 0x2b
    de36:	4b07      	ldr	r3, [pc, #28]	; (de54 <QSPI_N25Q256_exit_xip+0xa4>)
    de38:	4798      	blx	r3
	delay_us(1);
    de3a:	2001      	movs	r0, #1
    de3c:	4b06      	ldr	r3, [pc, #24]	; (de58 <QSPI_N25Q256_exit_xip+0xa8>)
    de3e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    de40:	4b06      	ldr	r3, [pc, #24]	; (de5c <QSPI_N25Q256_exit_xip+0xac>)
    de42:	4798      	blx	r3
}
    de44:	bf00      	nop
    de46:	3708      	adds	r7, #8
    de48:	46bd      	mov	sp, r7
    de4a:	bd80      	pop	{r7, pc}
    de4c:	0000dd21 	.word	0x0000dd21
    de50:	0000dd41 	.word	0x0000dd41
    de54:	0000dd79 	.word	0x0000dd79
    de58:	0000440d 	.word	0x0000440d
    de5c:	00003515 	.word	0x00003515

0000de60 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    de60:	b598      	push	{r3, r4, r7, lr}
    de62:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    de64:	4806      	ldr	r0, [pc, #24]	; (de80 <spi_nor_flash_init+0x20>)
    de66:	4b07      	ldr	r3, [pc, #28]	; (de84 <spi_nor_flash_init+0x24>)
    de68:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    de6a:	2300      	movs	r3, #0
    de6c:	4a06      	ldr	r2, [pc, #24]	; (de88 <spi_nor_flash_init+0x28>)
    de6e:	4904      	ldr	r1, [pc, #16]	; (de80 <spi_nor_flash_init+0x20>)
    de70:	4806      	ldr	r0, [pc, #24]	; (de8c <spi_nor_flash_init+0x2c>)
    de72:	4c07      	ldr	r4, [pc, #28]	; (de90 <spi_nor_flash_init+0x30>)
    de74:	47a0      	blx	r4
    de76:	4602      	mov	r2, r0
    de78:	4b06      	ldr	r3, [pc, #24]	; (de94 <spi_nor_flash_init+0x34>)
    de7a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    de7c:	bf00      	nop
    de7e:	bd98      	pop	{r3, r4, r7, pc}
    de80:	2000236c 	.word	0x2000236c
    de84:	0000499d 	.word	0x0000499d
    de88:	0000ddb1 	.word	0x0000ddb1
    de8c:	20002208 	.word	0x20002208
    de90:	0000d48d 	.word	0x0000d48d
    de94:	2000254c 	.word	0x2000254c

0000de98 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    de98:	b480      	push	{r7}
    de9a:	b083      	sub	sp, #12
    de9c:	af00      	add	r7, sp, #0
    de9e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    dea0:	687b      	ldr	r3, [r7, #4]
    dea2:	781b      	ldrb	r3, [r3, #0]
    dea4:	b29a      	uxth	r2, r3
    dea6:	687b      	ldr	r3, [r7, #4]
    dea8:	3301      	adds	r3, #1
    deaa:	781b      	ldrb	r3, [r3, #0]
    deac:	b29b      	uxth	r3, r3
    deae:	021b      	lsls	r3, r3, #8
    deb0:	b29b      	uxth	r3, r3
    deb2:	4413      	add	r3, r2
    deb4:	b29b      	uxth	r3, r3
}
    deb6:	4618      	mov	r0, r3
    deb8:	370c      	adds	r7, #12
    deba:	46bd      	mov	sp, r7
    debc:	f85d 7b04 	ldr.w	r7, [sp], #4
    dec0:	4770      	bx	lr

0000dec2 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    dec2:	b480      	push	{r7}
    dec4:	b083      	sub	sp, #12
    dec6:	af00      	add	r7, sp, #0
    dec8:	6078      	str	r0, [r7, #4]
	return desc[0];
    deca:	687b      	ldr	r3, [r7, #4]
    decc:	781b      	ldrb	r3, [r3, #0]
}
    dece:	4618      	mov	r0, r3
    ded0:	370c      	adds	r7, #12
    ded2:	46bd      	mov	sp, r7
    ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ded8:	4770      	bx	lr
	...

0000dedc <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    dedc:	b580      	push	{r7, lr}
    dede:	b082      	sub	sp, #8
    dee0:	af00      	add	r7, sp, #0
    dee2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    dee4:	6878      	ldr	r0, [r7, #4]
    dee6:	4b05      	ldr	r3, [pc, #20]	; (defc <usb_desc_next+0x20>)
    dee8:	4798      	blx	r3
    deea:	4603      	mov	r3, r0
    deec:	461a      	mov	r2, r3
    deee:	687b      	ldr	r3, [r7, #4]
    def0:	4413      	add	r3, r2
}
    def2:	4618      	mov	r0, r3
    def4:	3708      	adds	r7, #8
    def6:	46bd      	mov	sp, r7
    def8:	bd80      	pop	{r7, pc}
    defa:	bf00      	nop
    defc:	0000dec3 	.word	0x0000dec3

0000df00 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    df00:	b580      	push	{r7, lr}
    df02:	b08c      	sub	sp, #48	; 0x30
    df04:	af00      	add	r7, sp, #0
    df06:	6078      	str	r0, [r7, #4]
    df08:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    df0a:	687b      	ldr	r3, [r7, #4]
    df0c:	689b      	ldr	r3, [r3, #8]
    df0e:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    df10:	683b      	ldr	r3, [r7, #0]
    df12:	681b      	ldr	r3, [r3, #0]
    df14:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    df16:	2300      	movs	r3, #0
    df18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    df1c:	e08f      	b.n	e03e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    df1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    df20:	2b00      	cmp	r3, #0
    df22:	d102      	bne.n	df2a <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    df24:	f06f 0309 	mvn.w	r3, #9
    df28:	e092      	b.n	e050 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    df2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    df2c:	789b      	ldrb	r3, [r3, #2]
    df2e:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    df30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    df32:	795b      	ldrb	r3, [r3, #5]
    df34:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    df36:	7c7b      	ldrb	r3, [r7, #17]
    df38:	2b02      	cmp	r3, #2
    df3a:	d002      	beq.n	df42 <cdcdf_acm_enable+0x42>
    df3c:	7c7b      	ldrb	r3, [r7, #17]
    df3e:	2b0a      	cmp	r3, #10
    df40:	d121      	bne.n	df86 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    df42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    df46:	6a3a      	ldr	r2, [r7, #32]
    df48:	5cd2      	ldrb	r2, [r2, r3]
    df4a:	7bbb      	ldrb	r3, [r7, #14]
    df4c:	429a      	cmp	r2, r3
    df4e:	d102      	bne.n	df56 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    df50:	f06f 0311 	mvn.w	r3, #17
    df54:	e07c      	b.n	e050 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    df56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    df5a:	6a3a      	ldr	r2, [r7, #32]
    df5c:	5cd3      	ldrb	r3, [r2, r3]
    df5e:	2bff      	cmp	r3, #255	; 0xff
    df60:	d002      	beq.n	df68 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    df62:	f06f 031b 	mvn.w	r3, #27
    df66:	e073      	b.n	e050 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    df68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    df6c:	7bb9      	ldrb	r1, [r7, #14]
    df6e:	6a3a      	ldr	r2, [r7, #32]
    df70:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    df72:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    df74:	683b      	ldr	r3, [r7, #0]
    df76:	685b      	ldr	r3, [r3, #4]
    df78:	2205      	movs	r2, #5
    df7a:	4619      	mov	r1, r3
    df7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    df7e:	4b36      	ldr	r3, [pc, #216]	; (e058 <cdcdf_acm_enable+0x158>)
    df80:	4798      	blx	r3
    df82:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    df84:	e047      	b.n	e016 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    df86:	f06f 0309 	mvn.w	r3, #9
    df8a:	e061      	b.n	e050 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    df8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df8e:	789b      	ldrb	r3, [r3, #2]
    df90:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df94:	78db      	ldrb	r3, [r3, #3]
    df96:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    df9a:	3304      	adds	r3, #4
    df9c:	4618      	mov	r0, r3
    df9e:	4b2f      	ldr	r3, [pc, #188]	; (e05c <cdcdf_acm_enable+0x15c>)
    dfa0:	4798      	blx	r3
    dfa2:	4603      	mov	r3, r0
    dfa4:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    dfa6:	7ebb      	ldrb	r3, [r7, #26]
    dfa8:	7ef9      	ldrb	r1, [r7, #27]
    dfaa:	8bba      	ldrh	r2, [r7, #28]
    dfac:	4618      	mov	r0, r3
    dfae:	4b2c      	ldr	r3, [pc, #176]	; (e060 <cdcdf_acm_enable+0x160>)
    dfb0:	4798      	blx	r3
    dfb2:	4603      	mov	r3, r0
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d002      	beq.n	dfbe <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    dfb8:	f06f 0313 	mvn.w	r3, #19
    dfbc:	e048      	b.n	e050 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    dfbe:	7ebb      	ldrb	r3, [r7, #26]
    dfc0:	b25b      	sxtb	r3, r3
    dfc2:	2b00      	cmp	r3, #0
    dfc4:	da0f      	bge.n	dfe6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    dfc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dfca:	7eb9      	ldrb	r1, [r7, #26]
    dfcc:	6a3a      	ldr	r2, [r7, #32]
    dfce:	4413      	add	r3, r2
    dfd0:	460a      	mov	r2, r1
    dfd2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    dfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dfd8:	6a3a      	ldr	r2, [r7, #32]
    dfda:	4413      	add	r3, r2
    dfdc:	789b      	ldrb	r3, [r3, #2]
    dfde:	4618      	mov	r0, r3
    dfe0:	4b20      	ldr	r3, [pc, #128]	; (e064 <cdcdf_acm_enable+0x164>)
    dfe2:	4798      	blx	r3
    dfe4:	e007      	b.n	dff6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    dfe6:	7eba      	ldrb	r2, [r7, #26]
    dfe8:	6a3b      	ldr	r3, [r7, #32]
    dfea:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    dfec:	6a3b      	ldr	r3, [r7, #32]
    dfee:	791b      	ldrb	r3, [r3, #4]
    dff0:	4618      	mov	r0, r3
    dff2:	4b1c      	ldr	r3, [pc, #112]	; (e064 <cdcdf_acm_enable+0x164>)
    dff4:	4798      	blx	r3
			}
			desc->sod = ep;
    dff6:	683b      	ldr	r3, [r7, #0]
    dff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dffa:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    dffc:	683b      	ldr	r3, [r7, #0]
    dffe:	681b      	ldr	r3, [r3, #0]
    e000:	4618      	mov	r0, r3
    e002:	4b19      	ldr	r3, [pc, #100]	; (e068 <cdcdf_acm_enable+0x168>)
    e004:	4798      	blx	r3
    e006:	4602      	mov	r2, r0
    e008:	683b      	ldr	r3, [r7, #0]
    e00a:	685b      	ldr	r3, [r3, #4]
    e00c:	4619      	mov	r1, r3
    e00e:	4610      	mov	r0, r2
    e010:	4b16      	ldr	r3, [pc, #88]	; (e06c <cdcdf_acm_enable+0x16c>)
    e012:	4798      	blx	r3
    e014:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    e016:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e018:	2b00      	cmp	r3, #0
    e01a:	d1b7      	bne.n	df8c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    e01c:	683b      	ldr	r3, [r7, #0]
    e01e:	681b      	ldr	r3, [r3, #0]
    e020:	4618      	mov	r0, r3
    e022:	4b11      	ldr	r3, [pc, #68]	; (e068 <cdcdf_acm_enable+0x168>)
    e024:	4798      	blx	r3
    e026:	683b      	ldr	r3, [r7, #0]
    e028:	685b      	ldr	r3, [r3, #4]
    e02a:	2204      	movs	r2, #4
    e02c:	4619      	mov	r1, r3
    e02e:	4b0a      	ldr	r3, [pc, #40]	; (e058 <cdcdf_acm_enable+0x158>)
    e030:	4798      	blx	r3
    e032:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    e034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e038:	3301      	adds	r3, #1
    e03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    e03e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e042:	2b01      	cmp	r3, #1
    e044:	f67f af6b 	bls.w	df1e <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    e048:	4b09      	ldr	r3, [pc, #36]	; (e070 <cdcdf_acm_enable+0x170>)
    e04a:	2201      	movs	r2, #1
    e04c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e04e:	2300      	movs	r3, #0
}
    e050:	4618      	mov	r0, r3
    e052:	3730      	adds	r7, #48	; 0x30
    e054:	46bd      	mov	sp, r7
    e056:	bd80      	pop	{r7, pc}
    e058:	0000f2c1 	.word	0x0000f2c1
    e05c:	0000de99 	.word	0x0000de99
    e060:	00005689 	.word	0x00005689
    e064:	00005775 	.word	0x00005775
    e068:	0000dedd 	.word	0x0000dedd
    e06c:	0000f31d 	.word	0x0000f31d
    e070:	20002224 	.word	0x20002224

0000e074 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    e074:	b580      	push	{r7, lr}
    e076:	b088      	sub	sp, #32
    e078:	af00      	add	r7, sp, #0
    e07a:	6078      	str	r0, [r7, #4]
    e07c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e07e:	687b      	ldr	r3, [r7, #4]
    e080:	689b      	ldr	r3, [r3, #8]
    e082:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    e084:	683b      	ldr	r3, [r7, #0]
    e086:	2b00      	cmp	r3, #0
    e088:	d00c      	beq.n	e0a4 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    e08a:	683b      	ldr	r3, [r7, #0]
    e08c:	681b      	ldr	r3, [r3, #0]
    e08e:	795b      	ldrb	r3, [r3, #5]
    e090:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    e092:	7c7b      	ldrb	r3, [r7, #17]
    e094:	2b02      	cmp	r3, #2
    e096:	d005      	beq.n	e0a4 <cdcdf_acm_disable+0x30>
    e098:	7c7b      	ldrb	r3, [r7, #17]
    e09a:	2b0a      	cmp	r3, #10
    e09c:	d002      	beq.n	e0a4 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    e09e:	f06f 0309 	mvn.w	r3, #9
    e0a2:	e035      	b.n	e110 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    e0a4:	2300      	movs	r3, #0
    e0a6:	77fb      	strb	r3, [r7, #31]
    e0a8:	e01f      	b.n	e0ea <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    e0aa:	7ffb      	ldrb	r3, [r7, #31]
    e0ac:	69ba      	ldr	r2, [r7, #24]
    e0ae:	5cd3      	ldrb	r3, [r2, r3]
    e0b0:	2bff      	cmp	r3, #255	; 0xff
    e0b2:	d016      	beq.n	e0e2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    e0b4:	7ffb      	ldrb	r3, [r7, #31]
    e0b6:	69ba      	ldr	r2, [r7, #24]
    e0b8:	21ff      	movs	r1, #255	; 0xff
    e0ba:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    e0bc:	7ffb      	ldrb	r3, [r7, #31]
    e0be:	69ba      	ldr	r2, [r7, #24]
    e0c0:	4413      	add	r3, r2
    e0c2:	789b      	ldrb	r3, [r3, #2]
    e0c4:	2bff      	cmp	r3, #255	; 0xff
    e0c6:	d00d      	beq.n	e0e4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    e0c8:	7ffb      	ldrb	r3, [r7, #31]
    e0ca:	69ba      	ldr	r2, [r7, #24]
    e0cc:	4413      	add	r3, r2
    e0ce:	789b      	ldrb	r3, [r3, #2]
    e0d0:	4618      	mov	r0, r3
    e0d2:	4b11      	ldr	r3, [pc, #68]	; (e118 <cdcdf_acm_disable+0xa4>)
    e0d4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    e0d6:	7ffb      	ldrb	r3, [r7, #31]
    e0d8:	69ba      	ldr	r2, [r7, #24]
    e0da:	4413      	add	r3, r2
    e0dc:	22ff      	movs	r2, #255	; 0xff
    e0de:	709a      	strb	r2, [r3, #2]
    e0e0:	e000      	b.n	e0e4 <cdcdf_acm_disable+0x70>
			continue;
    e0e2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    e0e4:	7ffb      	ldrb	r3, [r7, #31]
    e0e6:	3301      	adds	r3, #1
    e0e8:	77fb      	strb	r3, [r7, #31]
    e0ea:	7ffb      	ldrb	r3, [r7, #31]
    e0ec:	2b01      	cmp	r3, #1
    e0ee:	d9dc      	bls.n	e0aa <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    e0f0:	69bb      	ldr	r3, [r7, #24]
    e0f2:	791b      	ldrb	r3, [r3, #4]
    e0f4:	2bff      	cmp	r3, #255	; 0xff
    e0f6:	d007      	beq.n	e108 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    e0f8:	69bb      	ldr	r3, [r7, #24]
    e0fa:	791b      	ldrb	r3, [r3, #4]
    e0fc:	4618      	mov	r0, r3
    e0fe:	4b06      	ldr	r3, [pc, #24]	; (e118 <cdcdf_acm_disable+0xa4>)
    e100:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    e102:	69bb      	ldr	r3, [r7, #24]
    e104:	22ff      	movs	r2, #255	; 0xff
    e106:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    e108:	4b04      	ldr	r3, [pc, #16]	; (e11c <cdcdf_acm_disable+0xa8>)
    e10a:	2200      	movs	r2, #0
    e10c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e10e:	2300      	movs	r3, #0
}
    e110:	4618      	mov	r0, r3
    e112:	3720      	adds	r7, #32
    e114:	46bd      	mov	sp, r7
    e116:	bd80      	pop	{r7, pc}
    e118:	00005725 	.word	0x00005725
    e11c:	20002224 	.word	0x20002224

0000e120 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    e120:	b580      	push	{r7, lr}
    e122:	b084      	sub	sp, #16
    e124:	af00      	add	r7, sp, #0
    e126:	60f8      	str	r0, [r7, #12]
    e128:	460b      	mov	r3, r1
    e12a:	607a      	str	r2, [r7, #4]
    e12c:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    e12e:	7afb      	ldrb	r3, [r7, #11]
    e130:	2b01      	cmp	r3, #1
    e132:	d009      	beq.n	e148 <cdcdf_acm_ctrl+0x28>
    e134:	2b02      	cmp	r3, #2
    e136:	d00d      	beq.n	e154 <cdcdf_acm_ctrl+0x34>
    e138:	2b00      	cmp	r3, #0
    e13a:	d10e      	bne.n	e15a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    e13c:	6879      	ldr	r1, [r7, #4]
    e13e:	68f8      	ldr	r0, [r7, #12]
    e140:	4b09      	ldr	r3, [pc, #36]	; (e168 <cdcdf_acm_ctrl+0x48>)
    e142:	4798      	blx	r3
    e144:	4603      	mov	r3, r0
    e146:	e00a      	b.n	e15e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    e148:	6879      	ldr	r1, [r7, #4]
    e14a:	68f8      	ldr	r0, [r7, #12]
    e14c:	4b07      	ldr	r3, [pc, #28]	; (e16c <cdcdf_acm_ctrl+0x4c>)
    e14e:	4798      	blx	r3
    e150:	4603      	mov	r3, r0
    e152:	e004      	b.n	e15e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    e154:	f06f 031a 	mvn.w	r3, #26
    e158:	e001      	b.n	e15e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    e15a:	f06f 030c 	mvn.w	r3, #12
	}
}
    e15e:	4618      	mov	r0, r3
    e160:	3710      	adds	r7, #16
    e162:	46bd      	mov	sp, r7
    e164:	bd80      	pop	{r7, pc}
    e166:	bf00      	nop
    e168:	0000df01 	.word	0x0000df01
    e16c:	0000e075 	.word	0x0000e075

0000e170 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e170:	b590      	push	{r4, r7, lr}
    e172:	b087      	sub	sp, #28
    e174:	af00      	add	r7, sp, #0
    e176:	4603      	mov	r3, r0
    e178:	6039      	str	r1, [r7, #0]
    e17a:	71fb      	strb	r3, [r7, #7]
    e17c:	4613      	mov	r3, r2
    e17e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    e180:	683b      	ldr	r3, [r7, #0]
    e182:	799a      	ldrb	r2, [r3, #6]
    e184:	79db      	ldrb	r3, [r3, #7]
    e186:	021b      	lsls	r3, r3, #8
    e188:	4313      	orrs	r3, r2
    e18a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    e18c:	4b2b      	ldr	r3, [pc, #172]	; (e23c <cdcdf_acm_set_req+0xcc>)
    e18e:	4798      	blx	r3
    e190:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    e192:	683b      	ldr	r3, [r7, #0]
    e194:	785b      	ldrb	r3, [r3, #1]
    e196:	2b20      	cmp	r3, #32
    e198:	d002      	beq.n	e1a0 <cdcdf_acm_set_req+0x30>
    e19a:	2b22      	cmp	r3, #34	; 0x22
    e19c:	d034      	beq.n	e208 <cdcdf_acm_set_req+0x98>
    e19e:	e046      	b.n	e22e <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e1a0:	8afb      	ldrh	r3, [r7, #22]
    e1a2:	2b07      	cmp	r3, #7
    e1a4:	d002      	beq.n	e1ac <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    e1a6:	f04f 33ff 	mov.w	r3, #4294967295
    e1aa:	e042      	b.n	e232 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    e1ac:	79bb      	ldrb	r3, [r7, #6]
    e1ae:	2b00      	cmp	r3, #0
    e1b0:	d107      	bne.n	e1c2 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    e1b2:	8afa      	ldrh	r2, [r7, #22]
    e1b4:	79f8      	ldrb	r0, [r7, #7]
    e1b6:	2300      	movs	r3, #0
    e1b8:	6939      	ldr	r1, [r7, #16]
    e1ba:	4c21      	ldr	r4, [pc, #132]	; (e240 <cdcdf_acm_set_req+0xd0>)
    e1bc:	47a0      	blx	r4
    e1be:	4603      	mov	r3, r0
    e1c0:	e037      	b.n	e232 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    e1c2:	693a      	ldr	r2, [r7, #16]
    e1c4:	f107 0308 	add.w	r3, r7, #8
    e1c8:	6810      	ldr	r0, [r2, #0]
    e1ca:	6018      	str	r0, [r3, #0]
    e1cc:	8891      	ldrh	r1, [r2, #4]
    e1ce:	7992      	ldrb	r2, [r2, #6]
    e1d0:	8099      	strh	r1, [r3, #4]
    e1d2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    e1d4:	4b1b      	ldr	r3, [pc, #108]	; (e244 <cdcdf_acm_set_req+0xd4>)
    e1d6:	681b      	ldr	r3, [r3, #0]
    e1d8:	2b00      	cmp	r3, #0
    e1da:	d008      	beq.n	e1ee <cdcdf_acm_set_req+0x7e>
    e1dc:	4b19      	ldr	r3, [pc, #100]	; (e244 <cdcdf_acm_set_req+0xd4>)
    e1de:	681b      	ldr	r3, [r3, #0]
    e1e0:	f107 0208 	add.w	r2, r7, #8
    e1e4:	4610      	mov	r0, r2
    e1e6:	4798      	blx	r3
    e1e8:	4603      	mov	r3, r0
    e1ea:	2b00      	cmp	r3, #0
    e1ec:	d00a      	beq.n	e204 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    e1ee:	4b16      	ldr	r3, [pc, #88]	; (e248 <cdcdf_acm_set_req+0xd8>)
    e1f0:	f107 0208 	add.w	r2, r7, #8
    e1f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    e1f8:	6018      	str	r0, [r3, #0]
    e1fa:	3304      	adds	r3, #4
    e1fc:	8019      	strh	r1, [r3, #0]
    e1fe:	3302      	adds	r3, #2
    e200:	0c0a      	lsrs	r2, r1, #16
    e202:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    e204:	2300      	movs	r3, #0
    e206:	e014      	b.n	e232 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    e208:	2300      	movs	r3, #0
    e20a:	2200      	movs	r2, #0
    e20c:	2100      	movs	r1, #0
    e20e:	2000      	movs	r0, #0
    e210:	4c0b      	ldr	r4, [pc, #44]	; (e240 <cdcdf_acm_set_req+0xd0>)
    e212:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    e214:	4b0d      	ldr	r3, [pc, #52]	; (e24c <cdcdf_acm_set_req+0xdc>)
    e216:	681b      	ldr	r3, [r3, #0]
    e218:	2b00      	cmp	r3, #0
    e21a:	d006      	beq.n	e22a <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    e21c:	4b0b      	ldr	r3, [pc, #44]	; (e24c <cdcdf_acm_set_req+0xdc>)
    e21e:	681b      	ldr	r3, [r3, #0]
    e220:	683a      	ldr	r2, [r7, #0]
    e222:	8852      	ldrh	r2, [r2, #2]
    e224:	b292      	uxth	r2, r2
    e226:	4610      	mov	r0, r2
    e228:	4798      	blx	r3
		}
		return ERR_NONE;
    e22a:	2300      	movs	r3, #0
    e22c:	e001      	b.n	e232 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    e22e:	f06f 030c 	mvn.w	r3, #12
	}
}
    e232:	4618      	mov	r0, r3
    e234:	371c      	adds	r7, #28
    e236:	46bd      	mov	sp, r7
    e238:	bd90      	pop	{r4, r7, pc}
    e23a:	bf00      	nop
    e23c:	0000f1bd 	.word	0x0000f1bd
    e240:	0000f031 	.word	0x0000f031
    e244:	20002238 	.word	0x20002238
    e248:	2000222c 	.word	0x2000222c
    e24c:	20002234 	.word	0x20002234

0000e250 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e250:	b590      	push	{r4, r7, lr}
    e252:	b085      	sub	sp, #20
    e254:	af00      	add	r7, sp, #0
    e256:	4603      	mov	r3, r0
    e258:	6039      	str	r1, [r7, #0]
    e25a:	71fb      	strb	r3, [r7, #7]
    e25c:	4613      	mov	r3, r2
    e25e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    e260:	683b      	ldr	r3, [r7, #0]
    e262:	799a      	ldrb	r2, [r3, #6]
    e264:	79db      	ldrb	r3, [r3, #7]
    e266:	021b      	lsls	r3, r3, #8
    e268:	4313      	orrs	r3, r2
    e26a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    e26c:	79bb      	ldrb	r3, [r7, #6]
    e26e:	2b01      	cmp	r3, #1
    e270:	d101      	bne.n	e276 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    e272:	2300      	movs	r3, #0
    e274:	e013      	b.n	e29e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    e276:	683b      	ldr	r3, [r7, #0]
    e278:	785b      	ldrb	r3, [r3, #1]
    e27a:	2b21      	cmp	r3, #33	; 0x21
    e27c:	d10d      	bne.n	e29a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e27e:	89fb      	ldrh	r3, [r7, #14]
    e280:	2b07      	cmp	r3, #7
    e282:	d002      	beq.n	e28a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    e284:	f04f 33ff 	mov.w	r3, #4294967295
    e288:	e009      	b.n	e29e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    e28a:	89fa      	ldrh	r2, [r7, #14]
    e28c:	79f8      	ldrb	r0, [r7, #7]
    e28e:	2300      	movs	r3, #0
    e290:	4905      	ldr	r1, [pc, #20]	; (e2a8 <cdcdf_acm_get_req+0x58>)
    e292:	4c06      	ldr	r4, [pc, #24]	; (e2ac <cdcdf_acm_get_req+0x5c>)
    e294:	47a0      	blx	r4
    e296:	4603      	mov	r3, r0
    e298:	e001      	b.n	e29e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    e29a:	f06f 030c 	mvn.w	r3, #12
	}
}
    e29e:	4618      	mov	r0, r3
    e2a0:	3714      	adds	r7, #20
    e2a2:	46bd      	mov	sp, r7
    e2a4:	bd90      	pop	{r4, r7, pc}
    e2a6:	bf00      	nop
    e2a8:	2000222c 	.word	0x2000222c
    e2ac:	0000f031 	.word	0x0000f031

0000e2b0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e2b0:	b580      	push	{r7, lr}
    e2b2:	b082      	sub	sp, #8
    e2b4:	af00      	add	r7, sp, #0
    e2b6:	4603      	mov	r3, r0
    e2b8:	6039      	str	r1, [r7, #0]
    e2ba:	71fb      	strb	r3, [r7, #7]
    e2bc:	4613      	mov	r3, r2
    e2be:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    e2c0:	683b      	ldr	r3, [r7, #0]
    e2c2:	781b      	ldrb	r3, [r3, #0]
    e2c4:	095b      	lsrs	r3, r3, #5
    e2c6:	b2db      	uxtb	r3, r3
    e2c8:	f003 0303 	and.w	r3, r3, #3
    e2cc:	2b01      	cmp	r3, #1
    e2ce:	d002      	beq.n	e2d6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    e2d0:	f06f 0309 	mvn.w	r3, #9
    e2d4:	e026      	b.n	e324 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    e2d6:	683b      	ldr	r3, [r7, #0]
    e2d8:	889b      	ldrh	r3, [r3, #4]
    e2da:	b29a      	uxth	r2, r3
    e2dc:	4b13      	ldr	r3, [pc, #76]	; (e32c <cdcdf_acm_req+0x7c>)
    e2de:	781b      	ldrb	r3, [r3, #0]
    e2e0:	b29b      	uxth	r3, r3
    e2e2:	429a      	cmp	r2, r3
    e2e4:	d007      	beq.n	e2f6 <cdcdf_acm_req+0x46>
    e2e6:	683b      	ldr	r3, [r7, #0]
    e2e8:	889b      	ldrh	r3, [r3, #4]
    e2ea:	b29a      	uxth	r2, r3
    e2ec:	4b0f      	ldr	r3, [pc, #60]	; (e32c <cdcdf_acm_req+0x7c>)
    e2ee:	785b      	ldrb	r3, [r3, #1]
    e2f0:	b29b      	uxth	r3, r3
    e2f2:	429a      	cmp	r2, r3
    e2f4:	d114      	bne.n	e320 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    e2f6:	683b      	ldr	r3, [r7, #0]
    e2f8:	781b      	ldrb	r3, [r3, #0]
    e2fa:	b25b      	sxtb	r3, r3
    e2fc:	2b00      	cmp	r3, #0
    e2fe:	da07      	bge.n	e310 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    e300:	79ba      	ldrb	r2, [r7, #6]
    e302:	79fb      	ldrb	r3, [r7, #7]
    e304:	6839      	ldr	r1, [r7, #0]
    e306:	4618      	mov	r0, r3
    e308:	4b09      	ldr	r3, [pc, #36]	; (e330 <cdcdf_acm_req+0x80>)
    e30a:	4798      	blx	r3
    e30c:	4603      	mov	r3, r0
    e30e:	e009      	b.n	e324 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    e310:	79ba      	ldrb	r2, [r7, #6]
    e312:	79fb      	ldrb	r3, [r7, #7]
    e314:	6839      	ldr	r1, [r7, #0]
    e316:	4618      	mov	r0, r3
    e318:	4b06      	ldr	r3, [pc, #24]	; (e334 <cdcdf_acm_req+0x84>)
    e31a:	4798      	blx	r3
    e31c:	4603      	mov	r3, r0
    e31e:	e001      	b.n	e324 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    e320:	f06f 0309 	mvn.w	r3, #9
	}
}
    e324:	4618      	mov	r0, r3
    e326:	3708      	adds	r7, #8
    e328:	46bd      	mov	sp, r7
    e32a:	bd80      	pop	{r7, pc}
    e32c:	20002224 	.word	0x20002224
    e330:	0000e251 	.word	0x0000e251
    e334:	0000e171 	.word	0x0000e171

0000e338 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    e338:	b580      	push	{r7, lr}
    e33a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    e33c:	4b0b      	ldr	r3, [pc, #44]	; (e36c <cdcdf_acm_init+0x34>)
    e33e:	4798      	blx	r3
    e340:	4603      	mov	r3, r0
    e342:	2b01      	cmp	r3, #1
    e344:	d902      	bls.n	e34c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    e346:	f06f 0310 	mvn.w	r3, #16
    e34a:	e00d      	b.n	e368 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    e34c:	4b08      	ldr	r3, [pc, #32]	; (e370 <cdcdf_acm_init+0x38>)
    e34e:	4a09      	ldr	r2, [pc, #36]	; (e374 <cdcdf_acm_init+0x3c>)
    e350:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    e352:	4b07      	ldr	r3, [pc, #28]	; (e370 <cdcdf_acm_init+0x38>)
    e354:	4a08      	ldr	r2, [pc, #32]	; (e378 <cdcdf_acm_init+0x40>)
    e356:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    e358:	4805      	ldr	r0, [pc, #20]	; (e370 <cdcdf_acm_init+0x38>)
    e35a:	4b08      	ldr	r3, [pc, #32]	; (e37c <cdcdf_acm_init+0x44>)
    e35c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    e35e:	4908      	ldr	r1, [pc, #32]	; (e380 <cdcdf_acm_init+0x48>)
    e360:	2001      	movs	r0, #1
    e362:	4b08      	ldr	r3, [pc, #32]	; (e384 <cdcdf_acm_init+0x4c>)
    e364:	4798      	blx	r3
	return ERR_NONE;
    e366:	2300      	movs	r3, #0
}
    e368:	4618      	mov	r0, r3
    e36a:	bd80      	pop	{r7, pc}
    e36c:	0000f1d5 	.word	0x0000f1d5
    e370:	20002218 	.word	0x20002218
    e374:	0000e121 	.word	0x0000e121
    e378:	20002224 	.word	0x20002224
    e37c:	0000f13d 	.word	0x0000f13d
    e380:	20000178 	.word	0x20000178
    e384:	0000f06d 	.word	0x0000f06d

0000e388 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    e388:	b590      	push	{r4, r7, lr}
    e38a:	b083      	sub	sp, #12
    e38c:	af00      	add	r7, sp, #0
    e38e:	6078      	str	r0, [r7, #4]
    e390:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    e392:	4b0b      	ldr	r3, [pc, #44]	; (e3c0 <cdcdf_acm_read+0x38>)
    e394:	4798      	blx	r3
    e396:	4603      	mov	r3, r0
    e398:	f083 0301 	eor.w	r3, r3, #1
    e39c:	b2db      	uxtb	r3, r3
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d002      	beq.n	e3a8 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    e3a2:	f06f 0310 	mvn.w	r3, #16
    e3a6:	e007      	b.n	e3b8 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    e3a8:	4b06      	ldr	r3, [pc, #24]	; (e3c4 <cdcdf_acm_read+0x3c>)
    e3aa:	7918      	ldrb	r0, [r3, #4]
    e3ac:	2300      	movs	r3, #0
    e3ae:	683a      	ldr	r2, [r7, #0]
    e3b0:	6879      	ldr	r1, [r7, #4]
    e3b2:	4c05      	ldr	r4, [pc, #20]	; (e3c8 <cdcdf_acm_read+0x40>)
    e3b4:	47a0      	blx	r4
    e3b6:	4603      	mov	r3, r0
}
    e3b8:	4618      	mov	r0, r3
    e3ba:	370c      	adds	r7, #12
    e3bc:	46bd      	mov	sp, r7
    e3be:	bd90      	pop	{r4, r7, pc}
    e3c0:	0000e4ad 	.word	0x0000e4ad
    e3c4:	20002224 	.word	0x20002224
    e3c8:	0000f031 	.word	0x0000f031

0000e3cc <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    e3cc:	b590      	push	{r4, r7, lr}
    e3ce:	b083      	sub	sp, #12
    e3d0:	af00      	add	r7, sp, #0
    e3d2:	6078      	str	r0, [r7, #4]
    e3d4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    e3d6:	4b0b      	ldr	r3, [pc, #44]	; (e404 <cdcdf_acm_write+0x38>)
    e3d8:	4798      	blx	r3
    e3da:	4603      	mov	r3, r0
    e3dc:	f083 0301 	eor.w	r3, r3, #1
    e3e0:	b2db      	uxtb	r3, r3
    e3e2:	2b00      	cmp	r3, #0
    e3e4:	d002      	beq.n	e3ec <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    e3e6:	f06f 0310 	mvn.w	r3, #16
    e3ea:	e007      	b.n	e3fc <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    e3ec:	4b06      	ldr	r3, [pc, #24]	; (e408 <cdcdf_acm_write+0x3c>)
    e3ee:	78d8      	ldrb	r0, [r3, #3]
    e3f0:	2301      	movs	r3, #1
    e3f2:	683a      	ldr	r2, [r7, #0]
    e3f4:	6879      	ldr	r1, [r7, #4]
    e3f6:	4c05      	ldr	r4, [pc, #20]	; (e40c <cdcdf_acm_write+0x40>)
    e3f8:	47a0      	blx	r4
    e3fa:	4603      	mov	r3, r0
}
    e3fc:	4618      	mov	r0, r3
    e3fe:	370c      	adds	r7, #12
    e400:	46bd      	mov	sp, r7
    e402:	bd90      	pop	{r4, r7, pc}
    e404:	0000e4ad 	.word	0x0000e4ad
    e408:	20002224 	.word	0x20002224
    e40c:	0000f031 	.word	0x0000f031

0000e410 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    e410:	b580      	push	{r7, lr}
    e412:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    e414:	4b05      	ldr	r3, [pc, #20]	; (e42c <cdcdf_acm_stop_xfer+0x1c>)
    e416:	78db      	ldrb	r3, [r3, #3]
    e418:	4618      	mov	r0, r3
    e41a:	4b05      	ldr	r3, [pc, #20]	; (e430 <cdcdf_acm_stop_xfer+0x20>)
    e41c:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    e41e:	4b03      	ldr	r3, [pc, #12]	; (e42c <cdcdf_acm_stop_xfer+0x1c>)
    e420:	791b      	ldrb	r3, [r3, #4]
    e422:	4618      	mov	r0, r3
    e424:	4b02      	ldr	r3, [pc, #8]	; (e430 <cdcdf_acm_stop_xfer+0x20>)
    e426:	4798      	blx	r3
}
    e428:	bf00      	nop
    e42a:	bd80      	pop	{r7, pc}
    e42c:	20002224 	.word	0x20002224
    e430:	0000594d 	.word	0x0000594d

0000e434 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    e434:	b580      	push	{r7, lr}
    e436:	b082      	sub	sp, #8
    e438:	af00      	add	r7, sp, #0
    e43a:	4603      	mov	r3, r0
    e43c:	6039      	str	r1, [r7, #0]
    e43e:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    e440:	79fb      	ldrb	r3, [r7, #7]
    e442:	2b03      	cmp	r3, #3
    e444:	d822      	bhi.n	e48c <cdcdf_acm_register_callback+0x58>
    e446:	a201      	add	r2, pc, #4	; (adr r2, e44c <cdcdf_acm_register_callback+0x18>)
    e448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e44c:	0000e45d 	.word	0x0000e45d
    e450:	0000e46d 	.word	0x0000e46d
    e454:	0000e47d 	.word	0x0000e47d
    e458:	0000e485 	.word	0x0000e485
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    e45c:	4b0f      	ldr	r3, [pc, #60]	; (e49c <cdcdf_acm_register_callback+0x68>)
    e45e:	791b      	ldrb	r3, [r3, #4]
    e460:	683a      	ldr	r2, [r7, #0]
    e462:	2102      	movs	r1, #2
    e464:	4618      	mov	r0, r3
    e466:	4b0e      	ldr	r3, [pc, #56]	; (e4a0 <cdcdf_acm_register_callback+0x6c>)
    e468:	4798      	blx	r3
		break;
    e46a:	e012      	b.n	e492 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    e46c:	4b0b      	ldr	r3, [pc, #44]	; (e49c <cdcdf_acm_register_callback+0x68>)
    e46e:	78db      	ldrb	r3, [r3, #3]
    e470:	683a      	ldr	r2, [r7, #0]
    e472:	2102      	movs	r1, #2
    e474:	4618      	mov	r0, r3
    e476:	4b0a      	ldr	r3, [pc, #40]	; (e4a0 <cdcdf_acm_register_callback+0x6c>)
    e478:	4798      	blx	r3
		break;
    e47a:	e00a      	b.n	e492 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    e47c:	4a09      	ldr	r2, [pc, #36]	; (e4a4 <cdcdf_acm_register_callback+0x70>)
    e47e:	683b      	ldr	r3, [r7, #0]
    e480:	6013      	str	r3, [r2, #0]
		break;
    e482:	e006      	b.n	e492 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    e484:	4a08      	ldr	r2, [pc, #32]	; (e4a8 <cdcdf_acm_register_callback+0x74>)
    e486:	683b      	ldr	r3, [r7, #0]
    e488:	6013      	str	r3, [r2, #0]
		break;
    e48a:	e002      	b.n	e492 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    e48c:	f06f 030c 	mvn.w	r3, #12
    e490:	e000      	b.n	e494 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    e492:	2300      	movs	r3, #0
}
    e494:	4618      	mov	r0, r3
    e496:	3708      	adds	r7, #8
    e498:	46bd      	mov	sp, r7
    e49a:	bd80      	pop	{r7, pc}
    e49c:	20002224 	.word	0x20002224
    e4a0:	00005a79 	.word	0x00005a79
    e4a4:	20002238 	.word	0x20002238
    e4a8:	20002234 	.word	0x20002234

0000e4ac <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    e4ac:	b480      	push	{r7}
    e4ae:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    e4b0:	4b03      	ldr	r3, [pc, #12]	; (e4c0 <cdcdf_acm_is_enabled+0x14>)
    e4b2:	795b      	ldrb	r3, [r3, #5]
}
    e4b4:	4618      	mov	r0, r3
    e4b6:	46bd      	mov	sp, r7
    e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4bc:	4770      	bx	lr
    e4be:	bf00      	nop
    e4c0:	20002224 	.word	0x20002224

0000e4c4 <usb_get_u16>:
{
    e4c4:	b480      	push	{r7}
    e4c6:	b083      	sub	sp, #12
    e4c8:	af00      	add	r7, sp, #0
    e4ca:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e4cc:	687b      	ldr	r3, [r7, #4]
    e4ce:	781b      	ldrb	r3, [r3, #0]
    e4d0:	b29a      	uxth	r2, r3
    e4d2:	687b      	ldr	r3, [r7, #4]
    e4d4:	3301      	adds	r3, #1
    e4d6:	781b      	ldrb	r3, [r3, #0]
    e4d8:	b29b      	uxth	r3, r3
    e4da:	021b      	lsls	r3, r3, #8
    e4dc:	b29b      	uxth	r3, r3
    e4de:	4413      	add	r3, r2
    e4e0:	b29b      	uxth	r3, r3
}
    e4e2:	4618      	mov	r0, r3
    e4e4:	370c      	adds	r7, #12
    e4e6:	46bd      	mov	sp, r7
    e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4ec:	4770      	bx	lr

0000e4ee <usb_desc_len>:
{
    e4ee:	b480      	push	{r7}
    e4f0:	b083      	sub	sp, #12
    e4f2:	af00      	add	r7, sp, #0
    e4f4:	6078      	str	r0, [r7, #4]
	return desc[0];
    e4f6:	687b      	ldr	r3, [r7, #4]
    e4f8:	781b      	ldrb	r3, [r3, #0]
}
    e4fa:	4618      	mov	r0, r3
    e4fc:	370c      	adds	r7, #12
    e4fe:	46bd      	mov	sp, r7
    e500:	f85d 7b04 	ldr.w	r7, [sp], #4
    e504:	4770      	bx	lr
	...

0000e508 <usb_desc_next>:
{
    e508:	b580      	push	{r7, lr}
    e50a:	b082      	sub	sp, #8
    e50c:	af00      	add	r7, sp, #0
    e50e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e510:	6878      	ldr	r0, [r7, #4]
    e512:	4b05      	ldr	r3, [pc, #20]	; (e528 <usb_desc_next+0x20>)
    e514:	4798      	blx	r3
    e516:	4603      	mov	r3, r0
    e518:	461a      	mov	r2, r3
    e51a:	687b      	ldr	r3, [r7, #4]
    e51c:	4413      	add	r3, r2
}
    e51e:	4618      	mov	r0, r3
    e520:	3708      	adds	r7, #8
    e522:	46bd      	mov	sp, r7
    e524:	bd80      	pop	{r7, pc}
    e526:	bf00      	nop
    e528:	0000e4ef 	.word	0x0000e4ef

0000e52c <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    e52c:	b580      	push	{r7, lr}
    e52e:	b082      	sub	sp, #8
    e530:	af00      	add	r7, sp, #0
    e532:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e534:	687b      	ldr	r3, [r7, #4]
    e536:	3302      	adds	r3, #2
    e538:	4618      	mov	r0, r3
    e53a:	4b03      	ldr	r3, [pc, #12]	; (e548 <usb_cfg_desc_total_len+0x1c>)
    e53c:	4798      	blx	r3
    e53e:	4603      	mov	r3, r0
}
    e540:	4618      	mov	r0, r3
    e542:	3708      	adds	r7, #8
    e544:	46bd      	mov	sp, r7
    e546:	bd80      	pop	{r7, pc}
    e548:	0000e4c5 	.word	0x0000e4c5

0000e54c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    e54c:	b590      	push	{r4, r7, lr}
    e54e:	b085      	sub	sp, #20
    e550:	af00      	add	r7, sp, #0
    e552:	4603      	mov	r3, r0
    e554:	6039      	str	r1, [r7, #0]
    e556:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    e558:	2300      	movs	r3, #0
    e55a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    e55c:	683b      	ldr	r3, [r7, #0]
    e55e:	799a      	ldrb	r2, [r3, #6]
    e560:	79db      	ldrb	r3, [r3, #7]
    e562:	021b      	lsls	r3, r3, #8
    e564:	4313      	orrs	r3, r2
    e566:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    e568:	897b      	ldrh	r3, [r7, #10]
    e56a:	2b12      	cmp	r3, #18
    e56c:	d901      	bls.n	e572 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    e56e:	2312      	movs	r3, #18
    e570:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    e572:	68fb      	ldr	r3, [r7, #12]
    e574:	2b00      	cmp	r3, #0
    e576:	d10a      	bne.n	e58e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    e578:	4b0f      	ldr	r3, [pc, #60]	; (e5b8 <usbdc_get_dev_desc+0x6c>)
    e57a:	681b      	ldr	r3, [r3, #0]
    e57c:	6818      	ldr	r0, [r3, #0]
    e57e:	4b0e      	ldr	r3, [pc, #56]	; (e5b8 <usbdc_get_dev_desc+0x6c>)
    e580:	681b      	ldr	r3, [r3, #0]
    e582:	685b      	ldr	r3, [r3, #4]
    e584:	2201      	movs	r2, #1
    e586:	4619      	mov	r1, r3
    e588:	4b0c      	ldr	r3, [pc, #48]	; (e5bc <usbdc_get_dev_desc+0x70>)
    e58a:	4798      	blx	r3
    e58c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    e58e:	68fb      	ldr	r3, [r7, #12]
    e590:	2b00      	cmp	r3, #0
    e592:	d101      	bne.n	e598 <usbdc_get_dev_desc+0x4c>
		return false;
    e594:	2300      	movs	r3, #0
    e596:	e00b      	b.n	e5b0 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    e598:	897a      	ldrh	r2, [r7, #10]
    e59a:	79f8      	ldrb	r0, [r7, #7]
    e59c:	2300      	movs	r3, #0
    e59e:	68f9      	ldr	r1, [r7, #12]
    e5a0:	4c07      	ldr	r4, [pc, #28]	; (e5c0 <usbdc_get_dev_desc+0x74>)
    e5a2:	47a0      	blx	r4
    e5a4:	4603      	mov	r3, r0
    e5a6:	2b00      	cmp	r3, #0
    e5a8:	d001      	beq.n	e5ae <usbdc_get_dev_desc+0x62>
		return false;
    e5aa:	2300      	movs	r3, #0
    e5ac:	e000      	b.n	e5b0 <usbdc_get_dev_desc+0x64>
	}
	return true;
    e5ae:	2301      	movs	r3, #1
}
    e5b0:	4618      	mov	r0, r3
    e5b2:	3714      	adds	r7, #20
    e5b4:	46bd      	mov	sp, r7
    e5b6:	bd90      	pop	{r4, r7, pc}
    e5b8:	2000223c 	.word	0x2000223c
    e5bc:	0000f2c1 	.word	0x0000f2c1
    e5c0:	0000f031 	.word	0x0000f031

0000e5c4 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    e5c4:	b590      	push	{r4, r7, lr}
    e5c6:	b087      	sub	sp, #28
    e5c8:	af00      	add	r7, sp, #0
    e5ca:	4603      	mov	r3, r0
    e5cc:	6039      	str	r1, [r7, #0]
    e5ce:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    e5d0:	2300      	movs	r3, #0
    e5d2:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    e5d4:	683b      	ldr	r3, [r7, #0]
    e5d6:	799a      	ldrb	r2, [r3, #6]
    e5d8:	79db      	ldrb	r3, [r3, #7]
    e5da:	021b      	lsls	r3, r3, #8
    e5dc:	4313      	orrs	r3, r2
    e5de:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    e5e0:	683b      	ldr	r3, [r7, #0]
    e5e2:	885b      	ldrh	r3, [r3, #2]
    e5e4:	b29b      	uxth	r3, r3
    e5e6:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e5e8:	8a7a      	ldrh	r2, [r7, #18]
    e5ea:	4b1e      	ldr	r3, [pc, #120]	; (e664 <usbdc_get_cfg_desc+0xa0>)
    e5ec:	7f1b      	ldrb	r3, [r3, #28]
    e5ee:	3b01      	subs	r3, #1
    e5f0:	4013      	ands	r3, r2
    e5f2:	2b00      	cmp	r3, #0
    e5f4:	bf0c      	ite	eq
    e5f6:	2301      	moveq	r3, #1
    e5f8:	2300      	movne	r3, #0
    e5fa:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e5fc:	697b      	ldr	r3, [r7, #20]
    e5fe:	2b00      	cmp	r3, #0
    e600:	d10c      	bne.n	e61c <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    e602:	4b18      	ldr	r3, [pc, #96]	; (e664 <usbdc_get_cfg_desc+0xa0>)
    e604:	681b      	ldr	r3, [r3, #0]
    e606:	6818      	ldr	r0, [r3, #0]
    e608:	4b16      	ldr	r3, [pc, #88]	; (e664 <usbdc_get_cfg_desc+0xa0>)
    e60a:	681b      	ldr	r3, [r3, #0]
    e60c:	6859      	ldr	r1, [r3, #4]
    e60e:	7c3b      	ldrb	r3, [r7, #16]
    e610:	3301      	adds	r3, #1
    e612:	b2db      	uxtb	r3, r3
    e614:	461a      	mov	r2, r3
    e616:	4b14      	ldr	r3, [pc, #80]	; (e668 <usbdc_get_cfg_desc+0xa4>)
    e618:	4798      	blx	r3
    e61a:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    e61c:	697b      	ldr	r3, [r7, #20]
    e61e:	2b00      	cmp	r3, #0
    e620:	d101      	bne.n	e626 <usbdc_get_cfg_desc+0x62>
		return false;
    e622:	2300      	movs	r3, #0
    e624:	e019      	b.n	e65a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    e626:	6978      	ldr	r0, [r7, #20]
    e628:	4b10      	ldr	r3, [pc, #64]	; (e66c <usbdc_get_cfg_desc+0xa8>)
    e62a:	4798      	blx	r3
    e62c:	4603      	mov	r3, r0
    e62e:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    e630:	8a7a      	ldrh	r2, [r7, #18]
    e632:	89fb      	ldrh	r3, [r7, #14]
    e634:	429a      	cmp	r2, r3
    e636:	d802      	bhi.n	e63e <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    e638:	2300      	movs	r3, #0
    e63a:	747b      	strb	r3, [r7, #17]
    e63c:	e001      	b.n	e642 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    e63e:	89fb      	ldrh	r3, [r7, #14]
    e640:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    e642:	8a7a      	ldrh	r2, [r7, #18]
    e644:	7c7b      	ldrb	r3, [r7, #17]
    e646:	79f8      	ldrb	r0, [r7, #7]
    e648:	6979      	ldr	r1, [r7, #20]
    e64a:	4c09      	ldr	r4, [pc, #36]	; (e670 <usbdc_get_cfg_desc+0xac>)
    e64c:	47a0      	blx	r4
    e64e:	4603      	mov	r3, r0
    e650:	2b00      	cmp	r3, #0
    e652:	d001      	beq.n	e658 <usbdc_get_cfg_desc+0x94>
		return false;
    e654:	2300      	movs	r3, #0
    e656:	e000      	b.n	e65a <usbdc_get_cfg_desc+0x96>
	}
	return true;
    e658:	2301      	movs	r3, #1
}
    e65a:	4618      	mov	r0, r3
    e65c:	371c      	adds	r7, #28
    e65e:	46bd      	mov	sp, r7
    e660:	bd90      	pop	{r4, r7, pc}
    e662:	bf00      	nop
    e664:	2000223c 	.word	0x2000223c
    e668:	0000f381 	.word	0x0000f381
    e66c:	0000e52d 	.word	0x0000e52d
    e670:	0000f031 	.word	0x0000f031

0000e674 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    e674:	b590      	push	{r4, r7, lr}
    e676:	b085      	sub	sp, #20
    e678:	af00      	add	r7, sp, #0
    e67a:	4603      	mov	r3, r0
    e67c:	6039      	str	r1, [r7, #0]
    e67e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    e680:	683b      	ldr	r3, [r7, #0]
    e682:	799a      	ldrb	r2, [r3, #6]
    e684:	79db      	ldrb	r3, [r3, #7]
    e686:	021b      	lsls	r3, r3, #8
    e688:	4313      	orrs	r3, r2
    e68a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    e68c:	683b      	ldr	r3, [r7, #0]
    e68e:	885b      	ldrh	r3, [r3, #2]
    e690:	b29b      	uxth	r3, r3
    e692:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e694:	89fa      	ldrh	r2, [r7, #14]
    e696:	4b1a      	ldr	r3, [pc, #104]	; (e700 <usbdc_get_str_desc+0x8c>)
    e698:	7f1b      	ldrb	r3, [r3, #28]
    e69a:	3b01      	subs	r3, #1
    e69c:	4013      	ands	r3, r2
    e69e:	2b00      	cmp	r3, #0
    e6a0:	bf0c      	ite	eq
    e6a2:	2301      	moveq	r3, #1
    e6a4:	2300      	movne	r3, #0
    e6a6:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    e6a8:	4b15      	ldr	r3, [pc, #84]	; (e700 <usbdc_get_str_desc+0x8c>)
    e6aa:	681b      	ldr	r3, [r3, #0]
    e6ac:	6818      	ldr	r0, [r3, #0]
    e6ae:	4b14      	ldr	r3, [pc, #80]	; (e700 <usbdc_get_str_desc+0x8c>)
    e6b0:	681b      	ldr	r3, [r3, #0]
    e6b2:	685b      	ldr	r3, [r3, #4]
    e6b4:	7b3a      	ldrb	r2, [r7, #12]
    e6b6:	4619      	mov	r1, r3
    e6b8:	4b12      	ldr	r3, [pc, #72]	; (e704 <usbdc_get_str_desc+0x90>)
    e6ba:	4798      	blx	r3
    e6bc:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    e6be:	68bb      	ldr	r3, [r7, #8]
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	d101      	bne.n	e6c8 <usbdc_get_str_desc+0x54>
		return false;
    e6c4:	2300      	movs	r3, #0
    e6c6:	e017      	b.n	e6f8 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    e6c8:	68bb      	ldr	r3, [r7, #8]
    e6ca:	781b      	ldrb	r3, [r3, #0]
    e6cc:	b29b      	uxth	r3, r3
    e6ce:	89fa      	ldrh	r2, [r7, #14]
    e6d0:	429a      	cmp	r2, r3
    e6d2:	d802      	bhi.n	e6da <usbdc_get_str_desc+0x66>
		need_zlp = false;
    e6d4:	2300      	movs	r3, #0
    e6d6:	737b      	strb	r3, [r7, #13]
    e6d8:	e002      	b.n	e6e0 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    e6da:	68bb      	ldr	r3, [r7, #8]
    e6dc:	781b      	ldrb	r3, [r3, #0]
    e6de:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    e6e0:	89fa      	ldrh	r2, [r7, #14]
    e6e2:	7b7b      	ldrb	r3, [r7, #13]
    e6e4:	79f8      	ldrb	r0, [r7, #7]
    e6e6:	68b9      	ldr	r1, [r7, #8]
    e6e8:	4c07      	ldr	r4, [pc, #28]	; (e708 <usbdc_get_str_desc+0x94>)
    e6ea:	47a0      	blx	r4
    e6ec:	4603      	mov	r3, r0
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	d001      	beq.n	e6f6 <usbdc_get_str_desc+0x82>
		return false;
    e6f2:	2300      	movs	r3, #0
    e6f4:	e000      	b.n	e6f8 <usbdc_get_str_desc+0x84>
	}
	return true;
    e6f6:	2301      	movs	r3, #1
}
    e6f8:	4618      	mov	r0, r3
    e6fa:	3714      	adds	r7, #20
    e6fc:	46bd      	mov	sp, r7
    e6fe:	bd90      	pop	{r4, r7, pc}
    e700:	2000223c 	.word	0x2000223c
    e704:	0000f3f9 	.word	0x0000f3f9
    e708:	0000f031 	.word	0x0000f031

0000e70c <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    e70c:	b580      	push	{r7, lr}
    e70e:	b084      	sub	sp, #16
    e710:	af00      	add	r7, sp, #0
    e712:	4603      	mov	r3, r0
    e714:	6039      	str	r1, [r7, #0]
    e716:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    e718:	683b      	ldr	r3, [r7, #0]
    e71a:	885b      	ldrh	r3, [r3, #2]
    e71c:	b29b      	uxth	r3, r3
    e71e:	0a1b      	lsrs	r3, r3, #8
    e720:	b29b      	uxth	r3, r3
    e722:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    e724:	7bfb      	ldrb	r3, [r7, #15]
    e726:	2b02      	cmp	r3, #2
    e728:	d00d      	beq.n	e746 <usbdc_get_desc_req+0x3a>
    e72a:	2b03      	cmp	r3, #3
    e72c:	d012      	beq.n	e754 <usbdc_get_desc_req+0x48>
    e72e:	2b01      	cmp	r3, #1
    e730:	d002      	beq.n	e738 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    e732:	bf00      	nop
	}
	return false;
    e734:	2300      	movs	r3, #0
    e736:	e013      	b.n	e760 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    e738:	79fb      	ldrb	r3, [r7, #7]
    e73a:	6839      	ldr	r1, [r7, #0]
    e73c:	4618      	mov	r0, r3
    e73e:	4b0a      	ldr	r3, [pc, #40]	; (e768 <usbdc_get_desc_req+0x5c>)
    e740:	4798      	blx	r3
    e742:	4603      	mov	r3, r0
    e744:	e00c      	b.n	e760 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    e746:	79fb      	ldrb	r3, [r7, #7]
    e748:	6839      	ldr	r1, [r7, #0]
    e74a:	4618      	mov	r0, r3
    e74c:	4b07      	ldr	r3, [pc, #28]	; (e76c <usbdc_get_desc_req+0x60>)
    e74e:	4798      	blx	r3
    e750:	4603      	mov	r3, r0
    e752:	e005      	b.n	e760 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    e754:	79fb      	ldrb	r3, [r7, #7]
    e756:	6839      	ldr	r1, [r7, #0]
    e758:	4618      	mov	r0, r3
    e75a:	4b05      	ldr	r3, [pc, #20]	; (e770 <usbdc_get_desc_req+0x64>)
    e75c:	4798      	blx	r3
    e75e:	4603      	mov	r3, r0
}
    e760:	4618      	mov	r0, r3
    e762:	3710      	adds	r7, #16
    e764:	46bd      	mov	sp, r7
    e766:	bd80      	pop	{r7, pc}
    e768:	0000e54d 	.word	0x0000e54d
    e76c:	0000e5c5 	.word	0x0000e5c5
    e770:	0000e675 	.word	0x0000e675

0000e774 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    e774:	b590      	push	{r4, r7, lr}
    e776:	b085      	sub	sp, #20
    e778:	af00      	add	r7, sp, #0
    e77a:	4603      	mov	r3, r0
    e77c:	6039      	str	r1, [r7, #0]
    e77e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e780:	683b      	ldr	r3, [r7, #0]
    e782:	781b      	ldrb	r3, [r3, #0]
    e784:	f003 031f 	and.w	r3, r3, #31
    e788:	2b00      	cmp	r3, #0
    e78a:	db1b      	blt.n	e7c4 <usbdc_get_status_req+0x50>
    e78c:	2b01      	cmp	r3, #1
    e78e:	dd02      	ble.n	e796 <usbdc_get_status_req+0x22>
    e790:	2b02      	cmp	r3, #2
    e792:	d003      	beq.n	e79c <usbdc_get_status_req+0x28>
    e794:	e016      	b.n	e7c4 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    e796:	2300      	movs	r3, #0
    e798:	60fb      	str	r3, [r7, #12]
		break;
    e79a:	e015      	b.n	e7c8 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    e79c:	683b      	ldr	r3, [r7, #0]
    e79e:	889b      	ldrh	r3, [r3, #4]
    e7a0:	b29b      	uxth	r3, r3
    e7a2:	b2db      	uxtb	r3, r3
    e7a4:	2102      	movs	r1, #2
    e7a6:	4618      	mov	r0, r3
    e7a8:	4b0f      	ldr	r3, [pc, #60]	; (e7e8 <usbdc_get_status_req+0x74>)
    e7aa:	4798      	blx	r3
    e7ac:	4603      	mov	r3, r0
    e7ae:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    e7b0:	68fb      	ldr	r3, [r7, #12]
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	da01      	bge.n	e7ba <usbdc_get_status_req+0x46>
			return false;
    e7b6:	2300      	movs	r3, #0
    e7b8:	e012      	b.n	e7e0 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    e7ba:	68fb      	ldr	r3, [r7, #12]
    e7bc:	f003 0301 	and.w	r3, r3, #1
    e7c0:	60fb      	str	r3, [r7, #12]
		break;
    e7c2:	e001      	b.n	e7c8 <usbdc_get_status_req+0x54>
	default:
		return false;
    e7c4:	2300      	movs	r3, #0
    e7c6:	e00b      	b.n	e7e0 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    e7c8:	4b08      	ldr	r3, [pc, #32]	; (e7ec <usbdc_get_status_req+0x78>)
    e7ca:	695b      	ldr	r3, [r3, #20]
    e7cc:	89ba      	ldrh	r2, [r7, #12]
    e7ce:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    e7d0:	4b06      	ldr	r3, [pc, #24]	; (e7ec <usbdc_get_status_req+0x78>)
    e7d2:	6959      	ldr	r1, [r3, #20]
    e7d4:	79f8      	ldrb	r0, [r7, #7]
    e7d6:	2300      	movs	r3, #0
    e7d8:	2202      	movs	r2, #2
    e7da:	4c05      	ldr	r4, [pc, #20]	; (e7f0 <usbdc_get_status_req+0x7c>)
    e7dc:	47a0      	blx	r4
	return true;
    e7de:	2301      	movs	r3, #1
}
    e7e0:	4618      	mov	r0, r3
    e7e2:	3714      	adds	r7, #20
    e7e4:	46bd      	mov	sp, r7
    e7e6:	bd90      	pop	{r4, r7, pc}
    e7e8:	00005a25 	.word	0x00005a25
    e7ec:	2000223c 	.word	0x2000223c
    e7f0:	0000f031 	.word	0x0000f031

0000e7f4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    e7f4:	b590      	push	{r4, r7, lr}
    e7f6:	b085      	sub	sp, #20
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e7fc:	4b1f      	ldr	r3, [pc, #124]	; (e87c <usbdc_get_interface+0x88>)
    e7fe:	691b      	ldr	r3, [r3, #16]
    e800:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    e802:	4b1e      	ldr	r3, [pc, #120]	; (e87c <usbdc_get_interface+0x88>)
    e804:	7f5b      	ldrb	r3, [r3, #29]
    e806:	461a      	mov	r2, r3
    e808:	687b      	ldr	r3, [r7, #4]
    e80a:	889b      	ldrh	r3, [r3, #4]
    e80c:	b29b      	uxth	r3, r3
    e80e:	fa42 f303 	asr.w	r3, r2, r3
    e812:	f003 0301 	and.w	r3, r3, #1
    e816:	2b00      	cmp	r3, #0
    e818:	d128      	bne.n	e86c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    e81a:	4b18      	ldr	r3, [pc, #96]	; (e87c <usbdc_get_interface+0x88>)
    e81c:	695b      	ldr	r3, [r3, #20]
    e81e:	2200      	movs	r2, #0
    e820:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e822:	4b16      	ldr	r3, [pc, #88]	; (e87c <usbdc_get_interface+0x88>)
    e824:	6959      	ldr	r1, [r3, #20]
    e826:	2300      	movs	r3, #0
    e828:	2201      	movs	r2, #1
    e82a:	2000      	movs	r0, #0
    e82c:	4c14      	ldr	r4, [pc, #80]	; (e880 <usbdc_get_interface+0x8c>)
    e82e:	47a0      	blx	r4
		return true;
    e830:	2301      	movs	r3, #1
    e832:	e01f      	b.n	e874 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    e834:	68fb      	ldr	r3, [r7, #12]
    e836:	685b      	ldr	r3, [r3, #4]
    e838:	687a      	ldr	r2, [r7, #4]
    e83a:	2102      	movs	r1, #2
    e83c:	68f8      	ldr	r0, [r7, #12]
    e83e:	4798      	blx	r3
    e840:	60b8      	str	r0, [r7, #8]
    e842:	68bb      	ldr	r3, [r7, #8]
    e844:	2b00      	cmp	r3, #0
    e846:	da03      	bge.n	e850 <usbdc_get_interface+0x5c>
			func = func->next;
    e848:	68fb      	ldr	r3, [r7, #12]
    e84a:	681b      	ldr	r3, [r3, #0]
    e84c:	60fb      	str	r3, [r7, #12]
    e84e:	e00d      	b.n	e86c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    e850:	4b0a      	ldr	r3, [pc, #40]	; (e87c <usbdc_get_interface+0x88>)
    e852:	695b      	ldr	r3, [r3, #20]
    e854:	68ba      	ldr	r2, [r7, #8]
    e856:	b2d2      	uxtb	r2, r2
    e858:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e85a:	4b08      	ldr	r3, [pc, #32]	; (e87c <usbdc_get_interface+0x88>)
    e85c:	6959      	ldr	r1, [r3, #20]
    e85e:	2300      	movs	r3, #0
    e860:	2201      	movs	r2, #1
    e862:	2000      	movs	r0, #0
    e864:	4c06      	ldr	r4, [pc, #24]	; (e880 <usbdc_get_interface+0x8c>)
    e866:	47a0      	blx	r4
			return true;
    e868:	2301      	movs	r3, #1
    e86a:	e003      	b.n	e874 <usbdc_get_interface+0x80>
	while (NULL != func) {
    e86c:	68fb      	ldr	r3, [r7, #12]
    e86e:	2b00      	cmp	r3, #0
    e870:	d1e0      	bne.n	e834 <usbdc_get_interface+0x40>
		}
	}
	return false;
    e872:	2300      	movs	r3, #0
}
    e874:	4618      	mov	r0, r3
    e876:	3714      	adds	r7, #20
    e878:	46bd      	mov	sp, r7
    e87a:	bd90      	pop	{r4, r7, pc}
    e87c:	2000223c 	.word	0x2000223c
    e880:	0000f031 	.word	0x0000f031

0000e884 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    e884:	b590      	push	{r4, r7, lr}
    e886:	b083      	sub	sp, #12
    e888:	af00      	add	r7, sp, #0
    e88a:	4603      	mov	r3, r0
    e88c:	6039      	str	r1, [r7, #0]
    e88e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e890:	683b      	ldr	r3, [r7, #0]
    e892:	785b      	ldrb	r3, [r3, #1]
    e894:	2b0a      	cmp	r3, #10
    e896:	d83a      	bhi.n	e90e <usbdc_get_req+0x8a>
    e898:	a201      	add	r2, pc, #4	; (adr r2, e8a0 <usbdc_get_req+0x1c>)
    e89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e89e:	bf00      	nop
    e8a0:	0000e8f7 	.word	0x0000e8f7
    e8a4:	0000e90f 	.word	0x0000e90f
    e8a8:	0000e90f 	.word	0x0000e90f
    e8ac:	0000e90f 	.word	0x0000e90f
    e8b0:	0000e90f 	.word	0x0000e90f
    e8b4:	0000e90f 	.word	0x0000e90f
    e8b8:	0000e8cd 	.word	0x0000e8cd
    e8bc:	0000e90f 	.word	0x0000e90f
    e8c0:	0000e8db 	.word	0x0000e8db
    e8c4:	0000e90f 	.word	0x0000e90f
    e8c8:	0000e905 	.word	0x0000e905
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    e8cc:	79fb      	ldrb	r3, [r7, #7]
    e8ce:	6839      	ldr	r1, [r7, #0]
    e8d0:	4618      	mov	r0, r3
    e8d2:	4b11      	ldr	r3, [pc, #68]	; (e918 <usbdc_get_req+0x94>)
    e8d4:	4798      	blx	r3
    e8d6:	4603      	mov	r3, r0
    e8d8:	e01a      	b.n	e910 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    e8da:	4b10      	ldr	r3, [pc, #64]	; (e91c <usbdc_get_req+0x98>)
    e8dc:	695b      	ldr	r3, [r3, #20]
    e8de:	4a0f      	ldr	r2, [pc, #60]	; (e91c <usbdc_get_req+0x98>)
    e8e0:	7ed2      	ldrb	r2, [r2, #27]
    e8e2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    e8e4:	4b0d      	ldr	r3, [pc, #52]	; (e91c <usbdc_get_req+0x98>)
    e8e6:	6959      	ldr	r1, [r3, #20]
    e8e8:	79f8      	ldrb	r0, [r7, #7]
    e8ea:	2300      	movs	r3, #0
    e8ec:	2201      	movs	r2, #1
    e8ee:	4c0c      	ldr	r4, [pc, #48]	; (e920 <usbdc_get_req+0x9c>)
    e8f0:	47a0      	blx	r4
		return true;
    e8f2:	2301      	movs	r3, #1
    e8f4:	e00c      	b.n	e910 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    e8f6:	79fb      	ldrb	r3, [r7, #7]
    e8f8:	6839      	ldr	r1, [r7, #0]
    e8fa:	4618      	mov	r0, r3
    e8fc:	4b09      	ldr	r3, [pc, #36]	; (e924 <usbdc_get_req+0xa0>)
    e8fe:	4798      	blx	r3
    e900:	4603      	mov	r3, r0
    e902:	e005      	b.n	e910 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    e904:	6838      	ldr	r0, [r7, #0]
    e906:	4b08      	ldr	r3, [pc, #32]	; (e928 <usbdc_get_req+0xa4>)
    e908:	4798      	blx	r3
    e90a:	4603      	mov	r3, r0
    e90c:	e000      	b.n	e910 <usbdc_get_req+0x8c>
	default:
		return false;
    e90e:	2300      	movs	r3, #0
	}
}
    e910:	4618      	mov	r0, r3
    e912:	370c      	adds	r7, #12
    e914:	46bd      	mov	sp, r7
    e916:	bd90      	pop	{r4, r7, pc}
    e918:	0000e70d 	.word	0x0000e70d
    e91c:	2000223c 	.word	0x2000223c
    e920:	0000f031 	.word	0x0000f031
    e924:	0000e775 	.word	0x0000e775
    e928:	0000e7f5 	.word	0x0000e7f5

0000e92c <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e92c:	b590      	push	{r4, r7, lr}
    e92e:	b083      	sub	sp, #12
    e930:	af00      	add	r7, sp, #0
    e932:	4603      	mov	r3, r0
    e934:	6039      	str	r1, [r7, #0]
    e936:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e938:	683b      	ldr	r3, [r7, #0]
    e93a:	781b      	ldrb	r3, [r3, #0]
    e93c:	f003 031f 	and.w	r3, r3, #31
    e940:	2b02      	cmp	r3, #2
    e942:	d116      	bne.n	e972 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e944:	683b      	ldr	r3, [r7, #0]
    e946:	88db      	ldrh	r3, [r3, #6]
    e948:	b29b      	uxth	r3, r3
    e94a:	2b00      	cmp	r3, #0
    e94c:	d001      	beq.n	e952 <usbdc_clear_ftr_req+0x26>
			return false;
    e94e:	2300      	movs	r3, #0
    e950:	e010      	b.n	e974 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    e952:	683b      	ldr	r3, [r7, #0]
    e954:	889b      	ldrh	r3, [r3, #4]
    e956:	b29b      	uxth	r3, r3
    e958:	b2db      	uxtb	r3, r3
    e95a:	2100      	movs	r1, #0
    e95c:	4618      	mov	r0, r3
    e95e:	4b07      	ldr	r3, [pc, #28]	; (e97c <usbdc_clear_ftr_req+0x50>)
    e960:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e962:	79f8      	ldrb	r0, [r7, #7]
    e964:	2301      	movs	r3, #1
    e966:	2200      	movs	r2, #0
    e968:	2100      	movs	r1, #0
    e96a:	4c05      	ldr	r4, [pc, #20]	; (e980 <usbdc_clear_ftr_req+0x54>)
    e96c:	47a0      	blx	r4
		return true;
    e96e:	2301      	movs	r3, #1
    e970:	e000      	b.n	e974 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    e972:	2300      	movs	r3, #0
	}
}
    e974:	4618      	mov	r0, r3
    e976:	370c      	adds	r7, #12
    e978:	46bd      	mov	sp, r7
    e97a:	bd90      	pop	{r4, r7, pc}
    e97c:	00005a25 	.word	0x00005a25
    e980:	0000f031 	.word	0x0000f031

0000e984 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e984:	b590      	push	{r4, r7, lr}
    e986:	b083      	sub	sp, #12
    e988:	af00      	add	r7, sp, #0
    e98a:	4603      	mov	r3, r0
    e98c:	6039      	str	r1, [r7, #0]
    e98e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e990:	683b      	ldr	r3, [r7, #0]
    e992:	781b      	ldrb	r3, [r3, #0]
    e994:	f003 031f 	and.w	r3, r3, #31
    e998:	2b02      	cmp	r3, #2
    e99a:	d116      	bne.n	e9ca <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e99c:	683b      	ldr	r3, [r7, #0]
    e99e:	88db      	ldrh	r3, [r3, #6]
    e9a0:	b29b      	uxth	r3, r3
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	d001      	beq.n	e9aa <usbdc_set_ftr_req+0x26>
			return false;
    e9a6:	2300      	movs	r3, #0
    e9a8:	e010      	b.n	e9cc <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    e9aa:	683b      	ldr	r3, [r7, #0]
    e9ac:	889b      	ldrh	r3, [r3, #4]
    e9ae:	b29b      	uxth	r3, r3
    e9b0:	b2db      	uxtb	r3, r3
    e9b2:	2101      	movs	r1, #1
    e9b4:	4618      	mov	r0, r3
    e9b6:	4b07      	ldr	r3, [pc, #28]	; (e9d4 <usbdc_set_ftr_req+0x50>)
    e9b8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e9ba:	79f8      	ldrb	r0, [r7, #7]
    e9bc:	2301      	movs	r3, #1
    e9be:	2200      	movs	r2, #0
    e9c0:	2100      	movs	r1, #0
    e9c2:	4c05      	ldr	r4, [pc, #20]	; (e9d8 <usbdc_set_ftr_req+0x54>)
    e9c4:	47a0      	blx	r4
		return true;
    e9c6:	2301      	movs	r3, #1
    e9c8:	e000      	b.n	e9cc <usbdc_set_ftr_req+0x48>
	default:
		return false;
    e9ca:	2300      	movs	r3, #0
	}
}
    e9cc:	4618      	mov	r0, r3
    e9ce:	370c      	adds	r7, #12
    e9d0:	46bd      	mov	sp, r7
    e9d2:	bd90      	pop	{r4, r7, pc}
    e9d4:	00005a25 	.word	0x00005a25
    e9d8:	0000f031 	.word	0x0000f031

0000e9dc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    e9dc:	b580      	push	{r7, lr}
    e9de:	b082      	sub	sp, #8
    e9e0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e9e2:	4b0a      	ldr	r3, [pc, #40]	; (ea0c <usbdc_unconfig+0x30>)
    e9e4:	691b      	ldr	r3, [r3, #16]
    e9e6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e9e8:	e008      	b.n	e9fc <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    e9ea:	687b      	ldr	r3, [r7, #4]
    e9ec:	685b      	ldr	r3, [r3, #4]
    e9ee:	2200      	movs	r2, #0
    e9f0:	2101      	movs	r1, #1
    e9f2:	6878      	ldr	r0, [r7, #4]
    e9f4:	4798      	blx	r3
		func = func->next;
    e9f6:	687b      	ldr	r3, [r7, #4]
    e9f8:	681b      	ldr	r3, [r3, #0]
    e9fa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e9fc:	687b      	ldr	r3, [r7, #4]
    e9fe:	2b00      	cmp	r3, #0
    ea00:	d1f3      	bne.n	e9ea <usbdc_unconfig+0xe>
	}
}
    ea02:	bf00      	nop
    ea04:	3708      	adds	r7, #8
    ea06:	46bd      	mov	sp, r7
    ea08:	bd80      	pop	{r7, pc}
    ea0a:	bf00      	nop
    ea0c:	2000223c 	.word	0x2000223c

0000ea10 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    ea10:	b580      	push	{r7, lr}
    ea12:	b088      	sub	sp, #32
    ea14:	af00      	add	r7, sp, #0
    ea16:	4603      	mov	r3, r0
    ea18:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    ea1a:	2300      	movs	r3, #0
    ea1c:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    ea1e:	23ff      	movs	r3, #255	; 0xff
    ea20:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    ea22:	79fb      	ldrb	r3, [r7, #7]
    ea24:	2b00      	cmp	r3, #0
    ea26:	d103      	bne.n	ea30 <usbdc_set_config+0x20>
		usbdc_unconfig();
    ea28:	4b2e      	ldr	r3, [pc, #184]	; (eae4 <usbdc_set_config+0xd4>)
    ea2a:	4798      	blx	r3
		return true;
    ea2c:	2301      	movs	r3, #1
    ea2e:	e055      	b.n	eadc <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ea30:	69bb      	ldr	r3, [r7, #24]
    ea32:	2b00      	cmp	r3, #0
    ea34:	d10a      	bne.n	ea4c <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ea36:	4b2c      	ldr	r3, [pc, #176]	; (eae8 <usbdc_set_config+0xd8>)
    ea38:	681b      	ldr	r3, [r3, #0]
    ea3a:	6818      	ldr	r0, [r3, #0]
    ea3c:	4b2a      	ldr	r3, [pc, #168]	; (eae8 <usbdc_set_config+0xd8>)
    ea3e:	681b      	ldr	r3, [r3, #0]
    ea40:	685b      	ldr	r3, [r3, #4]
    ea42:	79fa      	ldrb	r2, [r7, #7]
    ea44:	4619      	mov	r1, r3
    ea46:	4b29      	ldr	r3, [pc, #164]	; (eaec <usbdc_set_config+0xdc>)
    ea48:	4798      	blx	r3
    ea4a:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    ea4c:	69bb      	ldr	r3, [r7, #24]
    ea4e:	2b00      	cmp	r3, #0
    ea50:	d101      	bne.n	ea56 <usbdc_set_config+0x46>
		return false;
    ea52:	2300      	movs	r3, #0
    ea54:	e042      	b.n	eadc <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    ea56:	69b8      	ldr	r0, [r7, #24]
    ea58:	4b25      	ldr	r3, [pc, #148]	; (eaf0 <usbdc_set_config+0xe0>)
    ea5a:	4798      	blx	r3
    ea5c:	4603      	mov	r3, r0
    ea5e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    ea60:	8abb      	ldrh	r3, [r7, #20]
    ea62:	69ba      	ldr	r2, [r7, #24]
    ea64:	4413      	add	r3, r2
    ea66:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ea68:	693b      	ldr	r3, [r7, #16]
    ea6a:	2204      	movs	r2, #4
    ea6c:	4619      	mov	r1, r3
    ea6e:	69b8      	ldr	r0, [r7, #24]
    ea70:	4b20      	ldr	r3, [pc, #128]	; (eaf4 <usbdc_set_config+0xe4>)
    ea72:	4798      	blx	r3
    ea74:	4603      	mov	r3, r0
    ea76:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    ea78:	e02c      	b.n	ead4 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ea7a:	68fb      	ldr	r3, [r7, #12]
    ea7c:	3302      	adds	r3, #2
    ea7e:	781b      	ldrb	r3, [r3, #0]
    ea80:	7dfa      	ldrb	r2, [r7, #23]
    ea82:	429a      	cmp	r2, r3
    ea84:	d018      	beq.n	eab8 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    ea86:	68fb      	ldr	r3, [r7, #12]
    ea88:	789b      	ldrb	r3, [r3, #2]
    ea8a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ea8c:	4b16      	ldr	r3, [pc, #88]	; (eae8 <usbdc_set_config+0xd8>)
    ea8e:	691b      	ldr	r3, [r3, #16]
    ea90:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ea92:	e00c      	b.n	eaae <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    ea94:	69fb      	ldr	r3, [r7, #28]
    ea96:	685b      	ldr	r3, [r3, #4]
    ea98:	f107 020c 	add.w	r2, r7, #12
    ea9c:	2100      	movs	r1, #0
    ea9e:	69f8      	ldr	r0, [r7, #28]
    eaa0:	4798      	blx	r3
    eaa2:	4603      	mov	r3, r0
    eaa4:	2b00      	cmp	r3, #0
    eaa6:	d006      	beq.n	eab6 <usbdc_set_config+0xa6>
					func = func->next;
    eaa8:	69fb      	ldr	r3, [r7, #28]
    eaaa:	681b      	ldr	r3, [r3, #0]
    eaac:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    eaae:	69fb      	ldr	r3, [r7, #28]
    eab0:	2b00      	cmp	r3, #0
    eab2:	d1ef      	bne.n	ea94 <usbdc_set_config+0x84>
    eab4:	e000      	b.n	eab8 <usbdc_set_config+0xa8>
				} else {
					break;
    eab6:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    eab8:	68fb      	ldr	r3, [r7, #12]
    eaba:	4618      	mov	r0, r3
    eabc:	4b0e      	ldr	r3, [pc, #56]	; (eaf8 <usbdc_set_config+0xe8>)
    eabe:	4798      	blx	r3
    eac0:	4603      	mov	r3, r0
    eac2:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    eac4:	68fb      	ldr	r3, [r7, #12]
    eac6:	6939      	ldr	r1, [r7, #16]
    eac8:	2204      	movs	r2, #4
    eaca:	4618      	mov	r0, r3
    eacc:	4b09      	ldr	r3, [pc, #36]	; (eaf4 <usbdc_set_config+0xe4>)
    eace:	4798      	blx	r3
    ead0:	4603      	mov	r3, r0
    ead2:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    ead4:	68fb      	ldr	r3, [r7, #12]
    ead6:	2b00      	cmp	r3, #0
    ead8:	d1cf      	bne.n	ea7a <usbdc_set_config+0x6a>
	}
	return true;
    eada:	2301      	movs	r3, #1
}
    eadc:	4618      	mov	r0, r3
    eade:	3720      	adds	r7, #32
    eae0:	46bd      	mov	sp, r7
    eae2:	bd80      	pop	{r7, pc}
    eae4:	0000e9dd 	.word	0x0000e9dd
    eae8:	2000223c 	.word	0x2000223c
    eaec:	0000f381 	.word	0x0000f381
    eaf0:	0000e52d 	.word	0x0000e52d
    eaf4:	0000f2c1 	.word	0x0000f2c1
    eaf8:	0000e509 	.word	0x0000e509

0000eafc <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    eafc:	b580      	push	{r7, lr}
    eafe:	b082      	sub	sp, #8
    eb00:	af00      	add	r7, sp, #0
    eb02:	4603      	mov	r3, r0
    eb04:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    eb06:	79fb      	ldrb	r3, [r7, #7]
    eb08:	4618      	mov	r0, r3
    eb0a:	4b03      	ldr	r3, [pc, #12]	; (eb18 <usbdc_set_address+0x1c>)
    eb0c:	4798      	blx	r3
}
    eb0e:	bf00      	nop
    eb10:	3708      	adds	r7, #8
    eb12:	46bd      	mov	sp, r7
    eb14:	bd80      	pop	{r7, pc}
    eb16:	bf00      	nop
    eb18:	00005641 	.word	0x00005641

0000eb1c <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    eb1c:	b590      	push	{r4, r7, lr}
    eb1e:	b087      	sub	sp, #28
    eb20:	af00      	add	r7, sp, #0
    eb22:	4603      	mov	r3, r0
    eb24:	460a      	mov	r2, r1
    eb26:	80fb      	strh	r3, [r7, #6]
    eb28:	4613      	mov	r3, r2
    eb2a:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    eb2c:	2300      	movs	r3, #0
    eb2e:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    eb30:	693b      	ldr	r3, [r7, #16]
    eb32:	2b00      	cmp	r3, #0
    eb34:	d10b      	bne.n	eb4e <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    eb36:	4b43      	ldr	r3, [pc, #268]	; (ec44 <usbdc_set_interface+0x128>)
    eb38:	681b      	ldr	r3, [r3, #0]
    eb3a:	6818      	ldr	r0, [r3, #0]
    eb3c:	4b41      	ldr	r3, [pc, #260]	; (ec44 <usbdc_set_interface+0x128>)
    eb3e:	681b      	ldr	r3, [r3, #0]
    eb40:	6859      	ldr	r1, [r3, #4]
    eb42:	4b40      	ldr	r3, [pc, #256]	; (ec44 <usbdc_set_interface+0x128>)
    eb44:	7edb      	ldrb	r3, [r3, #27]
    eb46:	461a      	mov	r2, r3
    eb48:	4b3f      	ldr	r3, [pc, #252]	; (ec48 <usbdc_set_interface+0x12c>)
    eb4a:	4798      	blx	r3
    eb4c:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    eb4e:	693b      	ldr	r3, [r7, #16]
    eb50:	2b00      	cmp	r3, #0
    eb52:	d101      	bne.n	eb58 <usbdc_set_interface+0x3c>
		return false;
    eb54:	2300      	movs	r3, #0
    eb56:	e071      	b.n	ec3c <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    eb58:	693b      	ldr	r3, [r7, #16]
    eb5a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    eb5c:	6938      	ldr	r0, [r7, #16]
    eb5e:	4b3b      	ldr	r3, [pc, #236]	; (ec4c <usbdc_set_interface+0x130>)
    eb60:	4798      	blx	r3
    eb62:	4603      	mov	r3, r0
    eb64:	461a      	mov	r2, r3
    eb66:	693b      	ldr	r3, [r7, #16]
    eb68:	4413      	add	r3, r2
    eb6a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    eb6c:	68bb      	ldr	r3, [r7, #8]
    eb6e:	68f9      	ldr	r1, [r7, #12]
    eb70:	2204      	movs	r2, #4
    eb72:	4618      	mov	r0, r3
    eb74:	4b36      	ldr	r3, [pc, #216]	; (ec50 <usbdc_set_interface+0x134>)
    eb76:	4798      	blx	r3
    eb78:	6138      	str	r0, [r7, #16]
    eb7a:	693b      	ldr	r3, [r7, #16]
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d113      	bne.n	eba8 <usbdc_set_interface+0x8c>
		return false;
    eb80:	2300      	movs	r3, #0
    eb82:	e05b      	b.n	ec3c <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    eb84:	68bb      	ldr	r3, [r7, #8]
    eb86:	4618      	mov	r0, r3
    eb88:	4b32      	ldr	r3, [pc, #200]	; (ec54 <usbdc_set_interface+0x138>)
    eb8a:	4798      	blx	r3
    eb8c:	4603      	mov	r3, r0
    eb8e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    eb90:	68bb      	ldr	r3, [r7, #8]
    eb92:	68f9      	ldr	r1, [r7, #12]
    eb94:	2204      	movs	r2, #4
    eb96:	4618      	mov	r0, r3
    eb98:	4b2d      	ldr	r3, [pc, #180]	; (ec50 <usbdc_set_interface+0x134>)
    eb9a:	4798      	blx	r3
    eb9c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    eb9e:	693b      	ldr	r3, [r7, #16]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d101      	bne.n	eba8 <usbdc_set_interface+0x8c>
			return false;
    eba4:	2300      	movs	r3, #0
    eba6:	e049      	b.n	ec3c <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    eba8:	693b      	ldr	r3, [r7, #16]
    ebaa:	3302      	adds	r3, #2
    ebac:	781b      	ldrb	r3, [r3, #0]
    ebae:	b29b      	uxth	r3, r3
    ebb0:	88ba      	ldrh	r2, [r7, #4]
    ebb2:	429a      	cmp	r2, r3
    ebb4:	d1e6      	bne.n	eb84 <usbdc_set_interface+0x68>
    ebb6:	693b      	ldr	r3, [r7, #16]
    ebb8:	3303      	adds	r3, #3
    ebba:	781b      	ldrb	r3, [r3, #0]
    ebbc:	b29b      	uxth	r3, r3
    ebbe:	88fa      	ldrh	r2, [r7, #6]
    ebc0:	429a      	cmp	r2, r3
    ebc2:	d1df      	bne.n	eb84 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    ebc4:	693b      	ldr	r3, [r7, #16]
    ebc6:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    ebc8:	4b1e      	ldr	r3, [pc, #120]	; (ec44 <usbdc_set_interface+0x128>)
    ebca:	691b      	ldr	r3, [r3, #16]
    ebcc:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    ebce:	e031      	b.n	ec34 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    ebd0:	697b      	ldr	r3, [r7, #20]
    ebd2:	685b      	ldr	r3, [r3, #4]
    ebd4:	f107 0208 	add.w	r2, r7, #8
    ebd8:	2101      	movs	r1, #1
    ebda:	6978      	ldr	r0, [r7, #20]
    ebdc:	4798      	blx	r3
    ebde:	4603      	mov	r3, r0
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	d003      	beq.n	ebec <usbdc_set_interface+0xd0>
			func = func->next;
    ebe4:	697b      	ldr	r3, [r7, #20]
    ebe6:	681b      	ldr	r3, [r3, #0]
    ebe8:	617b      	str	r3, [r7, #20]
    ebea:	e023      	b.n	ec34 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    ebec:	697b      	ldr	r3, [r7, #20]
    ebee:	685b      	ldr	r3, [r3, #4]
    ebf0:	f107 0208 	add.w	r2, r7, #8
    ebf4:	2100      	movs	r1, #0
    ebf6:	6978      	ldr	r0, [r7, #20]
    ebf8:	4798      	blx	r3
    ebfa:	4603      	mov	r3, r0
    ebfc:	2b00      	cmp	r3, #0
    ebfe:	d117      	bne.n	ec30 <usbdc_set_interface+0x114>
			if (alt_set) {
    ec00:	88fb      	ldrh	r3, [r7, #6]
    ec02:	2b00      	cmp	r3, #0
    ec04:	d00c      	beq.n	ec20 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    ec06:	4b0f      	ldr	r3, [pc, #60]	; (ec44 <usbdc_set_interface+0x128>)
    ec08:	7f5b      	ldrb	r3, [r3, #29]
    ec0a:	b25a      	sxtb	r2, r3
    ec0c:	88bb      	ldrh	r3, [r7, #4]
    ec0e:	2101      	movs	r1, #1
    ec10:	fa01 f303 	lsl.w	r3, r1, r3
    ec14:	b25b      	sxtb	r3, r3
    ec16:	4313      	orrs	r3, r2
    ec18:	b25b      	sxtb	r3, r3
    ec1a:	b2da      	uxtb	r2, r3
    ec1c:	4b09      	ldr	r3, [pc, #36]	; (ec44 <usbdc_set_interface+0x128>)
    ec1e:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    ec20:	2300      	movs	r3, #0
    ec22:	2200      	movs	r2, #0
    ec24:	2100      	movs	r1, #0
    ec26:	2000      	movs	r0, #0
    ec28:	4c0b      	ldr	r4, [pc, #44]	; (ec58 <usbdc_set_interface+0x13c>)
    ec2a:	47a0      	blx	r4
			return true;
    ec2c:	2301      	movs	r3, #1
    ec2e:	e005      	b.n	ec3c <usbdc_set_interface+0x120>
		} else {
			return false;
    ec30:	2300      	movs	r3, #0
    ec32:	e003      	b.n	ec3c <usbdc_set_interface+0x120>
	while (NULL != func) {
    ec34:	697b      	ldr	r3, [r7, #20]
    ec36:	2b00      	cmp	r3, #0
    ec38:	d1ca      	bne.n	ebd0 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    ec3a:	2300      	movs	r3, #0
}
    ec3c:	4618      	mov	r0, r3
    ec3e:	371c      	adds	r7, #28
    ec40:	46bd      	mov	sp, r7
    ec42:	bd90      	pop	{r4, r7, pc}
    ec44:	2000223c 	.word	0x2000223c
    ec48:	0000f381 	.word	0x0000f381
    ec4c:	0000e52d 	.word	0x0000e52d
    ec50:	0000f2c1 	.word	0x0000f2c1
    ec54:	0000e509 	.word	0x0000e509
    ec58:	0000f031 	.word	0x0000f031

0000ec5c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    ec5c:	b590      	push	{r4, r7, lr}
    ec5e:	b083      	sub	sp, #12
    ec60:	af00      	add	r7, sp, #0
    ec62:	4603      	mov	r3, r0
    ec64:	6039      	str	r1, [r7, #0]
    ec66:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ec68:	683b      	ldr	r3, [r7, #0]
    ec6a:	785b      	ldrb	r3, [r3, #1]
    ec6c:	3b01      	subs	r3, #1
    ec6e:	2b0a      	cmp	r3, #10
    ec70:	d85b      	bhi.n	ed2a <usbdc_set_req+0xce>
    ec72:	a201      	add	r2, pc, #4	; (adr r2, ec78 <usbdc_set_req+0x1c>)
    ec74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ec78:	0000ecf7 	.word	0x0000ecf7
    ec7c:	0000ed2b 	.word	0x0000ed2b
    ec80:	0000ed05 	.word	0x0000ed05
    ec84:	0000ed2b 	.word	0x0000ed2b
    ec88:	0000eca5 	.word	0x0000eca5
    ec8c:	0000ed2b 	.word	0x0000ed2b
    ec90:	0000ed2b 	.word	0x0000ed2b
    ec94:	0000ed2b 	.word	0x0000ed2b
    ec98:	0000ecbf 	.word	0x0000ecbf
    ec9c:	0000ed2b 	.word	0x0000ed2b
    eca0:	0000ed13 	.word	0x0000ed13
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    eca4:	79f8      	ldrb	r0, [r7, #7]
    eca6:	2301      	movs	r3, #1
    eca8:	2200      	movs	r2, #0
    ecaa:	2100      	movs	r1, #0
    ecac:	4c21      	ldr	r4, [pc, #132]	; (ed34 <usbdc_set_req+0xd8>)
    ecae:	47a0      	blx	r4
    ecb0:	4603      	mov	r3, r0
    ecb2:	2b00      	cmp	r3, #0
    ecb4:	bf0c      	ite	eq
    ecb6:	2301      	moveq	r3, #1
    ecb8:	2300      	movne	r3, #0
    ecba:	b2db      	uxtb	r3, r3
    ecbc:	e036      	b.n	ed2c <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    ecbe:	683b      	ldr	r3, [r7, #0]
    ecc0:	885b      	ldrh	r3, [r3, #2]
    ecc2:	b29b      	uxth	r3, r3
    ecc4:	b2db      	uxtb	r3, r3
    ecc6:	4618      	mov	r0, r3
    ecc8:	4b1b      	ldr	r3, [pc, #108]	; (ed38 <usbdc_set_req+0xdc>)
    ecca:	4798      	blx	r3
    eccc:	4603      	mov	r3, r0
    ecce:	f083 0301 	eor.w	r3, r3, #1
    ecd2:	b2db      	uxtb	r3, r3
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d001      	beq.n	ecdc <usbdc_set_req+0x80>
			return false;
    ecd8:	2300      	movs	r3, #0
    ecda:	e027      	b.n	ed2c <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ecdc:	79f8      	ldrb	r0, [r7, #7]
    ecde:	2301      	movs	r3, #1
    ece0:	2200      	movs	r2, #0
    ece2:	2100      	movs	r1, #0
    ece4:	4c13      	ldr	r4, [pc, #76]	; (ed34 <usbdc_set_req+0xd8>)
    ece6:	47a0      	blx	r4
    ece8:	4603      	mov	r3, r0
    ecea:	2b00      	cmp	r3, #0
    ecec:	bf0c      	ite	eq
    ecee:	2301      	moveq	r3, #1
    ecf0:	2300      	movne	r3, #0
    ecf2:	b2db      	uxtb	r3, r3
    ecf4:	e01a      	b.n	ed2c <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    ecf6:	79fb      	ldrb	r3, [r7, #7]
    ecf8:	6839      	ldr	r1, [r7, #0]
    ecfa:	4618      	mov	r0, r3
    ecfc:	4b0f      	ldr	r3, [pc, #60]	; (ed3c <usbdc_set_req+0xe0>)
    ecfe:	4798      	blx	r3
    ed00:	4603      	mov	r3, r0
    ed02:	e013      	b.n	ed2c <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    ed04:	79fb      	ldrb	r3, [r7, #7]
    ed06:	6839      	ldr	r1, [r7, #0]
    ed08:	4618      	mov	r0, r3
    ed0a:	4b0d      	ldr	r3, [pc, #52]	; (ed40 <usbdc_set_req+0xe4>)
    ed0c:	4798      	blx	r3
    ed0e:	4603      	mov	r3, r0
    ed10:	e00c      	b.n	ed2c <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    ed12:	683b      	ldr	r3, [r7, #0]
    ed14:	885b      	ldrh	r3, [r3, #2]
    ed16:	b29a      	uxth	r2, r3
    ed18:	683b      	ldr	r3, [r7, #0]
    ed1a:	889b      	ldrh	r3, [r3, #4]
    ed1c:	b29b      	uxth	r3, r3
    ed1e:	4619      	mov	r1, r3
    ed20:	4610      	mov	r0, r2
    ed22:	4b08      	ldr	r3, [pc, #32]	; (ed44 <usbdc_set_req+0xe8>)
    ed24:	4798      	blx	r3
    ed26:	4603      	mov	r3, r0
    ed28:	e000      	b.n	ed2c <usbdc_set_req+0xd0>
	default:
		return false;
    ed2a:	2300      	movs	r3, #0
	}
}
    ed2c:	4618      	mov	r0, r3
    ed2e:	370c      	adds	r7, #12
    ed30:	46bd      	mov	sp, r7
    ed32:	bd90      	pop	{r4, r7, pc}
    ed34:	0000f031 	.word	0x0000f031
    ed38:	0000ea11 	.word	0x0000ea11
    ed3c:	0000e92d 	.word	0x0000e92d
    ed40:	0000e985 	.word	0x0000e985
    ed44:	0000eb1d 	.word	0x0000eb1d

0000ed48 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    ed48:	b580      	push	{r7, lr}
    ed4a:	b082      	sub	sp, #8
    ed4c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    ed4e:	4b0a      	ldr	r3, [pc, #40]	; (ed78 <usbdc_sof_notify+0x30>)
    ed50:	685b      	ldr	r3, [r3, #4]
    ed52:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    ed54:	e009      	b.n	ed6a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    ed56:	687b      	ldr	r3, [r7, #4]
    ed58:	685b      	ldr	r3, [r3, #4]
    ed5a:	2b00      	cmp	r3, #0
    ed5c:	d002      	beq.n	ed64 <usbdc_sof_notify+0x1c>
			sof->cb();
    ed5e:	687b      	ldr	r3, [r7, #4]
    ed60:	685b      	ldr	r3, [r3, #4]
    ed62:	4798      	blx	r3
		}
		sof = sof->next;
    ed64:	687b      	ldr	r3, [r7, #4]
    ed66:	681b      	ldr	r3, [r3, #0]
    ed68:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    ed6a:	687b      	ldr	r3, [r7, #4]
    ed6c:	2b00      	cmp	r3, #0
    ed6e:	d1f2      	bne.n	ed56 <usbdc_sof_notify+0xe>
	}
}
    ed70:	bf00      	nop
    ed72:	3708      	adds	r7, #8
    ed74:	46bd      	mov	sp, r7
    ed76:	bd80      	pop	{r7, pc}
    ed78:	2000223c 	.word	0x2000223c

0000ed7c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    ed7c:	b580      	push	{r7, lr}
    ed7e:	b084      	sub	sp, #16
    ed80:	af00      	add	r7, sp, #0
    ed82:	4603      	mov	r3, r0
    ed84:	6039      	str	r1, [r7, #0]
    ed86:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ed88:	4b0b      	ldr	r3, [pc, #44]	; (edb8 <usbdc_change_notify+0x3c>)
    ed8a:	68db      	ldr	r3, [r3, #12]
    ed8c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    ed8e:	e00c      	b.n	edaa <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    ed90:	68fb      	ldr	r3, [r7, #12]
    ed92:	685b      	ldr	r3, [r3, #4]
    ed94:	2b00      	cmp	r3, #0
    ed96:	d005      	beq.n	eda4 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    ed98:	68fb      	ldr	r3, [r7, #12]
    ed9a:	685b      	ldr	r3, [r3, #4]
    ed9c:	79fa      	ldrb	r2, [r7, #7]
    ed9e:	6839      	ldr	r1, [r7, #0]
    eda0:	4610      	mov	r0, r2
    eda2:	4798      	blx	r3
		}
		cg = cg->next;
    eda4:	68fb      	ldr	r3, [r7, #12]
    eda6:	681b      	ldr	r3, [r3, #0]
    eda8:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    edaa:	68fb      	ldr	r3, [r7, #12]
    edac:	2b00      	cmp	r3, #0
    edae:	d1ef      	bne.n	ed90 <usbdc_change_notify+0x14>
	}
}
    edb0:	bf00      	nop
    edb2:	3710      	adds	r7, #16
    edb4:	46bd      	mov	sp, r7
    edb6:	bd80      	pop	{r7, pc}
    edb8:	2000223c 	.word	0x2000223c

0000edbc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    edbc:	b580      	push	{r7, lr}
    edbe:	b084      	sub	sp, #16
    edc0:	af00      	add	r7, sp, #0
    edc2:	4603      	mov	r3, r0
    edc4:	6039      	str	r1, [r7, #0]
    edc6:	71fb      	strb	r3, [r7, #7]
    edc8:	4613      	mov	r3, r2
    edca:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    edcc:	4b12      	ldr	r3, [pc, #72]	; (ee18 <usbdc_request_handler+0x5c>)
    edce:	689b      	ldr	r3, [r3, #8]
    edd0:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    edd2:	e019      	b.n	ee08 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    edd4:	68fb      	ldr	r3, [r7, #12]
    edd6:	685b      	ldr	r3, [r3, #4]
    edd8:	2b00      	cmp	r3, #0
    edda:	d012      	beq.n	ee02 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    eddc:	68fb      	ldr	r3, [r7, #12]
    edde:	685b      	ldr	r3, [r3, #4]
    ede0:	79ba      	ldrb	r2, [r7, #6]
    ede2:	79f8      	ldrb	r0, [r7, #7]
    ede4:	6839      	ldr	r1, [r7, #0]
    ede6:	4798      	blx	r3
    ede8:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    edea:	68bb      	ldr	r3, [r7, #8]
    edec:	2b00      	cmp	r3, #0
    edee:	d101      	bne.n	edf4 <usbdc_request_handler+0x38>
				return true;
    edf0:	2301      	movs	r3, #1
    edf2:	e00d      	b.n	ee10 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    edf4:	68bb      	ldr	r3, [r7, #8]
    edf6:	f113 0f0a 	cmn.w	r3, #10
    edfa:	d002      	beq.n	ee02 <usbdc_request_handler+0x46>
				return -1;
    edfc:	f04f 33ff 	mov.w	r3, #4294967295
    ee00:	e006      	b.n	ee10 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    ee02:	68fb      	ldr	r3, [r7, #12]
    ee04:	681b      	ldr	r3, [r3, #0]
    ee06:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    ee08:	68fb      	ldr	r3, [r7, #12]
    ee0a:	2b00      	cmp	r3, #0
    ee0c:	d1e2      	bne.n	edd4 <usbdc_request_handler+0x18>
	}
	return false;
    ee0e:	2300      	movs	r3, #0
}
    ee10:	4618      	mov	r0, r3
    ee12:	3710      	adds	r7, #16
    ee14:	46bd      	mov	sp, r7
    ee16:	bd80      	pop	{r7, pc}
    ee18:	2000223c 	.word	0x2000223c

0000ee1c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    ee1c:	b580      	push	{r7, lr}
    ee1e:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    ee20:	4b01      	ldr	r3, [pc, #4]	; (ee28 <usbd_sof_cb+0xc>)
    ee22:	4798      	blx	r3
}
    ee24:	bf00      	nop
    ee26:	bd80      	pop	{r7, pc}
    ee28:	0000ed49 	.word	0x0000ed49

0000ee2c <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    ee2c:	b580      	push	{r7, lr}
    ee2e:	b082      	sub	sp, #8
    ee30:	af00      	add	r7, sp, #0
    ee32:	4603      	mov	r3, r0
    ee34:	6039      	str	r1, [r7, #0]
    ee36:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    ee38:	79fb      	ldrb	r3, [r7, #7]
    ee3a:	2200      	movs	r2, #0
    ee3c:	6839      	ldr	r1, [r7, #0]
    ee3e:	4618      	mov	r0, r3
    ee40:	4b14      	ldr	r3, [pc, #80]	; (ee94 <usbdc_cb_ctl_req+0x68>)
    ee42:	4798      	blx	r3
    ee44:	4603      	mov	r3, r0
    ee46:	f1b3 3fff 	cmp.w	r3, #4294967295
    ee4a:	d00b      	beq.n	ee64 <usbdc_cb_ctl_req+0x38>
    ee4c:	2b01      	cmp	r3, #1
    ee4e:	d007      	beq.n	ee60 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    ee50:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ee52:	683b      	ldr	r3, [r7, #0]
    ee54:	781b      	ldrb	r3, [r3, #0]
    ee56:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ee5a:	2b00      	cmp	r3, #0
    ee5c:	d007      	beq.n	ee6e <usbdc_cb_ctl_req+0x42>
    ee5e:	e003      	b.n	ee68 <usbdc_cb_ctl_req+0x3c>
		return true;
    ee60:	2301      	movs	r3, #1
    ee62:	e013      	b.n	ee8c <usbdc_cb_ctl_req+0x60>
		return false;
    ee64:	2300      	movs	r3, #0
    ee66:	e011      	b.n	ee8c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ee68:	2b80      	cmp	r3, #128	; 0x80
    ee6a:	d007      	beq.n	ee7c <usbdc_cb_ctl_req+0x50>
    ee6c:	e00d      	b.n	ee8a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    ee6e:	79fb      	ldrb	r3, [r7, #7]
    ee70:	6839      	ldr	r1, [r7, #0]
    ee72:	4618      	mov	r0, r3
    ee74:	4b08      	ldr	r3, [pc, #32]	; (ee98 <usbdc_cb_ctl_req+0x6c>)
    ee76:	4798      	blx	r3
    ee78:	4603      	mov	r3, r0
    ee7a:	e007      	b.n	ee8c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    ee7c:	79fb      	ldrb	r3, [r7, #7]
    ee7e:	6839      	ldr	r1, [r7, #0]
    ee80:	4618      	mov	r0, r3
    ee82:	4b06      	ldr	r3, [pc, #24]	; (ee9c <usbdc_cb_ctl_req+0x70>)
    ee84:	4798      	blx	r3
    ee86:	4603      	mov	r3, r0
    ee88:	e000      	b.n	ee8c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    ee8a:	2300      	movs	r3, #0
	}
}
    ee8c:	4618      	mov	r0, r3
    ee8e:	3708      	adds	r7, #8
    ee90:	46bd      	mov	sp, r7
    ee92:	bd80      	pop	{r7, pc}
    ee94:	0000edbd 	.word	0x0000edbd
    ee98:	0000ec5d 	.word	0x0000ec5d
    ee9c:	0000e885 	.word	0x0000e885

0000eea0 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    eea0:	b580      	push	{r7, lr}
    eea2:	b082      	sub	sp, #8
    eea4:	af00      	add	r7, sp, #0
    eea6:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    eea8:	687b      	ldr	r3, [r7, #4]
    eeaa:	781b      	ldrb	r3, [r3, #0]
    eeac:	2b00      	cmp	r3, #0
    eeae:	d135      	bne.n	ef1c <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    eeb0:	687b      	ldr	r3, [r7, #4]
    eeb2:	785b      	ldrb	r3, [r3, #1]
    eeb4:	2b05      	cmp	r3, #5
    eeb6:	d019      	beq.n	eeec <usbdc_ctrl_status_end+0x4c>
    eeb8:	2b09      	cmp	r3, #9
    eeba:	d000      	beq.n	eebe <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    eebc:	e02f      	b.n	ef1e <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	885b      	ldrh	r3, [r3, #2]
    eec2:	b29b      	uxth	r3, r3
    eec4:	b2da      	uxtb	r2, r3
    eec6:	4b17      	ldr	r3, [pc, #92]	; (ef24 <usbdc_ctrl_status_end+0x84>)
    eec8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    eeca:	687b      	ldr	r3, [r7, #4]
    eecc:	885b      	ldrh	r3, [r3, #2]
    eece:	b29b      	uxth	r3, r3
    eed0:	2b00      	cmp	r3, #0
    eed2:	d001      	beq.n	eed8 <usbdc_ctrl_status_end+0x38>
    eed4:	2204      	movs	r2, #4
    eed6:	e000      	b.n	eeda <usbdc_ctrl_status_end+0x3a>
    eed8:	2203      	movs	r2, #3
    eeda:	4b12      	ldr	r3, [pc, #72]	; (ef24 <usbdc_ctrl_status_end+0x84>)
    eedc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    eede:	4b11      	ldr	r3, [pc, #68]	; (ef24 <usbdc_ctrl_status_end+0x84>)
    eee0:	7e9b      	ldrb	r3, [r3, #26]
    eee2:	4619      	mov	r1, r3
    eee4:	2001      	movs	r0, #1
    eee6:	4b10      	ldr	r3, [pc, #64]	; (ef28 <usbdc_ctrl_status_end+0x88>)
    eee8:	4798      	blx	r3
		break;
    eeea:	e018      	b.n	ef1e <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	885b      	ldrh	r3, [r3, #2]
    eef0:	b29b      	uxth	r3, r3
    eef2:	b2db      	uxtb	r3, r3
    eef4:	4618      	mov	r0, r3
    eef6:	4b0d      	ldr	r3, [pc, #52]	; (ef2c <usbdc_ctrl_status_end+0x8c>)
    eef8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    eefa:	687b      	ldr	r3, [r7, #4]
    eefc:	885b      	ldrh	r3, [r3, #2]
    eefe:	b29b      	uxth	r3, r3
    ef00:	2b00      	cmp	r3, #0
    ef02:	d001      	beq.n	ef08 <usbdc_ctrl_status_end+0x68>
    ef04:	2203      	movs	r2, #3
    ef06:	e000      	b.n	ef0a <usbdc_ctrl_status_end+0x6a>
    ef08:	2202      	movs	r2, #2
    ef0a:	4b06      	ldr	r3, [pc, #24]	; (ef24 <usbdc_ctrl_status_end+0x84>)
    ef0c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ef0e:	4b05      	ldr	r3, [pc, #20]	; (ef24 <usbdc_ctrl_status_end+0x84>)
    ef10:	7e9b      	ldrb	r3, [r3, #26]
    ef12:	4619      	mov	r1, r3
    ef14:	2001      	movs	r0, #1
    ef16:	4b04      	ldr	r3, [pc, #16]	; (ef28 <usbdc_ctrl_status_end+0x88>)
    ef18:	4798      	blx	r3
		break;
    ef1a:	e000      	b.n	ef1e <usbdc_ctrl_status_end+0x7e>
		return;
    ef1c:	bf00      	nop
	}
}
    ef1e:	3708      	adds	r7, #8
    ef20:	46bd      	mov	sp, r7
    ef22:	bd80      	pop	{r7, pc}
    ef24:	2000223c 	.word	0x2000223c
    ef28:	0000ed7d 	.word	0x0000ed7d
    ef2c:	0000eafd 	.word	0x0000eafd

0000ef30 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    ef30:	b580      	push	{r7, lr}
    ef32:	b082      	sub	sp, #8
    ef34:	af00      	add	r7, sp, #0
    ef36:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ef38:	2201      	movs	r2, #1
    ef3a:	6879      	ldr	r1, [r7, #4]
    ef3c:	2000      	movs	r0, #0
    ef3e:	4b03      	ldr	r3, [pc, #12]	; (ef4c <usbdc_ctrl_data_end+0x1c>)
    ef40:	4798      	blx	r3
	return false;
    ef42:	2300      	movs	r3, #0
}
    ef44:	4618      	mov	r0, r3
    ef46:	3708      	adds	r7, #8
    ef48:	46bd      	mov	sp, r7
    ef4a:	bd80      	pop	{r7, pc}
    ef4c:	0000edbd 	.word	0x0000edbd

0000ef50 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    ef50:	b580      	push	{r7, lr}
    ef52:	b082      	sub	sp, #8
    ef54:	af00      	add	r7, sp, #0
    ef56:	4603      	mov	r3, r0
    ef58:	603a      	str	r2, [r7, #0]
    ef5a:	71fb      	strb	r3, [r7, #7]
    ef5c:	460b      	mov	r3, r1
    ef5e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    ef60:	79bb      	ldrb	r3, [r7, #6]
    ef62:	2b00      	cmp	r3, #0
    ef64:	d002      	beq.n	ef6c <usbdc_cb_ctl_done+0x1c>
    ef66:	2b01      	cmp	r3, #1
    ef68:	d004      	beq.n	ef74 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    ef6a:	e008      	b.n	ef7e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    ef6c:	6838      	ldr	r0, [r7, #0]
    ef6e:	4b06      	ldr	r3, [pc, #24]	; (ef88 <usbdc_cb_ctl_done+0x38>)
    ef70:	4798      	blx	r3
		break;
    ef72:	e004      	b.n	ef7e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    ef74:	6838      	ldr	r0, [r7, #0]
    ef76:	4b05      	ldr	r3, [pc, #20]	; (ef8c <usbdc_cb_ctl_done+0x3c>)
    ef78:	4798      	blx	r3
    ef7a:	4603      	mov	r3, r0
    ef7c:	e000      	b.n	ef80 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ef7e:	2300      	movs	r3, #0
}
    ef80:	4618      	mov	r0, r3
    ef82:	3708      	adds	r7, #8
    ef84:	46bd      	mov	sp, r7
    ef86:	bd80      	pop	{r7, pc}
    ef88:	0000eea1 	.word	0x0000eea1
    ef8c:	0000ef31 	.word	0x0000ef31

0000ef90 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ef90:	b580      	push	{r7, lr}
    ef92:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ef94:	4b10      	ldr	r3, [pc, #64]	; (efd8 <usbdc_reset+0x48>)
    ef96:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ef98:	4b10      	ldr	r3, [pc, #64]	; (efdc <usbdc_reset+0x4c>)
    ef9a:	2202      	movs	r2, #2
    ef9c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ef9e:	4b0f      	ldr	r3, [pc, #60]	; (efdc <usbdc_reset+0x4c>)
    efa0:	2200      	movs	r2, #0
    efa2:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    efa4:	4b0d      	ldr	r3, [pc, #52]	; (efdc <usbdc_reset+0x4c>)
    efa6:	2200      	movs	r2, #0
    efa8:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    efaa:	2000      	movs	r0, #0
    efac:	4b0c      	ldr	r3, [pc, #48]	; (efe0 <usbdc_reset+0x50>)
    efae:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    efb0:	4b0a      	ldr	r3, [pc, #40]	; (efdc <usbdc_reset+0x4c>)
    efb2:	7f1b      	ldrb	r3, [r3, #28]
    efb4:	4618      	mov	r0, r3
    efb6:	4b0b      	ldr	r3, [pc, #44]	; (efe4 <usbdc_reset+0x54>)
    efb8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    efba:	4a0b      	ldr	r2, [pc, #44]	; (efe8 <usbdc_reset+0x58>)
    efbc:	2100      	movs	r1, #0
    efbe:	2000      	movs	r0, #0
    efc0:	4b0a      	ldr	r3, [pc, #40]	; (efec <usbdc_reset+0x5c>)
    efc2:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    efc4:	4a0a      	ldr	r2, [pc, #40]	; (eff0 <usbdc_reset+0x60>)
    efc6:	2102      	movs	r1, #2
    efc8:	2000      	movs	r0, #0
    efca:	4b08      	ldr	r3, [pc, #32]	; (efec <usbdc_reset+0x5c>)
    efcc:	4798      	blx	r3
	usb_d_ep_enable(0);
    efce:	2000      	movs	r0, #0
    efd0:	4b08      	ldr	r3, [pc, #32]	; (eff4 <usbdc_reset+0x64>)
    efd2:	4798      	blx	r3
}
    efd4:	bf00      	nop
    efd6:	bd80      	pop	{r7, pc}
    efd8:	0000e9dd 	.word	0x0000e9dd
    efdc:	2000223c 	.word	0x2000223c
    efe0:	00005725 	.word	0x00005725
    efe4:	00005661 	.word	0x00005661
    efe8:	0000ee2d 	.word	0x0000ee2d
    efec:	00005a79 	.word	0x00005a79
    eff0:	0000ef51 	.word	0x0000ef51
    eff4:	00005775 	.word	0x00005775

0000eff8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    eff8:	b580      	push	{r7, lr}
    effa:	b082      	sub	sp, #8
    effc:	af00      	add	r7, sp, #0
    effe:	4603      	mov	r3, r0
    f000:	6039      	str	r1, [r7, #0]
    f002:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    f004:	79fb      	ldrb	r3, [r7, #7]
    f006:	2b00      	cmp	r3, #0
    f008:	d002      	beq.n	f010 <usbd_event_cb+0x18>
    f00a:	2b01      	cmp	r3, #1
    f00c:	d005      	beq.n	f01a <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    f00e:	e007      	b.n	f020 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    f010:	6839      	ldr	r1, [r7, #0]
    f012:	2000      	movs	r0, #0
    f014:	4b04      	ldr	r3, [pc, #16]	; (f028 <usbd_event_cb+0x30>)
    f016:	4798      	blx	r3
		break;
    f018:	e002      	b.n	f020 <usbd_event_cb+0x28>
		usbdc_reset();
    f01a:	4b04      	ldr	r3, [pc, #16]	; (f02c <usbd_event_cb+0x34>)
    f01c:	4798      	blx	r3
		break;
    f01e:	bf00      	nop
	}
}
    f020:	bf00      	nop
    f022:	3708      	adds	r7, #8
    f024:	46bd      	mov	sp, r7
    f026:	bd80      	pop	{r7, pc}
    f028:	0000ed7d 	.word	0x0000ed7d
    f02c:	0000ef91 	.word	0x0000ef91

0000f030 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    f030:	b580      	push	{r7, lr}
    f032:	b088      	sub	sp, #32
    f034:	af00      	add	r7, sp, #0
    f036:	60b9      	str	r1, [r7, #8]
    f038:	607a      	str	r2, [r7, #4]
    f03a:	461a      	mov	r2, r3
    f03c:	4603      	mov	r3, r0
    f03e:	73fb      	strb	r3, [r7, #15]
    f040:	4613      	mov	r3, r2
    f042:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    f044:	68bb      	ldr	r3, [r7, #8]
    f046:	617b      	str	r3, [r7, #20]
    f048:	687b      	ldr	r3, [r7, #4]
    f04a:	61bb      	str	r3, [r7, #24]
    f04c:	7bfb      	ldrb	r3, [r7, #15]
    f04e:	773b      	strb	r3, [r7, #28]
    f050:	7bbb      	ldrb	r3, [r7, #14]
    f052:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    f054:	f107 0314 	add.w	r3, r7, #20
    f058:	4618      	mov	r0, r3
    f05a:	4b03      	ldr	r3, [pc, #12]	; (f068 <usbdc_xfer+0x38>)
    f05c:	4798      	blx	r3
    f05e:	4603      	mov	r3, r0
}
    f060:	4618      	mov	r0, r3
    f062:	3720      	adds	r7, #32
    f064:	46bd      	mov	sp, r7
    f066:	bd80      	pop	{r7, pc}
    f068:	000057e5 	.word	0x000057e5

0000f06c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    f06c:	b580      	push	{r7, lr}
    f06e:	b082      	sub	sp, #8
    f070:	af00      	add	r7, sp, #0
    f072:	4603      	mov	r3, r0
    f074:	6039      	str	r1, [r7, #0]
    f076:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    f078:	79fb      	ldrb	r3, [r7, #7]
    f07a:	2b01      	cmp	r3, #1
    f07c:	d009      	beq.n	f092 <usbdc_register_handler+0x26>
    f07e:	2b02      	cmp	r3, #2
    f080:	d00c      	beq.n	f09c <usbdc_register_handler+0x30>
    f082:	2b00      	cmp	r3, #0
    f084:	d000      	beq.n	f088 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    f086:	e00e      	b.n	f0a6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    f088:	6839      	ldr	r1, [r7, #0]
    f08a:	4809      	ldr	r0, [pc, #36]	; (f0b0 <usbdc_register_handler+0x44>)
    f08c:	4b09      	ldr	r3, [pc, #36]	; (f0b4 <usbdc_register_handler+0x48>)
    f08e:	4798      	blx	r3
		break;
    f090:	e009      	b.n	f0a6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    f092:	6839      	ldr	r1, [r7, #0]
    f094:	4808      	ldr	r0, [pc, #32]	; (f0b8 <usbdc_register_handler+0x4c>)
    f096:	4b07      	ldr	r3, [pc, #28]	; (f0b4 <usbdc_register_handler+0x48>)
    f098:	4798      	blx	r3
		break;
    f09a:	e004      	b.n	f0a6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    f09c:	6839      	ldr	r1, [r7, #0]
    f09e:	4807      	ldr	r0, [pc, #28]	; (f0bc <usbdc_register_handler+0x50>)
    f0a0:	4b04      	ldr	r3, [pc, #16]	; (f0b4 <usbdc_register_handler+0x48>)
    f0a2:	4798      	blx	r3
		break;
    f0a4:	bf00      	nop
	}
}
    f0a6:	bf00      	nop
    f0a8:	3708      	adds	r7, #8
    f0aa:	46bd      	mov	sp, r7
    f0ac:	bd80      	pop	{r7, pc}
    f0ae:	bf00      	nop
    f0b0:	20002240 	.word	0x20002240
    f0b4:	00005bd1 	.word	0x00005bd1
    f0b8:	20002244 	.word	0x20002244
    f0bc:	20002248 	.word	0x20002248

0000f0c0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    f0c0:	b580      	push	{r7, lr}
    f0c2:	b084      	sub	sp, #16
    f0c4:	af00      	add	r7, sp, #0
    f0c6:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    f0c8:	687b      	ldr	r3, [r7, #4]
    f0ca:	2b00      	cmp	r3, #0
    f0cc:	bf14      	ite	ne
    f0ce:	2301      	movne	r3, #1
    f0d0:	2300      	moveq	r3, #0
    f0d2:	b2db      	uxtb	r3, r3
    f0d4:	f240 3255 	movw	r2, #853	; 0x355
    f0d8:	4910      	ldr	r1, [pc, #64]	; (f11c <usbdc_init+0x5c>)
    f0da:	4618      	mov	r0, r3
    f0dc:	4b10      	ldr	r3, [pc, #64]	; (f120 <usbdc_init+0x60>)
    f0de:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    f0e0:	4b10      	ldr	r3, [pc, #64]	; (f124 <usbdc_init+0x64>)
    f0e2:	4798      	blx	r3
    f0e4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    f0e6:	68fb      	ldr	r3, [r7, #12]
    f0e8:	2b00      	cmp	r3, #0
    f0ea:	da01      	bge.n	f0f0 <usbdc_init+0x30>
		return rc;
    f0ec:	68fb      	ldr	r3, [r7, #12]
    f0ee:	e010      	b.n	f112 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    f0f0:	2220      	movs	r2, #32
    f0f2:	2100      	movs	r1, #0
    f0f4:	480c      	ldr	r0, [pc, #48]	; (f128 <usbdc_init+0x68>)
    f0f6:	4b0d      	ldr	r3, [pc, #52]	; (f12c <usbdc_init+0x6c>)
    f0f8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    f0fa:	4a0b      	ldr	r2, [pc, #44]	; (f128 <usbdc_init+0x68>)
    f0fc:	687b      	ldr	r3, [r7, #4]
    f0fe:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    f100:	490b      	ldr	r1, [pc, #44]	; (f130 <usbdc_init+0x70>)
    f102:	2000      	movs	r0, #0
    f104:	4b0b      	ldr	r3, [pc, #44]	; (f134 <usbdc_init+0x74>)
    f106:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    f108:	490b      	ldr	r1, [pc, #44]	; (f138 <usbdc_init+0x78>)
    f10a:	2001      	movs	r0, #1
    f10c:	4b09      	ldr	r3, [pc, #36]	; (f134 <usbdc_init+0x74>)
    f10e:	4798      	blx	r3

	return 0;
    f110:	2300      	movs	r3, #0
}
    f112:	4618      	mov	r0, r3
    f114:	3710      	adds	r7, #16
    f116:	46bd      	mov	sp, r7
    f118:	bd80      	pop	{r7, pc}
    f11a:	bf00      	nop
    f11c:	000103c4 	.word	0x000103c4
    f120:	00005af5 	.word	0x00005af5
    f124:	0000554d 	.word	0x0000554d
    f128:	2000223c 	.word	0x2000223c
    f12c:	0000fb25 	.word	0x0000fb25
    f130:	0000ee1d 	.word	0x0000ee1d
    f134:	000055f9 	.word	0x000055f9
    f138:	0000eff9 	.word	0x0000eff9

0000f13c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    f13c:	b580      	push	{r7, lr}
    f13e:	b082      	sub	sp, #8
    f140:	af00      	add	r7, sp, #0
    f142:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    f144:	6879      	ldr	r1, [r7, #4]
    f146:	4803      	ldr	r0, [pc, #12]	; (f154 <usbdc_register_function+0x18>)
    f148:	4b03      	ldr	r3, [pc, #12]	; (f158 <usbdc_register_function+0x1c>)
    f14a:	4798      	blx	r3
}
    f14c:	bf00      	nop
    f14e:	3708      	adds	r7, #8
    f150:	46bd      	mov	sp, r7
    f152:	bd80      	pop	{r7, pc}
    f154:	2000224c 	.word	0x2000224c
    f158:	00005bd1 	.word	0x00005bd1

0000f15c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    f15c:	b580      	push	{r7, lr}
    f15e:	b082      	sub	sp, #8
    f160:	af00      	add	r7, sp, #0
    f162:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    f164:	4b0f      	ldr	r3, [pc, #60]	; (f1a4 <usbdc_start+0x48>)
    f166:	7e9b      	ldrb	r3, [r3, #26]
    f168:	2b00      	cmp	r3, #0
    f16a:	d002      	beq.n	f172 <usbdc_start+0x16>
		return ERR_BUSY;
    f16c:	f06f 0303 	mvn.w	r3, #3
    f170:	e013      	b.n	f19a <usbdc_start+0x3e>
	}

	if (desces) {
    f172:	687b      	ldr	r3, [r7, #4]
    f174:	2b00      	cmp	r3, #0
    f176:	d00e      	beq.n	f196 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    f178:	4a0a      	ldr	r2, [pc, #40]	; (f1a4 <usbdc_start+0x48>)
    f17a:	687b      	ldr	r3, [r7, #4]
    f17c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    f17e:	687b      	ldr	r3, [r7, #4]
    f180:	681b      	ldr	r3, [r3, #0]
    f182:	79da      	ldrb	r2, [r3, #7]
    f184:	4b07      	ldr	r3, [pc, #28]	; (f1a4 <usbdc_start+0x48>)
    f186:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    f188:	4b06      	ldr	r3, [pc, #24]	; (f1a4 <usbdc_start+0x48>)
    f18a:	2201      	movs	r2, #1
    f18c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    f18e:	4b06      	ldr	r3, [pc, #24]	; (f1a8 <usbdc_start+0x4c>)
    f190:	4798      	blx	r3
	return ERR_NONE;
    f192:	2300      	movs	r3, #0
    f194:	e001      	b.n	f19a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    f196:	f06f 0308 	mvn.w	r3, #8
}
    f19a:	4618      	mov	r0, r3
    f19c:	3708      	adds	r7, #8
    f19e:	46bd      	mov	sp, r7
    f1a0:	bd80      	pop	{r7, pc}
    f1a2:	bf00      	nop
    f1a4:	2000223c 	.word	0x2000223c
    f1a8:	0000561d 	.word	0x0000561d

0000f1ac <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    f1ac:	b580      	push	{r7, lr}
    f1ae:	af00      	add	r7, sp, #0
	usb_d_attach();
    f1b0:	4b01      	ldr	r3, [pc, #4]	; (f1b8 <usbdc_attach+0xc>)
    f1b2:	4798      	blx	r3
}
    f1b4:	bf00      	nop
    f1b6:	bd80      	pop	{r7, pc}
    f1b8:	00005631 	.word	0x00005631

0000f1bc <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    f1bc:	b480      	push	{r7}
    f1be:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    f1c0:	4b03      	ldr	r3, [pc, #12]	; (f1d0 <usbdc_get_ctrl_buffer+0x14>)
    f1c2:	695b      	ldr	r3, [r3, #20]
}
    f1c4:	4618      	mov	r0, r3
    f1c6:	46bd      	mov	sp, r7
    f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    f1cc:	4770      	bx	lr
    f1ce:	bf00      	nop
    f1d0:	2000223c 	.word	0x2000223c

0000f1d4 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    f1d4:	b480      	push	{r7}
    f1d6:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    f1d8:	4b07      	ldr	r3, [pc, #28]	; (f1f8 <usbdc_get_state+0x24>)
    f1da:	7e9b      	ldrb	r3, [r3, #26]
    f1dc:	f003 0310 	and.w	r3, r3, #16
    f1e0:	2b00      	cmp	r3, #0
    f1e2:	d001      	beq.n	f1e8 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    f1e4:	2310      	movs	r3, #16
    f1e6:	e001      	b.n	f1ec <usbdc_get_state+0x18>
	}
	return usbdc.state;
    f1e8:	4b03      	ldr	r3, [pc, #12]	; (f1f8 <usbdc_get_state+0x24>)
    f1ea:	7e9b      	ldrb	r3, [r3, #26]
}
    f1ec:	4618      	mov	r0, r3
    f1ee:	46bd      	mov	sp, r7
    f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    f1f4:	4770      	bx	lr
    f1f6:	bf00      	nop
    f1f8:	2000223c 	.word	0x2000223c

0000f1fc <usb_get_u16>:
{
    f1fc:	b480      	push	{r7}
    f1fe:	b083      	sub	sp, #12
    f200:	af00      	add	r7, sp, #0
    f202:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f204:	687b      	ldr	r3, [r7, #4]
    f206:	781b      	ldrb	r3, [r3, #0]
    f208:	b29a      	uxth	r2, r3
    f20a:	687b      	ldr	r3, [r7, #4]
    f20c:	3301      	adds	r3, #1
    f20e:	781b      	ldrb	r3, [r3, #0]
    f210:	b29b      	uxth	r3, r3
    f212:	021b      	lsls	r3, r3, #8
    f214:	b29b      	uxth	r3, r3
    f216:	4413      	add	r3, r2
    f218:	b29b      	uxth	r3, r3
}
    f21a:	4618      	mov	r0, r3
    f21c:	370c      	adds	r7, #12
    f21e:	46bd      	mov	sp, r7
    f220:	f85d 7b04 	ldr.w	r7, [sp], #4
    f224:	4770      	bx	lr

0000f226 <usb_desc_len>:
{
    f226:	b480      	push	{r7}
    f228:	b083      	sub	sp, #12
    f22a:	af00      	add	r7, sp, #0
    f22c:	6078      	str	r0, [r7, #4]
	return desc[0];
    f22e:	687b      	ldr	r3, [r7, #4]
    f230:	781b      	ldrb	r3, [r3, #0]
}
    f232:	4618      	mov	r0, r3
    f234:	370c      	adds	r7, #12
    f236:	46bd      	mov	sp, r7
    f238:	f85d 7b04 	ldr.w	r7, [sp], #4
    f23c:	4770      	bx	lr

0000f23e <usb_desc_type>:
{
    f23e:	b480      	push	{r7}
    f240:	b083      	sub	sp, #12
    f242:	af00      	add	r7, sp, #0
    f244:	6078      	str	r0, [r7, #4]
	return desc[1];
    f246:	687b      	ldr	r3, [r7, #4]
    f248:	3301      	adds	r3, #1
    f24a:	781b      	ldrb	r3, [r3, #0]
}
    f24c:	4618      	mov	r0, r3
    f24e:	370c      	adds	r7, #12
    f250:	46bd      	mov	sp, r7
    f252:	f85d 7b04 	ldr.w	r7, [sp], #4
    f256:	4770      	bx	lr

0000f258 <usb_desc_next>:
{
    f258:	b580      	push	{r7, lr}
    f25a:	b082      	sub	sp, #8
    f25c:	af00      	add	r7, sp, #0
    f25e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f260:	6878      	ldr	r0, [r7, #4]
    f262:	4b05      	ldr	r3, [pc, #20]	; (f278 <usb_desc_next+0x20>)
    f264:	4798      	blx	r3
    f266:	4603      	mov	r3, r0
    f268:	461a      	mov	r2, r3
    f26a:	687b      	ldr	r3, [r7, #4]
    f26c:	4413      	add	r3, r2
}
    f26e:	4618      	mov	r0, r3
    f270:	3708      	adds	r7, #8
    f272:	46bd      	mov	sp, r7
    f274:	bd80      	pop	{r7, pc}
    f276:	bf00      	nop
    f278:	0000f227 	.word	0x0000f227

0000f27c <usb_cfg_desc_total_len>:
{
    f27c:	b580      	push	{r7, lr}
    f27e:	b082      	sub	sp, #8
    f280:	af00      	add	r7, sp, #0
    f282:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f284:	687b      	ldr	r3, [r7, #4]
    f286:	3302      	adds	r3, #2
    f288:	4618      	mov	r0, r3
    f28a:	4b03      	ldr	r3, [pc, #12]	; (f298 <usb_cfg_desc_total_len+0x1c>)
    f28c:	4798      	blx	r3
    f28e:	4603      	mov	r3, r0
}
    f290:	4618      	mov	r0, r3
    f292:	3708      	adds	r7, #8
    f294:	46bd      	mov	sp, r7
    f296:	bd80      	pop	{r7, pc}
    f298:	0000f1fd 	.word	0x0000f1fd

0000f29c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    f29c:	b580      	push	{r7, lr}
    f29e:	b082      	sub	sp, #8
    f2a0:	af00      	add	r7, sp, #0
    f2a2:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    f2a4:	6878      	ldr	r0, [r7, #4]
    f2a6:	4b05      	ldr	r3, [pc, #20]	; (f2bc <usb_cfg_desc_next+0x20>)
    f2a8:	4798      	blx	r3
    f2aa:	4603      	mov	r3, r0
    f2ac:	461a      	mov	r2, r3
    f2ae:	687b      	ldr	r3, [r7, #4]
    f2b0:	4413      	add	r3, r2
}
    f2b2:	4618      	mov	r0, r3
    f2b4:	3708      	adds	r7, #8
    f2b6:	46bd      	mov	sp, r7
    f2b8:	bd80      	pop	{r7, pc}
    f2ba:	bf00      	nop
    f2bc:	0000f27d 	.word	0x0000f27d

0000f2c0 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    f2c0:	b580      	push	{r7, lr}
    f2c2:	b084      	sub	sp, #16
    f2c4:	af00      	add	r7, sp, #0
    f2c6:	60f8      	str	r0, [r7, #12]
    f2c8:	60b9      	str	r1, [r7, #8]
    f2ca:	4613      	mov	r3, r2
    f2cc:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f2ce:	e015      	b.n	f2fc <usb_find_desc+0x3c>
		_desc_len_check();
    f2d0:	68f8      	ldr	r0, [r7, #12]
    f2d2:	4b0f      	ldr	r3, [pc, #60]	; (f310 <usb_find_desc+0x50>)
    f2d4:	4798      	blx	r3
    f2d6:	4603      	mov	r3, r0
    f2d8:	2b01      	cmp	r3, #1
    f2da:	d801      	bhi.n	f2e0 <usb_find_desc+0x20>
    f2dc:	2300      	movs	r3, #0
    f2de:	e012      	b.n	f306 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    f2e0:	68f8      	ldr	r0, [r7, #12]
    f2e2:	4b0c      	ldr	r3, [pc, #48]	; (f314 <usb_find_desc+0x54>)
    f2e4:	4798      	blx	r3
    f2e6:	4603      	mov	r3, r0
    f2e8:	461a      	mov	r2, r3
    f2ea:	79fb      	ldrb	r3, [r7, #7]
    f2ec:	4293      	cmp	r3, r2
    f2ee:	d101      	bne.n	f2f4 <usb_find_desc+0x34>
			return desc;
    f2f0:	68fb      	ldr	r3, [r7, #12]
    f2f2:	e008      	b.n	f306 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    f2f4:	68f8      	ldr	r0, [r7, #12]
    f2f6:	4b08      	ldr	r3, [pc, #32]	; (f318 <usb_find_desc+0x58>)
    f2f8:	4798      	blx	r3
    f2fa:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    f2fc:	68fa      	ldr	r2, [r7, #12]
    f2fe:	68bb      	ldr	r3, [r7, #8]
    f300:	429a      	cmp	r2, r3
    f302:	d3e5      	bcc.n	f2d0 <usb_find_desc+0x10>
	}
	return NULL;
    f304:	2300      	movs	r3, #0
}
    f306:	4618      	mov	r0, r3
    f308:	3710      	adds	r7, #16
    f30a:	46bd      	mov	sp, r7
    f30c:	bd80      	pop	{r7, pc}
    f30e:	bf00      	nop
    f310:	0000f227 	.word	0x0000f227
    f314:	0000f23f 	.word	0x0000f23f
    f318:	0000f259 	.word	0x0000f259

0000f31c <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    f31c:	b580      	push	{r7, lr}
    f31e:	b082      	sub	sp, #8
    f320:	af00      	add	r7, sp, #0
    f322:	6078      	str	r0, [r7, #4]
    f324:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f326:	e019      	b.n	f35c <usb_find_ep_desc+0x40>
		_desc_len_check();
    f328:	6878      	ldr	r0, [r7, #4]
    f32a:	4b12      	ldr	r3, [pc, #72]	; (f374 <usb_find_ep_desc+0x58>)
    f32c:	4798      	blx	r3
    f32e:	4603      	mov	r3, r0
    f330:	2b01      	cmp	r3, #1
    f332:	d801      	bhi.n	f338 <usb_find_ep_desc+0x1c>
    f334:	2300      	movs	r3, #0
    f336:	e018      	b.n	f36a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    f338:	6878      	ldr	r0, [r7, #4]
    f33a:	4b0f      	ldr	r3, [pc, #60]	; (f378 <usb_find_ep_desc+0x5c>)
    f33c:	4798      	blx	r3
    f33e:	4603      	mov	r3, r0
    f340:	2b04      	cmp	r3, #4
    f342:	d010      	beq.n	f366 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    f344:	6878      	ldr	r0, [r7, #4]
    f346:	4b0c      	ldr	r3, [pc, #48]	; (f378 <usb_find_ep_desc+0x5c>)
    f348:	4798      	blx	r3
    f34a:	4603      	mov	r3, r0
    f34c:	2b05      	cmp	r3, #5
    f34e:	d101      	bne.n	f354 <usb_find_ep_desc+0x38>
			return desc;
    f350:	687b      	ldr	r3, [r7, #4]
    f352:	e00a      	b.n	f36a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    f354:	6878      	ldr	r0, [r7, #4]
    f356:	4b09      	ldr	r3, [pc, #36]	; (f37c <usb_find_ep_desc+0x60>)
    f358:	4798      	blx	r3
    f35a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    f35c:	687a      	ldr	r2, [r7, #4]
    f35e:	683b      	ldr	r3, [r7, #0]
    f360:	429a      	cmp	r2, r3
    f362:	d3e1      	bcc.n	f328 <usb_find_ep_desc+0xc>
    f364:	e000      	b.n	f368 <usb_find_ep_desc+0x4c>
			break;
    f366:	bf00      	nop
	}
	return NULL;
    f368:	2300      	movs	r3, #0
}
    f36a:	4618      	mov	r0, r3
    f36c:	3708      	adds	r7, #8
    f36e:	46bd      	mov	sp, r7
    f370:	bd80      	pop	{r7, pc}
    f372:	bf00      	nop
    f374:	0000f227 	.word	0x0000f227
    f378:	0000f23f 	.word	0x0000f23f
    f37c:	0000f259 	.word	0x0000f259

0000f380 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    f380:	b580      	push	{r7, lr}
    f382:	b084      	sub	sp, #16
    f384:	af00      	add	r7, sp, #0
    f386:	60f8      	str	r0, [r7, #12]
    f388:	60b9      	str	r1, [r7, #8]
    f38a:	4613      	mov	r3, r2
    f38c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    f38e:	2202      	movs	r2, #2
    f390:	68b9      	ldr	r1, [r7, #8]
    f392:	68f8      	ldr	r0, [r7, #12]
    f394:	4b15      	ldr	r3, [pc, #84]	; (f3ec <usb_find_cfg_desc+0x6c>)
    f396:	4798      	blx	r3
    f398:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    f39a:	68fb      	ldr	r3, [r7, #12]
    f39c:	2b00      	cmp	r3, #0
    f39e:	d11a      	bne.n	f3d6 <usb_find_cfg_desc+0x56>
		return NULL;
    f3a0:	2300      	movs	r3, #0
    f3a2:	e01f      	b.n	f3e4 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    f3a4:	68f8      	ldr	r0, [r7, #12]
    f3a6:	4b12      	ldr	r3, [pc, #72]	; (f3f0 <usb_find_cfg_desc+0x70>)
    f3a8:	4798      	blx	r3
    f3aa:	4603      	mov	r3, r0
    f3ac:	2b01      	cmp	r3, #1
    f3ae:	d801      	bhi.n	f3b4 <usb_find_cfg_desc+0x34>
    f3b0:	2300      	movs	r3, #0
    f3b2:	e017      	b.n	f3e4 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    f3b4:	68fb      	ldr	r3, [r7, #12]
    f3b6:	3301      	adds	r3, #1
    f3b8:	781b      	ldrb	r3, [r3, #0]
    f3ba:	2b02      	cmp	r3, #2
    f3bc:	d110      	bne.n	f3e0 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    f3be:	68fb      	ldr	r3, [r7, #12]
    f3c0:	3305      	adds	r3, #5
    f3c2:	781b      	ldrb	r3, [r3, #0]
    f3c4:	79fa      	ldrb	r2, [r7, #7]
    f3c6:	429a      	cmp	r2, r3
    f3c8:	d101      	bne.n	f3ce <usb_find_cfg_desc+0x4e>
			return desc;
    f3ca:	68fb      	ldr	r3, [r7, #12]
    f3cc:	e00a      	b.n	f3e4 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    f3ce:	68f8      	ldr	r0, [r7, #12]
    f3d0:	4b08      	ldr	r3, [pc, #32]	; (f3f4 <usb_find_cfg_desc+0x74>)
    f3d2:	4798      	blx	r3
    f3d4:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    f3d6:	68fa      	ldr	r2, [r7, #12]
    f3d8:	68bb      	ldr	r3, [r7, #8]
    f3da:	429a      	cmp	r2, r3
    f3dc:	d3e2      	bcc.n	f3a4 <usb_find_cfg_desc+0x24>
    f3de:	e000      	b.n	f3e2 <usb_find_cfg_desc+0x62>
			break;
    f3e0:	bf00      	nop
	}
	return NULL;
    f3e2:	2300      	movs	r3, #0
}
    f3e4:	4618      	mov	r0, r3
    f3e6:	3710      	adds	r7, #16
    f3e8:	46bd      	mov	sp, r7
    f3ea:	bd80      	pop	{r7, pc}
    f3ec:	0000f2c1 	.word	0x0000f2c1
    f3f0:	0000f227 	.word	0x0000f227
    f3f4:	0000f29d 	.word	0x0000f29d

0000f3f8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    f3f8:	b580      	push	{r7, lr}
    f3fa:	b086      	sub	sp, #24
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	60f8      	str	r0, [r7, #12]
    f400:	60b9      	str	r1, [r7, #8]
    f402:	4613      	mov	r3, r2
    f404:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    f406:	2300      	movs	r3, #0
    f408:	75fb      	strb	r3, [r7, #23]
    f40a:	e020      	b.n	f44e <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    f40c:	2203      	movs	r2, #3
    f40e:	68b9      	ldr	r1, [r7, #8]
    f410:	68f8      	ldr	r0, [r7, #12]
    f412:	4b13      	ldr	r3, [pc, #76]	; (f460 <usb_find_str_desc+0x68>)
    f414:	4798      	blx	r3
    f416:	60f8      	str	r0, [r7, #12]
		if (desc) {
    f418:	68fb      	ldr	r3, [r7, #12]
    f41a:	2b00      	cmp	r3, #0
    f41c:	d015      	beq.n	f44a <usb_find_str_desc+0x52>
			_desc_len_check();
    f41e:	68f8      	ldr	r0, [r7, #12]
    f420:	4b10      	ldr	r3, [pc, #64]	; (f464 <usb_find_str_desc+0x6c>)
    f422:	4798      	blx	r3
    f424:	4603      	mov	r3, r0
    f426:	2b01      	cmp	r3, #1
    f428:	d801      	bhi.n	f42e <usb_find_str_desc+0x36>
    f42a:	2300      	movs	r3, #0
    f42c:	e014      	b.n	f458 <usb_find_str_desc+0x60>
			if (i == str_index) {
    f42e:	7dfa      	ldrb	r2, [r7, #23]
    f430:	79fb      	ldrb	r3, [r7, #7]
    f432:	429a      	cmp	r2, r3
    f434:	d101      	bne.n	f43a <usb_find_str_desc+0x42>
				return desc;
    f436:	68fb      	ldr	r3, [r7, #12]
    f438:	e00e      	b.n	f458 <usb_find_str_desc+0x60>
			}
			i++;
    f43a:	7dfb      	ldrb	r3, [r7, #23]
    f43c:	3301      	adds	r3, #1
    f43e:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    f440:	68f8      	ldr	r0, [r7, #12]
    f442:	4b09      	ldr	r3, [pc, #36]	; (f468 <usb_find_str_desc+0x70>)
    f444:	4798      	blx	r3
    f446:	60f8      	str	r0, [r7, #12]
    f448:	e001      	b.n	f44e <usb_find_str_desc+0x56>
		} else {
			return NULL;
    f44a:	2300      	movs	r3, #0
    f44c:	e004      	b.n	f458 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    f44e:	68fa      	ldr	r2, [r7, #12]
    f450:	68bb      	ldr	r3, [r7, #8]
    f452:	429a      	cmp	r2, r3
    f454:	d3da      	bcc.n	f40c <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    f456:	2300      	movs	r3, #0
}
    f458:	4618      	mov	r0, r3
    f45a:	3718      	adds	r7, #24
    f45c:	46bd      	mov	sp, r7
    f45e:	bd80      	pop	{r7, pc}
    f460:	0000f2c1 	.word	0x0000f2c1
    f464:	0000f227 	.word	0x0000f227
    f468:	0000f259 	.word	0x0000f259

0000f46c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    f46c:	b580      	push	{r7, lr}
    f46e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    f470:	4805      	ldr	r0, [pc, #20]	; (f488 <cdc_device_acm_init+0x1c>)
    f472:	4b06      	ldr	r3, [pc, #24]	; (f48c <cdc_device_acm_init+0x20>)
    f474:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    f476:	4b06      	ldr	r3, [pc, #24]	; (f490 <cdc_device_acm_init+0x24>)
    f478:	4798      	blx	r3

	usbdc_start(single_desc);
    f47a:	4806      	ldr	r0, [pc, #24]	; (f494 <cdc_device_acm_init+0x28>)
    f47c:	4b06      	ldr	r3, [pc, #24]	; (f498 <cdc_device_acm_init+0x2c>)
    f47e:	4798      	blx	r3
	usbdc_attach();
    f480:	4b06      	ldr	r3, [pc, #24]	; (f49c <cdc_device_acm_init+0x30>)
    f482:	4798      	blx	r3
}
    f484:	bf00      	nop
    f486:	bd80      	pop	{r7, pc}
    f488:	2000229c 	.word	0x2000229c
    f48c:	0000f0c1 	.word	0x0000f0c1
    f490:	0000e339 	.word	0x0000e339
    f494:	200001d8 	.word	0x200001d8
    f498:	0000f15d 	.word	0x0000f15d
    f49c:	0000f1ad 	.word	0x0000f1ad

0000f4a0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    f4a0:	b580      	push	{r7, lr}
    f4a2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    f4a4:	4b01      	ldr	r3, [pc, #4]	; (f4ac <usb_init+0xc>)
    f4a6:	4798      	blx	r3
}
    f4a8:	bf00      	nop
    f4aa:	bd80      	pop	{r7, pc}
    f4ac:	0000f46d 	.word	0x0000f46d

0000f4b0 <__aeabi_atexit>:
    f4b0:	460b      	mov	r3, r1
    f4b2:	4601      	mov	r1, r0
    f4b4:	4618      	mov	r0, r3
    f4b6:	f000 ba5f 	b.w	f978 <__cxa_atexit>
    f4ba:	bf00      	nop

0000f4bc <__aeabi_frsub>:
    f4bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    f4c0:	e002      	b.n	f4c8 <__addsf3>
    f4c2:	bf00      	nop

0000f4c4 <__aeabi_fsub>:
    f4c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000f4c8 <__addsf3>:
    f4c8:	0042      	lsls	r2, r0, #1
    f4ca:	bf1f      	itttt	ne
    f4cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    f4d0:	ea92 0f03 	teqne	r2, r3
    f4d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    f4d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    f4dc:	d06a      	beq.n	f5b4 <__addsf3+0xec>
    f4de:	ea4f 6212 	mov.w	r2, r2, lsr #24
    f4e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    f4e6:	bfc1      	itttt	gt
    f4e8:	18d2      	addgt	r2, r2, r3
    f4ea:	4041      	eorgt	r1, r0
    f4ec:	4048      	eorgt	r0, r1
    f4ee:	4041      	eorgt	r1, r0
    f4f0:	bfb8      	it	lt
    f4f2:	425b      	neglt	r3, r3
    f4f4:	2b19      	cmp	r3, #25
    f4f6:	bf88      	it	hi
    f4f8:	4770      	bxhi	lr
    f4fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    f4fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    f502:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f506:	bf18      	it	ne
    f508:	4240      	negne	r0, r0
    f50a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    f50e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    f512:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f516:	bf18      	it	ne
    f518:	4249      	negne	r1, r1
    f51a:	ea92 0f03 	teq	r2, r3
    f51e:	d03f      	beq.n	f5a0 <__addsf3+0xd8>
    f520:	f1a2 0201 	sub.w	r2, r2, #1
    f524:	fa41 fc03 	asr.w	ip, r1, r3
    f528:	eb10 000c 	adds.w	r0, r0, ip
    f52c:	f1c3 0320 	rsb	r3, r3, #32
    f530:	fa01 f103 	lsl.w	r1, r1, r3
    f534:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    f538:	d502      	bpl.n	f540 <__addsf3+0x78>
    f53a:	4249      	negs	r1, r1
    f53c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    f540:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    f544:	d313      	bcc.n	f56e <__addsf3+0xa6>
    f546:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    f54a:	d306      	bcc.n	f55a <__addsf3+0x92>
    f54c:	0840      	lsrs	r0, r0, #1
    f54e:	ea4f 0131 	mov.w	r1, r1, rrx
    f552:	f102 0201 	add.w	r2, r2, #1
    f556:	2afe      	cmp	r2, #254	; 0xfe
    f558:	d251      	bcs.n	f5fe <__addsf3+0x136>
    f55a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    f55e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    f562:	bf08      	it	eq
    f564:	f020 0001 	biceq.w	r0, r0, #1
    f568:	ea40 0003 	orr.w	r0, r0, r3
    f56c:	4770      	bx	lr
    f56e:	0049      	lsls	r1, r1, #1
    f570:	eb40 0000 	adc.w	r0, r0, r0
    f574:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    f578:	f1a2 0201 	sub.w	r2, r2, #1
    f57c:	d1ed      	bne.n	f55a <__addsf3+0x92>
    f57e:	fab0 fc80 	clz	ip, r0
    f582:	f1ac 0c08 	sub.w	ip, ip, #8
    f586:	ebb2 020c 	subs.w	r2, r2, ip
    f58a:	fa00 f00c 	lsl.w	r0, r0, ip
    f58e:	bfaa      	itet	ge
    f590:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    f594:	4252      	neglt	r2, r2
    f596:	4318      	orrge	r0, r3
    f598:	bfbc      	itt	lt
    f59a:	40d0      	lsrlt	r0, r2
    f59c:	4318      	orrlt	r0, r3
    f59e:	4770      	bx	lr
    f5a0:	f092 0f00 	teq	r2, #0
    f5a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    f5a8:	bf06      	itte	eq
    f5aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    f5ae:	3201      	addeq	r2, #1
    f5b0:	3b01      	subne	r3, #1
    f5b2:	e7b5      	b.n	f520 <__addsf3+0x58>
    f5b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    f5b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    f5bc:	bf18      	it	ne
    f5be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    f5c2:	d021      	beq.n	f608 <__addsf3+0x140>
    f5c4:	ea92 0f03 	teq	r2, r3
    f5c8:	d004      	beq.n	f5d4 <__addsf3+0x10c>
    f5ca:	f092 0f00 	teq	r2, #0
    f5ce:	bf08      	it	eq
    f5d0:	4608      	moveq	r0, r1
    f5d2:	4770      	bx	lr
    f5d4:	ea90 0f01 	teq	r0, r1
    f5d8:	bf1c      	itt	ne
    f5da:	2000      	movne	r0, #0
    f5dc:	4770      	bxne	lr
    f5de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    f5e2:	d104      	bne.n	f5ee <__addsf3+0x126>
    f5e4:	0040      	lsls	r0, r0, #1
    f5e6:	bf28      	it	cs
    f5e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    f5ec:	4770      	bx	lr
    f5ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    f5f2:	bf3c      	itt	cc
    f5f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    f5f8:	4770      	bxcc	lr
    f5fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    f5fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    f602:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    f606:	4770      	bx	lr
    f608:	ea7f 6222 	mvns.w	r2, r2, asr #24
    f60c:	bf16      	itet	ne
    f60e:	4608      	movne	r0, r1
    f610:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    f614:	4601      	movne	r1, r0
    f616:	0242      	lsls	r2, r0, #9
    f618:	bf06      	itte	eq
    f61a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    f61e:	ea90 0f01 	teqeq	r0, r1
    f622:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    f626:	4770      	bx	lr

0000f628 <__aeabi_ui2f>:
    f628:	f04f 0300 	mov.w	r3, #0
    f62c:	e004      	b.n	f638 <__aeabi_i2f+0x8>
    f62e:	bf00      	nop

0000f630 <__aeabi_i2f>:
    f630:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    f634:	bf48      	it	mi
    f636:	4240      	negmi	r0, r0
    f638:	ea5f 0c00 	movs.w	ip, r0
    f63c:	bf08      	it	eq
    f63e:	4770      	bxeq	lr
    f640:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    f644:	4601      	mov	r1, r0
    f646:	f04f 0000 	mov.w	r0, #0
    f64a:	e01c      	b.n	f686 <__aeabi_l2f+0x2a>

0000f64c <__aeabi_ul2f>:
    f64c:	ea50 0201 	orrs.w	r2, r0, r1
    f650:	bf08      	it	eq
    f652:	4770      	bxeq	lr
    f654:	f04f 0300 	mov.w	r3, #0
    f658:	e00a      	b.n	f670 <__aeabi_l2f+0x14>
    f65a:	bf00      	nop

0000f65c <__aeabi_l2f>:
    f65c:	ea50 0201 	orrs.w	r2, r0, r1
    f660:	bf08      	it	eq
    f662:	4770      	bxeq	lr
    f664:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    f668:	d502      	bpl.n	f670 <__aeabi_l2f+0x14>
    f66a:	4240      	negs	r0, r0
    f66c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f670:	ea5f 0c01 	movs.w	ip, r1
    f674:	bf02      	ittt	eq
    f676:	4684      	moveq	ip, r0
    f678:	4601      	moveq	r1, r0
    f67a:	2000      	moveq	r0, #0
    f67c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    f680:	bf08      	it	eq
    f682:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    f686:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    f68a:	fabc f28c 	clz	r2, ip
    f68e:	3a08      	subs	r2, #8
    f690:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    f694:	db10      	blt.n	f6b8 <__aeabi_l2f+0x5c>
    f696:	fa01 fc02 	lsl.w	ip, r1, r2
    f69a:	4463      	add	r3, ip
    f69c:	fa00 fc02 	lsl.w	ip, r0, r2
    f6a0:	f1c2 0220 	rsb	r2, r2, #32
    f6a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    f6a8:	fa20 f202 	lsr.w	r2, r0, r2
    f6ac:	eb43 0002 	adc.w	r0, r3, r2
    f6b0:	bf08      	it	eq
    f6b2:	f020 0001 	biceq.w	r0, r0, #1
    f6b6:	4770      	bx	lr
    f6b8:	f102 0220 	add.w	r2, r2, #32
    f6bc:	fa01 fc02 	lsl.w	ip, r1, r2
    f6c0:	f1c2 0220 	rsb	r2, r2, #32
    f6c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    f6c8:	fa21 f202 	lsr.w	r2, r1, r2
    f6cc:	eb43 0002 	adc.w	r0, r3, r2
    f6d0:	bf08      	it	eq
    f6d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    f6d6:	4770      	bx	lr

0000f6d8 <__aeabi_fmul>:
    f6d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
    f6dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    f6e0:	bf1e      	ittt	ne
    f6e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    f6e6:	ea92 0f0c 	teqne	r2, ip
    f6ea:	ea93 0f0c 	teqne	r3, ip
    f6ee:	d06f      	beq.n	f7d0 <__aeabi_fmul+0xf8>
    f6f0:	441a      	add	r2, r3
    f6f2:	ea80 0c01 	eor.w	ip, r0, r1
    f6f6:	0240      	lsls	r0, r0, #9
    f6f8:	bf18      	it	ne
    f6fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    f6fe:	d01e      	beq.n	f73e <__aeabi_fmul+0x66>
    f700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    f704:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    f708:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    f70c:	fba0 3101 	umull	r3, r1, r0, r1
    f710:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    f714:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    f718:	bf3e      	ittt	cc
    f71a:	0049      	lslcc	r1, r1, #1
    f71c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    f720:	005b      	lslcc	r3, r3, #1
    f722:	ea40 0001 	orr.w	r0, r0, r1
    f726:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    f72a:	2afd      	cmp	r2, #253	; 0xfd
    f72c:	d81d      	bhi.n	f76a <__aeabi_fmul+0x92>
    f72e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f732:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    f736:	bf08      	it	eq
    f738:	f020 0001 	biceq.w	r0, r0, #1
    f73c:	4770      	bx	lr
    f73e:	f090 0f00 	teq	r0, #0
    f742:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    f746:	bf08      	it	eq
    f748:	0249      	lsleq	r1, r1, #9
    f74a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    f74e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    f752:	3a7f      	subs	r2, #127	; 0x7f
    f754:	bfc2      	ittt	gt
    f756:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    f75a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    f75e:	4770      	bxgt	lr
    f760:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    f764:	f04f 0300 	mov.w	r3, #0
    f768:	3a01      	subs	r2, #1
    f76a:	dc5d      	bgt.n	f828 <__aeabi_fmul+0x150>
    f76c:	f112 0f19 	cmn.w	r2, #25
    f770:	bfdc      	itt	le
    f772:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    f776:	4770      	bxle	lr
    f778:	f1c2 0200 	rsb	r2, r2, #0
    f77c:	0041      	lsls	r1, r0, #1
    f77e:	fa21 f102 	lsr.w	r1, r1, r2
    f782:	f1c2 0220 	rsb	r2, r2, #32
    f786:	fa00 fc02 	lsl.w	ip, r0, r2
    f78a:	ea5f 0031 	movs.w	r0, r1, rrx
    f78e:	f140 0000 	adc.w	r0, r0, #0
    f792:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    f796:	bf08      	it	eq
    f798:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    f79c:	4770      	bx	lr
    f79e:	f092 0f00 	teq	r2, #0
    f7a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    f7a6:	bf02      	ittt	eq
    f7a8:	0040      	lsleq	r0, r0, #1
    f7aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    f7ae:	3a01      	subeq	r2, #1
    f7b0:	d0f9      	beq.n	f7a6 <__aeabi_fmul+0xce>
    f7b2:	ea40 000c 	orr.w	r0, r0, ip
    f7b6:	f093 0f00 	teq	r3, #0
    f7ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    f7be:	bf02      	ittt	eq
    f7c0:	0049      	lsleq	r1, r1, #1
    f7c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    f7c6:	3b01      	subeq	r3, #1
    f7c8:	d0f9      	beq.n	f7be <__aeabi_fmul+0xe6>
    f7ca:	ea41 010c 	orr.w	r1, r1, ip
    f7ce:	e78f      	b.n	f6f0 <__aeabi_fmul+0x18>
    f7d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    f7d4:	ea92 0f0c 	teq	r2, ip
    f7d8:	bf18      	it	ne
    f7da:	ea93 0f0c 	teqne	r3, ip
    f7de:	d00a      	beq.n	f7f6 <__aeabi_fmul+0x11e>
    f7e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    f7e4:	bf18      	it	ne
    f7e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    f7ea:	d1d8      	bne.n	f79e <__aeabi_fmul+0xc6>
    f7ec:	ea80 0001 	eor.w	r0, r0, r1
    f7f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    f7f4:	4770      	bx	lr
    f7f6:	f090 0f00 	teq	r0, #0
    f7fa:	bf17      	itett	ne
    f7fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    f800:	4608      	moveq	r0, r1
    f802:	f091 0f00 	teqne	r1, #0
    f806:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    f80a:	d014      	beq.n	f836 <__aeabi_fmul+0x15e>
    f80c:	ea92 0f0c 	teq	r2, ip
    f810:	d101      	bne.n	f816 <__aeabi_fmul+0x13e>
    f812:	0242      	lsls	r2, r0, #9
    f814:	d10f      	bne.n	f836 <__aeabi_fmul+0x15e>
    f816:	ea93 0f0c 	teq	r3, ip
    f81a:	d103      	bne.n	f824 <__aeabi_fmul+0x14c>
    f81c:	024b      	lsls	r3, r1, #9
    f81e:	bf18      	it	ne
    f820:	4608      	movne	r0, r1
    f822:	d108      	bne.n	f836 <__aeabi_fmul+0x15e>
    f824:	ea80 0001 	eor.w	r0, r0, r1
    f828:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    f82c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    f830:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    f834:	4770      	bx	lr
    f836:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    f83a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    f83e:	4770      	bx	lr

0000f840 <__aeabi_fdiv>:
    f840:	f04f 0cff 	mov.w	ip, #255	; 0xff
    f844:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    f848:	bf1e      	ittt	ne
    f84a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    f84e:	ea92 0f0c 	teqne	r2, ip
    f852:	ea93 0f0c 	teqne	r3, ip
    f856:	d069      	beq.n	f92c <__aeabi_fdiv+0xec>
    f858:	eba2 0203 	sub.w	r2, r2, r3
    f85c:	ea80 0c01 	eor.w	ip, r0, r1
    f860:	0249      	lsls	r1, r1, #9
    f862:	ea4f 2040 	mov.w	r0, r0, lsl #9
    f866:	d037      	beq.n	f8d8 <__aeabi_fdiv+0x98>
    f868:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f86c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    f870:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    f874:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    f878:	428b      	cmp	r3, r1
    f87a:	bf38      	it	cc
    f87c:	005b      	lslcc	r3, r3, #1
    f87e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    f882:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    f886:	428b      	cmp	r3, r1
    f888:	bf24      	itt	cs
    f88a:	1a5b      	subcs	r3, r3, r1
    f88c:	ea40 000c 	orrcs.w	r0, r0, ip
    f890:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    f894:	bf24      	itt	cs
    f896:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    f89a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    f89e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    f8a2:	bf24      	itt	cs
    f8a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    f8a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    f8ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    f8b0:	bf24      	itt	cs
    f8b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    f8b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    f8ba:	011b      	lsls	r3, r3, #4
    f8bc:	bf18      	it	ne
    f8be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    f8c2:	d1e0      	bne.n	f886 <__aeabi_fdiv+0x46>
    f8c4:	2afd      	cmp	r2, #253	; 0xfd
    f8c6:	f63f af50 	bhi.w	f76a <__aeabi_fmul+0x92>
    f8ca:	428b      	cmp	r3, r1
    f8cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    f8d0:	bf08      	it	eq
    f8d2:	f020 0001 	biceq.w	r0, r0, #1
    f8d6:	4770      	bx	lr
    f8d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    f8dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    f8e0:	327f      	adds	r2, #127	; 0x7f
    f8e2:	bfc2      	ittt	gt
    f8e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    f8e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    f8ec:	4770      	bxgt	lr
    f8ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    f8f2:	f04f 0300 	mov.w	r3, #0
    f8f6:	3a01      	subs	r2, #1
    f8f8:	e737      	b.n	f76a <__aeabi_fmul+0x92>
    f8fa:	f092 0f00 	teq	r2, #0
    f8fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    f902:	bf02      	ittt	eq
    f904:	0040      	lsleq	r0, r0, #1
    f906:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    f90a:	3a01      	subeq	r2, #1
    f90c:	d0f9      	beq.n	f902 <__aeabi_fdiv+0xc2>
    f90e:	ea40 000c 	orr.w	r0, r0, ip
    f912:	f093 0f00 	teq	r3, #0
    f916:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    f91a:	bf02      	ittt	eq
    f91c:	0049      	lsleq	r1, r1, #1
    f91e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    f922:	3b01      	subeq	r3, #1
    f924:	d0f9      	beq.n	f91a <__aeabi_fdiv+0xda>
    f926:	ea41 010c 	orr.w	r1, r1, ip
    f92a:	e795      	b.n	f858 <__aeabi_fdiv+0x18>
    f92c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    f930:	ea92 0f0c 	teq	r2, ip
    f934:	d108      	bne.n	f948 <__aeabi_fdiv+0x108>
    f936:	0242      	lsls	r2, r0, #9
    f938:	f47f af7d 	bne.w	f836 <__aeabi_fmul+0x15e>
    f93c:	ea93 0f0c 	teq	r3, ip
    f940:	f47f af70 	bne.w	f824 <__aeabi_fmul+0x14c>
    f944:	4608      	mov	r0, r1
    f946:	e776      	b.n	f836 <__aeabi_fmul+0x15e>
    f948:	ea93 0f0c 	teq	r3, ip
    f94c:	d104      	bne.n	f958 <__aeabi_fdiv+0x118>
    f94e:	024b      	lsls	r3, r1, #9
    f950:	f43f af4c 	beq.w	f7ec <__aeabi_fmul+0x114>
    f954:	4608      	mov	r0, r1
    f956:	e76e      	b.n	f836 <__aeabi_fmul+0x15e>
    f958:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    f95c:	bf18      	it	ne
    f95e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    f962:	d1ca      	bne.n	f8fa <__aeabi_fdiv+0xba>
    f964:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    f968:	f47f af5c 	bne.w	f824 <__aeabi_fmul+0x14c>
    f96c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    f970:	f47f af3c 	bne.w	f7ec <__aeabi_fmul+0x114>
    f974:	e75f      	b.n	f836 <__aeabi_fmul+0x15e>
    f976:	bf00      	nop

0000f978 <__cxa_atexit>:
    f978:	4613      	mov	r3, r2
    f97a:	460a      	mov	r2, r1
    f97c:	4601      	mov	r1, r0
    f97e:	2002      	movs	r0, #2
    f980:	f000 b98c 	b.w	fc9c <__register_exitproc>

0000f984 <ffs>:
    f984:	b140      	cbz	r0, f998 <ffs+0x14>
    f986:	2300      	movs	r3, #0
    f988:	fa40 f103 	asr.w	r1, r0, r3
    f98c:	1c5a      	adds	r2, r3, #1
    f98e:	07c9      	lsls	r1, r1, #31
    f990:	4613      	mov	r3, r2
    f992:	d5f9      	bpl.n	f988 <ffs+0x4>
    f994:	4610      	mov	r0, r2
    f996:	4770      	bx	lr
    f998:	4602      	mov	r2, r0
    f99a:	4610      	mov	r0, r2
    f99c:	4770      	bx	lr
    f99e:	bf00      	nop

0000f9a0 <__libc_init_array>:
    f9a0:	b570      	push	{r4, r5, r6, lr}
    f9a2:	4e0f      	ldr	r6, [pc, #60]	; (f9e0 <__libc_init_array+0x40>)
    f9a4:	4d0f      	ldr	r5, [pc, #60]	; (f9e4 <__libc_init_array+0x44>)
    f9a6:	1b76      	subs	r6, r6, r5
    f9a8:	10b6      	asrs	r6, r6, #2
    f9aa:	bf18      	it	ne
    f9ac:	2400      	movne	r4, #0
    f9ae:	d005      	beq.n	f9bc <__libc_init_array+0x1c>
    f9b0:	3401      	adds	r4, #1
    f9b2:	f855 3b04 	ldr.w	r3, [r5], #4
    f9b6:	4798      	blx	r3
    f9b8:	42a6      	cmp	r6, r4
    f9ba:	d1f9      	bne.n	f9b0 <__libc_init_array+0x10>
    f9bc:	4e0a      	ldr	r6, [pc, #40]	; (f9e8 <__libc_init_array+0x48>)
    f9be:	4d0b      	ldr	r5, [pc, #44]	; (f9ec <__libc_init_array+0x4c>)
    f9c0:	1b76      	subs	r6, r6, r5
    f9c2:	f000 fd0d 	bl	103e0 <_init>
    f9c6:	10b6      	asrs	r6, r6, #2
    f9c8:	bf18      	it	ne
    f9ca:	2400      	movne	r4, #0
    f9cc:	d006      	beq.n	f9dc <__libc_init_array+0x3c>
    f9ce:	3401      	adds	r4, #1
    f9d0:	f855 3b04 	ldr.w	r3, [r5], #4
    f9d4:	4798      	blx	r3
    f9d6:	42a6      	cmp	r6, r4
    f9d8:	d1f9      	bne.n	f9ce <__libc_init_array+0x2e>
    f9da:	bd70      	pop	{r4, r5, r6, pc}
    f9dc:	bd70      	pop	{r4, r5, r6, pc}
    f9de:	bf00      	nop
    f9e0:	000103ec 	.word	0x000103ec
    f9e4:	000103ec 	.word	0x000103ec
    f9e8:	00010424 	.word	0x00010424
    f9ec:	000103ec 	.word	0x000103ec

0000f9f0 <memcpy>:
    f9f0:	4684      	mov	ip, r0
    f9f2:	ea41 0300 	orr.w	r3, r1, r0
    f9f6:	f013 0303 	ands.w	r3, r3, #3
    f9fa:	d16d      	bne.n	fad8 <memcpy+0xe8>
    f9fc:	3a40      	subs	r2, #64	; 0x40
    f9fe:	d341      	bcc.n	fa84 <memcpy+0x94>
    fa00:	f851 3b04 	ldr.w	r3, [r1], #4
    fa04:	f840 3b04 	str.w	r3, [r0], #4
    fa08:	f851 3b04 	ldr.w	r3, [r1], #4
    fa0c:	f840 3b04 	str.w	r3, [r0], #4
    fa10:	f851 3b04 	ldr.w	r3, [r1], #4
    fa14:	f840 3b04 	str.w	r3, [r0], #4
    fa18:	f851 3b04 	ldr.w	r3, [r1], #4
    fa1c:	f840 3b04 	str.w	r3, [r0], #4
    fa20:	f851 3b04 	ldr.w	r3, [r1], #4
    fa24:	f840 3b04 	str.w	r3, [r0], #4
    fa28:	f851 3b04 	ldr.w	r3, [r1], #4
    fa2c:	f840 3b04 	str.w	r3, [r0], #4
    fa30:	f851 3b04 	ldr.w	r3, [r1], #4
    fa34:	f840 3b04 	str.w	r3, [r0], #4
    fa38:	f851 3b04 	ldr.w	r3, [r1], #4
    fa3c:	f840 3b04 	str.w	r3, [r0], #4
    fa40:	f851 3b04 	ldr.w	r3, [r1], #4
    fa44:	f840 3b04 	str.w	r3, [r0], #4
    fa48:	f851 3b04 	ldr.w	r3, [r1], #4
    fa4c:	f840 3b04 	str.w	r3, [r0], #4
    fa50:	f851 3b04 	ldr.w	r3, [r1], #4
    fa54:	f840 3b04 	str.w	r3, [r0], #4
    fa58:	f851 3b04 	ldr.w	r3, [r1], #4
    fa5c:	f840 3b04 	str.w	r3, [r0], #4
    fa60:	f851 3b04 	ldr.w	r3, [r1], #4
    fa64:	f840 3b04 	str.w	r3, [r0], #4
    fa68:	f851 3b04 	ldr.w	r3, [r1], #4
    fa6c:	f840 3b04 	str.w	r3, [r0], #4
    fa70:	f851 3b04 	ldr.w	r3, [r1], #4
    fa74:	f840 3b04 	str.w	r3, [r0], #4
    fa78:	f851 3b04 	ldr.w	r3, [r1], #4
    fa7c:	f840 3b04 	str.w	r3, [r0], #4
    fa80:	3a40      	subs	r2, #64	; 0x40
    fa82:	d2bd      	bcs.n	fa00 <memcpy+0x10>
    fa84:	3230      	adds	r2, #48	; 0x30
    fa86:	d311      	bcc.n	faac <memcpy+0xbc>
    fa88:	f851 3b04 	ldr.w	r3, [r1], #4
    fa8c:	f840 3b04 	str.w	r3, [r0], #4
    fa90:	f851 3b04 	ldr.w	r3, [r1], #4
    fa94:	f840 3b04 	str.w	r3, [r0], #4
    fa98:	f851 3b04 	ldr.w	r3, [r1], #4
    fa9c:	f840 3b04 	str.w	r3, [r0], #4
    faa0:	f851 3b04 	ldr.w	r3, [r1], #4
    faa4:	f840 3b04 	str.w	r3, [r0], #4
    faa8:	3a10      	subs	r2, #16
    faaa:	d2ed      	bcs.n	fa88 <memcpy+0x98>
    faac:	320c      	adds	r2, #12
    faae:	d305      	bcc.n	fabc <memcpy+0xcc>
    fab0:	f851 3b04 	ldr.w	r3, [r1], #4
    fab4:	f840 3b04 	str.w	r3, [r0], #4
    fab8:	3a04      	subs	r2, #4
    faba:	d2f9      	bcs.n	fab0 <memcpy+0xc0>
    fabc:	3204      	adds	r2, #4
    fabe:	d008      	beq.n	fad2 <memcpy+0xe2>
    fac0:	07d2      	lsls	r2, r2, #31
    fac2:	bf1c      	itt	ne
    fac4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fac8:	f800 3b01 	strbne.w	r3, [r0], #1
    facc:	d301      	bcc.n	fad2 <memcpy+0xe2>
    face:	880b      	ldrh	r3, [r1, #0]
    fad0:	8003      	strh	r3, [r0, #0]
    fad2:	4660      	mov	r0, ip
    fad4:	4770      	bx	lr
    fad6:	bf00      	nop
    fad8:	2a08      	cmp	r2, #8
    fada:	d313      	bcc.n	fb04 <memcpy+0x114>
    fadc:	078b      	lsls	r3, r1, #30
    fade:	d08d      	beq.n	f9fc <memcpy+0xc>
    fae0:	f010 0303 	ands.w	r3, r0, #3
    fae4:	d08a      	beq.n	f9fc <memcpy+0xc>
    fae6:	f1c3 0304 	rsb	r3, r3, #4
    faea:	1ad2      	subs	r2, r2, r3
    faec:	07db      	lsls	r3, r3, #31
    faee:	bf1c      	itt	ne
    faf0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    faf4:	f800 3b01 	strbne.w	r3, [r0], #1
    faf8:	d380      	bcc.n	f9fc <memcpy+0xc>
    fafa:	f831 3b02 	ldrh.w	r3, [r1], #2
    fafe:	f820 3b02 	strh.w	r3, [r0], #2
    fb02:	e77b      	b.n	f9fc <memcpy+0xc>
    fb04:	3a04      	subs	r2, #4
    fb06:	d3d9      	bcc.n	fabc <memcpy+0xcc>
    fb08:	3a01      	subs	r2, #1
    fb0a:	f811 3b01 	ldrb.w	r3, [r1], #1
    fb0e:	f800 3b01 	strb.w	r3, [r0], #1
    fb12:	d2f9      	bcs.n	fb08 <memcpy+0x118>
    fb14:	780b      	ldrb	r3, [r1, #0]
    fb16:	7003      	strb	r3, [r0, #0]
    fb18:	784b      	ldrb	r3, [r1, #1]
    fb1a:	7043      	strb	r3, [r0, #1]
    fb1c:	788b      	ldrb	r3, [r1, #2]
    fb1e:	7083      	strb	r3, [r0, #2]
    fb20:	4660      	mov	r0, ip
    fb22:	4770      	bx	lr

0000fb24 <memset>:
    fb24:	b470      	push	{r4, r5, r6}
    fb26:	0786      	lsls	r6, r0, #30
    fb28:	d046      	beq.n	fbb8 <memset+0x94>
    fb2a:	1e54      	subs	r4, r2, #1
    fb2c:	2a00      	cmp	r2, #0
    fb2e:	d041      	beq.n	fbb4 <memset+0x90>
    fb30:	b2ca      	uxtb	r2, r1
    fb32:	4603      	mov	r3, r0
    fb34:	e002      	b.n	fb3c <memset+0x18>
    fb36:	f114 34ff 	adds.w	r4, r4, #4294967295
    fb3a:	d33b      	bcc.n	fbb4 <memset+0x90>
    fb3c:	f803 2b01 	strb.w	r2, [r3], #1
    fb40:	079d      	lsls	r5, r3, #30
    fb42:	d1f8      	bne.n	fb36 <memset+0x12>
    fb44:	2c03      	cmp	r4, #3
    fb46:	d92e      	bls.n	fba6 <memset+0x82>
    fb48:	b2cd      	uxtb	r5, r1
    fb4a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    fb4e:	2c0f      	cmp	r4, #15
    fb50:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    fb54:	d919      	bls.n	fb8a <memset+0x66>
    fb56:	f103 0210 	add.w	r2, r3, #16
    fb5a:	4626      	mov	r6, r4
    fb5c:	3e10      	subs	r6, #16
    fb5e:	2e0f      	cmp	r6, #15
    fb60:	f842 5c10 	str.w	r5, [r2, #-16]
    fb64:	f842 5c0c 	str.w	r5, [r2, #-12]
    fb68:	f842 5c08 	str.w	r5, [r2, #-8]
    fb6c:	f842 5c04 	str.w	r5, [r2, #-4]
    fb70:	f102 0210 	add.w	r2, r2, #16
    fb74:	d8f2      	bhi.n	fb5c <memset+0x38>
    fb76:	f1a4 0210 	sub.w	r2, r4, #16
    fb7a:	f022 020f 	bic.w	r2, r2, #15
    fb7e:	f004 040f 	and.w	r4, r4, #15
    fb82:	3210      	adds	r2, #16
    fb84:	2c03      	cmp	r4, #3
    fb86:	4413      	add	r3, r2
    fb88:	d90d      	bls.n	fba6 <memset+0x82>
    fb8a:	461e      	mov	r6, r3
    fb8c:	4622      	mov	r2, r4
    fb8e:	3a04      	subs	r2, #4
    fb90:	2a03      	cmp	r2, #3
    fb92:	f846 5b04 	str.w	r5, [r6], #4
    fb96:	d8fa      	bhi.n	fb8e <memset+0x6a>
    fb98:	1f22      	subs	r2, r4, #4
    fb9a:	f022 0203 	bic.w	r2, r2, #3
    fb9e:	3204      	adds	r2, #4
    fba0:	4413      	add	r3, r2
    fba2:	f004 0403 	and.w	r4, r4, #3
    fba6:	b12c      	cbz	r4, fbb4 <memset+0x90>
    fba8:	b2c9      	uxtb	r1, r1
    fbaa:	441c      	add	r4, r3
    fbac:	f803 1b01 	strb.w	r1, [r3], #1
    fbb0:	429c      	cmp	r4, r3
    fbb2:	d1fb      	bne.n	fbac <memset+0x88>
    fbb4:	bc70      	pop	{r4, r5, r6}
    fbb6:	4770      	bx	lr
    fbb8:	4614      	mov	r4, r2
    fbba:	4603      	mov	r3, r0
    fbbc:	e7c2      	b.n	fb44 <memset+0x20>
    fbbe:	bf00      	nop

0000fbc0 <strlen>:
    fbc0:	f890 f000 	pld	[r0]
    fbc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    fbc8:	f020 0107 	bic.w	r1, r0, #7
    fbcc:	f06f 0c00 	mvn.w	ip, #0
    fbd0:	f010 0407 	ands.w	r4, r0, #7
    fbd4:	f891 f020 	pld	[r1, #32]
    fbd8:	f040 8049 	bne.w	fc6e <strlen+0xae>
    fbdc:	f04f 0400 	mov.w	r4, #0
    fbe0:	f06f 0007 	mvn.w	r0, #7
    fbe4:	e9d1 2300 	ldrd	r2, r3, [r1]
    fbe8:	f891 f040 	pld	[r1, #64]	; 0x40
    fbec:	f100 0008 	add.w	r0, r0, #8
    fbf0:	fa82 f24c 	uadd8	r2, r2, ip
    fbf4:	faa4 f28c 	sel	r2, r4, ip
    fbf8:	fa83 f34c 	uadd8	r3, r3, ip
    fbfc:	faa2 f38c 	sel	r3, r2, ip
    fc00:	bb4b      	cbnz	r3, fc56 <strlen+0x96>
    fc02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    fc06:	fa82 f24c 	uadd8	r2, r2, ip
    fc0a:	f100 0008 	add.w	r0, r0, #8
    fc0e:	faa4 f28c 	sel	r2, r4, ip
    fc12:	fa83 f34c 	uadd8	r3, r3, ip
    fc16:	faa2 f38c 	sel	r3, r2, ip
    fc1a:	b9e3      	cbnz	r3, fc56 <strlen+0x96>
    fc1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    fc20:	fa82 f24c 	uadd8	r2, r2, ip
    fc24:	f100 0008 	add.w	r0, r0, #8
    fc28:	faa4 f28c 	sel	r2, r4, ip
    fc2c:	fa83 f34c 	uadd8	r3, r3, ip
    fc30:	faa2 f38c 	sel	r3, r2, ip
    fc34:	b97b      	cbnz	r3, fc56 <strlen+0x96>
    fc36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    fc3a:	f101 0120 	add.w	r1, r1, #32
    fc3e:	fa82 f24c 	uadd8	r2, r2, ip
    fc42:	f100 0008 	add.w	r0, r0, #8
    fc46:	faa4 f28c 	sel	r2, r4, ip
    fc4a:	fa83 f34c 	uadd8	r3, r3, ip
    fc4e:	faa2 f38c 	sel	r3, r2, ip
    fc52:	2b00      	cmp	r3, #0
    fc54:	d0c6      	beq.n	fbe4 <strlen+0x24>
    fc56:	2a00      	cmp	r2, #0
    fc58:	bf04      	itt	eq
    fc5a:	3004      	addeq	r0, #4
    fc5c:	461a      	moveq	r2, r3
    fc5e:	ba12      	rev	r2, r2
    fc60:	fab2 f282 	clz	r2, r2
    fc64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    fc68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    fc6c:	4770      	bx	lr
    fc6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    fc72:	f004 0503 	and.w	r5, r4, #3
    fc76:	f1c4 0000 	rsb	r0, r4, #0
    fc7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    fc7e:	f014 0f04 	tst.w	r4, #4
    fc82:	f891 f040 	pld	[r1, #64]	; 0x40
    fc86:	fa0c f505 	lsl.w	r5, ip, r5
    fc8a:	ea62 0205 	orn	r2, r2, r5
    fc8e:	bf1c      	itt	ne
    fc90:	ea63 0305 	ornne	r3, r3, r5
    fc94:	4662      	movne	r2, ip
    fc96:	f04f 0400 	mov.w	r4, #0
    fc9a:	e7a9      	b.n	fbf0 <strlen+0x30>

0000fc9c <__register_exitproc>:
    fc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fca0:	4d2c      	ldr	r5, [pc, #176]	; (fd54 <__register_exitproc+0xb8>)
    fca2:	4606      	mov	r6, r0
    fca4:	6828      	ldr	r0, [r5, #0]
    fca6:	4698      	mov	r8, r3
    fca8:	460f      	mov	r7, r1
    fcaa:	4691      	mov	r9, r2
    fcac:	f000 f882 	bl	fdb4 <__retarget_lock_acquire_recursive>
    fcb0:	4b29      	ldr	r3, [pc, #164]	; (fd58 <__register_exitproc+0xbc>)
    fcb2:	681c      	ldr	r4, [r3, #0]
    fcb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    fcb8:	2b00      	cmp	r3, #0
    fcba:	d03e      	beq.n	fd3a <__register_exitproc+0x9e>
    fcbc:	685a      	ldr	r2, [r3, #4]
    fcbe:	2a1f      	cmp	r2, #31
    fcc0:	dc1c      	bgt.n	fcfc <__register_exitproc+0x60>
    fcc2:	f102 0e01 	add.w	lr, r2, #1
    fcc6:	b176      	cbz	r6, fce6 <__register_exitproc+0x4a>
    fcc8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    fccc:	2401      	movs	r4, #1
    fcce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    fcd2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    fcd6:	4094      	lsls	r4, r2
    fcd8:	4320      	orrs	r0, r4
    fcda:	2e02      	cmp	r6, #2
    fcdc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    fce0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    fce4:	d023      	beq.n	fd2e <__register_exitproc+0x92>
    fce6:	3202      	adds	r2, #2
    fce8:	f8c3 e004 	str.w	lr, [r3, #4]
    fcec:	6828      	ldr	r0, [r5, #0]
    fcee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    fcf2:	f000 f861 	bl	fdb8 <__retarget_lock_release_recursive>
    fcf6:	2000      	movs	r0, #0
    fcf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fcfc:	4b17      	ldr	r3, [pc, #92]	; (fd5c <__register_exitproc+0xc0>)
    fcfe:	b30b      	cbz	r3, fd44 <__register_exitproc+0xa8>
    fd00:	f44f 70c8 	mov.w	r0, #400	; 0x190
    fd04:	f7f0 fb29 	bl	35a <malloc>
    fd08:	4603      	mov	r3, r0
    fd0a:	b1d8      	cbz	r0, fd44 <__register_exitproc+0xa8>
    fd0c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    fd10:	6002      	str	r2, [r0, #0]
    fd12:	2100      	movs	r1, #0
    fd14:	6041      	str	r1, [r0, #4]
    fd16:	460a      	mov	r2, r1
    fd18:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    fd1c:	f04f 0e01 	mov.w	lr, #1
    fd20:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    fd24:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    fd28:	2e00      	cmp	r6, #0
    fd2a:	d0dc      	beq.n	fce6 <__register_exitproc+0x4a>
    fd2c:	e7cc      	b.n	fcc8 <__register_exitproc+0x2c>
    fd2e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    fd32:	430c      	orrs	r4, r1
    fd34:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    fd38:	e7d5      	b.n	fce6 <__register_exitproc+0x4a>
    fd3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    fd3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    fd42:	e7bb      	b.n	fcbc <__register_exitproc+0x20>
    fd44:	6828      	ldr	r0, [r5, #0]
    fd46:	f000 f837 	bl	fdb8 <__retarget_lock_release_recursive>
    fd4a:	f04f 30ff 	mov.w	r0, #4294967295
    fd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fd52:	bf00      	nop
    fd54:	20000608 	.word	0x20000608
    fd58:	000103dc 	.word	0x000103dc
    fd5c:	0000035b 	.word	0x0000035b

0000fd60 <register_fini>:
    fd60:	4b02      	ldr	r3, [pc, #8]	; (fd6c <register_fini+0xc>)
    fd62:	b113      	cbz	r3, fd6a <register_fini+0xa>
    fd64:	4802      	ldr	r0, [pc, #8]	; (fd70 <register_fini+0x10>)
    fd66:	f000 b805 	b.w	fd74 <atexit>
    fd6a:	4770      	bx	lr
    fd6c:	00000000 	.word	0x00000000
    fd70:	0000fd81 	.word	0x0000fd81

0000fd74 <atexit>:
    fd74:	2300      	movs	r3, #0
    fd76:	4601      	mov	r1, r0
    fd78:	461a      	mov	r2, r3
    fd7a:	4618      	mov	r0, r3
    fd7c:	f7ff bf8e 	b.w	fc9c <__register_exitproc>

0000fd80 <__libc_fini_array>:
    fd80:	b538      	push	{r3, r4, r5, lr}
    fd82:	4c0a      	ldr	r4, [pc, #40]	; (fdac <__libc_fini_array+0x2c>)
    fd84:	4d0a      	ldr	r5, [pc, #40]	; (fdb0 <__libc_fini_array+0x30>)
    fd86:	1b64      	subs	r4, r4, r5
    fd88:	10a4      	asrs	r4, r4, #2
    fd8a:	d00a      	beq.n	fda2 <__libc_fini_array+0x22>
    fd8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    fd90:	3b01      	subs	r3, #1
    fd92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    fd96:	3c01      	subs	r4, #1
    fd98:	f855 3904 	ldr.w	r3, [r5], #-4
    fd9c:	4798      	blx	r3
    fd9e:	2c00      	cmp	r4, #0
    fda0:	d1f9      	bne.n	fd96 <__libc_fini_array+0x16>
    fda2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fda6:	f000 bb3d 	b.w	10424 <_fini>
    fdaa:	bf00      	nop
    fdac:	00010434 	.word	0x00010434
    fdb0:	00010430 	.word	0x00010430

0000fdb4 <__retarget_lock_acquire_recursive>:
    fdb4:	4770      	bx	lr
    fdb6:	bf00      	nop

0000fdb8 <__retarget_lock_release_recursive>:
    fdb8:	4770      	bx	lr
    fdba:	bf00      	nop
    fdbc:	2a2a2a2a 	.word	0x2a2a2a2a
    fdc0:	66694c20 	.word	0x66694c20
    fdc4:	75502065 	.word	0x75502065
    fdc8:	2065736c 	.word	0x2065736c
    fdcc:	69746341 	.word	0x69746341
    fdd0:	65746176 	.word	0x65746176
    fdd4:	2a2a2a64 	.word	0x2a2a2a64
    fdd8:	0000002a 	.word	0x0000002a
    fddc:	00000a0d 	.word	0x00000a0d
    fde0:	73207469 	.word	0x73207469
    fde4:	6c756f68 	.word	0x6c756f68
    fde8:	6f772064 	.word	0x6f772064
    fdec:	00006b72 	.word	0x00006b72
    fdf0:	64207469 	.word	0x64207469
    fdf4:	2073656f 	.word	0x2073656f
    fdf8:	6b726f77 	.word	0x6b726f77
    fdfc:	00000000 	.word	0x00000000
    fe00:	49505351 	.word	0x49505351
    fe04:	6f725020 	.word	0x6f725020
    fe08:	6d617267 	.word	0x6d617267
    fe0c:	61745320 	.word	0x61745320
    fe10:	64657472 	.word	0x64657472
    fe14:	00000d0a 	.word	0x00000d0a
    fe18:	73616c46 	.word	0x73616c46
    fe1c:	61642068 	.word	0x61642068
    fe20:	76206174 	.word	0x76206174
    fe24:	66697265 	.word	0x66697265
    fe28:	74616369 	.word	0x74616369
    fe2c:	206e6f69 	.word	0x206e6f69
    fe30:	6c696166 	.word	0x6c696166
    fe34:	202e6465 	.word	0x202e6465
    fe38:	72646441 	.word	0x72646441
    fe3c:	3a737365 	.word	0x3a737365
    fe40:	00000020 	.word	0x00000020
    fe44:	74696220 	.word	0x74696220
    fe48:	00003a20 	.word	0x00003a20
    fe4c:	74697257 	.word	0x74697257
    fe50:	202d2065 	.word	0x202d2065
    fe54:	64616552 	.word	0x64616552
    fe58:	20736920 	.word	0x20736920
    fe5c:	63637573 	.word	0x63637573
    fe60:	66737365 	.word	0x66737365
    fe64:	69206c75 	.word	0x69206c75
    fe68:	5351206e 	.word	0x5351206e
    fe6c:	46204950 	.word	0x46204950
    fe70:	6873616c 	.word	0x6873616c
    fe74:	6d656d20 	.word	0x6d656d20
    fe78:	2079726f 	.word	0x2079726f
    fe7c:	00000020 	.word	0x00000020
    fe80:	2a2a2a2a 	.word	0x2a2a2a2a
    fe84:	61432020 	.word	0x61432020
    fe88:	646e656c 	.word	0x646e656c
    fe8c:	55207261 	.word	0x55207261
    fe90:	74616470 	.word	0x74616470
    fe94:	65542065 	.word	0x65542065
    fe98:	2a2a7473 	.word	0x2a2a7473
    fe9c:	0000002a 	.word	0x0000002a
    fea0:	206e6f4d 	.word	0x206e6f4d
    fea4:	20766f4e 	.word	0x20766f4e
    fea8:	31203033 	.word	0x31203033
    feac:	39333a33 	.word	0x39333a33
    feb0:	2037343a 	.word	0x2037343a
    feb4:	30323032 	.word	0x30323032
    feb8:	00000000 	.word	0x00000000
    febc:	2a2a2a2a 	.word	0x2a2a2a2a
    fec0:	7473616c 	.word	0x7473616c
    fec4:	74616420 	.word	0x74616420
    fec8:	69742061 	.word	0x69742061
    fecc:	003a656d 	.word	0x003a656d
    fed0:	61657909 	.word	0x61657909
    fed4:	003a2072 	.word	0x003a2072
    fed8:	6e6f6d09 	.word	0x6e6f6d09
    fedc:	3a206874 	.word	0x3a206874
    fee0:	00000000 	.word	0x00000000
    fee4:	79616409 	.word	0x79616409
    fee8:	0000203a 	.word	0x0000203a
    feec:	756f6809 	.word	0x756f6809
    fef0:	003a2072 	.word	0x003a2072
    fef4:	6e696d09 	.word	0x6e696d09
    fef8:	00003a20 	.word	0x00003a20
    fefc:	63657309 	.word	0x63657309
    ff00:	0000203a 	.word	0x0000203a
    ff04:	75632a2a 	.word	0x75632a2a
    ff08:	6e657272 	.word	0x6e657272
    ff0c:	61642074 	.word	0x61642074
    ff10:	74206174 	.word	0x74206174
    ff14:	3a656d69 	.word	0x3a656d69
    ff18:	00000000 	.word	0x00000000

0000ff1c <defaultParameters>:
    ff1c:	00004020                                 @..

0000ff20 <defaultPreferences>:
    ff20:	000000fa 00000032                       ....2...

0000ff28 <_ZTV14Calendar_Class>:
	...
    ff30:	0000171d 0000176d                       ....m...

0000ff38 <_ZTV17DateTimeLog_Class>:
	...
    ff40:	0000036f 0000036f                       o...o...

0000ff48 <_ZTV9CDC_Class>:
	...
    ff50:	00002271 00002351 00001ef5 00002239     q"..Q#......9"..
    ff60:	000023e9 000021fd 00002111 00002161     .#...!...!..a!..
    ff70:	00002259 000022b9                       Y"..."..

0000ff78 <_ZTV6Stream>:
	...
    ff80:	0000036f 00002575 00001ef5 00001f09     o...u%..........
    ff90:	0000036f 0000036f 0000036f 2e257830     o...o...o...0x%.
    ffa0:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    ffb0:	0066766f                                ovf.

0000ffb4 <_ZTV5Print>:
	...
    ffbc:	0000036f 00002575 00001ef5 00001f09     o...u%..........
    ffcc:	682f2e2e 702f6c70 2f74726f 5f6c7068     ../hpl/port/hpl_
    ffdc:	6f697067 7361625f 00682e65 682f2e2e     gpio_base.h.../h
    ffec:	692f6c61 756c636e 682f6564 775f6c61     al/include/hal_w
    fffc:	682e7464 00000000 682f2e2e 732f6c61     dt.h....../hal/s
   1000c:	682f6372 635f6c61 6e656c61 2e726164     rc/hal_calendar.
   1001c:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   1002c:	635f6c61 615f6e61 636e7973 0000632e     al_can_async.c..
   1003c:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   1004c:	735f6372 2e636e79 00000063 682f2e2e     rc_sync.c...../h
   1005c:	732f6c61 682f6372 695f6c61 6d5f6332     al/src/hal_i2c_m
   1006c:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
   1007c:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
   1008c:	732f6c61 682f6372 705f6c61 632e6d77     al/src/hal_pwm.c
   1009c:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   100ac:	715f6c61 5f697073 636e7973 0000632e     al_qspi_sync.c..
   100bc:	682f2e2e 732f6c61 682f6372 735f6c61     ../hal/src/hal_s
   100cc:	6d5f6970 6e79735f 00632e63 682f2e2e     pi_m_sync.c.../h
   100dc:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
   100ec:	0000632e 682f2e2e 752f6c61 736c6974     .c..../hal/utils
   100fc:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
   1010c:	00000063                                c...

00010110 <_map>:
   10110:	00000000 00000040 00000001 00000021     ....@.......!...
   10120:	00000003 00000003 00000004 00000004     ................
   10130:	00000005 00000005 00000006 00000056     ............V...
   10140:	00000007 00000057 00000008 00000028     ....W.......(...
   10150:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   10160:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00010170 <user_mux_confs>:
   10170:	00020100 00000000 00000000 00000000     ................
	...

000101b4 <channel_confs>:
   101b4:	0660065f 00000000 00000000 00000000     _.`.............
	...

000101f4 <interrupt_cfg>:
	...
   10274:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   10284:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   10294:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   102a4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   102b4:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   102c4:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   102d4:	43000400 43000800 43000c00              ...C...C...C

000102e0 <sercomspi_regs>:
   102e0:	0020000c 00020000 00000000 01ff0001     .. .............
   102f0:	30000c04 02000000 00000000 ff001700     ...0............
   10300:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   10310:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   10320:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   10330:	43001400 43001800                       ...C...C

00010338 <_usb_ep_cfgs>:
   10338:	20001e60 00000000 00000040 20001ea0     `.. ....@...... 
   10348:	20001ee0 00400040 20001f20 20001f60     ... @.@. .. `.. 
   10358:	00400040 20001fa0 20001fe0 00400040     @.@.... ... @.@.
   10368:	20002020 20002060 00400040 00000804       . ` . @.@.....
   10378:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   10388:	775f6c70 632e7464 00000000              pl_wdt.c....

00010394 <n25q256a_interface>:
   10394:	0000d4dd 0000d581 0000d691 0000d849     ............I...
   103a4:	0000d8d9 682f2e2e 702f6c70 2f74726f     ....../hpl/port/
   103b4:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.
   103c4:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   103d4:	2e636462 00000063                       bdc.c...

000103dc <_global_impure_ptr>:
   103dc:	200001e0                                ... 

000103e0 <_init>:
   103e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103e2:	bf00      	nop
   103e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   103e6:	bc08      	pop	{r3}
   103e8:	469e      	mov	lr, r3
   103ea:	4770      	bx	lr

000103ec <__init_array_start>:
   103ec:	0000fd61 	.word	0x0000fd61

000103f0 <__frame_dummy_init_array_entry>:
   103f0:	00000289 000004a9 00000691 00000eb5     ................
   10400:	000011a9 000013c1 00001609 000016a5     ................
   10410:	000019b9 00001ebd 00002525 00002931     ........%%..1)..
   10420:	00002a2d                                -*..

00010424 <_fini>:
   10424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10426:	bf00      	nop
   10428:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1042a:	bc08      	pop	{r3}
   1042c:	469e      	mov	lr, r3
   1042e:	4770      	bx	lr

00010430 <__fini_array_start>:
   10430:	00000265 	.word	0x00000265
