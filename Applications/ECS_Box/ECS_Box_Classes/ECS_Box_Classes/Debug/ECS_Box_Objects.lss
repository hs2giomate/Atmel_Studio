
ECS_Box_Objects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011dcc  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011dcc  00011dcc  00021dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000054c  20000000  00011dd4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003054c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003054c  2**0
                  CONTENTS
  5 .bss          00001ea4  20000550  00012328  00030550  2**3
                  ALLOC
  6 .stack        00010004  200023f4  000141cc  00030550  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003054c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003057a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0007a10b  00000000  00000000  000305d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b4f2  00000000  00000000  000aa6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e685  00000000  00000000  000b5bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003650  00000000  00000000  000d4255  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003280  00000000  00000000  000d78a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00050688  00000000  00000000  000dab25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000410d9  00000000  00000000  0012b1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00140e00  00000000  00000000  0016c286  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e8e0  00000000  00000000  002ad088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 23 01 20 c1 07 00 00 45 08 00 00 45 08 00 00     .#. ....E...E...
      10:	45 08 00 00 45 08 00 00 45 08 00 00 00 00 00 00     E...E...E.......
	...
      2c:	45 08 00 00 45 08 00 00 00 00 00 00 45 08 00 00     E...E.......E...
      3c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      4c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      5c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      6c:	19 7b 00 00 45 08 00 00 45 08 00 00 45 08 00 00     .{..E...E...E...
      7c:	45 08 00 00 55 69 00 00 65 69 00 00 75 69 00 00     E...Ui..ei..ui..
      8c:	85 69 00 00 45 08 00 00 45 08 00 00 45 08 00 00     .i..E...E...E...
      9c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      ac:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      bc:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      cc:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      dc:	45 08 00 00 45 08 00 00 45 08 00 00 00 00 00 00     E...E...E.......
	...
      f4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     104:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     114:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     124:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     134:	45 08 00 00 15 8d 00 00 31 8d 00 00 4d 8d 00 00     E.......1...M...
     144:	69 8d 00 00 85 8d 00 00 a1 8d 00 00 bd 8d 00 00     i...............
     154:	d9 8d 00 00 45 08 00 00 45 08 00 00 45 08 00 00     ....E...E...E...
     164:	45 08 00 00 f5 8d 00 00 11 8e 00 00 2d 8e 00 00     E...........-...
     174:	49 8e 00 00 45 08 00 00 d9 5e 00 00 ad c7 00 00     I...E....^......
     184:	bd c7 00 00 cd c7 00 00 dd c7 00 00 45 08 00 00     ............E...
     194:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1a4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1b4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1c4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1d4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1e4:	45 08 00 00 45 08 00 00 dd 9e 00 00 f9 9e 00 00     E...E...........
     1f4:	15 9f 00 00 31 9f 00 00 45 08 00 00 45 08 00 00     ....1...E...E...
     204:	45 08 00 00 4d 9f 00 00 45 08 00 00 45 08 00 00     E...M...E...E...
     214:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     224:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     234:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     244:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     254:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000550 	.word	0x20000550
     280:	00000000 	.word	0x00000000
     284:	00011dd4 	.word	0x00011dd4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00011dd4 	.word	0x00011dd4
     2c4:	20000554 	.word	0x20000554
     2c8:	00011dd4 	.word	0x00011dd4
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
{
} //AMMC_Class
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	4618      	mov	r0, r3
     2dc:	370c      	adds	r7, #12
     2de:	46bd      	mov	sp, r7
     2e0:	bc80      	pop	{r7}
     2e2:	4770      	bx	lr

000002e4 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     2e4:	b480      	push	{r7}
     2e6:	b083      	sub	sp, #12
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
{
} //~AMMC_Class
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	4618      	mov	r0, r3
     2f0:	370c      	adds	r7, #12
     2f2:	46bd      	mov	sp, r7
     2f4:	bc80      	pop	{r7}
     2f6:	4770      	bx	lr

000002f8 <_Z41__static_initialization_and_destruction_0ii>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
     300:	6039      	str	r1, [r7, #0]
     302:	687b      	ldr	r3, [r7, #4]
     304:	2b01      	cmp	r3, #1
     306:	d114      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     30e:	4293      	cmp	r3, r2
     310:	d10f      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     312:	480a      	ldr	r0, [pc, #40]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     314:	4b0a      	ldr	r3, [pc, #40]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     316:	4798      	blx	r3
     318:	4a0a      	ldr	r2, [pc, #40]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     31a:	490b      	ldr	r1, [pc, #44]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     31c:	4807      	ldr	r0, [pc, #28]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     320:	4798      	blx	r3
AMMC_Class	ammc2;
     322:	480b      	ldr	r0, [pc, #44]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     326:	4798      	blx	r3
     328:	4a06      	ldr	r2, [pc, #24]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     32a:	4907      	ldr	r1, [pc, #28]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     32c:	4808      	ldr	r0, [pc, #32]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     32e:	4b07      	ldr	r3, [pc, #28]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     330:	4798      	blx	r3
     332:	bf00      	nop
     334:	3708      	adds	r7, #8
     336:	46bd      	mov	sp, r7
     338:	bd80      	pop	{r7, pc}
     33a:	bf00      	nop
     33c:	2000056c 	.word	0x2000056c
     340:	000002d1 	.word	0x000002d1
     344:	20000000 	.word	0x20000000
     348:	000002e5 	.word	0x000002e5
     34c:	0000ed3d 	.word	0x0000ed3d
     350:	20000570 	.word	0x20000570

00000354 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     354:	b580      	push	{r7, lr}
     356:	af00      	add	r7, sp, #0
     358:	f64f 71ff 	movw	r1, #65535	; 0xffff
     35c:	2001      	movs	r0, #1
     35e:	4b01      	ldr	r3, [pc, #4]	; (364 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     360:	4798      	blx	r3
     362:	bd80      	pop	{r7, pc}
     364:	000002f9 	.word	0x000002f9

00000368 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
     370:	4a04      	ldr	r2, [pc, #16]	; (384 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
     372:	687b      	ldr	r3, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
     376:	687b      	ldr	r3, [r7, #4]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	bc80      	pop	{r7}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	00010c44 	.word	0x00010c44

00000388 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
     390:	4a04      	ldr	r2, [pc, #16]	; (3a4 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
     392:	687b      	ldr	r3, [r7, #4]
     394:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
     396:	687b      	ldr	r3, [r7, #4]
     398:	4618      	mov	r0, r3
     39a:	370c      	adds	r7, #12
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	00010c44 	.word	0x00010c44

000003a8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
     3a8:	b5b0      	push	{r4, r5, r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     3b2:	4b0a      	ldr	r3, [pc, #40]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	4798      	blx	r3
     3b8:	4604      	mov	r4, r0
     3ba:	460d      	mov	r5, r1
     3bc:	4b07      	ldr	r3, [pc, #28]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3be:	6838      	ldr	r0, [r7, #0]
     3c0:	4798      	blx	r3
     3c2:	4602      	mov	r2, r0
     3c4:	460b      	mov	r3, r1
     3c6:	4620      	mov	r0, r4
     3c8:	4629      	mov	r1, r5
     3ca:	4c05      	ldr	r4, [pc, #20]	; (3e0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
     3cc:	47a0      	blx	r4
     3ce:	4603      	mov	r3, r0
     3d0:	460c      	mov	r4, r1
    }
     3d2:	4618      	mov	r0, r3
     3d4:	4621      	mov	r1, r4
     3d6:	3708      	adds	r7, #8
     3d8:	46bd      	mov	sp, r7
     3da:	bdb0      	pop	{r4, r5, r7, pc}
     3dc:	00010139 	.word	0x00010139
     3e0:	0000ed4d 	.word	0x0000ed4d

000003e4 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
     3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3e8:	b085      	sub	sp, #20
     3ea:	af00      	add	r7, sp, #0
     3ec:	6078      	str	r0, [r7, #4]
     3ee:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
     3f0:	2300      	movs	r3, #0
     3f2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     3f4:	2300      	movs	r3, #0
     3f6:	73bb      	strb	r3, [r7, #14]
     3f8:	7bbb      	ldrb	r3, [r7, #14]
     3fa:	2b02      	cmp	r3, #2
     3fc:	d86d      	bhi.n	4da <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
     3fe:	7bbb      	ldrb	r3, [r7, #14]
     400:	f1c3 0402 	rsb	r4, r3, #2
     404:	4b3c      	ldr	r3, [pc, #240]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     406:	6838      	ldr	r0, [r7, #0]
     408:	4798      	blx	r3
     40a:	4680      	mov	r8, r0
     40c:	4689      	mov	r9, r1
     40e:	7bbb      	ldrb	r3, [r7, #14]
     410:	f1c3 0302 	rsb	r3, r3, #2
     414:	4619      	mov	r1, r3
     416:	200a      	movs	r0, #10
     418:	4b38      	ldr	r3, [pc, #224]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     41a:	4798      	blx	r3
     41c:	4602      	mov	r2, r0
     41e:	460b      	mov	r3, r1
     420:	4d37      	ldr	r5, [pc, #220]	; (500 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
     422:	4640      	mov	r0, r8
     424:	4649      	mov	r1, r9
     426:	47a8      	blx	r5
     428:	4602      	mov	r2, r0
     42a:	460b      	mov	r3, r1
     42c:	4611      	mov	r1, r2
     42e:	461a      	mov	r2, r3
     430:	4b34      	ldr	r3, [pc, #208]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     432:	4608      	mov	r0, r1
     434:	4611      	mov	r1, r2
     436:	4798      	blx	r3
     438:	4603      	mov	r3, r0
     43a:	b2da      	uxtb	r2, r3
     43c:	f107 0310 	add.w	r3, r7, #16
     440:	4423      	add	r3, r4
     442:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
     446:	7bbb      	ldrb	r3, [r7, #14]
     448:	f1c3 0302 	rsb	r3, r3, #2
     44c:	f107 0210 	add.w	r2, r7, #16
     450:	4413      	add	r3, r2
     452:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     456:	461a      	mov	r2, r3
     458:	4b2b      	ldr	r3, [pc, #172]	; (508 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
     45a:	4610      	mov	r0, r2
     45c:	4798      	blx	r3
     45e:	4605      	mov	r5, r0
     460:	460e      	mov	r6, r1
     462:	7bbb      	ldrb	r3, [r7, #14]
     464:	f1c3 0302 	rsb	r3, r3, #2
     468:	4619      	mov	r1, r3
     46a:	200a      	movs	r0, #10
     46c:	4b23      	ldr	r3, [pc, #140]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     46e:	4798      	blx	r3
     470:	4602      	mov	r2, r0
     472:	460b      	mov	r3, r1
     474:	4c25      	ldr	r4, [pc, #148]	; (50c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
     476:	4628      	mov	r0, r5
     478:	4631      	mov	r1, r6
     47a:	47a0      	blx	r4
     47c:	4603      	mov	r3, r0
     47e:	460c      	mov	r4, r1
     480:	461d      	mov	r5, r3
     482:	4626      	mov	r6, r4
     484:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     486:	6838      	ldr	r0, [r7, #0]
     488:	4798      	blx	r3
     48a:	4c21      	ldr	r4, [pc, #132]	; (510 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
     48c:	462a      	mov	r2, r5
     48e:	4633      	mov	r3, r6
     490:	47a0      	blx	r4
     492:	4603      	mov	r3, r0
     494:	460c      	mov	r4, r1
     496:	4619      	mov	r1, r3
     498:	4622      	mov	r2, r4
     49a:	4b1a      	ldr	r3, [pc, #104]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     49c:	4608      	mov	r0, r1
     49e:	4611      	mov	r1, r2
     4a0:	4798      	blx	r3
     4a2:	4603      	mov	r3, r0
     4a4:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
     4a6:	7bbb      	ldrb	r3, [r7, #14]
     4a8:	f1c3 0302 	rsb	r3, r3, #2
     4ac:	f107 0210 	add.w	r2, r7, #16
     4b0:	4413      	add	r3, r2
     4b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     4b6:	461a      	mov	r2, r3
     4b8:	7bbb      	ldrb	r3, [r7, #14]
     4ba:	4619      	mov	r1, r3
     4bc:	009b      	lsls	r3, r3, #2
     4be:	1acb      	subs	r3, r1, r3
     4c0:	3306      	adds	r3, #6
     4c2:	fa02 f303 	lsl.w	r3, r2, r3
     4c6:	b25a      	sxtb	r2, r3
     4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
     4cc:	4313      	orrs	r3, r2
     4ce:	b25b      	sxtb	r3, r3
     4d0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     4d2:	7bbb      	ldrb	r3, [r7, #14]
     4d4:	3301      	adds	r3, #1
     4d6:	73bb      	strb	r3, [r7, #14]
     4d8:	e78e      	b.n	3f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	7bfa      	ldrb	r2, [r7, #15]
     4e2:	4611      	mov	r1, r2
     4e4:	6878      	ldr	r0, [r7, #4]
     4e6:	4798      	blx	r3
     4e8:	4603      	mov	r3, r0
     4ea:	73fb      	strb	r3, [r7, #15]
	return result;
     4ec:	7bfb      	ldrb	r3, [r7, #15]
	
}
     4ee:	4618      	mov	r0, r3
     4f0:	3714      	adds	r7, #20
     4f2:	46bd      	mov	sp, r7
     4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4f8:	00010119 	.word	0x00010119
     4fc:	000003a9 	.word	0x000003a9
     500:	00010459 	.word	0x00010459
     504:	00010765 	.word	0x00010765
     508:	00010139 	.word	0x00010139
     50c:	00010205 	.word	0x00010205
     510:	0000fe9d 	.word	0x0000fe9d

00000514 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
     514:	b480      	push	{r7}
     516:	b085      	sub	sp, #20
     518:	af00      	add	r7, sp, #0
     51a:	6078      	str	r0, [r7, #4]
     51c:	460b      	mov	r3, r1
     51e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
     520:	2300      	movs	r3, #0
     522:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     524:	2300      	movs	r3, #0
     526:	60bb      	str	r3, [r7, #8]
     528:	68bb      	ldr	r3, [r7, #8]
     52a:	2b07      	cmp	r3, #7
     52c:	dc13      	bgt.n	556 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
     52e:	7bfb      	ldrb	r3, [r7, #15]
     530:	005b      	lsls	r3, r3, #1
     532:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
     534:	78fa      	ldrb	r2, [r7, #3]
     536:	68bb      	ldr	r3, [r7, #8]
     538:	fa42 f303 	asr.w	r3, r2, r3
     53c:	b25b      	sxtb	r3, r3
     53e:	f003 0301 	and.w	r3, r3, #1
     542:	b25a      	sxtb	r2, r3
     544:	f997 300f 	ldrsb.w	r3, [r7, #15]
     548:	4313      	orrs	r3, r2
     54a:	b25b      	sxtb	r3, r3
     54c:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     54e:	68bb      	ldr	r3, [r7, #8]
     550:	3301      	adds	r3, #1
     552:	60bb      	str	r3, [r7, #8]
     554:	e7e8      	b.n	528 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
     556:	7bfb      	ldrb	r3, [r7, #15]
     558:	4618      	mov	r0, r3
     55a:	3714      	adds	r7, #20
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr

00000562 <_ZN14Protocol_ClassC2Ev>:
		{
				ch=0xff;
			usb.println("Command I: Increment data\n\r>");
			BigCounter.Word32++;
			TXBuffer[0] = BigCounter.PayLoad[1];
			TXBuffer[1] = BigCounter.PayLoad[2];
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
			TXBuffer[2] = BigCounter.PayLoad[3];
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
     56a:	6039      	str	r1, [r7, #0]
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	681a      	ldr	r2, [r3, #0]
			TXBuffer[3] = BigCounter.PayLoad[3];               // copy the LSB to the label for testing purposes
     570:	687b      	ldr	r3, [r7, #4]
     572:	601a      	str	r2, [r3, #0]
     574:	687b      	ldr	r3, [r7, #4]
     576:	681b      	ldr	r3, [r3, #0]
     578:	3b14      	subs	r3, #20
			
			cpu_irq_disable();
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	461a      	mov	r2, r3
     57e:	687b      	ldr	r3, [r7, #4]
			HI3593.TransmitCommandAndData(TXFIFO,TXBuffer);
     580:	4413      	add	r3, r2
     582:	683a      	ldr	r2, [r7, #0]
     584:	6852      	ldr	r2, [r2, #4]
     586:	601a      	str	r2, [r3, #0]
     588:	687b      	ldr	r3, [r7, #4]
     58a:	4618      	mov	r0, r3
     58c:	370c      	adds	r7, #12
     58e:	46bd      	mov	sp, r7
     590:	bc80      	pop	{r7}
			cpu_irq_enable();
     592:	4770      	bx	lr

00000594 <_ZN15ARINC_InterfaceC1Ev>:
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
			printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	4618      	mov	r0, r3
     5a0:	4b10      	ldr	r3, [pc, #64]	; (5e4 <_ZN15ARINC_InterfaceC1Ev+0x50>)
     5a2:	4798      	blx	r3
			//PORTT= ~TXBuffer[3];                               // show the transmitted upper nibble of the LSB
		}
		
		
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	4a10      	ldr	r2, [pc, #64]	; (5e8 <_ZN15ARINC_InterfaceC1Ev+0x54>)
     5a8:	4611      	mov	r1, r2
     5aa:	4618      	mov	r0, r3
     5ac:	4b0f      	ldr	r3, [pc, #60]	; (5ec <_ZN15ARINC_InterfaceC1Ev+0x58>)
     5ae:	4798      	blx	r3
     5b0:	4a0f      	ldr	r2, [pc, #60]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	601a      	str	r2, [r3, #0]
     5b6:	4a0e      	ldr	r2, [pc, #56]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
		
		if (newMessageR1)
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	601a      	str	r2, [r3, #0]
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     5c2:	4618      	mov	r0, r3
		{
			reading=ReadArincBuffer();
     5c4:	4b0b      	ldr	r3, [pc, #44]	; (5f4 <_ZN15ARINC_InterfaceC1Ev+0x60>)
     5c6:	4798      	blx	r3
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
			newMessageR1=false;
     5ce:	4618      	mov	r0, r3
     5d0:	4b09      	ldr	r3, [pc, #36]	; (5f8 <_ZN15ARINC_InterfaceC1Ev+0x64>)
		}
	}
     5d2:	4798      	blx	r3
     5d4:	4a09      	ldr	r2, [pc, #36]	; (5fc <_ZN15ARINC_InterfaceC1Ev+0x68>)
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	6013      	str	r3, [r2, #0]
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	4618      	mov	r0, r3
     5de:	3708      	adds	r7, #8
     5e0:	46bd      	mov	sp, r7
     5e2:	bd80      	pop	{r7, pc}
     5e4:	00000369 	.word	0x00000369
     5e8:	00011678 	.word	0x00011678
     5ec:	00000563 	.word	0x00000563
     5f0:	00011660 	.word	0x00011660
     5f4:	00001ab1 	.word	0x00001ab1
     5f8:	0000074d 	.word	0x0000074d
} //ARINC_Interface
     5fc:	20000578 	.word	0x20000578

00000600 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
     600:	b580      	push	{r7, lr}
     602:	b082      	sub	sp, #8
     604:	af00      	add	r7, sp, #0
     606:	6078      	str	r0, [r7, #4]
     608:	4a10      	ldr	r2, [pc, #64]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	601a      	str	r2, [r3, #0]
     60e:	4a0f      	ldr	r2, [pc, #60]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     610:	687b      	ldr	r3, [r7, #4]
     612:	601a      	str	r2, [r3, #0]
     614:	687b      	ldr	r3, [r7, #4]
     616:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     61a:	4618      	mov	r0, r3
     61c:	4b0c      	ldr	r3, [pc, #48]	; (650 <_ZN15ARINC_InterfaceD1Ev+0x50>)
     61e:	4798      	blx	r3
     620:	687b      	ldr	r3, [r7, #4]
     622:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     626:	4618      	mov	r0, r3
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <_ZN15ARINC_InterfaceD1Ev+0x54>)
     62a:	4798      	blx	r3
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	4a0a      	ldr	r2, [pc, #40]	; (658 <_ZN15ARINC_InterfaceD1Ev+0x58>)
     630:	4611      	mov	r1, r2
     632:	4618      	mov	r0, r3
     634:	4b09      	ldr	r3, [pc, #36]	; (65c <_ZN15ARINC_InterfaceD1Ev+0x5c>)
     636:	4798      	blx	r3
     638:	687b      	ldr	r3, [r7, #4]
     63a:	4618      	mov	r0, r3
     63c:	4b08      	ldr	r3, [pc, #32]	; (660 <_ZN15ARINC_InterfaceD1Ev+0x60>)
     63e:	4798      	blx	r3
} //~ARINC_Interface
     640:	687b      	ldr	r3, [r7, #4]
     642:	4618      	mov	r0, r3
     644:	3708      	adds	r7, #8
     646:	46bd      	mov	sp, r7
     648:	bd80      	pop	{r7, pc}
     64a:	bf00      	nop
     64c:	00011660 	.word	0x00011660
     650:	0000076d 	.word	0x0000076d
     654:	00001b21 	.word	0x00001b21
     658:	00011678 	.word	0x00011678
     65c:	0000078d 	.word	0x0000078d
     660:	00000389 	.word	0x00000389

00000664 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
     664:	b580      	push	{r7, lr}
     666:	b082      	sub	sp, #8
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
     66c:	6878      	ldr	r0, [r7, #4]
     66e:	4b06      	ldr	r3, [pc, #24]	; (688 <_ZN15ARINC_InterfaceD0Ev+0x24>)
     670:	4798      	blx	r3
     672:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     676:	6878      	ldr	r0, [r7, #4]
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <_ZN15ARINC_InterfaceD0Ev+0x28>)
     67a:	4798      	blx	r3
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	4618      	mov	r0, r3
     680:	3708      	adds	r7, #8
     682:	46bd      	mov	sp, r7
     684:	bd80      	pop	{r7, pc}
     686:	bf00      	nop
     688:	00000601 	.word	0x00000601
     68c:	0000ed49 	.word	0x0000ed49

00000690 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
     690:	b480      	push	{r7}
     692:	b085      	sub	sp, #20
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
     698:	460b      	mov	r3, r1
     69a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     69c:	2300      	movs	r3, #0
     69e:	73fb      	strb	r3, [r7, #15]
     6a0:	7bfb      	ldrb	r3, [r7, #15]
     6a2:	2b3f      	cmp	r3, #63	; 0x3f
     6a4:	dc1e      	bgt.n	6e4 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
     6ac:	7bfb      	ldrb	r3, [r7, #15]
     6ae:	4413      	add	r3, r2
     6b0:	b2db      	uxtb	r3, r3
     6b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     6b6:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
     6b8:	7bbb      	ldrb	r3, [r7, #14]
     6ba:	687a      	ldr	r2, [r7, #4]
     6bc:	009b      	lsls	r3, r3, #2
     6be:	4413      	add	r3, r2
     6c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
     6c4:	78fa      	ldrb	r2, [r7, #3]
     6c6:	429a      	cmp	r2, r3
     6c8:	d108      	bne.n	6dc <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
			data=(uint32_t*)receiverBuffer[j];
     6ca:	7bbb      	ldrb	r3, [r7, #14]
     6cc:	3310      	adds	r3, #16
     6ce:	009b      	lsls	r3, r3, #2
     6d0:	687a      	ldr	r2, [r7, #4]
     6d2:	4413      	add	r3, r2
     6d4:	60bb      	str	r3, [r7, #8]
			return *data;
     6d6:	68bb      	ldr	r3, [r7, #8]
     6d8:	681b      	ldr	r3, [r3, #0]
     6da:	e004      	b.n	6e6 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     6dc:	7bfb      	ldrb	r3, [r7, #15]
     6de:	3301      	adds	r3, #1
     6e0:	73fb      	strb	r3, [r7, #15]
     6e2:	e7dd      	b.n	6a0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
	return 0;
     6e4:	2300      	movs	r3, #0
}
     6e6:	4618      	mov	r0, r3
     6e8:	3714      	adds	r7, #20
     6ea:	46bd      	mov	sp, r7
     6ec:	bc80      	pop	{r7}
     6ee:	4770      	bx	lr

000006f0 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

     6f0:	b580      	push	{r7, lr}
     6f2:	b082      	sub	sp, #8
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
     6f8:	6039      	str	r1, [r7, #0]
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	2b01      	cmp	r3, #1
     6fe:	d10c      	bne.n	71a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     700:	683b      	ldr	r3, [r7, #0]
     702:	f64f 72ff 	movw	r2, #65535	; 0xffff
     706:	4293      	cmp	r3, r2
     708:	d107      	bne.n	71a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     70a:	4806      	ldr	r0, [pc, #24]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     70c:	4b06      	ldr	r3, [pc, #24]	; (728 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     70e:	4798      	blx	r3
     710:	4a06      	ldr	r2, [pc, #24]	; (72c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     712:	4907      	ldr	r1, [pc, #28]	; (730 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     714:	4803      	ldr	r0, [pc, #12]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     716:	4b07      	ldr	r3, [pc, #28]	; (734 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     718:	4798      	blx	r3
     71a:	bf00      	nop
     71c:	3708      	adds	r7, #8
     71e:	46bd      	mov	sp, r7
     720:	bd80      	pop	{r7, pc}
     722:	bf00      	nop
     724:	2000057c 	.word	0x2000057c
     728:	00000595 	.word	0x00000595
     72c:	20000000 	.word	0x20000000
     730:	00000601 	.word	0x00000601
     734:	0000ed3d 	.word	0x0000ed3d

00000738 <_GLOBAL__sub_I_HexSymbols>:
     738:	b580      	push	{r7, lr}
     73a:	af00      	add	r7, sp, #0
     73c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     740:	2001      	movs	r0, #1
     742:	4b01      	ldr	r3, [pc, #4]	; (748 <_GLOBAL__sub_I_HexSymbols+0x10>)
     744:	4798      	blx	r3
     746:	bd80      	pop	{r7, pc}
     748:	000006f1 	.word	0x000006f1

0000074c <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
     754:	687b      	ldr	r3, [r7, #4]
     756:	4618      	mov	r0, r3
     758:	4b03      	ldr	r3, [pc, #12]	; (768 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
     75a:	4798      	blx	r3
{
} //Holt_3593_Class
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	4618      	mov	r0, r3
     760:	3708      	adds	r7, #8
     762:	46bd      	mov	sp, r7
     764:	bd80      	pop	{r7, pc}
     766:	bf00      	nop
     768:	00000dc1 	.word	0x00000dc1

0000076c <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
     774:	687b      	ldr	r3, [r7, #4]
     776:	4618      	mov	r0, r3
     778:	4b03      	ldr	r3, [pc, #12]	; (788 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
     77a:	4798      	blx	r3
{
} //~Holt_3593_Class
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	4618      	mov	r0, r3
     780:	3708      	adds	r7, #8
     782:	46bd      	mov	sp, r7
     784:	bd80      	pop	{r7, pc}
     786:	bf00      	nop
     788:	00000de1 	.word	0x00000de1

0000078c <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
     78c:	b480      	push	{r7}
     78e:	b083      	sub	sp, #12
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	6039      	str	r1, [r7, #0]
     796:	683b      	ldr	r3, [r7, #0]
     798:	681a      	ldr	r2, [r3, #0]
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	601a      	str	r2, [r3, #0]
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	3b14      	subs	r3, #20
     7a4:	681b      	ldr	r3, [r3, #0]
     7a6:	461a      	mov	r2, r3
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	4413      	add	r3, r2
     7ac:	683a      	ldr	r2, [r7, #0]
     7ae:	6852      	ldr	r2, [r2, #4]
     7b0:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	4618      	mov	r0, r3
     7b6:	370c      	adds	r7, #12
     7b8:	46bd      	mov	sp, r7
     7ba:	bc80      	pop	{r7}
     7bc:	4770      	bx	lr
	...

000007c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     7c0:	b580      	push	{r7, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     7c6:	4b16      	ldr	r3, [pc, #88]	; (820 <Reset_Handler+0x60>)
     7c8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     7ca:	4b16      	ldr	r3, [pc, #88]	; (824 <Reset_Handler+0x64>)
     7cc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     7ce:	687a      	ldr	r2, [r7, #4]
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	429a      	cmp	r2, r3
     7d4:	d00c      	beq.n	7f0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     7d6:	e007      	b.n	7e8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     7d8:	683b      	ldr	r3, [r7, #0]
     7da:	1d1a      	adds	r2, r3, #4
     7dc:	603a      	str	r2, [r7, #0]
     7de:	687a      	ldr	r2, [r7, #4]
     7e0:	1d11      	adds	r1, r2, #4
     7e2:	6079      	str	r1, [r7, #4]
     7e4:	6812      	ldr	r2, [r2, #0]
     7e6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     7e8:	683b      	ldr	r3, [r7, #0]
     7ea:	4a0f      	ldr	r2, [pc, #60]	; (828 <Reset_Handler+0x68>)
     7ec:	4293      	cmp	r3, r2
     7ee:	d3f3      	bcc.n	7d8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7f0:	4b0e      	ldr	r3, [pc, #56]	; (82c <Reset_Handler+0x6c>)
     7f2:	603b      	str	r3, [r7, #0]
     7f4:	e004      	b.n	800 <Reset_Handler+0x40>
                *pDest++ = 0;
     7f6:	683b      	ldr	r3, [r7, #0]
     7f8:	1d1a      	adds	r2, r3, #4
     7fa:	603a      	str	r2, [r7, #0]
     7fc:	2200      	movs	r2, #0
     7fe:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     800:	683b      	ldr	r3, [r7, #0]
     802:	4a0b      	ldr	r2, [pc, #44]	; (830 <Reset_Handler+0x70>)
     804:	4293      	cmp	r3, r2
     806:	d3f6      	bcc.n	7f6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     808:	4b0a      	ldr	r3, [pc, #40]	; (834 <Reset_Handler+0x74>)
     80a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     80c:	4a0a      	ldr	r2, [pc, #40]	; (838 <Reset_Handler+0x78>)
     80e:	687b      	ldr	r3, [r7, #4]
     810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     814:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     816:	4b09      	ldr	r3, [pc, #36]	; (83c <Reset_Handler+0x7c>)
     818:	4798      	blx	r3

        /* Branch to main function */
        main();
     81a:	4b09      	ldr	r3, [pc, #36]	; (840 <Reset_Handler+0x80>)
     81c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     81e:	e7fe      	b.n	81e <Reset_Handler+0x5e>
     820:	00011dd4 	.word	0x00011dd4
     824:	20000000 	.word	0x20000000
     828:	2000054c 	.word	0x2000054c
     82c:	20000550 	.word	0x20000550
     830:	200023f4 	.word	0x200023f4
     834:	00000000 	.word	0x00000000
     838:	e000ed00 	.word	0xe000ed00
     83c:	000107d9 	.word	0x000107d9
     840:	00000ac9 	.word	0x00000ac9

00000844 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     844:	b480      	push	{r7}
     846:	af00      	add	r7, sp, #0
        while (1) {
     848:	e7fe      	b.n	848 <Dummy_Handler+0x4>

0000084a <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
     84a:	b480      	push	{r7}
     84c:	b083      	sub	sp, #12
     84e:	af00      	add	r7, sp, #0
     850:	6078      	str	r0, [r7, #4]
    return (void *)0;
     852:	2300      	movs	r3, #0
	}
     854:	4618      	mov	r0, r3
     856:	370c      	adds	r7, #12
     858:	46bd      	mov	sp, r7
     85a:	bc80      	pop	{r7}
     85c:	4770      	bx	lr

0000085e <free>:
//............................................................................
extern "C" void free(void *)
	{
     85e:	b480      	push	{r7}
     860:	b083      	sub	sp, #12
     862:	af00      	add	r7, sp, #0
     864:	6078      	str	r0, [r7, #4]
	}
     866:	bf00      	nop
     868:	370c      	adds	r7, #12
     86a:	46bd      	mov	sp, r7
     86c:	bc80      	pop	{r7}
     86e:	4770      	bx	lr

00000870 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
     870:	b480      	push	{r7}
     872:	af00      	add	r7, sp, #0
		}
     874:	bf00      	nop
     876:	46bd      	mov	sp, r7
     878:	bc80      	pop	{r7}
     87a:	4770      	bx	lr

0000087c <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
     87c:	b580      	push	{r7, lr}
     87e:	b082      	sub	sp, #8
     880:	af00      	add	r7, sp, #0
     882:	6078      	str	r0, [r7, #4]
	free(p);
     884:	6878      	ldr	r0, [r7, #4]
     886:	4b03      	ldr	r3, [pc, #12]	; (894 <_ZdlPv+0x18>)
     888:	4798      	blx	r3
	}
     88a:	bf00      	nop
     88c:	3708      	adds	r7, #8
     88e:	46bd      	mov	sp, r7
     890:	bd80      	pop	{r7, pc}
     892:	bf00      	nop
     894:	0000085f 	.word	0x0000085f

00000898 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	6078      	str	r0, [r7, #4]
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	4618      	mov	r0, r3
     8a4:	370c      	adds	r7, #12
     8a6:	46bd      	mov	sp, r7
     8a8:	bc80      	pop	{r7}
     8aa:	4770      	bx	lr

000008ac <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
     8ac:	b480      	push	{r7}
     8ae:	b083      	sub	sp, #12
     8b0:	af00      	add	r7, sp, #0
     8b2:	6078      	str	r0, [r7, #4]
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	4618      	mov	r0, r3
     8b8:	370c      	adds	r7, #12
     8ba:	46bd      	mov	sp, r7
     8bc:	bc80      	pop	{r7}
     8be:	4770      	bx	lr

000008c0 <_Z41__static_initialization_and_destruction_0ii>:
void Diagnostics::_printSupportLink(void) {
	usb.print(F("If this does not help resolve/clarify this issue, "));
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
}

Diagnostics diagnostics; // default instantiation of Diagnostics object
     8c0:	b580      	push	{r7, lr}
     8c2:	b082      	sub	sp, #8
     8c4:	af00      	add	r7, sp, #0
     8c6:	6078      	str	r0, [r7, #4]
     8c8:	6039      	str	r1, [r7, #0]
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	2b01      	cmp	r3, #1
     8ce:	d10c      	bne.n	8ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8d0:	683b      	ldr	r3, [r7, #0]
     8d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     8d6:	4293      	cmp	r3, r2
     8d8:	d107      	bne.n	8ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8da:	4806      	ldr	r0, [pc, #24]	; (8f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8dc:	4b06      	ldr	r3, [pc, #24]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     8de:	4798      	blx	r3
     8e0:	4a06      	ldr	r2, [pc, #24]	; (8fc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     8e2:	4907      	ldr	r1, [pc, #28]	; (900 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     8e4:	4803      	ldr	r0, [pc, #12]	; (8f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8e6:	4b07      	ldr	r3, [pc, #28]	; (904 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     8e8:	4798      	blx	r3
     8ea:	bf00      	nop
     8ec:	3708      	adds	r7, #8
     8ee:	46bd      	mov	sp, r7
     8f0:	bd80      	pop	{r7, pc}
     8f2:	bf00      	nop
     8f4:	20000770 	.word	0x20000770
     8f8:	00000899 	.word	0x00000899
     8fc:	20000000 	.word	0x20000000
     900:	000008ad 	.word	0x000008ad
     904:	0000ed3d 	.word	0x0000ed3d

00000908 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
     908:	b580      	push	{r7, lr}
     90a:	af00      	add	r7, sp, #0
     90c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     910:	2001      	movs	r0, #1
     912:	4b01      	ldr	r3, [pc, #4]	; (918 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
     914:	4798      	blx	r3
     916:	bd80      	pop	{r7, pc}
     918:	000008c1 	.word	0x000008c1

0000091c <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     91c:	b480      	push	{r7}
     91e:	b083      	sub	sp, #12
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
     924:	6039      	str	r1, [r7, #0]
	{
	data = v;
     926:	687b      	ldr	r3, [r7, #4]
     928:	683a      	ldr	r2, [r7, #0]
     92a:	601a      	str	r2, [r3, #0]
	}
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	4618      	mov	r0, r3
     930:	370c      	adds	r7, #12
     932:	46bd      	mov	sp, r7
     934:	bc80      	pop	{r7}
     936:	4770      	bx	lr

00000938 <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
     938:	b580      	push	{r7, lr}
     93a:	b082      	sub	sp, #8
     93c:	af00      	add	r7, sp, #0
     93e:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     940:	687b      	ldr	r3, [r7, #4]
     942:	f64f 72ff 	movw	r2, #65535	; 0xffff
     946:	801a      	strh	r2, [r3, #0]
     948:	687b      	ldr	r3, [r7, #4]
     94a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     94e:	805a      	strh	r2, [r3, #2]
     950:	687b      	ldr	r3, [r7, #4]
     952:	2200      	movs	r2, #0
     954:	605a      	str	r2, [r3, #4]
     956:	687b      	ldr	r3, [r7, #4]
     958:	3308      	adds	r3, #8
     95a:	2100      	movs	r1, #0
     95c:	4618      	mov	r0, r3
     95e:	4b05      	ldr	r3, [pc, #20]	; (974 <_ZN5eventC1Ev+0x3c>)
     960:	4798      	blx	r3
     962:	687b      	ldr	r3, [r7, #4]
     964:	2200      	movs	r2, #0
     966:	60da      	str	r2, [r3, #12]
	{
	}
     968:	687b      	ldr	r3, [r7, #4]
     96a:	4618      	mov	r0, r3
     96c:	3708      	adds	r7, #8
     96e:	46bd      	mov	sp, r7
     970:	bd80      	pop	{r7, pc}
     972:	bf00      	nop
     974:	0000091d 	.word	0x0000091d

00000978 <_ZN18EventHandler_ClassC1Ev>:
	ptrEventHandlerClass->eventTimeout=true;
}


// default constructor
EventHandler_Class::EventHandler_Class()
     978:	b480      	push	{r7}
     97a:	b083      	sub	sp, #12
     97c:	af00      	add	r7, sp, #0
     97e:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     980:	4a04      	ldr	r2, [pc, #16]	; (994 <_ZN18EventHandler_ClassC1Ev+0x1c>)
     982:	687b      	ldr	r3, [r7, #4]
     984:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
     986:	687b      	ldr	r3, [r7, #4]
     988:	4618      	mov	r0, r3
     98a:	370c      	adds	r7, #12
     98c:	46bd      	mov	sp, r7
     98e:	bc80      	pop	{r7}
     990:	4770      	bx	lr
     992:	bf00      	nop
     994:	2000177c 	.word	0x2000177c

00000998 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
     998:	b480      	push	{r7}
     99a:	b083      	sub	sp, #12
     99c:	af00      	add	r7, sp, #0
     99e:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     9a0:	4a04      	ldr	r2, [pc, #16]	; (9b4 <_ZN18EventHandler_ClassD1Ev+0x1c>)
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	4618      	mov	r0, r3
     9aa:	370c      	adds	r7, #12
     9ac:	46bd      	mov	sp, r7
     9ae:	bc80      	pop	{r7}
     9b0:	4770      	bx	lr
     9b2:	bf00      	nop
     9b4:	2000177c 	.word	0x2000177c

000009b8 <_Z41__static_initialization_and_destruction_0ii>:
	return	(uint32_t)eventsInUse;
	
}


     9b8:	b5b0      	push	{r4, r5, r7, lr}
     9ba:	b082      	sub	sp, #8
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
     9c0:	6039      	str	r1, [r7, #0]
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	2b01      	cmp	r3, #1
     9c6:	d117      	bne.n	9f8 <_Z41__static_initialization_and_destruction_0ii+0x40>
     9c8:	683b      	ldr	r3, [r7, #0]
     9ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
     9ce:	4293      	cmp	r3, r2
     9d0:	d112      	bne.n	9f8 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
     9d2:	4b0b      	ldr	r3, [pc, #44]	; (a00 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     9d4:	24ff      	movs	r4, #255	; 0xff
     9d6:	461d      	mov	r5, r3
     9d8:	2c00      	cmp	r4, #0
     9da:	db05      	blt.n	9e8 <_Z41__static_initialization_and_destruction_0ii+0x30>
     9dc:	4628      	mov	r0, r5
     9de:	4b09      	ldr	r3, [pc, #36]	; (a04 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     9e0:	4798      	blx	r3
     9e2:	3510      	adds	r5, #16
     9e4:	3c01      	subs	r4, #1
     9e6:	e7f7      	b.n	9d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
     9e8:	4807      	ldr	r0, [pc, #28]	; (a08 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9ea:	4b08      	ldr	r3, [pc, #32]	; (a0c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     9ec:	4798      	blx	r3
     9ee:	4a08      	ldr	r2, [pc, #32]	; (a10 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     9f0:	4908      	ldr	r1, [pc, #32]	; (a14 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     9f2:	4805      	ldr	r0, [pc, #20]	; (a08 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9f4:	4b08      	ldr	r3, [pc, #32]	; (a18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     9f6:	4798      	blx	r3
     9f8:	bf00      	nop
     9fa:	3708      	adds	r7, #8
     9fc:	46bd      	mov	sp, r7
     9fe:	bdb0      	pop	{r4, r5, r7, pc}
     a00:	20000774 	.word	0x20000774
     a04:	00000939 	.word	0x00000939
     a08:	2000178c 	.word	0x2000178c
     a0c:	00000979 	.word	0x00000979
     a10:	20000000 	.word	0x20000000
     a14:	00000999 	.word	0x00000999
     a18:	0000ed3d 	.word	0x0000ed3d

00000a1c <_GLOBAL__sub_I_maxEventCount>:
     a1c:	b580      	push	{r7, lr}
     a1e:	af00      	add	r7, sp, #0
     a20:	f64f 71ff 	movw	r1, #65535	; 0xffff
     a24:	2001      	movs	r0, #1
     a26:	4b01      	ldr	r3, [pc, #4]	; (a2c <_GLOBAL__sub_I_maxEventCount+0x10>)
     a28:	4798      	blx	r3
     a2a:	bd80      	pop	{r7, pc}
     a2c:	000009b9 	.word	0x000009b9

00000a30 <_ZN14I2C_Asyn_ClassC1Ev>:
		ptrI2C_Asyn_Class->txReady=true;
		ptrI2C_Asyn_Class->rxReady=true;
 }

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
     a30:	b480      	push	{r7}
     a32:	b083      	sub	sp, #12
     a34:	af00      	add	r7, sp, #0
     a36:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EEPROM;
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	4a05      	ldr	r2, [pc, #20]	; (a50 <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
     a3c:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
     a3e:	4a05      	ldr	r2, [pc, #20]	; (a54 <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	4618      	mov	r0, r3
     a48:	370c      	adds	r7, #12
     a4a:	46bd      	mov	sp, r7
     a4c:	bc80      	pop	{r7}
     a4e:	4770      	bx	lr
     a50:	20002324 	.word	0x20002324
     a54:	200017a8 	.word	0x200017a8

00000a58 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
     a58:	b480      	push	{r7}
     a5a:	b083      	sub	sp, #12
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	4618      	mov	r0, r3
     a64:	370c      	adds	r7, #12
     a66:	46bd      	mov	sp, r7
     a68:	bc80      	pop	{r7}
     a6a:	4770      	bx	lr

00000a6c <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
     a6c:	b580      	push	{r7, lr}
     a6e:	b082      	sub	sp, #8
     a70:	af00      	add	r7, sp, #0
     a72:	6078      	str	r0, [r7, #4]
     a74:	6039      	str	r1, [r7, #0]
     a76:	687b      	ldr	r3, [r7, #4]
     a78:	2b01      	cmp	r3, #1
     a7a:	d10c      	bne.n	a96 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     a7c:	683b      	ldr	r3, [r7, #0]
     a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     a82:	4293      	cmp	r3, r2
     a84:	d107      	bne.n	a96 <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
     a86:	4806      	ldr	r0, [pc, #24]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     a88:	4b06      	ldr	r3, [pc, #24]	; (aa4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     a8a:	4798      	blx	r3
     a8c:	4a06      	ldr	r2, [pc, #24]	; (aa8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     a8e:	4907      	ldr	r1, [pc, #28]	; (aac <_Z41__static_initialization_and_destruction_0ii+0x40>)
     a90:	4803      	ldr	r0, [pc, #12]	; (aa0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     a92:	4b07      	ldr	r3, [pc, #28]	; (ab0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     a94:	4798      	blx	r3
}
     a96:	bf00      	nop
     a98:	3708      	adds	r7, #8
     a9a:	46bd      	mov	sp, r7
     a9c:	bd80      	pop	{r7, pc}
     a9e:	bf00      	nop
     aa0:	200017b0 	.word	0x200017b0
     aa4:	00000d8d 	.word	0x00000d8d
     aa8:	20000000 	.word	0x20000000
     aac:	00000dad 	.word	0x00000dad
     ab0:	0000ed3d 	.word	0x0000ed3d

00000ab4 <_GLOBAL__sub_I_ptrLTSPIClass>:
     ab4:	b580      	push	{r7, lr}
     ab6:	af00      	add	r7, sp, #0
     ab8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     abc:	2001      	movs	r0, #1
     abe:	4b01      	ldr	r3, [pc, #4]	; (ac4 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
     ac0:	4798      	blx	r3
     ac2:	bd80      	pop	{r7, pc}
     ac4:	00000a6d 	.word	0x00000a6d

00000ac8 <main>:
 */ 

#include "main.h"

int main(void)
{
     ac8:	b580      	push	{r7, lr}
     aca:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     acc:	4b06      	ldr	r3, [pc, #24]	; (ae8 <main+0x20>)
     ace:	4798      	blx	r3
	
	usb.Init();
     ad0:	4806      	ldr	r0, [pc, #24]	; (aec <main+0x24>)
     ad2:	4b07      	ldr	r3, [pc, #28]	; (af0 <main+0x28>)
     ad4:	4798      	blx	r3
	delay_ms(100);
     ad6:	2064      	movs	r0, #100	; 0x64
     ad8:	4b06      	ldr	r3, [pc, #24]	; (af4 <main+0x2c>)
     ada:	4798      	blx	r3
	StartLivePulse();
     adc:	4b06      	ldr	r3, [pc, #24]	; (af8 <main+0x30>)
     ade:	4798      	blx	r3
	QSPIDriverTest();
     ae0:	4b06      	ldr	r3, [pc, #24]	; (afc <main+0x34>)
     ae2:	4798      	blx	r3
	//DateTimeTest();
	//EEPROM_Test();
	//IO_ExpanderTest();
		/* Replace with your application code */
	while (1) {
     ae4:	e7fe      	b.n	ae4 <main+0x1c>
     ae6:	bf00      	nop
     ae8:	00002865 	.word	0x00002865
     aec:	20001b9c 	.word	0x20001b9c
     af0:	00001da1 	.word	0x00001da1
     af4:	00003f51 	.word	0x00003f51
     af8:	00000b01 	.word	0x00000b01
     afc:	00000b4d 	.word	0x00000b4d

00000b00 <_Z14StartLivePulsev>:
		
		
	}
}

uint8_t	StartLivePulse(void){
     b00:	b580      	push	{r7, lr}
     b02:	b082      	sub	sp, #8
     b04:	af00      	add	r7, sp, #0
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     b06:	490a      	ldr	r1, [pc, #40]	; (b30 <_Z14StartLivePulsev+0x30>)
     b08:	480a      	ldr	r0, [pc, #40]	; (b34 <_Z14StartLivePulsev+0x34>)
     b0a:	4b0b      	ldr	r3, [pc, #44]	; (b38 <_Z14StartLivePulsev+0x38>)
     b0c:	4798      	blx	r3
     b0e:	4603      	mov	r3, r0
     b10:	490a      	ldr	r1, [pc, #40]	; (b3c <_Z14StartLivePulsev+0x3c>)
     b12:	4618      	mov	r0, r3
     b14:	4b0a      	ldr	r3, [pc, #40]	; (b40 <_Z14StartLivePulsev+0x40>)
     b16:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     b18:	480a      	ldr	r0, [pc, #40]	; (b44 <_Z14StartLivePulsev+0x44>)
     b1a:	4b0b      	ldr	r3, [pc, #44]	; (b48 <_Z14StartLivePulsev+0x48>)
     b1c:	4798      	blx	r3
     b1e:	4603      	mov	r3, r0
     b20:	607b      	str	r3, [r7, #4]
	return p;
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	b2db      	uxtb	r3, r3
}
     b26:	4618      	mov	r0, r3
     b28:	3708      	adds	r7, #8
     b2a:	46bd      	mov	sp, r7
     b2c:	bd80      	pop	{r7, pc}
     b2e:	bf00      	nop
     b30:	000116ac 	.word	0x000116ac
     b34:	20001b9c 	.word	0x20001b9c
     b38:	00000d05 	.word	0x00000d05
     b3c:	000116cc 	.word	0x000116cc
     b40:	00000d25 	.word	0x00000d25
     b44:	20002268 	.word	0x20002268
     b48:	0000429d 	.word	0x0000429d

00000b4c <_Z14QSPIDriverTestv>:
		ECSBox.CustomMessage(SELFTEST_OFF);
		
	}
	return 0;
}
void	QSPIDriverTest(void){
     b4c:	b590      	push	{r4, r7, lr}
     b4e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
     b52:	af00      	add	r7, sp, #0
		bool is_corrupted = false;
     b54:	2300      	movs	r3, #0
     b56:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		uint8_t tx_buffer[QSPI_BUFFER_SIZE] ;
		uint8_t rx_buffer[QSPI_BUFFER_SIZE] ;
		flash.Init();
     b5a:	4857      	ldr	r0, [pc, #348]	; (cb8 <_Z14QSPIDriverTestv+0x16c>)
     b5c:	4b57      	ldr	r3, [pc, #348]	; (cbc <_Z14QSPIDriverTestv+0x170>)
     b5e:	4798      	blx	r3

		usb.print("QSPI Program Started\n\r");
     b60:	4957      	ldr	r1, [pc, #348]	; (cc0 <_Z14QSPIDriverTestv+0x174>)
     b62:	4858      	ldr	r0, [pc, #352]	; (cc4 <_Z14QSPIDriverTestv+0x178>)
     b64:	4b58      	ldr	r3, [pc, #352]	; (cc8 <_Z14QSPIDriverTestv+0x17c>)
     b66:	4798      	blx	r3
		/* Initialize Tx buffer */
	
	
		/* Erase flash memory */
		uint32_t flashAddress=0;
     b68:	2300      	movs	r3, #0
     b6a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
		uint32_t	delay=1;
     b6e:	2301      	movs	r3, #1
     b70:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		while (1) {
	
			flash.WaitOnBusy();
     b74:	4850      	ldr	r0, [pc, #320]	; (cb8 <_Z14QSPIDriverTestv+0x16c>)
     b76:	4b55      	ldr	r3, [pc, #340]	; (ccc <_Z14QSPIDriverTestv+0x180>)
     b78:	4798      	blx	r3
			if ((flashAddress % N25Q_SECTOR_SIZE)==0) {
     b7a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
     b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
     b82:	2b00      	cmp	r3, #0
     b84:	d104      	bne.n	b90 <_Z14QSPIDriverTestv+0x44>
				flash.Erase(flashAddress);
     b86:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
     b8a:	484b      	ldr	r0, [pc, #300]	; (cb8 <_Z14QSPIDriverTestv+0x16c>)
     b8c:	4b50      	ldr	r3, [pc, #320]	; (cd0 <_Z14QSPIDriverTestv+0x184>)
     b8e:	4798      	blx	r3
			}
			for (int i = 0; i <QSPI_BUFFER_SIZE ; i++) {
     b90:	2300      	movs	r3, #0
     b92:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
     b96:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
     b9a:	2bff      	cmp	r3, #255	; 0xff
     b9c:	dc1c      	bgt.n	bd8 <_Z14QSPIDriverTestv+0x8c>
				tx_buffer[i] = (uint8_t)rand();
     b9e:	4b4d      	ldr	r3, [pc, #308]	; (cd4 <_Z14QSPIDriverTestv+0x188>)
     ba0:	4798      	blx	r3
     ba2:	4603      	mov	r3, r0
     ba4:	b2d9      	uxtb	r1, r3
     ba6:	f507 7284 	add.w	r2, r7, #264	; 0x108
     baa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
     bae:	4413      	add	r3, r2
     bb0:	460a      	mov	r2, r1
     bb2:	701a      	strb	r2, [r3, #0]
				rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
     bb4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
     bb8:	b2db      	uxtb	r3, r3
     bba:	425b      	negs	r3, r3
     bbc:	b2d9      	uxtb	r1, r3
     bbe:	f107 0208 	add.w	r2, r7, #8
     bc2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
     bc6:	4413      	add	r3, r2
     bc8:	460a      	mov	r2, r1
     bca:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <QSPI_BUFFER_SIZE ; i++) {
     bcc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
     bd0:	3301      	adds	r3, #1
     bd2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
     bd6:	e7de      	b.n	b96 <_Z14QSPIDriverTestv+0x4a>
			}
			/* Write data to flash memory */
			if (ERR_NONE ==flash.WriteAddress((uint8_t *)tx_buffer,flashAddress,QSPI_BUFFER_SIZE)) {
     bd8:	f507 7184 	add.w	r1, r7, #264	; 0x108
     bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
     be0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
     be4:	4834      	ldr	r0, [pc, #208]	; (cb8 <_Z14QSPIDriverTestv+0x16c>)
     be6:	4c3c      	ldr	r4, [pc, #240]	; (cd8 <_Z14QSPIDriverTestv+0x18c>)
     be8:	47a0      	blx	r4
     bea:	4603      	mov	r3, r0
     bec:	2b00      	cmp	r3, #0
				//usb.print("Flash write successful \n\r");
			}
			flash.WaitOnBusy();
     bee:	4832      	ldr	r0, [pc, #200]	; (cb8 <_Z14QSPIDriverTestv+0x16c>)
     bf0:	4b36      	ldr	r3, [pc, #216]	; (ccc <_Z14QSPIDriverTestv+0x180>)
     bf2:	4798      	blx	r3

			if (ERR_NONE == flash.ReadAddress((uint8_t *)rx_buffer,flashAddress,QSPI_BUFFER_SIZE)) {
     bf4:	f107 0108 	add.w	r1, r7, #8
     bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
     bfc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
     c00:	482d      	ldr	r0, [pc, #180]	; (cb8 <_Z14QSPIDriverTestv+0x16c>)
     c02:	4c36      	ldr	r4, [pc, #216]	; (cdc <_Z14QSPIDriverTestv+0x190>)
     c04:	47a0      	blx	r4
     c06:	4603      	mov	r3, r0
     c08:	2b00      	cmp	r3, #0
				//while(!memory.xferDone);
				//usb.print("Flash read successful\n\r");
			}
			flash.WaitOnBusy();
     c0a:	482b      	ldr	r0, [pc, #172]	; (cb8 <_Z14QSPIDriverTestv+0x16c>)
     c0c:	4b2f      	ldr	r3, [pc, #188]	; (ccc <_Z14QSPIDriverTestv+0x180>)
     c0e:	4798      	blx	r3
			is_corrupted = false;
     c10:	2300      	movs	r3, #0
     c12:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			for (int i = 0; i < QSPI_BUFFER_SIZE; i++) {
     c16:	1d3b      	adds	r3, r7, #4
     c18:	2200      	movs	r2, #0
     c1a:	601a      	str	r2, [r3, #0]
     c1c:	1d3b      	adds	r3, r7, #4
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	2bff      	cmp	r3, #255	; 0xff
     c22:	dc2e      	bgt.n	c82 <_Z14QSPIDriverTestv+0x136>
				if (tx_buffer[i] != rx_buffer[i]) {
     c24:	1d3b      	adds	r3, r7, #4
     c26:	681b      	ldr	r3, [r3, #0]
     c28:	f507 7284 	add.w	r2, r7, #264	; 0x108
     c2c:	5cd2      	ldrb	r2, [r2, r3]
     c2e:	1d3b      	adds	r3, r7, #4
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	f107 0108 	add.w	r1, r7, #8
     c36:	5ccb      	ldrb	r3, [r1, r3]
     c38:	429a      	cmp	r2, r3
     c3a:	d01c      	beq.n	c76 <_Z14QSPIDriverTestv+0x12a>
					is_corrupted = true;
     c3c:	2301      	movs	r3, #1
     c3e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
					usb.print("Flash data verification failed. Address: ");
     c42:	4927      	ldr	r1, [pc, #156]	; (ce0 <_Z14QSPIDriverTestv+0x194>)
     c44:	481f      	ldr	r0, [pc, #124]	; (cc4 <_Z14QSPIDriverTestv+0x178>)
     c46:	4b20      	ldr	r3, [pc, #128]	; (cc8 <_Z14QSPIDriverTestv+0x17c>)
     c48:	4798      	blx	r3
					usb.print(flashAddress,HEX);
     c4a:	2210      	movs	r2, #16
     c4c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
     c50:	481c      	ldr	r0, [pc, #112]	; (cc4 <_Z14QSPIDriverTestv+0x178>)
     c52:	4b24      	ldr	r3, [pc, #144]	; (ce4 <_Z14QSPIDriverTestv+0x198>)
     c54:	4798      	blx	r3
					usb<<" bit :"<<i<<NEWLINE;
     c56:	4924      	ldr	r1, [pc, #144]	; (ce8 <_Z14QSPIDriverTestv+0x19c>)
     c58:	481a      	ldr	r0, [pc, #104]	; (cc4 <_Z14QSPIDriverTestv+0x178>)
     c5a:	4b24      	ldr	r3, [pc, #144]	; (cec <_Z14QSPIDriverTestv+0x1a0>)
     c5c:	4798      	blx	r3
     c5e:	4602      	mov	r2, r0
     c60:	1d3b      	adds	r3, r7, #4
     c62:	4619      	mov	r1, r3
     c64:	4610      	mov	r0, r2
     c66:	4b22      	ldr	r3, [pc, #136]	; (cf0 <_Z14QSPIDriverTestv+0x1a4>)
     c68:	4798      	blx	r3
     c6a:	4603      	mov	r3, r0
     c6c:	4921      	ldr	r1, [pc, #132]	; (cf4 <_Z14QSPIDriverTestv+0x1a8>)
     c6e:	4618      	mov	r0, r3
     c70:	4b21      	ldr	r3, [pc, #132]	; (cf8 <_Z14QSPIDriverTestv+0x1ac>)
     c72:	4798      	blx	r3
					//flashAddress=0;
						
					break;
     c74:	e005      	b.n	c82 <_Z14QSPIDriverTestv+0x136>
			for (int i = 0; i < QSPI_BUFFER_SIZE; i++) {
     c76:	1d3b      	adds	r3, r7, #4
     c78:	681b      	ldr	r3, [r3, #0]
     c7a:	1c5a      	adds	r2, r3, #1
     c7c:	1d3b      	adds	r3, r7, #4
     c7e:	601a      	str	r2, [r3, #0]
     c80:	e7cc      	b.n	c1c <_Z14QSPIDriverTestv+0xd0>
				}
					
			}

			if (!is_corrupted){
     c82:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
     c86:	f083 0301 	eor.w	r3, r3, #1
     c8a:	b2db      	uxtb	r3, r3
     c8c:	2b00      	cmp	r3, #0
     c8e:	f43f af71 	beq.w	b74 <_Z14QSPIDriverTestv+0x28>
				usb.print("Write - Read is successful in QSPI Flash memory  " );
     c92:	491a      	ldr	r1, [pc, #104]	; (cfc <_Z14QSPIDriverTestv+0x1b0>)
     c94:	480b      	ldr	r0, [pc, #44]	; (cc4 <_Z14QSPIDriverTestv+0x178>)
     c96:	4b0c      	ldr	r3, [pc, #48]	; (cc8 <_Z14QSPIDriverTestv+0x17c>)
     c98:	4798      	blx	r3
				usb.println(flashAddress,HEX);
     c9a:	2210      	movs	r2, #16
     c9c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
     ca0:	4808      	ldr	r0, [pc, #32]	; (cc4 <_Z14QSPIDriverTestv+0x178>)
     ca2:	4b17      	ldr	r3, [pc, #92]	; (d00 <_Z14QSPIDriverTestv+0x1b4>)
     ca4:	4798      	blx	r3
				flashAddress=(flashAddress+QSPI_BUFFER_SIZE)%N25Q_FLASH_SIZE;
     ca6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
     caa:	f503 7380 	add.w	r3, r3, #256	; 0x100
     cae:	f3c3 0314 	ubfx	r3, r3, #0, #21
     cb2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			}
					
		}
     cb6:	e75d      	b.n	b74 <_Z14QSPIDriverTestv+0x28>
     cb8:	20001830 	.word	0x20001830
     cbc:	000013a5 	.word	0x000013a5
     cc0:	00011778 	.word	0x00011778
     cc4:	20001b9c 	.word	0x20001b9c
     cc8:	00002151 	.word	0x00002151
     ccc:	00001525 	.word	0x00001525
     cd0:	00001411 	.word	0x00001411
     cd4:	000109f9 	.word	0x000109f9
     cd8:	00001441 	.word	0x00001441
     cdc:	00001475 	.word	0x00001475
     ce0:	00011790 	.word	0x00011790
     ce4:	00002241 	.word	0x00002241
     ce8:	00011740 	.word	0x00011740
     cec:	00000d45 	.word	0x00000d45
     cf0:	00000d65 	.word	0x00000d65
     cf4:	000116cc 	.word	0x000116cc
     cf8:	00000d25 	.word	0x00000d25
     cfc:	000117bc 	.word	0x000117bc
     d00:	000022a9 	.word	0x000022a9

00000d04 <_ZlsIA30_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     d04:	b580      	push	{r7, lr}
     d06:	b082      	sub	sp, #8
     d08:	af00      	add	r7, sp, #0
     d0a:	6078      	str	r0, [r7, #4]
     d0c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     d0e:	6839      	ldr	r1, [r7, #0]
     d10:	6878      	ldr	r0, [r7, #4]
     d12:	4b03      	ldr	r3, [pc, #12]	; (d20 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     d14:	4798      	blx	r3
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	4618      	mov	r0, r3
     d1a:	3708      	adds	r7, #8
     d1c:	46bd      	mov	sp, r7
     d1e:	bd80      	pop	{r7, pc}
     d20:	00002151 	.word	0x00002151

00000d24 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     d24:	b580      	push	{r7, lr}
     d26:	b082      	sub	sp, #8
     d28:	af00      	add	r7, sp, #0
     d2a:	6078      	str	r0, [r7, #4]
     d2c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     d2e:	6839      	ldr	r1, [r7, #0]
     d30:	6878      	ldr	r0, [r7, #4]
     d32:	4b03      	ldr	r3, [pc, #12]	; (d40 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     d34:	4798      	blx	r3
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	4618      	mov	r0, r3
     d3a:	3708      	adds	r7, #8
     d3c:	46bd      	mov	sp, r7
     d3e:	bd80      	pop	{r7, pc}
     d40:	00002151 	.word	0x00002151

00000d44 <_ZlsIA7_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     d44:	b580      	push	{r7, lr}
     d46:	b082      	sub	sp, #8
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
     d4c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     d4e:	6839      	ldr	r1, [r7, #0]
     d50:	6878      	ldr	r0, [r7, #4]
     d52:	4b03      	ldr	r3, [pc, #12]	; (d60 <_ZlsIA7_cER5PrintS2_RKT_+0x1c>)
     d54:	4798      	blx	r3
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	4618      	mov	r0, r3
     d5a:	3708      	adds	r7, #8
     d5c:	46bd      	mov	sp, r7
     d5e:	bd80      	pop	{r7, pc}
     d60:	00002151 	.word	0x00002151

00000d64 <_ZlsIiER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     d64:	b580      	push	{r7, lr}
     d66:	b082      	sub	sp, #8
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     d6e:	683b      	ldr	r3, [r7, #0]
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	220a      	movs	r2, #10
     d74:	4619      	mov	r1, r3
     d76:	6878      	ldr	r0, [r7, #4]
     d78:	4b03      	ldr	r3, [pc, #12]	; (d88 <_ZlsIiER5PrintS1_RKT_+0x24>)
     d7a:	4798      	blx	r3
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	4618      	mov	r0, r3
     d80:	3708      	adds	r7, #8
     d82:	46bd      	mov	sp, r7
     d84:	bd80      	pop	{r7, pc}
     d86:	bf00      	nop
     d88:	00002195 	.word	0x00002195

00000d8c <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
     d8c:	b480      	push	{r7}
     d8e:	b083      	sub	sp, #12
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
     d94:	4a04      	ldr	r2, [pc, #16]	; (da8 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	4618      	mov	r0, r3
     d9e:	370c      	adds	r7, #12
     da0:	46bd      	mov	sp, r7
     da2:	bc80      	pop	{r7}
     da4:	4770      	bx	lr
     da6:	bf00      	nop
     da8:	200017d0 	.word	0x200017d0

00000dac <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
     dac:	b480      	push	{r7}
     dae:	b083      	sub	sp, #12
     db0:	af00      	add	r7, sp, #0
     db2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	4618      	mov	r0, r3
     db8:	370c      	adds	r7, #12
     dba:	46bd      	mov	sp, r7
     dbc:	bc80      	pop	{r7}
     dbe:	4770      	bx	lr

00000dc0 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
     dc8:	4a04      	ldr	r2, [pc, #16]	; (ddc <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	4618      	mov	r0, r3
     dd2:	370c      	adds	r7, #12
     dd4:	46bd      	mov	sp, r7
     dd6:	bc80      	pop	{r7}
     dd8:	4770      	bx	lr
     dda:	bf00      	nop
     ddc:	200017d4 	.word	0x200017d4

00000de0 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
     de0:	b480      	push	{r7}
     de2:	b083      	sub	sp, #12
     de4:	af00      	add	r7, sp, #0
     de6:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	4618      	mov	r0, r3
     dec:	370c      	adds	r7, #12
     dee:	46bd      	mov	sp, r7
     df0:	bc80      	pop	{r7}
     df2:	4770      	bx	lr

00000df4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
     df4:	b580      	push	{r7, lr}
     df6:	b082      	sub	sp, #8
     df8:	af00      	add	r7, sp, #0
     dfa:	6078      	str	r0, [r7, #4]
     dfc:	6039      	str	r1, [r7, #0]
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	3308      	adds	r3, #8
     e02:	4618      	mov	r0, r3
     e04:	4b06      	ldr	r3, [pc, #24]	; (e20 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
     e06:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	683a      	ldr	r2, [r7, #0]
     e0c:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
     e0e:	4a05      	ldr	r2, [pc, #20]	; (e24 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	4618      	mov	r0, r3
     e18:	3708      	adds	r7, #8
     e1a:	46bd      	mov	sp, r7
     e1c:	bd80      	pop	{r7, pc}
     e1e:	bf00      	nop
     e20:	00000a31 	.word	0x00000a31
     e24:	200017d8 	.word	0x200017d8

00000e28 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
     e28:	b580      	push	{r7, lr}
     e2a:	b082      	sub	sp, #8
     e2c:	af00      	add	r7, sp, #0
     e2e:	6078      	str	r0, [r7, #4]
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	3308      	adds	r3, #8
     e34:	4618      	mov	r0, r3
     e36:	4b03      	ldr	r3, [pc, #12]	; (e44 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
     e38:	4798      	blx	r3
{
} //~AT24MAC_Class
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	4618      	mov	r0, r3
     e3e:	3708      	adds	r7, #8
     e40:	46bd      	mov	sp, r7
     e42:	bd80      	pop	{r7, pc}
     e44:	00000a59 	.word	0x00000a59

00000e48 <_Z41__static_initialization_and_destruction_0ii>:
		isReady=false;
	}
	return isReady;	
}

     e48:	b580      	push	{r7, lr}
     e4a:	b082      	sub	sp, #8
     e4c:	af00      	add	r7, sp, #0
     e4e:	6078      	str	r0, [r7, #4]
     e50:	6039      	str	r1, [r7, #0]
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	2b01      	cmp	r3, #1
     e56:	d10d      	bne.n	e74 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     e58:	683b      	ldr	r3, [r7, #0]
     e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     e5e:	4293      	cmp	r3, r2
     e60:	d108      	bne.n	e74 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     e62:	4906      	ldr	r1, [pc, #24]	; (e7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e64:	4806      	ldr	r0, [pc, #24]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     e66:	4b07      	ldr	r3, [pc, #28]	; (e84 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     e68:	4798      	blx	r3
     e6a:	4a07      	ldr	r2, [pc, #28]	; (e88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     e6c:	4907      	ldr	r1, [pc, #28]	; (e8c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     e6e:	4804      	ldr	r0, [pc, #16]	; (e80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     e70:	4b07      	ldr	r3, [pc, #28]	; (e90 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     e72:	4798      	blx	r3
     e74:	bf00      	nop
     e76:	3708      	adds	r7, #8
     e78:	46bd      	mov	sp, r7
     e7a:	bd80      	pop	{r7, pc}
     e7c:	20002324 	.word	0x20002324
     e80:	200017dc 	.word	0x200017dc
     e84:	00000df5 	.word	0x00000df5
     e88:	20000000 	.word	0x20000000
     e8c:	00000e29 	.word	0x00000e29
     e90:	0000ed3d 	.word	0x0000ed3d

00000e94 <_GLOBAL__sub_I_ptrAT24MACClass>:
     e94:	b580      	push	{r7, lr}
     e96:	af00      	add	r7, sp, #0
     e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
     e9c:	2001      	movs	r0, #1
     e9e:	4b01      	ldr	r3, [pc, #4]	; (ea4 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
     ea0:	4798      	blx	r3
     ea2:	bd80      	pop	{r7, pc}
     ea4:	00000e49 	.word	0x00000e49

00000ea8 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     ea8:	b480      	push	{r7}
     eaa:	b085      	sub	sp, #20
     eac:	af00      	add	r7, sp, #0
     eae:	60f8      	str	r0, [r7, #12]
     eb0:	460b      	mov	r3, r1
     eb2:	607a      	str	r2, [r7, #4]
     eb4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eb6:	7afb      	ldrb	r3, [r7, #11]
     eb8:	68fa      	ldr	r2, [r7, #12]
     eba:	01db      	lsls	r3, r3, #7
     ebc:	4413      	add	r3, r2
     ebe:	3308      	adds	r3, #8
     ec0:	687a      	ldr	r2, [r7, #4]
     ec2:	601a      	str	r2, [r3, #0]
}
     ec4:	bf00      	nop
     ec6:	3714      	adds	r7, #20
     ec8:	46bd      	mov	sp, r7
     eca:	bc80      	pop	{r7}
     ecc:	4770      	bx	lr

00000ece <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     ece:	b480      	push	{r7}
     ed0:	b085      	sub	sp, #20
     ed2:	af00      	add	r7, sp, #0
     ed4:	60f8      	str	r0, [r7, #12]
     ed6:	460b      	mov	r3, r1
     ed8:	607a      	str	r2, [r7, #4]
     eda:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     edc:	7afb      	ldrb	r3, [r7, #11]
     ede:	68fa      	ldr	r2, [r7, #12]
     ee0:	01db      	lsls	r3, r3, #7
     ee2:	4413      	add	r3, r2
     ee4:	3304      	adds	r3, #4
     ee6:	687a      	ldr	r2, [r7, #4]
     ee8:	601a      	str	r2, [r3, #0]
}
     eea:	bf00      	nop
     eec:	3714      	adds	r7, #20
     eee:	46bd      	mov	sp, r7
     ef0:	bc80      	pop	{r7}
     ef2:	4770      	bx	lr

00000ef4 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     ef4:	b480      	push	{r7}
     ef6:	b085      	sub	sp, #20
     ef8:	af00      	add	r7, sp, #0
     efa:	60f8      	str	r0, [r7, #12]
     efc:	460b      	mov	r3, r1
     efe:	607a      	str	r2, [r7, #4]
     f00:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f02:	7afb      	ldrb	r3, [r7, #11]
     f04:	68fa      	ldr	r2, [r7, #12]
     f06:	01db      	lsls	r3, r3, #7
     f08:	4413      	add	r3, r2
     f0a:	3318      	adds	r3, #24
     f0c:	687a      	ldr	r2, [r7, #4]
     f0e:	601a      	str	r2, [r3, #0]
}
     f10:	bf00      	nop
     f12:	3714      	adds	r7, #20
     f14:	46bd      	mov	sp, r7
     f16:	bc80      	pop	{r7}
     f18:	4770      	bx	lr

00000f1a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     f1a:	b480      	push	{r7}
     f1c:	b085      	sub	sp, #20
     f1e:	af00      	add	r7, sp, #0
     f20:	60f8      	str	r0, [r7, #12]
     f22:	460b      	mov	r3, r1
     f24:	607a      	str	r2, [r7, #4]
     f26:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f28:	7afb      	ldrb	r3, [r7, #11]
     f2a:	68fa      	ldr	r2, [r7, #12]
     f2c:	01db      	lsls	r3, r3, #7
     f2e:	4413      	add	r3, r2
     f30:	3314      	adds	r3, #20
     f32:	687a      	ldr	r2, [r7, #4]
     f34:	601a      	str	r2, [r3, #0]
}
     f36:	bf00      	nop
     f38:	3714      	adds	r7, #20
     f3a:	46bd      	mov	sp, r7
     f3c:	bc80      	pop	{r7}
     f3e:	4770      	bx	lr

00000f40 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     f40:	b480      	push	{r7}
     f42:	b085      	sub	sp, #20
     f44:	af00      	add	r7, sp, #0
     f46:	6078      	str	r0, [r7, #4]
     f48:	4608      	mov	r0, r1
     f4a:	4611      	mov	r1, r2
     f4c:	461a      	mov	r2, r3
     f4e:	4603      	mov	r3, r0
     f50:	70fb      	strb	r3, [r7, #3]
     f52:	460b      	mov	r3, r1
     f54:	70bb      	strb	r3, [r7, #2]
     f56:	4613      	mov	r3, r2
     f58:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f5a:	78fa      	ldrb	r2, [r7, #3]
     f5c:	78bb      	ldrb	r3, [r7, #2]
     f5e:	6879      	ldr	r1, [r7, #4]
     f60:	01d2      	lsls	r2, r2, #7
     f62:	440a      	add	r2, r1
     f64:	4413      	add	r3, r2
     f66:	3330      	adds	r3, #48	; 0x30
     f68:	781b      	ldrb	r3, [r3, #0]
     f6a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f6c:	7bfb      	ldrb	r3, [r7, #15]
     f6e:	f023 030f 	bic.w	r3, r3, #15
     f72:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     f74:	787b      	ldrb	r3, [r7, #1]
     f76:	f003 030f 	and.w	r3, r3, #15
     f7a:	b2da      	uxtb	r2, r3
     f7c:	7bfb      	ldrb	r3, [r7, #15]
     f7e:	4313      	orrs	r3, r2
     f80:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f82:	78fa      	ldrb	r2, [r7, #3]
     f84:	78bb      	ldrb	r3, [r7, #2]
     f86:	6879      	ldr	r1, [r7, #4]
     f88:	01d2      	lsls	r2, r2, #7
     f8a:	440a      	add	r2, r1
     f8c:	4413      	add	r3, r2
     f8e:	3330      	adds	r3, #48	; 0x30
     f90:	7bfa      	ldrb	r2, [r7, #15]
     f92:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f94:	bf00      	nop
     f96:	3714      	adds	r7, #20
     f98:	46bd      	mov	sp, r7
     f9a:	bc80      	pop	{r7}
     f9c:	4770      	bx	lr

00000f9e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     f9e:	b480      	push	{r7}
     fa0:	b085      	sub	sp, #20
     fa2:	af00      	add	r7, sp, #0
     fa4:	6078      	str	r0, [r7, #4]
     fa6:	4608      	mov	r0, r1
     fa8:	4611      	mov	r1, r2
     faa:	461a      	mov	r2, r3
     fac:	4603      	mov	r3, r0
     fae:	70fb      	strb	r3, [r7, #3]
     fb0:	460b      	mov	r3, r1
     fb2:	70bb      	strb	r3, [r7, #2]
     fb4:	4613      	mov	r3, r2
     fb6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fb8:	78fa      	ldrb	r2, [r7, #3]
     fba:	78bb      	ldrb	r3, [r7, #2]
     fbc:	6879      	ldr	r1, [r7, #4]
     fbe:	01d2      	lsls	r2, r2, #7
     fc0:	440a      	add	r2, r1
     fc2:	4413      	add	r3, r2
     fc4:	3330      	adds	r3, #48	; 0x30
     fc6:	781b      	ldrb	r3, [r3, #0]
     fc8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     fca:	7bfb      	ldrb	r3, [r7, #15]
     fcc:	f003 030f 	and.w	r3, r3, #15
     fd0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     fd2:	787b      	ldrb	r3, [r7, #1]
     fd4:	011b      	lsls	r3, r3, #4
     fd6:	b2da      	uxtb	r2, r3
     fd8:	7bfb      	ldrb	r3, [r7, #15]
     fda:	4313      	orrs	r3, r2
     fdc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fde:	78fa      	ldrb	r2, [r7, #3]
     fe0:	78bb      	ldrb	r3, [r7, #2]
     fe2:	6879      	ldr	r1, [r7, #4]
     fe4:	01d2      	lsls	r2, r2, #7
     fe6:	440a      	add	r2, r1
     fe8:	4413      	add	r3, r2
     fea:	3330      	adds	r3, #48	; 0x30
     fec:	7bfa      	ldrb	r2, [r7, #15]
     fee:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ff0:	bf00      	nop
     ff2:	3714      	adds	r7, #20
     ff4:	46bd      	mov	sp, r7
     ff6:	bc80      	pop	{r7}
     ff8:	4770      	bx	lr

00000ffa <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     ffa:	b480      	push	{r7}
     ffc:	b085      	sub	sp, #20
     ffe:	af00      	add	r7, sp, #0
    1000:	6078      	str	r0, [r7, #4]
    1002:	4608      	mov	r0, r1
    1004:	4611      	mov	r1, r2
    1006:	461a      	mov	r2, r3
    1008:	4603      	mov	r3, r0
    100a:	70fb      	strb	r3, [r7, #3]
    100c:	460b      	mov	r3, r1
    100e:	70bb      	strb	r3, [r7, #2]
    1010:	4613      	mov	r3, r2
    1012:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1014:	78fa      	ldrb	r2, [r7, #3]
    1016:	78bb      	ldrb	r3, [r7, #2]
    1018:	6879      	ldr	r1, [r7, #4]
    101a:	01d2      	lsls	r2, r2, #7
    101c:	440a      	add	r2, r1
    101e:	4413      	add	r3, r2
    1020:	3340      	adds	r3, #64	; 0x40
    1022:	781b      	ldrb	r3, [r3, #0]
    1024:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1026:	7bfb      	ldrb	r3, [r7, #15]
    1028:	f023 0301 	bic.w	r3, r3, #1
    102c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    102e:	787a      	ldrb	r2, [r7, #1]
    1030:	7bfb      	ldrb	r3, [r7, #15]
    1032:	4313      	orrs	r3, r2
    1034:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1036:	78fa      	ldrb	r2, [r7, #3]
    1038:	78bb      	ldrb	r3, [r7, #2]
    103a:	6879      	ldr	r1, [r7, #4]
    103c:	01d2      	lsls	r2, r2, #7
    103e:	440a      	add	r2, r1
    1040:	4413      	add	r3, r2
    1042:	3340      	adds	r3, #64	; 0x40
    1044:	7bfa      	ldrb	r2, [r7, #15]
    1046:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1048:	bf00      	nop
    104a:	3714      	adds	r7, #20
    104c:	46bd      	mov	sp, r7
    104e:	bc80      	pop	{r7}
    1050:	4770      	bx	lr

00001052 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1052:	b480      	push	{r7}
    1054:	b085      	sub	sp, #20
    1056:	af00      	add	r7, sp, #0
    1058:	60f8      	str	r0, [r7, #12]
    105a:	460b      	mov	r3, r1
    105c:	607a      	str	r2, [r7, #4]
    105e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1060:	7afb      	ldrb	r3, [r7, #11]
    1062:	68fa      	ldr	r2, [r7, #12]
    1064:	01db      	lsls	r3, r3, #7
    1066:	4413      	add	r3, r2
    1068:	3328      	adds	r3, #40	; 0x28
    106a:	687a      	ldr	r2, [r7, #4]
    106c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    106e:	bf00      	nop
    1070:	3714      	adds	r7, #20
    1072:	46bd      	mov	sp, r7
    1074:	bc80      	pop	{r7}
    1076:	4770      	bx	lr

00001078 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1078:	b580      	push	{r7, lr}
    107a:	b082      	sub	sp, #8
    107c:	af00      	add	r7, sp, #0
    107e:	4603      	mov	r3, r0
    1080:	6039      	str	r1, [r7, #0]
    1082:	71fb      	strb	r3, [r7, #7]
    1084:	4613      	mov	r3, r2
    1086:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1088:	79bb      	ldrb	r3, [r7, #6]
    108a:	2b01      	cmp	r3, #1
    108c:	d01c      	beq.n	10c8 <_gpio_set_direction+0x50>
    108e:	2b02      	cmp	r3, #2
    1090:	d037      	beq.n	1102 <_gpio_set_direction+0x8a>
    1092:	2b00      	cmp	r3, #0
    1094:	d14e      	bne.n	1134 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1096:	79fb      	ldrb	r3, [r7, #7]
    1098:	683a      	ldr	r2, [r7, #0]
    109a:	4619      	mov	r1, r3
    109c:	482a      	ldr	r0, [pc, #168]	; (1148 <_gpio_set_direction+0xd0>)
    109e:	4b2b      	ldr	r3, [pc, #172]	; (114c <_gpio_set_direction+0xd4>)
    10a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    10a2:	683b      	ldr	r3, [r7, #0]
    10a4:	b29b      	uxth	r3, r3
    10a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    10aa:	79fb      	ldrb	r3, [r7, #7]
    10ac:	4619      	mov	r1, r3
    10ae:	4826      	ldr	r0, [pc, #152]	; (1148 <_gpio_set_direction+0xd0>)
    10b0:	4b27      	ldr	r3, [pc, #156]	; (1150 <_gpio_set_direction+0xd8>)
    10b2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    10b4:	683b      	ldr	r3, [r7, #0]
    10b6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    10b8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    10bc:	79fb      	ldrb	r3, [r7, #7]
    10be:	4619      	mov	r1, r3
    10c0:	4821      	ldr	r0, [pc, #132]	; (1148 <_gpio_set_direction+0xd0>)
    10c2:	4b23      	ldr	r3, [pc, #140]	; (1150 <_gpio_set_direction+0xd8>)
    10c4:	4798      	blx	r3
		break;
    10c6:	e03a      	b.n	113e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    10c8:	79fb      	ldrb	r3, [r7, #7]
    10ca:	683a      	ldr	r2, [r7, #0]
    10cc:	4619      	mov	r1, r3
    10ce:	481e      	ldr	r0, [pc, #120]	; (1148 <_gpio_set_direction+0xd0>)
    10d0:	4b1e      	ldr	r3, [pc, #120]	; (114c <_gpio_set_direction+0xd4>)
    10d2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    10d4:	683b      	ldr	r3, [r7, #0]
    10d6:	b29b      	uxth	r3, r3
    10d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    10dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    10e0:	79f9      	ldrb	r1, [r7, #7]
    10e2:	461a      	mov	r2, r3
    10e4:	4818      	ldr	r0, [pc, #96]	; (1148 <_gpio_set_direction+0xd0>)
    10e6:	4b1a      	ldr	r3, [pc, #104]	; (1150 <_gpio_set_direction+0xd8>)
    10e8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    10ea:	683b      	ldr	r3, [r7, #0]
    10ec:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    10ee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    10f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
    10f6:	79f9      	ldrb	r1, [r7, #7]
    10f8:	461a      	mov	r2, r3
    10fa:	4813      	ldr	r0, [pc, #76]	; (1148 <_gpio_set_direction+0xd0>)
    10fc:	4b14      	ldr	r3, [pc, #80]	; (1150 <_gpio_set_direction+0xd8>)
    10fe:	4798      	blx	r3
		break;
    1100:	e01d      	b.n	113e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1102:	79fb      	ldrb	r3, [r7, #7]
    1104:	683a      	ldr	r2, [r7, #0]
    1106:	4619      	mov	r1, r3
    1108:	480f      	ldr	r0, [pc, #60]	; (1148 <_gpio_set_direction+0xd0>)
    110a:	4b12      	ldr	r3, [pc, #72]	; (1154 <_gpio_set_direction+0xdc>)
    110c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    110e:	683b      	ldr	r3, [r7, #0]
    1110:	b29b      	uxth	r3, r3
    1112:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1116:	79fb      	ldrb	r3, [r7, #7]
    1118:	4619      	mov	r1, r3
    111a:	480b      	ldr	r0, [pc, #44]	; (1148 <_gpio_set_direction+0xd0>)
    111c:	4b0c      	ldr	r3, [pc, #48]	; (1150 <_gpio_set_direction+0xd8>)
    111e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1120:	683b      	ldr	r3, [r7, #0]
    1122:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1124:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1128:	79fb      	ldrb	r3, [r7, #7]
    112a:	4619      	mov	r1, r3
    112c:	4806      	ldr	r0, [pc, #24]	; (1148 <_gpio_set_direction+0xd0>)
    112e:	4b08      	ldr	r3, [pc, #32]	; (1150 <_gpio_set_direction+0xd8>)
    1130:	4798      	blx	r3
		break;
    1132:	e004      	b.n	113e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1134:	2246      	movs	r2, #70	; 0x46
    1136:	4908      	ldr	r1, [pc, #32]	; (1158 <_gpio_set_direction+0xe0>)
    1138:	2000      	movs	r0, #0
    113a:	4b08      	ldr	r3, [pc, #32]	; (115c <_gpio_set_direction+0xe4>)
    113c:	4798      	blx	r3
	}
}
    113e:	bf00      	nop
    1140:	3708      	adds	r7, #8
    1142:	46bd      	mov	sp, r7
    1144:	bd80      	pop	{r7, pc}
    1146:	bf00      	nop
    1148:	41008000 	.word	0x41008000
    114c:	00000ecf 	.word	0x00000ecf
    1150:	00001053 	.word	0x00001053
    1154:	00000ea9 	.word	0x00000ea9
    1158:	0001188c 	.word	0x0001188c
    115c:	0000579d 	.word	0x0000579d

00001160 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1160:	b580      	push	{r7, lr}
    1162:	b082      	sub	sp, #8
    1164:	af00      	add	r7, sp, #0
    1166:	4603      	mov	r3, r0
    1168:	6039      	str	r1, [r7, #0]
    116a:	71fb      	strb	r3, [r7, #7]
    116c:	4613      	mov	r3, r2
    116e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1170:	79bb      	ldrb	r3, [r7, #6]
    1172:	2b00      	cmp	r3, #0
    1174:	d006      	beq.n	1184 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1176:	79fb      	ldrb	r3, [r7, #7]
    1178:	683a      	ldr	r2, [r7, #0]
    117a:	4619      	mov	r1, r3
    117c:	4806      	ldr	r0, [pc, #24]	; (1198 <_gpio_set_level+0x38>)
    117e:	4b07      	ldr	r3, [pc, #28]	; (119c <_gpio_set_level+0x3c>)
    1180:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1182:	e005      	b.n	1190 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1184:	79fb      	ldrb	r3, [r7, #7]
    1186:	683a      	ldr	r2, [r7, #0]
    1188:	4619      	mov	r1, r3
    118a:	4803      	ldr	r0, [pc, #12]	; (1198 <_gpio_set_level+0x38>)
    118c:	4b04      	ldr	r3, [pc, #16]	; (11a0 <_gpio_set_level+0x40>)
    118e:	4798      	blx	r3
}
    1190:	bf00      	nop
    1192:	3708      	adds	r7, #8
    1194:	46bd      	mov	sp, r7
    1196:	bd80      	pop	{r7, pc}
    1198:	41008000 	.word	0x41008000
    119c:	00000ef5 	.word	0x00000ef5
    11a0:	00000f1b 	.word	0x00000f1b

000011a4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    11a4:	b590      	push	{r4, r7, lr}
    11a6:	b085      	sub	sp, #20
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
    11ac:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	095b      	lsrs	r3, r3, #5
    11b2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	b2db      	uxtb	r3, r3
    11b8:	f003 031f 	and.w	r3, r3, #31
    11bc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    11be:	683b      	ldr	r3, [r7, #0]
    11c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    11c4:	d106      	bne.n	11d4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    11c6:	7bba      	ldrb	r2, [r7, #14]
    11c8:	7bf9      	ldrb	r1, [r7, #15]
    11ca:	2300      	movs	r3, #0
    11cc:	4812      	ldr	r0, [pc, #72]	; (1218 <_gpio_set_pin_function+0x74>)
    11ce:	4c13      	ldr	r4, [pc, #76]	; (121c <_gpio_set_pin_function+0x78>)
    11d0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    11d2:	e01d      	b.n	1210 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    11d4:	7bba      	ldrb	r2, [r7, #14]
    11d6:	7bf9      	ldrb	r1, [r7, #15]
    11d8:	2301      	movs	r3, #1
    11da:	480f      	ldr	r0, [pc, #60]	; (1218 <_gpio_set_pin_function+0x74>)
    11dc:	4c0f      	ldr	r4, [pc, #60]	; (121c <_gpio_set_pin_function+0x78>)
    11de:	47a0      	blx	r4
		if (pin & 1) {
    11e0:	7bbb      	ldrb	r3, [r7, #14]
    11e2:	f003 0301 	and.w	r3, r3, #1
    11e6:	2b00      	cmp	r3, #0
    11e8:	d009      	beq.n	11fe <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    11ea:	7bbb      	ldrb	r3, [r7, #14]
    11ec:	105b      	asrs	r3, r3, #1
    11ee:	b2da      	uxtb	r2, r3
    11f0:	683b      	ldr	r3, [r7, #0]
    11f2:	b2db      	uxtb	r3, r3
    11f4:	7bf9      	ldrb	r1, [r7, #15]
    11f6:	4808      	ldr	r0, [pc, #32]	; (1218 <_gpio_set_pin_function+0x74>)
    11f8:	4c09      	ldr	r4, [pc, #36]	; (1220 <_gpio_set_pin_function+0x7c>)
    11fa:	47a0      	blx	r4
}
    11fc:	e008      	b.n	1210 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    11fe:	7bbb      	ldrb	r3, [r7, #14]
    1200:	105b      	asrs	r3, r3, #1
    1202:	b2da      	uxtb	r2, r3
    1204:	683b      	ldr	r3, [r7, #0]
    1206:	b2db      	uxtb	r3, r3
    1208:	7bf9      	ldrb	r1, [r7, #15]
    120a:	4803      	ldr	r0, [pc, #12]	; (1218 <_gpio_set_pin_function+0x74>)
    120c:	4c05      	ldr	r4, [pc, #20]	; (1224 <_gpio_set_pin_function+0x80>)
    120e:	47a0      	blx	r4
}
    1210:	bf00      	nop
    1212:	3714      	adds	r7, #20
    1214:	46bd      	mov	sp, r7
    1216:	bd90      	pop	{r4, r7, pc}
    1218:	41008000 	.word	0x41008000
    121c:	00000ffb 	.word	0x00000ffb
    1220:	00000f9f 	.word	0x00000f9f
    1224:	00000f41 	.word	0x00000f41

00001228 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1228:	b580      	push	{r7, lr}
    122a:	b082      	sub	sp, #8
    122c:	af00      	add	r7, sp, #0
    122e:	6078      	str	r0, [r7, #4]
    1230:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1232:	6839      	ldr	r1, [r7, #0]
    1234:	6878      	ldr	r0, [r7, #4]
    1236:	4b03      	ldr	r3, [pc, #12]	; (1244 <gpio_set_pin_function+0x1c>)
    1238:	4798      	blx	r3
}
    123a:	bf00      	nop
    123c:	3708      	adds	r7, #8
    123e:	46bd      	mov	sp, r7
    1240:	bd80      	pop	{r7, pc}
    1242:	bf00      	nop
    1244:	000011a5 	.word	0x000011a5

00001248 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1248:	b580      	push	{r7, lr}
    124a:	b082      	sub	sp, #8
    124c:	af00      	add	r7, sp, #0
    124e:	4603      	mov	r3, r0
    1250:	460a      	mov	r2, r1
    1252:	71fb      	strb	r3, [r7, #7]
    1254:	4613      	mov	r3, r2
    1256:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1258:	79fb      	ldrb	r3, [r7, #7]
    125a:	115b      	asrs	r3, r3, #5
    125c:	b2d8      	uxtb	r0, r3
    125e:	79fb      	ldrb	r3, [r7, #7]
    1260:	f003 031f 	and.w	r3, r3, #31
    1264:	2201      	movs	r2, #1
    1266:	fa02 f303 	lsl.w	r3, r2, r3
    126a:	79ba      	ldrb	r2, [r7, #6]
    126c:	4619      	mov	r1, r3
    126e:	4b03      	ldr	r3, [pc, #12]	; (127c <gpio_set_pin_direction+0x34>)
    1270:	4798      	blx	r3
}
    1272:	bf00      	nop
    1274:	3708      	adds	r7, #8
    1276:	46bd      	mov	sp, r7
    1278:	bd80      	pop	{r7, pc}
    127a:	bf00      	nop
    127c:	00001079 	.word	0x00001079

00001280 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1280:	b580      	push	{r7, lr}
    1282:	b082      	sub	sp, #8
    1284:	af00      	add	r7, sp, #0
    1286:	4603      	mov	r3, r0
    1288:	460a      	mov	r2, r1
    128a:	71fb      	strb	r3, [r7, #7]
    128c:	4613      	mov	r3, r2
    128e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1290:	79fb      	ldrb	r3, [r7, #7]
    1292:	115b      	asrs	r3, r3, #5
    1294:	b2d8      	uxtb	r0, r3
    1296:	79fb      	ldrb	r3, [r7, #7]
    1298:	f003 031f 	and.w	r3, r3, #31
    129c:	2201      	movs	r2, #1
    129e:	fa02 f303 	lsl.w	r3, r2, r3
    12a2:	79ba      	ldrb	r2, [r7, #6]
    12a4:	4619      	mov	r1, r3
    12a6:	4b03      	ldr	r3, [pc, #12]	; (12b4 <gpio_set_pin_level+0x34>)
    12a8:	4798      	blx	r3
}
    12aa:	bf00      	nop
    12ac:	3708      	adds	r7, #8
    12ae:	46bd      	mov	sp, r7
    12b0:	bd80      	pop	{r7, pc}
    12b2:	bf00      	nop
    12b4:	00001161 	.word	0x00001161

000012b8 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
    12b8:	b580      	push	{r7, lr}
    12ba:	b082      	sub	sp, #8
    12bc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    12be:	2100      	movs	r1, #0
    12c0:	2008      	movs	r0, #8
    12c2:	4b24      	ldr	r3, [pc, #144]	; (1354 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    12c4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    12c6:	2100      	movs	r1, #0
    12c8:	202b      	movs	r0, #43	; 0x2b
    12ca:	4b22      	ldr	r3, [pc, #136]	; (1354 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    12cc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    12ce:	2100      	movs	r1, #0
    12d0:	202a      	movs	r0, #42	; 0x2a
    12d2:	4b20      	ldr	r3, [pc, #128]	; (1354 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    12d4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    12d6:	2102      	movs	r1, #2
    12d8:	2008      	movs	r0, #8
    12da:	4b1f      	ldr	r3, [pc, #124]	; (1358 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    12dc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    12de:	2102      	movs	r1, #2
    12e0:	202b      	movs	r0, #43	; 0x2b
    12e2:	4b1d      	ldr	r3, [pc, #116]	; (1358 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    12e4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    12e6:	2102      	movs	r1, #2
    12e8:	202a      	movs	r0, #42	; 0x2a
    12ea:	4b1b      	ldr	r3, [pc, #108]	; (1358 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    12ec:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    12ee:	2101      	movs	r1, #1
    12f0:	2008      	movs	r0, #8
    12f2:	4b1a      	ldr	r3, [pc, #104]	; (135c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    12f4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    12f6:	2100      	movs	r1, #0
    12f8:	202b      	movs	r0, #43	; 0x2b
    12fa:	4b18      	ldr	r3, [pc, #96]	; (135c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    12fc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    12fe:	2100      	movs	r1, #0
    1300:	202a      	movs	r0, #42	; 0x2a
    1302:	4b16      	ldr	r3, [pc, #88]	; (135c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    1304:	4798      	blx	r3

	delay_us(1);
    1306:	2001      	movs	r0, #1
    1308:	4b15      	ldr	r3, [pc, #84]	; (1360 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    130a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    130c:	2300      	movs	r3, #0
    130e:	607b      	str	r3, [r7, #4]
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	2b06      	cmp	r3, #6
    1314:	dc11      	bgt.n	133a <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
    1316:	2101      	movs	r1, #1
    1318:	202a      	movs	r0, #42	; 0x2a
    131a:	4b10      	ldr	r3, [pc, #64]	; (135c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    131c:	4798      	blx	r3
		delay_us(1);
    131e:	2001      	movs	r0, #1
    1320:	4b0f      	ldr	r3, [pc, #60]	; (1360 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    1322:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    1324:	2100      	movs	r1, #0
    1326:	202a      	movs	r0, #42	; 0x2a
    1328:	4b0c      	ldr	r3, [pc, #48]	; (135c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    132a:	4798      	blx	r3
		delay_us(1);
    132c:	2001      	movs	r0, #1
    132e:	4b0c      	ldr	r3, [pc, #48]	; (1360 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    1330:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	3301      	adds	r3, #1
    1336:	607b      	str	r3, [r7, #4]
    1338:	e7ea      	b.n	1310 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
    133a:	2101      	movs	r1, #1
    133c:	202b      	movs	r0, #43	; 0x2b
    133e:	4b07      	ldr	r3, [pc, #28]	; (135c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    1340:	4798      	blx	r3
	delay_us(1);
    1342:	2001      	movs	r0, #1
    1344:	4b06      	ldr	r3, [pc, #24]	; (1360 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    1346:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1348:	4b06      	ldr	r3, [pc, #24]	; (1364 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
    134a:	4798      	blx	r3
}
    134c:	bf00      	nop
    134e:	3708      	adds	r7, #8
    1350:	46bd      	mov	sp, r7
    1352:	bd80      	pop	{r7, pc}
    1354:	00001229 	.word	0x00001229
    1358:	00001249 	.word	0x00001249
    135c:	00001281 	.word	0x00001281
    1360:	00003f1d 	.word	0x00003f1d
    1364:	00003229 	.word	0x00003229

00001368 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    1368:	b480      	push	{r7}
    136a:	b083      	sub	sp, #12
    136c:	af00      	add	r7, sp, #0
    136e:	6078      	str	r0, [r7, #4]
    1370:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	683a      	ldr	r2, [r7, #0]
    1376:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	4a04      	ldr	r2, [pc, #16]	; (138c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    137c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	4618      	mov	r0, r3
    1384:	370c      	adds	r7, #12
    1386:	46bd      	mov	sp, r7
    1388:	bc80      	pop	{r7}
    138a:	4770      	bx	lr
    138c:	001fff00 	.word	0x001fff00

00001390 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    1390:	b480      	push	{r7}
    1392:	b083      	sub	sp, #12
    1394:	af00      	add	r7, sp, #0
    1396:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	bc80      	pop	{r7}
    13a2:	4770      	bx	lr

000013a4 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
    13a4:	b580      	push	{r7, lr}
    13a6:	b082      	sub	sp, #8
    13a8:	af00      	add	r7, sp, #0
    13aa:	6078      	str	r0, [r7, #4]
	xferDone=false;
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	2200      	movs	r2, #0
    13b0:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
    13b2:	6878      	ldr	r0, [r7, #4]
    13b4:	4b04      	ldr	r3, [pc, #16]	; (13c8 <_ZN13N25Q256_Class4InitEv+0x24>)
    13b6:	4798      	blx	r3
	return SelfTest();
    13b8:	6878      	ldr	r0, [r7, #4]
    13ba:	4b04      	ldr	r3, [pc, #16]	; (13cc <_ZN13N25Q256_Class4InitEv+0x28>)
    13bc:	4798      	blx	r3
    13be:	4603      	mov	r3, r0
}
    13c0:	4618      	mov	r0, r3
    13c2:	3708      	adds	r7, #8
    13c4:	46bd      	mov	sp, r7
    13c6:	bd80      	pop	{r7, pc}
    13c8:	000013d1 	.word	0x000013d1
    13cc:	0000156d 	.word	0x0000156d

000013d0 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
    13d0:	b590      	push	{r4, r7, lr}
    13d2:	b083      	sub	sp, #12
    13d4:	af00      	add	r7, sp, #0
    13d6:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
    13d8:	687b      	ldr	r3, [r7, #4]
    13da:	685b      	ldr	r3, [r3, #4]
    13dc:	4618      	mov	r0, r3
    13de:	4b08      	ldr	r3, [pc, #32]	; (1400 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
    13e0:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
    13e6:	2300      	movs	r3, #0
    13e8:	4a06      	ldr	r2, [pc, #24]	; (1404 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
    13ea:	4807      	ldr	r0, [pc, #28]	; (1408 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
    13ec:	4c07      	ldr	r4, [pc, #28]	; (140c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
    13ee:	47a0      	blx	r4
    13f0:	4602      	mov	r2, r0
    13f2:	687b      	ldr	r3, [r7, #4]
    13f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    13f8:	bf00      	nop
    13fa:	370c      	adds	r7, #12
    13fc:	46bd      	mov	sp, r7
    13fe:	bd90      	pop	{r4, r7, pc}
    1400:	00004385 	.word	0x00004385
    1404:	000012b9 	.word	0x000012b9
    1408:	20001820 	.word	0x20001820
    140c:	0000cd19 	.word	0x0000cd19

00001410 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
    1410:	b580      	push	{r7, lr}
    1412:	b084      	sub	sp, #16
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    1420:	685b      	ldr	r3, [r3, #4]
    1422:	689b      	ldr	r3, [r3, #8]
    1424:	687a      	ldr	r2, [r7, #4]
    1426:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
    142a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    142e:	6839      	ldr	r1, [r7, #0]
    1430:	4798      	blx	r3
    1432:	4603      	mov	r3, r0
    1434:	60fb      	str	r3, [r7, #12]
	return	e;
    1436:	68fb      	ldr	r3, [r7, #12]
}
    1438:	4618      	mov	r0, r3
    143a:	3710      	adds	r7, #16
    143c:	46bd      	mov	sp, r7
    143e:	bd80      	pop	{r7, pc}

00001440 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    1440:	b590      	push	{r4, r7, lr}
    1442:	b087      	sub	sp, #28
    1444:	af00      	add	r7, sp, #0
    1446:	60f8      	str	r0, [r7, #12]
    1448:	60b9      	str	r1, [r7, #8]
    144a:	607a      	str	r2, [r7, #4]
    144c:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    144e:	68fb      	ldr	r3, [r7, #12]
    1450:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    1454:	685b      	ldr	r3, [r3, #4]
    1456:	685c      	ldr	r4, [r3, #4]
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    145e:	683b      	ldr	r3, [r7, #0]
    1460:	687a      	ldr	r2, [r7, #4]
    1462:	68b9      	ldr	r1, [r7, #8]
    1464:	47a0      	blx	r4
    1466:	4603      	mov	r3, r0
    1468:	617b      	str	r3, [r7, #20]
	return	w;
    146a:	697b      	ldr	r3, [r7, #20]
}
    146c:	4618      	mov	r0, r3
    146e:	371c      	adds	r7, #28
    1470:	46bd      	mov	sp, r7
    1472:	bd90      	pop	{r4, r7, pc}

00001474 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    1474:	b590      	push	{r4, r7, lr}
    1476:	b087      	sub	sp, #28
    1478:	af00      	add	r7, sp, #0
    147a:	60f8      	str	r0, [r7, #12]
    147c:	60b9      	str	r1, [r7, #8]
    147e:	607a      	str	r2, [r7, #4]
    1480:	603b      	str	r3, [r7, #0]
	xferDone=false;
    1482:	68fb      	ldr	r3, [r7, #12]
    1484:	2200      	movs	r2, #0
    1486:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    148e:	685b      	ldr	r3, [r3, #4]
    1490:	681c      	ldr	r4, [r3, #0]
    1492:	68fb      	ldr	r3, [r7, #12]
    1494:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    1498:	683b      	ldr	r3, [r7, #0]
    149a:	687a      	ldr	r2, [r7, #4]
    149c:	68b9      	ldr	r1, [r7, #8]
    149e:	47a0      	blx	r4
    14a0:	4603      	mov	r3, r0
    14a2:	617b      	str	r3, [r7, #20]
	return	r;
    14a4:	697b      	ldr	r3, [r7, #20]
}
    14a6:	4618      	mov	r0, r3
    14a8:	371c      	adds	r7, #28
    14aa:	46bd      	mov	sp, r7
    14ac:	bd90      	pop	{r4, r7, pc}
	...

000014b0 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
    14b0:	b580      	push	{r7, lr}
    14b2:	b082      	sub	sp, #8
    14b4:	af00      	add	r7, sp, #0
    14b6:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
    14b8:	687a      	ldr	r2, [r7, #4]
    14ba:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    14be:	f043 0310 	orr.w	r3, r3, #16
    14c2:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
    14c6:	687a      	ldr	r2, [r7, #4]
    14c8:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    14cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    14d0:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
    14d4:	687a      	ldr	r2, [r7, #4]
    14d6:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
    14da:	f36f 1305 	bfc	r3, #4, #2
    14de:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	2205      	movs	r2, #5
    14e6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	2201      	movs	r2, #1
    14ee:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	f203 2212 	addw	r2, r3, #530	; 0x212
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
    14fe:	687b      	ldr	r3, [r7, #4]
    1500:	685a      	ldr	r2, [r3, #4]
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	f503 7305 	add.w	r3, r3, #532	; 0x214
    1508:	4619      	mov	r1, r3
    150a:	4610      	mov	r0, r2
    150c:	4b04      	ldr	r3, [pc, #16]	; (1520 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
    150e:	4798      	blx	r3
		return status;
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
    1516:	4618      	mov	r0, r3
    1518:	3708      	adds	r7, #8
    151a:	46bd      	mov	sp, r7
    151c:	bd80      	pop	{r7, pc}
    151e:	bf00      	nop
    1520:	000043fd 	.word	0x000043fd

00001524 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
    1524:	b580      	push	{r7, lr}
    1526:	b082      	sub	sp, #8
    1528:	af00      	add	r7, sp, #0
    152a:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
    152c:	6878      	ldr	r0, [r7, #4]
    152e:	4b0e      	ldr	r3, [pc, #56]	; (1568 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
    1530:	4798      	blx	r3
    1532:	4603      	mov	r3, r0
    1534:	461a      	mov	r2, r3
    1536:	687b      	ldr	r3, [r7, #4]
    1538:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
    153c:	687b      	ldr	r3, [r7, #4]
    153e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    1542:	f003 0301 	and.w	r3, r3, #1
    1546:	2b00      	cmp	r3, #0
    1548:	d000      	beq.n	154c <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
    154a:	e7ef      	b.n	152c <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
    154c:	687b      	ldr	r3, [r7, #4]
    154e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    1552:	f003 0301 	and.w	r3, r3, #1
    1556:	2b00      	cmp	r3, #0
    1558:	bf0c      	ite	eq
    155a:	2301      	moveq	r3, #1
    155c:	2300      	movne	r3, #0
    155e:	b2db      	uxtb	r3, r3
}
    1560:	4618      	mov	r0, r3
    1562:	3708      	adds	r7, #8
    1564:	46bd      	mov	sp, r7
    1566:	bd80      	pop	{r7, pc}
    1568:	000014b1 	.word	0x000014b1

0000156c <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
    156c:	b590      	push	{r4, r7, lr}
    156e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    1572:	b085      	sub	sp, #20
    1574:	af00      	add	r7, sp, #0
    1576:	f107 0310 	add.w	r3, r7, #16
    157a:	3b0c      	subs	r3, #12
    157c:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
    157e:	f107 0310 	add.w	r3, r7, #16
    1582:	3b0c      	subs	r3, #12
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    158a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
    158e:	f107 0310 	add.w	r3, r7, #16
    1592:	3b0c      	subs	r3, #12
    1594:	681b      	ldr	r3, [r3, #0]
    1596:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    159a:	f107 0110 	add.w	r1, r7, #16
    159e:	3904      	subs	r1, #4
    15a0:	f107 0010 	add.w	r0, r7, #16
    15a4:	380c      	subs	r0, #12
    15a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    15aa:	6800      	ldr	r0, [r0, #0]
    15ac:	4c45      	ldr	r4, [pc, #276]	; (16c4 <_ZN13N25Q256_Class8SelfTestEv+0x158>)
    15ae:	47a0      	blx	r4
	flash.WaitOnBusy();
    15b0:	4845      	ldr	r0, [pc, #276]	; (16c8 <_ZN13N25Q256_Class8SelfTestEv+0x15c>)
    15b2:	4b46      	ldr	r3, [pc, #280]	; (16cc <_ZN13N25Q256_Class8SelfTestEv+0x160>)
    15b4:	4798      	blx	r3
	Erase(currentAddress);
    15b6:	f107 0310 	add.w	r3, r7, #16
    15ba:	3b0c      	subs	r3, #12
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    15c2:	f107 0310 	add.w	r3, r7, #16
    15c6:	3b0c      	subs	r3, #12
    15c8:	4611      	mov	r1, r2
    15ca:	6818      	ldr	r0, [r3, #0]
    15cc:	4b40      	ldr	r3, [pc, #256]	; (16d0 <_ZN13N25Q256_Class8SelfTestEv+0x164>)
    15ce:	4798      	blx	r3
	flash.WaitOnBusy();
    15d0:	483d      	ldr	r0, [pc, #244]	; (16c8 <_ZN13N25Q256_Class8SelfTestEv+0x15c>)
    15d2:	4b3e      	ldr	r3, [pc, #248]	; (16cc <_ZN13N25Q256_Class8SelfTestEv+0x160>)
    15d4:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
    15d6:	f107 0310 	add.w	r3, r7, #16
    15da:	3b0c      	subs	r3, #12
    15dc:	681b      	ldr	r3, [r3, #0]
    15de:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    15e2:	f107 0110 	add.w	r1, r7, #16
    15e6:	3904      	subs	r1, #4
    15e8:	f107 0010 	add.w	r0, r7, #16
    15ec:	380c      	subs	r0, #12
    15ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    15f2:	6800      	ldr	r0, [r0, #0]
    15f4:	4c37      	ldr	r4, [pc, #220]	; (16d4 <_ZN13N25Q256_Class8SelfTestEv+0x168>)
    15f6:	47a0      	blx	r4
	flash.WaitOnBusy();
    15f8:	4833      	ldr	r0, [pc, #204]	; (16c8 <_ZN13N25Q256_Class8SelfTestEv+0x15c>)
    15fa:	4b34      	ldr	r3, [pc, #208]	; (16cc <_ZN13N25Q256_Class8SelfTestEv+0x160>)
    15fc:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
    15fe:	f107 0310 	add.w	r3, r7, #16
    1602:	3b0c      	subs	r3, #12
    1604:	681b      	ldr	r3, [r3, #0]
    1606:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    160a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
    160e:	f101 0110 	add.w	r1, r1, #16
    1612:	3904      	subs	r1, #4
    1614:	f107 0010 	add.w	r0, r7, #16
    1618:	380c      	subs	r0, #12
    161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    161e:	6800      	ldr	r0, [r0, #0]
    1620:	4c28      	ldr	r4, [pc, #160]	; (16c4 <_ZN13N25Q256_Class8SelfTestEv+0x158>)
    1622:	47a0      	blx	r4
	flash.WaitOnBusy();
    1624:	4828      	ldr	r0, [pc, #160]	; (16c8 <_ZN13N25Q256_Class8SelfTestEv+0x15c>)
    1626:	4b29      	ldr	r3, [pc, #164]	; (16cc <_ZN13N25Q256_Class8SelfTestEv+0x160>)
    1628:	4798      	blx	r3
	isOK	 = true;
    162a:	f107 0310 	add.w	r3, r7, #16
    162e:	3b0c      	subs	r3, #12
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	2201      	movs	r2, #1
    1634:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
    1638:	2300      	movs	r3, #0
    163a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    163e:	f102 020c 	add.w	r2, r2, #12
    1642:	6013      	str	r3, [r2, #0]
    1644:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    1648:	f103 030c 	add.w	r3, r3, #12
    164c:	681b      	ldr	r3, [r3, #0]
    164e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    1652:	da2b      	bge.n	16ac <_ZN13N25Q256_Class8SelfTestEv+0x140>
		if (testRXBuffer[i] != testTXBuffer[i]) {
    1654:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
    1658:	f103 0310 	add.w	r3, r3, #16
    165c:	3b04      	subs	r3, #4
    165e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    1662:	f102 020c 	add.w	r2, r2, #12
    1666:	6812      	ldr	r2, [r2, #0]
    1668:	4413      	add	r3, r2
    166a:	781a      	ldrb	r2, [r3, #0]
    166c:	f107 0310 	add.w	r3, r7, #16
    1670:	3b04      	subs	r3, #4
    1672:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
    1676:	f101 010c 	add.w	r1, r1, #12
    167a:	6809      	ldr	r1, [r1, #0]
    167c:	440b      	add	r3, r1
    167e:	781b      	ldrb	r3, [r3, #0]
    1680:	429a      	cmp	r2, r3
    1682:	d007      	beq.n	1694 <_ZN13N25Q256_Class8SelfTestEv+0x128>
			isOK = false;
    1684:	f107 0310 	add.w	r3, r7, #16
    1688:	3b0c      	subs	r3, #12
    168a:	681b      	ldr	r3, [r3, #0]
    168c:	2200      	movs	r2, #0
    168e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
    1692:	e00b      	b.n	16ac <_ZN13N25Q256_Class8SelfTestEv+0x140>
	for (int i = 0; i < QSPI_ERBLK; i++) {
    1694:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    1698:	f103 030c 	add.w	r3, r3, #12
    169c:	681b      	ldr	r3, [r3, #0]
    169e:	3301      	adds	r3, #1
    16a0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    16a4:	f102 020c 	add.w	r2, r2, #12
    16a8:	6013      	str	r3, [r2, #0]
    16aa:	e7cb      	b.n	1644 <_ZN13N25Q256_Class8SelfTestEv+0xd8>
		}
					
	}
	return	isOK;
    16ac:	f107 0310 	add.w	r3, r7, #16
    16b0:	3b0c      	subs	r3, #12
    16b2:	681b      	ldr	r3, [r3, #0]
    16b4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
    16b8:	4618      	mov	r0, r3
    16ba:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
    16be:	3714      	adds	r7, #20
    16c0:	46bd      	mov	sp, r7
    16c2:	bd90      	pop	{r4, r7, pc}
    16c4:	00001475 	.word	0x00001475
    16c8:	20001830 	.word	0x20001830
    16cc:	00001525 	.word	0x00001525
    16d0:	00001411 	.word	0x00001411
    16d4:	00001441 	.word	0x00001441

000016d8 <_Z41__static_initialization_and_destruction_0ii>:
    16d8:	b580      	push	{r7, lr}
    16da:	b082      	sub	sp, #8
    16dc:	af00      	add	r7, sp, #0
    16de:	6078      	str	r0, [r7, #4]
    16e0:	6039      	str	r1, [r7, #0]
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	2b01      	cmp	r3, #1
    16e6:	d10d      	bne.n	1704 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    16e8:	683b      	ldr	r3, [r7, #0]
    16ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    16ee:	4293      	cmp	r3, r2
    16f0:	d108      	bne.n	1704 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    16f2:	4906      	ldr	r1, [pc, #24]	; (170c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    16f4:	4806      	ldr	r0, [pc, #24]	; (1710 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    16f6:	4b07      	ldr	r3, [pc, #28]	; (1714 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    16f8:	4798      	blx	r3
    16fa:	4a07      	ldr	r2, [pc, #28]	; (1718 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    16fc:	4907      	ldr	r1, [pc, #28]	; (171c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    16fe:	4804      	ldr	r0, [pc, #16]	; (1710 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1700:	4b07      	ldr	r3, [pc, #28]	; (1720 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1702:	4798      	blx	r3
    1704:	bf00      	nop
    1706:	3708      	adds	r7, #8
    1708:	46bd      	mov	sp, r7
    170a:	bd80      	pop	{r7, pc}
    170c:	2000222c 	.word	0x2000222c
    1710:	20001830 	.word	0x20001830
    1714:	00001369 	.word	0x00001369
    1718:	20000000 	.word	0x20000000
    171c:	00001391 	.word	0x00001391
    1720:	0000ed3d 	.word	0x0000ed3d

00001724 <_GLOBAL__sub_I_ptrN25Q256Class>:
    1724:	b580      	push	{r7, lr}
    1726:	af00      	add	r7, sp, #0
    1728:	f64f 71ff 	movw	r1, #65535	; 0xffff
    172c:	2001      	movs	r0, #1
    172e:	4b01      	ldr	r3, [pc, #4]	; (1734 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    1730:	4798      	blx	r3
    1732:	bd80      	pop	{r7, pc}
    1734:	000016d9 	.word	0x000016d9

00001738 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:
	ptrCalendarClass=this;
	//ptrMemory=&memory;
} //Calendar_Class

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    1738:	b580      	push	{r7, lr}
    173a:	b082      	sub	sp, #8
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
    1742:	687b      	ldr	r3, [r7, #4]
    1744:	4618      	mov	r0, r3
    1746:	4b08      	ldr	r3, [pc, #32]	; (1768 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    1748:	4798      	blx	r3
    174a:	4a08      	ldr	r2, [pc, #32]	; (176c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    174c:	687b      	ldr	r3, [r7, #4]
    174e:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	683a      	ldr	r2, [r7, #0]
    1754:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
    1758:	4a05      	ldr	r2, [pc, #20]	; (1770 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	4618      	mov	r0, r3
    1762:	3708      	adds	r7, #8
    1764:	46bd      	mov	sp, r7
    1766:	bd80      	pop	{r7, pc}
    1768:	00001a4d 	.word	0x00001a4d
    176c:	000118cc 	.word	0x000118cc
    1770:	20001a60 	.word	0x20001a60

00001774 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    1774:	b580      	push	{r7, lr}
    1776:	b082      	sub	sp, #8
    1778:	af00      	add	r7, sp, #0
    177a:	6078      	str	r0, [r7, #4]
    177c:	4a05      	ldr	r2, [pc, #20]	; (1794 <_ZN14Calendar_ClassD1Ev+0x20>)
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	601a      	str	r2, [r3, #0]
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	4618      	mov	r0, r3
    1786:	4b04      	ldr	r3, [pc, #16]	; (1798 <_ZN14Calendar_ClassD1Ev+0x24>)
    1788:	4798      	blx	r3
{
} //~Calendar_Class
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	4618      	mov	r0, r3
    178e:	3708      	adds	r7, #8
    1790:	46bd      	mov	sp, r7
    1792:	bd80      	pop	{r7, pc}
    1794:	000118cc 	.word	0x000118cc
    1798:	00001a6d 	.word	0x00001a6d

0000179c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    179c:	b580      	push	{r7, lr}
    179e:	b082      	sub	sp, #8
    17a0:	af00      	add	r7, sp, #0
    17a2:	6078      	str	r0, [r7, #4]
    17a4:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    17ac:	6839      	ldr	r1, [r7, #0]
    17ae:	4618      	mov	r0, r3
    17b0:	4b03      	ldr	r3, [pc, #12]	; (17c0 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    17b2:	4798      	blx	r3
    17b4:	4603      	mov	r3, r0
}
    17b6:	4618      	mov	r0, r3
    17b8:	3708      	adds	r7, #8
    17ba:	46bd      	mov	sp, r7
    17bc:	bd80      	pop	{r7, pc}
    17be:	bf00      	nop
    17c0:	00003d95 	.word	0x00003d95

000017c4 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    17c4:	b480      	push	{r7}
    17c6:	b083      	sub	sp, #12
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
    17cc:	460b      	mov	r3, r1
    17ce:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    17d0:	887b      	ldrh	r3, [r7, #2]
    17d2:	f003 0303 	and.w	r3, r3, #3
    17d6:	2b00      	cmp	r3, #0
    17d8:	d001      	beq.n	17de <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    17da:	2300      	movs	r3, #0
    17dc:	e000      	b.n	17e0 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    17de:	2301      	movs	r3, #1
	}
}
    17e0:	4618      	mov	r0, r3
    17e2:	370c      	adds	r7, #12
    17e4:	46bd      	mov	sp, r7
    17e6:	bc80      	pop	{r7}
    17e8:	4770      	bx	lr
	...

000017ec <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	b086      	sub	sp, #24
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
    17f4:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    17f6:	2300      	movs	r3, #0
    17f8:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    17fa:	2300      	movs	r3, #0
    17fc:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    17fe:	683b      	ldr	r3, [r7, #0]
    1800:	88db      	ldrh	r3, [r3, #6]
    1802:	b2da      	uxtb	r2, r3
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    180a:	699b      	ldr	r3, [r3, #24]
    180c:	b2db      	uxtb	r3, r3
    180e:	1ad3      	subs	r3, r2, r3
    1810:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	795b      	ldrb	r3, [r3, #5]
    1816:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    1818:	683b      	ldr	r3, [r7, #0]
    181a:	791b      	ldrb	r3, [r3, #4]
    181c:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    181e:	683b      	ldr	r3, [r7, #0]
    1820:	789b      	ldrb	r3, [r3, #2]
    1822:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    1824:	683b      	ldr	r3, [r7, #0]
    1826:	785b      	ldrb	r3, [r3, #1]
    1828:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    182a:	683b      	ldr	r3, [r7, #0]
    182c:	781b      	ldrb	r3, [r3, #0]
    182e:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    1830:	2300      	movs	r3, #0
    1832:	613b      	str	r3, [r7, #16]
    1834:	7bfa      	ldrb	r2, [r7, #15]
    1836:	693b      	ldr	r3, [r7, #16]
    1838:	429a      	cmp	r2, r3
    183a:	d91e      	bls.n	187a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    183c:	687b      	ldr	r3, [r7, #4]
    183e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1842:	699b      	ldr	r3, [r3, #24]
    1844:	b29a      	uxth	r2, r3
    1846:	693b      	ldr	r3, [r7, #16]
    1848:	b29b      	uxth	r3, r3
    184a:	4413      	add	r3, r2
    184c:	b29b      	uxth	r3, r3
    184e:	4619      	mov	r1, r3
    1850:	6878      	ldr	r0, [r7, #4]
    1852:	4b27      	ldr	r3, [pc, #156]	; (18f0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    1854:	4798      	blx	r3
    1856:	4603      	mov	r3, r0
    1858:	2b00      	cmp	r3, #0
    185a:	d006      	beq.n	186a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    185c:	697b      	ldr	r3, [r7, #20]
    185e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    1862:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    1866:	617b      	str	r3, [r7, #20]
    1868:	e003      	b.n	1872 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    186a:	697a      	ldr	r2, [r7, #20]
    186c:	4b21      	ldr	r3, [pc, #132]	; (18f4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    186e:	4413      	add	r3, r2
    1870:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    1872:	693b      	ldr	r3, [r7, #16]
    1874:	3301      	adds	r3, #1
    1876:	613b      	str	r3, [r7, #16]
    1878:	e7dc      	b.n	1834 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    187a:	2301      	movs	r3, #1
    187c:	613b      	str	r3, [r7, #16]
    187e:	7bba      	ldrb	r2, [r7, #14]
    1880:	693b      	ldr	r3, [r7, #16]
    1882:	429a      	cmp	r2, r3
    1884:	d910      	bls.n	18a8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    1886:	683b      	ldr	r3, [r7, #0]
    1888:	88db      	ldrh	r3, [r3, #6]
    188a:	4619      	mov	r1, r3
    188c:	693b      	ldr	r3, [r7, #16]
    188e:	b2db      	uxtb	r3, r3
    1890:	461a      	mov	r2, r3
    1892:	6878      	ldr	r0, [r7, #4]
    1894:	4b18      	ldr	r3, [pc, #96]	; (18f8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    1896:	4798      	blx	r3
    1898:	4602      	mov	r2, r0
    189a:	697b      	ldr	r3, [r7, #20]
    189c:	4413      	add	r3, r2
    189e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    18a0:	693b      	ldr	r3, [r7, #16]
    18a2:	3301      	adds	r3, #1
    18a4:	613b      	str	r3, [r7, #16]
    18a6:	e7ea      	b.n	187e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    18a8:	7b7b      	ldrb	r3, [r7, #13]
    18aa:	3b01      	subs	r3, #1
    18ac:	4a13      	ldr	r2, [pc, #76]	; (18fc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    18ae:	fb02 f303 	mul.w	r3, r2, r3
    18b2:	461a      	mov	r2, r3
    18b4:	697b      	ldr	r3, [r7, #20]
    18b6:	4413      	add	r3, r2
    18b8:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    18ba:	7b3b      	ldrb	r3, [r7, #12]
    18bc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    18c0:	fb02 f303 	mul.w	r3, r2, r3
    18c4:	461a      	mov	r2, r3
    18c6:	697b      	ldr	r3, [r7, #20]
    18c8:	4413      	add	r3, r2
    18ca:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    18cc:	7afa      	ldrb	r2, [r7, #11]
    18ce:	4613      	mov	r3, r2
    18d0:	011b      	lsls	r3, r3, #4
    18d2:	1a9b      	subs	r3, r3, r2
    18d4:	009b      	lsls	r3, r3, #2
    18d6:	461a      	mov	r2, r3
    18d8:	697b      	ldr	r3, [r7, #20]
    18da:	4413      	add	r3, r2
    18dc:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    18de:	7abb      	ldrb	r3, [r7, #10]
    18e0:	697a      	ldr	r2, [r7, #20]
    18e2:	4413      	add	r3, r2
    18e4:	617b      	str	r3, [r7, #20]

	return tmp;
    18e6:	697b      	ldr	r3, [r7, #20]
}
    18e8:	4618      	mov	r0, r3
    18ea:	3718      	adds	r7, #24
    18ec:	46bd      	mov	sp, r7
    18ee:	bd80      	pop	{r7, pc}
    18f0:	000017c5 	.word	0x000017c5
    18f4:	01e13380 	.word	0x01e13380
    18f8:	00001901 	.word	0x00001901
    18fc:	00015180 	.word	0x00015180

00001900 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    1900:	b580      	push	{r7, lr}
    1902:	b086      	sub	sp, #24
    1904:	af00      	add	r7, sp, #0
    1906:	60f8      	str	r0, [r7, #12]
    1908:	60b9      	str	r1, [r7, #8]
    190a:	4613      	mov	r3, r2
    190c:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    190e:	2300      	movs	r3, #0
    1910:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    1912:	68bb      	ldr	r3, [r7, #8]
    1914:	b29b      	uxth	r3, r3
    1916:	4619      	mov	r1, r3
    1918:	68f8      	ldr	r0, [r7, #12]
    191a:	4b2f      	ldr	r3, [pc, #188]	; (19d8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    191c:	4798      	blx	r3
    191e:	4603      	mov	r3, r0
    1920:	2b00      	cmp	r3, #0
    1922:	d028      	beq.n	1976 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    1924:	79fb      	ldrb	r3, [r7, #7]
    1926:	3b01      	subs	r3, #1
    1928:	2b0b      	cmp	r3, #11
    192a:	d84c      	bhi.n	19c6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    192c:	a201      	add	r2, pc, #4	; (adr r2, 1934 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1932:	bf00      	nop
    1934:	00001965 	.word	0x00001965
    1938:	0000196b 	.word	0x0000196b
    193c:	00001965 	.word	0x00001965
    1940:	00001971 	.word	0x00001971
    1944:	00001965 	.word	0x00001965
    1948:	00001971 	.word	0x00001971
    194c:	00001965 	.word	0x00001965
    1950:	00001965 	.word	0x00001965
    1954:	00001971 	.word	0x00001971
    1958:	00001965 	.word	0x00001965
    195c:	00001971 	.word	0x00001971
    1960:	00001965 	.word	0x00001965
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1964:	4b1d      	ldr	r3, [pc, #116]	; (19dc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1966:	617b      	str	r3, [r7, #20]
			break;
    1968:	e030      	b.n	19cc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    196a:	4b1d      	ldr	r3, [pc, #116]	; (19e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    196c:	617b      	str	r3, [r7, #20]
			break;
    196e:	e02d      	b.n	19cc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    1970:	4b1c      	ldr	r3, [pc, #112]	; (19e4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    1972:	617b      	str	r3, [r7, #20]
			break;
    1974:	e02a      	b.n	19cc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    1976:	79fb      	ldrb	r3, [r7, #7]
    1978:	3b01      	subs	r3, #1
    197a:	2b0b      	cmp	r3, #11
    197c:	d825      	bhi.n	19ca <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    197e:	a201      	add	r2, pc, #4	; (adr r2, 1984 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    1980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1984:	000019b5 	.word	0x000019b5
    1988:	000019bb 	.word	0x000019bb
    198c:	000019b5 	.word	0x000019b5
    1990:	000019c1 	.word	0x000019c1
    1994:	000019b5 	.word	0x000019b5
    1998:	000019c1 	.word	0x000019c1
    199c:	000019b5 	.word	0x000019b5
    19a0:	000019b5 	.word	0x000019b5
    19a4:	000019c1 	.word	0x000019c1
    19a8:	000019b5 	.word	0x000019b5
    19ac:	000019c1 	.word	0x000019c1
    19b0:	000019b5 	.word	0x000019b5
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    19b4:	4b09      	ldr	r3, [pc, #36]	; (19dc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    19b6:	617b      	str	r3, [r7, #20]
			break;
    19b8:	e008      	b.n	19cc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    19ba:	4b0b      	ldr	r3, [pc, #44]	; (19e8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    19bc:	617b      	str	r3, [r7, #20]
			break;
    19be:	e005      	b.n	19cc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    19c0:	4b08      	ldr	r3, [pc, #32]	; (19e4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    19c2:	617b      	str	r3, [r7, #20]
			break;
    19c4:	e002      	b.n	19cc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    19c6:	bf00      	nop
    19c8:	e000      	b.n	19cc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    19ca:	bf00      	nop
		}
	}

	return sec_in_month;
    19cc:	697b      	ldr	r3, [r7, #20]
}
    19ce:	4618      	mov	r0, r3
    19d0:	3718      	adds	r7, #24
    19d2:	46bd      	mov	sp, r7
    19d4:	bd80      	pop	{r7, pc}
    19d6:	bf00      	nop
    19d8:	000017c5 	.word	0x000017c5
    19dc:	0028de80 	.word	0x0028de80
    19e0:	00263b80 	.word	0x00263b80
    19e4:	00278d00 	.word	0x00278d00
    19e8:	0024ea00 	.word	0x0024ea00

000019ec <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
    19f4:	6039      	str	r1, [r7, #0]
    19f6:	687b      	ldr	r3, [r7, #4]
    19f8:	2b01      	cmp	r3, #1
    19fa:	d10d      	bne.n	1a18 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    19fc:	683b      	ldr	r3, [r7, #0]
    19fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1a02:	4293      	cmp	r3, r2
    1a04:	d108      	bne.n	1a18 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1a06:	4906      	ldr	r1, [pc, #24]	; (1a20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1a08:	4806      	ldr	r0, [pc, #24]	; (1a24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1a0a:	4b07      	ldr	r3, [pc, #28]	; (1a28 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1a0c:	4798      	blx	r3
    1a0e:	4a07      	ldr	r2, [pc, #28]	; (1a2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1a10:	4907      	ldr	r1, [pc, #28]	; (1a30 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1a12:	4804      	ldr	r0, [pc, #16]	; (1a24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1a14:	4b07      	ldr	r3, [pc, #28]	; (1a34 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1a16:	4798      	blx	r3
    1a18:	bf00      	nop
    1a1a:	3708      	adds	r7, #8
    1a1c:	46bd      	mov	sp, r7
    1a1e:	bd80      	pop	{r7, pc}
    1a20:	20002364 	.word	0x20002364
    1a24:	20001a68 	.word	0x20001a68
    1a28:	00001739 	.word	0x00001739
    1a2c:	20000000 	.word	0x20000000
    1a30:	00001775 	.word	0x00001775
    1a34:	0000ed3d 	.word	0x0000ed3d

00001a38 <_GLOBAL__sub_I_ptrCalendarClass>:
    1a38:	b580      	push	{r7, lr}
    1a3a:	af00      	add	r7, sp, #0
    1a3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1a40:	2001      	movs	r0, #1
    1a42:	4b01      	ldr	r3, [pc, #4]	; (1a48 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    1a44:	4798      	blx	r3
    1a46:	bd80      	pop	{r7, pc}
    1a48:	000019ed 	.word	0x000019ed

00001a4c <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    1a4c:	b480      	push	{r7}
    1a4e:	b083      	sub	sp, #12
    1a50:	af00      	add	r7, sp, #0
    1a52:	6078      	str	r0, [r7, #4]
    1a54:	4a04      	ldr	r2, [pc, #16]	; (1a68 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    1a56:	687b      	ldr	r3, [r7, #4]
    1a58:	601a      	str	r2, [r3, #0]
{
} //~D
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	4618      	mov	r0, r3
    1a5e:	370c      	adds	r7, #12
    1a60:	46bd      	mov	sp, r7
    1a62:	bc80      	pop	{r7}
    1a64:	4770      	bx	lr
    1a66:	bf00      	nop
    1a68:	000118dc 	.word	0x000118dc

00001a6c <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    1a6c:	b480      	push	{r7}
    1a6e:	b083      	sub	sp, #12
    1a70:	af00      	add	r7, sp, #0
    1a72:	6078      	str	r0, [r7, #4]
    1a74:	4a04      	ldr	r2, [pc, #16]	; (1a88 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    1a76:	687b      	ldr	r3, [r7, #4]
    1a78:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	4618      	mov	r0, r3
    1a7e:	370c      	adds	r7, #12
    1a80:	46bd      	mov	sp, r7
    1a82:	bc80      	pop	{r7}
    1a84:	4770      	bx	lr
    1a86:	bf00      	nop
    1a88:	000118dc 	.word	0x000118dc

00001a8c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    1a94:	4b04      	ldr	r3, [pc, #16]	; (1aa8 <_ZL7task_cbPK10timer_task+0x1c>)
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	4618      	mov	r0, r3
    1a9a:	4b04      	ldr	r3, [pc, #16]	; (1aac <_ZL7task_cbPK10timer_task+0x20>)
    1a9c:	4798      	blx	r3
}
    1a9e:	bf00      	nop
    1aa0:	3708      	adds	r7, #8
    1aa2:	46bd      	mov	sp, r7
    1aa4:	bd80      	pop	{r7, pc}
    1aa6:	bf00      	nop
    1aa8:	20001b10 	.word	0x20001b10
    1aac:	00001b3b 	.word	0x00001b3b

00001ab0 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
    1ab0:	b480      	push	{r7}
    1ab2:	b083      	sub	sp, #12
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	6078      	str	r0, [r7, #4]
{
	prtTimer=this;
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	687a      	ldr	r2, [r7, #4]
    1abc:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    1abe:	4a08      	ldr	r2, [pc, #32]	; (1ae0 <_ZN11Timer_ClassC1Ev+0x30>)
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1aca:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	4a05      	ldr	r2, [pc, #20]	; (1ae4 <_ZN11Timer_ClassC1Ev+0x34>)
    1ad0:	621a      	str	r2, [r3, #32]
} //Timer_Class
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	4618      	mov	r0, r3
    1ad6:	370c      	adds	r7, #12
    1ad8:	46bd      	mov	sp, r7
    1ada:	bc80      	pop	{r7}
    1adc:	4770      	bx	lr
    1ade:	bf00      	nop
    1ae0:	20001b10 	.word	0x20001b10
    1ae4:	00001a8d 	.word	0x00001a8d

00001ae8 <_ZN11Timer_ClassC1EP16timer_descriptor>:

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    1ae8:	b480      	push	{r7}
    1aea:	b083      	sub	sp, #12
    1aec:	af00      	add	r7, sp, #0
    1aee:	6078      	str	r0, [r7, #4]
    1af0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	683a      	ldr	r2, [r7, #0]
    1af6:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
    1af8:	4a07      	ldr	r2, [pc, #28]	; (1b18 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b04:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	4a04      	ldr	r2, [pc, #16]	; (1b1c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    1b0a:	621a      	str	r2, [r3, #32]
} //Timer_Class
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	4618      	mov	r0, r3
    1b10:	370c      	adds	r7, #12
    1b12:	46bd      	mov	sp, r7
    1b14:	bc80      	pop	{r7}
    1b16:	4770      	bx	lr
    1b18:	20001b10 	.word	0x20001b10
    1b1c:	00001a8d 	.word	0x00001a8d

00001b20 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    1b20:	b480      	push	{r7}
    1b22:	b083      	sub	sp, #12
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	2200      	movs	r2, #0
    1b2c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	4618      	mov	r0, r3
    1b32:	370c      	adds	r7, #12
    1b34:	46bd      	mov	sp, r7
    1b36:	bc80      	pop	{r7}
    1b38:	4770      	bx	lr

00001b3a <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
    1b3a:	b480      	push	{r7}
    1b3c:	b083      	sub	sp, #12
    1b3e:	af00      	add	r7, sp, #0
    1b40:	6078      	str	r0, [r7, #4]
	timeout=1;
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	2201      	movs	r2, #1
    1b46:	705a      	strb	r2, [r3, #1]
}
    1b48:	bf00      	nop
    1b4a:	370c      	adds	r7, #12
    1b4c:	46bd      	mov	sp, r7
    1b4e:	bc80      	pop	{r7}
    1b50:	4770      	bx	lr
	...

00001b54 <_Z41__static_initialization_and_destruction_0ii>:
	return ticks;
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
    1b54:	b580      	push	{r7, lr}
    1b56:	b082      	sub	sp, #8
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
    1b5c:	6039      	str	r1, [r7, #0]
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	2b01      	cmp	r3, #1
    1b62:	d11f      	bne.n	1ba4 <_Z41__static_initialization_and_destruction_0ii+0x50>
    1b64:	683b      	ldr	r3, [r7, #0]
    1b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1b6a:	4293      	cmp	r3, r2
    1b6c:	d11a      	bne.n	1ba4 <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer_Class eventTimer(&TIMER_EVENT);
    1b6e:	490f      	ldr	r1, [pc, #60]	; (1bac <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1b70:	480f      	ldr	r0, [pc, #60]	; (1bb0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1b72:	4b10      	ldr	r3, [pc, #64]	; (1bb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1b74:	4798      	blx	r3
    1b76:	4a10      	ldr	r2, [pc, #64]	; (1bb8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1b78:	4910      	ldr	r1, [pc, #64]	; (1bbc <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1b7a:	480d      	ldr	r0, [pc, #52]	; (1bb0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1b7c:	4b10      	ldr	r3, [pc, #64]	; (1bc0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1b7e:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    1b80:	4910      	ldr	r1, [pc, #64]	; (1bc4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1b82:	4811      	ldr	r0, [pc, #68]	; (1bc8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1b84:	4b0b      	ldr	r3, [pc, #44]	; (1bb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1b86:	4798      	blx	r3
    1b88:	4a0b      	ldr	r2, [pc, #44]	; (1bb8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1b8a:	490c      	ldr	r1, [pc, #48]	; (1bbc <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1b8c:	480e      	ldr	r0, [pc, #56]	; (1bc8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1b8e:	4b0c      	ldr	r3, [pc, #48]	; (1bc0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1b90:	4798      	blx	r3
    1b92:	490e      	ldr	r1, [pc, #56]	; (1bcc <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1b94:	480e      	ldr	r0, [pc, #56]	; (1bd0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1b96:	4b07      	ldr	r3, [pc, #28]	; (1bb4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1b98:	4798      	blx	r3
    1b9a:	4a07      	ldr	r2, [pc, #28]	; (1bb8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1b9c:	4907      	ldr	r1, [pc, #28]	; (1bbc <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1b9e:	480c      	ldr	r0, [pc, #48]	; (1bd0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1ba0:	4b07      	ldr	r3, [pc, #28]	; (1bc0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1ba2:	4798      	blx	r3
    1ba4:	bf00      	nop
    1ba6:	3708      	adds	r7, #8
    1ba8:	46bd      	mov	sp, r7
    1baa:	bd80      	pop	{r7, pc}
    1bac:	20002230 	.word	0x20002230
    1bb0:	20001b14 	.word	0x20001b14
    1bb4:	00001ae9 	.word	0x00001ae9
    1bb8:	20000000 	.word	0x20000000
    1bbc:	00001b21 	.word	0x00001b21
    1bc0:	0000ed3d 	.word	0x0000ed3d
    1bc4:	20002308 	.word	0x20002308
    1bc8:	20001b40 	.word	0x20001b40
    1bcc:	2000224c 	.word	0x2000224c
    1bd0:	20001b6c 	.word	0x20001b6c

00001bd4 <_GLOBAL__sub_I_ptrTimerClass>:
    1bd4:	b580      	push	{r7, lr}
    1bd6:	af00      	add	r7, sp, #0
    1bd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1bdc:	2001      	movs	r0, #1
    1bde:	4b01      	ldr	r3, [pc, #4]	; (1be4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    1be0:	4798      	blx	r3
    1be2:	bd80      	pop	{r7, pc}
    1be4:	00001b55 	.word	0x00001b55

00001be8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1be8:	b480      	push	{r7}
    1bea:	b083      	sub	sp, #12
    1bec:	af00      	add	r7, sp, #0
    1bee:	6078      	str	r0, [r7, #4]
    1bf0:	4a05      	ldr	r2, [pc, #20]	; (1c08 <_ZN5PrintC1Ev+0x20>)
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	601a      	str	r2, [r3, #0]
    1bf6:	687b      	ldr	r3, [r7, #4]
    1bf8:	2200      	movs	r2, #0
    1bfa:	605a      	str	r2, [r3, #4]
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	4618      	mov	r0, r3
    1c00:	370c      	adds	r7, #12
    1c02:	46bd      	mov	sp, r7
    1c04:	bc80      	pop	{r7}
    1c06:	4770      	bx	lr
    1c08:	00011958 	.word	0x00011958

00001c0c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1c0c:	b480      	push	{r7}
    1c0e:	b083      	sub	sp, #12
    1c10:	af00      	add	r7, sp, #0
    1c12:	6078      	str	r0, [r7, #4]
    1c14:	2300      	movs	r3, #0
    1c16:	4618      	mov	r0, r3
    1c18:	370c      	adds	r7, #12
    1c1a:	46bd      	mov	sp, r7
    1c1c:	bc80      	pop	{r7}
    1c1e:	4770      	bx	lr

00001c20 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1c20:	b480      	push	{r7}
    1c22:	b083      	sub	sp, #12
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
    1c28:	bf00      	nop
    1c2a:	370c      	adds	r7, #12
    1c2c:	46bd      	mov	sp, r7
    1c2e:	bc80      	pop	{r7}
    1c30:	4770      	bx	lr
	...

00001c34 <_ZN6StreamC1Ev>:
    Stream() {_timeout=1000;}
    1c34:	b580      	push	{r7, lr}
    1c36:	b082      	sub	sp, #8
    1c38:	af00      	add	r7, sp, #0
    1c3a:	6078      	str	r0, [r7, #4]
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	4618      	mov	r0, r3
    1c40:	4b06      	ldr	r3, [pc, #24]	; (1c5c <_ZN6StreamC1Ev+0x28>)
    1c42:	4798      	blx	r3
    1c44:	4a06      	ldr	r2, [pc, #24]	; (1c60 <_ZN6StreamC1Ev+0x2c>)
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	601a      	str	r2, [r3, #0]
    1c4a:	687b      	ldr	r3, [r7, #4]
    1c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1c50:	609a      	str	r2, [r3, #8]
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	4618      	mov	r0, r3
    1c56:	3708      	adds	r7, #8
    1c58:	46bd      	mov	sp, r7
    1c5a:	bd80      	pop	{r7, pc}
    1c5c:	00001be9 	.word	0x00001be9
    1c60:	0001191c 	.word	0x0001191c

00001c64 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1c64:	b480      	push	{r7}
    1c66:	b083      	sub	sp, #12
    1c68:	af00      	add	r7, sp, #0
    1c6a:	4603      	mov	r3, r0
    1c6c:	603a      	str	r2, [r7, #0]
    1c6e:	71fb      	strb	r3, [r7, #7]
    1c70:	460b      	mov	r3, r1
    1c72:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    1c74:	4b08      	ldr	r3, [pc, #32]	; (1c98 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1c76:	681b      	ldr	r3, [r3, #0]
    1c78:	2201      	movs	r2, #1
    1c7a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
    1c7c:	4b06      	ldr	r3, [pc, #24]	; (1c98 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	2201      	movs	r2, #1
    1c82:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    1c84:	4b04      	ldr	r3, [pc, #16]	; (1c98 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	2201      	movs	r2, #1
    1c8a:	741a      	strb	r2, [r3, #16]


	return false;
    1c8c:	2300      	movs	r3, #0
}
    1c8e:	4618      	mov	r0, r3
    1c90:	370c      	adds	r7, #12
    1c92:	46bd      	mov	sp, r7
    1c94:	bc80      	pop	{r7}
    1c96:	4770      	bx	lr
    1c98:	20001b98 	.word	0x20001b98

00001c9c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1c9c:	b480      	push	{r7}
    1c9e:	b083      	sub	sp, #12
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	4603      	mov	r3, r0
    1ca4:	603a      	str	r2, [r7, #0]
    1ca6:	71fb      	strb	r3, [r7, #7]
    1ca8:	460b      	mov	r3, r1
    1caa:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    1cac:	4b08      	ldr	r3, [pc, #32]	; (1cd0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1cae:	681b      	ldr	r3, [r3, #0]
    1cb0:	2201      	movs	r2, #1
    1cb2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    1cb4:	4b06      	ldr	r3, [pc, #24]	; (1cd0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1cb6:	681b      	ldr	r3, [r3, #0]
    1cb8:	2201      	movs	r2, #1
    1cba:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    1cbc:	4b04      	ldr	r3, [pc, #16]	; (1cd0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1cbe:	681b      	ldr	r3, [r3, #0]
    1cc0:	2201      	movs	r2, #1
    1cc2:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    1cc4:	2300      	movs	r3, #0
}
    1cc6:	4618      	mov	r0, r3
    1cc8:	370c      	adds	r7, #12
    1cca:	46bd      	mov	sp, r7
    1ccc:	bc80      	pop	{r7}
    1cce:	4770      	bx	lr
    1cd0:	20001b98 	.word	0x20001b98

00001cd4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    1cd4:	b580      	push	{r7, lr}
    1cd6:	b082      	sub	sp, #8
    1cd8:	af00      	add	r7, sp, #0
    1cda:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    1cdc:	793b      	ldrb	r3, [r7, #4]
    1cde:	f003 0301 	and.w	r3, r3, #1
    1ce2:	b2db      	uxtb	r3, r3
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d013      	beq.n	1d10 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    1ce8:	490c      	ldr	r1, [pc, #48]	; (1d1c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    1cea:	2000      	movs	r0, #0
    1cec:	4b0c      	ldr	r3, [pc, #48]	; (1d20 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    1cee:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    1cf0:	490c      	ldr	r1, [pc, #48]	; (1d24 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    1cf2:	2001      	movs	r0, #1
    1cf4:	4b0a      	ldr	r3, [pc, #40]	; (1d20 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    1cf6:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    1cf8:	4b0b      	ldr	r3, [pc, #44]	; (1d28 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1cfa:	681b      	ldr	r3, [r3, #0]
    1cfc:	2201      	movs	r2, #1
    1cfe:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    1d00:	4b09      	ldr	r3, [pc, #36]	; (1d28 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1d02:	681b      	ldr	r3, [r3, #0]
    1d04:	2201      	movs	r2, #1
    1d06:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
    1d08:	4b07      	ldr	r3, [pc, #28]	; (1d28 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1d0a:	681b      	ldr	r3, [r3, #0]
    1d0c:	2201      	movs	r2, #1
    1d0e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    1d10:	2300      	movs	r3, #0
}
    1d12:	4618      	mov	r0, r3
    1d14:	3708      	adds	r7, #8
    1d16:	46bd      	mov	sp, r7
    1d18:	bd80      	pop	{r7, pc}
    1d1a:	bf00      	nop
    1d1c:	00001c65 	.word	0x00001c65
    1d20:	0000dcc1 	.word	0x0000dcc1
    1d24:	00001c9d 	.word	0x00001c9d
    1d28:	20001b98 	.word	0x20001b98

00001d2c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    1d2c:	b580      	push	{r7, lr}
    1d2e:	b082      	sub	sp, #8
    1d30:	af00      	add	r7, sp, #0
    1d32:	6078      	str	r0, [r7, #4]
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	4618      	mov	r0, r3
    1d38:	4b0a      	ldr	r3, [pc, #40]	; (1d64 <_ZN9CDC_ClassC1Ev+0x38>)
    1d3a:	4798      	blx	r3
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	3310      	adds	r3, #16
    1d40:	4618      	mov	r0, r3
    1d42:	4b09      	ldr	r3, [pc, #36]	; (1d68 <_ZN9CDC_ClassC1Ev+0x3c>)
    1d44:	4798      	blx	r3
    1d46:	4a09      	ldr	r2, [pc, #36]	; (1d6c <_ZN9CDC_ClassC1Ev+0x40>)
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	f04f 32ff 	mov.w	r2, #4294967295
    1d52:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    1d54:	4a06      	ldr	r2, [pc, #24]	; (1d70 <_ZN9CDC_ClassC1Ev+0x44>)
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	4618      	mov	r0, r3
    1d5e:	3708      	adds	r7, #8
    1d60:	46bd      	mov	sp, r7
    1d62:	bd80      	pop	{r7, pc}
    1d64:	00001c35 	.word	0x00001c35
    1d68:	000024a5 	.word	0x000024a5
    1d6c:	000118ec 	.word	0x000118ec
    1d70:	20001b98 	.word	0x20001b98

00001d74 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    1d74:	b580      	push	{r7, lr}
    1d76:	b082      	sub	sp, #8
    1d78:	af00      	add	r7, sp, #0
    1d7a:	6078      	str	r0, [r7, #4]
    1d7c:	4a06      	ldr	r2, [pc, #24]	; (1d98 <_ZN9CDC_ClassD1Ev+0x24>)
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	601a      	str	r2, [r3, #0]
    1d82:	687b      	ldr	r3, [r7, #4]
    1d84:	3310      	adds	r3, #16
    1d86:	4618      	mov	r0, r3
    1d88:	4b04      	ldr	r3, [pc, #16]	; (1d9c <_ZN9CDC_ClassD1Ev+0x28>)
    1d8a:	4798      	blx	r3
{
} //~CDC_Class
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	4618      	mov	r0, r3
    1d90:	3708      	adds	r7, #8
    1d92:	46bd      	mov	sp, r7
    1d94:	bd80      	pop	{r7, pc}
    1d96:	bf00      	nop
    1d98:	000118ec 	.word	0x000118ec
    1d9c:	000024c5 	.word	0x000024c5

00001da0 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    1da0:	b580      	push	{r7, lr}
    1da2:	b082      	sub	sp, #8
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
	
	OnInit();
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	3310      	adds	r3, #16
    1dac:	4618      	mov	r0, r3
    1dae:	4b06      	ldr	r3, [pc, #24]	; (1dc8 <_ZN9CDC_Class4InitEv+0x28>)
    1db0:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    1db2:	4906      	ldr	r1, [pc, #24]	; (1dcc <_ZN9CDC_Class4InitEv+0x2c>)
    1db4:	2003      	movs	r0, #3
    1db6:	4b06      	ldr	r3, [pc, #24]	; (1dd0 <_ZN9CDC_Class4InitEv+0x30>)
    1db8:	4798      	blx	r3
	
		
	if (plugged)
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	7c1b      	ldrb	r3, [r3, #16]
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	

}
    1dbe:	bf00      	nop
    1dc0:	3708      	adds	r7, #8
    1dc2:	46bd      	mov	sp, r7
    1dc4:	bd80      	pop	{r7, pc}
    1dc6:	bf00      	nop
    1dc8:	000024d9 	.word	0x000024d9
    1dcc:	00001cd5 	.word	0x00001cd5
    1dd0:	0000dcc1 	.word	0x0000dcc1

00001dd4 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    1dd4:	b580      	push	{r7, lr}
    1dd6:	b082      	sub	sp, #8
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    1ddc:	4b03      	ldr	r3, [pc, #12]	; (1dec <_ZN9CDC_Class9IsEnabledEv+0x18>)
    1dde:	4798      	blx	r3
    1de0:	4603      	mov	r3, r0
	
}
    1de2:	4618      	mov	r0, r3
    1de4:	3708      	adds	r7, #8
    1de6:	46bd      	mov	sp, r7
    1de8:	bd80      	pop	{r7, pc}
    1dea:	bf00      	nop
    1dec:	0000dd39 	.word	0x0000dd39

00001df0 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b084      	sub	sp, #16
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	699b      	ldr	r3, [r3, #24]
    1dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
    1e00:	bf14      	ite	ne
    1e02:	2301      	movne	r3, #1
    1e04:	2300      	moveq	r3, #0
    1e06:	b2db      	uxtb	r3, r3
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d002      	beq.n	1e12 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	699b      	ldr	r3, [r3, #24]
    1e10:	e011      	b.n	1e36 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	681b      	ldr	r3, [r3, #0]
    1e16:	331c      	adds	r3, #28
    1e18:	681b      	ldr	r3, [r3, #0]
    1e1a:	f107 010f 	add.w	r1, r7, #15
    1e1e:	2201      	movs	r2, #1
    1e20:	6878      	ldr	r0, [r7, #4]
    1e22:	4798      	blx	r3
    1e24:	4602      	mov	r2, r0
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    1e2a:	7bfb      	ldrb	r3, [r7, #15]
    1e2c:	461a      	mov	r2, r3
    1e2e:	687b      	ldr	r3, [r7, #4]
    1e30:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	699b      	ldr	r3, [r3, #24]
}
    1e36:	4618      	mov	r0, r3
    1e38:	3710      	adds	r7, #16
    1e3a:	46bd      	mov	sp, r7
    1e3c:	bd80      	pop	{r7, pc}
	...

00001e40 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    1e40:	b580      	push	{r7, lr}
    1e42:	b086      	sub	sp, #24
    1e44:	af00      	add	r7, sp, #0
    1e46:	60f8      	str	r0, [r7, #12]
    1e48:	60b9      	str	r1, [r7, #8]
    1e4a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    1e4c:	68fb      	ldr	r3, [r7, #12]
    1e4e:	2200      	movs	r2, #0
    1e50:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    1e52:	687b      	ldr	r3, [r7, #4]
    1e54:	4619      	mov	r1, r3
    1e56:	68b8      	ldr	r0, [r7, #8]
    1e58:	4b08      	ldr	r3, [pc, #32]	; (1e7c <_ZN9CDC_Class8readDataEPvl+0x3c>)
    1e5a:	4798      	blx	r3
    1e5c:	4603      	mov	r3, r0
    1e5e:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    1e60:	68fb      	ldr	r3, [r7, #12]
    1e62:	7d5b      	ldrb	r3, [r3, #21]
    1e64:	b2db      	uxtb	r3, r3
    1e66:	f083 0301 	eor.w	r3, r3, #1
    1e6a:	b2db      	uxtb	r3, r3
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d000      	beq.n	1e72 <_ZN9CDC_Class8readDataEPvl+0x32>
    1e70:	e7f6      	b.n	1e60 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    1e72:	7dfb      	ldrb	r3, [r7, #23]
}
    1e74:	4618      	mov	r0, r3
    1e76:	3718      	adds	r7, #24
    1e78:	46bd      	mov	sp, r7
    1e7a:	bd80      	pop	{r7, pc}
    1e7c:	0000dc15 	.word	0x0000dc15

00001e80 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b084      	sub	sp, #16
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	2200      	movs	r2, #0
    1e8c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    1e8e:	f107 030f 	add.w	r3, r7, #15
    1e92:	2101      	movs	r1, #1
    1e94:	4618      	mov	r0, r3
    1e96:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <_ZN9CDC_Class4readEv+0x38>)
    1e98:	4798      	blx	r3
	while(!rxReady);
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	7d5b      	ldrb	r3, [r3, #21]
    1e9e:	b2db      	uxtb	r3, r3
    1ea0:	f083 0301 	eor.w	r3, r3, #1
    1ea4:	b2db      	uxtb	r3, r3
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d000      	beq.n	1eac <_ZN9CDC_Class4readEv+0x2c>
    1eaa:	e7f6      	b.n	1e9a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    1eac:	7bfb      	ldrb	r3, [r7, #15]
}
    1eae:	4618      	mov	r0, r3
    1eb0:	3710      	adds	r7, #16
    1eb2:	46bd      	mov	sp, r7
    1eb4:	bd80      	pop	{r7, pc}
    1eb6:	bf00      	nop
    1eb8:	0000dc15 	.word	0x0000dc15

00001ebc <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b082      	sub	sp, #8
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	331c      	adds	r3, #28
    1ec8:	2140      	movs	r1, #64	; 0x40
    1eca:	4618      	mov	r0, r3
    1ecc:	4b02      	ldr	r3, [pc, #8]	; (1ed8 <_ZN9CDC_Class5flushEv+0x1c>)
    1ece:	4798      	blx	r3
}
    1ed0:	bf00      	nop
    1ed2:	3708      	adds	r7, #8
    1ed4:	46bd      	mov	sp, r7
    1ed6:	bd80      	pop	{r7, pc}
    1ed8:	0000dc59 	.word	0x0000dc59

00001edc <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    1edc:	b580      	push	{r7, lr}
    1ede:	b082      	sub	sp, #8
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    1ee4:	4b02      	ldr	r3, [pc, #8]	; (1ef0 <_ZN9CDC_Class5clearEv+0x14>)
    1ee6:	4798      	blx	r3
}
    1ee8:	bf00      	nop
    1eea:	3708      	adds	r7, #8
    1eec:	46bd      	mov	sp, r7
    1eee:	bd80      	pop	{r7, pc}
    1ef0:	0000dc9d 	.word	0x0000dc9d

00001ef4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    1ef4:	b580      	push	{r7, lr}
    1ef6:	b082      	sub	sp, #8
    1ef8:	af00      	add	r7, sp, #0
    1efa:	6078      	str	r0, [r7, #4]
    1efc:	460b      	mov	r3, r1
    1efe:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	7d1b      	ldrb	r3, [r3, #20]
    1f04:	b2db      	uxtb	r3, r3
    1f06:	f083 0301 	eor.w	r3, r3, #1
    1f0a:	b2db      	uxtb	r3, r3
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d000      	beq.n	1f12 <_ZN9CDC_Class5writeEh+0x1e>
    1f10:	e7f6      	b.n	1f00 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    1f12:	687b      	ldr	r3, [r7, #4]
    1f14:	681b      	ldr	r3, [r3, #0]
    1f16:	3324      	adds	r3, #36	; 0x24
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	1cf9      	adds	r1, r7, #3
    1f1c:	2201      	movs	r2, #1
    1f1e:	6878      	ldr	r0, [r7, #4]
    1f20:	4798      	blx	r3
    1f22:	4603      	mov	r3, r0
}
    1f24:	4618      	mov	r0, r3
    1f26:	3708      	adds	r7, #8
    1f28:	46bd      	mov	sp, r7
    1f2a:	bd80      	pop	{r7, pc}

00001f2c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b086      	sub	sp, #24
    1f30:	af00      	add	r7, sp, #0
    1f32:	60f8      	str	r0, [r7, #12]
    1f34:	60b9      	str	r1, [r7, #8]
    1f36:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    1f38:	68fb      	ldr	r3, [r7, #12]
    1f3a:	2200      	movs	r2, #0
    1f3c:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
    1f3e:	68fb      	ldr	r3, [r7, #12]
    1f40:	3310      	adds	r3, #16
    1f42:	4618      	mov	r0, r3
    1f44:	4b14      	ldr	r3, [pc, #80]	; (1f98 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    1f46:	4798      	blx	r3
    1f48:	4603      	mov	r3, r0
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d01e      	beq.n	1f8c <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	4619      	mov	r1, r3
    1f52:	68b8      	ldr	r0, [r7, #8]
    1f54:	4b11      	ldr	r3, [pc, #68]	; (1f9c <_ZN9CDC_Class9writeDataEPKvl+0x70>)
    1f56:	4798      	blx	r3
    1f58:	4603      	mov	r3, r0
    1f5a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
    1f5c:	68fb      	ldr	r3, [r7, #12]
    1f5e:	7d1b      	ldrb	r3, [r3, #20]
    1f60:	b2db      	uxtb	r3, r3
    1f62:	f083 0301 	eor.w	r3, r3, #1
    1f66:	b2db      	uxtb	r3, r3
    1f68:	2b00      	cmp	r3, #0
    1f6a:	d006      	beq.n	1f7a <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	7c5b      	ldrb	r3, [r3, #17]
    1f70:	b2db      	uxtb	r3, r3
    1f72:	2b00      	cmp	r3, #0
    1f74:	d001      	beq.n	1f7a <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    1f76:	2301      	movs	r3, #1
    1f78:	e000      	b.n	1f7c <_ZN9CDC_Class9writeDataEPKvl+0x50>
    1f7a:	2300      	movs	r3, #0
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d000      	beq.n	1f82 <_ZN9CDC_Class9writeDataEPKvl+0x56>
    1f80:	e7ec      	b.n	1f5c <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTimer.Stop();
    1f82:	4807      	ldr	r0, [pc, #28]	; (1fa0 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
    1f84:	4b07      	ldr	r3, [pc, #28]	; (1fa4 <_ZN9CDC_Class9writeDataEPKvl+0x78>)
    1f86:	4798      	blx	r3
		return r;
    1f88:	697b      	ldr	r3, [r7, #20]
    1f8a:	e000      	b.n	1f8e <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
    1f8c:	2300      	movs	r3, #0
	}
	

}
    1f8e:	4618      	mov	r0, r3
    1f90:	3718      	adds	r7, #24
    1f92:	46bd      	mov	sp, r7
    1f94:	bd80      	pop	{r7, pc}
    1f96:	bf00      	nop
    1f98:	00002575 	.word	0x00002575
    1f9c:	0000dc59 	.word	0x0000dc59
    1fa0:	20001c04 	.word	0x20001c04
    1fa4:	00002735 	.word	0x00002735

00001fa8 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    1fa8:	b580      	push	{r7, lr}
    1faa:	b086      	sub	sp, #24
    1fac:	af00      	add	r7, sp, #0
    1fae:	60f8      	str	r0, [r7, #12]
    1fb0:	60b9      	str	r1, [r7, #8]
    1fb2:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    1fb4:	68fb      	ldr	r3, [r7, #12]
    1fb6:	2200      	movs	r2, #0
    1fb8:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (CheckTerminal(size)){
    1fba:	68fb      	ldr	r3, [r7, #12]
    1fbc:	3310      	adds	r3, #16
    1fbe:	6879      	ldr	r1, [r7, #4]
    1fc0:	4618      	mov	r0, r3
    1fc2:	4b14      	ldr	r3, [pc, #80]	; (2014 <_ZN9CDC_Class5writeEPKhj+0x6c>)
    1fc4:	4798      	blx	r3
    1fc6:	4603      	mov	r3, r0
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d01c      	beq.n	2006 <_ZN9CDC_Class5writeEPKhj+0x5e>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    1fcc:	6879      	ldr	r1, [r7, #4]
    1fce:	68b8      	ldr	r0, [r7, #8]
    1fd0:	4b11      	ldr	r3, [pc, #68]	; (2018 <_ZN9CDC_Class5writeEPKhj+0x70>)
    1fd2:	4798      	blx	r3
    1fd4:	4603      	mov	r3, r0
    1fd6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
    1fd8:	68fb      	ldr	r3, [r7, #12]
    1fda:	7d1b      	ldrb	r3, [r3, #20]
    1fdc:	b2db      	uxtb	r3, r3
    1fde:	f083 0301 	eor.w	r3, r3, #1
    1fe2:	b2db      	uxtb	r3, r3
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d006      	beq.n	1ff6 <_ZN9CDC_Class5writeEPKhj+0x4e>
    1fe8:	68fb      	ldr	r3, [r7, #12]
    1fea:	7c5b      	ldrb	r3, [r3, #17]
    1fec:	b2db      	uxtb	r3, r3
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d001      	beq.n	1ff6 <_ZN9CDC_Class5writeEPKhj+0x4e>
    1ff2:	2301      	movs	r3, #1
    1ff4:	e000      	b.n	1ff8 <_ZN9CDC_Class5writeEPKhj+0x50>
    1ff6:	2300      	movs	r3, #0
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d000      	beq.n	1ffe <_ZN9CDC_Class5writeEPKhj+0x56>
    1ffc:	e7ec      	b.n	1fd8 <_ZN9CDC_Class5writeEPKhj+0x30>
		//while((!txReady));
		usbTimer.Stop();
    1ffe:	4807      	ldr	r0, [pc, #28]	; (201c <_ZN9CDC_Class5writeEPKhj+0x74>)
    2000:	4b07      	ldr	r3, [pc, #28]	; (2020 <_ZN9CDC_Class5writeEPKhj+0x78>)
    2002:	4798      	blx	r3
    2004:	e001      	b.n	200a <_ZN9CDC_Class5writeEPKhj+0x62>
	}else{
 		r=0;
    2006:	2300      	movs	r3, #0
    2008:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    200a:	697b      	ldr	r3, [r7, #20]
}
    200c:	4618      	mov	r0, r3
    200e:	3718      	adds	r7, #24
    2010:	46bd      	mov	sp, r7
    2012:	bd80      	pop	{r7, pc}
    2014:	000025ed 	.word	0x000025ed
    2018:	0000dc59 	.word	0x0000dc59
    201c:	20001c04 	.word	0x20001c04
    2020:	00002735 	.word	0x00002735

00002024 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    2024:	b480      	push	{r7}
    2026:	b083      	sub	sp, #12
    2028:	af00      	add	r7, sp, #0
    202a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	7d5b      	ldrb	r3, [r3, #21]
    2030:	b2db      	uxtb	r3, r3
    2032:	2b00      	cmp	r3, #0
    2034:	d006      	beq.n	2044 <_ZN9CDC_Class9availableEv+0x20>
    2036:	687b      	ldr	r3, [r7, #4]
    2038:	7d1b      	ldrb	r3, [r3, #20]
    203a:	b2db      	uxtb	r3, r3
    203c:	2b00      	cmp	r3, #0
    203e:	d001      	beq.n	2044 <_ZN9CDC_Class9availableEv+0x20>
    2040:	2301      	movs	r3, #1
    2042:	e000      	b.n	2046 <_ZN9CDC_Class9availableEv+0x22>
    2044:	2300      	movs	r3, #0
    2046:	2b00      	cmp	r3, #0
    2048:	d001      	beq.n	204e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    204a:	2301      	movs	r3, #1
    204c:	e000      	b.n	2050 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    204e:	2300      	movs	r3, #0
	}
	
}
    2050:	4618      	mov	r0, r3
    2052:	370c      	adds	r7, #12
    2054:	46bd      	mov	sp, r7
    2056:	bc80      	pop	{r7}
    2058:	4770      	bx	lr
	...

0000205c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    205c:	b580      	push	{r7, lr}
    205e:	b082      	sub	sp, #8
    2060:	af00      	add	r7, sp, #0
    2062:	6078      	str	r0, [r7, #4]
    2064:	6039      	str	r1, [r7, #0]
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	2b01      	cmp	r3, #1
    206a:	d10c      	bne.n	2086 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    206c:	683b      	ldr	r3, [r7, #0]
    206e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2072:	4293      	cmp	r3, r2
    2074:	d107      	bne.n	2086 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2076:	4806      	ldr	r0, [pc, #24]	; (2090 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2078:	4b06      	ldr	r3, [pc, #24]	; (2094 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    207a:	4798      	blx	r3
    207c:	4a06      	ldr	r2, [pc, #24]	; (2098 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    207e:	4907      	ldr	r1, [pc, #28]	; (209c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2080:	4803      	ldr	r0, [pc, #12]	; (2090 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2082:	4b07      	ldr	r3, [pc, #28]	; (20a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2084:	4798      	blx	r3
    2086:	bf00      	nop
    2088:	3708      	adds	r7, #8
    208a:	46bd      	mov	sp, r7
    208c:	bd80      	pop	{r7, pc}
    208e:	bf00      	nop
    2090:	20001b9c 	.word	0x20001b9c
    2094:	00001d2d 	.word	0x00001d2d
    2098:	20000000 	.word	0x20000000
    209c:	00001d75 	.word	0x00001d75
    20a0:	0000ed3d 	.word	0x0000ed3d

000020a4 <_GLOBAL__sub_I_ptrCDCClass>:
    20a4:	b580      	push	{r7, lr}
    20a6:	af00      	add	r7, sp, #0
    20a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    20ac:	2001      	movs	r0, #1
    20ae:	4b01      	ldr	r3, [pc, #4]	; (20b4 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    20b0:	4798      	blx	r3
    20b2:	bd80      	pop	{r7, pc}
    20b4:	0000205d 	.word	0x0000205d

000020b8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    20b8:	b590      	push	{r4, r7, lr}
    20ba:	b083      	sub	sp, #12
    20bc:	af00      	add	r7, sp, #0
    20be:	6078      	str	r0, [r7, #4]
    20c0:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    20c2:	683b      	ldr	r3, [r7, #0]
    20c4:	2b00      	cmp	r3, #0
    20c6:	d101      	bne.n	20cc <_ZN5Print5writeEPKc+0x14>
    20c8:	2300      	movs	r3, #0
    20ca:	e00c      	b.n	20e6 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	3304      	adds	r3, #4
    20d2:	681c      	ldr	r4, [r3, #0]
    20d4:	6838      	ldr	r0, [r7, #0]
    20d6:	4b06      	ldr	r3, [pc, #24]	; (20f0 <_ZN5Print5writeEPKc+0x38>)
    20d8:	4798      	blx	r3
    20da:	4603      	mov	r3, r0
    20dc:	461a      	mov	r2, r3
    20de:	6839      	ldr	r1, [r7, #0]
    20e0:	6878      	ldr	r0, [r7, #4]
    20e2:	47a0      	blx	r4
    20e4:	4603      	mov	r3, r0
    }
    20e6:	4618      	mov	r0, r3
    20e8:	370c      	adds	r7, #12
    20ea:	46bd      	mov	sp, r7
    20ec:	bd90      	pop	{r4, r7, pc}
    20ee:	bf00      	nop
    20f0:	00010a41 	.word	0x00010a41

000020f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    20f4:	b580      	push	{r7, lr}
    20f6:	b086      	sub	sp, #24
    20f8:	af00      	add	r7, sp, #0
    20fa:	60f8      	str	r0, [r7, #12]
    20fc:	60b9      	str	r1, [r7, #8]
    20fe:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    2100:	2300      	movs	r3, #0
    2102:	617b      	str	r3, [r7, #20]
  while (size--) {
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	1e5a      	subs	r2, r3, #1
    2108:	607a      	str	r2, [r7, #4]
    210a:	2b00      	cmp	r3, #0
    210c:	bf14      	ite	ne
    210e:	2301      	movne	r3, #1
    2110:	2300      	moveq	r3, #0
    2112:	b2db      	uxtb	r3, r3
    2114:	2b00      	cmp	r3, #0
    2116:	d016      	beq.n	2146 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    2118:	68fb      	ldr	r3, [r7, #12]
    211a:	681b      	ldr	r3, [r3, #0]
    211c:	681a      	ldr	r2, [r3, #0]
    211e:	68bb      	ldr	r3, [r7, #8]
    2120:	1c59      	adds	r1, r3, #1
    2122:	60b9      	str	r1, [r7, #8]
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	4619      	mov	r1, r3
    2128:	68f8      	ldr	r0, [r7, #12]
    212a:	4790      	blx	r2
    212c:	4603      	mov	r3, r0
    212e:	2b00      	cmp	r3, #0
    2130:	bf14      	ite	ne
    2132:	2301      	movne	r3, #1
    2134:	2300      	moveq	r3, #0
    2136:	b2db      	uxtb	r3, r3
    2138:	2b00      	cmp	r3, #0
    213a:	d003      	beq.n	2144 <_ZN5Print5writeEPKhj+0x50>
    213c:	697b      	ldr	r3, [r7, #20]
    213e:	3301      	adds	r3, #1
    2140:	617b      	str	r3, [r7, #20]
  while (size--) {
    2142:	e7df      	b.n	2104 <_ZN5Print5writeEPKhj+0x10>
    else break;
    2144:	bf00      	nop
  }
  return n;
    2146:	697b      	ldr	r3, [r7, #20]
}
    2148:	4618      	mov	r0, r3
    214a:	3718      	adds	r7, #24
    214c:	46bd      	mov	sp, r7
    214e:	bd80      	pop	{r7, pc}

00002150 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    2150:	b580      	push	{r7, lr}
    2152:	b082      	sub	sp, #8
    2154:	af00      	add	r7, sp, #0
    2156:	6078      	str	r0, [r7, #4]
    2158:	6039      	str	r1, [r7, #0]
  return write(str);
    215a:	6839      	ldr	r1, [r7, #0]
    215c:	6878      	ldr	r0, [r7, #4]
    215e:	4b03      	ldr	r3, [pc, #12]	; (216c <_ZN5Print5printEPKc+0x1c>)
    2160:	4798      	blx	r3
    2162:	4603      	mov	r3, r0
}
    2164:	4618      	mov	r0, r3
    2166:	3708      	adds	r7, #8
    2168:	46bd      	mov	sp, r7
    216a:	bd80      	pop	{r7, pc}
    216c:	000020b9 	.word	0x000020b9

00002170 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    2170:	b580      	push	{r7, lr}
    2172:	b082      	sub	sp, #8
    2174:	af00      	add	r7, sp, #0
    2176:	6078      	str	r0, [r7, #4]
    2178:	460b      	mov	r3, r1
    217a:	70fb      	strb	r3, [r7, #3]
  return write(c);
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	681b      	ldr	r3, [r3, #0]
    2180:	681b      	ldr	r3, [r3, #0]
    2182:	78fa      	ldrb	r2, [r7, #3]
    2184:	4611      	mov	r1, r2
    2186:	6878      	ldr	r0, [r7, #4]
    2188:	4798      	blx	r3
    218a:	4603      	mov	r3, r0
}
    218c:	4618      	mov	r0, r3
    218e:	3708      	adds	r7, #8
    2190:	46bd      	mov	sp, r7
    2192:	bd80      	pop	{r7, pc}

00002194 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2194:	b580      	push	{r7, lr}
    2196:	b084      	sub	sp, #16
    2198:	af00      	add	r7, sp, #0
    219a:	60f8      	str	r0, [r7, #12]
    219c:	60b9      	str	r1, [r7, #8]
    219e:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    21a0:	687a      	ldr	r2, [r7, #4]
    21a2:	68b9      	ldr	r1, [r7, #8]
    21a4:	68f8      	ldr	r0, [r7, #12]
    21a6:	4b03      	ldr	r3, [pc, #12]	; (21b4 <_ZN5Print5printEii+0x20>)
    21a8:	4798      	blx	r3
    21aa:	4603      	mov	r3, r0
}
    21ac:	4618      	mov	r0, r3
    21ae:	3710      	adds	r7, #16
    21b0:	46bd      	mov	sp, r7
    21b2:	bd80      	pop	{r7, pc}
    21b4:	000021b9 	.word	0x000021b9

000021b8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    21b8:	b580      	push	{r7, lr}
    21ba:	b086      	sub	sp, #24
    21bc:	af00      	add	r7, sp, #0
    21be:	60f8      	str	r0, [r7, #12]
    21c0:	60b9      	str	r1, [r7, #8]
    21c2:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d109      	bne.n	21de <_ZN5Print5printEli+0x26>
    return write(n);
    21ca:	68fb      	ldr	r3, [r7, #12]
    21cc:	681b      	ldr	r3, [r3, #0]
    21ce:	681b      	ldr	r3, [r3, #0]
    21d0:	68ba      	ldr	r2, [r7, #8]
    21d2:	b2d2      	uxtb	r2, r2
    21d4:	4611      	mov	r1, r2
    21d6:	68f8      	ldr	r0, [r7, #12]
    21d8:	4798      	blx	r3
    21da:	4603      	mov	r3, r0
    21dc:	e028      	b.n	2230 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	2b0a      	cmp	r3, #10
    21e2:	d11d      	bne.n	2220 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    21e4:	68bb      	ldr	r3, [r7, #8]
    21e6:	2b00      	cmp	r3, #0
    21e8:	da12      	bge.n	2210 <_ZN5Print5printEli+0x58>
      int t = print('-');
    21ea:	212d      	movs	r1, #45	; 0x2d
    21ec:	68f8      	ldr	r0, [r7, #12]
    21ee:	4b12      	ldr	r3, [pc, #72]	; (2238 <_ZN5Print5printEli+0x80>)
    21f0:	4798      	blx	r3
    21f2:	4603      	mov	r3, r0
    21f4:	617b      	str	r3, [r7, #20]
      n = -n;
    21f6:	68bb      	ldr	r3, [r7, #8]
    21f8:	425b      	negs	r3, r3
    21fa:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    21fc:	68bb      	ldr	r3, [r7, #8]
    21fe:	220a      	movs	r2, #10
    2200:	4619      	mov	r1, r3
    2202:	68f8      	ldr	r0, [r7, #12]
    2204:	4b0d      	ldr	r3, [pc, #52]	; (223c <_ZN5Print5printEli+0x84>)
    2206:	4798      	blx	r3
    2208:	4602      	mov	r2, r0
    220a:	697b      	ldr	r3, [r7, #20]
    220c:	4413      	add	r3, r2
    220e:	e00f      	b.n	2230 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    2210:	68bb      	ldr	r3, [r7, #8]
    2212:	220a      	movs	r2, #10
    2214:	4619      	mov	r1, r3
    2216:	68f8      	ldr	r0, [r7, #12]
    2218:	4b08      	ldr	r3, [pc, #32]	; (223c <_ZN5Print5printEli+0x84>)
    221a:	4798      	blx	r3
    221c:	4603      	mov	r3, r0
    221e:	e007      	b.n	2230 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    2220:	68bb      	ldr	r3, [r7, #8]
    2222:	687a      	ldr	r2, [r7, #4]
    2224:	b2d2      	uxtb	r2, r2
    2226:	4619      	mov	r1, r3
    2228:	68f8      	ldr	r0, [r7, #12]
    222a:	4b04      	ldr	r3, [pc, #16]	; (223c <_ZN5Print5printEli+0x84>)
    222c:	4798      	blx	r3
    222e:	4603      	mov	r3, r0
  }
}
    2230:	4618      	mov	r0, r3
    2232:	3718      	adds	r7, #24
    2234:	46bd      	mov	sp, r7
    2236:	bd80      	pop	{r7, pc}
    2238:	00002171 	.word	0x00002171
    223c:	000022e1 	.word	0x000022e1

00002240 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    2240:	b580      	push	{r7, lr}
    2242:	b084      	sub	sp, #16
    2244:	af00      	add	r7, sp, #0
    2246:	60f8      	str	r0, [r7, #12]
    2248:	60b9      	str	r1, [r7, #8]
    224a:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    224c:	687b      	ldr	r3, [r7, #4]
    224e:	2b00      	cmp	r3, #0
    2250:	d109      	bne.n	2266 <_ZN5Print5printEmi+0x26>
    2252:	68fb      	ldr	r3, [r7, #12]
    2254:	681b      	ldr	r3, [r3, #0]
    2256:	681b      	ldr	r3, [r3, #0]
    2258:	68ba      	ldr	r2, [r7, #8]
    225a:	b2d2      	uxtb	r2, r2
    225c:	4611      	mov	r1, r2
    225e:	68f8      	ldr	r0, [r7, #12]
    2260:	4798      	blx	r3
    2262:	4603      	mov	r3, r0
    2264:	e007      	b.n	2276 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	b2db      	uxtb	r3, r3
    226a:	461a      	mov	r2, r3
    226c:	68b9      	ldr	r1, [r7, #8]
    226e:	68f8      	ldr	r0, [r7, #12]
    2270:	4b03      	ldr	r3, [pc, #12]	; (2280 <_ZN5Print5printEmi+0x40>)
    2272:	4798      	blx	r3
    2274:	4603      	mov	r3, r0
}
    2276:	4618      	mov	r0, r3
    2278:	3710      	adds	r7, #16
    227a:	46bd      	mov	sp, r7
    227c:	bd80      	pop	{r7, pc}
    227e:	bf00      	nop
    2280:	000022e1 	.word	0x000022e1

00002284 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    2284:	b580      	push	{r7, lr}
    2286:	b082      	sub	sp, #8
    2288:	af00      	add	r7, sp, #0
    228a:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    228c:	4904      	ldr	r1, [pc, #16]	; (22a0 <_ZN5Print7printlnEv+0x1c>)
    228e:	6878      	ldr	r0, [r7, #4]
    2290:	4b04      	ldr	r3, [pc, #16]	; (22a4 <_ZN5Print7printlnEv+0x20>)
    2292:	4798      	blx	r3
    2294:	4603      	mov	r3, r0
}
    2296:	4618      	mov	r0, r3
    2298:	3708      	adds	r7, #8
    229a:	46bd      	mov	sp, r7
    229c:	bd80      	pop	{r7, pc}
    229e:	bf00      	nop
    22a0:	00011940 	.word	0x00011940
    22a4:	000020b9 	.word	0x000020b9

000022a8 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    22a8:	b580      	push	{r7, lr}
    22aa:	b086      	sub	sp, #24
    22ac:	af00      	add	r7, sp, #0
    22ae:	60f8      	str	r0, [r7, #12]
    22b0:	60b9      	str	r1, [r7, #8]
    22b2:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    22b4:	687a      	ldr	r2, [r7, #4]
    22b6:	68b9      	ldr	r1, [r7, #8]
    22b8:	68f8      	ldr	r0, [r7, #12]
    22ba:	4b07      	ldr	r3, [pc, #28]	; (22d8 <_ZN5Print7printlnEmi+0x30>)
    22bc:	4798      	blx	r3
    22be:	6178      	str	r0, [r7, #20]
  n += println();
    22c0:	68f8      	ldr	r0, [r7, #12]
    22c2:	4b06      	ldr	r3, [pc, #24]	; (22dc <_ZN5Print7printlnEmi+0x34>)
    22c4:	4798      	blx	r3
    22c6:	4602      	mov	r2, r0
    22c8:	697b      	ldr	r3, [r7, #20]
    22ca:	4413      	add	r3, r2
    22cc:	617b      	str	r3, [r7, #20]
  return n;
    22ce:	697b      	ldr	r3, [r7, #20]
}
    22d0:	4618      	mov	r0, r3
    22d2:	3718      	adds	r7, #24
    22d4:	46bd      	mov	sp, r7
    22d6:	bd80      	pop	{r7, pc}
    22d8:	00002241 	.word	0x00002241
    22dc:	00002285 	.word	0x00002285

000022e0 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    22e0:	b580      	push	{r7, lr}
    22e2:	b08e      	sub	sp, #56	; 0x38
    22e4:	af00      	add	r7, sp, #0
    22e6:	60f8      	str	r0, [r7, #12]
    22e8:	60b9      	str	r1, [r7, #8]
    22ea:	4613      	mov	r3, r2
    22ec:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    22ee:	f107 0310 	add.w	r3, r7, #16
    22f2:	3320      	adds	r3, #32
    22f4:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    22f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22f8:	2200      	movs	r2, #0
    22fa:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    22fc:	79fb      	ldrb	r3, [r7, #7]
    22fe:	2b01      	cmp	r3, #1
    2300:	dc01      	bgt.n	2306 <_ZN5Print11printNumberEmh+0x26>
    2302:	230a      	movs	r3, #10
    2304:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    2306:	79fa      	ldrb	r2, [r7, #7]
    2308:	68bb      	ldr	r3, [r7, #8]
    230a:	fbb3 f1f2 	udiv	r1, r3, r2
    230e:	fb02 f201 	mul.w	r2, r2, r1
    2312:	1a9b      	subs	r3, r3, r2
    2314:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    2318:	79fb      	ldrb	r3, [r7, #7]
    231a:	68ba      	ldr	r2, [r7, #8]
    231c:	fbb2 f3f3 	udiv	r3, r2, r3
    2320:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2324:	3b01      	subs	r3, #1
    2326:	637b      	str	r3, [r7, #52]	; 0x34
    2328:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    232c:	2b09      	cmp	r3, #9
    232e:	dc04      	bgt.n	233a <_ZN5Print11printNumberEmh+0x5a>
    2330:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2334:	3330      	adds	r3, #48	; 0x30
    2336:	b2db      	uxtb	r3, r3
    2338:	e003      	b.n	2342 <_ZN5Print11printNumberEmh+0x62>
    233a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    233e:	3337      	adds	r3, #55	; 0x37
    2340:	b2db      	uxtb	r3, r3
    2342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2344:	7013      	strb	r3, [r2, #0]
  } while(n);
    2346:	68bb      	ldr	r3, [r7, #8]
    2348:	2b00      	cmp	r3, #0
    234a:	d000      	beq.n	234e <_ZN5Print11printNumberEmh+0x6e>
  do {
    234c:	e7db      	b.n	2306 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    234e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2350:	68f8      	ldr	r0, [r7, #12]
    2352:	4b03      	ldr	r3, [pc, #12]	; (2360 <_ZN5Print11printNumberEmh+0x80>)
    2354:	4798      	blx	r3
    2356:	4603      	mov	r3, r0
}
    2358:	4618      	mov	r0, r3
    235a:	3738      	adds	r7, #56	; 0x38
    235c:	46bd      	mov	sp, r7
    235e:	bd80      	pop	{r7, pc}
    2360:	000020b9 	.word	0x000020b9

00002364 <hri_port_read_DIR_reg>:
{
    2364:	b480      	push	{r7}
    2366:	b083      	sub	sp, #12
    2368:	af00      	add	r7, sp, #0
    236a:	6078      	str	r0, [r7, #4]
    236c:	460b      	mov	r3, r1
    236e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2370:	78fb      	ldrb	r3, [r7, #3]
    2372:	687a      	ldr	r2, [r7, #4]
    2374:	01db      	lsls	r3, r3, #7
    2376:	4413      	add	r3, r2
    2378:	681b      	ldr	r3, [r3, #0]
}
    237a:	4618      	mov	r0, r3
    237c:	370c      	adds	r7, #12
    237e:	46bd      	mov	sp, r7
    2380:	bc80      	pop	{r7}
    2382:	4770      	bx	lr

00002384 <hri_port_read_OUT_reg>:
{
    2384:	b480      	push	{r7}
    2386:	b083      	sub	sp, #12
    2388:	af00      	add	r7, sp, #0
    238a:	6078      	str	r0, [r7, #4]
    238c:	460b      	mov	r3, r1
    238e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2390:	78fb      	ldrb	r3, [r7, #3]
    2392:	687a      	ldr	r2, [r7, #4]
    2394:	01db      	lsls	r3, r3, #7
    2396:	4413      	add	r3, r2
    2398:	3310      	adds	r3, #16
    239a:	681b      	ldr	r3, [r3, #0]
}
    239c:	4618      	mov	r0, r3
    239e:	370c      	adds	r7, #12
    23a0:	46bd      	mov	sp, r7
    23a2:	bc80      	pop	{r7}
    23a4:	4770      	bx	lr

000023a6 <hri_port_read_IN_reg>:
{
    23a6:	b480      	push	{r7}
    23a8:	b083      	sub	sp, #12
    23aa:	af00      	add	r7, sp, #0
    23ac:	6078      	str	r0, [r7, #4]
    23ae:	460b      	mov	r3, r1
    23b0:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    23b2:	78fb      	ldrb	r3, [r7, #3]
    23b4:	687a      	ldr	r2, [r7, #4]
    23b6:	01db      	lsls	r3, r3, #7
    23b8:	4413      	add	r3, r2
    23ba:	3320      	adds	r3, #32
    23bc:	681b      	ldr	r3, [r3, #0]
}
    23be:	4618      	mov	r0, r3
    23c0:	370c      	adds	r7, #12
    23c2:	46bd      	mov	sp, r7
    23c4:	bc80      	pop	{r7}
    23c6:	4770      	bx	lr

000023c8 <_gpio_get_level>:
{
    23c8:	b580      	push	{r7, lr}
    23ca:	b086      	sub	sp, #24
    23cc:	af00      	add	r7, sp, #0
    23ce:	4603      	mov	r3, r0
    23d0:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
    23d2:	f107 030c 	add.w	r3, r7, #12
    23d6:	4618      	mov	r0, r3
    23d8:	4b13      	ldr	r3, [pc, #76]	; (2428 <_gpio_get_level+0x60>)
    23da:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    23dc:	79fb      	ldrb	r3, [r7, #7]
    23de:	4619      	mov	r1, r3
    23e0:	4812      	ldr	r0, [pc, #72]	; (242c <_gpio_get_level+0x64>)
    23e2:	4b13      	ldr	r3, [pc, #76]	; (2430 <_gpio_get_level+0x68>)
    23e4:	4798      	blx	r3
    23e6:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    23e8:	79fb      	ldrb	r3, [r7, #7]
    23ea:	4619      	mov	r1, r3
    23ec:	480f      	ldr	r0, [pc, #60]	; (242c <_gpio_get_level+0x64>)
    23ee:	4b11      	ldr	r3, [pc, #68]	; (2434 <_gpio_get_level+0x6c>)
    23f0:	4798      	blx	r3
    23f2:	4602      	mov	r2, r0
    23f4:	697b      	ldr	r3, [r7, #20]
    23f6:	43db      	mvns	r3, r3
    23f8:	4013      	ands	r3, r2
    23fa:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    23fc:	79fb      	ldrb	r3, [r7, #7]
    23fe:	4619      	mov	r1, r3
    2400:	480a      	ldr	r0, [pc, #40]	; (242c <_gpio_get_level+0x64>)
    2402:	4b0d      	ldr	r3, [pc, #52]	; (2438 <_gpio_get_level+0x70>)
    2404:	4798      	blx	r3
    2406:	4602      	mov	r2, r0
    2408:	697b      	ldr	r3, [r7, #20]
    240a:	4013      	ands	r3, r2
    240c:	693a      	ldr	r2, [r7, #16]
    240e:	4313      	orrs	r3, r2
    2410:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    2412:	f107 030c 	add.w	r3, r7, #12
    2416:	4618      	mov	r0, r3
    2418:	4b08      	ldr	r3, [pc, #32]	; (243c <_gpio_get_level+0x74>)
    241a:	4798      	blx	r3
	return tmp;
    241c:	693b      	ldr	r3, [r7, #16]
}
    241e:	4618      	mov	r0, r3
    2420:	3718      	adds	r7, #24
    2422:	46bd      	mov	sp, r7
    2424:	bd80      	pop	{r7, pc}
    2426:	bf00      	nop
    2428:	00003ac1 	.word	0x00003ac1
    242c:	41008000 	.word	0x41008000
    2430:	00002365 	.word	0x00002365
    2434:	000023a7 	.word	0x000023a7
    2438:	00002385 	.word	0x00002385
    243c:	00003ae7 	.word	0x00003ae7

00002440 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    2440:	b580      	push	{r7, lr}
    2442:	b082      	sub	sp, #8
    2444:	af00      	add	r7, sp, #0
    2446:	4603      	mov	r3, r0
    2448:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    244a:	79fb      	ldrb	r3, [r7, #7]
    244c:	115b      	asrs	r3, r3, #5
    244e:	b2db      	uxtb	r3, r3
    2450:	4618      	mov	r0, r3
    2452:	4b09      	ldr	r3, [pc, #36]	; (2478 <gpio_get_pin_level+0x38>)
    2454:	4798      	blx	r3
    2456:	4601      	mov	r1, r0
    2458:	79fb      	ldrb	r3, [r7, #7]
    245a:	f003 031f 	and.w	r3, r3, #31
    245e:	2201      	movs	r2, #1
    2460:	fa02 f303 	lsl.w	r3, r2, r3
    2464:	400b      	ands	r3, r1
    2466:	2b00      	cmp	r3, #0
    2468:	bf14      	ite	ne
    246a:	2301      	movne	r3, #1
    246c:	2300      	moveq	r3, #0
    246e:	b2db      	uxtb	r3, r3
}
    2470:	4618      	mov	r0, r3
    2472:	3708      	adds	r7, #8
    2474:	46bd      	mov	sp, r7
    2476:	bd80      	pop	{r7, pc}
    2478:	000023c9 	.word	0x000023c9

0000247c <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    247c:	b480      	push	{r7}
    247e:	b083      	sub	sp, #12
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    2484:	4b06      	ldr	r3, [pc, #24]	; (24a0 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    2486:	681b      	ldr	r3, [r3, #0]
    2488:	2201      	movs	r2, #1
    248a:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    248c:	4b04      	ldr	r3, [pc, #16]	; (24a0 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    248e:	681b      	ldr	r3, [r3, #0]
    2490:	2200      	movs	r2, #0
    2492:	705a      	strb	r2, [r3, #1]
}
    2494:	bf00      	nop
    2496:	370c      	adds	r7, #12
    2498:	46bd      	mov	sp, r7
    249a:	bc80      	pop	{r7}
    249c:	4770      	bx	lr
    249e:	bf00      	nop
    24a0:	20001bfc 	.word	0x20001bfc

000024a4 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    24a4:	b480      	push	{r7}
    24a6:	b083      	sub	sp, #12
    24a8:	af00      	add	r7, sp, #0
    24aa:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    24ac:	4a04      	ldr	r2, [pc, #16]	; (24c0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	4618      	mov	r0, r3
    24b6:	370c      	adds	r7, #12
    24b8:	46bd      	mov	sp, r7
    24ba:	bc80      	pop	{r7}
    24bc:	4770      	bx	lr
    24be:	bf00      	nop
    24c0:	20001bfc 	.word	0x20001bfc

000024c4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    24c4:	b480      	push	{r7}
    24c6:	b083      	sub	sp, #12
    24c8:	af00      	add	r7, sp, #0
    24ca:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    24cc:	687b      	ldr	r3, [r7, #4]
    24ce:	4618      	mov	r0, r3
    24d0:	370c      	adds	r7, #12
    24d2:	46bd      	mov	sp, r7
    24d4:	bc80      	pop	{r7}
    24d6:	4770      	bx	lr

000024d8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    24d8:	b580      	push	{r7, lr}
    24da:	b082      	sub	sp, #8
    24dc:	af00      	add	r7, sp, #0
    24de:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    24e0:	2040      	movs	r0, #64	; 0x40
    24e2:	4b1c      	ldr	r3, [pc, #112]	; (2554 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
    24e4:	4798      	blx	r3
    24e6:	4603      	mov	r3, r0
    24e8:	461a      	mov	r2, r3
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	78db      	ldrb	r3, [r3, #3]
    24f2:	2b00      	cmp	r3, #0
    24f4:	d024      	beq.n	2540 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	2200      	movs	r2, #0
    24fa:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	2201      	movs	r2, #1
    2500:	705a      	strb	r2, [r3, #1]
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    2502:	f44f 7216 	mov.w	r2, #600	; 0x258
    2506:	4914      	ldr	r1, [pc, #80]	; (2558 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    2508:	4814      	ldr	r0, [pc, #80]	; (255c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    250a:	4b15      	ldr	r3, [pc, #84]	; (2560 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    250c:	4798      	blx	r3
			usbTimer.Start();
    250e:	4813      	ldr	r0, [pc, #76]	; (255c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    2510:	4b14      	ldr	r3, [pc, #80]	; (2564 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    2512:	4798      	blx	r3
			while (!usb.IsEnabled()){
    2514:	4814      	ldr	r0, [pc, #80]	; (2568 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    2516:	4b15      	ldr	r3, [pc, #84]	; (256c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    2518:	4798      	blx	r3
    251a:	4603      	mov	r3, r0
    251c:	f083 0301 	eor.w	r3, r3, #1
    2520:	b2db      	uxtb	r3, r3
    2522:	2b00      	cmp	r3, #0
    2524:	d008      	beq.n	2538 <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	789b      	ldrb	r3, [r3, #2]
    252a:	b2db      	uxtb	r3, r3
    252c:	2b00      	cmp	r3, #0
    252e:	d0f1      	beq.n	2514 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	2200      	movs	r2, #0
    2534:	701a      	strb	r2, [r3, #0]
					return;
    2536:	e009      	b.n	254c <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTimer.Stop();
    2538:	4808      	ldr	r0, [pc, #32]	; (255c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    253a:	4b0d      	ldr	r3, [pc, #52]	; (2570 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    253c:	4798      	blx	r3
    253e:	e005      	b.n	254c <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	2200      	movs	r2, #0
    2544:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	2200      	movs	r2, #0
    254a:	705a      	strb	r2, [r3, #1]
		}
		
}
    254c:	3708      	adds	r7, #8
    254e:	46bd      	mov	sp, r7
    2550:	bd80      	pop	{r7, pc}
    2552:	bf00      	nop
    2554:	00002441 	.word	0x00002441
    2558:	0000247d 	.word	0x0000247d
    255c:	20001c04 	.word	0x20001c04
    2560:	000027b9 	.word	0x000027b9
    2564:	00002711 	.word	0x00002711
    2568:	20001b9c 	.word	0x20001b9c
    256c:	00001dd5 	.word	0x00001dd5
    2570:	00002735 	.word	0x00002735

00002574 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    2574:	b580      	push	{r7, lr}
    2576:	b082      	sub	sp, #8
    2578:	af00      	add	r7, sp, #0
    257a:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	785b      	ldrb	r3, [r3, #1]
    2580:	b2db      	uxtb	r3, r3
    2582:	2b00      	cmp	r3, #0
    2584:	d01f      	beq.n	25c6 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	781b      	ldrb	r3, [r3, #0]
    258a:	b2db      	uxtb	r3, r3
    258c:	2b00      	cmp	r3, #0
    258e:	d105      	bne.n	259c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
    2590:	4812      	ldr	r0, [pc, #72]	; (25dc <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
    2592:	4b13      	ldr	r3, [pc, #76]	; (25e0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
    2594:	4798      	blx	r3
    2596:	4603      	mov	r3, r0
    2598:	2b00      	cmp	r3, #0
    259a:	d001      	beq.n	25a0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
    259c:	2301      	movs	r3, #1
    259e:	e000      	b.n	25a2 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
    25a0:	2300      	movs	r3, #0
    25a2:	2b00      	cmp	r3, #0
    25a4:	d00b      	beq.n	25be <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTimer.Start()==0;
    25a6:	480f      	ldr	r0, [pc, #60]	; (25e4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
    25a8:	4b0f      	ldr	r3, [pc, #60]	; (25e8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
    25aa:	4798      	blx	r3
    25ac:	4603      	mov	r3, r0
    25ae:	2b00      	cmp	r3, #0
    25b0:	bf0c      	ite	eq
    25b2:	2301      	moveq	r3, #1
    25b4:	2300      	movne	r3, #0
    25b6:	b2da      	uxtb	r2, r3
    25b8:	687b      	ldr	r3, [r7, #4]
    25ba:	705a      	strb	r2, [r3, #1]
    25bc:	e007      	b.n	25ce <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
    25be:	687b      	ldr	r3, [r7, #4]
    25c0:	2200      	movs	r2, #0
    25c2:	705a      	strb	r2, [r3, #1]
    25c4:	e003      	b.n	25ce <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	785b      	ldrb	r3, [r3, #1]
    25ca:	b2db      	uxtb	r3, r3
    25cc:	e002      	b.n	25d4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	785b      	ldrb	r3, [r3, #1]
    25d2:	b2db      	uxtb	r3, r3
}
    25d4:	4618      	mov	r0, r3
    25d6:	3708      	adds	r7, #8
    25d8:	46bd      	mov	sp, r7
    25da:	bd80      	pop	{r7, pc}
    25dc:	20001b9c 	.word	0x20001b9c
    25e0:	00001dd5 	.word	0x00001dd5
    25e4:	20001c04 	.word	0x20001c04
    25e8:	00002711 	.word	0x00002711

000025ec <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
    25ec:	b580      	push	{r7, lr}
    25ee:	b082      	sub	sp, #8
    25f0:	af00      	add	r7, sp, #0
    25f2:	6078      	str	r0, [r7, #4]
    25f4:	6039      	str	r1, [r7, #0]
	if (terminalStarted)
    25f6:	687b      	ldr	r3, [r7, #4]
    25f8:	785b      	ldrb	r3, [r3, #1]
    25fa:	b2db      	uxtb	r3, r3
    25fc:	2b00      	cmp	r3, #0
    25fe:	d02f      	beq.n	2660 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>
	{
		if (plugged||usb.IsEnabled())
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	781b      	ldrb	r3, [r3, #0]
    2604:	b2db      	uxtb	r3, r3
    2606:	2b00      	cmp	r3, #0
    2608:	d105      	bne.n	2616 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2a>
    260a:	481b      	ldr	r0, [pc, #108]	; (2678 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x8c>)
    260c:	4b1b      	ldr	r3, [pc, #108]	; (267c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x90>)
    260e:	4798      	blx	r3
    2610:	4603      	mov	r3, r0
    2612:	2b00      	cmp	r3, #0
    2614:	d001      	beq.n	261a <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2e>
    2616:	2301      	movs	r3, #1
    2618:	e000      	b.n	261c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x30>
    261a:	2300      	movs	r3, #0
    261c:	2b00      	cmp	r3, #0
    261e:	d01b      	beq.n	2658 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>
		{
			usbTimer.Stop();
    2620:	4817      	ldr	r0, [pc, #92]	; (2680 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    2622:	4b18      	ldr	r3, [pc, #96]	; (2684 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x98>)
    2624:	4798      	blx	r3
			usbTimer.Remove_task();
    2626:	4816      	ldr	r0, [pc, #88]	; (2680 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    2628:	4b17      	ldr	r3, [pc, #92]	; (2688 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x9c>)
    262a:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
    262c:	683a      	ldr	r2, [r7, #0]
    262e:	4613      	mov	r3, r2
    2630:	009b      	lsls	r3, r3, #2
    2632:	4413      	add	r3, r2
    2634:	005b      	lsls	r3, r3, #1
    2636:	461a      	mov	r2, r3
    2638:	4914      	ldr	r1, [pc, #80]	; (268c <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa0>)
    263a:	4811      	ldr	r0, [pc, #68]	; (2680 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    263c:	4b14      	ldr	r3, [pc, #80]	; (2690 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa4>)
    263e:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
    2640:	480f      	ldr	r0, [pc, #60]	; (2680 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    2642:	4b14      	ldr	r3, [pc, #80]	; (2694 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa8>)
    2644:	4798      	blx	r3
    2646:	4603      	mov	r3, r0
    2648:	2b00      	cmp	r3, #0
    264a:	bf0c      	ite	eq
    264c:	2301      	moveq	r3, #1
    264e:	2300      	movne	r3, #0
    2650:	b2da      	uxtb	r2, r3
    2652:	687b      	ldr	r3, [r7, #4]
    2654:	705a      	strb	r2, [r3, #1]
    2656:	e007      	b.n	2668 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
		else
		{
			terminalStarted=false;
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	2200      	movs	r2, #0
    265c:	705a      	strb	r2, [r3, #1]
    265e:	e003      	b.n	2668 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
	}
	else
	{
		return	terminalStarted;
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	785b      	ldrb	r3, [r3, #1]
    2664:	b2db      	uxtb	r3, r3
    2666:	e002      	b.n	266e <_ZN20SerialTerminal_Class13CheckTerminalEm+0x82>
	}
	
	return	terminalStarted;
    2668:	687b      	ldr	r3, [r7, #4]
    266a:	785b      	ldrb	r3, [r3, #1]
    266c:	b2db      	uxtb	r3, r3
    266e:	4618      	mov	r0, r3
    2670:	3708      	adds	r7, #8
    2672:	46bd      	mov	sp, r7
    2674:	bd80      	pop	{r7, pc}
    2676:	bf00      	nop
    2678:	20001b9c 	.word	0x20001b9c
    267c:	00001dd5 	.word	0x00001dd5
    2680:	20001c04 	.word	0x20001c04
    2684:	00002735 	.word	0x00002735
    2688:	000027e1 	.word	0x000027e1
    268c:	0000247d 	.word	0x0000247d
    2690:	000027b9 	.word	0x000027b9
    2694:	00002711 	.word	0x00002711

00002698 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    2698:	b580      	push	{r7, lr}
    269a:	b082      	sub	sp, #8
    269c:	af00      	add	r7, sp, #0
    269e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    26a0:	4b04      	ldr	r3, [pc, #16]	; (26b4 <_ZL7task_cbPK10timer_task+0x1c>)
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	4618      	mov	r0, r3
    26a6:	4b04      	ldr	r3, [pc, #16]	; (26b8 <_ZL7task_cbPK10timer_task+0x20>)
    26a8:	4798      	blx	r3
}
    26aa:	bf00      	nop
    26ac:	3708      	adds	r7, #8
    26ae:	46bd      	mov	sp, r7
    26b0:	bd80      	pop	{r7, pc}
    26b2:	bf00      	nop
    26b4:	20001c00 	.word	0x20001c00
    26b8:	0000275d 	.word	0x0000275d

000026bc <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    26bc:	b480      	push	{r7}
    26be:	b083      	sub	sp, #12
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
    26c4:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	683a      	ldr	r2, [r7, #0]
    26ca:	609a      	str	r2, [r3, #8]
	ptrTimerSerialClass=this;
    26cc:	4a07      	ldr	r2, [pc, #28]	; (26ec <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x30>)
    26ce:	687b      	ldr	r3, [r7, #4]
    26d0:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    26d8:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    26da:	687b      	ldr	r3, [r7, #4]
    26dc:	4a04      	ldr	r2, [pc, #16]	; (26f0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    26de:	621a      	str	r2, [r3, #32]
} //Timer_Class
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	4618      	mov	r0, r3
    26e4:	370c      	adds	r7, #12
    26e6:	46bd      	mov	sp, r7
    26e8:	bc80      	pop	{r7}
    26ea:	4770      	bx	lr
    26ec:	20001c00 	.word	0x20001c00
    26f0:	00002699 	.word	0x00002699

000026f4 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    26f4:	b480      	push	{r7}
    26f6:	b083      	sub	sp, #12
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	2200      	movs	r2, #0
    2700:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	4618      	mov	r0, r3
    2706:	370c      	adds	r7, #12
    2708:	46bd      	mov	sp, r7
    270a:	bc80      	pop	{r7}
    270c:	4770      	bx	lr
	...

00002710 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    2710:	b580      	push	{r7, lr}
    2712:	b084      	sub	sp, #16
    2714:	af00      	add	r7, sp, #0
    2716:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	689b      	ldr	r3, [r3, #8]
    271c:	4618      	mov	r0, r3
    271e:	4b04      	ldr	r3, [pc, #16]	; (2730 <_ZN17TimerSerial_Class5StartEv+0x20>)
    2720:	4798      	blx	r3
    2722:	60f8      	str	r0, [r7, #12]
	return status;
    2724:	68fb      	ldr	r3, [r7, #12]
	
}
    2726:	4618      	mov	r0, r3
    2728:	3710      	adds	r7, #16
    272a:	46bd      	mov	sp, r7
    272c:	bd80      	pop	{r7, pc}
    272e:	bf00      	nop
    2730:	00004a45 	.word	0x00004a45

00002734 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    2734:	b580      	push	{r7, lr}
    2736:	b084      	sub	sp, #16
    2738:	af00      	add	r7, sp, #0
    273a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	689b      	ldr	r3, [r3, #8]
    2740:	4618      	mov	r0, r3
    2742:	4b05      	ldr	r3, [pc, #20]	; (2758 <_ZN17TimerSerial_Class4StopEv+0x24>)
    2744:	4798      	blx	r3
    2746:	60f8      	str	r0, [r7, #12]
	timeout=0;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	2200      	movs	r2, #0
    274c:	705a      	strb	r2, [r3, #1]
	return status;
    274e:	68fb      	ldr	r3, [r7, #12]
}
    2750:	4618      	mov	r0, r3
    2752:	3710      	adds	r7, #16
    2754:	46bd      	mov	sp, r7
    2756:	bd80      	pop	{r7, pc}
    2758:	00004a99 	.word	0x00004a99

0000275c <_ZN17TimerSerial_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
    275c:	b480      	push	{r7}
    275e:	b083      	sub	sp, #12
    2760:	af00      	add	r7, sp, #0
    2762:	6078      	str	r0, [r7, #4]
	timeout=1;
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	2201      	movs	r2, #1
    2768:	705a      	strb	r2, [r3, #1]
}
    276a:	bf00      	nop
    276c:	370c      	adds	r7, #12
    276e:	46bd      	mov	sp, r7
    2770:	bc80      	pop	{r7}
    2772:	4770      	bx	lr

00002774 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    2774:	b580      	push	{r7, lr}
    2776:	b086      	sub	sp, #24
    2778:	af00      	add	r7, sp, #0
    277a:	60f8      	str	r0, [r7, #12]
    277c:	60b9      	str	r1, [r7, #8]
    277e:	607a      	str	r2, [r7, #4]
    2780:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
    2782:	68fb      	ldr	r3, [r7, #12]
    2784:	687a      	ldr	r2, [r7, #4]
    2786:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    2788:	68fb      	ldr	r3, [r7, #12]
    278a:	68ba      	ldr	r2, [r7, #8]
    278c:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    278e:	68fb      	ldr	r3, [r7, #12]
    2790:	78fa      	ldrb	r2, [r7, #3]
    2792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
    2796:	68fb      	ldr	r3, [r7, #12]
    2798:	689a      	ldr	r2, [r3, #8]
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	3314      	adds	r3, #20
    279e:	4619      	mov	r1, r3
    27a0:	4610      	mov	r0, r2
    27a2:	4b04      	ldr	r3, [pc, #16]	; (27b4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x40>)
    27a4:	4798      	blx	r3
    27a6:	6178      	str	r0, [r7, #20]
	
	return status;
    27a8:	697b      	ldr	r3, [r7, #20]
}
    27aa:	4618      	mov	r0, r3
    27ac:	3718      	adds	r7, #24
    27ae:	46bd      	mov	sp, r7
    27b0:	bd80      	pop	{r7, pc}
    27b2:	bf00      	nop
    27b4:	00004af5 	.word	0x00004af5

000027b8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    27b8:	b590      	push	{r4, r7, lr}
    27ba:	b087      	sub	sp, #28
    27bc:	af00      	add	r7, sp, #0
    27be:	60f8      	str	r0, [r7, #12]
    27c0:	60b9      	str	r1, [r7, #8]
    27c2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    27c4:	2300      	movs	r3, #0
    27c6:	687a      	ldr	r2, [r7, #4]
    27c8:	68b9      	ldr	r1, [r7, #8]
    27ca:	68f8      	ldr	r0, [r7, #12]
    27cc:	4c03      	ldr	r4, [pc, #12]	; (27dc <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    27ce:	47a0      	blx	r4
    27d0:	6178      	str	r0, [r7, #20]
	return status;
    27d2:	697b      	ldr	r3, [r7, #20]
}
    27d4:	4618      	mov	r0, r3
    27d6:	371c      	adds	r7, #28
    27d8:	46bd      	mov	sp, r7
    27da:	bd90      	pop	{r4, r7, pc}
    27dc:	00002775 	.word	0x00002775

000027e0 <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
    27e0:	b580      	push	{r7, lr}
    27e2:	b082      	sub	sp, #8
    27e4:	af00      	add	r7, sp, #0
    27e6:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	689a      	ldr	r2, [r3, #8]
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	3314      	adds	r3, #20
    27f0:	4619      	mov	r1, r3
    27f2:	4610      	mov	r0, r2
    27f4:	4b02      	ldr	r3, [pc, #8]	; (2800 <_ZN17TimerSerial_Class11Remove_taskEv+0x20>)
    27f6:	4798      	blx	r3
}
    27f8:	bf00      	nop
    27fa:	3708      	adds	r7, #8
    27fc:	46bd      	mov	sp, r7
    27fe:	bd80      	pop	{r7, pc}
    2800:	00004bed 	.word	0x00004bed

00002804 <_Z41__static_initialization_and_destruction_0ii>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_INTERFACE);
    2804:	b580      	push	{r7, lr}
    2806:	b082      	sub	sp, #8
    2808:	af00      	add	r7, sp, #0
    280a:	6078      	str	r0, [r7, #4]
    280c:	6039      	str	r1, [r7, #0]
    280e:	687b      	ldr	r3, [r7, #4]
    2810:	2b01      	cmp	r3, #1
    2812:	d10d      	bne.n	2830 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2814:	683b      	ldr	r3, [r7, #0]
    2816:	f64f 72ff 	movw	r2, #65535	; 0xffff
    281a:	4293      	cmp	r3, r2
    281c:	d108      	bne.n	2830 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    281e:	4906      	ldr	r1, [pc, #24]	; (2838 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2820:	4806      	ldr	r0, [pc, #24]	; (283c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2822:	4b07      	ldr	r3, [pc, #28]	; (2840 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2824:	4798      	blx	r3
    2826:	4a07      	ldr	r2, [pc, #28]	; (2844 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2828:	4907      	ldr	r1, [pc, #28]	; (2848 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    282a:	4804      	ldr	r0, [pc, #16]	; (283c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    282c:	4b07      	ldr	r3, [pc, #28]	; (284c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    282e:	4798      	blx	r3
    2830:	bf00      	nop
    2832:	3708      	adds	r7, #8
    2834:	46bd      	mov	sp, r7
    2836:	bd80      	pop	{r7, pc}
    2838:	2000224c 	.word	0x2000224c
    283c:	20001c04 	.word	0x20001c04
    2840:	000026bd 	.word	0x000026bd
    2844:	20000000 	.word	0x20000000
    2848:	000026f5 	.word	0x000026f5
    284c:	0000ed3d 	.word	0x0000ed3d

00002850 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    2850:	b580      	push	{r7, lr}
    2852:	af00      	add	r7, sp, #0
    2854:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2858:	2001      	movs	r0, #1
    285a:	4b01      	ldr	r3, [pc, #4]	; (2860 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    285c:	4798      	blx	r3
    285e:	bd80      	pop	{r7, pc}
    2860:	00002805 	.word	0x00002805

00002864 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2864:	b580      	push	{r7, lr}
    2866:	af00      	add	r7, sp, #0
	system_init();
    2868:	4b03      	ldr	r3, [pc, #12]	; (2878 <atmel_start_init+0x14>)
    286a:	4798      	blx	r3
	usb_init();
    286c:	4b03      	ldr	r3, [pc, #12]	; (287c <atmel_start_init+0x18>)
    286e:	4798      	blx	r3
	spi_nor_flash_init();
    2870:	4b03      	ldr	r3, [pc, #12]	; (2880 <atmel_start_init+0x1c>)
    2872:	4798      	blx	r3
}
    2874:	bf00      	nop
    2876:	bd80      	pop	{r7, pc}
    2878:	00003961 	.word	0x00003961
    287c:	0000ed2d 	.word	0x0000ed2d
    2880:	0000d6ed 	.word	0x0000d6ed

00002884 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2884:	b480      	push	{r7}
    2886:	b085      	sub	sp, #20
    2888:	af00      	add	r7, sp, #0
    288a:	60f8      	str	r0, [r7, #12]
    288c:	460b      	mov	r3, r1
    288e:	607a      	str	r2, [r7, #4]
    2890:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2892:	7afa      	ldrb	r2, [r7, #11]
    2894:	68fb      	ldr	r3, [r7, #12]
    2896:	3220      	adds	r2, #32
    2898:	6879      	ldr	r1, [r7, #4]
    289a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    289e:	bf00      	nop
    28a0:	3714      	adds	r7, #20
    28a2:	46bd      	mov	sp, r7
    28a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    28a8:	4770      	bx	lr

000028aa <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    28aa:	b480      	push	{r7}
    28ac:	b083      	sub	sp, #12
    28ae:	af00      	add	r7, sp, #0
    28b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    28b2:	687b      	ldr	r3, [r7, #4]
    28b4:	691b      	ldr	r3, [r3, #16]
    28b6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    28ba:	687b      	ldr	r3, [r7, #4]
    28bc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    28be:	bf00      	nop
    28c0:	370c      	adds	r7, #12
    28c2:	46bd      	mov	sp, r7
    28c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    28c8:	4770      	bx	lr

000028ca <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    28ca:	b480      	push	{r7}
    28cc:	b083      	sub	sp, #12
    28ce:	af00      	add	r7, sp, #0
    28d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    28d2:	687b      	ldr	r3, [r7, #4]
    28d4:	691b      	ldr	r3, [r3, #16]
    28d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    28de:	bf00      	nop
    28e0:	370c      	adds	r7, #12
    28e2:	46bd      	mov	sp, r7
    28e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    28e8:	4770      	bx	lr

000028ea <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    28ea:	b480      	push	{r7}
    28ec:	b083      	sub	sp, #12
    28ee:	af00      	add	r7, sp, #0
    28f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	691b      	ldr	r3, [r3, #16]
    28f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    28fa:	687b      	ldr	r3, [r7, #4]
    28fc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    28fe:	bf00      	nop
    2900:	370c      	adds	r7, #12
    2902:	46bd      	mov	sp, r7
    2904:	f85d 7b04 	ldr.w	r7, [sp], #4
    2908:	4770      	bx	lr

0000290a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    290a:	b480      	push	{r7}
    290c:	b083      	sub	sp, #12
    290e:	af00      	add	r7, sp, #0
    2910:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	691b      	ldr	r3, [r3, #16]
    2916:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    291e:	bf00      	nop
    2920:	370c      	adds	r7, #12
    2922:	46bd      	mov	sp, r7
    2924:	f85d 7b04 	ldr.w	r7, [sp], #4
    2928:	4770      	bx	lr

0000292a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    292a:	b480      	push	{r7}
    292c:	b083      	sub	sp, #12
    292e:	af00      	add	r7, sp, #0
    2930:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	695b      	ldr	r3, [r3, #20]
    2936:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    293e:	bf00      	nop
    2940:	370c      	adds	r7, #12
    2942:	46bd      	mov	sp, r7
    2944:	f85d 7b04 	ldr.w	r7, [sp], #4
    2948:	4770      	bx	lr

0000294a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    294a:	b480      	push	{r7}
    294c:	b083      	sub	sp, #12
    294e:	af00      	add	r7, sp, #0
    2950:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	695b      	ldr	r3, [r3, #20]
    2956:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    295e:	bf00      	nop
    2960:	370c      	adds	r7, #12
    2962:	46bd      	mov	sp, r7
    2964:	f85d 7b04 	ldr.w	r7, [sp], #4
    2968:	4770      	bx	lr

0000296a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    296a:	b480      	push	{r7}
    296c:	b083      	sub	sp, #12
    296e:	af00      	add	r7, sp, #0
    2970:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2972:	687b      	ldr	r3, [r7, #4]
    2974:	695b      	ldr	r3, [r3, #20]
    2976:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    297a:	687b      	ldr	r3, [r7, #4]
    297c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    297e:	bf00      	nop
    2980:	370c      	adds	r7, #12
    2982:	46bd      	mov	sp, r7
    2984:	f85d 7b04 	ldr.w	r7, [sp], #4
    2988:	4770      	bx	lr

0000298a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    298a:	b480      	push	{r7}
    298c:	b083      	sub	sp, #12
    298e:	af00      	add	r7, sp, #0
    2990:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	695b      	ldr	r3, [r3, #20]
    2996:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    299e:	bf00      	nop
    29a0:	370c      	adds	r7, #12
    29a2:	46bd      	mov	sp, r7
    29a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    29a8:	4770      	bx	lr

000029aa <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    29aa:	b480      	push	{r7}
    29ac:	b083      	sub	sp, #12
    29ae:	af00      	add	r7, sp, #0
    29b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	695b      	ldr	r3, [r3, #20]
    29b6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    29be:	bf00      	nop
    29c0:	370c      	adds	r7, #12
    29c2:	46bd      	mov	sp, r7
    29c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c8:	4770      	bx	lr

000029ca <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    29ca:	b480      	push	{r7}
    29cc:	b083      	sub	sp, #12
    29ce:	af00      	add	r7, sp, #0
    29d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	699b      	ldr	r3, [r3, #24]
    29d6:	f043 0201 	orr.w	r2, r3, #1
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    29de:	bf00      	nop
    29e0:	370c      	adds	r7, #12
    29e2:	46bd      	mov	sp, r7
    29e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    29e8:	4770      	bx	lr

000029ea <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    29ea:	b480      	push	{r7}
    29ec:	b083      	sub	sp, #12
    29ee:	af00      	add	r7, sp, #0
    29f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    29f2:	687b      	ldr	r3, [r7, #4]
    29f4:	699b      	ldr	r3, [r3, #24]
    29f6:	f043 0202 	orr.w	r2, r3, #2
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    29fe:	bf00      	nop
    2a00:	370c      	adds	r7, #12
    2a02:	46bd      	mov	sp, r7
    2a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a08:	4770      	bx	lr

00002a0a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2a0a:	b480      	push	{r7}
    2a0c:	b083      	sub	sp, #12
    2a0e:	af00      	add	r7, sp, #0
    2a10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	699b      	ldr	r3, [r3, #24]
    2a16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a1e:	bf00      	nop
    2a20:	370c      	adds	r7, #12
    2a22:	46bd      	mov	sp, r7
    2a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a28:	4770      	bx	lr

00002a2a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2a2a:	b480      	push	{r7}
    2a2c:	b083      	sub	sp, #12
    2a2e:	af00      	add	r7, sp, #0
    2a30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	699b      	ldr	r3, [r3, #24]
    2a36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a3e:	bf00      	nop
    2a40:	370c      	adds	r7, #12
    2a42:	46bd      	mov	sp, r7
    2a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a48:	4770      	bx	lr

00002a4a <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    2a4a:	b480      	push	{r7}
    2a4c:	b083      	sub	sp, #12
    2a4e:	af00      	add	r7, sp, #0
    2a50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	699b      	ldr	r3, [r3, #24]
    2a56:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a5e:	bf00      	nop
    2a60:	370c      	adds	r7, #12
    2a62:	46bd      	mov	sp, r7
    2a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a68:	4770      	bx	lr

00002a6a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    2a6a:	b480      	push	{r7}
    2a6c:	b083      	sub	sp, #12
    2a6e:	af00      	add	r7, sp, #0
    2a70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	69db      	ldr	r3, [r3, #28]
    2a76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2a7a:	687b      	ldr	r3, [r7, #4]
    2a7c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a7e:	bf00      	nop
    2a80:	370c      	adds	r7, #12
    2a82:	46bd      	mov	sp, r7
    2a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a88:	4770      	bx	lr

00002a8a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2a8a:	b480      	push	{r7}
    2a8c:	b083      	sub	sp, #12
    2a8e:	af00      	add	r7, sp, #0
    2a90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	6a1b      	ldr	r3, [r3, #32]
    2a96:	f043 0201 	orr.w	r2, r3, #1
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a9e:	bf00      	nop
    2aa0:	370c      	adds	r7, #12
    2aa2:	46bd      	mov	sp, r7
    2aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aa8:	4770      	bx	lr

00002aaa <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    2aaa:	b480      	push	{r7}
    2aac:	b083      	sub	sp, #12
    2aae:	af00      	add	r7, sp, #0
    2ab0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2ab2:	687b      	ldr	r3, [r7, #4]
    2ab4:	6a1b      	ldr	r3, [r3, #32]
    2ab6:	f043 0202 	orr.w	r2, r3, #2
    2aba:	687b      	ldr	r3, [r7, #4]
    2abc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2abe:	bf00      	nop
    2ac0:	370c      	adds	r7, #12
    2ac2:	46bd      	mov	sp, r7
    2ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac8:	4770      	bx	lr

00002aca <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    2aca:	b480      	push	{r7}
    2acc:	b083      	sub	sp, #12
    2ace:	af00      	add	r7, sp, #0
    2ad0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	6a1b      	ldr	r3, [r3, #32]
    2ad6:	f043 0204 	orr.w	r2, r3, #4
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2ade:	bf00      	nop
    2ae0:	370c      	adds	r7, #12
    2ae2:	46bd      	mov	sp, r7
    2ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ae8:	4770      	bx	lr

00002aea <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2aea:	b480      	push	{r7}
    2aec:	b083      	sub	sp, #12
    2aee:	af00      	add	r7, sp, #0
    2af0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	6a1b      	ldr	r3, [r3, #32]
    2af6:	f043 0208 	orr.w	r2, r3, #8
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2afe:	bf00      	nop
    2b00:	370c      	adds	r7, #12
    2b02:	46bd      	mov	sp, r7
    2b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b08:	4770      	bx	lr

00002b0a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    2b0a:	b480      	push	{r7}
    2b0c:	b083      	sub	sp, #12
    2b0e:	af00      	add	r7, sp, #0
    2b10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	6a1b      	ldr	r3, [r3, #32]
    2b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b1e:	bf00      	nop
    2b20:	370c      	adds	r7, #12
    2b22:	46bd      	mov	sp, r7
    2b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b28:	4770      	bx	lr

00002b2a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2b2a:	b480      	push	{r7}
    2b2c:	b085      	sub	sp, #20
    2b2e:	af00      	add	r7, sp, #0
    2b30:	60f8      	str	r0, [r7, #12]
    2b32:	460b      	mov	r3, r1
    2b34:	607a      	str	r2, [r7, #4]
    2b36:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b38:	7afb      	ldrb	r3, [r7, #11]
    2b3a:	68fa      	ldr	r2, [r7, #12]
    2b3c:	01db      	lsls	r3, r3, #7
    2b3e:	4413      	add	r3, r2
    2b40:	3308      	adds	r3, #8
    2b42:	687a      	ldr	r2, [r7, #4]
    2b44:	601a      	str	r2, [r3, #0]
}
    2b46:	bf00      	nop
    2b48:	3714      	adds	r7, #20
    2b4a:	46bd      	mov	sp, r7
    2b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b50:	4770      	bx	lr

00002b52 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2b52:	b480      	push	{r7}
    2b54:	b085      	sub	sp, #20
    2b56:	af00      	add	r7, sp, #0
    2b58:	60f8      	str	r0, [r7, #12]
    2b5a:	460b      	mov	r3, r1
    2b5c:	607a      	str	r2, [r7, #4]
    2b5e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2b60:	7afb      	ldrb	r3, [r7, #11]
    2b62:	68fa      	ldr	r2, [r7, #12]
    2b64:	01db      	lsls	r3, r3, #7
    2b66:	4413      	add	r3, r2
    2b68:	3304      	adds	r3, #4
    2b6a:	687a      	ldr	r2, [r7, #4]
    2b6c:	601a      	str	r2, [r3, #0]
}
    2b6e:	bf00      	nop
    2b70:	3714      	adds	r7, #20
    2b72:	46bd      	mov	sp, r7
    2b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b78:	4770      	bx	lr

00002b7a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2b7a:	b480      	push	{r7}
    2b7c:	b085      	sub	sp, #20
    2b7e:	af00      	add	r7, sp, #0
    2b80:	60f8      	str	r0, [r7, #12]
    2b82:	460b      	mov	r3, r1
    2b84:	607a      	str	r2, [r7, #4]
    2b86:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b88:	7afb      	ldrb	r3, [r7, #11]
    2b8a:	68fa      	ldr	r2, [r7, #12]
    2b8c:	01db      	lsls	r3, r3, #7
    2b8e:	4413      	add	r3, r2
    2b90:	3318      	adds	r3, #24
    2b92:	687a      	ldr	r2, [r7, #4]
    2b94:	601a      	str	r2, [r3, #0]
}
    2b96:	bf00      	nop
    2b98:	3714      	adds	r7, #20
    2b9a:	46bd      	mov	sp, r7
    2b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ba0:	4770      	bx	lr

00002ba2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2ba2:	b480      	push	{r7}
    2ba4:	b085      	sub	sp, #20
    2ba6:	af00      	add	r7, sp, #0
    2ba8:	60f8      	str	r0, [r7, #12]
    2baa:	460b      	mov	r3, r1
    2bac:	607a      	str	r2, [r7, #4]
    2bae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2bb0:	7afb      	ldrb	r3, [r7, #11]
    2bb2:	68fa      	ldr	r2, [r7, #12]
    2bb4:	01db      	lsls	r3, r3, #7
    2bb6:	4413      	add	r3, r2
    2bb8:	3314      	adds	r3, #20
    2bba:	687a      	ldr	r2, [r7, #4]
    2bbc:	601a      	str	r2, [r3, #0]
}
    2bbe:	bf00      	nop
    2bc0:	3714      	adds	r7, #20
    2bc2:	46bd      	mov	sp, r7
    2bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bc8:	4770      	bx	lr

00002bca <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2bca:	b480      	push	{r7}
    2bcc:	b085      	sub	sp, #20
    2bce:	af00      	add	r7, sp, #0
    2bd0:	6078      	str	r0, [r7, #4]
    2bd2:	4608      	mov	r0, r1
    2bd4:	4611      	mov	r1, r2
    2bd6:	461a      	mov	r2, r3
    2bd8:	4603      	mov	r3, r0
    2bda:	70fb      	strb	r3, [r7, #3]
    2bdc:	460b      	mov	r3, r1
    2bde:	70bb      	strb	r3, [r7, #2]
    2be0:	4613      	mov	r3, r2
    2be2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2be4:	78fa      	ldrb	r2, [r7, #3]
    2be6:	78bb      	ldrb	r3, [r7, #2]
    2be8:	6879      	ldr	r1, [r7, #4]
    2bea:	01d2      	lsls	r2, r2, #7
    2bec:	440a      	add	r2, r1
    2bee:	4413      	add	r3, r2
    2bf0:	3330      	adds	r3, #48	; 0x30
    2bf2:	781b      	ldrb	r3, [r3, #0]
    2bf4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2bf6:	7bfb      	ldrb	r3, [r7, #15]
    2bf8:	f023 030f 	bic.w	r3, r3, #15
    2bfc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    2bfe:	787b      	ldrb	r3, [r7, #1]
    2c00:	f003 030f 	and.w	r3, r3, #15
    2c04:	b2da      	uxtb	r2, r3
    2c06:	7bfb      	ldrb	r3, [r7, #15]
    2c08:	4313      	orrs	r3, r2
    2c0a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c0c:	78fa      	ldrb	r2, [r7, #3]
    2c0e:	78bb      	ldrb	r3, [r7, #2]
    2c10:	6879      	ldr	r1, [r7, #4]
    2c12:	01d2      	lsls	r2, r2, #7
    2c14:	440a      	add	r2, r1
    2c16:	4413      	add	r3, r2
    2c18:	3330      	adds	r3, #48	; 0x30
    2c1a:	7bfa      	ldrb	r2, [r7, #15]
    2c1c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2c1e:	bf00      	nop
    2c20:	3714      	adds	r7, #20
    2c22:	46bd      	mov	sp, r7
    2c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c28:	4770      	bx	lr

00002c2a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2c2a:	b480      	push	{r7}
    2c2c:	b085      	sub	sp, #20
    2c2e:	af00      	add	r7, sp, #0
    2c30:	6078      	str	r0, [r7, #4]
    2c32:	4608      	mov	r0, r1
    2c34:	4611      	mov	r1, r2
    2c36:	461a      	mov	r2, r3
    2c38:	4603      	mov	r3, r0
    2c3a:	70fb      	strb	r3, [r7, #3]
    2c3c:	460b      	mov	r3, r1
    2c3e:	70bb      	strb	r3, [r7, #2]
    2c40:	4613      	mov	r3, r2
    2c42:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c44:	78fa      	ldrb	r2, [r7, #3]
    2c46:	78bb      	ldrb	r3, [r7, #2]
    2c48:	6879      	ldr	r1, [r7, #4]
    2c4a:	01d2      	lsls	r2, r2, #7
    2c4c:	440a      	add	r2, r1
    2c4e:	4413      	add	r3, r2
    2c50:	3330      	adds	r3, #48	; 0x30
    2c52:	781b      	ldrb	r3, [r3, #0]
    2c54:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2c56:	7bfb      	ldrb	r3, [r7, #15]
    2c58:	f003 030f 	and.w	r3, r3, #15
    2c5c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    2c5e:	787b      	ldrb	r3, [r7, #1]
    2c60:	011b      	lsls	r3, r3, #4
    2c62:	b2da      	uxtb	r2, r3
    2c64:	7bfb      	ldrb	r3, [r7, #15]
    2c66:	4313      	orrs	r3, r2
    2c68:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c6a:	78fa      	ldrb	r2, [r7, #3]
    2c6c:	78bb      	ldrb	r3, [r7, #2]
    2c6e:	6879      	ldr	r1, [r7, #4]
    2c70:	01d2      	lsls	r2, r2, #7
    2c72:	440a      	add	r2, r1
    2c74:	4413      	add	r3, r2
    2c76:	3330      	adds	r3, #48	; 0x30
    2c78:	7bfa      	ldrb	r2, [r7, #15]
    2c7a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2c7c:	bf00      	nop
    2c7e:	3714      	adds	r7, #20
    2c80:	46bd      	mov	sp, r7
    2c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c86:	4770      	bx	lr

00002c88 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    2c88:	b480      	push	{r7}
    2c8a:	b085      	sub	sp, #20
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	4608      	mov	r0, r1
    2c92:	4611      	mov	r1, r2
    2c94:	461a      	mov	r2, r3
    2c96:	4603      	mov	r3, r0
    2c98:	70fb      	strb	r3, [r7, #3]
    2c9a:	460b      	mov	r3, r1
    2c9c:	70bb      	strb	r3, [r7, #2]
    2c9e:	4613      	mov	r3, r2
    2ca0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ca2:	78fa      	ldrb	r2, [r7, #3]
    2ca4:	78bb      	ldrb	r3, [r7, #2]
    2ca6:	6879      	ldr	r1, [r7, #4]
    2ca8:	01d2      	lsls	r2, r2, #7
    2caa:	440a      	add	r2, r1
    2cac:	4413      	add	r3, r2
    2cae:	3340      	adds	r3, #64	; 0x40
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cb4:	7bfb      	ldrb	r3, [r7, #15]
    2cb6:	f023 0301 	bic.w	r3, r3, #1
    2cba:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2cbc:	787a      	ldrb	r2, [r7, #1]
    2cbe:	7bfb      	ldrb	r3, [r7, #15]
    2cc0:	4313      	orrs	r3, r2
    2cc2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cc4:	78fa      	ldrb	r2, [r7, #3]
    2cc6:	78bb      	ldrb	r3, [r7, #2]
    2cc8:	6879      	ldr	r1, [r7, #4]
    2cca:	01d2      	lsls	r2, r2, #7
    2ccc:	440a      	add	r2, r1
    2cce:	4413      	add	r3, r2
    2cd0:	3340      	adds	r3, #64	; 0x40
    2cd2:	7bfa      	ldrb	r2, [r7, #15]
    2cd4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2cd6:	bf00      	nop
    2cd8:	3714      	adds	r7, #20
    2cda:	46bd      	mov	sp, r7
    2cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ce0:	4770      	bx	lr

00002ce2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2ce2:	b490      	push	{r4, r7}
    2ce4:	b082      	sub	sp, #8
    2ce6:	af00      	add	r7, sp, #0
    2ce8:	6078      	str	r0, [r7, #4]
    2cea:	460b      	mov	r3, r1
    2cec:	70fb      	strb	r3, [r7, #3]
    2cee:	4613      	mov	r3, r2
    2cf0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2cf2:	78fa      	ldrb	r2, [r7, #3]
    2cf4:	78bb      	ldrb	r3, [r7, #2]
    2cf6:	78f8      	ldrb	r0, [r7, #3]
    2cf8:	78b9      	ldrb	r1, [r7, #2]
    2cfa:	687c      	ldr	r4, [r7, #4]
    2cfc:	01c0      	lsls	r0, r0, #7
    2cfe:	4420      	add	r0, r4
    2d00:	4401      	add	r1, r0
    2d02:	3140      	adds	r1, #64	; 0x40
    2d04:	7809      	ldrb	r1, [r1, #0]
    2d06:	b2c9      	uxtb	r1, r1
    2d08:	f041 0104 	orr.w	r1, r1, #4
    2d0c:	b2c8      	uxtb	r0, r1
    2d0e:	6879      	ldr	r1, [r7, #4]
    2d10:	01d2      	lsls	r2, r2, #7
    2d12:	440a      	add	r2, r1
    2d14:	4413      	add	r3, r2
    2d16:	3340      	adds	r3, #64	; 0x40
    2d18:	4602      	mov	r2, r0
    2d1a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2d1c:	bf00      	nop
    2d1e:	3708      	adds	r7, #8
    2d20:	46bd      	mov	sp, r7
    2d22:	bc90      	pop	{r4, r7}
    2d24:	4770      	bx	lr

00002d26 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2d26:	b490      	push	{r4, r7}
    2d28:	b082      	sub	sp, #8
    2d2a:	af00      	add	r7, sp, #0
    2d2c:	6078      	str	r0, [r7, #4]
    2d2e:	460b      	mov	r3, r1
    2d30:	70fb      	strb	r3, [r7, #3]
    2d32:	4613      	mov	r3, r2
    2d34:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2d36:	78fa      	ldrb	r2, [r7, #3]
    2d38:	78bb      	ldrb	r3, [r7, #2]
    2d3a:	78f8      	ldrb	r0, [r7, #3]
    2d3c:	78b9      	ldrb	r1, [r7, #2]
    2d3e:	687c      	ldr	r4, [r7, #4]
    2d40:	01c0      	lsls	r0, r0, #7
    2d42:	4420      	add	r0, r4
    2d44:	4401      	add	r1, r0
    2d46:	3140      	adds	r1, #64	; 0x40
    2d48:	7809      	ldrb	r1, [r1, #0]
    2d4a:	b2c9      	uxtb	r1, r1
    2d4c:	f021 0104 	bic.w	r1, r1, #4
    2d50:	b2c8      	uxtb	r0, r1
    2d52:	6879      	ldr	r1, [r7, #4]
    2d54:	01d2      	lsls	r2, r2, #7
    2d56:	440a      	add	r2, r1
    2d58:	4413      	add	r3, r2
    2d5a:	3340      	adds	r3, #64	; 0x40
    2d5c:	4602      	mov	r2, r0
    2d5e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2d60:	bf00      	nop
    2d62:	3708      	adds	r7, #8
    2d64:	46bd      	mov	sp, r7
    2d66:	bc90      	pop	{r4, r7}
    2d68:	4770      	bx	lr

00002d6a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    2d6a:	b480      	push	{r7}
    2d6c:	b085      	sub	sp, #20
    2d6e:	af00      	add	r7, sp, #0
    2d70:	60f8      	str	r0, [r7, #12]
    2d72:	460b      	mov	r3, r1
    2d74:	607a      	str	r2, [r7, #4]
    2d76:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d78:	7afb      	ldrb	r3, [r7, #11]
    2d7a:	68fa      	ldr	r2, [r7, #12]
    2d7c:	01db      	lsls	r3, r3, #7
    2d7e:	4413      	add	r3, r2
    2d80:	3328      	adds	r3, #40	; 0x28
    2d82:	687a      	ldr	r2, [r7, #4]
    2d84:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2d86:	bf00      	nop
    2d88:	3714      	adds	r7, #20
    2d8a:	46bd      	mov	sp, r7
    2d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d90:	4770      	bx	lr
	...

00002d94 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    2d94:	b580      	push	{r7, lr}
    2d96:	b082      	sub	sp, #8
    2d98:	af00      	add	r7, sp, #0
    2d9a:	4603      	mov	r3, r0
    2d9c:	6039      	str	r1, [r7, #0]
    2d9e:	71fb      	strb	r3, [r7, #7]
    2da0:	4613      	mov	r3, r2
    2da2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    2da4:	79bb      	ldrb	r3, [r7, #6]
    2da6:	2b01      	cmp	r3, #1
    2da8:	d01c      	beq.n	2de4 <_gpio_set_direction+0x50>
    2daa:	2b02      	cmp	r3, #2
    2dac:	d037      	beq.n	2e1e <_gpio_set_direction+0x8a>
    2dae:	2b00      	cmp	r3, #0
    2db0:	d14e      	bne.n	2e50 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    2db2:	79fb      	ldrb	r3, [r7, #7]
    2db4:	683a      	ldr	r2, [r7, #0]
    2db6:	4619      	mov	r1, r3
    2db8:	482a      	ldr	r0, [pc, #168]	; (2e64 <_gpio_set_direction+0xd0>)
    2dba:	4b2b      	ldr	r3, [pc, #172]	; (2e68 <_gpio_set_direction+0xd4>)
    2dbc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2dbe:	683b      	ldr	r3, [r7, #0]
    2dc0:	b29b      	uxth	r3, r3
    2dc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2dc6:	79fb      	ldrb	r3, [r7, #7]
    2dc8:	4619      	mov	r1, r3
    2dca:	4826      	ldr	r0, [pc, #152]	; (2e64 <_gpio_set_direction+0xd0>)
    2dcc:	4b27      	ldr	r3, [pc, #156]	; (2e6c <_gpio_set_direction+0xd8>)
    2dce:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2dd0:	683b      	ldr	r3, [r7, #0]
    2dd2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2dd4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2dd8:	79fb      	ldrb	r3, [r7, #7]
    2dda:	4619      	mov	r1, r3
    2ddc:	4821      	ldr	r0, [pc, #132]	; (2e64 <_gpio_set_direction+0xd0>)
    2dde:	4b23      	ldr	r3, [pc, #140]	; (2e6c <_gpio_set_direction+0xd8>)
    2de0:	4798      	blx	r3
		break;
    2de2:	e03a      	b.n	2e5a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    2de4:	79fb      	ldrb	r3, [r7, #7]
    2de6:	683a      	ldr	r2, [r7, #0]
    2de8:	4619      	mov	r1, r3
    2dea:	481e      	ldr	r0, [pc, #120]	; (2e64 <_gpio_set_direction+0xd0>)
    2dec:	4b1e      	ldr	r3, [pc, #120]	; (2e68 <_gpio_set_direction+0xd4>)
    2dee:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    2df0:	683b      	ldr	r3, [r7, #0]
    2df2:	b29b      	uxth	r3, r3
    2df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    2df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2dfc:	79f9      	ldrb	r1, [r7, #7]
    2dfe:	461a      	mov	r2, r3
    2e00:	4818      	ldr	r0, [pc, #96]	; (2e64 <_gpio_set_direction+0xd0>)
    2e02:	4b1a      	ldr	r3, [pc, #104]	; (2e6c <_gpio_set_direction+0xd8>)
    2e04:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    2e06:	683b      	ldr	r3, [r7, #0]
    2e08:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2e0a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    2e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2e12:	79f9      	ldrb	r1, [r7, #7]
    2e14:	461a      	mov	r2, r3
    2e16:	4813      	ldr	r0, [pc, #76]	; (2e64 <_gpio_set_direction+0xd0>)
    2e18:	4b14      	ldr	r3, [pc, #80]	; (2e6c <_gpio_set_direction+0xd8>)
    2e1a:	4798      	blx	r3
		break;
    2e1c:	e01d      	b.n	2e5a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    2e1e:	79fb      	ldrb	r3, [r7, #7]
    2e20:	683a      	ldr	r2, [r7, #0]
    2e22:	4619      	mov	r1, r3
    2e24:	480f      	ldr	r0, [pc, #60]	; (2e64 <_gpio_set_direction+0xd0>)
    2e26:	4b12      	ldr	r3, [pc, #72]	; (2e70 <_gpio_set_direction+0xdc>)
    2e28:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2e2a:	683b      	ldr	r3, [r7, #0]
    2e2c:	b29b      	uxth	r3, r3
    2e2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2e32:	79fb      	ldrb	r3, [r7, #7]
    2e34:	4619      	mov	r1, r3
    2e36:	480b      	ldr	r0, [pc, #44]	; (2e64 <_gpio_set_direction+0xd0>)
    2e38:	4b0c      	ldr	r3, [pc, #48]	; (2e6c <_gpio_set_direction+0xd8>)
    2e3a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2e3c:	683b      	ldr	r3, [r7, #0]
    2e3e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2e40:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2e44:	79fb      	ldrb	r3, [r7, #7]
    2e46:	4619      	mov	r1, r3
    2e48:	4806      	ldr	r0, [pc, #24]	; (2e64 <_gpio_set_direction+0xd0>)
    2e4a:	4b08      	ldr	r3, [pc, #32]	; (2e6c <_gpio_set_direction+0xd8>)
    2e4c:	4798      	blx	r3
		break;
    2e4e:	e004      	b.n	2e5a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    2e50:	2246      	movs	r2, #70	; 0x46
    2e52:	4908      	ldr	r1, [pc, #32]	; (2e74 <_gpio_set_direction+0xe0>)
    2e54:	2000      	movs	r0, #0
    2e56:	4b08      	ldr	r3, [pc, #32]	; (2e78 <_gpio_set_direction+0xe4>)
    2e58:	4798      	blx	r3
	}
}
    2e5a:	bf00      	nop
    2e5c:	3708      	adds	r7, #8
    2e5e:	46bd      	mov	sp, r7
    2e60:	bd80      	pop	{r7, pc}
    2e62:	bf00      	nop
    2e64:	41008000 	.word	0x41008000
    2e68:	00002b53 	.word	0x00002b53
    2e6c:	00002d6b 	.word	0x00002d6b
    2e70:	00002b2b 	.word	0x00002b2b
    2e74:	00011968 	.word	0x00011968
    2e78:	0000579d 	.word	0x0000579d

00002e7c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b082      	sub	sp, #8
    2e80:	af00      	add	r7, sp, #0
    2e82:	4603      	mov	r3, r0
    2e84:	6039      	str	r1, [r7, #0]
    2e86:	71fb      	strb	r3, [r7, #7]
    2e88:	4613      	mov	r3, r2
    2e8a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    2e8c:	79bb      	ldrb	r3, [r7, #6]
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d006      	beq.n	2ea0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    2e92:	79fb      	ldrb	r3, [r7, #7]
    2e94:	683a      	ldr	r2, [r7, #0]
    2e96:	4619      	mov	r1, r3
    2e98:	4806      	ldr	r0, [pc, #24]	; (2eb4 <_gpio_set_level+0x38>)
    2e9a:	4b07      	ldr	r3, [pc, #28]	; (2eb8 <_gpio_set_level+0x3c>)
    2e9c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    2e9e:	e005      	b.n	2eac <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    2ea0:	79fb      	ldrb	r3, [r7, #7]
    2ea2:	683a      	ldr	r2, [r7, #0]
    2ea4:	4619      	mov	r1, r3
    2ea6:	4803      	ldr	r0, [pc, #12]	; (2eb4 <_gpio_set_level+0x38>)
    2ea8:	4b04      	ldr	r3, [pc, #16]	; (2ebc <_gpio_set_level+0x40>)
    2eaa:	4798      	blx	r3
}
    2eac:	bf00      	nop
    2eae:	3708      	adds	r7, #8
    2eb0:	46bd      	mov	sp, r7
    2eb2:	bd80      	pop	{r7, pc}
    2eb4:	41008000 	.word	0x41008000
    2eb8:	00002b7b 	.word	0x00002b7b
    2ebc:	00002ba3 	.word	0x00002ba3

00002ec0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b082      	sub	sp, #8
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	4603      	mov	r3, r0
    2ec8:	71fb      	strb	r3, [r7, #7]
    2eca:	460b      	mov	r3, r1
    2ecc:	71bb      	strb	r3, [r7, #6]
    2ece:	4613      	mov	r3, r2
    2ed0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    2ed2:	797b      	ldrb	r3, [r7, #5]
    2ed4:	2b01      	cmp	r3, #1
    2ed6:	d00a      	beq.n	2eee <_gpio_set_pin_pull_mode+0x2e>
    2ed8:	2b02      	cmp	r3, #2
    2eda:	d01f      	beq.n	2f1c <_gpio_set_pin_pull_mode+0x5c>
    2edc:	2b00      	cmp	r3, #0
    2ede:	d134      	bne.n	2f4a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    2ee0:	79ba      	ldrb	r2, [r7, #6]
    2ee2:	79fb      	ldrb	r3, [r7, #7]
    2ee4:	4619      	mov	r1, r3
    2ee6:	481e      	ldr	r0, [pc, #120]	; (2f60 <_gpio_set_pin_pull_mode+0xa0>)
    2ee8:	4b1e      	ldr	r3, [pc, #120]	; (2f64 <_gpio_set_pin_pull_mode+0xa4>)
    2eea:	4798      	blx	r3
		break;
    2eec:	e033      	b.n	2f56 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2eee:	79bb      	ldrb	r3, [r7, #6]
    2ef0:	2201      	movs	r2, #1
    2ef2:	409a      	lsls	r2, r3
    2ef4:	79fb      	ldrb	r3, [r7, #7]
    2ef6:	4619      	mov	r1, r3
    2ef8:	4819      	ldr	r0, [pc, #100]	; (2f60 <_gpio_set_pin_pull_mode+0xa0>)
    2efa:	4b1b      	ldr	r3, [pc, #108]	; (2f68 <_gpio_set_pin_pull_mode+0xa8>)
    2efc:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2efe:	79ba      	ldrb	r2, [r7, #6]
    2f00:	79fb      	ldrb	r3, [r7, #7]
    2f02:	4619      	mov	r1, r3
    2f04:	4816      	ldr	r0, [pc, #88]	; (2f60 <_gpio_set_pin_pull_mode+0xa0>)
    2f06:	4b19      	ldr	r3, [pc, #100]	; (2f6c <_gpio_set_pin_pull_mode+0xac>)
    2f08:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    2f0a:	79bb      	ldrb	r3, [r7, #6]
    2f0c:	2201      	movs	r2, #1
    2f0e:	409a      	lsls	r2, r3
    2f10:	79fb      	ldrb	r3, [r7, #7]
    2f12:	4619      	mov	r1, r3
    2f14:	4812      	ldr	r0, [pc, #72]	; (2f60 <_gpio_set_pin_pull_mode+0xa0>)
    2f16:	4b16      	ldr	r3, [pc, #88]	; (2f70 <_gpio_set_pin_pull_mode+0xb0>)
    2f18:	4798      	blx	r3
		break;
    2f1a:	e01c      	b.n	2f56 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2f1c:	79bb      	ldrb	r3, [r7, #6]
    2f1e:	2201      	movs	r2, #1
    2f20:	409a      	lsls	r2, r3
    2f22:	79fb      	ldrb	r3, [r7, #7]
    2f24:	4619      	mov	r1, r3
    2f26:	480e      	ldr	r0, [pc, #56]	; (2f60 <_gpio_set_pin_pull_mode+0xa0>)
    2f28:	4b0f      	ldr	r3, [pc, #60]	; (2f68 <_gpio_set_pin_pull_mode+0xa8>)
    2f2a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2f2c:	79ba      	ldrb	r2, [r7, #6]
    2f2e:	79fb      	ldrb	r3, [r7, #7]
    2f30:	4619      	mov	r1, r3
    2f32:	480b      	ldr	r0, [pc, #44]	; (2f60 <_gpio_set_pin_pull_mode+0xa0>)
    2f34:	4b0d      	ldr	r3, [pc, #52]	; (2f6c <_gpio_set_pin_pull_mode+0xac>)
    2f36:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    2f38:	79bb      	ldrb	r3, [r7, #6]
    2f3a:	2201      	movs	r2, #1
    2f3c:	409a      	lsls	r2, r3
    2f3e:	79fb      	ldrb	r3, [r7, #7]
    2f40:	4619      	mov	r1, r3
    2f42:	4807      	ldr	r0, [pc, #28]	; (2f60 <_gpio_set_pin_pull_mode+0xa0>)
    2f44:	4b0b      	ldr	r3, [pc, #44]	; (2f74 <_gpio_set_pin_pull_mode+0xb4>)
    2f46:	4798      	blx	r3
		break;
    2f48:	e005      	b.n	2f56 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    2f4a:	2289      	movs	r2, #137	; 0x89
    2f4c:	490a      	ldr	r1, [pc, #40]	; (2f78 <_gpio_set_pin_pull_mode+0xb8>)
    2f4e:	2000      	movs	r0, #0
    2f50:	4b0a      	ldr	r3, [pc, #40]	; (2f7c <_gpio_set_pin_pull_mode+0xbc>)
    2f52:	4798      	blx	r3
		break;
    2f54:	bf00      	nop
	}
}
    2f56:	bf00      	nop
    2f58:	3708      	adds	r7, #8
    2f5a:	46bd      	mov	sp, r7
    2f5c:	bd80      	pop	{r7, pc}
    2f5e:	bf00      	nop
    2f60:	41008000 	.word	0x41008000
    2f64:	00002d27 	.word	0x00002d27
    2f68:	00002b53 	.word	0x00002b53
    2f6c:	00002ce3 	.word	0x00002ce3
    2f70:	00002b7b 	.word	0x00002b7b
    2f74:	00002ba3 	.word	0x00002ba3
    2f78:	00011968 	.word	0x00011968
    2f7c:	0000579d 	.word	0x0000579d

00002f80 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    2f80:	b590      	push	{r4, r7, lr}
    2f82:	b085      	sub	sp, #20
    2f84:	af00      	add	r7, sp, #0
    2f86:	6078      	str	r0, [r7, #4]
    2f88:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    2f8a:	687b      	ldr	r3, [r7, #4]
    2f8c:	095b      	lsrs	r3, r3, #5
    2f8e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	b2db      	uxtb	r3, r3
    2f94:	f003 031f 	and.w	r3, r3, #31
    2f98:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    2f9a:	683b      	ldr	r3, [r7, #0]
    2f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2fa0:	d106      	bne.n	2fb0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    2fa2:	7bba      	ldrb	r2, [r7, #14]
    2fa4:	7bf9      	ldrb	r1, [r7, #15]
    2fa6:	2300      	movs	r3, #0
    2fa8:	4812      	ldr	r0, [pc, #72]	; (2ff4 <_gpio_set_pin_function+0x74>)
    2faa:	4c13      	ldr	r4, [pc, #76]	; (2ff8 <_gpio_set_pin_function+0x78>)
    2fac:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    2fae:	e01d      	b.n	2fec <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    2fb0:	7bba      	ldrb	r2, [r7, #14]
    2fb2:	7bf9      	ldrb	r1, [r7, #15]
    2fb4:	2301      	movs	r3, #1
    2fb6:	480f      	ldr	r0, [pc, #60]	; (2ff4 <_gpio_set_pin_function+0x74>)
    2fb8:	4c0f      	ldr	r4, [pc, #60]	; (2ff8 <_gpio_set_pin_function+0x78>)
    2fba:	47a0      	blx	r4
		if (pin & 1) {
    2fbc:	7bbb      	ldrb	r3, [r7, #14]
    2fbe:	f003 0301 	and.w	r3, r3, #1
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d009      	beq.n	2fda <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    2fc6:	7bbb      	ldrb	r3, [r7, #14]
    2fc8:	085b      	lsrs	r3, r3, #1
    2fca:	b2da      	uxtb	r2, r3
    2fcc:	683b      	ldr	r3, [r7, #0]
    2fce:	b2db      	uxtb	r3, r3
    2fd0:	7bf9      	ldrb	r1, [r7, #15]
    2fd2:	4808      	ldr	r0, [pc, #32]	; (2ff4 <_gpio_set_pin_function+0x74>)
    2fd4:	4c09      	ldr	r4, [pc, #36]	; (2ffc <_gpio_set_pin_function+0x7c>)
    2fd6:	47a0      	blx	r4
}
    2fd8:	e008      	b.n	2fec <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2fda:	7bbb      	ldrb	r3, [r7, #14]
    2fdc:	085b      	lsrs	r3, r3, #1
    2fde:	b2da      	uxtb	r2, r3
    2fe0:	683b      	ldr	r3, [r7, #0]
    2fe2:	b2db      	uxtb	r3, r3
    2fe4:	7bf9      	ldrb	r1, [r7, #15]
    2fe6:	4803      	ldr	r0, [pc, #12]	; (2ff4 <_gpio_set_pin_function+0x74>)
    2fe8:	4c05      	ldr	r4, [pc, #20]	; (3000 <_gpio_set_pin_function+0x80>)
    2fea:	47a0      	blx	r4
}
    2fec:	bf00      	nop
    2fee:	3714      	adds	r7, #20
    2ff0:	46bd      	mov	sp, r7
    2ff2:	bd90      	pop	{r4, r7, pc}
    2ff4:	41008000 	.word	0x41008000
    2ff8:	00002c89 	.word	0x00002c89
    2ffc:	00002c2b 	.word	0x00002c2b
    3000:	00002bcb 	.word	0x00002bcb

00003004 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    3004:	b580      	push	{r7, lr}
    3006:	b082      	sub	sp, #8
    3008:	af00      	add	r7, sp, #0
    300a:	4603      	mov	r3, r0
    300c:	460a      	mov	r2, r1
    300e:	71fb      	strb	r3, [r7, #7]
    3010:	4613      	mov	r3, r2
    3012:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3014:	79fb      	ldrb	r3, [r7, #7]
    3016:	095b      	lsrs	r3, r3, #5
    3018:	b2d8      	uxtb	r0, r3
    301a:	79fb      	ldrb	r3, [r7, #7]
    301c:	f003 031f 	and.w	r3, r3, #31
    3020:	b2db      	uxtb	r3, r3
    3022:	79ba      	ldrb	r2, [r7, #6]
    3024:	4619      	mov	r1, r3
    3026:	4b03      	ldr	r3, [pc, #12]	; (3034 <gpio_set_pin_pull_mode+0x30>)
    3028:	4798      	blx	r3
}
    302a:	bf00      	nop
    302c:	3708      	adds	r7, #8
    302e:	46bd      	mov	sp, r7
    3030:	bd80      	pop	{r7, pc}
    3032:	bf00      	nop
    3034:	00002ec1 	.word	0x00002ec1

00003038 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3038:	b580      	push	{r7, lr}
    303a:	b082      	sub	sp, #8
    303c:	af00      	add	r7, sp, #0
    303e:	6078      	str	r0, [r7, #4]
    3040:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3042:	6839      	ldr	r1, [r7, #0]
    3044:	6878      	ldr	r0, [r7, #4]
    3046:	4b03      	ldr	r3, [pc, #12]	; (3054 <gpio_set_pin_function+0x1c>)
    3048:	4798      	blx	r3
}
    304a:	bf00      	nop
    304c:	3708      	adds	r7, #8
    304e:	46bd      	mov	sp, r7
    3050:	bd80      	pop	{r7, pc}
    3052:	bf00      	nop
    3054:	00002f81 	.word	0x00002f81

00003058 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3058:	b580      	push	{r7, lr}
    305a:	b082      	sub	sp, #8
    305c:	af00      	add	r7, sp, #0
    305e:	4603      	mov	r3, r0
    3060:	460a      	mov	r2, r1
    3062:	71fb      	strb	r3, [r7, #7]
    3064:	4613      	mov	r3, r2
    3066:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3068:	79fb      	ldrb	r3, [r7, #7]
    306a:	095b      	lsrs	r3, r3, #5
    306c:	b2d8      	uxtb	r0, r3
    306e:	79fb      	ldrb	r3, [r7, #7]
    3070:	f003 031f 	and.w	r3, r3, #31
    3074:	2201      	movs	r2, #1
    3076:	fa02 f303 	lsl.w	r3, r2, r3
    307a:	79ba      	ldrb	r2, [r7, #6]
    307c:	4619      	mov	r1, r3
    307e:	4b03      	ldr	r3, [pc, #12]	; (308c <gpio_set_pin_direction+0x34>)
    3080:	4798      	blx	r3
}
    3082:	bf00      	nop
    3084:	3708      	adds	r7, #8
    3086:	46bd      	mov	sp, r7
    3088:	bd80      	pop	{r7, pc}
    308a:	bf00      	nop
    308c:	00002d95 	.word	0x00002d95

00003090 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3090:	b580      	push	{r7, lr}
    3092:	b082      	sub	sp, #8
    3094:	af00      	add	r7, sp, #0
    3096:	4603      	mov	r3, r0
    3098:	460a      	mov	r2, r1
    309a:	71fb      	strb	r3, [r7, #7]
    309c:	4613      	mov	r3, r2
    309e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    30a0:	79fb      	ldrb	r3, [r7, #7]
    30a2:	095b      	lsrs	r3, r3, #5
    30a4:	b2d8      	uxtb	r0, r3
    30a6:	79fb      	ldrb	r3, [r7, #7]
    30a8:	f003 031f 	and.w	r3, r3, #31
    30ac:	2201      	movs	r2, #1
    30ae:	fa02 f303 	lsl.w	r3, r2, r3
    30b2:	79ba      	ldrb	r2, [r7, #6]
    30b4:	4619      	mov	r1, r3
    30b6:	4b03      	ldr	r3, [pc, #12]	; (30c4 <gpio_set_pin_level+0x34>)
    30b8:	4798      	blx	r3
}
    30ba:	bf00      	nop
    30bc:	3708      	adds	r7, #8
    30be:	46bd      	mov	sp, r7
    30c0:	bd80      	pop	{r7, pc}
    30c2:	bf00      	nop
    30c4:	00002e7d 	.word	0x00002e7d

000030c8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    30c8:	b580      	push	{r7, lr}
    30ca:	af00      	add	r7, sp, #0
	_init_chip();
    30cc:	4b01      	ldr	r3, [pc, #4]	; (30d4 <init_mcu+0xc>)
    30ce:	4798      	blx	r3
}
    30d0:	bf00      	nop
    30d2:	bd80      	pop	{r7, pc}
    30d4:	00006399 	.word	0x00006399

000030d8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b082      	sub	sp, #8
    30dc:	af00      	add	r7, sp, #0
    30de:	6078      	str	r0, [r7, #4]
    30e0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	2b00      	cmp	r3, #0
    30e6:	d004      	beq.n	30f2 <wdt_init+0x1a>
    30e8:	683b      	ldr	r3, [r7, #0]
    30ea:	2b00      	cmp	r3, #0
    30ec:	d001      	beq.n	30f2 <wdt_init+0x1a>
    30ee:	2301      	movs	r3, #1
    30f0:	e000      	b.n	30f4 <wdt_init+0x1c>
    30f2:	2300      	movs	r3, #0
    30f4:	f003 0301 	and.w	r3, r3, #1
    30f8:	b2db      	uxtb	r3, r3
    30fa:	2248      	movs	r2, #72	; 0x48
    30fc:	4907      	ldr	r1, [pc, #28]	; (311c <wdt_init+0x44>)
    30fe:	4618      	mov	r0, r3
    3100:	4b07      	ldr	r3, [pc, #28]	; (3120 <wdt_init+0x48>)
    3102:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    3104:	687b      	ldr	r3, [r7, #4]
    3106:	683a      	ldr	r2, [r7, #0]
    3108:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    310a:	687b      	ldr	r3, [r7, #4]
    310c:	4618      	mov	r0, r3
    310e:	4b05      	ldr	r3, [pc, #20]	; (3124 <wdt_init+0x4c>)
    3110:	4798      	blx	r3
    3112:	4603      	mov	r3, r0
}
    3114:	4618      	mov	r0, r3
    3116:	3708      	adds	r7, #8
    3118:	46bd      	mov	sp, r7
    311a:	bd80      	pop	{r7, pc}
    311c:	00011984 	.word	0x00011984
    3120:	0000579d 	.word	0x0000579d
    3124:	0000c8e9 	.word	0x0000c8e9

00003128 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    3128:	b580      	push	{r7, lr}
    312a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    312c:	4804      	ldr	r0, [pc, #16]	; (3140 <CRC_CALC_init+0x18>)
    312e:	4b05      	ldr	r3, [pc, #20]	; (3144 <CRC_CALC_init+0x1c>)
    3130:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    3132:	4905      	ldr	r1, [pc, #20]	; (3148 <CRC_CALC_init+0x20>)
    3134:	4805      	ldr	r0, [pc, #20]	; (314c <CRC_CALC_init+0x24>)
    3136:	4b06      	ldr	r3, [pc, #24]	; (3150 <CRC_CALC_init+0x28>)
    3138:	4798      	blx	r3
}
    313a:	bf00      	nop
    313c:	bd80      	pop	{r7, pc}
    313e:	bf00      	nop
    3140:	40000800 	.word	0x40000800
    3144:	000029eb 	.word	0x000029eb
    3148:	41002000 	.word	0x41002000
    314c:	20002388 	.word	0x20002388
    3150:	00003ed1 	.word	0x00003ed1

00003154 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    3154:	b580      	push	{r7, lr}
    3156:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3158:	2244      	movs	r2, #68	; 0x44
    315a:	2104      	movs	r1, #4
    315c:	481e      	ldr	r0, [pc, #120]	; (31d8 <EXTERNAL_IRQ_0_init+0x84>)
    315e:	4b1f      	ldr	r3, [pc, #124]	; (31dc <EXTERNAL_IRQ_0_init+0x88>)
    3160:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    3162:	481f      	ldr	r0, [pc, #124]	; (31e0 <EXTERNAL_IRQ_0_init+0x8c>)
    3164:	4b1f      	ldr	r3, [pc, #124]	; (31e4 <EXTERNAL_IRQ_0_init+0x90>)
    3166:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    3168:	2101      	movs	r1, #1
    316a:	2004      	movs	r0, #4
    316c:	4b1e      	ldr	r3, [pc, #120]	; (31e8 <EXTERNAL_IRQ_0_init+0x94>)
    316e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    3170:	2102      	movs	r1, #2
    3172:	2004      	movs	r0, #4
    3174:	4b1d      	ldr	r3, [pc, #116]	; (31ec <EXTERNAL_IRQ_0_init+0x98>)
    3176:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    3178:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    317c:	2004      	movs	r0, #4
    317e:	4b1c      	ldr	r3, [pc, #112]	; (31f0 <EXTERNAL_IRQ_0_init+0x9c>)
    3180:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    3182:	2101      	movs	r1, #1
    3184:	2005      	movs	r0, #5
    3186:	4b18      	ldr	r3, [pc, #96]	; (31e8 <EXTERNAL_IRQ_0_init+0x94>)
    3188:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    318a:	2102      	movs	r1, #2
    318c:	2005      	movs	r0, #5
    318e:	4b17      	ldr	r3, [pc, #92]	; (31ec <EXTERNAL_IRQ_0_init+0x98>)
    3190:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    3192:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3196:	2005      	movs	r0, #5
    3198:	4b15      	ldr	r3, [pc, #84]	; (31f0 <EXTERNAL_IRQ_0_init+0x9c>)
    319a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    319c:	2101      	movs	r1, #1
    319e:	2056      	movs	r0, #86	; 0x56
    31a0:	4b11      	ldr	r3, [pc, #68]	; (31e8 <EXTERNAL_IRQ_0_init+0x94>)
    31a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    31a4:	2102      	movs	r1, #2
    31a6:	2056      	movs	r0, #86	; 0x56
    31a8:	4b10      	ldr	r3, [pc, #64]	; (31ec <EXTERNAL_IRQ_0_init+0x98>)
    31aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    31ac:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    31b0:	2056      	movs	r0, #86	; 0x56
    31b2:	4b0f      	ldr	r3, [pc, #60]	; (31f0 <EXTERNAL_IRQ_0_init+0x9c>)
    31b4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    31b6:	2101      	movs	r1, #1
    31b8:	2057      	movs	r0, #87	; 0x57
    31ba:	4b0b      	ldr	r3, [pc, #44]	; (31e8 <EXTERNAL_IRQ_0_init+0x94>)
    31bc:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    31be:	2102      	movs	r1, #2
    31c0:	2057      	movs	r0, #87	; 0x57
    31c2:	4b0a      	ldr	r3, [pc, #40]	; (31ec <EXTERNAL_IRQ_0_init+0x98>)
    31c4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    31c6:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    31ca:	2057      	movs	r0, #87	; 0x57
    31cc:	4b08      	ldr	r3, [pc, #32]	; (31f0 <EXTERNAL_IRQ_0_init+0x9c>)
    31ce:	4798      	blx	r3

	ext_irq_init();
    31d0:	4b08      	ldr	r3, [pc, #32]	; (31f4 <EXTERNAL_IRQ_0_init+0xa0>)
    31d2:	4798      	blx	r3
}
    31d4:	bf00      	nop
    31d6:	bd80      	pop	{r7, pc}
    31d8:	40001c00 	.word	0x40001c00
    31dc:	00002885 	.word	0x00002885
    31e0:	40000800 	.word	0x40000800
    31e4:	0000296b 	.word	0x0000296b
    31e8:	00003059 	.word	0x00003059
    31ec:	00003005 	.word	0x00003005
    31f0:	00003039 	.word	0x00003039
    31f4:	00003f99 	.word	0x00003f99

000031f8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    31f8:	b580      	push	{r7, lr}
    31fa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    31fc:	2244      	movs	r2, #68	; 0x44
    31fe:	210b      	movs	r1, #11
    3200:	4804      	ldr	r0, [pc, #16]	; (3214 <EVENT_SYSTEM_0_init+0x1c>)
    3202:	4b05      	ldr	r3, [pc, #20]	; (3218 <EVENT_SYSTEM_0_init+0x20>)
    3204:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    3206:	4805      	ldr	r0, [pc, #20]	; (321c <EVENT_SYSTEM_0_init+0x24>)
    3208:	4b05      	ldr	r3, [pc, #20]	; (3220 <EVENT_SYSTEM_0_init+0x28>)
    320a:	4798      	blx	r3

	event_system_init();
    320c:	4b05      	ldr	r3, [pc, #20]	; (3224 <EVENT_SYSTEM_0_init+0x2c>)
    320e:	4798      	blx	r3
}
    3210:	bf00      	nop
    3212:	bd80      	pop	{r7, pc}
    3214:	40001c00 	.word	0x40001c00
    3218:	00002885 	.word	0x00002885
    321c:	40000800 	.word	0x40000800
    3220:	00002a0b 	.word	0x00002a0b
    3224:	00003f85 	.word	0x00003f85

00003228 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    3228:	b580      	push	{r7, lr}
    322a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    322c:	2101      	movs	r1, #1
    322e:	202b      	movs	r0, #43	; 0x2b
    3230:	4b2b      	ldr	r3, [pc, #172]	; (32e0 <QSPI_N25Q256_PORT_init+0xb8>)
    3232:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3234:	2100      	movs	r1, #0
    3236:	202b      	movs	r0, #43	; 0x2b
    3238:	4b2a      	ldr	r3, [pc, #168]	; (32e4 <QSPI_N25Q256_PORT_init+0xbc>)
    323a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    323c:	492a      	ldr	r1, [pc, #168]	; (32e8 <QSPI_N25Q256_PORT_init+0xc0>)
    323e:	202b      	movs	r0, #43	; 0x2b
    3240:	4b2a      	ldr	r3, [pc, #168]	; (32ec <QSPI_N25Q256_PORT_init+0xc4>)
    3242:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3244:	2102      	movs	r1, #2
    3246:	2008      	movs	r0, #8
    3248:	4b25      	ldr	r3, [pc, #148]	; (32e0 <QSPI_N25Q256_PORT_init+0xb8>)
    324a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    324c:	2100      	movs	r1, #0
    324e:	2008      	movs	r0, #8
    3250:	4b27      	ldr	r3, [pc, #156]	; (32f0 <QSPI_N25Q256_PORT_init+0xc8>)
    3252:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    3254:	2100      	movs	r1, #0
    3256:	2008      	movs	r0, #8
    3258:	4b22      	ldr	r3, [pc, #136]	; (32e4 <QSPI_N25Q256_PORT_init+0xbc>)
    325a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    325c:	4925      	ldr	r1, [pc, #148]	; (32f4 <QSPI_N25Q256_PORT_init+0xcc>)
    325e:	2008      	movs	r0, #8
    3260:	4b22      	ldr	r3, [pc, #136]	; (32ec <QSPI_N25Q256_PORT_init+0xc4>)
    3262:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    3264:	2102      	movs	r1, #2
    3266:	2009      	movs	r0, #9
    3268:	4b1d      	ldr	r3, [pc, #116]	; (32e0 <QSPI_N25Q256_PORT_init+0xb8>)
    326a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    326c:	2100      	movs	r1, #0
    326e:	2009      	movs	r0, #9
    3270:	4b1f      	ldr	r3, [pc, #124]	; (32f0 <QSPI_N25Q256_PORT_init+0xc8>)
    3272:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    3274:	2100      	movs	r1, #0
    3276:	2009      	movs	r0, #9
    3278:	4b1a      	ldr	r3, [pc, #104]	; (32e4 <QSPI_N25Q256_PORT_init+0xbc>)
    327a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    327c:	491e      	ldr	r1, [pc, #120]	; (32f8 <QSPI_N25Q256_PORT_init+0xd0>)
    327e:	2009      	movs	r0, #9
    3280:	4b1a      	ldr	r3, [pc, #104]	; (32ec <QSPI_N25Q256_PORT_init+0xc4>)
    3282:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3284:	2102      	movs	r1, #2
    3286:	200a      	movs	r0, #10
    3288:	4b15      	ldr	r3, [pc, #84]	; (32e0 <QSPI_N25Q256_PORT_init+0xb8>)
    328a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    328c:	2100      	movs	r1, #0
    328e:	200a      	movs	r0, #10
    3290:	4b17      	ldr	r3, [pc, #92]	; (32f0 <QSPI_N25Q256_PORT_init+0xc8>)
    3292:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3294:	2100      	movs	r1, #0
    3296:	200a      	movs	r0, #10
    3298:	4b12      	ldr	r3, [pc, #72]	; (32e4 <QSPI_N25Q256_PORT_init+0xbc>)
    329a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    329c:	4917      	ldr	r1, [pc, #92]	; (32fc <QSPI_N25Q256_PORT_init+0xd4>)
    329e:	200a      	movs	r0, #10
    32a0:	4b12      	ldr	r3, [pc, #72]	; (32ec <QSPI_N25Q256_PORT_init+0xc4>)
    32a2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    32a4:	2102      	movs	r1, #2
    32a6:	200b      	movs	r0, #11
    32a8:	4b0d      	ldr	r3, [pc, #52]	; (32e0 <QSPI_N25Q256_PORT_init+0xb8>)
    32aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    32ac:	2100      	movs	r1, #0
    32ae:	200b      	movs	r0, #11
    32b0:	4b0f      	ldr	r3, [pc, #60]	; (32f0 <QSPI_N25Q256_PORT_init+0xc8>)
    32b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    32b4:	2100      	movs	r1, #0
    32b6:	200b      	movs	r0, #11
    32b8:	4b0a      	ldr	r3, [pc, #40]	; (32e4 <QSPI_N25Q256_PORT_init+0xbc>)
    32ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    32bc:	4910      	ldr	r1, [pc, #64]	; (3300 <QSPI_N25Q256_PORT_init+0xd8>)
    32be:	200b      	movs	r0, #11
    32c0:	4b0a      	ldr	r3, [pc, #40]	; (32ec <QSPI_N25Q256_PORT_init+0xc4>)
    32c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    32c4:	2101      	movs	r1, #1
    32c6:	202a      	movs	r0, #42	; 0x2a
    32c8:	4b05      	ldr	r3, [pc, #20]	; (32e0 <QSPI_N25Q256_PORT_init+0xb8>)
    32ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    32cc:	2100      	movs	r1, #0
    32ce:	202a      	movs	r0, #42	; 0x2a
    32d0:	4b04      	ldr	r3, [pc, #16]	; (32e4 <QSPI_N25Q256_PORT_init+0xbc>)
    32d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    32d4:	490b      	ldr	r1, [pc, #44]	; (3304 <QSPI_N25Q256_PORT_init+0xdc>)
    32d6:	202a      	movs	r0, #42	; 0x2a
    32d8:	4b04      	ldr	r3, [pc, #16]	; (32ec <QSPI_N25Q256_PORT_init+0xc4>)
    32da:	4798      	blx	r3
}
    32dc:	bf00      	nop
    32de:	bd80      	pop	{r7, pc}
    32e0:	00003059 	.word	0x00003059
    32e4:	00003005 	.word	0x00003005
    32e8:	002b0007 	.word	0x002b0007
    32ec:	00003039 	.word	0x00003039
    32f0:	00003091 	.word	0x00003091
    32f4:	00080007 	.word	0x00080007
    32f8:	00090007 	.word	0x00090007
    32fc:	000a0007 	.word	0x000a0007
    3300:	000b0007 	.word	0x000b0007
    3304:	002a0007 	.word	0x002a0007

00003308 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3308:	b580      	push	{r7, lr}
    330a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    330c:	4805      	ldr	r0, [pc, #20]	; (3324 <QSPI_N25Q256_CLOCK_init+0x1c>)
    330e:	4b06      	ldr	r3, [pc, #24]	; (3328 <QSPI_N25Q256_CLOCK_init+0x20>)
    3310:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    3312:	4804      	ldr	r0, [pc, #16]	; (3324 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3314:	4b05      	ldr	r3, [pc, #20]	; (332c <QSPI_N25Q256_CLOCK_init+0x24>)
    3316:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3318:	4802      	ldr	r0, [pc, #8]	; (3324 <QSPI_N25Q256_CLOCK_init+0x1c>)
    331a:	4b05      	ldr	r3, [pc, #20]	; (3330 <QSPI_N25Q256_CLOCK_init+0x28>)
    331c:	4798      	blx	r3
}
    331e:	bf00      	nop
    3320:	bd80      	pop	{r7, pc}
    3322:	bf00      	nop
    3324:	40000800 	.word	0x40000800
    3328:	000028cb 	.word	0x000028cb
    332c:	0000290b 	.word	0x0000290b
    3330:	00002a6b 	.word	0x00002a6b

00003334 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3334:	b580      	push	{r7, lr}
    3336:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3338:	4b04      	ldr	r3, [pc, #16]	; (334c <QSPI_N25Q256_init+0x18>)
    333a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    333c:	4904      	ldr	r1, [pc, #16]	; (3350 <QSPI_N25Q256_init+0x1c>)
    333e:	4805      	ldr	r0, [pc, #20]	; (3354 <QSPI_N25Q256_init+0x20>)
    3340:	4b05      	ldr	r3, [pc, #20]	; (3358 <QSPI_N25Q256_init+0x24>)
    3342:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3344:	4b05      	ldr	r3, [pc, #20]	; (335c <QSPI_N25Q256_init+0x28>)
    3346:	4798      	blx	r3
}
    3348:	bf00      	nop
    334a:	bd80      	pop	{r7, pc}
    334c:	00003309 	.word	0x00003309
    3350:	42003400 	.word	0x42003400
    3354:	2000222c 	.word	0x2000222c
    3358:	00004339 	.word	0x00004339
    335c:	00003229 	.word	0x00003229

00003360 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    3360:	b580      	push	{r7, lr}
    3362:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3364:	4802      	ldr	r0, [pc, #8]	; (3370 <DATETIME_CLOCK_CLOCK_init+0x10>)
    3366:	4b03      	ldr	r3, [pc, #12]	; (3374 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3368:	4798      	blx	r3
}
    336a:	bf00      	nop
    336c:	bd80      	pop	{r7, pc}
    336e:	bf00      	nop
    3370:	40000800 	.word	0x40000800
    3374:	0000294b 	.word	0x0000294b

00003378 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3378:	b580      	push	{r7, lr}
    337a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    337c:	4b03      	ldr	r3, [pc, #12]	; (338c <DATETIME_CLOCK_init+0x14>)
    337e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    3380:	4903      	ldr	r1, [pc, #12]	; (3390 <DATETIME_CLOCK_init+0x18>)
    3382:	4804      	ldr	r0, [pc, #16]	; (3394 <DATETIME_CLOCK_init+0x1c>)
    3384:	4b04      	ldr	r3, [pc, #16]	; (3398 <DATETIME_CLOCK_init+0x20>)
    3386:	4798      	blx	r3
}
    3388:	bf00      	nop
    338a:	bd80      	pop	{r7, pc}
    338c:	00003361 	.word	0x00003361
    3390:	40002400 	.word	0x40002400
    3394:	20002364 	.word	0x20002364
    3398:	00003d25 	.word	0x00003d25

0000339c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    339c:	b580      	push	{r7, lr}
    339e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    33a0:	2100      	movs	r1, #0
    33a2:	203b      	movs	r0, #59	; 0x3b
    33a4:	4b11      	ldr	r3, [pc, #68]	; (33ec <SPI_TEMP_PORT_init+0x50>)
    33a6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    33a8:	2102      	movs	r1, #2
    33aa:	203b      	movs	r0, #59	; 0x3b
    33ac:	4b10      	ldr	r3, [pc, #64]	; (33f0 <SPI_TEMP_PORT_init+0x54>)
    33ae:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    33b0:	4910      	ldr	r1, [pc, #64]	; (33f4 <SPI_TEMP_PORT_init+0x58>)
    33b2:	203b      	movs	r0, #59	; 0x3b
    33b4:	4b10      	ldr	r3, [pc, #64]	; (33f8 <SPI_TEMP_PORT_init+0x5c>)
    33b6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    33b8:	2100      	movs	r1, #0
    33ba:	203a      	movs	r0, #58	; 0x3a
    33bc:	4b0b      	ldr	r3, [pc, #44]	; (33ec <SPI_TEMP_PORT_init+0x50>)
    33be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    33c0:	2102      	movs	r1, #2
    33c2:	203a      	movs	r0, #58	; 0x3a
    33c4:	4b0a      	ldr	r3, [pc, #40]	; (33f0 <SPI_TEMP_PORT_init+0x54>)
    33c6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    33c8:	490c      	ldr	r1, [pc, #48]	; (33fc <SPI_TEMP_PORT_init+0x60>)
    33ca:	203a      	movs	r0, #58	; 0x3a
    33cc:	4b0a      	ldr	r3, [pc, #40]	; (33f8 <SPI_TEMP_PORT_init+0x5c>)
    33ce:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    33d0:	2101      	movs	r1, #1
    33d2:	203c      	movs	r0, #60	; 0x3c
    33d4:	4b06      	ldr	r3, [pc, #24]	; (33f0 <SPI_TEMP_PORT_init+0x54>)
    33d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    33d8:	2100      	movs	r1, #0
    33da:	203c      	movs	r0, #60	; 0x3c
    33dc:	4b08      	ldr	r3, [pc, #32]	; (3400 <SPI_TEMP_PORT_init+0x64>)
    33de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    33e0:	4908      	ldr	r1, [pc, #32]	; (3404 <SPI_TEMP_PORT_init+0x68>)
    33e2:	203c      	movs	r0, #60	; 0x3c
    33e4:	4b04      	ldr	r3, [pc, #16]	; (33f8 <SPI_TEMP_PORT_init+0x5c>)
    33e6:	4798      	blx	r3
}
    33e8:	bf00      	nop
    33ea:	bd80      	pop	{r7, pc}
    33ec:	00003091 	.word	0x00003091
    33f0:	00003059 	.word	0x00003059
    33f4:	003b0003 	.word	0x003b0003
    33f8:	00003039 	.word	0x00003039
    33fc:	003a0003 	.word	0x003a0003
    3400:	00003005 	.word	0x00003005
    3404:	003c0003 	.word	0x003c0003

00003408 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    3408:	b580      	push	{r7, lr}
    340a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    340c:	2243      	movs	r2, #67	; 0x43
    340e:	2122      	movs	r1, #34	; 0x22
    3410:	4806      	ldr	r0, [pc, #24]	; (342c <SPI_TEMP_CLOCK_init+0x24>)
    3412:	4b07      	ldr	r3, [pc, #28]	; (3430 <SPI_TEMP_CLOCK_init+0x28>)
    3414:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3416:	224a      	movs	r2, #74	; 0x4a
    3418:	2103      	movs	r1, #3
    341a:	4804      	ldr	r0, [pc, #16]	; (342c <SPI_TEMP_CLOCK_init+0x24>)
    341c:	4b04      	ldr	r3, [pc, #16]	; (3430 <SPI_TEMP_CLOCK_init+0x28>)
    341e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    3420:	4804      	ldr	r0, [pc, #16]	; (3434 <SPI_TEMP_CLOCK_init+0x2c>)
    3422:	4b05      	ldr	r3, [pc, #20]	; (3438 <SPI_TEMP_CLOCK_init+0x30>)
    3424:	4798      	blx	r3
}
    3426:	bf00      	nop
    3428:	bd80      	pop	{r7, pc}
    342a:	bf00      	nop
    342c:	40001c00 	.word	0x40001c00
    3430:	00002885 	.word	0x00002885
    3434:	40000800 	.word	0x40000800
    3438:	00002a8b 	.word	0x00002a8b

0000343c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    343c:	b580      	push	{r7, lr}
    343e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    3440:	4b05      	ldr	r3, [pc, #20]	; (3458 <SPI_TEMP_init+0x1c>)
    3442:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    3444:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    3448:	4804      	ldr	r0, [pc, #16]	; (345c <SPI_TEMP_init+0x20>)
    344a:	4b05      	ldr	r3, [pc, #20]	; (3460 <SPI_TEMP_init+0x24>)
    344c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    344e:	4b05      	ldr	r3, [pc, #20]	; (3464 <SPI_TEMP_init+0x28>)
    3450:	4798      	blx	r3
}
    3452:	bf00      	nop
    3454:	bd80      	pop	{r7, pc}
    3456:	bf00      	nop
    3458:	00003409 	.word	0x00003409
    345c:	200021e4 	.word	0x200021e4
    3460:	00004661 	.word	0x00004661
    3464:	0000339d 	.word	0x0000339d

00003468 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    3468:	b580      	push	{r7, lr}
    346a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    346c:	2100      	movs	r1, #0
    346e:	2017      	movs	r0, #23
    3470:	4b07      	ldr	r3, [pc, #28]	; (3490 <I2C_EXPANDER_PORT_init+0x28>)
    3472:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    3474:	4907      	ldr	r1, [pc, #28]	; (3494 <I2C_EXPANDER_PORT_init+0x2c>)
    3476:	2017      	movs	r0, #23
    3478:	4b07      	ldr	r3, [pc, #28]	; (3498 <I2C_EXPANDER_PORT_init+0x30>)
    347a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    347c:	2100      	movs	r1, #0
    347e:	2016      	movs	r0, #22
    3480:	4b03      	ldr	r3, [pc, #12]	; (3490 <I2C_EXPANDER_PORT_init+0x28>)
    3482:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    3484:	4905      	ldr	r1, [pc, #20]	; (349c <I2C_EXPANDER_PORT_init+0x34>)
    3486:	2016      	movs	r0, #22
    3488:	4b03      	ldr	r3, [pc, #12]	; (3498 <I2C_EXPANDER_PORT_init+0x30>)
    348a:	4798      	blx	r3
}
    348c:	bf00      	nop
    348e:	bd80      	pop	{r7, pc}
    3490:	00003005 	.word	0x00003005
    3494:	00170003 	.word	0x00170003
    3498:	00003039 	.word	0x00003039
    349c:	00160003 	.word	0x00160003

000034a0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    34a4:	2243      	movs	r2, #67	; 0x43
    34a6:	2123      	movs	r1, #35	; 0x23
    34a8:	4806      	ldr	r0, [pc, #24]	; (34c4 <I2C_EXPANDER_CLOCK_init+0x24>)
    34aa:	4b07      	ldr	r3, [pc, #28]	; (34c8 <I2C_EXPANDER_CLOCK_init+0x28>)
    34ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    34ae:	224a      	movs	r2, #74	; 0x4a
    34b0:	2103      	movs	r1, #3
    34b2:	4804      	ldr	r0, [pc, #16]	; (34c4 <I2C_EXPANDER_CLOCK_init+0x24>)
    34b4:	4b04      	ldr	r3, [pc, #16]	; (34c8 <I2C_EXPANDER_CLOCK_init+0x28>)
    34b6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    34b8:	4804      	ldr	r0, [pc, #16]	; (34cc <I2C_EXPANDER_CLOCK_init+0x2c>)
    34ba:	4b05      	ldr	r3, [pc, #20]	; (34d0 <I2C_EXPANDER_CLOCK_init+0x30>)
    34bc:	4798      	blx	r3
}
    34be:	bf00      	nop
    34c0:	bd80      	pop	{r7, pc}
    34c2:	bf00      	nop
    34c4:	40001c00 	.word	0x40001c00
    34c8:	00002885 	.word	0x00002885
    34cc:	40000800 	.word	0x40000800
    34d0:	00002aab 	.word	0x00002aab

000034d4 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    34d4:	b580      	push	{r7, lr}
    34d6:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    34d8:	4b04      	ldr	r3, [pc, #16]	; (34ec <I2C_EXPANDER_init+0x18>)
    34da:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    34dc:	4904      	ldr	r1, [pc, #16]	; (34f0 <I2C_EXPANDER_init+0x1c>)
    34de:	4805      	ldr	r0, [pc, #20]	; (34f4 <I2C_EXPANDER_init+0x20>)
    34e0:	4b05      	ldr	r3, [pc, #20]	; (34f8 <I2C_EXPANDER_init+0x24>)
    34e2:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    34e4:	4b05      	ldr	r3, [pc, #20]	; (34fc <I2C_EXPANDER_init+0x28>)
    34e6:	4798      	blx	r3
}
    34e8:	bf00      	nop
    34ea:	bd80      	pop	{r7, pc}
    34ec:	000034a1 	.word	0x000034a1
    34f0:	43000400 	.word	0x43000400
    34f4:	200022c8 	.word	0x200022c8
    34f8:	000041a5 	.word	0x000041a5
    34fc:	00003469 	.word	0x00003469

00003500 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    3500:	b580      	push	{r7, lr}
    3502:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    3504:	2100      	movs	r1, #0
    3506:	2044      	movs	r0, #68	; 0x44
    3508:	4b11      	ldr	r3, [pc, #68]	; (3550 <SPI_HI3593_PORT_init+0x50>)
    350a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    350c:	2102      	movs	r1, #2
    350e:	2044      	movs	r0, #68	; 0x44
    3510:	4b10      	ldr	r3, [pc, #64]	; (3554 <SPI_HI3593_PORT_init+0x54>)
    3512:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    3514:	4910      	ldr	r1, [pc, #64]	; (3558 <SPI_HI3593_PORT_init+0x58>)
    3516:	2044      	movs	r0, #68	; 0x44
    3518:	4b10      	ldr	r3, [pc, #64]	; (355c <SPI_HI3593_PORT_init+0x5c>)
    351a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    351c:	2100      	movs	r1, #0
    351e:	2045      	movs	r0, #69	; 0x45
    3520:	4b0b      	ldr	r3, [pc, #44]	; (3550 <SPI_HI3593_PORT_init+0x50>)
    3522:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    3524:	2102      	movs	r1, #2
    3526:	2045      	movs	r0, #69	; 0x45
    3528:	4b0a      	ldr	r3, [pc, #40]	; (3554 <SPI_HI3593_PORT_init+0x54>)
    352a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    352c:	490c      	ldr	r1, [pc, #48]	; (3560 <SPI_HI3593_PORT_init+0x60>)
    352e:	2045      	movs	r0, #69	; 0x45
    3530:	4b0a      	ldr	r3, [pc, #40]	; (355c <SPI_HI3593_PORT_init+0x5c>)
    3532:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    3534:	2101      	movs	r1, #1
    3536:	2047      	movs	r0, #71	; 0x47
    3538:	4b06      	ldr	r3, [pc, #24]	; (3554 <SPI_HI3593_PORT_init+0x54>)
    353a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    353c:	2100      	movs	r1, #0
    353e:	2047      	movs	r0, #71	; 0x47
    3540:	4b08      	ldr	r3, [pc, #32]	; (3564 <SPI_HI3593_PORT_init+0x64>)
    3542:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    3544:	4908      	ldr	r1, [pc, #32]	; (3568 <SPI_HI3593_PORT_init+0x68>)
    3546:	2047      	movs	r0, #71	; 0x47
    3548:	4b04      	ldr	r3, [pc, #16]	; (355c <SPI_HI3593_PORT_init+0x5c>)
    354a:	4798      	blx	r3
}
    354c:	bf00      	nop
    354e:	bd80      	pop	{r7, pc}
    3550:	00003091 	.word	0x00003091
    3554:	00003059 	.word	0x00003059
    3558:	00440002 	.word	0x00440002
    355c:	00003039 	.word	0x00003039
    3560:	00450002 	.word	0x00450002
    3564:	00003005 	.word	0x00003005
    3568:	00470002 	.word	0x00470002

0000356c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    356c:	b580      	push	{r7, lr}
    356e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3570:	2243      	movs	r2, #67	; 0x43
    3572:	2124      	movs	r1, #36	; 0x24
    3574:	4806      	ldr	r0, [pc, #24]	; (3590 <SPI_HI3593_CLOCK_init+0x24>)
    3576:	4b07      	ldr	r3, [pc, #28]	; (3594 <SPI_HI3593_CLOCK_init+0x28>)
    3578:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    357a:	224a      	movs	r2, #74	; 0x4a
    357c:	2103      	movs	r1, #3
    357e:	4804      	ldr	r0, [pc, #16]	; (3590 <SPI_HI3593_CLOCK_init+0x24>)
    3580:	4b04      	ldr	r3, [pc, #16]	; (3594 <SPI_HI3593_CLOCK_init+0x28>)
    3582:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    3584:	4804      	ldr	r0, [pc, #16]	; (3598 <SPI_HI3593_CLOCK_init+0x2c>)
    3586:	4b05      	ldr	r3, [pc, #20]	; (359c <SPI_HI3593_CLOCK_init+0x30>)
    3588:	4798      	blx	r3
}
    358a:	bf00      	nop
    358c:	bd80      	pop	{r7, pc}
    358e:	bf00      	nop
    3590:	40001c00 	.word	0x40001c00
    3594:	00002885 	.word	0x00002885
    3598:	40000800 	.word	0x40000800
    359c:	00002acb 	.word	0x00002acb

000035a0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    35a4:	4b04      	ldr	r3, [pc, #16]	; (35b8 <SPI_HI3593_init+0x18>)
    35a6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    35a8:	4904      	ldr	r1, [pc, #16]	; (35bc <SPI_HI3593_init+0x1c>)
    35aa:	4805      	ldr	r0, [pc, #20]	; (35c0 <SPI_HI3593_init+0x20>)
    35ac:	4b05      	ldr	r3, [pc, #20]	; (35c4 <SPI_HI3593_init+0x24>)
    35ae:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    35b0:	4b05      	ldr	r3, [pc, #20]	; (35c8 <SPI_HI3593_init+0x28>)
    35b2:	4798      	blx	r3
}
    35b4:	bf00      	nop
    35b6:	bd80      	pop	{r7, pc}
    35b8:	0000356d 	.word	0x0000356d
    35bc:	43000800 	.word	0x43000800
    35c0:	200021cc 	.word	0x200021cc
    35c4:	00004815 	.word	0x00004815
    35c8:	00003501 	.word	0x00003501

000035cc <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    35cc:	b580      	push	{r7, lr}
    35ce:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    35d0:	2100      	movs	r1, #0
    35d2:	2068      	movs	r0, #104	; 0x68
    35d4:	4b07      	ldr	r3, [pc, #28]	; (35f4 <I2C_EEPROM_PORT_init+0x28>)
    35d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    35d8:	4907      	ldr	r1, [pc, #28]	; (35f8 <I2C_EEPROM_PORT_init+0x2c>)
    35da:	2068      	movs	r0, #104	; 0x68
    35dc:	4b07      	ldr	r3, [pc, #28]	; (35fc <I2C_EEPROM_PORT_init+0x30>)
    35de:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    35e0:	2100      	movs	r1, #0
    35e2:	2069      	movs	r0, #105	; 0x69
    35e4:	4b03      	ldr	r3, [pc, #12]	; (35f4 <I2C_EEPROM_PORT_init+0x28>)
    35e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    35e8:	4905      	ldr	r1, [pc, #20]	; (3600 <I2C_EEPROM_PORT_init+0x34>)
    35ea:	2069      	movs	r0, #105	; 0x69
    35ec:	4b03      	ldr	r3, [pc, #12]	; (35fc <I2C_EEPROM_PORT_init+0x30>)
    35ee:	4798      	blx	r3
}
    35f0:	bf00      	nop
    35f2:	bd80      	pop	{r7, pc}
    35f4:	00003005 	.word	0x00003005
    35f8:	00680002 	.word	0x00680002
    35fc:	00003039 	.word	0x00003039
    3600:	00690002 	.word	0x00690002

00003604 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    3604:	b580      	push	{r7, lr}
    3606:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3608:	2242      	movs	r2, #66	; 0x42
    360a:	2125      	movs	r1, #37	; 0x25
    360c:	4806      	ldr	r0, [pc, #24]	; (3628 <I2C_EEPROM_CLOCK_init+0x24>)
    360e:	4b07      	ldr	r3, [pc, #28]	; (362c <I2C_EEPROM_CLOCK_init+0x28>)
    3610:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3612:	224a      	movs	r2, #74	; 0x4a
    3614:	2103      	movs	r1, #3
    3616:	4804      	ldr	r0, [pc, #16]	; (3628 <I2C_EEPROM_CLOCK_init+0x24>)
    3618:	4b04      	ldr	r3, [pc, #16]	; (362c <I2C_EEPROM_CLOCK_init+0x28>)
    361a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    361c:	4804      	ldr	r0, [pc, #16]	; (3630 <I2C_EEPROM_CLOCK_init+0x2c>)
    361e:	4b05      	ldr	r3, [pc, #20]	; (3634 <I2C_EEPROM_CLOCK_init+0x30>)
    3620:	4798      	blx	r3
}
    3622:	bf00      	nop
    3624:	bd80      	pop	{r7, pc}
    3626:	bf00      	nop
    3628:	40001c00 	.word	0x40001c00
    362c:	00002885 	.word	0x00002885
    3630:	40000800 	.word	0x40000800
    3634:	00002aeb 	.word	0x00002aeb

00003638 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    3638:	b580      	push	{r7, lr}
    363a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    363c:	4b04      	ldr	r3, [pc, #16]	; (3650 <I2C_EEPROM_init+0x18>)
    363e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    3640:	4904      	ldr	r1, [pc, #16]	; (3654 <I2C_EEPROM_init+0x1c>)
    3642:	4805      	ldr	r0, [pc, #20]	; (3658 <I2C_EEPROM_init+0x20>)
    3644:	4b05      	ldr	r3, [pc, #20]	; (365c <I2C_EEPROM_init+0x24>)
    3646:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    3648:	4b05      	ldr	r3, [pc, #20]	; (3660 <I2C_EEPROM_init+0x28>)
    364a:	4798      	blx	r3
}
    364c:	bf00      	nop
    364e:	bd80      	pop	{r7, pc}
    3650:	00003605 	.word	0x00003605
    3654:	43000c00 	.word	0x43000c00
    3658:	20002324 	.word	0x20002324
    365c:	000041a5 	.word	0x000041a5
    3660:	000035cd 	.word	0x000035cd

00003664 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3664:	b580      	push	{r7, lr}
    3666:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    3668:	4808      	ldr	r0, [pc, #32]	; (368c <TIMER_INTERFACE_init+0x28>)
    366a:	4b09      	ldr	r3, [pc, #36]	; (3690 <TIMER_INTERFACE_init+0x2c>)
    366c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    366e:	2243      	movs	r2, #67	; 0x43
    3670:	2109      	movs	r1, #9
    3672:	4808      	ldr	r0, [pc, #32]	; (3694 <TIMER_INTERFACE_init+0x30>)
    3674:	4b08      	ldr	r3, [pc, #32]	; (3698 <TIMER_INTERFACE_init+0x34>)
    3676:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    3678:	4b08      	ldr	r3, [pc, #32]	; (369c <TIMER_INTERFACE_init+0x38>)
    367a:	4798      	blx	r3
    367c:	4603      	mov	r3, r0
    367e:	461a      	mov	r2, r3
    3680:	4907      	ldr	r1, [pc, #28]	; (36a0 <TIMER_INTERFACE_init+0x3c>)
    3682:	4808      	ldr	r0, [pc, #32]	; (36a4 <TIMER_INTERFACE_init+0x40>)
    3684:	4b08      	ldr	r3, [pc, #32]	; (36a8 <TIMER_INTERFACE_init+0x44>)
    3686:	4798      	blx	r3
}
    3688:	bf00      	nop
    368a:	bd80      	pop	{r7, pc}
    368c:	40000800 	.word	0x40000800
    3690:	0000298b 	.word	0x0000298b
    3694:	40001c00 	.word	0x40001c00
    3698:	00002885 	.word	0x00002885
    369c:	00009db9 	.word	0x00009db9
    36a0:	40003800 	.word	0x40003800
    36a4:	2000224c 	.word	0x2000224c
    36a8:	000049e5 	.word	0x000049e5

000036ac <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    36ac:	b580      	push	{r7, lr}
    36ae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    36b0:	4808      	ldr	r0, [pc, #32]	; (36d4 <TIMER_EVENT_init+0x28>)
    36b2:	4b09      	ldr	r3, [pc, #36]	; (36d8 <TIMER_EVENT_init+0x2c>)
    36b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    36b6:	2245      	movs	r2, #69	; 0x45
    36b8:	2109      	movs	r1, #9
    36ba:	4808      	ldr	r0, [pc, #32]	; (36dc <TIMER_EVENT_init+0x30>)
    36bc:	4b08      	ldr	r3, [pc, #32]	; (36e0 <TIMER_EVENT_init+0x34>)
    36be:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    36c0:	4b08      	ldr	r3, [pc, #32]	; (36e4 <TIMER_EVENT_init+0x38>)
    36c2:	4798      	blx	r3
    36c4:	4603      	mov	r3, r0
    36c6:	461a      	mov	r2, r3
    36c8:	4907      	ldr	r1, [pc, #28]	; (36e8 <TIMER_EVENT_init+0x3c>)
    36ca:	4808      	ldr	r0, [pc, #32]	; (36ec <TIMER_EVENT_init+0x40>)
    36cc:	4b08      	ldr	r3, [pc, #32]	; (36f0 <TIMER_EVENT_init+0x44>)
    36ce:	4798      	blx	r3
}
    36d0:	bf00      	nop
    36d2:	bd80      	pop	{r7, pc}
    36d4:	40000800 	.word	0x40000800
    36d8:	000029ab 	.word	0x000029ab
    36dc:	40001c00 	.word	0x40001c00
    36e0:	00002885 	.word	0x00002885
    36e4:	00009db9 	.word	0x00009db9
    36e8:	40003c00 	.word	0x40003c00
    36ec:	20002230 	.word	0x20002230
    36f0:	000049e5 	.word	0x000049e5

000036f4 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    36f4:	b580      	push	{r7, lr}
    36f6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    36f8:	4808      	ldr	r0, [pc, #32]	; (371c <TIMER_ARINC_init+0x28>)
    36fa:	4b09      	ldr	r3, [pc, #36]	; (3720 <TIMER_ARINC_init+0x2c>)
    36fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    36fe:	2244      	movs	r2, #68	; 0x44
    3700:	211a      	movs	r1, #26
    3702:	4808      	ldr	r0, [pc, #32]	; (3724 <TIMER_ARINC_init+0x30>)
    3704:	4b08      	ldr	r3, [pc, #32]	; (3728 <TIMER_ARINC_init+0x34>)
    3706:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3708:	4b08      	ldr	r3, [pc, #32]	; (372c <TIMER_ARINC_init+0x38>)
    370a:	4798      	blx	r3
    370c:	4603      	mov	r3, r0
    370e:	461a      	mov	r2, r3
    3710:	4907      	ldr	r1, [pc, #28]	; (3730 <TIMER_ARINC_init+0x3c>)
    3712:	4808      	ldr	r0, [pc, #32]	; (3734 <TIMER_ARINC_init+0x40>)
    3714:	4b08      	ldr	r3, [pc, #32]	; (3738 <TIMER_ARINC_init+0x44>)
    3716:	4798      	blx	r3
}
    3718:	bf00      	nop
    371a:	bd80      	pop	{r7, pc}
    371c:	40000800 	.word	0x40000800
    3720:	00002a2b 	.word	0x00002a2b
    3724:	40001c00 	.word	0x40001c00
    3728:	00002885 	.word	0x00002885
    372c:	00009db9 	.word	0x00009db9
    3730:	4101a000 	.word	0x4101a000
    3734:	200022ac 	.word	0x200022ac
    3738:	000049e5 	.word	0x000049e5

0000373c <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    373c:	b580      	push	{r7, lr}
    373e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    3740:	4808      	ldr	r0, [pc, #32]	; (3764 <TIMER_HVAC_init+0x28>)
    3742:	4b09      	ldr	r3, [pc, #36]	; (3768 <TIMER_HVAC_init+0x2c>)
    3744:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3746:	2245      	movs	r2, #69	; 0x45
    3748:	211a      	movs	r1, #26
    374a:	4808      	ldr	r0, [pc, #32]	; (376c <TIMER_HVAC_init+0x30>)
    374c:	4b08      	ldr	r3, [pc, #32]	; (3770 <TIMER_HVAC_init+0x34>)
    374e:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    3750:	4b08      	ldr	r3, [pc, #32]	; (3774 <TIMER_HVAC_init+0x38>)
    3752:	4798      	blx	r3
    3754:	4603      	mov	r3, r0
    3756:	461a      	mov	r2, r3
    3758:	4907      	ldr	r1, [pc, #28]	; (3778 <TIMER_HVAC_init+0x3c>)
    375a:	4808      	ldr	r0, [pc, #32]	; (377c <TIMER_HVAC_init+0x40>)
    375c:	4b08      	ldr	r3, [pc, #32]	; (3780 <TIMER_HVAC_init+0x44>)
    375e:	4798      	blx	r3
}
    3760:	bf00      	nop
    3762:	bd80      	pop	{r7, pc}
    3764:	40000800 	.word	0x40000800
    3768:	00002a4b 	.word	0x00002a4b
    376c:	40001c00 	.word	0x40001c00
    3770:	00002885 	.word	0x00002885
    3774:	00009db9 	.word	0x00009db9
    3778:	4101c000 	.word	0x4101c000
    377c:	20002308 	.word	0x20002308
    3780:	000049e5 	.word	0x000049e5

00003784 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3784:	b580      	push	{r7, lr}
    3786:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    3788:	4904      	ldr	r1, [pc, #16]	; (379c <LIVE_PULSE_PORT_init+0x18>)
    378a:	2020      	movs	r0, #32
    378c:	4b04      	ldr	r3, [pc, #16]	; (37a0 <LIVE_PULSE_PORT_init+0x1c>)
    378e:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    3790:	4904      	ldr	r1, [pc, #16]	; (37a4 <LIVE_PULSE_PORT_init+0x20>)
    3792:	2021      	movs	r0, #33	; 0x21
    3794:	4b02      	ldr	r3, [pc, #8]	; (37a0 <LIVE_PULSE_PORT_init+0x1c>)
    3796:	4798      	blx	r3
}
    3798:	bf00      	nop
    379a:	bd80      	pop	{r7, pc}
    379c:	00200004 	.word	0x00200004
    37a0:	00003039 	.word	0x00003039
    37a4:	00210004 	.word	0x00210004

000037a8 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    37ac:	4804      	ldr	r0, [pc, #16]	; (37c0 <LIVE_PULSE_CLOCK_init+0x18>)
    37ae:	4b05      	ldr	r3, [pc, #20]	; (37c4 <LIVE_PULSE_CLOCK_init+0x1c>)
    37b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    37b2:	224b      	movs	r2, #75	; 0x4b
    37b4:	2127      	movs	r1, #39	; 0x27
    37b6:	4804      	ldr	r0, [pc, #16]	; (37c8 <LIVE_PULSE_CLOCK_init+0x20>)
    37b8:	4b04      	ldr	r3, [pc, #16]	; (37cc <LIVE_PULSE_CLOCK_init+0x24>)
    37ba:	4798      	blx	r3
}
    37bc:	bf00      	nop
    37be:	bd80      	pop	{r7, pc}
    37c0:	40000800 	.word	0x40000800
    37c4:	00002b0b 	.word	0x00002b0b
    37c8:	40001c00 	.word	0x40001c00
    37cc:	00002885 	.word	0x00002885

000037d0 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    37d0:	b580      	push	{r7, lr}
    37d2:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    37d4:	4b06      	ldr	r3, [pc, #24]	; (37f0 <LIVE_PULSE_init+0x20>)
    37d6:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    37d8:	4b06      	ldr	r3, [pc, #24]	; (37f4 <LIVE_PULSE_init+0x24>)
    37da:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    37dc:	4b06      	ldr	r3, [pc, #24]	; (37f8 <LIVE_PULSE_init+0x28>)
    37de:	4798      	blx	r3
    37e0:	4603      	mov	r3, r0
    37e2:	461a      	mov	r2, r3
    37e4:	4905      	ldr	r1, [pc, #20]	; (37fc <LIVE_PULSE_init+0x2c>)
    37e6:	4806      	ldr	r0, [pc, #24]	; (3800 <LIVE_PULSE_init+0x30>)
    37e8:	4b06      	ldr	r3, [pc, #24]	; (3804 <LIVE_PULSE_init+0x34>)
    37ea:	4798      	blx	r3
}
    37ec:	bf00      	nop
    37ee:	bd80      	pop	{r7, pc}
    37f0:	000037a9 	.word	0x000037a9
    37f4:	00003785 	.word	0x00003785
    37f8:	00009dc9 	.word	0x00009dc9
    37fc:	43001800 	.word	0x43001800
    3800:	20002268 	.word	0x20002268
    3804:	00004239 	.word	0x00004239

00003808 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    3808:	b580      	push	{r7, lr}
    380a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    380c:	2102      	movs	r1, #2
    380e:	2018      	movs	r0, #24
    3810:	4b0f      	ldr	r3, [pc, #60]	; (3850 <CDCUSB_PORT_init+0x48>)
    3812:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    3814:	2100      	movs	r1, #0
    3816:	2018      	movs	r0, #24
    3818:	4b0e      	ldr	r3, [pc, #56]	; (3854 <CDCUSB_PORT_init+0x4c>)
    381a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    381c:	2100      	movs	r1, #0
    381e:	2018      	movs	r0, #24
    3820:	4b0d      	ldr	r3, [pc, #52]	; (3858 <CDCUSB_PORT_init+0x50>)
    3822:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    3824:	490d      	ldr	r1, [pc, #52]	; (385c <CDCUSB_PORT_init+0x54>)
    3826:	2018      	movs	r0, #24
    3828:	4b0d      	ldr	r3, [pc, #52]	; (3860 <CDCUSB_PORT_init+0x58>)
    382a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    382c:	2102      	movs	r1, #2
    382e:	2019      	movs	r0, #25
    3830:	4b07      	ldr	r3, [pc, #28]	; (3850 <CDCUSB_PORT_init+0x48>)
    3832:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    3834:	2100      	movs	r1, #0
    3836:	2019      	movs	r0, #25
    3838:	4b06      	ldr	r3, [pc, #24]	; (3854 <CDCUSB_PORT_init+0x4c>)
    383a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    383c:	2100      	movs	r1, #0
    383e:	2019      	movs	r0, #25
    3840:	4b05      	ldr	r3, [pc, #20]	; (3858 <CDCUSB_PORT_init+0x50>)
    3842:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    3844:	4907      	ldr	r1, [pc, #28]	; (3864 <CDCUSB_PORT_init+0x5c>)
    3846:	2019      	movs	r0, #25
    3848:	4b05      	ldr	r3, [pc, #20]	; (3860 <CDCUSB_PORT_init+0x58>)
    384a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    384c:	bf00      	nop
    384e:	bd80      	pop	{r7, pc}
    3850:	00003059 	.word	0x00003059
    3854:	00003091 	.word	0x00003091
    3858:	00003005 	.word	0x00003005
    385c:	00180007 	.word	0x00180007
    3860:	00003039 	.word	0x00003039
    3864:	00190007 	.word	0x00190007

00003868 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3868:	b580      	push	{r7, lr}
    386a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    386c:	2242      	movs	r2, #66	; 0x42
    386e:	210a      	movs	r1, #10
    3870:	4805      	ldr	r0, [pc, #20]	; (3888 <CDCUSB_CLOCK_init+0x20>)
    3872:	4b06      	ldr	r3, [pc, #24]	; (388c <CDCUSB_CLOCK_init+0x24>)
    3874:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    3876:	4806      	ldr	r0, [pc, #24]	; (3890 <CDCUSB_CLOCK_init+0x28>)
    3878:	4b06      	ldr	r3, [pc, #24]	; (3894 <CDCUSB_CLOCK_init+0x2c>)
    387a:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    387c:	4804      	ldr	r0, [pc, #16]	; (3890 <CDCUSB_CLOCK_init+0x28>)
    387e:	4b06      	ldr	r3, [pc, #24]	; (3898 <CDCUSB_CLOCK_init+0x30>)
    3880:	4798      	blx	r3
}
    3882:	bf00      	nop
    3884:	bd80      	pop	{r7, pc}
    3886:	bf00      	nop
    3888:	40001c00 	.word	0x40001c00
    388c:	00002885 	.word	0x00002885
    3890:	40000800 	.word	0x40000800
    3894:	000028ab 	.word	0x000028ab
    3898:	000029cb 	.word	0x000029cb

0000389c <CDCUSB_init>:

void CDCUSB_init(void)
{
    389c:	b580      	push	{r7, lr}
    389e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    38a0:	4b03      	ldr	r3, [pc, #12]	; (38b0 <CDCUSB_init+0x14>)
    38a2:	4798      	blx	r3
	usb_d_init();
    38a4:	4b03      	ldr	r3, [pc, #12]	; (38b4 <CDCUSB_init+0x18>)
    38a6:	4798      	blx	r3
	CDCUSB_PORT_init();
    38a8:	4b03      	ldr	r3, [pc, #12]	; (38b8 <CDCUSB_init+0x1c>)
    38aa:	4798      	blx	r3
}
    38ac:	bf00      	nop
    38ae:	bd80      	pop	{r7, pc}
    38b0:	00003869 	.word	0x00003869
    38b4:	000051f5 	.word	0x000051f5
    38b8:	00003809 	.word	0x00003809

000038bc <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    38bc:	b580      	push	{r7, lr}
    38be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    38c0:	4802      	ldr	r0, [pc, #8]	; (38cc <WATCHDOG_CLOCK_init+0x10>)
    38c2:	4b03      	ldr	r3, [pc, #12]	; (38d0 <WATCHDOG_CLOCK_init+0x14>)
    38c4:	4798      	blx	r3
}
    38c6:	bf00      	nop
    38c8:	bd80      	pop	{r7, pc}
    38ca:	bf00      	nop
    38cc:	40000800 	.word	0x40000800
    38d0:	0000292b 	.word	0x0000292b

000038d4 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    38d4:	b580      	push	{r7, lr}
    38d6:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    38d8:	4b03      	ldr	r3, [pc, #12]	; (38e8 <WATCHDOG_init+0x14>)
    38da:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    38dc:	4903      	ldr	r1, [pc, #12]	; (38ec <WATCHDOG_init+0x18>)
    38de:	4804      	ldr	r0, [pc, #16]	; (38f0 <WATCHDOG_init+0x1c>)
    38e0:	4b04      	ldr	r3, [pc, #16]	; (38f4 <WATCHDOG_init+0x20>)
    38e2:	4798      	blx	r3
}
    38e4:	bf00      	nop
    38e6:	bd80      	pop	{r7, pc}
    38e8:	000038bd 	.word	0x000038bd
    38ec:	40002000 	.word	0x40002000
    38f0:	20002384 	.word	0x20002384
    38f4:	000030d9 	.word	0x000030d9

000038f8 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    38f8:	b580      	push	{r7, lr}
    38fa:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    38fc:	4904      	ldr	r1, [pc, #16]	; (3910 <CAN_CCU_PORT_init+0x18>)
    38fe:	202d      	movs	r0, #45	; 0x2d
    3900:	4b04      	ldr	r3, [pc, #16]	; (3914 <CAN_CCU_PORT_init+0x1c>)
    3902:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3904:	4904      	ldr	r1, [pc, #16]	; (3918 <CAN_CCU_PORT_init+0x20>)
    3906:	202c      	movs	r0, #44	; 0x2c
    3908:	4b02      	ldr	r3, [pc, #8]	; (3914 <CAN_CCU_PORT_init+0x1c>)
    390a:	4798      	blx	r3
}
    390c:	bf00      	nop
    390e:	bd80      	pop	{r7, pc}
    3910:	002d0007 	.word	0x002d0007
    3914:	00003039 	.word	0x00003039
    3918:	002c0007 	.word	0x002c0007

0000391c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    391c:	b580      	push	{r7, lr}
    391e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3920:	4807      	ldr	r0, [pc, #28]	; (3940 <CAN_CCU_init+0x24>)
    3922:	4b08      	ldr	r3, [pc, #32]	; (3944 <CAN_CCU_init+0x28>)
    3924:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3926:	2243      	movs	r2, #67	; 0x43
    3928:	211c      	movs	r1, #28
    392a:	4807      	ldr	r0, [pc, #28]	; (3948 <CAN_CCU_init+0x2c>)
    392c:	4b07      	ldr	r3, [pc, #28]	; (394c <CAN_CCU_init+0x30>)
    392e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3930:	4907      	ldr	r1, [pc, #28]	; (3950 <CAN_CCU_init+0x34>)
    3932:	4808      	ldr	r0, [pc, #32]	; (3954 <CAN_CCU_init+0x38>)
    3934:	4b08      	ldr	r3, [pc, #32]	; (3958 <CAN_CCU_init+0x3c>)
    3936:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3938:	4b08      	ldr	r3, [pc, #32]	; (395c <CAN_CCU_init+0x40>)
    393a:	4798      	blx	r3
}
    393c:	bf00      	nop
    393e:	bd80      	pop	{r7, pc}
    3940:	40000800 	.word	0x40000800
    3944:	000028eb 	.word	0x000028eb
    3948:	40001c00 	.word	0x40001c00
    394c:	00002885 	.word	0x00002885
    3950:	42000400 	.word	0x42000400
    3954:	20002284 	.word	0x20002284
    3958:	00003de5 	.word	0x00003de5
    395c:	000038f9 	.word	0x000038f9

00003960 <system_init>:

void system_init(void)
{
    3960:	b580      	push	{r7, lr}
    3962:	af00      	add	r7, sp, #0
	init_mcu();
    3964:	4b40      	ldr	r3, [pc, #256]	; (3a68 <system_init+0x108>)
    3966:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    3968:	2101      	movs	r1, #1
    396a:	2027      	movs	r0, #39	; 0x27
    396c:	4b3f      	ldr	r3, [pc, #252]	; (3a6c <system_init+0x10c>)
    396e:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    3970:	2102      	movs	r1, #2
    3972:	2027      	movs	r0, #39	; 0x27
    3974:	4b3e      	ldr	r3, [pc, #248]	; (3a70 <system_init+0x110>)
    3976:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    3978:	f04f 31ff 	mov.w	r1, #4294967295
    397c:	2027      	movs	r0, #39	; 0x27
    397e:	4b3d      	ldr	r3, [pc, #244]	; (3a74 <system_init+0x114>)
    3980:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    3982:	2101      	movs	r1, #1
    3984:	203d      	movs	r0, #61	; 0x3d
    3986:	4b3c      	ldr	r3, [pc, #240]	; (3a78 <system_init+0x118>)
    3988:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    398a:	2102      	movs	r1, #2
    398c:	203d      	movs	r0, #61	; 0x3d
    398e:	4b37      	ldr	r3, [pc, #220]	; (3a6c <system_init+0x10c>)
    3990:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    3992:	f04f 31ff 	mov.w	r1, #4294967295
    3996:	203d      	movs	r0, #61	; 0x3d
    3998:	4b36      	ldr	r3, [pc, #216]	; (3a74 <system_init+0x114>)
    399a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    399c:	2101      	movs	r1, #1
    399e:	203f      	movs	r0, #63	; 0x3f
    39a0:	4b32      	ldr	r3, [pc, #200]	; (3a6c <system_init+0x10c>)
    39a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    39a4:	2101      	movs	r1, #1
    39a6:	203f      	movs	r0, #63	; 0x3f
    39a8:	4b31      	ldr	r3, [pc, #196]	; (3a70 <system_init+0x110>)
    39aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    39ac:	f04f 31ff 	mov.w	r1, #4294967295
    39b0:	203f      	movs	r0, #63	; 0x3f
    39b2:	4b30      	ldr	r3, [pc, #192]	; (3a74 <system_init+0x114>)
    39b4:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    39b6:	2101      	movs	r1, #1
    39b8:	2040      	movs	r0, #64	; 0x40
    39ba:	4b2c      	ldr	r3, [pc, #176]	; (3a6c <system_init+0x10c>)
    39bc:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    39be:	2102      	movs	r1, #2
    39c0:	2040      	movs	r0, #64	; 0x40
    39c2:	4b2b      	ldr	r3, [pc, #172]	; (3a70 <system_init+0x110>)
    39c4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    39c6:	f04f 31ff 	mov.w	r1, #4294967295
    39ca:	2040      	movs	r0, #64	; 0x40
    39cc:	4b29      	ldr	r3, [pc, #164]	; (3a74 <system_init+0x114>)
    39ce:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    39d0:	2101      	movs	r1, #1
    39d2:	204e      	movs	r0, #78	; 0x4e
    39d4:	4b28      	ldr	r3, [pc, #160]	; (3a78 <system_init+0x118>)
    39d6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    39d8:	2102      	movs	r1, #2
    39da:	204e      	movs	r0, #78	; 0x4e
    39dc:	4b23      	ldr	r3, [pc, #140]	; (3a6c <system_init+0x10c>)
    39de:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    39e0:	f04f 31ff 	mov.w	r1, #4294967295
    39e4:	204e      	movs	r0, #78	; 0x4e
    39e6:	4b23      	ldr	r3, [pc, #140]	; (3a74 <system_init+0x114>)
    39e8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    39ea:	2100      	movs	r1, #0
    39ec:	204f      	movs	r0, #79	; 0x4f
    39ee:	4b22      	ldr	r3, [pc, #136]	; (3a78 <system_init+0x118>)
    39f0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    39f2:	2102      	movs	r1, #2
    39f4:	204f      	movs	r0, #79	; 0x4f
    39f6:	4b1d      	ldr	r3, [pc, #116]	; (3a6c <system_init+0x10c>)
    39f8:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    39fa:	f04f 31ff 	mov.w	r1, #4294967295
    39fe:	204f      	movs	r0, #79	; 0x4f
    3a00:	4b1c      	ldr	r3, [pc, #112]	; (3a74 <system_init+0x114>)
    3a02:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3a04:	2100      	movs	r1, #0
    3a06:	2052      	movs	r0, #82	; 0x52
    3a08:	4b1b      	ldr	r3, [pc, #108]	; (3a78 <system_init+0x118>)
    3a0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3a0c:	2102      	movs	r1, #2
    3a0e:	2052      	movs	r0, #82	; 0x52
    3a10:	4b16      	ldr	r3, [pc, #88]	; (3a6c <system_init+0x10c>)
    3a12:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3a14:	f04f 31ff 	mov.w	r1, #4294967295
    3a18:	2052      	movs	r0, #82	; 0x52
    3a1a:	4b16      	ldr	r3, [pc, #88]	; (3a74 <system_init+0x114>)
    3a1c:	4798      	blx	r3

	CRC_CALC_init();
    3a1e:	4b17      	ldr	r3, [pc, #92]	; (3a7c <system_init+0x11c>)
    3a20:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3a22:	4b17      	ldr	r3, [pc, #92]	; (3a80 <system_init+0x120>)
    3a24:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3a26:	4b17      	ldr	r3, [pc, #92]	; (3a84 <system_init+0x124>)
    3a28:	4798      	blx	r3

	QSPI_N25Q256_init();
    3a2a:	4b17      	ldr	r3, [pc, #92]	; (3a88 <system_init+0x128>)
    3a2c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3a2e:	4b17      	ldr	r3, [pc, #92]	; (3a8c <system_init+0x12c>)
    3a30:	4798      	blx	r3

	SPI_TEMP_init();
    3a32:	4b17      	ldr	r3, [pc, #92]	; (3a90 <system_init+0x130>)
    3a34:	4798      	blx	r3

	I2C_EXPANDER_init();
    3a36:	4b17      	ldr	r3, [pc, #92]	; (3a94 <system_init+0x134>)
    3a38:	4798      	blx	r3

	SPI_HI3593_init();
    3a3a:	4b17      	ldr	r3, [pc, #92]	; (3a98 <system_init+0x138>)
    3a3c:	4798      	blx	r3

	I2C_EEPROM_init();
    3a3e:	4b17      	ldr	r3, [pc, #92]	; (3a9c <system_init+0x13c>)
    3a40:	4798      	blx	r3

	TIMER_INTERFACE_init();
    3a42:	4b17      	ldr	r3, [pc, #92]	; (3aa0 <system_init+0x140>)
    3a44:	4798      	blx	r3
	TIMER_EVENT_init();
    3a46:	4b17      	ldr	r3, [pc, #92]	; (3aa4 <system_init+0x144>)
    3a48:	4798      	blx	r3
	TIMER_ARINC_init();
    3a4a:	4b17      	ldr	r3, [pc, #92]	; (3aa8 <system_init+0x148>)
    3a4c:	4798      	blx	r3
	TIMER_HVAC_init();
    3a4e:	4b17      	ldr	r3, [pc, #92]	; (3aac <system_init+0x14c>)
    3a50:	4798      	blx	r3
	LIVE_PULSE_init();
    3a52:	4b17      	ldr	r3, [pc, #92]	; (3ab0 <system_init+0x150>)
    3a54:	4798      	blx	r3

	CDCUSB_init();
    3a56:	4b17      	ldr	r3, [pc, #92]	; (3ab4 <system_init+0x154>)
    3a58:	4798      	blx	r3

	WATCHDOG_init();
    3a5a:	4b17      	ldr	r3, [pc, #92]	; (3ab8 <system_init+0x158>)
    3a5c:	4798      	blx	r3
	CAN_CCU_init();
    3a5e:	4b17      	ldr	r3, [pc, #92]	; (3abc <system_init+0x15c>)
    3a60:	4798      	blx	r3
}
    3a62:	bf00      	nop
    3a64:	bd80      	pop	{r7, pc}
    3a66:	bf00      	nop
    3a68:	000030c9 	.word	0x000030c9
    3a6c:	00003059 	.word	0x00003059
    3a70:	00003005 	.word	0x00003005
    3a74:	00003039 	.word	0x00003039
    3a78:	00003091 	.word	0x00003091
    3a7c:	00003129 	.word	0x00003129
    3a80:	00003155 	.word	0x00003155
    3a84:	000031f9 	.word	0x000031f9
    3a88:	00003335 	.word	0x00003335
    3a8c:	00003379 	.word	0x00003379
    3a90:	0000343d 	.word	0x0000343d
    3a94:	000034d5 	.word	0x000034d5
    3a98:	000035a1 	.word	0x000035a1
    3a9c:	00003639 	.word	0x00003639
    3aa0:	00003665 	.word	0x00003665
    3aa4:	000036ad 	.word	0x000036ad
    3aa8:	000036f5 	.word	0x000036f5
    3aac:	0000373d 	.word	0x0000373d
    3ab0:	000037d1 	.word	0x000037d1
    3ab4:	0000389d 	.word	0x0000389d
    3ab8:	000038d5 	.word	0x000038d5
    3abc:	0000391d 	.word	0x0000391d

00003ac0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    3ac0:	b480      	push	{r7}
    3ac2:	b085      	sub	sp, #20
    3ac4:	af00      	add	r7, sp, #0
    3ac6:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3ac8:	f3ef 8310 	mrs	r3, PRIMASK
    3acc:	60fb      	str	r3, [r7, #12]
  return(result);
    3ace:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3ad4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3ad6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    3ada:	bf00      	nop
    3adc:	3714      	adds	r7, #20
    3ade:	46bd      	mov	sp, r7
    3ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ae4:	4770      	bx	lr

00003ae6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    3ae6:	b480      	push	{r7}
    3ae8:	b085      	sub	sp, #20
    3aea:	af00      	add	r7, sp, #0
    3aec:	6078      	str	r0, [r7, #4]
    3aee:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	681b      	ldr	r3, [r3, #0]
    3af6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3af8:	68fb      	ldr	r3, [r7, #12]
    3afa:	f383 8810 	msr	PRIMASK, r3
}
    3afe:	bf00      	nop
    3b00:	3714      	adds	r7, #20
    3b02:	46bd      	mov	sp, r7
    3b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b08:	4770      	bx	lr

00003b0a <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    3b0a:	b480      	push	{r7}
    3b0c:	b083      	sub	sp, #12
    3b0e:	af00      	add	r7, sp, #0
    3b10:	4603      	mov	r3, r0
    3b12:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    3b14:	88fb      	ldrh	r3, [r7, #6]
    3b16:	f003 0303 	and.w	r3, r3, #3
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	d001      	beq.n	3b22 <leap_year+0x18>
		return false;
    3b1e:	2300      	movs	r3, #0
    3b20:	e000      	b.n	3b24 <leap_year+0x1a>
	} else {
		return true;
    3b22:	2301      	movs	r3, #1
	}
}
    3b24:	4618      	mov	r0, r3
    3b26:	370c      	adds	r7, #12
    3b28:	46bd      	mov	sp, r7
    3b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b2e:	4770      	bx	lr

00003b30 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    3b30:	b580      	push	{r7, lr}
    3b32:	b084      	sub	sp, #16
    3b34:	af00      	add	r7, sp, #0
    3b36:	6078      	str	r0, [r7, #4]
    3b38:	460b      	mov	r3, r1
    3b3a:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    3b3c:	2300      	movs	r3, #0
    3b3e:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    3b40:	687b      	ldr	r3, [r7, #4]
    3b42:	b29b      	uxth	r3, r3
    3b44:	4618      	mov	r0, r3
    3b46:	4b2f      	ldr	r3, [pc, #188]	; (3c04 <get_secs_in_month+0xd4>)
    3b48:	4798      	blx	r3
    3b4a:	4603      	mov	r3, r0
    3b4c:	2b00      	cmp	r3, #0
    3b4e:	d028      	beq.n	3ba2 <get_secs_in_month+0x72>
		switch (month) {
    3b50:	78fb      	ldrb	r3, [r7, #3]
    3b52:	3b01      	subs	r3, #1
    3b54:	2b0b      	cmp	r3, #11
    3b56:	d84c      	bhi.n	3bf2 <get_secs_in_month+0xc2>
    3b58:	a201      	add	r2, pc, #4	; (adr r2, 3b60 <get_secs_in_month+0x30>)
    3b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b5e:	bf00      	nop
    3b60:	00003b91 	.word	0x00003b91
    3b64:	00003b97 	.word	0x00003b97
    3b68:	00003b91 	.word	0x00003b91
    3b6c:	00003b9d 	.word	0x00003b9d
    3b70:	00003b91 	.word	0x00003b91
    3b74:	00003b9d 	.word	0x00003b9d
    3b78:	00003b91 	.word	0x00003b91
    3b7c:	00003b91 	.word	0x00003b91
    3b80:	00003b9d 	.word	0x00003b9d
    3b84:	00003b91 	.word	0x00003b91
    3b88:	00003b9d 	.word	0x00003b9d
    3b8c:	00003b91 	.word	0x00003b91
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3b90:	4b1d      	ldr	r3, [pc, #116]	; (3c08 <get_secs_in_month+0xd8>)
    3b92:	60fb      	str	r3, [r7, #12]
			break;
    3b94:	e030      	b.n	3bf8 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    3b96:	4b1d      	ldr	r3, [pc, #116]	; (3c0c <get_secs_in_month+0xdc>)
    3b98:	60fb      	str	r3, [r7, #12]
			break;
    3b9a:	e02d      	b.n	3bf8 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3b9c:	4b1c      	ldr	r3, [pc, #112]	; (3c10 <get_secs_in_month+0xe0>)
    3b9e:	60fb      	str	r3, [r7, #12]
			break;
    3ba0:	e02a      	b.n	3bf8 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    3ba2:	78fb      	ldrb	r3, [r7, #3]
    3ba4:	3b01      	subs	r3, #1
    3ba6:	2b0b      	cmp	r3, #11
    3ba8:	d825      	bhi.n	3bf6 <get_secs_in_month+0xc6>
    3baa:	a201      	add	r2, pc, #4	; (adr r2, 3bb0 <get_secs_in_month+0x80>)
    3bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3bb0:	00003be1 	.word	0x00003be1
    3bb4:	00003be7 	.word	0x00003be7
    3bb8:	00003be1 	.word	0x00003be1
    3bbc:	00003bed 	.word	0x00003bed
    3bc0:	00003be1 	.word	0x00003be1
    3bc4:	00003bed 	.word	0x00003bed
    3bc8:	00003be1 	.word	0x00003be1
    3bcc:	00003be1 	.word	0x00003be1
    3bd0:	00003bed 	.word	0x00003bed
    3bd4:	00003be1 	.word	0x00003be1
    3bd8:	00003bed 	.word	0x00003bed
    3bdc:	00003be1 	.word	0x00003be1
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3be0:	4b09      	ldr	r3, [pc, #36]	; (3c08 <get_secs_in_month+0xd8>)
    3be2:	60fb      	str	r3, [r7, #12]
			break;
    3be4:	e008      	b.n	3bf8 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    3be6:	4b0b      	ldr	r3, [pc, #44]	; (3c14 <get_secs_in_month+0xe4>)
    3be8:	60fb      	str	r3, [r7, #12]
			break;
    3bea:	e005      	b.n	3bf8 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3bec:	4b08      	ldr	r3, [pc, #32]	; (3c10 <get_secs_in_month+0xe0>)
    3bee:	60fb      	str	r3, [r7, #12]
			break;
    3bf0:	e002      	b.n	3bf8 <get_secs_in_month+0xc8>
			break;
    3bf2:	bf00      	nop
    3bf4:	e000      	b.n	3bf8 <get_secs_in_month+0xc8>
		default:
			break;
    3bf6:	bf00      	nop
		}
	}

	return sec_in_month;
    3bf8:	68fb      	ldr	r3, [r7, #12]
}
    3bfa:	4618      	mov	r0, r3
    3bfc:	3710      	adds	r7, #16
    3bfe:	46bd      	mov	sp, r7
    3c00:	bd80      	pop	{r7, pc}
    3c02:	bf00      	nop
    3c04:	00003b0b 	.word	0x00003b0b
    3c08:	0028de80 	.word	0x0028de80
    3c0c:	00263b80 	.word	0x00263b80
    3c10:	00278d00 	.word	0x00278d00
    3c14:	0024ea00 	.word	0x0024ea00

00003c18 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	b08a      	sub	sp, #40	; 0x28
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	60f8      	str	r0, [r7, #12]
    3c20:	60b9      	str	r1, [r7, #8]
    3c22:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    3c24:	68fb      	ldr	r3, [r7, #12]
    3c26:	699b      	ldr	r3, [r3, #24]
    3c28:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    3c2a:	2301      	movs	r3, #1
    3c2c:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    3c2e:	2301      	movs	r3, #1
    3c30:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    3c32:	2300      	movs	r3, #0
    3c34:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    3c36:	2300      	movs	r3, #0
    3c38:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    3c3a:	68bb      	ldr	r3, [r7, #8]
    3c3c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    3c3e:	6a3b      	ldr	r3, [r7, #32]
    3c40:	b29b      	uxth	r3, r3
    3c42:	4618      	mov	r0, r3
    3c44:	4b32      	ldr	r3, [pc, #200]	; (3d10 <convert_timestamp_to_datetime+0xf8>)
    3c46:	4798      	blx	r3
    3c48:	4603      	mov	r3, r0
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d001      	beq.n	3c52 <convert_timestamp_to_datetime+0x3a>
    3c4e:	4b31      	ldr	r3, [pc, #196]	; (3d14 <convert_timestamp_to_datetime+0xfc>)
    3c50:	e000      	b.n	3c54 <convert_timestamp_to_datetime+0x3c>
    3c52:	4b31      	ldr	r3, [pc, #196]	; (3d18 <convert_timestamp_to_datetime+0x100>)
    3c54:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    3c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c58:	69bb      	ldr	r3, [r7, #24]
    3c5a:	429a      	cmp	r2, r3
    3c5c:	d307      	bcc.n	3c6e <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    3c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c60:	69bb      	ldr	r3, [r7, #24]
    3c62:	1ad3      	subs	r3, r2, r3
    3c64:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    3c66:	6a3b      	ldr	r3, [r7, #32]
    3c68:	3301      	adds	r3, #1
    3c6a:	623b      	str	r3, [r7, #32]
    3c6c:	e7e7      	b.n	3c3e <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    3c6e:	7ffb      	ldrb	r3, [r7, #31]
    3c70:	4619      	mov	r1, r3
    3c72:	6a38      	ldr	r0, [r7, #32]
    3c74:	4b29      	ldr	r3, [pc, #164]	; (3d1c <convert_timestamp_to_datetime+0x104>)
    3c76:	4798      	blx	r3
    3c78:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    3c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c7c:	697b      	ldr	r3, [r7, #20]
    3c7e:	429a      	cmp	r2, r3
    3c80:	d307      	bcc.n	3c92 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    3c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c84:	697b      	ldr	r3, [r7, #20]
    3c86:	1ad3      	subs	r3, r2, r3
    3c88:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    3c8a:	7ffb      	ldrb	r3, [r7, #31]
    3c8c:	3301      	adds	r3, #1
    3c8e:	77fb      	strb	r3, [r7, #31]
    3c90:	e7ed      	b.n	3c6e <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    3c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c94:	4a22      	ldr	r2, [pc, #136]	; (3d20 <convert_timestamp_to_datetime+0x108>)
    3c96:	4293      	cmp	r3, r2
    3c98:	d909      	bls.n	3cae <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    3c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c9c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    3ca0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    3ca4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    3ca6:	7fbb      	ldrb	r3, [r7, #30]
    3ca8:	3301      	adds	r3, #1
    3caa:	77bb      	strb	r3, [r7, #30]
    3cac:	e7f1      	b.n	3c92 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    3cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3cb0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    3cb4:	d307      	bcc.n	3cc6 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    3cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3cb8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    3cbc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    3cbe:	7f7b      	ldrb	r3, [r7, #29]
    3cc0:	3301      	adds	r3, #1
    3cc2:	777b      	strb	r3, [r7, #29]
    3cc4:	e7f3      	b.n	3cae <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    3cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3cc8:	2b3b      	cmp	r3, #59	; 0x3b
    3cca:	d906      	bls.n	3cda <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    3ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3cce:	3b3c      	subs	r3, #60	; 0x3c
    3cd0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    3cd2:	7f3b      	ldrb	r3, [r7, #28]
    3cd4:	3301      	adds	r3, #1
    3cd6:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    3cd8:	e7f5      	b.n	3cc6 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    3cda:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    3cdc:	6a3b      	ldr	r3, [r7, #32]
    3cde:	b29a      	uxth	r2, r3
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    3ce4:	687b      	ldr	r3, [r7, #4]
    3ce6:	7ffa      	ldrb	r2, [r7, #31]
    3ce8:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	7fba      	ldrb	r2, [r7, #30]
    3cee:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    3cf0:	687b      	ldr	r3, [r7, #4]
    3cf2:	7f7a      	ldrb	r2, [r7, #29]
    3cf4:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	7f3a      	ldrb	r2, [r7, #28]
    3cfa:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    3cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3cfe:	b2da      	uxtb	r2, r3
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    3d04:	2300      	movs	r3, #0
}
    3d06:	4618      	mov	r0, r3
    3d08:	3728      	adds	r7, #40	; 0x28
    3d0a:	46bd      	mov	sp, r7
    3d0c:	bd80      	pop	{r7, pc}
    3d0e:	bf00      	nop
    3d10:	00003b0b 	.word	0x00003b0b
    3d14:	01e28500 	.word	0x01e28500
    3d18:	01e13380 	.word	0x01e13380
    3d1c:	00003b31 	.word	0x00003b31
    3d20:	0001517f 	.word	0x0001517f

00003d24 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b084      	sub	sp, #16
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    3d2c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    3d2e:	2300      	movs	r3, #0
    3d30:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    3d32:	687b      	ldr	r3, [r7, #4]
    3d34:	2b00      	cmp	r3, #0
    3d36:	bf14      	ite	ne
    3d38:	2301      	movne	r3, #1
    3d3a:	2300      	moveq	r3, #0
    3d3c:	b2db      	uxtb	r3, r3
    3d3e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3d42:	4911      	ldr	r1, [pc, #68]	; (3d88 <calendar_init+0x64>)
    3d44:	4618      	mov	r0, r3
    3d46:	4b11      	ldr	r3, [pc, #68]	; (3d8c <calendar_init+0x68>)
    3d48:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    3d4a:	687b      	ldr	r3, [r7, #4]
    3d4c:	681a      	ldr	r2, [r3, #0]
    3d4e:	683b      	ldr	r3, [r7, #0]
    3d50:	429a      	cmp	r2, r3
    3d52:	d101      	bne.n	3d58 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    3d54:	2300      	movs	r3, #0
    3d56:	e013      	b.n	3d80 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d002      	beq.n	3d66 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    3d60:	f06f 0311 	mvn.w	r3, #17
    3d64:	e00c      	b.n	3d80 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    3d66:	687b      	ldr	r3, [r7, #4]
    3d68:	683a      	ldr	r2, [r7, #0]
    3d6a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	4618      	mov	r0, r3
    3d70:	4b07      	ldr	r3, [pc, #28]	; (3d90 <calendar_init+0x6c>)
    3d72:	4798      	blx	r3
    3d74:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	f240 72b2 	movw	r2, #1970	; 0x7b2
    3d7c:	619a      	str	r2, [r3, #24]

	return ret;
    3d7e:	68fb      	ldr	r3, [r7, #12]
}
    3d80:	4618      	mov	r0, r3
    3d82:	3710      	adds	r7, #16
    3d84:	46bd      	mov	sp, r7
    3d86:	bd80      	pop	{r7, pc}
    3d88:	000119a0 	.word	0x000119a0
    3d8c:	0000579d 	.word	0x0000579d
    3d90:	00007985 	.word	0x00007985

00003d94 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b084      	sub	sp, #16
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
    3d9c:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	2b00      	cmp	r3, #0
    3da2:	bf14      	ite	ne
    3da4:	2301      	movne	r3, #1
    3da6:	2300      	moveq	r3, #0
    3da8:	b2db      	uxtb	r3, r3
    3daa:	f240 223b 	movw	r2, #571	; 0x23b
    3dae:	4909      	ldr	r1, [pc, #36]	; (3dd4 <calendar_get_date_time+0x40>)
    3db0:	4618      	mov	r0, r3
    3db2:	4b09      	ldr	r3, [pc, #36]	; (3dd8 <calendar_get_date_time+0x44>)
    3db4:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	4618      	mov	r0, r3
    3dba:	4b08      	ldr	r3, [pc, #32]	; (3ddc <calendar_get_date_time+0x48>)
    3dbc:	4798      	blx	r3
    3dbe:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    3dc0:	683a      	ldr	r2, [r7, #0]
    3dc2:	68f9      	ldr	r1, [r7, #12]
    3dc4:	6878      	ldr	r0, [r7, #4]
    3dc6:	4b06      	ldr	r3, [pc, #24]	; (3de0 <calendar_get_date_time+0x4c>)
    3dc8:	4798      	blx	r3

	return ERR_NONE;
    3dca:	2300      	movs	r3, #0
}
    3dcc:	4618      	mov	r0, r3
    3dce:	3710      	adds	r7, #16
    3dd0:	46bd      	mov	sp, r7
    3dd2:	bd80      	pop	{r7, pc}
    3dd4:	000119a0 	.word	0x000119a0
    3dd8:	0000579d 	.word	0x0000579d
    3ddc:	00007a49 	.word	0x00007a49
    3de0:	00003c19 	.word	0x00003c19

00003de4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    3de4:	b580      	push	{r7, lr}
    3de6:	b084      	sub	sp, #16
    3de8:	af00      	add	r7, sp, #0
    3dea:	6078      	str	r0, [r7, #4]
    3dec:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    3dee:	687b      	ldr	r3, [r7, #4]
    3df0:	2b00      	cmp	r3, #0
    3df2:	d004      	beq.n	3dfe <can_async_init+0x1a>
    3df4:	683b      	ldr	r3, [r7, #0]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d001      	beq.n	3dfe <can_async_init+0x1a>
    3dfa:	2301      	movs	r3, #1
    3dfc:	e000      	b.n	3e00 <can_async_init+0x1c>
    3dfe:	2300      	movs	r3, #0
    3e00:	f003 0301 	and.w	r3, r3, #1
    3e04:	b2db      	uxtb	r3, r3
    3e06:	2241      	movs	r2, #65	; 0x41
    3e08:	490e      	ldr	r1, [pc, #56]	; (3e44 <can_async_init+0x60>)
    3e0a:	4618      	mov	r0, r3
    3e0c:	4b0e      	ldr	r3, [pc, #56]	; (3e48 <can_async_init+0x64>)
    3e0e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	6839      	ldr	r1, [r7, #0]
    3e14:	4618      	mov	r0, r3
    3e16:	4b0d      	ldr	r3, [pc, #52]	; (3e4c <can_async_init+0x68>)
    3e18:	4798      	blx	r3
    3e1a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    3e1c:	68fb      	ldr	r3, [r7, #12]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d001      	beq.n	3e26 <can_async_init+0x42>
		return rc;
    3e22:	68fb      	ldr	r3, [r7, #12]
    3e24:	e009      	b.n	3e3a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	4a09      	ldr	r2, [pc, #36]	; (3e50 <can_async_init+0x6c>)
    3e2a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	4a09      	ldr	r2, [pc, #36]	; (3e54 <can_async_init+0x70>)
    3e30:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	4a08      	ldr	r2, [pc, #32]	; (3e58 <can_async_init+0x74>)
    3e36:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3e38:	2300      	movs	r3, #0
}
    3e3a:	4618      	mov	r0, r3
    3e3c:	3710      	adds	r7, #16
    3e3e:	46bd      	mov	sp, r7
    3e40:	bd80      	pop	{r7, pc}
    3e42:	bf00      	nop
    3e44:	000119bc 	.word	0x000119bc
    3e48:	0000579d 	.word	0x0000579d
    3e4c:	00005cf9 	.word	0x00005cf9
    3e50:	00003e5d 	.word	0x00003e5d
    3e54:	00003e81 	.word	0x00003e81
    3e58:	00003ea5 	.word	0x00003ea5

00003e5c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    3e5c:	b580      	push	{r7, lr}
    3e5e:	b084      	sub	sp, #16
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3e64:	687b      	ldr	r3, [r7, #4]
    3e66:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    3e68:	68fb      	ldr	r3, [r7, #12]
    3e6a:	69db      	ldr	r3, [r3, #28]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d003      	beq.n	3e78 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    3e70:	68fb      	ldr	r3, [r7, #12]
    3e72:	69db      	ldr	r3, [r3, #28]
    3e74:	68f8      	ldr	r0, [r7, #12]
    3e76:	4798      	blx	r3
	}
}
    3e78:	bf00      	nop
    3e7a:	3710      	adds	r7, #16
    3e7c:	46bd      	mov	sp, r7
    3e7e:	bd80      	pop	{r7, pc}

00003e80 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b084      	sub	sp, #16
    3e84:	af00      	add	r7, sp, #0
    3e86:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    3e8c:	68fb      	ldr	r3, [r7, #12]
    3e8e:	6a1b      	ldr	r3, [r3, #32]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d003      	beq.n	3e9c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    3e94:	68fb      	ldr	r3, [r7, #12]
    3e96:	6a1b      	ldr	r3, [r3, #32]
    3e98:	68f8      	ldr	r0, [r7, #12]
    3e9a:	4798      	blx	r3
	}
}
    3e9c:	bf00      	nop
    3e9e:	3710      	adds	r7, #16
    3ea0:	46bd      	mov	sp, r7
    3ea2:	bd80      	pop	{r7, pc}

00003ea4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    3ea4:	b580      	push	{r7, lr}
    3ea6:	b084      	sub	sp, #16
    3ea8:	af00      	add	r7, sp, #0
    3eaa:	6078      	str	r0, [r7, #4]
    3eac:	460b      	mov	r3, r1
    3eae:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3eb0:	687b      	ldr	r3, [r7, #4]
    3eb2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    3eb4:	68fb      	ldr	r3, [r7, #12]
    3eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d005      	beq.n	3ec8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    3ebc:	68fb      	ldr	r3, [r7, #12]
    3ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ec0:	78fa      	ldrb	r2, [r7, #3]
    3ec2:	4611      	mov	r1, r2
    3ec4:	68f8      	ldr	r0, [r7, #12]
    3ec6:	4798      	blx	r3
	}
}
    3ec8:	bf00      	nop
    3eca:	3710      	adds	r7, #16
    3ecc:	46bd      	mov	sp, r7
    3ece:	bd80      	pop	{r7, pc}

00003ed0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    3ed0:	b580      	push	{r7, lr}
    3ed2:	b082      	sub	sp, #8
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
    3ed8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    3eda:	687b      	ldr	r3, [r7, #4]
    3edc:	2b00      	cmp	r3, #0
    3ede:	d004      	beq.n	3eea <crc_sync_init+0x1a>
    3ee0:	683b      	ldr	r3, [r7, #0]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d001      	beq.n	3eea <crc_sync_init+0x1a>
    3ee6:	2301      	movs	r3, #1
    3ee8:	e000      	b.n	3eec <crc_sync_init+0x1c>
    3eea:	2300      	movs	r3, #0
    3eec:	f003 0301 	and.w	r3, r3, #1
    3ef0:	b2db      	uxtb	r3, r3
    3ef2:	222b      	movs	r2, #43	; 0x2b
    3ef4:	4906      	ldr	r1, [pc, #24]	; (3f10 <crc_sync_init+0x40>)
    3ef6:	4618      	mov	r0, r3
    3ef8:	4b06      	ldr	r3, [pc, #24]	; (3f14 <crc_sync_init+0x44>)
    3efa:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	6839      	ldr	r1, [r7, #0]
    3f00:	4618      	mov	r0, r3
    3f02:	4b05      	ldr	r3, [pc, #20]	; (3f18 <crc_sync_init+0x48>)
    3f04:	4798      	blx	r3
    3f06:	4603      	mov	r3, r0
}
    3f08:	4618      	mov	r0, r3
    3f0a:	3708      	adds	r7, #8
    3f0c:	46bd      	mov	sp, r7
    3f0e:	bd80      	pop	{r7, pc}
    3f10:	000119d8 	.word	0x000119d8
    3f14:	0000579d 	.word	0x0000579d
    3f18:	000063ed 	.word	0x000063ed

00003f1c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    3f1c:	b590      	push	{r4, r7, lr}
    3f1e:	b083      	sub	sp, #12
    3f20:	af00      	add	r7, sp, #0
    3f22:	4603      	mov	r3, r0
    3f24:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    3f26:	4b07      	ldr	r3, [pc, #28]	; (3f44 <delay_us+0x28>)
    3f28:	681c      	ldr	r4, [r3, #0]
    3f2a:	88fb      	ldrh	r3, [r7, #6]
    3f2c:	4618      	mov	r0, r3
    3f2e:	4b06      	ldr	r3, [pc, #24]	; (3f48 <delay_us+0x2c>)
    3f30:	4798      	blx	r3
    3f32:	4603      	mov	r3, r0
    3f34:	4619      	mov	r1, r3
    3f36:	4620      	mov	r0, r4
    3f38:	4b04      	ldr	r3, [pc, #16]	; (3f4c <delay_us+0x30>)
    3f3a:	4798      	blx	r3
}
    3f3c:	bf00      	nop
    3f3e:	370c      	adds	r7, #12
    3f40:	46bd      	mov	sp, r7
    3f42:	bd90      	pop	{r4, r7, pc}
    3f44:	20001c30 	.word	0x20001c30
    3f48:	00006145 	.word	0x00006145
    3f4c:	000062d9 	.word	0x000062d9

00003f50 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3f50:	b590      	push	{r4, r7, lr}
    3f52:	b083      	sub	sp, #12
    3f54:	af00      	add	r7, sp, #0
    3f56:	4603      	mov	r3, r0
    3f58:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    3f5a:	4b07      	ldr	r3, [pc, #28]	; (3f78 <delay_ms+0x28>)
    3f5c:	681c      	ldr	r4, [r3, #0]
    3f5e:	88fb      	ldrh	r3, [r7, #6]
    3f60:	4618      	mov	r0, r3
    3f62:	4b06      	ldr	r3, [pc, #24]	; (3f7c <delay_ms+0x2c>)
    3f64:	4798      	blx	r3
    3f66:	4603      	mov	r3, r0
    3f68:	4619      	mov	r1, r3
    3f6a:	4620      	mov	r0, r4
    3f6c:	4b04      	ldr	r3, [pc, #16]	; (3f80 <delay_ms+0x30>)
    3f6e:	4798      	blx	r3
}
    3f70:	bf00      	nop
    3f72:	370c      	adds	r7, #12
    3f74:	46bd      	mov	sp, r7
    3f76:	bd90      	pop	{r4, r7, pc}
    3f78:	20001c30 	.word	0x20001c30
    3f7c:	000062b1 	.word	0x000062b1
    3f80:	000062d9 	.word	0x000062d9

00003f84 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    3f84:	b580      	push	{r7, lr}
    3f86:	af00      	add	r7, sp, #0
	return _event_system_init();
    3f88:	4b02      	ldr	r3, [pc, #8]	; (3f94 <event_system_init+0x10>)
    3f8a:	4798      	blx	r3
    3f8c:	4603      	mov	r3, r0
}
    3f8e:	4618      	mov	r0, r3
    3f90:	bd80      	pop	{r7, pc}
    3f92:	bf00      	nop
    3f94:	00006a21 	.word	0x00006a21

00003f98 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3f9e:	2300      	movs	r3, #0
    3fa0:	80fb      	strh	r3, [r7, #6]
    3fa2:	e00e      	b.n	3fc2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    3fa4:	88fb      	ldrh	r3, [r7, #6]
    3fa6:	4a0c      	ldr	r2, [pc, #48]	; (3fd8 <ext_irq_init+0x40>)
    3fa8:	00db      	lsls	r3, r3, #3
    3faa:	4413      	add	r3, r2
    3fac:	f04f 32ff 	mov.w	r2, #4294967295
    3fb0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    3fb2:	88fb      	ldrh	r3, [r7, #6]
    3fb4:	4a08      	ldr	r2, [pc, #32]	; (3fd8 <ext_irq_init+0x40>)
    3fb6:	2100      	movs	r1, #0
    3fb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3fbc:	88fb      	ldrh	r3, [r7, #6]
    3fbe:	3301      	adds	r3, #1
    3fc0:	80fb      	strh	r3, [r7, #6]
    3fc2:	88fb      	ldrh	r3, [r7, #6]
    3fc4:	2b03      	cmp	r3, #3
    3fc6:	d9ed      	bls.n	3fa4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    3fc8:	4804      	ldr	r0, [pc, #16]	; (3fdc <ext_irq_init+0x44>)
    3fca:	4b05      	ldr	r3, [pc, #20]	; (3fe0 <ext_irq_init+0x48>)
    3fcc:	4798      	blx	r3
    3fce:	4603      	mov	r3, r0
}
    3fd0:	4618      	mov	r0, r3
    3fd2:	3708      	adds	r7, #8
    3fd4:	46bd      	mov	sp, r7
    3fd6:	bd80      	pop	{r7, pc}
    3fd8:	20001c34 	.word	0x20001c34
    3fdc:	00003fe5 	.word	0x00003fe5
    3fe0:	000066f5 	.word	0x000066f5

00003fe4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    3fe4:	b580      	push	{r7, lr}
    3fe6:	b084      	sub	sp, #16
    3fe8:	af00      	add	r7, sp, #0
    3fea:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3fec:	2300      	movs	r3, #0
    3fee:	73fb      	strb	r3, [r7, #15]
    3ff0:	2304      	movs	r3, #4
    3ff2:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    3ff4:	e02a      	b.n	404c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    3ff6:	7bba      	ldrb	r2, [r7, #14]
    3ff8:	7bfb      	ldrb	r3, [r7, #15]
    3ffa:	4413      	add	r3, r2
    3ffc:	105b      	asrs	r3, r3, #1
    3ffe:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    4000:	7b7b      	ldrb	r3, [r7, #13]
    4002:	2b03      	cmp	r3, #3
    4004:	d827      	bhi.n	4056 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    4006:	7b7b      	ldrb	r3, [r7, #13]
    4008:	4a16      	ldr	r2, [pc, #88]	; (4064 <process_ext_irq+0x80>)
    400a:	00db      	lsls	r3, r3, #3
    400c:	4413      	add	r3, r2
    400e:	685a      	ldr	r2, [r3, #4]
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	429a      	cmp	r2, r3
    4014:	d10b      	bne.n	402e <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    4016:	7b7b      	ldrb	r3, [r7, #13]
    4018:	4a12      	ldr	r2, [pc, #72]	; (4064 <process_ext_irq+0x80>)
    401a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    401e:	2b00      	cmp	r3, #0
    4020:	d01b      	beq.n	405a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    4022:	7b7b      	ldrb	r3, [r7, #13]
    4024:	4a0f      	ldr	r2, [pc, #60]	; (4064 <process_ext_irq+0x80>)
    4026:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    402a:	4798      	blx	r3
			}
			return;
    402c:	e015      	b.n	405a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    402e:	7b7b      	ldrb	r3, [r7, #13]
    4030:	4a0c      	ldr	r2, [pc, #48]	; (4064 <process_ext_irq+0x80>)
    4032:	00db      	lsls	r3, r3, #3
    4034:	4413      	add	r3, r2
    4036:	685a      	ldr	r2, [r3, #4]
    4038:	687b      	ldr	r3, [r7, #4]
    403a:	429a      	cmp	r2, r3
    403c:	d203      	bcs.n	4046 <process_ext_irq+0x62>
			lower = middle + 1;
    403e:	7b7b      	ldrb	r3, [r7, #13]
    4040:	3301      	adds	r3, #1
    4042:	73fb      	strb	r3, [r7, #15]
    4044:	e002      	b.n	404c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    4046:	7b7b      	ldrb	r3, [r7, #13]
    4048:	3b01      	subs	r3, #1
    404a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    404c:	7bba      	ldrb	r2, [r7, #14]
    404e:	7bfb      	ldrb	r3, [r7, #15]
    4050:	429a      	cmp	r2, r3
    4052:	d2d0      	bcs.n	3ff6 <process_ext_irq+0x12>
    4054:	e002      	b.n	405c <process_ext_irq+0x78>
			return;
    4056:	bf00      	nop
    4058:	e000      	b.n	405c <process_ext_irq+0x78>
			return;
    405a:	bf00      	nop
		}
	}
}
    405c:	3710      	adds	r7, #16
    405e:	46bd      	mov	sp, r7
    4060:	bd80      	pop	{r7, pc}
    4062:	bf00      	nop
    4064:	20001c34 	.word	0x20001c34

00004068 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4068:	b580      	push	{r7, lr}
    406a:	b084      	sub	sp, #16
    406c:	af00      	add	r7, sp, #0
    406e:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4070:	687b      	ldr	r3, [r7, #4]
    4072:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	885b      	ldrh	r3, [r3, #2]
    4078:	b29b      	uxth	r3, r3
    407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    407e:	2b00      	cmp	r3, #0
    4080:	d107      	bne.n	4092 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    4082:	68fb      	ldr	r3, [r7, #12]
    4084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4086:	2b00      	cmp	r3, #0
    4088:	d003      	beq.n	4092 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    408a:	68fb      	ldr	r3, [r7, #12]
    408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    408e:	68f8      	ldr	r0, [r7, #12]
    4090:	4798      	blx	r3
		}
	}
}
    4092:	bf00      	nop
    4094:	3710      	adds	r7, #16
    4096:	46bd      	mov	sp, r7
    4098:	bd80      	pop	{r7, pc}

0000409a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    409a:	b580      	push	{r7, lr}
    409c:	b084      	sub	sp, #16
    409e:	af00      	add	r7, sp, #0
    40a0:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	885b      	ldrh	r3, [r3, #2]
    40aa:	b29b      	uxth	r3, r3
    40ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
    40b0:	2b00      	cmp	r3, #0
    40b2:	d107      	bne.n	40c4 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    40b8:	2b00      	cmp	r3, #0
    40ba:	d003      	beq.n	40c4 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    40bc:	68fb      	ldr	r3, [r7, #12]
    40be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    40c0:	68f8      	ldr	r0, [r7, #12]
    40c2:	4798      	blx	r3
		}
	}
}
    40c4:	bf00      	nop
    40c6:	3710      	adds	r7, #16
    40c8:	46bd      	mov	sp, r7
    40ca:	bd80      	pop	{r7, pc}

000040cc <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b084      	sub	sp, #16
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
    40d4:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	885b      	ldrh	r3, [r3, #2]
    40de:	b29b      	uxth	r3, r3
    40e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    40e4:	2b00      	cmp	r3, #0
    40e6:	d108      	bne.n	40fa <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    40e8:	68fb      	ldr	r3, [r7, #12]
    40ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    40ec:	2b00      	cmp	r3, #0
    40ee:	d004      	beq.n	40fa <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    40f0:	68fb      	ldr	r3, [r7, #12]
    40f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    40f4:	6839      	ldr	r1, [r7, #0]
    40f6:	68f8      	ldr	r0, [r7, #12]
    40f8:	4798      	blx	r3
		}
	}
}
    40fa:	bf00      	nop
    40fc:	3710      	adds	r7, #16
    40fe:	46bd      	mov	sp, r7
    4100:	bd80      	pop	{r7, pc}
	...

00004104 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    4104:	b580      	push	{r7, lr}
    4106:	b08a      	sub	sp, #40	; 0x28
    4108:	af00      	add	r7, sp, #0
    410a:	60f8      	str	r0, [r7, #12]
    410c:	60b9      	str	r1, [r7, #8]
    410e:	4613      	mov	r3, r2
    4110:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4112:	68fb      	ldr	r3, [r7, #12]
    4114:	3b28      	subs	r3, #40	; 0x28
    4116:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    411a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    411c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    411e:	88fb      	ldrh	r3, [r7, #6]
    4120:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    4122:	f248 0301 	movw	r3, #32769	; 0x8001
    4126:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    4128:	68bb      	ldr	r3, [r7, #8]
    412a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    412e:	f107 0214 	add.w	r2, r7, #20
    4132:	4611      	mov	r1, r2
    4134:	4618      	mov	r0, r3
    4136:	4b06      	ldr	r3, [pc, #24]	; (4150 <i2c_m_async_read+0x4c>)
    4138:	4798      	blx	r3
    413a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    413c:	6a3b      	ldr	r3, [r7, #32]
    413e:	2b00      	cmp	r3, #0
    4140:	d001      	beq.n	4146 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    4142:	6a3b      	ldr	r3, [r7, #32]
    4144:	e000      	b.n	4148 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    4146:	88fb      	ldrh	r3, [r7, #6]
}
    4148:	4618      	mov	r0, r3
    414a:	3728      	adds	r7, #40	; 0x28
    414c:	46bd      	mov	sp, r7
    414e:	bd80      	pop	{r7, pc}
    4150:	00008879 	.word	0x00008879

00004154 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4154:	b580      	push	{r7, lr}
    4156:	b08a      	sub	sp, #40	; 0x28
    4158:	af00      	add	r7, sp, #0
    415a:	60f8      	str	r0, [r7, #12]
    415c:	60b9      	str	r1, [r7, #8]
    415e:	4613      	mov	r3, r2
    4160:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    4162:	68fb      	ldr	r3, [r7, #12]
    4164:	3b28      	subs	r3, #40	; 0x28
    4166:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    416a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    416c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    416e:	88fb      	ldrh	r3, [r7, #6]
    4170:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    4172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4176:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    4178:	68bb      	ldr	r3, [r7, #8]
    417a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    417e:	f107 0214 	add.w	r2, r7, #20
    4182:	4611      	mov	r1, r2
    4184:	4618      	mov	r0, r3
    4186:	4b06      	ldr	r3, [pc, #24]	; (41a0 <i2c_m_async_write+0x4c>)
    4188:	4798      	blx	r3
    418a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    418c:	6a3b      	ldr	r3, [r7, #32]
    418e:	2b00      	cmp	r3, #0
    4190:	d001      	beq.n	4196 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    4192:	6a3b      	ldr	r3, [r7, #32]
    4194:	e000      	b.n	4198 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    4196:	88fb      	ldrh	r3, [r7, #6]
}
    4198:	4618      	mov	r0, r3
    419a:	3728      	adds	r7, #40	; 0x28
    419c:	46bd      	mov	sp, r7
    419e:	bd80      	pop	{r7, pc}
    41a0:	00008879 	.word	0x00008879

000041a4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    41a4:	b580      	push	{r7, lr}
    41a6:	b084      	sub	sp, #16
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
    41ac:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    41ae:	687b      	ldr	r3, [r7, #4]
    41b0:	2b00      	cmp	r3, #0
    41b2:	bf14      	ite	ne
    41b4:	2301      	movne	r3, #1
    41b6:	2300      	moveq	r3, #0
    41b8:	b2db      	uxtb	r3, r3
    41ba:	2289      	movs	r2, #137	; 0x89
    41bc:	4915      	ldr	r1, [pc, #84]	; (4214 <i2c_m_async_init+0x70>)
    41be:	4618      	mov	r0, r3
    41c0:	4b15      	ldr	r3, [pc, #84]	; (4218 <i2c_m_async_init+0x74>)
    41c2:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	6839      	ldr	r1, [r7, #0]
    41c8:	4618      	mov	r0, r3
    41ca:	4b14      	ldr	r3, [pc, #80]	; (421c <i2c_m_async_init+0x78>)
    41cc:	4798      	blx	r3
    41ce:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    41d0:	68fb      	ldr	r3, [r7, #12]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d001      	beq.n	41da <i2c_m_async_init+0x36>
		return init_status;
    41d6:	68fb      	ldr	r3, [r7, #12]
    41d8:	e018      	b.n	420c <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	4a10      	ldr	r2, [pc, #64]	; (4220 <i2c_m_async_init+0x7c>)
    41de:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	4a10      	ldr	r2, [pc, #64]	; (4224 <i2c_m_async_init+0x80>)
    41e4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	4a0f      	ldr	r2, [pc, #60]	; (4228 <i2c_m_async_init+0x84>)
    41ea:	2101      	movs	r1, #1
    41ec:	4618      	mov	r0, r3
    41ee:	4b0f      	ldr	r3, [pc, #60]	; (422c <i2c_m_async_init+0x88>)
    41f0:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	4a0e      	ldr	r2, [pc, #56]	; (4230 <i2c_m_async_init+0x8c>)
    41f6:	2102      	movs	r1, #2
    41f8:	4618      	mov	r0, r3
    41fa:	4b0c      	ldr	r3, [pc, #48]	; (422c <i2c_m_async_init+0x88>)
    41fc:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    41fe:	687b      	ldr	r3, [r7, #4]
    4200:	4a0c      	ldr	r2, [pc, #48]	; (4234 <i2c_m_async_init+0x90>)
    4202:	2100      	movs	r1, #0
    4204:	4618      	mov	r0, r3
    4206:	4b09      	ldr	r3, [pc, #36]	; (422c <i2c_m_async_init+0x88>)
    4208:	4798      	blx	r3

	return ERR_NONE;
    420a:	2300      	movs	r3, #0
}
    420c:	4618      	mov	r0, r3
    420e:	3710      	adds	r7, #16
    4210:	46bd      	mov	sp, r7
    4212:	bd80      	pop	{r7, pc}
    4214:	000119f4 	.word	0x000119f4
    4218:	0000579d 	.word	0x0000579d
    421c:	000086c9 	.word	0x000086c9
    4220:	00004105 	.word	0x00004105
    4224:	00004155 	.word	0x00004155
    4228:	00004069 	.word	0x00004069
    422c:	0000894d 	.word	0x0000894d
    4230:	0000409b 	.word	0x0000409b
    4234:	000040cd 	.word	0x000040cd

00004238 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4238:	b580      	push	{r7, lr}
    423a:	b084      	sub	sp, #16
    423c:	af00      	add	r7, sp, #0
    423e:	60f8      	str	r0, [r7, #12]
    4240:	60b9      	str	r1, [r7, #8]
    4242:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4244:	68fb      	ldr	r3, [r7, #12]
    4246:	2b00      	cmp	r3, #0
    4248:	d004      	beq.n	4254 <pwm_init+0x1c>
    424a:	68bb      	ldr	r3, [r7, #8]
    424c:	2b00      	cmp	r3, #0
    424e:	d001      	beq.n	4254 <pwm_init+0x1c>
    4250:	2301      	movs	r3, #1
    4252:	e000      	b.n	4256 <pwm_init+0x1e>
    4254:	2300      	movs	r3, #0
    4256:	f003 0301 	and.w	r3, r3, #1
    425a:	b2db      	uxtb	r3, r3
    425c:	2233      	movs	r2, #51	; 0x33
    425e:	490a      	ldr	r1, [pc, #40]	; (4288 <pwm_init+0x50>)
    4260:	4618      	mov	r0, r3
    4262:	4b0a      	ldr	r3, [pc, #40]	; (428c <pwm_init+0x54>)
    4264:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    4266:	68fb      	ldr	r3, [r7, #12]
    4268:	68b9      	ldr	r1, [r7, #8]
    426a:	4618      	mov	r0, r3
    426c:	4b08      	ldr	r3, [pc, #32]	; (4290 <pwm_init+0x58>)
    426e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    4270:	68fb      	ldr	r3, [r7, #12]
    4272:	4a08      	ldr	r2, [pc, #32]	; (4294 <pwm_init+0x5c>)
    4274:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    4276:	68fb      	ldr	r3, [r7, #12]
    4278:	4a07      	ldr	r2, [pc, #28]	; (4298 <pwm_init+0x60>)
    427a:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    427c:	2300      	movs	r3, #0
}
    427e:	4618      	mov	r0, r3
    4280:	3710      	adds	r7, #16
    4282:	46bd      	mov	sp, r7
    4284:	bd80      	pop	{r7, pc}
    4286:	bf00      	nop
    4288:	00011a14 	.word	0x00011a14
    428c:	0000579d 	.word	0x0000579d
    4290:	00009afd 	.word	0x00009afd
    4294:	000042f1 	.word	0x000042f1
    4298:	00004315 	.word	0x00004315

0000429c <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    429c:	b580      	push	{r7, lr}
    429e:	b082      	sub	sp, #8
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	2b00      	cmp	r3, #0
    42a8:	bf14      	ite	ne
    42aa:	2301      	movne	r3, #1
    42ac:	2300      	moveq	r3, #0
    42ae:	b2db      	uxtb	r3, r3
    42b0:	224a      	movs	r2, #74	; 0x4a
    42b2:	490b      	ldr	r1, [pc, #44]	; (42e0 <pwm_enable+0x44>)
    42b4:	4618      	mov	r0, r3
    42b6:	4b0b      	ldr	r3, [pc, #44]	; (42e4 <pwm_enable+0x48>)
    42b8:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	4618      	mov	r0, r3
    42be:	4b0a      	ldr	r3, [pc, #40]	; (42e8 <pwm_enable+0x4c>)
    42c0:	4798      	blx	r3
    42c2:	4603      	mov	r3, r0
    42c4:	2b00      	cmp	r3, #0
    42c6:	d002      	beq.n	42ce <pwm_enable+0x32>
		return ERR_DENIED;
    42c8:	f06f 0310 	mvn.w	r3, #16
    42cc:	e004      	b.n	42d8 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	4618      	mov	r0, r3
    42d2:	4b06      	ldr	r3, [pc, #24]	; (42ec <pwm_enable+0x50>)
    42d4:	4798      	blx	r3

	return ERR_NONE;
    42d6:	2300      	movs	r3, #0
}
    42d8:	4618      	mov	r0, r3
    42da:	3708      	adds	r7, #8
    42dc:	46bd      	mov	sp, r7
    42de:	bd80      	pop	{r7, pc}
    42e0:	00011a14 	.word	0x00011a14
    42e4:	0000579d 	.word	0x0000579d
    42e8:	00009d99 	.word	0x00009d99
    42ec:	00009d39 	.word	0x00009d39

000042f0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    42f0:	b580      	push	{r7, lr}
    42f2:	b084      	sub	sp, #16
    42f4:	af00      	add	r7, sp, #0
    42f6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    42fc:	68fb      	ldr	r3, [r7, #12]
    42fe:	695b      	ldr	r3, [r3, #20]
    4300:	2b00      	cmp	r3, #0
    4302:	d003      	beq.n	430c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    4304:	68fb      	ldr	r3, [r7, #12]
    4306:	695b      	ldr	r3, [r3, #20]
    4308:	68f8      	ldr	r0, [r7, #12]
    430a:	4798      	blx	r3
	}
}
    430c:	bf00      	nop
    430e:	3710      	adds	r7, #16
    4310:	46bd      	mov	sp, r7
    4312:	bd80      	pop	{r7, pc}

00004314 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    4314:	b580      	push	{r7, lr}
    4316:	b084      	sub	sp, #16
    4318:	af00      	add	r7, sp, #0
    431a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    4320:	68fb      	ldr	r3, [r7, #12]
    4322:	699b      	ldr	r3, [r3, #24]
    4324:	2b00      	cmp	r3, #0
    4326:	d003      	beq.n	4330 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    4328:	68fb      	ldr	r3, [r7, #12]
    432a:	699b      	ldr	r3, [r3, #24]
    432c:	68f8      	ldr	r0, [r7, #12]
    432e:	4798      	blx	r3
	}
}
    4330:	bf00      	nop
    4332:	3710      	adds	r7, #16
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}

00004338 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    4338:	b580      	push	{r7, lr}
    433a:	b082      	sub	sp, #8
    433c:	af00      	add	r7, sp, #0
    433e:	6078      	str	r0, [r7, #4]
    4340:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	2b00      	cmp	r3, #0
    4346:	d004      	beq.n	4352 <qspi_sync_init+0x1a>
    4348:	683b      	ldr	r3, [r7, #0]
    434a:	2b00      	cmp	r3, #0
    434c:	d001      	beq.n	4352 <qspi_sync_init+0x1a>
    434e:	2301      	movs	r3, #1
    4350:	e000      	b.n	4354 <qspi_sync_init+0x1c>
    4352:	2300      	movs	r3, #0
    4354:	f003 0301 	and.w	r3, r3, #1
    4358:	b2db      	uxtb	r3, r3
    435a:	2231      	movs	r2, #49	; 0x31
    435c:	4906      	ldr	r1, [pc, #24]	; (4378 <qspi_sync_init+0x40>)
    435e:	4618      	mov	r0, r3
    4360:	4b06      	ldr	r3, [pc, #24]	; (437c <qspi_sync_init+0x44>)
    4362:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    4364:	687b      	ldr	r3, [r7, #4]
    4366:	6839      	ldr	r1, [r7, #0]
    4368:	4618      	mov	r0, r3
    436a:	4b05      	ldr	r3, [pc, #20]	; (4380 <qspi_sync_init+0x48>)
    436c:	4798      	blx	r3
    436e:	4603      	mov	r3, r0
}
    4370:	4618      	mov	r0, r3
    4372:	3708      	adds	r7, #8
    4374:	46bd      	mov	sp, r7
    4376:	bd80      	pop	{r7, pc}
    4378:	00011a2c 	.word	0x00011a2c
    437c:	0000579d 	.word	0x0000579d
    4380:	000075a1 	.word	0x000075a1

00004384 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    4384:	b580      	push	{r7, lr}
    4386:	b082      	sub	sp, #8
    4388:	af00      	add	r7, sp, #0
    438a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    438c:	687b      	ldr	r3, [r7, #4]
    438e:	2b00      	cmp	r3, #0
    4390:	bf14      	ite	ne
    4392:	2301      	movne	r3, #1
    4394:	2300      	moveq	r3, #0
    4396:	b2db      	uxtb	r3, r3
    4398:	223f      	movs	r2, #63	; 0x3f
    439a:	4906      	ldr	r1, [pc, #24]	; (43b4 <qspi_sync_enable+0x30>)
    439c:	4618      	mov	r0, r3
    439e:	4b06      	ldr	r3, [pc, #24]	; (43b8 <qspi_sync_enable+0x34>)
    43a0:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	4618      	mov	r0, r3
    43a6:	4b05      	ldr	r3, [pc, #20]	; (43bc <qspi_sync_enable+0x38>)
    43a8:	4798      	blx	r3
    43aa:	4603      	mov	r3, r0
}
    43ac:	4618      	mov	r0, r3
    43ae:	3708      	adds	r7, #8
    43b0:	46bd      	mov	sp, r7
    43b2:	bd80      	pop	{r7, pc}
    43b4:	00011a2c 	.word	0x00011a2c
    43b8:	0000579d 	.word	0x0000579d
    43bc:	00007615 	.word	0x00007615

000043c0 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    43c0:	b580      	push	{r7, lr}
    43c2:	b082      	sub	sp, #8
    43c4:	af00      	add	r7, sp, #0
    43c6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	2b00      	cmp	r3, #0
    43cc:	bf14      	ite	ne
    43ce:	2301      	movne	r3, #1
    43d0:	2300      	moveq	r3, #0
    43d2:	b2db      	uxtb	r3, r3
    43d4:	2246      	movs	r2, #70	; 0x46
    43d6:	4906      	ldr	r1, [pc, #24]	; (43f0 <qspi_sync_disable+0x30>)
    43d8:	4618      	mov	r0, r3
    43da:	4b06      	ldr	r3, [pc, #24]	; (43f4 <qspi_sync_disable+0x34>)
    43dc:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    43de:	687b      	ldr	r3, [r7, #4]
    43e0:	4618      	mov	r0, r3
    43e2:	4b05      	ldr	r3, [pc, #20]	; (43f8 <qspi_sync_disable+0x38>)
    43e4:	4798      	blx	r3
    43e6:	4603      	mov	r3, r0
}
    43e8:	4618      	mov	r0, r3
    43ea:	3708      	adds	r7, #8
    43ec:	46bd      	mov	sp, r7
    43ee:	bd80      	pop	{r7, pc}
    43f0:	00011a2c 	.word	0x00011a2c
    43f4:	0000579d 	.word	0x0000579d
    43f8:	00007639 	.word	0x00007639

000043fc <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    43fc:	b580      	push	{r7, lr}
    43fe:	b082      	sub	sp, #8
    4400:	af00      	add	r7, sp, #0
    4402:	6078      	str	r0, [r7, #4]
    4404:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	2b00      	cmp	r3, #0
    440a:	d004      	beq.n	4416 <qspi_sync_serial_run_command+0x1a>
    440c:	683b      	ldr	r3, [r7, #0]
    440e:	2b00      	cmp	r3, #0
    4410:	d001      	beq.n	4416 <qspi_sync_serial_run_command+0x1a>
    4412:	2301      	movs	r3, #1
    4414:	e000      	b.n	4418 <qspi_sync_serial_run_command+0x1c>
    4416:	2300      	movs	r3, #0
    4418:	f003 0301 	and.w	r3, r3, #1
    441c:	b2db      	uxtb	r3, r3
    441e:	224d      	movs	r2, #77	; 0x4d
    4420:	4906      	ldr	r1, [pc, #24]	; (443c <qspi_sync_serial_run_command+0x40>)
    4422:	4618      	mov	r0, r3
    4424:	4b06      	ldr	r3, [pc, #24]	; (4440 <qspi_sync_serial_run_command+0x44>)
    4426:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	6839      	ldr	r1, [r7, #0]
    442c:	4618      	mov	r0, r3
    442e:	4b05      	ldr	r3, [pc, #20]	; (4444 <qspi_sync_serial_run_command+0x48>)
    4430:	4798      	blx	r3
    4432:	4603      	mov	r3, r0
}
    4434:	4618      	mov	r0, r3
    4436:	3708      	adds	r7, #8
    4438:	46bd      	mov	sp, r7
    443a:	bd80      	pop	{r7, pc}
    443c:	00011a2c 	.word	0x00011a2c
    4440:	0000579d 	.word	0x0000579d
    4444:	00007785 	.word	0x00007785

00004448 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    4448:	b580      	push	{r7, lr}
    444a:	b084      	sub	sp, #16
    444c:	af00      	add	r7, sp, #0
    444e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	3b04      	subs	r3, #4
    4454:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    4456:	687b      	ldr	r3, [r7, #4]
    4458:	791b      	ldrb	r3, [r3, #4]
    445a:	2b01      	cmp	r3, #1
    445c:	d80e      	bhi.n	447c <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4462:	68fb      	ldr	r3, [r7, #12]
    4464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4466:	1c58      	adds	r0, r3, #1
    4468:	68f9      	ldr	r1, [r7, #12]
    446a:	6448      	str	r0, [r1, #68]	; 0x44
    446c:	4413      	add	r3, r2
    446e:	781b      	ldrb	r3, [r3, #0]
    4470:	b29b      	uxth	r3, r3
    4472:	4619      	mov	r1, r3
    4474:	6878      	ldr	r0, [r7, #4]
    4476:	4b11      	ldr	r3, [pc, #68]	; (44bc <_spi_dev_tx+0x74>)
    4478:	4798      	blx	r3
    447a:	e00d      	b.n	4498 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    447c:	68fb      	ldr	r3, [r7, #12]
    447e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4480:	68fb      	ldr	r3, [r7, #12]
    4482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4484:	1c58      	adds	r0, r3, #1
    4486:	68f9      	ldr	r1, [r7, #12]
    4488:	6448      	str	r0, [r1, #68]	; 0x44
    448a:	005b      	lsls	r3, r3, #1
    448c:	4413      	add	r3, r2
    448e:	881b      	ldrh	r3, [r3, #0]
    4490:	4619      	mov	r1, r3
    4492:	6878      	ldr	r0, [r7, #4]
    4494:	4b09      	ldr	r3, [pc, #36]	; (44bc <_spi_dev_tx+0x74>)
    4496:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    4498:	68fb      	ldr	r3, [r7, #12]
    449a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    449c:	68fb      	ldr	r3, [r7, #12]
    449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    44a0:	429a      	cmp	r2, r3
    44a2:	d107      	bne.n	44b4 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    44a4:	2100      	movs	r1, #0
    44a6:	6878      	ldr	r0, [r7, #4]
    44a8:	4b05      	ldr	r3, [pc, #20]	; (44c0 <_spi_dev_tx+0x78>)
    44aa:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    44ac:	2101      	movs	r1, #1
    44ae:	6878      	ldr	r0, [r7, #4]
    44b0:	4b04      	ldr	r3, [pc, #16]	; (44c4 <_spi_dev_tx+0x7c>)
    44b2:	4798      	blx	r3
	}
}
    44b4:	bf00      	nop
    44b6:	3710      	adds	r7, #16
    44b8:	46bd      	mov	sp, r7
    44ba:	bd80      	pop	{r7, pc}
    44bc:	000093ad 	.word	0x000093ad
    44c0:	00009271 	.word	0x00009271
    44c4:	00009345 	.word	0x00009345

000044c8 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    44c8:	b590      	push	{r4, r7, lr}
    44ca:	b085      	sub	sp, #20
    44cc:	af00      	add	r7, sp, #0
    44ce:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    44d0:	687b      	ldr	r3, [r7, #4]
    44d2:	3b04      	subs	r3, #4
    44d4:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    44da:	2b00      	cmp	r3, #0
    44dc:	d021      	beq.n	4522 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	791b      	ldrb	r3, [r3, #4]
    44e2:	2b01      	cmp	r3, #1
    44e4:	d80e      	bhi.n	4504 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    44ea:	68fb      	ldr	r3, [r7, #12]
    44ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44ee:	1c58      	adds	r0, r3, #1
    44f0:	68f9      	ldr	r1, [r7, #12]
    44f2:	6448      	str	r0, [r1, #68]	; 0x44
    44f4:	18d4      	adds	r4, r2, r3
    44f6:	6878      	ldr	r0, [r7, #4]
    44f8:	4b2e      	ldr	r3, [pc, #184]	; (45b4 <_spi_dev_rx+0xec>)
    44fa:	4798      	blx	r3
    44fc:	4603      	mov	r3, r0
    44fe:	b2db      	uxtb	r3, r3
    4500:	7023      	strb	r3, [r4, #0]
    4502:	e016      	b.n	4532 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4504:	68fb      	ldr	r3, [r7, #12]
    4506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    450c:	1c58      	adds	r0, r3, #1
    450e:	68f9      	ldr	r1, [r7, #12]
    4510:	6448      	str	r0, [r1, #68]	; 0x44
    4512:	005b      	lsls	r3, r3, #1
    4514:	18d4      	adds	r4, r2, r3
    4516:	6878      	ldr	r0, [r7, #4]
    4518:	4b26      	ldr	r3, [pc, #152]	; (45b4 <_spi_dev_rx+0xec>)
    451a:	4798      	blx	r3
    451c:	4603      	mov	r3, r0
    451e:	8023      	strh	r3, [r4, #0]
    4520:	e007      	b.n	4532 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    4522:	6878      	ldr	r0, [r7, #4]
    4524:	4b23      	ldr	r3, [pc, #140]	; (45b4 <_spi_dev_rx+0xec>)
    4526:	4798      	blx	r3
		spi->xfercnt++;
    4528:	68fb      	ldr	r3, [r7, #12]
    452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    452c:	1c5a      	adds	r2, r3, #1
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    4532:	68fb      	ldr	r3, [r7, #12]
    4534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    453a:	429a      	cmp	r2, r3
    453c:	d226      	bcs.n	458c <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    453e:	68fb      	ldr	r3, [r7, #12]
    4540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4542:	2b00      	cmp	r3, #0
    4544:	d01b      	beq.n	457e <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    4546:	687b      	ldr	r3, [r7, #4]
    4548:	791b      	ldrb	r3, [r3, #4]
    454a:	2b01      	cmp	r3, #1
    454c:	d80b      	bhi.n	4566 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    454e:	68fb      	ldr	r3, [r7, #12]
    4550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4552:	68fb      	ldr	r3, [r7, #12]
    4554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4556:	4413      	add	r3, r2
    4558:	781b      	ldrb	r3, [r3, #0]
    455a:	b29b      	uxth	r3, r3
    455c:	4619      	mov	r1, r3
    455e:	6878      	ldr	r0, [r7, #4]
    4560:	4b15      	ldr	r3, [pc, #84]	; (45b8 <_spi_dev_rx+0xf0>)
    4562:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    4564:	e022      	b.n	45ac <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    456e:	005b      	lsls	r3, r3, #1
    4570:	4413      	add	r3, r2
    4572:	881b      	ldrh	r3, [r3, #0]
    4574:	4619      	mov	r1, r3
    4576:	6878      	ldr	r0, [r7, #4]
    4578:	4b0f      	ldr	r3, [pc, #60]	; (45b8 <_spi_dev_rx+0xf0>)
    457a:	4798      	blx	r3
}
    457c:	e016      	b.n	45ac <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	88db      	ldrh	r3, [r3, #6]
    4582:	4619      	mov	r1, r3
    4584:	6878      	ldr	r0, [r7, #4]
    4586:	4b0c      	ldr	r3, [pc, #48]	; (45b8 <_spi_dev_rx+0xf0>)
    4588:	4798      	blx	r3
}
    458a:	e00f      	b.n	45ac <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    458c:	2100      	movs	r1, #0
    458e:	6878      	ldr	r0, [r7, #4]
    4590:	4b0a      	ldr	r3, [pc, #40]	; (45bc <_spi_dev_rx+0xf4>)
    4592:	4798      	blx	r3
		spi->stat = 0;
    4594:	68fb      	ldr	r3, [r7, #12]
    4596:	2200      	movs	r2, #0
    4598:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    459c:	68fb      	ldr	r3, [r7, #12]
    459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    45a0:	2b00      	cmp	r3, #0
    45a2:	d003      	beq.n	45ac <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    45a4:	68fb      	ldr	r3, [r7, #12]
    45a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    45a8:	68f8      	ldr	r0, [r7, #12]
    45aa:	4798      	blx	r3
}
    45ac:	bf00      	nop
    45ae:	3714      	adds	r7, #20
    45b0:	46bd      	mov	sp, r7
    45b2:	bd90      	pop	{r4, r7, pc}
    45b4:	00009405 	.word	0x00009405
    45b8:	000093ad 	.word	0x000093ad
    45bc:	000092d5 	.word	0x000092d5

000045c0 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    45c0:	b580      	push	{r7, lr}
    45c2:	b084      	sub	sp, #16
    45c4:	af00      	add	r7, sp, #0
    45c6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    45c8:	687b      	ldr	r3, [r7, #4]
    45ca:	3b04      	subs	r3, #4
    45cc:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    45ce:	68fb      	ldr	r3, [r7, #12]
    45d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45d6:	429a      	cmp	r2, r3
    45d8:	d30f      	bcc.n	45fa <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    45da:	2100      	movs	r1, #0
    45dc:	6878      	ldr	r0, [r7, #4]
    45de:	4b09      	ldr	r3, [pc, #36]	; (4604 <_spi_dev_complete+0x44>)
    45e0:	4798      	blx	r3
		spi->stat = 0;
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	2200      	movs	r2, #0
    45e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    45ea:	68fb      	ldr	r3, [r7, #12]
    45ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    45ee:	2b00      	cmp	r3, #0
    45f0:	d003      	beq.n	45fa <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    45f6:	68f8      	ldr	r0, [r7, #12]
    45f8:	4798      	blx	r3
		}
	}
}
    45fa:	bf00      	nop
    45fc:	3710      	adds	r7, #16
    45fe:	46bd      	mov	sp, r7
    4600:	bd80      	pop	{r7, pc}
    4602:	bf00      	nop
    4604:	00009345 	.word	0x00009345

00004608 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    4608:	b580      	push	{r7, lr}
    460a:	b084      	sub	sp, #16
    460c:	af00      	add	r7, sp, #0
    460e:	6078      	str	r0, [r7, #4]
    4610:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	3b04      	subs	r3, #4
    4616:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    4618:	2100      	movs	r1, #0
    461a:	6878      	ldr	r0, [r7, #4]
    461c:	4b0d      	ldr	r3, [pc, #52]	; (4654 <_spi_dev_error+0x4c>)
    461e:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4620:	2100      	movs	r1, #0
    4622:	6878      	ldr	r0, [r7, #4]
    4624:	4b0c      	ldr	r3, [pc, #48]	; (4658 <_spi_dev_error+0x50>)
    4626:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4628:	2100      	movs	r1, #0
    462a:	6878      	ldr	r0, [r7, #4]
    462c:	4b0b      	ldr	r3, [pc, #44]	; (465c <_spi_dev_error+0x54>)
    462e:	4798      	blx	r3
	spi->stat = 0;
    4630:	68fb      	ldr	r3, [r7, #12]
    4632:	2200      	movs	r2, #0
    4634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    4638:	68fb      	ldr	r3, [r7, #12]
    463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    463c:	2b00      	cmp	r3, #0
    463e:	d004      	beq.n	464a <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    4640:	68fb      	ldr	r3, [r7, #12]
    4642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4644:	6839      	ldr	r1, [r7, #0]
    4646:	68f8      	ldr	r0, [r7, #12]
    4648:	4798      	blx	r3
	}
}
    464a:	bf00      	nop
    464c:	3710      	adds	r7, #16
    464e:	46bd      	mov	sp, r7
    4650:	bd80      	pop	{r7, pc}
    4652:	bf00      	nop
    4654:	00009271 	.word	0x00009271
    4658:	000092d5 	.word	0x000092d5
    465c:	00009345 	.word	0x00009345

00004660 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    4660:	b580      	push	{r7, lr}
    4662:	b084      	sub	sp, #16
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
    4668:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    466a:	2300      	movs	r3, #0
    466c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    466e:	687b      	ldr	r3, [r7, #4]
    4670:	2b00      	cmp	r3, #0
    4672:	d004      	beq.n	467e <spi_m_async_init+0x1e>
    4674:	683b      	ldr	r3, [r7, #0]
    4676:	2b00      	cmp	r3, #0
    4678:	d001      	beq.n	467e <spi_m_async_init+0x1e>
    467a:	2301      	movs	r3, #1
    467c:	e000      	b.n	4680 <spi_m_async_init+0x20>
    467e:	2300      	movs	r3, #0
    4680:	f003 0301 	and.w	r3, r3, #1
    4684:	b2db      	uxtb	r3, r3
    4686:	22a5      	movs	r2, #165	; 0xa5
    4688:	491c      	ldr	r1, [pc, #112]	; (46fc <spi_m_async_init+0x9c>)
    468a:	4618      	mov	r0, r3
    468c:	4b1c      	ldr	r3, [pc, #112]	; (4700 <spi_m_async_init+0xa0>)
    468e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4690:	687b      	ldr	r3, [r7, #4]
    4692:	683a      	ldr	r2, [r7, #0]
    4694:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	3304      	adds	r3, #4
    469a:	6839      	ldr	r1, [r7, #0]
    469c:	4618      	mov	r0, r3
    469e:	4b19      	ldr	r3, [pc, #100]	; (4704 <spi_m_async_init+0xa4>)
    46a0:	4798      	blx	r3
    46a2:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    46a4:	68fb      	ldr	r3, [r7, #12]
    46a6:	2b00      	cmp	r3, #0
    46a8:	db23      	blt.n	46f2 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	3304      	adds	r3, #4
    46ae:	4a16      	ldr	r2, [pc, #88]	; (4708 <spi_m_async_init+0xa8>)
    46b0:	2100      	movs	r1, #0
    46b2:	4618      	mov	r0, r3
    46b4:	4b15      	ldr	r3, [pc, #84]	; (470c <spi_m_async_init+0xac>)
    46b6:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	3304      	adds	r3, #4
    46bc:	4a14      	ldr	r2, [pc, #80]	; (4710 <spi_m_async_init+0xb0>)
    46be:	2101      	movs	r1, #1
    46c0:	4618      	mov	r0, r3
    46c2:	4b12      	ldr	r3, [pc, #72]	; (470c <spi_m_async_init+0xac>)
    46c4:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    46c6:	687b      	ldr	r3, [r7, #4]
    46c8:	3304      	adds	r3, #4
    46ca:	4a12      	ldr	r2, [pc, #72]	; (4714 <spi_m_async_init+0xb4>)
    46cc:	2102      	movs	r1, #2
    46ce:	4618      	mov	r0, r3
    46d0:	4b0e      	ldr	r3, [pc, #56]	; (470c <spi_m_async_init+0xac>)
    46d2:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    46d4:	687b      	ldr	r3, [r7, #4]
    46d6:	3304      	adds	r3, #4
    46d8:	4a0f      	ldr	r2, [pc, #60]	; (4718 <spi_m_async_init+0xb8>)
    46da:	2103      	movs	r1, #3
    46dc:	4618      	mov	r0, r3
    46de:	4b0b      	ldr	r3, [pc, #44]	; (470c <spi_m_async_init+0xac>)
    46e0:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	4a0d      	ldr	r2, [pc, #52]	; (471c <spi_m_async_init+0xbc>)
    46e6:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	4a0d      	ldr	r2, [pc, #52]	; (4720 <spi_m_async_init+0xc0>)
    46ec:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    46ee:	2300      	movs	r3, #0
    46f0:	e000      	b.n	46f4 <spi_m_async_init+0x94>
		return rc;
    46f2:	68fb      	ldr	r3, [r7, #12]
}
    46f4:	4618      	mov	r0, r3
    46f6:	3710      	adds	r7, #16
    46f8:	46bd      	mov	sp, r7
    46fa:	bd80      	pop	{r7, pc}
    46fc:	00011a48 	.word	0x00011a48
    4700:	0000579d 	.word	0x0000579d
    4704:	00008f71 	.word	0x00008f71
    4708:	00004449 	.word	0x00004449
    470c:	00009455 	.word	0x00009455
    4710:	000044c9 	.word	0x000044c9
    4714:	000045c1 	.word	0x000045c1
    4718:	00004609 	.word	0x00004609
    471c:	00004725 	.word	0x00004725
    4720:	000047a5 	.word	0x000047a5

00004724 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    4724:	b580      	push	{r7, lr}
    4726:	b086      	sub	sp, #24
    4728:	af00      	add	r7, sp, #0
    472a:	60f8      	str	r0, [r7, #12]
    472c:	60b9      	str	r1, [r7, #8]
    472e:	4613      	mov	r3, r2
    4730:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4732:	68fb      	ldr	r3, [r7, #12]
    4734:	2b00      	cmp	r3, #0
    4736:	bf14      	ite	ne
    4738:	2301      	movne	r3, #1
    473a:	2300      	moveq	r3, #0
    473c:	b2db      	uxtb	r3, r3
    473e:	f240 1205 	movw	r2, #261	; 0x105
    4742:	4914      	ldr	r1, [pc, #80]	; (4794 <_spi_m_async_io_read+0x70>)
    4744:	4618      	mov	r0, r3
    4746:	4b14      	ldr	r3, [pc, #80]	; (4798 <_spi_m_async_io_read+0x74>)
    4748:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    474a:	68fb      	ldr	r3, [r7, #12]
    474c:	3b24      	subs	r3, #36	; 0x24
    474e:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    4750:	697b      	ldr	r3, [r7, #20]
    4752:	68ba      	ldr	r2, [r7, #8]
    4754:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    4756:	697b      	ldr	r3, [r7, #20]
    4758:	2200      	movs	r2, #0
    475a:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    475c:	88fa      	ldrh	r2, [r7, #6]
    475e:	697b      	ldr	r3, [r7, #20]
    4760:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    4762:	697b      	ldr	r3, [r7, #20]
    4764:	2200      	movs	r2, #0
    4766:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4768:	697b      	ldr	r3, [r7, #20]
    476a:	2210      	movs	r2, #16
    476c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4770:	697b      	ldr	r3, [r7, #20]
    4772:	3304      	adds	r3, #4
    4774:	2101      	movs	r1, #1
    4776:	4618      	mov	r0, r3
    4778:	4b08      	ldr	r3, [pc, #32]	; (479c <_spi_m_async_io_read+0x78>)
    477a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    477c:	697b      	ldr	r3, [r7, #20]
    477e:	3304      	adds	r3, #4
    4780:	f240 11ff 	movw	r1, #511	; 0x1ff
    4784:	4618      	mov	r0, r3
    4786:	4b06      	ldr	r3, [pc, #24]	; (47a0 <_spi_m_async_io_read+0x7c>)
    4788:	4798      	blx	r3

	return ERR_NONE;
    478a:	2300      	movs	r3, #0
}
    478c:	4618      	mov	r0, r3
    478e:	3718      	adds	r7, #24
    4790:	46bd      	mov	sp, r7
    4792:	bd80      	pop	{r7, pc}
    4794:	00011a48 	.word	0x00011a48
    4798:	0000579d 	.word	0x0000579d
    479c:	000092d5 	.word	0x000092d5
    47a0:	000093ad 	.word	0x000093ad

000047a4 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b086      	sub	sp, #24
    47a8:	af00      	add	r7, sp, #0
    47aa:	60f8      	str	r0, [r7, #12]
    47ac:	60b9      	str	r1, [r7, #8]
    47ae:	4613      	mov	r3, r2
    47b0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    47b2:	68fb      	ldr	r3, [r7, #12]
    47b4:	2b00      	cmp	r3, #0
    47b6:	bf14      	ite	ne
    47b8:	2301      	movne	r3, #1
    47ba:	2300      	moveq	r3, #0
    47bc:	b2db      	uxtb	r3, r3
    47be:	f240 1227 	movw	r2, #295	; 0x127
    47c2:	4911      	ldr	r1, [pc, #68]	; (4808 <_spi_m_async_io_write+0x64>)
    47c4:	4618      	mov	r0, r3
    47c6:	4b11      	ldr	r3, [pc, #68]	; (480c <_spi_m_async_io_write+0x68>)
    47c8:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    47ca:	68fb      	ldr	r3, [r7, #12]
    47cc:	3b24      	subs	r3, #36	; 0x24
    47ce:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    47d0:	697b      	ldr	r3, [r7, #20]
    47d2:	2200      	movs	r2, #0
    47d4:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    47d6:	697b      	ldr	r3, [r7, #20]
    47d8:	68ba      	ldr	r2, [r7, #8]
    47da:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    47dc:	88fa      	ldrh	r2, [r7, #6]
    47de:	697b      	ldr	r3, [r7, #20]
    47e0:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    47e2:	697b      	ldr	r3, [r7, #20]
    47e4:	2200      	movs	r2, #0
    47e6:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    47e8:	697b      	ldr	r3, [r7, #20]
    47ea:	2210      	movs	r2, #16
    47ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    47f0:	697b      	ldr	r3, [r7, #20]
    47f2:	3304      	adds	r3, #4
    47f4:	2101      	movs	r1, #1
    47f6:	4618      	mov	r0, r3
    47f8:	4b05      	ldr	r3, [pc, #20]	; (4810 <_spi_m_async_io_write+0x6c>)
    47fa:	4798      	blx	r3

	return ERR_NONE;
    47fc:	2300      	movs	r3, #0
}
    47fe:	4618      	mov	r0, r3
    4800:	3718      	adds	r7, #24
    4802:	46bd      	mov	sp, r7
    4804:	bd80      	pop	{r7, pc}
    4806:	bf00      	nop
    4808:	00011a48 	.word	0x00011a48
    480c:	0000579d 	.word	0x0000579d
    4810:	00009271 	.word	0x00009271

00004814 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    4814:	b580      	push	{r7, lr}
    4816:	b084      	sub	sp, #16
    4818:	af00      	add	r7, sp, #0
    481a:	6078      	str	r0, [r7, #4]
    481c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    481e:	2300      	movs	r3, #0
    4820:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    4822:	687b      	ldr	r3, [r7, #4]
    4824:	2b00      	cmp	r3, #0
    4826:	d004      	beq.n	4832 <spi_m_sync_init+0x1e>
    4828:	683b      	ldr	r3, [r7, #0]
    482a:	2b00      	cmp	r3, #0
    482c:	d001      	beq.n	4832 <spi_m_sync_init+0x1e>
    482e:	2301      	movs	r3, #1
    4830:	e000      	b.n	4834 <spi_m_sync_init+0x20>
    4832:	2300      	movs	r3, #0
    4834:	f003 0301 	and.w	r3, r3, #1
    4838:	b2db      	uxtb	r3, r3
    483a:	2240      	movs	r2, #64	; 0x40
    483c:	4910      	ldr	r1, [pc, #64]	; (4880 <spi_m_sync_init+0x6c>)
    483e:	4618      	mov	r0, r3
    4840:	4b10      	ldr	r3, [pc, #64]	; (4884 <spi_m_sync_init+0x70>)
    4842:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	683a      	ldr	r2, [r7, #0]
    4848:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	3304      	adds	r3, #4
    484e:	6839      	ldr	r1, [r7, #0]
    4850:	4618      	mov	r0, r3
    4852:	4b0d      	ldr	r3, [pc, #52]	; (4888 <spi_m_sync_init+0x74>)
    4854:	4798      	blx	r3
    4856:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    4858:	68fb      	ldr	r3, [r7, #12]
    485a:	2b00      	cmp	r3, #0
    485c:	da01      	bge.n	4862 <spi_m_sync_init+0x4e>
		return rc;
    485e:	68fb      	ldr	r3, [r7, #12]
    4860:	e00a      	b.n	4878 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4868:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	4a07      	ldr	r2, [pc, #28]	; (488c <spi_m_sync_init+0x78>)
    486e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    4870:	687b      	ldr	r3, [r7, #4]
    4872:	4a07      	ldr	r2, [pc, #28]	; (4890 <spi_m_sync_init+0x7c>)
    4874:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4876:	2300      	movs	r3, #0
}
    4878:	4618      	mov	r0, r3
    487a:	3710      	adds	r7, #16
    487c:	46bd      	mov	sp, r7
    487e:	bd80      	pop	{r7, pc}
    4880:	00011a68 	.word	0x00011a68
    4884:	0000579d 	.word	0x0000579d
    4888:	00008e65 	.word	0x00008e65
    488c:	00004895 	.word	0x00004895
    4890:	000048ed 	.word	0x000048ed

00004894 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    4894:	b580      	push	{r7, lr}
    4896:	b088      	sub	sp, #32
    4898:	af00      	add	r7, sp, #0
    489a:	60f8      	str	r0, [r7, #12]
    489c:	60b9      	str	r1, [r7, #8]
    489e:	4613      	mov	r3, r2
    48a0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    48a2:	68fb      	ldr	r3, [r7, #12]
    48a4:	2b00      	cmp	r3, #0
    48a6:	bf14      	ite	ne
    48a8:	2301      	movne	r3, #1
    48aa:	2300      	moveq	r3, #0
    48ac:	b2db      	uxtb	r3, r3
    48ae:	2287      	movs	r2, #135	; 0x87
    48b0:	490b      	ldr	r1, [pc, #44]	; (48e0 <_spi_m_sync_io_read+0x4c>)
    48b2:	4618      	mov	r0, r3
    48b4:	4b0b      	ldr	r3, [pc, #44]	; (48e4 <_spi_m_sync_io_read+0x50>)
    48b6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    48b8:	68fb      	ldr	r3, [r7, #12]
    48ba:	3b0c      	subs	r3, #12
    48bc:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    48be:	68bb      	ldr	r3, [r7, #8]
    48c0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    48c2:	2300      	movs	r3, #0
    48c4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    48c6:	88fb      	ldrh	r3, [r7, #6]
    48c8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    48ca:	f107 0310 	add.w	r3, r7, #16
    48ce:	4619      	mov	r1, r3
    48d0:	69f8      	ldr	r0, [r7, #28]
    48d2:	4b05      	ldr	r3, [pc, #20]	; (48e8 <_spi_m_sync_io_read+0x54>)
    48d4:	4798      	blx	r3
    48d6:	4603      	mov	r3, r0
}
    48d8:	4618      	mov	r0, r3
    48da:	3720      	adds	r7, #32
    48dc:	46bd      	mov	sp, r7
    48de:	bd80      	pop	{r7, pc}
    48e0:	00011a68 	.word	0x00011a68
    48e4:	0000579d 	.word	0x0000579d
    48e8:	00004945 	.word	0x00004945

000048ec <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b088      	sub	sp, #32
    48f0:	af00      	add	r7, sp, #0
    48f2:	60f8      	str	r0, [r7, #12]
    48f4:	60b9      	str	r1, [r7, #8]
    48f6:	4613      	mov	r3, r2
    48f8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	2b00      	cmp	r3, #0
    48fe:	bf14      	ite	ne
    4900:	2301      	movne	r3, #1
    4902:	2300      	moveq	r3, #0
    4904:	b2db      	uxtb	r3, r3
    4906:	22a3      	movs	r2, #163	; 0xa3
    4908:	490b      	ldr	r1, [pc, #44]	; (4938 <_spi_m_sync_io_write+0x4c>)
    490a:	4618      	mov	r0, r3
    490c:	4b0b      	ldr	r3, [pc, #44]	; (493c <_spi_m_sync_io_write+0x50>)
    490e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    4910:	68fb      	ldr	r3, [r7, #12]
    4912:	3b0c      	subs	r3, #12
    4914:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    4916:	2300      	movs	r3, #0
    4918:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    491a:	68bb      	ldr	r3, [r7, #8]
    491c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    491e:	88fb      	ldrh	r3, [r7, #6]
    4920:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    4922:	f107 0310 	add.w	r3, r7, #16
    4926:	4619      	mov	r1, r3
    4928:	69f8      	ldr	r0, [r7, #28]
    492a:	4b05      	ldr	r3, [pc, #20]	; (4940 <_spi_m_sync_io_write+0x54>)
    492c:	4798      	blx	r3
    492e:	4603      	mov	r3, r0
}
    4930:	4618      	mov	r0, r3
    4932:	3720      	adds	r7, #32
    4934:	46bd      	mov	sp, r7
    4936:	bd80      	pop	{r7, pc}
    4938:	00011a68 	.word	0x00011a68
    493c:	0000579d 	.word	0x0000579d
    4940:	00004945 	.word	0x00004945

00004944 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    4944:	b580      	push	{r7, lr}
    4946:	b086      	sub	sp, #24
    4948:	af00      	add	r7, sp, #0
    494a:	6078      	str	r0, [r7, #4]
    494c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    494e:	687b      	ldr	r3, [r7, #4]
    4950:	2b00      	cmp	r3, #0
    4952:	d004      	beq.n	495e <spi_m_sync_transfer+0x1a>
    4954:	683b      	ldr	r3, [r7, #0]
    4956:	2b00      	cmp	r3, #0
    4958:	d001      	beq.n	495e <spi_m_sync_transfer+0x1a>
    495a:	2301      	movs	r3, #1
    495c:	e000      	b.n	4960 <spi_m_sync_transfer+0x1c>
    495e:	2300      	movs	r3, #0
    4960:	f003 0301 	and.w	r3, r3, #1
    4964:	b2db      	uxtb	r3, r3
    4966:	22b3      	movs	r2, #179	; 0xb3
    4968:	490c      	ldr	r1, [pc, #48]	; (499c <spi_m_sync_transfer+0x58>)
    496a:	4618      	mov	r0, r3
    496c:	4b0c      	ldr	r3, [pc, #48]	; (49a0 <spi_m_sync_transfer+0x5c>)
    496e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    4970:	683b      	ldr	r3, [r7, #0]
    4972:	681b      	ldr	r3, [r3, #0]
    4974:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    4976:	683b      	ldr	r3, [r7, #0]
    4978:	685b      	ldr	r3, [r3, #4]
    497a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    497c:	683b      	ldr	r3, [r7, #0]
    497e:	689b      	ldr	r3, [r3, #8]
    4980:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    4982:	687b      	ldr	r3, [r7, #4]
    4984:	3304      	adds	r3, #4
    4986:	f107 020c 	add.w	r2, r7, #12
    498a:	4611      	mov	r1, r2
    498c:	4618      	mov	r0, r3
    498e:	4b05      	ldr	r3, [pc, #20]	; (49a4 <spi_m_sync_transfer+0x60>)
    4990:	4798      	blx	r3
    4992:	4603      	mov	r3, r0
}
    4994:	4618      	mov	r0, r3
    4996:	3718      	adds	r7, #24
    4998:	46bd      	mov	sp, r7
    499a:	bd80      	pop	{r7, pc}
    499c:	00011a68 	.word	0x00011a68
    49a0:	0000579d 	.word	0x0000579d
    49a4:	00009155 	.word	0x00009155

000049a8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    49a8:	b480      	push	{r7}
    49aa:	b083      	sub	sp, #12
    49ac:	af00      	add	r7, sp, #0
    49ae:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	681b      	ldr	r3, [r3, #0]
}
    49b4:	4618      	mov	r0, r3
    49b6:	370c      	adds	r7, #12
    49b8:	46bd      	mov	sp, r7
    49ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    49be:	4770      	bx	lr

000049c0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    49c0:	b480      	push	{r7}
    49c2:	b083      	sub	sp, #12
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	2b00      	cmp	r3, #0
    49cc:	d002      	beq.n	49d4 <list_get_next_element+0x14>
    49ce:	687b      	ldr	r3, [r7, #4]
    49d0:	681b      	ldr	r3, [r3, #0]
    49d2:	e000      	b.n	49d6 <list_get_next_element+0x16>
    49d4:	2300      	movs	r3, #0
}
    49d6:	4618      	mov	r0, r3
    49d8:	370c      	adds	r7, #12
    49da:	46bd      	mov	sp, r7
    49dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    49e0:	4770      	bx	lr
	...

000049e4 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    49e4:	b580      	push	{r7, lr}
    49e6:	b084      	sub	sp, #16
    49e8:	af00      	add	r7, sp, #0
    49ea:	60f8      	str	r0, [r7, #12]
    49ec:	60b9      	str	r1, [r7, #8]
    49ee:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	2b00      	cmp	r3, #0
    49f4:	d004      	beq.n	4a00 <timer_init+0x1c>
    49f6:	68bb      	ldr	r3, [r7, #8]
    49f8:	2b00      	cmp	r3, #0
    49fa:	d001      	beq.n	4a00 <timer_init+0x1c>
    49fc:	2301      	movs	r3, #1
    49fe:	e000      	b.n	4a02 <timer_init+0x1e>
    4a00:	2300      	movs	r3, #0
    4a02:	f003 0301 	and.w	r3, r3, #1
    4a06:	b2db      	uxtb	r3, r3
    4a08:	223b      	movs	r2, #59	; 0x3b
    4a0a:	490a      	ldr	r1, [pc, #40]	; (4a34 <timer_init+0x50>)
    4a0c:	4618      	mov	r0, r3
    4a0e:	4b0a      	ldr	r3, [pc, #40]	; (4a38 <timer_init+0x54>)
    4a10:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    4a12:	68fb      	ldr	r3, [r7, #12]
    4a14:	68b9      	ldr	r1, [r7, #8]
    4a16:	4618      	mov	r0, r3
    4a18:	4b08      	ldr	r3, [pc, #32]	; (4a3c <timer_init+0x58>)
    4a1a:	4798      	blx	r3
	descr->time                           = 0;
    4a1c:	68fb      	ldr	r3, [r7, #12]
    4a1e:	2200      	movs	r2, #0
    4a20:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    4a22:	68fb      	ldr	r3, [r7, #12]
    4a24:	4a06      	ldr	r2, [pc, #24]	; (4a40 <timer_init+0x5c>)
    4a26:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4a28:	2300      	movs	r3, #0
}
    4a2a:	4618      	mov	r0, r3
    4a2c:	3710      	adds	r7, #16
    4a2e:	46bd      	mov	sp, r7
    4a30:	bd80      	pop	{r7, pc}
    4a32:	bf00      	nop
    4a34:	00011a84 	.word	0x00011a84
    4a38:	0000579d 	.word	0x0000579d
    4a3c:	0000984d 	.word	0x0000984d
    4a40:	00004d8d 	.word	0x00004d8d

00004a44 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    4a44:	b580      	push	{r7, lr}
    4a46:	b082      	sub	sp, #8
    4a48:	af00      	add	r7, sp, #0
    4a4a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	2b00      	cmp	r3, #0
    4a50:	bf14      	ite	ne
    4a52:	2301      	movne	r3, #1
    4a54:	2300      	moveq	r3, #0
    4a56:	b2db      	uxtb	r3, r3
    4a58:	2253      	movs	r2, #83	; 0x53
    4a5a:	490b      	ldr	r1, [pc, #44]	; (4a88 <timer_start+0x44>)
    4a5c:	4618      	mov	r0, r3
    4a5e:	4b0b      	ldr	r3, [pc, #44]	; (4a8c <timer_start+0x48>)
    4a60:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	4618      	mov	r0, r3
    4a66:	4b0a      	ldr	r3, [pc, #40]	; (4a90 <timer_start+0x4c>)
    4a68:	4798      	blx	r3
    4a6a:	4603      	mov	r3, r0
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	d002      	beq.n	4a76 <timer_start+0x32>
		return ERR_DENIED;
    4a70:	f06f 0310 	mvn.w	r3, #16
    4a74:	e004      	b.n	4a80 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	4618      	mov	r0, r3
    4a7a:	4b06      	ldr	r3, [pc, #24]	; (4a94 <timer_start+0x50>)
    4a7c:	4798      	blx	r3

	return ERR_NONE;
    4a7e:	2300      	movs	r3, #0
}
    4a80:	4618      	mov	r0, r3
    4a82:	3708      	adds	r7, #8
    4a84:	46bd      	mov	sp, r7
    4a86:	bd80      	pop	{r7, pc}
    4a88:	00011a84 	.word	0x00011a84
    4a8c:	0000579d 	.word	0x0000579d
    4a90:	00009d79 	.word	0x00009d79
    4a94:	00009d19 	.word	0x00009d19

00004a98 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	b082      	sub	sp, #8
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4aa0:	687b      	ldr	r3, [r7, #4]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	bf14      	ite	ne
    4aa6:	2301      	movne	r3, #1
    4aa8:	2300      	moveq	r3, #0
    4aaa:	b2db      	uxtb	r3, r3
    4aac:	2261      	movs	r2, #97	; 0x61
    4aae:	490d      	ldr	r1, [pc, #52]	; (4ae4 <timer_stop+0x4c>)
    4ab0:	4618      	mov	r0, r3
    4ab2:	4b0d      	ldr	r3, [pc, #52]	; (4ae8 <timer_stop+0x50>)
    4ab4:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	4618      	mov	r0, r3
    4aba:	4b0c      	ldr	r3, [pc, #48]	; (4aec <timer_stop+0x54>)
    4abc:	4798      	blx	r3
    4abe:	4603      	mov	r3, r0
    4ac0:	f083 0301 	eor.w	r3, r3, #1
    4ac4:	b2db      	uxtb	r3, r3
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d002      	beq.n	4ad0 <timer_stop+0x38>
		return ERR_DENIED;
    4aca:	f06f 0310 	mvn.w	r3, #16
    4ace:	e004      	b.n	4ada <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    4ad0:	687b      	ldr	r3, [r7, #4]
    4ad2:	4618      	mov	r0, r3
    4ad4:	4b06      	ldr	r3, [pc, #24]	; (4af0 <timer_stop+0x58>)
    4ad6:	4798      	blx	r3

	return ERR_NONE;
    4ad8:	2300      	movs	r3, #0
}
    4ada:	4618      	mov	r0, r3
    4adc:	3708      	adds	r7, #8
    4ade:	46bd      	mov	sp, r7
    4ae0:	bd80      	pop	{r7, pc}
    4ae2:	bf00      	nop
    4ae4:	00011a84 	.word	0x00011a84
    4ae8:	0000579d 	.word	0x0000579d
    4aec:	00009d79 	.word	0x00009d79
    4af0:	00009d59 	.word	0x00009d59

00004af4 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b084      	sub	sp, #16
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
    4afc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    4afe:	687b      	ldr	r3, [r7, #4]
    4b00:	2b00      	cmp	r3, #0
    4b02:	d004      	beq.n	4b0e <timer_add_task+0x1a>
    4b04:	683b      	ldr	r3, [r7, #0]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d001      	beq.n	4b0e <timer_add_task+0x1a>
    4b0a:	2301      	movs	r3, #1
    4b0c:	e000      	b.n	4b10 <timer_add_task+0x1c>
    4b0e:	2300      	movs	r3, #0
    4b10:	f003 0301 	and.w	r3, r3, #1
    4b14:	b2db      	uxtb	r3, r3
    4b16:	227a      	movs	r2, #122	; 0x7a
    4b18:	492d      	ldr	r1, [pc, #180]	; (4bd0 <timer_add_task+0xdc>)
    4b1a:	4618      	mov	r0, r3
    4b1c:	4b2d      	ldr	r3, [pc, #180]	; (4bd4 <timer_add_task+0xe0>)
    4b1e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	7e1b      	ldrb	r3, [r3, #24]
    4b24:	b2db      	uxtb	r3, r3
    4b26:	f043 0301 	orr.w	r3, r3, #1
    4b2a:	b2da      	uxtb	r2, r3
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    4b30:	687b      	ldr	r3, [r7, #4]
    4b32:	3314      	adds	r3, #20
    4b34:	6839      	ldr	r1, [r7, #0]
    4b36:	4618      	mov	r0, r3
    4b38:	4b27      	ldr	r3, [pc, #156]	; (4bd8 <timer_add_task+0xe4>)
    4b3a:	4798      	blx	r3
    4b3c:	4603      	mov	r3, r0
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d00f      	beq.n	4b62 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	7e1b      	ldrb	r3, [r3, #24]
    4b46:	b2db      	uxtb	r3, r3
    4b48:	f023 0301 	bic.w	r3, r3, #1
    4b4c:	b2da      	uxtb	r2, r3
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    4b52:	227f      	movs	r2, #127	; 0x7f
    4b54:	491e      	ldr	r1, [pc, #120]	; (4bd0 <timer_add_task+0xdc>)
    4b56:	2000      	movs	r0, #0
    4b58:	4b1e      	ldr	r3, [pc, #120]	; (4bd4 <timer_add_task+0xe0>)
    4b5a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4b5c:	f06f 0311 	mvn.w	r3, #17
    4b60:	e032      	b.n	4bc8 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	691a      	ldr	r2, [r3, #16]
    4b66:	683b      	ldr	r3, [r7, #0]
    4b68:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	f103 0014 	add.w	r0, r3, #20
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	691b      	ldr	r3, [r3, #16]
    4b74:	461a      	mov	r2, r3
    4b76:	6839      	ldr	r1, [r7, #0]
    4b78:	4b18      	ldr	r3, [pc, #96]	; (4bdc <timer_add_task+0xe8>)
    4b7a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	7e1b      	ldrb	r3, [r3, #24]
    4b80:	b2db      	uxtb	r3, r3
    4b82:	f023 0301 	bic.w	r3, r3, #1
    4b86:	b2da      	uxtb	r2, r3
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4b8c:	687b      	ldr	r3, [r7, #4]
    4b8e:	7e1b      	ldrb	r3, [r3, #24]
    4b90:	b2db      	uxtb	r3, r3
    4b92:	f003 0302 	and.w	r3, r3, #2
    4b96:	2b00      	cmp	r3, #0
    4b98:	d015      	beq.n	4bc6 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    4b9a:	f107 030c 	add.w	r3, r7, #12
    4b9e:	4618      	mov	r0, r3
    4ba0:	4b0f      	ldr	r3, [pc, #60]	; (4be0 <timer_add_task+0xec>)
    4ba2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	7e1b      	ldrb	r3, [r3, #24]
    4ba8:	b2db      	uxtb	r3, r3
    4baa:	f023 0302 	bic.w	r3, r3, #2
    4bae:	b2da      	uxtb	r2, r3
    4bb0:	687b      	ldr	r3, [r7, #4]
    4bb2:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	4618      	mov	r0, r3
    4bb8:	4b0a      	ldr	r3, [pc, #40]	; (4be4 <timer_add_task+0xf0>)
    4bba:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4bbc:	f107 030c 	add.w	r3, r7, #12
    4bc0:	4618      	mov	r0, r3
    4bc2:	4b09      	ldr	r3, [pc, #36]	; (4be8 <timer_add_task+0xf4>)
    4bc4:	4798      	blx	r3
	}

	return ERR_NONE;
    4bc6:	2300      	movs	r3, #0
}
    4bc8:	4618      	mov	r0, r3
    4bca:	3710      	adds	r7, #16
    4bcc:	46bd      	mov	sp, r7
    4bce:	bd80      	pop	{r7, pc}
    4bd0:	00011a84 	.word	0x00011a84
    4bd4:	0000579d 	.word	0x0000579d
    4bd8:	000057c5 	.word	0x000057c5
    4bdc:	00004cdd 	.word	0x00004cdd
    4be0:	00003ac1 	.word	0x00003ac1
    4be4:	00009dd9 	.word	0x00009dd9
    4be8:	00003ae7 	.word	0x00003ae7

00004bec <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
    4bf4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    4bf6:	687b      	ldr	r3, [r7, #4]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d004      	beq.n	4c06 <timer_remove_task+0x1a>
    4bfc:	683b      	ldr	r3, [r7, #0]
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d001      	beq.n	4c06 <timer_remove_task+0x1a>
    4c02:	2301      	movs	r3, #1
    4c04:	e000      	b.n	4c08 <timer_remove_task+0x1c>
    4c06:	2300      	movs	r3, #0
    4c08:	f003 0301 	and.w	r3, r3, #1
    4c0c:	b2db      	uxtb	r3, r3
    4c0e:	2295      	movs	r2, #149	; 0x95
    4c10:	492b      	ldr	r1, [pc, #172]	; (4cc0 <timer_remove_task+0xd4>)
    4c12:	4618      	mov	r0, r3
    4c14:	4b2b      	ldr	r3, [pc, #172]	; (4cc4 <timer_remove_task+0xd8>)
    4c16:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4c18:	687b      	ldr	r3, [r7, #4]
    4c1a:	7e1b      	ldrb	r3, [r3, #24]
    4c1c:	b2db      	uxtb	r3, r3
    4c1e:	f043 0301 	orr.w	r3, r3, #1
    4c22:	b2da      	uxtb	r2, r3
    4c24:	687b      	ldr	r3, [r7, #4]
    4c26:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	3314      	adds	r3, #20
    4c2c:	6839      	ldr	r1, [r7, #0]
    4c2e:	4618      	mov	r0, r3
    4c30:	4b25      	ldr	r3, [pc, #148]	; (4cc8 <timer_remove_task+0xdc>)
    4c32:	4798      	blx	r3
    4c34:	4603      	mov	r3, r0
    4c36:	f083 0301 	eor.w	r3, r3, #1
    4c3a:	b2db      	uxtb	r3, r3
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d00f      	beq.n	4c60 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4c40:	687b      	ldr	r3, [r7, #4]
    4c42:	7e1b      	ldrb	r3, [r3, #24]
    4c44:	b2db      	uxtb	r3, r3
    4c46:	f023 0301 	bic.w	r3, r3, #1
    4c4a:	b2da      	uxtb	r2, r3
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    4c50:	229a      	movs	r2, #154	; 0x9a
    4c52:	491b      	ldr	r1, [pc, #108]	; (4cc0 <timer_remove_task+0xd4>)
    4c54:	2000      	movs	r0, #0
    4c56:	4b1b      	ldr	r3, [pc, #108]	; (4cc4 <timer_remove_task+0xd8>)
    4c58:	4798      	blx	r3
		return ERR_NOT_FOUND;
    4c5a:	f06f 0309 	mvn.w	r3, #9
    4c5e:	e02b      	b.n	4cb8 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	3314      	adds	r3, #20
    4c64:	6839      	ldr	r1, [r7, #0]
    4c66:	4618      	mov	r0, r3
    4c68:	4b18      	ldr	r3, [pc, #96]	; (4ccc <timer_remove_task+0xe0>)
    4c6a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4c6c:	687b      	ldr	r3, [r7, #4]
    4c6e:	7e1b      	ldrb	r3, [r3, #24]
    4c70:	b2db      	uxtb	r3, r3
    4c72:	f023 0301 	bic.w	r3, r3, #1
    4c76:	b2da      	uxtb	r2, r3
    4c78:	687b      	ldr	r3, [r7, #4]
    4c7a:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	7e1b      	ldrb	r3, [r3, #24]
    4c80:	b2db      	uxtb	r3, r3
    4c82:	f003 0302 	and.w	r3, r3, #2
    4c86:	2b00      	cmp	r3, #0
    4c88:	d015      	beq.n	4cb6 <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    4c8a:	f107 030c 	add.w	r3, r7, #12
    4c8e:	4618      	mov	r0, r3
    4c90:	4b0f      	ldr	r3, [pc, #60]	; (4cd0 <timer_remove_task+0xe4>)
    4c92:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	7e1b      	ldrb	r3, [r3, #24]
    4c98:	b2db      	uxtb	r3, r3
    4c9a:	f023 0302 	bic.w	r3, r3, #2
    4c9e:	b2da      	uxtb	r2, r3
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	4618      	mov	r0, r3
    4ca8:	4b0a      	ldr	r3, [pc, #40]	; (4cd4 <timer_remove_task+0xe8>)
    4caa:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4cac:	f107 030c 	add.w	r3, r7, #12
    4cb0:	4618      	mov	r0, r3
    4cb2:	4b09      	ldr	r3, [pc, #36]	; (4cd8 <timer_remove_task+0xec>)
    4cb4:	4798      	blx	r3
	}

	return ERR_NONE;
    4cb6:	2300      	movs	r3, #0
}
    4cb8:	4618      	mov	r0, r3
    4cba:	3710      	adds	r7, #16
    4cbc:	46bd      	mov	sp, r7
    4cbe:	bd80      	pop	{r7, pc}
    4cc0:	00011a84 	.word	0x00011a84
    4cc4:	0000579d 	.word	0x0000579d
    4cc8:	000057c5 	.word	0x000057c5
    4ccc:	00005927 	.word	0x00005927
    4cd0:	00003ac1 	.word	0x00003ac1
    4cd4:	00009dd9 	.word	0x00009dd9
    4cd8:	00003ae7 	.word	0x00003ae7

00004cdc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4cdc:	b580      	push	{r7, lr}
    4cde:	b088      	sub	sp, #32
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	60f8      	str	r0, [r7, #12]
    4ce4:	60b9      	str	r1, [r7, #8]
    4ce6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    4ce8:	2300      	movs	r3, #0
    4cea:	61bb      	str	r3, [r7, #24]
    4cec:	68f8      	ldr	r0, [r7, #12]
    4cee:	4b23      	ldr	r3, [pc, #140]	; (4d7c <timer_add_timer_task+0xa0>)
    4cf0:	4798      	blx	r3
    4cf2:	6138      	str	r0, [r7, #16]

	if (!head) {
    4cf4:	693b      	ldr	r3, [r7, #16]
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d104      	bne.n	4d04 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    4cfa:	68b9      	ldr	r1, [r7, #8]
    4cfc:	68f8      	ldr	r0, [r7, #12]
    4cfe:	4b20      	ldr	r3, [pc, #128]	; (4d80 <timer_add_timer_task+0xa4>)
    4d00:	4798      	blx	r3
		return;
    4d02:	e037      	b.n	4d74 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4d04:	693b      	ldr	r3, [r7, #16]
    4d06:	61fb      	str	r3, [r7, #28]
    4d08:	e022      	b.n	4d50 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    4d0a:	69fb      	ldr	r3, [r7, #28]
    4d0c:	685a      	ldr	r2, [r3, #4]
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	429a      	cmp	r2, r3
    4d12:	d808      	bhi.n	4d26 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    4d14:	69fb      	ldr	r3, [r7, #28]
    4d16:	689a      	ldr	r2, [r3, #8]
    4d18:	69fb      	ldr	r3, [r7, #28]
    4d1a:	6859      	ldr	r1, [r3, #4]
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	1acb      	subs	r3, r1, r3
    4d20:	4413      	add	r3, r2
    4d22:	617b      	str	r3, [r7, #20]
    4d24:	e009      	b.n	4d3a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4d26:	69fb      	ldr	r3, [r7, #28]
    4d28:	689a      	ldr	r2, [r3, #8]
    4d2a:	69fb      	ldr	r3, [r7, #28]
    4d2c:	685b      	ldr	r3, [r3, #4]
    4d2e:	441a      	add	r2, r3
    4d30:	687b      	ldr	r3, [r7, #4]
    4d32:	425b      	negs	r3, r3
    4d34:	4413      	add	r3, r2
    4d36:	3301      	adds	r3, #1
    4d38:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    4d3a:	68bb      	ldr	r3, [r7, #8]
    4d3c:	689a      	ldr	r2, [r3, #8]
    4d3e:	697b      	ldr	r3, [r7, #20]
    4d40:	429a      	cmp	r2, r3
    4d42:	d909      	bls.n	4d58 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    4d44:	69fb      	ldr	r3, [r7, #28]
    4d46:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4d48:	69f8      	ldr	r0, [r7, #28]
    4d4a:	4b0e      	ldr	r3, [pc, #56]	; (4d84 <timer_add_timer_task+0xa8>)
    4d4c:	4798      	blx	r3
    4d4e:	61f8      	str	r0, [r7, #28]
    4d50:	69fb      	ldr	r3, [r7, #28]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d1d9      	bne.n	4d0a <timer_add_timer_task+0x2e>
    4d56:	e000      	b.n	4d5a <timer_add_timer_task+0x7e>
			break;
    4d58:	bf00      	nop
	}

	if (it == head) {
    4d5a:	69fa      	ldr	r2, [r7, #28]
    4d5c:	693b      	ldr	r3, [r7, #16]
    4d5e:	429a      	cmp	r2, r3
    4d60:	d104      	bne.n	4d6c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    4d62:	68b9      	ldr	r1, [r7, #8]
    4d64:	68f8      	ldr	r0, [r7, #12]
    4d66:	4b06      	ldr	r3, [pc, #24]	; (4d80 <timer_add_timer_task+0xa4>)
    4d68:	4798      	blx	r3
    4d6a:	e003      	b.n	4d74 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    4d6c:	68b9      	ldr	r1, [r7, #8]
    4d6e:	69b8      	ldr	r0, [r7, #24]
    4d70:	4b05      	ldr	r3, [pc, #20]	; (4d88 <timer_add_timer_task+0xac>)
    4d72:	4798      	blx	r3
	}
}
    4d74:	3720      	adds	r7, #32
    4d76:	46bd      	mov	sp, r7
    4d78:	bd80      	pop	{r7, pc}
    4d7a:	bf00      	nop
    4d7c:	000049a9 	.word	0x000049a9
    4d80:	000057fd 	.word	0x000057fd
    4d84:	000049c1 	.word	0x000049c1
    4d88:	00005855 	.word	0x00005855

00004d8c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4d8c:	b580      	push	{r7, lr}
    4d8e:	b086      	sub	sp, #24
    4d90:	af00      	add	r7, sp, #0
    4d92:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    4d98:	693b      	ldr	r3, [r7, #16]
    4d9a:	3314      	adds	r3, #20
    4d9c:	4618      	mov	r0, r3
    4d9e:	4b27      	ldr	r3, [pc, #156]	; (4e3c <timer_process_counted+0xb0>)
    4da0:	4798      	blx	r3
    4da2:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    4da4:	693b      	ldr	r3, [r7, #16]
    4da6:	691b      	ldr	r3, [r3, #16]
    4da8:	1c5a      	adds	r2, r3, #1
    4daa:	693b      	ldr	r3, [r7, #16]
    4dac:	611a      	str	r2, [r3, #16]
    4dae:	693b      	ldr	r3, [r7, #16]
    4db0:	691b      	ldr	r3, [r3, #16]
    4db2:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4db4:	693b      	ldr	r3, [r7, #16]
    4db6:	7e1b      	ldrb	r3, [r3, #24]
    4db8:	b2db      	uxtb	r3, r3
    4dba:	f003 0301 	and.w	r3, r3, #1
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d106      	bne.n	4dd0 <timer_process_counted+0x44>
    4dc2:	693b      	ldr	r3, [r7, #16]
    4dc4:	7e1b      	ldrb	r3, [r3, #24]
    4dc6:	b2db      	uxtb	r3, r3
    4dc8:	f003 0302 	and.w	r3, r3, #2
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d027      	beq.n	4e20 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4dd0:	693b      	ldr	r3, [r7, #16]
    4dd2:	7e1b      	ldrb	r3, [r3, #24]
    4dd4:	b2db      	uxtb	r3, r3
    4dd6:	f043 0302 	orr.w	r3, r3, #2
    4dda:	b2da      	uxtb	r2, r3
    4ddc:	693b      	ldr	r3, [r7, #16]
    4dde:	761a      	strb	r2, [r3, #24]
		return;
    4de0:	e029      	b.n	4e36 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    4de2:	697b      	ldr	r3, [r7, #20]
    4de4:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    4de6:	693b      	ldr	r3, [r7, #16]
    4de8:	3314      	adds	r3, #20
    4dea:	4618      	mov	r0, r3
    4dec:	4b14      	ldr	r3, [pc, #80]	; (4e40 <timer_process_counted+0xb4>)
    4dee:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4df0:	68bb      	ldr	r3, [r7, #8]
    4df2:	7c1b      	ldrb	r3, [r3, #16]
    4df4:	2b01      	cmp	r3, #1
    4df6:	d109      	bne.n	4e0c <timer_process_counted+0x80>
			tmp->time_label = time;
    4df8:	68bb      	ldr	r3, [r7, #8]
    4dfa:	68fa      	ldr	r2, [r7, #12]
    4dfc:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4dfe:	693b      	ldr	r3, [r7, #16]
    4e00:	3314      	adds	r3, #20
    4e02:	68fa      	ldr	r2, [r7, #12]
    4e04:	68b9      	ldr	r1, [r7, #8]
    4e06:	4618      	mov	r0, r3
    4e08:	4b0e      	ldr	r3, [pc, #56]	; (4e44 <timer_process_counted+0xb8>)
    4e0a:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4e0c:	693b      	ldr	r3, [r7, #16]
    4e0e:	3314      	adds	r3, #20
    4e10:	4618      	mov	r0, r3
    4e12:	4b0a      	ldr	r3, [pc, #40]	; (4e3c <timer_process_counted+0xb0>)
    4e14:	4798      	blx	r3
    4e16:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    4e18:	68bb      	ldr	r3, [r7, #8]
    4e1a:	68db      	ldr	r3, [r3, #12]
    4e1c:	68b8      	ldr	r0, [r7, #8]
    4e1e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4e20:	697b      	ldr	r3, [r7, #20]
    4e22:	2b00      	cmp	r3, #0
    4e24:	d007      	beq.n	4e36 <timer_process_counted+0xaa>
    4e26:	697b      	ldr	r3, [r7, #20]
    4e28:	685b      	ldr	r3, [r3, #4]
    4e2a:	68fa      	ldr	r2, [r7, #12]
    4e2c:	1ad2      	subs	r2, r2, r3
    4e2e:	697b      	ldr	r3, [r7, #20]
    4e30:	689b      	ldr	r3, [r3, #8]
    4e32:	429a      	cmp	r2, r3
    4e34:	d2d5      	bcs.n	4de2 <timer_process_counted+0x56>
	}
}
    4e36:	3718      	adds	r7, #24
    4e38:	46bd      	mov	sp, r7
    4e3a:	bd80      	pop	{r7, pc}
    4e3c:	000049a9 	.word	0x000049a9
    4e40:	000058f5 	.word	0x000058f5
    4e44:	00004cdd 	.word	0x00004cdd

00004e48 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    4e48:	b480      	push	{r7}
    4e4a:	b085      	sub	sp, #20
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	4603      	mov	r3, r0
    4e50:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4e52:	2300      	movs	r3, #0
    4e54:	73fb      	strb	r3, [r7, #15]
    4e56:	e029      	b.n	4eac <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4e5c:	4a19      	ldr	r2, [pc, #100]	; (4ec4 <_usb_d_find_ep+0x7c>)
    4e5e:	015b      	lsls	r3, r3, #5
    4e60:	4413      	add	r3, r2
    4e62:	3301      	adds	r3, #1
    4e64:	781b      	ldrb	r3, [r3, #0]
    4e66:	79fa      	ldrb	r2, [r7, #7]
    4e68:	429a      	cmp	r2, r3
    4e6a:	d102      	bne.n	4e72 <_usb_d_find_ep+0x2a>
			return i;
    4e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4e70:	e022      	b.n	4eb8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4e76:	4a13      	ldr	r2, [pc, #76]	; (4ec4 <_usb_d_find_ep+0x7c>)
    4e78:	015b      	lsls	r3, r3, #5
    4e7a:	4413      	add	r3, r2
    4e7c:	781b      	ldrb	r3, [r3, #0]
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d10e      	bne.n	4ea0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4e82:	79fb      	ldrb	r3, [r7, #7]
    4e84:	f003 030f 	and.w	r3, r3, #15
    4e88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    4e8c:	490d      	ldr	r1, [pc, #52]	; (4ec4 <_usb_d_find_ep+0x7c>)
    4e8e:	0152      	lsls	r2, r2, #5
    4e90:	440a      	add	r2, r1
    4e92:	3201      	adds	r2, #1
    4e94:	7812      	ldrb	r2, [r2, #0]
    4e96:	4293      	cmp	r3, r2
    4e98:	d102      	bne.n	4ea0 <_usb_d_find_ep+0x58>
			return i;
    4e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4e9e:	e00b      	b.n	4eb8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ea4:	b2db      	uxtb	r3, r3
    4ea6:	3301      	adds	r3, #1
    4ea8:	b2db      	uxtb	r3, r3
    4eaa:	73fb      	strb	r3, [r7, #15]
    4eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4eb0:	2b03      	cmp	r3, #3
    4eb2:	ddd1      	ble.n	4e58 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    4eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
    4eb8:	4618      	mov	r0, r3
    4eba:	3714      	adds	r7, #20
    4ebc:	46bd      	mov	sp, r7
    4ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ec2:	4770      	bx	lr
    4ec4:	20001c54 	.word	0x20001c54

00004ec8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    4ec8:	b580      	push	{r7, lr}
    4eca:	b088      	sub	sp, #32
    4ecc:	af00      	add	r7, sp, #0
    4ece:	60ba      	str	r2, [r7, #8]
    4ed0:	607b      	str	r3, [r7, #4]
    4ed2:	4603      	mov	r3, r0
    4ed4:	73fb      	strb	r3, [r7, #15]
    4ed6:	460b      	mov	r3, r1
    4ed8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    4eda:	68bb      	ldr	r3, [r7, #8]
    4edc:	617b      	str	r3, [r7, #20]
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	61bb      	str	r3, [r7, #24]
    4ee2:	7bbb      	ldrb	r3, [r7, #14]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d004      	beq.n	4ef2 <_usb_d_trans+0x2a>
    4ee8:	7bfb      	ldrb	r3, [r7, #15]
    4eea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4eee:	b2db      	uxtb	r3, r3
    4ef0:	e003      	b.n	4efa <_usb_d_trans+0x32>
    4ef2:	7bfb      	ldrb	r3, [r7, #15]
    4ef4:	f003 030f 	and.w	r3, r3, #15
    4ef8:	b2db      	uxtb	r3, r3
    4efa:	773b      	strb	r3, [r7, #28]
    4efc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    4f00:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    4f02:	f107 0314 	add.w	r3, r7, #20
    4f06:	4618      	mov	r0, r3
    4f08:	4b03      	ldr	r3, [pc, #12]	; (4f18 <_usb_d_trans+0x50>)
    4f0a:	4798      	blx	r3
    4f0c:	4603      	mov	r3, r0
}
    4f0e:	4618      	mov	r0, r3
    4f10:	3720      	adds	r7, #32
    4f12:	46bd      	mov	sp, r7
    4f14:	bd80      	pop	{r7, pc}
    4f16:	bf00      	nop
    4f18:	0000c4f5 	.word	0x0000c4f5

00004f1c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    4f1c:	b480      	push	{r7}
    4f1e:	b085      	sub	sp, #20
    4f20:	af00      	add	r7, sp, #0
    4f22:	60f8      	str	r0, [r7, #12]
    4f24:	60b9      	str	r1, [r7, #8]
    4f26:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    4f28:	2300      	movs	r3, #0
}
    4f2a:	4618      	mov	r0, r3
    4f2c:	3714      	adds	r7, #20
    4f2e:	46bd      	mov	sp, r7
    4f30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f34:	4770      	bx	lr
	...

00004f38 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    4f38:	b580      	push	{r7, lr}
    4f3a:	b086      	sub	sp, #24
    4f3c:	af00      	add	r7, sp, #0
    4f3e:	4603      	mov	r3, r0
    4f40:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4f42:	79fb      	ldrb	r3, [r7, #7]
    4f44:	4618      	mov	r0, r3
    4f46:	4b2a      	ldr	r3, [pc, #168]	; (4ff0 <usb_d_cb_trans_setup+0xb8>)
    4f48:	4798      	blx	r3
    4f4a:	4603      	mov	r3, r0
    4f4c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4f52:	015b      	lsls	r3, r3, #5
    4f54:	4a27      	ldr	r2, [pc, #156]	; (4ff4 <usb_d_cb_trans_setup+0xbc>)
    4f56:	4413      	add	r3, r2
    4f58:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    4f5a:	693b      	ldr	r3, [r7, #16]
    4f5c:	330c      	adds	r3, #12
    4f5e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4f60:	79fb      	ldrb	r3, [r7, #7]
    4f62:	68f9      	ldr	r1, [r7, #12]
    4f64:	4618      	mov	r0, r3
    4f66:	4b24      	ldr	r3, [pc, #144]	; (4ff8 <usb_d_cb_trans_setup+0xc0>)
    4f68:	4798      	blx	r3
    4f6a:	4603      	mov	r3, r0
    4f6c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    4f6e:	7afb      	ldrb	r3, [r7, #11]
    4f70:	2b08      	cmp	r3, #8
    4f72:	d00d      	beq.n	4f90 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4f74:	79fb      	ldrb	r3, [r7, #7]
    4f76:	2101      	movs	r1, #1
    4f78:	4618      	mov	r0, r3
    4f7a:	4b20      	ldr	r3, [pc, #128]	; (4ffc <usb_d_cb_trans_setup+0xc4>)
    4f7c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4f7e:	79fb      	ldrb	r3, [r7, #7]
    4f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4f84:	b2db      	uxtb	r3, r3
    4f86:	2101      	movs	r1, #1
    4f88:	4618      	mov	r0, r3
    4f8a:	4b1c      	ldr	r3, [pc, #112]	; (4ffc <usb_d_cb_trans_setup+0xc4>)
    4f8c:	4798      	blx	r3
		return;
    4f8e:	e02b      	b.n	4fe8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4f90:	79fb      	ldrb	r3, [r7, #7]
    4f92:	2100      	movs	r1, #0
    4f94:	4618      	mov	r0, r3
    4f96:	4b19      	ldr	r3, [pc, #100]	; (4ffc <usb_d_cb_trans_setup+0xc4>)
    4f98:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4f9a:	79fb      	ldrb	r3, [r7, #7]
    4f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4fa0:	b2db      	uxtb	r3, r3
    4fa2:	2100      	movs	r1, #0
    4fa4:	4618      	mov	r0, r3
    4fa6:	4b15      	ldr	r3, [pc, #84]	; (4ffc <usb_d_cb_trans_setup+0xc4>)
    4fa8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    4faa:	693b      	ldr	r3, [r7, #16]
    4fac:	2201      	movs	r2, #1
    4fae:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4fb0:	693b      	ldr	r3, [r7, #16]
    4fb2:	695b      	ldr	r3, [r3, #20]
    4fb4:	79fa      	ldrb	r2, [r7, #7]
    4fb6:	68f9      	ldr	r1, [r7, #12]
    4fb8:	4610      	mov	r0, r2
    4fba:	4798      	blx	r3
    4fbc:	4603      	mov	r3, r0
    4fbe:	f083 0301 	eor.w	r3, r3, #1
    4fc2:	b2db      	uxtb	r3, r3
    4fc4:	2b00      	cmp	r3, #0
    4fc6:	d00f      	beq.n	4fe8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4fc8:	693b      	ldr	r3, [r7, #16]
    4fca:	2205      	movs	r2, #5
    4fcc:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4fce:	79fb      	ldrb	r3, [r7, #7]
    4fd0:	2101      	movs	r1, #1
    4fd2:	4618      	mov	r0, r3
    4fd4:	4b09      	ldr	r3, [pc, #36]	; (4ffc <usb_d_cb_trans_setup+0xc4>)
    4fd6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4fd8:	79fb      	ldrb	r3, [r7, #7]
    4fda:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4fde:	b2db      	uxtb	r3, r3
    4fe0:	2101      	movs	r1, #1
    4fe2:	4618      	mov	r0, r3
    4fe4:	4b05      	ldr	r3, [pc, #20]	; (4ffc <usb_d_cb_trans_setup+0xc4>)
    4fe6:	4798      	blx	r3
	}
}
    4fe8:	3718      	adds	r7, #24
    4fea:	46bd      	mov	sp, r7
    4fec:	bd80      	pop	{r7, pc}
    4fee:	bf00      	nop
    4ff0:	00004e49 	.word	0x00004e49
    4ff4:	20001c54 	.word	0x20001c54
    4ff8:	0000c44d 	.word	0x0000c44d
    4ffc:	0000c2c5 	.word	0x0000c2c5

00005000 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5000:	b580      	push	{r7, lr}
    5002:	b084      	sub	sp, #16
    5004:	af00      	add	r7, sp, #0
    5006:	4603      	mov	r3, r0
    5008:	6039      	str	r1, [r7, #0]
    500a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    500c:	79fb      	ldrb	r3, [r7, #7]
    500e:	4618      	mov	r0, r3
    5010:	4b0d      	ldr	r3, [pc, #52]	; (5048 <usb_d_cb_trans_more+0x48>)
    5012:	4798      	blx	r3
    5014:	4603      	mov	r3, r0
    5016:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5018:	f997 300f 	ldrsb.w	r3, [r7, #15]
    501c:	015b      	lsls	r3, r3, #5
    501e:	4a0b      	ldr	r2, [pc, #44]	; (504c <usb_d_cb_trans_more+0x4c>)
    5020:	4413      	add	r3, r2
    5022:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5024:	68bb      	ldr	r3, [r7, #8]
    5026:	789b      	ldrb	r3, [r3, #2]
    5028:	2b03      	cmp	r3, #3
    502a:	d107      	bne.n	503c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    502c:	68bb      	ldr	r3, [r7, #8]
    502e:	699b      	ldr	r3, [r3, #24]
    5030:	79fa      	ldrb	r2, [r7, #7]
    5032:	6839      	ldr	r1, [r7, #0]
    5034:	4610      	mov	r0, r2
    5036:	4798      	blx	r3
    5038:	4603      	mov	r3, r0
    503a:	e000      	b.n	503e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    503c:	2300      	movs	r3, #0
}
    503e:	4618      	mov	r0, r3
    5040:	3710      	adds	r7, #16
    5042:	46bd      	mov	sp, r7
    5044:	bd80      	pop	{r7, pc}
    5046:	bf00      	nop
    5048:	00004e49 	.word	0x00004e49
    504c:	20001c54 	.word	0x20001c54

00005050 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    5050:	b590      	push	{r4, r7, lr}
    5052:	b087      	sub	sp, #28
    5054:	af02      	add	r7, sp, #8
    5056:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	789b      	ldrb	r3, [r3, #2]
    505c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    505e:	687b      	ldr	r3, [r7, #4]
    5060:	7b1b      	ldrb	r3, [r3, #12]
    5062:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5066:	2b00      	cmp	r3, #0
    5068:	bf14      	ite	ne
    506a:	2301      	movne	r3, #1
    506c:	2300      	moveq	r3, #0
    506e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    5070:	7bfb      	ldrb	r3, [r7, #15]
    5072:	2b03      	cmp	r3, #3
    5074:	d13a      	bne.n	50ec <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	69db      	ldr	r3, [r3, #28]
    507a:	687a      	ldr	r2, [r7, #4]
    507c:	7850      	ldrb	r0, [r2, #1]
    507e:	687a      	ldr	r2, [r7, #4]
    5080:	320c      	adds	r2, #12
    5082:	2101      	movs	r1, #1
    5084:	4798      	blx	r3
    5086:	4603      	mov	r3, r0
    5088:	737b      	strb	r3, [r7, #13]
		if (err) {
    508a:	7b7b      	ldrb	r3, [r7, #13]
    508c:	2b00      	cmp	r3, #0
    508e:	d015      	beq.n	50bc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    5090:	687b      	ldr	r3, [r7, #4]
    5092:	2205      	movs	r2, #5
    5094:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	2202      	movs	r2, #2
    509a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    509c:	7bbb      	ldrb	r3, [r7, #14]
    509e:	2b00      	cmp	r3, #0
    50a0:	d002      	beq.n	50a8 <usb_d_ctrl_trans_done+0x58>
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	785b      	ldrb	r3, [r3, #1]
    50a6:	e004      	b.n	50b2 <usb_d_ctrl_trans_done+0x62>
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	785b      	ldrb	r3, [r3, #1]
    50ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    50b0:	b2db      	uxtb	r3, r3
    50b2:	2101      	movs	r1, #1
    50b4:	4618      	mov	r0, r3
    50b6:	4b15      	ldr	r3, [pc, #84]	; (510c <usb_d_ctrl_trans_done+0xbc>)
    50b8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    50ba:	e022      	b.n	5102 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    50bc:	687b      	ldr	r3, [r7, #4]
    50be:	2204      	movs	r2, #4
    50c0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	7858      	ldrb	r0, [r3, #1]
    50c6:	7bbb      	ldrb	r3, [r7, #14]
    50c8:	2b00      	cmp	r3, #0
    50ca:	bf14      	ite	ne
    50cc:	2301      	movne	r3, #1
    50ce:	2300      	moveq	r3, #0
    50d0:	b2db      	uxtb	r3, r3
    50d2:	f083 0301 	eor.w	r3, r3, #1
    50d6:	b2db      	uxtb	r3, r3
    50d8:	f003 0301 	and.w	r3, r3, #1
    50dc:	b2d9      	uxtb	r1, r3
    50de:	2301      	movs	r3, #1
    50e0:	9300      	str	r3, [sp, #0]
    50e2:	2300      	movs	r3, #0
    50e4:	2200      	movs	r2, #0
    50e6:	4c0a      	ldr	r4, [pc, #40]	; (5110 <usb_d_ctrl_trans_done+0xc0>)
    50e8:	47a0      	blx	r4
}
    50ea:	e00a      	b.n	5102 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    50ec:	687b      	ldr	r3, [r7, #4]
    50ee:	69db      	ldr	r3, [r3, #28]
    50f0:	687a      	ldr	r2, [r7, #4]
    50f2:	7850      	ldrb	r0, [r2, #1]
    50f4:	687a      	ldr	r2, [r7, #4]
    50f6:	320c      	adds	r2, #12
    50f8:	2100      	movs	r1, #0
    50fa:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	2202      	movs	r2, #2
    5100:	709a      	strb	r2, [r3, #2]
}
    5102:	bf00      	nop
    5104:	3714      	adds	r7, #20
    5106:	46bd      	mov	sp, r7
    5108:	bd90      	pop	{r4, r7, pc}
    510a:	bf00      	nop
    510c:	0000c2c5 	.word	0x0000c2c5
    5110:	00004ec9 	.word	0x00004ec9

00005114 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5114:	b580      	push	{r7, lr}
    5116:	b086      	sub	sp, #24
    5118:	af00      	add	r7, sp, #0
    511a:	4603      	mov	r3, r0
    511c:	60b9      	str	r1, [r7, #8]
    511e:	607a      	str	r2, [r7, #4]
    5120:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5122:	7bfb      	ldrb	r3, [r7, #15]
    5124:	4618      	mov	r0, r3
    5126:	4b2f      	ldr	r3, [pc, #188]	; (51e4 <_usb_d_cb_trans_done+0xd0>)
    5128:	4798      	blx	r3
    512a:	4603      	mov	r3, r0
    512c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    512e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5132:	015b      	lsls	r3, r3, #5
    5134:	4a2c      	ldr	r2, [pc, #176]	; (51e8 <_usb_d_cb_trans_done+0xd4>)
    5136:	4413      	add	r3, r2
    5138:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    513a:	68bb      	ldr	r3, [r7, #8]
    513c:	2b00      	cmp	r3, #0
    513e:	d10e      	bne.n	515e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5140:	693b      	ldr	r3, [r7, #16]
    5142:	2200      	movs	r2, #0
    5144:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5146:	693b      	ldr	r3, [r7, #16]
    5148:	781b      	ldrb	r3, [r3, #0]
    514a:	2b00      	cmp	r3, #0
    514c:	d103      	bne.n	5156 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    514e:	6938      	ldr	r0, [r7, #16]
    5150:	4b26      	ldr	r3, [pc, #152]	; (51ec <_usb_d_cb_trans_done+0xd8>)
    5152:	4798      	blx	r3
			return;
    5154:	e043      	b.n	51de <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5156:	693b      	ldr	r3, [r7, #16]
    5158:	2201      	movs	r2, #1
    515a:	709a      	strb	r2, [r3, #2]
    515c:	e038      	b.n	51d0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    515e:	68bb      	ldr	r3, [r7, #8]
    5160:	2b01      	cmp	r3, #1
    5162:	d113      	bne.n	518c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5164:	693b      	ldr	r3, [r7, #16]
    5166:	2202      	movs	r2, #2
    5168:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    516a:	693b      	ldr	r3, [r7, #16]
    516c:	781b      	ldrb	r3, [r3, #0]
    516e:	2b00      	cmp	r3, #0
    5170:	d108      	bne.n	5184 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5172:	693b      	ldr	r3, [r7, #16]
    5174:	2202      	movs	r2, #2
    5176:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5178:	7bfb      	ldrb	r3, [r7, #15]
    517a:	2100      	movs	r1, #0
    517c:	4618      	mov	r0, r3
    517e:	4b1c      	ldr	r3, [pc, #112]	; (51f0 <_usb_d_cb_trans_done+0xdc>)
    5180:	4798      	blx	r3
    5182:	e025      	b.n	51d0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5184:	693b      	ldr	r3, [r7, #16]
    5186:	2205      	movs	r2, #5
    5188:	709a      	strb	r2, [r3, #2]
    518a:	e021      	b.n	51d0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    518c:	68bb      	ldr	r3, [r7, #8]
    518e:	2b02      	cmp	r3, #2
    5190:	d10e      	bne.n	51b0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    5192:	693b      	ldr	r3, [r7, #16]
    5194:	2204      	movs	r2, #4
    5196:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5198:	693b      	ldr	r3, [r7, #16]
    519a:	781b      	ldrb	r3, [r3, #0]
    519c:	2b00      	cmp	r3, #0
    519e:	d103      	bne.n	51a8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    51a0:	693b      	ldr	r3, [r7, #16]
    51a2:	2202      	movs	r2, #2
    51a4:	709a      	strb	r2, [r3, #2]
			return;
    51a6:	e01a      	b.n	51de <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    51a8:	693b      	ldr	r3, [r7, #16]
    51aa:	2201      	movs	r2, #1
    51ac:	709a      	strb	r2, [r3, #2]
    51ae:	e00f      	b.n	51d0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    51b0:	68bb      	ldr	r3, [r7, #8]
    51b2:	2b03      	cmp	r3, #3
    51b4:	d106      	bne.n	51c4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    51b6:	693b      	ldr	r3, [r7, #16]
    51b8:	2200      	movs	r2, #0
    51ba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    51bc:	693b      	ldr	r3, [r7, #16]
    51be:	2205      	movs	r2, #5
    51c0:	70da      	strb	r2, [r3, #3]
    51c2:	e005      	b.n	51d0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    51c4:	693b      	ldr	r3, [r7, #16]
    51c6:	2206      	movs	r2, #6
    51c8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    51ca:	693b      	ldr	r3, [r7, #16]
    51cc:	2206      	movs	r2, #6
    51ce:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    51d0:	693b      	ldr	r3, [r7, #16]
    51d2:	69db      	ldr	r3, [r3, #28]
    51d4:	693a      	ldr	r2, [r7, #16]
    51d6:	78d1      	ldrb	r1, [r2, #3]
    51d8:	687a      	ldr	r2, [r7, #4]
    51da:	7bf8      	ldrb	r0, [r7, #15]
    51dc:	4798      	blx	r3
}
    51de:	3718      	adds	r7, #24
    51e0:	46bd      	mov	sp, r7
    51e2:	bd80      	pop	{r7, pc}
    51e4:	00004e49 	.word	0x00004e49
    51e8:	20001c54 	.word	0x20001c54
    51ec:	00005051 	.word	0x00005051
    51f0:	0000c2c5 	.word	0x0000c2c5

000051f4 <usb_d_init>:

int32_t usb_d_init(void)
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b082      	sub	sp, #8
    51f8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    51fa:	4b21      	ldr	r3, [pc, #132]	; (5280 <usb_d_init+0x8c>)
    51fc:	4798      	blx	r3
    51fe:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    5200:	683b      	ldr	r3, [r7, #0]
    5202:	2b00      	cmp	r3, #0
    5204:	da01      	bge.n	520a <usb_d_init+0x16>
		return rc;
    5206:	683b      	ldr	r3, [r7, #0]
    5208:	e036      	b.n	5278 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    520a:	2280      	movs	r2, #128	; 0x80
    520c:	2100      	movs	r1, #0
    520e:	481d      	ldr	r0, [pc, #116]	; (5284 <usb_d_init+0x90>)
    5210:	4b1d      	ldr	r3, [pc, #116]	; (5288 <usb_d_init+0x94>)
    5212:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5214:	2300      	movs	r3, #0
    5216:	71fb      	strb	r3, [r7, #7]
    5218:	e01e      	b.n	5258 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    521a:	79fb      	ldrb	r3, [r7, #7]
    521c:	4a19      	ldr	r2, [pc, #100]	; (5284 <usb_d_init+0x90>)
    521e:	015b      	lsls	r3, r3, #5
    5220:	4413      	add	r3, r2
    5222:	3301      	adds	r3, #1
    5224:	22ff      	movs	r2, #255	; 0xff
    5226:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5228:	79fb      	ldrb	r3, [r7, #7]
    522a:	4a16      	ldr	r2, [pc, #88]	; (5284 <usb_d_init+0x90>)
    522c:	015b      	lsls	r3, r3, #5
    522e:	4413      	add	r3, r2
    5230:	3314      	adds	r3, #20
    5232:	4a16      	ldr	r2, [pc, #88]	; (528c <usb_d_init+0x98>)
    5234:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5236:	79fb      	ldrb	r3, [r7, #7]
    5238:	4a12      	ldr	r2, [pc, #72]	; (5284 <usb_d_init+0x90>)
    523a:	015b      	lsls	r3, r3, #5
    523c:	4413      	add	r3, r2
    523e:	3318      	adds	r3, #24
    5240:	4a12      	ldr	r2, [pc, #72]	; (528c <usb_d_init+0x98>)
    5242:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5244:	79fb      	ldrb	r3, [r7, #7]
    5246:	4a0f      	ldr	r2, [pc, #60]	; (5284 <usb_d_init+0x90>)
    5248:	015b      	lsls	r3, r3, #5
    524a:	4413      	add	r3, r2
    524c:	331c      	adds	r3, #28
    524e:	4a0f      	ldr	r2, [pc, #60]	; (528c <usb_d_init+0x98>)
    5250:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5252:	79fb      	ldrb	r3, [r7, #7]
    5254:	3301      	adds	r3, #1
    5256:	71fb      	strb	r3, [r7, #7]
    5258:	79fb      	ldrb	r3, [r7, #7]
    525a:	2b03      	cmp	r3, #3
    525c:	d9dd      	bls.n	521a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    525e:	490c      	ldr	r1, [pc, #48]	; (5290 <usb_d_init+0x9c>)
    5260:	2000      	movs	r0, #0
    5262:	4b0c      	ldr	r3, [pc, #48]	; (5294 <usb_d_init+0xa0>)
    5264:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5266:	490c      	ldr	r1, [pc, #48]	; (5298 <usb_d_init+0xa4>)
    5268:	2001      	movs	r0, #1
    526a:	4b0a      	ldr	r3, [pc, #40]	; (5294 <usb_d_init+0xa0>)
    526c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    526e:	490b      	ldr	r1, [pc, #44]	; (529c <usb_d_init+0xa8>)
    5270:	2002      	movs	r0, #2
    5272:	4b08      	ldr	r3, [pc, #32]	; (5294 <usb_d_init+0xa0>)
    5274:	4798      	blx	r3
	return ERR_NONE;
    5276:	2300      	movs	r3, #0
}
    5278:	4618      	mov	r0, r3
    527a:	3708      	adds	r7, #8
    527c:	46bd      	mov	sp, r7
    527e:	bd80      	pop	{r7, pc}
    5280:	0000bb0d 	.word	0x0000bb0d
    5284:	20001c54 	.word	0x20001c54
    5288:	0001095d 	.word	0x0001095d
    528c:	00004f1d 	.word	0x00004f1d
    5290:	00004f39 	.word	0x00004f39
    5294:	0000c755 	.word	0x0000c755
    5298:	00005001 	.word	0x00005001
    529c:	00005115 	.word	0x00005115

000052a0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    52a0:	b580      	push	{r7, lr}
    52a2:	b082      	sub	sp, #8
    52a4:	af00      	add	r7, sp, #0
    52a6:	4603      	mov	r3, r0
    52a8:	6039      	str	r1, [r7, #0]
    52aa:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    52ac:	79fb      	ldrb	r3, [r7, #7]
    52ae:	6839      	ldr	r1, [r7, #0]
    52b0:	4618      	mov	r0, r3
    52b2:	4b03      	ldr	r3, [pc, #12]	; (52c0 <usb_d_register_callback+0x20>)
    52b4:	4798      	blx	r3
}
    52b6:	bf00      	nop
    52b8:	3708      	adds	r7, #8
    52ba:	46bd      	mov	sp, r7
    52bc:	bd80      	pop	{r7, pc}
    52be:	bf00      	nop
    52c0:	0000c70d 	.word	0x0000c70d

000052c4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    52c4:	b580      	push	{r7, lr}
    52c6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    52c8:	4b02      	ldr	r3, [pc, #8]	; (52d4 <usb_d_enable+0x10>)
    52ca:	4798      	blx	r3
    52cc:	4603      	mov	r3, r0
}
    52ce:	4618      	mov	r0, r3
    52d0:	bd80      	pop	{r7, pc}
    52d2:	bf00      	nop
    52d4:	0000bbfd 	.word	0x0000bbfd

000052d8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    52d8:	b580      	push	{r7, lr}
    52da:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    52dc:	4b01      	ldr	r3, [pc, #4]	; (52e4 <usb_d_attach+0xc>)
    52de:	4798      	blx	r3
}
    52e0:	bf00      	nop
    52e2:	bd80      	pop	{r7, pc}
    52e4:	0000bc81 	.word	0x0000bc81

000052e8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    52e8:	b580      	push	{r7, lr}
    52ea:	b082      	sub	sp, #8
    52ec:	af00      	add	r7, sp, #0
    52ee:	4603      	mov	r3, r0
    52f0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    52f2:	79fb      	ldrb	r3, [r7, #7]
    52f4:	4618      	mov	r0, r3
    52f6:	4b03      	ldr	r3, [pc, #12]	; (5304 <usb_d_set_address+0x1c>)
    52f8:	4798      	blx	r3
}
    52fa:	bf00      	nop
    52fc:	3708      	adds	r7, #8
    52fe:	46bd      	mov	sp, r7
    5300:	bd80      	pop	{r7, pc}
    5302:	bf00      	nop
    5304:	0000bc95 	.word	0x0000bc95

00005308 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    5308:	b580      	push	{r7, lr}
    530a:	b082      	sub	sp, #8
    530c:	af00      	add	r7, sp, #0
    530e:	4603      	mov	r3, r0
    5310:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5312:	79fb      	ldrb	r3, [r7, #7]
    5314:	b29b      	uxth	r3, r3
    5316:	461a      	mov	r2, r3
    5318:	2100      	movs	r1, #0
    531a:	2000      	movs	r0, #0
    531c:	4b03      	ldr	r3, [pc, #12]	; (532c <usb_d_ep0_init+0x24>)
    531e:	4798      	blx	r3
    5320:	4603      	mov	r3, r0
}
    5322:	4618      	mov	r0, r3
    5324:	3708      	adds	r7, #8
    5326:	46bd      	mov	sp, r7
    5328:	bd80      	pop	{r7, pc}
    532a:	bf00      	nop
    532c:	00005331 	.word	0x00005331

00005330 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5330:	b580      	push	{r7, lr}
    5332:	b086      	sub	sp, #24
    5334:	af00      	add	r7, sp, #0
    5336:	4603      	mov	r3, r0
    5338:	71fb      	strb	r3, [r7, #7]
    533a:	460b      	mov	r3, r1
    533c:	71bb      	strb	r3, [r7, #6]
    533e:	4613      	mov	r3, r2
    5340:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5342:	79fb      	ldrb	r3, [r7, #7]
    5344:	4618      	mov	r0, r3
    5346:	4b1e      	ldr	r3, [pc, #120]	; (53c0 <usb_d_ep_init+0x90>)
    5348:	4798      	blx	r3
    534a:	4603      	mov	r3, r0
    534c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    534e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5352:	015b      	lsls	r3, r3, #5
    5354:	4a1b      	ldr	r2, [pc, #108]	; (53c4 <usb_d_ep_init+0x94>)
    5356:	4413      	add	r3, r2
    5358:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    535a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    535e:	2b00      	cmp	r3, #0
    5360:	db02      	blt.n	5368 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    5362:	f06f 0313 	mvn.w	r3, #19
    5366:	e027      	b.n	53b8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5368:	20ff      	movs	r0, #255	; 0xff
    536a:	4b15      	ldr	r3, [pc, #84]	; (53c0 <usb_d_ep_init+0x90>)
    536c:	4798      	blx	r3
    536e:	4603      	mov	r3, r0
    5370:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    5372:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5376:	2b00      	cmp	r3, #0
    5378:	da02      	bge.n	5380 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    537a:	f06f 0314 	mvn.w	r3, #20
    537e:	e01b      	b.n	53b8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    5380:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5384:	015b      	lsls	r3, r3, #5
    5386:	4a0f      	ldr	r2, [pc, #60]	; (53c4 <usb_d_ep_init+0x94>)
    5388:	4413      	add	r3, r2
    538a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    538c:	88ba      	ldrh	r2, [r7, #4]
    538e:	79b9      	ldrb	r1, [r7, #6]
    5390:	79fb      	ldrb	r3, [r7, #7]
    5392:	4618      	mov	r0, r3
    5394:	4b0c      	ldr	r3, [pc, #48]	; (53c8 <usb_d_ep_init+0x98>)
    5396:	4798      	blx	r3
    5398:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    539a:	68fb      	ldr	r3, [r7, #12]
    539c:	2b00      	cmp	r3, #0
    539e:	da01      	bge.n	53a4 <usb_d_ep_init+0x74>
		return rc;
    53a0:	68fb      	ldr	r3, [r7, #12]
    53a2:	e009      	b.n	53b8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    53a4:	693b      	ldr	r3, [r7, #16]
    53a6:	79fa      	ldrb	r2, [r7, #7]
    53a8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    53aa:	79bb      	ldrb	r3, [r7, #6]
    53ac:	f003 0303 	and.w	r3, r3, #3
    53b0:	b2da      	uxtb	r2, r3
    53b2:	693b      	ldr	r3, [r7, #16]
    53b4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    53b6:	2300      	movs	r3, #0
}
    53b8:	4618      	mov	r0, r3
    53ba:	3718      	adds	r7, #24
    53bc:	46bd      	mov	sp, r7
    53be:	bd80      	pop	{r7, pc}
    53c0:	00004e49 	.word	0x00004e49
    53c4:	20001c54 	.word	0x20001c54
    53c8:	0000bd35 	.word	0x0000bd35

000053cc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    53cc:	b580      	push	{r7, lr}
    53ce:	b084      	sub	sp, #16
    53d0:	af00      	add	r7, sp, #0
    53d2:	4603      	mov	r3, r0
    53d4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    53d6:	79fb      	ldrb	r3, [r7, #7]
    53d8:	4618      	mov	r0, r3
    53da:	4b0d      	ldr	r3, [pc, #52]	; (5410 <usb_d_ep_deinit+0x44>)
    53dc:	4798      	blx	r3
    53de:	4603      	mov	r3, r0
    53e0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    53e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53e6:	015b      	lsls	r3, r3, #5
    53e8:	4a0a      	ldr	r2, [pc, #40]	; (5414 <usb_d_ep_deinit+0x48>)
    53ea:	4413      	add	r3, r2
    53ec:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    53ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53f2:	2b00      	cmp	r3, #0
    53f4:	db07      	blt.n	5406 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    53f6:	79fb      	ldrb	r3, [r7, #7]
    53f8:	4618      	mov	r0, r3
    53fa:	4b07      	ldr	r3, [pc, #28]	; (5418 <usb_d_ep_deinit+0x4c>)
    53fc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    53fe:	68bb      	ldr	r3, [r7, #8]
    5400:	22ff      	movs	r2, #255	; 0xff
    5402:	705a      	strb	r2, [r3, #1]
    5404:	e000      	b.n	5408 <usb_d_ep_deinit+0x3c>
		return;
    5406:	bf00      	nop
}
    5408:	3710      	adds	r7, #16
    540a:	46bd      	mov	sp, r7
    540c:	bd80      	pop	{r7, pc}
    540e:	bf00      	nop
    5410:	00004e49 	.word	0x00004e49
    5414:	20001c54 	.word	0x20001c54
    5418:	0000be69 	.word	0x0000be69

0000541c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    541c:	b580      	push	{r7, lr}
    541e:	b086      	sub	sp, #24
    5420:	af00      	add	r7, sp, #0
    5422:	4603      	mov	r3, r0
    5424:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5426:	79fb      	ldrb	r3, [r7, #7]
    5428:	4618      	mov	r0, r3
    542a:	4b15      	ldr	r3, [pc, #84]	; (5480 <usb_d_ep_enable+0x64>)
    542c:	4798      	blx	r3
    542e:	4603      	mov	r3, r0
    5430:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5432:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5436:	015b      	lsls	r3, r3, #5
    5438:	4a12      	ldr	r2, [pc, #72]	; (5484 <usb_d_ep_enable+0x68>)
    543a:	4413      	add	r3, r2
    543c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    543e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5442:	2b00      	cmp	r3, #0
    5444:	da02      	bge.n	544c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    5446:	f06f 0311 	mvn.w	r3, #17
    544a:	e014      	b.n	5476 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    544c:	693b      	ldr	r3, [r7, #16]
    544e:	781b      	ldrb	r3, [r3, #0]
    5450:	2b00      	cmp	r3, #0
    5452:	d101      	bne.n	5458 <usb_d_ep_enable+0x3c>
    5454:	2202      	movs	r2, #2
    5456:	e000      	b.n	545a <usb_d_ep_enable+0x3e>
    5458:	2201      	movs	r2, #1
    545a:	693b      	ldr	r3, [r7, #16]
    545c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    545e:	79fb      	ldrb	r3, [r7, #7]
    5460:	4618      	mov	r0, r3
    5462:	4b09      	ldr	r3, [pc, #36]	; (5488 <usb_d_ep_enable+0x6c>)
    5464:	4798      	blx	r3
    5466:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5468:	68fb      	ldr	r3, [r7, #12]
    546a:	2b00      	cmp	r3, #0
    546c:	da02      	bge.n	5474 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    546e:	693b      	ldr	r3, [r7, #16]
    5470:	2200      	movs	r2, #0
    5472:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    5474:	68fb      	ldr	r3, [r7, #12]
}
    5476:	4618      	mov	r0, r3
    5478:	3718      	adds	r7, #24
    547a:	46bd      	mov	sp, r7
    547c:	bd80      	pop	{r7, pc}
    547e:	bf00      	nop
    5480:	00004e49 	.word	0x00004e49
    5484:	20001c54 	.word	0x20001c54
    5488:	0000bf4d 	.word	0x0000bf4d

0000548c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    548c:	b590      	push	{r4, r7, lr}
    548e:	b08d      	sub	sp, #52	; 0x34
    5490:	af02      	add	r7, sp, #8
    5492:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5494:	687b      	ldr	r3, [r7, #4]
    5496:	7a1b      	ldrb	r3, [r3, #8]
    5498:	4618      	mov	r0, r3
    549a:	4b51      	ldr	r3, [pc, #324]	; (55e0 <usb_d_ep_transfer+0x154>)
    549c:	4798      	blx	r3
    549e:	4603      	mov	r3, r0
    54a0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    54a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    54a6:	015b      	lsls	r3, r3, #5
    54a8:	4a4e      	ldr	r2, [pc, #312]	; (55e4 <usb_d_ep_transfer+0x158>)
    54aa:	4413      	add	r3, r2
    54ac:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    54ae:	687b      	ldr	r3, [r7, #4]
    54b0:	7a1b      	ldrb	r3, [r3, #8]
    54b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    54b6:	2b00      	cmp	r3, #0
    54b8:	bf14      	ite	ne
    54ba:	2301      	movne	r3, #1
    54bc:	2300      	moveq	r3, #0
    54be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    54c2:	687b      	ldr	r3, [r7, #4]
    54c4:	7a5b      	ldrb	r3, [r3, #9]
    54c6:	2b00      	cmp	r3, #0
    54c8:	bf14      	ite	ne
    54ca:	2301      	movne	r3, #1
    54cc:	2300      	moveq	r3, #0
    54ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	685b      	ldr	r3, [r3, #4]
    54d6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    54d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    54dc:	2b00      	cmp	r3, #0
    54de:	da02      	bge.n	54e6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    54e0:	f06f 0311 	mvn.w	r3, #17
    54e4:	e077      	b.n	55d6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    54e6:	f107 0308 	add.w	r3, r7, #8
    54ea:	4618      	mov	r0, r3
    54ec:	4b3e      	ldr	r3, [pc, #248]	; (55e8 <usb_d_ep_transfer+0x15c>)
    54ee:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    54f0:	69bb      	ldr	r3, [r7, #24]
    54f2:	789b      	ldrb	r3, [r3, #2]
    54f4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    54f6:	7bfb      	ldrb	r3, [r7, #15]
    54f8:	b2db      	uxtb	r3, r3
    54fa:	2b01      	cmp	r3, #1
    54fc:	d10c      	bne.n	5518 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    54fe:	69bb      	ldr	r3, [r7, #24]
    5500:	2203      	movs	r2, #3
    5502:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5504:	f107 0308 	add.w	r3, r7, #8
    5508:	4618      	mov	r0, r3
    550a:	4b38      	ldr	r3, [pc, #224]	; (55ec <usb_d_ep_transfer+0x160>)
    550c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    550e:	69bb      	ldr	r3, [r7, #24]
    5510:	781b      	ldrb	r3, [r3, #0]
    5512:	2b00      	cmp	r3, #0
    5514:	d151      	bne.n	55ba <usb_d_ep_transfer+0x12e>
    5516:	e017      	b.n	5548 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    5518:	f107 0308 	add.w	r3, r7, #8
    551c:	4618      	mov	r0, r3
    551e:	4b33      	ldr	r3, [pc, #204]	; (55ec <usb_d_ep_transfer+0x160>)
    5520:	4798      	blx	r3
		switch (state) {
    5522:	7bfb      	ldrb	r3, [r7, #15]
    5524:	b2db      	uxtb	r3, r3
    5526:	2b05      	cmp	r3, #5
    5528:	d004      	beq.n	5534 <usb_d_ep_transfer+0xa8>
    552a:	2b06      	cmp	r3, #6
    552c:	d004      	beq.n	5538 <usb_d_ep_transfer+0xac>
    552e:	2b00      	cmp	r3, #0
    5530:	d005      	beq.n	553e <usb_d_ep_transfer+0xb2>
    5532:	e007      	b.n	5544 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    5534:	2302      	movs	r3, #2
    5536:	e04e      	b.n	55d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    5538:	f06f 030f 	mvn.w	r3, #15
    553c:	e04b      	b.n	55d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    553e:	f06f 0312 	mvn.w	r3, #18
    5542:	e048      	b.n	55d6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    5544:	2301      	movs	r3, #1
    5546:	e046      	b.n	55d6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5548:	69bb      	ldr	r3, [r7, #24]
    554a:	7c9b      	ldrb	r3, [r3, #18]
    554c:	b29a      	uxth	r2, r3
    554e:	69bb      	ldr	r3, [r7, #24]
    5550:	7cdb      	ldrb	r3, [r3, #19]
    5552:	b29b      	uxth	r3, r3
    5554:	021b      	lsls	r3, r3, #8
    5556:	b29b      	uxth	r3, r3
    5558:	4413      	add	r3, r2
    555a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    555c:	8afb      	ldrh	r3, [r7, #22]
    555e:	2b00      	cmp	r3, #0
    5560:	d10b      	bne.n	557a <usb_d_ep_transfer+0xee>
			dir                 = true;
    5562:	2301      	movs	r3, #1
    5564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    5568:	2300      	movs	r3, #0
    556a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    556c:	2301      	movs	r3, #1
    556e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5572:	69bb      	ldr	r3, [r7, #24]
    5574:	2204      	movs	r2, #4
    5576:	709a      	strb	r2, [r3, #2]
    5578:	e01f      	b.n	55ba <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    557a:	69bb      	ldr	r3, [r7, #24]
    557c:	7b1b      	ldrb	r3, [r3, #12]
    557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5582:	2b00      	cmp	r3, #0
    5584:	bf14      	ite	ne
    5586:	2301      	movne	r3, #1
    5588:	2300      	moveq	r3, #0
    558a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    558e:	8afa      	ldrh	r2, [r7, #22]
    5590:	6a3b      	ldr	r3, [r7, #32]
    5592:	429a      	cmp	r2, r3
    5594:	d201      	bcs.n	559a <usb_d_ep_transfer+0x10e>
				len = req_len;
    5596:	8afb      	ldrh	r3, [r7, #22]
    5598:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    559a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    559e:	2b00      	cmp	r3, #0
    55a0:	d008      	beq.n	55b4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    55a2:	8afa      	ldrh	r2, [r7, #22]
    55a4:	6a3b      	ldr	r3, [r7, #32]
    55a6:	429a      	cmp	r2, r3
    55a8:	bf8c      	ite	hi
    55aa:	2301      	movhi	r3, #1
    55ac:	2300      	movls	r3, #0
    55ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    55b2:	e002      	b.n	55ba <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    55b4:	2300      	movs	r3, #0
    55b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    55ba:	687b      	ldr	r3, [r7, #4]
    55bc:	7a18      	ldrb	r0, [r3, #8]
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	681a      	ldr	r2, [r3, #0]
    55c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    55c6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    55ca:	9300      	str	r3, [sp, #0]
    55cc:	6a3b      	ldr	r3, [r7, #32]
    55ce:	4c08      	ldr	r4, [pc, #32]	; (55f0 <usb_d_ep_transfer+0x164>)
    55d0:	47a0      	blx	r4
    55d2:	6138      	str	r0, [r7, #16]
	return rc;
    55d4:	693b      	ldr	r3, [r7, #16]
}
    55d6:	4618      	mov	r0, r3
    55d8:	372c      	adds	r7, #44	; 0x2c
    55da:	46bd      	mov	sp, r7
    55dc:	bd90      	pop	{r4, r7, pc}
    55de:	bf00      	nop
    55e0:	00004e49 	.word	0x00004e49
    55e4:	20001c54 	.word	0x20001c54
    55e8:	00003ac1 	.word	0x00003ac1
    55ec:	00003ae7 	.word	0x00003ae7
    55f0:	00004ec9 	.word	0x00004ec9

000055f4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    55f4:	b580      	push	{r7, lr}
    55f6:	b084      	sub	sp, #16
    55f8:	af00      	add	r7, sp, #0
    55fa:	4603      	mov	r3, r0
    55fc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    55fe:	79fb      	ldrb	r3, [r7, #7]
    5600:	4618      	mov	r0, r3
    5602:	4b0e      	ldr	r3, [pc, #56]	; (563c <usb_d_ep_abort+0x48>)
    5604:	4798      	blx	r3
    5606:	4603      	mov	r3, r0
    5608:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    560a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    560e:	015b      	lsls	r3, r3, #5
    5610:	4a0b      	ldr	r2, [pc, #44]	; (5640 <usb_d_ep_abort+0x4c>)
    5612:	4413      	add	r3, r2
    5614:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5616:	f997 300f 	ldrsb.w	r3, [r7, #15]
    561a:	2b00      	cmp	r3, #0
    561c:	db0a      	blt.n	5634 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    561e:	79fb      	ldrb	r3, [r7, #7]
    5620:	4618      	mov	r0, r3
    5622:	4b08      	ldr	r3, [pc, #32]	; (5644 <usb_d_ep_abort+0x50>)
    5624:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5626:	68bb      	ldr	r3, [r7, #8]
    5628:	2201      	movs	r2, #1
    562a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    562c:	68bb      	ldr	r3, [r7, #8]
    562e:	2204      	movs	r2, #4
    5630:	70da      	strb	r2, [r3, #3]
    5632:	e000      	b.n	5636 <usb_d_ep_abort+0x42>
		return;
    5634:	bf00      	nop
}
    5636:	3710      	adds	r7, #16
    5638:	46bd      	mov	sp, r7
    563a:	bd80      	pop	{r7, pc}
    563c:	00004e49 	.word	0x00004e49
    5640:	20001c54 	.word	0x20001c54
    5644:	0000c6b9 	.word	0x0000c6b9

00005648 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    5648:	b580      	push	{r7, lr}
    564a:	b086      	sub	sp, #24
    564c:	af00      	add	r7, sp, #0
    564e:	4603      	mov	r3, r0
    5650:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5652:	79fb      	ldrb	r3, [r7, #7]
    5654:	4618      	mov	r0, r3
    5656:	4b1a      	ldr	r3, [pc, #104]	; (56c0 <_usb_d_ep_halt_clr+0x78>)
    5658:	4798      	blx	r3
    565a:	4603      	mov	r3, r0
    565c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    565e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5662:	015b      	lsls	r3, r3, #5
    5664:	4a17      	ldr	r2, [pc, #92]	; (56c4 <_usb_d_ep_halt_clr+0x7c>)
    5666:	4413      	add	r3, r2
    5668:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    566a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    566e:	2b00      	cmp	r3, #0
    5670:	da02      	bge.n	5678 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    5672:	f06f 0311 	mvn.w	r3, #17
    5676:	e01f      	b.n	56b8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5678:	79fb      	ldrb	r3, [r7, #7]
    567a:	2102      	movs	r1, #2
    567c:	4618      	mov	r0, r3
    567e:	4b12      	ldr	r3, [pc, #72]	; (56c8 <_usb_d_ep_halt_clr+0x80>)
    5680:	4798      	blx	r3
    5682:	4603      	mov	r3, r0
    5684:	2b00      	cmp	r3, #0
    5686:	d016      	beq.n	56b6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5688:	79fb      	ldrb	r3, [r7, #7]
    568a:	2100      	movs	r1, #0
    568c:	4618      	mov	r0, r3
    568e:	4b0e      	ldr	r3, [pc, #56]	; (56c8 <_usb_d_ep_halt_clr+0x80>)
    5690:	4798      	blx	r3
    5692:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    5694:	68fb      	ldr	r3, [r7, #12]
    5696:	2b00      	cmp	r3, #0
    5698:	da01      	bge.n	569e <_usb_d_ep_halt_clr+0x56>
			return rc;
    569a:	68fb      	ldr	r3, [r7, #12]
    569c:	e00c      	b.n	56b8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    569e:	693b      	ldr	r3, [r7, #16]
    56a0:	2201      	movs	r2, #1
    56a2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    56a4:	693b      	ldr	r3, [r7, #16]
    56a6:	2203      	movs	r2, #3
    56a8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    56aa:	693b      	ldr	r3, [r7, #16]
    56ac:	69db      	ldr	r3, [r3, #28]
    56ae:	79f8      	ldrb	r0, [r7, #7]
    56b0:	2200      	movs	r2, #0
    56b2:	2103      	movs	r1, #3
    56b4:	4798      	blx	r3
	}
	return ERR_NONE;
    56b6:	2300      	movs	r3, #0
}
    56b8:	4618      	mov	r0, r3
    56ba:	3718      	adds	r7, #24
    56bc:	46bd      	mov	sp, r7
    56be:	bd80      	pop	{r7, pc}
    56c0:	00004e49 	.word	0x00004e49
    56c4:	20001c54 	.word	0x20001c54
    56c8:	0000c2c5 	.word	0x0000c2c5

000056cc <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    56cc:	b580      	push	{r7, lr}
    56ce:	b082      	sub	sp, #8
    56d0:	af00      	add	r7, sp, #0
    56d2:	4603      	mov	r3, r0
    56d4:	460a      	mov	r2, r1
    56d6:	71fb      	strb	r3, [r7, #7]
    56d8:	4613      	mov	r3, r2
    56da:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    56dc:	79bb      	ldrb	r3, [r7, #6]
    56de:	2b00      	cmp	r3, #0
    56e0:	d105      	bne.n	56ee <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    56e2:	79fb      	ldrb	r3, [r7, #7]
    56e4:	4618      	mov	r0, r3
    56e6:	4b0c      	ldr	r3, [pc, #48]	; (5718 <usb_d_ep_halt+0x4c>)
    56e8:	4798      	blx	r3
    56ea:	4603      	mov	r3, r0
    56ec:	e00f      	b.n	570e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    56ee:	79bb      	ldrb	r3, [r7, #6]
    56f0:	2b01      	cmp	r3, #1
    56f2:	d106      	bne.n	5702 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    56f4:	79fb      	ldrb	r3, [r7, #7]
    56f6:	2101      	movs	r1, #1
    56f8:	4618      	mov	r0, r3
    56fa:	4b08      	ldr	r3, [pc, #32]	; (571c <usb_d_ep_halt+0x50>)
    56fc:	4798      	blx	r3
    56fe:	4603      	mov	r3, r0
    5700:	e005      	b.n	570e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5702:	79fb      	ldrb	r3, [r7, #7]
    5704:	2102      	movs	r1, #2
    5706:	4618      	mov	r0, r3
    5708:	4b04      	ldr	r3, [pc, #16]	; (571c <usb_d_ep_halt+0x50>)
    570a:	4798      	blx	r3
    570c:	4603      	mov	r3, r0
	}
}
    570e:	4618      	mov	r0, r3
    5710:	3708      	adds	r7, #8
    5712:	46bd      	mov	sp, r7
    5714:	bd80      	pop	{r7, pc}
    5716:	bf00      	nop
    5718:	00005649 	.word	0x00005649
    571c:	0000c2c5 	.word	0x0000c2c5

00005720 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5720:	b580      	push	{r7, lr}
    5722:	b086      	sub	sp, #24
    5724:	af00      	add	r7, sp, #0
    5726:	4603      	mov	r3, r0
    5728:	603a      	str	r2, [r7, #0]
    572a:	71fb      	strb	r3, [r7, #7]
    572c:	460b      	mov	r3, r1
    572e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5730:	79fb      	ldrb	r3, [r7, #7]
    5732:	4618      	mov	r0, r3
    5734:	4b16      	ldr	r3, [pc, #88]	; (5790 <usb_d_ep_register_callback+0x70>)
    5736:	4798      	blx	r3
    5738:	4603      	mov	r3, r0
    573a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    573c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5740:	015b      	lsls	r3, r3, #5
    5742:	4a14      	ldr	r2, [pc, #80]	; (5794 <usb_d_ep_register_callback+0x74>)
    5744:	4413      	add	r3, r2
    5746:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5748:	683b      	ldr	r3, [r7, #0]
    574a:	2b00      	cmp	r3, #0
    574c:	d001      	beq.n	5752 <usb_d_ep_register_callback+0x32>
    574e:	683b      	ldr	r3, [r7, #0]
    5750:	e000      	b.n	5754 <usb_d_ep_register_callback+0x34>
    5752:	4b11      	ldr	r3, [pc, #68]	; (5798 <usb_d_ep_register_callback+0x78>)
    5754:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    5756:	f997 3017 	ldrsb.w	r3, [r7, #23]
    575a:	2b00      	cmp	r3, #0
    575c:	db13      	blt.n	5786 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    575e:	79bb      	ldrb	r3, [r7, #6]
    5760:	2b01      	cmp	r3, #1
    5762:	d008      	beq.n	5776 <usb_d_ep_register_callback+0x56>
    5764:	2b02      	cmp	r3, #2
    5766:	d00a      	beq.n	577e <usb_d_ep_register_callback+0x5e>
    5768:	2b00      	cmp	r3, #0
    576a:	d000      	beq.n	576e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    576c:	e00c      	b.n	5788 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    576e:	693b      	ldr	r3, [r7, #16]
    5770:	68fa      	ldr	r2, [r7, #12]
    5772:	615a      	str	r2, [r3, #20]
		break;
    5774:	e008      	b.n	5788 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5776:	693b      	ldr	r3, [r7, #16]
    5778:	68fa      	ldr	r2, [r7, #12]
    577a:	619a      	str	r2, [r3, #24]
		break;
    577c:	e004      	b.n	5788 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    577e:	693b      	ldr	r3, [r7, #16]
    5780:	68fa      	ldr	r2, [r7, #12]
    5782:	61da      	str	r2, [r3, #28]
		break;
    5784:	e000      	b.n	5788 <usb_d_ep_register_callback+0x68>
		return;
    5786:	bf00      	nop
	}
}
    5788:	3718      	adds	r7, #24
    578a:	46bd      	mov	sp, r7
    578c:	bd80      	pop	{r7, pc}
    578e:	bf00      	nop
    5790:	00004e49 	.word	0x00004e49
    5794:	20001c54 	.word	0x20001c54
    5798:	00004f1d 	.word	0x00004f1d

0000579c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    579c:	b480      	push	{r7}
    579e:	b085      	sub	sp, #20
    57a0:	af00      	add	r7, sp, #0
    57a2:	4603      	mov	r3, r0
    57a4:	60b9      	str	r1, [r7, #8]
    57a6:	607a      	str	r2, [r7, #4]
    57a8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    57aa:	7bfb      	ldrb	r3, [r7, #15]
    57ac:	f083 0301 	eor.w	r3, r3, #1
    57b0:	b2db      	uxtb	r3, r3
    57b2:	2b00      	cmp	r3, #0
    57b4:	d000      	beq.n	57b8 <assert+0x1c>
		__asm("BKPT #0");
    57b6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    57b8:	bf00      	nop
    57ba:	3714      	adds	r7, #20
    57bc:	46bd      	mov	sp, r7
    57be:	f85d 7b04 	ldr.w	r7, [sp], #4
    57c2:	4770      	bx	lr

000057c4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    57c4:	b480      	push	{r7}
    57c6:	b085      	sub	sp, #20
    57c8:	af00      	add	r7, sp, #0
    57ca:	6078      	str	r0, [r7, #4]
    57cc:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    57ce:	687b      	ldr	r3, [r7, #4]
    57d0:	681b      	ldr	r3, [r3, #0]
    57d2:	60fb      	str	r3, [r7, #12]
    57d4:	e008      	b.n	57e8 <is_list_element+0x24>
		if (it == element) {
    57d6:	68fa      	ldr	r2, [r7, #12]
    57d8:	683b      	ldr	r3, [r7, #0]
    57da:	429a      	cmp	r2, r3
    57dc:	d101      	bne.n	57e2 <is_list_element+0x1e>
			return true;
    57de:	2301      	movs	r3, #1
    57e0:	e006      	b.n	57f0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    57e2:	68fb      	ldr	r3, [r7, #12]
    57e4:	681b      	ldr	r3, [r3, #0]
    57e6:	60fb      	str	r3, [r7, #12]
    57e8:	68fb      	ldr	r3, [r7, #12]
    57ea:	2b00      	cmp	r3, #0
    57ec:	d1f3      	bne.n	57d6 <is_list_element+0x12>
		}
	}

	return false;
    57ee:	2300      	movs	r3, #0
}
    57f0:	4618      	mov	r0, r3
    57f2:	3714      	adds	r7, #20
    57f4:	46bd      	mov	sp, r7
    57f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fa:	4770      	bx	lr

000057fc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    57fc:	b580      	push	{r7, lr}
    57fe:	b082      	sub	sp, #8
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
    5804:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    5806:	6839      	ldr	r1, [r7, #0]
    5808:	6878      	ldr	r0, [r7, #4]
    580a:	4b0f      	ldr	r3, [pc, #60]	; (5848 <list_insert_as_head+0x4c>)
    580c:	4798      	blx	r3
    580e:	4603      	mov	r3, r0
    5810:	2b00      	cmp	r3, #0
    5812:	bf14      	ite	ne
    5814:	2301      	movne	r3, #1
    5816:	2300      	moveq	r3, #0
    5818:	b2db      	uxtb	r3, r3
    581a:	f083 0301 	eor.w	r3, r3, #1
    581e:	b2db      	uxtb	r3, r3
    5820:	f003 0301 	and.w	r3, r3, #1
    5824:	b2db      	uxtb	r3, r3
    5826:	2239      	movs	r2, #57	; 0x39
    5828:	4908      	ldr	r1, [pc, #32]	; (584c <list_insert_as_head+0x50>)
    582a:	4618      	mov	r0, r3
    582c:	4b08      	ldr	r3, [pc, #32]	; (5850 <list_insert_as_head+0x54>)
    582e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5830:	687b      	ldr	r3, [r7, #4]
    5832:	681a      	ldr	r2, [r3, #0]
    5834:	683b      	ldr	r3, [r7, #0]
    5836:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    5838:	687b      	ldr	r3, [r7, #4]
    583a:	683a      	ldr	r2, [r7, #0]
    583c:	601a      	str	r2, [r3, #0]
}
    583e:	bf00      	nop
    5840:	3708      	adds	r7, #8
    5842:	46bd      	mov	sp, r7
    5844:	bd80      	pop	{r7, pc}
    5846:	bf00      	nop
    5848:	000057c5 	.word	0x000057c5
    584c:	00011a9c 	.word	0x00011a9c
    5850:	0000579d 	.word	0x0000579d

00005854 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    5854:	b480      	push	{r7}
    5856:	b083      	sub	sp, #12
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
    585c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    585e:	687b      	ldr	r3, [r7, #4]
    5860:	681a      	ldr	r2, [r3, #0]
    5862:	683b      	ldr	r3, [r7, #0]
    5864:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5866:	687b      	ldr	r3, [r7, #4]
    5868:	683a      	ldr	r2, [r7, #0]
    586a:	601a      	str	r2, [r3, #0]
}
    586c:	bf00      	nop
    586e:	370c      	adds	r7, #12
    5870:	46bd      	mov	sp, r7
    5872:	f85d 7b04 	ldr.w	r7, [sp], #4
    5876:	4770      	bx	lr

00005878 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5878:	b580      	push	{r7, lr}
    587a:	b084      	sub	sp, #16
    587c:	af00      	add	r7, sp, #0
    587e:	6078      	str	r0, [r7, #4]
    5880:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    5882:	687b      	ldr	r3, [r7, #4]
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    5888:	6839      	ldr	r1, [r7, #0]
    588a:	6878      	ldr	r0, [r7, #4]
    588c:	4b16      	ldr	r3, [pc, #88]	; (58e8 <list_insert_at_end+0x70>)
    588e:	4798      	blx	r3
    5890:	4603      	mov	r3, r0
    5892:	2b00      	cmp	r3, #0
    5894:	bf14      	ite	ne
    5896:	2301      	movne	r3, #1
    5898:	2300      	moveq	r3, #0
    589a:	b2db      	uxtb	r3, r3
    589c:	f083 0301 	eor.w	r3, r3, #1
    58a0:	b2db      	uxtb	r3, r3
    58a2:	f003 0301 	and.w	r3, r3, #1
    58a6:	b2db      	uxtb	r3, r3
    58a8:	224f      	movs	r2, #79	; 0x4f
    58aa:	4910      	ldr	r1, [pc, #64]	; (58ec <list_insert_at_end+0x74>)
    58ac:	4618      	mov	r0, r3
    58ae:	4b10      	ldr	r3, [pc, #64]	; (58f0 <list_insert_at_end+0x78>)
    58b0:	4798      	blx	r3

	if (!list->head) {
    58b2:	687b      	ldr	r3, [r7, #4]
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	2b00      	cmp	r3, #0
    58b8:	d109      	bne.n	58ce <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    58ba:	687b      	ldr	r3, [r7, #4]
    58bc:	683a      	ldr	r2, [r7, #0]
    58be:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    58c0:	683b      	ldr	r3, [r7, #0]
    58c2:	2200      	movs	r2, #0
    58c4:	601a      	str	r2, [r3, #0]
		return;
    58c6:	e00c      	b.n	58e2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    58c8:	68fb      	ldr	r3, [r7, #12]
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    58ce:	68fb      	ldr	r3, [r7, #12]
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	2b00      	cmp	r3, #0
    58d4:	d1f8      	bne.n	58c8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    58d6:	68fb      	ldr	r3, [r7, #12]
    58d8:	683a      	ldr	r2, [r7, #0]
    58da:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    58dc:	683b      	ldr	r3, [r7, #0]
    58de:	2200      	movs	r2, #0
    58e0:	601a      	str	r2, [r3, #0]
}
    58e2:	3710      	adds	r7, #16
    58e4:	46bd      	mov	sp, r7
    58e6:	bd80      	pop	{r7, pc}
    58e8:	000057c5 	.word	0x000057c5
    58ec:	00011a9c 	.word	0x00011a9c
    58f0:	0000579d 	.word	0x0000579d

000058f4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    58f4:	b480      	push	{r7}
    58f6:	b085      	sub	sp, #20
    58f8:	af00      	add	r7, sp, #0
    58fa:	6078      	str	r0, [r7, #4]
	if (list->head) {
    58fc:	687b      	ldr	r3, [r7, #4]
    58fe:	681b      	ldr	r3, [r3, #0]
    5900:	2b00      	cmp	r3, #0
    5902:	d009      	beq.n	5918 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    5904:	687b      	ldr	r3, [r7, #4]
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	681b      	ldr	r3, [r3, #0]
    590e:	681a      	ldr	r2, [r3, #0]
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    5914:	68fb      	ldr	r3, [r7, #12]
    5916:	e000      	b.n	591a <list_remove_head+0x26>
	}

	return NULL;
    5918:	2300      	movs	r3, #0
}
    591a:	4618      	mov	r0, r3
    591c:	3714      	adds	r7, #20
    591e:	46bd      	mov	sp, r7
    5920:	f85d 7b04 	ldr.w	r7, [sp], #4
    5924:	4770      	bx	lr

00005926 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    5926:	b480      	push	{r7}
    5928:	b085      	sub	sp, #20
    592a:	af00      	add	r7, sp, #0
    592c:	6078      	str	r0, [r7, #4]
    592e:	6039      	str	r1, [r7, #0]
	if (!element) {
    5930:	683b      	ldr	r3, [r7, #0]
    5932:	2b00      	cmp	r3, #0
    5934:	d101      	bne.n	593a <list_delete_element+0x14>
		return false;
    5936:	2300      	movs	r3, #0
    5938:	e024      	b.n	5984 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    593a:	687b      	ldr	r3, [r7, #4]
    593c:	681a      	ldr	r2, [r3, #0]
    593e:	683b      	ldr	r3, [r7, #0]
    5940:	429a      	cmp	r2, r3
    5942:	d106      	bne.n	5952 <list_delete_element+0x2c>
		list->head = list->head->next;
    5944:	687b      	ldr	r3, [r7, #4]
    5946:	681b      	ldr	r3, [r3, #0]
    5948:	681a      	ldr	r2, [r3, #0]
    594a:	687b      	ldr	r3, [r7, #4]
    594c:	601a      	str	r2, [r3, #0]
		return true;
    594e:	2301      	movs	r3, #1
    5950:	e018      	b.n	5984 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    5958:	e002      	b.n	5960 <list_delete_element+0x3a>
			it = it->next;
    595a:	68fb      	ldr	r3, [r7, #12]
    595c:	681b      	ldr	r3, [r3, #0]
    595e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    5960:	68fb      	ldr	r3, [r7, #12]
    5962:	2b00      	cmp	r3, #0
    5964:	d004      	beq.n	5970 <list_delete_element+0x4a>
    5966:	68fb      	ldr	r3, [r7, #12]
    5968:	681a      	ldr	r2, [r3, #0]
    596a:	683b      	ldr	r3, [r7, #0]
    596c:	429a      	cmp	r2, r3
    596e:	d1f4      	bne.n	595a <list_delete_element+0x34>
		}
		if (it) {
    5970:	68fb      	ldr	r3, [r7, #12]
    5972:	2b00      	cmp	r3, #0
    5974:	d005      	beq.n	5982 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    5976:	683b      	ldr	r3, [r7, #0]
    5978:	681a      	ldr	r2, [r3, #0]
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	601a      	str	r2, [r3, #0]
			return true;
    597e:	2301      	movs	r3, #1
    5980:	e000      	b.n	5984 <list_delete_element+0x5e>
		}
	}

	return false;
    5982:	2300      	movs	r3, #0
}
    5984:	4618      	mov	r0, r3
    5986:	3714      	adds	r7, #20
    5988:	46bd      	mov	sp, r7
    598a:	f85d 7b04 	ldr.w	r7, [sp], #4
    598e:	4770      	bx	lr

00005990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    5990:	b480      	push	{r7}
    5992:	b083      	sub	sp, #12
    5994:	af00      	add	r7, sp, #0
    5996:	4603      	mov	r3, r0
    5998:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    599a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    599e:	2b00      	cmp	r3, #0
    59a0:	db0b      	blt.n	59ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59a2:	4909      	ldr	r1, [pc, #36]	; (59c8 <__NVIC_EnableIRQ+0x38>)
    59a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    59a8:	095b      	lsrs	r3, r3, #5
    59aa:	88fa      	ldrh	r2, [r7, #6]
    59ac:	f002 021f 	and.w	r2, r2, #31
    59b0:	2001      	movs	r0, #1
    59b2:	fa00 f202 	lsl.w	r2, r0, r2
    59b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    59ba:	bf00      	nop
    59bc:	370c      	adds	r7, #12
    59be:	46bd      	mov	sp, r7
    59c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59c4:	4770      	bx	lr
    59c6:	bf00      	nop
    59c8:	e000e100 	.word	0xe000e100

000059cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    59cc:	b480      	push	{r7}
    59ce:	b083      	sub	sp, #12
    59d0:	af00      	add	r7, sp, #0
    59d2:	4603      	mov	r3, r0
    59d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    59d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    59da:	2b00      	cmp	r3, #0
    59dc:	db10      	blt.n	5a00 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59de:	490b      	ldr	r1, [pc, #44]	; (5a0c <__NVIC_DisableIRQ+0x40>)
    59e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    59e4:	095b      	lsrs	r3, r3, #5
    59e6:	88fa      	ldrh	r2, [r7, #6]
    59e8:	f002 021f 	and.w	r2, r2, #31
    59ec:	2001      	movs	r0, #1
    59ee:	fa00 f202 	lsl.w	r2, r0, r2
    59f2:	3320      	adds	r3, #32
    59f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    59f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59fc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    5a00:	bf00      	nop
    5a02:	370c      	adds	r7, #12
    5a04:	46bd      	mov	sp, r7
    5a06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a0a:	4770      	bx	lr
    5a0c:	e000e100 	.word	0xe000e100

00005a10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    5a10:	b480      	push	{r7}
    5a12:	b083      	sub	sp, #12
    5a14:	af00      	add	r7, sp, #0
    5a16:	4603      	mov	r3, r0
    5a18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a1e:	2b00      	cmp	r3, #0
    5a20:	db0c      	blt.n	5a3c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a22:	4909      	ldr	r1, [pc, #36]	; (5a48 <__NVIC_ClearPendingIRQ+0x38>)
    5a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a28:	095b      	lsrs	r3, r3, #5
    5a2a:	88fa      	ldrh	r2, [r7, #6]
    5a2c:	f002 021f 	and.w	r2, r2, #31
    5a30:	2001      	movs	r0, #1
    5a32:	fa00 f202 	lsl.w	r2, r0, r2
    5a36:	3360      	adds	r3, #96	; 0x60
    5a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5a3c:	bf00      	nop
    5a3e:	370c      	adds	r7, #12
    5a40:	46bd      	mov	sp, r7
    5a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a46:	4770      	bx	lr
    5a48:	e000e100 	.word	0xe000e100

00005a4c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    5a4c:	b480      	push	{r7}
    5a4e:	b083      	sub	sp, #12
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    5a54:	687b      	ldr	r3, [r7, #4]
    5a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5a58:	095b      	lsrs	r3, r3, #5
    5a5a:	f003 0301 	and.w	r3, r3, #1
    5a5e:	2b00      	cmp	r3, #0
    5a60:	bf14      	ite	ne
    5a62:	2301      	movne	r3, #1
    5a64:	2300      	moveq	r3, #0
    5a66:	b2db      	uxtb	r3, r3
}
    5a68:	4618      	mov	r0, r3
    5a6a:	370c      	adds	r7, #12
    5a6c:	46bd      	mov	sp, r7
    5a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a72:	4770      	bx	lr

00005a74 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    5a74:	b480      	push	{r7}
    5a76:	b083      	sub	sp, #12
    5a78:	af00      	add	r7, sp, #0
    5a7a:	6078      	str	r0, [r7, #4]
    5a7c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	683a      	ldr	r2, [r7, #0]
    5a82:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a84:	bf00      	nop
    5a86:	370c      	adds	r7, #12
    5a88:	46bd      	mov	sp, r7
    5a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a8e:	4770      	bx	lr

00005a90 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    5a90:	b480      	push	{r7}
    5a92:	b083      	sub	sp, #12
    5a94:	af00      	add	r7, sp, #0
    5a96:	6078      	str	r0, [r7, #4]
    5a98:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	683a      	ldr	r2, [r7, #0]
    5a9e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5aa0:	bf00      	nop
    5aa2:	370c      	adds	r7, #12
    5aa4:	46bd      	mov	sp, r7
    5aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aaa:	4770      	bx	lr

00005aac <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    5aac:	b480      	push	{r7}
    5aae:	b083      	sub	sp, #12
    5ab0:	af00      	add	r7, sp, #0
    5ab2:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	699b      	ldr	r3, [r3, #24]
    5ab8:	f043 0201 	orr.w	r2, r3, #1
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5ac0:	bf00      	nop
    5ac2:	370c      	adds	r7, #12
    5ac4:	46bd      	mov	sp, r7
    5ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aca:	4770      	bx	lr

00005acc <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    5acc:	b480      	push	{r7}
    5ace:	b085      	sub	sp, #20
    5ad0:	af00      	add	r7, sp, #0
    5ad2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    5ad4:	687b      	ldr	r3, [r7, #4]
    5ad6:	699b      	ldr	r3, [r3, #24]
    5ad8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    5ada:	68fb      	ldr	r3, [r7, #12]
    5adc:	f003 0301 	and.w	r3, r3, #1
    5ae0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5ae2:	68fb      	ldr	r3, [r7, #12]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	bf14      	ite	ne
    5ae8:	2301      	movne	r3, #1
    5aea:	2300      	moveq	r3, #0
    5aec:	b2db      	uxtb	r3, r3
}
    5aee:	4618      	mov	r0, r3
    5af0:	3714      	adds	r7, #20
    5af2:	46bd      	mov	sp, r7
    5af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af8:	4770      	bx	lr

00005afa <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    5afa:	b480      	push	{r7}
    5afc:	b083      	sub	sp, #12
    5afe:	af00      	add	r7, sp, #0
    5b00:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    5b02:	687b      	ldr	r3, [r7, #4]
    5b04:	699b      	ldr	r3, [r3, #24]
    5b06:	f023 0201 	bic.w	r2, r3, #1
    5b0a:	687b      	ldr	r3, [r7, #4]
    5b0c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5b0e:	bf00      	nop
    5b10:	370c      	adds	r7, #12
    5b12:	46bd      	mov	sp, r7
    5b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b18:	4770      	bx	lr

00005b1a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    5b1a:	b480      	push	{r7}
    5b1c:	b083      	sub	sp, #12
    5b1e:	af00      	add	r7, sp, #0
    5b20:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    5b22:	687b      	ldr	r3, [r7, #4]
    5b24:	699b      	ldr	r3, [r3, #24]
    5b26:	f043 0202 	orr.w	r2, r3, #2
    5b2a:	687b      	ldr	r3, [r7, #4]
    5b2c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5b2e:	bf00      	nop
    5b30:	370c      	adds	r7, #12
    5b32:	46bd      	mov	sp, r7
    5b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b38:	4770      	bx	lr

00005b3a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    5b3a:	b480      	push	{r7}
    5b3c:	b083      	sub	sp, #12
    5b3e:	af00      	add	r7, sp, #0
    5b40:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	699b      	ldr	r3, [r3, #24]
    5b46:	f023 0202 	bic.w	r2, r3, #2
    5b4a:	687b      	ldr	r3, [r7, #4]
    5b4c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5b4e:	bf00      	nop
    5b50:	370c      	adds	r7, #12
    5b52:	46bd      	mov	sp, r7
    5b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b58:	4770      	bx	lr

00005b5a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    5b5a:	b480      	push	{r7}
    5b5c:	b083      	sub	sp, #12
    5b5e:	af00      	add	r7, sp, #0
    5b60:	6078      	str	r0, [r7, #4]
    5b62:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    5b64:	687b      	ldr	r3, [r7, #4]
    5b66:	699a      	ldr	r2, [r3, #24]
    5b68:	683b      	ldr	r3, [r7, #0]
    5b6a:	431a      	orrs	r2, r3
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5b70:	bf00      	nop
    5b72:	370c      	adds	r7, #12
    5b74:	46bd      	mov	sp, r7
    5b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b7a:	4770      	bx	lr

00005b7c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    5b7c:	b480      	push	{r7}
    5b7e:	b083      	sub	sp, #12
    5b80:	af00      	add	r7, sp, #0
    5b82:	6078      	str	r0, [r7, #4]
    5b84:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    5b86:	687b      	ldr	r3, [r7, #4]
    5b88:	683a      	ldr	r2, [r7, #0]
    5b8a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5b8c:	bf00      	nop
    5b8e:	370c      	adds	r7, #12
    5b90:	46bd      	mov	sp, r7
    5b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b96:	4770      	bx	lr

00005b98 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    5b98:	b480      	push	{r7}
    5b9a:	b083      	sub	sp, #12
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
    5ba0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    5ba2:	687b      	ldr	r3, [r7, #4]
    5ba4:	683a      	ldr	r2, [r7, #0]
    5ba6:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    5ba8:	bf00      	nop
    5baa:	370c      	adds	r7, #12
    5bac:	46bd      	mov	sp, r7
    5bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb2:	4770      	bx	lr

00005bb4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    5bb4:	b480      	push	{r7}
    5bb6:	b083      	sub	sp, #12
    5bb8:	af00      	add	r7, sp, #0
    5bba:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    5bc0:	4618      	mov	r0, r3
    5bc2:	370c      	adds	r7, #12
    5bc4:	46bd      	mov	sp, r7
    5bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bca:	4770      	bx	lr

00005bcc <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    5bcc:	b480      	push	{r7}
    5bce:	b083      	sub	sp, #12
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	6078      	str	r0, [r7, #4]
    5bd4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    5bd6:	687b      	ldr	r3, [r7, #4]
    5bd8:	683a      	ldr	r2, [r7, #0]
    5bda:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    5bdc:	bf00      	nop
    5bde:	370c      	adds	r7, #12
    5be0:	46bd      	mov	sp, r7
    5be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5be6:	4770      	bx	lr

00005be8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    5be8:	b480      	push	{r7}
    5bea:	b083      	sub	sp, #12
    5bec:	af00      	add	r7, sp, #0
    5bee:	6078      	str	r0, [r7, #4]
    5bf0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    5bf2:	687b      	ldr	r3, [r7, #4]
    5bf4:	683a      	ldr	r2, [r7, #0]
    5bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    5bfa:	bf00      	nop
    5bfc:	370c      	adds	r7, #12
    5bfe:	46bd      	mov	sp, r7
    5c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c04:	4770      	bx	lr

00005c06 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    5c06:	b480      	push	{r7}
    5c08:	b083      	sub	sp, #12
    5c0a:	af00      	add	r7, sp, #0
    5c0c:	6078      	str	r0, [r7, #4]
    5c0e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	683a      	ldr	r2, [r7, #0]
    5c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    5c18:	bf00      	nop
    5c1a:	370c      	adds	r7, #12
    5c1c:	46bd      	mov	sp, r7
    5c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c22:	4770      	bx	lr

00005c24 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    5c24:	b480      	push	{r7}
    5c26:	b083      	sub	sp, #12
    5c28:	af00      	add	r7, sp, #0
    5c2a:	6078      	str	r0, [r7, #4]
    5c2c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	683a      	ldr	r2, [r7, #0]
    5c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    5c36:	bf00      	nop
    5c38:	370c      	adds	r7, #12
    5c3a:	46bd      	mov	sp, r7
    5c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c40:	4770      	bx	lr

00005c42 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    5c42:	b480      	push	{r7}
    5c44:	b083      	sub	sp, #12
    5c46:	af00      	add	r7, sp, #0
    5c48:	6078      	str	r0, [r7, #4]
    5c4a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	683a      	ldr	r2, [r7, #0]
    5c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    5c54:	bf00      	nop
    5c56:	370c      	adds	r7, #12
    5c58:	46bd      	mov	sp, r7
    5c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c5e:	4770      	bx	lr

00005c60 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    5c60:	b480      	push	{r7}
    5c62:	b083      	sub	sp, #12
    5c64:	af00      	add	r7, sp, #0
    5c66:	6078      	str	r0, [r7, #4]
    5c68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	683a      	ldr	r2, [r7, #0]
    5c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5c72:	bf00      	nop
    5c74:	370c      	adds	r7, #12
    5c76:	46bd      	mov	sp, r7
    5c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c7c:	4770      	bx	lr

00005c7e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    5c7e:	b480      	push	{r7}
    5c80:	b083      	sub	sp, #12
    5c82:	af00      	add	r7, sp, #0
    5c84:	6078      	str	r0, [r7, #4]
    5c86:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	683a      	ldr	r2, [r7, #0]
    5c8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    5c90:	bf00      	nop
    5c92:	370c      	adds	r7, #12
    5c94:	46bd      	mov	sp, r7
    5c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c9a:	4770      	bx	lr

00005c9c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    5c9c:	b480      	push	{r7}
    5c9e:	b083      	sub	sp, #12
    5ca0:	af00      	add	r7, sp, #0
    5ca2:	6078      	str	r0, [r7, #4]
    5ca4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    5ca6:	687b      	ldr	r3, [r7, #4]
    5ca8:	683a      	ldr	r2, [r7, #0]
    5caa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5cae:	bf00      	nop
    5cb0:	370c      	adds	r7, #12
    5cb2:	46bd      	mov	sp, r7
    5cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb8:	4770      	bx	lr

00005cba <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    5cba:	b480      	push	{r7}
    5cbc:	b083      	sub	sp, #12
    5cbe:	af00      	add	r7, sp, #0
    5cc0:	6078      	str	r0, [r7, #4]
    5cc2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    5cc4:	687b      	ldr	r3, [r7, #4]
    5cc6:	683a      	ldr	r2, [r7, #0]
    5cc8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5ccc:	bf00      	nop
    5cce:	370c      	adds	r7, #12
    5cd0:	46bd      	mov	sp, r7
    5cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cd6:	4770      	bx	lr

00005cd8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    5cd8:	b480      	push	{r7}
    5cda:	b083      	sub	sp, #12
    5cdc:	af00      	add	r7, sp, #0
    5cde:	6078      	str	r0, [r7, #4]
    5ce0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	683a      	ldr	r2, [r7, #0]
    5ce6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5cea:	bf00      	nop
    5cec:	370c      	adds	r7, #12
    5cee:	46bd      	mov	sp, r7
    5cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf4:	4770      	bx	lr
	...

00005cf8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    5cf8:	b580      	push	{r7, lr}
    5cfa:	b082      	sub	sp, #8
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	6078      	str	r0, [r7, #4]
    5d00:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	683a      	ldr	r2, [r7, #0]
    5d06:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	4618      	mov	r0, r3
    5d0e:	4b53      	ldr	r3, [pc, #332]	; (5e5c <_can_async_init+0x164>)
    5d10:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    5d12:	bf00      	nop
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	681b      	ldr	r3, [r3, #0]
    5d18:	4618      	mov	r0, r3
    5d1a:	4b51      	ldr	r3, [pc, #324]	; (5e60 <_can_async_init+0x168>)
    5d1c:	4798      	blx	r3
    5d1e:	4603      	mov	r3, r0
    5d20:	f083 0301 	eor.w	r3, r3, #1
    5d24:	b2db      	uxtb	r3, r3
    5d26:	2b00      	cmp	r3, #0
    5d28:	d1f4      	bne.n	5d14 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    5d2a:	687b      	ldr	r3, [r7, #4]
    5d2c:	681b      	ldr	r3, [r3, #0]
    5d2e:	4618      	mov	r0, r3
    5d30:	4b4c      	ldr	r3, [pc, #304]	; (5e64 <_can_async_init+0x16c>)
    5d32:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    5d34:	683b      	ldr	r3, [r7, #0]
    5d36:	4a4c      	ldr	r2, [pc, #304]	; (5e68 <_can_async_init+0x170>)
    5d38:	4293      	cmp	r3, r2
    5d3a:	d177      	bne.n	5e2c <_can_async_init+0x134>
		_can1_dev    = dev;
    5d3c:	4a4b      	ldr	r2, [pc, #300]	; (5e6c <_can_async_init+0x174>)
    5d3e:	687b      	ldr	r3, [r7, #4]
    5d40:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	4a4a      	ldr	r2, [pc, #296]	; (5e70 <_can_async_init+0x178>)
    5d46:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	681b      	ldr	r3, [r3, #0]
    5d4c:	2100      	movs	r1, #0
    5d4e:	4618      	mov	r0, r3
    5d50:	4b48      	ldr	r3, [pc, #288]	; (5e74 <_can_async_init+0x17c>)
    5d52:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	681b      	ldr	r3, [r3, #0]
    5d58:	2100      	movs	r1, #0
    5d5a:	4618      	mov	r0, r3
    5d5c:	4b46      	ldr	r3, [pc, #280]	; (5e78 <_can_async_init+0x180>)
    5d5e:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    5d60:	687b      	ldr	r3, [r7, #4]
    5d62:	681b      	ldr	r3, [r3, #0]
    5d64:	4945      	ldr	r1, [pc, #276]	; (5e7c <_can_async_init+0x184>)
    5d66:	4618      	mov	r0, r3
    5d68:	4b45      	ldr	r3, [pc, #276]	; (5e80 <_can_async_init+0x188>)
    5d6a:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    5d6c:	687b      	ldr	r3, [r7, #4]
    5d6e:	681b      	ldr	r3, [r3, #0]
    5d70:	f640 2133 	movw	r1, #2611	; 0xa33
    5d74:	4618      	mov	r0, r3
    5d76:	4b43      	ldr	r3, [pc, #268]	; (5e84 <_can_async_init+0x18c>)
    5d78:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	681a      	ldr	r2, [r3, #0]
    5d7e:	4b42      	ldr	r3, [pc, #264]	; (5e88 <_can_async_init+0x190>)
    5d80:	b29b      	uxth	r3, r3
    5d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5d86:	4619      	mov	r1, r3
    5d88:	4610      	mov	r0, r2
    5d8a:	4b40      	ldr	r3, [pc, #256]	; (5e8c <_can_async_init+0x194>)
    5d8c:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    5d8e:	687b      	ldr	r3, [r7, #4]
    5d90:	681b      	ldr	r3, [r3, #0]
    5d92:	2100      	movs	r1, #0
    5d94:	4618      	mov	r0, r3
    5d96:	4b3e      	ldr	r3, [pc, #248]	; (5e90 <_can_async_init+0x198>)
    5d98:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	681b      	ldr	r3, [r3, #0]
    5d9e:	2100      	movs	r1, #0
    5da0:	4618      	mov	r0, r3
    5da2:	4b3c      	ldr	r3, [pc, #240]	; (5e94 <_can_async_init+0x19c>)
    5da4:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    5da6:	687b      	ldr	r3, [r7, #4]
    5da8:	681a      	ldr	r2, [r3, #0]
    5daa:	4b3b      	ldr	r3, [pc, #236]	; (5e98 <_can_async_init+0x1a0>)
    5dac:	b29b      	uxth	r3, r3
    5dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    5db2:	4619      	mov	r1, r3
    5db4:	4610      	mov	r0, r2
    5db6:	4b39      	ldr	r3, [pc, #228]	; (5e9c <_can_async_init+0x1a4>)
    5db8:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	681a      	ldr	r2, [r3, #0]
    5dbe:	4b38      	ldr	r3, [pc, #224]	; (5ea0 <_can_async_init+0x1a8>)
    5dc0:	b29b      	uxth	r3, r3
    5dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5dc6:	4619      	mov	r1, r3
    5dc8:	4610      	mov	r0, r2
    5dca:	4b36      	ldr	r3, [pc, #216]	; (5ea4 <_can_async_init+0x1ac>)
    5dcc:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	681b      	ldr	r3, [r3, #0]
    5dd2:	2128      	movs	r1, #40	; 0x28
    5dd4:	4618      	mov	r0, r3
    5dd6:	4b34      	ldr	r3, [pc, #208]	; (5ea8 <_can_async_init+0x1b0>)
    5dd8:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    5dda:	687b      	ldr	r3, [r7, #4]
    5ddc:	681a      	ldr	r2, [r3, #0]
    5dde:	4b33      	ldr	r3, [pc, #204]	; (5eac <_can_async_init+0x1b4>)
    5de0:	b29b      	uxth	r3, r3
    5de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5de6:	4619      	mov	r1, r3
    5de8:	4610      	mov	r0, r2
    5dea:	4b31      	ldr	r3, [pc, #196]	; (5eb0 <_can_async_init+0x1b8>)
    5dec:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    5dee:	687b      	ldr	r3, [r7, #4]
    5df0:	681a      	ldr	r2, [r3, #0]
    5df2:	4b30      	ldr	r3, [pc, #192]	; (5eb4 <_can_async_init+0x1bc>)
    5df4:	b29b      	uxth	r3, r3
    5df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5dfa:	4619      	mov	r1, r3
    5dfc:	4610      	mov	r0, r2
    5dfe:	4b2e      	ldr	r3, [pc, #184]	; (5eb8 <_can_async_init+0x1c0>)
    5e00:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	681b      	ldr	r3, [r3, #0]
    5e06:	2100      	movs	r1, #0
    5e08:	4618      	mov	r0, r3
    5e0a:	4b2c      	ldr	r3, [pc, #176]	; (5ebc <_can_async_init+0x1c4>)
    5e0c:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    5e0e:	204f      	movs	r0, #79	; 0x4f
    5e10:	4b2b      	ldr	r3, [pc, #172]	; (5ec0 <_can_async_init+0x1c8>)
    5e12:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    5e14:	204f      	movs	r0, #79	; 0x4f
    5e16:	4b2b      	ldr	r3, [pc, #172]	; (5ec4 <_can_async_init+0x1cc>)
    5e18:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    5e1a:	204f      	movs	r0, #79	; 0x4f
    5e1c:	4b2a      	ldr	r3, [pc, #168]	; (5ec8 <_can_async_init+0x1d0>)
    5e1e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	681b      	ldr	r3, [r3, #0]
    5e24:	2101      	movs	r1, #1
    5e26:	4618      	mov	r0, r3
    5e28:	4b28      	ldr	r3, [pc, #160]	; (5ecc <_can_async_init+0x1d4>)
    5e2a:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	681b      	ldr	r3, [r3, #0]
    5e30:	4618      	mov	r0, r3
    5e32:	4b27      	ldr	r3, [pc, #156]	; (5ed0 <_can_async_init+0x1d8>)
    5e34:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    5e36:	687b      	ldr	r3, [r7, #4]
    5e38:	681b      	ldr	r3, [r3, #0]
    5e3a:	4618      	mov	r0, r3
    5e3c:	4b25      	ldr	r3, [pc, #148]	; (5ed4 <_can_async_init+0x1dc>)
    5e3e:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    5e40:	bf00      	nop
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	681b      	ldr	r3, [r3, #0]
    5e46:	4618      	mov	r0, r3
    5e48:	4b05      	ldr	r3, [pc, #20]	; (5e60 <_can_async_init+0x168>)
    5e4a:	4798      	blx	r3
    5e4c:	4603      	mov	r3, r0
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d1f7      	bne.n	5e42 <_can_async_init+0x14a>
	};

	return ERR_NONE;
    5e52:	2300      	movs	r3, #0
}
    5e54:	4618      	mov	r0, r3
    5e56:	3708      	adds	r7, #8
    5e58:	46bd      	mov	sp, r7
    5e5a:	bd80      	pop	{r7, pc}
    5e5c:	00005aad 	.word	0x00005aad
    5e60:	00005acd 	.word	0x00005acd
    5e64:	00005b1b 	.word	0x00005b1b
    5e68:	42000400 	.word	0x42000400
    5e6c:	20001cfc 	.word	0x20001cfc
    5e70:	20000004 	.word	0x20000004
    5e74:	00005b5b 	.word	0x00005b5b
    5e78:	00005a75 	.word	0x00005a75
    5e7c:	06020a07 	.word	0x06020a07
    5e80:	00005b7d 	.word	0x00005b7d
    5e84:	00005a91 	.word	0x00005a91
    5e88:	200023ac 	.word	0x200023ac
    5e8c:	00005c61 	.word	0x00005c61
    5e90:	00005c7f 	.word	0x00005c7f
    5e94:	00005cbb 	.word	0x00005cbb
    5e98:	2000238c 	.word	0x2000238c
    5e9c:	00005c9d 	.word	0x00005c9d
    5ea0:	20001cd4 	.word	0x20001cd4
    5ea4:	00005cd9 	.word	0x00005cd9
    5ea8:	00005be9 	.word	0x00005be9
    5eac:	20001ce4 	.word	0x20001ce4
    5eb0:	00005c07 	.word	0x00005c07
    5eb4:	20001cec 	.word	0x20001cec
    5eb8:	00005c25 	.word	0x00005c25
    5ebc:	00005c43 	.word	0x00005c43
    5ec0:	000059cd 	.word	0x000059cd
    5ec4:	00005a11 	.word	0x00005a11
    5ec8:	00005991 	.word	0x00005991
    5ecc:	00005bcd 	.word	0x00005bcd
    5ed0:	00005b3b 	.word	0x00005b3b
    5ed4:	00005afb 	.word	0x00005afb

00005ed8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    5ed8:	b590      	push	{r4, r7, lr}
    5eda:	b083      	sub	sp, #12
    5edc:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    5ede:	4b2c      	ldr	r3, [pc, #176]	; (5f90 <CAN1_Handler+0xb8>)
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	681b      	ldr	r3, [r3, #0]
    5ee8:	4618      	mov	r0, r3
    5eea:	4b2a      	ldr	r3, [pc, #168]	; (5f94 <CAN1_Handler+0xbc>)
    5eec:	4798      	blx	r3
    5eee:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	f003 0301 	and.w	r3, r3, #1
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d003      	beq.n	5f02 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	689b      	ldr	r3, [r3, #8]
    5efe:	6878      	ldr	r0, [r7, #4]
    5f00:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    5f02:	683b      	ldr	r3, [r7, #0]
    5f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d003      	beq.n	5f14 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5f0c:	687b      	ldr	r3, [r7, #4]
    5f0e:	685b      	ldr	r3, [r3, #4]
    5f10:	6878      	ldr	r0, [r7, #4]
    5f12:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    5f14:	683b      	ldr	r3, [r7, #0]
    5f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d004      	beq.n	5f28 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    5f1e:	687b      	ldr	r3, [r7, #4]
    5f20:	68db      	ldr	r3, [r3, #12]
    5f22:	2103      	movs	r1, #3
    5f24:	6878      	ldr	r0, [r7, #4]
    5f26:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    5f28:	683b      	ldr	r3, [r7, #0]
    5f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d004      	beq.n	5f3c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    5f32:	687b      	ldr	r3, [r7, #4]
    5f34:	68db      	ldr	r3, [r3, #12]
    5f36:	2100      	movs	r1, #0
    5f38:	6878      	ldr	r0, [r7, #4]
    5f3a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    5f3c:	683b      	ldr	r3, [r7, #0]
    5f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    5f42:	2b00      	cmp	r3, #0
    5f44:	d00f      	beq.n	5f66 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    5f46:	687b      	ldr	r3, [r7, #4]
    5f48:	68dc      	ldr	r4, [r3, #12]
    5f4a:	687b      	ldr	r3, [r7, #4]
    5f4c:	681b      	ldr	r3, [r3, #0]
    5f4e:	4618      	mov	r0, r3
    5f50:	4b11      	ldr	r3, [pc, #68]	; (5f98 <CAN1_Handler+0xc0>)
    5f52:	4798      	blx	r3
    5f54:	4603      	mov	r3, r0
    5f56:	2b00      	cmp	r3, #0
    5f58:	d001      	beq.n	5f5e <CAN1_Handler+0x86>
    5f5a:	2302      	movs	r3, #2
    5f5c:	e000      	b.n	5f60 <CAN1_Handler+0x88>
    5f5e:	2301      	movs	r3, #1
    5f60:	4619      	mov	r1, r3
    5f62:	6878      	ldr	r0, [r7, #4]
    5f64:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    5f66:	683b      	ldr	r3, [r7, #0]
    5f68:	f003 0308 	and.w	r3, r3, #8
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	d004      	beq.n	5f7a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	68db      	ldr	r3, [r3, #12]
    5f74:	2104      	movs	r1, #4
    5f76:	6878      	ldr	r0, [r7, #4]
    5f78:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    5f7a:	687b      	ldr	r3, [r7, #4]
    5f7c:	681b      	ldr	r3, [r3, #0]
    5f7e:	6839      	ldr	r1, [r7, #0]
    5f80:	4618      	mov	r0, r3
    5f82:	4b06      	ldr	r3, [pc, #24]	; (5f9c <CAN1_Handler+0xc4>)
    5f84:	4798      	blx	r3
}
    5f86:	bf00      	nop
    5f88:	370c      	adds	r7, #12
    5f8a:	46bd      	mov	sp, r7
    5f8c:	bd90      	pop	{r4, r7, pc}
    5f8e:	bf00      	nop
    5f90:	20001cfc 	.word	0x20001cfc
    5f94:	00005bb5 	.word	0x00005bb5
    5f98:	00005a4d 	.word	0x00005a4d
    5f9c:	00005b99 	.word	0x00005b99

00005fa0 <__NVIC_SetPendingIRQ>:
{
    5fa0:	b480      	push	{r7}
    5fa2:	b083      	sub	sp, #12
    5fa4:	af00      	add	r7, sp, #0
    5fa6:	4603      	mov	r3, r0
    5fa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	db0c      	blt.n	5fcc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fb2:	4909      	ldr	r1, [pc, #36]	; (5fd8 <__NVIC_SetPendingIRQ+0x38>)
    5fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fb8:	095b      	lsrs	r3, r3, #5
    5fba:	88fa      	ldrh	r2, [r7, #6]
    5fbc:	f002 021f 	and.w	r2, r2, #31
    5fc0:	2001      	movs	r0, #1
    5fc2:	fa00 f202 	lsl.w	r2, r0, r2
    5fc6:	3340      	adds	r3, #64	; 0x40
    5fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5fcc:	bf00      	nop
    5fce:	370c      	adds	r7, #12
    5fd0:	46bd      	mov	sp, r7
    5fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fd6:	4770      	bx	lr
    5fd8:	e000e100 	.word	0xe000e100

00005fdc <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5fdc:	b580      	push	{r7, lr}
    5fde:	b082      	sub	sp, #8
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	4603      	mov	r3, r0
    5fe4:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5fe6:	79fb      	ldrb	r3, [r7, #7]
    5fe8:	b21b      	sxth	r3, r3
    5fea:	4618      	mov	r0, r3
    5fec:	4b02      	ldr	r3, [pc, #8]	; (5ff8 <_irq_set+0x1c>)
    5fee:	4798      	blx	r3
}
    5ff0:	bf00      	nop
    5ff2:	3708      	adds	r7, #8
    5ff4:	46bd      	mov	sp, r7
    5ff6:	bd80      	pop	{r7, pc}
    5ff8:	00005fa1 	.word	0x00005fa1

00005ffc <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5ffc:	b480      	push	{r7}
    5ffe:	b083      	sub	sp, #12
    6000:	af00      	add	r7, sp, #0
    6002:	4603      	mov	r3, r0
    6004:	6039      	str	r1, [r7, #0]
    6006:	80fb      	strh	r3, [r7, #6]
    6008:	4613      	mov	r3, r2
    600a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    600c:	797b      	ldrb	r3, [r7, #5]
    600e:	3b04      	subs	r3, #4
    6010:	2b05      	cmp	r3, #5
    6012:	d86b      	bhi.n	60ec <_get_cycles_for_us_internal+0xf0>
    6014:	a201      	add	r2, pc, #4	; (adr r2, 601c <_get_cycles_for_us_internal+0x20>)
    6016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    601a:	bf00      	nop
    601c:	000060cb 	.word	0x000060cb
    6020:	000060ab 	.word	0x000060ab
    6024:	0000608d 	.word	0x0000608d
    6028:	0000606f 	.word	0x0000606f
    602c:	00006051 	.word	0x00006051
    6030:	00006035 	.word	0x00006035
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    6034:	88fb      	ldrh	r3, [r7, #6]
    6036:	683a      	ldr	r2, [r7, #0]
    6038:	4935      	ldr	r1, [pc, #212]	; (6110 <_get_cycles_for_us_internal+0x114>)
    603a:	fba1 1202 	umull	r1, r2, r1, r2
    603e:	0c92      	lsrs	r2, r2, #18
    6040:	fb02 f303 	mul.w	r3, r2, r3
    6044:	3302      	adds	r3, #2
    6046:	4a33      	ldr	r2, [pc, #204]	; (6114 <_get_cycles_for_us_internal+0x118>)
    6048:	fba2 2303 	umull	r2, r3, r2, r3
    604c:	085b      	lsrs	r3, r3, #1
    604e:	e059      	b.n	6104 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    6050:	88fb      	ldrh	r3, [r7, #6]
    6052:	683a      	ldr	r2, [r7, #0]
    6054:	0952      	lsrs	r2, r2, #5
    6056:	4930      	ldr	r1, [pc, #192]	; (6118 <_get_cycles_for_us_internal+0x11c>)
    6058:	fba1 1202 	umull	r1, r2, r1, r2
    605c:	09d2      	lsrs	r2, r2, #7
    605e:	fb02 f303 	mul.w	r3, r2, r3
    6062:	331d      	adds	r3, #29
    6064:	4a2d      	ldr	r2, [pc, #180]	; (611c <_get_cycles_for_us_internal+0x120>)
    6066:	fba2 2303 	umull	r2, r3, r2, r3
    606a:	091b      	lsrs	r3, r3, #4
    606c:	e04a      	b.n	6104 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    606e:	88fb      	ldrh	r3, [r7, #6]
    6070:	683a      	ldr	r2, [r7, #0]
    6072:	492b      	ldr	r1, [pc, #172]	; (6120 <_get_cycles_for_us_internal+0x124>)
    6074:	fba1 1202 	umull	r1, r2, r1, r2
    6078:	0b52      	lsrs	r2, r2, #13
    607a:	fb02 f303 	mul.w	r3, r2, r3
    607e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6082:	4a28      	ldr	r2, [pc, #160]	; (6124 <_get_cycles_for_us_internal+0x128>)
    6084:	fba2 2303 	umull	r2, r3, r2, r3
    6088:	095b      	lsrs	r3, r3, #5
    608a:	e03b      	b.n	6104 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    608c:	88fb      	ldrh	r3, [r7, #6]
    608e:	683a      	ldr	r2, [r7, #0]
    6090:	4925      	ldr	r1, [pc, #148]	; (6128 <_get_cycles_for_us_internal+0x12c>)
    6092:	fba1 1202 	umull	r1, r2, r1, r2
    6096:	0992      	lsrs	r2, r2, #6
    6098:	fb02 f303 	mul.w	r3, r2, r3
    609c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    60a0:	4a22      	ldr	r2, [pc, #136]	; (612c <_get_cycles_for_us_internal+0x130>)
    60a2:	fba2 2303 	umull	r2, r3, r2, r3
    60a6:	099b      	lsrs	r3, r3, #6
    60a8:	e02c      	b.n	6104 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    60aa:	88fb      	ldrh	r3, [r7, #6]
    60ac:	683a      	ldr	r2, [r7, #0]
    60ae:	4920      	ldr	r1, [pc, #128]	; (6130 <_get_cycles_for_us_internal+0x134>)
    60b0:	fba1 1202 	umull	r1, r2, r1, r2
    60b4:	0952      	lsrs	r2, r2, #5
    60b6:	fb02 f303 	mul.w	r3, r2, r3
    60ba:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    60be:	332f      	adds	r3, #47	; 0x2f
    60c0:	4a1c      	ldr	r2, [pc, #112]	; (6134 <_get_cycles_for_us_internal+0x138>)
    60c2:	fba2 2303 	umull	r2, r3, r2, r3
    60c6:	0b5b      	lsrs	r3, r3, #13
    60c8:	e01c      	b.n	6104 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    60ca:	88fb      	ldrh	r3, [r7, #6]
    60cc:	683a      	ldr	r2, [r7, #0]
    60ce:	491a      	ldr	r1, [pc, #104]	; (6138 <_get_cycles_for_us_internal+0x13c>)
    60d0:	fba1 1202 	umull	r1, r2, r1, r2
    60d4:	08d2      	lsrs	r2, r2, #3
    60d6:	fb02 f303 	mul.w	r3, r2, r3
    60da:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    60de:	f203 33df 	addw	r3, r3, #991	; 0x3df
    60e2:	4a16      	ldr	r2, [pc, #88]	; (613c <_get_cycles_for_us_internal+0x140>)
    60e4:	fba2 2303 	umull	r2, r3, r2, r3
    60e8:	0c5b      	lsrs	r3, r3, #17
    60ea:	e00b      	b.n	6104 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    60ec:	88fb      	ldrh	r3, [r7, #6]
    60ee:	683a      	ldr	r2, [r7, #0]
    60f0:	fb02 f303 	mul.w	r3, r2, r3
    60f4:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    60f8:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    60fc:	4a10      	ldr	r2, [pc, #64]	; (6140 <_get_cycles_for_us_internal+0x144>)
    60fe:	fba2 2303 	umull	r2, r3, r2, r3
    6102:	0c9b      	lsrs	r3, r3, #18
	}
}
    6104:	4618      	mov	r0, r3
    6106:	370c      	adds	r7, #12
    6108:	46bd      	mov	sp, r7
    610a:	f85d 7b04 	ldr.w	r7, [sp], #4
    610e:	4770      	bx	lr
    6110:	431bde83 	.word	0x431bde83
    6114:	aaaaaaab 	.word	0xaaaaaaab
    6118:	0a7c5ac5 	.word	0x0a7c5ac5
    611c:	88888889 	.word	0x88888889
    6120:	d1b71759 	.word	0xd1b71759
    6124:	1b4e81b5 	.word	0x1b4e81b5
    6128:	10624dd3 	.word	0x10624dd3
    612c:	057619f1 	.word	0x057619f1
    6130:	51eb851f 	.word	0x51eb851f
    6134:	45e7b273 	.word	0x45e7b273
    6138:	cccccccd 	.word	0xcccccccd
    613c:	6fd91d85 	.word	0x6fd91d85
    6140:	165e9f81 	.word	0x165e9f81

00006144 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    6144:	b580      	push	{r7, lr}
    6146:	b082      	sub	sp, #8
    6148:	af00      	add	r7, sp, #0
    614a:	4603      	mov	r3, r0
    614c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    614e:	88fb      	ldrh	r3, [r7, #6]
    6150:	2209      	movs	r2, #9
    6152:	4904      	ldr	r1, [pc, #16]	; (6164 <_get_cycles_for_us+0x20>)
    6154:	4618      	mov	r0, r3
    6156:	4b04      	ldr	r3, [pc, #16]	; (6168 <_get_cycles_for_us+0x24>)
    6158:	4798      	blx	r3
    615a:	4603      	mov	r3, r0
}
    615c:	4618      	mov	r0, r3
    615e:	3708      	adds	r7, #8
    6160:	46bd      	mov	sp, r7
    6162:	bd80      	pop	{r7, pc}
    6164:	07270e00 	.word	0x07270e00
    6168:	00005ffd 	.word	0x00005ffd

0000616c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    616c:	b480      	push	{r7}
    616e:	b083      	sub	sp, #12
    6170:	af00      	add	r7, sp, #0
    6172:	4603      	mov	r3, r0
    6174:	6039      	str	r1, [r7, #0]
    6176:	80fb      	strh	r3, [r7, #6]
    6178:	4613      	mov	r3, r2
    617a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    617c:	797b      	ldrb	r3, [r7, #5]
    617e:	3b04      	subs	r3, #4
    6180:	2b05      	cmp	r3, #5
    6182:	d870      	bhi.n	6266 <_get_cycles_for_ms_internal+0xfa>
    6184:	a201      	add	r2, pc, #4	; (adr r2, 618c <_get_cycles_for_ms_internal+0x20>)
    6186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    618a:	bf00      	nop
    618c:	00006249 	.word	0x00006249
    6190:	0000622d 	.word	0x0000622d
    6194:	00006211 	.word	0x00006211
    6198:	000061ed 	.word	0x000061ed
    619c:	000061c9 	.word	0x000061c9
    61a0:	000061a5 	.word	0x000061a5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    61a4:	88fb      	ldrh	r3, [r7, #6]
    61a6:	683a      	ldr	r2, [r7, #0]
    61a8:	4937      	ldr	r1, [pc, #220]	; (6288 <_get_cycles_for_ms_internal+0x11c>)
    61aa:	fba1 1202 	umull	r1, r2, r1, r2
    61ae:	0c92      	lsrs	r2, r2, #18
    61b0:	fb02 f303 	mul.w	r3, r2, r3
    61b4:	3302      	adds	r3, #2
    61b6:	4a35      	ldr	r2, [pc, #212]	; (628c <_get_cycles_for_ms_internal+0x120>)
    61b8:	fba2 2303 	umull	r2, r3, r2, r3
    61bc:	085b      	lsrs	r3, r3, #1
    61be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    61c2:	fb02 f303 	mul.w	r3, r2, r3
    61c6:	e058      	b.n	627a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    61c8:	88fb      	ldrh	r3, [r7, #6]
    61ca:	683a      	ldr	r2, [r7, #0]
    61cc:	0952      	lsrs	r2, r2, #5
    61ce:	4930      	ldr	r1, [pc, #192]	; (6290 <_get_cycles_for_ms_internal+0x124>)
    61d0:	fba1 1202 	umull	r1, r2, r1, r2
    61d4:	09d2      	lsrs	r2, r2, #7
    61d6:	fb02 f303 	mul.w	r3, r2, r3
    61da:	3302      	adds	r3, #2
    61dc:	4a2b      	ldr	r2, [pc, #172]	; (628c <_get_cycles_for_ms_internal+0x120>)
    61de:	fba2 2303 	umull	r2, r3, r2, r3
    61e2:	085b      	lsrs	r3, r3, #1
    61e4:	2264      	movs	r2, #100	; 0x64
    61e6:	fb02 f303 	mul.w	r3, r2, r3
    61ea:	e046      	b.n	627a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    61ec:	88fb      	ldrh	r3, [r7, #6]
    61ee:	683a      	ldr	r2, [r7, #0]
    61f0:	4928      	ldr	r1, [pc, #160]	; (6294 <_get_cycles_for_ms_internal+0x128>)
    61f2:	fba1 1202 	umull	r1, r2, r1, r2
    61f6:	0b52      	lsrs	r2, r2, #13
    61f8:	fb02 f303 	mul.w	r3, r2, r3
    61fc:	3302      	adds	r3, #2
    61fe:	4a23      	ldr	r2, [pc, #140]	; (628c <_get_cycles_for_ms_internal+0x120>)
    6200:	fba2 2303 	umull	r2, r3, r2, r3
    6204:	085a      	lsrs	r2, r3, #1
    6206:	4613      	mov	r3, r2
    6208:	009b      	lsls	r3, r3, #2
    620a:	4413      	add	r3, r2
    620c:	005b      	lsls	r3, r3, #1
    620e:	e034      	b.n	627a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    6210:	88fb      	ldrh	r3, [r7, #6]
    6212:	683a      	ldr	r2, [r7, #0]
    6214:	4920      	ldr	r1, [pc, #128]	; (6298 <_get_cycles_for_ms_internal+0x12c>)
    6216:	fba1 1202 	umull	r1, r2, r1, r2
    621a:	0992      	lsrs	r2, r2, #6
    621c:	fb02 f303 	mul.w	r3, r2, r3
    6220:	3302      	adds	r3, #2
    6222:	4a1a      	ldr	r2, [pc, #104]	; (628c <_get_cycles_for_ms_internal+0x120>)
    6224:	fba2 2303 	umull	r2, r3, r2, r3
    6228:	085b      	lsrs	r3, r3, #1
    622a:	e026      	b.n	627a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    622c:	88fb      	ldrh	r3, [r7, #6]
    622e:	683a      	ldr	r2, [r7, #0]
    6230:	491a      	ldr	r1, [pc, #104]	; (629c <_get_cycles_for_ms_internal+0x130>)
    6232:	fba1 1202 	umull	r1, r2, r1, r2
    6236:	0952      	lsrs	r2, r2, #5
    6238:	fb02 f303 	mul.w	r3, r2, r3
    623c:	331d      	adds	r3, #29
    623e:	4a18      	ldr	r2, [pc, #96]	; (62a0 <_get_cycles_for_ms_internal+0x134>)
    6240:	fba2 2303 	umull	r2, r3, r2, r3
    6244:	091b      	lsrs	r3, r3, #4
    6246:	e018      	b.n	627a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    6248:	88fb      	ldrh	r3, [r7, #6]
    624a:	683a      	ldr	r2, [r7, #0]
    624c:	4915      	ldr	r1, [pc, #84]	; (62a4 <_get_cycles_for_ms_internal+0x138>)
    624e:	fba1 1202 	umull	r1, r2, r1, r2
    6252:	08d2      	lsrs	r2, r2, #3
    6254:	fb02 f303 	mul.w	r3, r2, r3
    6258:	f203 132b 	addw	r3, r3, #299	; 0x12b
    625c:	4a12      	ldr	r2, [pc, #72]	; (62a8 <_get_cycles_for_ms_internal+0x13c>)
    625e:	fba2 2303 	umull	r2, r3, r2, r3
    6262:	095b      	lsrs	r3, r3, #5
    6264:	e009      	b.n	627a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    6266:	88fb      	ldrh	r3, [r7, #6]
    6268:	683a      	ldr	r2, [r7, #0]
    626a:	fb02 f303 	mul.w	r3, r2, r3
    626e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6272:	4a0e      	ldr	r2, [pc, #56]	; (62ac <_get_cycles_for_ms_internal+0x140>)
    6274:	fba2 2303 	umull	r2, r3, r2, r3
    6278:	099b      	lsrs	r3, r3, #6
	}
}
    627a:	4618      	mov	r0, r3
    627c:	370c      	adds	r7, #12
    627e:	46bd      	mov	sp, r7
    6280:	f85d 7b04 	ldr.w	r7, [sp], #4
    6284:	4770      	bx	lr
    6286:	bf00      	nop
    6288:	431bde83 	.word	0x431bde83
    628c:	aaaaaaab 	.word	0xaaaaaaab
    6290:	0a7c5ac5 	.word	0x0a7c5ac5
    6294:	d1b71759 	.word	0xd1b71759
    6298:	10624dd3 	.word	0x10624dd3
    629c:	51eb851f 	.word	0x51eb851f
    62a0:	88888889 	.word	0x88888889
    62a4:	cccccccd 	.word	0xcccccccd
    62a8:	1b4e81b5 	.word	0x1b4e81b5
    62ac:	057619f1 	.word	0x057619f1

000062b0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    62b0:	b580      	push	{r7, lr}
    62b2:	b082      	sub	sp, #8
    62b4:	af00      	add	r7, sp, #0
    62b6:	4603      	mov	r3, r0
    62b8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    62ba:	88fb      	ldrh	r3, [r7, #6]
    62bc:	2209      	movs	r2, #9
    62be:	4904      	ldr	r1, [pc, #16]	; (62d0 <_get_cycles_for_ms+0x20>)
    62c0:	4618      	mov	r0, r3
    62c2:	4b04      	ldr	r3, [pc, #16]	; (62d4 <_get_cycles_for_ms+0x24>)
    62c4:	4798      	blx	r3
    62c6:	4603      	mov	r3, r0
}
    62c8:	4618      	mov	r0, r3
    62ca:	3708      	adds	r7, #8
    62cc:	46bd      	mov	sp, r7
    62ce:	bd80      	pop	{r7, pc}
    62d0:	07270e00 	.word	0x07270e00
    62d4:	0000616d 	.word	0x0000616d

000062d8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    62d8:	b480      	push	{r7}
    62da:	b083      	sub	sp, #12
    62dc:	af00      	add	r7, sp, #0
    62de:	6078      	str	r0, [r7, #4]
    62e0:	6039      	str	r1, [r7, #0]
    62e2:	bf00      	nop
    62e4:	f3af 8000 	nop.w

000062e8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    62e8:	3901      	subs	r1, #1
    62ea:	d8fd      	bhi.n	62e8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    62ec:	bf00      	nop
    62ee:	370c      	adds	r7, #12
    62f0:	46bd      	mov	sp, r7
    62f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62f6:	4770      	bx	lr

000062f8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    62f8:	b480      	push	{r7}
    62fa:	b083      	sub	sp, #12
    62fc:	af00      	add	r7, sp, #0
    62fe:	6078      	str	r0, [r7, #4]
    6300:	460b      	mov	r3, r1
    6302:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6304:	687b      	ldr	r3, [r7, #4]
    6306:	881b      	ldrh	r3, [r3, #0]
    6308:	b29a      	uxth	r2, r3
    630a:	887b      	ldrh	r3, [r7, #2]
    630c:	021b      	lsls	r3, r3, #8
    630e:	b29b      	uxth	r3, r3
    6310:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6314:	b29b      	uxth	r3, r3
    6316:	4313      	orrs	r3, r2
    6318:	b29a      	uxth	r2, r3
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    631e:	bf00      	nop
    6320:	370c      	adds	r7, #12
    6322:	46bd      	mov	sp, r7
    6324:	f85d 7b04 	ldr.w	r7, [sp], #4
    6328:	4770      	bx	lr

0000632a <hri_port_set_EVCTRL_reg>:
{
    632a:	b480      	push	{r7}
    632c:	b085      	sub	sp, #20
    632e:	af00      	add	r7, sp, #0
    6330:	60f8      	str	r0, [r7, #12]
    6332:	460b      	mov	r3, r1
    6334:	607a      	str	r2, [r7, #4]
    6336:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    6338:	7afb      	ldrb	r3, [r7, #11]
    633a:	7afa      	ldrb	r2, [r7, #11]
    633c:	68f9      	ldr	r1, [r7, #12]
    633e:	01d2      	lsls	r2, r2, #7
    6340:	440a      	add	r2, r1
    6342:	322c      	adds	r2, #44	; 0x2c
    6344:	6811      	ldr	r1, [r2, #0]
    6346:	687a      	ldr	r2, [r7, #4]
    6348:	430a      	orrs	r2, r1
    634a:	68f9      	ldr	r1, [r7, #12]
    634c:	01db      	lsls	r3, r3, #7
    634e:	440b      	add	r3, r1
    6350:	332c      	adds	r3, #44	; 0x2c
    6352:	601a      	str	r2, [r3, #0]
}
    6354:	bf00      	nop
    6356:	3714      	adds	r7, #20
    6358:	46bd      	mov	sp, r7
    635a:	f85d 7b04 	ldr.w	r7, [sp], #4
    635e:	4770      	bx	lr

00006360 <_port_event_init>:

static inline void _port_event_init()
{
    6360:	b580      	push	{r7, lr}
    6362:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    6364:	2200      	movs	r2, #0
    6366:	2100      	movs	r1, #0
    6368:	4809      	ldr	r0, [pc, #36]	; (6390 <_port_event_init+0x30>)
    636a:	4b0a      	ldr	r3, [pc, #40]	; (6394 <_port_event_init+0x34>)
    636c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    636e:	2200      	movs	r2, #0
    6370:	2101      	movs	r1, #1
    6372:	4807      	ldr	r0, [pc, #28]	; (6390 <_port_event_init+0x30>)
    6374:	4b07      	ldr	r3, [pc, #28]	; (6394 <_port_event_init+0x34>)
    6376:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    6378:	22ef      	movs	r2, #239	; 0xef
    637a:	2102      	movs	r1, #2
    637c:	4804      	ldr	r0, [pc, #16]	; (6390 <_port_event_init+0x30>)
    637e:	4b05      	ldr	r3, [pc, #20]	; (6394 <_port_event_init+0x34>)
    6380:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    6382:	2200      	movs	r2, #0
    6384:	2103      	movs	r1, #3
    6386:	4802      	ldr	r0, [pc, #8]	; (6390 <_port_event_init+0x30>)
    6388:	4b02      	ldr	r3, [pc, #8]	; (6394 <_port_event_init+0x34>)
    638a:	4798      	blx	r3
}
    638c:	bf00      	nop
    638e:	bd80      	pop	{r7, pc}
    6390:	41008000 	.word	0x41008000
    6394:	0000632b 	.word	0x0000632b

00006398 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6398:	b580      	push	{r7, lr}
    639a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    639c:	2104      	movs	r1, #4
    639e:	480b      	ldr	r0, [pc, #44]	; (63cc <_init_chip+0x34>)
    63a0:	4b0b      	ldr	r3, [pc, #44]	; (63d0 <_init_chip+0x38>)
    63a2:	4798      	blx	r3

	_osc32kctrl_init_sources();
    63a4:	4b0b      	ldr	r3, [pc, #44]	; (63d4 <_init_chip+0x3c>)
    63a6:	4798      	blx	r3
	_oscctrl_init_sources();
    63a8:	4b0b      	ldr	r3, [pc, #44]	; (63d8 <_init_chip+0x40>)
    63aa:	4798      	blx	r3
	_mclk_init();
    63ac:	4b0b      	ldr	r3, [pc, #44]	; (63dc <_init_chip+0x44>)
    63ae:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    63b0:	f44f 6084 	mov.w	r0, #1056	; 0x420
    63b4:	4b0a      	ldr	r3, [pc, #40]	; (63e0 <_init_chip+0x48>)
    63b6:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    63b8:	4b0a      	ldr	r3, [pc, #40]	; (63e4 <_init_chip+0x4c>)
    63ba:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    63bc:	f640 30df 	movw	r0, #3039	; 0xbdf
    63c0:	4b07      	ldr	r3, [pc, #28]	; (63e0 <_init_chip+0x48>)
    63c2:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    63c4:	4b08      	ldr	r3, [pc, #32]	; (63e8 <_init_chip+0x50>)
    63c6:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    63c8:	bf00      	nop
    63ca:	bd80      	pop	{r7, pc}
    63cc:	41004000 	.word	0x41004000
    63d0:	000062f9 	.word	0x000062f9
    63d4:	00006cd9 	.word	0x00006cd9
    63d8:	000071a1 	.word	0x000071a1
    63dc:	00006bf9 	.word	0x00006bf9
    63e0:	00006b01 	.word	0x00006b01
    63e4:	000071e1 	.word	0x000071e1
    63e8:	00006361 	.word	0x00006361

000063ec <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    63ec:	b480      	push	{r7}
    63ee:	b083      	sub	sp, #12
    63f0:	af00      	add	r7, sp, #0
    63f2:	6078      	str	r0, [r7, #4]
    63f4:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	683a      	ldr	r2, [r7, #0]
    63fa:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    63fc:	2300      	movs	r3, #0
}
    63fe:	4618      	mov	r0, r3
    6400:	370c      	adds	r7, #12
    6402:	46bd      	mov	sp, r7
    6404:	f85d 7b04 	ldr.w	r7, [sp], #4
    6408:	4770      	bx	lr
	...

0000640c <__NVIC_EnableIRQ>:
{
    640c:	b480      	push	{r7}
    640e:	b083      	sub	sp, #12
    6410:	af00      	add	r7, sp, #0
    6412:	4603      	mov	r3, r0
    6414:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    641a:	2b00      	cmp	r3, #0
    641c:	db0b      	blt.n	6436 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    641e:	4909      	ldr	r1, [pc, #36]	; (6444 <__NVIC_EnableIRQ+0x38>)
    6420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6424:	095b      	lsrs	r3, r3, #5
    6426:	88fa      	ldrh	r2, [r7, #6]
    6428:	f002 021f 	and.w	r2, r2, #31
    642c:	2001      	movs	r0, #1
    642e:	fa00 f202 	lsl.w	r2, r0, r2
    6432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6436:	bf00      	nop
    6438:	370c      	adds	r7, #12
    643a:	46bd      	mov	sp, r7
    643c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6440:	4770      	bx	lr
    6442:	bf00      	nop
    6444:	e000e100 	.word	0xe000e100

00006448 <__NVIC_DisableIRQ>:
{
    6448:	b480      	push	{r7}
    644a:	b083      	sub	sp, #12
    644c:	af00      	add	r7, sp, #0
    644e:	4603      	mov	r3, r0
    6450:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6456:	2b00      	cmp	r3, #0
    6458:	db10      	blt.n	647c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    645a:	490b      	ldr	r1, [pc, #44]	; (6488 <__NVIC_DisableIRQ+0x40>)
    645c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6460:	095b      	lsrs	r3, r3, #5
    6462:	88fa      	ldrh	r2, [r7, #6]
    6464:	f002 021f 	and.w	r2, r2, #31
    6468:	2001      	movs	r0, #1
    646a:	fa00 f202 	lsl.w	r2, r0, r2
    646e:	3320      	adds	r3, #32
    6470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6474:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6478:	f3bf 8f6f 	isb	sy
}
    647c:	bf00      	nop
    647e:	370c      	adds	r7, #12
    6480:	46bd      	mov	sp, r7
    6482:	f85d 7b04 	ldr.w	r7, [sp], #4
    6486:	4770      	bx	lr
    6488:	e000e100 	.word	0xe000e100

0000648c <__NVIC_ClearPendingIRQ>:
{
    648c:	b480      	push	{r7}
    648e:	b083      	sub	sp, #12
    6490:	af00      	add	r7, sp, #0
    6492:	4603      	mov	r3, r0
    6494:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    649a:	2b00      	cmp	r3, #0
    649c:	db0c      	blt.n	64b8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    649e:	4909      	ldr	r1, [pc, #36]	; (64c4 <__NVIC_ClearPendingIRQ+0x38>)
    64a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64a4:	095b      	lsrs	r3, r3, #5
    64a6:	88fa      	ldrh	r2, [r7, #6]
    64a8:	f002 021f 	and.w	r2, r2, #31
    64ac:	2001      	movs	r0, #1
    64ae:	fa00 f202 	lsl.w	r2, r0, r2
    64b2:	3360      	adds	r3, #96	; 0x60
    64b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    64b8:	bf00      	nop
    64ba:	370c      	adds	r7, #12
    64bc:	46bd      	mov	sp, r7
    64be:	f85d 7b04 	ldr.w	r7, [sp], #4
    64c2:	4770      	bx	lr
    64c4:	e000e100 	.word	0xe000e100

000064c8 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    64c8:	b480      	push	{r7}
    64ca:	b083      	sub	sp, #12
    64cc:	af00      	add	r7, sp, #0
    64ce:	6078      	str	r0, [r7, #4]
    64d0:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    64d2:	bf00      	nop
    64d4:	687b      	ldr	r3, [r7, #4]
    64d6:	685a      	ldr	r2, [r3, #4]
    64d8:	683b      	ldr	r3, [r7, #0]
    64da:	4013      	ands	r3, r2
    64dc:	2b00      	cmp	r3, #0
    64de:	d1f9      	bne.n	64d4 <hri_eic_wait_for_sync+0xc>
	};
}
    64e0:	bf00      	nop
    64e2:	370c      	adds	r7, #12
    64e4:	46bd      	mov	sp, r7
    64e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ea:	4770      	bx	lr

000064ec <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    64ec:	b480      	push	{r7}
    64ee:	b083      	sub	sp, #12
    64f0:	af00      	add	r7, sp, #0
    64f2:	6078      	str	r0, [r7, #4]
    64f4:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    64f6:	687b      	ldr	r3, [r7, #4]
    64f8:	685a      	ldr	r2, [r3, #4]
    64fa:	683b      	ldr	r3, [r7, #0]
    64fc:	4013      	ands	r3, r2
    64fe:	2b00      	cmp	r3, #0
    6500:	bf14      	ite	ne
    6502:	2301      	movne	r3, #1
    6504:	2300      	moveq	r3, #0
    6506:	b2db      	uxtb	r3, r3
}
    6508:	4618      	mov	r0, r3
    650a:	370c      	adds	r7, #12
    650c:	46bd      	mov	sp, r7
    650e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6512:	4770      	bx	lr

00006514 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    6514:	b480      	push	{r7}
    6516:	b083      	sub	sp, #12
    6518:	af00      	add	r7, sp, #0
    651a:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    651c:	687b      	ldr	r3, [r7, #4]
    651e:	695b      	ldr	r3, [r3, #20]
}
    6520:	4618      	mov	r0, r3
    6522:	370c      	adds	r7, #12
    6524:	46bd      	mov	sp, r7
    6526:	f85d 7b04 	ldr.w	r7, [sp], #4
    652a:	4770      	bx	lr

0000652c <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    652c:	b480      	push	{r7}
    652e:	b083      	sub	sp, #12
    6530:	af00      	add	r7, sp, #0
    6532:	6078      	str	r0, [r7, #4]
    6534:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	683a      	ldr	r2, [r7, #0]
    653a:	615a      	str	r2, [r3, #20]
}
    653c:	bf00      	nop
    653e:	370c      	adds	r7, #12
    6540:	46bd      	mov	sp, r7
    6542:	f85d 7b04 	ldr.w	r7, [sp], #4
    6546:	4770      	bx	lr

00006548 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6548:	b580      	push	{r7, lr}
    654a:	b082      	sub	sp, #8
    654c:	af00      	add	r7, sp, #0
    654e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    6550:	687b      	ldr	r3, [r7, #4]
    6552:	781b      	ldrb	r3, [r3, #0]
    6554:	b2db      	uxtb	r3, r3
    6556:	f043 0302 	orr.w	r3, r3, #2
    655a:	b2da      	uxtb	r2, r3
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6560:	2103      	movs	r1, #3
    6562:	6878      	ldr	r0, [r7, #4]
    6564:	4b02      	ldr	r3, [pc, #8]	; (6570 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    6566:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6568:	bf00      	nop
    656a:	3708      	adds	r7, #8
    656c:	46bd      	mov	sp, r7
    656e:	bd80      	pop	{r7, pc}
    6570:	000064c9 	.word	0x000064c9

00006574 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6574:	b580      	push	{r7, lr}
    6576:	b082      	sub	sp, #8
    6578:	af00      	add	r7, sp, #0
    657a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    657c:	687b      	ldr	r3, [r7, #4]
    657e:	781b      	ldrb	r3, [r3, #0]
    6580:	b2db      	uxtb	r3, r3
    6582:	f023 0302 	bic.w	r3, r3, #2
    6586:	b2da      	uxtb	r2, r3
    6588:	687b      	ldr	r3, [r7, #4]
    658a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    658c:	2103      	movs	r1, #3
    658e:	6878      	ldr	r0, [r7, #4]
    6590:	4b02      	ldr	r3, [pc, #8]	; (659c <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    6592:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6594:	bf00      	nop
    6596:	3708      	adds	r7, #8
    6598:	46bd      	mov	sp, r7
    659a:	bd80      	pop	{r7, pc}
    659c:	000064c9 	.word	0x000064c9

000065a0 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    65a0:	b580      	push	{r7, lr}
    65a2:	b084      	sub	sp, #16
    65a4:	af00      	add	r7, sp, #0
    65a6:	6078      	str	r0, [r7, #4]
    65a8:	460b      	mov	r3, r1
    65aa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    65ac:	687b      	ldr	r3, [r7, #4]
    65ae:	781b      	ldrb	r3, [r3, #0]
    65b0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    65b2:	7bfb      	ldrb	r3, [r7, #15]
    65b4:	f023 0310 	bic.w	r3, r3, #16
    65b8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    65ba:	78fb      	ldrb	r3, [r7, #3]
    65bc:	011b      	lsls	r3, r3, #4
    65be:	b25a      	sxtb	r2, r3
    65c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65c4:	4313      	orrs	r3, r2
    65c6:	b25b      	sxtb	r3, r3
    65c8:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	7bfa      	ldrb	r2, [r7, #15]
    65ce:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    65d0:	2103      	movs	r1, #3
    65d2:	6878      	ldr	r0, [r7, #4]
    65d4:	4b02      	ldr	r3, [pc, #8]	; (65e0 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    65d6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    65d8:	bf00      	nop
    65da:	3710      	adds	r7, #16
    65dc:	46bd      	mov	sp, r7
    65de:	bd80      	pop	{r7, pc}
    65e0:	000064c9 	.word	0x000064c9

000065e4 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    65e4:	b580      	push	{r7, lr}
    65e6:	b084      	sub	sp, #16
    65e8:	af00      	add	r7, sp, #0
    65ea:	6078      	str	r0, [r7, #4]
    65ec:	460b      	mov	r3, r1
    65ee:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    65f0:	2103      	movs	r1, #3
    65f2:	6878      	ldr	r0, [r7, #4]
    65f4:	4b06      	ldr	r3, [pc, #24]	; (6610 <hri_eic_get_CTRLA_reg+0x2c>)
    65f6:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	781b      	ldrb	r3, [r3, #0]
    65fc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    65fe:	7bfa      	ldrb	r2, [r7, #15]
    6600:	78fb      	ldrb	r3, [r7, #3]
    6602:	4013      	ands	r3, r2
    6604:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6606:	7bfb      	ldrb	r3, [r7, #15]
}
    6608:	4618      	mov	r0, r3
    660a:	3710      	adds	r7, #16
    660c:	46bd      	mov	sp, r7
    660e:	bd80      	pop	{r7, pc}
    6610:	000064c9 	.word	0x000064c9

00006614 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    6614:	b580      	push	{r7, lr}
    6616:	b082      	sub	sp, #8
    6618:	af00      	add	r7, sp, #0
    661a:	6078      	str	r0, [r7, #4]
    661c:	460b      	mov	r3, r1
    661e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	78fa      	ldrb	r2, [r7, #3]
    6624:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6626:	2103      	movs	r1, #3
    6628:	6878      	ldr	r0, [r7, #4]
    662a:	4b03      	ldr	r3, [pc, #12]	; (6638 <hri_eic_write_CTRLA_reg+0x24>)
    662c:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    662e:	bf00      	nop
    6630:	3708      	adds	r7, #8
    6632:	46bd      	mov	sp, r7
    6634:	bd80      	pop	{r7, pc}
    6636:	bf00      	nop
    6638:	000064c9 	.word	0x000064c9

0000663c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    663c:	b480      	push	{r7}
    663e:	b083      	sub	sp, #12
    6640:	af00      	add	r7, sp, #0
    6642:	6078      	str	r0, [r7, #4]
    6644:	460b      	mov	r3, r1
    6646:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	78fa      	ldrb	r2, [r7, #3]
    664c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    664e:	bf00      	nop
    6650:	370c      	adds	r7, #12
    6652:	46bd      	mov	sp, r7
    6654:	f85d 7b04 	ldr.w	r7, [sp], #4
    6658:	4770      	bx	lr

0000665a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    665a:	b480      	push	{r7}
    665c:	b083      	sub	sp, #12
    665e:	af00      	add	r7, sp, #0
    6660:	6078      	str	r0, [r7, #4]
    6662:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	683a      	ldr	r2, [r7, #0]
    6668:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    666a:	bf00      	nop
    666c:	370c      	adds	r7, #12
    666e:	46bd      	mov	sp, r7
    6670:	f85d 7b04 	ldr.w	r7, [sp], #4
    6674:	4770      	bx	lr

00006676 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    6676:	b480      	push	{r7}
    6678:	b083      	sub	sp, #12
    667a:	af00      	add	r7, sp, #0
    667c:	6078      	str	r0, [r7, #4]
    667e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    6680:	687b      	ldr	r3, [r7, #4]
    6682:	683a      	ldr	r2, [r7, #0]
    6684:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6686:	bf00      	nop
    6688:	370c      	adds	r7, #12
    668a:	46bd      	mov	sp, r7
    668c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6690:	4770      	bx	lr

00006692 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    6692:	b480      	push	{r7}
    6694:	b085      	sub	sp, #20
    6696:	af00      	add	r7, sp, #0
    6698:	60f8      	str	r0, [r7, #12]
    669a:	460b      	mov	r3, r1
    669c:	607a      	str	r2, [r7, #4]
    669e:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    66a0:	7afb      	ldrb	r3, [r7, #11]
    66a2:	68fa      	ldr	r2, [r7, #12]
    66a4:	3306      	adds	r3, #6
    66a6:	009b      	lsls	r3, r3, #2
    66a8:	4413      	add	r3, r2
    66aa:	687a      	ldr	r2, [r7, #4]
    66ac:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    66ae:	bf00      	nop
    66b0:	3714      	adds	r7, #20
    66b2:	46bd      	mov	sp, r7
    66b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66b8:	4770      	bx	lr

000066ba <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    66ba:	b480      	push	{r7}
    66bc:	b083      	sub	sp, #12
    66be:	af00      	add	r7, sp, #0
    66c0:	6078      	str	r0, [r7, #4]
    66c2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    66c4:	687b      	ldr	r3, [r7, #4]
    66c6:	683a      	ldr	r2, [r7, #0]
    66c8:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    66ca:	bf00      	nop
    66cc:	370c      	adds	r7, #12
    66ce:	46bd      	mov	sp, r7
    66d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    66d4:	4770      	bx	lr

000066d6 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    66d6:	b480      	push	{r7}
    66d8:	b083      	sub	sp, #12
    66da:	af00      	add	r7, sp, #0
    66dc:	6078      	str	r0, [r7, #4]
    66de:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	683a      	ldr	r2, [r7, #0]
    66e4:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    66e6:	bf00      	nop
    66e8:	370c      	adds	r7, #12
    66ea:	46bd      	mov	sp, r7
    66ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    66f0:	4770      	bx	lr
	...

000066f4 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    66f4:	b580      	push	{r7, lr}
    66f6:	b082      	sub	sp, #8
    66f8:	af00      	add	r7, sp, #0
    66fa:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    66fc:	2101      	movs	r1, #1
    66fe:	4838      	ldr	r0, [pc, #224]	; (67e0 <_ext_irq_init+0xec>)
    6700:	4b38      	ldr	r3, [pc, #224]	; (67e4 <_ext_irq_init+0xf0>)
    6702:	4798      	blx	r3
    6704:	4603      	mov	r3, r0
    6706:	f083 0301 	eor.w	r3, r3, #1
    670a:	b2db      	uxtb	r3, r3
    670c:	2b00      	cmp	r3, #0
    670e:	d011      	beq.n	6734 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    6710:	2102      	movs	r1, #2
    6712:	4833      	ldr	r0, [pc, #204]	; (67e0 <_ext_irq_init+0xec>)
    6714:	4b34      	ldr	r3, [pc, #208]	; (67e8 <_ext_irq_init+0xf4>)
    6716:	4798      	blx	r3
    6718:	4603      	mov	r3, r0
    671a:	2b00      	cmp	r3, #0
    671c:	d006      	beq.n	672c <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    671e:	4830      	ldr	r0, [pc, #192]	; (67e0 <_ext_irq_init+0xec>)
    6720:	4b32      	ldr	r3, [pc, #200]	; (67ec <_ext_irq_init+0xf8>)
    6722:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    6724:	2102      	movs	r1, #2
    6726:	482e      	ldr	r0, [pc, #184]	; (67e0 <_ext_irq_init+0xec>)
    6728:	4b31      	ldr	r3, [pc, #196]	; (67f0 <_ext_irq_init+0xfc>)
    672a:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    672c:	2101      	movs	r1, #1
    672e:	482c      	ldr	r0, [pc, #176]	; (67e0 <_ext_irq_init+0xec>)
    6730:	4b30      	ldr	r3, [pc, #192]	; (67f4 <_ext_irq_init+0x100>)
    6732:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    6734:	2101      	movs	r1, #1
    6736:	482a      	ldr	r0, [pc, #168]	; (67e0 <_ext_irq_init+0xec>)
    6738:	4b2d      	ldr	r3, [pc, #180]	; (67f0 <_ext_irq_init+0xfc>)
    673a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    673c:	2100      	movs	r1, #0
    673e:	4828      	ldr	r0, [pc, #160]	; (67e0 <_ext_irq_init+0xec>)
    6740:	4b2d      	ldr	r3, [pc, #180]	; (67f8 <_ext_irq_init+0x104>)
    6742:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    6744:	2100      	movs	r1, #0
    6746:	4826      	ldr	r0, [pc, #152]	; (67e0 <_ext_irq_init+0xec>)
    6748:	4b2c      	ldr	r3, [pc, #176]	; (67fc <_ext_irq_init+0x108>)
    674a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    674c:	2100      	movs	r1, #0
    674e:	4824      	ldr	r0, [pc, #144]	; (67e0 <_ext_irq_init+0xec>)
    6750:	4b2b      	ldr	r3, [pc, #172]	; (6800 <_ext_irq_init+0x10c>)
    6752:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    6754:	2130      	movs	r1, #48	; 0x30
    6756:	4822      	ldr	r0, [pc, #136]	; (67e0 <_ext_irq_init+0xec>)
    6758:	4b2a      	ldr	r3, [pc, #168]	; (6804 <_ext_irq_init+0x110>)
    675a:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    675c:	2130      	movs	r1, #48	; 0x30
    675e:	4820      	ldr	r0, [pc, #128]	; (67e0 <_ext_irq_init+0xec>)
    6760:	4b29      	ldr	r3, [pc, #164]	; (6808 <_ext_irq_init+0x114>)
    6762:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    6764:	2100      	movs	r1, #0
    6766:	481e      	ldr	r0, [pc, #120]	; (67e0 <_ext_irq_init+0xec>)
    6768:	4b28      	ldr	r3, [pc, #160]	; (680c <_ext_irq_init+0x118>)
    676a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    676c:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    6770:	2100      	movs	r1, #0
    6772:	481b      	ldr	r0, [pc, #108]	; (67e0 <_ext_irq_init+0xec>)
    6774:	4b26      	ldr	r3, [pc, #152]	; (6810 <_ext_irq_init+0x11c>)
    6776:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6778:	2200      	movs	r2, #0
    677a:	2101      	movs	r1, #1
    677c:	4818      	ldr	r0, [pc, #96]	; (67e0 <_ext_irq_init+0xec>)
    677e:	4b24      	ldr	r3, [pc, #144]	; (6810 <_ext_irq_init+0x11c>)
    6780:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    6782:	4817      	ldr	r0, [pc, #92]	; (67e0 <_ext_irq_init+0xec>)
    6784:	4b23      	ldr	r3, [pc, #140]	; (6814 <_ext_irq_init+0x120>)
    6786:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    6788:	2010      	movs	r0, #16
    678a:	4b23      	ldr	r3, [pc, #140]	; (6818 <_ext_irq_init+0x124>)
    678c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    678e:	2010      	movs	r0, #16
    6790:	4b22      	ldr	r3, [pc, #136]	; (681c <_ext_irq_init+0x128>)
    6792:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    6794:	2010      	movs	r0, #16
    6796:	4b22      	ldr	r3, [pc, #136]	; (6820 <_ext_irq_init+0x12c>)
    6798:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    679a:	2011      	movs	r0, #17
    679c:	4b1e      	ldr	r3, [pc, #120]	; (6818 <_ext_irq_init+0x124>)
    679e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    67a0:	2011      	movs	r0, #17
    67a2:	4b1e      	ldr	r3, [pc, #120]	; (681c <_ext_irq_init+0x128>)
    67a4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    67a6:	2011      	movs	r0, #17
    67a8:	4b1d      	ldr	r3, [pc, #116]	; (6820 <_ext_irq_init+0x12c>)
    67aa:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    67ac:	2012      	movs	r0, #18
    67ae:	4b1a      	ldr	r3, [pc, #104]	; (6818 <_ext_irq_init+0x124>)
    67b0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    67b2:	2012      	movs	r0, #18
    67b4:	4b19      	ldr	r3, [pc, #100]	; (681c <_ext_irq_init+0x128>)
    67b6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    67b8:	2012      	movs	r0, #18
    67ba:	4b19      	ldr	r3, [pc, #100]	; (6820 <_ext_irq_init+0x12c>)
    67bc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    67be:	2013      	movs	r0, #19
    67c0:	4b15      	ldr	r3, [pc, #84]	; (6818 <_ext_irq_init+0x124>)
    67c2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    67c4:	2013      	movs	r0, #19
    67c6:	4b15      	ldr	r3, [pc, #84]	; (681c <_ext_irq_init+0x128>)
    67c8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    67ca:	2013      	movs	r0, #19
    67cc:	4b14      	ldr	r3, [pc, #80]	; (6820 <_ext_irq_init+0x12c>)
    67ce:	4798      	blx	r3

	callback = cb;
    67d0:	4a14      	ldr	r2, [pc, #80]	; (6824 <_ext_irq_init+0x130>)
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    67d6:	2300      	movs	r3, #0
}
    67d8:	4618      	mov	r0, r3
    67da:	3708      	adds	r7, #8
    67dc:	46bd      	mov	sp, r7
    67de:	bd80      	pop	{r7, pc}
    67e0:	40002800 	.word	0x40002800
    67e4:	000064ed 	.word	0x000064ed
    67e8:	000065e5 	.word	0x000065e5
    67ec:	00006575 	.word	0x00006575
    67f0:	000064c9 	.word	0x000064c9
    67f4:	00006615 	.word	0x00006615
    67f8:	000065a1 	.word	0x000065a1
    67fc:	0000663d 	.word	0x0000663d
    6800:	0000665b 	.word	0x0000665b
    6804:	00006677 	.word	0x00006677
    6808:	000066bb 	.word	0x000066bb
    680c:	000066d7 	.word	0x000066d7
    6810:	00006693 	.word	0x00006693
    6814:	00006549 	.word	0x00006549
    6818:	00006449 	.word	0x00006449
    681c:	0000648d 	.word	0x0000648d
    6820:	0000640d 	.word	0x0000640d
    6824:	20001d00 	.word	0x20001d00

00006828 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    6828:	b580      	push	{r7, lr}
    682a:	b084      	sub	sp, #16
    682c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    682e:	4841      	ldr	r0, [pc, #260]	; (6934 <_ext_irq_handler+0x10c>)
    6830:	4b41      	ldr	r3, [pc, #260]	; (6938 <_ext_irq_handler+0x110>)
    6832:	4798      	blx	r3
    6834:	4603      	mov	r3, r0
    6836:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    6838:	f04f 33ff 	mov.w	r3, #4294967295
    683c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    683e:	683b      	ldr	r3, [r7, #0]
    6840:	4619      	mov	r1, r3
    6842:	483c      	ldr	r0, [pc, #240]	; (6934 <_ext_irq_handler+0x10c>)
    6844:	4b3d      	ldr	r3, [pc, #244]	; (693c <_ext_irq_handler+0x114>)
    6846:	4798      	blx	r3

	ASSERT(callback);
    6848:	4b3d      	ldr	r3, [pc, #244]	; (6940 <_ext_irq_handler+0x118>)
    684a:	681b      	ldr	r3, [r3, #0]
    684c:	2b00      	cmp	r3, #0
    684e:	bf14      	ite	ne
    6850:	2301      	movne	r3, #1
    6852:	2300      	moveq	r3, #0
    6854:	b2db      	uxtb	r3, r3
    6856:	22f4      	movs	r2, #244	; 0xf4
    6858:	493a      	ldr	r1, [pc, #232]	; (6944 <_ext_irq_handler+0x11c>)
    685a:	4618      	mov	r0, r3
    685c:	4b3a      	ldr	r3, [pc, #232]	; (6948 <_ext_irq_handler+0x120>)
    685e:	4798      	blx	r3

	while (flags) {
    6860:	e060      	b.n	6924 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    6862:	683b      	ldr	r3, [r7, #0]
    6864:	4618      	mov	r0, r3
    6866:	4b39      	ldr	r3, [pc, #228]	; (694c <_ext_irq_handler+0x124>)
    6868:	4798      	blx	r3
    686a:	4603      	mov	r3, r0
    686c:	b2db      	uxtb	r3, r3
    686e:	3b01      	subs	r3, #1
    6870:	b2db      	uxtb	r3, r3
    6872:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6874:	e047      	b.n	6906 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6876:	2300      	movs	r3, #0
    6878:	71fb      	strb	r3, [r7, #7]
    687a:	2304      	movs	r3, #4
    687c:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    687e:	e024      	b.n	68ca <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    6880:	79ba      	ldrb	r2, [r7, #6]
    6882:	79fb      	ldrb	r3, [r7, #7]
    6884:	4413      	add	r3, r2
    6886:	105b      	asrs	r3, r3, #1
    6888:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    688a:	797b      	ldrb	r3, [r7, #5]
    688c:	4a30      	ldr	r2, [pc, #192]	; (6950 <_ext_irq_handler+0x128>)
    688e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6892:	461a      	mov	r2, r3
    6894:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6898:	429a      	cmp	r2, r3
    689a:	d106      	bne.n	68aa <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    689c:	797b      	ldrb	r3, [r7, #5]
    689e:	4a2c      	ldr	r2, [pc, #176]	; (6950 <_ext_irq_handler+0x128>)
    68a0:	00db      	lsls	r3, r3, #3
    68a2:	4413      	add	r3, r2
    68a4:	685b      	ldr	r3, [r3, #4]
    68a6:	60bb      	str	r3, [r7, #8]
					break;
    68a8:	e013      	b.n	68d2 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    68aa:	797b      	ldrb	r3, [r7, #5]
    68ac:	4a28      	ldr	r2, [pc, #160]	; (6950 <_ext_irq_handler+0x128>)
    68ae:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    68b2:	461a      	mov	r2, r3
    68b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    68b8:	429a      	cmp	r2, r3
    68ba:	da03      	bge.n	68c4 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    68bc:	797b      	ldrb	r3, [r7, #5]
    68be:	3301      	adds	r3, #1
    68c0:	71fb      	strb	r3, [r7, #7]
    68c2:	e002      	b.n	68ca <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    68c4:	797b      	ldrb	r3, [r7, #5]
    68c6:	3b01      	subs	r3, #1
    68c8:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    68ca:	79ba      	ldrb	r2, [r7, #6]
    68cc:	79fb      	ldrb	r3, [r7, #7]
    68ce:	429a      	cmp	r2, r3
    68d0:	d2d6      	bcs.n	6880 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    68d2:	68bb      	ldr	r3, [r7, #8]
    68d4:	f1b3 3fff 	cmp.w	r3, #4294967295
    68d8:	d003      	beq.n	68e2 <_ext_irq_handler+0xba>
				callback(pin);
    68da:	4b19      	ldr	r3, [pc, #100]	; (6940 <_ext_irq_handler+0x118>)
    68dc:	681b      	ldr	r3, [r3, #0]
    68de:	68b8      	ldr	r0, [r7, #8]
    68e0:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    68e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    68e6:	2201      	movs	r2, #1
    68e8:	fa02 f303 	lsl.w	r3, r2, r3
    68ec:	43da      	mvns	r2, r3
    68ee:	683b      	ldr	r3, [r7, #0]
    68f0:	4013      	ands	r3, r2
    68f2:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    68f4:	683b      	ldr	r3, [r7, #0]
    68f6:	4618      	mov	r0, r3
    68f8:	4b14      	ldr	r3, [pc, #80]	; (694c <_ext_irq_handler+0x124>)
    68fa:	4798      	blx	r3
    68fc:	4603      	mov	r3, r0
    68fe:	b2db      	uxtb	r3, r3
    6900:	3b01      	subs	r3, #1
    6902:	b2db      	uxtb	r3, r3
    6904:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6906:	f997 300f 	ldrsb.w	r3, [r7, #15]
    690a:	f1b3 3fff 	cmp.w	r3, #4294967295
    690e:	d1b2      	bne.n	6876 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    6910:	4808      	ldr	r0, [pc, #32]	; (6934 <_ext_irq_handler+0x10c>)
    6912:	4b09      	ldr	r3, [pc, #36]	; (6938 <_ext_irq_handler+0x110>)
    6914:	4798      	blx	r3
    6916:	4603      	mov	r3, r0
    6918:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    691a:	683b      	ldr	r3, [r7, #0]
    691c:	4619      	mov	r1, r3
    691e:	4805      	ldr	r0, [pc, #20]	; (6934 <_ext_irq_handler+0x10c>)
    6920:	4b06      	ldr	r3, [pc, #24]	; (693c <_ext_irq_handler+0x114>)
    6922:	4798      	blx	r3
	while (flags) {
    6924:	683b      	ldr	r3, [r7, #0]
    6926:	2b00      	cmp	r3, #0
    6928:	d19b      	bne.n	6862 <_ext_irq_handler+0x3a>
	}
}
    692a:	bf00      	nop
    692c:	3710      	adds	r7, #16
    692e:	46bd      	mov	sp, r7
    6930:	bd80      	pop	{r7, pc}
    6932:	bf00      	nop
    6934:	40002800 	.word	0x40002800
    6938:	00006515 	.word	0x00006515
    693c:	0000652d 	.word	0x0000652d
    6940:	20001d00 	.word	0x20001d00
    6944:	00011adc 	.word	0x00011adc
    6948:	0000579d 	.word	0x0000579d
    694c:	000107bd 	.word	0x000107bd
    6950:	00011abc 	.word	0x00011abc

00006954 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    6954:	b580      	push	{r7, lr}
    6956:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6958:	4b01      	ldr	r3, [pc, #4]	; (6960 <EIC_4_Handler+0xc>)
    695a:	4798      	blx	r3
} /**
    695c:	bf00      	nop
    695e:	bd80      	pop	{r7, pc}
    6960:	00006829 	.word	0x00006829

00006964 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    6964:	b580      	push	{r7, lr}
    6966:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6968:	4b01      	ldr	r3, [pc, #4]	; (6970 <EIC_5_Handler+0xc>)
    696a:	4798      	blx	r3
} /**
    696c:	bf00      	nop
    696e:	bd80      	pop	{r7, pc}
    6970:	00006829 	.word	0x00006829

00006974 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    6974:	b580      	push	{r7, lr}
    6976:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6978:	4b01      	ldr	r3, [pc, #4]	; (6980 <EIC_6_Handler+0xc>)
    697a:	4798      	blx	r3
} /**
    697c:	bf00      	nop
    697e:	bd80      	pop	{r7, pc}
    6980:	00006829 	.word	0x00006829

00006984 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    6984:	b580      	push	{r7, lr}
    6986:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6988:	4b01      	ldr	r3, [pc, #4]	; (6990 <EIC_7_Handler+0xc>)
    698a:	4798      	blx	r3
}
    698c:	bf00      	nop
    698e:	bd80      	pop	{r7, pc}
    6990:	00006829 	.word	0x00006829

00006994 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    6994:	b480      	push	{r7}
    6996:	b085      	sub	sp, #20
    6998:	af00      	add	r7, sp, #0
    699a:	60f8      	str	r0, [r7, #12]
    699c:	460b      	mov	r3, r1
    699e:	607a      	str	r2, [r7, #4]
    69a0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    69a2:	7afa      	ldrb	r2, [r7, #11]
    69a4:	68fb      	ldr	r3, [r7, #12]
    69a6:	3248      	adds	r2, #72	; 0x48
    69a8:	6879      	ldr	r1, [r7, #4]
    69aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    69ae:	bf00      	nop
    69b0:	3714      	adds	r7, #20
    69b2:	46bd      	mov	sp, r7
    69b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    69b8:	4770      	bx	lr

000069ba <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    69ba:	b480      	push	{r7}
    69bc:	b083      	sub	sp, #12
    69be:	af00      	add	r7, sp, #0
    69c0:	6078      	str	r0, [r7, #4]
    69c2:	460b      	mov	r3, r1
    69c4:	70fb      	strb	r3, [r7, #3]
    69c6:	4613      	mov	r3, r2
    69c8:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    69ca:	78fb      	ldrb	r3, [r7, #3]
    69cc:	687a      	ldr	r2, [r7, #4]
    69ce:	3304      	adds	r3, #4
    69d0:	00db      	lsls	r3, r3, #3
    69d2:	4413      	add	r3, r2
    69d4:	78ba      	ldrb	r2, [r7, #2]
    69d6:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    69d8:	78fb      	ldrb	r3, [r7, #3]
    69da:	78ba      	ldrb	r2, [r7, #2]
    69dc:	43d2      	mvns	r2, r2
    69de:	b2d1      	uxtb	r1, r2
    69e0:	687a      	ldr	r2, [r7, #4]
    69e2:	3304      	adds	r3, #4
    69e4:	00db      	lsls	r3, r3, #3
    69e6:	4413      	add	r3, r2
    69e8:	460a      	mov	r2, r1
    69ea:	711a      	strb	r2, [r3, #4]
}
    69ec:	bf00      	nop
    69ee:	370c      	adds	r7, #12
    69f0:	46bd      	mov	sp, r7
    69f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    69f6:	4770      	bx	lr

000069f8 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    69f8:	b480      	push	{r7}
    69fa:	b085      	sub	sp, #20
    69fc:	af00      	add	r7, sp, #0
    69fe:	60f8      	str	r0, [r7, #12]
    6a00:	460b      	mov	r3, r1
    6a02:	607a      	str	r2, [r7, #4]
    6a04:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6a06:	7afa      	ldrb	r2, [r7, #11]
    6a08:	68fb      	ldr	r3, [r7, #12]
    6a0a:	3204      	adds	r2, #4
    6a0c:	6879      	ldr	r1, [r7, #4]
    6a0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    6a12:	bf00      	nop
    6a14:	3714      	adds	r7, #20
    6a16:	46bd      	mov	sp, r7
    6a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a1c:	4770      	bx	lr
	...

00006a20 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6a20:	b580      	push	{r7, lr}
    6a22:	b082      	sub	sp, #8
    6a24:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    6a26:	2300      	movs	r3, #0
    6a28:	71fb      	strb	r3, [r7, #7]
    6a2a:	e00b      	b.n	6a44 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6a2c:	79fb      	ldrb	r3, [r7, #7]
    6a2e:	4a18      	ldr	r2, [pc, #96]	; (6a90 <_event_system_init+0x70>)
    6a30:	5cd3      	ldrb	r3, [r2, r3]
    6a32:	461a      	mov	r2, r3
    6a34:	79fb      	ldrb	r3, [r7, #7]
    6a36:	4619      	mov	r1, r3
    6a38:	4816      	ldr	r0, [pc, #88]	; (6a94 <_event_system_init+0x74>)
    6a3a:	4b17      	ldr	r3, [pc, #92]	; (6a98 <_event_system_init+0x78>)
    6a3c:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    6a3e:	79fb      	ldrb	r3, [r7, #7]
    6a40:	3301      	adds	r3, #1
    6a42:	71fb      	strb	r3, [r7, #7]
    6a44:	79fb      	ldrb	r3, [r7, #7]
    6a46:	2b42      	cmp	r3, #66	; 0x42
    6a48:	d9f0      	bls.n	6a2c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6a4a:	2300      	movs	r3, #0
    6a4c:	71fb      	strb	r3, [r7, #7]
    6a4e:	e016      	b.n	6a7e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6a50:	79fb      	ldrb	r3, [r7, #7]
    6a52:	4a12      	ldr	r2, [pc, #72]	; (6a9c <_event_system_init+0x7c>)
    6a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6a58:	461a      	mov	r2, r3
    6a5a:	79fb      	ldrb	r3, [r7, #7]
    6a5c:	4619      	mov	r1, r3
    6a5e:	480d      	ldr	r0, [pc, #52]	; (6a94 <_event_system_init+0x74>)
    6a60:	4b0f      	ldr	r3, [pc, #60]	; (6aa0 <_event_system_init+0x80>)
    6a62:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6a64:	79fb      	ldrb	r3, [r7, #7]
    6a66:	4a0f      	ldr	r2, [pc, #60]	; (6aa4 <_event_system_init+0x84>)
    6a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a6c:	b2da      	uxtb	r2, r3
    6a6e:	79fb      	ldrb	r3, [r7, #7]
    6a70:	4619      	mov	r1, r3
    6a72:	4808      	ldr	r0, [pc, #32]	; (6a94 <_event_system_init+0x74>)
    6a74:	4b0c      	ldr	r3, [pc, #48]	; (6aa8 <_event_system_init+0x88>)
    6a76:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6a78:	79fb      	ldrb	r3, [r7, #7]
    6a7a:	3301      	adds	r3, #1
    6a7c:	71fb      	strb	r3, [r7, #7]
    6a7e:	79fb      	ldrb	r3, [r7, #7]
    6a80:	2b1f      	cmp	r3, #31
    6a82:	d9e5      	bls.n	6a50 <_event_system_init+0x30>
	}

	return ERR_NONE;
    6a84:	2300      	movs	r3, #0
}
    6a86:	4618      	mov	r0, r3
    6a88:	3708      	adds	r7, #8
    6a8a:	46bd      	mov	sp, r7
    6a8c:	bd80      	pop	{r7, pc}
    6a8e:	bf00      	nop
    6a90:	00011af4 	.word	0x00011af4
    6a94:	4100e000 	.word	0x4100e000
    6a98:	00006995 	.word	0x00006995
    6a9c:	00011b38 	.word	0x00011b38
    6aa0:	000069f9 	.word	0x000069f9
    6aa4:	00011b78 	.word	0x00011b78
    6aa8:	000069bb 	.word	0x000069bb

00006aac <hri_gclk_wait_for_sync>:
{
    6aac:	b480      	push	{r7}
    6aae:	b083      	sub	sp, #12
    6ab0:	af00      	add	r7, sp, #0
    6ab2:	6078      	str	r0, [r7, #4]
    6ab4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6ab6:	bf00      	nop
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	685a      	ldr	r2, [r3, #4]
    6abc:	683b      	ldr	r3, [r7, #0]
    6abe:	4013      	ands	r3, r2
    6ac0:	2b00      	cmp	r3, #0
    6ac2:	d1f9      	bne.n	6ab8 <hri_gclk_wait_for_sync+0xc>
}
    6ac4:	bf00      	nop
    6ac6:	370c      	adds	r7, #12
    6ac8:	46bd      	mov	sp, r7
    6aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ace:	4770      	bx	lr

00006ad0 <hri_gclk_write_GENCTRL_reg>:
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b084      	sub	sp, #16
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	60f8      	str	r0, [r7, #12]
    6ad8:	460b      	mov	r3, r1
    6ada:	607a      	str	r2, [r7, #4]
    6adc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6ade:	7afa      	ldrb	r2, [r7, #11]
    6ae0:	68fb      	ldr	r3, [r7, #12]
    6ae2:	3208      	adds	r2, #8
    6ae4:	6879      	ldr	r1, [r7, #4]
    6ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6aea:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6aee:	68f8      	ldr	r0, [r7, #12]
    6af0:	4b02      	ldr	r3, [pc, #8]	; (6afc <hri_gclk_write_GENCTRL_reg+0x2c>)
    6af2:	4798      	blx	r3
}
    6af4:	bf00      	nop
    6af6:	3710      	adds	r7, #16
    6af8:	46bd      	mov	sp, r7
    6afa:	bd80      	pop	{r7, pc}
    6afc:	00006aad 	.word	0x00006aad

00006b00 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    6b00:	b580      	push	{r7, lr}
    6b02:	b082      	sub	sp, #8
    6b04:	af00      	add	r7, sp, #0
    6b06:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	f003 0301 	and.w	r3, r3, #1
    6b0e:	2b00      	cmp	r3, #0
    6b10:	d004      	beq.n	6b1c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    6b12:	4a27      	ldr	r2, [pc, #156]	; (6bb0 <_gclk_init_generators_by_fref+0xb0>)
    6b14:	2100      	movs	r1, #0
    6b16:	4827      	ldr	r0, [pc, #156]	; (6bb4 <_gclk_init_generators_by_fref+0xb4>)
    6b18:	4b27      	ldr	r3, [pc, #156]	; (6bb8 <_gclk_init_generators_by_fref+0xb8>)
    6b1a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	f003 0302 	and.w	r3, r3, #2
    6b22:	2b00      	cmp	r3, #0
    6b24:	d004      	beq.n	6b30 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    6b26:	4a25      	ldr	r2, [pc, #148]	; (6bbc <_gclk_init_generators_by_fref+0xbc>)
    6b28:	2101      	movs	r1, #1
    6b2a:	4822      	ldr	r0, [pc, #136]	; (6bb4 <_gclk_init_generators_by_fref+0xb4>)
    6b2c:	4b22      	ldr	r3, [pc, #136]	; (6bb8 <_gclk_init_generators_by_fref+0xb8>)
    6b2e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6b30:	687b      	ldr	r3, [r7, #4]
    6b32:	f003 0304 	and.w	r3, r3, #4
    6b36:	2b00      	cmp	r3, #0
    6b38:	d004      	beq.n	6b44 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    6b3a:	4a21      	ldr	r2, [pc, #132]	; (6bc0 <_gclk_init_generators_by_fref+0xc0>)
    6b3c:	2102      	movs	r1, #2
    6b3e:	481d      	ldr	r0, [pc, #116]	; (6bb4 <_gclk_init_generators_by_fref+0xb4>)
    6b40:	4b1d      	ldr	r3, [pc, #116]	; (6bb8 <_gclk_init_generators_by_fref+0xb8>)
    6b42:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	f003 0308 	and.w	r3, r3, #8
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d004      	beq.n	6b58 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    6b4e:	4a1d      	ldr	r2, [pc, #116]	; (6bc4 <_gclk_init_generators_by_fref+0xc4>)
    6b50:	2103      	movs	r1, #3
    6b52:	4818      	ldr	r0, [pc, #96]	; (6bb4 <_gclk_init_generators_by_fref+0xb4>)
    6b54:	4b18      	ldr	r3, [pc, #96]	; (6bb8 <_gclk_init_generators_by_fref+0xb8>)
    6b56:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    6b58:	687b      	ldr	r3, [r7, #4]
    6b5a:	f003 0310 	and.w	r3, r3, #16
    6b5e:	2b00      	cmp	r3, #0
    6b60:	d004      	beq.n	6b6c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    6b62:	4a19      	ldr	r2, [pc, #100]	; (6bc8 <_gclk_init_generators_by_fref+0xc8>)
    6b64:	2104      	movs	r1, #4
    6b66:	4813      	ldr	r0, [pc, #76]	; (6bb4 <_gclk_init_generators_by_fref+0xb4>)
    6b68:	4b13      	ldr	r3, [pc, #76]	; (6bb8 <_gclk_init_generators_by_fref+0xb8>)
    6b6a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	f003 0320 	and.w	r3, r3, #32
    6b72:	2b00      	cmp	r3, #0
    6b74:	d004      	beq.n	6b80 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    6b76:	4a15      	ldr	r2, [pc, #84]	; (6bcc <_gclk_init_generators_by_fref+0xcc>)
    6b78:	2105      	movs	r1, #5
    6b7a:	480e      	ldr	r0, [pc, #56]	; (6bb4 <_gclk_init_generators_by_fref+0xb4>)
    6b7c:	4b0e      	ldr	r3, [pc, #56]	; (6bb8 <_gclk_init_generators_by_fref+0xb8>)
    6b7e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6b86:	2b00      	cmp	r3, #0
    6b88:	d004      	beq.n	6b94 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    6b8a:	4a11      	ldr	r2, [pc, #68]	; (6bd0 <_gclk_init_generators_by_fref+0xd0>)
    6b8c:	210a      	movs	r1, #10
    6b8e:	4809      	ldr	r0, [pc, #36]	; (6bb4 <_gclk_init_generators_by_fref+0xb4>)
    6b90:	4b09      	ldr	r3, [pc, #36]	; (6bb8 <_gclk_init_generators_by_fref+0xb8>)
    6b92:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d004      	beq.n	6ba8 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    6b9e:	4a0d      	ldr	r2, [pc, #52]	; (6bd4 <_gclk_init_generators_by_fref+0xd4>)
    6ba0:	210b      	movs	r1, #11
    6ba2:	4804      	ldr	r0, [pc, #16]	; (6bb4 <_gclk_init_generators_by_fref+0xb4>)
    6ba4:	4b04      	ldr	r3, [pc, #16]	; (6bb8 <_gclk_init_generators_by_fref+0xb8>)
    6ba6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    6ba8:	bf00      	nop
    6baa:	3708      	adds	r7, #8
    6bac:	46bd      	mov	sp, r7
    6bae:	bd80      	pop	{r7, pc}
    6bb0:	00010107 	.word	0x00010107
    6bb4:	40001c00 	.word	0x40001c00
    6bb8:	00006ad1 	.word	0x00006ad1
    6bbc:	00010907 	.word	0x00010907
    6bc0:	00010906 	.word	0x00010906
    6bc4:	00011908 	.word	0x00011908
    6bc8:	00010901 	.word	0x00010901
    6bcc:	00062901 	.word	0x00062901
    6bd0:	00010905 	.word	0x00010905
    6bd4:	00041905 	.word	0x00041905

00006bd8 <hri_mclk_write_CPUDIV_reg>:
{
    6bd8:	b480      	push	{r7}
    6bda:	b083      	sub	sp, #12
    6bdc:	af00      	add	r7, sp, #0
    6bde:	6078      	str	r0, [r7, #4]
    6be0:	460b      	mov	r3, r1
    6be2:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    6be4:	687b      	ldr	r3, [r7, #4]
    6be6:	78fa      	ldrb	r2, [r7, #3]
    6be8:	715a      	strb	r2, [r3, #5]
}
    6bea:	bf00      	nop
    6bec:	370c      	adds	r7, #12
    6bee:	46bd      	mov	sp, r7
    6bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bf4:	4770      	bx	lr
	...

00006bf8 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    6bf8:	b580      	push	{r7, lr}
    6bfa:	b082      	sub	sp, #8
    6bfc:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    6bfe:	4b05      	ldr	r3, [pc, #20]	; (6c14 <_mclk_init+0x1c>)
    6c00:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    6c02:	2101      	movs	r1, #1
    6c04:	6878      	ldr	r0, [r7, #4]
    6c06:	4b04      	ldr	r3, [pc, #16]	; (6c18 <_mclk_init+0x20>)
    6c08:	4798      	blx	r3
}
    6c0a:	bf00      	nop
    6c0c:	3708      	adds	r7, #8
    6c0e:	46bd      	mov	sp, r7
    6c10:	bd80      	pop	{r7, pc}
    6c12:	bf00      	nop
    6c14:	40000800 	.word	0x40000800
    6c18:	00006bd9 	.word	0x00006bd9

00006c1c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    6c1c:	b480      	push	{r7}
    6c1e:	b083      	sub	sp, #12
    6c20:	af00      	add	r7, sp, #0
    6c22:	6078      	str	r0, [r7, #4]
    6c24:	460b      	mov	r3, r1
    6c26:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	78fa      	ldrb	r2, [r7, #3]
    6c2c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6c2e:	bf00      	nop
    6c30:	370c      	adds	r7, #12
    6c32:	46bd      	mov	sp, r7
    6c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c38:	4770      	bx	lr

00006c3a <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    6c3a:	b480      	push	{r7}
    6c3c:	b083      	sub	sp, #12
    6c3e:	af00      	add	r7, sp, #0
    6c40:	6078      	str	r0, [r7, #4]
    6c42:	460b      	mov	r3, r1
    6c44:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	887a      	ldrh	r2, [r7, #2]
    6c4a:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6c4c:	bf00      	nop
    6c4e:	370c      	adds	r7, #12
    6c50:	46bd      	mov	sp, r7
    6c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c56:	4770      	bx	lr

00006c58 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    6c58:	b480      	push	{r7}
    6c5a:	b083      	sub	sp, #12
    6c5c:	af00      	add	r7, sp, #0
    6c5e:	6078      	str	r0, [r7, #4]
    6c60:	460b      	mov	r3, r1
    6c62:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6c64:	687b      	ldr	r3, [r7, #4]
    6c66:	78fa      	ldrb	r2, [r7, #3]
    6c68:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6c6a:	bf00      	nop
    6c6c:	370c      	adds	r7, #12
    6c6e:	46bd      	mov	sp, r7
    6c70:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c74:	4770      	bx	lr

00006c76 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    6c76:	b480      	push	{r7}
    6c78:	b083      	sub	sp, #12
    6c7a:	af00      	add	r7, sp, #0
    6c7c:	6078      	str	r0, [r7, #4]
    6c7e:	460b      	mov	r3, r1
    6c80:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    6c82:	687b      	ldr	r3, [r7, #4]
    6c84:	78fa      	ldrb	r2, [r7, #3]
    6c86:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6c88:	bf00      	nop
    6c8a:	370c      	adds	r7, #12
    6c8c:	46bd      	mov	sp, r7
    6c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c92:	4770      	bx	lr

00006c94 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    6c94:	b480      	push	{r7}
    6c96:	b085      	sub	sp, #20
    6c98:	af00      	add	r7, sp, #0
    6c9a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6c9c:	687b      	ldr	r3, [r7, #4]
    6c9e:	69db      	ldr	r3, [r3, #28]
    6ca0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    6ca2:	68fb      	ldr	r3, [r7, #12]
    6ca4:	0a1b      	lsrs	r3, r3, #8
    6ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6caa:	60fb      	str	r3, [r7, #12]
	return tmp;
    6cac:	68fb      	ldr	r3, [r7, #12]
}
    6cae:	4618      	mov	r0, r3
    6cb0:	3714      	adds	r7, #20
    6cb2:	46bd      	mov	sp, r7
    6cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cb8:	4770      	bx	lr

00006cba <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    6cba:	b480      	push	{r7}
    6cbc:	b083      	sub	sp, #12
    6cbe:	af00      	add	r7, sp, #0
    6cc0:	6078      	str	r0, [r7, #4]
    6cc2:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6cc4:	687b      	ldr	r3, [r7, #4]
    6cc6:	683a      	ldr	r2, [r7, #0]
    6cc8:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6cca:	bf00      	nop
    6ccc:	370c      	adds	r7, #12
    6cce:	46bd      	mov	sp, r7
    6cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cd4:	4770      	bx	lr
	...

00006cd8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    6cd8:	b580      	push	{r7, lr}
    6cda:	b082      	sub	sp, #8
    6cdc:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    6cde:	4b13      	ldr	r3, [pc, #76]	; (6d2c <_osc32kctrl_init_sources+0x54>)
    6ce0:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    6ce2:	2300      	movs	r3, #0
    6ce4:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    6ce6:	f242 018e 	movw	r1, #8334	; 0x208e
    6cea:	6878      	ldr	r0, [r7, #4]
    6cec:	4b10      	ldr	r3, [pc, #64]	; (6d30 <_osc32kctrl_init_sources+0x58>)
    6cee:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    6cf0:	2100      	movs	r1, #0
    6cf2:	6878      	ldr	r0, [r7, #4]
    6cf4:	4b0f      	ldr	r3, [pc, #60]	; (6d34 <_osc32kctrl_init_sources+0x5c>)
    6cf6:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    6cf8:	2100      	movs	r1, #0
    6cfa:	6878      	ldr	r0, [r7, #4]
    6cfc:	4b0e      	ldr	r3, [pc, #56]	; (6d38 <_osc32kctrl_init_sources+0x60>)
    6cfe:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    6d00:	6878      	ldr	r0, [r7, #4]
    6d02:	4b0e      	ldr	r3, [pc, #56]	; (6d3c <_osc32kctrl_init_sources+0x64>)
    6d04:	4798      	blx	r3
    6d06:	4603      	mov	r3, r0
    6d08:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6d0a:	887b      	ldrh	r3, [r7, #2]
    6d0c:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    6d0e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    6d12:	4619      	mov	r1, r3
    6d14:	6878      	ldr	r0, [r7, #4]
    6d16:	4b0a      	ldr	r3, [pc, #40]	; (6d40 <_osc32kctrl_init_sources+0x68>)
    6d18:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    6d1a:	2100      	movs	r1, #0
    6d1c:	6878      	ldr	r0, [r7, #4]
    6d1e:	4b09      	ldr	r3, [pc, #36]	; (6d44 <_osc32kctrl_init_sources+0x6c>)
    6d20:	4798      	blx	r3
	(void)calib;
}
    6d22:	bf00      	nop
    6d24:	3708      	adds	r7, #8
    6d26:	46bd      	mov	sp, r7
    6d28:	bd80      	pop	{r7, pc}
    6d2a:	bf00      	nop
    6d2c:	40001400 	.word	0x40001400
    6d30:	00006c3b 	.word	0x00006c3b
    6d34:	00006c59 	.word	0x00006c59
    6d38:	00006c77 	.word	0x00006c77
    6d3c:	00006c95 	.word	0x00006c95
    6d40:	00006cbb 	.word	0x00006cbb
    6d44:	00006c1d 	.word	0x00006c1d

00006d48 <hri_gclk_wait_for_sync>:
{
    6d48:	b480      	push	{r7}
    6d4a:	b083      	sub	sp, #12
    6d4c:	af00      	add	r7, sp, #0
    6d4e:	6078      	str	r0, [r7, #4]
    6d50:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6d52:	bf00      	nop
    6d54:	687b      	ldr	r3, [r7, #4]
    6d56:	685a      	ldr	r2, [r3, #4]
    6d58:	683b      	ldr	r3, [r7, #0]
    6d5a:	4013      	ands	r3, r2
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d1f9      	bne.n	6d54 <hri_gclk_wait_for_sync+0xc>
}
    6d60:	bf00      	nop
    6d62:	370c      	adds	r7, #12
    6d64:	46bd      	mov	sp, r7
    6d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d6a:	4770      	bx	lr

00006d6c <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    6d6c:	b480      	push	{r7}
    6d6e:	b083      	sub	sp, #12
    6d70:	af00      	add	r7, sp, #0
    6d72:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6d74:	687b      	ldr	r3, [r7, #4]
    6d76:	685b      	ldr	r3, [r3, #4]
    6d78:	089b      	lsrs	r3, r3, #2
    6d7a:	f003 0301 	and.w	r3, r3, #1
    6d7e:	2b00      	cmp	r3, #0
    6d80:	bf14      	ite	ne
    6d82:	2301      	movne	r3, #1
    6d84:	2300      	moveq	r3, #0
    6d86:	b2db      	uxtb	r3, r3
}
    6d88:	4618      	mov	r0, r3
    6d8a:	370c      	adds	r7, #12
    6d8c:	46bd      	mov	sp, r7
    6d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d92:	4770      	bx	lr

00006d94 <hri_gclk_read_SYNCBUSY_reg>:
{
    6d94:	b480      	push	{r7}
    6d96:	b083      	sub	sp, #12
    6d98:	af00      	add	r7, sp, #0
    6d9a:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	685b      	ldr	r3, [r3, #4]
}
    6da0:	4618      	mov	r0, r3
    6da2:	370c      	adds	r7, #12
    6da4:	46bd      	mov	sp, r7
    6da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6daa:	4770      	bx	lr

00006dac <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6dac:	b580      	push	{r7, lr}
    6dae:	b086      	sub	sp, #24
    6db0:	af00      	add	r7, sp, #0
    6db2:	60f8      	str	r0, [r7, #12]
    6db4:	460b      	mov	r3, r1
    6db6:	607a      	str	r2, [r7, #4]
    6db8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6dba:	7afa      	ldrb	r2, [r7, #11]
    6dbc:	68fb      	ldr	r3, [r7, #12]
    6dbe:	3208      	adds	r2, #8
    6dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6dc4:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6dc6:	697b      	ldr	r3, [r7, #20]
    6dc8:	f023 030f 	bic.w	r3, r3, #15
    6dcc:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	f003 030f 	and.w	r3, r3, #15
    6dd4:	697a      	ldr	r2, [r7, #20]
    6dd6:	4313      	orrs	r3, r2
    6dd8:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6dda:	7afa      	ldrb	r2, [r7, #11]
    6ddc:	68fb      	ldr	r3, [r7, #12]
    6dde:	3208      	adds	r2, #8
    6de0:	6979      	ldr	r1, [r7, #20]
    6de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6de6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6dea:	68f8      	ldr	r0, [r7, #12]
    6dec:	4b02      	ldr	r3, [pc, #8]	; (6df8 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    6dee:	4798      	blx	r3
}
    6df0:	bf00      	nop
    6df2:	3718      	adds	r7, #24
    6df4:	46bd      	mov	sp, r7
    6df6:	bd80      	pop	{r7, pc}
    6df8:	00006d49 	.word	0x00006d49

00006dfc <hri_gclk_write_PCHCTRL_reg>:
{
    6dfc:	b480      	push	{r7}
    6dfe:	b085      	sub	sp, #20
    6e00:	af00      	add	r7, sp, #0
    6e02:	60f8      	str	r0, [r7, #12]
    6e04:	460b      	mov	r3, r1
    6e06:	607a      	str	r2, [r7, #4]
    6e08:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6e0a:	7afa      	ldrb	r2, [r7, #11]
    6e0c:	68fb      	ldr	r3, [r7, #12]
    6e0e:	3220      	adds	r2, #32
    6e10:	6879      	ldr	r1, [r7, #4]
    6e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6e16:	bf00      	nop
    6e18:	3714      	adds	r7, #20
    6e1a:	46bd      	mov	sp, r7
    6e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e20:	4770      	bx	lr

00006e22 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    6e22:	b480      	push	{r7}
    6e24:	b085      	sub	sp, #20
    6e26:	af00      	add	r7, sp, #0
    6e28:	60f8      	str	r0, [r7, #12]
    6e2a:	460b      	mov	r3, r1
    6e2c:	607a      	str	r2, [r7, #4]
    6e2e:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6e30:	bf00      	nop
    6e32:	7afa      	ldrb	r2, [r7, #11]
    6e34:	68f9      	ldr	r1, [r7, #12]
    6e36:	4613      	mov	r3, r2
    6e38:	009b      	lsls	r3, r3, #2
    6e3a:	4413      	add	r3, r2
    6e3c:	009b      	lsls	r3, r3, #2
    6e3e:	440b      	add	r3, r1
    6e40:	333c      	adds	r3, #60	; 0x3c
    6e42:	681a      	ldr	r2, [r3, #0]
    6e44:	687b      	ldr	r3, [r7, #4]
    6e46:	4013      	ands	r3, r2
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d1f2      	bne.n	6e32 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    6e4c:	bf00      	nop
    6e4e:	3714      	adds	r7, #20
    6e50:	46bd      	mov	sp, r7
    6e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e56:	4770      	bx	lr

00006e58 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    6e58:	b480      	push	{r7}
    6e5a:	b083      	sub	sp, #12
    6e5c:	af00      	add	r7, sp, #0
    6e5e:	6078      	str	r0, [r7, #4]
    6e60:	460b      	mov	r3, r1
    6e62:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6e64:	78fa      	ldrb	r2, [r7, #3]
    6e66:	6879      	ldr	r1, [r7, #4]
    6e68:	4613      	mov	r3, r2
    6e6a:	009b      	lsls	r3, r3, #2
    6e6c:	4413      	add	r3, r2
    6e6e:	009b      	lsls	r3, r3, #2
    6e70:	440b      	add	r3, r1
    6e72:	3340      	adds	r3, #64	; 0x40
    6e74:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    6e76:	f003 0301 	and.w	r3, r3, #1
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	bf14      	ite	ne
    6e7e:	2301      	movne	r3, #1
    6e80:	2300      	moveq	r3, #0
    6e82:	b2db      	uxtb	r3, r3
}
    6e84:	4618      	mov	r0, r3
    6e86:	370c      	adds	r7, #12
    6e88:	46bd      	mov	sp, r7
    6e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e8e:	4770      	bx	lr

00006e90 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    6e90:	b480      	push	{r7}
    6e92:	b083      	sub	sp, #12
    6e94:	af00      	add	r7, sp, #0
    6e96:	6078      	str	r0, [r7, #4]
    6e98:	460b      	mov	r3, r1
    6e9a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6e9c:	78fa      	ldrb	r2, [r7, #3]
    6e9e:	6879      	ldr	r1, [r7, #4]
    6ea0:	4613      	mov	r3, r2
    6ea2:	009b      	lsls	r3, r3, #2
    6ea4:	4413      	add	r3, r2
    6ea6:	009b      	lsls	r3, r3, #2
    6ea8:	440b      	add	r3, r1
    6eaa:	3340      	adds	r3, #64	; 0x40
    6eac:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    6eae:	085b      	lsrs	r3, r3, #1
    6eb0:	f003 0301 	and.w	r3, r3, #1
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	bf14      	ite	ne
    6eb8:	2301      	movne	r3, #1
    6eba:	2300      	moveq	r3, #0
    6ebc:	b2db      	uxtb	r3, r3
}
    6ebe:	4618      	mov	r0, r3
    6ec0:	370c      	adds	r7, #12
    6ec2:	46bd      	mov	sp, r7
    6ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ec8:	4770      	bx	lr
	...

00006ecc <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    6ecc:	b580      	push	{r7, lr}
    6ece:	b082      	sub	sp, #8
    6ed0:	af00      	add	r7, sp, #0
    6ed2:	6078      	str	r0, [r7, #4]
    6ed4:	460b      	mov	r3, r1
    6ed6:	70fb      	strb	r3, [r7, #3]
    6ed8:	4613      	mov	r3, r2
    6eda:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6edc:	78fa      	ldrb	r2, [r7, #3]
    6ede:	6879      	ldr	r1, [r7, #4]
    6ee0:	4613      	mov	r3, r2
    6ee2:	009b      	lsls	r3, r3, #2
    6ee4:	4413      	add	r3, r2
    6ee6:	009b      	lsls	r3, r3, #2
    6ee8:	440b      	add	r3, r1
    6eea:	3330      	adds	r3, #48	; 0x30
    6eec:	78ba      	ldrb	r2, [r7, #2]
    6eee:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    6ef0:	78fb      	ldrb	r3, [r7, #3]
    6ef2:	2202      	movs	r2, #2
    6ef4:	4619      	mov	r1, r3
    6ef6:	6878      	ldr	r0, [r7, #4]
    6ef8:	4b02      	ldr	r3, [pc, #8]	; (6f04 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    6efa:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6efc:	bf00      	nop
    6efe:	3708      	adds	r7, #8
    6f00:	46bd      	mov	sp, r7
    6f02:	bd80      	pop	{r7, pc}
    6f04:	00006e23 	.word	0x00006e23

00006f08 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    6f08:	b580      	push	{r7, lr}
    6f0a:	b084      	sub	sp, #16
    6f0c:	af00      	add	r7, sp, #0
    6f0e:	60f8      	str	r0, [r7, #12]
    6f10:	460b      	mov	r3, r1
    6f12:	607a      	str	r2, [r7, #4]
    6f14:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6f16:	7afa      	ldrb	r2, [r7, #11]
    6f18:	68f9      	ldr	r1, [r7, #12]
    6f1a:	4613      	mov	r3, r2
    6f1c:	009b      	lsls	r3, r3, #2
    6f1e:	4413      	add	r3, r2
    6f20:	009b      	lsls	r3, r3, #2
    6f22:	440b      	add	r3, r1
    6f24:	3334      	adds	r3, #52	; 0x34
    6f26:	687a      	ldr	r2, [r7, #4]
    6f28:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    6f2a:	7afb      	ldrb	r3, [r7, #11]
    6f2c:	2206      	movs	r2, #6
    6f2e:	4619      	mov	r1, r3
    6f30:	68f8      	ldr	r0, [r7, #12]
    6f32:	4b03      	ldr	r3, [pc, #12]	; (6f40 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6f34:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6f36:	bf00      	nop
    6f38:	3710      	adds	r7, #16
    6f3a:	46bd      	mov	sp, r7
    6f3c:	bd80      	pop	{r7, pc}
    6f3e:	bf00      	nop
    6f40:	00006e23 	.word	0x00006e23

00006f44 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6f44:	b480      	push	{r7}
    6f46:	b085      	sub	sp, #20
    6f48:	af00      	add	r7, sp, #0
    6f4a:	60f8      	str	r0, [r7, #12]
    6f4c:	460b      	mov	r3, r1
    6f4e:	607a      	str	r2, [r7, #4]
    6f50:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6f52:	7afa      	ldrb	r2, [r7, #11]
    6f54:	68f9      	ldr	r1, [r7, #12]
    6f56:	4613      	mov	r3, r2
    6f58:	009b      	lsls	r3, r3, #2
    6f5a:	4413      	add	r3, r2
    6f5c:	009b      	lsls	r3, r3, #2
    6f5e:	440b      	add	r3, r1
    6f60:	3338      	adds	r3, #56	; 0x38
    6f62:	687a      	ldr	r2, [r7, #4]
    6f64:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6f66:	bf00      	nop
    6f68:	3714      	adds	r7, #20
    6f6a:	46bd      	mov	sp, r7
    6f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f70:	4770      	bx	lr

00006f72 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    6f72:	b480      	push	{r7}
    6f74:	b083      	sub	sp, #12
    6f76:	af00      	add	r7, sp, #0
    6f78:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    6f7a:	687b      	ldr	r3, [r7, #4]
    6f7c:	691b      	ldr	r3, [r3, #16]
    6f7e:	085b      	lsrs	r3, r3, #1
    6f80:	f003 0301 	and.w	r3, r3, #1
    6f84:	2b00      	cmp	r3, #0
    6f86:	bf14      	ite	ne
    6f88:	2301      	movne	r3, #1
    6f8a:	2300      	moveq	r3, #0
    6f8c:	b2db      	uxtb	r3, r3
}
    6f8e:	4618      	mov	r0, r3
    6f90:	370c      	adds	r7, #12
    6f92:	46bd      	mov	sp, r7
    6f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f98:	4770      	bx	lr

00006f9a <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    6f9a:	b480      	push	{r7}
    6f9c:	b083      	sub	sp, #12
    6f9e:	af00      	add	r7, sp, #0
    6fa0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6fa2:	687b      	ldr	r3, [r7, #4]
    6fa4:	691b      	ldr	r3, [r3, #16]
    6fa6:	0a1b      	lsrs	r3, r3, #8
    6fa8:	f003 0301 	and.w	r3, r3, #1
    6fac:	2b00      	cmp	r3, #0
    6fae:	bf14      	ite	ne
    6fb0:	2301      	movne	r3, #1
    6fb2:	2300      	moveq	r3, #0
    6fb4:	b2db      	uxtb	r3, r3
}
    6fb6:	4618      	mov	r0, r3
    6fb8:	370c      	adds	r7, #12
    6fba:	46bd      	mov	sp, r7
    6fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fc0:	4770      	bx	lr

00006fc2 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    6fc2:	b480      	push	{r7}
    6fc4:	b085      	sub	sp, #20
    6fc6:	af00      	add	r7, sp, #0
    6fc8:	6078      	str	r0, [r7, #4]
    6fca:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6fcc:	687b      	ldr	r3, [r7, #4]
    6fce:	691b      	ldr	r3, [r3, #16]
    6fd0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6fd2:	68fa      	ldr	r2, [r7, #12]
    6fd4:	683b      	ldr	r3, [r7, #0]
    6fd6:	4013      	ands	r3, r2
    6fd8:	60fb      	str	r3, [r7, #12]
	return tmp;
    6fda:	68fb      	ldr	r3, [r7, #12]
}
    6fdc:	4618      	mov	r0, r3
    6fde:	3714      	adds	r7, #20
    6fe0:	46bd      	mov	sp, r7
    6fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fe6:	4770      	bx	lr

00006fe8 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    6fe8:	b480      	push	{r7}
    6fea:	b085      	sub	sp, #20
    6fec:	af00      	add	r7, sp, #0
    6fee:	60f8      	str	r0, [r7, #12]
    6ff0:	460b      	mov	r3, r1
    6ff2:	607a      	str	r2, [r7, #4]
    6ff4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    6ff6:	7afb      	ldrb	r3, [r7, #11]
    6ff8:	68fa      	ldr	r2, [r7, #12]
    6ffa:	3304      	adds	r3, #4
    6ffc:	009b      	lsls	r3, r3, #2
    6ffe:	4413      	add	r3, r2
    7000:	687a      	ldr	r2, [r7, #4]
    7002:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7004:	bf00      	nop
    7006:	3714      	adds	r7, #20
    7008:	46bd      	mov	sp, r7
    700a:	f85d 7b04 	ldr.w	r7, [sp], #4
    700e:	4770      	bx	lr

00007010 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    7010:	b480      	push	{r7}
    7012:	b083      	sub	sp, #12
    7014:	af00      	add	r7, sp, #0
    7016:	6078      	str	r0, [r7, #4]
    7018:	460b      	mov	r3, r1
    701a:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	78fa      	ldrb	r2, [r7, #3]
    7020:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7022:	bf00      	nop
    7024:	370c      	adds	r7, #12
    7026:	46bd      	mov	sp, r7
    7028:	f85d 7b04 	ldr.w	r7, [sp], #4
    702c:	4770      	bx	lr

0000702e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    702e:	b480      	push	{r7}
    7030:	b085      	sub	sp, #20
    7032:	af00      	add	r7, sp, #0
    7034:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7036:	687b      	ldr	r3, [r7, #4]
    7038:	f893 3020 	ldrb.w	r3, [r3, #32]
    703c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    703e:	7bfb      	ldrb	r3, [r7, #15]
    7040:	f003 0301 	and.w	r3, r3, #1
    7044:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7046:	7bfb      	ldrb	r3, [r7, #15]
    7048:	2b00      	cmp	r3, #0
    704a:	bf14      	ite	ne
    704c:	2301      	movne	r3, #1
    704e:	2300      	moveq	r3, #0
    7050:	b2db      	uxtb	r3, r3
}
    7052:	4618      	mov	r0, r3
    7054:	3714      	adds	r7, #20
    7056:	46bd      	mov	sp, r7
    7058:	f85d 7b04 	ldr.w	r7, [sp], #4
    705c:	4770      	bx	lr

0000705e <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    705e:	b480      	push	{r7}
    7060:	b083      	sub	sp, #12
    7062:	af00      	add	r7, sp, #0
    7064:	6078      	str	r0, [r7, #4]
    7066:	460b      	mov	r3, r1
    7068:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    706a:	687b      	ldr	r3, [r7, #4]
    706c:	78fa      	ldrb	r2, [r7, #3]
    706e:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7072:	bf00      	nop
    7074:	370c      	adds	r7, #12
    7076:	46bd      	mov	sp, r7
    7078:	f85d 7b04 	ldr.w	r7, [sp], #4
    707c:	4770      	bx	lr

0000707e <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    707e:	b480      	push	{r7}
    7080:	b083      	sub	sp, #12
    7082:	af00      	add	r7, sp, #0
    7084:	6078      	str	r0, [r7, #4]
    7086:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	683a      	ldr	r2, [r7, #0]
    708c:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    708e:	bf00      	nop
    7090:	370c      	adds	r7, #12
    7092:	46bd      	mov	sp, r7
    7094:	f85d 7b04 	ldr.w	r7, [sp], #4
    7098:	4770      	bx	lr

0000709a <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    709a:	b480      	push	{r7}
    709c:	b083      	sub	sp, #12
    709e:	af00      	add	r7, sp, #0
    70a0:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    70a6:	4618      	mov	r0, r3
    70a8:	370c      	adds	r7, #12
    70aa:	46bd      	mov	sp, r7
    70ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    70b0:	4770      	bx	lr

000070b2 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    70b2:	b480      	push	{r7}
    70b4:	b083      	sub	sp, #12
    70b6:	af00      	add	r7, sp, #0
    70b8:	6078      	str	r0, [r7, #4]
    70ba:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	683a      	ldr	r2, [r7, #0]
    70c0:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    70c2:	bf00      	nop
    70c4:	370c      	adds	r7, #12
    70c6:	46bd      	mov	sp, r7
    70c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    70cc:	4770      	bx	lr

000070ce <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    70ce:	b480      	push	{r7}
    70d0:	b085      	sub	sp, #20
    70d2:	af00      	add	r7, sp, #0
    70d4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    70d6:	687b      	ldr	r3, [r7, #4]
    70d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    70dc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    70de:	7bfb      	ldrb	r3, [r7, #15]
    70e0:	085b      	lsrs	r3, r3, #1
    70e2:	b2db      	uxtb	r3, r3
    70e4:	f003 0301 	and.w	r3, r3, #1
    70e8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    70ea:	7bfb      	ldrb	r3, [r7, #15]
    70ec:	2b00      	cmp	r3, #0
    70ee:	bf14      	ite	ne
    70f0:	2301      	movne	r3, #1
    70f2:	2300      	moveq	r3, #0
    70f4:	b2db      	uxtb	r3, r3
}
    70f6:	4618      	mov	r0, r3
    70f8:	3714      	adds	r7, #20
    70fa:	46bd      	mov	sp, r7
    70fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7100:	4770      	bx	lr

00007102 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    7102:	b480      	push	{r7}
    7104:	b085      	sub	sp, #20
    7106:	af00      	add	r7, sp, #0
    7108:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    710a:	687b      	ldr	r3, [r7, #4]
    710c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7110:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    7112:	7bfb      	ldrb	r3, [r7, #15]
    7114:	089b      	lsrs	r3, r3, #2
    7116:	b2db      	uxtb	r3, r3
    7118:	f003 0301 	and.w	r3, r3, #1
    711c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    711e:	7bfb      	ldrb	r3, [r7, #15]
    7120:	2b00      	cmp	r3, #0
    7122:	bf14      	ite	ne
    7124:	2301      	movne	r3, #1
    7126:	2300      	moveq	r3, #0
    7128:	b2db      	uxtb	r3, r3
}
    712a:	4618      	mov	r0, r3
    712c:	3714      	adds	r7, #20
    712e:	46bd      	mov	sp, r7
    7130:	f85d 7b04 	ldr.w	r7, [sp], #4
    7134:	4770      	bx	lr

00007136 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    7136:	b480      	push	{r7}
    7138:	b085      	sub	sp, #20
    713a:	af00      	add	r7, sp, #0
    713c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    713e:	687b      	ldr	r3, [r7, #4]
    7140:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7144:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    7146:	7bfb      	ldrb	r3, [r7, #15]
    7148:	08db      	lsrs	r3, r3, #3
    714a:	b2db      	uxtb	r3, r3
    714c:	f003 0301 	and.w	r3, r3, #1
    7150:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7152:	7bfb      	ldrb	r3, [r7, #15]
    7154:	2b00      	cmp	r3, #0
    7156:	bf14      	ite	ne
    7158:	2301      	movne	r3, #1
    715a:	2300      	moveq	r3, #0
    715c:	b2db      	uxtb	r3, r3
}
    715e:	4618      	mov	r0, r3
    7160:	3714      	adds	r7, #20
    7162:	46bd      	mov	sp, r7
    7164:	f85d 7b04 	ldr.w	r7, [sp], #4
    7168:	4770      	bx	lr

0000716a <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    716a:	b480      	push	{r7}
    716c:	b085      	sub	sp, #20
    716e:	af00      	add	r7, sp, #0
    7170:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7172:	687b      	ldr	r3, [r7, #4]
    7174:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7178:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    717a:	7bfb      	ldrb	r3, [r7, #15]
    717c:	091b      	lsrs	r3, r3, #4
    717e:	b2db      	uxtb	r3, r3
    7180:	f003 0301 	and.w	r3, r3, #1
    7184:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7186:	7bfb      	ldrb	r3, [r7, #15]
    7188:	2b00      	cmp	r3, #0
    718a:	bf14      	ite	ne
    718c:	2301      	movne	r3, #1
    718e:	2300      	moveq	r3, #0
    7190:	b2db      	uxtb	r3, r3
}
    7192:	4618      	mov	r0, r3
    7194:	3714      	adds	r7, #20
    7196:	46bd      	mov	sp, r7
    7198:	f85d 7b04 	ldr.w	r7, [sp], #4
    719c:	4770      	bx	lr
	...

000071a0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b082      	sub	sp, #8
    71a4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    71a6:	4b0a      	ldr	r3, [pc, #40]	; (71d0 <_oscctrl_init_sources+0x30>)
    71a8:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    71aa:	4a0a      	ldr	r2, [pc, #40]	; (71d4 <_oscctrl_init_sources+0x34>)
    71ac:	2101      	movs	r1, #1
    71ae:	6878      	ldr	r0, [r7, #4]
    71b0:	4b09      	ldr	r3, [pc, #36]	; (71d8 <_oscctrl_init_sources+0x38>)
    71b2:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    71b4:	bf00      	nop
    71b6:	6878      	ldr	r0, [r7, #4]
    71b8:	4b08      	ldr	r3, [pc, #32]	; (71dc <_oscctrl_init_sources+0x3c>)
    71ba:	4798      	blx	r3
    71bc:	4603      	mov	r3, r0
    71be:	f083 0301 	eor.w	r3, r3, #1
    71c2:	b2db      	uxtb	r3, r3
    71c4:	2b00      	cmp	r3, #0
    71c6:	d1f6      	bne.n	71b6 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    71c8:	bf00      	nop
    71ca:	3708      	adds	r7, #8
    71cc:	46bd      	mov	sp, r7
    71ce:	bd80      	pop	{r7, pc}
    71d0:	40001000 	.word	0x40001000
    71d4:	03002606 	.word	0x03002606
    71d8:	00006fe9 	.word	0x00006fe9
    71dc:	00006f73 	.word	0x00006f73

000071e0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    71e0:	b580      	push	{r7, lr}
    71e2:	b084      	sub	sp, #16
    71e4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    71e6:	4b6b      	ldr	r3, [pc, #428]	; (7394 <_oscctrl_init_referenced_generators+0x1b4>)
    71e8:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    71ea:	2204      	movs	r2, #4
    71ec:	2100      	movs	r1, #0
    71ee:	486a      	ldr	r0, [pc, #424]	; (7398 <_oscctrl_init_referenced_generators+0x1b8>)
    71f0:	4b6a      	ldr	r3, [pc, #424]	; (739c <_oscctrl_init_referenced_generators+0x1bc>)
    71f2:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    71f4:	bf00      	nop
    71f6:	4868      	ldr	r0, [pc, #416]	; (7398 <_oscctrl_init_referenced_generators+0x1b8>)
    71f8:	4b69      	ldr	r3, [pc, #420]	; (73a0 <_oscctrl_init_referenced_generators+0x1c0>)
    71fa:	4798      	blx	r3
    71fc:	4603      	mov	r3, r0
    71fe:	2b00      	cmp	r3, #0
    7200:	d1f9      	bne.n	71f6 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    7202:	2100      	movs	r1, #0
    7204:	68f8      	ldr	r0, [r7, #12]
    7206:	4b67      	ldr	r3, [pc, #412]	; (73a4 <_oscctrl_init_referenced_generators+0x1c4>)
    7208:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    720a:	4967      	ldr	r1, [pc, #412]	; (73a8 <_oscctrl_init_referenced_generators+0x1c8>)
    720c:	68f8      	ldr	r0, [r7, #12]
    720e:	4b67      	ldr	r3, [pc, #412]	; (73ac <_oscctrl_init_referenced_generators+0x1cc>)
    7210:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7212:	bf00      	nop
    7214:	68f8      	ldr	r0, [r7, #12]
    7216:	4b66      	ldr	r3, [pc, #408]	; (73b0 <_oscctrl_init_referenced_generators+0x1d0>)
    7218:	4798      	blx	r3
    721a:	4603      	mov	r3, r0
    721c:	2b00      	cmp	r3, #0
    721e:	d1f9      	bne.n	7214 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    7220:	2100      	movs	r1, #0
    7222:	68f8      	ldr	r0, [r7, #12]
    7224:	4b63      	ldr	r3, [pc, #396]	; (73b4 <_oscctrl_init_referenced_generators+0x1d4>)
    7226:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7228:	bf00      	nop
    722a:	68f8      	ldr	r0, [r7, #12]
    722c:	4b62      	ldr	r3, [pc, #392]	; (73b8 <_oscctrl_init_referenced_generators+0x1d8>)
    722e:	4798      	blx	r3
    7230:	4603      	mov	r3, r0
    7232:	2b00      	cmp	r3, #0
    7234:	d1f9      	bne.n	722a <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    7236:	2302      	movs	r3, #2
    7238:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    723a:	7afb      	ldrb	r3, [r7, #11]
    723c:	4619      	mov	r1, r3
    723e:	68f8      	ldr	r0, [r7, #12]
    7240:	4b58      	ldr	r3, [pc, #352]	; (73a4 <_oscctrl_init_referenced_generators+0x1c4>)
    7242:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    7244:	bf00      	nop
    7246:	68f8      	ldr	r0, [r7, #12]
    7248:	4b5c      	ldr	r3, [pc, #368]	; (73bc <_oscctrl_init_referenced_generators+0x1dc>)
    724a:	4798      	blx	r3
    724c:	4603      	mov	r3, r0
    724e:	2b00      	cmp	r3, #0
    7250:	d1f9      	bne.n	7246 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    7252:	68f8      	ldr	r0, [r7, #12]
    7254:	4b5a      	ldr	r3, [pc, #360]	; (73c0 <_oscctrl_init_referenced_generators+0x1e0>)
    7256:	4798      	blx	r3
    7258:	4603      	mov	r3, r0
    725a:	4619      	mov	r1, r3
    725c:	68f8      	ldr	r0, [r7, #12]
    725e:	4b59      	ldr	r3, [pc, #356]	; (73c4 <_oscctrl_init_referenced_generators+0x1e4>)
    7260:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7262:	bf00      	nop
    7264:	68f8      	ldr	r0, [r7, #12]
    7266:	4b58      	ldr	r3, [pc, #352]	; (73c8 <_oscctrl_init_referenced_generators+0x1e8>)
    7268:	4798      	blx	r3
    726a:	4603      	mov	r3, r0
    726c:	2b00      	cmp	r3, #0
    726e:	d1f9      	bne.n	7264 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    7270:	2319      	movs	r3, #25
    7272:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    7274:	7afb      	ldrb	r3, [r7, #11]
    7276:	4619      	mov	r1, r3
    7278:	68f8      	ldr	r0, [r7, #12]
    727a:	4b4e      	ldr	r3, [pc, #312]	; (73b4 <_oscctrl_init_referenced_generators+0x1d4>)
    727c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    727e:	bf00      	nop
    7280:	68f8      	ldr	r0, [r7, #12]
    7282:	4b4d      	ldr	r3, [pc, #308]	; (73b8 <_oscctrl_init_referenced_generators+0x1d8>)
    7284:	4798      	blx	r3
    7286:	4603      	mov	r3, r0
    7288:	2b00      	cmp	r3, #0
    728a:	d1f9      	bne.n	7280 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    728c:	2245      	movs	r2, #69	; 0x45
    728e:	2101      	movs	r1, #1
    7290:	4841      	ldr	r0, [pc, #260]	; (7398 <_oscctrl_init_referenced_generators+0x1b8>)
    7292:	4b4e      	ldr	r3, [pc, #312]	; (73cc <_oscctrl_init_referenced_generators+0x1ec>)
    7294:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    7296:	223b      	movs	r2, #59	; 0x3b
    7298:	2100      	movs	r1, #0
    729a:	68f8      	ldr	r0, [r7, #12]
    729c:	4b4c      	ldr	r3, [pc, #304]	; (73d0 <_oscctrl_init_referenced_generators+0x1f0>)
    729e:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    72a0:	f44f 6201 	mov.w	r2, #2064	; 0x810
    72a4:	2100      	movs	r1, #0
    72a6:	68f8      	ldr	r0, [r7, #12]
    72a8:	4b4a      	ldr	r3, [pc, #296]	; (73d4 <_oscctrl_init_referenced_generators+0x1f4>)
    72aa:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    72ac:	2242      	movs	r2, #66	; 0x42
    72ae:	2100      	movs	r1, #0
    72b0:	68f8      	ldr	r0, [r7, #12]
    72b2:	4b49      	ldr	r3, [pc, #292]	; (73d8 <_oscctrl_init_referenced_generators+0x1f8>)
    72b4:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    72b6:	4a49      	ldr	r2, [pc, #292]	; (73dc <_oscctrl_init_referenced_generators+0x1fc>)
    72b8:	2101      	movs	r1, #1
    72ba:	68f8      	ldr	r0, [r7, #12]
    72bc:	4b44      	ldr	r3, [pc, #272]	; (73d0 <_oscctrl_init_referenced_generators+0x1f0>)
    72be:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    72c0:	f44f 6203 	mov.w	r2, #2096	; 0x830
    72c4:	2101      	movs	r1, #1
    72c6:	68f8      	ldr	r0, [r7, #12]
    72c8:	4b42      	ldr	r3, [pc, #264]	; (73d4 <_oscctrl_init_referenced_generators+0x1f4>)
    72ca:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    72cc:	2202      	movs	r2, #2
    72ce:	2101      	movs	r1, #1
    72d0:	68f8      	ldr	r0, [r7, #12]
    72d2:	4b41      	ldr	r3, [pc, #260]	; (73d8 <_oscctrl_init_referenced_generators+0x1f8>)
    72d4:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    72d6:	68f8      	ldr	r0, [r7, #12]
    72d8:	4b41      	ldr	r3, [pc, #260]	; (73e0 <_oscctrl_init_referenced_generators+0x200>)
    72da:	4798      	blx	r3
    72dc:	4603      	mov	r3, r0
    72de:	2b00      	cmp	r3, #0
    72e0:	d00c      	beq.n	72fc <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    72e2:	f44f 6310 	mov.w	r3, #2304	; 0x900
    72e6:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    72e8:	bf00      	nop
    72ea:	6879      	ldr	r1, [r7, #4]
    72ec:	68f8      	ldr	r0, [r7, #12]
    72ee:	4b3d      	ldr	r3, [pc, #244]	; (73e4 <_oscctrl_init_referenced_generators+0x204>)
    72f0:	4798      	blx	r3
    72f2:	4602      	mov	r2, r0
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	429a      	cmp	r2, r3
    72f8:	d1f7      	bne.n	72ea <_oscctrl_init_referenced_generators+0x10a>
    72fa:	e009      	b.n	7310 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    72fc:	bf00      	nop
    72fe:	68f8      	ldr	r0, [r7, #12]
    7300:	4b39      	ldr	r3, [pc, #228]	; (73e8 <_oscctrl_init_referenced_generators+0x208>)
    7302:	4798      	blx	r3
    7304:	4603      	mov	r3, r0
    7306:	f083 0301 	eor.w	r3, r3, #1
    730a:	b2db      	uxtb	r3, r3
    730c:	2b00      	cmp	r3, #0
    730e:	d1f6      	bne.n	72fe <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    7310:	bf00      	nop
    7312:	2100      	movs	r1, #0
    7314:	68f8      	ldr	r0, [r7, #12]
    7316:	4b35      	ldr	r3, [pc, #212]	; (73ec <_oscctrl_init_referenced_generators+0x20c>)
    7318:	4798      	blx	r3
    731a:	4603      	mov	r3, r0
    731c:	f083 0301 	eor.w	r3, r3, #1
    7320:	b2db      	uxtb	r3, r3
    7322:	2b00      	cmp	r3, #0
    7324:	d009      	beq.n	733a <_oscctrl_init_referenced_generators+0x15a>
    7326:	2100      	movs	r1, #0
    7328:	68f8      	ldr	r0, [r7, #12]
    732a:	4b31      	ldr	r3, [pc, #196]	; (73f0 <_oscctrl_init_referenced_generators+0x210>)
    732c:	4798      	blx	r3
    732e:	4603      	mov	r3, r0
    7330:	f083 0301 	eor.w	r3, r3, #1
    7334:	b2db      	uxtb	r3, r3
    7336:	2b00      	cmp	r3, #0
    7338:	d1eb      	bne.n	7312 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    733a:	bf00      	nop
    733c:	2101      	movs	r1, #1
    733e:	68f8      	ldr	r0, [r7, #12]
    7340:	4b2a      	ldr	r3, [pc, #168]	; (73ec <_oscctrl_init_referenced_generators+0x20c>)
    7342:	4798      	blx	r3
    7344:	4603      	mov	r3, r0
    7346:	f083 0301 	eor.w	r3, r3, #1
    734a:	b2db      	uxtb	r3, r3
    734c:	2b00      	cmp	r3, #0
    734e:	d009      	beq.n	7364 <_oscctrl_init_referenced_generators+0x184>
    7350:	2101      	movs	r1, #1
    7352:	68f8      	ldr	r0, [r7, #12]
    7354:	4b26      	ldr	r3, [pc, #152]	; (73f0 <_oscctrl_init_referenced_generators+0x210>)
    7356:	4798      	blx	r3
    7358:	4603      	mov	r3, r0
    735a:	f083 0301 	eor.w	r3, r3, #1
    735e:	b2db      	uxtb	r3, r3
    7360:	2b00      	cmp	r3, #0
    7362:	d1eb      	bne.n	733c <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    7364:	bf00      	nop
    7366:	480c      	ldr	r0, [pc, #48]	; (7398 <_oscctrl_init_referenced_generators+0x1b8>)
    7368:	4b22      	ldr	r3, [pc, #136]	; (73f4 <_oscctrl_init_referenced_generators+0x214>)
    736a:	4798      	blx	r3
    736c:	4603      	mov	r3, r0
    736e:	2b00      	cmp	r3, #0
    7370:	d1f9      	bne.n	7366 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    7372:	2207      	movs	r2, #7
    7374:	2100      	movs	r1, #0
    7376:	4808      	ldr	r0, [pc, #32]	; (7398 <_oscctrl_init_referenced_generators+0x1b8>)
    7378:	4b08      	ldr	r3, [pc, #32]	; (739c <_oscctrl_init_referenced_generators+0x1bc>)
    737a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    737c:	bf00      	nop
    737e:	4806      	ldr	r0, [pc, #24]	; (7398 <_oscctrl_init_referenced_generators+0x1b8>)
    7380:	4b07      	ldr	r3, [pc, #28]	; (73a0 <_oscctrl_init_referenced_generators+0x1c0>)
    7382:	4798      	blx	r3
    7384:	4603      	mov	r3, r0
    7386:	2b00      	cmp	r3, #0
    7388:	d1f9      	bne.n	737e <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    738a:	bf00      	nop
    738c:	3710      	adds	r7, #16
    738e:	46bd      	mov	sp, r7
    7390:	bd80      	pop	{r7, pc}
    7392:	bf00      	nop
    7394:	40001000 	.word	0x40001000
    7398:	40001c00 	.word	0x40001c00
    739c:	00006dad 	.word	0x00006dad
    73a0:	00006d6d 	.word	0x00006d6d
    73a4:	00007011 	.word	0x00007011
    73a8:	0401bb80 	.word	0x0401bb80
    73ac:	000070b3 	.word	0x000070b3
    73b0:	0000716b 	.word	0x0000716b
    73b4:	0000705f 	.word	0x0000705f
    73b8:	00007103 	.word	0x00007103
    73bc:	000070cf 	.word	0x000070cf
    73c0:	0000709b 	.word	0x0000709b
    73c4:	0000707f 	.word	0x0000707f
    73c8:	00007137 	.word	0x00007137
    73cc:	00006dfd 	.word	0x00006dfd
    73d0:	00006f09 	.word	0x00006f09
    73d4:	00006f45 	.word	0x00006f45
    73d8:	00006ecd 	.word	0x00006ecd
    73dc:	000407a0 	.word	0x000407a0
    73e0:	0000702f 	.word	0x0000702f
    73e4:	00006fc3 	.word	0x00006fc3
    73e8:	00006f9b 	.word	0x00006f9b
    73ec:	00006e59 	.word	0x00006e59
    73f0:	00006e91 	.word	0x00006e91
    73f4:	00006d95 	.word	0x00006d95

000073f8 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    73f8:	b480      	push	{r7}
    73fa:	b083      	sub	sp, #12
    73fc:	af00      	add	r7, sp, #0
    73fe:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    7400:	687b      	ldr	r3, [r7, #4]
    7402:	69db      	ldr	r3, [r3, #28]
    7404:	0a9b      	lsrs	r3, r3, #10
    7406:	f003 0301 	and.w	r3, r3, #1
    740a:	2b00      	cmp	r3, #0
    740c:	bf14      	ite	ne
    740e:	2301      	movne	r3, #1
    7410:	2300      	moveq	r3, #0
    7412:	b2db      	uxtb	r3, r3
}
    7414:	4618      	mov	r0, r3
    7416:	370c      	adds	r7, #12
    7418:	46bd      	mov	sp, r7
    741a:	f85d 7b04 	ldr.w	r7, [sp], #4
    741e:	4770      	bx	lr

00007420 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    7420:	b480      	push	{r7}
    7422:	b083      	sub	sp, #12
    7424:	af00      	add	r7, sp, #0
    7426:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    7428:	687b      	ldr	r3, [r7, #4]
    742a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    742e:	61da      	str	r2, [r3, #28]
}
    7430:	bf00      	nop
    7432:	370c      	adds	r7, #12
    7434:	46bd      	mov	sp, r7
    7436:	f85d 7b04 	ldr.w	r7, [sp], #4
    743a:	4770      	bx	lr

0000743c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    743c:	b480      	push	{r7}
    743e:	b083      	sub	sp, #12
    7440:	af00      	add	r7, sp, #0
    7442:	6078      	str	r0, [r7, #4]
    7444:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7446:	687b      	ldr	r3, [r7, #4]
    7448:	683a      	ldr	r2, [r7, #0]
    744a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    744c:	bf00      	nop
    744e:	370c      	adds	r7, #12
    7450:	46bd      	mov	sp, r7
    7452:	f85d 7b04 	ldr.w	r7, [sp], #4
    7456:	4770      	bx	lr

00007458 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7458:	b480      	push	{r7}
    745a:	b083      	sub	sp, #12
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
    7460:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    7462:	687b      	ldr	r3, [r7, #4]
    7464:	683a      	ldr	r2, [r7, #0]
    7466:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7468:	bf00      	nop
    746a:	370c      	adds	r7, #12
    746c:	46bd      	mov	sp, r7
    746e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7472:	4770      	bx	lr

00007474 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    7474:	b480      	push	{r7}
    7476:	b083      	sub	sp, #12
    7478:	af00      	add	r7, sp, #0
    747a:	6078      	str	r0, [r7, #4]
    747c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    747e:	687b      	ldr	r3, [r7, #4]
    7480:	683a      	ldr	r2, [r7, #0]
    7482:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7484:	bf00      	nop
    7486:	370c      	adds	r7, #12
    7488:	46bd      	mov	sp, r7
    748a:	f85d 7b04 	ldr.w	r7, [sp], #4
    748e:	4770      	bx	lr

00007490 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    7490:	b480      	push	{r7}
    7492:	b083      	sub	sp, #12
    7494:	af00      	add	r7, sp, #0
    7496:	6078      	str	r0, [r7, #4]
    7498:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    749a:	687b      	ldr	r3, [r7, #4]
    749c:	683a      	ldr	r2, [r7, #0]
    749e:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    74a0:	bf00      	nop
    74a2:	370c      	adds	r7, #12
    74a4:	46bd      	mov	sp, r7
    74a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74aa:	4770      	bx	lr

000074ac <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    74ac:	b480      	push	{r7}
    74ae:	b085      	sub	sp, #20
    74b0:	af00      	add	r7, sp, #0
    74b2:	6078      	str	r0, [r7, #4]
    74b4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    74b6:	687b      	ldr	r3, [r7, #4]
    74b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    74ba:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    74bc:	68fb      	ldr	r3, [r7, #12]
    74be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    74c2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    74c4:	683b      	ldr	r3, [r7, #0]
    74c6:	b2db      	uxtb	r3, r3
    74c8:	68fa      	ldr	r2, [r7, #12]
    74ca:	4313      	orrs	r3, r2
    74cc:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    74ce:	687b      	ldr	r3, [r7, #4]
    74d0:	68fa      	ldr	r2, [r7, #12]
    74d2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    74d4:	bf00      	nop
    74d6:	3714      	adds	r7, #20
    74d8:	46bd      	mov	sp, r7
    74da:	f85d 7b04 	ldr.w	r7, [sp], #4
    74de:	4770      	bx	lr

000074e0 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    74e0:	b480      	push	{r7}
    74e2:	b085      	sub	sp, #20
    74e4:	af00      	add	r7, sp, #0
    74e6:	6078      	str	r0, [r7, #4]
    74e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    74ea:	687b      	ldr	r3, [r7, #4]
    74ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    74ee:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    74f0:	68fb      	ldr	r3, [r7, #12]
    74f2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    74f6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    74f8:	683b      	ldr	r3, [r7, #0]
    74fa:	041b      	lsls	r3, r3, #16
    74fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    7500:	68fa      	ldr	r2, [r7, #12]
    7502:	4313      	orrs	r3, r2
    7504:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7506:	687b      	ldr	r3, [r7, #4]
    7508:	68fa      	ldr	r2, [r7, #12]
    750a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    750c:	bf00      	nop
    750e:	3714      	adds	r7, #20
    7510:	46bd      	mov	sp, r7
    7512:	f85d 7b04 	ldr.w	r7, [sp], #4
    7516:	4770      	bx	lr

00007518 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    7518:	b480      	push	{r7}
    751a:	b083      	sub	sp, #12
    751c:	af00      	add	r7, sp, #0
    751e:	6078      	str	r0, [r7, #4]
    7520:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    7522:	687b      	ldr	r3, [r7, #4]
    7524:	683a      	ldr	r2, [r7, #0]
    7526:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7528:	bf00      	nop
    752a:	370c      	adds	r7, #12
    752c:	46bd      	mov	sp, r7
    752e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7532:	4770      	bx	lr

00007534 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    7534:	b480      	push	{r7}
    7536:	b083      	sub	sp, #12
    7538:	af00      	add	r7, sp, #0
    753a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    753c:	687b      	ldr	r3, [r7, #4]
    753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    7540:	4618      	mov	r0, r3
    7542:	370c      	adds	r7, #12
    7544:	46bd      	mov	sp, r7
    7546:	f85d 7b04 	ldr.w	r7, [sp], #4
    754a:	4770      	bx	lr

0000754c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    754c:	b480      	push	{r7}
    754e:	b085      	sub	sp, #20
    7550:	af00      	add	r7, sp, #0
    7552:	60f8      	str	r0, [r7, #12]
    7554:	60b9      	str	r1, [r7, #8]
    7556:	607a      	str	r2, [r7, #4]
	while (count--) {
    7558:	e007      	b.n	756a <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    755a:	68fb      	ldr	r3, [r7, #12]
    755c:	1c5a      	adds	r2, r3, #1
    755e:	60fa      	str	r2, [r7, #12]
    7560:	68ba      	ldr	r2, [r7, #8]
    7562:	1c51      	adds	r1, r2, #1
    7564:	60b9      	str	r1, [r7, #8]
    7566:	7812      	ldrb	r2, [r2, #0]
    7568:	701a      	strb	r2, [r3, #0]
	while (count--) {
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	1e5a      	subs	r2, r3, #1
    756e:	607a      	str	r2, [r7, #4]
    7570:	2b00      	cmp	r3, #0
    7572:	d1f2      	bne.n	755a <_qspi_memcpy+0xe>
	}
}
    7574:	bf00      	nop
    7576:	3714      	adds	r7, #20
    7578:	46bd      	mov	sp, r7
    757a:	f85d 7b04 	ldr.w	r7, [sp], #4
    757e:	4770      	bx	lr

00007580 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    7580:	b580      	push	{r7, lr}
    7582:	b082      	sub	sp, #8
    7584:	af00      	add	r7, sp, #0
    7586:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7588:	4903      	ldr	r1, [pc, #12]	; (7598 <_qspi_end_transfer+0x18>)
    758a:	6878      	ldr	r0, [r7, #4]
    758c:	4b03      	ldr	r3, [pc, #12]	; (759c <_qspi_end_transfer+0x1c>)
    758e:	4798      	blx	r3
}
    7590:	bf00      	nop
    7592:	3708      	adds	r7, #8
    7594:	46bd      	mov	sp, r7
    7596:	bd80      	pop	{r7, pc}
    7598:	01000002 	.word	0x01000002
    759c:	0000743d 	.word	0x0000743d

000075a0 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    75a0:	b580      	push	{r7, lr}
    75a2:	b082      	sub	sp, #8
    75a4:	af00      	add	r7, sp, #0
    75a6:	6078      	str	r0, [r7, #4]
    75a8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    75aa:	687b      	ldr	r3, [r7, #4]
    75ac:	2b00      	cmp	r3, #0
    75ae:	d004      	beq.n	75ba <_qspi_sync_init+0x1a>
    75b0:	683b      	ldr	r3, [r7, #0]
    75b2:	2b00      	cmp	r3, #0
    75b4:	d001      	beq.n	75ba <_qspi_sync_init+0x1a>
    75b6:	2301      	movs	r3, #1
    75b8:	e000      	b.n	75bc <_qspi_sync_init+0x1c>
    75ba:	2300      	movs	r3, #0
    75bc:	f003 0301 	and.w	r3, r3, #1
    75c0:	b2db      	uxtb	r3, r3
    75c2:	2240      	movs	r2, #64	; 0x40
    75c4:	490c      	ldr	r1, [pc, #48]	; (75f8 <_qspi_sync_init+0x58>)
    75c6:	4618      	mov	r0, r3
    75c8:	4b0c      	ldr	r3, [pc, #48]	; (75fc <_qspi_sync_init+0x5c>)
    75ca:	4798      	blx	r3
	dev->prvt = hw;
    75cc:	687b      	ldr	r3, [r7, #4]
    75ce:	683a      	ldr	r2, [r7, #0]
    75d0:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	681b      	ldr	r3, [r3, #0]
    75d6:	2101      	movs	r1, #1
    75d8:	4618      	mov	r0, r3
    75da:	4b09      	ldr	r3, [pc, #36]	; (7600 <_qspi_sync_init+0x60>)
    75dc:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    75de:	4909      	ldr	r1, [pc, #36]	; (7604 <_qspi_sync_init+0x64>)
    75e0:	6838      	ldr	r0, [r7, #0]
    75e2:	4b09      	ldr	r3, [pc, #36]	; (7608 <_qspi_sync_init+0x68>)
    75e4:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    75e6:	4909      	ldr	r1, [pc, #36]	; (760c <_qspi_sync_init+0x6c>)
    75e8:	6838      	ldr	r0, [r7, #0]
    75ea:	4b09      	ldr	r3, [pc, #36]	; (7610 <_qspi_sync_init+0x70>)
    75ec:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    75ee:	2300      	movs	r3, #0
}
    75f0:	4618      	mov	r0, r3
    75f2:	3708      	adds	r7, #8
    75f4:	46bd      	mov	sp, r7
    75f6:	bd80      	pop	{r7, pc}
    75f8:	00011bf8 	.word	0x00011bf8
    75fc:	0000579d 	.word	0x0000579d
    7600:	0000743d 	.word	0x0000743d
    7604:	06000011 	.word	0x06000011
    7608:	00007459 	.word	0x00007459
    760c:	00241300 	.word	0x00241300
    7610:	00007475 	.word	0x00007475

00007614 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    7614:	b580      	push	{r7, lr}
    7616:	b082      	sub	sp, #8
    7618:	af00      	add	r7, sp, #0
    761a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	681b      	ldr	r3, [r3, #0]
    7620:	2102      	movs	r1, #2
    7622:	4618      	mov	r0, r3
    7624:	4b03      	ldr	r3, [pc, #12]	; (7634 <_qspi_sync_enable+0x20>)
    7626:	4798      	blx	r3
	return ERR_NONE;
    7628:	2300      	movs	r3, #0
}
    762a:	4618      	mov	r0, r3
    762c:	3708      	adds	r7, #8
    762e:	46bd      	mov	sp, r7
    7630:	bd80      	pop	{r7, pc}
    7632:	bf00      	nop
    7634:	0000743d 	.word	0x0000743d

00007638 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    7638:	b580      	push	{r7, lr}
    763a:	b082      	sub	sp, #8
    763c:	af00      	add	r7, sp, #0
    763e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	681b      	ldr	r3, [r3, #0]
    7644:	2100      	movs	r1, #0
    7646:	4618      	mov	r0, r3
    7648:	4b03      	ldr	r3, [pc, #12]	; (7658 <_qspi_sync_disable+0x20>)
    764a:	4798      	blx	r3
	return ERR_NONE;
    764c:	2300      	movs	r3, #0
}
    764e:	4618      	mov	r0, r3
    7650:	3708      	adds	r7, #8
    7652:	46bd      	mov	sp, r7
    7654:	bd80      	pop	{r7, pc}
    7656:	bf00      	nop
    7658:	0000743d 	.word	0x0000743d

0000765c <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    765c:	b580      	push	{r7, lr}
    765e:	b084      	sub	sp, #16
    7660:	af00      	add	r7, sp, #0
    7662:	6078      	str	r0, [r7, #4]
    7664:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    7666:	687b      	ldr	r3, [r7, #4]
    7668:	681b      	ldr	r3, [r3, #0]
    766a:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    766c:	683b      	ldr	r3, [r7, #0]
    766e:	781b      	ldrb	r3, [r3, #0]
    7670:	f003 0320 	and.w	r3, r3, #32
    7674:	b2db      	uxtb	r3, r3
    7676:	2b00      	cmp	r3, #0
    7678:	d005      	beq.n	7686 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    767a:	683b      	ldr	r3, [r7, #0]
    767c:	689b      	ldr	r3, [r3, #8]
    767e:	4619      	mov	r1, r3
    7680:	68f8      	ldr	r0, [r7, #12]
    7682:	4b13      	ldr	r3, [pc, #76]	; (76d0 <_qspi_sync_command_set_ifr+0x74>)
    7684:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    7686:	683b      	ldr	r3, [r7, #0]
    7688:	781b      	ldrb	r3, [r3, #0]
    768a:	f003 0310 	and.w	r3, r3, #16
    768e:	b2db      	uxtb	r3, r3
    7690:	2b00      	cmp	r3, #0
    7692:	d005      	beq.n	76a0 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    7694:	683b      	ldr	r3, [r7, #0]
    7696:	791b      	ldrb	r3, [r3, #4]
    7698:	4619      	mov	r1, r3
    769a:	68f8      	ldr	r0, [r7, #12]
    769c:	4b0d      	ldr	r3, [pc, #52]	; (76d4 <_qspi_sync_command_set_ifr+0x78>)
    769e:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    76a0:	683b      	ldr	r3, [r7, #0]
    76a2:	781b      	ldrb	r3, [r3, #0]
    76a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    76a8:	b2db      	uxtb	r3, r3
    76aa:	2b00      	cmp	r3, #0
    76ac:	d005      	beq.n	76ba <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    76ae:	683b      	ldr	r3, [r7, #0]
    76b0:	795b      	ldrb	r3, [r3, #5]
    76b2:	4619      	mov	r1, r3
    76b4:	68f8      	ldr	r0, [r7, #12]
    76b6:	4b08      	ldr	r3, [pc, #32]	; (76d8 <_qspi_sync_command_set_ifr+0x7c>)
    76b8:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    76ba:	683b      	ldr	r3, [r7, #0]
    76bc:	681b      	ldr	r3, [r3, #0]
    76be:	4619      	mov	r1, r3
    76c0:	68f8      	ldr	r0, [r7, #12]
    76c2:	4b06      	ldr	r3, [pc, #24]	; (76dc <_qspi_sync_command_set_ifr+0x80>)
    76c4:	4798      	blx	r3
}
    76c6:	bf00      	nop
    76c8:	3710      	adds	r7, #16
    76ca:	46bd      	mov	sp, r7
    76cc:	bd80      	pop	{r7, pc}
    76ce:	bf00      	nop
    76d0:	00007491 	.word	0x00007491
    76d4:	000074ad 	.word	0x000074ad
    76d8:	000074e1 	.word	0x000074e1
    76dc:	00007519 	.word	0x00007519

000076e0 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    76e0:	b580      	push	{r7, lr}
    76e2:	b084      	sub	sp, #16
    76e4:	af00      	add	r7, sp, #0
    76e6:	6078      	str	r0, [r7, #4]
    76e8:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	681b      	ldr	r3, [r3, #0]
    76ee:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    76f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    76f4:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    76f6:	683b      	ldr	r3, [r7, #0]
    76f8:	781b      	ldrb	r3, [r3, #0]
    76fa:	f003 0320 	and.w	r3, r3, #32
    76fe:	b2db      	uxtb	r3, r3
    7700:	2b00      	cmp	r3, #0
    7702:	d004      	beq.n	770e <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    7704:	683b      	ldr	r3, [r7, #0]
    7706:	689b      	ldr	r3, [r3, #8]
    7708:	68fa      	ldr	r2, [r7, #12]
    770a:	4413      	add	r3, r2
    770c:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    770e:	68b8      	ldr	r0, [r7, #8]
    7710:	4b18      	ldr	r3, [pc, #96]	; (7774 <_qspi_sync_run_transfer+0x94>)
    7712:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    7714:	683b      	ldr	r3, [r7, #0]
    7716:	691b      	ldr	r3, [r3, #16]
    7718:	2b00      	cmp	r3, #0
    771a:	d103      	bne.n	7724 <_qspi_sync_run_transfer+0x44>
    771c:	683b      	ldr	r3, [r7, #0]
    771e:	695b      	ldr	r3, [r3, #20]
    7720:	2b00      	cmp	r3, #0
    7722:	d001      	beq.n	7728 <_qspi_sync_run_transfer+0x48>
    7724:	2301      	movs	r3, #1
    7726:	e000      	b.n	772a <_qspi_sync_run_transfer+0x4a>
    7728:	2300      	movs	r3, #0
    772a:	f003 0301 	and.w	r3, r3, #1
    772e:	b2db      	uxtb	r3, r3
    7730:	2282      	movs	r2, #130	; 0x82
    7732:	4911      	ldr	r1, [pc, #68]	; (7778 <_qspi_sync_run_transfer+0x98>)
    7734:	4618      	mov	r0, r3
    7736:	4b11      	ldr	r3, [pc, #68]	; (777c <_qspi_sync_run_transfer+0x9c>)
    7738:	4798      	blx	r3

	if (cmd->tx_buf) {
    773a:	683b      	ldr	r3, [r7, #0]
    773c:	691b      	ldr	r3, [r3, #16]
    773e:	2b00      	cmp	r3, #0
    7740:	d008      	beq.n	7754 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    7742:	683b      	ldr	r3, [r7, #0]
    7744:	6919      	ldr	r1, [r3, #16]
    7746:	683b      	ldr	r3, [r7, #0]
    7748:	68db      	ldr	r3, [r3, #12]
    774a:	461a      	mov	r2, r3
    774c:	68f8      	ldr	r0, [r7, #12]
    774e:	4b0c      	ldr	r3, [pc, #48]	; (7780 <_qspi_sync_run_transfer+0xa0>)
    7750:	4798      	blx	r3
    7752:	e007      	b.n	7764 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    7754:	683b      	ldr	r3, [r7, #0]
    7756:	6958      	ldr	r0, [r3, #20]
    7758:	683b      	ldr	r3, [r7, #0]
    775a:	68db      	ldr	r3, [r3, #12]
    775c:	461a      	mov	r2, r3
    775e:	68f9      	ldr	r1, [r7, #12]
    7760:	4b07      	ldr	r3, [pc, #28]	; (7780 <_qspi_sync_run_transfer+0xa0>)
    7762:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    7764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7768:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    776c:	bf00      	nop
    776e:	3710      	adds	r7, #16
    7770:	46bd      	mov	sp, r7
    7772:	bd80      	pop	{r7, pc}
    7774:	00007535 	.word	0x00007535
    7778:	00011bf8 	.word	0x00011bf8
    777c:	0000579d 	.word	0x0000579d
    7780:	0000754d 	.word	0x0000754d

00007784 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7784:	b580      	push	{r7, lr}
    7786:	b082      	sub	sp, #8
    7788:	af00      	add	r7, sp, #0
    778a:	6078      	str	r0, [r7, #4]
    778c:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    778e:	6839      	ldr	r1, [r7, #0]
    7790:	6878      	ldr	r0, [r7, #4]
    7792:	4b14      	ldr	r3, [pc, #80]	; (77e4 <_qspi_sync_serial_run_command+0x60>)
    7794:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    7796:	683b      	ldr	r3, [r7, #0]
    7798:	781b      	ldrb	r3, [r3, #0]
    779a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    779e:	b2db      	uxtb	r3, r3
    77a0:	2b00      	cmp	r3, #0
    77a2:	d003      	beq.n	77ac <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    77a4:	6839      	ldr	r1, [r7, #0]
    77a6:	6878      	ldr	r0, [r7, #4]
    77a8:	4b0f      	ldr	r3, [pc, #60]	; (77e8 <_qspi_sync_serial_run_command+0x64>)
    77aa:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    77ac:	687b      	ldr	r3, [r7, #4]
    77ae:	681b      	ldr	r3, [r3, #0]
    77b0:	4618      	mov	r0, r3
    77b2:	4b0e      	ldr	r3, [pc, #56]	; (77ec <_qspi_sync_serial_run_command+0x68>)
    77b4:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    77b6:	bf00      	nop
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	681b      	ldr	r3, [r3, #0]
    77bc:	4618      	mov	r0, r3
    77be:	4b0c      	ldr	r3, [pc, #48]	; (77f0 <_qspi_sync_serial_run_command+0x6c>)
    77c0:	4798      	blx	r3
    77c2:	4603      	mov	r3, r0
    77c4:	f083 0301 	eor.w	r3, r3, #1
    77c8:	b2db      	uxtb	r3, r3
    77ca:	2b00      	cmp	r3, #0
    77cc:	d1f4      	bne.n	77b8 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    77ce:	687b      	ldr	r3, [r7, #4]
    77d0:	681b      	ldr	r3, [r3, #0]
    77d2:	4618      	mov	r0, r3
    77d4:	4b07      	ldr	r3, [pc, #28]	; (77f4 <_qspi_sync_serial_run_command+0x70>)
    77d6:	4798      	blx	r3
	return ERR_NONE;
    77d8:	2300      	movs	r3, #0
}
    77da:	4618      	mov	r0, r3
    77dc:	3708      	adds	r7, #8
    77de:	46bd      	mov	sp, r7
    77e0:	bd80      	pop	{r7, pc}
    77e2:	bf00      	nop
    77e4:	0000765d 	.word	0x0000765d
    77e8:	000076e1 	.word	0x000076e1
    77ec:	00007581 	.word	0x00007581
    77f0:	000073f9 	.word	0x000073f9
    77f4:	00007421 	.word	0x00007421

000077f8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    77f8:	b480      	push	{r7}
    77fa:	b083      	sub	sp, #12
    77fc:	af00      	add	r7, sp, #0
    77fe:	6078      	str	r0, [r7, #4]
    7800:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    7802:	bf00      	nop
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	691a      	ldr	r2, [r3, #16]
    7808:	683b      	ldr	r3, [r7, #0]
    780a:	4013      	ands	r3, r2
    780c:	2b00      	cmp	r3, #0
    780e:	d1f9      	bne.n	7804 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    7810:	bf00      	nop
    7812:	370c      	adds	r7, #12
    7814:	46bd      	mov	sp, r7
    7816:	f85d 7b04 	ldr.w	r7, [sp], #4
    781a:	4770      	bx	lr

0000781c <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    781c:	b480      	push	{r7}
    781e:	b083      	sub	sp, #12
    7820:	af00      	add	r7, sp, #0
    7822:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    7824:	687b      	ldr	r3, [r7, #4]
    7826:	f44f 7280 	mov.w	r2, #256	; 0x100
    782a:	819a      	strh	r2, [r3, #12]
}
    782c:	bf00      	nop
    782e:	370c      	adds	r7, #12
    7830:	46bd      	mov	sp, r7
    7832:	f85d 7b04 	ldr.w	r7, [sp], #4
    7836:	4770      	bx	lr

00007838 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    7838:	b480      	push	{r7}
    783a:	b083      	sub	sp, #12
    783c:	af00      	add	r7, sp, #0
    783e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7846:	819a      	strh	r2, [r3, #12]
}
    7848:	bf00      	nop
    784a:	370c      	adds	r7, #12
    784c:	46bd      	mov	sp, r7
    784e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7852:	4770      	bx	lr

00007854 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    7854:	b480      	push	{r7}
    7856:	b083      	sub	sp, #12
    7858:	af00      	add	r7, sp, #0
    785a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    785c:	687b      	ldr	r3, [r7, #4]
    785e:	899b      	ldrh	r3, [r3, #12]
    7860:	b29b      	uxth	r3, r3
}
    7862:	4618      	mov	r0, r3
    7864:	370c      	adds	r7, #12
    7866:	46bd      	mov	sp, r7
    7868:	f85d 7b04 	ldr.w	r7, [sp], #4
    786c:	4770      	bx	lr

0000786e <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    786e:	b480      	push	{r7}
    7870:	b083      	sub	sp, #12
    7872:	af00      	add	r7, sp, #0
    7874:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	895b      	ldrh	r3, [r3, #10]
    787a:	b29b      	uxth	r3, r3
}
    787c:	4618      	mov	r0, r3
    787e:	370c      	adds	r7, #12
    7880:	46bd      	mov	sp, r7
    7882:	f85d 7b04 	ldr.w	r7, [sp], #4
    7886:	4770      	bx	lr

00007888 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    7888:	b580      	push	{r7, lr}
    788a:	b082      	sub	sp, #8
    788c:	af00      	add	r7, sp, #0
    788e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    7890:	687b      	ldr	r3, [r7, #4]
    7892:	881b      	ldrh	r3, [r3, #0]
    7894:	b29b      	uxth	r3, r3
    7896:	f043 0301 	orr.w	r3, r3, #1
    789a:	b29a      	uxth	r2, r3
    789c:	687b      	ldr	r3, [r7, #4]
    789e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    78a0:	2101      	movs	r1, #1
    78a2:	6878      	ldr	r0, [r7, #4]
    78a4:	4b02      	ldr	r3, [pc, #8]	; (78b0 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    78a6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    78a8:	bf00      	nop
    78aa:	3708      	adds	r7, #8
    78ac:	46bd      	mov	sp, r7
    78ae:	bd80      	pop	{r7, pc}
    78b0:	000077f9 	.word	0x000077f9

000078b4 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    78b4:	b580      	push	{r7, lr}
    78b6:	b084      	sub	sp, #16
    78b8:	af00      	add	r7, sp, #0
    78ba:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    78bc:	f248 0103 	movw	r1, #32771	; 0x8003
    78c0:	6878      	ldr	r0, [r7, #4]
    78c2:	4b0a      	ldr	r3, [pc, #40]	; (78ec <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    78c4:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	881b      	ldrh	r3, [r3, #0]
    78ca:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    78cc:	89fb      	ldrh	r3, [r7, #14]
    78ce:	085b      	lsrs	r3, r3, #1
    78d0:	b29b      	uxth	r3, r3
    78d2:	f003 0301 	and.w	r3, r3, #1
    78d6:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    78d8:	89fb      	ldrh	r3, [r7, #14]
    78da:	2b00      	cmp	r3, #0
    78dc:	bf14      	ite	ne
    78de:	2301      	movne	r3, #1
    78e0:	2300      	moveq	r3, #0
    78e2:	b2db      	uxtb	r3, r3
}
    78e4:	4618      	mov	r0, r3
    78e6:	3710      	adds	r7, #16
    78e8:	46bd      	mov	sp, r7
    78ea:	bd80      	pop	{r7, pc}
    78ec:	000077f9 	.word	0x000077f9

000078f0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    78f0:	b580      	push	{r7, lr}
    78f2:	b082      	sub	sp, #8
    78f4:	af00      	add	r7, sp, #0
    78f6:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    78f8:	687b      	ldr	r3, [r7, #4]
    78fa:	881b      	ldrh	r3, [r3, #0]
    78fc:	b29b      	uxth	r3, r3
    78fe:	f023 0302 	bic.w	r3, r3, #2
    7902:	b29a      	uxth	r2, r3
    7904:	687b      	ldr	r3, [r7, #4]
    7906:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7908:	f248 0103 	movw	r1, #32771	; 0x8003
    790c:	6878      	ldr	r0, [r7, #4]
    790e:	4b03      	ldr	r3, [pc, #12]	; (791c <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    7910:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7912:	bf00      	nop
    7914:	3708      	adds	r7, #8
    7916:	46bd      	mov	sp, r7
    7918:	bd80      	pop	{r7, pc}
    791a:	bf00      	nop
    791c:	000077f9 	.word	0x000077f9

00007920 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    7920:	b580      	push	{r7, lr}
    7922:	b082      	sub	sp, #8
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
    7928:	460b      	mov	r3, r1
    792a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    792c:	687b      	ldr	r3, [r7, #4]
    792e:	887a      	ldrh	r2, [r7, #2]
    7930:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7932:	f248 0103 	movw	r1, #32771	; 0x8003
    7936:	6878      	ldr	r0, [r7, #4]
    7938:	4b02      	ldr	r3, [pc, #8]	; (7944 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    793a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    793c:	bf00      	nop
    793e:	3708      	adds	r7, #8
    7940:	46bd      	mov	sp, r7
    7942:	bd80      	pop	{r7, pc}
    7944:	000077f9 	.word	0x000077f9

00007948 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    7948:	b580      	push	{r7, lr}
    794a:	b082      	sub	sp, #8
    794c:	af00      	add	r7, sp, #0
    794e:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    7950:	2108      	movs	r1, #8
    7952:	6878      	ldr	r0, [r7, #4]
    7954:	4b03      	ldr	r3, [pc, #12]	; (7964 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    7956:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	699b      	ldr	r3, [r3, #24]
}
    795c:	4618      	mov	r0, r3
    795e:	3708      	adds	r7, #8
    7960:	46bd      	mov	sp, r7
    7962:	bd80      	pop	{r7, pc}
    7964:	000077f9 	.word	0x000077f9

00007968 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    7968:	b480      	push	{r7}
    796a:	b083      	sub	sp, #12
    796c:	af00      	add	r7, sp, #0
    796e:	6078      	str	r0, [r7, #4]
    7970:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	683a      	ldr	r2, [r7, #0]
    7976:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    7978:	bf00      	nop
    797a:	370c      	adds	r7, #12
    797c:	46bd      	mov	sp, r7
    797e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7982:	4770      	bx	lr

00007984 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    7984:	b580      	push	{r7, lr}
    7986:	b082      	sub	sp, #8
    7988:	af00      	add	r7, sp, #0
    798a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	2b00      	cmp	r3, #0
    7990:	d005      	beq.n	799e <_calendar_init+0x1a>
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	681b      	ldr	r3, [r3, #0]
    7996:	2b00      	cmp	r3, #0
    7998:	d001      	beq.n	799e <_calendar_init+0x1a>
    799a:	2301      	movs	r3, #1
    799c:	e000      	b.n	79a0 <_calendar_init+0x1c>
    799e:	2300      	movs	r3, #0
    79a0:	f003 0301 	and.w	r3, r3, #1
    79a4:	b2db      	uxtb	r3, r3
    79a6:	222f      	movs	r2, #47	; 0x2f
    79a8:	491e      	ldr	r1, [pc, #120]	; (7a24 <_calendar_init+0xa0>)
    79aa:	4618      	mov	r0, r3
    79ac:	4b1e      	ldr	r3, [pc, #120]	; (7a28 <_calendar_init+0xa4>)
    79ae:	4798      	blx	r3

	_rtc_dev = dev;
    79b0:	4a1e      	ldr	r2, [pc, #120]	; (7a2c <_calendar_init+0xa8>)
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	681b      	ldr	r3, [r3, #0]
    79ba:	2101      	movs	r1, #1
    79bc:	4618      	mov	r0, r3
    79be:	4b1c      	ldr	r3, [pc, #112]	; (7a30 <_calendar_init+0xac>)
    79c0:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    79c2:	687b      	ldr	r3, [r7, #4]
    79c4:	681b      	ldr	r3, [r3, #0]
    79c6:	4618      	mov	r0, r3
    79c8:	4b1a      	ldr	r3, [pc, #104]	; (7a34 <_calendar_init+0xb0>)
    79ca:	4798      	blx	r3
    79cc:	4603      	mov	r3, r0
    79ce:	2b00      	cmp	r3, #0
    79d0:	d00a      	beq.n	79e8 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	681b      	ldr	r3, [r3, #0]
    79d6:	4618      	mov	r0, r3
    79d8:	4b17      	ldr	r3, [pc, #92]	; (7a38 <_calendar_init+0xb4>)
    79da:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	681b      	ldr	r3, [r3, #0]
    79e0:	2102      	movs	r1, #2
    79e2:	4618      	mov	r0, r3
    79e4:	4b12      	ldr	r3, [pc, #72]	; (7a30 <_calendar_init+0xac>)
    79e6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    79e8:	687b      	ldr	r3, [r7, #4]
    79ea:	681b      	ldr	r3, [r3, #0]
    79ec:	4618      	mov	r0, r3
    79ee:	4b13      	ldr	r3, [pc, #76]	; (7a3c <_calendar_init+0xb8>)
    79f0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	681b      	ldr	r3, [r3, #0]
    79f6:	2101      	movs	r1, #1
    79f8:	4618      	mov	r0, r3
    79fa:	4b0d      	ldr	r3, [pc, #52]	; (7a30 <_calendar_init+0xac>)
    79fc:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    79fe:	687b      	ldr	r3, [r7, #4]
    7a00:	681b      	ldr	r3, [r3, #0]
    7a02:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    7a06:	4618      	mov	r0, r3
    7a08:	4b0d      	ldr	r3, [pc, #52]	; (7a40 <_calendar_init+0xbc>)
    7a0a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    7a10:	2100      	movs	r1, #0
    7a12:	4618      	mov	r0, r3
    7a14:	4b0b      	ldr	r3, [pc, #44]	; (7a44 <_calendar_init+0xc0>)
    7a16:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    7a18:	2300      	movs	r3, #0
}
    7a1a:	4618      	mov	r0, r3
    7a1c:	3708      	adds	r7, #8
    7a1e:	46bd      	mov	sp, r7
    7a20:	bd80      	pop	{r7, pc}
    7a22:	bf00      	nop
    7a24:	00011c10 	.word	0x00011c10
    7a28:	0000579d 	.word	0x0000579d
    7a2c:	20001d04 	.word	0x20001d04
    7a30:	000077f9 	.word	0x000077f9
    7a34:	000078b5 	.word	0x000078b5
    7a38:	000078f1 	.word	0x000078f1
    7a3c:	00007889 	.word	0x00007889
    7a40:	00007921 	.word	0x00007921
    7a44:	00007969 	.word	0x00007969

00007a48 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    7a48:	b580      	push	{r7, lr}
    7a4a:	b082      	sub	sp, #8
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7a50:	687b      	ldr	r3, [r7, #4]
    7a52:	2b00      	cmp	r3, #0
    7a54:	d005      	beq.n	7a62 <_calendar_get_counter+0x1a>
    7a56:	687b      	ldr	r3, [r7, #4]
    7a58:	681b      	ldr	r3, [r3, #0]
    7a5a:	2b00      	cmp	r3, #0
    7a5c:	d001      	beq.n	7a62 <_calendar_get_counter+0x1a>
    7a5e:	2301      	movs	r3, #1
    7a60:	e000      	b.n	7a64 <_calendar_get_counter+0x1c>
    7a62:	2300      	movs	r3, #0
    7a64:	f003 0301 	and.w	r3, r3, #1
    7a68:	b2db      	uxtb	r3, r3
    7a6a:	229a      	movs	r2, #154	; 0x9a
    7a6c:	4906      	ldr	r1, [pc, #24]	; (7a88 <_calendar_get_counter+0x40>)
    7a6e:	4618      	mov	r0, r3
    7a70:	4b06      	ldr	r3, [pc, #24]	; (7a8c <_calendar_get_counter+0x44>)
    7a72:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    7a74:	687b      	ldr	r3, [r7, #4]
    7a76:	681b      	ldr	r3, [r3, #0]
    7a78:	4618      	mov	r0, r3
    7a7a:	4b05      	ldr	r3, [pc, #20]	; (7a90 <_calendar_get_counter+0x48>)
    7a7c:	4798      	blx	r3
    7a7e:	4603      	mov	r3, r0
}
    7a80:	4618      	mov	r0, r3
    7a82:	3708      	adds	r7, #8
    7a84:	46bd      	mov	sp, r7
    7a86:	bd80      	pop	{r7, pc}
    7a88:	00011c10 	.word	0x00011c10
    7a8c:	0000579d 	.word	0x0000579d
    7a90:	00007949 	.word	0x00007949

00007a94 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    7a94:	b580      	push	{r7, lr}
    7a96:	b084      	sub	sp, #16
    7a98:	af00      	add	r7, sp, #0
    7a9a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    7a9c:	687b      	ldr	r3, [r7, #4]
    7a9e:	681b      	ldr	r3, [r3, #0]
    7aa0:	4618      	mov	r0, r3
    7aa2:	4b19      	ldr	r3, [pc, #100]	; (7b08 <_rtc_interrupt_handler+0x74>)
    7aa4:	4798      	blx	r3
    7aa6:	4603      	mov	r3, r0
    7aa8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    7aaa:	687b      	ldr	r3, [r7, #4]
    7aac:	681b      	ldr	r3, [r3, #0]
    7aae:	4618      	mov	r0, r3
    7ab0:	4b16      	ldr	r3, [pc, #88]	; (7b0c <_rtc_interrupt_handler+0x78>)
    7ab2:	4798      	blx	r3
    7ab4:	4603      	mov	r3, r0
    7ab6:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    7ab8:	89fa      	ldrh	r2, [r7, #14]
    7aba:	89bb      	ldrh	r3, [r7, #12]
    7abc:	4013      	ands	r3, r2
    7abe:	b29b      	uxth	r3, r3
    7ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d009      	beq.n	7adc <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    7ac8:	687b      	ldr	r3, [r7, #4]
    7aca:	685b      	ldr	r3, [r3, #4]
    7acc:	6878      	ldr	r0, [r7, #4]
    7ace:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    7ad0:	687b      	ldr	r3, [r7, #4]
    7ad2:	681b      	ldr	r3, [r3, #0]
    7ad4:	4618      	mov	r0, r3
    7ad6:	4b0e      	ldr	r3, [pc, #56]	; (7b10 <_rtc_interrupt_handler+0x7c>)
    7ad8:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    7ada:	e010      	b.n	7afe <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    7adc:	89fa      	ldrh	r2, [r7, #14]
    7ade:	89bb      	ldrh	r3, [r7, #12]
    7ae0:	4013      	ands	r3, r2
    7ae2:	b29b      	uxth	r3, r3
    7ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d008      	beq.n	7afe <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    7aec:	687b      	ldr	r3, [r7, #4]
    7aee:	689b      	ldr	r3, [r3, #8]
    7af0:	6878      	ldr	r0, [r7, #4]
    7af2:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	681b      	ldr	r3, [r3, #0]
    7af8:	4618      	mov	r0, r3
    7afa:	4b06      	ldr	r3, [pc, #24]	; (7b14 <_rtc_interrupt_handler+0x80>)
    7afc:	4798      	blx	r3
}
    7afe:	bf00      	nop
    7b00:	3710      	adds	r7, #16
    7b02:	46bd      	mov	sp, r7
    7b04:	bd80      	pop	{r7, pc}
    7b06:	bf00      	nop
    7b08:	00007855 	.word	0x00007855
    7b0c:	0000786f 	.word	0x0000786f
    7b10:	0000781d 	.word	0x0000781d
    7b14:	00007839 	.word	0x00007839

00007b18 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    7b18:	b580      	push	{r7, lr}
    7b1a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    7b1c:	4b03      	ldr	r3, [pc, #12]	; (7b2c <RTC_Handler+0x14>)
    7b1e:	681b      	ldr	r3, [r3, #0]
    7b20:	4618      	mov	r0, r3
    7b22:	4b03      	ldr	r3, [pc, #12]	; (7b30 <RTC_Handler+0x18>)
    7b24:	4798      	blx	r3
}
    7b26:	bf00      	nop
    7b28:	bd80      	pop	{r7, pc}
    7b2a:	bf00      	nop
    7b2c:	20001d04 	.word	0x20001d04
    7b30:	00007a95 	.word	0x00007a95

00007b34 <__NVIC_EnableIRQ>:
{
    7b34:	b480      	push	{r7}
    7b36:	b083      	sub	sp, #12
    7b38:	af00      	add	r7, sp, #0
    7b3a:	4603      	mov	r3, r0
    7b3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b42:	2b00      	cmp	r3, #0
    7b44:	db0b      	blt.n	7b5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b46:	4909      	ldr	r1, [pc, #36]	; (7b6c <__NVIC_EnableIRQ+0x38>)
    7b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b4c:	095b      	lsrs	r3, r3, #5
    7b4e:	88fa      	ldrh	r2, [r7, #6]
    7b50:	f002 021f 	and.w	r2, r2, #31
    7b54:	2001      	movs	r0, #1
    7b56:	fa00 f202 	lsl.w	r2, r0, r2
    7b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b5e:	bf00      	nop
    7b60:	370c      	adds	r7, #12
    7b62:	46bd      	mov	sp, r7
    7b64:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b68:	4770      	bx	lr
    7b6a:	bf00      	nop
    7b6c:	e000e100 	.word	0xe000e100

00007b70 <__NVIC_DisableIRQ>:
{
    7b70:	b480      	push	{r7}
    7b72:	b083      	sub	sp, #12
    7b74:	af00      	add	r7, sp, #0
    7b76:	4603      	mov	r3, r0
    7b78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b7e:	2b00      	cmp	r3, #0
    7b80:	db10      	blt.n	7ba4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b82:	490b      	ldr	r1, [pc, #44]	; (7bb0 <__NVIC_DisableIRQ+0x40>)
    7b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b88:	095b      	lsrs	r3, r3, #5
    7b8a:	88fa      	ldrh	r2, [r7, #6]
    7b8c:	f002 021f 	and.w	r2, r2, #31
    7b90:	2001      	movs	r0, #1
    7b92:	fa00 f202 	lsl.w	r2, r0, r2
    7b96:	3320      	adds	r3, #32
    7b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7b9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ba0:	f3bf 8f6f 	isb	sy
}
    7ba4:	bf00      	nop
    7ba6:	370c      	adds	r7, #12
    7ba8:	46bd      	mov	sp, r7
    7baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bae:	4770      	bx	lr
    7bb0:	e000e100 	.word	0xe000e100

00007bb4 <__NVIC_ClearPendingIRQ>:
{
    7bb4:	b480      	push	{r7}
    7bb6:	b083      	sub	sp, #12
    7bb8:	af00      	add	r7, sp, #0
    7bba:	4603      	mov	r3, r0
    7bbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	db0c      	blt.n	7be0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bc6:	4909      	ldr	r1, [pc, #36]	; (7bec <__NVIC_ClearPendingIRQ+0x38>)
    7bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bcc:	095b      	lsrs	r3, r3, #5
    7bce:	88fa      	ldrh	r2, [r7, #6]
    7bd0:	f002 021f 	and.w	r2, r2, #31
    7bd4:	2001      	movs	r0, #1
    7bd6:	fa00 f202 	lsl.w	r2, r0, r2
    7bda:	3360      	adds	r3, #96	; 0x60
    7bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7be0:	bf00      	nop
    7be2:	370c      	adds	r7, #12
    7be4:	46bd      	mov	sp, r7
    7be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bea:	4770      	bx	lr
    7bec:	e000e100 	.word	0xe000e100

00007bf0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7bf0:	b480      	push	{r7}
    7bf2:	b083      	sub	sp, #12
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	6078      	str	r0, [r7, #4]
    7bf8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    7bfa:	bf00      	nop
    7bfc:	687b      	ldr	r3, [r7, #4]
    7bfe:	69da      	ldr	r2, [r3, #28]
    7c00:	683b      	ldr	r3, [r7, #0]
    7c02:	4013      	ands	r3, r2
    7c04:	2b00      	cmp	r3, #0
    7c06:	d1f9      	bne.n	7bfc <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    7c08:	bf00      	nop
    7c0a:	370c      	adds	r7, #12
    7c0c:	46bd      	mov	sp, r7
    7c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c12:	4770      	bx	lr

00007c14 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7c14:	b480      	push	{r7}
    7c16:	b083      	sub	sp, #12
    7c18:	af00      	add	r7, sp, #0
    7c1a:	6078      	str	r0, [r7, #4]
    7c1c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    7c1e:	687b      	ldr	r3, [r7, #4]
    7c20:	69da      	ldr	r2, [r3, #28]
    7c22:	683b      	ldr	r3, [r7, #0]
    7c24:	4013      	ands	r3, r2
    7c26:	2b00      	cmp	r3, #0
    7c28:	bf14      	ite	ne
    7c2a:	2301      	movne	r3, #1
    7c2c:	2300      	moveq	r3, #0
    7c2e:	b2db      	uxtb	r3, r3
}
    7c30:	4618      	mov	r0, r3
    7c32:	370c      	adds	r7, #12
    7c34:	46bd      	mov	sp, r7
    7c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c3a:	4770      	bx	lr

00007c3c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7c3c:	b480      	push	{r7}
    7c3e:	b083      	sub	sp, #12
    7c40:	af00      	add	r7, sp, #0
    7c42:	6078      	str	r0, [r7, #4]
    7c44:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7c46:	bf00      	nop
    7c48:	687b      	ldr	r3, [r7, #4]
    7c4a:	69da      	ldr	r2, [r3, #28]
    7c4c:	683b      	ldr	r3, [r7, #0]
    7c4e:	4013      	ands	r3, r2
    7c50:	2b00      	cmp	r3, #0
    7c52:	d1f9      	bne.n	7c48 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    7c54:	bf00      	nop
    7c56:	370c      	adds	r7, #12
    7c58:	46bd      	mov	sp, r7
    7c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c5e:	4770      	bx	lr

00007c60 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7c60:	b480      	push	{r7}
    7c62:	b083      	sub	sp, #12
    7c64:	af00      	add	r7, sp, #0
    7c66:	6078      	str	r0, [r7, #4]
    7c68:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7c6a:	687b      	ldr	r3, [r7, #4]
    7c6c:	69da      	ldr	r2, [r3, #28]
    7c6e:	683b      	ldr	r3, [r7, #0]
    7c70:	4013      	ands	r3, r2
    7c72:	2b00      	cmp	r3, #0
    7c74:	bf14      	ite	ne
    7c76:	2301      	movne	r3, #1
    7c78:	2300      	moveq	r3, #0
    7c7a:	b2db      	uxtb	r3, r3
}
    7c7c:	4618      	mov	r0, r3
    7c7e:	370c      	adds	r7, #12
    7c80:	46bd      	mov	sp, r7
    7c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c86:	4770      	bx	lr

00007c88 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    7c88:	b480      	push	{r7}
    7c8a:	b083      	sub	sp, #12
    7c8c:	af00      	add	r7, sp, #0
    7c8e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	2201      	movs	r2, #1
    7c94:	761a      	strb	r2, [r3, #24]
}
    7c96:	bf00      	nop
    7c98:	370c      	adds	r7, #12
    7c9a:	46bd      	mov	sp, r7
    7c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ca0:	4770      	bx	lr

00007ca2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    7ca2:	b480      	push	{r7}
    7ca4:	b083      	sub	sp, #12
    7ca6:	af00      	add	r7, sp, #0
    7ca8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7caa:	687b      	ldr	r3, [r7, #4]
    7cac:	2202      	movs	r2, #2
    7cae:	761a      	strb	r2, [r3, #24]
}
    7cb0:	bf00      	nop
    7cb2:	370c      	adds	r7, #12
    7cb4:	46bd      	mov	sp, r7
    7cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cba:	4770      	bx	lr

00007cbc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    7cbc:	b480      	push	{r7}
    7cbe:	b083      	sub	sp, #12
    7cc0:	af00      	add	r7, sp, #0
    7cc2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7cc4:	687b      	ldr	r3, [r7, #4]
    7cc6:	7e1b      	ldrb	r3, [r3, #24]
    7cc8:	b2db      	uxtb	r3, r3
}
    7cca:	4618      	mov	r0, r3
    7ccc:	370c      	adds	r7, #12
    7cce:	46bd      	mov	sp, r7
    7cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cd4:	4770      	bx	lr

00007cd6 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    7cd6:	b480      	push	{r7}
    7cd8:	b083      	sub	sp, #12
    7cda:	af00      	add	r7, sp, #0
    7cdc:	6078      	str	r0, [r7, #4]
    7cde:	460b      	mov	r3, r1
    7ce0:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    7ce2:	687b      	ldr	r3, [r7, #4]
    7ce4:	78fa      	ldrb	r2, [r7, #3]
    7ce6:	761a      	strb	r2, [r3, #24]
}
    7ce8:	bf00      	nop
    7cea:	370c      	adds	r7, #12
    7cec:	46bd      	mov	sp, r7
    7cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf2:	4770      	bx	lr

00007cf4 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    7cf4:	b480      	push	{r7}
    7cf6:	b085      	sub	sp, #20
    7cf8:	af00      	add	r7, sp, #0
    7cfa:	6078      	str	r0, [r7, #4]
    7cfc:	460b      	mov	r3, r1
    7cfe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    7d00:	687b      	ldr	r3, [r7, #4]
    7d02:	7e1b      	ldrb	r3, [r3, #24]
    7d04:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7d06:	7bfa      	ldrb	r2, [r7, #15]
    7d08:	78fb      	ldrb	r3, [r7, #3]
    7d0a:	4013      	ands	r3, r2
    7d0c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7d0e:	7bfb      	ldrb	r3, [r7, #15]
}
    7d10:	4618      	mov	r0, r3
    7d12:	3714      	adds	r7, #20
    7d14:	46bd      	mov	sp, r7
    7d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d1a:	4770      	bx	lr

00007d1c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    7d1c:	b480      	push	{r7}
    7d1e:	b083      	sub	sp, #12
    7d20:	af00      	add	r7, sp, #0
    7d22:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7d24:	687b      	ldr	r3, [r7, #4]
    7d26:	7e1b      	ldrb	r3, [r3, #24]
    7d28:	b2db      	uxtb	r3, r3
}
    7d2a:	4618      	mov	r0, r3
    7d2c:	370c      	adds	r7, #12
    7d2e:	46bd      	mov	sp, r7
    7d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d34:	4770      	bx	lr

00007d36 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    7d36:	b480      	push	{r7}
    7d38:	b083      	sub	sp, #12
    7d3a:	af00      	add	r7, sp, #0
    7d3c:	6078      	str	r0, [r7, #4]
    7d3e:	460b      	mov	r3, r1
    7d40:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7d42:	687b      	ldr	r3, [r7, #4]
    7d44:	78fa      	ldrb	r2, [r7, #3]
    7d46:	761a      	strb	r2, [r3, #24]
}
    7d48:	bf00      	nop
    7d4a:	370c      	adds	r7, #12
    7d4c:	46bd      	mov	sp, r7
    7d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d52:	4770      	bx	lr

00007d54 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    7d54:	b480      	push	{r7}
    7d56:	b083      	sub	sp, #12
    7d58:	af00      	add	r7, sp, #0
    7d5a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    7d5c:	687b      	ldr	r3, [r7, #4]
    7d5e:	2201      	movs	r2, #1
    7d60:	759a      	strb	r2, [r3, #22]
}
    7d62:	bf00      	nop
    7d64:	370c      	adds	r7, #12
    7d66:	46bd      	mov	sp, r7
    7d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d6c:	4770      	bx	lr

00007d6e <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    7d6e:	b480      	push	{r7}
    7d70:	b083      	sub	sp, #12
    7d72:	af00      	add	r7, sp, #0
    7d74:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7d76:	687b      	ldr	r3, [r7, #4]
    7d78:	2201      	movs	r2, #1
    7d7a:	751a      	strb	r2, [r3, #20]
}
    7d7c:	bf00      	nop
    7d7e:	370c      	adds	r7, #12
    7d80:	46bd      	mov	sp, r7
    7d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d86:	4770      	bx	lr

00007d88 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    7d88:	b480      	push	{r7}
    7d8a:	b083      	sub	sp, #12
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	2202      	movs	r2, #2
    7d94:	759a      	strb	r2, [r3, #22]
}
    7d96:	bf00      	nop
    7d98:	370c      	adds	r7, #12
    7d9a:	46bd      	mov	sp, r7
    7d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7da0:	4770      	bx	lr

00007da2 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    7da2:	b480      	push	{r7}
    7da4:	b083      	sub	sp, #12
    7da6:	af00      	add	r7, sp, #0
    7da8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    7daa:	687b      	ldr	r3, [r7, #4]
    7dac:	2202      	movs	r2, #2
    7dae:	751a      	strb	r2, [r3, #20]
}
    7db0:	bf00      	nop
    7db2:	370c      	adds	r7, #12
    7db4:	46bd      	mov	sp, r7
    7db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dba:	4770      	bx	lr

00007dbc <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    7dbc:	b480      	push	{r7}
    7dbe:	b083      	sub	sp, #12
    7dc0:	af00      	add	r7, sp, #0
    7dc2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    7dc4:	687b      	ldr	r3, [r7, #4]
    7dc6:	2204      	movs	r2, #4
    7dc8:	759a      	strb	r2, [r3, #22]
}
    7dca:	bf00      	nop
    7dcc:	370c      	adds	r7, #12
    7dce:	46bd      	mov	sp, r7
    7dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dd4:	4770      	bx	lr

00007dd6 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    7dd6:	b480      	push	{r7}
    7dd8:	b083      	sub	sp, #12
    7dda:	af00      	add	r7, sp, #0
    7ddc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    7dde:	687b      	ldr	r3, [r7, #4]
    7de0:	2204      	movs	r2, #4
    7de2:	751a      	strb	r2, [r3, #20]
}
    7de4:	bf00      	nop
    7de6:	370c      	adds	r7, #12
    7de8:	46bd      	mov	sp, r7
    7dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dee:	4770      	bx	lr

00007df0 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    7df0:	b480      	push	{r7}
    7df2:	b083      	sub	sp, #12
    7df4:	af00      	add	r7, sp, #0
    7df6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	7d9b      	ldrb	r3, [r3, #22]
    7dfc:	b2db      	uxtb	r3, r3
}
    7dfe:	4618      	mov	r0, r3
    7e00:	370c      	adds	r7, #12
    7e02:	46bd      	mov	sp, r7
    7e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e08:	4770      	bx	lr
	...

00007e0c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7e0c:	b580      	push	{r7, lr}
    7e0e:	b082      	sub	sp, #8
    7e10:	af00      	add	r7, sp, #0
    7e12:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7e14:	687b      	ldr	r3, [r7, #4]
    7e16:	681b      	ldr	r3, [r3, #0]
    7e18:	f023 0202 	bic.w	r2, r3, #2
    7e1c:	687b      	ldr	r3, [r7, #4]
    7e1e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7e20:	2103      	movs	r1, #3
    7e22:	6878      	ldr	r0, [r7, #4]
    7e24:	4b02      	ldr	r3, [pc, #8]	; (7e30 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    7e26:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e28:	bf00      	nop
    7e2a:	3708      	adds	r7, #8
    7e2c:	46bd      	mov	sp, r7
    7e2e:	bd80      	pop	{r7, pc}
    7e30:	00007bf1 	.word	0x00007bf1

00007e34 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    7e34:	b480      	push	{r7}
    7e36:	b085      	sub	sp, #20
    7e38:	af00      	add	r7, sp, #0
    7e3a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7e3c:	687b      	ldr	r3, [r7, #4]
    7e3e:	681b      	ldr	r3, [r3, #0]
    7e40:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7e42:	68fb      	ldr	r3, [r7, #12]
    7e44:	0edb      	lsrs	r3, r3, #27
    7e46:	f003 0301 	and.w	r3, r3, #1
    7e4a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7e4c:	68fb      	ldr	r3, [r7, #12]
    7e4e:	2b00      	cmp	r3, #0
    7e50:	bf14      	ite	ne
    7e52:	2301      	movne	r3, #1
    7e54:	2300      	moveq	r3, #0
    7e56:	b2db      	uxtb	r3, r3
}
    7e58:	4618      	mov	r0, r3
    7e5a:	3714      	adds	r7, #20
    7e5c:	46bd      	mov	sp, r7
    7e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e62:	4770      	bx	lr

00007e64 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    7e64:	b580      	push	{r7, lr}
    7e66:	b084      	sub	sp, #16
    7e68:	af00      	add	r7, sp, #0
    7e6a:	6078      	str	r0, [r7, #4]
    7e6c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7e6e:	2103      	movs	r1, #3
    7e70:	6878      	ldr	r0, [r7, #4]
    7e72:	4b07      	ldr	r3, [pc, #28]	; (7e90 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    7e74:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	681b      	ldr	r3, [r3, #0]
    7e7a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7e7c:	68fa      	ldr	r2, [r7, #12]
    7e7e:	683b      	ldr	r3, [r7, #0]
    7e80:	4013      	ands	r3, r2
    7e82:	60fb      	str	r3, [r7, #12]
	return tmp;
    7e84:	68fb      	ldr	r3, [r7, #12]
}
    7e86:	4618      	mov	r0, r3
    7e88:	3710      	adds	r7, #16
    7e8a:	46bd      	mov	sp, r7
    7e8c:	bd80      	pop	{r7, pc}
    7e8e:	bf00      	nop
    7e90:	00007bf1 	.word	0x00007bf1

00007e94 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    7e94:	b580      	push	{r7, lr}
    7e96:	b082      	sub	sp, #8
    7e98:	af00      	add	r7, sp, #0
    7e9a:	6078      	str	r0, [r7, #4]
    7e9c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7e9e:	687b      	ldr	r3, [r7, #4]
    7ea0:	683a      	ldr	r2, [r7, #0]
    7ea2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7ea4:	2103      	movs	r1, #3
    7ea6:	6878      	ldr	r0, [r7, #4]
    7ea8:	4b02      	ldr	r3, [pc, #8]	; (7eb4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    7eaa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7eac:	bf00      	nop
    7eae:	3708      	adds	r7, #8
    7eb0:	46bd      	mov	sp, r7
    7eb2:	bd80      	pop	{r7, pc}
    7eb4:	00007bf1 	.word	0x00007bf1

00007eb8 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7eb8:	b580      	push	{r7, lr}
    7eba:	b084      	sub	sp, #16
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7ec0:	2103      	movs	r1, #3
    7ec2:	6878      	ldr	r0, [r7, #4]
    7ec4:	4b09      	ldr	r3, [pc, #36]	; (7eec <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    7ec6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    7ece:	68fb      	ldr	r3, [r7, #12]
    7ed0:	085b      	lsrs	r3, r3, #1
    7ed2:	f003 0301 	and.w	r3, r3, #1
    7ed6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ed8:	68fb      	ldr	r3, [r7, #12]
    7eda:	2b00      	cmp	r3, #0
    7edc:	bf14      	ite	ne
    7ede:	2301      	movne	r3, #1
    7ee0:	2300      	moveq	r3, #0
    7ee2:	b2db      	uxtb	r3, r3
}
    7ee4:	4618      	mov	r0, r3
    7ee6:	3710      	adds	r7, #16
    7ee8:	46bd      	mov	sp, r7
    7eea:	bd80      	pop	{r7, pc}
    7eec:	00007c3d 	.word	0x00007c3d

00007ef0 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7ef0:	b580      	push	{r7, lr}
    7ef2:	b082      	sub	sp, #8
    7ef4:	af00      	add	r7, sp, #0
    7ef6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7ef8:	687b      	ldr	r3, [r7, #4]
    7efa:	681b      	ldr	r3, [r3, #0]
    7efc:	f023 0202 	bic.w	r2, r3, #2
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7f04:	2103      	movs	r1, #3
    7f06:	6878      	ldr	r0, [r7, #4]
    7f08:	4b02      	ldr	r3, [pc, #8]	; (7f14 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7f0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f0c:	bf00      	nop
    7f0e:	3708      	adds	r7, #8
    7f10:	46bd      	mov	sp, r7
    7f12:	bd80      	pop	{r7, pc}
    7f14:	00007c3d 	.word	0x00007c3d

00007f18 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7f18:	b580      	push	{r7, lr}
    7f1a:	b084      	sub	sp, #16
    7f1c:	af00      	add	r7, sp, #0
    7f1e:	6078      	str	r0, [r7, #4]
    7f20:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7f22:	2103      	movs	r1, #3
    7f24:	6878      	ldr	r0, [r7, #4]
    7f26:	4b07      	ldr	r3, [pc, #28]	; (7f44 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7f28:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7f2a:	687b      	ldr	r3, [r7, #4]
    7f2c:	681b      	ldr	r3, [r3, #0]
    7f2e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7f30:	68fa      	ldr	r2, [r7, #12]
    7f32:	683b      	ldr	r3, [r7, #0]
    7f34:	4013      	ands	r3, r2
    7f36:	60fb      	str	r3, [r7, #12]
	return tmp;
    7f38:	68fb      	ldr	r3, [r7, #12]
}
    7f3a:	4618      	mov	r0, r3
    7f3c:	3710      	adds	r7, #16
    7f3e:	46bd      	mov	sp, r7
    7f40:	bd80      	pop	{r7, pc}
    7f42:	bf00      	nop
    7f44:	00007c3d 	.word	0x00007c3d

00007f48 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7f48:	b580      	push	{r7, lr}
    7f4a:	b082      	sub	sp, #8
    7f4c:	af00      	add	r7, sp, #0
    7f4e:	6078      	str	r0, [r7, #4]
    7f50:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7f52:	687b      	ldr	r3, [r7, #4]
    7f54:	683a      	ldr	r2, [r7, #0]
    7f56:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7f58:	2103      	movs	r1, #3
    7f5a:	6878      	ldr	r0, [r7, #4]
    7f5c:	4b02      	ldr	r3, [pc, #8]	; (7f68 <hri_sercomspi_write_CTRLA_reg+0x20>)
    7f5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f60:	bf00      	nop
    7f62:	3708      	adds	r7, #8
    7f64:	46bd      	mov	sp, r7
    7f66:	bd80      	pop	{r7, pc}
    7f68:	00007c3d 	.word	0x00007c3d

00007f6c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    7f6c:	b580      	push	{r7, lr}
    7f6e:	b082      	sub	sp, #8
    7f70:	af00      	add	r7, sp, #0
    7f72:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	685b      	ldr	r3, [r3, #4]
    7f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7f7c:	687b      	ldr	r3, [r7, #4]
    7f7e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f80:	2104      	movs	r1, #4
    7f82:	6878      	ldr	r0, [r7, #4]
    7f84:	4b02      	ldr	r3, [pc, #8]	; (7f90 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    7f86:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f88:	bf00      	nop
    7f8a:	3708      	adds	r7, #8
    7f8c:	46bd      	mov	sp, r7
    7f8e:	bd80      	pop	{r7, pc}
    7f90:	00007bf1 	.word	0x00007bf1

00007f94 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    7f94:	b580      	push	{r7, lr}
    7f96:	b082      	sub	sp, #8
    7f98:	af00      	add	r7, sp, #0
    7f9a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7f9c:	687b      	ldr	r3, [r7, #4]
    7f9e:	685b      	ldr	r3, [r3, #4]
    7fa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    7fa4:	687b      	ldr	r3, [r7, #4]
    7fa6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7fa8:	2104      	movs	r1, #4
    7faa:	6878      	ldr	r0, [r7, #4]
    7fac:	4b02      	ldr	r3, [pc, #8]	; (7fb8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    7fae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7fb0:	bf00      	nop
    7fb2:	3708      	adds	r7, #8
    7fb4:	46bd      	mov	sp, r7
    7fb6:	bd80      	pop	{r7, pc}
    7fb8:	00007bf1 	.word	0x00007bf1

00007fbc <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    7fbc:	b580      	push	{r7, lr}
    7fbe:	b082      	sub	sp, #8
    7fc0:	af00      	add	r7, sp, #0
    7fc2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7fc4:	687b      	ldr	r3, [r7, #4]
    7fc6:	685b      	ldr	r3, [r3, #4]
    7fc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7fd0:	2104      	movs	r1, #4
    7fd2:	6878      	ldr	r0, [r7, #4]
    7fd4:	4b02      	ldr	r3, [pc, #8]	; (7fe0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    7fd6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7fd8:	bf00      	nop
    7fda:	3708      	adds	r7, #8
    7fdc:	46bd      	mov	sp, r7
    7fde:	bd80      	pop	{r7, pc}
    7fe0:	00007bf1 	.word	0x00007bf1

00007fe4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    7fe4:	b580      	push	{r7, lr}
    7fe6:	b082      	sub	sp, #8
    7fe8:	af00      	add	r7, sp, #0
    7fea:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7fec:	687b      	ldr	r3, [r7, #4]
    7fee:	685b      	ldr	r3, [r3, #4]
    7ff0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    7ff4:	687b      	ldr	r3, [r7, #4]
    7ff6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ff8:	2104      	movs	r1, #4
    7ffa:	6878      	ldr	r0, [r7, #4]
    7ffc:	4b02      	ldr	r3, [pc, #8]	; (8008 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    7ffe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8000:	bf00      	nop
    8002:	3708      	adds	r7, #8
    8004:	46bd      	mov	sp, r7
    8006:	bd80      	pop	{r7, pc}
    8008:	00007bf1 	.word	0x00007bf1

0000800c <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    800c:	b580      	push	{r7, lr}
    800e:	b082      	sub	sp, #8
    8010:	af00      	add	r7, sp, #0
    8012:	6078      	str	r0, [r7, #4]
    8014:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    8016:	687b      	ldr	r3, [r7, #4]
    8018:	685a      	ldr	r2, [r3, #4]
    801a:	683b      	ldr	r3, [r7, #0]
    801c:	041b      	lsls	r3, r3, #16
    801e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    8022:	431a      	orrs	r2, r3
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8028:	2104      	movs	r1, #4
    802a:	6878      	ldr	r0, [r7, #4]
    802c:	4b02      	ldr	r3, [pc, #8]	; (8038 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    802e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8030:	bf00      	nop
    8032:	3708      	adds	r7, #8
    8034:	46bd      	mov	sp, r7
    8036:	bd80      	pop	{r7, pc}
    8038:	00007bf1 	.word	0x00007bf1

0000803c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    803c:	b580      	push	{r7, lr}
    803e:	b082      	sub	sp, #8
    8040:	af00      	add	r7, sp, #0
    8042:	6078      	str	r0, [r7, #4]
    8044:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    8046:	687b      	ldr	r3, [r7, #4]
    8048:	683a      	ldr	r2, [r7, #0]
    804a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    804c:	2104      	movs	r1, #4
    804e:	6878      	ldr	r0, [r7, #4]
    8050:	4b02      	ldr	r3, [pc, #8]	; (805c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    8052:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8054:	bf00      	nop
    8056:	3708      	adds	r7, #8
    8058:	46bd      	mov	sp, r7
    805a:	bd80      	pop	{r7, pc}
    805c:	00007bf1 	.word	0x00007bf1

00008060 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    8060:	b580      	push	{r7, lr}
    8062:	b082      	sub	sp, #8
    8064:	af00      	add	r7, sp, #0
    8066:	6078      	str	r0, [r7, #4]
    8068:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    806a:	687b      	ldr	r3, [r7, #4]
    806c:	683a      	ldr	r2, [r7, #0]
    806e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    8070:	2117      	movs	r1, #23
    8072:	6878      	ldr	r0, [r7, #4]
    8074:	4b02      	ldr	r3, [pc, #8]	; (8080 <hri_sercomspi_write_CTRLB_reg+0x20>)
    8076:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8078:	bf00      	nop
    807a:	3708      	adds	r7, #8
    807c:	46bd      	mov	sp, r7
    807e:	bd80      	pop	{r7, pc}
    8080:	00007c3d 	.word	0x00007c3d

00008084 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    8084:	b480      	push	{r7}
    8086:	b083      	sub	sp, #12
    8088:	af00      	add	r7, sp, #0
    808a:	6078      	str	r0, [r7, #4]
    808c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    808e:	687b      	ldr	r3, [r7, #4]
    8090:	683a      	ldr	r2, [r7, #0]
    8092:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8094:	bf00      	nop
    8096:	370c      	adds	r7, #12
    8098:	46bd      	mov	sp, r7
    809a:	f85d 7b04 	ldr.w	r7, [sp], #4
    809e:	4770      	bx	lr

000080a0 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    80a0:	b480      	push	{r7}
    80a2:	b083      	sub	sp, #12
    80a4:	af00      	add	r7, sp, #0
    80a6:	6078      	str	r0, [r7, #4]
    80a8:	460b      	mov	r3, r1
    80aa:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    80ac:	687b      	ldr	r3, [r7, #4]
    80ae:	78fa      	ldrb	r2, [r7, #3]
    80b0:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    80b2:	bf00      	nop
    80b4:	370c      	adds	r7, #12
    80b6:	46bd      	mov	sp, r7
    80b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    80bc:	4770      	bx	lr
	...

000080c0 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    80c0:	b580      	push	{r7, lr}
    80c2:	b084      	sub	sp, #16
    80c4:	af00      	add	r7, sp, #0
    80c6:	6078      	str	r0, [r7, #4]
    80c8:	460b      	mov	r3, r1
    80ca:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    80cc:	687b      	ldr	r3, [r7, #4]
    80ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    80d0:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    80d2:	68fb      	ldr	r3, [r7, #12]
    80d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    80d8:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    80da:	78fb      	ldrb	r3, [r7, #3]
    80dc:	039b      	lsls	r3, r3, #14
    80de:	461a      	mov	r2, r3
    80e0:	68fb      	ldr	r3, [r7, #12]
    80e2:	4313      	orrs	r3, r2
    80e4:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	68fa      	ldr	r2, [r7, #12]
    80ea:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    80ec:	2104      	movs	r1, #4
    80ee:	6878      	ldr	r0, [r7, #4]
    80f0:	4b02      	ldr	r3, [pc, #8]	; (80fc <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    80f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    80f4:	bf00      	nop
    80f6:	3710      	adds	r7, #16
    80f8:	46bd      	mov	sp, r7
    80fa:	bd80      	pop	{r7, pc}
    80fc:	00007bf1 	.word	0x00007bf1

00008100 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    8100:	b580      	push	{r7, lr}
    8102:	b082      	sub	sp, #8
    8104:	af00      	add	r7, sp, #0
    8106:	6078      	str	r0, [r7, #4]
    8108:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	683a      	ldr	r2, [r7, #0]
    810e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8110:	2104      	movs	r1, #4
    8112:	6878      	ldr	r0, [r7, #4]
    8114:	4b02      	ldr	r3, [pc, #8]	; (8120 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    8116:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8118:	bf00      	nop
    811a:	3708      	adds	r7, #8
    811c:	46bd      	mov	sp, r7
    811e:	bd80      	pop	{r7, pc}
    8120:	00007bf1 	.word	0x00007bf1

00008124 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    8124:	b580      	push	{r7, lr}
    8126:	b082      	sub	sp, #8
    8128:	af00      	add	r7, sp, #0
    812a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    812c:	2104      	movs	r1, #4
    812e:	6878      	ldr	r0, [r7, #4]
    8130:	4b03      	ldr	r3, [pc, #12]	; (8140 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    8132:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    8134:	687b      	ldr	r3, [r7, #4]
    8136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    8138:	4618      	mov	r0, r3
    813a:	3708      	adds	r7, #8
    813c:	46bd      	mov	sp, r7
    813e:	bd80      	pop	{r7, pc}
    8140:	00007bf1 	.word	0x00007bf1

00008144 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    8144:	b480      	push	{r7}
    8146:	b083      	sub	sp, #12
    8148:	af00      	add	r7, sp, #0
    814a:	6078      	str	r0, [r7, #4]
    814c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	683a      	ldr	r2, [r7, #0]
    8152:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8154:	bf00      	nop
    8156:	370c      	adds	r7, #12
    8158:	46bd      	mov	sp, r7
    815a:	f85d 7b04 	ldr.w	r7, [sp], #4
    815e:	4770      	bx	lr

00008160 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    8160:	b580      	push	{r7, lr}
    8162:	b082      	sub	sp, #8
    8164:	af00      	add	r7, sp, #0
    8166:	6078      	str	r0, [r7, #4]
    8168:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    816a:	687b      	ldr	r3, [r7, #4]
    816c:	683a      	ldr	r2, [r7, #0]
    816e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8170:	2104      	movs	r1, #4
    8172:	6878      	ldr	r0, [r7, #4]
    8174:	4b02      	ldr	r3, [pc, #8]	; (8180 <hri_sercomi2cm_write_DATA_reg+0x20>)
    8176:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8178:	bf00      	nop
    817a:	3708      	adds	r7, #8
    817c:	46bd      	mov	sp, r7
    817e:	bd80      	pop	{r7, pc}
    8180:	00007bf1 	.word	0x00007bf1

00008184 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    8184:	b580      	push	{r7, lr}
    8186:	b082      	sub	sp, #8
    8188:	af00      	add	r7, sp, #0
    818a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    818c:	2104      	movs	r1, #4
    818e:	6878      	ldr	r0, [r7, #4]
    8190:	4b03      	ldr	r3, [pc, #12]	; (81a0 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    8192:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8198:	4618      	mov	r0, r3
    819a:	3708      	adds	r7, #8
    819c:	46bd      	mov	sp, r7
    819e:	bd80      	pop	{r7, pc}
    81a0:	00007bf1 	.word	0x00007bf1

000081a4 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    81a4:	b480      	push	{r7}
    81a6:	b083      	sub	sp, #12
    81a8:	af00      	add	r7, sp, #0
    81aa:	6078      	str	r0, [r7, #4]
    81ac:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    81ae:	687b      	ldr	r3, [r7, #4]
    81b0:	683a      	ldr	r2, [r7, #0]
    81b2:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    81b4:	bf00      	nop
    81b6:	370c      	adds	r7, #12
    81b8:	46bd      	mov	sp, r7
    81ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    81be:	4770      	bx	lr

000081c0 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    81c0:	b480      	push	{r7}
    81c2:	b083      	sub	sp, #12
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    81cc:	4618      	mov	r0, r3
    81ce:	370c      	adds	r7, #12
    81d0:	46bd      	mov	sp, r7
    81d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81d6:	4770      	bx	lr

000081d8 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    81d8:	b480      	push	{r7}
    81da:	b083      	sub	sp, #12
    81dc:	af00      	add	r7, sp, #0
    81de:	6078      	str	r0, [r7, #4]
    81e0:	460b      	mov	r3, r1
    81e2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    81e4:	687b      	ldr	r3, [r7, #4]
    81e6:	78fa      	ldrb	r2, [r7, #3]
    81e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    81ec:	bf00      	nop
    81ee:	370c      	adds	r7, #12
    81f0:	46bd      	mov	sp, r7
    81f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f6:	4770      	bx	lr

000081f8 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    81f8:	b480      	push	{r7}
    81fa:	b083      	sub	sp, #12
    81fc:	af00      	add	r7, sp, #0
    81fe:	6078      	str	r0, [r7, #4]
    8200:	460b      	mov	r3, r1
    8202:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	887a      	ldrh	r2, [r7, #2]
    8208:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    820a:	bf00      	nop
    820c:	370c      	adds	r7, #12
    820e:	46bd      	mov	sp, r7
    8210:	f85d 7b04 	ldr.w	r7, [sp], #4
    8214:	4770      	bx	lr
	...

00008218 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    8218:	b580      	push	{r7, lr}
    821a:	b082      	sub	sp, #8
    821c:	af00      	add	r7, sp, #0
    821e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8220:	2104      	movs	r1, #4
    8222:	6878      	ldr	r0, [r7, #4]
    8224:	4b04      	ldr	r3, [pc, #16]	; (8238 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    8226:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    8228:	687b      	ldr	r3, [r7, #4]
    822a:	8b5b      	ldrh	r3, [r3, #26]
    822c:	b29b      	uxth	r3, r3
}
    822e:	4618      	mov	r0, r3
    8230:	3708      	adds	r7, #8
    8232:	46bd      	mov	sp, r7
    8234:	bd80      	pop	{r7, pc}
    8236:	bf00      	nop
    8238:	00007bf1 	.word	0x00007bf1

0000823c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    823c:	b4b0      	push	{r4, r5, r7}
    823e:	b08d      	sub	sp, #52	; 0x34
    8240:	af00      	add	r7, sp, #0
    8242:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    8244:	4b13      	ldr	r3, [pc, #76]	; (8294 <_sercom_get_hardware_index+0x58>)
    8246:	f107 040c 	add.w	r4, r7, #12
    824a:	461d      	mov	r5, r3
    824c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    824e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8250:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8258:	2300      	movs	r3, #0
    825a:	62fb      	str	r3, [r7, #44]	; 0x2c
    825c:	e010      	b.n	8280 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8260:	009b      	lsls	r3, r3, #2
    8262:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8266:	4413      	add	r3, r2
    8268:	f853 3c24 	ldr.w	r3, [r3, #-36]
    826c:	461a      	mov	r2, r3
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	429a      	cmp	r2, r3
    8272:	d102      	bne.n	827a <_sercom_get_hardware_index+0x3e>
			return i;
    8274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8276:	b2db      	uxtb	r3, r3
    8278:	e006      	b.n	8288 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    827c:	3301      	adds	r3, #1
    827e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8282:	2b07      	cmp	r3, #7
    8284:	d9eb      	bls.n	825e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    8286:	2300      	movs	r3, #0
}
    8288:	4618      	mov	r0, r3
    828a:	3734      	adds	r7, #52	; 0x34
    828c:	46bd      	mov	sp, r7
    828e:	bcb0      	pop	{r4, r5, r7}
    8290:	4770      	bx	lr
    8292:	bf00      	nop
    8294:	00011c44 	.word	0x00011c44

00008298 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    8298:	b480      	push	{r7}
    829a:	b083      	sub	sp, #12
    829c:	af00      	add	r7, sp, #0
    829e:	6078      	str	r0, [r7, #4]
    82a0:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    82a2:	687b      	ldr	r3, [r7, #4]
    82a4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    82a8:	d102      	bne.n	82b0 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    82aa:	4a0b      	ldr	r2, [pc, #44]	; (82d8 <_sercom_init_irq_param+0x40>)
    82ac:	683b      	ldr	r3, [r7, #0]
    82ae:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    82b0:	687b      	ldr	r3, [r7, #4]
    82b2:	4a0a      	ldr	r2, [pc, #40]	; (82dc <_sercom_init_irq_param+0x44>)
    82b4:	4293      	cmp	r3, r2
    82b6:	d102      	bne.n	82be <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    82b8:	4a09      	ldr	r2, [pc, #36]	; (82e0 <_sercom_init_irq_param+0x48>)
    82ba:	683b      	ldr	r3, [r7, #0]
    82bc:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    82be:	687b      	ldr	r3, [r7, #4]
    82c0:	4a08      	ldr	r2, [pc, #32]	; (82e4 <_sercom_init_irq_param+0x4c>)
    82c2:	4293      	cmp	r3, r2
    82c4:	d102      	bne.n	82cc <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    82c6:	4a08      	ldr	r2, [pc, #32]	; (82e8 <_sercom_init_irq_param+0x50>)
    82c8:	683b      	ldr	r3, [r7, #0]
    82ca:	6013      	str	r3, [r2, #0]
	}
}
    82cc:	bf00      	nop
    82ce:	370c      	adds	r7, #12
    82d0:	46bd      	mov	sp, r7
    82d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    82d6:	4770      	bx	lr
    82d8:	20001d20 	.word	0x20001d20
    82dc:	43000400 	.word	0x43000400
    82e0:	20001d24 	.word	0x20001d24
    82e4:	43000c00 	.word	0x43000c00
    82e8:	20001d28 	.word	0x20001d28

000082ec <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    82ec:	b580      	push	{r7, lr}
    82ee:	b084      	sub	sp, #16
    82f0:	af00      	add	r7, sp, #0
    82f2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    82f4:	6878      	ldr	r0, [r7, #4]
    82f6:	4b13      	ldr	r3, [pc, #76]	; (8344 <_get_i2cm_index+0x58>)
    82f8:	4798      	blx	r3
    82fa:	4603      	mov	r3, r0
    82fc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    82fe:	2300      	movs	r3, #0
    8300:	73fb      	strb	r3, [r7, #15]
    8302:	e010      	b.n	8326 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    8304:	7bfa      	ldrb	r2, [r7, #15]
    8306:	4910      	ldr	r1, [pc, #64]	; (8348 <_get_i2cm_index+0x5c>)
    8308:	4613      	mov	r3, r2
    830a:	005b      	lsls	r3, r3, #1
    830c:	4413      	add	r3, r2
    830e:	00db      	lsls	r3, r3, #3
    8310:	440b      	add	r3, r1
    8312:	781b      	ldrb	r3, [r3, #0]
    8314:	7bba      	ldrb	r2, [r7, #14]
    8316:	429a      	cmp	r2, r3
    8318:	d102      	bne.n	8320 <_get_i2cm_index+0x34>
			return i;
    831a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    831e:	e00d      	b.n	833c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    8320:	7bfb      	ldrb	r3, [r7, #15]
    8322:	3301      	adds	r3, #1
    8324:	73fb      	strb	r3, [r7, #15]
    8326:	7bfb      	ldrb	r3, [r7, #15]
    8328:	2b01      	cmp	r3, #1
    832a:	d9eb      	bls.n	8304 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    832c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    8330:	4906      	ldr	r1, [pc, #24]	; (834c <_get_i2cm_index+0x60>)
    8332:	2000      	movs	r0, #0
    8334:	4b06      	ldr	r3, [pc, #24]	; (8350 <_get_i2cm_index+0x64>)
    8336:	4798      	blx	r3
	return -1;
    8338:	f04f 33ff 	mov.w	r3, #4294967295
}
    833c:	4618      	mov	r0, r3
    833e:	3710      	adds	r7, #16
    8340:	46bd      	mov	sp, r7
    8342:	bd80      	pop	{r7, pc}
    8344:	0000823d 	.word	0x0000823d
    8348:	20000018 	.word	0x20000018
    834c:	00011c28 	.word	0x00011c28
    8350:	0000579d 	.word	0x0000579d

00008354 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    8354:	b580      	push	{r7, lr}
    8356:	b082      	sub	sp, #8
    8358:	af00      	add	r7, sp, #0
    835a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    835c:	2103      	movs	r1, #3
    835e:	6878      	ldr	r0, [r7, #4]
    8360:	4b02      	ldr	r3, [pc, #8]	; (836c <_sercom_i2c_send_stop+0x18>)
    8362:	4798      	blx	r3
}
    8364:	bf00      	nop
    8366:	3708      	adds	r7, #8
    8368:	46bd      	mov	sp, r7
    836a:	bd80      	pop	{r7, pc}
    836c:	0000800d 	.word	0x0000800d

00008370 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    8370:	b590      	push	{r4, r7, lr}
    8372:	b087      	sub	sp, #28
    8374:	af00      	add	r7, sp, #0
    8376:	60f8      	str	r0, [r7, #12]
    8378:	60b9      	str	r1, [r7, #8]
    837a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    837c:	68f8      	ldr	r0, [r7, #12]
    837e:	4b7d      	ldr	r3, [pc, #500]	; (8574 <_sercom_i2c_sync_analyse_flags+0x204>)
    8380:	4798      	blx	r3
    8382:	4603      	mov	r3, r0
    8384:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    8386:	68f8      	ldr	r0, [r7, #12]
    8388:	4b7b      	ldr	r3, [pc, #492]	; (8578 <_sercom_i2c_sync_analyse_flags+0x208>)
    838a:	4798      	blx	r3
    838c:	4603      	mov	r3, r0
    838e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    8390:	68bb      	ldr	r3, [r7, #8]
    8392:	f003 0301 	and.w	r3, r3, #1
    8396:	2b00      	cmp	r3, #0
    8398:	f000 8095 	beq.w	84c6 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    839c:	8a7b      	ldrh	r3, [r7, #18]
    839e:	f003 0302 	and.w	r3, r3, #2
    83a2:	2b00      	cmp	r3, #0
    83a4:	d01d      	beq.n	83e2 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    83a6:	68f8      	ldr	r0, [r7, #12]
    83a8:	4b74      	ldr	r3, [pc, #464]	; (857c <_sercom_i2c_sync_analyse_flags+0x20c>)
    83aa:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	885b      	ldrh	r3, [r3, #2]
    83b0:	b29b      	uxth	r3, r3
    83b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    83b6:	b29a      	uxth	r2, r3
    83b8:	687b      	ldr	r3, [r7, #4]
    83ba:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    83bc:	687b      	ldr	r3, [r7, #4]
    83be:	885b      	ldrh	r3, [r3, #2]
    83c0:	b29b      	uxth	r3, r3
    83c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    83c6:	b29a      	uxth	r2, r3
    83c8:	687b      	ldr	r3, [r7, #4]
    83ca:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    83cc:	8a7b      	ldrh	r3, [r7, #18]
    83ce:	f003 0301 	and.w	r3, r3, #1
    83d2:	2b00      	cmp	r3, #0
    83d4:	d002      	beq.n	83dc <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    83d6:	f06f 0304 	mvn.w	r3, #4
    83da:	e0c6      	b.n	856a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    83dc:	f06f 0303 	mvn.w	r3, #3
    83e0:	e0c3      	b.n	856a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    83e2:	8a7b      	ldrh	r3, [r7, #18]
    83e4:	f003 0304 	and.w	r3, r3, #4
    83e8:	2b00      	cmp	r3, #0
    83ea:	d01f      	beq.n	842c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    83ec:	687b      	ldr	r3, [r7, #4]
    83ee:	685b      	ldr	r3, [r3, #4]
    83f0:	2b00      	cmp	r3, #0
    83f2:	dd07      	ble.n	8404 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    83f4:	687b      	ldr	r3, [r7, #4]
    83f6:	885b      	ldrh	r3, [r3, #2]
    83f8:	b29b      	uxth	r3, r3
    83fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    83fe:	b29a      	uxth	r2, r3
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	885b      	ldrh	r3, [r3, #2]
    8408:	b29b      	uxth	r3, r3
    840a:	b21b      	sxth	r3, r3
    840c:	2b00      	cmp	r3, #0
    840e:	da02      	bge.n	8416 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    8410:	68f8      	ldr	r0, [r7, #12]
    8412:	4b5b      	ldr	r3, [pc, #364]	; (8580 <_sercom_i2c_sync_analyse_flags+0x210>)
    8414:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8416:	687b      	ldr	r3, [r7, #4]
    8418:	885b      	ldrh	r3, [r3, #2]
    841a:	b29b      	uxth	r3, r3
    841c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8420:	b29a      	uxth	r2, r3
    8422:	687b      	ldr	r3, [r7, #4]
    8424:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    8426:	f06f 0301 	mvn.w	r3, #1
    842a:	e09e      	b.n	856a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    842c:	687b      	ldr	r3, [r7, #4]
    842e:	885b      	ldrh	r3, [r3, #2]
    8430:	b29b      	uxth	r3, r3
    8432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8436:	2b00      	cmp	r3, #0
    8438:	d01c      	beq.n	8474 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    843a:	687b      	ldr	r3, [r7, #4]
    843c:	881b      	ldrh	r3, [r3, #0]
    843e:	121b      	asrs	r3, r3, #8
    8440:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8442:	f003 0406 	and.w	r4, r3, #6
    8446:	68f8      	ldr	r0, [r7, #12]
    8448:	4b4e      	ldr	r3, [pc, #312]	; (8584 <_sercom_i2c_sync_analyse_flags+0x214>)
    844a:	4798      	blx	r3
    844c:	4603      	mov	r3, r0
    844e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8452:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    8454:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    8458:	4619      	mov	r1, r3
    845a:	68f8      	ldr	r0, [r7, #12]
    845c:	4b4a      	ldr	r3, [pc, #296]	; (8588 <_sercom_i2c_sync_analyse_flags+0x218>)
    845e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	885b      	ldrh	r3, [r3, #2]
    8464:	b29b      	uxth	r3, r3
    8466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    846a:	b29a      	uxth	r2, r3
    846c:	687b      	ldr	r3, [r7, #4]
    846e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    8470:	2300      	movs	r3, #0
    8472:	e07a      	b.n	856a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	685b      	ldr	r3, [r3, #4]
    8478:	2b00      	cmp	r3, #0
    847a:	d111      	bne.n	84a0 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    847c:	687b      	ldr	r3, [r7, #4]
    847e:	885b      	ldrh	r3, [r3, #2]
    8480:	b29b      	uxth	r3, r3
    8482:	b21b      	sxth	r3, r3
    8484:	2b00      	cmp	r3, #0
    8486:	da02      	bge.n	848e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    8488:	68f8      	ldr	r0, [r7, #12]
    848a:	4b3d      	ldr	r3, [pc, #244]	; (8580 <_sercom_i2c_sync_analyse_flags+0x210>)
    848c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    848e:	687b      	ldr	r3, [r7, #4]
    8490:	885b      	ldrh	r3, [r3, #2]
    8492:	b29b      	uxth	r3, r3
    8494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8498:	b29a      	uxth	r2, r3
    849a:	687b      	ldr	r3, [r7, #4]
    849c:	805a      	strh	r2, [r3, #2]
    849e:	e010      	b.n	84c2 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    84a0:	687b      	ldr	r3, [r7, #4]
    84a2:	689b      	ldr	r3, [r3, #8]
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	4619      	mov	r1, r3
    84a8:	68f8      	ldr	r0, [r7, #12]
    84aa:	4b38      	ldr	r3, [pc, #224]	; (858c <_sercom_i2c_sync_analyse_flags+0x21c>)
    84ac:	4798      	blx	r3
				msg->buffer++;
    84ae:	687b      	ldr	r3, [r7, #4]
    84b0:	689b      	ldr	r3, [r3, #8]
    84b2:	1c5a      	adds	r2, r3, #1
    84b4:	687b      	ldr	r3, [r7, #4]
    84b6:	609a      	str	r2, [r3, #8]
				msg->len--;
    84b8:	687b      	ldr	r3, [r7, #4]
    84ba:	685b      	ldr	r3, [r3, #4]
    84bc:	1e5a      	subs	r2, r3, #1
    84be:	687b      	ldr	r3, [r7, #4]
    84c0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    84c2:	2300      	movs	r3, #0
    84c4:	e051      	b.n	856a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    84c6:	68bb      	ldr	r3, [r7, #8]
    84c8:	f003 0302 	and.w	r3, r3, #2
    84cc:	2b00      	cmp	r3, #0
    84ce:	d04b      	beq.n	8568 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	685b      	ldr	r3, [r3, #4]
    84d4:	2b00      	cmp	r3, #0
    84d6:	d041      	beq.n	855c <_sercom_i2c_sync_analyse_flags+0x1ec>
    84d8:	8a7b      	ldrh	r3, [r7, #18]
    84da:	f003 0304 	and.w	r3, r3, #4
    84de:	2b00      	cmp	r3, #0
    84e0:	d13c      	bne.n	855c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    84e2:	687b      	ldr	r3, [r7, #4]
    84e4:	685b      	ldr	r3, [r3, #4]
    84e6:	1e5a      	subs	r2, r3, #1
    84e8:	687b      	ldr	r3, [r7, #4]
    84ea:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    84ec:	687b      	ldr	r3, [r7, #4]
    84ee:	685b      	ldr	r3, [r3, #4]
    84f0:	2b00      	cmp	r3, #0
    84f2:	d102      	bne.n	84fa <_sercom_i2c_sync_analyse_flags+0x18a>
    84f4:	697b      	ldr	r3, [r7, #20]
    84f6:	2b00      	cmp	r3, #0
    84f8:	d006      	beq.n	8508 <_sercom_i2c_sync_analyse_flags+0x198>
    84fa:	687b      	ldr	r3, [r7, #4]
    84fc:	685b      	ldr	r3, [r3, #4]
    84fe:	2b01      	cmp	r3, #1
    8500:	d105      	bne.n	850e <_sercom_i2c_sync_analyse_flags+0x19e>
    8502:	697b      	ldr	r3, [r7, #20]
    8504:	2b00      	cmp	r3, #0
    8506:	d002      	beq.n	850e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    8508:	68f8      	ldr	r0, [r7, #12]
    850a:	4b21      	ldr	r3, [pc, #132]	; (8590 <_sercom_i2c_sync_analyse_flags+0x220>)
    850c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    850e:	687b      	ldr	r3, [r7, #4]
    8510:	685b      	ldr	r3, [r3, #4]
    8512:	2b00      	cmp	r3, #0
    8514:	d113      	bne.n	853e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    8516:	687b      	ldr	r3, [r7, #4]
    8518:	885b      	ldrh	r3, [r3, #2]
    851a:	b29b      	uxth	r3, r3
    851c:	b21b      	sxth	r3, r3
    851e:	2b00      	cmp	r3, #0
    8520:	da05      	bge.n	852e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    8522:	68f8      	ldr	r0, [r7, #12]
    8524:	4b1b      	ldr	r3, [pc, #108]	; (8594 <_sercom_i2c_sync_analyse_flags+0x224>)
    8526:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    8528:	68f8      	ldr	r0, [r7, #12]
    852a:	4b15      	ldr	r3, [pc, #84]	; (8580 <_sercom_i2c_sync_analyse_flags+0x210>)
    852c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    852e:	687b      	ldr	r3, [r7, #4]
    8530:	885b      	ldrh	r3, [r3, #2]
    8532:	b29b      	uxth	r3, r3
    8534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8538:	b29a      	uxth	r2, r3
    853a:	687b      	ldr	r3, [r7, #4]
    853c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    853e:	687b      	ldr	r3, [r7, #4]
    8540:	689c      	ldr	r4, [r3, #8]
    8542:	1c62      	adds	r2, r4, #1
    8544:	687b      	ldr	r3, [r7, #4]
    8546:	609a      	str	r2, [r3, #8]
    8548:	68f8      	ldr	r0, [r7, #12]
    854a:	4b13      	ldr	r3, [pc, #76]	; (8598 <_sercom_i2c_sync_analyse_flags+0x228>)
    854c:	4798      	blx	r3
    854e:	4603      	mov	r3, r0
    8550:	b2db      	uxtb	r3, r3
    8552:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8554:	68f8      	ldr	r0, [r7, #12]
    8556:	4b11      	ldr	r3, [pc, #68]	; (859c <_sercom_i2c_sync_analyse_flags+0x22c>)
    8558:	4798      	blx	r3
    855a:	e005      	b.n	8568 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    855c:	68f8      	ldr	r0, [r7, #12]
    855e:	4b0f      	ldr	r3, [pc, #60]	; (859c <_sercom_i2c_sync_analyse_flags+0x22c>)
    8560:	4798      	blx	r3
			return I2C_NACK;
    8562:	f06f 0301 	mvn.w	r3, #1
    8566:	e000      	b.n	856a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    8568:	2300      	movs	r3, #0
}
    856a:	4618      	mov	r0, r3
    856c:	371c      	adds	r7, #28
    856e:	46bd      	mov	sp, r7
    8570:	bd90      	pop	{r4, r7, pc}
    8572:	bf00      	nop
    8574:	00007e35 	.word	0x00007e35
    8578:	00008219 	.word	0x00008219
    857c:	00007c89 	.word	0x00007c89
    8580:	00008355 	.word	0x00008355
    8584:	00008125 	.word	0x00008125
    8588:	00008101 	.word	0x00008101
    858c:	00008161 	.word	0x00008161
    8590:	00007fbd 	.word	0x00007fbd
    8594:	00007f95 	.word	0x00007f95
    8598:	00008185 	.word	0x00008185
    859c:	00007ca3 	.word	0x00007ca3

000085a0 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    85a0:	b580      	push	{r7, lr}
    85a2:	b086      	sub	sp, #24
    85a4:	af00      	add	r7, sp, #0
    85a6:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    85a8:	687b      	ldr	r3, [r7, #4]
    85aa:	691b      	ldr	r3, [r3, #16]
    85ac:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    85ae:	6938      	ldr	r0, [r7, #16]
    85b0:	4b37      	ldr	r3, [pc, #220]	; (8690 <_sercom_i2c_m_irq_handler+0xf0>)
    85b2:	4798      	blx	r3
    85b4:	4603      	mov	r3, r0
    85b6:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    85b8:	2300      	movs	r3, #0
    85ba:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	2b00      	cmp	r3, #0
    85c0:	bf14      	ite	ne
    85c2:	2301      	movne	r3, #1
    85c4:	2300      	moveq	r3, #0
    85c6:	b2db      	uxtb	r3, r3
    85c8:	f240 422a 	movw	r2, #1066	; 0x42a
    85cc:	4931      	ldr	r1, [pc, #196]	; (8694 <_sercom_i2c_m_irq_handler+0xf4>)
    85ce:	4618      	mov	r0, r3
    85d0:	4b31      	ldr	r3, [pc, #196]	; (8698 <_sercom_i2c_m_irq_handler+0xf8>)
    85d2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    85d4:	687b      	ldr	r3, [r7, #4]
    85d6:	691b      	ldr	r3, [r3, #16]
    85d8:	2b00      	cmp	r3, #0
    85da:	bf14      	ite	ne
    85dc:	2301      	movne	r3, #1
    85de:	2300      	moveq	r3, #0
    85e0:	b2db      	uxtb	r3, r3
    85e2:	f240 422b 	movw	r2, #1067	; 0x42b
    85e6:	492b      	ldr	r1, [pc, #172]	; (8694 <_sercom_i2c_m_irq_handler+0xf4>)
    85e8:	4618      	mov	r0, r3
    85ea:	4b2b      	ldr	r3, [pc, #172]	; (8698 <_sercom_i2c_m_irq_handler+0xf8>)
    85ec:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    85ee:	bf00      	nop
    85f0:	68fb      	ldr	r3, [r7, #12]
    85f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    85f6:	2b00      	cmp	r3, #0
    85f8:	d126      	bne.n	8648 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    85fa:	687b      	ldr	r3, [r7, #4]
    85fc:	461a      	mov	r2, r3
    85fe:	68f9      	ldr	r1, [r7, #12]
    8600:	6938      	ldr	r0, [r7, #16]
    8602:	4b26      	ldr	r3, [pc, #152]	; (869c <_sercom_i2c_m_irq_handler+0xfc>)
    8604:	4798      	blx	r3
    8606:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    8608:	697b      	ldr	r3, [r7, #20]
    860a:	2b00      	cmp	r3, #0
    860c:	d11b      	bne.n	8646 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    860e:	68fb      	ldr	r3, [r7, #12]
    8610:	f003 0301 	and.w	r3, r3, #1
    8614:	2b00      	cmp	r3, #0
    8616:	d008      	beq.n	862a <_sercom_i2c_m_irq_handler+0x8a>
    8618:	687b      	ldr	r3, [r7, #4]
    861a:	699b      	ldr	r3, [r3, #24]
    861c:	2b00      	cmp	r3, #0
    861e:	d004      	beq.n	862a <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    8620:	687b      	ldr	r3, [r7, #4]
    8622:	699b      	ldr	r3, [r3, #24]
    8624:	6878      	ldr	r0, [r7, #4]
    8626:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    8628:	e02e      	b.n	8688 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    862a:	68fb      	ldr	r3, [r7, #12]
    862c:	f003 0302 	and.w	r3, r3, #2
    8630:	2b00      	cmp	r3, #0
    8632:	d029      	beq.n	8688 <_sercom_i2c_m_irq_handler+0xe8>
    8634:	687b      	ldr	r3, [r7, #4]
    8636:	69db      	ldr	r3, [r3, #28]
    8638:	2b00      	cmp	r3, #0
    863a:	d025      	beq.n	8688 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    863c:	687b      	ldr	r3, [r7, #4]
    863e:	69db      	ldr	r3, [r3, #28]
    8640:	6878      	ldr	r0, [r7, #4]
    8642:	4798      	blx	r3
		return;
    8644:	e020      	b.n	8688 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    8646:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8648:	687b      	ldr	r3, [r7, #4]
    864a:	885b      	ldrh	r3, [r3, #2]
    864c:	b29b      	uxth	r3, r3
    864e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8652:	b29a      	uxth	r2, r3
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    8658:	687b      	ldr	r3, [r7, #4]
    865a:	695b      	ldr	r3, [r3, #20]
    865c:	2b00      	cmp	r3, #0
    865e:	d014      	beq.n	868a <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    8660:	697b      	ldr	r3, [r7, #20]
    8662:	2b00      	cmp	r3, #0
    8664:	d005      	beq.n	8672 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    8666:	687b      	ldr	r3, [r7, #4]
    8668:	695b      	ldr	r3, [r3, #20]
    866a:	6979      	ldr	r1, [r7, #20]
    866c:	6878      	ldr	r0, [r7, #4]
    866e:	4798      	blx	r3
    8670:	e005      	b.n	867e <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    8672:	687b      	ldr	r3, [r7, #4]
    8674:	695b      	ldr	r3, [r3, #20]
    8676:	f06f 0104 	mvn.w	r1, #4
    867a:	6878      	ldr	r0, [r7, #4]
    867c:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    867e:	2180      	movs	r1, #128	; 0x80
    8680:	6938      	ldr	r0, [r7, #16]
    8682:	4b07      	ldr	r3, [pc, #28]	; (86a0 <_sercom_i2c_m_irq_handler+0x100>)
    8684:	4798      	blx	r3
    8686:	e000      	b.n	868a <_sercom_i2c_m_irq_handler+0xea>
		return;
    8688:	bf00      	nop
	}
}
    868a:	3718      	adds	r7, #24
    868c:	46bd      	mov	sp, r7
    868e:	bd80      	pop	{r7, pc}
    8690:	00007cbd 	.word	0x00007cbd
    8694:	00011c28 	.word	0x00011c28
    8698:	0000579d 	.word	0x0000579d
    869c:	00008371 	.word	0x00008371
    86a0:	00007cd7 	.word	0x00007cd7

000086a4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    86a4:	b580      	push	{r7, lr}
    86a6:	b082      	sub	sp, #8
    86a8:	af00      	add	r7, sp, #0
    86aa:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    86ac:	6878      	ldr	r0, [r7, #4]
    86ae:	4b05      	ldr	r3, [pc, #20]	; (86c4 <_sercom_get_irq_num+0x20>)
    86b0:	4798      	blx	r3
    86b2:	4603      	mov	r3, r0
    86b4:	009b      	lsls	r3, r3, #2
    86b6:	b2db      	uxtb	r3, r3
    86b8:	332e      	adds	r3, #46	; 0x2e
    86ba:	b2db      	uxtb	r3, r3
}
    86bc:	4618      	mov	r0, r3
    86be:	3708      	adds	r7, #8
    86c0:	46bd      	mov	sp, r7
    86c2:	bd80      	pop	{r7, pc}
    86c4:	0000823d 	.word	0x0000823d

000086c8 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    86c8:	b580      	push	{r7, lr}
    86ca:	b086      	sub	sp, #24
    86cc:	af00      	add	r7, sp, #0
    86ce:	6078      	str	r0, [r7, #4]
    86d0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	2b00      	cmp	r3, #0
    86d6:	bf14      	ite	ne
    86d8:	2301      	movne	r3, #1
    86da:	2300      	moveq	r3, #0
    86dc:	b2db      	uxtb	r3, r3
    86de:	f240 429e 	movw	r2, #1182	; 0x49e
    86e2:	491d      	ldr	r1, [pc, #116]	; (8758 <_i2c_m_async_init+0x90>)
    86e4:	4618      	mov	r0, r3
    86e6:	4b1d      	ldr	r3, [pc, #116]	; (875c <_i2c_m_async_init+0x94>)
    86e8:	4798      	blx	r3

	i2c_dev->hw = hw;
    86ea:	687b      	ldr	r3, [r7, #4]
    86ec:	683a      	ldr	r2, [r7, #0]
    86ee:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    86f0:	687b      	ldr	r3, [r7, #4]
    86f2:	6839      	ldr	r1, [r7, #0]
    86f4:	4618      	mov	r0, r3
    86f6:	4b1a      	ldr	r3, [pc, #104]	; (8760 <_i2c_m_async_init+0x98>)
    86f8:	4798      	blx	r3
    86fa:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    86fc:	68fb      	ldr	r3, [r7, #12]
    86fe:	2b00      	cmp	r3, #0
    8700:	d001      	beq.n	8706 <_i2c_m_async_init+0x3e>
		return init_status;
    8702:	68fb      	ldr	r3, [r7, #12]
    8704:	e024      	b.n	8750 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    8706:	6879      	ldr	r1, [r7, #4]
    8708:	6838      	ldr	r0, [r7, #0]
    870a:	4b16      	ldr	r3, [pc, #88]	; (8764 <_i2c_m_async_init+0x9c>)
    870c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    870e:	6838      	ldr	r0, [r7, #0]
    8710:	4b15      	ldr	r3, [pc, #84]	; (8768 <_i2c_m_async_init+0xa0>)
    8712:	4798      	blx	r3
    8714:	4603      	mov	r3, r0
    8716:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8718:	2300      	movs	r3, #0
    871a:	613b      	str	r3, [r7, #16]
    871c:	e014      	b.n	8748 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    871e:	7dfb      	ldrb	r3, [r7, #23]
    8720:	b21b      	sxth	r3, r3
    8722:	4618      	mov	r0, r3
    8724:	4b11      	ldr	r3, [pc, #68]	; (876c <_i2c_m_async_init+0xa4>)
    8726:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    8728:	7dfb      	ldrb	r3, [r7, #23]
    872a:	b21b      	sxth	r3, r3
    872c:	4618      	mov	r0, r3
    872e:	4b10      	ldr	r3, [pc, #64]	; (8770 <_i2c_m_async_init+0xa8>)
    8730:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    8732:	7dfb      	ldrb	r3, [r7, #23]
    8734:	b21b      	sxth	r3, r3
    8736:	4618      	mov	r0, r3
    8738:	4b0e      	ldr	r3, [pc, #56]	; (8774 <_i2c_m_async_init+0xac>)
    873a:	4798      	blx	r3
		irq++;
    873c:	7dfb      	ldrb	r3, [r7, #23]
    873e:	3301      	adds	r3, #1
    8740:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8742:	693b      	ldr	r3, [r7, #16]
    8744:	3301      	adds	r3, #1
    8746:	613b      	str	r3, [r7, #16]
    8748:	693b      	ldr	r3, [r7, #16]
    874a:	2b03      	cmp	r3, #3
    874c:	d9e7      	bls.n	871e <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    874e:	2300      	movs	r3, #0
}
    8750:	4618      	mov	r0, r3
    8752:	3718      	adds	r7, #24
    8754:	46bd      	mov	sp, r7
    8756:	bd80      	pop	{r7, pc}
    8758:	00011c28 	.word	0x00011c28
    875c:	0000579d 	.word	0x0000579d
    8760:	00008991 	.word	0x00008991
    8764:	00008299 	.word	0x00008299
    8768:	000086a5 	.word	0x000086a5
    876c:	00007b71 	.word	0x00007b71
    8770:	00007bb5 	.word	0x00007bb5
    8774:	00007b35 	.word	0x00007b35

00008778 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    8778:	b590      	push	{r4, r7, lr}
    877a:	b087      	sub	sp, #28
    877c:	af00      	add	r7, sp, #0
    877e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	691b      	ldr	r3, [r3, #16]
    8784:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    8786:	687b      	ldr	r3, [r7, #4]
    8788:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    878a:	6978      	ldr	r0, [r7, #20]
    878c:	4b33      	ldr	r3, [pc, #204]	; (885c <_sercom_i2c_send_address+0xe4>)
    878e:	4798      	blx	r3
    8790:	4603      	mov	r3, r0
    8792:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    8794:	687b      	ldr	r3, [r7, #4]
    8796:	2b00      	cmp	r3, #0
    8798:	bf14      	ite	ne
    879a:	2301      	movne	r3, #1
    879c:	2300      	moveq	r3, #0
    879e:	b2db      	uxtb	r3, r3
    87a0:	f240 42cc 	movw	r2, #1228	; 0x4cc
    87a4:	492e      	ldr	r1, [pc, #184]	; (8860 <_sercom_i2c_send_address+0xe8>)
    87a6:	4618      	mov	r0, r3
    87a8:	4b2e      	ldr	r3, [pc, #184]	; (8864 <_sercom_i2c_send_address+0xec>)
    87aa:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    87ac:	693b      	ldr	r3, [r7, #16]
    87ae:	685b      	ldr	r3, [r3, #4]
    87b0:	2b01      	cmp	r3, #1
    87b2:	d106      	bne.n	87c2 <_sercom_i2c_send_address+0x4a>
    87b4:	68fb      	ldr	r3, [r7, #12]
    87b6:	2b00      	cmp	r3, #0
    87b8:	d003      	beq.n	87c2 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    87ba:	6978      	ldr	r0, [r7, #20]
    87bc:	4b2a      	ldr	r3, [pc, #168]	; (8868 <_sercom_i2c_send_address+0xf0>)
    87be:	4798      	blx	r3
    87c0:	e002      	b.n	87c8 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    87c2:	6978      	ldr	r0, [r7, #20]
    87c4:	4b29      	ldr	r3, [pc, #164]	; (886c <_sercom_i2c_send_address+0xf4>)
    87c6:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    87c8:	693b      	ldr	r3, [r7, #16]
    87ca:	881b      	ldrh	r3, [r3, #0]
    87cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    87d0:	2b00      	cmp	r3, #0
    87d2:	d022      	beq.n	881a <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    87d4:	693b      	ldr	r3, [r7, #16]
    87d6:	885b      	ldrh	r3, [r3, #2]
    87d8:	b29b      	uxth	r3, r3
    87da:	f003 0301 	and.w	r3, r3, #1
    87de:	2b00      	cmp	r3, #0
    87e0:	d007      	beq.n	87f2 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    87e2:	693b      	ldr	r3, [r7, #16]
    87e4:	885b      	ldrh	r3, [r3, #2]
    87e6:	b29b      	uxth	r3, r3
    87e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    87ec:	b29a      	uxth	r2, r3
    87ee:	693b      	ldr	r3, [r7, #16]
    87f0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    87f2:	693b      	ldr	r3, [r7, #16]
    87f4:	881b      	ldrh	r3, [r3, #0]
    87f6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    87f8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    87fc:	401c      	ands	r4, r3
    87fe:	6978      	ldr	r0, [r7, #20]
    8800:	4b1b      	ldr	r3, [pc, #108]	; (8870 <_sercom_i2c_send_address+0xf8>)
    8802:	4798      	blx	r3
    8804:	4603      	mov	r3, r0
    8806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    880a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    880c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8810:	4619      	mov	r1, r3
    8812:	6978      	ldr	r0, [r7, #20]
    8814:	4b17      	ldr	r3, [pc, #92]	; (8874 <_sercom_i2c_send_address+0xfc>)
    8816:	4798      	blx	r3
    8818:	e01a      	b.n	8850 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    881a:	693b      	ldr	r3, [r7, #16]
    881c:	881b      	ldrh	r3, [r3, #0]
    881e:	005b      	lsls	r3, r3, #1
    8820:	b2db      	uxtb	r3, r3
    8822:	693a      	ldr	r2, [r7, #16]
    8824:	8852      	ldrh	r2, [r2, #2]
    8826:	b292      	uxth	r2, r2
    8828:	f002 0201 	and.w	r2, r2, #1
    882c:	2a00      	cmp	r2, #0
    882e:	bf14      	ite	ne
    8830:	2201      	movne	r2, #1
    8832:	2200      	moveq	r2, #0
    8834:	b2d2      	uxtb	r2, r2
    8836:	4313      	orrs	r3, r2
    8838:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    883a:	6978      	ldr	r0, [r7, #20]
    883c:	4b0c      	ldr	r3, [pc, #48]	; (8870 <_sercom_i2c_send_address+0xf8>)
    883e:	4798      	blx	r3
    8840:	4603      	mov	r3, r0
    8842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    8846:	4323      	orrs	r3, r4
    8848:	4619      	mov	r1, r3
    884a:	6978      	ldr	r0, [r7, #20]
    884c:	4b09      	ldr	r3, [pc, #36]	; (8874 <_sercom_i2c_send_address+0xfc>)
    884e:	4798      	blx	r3
	}

	return ERR_NONE;
    8850:	2300      	movs	r3, #0
}
    8852:	4618      	mov	r0, r3
    8854:	371c      	adds	r7, #28
    8856:	46bd      	mov	sp, r7
    8858:	bd90      	pop	{r4, r7, pc}
    885a:	bf00      	nop
    885c:	00007e35 	.word	0x00007e35
    8860:	00011c28 	.word	0x00011c28
    8864:	0000579d 	.word	0x0000579d
    8868:	00007fbd 	.word	0x00007fbd
    886c:	00007fe5 	.word	0x00007fe5
    8870:	00008125 	.word	0x00008125
    8874:	00008101 	.word	0x00008101

00008878 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    8878:	b580      	push	{r7, lr}
    887a:	b084      	sub	sp, #16
    887c:	af00      	add	r7, sp, #0
    887e:	6078      	str	r0, [r7, #4]
    8880:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	2b00      	cmp	r3, #0
    8886:	bf14      	ite	ne
    8888:	2301      	movne	r3, #1
    888a:	2300      	moveq	r3, #0
    888c:	b2db      	uxtb	r3, r3
    888e:	f240 42f4 	movw	r2, #1268	; 0x4f4
    8892:	492a      	ldr	r1, [pc, #168]	; (893c <_i2c_m_async_transfer+0xc4>)
    8894:	4618      	mov	r0, r3
    8896:	4b2a      	ldr	r3, [pc, #168]	; (8940 <_i2c_m_async_transfer+0xc8>)
    8898:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    889a:	687b      	ldr	r3, [r7, #4]
    889c:	691b      	ldr	r3, [r3, #16]
    889e:	2b00      	cmp	r3, #0
    88a0:	bf14      	ite	ne
    88a2:	2301      	movne	r3, #1
    88a4:	2300      	moveq	r3, #0
    88a6:	b2db      	uxtb	r3, r3
    88a8:	f240 42f5 	movw	r2, #1269	; 0x4f5
    88ac:	4923      	ldr	r1, [pc, #140]	; (893c <_i2c_m_async_transfer+0xc4>)
    88ae:	4618      	mov	r0, r3
    88b0:	4b23      	ldr	r3, [pc, #140]	; (8940 <_i2c_m_async_transfer+0xc8>)
    88b2:	4798      	blx	r3
	ASSERT(msg);
    88b4:	683b      	ldr	r3, [r7, #0]
    88b6:	2b00      	cmp	r3, #0
    88b8:	bf14      	ite	ne
    88ba:	2301      	movne	r3, #1
    88bc:	2300      	moveq	r3, #0
    88be:	b2db      	uxtb	r3, r3
    88c0:	f240 42f6 	movw	r2, #1270	; 0x4f6
    88c4:	491d      	ldr	r1, [pc, #116]	; (893c <_i2c_m_async_transfer+0xc4>)
    88c6:	4618      	mov	r0, r3
    88c8:	4b1d      	ldr	r3, [pc, #116]	; (8940 <_i2c_m_async_transfer+0xc8>)
    88ca:	4798      	blx	r3

	if (msg->len == 0) {
    88cc:	683b      	ldr	r3, [r7, #0]
    88ce:	685b      	ldr	r3, [r3, #4]
    88d0:	2b00      	cmp	r3, #0
    88d2:	d101      	bne.n	88d8 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    88d4:	2300      	movs	r3, #0
    88d6:	e02d      	b.n	8934 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    88d8:	687b      	ldr	r3, [r7, #4]
    88da:	885b      	ldrh	r3, [r3, #2]
    88dc:	b29b      	uxth	r3, r3
    88de:	f403 7380 	and.w	r3, r3, #256	; 0x100
    88e2:	2b00      	cmp	r3, #0
    88e4:	d002      	beq.n	88ec <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    88e6:	f06f 0303 	mvn.w	r3, #3
    88ea:	e023      	b.n	8934 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    88ec:	683b      	ldr	r3, [r7, #0]
    88ee:	885b      	ldrh	r3, [r3, #2]
    88f0:	b29b      	uxth	r3, r3
    88f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    88f6:	b29a      	uxth	r2, r3
    88f8:	683b      	ldr	r3, [r7, #0]
    88fa:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    88fc:	687b      	ldr	r3, [r7, #4]
    88fe:	683a      	ldr	r2, [r7, #0]
    8900:	ca07      	ldmia	r2, {r0, r1, r2}
    8902:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    8906:	687b      	ldr	r3, [r7, #4]
    8908:	691b      	ldr	r3, [r3, #16]
    890a:	4618      	mov	r0, r3
    890c:	4b0d      	ldr	r3, [pc, #52]	; (8944 <_i2c_m_async_transfer+0xcc>)
    890e:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    8910:	6878      	ldr	r0, [r7, #4]
    8912:	4b0d      	ldr	r3, [pc, #52]	; (8948 <_i2c_m_async_transfer+0xd0>)
    8914:	4798      	blx	r3
    8916:	60f8      	str	r0, [r7, #12]

	if (ret) {
    8918:	68fb      	ldr	r3, [r7, #12]
    891a:	2b00      	cmp	r3, #0
    891c:	d009      	beq.n	8932 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    891e:	687b      	ldr	r3, [r7, #4]
    8920:	885b      	ldrh	r3, [r3, #2]
    8922:	b29b      	uxth	r3, r3
    8924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8928:	b29a      	uxth	r2, r3
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	805a      	strh	r2, [r3, #2]

		return ret;
    892e:	68fb      	ldr	r3, [r7, #12]
    8930:	e000      	b.n	8934 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    8932:	2300      	movs	r3, #0
}
    8934:	4618      	mov	r0, r3
    8936:	3710      	adds	r7, #16
    8938:	46bd      	mov	sp, r7
    893a:	bd80      	pop	{r7, pc}
    893c:	00011c28 	.word	0x00011c28
    8940:	0000579d 	.word	0x0000579d
    8944:	00007f6d 	.word	0x00007f6d
    8948:	00008779 	.word	0x00008779

0000894c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    894c:	b480      	push	{r7}
    894e:	b085      	sub	sp, #20
    8950:	af00      	add	r7, sp, #0
    8952:	60f8      	str	r0, [r7, #12]
    8954:	460b      	mov	r3, r1
    8956:	607a      	str	r2, [r7, #4]
    8958:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    895a:	7afb      	ldrb	r3, [r7, #11]
    895c:	2b01      	cmp	r3, #1
    895e:	d008      	beq.n	8972 <_i2c_m_async_register_callback+0x26>
    8960:	2b02      	cmp	r3, #2
    8962:	d00a      	beq.n	897a <_i2c_m_async_register_callback+0x2e>
    8964:	2b00      	cmp	r3, #0
    8966:	d000      	beq.n	896a <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    8968:	e00b      	b.n	8982 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    896a:	68fb      	ldr	r3, [r7, #12]
    896c:	687a      	ldr	r2, [r7, #4]
    896e:	615a      	str	r2, [r3, #20]
		break;
    8970:	e007      	b.n	8982 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    8972:	68fb      	ldr	r3, [r7, #12]
    8974:	687a      	ldr	r2, [r7, #4]
    8976:	619a      	str	r2, [r3, #24]
		break;
    8978:	e003      	b.n	8982 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    897a:	68fb      	ldr	r3, [r7, #12]
    897c:	687a      	ldr	r2, [r7, #4]
    897e:	61da      	str	r2, [r3, #28]
		break;
    8980:	bf00      	nop
	}

	return ERR_NONE;
    8982:	2300      	movs	r3, #0
}
    8984:	4618      	mov	r0, r3
    8986:	3714      	adds	r7, #20
    8988:	46bd      	mov	sp, r7
    898a:	f85d 7b04 	ldr.w	r7, [sp], #4
    898e:	4770      	bx	lr

00008990 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    8990:	b580      	push	{r7, lr}
    8992:	b084      	sub	sp, #16
    8994:	af00      	add	r7, sp, #0
    8996:	6078      	str	r0, [r7, #4]
    8998:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    899a:	6838      	ldr	r0, [r7, #0]
    899c:	4b42      	ldr	r3, [pc, #264]	; (8aa8 <_i2c_m_sync_init_impl+0x118>)
    899e:	4798      	blx	r3
    89a0:	4603      	mov	r3, r0
    89a2:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    89a4:	2101      	movs	r1, #1
    89a6:	6838      	ldr	r0, [r7, #0]
    89a8:	4b40      	ldr	r3, [pc, #256]	; (8aac <_i2c_m_sync_init_impl+0x11c>)
    89aa:	4798      	blx	r3
    89ac:	4603      	mov	r3, r0
    89ae:	f083 0301 	eor.w	r3, r3, #1
    89b2:	b2db      	uxtb	r3, r3
    89b4:	2b00      	cmp	r3, #0
    89b6:	d020      	beq.n	89fa <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    89b8:	7bfa      	ldrb	r2, [r7, #15]
    89ba:	493d      	ldr	r1, [pc, #244]	; (8ab0 <_i2c_m_sync_init_impl+0x120>)
    89bc:	4613      	mov	r3, r2
    89be:	005b      	lsls	r3, r3, #1
    89c0:	4413      	add	r3, r2
    89c2:	00db      	lsls	r3, r3, #3
    89c4:	440b      	add	r3, r1
    89c6:	3304      	adds	r3, #4
    89c8:	681b      	ldr	r3, [r3, #0]
    89ca:	f003 031c 	and.w	r3, r3, #28
    89ce:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    89d0:	2102      	movs	r1, #2
    89d2:	6838      	ldr	r0, [r7, #0]
    89d4:	4b37      	ldr	r3, [pc, #220]	; (8ab4 <_i2c_m_sync_init_impl+0x124>)
    89d6:	4798      	blx	r3
    89d8:	4603      	mov	r3, r0
    89da:	2b00      	cmp	r3, #0
    89dc:	d006      	beq.n	89ec <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    89de:	6838      	ldr	r0, [r7, #0]
    89e0:	4b35      	ldr	r3, [pc, #212]	; (8ab8 <_i2c_m_sync_init_impl+0x128>)
    89e2:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    89e4:	2102      	movs	r1, #2
    89e6:	6838      	ldr	r0, [r7, #0]
    89e8:	4b34      	ldr	r3, [pc, #208]	; (8abc <_i2c_m_sync_init_impl+0x12c>)
    89ea:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    89ec:	68bb      	ldr	r3, [r7, #8]
    89ee:	f043 0301 	orr.w	r3, r3, #1
    89f2:	4619      	mov	r1, r3
    89f4:	6838      	ldr	r0, [r7, #0]
    89f6:	4b32      	ldr	r3, [pc, #200]	; (8ac0 <_i2c_m_sync_init_impl+0x130>)
    89f8:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    89fa:	2101      	movs	r1, #1
    89fc:	6838      	ldr	r0, [r7, #0]
    89fe:	4b2f      	ldr	r3, [pc, #188]	; (8abc <_i2c_m_sync_init_impl+0x12c>)
    8a00:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    8a02:	7bfa      	ldrb	r2, [r7, #15]
    8a04:	492a      	ldr	r1, [pc, #168]	; (8ab0 <_i2c_m_sync_init_impl+0x120>)
    8a06:	4613      	mov	r3, r2
    8a08:	005b      	lsls	r3, r3, #1
    8a0a:	4413      	add	r3, r2
    8a0c:	00db      	lsls	r3, r3, #3
    8a0e:	440b      	add	r3, r1
    8a10:	3304      	adds	r3, #4
    8a12:	681b      	ldr	r3, [r3, #0]
    8a14:	4619      	mov	r1, r3
    8a16:	6838      	ldr	r0, [r7, #0]
    8a18:	4b29      	ldr	r3, [pc, #164]	; (8ac0 <_i2c_m_sync_init_impl+0x130>)
    8a1a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    8a1c:	7bfa      	ldrb	r2, [r7, #15]
    8a1e:	4924      	ldr	r1, [pc, #144]	; (8ab0 <_i2c_m_sync_init_impl+0x120>)
    8a20:	4613      	mov	r3, r2
    8a22:	005b      	lsls	r3, r3, #1
    8a24:	4413      	add	r3, r2
    8a26:	00db      	lsls	r3, r3, #3
    8a28:	440b      	add	r3, r1
    8a2a:	3308      	adds	r3, #8
    8a2c:	681b      	ldr	r3, [r3, #0]
    8a2e:	4619      	mov	r1, r3
    8a30:	6838      	ldr	r0, [r7, #0]
    8a32:	4b24      	ldr	r3, [pc, #144]	; (8ac4 <_i2c_m_sync_init_impl+0x134>)
    8a34:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    8a36:	7bfa      	ldrb	r2, [r7, #15]
    8a38:	491d      	ldr	r1, [pc, #116]	; (8ab0 <_i2c_m_sync_init_impl+0x120>)
    8a3a:	4613      	mov	r3, r2
    8a3c:	005b      	lsls	r3, r3, #1
    8a3e:	4413      	add	r3, r2
    8a40:	00db      	lsls	r3, r3, #3
    8a42:	440b      	add	r3, r1
    8a44:	330c      	adds	r3, #12
    8a46:	681b      	ldr	r3, [r3, #0]
    8a48:	4619      	mov	r1, r3
    8a4a:	6838      	ldr	r0, [r7, #0]
    8a4c:	4b1e      	ldr	r3, [pc, #120]	; (8ac8 <_i2c_m_sync_init_impl+0x138>)
    8a4e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    8a50:	7bfa      	ldrb	r2, [r7, #15]
    8a52:	4917      	ldr	r1, [pc, #92]	; (8ab0 <_i2c_m_sync_init_impl+0x120>)
    8a54:	4613      	mov	r3, r2
    8a56:	005b      	lsls	r3, r3, #1
    8a58:	4413      	add	r3, r2
    8a5a:	00db      	lsls	r3, r3, #3
    8a5c:	440b      	add	r3, r1
    8a5e:	3304      	adds	r3, #4
    8a60:	681b      	ldr	r3, [r3, #0]
    8a62:	0e1b      	lsrs	r3, r3, #24
    8a64:	b29b      	uxth	r3, r3
    8a66:	f003 0303 	and.w	r3, r3, #3
    8a6a:	b29a      	uxth	r2, r3
    8a6c:	687b      	ldr	r3, [r7, #4]
    8a6e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    8a70:	687b      	ldr	r3, [r7, #4]
    8a72:	899b      	ldrh	r3, [r3, #12]
    8a74:	2b01      	cmp	r3, #1
    8a76:	bf8c      	ite	hi
    8a78:	2301      	movhi	r3, #1
    8a7a:	2300      	movls	r3, #0
    8a7c:	b2db      	uxtb	r3, r3
    8a7e:	4619      	mov	r1, r3
    8a80:	6838      	ldr	r0, [r7, #0]
    8a82:	4b12      	ldr	r3, [pc, #72]	; (8acc <_i2c_m_sync_init_impl+0x13c>)
    8a84:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    8a86:	7bfa      	ldrb	r2, [r7, #15]
    8a88:	4909      	ldr	r1, [pc, #36]	; (8ab0 <_i2c_m_sync_init_impl+0x120>)
    8a8a:	4613      	mov	r3, r2
    8a8c:	005b      	lsls	r3, r3, #1
    8a8e:	4413      	add	r3, r2
    8a90:	00db      	lsls	r3, r3, #3
    8a92:	440b      	add	r3, r1
    8a94:	3312      	adds	r3, #18
    8a96:	881a      	ldrh	r2, [r3, #0]
    8a98:	687b      	ldr	r3, [r7, #4]
    8a9a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    8a9c:	2300      	movs	r3, #0
}
    8a9e:	4618      	mov	r0, r3
    8aa0:	3710      	adds	r7, #16
    8aa2:	46bd      	mov	sp, r7
    8aa4:	bd80      	pop	{r7, pc}
    8aa6:	bf00      	nop
    8aa8:	000082ed 	.word	0x000082ed
    8aac:	00007c15 	.word	0x00007c15
    8ab0:	20000018 	.word	0x20000018
    8ab4:	00007e65 	.word	0x00007e65
    8ab8:	00007e0d 	.word	0x00007e0d
    8abc:	00007bf1 	.word	0x00007bf1
    8ac0:	00007e95 	.word	0x00007e95
    8ac4:	0000803d 	.word	0x0000803d
    8ac8:	00008085 	.word	0x00008085
    8acc:	000080c1 	.word	0x000080c1

00008ad0 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b082      	sub	sp, #8
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	6078      	str	r0, [r7, #4]
    8ad8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8ada:	687b      	ldr	r3, [r7, #4]
    8adc:	2b00      	cmp	r3, #0
    8ade:	d004      	beq.n	8aea <_spi_load_regs_master+0x1a>
    8ae0:	683b      	ldr	r3, [r7, #0]
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d001      	beq.n	8aea <_spi_load_regs_master+0x1a>
    8ae6:	2301      	movs	r3, #1
    8ae8:	e000      	b.n	8aec <_spi_load_regs_master+0x1c>
    8aea:	2300      	movs	r3, #0
    8aec:	f003 0301 	and.w	r3, r3, #1
    8af0:	b2db      	uxtb	r3, r3
    8af2:	f640 1242 	movw	r2, #2370	; 0x942
    8af6:	4915      	ldr	r1, [pc, #84]	; (8b4c <_spi_load_regs_master+0x7c>)
    8af8:	4618      	mov	r0, r3
    8afa:	4b15      	ldr	r3, [pc, #84]	; (8b50 <_spi_load_regs_master+0x80>)
    8afc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8afe:	683b      	ldr	r3, [r7, #0]
    8b00:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8b02:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8b06:	f023 0301 	bic.w	r3, r3, #1
    8b0a:	4619      	mov	r1, r3
    8b0c:	6878      	ldr	r0, [r7, #4]
    8b0e:	4b11      	ldr	r3, [pc, #68]	; (8b54 <_spi_load_regs_master+0x84>)
    8b10:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    8b12:	683b      	ldr	r3, [r7, #0]
    8b14:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    8b16:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    8b1a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    8b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8b22:	4619      	mov	r1, r3
    8b24:	6878      	ldr	r0, [r7, #4]
    8b26:	4b0c      	ldr	r3, [pc, #48]	; (8b58 <_spi_load_regs_master+0x88>)
    8b28:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8b2a:	683b      	ldr	r3, [r7, #0]
    8b2c:	7b1b      	ldrb	r3, [r3, #12]
    8b2e:	4619      	mov	r1, r3
    8b30:	6878      	ldr	r0, [r7, #4]
    8b32:	4b0a      	ldr	r3, [pc, #40]	; (8b5c <_spi_load_regs_master+0x8c>)
    8b34:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8b36:	683b      	ldr	r3, [r7, #0]
    8b38:	7b5b      	ldrb	r3, [r3, #13]
    8b3a:	4619      	mov	r1, r3
    8b3c:	6878      	ldr	r0, [r7, #4]
    8b3e:	4b08      	ldr	r3, [pc, #32]	; (8b60 <_spi_load_regs_master+0x90>)
    8b40:	4798      	blx	r3
}
    8b42:	bf00      	nop
    8b44:	3708      	adds	r7, #8
    8b46:	46bd      	mov	sp, r7
    8b48:	bd80      	pop	{r7, pc}
    8b4a:	bf00      	nop
    8b4c:	00011c28 	.word	0x00011c28
    8b50:	0000579d 	.word	0x0000579d
    8b54:	00007f49 	.word	0x00007f49
    8b58:	00008061 	.word	0x00008061
    8b5c:	000080a1 	.word	0x000080a1
    8b60:	000081d9 	.word	0x000081d9

00008b64 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8b64:	b580      	push	{r7, lr}
    8b66:	b082      	sub	sp, #8
    8b68:	af00      	add	r7, sp, #0
    8b6a:	6078      	str	r0, [r7, #4]
    8b6c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8b6e:	687b      	ldr	r3, [r7, #4]
    8b70:	2b00      	cmp	r3, #0
    8b72:	d004      	beq.n	8b7e <_spi_load_regs_slave+0x1a>
    8b74:	683b      	ldr	r3, [r7, #0]
    8b76:	2b00      	cmp	r3, #0
    8b78:	d001      	beq.n	8b7e <_spi_load_regs_slave+0x1a>
    8b7a:	2301      	movs	r3, #1
    8b7c:	e000      	b.n	8b80 <_spi_load_regs_slave+0x1c>
    8b7e:	2300      	movs	r3, #0
    8b80:	f003 0301 	and.w	r3, r3, #1
    8b84:	b2db      	uxtb	r3, r3
    8b86:	f640 1256 	movw	r2, #2390	; 0x956
    8b8a:	491a      	ldr	r1, [pc, #104]	; (8bf4 <_spi_load_regs_slave+0x90>)
    8b8c:	4618      	mov	r0, r3
    8b8e:	4b1a      	ldr	r3, [pc, #104]	; (8bf8 <_spi_load_regs_slave+0x94>)
    8b90:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8b92:	683b      	ldr	r3, [r7, #0]
    8b94:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8b96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8b9a:	f023 0301 	bic.w	r3, r3, #1
    8b9e:	4619      	mov	r1, r3
    8ba0:	6878      	ldr	r0, [r7, #4]
    8ba2:	4b16      	ldr	r3, [pc, #88]	; (8bfc <_spi_load_regs_slave+0x98>)
    8ba4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8ba6:	683b      	ldr	r3, [r7, #0]
    8ba8:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    8baa:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    8bae:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8bb6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    8bba:	4619      	mov	r1, r3
    8bbc:	6878      	ldr	r0, [r7, #4]
    8bbe:	4b10      	ldr	r3, [pc, #64]	; (8c00 <_spi_load_regs_slave+0x9c>)
    8bc0:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8bc2:	683b      	ldr	r3, [r7, #0]
    8bc4:	689b      	ldr	r3, [r3, #8]
    8bc6:	4619      	mov	r1, r3
    8bc8:	6878      	ldr	r0, [r7, #4]
    8bca:	4b0e      	ldr	r3, [pc, #56]	; (8c04 <_spi_load_regs_slave+0xa0>)
    8bcc:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8bce:	683b      	ldr	r3, [r7, #0]
    8bd0:	7b5b      	ldrb	r3, [r3, #13]
    8bd2:	4619      	mov	r1, r3
    8bd4:	6878      	ldr	r0, [r7, #4]
    8bd6:	4b0c      	ldr	r3, [pc, #48]	; (8c08 <_spi_load_regs_slave+0xa4>)
    8bd8:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    8bda:	bf00      	nop
    8bdc:	f04f 31ff 	mov.w	r1, #4294967295
    8be0:	6878      	ldr	r0, [r7, #4]
    8be2:	4b0a      	ldr	r3, [pc, #40]	; (8c0c <_spi_load_regs_slave+0xa8>)
    8be4:	4798      	blx	r3
    8be6:	4603      	mov	r3, r0
    8be8:	2b00      	cmp	r3, #0
    8bea:	d1f7      	bne.n	8bdc <_spi_load_regs_slave+0x78>
		;
}
    8bec:	bf00      	nop
    8bee:	3708      	adds	r7, #8
    8bf0:	46bd      	mov	sp, r7
    8bf2:	bd80      	pop	{r7, pc}
    8bf4:	00011c28 	.word	0x00011c28
    8bf8:	0000579d 	.word	0x0000579d
    8bfc:	00007f49 	.word	0x00007f49
    8c00:	00008061 	.word	0x00008061
    8c04:	00008145 	.word	0x00008145
    8c08:	000081d9 	.word	0x000081d9
    8c0c:	00007c61 	.word	0x00007c61

00008c10 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    8c10:	b580      	push	{r7, lr}
    8c12:	b084      	sub	sp, #16
    8c14:	af00      	add	r7, sp, #0
    8c16:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	4618      	mov	r0, r3
    8c1c:	4b11      	ldr	r3, [pc, #68]	; (8c64 <_spi_get_regs+0x54>)
    8c1e:	4798      	blx	r3
    8c20:	4603      	mov	r3, r0
    8c22:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8c24:	2300      	movs	r3, #0
    8c26:	73fb      	strb	r3, [r7, #15]
    8c28:	e014      	b.n	8c54 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    8c2a:	7bfa      	ldrb	r2, [r7, #15]
    8c2c:	490e      	ldr	r1, [pc, #56]	; (8c68 <_spi_get_regs+0x58>)
    8c2e:	4613      	mov	r3, r2
    8c30:	011b      	lsls	r3, r3, #4
    8c32:	4413      	add	r3, r2
    8c34:	440b      	add	r3, r1
    8c36:	3310      	adds	r3, #16
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	7bba      	ldrb	r2, [r7, #14]
    8c3c:	429a      	cmp	r2, r3
    8c3e:	d106      	bne.n	8c4e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    8c40:	7bfa      	ldrb	r2, [r7, #15]
    8c42:	4613      	mov	r3, r2
    8c44:	011b      	lsls	r3, r3, #4
    8c46:	4413      	add	r3, r2
    8c48:	4a07      	ldr	r2, [pc, #28]	; (8c68 <_spi_get_regs+0x58>)
    8c4a:	4413      	add	r3, r2
    8c4c:	e006      	b.n	8c5c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8c4e:	7bfb      	ldrb	r3, [r7, #15]
    8c50:	3301      	adds	r3, #1
    8c52:	73fb      	strb	r3, [r7, #15]
    8c54:	7bfb      	ldrb	r3, [r7, #15]
    8c56:	2b01      	cmp	r3, #1
    8c58:	d9e7      	bls.n	8c2a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    8c5a:	2300      	movs	r3, #0
}
    8c5c:	4618      	mov	r0, r3
    8c5e:	3710      	adds	r7, #16
    8c60:	46bd      	mov	sp, r7
    8c62:	bd80      	pop	{r7, pc}
    8c64:	0000823d 	.word	0x0000823d
    8c68:	00011c64 	.word	0x00011c64

00008c6c <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    8c6c:	b580      	push	{r7, lr}
    8c6e:	b084      	sub	sp, #16
    8c70:	af00      	add	r7, sp, #0
    8c72:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    8c74:	687b      	ldr	r3, [r7, #4]
    8c76:	681b      	ldr	r3, [r3, #0]
    8c78:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    8c7a:	68f8      	ldr	r0, [r7, #12]
    8c7c:	4b21      	ldr	r3, [pc, #132]	; (8d04 <_spi_handler+0x98>)
    8c7e:	4798      	blx	r3
    8c80:	4603      	mov	r3, r0
    8c82:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    8c84:	68f8      	ldr	r0, [r7, #12]
    8c86:	4b20      	ldr	r3, [pc, #128]	; (8d08 <_spi_handler+0x9c>)
    8c88:	4798      	blx	r3
    8c8a:	4603      	mov	r3, r0
    8c8c:	461a      	mov	r2, r3
    8c8e:	7afb      	ldrb	r3, [r7, #11]
    8c90:	4013      	ands	r3, r2
    8c92:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    8c94:	7afb      	ldrb	r3, [r7, #11]
    8c96:	f003 0301 	and.w	r3, r3, #1
    8c9a:	2b00      	cmp	r3, #0
    8c9c:	d004      	beq.n	8ca8 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    8c9e:	687b      	ldr	r3, [r7, #4]
    8ca0:	689b      	ldr	r3, [r3, #8]
    8ca2:	6878      	ldr	r0, [r7, #4]
    8ca4:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    8ca6:	e029      	b.n	8cfc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    8ca8:	7afb      	ldrb	r3, [r7, #11]
    8caa:	f003 0304 	and.w	r3, r3, #4
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d004      	beq.n	8cbc <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    8cb2:	687b      	ldr	r3, [r7, #4]
    8cb4:	68db      	ldr	r3, [r3, #12]
    8cb6:	6878      	ldr	r0, [r7, #4]
    8cb8:	4798      	blx	r3
}
    8cba:	e01f      	b.n	8cfc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    8cbc:	7afb      	ldrb	r3, [r7, #11]
    8cbe:	f003 0302 	and.w	r3, r3, #2
    8cc2:	2b00      	cmp	r3, #0
    8cc4:	d008      	beq.n	8cd8 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    8cc6:	2102      	movs	r1, #2
    8cc8:	68f8      	ldr	r0, [r7, #12]
    8cca:	4b10      	ldr	r3, [pc, #64]	; (8d0c <_spi_handler+0xa0>)
    8ccc:	4798      	blx	r3
		dev->callbacks.complete(dev);
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	691b      	ldr	r3, [r3, #16]
    8cd2:	6878      	ldr	r0, [r7, #4]
    8cd4:	4798      	blx	r3
}
    8cd6:	e011      	b.n	8cfc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    8cd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
    8cdc:	2b00      	cmp	r3, #0
    8cde:	da0d      	bge.n	8cfc <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    8ce0:	2104      	movs	r1, #4
    8ce2:	68f8      	ldr	r0, [r7, #12]
    8ce4:	4b0a      	ldr	r3, [pc, #40]	; (8d10 <_spi_handler+0xa4>)
    8ce6:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8ce8:	2180      	movs	r1, #128	; 0x80
    8cea:	68f8      	ldr	r0, [r7, #12]
    8cec:	4b07      	ldr	r3, [pc, #28]	; (8d0c <_spi_handler+0xa0>)
    8cee:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    8cf0:	687b      	ldr	r3, [r7, #4]
    8cf2:	695b      	ldr	r3, [r3, #20]
    8cf4:	f06f 0112 	mvn.w	r1, #18
    8cf8:	6878      	ldr	r0, [r7, #4]
    8cfa:	4798      	blx	r3
}
    8cfc:	bf00      	nop
    8cfe:	3710      	adds	r7, #16
    8d00:	46bd      	mov	sp, r7
    8d02:	bd80      	pop	{r7, pc}
    8d04:	00007d1d 	.word	0x00007d1d
    8d08:	00007df1 	.word	0x00007df1
    8d0c:	00007d37 	.word	0x00007d37
    8d10:	000081f9 	.word	0x000081f9

00008d14 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    8d14:	b580      	push	{r7, lr}
    8d16:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    8d18:	4b03      	ldr	r3, [pc, #12]	; (8d28 <SERCOM4_0_Handler+0x14>)
    8d1a:	681b      	ldr	r3, [r3, #0]
    8d1c:	4618      	mov	r0, r3
    8d1e:	4b03      	ldr	r3, [pc, #12]	; (8d2c <SERCOM4_0_Handler+0x18>)
    8d20:	4798      	blx	r3
}
    8d22:	bf00      	nop
    8d24:	bd80      	pop	{r7, pc}
    8d26:	bf00      	nop
    8d28:	20001d20 	.word	0x20001d20
    8d2c:	00008c6d 	.word	0x00008c6d

00008d30 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    8d30:	b580      	push	{r7, lr}
    8d32:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    8d34:	4b03      	ldr	r3, [pc, #12]	; (8d44 <SERCOM4_1_Handler+0x14>)
    8d36:	681b      	ldr	r3, [r3, #0]
    8d38:	4618      	mov	r0, r3
    8d3a:	4b03      	ldr	r3, [pc, #12]	; (8d48 <SERCOM4_1_Handler+0x18>)
    8d3c:	4798      	blx	r3
}
    8d3e:	bf00      	nop
    8d40:	bd80      	pop	{r7, pc}
    8d42:	bf00      	nop
    8d44:	20001d20 	.word	0x20001d20
    8d48:	00008c6d 	.word	0x00008c6d

00008d4c <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    8d4c:	b580      	push	{r7, lr}
    8d4e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    8d50:	4b03      	ldr	r3, [pc, #12]	; (8d60 <SERCOM4_2_Handler+0x14>)
    8d52:	681b      	ldr	r3, [r3, #0]
    8d54:	4618      	mov	r0, r3
    8d56:	4b03      	ldr	r3, [pc, #12]	; (8d64 <SERCOM4_2_Handler+0x18>)
    8d58:	4798      	blx	r3
}
    8d5a:	bf00      	nop
    8d5c:	bd80      	pop	{r7, pc}
    8d5e:	bf00      	nop
    8d60:	20001d20 	.word	0x20001d20
    8d64:	00008c6d 	.word	0x00008c6d

00008d68 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    8d68:	b580      	push	{r7, lr}
    8d6a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    8d6c:	4b03      	ldr	r3, [pc, #12]	; (8d7c <SERCOM4_3_Handler+0x14>)
    8d6e:	681b      	ldr	r3, [r3, #0]
    8d70:	4618      	mov	r0, r3
    8d72:	4b03      	ldr	r3, [pc, #12]	; (8d80 <SERCOM4_3_Handler+0x18>)
    8d74:	4798      	blx	r3
}
    8d76:	bf00      	nop
    8d78:	bd80      	pop	{r7, pc}
    8d7a:	bf00      	nop
    8d7c:	20001d20 	.word	0x20001d20
    8d80:	00008c6d 	.word	0x00008c6d

00008d84 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    8d84:	b580      	push	{r7, lr}
    8d86:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8d88:	4b03      	ldr	r3, [pc, #12]	; (8d98 <SERCOM5_0_Handler+0x14>)
    8d8a:	681b      	ldr	r3, [r3, #0]
    8d8c:	4618      	mov	r0, r3
    8d8e:	4b03      	ldr	r3, [pc, #12]	; (8d9c <SERCOM5_0_Handler+0x18>)
    8d90:	4798      	blx	r3
}
    8d92:	bf00      	nop
    8d94:	bd80      	pop	{r7, pc}
    8d96:	bf00      	nop
    8d98:	20001d24 	.word	0x20001d24
    8d9c:	000085a1 	.word	0x000085a1

00008da0 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    8da0:	b580      	push	{r7, lr}
    8da2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8da4:	4b03      	ldr	r3, [pc, #12]	; (8db4 <SERCOM5_1_Handler+0x14>)
    8da6:	681b      	ldr	r3, [r3, #0]
    8da8:	4618      	mov	r0, r3
    8daa:	4b03      	ldr	r3, [pc, #12]	; (8db8 <SERCOM5_1_Handler+0x18>)
    8dac:	4798      	blx	r3
}
    8dae:	bf00      	nop
    8db0:	bd80      	pop	{r7, pc}
    8db2:	bf00      	nop
    8db4:	20001d24 	.word	0x20001d24
    8db8:	000085a1 	.word	0x000085a1

00008dbc <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    8dbc:	b580      	push	{r7, lr}
    8dbe:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8dc0:	4b03      	ldr	r3, [pc, #12]	; (8dd0 <SERCOM5_2_Handler+0x14>)
    8dc2:	681b      	ldr	r3, [r3, #0]
    8dc4:	4618      	mov	r0, r3
    8dc6:	4b03      	ldr	r3, [pc, #12]	; (8dd4 <SERCOM5_2_Handler+0x18>)
    8dc8:	4798      	blx	r3
}
    8dca:	bf00      	nop
    8dcc:	bd80      	pop	{r7, pc}
    8dce:	bf00      	nop
    8dd0:	20001d24 	.word	0x20001d24
    8dd4:	000085a1 	.word	0x000085a1

00008dd8 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    8dd8:	b580      	push	{r7, lr}
    8dda:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8ddc:	4b03      	ldr	r3, [pc, #12]	; (8dec <SERCOM5_3_Handler+0x14>)
    8dde:	681b      	ldr	r3, [r3, #0]
    8de0:	4618      	mov	r0, r3
    8de2:	4b03      	ldr	r3, [pc, #12]	; (8df0 <SERCOM5_3_Handler+0x18>)
    8de4:	4798      	blx	r3
}
    8de6:	bf00      	nop
    8de8:	bd80      	pop	{r7, pc}
    8dea:	bf00      	nop
    8dec:	20001d24 	.word	0x20001d24
    8df0:	000085a1 	.word	0x000085a1

00008df4 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    8df4:	b580      	push	{r7, lr}
    8df6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8df8:	4b03      	ldr	r3, [pc, #12]	; (8e08 <SERCOM7_0_Handler+0x14>)
    8dfa:	681b      	ldr	r3, [r3, #0]
    8dfc:	4618      	mov	r0, r3
    8dfe:	4b03      	ldr	r3, [pc, #12]	; (8e0c <SERCOM7_0_Handler+0x18>)
    8e00:	4798      	blx	r3
}
    8e02:	bf00      	nop
    8e04:	bd80      	pop	{r7, pc}
    8e06:	bf00      	nop
    8e08:	20001d28 	.word	0x20001d28
    8e0c:	000085a1 	.word	0x000085a1

00008e10 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    8e10:	b580      	push	{r7, lr}
    8e12:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8e14:	4b03      	ldr	r3, [pc, #12]	; (8e24 <SERCOM7_1_Handler+0x14>)
    8e16:	681b      	ldr	r3, [r3, #0]
    8e18:	4618      	mov	r0, r3
    8e1a:	4b03      	ldr	r3, [pc, #12]	; (8e28 <SERCOM7_1_Handler+0x18>)
    8e1c:	4798      	blx	r3
}
    8e1e:	bf00      	nop
    8e20:	bd80      	pop	{r7, pc}
    8e22:	bf00      	nop
    8e24:	20001d28 	.word	0x20001d28
    8e28:	000085a1 	.word	0x000085a1

00008e2c <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    8e2c:	b580      	push	{r7, lr}
    8e2e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8e30:	4b03      	ldr	r3, [pc, #12]	; (8e40 <SERCOM7_2_Handler+0x14>)
    8e32:	681b      	ldr	r3, [r3, #0]
    8e34:	4618      	mov	r0, r3
    8e36:	4b03      	ldr	r3, [pc, #12]	; (8e44 <SERCOM7_2_Handler+0x18>)
    8e38:	4798      	blx	r3
}
    8e3a:	bf00      	nop
    8e3c:	bd80      	pop	{r7, pc}
    8e3e:	bf00      	nop
    8e40:	20001d28 	.word	0x20001d28
    8e44:	000085a1 	.word	0x000085a1

00008e48 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    8e48:	b580      	push	{r7, lr}
    8e4a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8e4c:	4b03      	ldr	r3, [pc, #12]	; (8e5c <SERCOM7_3_Handler+0x14>)
    8e4e:	681b      	ldr	r3, [r3, #0]
    8e50:	4618      	mov	r0, r3
    8e52:	4b03      	ldr	r3, [pc, #12]	; (8e60 <SERCOM7_3_Handler+0x18>)
    8e54:	4798      	blx	r3
}
    8e56:	bf00      	nop
    8e58:	bd80      	pop	{r7, pc}
    8e5a:	bf00      	nop
    8e5c:	20001d28 	.word	0x20001d28
    8e60:	000085a1 	.word	0x000085a1

00008e64 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    8e64:	b580      	push	{r7, lr}
    8e66:	b084      	sub	sp, #16
    8e68:	af00      	add	r7, sp, #0
    8e6a:	6078      	str	r0, [r7, #4]
    8e6c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    8e6e:	683b      	ldr	r3, [r7, #0]
    8e70:	4618      	mov	r0, r3
    8e72:	4b35      	ldr	r3, [pc, #212]	; (8f48 <_spi_m_sync_init+0xe4>)
    8e74:	4798      	blx	r3
    8e76:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    8e78:	687b      	ldr	r3, [r7, #4]
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d004      	beq.n	8e88 <_spi_m_sync_init+0x24>
    8e7e:	683b      	ldr	r3, [r7, #0]
    8e80:	2b00      	cmp	r3, #0
    8e82:	d001      	beq.n	8e88 <_spi_m_sync_init+0x24>
    8e84:	2301      	movs	r3, #1
    8e86:	e000      	b.n	8e8a <_spi_m_sync_init+0x26>
    8e88:	2300      	movs	r3, #0
    8e8a:	f003 0301 	and.w	r3, r3, #1
    8e8e:	b2db      	uxtb	r3, r3
    8e90:	f640 12e9 	movw	r2, #2537	; 0x9e9
    8e94:	492d      	ldr	r1, [pc, #180]	; (8f4c <_spi_m_sync_init+0xe8>)
    8e96:	4618      	mov	r0, r3
    8e98:	4b2d      	ldr	r3, [pc, #180]	; (8f50 <_spi_m_sync_init+0xec>)
    8e9a:	4798      	blx	r3

	if (regs == NULL) {
    8e9c:	68fb      	ldr	r3, [r7, #12]
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d102      	bne.n	8ea8 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    8ea2:	f06f 030c 	mvn.w	r3, #12
    8ea6:	e04a      	b.n	8f3e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8ea8:	2101      	movs	r1, #1
    8eaa:	6838      	ldr	r0, [r7, #0]
    8eac:	4b29      	ldr	r3, [pc, #164]	; (8f54 <_spi_m_sync_init+0xf0>)
    8eae:	4798      	blx	r3
    8eb0:	4603      	mov	r3, r0
    8eb2:	f083 0301 	eor.w	r3, r3, #1
    8eb6:	b2db      	uxtb	r3, r3
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d019      	beq.n	8ef0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8ebc:	68fb      	ldr	r3, [r7, #12]
    8ebe:	681b      	ldr	r3, [r3, #0]
    8ec0:	f003 031c 	and.w	r3, r3, #28
    8ec4:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8ec6:	2102      	movs	r1, #2
    8ec8:	6838      	ldr	r0, [r7, #0]
    8eca:	4b23      	ldr	r3, [pc, #140]	; (8f58 <_spi_m_sync_init+0xf4>)
    8ecc:	4798      	blx	r3
    8ece:	4603      	mov	r3, r0
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d006      	beq.n	8ee2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8ed4:	6838      	ldr	r0, [r7, #0]
    8ed6:	4b21      	ldr	r3, [pc, #132]	; (8f5c <_spi_m_sync_init+0xf8>)
    8ed8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    8eda:	2102      	movs	r1, #2
    8edc:	6838      	ldr	r0, [r7, #0]
    8ede:	4b20      	ldr	r3, [pc, #128]	; (8f60 <_spi_m_sync_init+0xfc>)
    8ee0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8ee2:	68bb      	ldr	r3, [r7, #8]
    8ee4:	f043 0301 	orr.w	r3, r3, #1
    8ee8:	4619      	mov	r1, r3
    8eea:	6838      	ldr	r0, [r7, #0]
    8eec:	4b1d      	ldr	r3, [pc, #116]	; (8f64 <_spi_m_sync_init+0x100>)
    8eee:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8ef0:	2101      	movs	r1, #1
    8ef2:	6838      	ldr	r0, [r7, #0]
    8ef4:	4b1a      	ldr	r3, [pc, #104]	; (8f60 <_spi_m_sync_init+0xfc>)
    8ef6:	4798      	blx	r3

	dev->prvt = hw;
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	683a      	ldr	r2, [r7, #0]
    8efc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    8efe:	68fb      	ldr	r3, [r7, #12]
    8f00:	681b      	ldr	r3, [r3, #0]
    8f02:	f003 031c 	and.w	r3, r3, #28
    8f06:	2b08      	cmp	r3, #8
    8f08:	d104      	bne.n	8f14 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    8f0a:	68f9      	ldr	r1, [r7, #12]
    8f0c:	6838      	ldr	r0, [r7, #0]
    8f0e:	4b16      	ldr	r3, [pc, #88]	; (8f68 <_spi_m_sync_init+0x104>)
    8f10:	4798      	blx	r3
    8f12:	e003      	b.n	8f1c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    8f14:	68f9      	ldr	r1, [r7, #12]
    8f16:	6838      	ldr	r0, [r7, #0]
    8f18:	4b14      	ldr	r3, [pc, #80]	; (8f6c <_spi_m_sync_init+0x108>)
    8f1a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    8f1c:	68fb      	ldr	r3, [r7, #12]
    8f1e:	685b      	ldr	r3, [r3, #4]
    8f20:	f003 0307 	and.w	r3, r3, #7
    8f24:	2b00      	cmp	r3, #0
    8f26:	d101      	bne.n	8f2c <_spi_m_sync_init+0xc8>
    8f28:	2201      	movs	r2, #1
    8f2a:	e000      	b.n	8f2e <_spi_m_sync_init+0xca>
    8f2c:	2202      	movs	r2, #2
    8f2e:	687b      	ldr	r3, [r7, #4]
    8f30:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    8f32:	68fb      	ldr	r3, [r7, #12]
    8f34:	89db      	ldrh	r3, [r3, #14]
    8f36:	b29a      	uxth	r2, r3
    8f38:	687b      	ldr	r3, [r7, #4]
    8f3a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    8f3c:	2300      	movs	r3, #0
}
    8f3e:	4618      	mov	r0, r3
    8f40:	3710      	adds	r7, #16
    8f42:	46bd      	mov	sp, r7
    8f44:	bd80      	pop	{r7, pc}
    8f46:	bf00      	nop
    8f48:	00008c11 	.word	0x00008c11
    8f4c:	00011c28 	.word	0x00011c28
    8f50:	0000579d 	.word	0x0000579d
    8f54:	00007c61 	.word	0x00007c61
    8f58:	00007f19 	.word	0x00007f19
    8f5c:	00007ef1 	.word	0x00007ef1
    8f60:	00007c3d 	.word	0x00007c3d
    8f64:	00007f49 	.word	0x00007f49
    8f68:	00008b65 	.word	0x00008b65
    8f6c:	00008ad1 	.word	0x00008ad1

00008f70 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    8f70:	b580      	push	{r7, lr}
    8f72:	b086      	sub	sp, #24
    8f74:	af00      	add	r7, sp, #0
    8f76:	6078      	str	r0, [r7, #4]
    8f78:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    8f7a:	687b      	ldr	r3, [r7, #4]
    8f7c:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    8f7e:	6839      	ldr	r1, [r7, #0]
    8f80:	6878      	ldr	r0, [r7, #4]
    8f82:	4b1a      	ldr	r3, [pc, #104]	; (8fec <_spi_m_async_init+0x7c>)
    8f84:	4798      	blx	r3
    8f86:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    8f88:	68bb      	ldr	r3, [r7, #8]
    8f8a:	2b00      	cmp	r3, #0
    8f8c:	da01      	bge.n	8f92 <_spi_m_async_init+0x22>
		return rc;
    8f8e:	68bb      	ldr	r3, [r7, #8]
    8f90:	e028      	b.n	8fe4 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    8f92:	6879      	ldr	r1, [r7, #4]
    8f94:	6838      	ldr	r0, [r7, #0]
    8f96:	4b16      	ldr	r3, [pc, #88]	; (8ff0 <_spi_m_async_init+0x80>)
    8f98:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    8f9a:	68fb      	ldr	r3, [r7, #12]
    8f9c:	2200      	movs	r2, #0
    8f9e:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    8fa0:	68fb      	ldr	r3, [r7, #12]
    8fa2:	2200      	movs	r2, #0
    8fa4:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    8fa6:	68fb      	ldr	r3, [r7, #12]
    8fa8:	2200      	movs	r2, #0
    8faa:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    8fac:	6838      	ldr	r0, [r7, #0]
    8fae:	4b11      	ldr	r3, [pc, #68]	; (8ff4 <_spi_m_async_init+0x84>)
    8fb0:	4798      	blx	r3
    8fb2:	4603      	mov	r3, r0
    8fb4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8fb6:	2300      	movs	r3, #0
    8fb8:	613b      	str	r3, [r7, #16]
    8fba:	e00f      	b.n	8fdc <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    8fbc:	7dfb      	ldrb	r3, [r7, #23]
    8fbe:	b21b      	sxth	r3, r3
    8fc0:	4618      	mov	r0, r3
    8fc2:	4b0d      	ldr	r3, [pc, #52]	; (8ff8 <_spi_m_async_init+0x88>)
    8fc4:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    8fc6:	7dfb      	ldrb	r3, [r7, #23]
    8fc8:	b21b      	sxth	r3, r3
    8fca:	4618      	mov	r0, r3
    8fcc:	4b0b      	ldr	r3, [pc, #44]	; (8ffc <_spi_m_async_init+0x8c>)
    8fce:	4798      	blx	r3
		irq++;
    8fd0:	7dfb      	ldrb	r3, [r7, #23]
    8fd2:	3301      	adds	r3, #1
    8fd4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8fd6:	693b      	ldr	r3, [r7, #16]
    8fd8:	3301      	adds	r3, #1
    8fda:	613b      	str	r3, [r7, #16]
    8fdc:	693b      	ldr	r3, [r7, #16]
    8fde:	2b03      	cmp	r3, #3
    8fe0:	d9ec      	bls.n	8fbc <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    8fe2:	2300      	movs	r3, #0
}
    8fe4:	4618      	mov	r0, r3
    8fe6:	3718      	adds	r7, #24
    8fe8:	46bd      	mov	sp, r7
    8fea:	bd80      	pop	{r7, pc}
    8fec:	00008e65 	.word	0x00008e65
    8ff0:	00008299 	.word	0x00008299
    8ff4:	000086a5 	.word	0x000086a5
    8ff8:	00007b71 	.word	0x00007b71
    8ffc:	00007bb5 	.word	0x00007bb5

00009000 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    9000:	b580      	push	{r7, lr}
    9002:	b082      	sub	sp, #8
    9004:	af00      	add	r7, sp, #0
    9006:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    9008:	bf00      	nop
    900a:	2103      	movs	r1, #3
    900c:	6878      	ldr	r0, [r7, #4]
    900e:	4b06      	ldr	r3, [pc, #24]	; (9028 <_spi_wait_bus_idle+0x28>)
    9010:	4798      	blx	r3
    9012:	4603      	mov	r3, r0
    9014:	2b00      	cmp	r3, #0
    9016:	d0f8      	beq.n	900a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    9018:	2103      	movs	r1, #3
    901a:	6878      	ldr	r0, [r7, #4]
    901c:	4b03      	ldr	r3, [pc, #12]	; (902c <_spi_wait_bus_idle+0x2c>)
    901e:	4798      	blx	r3
}
    9020:	bf00      	nop
    9022:	3708      	adds	r7, #8
    9024:	46bd      	mov	sp, r7
    9026:	bd80      	pop	{r7, pc}
    9028:	00007cf5 	.word	0x00007cf5
    902c:	00007d37 	.word	0x00007d37

00009030 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    9030:	b580      	push	{r7, lr}
    9032:	b086      	sub	sp, #24
    9034:	af00      	add	r7, sp, #0
    9036:	60f8      	str	r0, [r7, #12]
    9038:	60b9      	str	r1, [r7, #8]
    903a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    903c:	68bb      	ldr	r3, [r7, #8]
    903e:	f003 0304 	and.w	r3, r3, #4
    9042:	2b00      	cmp	r3, #0
    9044:	d101      	bne.n	904a <_spi_rx_check_and_receive+0x1a>
		return false;
    9046:	2300      	movs	r3, #0
    9048:	e022      	b.n	9090 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    904a:	68f8      	ldr	r0, [r7, #12]
    904c:	4b12      	ldr	r3, [pc, #72]	; (9098 <_spi_rx_check_and_receive+0x68>)
    904e:	4798      	blx	r3
    9050:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    9052:	687b      	ldr	r3, [r7, #4]
    9054:	685b      	ldr	r3, [r3, #4]
    9056:	2b00      	cmp	r3, #0
    9058:	d014      	beq.n	9084 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    905a:	687b      	ldr	r3, [r7, #4]
    905c:	685b      	ldr	r3, [r3, #4]
    905e:	1c59      	adds	r1, r3, #1
    9060:	687a      	ldr	r2, [r7, #4]
    9062:	6051      	str	r1, [r2, #4]
    9064:	697a      	ldr	r2, [r7, #20]
    9066:	b2d2      	uxtb	r2, r2
    9068:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    906a:	687b      	ldr	r3, [r7, #4]
    906c:	7c1b      	ldrb	r3, [r3, #16]
    906e:	2b01      	cmp	r3, #1
    9070:	d908      	bls.n	9084 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    9072:	687b      	ldr	r3, [r7, #4]
    9074:	685b      	ldr	r3, [r3, #4]
    9076:	1c59      	adds	r1, r3, #1
    9078:	687a      	ldr	r2, [r7, #4]
    907a:	6051      	str	r1, [r2, #4]
    907c:	697a      	ldr	r2, [r7, #20]
    907e:	0a12      	lsrs	r2, r2, #8
    9080:	b2d2      	uxtb	r2, r2
    9082:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    9084:	687b      	ldr	r3, [r7, #4]
    9086:	68db      	ldr	r3, [r3, #12]
    9088:	1c5a      	adds	r2, r3, #1
    908a:	687b      	ldr	r3, [r7, #4]
    908c:	60da      	str	r2, [r3, #12]

	return true;
    908e:	2301      	movs	r3, #1
}
    9090:	4618      	mov	r0, r3
    9092:	3718      	adds	r7, #24
    9094:	46bd      	mov	sp, r7
    9096:	bd80      	pop	{r7, pc}
    9098:	000081c1 	.word	0x000081c1

0000909c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    909c:	b580      	push	{r7, lr}
    909e:	b086      	sub	sp, #24
    90a0:	af00      	add	r7, sp, #0
    90a2:	60f8      	str	r0, [r7, #12]
    90a4:	60b9      	str	r1, [r7, #8]
    90a6:	607a      	str	r2, [r7, #4]
    90a8:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    90aa:	68bb      	ldr	r3, [r7, #8]
    90ac:	f003 0301 	and.w	r3, r3, #1
    90b0:	2b00      	cmp	r3, #0
    90b2:	d028      	beq.n	9106 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	681b      	ldr	r3, [r3, #0]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d018      	beq.n	90ee <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    90bc:	687b      	ldr	r3, [r7, #4]
    90be:	681b      	ldr	r3, [r3, #0]
    90c0:	1c59      	adds	r1, r3, #1
    90c2:	687a      	ldr	r2, [r7, #4]
    90c4:	6011      	str	r1, [r2, #0]
    90c6:	781b      	ldrb	r3, [r3, #0]
    90c8:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    90ca:	687b      	ldr	r3, [r7, #4]
    90cc:	7c1b      	ldrb	r3, [r3, #16]
    90ce:	2b01      	cmp	r3, #1
    90d0:	d90f      	bls.n	90f2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	681b      	ldr	r3, [r3, #0]
    90d6:	781b      	ldrb	r3, [r3, #0]
    90d8:	021b      	lsls	r3, r3, #8
    90da:	461a      	mov	r2, r3
    90dc:	697b      	ldr	r3, [r7, #20]
    90de:	4313      	orrs	r3, r2
    90e0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    90e2:	687b      	ldr	r3, [r7, #4]
    90e4:	681b      	ldr	r3, [r3, #0]
    90e6:	1c5a      	adds	r2, r3, #1
    90e8:	687b      	ldr	r3, [r7, #4]
    90ea:	601a      	str	r2, [r3, #0]
    90ec:	e001      	b.n	90f2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    90ee:	887b      	ldrh	r3, [r7, #2]
    90f0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    90f2:	687b      	ldr	r3, [r7, #4]
    90f4:	689b      	ldr	r3, [r3, #8]
    90f6:	1c5a      	adds	r2, r3, #1
    90f8:	687b      	ldr	r3, [r7, #4]
    90fa:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    90fc:	6979      	ldr	r1, [r7, #20]
    90fe:	68f8      	ldr	r0, [r7, #12]
    9100:	4b03      	ldr	r3, [pc, #12]	; (9110 <_spi_tx_check_and_send+0x74>)
    9102:	4798      	blx	r3
    9104:	e000      	b.n	9108 <_spi_tx_check_and_send+0x6c>
		return;
    9106:	bf00      	nop
}
    9108:	3718      	adds	r7, #24
    910a:	46bd      	mov	sp, r7
    910c:	bd80      	pop	{r7, pc}
    910e:	bf00      	nop
    9110:	000081a5 	.word	0x000081a5

00009114 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    9114:	b580      	push	{r7, lr}
    9116:	b082      	sub	sp, #8
    9118:	af00      	add	r7, sp, #0
    911a:	6078      	str	r0, [r7, #4]
    911c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    911e:	687b      	ldr	r3, [r7, #4]
    9120:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9124:	2b00      	cmp	r3, #0
    9126:	d00b      	beq.n	9140 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    9128:	f64f 71ff 	movw	r1, #65535	; 0xffff
    912c:	6838      	ldr	r0, [r7, #0]
    912e:	4b07      	ldr	r3, [pc, #28]	; (914c <_spi_err_check+0x38>)
    9130:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    9132:	2180      	movs	r1, #128	; 0x80
    9134:	6838      	ldr	r0, [r7, #0]
    9136:	4b06      	ldr	r3, [pc, #24]	; (9150 <_spi_err_check+0x3c>)
    9138:	4798      	blx	r3
		return ERR_OVERFLOW;
    913a:	f06f 0312 	mvn.w	r3, #18
    913e:	e000      	b.n	9142 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    9140:	2300      	movs	r3, #0
}
    9142:	4618      	mov	r0, r3
    9144:	3708      	adds	r7, #8
    9146:	46bd      	mov	sp, r7
    9148:	bd80      	pop	{r7, pc}
    914a:	bf00      	nop
    914c:	000081f9 	.word	0x000081f9
    9150:	00007d37 	.word	0x00007d37

00009154 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    9154:	b590      	push	{r4, r7, lr}
    9156:	b08b      	sub	sp, #44	; 0x2c
    9158:	af00      	add	r7, sp, #0
    915a:	6078      	str	r0, [r7, #4]
    915c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    915e:	687b      	ldr	r3, [r7, #4]
    9160:	681b      	ldr	r3, [r3, #0]
    9162:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    9164:	2300      	movs	r3, #0
    9166:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    9168:	683b      	ldr	r3, [r7, #0]
    916a:	681b      	ldr	r3, [r3, #0]
    916c:	60bb      	str	r3, [r7, #8]
    916e:	683b      	ldr	r3, [r7, #0]
    9170:	685b      	ldr	r3, [r3, #4]
    9172:	60fb      	str	r3, [r7, #12]
    9174:	2300      	movs	r3, #0
    9176:	613b      	str	r3, [r7, #16]
    9178:	2300      	movs	r3, #0
    917a:	617b      	str	r3, [r7, #20]
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	791b      	ldrb	r3, [r3, #4]
    9180:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    9182:	687b      	ldr	r3, [r7, #4]
    9184:	2b00      	cmp	r3, #0
    9186:	d004      	beq.n	9192 <_spi_m_sync_trans+0x3e>
    9188:	6a3b      	ldr	r3, [r7, #32]
    918a:	2b00      	cmp	r3, #0
    918c:	d001      	beq.n	9192 <_spi_m_sync_trans+0x3e>
    918e:	2301      	movs	r3, #1
    9190:	e000      	b.n	9194 <_spi_m_sync_trans+0x40>
    9192:	2300      	movs	r3, #0
    9194:	f003 0301 	and.w	r3, r3, #1
    9198:	b2db      	uxtb	r3, r3
    919a:	f640 324d 	movw	r2, #2893	; 0xb4d
    919e:	492b      	ldr	r1, [pc, #172]	; (924c <_spi_m_sync_trans+0xf8>)
    91a0:	4618      	mov	r0, r3
    91a2:	4b2b      	ldr	r3, [pc, #172]	; (9250 <_spi_m_sync_trans+0xfc>)
    91a4:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    91a6:	2107      	movs	r1, #7
    91a8:	6a38      	ldr	r0, [r7, #32]
    91aa:	4b2a      	ldr	r3, [pc, #168]	; (9254 <_spi_m_sync_trans+0x100>)
    91ac:	4798      	blx	r3
    91ae:	4603      	mov	r3, r0
    91b0:	2b00      	cmp	r3, #0
    91b2:	d002      	beq.n	91ba <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    91b4:	f06f 0303 	mvn.w	r3, #3
    91b8:	e043      	b.n	9242 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    91ba:	6a38      	ldr	r0, [r7, #32]
    91bc:	4b26      	ldr	r3, [pc, #152]	; (9258 <_spi_m_sync_trans+0x104>)
    91be:	4798      	blx	r3
    91c0:	4603      	mov	r3, r0
    91c2:	f083 0301 	eor.w	r3, r3, #1
    91c6:	b2db      	uxtb	r3, r3
    91c8:	2b00      	cmp	r3, #0
    91ca:	d002      	beq.n	91d2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    91cc:	f06f 0313 	mvn.w	r3, #19
    91d0:	e037      	b.n	9242 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    91d2:	6a38      	ldr	r0, [r7, #32]
    91d4:	4b21      	ldr	r3, [pc, #132]	; (925c <_spi_m_sync_trans+0x108>)
    91d6:	4798      	blx	r3
    91d8:	4603      	mov	r3, r0
    91da:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    91dc:	f107 0308 	add.w	r3, r7, #8
    91e0:	461a      	mov	r2, r3
    91e2:	69f9      	ldr	r1, [r7, #28]
    91e4:	6a38      	ldr	r0, [r7, #32]
    91e6:	4b1e      	ldr	r3, [pc, #120]	; (9260 <_spi_m_sync_trans+0x10c>)
    91e8:	4798      	blx	r3
    91ea:	4603      	mov	r3, r0
    91ec:	f083 0301 	eor.w	r3, r3, #1
    91f0:	b2db      	uxtb	r3, r3
    91f2:	2b00      	cmp	r3, #0
    91f4:	d00b      	beq.n	920e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    91f6:	697a      	ldr	r2, [r7, #20]
    91f8:	693b      	ldr	r3, [r7, #16]
    91fa:	429a      	cmp	r2, r3
    91fc:	d307      	bcc.n	920e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    91fe:	687b      	ldr	r3, [r7, #4]
    9200:	88db      	ldrh	r3, [r3, #6]
    9202:	f107 0208 	add.w	r2, r7, #8
    9206:	69f9      	ldr	r1, [r7, #28]
    9208:	6a38      	ldr	r0, [r7, #32]
    920a:	4c16      	ldr	r4, [pc, #88]	; (9264 <_spi_m_sync_trans+0x110>)
    920c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    920e:	6a39      	ldr	r1, [r7, #32]
    9210:	69f8      	ldr	r0, [r7, #28]
    9212:	4b15      	ldr	r3, [pc, #84]	; (9268 <_spi_m_sync_trans+0x114>)
    9214:	4798      	blx	r3
    9216:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    9218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    921a:	2b00      	cmp	r3, #0
    921c:	db0c      	blt.n	9238 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    921e:	693a      	ldr	r2, [r7, #16]
    9220:	683b      	ldr	r3, [r7, #0]
    9222:	689b      	ldr	r3, [r3, #8]
    9224:	429a      	cmp	r2, r3
    9226:	d3d4      	bcc.n	91d2 <_spi_m_sync_trans+0x7e>
    9228:	697a      	ldr	r2, [r7, #20]
    922a:	683b      	ldr	r3, [r7, #0]
    922c:	689b      	ldr	r3, [r3, #8]
    922e:	429a      	cmp	r2, r3
    9230:	d3cf      	bcc.n	91d2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    9232:	693b      	ldr	r3, [r7, #16]
    9234:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    9236:	e000      	b.n	923a <_spi_m_sync_trans+0xe6>
			break;
    9238:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    923a:	6a38      	ldr	r0, [r7, #32]
    923c:	4b0b      	ldr	r3, [pc, #44]	; (926c <_spi_m_sync_trans+0x118>)
    923e:	4798      	blx	r3

	return rc;
    9240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    9242:	4618      	mov	r0, r3
    9244:	372c      	adds	r7, #44	; 0x2c
    9246:	46bd      	mov	sp, r7
    9248:	bd90      	pop	{r4, r7, pc}
    924a:	bf00      	nop
    924c:	00011c28 	.word	0x00011c28
    9250:	0000579d 	.word	0x0000579d
    9254:	00007c61 	.word	0x00007c61
    9258:	00007eb9 	.word	0x00007eb9
    925c:	00007d1d 	.word	0x00007d1d
    9260:	00009031 	.word	0x00009031
    9264:	0000909d 	.word	0x0000909d
    9268:	00009115 	.word	0x00009115
    926c:	00009001 	.word	0x00009001

00009270 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    9270:	b580      	push	{r7, lr}
    9272:	b084      	sub	sp, #16
    9274:	af00      	add	r7, sp, #0
    9276:	6078      	str	r0, [r7, #4]
    9278:	460b      	mov	r3, r1
    927a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    927c:	687b      	ldr	r3, [r7, #4]
    927e:	681b      	ldr	r3, [r3, #0]
    9280:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	2b00      	cmp	r3, #0
    9286:	d004      	beq.n	9292 <_spi_m_async_enable_tx+0x22>
    9288:	68fb      	ldr	r3, [r7, #12]
    928a:	2b00      	cmp	r3, #0
    928c:	d001      	beq.n	9292 <_spi_m_async_enable_tx+0x22>
    928e:	2301      	movs	r3, #1
    9290:	e000      	b.n	9294 <_spi_m_async_enable_tx+0x24>
    9292:	2300      	movs	r3, #0
    9294:	f003 0301 	and.w	r3, r3, #1
    9298:	b2db      	uxtb	r3, r3
    929a:	f640 3279 	movw	r2, #2937	; 0xb79
    929e:	4909      	ldr	r1, [pc, #36]	; (92c4 <_spi_m_async_enable_tx+0x54>)
    92a0:	4618      	mov	r0, r3
    92a2:	4b09      	ldr	r3, [pc, #36]	; (92c8 <_spi_m_async_enable_tx+0x58>)
    92a4:	4798      	blx	r3

	if (state) {
    92a6:	78fb      	ldrb	r3, [r7, #3]
    92a8:	2b00      	cmp	r3, #0
    92aa:	d003      	beq.n	92b4 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    92ac:	68f8      	ldr	r0, [r7, #12]
    92ae:	4b07      	ldr	r3, [pc, #28]	; (92cc <_spi_m_async_enable_tx+0x5c>)
    92b0:	4798      	blx	r3
    92b2:	e002      	b.n	92ba <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    92b4:	68f8      	ldr	r0, [r7, #12]
    92b6:	4b06      	ldr	r3, [pc, #24]	; (92d0 <_spi_m_async_enable_tx+0x60>)
    92b8:	4798      	blx	r3
	}

	return ERR_NONE;
    92ba:	2300      	movs	r3, #0
}
    92bc:	4618      	mov	r0, r3
    92be:	3710      	adds	r7, #16
    92c0:	46bd      	mov	sp, r7
    92c2:	bd80      	pop	{r7, pc}
    92c4:	00011c28 	.word	0x00011c28
    92c8:	0000579d 	.word	0x0000579d
    92cc:	00007d55 	.word	0x00007d55
    92d0:	00007d6f 	.word	0x00007d6f

000092d4 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    92d4:	b580      	push	{r7, lr}
    92d6:	b084      	sub	sp, #16
    92d8:	af00      	add	r7, sp, #0
    92da:	6078      	str	r0, [r7, #4]
    92dc:	460b      	mov	r3, r1
    92de:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    92e0:	687b      	ldr	r3, [r7, #4]
    92e2:	681b      	ldr	r3, [r3, #0]
    92e4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    92e6:	687b      	ldr	r3, [r7, #4]
    92e8:	2b00      	cmp	r3, #0
    92ea:	bf14      	ite	ne
    92ec:	2301      	movne	r3, #1
    92ee:	2300      	moveq	r3, #0
    92f0:	b2db      	uxtb	r3, r3
    92f2:	f640 328d 	movw	r2, #2957	; 0xb8d
    92f6:	490f      	ldr	r1, [pc, #60]	; (9334 <_spi_m_async_enable_rx+0x60>)
    92f8:	4618      	mov	r0, r3
    92fa:	4b0f      	ldr	r3, [pc, #60]	; (9338 <_spi_m_async_enable_rx+0x64>)
    92fc:	4798      	blx	r3
	ASSERT(hw);
    92fe:	68fb      	ldr	r3, [r7, #12]
    9300:	2b00      	cmp	r3, #0
    9302:	bf14      	ite	ne
    9304:	2301      	movne	r3, #1
    9306:	2300      	moveq	r3, #0
    9308:	b2db      	uxtb	r3, r3
    930a:	f640 328e 	movw	r2, #2958	; 0xb8e
    930e:	4909      	ldr	r1, [pc, #36]	; (9334 <_spi_m_async_enable_rx+0x60>)
    9310:	4618      	mov	r0, r3
    9312:	4b09      	ldr	r3, [pc, #36]	; (9338 <_spi_m_async_enable_rx+0x64>)
    9314:	4798      	blx	r3

	if (state) {
    9316:	78fb      	ldrb	r3, [r7, #3]
    9318:	2b00      	cmp	r3, #0
    931a:	d003      	beq.n	9324 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    931c:	68f8      	ldr	r0, [r7, #12]
    931e:	4b07      	ldr	r3, [pc, #28]	; (933c <_spi_m_async_enable_rx+0x68>)
    9320:	4798      	blx	r3
    9322:	e002      	b.n	932a <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    9324:	68f8      	ldr	r0, [r7, #12]
    9326:	4b06      	ldr	r3, [pc, #24]	; (9340 <_spi_m_async_enable_rx+0x6c>)
    9328:	4798      	blx	r3
	}

	return ERR_NONE;
    932a:	2300      	movs	r3, #0
}
    932c:	4618      	mov	r0, r3
    932e:	3710      	adds	r7, #16
    9330:	46bd      	mov	sp, r7
    9332:	bd80      	pop	{r7, pc}
    9334:	00011c28 	.word	0x00011c28
    9338:	0000579d 	.word	0x0000579d
    933c:	00007dbd 	.word	0x00007dbd
    9340:	00007dd7 	.word	0x00007dd7

00009344 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    9344:	b580      	push	{r7, lr}
    9346:	b082      	sub	sp, #8
    9348:	af00      	add	r7, sp, #0
    934a:	6078      	str	r0, [r7, #4]
    934c:	460b      	mov	r3, r1
    934e:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    9350:	687b      	ldr	r3, [r7, #4]
    9352:	2b00      	cmp	r3, #0
    9354:	d005      	beq.n	9362 <_spi_m_async_enable_tx_complete+0x1e>
    9356:	687b      	ldr	r3, [r7, #4]
    9358:	681b      	ldr	r3, [r3, #0]
    935a:	2b00      	cmp	r3, #0
    935c:	d001      	beq.n	9362 <_spi_m_async_enable_tx_complete+0x1e>
    935e:	2301      	movs	r3, #1
    9360:	e000      	b.n	9364 <_spi_m_async_enable_tx_complete+0x20>
    9362:	2300      	movs	r3, #0
    9364:	f003 0301 	and.w	r3, r3, #1
    9368:	b2db      	uxtb	r3, r3
    936a:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    936e:	490b      	ldr	r1, [pc, #44]	; (939c <_spi_m_async_enable_tx_complete+0x58>)
    9370:	4618      	mov	r0, r3
    9372:	4b0b      	ldr	r3, [pc, #44]	; (93a0 <_spi_m_async_enable_tx_complete+0x5c>)
    9374:	4798      	blx	r3

	if (state) {
    9376:	78fb      	ldrb	r3, [r7, #3]
    9378:	2b00      	cmp	r3, #0
    937a:	d005      	beq.n	9388 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    937c:	687b      	ldr	r3, [r7, #4]
    937e:	681b      	ldr	r3, [r3, #0]
    9380:	4618      	mov	r0, r3
    9382:	4b08      	ldr	r3, [pc, #32]	; (93a4 <_spi_m_async_enable_tx_complete+0x60>)
    9384:	4798      	blx	r3
    9386:	e004      	b.n	9392 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    9388:	687b      	ldr	r3, [r7, #4]
    938a:	681b      	ldr	r3, [r3, #0]
    938c:	4618      	mov	r0, r3
    938e:	4b06      	ldr	r3, [pc, #24]	; (93a8 <_spi_m_async_enable_tx_complete+0x64>)
    9390:	4798      	blx	r3
	}

	return ERR_NONE;
    9392:	2300      	movs	r3, #0
}
    9394:	4618      	mov	r0, r3
    9396:	3708      	adds	r7, #8
    9398:	46bd      	mov	sp, r7
    939a:	bd80      	pop	{r7, pc}
    939c:	00011c28 	.word	0x00011c28
    93a0:	0000579d 	.word	0x0000579d
    93a4:	00007d89 	.word	0x00007d89
    93a8:	00007da3 	.word	0x00007da3

000093ac <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    93ac:	b580      	push	{r7, lr}
    93ae:	b082      	sub	sp, #8
    93b0:	af00      	add	r7, sp, #0
    93b2:	6078      	str	r0, [r7, #4]
    93b4:	460b      	mov	r3, r1
    93b6:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    93b8:	687b      	ldr	r3, [r7, #4]
    93ba:	2b00      	cmp	r3, #0
    93bc:	d005      	beq.n	93ca <_spi_m_async_write_one+0x1e>
    93be:	687b      	ldr	r3, [r7, #4]
    93c0:	681b      	ldr	r3, [r3, #0]
    93c2:	2b00      	cmp	r3, #0
    93c4:	d001      	beq.n	93ca <_spi_m_async_write_one+0x1e>
    93c6:	2301      	movs	r3, #1
    93c8:	e000      	b.n	93cc <_spi_m_async_write_one+0x20>
    93ca:	2300      	movs	r3, #0
    93cc:	f003 0301 	and.w	r3, r3, #1
    93d0:	b2db      	uxtb	r3, r3
    93d2:	f640 32b2 	movw	r2, #2994	; 0xbb2
    93d6:	4908      	ldr	r1, [pc, #32]	; (93f8 <_spi_m_async_write_one+0x4c>)
    93d8:	4618      	mov	r0, r3
    93da:	4b08      	ldr	r3, [pc, #32]	; (93fc <_spi_m_async_write_one+0x50>)
    93dc:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	681b      	ldr	r3, [r3, #0]
    93e2:	887a      	ldrh	r2, [r7, #2]
    93e4:	4611      	mov	r1, r2
    93e6:	4618      	mov	r0, r3
    93e8:	4b05      	ldr	r3, [pc, #20]	; (9400 <_spi_m_async_write_one+0x54>)
    93ea:	4798      	blx	r3

	return ERR_NONE;
    93ec:	2300      	movs	r3, #0
}
    93ee:	4618      	mov	r0, r3
    93f0:	3708      	adds	r7, #8
    93f2:	46bd      	mov	sp, r7
    93f4:	bd80      	pop	{r7, pc}
    93f6:	bf00      	nop
    93f8:	00011c28 	.word	0x00011c28
    93fc:	0000579d 	.word	0x0000579d
    9400:	000081a5 	.word	0x000081a5

00009404 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    9404:	b580      	push	{r7, lr}
    9406:	b082      	sub	sp, #8
    9408:	af00      	add	r7, sp, #0
    940a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	2b00      	cmp	r3, #0
    9410:	d005      	beq.n	941e <_spi_m_async_read_one+0x1a>
    9412:	687b      	ldr	r3, [r7, #4]
    9414:	681b      	ldr	r3, [r3, #0]
    9416:	2b00      	cmp	r3, #0
    9418:	d001      	beq.n	941e <_spi_m_async_read_one+0x1a>
    941a:	2301      	movs	r3, #1
    941c:	e000      	b.n	9420 <_spi_m_async_read_one+0x1c>
    941e:	2300      	movs	r3, #0
    9420:	f003 0301 	and.w	r3, r3, #1
    9424:	b2db      	uxtb	r3, r3
    9426:	f640 32cd 	movw	r2, #3021	; 0xbcd
    942a:	4907      	ldr	r1, [pc, #28]	; (9448 <_spi_m_async_read_one+0x44>)
    942c:	4618      	mov	r0, r3
    942e:	4b07      	ldr	r3, [pc, #28]	; (944c <_spi_m_async_read_one+0x48>)
    9430:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	681b      	ldr	r3, [r3, #0]
    9436:	4618      	mov	r0, r3
    9438:	4b05      	ldr	r3, [pc, #20]	; (9450 <_spi_m_async_read_one+0x4c>)
    943a:	4798      	blx	r3
    943c:	4603      	mov	r3, r0
    943e:	b29b      	uxth	r3, r3
}
    9440:	4618      	mov	r0, r3
    9442:	3708      	adds	r7, #8
    9444:	46bd      	mov	sp, r7
    9446:	bd80      	pop	{r7, pc}
    9448:	00011c28 	.word	0x00011c28
    944c:	0000579d 	.word	0x0000579d
    9450:	000081c1 	.word	0x000081c1

00009454 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    9454:	b580      	push	{r7, lr}
    9456:	b086      	sub	sp, #24
    9458:	af00      	add	r7, sp, #0
    945a:	60f8      	str	r0, [r7, #12]
    945c:	460b      	mov	r3, r1
    945e:	607a      	str	r2, [r7, #4]
    9460:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    9462:	68fb      	ldr	r3, [r7, #12]
    9464:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    9466:	68fb      	ldr	r3, [r7, #12]
    9468:	2b00      	cmp	r3, #0
    946a:	d004      	beq.n	9476 <_spi_m_async_register_callback+0x22>
    946c:	7afb      	ldrb	r3, [r7, #11]
    946e:	2b03      	cmp	r3, #3
    9470:	d801      	bhi.n	9476 <_spi_m_async_register_callback+0x22>
    9472:	2301      	movs	r3, #1
    9474:	e000      	b.n	9478 <_spi_m_async_register_callback+0x24>
    9476:	2300      	movs	r3, #0
    9478:	f003 0301 	and.w	r3, r3, #1
    947c:	b2db      	uxtb	r3, r3
    947e:	f640 32e6 	movw	r2, #3046	; 0xbe6
    9482:	4909      	ldr	r1, [pc, #36]	; (94a8 <_spi_m_async_register_callback+0x54>)
    9484:	4618      	mov	r0, r3
    9486:	4b09      	ldr	r3, [pc, #36]	; (94ac <_spi_m_async_register_callback+0x58>)
    9488:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    948a:	697b      	ldr	r3, [r7, #20]
    948c:	3308      	adds	r3, #8
    948e:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    9490:	7afb      	ldrb	r3, [r7, #11]
    9492:	009b      	lsls	r3, r3, #2
    9494:	693a      	ldr	r2, [r7, #16]
    9496:	4413      	add	r3, r2
    9498:	687a      	ldr	r2, [r7, #4]
    949a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    949c:	2300      	movs	r3, #0
}
    949e:	4618      	mov	r0, r3
    94a0:	3718      	adds	r7, #24
    94a2:	46bd      	mov	sp, r7
    94a4:	bd80      	pop	{r7, pc}
    94a6:	bf00      	nop
    94a8:	00011c28 	.word	0x00011c28
    94ac:	0000579d 	.word	0x0000579d

000094b0 <__NVIC_EnableIRQ>:
{
    94b0:	b480      	push	{r7}
    94b2:	b083      	sub	sp, #12
    94b4:	af00      	add	r7, sp, #0
    94b6:	4603      	mov	r3, r0
    94b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    94ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94be:	2b00      	cmp	r3, #0
    94c0:	db0b      	blt.n	94da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94c2:	4909      	ldr	r1, [pc, #36]	; (94e8 <__NVIC_EnableIRQ+0x38>)
    94c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94c8:	095b      	lsrs	r3, r3, #5
    94ca:	88fa      	ldrh	r2, [r7, #6]
    94cc:	f002 021f 	and.w	r2, r2, #31
    94d0:	2001      	movs	r0, #1
    94d2:	fa00 f202 	lsl.w	r2, r0, r2
    94d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94da:	bf00      	nop
    94dc:	370c      	adds	r7, #12
    94de:	46bd      	mov	sp, r7
    94e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    94e4:	4770      	bx	lr
    94e6:	bf00      	nop
    94e8:	e000e100 	.word	0xe000e100

000094ec <__NVIC_DisableIRQ>:
{
    94ec:	b480      	push	{r7}
    94ee:	b083      	sub	sp, #12
    94f0:	af00      	add	r7, sp, #0
    94f2:	4603      	mov	r3, r0
    94f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    94f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94fa:	2b00      	cmp	r3, #0
    94fc:	db10      	blt.n	9520 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94fe:	490b      	ldr	r1, [pc, #44]	; (952c <__NVIC_DisableIRQ+0x40>)
    9500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9504:	095b      	lsrs	r3, r3, #5
    9506:	88fa      	ldrh	r2, [r7, #6]
    9508:	f002 021f 	and.w	r2, r2, #31
    950c:	2001      	movs	r0, #1
    950e:	fa00 f202 	lsl.w	r2, r0, r2
    9512:	3320      	adds	r3, #32
    9514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9518:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    951c:	f3bf 8f6f 	isb	sy
}
    9520:	bf00      	nop
    9522:	370c      	adds	r7, #12
    9524:	46bd      	mov	sp, r7
    9526:	f85d 7b04 	ldr.w	r7, [sp], #4
    952a:	4770      	bx	lr
    952c:	e000e100 	.word	0xe000e100

00009530 <__NVIC_ClearPendingIRQ>:
{
    9530:	b480      	push	{r7}
    9532:	b083      	sub	sp, #12
    9534:	af00      	add	r7, sp, #0
    9536:	4603      	mov	r3, r0
    9538:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    953a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    953e:	2b00      	cmp	r3, #0
    9540:	db0c      	blt.n	955c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9542:	4909      	ldr	r1, [pc, #36]	; (9568 <__NVIC_ClearPendingIRQ+0x38>)
    9544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9548:	095b      	lsrs	r3, r3, #5
    954a:	88fa      	ldrh	r2, [r7, #6]
    954c:	f002 021f 	and.w	r2, r2, #31
    9550:	2001      	movs	r0, #1
    9552:	fa00 f202 	lsl.w	r2, r0, r2
    9556:	3360      	adds	r3, #96	; 0x60
    9558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    955c:	bf00      	nop
    955e:	370c      	adds	r7, #12
    9560:	46bd      	mov	sp, r7
    9562:	f85d 7b04 	ldr.w	r7, [sp], #4
    9566:	4770      	bx	lr
    9568:	e000e100 	.word	0xe000e100

0000956c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    956c:	b480      	push	{r7}
    956e:	b083      	sub	sp, #12
    9570:	af00      	add	r7, sp, #0
    9572:	6078      	str	r0, [r7, #4]
    9574:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9576:	bf00      	nop
    9578:	687b      	ldr	r3, [r7, #4]
    957a:	691a      	ldr	r2, [r3, #16]
    957c:	683b      	ldr	r3, [r7, #0]
    957e:	4013      	ands	r3, r2
    9580:	2b00      	cmp	r3, #0
    9582:	d1f9      	bne.n	9578 <hri_tc_wait_for_sync+0xc>
	};
}
    9584:	bf00      	nop
    9586:	370c      	adds	r7, #12
    9588:	46bd      	mov	sp, r7
    958a:	f85d 7b04 	ldr.w	r7, [sp], #4
    958e:	4770      	bx	lr

00009590 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9590:	b480      	push	{r7}
    9592:	b083      	sub	sp, #12
    9594:	af00      	add	r7, sp, #0
    9596:	6078      	str	r0, [r7, #4]
    9598:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    959a:	687b      	ldr	r3, [r7, #4]
    959c:	691a      	ldr	r2, [r3, #16]
    959e:	683b      	ldr	r3, [r7, #0]
    95a0:	4013      	ands	r3, r2
    95a2:	2b00      	cmp	r3, #0
    95a4:	bf14      	ite	ne
    95a6:	2301      	movne	r3, #1
    95a8:	2300      	moveq	r3, #0
    95aa:	b2db      	uxtb	r3, r3
}
    95ac:	4618      	mov	r0, r3
    95ae:	370c      	adds	r7, #12
    95b0:	46bd      	mov	sp, r7
    95b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95b6:	4770      	bx	lr

000095b8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    95b8:	b480      	push	{r7}
    95ba:	b083      	sub	sp, #12
    95bc:	af00      	add	r7, sp, #0
    95be:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    95c0:	687b      	ldr	r3, [r7, #4]
    95c2:	7a9b      	ldrb	r3, [r3, #10]
    95c4:	b2db      	uxtb	r3, r3
    95c6:	f003 0301 	and.w	r3, r3, #1
    95ca:	2b00      	cmp	r3, #0
    95cc:	bf14      	ite	ne
    95ce:	2301      	movne	r3, #1
    95d0:	2300      	moveq	r3, #0
    95d2:	b2db      	uxtb	r3, r3
}
    95d4:	4618      	mov	r0, r3
    95d6:	370c      	adds	r7, #12
    95d8:	46bd      	mov	sp, r7
    95da:	f85d 7b04 	ldr.w	r7, [sp], #4
    95de:	4770      	bx	lr

000095e0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    95e0:	b480      	push	{r7}
    95e2:	b083      	sub	sp, #12
    95e4:	af00      	add	r7, sp, #0
    95e6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    95e8:	687b      	ldr	r3, [r7, #4]
    95ea:	2201      	movs	r2, #1
    95ec:	729a      	strb	r2, [r3, #10]
}
    95ee:	bf00      	nop
    95f0:	370c      	adds	r7, #12
    95f2:	46bd      	mov	sp, r7
    95f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    95f8:	4770      	bx	lr

000095fa <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    95fa:	b480      	push	{r7}
    95fc:	b083      	sub	sp, #12
    95fe:	af00      	add	r7, sp, #0
    9600:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    9602:	687b      	ldr	r3, [r7, #4]
    9604:	2202      	movs	r2, #2
    9606:	729a      	strb	r2, [r3, #10]
}
    9608:	bf00      	nop
    960a:	370c      	adds	r7, #12
    960c:	46bd      	mov	sp, r7
    960e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9612:	4770      	bx	lr

00009614 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    9614:	b480      	push	{r7}
    9616:	b083      	sub	sp, #12
    9618:	af00      	add	r7, sp, #0
    961a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    961c:	687b      	ldr	r3, [r7, #4]
    961e:	2201      	movs	r2, #1
    9620:	725a      	strb	r2, [r3, #9]
}
    9622:	bf00      	nop
    9624:	370c      	adds	r7, #12
    9626:	46bd      	mov	sp, r7
    9628:	f85d 7b04 	ldr.w	r7, [sp], #4
    962c:	4770      	bx	lr

0000962e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    962e:	b480      	push	{r7}
    9630:	b083      	sub	sp, #12
    9632:	af00      	add	r7, sp, #0
    9634:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    9636:	687b      	ldr	r3, [r7, #4]
    9638:	7a5b      	ldrb	r3, [r3, #9]
    963a:	b2db      	uxtb	r3, r3
    963c:	085b      	lsrs	r3, r3, #1
    963e:	f003 0301 	and.w	r3, r3, #1
    9642:	2b00      	cmp	r3, #0
    9644:	bf14      	ite	ne
    9646:	2301      	movne	r3, #1
    9648:	2300      	moveq	r3, #0
    964a:	b2db      	uxtb	r3, r3
}
    964c:	4618      	mov	r0, r3
    964e:	370c      	adds	r7, #12
    9650:	46bd      	mov	sp, r7
    9652:	f85d 7b04 	ldr.w	r7, [sp], #4
    9656:	4770      	bx	lr

00009658 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9658:	b580      	push	{r7, lr}
    965a:	b082      	sub	sp, #8
    965c:	af00      	add	r7, sp, #0
    965e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    9660:	687b      	ldr	r3, [r7, #4]
    9662:	681b      	ldr	r3, [r3, #0]
    9664:	f043 0202 	orr.w	r2, r3, #2
    9668:	687b      	ldr	r3, [r7, #4]
    966a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    966c:	2103      	movs	r1, #3
    966e:	6878      	ldr	r0, [r7, #4]
    9670:	4b02      	ldr	r3, [pc, #8]	; (967c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    9672:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9674:	bf00      	nop
    9676:	3708      	adds	r7, #8
    9678:	46bd      	mov	sp, r7
    967a:	bd80      	pop	{r7, pc}
    967c:	0000956d 	.word	0x0000956d

00009680 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9680:	b580      	push	{r7, lr}
    9682:	b084      	sub	sp, #16
    9684:	af00      	add	r7, sp, #0
    9686:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9688:	2103      	movs	r1, #3
    968a:	6878      	ldr	r0, [r7, #4]
    968c:	4b09      	ldr	r3, [pc, #36]	; (96b4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    968e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	681b      	ldr	r3, [r3, #0]
    9694:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    9696:	68fb      	ldr	r3, [r7, #12]
    9698:	085b      	lsrs	r3, r3, #1
    969a:	f003 0301 	and.w	r3, r3, #1
    969e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    96a0:	68fb      	ldr	r3, [r7, #12]
    96a2:	2b00      	cmp	r3, #0
    96a4:	bf14      	ite	ne
    96a6:	2301      	movne	r3, #1
    96a8:	2300      	moveq	r3, #0
    96aa:	b2db      	uxtb	r3, r3
}
    96ac:	4618      	mov	r0, r3
    96ae:	3710      	adds	r7, #16
    96b0:	46bd      	mov	sp, r7
    96b2:	bd80      	pop	{r7, pc}
    96b4:	0000956d 	.word	0x0000956d

000096b8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    96b8:	b580      	push	{r7, lr}
    96ba:	b082      	sub	sp, #8
    96bc:	af00      	add	r7, sp, #0
    96be:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    96c0:	687b      	ldr	r3, [r7, #4]
    96c2:	681b      	ldr	r3, [r3, #0]
    96c4:	f023 0202 	bic.w	r2, r3, #2
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    96cc:	2103      	movs	r1, #3
    96ce:	6878      	ldr	r0, [r7, #4]
    96d0:	4b02      	ldr	r3, [pc, #8]	; (96dc <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    96d2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    96d4:	bf00      	nop
    96d6:	3708      	adds	r7, #8
    96d8:	46bd      	mov	sp, r7
    96da:	bd80      	pop	{r7, pc}
    96dc:	0000956d 	.word	0x0000956d

000096e0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    96e0:	b580      	push	{r7, lr}
    96e2:	b084      	sub	sp, #16
    96e4:	af00      	add	r7, sp, #0
    96e6:	6078      	str	r0, [r7, #4]
    96e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    96ea:	2103      	movs	r1, #3
    96ec:	6878      	ldr	r0, [r7, #4]
    96ee:	4b07      	ldr	r3, [pc, #28]	; (970c <hri_tc_get_CTRLA_reg+0x2c>)
    96f0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    96f2:	687b      	ldr	r3, [r7, #4]
    96f4:	681b      	ldr	r3, [r3, #0]
    96f6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    96f8:	68fa      	ldr	r2, [r7, #12]
    96fa:	683b      	ldr	r3, [r7, #0]
    96fc:	4013      	ands	r3, r2
    96fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    9700:	68fb      	ldr	r3, [r7, #12]
}
    9702:	4618      	mov	r0, r3
    9704:	3710      	adds	r7, #16
    9706:	46bd      	mov	sp, r7
    9708:	bd80      	pop	{r7, pc}
    970a:	bf00      	nop
    970c:	0000956d 	.word	0x0000956d

00009710 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    9710:	b580      	push	{r7, lr}
    9712:	b082      	sub	sp, #8
    9714:	af00      	add	r7, sp, #0
    9716:	6078      	str	r0, [r7, #4]
    9718:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    971a:	687b      	ldr	r3, [r7, #4]
    971c:	683a      	ldr	r2, [r7, #0]
    971e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9720:	2103      	movs	r1, #3
    9722:	6878      	ldr	r0, [r7, #4]
    9724:	4b02      	ldr	r3, [pc, #8]	; (9730 <hri_tc_write_CTRLA_reg+0x20>)
    9726:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9728:	bf00      	nop
    972a:	3708      	adds	r7, #8
    972c:	46bd      	mov	sp, r7
    972e:	bd80      	pop	{r7, pc}
    9730:	0000956d 	.word	0x0000956d

00009734 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    9734:	b480      	push	{r7}
    9736:	b083      	sub	sp, #12
    9738:	af00      	add	r7, sp, #0
    973a:	6078      	str	r0, [r7, #4]
    973c:	460b      	mov	r3, r1
    973e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    9740:	687b      	ldr	r3, [r7, #4]
    9742:	887a      	ldrh	r2, [r7, #2]
    9744:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    9746:	bf00      	nop
    9748:	370c      	adds	r7, #12
    974a:	46bd      	mov	sp, r7
    974c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9750:	4770      	bx	lr

00009752 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    9752:	b480      	push	{r7}
    9754:	b083      	sub	sp, #12
    9756:	af00      	add	r7, sp, #0
    9758:	6078      	str	r0, [r7, #4]
    975a:	460b      	mov	r3, r1
    975c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    975e:	687b      	ldr	r3, [r7, #4]
    9760:	78fa      	ldrb	r2, [r7, #3]
    9762:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    9764:	bf00      	nop
    9766:	370c      	adds	r7, #12
    9768:	46bd      	mov	sp, r7
    976a:	f85d 7b04 	ldr.w	r7, [sp], #4
    976e:	4770      	bx	lr

00009770 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    9770:	b480      	push	{r7}
    9772:	b083      	sub	sp, #12
    9774:	af00      	add	r7, sp, #0
    9776:	6078      	str	r0, [r7, #4]
    9778:	460b      	mov	r3, r1
    977a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    977c:	687b      	ldr	r3, [r7, #4]
    977e:	78fa      	ldrb	r2, [r7, #3]
    9780:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    9782:	bf00      	nop
    9784:	370c      	adds	r7, #12
    9786:	46bd      	mov	sp, r7
    9788:	f85d 7b04 	ldr.w	r7, [sp], #4
    978c:	4770      	bx	lr
	...

00009790 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    9790:	b580      	push	{r7, lr}
    9792:	b082      	sub	sp, #8
    9794:	af00      	add	r7, sp, #0
    9796:	6078      	str	r0, [r7, #4]
    9798:	460b      	mov	r3, r1
    979a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    979c:	687b      	ldr	r3, [r7, #4]
    979e:	78fa      	ldrb	r2, [r7, #3]
    97a0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    97a2:	2120      	movs	r1, #32
    97a4:	6878      	ldr	r0, [r7, #4]
    97a6:	4b03      	ldr	r3, [pc, #12]	; (97b4 <hri_tccount8_write_PER_reg+0x24>)
    97a8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    97aa:	bf00      	nop
    97ac:	3708      	adds	r7, #8
    97ae:	46bd      	mov	sp, r7
    97b0:	bd80      	pop	{r7, pc}
    97b2:	bf00      	nop
    97b4:	0000956d 	.word	0x0000956d

000097b8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b082      	sub	sp, #8
    97bc:	af00      	add	r7, sp, #0
    97be:	6078      	str	r0, [r7, #4]
    97c0:	460b      	mov	r3, r1
    97c2:	70fb      	strb	r3, [r7, #3]
    97c4:	4613      	mov	r3, r2
    97c6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    97c8:	78fb      	ldrb	r3, [r7, #3]
    97ca:	687a      	ldr	r2, [r7, #4]
    97cc:	4413      	add	r3, r2
    97ce:	78ba      	ldrb	r2, [r7, #2]
    97d0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    97d2:	21c0      	movs	r1, #192	; 0xc0
    97d4:	6878      	ldr	r0, [r7, #4]
    97d6:	4b03      	ldr	r3, [pc, #12]	; (97e4 <hri_tccount8_write_CC_reg+0x2c>)
    97d8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    97da:	bf00      	nop
    97dc:	3708      	adds	r7, #8
    97de:	46bd      	mov	sp, r7
    97e0:	bd80      	pop	{r7, pc}
    97e2:	bf00      	nop
    97e4:	0000956d 	.word	0x0000956d

000097e8 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    97e8:	b580      	push	{r7, lr}
    97ea:	b082      	sub	sp, #8
    97ec:	af00      	add	r7, sp, #0
    97ee:	6078      	str	r0, [r7, #4]
    97f0:	460b      	mov	r3, r1
    97f2:	70fb      	strb	r3, [r7, #3]
    97f4:	4613      	mov	r3, r2
    97f6:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    97f8:	78fb      	ldrb	r3, [r7, #3]
    97fa:	687a      	ldr	r2, [r7, #4]
    97fc:	330c      	adds	r3, #12
    97fe:	005b      	lsls	r3, r3, #1
    9800:	4413      	add	r3, r2
    9802:	883a      	ldrh	r2, [r7, #0]
    9804:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9806:	21c0      	movs	r1, #192	; 0xc0
    9808:	6878      	ldr	r0, [r7, #4]
    980a:	4b03      	ldr	r3, [pc, #12]	; (9818 <hri_tccount16_write_CC_reg+0x30>)
    980c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    980e:	bf00      	nop
    9810:	3708      	adds	r7, #8
    9812:	46bd      	mov	sp, r7
    9814:	bd80      	pop	{r7, pc}
    9816:	bf00      	nop
    9818:	0000956d 	.word	0x0000956d

0000981c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    981c:	b580      	push	{r7, lr}
    981e:	b084      	sub	sp, #16
    9820:	af00      	add	r7, sp, #0
    9822:	60f8      	str	r0, [r7, #12]
    9824:	460b      	mov	r3, r1
    9826:	607a      	str	r2, [r7, #4]
    9828:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    982a:	7afb      	ldrb	r3, [r7, #11]
    982c:	68fa      	ldr	r2, [r7, #12]
    982e:	3306      	adds	r3, #6
    9830:	009b      	lsls	r3, r3, #2
    9832:	4413      	add	r3, r2
    9834:	687a      	ldr	r2, [r7, #4]
    9836:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9838:	21c0      	movs	r1, #192	; 0xc0
    983a:	68f8      	ldr	r0, [r7, #12]
    983c:	4b02      	ldr	r3, [pc, #8]	; (9848 <hri_tccount32_write_CC_reg+0x2c>)
    983e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9840:	bf00      	nop
    9842:	3710      	adds	r7, #16
    9844:	46bd      	mov	sp, r7
    9846:	bd80      	pop	{r7, pc}
    9848:	0000956d 	.word	0x0000956d

0000984c <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    984c:	b580      	push	{r7, lr}
    984e:	b084      	sub	sp, #16
    9850:	af00      	add	r7, sp, #0
    9852:	6078      	str	r0, [r7, #4]
    9854:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    9856:	6838      	ldr	r0, [r7, #0]
    9858:	4b93      	ldr	r3, [pc, #588]	; (9aa8 <_timer_init+0x25c>)
    985a:	4798      	blx	r3
    985c:	4603      	mov	r3, r0
    985e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    9860:	687b      	ldr	r3, [r7, #4]
    9862:	683a      	ldr	r2, [r7, #0]
    9864:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    9866:	2295      	movs	r2, #149	; 0x95
    9868:	4990      	ldr	r1, [pc, #576]	; (9aac <_timer_init+0x260>)
    986a:	2001      	movs	r0, #1
    986c:	4b90      	ldr	r3, [pc, #576]	; (9ab0 <_timer_init+0x264>)
    986e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9870:	2101      	movs	r1, #1
    9872:	6838      	ldr	r0, [r7, #0]
    9874:	4b8f      	ldr	r3, [pc, #572]	; (9ab4 <_timer_init+0x268>)
    9876:	4798      	blx	r3
    9878:	4603      	mov	r3, r0
    987a:	f083 0301 	eor.w	r3, r3, #1
    987e:	b2db      	uxtb	r3, r3
    9880:	2b00      	cmp	r3, #0
    9882:	d011      	beq.n	98a8 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9884:	2102      	movs	r1, #2
    9886:	6838      	ldr	r0, [r7, #0]
    9888:	4b8b      	ldr	r3, [pc, #556]	; (9ab8 <_timer_init+0x26c>)
    988a:	4798      	blx	r3
    988c:	4603      	mov	r3, r0
    988e:	2b00      	cmp	r3, #0
    9890:	d006      	beq.n	98a0 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9892:	6838      	ldr	r0, [r7, #0]
    9894:	4b89      	ldr	r3, [pc, #548]	; (9abc <_timer_init+0x270>)
    9896:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9898:	2102      	movs	r1, #2
    989a:	6838      	ldr	r0, [r7, #0]
    989c:	4b88      	ldr	r3, [pc, #544]	; (9ac0 <_timer_init+0x274>)
    989e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    98a0:	2101      	movs	r1, #1
    98a2:	6838      	ldr	r0, [r7, #0]
    98a4:	4b87      	ldr	r3, [pc, #540]	; (9ac4 <_timer_init+0x278>)
    98a6:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    98a8:	2101      	movs	r1, #1
    98aa:	6838      	ldr	r0, [r7, #0]
    98ac:	4b84      	ldr	r3, [pc, #528]	; (9ac0 <_timer_init+0x274>)
    98ae:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    98b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98b4:	4984      	ldr	r1, [pc, #528]	; (9ac8 <_timer_init+0x27c>)
    98b6:	4613      	mov	r3, r2
    98b8:	009b      	lsls	r3, r3, #2
    98ba:	4413      	add	r3, r2
    98bc:	009b      	lsls	r3, r3, #2
    98be:	440b      	add	r3, r1
    98c0:	3304      	adds	r3, #4
    98c2:	681b      	ldr	r3, [r3, #0]
    98c4:	4619      	mov	r1, r3
    98c6:	6838      	ldr	r0, [r7, #0]
    98c8:	4b7e      	ldr	r3, [pc, #504]	; (9ac4 <_timer_init+0x278>)
    98ca:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    98cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98d0:	497d      	ldr	r1, [pc, #500]	; (9ac8 <_timer_init+0x27c>)
    98d2:	4613      	mov	r3, r2
    98d4:	009b      	lsls	r3, r3, #2
    98d6:	4413      	add	r3, r2
    98d8:	009b      	lsls	r3, r3, #2
    98da:	440b      	add	r3, r1
    98dc:	330a      	adds	r3, #10
    98de:	781b      	ldrb	r3, [r3, #0]
    98e0:	4619      	mov	r1, r3
    98e2:	6838      	ldr	r0, [r7, #0]
    98e4:	4b79      	ldr	r3, [pc, #484]	; (9acc <_timer_init+0x280>)
    98e6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    98e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98ec:	4976      	ldr	r1, [pc, #472]	; (9ac8 <_timer_init+0x27c>)
    98ee:	4613      	mov	r3, r2
    98f0:	009b      	lsls	r3, r3, #2
    98f2:	4413      	add	r3, r2
    98f4:	009b      	lsls	r3, r3, #2
    98f6:	440b      	add	r3, r1
    98f8:	3308      	adds	r3, #8
    98fa:	881b      	ldrh	r3, [r3, #0]
    98fc:	4619      	mov	r1, r3
    98fe:	6838      	ldr	r0, [r7, #0]
    9900:	4b73      	ldr	r3, [pc, #460]	; (9ad0 <_timer_init+0x284>)
    9902:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    9904:	2101      	movs	r1, #1
    9906:	6838      	ldr	r0, [r7, #0]
    9908:	4b72      	ldr	r3, [pc, #456]	; (9ad4 <_timer_init+0x288>)
    990a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    990c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9910:	496d      	ldr	r1, [pc, #436]	; (9ac8 <_timer_init+0x27c>)
    9912:	4613      	mov	r3, r2
    9914:	009b      	lsls	r3, r3, #2
    9916:	4413      	add	r3, r2
    9918:	009b      	lsls	r3, r3, #2
    991a:	440b      	add	r3, r1
    991c:	3304      	adds	r3, #4
    991e:	681b      	ldr	r3, [r3, #0]
    9920:	f003 030c 	and.w	r3, r3, #12
    9924:	2b08      	cmp	r3, #8
    9926:	d11e      	bne.n	9966 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9928:	f997 200f 	ldrsb.w	r2, [r7, #15]
    992c:	4966      	ldr	r1, [pc, #408]	; (9ac8 <_timer_init+0x27c>)
    992e:	4613      	mov	r3, r2
    9930:	009b      	lsls	r3, r3, #2
    9932:	4413      	add	r3, r2
    9934:	009b      	lsls	r3, r3, #2
    9936:	440b      	add	r3, r1
    9938:	330c      	adds	r3, #12
    993a:	681b      	ldr	r3, [r3, #0]
    993c:	461a      	mov	r2, r3
    993e:	2100      	movs	r1, #0
    9940:	6838      	ldr	r0, [r7, #0]
    9942:	4b65      	ldr	r3, [pc, #404]	; (9ad8 <_timer_init+0x28c>)
    9944:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9946:	f997 200f 	ldrsb.w	r2, [r7, #15]
    994a:	495f      	ldr	r1, [pc, #380]	; (9ac8 <_timer_init+0x27c>)
    994c:	4613      	mov	r3, r2
    994e:	009b      	lsls	r3, r3, #2
    9950:	4413      	add	r3, r2
    9952:	009b      	lsls	r3, r3, #2
    9954:	440b      	add	r3, r1
    9956:	3310      	adds	r3, #16
    9958:	681b      	ldr	r3, [r3, #0]
    995a:	461a      	mov	r2, r3
    995c:	2101      	movs	r1, #1
    995e:	6838      	ldr	r0, [r7, #0]
    9960:	4b5d      	ldr	r3, [pc, #372]	; (9ad8 <_timer_init+0x28c>)
    9962:	4798      	blx	r3
    9964:	e06a      	b.n	9a3c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9966:	f997 200f 	ldrsb.w	r2, [r7, #15]
    996a:	4957      	ldr	r1, [pc, #348]	; (9ac8 <_timer_init+0x27c>)
    996c:	4613      	mov	r3, r2
    996e:	009b      	lsls	r3, r3, #2
    9970:	4413      	add	r3, r2
    9972:	009b      	lsls	r3, r3, #2
    9974:	440b      	add	r3, r1
    9976:	3304      	adds	r3, #4
    9978:	681b      	ldr	r3, [r3, #0]
    997a:	f003 030c 	and.w	r3, r3, #12
    997e:	2b00      	cmp	r3, #0
    9980:	d120      	bne.n	99c4 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9982:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9986:	4950      	ldr	r1, [pc, #320]	; (9ac8 <_timer_init+0x27c>)
    9988:	4613      	mov	r3, r2
    998a:	009b      	lsls	r3, r3, #2
    998c:	4413      	add	r3, r2
    998e:	009b      	lsls	r3, r3, #2
    9990:	440b      	add	r3, r1
    9992:	330c      	adds	r3, #12
    9994:	681b      	ldr	r3, [r3, #0]
    9996:	b29b      	uxth	r3, r3
    9998:	461a      	mov	r2, r3
    999a:	2100      	movs	r1, #0
    999c:	6838      	ldr	r0, [r7, #0]
    999e:	4b4f      	ldr	r3, [pc, #316]	; (9adc <_timer_init+0x290>)
    99a0:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    99a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99a6:	4948      	ldr	r1, [pc, #288]	; (9ac8 <_timer_init+0x27c>)
    99a8:	4613      	mov	r3, r2
    99aa:	009b      	lsls	r3, r3, #2
    99ac:	4413      	add	r3, r2
    99ae:	009b      	lsls	r3, r3, #2
    99b0:	440b      	add	r3, r1
    99b2:	3310      	adds	r3, #16
    99b4:	681b      	ldr	r3, [r3, #0]
    99b6:	b29b      	uxth	r3, r3
    99b8:	461a      	mov	r2, r3
    99ba:	2101      	movs	r1, #1
    99bc:	6838      	ldr	r0, [r7, #0]
    99be:	4b47      	ldr	r3, [pc, #284]	; (9adc <_timer_init+0x290>)
    99c0:	4798      	blx	r3
    99c2:	e03b      	b.n	9a3c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    99c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99c8:	493f      	ldr	r1, [pc, #252]	; (9ac8 <_timer_init+0x27c>)
    99ca:	4613      	mov	r3, r2
    99cc:	009b      	lsls	r3, r3, #2
    99ce:	4413      	add	r3, r2
    99d0:	009b      	lsls	r3, r3, #2
    99d2:	440b      	add	r3, r1
    99d4:	3304      	adds	r3, #4
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	f003 030c 	and.w	r3, r3, #12
    99dc:	2b04      	cmp	r3, #4
    99de:	d12d      	bne.n	9a3c <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    99e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99e4:	4938      	ldr	r1, [pc, #224]	; (9ac8 <_timer_init+0x27c>)
    99e6:	4613      	mov	r3, r2
    99e8:	009b      	lsls	r3, r3, #2
    99ea:	4413      	add	r3, r2
    99ec:	009b      	lsls	r3, r3, #2
    99ee:	440b      	add	r3, r1
    99f0:	330c      	adds	r3, #12
    99f2:	681b      	ldr	r3, [r3, #0]
    99f4:	b2db      	uxtb	r3, r3
    99f6:	461a      	mov	r2, r3
    99f8:	2100      	movs	r1, #0
    99fa:	6838      	ldr	r0, [r7, #0]
    99fc:	4b38      	ldr	r3, [pc, #224]	; (9ae0 <_timer_init+0x294>)
    99fe:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    9a00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a04:	4930      	ldr	r1, [pc, #192]	; (9ac8 <_timer_init+0x27c>)
    9a06:	4613      	mov	r3, r2
    9a08:	009b      	lsls	r3, r3, #2
    9a0a:	4413      	add	r3, r2
    9a0c:	009b      	lsls	r3, r3, #2
    9a0e:	440b      	add	r3, r1
    9a10:	3310      	adds	r3, #16
    9a12:	681b      	ldr	r3, [r3, #0]
    9a14:	b2db      	uxtb	r3, r3
    9a16:	461a      	mov	r2, r3
    9a18:	2101      	movs	r1, #1
    9a1a:	6838      	ldr	r0, [r7, #0]
    9a1c:	4b30      	ldr	r3, [pc, #192]	; (9ae0 <_timer_init+0x294>)
    9a1e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    9a20:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a24:	4928      	ldr	r1, [pc, #160]	; (9ac8 <_timer_init+0x27c>)
    9a26:	4613      	mov	r3, r2
    9a28:	009b      	lsls	r3, r3, #2
    9a2a:	4413      	add	r3, r2
    9a2c:	009b      	lsls	r3, r3, #2
    9a2e:	440b      	add	r3, r1
    9a30:	330b      	adds	r3, #11
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	4619      	mov	r1, r3
    9a36:	6838      	ldr	r0, [r7, #0]
    9a38:	4b2a      	ldr	r3, [pc, #168]	; (9ae4 <_timer_init+0x298>)
    9a3a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    9a3c:	6838      	ldr	r0, [r7, #0]
    9a3e:	4b2a      	ldr	r3, [pc, #168]	; (9ae8 <_timer_init+0x29c>)
    9a40:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    9a42:	6879      	ldr	r1, [r7, #4]
    9a44:	6838      	ldr	r0, [r7, #0]
    9a46:	4b29      	ldr	r3, [pc, #164]	; (9aec <_timer_init+0x2a0>)
    9a48:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9a4a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a4e:	491e      	ldr	r1, [pc, #120]	; (9ac8 <_timer_init+0x27c>)
    9a50:	4613      	mov	r3, r2
    9a52:	009b      	lsls	r3, r3, #2
    9a54:	4413      	add	r3, r2
    9a56:	009b      	lsls	r3, r3, #2
    9a58:	440b      	add	r3, r1
    9a5a:	3302      	adds	r3, #2
    9a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a60:	4618      	mov	r0, r3
    9a62:	4b23      	ldr	r3, [pc, #140]	; (9af0 <_timer_init+0x2a4>)
    9a64:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9a66:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a6a:	4917      	ldr	r1, [pc, #92]	; (9ac8 <_timer_init+0x27c>)
    9a6c:	4613      	mov	r3, r2
    9a6e:	009b      	lsls	r3, r3, #2
    9a70:	4413      	add	r3, r2
    9a72:	009b      	lsls	r3, r3, #2
    9a74:	440b      	add	r3, r1
    9a76:	3302      	adds	r3, #2
    9a78:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a7c:	4618      	mov	r0, r3
    9a7e:	4b1d      	ldr	r3, [pc, #116]	; (9af4 <_timer_init+0x2a8>)
    9a80:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9a82:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a86:	4910      	ldr	r1, [pc, #64]	; (9ac8 <_timer_init+0x27c>)
    9a88:	4613      	mov	r3, r2
    9a8a:	009b      	lsls	r3, r3, #2
    9a8c:	4413      	add	r3, r2
    9a8e:	009b      	lsls	r3, r3, #2
    9a90:	440b      	add	r3, r1
    9a92:	3302      	adds	r3, #2
    9a94:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a98:	4618      	mov	r0, r3
    9a9a:	4b17      	ldr	r3, [pc, #92]	; (9af8 <_timer_init+0x2ac>)
    9a9c:	4798      	blx	r3

	return ERR_NONE;
    9a9e:	2300      	movs	r3, #0
}
    9aa0:	4618      	mov	r0, r3
    9aa2:	3710      	adds	r7, #16
    9aa4:	46bd      	mov	sp, r7
    9aa6:	bd80      	pop	{r7, pc}
    9aa8:	00009f69 	.word	0x00009f69
    9aac:	00011c88 	.word	0x00011c88
    9ab0:	0000579d 	.word	0x0000579d
    9ab4:	00009591 	.word	0x00009591
    9ab8:	000096e1 	.word	0x000096e1
    9abc:	000096b9 	.word	0x000096b9
    9ac0:	0000956d 	.word	0x0000956d
    9ac4:	00009711 	.word	0x00009711
    9ac8:	20000048 	.word	0x20000048
    9acc:	00009771 	.word	0x00009771
    9ad0:	00009735 	.word	0x00009735
    9ad4:	00009753 	.word	0x00009753
    9ad8:	0000981d 	.word	0x0000981d
    9adc:	000097e9 	.word	0x000097e9
    9ae0:	000097b9 	.word	0x000097b9
    9ae4:	00009791 	.word	0x00009791
    9ae8:	00009615 	.word	0x00009615
    9aec:	00009fd1 	.word	0x00009fd1
    9af0:	000094ed 	.word	0x000094ed
    9af4:	00009531 	.word	0x00009531
    9af8:	000094b1 	.word	0x000094b1

00009afc <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    9afc:	b580      	push	{r7, lr}
    9afe:	b084      	sub	sp, #16
    9b00:	af00      	add	r7, sp, #0
    9b02:	6078      	str	r0, [r7, #4]
    9b04:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    9b06:	6838      	ldr	r0, [r7, #0]
    9b08:	4b73      	ldr	r3, [pc, #460]	; (9cd8 <_pwm_init+0x1dc>)
    9b0a:	4798      	blx	r3
    9b0c:	4603      	mov	r3, r0
    9b0e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    9b10:	687b      	ldr	r3, [r7, #4]
    9b12:	683a      	ldr	r2, [r7, #0]
    9b14:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9b16:	2101      	movs	r1, #1
    9b18:	6838      	ldr	r0, [r7, #0]
    9b1a:	4b70      	ldr	r3, [pc, #448]	; (9cdc <_pwm_init+0x1e0>)
    9b1c:	4798      	blx	r3
    9b1e:	4603      	mov	r3, r0
    9b20:	f083 0301 	eor.w	r3, r3, #1
    9b24:	b2db      	uxtb	r3, r3
    9b26:	2b00      	cmp	r3, #0
    9b28:	d011      	beq.n	9b4e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9b2a:	2102      	movs	r1, #2
    9b2c:	6838      	ldr	r0, [r7, #0]
    9b2e:	4b6c      	ldr	r3, [pc, #432]	; (9ce0 <_pwm_init+0x1e4>)
    9b30:	4798      	blx	r3
    9b32:	4603      	mov	r3, r0
    9b34:	2b00      	cmp	r3, #0
    9b36:	d006      	beq.n	9b46 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9b38:	6838      	ldr	r0, [r7, #0]
    9b3a:	4b6a      	ldr	r3, [pc, #424]	; (9ce4 <_pwm_init+0x1e8>)
    9b3c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9b3e:	2102      	movs	r1, #2
    9b40:	6838      	ldr	r0, [r7, #0]
    9b42:	4b69      	ldr	r3, [pc, #420]	; (9ce8 <_pwm_init+0x1ec>)
    9b44:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9b46:	2101      	movs	r1, #1
    9b48:	6838      	ldr	r0, [r7, #0]
    9b4a:	4b68      	ldr	r3, [pc, #416]	; (9cec <_pwm_init+0x1f0>)
    9b4c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9b4e:	2101      	movs	r1, #1
    9b50:	6838      	ldr	r0, [r7, #0]
    9b52:	4b65      	ldr	r3, [pc, #404]	; (9ce8 <_pwm_init+0x1ec>)
    9b54:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9b56:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b5a:	4965      	ldr	r1, [pc, #404]	; (9cf0 <_pwm_init+0x1f4>)
    9b5c:	4613      	mov	r3, r2
    9b5e:	009b      	lsls	r3, r3, #2
    9b60:	4413      	add	r3, r2
    9b62:	009b      	lsls	r3, r3, #2
    9b64:	440b      	add	r3, r1
    9b66:	3304      	adds	r3, #4
    9b68:	681b      	ldr	r3, [r3, #0]
    9b6a:	4619      	mov	r1, r3
    9b6c:	6838      	ldr	r0, [r7, #0]
    9b6e:	4b5f      	ldr	r3, [pc, #380]	; (9cec <_pwm_init+0x1f0>)
    9b70:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9b72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b76:	495e      	ldr	r1, [pc, #376]	; (9cf0 <_pwm_init+0x1f4>)
    9b78:	4613      	mov	r3, r2
    9b7a:	009b      	lsls	r3, r3, #2
    9b7c:	4413      	add	r3, r2
    9b7e:	009b      	lsls	r3, r3, #2
    9b80:	440b      	add	r3, r1
    9b82:	330a      	adds	r3, #10
    9b84:	781b      	ldrb	r3, [r3, #0]
    9b86:	4619      	mov	r1, r3
    9b88:	6838      	ldr	r0, [r7, #0]
    9b8a:	4b5a      	ldr	r3, [pc, #360]	; (9cf4 <_pwm_init+0x1f8>)
    9b8c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9b8e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b92:	4957      	ldr	r1, [pc, #348]	; (9cf0 <_pwm_init+0x1f4>)
    9b94:	4613      	mov	r3, r2
    9b96:	009b      	lsls	r3, r3, #2
    9b98:	4413      	add	r3, r2
    9b9a:	009b      	lsls	r3, r3, #2
    9b9c:	440b      	add	r3, r1
    9b9e:	3308      	adds	r3, #8
    9ba0:	881b      	ldrh	r3, [r3, #0]
    9ba2:	4619      	mov	r1, r3
    9ba4:	6838      	ldr	r0, [r7, #0]
    9ba6:	4b54      	ldr	r3, [pc, #336]	; (9cf8 <_pwm_init+0x1fc>)
    9ba8:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    9baa:	2103      	movs	r1, #3
    9bac:	6838      	ldr	r0, [r7, #0]
    9bae:	4b53      	ldr	r3, [pc, #332]	; (9cfc <_pwm_init+0x200>)
    9bb0:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9bb2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bb6:	494e      	ldr	r1, [pc, #312]	; (9cf0 <_pwm_init+0x1f4>)
    9bb8:	4613      	mov	r3, r2
    9bba:	009b      	lsls	r3, r3, #2
    9bbc:	4413      	add	r3, r2
    9bbe:	009b      	lsls	r3, r3, #2
    9bc0:	440b      	add	r3, r1
    9bc2:	3304      	adds	r3, #4
    9bc4:	681b      	ldr	r3, [r3, #0]
    9bc6:	f003 030c 	and.w	r3, r3, #12
    9bca:	2b08      	cmp	r3, #8
    9bcc:	d11e      	bne.n	9c0c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9bce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bd2:	4947      	ldr	r1, [pc, #284]	; (9cf0 <_pwm_init+0x1f4>)
    9bd4:	4613      	mov	r3, r2
    9bd6:	009b      	lsls	r3, r3, #2
    9bd8:	4413      	add	r3, r2
    9bda:	009b      	lsls	r3, r3, #2
    9bdc:	440b      	add	r3, r1
    9bde:	330c      	adds	r3, #12
    9be0:	681b      	ldr	r3, [r3, #0]
    9be2:	461a      	mov	r2, r3
    9be4:	2100      	movs	r1, #0
    9be6:	6838      	ldr	r0, [r7, #0]
    9be8:	4b45      	ldr	r3, [pc, #276]	; (9d00 <_pwm_init+0x204>)
    9bea:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9bec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bf0:	493f      	ldr	r1, [pc, #252]	; (9cf0 <_pwm_init+0x1f4>)
    9bf2:	4613      	mov	r3, r2
    9bf4:	009b      	lsls	r3, r3, #2
    9bf6:	4413      	add	r3, r2
    9bf8:	009b      	lsls	r3, r3, #2
    9bfa:	440b      	add	r3, r1
    9bfc:	3310      	adds	r3, #16
    9bfe:	681b      	ldr	r3, [r3, #0]
    9c00:	461a      	mov	r2, r3
    9c02:	2101      	movs	r1, #1
    9c04:	6838      	ldr	r0, [r7, #0]
    9c06:	4b3e      	ldr	r3, [pc, #248]	; (9d00 <_pwm_init+0x204>)
    9c08:	4798      	blx	r3
    9c0a:	e031      	b.n	9c70 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9c0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c10:	4937      	ldr	r1, [pc, #220]	; (9cf0 <_pwm_init+0x1f4>)
    9c12:	4613      	mov	r3, r2
    9c14:	009b      	lsls	r3, r3, #2
    9c16:	4413      	add	r3, r2
    9c18:	009b      	lsls	r3, r3, #2
    9c1a:	440b      	add	r3, r1
    9c1c:	3304      	adds	r3, #4
    9c1e:	681b      	ldr	r3, [r3, #0]
    9c20:	f003 030c 	and.w	r3, r3, #12
    9c24:	2b00      	cmp	r3, #0
    9c26:	d120      	bne.n	9c6a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9c28:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c2c:	4930      	ldr	r1, [pc, #192]	; (9cf0 <_pwm_init+0x1f4>)
    9c2e:	4613      	mov	r3, r2
    9c30:	009b      	lsls	r3, r3, #2
    9c32:	4413      	add	r3, r2
    9c34:	009b      	lsls	r3, r3, #2
    9c36:	440b      	add	r3, r1
    9c38:	330c      	adds	r3, #12
    9c3a:	681b      	ldr	r3, [r3, #0]
    9c3c:	b29b      	uxth	r3, r3
    9c3e:	461a      	mov	r2, r3
    9c40:	2100      	movs	r1, #0
    9c42:	6838      	ldr	r0, [r7, #0]
    9c44:	4b2f      	ldr	r3, [pc, #188]	; (9d04 <_pwm_init+0x208>)
    9c46:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9c48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c4c:	4928      	ldr	r1, [pc, #160]	; (9cf0 <_pwm_init+0x1f4>)
    9c4e:	4613      	mov	r3, r2
    9c50:	009b      	lsls	r3, r3, #2
    9c52:	4413      	add	r3, r2
    9c54:	009b      	lsls	r3, r3, #2
    9c56:	440b      	add	r3, r1
    9c58:	3310      	adds	r3, #16
    9c5a:	681b      	ldr	r3, [r3, #0]
    9c5c:	b29b      	uxth	r3, r3
    9c5e:	461a      	mov	r2, r3
    9c60:	2101      	movs	r1, #1
    9c62:	6838      	ldr	r0, [r7, #0]
    9c64:	4b27      	ldr	r3, [pc, #156]	; (9d04 <_pwm_init+0x208>)
    9c66:	4798      	blx	r3
    9c68:	e002      	b.n	9c70 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    9c6a:	f04f 33ff 	mov.w	r3, #4294967295
    9c6e:	e02e      	b.n	9cce <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    9c70:	6879      	ldr	r1, [r7, #4]
    9c72:	6838      	ldr	r0, [r7, #0]
    9c74:	4b24      	ldr	r3, [pc, #144]	; (9d08 <_pwm_init+0x20c>)
    9c76:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9c78:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c7c:	491c      	ldr	r1, [pc, #112]	; (9cf0 <_pwm_init+0x1f4>)
    9c7e:	4613      	mov	r3, r2
    9c80:	009b      	lsls	r3, r3, #2
    9c82:	4413      	add	r3, r2
    9c84:	009b      	lsls	r3, r3, #2
    9c86:	440b      	add	r3, r1
    9c88:	3302      	adds	r3, #2
    9c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
    9c8e:	4618      	mov	r0, r3
    9c90:	4b1e      	ldr	r3, [pc, #120]	; (9d0c <_pwm_init+0x210>)
    9c92:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9c94:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c98:	4915      	ldr	r1, [pc, #84]	; (9cf0 <_pwm_init+0x1f4>)
    9c9a:	4613      	mov	r3, r2
    9c9c:	009b      	lsls	r3, r3, #2
    9c9e:	4413      	add	r3, r2
    9ca0:	009b      	lsls	r3, r3, #2
    9ca2:	440b      	add	r3, r1
    9ca4:	3302      	adds	r3, #2
    9ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
    9caa:	4618      	mov	r0, r3
    9cac:	4b18      	ldr	r3, [pc, #96]	; (9d10 <_pwm_init+0x214>)
    9cae:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9cb0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9cb4:	490e      	ldr	r1, [pc, #56]	; (9cf0 <_pwm_init+0x1f4>)
    9cb6:	4613      	mov	r3, r2
    9cb8:	009b      	lsls	r3, r3, #2
    9cba:	4413      	add	r3, r2
    9cbc:	009b      	lsls	r3, r3, #2
    9cbe:	440b      	add	r3, r1
    9cc0:	3302      	adds	r3, #2
    9cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
    9cc6:	4618      	mov	r0, r3
    9cc8:	4b12      	ldr	r3, [pc, #72]	; (9d14 <_pwm_init+0x218>)
    9cca:	4798      	blx	r3

	return 0;
    9ccc:	2300      	movs	r3, #0
}
    9cce:	4618      	mov	r0, r3
    9cd0:	3710      	adds	r7, #16
    9cd2:	46bd      	mov	sp, r7
    9cd4:	bd80      	pop	{r7, pc}
    9cd6:	bf00      	nop
    9cd8:	00009f69 	.word	0x00009f69
    9cdc:	00009591 	.word	0x00009591
    9ce0:	000096e1 	.word	0x000096e1
    9ce4:	000096b9 	.word	0x000096b9
    9ce8:	0000956d 	.word	0x0000956d
    9cec:	00009711 	.word	0x00009711
    9cf0:	20000048 	.word	0x20000048
    9cf4:	00009771 	.word	0x00009771
    9cf8:	00009735 	.word	0x00009735
    9cfc:	00009753 	.word	0x00009753
    9d00:	0000981d 	.word	0x0000981d
    9d04:	000097e9 	.word	0x000097e9
    9d08:	00009fd1 	.word	0x00009fd1
    9d0c:	000094ed 	.word	0x000094ed
    9d10:	00009531 	.word	0x00009531
    9d14:	000094b1 	.word	0x000094b1

00009d18 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    9d18:	b580      	push	{r7, lr}
    9d1a:	b082      	sub	sp, #8
    9d1c:	af00      	add	r7, sp, #0
    9d1e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9d20:	687b      	ldr	r3, [r7, #4]
    9d22:	68db      	ldr	r3, [r3, #12]
    9d24:	4618      	mov	r0, r3
    9d26:	4b03      	ldr	r3, [pc, #12]	; (9d34 <_timer_start+0x1c>)
    9d28:	4798      	blx	r3
}
    9d2a:	bf00      	nop
    9d2c:	3708      	adds	r7, #8
    9d2e:	46bd      	mov	sp, r7
    9d30:	bd80      	pop	{r7, pc}
    9d32:	bf00      	nop
    9d34:	00009659 	.word	0x00009659

00009d38 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    9d38:	b580      	push	{r7, lr}
    9d3a:	b082      	sub	sp, #8
    9d3c:	af00      	add	r7, sp, #0
    9d3e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9d40:	687b      	ldr	r3, [r7, #4]
    9d42:	691b      	ldr	r3, [r3, #16]
    9d44:	4618      	mov	r0, r3
    9d46:	4b03      	ldr	r3, [pc, #12]	; (9d54 <_pwm_enable+0x1c>)
    9d48:	4798      	blx	r3
}
    9d4a:	bf00      	nop
    9d4c:	3708      	adds	r7, #8
    9d4e:	46bd      	mov	sp, r7
    9d50:	bd80      	pop	{r7, pc}
    9d52:	bf00      	nop
    9d54:	00009659 	.word	0x00009659

00009d58 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    9d58:	b580      	push	{r7, lr}
    9d5a:	b082      	sub	sp, #8
    9d5c:	af00      	add	r7, sp, #0
    9d5e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9d60:	687b      	ldr	r3, [r7, #4]
    9d62:	68db      	ldr	r3, [r3, #12]
    9d64:	4618      	mov	r0, r3
    9d66:	4b03      	ldr	r3, [pc, #12]	; (9d74 <_timer_stop+0x1c>)
    9d68:	4798      	blx	r3
}
    9d6a:	bf00      	nop
    9d6c:	3708      	adds	r7, #8
    9d6e:	46bd      	mov	sp, r7
    9d70:	bd80      	pop	{r7, pc}
    9d72:	bf00      	nop
    9d74:	000096b9 	.word	0x000096b9

00009d78 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    9d78:	b580      	push	{r7, lr}
    9d7a:	b082      	sub	sp, #8
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9d80:	687b      	ldr	r3, [r7, #4]
    9d82:	68db      	ldr	r3, [r3, #12]
    9d84:	4618      	mov	r0, r3
    9d86:	4b03      	ldr	r3, [pc, #12]	; (9d94 <_timer_is_started+0x1c>)
    9d88:	4798      	blx	r3
    9d8a:	4603      	mov	r3, r0
}
    9d8c:	4618      	mov	r0, r3
    9d8e:	3708      	adds	r7, #8
    9d90:	46bd      	mov	sp, r7
    9d92:	bd80      	pop	{r7, pc}
    9d94:	00009681 	.word	0x00009681

00009d98 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    9d98:	b580      	push	{r7, lr}
    9d9a:	b082      	sub	sp, #8
    9d9c:	af00      	add	r7, sp, #0
    9d9e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9da0:	687b      	ldr	r3, [r7, #4]
    9da2:	691b      	ldr	r3, [r3, #16]
    9da4:	4618      	mov	r0, r3
    9da6:	4b03      	ldr	r3, [pc, #12]	; (9db4 <_pwm_is_enabled+0x1c>)
    9da8:	4798      	blx	r3
    9daa:	4603      	mov	r3, r0
}
    9dac:	4618      	mov	r0, r3
    9dae:	3708      	adds	r7, #8
    9db0:	46bd      	mov	sp, r7
    9db2:	bd80      	pop	{r7, pc}
    9db4:	00009681 	.word	0x00009681

00009db8 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9db8:	b480      	push	{r7}
    9dba:	af00      	add	r7, sp, #0
	return NULL;
    9dbc:	2300      	movs	r3, #0
}
    9dbe:	4618      	mov	r0, r3
    9dc0:	46bd      	mov	sp, r7
    9dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dc6:	4770      	bx	lr

00009dc8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9dc8:	b480      	push	{r7}
    9dca:	af00      	add	r7, sp, #0
	return NULL;
    9dcc:	2300      	movs	r3, #0
}
    9dce:	4618      	mov	r0, r3
    9dd0:	46bd      	mov	sp, r7
    9dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd6:	4770      	bx	lr

00009dd8 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    9dd8:	b580      	push	{r7, lr}
    9dda:	b084      	sub	sp, #16
    9ddc:	af00      	add	r7, sp, #0
    9dde:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9de0:	687b      	ldr	r3, [r7, #4]
    9de2:	68db      	ldr	r3, [r3, #12]
    9de4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9de6:	68f8      	ldr	r0, [r7, #12]
    9de8:	4b0e      	ldr	r3, [pc, #56]	; (9e24 <_timer_set_irq+0x4c>)
    9dea:	4798      	blx	r3
    9dec:	4603      	mov	r3, r0
    9dee:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9df0:	f240 12a3 	movw	r2, #419	; 0x1a3
    9df4:	490c      	ldr	r1, [pc, #48]	; (9e28 <_timer_set_irq+0x50>)
    9df6:	2001      	movs	r0, #1
    9df8:	4b0c      	ldr	r3, [pc, #48]	; (9e2c <_timer_set_irq+0x54>)
    9dfa:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    9dfc:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9e00:	490b      	ldr	r1, [pc, #44]	; (9e30 <_timer_set_irq+0x58>)
    9e02:	4613      	mov	r3, r2
    9e04:	009b      	lsls	r3, r3, #2
    9e06:	4413      	add	r3, r2
    9e08:	009b      	lsls	r3, r3, #2
    9e0a:	440b      	add	r3, r1
    9e0c:	3302      	adds	r3, #2
    9e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
    9e12:	b2db      	uxtb	r3, r3
    9e14:	4618      	mov	r0, r3
    9e16:	4b07      	ldr	r3, [pc, #28]	; (9e34 <_timer_set_irq+0x5c>)
    9e18:	4798      	blx	r3
}
    9e1a:	bf00      	nop
    9e1c:	3710      	adds	r7, #16
    9e1e:	46bd      	mov	sp, r7
    9e20:	bd80      	pop	{r7, pc}
    9e22:	bf00      	nop
    9e24:	00009f69 	.word	0x00009f69
    9e28:	00011c88 	.word	0x00011c88
    9e2c:	0000579d 	.word	0x0000579d
    9e30:	20000048 	.word	0x20000048
    9e34:	00005fdd 	.word	0x00005fdd

00009e38 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    9e38:	b580      	push	{r7, lr}
    9e3a:	b084      	sub	sp, #16
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9e40:	687b      	ldr	r3, [r7, #4]
    9e42:	68db      	ldr	r3, [r3, #12]
    9e44:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9e46:	68f8      	ldr	r0, [r7, #12]
    9e48:	4b07      	ldr	r3, [pc, #28]	; (9e68 <tc_interrupt_handler+0x30>)
    9e4a:	4798      	blx	r3
    9e4c:	4603      	mov	r3, r0
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d006      	beq.n	9e60 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9e52:	68f8      	ldr	r0, [r7, #12]
    9e54:	4b05      	ldr	r3, [pc, #20]	; (9e6c <tc_interrupt_handler+0x34>)
    9e56:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    9e58:	687b      	ldr	r3, [r7, #4]
    9e5a:	681b      	ldr	r3, [r3, #0]
    9e5c:	6878      	ldr	r0, [r7, #4]
    9e5e:	4798      	blx	r3
	}
}
    9e60:	bf00      	nop
    9e62:	3710      	adds	r7, #16
    9e64:	46bd      	mov	sp, r7
    9e66:	bd80      	pop	{r7, pc}
    9e68:	000095b9 	.word	0x000095b9
    9e6c:	000095e1 	.word	0x000095e1

00009e70 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    9e70:	b580      	push	{r7, lr}
    9e72:	b084      	sub	sp, #16
    9e74:	af00      	add	r7, sp, #0
    9e76:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	691b      	ldr	r3, [r3, #16]
    9e7c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9e7e:	68f8      	ldr	r0, [r7, #12]
    9e80:	4b12      	ldr	r3, [pc, #72]	; (9ecc <tc_pwm_interrupt_handler+0x5c>)
    9e82:	4798      	blx	r3
    9e84:	4603      	mov	r3, r0
    9e86:	2b00      	cmp	r3, #0
    9e88:	d00a      	beq.n	9ea0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9e8a:	68f8      	ldr	r0, [r7, #12]
    9e8c:	4b10      	ldr	r3, [pc, #64]	; (9ed0 <tc_pwm_interrupt_handler+0x60>)
    9e8e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	681b      	ldr	r3, [r3, #0]
    9e94:	2b00      	cmp	r3, #0
    9e96:	d003      	beq.n	9ea0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    9e98:	687b      	ldr	r3, [r7, #4]
    9e9a:	681b      	ldr	r3, [r3, #0]
    9e9c:	6878      	ldr	r0, [r7, #4]
    9e9e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    9ea0:	68f8      	ldr	r0, [r7, #12]
    9ea2:	4b0c      	ldr	r3, [pc, #48]	; (9ed4 <tc_pwm_interrupt_handler+0x64>)
    9ea4:	4798      	blx	r3
    9ea6:	4603      	mov	r3, r0
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d00a      	beq.n	9ec2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    9eac:	68f8      	ldr	r0, [r7, #12]
    9eae:	4b0a      	ldr	r3, [pc, #40]	; (9ed8 <tc_pwm_interrupt_handler+0x68>)
    9eb0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	685b      	ldr	r3, [r3, #4]
    9eb6:	2b00      	cmp	r3, #0
    9eb8:	d003      	beq.n	9ec2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    9eba:	687b      	ldr	r3, [r7, #4]
    9ebc:	685b      	ldr	r3, [r3, #4]
    9ebe:	6878      	ldr	r0, [r7, #4]
    9ec0:	4798      	blx	r3
		}
	}
}
    9ec2:	bf00      	nop
    9ec4:	3710      	adds	r7, #16
    9ec6:	46bd      	mov	sp, r7
    9ec8:	bd80      	pop	{r7, pc}
    9eca:	bf00      	nop
    9ecc:	000095b9 	.word	0x000095b9
    9ed0:	000095e1 	.word	0x000095e1
    9ed4:	0000962f 	.word	0x0000962f
    9ed8:	000095fb 	.word	0x000095fb

00009edc <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    9edc:	b580      	push	{r7, lr}
    9ede:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    9ee0:	4b03      	ldr	r3, [pc, #12]	; (9ef0 <TC0_Handler+0x14>)
    9ee2:	681b      	ldr	r3, [r3, #0]
    9ee4:	4618      	mov	r0, r3
    9ee6:	4b03      	ldr	r3, [pc, #12]	; (9ef4 <TC0_Handler+0x18>)
    9ee8:	4798      	blx	r3
}
    9eea:	bf00      	nop
    9eec:	bd80      	pop	{r7, pc}
    9eee:	bf00      	nop
    9ef0:	20001d3c 	.word	0x20001d3c
    9ef4:	00009e39 	.word	0x00009e39

00009ef8 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    9ef8:	b580      	push	{r7, lr}
    9efa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    9efc:	4b03      	ldr	r3, [pc, #12]	; (9f0c <TC1_Handler+0x14>)
    9efe:	681b      	ldr	r3, [r3, #0]
    9f00:	4618      	mov	r0, r3
    9f02:	4b03      	ldr	r3, [pc, #12]	; (9f10 <TC1_Handler+0x18>)
    9f04:	4798      	blx	r3
}
    9f06:	bf00      	nop
    9f08:	bd80      	pop	{r7, pc}
    9f0a:	bf00      	nop
    9f0c:	20001d40 	.word	0x20001d40
    9f10:	00009e39 	.word	0x00009e39

00009f14 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    9f14:	b580      	push	{r7, lr}
    9f16:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    9f18:	4b03      	ldr	r3, [pc, #12]	; (9f28 <TC2_Handler+0x14>)
    9f1a:	681b      	ldr	r3, [r3, #0]
    9f1c:	4618      	mov	r0, r3
    9f1e:	4b03      	ldr	r3, [pc, #12]	; (9f2c <TC2_Handler+0x18>)
    9f20:	4798      	blx	r3
}
    9f22:	bf00      	nop
    9f24:	bd80      	pop	{r7, pc}
    9f26:	bf00      	nop
    9f28:	20001d44 	.word	0x20001d44
    9f2c:	00009e39 	.word	0x00009e39

00009f30 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    9f30:	b580      	push	{r7, lr}
    9f32:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    9f34:	4b03      	ldr	r3, [pc, #12]	; (9f44 <TC3_Handler+0x14>)
    9f36:	681b      	ldr	r3, [r3, #0]
    9f38:	4618      	mov	r0, r3
    9f3a:	4b03      	ldr	r3, [pc, #12]	; (9f48 <TC3_Handler+0x18>)
    9f3c:	4798      	blx	r3
}
    9f3e:	bf00      	nop
    9f40:	bd80      	pop	{r7, pc}
    9f42:	bf00      	nop
    9f44:	20001d48 	.word	0x20001d48
    9f48:	00009e39 	.word	0x00009e39

00009f4c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    9f4c:	b580      	push	{r7, lr}
    9f4e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    9f50:	4b03      	ldr	r3, [pc, #12]	; (9f60 <TC7_Handler+0x14>)
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	4618      	mov	r0, r3
    9f56:	4b03      	ldr	r3, [pc, #12]	; (9f64 <TC7_Handler+0x18>)
    9f58:	4798      	blx	r3
}
    9f5a:	bf00      	nop
    9f5c:	bd80      	pop	{r7, pc}
    9f5e:	bf00      	nop
    9f60:	20001d4c 	.word	0x20001d4c
    9f64:	00009e71 	.word	0x00009e71

00009f68 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    9f68:	b580      	push	{r7, lr}
    9f6a:	b084      	sub	sp, #16
    9f6c:	af00      	add	r7, sp, #0
    9f6e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    9f70:	6878      	ldr	r0, [r7, #4]
    9f72:	4b13      	ldr	r3, [pc, #76]	; (9fc0 <get_tc_index+0x58>)
    9f74:	4798      	blx	r3
    9f76:	4603      	mov	r3, r0
    9f78:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9f7a:	2300      	movs	r3, #0
    9f7c:	73fb      	strb	r3, [r7, #15]
    9f7e:	e010      	b.n	9fa2 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    9f80:	7bfa      	ldrb	r2, [r7, #15]
    9f82:	4910      	ldr	r1, [pc, #64]	; (9fc4 <get_tc_index+0x5c>)
    9f84:	4613      	mov	r3, r2
    9f86:	009b      	lsls	r3, r3, #2
    9f88:	4413      	add	r3, r2
    9f8a:	009b      	lsls	r3, r3, #2
    9f8c:	440b      	add	r3, r1
    9f8e:	781b      	ldrb	r3, [r3, #0]
    9f90:	7bba      	ldrb	r2, [r7, #14]
    9f92:	429a      	cmp	r2, r3
    9f94:	d102      	bne.n	9f9c <get_tc_index+0x34>
			return i;
    9f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9f9a:	e00d      	b.n	9fb8 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9f9c:	7bfb      	ldrb	r3, [r7, #15]
    9f9e:	3301      	adds	r3, #1
    9fa0:	73fb      	strb	r3, [r7, #15]
    9fa2:	7bfb      	ldrb	r3, [r7, #15]
    9fa4:	2b04      	cmp	r3, #4
    9fa6:	d9eb      	bls.n	9f80 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    9fa8:	f240 2206 	movw	r2, #518	; 0x206
    9fac:	4906      	ldr	r1, [pc, #24]	; (9fc8 <get_tc_index+0x60>)
    9fae:	2000      	movs	r0, #0
    9fb0:	4b06      	ldr	r3, [pc, #24]	; (9fcc <get_tc_index+0x64>)
    9fb2:	4798      	blx	r3
	return -1;
    9fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
    9fb8:	4618      	mov	r0, r3
    9fba:	3710      	adds	r7, #16
    9fbc:	46bd      	mov	sp, r7
    9fbe:	bd80      	pop	{r7, pc}
    9fc0:	0000a055 	.word	0x0000a055
    9fc4:	20000048 	.word	0x20000048
    9fc8:	00011c88 	.word	0x00011c88
    9fcc:	0000579d 	.word	0x0000579d

00009fd0 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    9fd0:	b480      	push	{r7}
    9fd2:	b083      	sub	sp, #12
    9fd4:	af00      	add	r7, sp, #0
    9fd6:	6078      	str	r0, [r7, #4]
    9fd8:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    9fda:	687b      	ldr	r3, [r7, #4]
    9fdc:	4a13      	ldr	r2, [pc, #76]	; (a02c <_tc_init_irq_param+0x5c>)
    9fde:	4293      	cmp	r3, r2
    9fe0:	d102      	bne.n	9fe8 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    9fe2:	4a13      	ldr	r2, [pc, #76]	; (a030 <_tc_init_irq_param+0x60>)
    9fe4:	683b      	ldr	r3, [r7, #0]
    9fe6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	4a12      	ldr	r2, [pc, #72]	; (a034 <_tc_init_irq_param+0x64>)
    9fec:	4293      	cmp	r3, r2
    9fee:	d102      	bne.n	9ff6 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    9ff0:	4a11      	ldr	r2, [pc, #68]	; (a038 <_tc_init_irq_param+0x68>)
    9ff2:	683b      	ldr	r3, [r7, #0]
    9ff4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    9ff6:	687b      	ldr	r3, [r7, #4]
    9ff8:	4a10      	ldr	r2, [pc, #64]	; (a03c <_tc_init_irq_param+0x6c>)
    9ffa:	4293      	cmp	r3, r2
    9ffc:	d102      	bne.n	a004 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    9ffe:	4a10      	ldr	r2, [pc, #64]	; (a040 <_tc_init_irq_param+0x70>)
    a000:	683b      	ldr	r3, [r7, #0]
    a002:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    a004:	687b      	ldr	r3, [r7, #4]
    a006:	4a0f      	ldr	r2, [pc, #60]	; (a044 <_tc_init_irq_param+0x74>)
    a008:	4293      	cmp	r3, r2
    a00a:	d102      	bne.n	a012 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    a00c:	4a0e      	ldr	r2, [pc, #56]	; (a048 <_tc_init_irq_param+0x78>)
    a00e:	683b      	ldr	r3, [r7, #0]
    a010:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    a012:	687b      	ldr	r3, [r7, #4]
    a014:	4a0d      	ldr	r2, [pc, #52]	; (a04c <_tc_init_irq_param+0x7c>)
    a016:	4293      	cmp	r3, r2
    a018:	d102      	bne.n	a020 <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    a01a:	4a0d      	ldr	r2, [pc, #52]	; (a050 <_tc_init_irq_param+0x80>)
    a01c:	683b      	ldr	r3, [r7, #0]
    a01e:	6013      	str	r3, [r2, #0]
	}
}
    a020:	bf00      	nop
    a022:	370c      	adds	r7, #12
    a024:	46bd      	mov	sp, r7
    a026:	f85d 7b04 	ldr.w	r7, [sp], #4
    a02a:	4770      	bx	lr
    a02c:	40003800 	.word	0x40003800
    a030:	20001d3c 	.word	0x20001d3c
    a034:	40003c00 	.word	0x40003c00
    a038:	20001d40 	.word	0x20001d40
    a03c:	4101a000 	.word	0x4101a000
    a040:	20001d44 	.word	0x20001d44
    a044:	4101c000 	.word	0x4101c000
    a048:	20001d48 	.word	0x20001d48
    a04c:	43001800 	.word	0x43001800
    a050:	20001d4c 	.word	0x20001d4c

0000a054 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    a054:	b4b0      	push	{r4, r5, r7}
    a056:	b08d      	sub	sp, #52	; 0x34
    a058:	af00      	add	r7, sp, #0
    a05a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    a05c:	4b13      	ldr	r3, [pc, #76]	; (a0ac <_get_hardware_offset+0x58>)
    a05e:	f107 040c 	add.w	r4, r7, #12
    a062:	461d      	mov	r5, r3
    a064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a068:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a06c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a070:	2300      	movs	r3, #0
    a072:	62fb      	str	r3, [r7, #44]	; 0x2c
    a074:	e010      	b.n	a098 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a078:	009b      	lsls	r3, r3, #2
    a07a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a07e:	4413      	add	r3, r2
    a080:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a084:	461a      	mov	r2, r3
    a086:	687b      	ldr	r3, [r7, #4]
    a088:	429a      	cmp	r2, r3
    a08a:	d102      	bne.n	a092 <_get_hardware_offset+0x3e>
			return i;
    a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a08e:	b2db      	uxtb	r3, r3
    a090:	e006      	b.n	a0a0 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a094:	3301      	adds	r3, #1
    a096:	62fb      	str	r3, [r7, #44]	; 0x2c
    a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a09a:	2b07      	cmp	r3, #7
    a09c:	d9eb      	bls.n	a076 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    a09e:	2300      	movs	r3, #0
}
    a0a0:	4618      	mov	r0, r3
    a0a2:	3734      	adds	r7, #52	; 0x34
    a0a4:	46bd      	mov	sp, r7
    a0a6:	bcb0      	pop	{r4, r5, r7}
    a0a8:	4770      	bx	lr
    a0aa:	bf00      	nop
    a0ac:	00011c9c 	.word	0x00011c9c

0000a0b0 <__NVIC_EnableIRQ>:
{
    a0b0:	b480      	push	{r7}
    a0b2:	b083      	sub	sp, #12
    a0b4:	af00      	add	r7, sp, #0
    a0b6:	4603      	mov	r3, r0
    a0b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a0ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a0be:	2b00      	cmp	r3, #0
    a0c0:	db0b      	blt.n	a0da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a0c2:	4909      	ldr	r1, [pc, #36]	; (a0e8 <__NVIC_EnableIRQ+0x38>)
    a0c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a0c8:	095b      	lsrs	r3, r3, #5
    a0ca:	88fa      	ldrh	r2, [r7, #6]
    a0cc:	f002 021f 	and.w	r2, r2, #31
    a0d0:	2001      	movs	r0, #1
    a0d2:	fa00 f202 	lsl.w	r2, r0, r2
    a0d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0da:	bf00      	nop
    a0dc:	370c      	adds	r7, #12
    a0de:	46bd      	mov	sp, r7
    a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0e4:	4770      	bx	lr
    a0e6:	bf00      	nop
    a0e8:	e000e100 	.word	0xe000e100

0000a0ec <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    a0ec:	b480      	push	{r7}
    a0ee:	b087      	sub	sp, #28
    a0f0:	af00      	add	r7, sp, #0
    a0f2:	60f8      	str	r0, [r7, #12]
    a0f4:	460b      	mov	r3, r1
    a0f6:	607a      	str	r2, [r7, #4]
    a0f8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    a0fa:	7afa      	ldrb	r2, [r7, #11]
    a0fc:	68f9      	ldr	r1, [r7, #12]
    a0fe:	4613      	mov	r3, r2
    a100:	009b      	lsls	r3, r3, #2
    a102:	4413      	add	r3, r2
    a104:	009b      	lsls	r3, r3, #2
    a106:	440b      	add	r3, r1
    a108:	3340      	adds	r3, #64	; 0x40
    a10a:	681b      	ldr	r3, [r3, #0]
    a10c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    a10e:	697a      	ldr	r2, [r7, #20]
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	4013      	ands	r3, r2
    a114:	617b      	str	r3, [r7, #20]
	return tmp;
    a116:	697b      	ldr	r3, [r7, #20]
}
    a118:	4618      	mov	r0, r3
    a11a:	371c      	adds	r7, #28
    a11c:	46bd      	mov	sp, r7
    a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a122:	4770      	bx	lr

0000a124 <hri_oscctrl_get_STATUS_reg>:
{
    a124:	b480      	push	{r7}
    a126:	b085      	sub	sp, #20
    a128:	af00      	add	r7, sp, #0
    a12a:	6078      	str	r0, [r7, #4]
    a12c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	691b      	ldr	r3, [r3, #16]
    a132:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a134:	68fa      	ldr	r2, [r7, #12]
    a136:	683b      	ldr	r3, [r7, #0]
    a138:	4013      	ands	r3, r2
    a13a:	60fb      	str	r3, [r7, #12]
	return tmp;
    a13c:	68fb      	ldr	r3, [r7, #12]
}
    a13e:	4618      	mov	r0, r3
    a140:	3714      	adds	r7, #20
    a142:	46bd      	mov	sp, r7
    a144:	f85d 7b04 	ldr.w	r7, [sp], #4
    a148:	4770      	bx	lr

0000a14a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    a14a:	b480      	push	{r7}
    a14c:	b085      	sub	sp, #20
    a14e:	af00      	add	r7, sp, #0
    a150:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a152:	687b      	ldr	r3, [r7, #4]
    a154:	f893 3020 	ldrb.w	r3, [r3, #32]
    a158:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    a15a:	7bfb      	ldrb	r3, [r7, #15]
    a15c:	f003 0301 	and.w	r3, r3, #1
    a160:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a162:	7bfb      	ldrb	r3, [r7, #15]
    a164:	2b00      	cmp	r3, #0
    a166:	bf14      	ite	ne
    a168:	2301      	movne	r3, #1
    a16a:	2300      	moveq	r3, #0
    a16c:	b2db      	uxtb	r3, r3
}
    a16e:	4618      	mov	r0, r3
    a170:	3714      	adds	r7, #20
    a172:	46bd      	mov	sp, r7
    a174:	f85d 7b04 	ldr.w	r7, [sp], #4
    a178:	4770      	bx	lr

0000a17a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a17a:	b480      	push	{r7}
    a17c:	b083      	sub	sp, #12
    a17e:	af00      	add	r7, sp, #0
    a180:	6078      	str	r0, [r7, #4]
    a182:	460b      	mov	r3, r1
    a184:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a186:	bf00      	nop
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	789b      	ldrb	r3, [r3, #2]
    a18c:	b2da      	uxtb	r2, r3
    a18e:	78fb      	ldrb	r3, [r7, #3]
    a190:	4013      	ands	r3, r2
    a192:	b2db      	uxtb	r3, r3
    a194:	2b00      	cmp	r3, #0
    a196:	d1f7      	bne.n	a188 <hri_usb_wait_for_sync+0xe>
	};
}
    a198:	bf00      	nop
    a19a:	370c      	adds	r7, #12
    a19c:	46bd      	mov	sp, r7
    a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1a2:	4770      	bx	lr

0000a1a4 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a1a4:	b480      	push	{r7}
    a1a6:	b083      	sub	sp, #12
    a1a8:	af00      	add	r7, sp, #0
    a1aa:	6078      	str	r0, [r7, #4]
    a1ac:	460b      	mov	r3, r1
    a1ae:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a1b0:	687b      	ldr	r3, [r7, #4]
    a1b2:	789b      	ldrb	r3, [r3, #2]
    a1b4:	b2da      	uxtb	r2, r3
    a1b6:	78fb      	ldrb	r3, [r7, #3]
    a1b8:	4013      	ands	r3, r2
    a1ba:	b2db      	uxtb	r3, r3
    a1bc:	2b00      	cmp	r3, #0
    a1be:	bf14      	ite	ne
    a1c0:	2301      	movne	r3, #1
    a1c2:	2300      	moveq	r3, #0
    a1c4:	b2db      	uxtb	r3, r3
}
    a1c6:	4618      	mov	r0, r3
    a1c8:	370c      	adds	r7, #12
    a1ca:	46bd      	mov	sp, r7
    a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1d0:	4770      	bx	lr

0000a1d2 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    a1d2:	b480      	push	{r7}
    a1d4:	b085      	sub	sp, #20
    a1d6:	af00      	add	r7, sp, #0
    a1d8:	6078      	str	r0, [r7, #4]
    a1da:	460b      	mov	r3, r1
    a1dc:	70fb      	strb	r3, [r7, #3]
    a1de:	4613      	mov	r3, r2
    a1e0:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a1e2:	78fb      	ldrb	r3, [r7, #3]
    a1e4:	687a      	ldr	r2, [r7, #4]
    a1e6:	3308      	adds	r3, #8
    a1e8:	015b      	lsls	r3, r3, #5
    a1ea:	4413      	add	r3, r2
    a1ec:	3307      	adds	r3, #7
    a1ee:	781b      	ldrb	r3, [r3, #0]
    a1f0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a1f2:	7bfa      	ldrb	r2, [r7, #15]
    a1f4:	78bb      	ldrb	r3, [r7, #2]
    a1f6:	4013      	ands	r3, r2
    a1f8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a1fa:	7bfb      	ldrb	r3, [r7, #15]
}
    a1fc:	4618      	mov	r0, r3
    a1fe:	3714      	adds	r7, #20
    a200:	46bd      	mov	sp, r7
    a202:	f85d 7b04 	ldr.w	r7, [sp], #4
    a206:	4770      	bx	lr

0000a208 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    a208:	b480      	push	{r7}
    a20a:	b083      	sub	sp, #12
    a20c:	af00      	add	r7, sp, #0
    a20e:	6078      	str	r0, [r7, #4]
    a210:	460b      	mov	r3, r1
    a212:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a214:	78fb      	ldrb	r3, [r7, #3]
    a216:	687a      	ldr	r2, [r7, #4]
    a218:	3308      	adds	r3, #8
    a21a:	015b      	lsls	r3, r3, #5
    a21c:	4413      	add	r3, r2
    a21e:	3307      	adds	r3, #7
    a220:	781b      	ldrb	r3, [r3, #0]
    a222:	b2db      	uxtb	r3, r3
}
    a224:	4618      	mov	r0, r3
    a226:	370c      	adds	r7, #12
    a228:	46bd      	mov	sp, r7
    a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a22e:	4770      	bx	lr

0000a230 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    a230:	b480      	push	{r7}
    a232:	b083      	sub	sp, #12
    a234:	af00      	add	r7, sp, #0
    a236:	6078      	str	r0, [r7, #4]
    a238:	460b      	mov	r3, r1
    a23a:	70fb      	strb	r3, [r7, #3]
    a23c:	4613      	mov	r3, r2
    a23e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a240:	78fb      	ldrb	r3, [r7, #3]
    a242:	687a      	ldr	r2, [r7, #4]
    a244:	3308      	adds	r3, #8
    a246:	015b      	lsls	r3, r3, #5
    a248:	4413      	add	r3, r2
    a24a:	3307      	adds	r3, #7
    a24c:	78ba      	ldrb	r2, [r7, #2]
    a24e:	701a      	strb	r2, [r3, #0]
}
    a250:	bf00      	nop
    a252:	370c      	adds	r7, #12
    a254:	46bd      	mov	sp, r7
    a256:	f85d 7b04 	ldr.w	r7, [sp], #4
    a25a:	4770      	bx	lr

0000a25c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    a25c:	b480      	push	{r7}
    a25e:	b083      	sub	sp, #12
    a260:	af00      	add	r7, sp, #0
    a262:	6078      	str	r0, [r7, #4]
    a264:	460b      	mov	r3, r1
    a266:	70fb      	strb	r3, [r7, #3]
    a268:	4613      	mov	r3, r2
    a26a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a26c:	78fb      	ldrb	r3, [r7, #3]
    a26e:	687a      	ldr	r2, [r7, #4]
    a270:	3308      	adds	r3, #8
    a272:	015b      	lsls	r3, r3, #5
    a274:	4413      	add	r3, r2
    a276:	3305      	adds	r3, #5
    a278:	78ba      	ldrb	r2, [r7, #2]
    a27a:	701a      	strb	r2, [r3, #0]
}
    a27c:	bf00      	nop
    a27e:	370c      	adds	r7, #12
    a280:	46bd      	mov	sp, r7
    a282:	f85d 7b04 	ldr.w	r7, [sp], #4
    a286:	4770      	bx	lr

0000a288 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    a288:	b480      	push	{r7}
    a28a:	b083      	sub	sp, #12
    a28c:	af00      	add	r7, sp, #0
    a28e:	6078      	str	r0, [r7, #4]
    a290:	460b      	mov	r3, r1
    a292:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a294:	78fb      	ldrb	r3, [r7, #3]
    a296:	687a      	ldr	r2, [r7, #4]
    a298:	3308      	adds	r3, #8
    a29a:	015b      	lsls	r3, r3, #5
    a29c:	4413      	add	r3, r2
    a29e:	3306      	adds	r3, #6
    a2a0:	781b      	ldrb	r3, [r3, #0]
    a2a2:	b2db      	uxtb	r3, r3
}
    a2a4:	4618      	mov	r0, r3
    a2a6:	370c      	adds	r7, #12
    a2a8:	46bd      	mov	sp, r7
    a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2ae:	4770      	bx	lr

0000a2b0 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    a2b0:	b480      	push	{r7}
    a2b2:	b083      	sub	sp, #12
    a2b4:	af00      	add	r7, sp, #0
    a2b6:	6078      	str	r0, [r7, #4]
    a2b8:	460b      	mov	r3, r1
    a2ba:	70fb      	strb	r3, [r7, #3]
    a2bc:	4613      	mov	r3, r2
    a2be:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a2c0:	78fb      	ldrb	r3, [r7, #3]
    a2c2:	687a      	ldr	r2, [r7, #4]
    a2c4:	3308      	adds	r3, #8
    a2c6:	015b      	lsls	r3, r3, #5
    a2c8:	4413      	add	r3, r2
    a2ca:	3304      	adds	r3, #4
    a2cc:	78ba      	ldrb	r2, [r7, #2]
    a2ce:	701a      	strb	r2, [r3, #0]
}
    a2d0:	bf00      	nop
    a2d2:	370c      	adds	r7, #12
    a2d4:	46bd      	mov	sp, r7
    a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2da:	4770      	bx	lr

0000a2dc <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    a2dc:	b480      	push	{r7}
    a2de:	b083      	sub	sp, #12
    a2e0:	af00      	add	r7, sp, #0
    a2e2:	6078      	str	r0, [r7, #4]
    a2e4:	460b      	mov	r3, r1
    a2e6:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    a2e8:	78fb      	ldrb	r3, [r7, #3]
    a2ea:	687a      	ldr	r2, [r7, #4]
    a2ec:	015b      	lsls	r3, r3, #5
    a2ee:	4413      	add	r3, r2
    a2f0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a2f4:	2210      	movs	r2, #16
    a2f6:	701a      	strb	r2, [r3, #0]
}
    a2f8:	bf00      	nop
    a2fa:	370c      	adds	r7, #12
    a2fc:	46bd      	mov	sp, r7
    a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a302:	4770      	bx	lr

0000a304 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    a304:	b480      	push	{r7}
    a306:	b083      	sub	sp, #12
    a308:	af00      	add	r7, sp, #0
    a30a:	6078      	str	r0, [r7, #4]
    a30c:	460b      	mov	r3, r1
    a30e:	70fb      	strb	r3, [r7, #3]
    a310:	4613      	mov	r3, r2
    a312:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a314:	78fb      	ldrb	r3, [r7, #3]
    a316:	687a      	ldr	r2, [r7, #4]
    a318:	015b      	lsls	r3, r3, #5
    a31a:	4413      	add	r3, r2
    a31c:	f203 1309 	addw	r3, r3, #265	; 0x109
    a320:	78ba      	ldrb	r2, [r7, #2]
    a322:	701a      	strb	r2, [r3, #0]
}
    a324:	bf00      	nop
    a326:	370c      	adds	r7, #12
    a328:	46bd      	mov	sp, r7
    a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a32e:	4770      	bx	lr

0000a330 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    a330:	b480      	push	{r7}
    a332:	b083      	sub	sp, #12
    a334:	af00      	add	r7, sp, #0
    a336:	6078      	str	r0, [r7, #4]
    a338:	460b      	mov	r3, r1
    a33a:	70fb      	strb	r3, [r7, #3]
    a33c:	4613      	mov	r3, r2
    a33e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a340:	78fb      	ldrb	r3, [r7, #3]
    a342:	687a      	ldr	r2, [r7, #4]
    a344:	015b      	lsls	r3, r3, #5
    a346:	4413      	add	r3, r2
    a348:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a34c:	78ba      	ldrb	r2, [r7, #2]
    a34e:	701a      	strb	r2, [r3, #0]
}
    a350:	bf00      	nop
    a352:	370c      	adds	r7, #12
    a354:	46bd      	mov	sp, r7
    a356:	f85d 7b04 	ldr.w	r7, [sp], #4
    a35a:	4770      	bx	lr

0000a35c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a35c:	b480      	push	{r7}
    a35e:	b085      	sub	sp, #20
    a360:	af00      	add	r7, sp, #0
    a362:	6078      	str	r0, [r7, #4]
    a364:	460b      	mov	r3, r1
    a366:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a368:	78fb      	ldrb	r3, [r7, #3]
    a36a:	687a      	ldr	r2, [r7, #4]
    a36c:	3308      	adds	r3, #8
    a36e:	015b      	lsls	r3, r3, #5
    a370:	4413      	add	r3, r2
    a372:	781b      	ldrb	r3, [r3, #0]
    a374:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    a376:	7bfb      	ldrb	r3, [r7, #15]
    a378:	f003 0307 	and.w	r3, r3, #7
    a37c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a37e:	7bfb      	ldrb	r3, [r7, #15]
}
    a380:	4618      	mov	r0, r3
    a382:	3714      	adds	r7, #20
    a384:	46bd      	mov	sp, r7
    a386:	f85d 7b04 	ldr.w	r7, [sp], #4
    a38a:	4770      	bx	lr

0000a38c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a38c:	b480      	push	{r7}
    a38e:	b085      	sub	sp, #20
    a390:	af00      	add	r7, sp, #0
    a392:	6078      	str	r0, [r7, #4]
    a394:	460b      	mov	r3, r1
    a396:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a398:	78fb      	ldrb	r3, [r7, #3]
    a39a:	687a      	ldr	r2, [r7, #4]
    a39c:	3308      	adds	r3, #8
    a39e:	015b      	lsls	r3, r3, #5
    a3a0:	4413      	add	r3, r2
    a3a2:	781b      	ldrb	r3, [r3, #0]
    a3a4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    a3a6:	7bfb      	ldrb	r3, [r7, #15]
    a3a8:	091b      	lsrs	r3, r3, #4
    a3aa:	b2db      	uxtb	r3, r3
    a3ac:	f003 0307 	and.w	r3, r3, #7
    a3b0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a3b2:	7bfb      	ldrb	r3, [r7, #15]
}
    a3b4:	4618      	mov	r0, r3
    a3b6:	3714      	adds	r7, #20
    a3b8:	46bd      	mov	sp, r7
    a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3be:	4770      	bx	lr

0000a3c0 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    a3c0:	b480      	push	{r7}
    a3c2:	b083      	sub	sp, #12
    a3c4:	af00      	add	r7, sp, #0
    a3c6:	6078      	str	r0, [r7, #4]
    a3c8:	460b      	mov	r3, r1
    a3ca:	70fb      	strb	r3, [r7, #3]
    a3cc:	4613      	mov	r3, r2
    a3ce:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a3d0:	78fb      	ldrb	r3, [r7, #3]
    a3d2:	687a      	ldr	r2, [r7, #4]
    a3d4:	3308      	adds	r3, #8
    a3d6:	015b      	lsls	r3, r3, #5
    a3d8:	4413      	add	r3, r2
    a3da:	78ba      	ldrb	r2, [r7, #2]
    a3dc:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    a3de:	bf00      	nop
    a3e0:	370c      	adds	r7, #12
    a3e2:	46bd      	mov	sp, r7
    a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3e8:	4770      	bx	lr

0000a3ea <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    a3ea:	b480      	push	{r7}
    a3ec:	b083      	sub	sp, #12
    a3ee:	af00      	add	r7, sp, #0
    a3f0:	6078      	str	r0, [r7, #4]
    a3f2:	460b      	mov	r3, r1
    a3f4:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a3f6:	78fb      	ldrb	r3, [r7, #3]
    a3f8:	687a      	ldr	r2, [r7, #4]
    a3fa:	3308      	adds	r3, #8
    a3fc:	015b      	lsls	r3, r3, #5
    a3fe:	4413      	add	r3, r2
    a400:	781b      	ldrb	r3, [r3, #0]
    a402:	b2db      	uxtb	r3, r3
}
    a404:	4618      	mov	r0, r3
    a406:	370c      	adds	r7, #12
    a408:	46bd      	mov	sp, r7
    a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a40e:	4770      	bx	lr

0000a410 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    a410:	b480      	push	{r7}
    a412:	b083      	sub	sp, #12
    a414:	af00      	add	r7, sp, #0
    a416:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	8b9b      	ldrh	r3, [r3, #28]
    a41c:	b29b      	uxth	r3, r3
}
    a41e:	4618      	mov	r0, r3
    a420:	370c      	adds	r7, #12
    a422:	46bd      	mov	sp, r7
    a424:	f85d 7b04 	ldr.w	r7, [sp], #4
    a428:	4770      	bx	lr

0000a42a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    a42a:	b480      	push	{r7}
    a42c:	b083      	sub	sp, #12
    a42e:	af00      	add	r7, sp, #0
    a430:	6078      	str	r0, [r7, #4]
    a432:	460b      	mov	r3, r1
    a434:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a436:	687b      	ldr	r3, [r7, #4]
    a438:	887a      	ldrh	r2, [r7, #2]
    a43a:	839a      	strh	r2, [r3, #28]
}
    a43c:	bf00      	nop
    a43e:	370c      	adds	r7, #12
    a440:	46bd      	mov	sp, r7
    a442:	f85d 7b04 	ldr.w	r7, [sp], #4
    a446:	4770      	bx	lr

0000a448 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a448:	b480      	push	{r7}
    a44a:	b083      	sub	sp, #12
    a44c:	af00      	add	r7, sp, #0
    a44e:	6078      	str	r0, [r7, #4]
    a450:	460b      	mov	r3, r1
    a452:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a454:	687b      	ldr	r3, [r7, #4]
    a456:	887a      	ldrh	r2, [r7, #2]
    a458:	831a      	strh	r2, [r3, #24]
}
    a45a:	bf00      	nop
    a45c:	370c      	adds	r7, #12
    a45e:	46bd      	mov	sp, r7
    a460:	f85d 7b04 	ldr.w	r7, [sp], #4
    a464:	4770      	bx	lr

0000a466 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    a466:	b480      	push	{r7}
    a468:	b083      	sub	sp, #12
    a46a:	af00      	add	r7, sp, #0
    a46c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	8b1b      	ldrh	r3, [r3, #24]
    a472:	b29b      	uxth	r3, r3
}
    a474:	4618      	mov	r0, r3
    a476:	370c      	adds	r7, #12
    a478:	46bd      	mov	sp, r7
    a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a47e:	4770      	bx	lr

0000a480 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a480:	b480      	push	{r7}
    a482:	b083      	sub	sp, #12
    a484:	af00      	add	r7, sp, #0
    a486:	6078      	str	r0, [r7, #4]
    a488:	460b      	mov	r3, r1
    a48a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a48c:	687b      	ldr	r3, [r7, #4]
    a48e:	887a      	ldrh	r2, [r7, #2]
    a490:	829a      	strh	r2, [r3, #20]
}
    a492:	bf00      	nop
    a494:	370c      	adds	r7, #12
    a496:	46bd      	mov	sp, r7
    a498:	f85d 7b04 	ldr.w	r7, [sp], #4
    a49c:	4770      	bx	lr

0000a49e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    a49e:	b480      	push	{r7}
    a4a0:	b085      	sub	sp, #20
    a4a2:	af00      	add	r7, sp, #0
    a4a4:	6078      	str	r0, [r7, #4]
    a4a6:	460b      	mov	r3, r1
    a4a8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	789b      	ldrb	r3, [r3, #2]
    a4ae:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a4b0:	7bfa      	ldrb	r2, [r7, #15]
    a4b2:	78fb      	ldrb	r3, [r7, #3]
    a4b4:	4013      	ands	r3, r2
    a4b6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
    a4ba:	4618      	mov	r0, r3
    a4bc:	3714      	adds	r7, #20
    a4be:	46bd      	mov	sp, r7
    a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4c4:	4770      	bx	lr
	...

0000a4c8 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a4c8:	b580      	push	{r7, lr}
    a4ca:	b082      	sub	sp, #8
    a4cc:	af00      	add	r7, sp, #0
    a4ce:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a4d0:	687b      	ldr	r3, [r7, #4]
    a4d2:	781b      	ldrb	r3, [r3, #0]
    a4d4:	b2db      	uxtb	r3, r3
    a4d6:	f023 0302 	bic.w	r3, r3, #2
    a4da:	b2da      	uxtb	r2, r3
    a4dc:	687b      	ldr	r3, [r7, #4]
    a4de:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    a4e0:	2103      	movs	r1, #3
    a4e2:	6878      	ldr	r0, [r7, #4]
    a4e4:	4b02      	ldr	r3, [pc, #8]	; (a4f0 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    a4e6:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a4e8:	bf00      	nop
    a4ea:	3708      	adds	r7, #8
    a4ec:	46bd      	mov	sp, r7
    a4ee:	bd80      	pop	{r7, pc}
    a4f0:	0000a17b 	.word	0x0000a17b

0000a4f4 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    a4f4:	b580      	push	{r7, lr}
    a4f6:	b084      	sub	sp, #16
    a4f8:	af00      	add	r7, sp, #0
    a4fa:	6078      	str	r0, [r7, #4]
    a4fc:	460b      	mov	r3, r1
    a4fe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a500:	2103      	movs	r1, #3
    a502:	6878      	ldr	r0, [r7, #4]
    a504:	4b06      	ldr	r3, [pc, #24]	; (a520 <hri_usb_get_CTRLA_reg+0x2c>)
    a506:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a508:	687b      	ldr	r3, [r7, #4]
    a50a:	781b      	ldrb	r3, [r3, #0]
    a50c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a50e:	7bfa      	ldrb	r2, [r7, #15]
    a510:	78fb      	ldrb	r3, [r7, #3]
    a512:	4013      	ands	r3, r2
    a514:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a516:	7bfb      	ldrb	r3, [r7, #15]
}
    a518:	4618      	mov	r0, r3
    a51a:	3710      	adds	r7, #16
    a51c:	46bd      	mov	sp, r7
    a51e:	bd80      	pop	{r7, pc}
    a520:	0000a17b 	.word	0x0000a17b

0000a524 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    a524:	b580      	push	{r7, lr}
    a526:	b082      	sub	sp, #8
    a528:	af00      	add	r7, sp, #0
    a52a:	6078      	str	r0, [r7, #4]
    a52c:	460b      	mov	r3, r1
    a52e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a530:	687b      	ldr	r3, [r7, #4]
    a532:	78fa      	ldrb	r2, [r7, #3]
    a534:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a536:	2103      	movs	r1, #3
    a538:	6878      	ldr	r0, [r7, #4]
    a53a:	4b03      	ldr	r3, [pc, #12]	; (a548 <hri_usb_write_CTRLA_reg+0x24>)
    a53c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a53e:	bf00      	nop
    a540:	3708      	adds	r7, #8
    a542:	46bd      	mov	sp, r7
    a544:	bd80      	pop	{r7, pc}
    a546:	bf00      	nop
    a548:	0000a17b 	.word	0x0000a17b

0000a54c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    a54c:	b580      	push	{r7, lr}
    a54e:	b082      	sub	sp, #8
    a550:	af00      	add	r7, sp, #0
    a552:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a554:	2103      	movs	r1, #3
    a556:	6878      	ldr	r0, [r7, #4]
    a558:	4b04      	ldr	r3, [pc, #16]	; (a56c <hri_usb_read_CTRLA_reg+0x20>)
    a55a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a55c:	687b      	ldr	r3, [r7, #4]
    a55e:	781b      	ldrb	r3, [r3, #0]
    a560:	b2db      	uxtb	r3, r3
}
    a562:	4618      	mov	r0, r3
    a564:	3708      	adds	r7, #8
    a566:	46bd      	mov	sp, r7
    a568:	bd80      	pop	{r7, pc}
    a56a:	bf00      	nop
    a56c:	0000a17b 	.word	0x0000a17b

0000a570 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    a570:	b480      	push	{r7}
    a572:	b083      	sub	sp, #12
    a574:	af00      	add	r7, sp, #0
    a576:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a578:	687b      	ldr	r3, [r7, #4]
    a57a:	891b      	ldrh	r3, [r3, #8]
    a57c:	b29b      	uxth	r3, r3
    a57e:	f023 0301 	bic.w	r3, r3, #1
    a582:	b29a      	uxth	r2, r3
    a584:	687b      	ldr	r3, [r7, #4]
    a586:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a588:	bf00      	nop
    a58a:	370c      	adds	r7, #12
    a58c:	46bd      	mov	sp, r7
    a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a592:	4770      	bx	lr

0000a594 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    a594:	b480      	push	{r7}
    a596:	b083      	sub	sp, #12
    a598:	af00      	add	r7, sp, #0
    a59a:	6078      	str	r0, [r7, #4]
    a59c:	460b      	mov	r3, r1
    a59e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a5a0:	687b      	ldr	r3, [r7, #4]
    a5a2:	887a      	ldrh	r2, [r7, #2]
    a5a4:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a5a6:	bf00      	nop
    a5a8:	370c      	adds	r7, #12
    a5aa:	46bd      	mov	sp, r7
    a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5b0:	4770      	bx	lr

0000a5b2 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    a5b2:	b480      	push	{r7}
    a5b4:	b083      	sub	sp, #12
    a5b6:	af00      	add	r7, sp, #0
    a5b8:	6078      	str	r0, [r7, #4]
    a5ba:	460b      	mov	r3, r1
    a5bc:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a5be:	687b      	ldr	r3, [r7, #4]
    a5c0:	78fa      	ldrb	r2, [r7, #3]
    a5c2:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    a5c4:	bf00      	nop
    a5c6:	370c      	adds	r7, #12
    a5c8:	46bd      	mov	sp, r7
    a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5ce:	4770      	bx	lr

0000a5d0 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    a5d0:	b480      	push	{r7}
    a5d2:	b083      	sub	sp, #12
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	6078      	str	r0, [r7, #4]
    a5d8:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a5da:	687b      	ldr	r3, [r7, #4]
    a5dc:	683a      	ldr	r2, [r7, #0]
    a5de:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    a5e0:	bf00      	nop
    a5e2:	370c      	adds	r7, #12
    a5e4:	46bd      	mov	sp, r7
    a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5ea:	4770      	bx	lr

0000a5ec <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    a5ec:	b480      	push	{r7}
    a5ee:	b083      	sub	sp, #12
    a5f0:	af00      	add	r7, sp, #0
    a5f2:	6078      	str	r0, [r7, #4]
    a5f4:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    a5f6:	2300      	movs	r3, #0
}
    a5f8:	4618      	mov	r0, r3
    a5fa:	370c      	adds	r7, #12
    a5fc:	46bd      	mov	sp, r7
    a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a602:	4770      	bx	lr

0000a604 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    a604:	b480      	push	{r7}
    a606:	b085      	sub	sp, #20
    a608:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    a60a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a60e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a610:	4b28      	ldr	r3, [pc, #160]	; (a6b4 <_usb_load_calib+0xb0>)
    a612:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    a614:	f003 031f 	and.w	r3, r3, #31
    a618:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    a61a:	4b26      	ldr	r3, [pc, #152]	; (a6b4 <_usb_load_calib+0xb0>)
    a61c:	681b      	ldr	r3, [r3, #0]
    a61e:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    a620:	f003 031f 	and.w	r3, r3, #31
    a624:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a626:	4b23      	ldr	r3, [pc, #140]	; (a6b4 <_usb_load_calib+0xb0>)
    a628:	681b      	ldr	r3, [r3, #0]
    a62a:	0a9b      	lsrs	r3, r3, #10
    a62c:	f003 0307 	and.w	r3, r3, #7
    a630:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a632:	68fb      	ldr	r3, [r7, #12]
    a634:	2b00      	cmp	r3, #0
    a636:	d002      	beq.n	a63e <_usb_load_calib+0x3a>
    a638:	68fb      	ldr	r3, [r7, #12]
    a63a:	2b1f      	cmp	r3, #31
    a63c:	d101      	bne.n	a642 <_usb_load_calib+0x3e>
		pad_transn = 9;
    a63e:	2309      	movs	r3, #9
    a640:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a642:	68bb      	ldr	r3, [r7, #8]
    a644:	2b00      	cmp	r3, #0
    a646:	d002      	beq.n	a64e <_usb_load_calib+0x4a>
    a648:	68bb      	ldr	r3, [r7, #8]
    a64a:	2b1f      	cmp	r3, #31
    a64c:	d101      	bne.n	a652 <_usb_load_calib+0x4e>
		pad_transp = 25;
    a64e:	2319      	movs	r3, #25
    a650:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    a652:	687b      	ldr	r3, [r7, #4]
    a654:	2b00      	cmp	r3, #0
    a656:	d002      	beq.n	a65e <_usb_load_calib+0x5a>
    a658:	687b      	ldr	r3, [r7, #4]
    a65a:	2b07      	cmp	r3, #7
    a65c:	d101      	bne.n	a662 <_usb_load_calib+0x5e>
		pad_trim = 6;
    a65e:	2306      	movs	r3, #6
    a660:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a662:	68fb      	ldr	r3, [r7, #12]
    a664:	b29b      	uxth	r3, r3
    a666:	019b      	lsls	r3, r3, #6
    a668:	b29b      	uxth	r3, r3
    a66a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    a66e:	b29a      	uxth	r2, r3
    a670:	68bb      	ldr	r3, [r7, #8]
    a672:	b29b      	uxth	r3, r3
    a674:	f003 031f 	and.w	r3, r3, #31
    a678:	b29b      	uxth	r3, r3
    a67a:	4313      	orrs	r3, r2
    a67c:	b29a      	uxth	r2, r3
    a67e:	687b      	ldr	r3, [r7, #4]
    a680:	b29b      	uxth	r3, r3
    a682:	031b      	lsls	r3, r3, #12
    a684:	b29b      	uxth	r3, r3
    a686:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a68a:	b29b      	uxth	r3, r3
    a68c:	4313      	orrs	r3, r2
    a68e:	b29a      	uxth	r2, r3
    a690:	683b      	ldr	r3, [r7, #0]
    a692:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a694:	683a      	ldr	r2, [r7, #0]
    a696:	78d3      	ldrb	r3, [r2, #3]
    a698:	f043 0303 	orr.w	r3, r3, #3
    a69c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a69e:	683a      	ldr	r2, [r7, #0]
    a6a0:	78d3      	ldrb	r3, [r2, #3]
    a6a2:	f043 030c 	orr.w	r3, r3, #12
    a6a6:	70d3      	strb	r3, [r2, #3]
}
    a6a8:	bf00      	nop
    a6aa:	3714      	adds	r7, #20
    a6ac:	46bd      	mov	sp, r7
    a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6b2:	4770      	bx	lr
    a6b4:	00800084 	.word	0x00800084

0000a6b8 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    a6b8:	b580      	push	{r7, lr}
    a6ba:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    a6bc:	bf00      	nop
    a6be:	2203      	movs	r2, #3
    a6c0:	2100      	movs	r1, #0
    a6c2:	4804      	ldr	r0, [pc, #16]	; (a6d4 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    a6c4:	4b04      	ldr	r3, [pc, #16]	; (a6d8 <_usb_d_dev_wait_dpll_rdy+0x20>)
    a6c6:	4798      	blx	r3
    a6c8:	4603      	mov	r3, r0
    a6ca:	2b03      	cmp	r3, #3
    a6cc:	d1f7      	bne.n	a6be <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    a6ce:	bf00      	nop
    a6d0:	bd80      	pop	{r7, pc}
    a6d2:	bf00      	nop
    a6d4:	40001000 	.word	0x40001000
    a6d8:	0000a0ed 	.word	0x0000a0ed

0000a6dc <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    a6dc:	b580      	push	{r7, lr}
    a6de:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a6e0:	480e      	ldr	r0, [pc, #56]	; (a71c <_usb_d_dev_wait_dfll_rdy+0x40>)
    a6e2:	4b0f      	ldr	r3, [pc, #60]	; (a720 <_usb_d_dev_wait_dfll_rdy+0x44>)
    a6e4:	4798      	blx	r3
    a6e6:	4603      	mov	r3, r0
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d00a      	beq.n	a702 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a6ec:	bf00      	nop
    a6ee:	f44f 6110 	mov.w	r1, #2304	; 0x900
    a6f2:	480a      	ldr	r0, [pc, #40]	; (a71c <_usb_d_dev_wait_dfll_rdy+0x40>)
    a6f4:	4b0b      	ldr	r3, [pc, #44]	; (a724 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a6f6:	4798      	blx	r3
    a6f8:	4603      	mov	r3, r0
    a6fa:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a6fe:	d1f6      	bne.n	a6ee <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    a700:	e009      	b.n	a716 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a702:	bf00      	nop
    a704:	f44f 7180 	mov.w	r1, #256	; 0x100
    a708:	4804      	ldr	r0, [pc, #16]	; (a71c <_usb_d_dev_wait_dfll_rdy+0x40>)
    a70a:	4b06      	ldr	r3, [pc, #24]	; (a724 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a70c:	4798      	blx	r3
    a70e:	4603      	mov	r3, r0
    a710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a714:	d1f6      	bne.n	a704 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    a716:	bf00      	nop
    a718:	bd80      	pop	{r7, pc}
    a71a:	bf00      	nop
    a71c:	40001000 	.word	0x40001000
    a720:	0000a14b 	.word	0x0000a14b
    a724:	0000a125 	.word	0x0000a125

0000a728 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    a728:	b580      	push	{r7, lr}
    a72a:	b082      	sub	sp, #8
    a72c:	af00      	add	r7, sp, #0
    a72e:	4603      	mov	r3, r0
    a730:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    a732:	79fb      	ldrb	r3, [r7, #7]
    a734:	2b00      	cmp	r3, #0
    a736:	d102      	bne.n	a73e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    a738:	4b05      	ldr	r3, [pc, #20]	; (a750 <_usb_d_dev_wait_clk_rdy+0x28>)
    a73a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    a73c:	e004      	b.n	a748 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    a73e:	79fb      	ldrb	r3, [r7, #7]
    a740:	2b01      	cmp	r3, #1
    a742:	d101      	bne.n	a748 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    a744:	4b03      	ldr	r3, [pc, #12]	; (a754 <_usb_d_dev_wait_clk_rdy+0x2c>)
    a746:	4798      	blx	r3
}
    a748:	bf00      	nop
    a74a:	3708      	adds	r7, #8
    a74c:	46bd      	mov	sp, r7
    a74e:	bd80      	pop	{r7, pc}
    a750:	0000a6dd 	.word	0x0000a6dd
    a754:	0000a6b9 	.word	0x0000a6b9

0000a758 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    a758:	b580      	push	{r7, lr}
    a75a:	b082      	sub	sp, #8
    a75c:	af00      	add	r7, sp, #0
    a75e:	4603      	mov	r3, r0
    a760:	6039      	str	r1, [r7, #0]
    a762:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    a764:	683b      	ldr	r3, [r7, #0]
    a766:	b2da      	uxtb	r2, r3
    a768:	79fb      	ldrb	r3, [r7, #7]
    a76a:	4619      	mov	r1, r3
    a76c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a770:	4b02      	ldr	r3, [pc, #8]	; (a77c <_usbd_ep_int_ack+0x24>)
    a772:	4798      	blx	r3
}
    a774:	bf00      	nop
    a776:	3708      	adds	r7, #8
    a778:	46bd      	mov	sp, r7
    a77a:	bd80      	pop	{r7, pc}
    a77c:	0000a231 	.word	0x0000a231

0000a780 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    a780:	b580      	push	{r7, lr}
    a782:	b082      	sub	sp, #8
    a784:	af00      	add	r7, sp, #0
    a786:	4603      	mov	r3, r0
    a788:	6039      	str	r1, [r7, #0]
    a78a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    a78c:	683b      	ldr	r3, [r7, #0]
    a78e:	b2da      	uxtb	r2, r3
    a790:	79fb      	ldrb	r3, [r7, #7]
    a792:	4619      	mov	r1, r3
    a794:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a798:	4b02      	ldr	r3, [pc, #8]	; (a7a4 <_usbd_ep_int_en+0x24>)
    a79a:	4798      	blx	r3
}
    a79c:	bf00      	nop
    a79e:	3708      	adds	r7, #8
    a7a0:	46bd      	mov	sp, r7
    a7a2:	bd80      	pop	{r7, pc}
    a7a4:	0000a305 	.word	0x0000a305

0000a7a8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    a7a8:	b580      	push	{r7, lr}
    a7aa:	b082      	sub	sp, #8
    a7ac:	af00      	add	r7, sp, #0
    a7ae:	4603      	mov	r3, r0
    a7b0:	6039      	str	r1, [r7, #0]
    a7b2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    a7b4:	683b      	ldr	r3, [r7, #0]
    a7b6:	b2da      	uxtb	r2, r3
    a7b8:	79fb      	ldrb	r3, [r7, #7]
    a7ba:	4619      	mov	r1, r3
    a7bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7c0:	4b02      	ldr	r3, [pc, #8]	; (a7cc <_usbd_ep_int_dis+0x24>)
    a7c2:	4798      	blx	r3
}
    a7c4:	bf00      	nop
    a7c6:	3708      	adds	r7, #8
    a7c8:	46bd      	mov	sp, r7
    a7ca:	bd80      	pop	{r7, pc}
    a7cc:	0000a331 	.word	0x0000a331

0000a7d0 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    a7d0:	b580      	push	{r7, lr}
    a7d2:	b082      	sub	sp, #8
    a7d4:	af00      	add	r7, sp, #0
    a7d6:	4603      	mov	r3, r0
    a7d8:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    a7da:	79fb      	ldrb	r3, [r7, #7]
    a7dc:	4619      	mov	r1, r3
    a7de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7e2:	4b06      	ldr	r3, [pc, #24]	; (a7fc <_usbd_ep_is_ctrl+0x2c>)
    a7e4:	4798      	blx	r3
    a7e6:	4603      	mov	r3, r0
    a7e8:	2b11      	cmp	r3, #17
    a7ea:	bf0c      	ite	eq
    a7ec:	2301      	moveq	r3, #1
    a7ee:	2300      	movne	r3, #0
    a7f0:	b2db      	uxtb	r3, r3
}
    a7f2:	4618      	mov	r0, r3
    a7f4:	3708      	adds	r7, #8
    a7f6:	46bd      	mov	sp, r7
    a7f8:	bd80      	pop	{r7, pc}
    a7fa:	bf00      	nop
    a7fc:	0000a3eb 	.word	0x0000a3eb

0000a800 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    a800:	b580      	push	{r7, lr}
    a802:	b082      	sub	sp, #8
    a804:	af00      	add	r7, sp, #0
    a806:	4603      	mov	r3, r0
    a808:	71fb      	strb	r3, [r7, #7]
    a80a:	460b      	mov	r3, r1
    a80c:	71bb      	strb	r3, [r7, #6]
    a80e:	4613      	mov	r3, r2
    a810:	717b      	strb	r3, [r7, #5]
	if (st) {
    a812:	797b      	ldrb	r3, [r7, #5]
    a814:	2b00      	cmp	r3, #0
    a816:	d00b      	beq.n	a830 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a818:	79bb      	ldrb	r3, [r7, #6]
    a81a:	2210      	movs	r2, #16
    a81c:	fa02 f303 	lsl.w	r3, r2, r3
    a820:	b2da      	uxtb	r2, r3
    a822:	79fb      	ldrb	r3, [r7, #7]
    a824:	4619      	mov	r1, r3
    a826:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a82a:	4b09      	ldr	r3, [pc, #36]	; (a850 <_usbd_ep_set_stall+0x50>)
    a82c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    a82e:	e00a      	b.n	a846 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a830:	79bb      	ldrb	r3, [r7, #6]
    a832:	2210      	movs	r2, #16
    a834:	fa02 f303 	lsl.w	r3, r2, r3
    a838:	b2da      	uxtb	r2, r3
    a83a:	79fb      	ldrb	r3, [r7, #7]
    a83c:	4619      	mov	r1, r3
    a83e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a842:	4b04      	ldr	r3, [pc, #16]	; (a854 <_usbd_ep_set_stall+0x54>)
    a844:	4798      	blx	r3
}
    a846:	bf00      	nop
    a848:	3708      	adds	r7, #8
    a84a:	46bd      	mov	sp, r7
    a84c:	bd80      	pop	{r7, pc}
    a84e:	bf00      	nop
    a850:	0000a25d 	.word	0x0000a25d
    a854:	0000a2b1 	.word	0x0000a2b1

0000a858 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    a858:	b580      	push	{r7, lr}
    a85a:	b084      	sub	sp, #16
    a85c:	af00      	add	r7, sp, #0
    a85e:	4603      	mov	r3, r0
    a860:	460a      	mov	r2, r1
    a862:	71fb      	strb	r3, [r7, #7]
    a864:	4613      	mov	r3, r2
    a866:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a868:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a86c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a86e:	79fb      	ldrb	r3, [r7, #7]
    a870:	4619      	mov	r1, r3
    a872:	68f8      	ldr	r0, [r7, #12]
    a874:	4b08      	ldr	r3, [pc, #32]	; (a898 <_usbd_ep_is_stalled+0x40>)
    a876:	4798      	blx	r3
    a878:	4603      	mov	r3, r0
    a87a:	4619      	mov	r1, r3
    a87c:	79bb      	ldrb	r3, [r7, #6]
    a87e:	2210      	movs	r2, #16
    a880:	fa02 f303 	lsl.w	r3, r2, r3
    a884:	400b      	ands	r3, r1
    a886:	2b00      	cmp	r3, #0
    a888:	bf14      	ite	ne
    a88a:	2301      	movne	r3, #1
    a88c:	2300      	moveq	r3, #0
    a88e:	b2db      	uxtb	r3, r3
}
    a890:	4618      	mov	r0, r3
    a892:	3710      	adds	r7, #16
    a894:	46bd      	mov	sp, r7
    a896:	bd80      	pop	{r7, pc}
    a898:	0000a289 	.word	0x0000a289

0000a89c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    a89c:	b580      	push	{r7, lr}
    a89e:	b084      	sub	sp, #16
    a8a0:	af00      	add	r7, sp, #0
    a8a2:	4603      	mov	r3, r0
    a8a4:	460a      	mov	r2, r1
    a8a6:	71fb      	strb	r3, [r7, #7]
    a8a8:	4613      	mov	r3, r2
    a8aa:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a8ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a8b0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a8b2:	79fb      	ldrb	r3, [r7, #7]
    a8b4:	4619      	mov	r1, r3
    a8b6:	68f8      	ldr	r0, [r7, #12]
    a8b8:	4b08      	ldr	r3, [pc, #32]	; (a8dc <_usbd_ep_is_stall_sent+0x40>)
    a8ba:	4798      	blx	r3
    a8bc:	4603      	mov	r3, r0
    a8be:	4619      	mov	r1, r3
    a8c0:	79bb      	ldrb	r3, [r7, #6]
    a8c2:	2220      	movs	r2, #32
    a8c4:	fa02 f303 	lsl.w	r3, r2, r3
    a8c8:	400b      	ands	r3, r1
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	bf14      	ite	ne
    a8ce:	2301      	movne	r3, #1
    a8d0:	2300      	moveq	r3, #0
    a8d2:	b2db      	uxtb	r3, r3
}
    a8d4:	4618      	mov	r0, r3
    a8d6:	3710      	adds	r7, #16
    a8d8:	46bd      	mov	sp, r7
    a8da:	bd80      	pop	{r7, pc}
    a8dc:	0000a209 	.word	0x0000a209

0000a8e0 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    a8e0:	b580      	push	{r7, lr}
    a8e2:	b082      	sub	sp, #8
    a8e4:	af00      	add	r7, sp, #0
    a8e6:	4603      	mov	r3, r0
    a8e8:	460a      	mov	r2, r1
    a8ea:	71fb      	strb	r3, [r7, #7]
    a8ec:	4613      	mov	r3, r2
    a8ee:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a8f0:	79bb      	ldrb	r3, [r7, #6]
    a8f2:	2220      	movs	r2, #32
    a8f4:	409a      	lsls	r2, r3
    a8f6:	79fb      	ldrb	r3, [r7, #7]
    a8f8:	4611      	mov	r1, r2
    a8fa:	4618      	mov	r0, r3
    a8fc:	4b02      	ldr	r3, [pc, #8]	; (a908 <_usbd_ep_ack_stall+0x28>)
    a8fe:	4798      	blx	r3
}
    a900:	bf00      	nop
    a902:	3708      	adds	r7, #8
    a904:	46bd      	mov	sp, r7
    a906:	bd80      	pop	{r7, pc}
    a908:	0000a759 	.word	0x0000a759

0000a90c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    a90c:	b580      	push	{r7, lr}
    a90e:	b082      	sub	sp, #8
    a910:	af00      	add	r7, sp, #0
    a912:	4603      	mov	r3, r0
    a914:	71fb      	strb	r3, [r7, #7]
    a916:	460b      	mov	r3, r1
    a918:	71bb      	strb	r3, [r7, #6]
    a91a:	4613      	mov	r3, r2
    a91c:	717b      	strb	r3, [r7, #5]
	if (en) {
    a91e:	797b      	ldrb	r3, [r7, #5]
    a920:	2b00      	cmp	r3, #0
    a922:	d008      	beq.n	a936 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    a924:	79bb      	ldrb	r3, [r7, #6]
    a926:	2220      	movs	r2, #32
    a928:	409a      	lsls	r2, r3
    a92a:	79fb      	ldrb	r3, [r7, #7]
    a92c:	4611      	mov	r1, r2
    a92e:	4618      	mov	r0, r3
    a930:	4b07      	ldr	r3, [pc, #28]	; (a950 <_usbd_ep_int_stall_en+0x44>)
    a932:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    a934:	e007      	b.n	a946 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    a936:	79bb      	ldrb	r3, [r7, #6]
    a938:	2220      	movs	r2, #32
    a93a:	409a      	lsls	r2, r3
    a93c:	79fb      	ldrb	r3, [r7, #7]
    a93e:	4611      	mov	r1, r2
    a940:	4618      	mov	r0, r3
    a942:	4b04      	ldr	r3, [pc, #16]	; (a954 <_usbd_ep_int_stall_en+0x48>)
    a944:	4798      	blx	r3
}
    a946:	bf00      	nop
    a948:	3708      	adds	r7, #8
    a94a:	46bd      	mov	sp, r7
    a94c:	bd80      	pop	{r7, pc}
    a94e:	bf00      	nop
    a950:	0000a781 	.word	0x0000a781
    a954:	0000a7a9 	.word	0x0000a7a9

0000a958 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    a958:	b580      	push	{r7, lr}
    a95a:	b082      	sub	sp, #8
    a95c:	af00      	add	r7, sp, #0
    a95e:	4603      	mov	r3, r0
    a960:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    a962:	79fb      	ldrb	r3, [r7, #7]
    a964:	4619      	mov	r1, r3
    a966:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a96a:	4b03      	ldr	r3, [pc, #12]	; (a978 <_usbd_ep_stop_setup+0x20>)
    a96c:	4798      	blx	r3
}
    a96e:	bf00      	nop
    a970:	3708      	adds	r7, #8
    a972:	46bd      	mov	sp, r7
    a974:	bd80      	pop	{r7, pc}
    a976:	bf00      	nop
    a978:	0000a2dd 	.word	0x0000a2dd

0000a97c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    a97c:	b580      	push	{r7, lr}
    a97e:	b082      	sub	sp, #8
    a980:	af00      	add	r7, sp, #0
    a982:	4603      	mov	r3, r0
    a984:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a986:	79fb      	ldrb	r3, [r7, #7]
    a988:	2210      	movs	r2, #16
    a98a:	4619      	mov	r1, r3
    a98c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a990:	4b05      	ldr	r3, [pc, #20]	; (a9a8 <_usbd_ep_is_setup+0x2c>)
    a992:	4798      	blx	r3
    a994:	4603      	mov	r3, r0
    a996:	2b00      	cmp	r3, #0
    a998:	bf14      	ite	ne
    a99a:	2301      	movne	r3, #1
    a99c:	2300      	moveq	r3, #0
    a99e:	b2db      	uxtb	r3, r3
}
    a9a0:	4618      	mov	r0, r3
    a9a2:	3708      	adds	r7, #8
    a9a4:	46bd      	mov	sp, r7
    a9a6:	bd80      	pop	{r7, pc}
    a9a8:	0000a1d3 	.word	0x0000a1d3

0000a9ac <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    a9ac:	b580      	push	{r7, lr}
    a9ae:	b082      	sub	sp, #8
    a9b0:	af00      	add	r7, sp, #0
    a9b2:	4603      	mov	r3, r0
    a9b4:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a9b6:	79fb      	ldrb	r3, [r7, #7]
    a9b8:	2110      	movs	r1, #16
    a9ba:	4618      	mov	r0, r3
    a9bc:	4b02      	ldr	r3, [pc, #8]	; (a9c8 <_usbd_ep_ack_setup+0x1c>)
    a9be:	4798      	blx	r3
}
    a9c0:	bf00      	nop
    a9c2:	3708      	adds	r7, #8
    a9c4:	46bd      	mov	sp, r7
    a9c6:	bd80      	pop	{r7, pc}
    a9c8:	0000a759 	.word	0x0000a759

0000a9cc <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    a9cc:	b580      	push	{r7, lr}
    a9ce:	b082      	sub	sp, #8
    a9d0:	af00      	add	r7, sp, #0
    a9d2:	4603      	mov	r3, r0
    a9d4:	71fb      	strb	r3, [r7, #7]
    a9d6:	460b      	mov	r3, r1
    a9d8:	71bb      	strb	r3, [r7, #6]
    a9da:	4613      	mov	r3, r2
    a9dc:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    a9de:	797b      	ldrb	r3, [r7, #5]
    a9e0:	2b00      	cmp	r3, #0
    a9e2:	d00b      	beq.n	a9fc <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a9e4:	79bb      	ldrb	r3, [r7, #6]
    a9e6:	2201      	movs	r2, #1
    a9e8:	fa02 f303 	lsl.w	r3, r2, r3
    a9ec:	b2da      	uxtb	r2, r3
    a9ee:	79fb      	ldrb	r3, [r7, #7]
    a9f0:	4619      	mov	r1, r3
    a9f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9f6:	4b09      	ldr	r3, [pc, #36]	; (aa1c <_usbd_ep_set_toggle+0x50>)
    a9f8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    a9fa:	e00a      	b.n	aa12 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a9fc:	79bb      	ldrb	r3, [r7, #6]
    a9fe:	2201      	movs	r2, #1
    aa00:	fa02 f303 	lsl.w	r3, r2, r3
    aa04:	b2da      	uxtb	r2, r3
    aa06:	79fb      	ldrb	r3, [r7, #7]
    aa08:	4619      	mov	r1, r3
    aa0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa0e:	4b04      	ldr	r3, [pc, #16]	; (aa20 <_usbd_ep_set_toggle+0x54>)
    aa10:	4798      	blx	r3
}
    aa12:	bf00      	nop
    aa14:	3708      	adds	r7, #8
    aa16:	46bd      	mov	sp, r7
    aa18:	bd80      	pop	{r7, pc}
    aa1a:	bf00      	nop
    aa1c:	0000a25d 	.word	0x0000a25d
    aa20:	0000a2b1 	.word	0x0000a2b1

0000aa24 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    aa24:	b580      	push	{r7, lr}
    aa26:	b082      	sub	sp, #8
    aa28:	af00      	add	r7, sp, #0
    aa2a:	4603      	mov	r3, r0
    aa2c:	460a      	mov	r2, r1
    aa2e:	71fb      	strb	r3, [r7, #7]
    aa30:	4613      	mov	r3, r2
    aa32:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    aa34:	79bb      	ldrb	r3, [r7, #6]
    aa36:	2201      	movs	r2, #1
    aa38:	409a      	lsls	r2, r3
    aa3a:	79fb      	ldrb	r3, [r7, #7]
    aa3c:	4611      	mov	r1, r2
    aa3e:	4618      	mov	r0, r3
    aa40:	4b02      	ldr	r3, [pc, #8]	; (aa4c <_usbd_ep_ack_io_cpt+0x28>)
    aa42:	4798      	blx	r3
}
    aa44:	bf00      	nop
    aa46:	3708      	adds	r7, #8
    aa48:	46bd      	mov	sp, r7
    aa4a:	bd80      	pop	{r7, pc}
    aa4c:	0000a759 	.word	0x0000a759

0000aa50 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    aa50:	b480      	push	{r7}
    aa52:	b085      	sub	sp, #20
    aa54:	af00      	add	r7, sp, #0
    aa56:	4603      	mov	r3, r0
    aa58:	603a      	str	r2, [r7, #0]
    aa5a:	71fb      	strb	r3, [r7, #7]
    aa5c:	460b      	mov	r3, r1
    aa5e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    aa60:	79fa      	ldrb	r2, [r7, #7]
    aa62:	79bb      	ldrb	r3, [r7, #6]
    aa64:	0052      	lsls	r2, r2, #1
    aa66:	4413      	add	r3, r2
    aa68:	011b      	lsls	r3, r3, #4
    aa6a:	4a06      	ldr	r2, [pc, #24]	; (aa84 <_usbd_ep_set_buf+0x34>)
    aa6c:	4413      	add	r3, r2
    aa6e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    aa70:	68fb      	ldr	r3, [r7, #12]
    aa72:	683a      	ldr	r2, [r7, #0]
    aa74:	601a      	str	r2, [r3, #0]
}
    aa76:	bf00      	nop
    aa78:	3714      	adds	r7, #20
    aa7a:	46bd      	mov	sp, r7
    aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa80:	4770      	bx	lr
    aa82:	bf00      	nop
    aa84:	20002058 	.word	0x20002058

0000aa88 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    aa88:	b480      	push	{r7}
    aa8a:	b085      	sub	sp, #20
    aa8c:	af00      	add	r7, sp, #0
    aa8e:	4603      	mov	r3, r0
    aa90:	71fb      	strb	r3, [r7, #7]
    aa92:	460b      	mov	r3, r1
    aa94:	71bb      	strb	r3, [r7, #6]
    aa96:	4613      	mov	r3, r2
    aa98:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    aa9a:	79fa      	ldrb	r2, [r7, #7]
    aa9c:	79bb      	ldrb	r3, [r7, #6]
    aa9e:	0052      	lsls	r2, r2, #1
    aaa0:	4413      	add	r3, r2
    aaa2:	011b      	lsls	r3, r3, #4
    aaa4:	4a08      	ldr	r2, [pc, #32]	; (aac8 <_usbd_ep_set_in_count+0x40>)
    aaa6:	4413      	add	r3, r2
    aaa8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    aaaa:	88bb      	ldrh	r3, [r7, #4]
    aaac:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aab0:	b299      	uxth	r1, r3
    aab2:	68fa      	ldr	r2, [r7, #12]
    aab4:	6853      	ldr	r3, [r2, #4]
    aab6:	f361 339b 	bfi	r3, r1, #14, #14
    aaba:	6053      	str	r3, [r2, #4]
}
    aabc:	bf00      	nop
    aabe:	3714      	adds	r7, #20
    aac0:	46bd      	mov	sp, r7
    aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aac6:	4770      	bx	lr
    aac8:	20002058 	.word	0x20002058

0000aacc <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    aacc:	b480      	push	{r7}
    aace:	b085      	sub	sp, #20
    aad0:	af00      	add	r7, sp, #0
    aad2:	4603      	mov	r3, r0
    aad4:	71fb      	strb	r3, [r7, #7]
    aad6:	460b      	mov	r3, r1
    aad8:	71bb      	strb	r3, [r7, #6]
    aada:	4613      	mov	r3, r2
    aadc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    aade:	79fa      	ldrb	r2, [r7, #7]
    aae0:	79bb      	ldrb	r3, [r7, #6]
    aae2:	0052      	lsls	r2, r2, #1
    aae4:	4413      	add	r3, r2
    aae6:	011b      	lsls	r3, r3, #4
    aae8:	4a08      	ldr	r2, [pc, #32]	; (ab0c <_usbd_ep_set_in_size+0x40>)
    aaea:	4413      	add	r3, r2
    aaec:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    aaee:	88bb      	ldrh	r3, [r7, #4]
    aaf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aaf4:	b299      	uxth	r1, r3
    aaf6:	68fa      	ldr	r2, [r7, #12]
    aaf8:	6853      	ldr	r3, [r2, #4]
    aafa:	f361 030d 	bfi	r3, r1, #0, #14
    aafe:	6053      	str	r3, [r2, #4]
}
    ab00:	bf00      	nop
    ab02:	3714      	adds	r7, #20
    ab04:	46bd      	mov	sp, r7
    ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab0a:	4770      	bx	lr
    ab0c:	20002058 	.word	0x20002058

0000ab10 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    ab10:	b480      	push	{r7}
    ab12:	b085      	sub	sp, #20
    ab14:	af00      	add	r7, sp, #0
    ab16:	4603      	mov	r3, r0
    ab18:	71fb      	strb	r3, [r7, #7]
    ab1a:	460b      	mov	r3, r1
    ab1c:	71bb      	strb	r3, [r7, #6]
    ab1e:	4613      	mov	r3, r2
    ab20:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ab22:	79fa      	ldrb	r2, [r7, #7]
    ab24:	79bb      	ldrb	r3, [r7, #6]
    ab26:	0052      	lsls	r2, r2, #1
    ab28:	4413      	add	r3, r2
    ab2a:	011b      	lsls	r3, r3, #4
    ab2c:	4a08      	ldr	r2, [pc, #32]	; (ab50 <_usbd_ep_set_out_count+0x40>)
    ab2e:	4413      	add	r3, r2
    ab30:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    ab32:	88bb      	ldrh	r3, [r7, #4]
    ab34:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ab38:	b299      	uxth	r1, r3
    ab3a:	68fa      	ldr	r2, [r7, #12]
    ab3c:	6853      	ldr	r3, [r2, #4]
    ab3e:	f361 030d 	bfi	r3, r1, #0, #14
    ab42:	6053      	str	r3, [r2, #4]
}
    ab44:	bf00      	nop
    ab46:	3714      	adds	r7, #20
    ab48:	46bd      	mov	sp, r7
    ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab4e:	4770      	bx	lr
    ab50:	20002058 	.word	0x20002058

0000ab54 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ab54:	b480      	push	{r7}
    ab56:	b085      	sub	sp, #20
    ab58:	af00      	add	r7, sp, #0
    ab5a:	4603      	mov	r3, r0
    ab5c:	71fb      	strb	r3, [r7, #7]
    ab5e:	460b      	mov	r3, r1
    ab60:	71bb      	strb	r3, [r7, #6]
    ab62:	4613      	mov	r3, r2
    ab64:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ab66:	79fa      	ldrb	r2, [r7, #7]
    ab68:	79bb      	ldrb	r3, [r7, #6]
    ab6a:	0052      	lsls	r2, r2, #1
    ab6c:	4413      	add	r3, r2
    ab6e:	011b      	lsls	r3, r3, #4
    ab70:	4a08      	ldr	r2, [pc, #32]	; (ab94 <_usbd_ep_set_out_size+0x40>)
    ab72:	4413      	add	r3, r2
    ab74:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    ab76:	88bb      	ldrh	r3, [r7, #4]
    ab78:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ab7c:	b299      	uxth	r1, r3
    ab7e:	68fa      	ldr	r2, [r7, #12]
    ab80:	6853      	ldr	r3, [r2, #4]
    ab82:	f361 339b 	bfi	r3, r1, #14, #14
    ab86:	6053      	str	r3, [r2, #4]
}
    ab88:	bf00      	nop
    ab8a:	3714      	adds	r7, #20
    ab8c:	46bd      	mov	sp, r7
    ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab92:	4770      	bx	lr
    ab94:	20002058 	.word	0x20002058

0000ab98 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    ab98:	b580      	push	{r7, lr}
    ab9a:	b084      	sub	sp, #16
    ab9c:	af00      	add	r7, sp, #0
    ab9e:	60ba      	str	r2, [r7, #8]
    aba0:	607b      	str	r3, [r7, #4]
    aba2:	4603      	mov	r3, r0
    aba4:	73fb      	strb	r3, [r7, #15]
    aba6:	460b      	mov	r3, r1
    aba8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    abaa:	68bb      	ldr	r3, [r7, #8]
    abac:	b29a      	uxth	r2, r3
    abae:	7bb9      	ldrb	r1, [r7, #14]
    abb0:	7bfb      	ldrb	r3, [r7, #15]
    abb2:	4618      	mov	r0, r3
    abb4:	4b06      	ldr	r3, [pc, #24]	; (abd0 <_usbd_ep_set_in_trans+0x38>)
    abb6:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    abb8:	687b      	ldr	r3, [r7, #4]
    abba:	b29a      	uxth	r2, r3
    abbc:	7bb9      	ldrb	r1, [r7, #14]
    abbe:	7bfb      	ldrb	r3, [r7, #15]
    abc0:	4618      	mov	r0, r3
    abc2:	4b04      	ldr	r3, [pc, #16]	; (abd4 <_usbd_ep_set_in_trans+0x3c>)
    abc4:	4798      	blx	r3
}
    abc6:	bf00      	nop
    abc8:	3710      	adds	r7, #16
    abca:	46bd      	mov	sp, r7
    abcc:	bd80      	pop	{r7, pc}
    abce:	bf00      	nop
    abd0:	0000aacd 	.word	0x0000aacd
    abd4:	0000aa89 	.word	0x0000aa89

0000abd8 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    abd8:	b580      	push	{r7, lr}
    abda:	b084      	sub	sp, #16
    abdc:	af00      	add	r7, sp, #0
    abde:	60ba      	str	r2, [r7, #8]
    abe0:	607b      	str	r3, [r7, #4]
    abe2:	4603      	mov	r3, r0
    abe4:	73fb      	strb	r3, [r7, #15]
    abe6:	460b      	mov	r3, r1
    abe8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    abea:	68bb      	ldr	r3, [r7, #8]
    abec:	b29a      	uxth	r2, r3
    abee:	7bb9      	ldrb	r1, [r7, #14]
    abf0:	7bfb      	ldrb	r3, [r7, #15]
    abf2:	4618      	mov	r0, r3
    abf4:	4b06      	ldr	r3, [pc, #24]	; (ac10 <_usbd_ep_set_out_trans+0x38>)
    abf6:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    abf8:	687b      	ldr	r3, [r7, #4]
    abfa:	b29a      	uxth	r2, r3
    abfc:	7bb9      	ldrb	r1, [r7, #14]
    abfe:	7bfb      	ldrb	r3, [r7, #15]
    ac00:	4618      	mov	r0, r3
    ac02:	4b04      	ldr	r3, [pc, #16]	; (ac14 <_usbd_ep_set_out_trans+0x3c>)
    ac04:	4798      	blx	r3
}
    ac06:	bf00      	nop
    ac08:	3710      	adds	r7, #16
    ac0a:	46bd      	mov	sp, r7
    ac0c:	bd80      	pop	{r7, pc}
    ac0e:	bf00      	nop
    ac10:	0000ab55 	.word	0x0000ab55
    ac14:	0000ab11 	.word	0x0000ab11

0000ac18 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    ac18:	b480      	push	{r7}
    ac1a:	b085      	sub	sp, #20
    ac1c:	af00      	add	r7, sp, #0
    ac1e:	4603      	mov	r3, r0
    ac20:	460a      	mov	r2, r1
    ac22:	71fb      	strb	r3, [r7, #7]
    ac24:	4613      	mov	r3, r2
    ac26:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ac28:	79fa      	ldrb	r2, [r7, #7]
    ac2a:	79bb      	ldrb	r3, [r7, #6]
    ac2c:	0052      	lsls	r2, r2, #1
    ac2e:	4413      	add	r3, r2
    ac30:	011b      	lsls	r3, r3, #4
    ac32:	4a06      	ldr	r2, [pc, #24]	; (ac4c <_usbd_ep_clear_bank_status+0x34>)
    ac34:	4413      	add	r3, r2
    ac36:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    ac38:	68fb      	ldr	r3, [r7, #12]
    ac3a:	2200      	movs	r2, #0
    ac3c:	729a      	strb	r2, [r3, #10]
}
    ac3e:	bf00      	nop
    ac40:	3714      	adds	r7, #20
    ac42:	46bd      	mov	sp, r7
    ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac48:	4770      	bx	lr
    ac4a:	bf00      	nop
    ac4c:	20002058 	.word	0x20002058

0000ac50 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ac50:	b580      	push	{r7, lr}
    ac52:	b082      	sub	sp, #8
    ac54:	af00      	add	r7, sp, #0
    ac56:	4603      	mov	r3, r0
    ac58:	71fb      	strb	r3, [r7, #7]
    ac5a:	460b      	mov	r3, r1
    ac5c:	71bb      	strb	r3, [r7, #6]
    ac5e:	4613      	mov	r3, r2
    ac60:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ac62:	797b      	ldrb	r3, [r7, #5]
    ac64:	2b00      	cmp	r3, #0
    ac66:	d00b      	beq.n	ac80 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ac68:	79bb      	ldrb	r3, [r7, #6]
    ac6a:	2240      	movs	r2, #64	; 0x40
    ac6c:	fa02 f303 	lsl.w	r3, r2, r3
    ac70:	b2da      	uxtb	r2, r3
    ac72:	79fb      	ldrb	r3, [r7, #7]
    ac74:	4619      	mov	r1, r3
    ac76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac7a:	4b09      	ldr	r3, [pc, #36]	; (aca0 <_usbd_ep_set_in_rdy+0x50>)
    ac7c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ac7e:	e00a      	b.n	ac96 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ac80:	79bb      	ldrb	r3, [r7, #6]
    ac82:	2240      	movs	r2, #64	; 0x40
    ac84:	fa02 f303 	lsl.w	r3, r2, r3
    ac88:	b2da      	uxtb	r2, r3
    ac8a:	79fb      	ldrb	r3, [r7, #7]
    ac8c:	4619      	mov	r1, r3
    ac8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac92:	4b04      	ldr	r3, [pc, #16]	; (aca4 <_usbd_ep_set_in_rdy+0x54>)
    ac94:	4798      	blx	r3
}
    ac96:	bf00      	nop
    ac98:	3708      	adds	r7, #8
    ac9a:	46bd      	mov	sp, r7
    ac9c:	bd80      	pop	{r7, pc}
    ac9e:	bf00      	nop
    aca0:	0000a25d 	.word	0x0000a25d
    aca4:	0000a2b1 	.word	0x0000a2b1

0000aca8 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    aca8:	b580      	push	{r7, lr}
    acaa:	b082      	sub	sp, #8
    acac:	af00      	add	r7, sp, #0
    acae:	4603      	mov	r3, r0
    acb0:	71fb      	strb	r3, [r7, #7]
    acb2:	460b      	mov	r3, r1
    acb4:	71bb      	strb	r3, [r7, #6]
    acb6:	4613      	mov	r3, r2
    acb8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    acba:	797b      	ldrb	r3, [r7, #5]
    acbc:	2b00      	cmp	r3, #0
    acbe:	d00b      	beq.n	acd8 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    acc0:	79bb      	ldrb	r3, [r7, #6]
    acc2:	2240      	movs	r2, #64	; 0x40
    acc4:	fa02 f303 	lsl.w	r3, r2, r3
    acc8:	b2da      	uxtb	r2, r3
    acca:	79fb      	ldrb	r3, [r7, #7]
    accc:	4619      	mov	r1, r3
    acce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    acd2:	4b09      	ldr	r3, [pc, #36]	; (acf8 <_usbd_ep_set_out_rdy+0x50>)
    acd4:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    acd6:	e00a      	b.n	acee <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    acd8:	79bb      	ldrb	r3, [r7, #6]
    acda:	2240      	movs	r2, #64	; 0x40
    acdc:	fa02 f303 	lsl.w	r3, r2, r3
    ace0:	b2da      	uxtb	r2, r3
    ace2:	79fb      	ldrb	r3, [r7, #7]
    ace4:	4619      	mov	r1, r3
    ace6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    acea:	4b04      	ldr	r3, [pc, #16]	; (acfc <_usbd_ep_set_out_rdy+0x54>)
    acec:	4798      	blx	r3
}
    acee:	bf00      	nop
    acf0:	3708      	adds	r7, #8
    acf2:	46bd      	mov	sp, r7
    acf4:	bd80      	pop	{r7, pc}
    acf6:	bf00      	nop
    acf8:	0000a2b1 	.word	0x0000a2b1
    acfc:	0000a25d 	.word	0x0000a25d

0000ad00 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    ad00:	b480      	push	{r7}
    ad02:	b083      	sub	sp, #12
    ad04:	af00      	add	r7, sp, #0
    ad06:	4603      	mov	r3, r0
    ad08:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ad0a:	88fb      	ldrh	r3, [r7, #6]
    ad0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ad10:	d820      	bhi.n	ad54 <_usbd_ep_pcksize_size+0x54>
    ad12:	88fb      	ldrh	r3, [r7, #6]
    ad14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ad18:	d81a      	bhi.n	ad50 <_usbd_ep_pcksize_size+0x50>
    ad1a:	88fb      	ldrh	r3, [r7, #6]
    ad1c:	2b80      	cmp	r3, #128	; 0x80
    ad1e:	d815      	bhi.n	ad4c <_usbd_ep_pcksize_size+0x4c>
    ad20:	88fb      	ldrh	r3, [r7, #6]
    ad22:	2b40      	cmp	r3, #64	; 0x40
    ad24:	d810      	bhi.n	ad48 <_usbd_ep_pcksize_size+0x48>
    ad26:	88fb      	ldrh	r3, [r7, #6]
    ad28:	2b20      	cmp	r3, #32
    ad2a:	d80b      	bhi.n	ad44 <_usbd_ep_pcksize_size+0x44>
    ad2c:	88fb      	ldrh	r3, [r7, #6]
    ad2e:	2b10      	cmp	r3, #16
    ad30:	d806      	bhi.n	ad40 <_usbd_ep_pcksize_size+0x40>
    ad32:	88fb      	ldrh	r3, [r7, #6]
    ad34:	2b08      	cmp	r3, #8
    ad36:	bf8c      	ite	hi
    ad38:	2301      	movhi	r3, #1
    ad3a:	2300      	movls	r3, #0
    ad3c:	b2db      	uxtb	r3, r3
    ad3e:	e00a      	b.n	ad56 <_usbd_ep_pcksize_size+0x56>
    ad40:	2302      	movs	r3, #2
    ad42:	e008      	b.n	ad56 <_usbd_ep_pcksize_size+0x56>
    ad44:	2303      	movs	r3, #3
    ad46:	e006      	b.n	ad56 <_usbd_ep_pcksize_size+0x56>
    ad48:	2304      	movs	r3, #4
    ad4a:	e004      	b.n	ad56 <_usbd_ep_pcksize_size+0x56>
    ad4c:	2305      	movs	r3, #5
    ad4e:	e002      	b.n	ad56 <_usbd_ep_pcksize_size+0x56>
    ad50:	2306      	movs	r3, #6
    ad52:	e000      	b.n	ad56 <_usbd_ep_pcksize_size+0x56>
    ad54:	2307      	movs	r3, #7
}
    ad56:	4618      	mov	r0, r3
    ad58:	370c      	adds	r7, #12
    ad5a:	46bd      	mov	sp, r7
    ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad60:	4770      	bx	lr
	...

0000ad64 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    ad64:	b480      	push	{r7}
    ad66:	b085      	sub	sp, #20
    ad68:	af00      	add	r7, sp, #0
    ad6a:	4603      	mov	r3, r0
    ad6c:	460a      	mov	r2, r1
    ad6e:	71fb      	strb	r3, [r7, #7]
    ad70:	4613      	mov	r3, r2
    ad72:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    ad74:	79fb      	ldrb	r3, [r7, #7]
    ad76:	2b00      	cmp	r3, #0
    ad78:	d008      	beq.n	ad8c <_usb_d_dev_ept+0x28>
    ad7a:	79bb      	ldrb	r3, [r7, #6]
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d003      	beq.n	ad88 <_usb_d_dev_ept+0x24>
    ad80:	79fb      	ldrb	r3, [r7, #7]
    ad82:	3304      	adds	r3, #4
    ad84:	b2db      	uxtb	r3, r3
    ad86:	e002      	b.n	ad8e <_usb_d_dev_ept+0x2a>
    ad88:	79fb      	ldrb	r3, [r7, #7]
    ad8a:	e000      	b.n	ad8e <_usb_d_dev_ept+0x2a>
    ad8c:	2300      	movs	r3, #0
    ad8e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    ad90:	7bfa      	ldrb	r2, [r7, #15]
    ad92:	4613      	mov	r3, r2
    ad94:	009b      	lsls	r3, r3, #2
    ad96:	4413      	add	r3, r2
    ad98:	009b      	lsls	r3, r3, #2
    ad9a:	3310      	adds	r3, #16
    ad9c:	4a04      	ldr	r2, [pc, #16]	; (adb0 <_usb_d_dev_ept+0x4c>)
    ad9e:	4413      	add	r3, r2
    ada0:	3304      	adds	r3, #4
}
    ada2:	4618      	mov	r0, r3
    ada4:	3714      	adds	r7, #20
    ada6:	46bd      	mov	sp, r7
    ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
    adac:	4770      	bx	lr
    adae:	bf00      	nop
    adb0:	20001f90 	.word	0x20001f90

0000adb4 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    adb4:	b580      	push	{r7, lr}
    adb6:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    adb8:	2104      	movs	r1, #4
    adba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adbe:	4b03      	ldr	r3, [pc, #12]	; (adcc <_usb_d_dev_sof+0x18>)
    adc0:	4798      	blx	r3
	dev_inst.callbacks.sof();
    adc2:	4b03      	ldr	r3, [pc, #12]	; (add0 <_usb_d_dev_sof+0x1c>)
    adc4:	681b      	ldr	r3, [r3, #0]
    adc6:	4798      	blx	r3
}
    adc8:	bf00      	nop
    adca:	bd80      	pop	{r7, pc}
    adcc:	0000a42b 	.word	0x0000a42b
    add0:	20001f90 	.word	0x20001f90

0000add4 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    add4:	b580      	push	{r7, lr}
    add6:	b084      	sub	sp, #16
    add8:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    adda:	2300      	movs	r3, #0
    addc:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    adde:	f240 2101 	movw	r1, #513	; 0x201
    ade2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ade6:	4b1a      	ldr	r3, [pc, #104]	; (ae50 <_usb_d_dev_lpmsusp+0x7c>)
    ade8:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    adea:	f240 2101 	movw	r1, #513	; 0x201
    adee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adf2:	4b18      	ldr	r3, [pc, #96]	; (ae54 <_usb_d_dev_lpmsusp+0x80>)
    adf4:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    adf6:	2170      	movs	r1, #112	; 0x70
    adf8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adfc:	4b16      	ldr	r3, [pc, #88]	; (ae58 <_usb_d_dev_lpmsusp+0x84>)
    adfe:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ae00:	2300      	movs	r3, #0
    ae02:	73fb      	strb	r3, [r7, #15]
    ae04:	e018      	b.n	ae38 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    ae06:	7bfb      	ldrb	r3, [r7, #15]
    ae08:	015b      	lsls	r3, r3, #5
    ae0a:	4a14      	ldr	r2, [pc, #80]	; (ae5c <_usb_d_dev_lpmsusp+0x88>)
    ae0c:	4413      	add	r3, r2
    ae0e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    ae10:	687b      	ldr	r3, [r7, #4]
    ae12:	891b      	ldrh	r3, [r3, #8]
    ae14:	f3c3 0303 	ubfx	r3, r3, #0, #4
    ae18:	b2db      	uxtb	r3, r3
    ae1a:	2b03      	cmp	r3, #3
    ae1c:	d109      	bne.n	ae32 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    ae1e:	687b      	ldr	r3, [r7, #4]
    ae20:	891b      	ldrh	r3, [r3, #8]
    ae22:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ae26:	b29b      	uxth	r3, r3
    ae28:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    ae2a:	687b      	ldr	r3, [r7, #4]
    ae2c:	2200      	movs	r2, #0
    ae2e:	811a      	strh	r2, [r3, #8]
			break;
    ae30:	e005      	b.n	ae3e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ae32:	7bfb      	ldrb	r3, [r7, #15]
    ae34:	3301      	adds	r3, #1
    ae36:	73fb      	strb	r3, [r7, #15]
    ae38:	7bfb      	ldrb	r3, [r7, #15]
    ae3a:	2b03      	cmp	r3, #3
    ae3c:	d9e3      	bls.n	ae06 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    ae3e:	4b08      	ldr	r3, [pc, #32]	; (ae60 <_usb_d_dev_lpmsusp+0x8c>)
    ae40:	685b      	ldr	r3, [r3, #4]
    ae42:	68b9      	ldr	r1, [r7, #8]
    ae44:	2003      	movs	r0, #3
    ae46:	4798      	blx	r3
}
    ae48:	bf00      	nop
    ae4a:	3710      	adds	r7, #16
    ae4c:	46bd      	mov	sp, r7
    ae4e:	bd80      	pop	{r7, pc}
    ae50:	0000a42b 	.word	0x0000a42b
    ae54:	0000a481 	.word	0x0000a481
    ae58:	0000a449 	.word	0x0000a449
    ae5c:	20002058 	.word	0x20002058
    ae60:	20001f90 	.word	0x20001f90

0000ae64 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    ae64:	b580      	push	{r7, lr}
    ae66:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    ae68:	2180      	movs	r1, #128	; 0x80
    ae6a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae6e:	4b04      	ldr	r3, [pc, #16]	; (ae80 <_usb_d_dev_ramerr+0x1c>)
    ae70:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    ae72:	4b04      	ldr	r3, [pc, #16]	; (ae84 <_usb_d_dev_ramerr+0x20>)
    ae74:	685b      	ldr	r3, [r3, #4]
    ae76:	2100      	movs	r1, #0
    ae78:	2005      	movs	r0, #5
    ae7a:	4798      	blx	r3
}
    ae7c:	bf00      	nop
    ae7e:	bd80      	pop	{r7, pc}
    ae80:	0000a42b 	.word	0x0000a42b
    ae84:	20001f90 	.word	0x20001f90

0000ae88 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    ae88:	b580      	push	{r7, lr}
    ae8a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ae8c:	2170      	movs	r1, #112	; 0x70
    ae8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae92:	4b0b      	ldr	r3, [pc, #44]	; (aec0 <_usb_d_dev_wakeup+0x38>)
    ae94:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ae96:	2170      	movs	r1, #112	; 0x70
    ae98:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae9c:	4b09      	ldr	r3, [pc, #36]	; (aec4 <_usb_d_dev_wakeup+0x3c>)
    ae9e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    aea0:	f240 2101 	movw	r1, #513	; 0x201
    aea4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aea8:	4b07      	ldr	r3, [pc, #28]	; (aec8 <_usb_d_dev_wakeup+0x40>)
    aeaa:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    aeac:	2000      	movs	r0, #0
    aeae:	4b07      	ldr	r3, [pc, #28]	; (aecc <_usb_d_dev_wakeup+0x44>)
    aeb0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    aeb2:	4b07      	ldr	r3, [pc, #28]	; (aed0 <_usb_d_dev_wakeup+0x48>)
    aeb4:	685b      	ldr	r3, [r3, #4]
    aeb6:	2100      	movs	r1, #0
    aeb8:	2002      	movs	r0, #2
    aeba:	4798      	blx	r3
}
    aebc:	bf00      	nop
    aebe:	bd80      	pop	{r7, pc}
    aec0:	0000a42b 	.word	0x0000a42b
    aec4:	0000a481 	.word	0x0000a481
    aec8:	0000a449 	.word	0x0000a449
    aecc:	0000a729 	.word	0x0000a729
    aed0:	20001f90 	.word	0x20001f90

0000aed4 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    aed4:	b580      	push	{r7, lr}
    aed6:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    aed8:	2200      	movs	r2, #0
    aeda:	2100      	movs	r1, #0
    aedc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aee0:	4b0d      	ldr	r3, [pc, #52]	; (af18 <_usb_d_dev_reset+0x44>)
    aee2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    aee4:	2108      	movs	r1, #8
    aee6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aeea:	4b0c      	ldr	r3, [pc, #48]	; (af1c <_usb_d_dev_reset+0x48>)
    aeec:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    aeee:	2170      	movs	r1, #112	; 0x70
    aef0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aef4:	4b0a      	ldr	r3, [pc, #40]	; (af20 <_usb_d_dev_reset+0x4c>)
    aef6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    aef8:	f240 2101 	movw	r1, #513	; 0x201
    aefc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af00:	4b08      	ldr	r3, [pc, #32]	; (af24 <_usb_d_dev_reset+0x50>)
    af02:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    af04:	4b08      	ldr	r3, [pc, #32]	; (af28 <_usb_d_dev_reset+0x54>)
    af06:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    af08:	4b08      	ldr	r3, [pc, #32]	; (af2c <_usb_d_dev_reset+0x58>)
    af0a:	685b      	ldr	r3, [r3, #4]
    af0c:	2100      	movs	r1, #0
    af0e:	2001      	movs	r0, #1
    af10:	4798      	blx	r3
}
    af12:	bf00      	nop
    af14:	bd80      	pop	{r7, pc}
    af16:	bf00      	nop
    af18:	0000a3c1 	.word	0x0000a3c1
    af1c:	0000a42b 	.word	0x0000a42b
    af20:	0000a481 	.word	0x0000a481
    af24:	0000a449 	.word	0x0000a449
    af28:	0000ba91 	.word	0x0000ba91
    af2c:	20001f90 	.word	0x20001f90

0000af30 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    af30:	b580      	push	{r7, lr}
    af32:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    af34:	f240 2101 	movw	r1, #513	; 0x201
    af38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af3c:	4b09      	ldr	r3, [pc, #36]	; (af64 <_usb_d_dev_suspend+0x34>)
    af3e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    af40:	f240 2101 	movw	r1, #513	; 0x201
    af44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af48:	4b07      	ldr	r3, [pc, #28]	; (af68 <_usb_d_dev_suspend+0x38>)
    af4a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    af4c:	2170      	movs	r1, #112	; 0x70
    af4e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af52:	4b06      	ldr	r3, [pc, #24]	; (af6c <_usb_d_dev_suspend+0x3c>)
    af54:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    af56:	4b06      	ldr	r3, [pc, #24]	; (af70 <_usb_d_dev_suspend+0x40>)
    af58:	685b      	ldr	r3, [r3, #4]
    af5a:	2100      	movs	r1, #0
    af5c:	2004      	movs	r0, #4
    af5e:	4798      	blx	r3
}
    af60:	bf00      	nop
    af62:	bd80      	pop	{r7, pc}
    af64:	0000a42b 	.word	0x0000a42b
    af68:	0000a481 	.word	0x0000a481
    af6c:	0000a449 	.word	0x0000a449
    af70:	20001f90 	.word	0x20001f90

0000af74 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    af74:	b580      	push	{r7, lr}
    af76:	b082      	sub	sp, #8
    af78:	af00      	add	r7, sp, #0
	bool     rc    = true;
    af7a:	2301      	movs	r3, #1
    af7c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    af7e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af82:	4b22      	ldr	r3, [pc, #136]	; (b00c <_usb_d_dev_handle_nep+0x98>)
    af84:	4798      	blx	r3
    af86:	4603      	mov	r3, r0
    af88:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    af8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af8e:	4b20      	ldr	r3, [pc, #128]	; (b010 <_usb_d_dev_handle_nep+0x9c>)
    af90:	4798      	blx	r3
    af92:	4603      	mov	r3, r0
    af94:	461a      	mov	r2, r3
    af96:	88bb      	ldrh	r3, [r7, #4]
    af98:	4013      	ands	r3, r2
    af9a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    af9c:	88bb      	ldrh	r3, [r7, #4]
    af9e:	f003 0304 	and.w	r3, r3, #4
    afa2:	2b00      	cmp	r3, #0
    afa4:	d003      	beq.n	afae <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    afa6:	4b1b      	ldr	r3, [pc, #108]	; (b014 <_usb_d_dev_handle_nep+0xa0>)
    afa8:	4798      	blx	r3
		return true;
    afaa:	2301      	movs	r3, #1
    afac:	e02a      	b.n	b004 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    afae:	88bb      	ldrh	r3, [r7, #4]
    afb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    afb4:	2b00      	cmp	r3, #0
    afb6:	d002      	beq.n	afbe <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    afb8:	4b17      	ldr	r3, [pc, #92]	; (b018 <_usb_d_dev_handle_nep+0xa4>)
    afba:	4798      	blx	r3
    afbc:	e021      	b.n	b002 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    afbe:	88bb      	ldrh	r3, [r7, #4]
    afc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afc4:	2b00      	cmp	r3, #0
    afc6:	d002      	beq.n	afce <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    afc8:	4b14      	ldr	r3, [pc, #80]	; (b01c <_usb_d_dev_handle_nep+0xa8>)
    afca:	4798      	blx	r3
    afcc:	e019      	b.n	b002 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    afce:	88bb      	ldrh	r3, [r7, #4]
    afd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    afd4:	2b00      	cmp	r3, #0
    afd6:	d002      	beq.n	afde <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    afd8:	4b11      	ldr	r3, [pc, #68]	; (b020 <_usb_d_dev_handle_nep+0xac>)
    afda:	4798      	blx	r3
    afdc:	e011      	b.n	b002 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    afde:	88bb      	ldrh	r3, [r7, #4]
    afe0:	f003 0308 	and.w	r3, r3, #8
    afe4:	2b00      	cmp	r3, #0
    afe6:	d002      	beq.n	afee <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    afe8:	4b0e      	ldr	r3, [pc, #56]	; (b024 <_usb_d_dev_handle_nep+0xb0>)
    afea:	4798      	blx	r3
    afec:	e009      	b.n	b002 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    afee:	88bb      	ldrh	r3, [r7, #4]
    aff0:	f003 0301 	and.w	r3, r3, #1
    aff4:	2b00      	cmp	r3, #0
    aff6:	d002      	beq.n	affe <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    aff8:	4b0b      	ldr	r3, [pc, #44]	; (b028 <_usb_d_dev_handle_nep+0xb4>)
    affa:	4798      	blx	r3
    affc:	e001      	b.n	b002 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    affe:	2300      	movs	r3, #0
    b000:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    b002:	79fb      	ldrb	r3, [r7, #7]
}
    b004:	4618      	mov	r0, r3
    b006:	3708      	adds	r7, #8
    b008:	46bd      	mov	sp, r7
    b00a:	bd80      	pop	{r7, pc}
    b00c:	0000a411 	.word	0x0000a411
    b010:	0000a467 	.word	0x0000a467
    b014:	0000adb5 	.word	0x0000adb5
    b018:	0000add5 	.word	0x0000add5
    b01c:	0000ae65 	.word	0x0000ae65
    b020:	0000ae89 	.word	0x0000ae89
    b024:	0000aed5 	.word	0x0000aed5
    b028:	0000af31 	.word	0x0000af31

0000b02c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b02c:	b590      	push	{r4, r7, lr}
    b02e:	b089      	sub	sp, #36	; 0x24
    b030:	af00      	add	r7, sp, #0
    b032:	6078      	str	r0, [r7, #4]
    b034:	460b      	mov	r3, r1
    b036:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    b038:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b03c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    b03e:	687b      	ldr	r3, [r7, #4]
    b040:	7c9b      	ldrb	r3, [r3, #18]
    b042:	f003 030f 	and.w	r3, r3, #15
    b046:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b048:	7dfb      	ldrb	r3, [r7, #23]
    b04a:	015b      	lsls	r3, r3, #5
    b04c:	4a73      	ldr	r2, [pc, #460]	; (b21c <_usb_d_dev_in_next+0x1f0>)
    b04e:	4413      	add	r3, r2
    b050:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    b052:	78fb      	ldrb	r3, [r7, #3]
    b054:	2b00      	cmp	r3, #0
    b056:	d006      	beq.n	b066 <_usb_d_dev_in_next+0x3a>
    b058:	693b      	ldr	r3, [r7, #16]
    b05a:	3310      	adds	r3, #16
    b05c:	685b      	ldr	r3, [r3, #4]
    b05e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b062:	b29b      	uxth	r3, r3
    b064:	e000      	b.n	b068 <_usb_d_dev_in_next+0x3c>
    b066:	2300      	movs	r3, #0
    b068:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    b06a:	687b      	ldr	r3, [r7, #4]
    b06c:	8a1b      	ldrh	r3, [r3, #16]
    b06e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b072:	4293      	cmp	r3, r2
    b074:	d103      	bne.n	b07e <_usb_d_dev_in_next+0x52>
    b076:	687b      	ldr	r3, [r7, #4]
    b078:	8a1b      	ldrh	r3, [r3, #16]
    b07a:	b21b      	sxth	r3, r3
    b07c:	e004      	b.n	b088 <_usb_d_dev_in_next+0x5c>
    b07e:	687b      	ldr	r3, [r7, #4]
    b080:	8a1b      	ldrh	r3, [r3, #16]
    b082:	3b01      	subs	r3, #1
    b084:	b29b      	uxth	r3, r3
    b086:	b21b      	sxth	r3, r3
    b088:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    b08c:	4013      	ands	r3, r2
    b08e:	b21b      	sxth	r3, r3
    b090:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    b092:	2300      	movs	r3, #0
    b094:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    b096:	687b      	ldr	r3, [r7, #4]
    b098:	7cdb      	ldrb	r3, [r3, #19]
    b09a:	f003 0307 	and.w	r3, r3, #7
    b09e:	b2db      	uxtb	r3, r3
    b0a0:	2b01      	cmp	r3, #1
    b0a2:	bf0c      	ite	eq
    b0a4:	2301      	moveq	r3, #1
    b0a6:	2300      	movne	r3, #0
    b0a8:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    b0aa:	78fb      	ldrb	r3, [r7, #3]
    b0ac:	2b00      	cmp	r3, #0
    b0ae:	d004      	beq.n	b0ba <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    b0b0:	7dfb      	ldrb	r3, [r7, #23]
    b0b2:	2101      	movs	r1, #1
    b0b4:	4618      	mov	r0, r3
    b0b6:	4b5a      	ldr	r3, [pc, #360]	; (b220 <_usb_d_dev_in_next+0x1f4>)
    b0b8:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	689a      	ldr	r2, [r3, #8]
    b0be:	89fb      	ldrh	r3, [r7, #14]
    b0c0:	441a      	add	r2, r3
    b0c2:	687b      	ldr	r3, [r7, #4]
    b0c4:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    b0c6:	687b      	ldr	r3, [r7, #4]
    b0c8:	689a      	ldr	r2, [r3, #8]
    b0ca:	687b      	ldr	r3, [r7, #4]
    b0cc:	685b      	ldr	r3, [r3, #4]
    b0ce:	429a      	cmp	r2, r3
    b0d0:	d243      	bcs.n	b15a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    b0d2:	687b      	ldr	r3, [r7, #4]
    b0d4:	685b      	ldr	r3, [r3, #4]
    b0d6:	b29a      	uxth	r2, r3
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	689b      	ldr	r3, [r3, #8]
    b0dc:	b29b      	uxth	r3, r3
    b0de:	1ad3      	subs	r3, r2, r3
    b0e0:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	7cdb      	ldrb	r3, [r3, #19]
    b0e6:	f003 0320 	and.w	r3, r3, #32
    b0ea:	b2db      	uxtb	r3, r3
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d01b      	beq.n	b128 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    b0f0:	687b      	ldr	r3, [r7, #4]
    b0f2:	8a1b      	ldrh	r3, [r3, #16]
    b0f4:	8bfa      	ldrh	r2, [r7, #30]
    b0f6:	429a      	cmp	r2, r3
    b0f8:	d902      	bls.n	b100 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	8a1b      	ldrh	r3, [r3, #16]
    b0fe:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    b100:	687b      	ldr	r3, [r7, #4]
    b102:	68d8      	ldr	r0, [r3, #12]
    b104:	687b      	ldr	r3, [r7, #4]
    b106:	681a      	ldr	r2, [r3, #0]
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	689b      	ldr	r3, [r3, #8]
    b10c:	4413      	add	r3, r2
    b10e:	8bfa      	ldrh	r2, [r7, #30]
    b110:	4619      	mov	r1, r3
    b112:	4b44      	ldr	r3, [pc, #272]	; (b224 <_usb_d_dev_in_next+0x1f8>)
    b114:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    b116:	687b      	ldr	r3, [r7, #4]
    b118:	68db      	ldr	r3, [r3, #12]
    b11a:	461a      	mov	r2, r3
    b11c:	7dfb      	ldrb	r3, [r7, #23]
    b11e:	2101      	movs	r1, #1
    b120:	4618      	mov	r0, r3
    b122:	4b41      	ldr	r3, [pc, #260]	; (b228 <_usb_d_dev_in_next+0x1fc>)
    b124:	4798      	blx	r3
    b126:	e011      	b.n	b14c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    b128:	8bfb      	ldrh	r3, [r7, #30]
    b12a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b12e:	d902      	bls.n	b136 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    b130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b134:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b136:	687b      	ldr	r3, [r7, #4]
    b138:	681a      	ldr	r2, [r3, #0]
    b13a:	687b      	ldr	r3, [r7, #4]
    b13c:	689b      	ldr	r3, [r3, #8]
    b13e:	4413      	add	r3, r2
    b140:	461a      	mov	r2, r3
    b142:	7dfb      	ldrb	r3, [r7, #23]
    b144:	2101      	movs	r1, #1
    b146:	4618      	mov	r0, r3
    b148:	4b37      	ldr	r3, [pc, #220]	; (b228 <_usb_d_dev_in_next+0x1fc>)
    b14a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    b14c:	8bfa      	ldrh	r2, [r7, #30]
    b14e:	7df8      	ldrb	r0, [r7, #23]
    b150:	2300      	movs	r3, #0
    b152:	2101      	movs	r1, #1
    b154:	4c35      	ldr	r4, [pc, #212]	; (b22c <_usb_d_dev_in_next+0x200>)
    b156:	47a0      	blx	r4
		goto _in_tx_exec;
    b158:	e041      	b.n	b1de <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    b15a:	687b      	ldr	r3, [r7, #4]
    b15c:	7cdb      	ldrb	r3, [r3, #19]
    b15e:	f003 0310 	and.w	r3, r3, #16
    b162:	b2db      	uxtb	r3, r3
    b164:	2b00      	cmp	r3, #0
    b166:	d00b      	beq.n	b180 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    b168:	687a      	ldr	r2, [r7, #4]
    b16a:	7cd3      	ldrb	r3, [r2, #19]
    b16c:	f36f 1304 	bfc	r3, #4, #1
    b170:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    b172:	7df8      	ldrb	r0, [r7, #23]
    b174:	2300      	movs	r3, #0
    b176:	2200      	movs	r2, #0
    b178:	2101      	movs	r1, #1
    b17a:	4c2c      	ldr	r4, [pc, #176]	; (b22c <_usb_d_dev_in_next+0x200>)
    b17c:	47a0      	blx	r4
		goto _in_tx_exec;
    b17e:	e02e      	b.n	b1de <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    b180:	7afb      	ldrb	r3, [r7, #11]
    b182:	2b00      	cmp	r3, #0
    b184:	d006      	beq.n	b194 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    b186:	7dfb      	ldrb	r3, [r7, #23]
    b188:	224b      	movs	r2, #75	; 0x4b
    b18a:	4619      	mov	r1, r3
    b18c:	69b8      	ldr	r0, [r7, #24]
    b18e:	4b28      	ldr	r3, [pc, #160]	; (b230 <_usb_d_dev_in_next+0x204>)
    b190:	4798      	blx	r3
    b192:	e005      	b.n	b1a0 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    b194:	7dfb      	ldrb	r3, [r7, #23]
    b196:	224a      	movs	r2, #74	; 0x4a
    b198:	4619      	mov	r1, r3
    b19a:	69b8      	ldr	r0, [r7, #24]
    b19c:	4b24      	ldr	r3, [pc, #144]	; (b230 <_usb_d_dev_in_next+0x204>)
    b19e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	8a1b      	ldrh	r3, [r3, #16]
    b1a4:	89ba      	ldrh	r2, [r7, #12]
    b1a6:	429a      	cmp	r2, r3
    b1a8:	d114      	bne.n	b1d4 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    b1aa:	687a      	ldr	r2, [r7, #4]
    b1ac:	7cd3      	ldrb	r3, [r2, #19]
    b1ae:	f36f 1386 	bfc	r3, #6, #1
    b1b2:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    b1b4:	4b1f      	ldr	r3, [pc, #124]	; (b234 <_usb_d_dev_in_next+0x208>)
    b1b6:	68db      	ldr	r3, [r3, #12]
    b1b8:	687a      	ldr	r2, [r7, #4]
    b1ba:	7c90      	ldrb	r0, [r2, #18]
    b1bc:	687a      	ldr	r2, [r7, #4]
    b1be:	6892      	ldr	r2, [r2, #8]
    b1c0:	4611      	mov	r1, r2
    b1c2:	4798      	blx	r3
    b1c4:	4603      	mov	r3, r0
    b1c6:	2b00      	cmp	r3, #0
    b1c8:	d124      	bne.n	b214 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    b1ca:	687a      	ldr	r2, [r7, #4]
    b1cc:	7cd3      	ldrb	r3, [r2, #19]
    b1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b1d2:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b1d4:	2100      	movs	r1, #0
    b1d6:	6878      	ldr	r0, [r7, #4]
    b1d8:	4b17      	ldr	r3, [pc, #92]	; (b238 <_usb_d_dev_in_next+0x20c>)
    b1da:	4798      	blx	r3
	return;
    b1dc:	e01b      	b.n	b216 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    b1de:	78fb      	ldrb	r3, [r7, #3]
    b1e0:	f083 0301 	eor.w	r3, r3, #1
    b1e4:	b2db      	uxtb	r3, r3
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d00d      	beq.n	b206 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    b1ea:	7afb      	ldrb	r3, [r7, #11]
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d002      	beq.n	b1f6 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    b1f0:	234e      	movs	r3, #78	; 0x4e
    b1f2:	777b      	strb	r3, [r7, #29]
    b1f4:	e001      	b.n	b1fa <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    b1f6:	234a      	movs	r3, #74	; 0x4a
    b1f8:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b1fa:	7f7a      	ldrb	r2, [r7, #29]
    b1fc:	7dfb      	ldrb	r3, [r7, #23]
    b1fe:	4619      	mov	r1, r3
    b200:	69b8      	ldr	r0, [r7, #24]
    b202:	4b0e      	ldr	r3, [pc, #56]	; (b23c <_usb_d_dev_in_next+0x210>)
    b204:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    b206:	7dfb      	ldrb	r3, [r7, #23]
    b208:	2201      	movs	r2, #1
    b20a:	2101      	movs	r1, #1
    b20c:	4618      	mov	r0, r3
    b20e:	4b0c      	ldr	r3, [pc, #48]	; (b240 <_usb_d_dev_in_next+0x214>)
    b210:	4798      	blx	r3
    b212:	e000      	b.n	b216 <_usb_d_dev_in_next+0x1ea>
			return;
    b214:	bf00      	nop
}
    b216:	3724      	adds	r7, #36	; 0x24
    b218:	46bd      	mov	sp, r7
    b21a:	bd90      	pop	{r4, r7, pc}
    b21c:	20002058 	.word	0x20002058
    b220:	0000aa25 	.word	0x0000aa25
    b224:	00010829 	.word	0x00010829
    b228:	0000aa51 	.word	0x0000aa51
    b22c:	0000ab99 	.word	0x0000ab99
    b230:	0000a331 	.word	0x0000a331
    b234:	20001f90 	.word	0x20001f90
    b238:	0000c355 	.word	0x0000c355
    b23c:	0000a305 	.word	0x0000a305
    b240:	0000ac51 	.word	0x0000ac51

0000b244 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b244:	b590      	push	{r4, r7, lr}
    b246:	b08b      	sub	sp, #44	; 0x2c
    b248:	af00      	add	r7, sp, #0
    b24a:	6078      	str	r0, [r7, #4]
    b24c:	460b      	mov	r3, r1
    b24e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    b250:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b254:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    b256:	687b      	ldr	r3, [r7, #4]
    b258:	7c9b      	ldrb	r3, [r3, #18]
    b25a:	f003 030f 	and.w	r3, r3, #15
    b25e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b260:	7ffb      	ldrb	r3, [r7, #31]
    b262:	015b      	lsls	r3, r3, #5
    b264:	4a94      	ldr	r2, [pc, #592]	; (b4b8 <_usb_d_dev_out_next+0x274>)
    b266:	4413      	add	r3, r2
    b268:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    b26a:	78fb      	ldrb	r3, [r7, #3]
    b26c:	2b00      	cmp	r3, #0
    b26e:	d005      	beq.n	b27c <_usb_d_dev_out_next+0x38>
    b270:	69bb      	ldr	r3, [r7, #24]
    b272:	685b      	ldr	r3, [r3, #4]
    b274:	f3c3 338d 	ubfx	r3, r3, #14, #14
    b278:	b29b      	uxth	r3, r3
    b27a:	e000      	b.n	b27e <_usb_d_dev_out_next+0x3a>
    b27c:	2300      	movs	r3, #0
    b27e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    b280:	78fb      	ldrb	r3, [r7, #3]
    b282:	2b00      	cmp	r3, #0
    b284:	d005      	beq.n	b292 <_usb_d_dev_out_next+0x4e>
    b286:	69bb      	ldr	r3, [r7, #24]
    b288:	685b      	ldr	r3, [r3, #4]
    b28a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b28e:	b29b      	uxth	r3, r3
    b290:	e000      	b.n	b294 <_usb_d_dev_out_next+0x50>
    b292:	2300      	movs	r3, #0
    b294:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b296:	687b      	ldr	r3, [r7, #4]
    b298:	8a1b      	ldrh	r3, [r3, #16]
    b29a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b29e:	4293      	cmp	r3, r2
    b2a0:	d004      	beq.n	b2ac <_usb_d_dev_out_next+0x68>
    b2a2:	687b      	ldr	r3, [r7, #4]
    b2a4:	8a1b      	ldrh	r3, [r3, #16]
    b2a6:	3b01      	subs	r3, #1
    b2a8:	b29b      	uxth	r3, r3
    b2aa:	e001      	b.n	b2b0 <_usb_d_dev_out_next+0x6c>
    b2ac:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b2b0:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    b2b2:	8aba      	ldrh	r2, [r7, #20]
    b2b4:	8a7b      	ldrh	r3, [r7, #18]
    b2b6:	4013      	ands	r3, r2
    b2b8:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b2ba:	687b      	ldr	r3, [r7, #4]
    b2bc:	7cdb      	ldrb	r3, [r3, #19]
    b2be:	f003 0307 	and.w	r3, r3, #7
    b2c2:	b2db      	uxtb	r3, r3
    b2c4:	2b01      	cmp	r3, #1
    b2c6:	bf0c      	ite	eq
    b2c8:	2301      	moveq	r3, #1
    b2ca:	2300      	movne	r3, #0
    b2cc:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    b2ce:	78fb      	ldrb	r3, [r7, #3]
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d004      	beq.n	b2de <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    b2d4:	7ffb      	ldrb	r3, [r7, #31]
    b2d6:	2100      	movs	r1, #0
    b2d8:	4618      	mov	r0, r3
    b2da:	4b78      	ldr	r3, [pc, #480]	; (b4bc <_usb_d_dev_out_next+0x278>)
    b2dc:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    b2de:	687b      	ldr	r3, [r7, #4]
    b2e0:	7cdb      	ldrb	r3, [r3, #19]
    b2e2:	f003 0320 	and.w	r3, r3, #32
    b2e6:	b2db      	uxtb	r3, r3
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d01c      	beq.n	b326 <_usb_d_dev_out_next+0xe2>
    b2ec:	687b      	ldr	r3, [r7, #4]
    b2ee:	685b      	ldr	r3, [r3, #4]
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d018      	beq.n	b326 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    b2f4:	687b      	ldr	r3, [r7, #4]
    b2f6:	685b      	ldr	r3, [r3, #4]
    b2f8:	b29a      	uxth	r2, r3
    b2fa:	687b      	ldr	r3, [r7, #4]
    b2fc:	689b      	ldr	r3, [r3, #8]
    b2fe:	b29b      	uxth	r3, r3
    b300:	1ad3      	subs	r3, r2, r3
    b302:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    b304:	687b      	ldr	r3, [r7, #4]
    b306:	681a      	ldr	r2, [r3, #0]
    b308:	687b      	ldr	r3, [r7, #4]
    b30a:	689b      	ldr	r3, [r3, #8]
    b30c:	18d0      	adds	r0, r2, r3
    b30e:	687b      	ldr	r3, [r7, #4]
    b310:	68d9      	ldr	r1, [r3, #12]
    b312:	89ba      	ldrh	r2, [r7, #12]
    b314:	8a3b      	ldrh	r3, [r7, #16]
    b316:	429a      	cmp	r2, r3
    b318:	d901      	bls.n	b31e <_usb_d_dev_out_next+0xda>
    b31a:	8a3b      	ldrh	r3, [r7, #16]
    b31c:	e000      	b.n	b320 <_usb_d_dev_out_next+0xdc>
    b31e:	89bb      	ldrh	r3, [r7, #12]
    b320:	461a      	mov	r2, r3
    b322:	4b67      	ldr	r3, [pc, #412]	; (b4c0 <_usb_d_dev_out_next+0x27c>)
    b324:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b326:	687b      	ldr	r3, [r7, #4]
    b328:	685b      	ldr	r3, [r3, #4]
    b32a:	2b00      	cmp	r3, #0
    b32c:	d121      	bne.n	b372 <_usb_d_dev_out_next+0x12e>
    b32e:	687b      	ldr	r3, [r7, #4]
    b330:	7cdb      	ldrb	r3, [r3, #19]
    b332:	f003 0310 	and.w	r3, r3, #16
    b336:	b2db      	uxtb	r3, r3
    b338:	2b00      	cmp	r3, #0
    b33a:	d01a      	beq.n	b372 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    b33c:	687a      	ldr	r2, [r7, #4]
    b33e:	7cd3      	ldrb	r3, [r2, #19]
    b340:	f36f 1304 	bfc	r3, #4, #1
    b344:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    b346:	687a      	ldr	r2, [r7, #4]
    b348:	7cd3      	ldrb	r3, [r2, #19]
    b34a:	f043 0320 	orr.w	r3, r3, #32
    b34e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b350:	687b      	ldr	r3, [r7, #4]
    b352:	68db      	ldr	r3, [r3, #12]
    b354:	461a      	mov	r2, r3
    b356:	7ffb      	ldrb	r3, [r7, #31]
    b358:	2100      	movs	r1, #0
    b35a:	4618      	mov	r0, r3
    b35c:	4b59      	ldr	r3, [pc, #356]	; (b4c4 <_usb_d_dev_out_next+0x280>)
    b35e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b360:	687b      	ldr	r3, [r7, #4]
    b362:	8a1b      	ldrh	r3, [r3, #16]
    b364:	461a      	mov	r2, r3
    b366:	7ff8      	ldrb	r0, [r7, #31]
    b368:	2300      	movs	r3, #0
    b36a:	2100      	movs	r1, #0
    b36c:	4c56      	ldr	r4, [pc, #344]	; (b4c8 <_usb_d_dev_out_next+0x284>)
    b36e:	47a0      	blx	r4
		goto _out_rx_exec;
    b370:	e090      	b.n	b494 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    b372:	78fb      	ldrb	r3, [r7, #3]
    b374:	2b00      	cmp	r3, #0
    b376:	d010      	beq.n	b39a <_usb_d_dev_out_next+0x156>
    b378:	687b      	ldr	r3, [r7, #4]
    b37a:	8a1b      	ldrh	r3, [r3, #16]
    b37c:	8a3a      	ldrh	r2, [r7, #16]
    b37e:	429a      	cmp	r2, r3
    b380:	d20b      	bcs.n	b39a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    b382:	687a      	ldr	r2, [r7, #4]
    b384:	7cd3      	ldrb	r3, [r2, #19]
    b386:	f36f 1304 	bfc	r3, #4, #1
    b38a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    b38c:	687b      	ldr	r3, [r7, #4]
    b38e:	689a      	ldr	r2, [r3, #8]
    b390:	8abb      	ldrh	r3, [r7, #20]
    b392:	441a      	add	r2, r3
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	609a      	str	r2, [r3, #8]
    b398:	e05c      	b.n	b454 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    b39a:	687b      	ldr	r3, [r7, #4]
    b39c:	689a      	ldr	r2, [r3, #8]
    b39e:	8afb      	ldrh	r3, [r7, #22]
    b3a0:	441a      	add	r2, r3
    b3a2:	687b      	ldr	r3, [r7, #4]
    b3a4:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    b3a6:	687b      	ldr	r3, [r7, #4]
    b3a8:	689a      	ldr	r2, [r3, #8]
    b3aa:	687b      	ldr	r3, [r7, #4]
    b3ac:	685b      	ldr	r3, [r3, #4]
    b3ae:	429a      	cmp	r2, r3
    b3b0:	d250      	bcs.n	b454 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    b3b2:	687b      	ldr	r3, [r7, #4]
    b3b4:	685b      	ldr	r3, [r3, #4]
    b3b6:	b29a      	uxth	r2, r3
    b3b8:	687b      	ldr	r3, [r7, #4]
    b3ba:	689b      	ldr	r3, [r3, #8]
    b3bc:	b29b      	uxth	r3, r3
    b3be:	1ad3      	subs	r3, r2, r3
    b3c0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    b3c2:	687b      	ldr	r3, [r7, #4]
    b3c4:	7cdb      	ldrb	r3, [r3, #19]
    b3c6:	f003 0320 	and.w	r3, r3, #32
    b3ca:	b2db      	uxtb	r3, r3
    b3cc:	2b00      	cmp	r3, #0
    b3ce:	d010      	beq.n	b3f2 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    b3d0:	687b      	ldr	r3, [r7, #4]
    b3d2:	8a1b      	ldrh	r3, [r3, #16]
    b3d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b3d6:	429a      	cmp	r2, r3
    b3d8:	d902      	bls.n	b3e0 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	8a1b      	ldrh	r3, [r3, #16]
    b3de:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b3e0:	687b      	ldr	r3, [r7, #4]
    b3e2:	68db      	ldr	r3, [r3, #12]
    b3e4:	461a      	mov	r2, r3
    b3e6:	7ffb      	ldrb	r3, [r7, #31]
    b3e8:	2100      	movs	r1, #0
    b3ea:	4618      	mov	r0, r3
    b3ec:	4b35      	ldr	r3, [pc, #212]	; (b4c4 <_usb_d_dev_out_next+0x280>)
    b3ee:	4798      	blx	r3
    b3f0:	e029      	b.n	b446 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	8a1b      	ldrh	r3, [r3, #16]
    b3f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b3f8:	429a      	cmp	r2, r3
    b3fa:	d90f      	bls.n	b41c <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    b3fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b3fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b402:	d903      	bls.n	b40c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    b404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b408:	84fb      	strh	r3, [r7, #38]	; 0x26
    b40a:	e011      	b.n	b430 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    b40c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b40e:	8a7b      	ldrh	r3, [r7, #18]
    b410:	4013      	ands	r3, r2
    b412:	b29b      	uxth	r3, r3
    b414:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b416:	1ad3      	subs	r3, r2, r3
    b418:	84fb      	strh	r3, [r7, #38]	; 0x26
    b41a:	e009      	b.n	b430 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    b41c:	687b      	ldr	r3, [r7, #4]
    b41e:	8a1b      	ldrh	r3, [r3, #16]
    b420:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b422:	429a      	cmp	r2, r3
    b424:	d204      	bcs.n	b430 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    b426:	687a      	ldr	r2, [r7, #4]
    b428:	7cd3      	ldrb	r3, [r2, #19]
    b42a:	f043 0320 	orr.w	r3, r3, #32
    b42e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b430:	687b      	ldr	r3, [r7, #4]
    b432:	681a      	ldr	r2, [r3, #0]
    b434:	687b      	ldr	r3, [r7, #4]
    b436:	689b      	ldr	r3, [r3, #8]
    b438:	4413      	add	r3, r2
    b43a:	461a      	mov	r2, r3
    b43c:	7ffb      	ldrb	r3, [r7, #31]
    b43e:	2100      	movs	r1, #0
    b440:	4618      	mov	r0, r3
    b442:	4b20      	ldr	r3, [pc, #128]	; (b4c4 <_usb_d_dev_out_next+0x280>)
    b444:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    b446:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b448:	7ff8      	ldrb	r0, [r7, #31]
    b44a:	2300      	movs	r3, #0
    b44c:	2100      	movs	r1, #0
    b44e:	4c1e      	ldr	r4, [pc, #120]	; (b4c8 <_usb_d_dev_out_next+0x284>)
    b450:	47a0      	blx	r4
			goto _out_rx_exec;
    b452:	e01f      	b.n	b494 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    b454:	7bfb      	ldrb	r3, [r7, #15]
    b456:	2b00      	cmp	r3, #0
    b458:	d006      	beq.n	b468 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    b45a:	7ffb      	ldrb	r3, [r7, #31]
    b45c:	222d      	movs	r2, #45	; 0x2d
    b45e:	4619      	mov	r1, r3
    b460:	6a38      	ldr	r0, [r7, #32]
    b462:	4b1a      	ldr	r3, [pc, #104]	; (b4cc <_usb_d_dev_out_next+0x288>)
    b464:	4798      	blx	r3
    b466:	e005      	b.n	b474 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    b468:	7ffb      	ldrb	r3, [r7, #31]
    b46a:	2225      	movs	r2, #37	; 0x25
    b46c:	4619      	mov	r1, r3
    b46e:	6a38      	ldr	r0, [r7, #32]
    b470:	4b16      	ldr	r3, [pc, #88]	; (b4cc <_usb_d_dev_out_next+0x288>)
    b472:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    b474:	7ffb      	ldrb	r3, [r7, #31]
    b476:	2b00      	cmp	r3, #0
    b478:	d107      	bne.n	b48a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b47a:	687b      	ldr	r3, [r7, #4]
    b47c:	68db      	ldr	r3, [r3, #12]
    b47e:	461a      	mov	r2, r3
    b480:	7ffb      	ldrb	r3, [r7, #31]
    b482:	2100      	movs	r1, #0
    b484:	4618      	mov	r0, r3
    b486:	4b0f      	ldr	r3, [pc, #60]	; (b4c4 <_usb_d_dev_out_next+0x280>)
    b488:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b48a:	2100      	movs	r1, #0
    b48c:	6878      	ldr	r0, [r7, #4]
    b48e:	4b10      	ldr	r3, [pc, #64]	; (b4d0 <_usb_d_dev_out_next+0x28c>)
    b490:	4798      	blx	r3
	return;
    b492:	e031      	b.n	b4f8 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    b494:	78fb      	ldrb	r3, [r7, #3]
    b496:	f083 0301 	eor.w	r3, r3, #1
    b49a:	b2db      	uxtb	r3, r3
    b49c:	2b00      	cmp	r3, #0
    b49e:	d025      	beq.n	b4ec <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    b4a0:	7bfb      	ldrb	r3, [r7, #15]
    b4a2:	2b00      	cmp	r3, #0
    b4a4:	d018      	beq.n	b4d8 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    b4a6:	7ffb      	ldrb	r3, [r7, #31]
    b4a8:	2101      	movs	r1, #1
    b4aa:	4618      	mov	r0, r3
    b4ac:	4b09      	ldr	r3, [pc, #36]	; (b4d4 <_usb_d_dev_out_next+0x290>)
    b4ae:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    b4b0:	232d      	movs	r3, #45	; 0x2d
    b4b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    b4b6:	e012      	b.n	b4de <_usb_d_dev_out_next+0x29a>
    b4b8:	20002058 	.word	0x20002058
    b4bc:	0000aa25 	.word	0x0000aa25
    b4c0:	00010829 	.word	0x00010829
    b4c4:	0000aa51 	.word	0x0000aa51
    b4c8:	0000abd9 	.word	0x0000abd9
    b4cc:	0000a331 	.word	0x0000a331
    b4d0:	0000c355 	.word	0x0000c355
    b4d4:	0000ac19 	.word	0x0000ac19
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    b4d8:	2325      	movs	r3, #37	; 0x25
    b4da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b4de:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    b4e2:	7ffb      	ldrb	r3, [r7, #31]
    b4e4:	4619      	mov	r1, r3
    b4e6:	6a38      	ldr	r0, [r7, #32]
    b4e8:	4b05      	ldr	r3, [pc, #20]	; (b500 <_usb_d_dev_out_next+0x2bc>)
    b4ea:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    b4ec:	7ffb      	ldrb	r3, [r7, #31]
    b4ee:	2201      	movs	r2, #1
    b4f0:	2100      	movs	r1, #0
    b4f2:	4618      	mov	r0, r3
    b4f4:	4b03      	ldr	r3, [pc, #12]	; (b504 <_usb_d_dev_out_next+0x2c0>)
    b4f6:	4798      	blx	r3
}
    b4f8:	372c      	adds	r7, #44	; 0x2c
    b4fa:	46bd      	mov	sp, r7
    b4fc:	bd90      	pop	{r4, r7, pc}
    b4fe:	bf00      	nop
    b500:	0000a305 	.word	0x0000a305
    b504:	0000aca9 	.word	0x0000aca9

0000b508 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    b508:	b580      	push	{r7, lr}
    b50a:	b084      	sub	sp, #16
    b50c:	af00      	add	r7, sp, #0
    b50e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b510:	687b      	ldr	r3, [r7, #4]
    b512:	7c9b      	ldrb	r3, [r3, #18]
    b514:	f003 030f 	and.w	r3, r3, #15
    b518:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b51a:	687b      	ldr	r3, [r7, #4]
    b51c:	7cdb      	ldrb	r3, [r3, #19]
    b51e:	f003 0307 	and.w	r3, r3, #7
    b522:	b2db      	uxtb	r3, r3
    b524:	2b01      	cmp	r3, #1
    b526:	bf0c      	ite	eq
    b528:	2301      	moveq	r3, #1
    b52a:	2300      	movne	r3, #0
    b52c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    b52e:	7bbb      	ldrb	r3, [r7, #14]
    b530:	f083 0301 	eor.w	r3, r3, #1
    b534:	b2db      	uxtb	r3, r3
    b536:	2b00      	cmp	r3, #0
    b538:	d008      	beq.n	b54c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    b53a:	7bfb      	ldrb	r3, [r7, #15]
    b53c:	4618      	mov	r0, r3
    b53e:	4b20      	ldr	r3, [pc, #128]	; (b5c0 <_usb_d_dev_handle_setup+0xb8>)
    b540:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    b542:	7bfb      	ldrb	r3, [r7, #15]
    b544:	4618      	mov	r0, r3
    b546:	4b1f      	ldr	r3, [pc, #124]	; (b5c4 <_usb_d_dev_handle_setup+0xbc>)
    b548:	4798      	blx	r3
		return;
    b54a:	e036      	b.n	b5ba <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    b54c:	687b      	ldr	r3, [r7, #4]
    b54e:	7cdb      	ldrb	r3, [r3, #19]
    b550:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b554:	b2db      	uxtb	r3, r3
    b556:	2b00      	cmp	r3, #0
    b558:	d010      	beq.n	b57c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    b55a:	687a      	ldr	r2, [r7, #4]
    b55c:	7cd3      	ldrb	r3, [r2, #19]
    b55e:	f36f 1386 	bfc	r3, #6, #1
    b562:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b564:	7bfb      	ldrb	r3, [r7, #15]
    b566:	2200      	movs	r2, #0
    b568:	2101      	movs	r1, #1
    b56a:	4618      	mov	r0, r3
    b56c:	4b16      	ldr	r3, [pc, #88]	; (b5c8 <_usb_d_dev_handle_setup+0xc0>)
    b56e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    b570:	7bfb      	ldrb	r3, [r7, #15]
    b572:	2200      	movs	r2, #0
    b574:	2100      	movs	r1, #0
    b576:	4618      	mov	r0, r3
    b578:	4b14      	ldr	r3, [pc, #80]	; (b5cc <_usb_d_dev_handle_setup+0xc4>)
    b57a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    b57c:	687a      	ldr	r2, [r7, #4]
    b57e:	7cd3      	ldrb	r3, [r2, #19]
    b580:	f36f 03c3 	bfc	r3, #3, #1
    b584:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    b586:	7bfb      	ldrb	r3, [r7, #15]
    b588:	2100      	movs	r1, #0
    b58a:	4618      	mov	r0, r3
    b58c:	4b10      	ldr	r3, [pc, #64]	; (b5d0 <_usb_d_dev_handle_setup+0xc8>)
    b58e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    b590:	7bfb      	ldrb	r3, [r7, #15]
    b592:	2101      	movs	r1, #1
    b594:	4618      	mov	r0, r3
    b596:	4b0e      	ldr	r3, [pc, #56]	; (b5d0 <_usb_d_dev_handle_setup+0xc8>)
    b598:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b59a:	7bfb      	ldrb	r3, [r7, #15]
    b59c:	216f      	movs	r1, #111	; 0x6f
    b59e:	4618      	mov	r0, r3
    b5a0:	4b0c      	ldr	r3, [pc, #48]	; (b5d4 <_usb_d_dev_handle_setup+0xcc>)
    b5a2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b5a4:	7bfb      	ldrb	r3, [r7, #15]
    b5a6:	216f      	movs	r1, #111	; 0x6f
    b5a8:	4618      	mov	r0, r3
    b5aa:	4b0b      	ldr	r3, [pc, #44]	; (b5d8 <_usb_d_dev_handle_setup+0xd0>)
    b5ac:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    b5ae:	4b0b      	ldr	r3, [pc, #44]	; (b5dc <_usb_d_dev_handle_setup+0xd4>)
    b5b0:	689b      	ldr	r3, [r3, #8]
    b5b2:	687a      	ldr	r2, [r7, #4]
    b5b4:	7c92      	ldrb	r2, [r2, #18]
    b5b6:	4610      	mov	r0, r2
    b5b8:	4798      	blx	r3
}
    b5ba:	3710      	adds	r7, #16
    b5bc:	46bd      	mov	sp, r7
    b5be:	bd80      	pop	{r7, pc}
    b5c0:	0000a9ad 	.word	0x0000a9ad
    b5c4:	0000a959 	.word	0x0000a959
    b5c8:	0000ac51 	.word	0x0000ac51
    b5cc:	0000aca9 	.word	0x0000aca9
    b5d0:	0000ac19 	.word	0x0000ac19
    b5d4:	0000a759 	.word	0x0000a759
    b5d8:	0000a7a9 	.word	0x0000a7a9
    b5dc:	20001f90 	.word	0x20001f90

0000b5e0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b5e0:	b580      	push	{r7, lr}
    b5e2:	b084      	sub	sp, #16
    b5e4:	af00      	add	r7, sp, #0
    b5e6:	6078      	str	r0, [r7, #4]
    b5e8:	460b      	mov	r3, r1
    b5ea:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b5ec:	687b      	ldr	r3, [r7, #4]
    b5ee:	7c9b      	ldrb	r3, [r3, #18]
    b5f0:	f003 030f 	and.w	r3, r3, #15
    b5f4:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    b5f6:	78f9      	ldrb	r1, [r7, #3]
    b5f8:	7bfb      	ldrb	r3, [r7, #15]
    b5fa:	2200      	movs	r2, #0
    b5fc:	4618      	mov	r0, r3
    b5fe:	4b07      	ldr	r3, [pc, #28]	; (b61c <_usb_d_dev_handle_stall+0x3c>)
    b600:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    b602:	4b07      	ldr	r3, [pc, #28]	; (b620 <_usb_d_dev_handle_stall+0x40>)
    b604:	691b      	ldr	r3, [r3, #16]
    b606:	687a      	ldr	r2, [r7, #4]
    b608:	7c90      	ldrb	r0, [r2, #18]
    b60a:	687a      	ldr	r2, [r7, #4]
    b60c:	6892      	ldr	r2, [r2, #8]
    b60e:	2101      	movs	r1, #1
    b610:	4798      	blx	r3
}
    b612:	bf00      	nop
    b614:	3710      	adds	r7, #16
    b616:	46bd      	mov	sp, r7
    b618:	bd80      	pop	{r7, pc}
    b61a:	bf00      	nop
    b61c:	0000a90d 	.word	0x0000a90d
    b620:	20001f90 	.word	0x20001f90

0000b624 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b624:	b580      	push	{r7, lr}
    b626:	b088      	sub	sp, #32
    b628:	af00      	add	r7, sp, #0
    b62a:	6078      	str	r0, [r7, #4]
    b62c:	460b      	mov	r3, r1
    b62e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    b630:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b634:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    b636:	687b      	ldr	r3, [r7, #4]
    b638:	7c9b      	ldrb	r3, [r3, #18]
    b63a:	f003 030f 	and.w	r3, r3, #15
    b63e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    b640:	4b61      	ldr	r3, [pc, #388]	; (b7c8 <_usb_d_dev_handle_trfail+0x1a4>)
    b642:	881b      	ldrh	r3, [r3, #0]
    b644:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    b646:	7efb      	ldrb	r3, [r7, #27]
    b648:	015b      	lsls	r3, r3, #5
    b64a:	4a60      	ldr	r2, [pc, #384]	; (b7cc <_usb_d_dev_handle_trfail+0x1a8>)
    b64c:	4413      	add	r3, r2
    b64e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    b650:	78fb      	ldrb	r3, [r7, #3]
    b652:	2b00      	cmp	r3, #0
    b654:	d006      	beq.n	b664 <_usb_d_dev_handle_trfail+0x40>
    b656:	7efb      	ldrb	r3, [r7, #27]
    b658:	4619      	mov	r1, r3
    b65a:	69f8      	ldr	r0, [r7, #28]
    b65c:	4b5c      	ldr	r3, [pc, #368]	; (b7d0 <_usb_d_dev_handle_trfail+0x1ac>)
    b65e:	4798      	blx	r3
    b660:	4603      	mov	r3, r0
    b662:	e005      	b.n	b670 <_usb_d_dev_handle_trfail+0x4c>
    b664:	7efb      	ldrb	r3, [r7, #27]
    b666:	4619      	mov	r1, r3
    b668:	69f8      	ldr	r0, [r7, #28]
    b66a:	4b5a      	ldr	r3, [pc, #360]	; (b7d4 <_usb_d_dev_handle_trfail+0x1b0>)
    b66c:	4798      	blx	r3
    b66e:	4603      	mov	r3, r0
    b670:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b672:	687b      	ldr	r3, [r7, #4]
    b674:	7cdb      	ldrb	r3, [r3, #19]
    b676:	f003 0307 	and.w	r3, r3, #7
    b67a:	b2db      	uxtb	r3, r3
    b67c:	2b01      	cmp	r3, #1
    b67e:	bf0c      	ite	eq
    b680:	2301      	moveq	r3, #1
    b682:	2300      	movne	r3, #0
    b684:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    b686:	78fb      	ldrb	r3, [r7, #3]
    b688:	011b      	lsls	r3, r3, #4
    b68a:	697a      	ldr	r2, [r7, #20]
    b68c:	4413      	add	r3, r2
    b68e:	7a9b      	ldrb	r3, [r3, #10]
    b690:	b2db      	uxtb	r3, r3
    b692:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    b694:	7cfb      	ldrb	r3, [r7, #19]
    b696:	2b02      	cmp	r3, #2
    b698:	d12f      	bne.n	b6fa <_usb_d_dev_handle_trfail+0xd6>
    b69a:	7b3b      	ldrb	r3, [r7, #12]
    b69c:	f003 0301 	and.w	r3, r3, #1
    b6a0:	b2db      	uxtb	r3, r3
    b6a2:	2b00      	cmp	r3, #0
    b6a4:	d029      	beq.n	b6fa <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    b6a6:	78fb      	ldrb	r3, [r7, #3]
    b6a8:	011b      	lsls	r3, r3, #4
    b6aa:	697a      	ldr	r2, [r7, #20]
    b6ac:	441a      	add	r2, r3
    b6ae:	7a93      	ldrb	r3, [r2, #10]
    b6b0:	f36f 0300 	bfc	r3, #0, #1
    b6b4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b6b6:	78fb      	ldrb	r3, [r7, #3]
    b6b8:	f107 0220 	add.w	r2, r7, #32
    b6bc:	4413      	add	r3, r2
    b6be:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b6c2:	7efb      	ldrb	r3, [r7, #27]
    b6c4:	4619      	mov	r1, r3
    b6c6:	69f8      	ldr	r0, [r7, #28]
    b6c8:	4b43      	ldr	r3, [pc, #268]	; (b7d8 <_usb_d_dev_handle_trfail+0x1b4>)
    b6ca:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b6cc:	78fb      	ldrb	r3, [r7, #3]
    b6ce:	f107 0220 	add.w	r2, r7, #32
    b6d2:	4413      	add	r3, r2
    b6d4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b6d8:	7efb      	ldrb	r3, [r7, #27]
    b6da:	4619      	mov	r1, r3
    b6dc:	69f8      	ldr	r0, [r7, #28]
    b6de:	4b3f      	ldr	r3, [pc, #252]	; (b7dc <_usb_d_dev_handle_trfail+0x1b8>)
    b6e0:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    b6e2:	78fb      	ldrb	r3, [r7, #3]
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	bf14      	ite	ne
    b6e8:	2301      	movne	r3, #1
    b6ea:	2300      	moveq	r3, #0
    b6ec:	b2db      	uxtb	r3, r3
    b6ee:	2204      	movs	r2, #4
    b6f0:	4619      	mov	r1, r3
    b6f2:	6878      	ldr	r0, [r7, #4]
    b6f4:	4b3a      	ldr	r3, [pc, #232]	; (b7e0 <_usb_d_dev_handle_trfail+0x1bc>)
    b6f6:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    b6f8:	e062      	b.n	b7c0 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    b6fa:	7b3b      	ldrb	r3, [r7, #12]
    b6fc:	f003 0302 	and.w	r3, r3, #2
    b700:	b2db      	uxtb	r3, r3
    b702:	2b00      	cmp	r3, #0
    b704:	d040      	beq.n	b788 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    b706:	78fb      	ldrb	r3, [r7, #3]
    b708:	011b      	lsls	r3, r3, #4
    b70a:	697a      	ldr	r2, [r7, #20]
    b70c:	441a      	add	r2, r3
    b70e:	7a93      	ldrb	r3, [r2, #10]
    b710:	f36f 0341 	bfc	r3, #1, #1
    b714:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b716:	78fb      	ldrb	r3, [r7, #3]
    b718:	f107 0220 	add.w	r2, r7, #32
    b71c:	4413      	add	r3, r2
    b71e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b722:	7efb      	ldrb	r3, [r7, #27]
    b724:	4619      	mov	r1, r3
    b726:	69f8      	ldr	r0, [r7, #28]
    b728:	4b2b      	ldr	r3, [pc, #172]	; (b7d8 <_usb_d_dev_handle_trfail+0x1b4>)
    b72a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b72c:	78fb      	ldrb	r3, [r7, #3]
    b72e:	f107 0220 	add.w	r2, r7, #32
    b732:	4413      	add	r3, r2
    b734:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b738:	7efb      	ldrb	r3, [r7, #27]
    b73a:	4619      	mov	r1, r3
    b73c:	69f8      	ldr	r0, [r7, #28]
    b73e:	4b27      	ldr	r3, [pc, #156]	; (b7dc <_usb_d_dev_handle_trfail+0x1b8>)
    b740:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    b742:	7cbb      	ldrb	r3, [r7, #18]
    b744:	2b00      	cmp	r3, #0
    b746:	d03b      	beq.n	b7c0 <_usb_d_dev_handle_trfail+0x19c>
    b748:	687b      	ldr	r3, [r7, #4]
    b74a:	7cdb      	ldrb	r3, [r3, #19]
    b74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b750:	b2db      	uxtb	r3, r3
    b752:	2b00      	cmp	r3, #0
    b754:	d034      	beq.n	b7c0 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    b756:	687b      	ldr	r3, [r7, #4]
    b758:	7cdb      	ldrb	r3, [r3, #19]
    b75a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b75e:	b2db      	uxtb	r3, r3
    b760:	461a      	mov	r2, r3
    b762:	78fb      	ldrb	r3, [r7, #3]
    b764:	4293      	cmp	r3, r2
    b766:	d02b      	beq.n	b7c0 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    b768:	687b      	ldr	r3, [r7, #4]
    b76a:	7cdb      	ldrb	r3, [r3, #19]
    b76c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b770:	b2db      	uxtb	r3, r3
    b772:	2b00      	cmp	r3, #0
    b774:	bf14      	ite	ne
    b776:	2301      	movne	r3, #1
    b778:	2300      	moveq	r3, #0
    b77a:	b2db      	uxtb	r3, r3
    b77c:	2200      	movs	r2, #0
    b77e:	4619      	mov	r1, r3
    b780:	6878      	ldr	r0, [r7, #4]
    b782:	4b17      	ldr	r3, [pc, #92]	; (b7e0 <_usb_d_dev_handle_trfail+0x1bc>)
    b784:	4798      	blx	r3
}
    b786:	e01b      	b.n	b7c0 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    b788:	78fa      	ldrb	r2, [r7, #3]
    b78a:	7efb      	ldrb	r3, [r7, #27]
    b78c:	4611      	mov	r1, r2
    b78e:	4618      	mov	r0, r3
    b790:	4b14      	ldr	r3, [pc, #80]	; (b7e4 <_usb_d_dev_handle_trfail+0x1c0>)
    b792:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b794:	78fb      	ldrb	r3, [r7, #3]
    b796:	f107 0220 	add.w	r2, r7, #32
    b79a:	4413      	add	r3, r2
    b79c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b7a0:	7efb      	ldrb	r3, [r7, #27]
    b7a2:	4619      	mov	r1, r3
    b7a4:	69f8      	ldr	r0, [r7, #28]
    b7a6:	4b0c      	ldr	r3, [pc, #48]	; (b7d8 <_usb_d_dev_handle_trfail+0x1b4>)
    b7a8:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b7aa:	78fb      	ldrb	r3, [r7, #3]
    b7ac:	f107 0220 	add.w	r2, r7, #32
    b7b0:	4413      	add	r3, r2
    b7b2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b7b6:	7efb      	ldrb	r3, [r7, #27]
    b7b8:	4619      	mov	r1, r3
    b7ba:	69f8      	ldr	r0, [r7, #28]
    b7bc:	4b07      	ldr	r3, [pc, #28]	; (b7dc <_usb_d_dev_handle_trfail+0x1b8>)
    b7be:	4798      	blx	r3
}
    b7c0:	bf00      	nop
    b7c2:	3720      	adds	r7, #32
    b7c4:	46bd      	mov	sp, r7
    b7c6:	bd80      	pop	{r7, pc}
    b7c8:	00011cf8 	.word	0x00011cf8
    b7cc:	20002058 	.word	0x20002058
    b7d0:	0000a38d 	.word	0x0000a38d
    b7d4:	0000a35d 	.word	0x0000a35d
    b7d8:	0000a231 	.word	0x0000a231
    b7dc:	0000a331 	.word	0x0000a331
    b7e0:	0000c39d 	.word	0x0000c39d
    b7e4:	0000ac19 	.word	0x0000ac19

0000b7e8 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b7e8:	b580      	push	{r7, lr}
    b7ea:	b082      	sub	sp, #8
    b7ec:	af00      	add	r7, sp, #0
    b7ee:	6078      	str	r0, [r7, #4]
    b7f0:	460b      	mov	r3, r1
    b7f2:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b7f4:	78fb      	ldrb	r3, [r7, #3]
    b7f6:	f003 0310 	and.w	r3, r3, #16
    b7fa:	2b00      	cmp	r3, #0
    b7fc:	d003      	beq.n	b806 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    b7fe:	6878      	ldr	r0, [r7, #4]
    b800:	4b0c      	ldr	r3, [pc, #48]	; (b834 <_usb_d_dev_trans_setup_isr+0x4c>)
    b802:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    b804:	e012      	b.n	b82c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b806:	78fb      	ldrb	r3, [r7, #3]
    b808:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b80c:	2b00      	cmp	r3, #0
    b80e:	d004      	beq.n	b81a <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    b810:	2101      	movs	r1, #1
    b812:	6878      	ldr	r0, [r7, #4]
    b814:	4b08      	ldr	r3, [pc, #32]	; (b838 <_usb_d_dev_trans_setup_isr+0x50>)
    b816:	4798      	blx	r3
}
    b818:	e008      	b.n	b82c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b81a:	78fb      	ldrb	r3, [r7, #3]
    b81c:	f003 0320 	and.w	r3, r3, #32
    b820:	2b00      	cmp	r3, #0
    b822:	d003      	beq.n	b82c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    b824:	2100      	movs	r1, #0
    b826:	6878      	ldr	r0, [r7, #4]
    b828:	4b03      	ldr	r3, [pc, #12]	; (b838 <_usb_d_dev_trans_setup_isr+0x50>)
    b82a:	4798      	blx	r3
}
    b82c:	bf00      	nop
    b82e:	3708      	adds	r7, #8
    b830:	46bd      	mov	sp, r7
    b832:	bd80      	pop	{r7, pc}
    b834:	0000b509 	.word	0x0000b509
    b838:	0000b5e1 	.word	0x0000b5e1

0000b83c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b83c:	b580      	push	{r7, lr}
    b83e:	b082      	sub	sp, #8
    b840:	af00      	add	r7, sp, #0
    b842:	6078      	str	r0, [r7, #4]
    b844:	460b      	mov	r3, r1
    b846:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b848:	78fb      	ldrb	r3, [r7, #3]
    b84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b84e:	2b00      	cmp	r3, #0
    b850:	d004      	beq.n	b85c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    b852:	2101      	movs	r1, #1
    b854:	6878      	ldr	r0, [r7, #4]
    b856:	4b1a      	ldr	r3, [pc, #104]	; (b8c0 <_usb_d_dev_trans_in_isr+0x84>)
    b858:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b85a:	e02c      	b.n	b8b6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b85c:	78fb      	ldrb	r3, [r7, #3]
    b85e:	f003 0308 	and.w	r3, r3, #8
    b862:	2b00      	cmp	r3, #0
    b864:	d004      	beq.n	b870 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    b866:	2101      	movs	r1, #1
    b868:	6878      	ldr	r0, [r7, #4]
    b86a:	4b16      	ldr	r3, [pc, #88]	; (b8c4 <_usb_d_dev_trans_in_isr+0x88>)
    b86c:	4798      	blx	r3
}
    b86e:	e022      	b.n	b8b6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    b870:	78fb      	ldrb	r3, [r7, #3]
    b872:	f003 0302 	and.w	r3, r3, #2
    b876:	2b00      	cmp	r3, #0
    b878:	d004      	beq.n	b884 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    b87a:	2101      	movs	r1, #1
    b87c:	6878      	ldr	r0, [r7, #4]
    b87e:	4b12      	ldr	r3, [pc, #72]	; (b8c8 <_usb_d_dev_trans_in_isr+0x8c>)
    b880:	4798      	blx	r3
}
    b882:	e018      	b.n	b8b6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b884:	687b      	ldr	r3, [r7, #4]
    b886:	7cdb      	ldrb	r3, [r3, #19]
    b888:	f003 0307 	and.w	r3, r3, #7
    b88c:	b2db      	uxtb	r3, r3
    b88e:	2b01      	cmp	r3, #1
    b890:	d111      	bne.n	b8b6 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b892:	78fb      	ldrb	r3, [r7, #3]
    b894:	f003 0304 	and.w	r3, r3, #4
    b898:	2b00      	cmp	r3, #0
    b89a:	d004      	beq.n	b8a6 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    b89c:	2100      	movs	r1, #0
    b89e:	6878      	ldr	r0, [r7, #4]
    b8a0:	4b08      	ldr	r3, [pc, #32]	; (b8c4 <_usb_d_dev_trans_in_isr+0x88>)
    b8a2:	4798      	blx	r3
}
    b8a4:	e007      	b.n	b8b6 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b8a6:	78fb      	ldrb	r3, [r7, #3]
    b8a8:	f003 0310 	and.w	r3, r3, #16
    b8ac:	2b00      	cmp	r3, #0
    b8ae:	d002      	beq.n	b8b6 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b8b0:	6878      	ldr	r0, [r7, #4]
    b8b2:	4b06      	ldr	r3, [pc, #24]	; (b8cc <_usb_d_dev_trans_in_isr+0x90>)
    b8b4:	4798      	blx	r3
}
    b8b6:	bf00      	nop
    b8b8:	3708      	adds	r7, #8
    b8ba:	46bd      	mov	sp, r7
    b8bc:	bd80      	pop	{r7, pc}
    b8be:	bf00      	nop
    b8c0:	0000b5e1 	.word	0x0000b5e1
    b8c4:	0000b625 	.word	0x0000b625
    b8c8:	0000b02d 	.word	0x0000b02d
    b8cc:	0000b509 	.word	0x0000b509

0000b8d0 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b8d0:	b580      	push	{r7, lr}
    b8d2:	b082      	sub	sp, #8
    b8d4:	af00      	add	r7, sp, #0
    b8d6:	6078      	str	r0, [r7, #4]
    b8d8:	460b      	mov	r3, r1
    b8da:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b8dc:	78fb      	ldrb	r3, [r7, #3]
    b8de:	f003 0320 	and.w	r3, r3, #32
    b8e2:	2b00      	cmp	r3, #0
    b8e4:	d004      	beq.n	b8f0 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    b8e6:	2100      	movs	r1, #0
    b8e8:	6878      	ldr	r0, [r7, #4]
    b8ea:	4b1a      	ldr	r3, [pc, #104]	; (b954 <_usb_d_dev_trans_out_isr+0x84>)
    b8ec:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b8ee:	e02c      	b.n	b94a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b8f0:	78fb      	ldrb	r3, [r7, #3]
    b8f2:	f003 0304 	and.w	r3, r3, #4
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d004      	beq.n	b904 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    b8fa:	2100      	movs	r1, #0
    b8fc:	6878      	ldr	r0, [r7, #4]
    b8fe:	4b16      	ldr	r3, [pc, #88]	; (b958 <_usb_d_dev_trans_out_isr+0x88>)
    b900:	4798      	blx	r3
}
    b902:	e022      	b.n	b94a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    b904:	78fb      	ldrb	r3, [r7, #3]
    b906:	f003 0301 	and.w	r3, r3, #1
    b90a:	2b00      	cmp	r3, #0
    b90c:	d004      	beq.n	b918 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    b90e:	2101      	movs	r1, #1
    b910:	6878      	ldr	r0, [r7, #4]
    b912:	4b12      	ldr	r3, [pc, #72]	; (b95c <_usb_d_dev_trans_out_isr+0x8c>)
    b914:	4798      	blx	r3
}
    b916:	e018      	b.n	b94a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b918:	687b      	ldr	r3, [r7, #4]
    b91a:	7cdb      	ldrb	r3, [r3, #19]
    b91c:	f003 0307 	and.w	r3, r3, #7
    b920:	b2db      	uxtb	r3, r3
    b922:	2b01      	cmp	r3, #1
    b924:	d111      	bne.n	b94a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b926:	78fb      	ldrb	r3, [r7, #3]
    b928:	f003 0308 	and.w	r3, r3, #8
    b92c:	2b00      	cmp	r3, #0
    b92e:	d004      	beq.n	b93a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    b930:	2101      	movs	r1, #1
    b932:	6878      	ldr	r0, [r7, #4]
    b934:	4b08      	ldr	r3, [pc, #32]	; (b958 <_usb_d_dev_trans_out_isr+0x88>)
    b936:	4798      	blx	r3
}
    b938:	e007      	b.n	b94a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b93a:	78fb      	ldrb	r3, [r7, #3]
    b93c:	f003 0310 	and.w	r3, r3, #16
    b940:	2b00      	cmp	r3, #0
    b942:	d002      	beq.n	b94a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b944:	6878      	ldr	r0, [r7, #4]
    b946:	4b06      	ldr	r3, [pc, #24]	; (b960 <_usb_d_dev_trans_out_isr+0x90>)
    b948:	4798      	blx	r3
}
    b94a:	bf00      	nop
    b94c:	3708      	adds	r7, #8
    b94e:	46bd      	mov	sp, r7
    b950:	bd80      	pop	{r7, pc}
    b952:	bf00      	nop
    b954:	0000b5e1 	.word	0x0000b5e1
    b958:	0000b625 	.word	0x0000b625
    b95c:	0000b245 	.word	0x0000b245
    b960:	0000b509 	.word	0x0000b509

0000b964 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    b964:	b580      	push	{r7, lr}
    b966:	b084      	sub	sp, #16
    b968:	af00      	add	r7, sp, #0
    b96a:	6078      	str	r0, [r7, #4]
    b96c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    b96e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b972:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b974:	683b      	ldr	r3, [r7, #0]
    b976:	7c9b      	ldrb	r3, [r3, #18]
    b978:	f003 030f 	and.w	r3, r3, #15
    b97c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    b97e:	7afb      	ldrb	r3, [r7, #11]
    b980:	2201      	movs	r2, #1
    b982:	409a      	lsls	r2, r3
    b984:	687b      	ldr	r3, [r7, #4]
    b986:	4013      	ands	r3, r2
    b988:	2b00      	cmp	r3, #0
    b98a:	d03d      	beq.n	ba08 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    b98c:	7afb      	ldrb	r3, [r7, #11]
    b98e:	68fa      	ldr	r2, [r7, #12]
    b990:	3308      	adds	r3, #8
    b992:	015b      	lsls	r3, r3, #5
    b994:	4413      	add	r3, r2
    b996:	3307      	adds	r3, #7
    b998:	781b      	ldrb	r3, [r3, #0]
    b99a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    b99c:	7afb      	ldrb	r3, [r7, #11]
    b99e:	68fa      	ldr	r2, [r7, #12]
    b9a0:	015b      	lsls	r3, r3, #5
    b9a2:	4413      	add	r3, r2
    b9a4:	f203 1309 	addw	r3, r3, #265	; 0x109
    b9a8:	781b      	ldrb	r3, [r3, #0]
    b9aa:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    b9ac:	7aba      	ldrb	r2, [r7, #10]
    b9ae:	7a7b      	ldrb	r3, [r7, #9]
    b9b0:	4013      	ands	r3, r2
    b9b2:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    b9b4:	7abb      	ldrb	r3, [r7, #10]
    b9b6:	2b00      	cmp	r3, #0
    b9b8:	d027      	beq.n	ba0a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    b9ba:	683b      	ldr	r3, [r7, #0]
    b9bc:	7cdb      	ldrb	r3, [r3, #19]
    b9be:	f003 0307 	and.w	r3, r3, #7
    b9c2:	b2db      	uxtb	r3, r3
    b9c4:	2b01      	cmp	r3, #1
    b9c6:	d10c      	bne.n	b9e2 <_usb_d_dev_handle_eps+0x7e>
    b9c8:	683b      	ldr	r3, [r7, #0]
    b9ca:	7cdb      	ldrb	r3, [r3, #19]
    b9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b9d0:	b2db      	uxtb	r3, r3
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	d105      	bne.n	b9e2 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    b9d6:	7abb      	ldrb	r3, [r7, #10]
    b9d8:	4619      	mov	r1, r3
    b9da:	6838      	ldr	r0, [r7, #0]
    b9dc:	4b0c      	ldr	r3, [pc, #48]	; (ba10 <_usb_d_dev_handle_eps+0xac>)
    b9de:	4798      	blx	r3
    b9e0:	e013      	b.n	ba0a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    b9e2:	683b      	ldr	r3, [r7, #0]
    b9e4:	7cdb      	ldrb	r3, [r3, #19]
    b9e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b9ea:	b2db      	uxtb	r3, r3
    b9ec:	2b00      	cmp	r3, #0
    b9ee:	d005      	beq.n	b9fc <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    b9f0:	7abb      	ldrb	r3, [r7, #10]
    b9f2:	4619      	mov	r1, r3
    b9f4:	6838      	ldr	r0, [r7, #0]
    b9f6:	4b07      	ldr	r3, [pc, #28]	; (ba14 <_usb_d_dev_handle_eps+0xb0>)
    b9f8:	4798      	blx	r3
    b9fa:	e006      	b.n	ba0a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    b9fc:	7abb      	ldrb	r3, [r7, #10]
    b9fe:	4619      	mov	r1, r3
    ba00:	6838      	ldr	r0, [r7, #0]
    ba02:	4b05      	ldr	r3, [pc, #20]	; (ba18 <_usb_d_dev_handle_eps+0xb4>)
    ba04:	4798      	blx	r3
    ba06:	e000      	b.n	ba0a <_usb_d_dev_handle_eps+0xa6>
		return;
    ba08:	bf00      	nop
		}
	}
}
    ba0a:	3710      	adds	r7, #16
    ba0c:	46bd      	mov	sp, r7
    ba0e:	bd80      	pop	{r7, pc}
    ba10:	0000b7e9 	.word	0x0000b7e9
    ba14:	0000b83d 	.word	0x0000b83d
    ba18:	0000b8d1 	.word	0x0000b8d1

0000ba1c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    ba1c:	b580      	push	{r7, lr}
    ba1e:	b084      	sub	sp, #16
    ba20:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ba22:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ba26:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    ba28:	68bb      	ldr	r3, [r7, #8]
    ba2a:	8c1b      	ldrh	r3, [r3, #32]
    ba2c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    ba2e:	88fb      	ldrh	r3, [r7, #6]
    ba30:	2b00      	cmp	r3, #0
    ba32:	d104      	bne.n	ba3e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    ba34:	4b13      	ldr	r3, [pc, #76]	; (ba84 <_usb_d_dev_handler+0x68>)
    ba36:	4798      	blx	r3
    ba38:	4603      	mov	r3, r0
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d11e      	bne.n	ba7c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    ba3e:	2300      	movs	r3, #0
    ba40:	73fb      	strb	r3, [r7, #15]
    ba42:	e017      	b.n	ba74 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    ba44:	7bfa      	ldrb	r2, [r7, #15]
    ba46:	4613      	mov	r3, r2
    ba48:	009b      	lsls	r3, r3, #2
    ba4a:	4413      	add	r3, r2
    ba4c:	009b      	lsls	r3, r3, #2
    ba4e:	3310      	adds	r3, #16
    ba50:	4a0d      	ldr	r2, [pc, #52]	; (ba88 <_usb_d_dev_handler+0x6c>)
    ba52:	4413      	add	r3, r2
    ba54:	3304      	adds	r3, #4
    ba56:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    ba58:	683b      	ldr	r3, [r7, #0]
    ba5a:	7c9b      	ldrb	r3, [r3, #18]
    ba5c:	2bff      	cmp	r3, #255	; 0xff
    ba5e:	d005      	beq.n	ba6c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    ba60:	88fb      	ldrh	r3, [r7, #6]
    ba62:	6839      	ldr	r1, [r7, #0]
    ba64:	4618      	mov	r0, r3
    ba66:	4b09      	ldr	r3, [pc, #36]	; (ba8c <_usb_d_dev_handler+0x70>)
    ba68:	4798      	blx	r3
    ba6a:	e000      	b.n	ba6e <_usb_d_dev_handler+0x52>
			continue;
    ba6c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    ba6e:	7bfb      	ldrb	r3, [r7, #15]
    ba70:	3301      	adds	r3, #1
    ba72:	73fb      	strb	r3, [r7, #15]
    ba74:	7bfb      	ldrb	r3, [r7, #15]
    ba76:	2b08      	cmp	r3, #8
    ba78:	d9e4      	bls.n	ba44 <_usb_d_dev_handler+0x28>
    ba7a:	e000      	b.n	ba7e <_usb_d_dev_handler+0x62>
			return;
    ba7c:	bf00      	nop
	}
}
    ba7e:	3710      	adds	r7, #16
    ba80:	46bd      	mov	sp, r7
    ba82:	bd80      	pop	{r7, pc}
    ba84:	0000af75 	.word	0x0000af75
    ba88:	20001f90 	.word	0x20001f90
    ba8c:	0000b965 	.word	0x0000b965

0000ba90 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    ba90:	b580      	push	{r7, lr}
    ba92:	b082      	sub	sp, #8
    ba94:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    ba96:	2300      	movs	r3, #0
    ba98:	71fb      	strb	r3, [r7, #7]
    ba9a:	e023      	b.n	bae4 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    ba9c:	79fa      	ldrb	r2, [r7, #7]
    ba9e:	4613      	mov	r3, r2
    baa0:	009b      	lsls	r3, r3, #2
    baa2:	4413      	add	r3, r2
    baa4:	009b      	lsls	r3, r3, #2
    baa6:	3310      	adds	r3, #16
    baa8:	4a14      	ldr	r2, [pc, #80]	; (bafc <_usb_d_dev_reset_epts+0x6c>)
    baaa:	4413      	add	r3, r2
    baac:	3304      	adds	r3, #4
    baae:	2103      	movs	r1, #3
    bab0:	4618      	mov	r0, r3
    bab2:	4b13      	ldr	r3, [pc, #76]	; (bb00 <_usb_d_dev_reset_epts+0x70>)
    bab4:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    bab6:	79fa      	ldrb	r2, [r7, #7]
    bab8:	4910      	ldr	r1, [pc, #64]	; (bafc <_usb_d_dev_reset_epts+0x6c>)
    baba:	4613      	mov	r3, r2
    babc:	009b      	lsls	r3, r3, #2
    babe:	4413      	add	r3, r2
    bac0:	009b      	lsls	r3, r3, #2
    bac2:	440b      	add	r3, r1
    bac4:	3326      	adds	r3, #38	; 0x26
    bac6:	22ff      	movs	r2, #255	; 0xff
    bac8:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    baca:	79fa      	ldrb	r2, [r7, #7]
    bacc:	490b      	ldr	r1, [pc, #44]	; (bafc <_usb_d_dev_reset_epts+0x6c>)
    bace:	4613      	mov	r3, r2
    bad0:	009b      	lsls	r3, r3, #2
    bad2:	4413      	add	r3, r2
    bad4:	009b      	lsls	r3, r3, #2
    bad6:	440b      	add	r3, r1
    bad8:	3327      	adds	r3, #39	; 0x27
    bada:	2200      	movs	r2, #0
    badc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    bade:	79fb      	ldrb	r3, [r7, #7]
    bae0:	3301      	adds	r3, #1
    bae2:	71fb      	strb	r3, [r7, #7]
    bae4:	79fb      	ldrb	r3, [r7, #7]
    bae6:	2b08      	cmp	r3, #8
    bae8:	d9d8      	bls.n	ba9c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    baea:	22a0      	movs	r2, #160	; 0xa0
    baec:	2100      	movs	r1, #0
    baee:	4805      	ldr	r0, [pc, #20]	; (bb04 <_usb_d_dev_reset_epts+0x74>)
    baf0:	4b05      	ldr	r3, [pc, #20]	; (bb08 <_usb_d_dev_reset_epts+0x78>)
    baf2:	4798      	blx	r3
}
    baf4:	bf00      	nop
    baf6:	3708      	adds	r7, #8
    baf8:	46bd      	mov	sp, r7
    bafa:	bd80      	pop	{r7, pc}
    bafc:	20001f90 	.word	0x20001f90
    bb00:	0000c355 	.word	0x0000c355
    bb04:	20002058 	.word	0x20002058
    bb08:	0001095d 	.word	0x0001095d

0000bb0c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    bb0c:	b580      	push	{r7, lr}
    bb0e:	b084      	sub	sp, #16
    bb10:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    bb12:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bb16:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    bb18:	2301      	movs	r3, #1
    bb1a:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    bb1c:	2304      	movs	r3, #4
    bb1e:	713b      	strb	r3, [r7, #4]
    bb20:	2300      	movs	r3, #0
    bb22:	717b      	strb	r3, [r7, #5]
    bb24:	2300      	movs	r3, #0
    bb26:	71bb      	strb	r3, [r7, #6]
    bb28:	2300      	movs	r3, #0
    bb2a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    bb2c:	2101      	movs	r1, #1
    bb2e:	68f8      	ldr	r0, [r7, #12]
    bb30:	4b26      	ldr	r3, [pc, #152]	; (bbcc <_usb_d_dev_init+0xc0>)
    bb32:	4798      	blx	r3
    bb34:	4603      	mov	r3, r0
    bb36:	f083 0301 	eor.w	r3, r3, #1
    bb3a:	b2db      	uxtb	r3, r3
    bb3c:	2b00      	cmp	r3, #0
    bb3e:	d011      	beq.n	bb64 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    bb40:	2102      	movs	r1, #2
    bb42:	68f8      	ldr	r0, [r7, #12]
    bb44:	4b22      	ldr	r3, [pc, #136]	; (bbd0 <_usb_d_dev_init+0xc4>)
    bb46:	4798      	blx	r3
    bb48:	4603      	mov	r3, r0
    bb4a:	2b00      	cmp	r3, #0
    bb4c:	d006      	beq.n	bb5c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    bb4e:	68f8      	ldr	r0, [r7, #12]
    bb50:	4b20      	ldr	r3, [pc, #128]	; (bbd4 <_usb_d_dev_init+0xc8>)
    bb52:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    bb54:	2102      	movs	r1, #2
    bb56:	68f8      	ldr	r0, [r7, #12]
    bb58:	4b1f      	ldr	r3, [pc, #124]	; (bbd8 <_usb_d_dev_init+0xcc>)
    bb5a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    bb5c:	2101      	movs	r1, #1
    bb5e:	68f8      	ldr	r0, [r7, #12]
    bb60:	4b1e      	ldr	r3, [pc, #120]	; (bbdc <_usb_d_dev_init+0xd0>)
    bb62:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    bb64:	2101      	movs	r1, #1
    bb66:	68f8      	ldr	r0, [r7, #12]
    bb68:	4b1b      	ldr	r3, [pc, #108]	; (bbd8 <_usb_d_dev_init+0xcc>)
    bb6a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    bb6c:	4b1c      	ldr	r3, [pc, #112]	; (bbe0 <_usb_d_dev_init+0xd4>)
    bb6e:	4a1d      	ldr	r2, [pc, #116]	; (bbe4 <_usb_d_dev_init+0xd8>)
    bb70:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    bb72:	4b1b      	ldr	r3, [pc, #108]	; (bbe0 <_usb_d_dev_init+0xd4>)
    bb74:	4a1b      	ldr	r2, [pc, #108]	; (bbe4 <_usb_d_dev_init+0xd8>)
    bb76:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    bb78:	4b19      	ldr	r3, [pc, #100]	; (bbe0 <_usb_d_dev_init+0xd4>)
    bb7a:	4a1a      	ldr	r2, [pc, #104]	; (bbe4 <_usb_d_dev_init+0xd8>)
    bb7c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    bb7e:	4b18      	ldr	r3, [pc, #96]	; (bbe0 <_usb_d_dev_init+0xd4>)
    bb80:	4a18      	ldr	r2, [pc, #96]	; (bbe4 <_usb_d_dev_init+0xd8>)
    bb82:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    bb84:	4b16      	ldr	r3, [pc, #88]	; (bbe0 <_usb_d_dev_init+0xd4>)
    bb86:	4a17      	ldr	r2, [pc, #92]	; (bbe4 <_usb_d_dev_init+0xd8>)
    bb88:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    bb8a:	4b17      	ldr	r3, [pc, #92]	; (bbe8 <_usb_d_dev_init+0xdc>)
    bb8c:	4798      	blx	r3

	_usb_load_calib();
    bb8e:	4b17      	ldr	r3, [pc, #92]	; (bbec <_usb_d_dev_init+0xe0>)
    bb90:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    bb92:	2104      	movs	r1, #4
    bb94:	68f8      	ldr	r0, [r7, #12]
    bb96:	4b11      	ldr	r3, [pc, #68]	; (bbdc <_usb_d_dev_init+0xd0>)
    bb98:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    bb9a:	4b15      	ldr	r3, [pc, #84]	; (bbf0 <_usb_d_dev_init+0xe4>)
    bb9c:	4619      	mov	r1, r3
    bb9e:	68f8      	ldr	r0, [r7, #12]
    bba0:	4b14      	ldr	r3, [pc, #80]	; (bbf4 <_usb_d_dev_init+0xe8>)
    bba2:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    bba4:	7afb      	ldrb	r3, [r7, #11]
    bba6:	f107 0210 	add.w	r2, r7, #16
    bbaa:	4413      	add	r3, r2
    bbac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    bbb0:	f043 0301 	orr.w	r3, r3, #1
    bbb4:	b2db      	uxtb	r3, r3
    bbb6:	b29b      	uxth	r3, r3
    bbb8:	4619      	mov	r1, r3
    bbba:	68f8      	ldr	r0, [r7, #12]
    bbbc:	4b0e      	ldr	r3, [pc, #56]	; (bbf8 <_usb_d_dev_init+0xec>)
    bbbe:	4798      	blx	r3

	return ERR_NONE;
    bbc0:	2300      	movs	r3, #0
}
    bbc2:	4618      	mov	r0, r3
    bbc4:	3710      	adds	r7, #16
    bbc6:	46bd      	mov	sp, r7
    bbc8:	bd80      	pop	{r7, pc}
    bbca:	bf00      	nop
    bbcc:	0000a1a5 	.word	0x0000a1a5
    bbd0:	0000a4f5 	.word	0x0000a4f5
    bbd4:	0000a4c9 	.word	0x0000a4c9
    bbd8:	0000a17b 	.word	0x0000a17b
    bbdc:	0000a525 	.word	0x0000a525
    bbe0:	20001f90 	.word	0x20001f90
    bbe4:	0000a5ed 	.word	0x0000a5ed
    bbe8:	0000ba91 	.word	0x0000ba91
    bbec:	0000a605 	.word	0x0000a605
    bbf0:	20002058 	.word	0x20002058
    bbf4:	0000a5d1 	.word	0x0000a5d1
    bbf8:	0000a595 	.word	0x0000a595

0000bbfc <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    bbfc:	b580      	push	{r7, lr}
    bbfe:	b082      	sub	sp, #8
    bc00:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    bc02:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bc06:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    bc08:	2103      	movs	r1, #3
    bc0a:	6878      	ldr	r0, [r7, #4]
    bc0c:	4b17      	ldr	r3, [pc, #92]	; (bc6c <_usb_d_dev_enable+0x70>)
    bc0e:	4798      	blx	r3
    bc10:	4603      	mov	r3, r0
    bc12:	2b00      	cmp	r3, #0
    bc14:	d002      	beq.n	bc1c <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    bc16:	f06f 0310 	mvn.w	r3, #16
    bc1a:	e023      	b.n	bc64 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    bc1c:	6878      	ldr	r0, [r7, #4]
    bc1e:	4b14      	ldr	r3, [pc, #80]	; (bc70 <_usb_d_dev_enable+0x74>)
    bc20:	4798      	blx	r3
    bc22:	4603      	mov	r3, r0
    bc24:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    bc26:	78fb      	ldrb	r3, [r7, #3]
    bc28:	f003 0302 	and.w	r3, r3, #2
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	d107      	bne.n	bc40 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    bc30:	78fb      	ldrb	r3, [r7, #3]
    bc32:	f043 0302 	orr.w	r3, r3, #2
    bc36:	b2db      	uxtb	r3, r3
    bc38:	4619      	mov	r1, r3
    bc3a:	6878      	ldr	r0, [r7, #4]
    bc3c:	4b0d      	ldr	r3, [pc, #52]	; (bc74 <_usb_d_dev_enable+0x78>)
    bc3e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    bc40:	2050      	movs	r0, #80	; 0x50
    bc42:	4b0d      	ldr	r3, [pc, #52]	; (bc78 <_usb_d_dev_enable+0x7c>)
    bc44:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    bc46:	2051      	movs	r0, #81	; 0x51
    bc48:	4b0b      	ldr	r3, [pc, #44]	; (bc78 <_usb_d_dev_enable+0x7c>)
    bc4a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    bc4c:	2052      	movs	r0, #82	; 0x52
    bc4e:	4b0a      	ldr	r3, [pc, #40]	; (bc78 <_usb_d_dev_enable+0x7c>)
    bc50:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    bc52:	2053      	movs	r0, #83	; 0x53
    bc54:	4b08      	ldr	r3, [pc, #32]	; (bc78 <_usb_d_dev_enable+0x7c>)
    bc56:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    bc58:	f240 218d 	movw	r1, #653	; 0x28d
    bc5c:	6878      	ldr	r0, [r7, #4]
    bc5e:	4b07      	ldr	r3, [pc, #28]	; (bc7c <_usb_d_dev_enable+0x80>)
    bc60:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    bc62:	2300      	movs	r3, #0
}
    bc64:	4618      	mov	r0, r3
    bc66:	3708      	adds	r7, #8
    bc68:	46bd      	mov	sp, r7
    bc6a:	bd80      	pop	{r7, pc}
    bc6c:	0000a49f 	.word	0x0000a49f
    bc70:	0000a54d 	.word	0x0000a54d
    bc74:	0000a525 	.word	0x0000a525
    bc78:	0000a0b1 	.word	0x0000a0b1
    bc7c:	0000a449 	.word	0x0000a449

0000bc80 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    bc80:	b580      	push	{r7, lr}
    bc82:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    bc84:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bc88:	4b01      	ldr	r3, [pc, #4]	; (bc90 <_usb_d_dev_attach+0x10>)
    bc8a:	4798      	blx	r3
}
    bc8c:	bf00      	nop
    bc8e:	bd80      	pop	{r7, pc}
    bc90:	0000a571 	.word	0x0000a571

0000bc94 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    bc94:	b580      	push	{r7, lr}
    bc96:	b082      	sub	sp, #8
    bc98:	af00      	add	r7, sp, #0
    bc9a:	4603      	mov	r3, r0
    bc9c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    bc9e:	79fb      	ldrb	r3, [r7, #7]
    bca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bca4:	b2db      	uxtb	r3, r3
    bca6:	4619      	mov	r1, r3
    bca8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bcac:	4b02      	ldr	r3, [pc, #8]	; (bcb8 <_usb_d_dev_set_address+0x24>)
    bcae:	4798      	blx	r3
}
    bcb0:	bf00      	nop
    bcb2:	3708      	adds	r7, #8
    bcb4:	46bd      	mov	sp, r7
    bcb6:	bd80      	pop	{r7, pc}
    bcb8:	0000a5b3 	.word	0x0000a5b3

0000bcbc <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    bcbc:	b590      	push	{r4, r7, lr}
    bcbe:	b085      	sub	sp, #20
    bcc0:	af00      	add	r7, sp, #0
    bcc2:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    bcc4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bcc8:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bcca:	687b      	ldr	r3, [r7, #4]
    bccc:	7c9b      	ldrb	r3, [r3, #18]
    bcce:	f003 030f 	and.w	r3, r3, #15
    bcd2:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bcd4:	687b      	ldr	r3, [r7, #4]
    bcd6:	68db      	ldr	r3, [r3, #12]
    bcd8:	461a      	mov	r2, r3
    bcda:	7afb      	ldrb	r3, [r7, #11]
    bcdc:	2100      	movs	r1, #0
    bcde:	4618      	mov	r0, r3
    bce0:	4b0f      	ldr	r3, [pc, #60]	; (bd20 <_usb_d_dev_trans_setup+0x64>)
    bce2:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    bce4:	687b      	ldr	r3, [r7, #4]
    bce6:	8a1b      	ldrh	r3, [r3, #16]
    bce8:	461a      	mov	r2, r3
    bcea:	7af8      	ldrb	r0, [r7, #11]
    bcec:	2300      	movs	r3, #0
    bcee:	2100      	movs	r1, #0
    bcf0:	4c0c      	ldr	r4, [pc, #48]	; (bd24 <_usb_d_dev_trans_setup+0x68>)
    bcf2:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    bcf4:	7afb      	ldrb	r3, [r7, #11]
    bcf6:	22b0      	movs	r2, #176	; 0xb0
    bcf8:	4619      	mov	r1, r3
    bcfa:	68f8      	ldr	r0, [r7, #12]
    bcfc:	4b0a      	ldr	r3, [pc, #40]	; (bd28 <_usb_d_dev_trans_setup+0x6c>)
    bcfe:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    bd00:	7afb      	ldrb	r3, [r7, #11]
    bd02:	2200      	movs	r2, #0
    bd04:	2100      	movs	r1, #0
    bd06:	4618      	mov	r0, r3
    bd08:	4b08      	ldr	r3, [pc, #32]	; (bd2c <_usb_d_dev_trans_setup+0x70>)
    bd0a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    bd0c:	7afb      	ldrb	r3, [r7, #11]
    bd0e:	2210      	movs	r2, #16
    bd10:	4619      	mov	r1, r3
    bd12:	68f8      	ldr	r0, [r7, #12]
    bd14:	4b06      	ldr	r3, [pc, #24]	; (bd30 <_usb_d_dev_trans_setup+0x74>)
    bd16:	4798      	blx	r3
}
    bd18:	bf00      	nop
    bd1a:	3714      	adds	r7, #20
    bd1c:	46bd      	mov	sp, r7
    bd1e:	bd90      	pop	{r4, r7, pc}
    bd20:	0000aa51 	.word	0x0000aa51
    bd24:	0000abd9 	.word	0x0000abd9
    bd28:	0000a2b1 	.word	0x0000a2b1
    bd2c:	0000aca9 	.word	0x0000aca9
    bd30:	0000a305 	.word	0x0000a305

0000bd34 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    bd34:	b580      	push	{r7, lr}
    bd36:	b088      	sub	sp, #32
    bd38:	af00      	add	r7, sp, #0
    bd3a:	4603      	mov	r3, r0
    bd3c:	71fb      	strb	r3, [r7, #7]
    bd3e:	460b      	mov	r3, r1
    bd40:	71bb      	strb	r3, [r7, #6]
    bd42:	4613      	mov	r3, r2
    bd44:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    bd46:	79fb      	ldrb	r3, [r7, #7]
    bd48:	f003 030f 	and.w	r3, r3, #15
    bd4c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    bd4e:	79fb      	ldrb	r3, [r7, #7]
    bd50:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd54:	2b00      	cmp	r3, #0
    bd56:	bf14      	ite	ne
    bd58:	2301      	movne	r3, #1
    bd5a:	2300      	moveq	r3, #0
    bd5c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bd5e:	7fba      	ldrb	r2, [r7, #30]
    bd60:	7ffb      	ldrb	r3, [r7, #31]
    bd62:	4611      	mov	r1, r2
    bd64:	4618      	mov	r0, r3
    bd66:	4b3e      	ldr	r3, [pc, #248]	; (be60 <_usb_d_dev_ep_init+0x12c>)
    bd68:	4798      	blx	r3
    bd6a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    bd6c:	79bb      	ldrb	r3, [r7, #6]
    bd6e:	f003 0303 	and.w	r3, r3, #3
    bd72:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    bd74:	7ffa      	ldrb	r2, [r7, #31]
    bd76:	4613      	mov	r3, r2
    bd78:	005b      	lsls	r3, r3, #1
    bd7a:	4413      	add	r3, r2
    bd7c:	009b      	lsls	r3, r3, #2
    bd7e:	4a39      	ldr	r2, [pc, #228]	; (be64 <_usb_d_dev_ep_init+0x130>)
    bd80:	4413      	add	r3, r2
    bd82:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    bd84:	7ffb      	ldrb	r3, [r7, #31]
    bd86:	2b04      	cmp	r3, #4
    bd88:	d902      	bls.n	bd90 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    bd8a:	f06f 0311 	mvn.w	r3, #17
    bd8e:	e063      	b.n	be58 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    bd90:	69bb      	ldr	r3, [r7, #24]
    bd92:	7c9b      	ldrb	r3, [r3, #18]
    bd94:	2bff      	cmp	r3, #255	; 0xff
    bd96:	d002      	beq.n	bd9e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    bd98:	f06f 0313 	mvn.w	r3, #19
    bd9c:	e05c      	b.n	be58 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    bd9e:	7dfb      	ldrb	r3, [r7, #23]
    bda0:	2b00      	cmp	r3, #0
    bda2:	d11f      	bne.n	bde4 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    bda4:	7fbb      	ldrb	r3, [r7, #30]
    bda6:	2b00      	cmp	r3, #0
    bda8:	bf14      	ite	ne
    bdaa:	2301      	movne	r3, #1
    bdac:	2300      	moveq	r3, #0
    bdae:	b2db      	uxtb	r3, r3
    bdb0:	f083 0301 	eor.w	r3, r3, #1
    bdb4:	b2db      	uxtb	r3, r3
    bdb6:	f003 0301 	and.w	r3, r3, #1
    bdba:	b2da      	uxtb	r2, r3
    bdbc:	7ffb      	ldrb	r3, [r7, #31]
    bdbe:	4611      	mov	r1, r2
    bdc0:	4618      	mov	r0, r3
    bdc2:	4b27      	ldr	r3, [pc, #156]	; (be60 <_usb_d_dev_ep_init+0x12c>)
    bdc4:	4798      	blx	r3
    bdc6:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    bdc8:	68fb      	ldr	r3, [r7, #12]
    bdca:	7c9b      	ldrb	r3, [r3, #18]
    bdcc:	2bff      	cmp	r3, #255	; 0xff
    bdce:	d002      	beq.n	bdd6 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    bdd0:	f06f 0313 	mvn.w	r3, #19
    bdd4:	e040      	b.n	be58 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    bdd6:	693b      	ldr	r3, [r7, #16]
    bdd8:	681b      	ldr	r3, [r3, #0]
    bdda:	2b00      	cmp	r3, #0
    bddc:	d102      	bne.n	bde4 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    bdde:	f06f 0312 	mvn.w	r3, #18
    bde2:	e039      	b.n	be58 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    bde4:	7fbb      	ldrb	r3, [r7, #30]
    bde6:	2b00      	cmp	r3, #0
    bde8:	d007      	beq.n	bdfa <_usb_d_dev_ep_init+0xc6>
    bdea:	693b      	ldr	r3, [r7, #16]
    bdec:	685b      	ldr	r3, [r3, #4]
    bdee:	2b00      	cmp	r3, #0
    bdf0:	bf14      	ite	ne
    bdf2:	2301      	movne	r3, #1
    bdf4:	2300      	moveq	r3, #0
    bdf6:	b2db      	uxtb	r3, r3
    bdf8:	e006      	b.n	be08 <_usb_d_dev_ep_init+0xd4>
    bdfa:	693b      	ldr	r3, [r7, #16]
    bdfc:	681b      	ldr	r3, [r3, #0]
    bdfe:	2b00      	cmp	r3, #0
    be00:	bf14      	ite	ne
    be02:	2301      	movne	r3, #1
    be04:	2300      	moveq	r3, #0
    be06:	b2db      	uxtb	r3, r3
    be08:	2b00      	cmp	r3, #0
    be0a:	d00f      	beq.n	be2c <_usb_d_dev_ep_init+0xf8>
    be0c:	7fbb      	ldrb	r3, [r7, #30]
    be0e:	2b00      	cmp	r3, #0
    be10:	d003      	beq.n	be1a <_usb_d_dev_ep_init+0xe6>
    be12:	693b      	ldr	r3, [r7, #16]
    be14:	895b      	ldrh	r3, [r3, #10]
    be16:	461a      	mov	r2, r3
    be18:	e002      	b.n	be20 <_usb_d_dev_ep_init+0xec>
    be1a:	693b      	ldr	r3, [r7, #16]
    be1c:	891b      	ldrh	r3, [r3, #8]
    be1e:	461a      	mov	r2, r3
    be20:	88bb      	ldrh	r3, [r7, #4]
    be22:	429a      	cmp	r2, r3
    be24:	da02      	bge.n	be2c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    be26:	f06f 0312 	mvn.w	r3, #18
    be2a:	e015      	b.n	be58 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    be2c:	7fbb      	ldrb	r3, [r7, #30]
    be2e:	2b00      	cmp	r3, #0
    be30:	d002      	beq.n	be38 <_usb_d_dev_ep_init+0x104>
    be32:	693b      	ldr	r3, [r7, #16]
    be34:	685b      	ldr	r3, [r3, #4]
    be36:	e001      	b.n	be3c <_usb_d_dev_ep_init+0x108>
    be38:	693b      	ldr	r3, [r7, #16]
    be3a:	681b      	ldr	r3, [r3, #0]
    be3c:	69ba      	ldr	r2, [r7, #24]
    be3e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    be40:	69bb      	ldr	r3, [r7, #24]
    be42:	88ba      	ldrh	r2, [r7, #4]
    be44:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    be46:	7dfb      	ldrb	r3, [r7, #23]
    be48:	3301      	adds	r3, #1
    be4a:	b2da      	uxtb	r2, r3
    be4c:	69bb      	ldr	r3, [r7, #24]
    be4e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    be50:	69bb      	ldr	r3, [r7, #24]
    be52:	79fa      	ldrb	r2, [r7, #7]
    be54:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    be56:	2300      	movs	r3, #0
}
    be58:	4618      	mov	r0, r3
    be5a:	3720      	adds	r7, #32
    be5c:	46bd      	mov	sp, r7
    be5e:	bd80      	pop	{r7, pc}
    be60:	0000ad65 	.word	0x0000ad65
    be64:	00011cbc 	.word	0x00011cbc

0000be68 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    be68:	b580      	push	{r7, lr}
    be6a:	b086      	sub	sp, #24
    be6c:	af00      	add	r7, sp, #0
    be6e:	4603      	mov	r3, r0
    be70:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    be72:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    be76:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    be78:	79fb      	ldrb	r3, [r7, #7]
    be7a:	f003 030f 	and.w	r3, r3, #15
    be7e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    be80:	79fb      	ldrb	r3, [r7, #7]
    be82:	f003 0380 	and.w	r3, r3, #128	; 0x80
    be86:	2b00      	cmp	r3, #0
    be88:	bf14      	ite	ne
    be8a:	2301      	movne	r3, #1
    be8c:	2300      	moveq	r3, #0
    be8e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    be90:	7cba      	ldrb	r2, [r7, #18]
    be92:	7cfb      	ldrb	r3, [r7, #19]
    be94:	4611      	mov	r1, r2
    be96:	4618      	mov	r0, r3
    be98:	4b2a      	ldr	r3, [pc, #168]	; (bf44 <_usb_d_dev_ep_deinit+0xdc>)
    be9a:	4798      	blx	r3
    be9c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    be9e:	7cfb      	ldrb	r3, [r7, #19]
    bea0:	2b04      	cmp	r3, #4
    bea2:	d84a      	bhi.n	bf3a <_usb_d_dev_ep_deinit+0xd2>
    bea4:	68fb      	ldr	r3, [r7, #12]
    bea6:	7c9b      	ldrb	r3, [r3, #18]
    bea8:	2bff      	cmp	r3, #255	; 0xff
    beaa:	d046      	beq.n	bf3a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    beac:	7cbb      	ldrb	r3, [r7, #18]
    beae:	2203      	movs	r2, #3
    beb0:	4619      	mov	r1, r3
    beb2:	68f8      	ldr	r0, [r7, #12]
    beb4:	4b24      	ldr	r3, [pc, #144]	; (bf48 <_usb_d_dev_ep_deinit+0xe0>)
    beb6:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    beb8:	68fb      	ldr	r3, [r7, #12]
    beba:	7cdb      	ldrb	r3, [r3, #19]
    bebc:	f003 0307 	and.w	r3, r3, #7
    bec0:	b2db      	uxtb	r3, r3
    bec2:	2b01      	cmp	r3, #1
    bec4:	d107      	bne.n	bed6 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    bec6:	79fb      	ldrb	r3, [r7, #7]
    bec8:	697a      	ldr	r2, [r7, #20]
    beca:	3308      	adds	r3, #8
    becc:	015b      	lsls	r3, r3, #5
    bece:	4413      	add	r3, r2
    bed0:	2200      	movs	r2, #0
    bed2:	701a      	strb	r2, [r3, #0]
    bed4:	e02a      	b.n	bf2c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    bed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    beda:	2b00      	cmp	r3, #0
    bedc:	da15      	bge.n	bf0a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    bede:	79fb      	ldrb	r3, [r7, #7]
    bee0:	f003 030f 	and.w	r3, r3, #15
    bee4:	79fa      	ldrb	r2, [r7, #7]
    bee6:	f002 020f 	and.w	r2, r2, #15
    beea:	6979      	ldr	r1, [r7, #20]
    beec:	3208      	adds	r2, #8
    beee:	0152      	lsls	r2, r2, #5
    bef0:	440a      	add	r2, r1
    bef2:	7812      	ldrb	r2, [r2, #0]
    bef4:	b2d2      	uxtb	r2, r2
    bef6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    befa:	b2d1      	uxtb	r1, r2
    befc:	697a      	ldr	r2, [r7, #20]
    befe:	3308      	adds	r3, #8
    bf00:	015b      	lsls	r3, r3, #5
    bf02:	4413      	add	r3, r2
    bf04:	460a      	mov	r2, r1
    bf06:	701a      	strb	r2, [r3, #0]
    bf08:	e010      	b.n	bf2c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    bf0a:	79fb      	ldrb	r3, [r7, #7]
    bf0c:	79fa      	ldrb	r2, [r7, #7]
    bf0e:	6979      	ldr	r1, [r7, #20]
    bf10:	3208      	adds	r2, #8
    bf12:	0152      	lsls	r2, r2, #5
    bf14:	440a      	add	r2, r1
    bf16:	7812      	ldrb	r2, [r2, #0]
    bf18:	b2d2      	uxtb	r2, r2
    bf1a:	f022 0207 	bic.w	r2, r2, #7
    bf1e:	b2d1      	uxtb	r1, r2
    bf20:	697a      	ldr	r2, [r7, #20]
    bf22:	3308      	adds	r3, #8
    bf24:	015b      	lsls	r3, r3, #5
    bf26:	4413      	add	r3, r2
    bf28:	460a      	mov	r2, r1
    bf2a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    bf2c:	68fb      	ldr	r3, [r7, #12]
    bf2e:	2200      	movs	r2, #0
    bf30:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    bf32:	68fb      	ldr	r3, [r7, #12]
    bf34:	22ff      	movs	r2, #255	; 0xff
    bf36:	749a      	strb	r2, [r3, #18]
    bf38:	e000      	b.n	bf3c <_usb_d_dev_ep_deinit+0xd4>
		return;
    bf3a:	bf00      	nop
}
    bf3c:	3718      	adds	r7, #24
    bf3e:	46bd      	mov	sp, r7
    bf40:	bd80      	pop	{r7, pc}
    bf42:	bf00      	nop
    bf44:	0000ad65 	.word	0x0000ad65
    bf48:	0000c39d 	.word	0x0000c39d

0000bf4c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    bf4c:	b5b0      	push	{r4, r5, r7, lr}
    bf4e:	b088      	sub	sp, #32
    bf50:	af00      	add	r7, sp, #0
    bf52:	4603      	mov	r3, r0
    bf54:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    bf56:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf5a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    bf5c:	79fb      	ldrb	r3, [r7, #7]
    bf5e:	f003 030f 	and.w	r3, r3, #15
    bf62:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    bf64:	79fb      	ldrb	r3, [r7, #7]
    bf66:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf6a:	2b00      	cmp	r3, #0
    bf6c:	bf14      	ite	ne
    bf6e:	2301      	movne	r3, #1
    bf70:	2300      	moveq	r3, #0
    bf72:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    bf74:	7eba      	ldrb	r2, [r7, #26]
    bf76:	7efb      	ldrb	r3, [r7, #27]
    bf78:	4611      	mov	r1, r2
    bf7a:	4618      	mov	r0, r3
    bf7c:	4b70      	ldr	r3, [pc, #448]	; (c140 <_usb_d_dev_ep_enable+0x1f4>)
    bf7e:	4798      	blx	r3
    bf80:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    bf82:	7efb      	ldrb	r3, [r7, #27]
    bf84:	4619      	mov	r1, r3
    bf86:	69f8      	ldr	r0, [r7, #28]
    bf88:	4b6e      	ldr	r3, [pc, #440]	; (c144 <_usb_d_dev_ep_enable+0x1f8>)
    bf8a:	4798      	blx	r3
    bf8c:	4603      	mov	r3, r0
    bf8e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    bf90:	7efb      	ldrb	r3, [r7, #27]
    bf92:	2b04      	cmp	r3, #4
    bf94:	d803      	bhi.n	bf9e <_usb_d_dev_ep_enable+0x52>
    bf96:	697b      	ldr	r3, [r7, #20]
    bf98:	7c9b      	ldrb	r3, [r3, #18]
    bf9a:	2bff      	cmp	r3, #255	; 0xff
    bf9c:	d102      	bne.n	bfa4 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    bf9e:	f06f 0311 	mvn.w	r3, #17
    bfa2:	e0c8      	b.n	c136 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    bfa4:	7efb      	ldrb	r3, [r7, #27]
    bfa6:	015b      	lsls	r3, r3, #5
    bfa8:	4a67      	ldr	r2, [pc, #412]	; (c148 <_usb_d_dev_ep_enable+0x1fc>)
    bfaa:	4413      	add	r3, r2
    bfac:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    bfae:	697b      	ldr	r3, [r7, #20]
    bfb0:	7cdb      	ldrb	r3, [r3, #19]
    bfb2:	f003 0307 	and.w	r3, r3, #7
    bfb6:	b2db      	uxtb	r3, r3
    bfb8:	2b01      	cmp	r3, #1
    bfba:	d14b      	bne.n	c054 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    bfbc:	7cfb      	ldrb	r3, [r7, #19]
    bfbe:	f003 0377 	and.w	r3, r3, #119	; 0x77
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d002      	beq.n	bfcc <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    bfc6:	f06f 0313 	mvn.w	r3, #19
    bfca:	e0b4      	b.n	c136 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    bfcc:	7efb      	ldrb	r3, [r7, #27]
    bfce:	2211      	movs	r2, #17
    bfd0:	4619      	mov	r1, r3
    bfd2:	69f8      	ldr	r0, [r7, #28]
    bfd4:	4b5d      	ldr	r3, [pc, #372]	; (c14c <_usb_d_dev_ep_enable+0x200>)
    bfd6:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    bfd8:	697b      	ldr	r3, [r7, #20]
    bfda:	8a1b      	ldrh	r3, [r3, #16]
    bfdc:	039b      	lsls	r3, r3, #14
    bfde:	4c5c      	ldr	r4, [pc, #368]	; (c150 <_usb_d_dev_ep_enable+0x204>)
    bfe0:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    bfe2:	697b      	ldr	r3, [r7, #20]
    bfe4:	8a1b      	ldrh	r3, [r3, #16]
    bfe6:	4618      	mov	r0, r3
    bfe8:	4b5a      	ldr	r3, [pc, #360]	; (c154 <_usb_d_dev_ep_enable+0x208>)
    bfea:	4798      	blx	r3
    bfec:	4603      	mov	r3, r0
    bfee:	071b      	lsls	r3, r3, #28
    bff0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    bff4:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    bff8:	68fb      	ldr	r3, [r7, #12]
    bffa:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    bffc:	68fb      	ldr	r3, [r7, #12]
    bffe:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c002:	697b      	ldr	r3, [r7, #20]
    c004:	8a1b      	ldrh	r3, [r3, #16]
    c006:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c00a:	697b      	ldr	r3, [r7, #20]
    c00c:	8a1b      	ldrh	r3, [r3, #16]
    c00e:	4618      	mov	r0, r3
    c010:	4b50      	ldr	r3, [pc, #320]	; (c154 <_usb_d_dev_ep_enable+0x208>)
    c012:	4798      	blx	r3
    c014:	4603      	mov	r3, r0
    c016:	071b      	lsls	r3, r3, #28
    c018:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c01c:	432b      	orrs	r3, r5
    c01e:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c020:	7efb      	ldrb	r3, [r7, #27]
    c022:	2200      	movs	r2, #0
    c024:	2100      	movs	r1, #0
    c026:	4618      	mov	r0, r3
    c028:	4b4b      	ldr	r3, [pc, #300]	; (c158 <_usb_d_dev_ep_enable+0x20c>)
    c02a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    c02c:	7efb      	ldrb	r3, [r7, #27]
    c02e:	2200      	movs	r2, #0
    c030:	2101      	movs	r1, #1
    c032:	4618      	mov	r0, r3
    c034:	4b49      	ldr	r3, [pc, #292]	; (c15c <_usb_d_dev_ep_enable+0x210>)
    c036:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    c038:	7efb      	ldrb	r3, [r7, #27]
    c03a:	2100      	movs	r1, #0
    c03c:	4618      	mov	r0, r3
    c03e:	4b48      	ldr	r3, [pc, #288]	; (c160 <_usb_d_dev_ep_enable+0x214>)
    c040:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c042:	7efb      	ldrb	r3, [r7, #27]
    c044:	2101      	movs	r1, #1
    c046:	4618      	mov	r0, r3
    c048:	4b45      	ldr	r3, [pc, #276]	; (c160 <_usb_d_dev_ep_enable+0x214>)
    c04a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    c04c:	6978      	ldr	r0, [r7, #20]
    c04e:	4b45      	ldr	r3, [pc, #276]	; (c164 <_usb_d_dev_ep_enable+0x218>)
    c050:	4798      	blx	r3
    c052:	e06f      	b.n	c134 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    c054:	7ebb      	ldrb	r3, [r7, #26]
    c056:	2b00      	cmp	r3, #0
    c058:	d038      	beq.n	c0cc <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c05a:	7cfb      	ldrb	r3, [r7, #19]
    c05c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c060:	2b00      	cmp	r3, #0
    c062:	d002      	beq.n	c06a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    c064:	f06f 0313 	mvn.w	r3, #19
    c068:	e065      	b.n	c136 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c06a:	697b      	ldr	r3, [r7, #20]
    c06c:	7cdb      	ldrb	r3, [r3, #19]
    c06e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c072:	b2db      	uxtb	r3, r3
    c074:	011b      	lsls	r3, r3, #4
    c076:	b2db      	uxtb	r3, r3
    c078:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c07c:	b2da      	uxtb	r2, r3
    c07e:	7cfb      	ldrb	r3, [r7, #19]
    c080:	4313      	orrs	r3, r2
    c082:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c084:	7cfa      	ldrb	r2, [r7, #19]
    c086:	7efb      	ldrb	r3, [r7, #27]
    c088:	4619      	mov	r1, r3
    c08a:	69f8      	ldr	r0, [r7, #28]
    c08c:	4b2f      	ldr	r3, [pc, #188]	; (c14c <_usb_d_dev_ep_enable+0x200>)
    c08e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    c090:	68fb      	ldr	r3, [r7, #12]
    c092:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c096:	697b      	ldr	r3, [r7, #20]
    c098:	8a1b      	ldrh	r3, [r3, #16]
    c09a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c09e:	697b      	ldr	r3, [r7, #20]
    c0a0:	8a1b      	ldrh	r3, [r3, #16]
    c0a2:	4618      	mov	r0, r3
    c0a4:	4b2b      	ldr	r3, [pc, #172]	; (c154 <_usb_d_dev_ep_enable+0x208>)
    c0a6:	4798      	blx	r3
    c0a8:	4603      	mov	r3, r0
    c0aa:	071b      	lsls	r3, r3, #28
    c0ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c0b0:	432b      	orrs	r3, r5
    c0b2:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c0b4:	7efb      	ldrb	r3, [r7, #27]
    c0b6:	2200      	movs	r2, #0
    c0b8:	2101      	movs	r1, #1
    c0ba:	4618      	mov	r0, r3
    c0bc:	4b27      	ldr	r3, [pc, #156]	; (c15c <_usb_d_dev_ep_enable+0x210>)
    c0be:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c0c0:	7efb      	ldrb	r3, [r7, #27]
    c0c2:	2101      	movs	r1, #1
    c0c4:	4618      	mov	r0, r3
    c0c6:	4b26      	ldr	r3, [pc, #152]	; (c160 <_usb_d_dev_ep_enable+0x214>)
    c0c8:	4798      	blx	r3
    c0ca:	e033      	b.n	c134 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c0cc:	7cfb      	ldrb	r3, [r7, #19]
    c0ce:	f003 0307 	and.w	r3, r3, #7
    c0d2:	2b00      	cmp	r3, #0
    c0d4:	d002      	beq.n	c0dc <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    c0d6:	f06f 0313 	mvn.w	r3, #19
    c0da:	e02c      	b.n	c136 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c0dc:	697b      	ldr	r3, [r7, #20]
    c0de:	7cdb      	ldrb	r3, [r3, #19]
    c0e0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c0e4:	b2db      	uxtb	r3, r3
    c0e6:	461a      	mov	r2, r3
    c0e8:	7cfb      	ldrb	r3, [r7, #19]
    c0ea:	4313      	orrs	r3, r2
    c0ec:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c0ee:	7cfa      	ldrb	r2, [r7, #19]
    c0f0:	7efb      	ldrb	r3, [r7, #27]
    c0f2:	4619      	mov	r1, r3
    c0f4:	69f8      	ldr	r0, [r7, #28]
    c0f6:	4b15      	ldr	r3, [pc, #84]	; (c14c <_usb_d_dev_ep_enable+0x200>)
    c0f8:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c0fa:	697b      	ldr	r3, [r7, #20]
    c0fc:	8a1b      	ldrh	r3, [r3, #16]
    c0fe:	039b      	lsls	r3, r3, #14
    c100:	4c13      	ldr	r4, [pc, #76]	; (c150 <_usb_d_dev_ep_enable+0x204>)
    c102:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c104:	697b      	ldr	r3, [r7, #20]
    c106:	8a1b      	ldrh	r3, [r3, #16]
    c108:	4618      	mov	r0, r3
    c10a:	4b12      	ldr	r3, [pc, #72]	; (c154 <_usb_d_dev_ep_enable+0x208>)
    c10c:	4798      	blx	r3
    c10e:	4603      	mov	r3, r0
    c110:	071b      	lsls	r3, r3, #28
    c112:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c116:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c11a:	68fb      	ldr	r3, [r7, #12]
    c11c:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c11e:	7efb      	ldrb	r3, [r7, #27]
    c120:	2200      	movs	r2, #0
    c122:	2100      	movs	r1, #0
    c124:	4618      	mov	r0, r3
    c126:	4b0c      	ldr	r3, [pc, #48]	; (c158 <_usb_d_dev_ep_enable+0x20c>)
    c128:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    c12a:	7efb      	ldrb	r3, [r7, #27]
    c12c:	2100      	movs	r1, #0
    c12e:	4618      	mov	r0, r3
    c130:	4b0b      	ldr	r3, [pc, #44]	; (c160 <_usb_d_dev_ep_enable+0x214>)
    c132:	4798      	blx	r3
	}

	return USB_OK;
    c134:	2300      	movs	r3, #0
}
    c136:	4618      	mov	r0, r3
    c138:	3720      	adds	r7, #32
    c13a:	46bd      	mov	sp, r7
    c13c:	bdb0      	pop	{r4, r5, r7, pc}
    c13e:	bf00      	nop
    c140:	0000ad65 	.word	0x0000ad65
    c144:	0000a3eb 	.word	0x0000a3eb
    c148:	20002058 	.word	0x20002058
    c14c:	0000a3c1 	.word	0x0000a3c1
    c150:	0fffc000 	.word	0x0fffc000
    c154:	0000ad01 	.word	0x0000ad01
    c158:	0000aca9 	.word	0x0000aca9
    c15c:	0000ac51 	.word	0x0000ac51
    c160:	0000ac19 	.word	0x0000ac19
    c164:	0000bcbd 	.word	0x0000bcbd

0000c168 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    c168:	b580      	push	{r7, lr}
    c16a:	b084      	sub	sp, #16
    c16c:	af00      	add	r7, sp, #0
    c16e:	6078      	str	r0, [r7, #4]
    c170:	460b      	mov	r3, r1
    c172:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c174:	687b      	ldr	r3, [r7, #4]
    c176:	7c9b      	ldrb	r3, [r3, #18]
    c178:	f003 030f 	and.w	r3, r3, #15
    c17c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    c17e:	78fa      	ldrb	r2, [r7, #3]
    c180:	7bfb      	ldrb	r3, [r7, #15]
    c182:	4611      	mov	r1, r2
    c184:	4618      	mov	r0, r3
    c186:	4b03      	ldr	r3, [pc, #12]	; (c194 <_usb_d_dev_ep_stall_get+0x2c>)
    c188:	4798      	blx	r3
    c18a:	4603      	mov	r3, r0
}
    c18c:	4618      	mov	r0, r3
    c18e:	3710      	adds	r7, #16
    c190:	46bd      	mov	sp, r7
    c192:	bd80      	pop	{r7, pc}
    c194:	0000a859 	.word	0x0000a859

0000c198 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    c198:	b580      	push	{r7, lr}
    c19a:	b084      	sub	sp, #16
    c19c:	af00      	add	r7, sp, #0
    c19e:	6078      	str	r0, [r7, #4]
    c1a0:	460b      	mov	r3, r1
    c1a2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c1a4:	687b      	ldr	r3, [r7, #4]
    c1a6:	7c9b      	ldrb	r3, [r3, #18]
    c1a8:	f003 030f 	and.w	r3, r3, #15
    c1ac:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    c1ae:	78f9      	ldrb	r1, [r7, #3]
    c1b0:	7bfb      	ldrb	r3, [r7, #15]
    c1b2:	2201      	movs	r2, #1
    c1b4:	4618      	mov	r0, r3
    c1b6:	4b0a      	ldr	r3, [pc, #40]	; (c1e0 <_usb_d_dev_ep_stall_set+0x48>)
    c1b8:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c1ba:	78fb      	ldrb	r3, [r7, #3]
    c1bc:	2220      	movs	r2, #32
    c1be:	409a      	lsls	r2, r3
    c1c0:	7bfb      	ldrb	r3, [r7, #15]
    c1c2:	4611      	mov	r1, r2
    c1c4:	4618      	mov	r0, r3
    c1c6:	4b07      	ldr	r3, [pc, #28]	; (c1e4 <_usb_d_dev_ep_stall_set+0x4c>)
    c1c8:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    c1ca:	687a      	ldr	r2, [r7, #4]
    c1cc:	7cd3      	ldrb	r3, [r2, #19]
    c1ce:	f043 0308 	orr.w	r3, r3, #8
    c1d2:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    c1d4:	2300      	movs	r3, #0
}
    c1d6:	4618      	mov	r0, r3
    c1d8:	3710      	adds	r7, #16
    c1da:	46bd      	mov	sp, r7
    c1dc:	bd80      	pop	{r7, pc}
    c1de:	bf00      	nop
    c1e0:	0000a801 	.word	0x0000a801
    c1e4:	0000a781 	.word	0x0000a781

0000c1e8 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    c1e8:	b580      	push	{r7, lr}
    c1ea:	b084      	sub	sp, #16
    c1ec:	af00      	add	r7, sp, #0
    c1ee:	6078      	str	r0, [r7, #4]
    c1f0:	460b      	mov	r3, r1
    c1f2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    c1f4:	687b      	ldr	r3, [r7, #4]
    c1f6:	7c9b      	ldrb	r3, [r3, #18]
    c1f8:	f003 030f 	and.w	r3, r3, #15
    c1fc:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    c1fe:	78fa      	ldrb	r2, [r7, #3]
    c200:	7bfb      	ldrb	r3, [r7, #15]
    c202:	4611      	mov	r1, r2
    c204:	4618      	mov	r0, r3
    c206:	4b28      	ldr	r3, [pc, #160]	; (c2a8 <_usb_d_dev_ep_stall_clr+0xc0>)
    c208:	4798      	blx	r3
    c20a:	4603      	mov	r3, r0
    c20c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    c20e:	7bbb      	ldrb	r3, [r7, #14]
    c210:	f083 0301 	eor.w	r3, r3, #1
    c214:	b2db      	uxtb	r3, r3
    c216:	2b00      	cmp	r3, #0
    c218:	d001      	beq.n	c21e <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    c21a:	2300      	movs	r3, #0
    c21c:	e040      	b.n	c2a0 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    c21e:	78f9      	ldrb	r1, [r7, #3]
    c220:	7bfb      	ldrb	r3, [r7, #15]
    c222:	2200      	movs	r2, #0
    c224:	4618      	mov	r0, r3
    c226:	4b21      	ldr	r3, [pc, #132]	; (c2ac <_usb_d_dev_ep_stall_clr+0xc4>)
    c228:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c22a:	78fb      	ldrb	r3, [r7, #3]
    c22c:	2220      	movs	r2, #32
    c22e:	409a      	lsls	r2, r3
    c230:	7bfb      	ldrb	r3, [r7, #15]
    c232:	4611      	mov	r1, r2
    c234:	4618      	mov	r0, r3
    c236:	4b1e      	ldr	r3, [pc, #120]	; (c2b0 <_usb_d_dev_ep_stall_clr+0xc8>)
    c238:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c23a:	78fa      	ldrb	r2, [r7, #3]
    c23c:	7bfb      	ldrb	r3, [r7, #15]
    c23e:	4611      	mov	r1, r2
    c240:	4618      	mov	r0, r3
    c242:	4b1c      	ldr	r3, [pc, #112]	; (c2b4 <_usb_d_dev_ep_stall_clr+0xcc>)
    c244:	4798      	blx	r3
    c246:	4603      	mov	r3, r0
    c248:	2b00      	cmp	r3, #0
    c24a:	d00b      	beq.n	c264 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    c24c:	78fa      	ldrb	r2, [r7, #3]
    c24e:	7bfb      	ldrb	r3, [r7, #15]
    c250:	4611      	mov	r1, r2
    c252:	4618      	mov	r0, r3
    c254:	4b18      	ldr	r3, [pc, #96]	; (c2b8 <_usb_d_dev_ep_stall_clr+0xd0>)
    c256:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    c258:	78f9      	ldrb	r1, [r7, #3]
    c25a:	7bfb      	ldrb	r3, [r7, #15]
    c25c:	2200      	movs	r2, #0
    c25e:	4618      	mov	r0, r3
    c260:	4b16      	ldr	r3, [pc, #88]	; (c2bc <_usb_d_dev_ep_stall_clr+0xd4>)
    c262:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c264:	687b      	ldr	r3, [r7, #4]
    c266:	7cdb      	ldrb	r3, [r3, #19]
    c268:	f003 0307 	and.w	r3, r3, #7
    c26c:	b2db      	uxtb	r3, r3
    c26e:	2b01      	cmp	r3, #1
    c270:	d110      	bne.n	c294 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c272:	7bfb      	ldrb	r3, [r7, #15]
    c274:	4619      	mov	r1, r3
    c276:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c27a:	4b11      	ldr	r3, [pc, #68]	; (c2c0 <_usb_d_dev_ep_stall_clr+0xd8>)
    c27c:	4798      	blx	r3
    c27e:	4603      	mov	r3, r0
    c280:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c284:	2b00      	cmp	r3, #0
    c286:	d10a      	bne.n	c29e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    c288:	687a      	ldr	r2, [r7, #4]
    c28a:	7cd3      	ldrb	r3, [r2, #19]
    c28c:	f36f 03c3 	bfc	r3, #3, #1
    c290:	74d3      	strb	r3, [r2, #19]
    c292:	e004      	b.n	c29e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    c294:	687a      	ldr	r2, [r7, #4]
    c296:	7cd3      	ldrb	r3, [r2, #19]
    c298:	f36f 03c3 	bfc	r3, #3, #1
    c29c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    c29e:	2300      	movs	r3, #0
}
    c2a0:	4618      	mov	r0, r3
    c2a2:	3710      	adds	r7, #16
    c2a4:	46bd      	mov	sp, r7
    c2a6:	bd80      	pop	{r7, pc}
    c2a8:	0000a859 	.word	0x0000a859
    c2ac:	0000a801 	.word	0x0000a801
    c2b0:	0000a7a9 	.word	0x0000a7a9
    c2b4:	0000a89d 	.word	0x0000a89d
    c2b8:	0000a8e1 	.word	0x0000a8e1
    c2bc:	0000a9cd 	.word	0x0000a9cd
    c2c0:	0000a289 	.word	0x0000a289

0000c2c4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b086      	sub	sp, #24
    c2c8:	af00      	add	r7, sp, #0
    c2ca:	4603      	mov	r3, r0
    c2cc:	460a      	mov	r2, r1
    c2ce:	71fb      	strb	r3, [r7, #7]
    c2d0:	4613      	mov	r3, r2
    c2d2:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    c2d4:	79fb      	ldrb	r3, [r7, #7]
    c2d6:	f003 030f 	and.w	r3, r3, #15
    c2da:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c2dc:	79fb      	ldrb	r3, [r7, #7]
    c2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c2e2:	2b00      	cmp	r3, #0
    c2e4:	bf14      	ite	ne
    c2e6:	2301      	movne	r3, #1
    c2e8:	2300      	moveq	r3, #0
    c2ea:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c2ec:	7cba      	ldrb	r2, [r7, #18]
    c2ee:	7cfb      	ldrb	r3, [r7, #19]
    c2f0:	4611      	mov	r1, r2
    c2f2:	4618      	mov	r0, r3
    c2f4:	4b13      	ldr	r3, [pc, #76]	; (c344 <_usb_d_dev_ep_stall+0x80>)
    c2f6:	4798      	blx	r3
    c2f8:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c2fa:	7cfb      	ldrb	r3, [r7, #19]
    c2fc:	2b04      	cmp	r3, #4
    c2fe:	d902      	bls.n	c306 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    c300:	f06f 0311 	mvn.w	r3, #17
    c304:	e01a      	b.n	c33c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    c306:	79bb      	ldrb	r3, [r7, #6]
    c308:	2b01      	cmp	r3, #1
    c30a:	d106      	bne.n	c31a <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    c30c:	7cbb      	ldrb	r3, [r7, #18]
    c30e:	4619      	mov	r1, r3
    c310:	68f8      	ldr	r0, [r7, #12]
    c312:	4b0d      	ldr	r3, [pc, #52]	; (c348 <_usb_d_dev_ep_stall+0x84>)
    c314:	4798      	blx	r3
    c316:	6178      	str	r0, [r7, #20]
    c318:	e00f      	b.n	c33a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    c31a:	79bb      	ldrb	r3, [r7, #6]
    c31c:	2b00      	cmp	r3, #0
    c31e:	d106      	bne.n	c32e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    c320:	7cbb      	ldrb	r3, [r7, #18]
    c322:	4619      	mov	r1, r3
    c324:	68f8      	ldr	r0, [r7, #12]
    c326:	4b09      	ldr	r3, [pc, #36]	; (c34c <_usb_d_dev_ep_stall+0x88>)
    c328:	4798      	blx	r3
    c32a:	6178      	str	r0, [r7, #20]
    c32c:	e005      	b.n	c33a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    c32e:	7cbb      	ldrb	r3, [r7, #18]
    c330:	4619      	mov	r1, r3
    c332:	68f8      	ldr	r0, [r7, #12]
    c334:	4b06      	ldr	r3, [pc, #24]	; (c350 <_usb_d_dev_ep_stall+0x8c>)
    c336:	4798      	blx	r3
    c338:	6178      	str	r0, [r7, #20]
	}
	return rc;
    c33a:	697b      	ldr	r3, [r7, #20]
}
    c33c:	4618      	mov	r0, r3
    c33e:	3718      	adds	r7, #24
    c340:	46bd      	mov	sp, r7
    c342:	bd80      	pop	{r7, pc}
    c344:	0000ad65 	.word	0x0000ad65
    c348:	0000c199 	.word	0x0000c199
    c34c:	0000c1e9 	.word	0x0000c1e9
    c350:	0000c169 	.word	0x0000c169

0000c354 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c354:	b580      	push	{r7, lr}
    c356:	b082      	sub	sp, #8
    c358:	af00      	add	r7, sp, #0
    c35a:	6078      	str	r0, [r7, #4]
    c35c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c35e:	687b      	ldr	r3, [r7, #4]
    c360:	7c9b      	ldrb	r3, [r3, #18]
    c362:	2bff      	cmp	r3, #255	; 0xff
    c364:	d014      	beq.n	c390 <_usb_d_dev_trans_done+0x3c>
    c366:	687b      	ldr	r3, [r7, #4]
    c368:	7cdb      	ldrb	r3, [r3, #19]
    c36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c36e:	b2db      	uxtb	r3, r3
    c370:	2b00      	cmp	r3, #0
    c372:	d00d      	beq.n	c390 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c374:	687a      	ldr	r2, [r7, #4]
    c376:	7cd3      	ldrb	r3, [r2, #19]
    c378:	f36f 1386 	bfc	r3, #6, #1
    c37c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c37e:	4b06      	ldr	r3, [pc, #24]	; (c398 <_usb_d_dev_trans_done+0x44>)
    c380:	691b      	ldr	r3, [r3, #16]
    c382:	687a      	ldr	r2, [r7, #4]
    c384:	7c90      	ldrb	r0, [r2, #18]
    c386:	687a      	ldr	r2, [r7, #4]
    c388:	6892      	ldr	r2, [r2, #8]
    c38a:	6839      	ldr	r1, [r7, #0]
    c38c:	4798      	blx	r3
    c38e:	e000      	b.n	c392 <_usb_d_dev_trans_done+0x3e>
		return;
    c390:	bf00      	nop
}
    c392:	3708      	adds	r7, #8
    c394:	46bd      	mov	sp, r7
    c396:	bd80      	pop	{r7, pc}
    c398:	20001f90 	.word	0x20001f90

0000c39c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c39c:	b580      	push	{r7, lr}
    c39e:	b086      	sub	sp, #24
    c3a0:	af00      	add	r7, sp, #0
    c3a2:	60f8      	str	r0, [r7, #12]
    c3a4:	460b      	mov	r3, r1
    c3a6:	607a      	str	r2, [r7, #4]
    c3a8:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c3aa:	68fb      	ldr	r3, [r7, #12]
    c3ac:	7c9b      	ldrb	r3, [r3, #18]
    c3ae:	f003 030f 	and.w	r3, r3, #15
    c3b2:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c3b4:	4b1f      	ldr	r3, [pc, #124]	; (c434 <_usb_d_dev_trans_stop+0x98>)
    c3b6:	881b      	ldrh	r3, [r3, #0]
    c3b8:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c3ba:	68fb      	ldr	r3, [r7, #12]
    c3bc:	7c9b      	ldrb	r3, [r3, #18]
    c3be:	2bff      	cmp	r3, #255	; 0xff
    c3c0:	d033      	beq.n	c42a <_usb_d_dev_trans_stop+0x8e>
    c3c2:	68fb      	ldr	r3, [r7, #12]
    c3c4:	7cdb      	ldrb	r3, [r3, #19]
    c3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c3ca:	b2db      	uxtb	r3, r3
    c3cc:	2b00      	cmp	r3, #0
    c3ce:	d02c      	beq.n	c42a <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c3d0:	7afb      	ldrb	r3, [r7, #11]
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d006      	beq.n	c3e4 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c3d6:	7dfb      	ldrb	r3, [r7, #23]
    c3d8:	2200      	movs	r2, #0
    c3da:	2101      	movs	r1, #1
    c3dc:	4618      	mov	r0, r3
    c3de:	4b16      	ldr	r3, [pc, #88]	; (c438 <_usb_d_dev_trans_stop+0x9c>)
    c3e0:	4798      	blx	r3
    c3e2:	e005      	b.n	c3f0 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c3e4:	7dfb      	ldrb	r3, [r7, #23]
    c3e6:	2200      	movs	r2, #0
    c3e8:	2100      	movs	r1, #0
    c3ea:	4618      	mov	r0, r3
    c3ec:	4b13      	ldr	r3, [pc, #76]	; (c43c <_usb_d_dev_trans_stop+0xa0>)
    c3ee:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c3f0:	7afb      	ldrb	r3, [r7, #11]
    c3f2:	f107 0218 	add.w	r2, r7, #24
    c3f6:	4413      	add	r3, r2
    c3f8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c3fc:	461a      	mov	r2, r3
    c3fe:	7dfb      	ldrb	r3, [r7, #23]
    c400:	4611      	mov	r1, r2
    c402:	4618      	mov	r0, r3
    c404:	4b0e      	ldr	r3, [pc, #56]	; (c440 <_usb_d_dev_trans_stop+0xa4>)
    c406:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    c408:	7afb      	ldrb	r3, [r7, #11]
    c40a:	f107 0218 	add.w	r2, r7, #24
    c40e:	4413      	add	r3, r2
    c410:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c414:	461a      	mov	r2, r3
    c416:	7dfb      	ldrb	r3, [r7, #23]
    c418:	4611      	mov	r1, r2
    c41a:	4618      	mov	r0, r3
    c41c:	4b09      	ldr	r3, [pc, #36]	; (c444 <_usb_d_dev_trans_stop+0xa8>)
    c41e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    c420:	6879      	ldr	r1, [r7, #4]
    c422:	68f8      	ldr	r0, [r7, #12]
    c424:	4b08      	ldr	r3, [pc, #32]	; (c448 <_usb_d_dev_trans_stop+0xac>)
    c426:	4798      	blx	r3
    c428:	e000      	b.n	c42c <_usb_d_dev_trans_stop+0x90>
		return;
    c42a:	bf00      	nop
}
    c42c:	3718      	adds	r7, #24
    c42e:	46bd      	mov	sp, r7
    c430:	bd80      	pop	{r7, pc}
    c432:	bf00      	nop
    c434:	00011cfc 	.word	0x00011cfc
    c438:	0000ac51 	.word	0x0000ac51
    c43c:	0000aca9 	.word	0x0000aca9
    c440:	0000a759 	.word	0x0000a759
    c444:	0000a7a9 	.word	0x0000a7a9
    c448:	0000c355 	.word	0x0000c355

0000c44c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    c44c:	b580      	push	{r7, lr}
    c44e:	b086      	sub	sp, #24
    c450:	af00      	add	r7, sp, #0
    c452:	4603      	mov	r3, r0
    c454:	6039      	str	r1, [r7, #0]
    c456:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    c458:	79fb      	ldrb	r3, [r7, #7]
    c45a:	f003 030f 	and.w	r3, r3, #15
    c45e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c460:	7dfb      	ldrb	r3, [r7, #23]
    c462:	015b      	lsls	r3, r3, #5
    c464:	4a1e      	ldr	r2, [pc, #120]	; (c4e0 <_usb_d_dev_ep_read_req+0x94>)
    c466:	4413      	add	r3, r2
    c468:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    c46a:	693b      	ldr	r3, [r7, #16]
    c46c:	681b      	ldr	r3, [r3, #0]
    c46e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c470:	693b      	ldr	r3, [r7, #16]
    c472:	685b      	ldr	r3, [r3, #4]
    c474:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c478:	b29b      	uxth	r3, r3
    c47a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c47c:	7dfb      	ldrb	r3, [r7, #23]
    c47e:	2b04      	cmp	r3, #4
    c480:	d802      	bhi.n	c488 <_usb_d_dev_ep_read_req+0x3c>
    c482:	683b      	ldr	r3, [r7, #0]
    c484:	2b00      	cmp	r3, #0
    c486:	d102      	bne.n	c48e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    c488:	f06f 0311 	mvn.w	r3, #17
    c48c:	e023      	b.n	c4d6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    c48e:	7dfb      	ldrb	r3, [r7, #23]
    c490:	4618      	mov	r0, r3
    c492:	4b14      	ldr	r3, [pc, #80]	; (c4e4 <_usb_d_dev_ep_read_req+0x98>)
    c494:	4798      	blx	r3
    c496:	4603      	mov	r3, r0
    c498:	f083 0301 	eor.w	r3, r3, #1
    c49c:	b2db      	uxtb	r3, r3
    c49e:	2b00      	cmp	r3, #0
    c4a0:	d002      	beq.n	c4a8 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    c4a2:	f06f 0312 	mvn.w	r3, #18
    c4a6:	e016      	b.n	c4d6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    c4a8:	7dfb      	ldrb	r3, [r7, #23]
    c4aa:	4618      	mov	r0, r3
    c4ac:	4b0e      	ldr	r3, [pc, #56]	; (c4e8 <_usb_d_dev_ep_read_req+0x9c>)
    c4ae:	4798      	blx	r3
    c4b0:	4603      	mov	r3, r0
    c4b2:	f083 0301 	eor.w	r3, r3, #1
    c4b6:	b2db      	uxtb	r3, r3
    c4b8:	2b00      	cmp	r3, #0
    c4ba:	d001      	beq.n	c4c0 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    c4bc:	2300      	movs	r3, #0
    c4be:	e00a      	b.n	c4d6 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    c4c0:	68fb      	ldr	r3, [r7, #12]
    c4c2:	2208      	movs	r2, #8
    c4c4:	4619      	mov	r1, r3
    c4c6:	6838      	ldr	r0, [r7, #0]
    c4c8:	4b08      	ldr	r3, [pc, #32]	; (c4ec <_usb_d_dev_ep_read_req+0xa0>)
    c4ca:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    c4cc:	7dfb      	ldrb	r3, [r7, #23]
    c4ce:	4618      	mov	r0, r3
    c4d0:	4b07      	ldr	r3, [pc, #28]	; (c4f0 <_usb_d_dev_ep_read_req+0xa4>)
    c4d2:	4798      	blx	r3

	return bytes;
    c4d4:	897b      	ldrh	r3, [r7, #10]
}
    c4d6:	4618      	mov	r0, r3
    c4d8:	3718      	adds	r7, #24
    c4da:	46bd      	mov	sp, r7
    c4dc:	bd80      	pop	{r7, pc}
    c4de:	bf00      	nop
    c4e0:	20002058 	.word	0x20002058
    c4e4:	0000a7d1 	.word	0x0000a7d1
    c4e8:	0000a97d 	.word	0x0000a97d
    c4ec:	00010829 	.word	0x00010829
    c4f0:	0000a9ad 	.word	0x0000a9ad

0000c4f4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    c4f4:	b580      	push	{r7, lr}
    c4f6:	b086      	sub	sp, #24
    c4f8:	af00      	add	r7, sp, #0
    c4fa:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c4fc:	687b      	ldr	r3, [r7, #4]
    c4fe:	7a1b      	ldrb	r3, [r3, #8]
    c500:	f003 030f 	and.w	r3, r3, #15
    c504:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    c506:	687b      	ldr	r3, [r7, #4]
    c508:	7a1b      	ldrb	r3, [r3, #8]
    c50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c50e:	2b00      	cmp	r3, #0
    c510:	bf14      	ite	ne
    c512:	2301      	movne	r3, #1
    c514:	2300      	moveq	r3, #0
    c516:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c518:	7d7a      	ldrb	r2, [r7, #21]
    c51a:	7dbb      	ldrb	r3, [r7, #22]
    c51c:	4611      	mov	r1, r2
    c51e:	4618      	mov	r0, r3
    c520:	4b5f      	ldr	r3, [pc, #380]	; (c6a0 <_usb_d_dev_ep_trans+0x1ac>)
    c522:	4798      	blx	r3
    c524:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c526:	693b      	ldr	r3, [r7, #16]
    c528:	8a1b      	ldrh	r3, [r3, #16]
    c52a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c52e:	4293      	cmp	r3, r2
    c530:	d004      	beq.n	c53c <_usb_d_dev_ep_trans+0x48>
    c532:	693b      	ldr	r3, [r7, #16]
    c534:	8a1b      	ldrh	r3, [r3, #16]
    c536:	3b01      	subs	r3, #1
    c538:	b29b      	uxth	r3, r3
    c53a:	e001      	b.n	c540 <_usb_d_dev_ep_trans+0x4c>
    c53c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c540:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    c542:	687b      	ldr	r3, [r7, #4]
    c544:	685a      	ldr	r2, [r3, #4]
    c546:	89fb      	ldrh	r3, [r7, #14]
    c548:	4013      	ands	r3, r2
    c54a:	2b00      	cmp	r3, #0
    c54c:	bf14      	ite	ne
    c54e:	2301      	movne	r3, #1
    c550:	2300      	moveq	r3, #0
    c552:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    c554:	2300      	movs	r3, #0
    c556:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c558:	7dbb      	ldrb	r3, [r7, #22]
    c55a:	2b04      	cmp	r3, #4
    c55c:	d902      	bls.n	c564 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    c55e:	f06f 0311 	mvn.w	r3, #17
    c562:	e098      	b.n	c696 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	681b      	ldr	r3, [r3, #0]
    c568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    c56c:	d31a      	bcc.n	c5a4 <_usb_d_dev_ep_trans+0xb0>
    c56e:	687b      	ldr	r3, [r7, #4]
    c570:	681b      	ldr	r3, [r3, #0]
    c572:	461a      	mov	r2, r3
    c574:	687b      	ldr	r3, [r7, #4]
    c576:	685b      	ldr	r3, [r3, #4]
    c578:	4413      	add	r3, r2
    c57a:	4a4a      	ldr	r2, [pc, #296]	; (c6a4 <_usb_d_dev_ep_trans+0x1b0>)
    c57c:	4293      	cmp	r3, r2
    c57e:	d811      	bhi.n	c5a4 <_usb_d_dev_ep_trans+0xb0>
    c580:	687b      	ldr	r3, [r7, #4]
    c582:	681b      	ldr	r3, [r3, #0]
    c584:	f003 0303 	and.w	r3, r3, #3
    c588:	2b00      	cmp	r3, #0
    c58a:	d10b      	bne.n	c5a4 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    c58c:	7d7b      	ldrb	r3, [r7, #21]
    c58e:	f083 0301 	eor.w	r3, r3, #1
    c592:	b2db      	uxtb	r3, r3
    c594:	2b00      	cmp	r3, #0
    c596:	d00e      	beq.n	c5b6 <_usb_d_dev_ep_trans+0xc2>
    c598:	687b      	ldr	r3, [r7, #4]
    c59a:	685b      	ldr	r3, [r3, #4]
    c59c:	693a      	ldr	r2, [r7, #16]
    c59e:	8a12      	ldrh	r2, [r2, #16]
    c5a0:	4293      	cmp	r3, r2
    c5a2:	d208      	bcs.n	c5b6 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    c5a4:	693b      	ldr	r3, [r7, #16]
    c5a6:	68db      	ldr	r3, [r3, #12]
    c5a8:	2b00      	cmp	r3, #0
    c5aa:	d102      	bne.n	c5b2 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    c5ac:	f06f 0312 	mvn.w	r3, #18
    c5b0:	e071      	b.n	c696 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    c5b2:	2301      	movs	r3, #1
    c5b4:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    c5b6:	7d7b      	ldrb	r3, [r7, #21]
    c5b8:	f083 0301 	eor.w	r3, r3, #1
    c5bc:	b2db      	uxtb	r3, r3
    c5be:	2b00      	cmp	r3, #0
    c5c0:	d009      	beq.n	c5d6 <_usb_d_dev_ep_trans+0xe2>
    c5c2:	7b7b      	ldrb	r3, [r7, #13]
    c5c4:	2b00      	cmp	r3, #0
    c5c6:	d006      	beq.n	c5d6 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    c5c8:	693b      	ldr	r3, [r7, #16]
    c5ca:	68db      	ldr	r3, [r3, #12]
    c5cc:	2b00      	cmp	r3, #0
    c5ce:	d102      	bne.n	c5d6 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    c5d0:	f06f 0311 	mvn.w	r3, #17
    c5d4:	e05f      	b.n	c696 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    c5d6:	693b      	ldr	r3, [r7, #16]
    c5d8:	7cdb      	ldrb	r3, [r3, #19]
    c5da:	f003 0308 	and.w	r3, r3, #8
    c5de:	b2db      	uxtb	r3, r3
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	d001      	beq.n	c5e8 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    c5e4:	2302      	movs	r3, #2
    c5e6:	e056      	b.n	c696 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    c5e8:	f107 0308 	add.w	r3, r7, #8
    c5ec:	4618      	mov	r0, r3
    c5ee:	4b2e      	ldr	r3, [pc, #184]	; (c6a8 <_usb_d_dev_ep_trans+0x1b4>)
    c5f0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    c5f2:	693b      	ldr	r3, [r7, #16]
    c5f4:	7cdb      	ldrb	r3, [r3, #19]
    c5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c5fa:	b2db      	uxtb	r3, r3
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d006      	beq.n	c60e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    c600:	f107 0308 	add.w	r3, r7, #8
    c604:	4618      	mov	r0, r3
    c606:	4b29      	ldr	r3, [pc, #164]	; (c6ac <_usb_d_dev_ep_trans+0x1b8>)
    c608:	4798      	blx	r3
		return USB_BUSY;
    c60a:	2301      	movs	r3, #1
    c60c:	e043      	b.n	c696 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    c60e:	693a      	ldr	r2, [r7, #16]
    c610:	7cd3      	ldrb	r3, [r2, #19]
    c612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c616:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    c618:	f107 0308 	add.w	r3, r7, #8
    c61c:	4618      	mov	r0, r3
    c61e:	4b23      	ldr	r3, [pc, #140]	; (c6ac <_usb_d_dev_ep_trans+0x1b8>)
    c620:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    c622:	687b      	ldr	r3, [r7, #4]
    c624:	681a      	ldr	r2, [r3, #0]
    c626:	693b      	ldr	r3, [r7, #16]
    c628:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    c62a:	687b      	ldr	r3, [r7, #4]
    c62c:	685a      	ldr	r2, [r3, #4]
    c62e:	693b      	ldr	r3, [r7, #16]
    c630:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    c632:	693b      	ldr	r3, [r7, #16]
    c634:	2200      	movs	r2, #0
    c636:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    c638:	693a      	ldr	r2, [r7, #16]
    c63a:	7cd3      	ldrb	r3, [r2, #19]
    c63c:	7d79      	ldrb	r1, [r7, #21]
    c63e:	f361 13c7 	bfi	r3, r1, #7, #1
    c642:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    c644:	693a      	ldr	r2, [r7, #16]
    c646:	7cd3      	ldrb	r3, [r2, #19]
    c648:	7df9      	ldrb	r1, [r7, #23]
    c64a:	f361 1345 	bfi	r3, r1, #5, #1
    c64e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c650:	687b      	ldr	r3, [r7, #4]
    c652:	7a5b      	ldrb	r3, [r3, #9]
    c654:	2b00      	cmp	r3, #0
    c656:	d007      	beq.n	c668 <_usb_d_dev_ep_trans+0x174>
    c658:	7b7b      	ldrb	r3, [r7, #13]
    c65a:	f083 0301 	eor.w	r3, r3, #1
    c65e:	b2db      	uxtb	r3, r3
    c660:	2b00      	cmp	r3, #0
    c662:	d001      	beq.n	c668 <_usb_d_dev_ep_trans+0x174>
    c664:	2301      	movs	r3, #1
    c666:	e000      	b.n	c66a <_usb_d_dev_ep_trans+0x176>
    c668:	2300      	movs	r3, #0
    c66a:	b2db      	uxtb	r3, r3
    c66c:	f003 0301 	and.w	r3, r3, #1
    c670:	b2d9      	uxtb	r1, r3
    c672:	693a      	ldr	r2, [r7, #16]
    c674:	7cd3      	ldrb	r3, [r2, #19]
    c676:	f361 1304 	bfi	r3, r1, #4, #1
    c67a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    c67c:	7d7b      	ldrb	r3, [r7, #21]
    c67e:	2b00      	cmp	r3, #0
    c680:	d004      	beq.n	c68c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    c682:	2100      	movs	r1, #0
    c684:	6938      	ldr	r0, [r7, #16]
    c686:	4b0a      	ldr	r3, [pc, #40]	; (c6b0 <_usb_d_dev_ep_trans+0x1bc>)
    c688:	4798      	blx	r3
    c68a:	e003      	b.n	c694 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    c68c:	2100      	movs	r1, #0
    c68e:	6938      	ldr	r0, [r7, #16]
    c690:	4b08      	ldr	r3, [pc, #32]	; (c6b4 <_usb_d_dev_ep_trans+0x1c0>)
    c692:	4798      	blx	r3
	}

	return ERR_NONE;
    c694:	2300      	movs	r3, #0
}
    c696:	4618      	mov	r0, r3
    c698:	3718      	adds	r7, #24
    c69a:	46bd      	mov	sp, r7
    c69c:	bd80      	pop	{r7, pc}
    c69e:	bf00      	nop
    c6a0:	0000ad65 	.word	0x0000ad65
    c6a4:	20041fff 	.word	0x20041fff
    c6a8:	00003ac1 	.word	0x00003ac1
    c6ac:	00003ae7 	.word	0x00003ae7
    c6b0:	0000b02d 	.word	0x0000b02d
    c6b4:	0000b245 	.word	0x0000b245

0000c6b8 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    c6b8:	b580      	push	{r7, lr}
    c6ba:	b084      	sub	sp, #16
    c6bc:	af00      	add	r7, sp, #0
    c6be:	4603      	mov	r3, r0
    c6c0:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    c6c2:	79fb      	ldrb	r3, [r7, #7]
    c6c4:	f003 030f 	and.w	r3, r3, #15
    c6c8:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    c6ca:	79fb      	ldrb	r3, [r7, #7]
    c6cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	bf14      	ite	ne
    c6d4:	2301      	movne	r3, #1
    c6d6:	2300      	moveq	r3, #0
    c6d8:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c6da:	7bba      	ldrb	r2, [r7, #14]
    c6dc:	7bfb      	ldrb	r3, [r7, #15]
    c6de:	4611      	mov	r1, r2
    c6e0:	4618      	mov	r0, r3
    c6e2:	4b08      	ldr	r3, [pc, #32]	; (c704 <_usb_d_dev_ep_abort+0x4c>)
    c6e4:	4798      	blx	r3
    c6e6:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    c6e8:	7bfb      	ldrb	r3, [r7, #15]
    c6ea:	2b04      	cmp	r3, #4
    c6ec:	d806      	bhi.n	c6fc <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    c6ee:	7bbb      	ldrb	r3, [r7, #14]
    c6f0:	2202      	movs	r2, #2
    c6f2:	4619      	mov	r1, r3
    c6f4:	68b8      	ldr	r0, [r7, #8]
    c6f6:	4b04      	ldr	r3, [pc, #16]	; (c708 <_usb_d_dev_ep_abort+0x50>)
    c6f8:	4798      	blx	r3
    c6fa:	e000      	b.n	c6fe <_usb_d_dev_ep_abort+0x46>
		return;
    c6fc:	bf00      	nop
}
    c6fe:	3710      	adds	r7, #16
    c700:	46bd      	mov	sp, r7
    c702:	bd80      	pop	{r7, pc}
    c704:	0000ad65 	.word	0x0000ad65
    c708:	0000c39d 	.word	0x0000c39d

0000c70c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    c70c:	b480      	push	{r7}
    c70e:	b085      	sub	sp, #20
    c710:	af00      	add	r7, sp, #0
    c712:	4603      	mov	r3, r0
    c714:	6039      	str	r1, [r7, #0]
    c716:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c718:	683b      	ldr	r3, [r7, #0]
    c71a:	2b00      	cmp	r3, #0
    c71c:	d001      	beq.n	c722 <_usb_d_dev_register_callback+0x16>
    c71e:	683b      	ldr	r3, [r7, #0]
    c720:	e000      	b.n	c724 <_usb_d_dev_register_callback+0x18>
    c722:	4b0a      	ldr	r3, [pc, #40]	; (c74c <_usb_d_dev_register_callback+0x40>)
    c724:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    c726:	79fb      	ldrb	r3, [r7, #7]
    c728:	2b01      	cmp	r3, #1
    c72a:	d103      	bne.n	c734 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c72c:	4a08      	ldr	r2, [pc, #32]	; (c750 <_usb_d_dev_register_callback+0x44>)
    c72e:	68fb      	ldr	r3, [r7, #12]
    c730:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    c732:	e005      	b.n	c740 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    c734:	79fb      	ldrb	r3, [r7, #7]
    c736:	2b00      	cmp	r3, #0
    c738:	d102      	bne.n	c740 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c73a:	4a05      	ldr	r2, [pc, #20]	; (c750 <_usb_d_dev_register_callback+0x44>)
    c73c:	68fb      	ldr	r3, [r7, #12]
    c73e:	6013      	str	r3, [r2, #0]
}
    c740:	bf00      	nop
    c742:	3714      	adds	r7, #20
    c744:	46bd      	mov	sp, r7
    c746:	f85d 7b04 	ldr.w	r7, [sp], #4
    c74a:	4770      	bx	lr
    c74c:	0000a5ed 	.word	0x0000a5ed
    c750:	20001f90 	.word	0x20001f90

0000c754 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    c754:	b480      	push	{r7}
    c756:	b085      	sub	sp, #20
    c758:	af00      	add	r7, sp, #0
    c75a:	4603      	mov	r3, r0
    c75c:	6039      	str	r1, [r7, #0]
    c75e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c760:	683b      	ldr	r3, [r7, #0]
    c762:	2b00      	cmp	r3, #0
    c764:	d001      	beq.n	c76a <_usb_d_dev_register_ep_callback+0x16>
    c766:	683b      	ldr	r3, [r7, #0]
    c768:	e000      	b.n	c76c <_usb_d_dev_register_ep_callback+0x18>
    c76a:	4b0e      	ldr	r3, [pc, #56]	; (c7a4 <_usb_d_dev_register_ep_callback+0x50>)
    c76c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    c76e:	79fb      	ldrb	r3, [r7, #7]
    c770:	2b00      	cmp	r3, #0
    c772:	d103      	bne.n	c77c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    c774:	4a0c      	ldr	r2, [pc, #48]	; (c7a8 <_usb_d_dev_register_ep_callback+0x54>)
    c776:	68fb      	ldr	r3, [r7, #12]
    c778:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    c77a:	e00c      	b.n	c796 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    c77c:	79fb      	ldrb	r3, [r7, #7]
    c77e:	2b01      	cmp	r3, #1
    c780:	d103      	bne.n	c78a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    c782:	4a09      	ldr	r2, [pc, #36]	; (c7a8 <_usb_d_dev_register_ep_callback+0x54>)
    c784:	68fb      	ldr	r3, [r7, #12]
    c786:	60d3      	str	r3, [r2, #12]
}
    c788:	e005      	b.n	c796 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    c78a:	79fb      	ldrb	r3, [r7, #7]
    c78c:	2b02      	cmp	r3, #2
    c78e:	d102      	bne.n	c796 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    c790:	4a05      	ldr	r2, [pc, #20]	; (c7a8 <_usb_d_dev_register_ep_callback+0x54>)
    c792:	68fb      	ldr	r3, [r7, #12]
    c794:	6113      	str	r3, [r2, #16]
}
    c796:	bf00      	nop
    c798:	3714      	adds	r7, #20
    c79a:	46bd      	mov	sp, r7
    c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7a0:	4770      	bx	lr
    c7a2:	bf00      	nop
    c7a4:	0000a5ed 	.word	0x0000a5ed
    c7a8:	20001f90 	.word	0x20001f90

0000c7ac <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    c7ac:	b580      	push	{r7, lr}
    c7ae:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c7b0:	4b01      	ldr	r3, [pc, #4]	; (c7b8 <USB_0_Handler+0xc>)
    c7b2:	4798      	blx	r3
}
    c7b4:	bf00      	nop
    c7b6:	bd80      	pop	{r7, pc}
    c7b8:	0000ba1d 	.word	0x0000ba1d

0000c7bc <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    c7bc:	b580      	push	{r7, lr}
    c7be:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c7c0:	4b01      	ldr	r3, [pc, #4]	; (c7c8 <USB_1_Handler+0xc>)
    c7c2:	4798      	blx	r3
}
    c7c4:	bf00      	nop
    c7c6:	bd80      	pop	{r7, pc}
    c7c8:	0000ba1d 	.word	0x0000ba1d

0000c7cc <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    c7cc:	b580      	push	{r7, lr}
    c7ce:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c7d0:	4b01      	ldr	r3, [pc, #4]	; (c7d8 <USB_2_Handler+0xc>)
    c7d2:	4798      	blx	r3
}
    c7d4:	bf00      	nop
    c7d6:	bd80      	pop	{r7, pc}
    c7d8:	0000ba1d 	.word	0x0000ba1d

0000c7dc <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    c7dc:	b580      	push	{r7, lr}
    c7de:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c7e0:	4b01      	ldr	r3, [pc, #4]	; (c7e8 <USB_3_Handler+0xc>)
    c7e2:	4798      	blx	r3
}
    c7e4:	bf00      	nop
    c7e6:	bd80      	pop	{r7, pc}
    c7e8:	0000ba1d 	.word	0x0000ba1d

0000c7ec <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    c7ec:	b480      	push	{r7}
    c7ee:	b083      	sub	sp, #12
    c7f0:	af00      	add	r7, sp, #0
    c7f2:	6078      	str	r0, [r7, #4]
    c7f4:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    c7f6:	bf00      	nop
    c7f8:	687b      	ldr	r3, [r7, #4]
    c7fa:	689a      	ldr	r2, [r3, #8]
    c7fc:	683b      	ldr	r3, [r7, #0]
    c7fe:	4013      	ands	r3, r2
    c800:	2b00      	cmp	r3, #0
    c802:	d1f9      	bne.n	c7f8 <hri_wdt_wait_for_sync+0xc>
	};
}
    c804:	bf00      	nop
    c806:	370c      	adds	r7, #12
    c808:	46bd      	mov	sp, r7
    c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c80e:	4770      	bx	lr

0000c810 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c810:	b580      	push	{r7, lr}
    c812:	b084      	sub	sp, #16
    c814:	af00      	add	r7, sp, #0
    c816:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c818:	210e      	movs	r1, #14
    c81a:	6878      	ldr	r0, [r7, #4]
    c81c:	4b0a      	ldr	r3, [pc, #40]	; (c848 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    c81e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c820:	687b      	ldr	r3, [r7, #4]
    c822:	781b      	ldrb	r3, [r3, #0]
    c824:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    c826:	7bfb      	ldrb	r3, [r7, #15]
    c828:	085b      	lsrs	r3, r3, #1
    c82a:	b2db      	uxtb	r3, r3
    c82c:	f003 0301 	and.w	r3, r3, #1
    c830:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c832:	7bfb      	ldrb	r3, [r7, #15]
    c834:	2b00      	cmp	r3, #0
    c836:	bf14      	ite	ne
    c838:	2301      	movne	r3, #1
    c83a:	2300      	moveq	r3, #0
    c83c:	b2db      	uxtb	r3, r3
}
    c83e:	4618      	mov	r0, r3
    c840:	3710      	adds	r7, #16
    c842:	46bd      	mov	sp, r7
    c844:	bd80      	pop	{r7, pc}
    c846:	bf00      	nop
    c848:	0000c7ed 	.word	0x0000c7ed

0000c84c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    c84c:	b580      	push	{r7, lr}
    c84e:	b082      	sub	sp, #8
    c850:	af00      	add	r7, sp, #0
    c852:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    c854:	687b      	ldr	r3, [r7, #4]
    c856:	781b      	ldrb	r3, [r3, #0]
    c858:	b2db      	uxtb	r3, r3
    c85a:	f023 0304 	bic.w	r3, r3, #4
    c85e:	b2da      	uxtb	r2, r3
    c860:	687b      	ldr	r3, [r7, #4]
    c862:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c864:	210e      	movs	r1, #14
    c866:	6878      	ldr	r0, [r7, #4]
    c868:	4b02      	ldr	r3, [pc, #8]	; (c874 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    c86a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    c86c:	bf00      	nop
    c86e:	3708      	adds	r7, #8
    c870:	46bd      	mov	sp, r7
    c872:	bd80      	pop	{r7, pc}
    c874:	0000c7ed 	.word	0x0000c7ed

0000c878 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    c878:	b580      	push	{r7, lr}
    c87a:	b084      	sub	sp, #16
    c87c:	af00      	add	r7, sp, #0
    c87e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c880:	210e      	movs	r1, #14
    c882:	6878      	ldr	r0, [r7, #4]
    c884:	4b08      	ldr	r3, [pc, #32]	; (c8a8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    c886:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	781b      	ldrb	r3, [r3, #0]
    c88c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    c88e:	7bfb      	ldrb	r3, [r7, #15]
    c890:	09db      	lsrs	r3, r3, #7
    c892:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c894:	7bfb      	ldrb	r3, [r7, #15]
    c896:	2b00      	cmp	r3, #0
    c898:	bf14      	ite	ne
    c89a:	2301      	movne	r3, #1
    c89c:	2300      	moveq	r3, #0
    c89e:	b2db      	uxtb	r3, r3
}
    c8a0:	4618      	mov	r0, r3
    c8a2:	3710      	adds	r7, #16
    c8a4:	46bd      	mov	sp, r7
    c8a6:	bd80      	pop	{r7, pc}
    c8a8:	0000c7ed 	.word	0x0000c7ed

0000c8ac <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    c8ac:	b480      	push	{r7}
    c8ae:	b085      	sub	sp, #20
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	6078      	str	r0, [r7, #4]
    c8b4:	460b      	mov	r3, r1
    c8b6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    c8b8:	687b      	ldr	r3, [r7, #4]
    c8ba:	785b      	ldrb	r3, [r3, #1]
    c8bc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    c8be:	7bfb      	ldrb	r3, [r7, #15]
    c8c0:	f023 030f 	bic.w	r3, r3, #15
    c8c4:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    c8c6:	78fb      	ldrb	r3, [r7, #3]
    c8c8:	f003 030f 	and.w	r3, r3, #15
    c8cc:	b2da      	uxtb	r2, r3
    c8ce:	7bfb      	ldrb	r3, [r7, #15]
    c8d0:	4313      	orrs	r3, r2
    c8d2:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    c8d4:	687b      	ldr	r3, [r7, #4]
    c8d6:	7bfa      	ldrb	r2, [r7, #15]
    c8d8:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    c8da:	bf00      	nop
    c8dc:	3714      	adds	r7, #20
    c8de:	46bd      	mov	sp, r7
    c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8e4:	4770      	bx	lr
	...

0000c8e8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    c8e8:	b580      	push	{r7, lr}
    c8ea:	b082      	sub	sp, #8
    c8ec:	af00      	add	r7, sp, #0
    c8ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    c8f0:	687b      	ldr	r3, [r7, #4]
    c8f2:	2b00      	cmp	r3, #0
    c8f4:	d005      	beq.n	c902 <_wdt_init+0x1a>
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	681b      	ldr	r3, [r3, #0]
    c8fa:	2b00      	cmp	r3, #0
    c8fc:	d001      	beq.n	c902 <_wdt_init+0x1a>
    c8fe:	2301      	movs	r3, #1
    c900:	e000      	b.n	c904 <_wdt_init+0x1c>
    c902:	2300      	movs	r3, #0
    c904:	f003 0301 	and.w	r3, r3, #1
    c908:	b2db      	uxtb	r3, r3
    c90a:	2250      	movs	r2, #80	; 0x50
    c90c:	4913      	ldr	r1, [pc, #76]	; (c95c <_wdt_init+0x74>)
    c90e:	4618      	mov	r0, r3
    c910:	4b13      	ldr	r3, [pc, #76]	; (c960 <_wdt_init+0x78>)
    c912:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    c914:	687b      	ldr	r3, [r7, #4]
    c916:	681b      	ldr	r3, [r3, #0]
    c918:	4618      	mov	r0, r3
    c91a:	4b12      	ldr	r3, [pc, #72]	; (c964 <_wdt_init+0x7c>)
    c91c:	4798      	blx	r3
    c91e:	4603      	mov	r3, r0
    c920:	2b00      	cmp	r3, #0
    c922:	d107      	bne.n	c934 <_wdt_init+0x4c>
    c924:	687b      	ldr	r3, [r7, #4]
    c926:	681b      	ldr	r3, [r3, #0]
    c928:	4618      	mov	r0, r3
    c92a:	4b0f      	ldr	r3, [pc, #60]	; (c968 <_wdt_init+0x80>)
    c92c:	4798      	blx	r3
    c92e:	4603      	mov	r3, r0
    c930:	2b00      	cmp	r3, #0
    c932:	d002      	beq.n	c93a <_wdt_init+0x52>
		return ERR_DENIED;
    c934:	f06f 0310 	mvn.w	r3, #16
    c938:	e00b      	b.n	c952 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    c93a:	687b      	ldr	r3, [r7, #4]
    c93c:	681b      	ldr	r3, [r3, #0]
    c93e:	4618      	mov	r0, r3
    c940:	4b0a      	ldr	r3, [pc, #40]	; (c96c <_wdt_init+0x84>)
    c942:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    c944:	687b      	ldr	r3, [r7, #4]
    c946:	681b      	ldr	r3, [r3, #0]
    c948:	210b      	movs	r1, #11
    c94a:	4618      	mov	r0, r3
    c94c:	4b08      	ldr	r3, [pc, #32]	; (c970 <_wdt_init+0x88>)
    c94e:	4798      	blx	r3
	}

	return ERR_NONE;
    c950:	2300      	movs	r3, #0
}
    c952:	4618      	mov	r0, r3
    c954:	3708      	adds	r7, #8
    c956:	46bd      	mov	sp, r7
    c958:	bd80      	pop	{r7, pc}
    c95a:	bf00      	nop
    c95c:	00011d00 	.word	0x00011d00
    c960:	0000579d 	.word	0x0000579d
    c964:	0000c879 	.word	0x0000c879
    c968:	0000c811 	.word	0x0000c811
    c96c:	0000c84d 	.word	0x0000c84d
    c970:	0000c8ad 	.word	0x0000c8ad

0000c974 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    c974:	b580      	push	{r7, lr}
    c976:	b08c      	sub	sp, #48	; 0x30
    c978:	af00      	add	r7, sp, #0
    c97a:	6078      	str	r0, [r7, #4]
    c97c:	460b      	mov	r3, r1
    c97e:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c984:	687b      	ldr	r3, [r7, #4]
    c986:	681b      	ldr	r3, [r3, #0]
    c988:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    c98a:	f107 030c 	add.w	r3, r7, #12
    c98e:	2200      	movs	r2, #0
    c990:	601a      	str	r2, [r3, #0]
    c992:	605a      	str	r2, [r3, #4]
    c994:	609a      	str	r2, [r3, #8]
    c996:	60da      	str	r2, [r3, #12]
    c998:	611a      	str	r2, [r3, #16]
    c99a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c99e:	7b1b      	ldrb	r3, [r3, #12]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d001      	beq.n	c9a8 <n25q256a_xip_confirm+0x34>
    c9a4:	2206      	movs	r2, #6
    c9a6:	e000      	b.n	c9aa <n25q256a_xip_confirm+0x36>
    c9a8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c9aa:	7b3b      	ldrb	r3, [r7, #12]
    c9ac:	f362 0302 	bfi	r3, r2, #0, #3
    c9b0:	733b      	strb	r3, [r7, #12]
    c9b2:	7b3b      	ldrb	r3, [r7, #12]
    c9b4:	f043 0310 	orr.w	r3, r3, #16
    c9b8:	733b      	strb	r3, [r7, #12]
    c9ba:	7b3b      	ldrb	r3, [r7, #12]
    c9bc:	f043 0320 	orr.w	r3, r3, #32
    c9c0:	733b      	strb	r3, [r7, #12]
    c9c2:	7b3b      	ldrb	r3, [r7, #12]
    c9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c9c8:	733b      	strb	r3, [r7, #12]
    c9ca:	7b3b      	ldrb	r3, [r7, #12]
    c9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c9d0:	733b      	strb	r3, [r7, #12]
    c9d2:	7b7b      	ldrb	r3, [r7, #13]
    c9d4:	f043 0303 	orr.w	r3, r3, #3
    c9d8:	737b      	strb	r3, [r7, #13]
    c9da:	7b7b      	ldrb	r3, [r7, #13]
    c9dc:	2201      	movs	r2, #1
    c9de:	f362 1305 	bfi	r3, r2, #4, #2
    c9e2:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9e6:	7b1b      	ldrb	r3, [r3, #12]
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d001      	beq.n	c9f0 <n25q256a_xip_confirm+0x7c>
    c9ec:	2208      	movs	r2, #8
    c9ee:	e000      	b.n	c9f2 <n25q256a_xip_confirm+0x7e>
    c9f0:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c9f2:	7bbb      	ldrb	r3, [r7, #14]
    c9f4:	f362 0304 	bfi	r3, r2, #0, #5
    c9f8:	73bb      	strb	r3, [r7, #14]
    c9fa:	230b      	movs	r3, #11
    c9fc:	743b      	strb	r3, [r7, #16]
    c9fe:	78fb      	ldrb	r3, [r7, #3]
    ca00:	2b00      	cmp	r3, #0
    ca02:	d001      	beq.n	ca08 <n25q256a_xip_confirm+0x94>
    ca04:	2300      	movs	r3, #0
    ca06:	e000      	b.n	ca0a <n25q256a_xip_confirm+0x96>
    ca08:	23ff      	movs	r3, #255	; 0xff
    ca0a:	747b      	strb	r3, [r7, #17]
    ca0c:	2301      	movs	r3, #1
    ca0e:	61bb      	str	r3, [r7, #24]
    ca10:	f107 0327 	add.w	r3, r7, #39	; 0x27
    ca14:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    ca16:	f107 030c 	add.w	r3, r7, #12
    ca1a:	4619      	mov	r1, r3
    ca1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ca1e:	4b07      	ldr	r3, [pc, #28]	; (ca3c <n25q256a_xip_confirm+0xc8>)
    ca20:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    ca22:	78fb      	ldrb	r3, [r7, #3]
    ca24:	2b00      	cmp	r3, #0
    ca26:	d001      	beq.n	ca2c <n25q256a_xip_confirm+0xb8>
    ca28:	2202      	movs	r2, #2
    ca2a:	e000      	b.n	ca2e <n25q256a_xip_confirm+0xba>
    ca2c:	2201      	movs	r2, #1
    ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca30:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ca32:	2300      	movs	r3, #0
}
    ca34:	4618      	mov	r0, r3
    ca36:	3730      	adds	r7, #48	; 0x30
    ca38:	46bd      	mov	sp, r7
    ca3a:	bd80      	pop	{r7, pc}
    ca3c:	000043fd 	.word	0x000043fd

0000ca40 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    ca40:	b580      	push	{r7, lr}
    ca42:	b08c      	sub	sp, #48	; 0x30
    ca44:	af00      	add	r7, sp, #0
    ca46:	6078      	str	r0, [r7, #4]
    ca48:	460b      	mov	r3, r1
    ca4a:	70fb      	strb	r3, [r7, #3]
    ca4c:	4613      	mov	r3, r2
    ca4e:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    ca50:	2300      	movs	r3, #0
    ca52:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    ca54:	687b      	ldr	r3, [r7, #4]
    ca56:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	681b      	ldr	r3, [r3, #0]
    ca5c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    ca5e:	f107 030c 	add.w	r3, r7, #12
    ca62:	2200      	movs	r2, #0
    ca64:	601a      	str	r2, [r3, #0]
    ca66:	605a      	str	r2, [r3, #4]
    ca68:	609a      	str	r2, [r3, #8]
    ca6a:	60da      	str	r2, [r3, #12]
    ca6c:	611a      	str	r2, [r3, #16]
    ca6e:	615a      	str	r2, [r3, #20]
    ca70:	78fb      	ldrb	r3, [r7, #3]
    ca72:	f003 0307 	and.w	r3, r3, #7
    ca76:	b2da      	uxtb	r2, r3
    ca78:	7b3b      	ldrb	r3, [r7, #12]
    ca7a:	f362 0302 	bfi	r3, r2, #0, #3
    ca7e:	733b      	strb	r3, [r7, #12]
    ca80:	7b3b      	ldrb	r3, [r7, #12]
    ca82:	f043 0310 	orr.w	r3, r3, #16
    ca86:	733b      	strb	r3, [r7, #12]
    ca88:	7b3b      	ldrb	r3, [r7, #12]
    ca8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ca8e:	733b      	strb	r3, [r7, #12]
    ca90:	78bb      	ldrb	r3, [r7, #2]
    ca92:	743b      	strb	r3, [r7, #16]
    ca94:	2301      	movs	r3, #1
    ca96:	61bb      	str	r3, [r7, #24]
    ca98:	f107 0324 	add.w	r3, r7, #36	; 0x24
    ca9c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    ca9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caa0:	7b5b      	ldrb	r3, [r3, #13]
    caa2:	2b00      	cmp	r3, #0
    caa4:	d003      	beq.n	caae <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    caa6:	2100      	movs	r1, #0
    caa8:	6878      	ldr	r0, [r7, #4]
    caaa:	4b0a      	ldr	r3, [pc, #40]	; (cad4 <n25q256a_read_reg+0x94>)
    caac:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    caae:	f107 030c 	add.w	r3, r7, #12
    cab2:	4619      	mov	r1, r3
    cab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cab6:	4b08      	ldr	r3, [pc, #32]	; (cad8 <n25q256a_read_reg+0x98>)
    cab8:	4798      	blx	r3
	if (n25q->xip_mode) {
    caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cabc:	7b5b      	ldrb	r3, [r3, #13]
    cabe:	2b00      	cmp	r3, #0
    cac0:	d003      	beq.n	caca <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    cac2:	2101      	movs	r1, #1
    cac4:	6878      	ldr	r0, [r7, #4]
    cac6:	4b03      	ldr	r3, [pc, #12]	; (cad4 <n25q256a_read_reg+0x94>)
    cac8:	4798      	blx	r3
	}
	return status;
    caca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cacc:	4618      	mov	r0, r3
    cace:	3730      	adds	r7, #48	; 0x30
    cad0:	46bd      	mov	sp, r7
    cad2:	bd80      	pop	{r7, pc}
    cad4:	0000c975 	.word	0x0000c975
    cad8:	000043fd 	.word	0x000043fd

0000cadc <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    cadc:	b580      	push	{r7, lr}
    cade:	b08c      	sub	sp, #48	; 0x30
    cae0:	af00      	add	r7, sp, #0
    cae2:	60f8      	str	r0, [r7, #12]
    cae4:	607b      	str	r3, [r7, #4]
    cae6:	460b      	mov	r3, r1
    cae8:	72fb      	strb	r3, [r7, #11]
    caea:	4613      	mov	r3, r2
    caec:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    caee:	68fb      	ldr	r3, [r7, #12]
    caf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    caf2:	68fb      	ldr	r3, [r7, #12]
    caf4:	681b      	ldr	r3, [r3, #0]
    caf6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    caf8:	f107 0310 	add.w	r3, r7, #16
    cafc:	2200      	movs	r2, #0
    cafe:	601a      	str	r2, [r3, #0]
    cb00:	605a      	str	r2, [r3, #4]
    cb02:	609a      	str	r2, [r3, #8]
    cb04:	60da      	str	r2, [r3, #12]
    cb06:	611a      	str	r2, [r3, #16]
    cb08:	615a      	str	r2, [r3, #20]
    cb0a:	7afb      	ldrb	r3, [r7, #11]
    cb0c:	f003 0307 	and.w	r3, r3, #7
    cb10:	b2da      	uxtb	r2, r3
    cb12:	7c3b      	ldrb	r3, [r7, #16]
    cb14:	f362 0302 	bfi	r3, r2, #0, #3
    cb18:	743b      	strb	r3, [r7, #16]
    cb1a:	7c3b      	ldrb	r3, [r7, #16]
    cb1c:	f043 0310 	orr.w	r3, r3, #16
    cb20:	743b      	strb	r3, [r7, #16]
    cb22:	7c3b      	ldrb	r3, [r7, #16]
    cb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cb28:	743b      	strb	r3, [r7, #16]
    cb2a:	7c7b      	ldrb	r3, [r7, #17]
    cb2c:	2202      	movs	r2, #2
    cb2e:	f362 1305 	bfi	r3, r2, #4, #2
    cb32:	747b      	strb	r3, [r7, #17]
    cb34:	7abb      	ldrb	r3, [r7, #10]
    cb36:	753b      	strb	r3, [r7, #20]
    cb38:	2301      	movs	r3, #1
    cb3a:	61fb      	str	r3, [r7, #28]
    cb3c:	1d3b      	adds	r3, r7, #4
    cb3e:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb42:	7b5b      	ldrb	r3, [r3, #13]
    cb44:	2b00      	cmp	r3, #0
    cb46:	d003      	beq.n	cb50 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    cb48:	2100      	movs	r1, #0
    cb4a:	68f8      	ldr	r0, [r7, #12]
    cb4c:	4b09      	ldr	r3, [pc, #36]	; (cb74 <n25q256a_write_reg+0x98>)
    cb4e:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    cb50:	f107 0310 	add.w	r3, r7, #16
    cb54:	4619      	mov	r1, r3
    cb56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cb58:	4b07      	ldr	r3, [pc, #28]	; (cb78 <n25q256a_write_reg+0x9c>)
    cb5a:	4798      	blx	r3
	if (n25q->xip_mode) {
    cb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb5e:	7b5b      	ldrb	r3, [r3, #13]
    cb60:	2b00      	cmp	r3, #0
    cb62:	d003      	beq.n	cb6c <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    cb64:	2101      	movs	r1, #1
    cb66:	68f8      	ldr	r0, [r7, #12]
    cb68:	4b02      	ldr	r3, [pc, #8]	; (cb74 <n25q256a_write_reg+0x98>)
    cb6a:	4798      	blx	r3
	}
}
    cb6c:	bf00      	nop
    cb6e:	3730      	adds	r7, #48	; 0x30
    cb70:	46bd      	mov	sp, r7
    cb72:	bd80      	pop	{r7, pc}
    cb74:	0000c975 	.word	0x0000c975
    cb78:	000043fd 	.word	0x000043fd

0000cb7c <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    cb7c:	b580      	push	{r7, lr}
    cb7e:	b090      	sub	sp, #64	; 0x40
    cb80:	af00      	add	r7, sp, #0
    cb82:	6078      	str	r0, [r7, #4]
    cb84:	460b      	mov	r3, r1
    cb86:	70fb      	strb	r3, [r7, #3]
    cb88:	4613      	mov	r3, r2
    cb8a:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cb8c:	687b      	ldr	r3, [r7, #4]
    cb8e:	681b      	ldr	r3, [r3, #0]
    cb90:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    cb92:	78bb      	ldrb	r3, [r7, #2]
    cb94:	2b00      	cmp	r3, #0
    cb96:	d001      	beq.n	cb9c <n25q256a_write_enable+0x20>
    cb98:	2306      	movs	r3, #6
    cb9a:	e000      	b.n	cb9e <n25q256a_write_enable+0x22>
    cb9c:	2304      	movs	r3, #4
    cb9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    cba2:	f107 0320 	add.w	r3, r7, #32
    cba6:	2200      	movs	r2, #0
    cba8:	601a      	str	r2, [r3, #0]
    cbaa:	605a      	str	r2, [r3, #4]
    cbac:	609a      	str	r2, [r3, #8]
    cbae:	60da      	str	r2, [r3, #12]
    cbb0:	611a      	str	r2, [r3, #16]
    cbb2:	615a      	str	r2, [r3, #20]
    cbb4:	78fb      	ldrb	r3, [r7, #3]
    cbb6:	f003 0307 	and.w	r3, r3, #7
    cbba:	b2da      	uxtb	r2, r3
    cbbc:	f897 3020 	ldrb.w	r3, [r7, #32]
    cbc0:	f362 0302 	bfi	r3, r2, #0, #3
    cbc4:	f887 3020 	strb.w	r3, [r7, #32]
    cbc8:	f897 3020 	ldrb.w	r3, [r7, #32]
    cbcc:	f043 0310 	orr.w	r3, r3, #16
    cbd0:	f887 3020 	strb.w	r3, [r7, #32]
    cbd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    cbd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    cbdc:	f107 0308 	add.w	r3, r7, #8
    cbe0:	2200      	movs	r2, #0
    cbe2:	601a      	str	r2, [r3, #0]
    cbe4:	605a      	str	r2, [r3, #4]
    cbe6:	609a      	str	r2, [r3, #8]
    cbe8:	60da      	str	r2, [r3, #12]
    cbea:	611a      	str	r2, [r3, #16]
    cbec:	615a      	str	r2, [r3, #20]
    cbee:	78fb      	ldrb	r3, [r7, #3]
    cbf0:	f003 0307 	and.w	r3, r3, #7
    cbf4:	b2da      	uxtb	r2, r3
    cbf6:	7a3b      	ldrb	r3, [r7, #8]
    cbf8:	f362 0302 	bfi	r3, r2, #0, #3
    cbfc:	723b      	strb	r3, [r7, #8]
    cbfe:	7a3b      	ldrb	r3, [r7, #8]
    cc00:	f043 0310 	orr.w	r3, r3, #16
    cc04:	723b      	strb	r3, [r7, #8]
    cc06:	7a3b      	ldrb	r3, [r7, #8]
    cc08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cc0c:	723b      	strb	r3, [r7, #8]
    cc0e:	2305      	movs	r3, #5
    cc10:	733b      	strb	r3, [r7, #12]
    cc12:	2301      	movs	r3, #1
    cc14:	617b      	str	r3, [r7, #20]
    cc16:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    cc1a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    cc1c:	f107 0320 	add.w	r3, r7, #32
    cc20:	4619      	mov	r1, r3
    cc22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    cc24:	4b08      	ldr	r3, [pc, #32]	; (cc48 <n25q256a_write_enable+0xcc>)
    cc26:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    cc28:	f107 0308 	add.w	r3, r7, #8
    cc2c:	4619      	mov	r1, r3
    cc2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    cc30:	4b05      	ldr	r3, [pc, #20]	; (cc48 <n25q256a_write_enable+0xcc>)
    cc32:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    cc34:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    cc38:	f003 0302 	and.w	r3, r3, #2
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	d0ed      	beq.n	cc1c <n25q256a_write_enable+0xa0>
}
    cc40:	bf00      	nop
    cc42:	3740      	adds	r7, #64	; 0x40
    cc44:	46bd      	mov	sp, r7
    cc46:	bd80      	pop	{r7, pc}
    cc48:	000043fd 	.word	0x000043fd

0000cc4c <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    cc4c:	b590      	push	{r4, r7, lr}
    cc4e:	b087      	sub	sp, #28
    cc50:	af00      	add	r7, sp, #0
    cc52:	6078      	str	r0, [r7, #4]
    cc54:	460b      	mov	r3, r1
    cc56:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    cc5c:	68fb      	ldr	r3, [r7, #12]
    cc5e:	7b1b      	ldrb	r3, [r3, #12]
    cc60:	2b00      	cmp	r3, #0
    cc62:	d001      	beq.n	cc68 <n25q256a_switch_mode+0x1c>
    cc64:	2306      	movs	r3, #6
    cc66:	e000      	b.n	cc6a <n25q256a_switch_mode+0x1e>
    cc68:	2300      	movs	r3, #0
    cc6a:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    cc6c:	7afb      	ldrb	r3, [r7, #11]
    cc6e:	2265      	movs	r2, #101	; 0x65
    cc70:	4619      	mov	r1, r3
    cc72:	6878      	ldr	r0, [r7, #4]
    cc74:	4b25      	ldr	r3, [pc, #148]	; (cd0c <n25q256a_switch_mode+0xc0>)
    cc76:	4798      	blx	r3
    cc78:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    cc7a:	2300      	movs	r3, #0
    cc7c:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    cc7e:	68fb      	ldr	r3, [r7, #12]
    cc80:	7b1b      	ldrb	r3, [r3, #12]
    cc82:	78fa      	ldrb	r2, [r7, #3]
    cc84:	429a      	cmp	r2, r3
    cc86:	d03d      	beq.n	cd04 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    cc88:	78fb      	ldrb	r3, [r7, #3]
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	d00b      	beq.n	cca6 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    cc8e:	697b      	ldr	r3, [r7, #20]
    cc90:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cc94:	2b00      	cmp	r3, #0
    cc96:	d011      	beq.n	ccbc <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    cc98:	697b      	ldr	r3, [r7, #20]
    cc9a:	f003 031f 	and.w	r3, r3, #31
    cc9e:	617b      	str	r3, [r7, #20]
			modify = 1;
    cca0:	2301      	movs	r3, #1
    cca2:	74fb      	strb	r3, [r7, #19]
    cca4:	e00a      	b.n	ccbc <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    cca6:	697b      	ldr	r3, [r7, #20]
    cca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ccac:	2b00      	cmp	r3, #0
    ccae:	d105      	bne.n	ccbc <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ccb0:	697b      	ldr	r3, [r7, #20]
    ccb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ccb6:	617b      	str	r3, [r7, #20]
			modify = 1;
    ccb8:	2301      	movs	r3, #1
    ccba:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ccbc:	7cfb      	ldrb	r3, [r7, #19]
    ccbe:	2b00      	cmp	r3, #0
    ccc0:	d021      	beq.n	cd06 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ccc2:	68fb      	ldr	r3, [r7, #12]
    ccc4:	78fa      	ldrb	r2, [r7, #3]
    ccc6:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ccc8:	7afb      	ldrb	r3, [r7, #11]
    ccca:	2201      	movs	r2, #1
    cccc:	4619      	mov	r1, r3
    ccce:	6878      	ldr	r0, [r7, #4]
    ccd0:	4b0f      	ldr	r3, [pc, #60]	; (cd10 <n25q256a_switch_mode+0xc4>)
    ccd2:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ccd4:	7af9      	ldrb	r1, [r7, #11]
    ccd6:	697b      	ldr	r3, [r7, #20]
    ccd8:	2261      	movs	r2, #97	; 0x61
    ccda:	6878      	ldr	r0, [r7, #4]
    ccdc:	4c0d      	ldr	r4, [pc, #52]	; (cd14 <n25q256a_switch_mode+0xc8>)
    ccde:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    cce0:	78fb      	ldrb	r3, [r7, #3]
    cce2:	2b00      	cmp	r3, #0
    cce4:	d001      	beq.n	ccea <n25q256a_switch_mode+0x9e>
    cce6:	2306      	movs	r3, #6
    cce8:	e000      	b.n	ccec <n25q256a_switch_mode+0xa0>
    ccea:	2300      	movs	r3, #0
    ccec:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ccee:	7afb      	ldrb	r3, [r7, #11]
    ccf0:	2265      	movs	r2, #101	; 0x65
    ccf2:	4619      	mov	r1, r3
    ccf4:	6878      	ldr	r0, [r7, #4]
    ccf6:	4b05      	ldr	r3, [pc, #20]	; (cd0c <n25q256a_switch_mode+0xc0>)
    ccf8:	4798      	blx	r3
    ccfa:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ccfc:	68fb      	ldr	r3, [r7, #12]
    ccfe:	78fa      	ldrb	r2, [r7, #3]
    cd00:	731a      	strb	r2, [r3, #12]
    cd02:	e000      	b.n	cd06 <n25q256a_switch_mode+0xba>
		return;
    cd04:	bf00      	nop
	}
}
    cd06:	371c      	adds	r7, #28
    cd08:	46bd      	mov	sp, r7
    cd0a:	bd90      	pop	{r4, r7, pc}
    cd0c:	0000ca41 	.word	0x0000ca41
    cd10:	0000cb7d 	.word	0x0000cb7d
    cd14:	0000cadd 	.word	0x0000cadd

0000cd18 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    cd18:	b580      	push	{r7, lr}
    cd1a:	b086      	sub	sp, #24
    cd1c:	af00      	add	r7, sp, #0
    cd1e:	60f8      	str	r0, [r7, #12]
    cd20:	60b9      	str	r1, [r7, #8]
    cd22:	607a      	str	r2, [r7, #4]
    cd24:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    cd26:	68fb      	ldr	r3, [r7, #12]
    cd28:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    cd2a:	4a0c      	ldr	r2, [pc, #48]	; (cd5c <n25q256a_construct+0x44>)
    cd2c:	68b9      	ldr	r1, [r7, #8]
    cd2e:	68f8      	ldr	r0, [r7, #12]
    cd30:	4b0b      	ldr	r3, [pc, #44]	; (cd60 <n25q256a_construct+0x48>)
    cd32:	4798      	blx	r3
	n25q->quad_mode    = 0;
    cd34:	697b      	ldr	r3, [r7, #20]
    cd36:	2200      	movs	r2, #0
    cd38:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    cd3a:	697b      	ldr	r3, [r7, #20]
    cd3c:	2200      	movs	r2, #0
    cd3e:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    cd40:	697b      	ldr	r3, [r7, #20]
    cd42:	687a      	ldr	r2, [r7, #4]
    cd44:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    cd46:	78fb      	ldrb	r3, [r7, #3]
    cd48:	4619      	mov	r1, r3
    cd4a:	68f8      	ldr	r0, [r7, #12]
    cd4c:	4b05      	ldr	r3, [pc, #20]	; (cd64 <n25q256a_construct+0x4c>)
    cd4e:	4798      	blx	r3
	return me;
    cd50:	68fb      	ldr	r3, [r7, #12]
}
    cd52:	4618      	mov	r0, r3
    cd54:	3718      	adds	r7, #24
    cd56:	46bd      	mov	sp, r7
    cd58:	bd80      	pop	{r7, pc}
    cd5a:	bf00      	nop
    cd5c:	00011d18 	.word	0x00011d18
    cd60:	0000d1f5 	.word	0x0000d1f5
    cd64:	0000cc4d 	.word	0x0000cc4d

0000cd68 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    cd68:	b580      	push	{r7, lr}
    cd6a:	b08c      	sub	sp, #48	; 0x30
    cd6c:	af00      	add	r7, sp, #0
    cd6e:	60f8      	str	r0, [r7, #12]
    cd70:	60b9      	str	r1, [r7, #8]
    cd72:	607a      	str	r2, [r7, #4]
    cd74:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    cd76:	68fb      	ldr	r3, [r7, #12]
    cd78:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cd7a:	68fb      	ldr	r3, [r7, #12]
    cd7c:	681b      	ldr	r3, [r3, #0]
    cd7e:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    cd80:	f107 0310 	add.w	r3, r7, #16
    cd84:	2200      	movs	r2, #0
    cd86:	601a      	str	r2, [r3, #0]
    cd88:	605a      	str	r2, [r3, #4]
    cd8a:	609a      	str	r2, [r3, #8]
    cd8c:	60da      	str	r2, [r3, #12]
    cd8e:	611a      	str	r2, [r3, #16]
    cd90:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    cd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd94:	7b1b      	ldrb	r3, [r3, #12]
    cd96:	2b00      	cmp	r3, #0
    cd98:	d001      	beq.n	cd9e <n25q256a_read+0x36>
    cd9a:	2206      	movs	r2, #6
    cd9c:	e000      	b.n	cda0 <n25q256a_read+0x38>
    cd9e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    cda0:	7c3b      	ldrb	r3, [r7, #16]
    cda2:	f362 0302 	bfi	r3, r2, #0, #3
    cda6:	743b      	strb	r3, [r7, #16]
    cda8:	7c3b      	ldrb	r3, [r7, #16]
    cdaa:	f043 0310 	orr.w	r3, r3, #16
    cdae:	743b      	strb	r3, [r7, #16]
    cdb0:	7c3b      	ldrb	r3, [r7, #16]
    cdb2:	f043 0320 	orr.w	r3, r3, #32
    cdb6:	743b      	strb	r3, [r7, #16]
    cdb8:	7c3b      	ldrb	r3, [r7, #16]
    cdba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cdbe:	743b      	strb	r3, [r7, #16]
    cdc0:	7c7b      	ldrb	r3, [r7, #17]
    cdc2:	2201      	movs	r2, #1
    cdc4:	f362 1305 	bfi	r3, r2, #4, #2
    cdc8:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdcc:	7b1b      	ldrb	r3, [r3, #12]
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d001      	beq.n	cdd6 <n25q256a_read+0x6e>
    cdd2:	220a      	movs	r2, #10
    cdd4:	e000      	b.n	cdd8 <n25q256a_read+0x70>
    cdd6:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    cdd8:	7cbb      	ldrb	r3, [r7, #18]
    cdda:	f362 0304 	bfi	r3, r2, #0, #5
    cdde:	74bb      	strb	r3, [r7, #18]
    cde0:	230b      	movs	r3, #11
    cde2:	753b      	strb	r3, [r7, #20]
    cde4:	687b      	ldr	r3, [r7, #4]
    cde6:	61bb      	str	r3, [r7, #24]
    cde8:	683b      	ldr	r3, [r7, #0]
    cdea:	61fb      	str	r3, [r7, #28]
    cdec:	68bb      	ldr	r3, [r7, #8]
    cdee:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    cdf0:	f107 0310 	add.w	r3, r7, #16
    cdf4:	4619      	mov	r1, r3
    cdf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cdf8:	4b03      	ldr	r3, [pc, #12]	; (ce08 <n25q256a_read+0xa0>)
    cdfa:	4798      	blx	r3
	return ERR_NONE;
    cdfc:	2300      	movs	r3, #0
}
    cdfe:	4618      	mov	r0, r3
    ce00:	3730      	adds	r7, #48	; 0x30
    ce02:	46bd      	mov	sp, r7
    ce04:	bd80      	pop	{r7, pc}
    ce06:	bf00      	nop
    ce08:	000043fd 	.word	0x000043fd

0000ce0c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ce0c:	b580      	push	{r7, lr}
    ce0e:	b08c      	sub	sp, #48	; 0x30
    ce10:	af00      	add	r7, sp, #0
    ce12:	60f8      	str	r0, [r7, #12]
    ce14:	60b9      	str	r1, [r7, #8]
    ce16:	607a      	str	r2, [r7, #4]
    ce18:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ce1a:	68fb      	ldr	r3, [r7, #12]
    ce1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ce1e:	68fb      	ldr	r3, [r7, #12]
    ce20:	681b      	ldr	r3, [r3, #0]
    ce22:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ce24:	f107 0310 	add.w	r3, r7, #16
    ce28:	2200      	movs	r2, #0
    ce2a:	601a      	str	r2, [r3, #0]
    ce2c:	605a      	str	r2, [r3, #4]
    ce2e:	609a      	str	r2, [r3, #8]
    ce30:	60da      	str	r2, [r3, #12]
    ce32:	611a      	str	r2, [r3, #16]
    ce34:	615a      	str	r2, [r3, #20]
    ce36:	7c3b      	ldrb	r3, [r7, #16]
    ce38:	f043 0310 	orr.w	r3, r3, #16
    ce3c:	743b      	strb	r3, [r7, #16]
    ce3e:	7c3b      	ldrb	r3, [r7, #16]
    ce40:	f043 0320 	orr.w	r3, r3, #32
    ce44:	743b      	strb	r3, [r7, #16]
    ce46:	7c3b      	ldrb	r3, [r7, #16]
    ce48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ce4c:	743b      	strb	r3, [r7, #16]
    ce4e:	7c7b      	ldrb	r3, [r7, #17]
    ce50:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ce54:	747b      	strb	r3, [r7, #17]
    ce56:	2302      	movs	r3, #2
    ce58:	753b      	strb	r3, [r7, #20]
    ce5a:	687b      	ldr	r3, [r7, #4]
    ce5c:	61bb      	str	r3, [r7, #24]
    ce5e:	683b      	ldr	r3, [r7, #0]
    ce60:	61fb      	str	r3, [r7, #28]
    ce62:	68bb      	ldr	r3, [r7, #8]
    ce64:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce68:	7b1b      	ldrb	r3, [r3, #12]
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	d001      	beq.n	ce72 <n25q256a_write+0x66>
    ce6e:	2206      	movs	r2, #6
    ce70:	e000      	b.n	ce74 <n25q256a_write+0x68>
    ce72:	2200      	movs	r2, #0
    ce74:	7c3b      	ldrb	r3, [r7, #16]
    ce76:	f362 0302 	bfi	r3, r2, #0, #3
    ce7a:	743b      	strb	r3, [r7, #16]
	while (length) {
    ce7c:	e035      	b.n	ceea <n25q256a_write+0xde>
		cmd.address = address;
    ce7e:	687b      	ldr	r3, [r7, #4]
    ce80:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ce82:	683b      	ldr	r3, [r7, #0]
    ce84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ce88:	d802      	bhi.n	ce90 <n25q256a_write+0x84>
			cmd.buf_len = length;
    ce8a:	683b      	ldr	r3, [r7, #0]
    ce8c:	61fb      	str	r3, [r7, #28]
    ce8e:	e002      	b.n	ce96 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ce90:	f44f 7380 	mov.w	r3, #256	; 0x100
    ce94:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ce96:	7c3b      	ldrb	r3, [r7, #16]
    ce98:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ce9c:	b2db      	uxtb	r3, r3
    ce9e:	2201      	movs	r2, #1
    cea0:	4619      	mov	r1, r3
    cea2:	68f8      	ldr	r0, [r7, #12]
    cea4:	4b19      	ldr	r3, [pc, #100]	; (cf0c <n25q256a_write+0x100>)
    cea6:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    cea8:	f107 0310 	add.w	r3, r7, #16
    ceac:	4619      	mov	r1, r3
    ceae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ceb0:	4b17      	ldr	r3, [pc, #92]	; (cf10 <n25q256a_write+0x104>)
    ceb2:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ceb4:	bf00      	nop
    ceb6:	7c3b      	ldrb	r3, [r7, #16]
    ceb8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cebc:	b2db      	uxtb	r3, r3
    cebe:	2270      	movs	r2, #112	; 0x70
    cec0:	4619      	mov	r1, r3
    cec2:	68f8      	ldr	r0, [r7, #12]
    cec4:	4b13      	ldr	r3, [pc, #76]	; (cf14 <n25q256a_write+0x108>)
    cec6:	4798      	blx	r3
    cec8:	4603      	mov	r3, r0
    ceca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cece:	2b00      	cmp	r3, #0
    ced0:	d0f1      	beq.n	ceb6 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ced2:	6a3a      	ldr	r2, [r7, #32]
    ced4:	69fb      	ldr	r3, [r7, #28]
    ced6:	4413      	add	r3, r2
    ced8:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    ceda:	69fb      	ldr	r3, [r7, #28]
    cedc:	683a      	ldr	r2, [r7, #0]
    cede:	1ad3      	subs	r3, r2, r3
    cee0:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    cee2:	69fb      	ldr	r3, [r7, #28]
    cee4:	687a      	ldr	r2, [r7, #4]
    cee6:	4413      	add	r3, r2
    cee8:	607b      	str	r3, [r7, #4]
	while (length) {
    ceea:	683b      	ldr	r3, [r7, #0]
    ceec:	2b00      	cmp	r3, #0
    ceee:	d1c6      	bne.n	ce7e <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    cef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cef2:	7b5b      	ldrb	r3, [r3, #13]
    cef4:	2b00      	cmp	r3, #0
    cef6:	d003      	beq.n	cf00 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    cef8:	2101      	movs	r1, #1
    cefa:	68f8      	ldr	r0, [r7, #12]
    cefc:	4b06      	ldr	r3, [pc, #24]	; (cf18 <n25q256a_write+0x10c>)
    cefe:	4798      	blx	r3
	}
	return ERR_NONE;
    cf00:	2300      	movs	r3, #0
}
    cf02:	4618      	mov	r0, r3
    cf04:	3730      	adds	r7, #48	; 0x30
    cf06:	46bd      	mov	sp, r7
    cf08:	bd80      	pop	{r7, pc}
    cf0a:	bf00      	nop
    cf0c:	0000cb7d 	.word	0x0000cb7d
    cf10:	000043fd 	.word	0x000043fd
    cf14:	0000ca41 	.word	0x0000ca41
    cf18:	0000c975 	.word	0x0000c975

0000cf1c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    cf1c:	b580      	push	{r7, lr}
    cf1e:	b090      	sub	sp, #64	; 0x40
    cf20:	af00      	add	r7, sp, #0
    cf22:	60f8      	str	r0, [r7, #12]
    cf24:	60b9      	str	r1, [r7, #8]
    cf26:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    cf28:	68fb      	ldr	r3, [r7, #12]
    cf2a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cf2c:	68fb      	ldr	r3, [r7, #12]
    cf2e:	681b      	ldr	r3, [r3, #0]
    cf30:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    cf32:	f107 0314 	add.w	r3, r7, #20
    cf36:	2200      	movs	r2, #0
    cf38:	601a      	str	r2, [r3, #0]
    cf3a:	605a      	str	r2, [r3, #4]
    cf3c:	609a      	str	r2, [r3, #8]
    cf3e:	60da      	str	r2, [r3, #12]
    cf40:	611a      	str	r2, [r3, #16]
    cf42:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    cf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cf46:	7b1b      	ldrb	r3, [r3, #12]
    cf48:	2b00      	cmp	r3, #0
    cf4a:	d001      	beq.n	cf50 <n25q256a_erase+0x34>
    cf4c:	2206      	movs	r2, #6
    cf4e:	e000      	b.n	cf52 <n25q256a_erase+0x36>
    cf50:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    cf52:	7d3b      	ldrb	r3, [r7, #20]
    cf54:	f362 0302 	bfi	r3, r2, #0, #3
    cf58:	753b      	strb	r3, [r7, #20]
    cf5a:	7d3b      	ldrb	r3, [r7, #20]
    cf5c:	f043 0310 	orr.w	r3, r3, #16
    cf60:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    cf62:	687b      	ldr	r3, [r7, #4]
    cf64:	4a56      	ldr	r2, [pc, #344]	; (d0c0 <n25q256a_erase+0x1a4>)
    cf66:	4293      	cmp	r3, r2
    cf68:	bf94      	ite	ls
    cf6a:	2301      	movls	r3, #1
    cf6c:	2300      	movhi	r3, #0
    cf6e:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    cf70:	7d3b      	ldrb	r3, [r7, #20]
    cf72:	f362 1345 	bfi	r3, r2, #5, #1
    cf76:	753b      	strb	r3, [r7, #20]
    cf78:	7d7b      	ldrb	r3, [r7, #21]
    cf7a:	2202      	movs	r2, #2
    cf7c:	f362 1305 	bfi	r3, r2, #4, #2
    cf80:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    cf82:	68bb      	ldr	r3, [r7, #8]
    cf84:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    cf86:	687b      	ldr	r3, [r7, #4]
    cf88:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    cf8a:	2300      	movs	r3, #0
    cf8c:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    cf8e:	687b      	ldr	r3, [r7, #4]
    cf90:	f3c3 030b 	ubfx	r3, r3, #0, #12
    cf94:	2b00      	cmp	r3, #0
    cf96:	d104      	bne.n	cfa2 <n25q256a_erase+0x86>
    cf98:	68bb      	ldr	r3, [r7, #8]
    cf9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    cf9e:	2b00      	cmp	r3, #0
    cfa0:	d002      	beq.n	cfa8 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    cfa2:	f06f 030c 	mvn.w	r3, #12
    cfa6:	e087      	b.n	d0b8 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    cfa8:	687b      	ldr	r3, [r7, #4]
    cfaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    cfae:	d368      	bcc.n	d082 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    cfb0:	23c7      	movs	r3, #199	; 0xc7
    cfb2:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    cfb4:	7d3b      	ldrb	r3, [r7, #20]
    cfb6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cfba:	b2db      	uxtb	r3, r3
    cfbc:	2201      	movs	r2, #1
    cfbe:	4619      	mov	r1, r3
    cfc0:	68f8      	ldr	r0, [r7, #12]
    cfc2:	4b40      	ldr	r3, [pc, #256]	; (d0c4 <n25q256a_erase+0x1a8>)
    cfc4:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    cfc6:	f107 0314 	add.w	r3, r7, #20
    cfca:	4619      	mov	r1, r3
    cfcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cfce:	4b3e      	ldr	r3, [pc, #248]	; (d0c8 <n25q256a_erase+0x1ac>)
    cfd0:	4798      	blx	r3
    cfd2:	e059      	b.n	d088 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    cfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cfd6:	b29b      	uxth	r3, r3
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d11f      	bne.n	d01c <n25q256a_erase+0x100>
    cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    cfe2:	d31b      	bcc.n	d01c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    cfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cfe6:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    cfe8:	23d8      	movs	r3, #216	; 0xd8
    cfea:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    cfec:	7d3b      	ldrb	r3, [r7, #20]
    cfee:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cff2:	b2db      	uxtb	r3, r3
    cff4:	2201      	movs	r2, #1
    cff6:	4619      	mov	r1, r3
    cff8:	68f8      	ldr	r0, [r7, #12]
    cffa:	4b32      	ldr	r3, [pc, #200]	; (d0c4 <n25q256a_erase+0x1a8>)
    cffc:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    cffe:	f107 0314 	add.w	r3, r7, #20
    d002:	4619      	mov	r1, r3
    d004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d006:	4b30      	ldr	r3, [pc, #192]	; (d0c8 <n25q256a_erase+0x1ac>)
    d008:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    d00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d00c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d010:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d014:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d018:	63bb      	str	r3, [r7, #56]	; 0x38
    d01a:	e023      	b.n	d064 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d022:	d31b      	bcc.n	d05c <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    d024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d026:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    d028:	2320      	movs	r3, #32
    d02a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d02c:	7d3b      	ldrb	r3, [r7, #20]
    d02e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d032:	b2db      	uxtb	r3, r3
    d034:	2201      	movs	r2, #1
    d036:	4619      	mov	r1, r3
    d038:	68f8      	ldr	r0, [r7, #12]
    d03a:	4b22      	ldr	r3, [pc, #136]	; (d0c4 <n25q256a_erase+0x1a8>)
    d03c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d03e:	f107 0314 	add.w	r3, r7, #20
    d042:	4619      	mov	r1, r3
    d044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d046:	4b20      	ldr	r3, [pc, #128]	; (d0c8 <n25q256a_erase+0x1ac>)
    d048:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    d04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d050:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d054:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d058:	63bb      	str	r3, [r7, #56]	; 0x38
    d05a:	e003      	b.n	d064 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    d05c:	f06f 030c 	mvn.w	r3, #12
    d060:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    d062:	e011      	b.n	d088 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d064:	bf00      	nop
    d066:	7d3b      	ldrb	r3, [r7, #20]
    d068:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d06c:	b2db      	uxtb	r3, r3
    d06e:	2270      	movs	r2, #112	; 0x70
    d070:	4619      	mov	r1, r3
    d072:	68f8      	ldr	r0, [r7, #12]
    d074:	4b15      	ldr	r3, [pc, #84]	; (d0cc <n25q256a_erase+0x1b0>)
    d076:	4798      	blx	r3
    d078:	4603      	mov	r3, r0
    d07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d07e:	2b00      	cmp	r3, #0
    d080:	d0f1      	beq.n	d066 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    d082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d084:	2b00      	cmp	r3, #0
    d086:	d1a5      	bne.n	cfd4 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d088:	bf00      	nop
    d08a:	7d3b      	ldrb	r3, [r7, #20]
    d08c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d090:	b2db      	uxtb	r3, r3
    d092:	2270      	movs	r2, #112	; 0x70
    d094:	4619      	mov	r1, r3
    d096:	68f8      	ldr	r0, [r7, #12]
    d098:	4b0c      	ldr	r3, [pc, #48]	; (d0cc <n25q256a_erase+0x1b0>)
    d09a:	4798      	blx	r3
    d09c:	4603      	mov	r3, r0
    d09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d0a2:	2b00      	cmp	r3, #0
    d0a4:	d0f1      	beq.n	d08a <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d0a8:	7b5b      	ldrb	r3, [r3, #13]
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d003      	beq.n	d0b6 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    d0ae:	2101      	movs	r1, #1
    d0b0:	68f8      	ldr	r0, [r7, #12]
    d0b2:	4b07      	ldr	r3, [pc, #28]	; (d0d0 <n25q256a_erase+0x1b4>)
    d0b4:	4798      	blx	r3
	}
	return rc;
    d0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    d0b8:	4618      	mov	r0, r3
    d0ba:	3740      	adds	r7, #64	; 0x40
    d0bc:	46bd      	mov	sp, r7
    d0be:	bd80      	pop	{r7, pc}
    d0c0:	001fffff 	.word	0x001fffff
    d0c4:	0000cb7d 	.word	0x0000cb7d
    d0c8:	000043fd 	.word	0x000043fd
    d0cc:	0000ca41 	.word	0x0000ca41
    d0d0:	0000c975 	.word	0x0000c975

0000d0d4 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    d0d4:	b590      	push	{r4, r7, lr}
    d0d6:	b085      	sub	sp, #20
    d0d8:	af00      	add	r7, sp, #0
    d0da:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    d0dc:	687b      	ldr	r3, [r7, #4]
    d0de:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d0e0:	68fb      	ldr	r3, [r7, #12]
    d0e2:	7b1b      	ldrb	r3, [r3, #12]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d001      	beq.n	d0ec <n25q256a_enable_xip+0x18>
    d0e8:	2306      	movs	r3, #6
    d0ea:	e000      	b.n	d0ee <n25q256a_enable_xip+0x1a>
    d0ec:	2300      	movs	r3, #0
    d0ee:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    d0f0:	68fb      	ldr	r3, [r7, #12]
    d0f2:	7b5b      	ldrb	r3, [r3, #13]
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d129      	bne.n	d14c <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d0f8:	7afb      	ldrb	r3, [r7, #11]
    d0fa:	2285      	movs	r2, #133	; 0x85
    d0fc:	4619      	mov	r1, r3
    d0fe:	6878      	ldr	r0, [r7, #4]
    d100:	4b15      	ldr	r3, [pc, #84]	; (d158 <n25q256a_enable_xip+0x84>)
    d102:	4798      	blx	r3
    d104:	4603      	mov	r3, r0
    d106:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    d108:	7abb      	ldrb	r3, [r7, #10]
    d10a:	f003 0308 	and.w	r3, r3, #8
    d10e:	2b00      	cmp	r3, #0
    d110:	d015      	beq.n	d13e <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    d112:	7abb      	ldrb	r3, [r7, #10]
    d114:	f023 0308 	bic.w	r3, r3, #8
    d118:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    d11a:	7abb      	ldrb	r3, [r7, #10]
    d11c:	7af9      	ldrb	r1, [r7, #11]
    d11e:	2281      	movs	r2, #129	; 0x81
    d120:	6878      	ldr	r0, [r7, #4]
    d122:	4c0e      	ldr	r4, [pc, #56]	; (d15c <n25q256a_enable_xip+0x88>)
    d124:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d126:	bf00      	nop
    d128:	7afb      	ldrb	r3, [r7, #11]
    d12a:	2270      	movs	r2, #112	; 0x70
    d12c:	4619      	mov	r1, r3
    d12e:	6878      	ldr	r0, [r7, #4]
    d130:	4b09      	ldr	r3, [pc, #36]	; (d158 <n25q256a_enable_xip+0x84>)
    d132:	4798      	blx	r3
    d134:	4603      	mov	r3, r0
    d136:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d13a:	2b00      	cmp	r3, #0
    d13c:	d0f4      	beq.n	d128 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    d13e:	68fb      	ldr	r3, [r7, #12]
    d140:	2201      	movs	r2, #1
    d142:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    d144:	2101      	movs	r1, #1
    d146:	6878      	ldr	r0, [r7, #4]
    d148:	4b05      	ldr	r3, [pc, #20]	; (d160 <n25q256a_enable_xip+0x8c>)
    d14a:	4798      	blx	r3
	}
	return ERR_NONE;
    d14c:	2300      	movs	r3, #0
}
    d14e:	4618      	mov	r0, r3
    d150:	3714      	adds	r7, #20
    d152:	46bd      	mov	sp, r7
    d154:	bd90      	pop	{r4, r7, pc}
    d156:	bf00      	nop
    d158:	0000ca41 	.word	0x0000ca41
    d15c:	0000cadd 	.word	0x0000cadd
    d160:	0000c975 	.word	0x0000c975

0000d164 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    d164:	b580      	push	{r7, lr}
    d166:	b086      	sub	sp, #24
    d168:	af00      	add	r7, sp, #0
    d16a:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d16c:	687b      	ldr	r3, [r7, #4]
    d16e:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d170:	687b      	ldr	r3, [r7, #4]
    d172:	681b      	ldr	r3, [r3, #0]
    d174:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d176:	697b      	ldr	r3, [r7, #20]
    d178:	7b1b      	ldrb	r3, [r3, #12]
    d17a:	2b00      	cmp	r3, #0
    d17c:	d001      	beq.n	d182 <n25q256a_disable_xip+0x1e>
    d17e:	2306      	movs	r3, #6
    d180:	e000      	b.n	d184 <n25q256a_disable_xip+0x20>
    d182:	2300      	movs	r3, #0
    d184:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    d186:	2100      	movs	r1, #0
    d188:	6878      	ldr	r0, [r7, #4]
    d18a:	4b15      	ldr	r3, [pc, #84]	; (d1e0 <n25q256a_disable_xip+0x7c>)
    d18c:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d18e:	7bfb      	ldrb	r3, [r7, #15]
    d190:	2285      	movs	r2, #133	; 0x85
    d192:	4619      	mov	r1, r3
    d194:	6878      	ldr	r0, [r7, #4]
    d196:	4b13      	ldr	r3, [pc, #76]	; (d1e4 <n25q256a_disable_xip+0x80>)
    d198:	4798      	blx	r3
    d19a:	4603      	mov	r3, r0
    d19c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    d19e:	7bbb      	ldrb	r3, [r7, #14]
    d1a0:	f003 0308 	and.w	r3, r3, #8
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d113      	bne.n	d1d0 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    d1a8:	697b      	ldr	r3, [r7, #20]
    d1aa:	689b      	ldr	r3, [r3, #8]
    d1ac:	2b00      	cmp	r3, #0
    d1ae:	d00f      	beq.n	d1d0 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    d1b0:	693b      	ldr	r3, [r7, #16]
    d1b2:	681b      	ldr	r3, [r3, #0]
    d1b4:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    d1b6:	6938      	ldr	r0, [r7, #16]
    d1b8:	4b0b      	ldr	r3, [pc, #44]	; (d1e8 <n25q256a_disable_xip+0x84>)
    d1ba:	4798      	blx	r3
			n25q->pin_exit_xip();
    d1bc:	697b      	ldr	r3, [r7, #20]
    d1be:	689b      	ldr	r3, [r3, #8]
    d1c0:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    d1c2:	68b9      	ldr	r1, [r7, #8]
    d1c4:	6938      	ldr	r0, [r7, #16]
    d1c6:	4b09      	ldr	r3, [pc, #36]	; (d1ec <n25q256a_disable_xip+0x88>)
    d1c8:	4798      	blx	r3
			qspi_sync_enable(descr);
    d1ca:	6938      	ldr	r0, [r7, #16]
    d1cc:	4b08      	ldr	r3, [pc, #32]	; (d1f0 <n25q256a_disable_xip+0x8c>)
    d1ce:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    d1d0:	697b      	ldr	r3, [r7, #20]
    d1d2:	2200      	movs	r2, #0
    d1d4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d1d6:	2300      	movs	r3, #0
}
    d1d8:	4618      	mov	r0, r3
    d1da:	3718      	adds	r7, #24
    d1dc:	46bd      	mov	sp, r7
    d1de:	bd80      	pop	{r7, pc}
    d1e0:	0000c975 	.word	0x0000c975
    d1e4:	0000ca41 	.word	0x0000ca41
    d1e8:	000043c1 	.word	0x000043c1
    d1ec:	00004339 	.word	0x00004339
    d1f0:	00004385 	.word	0x00004385

0000d1f4 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    d1f4:	b480      	push	{r7}
    d1f6:	b085      	sub	sp, #20
    d1f8:	af00      	add	r7, sp, #0
    d1fa:	60f8      	str	r0, [r7, #12]
    d1fc:	60b9      	str	r1, [r7, #8]
    d1fe:	607a      	str	r2, [r7, #4]
	me->io        = io;
    d200:	68fb      	ldr	r3, [r7, #12]
    d202:	68ba      	ldr	r2, [r7, #8]
    d204:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    d206:	68fb      	ldr	r3, [r7, #12]
    d208:	687a      	ldr	r2, [r7, #4]
    d20a:	605a      	str	r2, [r3, #4]

	return me;
    d20c:	68fb      	ldr	r3, [r7, #12]
}
    d20e:	4618      	mov	r0, r3
    d210:	3714      	adds	r7, #20
    d212:	46bd      	mov	sp, r7
    d214:	f85d 7b04 	ldr.w	r7, [sp], #4
    d218:	4770      	bx	lr

0000d21a <hri_port_set_DIR_reg>:
{
    d21a:	b480      	push	{r7}
    d21c:	b085      	sub	sp, #20
    d21e:	af00      	add	r7, sp, #0
    d220:	60f8      	str	r0, [r7, #12]
    d222:	460b      	mov	r3, r1
    d224:	607a      	str	r2, [r7, #4]
    d226:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    d228:	7afb      	ldrb	r3, [r7, #11]
    d22a:	68fa      	ldr	r2, [r7, #12]
    d22c:	01db      	lsls	r3, r3, #7
    d22e:	4413      	add	r3, r2
    d230:	3308      	adds	r3, #8
    d232:	687a      	ldr	r2, [r7, #4]
    d234:	601a      	str	r2, [r3, #0]
}
    d236:	bf00      	nop
    d238:	3714      	adds	r7, #20
    d23a:	46bd      	mov	sp, r7
    d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d240:	4770      	bx	lr

0000d242 <hri_port_clear_DIR_reg>:
{
    d242:	b480      	push	{r7}
    d244:	b085      	sub	sp, #20
    d246:	af00      	add	r7, sp, #0
    d248:	60f8      	str	r0, [r7, #12]
    d24a:	460b      	mov	r3, r1
    d24c:	607a      	str	r2, [r7, #4]
    d24e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    d250:	7afb      	ldrb	r3, [r7, #11]
    d252:	68fa      	ldr	r2, [r7, #12]
    d254:	01db      	lsls	r3, r3, #7
    d256:	4413      	add	r3, r2
    d258:	3304      	adds	r3, #4
    d25a:	687a      	ldr	r2, [r7, #4]
    d25c:	601a      	str	r2, [r3, #0]
}
    d25e:	bf00      	nop
    d260:	3714      	adds	r7, #20
    d262:	46bd      	mov	sp, r7
    d264:	f85d 7b04 	ldr.w	r7, [sp], #4
    d268:	4770      	bx	lr

0000d26a <hri_port_set_OUT_reg>:
{
    d26a:	b480      	push	{r7}
    d26c:	b085      	sub	sp, #20
    d26e:	af00      	add	r7, sp, #0
    d270:	60f8      	str	r0, [r7, #12]
    d272:	460b      	mov	r3, r1
    d274:	607a      	str	r2, [r7, #4]
    d276:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d278:	7afb      	ldrb	r3, [r7, #11]
    d27a:	68fa      	ldr	r2, [r7, #12]
    d27c:	01db      	lsls	r3, r3, #7
    d27e:	4413      	add	r3, r2
    d280:	3318      	adds	r3, #24
    d282:	687a      	ldr	r2, [r7, #4]
    d284:	601a      	str	r2, [r3, #0]
}
    d286:	bf00      	nop
    d288:	3714      	adds	r7, #20
    d28a:	46bd      	mov	sp, r7
    d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d290:	4770      	bx	lr

0000d292 <hri_port_clear_OUT_reg>:
{
    d292:	b480      	push	{r7}
    d294:	b085      	sub	sp, #20
    d296:	af00      	add	r7, sp, #0
    d298:	60f8      	str	r0, [r7, #12]
    d29a:	460b      	mov	r3, r1
    d29c:	607a      	str	r2, [r7, #4]
    d29e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d2a0:	7afb      	ldrb	r3, [r7, #11]
    d2a2:	68fa      	ldr	r2, [r7, #12]
    d2a4:	01db      	lsls	r3, r3, #7
    d2a6:	4413      	add	r3, r2
    d2a8:	3314      	adds	r3, #20
    d2aa:	687a      	ldr	r2, [r7, #4]
    d2ac:	601a      	str	r2, [r3, #0]
}
    d2ae:	bf00      	nop
    d2b0:	3714      	adds	r7, #20
    d2b2:	46bd      	mov	sp, r7
    d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2b8:	4770      	bx	lr

0000d2ba <hri_port_write_PMUX_PMUXE_bf>:
{
    d2ba:	b480      	push	{r7}
    d2bc:	b085      	sub	sp, #20
    d2be:	af00      	add	r7, sp, #0
    d2c0:	6078      	str	r0, [r7, #4]
    d2c2:	4608      	mov	r0, r1
    d2c4:	4611      	mov	r1, r2
    d2c6:	461a      	mov	r2, r3
    d2c8:	4603      	mov	r3, r0
    d2ca:	70fb      	strb	r3, [r7, #3]
    d2cc:	460b      	mov	r3, r1
    d2ce:	70bb      	strb	r3, [r7, #2]
    d2d0:	4613      	mov	r3, r2
    d2d2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d2d4:	78fa      	ldrb	r2, [r7, #3]
    d2d6:	78bb      	ldrb	r3, [r7, #2]
    d2d8:	6879      	ldr	r1, [r7, #4]
    d2da:	01d2      	lsls	r2, r2, #7
    d2dc:	440a      	add	r2, r1
    d2de:	4413      	add	r3, r2
    d2e0:	3330      	adds	r3, #48	; 0x30
    d2e2:	781b      	ldrb	r3, [r3, #0]
    d2e4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    d2e6:	7bfb      	ldrb	r3, [r7, #15]
    d2e8:	f023 030f 	bic.w	r3, r3, #15
    d2ec:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    d2ee:	787b      	ldrb	r3, [r7, #1]
    d2f0:	f003 030f 	and.w	r3, r3, #15
    d2f4:	b2da      	uxtb	r2, r3
    d2f6:	7bfb      	ldrb	r3, [r7, #15]
    d2f8:	4313      	orrs	r3, r2
    d2fa:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d2fc:	78fa      	ldrb	r2, [r7, #3]
    d2fe:	78bb      	ldrb	r3, [r7, #2]
    d300:	6879      	ldr	r1, [r7, #4]
    d302:	01d2      	lsls	r2, r2, #7
    d304:	440a      	add	r2, r1
    d306:	4413      	add	r3, r2
    d308:	3330      	adds	r3, #48	; 0x30
    d30a:	7bfa      	ldrb	r2, [r7, #15]
    d30c:	701a      	strb	r2, [r3, #0]
}
    d30e:	bf00      	nop
    d310:	3714      	adds	r7, #20
    d312:	46bd      	mov	sp, r7
    d314:	f85d 7b04 	ldr.w	r7, [sp], #4
    d318:	4770      	bx	lr

0000d31a <hri_port_write_PMUX_PMUXO_bf>:
{
    d31a:	b480      	push	{r7}
    d31c:	b085      	sub	sp, #20
    d31e:	af00      	add	r7, sp, #0
    d320:	6078      	str	r0, [r7, #4]
    d322:	4608      	mov	r0, r1
    d324:	4611      	mov	r1, r2
    d326:	461a      	mov	r2, r3
    d328:	4603      	mov	r3, r0
    d32a:	70fb      	strb	r3, [r7, #3]
    d32c:	460b      	mov	r3, r1
    d32e:	70bb      	strb	r3, [r7, #2]
    d330:	4613      	mov	r3, r2
    d332:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d334:	78fa      	ldrb	r2, [r7, #3]
    d336:	78bb      	ldrb	r3, [r7, #2]
    d338:	6879      	ldr	r1, [r7, #4]
    d33a:	01d2      	lsls	r2, r2, #7
    d33c:	440a      	add	r2, r1
    d33e:	4413      	add	r3, r2
    d340:	3330      	adds	r3, #48	; 0x30
    d342:	781b      	ldrb	r3, [r3, #0]
    d344:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    d346:	7bfb      	ldrb	r3, [r7, #15]
    d348:	f003 030f 	and.w	r3, r3, #15
    d34c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    d34e:	787b      	ldrb	r3, [r7, #1]
    d350:	011b      	lsls	r3, r3, #4
    d352:	b2da      	uxtb	r2, r3
    d354:	7bfb      	ldrb	r3, [r7, #15]
    d356:	4313      	orrs	r3, r2
    d358:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d35a:	78fa      	ldrb	r2, [r7, #3]
    d35c:	78bb      	ldrb	r3, [r7, #2]
    d35e:	6879      	ldr	r1, [r7, #4]
    d360:	01d2      	lsls	r2, r2, #7
    d362:	440a      	add	r2, r1
    d364:	4413      	add	r3, r2
    d366:	3330      	adds	r3, #48	; 0x30
    d368:	7bfa      	ldrb	r2, [r7, #15]
    d36a:	701a      	strb	r2, [r3, #0]
}
    d36c:	bf00      	nop
    d36e:	3714      	adds	r7, #20
    d370:	46bd      	mov	sp, r7
    d372:	f85d 7b04 	ldr.w	r7, [sp], #4
    d376:	4770      	bx	lr

0000d378 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    d378:	b480      	push	{r7}
    d37a:	b085      	sub	sp, #20
    d37c:	af00      	add	r7, sp, #0
    d37e:	6078      	str	r0, [r7, #4]
    d380:	4608      	mov	r0, r1
    d382:	4611      	mov	r1, r2
    d384:	461a      	mov	r2, r3
    d386:	4603      	mov	r3, r0
    d388:	70fb      	strb	r3, [r7, #3]
    d38a:	460b      	mov	r3, r1
    d38c:	70bb      	strb	r3, [r7, #2]
    d38e:	4613      	mov	r3, r2
    d390:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    d392:	78fa      	ldrb	r2, [r7, #3]
    d394:	78bb      	ldrb	r3, [r7, #2]
    d396:	6879      	ldr	r1, [r7, #4]
    d398:	01d2      	lsls	r2, r2, #7
    d39a:	440a      	add	r2, r1
    d39c:	4413      	add	r3, r2
    d39e:	3340      	adds	r3, #64	; 0x40
    d3a0:	781b      	ldrb	r3, [r3, #0]
    d3a2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    d3a4:	7bfb      	ldrb	r3, [r7, #15]
    d3a6:	f023 0301 	bic.w	r3, r3, #1
    d3aa:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    d3ac:	787a      	ldrb	r2, [r7, #1]
    d3ae:	7bfb      	ldrb	r3, [r7, #15]
    d3b0:	4313      	orrs	r3, r2
    d3b2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    d3b4:	78fa      	ldrb	r2, [r7, #3]
    d3b6:	78bb      	ldrb	r3, [r7, #2]
    d3b8:	6879      	ldr	r1, [r7, #4]
    d3ba:	01d2      	lsls	r2, r2, #7
    d3bc:	440a      	add	r2, r1
    d3be:	4413      	add	r3, r2
    d3c0:	3340      	adds	r3, #64	; 0x40
    d3c2:	7bfa      	ldrb	r2, [r7, #15]
    d3c4:	701a      	strb	r2, [r3, #0]
}
    d3c6:	bf00      	nop
    d3c8:	3714      	adds	r7, #20
    d3ca:	46bd      	mov	sp, r7
    d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3d0:	4770      	bx	lr

0000d3d2 <hri_port_write_WRCONFIG_reg>:
{
    d3d2:	b480      	push	{r7}
    d3d4:	b085      	sub	sp, #20
    d3d6:	af00      	add	r7, sp, #0
    d3d8:	60f8      	str	r0, [r7, #12]
    d3da:	460b      	mov	r3, r1
    d3dc:	607a      	str	r2, [r7, #4]
    d3de:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    d3e0:	7afb      	ldrb	r3, [r7, #11]
    d3e2:	68fa      	ldr	r2, [r7, #12]
    d3e4:	01db      	lsls	r3, r3, #7
    d3e6:	4413      	add	r3, r2
    d3e8:	3328      	adds	r3, #40	; 0x28
    d3ea:	687a      	ldr	r2, [r7, #4]
    d3ec:	601a      	str	r2, [r3, #0]
}
    d3ee:	bf00      	nop
    d3f0:	3714      	adds	r7, #20
    d3f2:	46bd      	mov	sp, r7
    d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3f8:	4770      	bx	lr
	...

0000d3fc <_gpio_set_direction>:
{
    d3fc:	b580      	push	{r7, lr}
    d3fe:	b082      	sub	sp, #8
    d400:	af00      	add	r7, sp, #0
    d402:	4603      	mov	r3, r0
    d404:	6039      	str	r1, [r7, #0]
    d406:	71fb      	strb	r3, [r7, #7]
    d408:	4613      	mov	r3, r2
    d40a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    d40c:	79bb      	ldrb	r3, [r7, #6]
    d40e:	2b01      	cmp	r3, #1
    d410:	d01c      	beq.n	d44c <_gpio_set_direction+0x50>
    d412:	2b02      	cmp	r3, #2
    d414:	d037      	beq.n	d486 <_gpio_set_direction+0x8a>
    d416:	2b00      	cmp	r3, #0
    d418:	d14e      	bne.n	d4b8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    d41a:	79fb      	ldrb	r3, [r7, #7]
    d41c:	683a      	ldr	r2, [r7, #0]
    d41e:	4619      	mov	r1, r3
    d420:	482a      	ldr	r0, [pc, #168]	; (d4cc <_gpio_set_direction+0xd0>)
    d422:	4b2b      	ldr	r3, [pc, #172]	; (d4d0 <_gpio_set_direction+0xd4>)
    d424:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    d426:	683b      	ldr	r3, [r7, #0]
    d428:	b29b      	uxth	r3, r3
    d42a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d42e:	79fb      	ldrb	r3, [r7, #7]
    d430:	4619      	mov	r1, r3
    d432:	4826      	ldr	r0, [pc, #152]	; (d4cc <_gpio_set_direction+0xd0>)
    d434:	4b27      	ldr	r3, [pc, #156]	; (d4d4 <_gpio_set_direction+0xd8>)
    d436:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d438:	683b      	ldr	r3, [r7, #0]
    d43a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    d43c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    d440:	79fb      	ldrb	r3, [r7, #7]
    d442:	4619      	mov	r1, r3
    d444:	4821      	ldr	r0, [pc, #132]	; (d4cc <_gpio_set_direction+0xd0>)
    d446:	4b23      	ldr	r3, [pc, #140]	; (d4d4 <_gpio_set_direction+0xd8>)
    d448:	4798      	blx	r3
		break;
    d44a:	e03a      	b.n	d4c2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    d44c:	79fb      	ldrb	r3, [r7, #7]
    d44e:	683a      	ldr	r2, [r7, #0]
    d450:	4619      	mov	r1, r3
    d452:	481e      	ldr	r0, [pc, #120]	; (d4cc <_gpio_set_direction+0xd0>)
    d454:	4b1e      	ldr	r3, [pc, #120]	; (d4d0 <_gpio_set_direction+0xd4>)
    d456:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    d458:	683b      	ldr	r3, [r7, #0]
    d45a:	b29b      	uxth	r3, r3
    d45c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    d460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d464:	79f9      	ldrb	r1, [r7, #7]
    d466:	461a      	mov	r2, r3
    d468:	4818      	ldr	r0, [pc, #96]	; (d4cc <_gpio_set_direction+0xd0>)
    d46a:	4b1a      	ldr	r3, [pc, #104]	; (d4d4 <_gpio_set_direction+0xd8>)
    d46c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    d46e:	683b      	ldr	r3, [r7, #0]
    d470:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    d472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    d476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d47a:	79f9      	ldrb	r1, [r7, #7]
    d47c:	461a      	mov	r2, r3
    d47e:	4813      	ldr	r0, [pc, #76]	; (d4cc <_gpio_set_direction+0xd0>)
    d480:	4b14      	ldr	r3, [pc, #80]	; (d4d4 <_gpio_set_direction+0xd8>)
    d482:	4798      	blx	r3
		break;
    d484:	e01d      	b.n	d4c2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    d486:	79fb      	ldrb	r3, [r7, #7]
    d488:	683a      	ldr	r2, [r7, #0]
    d48a:	4619      	mov	r1, r3
    d48c:	480f      	ldr	r0, [pc, #60]	; (d4cc <_gpio_set_direction+0xd0>)
    d48e:	4b12      	ldr	r3, [pc, #72]	; (d4d8 <_gpio_set_direction+0xdc>)
    d490:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    d492:	683b      	ldr	r3, [r7, #0]
    d494:	b29b      	uxth	r3, r3
    d496:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d49a:	79fb      	ldrb	r3, [r7, #7]
    d49c:	4619      	mov	r1, r3
    d49e:	480b      	ldr	r0, [pc, #44]	; (d4cc <_gpio_set_direction+0xd0>)
    d4a0:	4b0c      	ldr	r3, [pc, #48]	; (d4d4 <_gpio_set_direction+0xd8>)
    d4a2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d4a4:	683b      	ldr	r3, [r7, #0]
    d4a6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    d4a8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    d4ac:	79fb      	ldrb	r3, [r7, #7]
    d4ae:	4619      	mov	r1, r3
    d4b0:	4806      	ldr	r0, [pc, #24]	; (d4cc <_gpio_set_direction+0xd0>)
    d4b2:	4b08      	ldr	r3, [pc, #32]	; (d4d4 <_gpio_set_direction+0xd8>)
    d4b4:	4798      	blx	r3
		break;
    d4b6:	e004      	b.n	d4c2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    d4b8:	2246      	movs	r2, #70	; 0x46
    d4ba:	4908      	ldr	r1, [pc, #32]	; (d4dc <_gpio_set_direction+0xe0>)
    d4bc:	2000      	movs	r0, #0
    d4be:	4b08      	ldr	r3, [pc, #32]	; (d4e0 <_gpio_set_direction+0xe4>)
    d4c0:	4798      	blx	r3
}
    d4c2:	bf00      	nop
    d4c4:	3708      	adds	r7, #8
    d4c6:	46bd      	mov	sp, r7
    d4c8:	bd80      	pop	{r7, pc}
    d4ca:	bf00      	nop
    d4cc:	41008000 	.word	0x41008000
    d4d0:	0000d243 	.word	0x0000d243
    d4d4:	0000d3d3 	.word	0x0000d3d3
    d4d8:	0000d21b 	.word	0x0000d21b
    d4dc:	00011d2c 	.word	0x00011d2c
    d4e0:	0000579d 	.word	0x0000579d

0000d4e4 <_gpio_set_level>:
{
    d4e4:	b580      	push	{r7, lr}
    d4e6:	b082      	sub	sp, #8
    d4e8:	af00      	add	r7, sp, #0
    d4ea:	4603      	mov	r3, r0
    d4ec:	6039      	str	r1, [r7, #0]
    d4ee:	71fb      	strb	r3, [r7, #7]
    d4f0:	4613      	mov	r3, r2
    d4f2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    d4f4:	79bb      	ldrb	r3, [r7, #6]
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d006      	beq.n	d508 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    d4fa:	79fb      	ldrb	r3, [r7, #7]
    d4fc:	683a      	ldr	r2, [r7, #0]
    d4fe:	4619      	mov	r1, r3
    d500:	4806      	ldr	r0, [pc, #24]	; (d51c <_gpio_set_level+0x38>)
    d502:	4b07      	ldr	r3, [pc, #28]	; (d520 <_gpio_set_level+0x3c>)
    d504:	4798      	blx	r3
}
    d506:	e005      	b.n	d514 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    d508:	79fb      	ldrb	r3, [r7, #7]
    d50a:	683a      	ldr	r2, [r7, #0]
    d50c:	4619      	mov	r1, r3
    d50e:	4803      	ldr	r0, [pc, #12]	; (d51c <_gpio_set_level+0x38>)
    d510:	4b04      	ldr	r3, [pc, #16]	; (d524 <_gpio_set_level+0x40>)
    d512:	4798      	blx	r3
}
    d514:	bf00      	nop
    d516:	3708      	adds	r7, #8
    d518:	46bd      	mov	sp, r7
    d51a:	bd80      	pop	{r7, pc}
    d51c:	41008000 	.word	0x41008000
    d520:	0000d26b 	.word	0x0000d26b
    d524:	0000d293 	.word	0x0000d293

0000d528 <_gpio_set_pin_function>:
{
    d528:	b590      	push	{r4, r7, lr}
    d52a:	b085      	sub	sp, #20
    d52c:	af00      	add	r7, sp, #0
    d52e:	6078      	str	r0, [r7, #4]
    d530:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    d532:	687b      	ldr	r3, [r7, #4]
    d534:	095b      	lsrs	r3, r3, #5
    d536:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    d538:	687b      	ldr	r3, [r7, #4]
    d53a:	b2db      	uxtb	r3, r3
    d53c:	f003 031f 	and.w	r3, r3, #31
    d540:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    d542:	683b      	ldr	r3, [r7, #0]
    d544:	f1b3 3fff 	cmp.w	r3, #4294967295
    d548:	d106      	bne.n	d558 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    d54a:	7bba      	ldrb	r2, [r7, #14]
    d54c:	7bf9      	ldrb	r1, [r7, #15]
    d54e:	2300      	movs	r3, #0
    d550:	4812      	ldr	r0, [pc, #72]	; (d59c <_gpio_set_pin_function+0x74>)
    d552:	4c13      	ldr	r4, [pc, #76]	; (d5a0 <_gpio_set_pin_function+0x78>)
    d554:	47a0      	blx	r4
}
    d556:	e01d      	b.n	d594 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    d558:	7bba      	ldrb	r2, [r7, #14]
    d55a:	7bf9      	ldrb	r1, [r7, #15]
    d55c:	2301      	movs	r3, #1
    d55e:	480f      	ldr	r0, [pc, #60]	; (d59c <_gpio_set_pin_function+0x74>)
    d560:	4c0f      	ldr	r4, [pc, #60]	; (d5a0 <_gpio_set_pin_function+0x78>)
    d562:	47a0      	blx	r4
		if (pin & 1) {
    d564:	7bbb      	ldrb	r3, [r7, #14]
    d566:	f003 0301 	and.w	r3, r3, #1
    d56a:	2b00      	cmp	r3, #0
    d56c:	d009      	beq.n	d582 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    d56e:	7bbb      	ldrb	r3, [r7, #14]
    d570:	085b      	lsrs	r3, r3, #1
    d572:	b2da      	uxtb	r2, r3
    d574:	683b      	ldr	r3, [r7, #0]
    d576:	b2db      	uxtb	r3, r3
    d578:	7bf9      	ldrb	r1, [r7, #15]
    d57a:	4808      	ldr	r0, [pc, #32]	; (d59c <_gpio_set_pin_function+0x74>)
    d57c:	4c09      	ldr	r4, [pc, #36]	; (d5a4 <_gpio_set_pin_function+0x7c>)
    d57e:	47a0      	blx	r4
}
    d580:	e008      	b.n	d594 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    d582:	7bbb      	ldrb	r3, [r7, #14]
    d584:	085b      	lsrs	r3, r3, #1
    d586:	b2da      	uxtb	r2, r3
    d588:	683b      	ldr	r3, [r7, #0]
    d58a:	b2db      	uxtb	r3, r3
    d58c:	7bf9      	ldrb	r1, [r7, #15]
    d58e:	4803      	ldr	r0, [pc, #12]	; (d59c <_gpio_set_pin_function+0x74>)
    d590:	4c05      	ldr	r4, [pc, #20]	; (d5a8 <_gpio_set_pin_function+0x80>)
    d592:	47a0      	blx	r4
}
    d594:	bf00      	nop
    d596:	3714      	adds	r7, #20
    d598:	46bd      	mov	sp, r7
    d59a:	bd90      	pop	{r4, r7, pc}
    d59c:	41008000 	.word	0x41008000
    d5a0:	0000d379 	.word	0x0000d379
    d5a4:	0000d31b 	.word	0x0000d31b
    d5a8:	0000d2bb 	.word	0x0000d2bb

0000d5ac <gpio_set_pin_function>:
{
    d5ac:	b580      	push	{r7, lr}
    d5ae:	b082      	sub	sp, #8
    d5b0:	af00      	add	r7, sp, #0
    d5b2:	6078      	str	r0, [r7, #4]
    d5b4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    d5b6:	6839      	ldr	r1, [r7, #0]
    d5b8:	6878      	ldr	r0, [r7, #4]
    d5ba:	4b03      	ldr	r3, [pc, #12]	; (d5c8 <gpio_set_pin_function+0x1c>)
    d5bc:	4798      	blx	r3
}
    d5be:	bf00      	nop
    d5c0:	3708      	adds	r7, #8
    d5c2:	46bd      	mov	sp, r7
    d5c4:	bd80      	pop	{r7, pc}
    d5c6:	bf00      	nop
    d5c8:	0000d529 	.word	0x0000d529

0000d5cc <gpio_set_pin_direction>:
{
    d5cc:	b580      	push	{r7, lr}
    d5ce:	b082      	sub	sp, #8
    d5d0:	af00      	add	r7, sp, #0
    d5d2:	4603      	mov	r3, r0
    d5d4:	460a      	mov	r2, r1
    d5d6:	71fb      	strb	r3, [r7, #7]
    d5d8:	4613      	mov	r3, r2
    d5da:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    d5dc:	79fb      	ldrb	r3, [r7, #7]
    d5de:	095b      	lsrs	r3, r3, #5
    d5e0:	b2d8      	uxtb	r0, r3
    d5e2:	79fb      	ldrb	r3, [r7, #7]
    d5e4:	f003 031f 	and.w	r3, r3, #31
    d5e8:	2201      	movs	r2, #1
    d5ea:	fa02 f303 	lsl.w	r3, r2, r3
    d5ee:	79ba      	ldrb	r2, [r7, #6]
    d5f0:	4619      	mov	r1, r3
    d5f2:	4b03      	ldr	r3, [pc, #12]	; (d600 <gpio_set_pin_direction+0x34>)
    d5f4:	4798      	blx	r3
}
    d5f6:	bf00      	nop
    d5f8:	3708      	adds	r7, #8
    d5fa:	46bd      	mov	sp, r7
    d5fc:	bd80      	pop	{r7, pc}
    d5fe:	bf00      	nop
    d600:	0000d3fd 	.word	0x0000d3fd

0000d604 <gpio_set_pin_level>:
{
    d604:	b580      	push	{r7, lr}
    d606:	b082      	sub	sp, #8
    d608:	af00      	add	r7, sp, #0
    d60a:	4603      	mov	r3, r0
    d60c:	460a      	mov	r2, r1
    d60e:	71fb      	strb	r3, [r7, #7]
    d610:	4613      	mov	r3, r2
    d612:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    d614:	79fb      	ldrb	r3, [r7, #7]
    d616:	095b      	lsrs	r3, r3, #5
    d618:	b2d8      	uxtb	r0, r3
    d61a:	79fb      	ldrb	r3, [r7, #7]
    d61c:	f003 031f 	and.w	r3, r3, #31
    d620:	2201      	movs	r2, #1
    d622:	fa02 f303 	lsl.w	r3, r2, r3
    d626:	79ba      	ldrb	r2, [r7, #6]
    d628:	4619      	mov	r1, r3
    d62a:	4b03      	ldr	r3, [pc, #12]	; (d638 <gpio_set_pin_level+0x34>)
    d62c:	4798      	blx	r3
}
    d62e:	bf00      	nop
    d630:	3708      	adds	r7, #8
    d632:	46bd      	mov	sp, r7
    d634:	bd80      	pop	{r7, pc}
    d636:	bf00      	nop
    d638:	0000d4e5 	.word	0x0000d4e5

0000d63c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    d63c:	b580      	push	{r7, lr}
    d63e:	b082      	sub	sp, #8
    d640:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    d642:	2100      	movs	r1, #0
    d644:	2008      	movs	r0, #8
    d646:	4b24      	ldr	r3, [pc, #144]	; (d6d8 <QSPI_N25Q256_exit_xip+0x9c>)
    d648:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    d64a:	2100      	movs	r1, #0
    d64c:	202b      	movs	r0, #43	; 0x2b
    d64e:	4b22      	ldr	r3, [pc, #136]	; (d6d8 <QSPI_N25Q256_exit_xip+0x9c>)
    d650:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    d652:	2100      	movs	r1, #0
    d654:	202a      	movs	r0, #42	; 0x2a
    d656:	4b20      	ldr	r3, [pc, #128]	; (d6d8 <QSPI_N25Q256_exit_xip+0x9c>)
    d658:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    d65a:	2102      	movs	r1, #2
    d65c:	2008      	movs	r0, #8
    d65e:	4b1f      	ldr	r3, [pc, #124]	; (d6dc <QSPI_N25Q256_exit_xip+0xa0>)
    d660:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    d662:	2102      	movs	r1, #2
    d664:	202b      	movs	r0, #43	; 0x2b
    d666:	4b1d      	ldr	r3, [pc, #116]	; (d6dc <QSPI_N25Q256_exit_xip+0xa0>)
    d668:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    d66a:	2102      	movs	r1, #2
    d66c:	202a      	movs	r0, #42	; 0x2a
    d66e:	4b1b      	ldr	r3, [pc, #108]	; (d6dc <QSPI_N25Q256_exit_xip+0xa0>)
    d670:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    d672:	2101      	movs	r1, #1
    d674:	2008      	movs	r0, #8
    d676:	4b1a      	ldr	r3, [pc, #104]	; (d6e0 <QSPI_N25Q256_exit_xip+0xa4>)
    d678:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    d67a:	2100      	movs	r1, #0
    d67c:	202b      	movs	r0, #43	; 0x2b
    d67e:	4b18      	ldr	r3, [pc, #96]	; (d6e0 <QSPI_N25Q256_exit_xip+0xa4>)
    d680:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    d682:	2100      	movs	r1, #0
    d684:	202a      	movs	r0, #42	; 0x2a
    d686:	4b16      	ldr	r3, [pc, #88]	; (d6e0 <QSPI_N25Q256_exit_xip+0xa4>)
    d688:	4798      	blx	r3

	delay_us(1);
    d68a:	2001      	movs	r0, #1
    d68c:	4b15      	ldr	r3, [pc, #84]	; (d6e4 <QSPI_N25Q256_exit_xip+0xa8>)
    d68e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    d690:	2300      	movs	r3, #0
    d692:	607b      	str	r3, [r7, #4]
    d694:	e010      	b.n	d6b8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    d696:	2101      	movs	r1, #1
    d698:	202a      	movs	r0, #42	; 0x2a
    d69a:	4b11      	ldr	r3, [pc, #68]	; (d6e0 <QSPI_N25Q256_exit_xip+0xa4>)
    d69c:	4798      	blx	r3
		delay_us(1);
    d69e:	2001      	movs	r0, #1
    d6a0:	4b10      	ldr	r3, [pc, #64]	; (d6e4 <QSPI_N25Q256_exit_xip+0xa8>)
    d6a2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    d6a4:	2100      	movs	r1, #0
    d6a6:	202a      	movs	r0, #42	; 0x2a
    d6a8:	4b0d      	ldr	r3, [pc, #52]	; (d6e0 <QSPI_N25Q256_exit_xip+0xa4>)
    d6aa:	4798      	blx	r3
		delay_us(1);
    d6ac:	2001      	movs	r0, #1
    d6ae:	4b0d      	ldr	r3, [pc, #52]	; (d6e4 <QSPI_N25Q256_exit_xip+0xa8>)
    d6b0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    d6b2:	687b      	ldr	r3, [r7, #4]
    d6b4:	3301      	adds	r3, #1
    d6b6:	607b      	str	r3, [r7, #4]
    d6b8:	687b      	ldr	r3, [r7, #4]
    d6ba:	2b06      	cmp	r3, #6
    d6bc:	ddeb      	ble.n	d696 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    d6be:	2101      	movs	r1, #1
    d6c0:	202b      	movs	r0, #43	; 0x2b
    d6c2:	4b07      	ldr	r3, [pc, #28]	; (d6e0 <QSPI_N25Q256_exit_xip+0xa4>)
    d6c4:	4798      	blx	r3
	delay_us(1);
    d6c6:	2001      	movs	r0, #1
    d6c8:	4b06      	ldr	r3, [pc, #24]	; (d6e4 <QSPI_N25Q256_exit_xip+0xa8>)
    d6ca:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    d6cc:	4b06      	ldr	r3, [pc, #24]	; (d6e8 <QSPI_N25Q256_exit_xip+0xac>)
    d6ce:	4798      	blx	r3
}
    d6d0:	bf00      	nop
    d6d2:	3708      	adds	r7, #8
    d6d4:	46bd      	mov	sp, r7
    d6d6:	bd80      	pop	{r7, pc}
    d6d8:	0000d5ad 	.word	0x0000d5ad
    d6dc:	0000d5cd 	.word	0x0000d5cd
    d6e0:	0000d605 	.word	0x0000d605
    d6e4:	00003f1d 	.word	0x00003f1d
    d6e8:	00003229 	.word	0x00003229

0000d6ec <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    d6ec:	b598      	push	{r3, r4, r7, lr}
    d6ee:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    d6f0:	4806      	ldr	r0, [pc, #24]	; (d70c <spi_nor_flash_init+0x20>)
    d6f2:	4b07      	ldr	r3, [pc, #28]	; (d710 <spi_nor_flash_init+0x24>)
    d6f4:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    d6f6:	2300      	movs	r3, #0
    d6f8:	4a06      	ldr	r2, [pc, #24]	; (d714 <spi_nor_flash_init+0x28>)
    d6fa:	4904      	ldr	r1, [pc, #16]	; (d70c <spi_nor_flash_init+0x20>)
    d6fc:	4806      	ldr	r0, [pc, #24]	; (d718 <spi_nor_flash_init+0x2c>)
    d6fe:	4c07      	ldr	r4, [pc, #28]	; (d71c <spi_nor_flash_init+0x30>)
    d700:	47a0      	blx	r4
    d702:	4602      	mov	r2, r0
    d704:	4b06      	ldr	r3, [pc, #24]	; (d720 <spi_nor_flash_init+0x34>)
    d706:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    d708:	bf00      	nop
    d70a:	bd98      	pop	{r3, r4, r7, pc}
    d70c:	2000222c 	.word	0x2000222c
    d710:	00004385 	.word	0x00004385
    d714:	0000d63d 	.word	0x0000d63d
    d718:	200020f8 	.word	0x200020f8
    d71c:	0000cd19 	.word	0x0000cd19
    d720:	200023cc 	.word	0x200023cc

0000d724 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    d724:	b480      	push	{r7}
    d726:	b083      	sub	sp, #12
    d728:	af00      	add	r7, sp, #0
    d72a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d72c:	687b      	ldr	r3, [r7, #4]
    d72e:	781b      	ldrb	r3, [r3, #0]
    d730:	b29a      	uxth	r2, r3
    d732:	687b      	ldr	r3, [r7, #4]
    d734:	3301      	adds	r3, #1
    d736:	781b      	ldrb	r3, [r3, #0]
    d738:	b29b      	uxth	r3, r3
    d73a:	021b      	lsls	r3, r3, #8
    d73c:	b29b      	uxth	r3, r3
    d73e:	4413      	add	r3, r2
    d740:	b29b      	uxth	r3, r3
}
    d742:	4618      	mov	r0, r3
    d744:	370c      	adds	r7, #12
    d746:	46bd      	mov	sp, r7
    d748:	f85d 7b04 	ldr.w	r7, [sp], #4
    d74c:	4770      	bx	lr

0000d74e <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    d74e:	b480      	push	{r7}
    d750:	b083      	sub	sp, #12
    d752:	af00      	add	r7, sp, #0
    d754:	6078      	str	r0, [r7, #4]
	return desc[0];
    d756:	687b      	ldr	r3, [r7, #4]
    d758:	781b      	ldrb	r3, [r3, #0]
}
    d75a:	4618      	mov	r0, r3
    d75c:	370c      	adds	r7, #12
    d75e:	46bd      	mov	sp, r7
    d760:	f85d 7b04 	ldr.w	r7, [sp], #4
    d764:	4770      	bx	lr
	...

0000d768 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    d768:	b580      	push	{r7, lr}
    d76a:	b082      	sub	sp, #8
    d76c:	af00      	add	r7, sp, #0
    d76e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d770:	6878      	ldr	r0, [r7, #4]
    d772:	4b05      	ldr	r3, [pc, #20]	; (d788 <usb_desc_next+0x20>)
    d774:	4798      	blx	r3
    d776:	4603      	mov	r3, r0
    d778:	461a      	mov	r2, r3
    d77a:	687b      	ldr	r3, [r7, #4]
    d77c:	4413      	add	r3, r2
}
    d77e:	4618      	mov	r0, r3
    d780:	3708      	adds	r7, #8
    d782:	46bd      	mov	sp, r7
    d784:	bd80      	pop	{r7, pc}
    d786:	bf00      	nop
    d788:	0000d74f 	.word	0x0000d74f

0000d78c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d78c:	b580      	push	{r7, lr}
    d78e:	b08c      	sub	sp, #48	; 0x30
    d790:	af00      	add	r7, sp, #0
    d792:	6078      	str	r0, [r7, #4]
    d794:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d796:	687b      	ldr	r3, [r7, #4]
    d798:	689b      	ldr	r3, [r3, #8]
    d79a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    d79c:	683b      	ldr	r3, [r7, #0]
    d79e:	681b      	ldr	r3, [r3, #0]
    d7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d7a2:	2300      	movs	r3, #0
    d7a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d7a8:	e08f      	b.n	d8ca <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d102      	bne.n	d7b6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    d7b0:	f06f 0309 	mvn.w	r3, #9
    d7b4:	e092      	b.n	d8dc <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7b8:	789b      	ldrb	r3, [r3, #2]
    d7ba:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7be:	795b      	ldrb	r3, [r3, #5]
    d7c0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    d7c2:	7c7b      	ldrb	r3, [r7, #17]
    d7c4:	2b02      	cmp	r3, #2
    d7c6:	d002      	beq.n	d7ce <cdcdf_acm_enable+0x42>
    d7c8:	7c7b      	ldrb	r3, [r7, #17]
    d7ca:	2b0a      	cmp	r3, #10
    d7cc:	d121      	bne.n	d812 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d7d2:	6a3a      	ldr	r2, [r7, #32]
    d7d4:	5cd2      	ldrb	r2, [r2, r3]
    d7d6:	7bbb      	ldrb	r3, [r7, #14]
    d7d8:	429a      	cmp	r2, r3
    d7da:	d102      	bne.n	d7e2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    d7dc:	f06f 0311 	mvn.w	r3, #17
    d7e0:	e07c      	b.n	d8dc <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    d7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d7e6:	6a3a      	ldr	r2, [r7, #32]
    d7e8:	5cd3      	ldrb	r3, [r2, r3]
    d7ea:	2bff      	cmp	r3, #255	; 0xff
    d7ec:	d002      	beq.n	d7f4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    d7ee:	f06f 031b 	mvn.w	r3, #27
    d7f2:	e073      	b.n	d8dc <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    d7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d7f8:	7bb9      	ldrb	r1, [r7, #14]
    d7fa:	6a3a      	ldr	r2, [r7, #32]
    d7fc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d7fe:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    d800:	683b      	ldr	r3, [r7, #0]
    d802:	685b      	ldr	r3, [r3, #4]
    d804:	2205      	movs	r2, #5
    d806:	4619      	mov	r1, r3
    d808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d80a:	4b36      	ldr	r3, [pc, #216]	; (d8e4 <cdcdf_acm_enable+0x158>)
    d80c:	4798      	blx	r3
    d80e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d810:	e047      	b.n	d8a2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    d812:	f06f 0309 	mvn.w	r3, #9
    d816:	e061      	b.n	d8dc <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d81a:	789b      	ldrb	r3, [r3, #2]
    d81c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d820:	78db      	ldrb	r3, [r3, #3]
    d822:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    d824:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d826:	3304      	adds	r3, #4
    d828:	4618      	mov	r0, r3
    d82a:	4b2f      	ldr	r3, [pc, #188]	; (d8e8 <cdcdf_acm_enable+0x15c>)
    d82c:	4798      	blx	r3
    d82e:	4603      	mov	r3, r0
    d830:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d832:	7ebb      	ldrb	r3, [r7, #26]
    d834:	7ef9      	ldrb	r1, [r7, #27]
    d836:	8bba      	ldrh	r2, [r7, #28]
    d838:	4618      	mov	r0, r3
    d83a:	4b2c      	ldr	r3, [pc, #176]	; (d8ec <cdcdf_acm_enable+0x160>)
    d83c:	4798      	blx	r3
    d83e:	4603      	mov	r3, r0
    d840:	2b00      	cmp	r3, #0
    d842:	d002      	beq.n	d84a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    d844:	f06f 0313 	mvn.w	r3, #19
    d848:	e048      	b.n	d8dc <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d84a:	7ebb      	ldrb	r3, [r7, #26]
    d84c:	b25b      	sxtb	r3, r3
    d84e:	2b00      	cmp	r3, #0
    d850:	da0f      	bge.n	d872 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    d852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d856:	7eb9      	ldrb	r1, [r7, #26]
    d858:	6a3a      	ldr	r2, [r7, #32]
    d85a:	4413      	add	r3, r2
    d85c:	460a      	mov	r2, r1
    d85e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    d860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d864:	6a3a      	ldr	r2, [r7, #32]
    d866:	4413      	add	r3, r2
    d868:	789b      	ldrb	r3, [r3, #2]
    d86a:	4618      	mov	r0, r3
    d86c:	4b20      	ldr	r3, [pc, #128]	; (d8f0 <cdcdf_acm_enable+0x164>)
    d86e:	4798      	blx	r3
    d870:	e007      	b.n	d882 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    d872:	7eba      	ldrb	r2, [r7, #26]
    d874:	6a3b      	ldr	r3, [r7, #32]
    d876:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    d878:	6a3b      	ldr	r3, [r7, #32]
    d87a:	791b      	ldrb	r3, [r3, #4]
    d87c:	4618      	mov	r0, r3
    d87e:	4b1c      	ldr	r3, [pc, #112]	; (d8f0 <cdcdf_acm_enable+0x164>)
    d880:	4798      	blx	r3
			}
			desc->sod = ep;
    d882:	683b      	ldr	r3, [r7, #0]
    d884:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d886:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d888:	683b      	ldr	r3, [r7, #0]
    d88a:	681b      	ldr	r3, [r3, #0]
    d88c:	4618      	mov	r0, r3
    d88e:	4b19      	ldr	r3, [pc, #100]	; (d8f4 <cdcdf_acm_enable+0x168>)
    d890:	4798      	blx	r3
    d892:	4602      	mov	r2, r0
    d894:	683b      	ldr	r3, [r7, #0]
    d896:	685b      	ldr	r3, [r3, #4]
    d898:	4619      	mov	r1, r3
    d89a:	4610      	mov	r0, r2
    d89c:	4b16      	ldr	r3, [pc, #88]	; (d8f8 <cdcdf_acm_enable+0x16c>)
    d89e:	4798      	blx	r3
    d8a0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d1b7      	bne.n	d818 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    d8a8:	683b      	ldr	r3, [r7, #0]
    d8aa:	681b      	ldr	r3, [r3, #0]
    d8ac:	4618      	mov	r0, r3
    d8ae:	4b11      	ldr	r3, [pc, #68]	; (d8f4 <cdcdf_acm_enable+0x168>)
    d8b0:	4798      	blx	r3
    d8b2:	683b      	ldr	r3, [r7, #0]
    d8b4:	685b      	ldr	r3, [r3, #4]
    d8b6:	2204      	movs	r2, #4
    d8b8:	4619      	mov	r1, r3
    d8ba:	4b0a      	ldr	r3, [pc, #40]	; (d8e4 <cdcdf_acm_enable+0x158>)
    d8bc:	4798      	blx	r3
    d8be:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d8c4:	3301      	adds	r3, #1
    d8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d8ce:	2b01      	cmp	r3, #1
    d8d0:	f67f af6b 	bls.w	d7aa <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    d8d4:	4b09      	ldr	r3, [pc, #36]	; (d8fc <cdcdf_acm_enable+0x170>)
    d8d6:	2201      	movs	r2, #1
    d8d8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d8da:	2300      	movs	r3, #0
}
    d8dc:	4618      	mov	r0, r3
    d8de:	3730      	adds	r7, #48	; 0x30
    d8e0:	46bd      	mov	sp, r7
    d8e2:	bd80      	pop	{r7, pc}
    d8e4:	0000eb4d 	.word	0x0000eb4d
    d8e8:	0000d725 	.word	0x0000d725
    d8ec:	00005331 	.word	0x00005331
    d8f0:	0000541d 	.word	0x0000541d
    d8f4:	0000d769 	.word	0x0000d769
    d8f8:	0000eba9 	.word	0x0000eba9
    d8fc:	20002114 	.word	0x20002114

0000d900 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d900:	b580      	push	{r7, lr}
    d902:	b088      	sub	sp, #32
    d904:	af00      	add	r7, sp, #0
    d906:	6078      	str	r0, [r7, #4]
    d908:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d90a:	687b      	ldr	r3, [r7, #4]
    d90c:	689b      	ldr	r3, [r3, #8]
    d90e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    d910:	683b      	ldr	r3, [r7, #0]
    d912:	2b00      	cmp	r3, #0
    d914:	d00c      	beq.n	d930 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d916:	683b      	ldr	r3, [r7, #0]
    d918:	681b      	ldr	r3, [r3, #0]
    d91a:	795b      	ldrb	r3, [r3, #5]
    d91c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    d91e:	7c7b      	ldrb	r3, [r7, #17]
    d920:	2b02      	cmp	r3, #2
    d922:	d005      	beq.n	d930 <cdcdf_acm_disable+0x30>
    d924:	7c7b      	ldrb	r3, [r7, #17]
    d926:	2b0a      	cmp	r3, #10
    d928:	d002      	beq.n	d930 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    d92a:	f06f 0309 	mvn.w	r3, #9
    d92e:	e035      	b.n	d99c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    d930:	2300      	movs	r3, #0
    d932:	77fb      	strb	r3, [r7, #31]
    d934:	e01f      	b.n	d976 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    d936:	7ffb      	ldrb	r3, [r7, #31]
    d938:	69ba      	ldr	r2, [r7, #24]
    d93a:	5cd3      	ldrb	r3, [r2, r3]
    d93c:	2bff      	cmp	r3, #255	; 0xff
    d93e:	d016      	beq.n	d96e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    d940:	7ffb      	ldrb	r3, [r7, #31]
    d942:	69ba      	ldr	r2, [r7, #24]
    d944:	21ff      	movs	r1, #255	; 0xff
    d946:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    d948:	7ffb      	ldrb	r3, [r7, #31]
    d94a:	69ba      	ldr	r2, [r7, #24]
    d94c:	4413      	add	r3, r2
    d94e:	789b      	ldrb	r3, [r3, #2]
    d950:	2bff      	cmp	r3, #255	; 0xff
    d952:	d00d      	beq.n	d970 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d954:	7ffb      	ldrb	r3, [r7, #31]
    d956:	69ba      	ldr	r2, [r7, #24]
    d958:	4413      	add	r3, r2
    d95a:	789b      	ldrb	r3, [r3, #2]
    d95c:	4618      	mov	r0, r3
    d95e:	4b11      	ldr	r3, [pc, #68]	; (d9a4 <cdcdf_acm_disable+0xa4>)
    d960:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    d962:	7ffb      	ldrb	r3, [r7, #31]
    d964:	69ba      	ldr	r2, [r7, #24]
    d966:	4413      	add	r3, r2
    d968:	22ff      	movs	r2, #255	; 0xff
    d96a:	709a      	strb	r2, [r3, #2]
    d96c:	e000      	b.n	d970 <cdcdf_acm_disable+0x70>
			continue;
    d96e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    d970:	7ffb      	ldrb	r3, [r7, #31]
    d972:	3301      	adds	r3, #1
    d974:	77fb      	strb	r3, [r7, #31]
    d976:	7ffb      	ldrb	r3, [r7, #31]
    d978:	2b01      	cmp	r3, #1
    d97a:	d9dc      	bls.n	d936 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    d97c:	69bb      	ldr	r3, [r7, #24]
    d97e:	791b      	ldrb	r3, [r3, #4]
    d980:	2bff      	cmp	r3, #255	; 0xff
    d982:	d007      	beq.n	d994 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    d984:	69bb      	ldr	r3, [r7, #24]
    d986:	791b      	ldrb	r3, [r3, #4]
    d988:	4618      	mov	r0, r3
    d98a:	4b06      	ldr	r3, [pc, #24]	; (d9a4 <cdcdf_acm_disable+0xa4>)
    d98c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    d98e:	69bb      	ldr	r3, [r7, #24]
    d990:	22ff      	movs	r2, #255	; 0xff
    d992:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    d994:	4b04      	ldr	r3, [pc, #16]	; (d9a8 <cdcdf_acm_disable+0xa8>)
    d996:	2200      	movs	r2, #0
    d998:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d99a:	2300      	movs	r3, #0
}
    d99c:	4618      	mov	r0, r3
    d99e:	3720      	adds	r7, #32
    d9a0:	46bd      	mov	sp, r7
    d9a2:	bd80      	pop	{r7, pc}
    d9a4:	000053cd 	.word	0x000053cd
    d9a8:	20002114 	.word	0x20002114

0000d9ac <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    d9ac:	b580      	push	{r7, lr}
    d9ae:	b084      	sub	sp, #16
    d9b0:	af00      	add	r7, sp, #0
    d9b2:	60f8      	str	r0, [r7, #12]
    d9b4:	460b      	mov	r3, r1
    d9b6:	607a      	str	r2, [r7, #4]
    d9b8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    d9ba:	7afb      	ldrb	r3, [r7, #11]
    d9bc:	2b01      	cmp	r3, #1
    d9be:	d009      	beq.n	d9d4 <cdcdf_acm_ctrl+0x28>
    d9c0:	2b02      	cmp	r3, #2
    d9c2:	d00d      	beq.n	d9e0 <cdcdf_acm_ctrl+0x34>
    d9c4:	2b00      	cmp	r3, #0
    d9c6:	d10e      	bne.n	d9e6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    d9c8:	6879      	ldr	r1, [r7, #4]
    d9ca:	68f8      	ldr	r0, [r7, #12]
    d9cc:	4b09      	ldr	r3, [pc, #36]	; (d9f4 <cdcdf_acm_ctrl+0x48>)
    d9ce:	4798      	blx	r3
    d9d0:	4603      	mov	r3, r0
    d9d2:	e00a      	b.n	d9ea <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    d9d4:	6879      	ldr	r1, [r7, #4]
    d9d6:	68f8      	ldr	r0, [r7, #12]
    d9d8:	4b07      	ldr	r3, [pc, #28]	; (d9f8 <cdcdf_acm_ctrl+0x4c>)
    d9da:	4798      	blx	r3
    d9dc:	4603      	mov	r3, r0
    d9de:	e004      	b.n	d9ea <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    d9e0:	f06f 031a 	mvn.w	r3, #26
    d9e4:	e001      	b.n	d9ea <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    d9e6:	f06f 030c 	mvn.w	r3, #12
	}
}
    d9ea:	4618      	mov	r0, r3
    d9ec:	3710      	adds	r7, #16
    d9ee:	46bd      	mov	sp, r7
    d9f0:	bd80      	pop	{r7, pc}
    d9f2:	bf00      	nop
    d9f4:	0000d78d 	.word	0x0000d78d
    d9f8:	0000d901 	.word	0x0000d901

0000d9fc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d9fc:	b590      	push	{r4, r7, lr}
    d9fe:	b087      	sub	sp, #28
    da00:	af00      	add	r7, sp, #0
    da02:	4603      	mov	r3, r0
    da04:	6039      	str	r1, [r7, #0]
    da06:	71fb      	strb	r3, [r7, #7]
    da08:	4613      	mov	r3, r2
    da0a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    da0c:	683b      	ldr	r3, [r7, #0]
    da0e:	799a      	ldrb	r2, [r3, #6]
    da10:	79db      	ldrb	r3, [r3, #7]
    da12:	021b      	lsls	r3, r3, #8
    da14:	4313      	orrs	r3, r2
    da16:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    da18:	4b2b      	ldr	r3, [pc, #172]	; (dac8 <cdcdf_acm_set_req+0xcc>)
    da1a:	4798      	blx	r3
    da1c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    da1e:	683b      	ldr	r3, [r7, #0]
    da20:	785b      	ldrb	r3, [r3, #1]
    da22:	2b20      	cmp	r3, #32
    da24:	d002      	beq.n	da2c <cdcdf_acm_set_req+0x30>
    da26:	2b22      	cmp	r3, #34	; 0x22
    da28:	d034      	beq.n	da94 <cdcdf_acm_set_req+0x98>
    da2a:	e046      	b.n	daba <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    da2c:	8afb      	ldrh	r3, [r7, #22]
    da2e:	2b07      	cmp	r3, #7
    da30:	d002      	beq.n	da38 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    da32:	f04f 33ff 	mov.w	r3, #4294967295
    da36:	e042      	b.n	dabe <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    da38:	79bb      	ldrb	r3, [r7, #6]
    da3a:	2b00      	cmp	r3, #0
    da3c:	d107      	bne.n	da4e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    da3e:	8afa      	ldrh	r2, [r7, #22]
    da40:	79f8      	ldrb	r0, [r7, #7]
    da42:	2300      	movs	r3, #0
    da44:	6939      	ldr	r1, [r7, #16]
    da46:	4c21      	ldr	r4, [pc, #132]	; (dacc <cdcdf_acm_set_req+0xd0>)
    da48:	47a0      	blx	r4
    da4a:	4603      	mov	r3, r0
    da4c:	e037      	b.n	dabe <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    da4e:	693a      	ldr	r2, [r7, #16]
    da50:	f107 0308 	add.w	r3, r7, #8
    da54:	6810      	ldr	r0, [r2, #0]
    da56:	6018      	str	r0, [r3, #0]
    da58:	8891      	ldrh	r1, [r2, #4]
    da5a:	7992      	ldrb	r2, [r2, #6]
    da5c:	8099      	strh	r1, [r3, #4]
    da5e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    da60:	4b1b      	ldr	r3, [pc, #108]	; (dad0 <cdcdf_acm_set_req+0xd4>)
    da62:	681b      	ldr	r3, [r3, #0]
    da64:	2b00      	cmp	r3, #0
    da66:	d008      	beq.n	da7a <cdcdf_acm_set_req+0x7e>
    da68:	4b19      	ldr	r3, [pc, #100]	; (dad0 <cdcdf_acm_set_req+0xd4>)
    da6a:	681b      	ldr	r3, [r3, #0]
    da6c:	f107 0208 	add.w	r2, r7, #8
    da70:	4610      	mov	r0, r2
    da72:	4798      	blx	r3
    da74:	4603      	mov	r3, r0
    da76:	2b00      	cmp	r3, #0
    da78:	d00a      	beq.n	da90 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    da7a:	4b16      	ldr	r3, [pc, #88]	; (dad4 <cdcdf_acm_set_req+0xd8>)
    da7c:	f107 0208 	add.w	r2, r7, #8
    da80:	e892 0003 	ldmia.w	r2, {r0, r1}
    da84:	6018      	str	r0, [r3, #0]
    da86:	3304      	adds	r3, #4
    da88:	8019      	strh	r1, [r3, #0]
    da8a:	3302      	adds	r3, #2
    da8c:	0c0a      	lsrs	r2, r1, #16
    da8e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    da90:	2300      	movs	r3, #0
    da92:	e014      	b.n	dabe <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    da94:	2300      	movs	r3, #0
    da96:	2200      	movs	r2, #0
    da98:	2100      	movs	r1, #0
    da9a:	2000      	movs	r0, #0
    da9c:	4c0b      	ldr	r4, [pc, #44]	; (dacc <cdcdf_acm_set_req+0xd0>)
    da9e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    daa0:	4b0d      	ldr	r3, [pc, #52]	; (dad8 <cdcdf_acm_set_req+0xdc>)
    daa2:	681b      	ldr	r3, [r3, #0]
    daa4:	2b00      	cmp	r3, #0
    daa6:	d006      	beq.n	dab6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    daa8:	4b0b      	ldr	r3, [pc, #44]	; (dad8 <cdcdf_acm_set_req+0xdc>)
    daaa:	681b      	ldr	r3, [r3, #0]
    daac:	683a      	ldr	r2, [r7, #0]
    daae:	8852      	ldrh	r2, [r2, #2]
    dab0:	b292      	uxth	r2, r2
    dab2:	4610      	mov	r0, r2
    dab4:	4798      	blx	r3
		}
		return ERR_NONE;
    dab6:	2300      	movs	r3, #0
    dab8:	e001      	b.n	dabe <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    daba:	f06f 030c 	mvn.w	r3, #12
	}
}
    dabe:	4618      	mov	r0, r3
    dac0:	371c      	adds	r7, #28
    dac2:	46bd      	mov	sp, r7
    dac4:	bd90      	pop	{r4, r7, pc}
    dac6:	bf00      	nop
    dac8:	0000ea49 	.word	0x0000ea49
    dacc:	0000e8bd 	.word	0x0000e8bd
    dad0:	20002128 	.word	0x20002128
    dad4:	2000211c 	.word	0x2000211c
    dad8:	20002124 	.word	0x20002124

0000dadc <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dadc:	b590      	push	{r4, r7, lr}
    dade:	b085      	sub	sp, #20
    dae0:	af00      	add	r7, sp, #0
    dae2:	4603      	mov	r3, r0
    dae4:	6039      	str	r1, [r7, #0]
    dae6:	71fb      	strb	r3, [r7, #7]
    dae8:	4613      	mov	r3, r2
    daea:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    daec:	683b      	ldr	r3, [r7, #0]
    daee:	799a      	ldrb	r2, [r3, #6]
    daf0:	79db      	ldrb	r3, [r3, #7]
    daf2:	021b      	lsls	r3, r3, #8
    daf4:	4313      	orrs	r3, r2
    daf6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    daf8:	79bb      	ldrb	r3, [r7, #6]
    dafa:	2b01      	cmp	r3, #1
    dafc:	d101      	bne.n	db02 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    dafe:	2300      	movs	r3, #0
    db00:	e013      	b.n	db2a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    db02:	683b      	ldr	r3, [r7, #0]
    db04:	785b      	ldrb	r3, [r3, #1]
    db06:	2b21      	cmp	r3, #33	; 0x21
    db08:	d10d      	bne.n	db26 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    db0a:	89fb      	ldrh	r3, [r7, #14]
    db0c:	2b07      	cmp	r3, #7
    db0e:	d002      	beq.n	db16 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    db10:	f04f 33ff 	mov.w	r3, #4294967295
    db14:	e009      	b.n	db2a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    db16:	89fa      	ldrh	r2, [r7, #14]
    db18:	79f8      	ldrb	r0, [r7, #7]
    db1a:	2300      	movs	r3, #0
    db1c:	4905      	ldr	r1, [pc, #20]	; (db34 <cdcdf_acm_get_req+0x58>)
    db1e:	4c06      	ldr	r4, [pc, #24]	; (db38 <cdcdf_acm_get_req+0x5c>)
    db20:	47a0      	blx	r4
    db22:	4603      	mov	r3, r0
    db24:	e001      	b.n	db2a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    db26:	f06f 030c 	mvn.w	r3, #12
	}
}
    db2a:	4618      	mov	r0, r3
    db2c:	3714      	adds	r7, #20
    db2e:	46bd      	mov	sp, r7
    db30:	bd90      	pop	{r4, r7, pc}
    db32:	bf00      	nop
    db34:	2000211c 	.word	0x2000211c
    db38:	0000e8bd 	.word	0x0000e8bd

0000db3c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    db3c:	b580      	push	{r7, lr}
    db3e:	b082      	sub	sp, #8
    db40:	af00      	add	r7, sp, #0
    db42:	4603      	mov	r3, r0
    db44:	6039      	str	r1, [r7, #0]
    db46:	71fb      	strb	r3, [r7, #7]
    db48:	4613      	mov	r3, r2
    db4a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    db4c:	683b      	ldr	r3, [r7, #0]
    db4e:	781b      	ldrb	r3, [r3, #0]
    db50:	095b      	lsrs	r3, r3, #5
    db52:	b2db      	uxtb	r3, r3
    db54:	f003 0303 	and.w	r3, r3, #3
    db58:	2b01      	cmp	r3, #1
    db5a:	d002      	beq.n	db62 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    db5c:	f06f 0309 	mvn.w	r3, #9
    db60:	e026      	b.n	dbb0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    db62:	683b      	ldr	r3, [r7, #0]
    db64:	889b      	ldrh	r3, [r3, #4]
    db66:	b29a      	uxth	r2, r3
    db68:	4b13      	ldr	r3, [pc, #76]	; (dbb8 <cdcdf_acm_req+0x7c>)
    db6a:	781b      	ldrb	r3, [r3, #0]
    db6c:	b29b      	uxth	r3, r3
    db6e:	429a      	cmp	r2, r3
    db70:	d007      	beq.n	db82 <cdcdf_acm_req+0x46>
    db72:	683b      	ldr	r3, [r7, #0]
    db74:	889b      	ldrh	r3, [r3, #4]
    db76:	b29a      	uxth	r2, r3
    db78:	4b0f      	ldr	r3, [pc, #60]	; (dbb8 <cdcdf_acm_req+0x7c>)
    db7a:	785b      	ldrb	r3, [r3, #1]
    db7c:	b29b      	uxth	r3, r3
    db7e:	429a      	cmp	r2, r3
    db80:	d114      	bne.n	dbac <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    db82:	683b      	ldr	r3, [r7, #0]
    db84:	781b      	ldrb	r3, [r3, #0]
    db86:	b25b      	sxtb	r3, r3
    db88:	2b00      	cmp	r3, #0
    db8a:	da07      	bge.n	db9c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    db8c:	79ba      	ldrb	r2, [r7, #6]
    db8e:	79fb      	ldrb	r3, [r7, #7]
    db90:	6839      	ldr	r1, [r7, #0]
    db92:	4618      	mov	r0, r3
    db94:	4b09      	ldr	r3, [pc, #36]	; (dbbc <cdcdf_acm_req+0x80>)
    db96:	4798      	blx	r3
    db98:	4603      	mov	r3, r0
    db9a:	e009      	b.n	dbb0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    db9c:	79ba      	ldrb	r2, [r7, #6]
    db9e:	79fb      	ldrb	r3, [r7, #7]
    dba0:	6839      	ldr	r1, [r7, #0]
    dba2:	4618      	mov	r0, r3
    dba4:	4b06      	ldr	r3, [pc, #24]	; (dbc0 <cdcdf_acm_req+0x84>)
    dba6:	4798      	blx	r3
    dba8:	4603      	mov	r3, r0
    dbaa:	e001      	b.n	dbb0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    dbac:	f06f 0309 	mvn.w	r3, #9
	}
}
    dbb0:	4618      	mov	r0, r3
    dbb2:	3708      	adds	r7, #8
    dbb4:	46bd      	mov	sp, r7
    dbb6:	bd80      	pop	{r7, pc}
    dbb8:	20002114 	.word	0x20002114
    dbbc:	0000dadd 	.word	0x0000dadd
    dbc0:	0000d9fd 	.word	0x0000d9fd

0000dbc4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    dbc4:	b580      	push	{r7, lr}
    dbc6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    dbc8:	4b0b      	ldr	r3, [pc, #44]	; (dbf8 <cdcdf_acm_init+0x34>)
    dbca:	4798      	blx	r3
    dbcc:	4603      	mov	r3, r0
    dbce:	2b01      	cmp	r3, #1
    dbd0:	d902      	bls.n	dbd8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    dbd2:	f06f 0310 	mvn.w	r3, #16
    dbd6:	e00d      	b.n	dbf4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    dbd8:	4b08      	ldr	r3, [pc, #32]	; (dbfc <cdcdf_acm_init+0x38>)
    dbda:	4a09      	ldr	r2, [pc, #36]	; (dc00 <cdcdf_acm_init+0x3c>)
    dbdc:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    dbde:	4b07      	ldr	r3, [pc, #28]	; (dbfc <cdcdf_acm_init+0x38>)
    dbe0:	4a08      	ldr	r2, [pc, #32]	; (dc04 <cdcdf_acm_init+0x40>)
    dbe2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    dbe4:	4805      	ldr	r0, [pc, #20]	; (dbfc <cdcdf_acm_init+0x38>)
    dbe6:	4b08      	ldr	r3, [pc, #32]	; (dc08 <cdcdf_acm_init+0x44>)
    dbe8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    dbea:	4908      	ldr	r1, [pc, #32]	; (dc0c <cdcdf_acm_init+0x48>)
    dbec:	2001      	movs	r0, #1
    dbee:	4b08      	ldr	r3, [pc, #32]	; (dc10 <cdcdf_acm_init+0x4c>)
    dbf0:	4798      	blx	r3
	return ERR_NONE;
    dbf2:	2300      	movs	r3, #0
}
    dbf4:	4618      	mov	r0, r3
    dbf6:	bd80      	pop	{r7, pc}
    dbf8:	0000ea61 	.word	0x0000ea61
    dbfc:	20002108 	.word	0x20002108
    dc00:	0000d9ad 	.word	0x0000d9ad
    dc04:	20002114 	.word	0x20002114
    dc08:	0000e9c9 	.word	0x0000e9c9
    dc0c:	200000ac 	.word	0x200000ac
    dc10:	0000e8f9 	.word	0x0000e8f9

0000dc14 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    dc14:	b590      	push	{r4, r7, lr}
    dc16:	b083      	sub	sp, #12
    dc18:	af00      	add	r7, sp, #0
    dc1a:	6078      	str	r0, [r7, #4]
    dc1c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    dc1e:	4b0b      	ldr	r3, [pc, #44]	; (dc4c <cdcdf_acm_read+0x38>)
    dc20:	4798      	blx	r3
    dc22:	4603      	mov	r3, r0
    dc24:	f083 0301 	eor.w	r3, r3, #1
    dc28:	b2db      	uxtb	r3, r3
    dc2a:	2b00      	cmp	r3, #0
    dc2c:	d002      	beq.n	dc34 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    dc2e:	f06f 0310 	mvn.w	r3, #16
    dc32:	e007      	b.n	dc44 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    dc34:	4b06      	ldr	r3, [pc, #24]	; (dc50 <cdcdf_acm_read+0x3c>)
    dc36:	7918      	ldrb	r0, [r3, #4]
    dc38:	2300      	movs	r3, #0
    dc3a:	683a      	ldr	r2, [r7, #0]
    dc3c:	6879      	ldr	r1, [r7, #4]
    dc3e:	4c05      	ldr	r4, [pc, #20]	; (dc54 <cdcdf_acm_read+0x40>)
    dc40:	47a0      	blx	r4
    dc42:	4603      	mov	r3, r0
}
    dc44:	4618      	mov	r0, r3
    dc46:	370c      	adds	r7, #12
    dc48:	46bd      	mov	sp, r7
    dc4a:	bd90      	pop	{r4, r7, pc}
    dc4c:	0000dd39 	.word	0x0000dd39
    dc50:	20002114 	.word	0x20002114
    dc54:	0000e8bd 	.word	0x0000e8bd

0000dc58 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    dc58:	b590      	push	{r4, r7, lr}
    dc5a:	b083      	sub	sp, #12
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	6078      	str	r0, [r7, #4]
    dc60:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    dc62:	4b0b      	ldr	r3, [pc, #44]	; (dc90 <cdcdf_acm_write+0x38>)
    dc64:	4798      	blx	r3
    dc66:	4603      	mov	r3, r0
    dc68:	f083 0301 	eor.w	r3, r3, #1
    dc6c:	b2db      	uxtb	r3, r3
    dc6e:	2b00      	cmp	r3, #0
    dc70:	d002      	beq.n	dc78 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    dc72:	f06f 0310 	mvn.w	r3, #16
    dc76:	e007      	b.n	dc88 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    dc78:	4b06      	ldr	r3, [pc, #24]	; (dc94 <cdcdf_acm_write+0x3c>)
    dc7a:	78d8      	ldrb	r0, [r3, #3]
    dc7c:	2301      	movs	r3, #1
    dc7e:	683a      	ldr	r2, [r7, #0]
    dc80:	6879      	ldr	r1, [r7, #4]
    dc82:	4c05      	ldr	r4, [pc, #20]	; (dc98 <cdcdf_acm_write+0x40>)
    dc84:	47a0      	blx	r4
    dc86:	4603      	mov	r3, r0
}
    dc88:	4618      	mov	r0, r3
    dc8a:	370c      	adds	r7, #12
    dc8c:	46bd      	mov	sp, r7
    dc8e:	bd90      	pop	{r4, r7, pc}
    dc90:	0000dd39 	.word	0x0000dd39
    dc94:	20002114 	.word	0x20002114
    dc98:	0000e8bd 	.word	0x0000e8bd

0000dc9c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    dc9c:	b580      	push	{r7, lr}
    dc9e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    dca0:	4b05      	ldr	r3, [pc, #20]	; (dcb8 <cdcdf_acm_stop_xfer+0x1c>)
    dca2:	78db      	ldrb	r3, [r3, #3]
    dca4:	4618      	mov	r0, r3
    dca6:	4b05      	ldr	r3, [pc, #20]	; (dcbc <cdcdf_acm_stop_xfer+0x20>)
    dca8:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    dcaa:	4b03      	ldr	r3, [pc, #12]	; (dcb8 <cdcdf_acm_stop_xfer+0x1c>)
    dcac:	791b      	ldrb	r3, [r3, #4]
    dcae:	4618      	mov	r0, r3
    dcb0:	4b02      	ldr	r3, [pc, #8]	; (dcbc <cdcdf_acm_stop_xfer+0x20>)
    dcb2:	4798      	blx	r3
}
    dcb4:	bf00      	nop
    dcb6:	bd80      	pop	{r7, pc}
    dcb8:	20002114 	.word	0x20002114
    dcbc:	000055f5 	.word	0x000055f5

0000dcc0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    dcc0:	b580      	push	{r7, lr}
    dcc2:	b082      	sub	sp, #8
    dcc4:	af00      	add	r7, sp, #0
    dcc6:	4603      	mov	r3, r0
    dcc8:	6039      	str	r1, [r7, #0]
    dcca:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    dccc:	79fb      	ldrb	r3, [r7, #7]
    dcce:	2b03      	cmp	r3, #3
    dcd0:	d822      	bhi.n	dd18 <cdcdf_acm_register_callback+0x58>
    dcd2:	a201      	add	r2, pc, #4	; (adr r2, dcd8 <cdcdf_acm_register_callback+0x18>)
    dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dcd8:	0000dce9 	.word	0x0000dce9
    dcdc:	0000dcf9 	.word	0x0000dcf9
    dce0:	0000dd09 	.word	0x0000dd09
    dce4:	0000dd11 	.word	0x0000dd11
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    dce8:	4b0f      	ldr	r3, [pc, #60]	; (dd28 <cdcdf_acm_register_callback+0x68>)
    dcea:	791b      	ldrb	r3, [r3, #4]
    dcec:	683a      	ldr	r2, [r7, #0]
    dcee:	2102      	movs	r1, #2
    dcf0:	4618      	mov	r0, r3
    dcf2:	4b0e      	ldr	r3, [pc, #56]	; (dd2c <cdcdf_acm_register_callback+0x6c>)
    dcf4:	4798      	blx	r3
		break;
    dcf6:	e012      	b.n	dd1e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    dcf8:	4b0b      	ldr	r3, [pc, #44]	; (dd28 <cdcdf_acm_register_callback+0x68>)
    dcfa:	78db      	ldrb	r3, [r3, #3]
    dcfc:	683a      	ldr	r2, [r7, #0]
    dcfe:	2102      	movs	r1, #2
    dd00:	4618      	mov	r0, r3
    dd02:	4b0a      	ldr	r3, [pc, #40]	; (dd2c <cdcdf_acm_register_callback+0x6c>)
    dd04:	4798      	blx	r3
		break;
    dd06:	e00a      	b.n	dd1e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    dd08:	4a09      	ldr	r2, [pc, #36]	; (dd30 <cdcdf_acm_register_callback+0x70>)
    dd0a:	683b      	ldr	r3, [r7, #0]
    dd0c:	6013      	str	r3, [r2, #0]
		break;
    dd0e:	e006      	b.n	dd1e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    dd10:	4a08      	ldr	r2, [pc, #32]	; (dd34 <cdcdf_acm_register_callback+0x74>)
    dd12:	683b      	ldr	r3, [r7, #0]
    dd14:	6013      	str	r3, [r2, #0]
		break;
    dd16:	e002      	b.n	dd1e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    dd18:	f06f 030c 	mvn.w	r3, #12
    dd1c:	e000      	b.n	dd20 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    dd1e:	2300      	movs	r3, #0
}
    dd20:	4618      	mov	r0, r3
    dd22:	3708      	adds	r7, #8
    dd24:	46bd      	mov	sp, r7
    dd26:	bd80      	pop	{r7, pc}
    dd28:	20002114 	.word	0x20002114
    dd2c:	00005721 	.word	0x00005721
    dd30:	20002128 	.word	0x20002128
    dd34:	20002124 	.word	0x20002124

0000dd38 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    dd38:	b480      	push	{r7}
    dd3a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    dd3c:	4b03      	ldr	r3, [pc, #12]	; (dd4c <cdcdf_acm_is_enabled+0x14>)
    dd3e:	795b      	ldrb	r3, [r3, #5]
}
    dd40:	4618      	mov	r0, r3
    dd42:	46bd      	mov	sp, r7
    dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd48:	4770      	bx	lr
    dd4a:	bf00      	nop
    dd4c:	20002114 	.word	0x20002114

0000dd50 <usb_get_u16>:
{
    dd50:	b480      	push	{r7}
    dd52:	b083      	sub	sp, #12
    dd54:	af00      	add	r7, sp, #0
    dd56:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    dd58:	687b      	ldr	r3, [r7, #4]
    dd5a:	781b      	ldrb	r3, [r3, #0]
    dd5c:	b29a      	uxth	r2, r3
    dd5e:	687b      	ldr	r3, [r7, #4]
    dd60:	3301      	adds	r3, #1
    dd62:	781b      	ldrb	r3, [r3, #0]
    dd64:	b29b      	uxth	r3, r3
    dd66:	021b      	lsls	r3, r3, #8
    dd68:	b29b      	uxth	r3, r3
    dd6a:	4413      	add	r3, r2
    dd6c:	b29b      	uxth	r3, r3
}
    dd6e:	4618      	mov	r0, r3
    dd70:	370c      	adds	r7, #12
    dd72:	46bd      	mov	sp, r7
    dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd78:	4770      	bx	lr

0000dd7a <usb_desc_len>:
{
    dd7a:	b480      	push	{r7}
    dd7c:	b083      	sub	sp, #12
    dd7e:	af00      	add	r7, sp, #0
    dd80:	6078      	str	r0, [r7, #4]
	return desc[0];
    dd82:	687b      	ldr	r3, [r7, #4]
    dd84:	781b      	ldrb	r3, [r3, #0]
}
    dd86:	4618      	mov	r0, r3
    dd88:	370c      	adds	r7, #12
    dd8a:	46bd      	mov	sp, r7
    dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd90:	4770      	bx	lr
	...

0000dd94 <usb_desc_next>:
{
    dd94:	b580      	push	{r7, lr}
    dd96:	b082      	sub	sp, #8
    dd98:	af00      	add	r7, sp, #0
    dd9a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    dd9c:	6878      	ldr	r0, [r7, #4]
    dd9e:	4b05      	ldr	r3, [pc, #20]	; (ddb4 <usb_desc_next+0x20>)
    dda0:	4798      	blx	r3
    dda2:	4603      	mov	r3, r0
    dda4:	461a      	mov	r2, r3
    dda6:	687b      	ldr	r3, [r7, #4]
    dda8:	4413      	add	r3, r2
}
    ddaa:	4618      	mov	r0, r3
    ddac:	3708      	adds	r7, #8
    ddae:	46bd      	mov	sp, r7
    ddb0:	bd80      	pop	{r7, pc}
    ddb2:	bf00      	nop
    ddb4:	0000dd7b 	.word	0x0000dd7b

0000ddb8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    ddb8:	b580      	push	{r7, lr}
    ddba:	b082      	sub	sp, #8
    ddbc:	af00      	add	r7, sp, #0
    ddbe:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ddc0:	687b      	ldr	r3, [r7, #4]
    ddc2:	3302      	adds	r3, #2
    ddc4:	4618      	mov	r0, r3
    ddc6:	4b03      	ldr	r3, [pc, #12]	; (ddd4 <usb_cfg_desc_total_len+0x1c>)
    ddc8:	4798      	blx	r3
    ddca:	4603      	mov	r3, r0
}
    ddcc:	4618      	mov	r0, r3
    ddce:	3708      	adds	r7, #8
    ddd0:	46bd      	mov	sp, r7
    ddd2:	bd80      	pop	{r7, pc}
    ddd4:	0000dd51 	.word	0x0000dd51

0000ddd8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    ddd8:	b590      	push	{r4, r7, lr}
    ddda:	b085      	sub	sp, #20
    dddc:	af00      	add	r7, sp, #0
    ddde:	4603      	mov	r3, r0
    dde0:	6039      	str	r1, [r7, #0]
    dde2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    dde4:	2300      	movs	r3, #0
    dde6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    dde8:	683b      	ldr	r3, [r7, #0]
    ddea:	799a      	ldrb	r2, [r3, #6]
    ddec:	79db      	ldrb	r3, [r3, #7]
    ddee:	021b      	lsls	r3, r3, #8
    ddf0:	4313      	orrs	r3, r2
    ddf2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    ddf4:	897b      	ldrh	r3, [r7, #10]
    ddf6:	2b12      	cmp	r3, #18
    ddf8:	d901      	bls.n	ddfe <usbdc_get_dev_desc+0x26>
		length = 0x12;
    ddfa:	2312      	movs	r3, #18
    ddfc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    ddfe:	68fb      	ldr	r3, [r7, #12]
    de00:	2b00      	cmp	r3, #0
    de02:	d10a      	bne.n	de1a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    de04:	4b0f      	ldr	r3, [pc, #60]	; (de44 <usbdc_get_dev_desc+0x6c>)
    de06:	681b      	ldr	r3, [r3, #0]
    de08:	6818      	ldr	r0, [r3, #0]
    de0a:	4b0e      	ldr	r3, [pc, #56]	; (de44 <usbdc_get_dev_desc+0x6c>)
    de0c:	681b      	ldr	r3, [r3, #0]
    de0e:	685b      	ldr	r3, [r3, #4]
    de10:	2201      	movs	r2, #1
    de12:	4619      	mov	r1, r3
    de14:	4b0c      	ldr	r3, [pc, #48]	; (de48 <usbdc_get_dev_desc+0x70>)
    de16:	4798      	blx	r3
    de18:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    de1a:	68fb      	ldr	r3, [r7, #12]
    de1c:	2b00      	cmp	r3, #0
    de1e:	d101      	bne.n	de24 <usbdc_get_dev_desc+0x4c>
		return false;
    de20:	2300      	movs	r3, #0
    de22:	e00b      	b.n	de3c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    de24:	897a      	ldrh	r2, [r7, #10]
    de26:	79f8      	ldrb	r0, [r7, #7]
    de28:	2300      	movs	r3, #0
    de2a:	68f9      	ldr	r1, [r7, #12]
    de2c:	4c07      	ldr	r4, [pc, #28]	; (de4c <usbdc_get_dev_desc+0x74>)
    de2e:	47a0      	blx	r4
    de30:	4603      	mov	r3, r0
    de32:	2b00      	cmp	r3, #0
    de34:	d001      	beq.n	de3a <usbdc_get_dev_desc+0x62>
		return false;
    de36:	2300      	movs	r3, #0
    de38:	e000      	b.n	de3c <usbdc_get_dev_desc+0x64>
	}
	return true;
    de3a:	2301      	movs	r3, #1
}
    de3c:	4618      	mov	r0, r3
    de3e:	3714      	adds	r7, #20
    de40:	46bd      	mov	sp, r7
    de42:	bd90      	pop	{r4, r7, pc}
    de44:	2000212c 	.word	0x2000212c
    de48:	0000eb4d 	.word	0x0000eb4d
    de4c:	0000e8bd 	.word	0x0000e8bd

0000de50 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    de50:	b590      	push	{r4, r7, lr}
    de52:	b087      	sub	sp, #28
    de54:	af00      	add	r7, sp, #0
    de56:	4603      	mov	r3, r0
    de58:	6039      	str	r1, [r7, #0]
    de5a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    de5c:	2300      	movs	r3, #0
    de5e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    de60:	683b      	ldr	r3, [r7, #0]
    de62:	799a      	ldrb	r2, [r3, #6]
    de64:	79db      	ldrb	r3, [r3, #7]
    de66:	021b      	lsls	r3, r3, #8
    de68:	4313      	orrs	r3, r2
    de6a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    de6c:	683b      	ldr	r3, [r7, #0]
    de6e:	885b      	ldrh	r3, [r3, #2]
    de70:	b29b      	uxth	r3, r3
    de72:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    de74:	8a7a      	ldrh	r2, [r7, #18]
    de76:	4b1e      	ldr	r3, [pc, #120]	; (def0 <usbdc_get_cfg_desc+0xa0>)
    de78:	7f1b      	ldrb	r3, [r3, #28]
    de7a:	3b01      	subs	r3, #1
    de7c:	4013      	ands	r3, r2
    de7e:	2b00      	cmp	r3, #0
    de80:	bf0c      	ite	eq
    de82:	2301      	moveq	r3, #1
    de84:	2300      	movne	r3, #0
    de86:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    de88:	697b      	ldr	r3, [r7, #20]
    de8a:	2b00      	cmp	r3, #0
    de8c:	d10c      	bne.n	dea8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    de8e:	4b18      	ldr	r3, [pc, #96]	; (def0 <usbdc_get_cfg_desc+0xa0>)
    de90:	681b      	ldr	r3, [r3, #0]
    de92:	6818      	ldr	r0, [r3, #0]
    de94:	4b16      	ldr	r3, [pc, #88]	; (def0 <usbdc_get_cfg_desc+0xa0>)
    de96:	681b      	ldr	r3, [r3, #0]
    de98:	6859      	ldr	r1, [r3, #4]
    de9a:	7c3b      	ldrb	r3, [r7, #16]
    de9c:	3301      	adds	r3, #1
    de9e:	b2db      	uxtb	r3, r3
    dea0:	461a      	mov	r2, r3
    dea2:	4b14      	ldr	r3, [pc, #80]	; (def4 <usbdc_get_cfg_desc+0xa4>)
    dea4:	4798      	blx	r3
    dea6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    dea8:	697b      	ldr	r3, [r7, #20]
    deaa:	2b00      	cmp	r3, #0
    deac:	d101      	bne.n	deb2 <usbdc_get_cfg_desc+0x62>
		return false;
    deae:	2300      	movs	r3, #0
    deb0:	e019      	b.n	dee6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    deb2:	6978      	ldr	r0, [r7, #20]
    deb4:	4b10      	ldr	r3, [pc, #64]	; (def8 <usbdc_get_cfg_desc+0xa8>)
    deb6:	4798      	blx	r3
    deb8:	4603      	mov	r3, r0
    deba:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    debc:	8a7a      	ldrh	r2, [r7, #18]
    debe:	89fb      	ldrh	r3, [r7, #14]
    dec0:	429a      	cmp	r2, r3
    dec2:	d802      	bhi.n	deca <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    dec4:	2300      	movs	r3, #0
    dec6:	747b      	strb	r3, [r7, #17]
    dec8:	e001      	b.n	dece <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    deca:	89fb      	ldrh	r3, [r7, #14]
    decc:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    dece:	8a7a      	ldrh	r2, [r7, #18]
    ded0:	7c7b      	ldrb	r3, [r7, #17]
    ded2:	79f8      	ldrb	r0, [r7, #7]
    ded4:	6979      	ldr	r1, [r7, #20]
    ded6:	4c09      	ldr	r4, [pc, #36]	; (defc <usbdc_get_cfg_desc+0xac>)
    ded8:	47a0      	blx	r4
    deda:	4603      	mov	r3, r0
    dedc:	2b00      	cmp	r3, #0
    dede:	d001      	beq.n	dee4 <usbdc_get_cfg_desc+0x94>
		return false;
    dee0:	2300      	movs	r3, #0
    dee2:	e000      	b.n	dee6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    dee4:	2301      	movs	r3, #1
}
    dee6:	4618      	mov	r0, r3
    dee8:	371c      	adds	r7, #28
    deea:	46bd      	mov	sp, r7
    deec:	bd90      	pop	{r4, r7, pc}
    deee:	bf00      	nop
    def0:	2000212c 	.word	0x2000212c
    def4:	0000ec0d 	.word	0x0000ec0d
    def8:	0000ddb9 	.word	0x0000ddb9
    defc:	0000e8bd 	.word	0x0000e8bd

0000df00 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    df00:	b590      	push	{r4, r7, lr}
    df02:	b085      	sub	sp, #20
    df04:	af00      	add	r7, sp, #0
    df06:	4603      	mov	r3, r0
    df08:	6039      	str	r1, [r7, #0]
    df0a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    df0c:	683b      	ldr	r3, [r7, #0]
    df0e:	799a      	ldrb	r2, [r3, #6]
    df10:	79db      	ldrb	r3, [r3, #7]
    df12:	021b      	lsls	r3, r3, #8
    df14:	4313      	orrs	r3, r2
    df16:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    df18:	683b      	ldr	r3, [r7, #0]
    df1a:	885b      	ldrh	r3, [r3, #2]
    df1c:	b29b      	uxth	r3, r3
    df1e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    df20:	89fa      	ldrh	r2, [r7, #14]
    df22:	4b1a      	ldr	r3, [pc, #104]	; (df8c <usbdc_get_str_desc+0x8c>)
    df24:	7f1b      	ldrb	r3, [r3, #28]
    df26:	3b01      	subs	r3, #1
    df28:	4013      	ands	r3, r2
    df2a:	2b00      	cmp	r3, #0
    df2c:	bf0c      	ite	eq
    df2e:	2301      	moveq	r3, #1
    df30:	2300      	movne	r3, #0
    df32:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    df34:	4b15      	ldr	r3, [pc, #84]	; (df8c <usbdc_get_str_desc+0x8c>)
    df36:	681b      	ldr	r3, [r3, #0]
    df38:	6818      	ldr	r0, [r3, #0]
    df3a:	4b14      	ldr	r3, [pc, #80]	; (df8c <usbdc_get_str_desc+0x8c>)
    df3c:	681b      	ldr	r3, [r3, #0]
    df3e:	685b      	ldr	r3, [r3, #4]
    df40:	7b3a      	ldrb	r2, [r7, #12]
    df42:	4619      	mov	r1, r3
    df44:	4b12      	ldr	r3, [pc, #72]	; (df90 <usbdc_get_str_desc+0x90>)
    df46:	4798      	blx	r3
    df48:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    df4a:	68bb      	ldr	r3, [r7, #8]
    df4c:	2b00      	cmp	r3, #0
    df4e:	d101      	bne.n	df54 <usbdc_get_str_desc+0x54>
		return false;
    df50:	2300      	movs	r3, #0
    df52:	e017      	b.n	df84 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    df54:	68bb      	ldr	r3, [r7, #8]
    df56:	781b      	ldrb	r3, [r3, #0]
    df58:	b29b      	uxth	r3, r3
    df5a:	89fa      	ldrh	r2, [r7, #14]
    df5c:	429a      	cmp	r2, r3
    df5e:	d802      	bhi.n	df66 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    df60:	2300      	movs	r3, #0
    df62:	737b      	strb	r3, [r7, #13]
    df64:	e002      	b.n	df6c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    df66:	68bb      	ldr	r3, [r7, #8]
    df68:	781b      	ldrb	r3, [r3, #0]
    df6a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    df6c:	89fa      	ldrh	r2, [r7, #14]
    df6e:	7b7b      	ldrb	r3, [r7, #13]
    df70:	79f8      	ldrb	r0, [r7, #7]
    df72:	68b9      	ldr	r1, [r7, #8]
    df74:	4c07      	ldr	r4, [pc, #28]	; (df94 <usbdc_get_str_desc+0x94>)
    df76:	47a0      	blx	r4
    df78:	4603      	mov	r3, r0
    df7a:	2b00      	cmp	r3, #0
    df7c:	d001      	beq.n	df82 <usbdc_get_str_desc+0x82>
		return false;
    df7e:	2300      	movs	r3, #0
    df80:	e000      	b.n	df84 <usbdc_get_str_desc+0x84>
	}
	return true;
    df82:	2301      	movs	r3, #1
}
    df84:	4618      	mov	r0, r3
    df86:	3714      	adds	r7, #20
    df88:	46bd      	mov	sp, r7
    df8a:	bd90      	pop	{r4, r7, pc}
    df8c:	2000212c 	.word	0x2000212c
    df90:	0000ec85 	.word	0x0000ec85
    df94:	0000e8bd 	.word	0x0000e8bd

0000df98 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    df98:	b580      	push	{r7, lr}
    df9a:	b084      	sub	sp, #16
    df9c:	af00      	add	r7, sp, #0
    df9e:	4603      	mov	r3, r0
    dfa0:	6039      	str	r1, [r7, #0]
    dfa2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    dfa4:	683b      	ldr	r3, [r7, #0]
    dfa6:	885b      	ldrh	r3, [r3, #2]
    dfa8:	b29b      	uxth	r3, r3
    dfaa:	0a1b      	lsrs	r3, r3, #8
    dfac:	b29b      	uxth	r3, r3
    dfae:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    dfb0:	7bfb      	ldrb	r3, [r7, #15]
    dfb2:	2b02      	cmp	r3, #2
    dfb4:	d00d      	beq.n	dfd2 <usbdc_get_desc_req+0x3a>
    dfb6:	2b03      	cmp	r3, #3
    dfb8:	d012      	beq.n	dfe0 <usbdc_get_desc_req+0x48>
    dfba:	2b01      	cmp	r3, #1
    dfbc:	d002      	beq.n	dfc4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    dfbe:	bf00      	nop
	}
	return false;
    dfc0:	2300      	movs	r3, #0
    dfc2:	e013      	b.n	dfec <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    dfc4:	79fb      	ldrb	r3, [r7, #7]
    dfc6:	6839      	ldr	r1, [r7, #0]
    dfc8:	4618      	mov	r0, r3
    dfca:	4b0a      	ldr	r3, [pc, #40]	; (dff4 <usbdc_get_desc_req+0x5c>)
    dfcc:	4798      	blx	r3
    dfce:	4603      	mov	r3, r0
    dfd0:	e00c      	b.n	dfec <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    dfd2:	79fb      	ldrb	r3, [r7, #7]
    dfd4:	6839      	ldr	r1, [r7, #0]
    dfd6:	4618      	mov	r0, r3
    dfd8:	4b07      	ldr	r3, [pc, #28]	; (dff8 <usbdc_get_desc_req+0x60>)
    dfda:	4798      	blx	r3
    dfdc:	4603      	mov	r3, r0
    dfde:	e005      	b.n	dfec <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    dfe0:	79fb      	ldrb	r3, [r7, #7]
    dfe2:	6839      	ldr	r1, [r7, #0]
    dfe4:	4618      	mov	r0, r3
    dfe6:	4b05      	ldr	r3, [pc, #20]	; (dffc <usbdc_get_desc_req+0x64>)
    dfe8:	4798      	blx	r3
    dfea:	4603      	mov	r3, r0
}
    dfec:	4618      	mov	r0, r3
    dfee:	3710      	adds	r7, #16
    dff0:	46bd      	mov	sp, r7
    dff2:	bd80      	pop	{r7, pc}
    dff4:	0000ddd9 	.word	0x0000ddd9
    dff8:	0000de51 	.word	0x0000de51
    dffc:	0000df01 	.word	0x0000df01

0000e000 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    e000:	b590      	push	{r4, r7, lr}
    e002:	b085      	sub	sp, #20
    e004:	af00      	add	r7, sp, #0
    e006:	4603      	mov	r3, r0
    e008:	6039      	str	r1, [r7, #0]
    e00a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e00c:	683b      	ldr	r3, [r7, #0]
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	f003 031f 	and.w	r3, r3, #31
    e014:	2b00      	cmp	r3, #0
    e016:	db1b      	blt.n	e050 <usbdc_get_status_req+0x50>
    e018:	2b01      	cmp	r3, #1
    e01a:	dd02      	ble.n	e022 <usbdc_get_status_req+0x22>
    e01c:	2b02      	cmp	r3, #2
    e01e:	d003      	beq.n	e028 <usbdc_get_status_req+0x28>
    e020:	e016      	b.n	e050 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    e022:	2300      	movs	r3, #0
    e024:	60fb      	str	r3, [r7, #12]
		break;
    e026:	e015      	b.n	e054 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    e028:	683b      	ldr	r3, [r7, #0]
    e02a:	889b      	ldrh	r3, [r3, #4]
    e02c:	b29b      	uxth	r3, r3
    e02e:	b2db      	uxtb	r3, r3
    e030:	2102      	movs	r1, #2
    e032:	4618      	mov	r0, r3
    e034:	4b0f      	ldr	r3, [pc, #60]	; (e074 <usbdc_get_status_req+0x74>)
    e036:	4798      	blx	r3
    e038:	4603      	mov	r3, r0
    e03a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    e03c:	68fb      	ldr	r3, [r7, #12]
    e03e:	2b00      	cmp	r3, #0
    e040:	da01      	bge.n	e046 <usbdc_get_status_req+0x46>
			return false;
    e042:	2300      	movs	r3, #0
    e044:	e012      	b.n	e06c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    e046:	68fb      	ldr	r3, [r7, #12]
    e048:	f003 0301 	and.w	r3, r3, #1
    e04c:	60fb      	str	r3, [r7, #12]
		break;
    e04e:	e001      	b.n	e054 <usbdc_get_status_req+0x54>
	default:
		return false;
    e050:	2300      	movs	r3, #0
    e052:	e00b      	b.n	e06c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    e054:	4b08      	ldr	r3, [pc, #32]	; (e078 <usbdc_get_status_req+0x78>)
    e056:	695b      	ldr	r3, [r3, #20]
    e058:	89ba      	ldrh	r2, [r7, #12]
    e05a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    e05c:	4b06      	ldr	r3, [pc, #24]	; (e078 <usbdc_get_status_req+0x78>)
    e05e:	6959      	ldr	r1, [r3, #20]
    e060:	79f8      	ldrb	r0, [r7, #7]
    e062:	2300      	movs	r3, #0
    e064:	2202      	movs	r2, #2
    e066:	4c05      	ldr	r4, [pc, #20]	; (e07c <usbdc_get_status_req+0x7c>)
    e068:	47a0      	blx	r4
	return true;
    e06a:	2301      	movs	r3, #1
}
    e06c:	4618      	mov	r0, r3
    e06e:	3714      	adds	r7, #20
    e070:	46bd      	mov	sp, r7
    e072:	bd90      	pop	{r4, r7, pc}
    e074:	000056cd 	.word	0x000056cd
    e078:	2000212c 	.word	0x2000212c
    e07c:	0000e8bd 	.word	0x0000e8bd

0000e080 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    e080:	b590      	push	{r4, r7, lr}
    e082:	b085      	sub	sp, #20
    e084:	af00      	add	r7, sp, #0
    e086:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e088:	4b1f      	ldr	r3, [pc, #124]	; (e108 <usbdc_get_interface+0x88>)
    e08a:	691b      	ldr	r3, [r3, #16]
    e08c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    e08e:	4b1e      	ldr	r3, [pc, #120]	; (e108 <usbdc_get_interface+0x88>)
    e090:	7f5b      	ldrb	r3, [r3, #29]
    e092:	461a      	mov	r2, r3
    e094:	687b      	ldr	r3, [r7, #4]
    e096:	889b      	ldrh	r3, [r3, #4]
    e098:	b29b      	uxth	r3, r3
    e09a:	fa42 f303 	asr.w	r3, r2, r3
    e09e:	f003 0301 	and.w	r3, r3, #1
    e0a2:	2b00      	cmp	r3, #0
    e0a4:	d128      	bne.n	e0f8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    e0a6:	4b18      	ldr	r3, [pc, #96]	; (e108 <usbdc_get_interface+0x88>)
    e0a8:	695b      	ldr	r3, [r3, #20]
    e0aa:	2200      	movs	r2, #0
    e0ac:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e0ae:	4b16      	ldr	r3, [pc, #88]	; (e108 <usbdc_get_interface+0x88>)
    e0b0:	6959      	ldr	r1, [r3, #20]
    e0b2:	2300      	movs	r3, #0
    e0b4:	2201      	movs	r2, #1
    e0b6:	2000      	movs	r0, #0
    e0b8:	4c14      	ldr	r4, [pc, #80]	; (e10c <usbdc_get_interface+0x8c>)
    e0ba:	47a0      	blx	r4
		return true;
    e0bc:	2301      	movs	r3, #1
    e0be:	e01f      	b.n	e100 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    e0c0:	68fb      	ldr	r3, [r7, #12]
    e0c2:	685b      	ldr	r3, [r3, #4]
    e0c4:	687a      	ldr	r2, [r7, #4]
    e0c6:	2102      	movs	r1, #2
    e0c8:	68f8      	ldr	r0, [r7, #12]
    e0ca:	4798      	blx	r3
    e0cc:	60b8      	str	r0, [r7, #8]
    e0ce:	68bb      	ldr	r3, [r7, #8]
    e0d0:	2b00      	cmp	r3, #0
    e0d2:	da03      	bge.n	e0dc <usbdc_get_interface+0x5c>
			func = func->next;
    e0d4:	68fb      	ldr	r3, [r7, #12]
    e0d6:	681b      	ldr	r3, [r3, #0]
    e0d8:	60fb      	str	r3, [r7, #12]
    e0da:	e00d      	b.n	e0f8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    e0dc:	4b0a      	ldr	r3, [pc, #40]	; (e108 <usbdc_get_interface+0x88>)
    e0de:	695b      	ldr	r3, [r3, #20]
    e0e0:	68ba      	ldr	r2, [r7, #8]
    e0e2:	b2d2      	uxtb	r2, r2
    e0e4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e0e6:	4b08      	ldr	r3, [pc, #32]	; (e108 <usbdc_get_interface+0x88>)
    e0e8:	6959      	ldr	r1, [r3, #20]
    e0ea:	2300      	movs	r3, #0
    e0ec:	2201      	movs	r2, #1
    e0ee:	2000      	movs	r0, #0
    e0f0:	4c06      	ldr	r4, [pc, #24]	; (e10c <usbdc_get_interface+0x8c>)
    e0f2:	47a0      	blx	r4
			return true;
    e0f4:	2301      	movs	r3, #1
    e0f6:	e003      	b.n	e100 <usbdc_get_interface+0x80>
	while (NULL != func) {
    e0f8:	68fb      	ldr	r3, [r7, #12]
    e0fa:	2b00      	cmp	r3, #0
    e0fc:	d1e0      	bne.n	e0c0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    e0fe:	2300      	movs	r3, #0
}
    e100:	4618      	mov	r0, r3
    e102:	3714      	adds	r7, #20
    e104:	46bd      	mov	sp, r7
    e106:	bd90      	pop	{r4, r7, pc}
    e108:	2000212c 	.word	0x2000212c
    e10c:	0000e8bd 	.word	0x0000e8bd

0000e110 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    e110:	b590      	push	{r4, r7, lr}
    e112:	b083      	sub	sp, #12
    e114:	af00      	add	r7, sp, #0
    e116:	4603      	mov	r3, r0
    e118:	6039      	str	r1, [r7, #0]
    e11a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e11c:	683b      	ldr	r3, [r7, #0]
    e11e:	785b      	ldrb	r3, [r3, #1]
    e120:	2b0a      	cmp	r3, #10
    e122:	d83a      	bhi.n	e19a <usbdc_get_req+0x8a>
    e124:	a201      	add	r2, pc, #4	; (adr r2, e12c <usbdc_get_req+0x1c>)
    e126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e12a:	bf00      	nop
    e12c:	0000e183 	.word	0x0000e183
    e130:	0000e19b 	.word	0x0000e19b
    e134:	0000e19b 	.word	0x0000e19b
    e138:	0000e19b 	.word	0x0000e19b
    e13c:	0000e19b 	.word	0x0000e19b
    e140:	0000e19b 	.word	0x0000e19b
    e144:	0000e159 	.word	0x0000e159
    e148:	0000e19b 	.word	0x0000e19b
    e14c:	0000e167 	.word	0x0000e167
    e150:	0000e19b 	.word	0x0000e19b
    e154:	0000e191 	.word	0x0000e191
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    e158:	79fb      	ldrb	r3, [r7, #7]
    e15a:	6839      	ldr	r1, [r7, #0]
    e15c:	4618      	mov	r0, r3
    e15e:	4b11      	ldr	r3, [pc, #68]	; (e1a4 <usbdc_get_req+0x94>)
    e160:	4798      	blx	r3
    e162:	4603      	mov	r3, r0
    e164:	e01a      	b.n	e19c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    e166:	4b10      	ldr	r3, [pc, #64]	; (e1a8 <usbdc_get_req+0x98>)
    e168:	695b      	ldr	r3, [r3, #20]
    e16a:	4a0f      	ldr	r2, [pc, #60]	; (e1a8 <usbdc_get_req+0x98>)
    e16c:	7ed2      	ldrb	r2, [r2, #27]
    e16e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    e170:	4b0d      	ldr	r3, [pc, #52]	; (e1a8 <usbdc_get_req+0x98>)
    e172:	6959      	ldr	r1, [r3, #20]
    e174:	79f8      	ldrb	r0, [r7, #7]
    e176:	2300      	movs	r3, #0
    e178:	2201      	movs	r2, #1
    e17a:	4c0c      	ldr	r4, [pc, #48]	; (e1ac <usbdc_get_req+0x9c>)
    e17c:	47a0      	blx	r4
		return true;
    e17e:	2301      	movs	r3, #1
    e180:	e00c      	b.n	e19c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    e182:	79fb      	ldrb	r3, [r7, #7]
    e184:	6839      	ldr	r1, [r7, #0]
    e186:	4618      	mov	r0, r3
    e188:	4b09      	ldr	r3, [pc, #36]	; (e1b0 <usbdc_get_req+0xa0>)
    e18a:	4798      	blx	r3
    e18c:	4603      	mov	r3, r0
    e18e:	e005      	b.n	e19c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    e190:	6838      	ldr	r0, [r7, #0]
    e192:	4b08      	ldr	r3, [pc, #32]	; (e1b4 <usbdc_get_req+0xa4>)
    e194:	4798      	blx	r3
    e196:	4603      	mov	r3, r0
    e198:	e000      	b.n	e19c <usbdc_get_req+0x8c>
	default:
		return false;
    e19a:	2300      	movs	r3, #0
	}
}
    e19c:	4618      	mov	r0, r3
    e19e:	370c      	adds	r7, #12
    e1a0:	46bd      	mov	sp, r7
    e1a2:	bd90      	pop	{r4, r7, pc}
    e1a4:	0000df99 	.word	0x0000df99
    e1a8:	2000212c 	.word	0x2000212c
    e1ac:	0000e8bd 	.word	0x0000e8bd
    e1b0:	0000e001 	.word	0x0000e001
    e1b4:	0000e081 	.word	0x0000e081

0000e1b8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e1b8:	b590      	push	{r4, r7, lr}
    e1ba:	b083      	sub	sp, #12
    e1bc:	af00      	add	r7, sp, #0
    e1be:	4603      	mov	r3, r0
    e1c0:	6039      	str	r1, [r7, #0]
    e1c2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e1c4:	683b      	ldr	r3, [r7, #0]
    e1c6:	781b      	ldrb	r3, [r3, #0]
    e1c8:	f003 031f 	and.w	r3, r3, #31
    e1cc:	2b02      	cmp	r3, #2
    e1ce:	d116      	bne.n	e1fe <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e1d0:	683b      	ldr	r3, [r7, #0]
    e1d2:	88db      	ldrh	r3, [r3, #6]
    e1d4:	b29b      	uxth	r3, r3
    e1d6:	2b00      	cmp	r3, #0
    e1d8:	d001      	beq.n	e1de <usbdc_clear_ftr_req+0x26>
			return false;
    e1da:	2300      	movs	r3, #0
    e1dc:	e010      	b.n	e200 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    e1de:	683b      	ldr	r3, [r7, #0]
    e1e0:	889b      	ldrh	r3, [r3, #4]
    e1e2:	b29b      	uxth	r3, r3
    e1e4:	b2db      	uxtb	r3, r3
    e1e6:	2100      	movs	r1, #0
    e1e8:	4618      	mov	r0, r3
    e1ea:	4b07      	ldr	r3, [pc, #28]	; (e208 <usbdc_clear_ftr_req+0x50>)
    e1ec:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e1ee:	79f8      	ldrb	r0, [r7, #7]
    e1f0:	2301      	movs	r3, #1
    e1f2:	2200      	movs	r2, #0
    e1f4:	2100      	movs	r1, #0
    e1f6:	4c05      	ldr	r4, [pc, #20]	; (e20c <usbdc_clear_ftr_req+0x54>)
    e1f8:	47a0      	blx	r4
		return true;
    e1fa:	2301      	movs	r3, #1
    e1fc:	e000      	b.n	e200 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    e1fe:	2300      	movs	r3, #0
	}
}
    e200:	4618      	mov	r0, r3
    e202:	370c      	adds	r7, #12
    e204:	46bd      	mov	sp, r7
    e206:	bd90      	pop	{r4, r7, pc}
    e208:	000056cd 	.word	0x000056cd
    e20c:	0000e8bd 	.word	0x0000e8bd

0000e210 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e210:	b590      	push	{r4, r7, lr}
    e212:	b083      	sub	sp, #12
    e214:	af00      	add	r7, sp, #0
    e216:	4603      	mov	r3, r0
    e218:	6039      	str	r1, [r7, #0]
    e21a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e21c:	683b      	ldr	r3, [r7, #0]
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	f003 031f 	and.w	r3, r3, #31
    e224:	2b02      	cmp	r3, #2
    e226:	d116      	bne.n	e256 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e228:	683b      	ldr	r3, [r7, #0]
    e22a:	88db      	ldrh	r3, [r3, #6]
    e22c:	b29b      	uxth	r3, r3
    e22e:	2b00      	cmp	r3, #0
    e230:	d001      	beq.n	e236 <usbdc_set_ftr_req+0x26>
			return false;
    e232:	2300      	movs	r3, #0
    e234:	e010      	b.n	e258 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    e236:	683b      	ldr	r3, [r7, #0]
    e238:	889b      	ldrh	r3, [r3, #4]
    e23a:	b29b      	uxth	r3, r3
    e23c:	b2db      	uxtb	r3, r3
    e23e:	2101      	movs	r1, #1
    e240:	4618      	mov	r0, r3
    e242:	4b07      	ldr	r3, [pc, #28]	; (e260 <usbdc_set_ftr_req+0x50>)
    e244:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e246:	79f8      	ldrb	r0, [r7, #7]
    e248:	2301      	movs	r3, #1
    e24a:	2200      	movs	r2, #0
    e24c:	2100      	movs	r1, #0
    e24e:	4c05      	ldr	r4, [pc, #20]	; (e264 <usbdc_set_ftr_req+0x54>)
    e250:	47a0      	blx	r4
		return true;
    e252:	2301      	movs	r3, #1
    e254:	e000      	b.n	e258 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    e256:	2300      	movs	r3, #0
	}
}
    e258:	4618      	mov	r0, r3
    e25a:	370c      	adds	r7, #12
    e25c:	46bd      	mov	sp, r7
    e25e:	bd90      	pop	{r4, r7, pc}
    e260:	000056cd 	.word	0x000056cd
    e264:	0000e8bd 	.word	0x0000e8bd

0000e268 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    e268:	b580      	push	{r7, lr}
    e26a:	b082      	sub	sp, #8
    e26c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e26e:	4b0a      	ldr	r3, [pc, #40]	; (e298 <usbdc_unconfig+0x30>)
    e270:	691b      	ldr	r3, [r3, #16]
    e272:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e274:	e008      	b.n	e288 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    e276:	687b      	ldr	r3, [r7, #4]
    e278:	685b      	ldr	r3, [r3, #4]
    e27a:	2200      	movs	r2, #0
    e27c:	2101      	movs	r1, #1
    e27e:	6878      	ldr	r0, [r7, #4]
    e280:	4798      	blx	r3
		func = func->next;
    e282:	687b      	ldr	r3, [r7, #4]
    e284:	681b      	ldr	r3, [r3, #0]
    e286:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e288:	687b      	ldr	r3, [r7, #4]
    e28a:	2b00      	cmp	r3, #0
    e28c:	d1f3      	bne.n	e276 <usbdc_unconfig+0xe>
	}
}
    e28e:	bf00      	nop
    e290:	3708      	adds	r7, #8
    e292:	46bd      	mov	sp, r7
    e294:	bd80      	pop	{r7, pc}
    e296:	bf00      	nop
    e298:	2000212c 	.word	0x2000212c

0000e29c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    e29c:	b580      	push	{r7, lr}
    e29e:	b088      	sub	sp, #32
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	4603      	mov	r3, r0
    e2a4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    e2a6:	2300      	movs	r3, #0
    e2a8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    e2aa:	23ff      	movs	r3, #255	; 0xff
    e2ac:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    e2ae:	79fb      	ldrb	r3, [r7, #7]
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d103      	bne.n	e2bc <usbdc_set_config+0x20>
		usbdc_unconfig();
    e2b4:	4b2e      	ldr	r3, [pc, #184]	; (e370 <usbdc_set_config+0xd4>)
    e2b6:	4798      	blx	r3
		return true;
    e2b8:	2301      	movs	r3, #1
    e2ba:	e055      	b.n	e368 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e2bc:	69bb      	ldr	r3, [r7, #24]
    e2be:	2b00      	cmp	r3, #0
    e2c0:	d10a      	bne.n	e2d8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    e2c2:	4b2c      	ldr	r3, [pc, #176]	; (e374 <usbdc_set_config+0xd8>)
    e2c4:	681b      	ldr	r3, [r3, #0]
    e2c6:	6818      	ldr	r0, [r3, #0]
    e2c8:	4b2a      	ldr	r3, [pc, #168]	; (e374 <usbdc_set_config+0xd8>)
    e2ca:	681b      	ldr	r3, [r3, #0]
    e2cc:	685b      	ldr	r3, [r3, #4]
    e2ce:	79fa      	ldrb	r2, [r7, #7]
    e2d0:	4619      	mov	r1, r3
    e2d2:	4b29      	ldr	r3, [pc, #164]	; (e378 <usbdc_set_config+0xdc>)
    e2d4:	4798      	blx	r3
    e2d6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    e2d8:	69bb      	ldr	r3, [r7, #24]
    e2da:	2b00      	cmp	r3, #0
    e2dc:	d101      	bne.n	e2e2 <usbdc_set_config+0x46>
		return false;
    e2de:	2300      	movs	r3, #0
    e2e0:	e042      	b.n	e368 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    e2e2:	69b8      	ldr	r0, [r7, #24]
    e2e4:	4b25      	ldr	r3, [pc, #148]	; (e37c <usbdc_set_config+0xe0>)
    e2e6:	4798      	blx	r3
    e2e8:	4603      	mov	r3, r0
    e2ea:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    e2ec:	8abb      	ldrh	r3, [r7, #20]
    e2ee:	69ba      	ldr	r2, [r7, #24]
    e2f0:	4413      	add	r3, r2
    e2f2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    e2f4:	693b      	ldr	r3, [r7, #16]
    e2f6:	2204      	movs	r2, #4
    e2f8:	4619      	mov	r1, r3
    e2fa:	69b8      	ldr	r0, [r7, #24]
    e2fc:	4b20      	ldr	r3, [pc, #128]	; (e380 <usbdc_set_config+0xe4>)
    e2fe:	4798      	blx	r3
    e300:	4603      	mov	r3, r0
    e302:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    e304:	e02c      	b.n	e360 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    e306:	68fb      	ldr	r3, [r7, #12]
    e308:	3302      	adds	r3, #2
    e30a:	781b      	ldrb	r3, [r3, #0]
    e30c:	7dfa      	ldrb	r2, [r7, #23]
    e30e:	429a      	cmp	r2, r3
    e310:	d018      	beq.n	e344 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    e312:	68fb      	ldr	r3, [r7, #12]
    e314:	789b      	ldrb	r3, [r3, #2]
    e316:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    e318:	4b16      	ldr	r3, [pc, #88]	; (e374 <usbdc_set_config+0xd8>)
    e31a:	691b      	ldr	r3, [r3, #16]
    e31c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e31e:	e00c      	b.n	e33a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    e320:	69fb      	ldr	r3, [r7, #28]
    e322:	685b      	ldr	r3, [r3, #4]
    e324:	f107 020c 	add.w	r2, r7, #12
    e328:	2100      	movs	r1, #0
    e32a:	69f8      	ldr	r0, [r7, #28]
    e32c:	4798      	blx	r3
    e32e:	4603      	mov	r3, r0
    e330:	2b00      	cmp	r3, #0
    e332:	d006      	beq.n	e342 <usbdc_set_config+0xa6>
					func = func->next;
    e334:	69fb      	ldr	r3, [r7, #28]
    e336:	681b      	ldr	r3, [r3, #0]
    e338:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e33a:	69fb      	ldr	r3, [r7, #28]
    e33c:	2b00      	cmp	r3, #0
    e33e:	d1ef      	bne.n	e320 <usbdc_set_config+0x84>
    e340:	e000      	b.n	e344 <usbdc_set_config+0xa8>
				} else {
					break;
    e342:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    e344:	68fb      	ldr	r3, [r7, #12]
    e346:	4618      	mov	r0, r3
    e348:	4b0e      	ldr	r3, [pc, #56]	; (e384 <usbdc_set_config+0xe8>)
    e34a:	4798      	blx	r3
    e34c:	4603      	mov	r3, r0
    e34e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e350:	68fb      	ldr	r3, [r7, #12]
    e352:	6939      	ldr	r1, [r7, #16]
    e354:	2204      	movs	r2, #4
    e356:	4618      	mov	r0, r3
    e358:	4b09      	ldr	r3, [pc, #36]	; (e380 <usbdc_set_config+0xe4>)
    e35a:	4798      	blx	r3
    e35c:	4603      	mov	r3, r0
    e35e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    e360:	68fb      	ldr	r3, [r7, #12]
    e362:	2b00      	cmp	r3, #0
    e364:	d1cf      	bne.n	e306 <usbdc_set_config+0x6a>
	}
	return true;
    e366:	2301      	movs	r3, #1
}
    e368:	4618      	mov	r0, r3
    e36a:	3720      	adds	r7, #32
    e36c:	46bd      	mov	sp, r7
    e36e:	bd80      	pop	{r7, pc}
    e370:	0000e269 	.word	0x0000e269
    e374:	2000212c 	.word	0x2000212c
    e378:	0000ec0d 	.word	0x0000ec0d
    e37c:	0000ddb9 	.word	0x0000ddb9
    e380:	0000eb4d 	.word	0x0000eb4d
    e384:	0000dd95 	.word	0x0000dd95

0000e388 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    e388:	b580      	push	{r7, lr}
    e38a:	b082      	sub	sp, #8
    e38c:	af00      	add	r7, sp, #0
    e38e:	4603      	mov	r3, r0
    e390:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    e392:	79fb      	ldrb	r3, [r7, #7]
    e394:	4618      	mov	r0, r3
    e396:	4b03      	ldr	r3, [pc, #12]	; (e3a4 <usbdc_set_address+0x1c>)
    e398:	4798      	blx	r3
}
    e39a:	bf00      	nop
    e39c:	3708      	adds	r7, #8
    e39e:	46bd      	mov	sp, r7
    e3a0:	bd80      	pop	{r7, pc}
    e3a2:	bf00      	nop
    e3a4:	000052e9 	.word	0x000052e9

0000e3a8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    e3a8:	b590      	push	{r4, r7, lr}
    e3aa:	b087      	sub	sp, #28
    e3ac:	af00      	add	r7, sp, #0
    e3ae:	4603      	mov	r3, r0
    e3b0:	460a      	mov	r2, r1
    e3b2:	80fb      	strh	r3, [r7, #6]
    e3b4:	4613      	mov	r3, r2
    e3b6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    e3b8:	2300      	movs	r3, #0
    e3ba:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    e3bc:	693b      	ldr	r3, [r7, #16]
    e3be:	2b00      	cmp	r3, #0
    e3c0:	d10b      	bne.n	e3da <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    e3c2:	4b43      	ldr	r3, [pc, #268]	; (e4d0 <usbdc_set_interface+0x128>)
    e3c4:	681b      	ldr	r3, [r3, #0]
    e3c6:	6818      	ldr	r0, [r3, #0]
    e3c8:	4b41      	ldr	r3, [pc, #260]	; (e4d0 <usbdc_set_interface+0x128>)
    e3ca:	681b      	ldr	r3, [r3, #0]
    e3cc:	6859      	ldr	r1, [r3, #4]
    e3ce:	4b40      	ldr	r3, [pc, #256]	; (e4d0 <usbdc_set_interface+0x128>)
    e3d0:	7edb      	ldrb	r3, [r3, #27]
    e3d2:	461a      	mov	r2, r3
    e3d4:	4b3f      	ldr	r3, [pc, #252]	; (e4d4 <usbdc_set_interface+0x12c>)
    e3d6:	4798      	blx	r3
    e3d8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    e3da:	693b      	ldr	r3, [r7, #16]
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d101      	bne.n	e3e4 <usbdc_set_interface+0x3c>
		return false;
    e3e0:	2300      	movs	r3, #0
    e3e2:	e071      	b.n	e4c8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    e3e4:	693b      	ldr	r3, [r7, #16]
    e3e6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    e3e8:	6938      	ldr	r0, [r7, #16]
    e3ea:	4b3b      	ldr	r3, [pc, #236]	; (e4d8 <usbdc_set_interface+0x130>)
    e3ec:	4798      	blx	r3
    e3ee:	4603      	mov	r3, r0
    e3f0:	461a      	mov	r2, r3
    e3f2:	693b      	ldr	r3, [r7, #16]
    e3f4:	4413      	add	r3, r2
    e3f6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    e3f8:	68bb      	ldr	r3, [r7, #8]
    e3fa:	68f9      	ldr	r1, [r7, #12]
    e3fc:	2204      	movs	r2, #4
    e3fe:	4618      	mov	r0, r3
    e400:	4b36      	ldr	r3, [pc, #216]	; (e4dc <usbdc_set_interface+0x134>)
    e402:	4798      	blx	r3
    e404:	6138      	str	r0, [r7, #16]
    e406:	693b      	ldr	r3, [r7, #16]
    e408:	2b00      	cmp	r3, #0
    e40a:	d113      	bne.n	e434 <usbdc_set_interface+0x8c>
		return false;
    e40c:	2300      	movs	r3, #0
    e40e:	e05b      	b.n	e4c8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    e410:	68bb      	ldr	r3, [r7, #8]
    e412:	4618      	mov	r0, r3
    e414:	4b32      	ldr	r3, [pc, #200]	; (e4e0 <usbdc_set_interface+0x138>)
    e416:	4798      	blx	r3
    e418:	4603      	mov	r3, r0
    e41a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e41c:	68bb      	ldr	r3, [r7, #8]
    e41e:	68f9      	ldr	r1, [r7, #12]
    e420:	2204      	movs	r2, #4
    e422:	4618      	mov	r0, r3
    e424:	4b2d      	ldr	r3, [pc, #180]	; (e4dc <usbdc_set_interface+0x134>)
    e426:	4798      	blx	r3
    e428:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    e42a:	693b      	ldr	r3, [r7, #16]
    e42c:	2b00      	cmp	r3, #0
    e42e:	d101      	bne.n	e434 <usbdc_set_interface+0x8c>
			return false;
    e430:	2300      	movs	r3, #0
    e432:	e049      	b.n	e4c8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    e434:	693b      	ldr	r3, [r7, #16]
    e436:	3302      	adds	r3, #2
    e438:	781b      	ldrb	r3, [r3, #0]
    e43a:	b29b      	uxth	r3, r3
    e43c:	88ba      	ldrh	r2, [r7, #4]
    e43e:	429a      	cmp	r2, r3
    e440:	d1e6      	bne.n	e410 <usbdc_set_interface+0x68>
    e442:	693b      	ldr	r3, [r7, #16]
    e444:	3303      	adds	r3, #3
    e446:	781b      	ldrb	r3, [r3, #0]
    e448:	b29b      	uxth	r3, r3
    e44a:	88fa      	ldrh	r2, [r7, #6]
    e44c:	429a      	cmp	r2, r3
    e44e:	d1df      	bne.n	e410 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    e450:	693b      	ldr	r3, [r7, #16]
    e452:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    e454:	4b1e      	ldr	r3, [pc, #120]	; (e4d0 <usbdc_set_interface+0x128>)
    e456:	691b      	ldr	r3, [r3, #16]
    e458:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    e45a:	e031      	b.n	e4c0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    e45c:	697b      	ldr	r3, [r7, #20]
    e45e:	685b      	ldr	r3, [r3, #4]
    e460:	f107 0208 	add.w	r2, r7, #8
    e464:	2101      	movs	r1, #1
    e466:	6978      	ldr	r0, [r7, #20]
    e468:	4798      	blx	r3
    e46a:	4603      	mov	r3, r0
    e46c:	2b00      	cmp	r3, #0
    e46e:	d003      	beq.n	e478 <usbdc_set_interface+0xd0>
			func = func->next;
    e470:	697b      	ldr	r3, [r7, #20]
    e472:	681b      	ldr	r3, [r3, #0]
    e474:	617b      	str	r3, [r7, #20]
    e476:	e023      	b.n	e4c0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    e478:	697b      	ldr	r3, [r7, #20]
    e47a:	685b      	ldr	r3, [r3, #4]
    e47c:	f107 0208 	add.w	r2, r7, #8
    e480:	2100      	movs	r1, #0
    e482:	6978      	ldr	r0, [r7, #20]
    e484:	4798      	blx	r3
    e486:	4603      	mov	r3, r0
    e488:	2b00      	cmp	r3, #0
    e48a:	d117      	bne.n	e4bc <usbdc_set_interface+0x114>
			if (alt_set) {
    e48c:	88fb      	ldrh	r3, [r7, #6]
    e48e:	2b00      	cmp	r3, #0
    e490:	d00c      	beq.n	e4ac <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    e492:	4b0f      	ldr	r3, [pc, #60]	; (e4d0 <usbdc_set_interface+0x128>)
    e494:	7f5b      	ldrb	r3, [r3, #29]
    e496:	b25a      	sxtb	r2, r3
    e498:	88bb      	ldrh	r3, [r7, #4]
    e49a:	2101      	movs	r1, #1
    e49c:	fa01 f303 	lsl.w	r3, r1, r3
    e4a0:	b25b      	sxtb	r3, r3
    e4a2:	4313      	orrs	r3, r2
    e4a4:	b25b      	sxtb	r3, r3
    e4a6:	b2da      	uxtb	r2, r3
    e4a8:	4b09      	ldr	r3, [pc, #36]	; (e4d0 <usbdc_set_interface+0x128>)
    e4aa:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    e4ac:	2300      	movs	r3, #0
    e4ae:	2200      	movs	r2, #0
    e4b0:	2100      	movs	r1, #0
    e4b2:	2000      	movs	r0, #0
    e4b4:	4c0b      	ldr	r4, [pc, #44]	; (e4e4 <usbdc_set_interface+0x13c>)
    e4b6:	47a0      	blx	r4
			return true;
    e4b8:	2301      	movs	r3, #1
    e4ba:	e005      	b.n	e4c8 <usbdc_set_interface+0x120>
		} else {
			return false;
    e4bc:	2300      	movs	r3, #0
    e4be:	e003      	b.n	e4c8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    e4c0:	697b      	ldr	r3, [r7, #20]
    e4c2:	2b00      	cmp	r3, #0
    e4c4:	d1ca      	bne.n	e45c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    e4c6:	2300      	movs	r3, #0
}
    e4c8:	4618      	mov	r0, r3
    e4ca:	371c      	adds	r7, #28
    e4cc:	46bd      	mov	sp, r7
    e4ce:	bd90      	pop	{r4, r7, pc}
    e4d0:	2000212c 	.word	0x2000212c
    e4d4:	0000ec0d 	.word	0x0000ec0d
    e4d8:	0000ddb9 	.word	0x0000ddb9
    e4dc:	0000eb4d 	.word	0x0000eb4d
    e4e0:	0000dd95 	.word	0x0000dd95
    e4e4:	0000e8bd 	.word	0x0000e8bd

0000e4e8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    e4e8:	b590      	push	{r4, r7, lr}
    e4ea:	b083      	sub	sp, #12
    e4ec:	af00      	add	r7, sp, #0
    e4ee:	4603      	mov	r3, r0
    e4f0:	6039      	str	r1, [r7, #0]
    e4f2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e4f4:	683b      	ldr	r3, [r7, #0]
    e4f6:	785b      	ldrb	r3, [r3, #1]
    e4f8:	3b01      	subs	r3, #1
    e4fa:	2b0a      	cmp	r3, #10
    e4fc:	d85b      	bhi.n	e5b6 <usbdc_set_req+0xce>
    e4fe:	a201      	add	r2, pc, #4	; (adr r2, e504 <usbdc_set_req+0x1c>)
    e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e504:	0000e583 	.word	0x0000e583
    e508:	0000e5b7 	.word	0x0000e5b7
    e50c:	0000e591 	.word	0x0000e591
    e510:	0000e5b7 	.word	0x0000e5b7
    e514:	0000e531 	.word	0x0000e531
    e518:	0000e5b7 	.word	0x0000e5b7
    e51c:	0000e5b7 	.word	0x0000e5b7
    e520:	0000e5b7 	.word	0x0000e5b7
    e524:	0000e54b 	.word	0x0000e54b
    e528:	0000e5b7 	.word	0x0000e5b7
    e52c:	0000e59f 	.word	0x0000e59f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e530:	79f8      	ldrb	r0, [r7, #7]
    e532:	2301      	movs	r3, #1
    e534:	2200      	movs	r2, #0
    e536:	2100      	movs	r1, #0
    e538:	4c21      	ldr	r4, [pc, #132]	; (e5c0 <usbdc_set_req+0xd8>)
    e53a:	47a0      	blx	r4
    e53c:	4603      	mov	r3, r0
    e53e:	2b00      	cmp	r3, #0
    e540:	bf0c      	ite	eq
    e542:	2301      	moveq	r3, #1
    e544:	2300      	movne	r3, #0
    e546:	b2db      	uxtb	r3, r3
    e548:	e036      	b.n	e5b8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    e54a:	683b      	ldr	r3, [r7, #0]
    e54c:	885b      	ldrh	r3, [r3, #2]
    e54e:	b29b      	uxth	r3, r3
    e550:	b2db      	uxtb	r3, r3
    e552:	4618      	mov	r0, r3
    e554:	4b1b      	ldr	r3, [pc, #108]	; (e5c4 <usbdc_set_req+0xdc>)
    e556:	4798      	blx	r3
    e558:	4603      	mov	r3, r0
    e55a:	f083 0301 	eor.w	r3, r3, #1
    e55e:	b2db      	uxtb	r3, r3
    e560:	2b00      	cmp	r3, #0
    e562:	d001      	beq.n	e568 <usbdc_set_req+0x80>
			return false;
    e564:	2300      	movs	r3, #0
    e566:	e027      	b.n	e5b8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e568:	79f8      	ldrb	r0, [r7, #7]
    e56a:	2301      	movs	r3, #1
    e56c:	2200      	movs	r2, #0
    e56e:	2100      	movs	r1, #0
    e570:	4c13      	ldr	r4, [pc, #76]	; (e5c0 <usbdc_set_req+0xd8>)
    e572:	47a0      	blx	r4
    e574:	4603      	mov	r3, r0
    e576:	2b00      	cmp	r3, #0
    e578:	bf0c      	ite	eq
    e57a:	2301      	moveq	r3, #1
    e57c:	2300      	movne	r3, #0
    e57e:	b2db      	uxtb	r3, r3
    e580:	e01a      	b.n	e5b8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    e582:	79fb      	ldrb	r3, [r7, #7]
    e584:	6839      	ldr	r1, [r7, #0]
    e586:	4618      	mov	r0, r3
    e588:	4b0f      	ldr	r3, [pc, #60]	; (e5c8 <usbdc_set_req+0xe0>)
    e58a:	4798      	blx	r3
    e58c:	4603      	mov	r3, r0
    e58e:	e013      	b.n	e5b8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    e590:	79fb      	ldrb	r3, [r7, #7]
    e592:	6839      	ldr	r1, [r7, #0]
    e594:	4618      	mov	r0, r3
    e596:	4b0d      	ldr	r3, [pc, #52]	; (e5cc <usbdc_set_req+0xe4>)
    e598:	4798      	blx	r3
    e59a:	4603      	mov	r3, r0
    e59c:	e00c      	b.n	e5b8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    e59e:	683b      	ldr	r3, [r7, #0]
    e5a0:	885b      	ldrh	r3, [r3, #2]
    e5a2:	b29a      	uxth	r2, r3
    e5a4:	683b      	ldr	r3, [r7, #0]
    e5a6:	889b      	ldrh	r3, [r3, #4]
    e5a8:	b29b      	uxth	r3, r3
    e5aa:	4619      	mov	r1, r3
    e5ac:	4610      	mov	r0, r2
    e5ae:	4b08      	ldr	r3, [pc, #32]	; (e5d0 <usbdc_set_req+0xe8>)
    e5b0:	4798      	blx	r3
    e5b2:	4603      	mov	r3, r0
    e5b4:	e000      	b.n	e5b8 <usbdc_set_req+0xd0>
	default:
		return false;
    e5b6:	2300      	movs	r3, #0
	}
}
    e5b8:	4618      	mov	r0, r3
    e5ba:	370c      	adds	r7, #12
    e5bc:	46bd      	mov	sp, r7
    e5be:	bd90      	pop	{r4, r7, pc}
    e5c0:	0000e8bd 	.word	0x0000e8bd
    e5c4:	0000e29d 	.word	0x0000e29d
    e5c8:	0000e1b9 	.word	0x0000e1b9
    e5cc:	0000e211 	.word	0x0000e211
    e5d0:	0000e3a9 	.word	0x0000e3a9

0000e5d4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    e5d4:	b580      	push	{r7, lr}
    e5d6:	b082      	sub	sp, #8
    e5d8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    e5da:	4b0a      	ldr	r3, [pc, #40]	; (e604 <usbdc_sof_notify+0x30>)
    e5dc:	685b      	ldr	r3, [r3, #4]
    e5de:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    e5e0:	e009      	b.n	e5f6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    e5e2:	687b      	ldr	r3, [r7, #4]
    e5e4:	685b      	ldr	r3, [r3, #4]
    e5e6:	2b00      	cmp	r3, #0
    e5e8:	d002      	beq.n	e5f0 <usbdc_sof_notify+0x1c>
			sof->cb();
    e5ea:	687b      	ldr	r3, [r7, #4]
    e5ec:	685b      	ldr	r3, [r3, #4]
    e5ee:	4798      	blx	r3
		}
		sof = sof->next;
    e5f0:	687b      	ldr	r3, [r7, #4]
    e5f2:	681b      	ldr	r3, [r3, #0]
    e5f4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    e5f6:	687b      	ldr	r3, [r7, #4]
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d1f2      	bne.n	e5e2 <usbdc_sof_notify+0xe>
	}
}
    e5fc:	bf00      	nop
    e5fe:	3708      	adds	r7, #8
    e600:	46bd      	mov	sp, r7
    e602:	bd80      	pop	{r7, pc}
    e604:	2000212c 	.word	0x2000212c

0000e608 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    e608:	b580      	push	{r7, lr}
    e60a:	b084      	sub	sp, #16
    e60c:	af00      	add	r7, sp, #0
    e60e:	4603      	mov	r3, r0
    e610:	6039      	str	r1, [r7, #0]
    e612:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    e614:	4b0b      	ldr	r3, [pc, #44]	; (e644 <usbdc_change_notify+0x3c>)
    e616:	68db      	ldr	r3, [r3, #12]
    e618:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    e61a:	e00c      	b.n	e636 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    e61c:	68fb      	ldr	r3, [r7, #12]
    e61e:	685b      	ldr	r3, [r3, #4]
    e620:	2b00      	cmp	r3, #0
    e622:	d005      	beq.n	e630 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    e624:	68fb      	ldr	r3, [r7, #12]
    e626:	685b      	ldr	r3, [r3, #4]
    e628:	79fa      	ldrb	r2, [r7, #7]
    e62a:	6839      	ldr	r1, [r7, #0]
    e62c:	4610      	mov	r0, r2
    e62e:	4798      	blx	r3
		}
		cg = cg->next;
    e630:	68fb      	ldr	r3, [r7, #12]
    e632:	681b      	ldr	r3, [r3, #0]
    e634:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    e636:	68fb      	ldr	r3, [r7, #12]
    e638:	2b00      	cmp	r3, #0
    e63a:	d1ef      	bne.n	e61c <usbdc_change_notify+0x14>
	}
}
    e63c:	bf00      	nop
    e63e:	3710      	adds	r7, #16
    e640:	46bd      	mov	sp, r7
    e642:	bd80      	pop	{r7, pc}
    e644:	2000212c 	.word	0x2000212c

0000e648 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e648:	b580      	push	{r7, lr}
    e64a:	b084      	sub	sp, #16
    e64c:	af00      	add	r7, sp, #0
    e64e:	4603      	mov	r3, r0
    e650:	6039      	str	r1, [r7, #0]
    e652:	71fb      	strb	r3, [r7, #7]
    e654:	4613      	mov	r3, r2
    e656:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    e658:	4b12      	ldr	r3, [pc, #72]	; (e6a4 <usbdc_request_handler+0x5c>)
    e65a:	689b      	ldr	r3, [r3, #8]
    e65c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    e65e:	e019      	b.n	e694 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    e660:	68fb      	ldr	r3, [r7, #12]
    e662:	685b      	ldr	r3, [r3, #4]
    e664:	2b00      	cmp	r3, #0
    e666:	d012      	beq.n	e68e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    e668:	68fb      	ldr	r3, [r7, #12]
    e66a:	685b      	ldr	r3, [r3, #4]
    e66c:	79ba      	ldrb	r2, [r7, #6]
    e66e:	79f8      	ldrb	r0, [r7, #7]
    e670:	6839      	ldr	r1, [r7, #0]
    e672:	4798      	blx	r3
    e674:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    e676:	68bb      	ldr	r3, [r7, #8]
    e678:	2b00      	cmp	r3, #0
    e67a:	d101      	bne.n	e680 <usbdc_request_handler+0x38>
				return true;
    e67c:	2301      	movs	r3, #1
    e67e:	e00d      	b.n	e69c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    e680:	68bb      	ldr	r3, [r7, #8]
    e682:	f113 0f0a 	cmn.w	r3, #10
    e686:	d002      	beq.n	e68e <usbdc_request_handler+0x46>
				return -1;
    e688:	f04f 33ff 	mov.w	r3, #4294967295
    e68c:	e006      	b.n	e69c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    e68e:	68fb      	ldr	r3, [r7, #12]
    e690:	681b      	ldr	r3, [r3, #0]
    e692:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    e694:	68fb      	ldr	r3, [r7, #12]
    e696:	2b00      	cmp	r3, #0
    e698:	d1e2      	bne.n	e660 <usbdc_request_handler+0x18>
	}
	return false;
    e69a:	2300      	movs	r3, #0
}
    e69c:	4618      	mov	r0, r3
    e69e:	3710      	adds	r7, #16
    e6a0:	46bd      	mov	sp, r7
    e6a2:	bd80      	pop	{r7, pc}
    e6a4:	2000212c 	.word	0x2000212c

0000e6a8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    e6a8:	b580      	push	{r7, lr}
    e6aa:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    e6ac:	4b01      	ldr	r3, [pc, #4]	; (e6b4 <usbd_sof_cb+0xc>)
    e6ae:	4798      	blx	r3
}
    e6b0:	bf00      	nop
    e6b2:	bd80      	pop	{r7, pc}
    e6b4:	0000e5d5 	.word	0x0000e5d5

0000e6b8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    e6b8:	b580      	push	{r7, lr}
    e6ba:	b082      	sub	sp, #8
    e6bc:	af00      	add	r7, sp, #0
    e6be:	4603      	mov	r3, r0
    e6c0:	6039      	str	r1, [r7, #0]
    e6c2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    e6c4:	79fb      	ldrb	r3, [r7, #7]
    e6c6:	2200      	movs	r2, #0
    e6c8:	6839      	ldr	r1, [r7, #0]
    e6ca:	4618      	mov	r0, r3
    e6cc:	4b14      	ldr	r3, [pc, #80]	; (e720 <usbdc_cb_ctl_req+0x68>)
    e6ce:	4798      	blx	r3
    e6d0:	4603      	mov	r3, r0
    e6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
    e6d6:	d00b      	beq.n	e6f0 <usbdc_cb_ctl_req+0x38>
    e6d8:	2b01      	cmp	r3, #1
    e6da:	d007      	beq.n	e6ec <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    e6dc:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e6de:	683b      	ldr	r3, [r7, #0]
    e6e0:	781b      	ldrb	r3, [r3, #0]
    e6e2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e6e6:	2b00      	cmp	r3, #0
    e6e8:	d007      	beq.n	e6fa <usbdc_cb_ctl_req+0x42>
    e6ea:	e003      	b.n	e6f4 <usbdc_cb_ctl_req+0x3c>
		return true;
    e6ec:	2301      	movs	r3, #1
    e6ee:	e013      	b.n	e718 <usbdc_cb_ctl_req+0x60>
		return false;
    e6f0:	2300      	movs	r3, #0
    e6f2:	e011      	b.n	e718 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e6f4:	2b80      	cmp	r3, #128	; 0x80
    e6f6:	d007      	beq.n	e708 <usbdc_cb_ctl_req+0x50>
    e6f8:	e00d      	b.n	e716 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    e6fa:	79fb      	ldrb	r3, [r7, #7]
    e6fc:	6839      	ldr	r1, [r7, #0]
    e6fe:	4618      	mov	r0, r3
    e700:	4b08      	ldr	r3, [pc, #32]	; (e724 <usbdc_cb_ctl_req+0x6c>)
    e702:	4798      	blx	r3
    e704:	4603      	mov	r3, r0
    e706:	e007      	b.n	e718 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    e708:	79fb      	ldrb	r3, [r7, #7]
    e70a:	6839      	ldr	r1, [r7, #0]
    e70c:	4618      	mov	r0, r3
    e70e:	4b06      	ldr	r3, [pc, #24]	; (e728 <usbdc_cb_ctl_req+0x70>)
    e710:	4798      	blx	r3
    e712:	4603      	mov	r3, r0
    e714:	e000      	b.n	e718 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    e716:	2300      	movs	r3, #0
	}
}
    e718:	4618      	mov	r0, r3
    e71a:	3708      	adds	r7, #8
    e71c:	46bd      	mov	sp, r7
    e71e:	bd80      	pop	{r7, pc}
    e720:	0000e649 	.word	0x0000e649
    e724:	0000e4e9 	.word	0x0000e4e9
    e728:	0000e111 	.word	0x0000e111

0000e72c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    e72c:	b580      	push	{r7, lr}
    e72e:	b082      	sub	sp, #8
    e730:	af00      	add	r7, sp, #0
    e732:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    e734:	687b      	ldr	r3, [r7, #4]
    e736:	781b      	ldrb	r3, [r3, #0]
    e738:	2b00      	cmp	r3, #0
    e73a:	d135      	bne.n	e7a8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    e73c:	687b      	ldr	r3, [r7, #4]
    e73e:	785b      	ldrb	r3, [r3, #1]
    e740:	2b05      	cmp	r3, #5
    e742:	d019      	beq.n	e778 <usbdc_ctrl_status_end+0x4c>
    e744:	2b09      	cmp	r3, #9
    e746:	d000      	beq.n	e74a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    e748:	e02f      	b.n	e7aa <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    e74a:	687b      	ldr	r3, [r7, #4]
    e74c:	885b      	ldrh	r3, [r3, #2]
    e74e:	b29b      	uxth	r3, r3
    e750:	b2da      	uxtb	r2, r3
    e752:	4b17      	ldr	r3, [pc, #92]	; (e7b0 <usbdc_ctrl_status_end+0x84>)
    e754:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	885b      	ldrh	r3, [r3, #2]
    e75a:	b29b      	uxth	r3, r3
    e75c:	2b00      	cmp	r3, #0
    e75e:	d001      	beq.n	e764 <usbdc_ctrl_status_end+0x38>
    e760:	2204      	movs	r2, #4
    e762:	e000      	b.n	e766 <usbdc_ctrl_status_end+0x3a>
    e764:	2203      	movs	r2, #3
    e766:	4b12      	ldr	r3, [pc, #72]	; (e7b0 <usbdc_ctrl_status_end+0x84>)
    e768:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e76a:	4b11      	ldr	r3, [pc, #68]	; (e7b0 <usbdc_ctrl_status_end+0x84>)
    e76c:	7e9b      	ldrb	r3, [r3, #26]
    e76e:	4619      	mov	r1, r3
    e770:	2001      	movs	r0, #1
    e772:	4b10      	ldr	r3, [pc, #64]	; (e7b4 <usbdc_ctrl_status_end+0x88>)
    e774:	4798      	blx	r3
		break;
    e776:	e018      	b.n	e7aa <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    e778:	687b      	ldr	r3, [r7, #4]
    e77a:	885b      	ldrh	r3, [r3, #2]
    e77c:	b29b      	uxth	r3, r3
    e77e:	b2db      	uxtb	r3, r3
    e780:	4618      	mov	r0, r3
    e782:	4b0d      	ldr	r3, [pc, #52]	; (e7b8 <usbdc_ctrl_status_end+0x8c>)
    e784:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    e786:	687b      	ldr	r3, [r7, #4]
    e788:	885b      	ldrh	r3, [r3, #2]
    e78a:	b29b      	uxth	r3, r3
    e78c:	2b00      	cmp	r3, #0
    e78e:	d001      	beq.n	e794 <usbdc_ctrl_status_end+0x68>
    e790:	2203      	movs	r2, #3
    e792:	e000      	b.n	e796 <usbdc_ctrl_status_end+0x6a>
    e794:	2202      	movs	r2, #2
    e796:	4b06      	ldr	r3, [pc, #24]	; (e7b0 <usbdc_ctrl_status_end+0x84>)
    e798:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e79a:	4b05      	ldr	r3, [pc, #20]	; (e7b0 <usbdc_ctrl_status_end+0x84>)
    e79c:	7e9b      	ldrb	r3, [r3, #26]
    e79e:	4619      	mov	r1, r3
    e7a0:	2001      	movs	r0, #1
    e7a2:	4b04      	ldr	r3, [pc, #16]	; (e7b4 <usbdc_ctrl_status_end+0x88>)
    e7a4:	4798      	blx	r3
		break;
    e7a6:	e000      	b.n	e7aa <usbdc_ctrl_status_end+0x7e>
		return;
    e7a8:	bf00      	nop
	}
}
    e7aa:	3708      	adds	r7, #8
    e7ac:	46bd      	mov	sp, r7
    e7ae:	bd80      	pop	{r7, pc}
    e7b0:	2000212c 	.word	0x2000212c
    e7b4:	0000e609 	.word	0x0000e609
    e7b8:	0000e389 	.word	0x0000e389

0000e7bc <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    e7bc:	b580      	push	{r7, lr}
    e7be:	b082      	sub	sp, #8
    e7c0:	af00      	add	r7, sp, #0
    e7c2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    e7c4:	2201      	movs	r2, #1
    e7c6:	6879      	ldr	r1, [r7, #4]
    e7c8:	2000      	movs	r0, #0
    e7ca:	4b03      	ldr	r3, [pc, #12]	; (e7d8 <usbdc_ctrl_data_end+0x1c>)
    e7cc:	4798      	blx	r3
	return false;
    e7ce:	2300      	movs	r3, #0
}
    e7d0:	4618      	mov	r0, r3
    e7d2:	3708      	adds	r7, #8
    e7d4:	46bd      	mov	sp, r7
    e7d6:	bd80      	pop	{r7, pc}
    e7d8:	0000e649 	.word	0x0000e649

0000e7dc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    e7dc:	b580      	push	{r7, lr}
    e7de:	b082      	sub	sp, #8
    e7e0:	af00      	add	r7, sp, #0
    e7e2:	4603      	mov	r3, r0
    e7e4:	603a      	str	r2, [r7, #0]
    e7e6:	71fb      	strb	r3, [r7, #7]
    e7e8:	460b      	mov	r3, r1
    e7ea:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    e7ec:	79bb      	ldrb	r3, [r7, #6]
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d002      	beq.n	e7f8 <usbdc_cb_ctl_done+0x1c>
    e7f2:	2b01      	cmp	r3, #1
    e7f4:	d004      	beq.n	e800 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    e7f6:	e008      	b.n	e80a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    e7f8:	6838      	ldr	r0, [r7, #0]
    e7fa:	4b06      	ldr	r3, [pc, #24]	; (e814 <usbdc_cb_ctl_done+0x38>)
    e7fc:	4798      	blx	r3
		break;
    e7fe:	e004      	b.n	e80a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    e800:	6838      	ldr	r0, [r7, #0]
    e802:	4b05      	ldr	r3, [pc, #20]	; (e818 <usbdc_cb_ctl_done+0x3c>)
    e804:	4798      	blx	r3
    e806:	4603      	mov	r3, r0
    e808:	e000      	b.n	e80c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    e80a:	2300      	movs	r3, #0
}
    e80c:	4618      	mov	r0, r3
    e80e:	3708      	adds	r7, #8
    e810:	46bd      	mov	sp, r7
    e812:	bd80      	pop	{r7, pc}
    e814:	0000e72d 	.word	0x0000e72d
    e818:	0000e7bd 	.word	0x0000e7bd

0000e81c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    e81c:	b580      	push	{r7, lr}
    e81e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    e820:	4b10      	ldr	r3, [pc, #64]	; (e864 <usbdc_reset+0x48>)
    e822:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    e824:	4b10      	ldr	r3, [pc, #64]	; (e868 <usbdc_reset+0x4c>)
    e826:	2202      	movs	r2, #2
    e828:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    e82a:	4b0f      	ldr	r3, [pc, #60]	; (e868 <usbdc_reset+0x4c>)
    e82c:	2200      	movs	r2, #0
    e82e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    e830:	4b0d      	ldr	r3, [pc, #52]	; (e868 <usbdc_reset+0x4c>)
    e832:	2200      	movs	r2, #0
    e834:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    e836:	2000      	movs	r0, #0
    e838:	4b0c      	ldr	r3, [pc, #48]	; (e86c <usbdc_reset+0x50>)
    e83a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    e83c:	4b0a      	ldr	r3, [pc, #40]	; (e868 <usbdc_reset+0x4c>)
    e83e:	7f1b      	ldrb	r3, [r3, #28]
    e840:	4618      	mov	r0, r3
    e842:	4b0b      	ldr	r3, [pc, #44]	; (e870 <usbdc_reset+0x54>)
    e844:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    e846:	4a0b      	ldr	r2, [pc, #44]	; (e874 <usbdc_reset+0x58>)
    e848:	2100      	movs	r1, #0
    e84a:	2000      	movs	r0, #0
    e84c:	4b0a      	ldr	r3, [pc, #40]	; (e878 <usbdc_reset+0x5c>)
    e84e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    e850:	4a0a      	ldr	r2, [pc, #40]	; (e87c <usbdc_reset+0x60>)
    e852:	2102      	movs	r1, #2
    e854:	2000      	movs	r0, #0
    e856:	4b08      	ldr	r3, [pc, #32]	; (e878 <usbdc_reset+0x5c>)
    e858:	4798      	blx	r3
	usb_d_ep_enable(0);
    e85a:	2000      	movs	r0, #0
    e85c:	4b08      	ldr	r3, [pc, #32]	; (e880 <usbdc_reset+0x64>)
    e85e:	4798      	blx	r3
}
    e860:	bf00      	nop
    e862:	bd80      	pop	{r7, pc}
    e864:	0000e269 	.word	0x0000e269
    e868:	2000212c 	.word	0x2000212c
    e86c:	000053cd 	.word	0x000053cd
    e870:	00005309 	.word	0x00005309
    e874:	0000e6b9 	.word	0x0000e6b9
    e878:	00005721 	.word	0x00005721
    e87c:	0000e7dd 	.word	0x0000e7dd
    e880:	0000541d 	.word	0x0000541d

0000e884 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    e884:	b580      	push	{r7, lr}
    e886:	b082      	sub	sp, #8
    e888:	af00      	add	r7, sp, #0
    e88a:	4603      	mov	r3, r0
    e88c:	6039      	str	r1, [r7, #0]
    e88e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    e890:	79fb      	ldrb	r3, [r7, #7]
    e892:	2b00      	cmp	r3, #0
    e894:	d002      	beq.n	e89c <usbd_event_cb+0x18>
    e896:	2b01      	cmp	r3, #1
    e898:	d005      	beq.n	e8a6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    e89a:	e007      	b.n	e8ac <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    e89c:	6839      	ldr	r1, [r7, #0]
    e89e:	2000      	movs	r0, #0
    e8a0:	4b04      	ldr	r3, [pc, #16]	; (e8b4 <usbd_event_cb+0x30>)
    e8a2:	4798      	blx	r3
		break;
    e8a4:	e002      	b.n	e8ac <usbd_event_cb+0x28>
		usbdc_reset();
    e8a6:	4b04      	ldr	r3, [pc, #16]	; (e8b8 <usbd_event_cb+0x34>)
    e8a8:	4798      	blx	r3
		break;
    e8aa:	bf00      	nop
	}
}
    e8ac:	bf00      	nop
    e8ae:	3708      	adds	r7, #8
    e8b0:	46bd      	mov	sp, r7
    e8b2:	bd80      	pop	{r7, pc}
    e8b4:	0000e609 	.word	0x0000e609
    e8b8:	0000e81d 	.word	0x0000e81d

0000e8bc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    e8bc:	b580      	push	{r7, lr}
    e8be:	b088      	sub	sp, #32
    e8c0:	af00      	add	r7, sp, #0
    e8c2:	60b9      	str	r1, [r7, #8]
    e8c4:	607a      	str	r2, [r7, #4]
    e8c6:	461a      	mov	r2, r3
    e8c8:	4603      	mov	r3, r0
    e8ca:	73fb      	strb	r3, [r7, #15]
    e8cc:	4613      	mov	r3, r2
    e8ce:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    e8d0:	68bb      	ldr	r3, [r7, #8]
    e8d2:	617b      	str	r3, [r7, #20]
    e8d4:	687b      	ldr	r3, [r7, #4]
    e8d6:	61bb      	str	r3, [r7, #24]
    e8d8:	7bfb      	ldrb	r3, [r7, #15]
    e8da:	773b      	strb	r3, [r7, #28]
    e8dc:	7bbb      	ldrb	r3, [r7, #14]
    e8de:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    e8e0:	f107 0314 	add.w	r3, r7, #20
    e8e4:	4618      	mov	r0, r3
    e8e6:	4b03      	ldr	r3, [pc, #12]	; (e8f4 <usbdc_xfer+0x38>)
    e8e8:	4798      	blx	r3
    e8ea:	4603      	mov	r3, r0
}
    e8ec:	4618      	mov	r0, r3
    e8ee:	3720      	adds	r7, #32
    e8f0:	46bd      	mov	sp, r7
    e8f2:	bd80      	pop	{r7, pc}
    e8f4:	0000548d 	.word	0x0000548d

0000e8f8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    e8f8:	b580      	push	{r7, lr}
    e8fa:	b082      	sub	sp, #8
    e8fc:	af00      	add	r7, sp, #0
    e8fe:	4603      	mov	r3, r0
    e900:	6039      	str	r1, [r7, #0]
    e902:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    e904:	79fb      	ldrb	r3, [r7, #7]
    e906:	2b01      	cmp	r3, #1
    e908:	d009      	beq.n	e91e <usbdc_register_handler+0x26>
    e90a:	2b02      	cmp	r3, #2
    e90c:	d00c      	beq.n	e928 <usbdc_register_handler+0x30>
    e90e:	2b00      	cmp	r3, #0
    e910:	d000      	beq.n	e914 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    e912:	e00e      	b.n	e932 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    e914:	6839      	ldr	r1, [r7, #0]
    e916:	4809      	ldr	r0, [pc, #36]	; (e93c <usbdc_register_handler+0x44>)
    e918:	4b09      	ldr	r3, [pc, #36]	; (e940 <usbdc_register_handler+0x48>)
    e91a:	4798      	blx	r3
		break;
    e91c:	e009      	b.n	e932 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    e91e:	6839      	ldr	r1, [r7, #0]
    e920:	4808      	ldr	r0, [pc, #32]	; (e944 <usbdc_register_handler+0x4c>)
    e922:	4b07      	ldr	r3, [pc, #28]	; (e940 <usbdc_register_handler+0x48>)
    e924:	4798      	blx	r3
		break;
    e926:	e004      	b.n	e932 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    e928:	6839      	ldr	r1, [r7, #0]
    e92a:	4807      	ldr	r0, [pc, #28]	; (e948 <usbdc_register_handler+0x50>)
    e92c:	4b04      	ldr	r3, [pc, #16]	; (e940 <usbdc_register_handler+0x48>)
    e92e:	4798      	blx	r3
		break;
    e930:	bf00      	nop
	}
}
    e932:	bf00      	nop
    e934:	3708      	adds	r7, #8
    e936:	46bd      	mov	sp, r7
    e938:	bd80      	pop	{r7, pc}
    e93a:	bf00      	nop
    e93c:	20002130 	.word	0x20002130
    e940:	00005879 	.word	0x00005879
    e944:	20002134 	.word	0x20002134
    e948:	20002138 	.word	0x20002138

0000e94c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    e94c:	b580      	push	{r7, lr}
    e94e:	b084      	sub	sp, #16
    e950:	af00      	add	r7, sp, #0
    e952:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    e954:	687b      	ldr	r3, [r7, #4]
    e956:	2b00      	cmp	r3, #0
    e958:	bf14      	ite	ne
    e95a:	2301      	movne	r3, #1
    e95c:	2300      	moveq	r3, #0
    e95e:	b2db      	uxtb	r3, r3
    e960:	f240 3255 	movw	r2, #853	; 0x355
    e964:	4910      	ldr	r1, [pc, #64]	; (e9a8 <usbdc_init+0x5c>)
    e966:	4618      	mov	r0, r3
    e968:	4b10      	ldr	r3, [pc, #64]	; (e9ac <usbdc_init+0x60>)
    e96a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    e96c:	4b10      	ldr	r3, [pc, #64]	; (e9b0 <usbdc_init+0x64>)
    e96e:	4798      	blx	r3
    e970:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    e972:	68fb      	ldr	r3, [r7, #12]
    e974:	2b00      	cmp	r3, #0
    e976:	da01      	bge.n	e97c <usbdc_init+0x30>
		return rc;
    e978:	68fb      	ldr	r3, [r7, #12]
    e97a:	e010      	b.n	e99e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    e97c:	2220      	movs	r2, #32
    e97e:	2100      	movs	r1, #0
    e980:	480c      	ldr	r0, [pc, #48]	; (e9b4 <usbdc_init+0x68>)
    e982:	4b0d      	ldr	r3, [pc, #52]	; (e9b8 <usbdc_init+0x6c>)
    e984:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    e986:	4a0b      	ldr	r2, [pc, #44]	; (e9b4 <usbdc_init+0x68>)
    e988:	687b      	ldr	r3, [r7, #4]
    e98a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    e98c:	490b      	ldr	r1, [pc, #44]	; (e9bc <usbdc_init+0x70>)
    e98e:	2000      	movs	r0, #0
    e990:	4b0b      	ldr	r3, [pc, #44]	; (e9c0 <usbdc_init+0x74>)
    e992:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    e994:	490b      	ldr	r1, [pc, #44]	; (e9c4 <usbdc_init+0x78>)
    e996:	2001      	movs	r0, #1
    e998:	4b09      	ldr	r3, [pc, #36]	; (e9c0 <usbdc_init+0x74>)
    e99a:	4798      	blx	r3

	return 0;
    e99c:	2300      	movs	r3, #0
}
    e99e:	4618      	mov	r0, r3
    e9a0:	3710      	adds	r7, #16
    e9a2:	46bd      	mov	sp, r7
    e9a4:	bd80      	pop	{r7, pc}
    e9a6:	bf00      	nop
    e9a8:	00011d48 	.word	0x00011d48
    e9ac:	0000579d 	.word	0x0000579d
    e9b0:	000051f5 	.word	0x000051f5
    e9b4:	2000212c 	.word	0x2000212c
    e9b8:	0001095d 	.word	0x0001095d
    e9bc:	0000e6a9 	.word	0x0000e6a9
    e9c0:	000052a1 	.word	0x000052a1
    e9c4:	0000e885 	.word	0x0000e885

0000e9c8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    e9c8:	b580      	push	{r7, lr}
    e9ca:	b082      	sub	sp, #8
    e9cc:	af00      	add	r7, sp, #0
    e9ce:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    e9d0:	6879      	ldr	r1, [r7, #4]
    e9d2:	4803      	ldr	r0, [pc, #12]	; (e9e0 <usbdc_register_function+0x18>)
    e9d4:	4b03      	ldr	r3, [pc, #12]	; (e9e4 <usbdc_register_function+0x1c>)
    e9d6:	4798      	blx	r3
}
    e9d8:	bf00      	nop
    e9da:	3708      	adds	r7, #8
    e9dc:	46bd      	mov	sp, r7
    e9de:	bd80      	pop	{r7, pc}
    e9e0:	2000213c 	.word	0x2000213c
    e9e4:	00005879 	.word	0x00005879

0000e9e8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    e9e8:	b580      	push	{r7, lr}
    e9ea:	b082      	sub	sp, #8
    e9ec:	af00      	add	r7, sp, #0
    e9ee:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    e9f0:	4b0f      	ldr	r3, [pc, #60]	; (ea30 <usbdc_start+0x48>)
    e9f2:	7e9b      	ldrb	r3, [r3, #26]
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d002      	beq.n	e9fe <usbdc_start+0x16>
		return ERR_BUSY;
    e9f8:	f06f 0303 	mvn.w	r3, #3
    e9fc:	e013      	b.n	ea26 <usbdc_start+0x3e>
	}

	if (desces) {
    e9fe:	687b      	ldr	r3, [r7, #4]
    ea00:	2b00      	cmp	r3, #0
    ea02:	d00e      	beq.n	ea22 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ea04:	4a0a      	ldr	r2, [pc, #40]	; (ea30 <usbdc_start+0x48>)
    ea06:	687b      	ldr	r3, [r7, #4]
    ea08:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ea0a:	687b      	ldr	r3, [r7, #4]
    ea0c:	681b      	ldr	r3, [r3, #0]
    ea0e:	79da      	ldrb	r2, [r3, #7]
    ea10:	4b07      	ldr	r3, [pc, #28]	; (ea30 <usbdc_start+0x48>)
    ea12:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ea14:	4b06      	ldr	r3, [pc, #24]	; (ea30 <usbdc_start+0x48>)
    ea16:	2201      	movs	r2, #1
    ea18:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ea1a:	4b06      	ldr	r3, [pc, #24]	; (ea34 <usbdc_start+0x4c>)
    ea1c:	4798      	blx	r3
	return ERR_NONE;
    ea1e:	2300      	movs	r3, #0
    ea20:	e001      	b.n	ea26 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ea22:	f06f 0308 	mvn.w	r3, #8
}
    ea26:	4618      	mov	r0, r3
    ea28:	3708      	adds	r7, #8
    ea2a:	46bd      	mov	sp, r7
    ea2c:	bd80      	pop	{r7, pc}
    ea2e:	bf00      	nop
    ea30:	2000212c 	.word	0x2000212c
    ea34:	000052c5 	.word	0x000052c5

0000ea38 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ea38:	b580      	push	{r7, lr}
    ea3a:	af00      	add	r7, sp, #0
	usb_d_attach();
    ea3c:	4b01      	ldr	r3, [pc, #4]	; (ea44 <usbdc_attach+0xc>)
    ea3e:	4798      	blx	r3
}
    ea40:	bf00      	nop
    ea42:	bd80      	pop	{r7, pc}
    ea44:	000052d9 	.word	0x000052d9

0000ea48 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ea48:	b480      	push	{r7}
    ea4a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ea4c:	4b03      	ldr	r3, [pc, #12]	; (ea5c <usbdc_get_ctrl_buffer+0x14>)
    ea4e:	695b      	ldr	r3, [r3, #20]
}
    ea50:	4618      	mov	r0, r3
    ea52:	46bd      	mov	sp, r7
    ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea58:	4770      	bx	lr
    ea5a:	bf00      	nop
    ea5c:	2000212c 	.word	0x2000212c

0000ea60 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ea60:	b480      	push	{r7}
    ea62:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ea64:	4b07      	ldr	r3, [pc, #28]	; (ea84 <usbdc_get_state+0x24>)
    ea66:	7e9b      	ldrb	r3, [r3, #26]
    ea68:	f003 0310 	and.w	r3, r3, #16
    ea6c:	2b00      	cmp	r3, #0
    ea6e:	d001      	beq.n	ea74 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    ea70:	2310      	movs	r3, #16
    ea72:	e001      	b.n	ea78 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    ea74:	4b03      	ldr	r3, [pc, #12]	; (ea84 <usbdc_get_state+0x24>)
    ea76:	7e9b      	ldrb	r3, [r3, #26]
}
    ea78:	4618      	mov	r0, r3
    ea7a:	46bd      	mov	sp, r7
    ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea80:	4770      	bx	lr
    ea82:	bf00      	nop
    ea84:	2000212c 	.word	0x2000212c

0000ea88 <usb_get_u16>:
{
    ea88:	b480      	push	{r7}
    ea8a:	b083      	sub	sp, #12
    ea8c:	af00      	add	r7, sp, #0
    ea8e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ea90:	687b      	ldr	r3, [r7, #4]
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	b29a      	uxth	r2, r3
    ea96:	687b      	ldr	r3, [r7, #4]
    ea98:	3301      	adds	r3, #1
    ea9a:	781b      	ldrb	r3, [r3, #0]
    ea9c:	b29b      	uxth	r3, r3
    ea9e:	021b      	lsls	r3, r3, #8
    eaa0:	b29b      	uxth	r3, r3
    eaa2:	4413      	add	r3, r2
    eaa4:	b29b      	uxth	r3, r3
}
    eaa6:	4618      	mov	r0, r3
    eaa8:	370c      	adds	r7, #12
    eaaa:	46bd      	mov	sp, r7
    eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
    eab0:	4770      	bx	lr

0000eab2 <usb_desc_len>:
{
    eab2:	b480      	push	{r7}
    eab4:	b083      	sub	sp, #12
    eab6:	af00      	add	r7, sp, #0
    eab8:	6078      	str	r0, [r7, #4]
	return desc[0];
    eaba:	687b      	ldr	r3, [r7, #4]
    eabc:	781b      	ldrb	r3, [r3, #0]
}
    eabe:	4618      	mov	r0, r3
    eac0:	370c      	adds	r7, #12
    eac2:	46bd      	mov	sp, r7
    eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
    eac8:	4770      	bx	lr

0000eaca <usb_desc_type>:
{
    eaca:	b480      	push	{r7}
    eacc:	b083      	sub	sp, #12
    eace:	af00      	add	r7, sp, #0
    ead0:	6078      	str	r0, [r7, #4]
	return desc[1];
    ead2:	687b      	ldr	r3, [r7, #4]
    ead4:	3301      	adds	r3, #1
    ead6:	781b      	ldrb	r3, [r3, #0]
}
    ead8:	4618      	mov	r0, r3
    eada:	370c      	adds	r7, #12
    eadc:	46bd      	mov	sp, r7
    eade:	f85d 7b04 	ldr.w	r7, [sp], #4
    eae2:	4770      	bx	lr

0000eae4 <usb_desc_next>:
{
    eae4:	b580      	push	{r7, lr}
    eae6:	b082      	sub	sp, #8
    eae8:	af00      	add	r7, sp, #0
    eaea:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    eaec:	6878      	ldr	r0, [r7, #4]
    eaee:	4b05      	ldr	r3, [pc, #20]	; (eb04 <usb_desc_next+0x20>)
    eaf0:	4798      	blx	r3
    eaf2:	4603      	mov	r3, r0
    eaf4:	461a      	mov	r2, r3
    eaf6:	687b      	ldr	r3, [r7, #4]
    eaf8:	4413      	add	r3, r2
}
    eafa:	4618      	mov	r0, r3
    eafc:	3708      	adds	r7, #8
    eafe:	46bd      	mov	sp, r7
    eb00:	bd80      	pop	{r7, pc}
    eb02:	bf00      	nop
    eb04:	0000eab3 	.word	0x0000eab3

0000eb08 <usb_cfg_desc_total_len>:
{
    eb08:	b580      	push	{r7, lr}
    eb0a:	b082      	sub	sp, #8
    eb0c:	af00      	add	r7, sp, #0
    eb0e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    eb10:	687b      	ldr	r3, [r7, #4]
    eb12:	3302      	adds	r3, #2
    eb14:	4618      	mov	r0, r3
    eb16:	4b03      	ldr	r3, [pc, #12]	; (eb24 <usb_cfg_desc_total_len+0x1c>)
    eb18:	4798      	blx	r3
    eb1a:	4603      	mov	r3, r0
}
    eb1c:	4618      	mov	r0, r3
    eb1e:	3708      	adds	r7, #8
    eb20:	46bd      	mov	sp, r7
    eb22:	bd80      	pop	{r7, pc}
    eb24:	0000ea89 	.word	0x0000ea89

0000eb28 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    eb28:	b580      	push	{r7, lr}
    eb2a:	b082      	sub	sp, #8
    eb2c:	af00      	add	r7, sp, #0
    eb2e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    eb30:	6878      	ldr	r0, [r7, #4]
    eb32:	4b05      	ldr	r3, [pc, #20]	; (eb48 <usb_cfg_desc_next+0x20>)
    eb34:	4798      	blx	r3
    eb36:	4603      	mov	r3, r0
    eb38:	461a      	mov	r2, r3
    eb3a:	687b      	ldr	r3, [r7, #4]
    eb3c:	4413      	add	r3, r2
}
    eb3e:	4618      	mov	r0, r3
    eb40:	3708      	adds	r7, #8
    eb42:	46bd      	mov	sp, r7
    eb44:	bd80      	pop	{r7, pc}
    eb46:	bf00      	nop
    eb48:	0000eb09 	.word	0x0000eb09

0000eb4c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    eb4c:	b580      	push	{r7, lr}
    eb4e:	b084      	sub	sp, #16
    eb50:	af00      	add	r7, sp, #0
    eb52:	60f8      	str	r0, [r7, #12]
    eb54:	60b9      	str	r1, [r7, #8]
    eb56:	4613      	mov	r3, r2
    eb58:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    eb5a:	e015      	b.n	eb88 <usb_find_desc+0x3c>
		_desc_len_check();
    eb5c:	68f8      	ldr	r0, [r7, #12]
    eb5e:	4b0f      	ldr	r3, [pc, #60]	; (eb9c <usb_find_desc+0x50>)
    eb60:	4798      	blx	r3
    eb62:	4603      	mov	r3, r0
    eb64:	2b01      	cmp	r3, #1
    eb66:	d801      	bhi.n	eb6c <usb_find_desc+0x20>
    eb68:	2300      	movs	r3, #0
    eb6a:	e012      	b.n	eb92 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    eb6c:	68f8      	ldr	r0, [r7, #12]
    eb6e:	4b0c      	ldr	r3, [pc, #48]	; (eba0 <usb_find_desc+0x54>)
    eb70:	4798      	blx	r3
    eb72:	4603      	mov	r3, r0
    eb74:	461a      	mov	r2, r3
    eb76:	79fb      	ldrb	r3, [r7, #7]
    eb78:	4293      	cmp	r3, r2
    eb7a:	d101      	bne.n	eb80 <usb_find_desc+0x34>
			return desc;
    eb7c:	68fb      	ldr	r3, [r7, #12]
    eb7e:	e008      	b.n	eb92 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    eb80:	68f8      	ldr	r0, [r7, #12]
    eb82:	4b08      	ldr	r3, [pc, #32]	; (eba4 <usb_find_desc+0x58>)
    eb84:	4798      	blx	r3
    eb86:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    eb88:	68fa      	ldr	r2, [r7, #12]
    eb8a:	68bb      	ldr	r3, [r7, #8]
    eb8c:	429a      	cmp	r2, r3
    eb8e:	d3e5      	bcc.n	eb5c <usb_find_desc+0x10>
	}
	return NULL;
    eb90:	2300      	movs	r3, #0
}
    eb92:	4618      	mov	r0, r3
    eb94:	3710      	adds	r7, #16
    eb96:	46bd      	mov	sp, r7
    eb98:	bd80      	pop	{r7, pc}
    eb9a:	bf00      	nop
    eb9c:	0000eab3 	.word	0x0000eab3
    eba0:	0000eacb 	.word	0x0000eacb
    eba4:	0000eae5 	.word	0x0000eae5

0000eba8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    eba8:	b580      	push	{r7, lr}
    ebaa:	b082      	sub	sp, #8
    ebac:	af00      	add	r7, sp, #0
    ebae:	6078      	str	r0, [r7, #4]
    ebb0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ebb2:	e019      	b.n	ebe8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    ebb4:	6878      	ldr	r0, [r7, #4]
    ebb6:	4b12      	ldr	r3, [pc, #72]	; (ec00 <usb_find_ep_desc+0x58>)
    ebb8:	4798      	blx	r3
    ebba:	4603      	mov	r3, r0
    ebbc:	2b01      	cmp	r3, #1
    ebbe:	d801      	bhi.n	ebc4 <usb_find_ep_desc+0x1c>
    ebc0:	2300      	movs	r3, #0
    ebc2:	e018      	b.n	ebf6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ebc4:	6878      	ldr	r0, [r7, #4]
    ebc6:	4b0f      	ldr	r3, [pc, #60]	; (ec04 <usb_find_ep_desc+0x5c>)
    ebc8:	4798      	blx	r3
    ebca:	4603      	mov	r3, r0
    ebcc:	2b04      	cmp	r3, #4
    ebce:	d010      	beq.n	ebf2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ebd0:	6878      	ldr	r0, [r7, #4]
    ebd2:	4b0c      	ldr	r3, [pc, #48]	; (ec04 <usb_find_ep_desc+0x5c>)
    ebd4:	4798      	blx	r3
    ebd6:	4603      	mov	r3, r0
    ebd8:	2b05      	cmp	r3, #5
    ebda:	d101      	bne.n	ebe0 <usb_find_ep_desc+0x38>
			return desc;
    ebdc:	687b      	ldr	r3, [r7, #4]
    ebde:	e00a      	b.n	ebf6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    ebe0:	6878      	ldr	r0, [r7, #4]
    ebe2:	4b09      	ldr	r3, [pc, #36]	; (ec08 <usb_find_ep_desc+0x60>)
    ebe4:	4798      	blx	r3
    ebe6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    ebe8:	687a      	ldr	r2, [r7, #4]
    ebea:	683b      	ldr	r3, [r7, #0]
    ebec:	429a      	cmp	r2, r3
    ebee:	d3e1      	bcc.n	ebb4 <usb_find_ep_desc+0xc>
    ebf0:	e000      	b.n	ebf4 <usb_find_ep_desc+0x4c>
			break;
    ebf2:	bf00      	nop
	}
	return NULL;
    ebf4:	2300      	movs	r3, #0
}
    ebf6:	4618      	mov	r0, r3
    ebf8:	3708      	adds	r7, #8
    ebfa:	46bd      	mov	sp, r7
    ebfc:	bd80      	pop	{r7, pc}
    ebfe:	bf00      	nop
    ec00:	0000eab3 	.word	0x0000eab3
    ec04:	0000eacb 	.word	0x0000eacb
    ec08:	0000eae5 	.word	0x0000eae5

0000ec0c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ec0c:	b580      	push	{r7, lr}
    ec0e:	b084      	sub	sp, #16
    ec10:	af00      	add	r7, sp, #0
    ec12:	60f8      	str	r0, [r7, #12]
    ec14:	60b9      	str	r1, [r7, #8]
    ec16:	4613      	mov	r3, r2
    ec18:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ec1a:	2202      	movs	r2, #2
    ec1c:	68b9      	ldr	r1, [r7, #8]
    ec1e:	68f8      	ldr	r0, [r7, #12]
    ec20:	4b15      	ldr	r3, [pc, #84]	; (ec78 <usb_find_cfg_desc+0x6c>)
    ec22:	4798      	blx	r3
    ec24:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    ec26:	68fb      	ldr	r3, [r7, #12]
    ec28:	2b00      	cmp	r3, #0
    ec2a:	d11a      	bne.n	ec62 <usb_find_cfg_desc+0x56>
		return NULL;
    ec2c:	2300      	movs	r3, #0
    ec2e:	e01f      	b.n	ec70 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    ec30:	68f8      	ldr	r0, [r7, #12]
    ec32:	4b12      	ldr	r3, [pc, #72]	; (ec7c <usb_find_cfg_desc+0x70>)
    ec34:	4798      	blx	r3
    ec36:	4603      	mov	r3, r0
    ec38:	2b01      	cmp	r3, #1
    ec3a:	d801      	bhi.n	ec40 <usb_find_cfg_desc+0x34>
    ec3c:	2300      	movs	r3, #0
    ec3e:	e017      	b.n	ec70 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    ec40:	68fb      	ldr	r3, [r7, #12]
    ec42:	3301      	adds	r3, #1
    ec44:	781b      	ldrb	r3, [r3, #0]
    ec46:	2b02      	cmp	r3, #2
    ec48:	d110      	bne.n	ec6c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    ec4a:	68fb      	ldr	r3, [r7, #12]
    ec4c:	3305      	adds	r3, #5
    ec4e:	781b      	ldrb	r3, [r3, #0]
    ec50:	79fa      	ldrb	r2, [r7, #7]
    ec52:	429a      	cmp	r2, r3
    ec54:	d101      	bne.n	ec5a <usb_find_cfg_desc+0x4e>
			return desc;
    ec56:	68fb      	ldr	r3, [r7, #12]
    ec58:	e00a      	b.n	ec70 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    ec5a:	68f8      	ldr	r0, [r7, #12]
    ec5c:	4b08      	ldr	r3, [pc, #32]	; (ec80 <usb_find_cfg_desc+0x74>)
    ec5e:	4798      	blx	r3
    ec60:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ec62:	68fa      	ldr	r2, [r7, #12]
    ec64:	68bb      	ldr	r3, [r7, #8]
    ec66:	429a      	cmp	r2, r3
    ec68:	d3e2      	bcc.n	ec30 <usb_find_cfg_desc+0x24>
    ec6a:	e000      	b.n	ec6e <usb_find_cfg_desc+0x62>
			break;
    ec6c:	bf00      	nop
	}
	return NULL;
    ec6e:	2300      	movs	r3, #0
}
    ec70:	4618      	mov	r0, r3
    ec72:	3710      	adds	r7, #16
    ec74:	46bd      	mov	sp, r7
    ec76:	bd80      	pop	{r7, pc}
    ec78:	0000eb4d 	.word	0x0000eb4d
    ec7c:	0000eab3 	.word	0x0000eab3
    ec80:	0000eb29 	.word	0x0000eb29

0000ec84 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    ec84:	b580      	push	{r7, lr}
    ec86:	b086      	sub	sp, #24
    ec88:	af00      	add	r7, sp, #0
    ec8a:	60f8      	str	r0, [r7, #12]
    ec8c:	60b9      	str	r1, [r7, #8]
    ec8e:	4613      	mov	r3, r2
    ec90:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ec92:	2300      	movs	r3, #0
    ec94:	75fb      	strb	r3, [r7, #23]
    ec96:	e020      	b.n	ecda <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ec98:	2203      	movs	r2, #3
    ec9a:	68b9      	ldr	r1, [r7, #8]
    ec9c:	68f8      	ldr	r0, [r7, #12]
    ec9e:	4b13      	ldr	r3, [pc, #76]	; (ecec <usb_find_str_desc+0x68>)
    eca0:	4798      	blx	r3
    eca2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    eca4:	68fb      	ldr	r3, [r7, #12]
    eca6:	2b00      	cmp	r3, #0
    eca8:	d015      	beq.n	ecd6 <usb_find_str_desc+0x52>
			_desc_len_check();
    ecaa:	68f8      	ldr	r0, [r7, #12]
    ecac:	4b10      	ldr	r3, [pc, #64]	; (ecf0 <usb_find_str_desc+0x6c>)
    ecae:	4798      	blx	r3
    ecb0:	4603      	mov	r3, r0
    ecb2:	2b01      	cmp	r3, #1
    ecb4:	d801      	bhi.n	ecba <usb_find_str_desc+0x36>
    ecb6:	2300      	movs	r3, #0
    ecb8:	e014      	b.n	ece4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    ecba:	7dfa      	ldrb	r2, [r7, #23]
    ecbc:	79fb      	ldrb	r3, [r7, #7]
    ecbe:	429a      	cmp	r2, r3
    ecc0:	d101      	bne.n	ecc6 <usb_find_str_desc+0x42>
				return desc;
    ecc2:	68fb      	ldr	r3, [r7, #12]
    ecc4:	e00e      	b.n	ece4 <usb_find_str_desc+0x60>
			}
			i++;
    ecc6:	7dfb      	ldrb	r3, [r7, #23]
    ecc8:	3301      	adds	r3, #1
    ecca:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    eccc:	68f8      	ldr	r0, [r7, #12]
    ecce:	4b09      	ldr	r3, [pc, #36]	; (ecf4 <usb_find_str_desc+0x70>)
    ecd0:	4798      	blx	r3
    ecd2:	60f8      	str	r0, [r7, #12]
    ecd4:	e001      	b.n	ecda <usb_find_str_desc+0x56>
		} else {
			return NULL;
    ecd6:	2300      	movs	r3, #0
    ecd8:	e004      	b.n	ece4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    ecda:	68fa      	ldr	r2, [r7, #12]
    ecdc:	68bb      	ldr	r3, [r7, #8]
    ecde:	429a      	cmp	r2, r3
    ece0:	d3da      	bcc.n	ec98 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    ece2:	2300      	movs	r3, #0
}
    ece4:	4618      	mov	r0, r3
    ece6:	3718      	adds	r7, #24
    ece8:	46bd      	mov	sp, r7
    ecea:	bd80      	pop	{r7, pc}
    ecec:	0000eb4d 	.word	0x0000eb4d
    ecf0:	0000eab3 	.word	0x0000eab3
    ecf4:	0000eae5 	.word	0x0000eae5

0000ecf8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    ecf8:	b580      	push	{r7, lr}
    ecfa:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ecfc:	4805      	ldr	r0, [pc, #20]	; (ed14 <cdc_device_acm_init+0x1c>)
    ecfe:	4b06      	ldr	r3, [pc, #24]	; (ed18 <cdc_device_acm_init+0x20>)
    ed00:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    ed02:	4b06      	ldr	r3, [pc, #24]	; (ed1c <cdc_device_acm_init+0x24>)
    ed04:	4798      	blx	r3

	usbdc_start(single_desc);
    ed06:	4806      	ldr	r0, [pc, #24]	; (ed20 <cdc_device_acm_init+0x28>)
    ed08:	4b06      	ldr	r3, [pc, #24]	; (ed24 <cdc_device_acm_init+0x2c>)
    ed0a:	4798      	blx	r3
	usbdc_attach();
    ed0c:	4b06      	ldr	r3, [pc, #24]	; (ed28 <cdc_device_acm_init+0x30>)
    ed0e:	4798      	blx	r3
}
    ed10:	bf00      	nop
    ed12:	bd80      	pop	{r7, pc}
    ed14:	2000218c 	.word	0x2000218c
    ed18:	0000e94d 	.word	0x0000e94d
    ed1c:	0000dbc5 	.word	0x0000dbc5
    ed20:	2000010c 	.word	0x2000010c
    ed24:	0000e9e9 	.word	0x0000e9e9
    ed28:	0000ea39 	.word	0x0000ea39

0000ed2c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ed2c:	b580      	push	{r7, lr}
    ed2e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ed30:	4b01      	ldr	r3, [pc, #4]	; (ed38 <usb_init+0xc>)
    ed32:	4798      	blx	r3
}
    ed34:	bf00      	nop
    ed36:	bd80      	pop	{r7, pc}
    ed38:	0000ecf9 	.word	0x0000ecf9

0000ed3c <__aeabi_atexit>:
    ed3c:	460b      	mov	r3, r1
    ed3e:	4601      	mov	r1, r0
    ed40:	4618      	mov	r0, r3
    ed42:	f001 bd2f 	b.w	107a4 <__cxa_atexit>
    ed46:	bf00      	nop

0000ed48 <_ZdlPvj>:
    ed48:	f7f1 bd98 	b.w	87c <_ZdlPv>

0000ed4c <pow>:
    ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed50:	f8df 92f0 	ldr.w	r9, [pc, #752]	; f044 <pow+0x2f8>
    ed54:	b08d      	sub	sp, #52	; 0x34
    ed56:	4606      	mov	r6, r0
    ed58:	460f      	mov	r7, r1
    ed5a:	4614      	mov	r4, r2
    ed5c:	461d      	mov	r5, r3
    ed5e:	f000 f973 	bl	f048 <__ieee754_pow>
    ed62:	f999 8000 	ldrsb.w	r8, [r9]
    ed66:	f1b8 3fff 	cmp.w	r8, #4294967295
    ed6a:	e9cd 0100 	strd	r0, r1, [sp]
    ed6e:	d036      	beq.n	edde <pow+0x92>
    ed70:	4622      	mov	r2, r4
    ed72:	462b      	mov	r3, r5
    ed74:	4620      	mov	r0, r4
    ed76:	4629      	mov	r1, r5
    ed78:	f001 fcde 	bl	10738 <__aeabi_dcmpun>
    ed7c:	4683      	mov	fp, r0
    ed7e:	bb70      	cbnz	r0, edde <pow+0x92>
    ed80:	4632      	mov	r2, r6
    ed82:	463b      	mov	r3, r7
    ed84:	4630      	mov	r0, r6
    ed86:	4639      	mov	r1, r7
    ed88:	f001 fcd6 	bl	10738 <__aeabi_dcmpun>
    ed8c:	2200      	movs	r2, #0
    ed8e:	4682      	mov	sl, r0
    ed90:	2300      	movs	r3, #0
    ed92:	2800      	cmp	r0, #0
    ed94:	f040 80a0 	bne.w	eed8 <pow+0x18c>
    ed98:	4630      	mov	r0, r6
    ed9a:	4639      	mov	r1, r7
    ed9c:	f001 fc9a 	bl	106d4 <__aeabi_dcmpeq>
    eda0:	b310      	cbz	r0, ede8 <pow+0x9c>
    eda2:	2200      	movs	r2, #0
    eda4:	2300      	movs	r3, #0
    eda6:	4620      	mov	r0, r4
    eda8:	4629      	mov	r1, r5
    edaa:	f001 fc93 	bl	106d4 <__aeabi_dcmpeq>
    edae:	4683      	mov	fp, r0
    edb0:	2800      	cmp	r0, #0
    edb2:	d06a      	beq.n	ee8a <pow+0x13e>
    edb4:	2201      	movs	r2, #1
    edb6:	4b9c      	ldr	r3, [pc, #624]	; (f028 <pow+0x2dc>)
    edb8:	9202      	str	r2, [sp, #8]
    edba:	2100      	movs	r1, #0
    edbc:	2200      	movs	r2, #0
    edbe:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    edc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
    edc6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    edca:	e9cd 1208 	strd	r1, r2, [sp, #32]
    edce:	9303      	str	r3, [sp, #12]
    edd0:	f1b8 0f00 	cmp.w	r8, #0
    edd4:	d045      	beq.n	ee62 <pow+0x116>
    edd6:	4c95      	ldr	r4, [pc, #596]	; (f02c <pow+0x2e0>)
    edd8:	2300      	movs	r3, #0
    edda:	e9cd 3400 	strd	r3, r4, [sp]
    edde:	e9dd 0100 	ldrd	r0, r1, [sp]
    ede2:	b00d      	add	sp, #52	; 0x34
    ede4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ede8:	e9dd 0100 	ldrd	r0, r1, [sp]
    edec:	f000 ff32 	bl	fc54 <finite>
    edf0:	4680      	mov	r8, r0
    edf2:	2800      	cmp	r0, #0
    edf4:	f000 808b 	beq.w	ef0e <pow+0x1c2>
    edf8:	f04f 0a00 	mov.w	sl, #0
    edfc:	f04f 0b00 	mov.w	fp, #0
    ee00:	4652      	mov	r2, sl
    ee02:	465b      	mov	r3, fp
    ee04:	e9dd 0100 	ldrd	r0, r1, [sp]
    ee08:	f001 fc64 	bl	106d4 <__aeabi_dcmpeq>
    ee0c:	2800      	cmp	r0, #0
    ee0e:	d0e6      	beq.n	edde <pow+0x92>
    ee10:	4630      	mov	r0, r6
    ee12:	4639      	mov	r1, r7
    ee14:	f000 ff1e 	bl	fc54 <finite>
    ee18:	2800      	cmp	r0, #0
    ee1a:	d0e0      	beq.n	edde <pow+0x92>
    ee1c:	4620      	mov	r0, r4
    ee1e:	4629      	mov	r1, r5
    ee20:	f000 ff18 	bl	fc54 <finite>
    ee24:	2800      	cmp	r0, #0
    ee26:	d0da      	beq.n	edde <pow+0x92>
    ee28:	f999 3000 	ldrsb.w	r3, [r9]
    ee2c:	4a7e      	ldr	r2, [pc, #504]	; (f028 <pow+0x2dc>)
    ee2e:	9203      	str	r2, [sp, #12]
    ee30:	2104      	movs	r1, #4
    ee32:	2200      	movs	r2, #0
    ee34:	2b02      	cmp	r3, #2
    ee36:	e9cd 6704 	strd	r6, r7, [sp, #16]
    ee3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    ee3e:	e9cd ab08 	strd	sl, fp, [sp, #32]
    ee42:	9102      	str	r1, [sp, #8]
    ee44:	920a      	str	r2, [sp, #40]	; 0x28
    ee46:	d003      	beq.n	ee50 <pow+0x104>
    ee48:	a802      	add	r0, sp, #8
    ee4a:	f000 ff09 	bl	fc60 <matherr>
    ee4e:	b968      	cbnz	r0, ee6c <pow+0x120>
    ee50:	f001 fcae 	bl	107b0 <__errno>
    ee54:	2322      	movs	r3, #34	; 0x22
    ee56:	6003      	str	r3, [r0, #0]
    ee58:	e008      	b.n	ee6c <pow+0x120>
    ee5a:	2300      	movs	r3, #0
    ee5c:	2400      	movs	r4, #0
    ee5e:	e9cd 3408 	strd	r3, r4, [sp, #32]
    ee62:	a802      	add	r0, sp, #8
    ee64:	f000 fefc 	bl	fc60 <matherr>
    ee68:	2800      	cmp	r0, #0
    ee6a:	d030      	beq.n	eece <pow+0x182>
    ee6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee6e:	b11b      	cbz	r3, ee78 <pow+0x12c>
    ee70:	f001 fc9e 	bl	107b0 <__errno>
    ee74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee76:	6003      	str	r3, [r0, #0]
    ee78:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    ee7c:	e9cd 3400 	strd	r3, r4, [sp]
    ee80:	e9dd 0100 	ldrd	r0, r1, [sp]
    ee84:	b00d      	add	sp, #52	; 0x34
    ee86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee8a:	4620      	mov	r0, r4
    ee8c:	4629      	mov	r1, r5
    ee8e:	f000 fee1 	bl	fc54 <finite>
    ee92:	2800      	cmp	r0, #0
    ee94:	d0a3      	beq.n	edde <pow+0x92>
    ee96:	2200      	movs	r2, #0
    ee98:	2300      	movs	r3, #0
    ee9a:	4620      	mov	r0, r4
    ee9c:	4629      	mov	r1, r5
    ee9e:	f001 fc23 	bl	106e8 <__aeabi_dcmplt>
    eea2:	2800      	cmp	r0, #0
    eea4:	d09b      	beq.n	edde <pow+0x92>
    eea6:	f999 3000 	ldrsb.w	r3, [r9]
    eeaa:	4a5f      	ldr	r2, [pc, #380]	; (f028 <pow+0x2dc>)
    eeac:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    eeb0:	2101      	movs	r1, #1
    eeb2:	e9cd 6704 	strd	r6, r7, [sp, #16]
    eeb6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    eeba:	9102      	str	r1, [sp, #8]
    eebc:	9203      	str	r2, [sp, #12]
    eebe:	2b00      	cmp	r3, #0
    eec0:	d0cb      	beq.n	ee5a <pow+0x10e>
    eec2:	495b      	ldr	r1, [pc, #364]	; (f030 <pow+0x2e4>)
    eec4:	2000      	movs	r0, #0
    eec6:	2b02      	cmp	r3, #2
    eec8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    eecc:	d1c9      	bne.n	ee62 <pow+0x116>
    eece:	f001 fc6f 	bl	107b0 <__errno>
    eed2:	2321      	movs	r3, #33	; 0x21
    eed4:	6003      	str	r3, [r0, #0]
    eed6:	e7c9      	b.n	ee6c <pow+0x120>
    eed8:	4620      	mov	r0, r4
    eeda:	4629      	mov	r1, r5
    eedc:	f001 fbfa 	bl	106d4 <__aeabi_dcmpeq>
    eee0:	2800      	cmp	r0, #0
    eee2:	f43f af7c 	beq.w	edde <pow+0x92>
    eee6:	4b51      	ldr	r3, [pc, #324]	; (f02c <pow+0x2e0>)
    eee8:	494f      	ldr	r1, [pc, #316]	; (f028 <pow+0x2dc>)
    eeea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    eeee:	2001      	movs	r0, #1
    eef0:	2200      	movs	r2, #0
    eef2:	f1b8 0f02 	cmp.w	r8, #2
    eef6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    eefa:	e9cd 4506 	strd	r4, r5, [sp, #24]
    eefe:	9002      	str	r0, [sp, #8]
    ef00:	9103      	str	r1, [sp, #12]
    ef02:	e9cd 2308 	strd	r2, r3, [sp, #32]
    ef06:	d1ac      	bne.n	ee62 <pow+0x116>
    ef08:	e9cd 2300 	strd	r2, r3, [sp]
    ef0c:	e767      	b.n	edde <pow+0x92>
    ef0e:	4630      	mov	r0, r6
    ef10:	4639      	mov	r1, r7
    ef12:	f000 fe9f 	bl	fc54 <finite>
    ef16:	2800      	cmp	r0, #0
    ef18:	f43f af6e 	beq.w	edf8 <pow+0xac>
    ef1c:	4620      	mov	r0, r4
    ef1e:	4629      	mov	r1, r5
    ef20:	f000 fe98 	bl	fc54 <finite>
    ef24:	2800      	cmp	r0, #0
    ef26:	f43f af67 	beq.w	edf8 <pow+0xac>
    ef2a:	e9dd 2300 	ldrd	r2, r3, [sp]
    ef2e:	4610      	mov	r0, r2
    ef30:	4619      	mov	r1, r3
    ef32:	f001 fc01 	bl	10738 <__aeabi_dcmpun>
    ef36:	2800      	cmp	r0, #0
    ef38:	d158      	bne.n	efec <pow+0x2a0>
    ef3a:	2303      	movs	r3, #3
    ef3c:	f999 8000 	ldrsb.w	r8, [r9]
    ef40:	9302      	str	r3, [sp, #8]
    ef42:	4b39      	ldr	r3, [pc, #228]	; (f028 <pow+0x2dc>)
    ef44:	900a      	str	r0, [sp, #40]	; 0x28
    ef46:	9303      	str	r3, [sp, #12]
    ef48:	e9cd 6704 	strd	r6, r7, [sp, #16]
    ef4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    ef50:	2200      	movs	r2, #0
    ef52:	2300      	movs	r3, #0
    ef54:	4630      	mov	r0, r6
    ef56:	4639      	mov	r1, r7
    ef58:	f1b8 0f00 	cmp.w	r8, #0
    ef5c:	d126      	bne.n	efac <pow+0x260>
    ef5e:	4f35      	ldr	r7, [pc, #212]	; (f034 <pow+0x2e8>)
    ef60:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    ef64:	e9cd 6708 	strd	r6, r7, [sp, #32]
    ef68:	f001 fbbe 	bl	106e8 <__aeabi_dcmplt>
    ef6c:	2800      	cmp	r0, #0
    ef6e:	f43f af6b 	beq.w	ee48 <pow+0xfc>
    ef72:	2200      	movs	r2, #0
    ef74:	4b30      	ldr	r3, [pc, #192]	; (f038 <pow+0x2ec>)
    ef76:	4620      	mov	r0, r4
    ef78:	4629      	mov	r1, r5
    ef7a:	f001 f943 	bl	10204 <__aeabi_dmul>
    ef7e:	4604      	mov	r4, r0
    ef80:	460d      	mov	r5, r1
    ef82:	f000 fe75 	bl	fc70 <rint>
    ef86:	4602      	mov	r2, r0
    ef88:	460b      	mov	r3, r1
    ef8a:	4620      	mov	r0, r4
    ef8c:	4629      	mov	r1, r5
    ef8e:	f001 fba1 	bl	106d4 <__aeabi_dcmpeq>
    ef92:	bb40      	cbnz	r0, efe6 <pow+0x29a>
    ef94:	4b29      	ldr	r3, [pc, #164]	; (f03c <pow+0x2f0>)
    ef96:	f999 8000 	ldrsb.w	r8, [r9]
    ef9a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ef9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    efa2:	f1b8 0f02 	cmp.w	r8, #2
    efa6:	f47f af4f 	bne.w	ee48 <pow+0xfc>
    efaa:	e751      	b.n	ee50 <pow+0x104>
    efac:	4f24      	ldr	r7, [pc, #144]	; (f040 <pow+0x2f4>)
    efae:	2600      	movs	r6, #0
    efb0:	e9cd 6708 	strd	r6, r7, [sp, #32]
    efb4:	f001 fb98 	bl	106e8 <__aeabi_dcmplt>
    efb8:	2800      	cmp	r0, #0
    efba:	d0f2      	beq.n	efa2 <pow+0x256>
    efbc:	2200      	movs	r2, #0
    efbe:	4b1e      	ldr	r3, [pc, #120]	; (f038 <pow+0x2ec>)
    efc0:	4620      	mov	r0, r4
    efc2:	4629      	mov	r1, r5
    efc4:	f001 f91e 	bl	10204 <__aeabi_dmul>
    efc8:	4604      	mov	r4, r0
    efca:	460d      	mov	r5, r1
    efcc:	f000 fe50 	bl	fc70 <rint>
    efd0:	4602      	mov	r2, r0
    efd2:	460b      	mov	r3, r1
    efd4:	4620      	mov	r0, r4
    efd6:	4629      	mov	r1, r5
    efd8:	f001 fb7c 	bl	106d4 <__aeabi_dcmpeq>
    efdc:	b918      	cbnz	r0, efe6 <pow+0x29a>
    efde:	4b14      	ldr	r3, [pc, #80]	; (f030 <pow+0x2e4>)
    efe0:	2200      	movs	r2, #0
    efe2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    efe6:	f999 8000 	ldrsb.w	r8, [r9]
    efea:	e7da      	b.n	efa2 <pow+0x256>
    efec:	f999 9000 	ldrsb.w	r9, [r9]
    eff0:	4b0d      	ldr	r3, [pc, #52]	; (f028 <pow+0x2dc>)
    eff2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    eff6:	2201      	movs	r2, #1
    eff8:	e9cd 6704 	strd	r6, r7, [sp, #16]
    effc:	e9cd 4506 	strd	r4, r5, [sp, #24]
    f000:	9202      	str	r2, [sp, #8]
    f002:	9303      	str	r3, [sp, #12]
    f004:	f1b9 0f00 	cmp.w	r9, #0
    f008:	f43f af27 	beq.w	ee5a <pow+0x10e>
    f00c:	2200      	movs	r2, #0
    f00e:	2300      	movs	r3, #0
    f010:	4610      	mov	r0, r2
    f012:	4619      	mov	r1, r3
    f014:	f001 fa20 	bl	10458 <__aeabi_ddiv>
    f018:	f1b9 0f02 	cmp.w	r9, #2
    f01c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f020:	f43f af55 	beq.w	eece <pow+0x182>
    f024:	e71d      	b.n	ee62 <pow+0x116>
    f026:	bf00      	nop
    f028:	00011d60 	.word	0x00011d60
    f02c:	3ff00000 	.word	0x3ff00000
    f030:	fff00000 	.word	0xfff00000
    f034:	47efffff 	.word	0x47efffff
    f038:	3fe00000 	.word	0x3fe00000
    f03c:	c7efffff 	.word	0xc7efffff
    f040:	7ff00000 	.word	0x7ff00000
    f044:	20000114 	.word	0x20000114

0000f048 <__ieee754_pow>:
    f048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f04c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    f050:	ea57 0402 	orrs.w	r4, r7, r2
    f054:	b093      	sub	sp, #76	; 0x4c
    f056:	d037      	beq.n	f0c8 <__ieee754_pow+0x80>
    f058:	4c67      	ldr	r4, [pc, #412]	; (f1f8 <__ieee754_pow+0x1b0>)
    f05a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    f05e:	42a6      	cmp	r6, r4
    f060:	4683      	mov	fp, r0
    f062:	460d      	mov	r5, r1
    f064:	dc29      	bgt.n	f0ba <__ieee754_pow+0x72>
    f066:	469a      	mov	sl, r3
    f068:	4696      	mov	lr, r2
    f06a:	d025      	beq.n	f0b8 <__ieee754_pow+0x70>
    f06c:	42a7      	cmp	r7, r4
    f06e:	dc24      	bgt.n	f0ba <__ieee754_pow+0x72>
    f070:	4c61      	ldr	r4, [pc, #388]	; (f1f8 <__ieee754_pow+0x1b0>)
    f072:	42a7      	cmp	r7, r4
    f074:	d079      	beq.n	f16a <__ieee754_pow+0x122>
    f076:	2d00      	cmp	r5, #0
    f078:	4689      	mov	r9, r1
    f07a:	4680      	mov	r8, r0
    f07c:	e9cd 2300 	strd	r2, r3, [sp]
    f080:	db77      	blt.n	f172 <__ieee754_pow+0x12a>
    f082:	2400      	movs	r4, #0
    f084:	f1be 0f00 	cmp.w	lr, #0
    f088:	d12c      	bne.n	f0e4 <__ieee754_pow+0x9c>
    f08a:	4b5b      	ldr	r3, [pc, #364]	; (f1f8 <__ieee754_pow+0x1b0>)
    f08c:	429f      	cmp	r7, r3
    f08e:	f000 808b 	beq.w	f1a8 <__ieee754_pow+0x160>
    f092:	4b5a      	ldr	r3, [pc, #360]	; (f1fc <__ieee754_pow+0x1b4>)
    f094:	429f      	cmp	r7, r3
    f096:	d061      	beq.n	f15c <__ieee754_pow+0x114>
    f098:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    f09c:	f000 83ba 	beq.w	f814 <__ieee754_pow+0x7cc>
    f0a0:	4b57      	ldr	r3, [pc, #348]	; (f200 <__ieee754_pow+0x1b8>)
    f0a2:	459a      	cmp	sl, r3
    f0a4:	d11e      	bne.n	f0e4 <__ieee754_pow+0x9c>
    f0a6:	2d00      	cmp	r5, #0
    f0a8:	db1c      	blt.n	f0e4 <__ieee754_pow+0x9c>
    f0aa:	4640      	mov	r0, r8
    f0ac:	4649      	mov	r1, r9
    f0ae:	b013      	add	sp, #76	; 0x4c
    f0b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0b4:	f000 bd0e 	b.w	fad4 <__ieee754_sqrt>
    f0b8:	b158      	cbz	r0, f0d2 <__ieee754_pow+0x8a>
    f0ba:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    f0be:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    f0c2:	ea56 030b 	orrs.w	r3, r6, fp
    f0c6:	d106      	bne.n	f0d6 <__ieee754_pow+0x8e>
    f0c8:	494c      	ldr	r1, [pc, #304]	; (f1fc <__ieee754_pow+0x1b4>)
    f0ca:	2000      	movs	r0, #0
    f0cc:	b013      	add	sp, #76	; 0x4c
    f0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0d2:	42b7      	cmp	r7, r6
    f0d4:	ddcc      	ble.n	f070 <__ieee754_pow+0x28>
    f0d6:	484b      	ldr	r0, [pc, #300]	; (f204 <__ieee754_pow+0x1bc>)
    f0d8:	b013      	add	sp, #76	; 0x4c
    f0da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0de:	f000 bdc1 	b.w	fc64 <nan>
    f0e2:	2400      	movs	r4, #0
    f0e4:	4640      	mov	r0, r8
    f0e6:	4649      	mov	r1, r9
    f0e8:	f000 fdb0 	bl	fc4c <fabs>
    f0ec:	f1bb 0f00 	cmp.w	fp, #0
    f0f0:	d119      	bne.n	f126 <__ieee754_pow+0xde>
    f0f2:	b126      	cbz	r6, f0fe <__ieee754_pow+0xb6>
    f0f4:	4b41      	ldr	r3, [pc, #260]	; (f1fc <__ieee754_pow+0x1b4>)
    f0f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    f0fa:	429a      	cmp	r2, r3
    f0fc:	d113      	bne.n	f126 <__ieee754_pow+0xde>
    f0fe:	f1ba 0f00 	cmp.w	sl, #0
    f102:	f2c0 83bc 	blt.w	f87e <__ieee754_pow+0x836>
    f106:	2d00      	cmp	r5, #0
    f108:	dae0      	bge.n	f0cc <__ieee754_pow+0x84>
    f10a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    f10e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    f112:	ea56 0304 	orrs.w	r3, r6, r4
    f116:	f000 848f 	beq.w	fa38 <__ieee754_pow+0x9f0>
    f11a:	2c01      	cmp	r4, #1
    f11c:	d1d6      	bne.n	f0cc <__ieee754_pow+0x84>
    f11e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    f122:	4619      	mov	r1, r3
    f124:	e7d2      	b.n	f0cc <__ieee754_pow+0x84>
    f126:	0fed      	lsrs	r5, r5, #31
    f128:	3d01      	subs	r5, #1
    f12a:	ea54 0305 	orrs.w	r3, r4, r5
    f12e:	d04e      	beq.n	f1ce <__ieee754_pow+0x186>
    f130:	4b35      	ldr	r3, [pc, #212]	; (f208 <__ieee754_pow+0x1c0>)
    f132:	429f      	cmp	r7, r3
    f134:	dd6e      	ble.n	f214 <__ieee754_pow+0x1cc>
    f136:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    f13a:	429f      	cmp	r7, r3
    f13c:	f340 83e8 	ble.w	f910 <__ieee754_pow+0x8c8>
    f140:	4b32      	ldr	r3, [pc, #200]	; (f20c <__ieee754_pow+0x1c4>)
    f142:	429e      	cmp	r6, r3
    f144:	dd4e      	ble.n	f1e4 <__ieee754_pow+0x19c>
    f146:	f1ba 0f00 	cmp.w	sl, #0
    f14a:	dd4e      	ble.n	f1ea <__ieee754_pow+0x1a2>
    f14c:	a328      	add	r3, pc, #160	; (adr r3, f1f0 <__ieee754_pow+0x1a8>)
    f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f152:	4610      	mov	r0, r2
    f154:	4619      	mov	r1, r3
    f156:	f001 f855 	bl	10204 <__aeabi_dmul>
    f15a:	e7b7      	b.n	f0cc <__ieee754_pow+0x84>
    f15c:	f1ba 0f00 	cmp.w	sl, #0
    f160:	f2c0 843c 	blt.w	f9dc <__ieee754_pow+0x994>
    f164:	4640      	mov	r0, r8
    f166:	4649      	mov	r1, r9
    f168:	e7b0      	b.n	f0cc <__ieee754_pow+0x84>
    f16a:	f1be 0f00 	cmp.w	lr, #0
    f16e:	d082      	beq.n	f076 <__ieee754_pow+0x2e>
    f170:	e7a3      	b.n	f0ba <__ieee754_pow+0x72>
    f172:	4b27      	ldr	r3, [pc, #156]	; (f210 <__ieee754_pow+0x1c8>)
    f174:	429f      	cmp	r7, r3
    f176:	dc28      	bgt.n	f1ca <__ieee754_pow+0x182>
    f178:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    f17c:	429f      	cmp	r7, r3
    f17e:	dd80      	ble.n	f082 <__ieee754_pow+0x3a>
    f180:	153b      	asrs	r3, r7, #20
    f182:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    f186:	2b14      	cmp	r3, #20
    f188:	f340 843e 	ble.w	fa08 <__ieee754_pow+0x9c0>
    f18c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    f190:	fa2e f203 	lsr.w	r2, lr, r3
    f194:	fa02 f303 	lsl.w	r3, r2, r3
    f198:	459e      	cmp	lr, r3
    f19a:	f47f af72 	bne.w	f082 <__ieee754_pow+0x3a>
    f19e:	f002 0201 	and.w	r2, r2, #1
    f1a2:	f1c2 0402 	rsb	r4, r2, #2
    f1a6:	e76d      	b.n	f084 <__ieee754_pow+0x3c>
    f1a8:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    f1ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    f1b0:	ea53 030b 	orrs.w	r3, r3, fp
    f1b4:	d088      	beq.n	f0c8 <__ieee754_pow+0x80>
    f1b6:	4b15      	ldr	r3, [pc, #84]	; (f20c <__ieee754_pow+0x1c4>)
    f1b8:	429e      	cmp	r6, r3
    f1ba:	f340 8332 	ble.w	f822 <__ieee754_pow+0x7da>
    f1be:	f1ba 0f00 	cmp.w	sl, #0
    f1c2:	db12      	blt.n	f1ea <__ieee754_pow+0x1a2>
    f1c4:	e9dd 0100 	ldrd	r0, r1, [sp]
    f1c8:	e780      	b.n	f0cc <__ieee754_pow+0x84>
    f1ca:	2402      	movs	r4, #2
    f1cc:	e75a      	b.n	f084 <__ieee754_pow+0x3c>
    f1ce:	4642      	mov	r2, r8
    f1d0:	464b      	mov	r3, r9
    f1d2:	4640      	mov	r0, r8
    f1d4:	4649      	mov	r1, r9
    f1d6:	f000 fe61 	bl	fe9c <__aeabi_dsub>
    f1da:	4602      	mov	r2, r0
    f1dc:	460b      	mov	r3, r1
    f1de:	f001 f93b 	bl	10458 <__aeabi_ddiv>
    f1e2:	e773      	b.n	f0cc <__ieee754_pow+0x84>
    f1e4:	f1ba 0f00 	cmp.w	sl, #0
    f1e8:	dbb0      	blt.n	f14c <__ieee754_pow+0x104>
    f1ea:	2000      	movs	r0, #0
    f1ec:	2100      	movs	r1, #0
    f1ee:	e76d      	b.n	f0cc <__ieee754_pow+0x84>
    f1f0:	8800759c 	.word	0x8800759c
    f1f4:	7e37e43c 	.word	0x7e37e43c
    f1f8:	7ff00000 	.word	0x7ff00000
    f1fc:	3ff00000 	.word	0x3ff00000
    f200:	3fe00000 	.word	0x3fe00000
    f204:	00011d64 	.word	0x00011d64
    f208:	41e00000 	.word	0x41e00000
    f20c:	3fefffff 	.word	0x3fefffff
    f210:	433fffff 	.word	0x433fffff
    f214:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    f218:	f04f 0200 	mov.w	r2, #0
    f21c:	da05      	bge.n	f22a <__ieee754_pow+0x1e2>
    f21e:	4bd4      	ldr	r3, [pc, #848]	; (f570 <__ieee754_pow+0x528>)
    f220:	f000 fff0 	bl	10204 <__aeabi_dmul>
    f224:	f06f 0234 	mvn.w	r2, #52	; 0x34
    f228:	460e      	mov	r6, r1
    f22a:	1533      	asrs	r3, r6, #20
    f22c:	4fd1      	ldr	r7, [pc, #836]	; (f574 <__ieee754_pow+0x52c>)
    f22e:	f3c6 0613 	ubfx	r6, r6, #0, #20
    f232:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    f236:	4413      	add	r3, r2
    f238:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    f23c:	42be      	cmp	r6, r7
    f23e:	461a      	mov	r2, r3
    f240:	930d      	str	r3, [sp, #52]	; 0x34
    f242:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    f246:	f340 8321 	ble.w	f88c <__ieee754_pow+0x844>
    f24a:	4bcb      	ldr	r3, [pc, #812]	; (f578 <__ieee754_pow+0x530>)
    f24c:	429e      	cmp	r6, r3
    f24e:	f340 83fd 	ble.w	fa4c <__ieee754_pow+0xa04>
    f252:	4613      	mov	r3, r2
    f254:	3301      	adds	r3, #1
    f256:	930d      	str	r3, [sp, #52]	; 0x34
    f258:	4bc8      	ldr	r3, [pc, #800]	; (f57c <__ieee754_pow+0x534>)
    f25a:	2200      	movs	r2, #0
    f25c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f260:	2700      	movs	r7, #0
    f262:	2600      	movs	r6, #0
    f264:	e9cd 6708 	strd	r6, r7, [sp, #32]
    f268:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    f26c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    f270:	2700      	movs	r7, #0
    f272:	4602      	mov	r2, r0
    f274:	4653      	mov	r3, sl
    f276:	4651      	mov	r1, sl
    f278:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    f27c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f280:	f000 fe0c 	bl	fe9c <__aeabi_dsub>
    f284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f288:	4680      	mov	r8, r0
    f28a:	4689      	mov	r9, r1
    f28c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    f290:	f000 fe06 	bl	fea0 <__adddf3>
    f294:	4602      	mov	r2, r0
    f296:	460b      	mov	r3, r1
    f298:	2000      	movs	r0, #0
    f29a:	49b8      	ldr	r1, [pc, #736]	; (f57c <__ieee754_pow+0x534>)
    f29c:	f001 f8dc 	bl	10458 <__aeabi_ddiv>
    f2a0:	460a      	mov	r2, r1
    f2a2:	4601      	mov	r1, r0
    f2a4:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    f2a8:	4613      	mov	r3, r2
    f2aa:	4649      	mov	r1, r9
    f2ac:	4602      	mov	r2, r0
    f2ae:	4640      	mov	r0, r8
    f2b0:	f000 ffa8 	bl	10204 <__aeabi_dmul>
    f2b4:	ea4f 036a 	mov.w	r3, sl, asr #1
    f2b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    f2bc:	468c      	mov	ip, r1
    f2be:	4683      	mov	fp, r0
    f2c0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    f2c4:	e9cd bc04 	strd	fp, ip, [sp, #16]
    f2c8:	46da      	mov	sl, fp
    f2ca:	468b      	mov	fp, r1
    f2cc:	19d9      	adds	r1, r3, r7
    f2ce:	2300      	movs	r3, #0
    f2d0:	e9cd ab02 	strd	sl, fp, [sp, #8]
    f2d4:	9302      	str	r3, [sp, #8]
    f2d6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    f2da:	2000      	movs	r0, #0
    f2dc:	4606      	mov	r6, r0
    f2de:	460f      	mov	r7, r1
    f2e0:	4602      	mov	r2, r0
    f2e2:	460b      	mov	r3, r1
    f2e4:	4650      	mov	r0, sl
    f2e6:	4659      	mov	r1, fp
    f2e8:	f000 ff8c 	bl	10204 <__aeabi_dmul>
    f2ec:	4602      	mov	r2, r0
    f2ee:	460b      	mov	r3, r1
    f2f0:	4640      	mov	r0, r8
    f2f2:	4649      	mov	r1, r9
    f2f4:	f000 fdd2 	bl	fe9c <__aeabi_dsub>
    f2f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f2fc:	4680      	mov	r8, r0
    f2fe:	4689      	mov	r9, r1
    f300:	4630      	mov	r0, r6
    f302:	4639      	mov	r1, r7
    f304:	f000 fdca 	bl	fe9c <__aeabi_dsub>
    f308:	4602      	mov	r2, r0
    f30a:	460b      	mov	r3, r1
    f30c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    f310:	f000 fdc4 	bl	fe9c <__aeabi_dsub>
    f314:	4652      	mov	r2, sl
    f316:	465b      	mov	r3, fp
    f318:	f000 ff74 	bl	10204 <__aeabi_dmul>
    f31c:	4602      	mov	r2, r0
    f31e:	460b      	mov	r3, r1
    f320:	4640      	mov	r0, r8
    f322:	4649      	mov	r1, r9
    f324:	f000 fdba 	bl	fe9c <__aeabi_dsub>
    f328:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    f32c:	f000 ff6a 	bl	10204 <__aeabi_dmul>
    f330:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f334:	e9cd 0106 	strd	r0, r1, [sp, #24]
    f338:	4632      	mov	r2, r6
    f33a:	463b      	mov	r3, r7
    f33c:	4630      	mov	r0, r6
    f33e:	4639      	mov	r1, r7
    f340:	f000 ff60 	bl	10204 <__aeabi_dmul>
    f344:	a378      	add	r3, pc, #480	; (adr r3, f528 <__ieee754_pow+0x4e0>)
    f346:	e9d3 2300 	ldrd	r2, r3, [r3]
    f34a:	4606      	mov	r6, r0
    f34c:	460f      	mov	r7, r1
    f34e:	f000 ff59 	bl	10204 <__aeabi_dmul>
    f352:	a377      	add	r3, pc, #476	; (adr r3, f530 <__ieee754_pow+0x4e8>)
    f354:	e9d3 2300 	ldrd	r2, r3, [r3]
    f358:	f000 fda2 	bl	fea0 <__adddf3>
    f35c:	4632      	mov	r2, r6
    f35e:	463b      	mov	r3, r7
    f360:	f000 ff50 	bl	10204 <__aeabi_dmul>
    f364:	a374      	add	r3, pc, #464	; (adr r3, f538 <__ieee754_pow+0x4f0>)
    f366:	e9d3 2300 	ldrd	r2, r3, [r3]
    f36a:	f000 fd99 	bl	fea0 <__adddf3>
    f36e:	4632      	mov	r2, r6
    f370:	463b      	mov	r3, r7
    f372:	f000 ff47 	bl	10204 <__aeabi_dmul>
    f376:	a372      	add	r3, pc, #456	; (adr r3, f540 <__ieee754_pow+0x4f8>)
    f378:	e9d3 2300 	ldrd	r2, r3, [r3]
    f37c:	f000 fd90 	bl	fea0 <__adddf3>
    f380:	4632      	mov	r2, r6
    f382:	463b      	mov	r3, r7
    f384:	f000 ff3e 	bl	10204 <__aeabi_dmul>
    f388:	a36f      	add	r3, pc, #444	; (adr r3, f548 <__ieee754_pow+0x500>)
    f38a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f38e:	f000 fd87 	bl	fea0 <__adddf3>
    f392:	4632      	mov	r2, r6
    f394:	463b      	mov	r3, r7
    f396:	f000 ff35 	bl	10204 <__aeabi_dmul>
    f39a:	a36d      	add	r3, pc, #436	; (adr r3, f550 <__ieee754_pow+0x508>)
    f39c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3a0:	f000 fd7e 	bl	fea0 <__adddf3>
    f3a4:	4632      	mov	r2, r6
    f3a6:	4680      	mov	r8, r0
    f3a8:	4689      	mov	r9, r1
    f3aa:	463b      	mov	r3, r7
    f3ac:	4630      	mov	r0, r6
    f3ae:	4639      	mov	r1, r7
    f3b0:	f000 ff28 	bl	10204 <__aeabi_dmul>
    f3b4:	4602      	mov	r2, r0
    f3b6:	460b      	mov	r3, r1
    f3b8:	4640      	mov	r0, r8
    f3ba:	4649      	mov	r1, r9
    f3bc:	f000 ff22 	bl	10204 <__aeabi_dmul>
    f3c0:	4652      	mov	r2, sl
    f3c2:	4606      	mov	r6, r0
    f3c4:	460f      	mov	r7, r1
    f3c6:	465b      	mov	r3, fp
    f3c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f3cc:	f000 fd68 	bl	fea0 <__adddf3>
    f3d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f3d4:	f000 ff16 	bl	10204 <__aeabi_dmul>
    f3d8:	4632      	mov	r2, r6
    f3da:	463b      	mov	r3, r7
    f3dc:	f000 fd60 	bl	fea0 <__adddf3>
    f3e0:	4652      	mov	r2, sl
    f3e2:	4680      	mov	r8, r0
    f3e4:	4689      	mov	r9, r1
    f3e6:	465b      	mov	r3, fp
    f3e8:	4650      	mov	r0, sl
    f3ea:	4659      	mov	r1, fp
    f3ec:	f000 ff0a 	bl	10204 <__aeabi_dmul>
    f3f0:	2200      	movs	r2, #0
    f3f2:	4b63      	ldr	r3, [pc, #396]	; (f580 <__ieee754_pow+0x538>)
    f3f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    f3f8:	f000 fd52 	bl	fea0 <__adddf3>
    f3fc:	4642      	mov	r2, r8
    f3fe:	464b      	mov	r3, r9
    f400:	f000 fd4e 	bl	fea0 <__adddf3>
    f404:	9802      	ldr	r0, [sp, #8]
    f406:	460f      	mov	r7, r1
    f408:	4606      	mov	r6, r0
    f40a:	4632      	mov	r2, r6
    f40c:	463b      	mov	r3, r7
    f40e:	4650      	mov	r0, sl
    f410:	4659      	mov	r1, fp
    f412:	f000 fef7 	bl	10204 <__aeabi_dmul>
    f416:	2200      	movs	r2, #0
    f418:	4682      	mov	sl, r0
    f41a:	468b      	mov	fp, r1
    f41c:	4b58      	ldr	r3, [pc, #352]	; (f580 <__ieee754_pow+0x538>)
    f41e:	4630      	mov	r0, r6
    f420:	4639      	mov	r1, r7
    f422:	f000 fd3b 	bl	fe9c <__aeabi_dsub>
    f426:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    f42a:	f000 fd37 	bl	fe9c <__aeabi_dsub>
    f42e:	4602      	mov	r2, r0
    f430:	460b      	mov	r3, r1
    f432:	4640      	mov	r0, r8
    f434:	4649      	mov	r1, r9
    f436:	f000 fd31 	bl	fe9c <__aeabi_dsub>
    f43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f43e:	f000 fee1 	bl	10204 <__aeabi_dmul>
    f442:	4632      	mov	r2, r6
    f444:	4680      	mov	r8, r0
    f446:	4689      	mov	r9, r1
    f448:	463b      	mov	r3, r7
    f44a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f44e:	f000 fed9 	bl	10204 <__aeabi_dmul>
    f452:	4602      	mov	r2, r0
    f454:	460b      	mov	r3, r1
    f456:	4640      	mov	r0, r8
    f458:	4649      	mov	r1, r9
    f45a:	f000 fd21 	bl	fea0 <__adddf3>
    f45e:	4680      	mov	r8, r0
    f460:	4689      	mov	r9, r1
    f462:	4602      	mov	r2, r0
    f464:	460b      	mov	r3, r1
    f466:	4650      	mov	r0, sl
    f468:	4659      	mov	r1, fp
    f46a:	e9cd ab04 	strd	sl, fp, [sp, #16]
    f46e:	f000 fd17 	bl	fea0 <__adddf3>
    f472:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    f476:	a338      	add	r3, pc, #224	; (adr r3, f558 <__ieee754_pow+0x510>)
    f478:	e9d3 2300 	ldrd	r2, r3, [r3]
    f47c:	4650      	mov	r0, sl
    f47e:	460f      	mov	r7, r1
    f480:	f000 fec0 	bl	10204 <__aeabi_dmul>
    f484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f488:	e9cd 0102 	strd	r0, r1, [sp, #8]
    f48c:	4639      	mov	r1, r7
    f48e:	4650      	mov	r0, sl
    f490:	f000 fd04 	bl	fe9c <__aeabi_dsub>
    f494:	4602      	mov	r2, r0
    f496:	460b      	mov	r3, r1
    f498:	4640      	mov	r0, r8
    f49a:	4649      	mov	r1, r9
    f49c:	f000 fcfe 	bl	fe9c <__aeabi_dsub>
    f4a0:	a32f      	add	r3, pc, #188	; (adr r3, f560 <__ieee754_pow+0x518>)
    f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4a6:	f000 fead 	bl	10204 <__aeabi_dmul>
    f4aa:	a32f      	add	r3, pc, #188	; (adr r3, f568 <__ieee754_pow+0x520>)
    f4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4b0:	4680      	mov	r8, r0
    f4b2:	4689      	mov	r9, r1
    f4b4:	4650      	mov	r0, sl
    f4b6:	4639      	mov	r1, r7
    f4b8:	f000 fea4 	bl	10204 <__aeabi_dmul>
    f4bc:	4602      	mov	r2, r0
    f4be:	460b      	mov	r3, r1
    f4c0:	4640      	mov	r0, r8
    f4c2:	4649      	mov	r1, r9
    f4c4:	f000 fcec 	bl	fea0 <__adddf3>
    f4c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    f4cc:	f000 fce8 	bl	fea0 <__adddf3>
    f4d0:	4680      	mov	r8, r0
    f4d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    f4d4:	4689      	mov	r9, r1
    f4d6:	f000 fe2f 	bl	10138 <__aeabi_i2d>
    f4da:	4642      	mov	r2, r8
    f4dc:	4606      	mov	r6, r0
    f4de:	460f      	mov	r7, r1
    f4e0:	464b      	mov	r3, r9
    f4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f4e6:	f000 fcdb 	bl	fea0 <__adddf3>
    f4ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f4ee:	f000 fcd7 	bl	fea0 <__adddf3>
    f4f2:	4632      	mov	r2, r6
    f4f4:	463b      	mov	r3, r7
    f4f6:	f000 fcd3 	bl	fea0 <__adddf3>
    f4fa:	4632      	mov	r2, r6
    f4fc:	463b      	mov	r3, r7
    f4fe:	4650      	mov	r0, sl
    f500:	468b      	mov	fp, r1
    f502:	f000 fccb 	bl	fe9c <__aeabi_dsub>
    f506:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f50a:	f000 fcc7 	bl	fe9c <__aeabi_dsub>
    f50e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f512:	f000 fcc3 	bl	fe9c <__aeabi_dsub>
    f516:	4602      	mov	r2, r0
    f518:	460b      	mov	r3, r1
    f51a:	4640      	mov	r0, r8
    f51c:	4649      	mov	r1, r9
    f51e:	f000 fcbd 	bl	fe9c <__aeabi_dsub>
    f522:	4680      	mov	r8, r0
    f524:	e02e      	b.n	f584 <__ieee754_pow+0x53c>
    f526:	bf00      	nop
    f528:	4a454eef 	.word	0x4a454eef
    f52c:	3fca7e28 	.word	0x3fca7e28
    f530:	93c9db65 	.word	0x93c9db65
    f534:	3fcd864a 	.word	0x3fcd864a
    f538:	a91d4101 	.word	0xa91d4101
    f53c:	3fd17460 	.word	0x3fd17460
    f540:	518f264d 	.word	0x518f264d
    f544:	3fd55555 	.word	0x3fd55555
    f548:	db6fabff 	.word	0xdb6fabff
    f54c:	3fdb6db6 	.word	0x3fdb6db6
    f550:	33333303 	.word	0x33333303
    f554:	3fe33333 	.word	0x3fe33333
    f558:	e0000000 	.word	0xe0000000
    f55c:	3feec709 	.word	0x3feec709
    f560:	dc3a03fd 	.word	0xdc3a03fd
    f564:	3feec709 	.word	0x3feec709
    f568:	145b01f5 	.word	0x145b01f5
    f56c:	be3e2fe0 	.word	0xbe3e2fe0
    f570:	43400000 	.word	0x43400000
    f574:	0003988e 	.word	0x0003988e
    f578:	000bb679 	.word	0x000bb679
    f57c:	3ff00000 	.word	0x3ff00000
    f580:	40080000 	.word	0x40080000
    f584:	4689      	mov	r9, r1
    f586:	3c01      	subs	r4, #1
    f588:	ea54 0305 	orrs.w	r3, r4, r5
    f58c:	e9dd 0100 	ldrd	r0, r1, [sp]
    f590:	bf14      	ite	ne
    f592:	4cd9      	ldrne	r4, [pc, #868]	; (f8f8 <__ieee754_pow+0x8b0>)
    f594:	4cd9      	ldreq	r4, [pc, #868]	; (f8fc <__ieee754_pow+0x8b4>)
    f596:	2300      	movs	r3, #0
    f598:	e9cd 3404 	strd	r3, r4, [sp, #16]
    f59c:	4603      	mov	r3, r0
    f59e:	460c      	mov	r4, r1
    f5a0:	e9cd 3402 	strd	r3, r4, [sp, #8]
    f5a4:	2300      	movs	r3, #0
    f5a6:	9302      	str	r3, [sp, #8]
    f5a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f5ac:	4622      	mov	r2, r4
    f5ae:	462b      	mov	r3, r5
    f5b0:	f000 fc74 	bl	fe9c <__aeabi_dsub>
    f5b4:	4652      	mov	r2, sl
    f5b6:	465b      	mov	r3, fp
    f5b8:	f000 fe24 	bl	10204 <__aeabi_dmul>
    f5bc:	e9dd 2300 	ldrd	r2, r3, [sp]
    f5c0:	4606      	mov	r6, r0
    f5c2:	460f      	mov	r7, r1
    f5c4:	4640      	mov	r0, r8
    f5c6:	4649      	mov	r1, r9
    f5c8:	f000 fe1c 	bl	10204 <__aeabi_dmul>
    f5cc:	4602      	mov	r2, r0
    f5ce:	460b      	mov	r3, r1
    f5d0:	4630      	mov	r0, r6
    f5d2:	4639      	mov	r1, r7
    f5d4:	f000 fc64 	bl	fea0 <__adddf3>
    f5d8:	4622      	mov	r2, r4
    f5da:	4680      	mov	r8, r0
    f5dc:	4689      	mov	r9, r1
    f5de:	462b      	mov	r3, r5
    f5e0:	4650      	mov	r0, sl
    f5e2:	4659      	mov	r1, fp
    f5e4:	e9cd 8900 	strd	r8, r9, [sp]
    f5e8:	f000 fe0c 	bl	10204 <__aeabi_dmul>
    f5ec:	460b      	mov	r3, r1
    f5ee:	4602      	mov	r2, r0
    f5f0:	4606      	mov	r6, r0
    f5f2:	460f      	mov	r7, r1
    f5f4:	4640      	mov	r0, r8
    f5f6:	4649      	mov	r1, r9
    f5f8:	f000 fc52 	bl	fea0 <__adddf3>
    f5fc:	4bc0      	ldr	r3, [pc, #768]	; (f900 <__ieee754_pow+0x8b8>)
    f5fe:	4299      	cmp	r1, r3
    f600:	4604      	mov	r4, r0
    f602:	460d      	mov	r5, r1
    f604:	468a      	mov	sl, r1
    f606:	f340 8116 	ble.w	f836 <__ieee754_pow+0x7ee>
    f60a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    f60e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    f612:	4303      	orrs	r3, r0
    f614:	f040 81ea 	bne.w	f9ec <__ieee754_pow+0x9a4>
    f618:	a3a3      	add	r3, pc, #652	; (adr r3, f8a8 <__ieee754_pow+0x860>)
    f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f61e:	e9dd 0100 	ldrd	r0, r1, [sp]
    f622:	f000 fc3d 	bl	fea0 <__adddf3>
    f626:	4632      	mov	r2, r6
    f628:	4680      	mov	r8, r0
    f62a:	4689      	mov	r9, r1
    f62c:	463b      	mov	r3, r7
    f62e:	4620      	mov	r0, r4
    f630:	4629      	mov	r1, r5
    f632:	f000 fc33 	bl	fe9c <__aeabi_dsub>
    f636:	4602      	mov	r2, r0
    f638:	460b      	mov	r3, r1
    f63a:	4640      	mov	r0, r8
    f63c:	4649      	mov	r1, r9
    f63e:	f001 f871 	bl	10724 <__aeabi_dcmpgt>
    f642:	2800      	cmp	r0, #0
    f644:	f040 81d2 	bne.w	f9ec <__ieee754_pow+0x9a4>
    f648:	46a8      	mov	r8, r5
    f64a:	ea4f 5328 	mov.w	r3, r8, asr #20
    f64e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    f652:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    f656:	fa42 f303 	asr.w	r3, r2, r3
    f65a:	4453      	add	r3, sl
    f65c:	f3c3 520a 	ubfx	r2, r3, #20, #11
    f660:	4da8      	ldr	r5, [pc, #672]	; (f904 <__ieee754_pow+0x8bc>)
    f662:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    f666:	4115      	asrs	r5, r2
    f668:	f3c3 0413 	ubfx	r4, r3, #0, #20
    f66c:	ea23 0105 	bic.w	r1, r3, r5
    f670:	2000      	movs	r0, #0
    f672:	f1c2 0b14 	rsb	fp, r2, #20
    f676:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    f67a:	f1ba 0f00 	cmp.w	sl, #0
    f67e:	4602      	mov	r2, r0
    f680:	460b      	mov	r3, r1
    f682:	fa44 fb0b 	asr.w	fp, r4, fp
    f686:	4630      	mov	r0, r6
    f688:	4639      	mov	r1, r7
    f68a:	bfb8      	it	lt
    f68c:	f1cb 0b00 	rsblt	fp, fp, #0
    f690:	f000 fc04 	bl	fe9c <__aeabi_dsub>
    f694:	4602      	mov	r2, r0
    f696:	460b      	mov	r3, r1
    f698:	4606      	mov	r6, r0
    f69a:	460f      	mov	r7, r1
    f69c:	e9dd 0100 	ldrd	r0, r1, [sp]
    f6a0:	f000 fbfe 	bl	fea0 <__adddf3>
    f6a4:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    f6a8:	460d      	mov	r5, r1
    f6aa:	2400      	movs	r4, #0
    f6ac:	a380      	add	r3, pc, #512	; (adr r3, f8b0 <__ieee754_pow+0x868>)
    f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    f6b2:	4620      	mov	r0, r4
    f6b4:	4629      	mov	r1, r5
    f6b6:	f000 fda5 	bl	10204 <__aeabi_dmul>
    f6ba:	4632      	mov	r2, r6
    f6bc:	4680      	mov	r8, r0
    f6be:	4689      	mov	r9, r1
    f6c0:	463b      	mov	r3, r7
    f6c2:	4620      	mov	r0, r4
    f6c4:	4629      	mov	r1, r5
    f6c6:	f000 fbe9 	bl	fe9c <__aeabi_dsub>
    f6ca:	4602      	mov	r2, r0
    f6cc:	460b      	mov	r3, r1
    f6ce:	e9dd 0100 	ldrd	r0, r1, [sp]
    f6d2:	f000 fbe3 	bl	fe9c <__aeabi_dsub>
    f6d6:	a378      	add	r3, pc, #480	; (adr r3, f8b8 <__ieee754_pow+0x870>)
    f6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f6dc:	f000 fd92 	bl	10204 <__aeabi_dmul>
    f6e0:	a377      	add	r3, pc, #476	; (adr r3, f8c0 <__ieee754_pow+0x878>)
    f6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f6e6:	4606      	mov	r6, r0
    f6e8:	460f      	mov	r7, r1
    f6ea:	4620      	mov	r0, r4
    f6ec:	4629      	mov	r1, r5
    f6ee:	f000 fd89 	bl	10204 <__aeabi_dmul>
    f6f2:	4602      	mov	r2, r0
    f6f4:	460b      	mov	r3, r1
    f6f6:	4630      	mov	r0, r6
    f6f8:	4639      	mov	r1, r7
    f6fa:	f000 fbd1 	bl	fea0 <__adddf3>
    f6fe:	4606      	mov	r6, r0
    f700:	460f      	mov	r7, r1
    f702:	4602      	mov	r2, r0
    f704:	460b      	mov	r3, r1
    f706:	4640      	mov	r0, r8
    f708:	4649      	mov	r1, r9
    f70a:	f000 fbc9 	bl	fea0 <__adddf3>
    f70e:	4642      	mov	r2, r8
    f710:	464b      	mov	r3, r9
    f712:	4604      	mov	r4, r0
    f714:	460d      	mov	r5, r1
    f716:	f000 fbc1 	bl	fe9c <__aeabi_dsub>
    f71a:	4602      	mov	r2, r0
    f71c:	460b      	mov	r3, r1
    f71e:	4630      	mov	r0, r6
    f720:	4639      	mov	r1, r7
    f722:	f000 fbbb 	bl	fe9c <__aeabi_dsub>
    f726:	4622      	mov	r2, r4
    f728:	4680      	mov	r8, r0
    f72a:	4689      	mov	r9, r1
    f72c:	462b      	mov	r3, r5
    f72e:	4620      	mov	r0, r4
    f730:	4629      	mov	r1, r5
    f732:	f000 fd67 	bl	10204 <__aeabi_dmul>
    f736:	a364      	add	r3, pc, #400	; (adr r3, f8c8 <__ieee754_pow+0x880>)
    f738:	e9d3 2300 	ldrd	r2, r3, [r3]
    f73c:	4606      	mov	r6, r0
    f73e:	460f      	mov	r7, r1
    f740:	f000 fd60 	bl	10204 <__aeabi_dmul>
    f744:	a362      	add	r3, pc, #392	; (adr r3, f8d0 <__ieee754_pow+0x888>)
    f746:	e9d3 2300 	ldrd	r2, r3, [r3]
    f74a:	f000 fba7 	bl	fe9c <__aeabi_dsub>
    f74e:	4632      	mov	r2, r6
    f750:	463b      	mov	r3, r7
    f752:	f000 fd57 	bl	10204 <__aeabi_dmul>
    f756:	a360      	add	r3, pc, #384	; (adr r3, f8d8 <__ieee754_pow+0x890>)
    f758:	e9d3 2300 	ldrd	r2, r3, [r3]
    f75c:	f000 fba0 	bl	fea0 <__adddf3>
    f760:	4632      	mov	r2, r6
    f762:	463b      	mov	r3, r7
    f764:	f000 fd4e 	bl	10204 <__aeabi_dmul>
    f768:	a35d      	add	r3, pc, #372	; (adr r3, f8e0 <__ieee754_pow+0x898>)
    f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f76e:	f000 fb95 	bl	fe9c <__aeabi_dsub>
    f772:	4632      	mov	r2, r6
    f774:	463b      	mov	r3, r7
    f776:	f000 fd45 	bl	10204 <__aeabi_dmul>
    f77a:	a35b      	add	r3, pc, #364	; (adr r3, f8e8 <__ieee754_pow+0x8a0>)
    f77c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f780:	f000 fb8e 	bl	fea0 <__adddf3>
    f784:	4632      	mov	r2, r6
    f786:	463b      	mov	r3, r7
    f788:	f000 fd3c 	bl	10204 <__aeabi_dmul>
    f78c:	4602      	mov	r2, r0
    f78e:	460b      	mov	r3, r1
    f790:	4620      	mov	r0, r4
    f792:	4629      	mov	r1, r5
    f794:	f000 fb82 	bl	fe9c <__aeabi_dsub>
    f798:	4606      	mov	r6, r0
    f79a:	460f      	mov	r7, r1
    f79c:	4602      	mov	r2, r0
    f79e:	460b      	mov	r3, r1
    f7a0:	4620      	mov	r0, r4
    f7a2:	4629      	mov	r1, r5
    f7a4:	f000 fd2e 	bl	10204 <__aeabi_dmul>
    f7a8:	2200      	movs	r2, #0
    f7aa:	e9cd 0100 	strd	r0, r1, [sp]
    f7ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f7b2:	4630      	mov	r0, r6
    f7b4:	4639      	mov	r1, r7
    f7b6:	f000 fb71 	bl	fe9c <__aeabi_dsub>
    f7ba:	4602      	mov	r2, r0
    f7bc:	460b      	mov	r3, r1
    f7be:	e9dd 0100 	ldrd	r0, r1, [sp]
    f7c2:	f000 fe49 	bl	10458 <__aeabi_ddiv>
    f7c6:	4642      	mov	r2, r8
    f7c8:	4606      	mov	r6, r0
    f7ca:	460f      	mov	r7, r1
    f7cc:	464b      	mov	r3, r9
    f7ce:	4620      	mov	r0, r4
    f7d0:	4629      	mov	r1, r5
    f7d2:	f000 fd17 	bl	10204 <__aeabi_dmul>
    f7d6:	4642      	mov	r2, r8
    f7d8:	464b      	mov	r3, r9
    f7da:	f000 fb61 	bl	fea0 <__adddf3>
    f7de:	4602      	mov	r2, r0
    f7e0:	460b      	mov	r3, r1
    f7e2:	4630      	mov	r0, r6
    f7e4:	4639      	mov	r1, r7
    f7e6:	f000 fb59 	bl	fe9c <__aeabi_dsub>
    f7ea:	4622      	mov	r2, r4
    f7ec:	462b      	mov	r3, r5
    f7ee:	f000 fb55 	bl	fe9c <__aeabi_dsub>
    f7f2:	4602      	mov	r2, r0
    f7f4:	460b      	mov	r3, r1
    f7f6:	2000      	movs	r0, #0
    f7f8:	493f      	ldr	r1, [pc, #252]	; (f8f8 <__ieee754_pow+0x8b0>)
    f7fa:	f000 fb4f 	bl	fe9c <__aeabi_dsub>
    f7fe:	448a      	add	sl, r1
    f800:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    f804:	f2c0 8133 	blt.w	fa6e <__ieee754_pow+0xa26>
    f808:	4651      	mov	r1, sl
    f80a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f80e:	f000 fcf9 	bl	10204 <__aeabi_dmul>
    f812:	e45b      	b.n	f0cc <__ieee754_pow+0x84>
    f814:	4642      	mov	r2, r8
    f816:	4640      	mov	r0, r8
    f818:	464b      	mov	r3, r9
    f81a:	4649      	mov	r1, r9
    f81c:	f000 fcf2 	bl	10204 <__aeabi_dmul>
    f820:	e454      	b.n	f0cc <__ieee754_pow+0x84>
    f822:	f1ba 0f00 	cmp.w	sl, #0
    f826:	f6bf ace0 	bge.w	f1ea <__ieee754_pow+0x1a2>
    f82a:	e9dd 3400 	ldrd	r3, r4, [sp]
    f82e:	4618      	mov	r0, r3
    f830:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    f834:	e44a      	b.n	f0cc <__ieee754_pow+0x84>
    f836:	4b34      	ldr	r3, [pc, #208]	; (f908 <__ieee754_pow+0x8c0>)
    f838:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    f83c:	4598      	cmp	r8, r3
    f83e:	f340 80f2 	ble.w	fa26 <__ieee754_pow+0x9de>
    f842:	4b32      	ldr	r3, [pc, #200]	; (f90c <__ieee754_pow+0x8c4>)
    f844:	440b      	add	r3, r1
    f846:	4303      	orrs	r3, r0
    f848:	d10c      	bne.n	f864 <__ieee754_pow+0x81c>
    f84a:	4632      	mov	r2, r6
    f84c:	463b      	mov	r3, r7
    f84e:	f000 fb25 	bl	fe9c <__aeabi_dsub>
    f852:	4602      	mov	r2, r0
    f854:	460b      	mov	r3, r1
    f856:	e9dd 0100 	ldrd	r0, r1, [sp]
    f85a:	f000 ff4f 	bl	106fc <__aeabi_dcmple>
    f85e:	2800      	cmp	r0, #0
    f860:	f43f aef3 	beq.w	f64a <__ieee754_pow+0x602>
    f864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f868:	a321      	add	r3, pc, #132	; (adr r3, f8f0 <__ieee754_pow+0x8a8>)
    f86a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f86e:	f000 fcc9 	bl	10204 <__aeabi_dmul>
    f872:	a31f      	add	r3, pc, #124	; (adr r3, f8f0 <__ieee754_pow+0x8a8>)
    f874:	e9d3 2300 	ldrd	r2, r3, [r3]
    f878:	f000 fcc4 	bl	10204 <__aeabi_dmul>
    f87c:	e426      	b.n	f0cc <__ieee754_pow+0x84>
    f87e:	4602      	mov	r2, r0
    f880:	460b      	mov	r3, r1
    f882:	2000      	movs	r0, #0
    f884:	491c      	ldr	r1, [pc, #112]	; (f8f8 <__ieee754_pow+0x8b0>)
    f886:	f000 fde7 	bl	10458 <__aeabi_ddiv>
    f88a:	e43c      	b.n	f106 <__ieee754_pow+0xbe>
    f88c:	2200      	movs	r2, #0
    f88e:	2300      	movs	r3, #0
    f890:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f894:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    f898:	4b17      	ldr	r3, [pc, #92]	; (f8f8 <__ieee754_pow+0x8b0>)
    f89a:	2200      	movs	r2, #0
    f89c:	2700      	movs	r7, #0
    f89e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f8a2:	e4e6      	b.n	f272 <__ieee754_pow+0x22a>
    f8a4:	f3af 8000 	nop.w
    f8a8:	652b82fe 	.word	0x652b82fe
    f8ac:	3c971547 	.word	0x3c971547
    f8b0:	00000000 	.word	0x00000000
    f8b4:	3fe62e43 	.word	0x3fe62e43
    f8b8:	fefa39ef 	.word	0xfefa39ef
    f8bc:	3fe62e42 	.word	0x3fe62e42
    f8c0:	0ca86c39 	.word	0x0ca86c39
    f8c4:	be205c61 	.word	0xbe205c61
    f8c8:	72bea4d0 	.word	0x72bea4d0
    f8cc:	3e663769 	.word	0x3e663769
    f8d0:	c5d26bf1 	.word	0xc5d26bf1
    f8d4:	3ebbbd41 	.word	0x3ebbbd41
    f8d8:	af25de2c 	.word	0xaf25de2c
    f8dc:	3f11566a 	.word	0x3f11566a
    f8e0:	16bebd93 	.word	0x16bebd93
    f8e4:	3f66c16c 	.word	0x3f66c16c
    f8e8:	5555553e 	.word	0x5555553e
    f8ec:	3fc55555 	.word	0x3fc55555
    f8f0:	c2f8f359 	.word	0xc2f8f359
    f8f4:	01a56e1f 	.word	0x01a56e1f
    f8f8:	3ff00000 	.word	0x3ff00000
    f8fc:	bff00000 	.word	0xbff00000
    f900:	408fffff 	.word	0x408fffff
    f904:	000fffff 	.word	0x000fffff
    f908:	4090cbff 	.word	0x4090cbff
    f90c:	3f6f3400 	.word	0x3f6f3400
    f910:	4b6b      	ldr	r3, [pc, #428]	; (fac0 <__ieee754_pow+0xa78>)
    f912:	429e      	cmp	r6, r3
    f914:	f77f ac66 	ble.w	f1e4 <__ieee754_pow+0x19c>
    f918:	4b6a      	ldr	r3, [pc, #424]	; (fac4 <__ieee754_pow+0xa7c>)
    f91a:	429e      	cmp	r6, r3
    f91c:	f73f ac13 	bgt.w	f146 <__ieee754_pow+0xfe>
    f920:	2200      	movs	r2, #0
    f922:	4b68      	ldr	r3, [pc, #416]	; (fac4 <__ieee754_pow+0xa7c>)
    f924:	f000 faba 	bl	fe9c <__aeabi_dsub>
    f928:	a357      	add	r3, pc, #348	; (adr r3, fa88 <__ieee754_pow+0xa40>)
    f92a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f92e:	4606      	mov	r6, r0
    f930:	460f      	mov	r7, r1
    f932:	f000 fc67 	bl	10204 <__aeabi_dmul>
    f936:	a356      	add	r3, pc, #344	; (adr r3, fa90 <__ieee754_pow+0xa48>)
    f938:	e9d3 2300 	ldrd	r2, r3, [r3]
    f93c:	4680      	mov	r8, r0
    f93e:	4689      	mov	r9, r1
    f940:	4630      	mov	r0, r6
    f942:	4639      	mov	r1, r7
    f944:	f000 fc5e 	bl	10204 <__aeabi_dmul>
    f948:	2200      	movs	r2, #0
    f94a:	4682      	mov	sl, r0
    f94c:	468b      	mov	fp, r1
    f94e:	4b5e      	ldr	r3, [pc, #376]	; (fac8 <__ieee754_pow+0xa80>)
    f950:	4630      	mov	r0, r6
    f952:	4639      	mov	r1, r7
    f954:	f000 fc56 	bl	10204 <__aeabi_dmul>
    f958:	4602      	mov	r2, r0
    f95a:	460b      	mov	r3, r1
    f95c:	a14e      	add	r1, pc, #312	; (adr r1, fa98 <__ieee754_pow+0xa50>)
    f95e:	e9d1 0100 	ldrd	r0, r1, [r1]
    f962:	f000 fa9b 	bl	fe9c <__aeabi_dsub>
    f966:	4632      	mov	r2, r6
    f968:	463b      	mov	r3, r7
    f96a:	f000 fc4b 	bl	10204 <__aeabi_dmul>
    f96e:	4602      	mov	r2, r0
    f970:	460b      	mov	r3, r1
    f972:	2000      	movs	r0, #0
    f974:	4955      	ldr	r1, [pc, #340]	; (facc <__ieee754_pow+0xa84>)
    f976:	f000 fa91 	bl	fe9c <__aeabi_dsub>
    f97a:	4632      	mov	r2, r6
    f97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    f980:	463b      	mov	r3, r7
    f982:	4630      	mov	r0, r6
    f984:	4639      	mov	r1, r7
    f986:	f000 fc3d 	bl	10204 <__aeabi_dmul>
    f98a:	4602      	mov	r2, r0
    f98c:	460b      	mov	r3, r1
    f98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f992:	f000 fc37 	bl	10204 <__aeabi_dmul>
    f996:	a342      	add	r3, pc, #264	; (adr r3, faa0 <__ieee754_pow+0xa58>)
    f998:	e9d3 2300 	ldrd	r2, r3, [r3]
    f99c:	f000 fc32 	bl	10204 <__aeabi_dmul>
    f9a0:	4602      	mov	r2, r0
    f9a2:	460b      	mov	r3, r1
    f9a4:	4650      	mov	r0, sl
    f9a6:	4659      	mov	r1, fp
    f9a8:	f000 fa78 	bl	fe9c <__aeabi_dsub>
    f9ac:	4602      	mov	r2, r0
    f9ae:	460b      	mov	r3, r1
    f9b0:	4606      	mov	r6, r0
    f9b2:	460f      	mov	r7, r1
    f9b4:	4640      	mov	r0, r8
    f9b6:	4649      	mov	r1, r9
    f9b8:	f000 fa72 	bl	fea0 <__adddf3>
    f9bc:	4642      	mov	r2, r8
    f9be:	464b      	mov	r3, r9
    f9c0:	2000      	movs	r0, #0
    f9c2:	4682      	mov	sl, r0
    f9c4:	468b      	mov	fp, r1
    f9c6:	f000 fa69 	bl	fe9c <__aeabi_dsub>
    f9ca:	4602      	mov	r2, r0
    f9cc:	460b      	mov	r3, r1
    f9ce:	4630      	mov	r0, r6
    f9d0:	4639      	mov	r1, r7
    f9d2:	f000 fa63 	bl	fe9c <__aeabi_dsub>
    f9d6:	4680      	mov	r8, r0
    f9d8:	4689      	mov	r9, r1
    f9da:	e5d4      	b.n	f586 <__ieee754_pow+0x53e>
    f9dc:	4642      	mov	r2, r8
    f9de:	464b      	mov	r3, r9
    f9e0:	2000      	movs	r0, #0
    f9e2:	4938      	ldr	r1, [pc, #224]	; (fac4 <__ieee754_pow+0xa7c>)
    f9e4:	f000 fd38 	bl	10458 <__aeabi_ddiv>
    f9e8:	f7ff bb70 	b.w	f0cc <__ieee754_pow+0x84>
    f9ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f9f0:	a32d      	add	r3, pc, #180	; (adr r3, faa8 <__ieee754_pow+0xa60>)
    f9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f9f6:	f000 fc05 	bl	10204 <__aeabi_dmul>
    f9fa:	a32b      	add	r3, pc, #172	; (adr r3, faa8 <__ieee754_pow+0xa60>)
    f9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    fa00:	f000 fc00 	bl	10204 <__aeabi_dmul>
    fa04:	f7ff bb62 	b.w	f0cc <__ieee754_pow+0x84>
    fa08:	f1be 0f00 	cmp.w	lr, #0
    fa0c:	f47f ab69 	bne.w	f0e2 <__ieee754_pow+0x9a>
    fa10:	f1c3 0314 	rsb	r3, r3, #20
    fa14:	fa47 f203 	asr.w	r2, r7, r3
    fa18:	fa02 f303 	lsl.w	r3, r2, r3
    fa1c:	429f      	cmp	r7, r3
    fa1e:	d02a      	beq.n	fa76 <__ieee754_pow+0xa2e>
    fa20:	4674      	mov	r4, lr
    fa22:	f7ff bb36 	b.w	f092 <__ieee754_pow+0x4a>
    fa26:	4b29      	ldr	r3, [pc, #164]	; (facc <__ieee754_pow+0xa84>)
    fa28:	4598      	cmp	r8, r3
    fa2a:	f73f ae0e 	bgt.w	f64a <__ieee754_pow+0x602>
    fa2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    fa32:	4692      	mov	sl, r2
    fa34:	4693      	mov	fp, r2
    fa36:	e638      	b.n	f6aa <__ieee754_pow+0x662>
    fa38:	4602      	mov	r2, r0
    fa3a:	460b      	mov	r3, r1
    fa3c:	f000 fa2e 	bl	fe9c <__aeabi_dsub>
    fa40:	4602      	mov	r2, r0
    fa42:	460b      	mov	r3, r1
    fa44:	f000 fd08 	bl	10458 <__aeabi_ddiv>
    fa48:	f7ff bb40 	b.w	f0cc <__ieee754_pow+0x84>
    fa4c:	a318      	add	r3, pc, #96	; (adr r3, fab0 <__ieee754_pow+0xa68>)
    fa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    fa52:	e9cd 2308 	strd	r2, r3, [sp, #32]
    fa56:	a318      	add	r3, pc, #96	; (adr r3, fab8 <__ieee754_pow+0xa70>)
    fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
    fa5c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    fa60:	4b1b      	ldr	r3, [pc, #108]	; (fad0 <__ieee754_pow+0xa88>)
    fa62:	2200      	movs	r2, #0
    fa64:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    fa68:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fa6c:	e401      	b.n	f272 <__ieee754_pow+0x22a>
    fa6e:	465a      	mov	r2, fp
    fa70:	f000 f98a 	bl	fd88 <scalbn>
    fa74:	e6c9      	b.n	f80a <__ieee754_pow+0x7c2>
    fa76:	f002 0201 	and.w	r2, r2, #1
    fa7a:	f1c2 0402 	rsb	r4, r2, #2
    fa7e:	f7ff bb08 	b.w	f092 <__ieee754_pow+0x4a>
    fa82:	bf00      	nop
    fa84:	f3af 8000 	nop.w
    fa88:	60000000 	.word	0x60000000
    fa8c:	3ff71547 	.word	0x3ff71547
    fa90:	f85ddf44 	.word	0xf85ddf44
    fa94:	3e54ae0b 	.word	0x3e54ae0b
    fa98:	55555555 	.word	0x55555555
    fa9c:	3fd55555 	.word	0x3fd55555
    faa0:	652b82fe 	.word	0x652b82fe
    faa4:	3ff71547 	.word	0x3ff71547
    faa8:	8800759c 	.word	0x8800759c
    faac:	7e37e43c 	.word	0x7e37e43c
    fab0:	40000000 	.word	0x40000000
    fab4:	3fe2b803 	.word	0x3fe2b803
    fab8:	43cfd006 	.word	0x43cfd006
    fabc:	3e4cfdeb 	.word	0x3e4cfdeb
    fac0:	3feffffe 	.word	0x3feffffe
    fac4:	3ff00000 	.word	0x3ff00000
    fac8:	3fd00000 	.word	0x3fd00000
    facc:	3fe00000 	.word	0x3fe00000
    fad0:	3ff80000 	.word	0x3ff80000

0000fad4 <__ieee754_sqrt>:
    fad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fad8:	4f5b      	ldr	r7, [pc, #364]	; (fc48 <__ieee754_sqrt+0x174>)
    fada:	438f      	bics	r7, r1
    fadc:	4605      	mov	r5, r0
    fade:	460c      	mov	r4, r1
    fae0:	f000 8092 	beq.w	fc08 <__ieee754_sqrt+0x134>
    fae4:	2900      	cmp	r1, #0
    fae6:	460b      	mov	r3, r1
    fae8:	4602      	mov	r2, r0
    faea:	dd6f      	ble.n	fbcc <__ieee754_sqrt+0xf8>
    faec:	150f      	asrs	r7, r1, #20
    faee:	d07b      	beq.n	fbe8 <__ieee754_sqrt+0x114>
    faf0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    faf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    faf8:	07f8      	lsls	r0, r7, #31
    fafa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    fafe:	d45c      	bmi.n	fbba <__ieee754_sqrt+0xe6>
    fb00:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    fb04:	2600      	movs	r6, #0
    fb06:	440b      	add	r3, r1
    fb08:	107f      	asrs	r7, r7, #1
    fb0a:	0052      	lsls	r2, r2, #1
    fb0c:	46b6      	mov	lr, r6
    fb0e:	2016      	movs	r0, #22
    fb10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    fb14:	eb0e 0401 	add.w	r4, lr, r1
    fb18:	429c      	cmp	r4, r3
    fb1a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    fb1e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    fb22:	dc03      	bgt.n	fb2c <__ieee754_sqrt+0x58>
    fb24:	1b1b      	subs	r3, r3, r4
    fb26:	eb04 0e01 	add.w	lr, r4, r1
    fb2a:	440e      	add	r6, r1
    fb2c:	3801      	subs	r0, #1
    fb2e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    fb32:	ea4f 0151 	mov.w	r1, r1, lsr #1
    fb36:	d1ed      	bne.n	fb14 <__ieee754_sqrt+0x40>
    fb38:	4684      	mov	ip, r0
    fb3a:	2420      	movs	r4, #32
    fb3c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    fb40:	e009      	b.n	fb56 <__ieee754_sqrt+0x82>
    fb42:	d020      	beq.n	fb86 <__ieee754_sqrt+0xb2>
    fb44:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    fb48:	3c01      	subs	r4, #1
    fb4a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    fb4e:	442b      	add	r3, r5
    fb50:	ea4f 0242 	mov.w	r2, r2, lsl #1
    fb54:	d020      	beq.n	fb98 <__ieee754_sqrt+0xc4>
    fb56:	4573      	cmp	r3, lr
    fb58:	eb01 050c 	add.w	r5, r1, ip
    fb5c:	ddf1      	ble.n	fb42 <__ieee754_sqrt+0x6e>
    fb5e:	2d00      	cmp	r5, #0
    fb60:	eb05 0c01 	add.w	ip, r5, r1
    fb64:	db09      	blt.n	fb7a <__ieee754_sqrt+0xa6>
    fb66:	46f0      	mov	r8, lr
    fb68:	4295      	cmp	r5, r2
    fb6a:	eba3 030e 	sub.w	r3, r3, lr
    fb6e:	d900      	bls.n	fb72 <__ieee754_sqrt+0x9e>
    fb70:	3b01      	subs	r3, #1
    fb72:	1b52      	subs	r2, r2, r5
    fb74:	4408      	add	r0, r1
    fb76:	46c6      	mov	lr, r8
    fb78:	e7e4      	b.n	fb44 <__ieee754_sqrt+0x70>
    fb7a:	f1bc 0f00 	cmp.w	ip, #0
    fb7e:	dbf2      	blt.n	fb66 <__ieee754_sqrt+0x92>
    fb80:	f10e 0801 	add.w	r8, lr, #1
    fb84:	e7f0      	b.n	fb68 <__ieee754_sqrt+0x94>
    fb86:	4295      	cmp	r5, r2
    fb88:	d8dc      	bhi.n	fb44 <__ieee754_sqrt+0x70>
    fb8a:	2d00      	cmp	r5, #0
    fb8c:	eb05 0c01 	add.w	ip, r5, r1
    fb90:	db44      	blt.n	fc1c <__ieee754_sqrt+0x148>
    fb92:	4698      	mov	r8, r3
    fb94:	2300      	movs	r3, #0
    fb96:	e7ec      	b.n	fb72 <__ieee754_sqrt+0x9e>
    fb98:	4313      	orrs	r3, r2
    fb9a:	d113      	bne.n	fbc4 <__ieee754_sqrt+0xf0>
    fb9c:	0840      	lsrs	r0, r0, #1
    fb9e:	1073      	asrs	r3, r6, #1
    fba0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    fba4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    fba8:	07f2      	lsls	r2, r6, #31
    fbaa:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    fbae:	bf48      	it	mi
    fbb0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    fbb4:	4649      	mov	r1, r9
    fbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fbba:	005b      	lsls	r3, r3, #1
    fbbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    fbc0:	0052      	lsls	r2, r2, #1
    fbc2:	e79d      	b.n	fb00 <__ieee754_sqrt+0x2c>
    fbc4:	1c41      	adds	r1, r0, #1
    fbc6:	d02d      	beq.n	fc24 <__ieee754_sqrt+0x150>
    fbc8:	3001      	adds	r0, #1
    fbca:	e7e7      	b.n	fb9c <__ieee754_sqrt+0xc8>
    fbcc:	4606      	mov	r6, r0
    fbce:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    fbd2:	433e      	orrs	r6, r7
    fbd4:	d0ef      	beq.n	fbb6 <__ieee754_sqrt+0xe2>
    fbd6:	bb69      	cbnz	r1, fc34 <__ieee754_sqrt+0x160>
    fbd8:	460f      	mov	r7, r1
    fbda:	0ad3      	lsrs	r3, r2, #11
    fbdc:	3f15      	subs	r7, #21
    fbde:	0552      	lsls	r2, r2, #21
    fbe0:	2b00      	cmp	r3, #0
    fbe2:	d0fa      	beq.n	fbda <__ieee754_sqrt+0x106>
    fbe4:	02de      	lsls	r6, r3, #11
    fbe6:	d420      	bmi.n	fc2a <__ieee754_sqrt+0x156>
    fbe8:	2400      	movs	r4, #0
    fbea:	e000      	b.n	fbee <__ieee754_sqrt+0x11a>
    fbec:	4604      	mov	r4, r0
    fbee:	005b      	lsls	r3, r3, #1
    fbf0:	02dd      	lsls	r5, r3, #11
    fbf2:	f104 0001 	add.w	r0, r4, #1
    fbf6:	d5f9      	bpl.n	fbec <__ieee754_sqrt+0x118>
    fbf8:	f1c0 0120 	rsb	r1, r0, #32
    fbfc:	fa22 f101 	lsr.w	r1, r2, r1
    fc00:	430b      	orrs	r3, r1
    fc02:	1b3f      	subs	r7, r7, r4
    fc04:	4082      	lsls	r2, r0
    fc06:	e773      	b.n	faf0 <__ieee754_sqrt+0x1c>
    fc08:	4602      	mov	r2, r0
    fc0a:	460b      	mov	r3, r1
    fc0c:	f000 fafa 	bl	10204 <__aeabi_dmul>
    fc10:	462a      	mov	r2, r5
    fc12:	4623      	mov	r3, r4
    fc14:	f000 f944 	bl	fea0 <__adddf3>
    fc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fc1c:	f1bc 0f00 	cmp.w	ip, #0
    fc20:	daae      	bge.n	fb80 <__ieee754_sqrt+0xac>
    fc22:	e7b6      	b.n	fb92 <__ieee754_sqrt+0xbe>
    fc24:	3601      	adds	r6, #1
    fc26:	4620      	mov	r0, r4
    fc28:	e7b9      	b.n	fb9e <__ieee754_sqrt+0xca>
    fc2a:	2000      	movs	r0, #0
    fc2c:	2120      	movs	r1, #32
    fc2e:	f04f 34ff 	mov.w	r4, #4294967295
    fc32:	e7e3      	b.n	fbfc <__ieee754_sqrt+0x128>
    fc34:	4602      	mov	r2, r0
    fc36:	460b      	mov	r3, r1
    fc38:	f000 f930 	bl	fe9c <__aeabi_dsub>
    fc3c:	4602      	mov	r2, r0
    fc3e:	460b      	mov	r3, r1
    fc40:	f000 fc0a 	bl	10458 <__aeabi_ddiv>
    fc44:	e7b7      	b.n	fbb6 <__ieee754_sqrt+0xe2>
    fc46:	bf00      	nop
    fc48:	7ff00000 	.word	0x7ff00000

0000fc4c <fabs>:
    fc4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fc50:	4770      	bx	lr
    fc52:	bf00      	nop

0000fc54 <finite>:
    fc54:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    fc58:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
    fc5c:	0fc0      	lsrs	r0, r0, #31
    fc5e:	4770      	bx	lr

0000fc60 <matherr>:
    fc60:	2000      	movs	r0, #0
    fc62:	4770      	bx	lr

0000fc64 <nan>:
    fc64:	2000      	movs	r0, #0
    fc66:	4901      	ldr	r1, [pc, #4]	; (fc6c <nan+0x8>)
    fc68:	4770      	bx	lr
    fc6a:	bf00      	nop
    fc6c:	7ff80000 	.word	0x7ff80000

0000fc70 <rint>:
    fc70:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc72:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
    fc76:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
    fc7a:	2e13      	cmp	r6, #19
    fc7c:	b083      	sub	sp, #12
    fc7e:	4602      	mov	r2, r0
    fc80:	460b      	mov	r3, r1
    fc82:	460c      	mov	r4, r1
    fc84:	ea4f 75d1 	mov.w	r5, r1, lsr #31
    fc88:	4607      	mov	r7, r0
    fc8a:	dc2e      	bgt.n	fcea <rint+0x7a>
    fc8c:	2e00      	cmp	r6, #0
    fc8e:	db49      	blt.n	fd24 <rint+0xb4>
    fc90:	493a      	ldr	r1, [pc, #232]	; (fd7c <rint+0x10c>)
    fc92:	4131      	asrs	r1, r6
    fc94:	ea03 0001 	and.w	r0, r3, r1
    fc98:	4310      	orrs	r0, r2
    fc9a:	d02b      	beq.n	fcf4 <rint+0x84>
    fc9c:	0849      	lsrs	r1, r1, #1
    fc9e:	400b      	ands	r3, r1
    fca0:	ea53 0702 	orrs.w	r7, r3, r2
    fca4:	d00c      	beq.n	fcc0 <rint+0x50>
    fca6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    fcaa:	2e13      	cmp	r6, #19
    fcac:	ea24 0101 	bic.w	r1, r4, r1
    fcb0:	fa43 f406 	asr.w	r4, r3, r6
    fcb4:	ea44 0401 	orr.w	r4, r4, r1
    fcb8:	bf0c      	ite	eq
    fcba:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
    fcbe:	2700      	movne	r7, #0
    fcc0:	4b2f      	ldr	r3, [pc, #188]	; (fd80 <rint+0x110>)
    fcc2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    fcc6:	4621      	mov	r1, r4
    fcc8:	e9d5 4500 	ldrd	r4, r5, [r5]
    fccc:	4638      	mov	r0, r7
    fcce:	4622      	mov	r2, r4
    fcd0:	462b      	mov	r3, r5
    fcd2:	f000 f8e5 	bl	fea0 <__adddf3>
    fcd6:	e9cd 0100 	strd	r0, r1, [sp]
    fcda:	4622      	mov	r2, r4
    fcdc:	462b      	mov	r3, r5
    fcde:	e9dd 0100 	ldrd	r0, r1, [sp]
    fce2:	f000 f8db 	bl	fe9c <__aeabi_dsub>
    fce6:	b003      	add	sp, #12
    fce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcea:	2e33      	cmp	r6, #51	; 0x33
    fcec:	dd06      	ble.n	fcfc <rint+0x8c>
    fcee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    fcf2:	d040      	beq.n	fd76 <rint+0x106>
    fcf4:	4610      	mov	r0, r2
    fcf6:	4619      	mov	r1, r3
    fcf8:	b003      	add	sp, #12
    fcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcfc:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
    fd00:	f04f 31ff 	mov.w	r1, #4294967295
    fd04:	fa21 f10e 	lsr.w	r1, r1, lr
    fd08:	4208      	tst	r0, r1
    fd0a:	d0f3      	beq.n	fcf4 <rint+0x84>
    fd0c:	0849      	lsrs	r1, r1, #1
    fd0e:	4208      	tst	r0, r1
    fd10:	d0d6      	beq.n	fcc0 <rint+0x50>
    fd12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fd16:	ea20 0101 	bic.w	r1, r0, r1
    fd1a:	fa43 fe0e 	asr.w	lr, r3, lr
    fd1e:	ea4e 0701 	orr.w	r7, lr, r1
    fd22:	e7cd      	b.n	fcc0 <rint+0x50>
    fd24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fd28:	4301      	orrs	r1, r0
    fd2a:	d0e3      	beq.n	fcf4 <rint+0x84>
    fd2c:	f3c3 0113 	ubfx	r1, r3, #0, #20
    fd30:	4e13      	ldr	r6, [pc, #76]	; (fd80 <rint+0x110>)
    fd32:	4301      	orrs	r1, r0
    fd34:	f1c1 0c00 	rsb	ip, r1, #0
    fd38:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    fd3c:	e9d6 6700 	ldrd	r6, r7, [r6]
    fd40:	ea4c 0c01 	orr.w	ip, ip, r1
    fd44:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
    fd48:	0c5c      	lsrs	r4, r3, #17
    fd4a:	0464      	lsls	r4, r4, #17
    fd4c:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
    fd50:	ea43 0104 	orr.w	r1, r3, r4
    fd54:	4632      	mov	r2, r6
    fd56:	463b      	mov	r3, r7
    fd58:	f000 f8a2 	bl	fea0 <__adddf3>
    fd5c:	e9cd 0100 	strd	r0, r1, [sp]
    fd60:	4632      	mov	r2, r6
    fd62:	463b      	mov	r3, r7
    fd64:	e9dd 0100 	ldrd	r0, r1, [sp]
    fd68:	f000 f898 	bl	fe9c <__aeabi_dsub>
    fd6c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    fd70:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
    fd74:	e7c0      	b.n	fcf8 <rint+0x88>
    fd76:	f000 f893 	bl	fea0 <__adddf3>
    fd7a:	e7bd      	b.n	fcf8 <rint+0x88>
    fd7c:	000fffff 	.word	0x000fffff
    fd80:	00011d68 	.word	0x00011d68
    fd84:	00000000 	.word	0x00000000

0000fd88 <scalbn>:
    fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
    fd8e:	4604      	mov	r4, r0
    fd90:	460d      	mov	r5, r1
    fd92:	460b      	mov	r3, r1
    fd94:	4617      	mov	r7, r2
    fd96:	bb0e      	cbnz	r6, fddc <scalbn+0x54>
    fd98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    fd9c:	4303      	orrs	r3, r0
    fd9e:	4686      	mov	lr, r0
    fda0:	d025      	beq.n	fdee <scalbn+0x66>
    fda2:	2200      	movs	r2, #0
    fda4:	4b34      	ldr	r3, [pc, #208]	; (fe78 <scalbn+0xf0>)
    fda6:	f000 fa2d 	bl	10204 <__aeabi_dmul>
    fdaa:	4a34      	ldr	r2, [pc, #208]	; (fe7c <scalbn+0xf4>)
    fdac:	4297      	cmp	r7, r2
    fdae:	4604      	mov	r4, r0
    fdb0:	460d      	mov	r5, r1
    fdb2:	460b      	mov	r3, r1
    fdb4:	db2a      	blt.n	fe0c <scalbn+0x84>
    fdb6:	f3c1 560a 	ubfx	r6, r1, #20, #11
    fdba:	3e36      	subs	r6, #54	; 0x36
    fdbc:	443e      	add	r6, r7
    fdbe:	f240 72fe 	movw	r2, #2046	; 0x7fe
    fdc2:	4296      	cmp	r6, r2
    fdc4:	dc28      	bgt.n	fe18 <scalbn+0x90>
    fdc6:	2e00      	cmp	r6, #0
    fdc8:	dd12      	ble.n	fdf0 <scalbn+0x68>
    fdca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    fdce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    fdd2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    fdd6:	4620      	mov	r0, r4
    fdd8:	4629      	mov	r1, r5
    fdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fddc:	f240 72ff 	movw	r2, #2047	; 0x7ff
    fde0:	4296      	cmp	r6, r2
    fde2:	d1eb      	bne.n	fdbc <scalbn+0x34>
    fde4:	4602      	mov	r2, r0
    fde6:	460b      	mov	r3, r1
    fde8:	f000 f85a 	bl	fea0 <__adddf3>
    fdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdf0:	f116 0f35 	cmn.w	r6, #53	; 0x35
    fdf4:	da1d      	bge.n	fe32 <scalbn+0xaa>
    fdf6:	f24c 3350 	movw	r3, #50000	; 0xc350
    fdfa:	429f      	cmp	r7, r3
    fdfc:	4622      	mov	r2, r4
    fdfe:	462b      	mov	r3, r5
    fe00:	dc25      	bgt.n	fe4e <scalbn+0xc6>
    fe02:	a119      	add	r1, pc, #100	; (adr r1, fe68 <scalbn+0xe0>)
    fe04:	e9d1 0100 	ldrd	r0, r1, [r1]
    fe08:	f000 f83c 	bl	fe84 <copysign>
    fe0c:	a316      	add	r3, pc, #88	; (adr r3, fe68 <scalbn+0xe0>)
    fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe12:	f000 f9f7 	bl	10204 <__aeabi_dmul>
    fe16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe18:	4622      	mov	r2, r4
    fe1a:	462b      	mov	r3, r5
    fe1c:	a114      	add	r1, pc, #80	; (adr r1, fe70 <scalbn+0xe8>)
    fe1e:	e9d1 0100 	ldrd	r0, r1, [r1]
    fe22:	f000 f82f 	bl	fe84 <copysign>
    fe26:	a312      	add	r3, pc, #72	; (adr r3, fe70 <scalbn+0xe8>)
    fe28:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe2c:	f000 f9ea 	bl	10204 <__aeabi_dmul>
    fe30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    fe36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    fe3a:	3636      	adds	r6, #54	; 0x36
    fe3c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    fe40:	4620      	mov	r0, r4
    fe42:	4629      	mov	r1, r5
    fe44:	2200      	movs	r2, #0
    fe46:	4b0e      	ldr	r3, [pc, #56]	; (fe80 <scalbn+0xf8>)
    fe48:	f000 f9dc 	bl	10204 <__aeabi_dmul>
    fe4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe4e:	a108      	add	r1, pc, #32	; (adr r1, fe70 <scalbn+0xe8>)
    fe50:	e9d1 0100 	ldrd	r0, r1, [r1]
    fe54:	f000 f816 	bl	fe84 <copysign>
    fe58:	a305      	add	r3, pc, #20	; (adr r3, fe70 <scalbn+0xe8>)
    fe5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe5e:	f000 f9d1 	bl	10204 <__aeabi_dmul>
    fe62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe64:	f3af 8000 	nop.w
    fe68:	c2f8f359 	.word	0xc2f8f359
    fe6c:	01a56e1f 	.word	0x01a56e1f
    fe70:	8800759c 	.word	0x8800759c
    fe74:	7e37e43c 	.word	0x7e37e43c
    fe78:	43500000 	.word	0x43500000
    fe7c:	ffff3cb0 	.word	0xffff3cb0
    fe80:	3c900000 	.word	0x3c900000

0000fe84 <copysign>:
    fe84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    fe88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    fe8c:	ea42 0103 	orr.w	r1, r2, r3
    fe90:	4770      	bx	lr
    fe92:	bf00      	nop

0000fe94 <__aeabi_drsub>:
    fe94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    fe98:	e002      	b.n	fea0 <__adddf3>
    fe9a:	bf00      	nop

0000fe9c <__aeabi_dsub>:
    fe9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000fea0 <__adddf3>:
    fea0:	b530      	push	{r4, r5, lr}
    fea2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    fea6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    feaa:	ea94 0f05 	teq	r4, r5
    feae:	bf08      	it	eq
    feb0:	ea90 0f02 	teqeq	r0, r2
    feb4:	bf1f      	itttt	ne
    feb6:	ea54 0c00 	orrsne.w	ip, r4, r0
    feba:	ea55 0c02 	orrsne.w	ip, r5, r2
    febe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    fec2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    fec6:	f000 80e2 	beq.w	1008e <STACK_SIZE+0x8e>
    feca:	ea4f 5454 	mov.w	r4, r4, lsr #21
    fece:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    fed2:	bfb8      	it	lt
    fed4:	426d      	neglt	r5, r5
    fed6:	dd0c      	ble.n	fef2 <__adddf3+0x52>
    fed8:	442c      	add	r4, r5
    feda:	ea80 0202 	eor.w	r2, r0, r2
    fede:	ea81 0303 	eor.w	r3, r1, r3
    fee2:	ea82 0000 	eor.w	r0, r2, r0
    fee6:	ea83 0101 	eor.w	r1, r3, r1
    feea:	ea80 0202 	eor.w	r2, r0, r2
    feee:	ea81 0303 	eor.w	r3, r1, r3
    fef2:	2d36      	cmp	r5, #54	; 0x36
    fef4:	bf88      	it	hi
    fef6:	bd30      	pophi	{r4, r5, pc}
    fef8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    fefc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ff00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    ff04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    ff08:	d002      	beq.n	ff10 <__adddf3+0x70>
    ff0a:	4240      	negs	r0, r0
    ff0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ff10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    ff14:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ff18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    ff1c:	d002      	beq.n	ff24 <__adddf3+0x84>
    ff1e:	4252      	negs	r2, r2
    ff20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ff24:	ea94 0f05 	teq	r4, r5
    ff28:	f000 80a7 	beq.w	1007a <STACK_SIZE+0x7a>
    ff2c:	f1a4 0401 	sub.w	r4, r4, #1
    ff30:	f1d5 0e20 	rsbs	lr, r5, #32
    ff34:	db0d      	blt.n	ff52 <__adddf3+0xb2>
    ff36:	fa02 fc0e 	lsl.w	ip, r2, lr
    ff3a:	fa22 f205 	lsr.w	r2, r2, r5
    ff3e:	1880      	adds	r0, r0, r2
    ff40:	f141 0100 	adc.w	r1, r1, #0
    ff44:	fa03 f20e 	lsl.w	r2, r3, lr
    ff48:	1880      	adds	r0, r0, r2
    ff4a:	fa43 f305 	asr.w	r3, r3, r5
    ff4e:	4159      	adcs	r1, r3
    ff50:	e00e      	b.n	ff70 <__adddf3+0xd0>
    ff52:	f1a5 0520 	sub.w	r5, r5, #32
    ff56:	f10e 0e20 	add.w	lr, lr, #32
    ff5a:	2a01      	cmp	r2, #1
    ff5c:	fa03 fc0e 	lsl.w	ip, r3, lr
    ff60:	bf28      	it	cs
    ff62:	f04c 0c02 	orrcs.w	ip, ip, #2
    ff66:	fa43 f305 	asr.w	r3, r3, r5
    ff6a:	18c0      	adds	r0, r0, r3
    ff6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ff70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ff74:	d507      	bpl.n	ff86 <__adddf3+0xe6>
    ff76:	f04f 0e00 	mov.w	lr, #0
    ff7a:	f1dc 0c00 	rsbs	ip, ip, #0
    ff7e:	eb7e 0000 	sbcs.w	r0, lr, r0
    ff82:	eb6e 0101 	sbc.w	r1, lr, r1
    ff86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ff8a:	d31b      	bcc.n	ffc4 <__adddf3+0x124>
    ff8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ff90:	d30c      	bcc.n	ffac <__adddf3+0x10c>
    ff92:	0849      	lsrs	r1, r1, #1
    ff94:	ea5f 0030 	movs.w	r0, r0, rrx
    ff98:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ff9c:	f104 0401 	add.w	r4, r4, #1
    ffa0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ffa4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ffa8:	f080 809a 	bcs.w	100e0 <STACK_SIZE+0xe0>
    ffac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ffb0:	bf08      	it	eq
    ffb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ffb6:	f150 0000 	adcs.w	r0, r0, #0
    ffba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ffbe:	ea41 0105 	orr.w	r1, r1, r5
    ffc2:	bd30      	pop	{r4, r5, pc}
    ffc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    ffc8:	4140      	adcs	r0, r0
    ffca:	eb41 0101 	adc.w	r1, r1, r1
    ffce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ffd2:	f1a4 0401 	sub.w	r4, r4, #1
    ffd6:	d1e9      	bne.n	ffac <__adddf3+0x10c>
    ffd8:	f091 0f00 	teq	r1, #0
    ffdc:	bf04      	itt	eq
    ffde:	4601      	moveq	r1, r0
    ffe0:	2000      	moveq	r0, #0
    ffe2:	fab1 f381 	clz	r3, r1
    ffe6:	bf08      	it	eq
    ffe8:	3320      	addeq	r3, #32
    ffea:	f1a3 030b 	sub.w	r3, r3, #11
    ffee:	f1b3 0220 	subs.w	r2, r3, #32
    fff2:	da0c      	bge.n	1000e <STACK_SIZE+0xe>
    fff4:	320c      	adds	r2, #12
    fff6:	dd08      	ble.n	1000a <STACK_SIZE+0xa>
    fff8:	f102 0c14 	add.w	ip, r2, #20
    fffc:	f1c2 020c 	rsb	r2, r2, #12
   10000:	fa01 f00c 	lsl.w	r0, r1, ip
   10004:	fa21 f102 	lsr.w	r1, r1, r2
   10008:	e00c      	b.n	10024 <STACK_SIZE+0x24>
   1000a:	f102 0214 	add.w	r2, r2, #20
   1000e:	bfd8      	it	le
   10010:	f1c2 0c20 	rsble	ip, r2, #32
   10014:	fa01 f102 	lsl.w	r1, r1, r2
   10018:	fa20 fc0c 	lsr.w	ip, r0, ip
   1001c:	bfdc      	itt	le
   1001e:	ea41 010c 	orrle.w	r1, r1, ip
   10022:	4090      	lslle	r0, r2
   10024:	1ae4      	subs	r4, r4, r3
   10026:	bfa2      	ittt	ge
   10028:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1002c:	4329      	orrge	r1, r5
   1002e:	bd30      	popge	{r4, r5, pc}
   10030:	ea6f 0404 	mvn.w	r4, r4
   10034:	3c1f      	subs	r4, #31
   10036:	da1c      	bge.n	10072 <STACK_SIZE+0x72>
   10038:	340c      	adds	r4, #12
   1003a:	dc0e      	bgt.n	1005a <STACK_SIZE+0x5a>
   1003c:	f104 0414 	add.w	r4, r4, #20
   10040:	f1c4 0220 	rsb	r2, r4, #32
   10044:	fa20 f004 	lsr.w	r0, r0, r4
   10048:	fa01 f302 	lsl.w	r3, r1, r2
   1004c:	ea40 0003 	orr.w	r0, r0, r3
   10050:	fa21 f304 	lsr.w	r3, r1, r4
   10054:	ea45 0103 	orr.w	r1, r5, r3
   10058:	bd30      	pop	{r4, r5, pc}
   1005a:	f1c4 040c 	rsb	r4, r4, #12
   1005e:	f1c4 0220 	rsb	r2, r4, #32
   10062:	fa20 f002 	lsr.w	r0, r0, r2
   10066:	fa01 f304 	lsl.w	r3, r1, r4
   1006a:	ea40 0003 	orr.w	r0, r0, r3
   1006e:	4629      	mov	r1, r5
   10070:	bd30      	pop	{r4, r5, pc}
   10072:	fa21 f004 	lsr.w	r0, r1, r4
   10076:	4629      	mov	r1, r5
   10078:	bd30      	pop	{r4, r5, pc}
   1007a:	f094 0f00 	teq	r4, #0
   1007e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   10082:	bf06      	itte	eq
   10084:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10088:	3401      	addeq	r4, #1
   1008a:	3d01      	subne	r5, #1
   1008c:	e74e      	b.n	ff2c <__adddf3+0x8c>
   1008e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   10092:	bf18      	it	ne
   10094:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10098:	d029      	beq.n	100ee <STACK_SIZE+0xee>
   1009a:	ea94 0f05 	teq	r4, r5
   1009e:	bf08      	it	eq
   100a0:	ea90 0f02 	teqeq	r0, r2
   100a4:	d005      	beq.n	100b2 <STACK_SIZE+0xb2>
   100a6:	ea54 0c00 	orrs.w	ip, r4, r0
   100aa:	bf04      	itt	eq
   100ac:	4619      	moveq	r1, r3
   100ae:	4610      	moveq	r0, r2
   100b0:	bd30      	pop	{r4, r5, pc}
   100b2:	ea91 0f03 	teq	r1, r3
   100b6:	bf1e      	ittt	ne
   100b8:	2100      	movne	r1, #0
   100ba:	2000      	movne	r0, #0
   100bc:	bd30      	popne	{r4, r5, pc}
   100be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   100c2:	d105      	bne.n	100d0 <STACK_SIZE+0xd0>
   100c4:	0040      	lsls	r0, r0, #1
   100c6:	4149      	adcs	r1, r1
   100c8:	bf28      	it	cs
   100ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   100ce:	bd30      	pop	{r4, r5, pc}
   100d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   100d4:	bf3c      	itt	cc
   100d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   100da:	bd30      	popcc	{r4, r5, pc}
   100dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   100e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   100e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   100e8:	f04f 0000 	mov.w	r0, #0
   100ec:	bd30      	pop	{r4, r5, pc}
   100ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   100f2:	bf1a      	itte	ne
   100f4:	4619      	movne	r1, r3
   100f6:	4610      	movne	r0, r2
   100f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   100fc:	bf1c      	itt	ne
   100fe:	460b      	movne	r3, r1
   10100:	4602      	movne	r2, r0
   10102:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10106:	bf06      	itte	eq
   10108:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1010c:	ea91 0f03 	teqeq	r1, r3
   10110:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   10114:	bd30      	pop	{r4, r5, pc}
   10116:	bf00      	nop

00010118 <__aeabi_ui2d>:
   10118:	f090 0f00 	teq	r0, #0
   1011c:	bf04      	itt	eq
   1011e:	2100      	moveq	r1, #0
   10120:	4770      	bxeq	lr
   10122:	b530      	push	{r4, r5, lr}
   10124:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10128:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1012c:	f04f 0500 	mov.w	r5, #0
   10130:	f04f 0100 	mov.w	r1, #0
   10134:	e750      	b.n	ffd8 <__adddf3+0x138>
   10136:	bf00      	nop

00010138 <__aeabi_i2d>:
   10138:	f090 0f00 	teq	r0, #0
   1013c:	bf04      	itt	eq
   1013e:	2100      	moveq	r1, #0
   10140:	4770      	bxeq	lr
   10142:	b530      	push	{r4, r5, lr}
   10144:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10148:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1014c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   10150:	bf48      	it	mi
   10152:	4240      	negmi	r0, r0
   10154:	f04f 0100 	mov.w	r1, #0
   10158:	e73e      	b.n	ffd8 <__adddf3+0x138>
   1015a:	bf00      	nop

0001015c <__aeabi_f2d>:
   1015c:	0042      	lsls	r2, r0, #1
   1015e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   10162:	ea4f 0131 	mov.w	r1, r1, rrx
   10166:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1016a:	bf1f      	itttt	ne
   1016c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   10170:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10174:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10178:	4770      	bxne	lr
   1017a:	f092 0f00 	teq	r2, #0
   1017e:	bf14      	ite	ne
   10180:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10184:	4770      	bxeq	lr
   10186:	b530      	push	{r4, r5, lr}
   10188:	f44f 7460 	mov.w	r4, #896	; 0x380
   1018c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10190:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10194:	e720      	b.n	ffd8 <__adddf3+0x138>
   10196:	bf00      	nop

00010198 <__aeabi_ul2d>:
   10198:	ea50 0201 	orrs.w	r2, r0, r1
   1019c:	bf08      	it	eq
   1019e:	4770      	bxeq	lr
   101a0:	b530      	push	{r4, r5, lr}
   101a2:	f04f 0500 	mov.w	r5, #0
   101a6:	e00a      	b.n	101be <__aeabi_l2d+0x16>

000101a8 <__aeabi_l2d>:
   101a8:	ea50 0201 	orrs.w	r2, r0, r1
   101ac:	bf08      	it	eq
   101ae:	4770      	bxeq	lr
   101b0:	b530      	push	{r4, r5, lr}
   101b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   101b6:	d502      	bpl.n	101be <__aeabi_l2d+0x16>
   101b8:	4240      	negs	r0, r0
   101ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   101be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   101c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   101c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   101ca:	f43f aedc 	beq.w	ff86 <__adddf3+0xe6>
   101ce:	f04f 0203 	mov.w	r2, #3
   101d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   101d6:	bf18      	it	ne
   101d8:	3203      	addne	r2, #3
   101da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   101de:	bf18      	it	ne
   101e0:	3203      	addne	r2, #3
   101e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   101e6:	f1c2 0320 	rsb	r3, r2, #32
   101ea:	fa00 fc03 	lsl.w	ip, r0, r3
   101ee:	fa20 f002 	lsr.w	r0, r0, r2
   101f2:	fa01 fe03 	lsl.w	lr, r1, r3
   101f6:	ea40 000e 	orr.w	r0, r0, lr
   101fa:	fa21 f102 	lsr.w	r1, r1, r2
   101fe:	4414      	add	r4, r2
   10200:	e6c1      	b.n	ff86 <__adddf3+0xe6>
   10202:	bf00      	nop

00010204 <__aeabi_dmul>:
   10204:	b570      	push	{r4, r5, r6, lr}
   10206:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1020a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1020e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   10212:	bf1d      	ittte	ne
   10214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10218:	ea94 0f0c 	teqne	r4, ip
   1021c:	ea95 0f0c 	teqne	r5, ip
   10220:	f000 f8de 	bleq	103e0 <__aeabi_dmul+0x1dc>
   10224:	442c      	add	r4, r5
   10226:	ea81 0603 	eor.w	r6, r1, r3
   1022a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1022e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   10232:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   10236:	bf18      	it	ne
   10238:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1023c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10244:	d038      	beq.n	102b8 <__aeabi_dmul+0xb4>
   10246:	fba0 ce02 	umull	ip, lr, r0, r2
   1024a:	f04f 0500 	mov.w	r5, #0
   1024e:	fbe1 e502 	umlal	lr, r5, r1, r2
   10252:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   10256:	fbe0 e503 	umlal	lr, r5, r0, r3
   1025a:	f04f 0600 	mov.w	r6, #0
   1025e:	fbe1 5603 	umlal	r5, r6, r1, r3
   10262:	f09c 0f00 	teq	ip, #0
   10266:	bf18      	it	ne
   10268:	f04e 0e01 	orrne.w	lr, lr, #1
   1026c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10270:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10274:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10278:	d204      	bcs.n	10284 <__aeabi_dmul+0x80>
   1027a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1027e:	416d      	adcs	r5, r5
   10280:	eb46 0606 	adc.w	r6, r6, r6
   10284:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   10288:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1028c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10290:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10294:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   10298:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1029c:	bf88      	it	hi
   1029e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   102a2:	d81e      	bhi.n	102e2 <__aeabi_dmul+0xde>
   102a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   102a8:	bf08      	it	eq
   102aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   102ae:	f150 0000 	adcs.w	r0, r0, #0
   102b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   102b6:	bd70      	pop	{r4, r5, r6, pc}
   102b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   102bc:	ea46 0101 	orr.w	r1, r6, r1
   102c0:	ea40 0002 	orr.w	r0, r0, r2
   102c4:	ea81 0103 	eor.w	r1, r1, r3
   102c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   102cc:	bfc2      	ittt	gt
   102ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   102d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   102d6:	bd70      	popgt	{r4, r5, r6, pc}
   102d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   102dc:	f04f 0e00 	mov.w	lr, #0
   102e0:	3c01      	subs	r4, #1
   102e2:	f300 80ab 	bgt.w	1043c <__aeabi_dmul+0x238>
   102e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   102ea:	bfde      	ittt	le
   102ec:	2000      	movle	r0, #0
   102ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   102f2:	bd70      	pople	{r4, r5, r6, pc}
   102f4:	f1c4 0400 	rsb	r4, r4, #0
   102f8:	3c20      	subs	r4, #32
   102fa:	da35      	bge.n	10368 <__aeabi_dmul+0x164>
   102fc:	340c      	adds	r4, #12
   102fe:	dc1b      	bgt.n	10338 <__aeabi_dmul+0x134>
   10300:	f104 0414 	add.w	r4, r4, #20
   10304:	f1c4 0520 	rsb	r5, r4, #32
   10308:	fa00 f305 	lsl.w	r3, r0, r5
   1030c:	fa20 f004 	lsr.w	r0, r0, r4
   10310:	fa01 f205 	lsl.w	r2, r1, r5
   10314:	ea40 0002 	orr.w	r0, r0, r2
   10318:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1031c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10324:	fa21 f604 	lsr.w	r6, r1, r4
   10328:	eb42 0106 	adc.w	r1, r2, r6
   1032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10330:	bf08      	it	eq
   10332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10336:	bd70      	pop	{r4, r5, r6, pc}
   10338:	f1c4 040c 	rsb	r4, r4, #12
   1033c:	f1c4 0520 	rsb	r5, r4, #32
   10340:	fa00 f304 	lsl.w	r3, r0, r4
   10344:	fa20 f005 	lsr.w	r0, r0, r5
   10348:	fa01 f204 	lsl.w	r2, r1, r4
   1034c:	ea40 0002 	orr.w	r0, r0, r2
   10350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10358:	f141 0100 	adc.w	r1, r1, #0
   1035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10360:	bf08      	it	eq
   10362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10366:	bd70      	pop	{r4, r5, r6, pc}
   10368:	f1c4 0520 	rsb	r5, r4, #32
   1036c:	fa00 f205 	lsl.w	r2, r0, r5
   10370:	ea4e 0e02 	orr.w	lr, lr, r2
   10374:	fa20 f304 	lsr.w	r3, r0, r4
   10378:	fa01 f205 	lsl.w	r2, r1, r5
   1037c:	ea43 0302 	orr.w	r3, r3, r2
   10380:	fa21 f004 	lsr.w	r0, r1, r4
   10384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10388:	fa21 f204 	lsr.w	r2, r1, r4
   1038c:	ea20 0002 	bic.w	r0, r0, r2
   10390:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10398:	bf08      	it	eq
   1039a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1039e:	bd70      	pop	{r4, r5, r6, pc}
   103a0:	f094 0f00 	teq	r4, #0
   103a4:	d10f      	bne.n	103c6 <__aeabi_dmul+0x1c2>
   103a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   103aa:	0040      	lsls	r0, r0, #1
   103ac:	eb41 0101 	adc.w	r1, r1, r1
   103b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   103b4:	bf08      	it	eq
   103b6:	3c01      	subeq	r4, #1
   103b8:	d0f7      	beq.n	103aa <__aeabi_dmul+0x1a6>
   103ba:	ea41 0106 	orr.w	r1, r1, r6
   103be:	f095 0f00 	teq	r5, #0
   103c2:	bf18      	it	ne
   103c4:	4770      	bxne	lr
   103c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   103ca:	0052      	lsls	r2, r2, #1
   103cc:	eb43 0303 	adc.w	r3, r3, r3
   103d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   103d4:	bf08      	it	eq
   103d6:	3d01      	subeq	r5, #1
   103d8:	d0f7      	beq.n	103ca <__aeabi_dmul+0x1c6>
   103da:	ea43 0306 	orr.w	r3, r3, r6
   103de:	4770      	bx	lr
   103e0:	ea94 0f0c 	teq	r4, ip
   103e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   103e8:	bf18      	it	ne
   103ea:	ea95 0f0c 	teqne	r5, ip
   103ee:	d00c      	beq.n	1040a <__aeabi_dmul+0x206>
   103f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   103f4:	bf18      	it	ne
   103f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   103fa:	d1d1      	bne.n	103a0 <__aeabi_dmul+0x19c>
   103fc:	ea81 0103 	eor.w	r1, r1, r3
   10400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10404:	f04f 0000 	mov.w	r0, #0
   10408:	bd70      	pop	{r4, r5, r6, pc}
   1040a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1040e:	bf06      	itte	eq
   10410:	4610      	moveq	r0, r2
   10412:	4619      	moveq	r1, r3
   10414:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10418:	d019      	beq.n	1044e <__aeabi_dmul+0x24a>
   1041a:	ea94 0f0c 	teq	r4, ip
   1041e:	d102      	bne.n	10426 <__aeabi_dmul+0x222>
   10420:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   10424:	d113      	bne.n	1044e <__aeabi_dmul+0x24a>
   10426:	ea95 0f0c 	teq	r5, ip
   1042a:	d105      	bne.n	10438 <__aeabi_dmul+0x234>
   1042c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   10430:	bf1c      	itt	ne
   10432:	4610      	movne	r0, r2
   10434:	4619      	movne	r1, r3
   10436:	d10a      	bne.n	1044e <__aeabi_dmul+0x24a>
   10438:	ea81 0103 	eor.w	r1, r1, r3
   1043c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10440:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10448:	f04f 0000 	mov.w	r0, #0
   1044c:	bd70      	pop	{r4, r5, r6, pc}
   1044e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10452:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   10456:	bd70      	pop	{r4, r5, r6, pc}

00010458 <__aeabi_ddiv>:
   10458:	b570      	push	{r4, r5, r6, lr}
   1045a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1045e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   10466:	bf1d      	ittte	ne
   10468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1046c:	ea94 0f0c 	teqne	r4, ip
   10470:	ea95 0f0c 	teqne	r5, ip
   10474:	f000 f8a7 	bleq	105c6 <__aeabi_ddiv+0x16e>
   10478:	eba4 0405 	sub.w	r4, r4, r5
   1047c:	ea81 0e03 	eor.w	lr, r1, r3
   10480:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10484:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10488:	f000 8088 	beq.w	1059c <__aeabi_ddiv+0x144>
   1048c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10490:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10494:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   10498:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1049c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   104a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   104a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   104a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   104ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   104b0:	429d      	cmp	r5, r3
   104b2:	bf08      	it	eq
   104b4:	4296      	cmpeq	r6, r2
   104b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   104ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   104be:	d202      	bcs.n	104c6 <__aeabi_ddiv+0x6e>
   104c0:	085b      	lsrs	r3, r3, #1
   104c2:	ea4f 0232 	mov.w	r2, r2, rrx
   104c6:	1ab6      	subs	r6, r6, r2
   104c8:	eb65 0503 	sbc.w	r5, r5, r3
   104cc:	085b      	lsrs	r3, r3, #1
   104ce:	ea4f 0232 	mov.w	r2, r2, rrx
   104d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   104d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   104da:	ebb6 0e02 	subs.w	lr, r6, r2
   104de:	eb75 0e03 	sbcs.w	lr, r5, r3
   104e2:	bf22      	ittt	cs
   104e4:	1ab6      	subcs	r6, r6, r2
   104e6:	4675      	movcs	r5, lr
   104e8:	ea40 000c 	orrcs.w	r0, r0, ip
   104ec:	085b      	lsrs	r3, r3, #1
   104ee:	ea4f 0232 	mov.w	r2, r2, rrx
   104f2:	ebb6 0e02 	subs.w	lr, r6, r2
   104f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   104fa:	bf22      	ittt	cs
   104fc:	1ab6      	subcs	r6, r6, r2
   104fe:	4675      	movcs	r5, lr
   10500:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10504:	085b      	lsrs	r3, r3, #1
   10506:	ea4f 0232 	mov.w	r2, r2, rrx
   1050a:	ebb6 0e02 	subs.w	lr, r6, r2
   1050e:	eb75 0e03 	sbcs.w	lr, r5, r3
   10512:	bf22      	ittt	cs
   10514:	1ab6      	subcs	r6, r6, r2
   10516:	4675      	movcs	r5, lr
   10518:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1051c:	085b      	lsrs	r3, r3, #1
   1051e:	ea4f 0232 	mov.w	r2, r2, rrx
   10522:	ebb6 0e02 	subs.w	lr, r6, r2
   10526:	eb75 0e03 	sbcs.w	lr, r5, r3
   1052a:	bf22      	ittt	cs
   1052c:	1ab6      	subcs	r6, r6, r2
   1052e:	4675      	movcs	r5, lr
   10530:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   10534:	ea55 0e06 	orrs.w	lr, r5, r6
   10538:	d018      	beq.n	1056c <__aeabi_ddiv+0x114>
   1053a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1053e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   10542:	ea4f 1606 	mov.w	r6, r6, lsl #4
   10546:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1054a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1054e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10552:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   10556:	d1c0      	bne.n	104da <__aeabi_ddiv+0x82>
   10558:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1055c:	d10b      	bne.n	10576 <__aeabi_ddiv+0x11e>
   1055e:	ea41 0100 	orr.w	r1, r1, r0
   10562:	f04f 0000 	mov.w	r0, #0
   10566:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1056a:	e7b6      	b.n	104da <__aeabi_ddiv+0x82>
   1056c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10570:	bf04      	itt	eq
   10572:	4301      	orreq	r1, r0
   10574:	2000      	moveq	r0, #0
   10576:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1057a:	bf88      	it	hi
   1057c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10580:	f63f aeaf 	bhi.w	102e2 <__aeabi_dmul+0xde>
   10584:	ebb5 0c03 	subs.w	ip, r5, r3
   10588:	bf04      	itt	eq
   1058a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1058e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10592:	f150 0000 	adcs.w	r0, r0, #0
   10596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1059a:	bd70      	pop	{r4, r5, r6, pc}
   1059c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   105a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   105a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   105a8:	bfc2      	ittt	gt
   105aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   105ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   105b2:	bd70      	popgt	{r4, r5, r6, pc}
   105b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   105b8:	f04f 0e00 	mov.w	lr, #0
   105bc:	3c01      	subs	r4, #1
   105be:	e690      	b.n	102e2 <__aeabi_dmul+0xde>
   105c0:	ea45 0e06 	orr.w	lr, r5, r6
   105c4:	e68d      	b.n	102e2 <__aeabi_dmul+0xde>
   105c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   105ca:	ea94 0f0c 	teq	r4, ip
   105ce:	bf08      	it	eq
   105d0:	ea95 0f0c 	teqeq	r5, ip
   105d4:	f43f af3b 	beq.w	1044e <__aeabi_dmul+0x24a>
   105d8:	ea94 0f0c 	teq	r4, ip
   105dc:	d10a      	bne.n	105f4 <__aeabi_ddiv+0x19c>
   105de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   105e2:	f47f af34 	bne.w	1044e <__aeabi_dmul+0x24a>
   105e6:	ea95 0f0c 	teq	r5, ip
   105ea:	f47f af25 	bne.w	10438 <__aeabi_dmul+0x234>
   105ee:	4610      	mov	r0, r2
   105f0:	4619      	mov	r1, r3
   105f2:	e72c      	b.n	1044e <__aeabi_dmul+0x24a>
   105f4:	ea95 0f0c 	teq	r5, ip
   105f8:	d106      	bne.n	10608 <__aeabi_ddiv+0x1b0>
   105fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   105fe:	f43f aefd 	beq.w	103fc <__aeabi_dmul+0x1f8>
   10602:	4610      	mov	r0, r2
   10604:	4619      	mov	r1, r3
   10606:	e722      	b.n	1044e <__aeabi_dmul+0x24a>
   10608:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1060c:	bf18      	it	ne
   1060e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10612:	f47f aec5 	bne.w	103a0 <__aeabi_dmul+0x19c>
   10616:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1061a:	f47f af0d 	bne.w	10438 <__aeabi_dmul+0x234>
   1061e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   10622:	f47f aeeb 	bne.w	103fc <__aeabi_dmul+0x1f8>
   10626:	e712      	b.n	1044e <__aeabi_dmul+0x24a>

00010628 <__gedf2>:
   10628:	f04f 3cff 	mov.w	ip, #4294967295
   1062c:	e006      	b.n	1063c <__cmpdf2+0x4>
   1062e:	bf00      	nop

00010630 <__ledf2>:
   10630:	f04f 0c01 	mov.w	ip, #1
   10634:	e002      	b.n	1063c <__cmpdf2+0x4>
   10636:	bf00      	nop

00010638 <__cmpdf2>:
   10638:	f04f 0c01 	mov.w	ip, #1
   1063c:	f84d cd04 	str.w	ip, [sp, #-4]!
   10640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1064c:	bf18      	it	ne
   1064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   10652:	d01b      	beq.n	1068c <__cmpdf2+0x54>
   10654:	b001      	add	sp, #4
   10656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1065a:	bf0c      	ite	eq
   1065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10660:	ea91 0f03 	teqne	r1, r3
   10664:	bf02      	ittt	eq
   10666:	ea90 0f02 	teqeq	r0, r2
   1066a:	2000      	moveq	r0, #0
   1066c:	4770      	bxeq	lr
   1066e:	f110 0f00 	cmn.w	r0, #0
   10672:	ea91 0f03 	teq	r1, r3
   10676:	bf58      	it	pl
   10678:	4299      	cmppl	r1, r3
   1067a:	bf08      	it	eq
   1067c:	4290      	cmpeq	r0, r2
   1067e:	bf2c      	ite	cs
   10680:	17d8      	asrcs	r0, r3, #31
   10682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   10686:	f040 0001 	orr.w	r0, r0, #1
   1068a:	4770      	bx	lr
   1068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10694:	d102      	bne.n	1069c <__cmpdf2+0x64>
   10696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1069a:	d107      	bne.n	106ac <__cmpdf2+0x74>
   1069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   106a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   106a4:	d1d6      	bne.n	10654 <__cmpdf2+0x1c>
   106a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   106aa:	d0d3      	beq.n	10654 <__cmpdf2+0x1c>
   106ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   106b0:	4770      	bx	lr
   106b2:	bf00      	nop

000106b4 <__aeabi_cdrcmple>:
   106b4:	4684      	mov	ip, r0
   106b6:	4610      	mov	r0, r2
   106b8:	4662      	mov	r2, ip
   106ba:	468c      	mov	ip, r1
   106bc:	4619      	mov	r1, r3
   106be:	4663      	mov	r3, ip
   106c0:	e000      	b.n	106c4 <__aeabi_cdcmpeq>
   106c2:	bf00      	nop

000106c4 <__aeabi_cdcmpeq>:
   106c4:	b501      	push	{r0, lr}
   106c6:	f7ff ffb7 	bl	10638 <__cmpdf2>
   106ca:	2800      	cmp	r0, #0
   106cc:	bf48      	it	mi
   106ce:	f110 0f00 	cmnmi.w	r0, #0
   106d2:	bd01      	pop	{r0, pc}

000106d4 <__aeabi_dcmpeq>:
   106d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   106d8:	f7ff fff4 	bl	106c4 <__aeabi_cdcmpeq>
   106dc:	bf0c      	ite	eq
   106de:	2001      	moveq	r0, #1
   106e0:	2000      	movne	r0, #0
   106e2:	f85d fb08 	ldr.w	pc, [sp], #8
   106e6:	bf00      	nop

000106e8 <__aeabi_dcmplt>:
   106e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   106ec:	f7ff ffea 	bl	106c4 <__aeabi_cdcmpeq>
   106f0:	bf34      	ite	cc
   106f2:	2001      	movcc	r0, #1
   106f4:	2000      	movcs	r0, #0
   106f6:	f85d fb08 	ldr.w	pc, [sp], #8
   106fa:	bf00      	nop

000106fc <__aeabi_dcmple>:
   106fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   10700:	f7ff ffe0 	bl	106c4 <__aeabi_cdcmpeq>
   10704:	bf94      	ite	ls
   10706:	2001      	movls	r0, #1
   10708:	2000      	movhi	r0, #0
   1070a:	f85d fb08 	ldr.w	pc, [sp], #8
   1070e:	bf00      	nop

00010710 <__aeabi_dcmpge>:
   10710:	f84d ed08 	str.w	lr, [sp, #-8]!
   10714:	f7ff ffce 	bl	106b4 <__aeabi_cdrcmple>
   10718:	bf94      	ite	ls
   1071a:	2001      	movls	r0, #1
   1071c:	2000      	movhi	r0, #0
   1071e:	f85d fb08 	ldr.w	pc, [sp], #8
   10722:	bf00      	nop

00010724 <__aeabi_dcmpgt>:
   10724:	f84d ed08 	str.w	lr, [sp, #-8]!
   10728:	f7ff ffc4 	bl	106b4 <__aeabi_cdrcmple>
   1072c:	bf34      	ite	cc
   1072e:	2001      	movcc	r0, #1
   10730:	2000      	movcs	r0, #0
   10732:	f85d fb08 	ldr.w	pc, [sp], #8
   10736:	bf00      	nop

00010738 <__aeabi_dcmpun>:
   10738:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1073c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10740:	d102      	bne.n	10748 <__aeabi_dcmpun+0x10>
   10742:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10746:	d10a      	bne.n	1075e <__aeabi_dcmpun+0x26>
   10748:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1074c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10750:	d102      	bne.n	10758 <__aeabi_dcmpun+0x20>
   10752:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10756:	d102      	bne.n	1075e <__aeabi_dcmpun+0x26>
   10758:	f04f 0000 	mov.w	r0, #0
   1075c:	4770      	bx	lr
   1075e:	f04f 0001 	mov.w	r0, #1
   10762:	4770      	bx	lr

00010764 <__aeabi_d2uiz>:
   10764:	004a      	lsls	r2, r1, #1
   10766:	d211      	bcs.n	1078c <__aeabi_d2uiz+0x28>
   10768:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1076c:	d211      	bcs.n	10792 <__aeabi_d2uiz+0x2e>
   1076e:	d50d      	bpl.n	1078c <__aeabi_d2uiz+0x28>
   10770:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10774:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10778:	d40e      	bmi.n	10798 <__aeabi_d2uiz+0x34>
   1077a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1077e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10782:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10786:	fa23 f002 	lsr.w	r0, r3, r2
   1078a:	4770      	bx	lr
   1078c:	f04f 0000 	mov.w	r0, #0
   10790:	4770      	bx	lr
   10792:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10796:	d102      	bne.n	1079e <__aeabi_d2uiz+0x3a>
   10798:	f04f 30ff 	mov.w	r0, #4294967295
   1079c:	4770      	bx	lr
   1079e:	f04f 0000 	mov.w	r0, #0
   107a2:	4770      	bx	lr

000107a4 <__cxa_atexit>:
   107a4:	4613      	mov	r3, r2
   107a6:	460a      	mov	r2, r1
   107a8:	4601      	mov	r1, r0
   107aa:	2002      	movs	r0, #2
   107ac:	f000 b9b6 	b.w	10b1c <__register_exitproc>

000107b0 <__errno>:
   107b0:	4b01      	ldr	r3, [pc, #4]	; (107b8 <__errno+0x8>)
   107b2:	6818      	ldr	r0, [r3, #0]
   107b4:	4770      	bx	lr
   107b6:	bf00      	nop
   107b8:	20000118 	.word	0x20000118

000107bc <ffs>:
   107bc:	b140      	cbz	r0, 107d0 <ffs+0x14>
   107be:	2300      	movs	r3, #0
   107c0:	fa40 f103 	asr.w	r1, r0, r3
   107c4:	1c5a      	adds	r2, r3, #1
   107c6:	07c9      	lsls	r1, r1, #31
   107c8:	4613      	mov	r3, r2
   107ca:	d5f9      	bpl.n	107c0 <ffs+0x4>
   107cc:	4610      	mov	r0, r2
   107ce:	4770      	bx	lr
   107d0:	4602      	mov	r2, r0
   107d2:	4610      	mov	r0, r2
   107d4:	4770      	bx	lr
   107d6:	bf00      	nop

000107d8 <__libc_init_array>:
   107d8:	b570      	push	{r4, r5, r6, lr}
   107da:	4e0f      	ldr	r6, [pc, #60]	; (10818 <__libc_init_array+0x40>)
   107dc:	4d0f      	ldr	r5, [pc, #60]	; (1081c <__libc_init_array+0x44>)
   107de:	1b76      	subs	r6, r6, r5
   107e0:	10b6      	asrs	r6, r6, #2
   107e2:	bf18      	it	ne
   107e4:	2400      	movne	r4, #0
   107e6:	d005      	beq.n	107f4 <__libc_init_array+0x1c>
   107e8:	3401      	adds	r4, #1
   107ea:	f855 3b04 	ldr.w	r3, [r5], #4
   107ee:	4798      	blx	r3
   107f0:	42a6      	cmp	r6, r4
   107f2:	d1f9      	bne.n	107e8 <__libc_init_array+0x10>
   107f4:	4e0a      	ldr	r6, [pc, #40]	; (10820 <__libc_init_array+0x48>)
   107f6:	4d0b      	ldr	r5, [pc, #44]	; (10824 <__libc_init_array+0x4c>)
   107f8:	1b76      	subs	r6, r6, r5
   107fa:	f001 fabf 	bl	11d7c <_init>
   107fe:	10b6      	asrs	r6, r6, #2
   10800:	bf18      	it	ne
   10802:	2400      	movne	r4, #0
   10804:	d006      	beq.n	10814 <__libc_init_array+0x3c>
   10806:	3401      	adds	r4, #1
   10808:	f855 3b04 	ldr.w	r3, [r5], #4
   1080c:	4798      	blx	r3
   1080e:	42a6      	cmp	r6, r4
   10810:	d1f9      	bne.n	10806 <__libc_init_array+0x2e>
   10812:	bd70      	pop	{r4, r5, r6, pc}
   10814:	bd70      	pop	{r4, r5, r6, pc}
   10816:	bf00      	nop
   10818:	00011d88 	.word	0x00011d88
   1081c:	00011d88 	.word	0x00011d88
   10820:	00011dbc 	.word	0x00011dbc
   10824:	00011d88 	.word	0x00011d88

00010828 <memcpy>:
   10828:	4684      	mov	ip, r0
   1082a:	ea41 0300 	orr.w	r3, r1, r0
   1082e:	f013 0303 	ands.w	r3, r3, #3
   10832:	d16d      	bne.n	10910 <memcpy+0xe8>
   10834:	3a40      	subs	r2, #64	; 0x40
   10836:	d341      	bcc.n	108bc <memcpy+0x94>
   10838:	f851 3b04 	ldr.w	r3, [r1], #4
   1083c:	f840 3b04 	str.w	r3, [r0], #4
   10840:	f851 3b04 	ldr.w	r3, [r1], #4
   10844:	f840 3b04 	str.w	r3, [r0], #4
   10848:	f851 3b04 	ldr.w	r3, [r1], #4
   1084c:	f840 3b04 	str.w	r3, [r0], #4
   10850:	f851 3b04 	ldr.w	r3, [r1], #4
   10854:	f840 3b04 	str.w	r3, [r0], #4
   10858:	f851 3b04 	ldr.w	r3, [r1], #4
   1085c:	f840 3b04 	str.w	r3, [r0], #4
   10860:	f851 3b04 	ldr.w	r3, [r1], #4
   10864:	f840 3b04 	str.w	r3, [r0], #4
   10868:	f851 3b04 	ldr.w	r3, [r1], #4
   1086c:	f840 3b04 	str.w	r3, [r0], #4
   10870:	f851 3b04 	ldr.w	r3, [r1], #4
   10874:	f840 3b04 	str.w	r3, [r0], #4
   10878:	f851 3b04 	ldr.w	r3, [r1], #4
   1087c:	f840 3b04 	str.w	r3, [r0], #4
   10880:	f851 3b04 	ldr.w	r3, [r1], #4
   10884:	f840 3b04 	str.w	r3, [r0], #4
   10888:	f851 3b04 	ldr.w	r3, [r1], #4
   1088c:	f840 3b04 	str.w	r3, [r0], #4
   10890:	f851 3b04 	ldr.w	r3, [r1], #4
   10894:	f840 3b04 	str.w	r3, [r0], #4
   10898:	f851 3b04 	ldr.w	r3, [r1], #4
   1089c:	f840 3b04 	str.w	r3, [r0], #4
   108a0:	f851 3b04 	ldr.w	r3, [r1], #4
   108a4:	f840 3b04 	str.w	r3, [r0], #4
   108a8:	f851 3b04 	ldr.w	r3, [r1], #4
   108ac:	f840 3b04 	str.w	r3, [r0], #4
   108b0:	f851 3b04 	ldr.w	r3, [r1], #4
   108b4:	f840 3b04 	str.w	r3, [r0], #4
   108b8:	3a40      	subs	r2, #64	; 0x40
   108ba:	d2bd      	bcs.n	10838 <memcpy+0x10>
   108bc:	3230      	adds	r2, #48	; 0x30
   108be:	d311      	bcc.n	108e4 <memcpy+0xbc>
   108c0:	f851 3b04 	ldr.w	r3, [r1], #4
   108c4:	f840 3b04 	str.w	r3, [r0], #4
   108c8:	f851 3b04 	ldr.w	r3, [r1], #4
   108cc:	f840 3b04 	str.w	r3, [r0], #4
   108d0:	f851 3b04 	ldr.w	r3, [r1], #4
   108d4:	f840 3b04 	str.w	r3, [r0], #4
   108d8:	f851 3b04 	ldr.w	r3, [r1], #4
   108dc:	f840 3b04 	str.w	r3, [r0], #4
   108e0:	3a10      	subs	r2, #16
   108e2:	d2ed      	bcs.n	108c0 <memcpy+0x98>
   108e4:	320c      	adds	r2, #12
   108e6:	d305      	bcc.n	108f4 <memcpy+0xcc>
   108e8:	f851 3b04 	ldr.w	r3, [r1], #4
   108ec:	f840 3b04 	str.w	r3, [r0], #4
   108f0:	3a04      	subs	r2, #4
   108f2:	d2f9      	bcs.n	108e8 <memcpy+0xc0>
   108f4:	3204      	adds	r2, #4
   108f6:	d008      	beq.n	1090a <memcpy+0xe2>
   108f8:	07d2      	lsls	r2, r2, #31
   108fa:	bf1c      	itt	ne
   108fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10900:	f800 3b01 	strbne.w	r3, [r0], #1
   10904:	d301      	bcc.n	1090a <memcpy+0xe2>
   10906:	880b      	ldrh	r3, [r1, #0]
   10908:	8003      	strh	r3, [r0, #0]
   1090a:	4660      	mov	r0, ip
   1090c:	4770      	bx	lr
   1090e:	bf00      	nop
   10910:	2a08      	cmp	r2, #8
   10912:	d313      	bcc.n	1093c <memcpy+0x114>
   10914:	078b      	lsls	r3, r1, #30
   10916:	d08d      	beq.n	10834 <memcpy+0xc>
   10918:	f010 0303 	ands.w	r3, r0, #3
   1091c:	d08a      	beq.n	10834 <memcpy+0xc>
   1091e:	f1c3 0304 	rsb	r3, r3, #4
   10922:	1ad2      	subs	r2, r2, r3
   10924:	07db      	lsls	r3, r3, #31
   10926:	bf1c      	itt	ne
   10928:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1092c:	f800 3b01 	strbne.w	r3, [r0], #1
   10930:	d380      	bcc.n	10834 <memcpy+0xc>
   10932:	f831 3b02 	ldrh.w	r3, [r1], #2
   10936:	f820 3b02 	strh.w	r3, [r0], #2
   1093a:	e77b      	b.n	10834 <memcpy+0xc>
   1093c:	3a04      	subs	r2, #4
   1093e:	d3d9      	bcc.n	108f4 <memcpy+0xcc>
   10940:	3a01      	subs	r2, #1
   10942:	f811 3b01 	ldrb.w	r3, [r1], #1
   10946:	f800 3b01 	strb.w	r3, [r0], #1
   1094a:	d2f9      	bcs.n	10940 <memcpy+0x118>
   1094c:	780b      	ldrb	r3, [r1, #0]
   1094e:	7003      	strb	r3, [r0, #0]
   10950:	784b      	ldrb	r3, [r1, #1]
   10952:	7043      	strb	r3, [r0, #1]
   10954:	788b      	ldrb	r3, [r1, #2]
   10956:	7083      	strb	r3, [r0, #2]
   10958:	4660      	mov	r0, ip
   1095a:	4770      	bx	lr

0001095c <memset>:
   1095c:	b470      	push	{r4, r5, r6}
   1095e:	0786      	lsls	r6, r0, #30
   10960:	d046      	beq.n	109f0 <memset+0x94>
   10962:	1e54      	subs	r4, r2, #1
   10964:	2a00      	cmp	r2, #0
   10966:	d041      	beq.n	109ec <memset+0x90>
   10968:	b2ca      	uxtb	r2, r1
   1096a:	4603      	mov	r3, r0
   1096c:	e002      	b.n	10974 <memset+0x18>
   1096e:	f114 34ff 	adds.w	r4, r4, #4294967295
   10972:	d33b      	bcc.n	109ec <memset+0x90>
   10974:	f803 2b01 	strb.w	r2, [r3], #1
   10978:	079d      	lsls	r5, r3, #30
   1097a:	d1f8      	bne.n	1096e <memset+0x12>
   1097c:	2c03      	cmp	r4, #3
   1097e:	d92e      	bls.n	109de <memset+0x82>
   10980:	b2cd      	uxtb	r5, r1
   10982:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10986:	2c0f      	cmp	r4, #15
   10988:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1098c:	d919      	bls.n	109c2 <memset+0x66>
   1098e:	f103 0210 	add.w	r2, r3, #16
   10992:	4626      	mov	r6, r4
   10994:	3e10      	subs	r6, #16
   10996:	2e0f      	cmp	r6, #15
   10998:	f842 5c10 	str.w	r5, [r2, #-16]
   1099c:	f842 5c0c 	str.w	r5, [r2, #-12]
   109a0:	f842 5c08 	str.w	r5, [r2, #-8]
   109a4:	f842 5c04 	str.w	r5, [r2, #-4]
   109a8:	f102 0210 	add.w	r2, r2, #16
   109ac:	d8f2      	bhi.n	10994 <memset+0x38>
   109ae:	f1a4 0210 	sub.w	r2, r4, #16
   109b2:	f022 020f 	bic.w	r2, r2, #15
   109b6:	f004 040f 	and.w	r4, r4, #15
   109ba:	3210      	adds	r2, #16
   109bc:	2c03      	cmp	r4, #3
   109be:	4413      	add	r3, r2
   109c0:	d90d      	bls.n	109de <memset+0x82>
   109c2:	461e      	mov	r6, r3
   109c4:	4622      	mov	r2, r4
   109c6:	3a04      	subs	r2, #4
   109c8:	2a03      	cmp	r2, #3
   109ca:	f846 5b04 	str.w	r5, [r6], #4
   109ce:	d8fa      	bhi.n	109c6 <memset+0x6a>
   109d0:	1f22      	subs	r2, r4, #4
   109d2:	f022 0203 	bic.w	r2, r2, #3
   109d6:	3204      	adds	r2, #4
   109d8:	4413      	add	r3, r2
   109da:	f004 0403 	and.w	r4, r4, #3
   109de:	b12c      	cbz	r4, 109ec <memset+0x90>
   109e0:	b2c9      	uxtb	r1, r1
   109e2:	441c      	add	r4, r3
   109e4:	f803 1b01 	strb.w	r1, [r3], #1
   109e8:	429c      	cmp	r4, r3
   109ea:	d1fb      	bne.n	109e4 <memset+0x88>
   109ec:	bc70      	pop	{r4, r5, r6}
   109ee:	4770      	bx	lr
   109f0:	4614      	mov	r4, r2
   109f2:	4603      	mov	r3, r0
   109f4:	e7c2      	b.n	1097c <memset+0x20>
   109f6:	bf00      	nop

000109f8 <rand>:
   109f8:	b410      	push	{r4}
   109fa:	4b0c      	ldr	r3, [pc, #48]	; (10a2c <rand+0x34>)
   109fc:	480c      	ldr	r0, [pc, #48]	; (10a30 <rand+0x38>)
   109fe:	6819      	ldr	r1, [r3, #0]
   10a00:	4c0c      	ldr	r4, [pc, #48]	; (10a34 <rand+0x3c>)
   10a02:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   10a06:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   10a0a:	fb00 f002 	mul.w	r0, r0, r2
   10a0e:	fb04 0003 	mla	r0, r4, r3, r0
   10a12:	fba2 2304 	umull	r2, r3, r2, r4
   10a16:	4403      	add	r3, r0
   10a18:	3201      	adds	r2, #1
   10a1a:	f143 0300 	adc.w	r3, r3, #0
   10a1e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   10a22:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   10a26:	bc10      	pop	{r4}
   10a28:	4770      	bx	lr
   10a2a:	bf00      	nop
   10a2c:	20000118 	.word	0x20000118
   10a30:	5851f42d 	.word	0x5851f42d
   10a34:	4c957f2d 	.word	0x4c957f2d
	...

00010a40 <strlen>:
   10a40:	f890 f000 	pld	[r0]
   10a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10a48:	f020 0107 	bic.w	r1, r0, #7
   10a4c:	f06f 0c00 	mvn.w	ip, #0
   10a50:	f010 0407 	ands.w	r4, r0, #7
   10a54:	f891 f020 	pld	[r1, #32]
   10a58:	f040 8049 	bne.w	10aee <strlen+0xae>
   10a5c:	f04f 0400 	mov.w	r4, #0
   10a60:	f06f 0007 	mvn.w	r0, #7
   10a64:	e9d1 2300 	ldrd	r2, r3, [r1]
   10a68:	f891 f040 	pld	[r1, #64]	; 0x40
   10a6c:	f100 0008 	add.w	r0, r0, #8
   10a70:	fa82 f24c 	uadd8	r2, r2, ip
   10a74:	faa4 f28c 	sel	r2, r4, ip
   10a78:	fa83 f34c 	uadd8	r3, r3, ip
   10a7c:	faa2 f38c 	sel	r3, r2, ip
   10a80:	bb4b      	cbnz	r3, 10ad6 <strlen+0x96>
   10a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10a86:	fa82 f24c 	uadd8	r2, r2, ip
   10a8a:	f100 0008 	add.w	r0, r0, #8
   10a8e:	faa4 f28c 	sel	r2, r4, ip
   10a92:	fa83 f34c 	uadd8	r3, r3, ip
   10a96:	faa2 f38c 	sel	r3, r2, ip
   10a9a:	b9e3      	cbnz	r3, 10ad6 <strlen+0x96>
   10a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10aa0:	fa82 f24c 	uadd8	r2, r2, ip
   10aa4:	f100 0008 	add.w	r0, r0, #8
   10aa8:	faa4 f28c 	sel	r2, r4, ip
   10aac:	fa83 f34c 	uadd8	r3, r3, ip
   10ab0:	faa2 f38c 	sel	r3, r2, ip
   10ab4:	b97b      	cbnz	r3, 10ad6 <strlen+0x96>
   10ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   10aba:	f101 0120 	add.w	r1, r1, #32
   10abe:	fa82 f24c 	uadd8	r2, r2, ip
   10ac2:	f100 0008 	add.w	r0, r0, #8
   10ac6:	faa4 f28c 	sel	r2, r4, ip
   10aca:	fa83 f34c 	uadd8	r3, r3, ip
   10ace:	faa2 f38c 	sel	r3, r2, ip
   10ad2:	2b00      	cmp	r3, #0
   10ad4:	d0c6      	beq.n	10a64 <strlen+0x24>
   10ad6:	2a00      	cmp	r2, #0
   10ad8:	bf04      	itt	eq
   10ada:	3004      	addeq	r0, #4
   10adc:	461a      	moveq	r2, r3
   10ade:	ba12      	rev	r2, r2
   10ae0:	fab2 f282 	clz	r2, r2
   10ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   10aec:	4770      	bx	lr
   10aee:	e9d1 2300 	ldrd	r2, r3, [r1]
   10af2:	f004 0503 	and.w	r5, r4, #3
   10af6:	f1c4 0000 	rsb	r0, r4, #0
   10afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10afe:	f014 0f04 	tst.w	r4, #4
   10b02:	f891 f040 	pld	[r1, #64]	; 0x40
   10b06:	fa0c f505 	lsl.w	r5, ip, r5
   10b0a:	ea62 0205 	orn	r2, r2, r5
   10b0e:	bf1c      	itt	ne
   10b10:	ea63 0305 	ornne	r3, r3, r5
   10b14:	4662      	movne	r2, ip
   10b16:	f04f 0400 	mov.w	r4, #0
   10b1a:	e7a9      	b.n	10a70 <strlen+0x30>

00010b1c <__register_exitproc>:
   10b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10b20:	4d2c      	ldr	r5, [pc, #176]	; (10bd4 <__register_exitproc+0xb8>)
   10b22:	4606      	mov	r6, r0
   10b24:	6828      	ldr	r0, [r5, #0]
   10b26:	4698      	mov	r8, r3
   10b28:	460f      	mov	r7, r1
   10b2a:	4691      	mov	r9, r2
   10b2c:	f000 f882 	bl	10c34 <__retarget_lock_acquire_recursive>
   10b30:	4b29      	ldr	r3, [pc, #164]	; (10bd8 <__register_exitproc+0xbc>)
   10b32:	681c      	ldr	r4, [r3, #0]
   10b34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10b38:	2b00      	cmp	r3, #0
   10b3a:	d03e      	beq.n	10bba <__register_exitproc+0x9e>
   10b3c:	685a      	ldr	r2, [r3, #4]
   10b3e:	2a1f      	cmp	r2, #31
   10b40:	dc1c      	bgt.n	10b7c <__register_exitproc+0x60>
   10b42:	f102 0e01 	add.w	lr, r2, #1
   10b46:	b176      	cbz	r6, 10b66 <__register_exitproc+0x4a>
   10b48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   10b4c:	2401      	movs	r4, #1
   10b4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10b52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10b56:	4094      	lsls	r4, r2
   10b58:	4320      	orrs	r0, r4
   10b5a:	2e02      	cmp	r6, #2
   10b5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10b60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10b64:	d023      	beq.n	10bae <__register_exitproc+0x92>
   10b66:	3202      	adds	r2, #2
   10b68:	f8c3 e004 	str.w	lr, [r3, #4]
   10b6c:	6828      	ldr	r0, [r5, #0]
   10b6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10b72:	f000 f861 	bl	10c38 <__retarget_lock_release_recursive>
   10b76:	2000      	movs	r0, #0
   10b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b7c:	4b17      	ldr	r3, [pc, #92]	; (10bdc <__register_exitproc+0xc0>)
   10b7e:	b30b      	cbz	r3, 10bc4 <__register_exitproc+0xa8>
   10b80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10b84:	f7ef fe61 	bl	84a <malloc>
   10b88:	4603      	mov	r3, r0
   10b8a:	b1d8      	cbz	r0, 10bc4 <__register_exitproc+0xa8>
   10b8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10b90:	6002      	str	r2, [r0, #0]
   10b92:	2100      	movs	r1, #0
   10b94:	6041      	str	r1, [r0, #4]
   10b96:	460a      	mov	r2, r1
   10b98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   10b9c:	f04f 0e01 	mov.w	lr, #1
   10ba0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10ba4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10ba8:	2e00      	cmp	r6, #0
   10baa:	d0dc      	beq.n	10b66 <__register_exitproc+0x4a>
   10bac:	e7cc      	b.n	10b48 <__register_exitproc+0x2c>
   10bae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10bb2:	430c      	orrs	r4, r1
   10bb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10bb8:	e7d5      	b.n	10b66 <__register_exitproc+0x4a>
   10bba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   10bbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10bc2:	e7bb      	b.n	10b3c <__register_exitproc+0x20>
   10bc4:	6828      	ldr	r0, [r5, #0]
   10bc6:	f000 f837 	bl	10c38 <__retarget_lock_release_recursive>
   10bca:	f04f 30ff 	mov.w	r0, #4294967295
   10bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10bd2:	bf00      	nop
   10bd4:	20000548 	.word	0x20000548
   10bd8:	00011d78 	.word	0x00011d78
   10bdc:	0000084b 	.word	0x0000084b

00010be0 <register_fini>:
   10be0:	4b02      	ldr	r3, [pc, #8]	; (10bec <register_fini+0xc>)
   10be2:	b113      	cbz	r3, 10bea <register_fini+0xa>
   10be4:	4802      	ldr	r0, [pc, #8]	; (10bf0 <register_fini+0x10>)
   10be6:	f000 b805 	b.w	10bf4 <atexit>
   10bea:	4770      	bx	lr
   10bec:	00000000 	.word	0x00000000
   10bf0:	00010c01 	.word	0x00010c01

00010bf4 <atexit>:
   10bf4:	2300      	movs	r3, #0
   10bf6:	4601      	mov	r1, r0
   10bf8:	461a      	mov	r2, r3
   10bfa:	4618      	mov	r0, r3
   10bfc:	f7ff bf8e 	b.w	10b1c <__register_exitproc>

00010c00 <__libc_fini_array>:
   10c00:	b538      	push	{r3, r4, r5, lr}
   10c02:	4c0a      	ldr	r4, [pc, #40]	; (10c2c <__libc_fini_array+0x2c>)
   10c04:	4d0a      	ldr	r5, [pc, #40]	; (10c30 <__libc_fini_array+0x30>)
   10c06:	1b64      	subs	r4, r4, r5
   10c08:	10a4      	asrs	r4, r4, #2
   10c0a:	d00a      	beq.n	10c22 <__libc_fini_array+0x22>
   10c0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10c10:	3b01      	subs	r3, #1
   10c12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10c16:	3c01      	subs	r4, #1
   10c18:	f855 3904 	ldr.w	r3, [r5], #-4
   10c1c:	4798      	blx	r3
   10c1e:	2c00      	cmp	r4, #0
   10c20:	d1f9      	bne.n	10c16 <__libc_fini_array+0x16>
   10c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c26:	f001 b8c9 	b.w	11dbc <_fini>
   10c2a:	bf00      	nop
   10c2c:	00011dcc 	.word	0x00011dcc
   10c30:	00011dc8 	.word	0x00011dc8

00010c34 <__retarget_lock_acquire_recursive>:
   10c34:	4770      	bx	lr
   10c36:	bf00      	nop

00010c38 <__retarget_lock_release_recursive>:
   10c38:	4770      	bx	lr
   10c3a:	bf00      	nop

00010c3c <_ZTV17ARINC_Conversions>:
	...
   10c44:	0515 0000 03e5 0000                         ........

00010c4c <_ZL5Mesg1>:
   10c4c:	5241 4e49 2043 614c 6562 3a6c 0020 0000     ARINC Label: ...

00010c5c <_ZL5Mesg2>:
   10c5c:	6144 6174 203a 0000                         Data: ..

00010c64 <_ZL10HexToAscii>:
   10c64:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

00010c74 <_ZL11HistoryMesg>:
   10c74:	6948 7473 726f 2079 4946 4f46 203a 0000     History FIFO: ..
   10c84:	0d0a 4948 332d 3935 2033 6166 6c69 6465     ..HI-3593 failed
   10c94:	7420 206f 6e69 7469 6c69 7a69 0a65 000d      to initilize...
   10ca4:	0d0a 2d0a 2d2d 6820 3273 4120 4952 434e     ...--- hs2 ARINC
   10cb4:	4920 746e 7265 6166 6563 2020 2d2d 2d2d      Interface  ----
   10cc4:	0d0a 0000 0a72 2d2d 212d 6f67 2074 656d     ....r.---!got me
   10cd4:	7373 6761 2165 2d2d 2d2d 0000 0d0a 7254     ssage!----....Tr
   10ce4:	6e61 6d73 7469 2620 5220 6365 6965 6576     ansmit & Receive
   10cf4:	5720 7469 2068 614c 6562 736c 4d20 646f      With Labels Mod
   10d04:	0a65 000d 0d0a 4553 464c 542d 5345 2c54     e.....SELF-TEST,
   10d14:	4920 746e 7265 616e 206c 6944 6967 6174      Internal Digita
   10d24:	206c 6f4c 706f 622d 6361 2c6b 4e20 206f     l Loop-back, No 
   10d34:	6164 6174 6920 2073 7274 6e61 6d73 7469     data is transmit
   10d44:	6574 2064 7865 6574 6e72 6c61 796c 0d0a     ted externally..
   10d54:	0000 0000 0d0a 6f20 206e 6154 6c62 2065     ...... on Table 
   10d64:	616c 6562 736c 6120 6572 4520 616e 6c62     labels are Enabl
   10d74:	6465 0000 0d0a 500a 6572 7373 5320 2d57     ed.....Press SW-
   10d84:	2031 6f74 7320 6174 7472 6920 696e 6974     1 to start initi
   10d94:	6c61 796c 0d0a 000a 2d2d 202d 7542 7474     ally....--- Butt
   10da4:	6e6f 4320 6d6f 616d 646e 2073 2d2d 0a2d     on Commands ---.
   10db4:	000d 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
   10dc4:	6f74 4420 7369 6c70 7961 5320 6174 7574     to Display Statu
   10dd4:	2073 6e61 2064 6f43 746e 6f72 206c 6552     s and Control Re
   10de4:	6967 7473 7265 0a73 000d 0000 2020 2070     gisters.....  p 
   10df4:	6f74 5020 7561 6573 0d0a 0000 2020 206d     to Pause....  m 
   10e04:	6f74 4420 7369 6c70 7961 4c20 6261 6c65     to Display Label
   10e14:	4d20 6d65 726f 0079 0d0a 003e 0d0a 7254      Memory...>...Tr
   10e24:	6e61 6d73 7469 6974 676e 0d0a 003e 0000     ansmitting..>...
   10e34:	0d0a 4948 332d 3935 2033 7453 7461 7375     ..HI-3593 Status
   10e44:	202c 6f43 746e 6f72 206c 6552 6967 7473     , Control Regist
   10e54:	7265 0d73 000a 0000 0d0a 2009 2a20 2a2a     ers........  ***
   10e64:	2a2a 5020 6572 7373 2020 7073 6361 6265     ** Press  spaceb
   10e74:	7261 7420 206f 6f63 746e 6e69 6575 2a20     ar to continue *
   10e84:	2a2a 2a2a 002a 0000 0a0a 540d 6172 736e     *****......Trans
   10e94:	696d 2074 6150 7375 6465 0d0a 0000 0000     mit Paused......
   10ea4:	0d0a 7250 7365 2073 4c4f 4445 425f 5455     ..Press OLED_BUT
   10eb4:	4f54 2d4e 2032 6f74 7420 6172 736e 696d     TON-2 to transmi
   10ec4:	2074 6e6f 2065 7266 6d61 2065 6e61 2064     t one frame and 
   10ed4:	6170 7375 0a65 000d 0d0a 7250 7365 2073     pause.....Press 
   10ee4:	4c4f 4445 425f 5455 4f54 2d4e 2033 6f74     OLED_BUTTON-3 to
   10ef4:	5220 7365 6d75 0a65 000d 0000 0d0a 7254      Resume.......Tr
   10f04:	6e61 6d73 7469 6574 2072 6552 7573 656d     ansmitter Resume
   10f14:	2e64 2e2e 0d0a 0000 0d0a 6552 6563 7669     d.........Receiv
   10f24:	7265 3120 4c20 6261 6c65 0a73 000d 0000     er 1 Labels.....
   10f34:	0d0a 6552 6563 7669 7265 3220 4c20 6261     ..Receiver 2 Lab
   10f44:	6c65 0a73 000d 0000 0d0a 7254 6e61 6d73     els.......Transm
   10f54:	7469 2620 5220 6365 6965 6576 4520 6863     it & Receive Ech
   10f64:	206f 6f4d 6564 0d0a 0000 0000 0d0a 6c53     o Mode........Sl
   10f74:	776f 5320 6570 6465 0000 0000 0d0a 6146     ow Speed......Fa
   10f84:	7473 5320 6570 6465 0000 0000 0d0a 7254     st Speed......Tr
   10f94:	6e61 6d73 7469 6574 2072 6150 6972 7974     ansmitter Parity
   10fa4:	4520 616e 6c62 6465 0000 0000 0d0a 6154      Enabled......Ta
   10fb4:	6c62 2065 616c 6562 736c 6120 6572 4520     ble labels are E
   10fc4:	616e 6c62 6465 0000 0d0a 2d0a 2d2d 4320     nabled.....--- C
   10fd4:	6e6f 6f73 656c 4320 6d6f 616d 646e 2073     onsole Commands 
   10fe4:	6548 706c 2d20 2d2d 0000 0000 2020 2050     Help ---....  P 
   10ff4:	203d 6150 6972 7974 5420 676f 6c67 2065     = Parity Toggle 
   11004:	6e6f 6f2f 6666 0000 2020 2054 203d 4654     on/off..  T = TF
   11014:	494c 2050 5420 676f 6c67 2065 6e6f 6f2f     LIP  Toggle on/o
   11024:	6666 0000 2020 2052 203d 4652 494c 2050     ff..  R = RFLIP 
   11034:	5420 676f 6c67 2065 6e6f 6f2f 6666 0000      Toggle on/off..
   11044:	2020 2053 203d 4453 4e4f 202c 4453 2c39       S = SDON, SD9,
   11054:	5320 3144 2030 6f54 6767 656c 6f20 2f6e      SD10 Toggle on/
   11064:	666f 0066 2020 2048 203d 6854 7369 4820     off.  H = This H
   11074:	6c65 2070 6150 6567 0000 0000 2020 7053     elp Page....  Sp
   11084:	6361 2065 6142 2072 203d 6944 7073 616c     ace Bar = Displa
   11094:	2079 7453 7461 7375 6120 646e 4320 6e6f     y Status and Con
   110a4:	7274 6c6f 7220 6765 0073 0000 2020 2049     trol regs...  I 
   110b4:	203d 6e49 7263 6d65 6e65 2074 654d 7373     = Increment Mess
   110c4:	6761 2065 6e61 2064 7254 6e61 6d73 7469     age and Transmit
   110d4:	202e 7845 6c70 726f 7265 4d20 646f 2065     . Explorer Mode 
   110e4:	2d20 4f20 4c4e 2159 0000 0000 2020 204d      - ONLY!....  M 
   110f4:	203d 6e45 6574 2072 7543 7473 6d6f 4d20     = Enter Custom M
   11104:	7365 6173 6567 202e 7845 6c70 726f 7265     essage. Explorer
   11114:	4d20 646f 2065 2d20 4f20 4c4e 2159 0000      Mode  - ONLY!..
   11124:	2020 4e45 4554 3d52 5420 6172 736e 696d       ENTER= Transmi
   11134:	2074 656e 7478 6d20 7365 6173 6567 202e     t next message. 
   11144:	7845 6c70 726f 7265 4d20 646f 2065 2d20     Explorer Mode  -
   11154:	4f20 4c4e 2159 0000 7830 0020 7826 3030      ONLY!..0x .&x00
   11164:	2030 0000 5854 5020 7261 7469 2079 4e4f     0 ..TX Parity ON
   11174:	0d0a 003e 5854 5020 7261 7469 2079 464f     ..>.TX Parity OF
   11184:	0a46 3e0d 0000 0000 4654 494c 2050 6553     F..>....TFLIP Se
   11194:	0a74 3e0d 0000 0000 4654 494c 2050 6c43     t..>....TFLIP Cl
   111a4:	6165 6572 0a64 3e0d 0000 0000 4552 2d43     eared..>....REC-
   111b4:	2031 4652 494c 2050 6553 0a74 3e0d 0000     1 RFLIP Set..>..
   111c4:	4552 2d43 2031 4652 494c 2050 6c43 6165     REC-1 RFLIP Clea
   111d4:	6572 0a64 3e0d 0000 4552 2d43 2032 4652     red..>..REC-2 RF
   111e4:	494c 2050 6553 0a74 3e0d 0000 4552 2d43     LIP Set..>..REC-
   111f4:	2032 4652 494c 2050 6c43 6165 6572 0a64     2 RFLIP Cleared.
   11204:	3e0d 0000 4552 2d43 2031 4453 4e4f 532c     .>..REC-1 SDON,S
   11214:	3944 6120 646e 5320 3144 2030 6553 0a74     D9 and SD10 Set.
   11224:	3e0d 0000 4552 2d43 2031 4453 4e4f 532c     .>..REC-1 SDON,S
   11234:	3944 6120 646e 5320 3144 2030 6c43 6165     D9 and SD10 Clea
   11244:	6572 0a64 3e0d 0000 4552 2d43 2032 4453     red..>..REC-2 SD
   11254:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
   11264:	6553 0a74 3e0d 0000 4552 2d43 2032 4453     Set..>..REC-2 SD
   11274:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
   11284:	6c43 6165 6572 0a64 3e0d 0000 0d0a 500a     Cleared..>.....P
   11294:	6572 7373 5320 6170 6563 4220 7261 6f20     ress Space Bar o
   112a4:	2072 5753 342d 7420 206f 6572 7573 656d     r SW-4 to resume
   112b4:	0000 0000 614c 6562 736c 2020 2030 202d     ....Labels  0 - 
   112c4:	3336 203a 0020 0000 0020 0000 0d0a 614c     63:  ... .....La
   112d4:	6562 736c 2020 3436 312d 3732 203a 0020     bels  64-127:  .
   112e4:	0d0a 614c 6562 736c 3120 3832 312d 3139     ..Labels 128-191
   112f4:	203a 0020 0d0a 614c 6562 736c 3120 3239     :  ...Labels 192
   11304:	322d 3535 203a 0020 0d0a 614c 6562 736c     -255:  ...Labels
   11314:	2020 2030 202d 3336 203a 0020 0d0a 543e       0 - 63:  ...>T
   11324:	2058 2020 4420 7461 3a61 0000 614c 6562     X    Data:..Labe
   11334:	3a6c 0000 003e 0000 6552 2d63 2031 6144     l:..>...Rec-1 Da
   11344:	6174 003a 4c50 2d31 2031 6144 6174 003a     ta:.PL1-1 Data:.
   11354:	614d 6374 3a68 0000 4c50 2d31 2032 6144     Match:..PL1-2 Da
   11364:	6174 003a 4c50 2d31 2033 6144 6174 003a     ta:.PL1-3 Data:.
   11374:	6552 2d63 2032 6144 6174 003a 4c50 2d32     Rec-2 Data:.PL2-
   11384:	2031 6144 6174 003a 4c50 2d32 2032 6144     1 Data:.PL2-2 Da
   11394:	6174 003a 4c50 2d32 2033 6144 6174 003a     ta:.PL2-3 Data:.
   113a4:	0d0a 0000 0d0a 7845 6c70 726f 7265 4d20     ......Explorer M
   113b4:	646f 0a65 000d 0000 0d0a 6c20 6261 6c65     ode....... label
   113c4:	2073 6154 6c62 2065 7369 4520 616e 6c62     s Table is Enabl
   113d4:	6465 0000 0d0a 2d0a 2d2d 4220 7475 6f74     ed.....--- Butto
   113e4:	206e 6f43 6d6d 6e61 7364 2d20 2d2d 0000     n Commands ---..
   113f4:	0d0a 2020 7073 6361 6265 7261 7420 206f     ..  spacebar to 
   11404:	6944 7073 616c 2079 7453 7461 7375 6120     Display Status a
   11414:	646e 4320 6e6f 7274 6c6f 5220 6765 7369     nd Control Regis
   11424:	6574 7372 0000 0000 0d0a 2020 4c4f 4445     ters......  OLED
   11434:	422d 5455 4f54 324e 7420 6172 736e 696d     -BUTTON2 transmi
   11444:	2074 6e6f 2065 656d 7373 6761 2065 7266     t one message fr
   11454:	6d6f 7420 6172 736e 696d 2074 7562 6666     om transmit buff
   11464:	7265 0000 0d0a 2020 204c 6f74 5020 6972     er....  L to Pri
   11474:	746e 4c20 6261 6c65 4d20 6d65 726f 0a79     nt Label Memory.
   11484:	000d 0000 0d0a 7250 7365 2073 4e45 4554     ......Press ENTE
   11494:	2052 6f74 5420 6172 736e 696d 2074 726f     R to Transmit or
   114a4:	7520 6573 7420 6568 2820 294d 6320 6d6f      use the (M) com
   114b4:	616d 646e 7420 206f 6e65 6574 2072 2061     mand to enter a 
   114c4:	7563 7473 6d6f 6d20 7365 6173 6567 0000     custom message..
   114d4:	7250 7365 2073 5753 2034 726f 7320 6170     Press SW4 or spa
   114e4:	6563 6162 2072 6f74 6320 6e6f 6974 756e     cebar to continu
   114f4:	0065 0000 7250 7365 2073 7073 6361 6265     e...Press spaceb
   11504:	7261 7420 206f 6f63 746e 6e69 6575 0000     ar to continue..
   11514:	0d0a 433e 6d6f 616d 646e 4d20 0000 0000     ..>Command M....
   11524:	0d0a 6e45 6574 2072 2033 7962 6574 2073     ..Enter 3 bytes 
   11534:	202b 414c 4542 204c 6f74 5420 6172 736e     + LABEL to Trans
   11544:	696d 2074 6f66 6c6c 776f 6465 6220 2079     mit followed by 
   11554:	4e45 4554 0a52 000d 0d0a 6f54 5420 6172     ENTER.....To Tra
   11564:	736e 696d 2c74 6520 746e 7265 3320 6220     nsmit, enter 3 b
   11574:	7479 7365 6620 6c6f 6f6c 6577 2064 7962     ytes followed by
   11584:	6120 4c20 6261 6c65 6220 7479 2065 6f66      a Label byte fo
   11594:	6c6c 776f 6465 6220 2079 4e45 4554 0a52     llowed by ENTER.
   115a4:	000d 0000 6f46 6d72 7461 203a 6942 7374     ....Format: Bits
   115b4:	3233 322d 2c35 4220 7469 3273 2d34 3731     32-25, Bits24-17
   115c4:	202c 6942 7374 3631 392d 202c 414c 4542     , Bits16-9, LABE
   115d4:	0a4c 3a0d 0000 0000 7845 6d61 6c70 3a65     L..:....Example:
   115e4:	3020 2031 3332 3420 2035 3736 4520 544e      01 23 45 67 ENT
   115f4:	5245 0d0a 003a 0000 5020 6572 7373 5220     ER..:... Press R
   11604:	5445 5255 004e 0000 5420 6172 736e 696d     ETURN... Transmi
   11614:	6974 676e 2e2e 002e 5420 6172 736e 696d     ting.... Transmi
   11624:	6574 2164 0000 0000 6f43 6d6d 6e61 2064     ted!....Command 
   11634:	3a49 4920 636e 6572 656d 746e 6420 7461     I: Increment dat
   11644:	0a61 3e0d 0000 0000                         a..>....

0001164c <_ZTV15ARINC_Interface>:
	...
   11660:	0515 0000 03e5 0000 0601 0000 0665 0000     ............e...
   11670:	0691 0000                                   ....

00011674 <_ZTT15ARINC_Interface>:
   11674:	1660 0001 1698 0001 1698 0001 1660 0001     `...........`...

00011684 <_ZTC15ARINC_Interface0_14Protocol_Class>:
	...
   11698:	0515 0000 03e5 0000 0000 0000 0000 0000     ................
   116a8:	0871 0000 2a2a 2a2a 4c20 6669 2065 7550     q...**** Life Pu
   116b8:	736c 2065 6341 6974 6176 6574 2a64 2a2a     lse Activated***
   116c8:	002a 0000 0a0d 0000 7469 7320 6f68 6c75     *.......it shoul
   116d8:	2064 6f77 6b72 0000 7469 6420 656f 2073     d work..it does 
   116e8:	6f77 6b72 0000 0000 2020 7546 636e 6974     work....  Functi
   116f8:	6e6f 6620 726f 7420 7365 6974 676e 6120     on for testing a
   11708:	206e 3269 2063 4545 5250 4d4f 0000 0000     n i2c EEPROM....
   11718:	4545 5250 4d4f 7620 7265 6669 6369 7461     EEPROM verificat
   11728:	6f69 206e 6166 6c69 6465 202e 6441 7264     ion failed. Addr
   11738:	7365 3a73 0020 0000 6220 7469 3a20 0000     ess: ... bit :..
   11748:	7257 7469 2065 202d 6552 6461 6920 2073     Write - Read is 
   11758:	7573 6363 7365 6673 6c75 6920 206e 4545     successful in EE
   11768:	5250 4d4f 6d20 6d65 726f 2079 0020 0000     PROM memory  ...
   11778:	5351 4950 5020 6f72 7267 6d61 5320 6174     QSPI Program Sta
   11788:	7472 6465 0d0a 0000 6c46 7361 2068 6164     rted....Flash da
   11798:	6174 7620 7265 6669 6369 7461 6f69 206e     ta verification 
   117a8:	6166 6c69 6465 202e 6441 7264 7365 3a73     failed. Address:
   117b8:	0020 0000 7257 7469 2065 202d 6552 6461      ...Write - Read
   117c8:	6920 2073 7573 6363 7365 6673 6c75 6920      is successful i
   117d8:	206e 5351 4950 4620 616c 6873 6d20 6d65     n QSPI Flash mem
   117e8:	726f 2079 0020 0000 2a2a 2a2a 2020 6143     ory  ...****  Ca
   117f8:	656c 646e 7261 5520 6470 7461 2065 6554     lendar Update Te
   11808:	7473 2a2a 002a 0000 6854 2075 754a 206c     st***...Thu Jul 
   11818:	3033 3120 3a38 3832 313a 2039 3032 3032     30 18:28:19 2020
   11828:	0000 0000 2a2a 2a2a 616c 7473 6420 7461     ....****last dat
   11838:	2061 6974 656d 003a 7909 6165 2072 003a     a time:..year :.
   11848:	6d09 6e6f 6874 3a20 0000 0000 6409 7961     .month :.....day
   11858:	203a 0000 6809 756f 2072 003a 6d09 6e69     : ...hour :..min
   11868:	3a20 0000 7309 6365 203a 0000 2a2a 7563      :...sec: ..**cu
   11878:	7272 6e65 2074 6164 6174 7420 6d69 3a65     rrent data time:
   11888:	0000 0000 2e2e 2e2f 2f2e 2e2e 412f 554c     ....../../../ALU
   11898:	445f 6972 6576 2f72 4c41 5f55 7244 7669     _Driver/ALU_Driv
   118a8:	7265 682f 6c70 702f 726f 2f74 7068 5f6c     er/hpl/port/hpl_
   118b8:	7067 6f69 625f 7361 2e65 0068               gpio_base.h.

000118c4 <_ZTV14Calendar_Class>:
	...
   118cc:	179d 0000 17ed 0000                         ........

000118d4 <_ZTV17DateTimeLog_Class>:
	...
   118dc:	0871 0000 0871 0000                         q...q...

000118e4 <_ZTV9CDC_Class>:
	...
   118ec:	1ef5 0000 1fa9 0000 1c0d 0000 1ebd 0000     ................
   118fc:	2025 0000 1e81 0000 1df1 0000 1e41 0000     % ..........A...
   1190c:	1edd 0000 1f2d 0000                         ....-...

00011914 <_ZTV6Stream>:
	...
   1191c:	0871 0000 20f5 0000 1c0d 0000 1c21 0000     q.... ......!...
   1192c:	0871 0000 0871 0000 0871 0000 7830 2e25     q...q...q...0x%.
   1193c:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   1194c:	766f 0066                                   ovf.

00011950 <_ZTV5Print>:
	...
   11958:	0871 0000 20f5 0000 1c0d 0000 1c21 0000     q.... ......!...
   11968:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
   11978:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
   11988:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
   11998:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
   119a8:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
   119b8:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   119c8:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
   119d8:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   119e8:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
   119f8:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   11a08:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
   11a18:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
   11a28:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   11a38:	6c61 715f 7073 5f69 7973 636e 632e 0000     al_qspi_sync.c..
   11a48:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
   11a58:	6970 6d5f 615f 7973 636e 632e 0000 0000     pi_m_async.c....
   11a68:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
   11a78:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
   11a88:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
   11a98:	632e 0000 2e2e 682f 6c61 752f 6974 736c     .c..../hal/utils
   11aa8:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
   11ab8:	0063 0000                                   c...

00011abc <_map>:
   11abc:	0004 0000 0004 0000 0005 0000 0005 0000     ................
   11acc:	0006 0000 0056 0000 0007 0000 0057 0000     ....V.......W...
   11adc:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
   11aec:	6369 632e 0000 0000                         ic.c....

00011af4 <user_mux_confs>:
   11af4:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

00011b38 <channel_confs>:
   11b38:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

00011b78 <interrupt_cfg>:
	...
   11bf8:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   11c08:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   11c18:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   11c28:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   11c38:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   11c48:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   11c58:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00011c64 <sercomspi_regs>:
   11c64:	000c 0020 0000 0002 0000 0000 004f 01ff     .. .........O...
   11c74:	0c04 3000 0000 0200 0000 0000 4f00 ff00     ...0.........O..
   11c84:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   11c94:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   11ca4:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   11cb4:	1400 4300 1800 4300                         ...C...C

00011cbc <_usb_ep_cfgs>:
   11cbc:	1d50 2000 0000 0000 0040 0000 1d90 2000     P.. ....@...... 
   11ccc:	1dd0 2000 0040 0040 1e10 2000 1e50 2000     ... @.@.... P.. 
   11cdc:	0040 0040 1e90 2000 1ed0 2000 0040 0040     @.@.... ... @.@.
   11cec:	1f10 2000 1f50 2000 0040 0040 0804 0000     ... P.. @.@.....
   11cfc:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   11d0c:	6c70 775f 7464 632e 0000 0000               pl_wdt.c....

00011d18 <n25q256a_interface>:
   11d18:	cd69 0000 ce0d 0000 cf1d 0000 d0d5 0000     i...............
   11d28:	d165 0000 2e2e 682f 6c70 702f 726f 2f74     e...../hpl/port/
   11d38:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   11d48:	2e2e 752f 6273 642f 7665 6369 2f65 7375     ../usb/device/us
   11d58:	6462 2e63 0063 0000 6f70 0077 0000 0000     bdc.c...pow.....

00011d68 <TWO52>:
   11d68:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

00011d78 <_global_impure_ptr>:
   11d78:	0120 2000                                    .. 

00011d7c <_init>:
   11d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d7e:	bf00      	nop
   11d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11d82:	bc08      	pop	{r3}
   11d84:	469e      	mov	lr, r3
   11d86:	4770      	bx	lr

00011d88 <__init_array_start>:
   11d88:	00010be1 	.word	0x00010be1

00011d8c <__frame_dummy_init_array_entry>:
   11d8c:	00000289 00000355 00000739 00000909     ....U...9.......
   11d9c:	00000a1d 00000ab5 00000e95 00001725     ............%...
   11dac:	00001a39 00001bd5 000020a5 00002851     9........ ..Q(..

00011dbc <_fini>:
   11dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dbe:	bf00      	nop
   11dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11dc2:	bc08      	pop	{r3}
   11dc4:	469e      	mov	lr, r3
   11dc6:	4770      	bx	lr

00011dc8 <__fini_array_start>:
   11dc8:	00000265 	.word	0x00000265
