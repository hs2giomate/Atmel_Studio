
ECS_Box_Objects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011738  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011738  00011738  00021738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000054c  20000000  00011740  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003054c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003054c  2**0
                  CONTENTS
  5 .bss          00001e30  20000550  00011c90  0003054c  2**3
                  ALLOC
  6 .stack        00010000  20002380  00013ac0  0003054c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003054c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003057a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00074be8  00000000  00000000  000305d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ab55  00000000  00000000  000a51bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001db89  00000000  00000000  000afd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003528  00000000  00000000  000cd899  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003168  00000000  00000000  000d0dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004f7c9  00000000  00000000  000d3f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003f589  00000000  00000000  001236f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013fcde  00000000  00000000  00162c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e388  00000000  00000000  002a295c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 23 01 20 c1 07 00 00 45 08 00 00 45 08 00 00     .#. ....E...E...
      10:	45 08 00 00 45 08 00 00 45 08 00 00 00 00 00 00     E...E...E.......
	...
      2c:	45 08 00 00 45 08 00 00 00 00 00 00 45 08 00 00     E...E.......E...
      3c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      4c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      5c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      6c:	69 72 00 00 45 08 00 00 45 08 00 00 45 08 00 00     ir..E...E...E...
      7c:	45 08 00 00 a5 60 00 00 b5 60 00 00 c5 60 00 00     E....`...`...`..
      8c:	d5 60 00 00 45 08 00 00 45 08 00 00 45 08 00 00     .`..E...E...E...
      9c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      ac:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      bc:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      cc:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      dc:	45 08 00 00 45 08 00 00 45 08 00 00 00 00 00 00     E...E...E.......
	...
      f4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     104:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     114:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     124:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     134:	45 08 00 00 a5 86 00 00 c1 86 00 00 dd 86 00 00     E...............
     144:	f9 86 00 00 15 87 00 00 31 87 00 00 4d 87 00 00     ........1...M...
     154:	69 87 00 00 45 08 00 00 45 08 00 00 45 08 00 00     i...E...E...E...
     164:	45 08 00 00 85 87 00 00 a1 87 00 00 bd 87 00 00     E...............
     174:	d9 87 00 00 45 08 00 00 25 56 00 00 3d c1 00 00     ....E...%V..=...
     184:	4d c1 00 00 5d c1 00 00 6d c1 00 00 45 08 00 00     M...]...m...E...
     194:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1a4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1b4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1c4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1d4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1e4:	45 08 00 00 45 08 00 00 6d 98 00 00 89 98 00 00     E...E...m.......
     1f4:	a5 98 00 00 c1 98 00 00 45 08 00 00 45 08 00 00     ........E...E...
     204:	45 08 00 00 dd 98 00 00 45 08 00 00 45 08 00 00     E.......E...E...
     214:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     224:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     234:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     244:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     254:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000550 	.word	0x20000550
     280:	00000000 	.word	0x00000000
     284:	00011740 	.word	0x00011740

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00011740 	.word	0x00011740
     2c4:	20000554 	.word	0x20000554
     2c8:	00011740 	.word	0x00011740
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
{
} //AMMC_Class
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	4618      	mov	r0, r3
     2dc:	370c      	adds	r7, #12
     2de:	46bd      	mov	sp, r7
     2e0:	bc80      	pop	{r7}
     2e2:	4770      	bx	lr

000002e4 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     2e4:	b480      	push	{r7}
     2e6:	b083      	sub	sp, #12
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
{
} //~AMMC_Class
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	4618      	mov	r0, r3
     2f0:	370c      	adds	r7, #12
     2f2:	46bd      	mov	sp, r7
     2f4:	bc80      	pop	{r7}
     2f6:	4770      	bx	lr

000002f8 <_Z41__static_initialization_and_destruction_0ii>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
     300:	6039      	str	r1, [r7, #0]
     302:	687b      	ldr	r3, [r7, #4]
     304:	2b01      	cmp	r3, #1
     306:	d114      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     30e:	4293      	cmp	r3, r2
     310:	d10f      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     312:	480a      	ldr	r0, [pc, #40]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     314:	4b0a      	ldr	r3, [pc, #40]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     316:	4798      	blx	r3
     318:	4a0a      	ldr	r2, [pc, #40]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     31a:	490b      	ldr	r1, [pc, #44]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     31c:	4807      	ldr	r0, [pc, #28]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     320:	4798      	blx	r3
AMMC_Class	ammc2;
     322:	480b      	ldr	r0, [pc, #44]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     326:	4798      	blx	r3
     328:	4a06      	ldr	r2, [pc, #24]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     32a:	4907      	ldr	r1, [pc, #28]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     32c:	4808      	ldr	r0, [pc, #32]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     32e:	4b07      	ldr	r3, [pc, #28]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     330:	4798      	blx	r3
     332:	bf00      	nop
     334:	3708      	adds	r7, #8
     336:	46bd      	mov	sp, r7
     338:	bd80      	pop	{r7, pc}
     33a:	bf00      	nop
     33c:	2000056c 	.word	0x2000056c
     340:	000002d1 	.word	0x000002d1
     344:	20000000 	.word	0x20000000
     348:	000002e5 	.word	0x000002e5
     34c:	0000e6cd 	.word	0x0000e6cd
     350:	20000570 	.word	0x20000570

00000354 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     354:	b580      	push	{r7, lr}
     356:	af00      	add	r7, sp, #0
     358:	f64f 71ff 	movw	r1, #65535	; 0xffff
     35c:	2001      	movs	r0, #1
     35e:	4b01      	ldr	r3, [pc, #4]	; (364 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     360:	4798      	blx	r3
     362:	bd80      	pop	{r7, pc}
     364:	000002f9 	.word	0x000002f9

00000368 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
     370:	4a04      	ldr	r2, [pc, #16]	; (384 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
     372:	687b      	ldr	r3, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
     376:	687b      	ldr	r3, [r7, #4]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	bc80      	pop	{r7}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	000105c4 	.word	0x000105c4

00000388 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
     390:	4a04      	ldr	r2, [pc, #16]	; (3a4 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
     392:	687b      	ldr	r3, [r7, #4]
     394:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
     396:	687b      	ldr	r3, [r7, #4]
     398:	4618      	mov	r0, r3
     39a:	370c      	adds	r7, #12
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	000105c4 	.word	0x000105c4

000003a8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
     3a8:	b5b0      	push	{r4, r5, r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     3b2:	4b0a      	ldr	r3, [pc, #40]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	4798      	blx	r3
     3b8:	4604      	mov	r4, r0
     3ba:	460d      	mov	r5, r1
     3bc:	4b07      	ldr	r3, [pc, #28]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3be:	6838      	ldr	r0, [r7, #0]
     3c0:	4798      	blx	r3
     3c2:	4602      	mov	r2, r0
     3c4:	460b      	mov	r3, r1
     3c6:	4620      	mov	r0, r4
     3c8:	4629      	mov	r1, r5
     3ca:	4c05      	ldr	r4, [pc, #20]	; (3e0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
     3cc:	47a0      	blx	r4
     3ce:	4603      	mov	r3, r0
     3d0:	460c      	mov	r4, r1
    }
     3d2:	4618      	mov	r0, r3
     3d4:	4621      	mov	r1, r4
     3d6:	3708      	adds	r7, #8
     3d8:	46bd      	mov	sp, r7
     3da:	bdb0      	pop	{r4, r5, r7, pc}
     3dc:	0000fac9 	.word	0x0000fac9
     3e0:	0000e6dd 	.word	0x0000e6dd

000003e4 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
     3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3e8:	b085      	sub	sp, #20
     3ea:	af00      	add	r7, sp, #0
     3ec:	6078      	str	r0, [r7, #4]
     3ee:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
     3f0:	2300      	movs	r3, #0
     3f2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     3f4:	2300      	movs	r3, #0
     3f6:	73bb      	strb	r3, [r7, #14]
     3f8:	7bbb      	ldrb	r3, [r7, #14]
     3fa:	2b02      	cmp	r3, #2
     3fc:	d86d      	bhi.n	4da <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
     3fe:	7bbb      	ldrb	r3, [r7, #14]
     400:	f1c3 0402 	rsb	r4, r3, #2
     404:	4b3c      	ldr	r3, [pc, #240]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     406:	6838      	ldr	r0, [r7, #0]
     408:	4798      	blx	r3
     40a:	4680      	mov	r8, r0
     40c:	4689      	mov	r9, r1
     40e:	7bbb      	ldrb	r3, [r7, #14]
     410:	f1c3 0302 	rsb	r3, r3, #2
     414:	4619      	mov	r1, r3
     416:	200a      	movs	r0, #10
     418:	4b38      	ldr	r3, [pc, #224]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     41a:	4798      	blx	r3
     41c:	4602      	mov	r2, r0
     41e:	460b      	mov	r3, r1
     420:	4d37      	ldr	r5, [pc, #220]	; (500 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
     422:	4640      	mov	r0, r8
     424:	4649      	mov	r1, r9
     426:	47a8      	blx	r5
     428:	4602      	mov	r2, r0
     42a:	460b      	mov	r3, r1
     42c:	4611      	mov	r1, r2
     42e:	461a      	mov	r2, r3
     430:	4b34      	ldr	r3, [pc, #208]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     432:	4608      	mov	r0, r1
     434:	4611      	mov	r1, r2
     436:	4798      	blx	r3
     438:	4603      	mov	r3, r0
     43a:	b2da      	uxtb	r2, r3
     43c:	f107 0310 	add.w	r3, r7, #16
     440:	4423      	add	r3, r4
     442:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
     446:	7bbb      	ldrb	r3, [r7, #14]
     448:	f1c3 0302 	rsb	r3, r3, #2
     44c:	f107 0210 	add.w	r2, r7, #16
     450:	4413      	add	r3, r2
     452:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     456:	461a      	mov	r2, r3
     458:	4b2b      	ldr	r3, [pc, #172]	; (508 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
     45a:	4610      	mov	r0, r2
     45c:	4798      	blx	r3
     45e:	4605      	mov	r5, r0
     460:	460e      	mov	r6, r1
     462:	7bbb      	ldrb	r3, [r7, #14]
     464:	f1c3 0302 	rsb	r3, r3, #2
     468:	4619      	mov	r1, r3
     46a:	200a      	movs	r0, #10
     46c:	4b23      	ldr	r3, [pc, #140]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     46e:	4798      	blx	r3
     470:	4602      	mov	r2, r0
     472:	460b      	mov	r3, r1
     474:	4c25      	ldr	r4, [pc, #148]	; (50c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
     476:	4628      	mov	r0, r5
     478:	4631      	mov	r1, r6
     47a:	47a0      	blx	r4
     47c:	4603      	mov	r3, r0
     47e:	460c      	mov	r4, r1
     480:	461d      	mov	r5, r3
     482:	4626      	mov	r6, r4
     484:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     486:	6838      	ldr	r0, [r7, #0]
     488:	4798      	blx	r3
     48a:	4c21      	ldr	r4, [pc, #132]	; (510 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
     48c:	462a      	mov	r2, r5
     48e:	4633      	mov	r3, r6
     490:	47a0      	blx	r4
     492:	4603      	mov	r3, r0
     494:	460c      	mov	r4, r1
     496:	4619      	mov	r1, r3
     498:	4622      	mov	r2, r4
     49a:	4b1a      	ldr	r3, [pc, #104]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     49c:	4608      	mov	r0, r1
     49e:	4611      	mov	r1, r2
     4a0:	4798      	blx	r3
     4a2:	4603      	mov	r3, r0
     4a4:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
     4a6:	7bbb      	ldrb	r3, [r7, #14]
     4a8:	f1c3 0302 	rsb	r3, r3, #2
     4ac:	f107 0210 	add.w	r2, r7, #16
     4b0:	4413      	add	r3, r2
     4b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     4b6:	461a      	mov	r2, r3
     4b8:	7bbb      	ldrb	r3, [r7, #14]
     4ba:	4619      	mov	r1, r3
     4bc:	009b      	lsls	r3, r3, #2
     4be:	1acb      	subs	r3, r1, r3
     4c0:	3306      	adds	r3, #6
     4c2:	fa02 f303 	lsl.w	r3, r2, r3
     4c6:	b25a      	sxtb	r2, r3
     4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
     4cc:	4313      	orrs	r3, r2
     4ce:	b25b      	sxtb	r3, r3
     4d0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     4d2:	7bbb      	ldrb	r3, [r7, #14]
     4d4:	3301      	adds	r3, #1
     4d6:	73bb      	strb	r3, [r7, #14]
     4d8:	e78e      	b.n	3f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	7bfa      	ldrb	r2, [r7, #15]
     4e2:	4611      	mov	r1, r2
     4e4:	6878      	ldr	r0, [r7, #4]
     4e6:	4798      	blx	r3
     4e8:	4603      	mov	r3, r0
     4ea:	73fb      	strb	r3, [r7, #15]
	return result;
     4ec:	7bfb      	ldrb	r3, [r7, #15]
	
}
     4ee:	4618      	mov	r0, r3
     4f0:	3714      	adds	r7, #20
     4f2:	46bd      	mov	sp, r7
     4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4f8:	0000faa9 	.word	0x0000faa9
     4fc:	000003a9 	.word	0x000003a9
     500:	0000fde9 	.word	0x0000fde9
     504:	000100f5 	.word	0x000100f5
     508:	0000fac9 	.word	0x0000fac9
     50c:	0000fb95 	.word	0x0000fb95
     510:	0000f82d 	.word	0x0000f82d

00000514 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
     514:	b480      	push	{r7}
     516:	b085      	sub	sp, #20
     518:	af00      	add	r7, sp, #0
     51a:	6078      	str	r0, [r7, #4]
     51c:	460b      	mov	r3, r1
     51e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
     520:	2300      	movs	r3, #0
     522:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     524:	2300      	movs	r3, #0
     526:	60bb      	str	r3, [r7, #8]
     528:	68bb      	ldr	r3, [r7, #8]
     52a:	2b07      	cmp	r3, #7
     52c:	dc13      	bgt.n	556 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
     52e:	7bfb      	ldrb	r3, [r7, #15]
     530:	005b      	lsls	r3, r3, #1
     532:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
     534:	78fa      	ldrb	r2, [r7, #3]
     536:	68bb      	ldr	r3, [r7, #8]
     538:	fa42 f303 	asr.w	r3, r2, r3
     53c:	b25b      	sxtb	r3, r3
     53e:	f003 0301 	and.w	r3, r3, #1
     542:	b25a      	sxtb	r2, r3
     544:	f997 300f 	ldrsb.w	r3, [r7, #15]
     548:	4313      	orrs	r3, r2
     54a:	b25b      	sxtb	r3, r3
     54c:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     54e:	68bb      	ldr	r3, [r7, #8]
     550:	3301      	adds	r3, #1
     552:	60bb      	str	r3, [r7, #8]
     554:	e7e8      	b.n	528 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
     556:	7bfb      	ldrb	r3, [r7, #15]
     558:	4618      	mov	r0, r3
     55a:	3714      	adds	r7, #20
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr

00000562 <_ZN14Protocol_ClassC2Ev>:
		{
				ch=0xff;
			usb.println("Command I: Increment data\n\r>");
			BigCounter.Word32++;
			TXBuffer[0] = BigCounter.PayLoad[1];
			TXBuffer[1] = BigCounter.PayLoad[2];
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
			TXBuffer[2] = BigCounter.PayLoad[3];
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
     56a:	6039      	str	r1, [r7, #0]
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	681a      	ldr	r2, [r3, #0]
			TXBuffer[3] = BigCounter.PayLoad[3];               // copy the LSB to the label for testing purposes
     570:	687b      	ldr	r3, [r7, #4]
     572:	601a      	str	r2, [r3, #0]
     574:	687b      	ldr	r3, [r7, #4]
     576:	681b      	ldr	r3, [r3, #0]
     578:	3b14      	subs	r3, #20
			
			cpu_irq_disable();
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	461a      	mov	r2, r3
     57e:	687b      	ldr	r3, [r7, #4]
			HI3593.TransmitCommandAndData(TXFIFO,TXBuffer);
     580:	4413      	add	r3, r2
     582:	683a      	ldr	r2, [r7, #0]
     584:	6852      	ldr	r2, [r2, #4]
     586:	601a      	str	r2, [r3, #0]
     588:	687b      	ldr	r3, [r7, #4]
     58a:	4618      	mov	r0, r3
     58c:	370c      	adds	r7, #12
     58e:	46bd      	mov	sp, r7
     590:	bc80      	pop	{r7}
			cpu_irq_enable();
     592:	4770      	bx	lr

00000594 <_ZN15ARINC_InterfaceC1Ev>:
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
			printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	4618      	mov	r0, r3
     5a0:	4b10      	ldr	r3, [pc, #64]	; (5e4 <_ZN15ARINC_InterfaceC1Ev+0x50>)
     5a2:	4798      	blx	r3
			//PORTT= ~TXBuffer[3];                               // show the transmitted upper nibble of the LSB
		}
		
		
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	4a10      	ldr	r2, [pc, #64]	; (5e8 <_ZN15ARINC_InterfaceC1Ev+0x54>)
     5a8:	4611      	mov	r1, r2
     5aa:	4618      	mov	r0, r3
     5ac:	4b0f      	ldr	r3, [pc, #60]	; (5ec <_ZN15ARINC_InterfaceC1Ev+0x58>)
     5ae:	4798      	blx	r3
     5b0:	4a0f      	ldr	r2, [pc, #60]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	601a      	str	r2, [r3, #0]
     5b6:	4a0e      	ldr	r2, [pc, #56]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
		
		if (newMessageR1)
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	601a      	str	r2, [r3, #0]
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     5c2:	4618      	mov	r0, r3
		{
			reading=ReadArincBuffer();
     5c4:	4b0b      	ldr	r3, [pc, #44]	; (5f4 <_ZN15ARINC_InterfaceC1Ev+0x60>)
     5c6:	4798      	blx	r3
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
			newMessageR1=false;
     5ce:	4618      	mov	r0, r3
     5d0:	4b09      	ldr	r3, [pc, #36]	; (5f8 <_ZN15ARINC_InterfaceC1Ev+0x64>)
		}
	}
     5d2:	4798      	blx	r3
     5d4:	4a09      	ldr	r2, [pc, #36]	; (5fc <_ZN15ARINC_InterfaceC1Ev+0x68>)
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	6013      	str	r3, [r2, #0]
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	4618      	mov	r0, r3
     5de:	3708      	adds	r7, #8
     5e0:	46bd      	mov	sp, r7
     5e2:	bd80      	pop	{r7, pc}
     5e4:	00000369 	.word	0x00000369
     5e8:	00010ff8 	.word	0x00010ff8
     5ec:	00000563 	.word	0x00000563
     5f0:	00010fe0 	.word	0x00010fe0
     5f4:	000015a9 	.word	0x000015a9
     5f8:	0000074d 	.word	0x0000074d
} //ARINC_Interface
     5fc:	20000578 	.word	0x20000578

00000600 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
     600:	b580      	push	{r7, lr}
     602:	b082      	sub	sp, #8
     604:	af00      	add	r7, sp, #0
     606:	6078      	str	r0, [r7, #4]
     608:	4a10      	ldr	r2, [pc, #64]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	601a      	str	r2, [r3, #0]
     60e:	4a0f      	ldr	r2, [pc, #60]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     610:	687b      	ldr	r3, [r7, #4]
     612:	601a      	str	r2, [r3, #0]
     614:	687b      	ldr	r3, [r7, #4]
     616:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     61a:	4618      	mov	r0, r3
     61c:	4b0c      	ldr	r3, [pc, #48]	; (650 <_ZN15ARINC_InterfaceD1Ev+0x50>)
     61e:	4798      	blx	r3
     620:	687b      	ldr	r3, [r7, #4]
     622:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     626:	4618      	mov	r0, r3
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <_ZN15ARINC_InterfaceD1Ev+0x54>)
     62a:	4798      	blx	r3
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	4a0a      	ldr	r2, [pc, #40]	; (658 <_ZN15ARINC_InterfaceD1Ev+0x58>)
     630:	4611      	mov	r1, r2
     632:	4618      	mov	r0, r3
     634:	4b09      	ldr	r3, [pc, #36]	; (65c <_ZN15ARINC_InterfaceD1Ev+0x5c>)
     636:	4798      	blx	r3
     638:	687b      	ldr	r3, [r7, #4]
     63a:	4618      	mov	r0, r3
     63c:	4b08      	ldr	r3, [pc, #32]	; (660 <_ZN15ARINC_InterfaceD1Ev+0x60>)
     63e:	4798      	blx	r3
} //~ARINC_Interface
     640:	687b      	ldr	r3, [r7, #4]
     642:	4618      	mov	r0, r3
     644:	3708      	adds	r7, #8
     646:	46bd      	mov	sp, r7
     648:	bd80      	pop	{r7, pc}
     64a:	bf00      	nop
     64c:	00010fe0 	.word	0x00010fe0
     650:	0000076d 	.word	0x0000076d
     654:	00001619 	.word	0x00001619
     658:	00010ff8 	.word	0x00010ff8
     65c:	0000078d 	.word	0x0000078d
     660:	00000389 	.word	0x00000389

00000664 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
     664:	b580      	push	{r7, lr}
     666:	b082      	sub	sp, #8
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
     66c:	6878      	ldr	r0, [r7, #4]
     66e:	4b06      	ldr	r3, [pc, #24]	; (688 <_ZN15ARINC_InterfaceD0Ev+0x24>)
     670:	4798      	blx	r3
     672:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     676:	6878      	ldr	r0, [r7, #4]
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <_ZN15ARINC_InterfaceD0Ev+0x28>)
     67a:	4798      	blx	r3
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	4618      	mov	r0, r3
     680:	3708      	adds	r7, #8
     682:	46bd      	mov	sp, r7
     684:	bd80      	pop	{r7, pc}
     686:	bf00      	nop
     688:	00000601 	.word	0x00000601
     68c:	0000e6d9 	.word	0x0000e6d9

00000690 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
     690:	b480      	push	{r7}
     692:	b085      	sub	sp, #20
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
     698:	460b      	mov	r3, r1
     69a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     69c:	2300      	movs	r3, #0
     69e:	73fb      	strb	r3, [r7, #15]
     6a0:	7bfb      	ldrb	r3, [r7, #15]
     6a2:	2b3f      	cmp	r3, #63	; 0x3f
     6a4:	dc1e      	bgt.n	6e4 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
     6ac:	7bfb      	ldrb	r3, [r7, #15]
     6ae:	4413      	add	r3, r2
     6b0:	b2db      	uxtb	r3, r3
     6b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     6b6:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
     6b8:	7bbb      	ldrb	r3, [r7, #14]
     6ba:	687a      	ldr	r2, [r7, #4]
     6bc:	009b      	lsls	r3, r3, #2
     6be:	4413      	add	r3, r2
     6c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
     6c4:	78fa      	ldrb	r2, [r7, #3]
     6c6:	429a      	cmp	r2, r3
     6c8:	d108      	bne.n	6dc <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
			data=(uint32_t*)receiverBuffer[j];
     6ca:	7bbb      	ldrb	r3, [r7, #14]
     6cc:	3310      	adds	r3, #16
     6ce:	009b      	lsls	r3, r3, #2
     6d0:	687a      	ldr	r2, [r7, #4]
     6d2:	4413      	add	r3, r2
     6d4:	60bb      	str	r3, [r7, #8]
			return *data;
     6d6:	68bb      	ldr	r3, [r7, #8]
     6d8:	681b      	ldr	r3, [r3, #0]
     6da:	e004      	b.n	6e6 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     6dc:	7bfb      	ldrb	r3, [r7, #15]
     6de:	3301      	adds	r3, #1
     6e0:	73fb      	strb	r3, [r7, #15]
     6e2:	e7dd      	b.n	6a0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
	return 0;
     6e4:	2300      	movs	r3, #0
}
     6e6:	4618      	mov	r0, r3
     6e8:	3714      	adds	r7, #20
     6ea:	46bd      	mov	sp, r7
     6ec:	bc80      	pop	{r7}
     6ee:	4770      	bx	lr

000006f0 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

     6f0:	b580      	push	{r7, lr}
     6f2:	b082      	sub	sp, #8
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
     6f8:	6039      	str	r1, [r7, #0]
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	2b01      	cmp	r3, #1
     6fe:	d10c      	bne.n	71a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     700:	683b      	ldr	r3, [r7, #0]
     702:	f64f 72ff 	movw	r2, #65535	; 0xffff
     706:	4293      	cmp	r3, r2
     708:	d107      	bne.n	71a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     70a:	4806      	ldr	r0, [pc, #24]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     70c:	4b06      	ldr	r3, [pc, #24]	; (728 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     70e:	4798      	blx	r3
     710:	4a06      	ldr	r2, [pc, #24]	; (72c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     712:	4907      	ldr	r1, [pc, #28]	; (730 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     714:	4803      	ldr	r0, [pc, #12]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     716:	4b07      	ldr	r3, [pc, #28]	; (734 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     718:	4798      	blx	r3
     71a:	bf00      	nop
     71c:	3708      	adds	r7, #8
     71e:	46bd      	mov	sp, r7
     720:	bd80      	pop	{r7, pc}
     722:	bf00      	nop
     724:	2000057c 	.word	0x2000057c
     728:	00000595 	.word	0x00000595
     72c:	20000000 	.word	0x20000000
     730:	00000601 	.word	0x00000601
     734:	0000e6cd 	.word	0x0000e6cd

00000738 <_GLOBAL__sub_I_HexSymbols>:
     738:	b580      	push	{r7, lr}
     73a:	af00      	add	r7, sp, #0
     73c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     740:	2001      	movs	r0, #1
     742:	4b01      	ldr	r3, [pc, #4]	; (748 <_GLOBAL__sub_I_HexSymbols+0x10>)
     744:	4798      	blx	r3
     746:	bd80      	pop	{r7, pc}
     748:	000006f1 	.word	0x000006f1

0000074c <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
     754:	687b      	ldr	r3, [r7, #4]
     756:	4618      	mov	r0, r3
     758:	4b03      	ldr	r3, [pc, #12]	; (768 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
     75a:	4798      	blx	r3
{
} //Holt_3593_Class
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	4618      	mov	r0, r3
     760:	3708      	adds	r7, #8
     762:	46bd      	mov	sp, r7
     764:	bd80      	pop	{r7, pc}
     766:	bf00      	nop
     768:	00000f45 	.word	0x00000f45

0000076c <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
     774:	687b      	ldr	r3, [r7, #4]
     776:	4618      	mov	r0, r3
     778:	4b03      	ldr	r3, [pc, #12]	; (788 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
     77a:	4798      	blx	r3
{
} //~Holt_3593_Class
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	4618      	mov	r0, r3
     780:	3708      	adds	r7, #8
     782:	46bd      	mov	sp, r7
     784:	bd80      	pop	{r7, pc}
     786:	bf00      	nop
     788:	00000f65 	.word	0x00000f65

0000078c <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
     78c:	b480      	push	{r7}
     78e:	b083      	sub	sp, #12
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	6039      	str	r1, [r7, #0]
     796:	683b      	ldr	r3, [r7, #0]
     798:	681a      	ldr	r2, [r3, #0]
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	601a      	str	r2, [r3, #0]
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	3b14      	subs	r3, #20
     7a4:	681b      	ldr	r3, [r3, #0]
     7a6:	461a      	mov	r2, r3
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	4413      	add	r3, r2
     7ac:	683a      	ldr	r2, [r7, #0]
     7ae:	6852      	ldr	r2, [r2, #4]
     7b0:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	4618      	mov	r0, r3
     7b6:	370c      	adds	r7, #12
     7b8:	46bd      	mov	sp, r7
     7ba:	bc80      	pop	{r7}
     7bc:	4770      	bx	lr
	...

000007c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     7c0:	b580      	push	{r7, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     7c6:	4b16      	ldr	r3, [pc, #88]	; (820 <Reset_Handler+0x60>)
     7c8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     7ca:	4b16      	ldr	r3, [pc, #88]	; (824 <Reset_Handler+0x64>)
     7cc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     7ce:	687a      	ldr	r2, [r7, #4]
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	429a      	cmp	r2, r3
     7d4:	d00c      	beq.n	7f0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     7d6:	e007      	b.n	7e8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     7d8:	683b      	ldr	r3, [r7, #0]
     7da:	1d1a      	adds	r2, r3, #4
     7dc:	603a      	str	r2, [r7, #0]
     7de:	687a      	ldr	r2, [r7, #4]
     7e0:	1d11      	adds	r1, r2, #4
     7e2:	6079      	str	r1, [r7, #4]
     7e4:	6812      	ldr	r2, [r2, #0]
     7e6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     7e8:	683b      	ldr	r3, [r7, #0]
     7ea:	4a0f      	ldr	r2, [pc, #60]	; (828 <Reset_Handler+0x68>)
     7ec:	4293      	cmp	r3, r2
     7ee:	d3f3      	bcc.n	7d8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7f0:	4b0e      	ldr	r3, [pc, #56]	; (82c <Reset_Handler+0x6c>)
     7f2:	603b      	str	r3, [r7, #0]
     7f4:	e004      	b.n	800 <Reset_Handler+0x40>
                *pDest++ = 0;
     7f6:	683b      	ldr	r3, [r7, #0]
     7f8:	1d1a      	adds	r2, r3, #4
     7fa:	603a      	str	r2, [r7, #0]
     7fc:	2200      	movs	r2, #0
     7fe:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     800:	683b      	ldr	r3, [r7, #0]
     802:	4a0b      	ldr	r2, [pc, #44]	; (830 <Reset_Handler+0x70>)
     804:	4293      	cmp	r3, r2
     806:	d3f6      	bcc.n	7f6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     808:	4b0a      	ldr	r3, [pc, #40]	; (834 <Reset_Handler+0x74>)
     80a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     80c:	4a0a      	ldr	r2, [pc, #40]	; (838 <Reset_Handler+0x78>)
     80e:	687b      	ldr	r3, [r7, #4]
     810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     814:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     816:	4b09      	ldr	r3, [pc, #36]	; (83c <Reset_Handler+0x7c>)
     818:	4798      	blx	r3

        /* Branch to main function */
        main();
     81a:	4b09      	ldr	r3, [pc, #36]	; (840 <Reset_Handler+0x80>)
     81c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     81e:	e7fe      	b.n	81e <Reset_Handler+0x5e>
     820:	00011740 	.word	0x00011740
     824:	20000000 	.word	0x20000000
     828:	2000054c 	.word	0x2000054c
     82c:	20000550 	.word	0x20000550
     830:	20002380 	.word	0x20002380
     834:	00000000 	.word	0x00000000
     838:	e000ed00 	.word	0xe000ed00
     83c:	00010169 	.word	0x00010169
     840:	00000c85 	.word	0x00000c85

00000844 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     844:	b480      	push	{r7}
     846:	af00      	add	r7, sp, #0
        while (1) {
     848:	e7fe      	b.n	848 <Dummy_Handler+0x4>

0000084a <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
     84a:	b480      	push	{r7}
     84c:	b083      	sub	sp, #12
     84e:	af00      	add	r7, sp, #0
     850:	6078      	str	r0, [r7, #4]
     852:	687b      	ldr	r3, [r7, #4]
     854:	4618      	mov	r0, r3
     856:	370c      	adds	r7, #12
     858:	46bd      	mov	sp, r7
     85a:	bc80      	pop	{r7}
     85c:	4770      	bx	lr

0000085e <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
     85e:	b480      	push	{r7}
     860:	b083      	sub	sp, #12
     862:	af00      	add	r7, sp, #0
     864:	6078      	str	r0, [r7, #4]
     866:	687b      	ldr	r3, [r7, #4]
     868:	4618      	mov	r0, r3
     86a:	370c      	adds	r7, #12
     86c:	46bd      	mov	sp, r7
     86e:	bc80      	pop	{r7}
     870:	4770      	bx	lr
	...

00000874 <_Z41__static_initialization_and_destruction_0ii>:
void Diagnostics::_printSupportLink(void) {
	usb.print(F("If this does not help resolve/clarify this issue, "));
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
}

Diagnostics diagnostics; // default instantiation of Diagnostics object
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	6039      	str	r1, [r7, #0]
     87e:	687b      	ldr	r3, [r7, #4]
     880:	2b01      	cmp	r3, #1
     882:	d10c      	bne.n	89e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     884:	683b      	ldr	r3, [r7, #0]
     886:	f64f 72ff 	movw	r2, #65535	; 0xffff
     88a:	4293      	cmp	r3, r2
     88c:	d107      	bne.n	89e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     88e:	4806      	ldr	r0, [pc, #24]	; (8a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     890:	4b06      	ldr	r3, [pc, #24]	; (8ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
     892:	4798      	blx	r3
     894:	4a06      	ldr	r2, [pc, #24]	; (8b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     896:	4907      	ldr	r1, [pc, #28]	; (8b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     898:	4803      	ldr	r0, [pc, #12]	; (8a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     89c:	4798      	blx	r3
     89e:	bf00      	nop
     8a0:	3708      	adds	r7, #8
     8a2:	46bd      	mov	sp, r7
     8a4:	bd80      	pop	{r7, pc}
     8a6:	bf00      	nop
     8a8:	20000770 	.word	0x20000770
     8ac:	0000084b 	.word	0x0000084b
     8b0:	20000000 	.word	0x20000000
     8b4:	0000085f 	.word	0x0000085f
     8b8:	0000e6cd 	.word	0x0000e6cd

000008bc <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
     8bc:	b580      	push	{r7, lr}
     8be:	af00      	add	r7, sp, #0
     8c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     8c4:	2001      	movs	r0, #1
     8c6:	4b01      	ldr	r3, [pc, #4]	; (8cc <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
     8c8:	4798      	blx	r3
     8ca:	bd80      	pop	{r7, pc}
     8cc:	00000875 	.word	0x00000875

000008d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     8d0:	b480      	push	{r7}
     8d2:	b083      	sub	sp, #12
     8d4:	af00      	add	r7, sp, #0
     8d6:	6078      	str	r0, [r7, #4]
     8d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	683a      	ldr	r2, [r7, #0]
     8de:	601a      	str	r2, [r3, #0]
	}
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	4618      	mov	r0, r3
     8e4:	370c      	adds	r7, #12
     8e6:	46bd      	mov	sp, r7
     8e8:	bc80      	pop	{r7}
     8ea:	4770      	bx	lr

000008ec <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
     8ec:	b580      	push	{r7, lr}
     8ee:	b082      	sub	sp, #8
     8f0:	af00      	add	r7, sp, #0
     8f2:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     8fa:	801a      	strh	r2, [r3, #0]
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
     902:	805a      	strh	r2, [r3, #2]
     904:	687b      	ldr	r3, [r7, #4]
     906:	2200      	movs	r2, #0
     908:	605a      	str	r2, [r3, #4]
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	3308      	adds	r3, #8
     90e:	2100      	movs	r1, #0
     910:	4618      	mov	r0, r3
     912:	4b05      	ldr	r3, [pc, #20]	; (928 <_ZN5eventC1Ev+0x3c>)
     914:	4798      	blx	r3
     916:	687b      	ldr	r3, [r7, #4]
     918:	2200      	movs	r2, #0
     91a:	60da      	str	r2, [r3, #12]
	{
	}
     91c:	687b      	ldr	r3, [r7, #4]
     91e:	4618      	mov	r0, r3
     920:	3708      	adds	r7, #8
     922:	46bd      	mov	sp, r7
     924:	bd80      	pop	{r7, pc}
     926:	bf00      	nop
     928:	000008d1 	.word	0x000008d1

0000092c <_ZN18EventHandler_ClassC1Ev>:
	ptrEventHandlerClass->eventTimeout=true;
}


// default constructor
EventHandler_Class::EventHandler_Class()
     92c:	b480      	push	{r7}
     92e:	b083      	sub	sp, #12
     930:	af00      	add	r7, sp, #0
     932:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     934:	4a04      	ldr	r2, [pc, #16]	; (948 <_ZN18EventHandler_ClassC1Ev+0x1c>)
     936:	687b      	ldr	r3, [r7, #4]
     938:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
     93a:	687b      	ldr	r3, [r7, #4]
     93c:	4618      	mov	r0, r3
     93e:	370c      	adds	r7, #12
     940:	46bd      	mov	sp, r7
     942:	bc80      	pop	{r7}
     944:	4770      	bx	lr
     946:	bf00      	nop
     948:	2000177c 	.word	0x2000177c

0000094c <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
     94c:	b480      	push	{r7}
     94e:	b083      	sub	sp, #12
     950:	af00      	add	r7, sp, #0
     952:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     954:	4a04      	ldr	r2, [pc, #16]	; (968 <_ZN18EventHandler_ClassD1Ev+0x1c>)
     956:	687b      	ldr	r3, [r7, #4]
     958:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	4618      	mov	r0, r3
     95e:	370c      	adds	r7, #12
     960:	46bd      	mov	sp, r7
     962:	bc80      	pop	{r7}
     964:	4770      	bx	lr
     966:	bf00      	nop
     968:	2000177c 	.word	0x2000177c

0000096c <_Z41__static_initialization_and_destruction_0ii>:
	return	(uint32_t)eventsInUse;
	
}


     96c:	b5b0      	push	{r4, r5, r7, lr}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
     976:	687b      	ldr	r3, [r7, #4]
     978:	2b01      	cmp	r3, #1
     97a:	d117      	bne.n	9ac <_Z41__static_initialization_and_destruction_0ii+0x40>
     97c:	683b      	ldr	r3, [r7, #0]
     97e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     982:	4293      	cmp	r3, r2
     984:	d112      	bne.n	9ac <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
     986:	4b0b      	ldr	r3, [pc, #44]	; (9b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     988:	24ff      	movs	r4, #255	; 0xff
     98a:	461d      	mov	r5, r3
     98c:	2c00      	cmp	r4, #0
     98e:	db05      	blt.n	99c <_Z41__static_initialization_and_destruction_0ii+0x30>
     990:	4628      	mov	r0, r5
     992:	4b09      	ldr	r3, [pc, #36]	; (9b8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     994:	4798      	blx	r3
     996:	3510      	adds	r5, #16
     998:	3c01      	subs	r4, #1
     99a:	e7f7      	b.n	98c <_Z41__static_initialization_and_destruction_0ii+0x20>
     99c:	4807      	ldr	r0, [pc, #28]	; (9bc <_Z41__static_initialization_and_destruction_0ii+0x50>)
     99e:	4b08      	ldr	r3, [pc, #32]	; (9c0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     9a0:	4798      	blx	r3
     9a2:	4a08      	ldr	r2, [pc, #32]	; (9c4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     9a4:	4908      	ldr	r1, [pc, #32]	; (9c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     9a6:	4805      	ldr	r0, [pc, #20]	; (9bc <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9a8:	4b08      	ldr	r3, [pc, #32]	; (9cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
     9aa:	4798      	blx	r3
     9ac:	bf00      	nop
     9ae:	3708      	adds	r7, #8
     9b0:	46bd      	mov	sp, r7
     9b2:	bdb0      	pop	{r4, r5, r7, pc}
     9b4:	20000774 	.word	0x20000774
     9b8:	000008ed 	.word	0x000008ed
     9bc:	2000178c 	.word	0x2000178c
     9c0:	0000092d 	.word	0x0000092d
     9c4:	20000000 	.word	0x20000000
     9c8:	0000094d 	.word	0x0000094d
     9cc:	0000e6cd 	.word	0x0000e6cd

000009d0 <_GLOBAL__sub_I_maxEventCount>:
     9d0:	b580      	push	{r7, lr}
     9d2:	af00      	add	r7, sp, #0
     9d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     9d8:	2001      	movs	r0, #1
     9da:	4b01      	ldr	r3, [pc, #4]	; (9e0 <_GLOBAL__sub_I_maxEventCount+0x10>)
     9dc:	4798      	blx	r3
     9de:	bd80      	pop	{r7, pc}
     9e0:	0000096d 	.word	0x0000096d

000009e4 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
     9e4:	b480      	push	{r7}
     9e6:	b083      	sub	sp, #12
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
     9ec:	4b04      	ldr	r3, [pc, #16]	; (a00 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	2201      	movs	r2, #1
     9f2:	701a      	strb	r2, [r3, #0]

}
     9f4:	bf00      	nop
     9f6:	370c      	adds	r7, #12
     9f8:	46bd      	mov	sp, r7
     9fa:	bc80      	pop	{r7}
     9fc:	4770      	bx	lr
     9fe:	bf00      	nop
     a00:	200017a8 	.word	0x200017a8

00000a04 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
     a04:	b480      	push	{r7}
     a06:	b083      	sub	sp, #12
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
     a0c:	4b04      	ldr	r3, [pc, #16]	; (a20 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	2201      	movs	r2, #1
     a12:	705a      	strb	r2, [r3, #1]
}
     a14:	bf00      	nop
     a16:	370c      	adds	r7, #12
     a18:	46bd      	mov	sp, r7
     a1a:	bc80      	pop	{r7}
     a1c:	4770      	bx	lr
     a1e:	bf00      	nop
     a20:	200017a8 	.word	0x200017a8

00000a24 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
     a24:	b580      	push	{r7, lr}
     a26:	b082      	sub	sp, #8
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->Clear_ack();
     a2c:	4b08      	ldr	r3, [pc, #32]	; (a50 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	4618      	mov	r0, r3
     a32:	4b08      	ldr	r3, [pc, #32]	; (a54 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
     a34:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
     a36:	4b06      	ldr	r3, [pc, #24]	; (a50 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a38:	681b      	ldr	r3, [r3, #0]
     a3a:	2201      	movs	r2, #1
     a3c:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
     a3e:	4b04      	ldr	r3, [pc, #16]	; (a50 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	2201      	movs	r2, #1
     a44:	705a      	strb	r2, [r3, #1]
 }
     a46:	bf00      	nop
     a48:	3708      	adds	r7, #8
     a4a:	46bd      	mov	sp, r7
     a4c:	bd80      	pop	{r7, pc}
     a4e:	bf00      	nop
     a50:	200017a8 	.word	0x200017a8
     a54:	00000c09 	.word	0x00000c09

00000a58 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
     a58:	b480      	push	{r7}
     a5a:	b083      	sub	sp, #12
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EEPROM;
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	4a05      	ldr	r2, [pc, #20]	; (a78 <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
     a64:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
     a66:	4a05      	ldr	r2, [pc, #20]	; (a7c <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	4618      	mov	r0, r3
     a70:	370c      	adds	r7, #12
     a72:	46bd      	mov	sp, r7
     a74:	bc80      	pop	{r7}
     a76:	4770      	bx	lr
     a78:	200022b0 	.word	0x200022b0
     a7c:	200017a8 	.word	0x200017a8

00000a80 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
     a80:	b480      	push	{r7}
     a82:	b083      	sub	sp, #12
     a84:	af00      	add	r7, sp, #0
     a86:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
     a88:	687b      	ldr	r3, [r7, #4]
     a8a:	4618      	mov	r0, r3
     a8c:	370c      	adds	r7, #12
     a8e:	46bd      	mov	sp, r7
     a90:	bc80      	pop	{r7}
     a92:	4770      	bx	lr

00000a94 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
     a94:	b480      	push	{r7}
     a96:	b083      	sub	sp, #12
     a98:	af00      	add	r7, sp, #0
     a9a:	6078      	str	r0, [r7, #4]
     a9c:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	683a      	ldr	r2, [r7, #0]
     aa2:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
     aa4:	4a03      	ldr	r2, [pc, #12]	; (ab4 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x20>)
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	6013      	str	r3, [r2, #0]
}
     aaa:	bf00      	nop
     aac:	370c      	adds	r7, #12
     aae:	46bd      	mov	sp, r7
     ab0:	bc80      	pop	{r7}
     ab2:	4770      	bx	lr
     ab4:	200017a8 	.word	0x200017a8

00000ab8 <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
     ab8:	b580      	push	{r7, lr}
     aba:	b084      	sub	sp, #16
     abc:	af00      	add	r7, sp, #0
     abe:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	689a      	ldr	r2, [r3, #8]
     ac4:	687b      	ldr	r3, [r7, #4]
     ac6:	3304      	adds	r3, #4
     ac8:	4619      	mov	r1, r3
     aca:	4610      	mov	r0, r2
     acc:	4b14      	ldr	r3, [pc, #80]	; (b20 <_ZN14I2C_Asyn_Class4InitEv+0x68>)
     ace:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
     ad0:	687b      	ldr	r3, [r7, #4]
     ad2:	689b      	ldr	r3, [r3, #8]
     ad4:	4618      	mov	r0, r3
     ad6:	4b13      	ldr	r3, [pc, #76]	; (b24 <_ZN14I2C_Asyn_Class4InitEv+0x6c>)
     ad8:	4798      	blx	r3
     ada:	4603      	mov	r3, r0
     adc:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	689b      	ldr	r3, [r3, #8]
     ae2:	4a11      	ldr	r2, [pc, #68]	; (b28 <_ZN14I2C_Asyn_Class4InitEv+0x70>)
     ae4:	2101      	movs	r1, #1
     ae6:	4618      	mov	r0, r3
     ae8:	4b10      	ldr	r3, [pc, #64]	; (b2c <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     aea:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	689b      	ldr	r3, [r3, #8]
     af0:	4a0f      	ldr	r2, [pc, #60]	; (b30 <_ZN14I2C_Asyn_Class4InitEv+0x78>)
     af2:	2102      	movs	r1, #2
     af4:	4618      	mov	r0, r3
     af6:	4b0d      	ldr	r3, [pc, #52]	; (b2c <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     af8:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	689b      	ldr	r3, [r3, #8]
     afe:	4a0d      	ldr	r2, [pc, #52]	; (b34 <_ZN14I2C_Asyn_Class4InitEv+0x7c>)
     b00:	2100      	movs	r1, #0
     b02:	4618      	mov	r0, r3
     b04:	4b09      	ldr	r3, [pc, #36]	; (b2c <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     b06:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	2201      	movs	r2, #1
     b0c:	701a      	strb	r2, [r3, #0]
	rxReady=true;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	2201      	movs	r2, #1
     b12:	705a      	strb	r2, [r3, #1]
	return ena;
     b14:	7bfb      	ldrb	r3, [r7, #15]
	
}
     b16:	4618      	mov	r0, r3
     b18:	3710      	adds	r7, #16
     b1a:	46bd      	mov	sp, r7
     b1c:	bd80      	pop	{r7, pc}
     b1e:	bf00      	nop
     b20:	00003a1b 	.word	0x00003a1b
     b24:	0000392d 	.word	0x0000392d
     b28:	000009e5 	.word	0x000009e5
     b2c:	000039d3 	.word	0x000039d3
     b30:	00000a05 	.word	0x00000a05
     b34:	00000a25 	.word	0x00000a25

00000b38 <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
     b38:	b580      	push	{r7, lr}
     b3a:	b084      	sub	sp, #16
     b3c:	af00      	add	r7, sp, #0
     b3e:	6078      	str	r0, [r7, #4]
     b40:	460b      	mov	r3, r1
     b42:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
     b44:	6878      	ldr	r0, [r7, #4]
     b46:	4b0c      	ldr	r3, [pc, #48]	; (b78 <_ZN14I2C_Asyn_Class4InitEh+0x40>)
     b48:	4798      	blx	r3
     b4a:	4603      	mov	r3, r0
     b4c:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	689b      	ldr	r3, [r3, #8]
     b52:	78fa      	ldrb	r2, [r7, #3]
     b54:	b211      	sxth	r1, r2
     b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
     b5a:	4618      	mov	r0, r3
     b5c:	4b07      	ldr	r3, [pc, #28]	; (b7c <_ZN14I2C_Asyn_Class4InitEh+0x44>)
     b5e:	4798      	blx	r3
	txReady=true;
     b60:	687b      	ldr	r3, [r7, #4]
     b62:	2201      	movs	r2, #1
     b64:	701a      	strb	r2, [r3, #0]
	rxReady=true;
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	2201      	movs	r2, #1
     b6a:	705a      	strb	r2, [r3, #1]
	return ena;
     b6c:	7bfb      	ldrb	r3, [r7, #15]
}
     b6e:	4618      	mov	r0, r3
     b70:	3710      	adds	r7, #16
     b72:	46bd      	mov	sp, r7
     b74:	bd80      	pop	{r7, pc}
     b76:	bf00      	nop
     b78:	00000ab9 	.word	0x00000ab9
     b7c:	00003999 	.word	0x00003999

00000b80 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
     b80:	b580      	push	{r7, lr}
     b82:	b084      	sub	sp, #16
     b84:	af00      	add	r7, sp, #0
     b86:	60f8      	str	r0, [r7, #12]
     b88:	60b9      	str	r1, [r7, #8]
     b8a:	4613      	mov	r3, r2
     b8c:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
     b8e:	68fb      	ldr	r3, [r7, #12]
     b90:	781b      	ldrb	r3, [r3, #0]
     b92:	b2db      	uxtb	r3, r3
     b94:	f083 0301 	eor.w	r3, r3, #1
     b98:	b2db      	uxtb	r3, r3
     b9a:	2b00      	cmp	r3, #0
     b9c:	d000      	beq.n	ba0 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
     b9e:	e7f6      	b.n	b8e <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
     ba0:	68fb      	ldr	r3, [r7, #12]
     ba2:	2200      	movs	r2, #0
     ba4:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
     ba6:	68fb      	ldr	r3, [r7, #12]
     ba8:	685b      	ldr	r3, [r3, #4]
     baa:	88fa      	ldrh	r2, [r7, #6]
     bac:	68b9      	ldr	r1, [r7, #8]
     bae:	4618      	mov	r0, r3
     bb0:	4b03      	ldr	r3, [pc, #12]	; (bc0 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
     bb2:	4798      	blx	r3
     bb4:	4603      	mov	r3, r0
}
     bb6:	4618      	mov	r0, r3
     bb8:	3710      	adds	r7, #16
     bba:	46bd      	mov	sp, r7
     bbc:	bd80      	pop	{r7, pc}
     bbe:	bf00      	nop
     bc0:	00003a3d 	.word	0x00003a3d

00000bc4 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
     bc4:	b580      	push	{r7, lr}
     bc6:	b084      	sub	sp, #16
     bc8:	af00      	add	r7, sp, #0
     bca:	60f8      	str	r0, [r7, #12]
     bcc:	60b9      	str	r1, [r7, #8]
     bce:	4613      	mov	r3, r2
     bd0:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
     bd2:	68fb      	ldr	r3, [r7, #12]
     bd4:	785b      	ldrb	r3, [r3, #1]
     bd6:	b2db      	uxtb	r3, r3
     bd8:	f083 0301 	eor.w	r3, r3, #1
     bdc:	b2db      	uxtb	r3, r3
     bde:	2b00      	cmp	r3, #0
     be0:	d000      	beq.n	be4 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
     be2:	e7f6      	b.n	bd2 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	2200      	movs	r2, #0
     be8:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
     bea:	68fb      	ldr	r3, [r7, #12]
     bec:	685b      	ldr	r3, [r3, #4]
     bee:	88fa      	ldrh	r2, [r7, #6]
     bf0:	68b9      	ldr	r1, [r7, #8]
     bf2:	4618      	mov	r0, r3
     bf4:	4b03      	ldr	r3, [pc, #12]	; (c04 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
     bf6:	4798      	blx	r3
     bf8:	4603      	mov	r3, r0
}
     bfa:	4618      	mov	r0, r3
     bfc:	3710      	adds	r7, #16
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	bf00      	nop
     c04:	00003a8d 	.word	0x00003a8d

00000c08 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
     c08:	b480      	push	{r7}
     c0a:	b083      	sub	sp, #12
     c0c:	af00      	add	r7, sp, #0
     c0e:	6078      	str	r0, [r7, #4]
	 ack=false;
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	2200      	movs	r2, #0
     c14:	709a      	strb	r2, [r3, #2]
	 return ack;
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	789b      	ldrb	r3, [r3, #2]
     c1a:	b2db      	uxtb	r3, r3
     c1c:	4618      	mov	r0, r3
     c1e:	370c      	adds	r7, #12
     c20:	46bd      	mov	sp, r7
     c22:	bc80      	pop	{r7}
     c24:	4770      	bx	lr
	...

00000c28 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
     c28:	b580      	push	{r7, lr}
     c2a:	b082      	sub	sp, #8
     c2c:	af00      	add	r7, sp, #0
     c2e:	6078      	str	r0, [r7, #4]
     c30:	6039      	str	r1, [r7, #0]
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	2b01      	cmp	r3, #1
     c36:	d10c      	bne.n	c52 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     c38:	683b      	ldr	r3, [r7, #0]
     c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     c3e:	4293      	cmp	r3, r2
     c40:	d107      	bne.n	c52 <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
     c42:	4806      	ldr	r0, [pc, #24]	; (c5c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     c44:	4b06      	ldr	r3, [pc, #24]	; (c60 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     c46:	4798      	blx	r3
     c48:	4a06      	ldr	r2, [pc, #24]	; (c64 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     c4a:	4907      	ldr	r1, [pc, #28]	; (c68 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     c4c:	4803      	ldr	r0, [pc, #12]	; (c5c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     c4e:	4b07      	ldr	r3, [pc, #28]	; (c6c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     c50:	4798      	blx	r3
}
     c52:	bf00      	nop
     c54:	3708      	adds	r7, #8
     c56:	46bd      	mov	sp, r7
     c58:	bd80      	pop	{r7, pc}
     c5a:	bf00      	nop
     c5c:	200017b0 	.word	0x200017b0
     c60:	00000f11 	.word	0x00000f11
     c64:	20000000 	.word	0x20000000
     c68:	00000f31 	.word	0x00000f31
     c6c:	0000e6cd 	.word	0x0000e6cd

00000c70 <_GLOBAL__sub_I_ptrLTSPIClass>:
     c70:	b580      	push	{r7, lr}
     c72:	af00      	add	r7, sp, #0
     c74:	f64f 71ff 	movw	r1, #65535	; 0xffff
     c78:	2001      	movs	r0, #1
     c7a:	4b01      	ldr	r3, [pc, #4]	; (c80 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
     c7c:	4798      	blx	r3
     c7e:	bd80      	pop	{r7, pc}
     c80:	00000c29 	.word	0x00000c29

00000c84 <main>:
 */ 

#include "main.h"

int main(void)
{
     c84:	b580      	push	{r7, lr}
     c86:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     c88:	4b06      	ldr	r3, [pc, #24]	; (ca4 <main+0x20>)
     c8a:	4798      	blx	r3
	
	usb.init();
     c8c:	4806      	ldr	r0, [pc, #24]	; (ca8 <main+0x24>)
     c8e:	4b07      	ldr	r3, [pc, #28]	; (cac <main+0x28>)
     c90:	4798      	blx	r3
	delay_ms(200);
     c92:	20c8      	movs	r0, #200	; 0xc8
     c94:	4b06      	ldr	r3, [pc, #24]	; (cb0 <main+0x2c>)
     c96:	4798      	blx	r3
	StartLivePulse();
     c98:	4b06      	ldr	r3, [pc, #24]	; (cb4 <main+0x30>)
     c9a:	4798      	blx	r3
	//QSPIDriverTest();
	//DateTimeTest();
	EEPROM_Test();
     c9c:	4b06      	ldr	r3, [pc, #24]	; (cb8 <main+0x34>)
     c9e:	4798      	blx	r3
		/* Replace with your application code */
	while (1) {
     ca0:	e7fe      	b.n	ca0 <main+0x1c>
     ca2:	bf00      	nop
     ca4:	00001f75 	.word	0x00001f75
     ca8:	20001b5c 	.word	0x20001b5c
     cac:	00001989 	.word	0x00001989
     cb0:	00003645 	.word	0x00003645
     cb4:	00000cbd 	.word	0x00000cbd
     cb8:	00000d09 	.word	0x00000d09

00000cbc <_Z14StartLivePulsev>:
		
		
	}
}

uint8_t	StartLivePulse(void){
     cbc:	b580      	push	{r7, lr}
     cbe:	b082      	sub	sp, #8
     cc0:	af00      	add	r7, sp, #0
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     cc2:	490a      	ldr	r1, [pc, #40]	; (cec <_Z14StartLivePulsev+0x30>)
     cc4:	480a      	ldr	r0, [pc, #40]	; (cf0 <_Z14StartLivePulsev+0x34>)
     cc6:	4b0b      	ldr	r3, [pc, #44]	; (cf4 <_Z14StartLivePulsev+0x38>)
     cc8:	4798      	blx	r3
     cca:	4603      	mov	r3, r0
     ccc:	490a      	ldr	r1, [pc, #40]	; (cf8 <_Z14StartLivePulsev+0x3c>)
     cce:	4618      	mov	r0, r3
     cd0:	4b0a      	ldr	r3, [pc, #40]	; (cfc <_Z14StartLivePulsev+0x40>)
     cd2:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     cd4:	480a      	ldr	r0, [pc, #40]	; (d00 <_Z14StartLivePulsev+0x44>)
     cd6:	4b0b      	ldr	r3, [pc, #44]	; (d04 <_Z14StartLivePulsev+0x48>)
     cd8:	4798      	blx	r3
     cda:	4603      	mov	r3, r0
     cdc:	607b      	str	r3, [r7, #4]
	return p;
     cde:	687b      	ldr	r3, [r7, #4]
     ce0:	b2db      	uxtb	r3, r3
}
     ce2:	4618      	mov	r0, r3
     ce4:	3708      	adds	r7, #8
     ce6:	46bd      	mov	sp, r7
     ce8:	bd80      	pop	{r7, pc}
     cea:	bf00      	nop
     cec:	0001102c 	.word	0x0001102c
     cf0:	20001b5c 	.word	0x20001b5c
     cf4:	00000e29 	.word	0x00000e29
     cf8:	0001104c 	.word	0x0001104c
     cfc:	00000e49 	.word	0x00000e49
     d00:	200021f4 	.word	0x200021f4
     d04:	00003b41 	.word	0x00003b41

00000d08 <_Z11EEPROM_Testv>:
			
			usb<<"it does work"<<NEWLINE;
		}
	}
}
uint8_t EEPROM_Test(void){
     d08:	b580      	push	{r7, lr}
     d0a:	b088      	sub	sp, #32
     d0c:	af00      	add	r7, sp, #0
	AT24MAC_Class	eeprom(&I2C_EEPROM);
     d0e:	1d3b      	adds	r3, r7, #4
     d10:	4931      	ldr	r1, [pc, #196]	; (dd8 <_Z11EEPROM_Testv+0xd0>)
     d12:	4618      	mov	r0, r3
     d14:	4b31      	ldr	r3, [pc, #196]	; (ddc <_Z11EEPROM_Testv+0xd4>)
     d16:	4798      	blx	r3
	eeprom.Init();
     d18:	1d3b      	adds	r3, r7, #4
     d1a:	4618      	mov	r0, r3
     d1c:	4b30      	ldr	r3, [pc, #192]	; (de0 <_Z11EEPROM_Testv+0xd8>)
     d1e:	4798      	blx	r3
	uint8_t addr=0x00;
     d20:	2300      	movs	r3, #0
     d22:	70fb      	strb	r3, [r7, #3]
	uint8_t	value;
	usb<<"  Function for testing an i2c EEPROM"<<NEWLINE;
     d24:	492f      	ldr	r1, [pc, #188]	; (de4 <_Z11EEPROM_Testv+0xdc>)
     d26:	4830      	ldr	r0, [pc, #192]	; (de8 <_Z11EEPROM_Testv+0xe0>)
     d28:	4b30      	ldr	r3, [pc, #192]	; (dec <_Z11EEPROM_Testv+0xe4>)
     d2a:	4798      	blx	r3
     d2c:	4603      	mov	r3, r0
     d2e:	4930      	ldr	r1, [pc, #192]	; (df0 <_Z11EEPROM_Testv+0xe8>)
     d30:	4618      	mov	r0, r3
     d32:	4b30      	ldr	r3, [pc, #192]	; (df4 <_Z11EEPROM_Testv+0xec>)
     d34:	4798      	blx	r3
	/* Replace with your application code */
			
	while (1) {
		if (eeprom.is_EEPROM_ready())
     d36:	1d3b      	adds	r3, r7, #4
     d38:	4618      	mov	r0, r3
     d3a:	4b2f      	ldr	r3, [pc, #188]	; (df8 <_Z11EEPROM_Testv+0xf0>)
     d3c:	4798      	blx	r3
     d3e:	4603      	mov	r3, r0
     d40:	2b00      	cmp	r3, #0
     d42:	d035      	beq.n	db0 <_Z11EEPROM_Testv+0xa8>
		{
			value=eeprom.read_byte(addr);
     d44:	78fa      	ldrb	r2, [r7, #3]
     d46:	1d3b      	adds	r3, r7, #4
     d48:	4611      	mov	r1, r2
     d4a:	4618      	mov	r0, r3
     d4c:	4b2b      	ldr	r3, [pc, #172]	; (dfc <_Z11EEPROM_Testv+0xf4>)
     d4e:	4798      	blx	r3
     d50:	4603      	mov	r3, r0
     d52:	70bb      	strb	r3, [r7, #2]
			usb<<" the value on address: "<<addr<<" is: "<<value<<NEWLINE;
     d54:	492a      	ldr	r1, [pc, #168]	; (e00 <_Z11EEPROM_Testv+0xf8>)
     d56:	4824      	ldr	r0, [pc, #144]	; (de8 <_Z11EEPROM_Testv+0xe0>)
     d58:	4b2a      	ldr	r3, [pc, #168]	; (e04 <_Z11EEPROM_Testv+0xfc>)
     d5a:	4798      	blx	r3
     d5c:	4602      	mov	r2, r0
     d5e:	1cfb      	adds	r3, r7, #3
     d60:	4619      	mov	r1, r3
     d62:	4610      	mov	r0, r2
     d64:	4b28      	ldr	r3, [pc, #160]	; (e08 <_Z11EEPROM_Testv+0x100>)
     d66:	4798      	blx	r3
     d68:	4603      	mov	r3, r0
     d6a:	4928      	ldr	r1, [pc, #160]	; (e0c <_Z11EEPROM_Testv+0x104>)
     d6c:	4618      	mov	r0, r3
     d6e:	4b28      	ldr	r3, [pc, #160]	; (e10 <_Z11EEPROM_Testv+0x108>)
     d70:	4798      	blx	r3
     d72:	4602      	mov	r2, r0
     d74:	1cbb      	adds	r3, r7, #2
     d76:	4619      	mov	r1, r3
     d78:	4610      	mov	r0, r2
     d7a:	4b23      	ldr	r3, [pc, #140]	; (e08 <_Z11EEPROM_Testv+0x100>)
     d7c:	4798      	blx	r3
     d7e:	4603      	mov	r3, r0
     d80:	491b      	ldr	r1, [pc, #108]	; (df0 <_Z11EEPROM_Testv+0xe8>)
     d82:	4618      	mov	r0, r3
     d84:	4b1b      	ldr	r3, [pc, #108]	; (df4 <_Z11EEPROM_Testv+0xec>)
     d86:	4798      	blx	r3
			eeprom.write_byte(addr,16-addr);
     d88:	78f9      	ldrb	r1, [r7, #3]
     d8a:	78fb      	ldrb	r3, [r7, #3]
     d8c:	f1c3 0310 	rsb	r3, r3, #16
     d90:	b2da      	uxtb	r2, r3
     d92:	1d3b      	adds	r3, r7, #4
     d94:	4618      	mov	r0, r3
     d96:	4b1f      	ldr	r3, [pc, #124]	; (e14 <_Z11EEPROM_Testv+0x10c>)
     d98:	4798      	blx	r3
		
			if (addr<16){
     d9a:	78fb      	ldrb	r3, [r7, #3]
     d9c:	2b0f      	cmp	r3, #15
     d9e:	dc04      	bgt.n	daa <_Z11EEPROM_Testv+0xa2>
				addr++;
     da0:	78fb      	ldrb	r3, [r7, #3]
     da2:	3301      	adds	r3, #1
     da4:	b2db      	uxtb	r3, r3
     da6:	70fb      	strb	r3, [r7, #3]
     da8:	e011      	b.n	dce <_Z11EEPROM_Testv+0xc6>
			}
			else{
				addr=0;
     daa:	2300      	movs	r3, #0
     dac:	70fb      	strb	r3, [r7, #3]
     dae:	e00e      	b.n	dce <_Z11EEPROM_Testv+0xc6>
			}
		}
		else
		{
			if (usb.available())
     db0:	480d      	ldr	r0, [pc, #52]	; (de8 <_Z11EEPROM_Testv+0xe0>)
     db2:	4b19      	ldr	r3, [pc, #100]	; (e18 <_Z11EEPROM_Testv+0x110>)
     db4:	4798      	blx	r3
     db6:	4603      	mov	r3, r0
     db8:	2b00      	cmp	r3, #0
     dba:	d008      	beq.n	dce <_Z11EEPROM_Testv+0xc6>
			{
				usb<< "---I2C connection error!!-----"<<NEWLINE;
     dbc:	4917      	ldr	r1, [pc, #92]	; (e1c <_Z11EEPROM_Testv+0x114>)
     dbe:	480a      	ldr	r0, [pc, #40]	; (de8 <_Z11EEPROM_Testv+0xe0>)
     dc0:	4b17      	ldr	r3, [pc, #92]	; (e20 <_Z11EEPROM_Testv+0x118>)
     dc2:	4798      	blx	r3
     dc4:	4603      	mov	r3, r0
     dc6:	490a      	ldr	r1, [pc, #40]	; (df0 <_Z11EEPROM_Testv+0xe8>)
     dc8:	4618      	mov	r0, r3
     dca:	4b0a      	ldr	r3, [pc, #40]	; (df4 <_Z11EEPROM_Testv+0xec>)
     dcc:	4798      	blx	r3
			}			
		}
		delay_ms(100);
     dce:	2064      	movs	r0, #100	; 0x64
     dd0:	4b14      	ldr	r3, [pc, #80]	; (e24 <_Z11EEPROM_Testv+0x11c>)
     dd2:	4798      	blx	r3
		if (eeprom.is_EEPROM_ready())
     dd4:	e7af      	b.n	d36 <_Z11EEPROM_Testv+0x2e>
     dd6:	bf00      	nop
     dd8:	200022b0 	.word	0x200022b0
     ddc:	00000f79 	.word	0x00000f79
     de0:	00000fcd 	.word	0x00000fcd
     de4:	00011070 	.word	0x00011070
     de8:	20001b5c 	.word	0x20001b5c
     dec:	00000e69 	.word	0x00000e69
     df0:	0001104c 	.word	0x0001104c
     df4:	00000e49 	.word	0x00000e49
     df8:	000010f1 	.word	0x000010f1
     dfc:	00001091 	.word	0x00001091
     e00:	00011098 	.word	0x00011098
     e04:	00000e89 	.word	0x00000e89
     e08:	00000ea9 	.word	0x00000ea9
     e0c:	000110b0 	.word	0x000110b0
     e10:	00000ed1 	.word	0x00000ed1
     e14:	0000103d 	.word	0x0000103d
     e18:	00001c71 	.word	0x00001c71
     e1c:	000110b8 	.word	0x000110b8
     e20:	00000ef1 	.word	0x00000ef1
     e24:	00003645 	.word	0x00003645

00000e28 <_ZlsIA30_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     e28:	b580      	push	{r7, lr}
     e2a:	b082      	sub	sp, #8
     e2c:	af00      	add	r7, sp, #0
     e2e:	6078      	str	r0, [r7, #4]
     e30:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     e32:	6839      	ldr	r1, [r7, #0]
     e34:	6878      	ldr	r0, [r7, #4]
     e36:	4b03      	ldr	r3, [pc, #12]	; (e44 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     e38:	4798      	blx	r3
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	4618      	mov	r0, r3
     e3e:	3708      	adds	r7, #8
     e40:	46bd      	mov	sp, r7
     e42:	bd80      	pop	{r7, pc}
     e44:	00001e65 	.word	0x00001e65

00000e48 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     e48:	b580      	push	{r7, lr}
     e4a:	b082      	sub	sp, #8
     e4c:	af00      	add	r7, sp, #0
     e4e:	6078      	str	r0, [r7, #4]
     e50:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     e52:	6839      	ldr	r1, [r7, #0]
     e54:	6878      	ldr	r0, [r7, #4]
     e56:	4b03      	ldr	r3, [pc, #12]	; (e64 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     e58:	4798      	blx	r3
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	4618      	mov	r0, r3
     e5e:	3708      	adds	r7, #8
     e60:	46bd      	mov	sp, r7
     e62:	bd80      	pop	{r7, pc}
     e64:	00001e65 	.word	0x00001e65

00000e68 <_ZlsIA37_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     e68:	b580      	push	{r7, lr}
     e6a:	b082      	sub	sp, #8
     e6c:	af00      	add	r7, sp, #0
     e6e:	6078      	str	r0, [r7, #4]
     e70:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     e72:	6839      	ldr	r1, [r7, #0]
     e74:	6878      	ldr	r0, [r7, #4]
     e76:	4b03      	ldr	r3, [pc, #12]	; (e84 <_ZlsIA37_cER5PrintS2_RKT_+0x1c>)
     e78:	4798      	blx	r3
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	4618      	mov	r0, r3
     e7e:	3708      	adds	r7, #8
     e80:	46bd      	mov	sp, r7
     e82:	bd80      	pop	{r7, pc}
     e84:	00001e65 	.word	0x00001e65

00000e88 <_ZlsIA24_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
     e90:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     e92:	6839      	ldr	r1, [r7, #0]
     e94:	6878      	ldr	r0, [r7, #4]
     e96:	4b03      	ldr	r3, [pc, #12]	; (ea4 <_ZlsIA24_cER5PrintS2_RKT_+0x1c>)
     e98:	4798      	blx	r3
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	4618      	mov	r0, r3
     e9e:	3708      	adds	r7, #8
     ea0:	46bd      	mov	sp, r7
     ea2:	bd80      	pop	{r7, pc}
     ea4:	00001e65 	.word	0x00001e65

00000ea8 <_ZlsIhER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     ea8:	b580      	push	{r7, lr}
     eaa:	b082      	sub	sp, #8
     eac:	af00      	add	r7, sp, #0
     eae:	6078      	str	r0, [r7, #4]
     eb0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     eb2:	683b      	ldr	r3, [r7, #0]
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	220a      	movs	r2, #10
     eb8:	4619      	mov	r1, r3
     eba:	6878      	ldr	r0, [r7, #4]
     ebc:	4b03      	ldr	r3, [pc, #12]	; (ecc <_ZlsIhER5PrintS1_RKT_+0x24>)
     ebe:	4798      	blx	r3
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	4618      	mov	r0, r3
     ec4:	3708      	adds	r7, #8
     ec6:	46bd      	mov	sp, r7
     ec8:	bd80      	pop	{r7, pc}
     eca:	bf00      	nop
     ecc:	00001e85 	.word	0x00001e85

00000ed0 <_ZlsIA6_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     ed0:	b580      	push	{r7, lr}
     ed2:	b082      	sub	sp, #8
     ed4:	af00      	add	r7, sp, #0
     ed6:	6078      	str	r0, [r7, #4]
     ed8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     eda:	6839      	ldr	r1, [r7, #0]
     edc:	6878      	ldr	r0, [r7, #4]
     ede:	4b03      	ldr	r3, [pc, #12]	; (eec <_ZlsIA6_cER5PrintS2_RKT_+0x1c>)
     ee0:	4798      	blx	r3
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	4618      	mov	r0, r3
     ee6:	3708      	adds	r7, #8
     ee8:	46bd      	mov	sp, r7
     eea:	bd80      	pop	{r7, pc}
     eec:	00001e65 	.word	0x00001e65

00000ef0 <_ZlsIA31_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     ef0:	b580      	push	{r7, lr}
     ef2:	b082      	sub	sp, #8
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
     ef8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     efa:	6839      	ldr	r1, [r7, #0]
     efc:	6878      	ldr	r0, [r7, #4]
     efe:	4b03      	ldr	r3, [pc, #12]	; (f0c <_ZlsIA31_cER5PrintS2_RKT_+0x1c>)
     f00:	4798      	blx	r3
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	4618      	mov	r0, r3
     f06:	3708      	adds	r7, #8
     f08:	46bd      	mov	sp, r7
     f0a:	bd80      	pop	{r7, pc}
     f0c:	00001e65 	.word	0x00001e65

00000f10 <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
     f10:	b480      	push	{r7}
     f12:	b083      	sub	sp, #12
     f14:	af00      	add	r7, sp, #0
     f16:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
     f18:	4a04      	ldr	r2, [pc, #16]	; (f2c <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	4618      	mov	r0, r3
     f22:	370c      	adds	r7, #12
     f24:	46bd      	mov	sp, r7
     f26:	bc80      	pop	{r7}
     f28:	4770      	bx	lr
     f2a:	bf00      	nop
     f2c:	200017d0 	.word	0x200017d0

00000f30 <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
     f30:	b480      	push	{r7}
     f32:	b083      	sub	sp, #12
     f34:	af00      	add	r7, sp, #0
     f36:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	4618      	mov	r0, r3
     f3c:	370c      	adds	r7, #12
     f3e:	46bd      	mov	sp, r7
     f40:	bc80      	pop	{r7}
     f42:	4770      	bx	lr

00000f44 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
     f44:	b480      	push	{r7}
     f46:	b083      	sub	sp, #12
     f48:	af00      	add	r7, sp, #0
     f4a:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
     f4c:	4a04      	ldr	r2, [pc, #16]	; (f60 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
     f4e:	687b      	ldr	r3, [r7, #4]
     f50:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	4618      	mov	r0, r3
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	bc80      	pop	{r7}
     f5c:	4770      	bx	lr
     f5e:	bf00      	nop
     f60:	200017d4 	.word	0x200017d4

00000f64 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
     f64:	b480      	push	{r7}
     f66:	b083      	sub	sp, #12
     f68:	af00      	add	r7, sp, #0
     f6a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
     f6c:	687b      	ldr	r3, [r7, #4]
     f6e:	4618      	mov	r0, r3
     f70:	370c      	adds	r7, #12
     f72:	46bd      	mov	sp, r7
     f74:	bc80      	pop	{r7}
     f76:	4770      	bx	lr

00000f78 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
     f78:	b580      	push	{r7, lr}
     f7a:	b082      	sub	sp, #8
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
     f80:	6039      	str	r1, [r7, #0]
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	3308      	adds	r3, #8
     f86:	4618      	mov	r0, r3
     f88:	4b06      	ldr	r3, [pc, #24]	; (fa4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
     f8a:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	683a      	ldr	r2, [r7, #0]
     f90:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
     f92:	4a05      	ldr	r2, [pc, #20]	; (fa8 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	4618      	mov	r0, r3
     f9c:	3708      	adds	r7, #8
     f9e:	46bd      	mov	sp, r7
     fa0:	bd80      	pop	{r7, pc}
     fa2:	bf00      	nop
     fa4:	00000a59 	.word	0x00000a59
     fa8:	200017d8 	.word	0x200017d8

00000fac <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
     fac:	b580      	push	{r7, lr}
     fae:	b082      	sub	sp, #8
     fb0:	af00      	add	r7, sp, #0
     fb2:	6078      	str	r0, [r7, #4]
     fb4:	687b      	ldr	r3, [r7, #4]
     fb6:	3308      	adds	r3, #8
     fb8:	4618      	mov	r0, r3
     fba:	4b03      	ldr	r3, [pc, #12]	; (fc8 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
     fbc:	4798      	blx	r3
{
} //~AT24MAC_Class
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	4618      	mov	r0, r3
     fc2:	3708      	adds	r7, #8
     fc4:	46bd      	mov	sp, r7
     fc6:	bd80      	pop	{r7, pc}
     fc8:	00000a81 	.word	0x00000a81

00000fcc <_ZN13AT24MAC_Class4InitEv>:


void AT24MAC_Class::Init(void){
     fcc:	b580      	push	{r7, lr}
     fce:	b082      	sub	sp, #8
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
     fd4:	2156      	movs	r1, #86	; 0x56
     fd6:	6878      	ldr	r0, [r7, #4]
     fd8:	4b02      	ldr	r3, [pc, #8]	; (fe4 <_ZN13AT24MAC_Class4InitEv+0x18>)
     fda:	4798      	blx	r3
}
     fdc:	bf00      	nop
     fde:	3708      	adds	r7, #8
     fe0:	46bd      	mov	sp, r7
     fe2:	bd80      	pop	{r7, pc}
     fe4:	00000fe9 	.word	0x00000fe9

00000fe8 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
     fe8:	b580      	push	{r7, lr}
     fea:	b082      	sub	sp, #8
     fec:	af00      	add	r7, sp, #0
     fee:	6078      	str	r0, [r7, #4]
     ff0:	460b      	mov	r3, r1
     ff2:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	78fa      	ldrb	r2, [r7, #3]
     ff8:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
     ffa:	687b      	ldr	r3, [r7, #4]
     ffc:	f103 0208 	add.w	r2, r3, #8
    1000:	687b      	ldr	r3, [r7, #4]
    1002:	685b      	ldr	r3, [r3, #4]
    1004:	4619      	mov	r1, r3
    1006:	4610      	mov	r0, r2
    1008:	4b0a      	ldr	r3, [pc, #40]	; (1034 <_ZN13AT24MAC_Class4InitEh+0x4c>)
    100a:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	3308      	adds	r3, #8
    1010:	78fa      	ldrb	r2, [r7, #3]
    1012:	4611      	mov	r1, r2
    1014:	4618      	mov	r0, r3
    1016:	4b08      	ldr	r3, [pc, #32]	; (1038 <_ZN13AT24MAC_Class4InitEh+0x50>)
    1018:	4798      	blx	r3
    101a:	4603      	mov	r3, r0
    101c:	2b00      	cmp	r3, #0
    101e:	bf0c      	ite	eq
    1020:	2301      	moveq	r3, #1
    1022:	2300      	movne	r3, #0
    1024:	b2da      	uxtb	r2, r3
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	701a      	strb	r2, [r3, #0]
}
    102a:	bf00      	nop
    102c:	3708      	adds	r7, #8
    102e:	46bd      	mov	sp, r7
    1030:	bd80      	pop	{r7, pc}
    1032:	bf00      	nop
    1034:	00000a95 	.word	0x00000a95
    1038:	00000b39 	.word	0x00000b39

0000103c <_ZN13AT24MAC_Class10write_byteEhh>:


int32_t AT24MAC_Class::write_byte(uint8_t addr, uint8_t value){
    103c:	b580      	push	{r7, lr}
    103e:	b084      	sub	sp, #16
    1040:	af00      	add	r7, sp, #0
    1042:	6078      	str	r0, [r7, #4]
    1044:	460b      	mov	r3, r1
    1046:	70fb      	strb	r3, [r7, #3]
    1048:	4613      	mov	r3, r2
    104a:	70bb      	strb	r3, [r7, #2]
	
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	isReady=false;
    104c:	687b      	ldr	r3, [r7, #4]
    104e:	2200      	movs	r2, #0
    1050:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
    1052:	78fb      	ldrb	r3, [r7, #3]
    1054:	723b      	strb	r3, [r7, #8]
	array[1]=value;
    1056:	78bb      	ldrb	r3, [r7, #2]
    1058:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	3308      	adds	r3, #8
    105e:	f107 0108 	add.w	r1, r7, #8
    1062:	2202      	movs	r2, #2
    1064:	4618      	mov	r0, r3
    1066:	4b09      	ldr	r3, [pc, #36]	; (108c <_ZN13AT24MAC_Class10write_byteEhh+0x50>)
    1068:	4798      	blx	r3
    106a:	4603      	mov	r3, r0
    106c:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	7a1b      	ldrb	r3, [r3, #8]
    1072:	b2db      	uxtb	r3, r3
    1074:	f083 0301 	eor.w	r3, r3, #1
    1078:	b2db      	uxtb	r3, r3
    107a:	2b00      	cmp	r3, #0
    107c:	d000      	beq.n	1080 <_ZN13AT24MAC_Class10write_byteEhh+0x44>
    107e:	e7f6      	b.n	106e <_ZN13AT24MAC_Class10write_byteEhh+0x32>
	return	w;
    1080:	68fb      	ldr	r3, [r7, #12]
}
    1082:	4618      	mov	r0, r3
    1084:	3710      	adds	r7, #16
    1086:	46bd      	mov	sp, r7
    1088:	bd80      	pop	{r7, pc}
    108a:	bf00      	nop
    108c:	00000b81 	.word	0x00000b81

00001090 <_ZN13AT24MAC_Class9read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::read_byte(uint8_t addr){
    1090:	b580      	push	{r7, lr}
    1092:	b084      	sub	sp, #16
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
    1098:	460b      	mov	r3, r1
    109a:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	3308      	adds	r3, #8
    10a0:	1cf9      	adds	r1, r7, #3
    10a2:	2201      	movs	r2, #1
    10a4:	4618      	mov	r0, r3
    10a6:	4b10      	ldr	r3, [pc, #64]	; (10e8 <_ZN13AT24MAC_Class9read_byteEh+0x58>)
    10a8:	4798      	blx	r3
	while(!i2ca.txReady);
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	7a1b      	ldrb	r3, [r3, #8]
    10ae:	b2db      	uxtb	r3, r3
    10b0:	f083 0301 	eor.w	r3, r3, #1
    10b4:	b2db      	uxtb	r3, r3
    10b6:	2b00      	cmp	r3, #0
    10b8:	d000      	beq.n	10bc <_ZN13AT24MAC_Class9read_byteEh+0x2c>
    10ba:	e7f6      	b.n	10aa <_ZN13AT24MAC_Class9read_byteEh+0x1a>
	i2ca.Read(&value,1);
    10bc:	687b      	ldr	r3, [r7, #4]
    10be:	3308      	adds	r3, #8
    10c0:	f107 010f 	add.w	r1, r7, #15
    10c4:	2201      	movs	r2, #1
    10c6:	4618      	mov	r0, r3
    10c8:	4b08      	ldr	r3, [pc, #32]	; (10ec <_ZN13AT24MAC_Class9read_byteEh+0x5c>)
    10ca:	4798      	blx	r3
	while(!i2ca.rxReady);
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	7a5b      	ldrb	r3, [r3, #9]
    10d0:	b2db      	uxtb	r3, r3
    10d2:	f083 0301 	eor.w	r3, r3, #1
    10d6:	b2db      	uxtb	r3, r3
    10d8:	2b00      	cmp	r3, #0
    10da:	d000      	beq.n	10de <_ZN13AT24MAC_Class9read_byteEh+0x4e>
    10dc:	e7f6      	b.n	10cc <_ZN13AT24MAC_Class9read_byteEh+0x3c>
	return value;
    10de:	7bfb      	ldrb	r3, [r7, #15]
}
    10e0:	4618      	mov	r0, r3
    10e2:	3710      	adds	r7, #16
    10e4:	46bd      	mov	sp, r7
    10e6:	bd80      	pop	{r7, pc}
    10e8:	00000b81 	.word	0x00000b81
    10ec:	00000bc5 	.word	0x00000bc5

000010f0 <_ZN13AT24MAC_Class15is_EEPROM_readyEv>:
	while(!i2ca.rxReady);
	return r;
}


bool AT24MAC_Class::is_EEPROM_ready(void){
    10f0:	b480      	push	{r7}
    10f2:	b083      	sub	sp, #12
    10f4:	af00      	add	r7, sp, #0
    10f6:	6078      	str	r0, [r7, #4]
	if (i2ca.txReady && i2ca.rxReady)
    10f8:	687b      	ldr	r3, [r7, #4]
    10fa:	7a1b      	ldrb	r3, [r3, #8]
    10fc:	b2db      	uxtb	r3, r3
    10fe:	2b00      	cmp	r3, #0
    1100:	d006      	beq.n	1110 <_ZN13AT24MAC_Class15is_EEPROM_readyEv+0x20>
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	7a5b      	ldrb	r3, [r3, #9]
    1106:	b2db      	uxtb	r3, r3
    1108:	2b00      	cmp	r3, #0
    110a:	d001      	beq.n	1110 <_ZN13AT24MAC_Class15is_EEPROM_readyEv+0x20>
    110c:	2301      	movs	r3, #1
    110e:	e000      	b.n	1112 <_ZN13AT24MAC_Class15is_EEPROM_readyEv+0x22>
    1110:	2300      	movs	r3, #0
    1112:	2b00      	cmp	r3, #0
    1114:	d003      	beq.n	111e <_ZN13AT24MAC_Class15is_EEPROM_readyEv+0x2e>
	{
		isReady=true;
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	2201      	movs	r2, #1
    111a:	701a      	strb	r2, [r3, #0]
    111c:	e002      	b.n	1124 <_ZN13AT24MAC_Class15is_EEPROM_readyEv+0x34>
	}
	else
	{
		isReady=false;
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	2200      	movs	r2, #0
    1122:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	781b      	ldrb	r3, [r3, #0]
    1128:	b2db      	uxtb	r3, r3
}
    112a:	4618      	mov	r0, r3
    112c:	370c      	adds	r7, #12
    112e:	46bd      	mov	sp, r7
    1130:	bc80      	pop	{r7}
    1132:	4770      	bx	lr

00001134 <_Z41__static_initialization_and_destruction_0ii>:

    1134:	b580      	push	{r7, lr}
    1136:	b082      	sub	sp, #8
    1138:	af00      	add	r7, sp, #0
    113a:	6078      	str	r0, [r7, #4]
    113c:	6039      	str	r1, [r7, #0]
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	2b01      	cmp	r3, #1
    1142:	d10d      	bne.n	1160 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1144:	683b      	ldr	r3, [r7, #0]
    1146:	f64f 72ff 	movw	r2, #65535	; 0xffff
    114a:	4293      	cmp	r3, r2
    114c:	d108      	bne.n	1160 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    114e:	4906      	ldr	r1, [pc, #24]	; (1168 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1150:	4806      	ldr	r0, [pc, #24]	; (116c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1152:	4b07      	ldr	r3, [pc, #28]	; (1170 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1154:	4798      	blx	r3
    1156:	4a07      	ldr	r2, [pc, #28]	; (1174 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1158:	4907      	ldr	r1, [pc, #28]	; (1178 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    115a:	4804      	ldr	r0, [pc, #16]	; (116c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    115c:	4b07      	ldr	r3, [pc, #28]	; (117c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    115e:	4798      	blx	r3
    1160:	bf00      	nop
    1162:	3708      	adds	r7, #8
    1164:	46bd      	mov	sp, r7
    1166:	bd80      	pop	{r7, pc}
    1168:	200022b0 	.word	0x200022b0
    116c:	200017dc 	.word	0x200017dc
    1170:	00000f79 	.word	0x00000f79
    1174:	20000000 	.word	0x20000000
    1178:	00000fad 	.word	0x00000fad
    117c:	0000e6cd 	.word	0x0000e6cd

00001180 <_GLOBAL__sub_I_ptrAT24MACClass>:
    1180:	b580      	push	{r7, lr}
    1182:	af00      	add	r7, sp, #0
    1184:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1188:	2001      	movs	r0, #1
    118a:	4b01      	ldr	r3, [pc, #4]	; (1190 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
    118c:	4798      	blx	r3
    118e:	bd80      	pop	{r7, pc}
    1190:	00001135 	.word	0x00001135

00001194 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    1194:	b480      	push	{r7}
    1196:	b083      	sub	sp, #12
    1198:	af00      	add	r7, sp, #0
    119a:	6078      	str	r0, [r7, #4]
    119c:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	683a      	ldr	r2, [r7, #0]
    11a2:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	4a04      	ldr	r2, [pc, #16]	; (11b8 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    11a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    11ac:	687b      	ldr	r3, [r7, #4]
    11ae:	4618      	mov	r0, r3
    11b0:	370c      	adds	r7, #12
    11b2:	46bd      	mov	sp, r7
    11b4:	bc80      	pop	{r7}
    11b6:	4770      	bx	lr
    11b8:	001fff00 	.word	0x001fff00

000011bc <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    11bc:	b480      	push	{r7}
    11be:	b083      	sub	sp, #12
    11c0:	af00      	add	r7, sp, #0
    11c2:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    11c4:	687b      	ldr	r3, [r7, #4]
    11c6:	4618      	mov	r0, r3
    11c8:	370c      	adds	r7, #12
    11ca:	46bd      	mov	sp, r7
    11cc:	bc80      	pop	{r7}
    11ce:	4770      	bx	lr

000011d0 <_Z41__static_initialization_and_destruction_0ii>:
	
	}
uint32_t	N25Q256_Class::GetMemoryCapacity(){
	return	memoryCapacity;
}
    11d0:	b580      	push	{r7, lr}
    11d2:	b082      	sub	sp, #8
    11d4:	af00      	add	r7, sp, #0
    11d6:	6078      	str	r0, [r7, #4]
    11d8:	6039      	str	r1, [r7, #0]
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	2b01      	cmp	r3, #1
    11de:	d10d      	bne.n	11fc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    11e0:	683b      	ldr	r3, [r7, #0]
    11e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    11e6:	4293      	cmp	r3, r2
    11e8:	d108      	bne.n	11fc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    11ea:	4906      	ldr	r1, [pc, #24]	; (1204 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    11ec:	4806      	ldr	r0, [pc, #24]	; (1208 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    11ee:	4b07      	ldr	r3, [pc, #28]	; (120c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    11f0:	4798      	blx	r3
    11f2:	4a07      	ldr	r2, [pc, #28]	; (1210 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    11f4:	4907      	ldr	r1, [pc, #28]	; (1214 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    11f6:	4804      	ldr	r0, [pc, #16]	; (1208 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    11f8:	4b07      	ldr	r3, [pc, #28]	; (1218 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    11fa:	4798      	blx	r3
    11fc:	bf00      	nop
    11fe:	3708      	adds	r7, #8
    1200:	46bd      	mov	sp, r7
    1202:	bd80      	pop	{r7, pc}
    1204:	200021b8 	.word	0x200021b8
    1208:	2000180c 	.word	0x2000180c
    120c:	00001195 	.word	0x00001195
    1210:	20000000 	.word	0x20000000
    1214:	000011bd 	.word	0x000011bd
    1218:	0000e6cd 	.word	0x0000e6cd

0000121c <_GLOBAL__sub_I_ptrN25Q256Class>:
    121c:	b580      	push	{r7, lr}
    121e:	af00      	add	r7, sp, #0
    1220:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1224:	2001      	movs	r0, #1
    1226:	4b01      	ldr	r3, [pc, #4]	; (122c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    1228:	4798      	blx	r3
    122a:	bd80      	pop	{r7, pc}
    122c:	000011d1 	.word	0x000011d1

00001230 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:
	ptrCalendarClass=this;
	//ptrMemory=&memory;
} //Calendar_Class

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    1230:	b580      	push	{r7, lr}
    1232:	b082      	sub	sp, #8
    1234:	af00      	add	r7, sp, #0
    1236:	6078      	str	r0, [r7, #4]
    1238:	6039      	str	r1, [r7, #0]
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	4618      	mov	r0, r3
    123e:	4b08      	ldr	r3, [pc, #32]	; (1260 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    1240:	4798      	blx	r3
    1242:	4a08      	ldr	r2, [pc, #32]	; (1264 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    1248:	687b      	ldr	r3, [r7, #4]
    124a:	683a      	ldr	r2, [r7, #0]
    124c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
    1250:	4a05      	ldr	r2, [pc, #20]	; (1268 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    1252:	687b      	ldr	r3, [r7, #4]
    1254:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	4618      	mov	r0, r3
    125a:	3708      	adds	r7, #8
    125c:	46bd      	mov	sp, r7
    125e:	bd80      	pop	{r7, pc}
    1260:	00001545 	.word	0x00001545
    1264:	00011228 	.word	0x00011228
    1268:	20001a20 	.word	0x20001a20

0000126c <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    126c:	b580      	push	{r7, lr}
    126e:	b082      	sub	sp, #8
    1270:	af00      	add	r7, sp, #0
    1272:	6078      	str	r0, [r7, #4]
    1274:	4a05      	ldr	r2, [pc, #20]	; (128c <_ZN14Calendar_ClassD1Ev+0x20>)
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	601a      	str	r2, [r3, #0]
    127a:	687b      	ldr	r3, [r7, #4]
    127c:	4618      	mov	r0, r3
    127e:	4b04      	ldr	r3, [pc, #16]	; (1290 <_ZN14Calendar_ClassD1Ev+0x24>)
    1280:	4798      	blx	r3
{
} //~Calendar_Class
    1282:	687b      	ldr	r3, [r7, #4]
    1284:	4618      	mov	r0, r3
    1286:	3708      	adds	r7, #8
    1288:	46bd      	mov	sp, r7
    128a:	bd80      	pop	{r7, pc}
    128c:	00011228 	.word	0x00011228
    1290:	00001565 	.word	0x00001565

00001294 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    1294:	b580      	push	{r7, lr}
    1296:	b082      	sub	sp, #8
    1298:	af00      	add	r7, sp, #0
    129a:	6078      	str	r0, [r7, #4]
    129c:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    12a4:	6839      	ldr	r1, [r7, #0]
    12a6:	4618      	mov	r0, r3
    12a8:	4b03      	ldr	r3, [pc, #12]	; (12b8 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    12aa:	4798      	blx	r3
    12ac:	4603      	mov	r3, r0
}
    12ae:	4618      	mov	r0, r3
    12b0:	3708      	adds	r7, #8
    12b2:	46bd      	mov	sp, r7
    12b4:	bd80      	pop	{r7, pc}
    12b6:	bf00      	nop
    12b8:	00003489 	.word	0x00003489

000012bc <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    12bc:	b480      	push	{r7}
    12be:	b083      	sub	sp, #12
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
    12c4:	460b      	mov	r3, r1
    12c6:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    12c8:	887b      	ldrh	r3, [r7, #2]
    12ca:	f003 0303 	and.w	r3, r3, #3
    12ce:	2b00      	cmp	r3, #0
    12d0:	d001      	beq.n	12d6 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    12d2:	2300      	movs	r3, #0
    12d4:	e000      	b.n	12d8 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    12d6:	2301      	movs	r3, #1
	}
}
    12d8:	4618      	mov	r0, r3
    12da:	370c      	adds	r7, #12
    12dc:	46bd      	mov	sp, r7
    12de:	bc80      	pop	{r7}
    12e0:	4770      	bx	lr
	...

000012e4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	b086      	sub	sp, #24
    12e8:	af00      	add	r7, sp, #0
    12ea:	6078      	str	r0, [r7, #4]
    12ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    12ee:	2300      	movs	r3, #0
    12f0:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    12f2:	2300      	movs	r3, #0
    12f4:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    12f6:	683b      	ldr	r3, [r7, #0]
    12f8:	88db      	ldrh	r3, [r3, #6]
    12fa:	b2da      	uxtb	r2, r3
    12fc:	687b      	ldr	r3, [r7, #4]
    12fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1302:	699b      	ldr	r3, [r3, #24]
    1304:	b2db      	uxtb	r3, r3
    1306:	1ad3      	subs	r3, r2, r3
    1308:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    130a:	683b      	ldr	r3, [r7, #0]
    130c:	795b      	ldrb	r3, [r3, #5]
    130e:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    1310:	683b      	ldr	r3, [r7, #0]
    1312:	791b      	ldrb	r3, [r3, #4]
    1314:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    1316:	683b      	ldr	r3, [r7, #0]
    1318:	789b      	ldrb	r3, [r3, #2]
    131a:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    131c:	683b      	ldr	r3, [r7, #0]
    131e:	785b      	ldrb	r3, [r3, #1]
    1320:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    1322:	683b      	ldr	r3, [r7, #0]
    1324:	781b      	ldrb	r3, [r3, #0]
    1326:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    1328:	2300      	movs	r3, #0
    132a:	613b      	str	r3, [r7, #16]
    132c:	7bfa      	ldrb	r2, [r7, #15]
    132e:	693b      	ldr	r3, [r7, #16]
    1330:	429a      	cmp	r2, r3
    1332:	d91e      	bls.n	1372 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    133a:	699b      	ldr	r3, [r3, #24]
    133c:	b29a      	uxth	r2, r3
    133e:	693b      	ldr	r3, [r7, #16]
    1340:	b29b      	uxth	r3, r3
    1342:	4413      	add	r3, r2
    1344:	b29b      	uxth	r3, r3
    1346:	4619      	mov	r1, r3
    1348:	6878      	ldr	r0, [r7, #4]
    134a:	4b27      	ldr	r3, [pc, #156]	; (13e8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    134c:	4798      	blx	r3
    134e:	4603      	mov	r3, r0
    1350:	2b00      	cmp	r3, #0
    1352:	d006      	beq.n	1362 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    1354:	697b      	ldr	r3, [r7, #20]
    1356:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    135a:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    135e:	617b      	str	r3, [r7, #20]
    1360:	e003      	b.n	136a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    1362:	697a      	ldr	r2, [r7, #20]
    1364:	4b21      	ldr	r3, [pc, #132]	; (13ec <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    1366:	4413      	add	r3, r2
    1368:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    136a:	693b      	ldr	r3, [r7, #16]
    136c:	3301      	adds	r3, #1
    136e:	613b      	str	r3, [r7, #16]
    1370:	e7dc      	b.n	132c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    1372:	2301      	movs	r3, #1
    1374:	613b      	str	r3, [r7, #16]
    1376:	7bba      	ldrb	r2, [r7, #14]
    1378:	693b      	ldr	r3, [r7, #16]
    137a:	429a      	cmp	r2, r3
    137c:	d910      	bls.n	13a0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    137e:	683b      	ldr	r3, [r7, #0]
    1380:	88db      	ldrh	r3, [r3, #6]
    1382:	4619      	mov	r1, r3
    1384:	693b      	ldr	r3, [r7, #16]
    1386:	b2db      	uxtb	r3, r3
    1388:	461a      	mov	r2, r3
    138a:	6878      	ldr	r0, [r7, #4]
    138c:	4b18      	ldr	r3, [pc, #96]	; (13f0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    138e:	4798      	blx	r3
    1390:	4602      	mov	r2, r0
    1392:	697b      	ldr	r3, [r7, #20]
    1394:	4413      	add	r3, r2
    1396:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    1398:	693b      	ldr	r3, [r7, #16]
    139a:	3301      	adds	r3, #1
    139c:	613b      	str	r3, [r7, #16]
    139e:	e7ea      	b.n	1376 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    13a0:	7b7b      	ldrb	r3, [r7, #13]
    13a2:	3b01      	subs	r3, #1
    13a4:	4a13      	ldr	r2, [pc, #76]	; (13f4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    13a6:	fb02 f303 	mul.w	r3, r2, r3
    13aa:	461a      	mov	r2, r3
    13ac:	697b      	ldr	r3, [r7, #20]
    13ae:	4413      	add	r3, r2
    13b0:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    13b2:	7b3b      	ldrb	r3, [r7, #12]
    13b4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    13b8:	fb02 f303 	mul.w	r3, r2, r3
    13bc:	461a      	mov	r2, r3
    13be:	697b      	ldr	r3, [r7, #20]
    13c0:	4413      	add	r3, r2
    13c2:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    13c4:	7afa      	ldrb	r2, [r7, #11]
    13c6:	4613      	mov	r3, r2
    13c8:	011b      	lsls	r3, r3, #4
    13ca:	1a9b      	subs	r3, r3, r2
    13cc:	009b      	lsls	r3, r3, #2
    13ce:	461a      	mov	r2, r3
    13d0:	697b      	ldr	r3, [r7, #20]
    13d2:	4413      	add	r3, r2
    13d4:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    13d6:	7abb      	ldrb	r3, [r7, #10]
    13d8:	697a      	ldr	r2, [r7, #20]
    13da:	4413      	add	r3, r2
    13dc:	617b      	str	r3, [r7, #20]

	return tmp;
    13de:	697b      	ldr	r3, [r7, #20]
}
    13e0:	4618      	mov	r0, r3
    13e2:	3718      	adds	r7, #24
    13e4:	46bd      	mov	sp, r7
    13e6:	bd80      	pop	{r7, pc}
    13e8:	000012bd 	.word	0x000012bd
    13ec:	01e13380 	.word	0x01e13380
    13f0:	000013f9 	.word	0x000013f9
    13f4:	00015180 	.word	0x00015180

000013f8 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    13f8:	b580      	push	{r7, lr}
    13fa:	b086      	sub	sp, #24
    13fc:	af00      	add	r7, sp, #0
    13fe:	60f8      	str	r0, [r7, #12]
    1400:	60b9      	str	r1, [r7, #8]
    1402:	4613      	mov	r3, r2
    1404:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    1406:	2300      	movs	r3, #0
    1408:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    140a:	68bb      	ldr	r3, [r7, #8]
    140c:	b29b      	uxth	r3, r3
    140e:	4619      	mov	r1, r3
    1410:	68f8      	ldr	r0, [r7, #12]
    1412:	4b2f      	ldr	r3, [pc, #188]	; (14d0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    1414:	4798      	blx	r3
    1416:	4603      	mov	r3, r0
    1418:	2b00      	cmp	r3, #0
    141a:	d028      	beq.n	146e <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    141c:	79fb      	ldrb	r3, [r7, #7]
    141e:	3b01      	subs	r3, #1
    1420:	2b0b      	cmp	r3, #11
    1422:	d84c      	bhi.n	14be <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    1424:	a201      	add	r2, pc, #4	; (adr r2, 142c <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    1426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    142a:	bf00      	nop
    142c:	0000145d 	.word	0x0000145d
    1430:	00001463 	.word	0x00001463
    1434:	0000145d 	.word	0x0000145d
    1438:	00001469 	.word	0x00001469
    143c:	0000145d 	.word	0x0000145d
    1440:	00001469 	.word	0x00001469
    1444:	0000145d 	.word	0x0000145d
    1448:	0000145d 	.word	0x0000145d
    144c:	00001469 	.word	0x00001469
    1450:	0000145d 	.word	0x0000145d
    1454:	00001469 	.word	0x00001469
    1458:	0000145d 	.word	0x0000145d
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    145c:	4b1d      	ldr	r3, [pc, #116]	; (14d4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    145e:	617b      	str	r3, [r7, #20]
			break;
    1460:	e030      	b.n	14c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    1462:	4b1d      	ldr	r3, [pc, #116]	; (14d8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    1464:	617b      	str	r3, [r7, #20]
			break;
    1466:	e02d      	b.n	14c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    1468:	4b1c      	ldr	r3, [pc, #112]	; (14dc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    146a:	617b      	str	r3, [r7, #20]
			break;
    146c:	e02a      	b.n	14c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    146e:	79fb      	ldrb	r3, [r7, #7]
    1470:	3b01      	subs	r3, #1
    1472:	2b0b      	cmp	r3, #11
    1474:	d825      	bhi.n	14c2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    1476:	a201      	add	r2, pc, #4	; (adr r2, 147c <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    1478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    147c:	000014ad 	.word	0x000014ad
    1480:	000014b3 	.word	0x000014b3
    1484:	000014ad 	.word	0x000014ad
    1488:	000014b9 	.word	0x000014b9
    148c:	000014ad 	.word	0x000014ad
    1490:	000014b9 	.word	0x000014b9
    1494:	000014ad 	.word	0x000014ad
    1498:	000014ad 	.word	0x000014ad
    149c:	000014b9 	.word	0x000014b9
    14a0:	000014ad 	.word	0x000014ad
    14a4:	000014b9 	.word	0x000014b9
    14a8:	000014ad 	.word	0x000014ad
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    14ac:	4b09      	ldr	r3, [pc, #36]	; (14d4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    14ae:	617b      	str	r3, [r7, #20]
			break;
    14b0:	e008      	b.n	14c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    14b2:	4b0b      	ldr	r3, [pc, #44]	; (14e0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    14b4:	617b      	str	r3, [r7, #20]
			break;
    14b6:	e005      	b.n	14c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    14b8:	4b08      	ldr	r3, [pc, #32]	; (14dc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    14ba:	617b      	str	r3, [r7, #20]
			break;
    14bc:	e002      	b.n	14c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    14be:	bf00      	nop
    14c0:	e000      	b.n	14c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    14c2:	bf00      	nop
		}
	}

	return sec_in_month;
    14c4:	697b      	ldr	r3, [r7, #20]
}
    14c6:	4618      	mov	r0, r3
    14c8:	3718      	adds	r7, #24
    14ca:	46bd      	mov	sp, r7
    14cc:	bd80      	pop	{r7, pc}
    14ce:	bf00      	nop
    14d0:	000012bd 	.word	0x000012bd
    14d4:	0028de80 	.word	0x0028de80
    14d8:	00263b80 	.word	0x00263b80
    14dc:	00278d00 	.word	0x00278d00
    14e0:	0024ea00 	.word	0x0024ea00

000014e4 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
    14e4:	b580      	push	{r7, lr}
    14e6:	b082      	sub	sp, #8
    14e8:	af00      	add	r7, sp, #0
    14ea:	6078      	str	r0, [r7, #4]
    14ec:	6039      	str	r1, [r7, #0]
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	2b01      	cmp	r3, #1
    14f2:	d10d      	bne.n	1510 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    14f4:	683b      	ldr	r3, [r7, #0]
    14f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    14fa:	4293      	cmp	r3, r2
    14fc:	d108      	bne.n	1510 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    14fe:	4906      	ldr	r1, [pc, #24]	; (1518 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1500:	4806      	ldr	r0, [pc, #24]	; (151c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1502:	4b07      	ldr	r3, [pc, #28]	; (1520 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1504:	4798      	blx	r3
    1506:	4a07      	ldr	r2, [pc, #28]	; (1524 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1508:	4907      	ldr	r1, [pc, #28]	; (1528 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    150a:	4804      	ldr	r0, [pc, #16]	; (151c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    150c:	4b07      	ldr	r3, [pc, #28]	; (152c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    150e:	4798      	blx	r3
    1510:	bf00      	nop
    1512:	3708      	adds	r7, #8
    1514:	46bd      	mov	sp, r7
    1516:	bd80      	pop	{r7, pc}
    1518:	200022f0 	.word	0x200022f0
    151c:	20001a28 	.word	0x20001a28
    1520:	00001231 	.word	0x00001231
    1524:	20000000 	.word	0x20000000
    1528:	0000126d 	.word	0x0000126d
    152c:	0000e6cd 	.word	0x0000e6cd

00001530 <_GLOBAL__sub_I_ptrCalendarClass>:
    1530:	b580      	push	{r7, lr}
    1532:	af00      	add	r7, sp, #0
    1534:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1538:	2001      	movs	r0, #1
    153a:	4b01      	ldr	r3, [pc, #4]	; (1540 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    153c:	4798      	blx	r3
    153e:	bd80      	pop	{r7, pc}
    1540:	000014e5 	.word	0x000014e5

00001544 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"


DateTimeLog_Class::DateTimeLog_Class()
    1544:	b480      	push	{r7}
    1546:	b083      	sub	sp, #12
    1548:	af00      	add	r7, sp, #0
    154a:	6078      	str	r0, [r7, #4]
    154c:	4a04      	ldr	r2, [pc, #16]	; (1560 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	601a      	str	r2, [r3, #0]
{
} //~D
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	4618      	mov	r0, r3
    1556:	370c      	adds	r7, #12
    1558:	46bd      	mov	sp, r7
    155a:	bc80      	pop	{r7}
    155c:	4770      	bx	lr
    155e:	bf00      	nop
    1560:	00011238 	.word	0x00011238

00001564 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    1564:	b480      	push	{r7}
    1566:	b083      	sub	sp, #12
    1568:	af00      	add	r7, sp, #0
    156a:	6078      	str	r0, [r7, #4]
    156c:	4a04      	ldr	r2, [pc, #16]	; (1580 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	4618      	mov	r0, r3
    1576:	370c      	adds	r7, #12
    1578:	46bd      	mov	sp, r7
    157a:	bc80      	pop	{r7}
    157c:	4770      	bx	lr
    157e:	bf00      	nop
    1580:	00011238 	.word	0x00011238

00001584 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    1584:	b580      	push	{r7, lr}
    1586:	b082      	sub	sp, #8
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <_ZL7task_cbPK10timer_task+0x1c>)
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	4618      	mov	r0, r3
    1592:	4b04      	ldr	r3, [pc, #16]	; (15a4 <_ZL7task_cbPK10timer_task+0x20>)
    1594:	4798      	blx	r3
}
    1596:	bf00      	nop
    1598:	3708      	adds	r7, #8
    159a:	46bd      	mov	sp, r7
    159c:	bd80      	pop	{r7, pc}
    159e:	bf00      	nop
    15a0:	20001ad0 	.word	0x20001ad0
    15a4:	00001681 	.word	0x00001681

000015a8 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
    15a8:	b480      	push	{r7}
    15aa:	b083      	sub	sp, #12
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
{
	prtTimer=this;
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	687a      	ldr	r2, [r7, #4]
    15b4:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    15b6:	4a08      	ldr	r2, [pc, #32]	; (15d8 <_ZN11Timer_ClassC1Ev+0x30>)
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    15c2:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	4a05      	ldr	r2, [pc, #20]	; (15dc <_ZN11Timer_ClassC1Ev+0x34>)
    15c8:	621a      	str	r2, [r3, #32]
} //Timer_Class
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	4618      	mov	r0, r3
    15ce:	370c      	adds	r7, #12
    15d0:	46bd      	mov	sp, r7
    15d2:	bc80      	pop	{r7}
    15d4:	4770      	bx	lr
    15d6:	bf00      	nop
    15d8:	20001ad0 	.word	0x20001ad0
    15dc:	00001585 	.word	0x00001585

000015e0 <_ZN11Timer_ClassC1EP16timer_descriptor>:

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    15e0:	b480      	push	{r7}
    15e2:	b083      	sub	sp, #12
    15e4:	af00      	add	r7, sp, #0
    15e6:	6078      	str	r0, [r7, #4]
    15e8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	683a      	ldr	r2, [r7, #0]
    15ee:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
    15f0:	4a07      	ldr	r2, [pc, #28]	; (1610 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    15f2:	687b      	ldr	r3, [r7, #4]
    15f4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    15fc:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    15fe:	687b      	ldr	r3, [r7, #4]
    1600:	4a04      	ldr	r2, [pc, #16]	; (1614 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    1602:	621a      	str	r2, [r3, #32]
} //Timer_Class
    1604:	687b      	ldr	r3, [r7, #4]
    1606:	4618      	mov	r0, r3
    1608:	370c      	adds	r7, #12
    160a:	46bd      	mov	sp, r7
    160c:	bc80      	pop	{r7}
    160e:	4770      	bx	lr
    1610:	20001ad0 	.word	0x20001ad0
    1614:	00001585 	.word	0x00001585

00001618 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    1618:	b480      	push	{r7}
    161a:	b083      	sub	sp, #12
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	2200      	movs	r2, #0
    1624:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	4618      	mov	r0, r3
    162a:	370c      	adds	r7, #12
    162c:	46bd      	mov	sp, r7
    162e:	bc80      	pop	{r7}
    1630:	4770      	bx	lr
	...

00001634 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
    1634:	b580      	push	{r7, lr}
    1636:	b084      	sub	sp, #16
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	689b      	ldr	r3, [r3, #8]
    1640:	4618      	mov	r0, r3
    1642:	4b04      	ldr	r3, [pc, #16]	; (1654 <_ZN11Timer_Class5startEv+0x20>)
    1644:	4798      	blx	r3
    1646:	60f8      	str	r0, [r7, #12]
	return status;
    1648:	68fb      	ldr	r3, [r7, #12]
	
}
    164a:	4618      	mov	r0, r3
    164c:	3710      	adds	r7, #16
    164e:	46bd      	mov	sp, r7
    1650:	bd80      	pop	{r7, pc}
    1652:	bf00      	nop
    1654:	000042e9 	.word	0x000042e9

00001658 <_ZN11Timer_Class4stopEv>:

int32_t Timer_Class::stop( void){
    1658:	b580      	push	{r7, lr}
    165a:	b084      	sub	sp, #16
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	689b      	ldr	r3, [r3, #8]
    1664:	4618      	mov	r0, r3
    1666:	4b05      	ldr	r3, [pc, #20]	; (167c <_ZN11Timer_Class4stopEv+0x24>)
    1668:	4798      	blx	r3
    166a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	2200      	movs	r2, #0
    1670:	705a      	strb	r2, [r3, #1]
	return status;
    1672:	68fb      	ldr	r3, [r7, #12]
}
    1674:	4618      	mov	r0, r3
    1676:	3710      	adds	r7, #16
    1678:	46bd      	mov	sp, r7
    167a:	bd80      	pop	{r7, pc}
    167c:	0000433d 	.word	0x0000433d

00001680 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
    1680:	b480      	push	{r7}
    1682:	b083      	sub	sp, #12
    1684:	af00      	add	r7, sp, #0
    1686:	6078      	str	r0, [r7, #4]
	timeout=1;
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	2201      	movs	r2, #1
    168c:	705a      	strb	r2, [r3, #1]
}
    168e:	bf00      	nop
    1690:	370c      	adds	r7, #12
    1692:	46bd      	mov	sp, r7
    1694:	bc80      	pop	{r7}
    1696:	4770      	bx	lr

00001698 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t Timer_Class::add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    1698:	b580      	push	{r7, lr}
    169a:	b086      	sub	sp, #24
    169c:	af00      	add	r7, sp, #0
    169e:	60f8      	str	r0, [r7, #12]
    16a0:	60b9      	str	r1, [r7, #8]
    16a2:	607a      	str	r2, [r7, #4]
    16a4:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
    16a6:	68fb      	ldr	r3, [r7, #12]
    16a8:	687a      	ldr	r2, [r7, #4]
    16aa:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    16ac:	68fb      	ldr	r3, [r7, #12]
    16ae:	68ba      	ldr	r2, [r7, #8]
    16b0:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    16b2:	68fb      	ldr	r3, [r7, #12]
    16b4:	78fa      	ldrb	r2, [r7, #3]
    16b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
    16ba:	68fb      	ldr	r3, [r7, #12]
    16bc:	689a      	ldr	r2, [r3, #8]
    16be:	68fb      	ldr	r3, [r7, #12]
    16c0:	3314      	adds	r3, #20
    16c2:	4619      	mov	r1, r3
    16c4:	4610      	mov	r0, r2
    16c6:	4b04      	ldr	r3, [pc, #16]	; (16d8 <_ZN11Timer_Class8add_taskEPFvvEm15timer_task_mode+0x40>)
    16c8:	4798      	blx	r3
    16ca:	6178      	str	r0, [r7, #20]
	
	return status;
    16cc:	697b      	ldr	r3, [r7, #20]
}
    16ce:	4618      	mov	r0, r3
    16d0:	3718      	adds	r7, #24
    16d2:	46bd      	mov	sp, r7
    16d4:	bd80      	pop	{r7, pc}
    16d6:	bf00      	nop
    16d8:	00004399 	.word	0x00004399

000016dc <_ZN11Timer_Class16add_oneShot_taskEPFvvEm>:
int32_t Timer_Class::add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t Timer_Class::add_oneShot_task(FUNC_PTR func,uint32_t interval){
    16dc:	b590      	push	{r4, r7, lr}
    16de:	b087      	sub	sp, #28
    16e0:	af00      	add	r7, sp, #0
    16e2:	60f8      	str	r0, [r7, #12]
    16e4:	60b9      	str	r1, [r7, #8]
    16e6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=add_task(func,interval,TIMER_TASK_ONE_SHOT);
    16e8:	2300      	movs	r3, #0
    16ea:	687a      	ldr	r2, [r7, #4]
    16ec:	68b9      	ldr	r1, [r7, #8]
    16ee:	68f8      	ldr	r0, [r7, #12]
    16f0:	4c06      	ldr	r4, [pc, #24]	; (170c <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x30>)
    16f2:	47a0      	blx	r4
    16f4:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    16f6:	68fb      	ldr	r3, [r7, #12]
    16f8:	689b      	ldr	r3, [r3, #8]
    16fa:	4618      	mov	r0, r3
    16fc:	4b04      	ldr	r3, [pc, #16]	; (1710 <_ZN11Timer_Class16add_oneShot_taskEPFvvEm+0x34>)
    16fe:	4798      	blx	r3
    1700:	6178      	str	r0, [r7, #20]
	return status;
    1702:	697b      	ldr	r3, [r7, #20]
}
    1704:	4618      	mov	r0, r3
    1706:	371c      	adds	r7, #28
    1708:	46bd      	mov	sp, r7
    170a:	bd90      	pop	{r4, r7, pc}
    170c:	00001699 	.word	0x00001699
    1710:	000042e9 	.word	0x000042e9

00001714 <_Z41__static_initialization_and_destruction_0ii>:
	return ticks;
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
    1714:	b580      	push	{r7, lr}
    1716:	b082      	sub	sp, #8
    1718:	af00      	add	r7, sp, #0
    171a:	6078      	str	r0, [r7, #4]
    171c:	6039      	str	r1, [r7, #0]
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	2b01      	cmp	r3, #1
    1722:	d11f      	bne.n	1764 <_Z41__static_initialization_and_destruction_0ii+0x50>
    1724:	683b      	ldr	r3, [r7, #0]
    1726:	f64f 72ff 	movw	r2, #65535	; 0xffff
    172a:	4293      	cmp	r3, r2
    172c:	d11a      	bne.n	1764 <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer_Class eventTimer(&TIMER_EVENT);
    172e:	490f      	ldr	r1, [pc, #60]	; (176c <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1730:	480f      	ldr	r0, [pc, #60]	; (1770 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1732:	4b10      	ldr	r3, [pc, #64]	; (1774 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1734:	4798      	blx	r3
    1736:	4a10      	ldr	r2, [pc, #64]	; (1778 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1738:	4910      	ldr	r1, [pc, #64]	; (177c <_Z41__static_initialization_and_destruction_0ii+0x68>)
    173a:	480d      	ldr	r0, [pc, #52]	; (1770 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    173c:	4b10      	ldr	r3, [pc, #64]	; (1780 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    173e:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    1740:	4910      	ldr	r1, [pc, #64]	; (1784 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1742:	4811      	ldr	r0, [pc, #68]	; (1788 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1744:	4b0b      	ldr	r3, [pc, #44]	; (1774 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1746:	4798      	blx	r3
    1748:	4a0b      	ldr	r2, [pc, #44]	; (1778 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    174a:	490c      	ldr	r1, [pc, #48]	; (177c <_Z41__static_initialization_and_destruction_0ii+0x68>)
    174c:	480e      	ldr	r0, [pc, #56]	; (1788 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    174e:	4b0c      	ldr	r3, [pc, #48]	; (1780 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1750:	4798      	blx	r3
    1752:	490e      	ldr	r1, [pc, #56]	; (178c <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1754:	480e      	ldr	r0, [pc, #56]	; (1790 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1756:	4b07      	ldr	r3, [pc, #28]	; (1774 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1758:	4798      	blx	r3
    175a:	4a07      	ldr	r2, [pc, #28]	; (1778 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    175c:	4907      	ldr	r1, [pc, #28]	; (177c <_Z41__static_initialization_and_destruction_0ii+0x68>)
    175e:	480c      	ldr	r0, [pc, #48]	; (1790 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1760:	4b07      	ldr	r3, [pc, #28]	; (1780 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1762:	4798      	blx	r3
    1764:	bf00      	nop
    1766:	3708      	adds	r7, #8
    1768:	46bd      	mov	sp, r7
    176a:	bd80      	pop	{r7, pc}
    176c:	200021bc 	.word	0x200021bc
    1770:	20001ad4 	.word	0x20001ad4
    1774:	000015e1 	.word	0x000015e1
    1778:	20000000 	.word	0x20000000
    177c:	00001619 	.word	0x00001619
    1780:	0000e6cd 	.word	0x0000e6cd
    1784:	20002294 	.word	0x20002294
    1788:	20001b00 	.word	0x20001b00
    178c:	200021d8 	.word	0x200021d8
    1790:	20001b2c 	.word	0x20001b2c

00001794 <_GLOBAL__sub_I_ptrTimerClass>:
    1794:	b580      	push	{r7, lr}
    1796:	af00      	add	r7, sp, #0
    1798:	f64f 71ff 	movw	r1, #65535	; 0xffff
    179c:	2001      	movs	r0, #1
    179e:	4b01      	ldr	r3, [pc, #4]	; (17a4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    17a0:	4798      	blx	r3
    17a2:	bd80      	pop	{r7, pc}
    17a4:	00001715 	.word	0x00001715

000017a8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    17a8:	b480      	push	{r7}
    17aa:	b083      	sub	sp, #12
    17ac:	af00      	add	r7, sp, #0
    17ae:	6078      	str	r0, [r7, #4]
    17b0:	4a05      	ldr	r2, [pc, #20]	; (17c8 <_ZN5PrintC1Ev+0x20>)
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	601a      	str	r2, [r3, #0]
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	2200      	movs	r2, #0
    17ba:	605a      	str	r2, [r3, #4]
    17bc:	687b      	ldr	r3, [r7, #4]
    17be:	4618      	mov	r0, r3
    17c0:	370c      	adds	r7, #12
    17c2:	46bd      	mov	sp, r7
    17c4:	bc80      	pop	{r7}
    17c6:	4770      	bx	lr
    17c8:	000112b4 	.word	0x000112b4

000017cc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    17cc:	b480      	push	{r7}
    17ce:	b083      	sub	sp, #12
    17d0:	af00      	add	r7, sp, #0
    17d2:	6078      	str	r0, [r7, #4]
    17d4:	2300      	movs	r3, #0
    17d6:	4618      	mov	r0, r3
    17d8:	370c      	adds	r7, #12
    17da:	46bd      	mov	sp, r7
    17dc:	bc80      	pop	{r7}
    17de:	4770      	bx	lr

000017e0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    17e0:	b480      	push	{r7}
    17e2:	b083      	sub	sp, #12
    17e4:	af00      	add	r7, sp, #0
    17e6:	6078      	str	r0, [r7, #4]
    17e8:	bf00      	nop
    17ea:	370c      	adds	r7, #12
    17ec:	46bd      	mov	sp, r7
    17ee:	bc80      	pop	{r7}
    17f0:	4770      	bx	lr
	...

000017f4 <_ZN6StreamC1Ev>:
    Stream() {_timeout=1000;}
    17f4:	b580      	push	{r7, lr}
    17f6:	b082      	sub	sp, #8
    17f8:	af00      	add	r7, sp, #0
    17fa:	6078      	str	r0, [r7, #4]
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	4618      	mov	r0, r3
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <_ZN6StreamC1Ev+0x28>)
    1802:	4798      	blx	r3
    1804:	4a06      	ldr	r2, [pc, #24]	; (1820 <_ZN6StreamC1Ev+0x2c>)
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	601a      	str	r2, [r3, #0]
    180a:	687b      	ldr	r3, [r7, #4]
    180c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1810:	609a      	str	r2, [r3, #8]
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	4618      	mov	r0, r3
    1816:	3708      	adds	r7, #8
    1818:	46bd      	mov	sp, r7
    181a:	bd80      	pop	{r7, pc}
    181c:	000017a9 	.word	0x000017a9
    1820:	00011278 	.word	0x00011278

00001824 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Calendar_Class.h"
#include	"Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    1824:	b480      	push	{r7}
    1826:	b083      	sub	sp, #12
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    182c:	4b07      	ldr	r3, [pc, #28]	; (184c <_ZL14USBTimeoutTaskPK10timer_task+0x28>)
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	2201      	movs	r2, #1
    1832:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	ptrCDCClass->terminal=false;
    1836:	4b05      	ldr	r3, [pc, #20]	; (184c <_ZL14USBTimeoutTaskPK10timer_task+0x28>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	2200      	movs	r2, #0
    183c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
    1840:	bf00      	nop
    1842:	370c      	adds	r7, #12
    1844:	46bd      	mov	sp, r7
    1846:	bc80      	pop	{r7}
    1848:	4770      	bx	lr
    184a:	bf00      	nop
    184c:	20001b58 	.word	0x20001b58

00001850 <_Z12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
volatile bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1850:	b480      	push	{r7}
    1852:	b083      	sub	sp, #12
    1854:	af00      	add	r7, sp, #0
    1856:	4603      	mov	r3, r0
    1858:	603a      	str	r2, [r7, #0]
    185a:	71fb      	strb	r3, [r7, #7]
    185c:	460b      	mov	r3, r1
    185e:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    1860:	4b09      	ldr	r3, [pc, #36]	; (1888 <_Z12cb_bulk_readh13usb_xfer_codem+0x38>)
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	2201      	movs	r2, #1
    1866:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->terminal=true;
    1868:	4b07      	ldr	r3, [pc, #28]	; (1888 <_Z12cb_bulk_readh13usb_xfer_codem+0x38>)
    186a:	681b      	ldr	r3, [r3, #0]
    186c:	2201      	movs	r2, #1
    186e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrCDCClass->plugged=true;
    1872:	4b05      	ldr	r3, [pc, #20]	; (1888 <_Z12cb_bulk_readh13usb_xfer_codem+0x38>)
    1874:	681b      	ldr	r3, [r3, #0]
    1876:	2201      	movs	r2, #1
    1878:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59


	return false;
    187c:	2300      	movs	r3, #0
}
    187e:	4618      	mov	r0, r3
    1880:	370c      	adds	r7, #12
    1882:	46bd      	mov	sp, r7
    1884:	bc80      	pop	{r7}
    1886:	4770      	bx	lr
    1888:	20001b58 	.word	0x20001b58

0000188c <_Z13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
volatile bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    188c:	b480      	push	{r7}
    188e:	b083      	sub	sp, #12
    1890:	af00      	add	r7, sp, #0
    1892:	4603      	mov	r3, r0
    1894:	603a      	str	r2, [r7, #0]
    1896:	71fb      	strb	r3, [r7, #7]
    1898:	460b      	mov	r3, r1
    189a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    189c:	4b09      	ldr	r3, [pc, #36]	; (18c4 <_Z13cb_bulk_writeh13usb_xfer_codem+0x38>)
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	2201      	movs	r2, #1
    18a2:	741a      	strb	r2, [r3, #16]
	ptrCDCClass->terminal=true;
    18a4:	4b07      	ldr	r3, [pc, #28]	; (18c4 <_Z13cb_bulk_writeh13usb_xfer_codem+0x38>)
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	2201      	movs	r2, #1
    18aa:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrCDCClass->plugged=true;
    18ae:	4b05      	ldr	r3, [pc, #20]	; (18c4 <_Z13cb_bulk_writeh13usb_xfer_codem+0x38>)
    18b0:	681b      	ldr	r3, [r3, #0]
    18b2:	2201      	movs	r2, #1
    18b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	

	/* No error. */
	return false;
    18b8:	2300      	movs	r3, #0
}
    18ba:	4618      	mov	r0, r3
    18bc:	370c      	adds	r7, #12
    18be:	46bd      	mov	sp, r7
    18c0:	bc80      	pop	{r7}
    18c2:	4770      	bx	lr
    18c4:	20001b58 	.word	0x20001b58

000018c8 <_Z10cb_state_c22usb_cdc_control_signal>:

volatile bool cb_state_c(usb_cdc_control_signal_t state)
{
    18c8:	b580      	push	{r7, lr}
    18ca:	b082      	sub	sp, #8
    18cc:	af00      	add	r7, sp, #0
    18ce:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    18d0:	793b      	ldrb	r3, [r7, #4]
    18d2:	f003 0301 	and.w	r3, r3, #1
    18d6:	b2db      	uxtb	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	d019      	beq.n	1910 <_Z10cb_state_c22usb_cdc_control_signal+0x48>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    18dc:	490f      	ldr	r1, [pc, #60]	; (191c <_Z10cb_state_c22usb_cdc_control_signal+0x54>)
    18de:	2000      	movs	r0, #0
    18e0:	4b0f      	ldr	r3, [pc, #60]	; (1920 <_Z10cb_state_c22usb_cdc_control_signal+0x58>)
    18e2:	4798      	blx	r3
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    18e4:	490f      	ldr	r1, [pc, #60]	; (1924 <_Z10cb_state_c22usb_cdc_control_signal+0x5c>)
    18e6:	2001      	movs	r0, #1
    18e8:	4b0d      	ldr	r3, [pc, #52]	; (1920 <_Z10cb_state_c22usb_cdc_control_signal+0x58>)
    18ea:	4798      	blx	r3

		ptrCDCClass->txReady=true;
    18ec:	4b0e      	ldr	r3, [pc, #56]	; (1928 <_Z10cb_state_c22usb_cdc_control_signal+0x60>)
    18ee:	681b      	ldr	r3, [r3, #0]
    18f0:	2201      	movs	r2, #1
    18f2:	741a      	strb	r2, [r3, #16]
		ptrCDCClass->rxReady=true;
    18f4:	4b0c      	ldr	r3, [pc, #48]	; (1928 <_Z10cb_state_c22usb_cdc_control_signal+0x60>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	2201      	movs	r2, #1
    18fa:	745a      	strb	r2, [r3, #17]
		ptrCDCClass->plugged=true;
    18fc:	4b0a      	ldr	r3, [pc, #40]	; (1928 <_Z10cb_state_c22usb_cdc_control_signal+0x60>)
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	2201      	movs	r2, #1
    1902:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		ptrCDCClass->terminal=true;
    1906:	4b08      	ldr	r3, [pc, #32]	; (1928 <_Z10cb_state_c22usb_cdc_control_signal+0x60>)
    1908:	681b      	ldr	r3, [r3, #0]
    190a:	2201      	movs	r2, #1
    190c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		
	}

	/* No error. */
	return false;
    1910:	2300      	movs	r3, #0
}
    1912:	4618      	mov	r0, r3
    1914:	3708      	adds	r7, #8
    1916:	46bd      	mov	sp, r7
    1918:	bd80      	pop	{r7, pc}
    191a:	bf00      	nop
    191c:	00001851 	.word	0x00001851
    1920:	0000d651 	.word	0x0000d651
    1924:	0000188d 	.word	0x0000188d
    1928:	20001b58 	.word	0x20001b58

0000192c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    192c:	b580      	push	{r7, lr}
    192e:	b082      	sub	sp, #8
    1930:	af00      	add	r7, sp, #0
    1932:	6078      	str	r0, [r7, #4]
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	4618      	mov	r0, r3
    1938:	4b08      	ldr	r3, [pc, #32]	; (195c <_ZN9CDC_ClassC1Ev+0x30>)
    193a:	4798      	blx	r3
    193c:	4a08      	ldr	r2, [pc, #32]	; (1960 <_ZN9CDC_ClassC1Ev+0x34>)
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	f04f 32ff 	mov.w	r2, #4294967295
    1948:	615a      	str	r2, [r3, #20]
	ptrCDCClass=this;
    194a:	4a06      	ldr	r2, [pc, #24]	; (1964 <_ZN9CDC_ClassC1Ev+0x38>)
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	6013      	str	r3, [r2, #0]
} //CDC_Class
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	4618      	mov	r0, r3
    1954:	3708      	adds	r7, #8
    1956:	46bd      	mov	sp, r7
    1958:	bd80      	pop	{r7, pc}
    195a:	bf00      	nop
    195c:	000017f5 	.word	0x000017f5
    1960:	00011248 	.word	0x00011248
    1964:	20001b58 	.word	0x20001b58

00001968 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    1968:	b480      	push	{r7}
    196a:	b083      	sub	sp, #12
    196c:	af00      	add	r7, sp, #0
    196e:	6078      	str	r0, [r7, #4]
    1970:	4a04      	ldr	r2, [pc, #16]	; (1984 <_ZN9CDC_ClassD1Ev+0x1c>)
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	601a      	str	r2, [r3, #0]
{
} //~CDC_Class
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	4618      	mov	r0, r3
    197a:	370c      	adds	r7, #12
    197c:	46bd      	mov	sp, r7
    197e:	bc80      	pop	{r7}
    1980:	4770      	bx	lr
    1982:	bf00      	nop
    1984:	00011248 	.word	0x00011248

00001988 <_ZN9CDC_Class4initEv>:

void CDC_Class::init(void){
    1988:	b580      	push	{r7, lr}
    198a:	b082      	sub	sp, #8
    198c:	af00      	add	r7, sp, #0
    198e:	6078      	str	r0, [r7, #4]
	
	timeout=false;
    1990:	687b      	ldr	r3, [r7, #4]
    1992:	2200      	movs	r2, #0
    1994:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	terminal=true;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	2201      	movs	r2, #1
    199c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	connectionTimer.add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT);
    19a0:	22c8      	movs	r2, #200	; 0xc8
    19a2:	4911      	ldr	r1, [pc, #68]	; (19e8 <_ZN9CDC_Class4initEv+0x60>)
    19a4:	4811      	ldr	r0, [pc, #68]	; (19ec <_ZN9CDC_Class4initEv+0x64>)
    19a6:	4b12      	ldr	r3, [pc, #72]	; (19f0 <_ZN9CDC_Class4initEv+0x68>)
    19a8:	4798      	blx	r3
	while (!IsEnabled()){
    19aa:	6878      	ldr	r0, [r7, #4]
    19ac:	4b11      	ldr	r3, [pc, #68]	; (19f4 <_ZN9CDC_Class4initEv+0x6c>)
    19ae:	4798      	blx	r3
    19b0:	4603      	mov	r3, r0
    19b2:	f083 0301 	eor.w	r3, r3, #1
    19b6:	b2db      	uxtb	r3, r3
    19b8:	2b00      	cmp	r3, #0
    19ba:	d00a      	beq.n	19d2 <_ZN9CDC_Class4initEv+0x4a>
		if (timeout)
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    19c2:	b2db      	uxtb	r3, r3
    19c4:	2b00      	cmp	r3, #0
    19c6:	d0f0      	beq.n	19aa <_ZN9CDC_Class4initEv+0x22>
		{
			plugged=false;
    19c8:	687b      	ldr	r3, [r7, #4]
    19ca:	2200      	movs	r2, #0
    19cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			return;
    19d0:	e006      	b.n	19e0 <_ZN9CDC_Class4initEv+0x58>
		}
		else
		{
		}
	}
	connectionTimer.stop();
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_ZN9CDC_Class4initEv+0x64>)
    19d4:	4b08      	ldr	r3, [pc, #32]	; (19f8 <_ZN9CDC_Class4initEv+0x70>)
    19d6:	4798      	blx	r3
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    19d8:	4908      	ldr	r1, [pc, #32]	; (19fc <_ZN9CDC_Class4initEv+0x74>)
    19da:	2003      	movs	r0, #3
    19dc:	4b08      	ldr	r3, [pc, #32]	; (1a00 <_ZN9CDC_Class4initEv+0x78>)
    19de:	4798      	blx	r3


}
    19e0:	3708      	adds	r7, #8
    19e2:	46bd      	mov	sp, r7
    19e4:	bd80      	pop	{r7, pc}
    19e6:	bf00      	nop
    19e8:	00001825 	.word	0x00001825
    19ec:	20001b2c 	.word	0x20001b2c
    19f0:	000016dd 	.word	0x000016dd
    19f4:	00001a05 	.word	0x00001a05
    19f8:	00001659 	.word	0x00001659
    19fc:	000018c9 	.word	0x000018c9
    1a00:	0000d651 	.word	0x0000d651

00001a04 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    1a04:	b580      	push	{r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	af00      	add	r7, sp, #0
    1a0a:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    1a0c:	4b03      	ldr	r3, [pc, #12]	; (1a1c <_ZN9CDC_Class9IsEnabledEv+0x18>)
    1a0e:	4798      	blx	r3
    1a10:	4603      	mov	r3, r0
	
}
    1a12:	4618      	mov	r0, r3
    1a14:	3708      	adds	r7, #8
    1a16:	46bd      	mov	sp, r7
    1a18:	bd80      	pop	{r7, pc}
    1a1a:	bf00      	nop
    1a1c:	0000d6c9 	.word	0x0000d6c9

00001a20 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	b084      	sub	sp, #16
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	695b      	ldr	r3, [r3, #20]
    1a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1a30:	bf14      	ite	ne
    1a32:	2301      	movne	r3, #1
    1a34:	2300      	moveq	r3, #0
    1a36:	b2db      	uxtb	r3, r3
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d002      	beq.n	1a42 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	695b      	ldr	r3, [r3, #20]
    1a40:	e011      	b.n	1a66 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	681b      	ldr	r3, [r3, #0]
    1a46:	331c      	adds	r3, #28
    1a48:	681b      	ldr	r3, [r3, #0]
    1a4a:	f107 010f 	add.w	r1, r7, #15
    1a4e:	2201      	movs	r2, #1
    1a50:	6878      	ldr	r0, [r7, #4]
    1a52:	4798      	blx	r3
    1a54:	4602      	mov	r2, r0
    1a56:	687b      	ldr	r3, [r7, #4]
    1a58:	615a      	str	r2, [r3, #20]
	_serialPeek=(int)r;
    1a5a:	7bfb      	ldrb	r3, [r7, #15]
    1a5c:	461a      	mov	r2, r3
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	615a      	str	r2, [r3, #20]
	return _serialPeek;
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	695b      	ldr	r3, [r3, #20]
}
    1a66:	4618      	mov	r0, r3
    1a68:	3710      	adds	r7, #16
    1a6a:	46bd      	mov	sp, r7
    1a6c:	bd80      	pop	{r7, pc}
	...

00001a70 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	b086      	sub	sp, #24
    1a74:	af00      	add	r7, sp, #0
    1a76:	60f8      	str	r0, [r7, #12]
    1a78:	60b9      	str	r1, [r7, #8]
    1a7a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    1a7c:	68fb      	ldr	r3, [r7, #12]
    1a7e:	2200      	movs	r2, #0
    1a80:	745a      	strb	r2, [r3, #17]
	r=cdcdf_acm_read((uint8_t *)p, size);
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	4619      	mov	r1, r3
    1a86:	68b8      	ldr	r0, [r7, #8]
    1a88:	4b08      	ldr	r3, [pc, #32]	; (1aac <_ZN9CDC_Class8readDataEPvl+0x3c>)
    1a8a:	4798      	blx	r3
    1a8c:	4603      	mov	r3, r0
    1a8e:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    1a90:	68fb      	ldr	r3, [r7, #12]
    1a92:	7c5b      	ldrb	r3, [r3, #17]
    1a94:	b2db      	uxtb	r3, r3
    1a96:	f083 0301 	eor.w	r3, r3, #1
    1a9a:	b2db      	uxtb	r3, r3
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d000      	beq.n	1aa2 <_ZN9CDC_Class8readDataEPvl+0x32>
    1aa0:	e7f6      	b.n	1a90 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    1aa2:	7dfb      	ldrb	r3, [r7, #23]
}
    1aa4:	4618      	mov	r0, r3
    1aa6:	3718      	adds	r7, #24
    1aa8:	46bd      	mov	sp, r7
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	0000d5a5 	.word	0x0000d5a5

00001ab0 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b084      	sub	sp, #16
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	2200      	movs	r2, #0
    1abc:	745a      	strb	r2, [r3, #17]
	cdcdf_acm_read(&p, 1);
    1abe:	f107 030f 	add.w	r3, r7, #15
    1ac2:	2101      	movs	r1, #1
    1ac4:	4618      	mov	r0, r3
    1ac6:	4b08      	ldr	r3, [pc, #32]	; (1ae8 <_ZN9CDC_Class4readEv+0x38>)
    1ac8:	4798      	blx	r3
	while(!rxReady);
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	7c5b      	ldrb	r3, [r3, #17]
    1ace:	b2db      	uxtb	r3, r3
    1ad0:	f083 0301 	eor.w	r3, r3, #1
    1ad4:	b2db      	uxtb	r3, r3
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d000      	beq.n	1adc <_ZN9CDC_Class4readEv+0x2c>
    1ada:	e7f6      	b.n	1aca <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    1adc:	7bfb      	ldrb	r3, [r7, #15]
}
    1ade:	4618      	mov	r0, r3
    1ae0:	3710      	adds	r7, #16
    1ae2:	46bd      	mov	sp, r7
    1ae4:	bd80      	pop	{r7, pc}
    1ae6:	bf00      	nop
    1ae8:	0000d5a5 	.word	0x0000d5a5

00001aec <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    1aec:	b580      	push	{r7, lr}
    1aee:	b082      	sub	sp, #8
    1af0:	af00      	add	r7, sp, #0
    1af2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	3318      	adds	r3, #24
    1af8:	2140      	movs	r1, #64	; 0x40
    1afa:	4618      	mov	r0, r3
    1afc:	4b02      	ldr	r3, [pc, #8]	; (1b08 <_ZN9CDC_Class5flushEv+0x1c>)
    1afe:	4798      	blx	r3
}
    1b00:	bf00      	nop
    1b02:	3708      	adds	r7, #8
    1b04:	46bd      	mov	sp, r7
    1b06:	bd80      	pop	{r7, pc}
    1b08:	0000d5e9 	.word	0x0000d5e9

00001b0c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b082      	sub	sp, #8
    1b10:	af00      	add	r7, sp, #0
    1b12:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    1b14:	4b02      	ldr	r3, [pc, #8]	; (1b20 <_ZN9CDC_Class5clearEv+0x14>)
    1b16:	4798      	blx	r3
}
    1b18:	bf00      	nop
    1b1a:	3708      	adds	r7, #8
    1b1c:	46bd      	mov	sp, r7
    1b1e:	bd80      	pop	{r7, pc}
    1b20:	0000d62d 	.word	0x0000d62d

00001b24 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    1b24:	b580      	push	{r7, lr}
    1b26:	b082      	sub	sp, #8
    1b28:	af00      	add	r7, sp, #0
    1b2a:	6078      	str	r0, [r7, #4]
    1b2c:	460b      	mov	r3, r1
    1b2e:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	7c1b      	ldrb	r3, [r3, #16]
    1b34:	b2db      	uxtb	r3, r3
    1b36:	f083 0301 	eor.w	r3, r3, #1
    1b3a:	b2db      	uxtb	r3, r3
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d000      	beq.n	1b42 <_ZN9CDC_Class5writeEh+0x1e>
    1b40:	e7f6      	b.n	1b30 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	681b      	ldr	r3, [r3, #0]
    1b46:	3324      	adds	r3, #36	; 0x24
    1b48:	681b      	ldr	r3, [r3, #0]
    1b4a:	1cf9      	adds	r1, r7, #3
    1b4c:	2201      	movs	r2, #1
    1b4e:	6878      	ldr	r0, [r7, #4]
    1b50:	4798      	blx	r3
    1b52:	4603      	mov	r3, r0
}
    1b54:	4618      	mov	r0, r3
    1b56:	3708      	adds	r7, #8
    1b58:	46bd      	mov	sp, r7
    1b5a:	bd80      	pop	{r7, pc}

00001b5c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b086      	sub	sp, #24
    1b60:	af00      	add	r7, sp, #0
    1b62:	60f8      	str	r0, [r7, #12]
    1b64:	60b9      	str	r1, [r7, #8]
    1b66:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	2200      	movs	r2, #0
    1b6c:	741a      	strb	r2, [r3, #16]
	if ((CheckTerminal())&&terminal)
    1b6e:	68f8      	ldr	r0, [r7, #12]
    1b70:	4b19      	ldr	r3, [pc, #100]	; (1bd8 <_ZN9CDC_Class9writeDataEPKvl+0x7c>)
    1b72:	4798      	blx	r3
    1b74:	4603      	mov	r3, r0
    1b76:	2b00      	cmp	r3, #0
    1b78:	d006      	beq.n	1b88 <_ZN9CDC_Class9writeDataEPKvl+0x2c>
    1b7a:	68fb      	ldr	r3, [r7, #12]
    1b7c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    1b80:	2b00      	cmp	r3, #0
    1b82:	d001      	beq.n	1b88 <_ZN9CDC_Class9writeDataEPKvl+0x2c>
    1b84:	2301      	movs	r3, #1
    1b86:	e000      	b.n	1b8a <_ZN9CDC_Class9writeDataEPKvl+0x2e>
    1b88:	2300      	movs	r3, #0
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d01e      	beq.n	1bcc <_ZN9CDC_Class9writeDataEPKvl+0x70>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	4619      	mov	r1, r3
    1b92:	68b8      	ldr	r0, [r7, #8]
    1b94:	4b11      	ldr	r3, [pc, #68]	; (1bdc <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    1b96:	4798      	blx	r3
    1b98:	4603      	mov	r3, r0
    1b9a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminal)){
    1b9c:	68fb      	ldr	r3, [r7, #12]
    1b9e:	7c1b      	ldrb	r3, [r3, #16]
    1ba0:	b2db      	uxtb	r3, r3
    1ba2:	f083 0301 	eor.w	r3, r3, #1
    1ba6:	b2db      	uxtb	r3, r3
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d006      	beq.n	1bba <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    1bac:	68fb      	ldr	r3, [r7, #12]
    1bae:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d001      	beq.n	1bba <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    1bb6:	2301      	movs	r3, #1
    1bb8:	e000      	b.n	1bbc <_ZN9CDC_Class9writeDataEPKvl+0x60>
    1bba:	2300      	movs	r3, #0
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d000      	beq.n	1bc2 <_ZN9CDC_Class9writeDataEPKvl+0x66>
    1bc0:	e7ec      	b.n	1b9c <_ZN9CDC_Class9writeDataEPKvl+0x40>
			
			};
			connectionTimer.stop();
    1bc2:	4807      	ldr	r0, [pc, #28]	; (1be0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    1bc4:	4b07      	ldr	r3, [pc, #28]	; (1be4 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    1bc6:	4798      	blx	r3
		return r;
    1bc8:	697b      	ldr	r3, [r7, #20]
    1bca:	e000      	b.n	1bce <_ZN9CDC_Class9writeDataEPKvl+0x72>
	} 
	else
	{
		return 0;
    1bcc:	2300      	movs	r3, #0
	}
	

}
    1bce:	4618      	mov	r0, r3
    1bd0:	3718      	adds	r7, #24
    1bd2:	46bd      	mov	sp, r7
    1bd4:	bd80      	pop	{r7, pc}
    1bd6:	bf00      	nop
    1bd8:	00001ca9 	.word	0x00001ca9
    1bdc:	0000d5e9 	.word	0x0000d5e9
    1be0:	20001b2c 	.word	0x20001b2c
    1be4:	00001659 	.word	0x00001659

00001be8 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	b086      	sub	sp, #24
    1bec:	af00      	add	r7, sp, #0
    1bee:	60f8      	str	r0, [r7, #12]
    1bf0:	60b9      	str	r1, [r7, #8]
    1bf2:	607a      	str	r2, [r7, #4]
	txReady=false;
    1bf4:	68fb      	ldr	r3, [r7, #12]
    1bf6:	2200      	movs	r2, #0
    1bf8:	741a      	strb	r2, [r3, #16]
	if (CheckTerminal()&&terminal)
    1bfa:	68f8      	ldr	r0, [r7, #12]
    1bfc:	4b18      	ldr	r3, [pc, #96]	; (1c60 <_ZN9CDC_Class5writeEPKhj+0x78>)
    1bfe:	4798      	blx	r3
    1c00:	4603      	mov	r3, r0
    1c02:	2b00      	cmp	r3, #0
    1c04:	d006      	beq.n	1c14 <_ZN9CDC_Class5writeEPKhj+0x2c>
    1c06:	68fb      	ldr	r3, [r7, #12]
    1c08:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d001      	beq.n	1c14 <_ZN9CDC_Class5writeEPKhj+0x2c>
    1c10:	2301      	movs	r3, #1
    1c12:	e000      	b.n	1c16 <_ZN9CDC_Class5writeEPKhj+0x2e>
    1c14:	2300      	movs	r3, #0
    1c16:	2b00      	cmp	r3, #0
    1c18:	d01d      	beq.n	1c56 <_ZN9CDC_Class5writeEPKhj+0x6e>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    1c1a:	6879      	ldr	r1, [r7, #4]
    1c1c:	68b8      	ldr	r0, [r7, #8]
    1c1e:	4b11      	ldr	r3, [pc, #68]	; (1c64 <_ZN9CDC_Class5writeEPKhj+0x7c>)
    1c20:	4798      	blx	r3
    1c22:	4603      	mov	r3, r0
    1c24:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminal)){
    1c26:	68fb      	ldr	r3, [r7, #12]
    1c28:	7c1b      	ldrb	r3, [r3, #16]
    1c2a:	b2db      	uxtb	r3, r3
    1c2c:	f083 0301 	eor.w	r3, r3, #1
    1c30:	b2db      	uxtb	r3, r3
    1c32:	2b00      	cmp	r3, #0
    1c34:	d006      	beq.n	1c44 <_ZN9CDC_Class5writeEPKhj+0x5c>
    1c36:	68fb      	ldr	r3, [r7, #12]
    1c38:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d001      	beq.n	1c44 <_ZN9CDC_Class5writeEPKhj+0x5c>
    1c40:	2301      	movs	r3, #1
    1c42:	e000      	b.n	1c46 <_ZN9CDC_Class5writeEPKhj+0x5e>
    1c44:	2300      	movs	r3, #0
    1c46:	2b00      	cmp	r3, #0
    1c48:	d000      	beq.n	1c4c <_ZN9CDC_Class5writeEPKhj+0x64>
    1c4a:	e7ec      	b.n	1c26 <_ZN9CDC_Class5writeEPKhj+0x3e>
			
		};
		connectionTimer.stop();
    1c4c:	4806      	ldr	r0, [pc, #24]	; (1c68 <_ZN9CDC_Class5writeEPKhj+0x80>)
    1c4e:	4b07      	ldr	r3, [pc, #28]	; (1c6c <_ZN9CDC_Class5writeEPKhj+0x84>)
    1c50:	4798      	blx	r3
		return r;
    1c52:	697b      	ldr	r3, [r7, #20]
    1c54:	e000      	b.n	1c58 <_ZN9CDC_Class5writeEPKhj+0x70>
	}
	else
	{
		return 0;
    1c56:	2300      	movs	r3, #0
	}
	
	
	
}
    1c58:	4618      	mov	r0, r3
    1c5a:	3718      	adds	r7, #24
    1c5c:	46bd      	mov	sp, r7
    1c5e:	bd80      	pop	{r7, pc}
    1c60:	00001ca9 	.word	0x00001ca9
    1c64:	0000d5e9 	.word	0x0000d5e9
    1c68:	20001b2c 	.word	0x20001b2c
    1c6c:	00001659 	.word	0x00001659

00001c70 <_ZN9CDC_Class9availableEv>:
			return 0;
		}

}

bool	CDC_Class::available(void){
    1c70:	b480      	push	{r7}
    1c72:	b083      	sub	sp, #12
    1c74:	af00      	add	r7, sp, #0
    1c76:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	7c5b      	ldrb	r3, [r3, #17]
    1c7c:	b2db      	uxtb	r3, r3
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d006      	beq.n	1c90 <_ZN9CDC_Class9availableEv+0x20>
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	7c1b      	ldrb	r3, [r3, #16]
    1c86:	b2db      	uxtb	r3, r3
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d001      	beq.n	1c90 <_ZN9CDC_Class9availableEv+0x20>
    1c8c:	2301      	movs	r3, #1
    1c8e:	e000      	b.n	1c92 <_ZN9CDC_Class9availableEv+0x22>
    1c90:	2300      	movs	r3, #0
    1c92:	2b00      	cmp	r3, #0
    1c94:	d001      	beq.n	1c9a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    1c96:	2301      	movs	r3, #1
    1c98:	e000      	b.n	1c9c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    1c9a:	2300      	movs	r3, #0
	}
	
}
    1c9c:	4618      	mov	r0, r3
    1c9e:	370c      	adds	r7, #12
    1ca0:	46bd      	mov	sp, r7
    1ca2:	bc80      	pop	{r7}
    1ca4:	4770      	bx	lr
	...

00001ca8 <_ZN9CDC_Class13CheckTerminalEv>:
bool	CDC_Class::CheckTerminal(void){
    1ca8:	b580      	push	{r7, lr}
    1caa:	b082      	sub	sp, #8
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
	if (terminal)
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	d021      	beq.n	1cfe <_ZN9CDC_Class13CheckTerminalEv+0x56>
	{
		if (plugged||IsEnabled())
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d105      	bne.n	1cd0 <_ZN9CDC_Class13CheckTerminalEv+0x28>
    1cc4:	6878      	ldr	r0, [r7, #4]
    1cc6:	4b13      	ldr	r3, [pc, #76]	; (1d14 <_ZN9CDC_Class13CheckTerminalEv+0x6c>)
    1cc8:	4798      	blx	r3
    1cca:	4603      	mov	r3, r0
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d001      	beq.n	1cd4 <_ZN9CDC_Class13CheckTerminalEv+0x2c>
    1cd0:	2301      	movs	r3, #1
    1cd2:	e000      	b.n	1cd6 <_ZN9CDC_Class13CheckTerminalEv+0x2e>
    1cd4:	2300      	movs	r3, #0
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d00c      	beq.n	1cf4 <_ZN9CDC_Class13CheckTerminalEv+0x4c>
		{
			terminal=connectionTimer.start()==0;
    1cda:	480f      	ldr	r0, [pc, #60]	; (1d18 <_ZN9CDC_Class13CheckTerminalEv+0x70>)
    1cdc:	4b0f      	ldr	r3, [pc, #60]	; (1d1c <_ZN9CDC_Class13CheckTerminalEv+0x74>)
    1cde:	4798      	blx	r3
    1ce0:	4603      	mov	r3, r0
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	bf0c      	ite	eq
    1ce6:	2301      	moveq	r3, #1
    1ce8:	2300      	movne	r3, #0
    1cea:	b2da      	uxtb	r2, r3
    1cec:	687b      	ldr	r3, [r7, #4]
    1cee:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    1cf2:	e008      	b.n	1d06 <_ZN9CDC_Class13CheckTerminalEv+0x5e>
		}
		else
		{
			terminal=false;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	2200      	movs	r2, #0
    1cf8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    1cfc:	e003      	b.n	1d06 <_ZN9CDC_Class13CheckTerminalEv+0x5e>
		}
	} 
	else
	{
		return	terminal;	
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    1d04:	e002      	b.n	1d0c <_ZN9CDC_Class13CheckTerminalEv+0x64>
	}
	
	return	terminal;	
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
}
    1d0c:	4618      	mov	r0, r3
    1d0e:	3708      	adds	r7, #8
    1d10:	46bd      	mov	sp, r7
    1d12:	bd80      	pop	{r7, pc}
    1d14:	00001a05 	.word	0x00001a05
    1d18:	20001b2c 	.word	0x20001b2c
    1d1c:	00001635 	.word	0x00001635

00001d20 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

CDC_Class	usb;
    1d20:	b580      	push	{r7, lr}
    1d22:	b082      	sub	sp, #8
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
    1d28:	6039      	str	r1, [r7, #0]
    1d2a:	687b      	ldr	r3, [r7, #4]
    1d2c:	2b01      	cmp	r3, #1
    1d2e:	d10c      	bne.n	1d4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d36:	4293      	cmp	r3, r2
    1d38:	d107      	bne.n	1d4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1d3a:	4806      	ldr	r0, [pc, #24]	; (1d54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1d3c:	4b06      	ldr	r3, [pc, #24]	; (1d58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1d3e:	4798      	blx	r3
    1d40:	4a06      	ldr	r2, [pc, #24]	; (1d5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1d42:	4907      	ldr	r1, [pc, #28]	; (1d60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1d44:	4803      	ldr	r0, [pc, #12]	; (1d54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1d46:	4b07      	ldr	r3, [pc, #28]	; (1d64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1d48:	4798      	blx	r3
    1d4a:	bf00      	nop
    1d4c:	3708      	adds	r7, #8
    1d4e:	46bd      	mov	sp, r7
    1d50:	bd80      	pop	{r7, pc}
    1d52:	bf00      	nop
    1d54:	20001b5c 	.word	0x20001b5c
    1d58:	0000192d 	.word	0x0000192d
    1d5c:	20000000 	.word	0x20000000
    1d60:	00001969 	.word	0x00001969
    1d64:	0000e6cd 	.word	0x0000e6cd

00001d68 <_GLOBAL__sub_I_ptrCDCClass>:
    1d68:	b580      	push	{r7, lr}
    1d6a:	af00      	add	r7, sp, #0
    1d6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1d70:	2001      	movs	r0, #1
    1d72:	4b01      	ldr	r3, [pc, #4]	; (1d78 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    1d74:	4798      	blx	r3
    1d76:	bd80      	pop	{r7, pc}
    1d78:	00001d21 	.word	0x00001d21

00001d7c <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    1d7c:	b480      	push	{r7}
    1d7e:	b083      	sub	sp, #12
    1d80:	af00      	add	r7, sp, #0
    1d82:	6078      	str	r0, [r7, #4]
    return (void *)0;
    1d84:	2300      	movs	r3, #0
	}
    1d86:	4618      	mov	r0, r3
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	bc80      	pop	{r7}
    1d8e:	4770      	bx	lr

00001d90 <free>:
//............................................................................
extern "C" void free(void *)
	{
    1d90:	b480      	push	{r7}
    1d92:	b083      	sub	sp, #12
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
	}
    1d98:	bf00      	nop
    1d9a:	370c      	adds	r7, #12
    1d9c:	46bd      	mov	sp, r7
    1d9e:	bc80      	pop	{r7}
    1da0:	4770      	bx	lr

00001da2 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    1da2:	b480      	push	{r7}
    1da4:	af00      	add	r7, sp, #0
		}
    1da6:	bf00      	nop
    1da8:	46bd      	mov	sp, r7
    1daa:	bc80      	pop	{r7}
    1dac:	4770      	bx	lr
	...

00001db0 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
    1db0:	b580      	push	{r7, lr}
    1db2:	b082      	sub	sp, #8
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
	free(p);
    1db8:	6878      	ldr	r0, [r7, #4]
    1dba:	4b03      	ldr	r3, [pc, #12]	; (1dc8 <_ZdlPv+0x18>)
    1dbc:	4798      	blx	r3
	}
    1dbe:	bf00      	nop
    1dc0:	3708      	adds	r7, #8
    1dc2:	46bd      	mov	sp, r7
    1dc4:	bd80      	pop	{r7, pc}
    1dc6:	bf00      	nop
    1dc8:	00001d91 	.word	0x00001d91

00001dcc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    1dcc:	b590      	push	{r4, r7, lr}
    1dce:	b083      	sub	sp, #12
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	6078      	str	r0, [r7, #4]
    1dd4:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    1dd6:	683b      	ldr	r3, [r7, #0]
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d101      	bne.n	1de0 <_ZN5Print5writeEPKc+0x14>
    1ddc:	2300      	movs	r3, #0
    1dde:	e00c      	b.n	1dfa <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	681b      	ldr	r3, [r3, #0]
    1de4:	3304      	adds	r3, #4
    1de6:	681c      	ldr	r4, [r3, #0]
    1de8:	6838      	ldr	r0, [r7, #0]
    1dea:	4b06      	ldr	r3, [pc, #24]	; (1e04 <_ZN5Print5writeEPKc+0x38>)
    1dec:	4798      	blx	r3
    1dee:	4603      	mov	r3, r0
    1df0:	461a      	mov	r2, r3
    1df2:	6839      	ldr	r1, [r7, #0]
    1df4:	6878      	ldr	r0, [r7, #4]
    1df6:	47a0      	blx	r4
    1df8:	4603      	mov	r3, r0
    }
    1dfa:	4618      	mov	r0, r3
    1dfc:	370c      	adds	r7, #12
    1dfe:	46bd      	mov	sp, r7
    1e00:	bd90      	pop	{r4, r7, pc}
    1e02:	bf00      	nop
    1e04:	000103c1 	.word	0x000103c1

00001e08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1e08:	b580      	push	{r7, lr}
    1e0a:	b086      	sub	sp, #24
    1e0c:	af00      	add	r7, sp, #0
    1e0e:	60f8      	str	r0, [r7, #12]
    1e10:	60b9      	str	r1, [r7, #8]
    1e12:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    1e14:	2300      	movs	r3, #0
    1e16:	617b      	str	r3, [r7, #20]
  while (size--) {
    1e18:	687b      	ldr	r3, [r7, #4]
    1e1a:	1e5a      	subs	r2, r3, #1
    1e1c:	607a      	str	r2, [r7, #4]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	bf14      	ite	ne
    1e22:	2301      	movne	r3, #1
    1e24:	2300      	moveq	r3, #0
    1e26:	b2db      	uxtb	r3, r3
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d016      	beq.n	1e5a <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	681b      	ldr	r3, [r3, #0]
    1e30:	681a      	ldr	r2, [r3, #0]
    1e32:	68bb      	ldr	r3, [r7, #8]
    1e34:	1c59      	adds	r1, r3, #1
    1e36:	60b9      	str	r1, [r7, #8]
    1e38:	781b      	ldrb	r3, [r3, #0]
    1e3a:	4619      	mov	r1, r3
    1e3c:	68f8      	ldr	r0, [r7, #12]
    1e3e:	4790      	blx	r2
    1e40:	4603      	mov	r3, r0
    1e42:	2b00      	cmp	r3, #0
    1e44:	bf14      	ite	ne
    1e46:	2301      	movne	r3, #1
    1e48:	2300      	moveq	r3, #0
    1e4a:	b2db      	uxtb	r3, r3
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d003      	beq.n	1e58 <_ZN5Print5writeEPKhj+0x50>
    1e50:	697b      	ldr	r3, [r7, #20]
    1e52:	3301      	adds	r3, #1
    1e54:	617b      	str	r3, [r7, #20]
  while (size--) {
    1e56:	e7df      	b.n	1e18 <_ZN5Print5writeEPKhj+0x10>
    else break;
    1e58:	bf00      	nop
  }
  return n;
    1e5a:	697b      	ldr	r3, [r7, #20]
}
    1e5c:	4618      	mov	r0, r3
    1e5e:	3718      	adds	r7, #24
    1e60:	46bd      	mov	sp, r7
    1e62:	bd80      	pop	{r7, pc}

00001e64 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    1e64:	b580      	push	{r7, lr}
    1e66:	b082      	sub	sp, #8
    1e68:	af00      	add	r7, sp, #0
    1e6a:	6078      	str	r0, [r7, #4]
    1e6c:	6039      	str	r1, [r7, #0]
  return write(str);
    1e6e:	6839      	ldr	r1, [r7, #0]
    1e70:	6878      	ldr	r0, [r7, #4]
    1e72:	4b03      	ldr	r3, [pc, #12]	; (1e80 <_ZN5Print5printEPKc+0x1c>)
    1e74:	4798      	blx	r3
    1e76:	4603      	mov	r3, r0
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3708      	adds	r7, #8
    1e7c:	46bd      	mov	sp, r7
    1e7e:	bd80      	pop	{r7, pc}
    1e80:	00001dcd 	.word	0x00001dcd

00001e84 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b084      	sub	sp, #16
    1e88:	af00      	add	r7, sp, #0
    1e8a:	60f8      	str	r0, [r7, #12]
    1e8c:	460b      	mov	r3, r1
    1e8e:	607a      	str	r2, [r7, #4]
    1e90:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    1e92:	7afb      	ldrb	r3, [r7, #11]
    1e94:	687a      	ldr	r2, [r7, #4]
    1e96:	4619      	mov	r1, r3
    1e98:	68f8      	ldr	r0, [r7, #12]
    1e9a:	4b03      	ldr	r3, [pc, #12]	; (1ea8 <_ZN5Print5printEhi+0x24>)
    1e9c:	4798      	blx	r3
    1e9e:	4603      	mov	r3, r0
}
    1ea0:	4618      	mov	r0, r3
    1ea2:	3710      	adds	r7, #16
    1ea4:	46bd      	mov	sp, r7
    1ea6:	bd80      	pop	{r7, pc}
    1ea8:	00001ead 	.word	0x00001ead

00001eac <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b084      	sub	sp, #16
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	60f8      	str	r0, [r7, #12]
    1eb4:	60b9      	str	r1, [r7, #8]
    1eb6:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d109      	bne.n	1ed2 <_ZN5Print5printEmi+0x26>
    1ebe:	68fb      	ldr	r3, [r7, #12]
    1ec0:	681b      	ldr	r3, [r3, #0]
    1ec2:	681b      	ldr	r3, [r3, #0]
    1ec4:	68ba      	ldr	r2, [r7, #8]
    1ec6:	b2d2      	uxtb	r2, r2
    1ec8:	4611      	mov	r1, r2
    1eca:	68f8      	ldr	r0, [r7, #12]
    1ecc:	4798      	blx	r3
    1ece:	4603      	mov	r3, r0
    1ed0:	e007      	b.n	1ee2 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	b2db      	uxtb	r3, r3
    1ed6:	461a      	mov	r2, r3
    1ed8:	68b9      	ldr	r1, [r7, #8]
    1eda:	68f8      	ldr	r0, [r7, #12]
    1edc:	4b03      	ldr	r3, [pc, #12]	; (1eec <_ZN5Print5printEmi+0x40>)
    1ede:	4798      	blx	r3
    1ee0:	4603      	mov	r3, r0
}
    1ee2:	4618      	mov	r0, r3
    1ee4:	3710      	adds	r7, #16
    1ee6:	46bd      	mov	sp, r7
    1ee8:	bd80      	pop	{r7, pc}
    1eea:	bf00      	nop
    1eec:	00001ef1 	.word	0x00001ef1

00001ef0 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b08e      	sub	sp, #56	; 0x38
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	60f8      	str	r0, [r7, #12]
    1ef8:	60b9      	str	r1, [r7, #8]
    1efa:	4613      	mov	r3, r2
    1efc:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    1efe:	f107 0310 	add.w	r3, r7, #16
    1f02:	3320      	adds	r3, #32
    1f04:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    1f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f08:	2200      	movs	r2, #0
    1f0a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1f0c:	79fb      	ldrb	r3, [r7, #7]
    1f0e:	2b01      	cmp	r3, #1
    1f10:	dc01      	bgt.n	1f16 <_ZN5Print11printNumberEmh+0x26>
    1f12:	230a      	movs	r3, #10
    1f14:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    1f16:	79fa      	ldrb	r2, [r7, #7]
    1f18:	68bb      	ldr	r3, [r7, #8]
    1f1a:	fbb3 f1f2 	udiv	r1, r3, r2
    1f1e:	fb02 f201 	mul.w	r2, r2, r1
    1f22:	1a9b      	subs	r3, r3, r2
    1f24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    1f28:	79fb      	ldrb	r3, [r7, #7]
    1f2a:	68ba      	ldr	r2, [r7, #8]
    1f2c:	fbb2 f3f3 	udiv	r3, r2, r3
    1f30:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f34:	3b01      	subs	r3, #1
    1f36:	637b      	str	r3, [r7, #52]	; 0x34
    1f38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1f3c:	2b09      	cmp	r3, #9
    1f3e:	dc04      	bgt.n	1f4a <_ZN5Print11printNumberEmh+0x5a>
    1f40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1f44:	3330      	adds	r3, #48	; 0x30
    1f46:	b2db      	uxtb	r3, r3
    1f48:	e003      	b.n	1f52 <_ZN5Print11printNumberEmh+0x62>
    1f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1f4e:	3337      	adds	r3, #55	; 0x37
    1f50:	b2db      	uxtb	r3, r3
    1f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1f54:	7013      	strb	r3, [r2, #0]
  } while(n);
    1f56:	68bb      	ldr	r3, [r7, #8]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d000      	beq.n	1f5e <_ZN5Print11printNumberEmh+0x6e>
  do {
    1f5c:	e7db      	b.n	1f16 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    1f5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1f60:	68f8      	ldr	r0, [r7, #12]
    1f62:	4b03      	ldr	r3, [pc, #12]	; (1f70 <_ZN5Print11printNumberEmh+0x80>)
    1f64:	4798      	blx	r3
    1f66:	4603      	mov	r3, r0
}
    1f68:	4618      	mov	r0, r3
    1f6a:	3738      	adds	r7, #56	; 0x38
    1f6c:	46bd      	mov	sp, r7
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	00001dcd 	.word	0x00001dcd

00001f74 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1f74:	b580      	push	{r7, lr}
    1f76:	af00      	add	r7, sp, #0
	system_init();
    1f78:	4b03      	ldr	r3, [pc, #12]	; (1f88 <atmel_start_init+0x14>)
    1f7a:	4798      	blx	r3
	usb_init();
    1f7c:	4b03      	ldr	r3, [pc, #12]	; (1f8c <atmel_start_init+0x18>)
    1f7e:	4798      	blx	r3
	spi_nor_flash_init();
    1f80:	4b03      	ldr	r3, [pc, #12]	; (1f90 <atmel_start_init+0x1c>)
    1f82:	4798      	blx	r3
}
    1f84:	bf00      	nop
    1f86:	bd80      	pop	{r7, pc}
    1f88:	00003071 	.word	0x00003071
    1f8c:	0000e6bd 	.word	0x0000e6bd
    1f90:	0000d07d 	.word	0x0000d07d

00001f94 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    1f94:	b480      	push	{r7}
    1f96:	b085      	sub	sp, #20
    1f98:	af00      	add	r7, sp, #0
    1f9a:	60f8      	str	r0, [r7, #12]
    1f9c:	460b      	mov	r3, r1
    1f9e:	607a      	str	r2, [r7, #4]
    1fa0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1fa2:	7afa      	ldrb	r2, [r7, #11]
    1fa4:	68fb      	ldr	r3, [r7, #12]
    1fa6:	3220      	adds	r2, #32
    1fa8:	6879      	ldr	r1, [r7, #4]
    1faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    1fae:	bf00      	nop
    1fb0:	3714      	adds	r7, #20
    1fb2:	46bd      	mov	sp, r7
    1fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fb8:	4770      	bx	lr

00001fba <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    1fba:	b480      	push	{r7}
    1fbc:	b083      	sub	sp, #12
    1fbe:	af00      	add	r7, sp, #0
    1fc0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	691b      	ldr	r3, [r3, #16]
    1fc6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1fca:	687b      	ldr	r3, [r7, #4]
    1fcc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1fce:	bf00      	nop
    1fd0:	370c      	adds	r7, #12
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr

00001fda <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    1fda:	b480      	push	{r7}
    1fdc:	b083      	sub	sp, #12
    1fde:	af00      	add	r7, sp, #0
    1fe0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	691b      	ldr	r3, [r3, #16]
    1fe6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1fea:	687b      	ldr	r3, [r7, #4]
    1fec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1fee:	bf00      	nop
    1ff0:	370c      	adds	r7, #12
    1ff2:	46bd      	mov	sp, r7
    1ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ff8:	4770      	bx	lr

00001ffa <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    1ffa:	b480      	push	{r7}
    1ffc:	b083      	sub	sp, #12
    1ffe:	af00      	add	r7, sp, #0
    2000:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    2002:	687b      	ldr	r3, [r7, #4]
    2004:	691b      	ldr	r3, [r3, #16]
    2006:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    200a:	687b      	ldr	r3, [r7, #4]
    200c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    200e:	bf00      	nop
    2010:	370c      	adds	r7, #12
    2012:	46bd      	mov	sp, r7
    2014:	f85d 7b04 	ldr.w	r7, [sp], #4
    2018:	4770      	bx	lr

0000201a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    201a:	b480      	push	{r7}
    201c:	b083      	sub	sp, #12
    201e:	af00      	add	r7, sp, #0
    2020:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	691b      	ldr	r3, [r3, #16]
    2026:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    202a:	687b      	ldr	r3, [r7, #4]
    202c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    202e:	bf00      	nop
    2030:	370c      	adds	r7, #12
    2032:	46bd      	mov	sp, r7
    2034:	f85d 7b04 	ldr.w	r7, [sp], #4
    2038:	4770      	bx	lr

0000203a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    203a:	b480      	push	{r7}
    203c:	b083      	sub	sp, #12
    203e:	af00      	add	r7, sp, #0
    2040:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2042:	687b      	ldr	r3, [r7, #4]
    2044:	695b      	ldr	r3, [r3, #20]
    2046:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    204e:	bf00      	nop
    2050:	370c      	adds	r7, #12
    2052:	46bd      	mov	sp, r7
    2054:	f85d 7b04 	ldr.w	r7, [sp], #4
    2058:	4770      	bx	lr

0000205a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    205a:	b480      	push	{r7}
    205c:	b083      	sub	sp, #12
    205e:	af00      	add	r7, sp, #0
    2060:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2062:	687b      	ldr	r3, [r7, #4]
    2064:	695b      	ldr	r3, [r3, #20]
    2066:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    206e:	bf00      	nop
    2070:	370c      	adds	r7, #12
    2072:	46bd      	mov	sp, r7
    2074:	f85d 7b04 	ldr.w	r7, [sp], #4
    2078:	4770      	bx	lr

0000207a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    207a:	b480      	push	{r7}
    207c:	b083      	sub	sp, #12
    207e:	af00      	add	r7, sp, #0
    2080:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	695b      	ldr	r3, [r3, #20]
    2086:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    208a:	687b      	ldr	r3, [r7, #4]
    208c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    208e:	bf00      	nop
    2090:	370c      	adds	r7, #12
    2092:	46bd      	mov	sp, r7
    2094:	f85d 7b04 	ldr.w	r7, [sp], #4
    2098:	4770      	bx	lr

0000209a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    209a:	b480      	push	{r7}
    209c:	b083      	sub	sp, #12
    209e:	af00      	add	r7, sp, #0
    20a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    20a2:	687b      	ldr	r3, [r7, #4]
    20a4:	695b      	ldr	r3, [r3, #20]
    20a6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    20ae:	bf00      	nop
    20b0:	370c      	adds	r7, #12
    20b2:	46bd      	mov	sp, r7
    20b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    20b8:	4770      	bx	lr

000020ba <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    20ba:	b480      	push	{r7}
    20bc:	b083      	sub	sp, #12
    20be:	af00      	add	r7, sp, #0
    20c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    20c2:	687b      	ldr	r3, [r7, #4]
    20c4:	695b      	ldr	r3, [r3, #20]
    20c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    20ce:	bf00      	nop
    20d0:	370c      	adds	r7, #12
    20d2:	46bd      	mov	sp, r7
    20d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    20d8:	4770      	bx	lr

000020da <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    20da:	b480      	push	{r7}
    20dc:	b083      	sub	sp, #12
    20de:	af00      	add	r7, sp, #0
    20e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	699b      	ldr	r3, [r3, #24]
    20e6:	f043 0201 	orr.w	r2, r3, #1
    20ea:	687b      	ldr	r3, [r7, #4]
    20ec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    20ee:	bf00      	nop
    20f0:	370c      	adds	r7, #12
    20f2:	46bd      	mov	sp, r7
    20f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    20f8:	4770      	bx	lr

000020fa <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    20fa:	b480      	push	{r7}
    20fc:	b083      	sub	sp, #12
    20fe:	af00      	add	r7, sp, #0
    2100:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	699b      	ldr	r3, [r3, #24]
    2106:	f043 0202 	orr.w	r2, r3, #2
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    210e:	bf00      	nop
    2110:	370c      	adds	r7, #12
    2112:	46bd      	mov	sp, r7
    2114:	f85d 7b04 	ldr.w	r7, [sp], #4
    2118:	4770      	bx	lr

0000211a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    211a:	b480      	push	{r7}
    211c:	b083      	sub	sp, #12
    211e:	af00      	add	r7, sp, #0
    2120:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	699b      	ldr	r3, [r3, #24]
    2126:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    212e:	bf00      	nop
    2130:	370c      	adds	r7, #12
    2132:	46bd      	mov	sp, r7
    2134:	f85d 7b04 	ldr.w	r7, [sp], #4
    2138:	4770      	bx	lr

0000213a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    213a:	b480      	push	{r7}
    213c:	b083      	sub	sp, #12
    213e:	af00      	add	r7, sp, #0
    2140:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	699b      	ldr	r3, [r3, #24]
    2146:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    214e:	bf00      	nop
    2150:	370c      	adds	r7, #12
    2152:	46bd      	mov	sp, r7
    2154:	f85d 7b04 	ldr.w	r7, [sp], #4
    2158:	4770      	bx	lr

0000215a <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    215a:	b480      	push	{r7}
    215c:	b083      	sub	sp, #12
    215e:	af00      	add	r7, sp, #0
    2160:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	699b      	ldr	r3, [r3, #24]
    2166:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    216e:	bf00      	nop
    2170:	370c      	adds	r7, #12
    2172:	46bd      	mov	sp, r7
    2174:	f85d 7b04 	ldr.w	r7, [sp], #4
    2178:	4770      	bx	lr

0000217a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    217a:	b480      	push	{r7}
    217c:	b083      	sub	sp, #12
    217e:	af00      	add	r7, sp, #0
    2180:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	69db      	ldr	r3, [r3, #28]
    2186:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    218e:	bf00      	nop
    2190:	370c      	adds	r7, #12
    2192:	46bd      	mov	sp, r7
    2194:	f85d 7b04 	ldr.w	r7, [sp], #4
    2198:	4770      	bx	lr

0000219a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    219a:	b480      	push	{r7}
    219c:	b083      	sub	sp, #12
    219e:	af00      	add	r7, sp, #0
    21a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	6a1b      	ldr	r3, [r3, #32]
    21a6:	f043 0201 	orr.w	r2, r3, #1
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    21ae:	bf00      	nop
    21b0:	370c      	adds	r7, #12
    21b2:	46bd      	mov	sp, r7
    21b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b8:	4770      	bx	lr

000021ba <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    21ba:	b480      	push	{r7}
    21bc:	b083      	sub	sp, #12
    21be:	af00      	add	r7, sp, #0
    21c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	6a1b      	ldr	r3, [r3, #32]
    21c6:	f043 0202 	orr.w	r2, r3, #2
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    21ce:	bf00      	nop
    21d0:	370c      	adds	r7, #12
    21d2:	46bd      	mov	sp, r7
    21d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    21d8:	4770      	bx	lr

000021da <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    21da:	b480      	push	{r7}
    21dc:	b083      	sub	sp, #12
    21de:	af00      	add	r7, sp, #0
    21e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	6a1b      	ldr	r3, [r3, #32]
    21e6:	f043 0204 	orr.w	r2, r3, #4
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    21ee:	bf00      	nop
    21f0:	370c      	adds	r7, #12
    21f2:	46bd      	mov	sp, r7
    21f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    21f8:	4770      	bx	lr

000021fa <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    21fa:	b480      	push	{r7}
    21fc:	b083      	sub	sp, #12
    21fe:	af00      	add	r7, sp, #0
    2200:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	6a1b      	ldr	r3, [r3, #32]
    2206:	f043 0208 	orr.w	r2, r3, #8
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    220e:	bf00      	nop
    2210:	370c      	adds	r7, #12
    2212:	46bd      	mov	sp, r7
    2214:	f85d 7b04 	ldr.w	r7, [sp], #4
    2218:	4770      	bx	lr

0000221a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    221a:	b480      	push	{r7}
    221c:	b083      	sub	sp, #12
    221e:	af00      	add	r7, sp, #0
    2220:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	6a1b      	ldr	r3, [r3, #32]
    2226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    222e:	bf00      	nop
    2230:	370c      	adds	r7, #12
    2232:	46bd      	mov	sp, r7
    2234:	f85d 7b04 	ldr.w	r7, [sp], #4
    2238:	4770      	bx	lr

0000223a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    223a:	b480      	push	{r7}
    223c:	b085      	sub	sp, #20
    223e:	af00      	add	r7, sp, #0
    2240:	60f8      	str	r0, [r7, #12]
    2242:	460b      	mov	r3, r1
    2244:	607a      	str	r2, [r7, #4]
    2246:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2248:	7afb      	ldrb	r3, [r7, #11]
    224a:	68fa      	ldr	r2, [r7, #12]
    224c:	01db      	lsls	r3, r3, #7
    224e:	4413      	add	r3, r2
    2250:	3308      	adds	r3, #8
    2252:	687a      	ldr	r2, [r7, #4]
    2254:	601a      	str	r2, [r3, #0]
}
    2256:	bf00      	nop
    2258:	3714      	adds	r7, #20
    225a:	46bd      	mov	sp, r7
    225c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2260:	4770      	bx	lr

00002262 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2262:	b480      	push	{r7}
    2264:	b085      	sub	sp, #20
    2266:	af00      	add	r7, sp, #0
    2268:	60f8      	str	r0, [r7, #12]
    226a:	460b      	mov	r3, r1
    226c:	607a      	str	r2, [r7, #4]
    226e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2270:	7afb      	ldrb	r3, [r7, #11]
    2272:	68fa      	ldr	r2, [r7, #12]
    2274:	01db      	lsls	r3, r3, #7
    2276:	4413      	add	r3, r2
    2278:	3304      	adds	r3, #4
    227a:	687a      	ldr	r2, [r7, #4]
    227c:	601a      	str	r2, [r3, #0]
}
    227e:	bf00      	nop
    2280:	3714      	adds	r7, #20
    2282:	46bd      	mov	sp, r7
    2284:	f85d 7b04 	ldr.w	r7, [sp], #4
    2288:	4770      	bx	lr

0000228a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    228a:	b480      	push	{r7}
    228c:	b085      	sub	sp, #20
    228e:	af00      	add	r7, sp, #0
    2290:	60f8      	str	r0, [r7, #12]
    2292:	460b      	mov	r3, r1
    2294:	607a      	str	r2, [r7, #4]
    2296:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2298:	7afb      	ldrb	r3, [r7, #11]
    229a:	68fa      	ldr	r2, [r7, #12]
    229c:	01db      	lsls	r3, r3, #7
    229e:	4413      	add	r3, r2
    22a0:	3318      	adds	r3, #24
    22a2:	687a      	ldr	r2, [r7, #4]
    22a4:	601a      	str	r2, [r3, #0]
}
    22a6:	bf00      	nop
    22a8:	3714      	adds	r7, #20
    22aa:	46bd      	mov	sp, r7
    22ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    22b0:	4770      	bx	lr

000022b2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    22b2:	b480      	push	{r7}
    22b4:	b085      	sub	sp, #20
    22b6:	af00      	add	r7, sp, #0
    22b8:	60f8      	str	r0, [r7, #12]
    22ba:	460b      	mov	r3, r1
    22bc:	607a      	str	r2, [r7, #4]
    22be:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22c0:	7afb      	ldrb	r3, [r7, #11]
    22c2:	68fa      	ldr	r2, [r7, #12]
    22c4:	01db      	lsls	r3, r3, #7
    22c6:	4413      	add	r3, r2
    22c8:	3314      	adds	r3, #20
    22ca:	687a      	ldr	r2, [r7, #4]
    22cc:	601a      	str	r2, [r3, #0]
}
    22ce:	bf00      	nop
    22d0:	3714      	adds	r7, #20
    22d2:	46bd      	mov	sp, r7
    22d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    22d8:	4770      	bx	lr

000022da <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    22da:	b480      	push	{r7}
    22dc:	b085      	sub	sp, #20
    22de:	af00      	add	r7, sp, #0
    22e0:	6078      	str	r0, [r7, #4]
    22e2:	4608      	mov	r0, r1
    22e4:	4611      	mov	r1, r2
    22e6:	461a      	mov	r2, r3
    22e8:	4603      	mov	r3, r0
    22ea:	70fb      	strb	r3, [r7, #3]
    22ec:	460b      	mov	r3, r1
    22ee:	70bb      	strb	r3, [r7, #2]
    22f0:	4613      	mov	r3, r2
    22f2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22f4:	78fa      	ldrb	r2, [r7, #3]
    22f6:	78bb      	ldrb	r3, [r7, #2]
    22f8:	6879      	ldr	r1, [r7, #4]
    22fa:	01d2      	lsls	r2, r2, #7
    22fc:	440a      	add	r2, r1
    22fe:	4413      	add	r3, r2
    2300:	3330      	adds	r3, #48	; 0x30
    2302:	781b      	ldrb	r3, [r3, #0]
    2304:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2306:	7bfb      	ldrb	r3, [r7, #15]
    2308:	f023 030f 	bic.w	r3, r3, #15
    230c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    230e:	787b      	ldrb	r3, [r7, #1]
    2310:	f003 030f 	and.w	r3, r3, #15
    2314:	b2da      	uxtb	r2, r3
    2316:	7bfb      	ldrb	r3, [r7, #15]
    2318:	4313      	orrs	r3, r2
    231a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    231c:	78fa      	ldrb	r2, [r7, #3]
    231e:	78bb      	ldrb	r3, [r7, #2]
    2320:	6879      	ldr	r1, [r7, #4]
    2322:	01d2      	lsls	r2, r2, #7
    2324:	440a      	add	r2, r1
    2326:	4413      	add	r3, r2
    2328:	3330      	adds	r3, #48	; 0x30
    232a:	7bfa      	ldrb	r2, [r7, #15]
    232c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    232e:	bf00      	nop
    2330:	3714      	adds	r7, #20
    2332:	46bd      	mov	sp, r7
    2334:	f85d 7b04 	ldr.w	r7, [sp], #4
    2338:	4770      	bx	lr

0000233a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    233a:	b480      	push	{r7}
    233c:	b085      	sub	sp, #20
    233e:	af00      	add	r7, sp, #0
    2340:	6078      	str	r0, [r7, #4]
    2342:	4608      	mov	r0, r1
    2344:	4611      	mov	r1, r2
    2346:	461a      	mov	r2, r3
    2348:	4603      	mov	r3, r0
    234a:	70fb      	strb	r3, [r7, #3]
    234c:	460b      	mov	r3, r1
    234e:	70bb      	strb	r3, [r7, #2]
    2350:	4613      	mov	r3, r2
    2352:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2354:	78fa      	ldrb	r2, [r7, #3]
    2356:	78bb      	ldrb	r3, [r7, #2]
    2358:	6879      	ldr	r1, [r7, #4]
    235a:	01d2      	lsls	r2, r2, #7
    235c:	440a      	add	r2, r1
    235e:	4413      	add	r3, r2
    2360:	3330      	adds	r3, #48	; 0x30
    2362:	781b      	ldrb	r3, [r3, #0]
    2364:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2366:	7bfb      	ldrb	r3, [r7, #15]
    2368:	f003 030f 	and.w	r3, r3, #15
    236c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    236e:	787b      	ldrb	r3, [r7, #1]
    2370:	011b      	lsls	r3, r3, #4
    2372:	b2da      	uxtb	r2, r3
    2374:	7bfb      	ldrb	r3, [r7, #15]
    2376:	4313      	orrs	r3, r2
    2378:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    237a:	78fa      	ldrb	r2, [r7, #3]
    237c:	78bb      	ldrb	r3, [r7, #2]
    237e:	6879      	ldr	r1, [r7, #4]
    2380:	01d2      	lsls	r2, r2, #7
    2382:	440a      	add	r2, r1
    2384:	4413      	add	r3, r2
    2386:	3330      	adds	r3, #48	; 0x30
    2388:	7bfa      	ldrb	r2, [r7, #15]
    238a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    238c:	bf00      	nop
    238e:	3714      	adds	r7, #20
    2390:	46bd      	mov	sp, r7
    2392:	f85d 7b04 	ldr.w	r7, [sp], #4
    2396:	4770      	bx	lr

00002398 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    2398:	b480      	push	{r7}
    239a:	b085      	sub	sp, #20
    239c:	af00      	add	r7, sp, #0
    239e:	6078      	str	r0, [r7, #4]
    23a0:	4608      	mov	r0, r1
    23a2:	4611      	mov	r1, r2
    23a4:	461a      	mov	r2, r3
    23a6:	4603      	mov	r3, r0
    23a8:	70fb      	strb	r3, [r7, #3]
    23aa:	460b      	mov	r3, r1
    23ac:	70bb      	strb	r3, [r7, #2]
    23ae:	4613      	mov	r3, r2
    23b0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23b2:	78fa      	ldrb	r2, [r7, #3]
    23b4:	78bb      	ldrb	r3, [r7, #2]
    23b6:	6879      	ldr	r1, [r7, #4]
    23b8:	01d2      	lsls	r2, r2, #7
    23ba:	440a      	add	r2, r1
    23bc:	4413      	add	r3, r2
    23be:	3340      	adds	r3, #64	; 0x40
    23c0:	781b      	ldrb	r3, [r3, #0]
    23c2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    23c4:	7bfb      	ldrb	r3, [r7, #15]
    23c6:	f023 0301 	bic.w	r3, r3, #1
    23ca:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    23cc:	787a      	ldrb	r2, [r7, #1]
    23ce:	7bfb      	ldrb	r3, [r7, #15]
    23d0:	4313      	orrs	r3, r2
    23d2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    23d4:	78fa      	ldrb	r2, [r7, #3]
    23d6:	78bb      	ldrb	r3, [r7, #2]
    23d8:	6879      	ldr	r1, [r7, #4]
    23da:	01d2      	lsls	r2, r2, #7
    23dc:	440a      	add	r2, r1
    23de:	4413      	add	r3, r2
    23e0:	3340      	adds	r3, #64	; 0x40
    23e2:	7bfa      	ldrb	r2, [r7, #15]
    23e4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    23e6:	bf00      	nop
    23e8:	3714      	adds	r7, #20
    23ea:	46bd      	mov	sp, r7
    23ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    23f0:	4770      	bx	lr

000023f2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    23f2:	b490      	push	{r4, r7}
    23f4:	b082      	sub	sp, #8
    23f6:	af00      	add	r7, sp, #0
    23f8:	6078      	str	r0, [r7, #4]
    23fa:	460b      	mov	r3, r1
    23fc:	70fb      	strb	r3, [r7, #3]
    23fe:	4613      	mov	r3, r2
    2400:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2402:	78fa      	ldrb	r2, [r7, #3]
    2404:	78bb      	ldrb	r3, [r7, #2]
    2406:	78f8      	ldrb	r0, [r7, #3]
    2408:	78b9      	ldrb	r1, [r7, #2]
    240a:	687c      	ldr	r4, [r7, #4]
    240c:	01c0      	lsls	r0, r0, #7
    240e:	4420      	add	r0, r4
    2410:	4401      	add	r1, r0
    2412:	3140      	adds	r1, #64	; 0x40
    2414:	7809      	ldrb	r1, [r1, #0]
    2416:	b2c9      	uxtb	r1, r1
    2418:	f041 0104 	orr.w	r1, r1, #4
    241c:	b2c8      	uxtb	r0, r1
    241e:	6879      	ldr	r1, [r7, #4]
    2420:	01d2      	lsls	r2, r2, #7
    2422:	440a      	add	r2, r1
    2424:	4413      	add	r3, r2
    2426:	3340      	adds	r3, #64	; 0x40
    2428:	4602      	mov	r2, r0
    242a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    242c:	bf00      	nop
    242e:	3708      	adds	r7, #8
    2430:	46bd      	mov	sp, r7
    2432:	bc90      	pop	{r4, r7}
    2434:	4770      	bx	lr

00002436 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2436:	b490      	push	{r4, r7}
    2438:	b082      	sub	sp, #8
    243a:	af00      	add	r7, sp, #0
    243c:	6078      	str	r0, [r7, #4]
    243e:	460b      	mov	r3, r1
    2440:	70fb      	strb	r3, [r7, #3]
    2442:	4613      	mov	r3, r2
    2444:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2446:	78fa      	ldrb	r2, [r7, #3]
    2448:	78bb      	ldrb	r3, [r7, #2]
    244a:	78f8      	ldrb	r0, [r7, #3]
    244c:	78b9      	ldrb	r1, [r7, #2]
    244e:	687c      	ldr	r4, [r7, #4]
    2450:	01c0      	lsls	r0, r0, #7
    2452:	4420      	add	r0, r4
    2454:	4401      	add	r1, r0
    2456:	3140      	adds	r1, #64	; 0x40
    2458:	7809      	ldrb	r1, [r1, #0]
    245a:	b2c9      	uxtb	r1, r1
    245c:	f021 0104 	bic.w	r1, r1, #4
    2460:	b2c8      	uxtb	r0, r1
    2462:	6879      	ldr	r1, [r7, #4]
    2464:	01d2      	lsls	r2, r2, #7
    2466:	440a      	add	r2, r1
    2468:	4413      	add	r3, r2
    246a:	3340      	adds	r3, #64	; 0x40
    246c:	4602      	mov	r2, r0
    246e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2470:	bf00      	nop
    2472:	3708      	adds	r7, #8
    2474:	46bd      	mov	sp, r7
    2476:	bc90      	pop	{r4, r7}
    2478:	4770      	bx	lr

0000247a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    247a:	b480      	push	{r7}
    247c:	b085      	sub	sp, #20
    247e:	af00      	add	r7, sp, #0
    2480:	60f8      	str	r0, [r7, #12]
    2482:	460b      	mov	r3, r1
    2484:	607a      	str	r2, [r7, #4]
    2486:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2488:	7afb      	ldrb	r3, [r7, #11]
    248a:	68fa      	ldr	r2, [r7, #12]
    248c:	01db      	lsls	r3, r3, #7
    248e:	4413      	add	r3, r2
    2490:	3328      	adds	r3, #40	; 0x28
    2492:	687a      	ldr	r2, [r7, #4]
    2494:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2496:	bf00      	nop
    2498:	3714      	adds	r7, #20
    249a:	46bd      	mov	sp, r7
    249c:	f85d 7b04 	ldr.w	r7, [sp], #4
    24a0:	4770      	bx	lr
	...

000024a4 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    24a4:	b580      	push	{r7, lr}
    24a6:	b082      	sub	sp, #8
    24a8:	af00      	add	r7, sp, #0
    24aa:	4603      	mov	r3, r0
    24ac:	6039      	str	r1, [r7, #0]
    24ae:	71fb      	strb	r3, [r7, #7]
    24b0:	4613      	mov	r3, r2
    24b2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    24b4:	79bb      	ldrb	r3, [r7, #6]
    24b6:	2b01      	cmp	r3, #1
    24b8:	d01c      	beq.n	24f4 <_gpio_set_direction+0x50>
    24ba:	2b02      	cmp	r3, #2
    24bc:	d037      	beq.n	252e <_gpio_set_direction+0x8a>
    24be:	2b00      	cmp	r3, #0
    24c0:	d14e      	bne.n	2560 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    24c2:	79fb      	ldrb	r3, [r7, #7]
    24c4:	683a      	ldr	r2, [r7, #0]
    24c6:	4619      	mov	r1, r3
    24c8:	482a      	ldr	r0, [pc, #168]	; (2574 <_gpio_set_direction+0xd0>)
    24ca:	4b2b      	ldr	r3, [pc, #172]	; (2578 <_gpio_set_direction+0xd4>)
    24cc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    24ce:	683b      	ldr	r3, [r7, #0]
    24d0:	b29b      	uxth	r3, r3
    24d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    24d6:	79fb      	ldrb	r3, [r7, #7]
    24d8:	4619      	mov	r1, r3
    24da:	4826      	ldr	r0, [pc, #152]	; (2574 <_gpio_set_direction+0xd0>)
    24dc:	4b27      	ldr	r3, [pc, #156]	; (257c <_gpio_set_direction+0xd8>)
    24de:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    24e0:	683b      	ldr	r3, [r7, #0]
    24e2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    24e4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    24e8:	79fb      	ldrb	r3, [r7, #7]
    24ea:	4619      	mov	r1, r3
    24ec:	4821      	ldr	r0, [pc, #132]	; (2574 <_gpio_set_direction+0xd0>)
    24ee:	4b23      	ldr	r3, [pc, #140]	; (257c <_gpio_set_direction+0xd8>)
    24f0:	4798      	blx	r3
		break;
    24f2:	e03a      	b.n	256a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    24f4:	79fb      	ldrb	r3, [r7, #7]
    24f6:	683a      	ldr	r2, [r7, #0]
    24f8:	4619      	mov	r1, r3
    24fa:	481e      	ldr	r0, [pc, #120]	; (2574 <_gpio_set_direction+0xd0>)
    24fc:	4b1e      	ldr	r3, [pc, #120]	; (2578 <_gpio_set_direction+0xd4>)
    24fe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    2500:	683b      	ldr	r3, [r7, #0]
    2502:	b29b      	uxth	r3, r3
    2504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    2508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    250c:	79f9      	ldrb	r1, [r7, #7]
    250e:	461a      	mov	r2, r3
    2510:	4818      	ldr	r0, [pc, #96]	; (2574 <_gpio_set_direction+0xd0>)
    2512:	4b1a      	ldr	r3, [pc, #104]	; (257c <_gpio_set_direction+0xd8>)
    2514:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    2516:	683b      	ldr	r3, [r7, #0]
    2518:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    251a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    251e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2522:	79f9      	ldrb	r1, [r7, #7]
    2524:	461a      	mov	r2, r3
    2526:	4813      	ldr	r0, [pc, #76]	; (2574 <_gpio_set_direction+0xd0>)
    2528:	4b14      	ldr	r3, [pc, #80]	; (257c <_gpio_set_direction+0xd8>)
    252a:	4798      	blx	r3
		break;
    252c:	e01d      	b.n	256a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    252e:	79fb      	ldrb	r3, [r7, #7]
    2530:	683a      	ldr	r2, [r7, #0]
    2532:	4619      	mov	r1, r3
    2534:	480f      	ldr	r0, [pc, #60]	; (2574 <_gpio_set_direction+0xd0>)
    2536:	4b12      	ldr	r3, [pc, #72]	; (2580 <_gpio_set_direction+0xdc>)
    2538:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    253a:	683b      	ldr	r3, [r7, #0]
    253c:	b29b      	uxth	r3, r3
    253e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2542:	79fb      	ldrb	r3, [r7, #7]
    2544:	4619      	mov	r1, r3
    2546:	480b      	ldr	r0, [pc, #44]	; (2574 <_gpio_set_direction+0xd0>)
    2548:	4b0c      	ldr	r3, [pc, #48]	; (257c <_gpio_set_direction+0xd8>)
    254a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    254c:	683b      	ldr	r3, [r7, #0]
    254e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2550:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2554:	79fb      	ldrb	r3, [r7, #7]
    2556:	4619      	mov	r1, r3
    2558:	4806      	ldr	r0, [pc, #24]	; (2574 <_gpio_set_direction+0xd0>)
    255a:	4b08      	ldr	r3, [pc, #32]	; (257c <_gpio_set_direction+0xd8>)
    255c:	4798      	blx	r3
		break;
    255e:	e004      	b.n	256a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    2560:	2246      	movs	r2, #70	; 0x46
    2562:	4908      	ldr	r1, [pc, #32]	; (2584 <_gpio_set_direction+0xe0>)
    2564:	2000      	movs	r0, #0
    2566:	4b08      	ldr	r3, [pc, #32]	; (2588 <_gpio_set_direction+0xe4>)
    2568:	4798      	blx	r3
	}
}
    256a:	bf00      	nop
    256c:	3708      	adds	r7, #8
    256e:	46bd      	mov	sp, r7
    2570:	bd80      	pop	{r7, pc}
    2572:	bf00      	nop
    2574:	41008000 	.word	0x41008000
    2578:	00002263 	.word	0x00002263
    257c:	0000247b 	.word	0x0000247b
    2580:	0000223b 	.word	0x0000223b
    2584:	000112c4 	.word	0x000112c4
    2588:	00004f51 	.word	0x00004f51

0000258c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    258c:	b580      	push	{r7, lr}
    258e:	b082      	sub	sp, #8
    2590:	af00      	add	r7, sp, #0
    2592:	4603      	mov	r3, r0
    2594:	6039      	str	r1, [r7, #0]
    2596:	71fb      	strb	r3, [r7, #7]
    2598:	4613      	mov	r3, r2
    259a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    259c:	79bb      	ldrb	r3, [r7, #6]
    259e:	2b00      	cmp	r3, #0
    25a0:	d006      	beq.n	25b0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    25a2:	79fb      	ldrb	r3, [r7, #7]
    25a4:	683a      	ldr	r2, [r7, #0]
    25a6:	4619      	mov	r1, r3
    25a8:	4806      	ldr	r0, [pc, #24]	; (25c4 <_gpio_set_level+0x38>)
    25aa:	4b07      	ldr	r3, [pc, #28]	; (25c8 <_gpio_set_level+0x3c>)
    25ac:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    25ae:	e005      	b.n	25bc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    25b0:	79fb      	ldrb	r3, [r7, #7]
    25b2:	683a      	ldr	r2, [r7, #0]
    25b4:	4619      	mov	r1, r3
    25b6:	4803      	ldr	r0, [pc, #12]	; (25c4 <_gpio_set_level+0x38>)
    25b8:	4b04      	ldr	r3, [pc, #16]	; (25cc <_gpio_set_level+0x40>)
    25ba:	4798      	blx	r3
}
    25bc:	bf00      	nop
    25be:	3708      	adds	r7, #8
    25c0:	46bd      	mov	sp, r7
    25c2:	bd80      	pop	{r7, pc}
    25c4:	41008000 	.word	0x41008000
    25c8:	0000228b 	.word	0x0000228b
    25cc:	000022b3 	.word	0x000022b3

000025d0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    25d0:	b580      	push	{r7, lr}
    25d2:	b082      	sub	sp, #8
    25d4:	af00      	add	r7, sp, #0
    25d6:	4603      	mov	r3, r0
    25d8:	71fb      	strb	r3, [r7, #7]
    25da:	460b      	mov	r3, r1
    25dc:	71bb      	strb	r3, [r7, #6]
    25de:	4613      	mov	r3, r2
    25e0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    25e2:	797b      	ldrb	r3, [r7, #5]
    25e4:	2b01      	cmp	r3, #1
    25e6:	d00a      	beq.n	25fe <_gpio_set_pin_pull_mode+0x2e>
    25e8:	2b02      	cmp	r3, #2
    25ea:	d01f      	beq.n	262c <_gpio_set_pin_pull_mode+0x5c>
    25ec:	2b00      	cmp	r3, #0
    25ee:	d134      	bne.n	265a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    25f0:	79ba      	ldrb	r2, [r7, #6]
    25f2:	79fb      	ldrb	r3, [r7, #7]
    25f4:	4619      	mov	r1, r3
    25f6:	481e      	ldr	r0, [pc, #120]	; (2670 <_gpio_set_pin_pull_mode+0xa0>)
    25f8:	4b1e      	ldr	r3, [pc, #120]	; (2674 <_gpio_set_pin_pull_mode+0xa4>)
    25fa:	4798      	blx	r3
		break;
    25fc:	e033      	b.n	2666 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    25fe:	79bb      	ldrb	r3, [r7, #6]
    2600:	2201      	movs	r2, #1
    2602:	409a      	lsls	r2, r3
    2604:	79fb      	ldrb	r3, [r7, #7]
    2606:	4619      	mov	r1, r3
    2608:	4819      	ldr	r0, [pc, #100]	; (2670 <_gpio_set_pin_pull_mode+0xa0>)
    260a:	4b1b      	ldr	r3, [pc, #108]	; (2678 <_gpio_set_pin_pull_mode+0xa8>)
    260c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    260e:	79ba      	ldrb	r2, [r7, #6]
    2610:	79fb      	ldrb	r3, [r7, #7]
    2612:	4619      	mov	r1, r3
    2614:	4816      	ldr	r0, [pc, #88]	; (2670 <_gpio_set_pin_pull_mode+0xa0>)
    2616:	4b19      	ldr	r3, [pc, #100]	; (267c <_gpio_set_pin_pull_mode+0xac>)
    2618:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    261a:	79bb      	ldrb	r3, [r7, #6]
    261c:	2201      	movs	r2, #1
    261e:	409a      	lsls	r2, r3
    2620:	79fb      	ldrb	r3, [r7, #7]
    2622:	4619      	mov	r1, r3
    2624:	4812      	ldr	r0, [pc, #72]	; (2670 <_gpio_set_pin_pull_mode+0xa0>)
    2626:	4b16      	ldr	r3, [pc, #88]	; (2680 <_gpio_set_pin_pull_mode+0xb0>)
    2628:	4798      	blx	r3
		break;
    262a:	e01c      	b.n	2666 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    262c:	79bb      	ldrb	r3, [r7, #6]
    262e:	2201      	movs	r2, #1
    2630:	409a      	lsls	r2, r3
    2632:	79fb      	ldrb	r3, [r7, #7]
    2634:	4619      	mov	r1, r3
    2636:	480e      	ldr	r0, [pc, #56]	; (2670 <_gpio_set_pin_pull_mode+0xa0>)
    2638:	4b0f      	ldr	r3, [pc, #60]	; (2678 <_gpio_set_pin_pull_mode+0xa8>)
    263a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    263c:	79ba      	ldrb	r2, [r7, #6]
    263e:	79fb      	ldrb	r3, [r7, #7]
    2640:	4619      	mov	r1, r3
    2642:	480b      	ldr	r0, [pc, #44]	; (2670 <_gpio_set_pin_pull_mode+0xa0>)
    2644:	4b0d      	ldr	r3, [pc, #52]	; (267c <_gpio_set_pin_pull_mode+0xac>)
    2646:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    2648:	79bb      	ldrb	r3, [r7, #6]
    264a:	2201      	movs	r2, #1
    264c:	409a      	lsls	r2, r3
    264e:	79fb      	ldrb	r3, [r7, #7]
    2650:	4619      	mov	r1, r3
    2652:	4807      	ldr	r0, [pc, #28]	; (2670 <_gpio_set_pin_pull_mode+0xa0>)
    2654:	4b0b      	ldr	r3, [pc, #44]	; (2684 <_gpio_set_pin_pull_mode+0xb4>)
    2656:	4798      	blx	r3
		break;
    2658:	e005      	b.n	2666 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    265a:	2289      	movs	r2, #137	; 0x89
    265c:	490a      	ldr	r1, [pc, #40]	; (2688 <_gpio_set_pin_pull_mode+0xb8>)
    265e:	2000      	movs	r0, #0
    2660:	4b0a      	ldr	r3, [pc, #40]	; (268c <_gpio_set_pin_pull_mode+0xbc>)
    2662:	4798      	blx	r3
		break;
    2664:	bf00      	nop
	}
}
    2666:	bf00      	nop
    2668:	3708      	adds	r7, #8
    266a:	46bd      	mov	sp, r7
    266c:	bd80      	pop	{r7, pc}
    266e:	bf00      	nop
    2670:	41008000 	.word	0x41008000
    2674:	00002437 	.word	0x00002437
    2678:	00002263 	.word	0x00002263
    267c:	000023f3 	.word	0x000023f3
    2680:	0000228b 	.word	0x0000228b
    2684:	000022b3 	.word	0x000022b3
    2688:	000112c4 	.word	0x000112c4
    268c:	00004f51 	.word	0x00004f51

00002690 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    2690:	b590      	push	{r4, r7, lr}
    2692:	b085      	sub	sp, #20
    2694:	af00      	add	r7, sp, #0
    2696:	6078      	str	r0, [r7, #4]
    2698:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    269a:	687b      	ldr	r3, [r7, #4]
    269c:	095b      	lsrs	r3, r3, #5
    269e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	b2db      	uxtb	r3, r3
    26a4:	f003 031f 	and.w	r3, r3, #31
    26a8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    26aa:	683b      	ldr	r3, [r7, #0]
    26ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    26b0:	d106      	bne.n	26c0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    26b2:	7bba      	ldrb	r2, [r7, #14]
    26b4:	7bf9      	ldrb	r1, [r7, #15]
    26b6:	2300      	movs	r3, #0
    26b8:	4812      	ldr	r0, [pc, #72]	; (2704 <_gpio_set_pin_function+0x74>)
    26ba:	4c13      	ldr	r4, [pc, #76]	; (2708 <_gpio_set_pin_function+0x78>)
    26bc:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    26be:	e01d      	b.n	26fc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    26c0:	7bba      	ldrb	r2, [r7, #14]
    26c2:	7bf9      	ldrb	r1, [r7, #15]
    26c4:	2301      	movs	r3, #1
    26c6:	480f      	ldr	r0, [pc, #60]	; (2704 <_gpio_set_pin_function+0x74>)
    26c8:	4c0f      	ldr	r4, [pc, #60]	; (2708 <_gpio_set_pin_function+0x78>)
    26ca:	47a0      	blx	r4
		if (pin & 1) {
    26cc:	7bbb      	ldrb	r3, [r7, #14]
    26ce:	f003 0301 	and.w	r3, r3, #1
    26d2:	2b00      	cmp	r3, #0
    26d4:	d009      	beq.n	26ea <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    26d6:	7bbb      	ldrb	r3, [r7, #14]
    26d8:	085b      	lsrs	r3, r3, #1
    26da:	b2da      	uxtb	r2, r3
    26dc:	683b      	ldr	r3, [r7, #0]
    26de:	b2db      	uxtb	r3, r3
    26e0:	7bf9      	ldrb	r1, [r7, #15]
    26e2:	4808      	ldr	r0, [pc, #32]	; (2704 <_gpio_set_pin_function+0x74>)
    26e4:	4c09      	ldr	r4, [pc, #36]	; (270c <_gpio_set_pin_function+0x7c>)
    26e6:	47a0      	blx	r4
}
    26e8:	e008      	b.n	26fc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    26ea:	7bbb      	ldrb	r3, [r7, #14]
    26ec:	085b      	lsrs	r3, r3, #1
    26ee:	b2da      	uxtb	r2, r3
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	b2db      	uxtb	r3, r3
    26f4:	7bf9      	ldrb	r1, [r7, #15]
    26f6:	4803      	ldr	r0, [pc, #12]	; (2704 <_gpio_set_pin_function+0x74>)
    26f8:	4c05      	ldr	r4, [pc, #20]	; (2710 <_gpio_set_pin_function+0x80>)
    26fa:	47a0      	blx	r4
}
    26fc:	bf00      	nop
    26fe:	3714      	adds	r7, #20
    2700:	46bd      	mov	sp, r7
    2702:	bd90      	pop	{r4, r7, pc}
    2704:	41008000 	.word	0x41008000
    2708:	00002399 	.word	0x00002399
    270c:	0000233b 	.word	0x0000233b
    2710:	000022db 	.word	0x000022db

00002714 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    2714:	b580      	push	{r7, lr}
    2716:	b082      	sub	sp, #8
    2718:	af00      	add	r7, sp, #0
    271a:	4603      	mov	r3, r0
    271c:	460a      	mov	r2, r1
    271e:	71fb      	strb	r3, [r7, #7]
    2720:	4613      	mov	r3, r2
    2722:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    2724:	79fb      	ldrb	r3, [r7, #7]
    2726:	095b      	lsrs	r3, r3, #5
    2728:	b2d8      	uxtb	r0, r3
    272a:	79fb      	ldrb	r3, [r7, #7]
    272c:	f003 031f 	and.w	r3, r3, #31
    2730:	b2db      	uxtb	r3, r3
    2732:	79ba      	ldrb	r2, [r7, #6]
    2734:	4619      	mov	r1, r3
    2736:	4b03      	ldr	r3, [pc, #12]	; (2744 <gpio_set_pin_pull_mode+0x30>)
    2738:	4798      	blx	r3
}
    273a:	bf00      	nop
    273c:	3708      	adds	r7, #8
    273e:	46bd      	mov	sp, r7
    2740:	bd80      	pop	{r7, pc}
    2742:	bf00      	nop
    2744:	000025d1 	.word	0x000025d1

00002748 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    2748:	b580      	push	{r7, lr}
    274a:	b082      	sub	sp, #8
    274c:	af00      	add	r7, sp, #0
    274e:	6078      	str	r0, [r7, #4]
    2750:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    2752:	6839      	ldr	r1, [r7, #0]
    2754:	6878      	ldr	r0, [r7, #4]
    2756:	4b03      	ldr	r3, [pc, #12]	; (2764 <gpio_set_pin_function+0x1c>)
    2758:	4798      	blx	r3
}
    275a:	bf00      	nop
    275c:	3708      	adds	r7, #8
    275e:	46bd      	mov	sp, r7
    2760:	bd80      	pop	{r7, pc}
    2762:	bf00      	nop
    2764:	00002691 	.word	0x00002691

00002768 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    2768:	b580      	push	{r7, lr}
    276a:	b082      	sub	sp, #8
    276c:	af00      	add	r7, sp, #0
    276e:	4603      	mov	r3, r0
    2770:	460a      	mov	r2, r1
    2772:	71fb      	strb	r3, [r7, #7]
    2774:	4613      	mov	r3, r2
    2776:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    2778:	79fb      	ldrb	r3, [r7, #7]
    277a:	095b      	lsrs	r3, r3, #5
    277c:	b2d8      	uxtb	r0, r3
    277e:	79fb      	ldrb	r3, [r7, #7]
    2780:	f003 031f 	and.w	r3, r3, #31
    2784:	2201      	movs	r2, #1
    2786:	fa02 f303 	lsl.w	r3, r2, r3
    278a:	79ba      	ldrb	r2, [r7, #6]
    278c:	4619      	mov	r1, r3
    278e:	4b03      	ldr	r3, [pc, #12]	; (279c <gpio_set_pin_direction+0x34>)
    2790:	4798      	blx	r3
}
    2792:	bf00      	nop
    2794:	3708      	adds	r7, #8
    2796:	46bd      	mov	sp, r7
    2798:	bd80      	pop	{r7, pc}
    279a:	bf00      	nop
    279c:	000024a5 	.word	0x000024a5

000027a0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    27a0:	b580      	push	{r7, lr}
    27a2:	b082      	sub	sp, #8
    27a4:	af00      	add	r7, sp, #0
    27a6:	4603      	mov	r3, r0
    27a8:	460a      	mov	r2, r1
    27aa:	71fb      	strb	r3, [r7, #7]
    27ac:	4613      	mov	r3, r2
    27ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    27b0:	79fb      	ldrb	r3, [r7, #7]
    27b2:	095b      	lsrs	r3, r3, #5
    27b4:	b2d8      	uxtb	r0, r3
    27b6:	79fb      	ldrb	r3, [r7, #7]
    27b8:	f003 031f 	and.w	r3, r3, #31
    27bc:	2201      	movs	r2, #1
    27be:	fa02 f303 	lsl.w	r3, r2, r3
    27c2:	79ba      	ldrb	r2, [r7, #6]
    27c4:	4619      	mov	r1, r3
    27c6:	4b03      	ldr	r3, [pc, #12]	; (27d4 <gpio_set_pin_level+0x34>)
    27c8:	4798      	blx	r3
}
    27ca:	bf00      	nop
    27cc:	3708      	adds	r7, #8
    27ce:	46bd      	mov	sp, r7
    27d0:	bd80      	pop	{r7, pc}
    27d2:	bf00      	nop
    27d4:	0000258d 	.word	0x0000258d

000027d8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    27d8:	b580      	push	{r7, lr}
    27da:	af00      	add	r7, sp, #0
	_init_chip();
    27dc:	4b01      	ldr	r3, [pc, #4]	; (27e4 <init_mcu+0xc>)
    27de:	4798      	blx	r3
}
    27e0:	bf00      	nop
    27e2:	bd80      	pop	{r7, pc}
    27e4:	00005ae9 	.word	0x00005ae9

000027e8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    27e8:	b580      	push	{r7, lr}
    27ea:	b082      	sub	sp, #8
    27ec:	af00      	add	r7, sp, #0
    27ee:	6078      	str	r0, [r7, #4]
    27f0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	2b00      	cmp	r3, #0
    27f6:	d004      	beq.n	2802 <wdt_init+0x1a>
    27f8:	683b      	ldr	r3, [r7, #0]
    27fa:	2b00      	cmp	r3, #0
    27fc:	d001      	beq.n	2802 <wdt_init+0x1a>
    27fe:	2301      	movs	r3, #1
    2800:	e000      	b.n	2804 <wdt_init+0x1c>
    2802:	2300      	movs	r3, #0
    2804:	f003 0301 	and.w	r3, r3, #1
    2808:	b2db      	uxtb	r3, r3
    280a:	2248      	movs	r2, #72	; 0x48
    280c:	4907      	ldr	r1, [pc, #28]	; (282c <wdt_init+0x44>)
    280e:	4618      	mov	r0, r3
    2810:	4b07      	ldr	r3, [pc, #28]	; (2830 <wdt_init+0x48>)
    2812:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    2814:	687b      	ldr	r3, [r7, #4]
    2816:	683a      	ldr	r2, [r7, #0]
    2818:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	4618      	mov	r0, r3
    281e:	4b05      	ldr	r3, [pc, #20]	; (2834 <wdt_init+0x4c>)
    2820:	4798      	blx	r3
    2822:	4603      	mov	r3, r0
}
    2824:	4618      	mov	r0, r3
    2826:	3708      	adds	r7, #8
    2828:	46bd      	mov	sp, r7
    282a:	bd80      	pop	{r7, pc}
    282c:	000112e0 	.word	0x000112e0
    2830:	00004f51 	.word	0x00004f51
    2834:	0000c279 	.word	0x0000c279

00002838 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    2838:	b580      	push	{r7, lr}
    283a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    283c:	4804      	ldr	r0, [pc, #16]	; (2850 <CRC_CALC_init+0x18>)
    283e:	4b05      	ldr	r3, [pc, #20]	; (2854 <CRC_CALC_init+0x1c>)
    2840:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    2842:	4905      	ldr	r1, [pc, #20]	; (2858 <CRC_CALC_init+0x20>)
    2844:	4805      	ldr	r0, [pc, #20]	; (285c <CRC_CALC_init+0x24>)
    2846:	4b06      	ldr	r3, [pc, #24]	; (2860 <CRC_CALC_init+0x28>)
    2848:	4798      	blx	r3
}
    284a:	bf00      	nop
    284c:	bd80      	pop	{r7, pc}
    284e:	bf00      	nop
    2850:	40000800 	.word	0x40000800
    2854:	000020fb 	.word	0x000020fb
    2858:	41002000 	.word	0x41002000
    285c:	20002314 	.word	0x20002314
    2860:	000035c5 	.word	0x000035c5

00002864 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    2864:	b580      	push	{r7, lr}
    2866:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2868:	2244      	movs	r2, #68	; 0x44
    286a:	2104      	movs	r1, #4
    286c:	481e      	ldr	r0, [pc, #120]	; (28e8 <EXTERNAL_IRQ_0_init+0x84>)
    286e:	4b1f      	ldr	r3, [pc, #124]	; (28ec <EXTERNAL_IRQ_0_init+0x88>)
    2870:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    2872:	481f      	ldr	r0, [pc, #124]	; (28f0 <EXTERNAL_IRQ_0_init+0x8c>)
    2874:	4b1f      	ldr	r3, [pc, #124]	; (28f4 <EXTERNAL_IRQ_0_init+0x90>)
    2876:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    2878:	2101      	movs	r1, #1
    287a:	2004      	movs	r0, #4
    287c:	4b1e      	ldr	r3, [pc, #120]	; (28f8 <EXTERNAL_IRQ_0_init+0x94>)
    287e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    2880:	2102      	movs	r1, #2
    2882:	2004      	movs	r0, #4
    2884:	4b1d      	ldr	r3, [pc, #116]	; (28fc <EXTERNAL_IRQ_0_init+0x98>)
    2886:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    2888:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    288c:	2004      	movs	r0, #4
    288e:	4b1c      	ldr	r3, [pc, #112]	; (2900 <EXTERNAL_IRQ_0_init+0x9c>)
    2890:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    2892:	2101      	movs	r1, #1
    2894:	2005      	movs	r0, #5
    2896:	4b18      	ldr	r3, [pc, #96]	; (28f8 <EXTERNAL_IRQ_0_init+0x94>)
    2898:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    289a:	2102      	movs	r1, #2
    289c:	2005      	movs	r0, #5
    289e:	4b17      	ldr	r3, [pc, #92]	; (28fc <EXTERNAL_IRQ_0_init+0x98>)
    28a0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    28a2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    28a6:	2005      	movs	r0, #5
    28a8:	4b15      	ldr	r3, [pc, #84]	; (2900 <EXTERNAL_IRQ_0_init+0x9c>)
    28aa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    28ac:	2101      	movs	r1, #1
    28ae:	2056      	movs	r0, #86	; 0x56
    28b0:	4b11      	ldr	r3, [pc, #68]	; (28f8 <EXTERNAL_IRQ_0_init+0x94>)
    28b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    28b4:	2102      	movs	r1, #2
    28b6:	2056      	movs	r0, #86	; 0x56
    28b8:	4b10      	ldr	r3, [pc, #64]	; (28fc <EXTERNAL_IRQ_0_init+0x98>)
    28ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    28bc:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    28c0:	2056      	movs	r0, #86	; 0x56
    28c2:	4b0f      	ldr	r3, [pc, #60]	; (2900 <EXTERNAL_IRQ_0_init+0x9c>)
    28c4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    28c6:	2101      	movs	r1, #1
    28c8:	2057      	movs	r0, #87	; 0x57
    28ca:	4b0b      	ldr	r3, [pc, #44]	; (28f8 <EXTERNAL_IRQ_0_init+0x94>)
    28cc:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    28ce:	2102      	movs	r1, #2
    28d0:	2057      	movs	r0, #87	; 0x57
    28d2:	4b0a      	ldr	r3, [pc, #40]	; (28fc <EXTERNAL_IRQ_0_init+0x98>)
    28d4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    28d6:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    28da:	2057      	movs	r0, #87	; 0x57
    28dc:	4b08      	ldr	r3, [pc, #32]	; (2900 <EXTERNAL_IRQ_0_init+0x9c>)
    28de:	4798      	blx	r3

	ext_irq_init();
    28e0:	4b08      	ldr	r3, [pc, #32]	; (2904 <EXTERNAL_IRQ_0_init+0xa0>)
    28e2:	4798      	blx	r3
}
    28e4:	bf00      	nop
    28e6:	bd80      	pop	{r7, pc}
    28e8:	40001c00 	.word	0x40001c00
    28ec:	00001f95 	.word	0x00001f95
    28f0:	40000800 	.word	0x40000800
    28f4:	0000207b 	.word	0x0000207b
    28f8:	00002769 	.word	0x00002769
    28fc:	00002715 	.word	0x00002715
    2900:	00002749 	.word	0x00002749
    2904:	0000368d 	.word	0x0000368d

00002908 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    2908:	b580      	push	{r7, lr}
    290a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    290c:	2244      	movs	r2, #68	; 0x44
    290e:	210b      	movs	r1, #11
    2910:	4804      	ldr	r0, [pc, #16]	; (2924 <EVENT_SYSTEM_0_init+0x1c>)
    2912:	4b05      	ldr	r3, [pc, #20]	; (2928 <EVENT_SYSTEM_0_init+0x20>)
    2914:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    2916:	4805      	ldr	r0, [pc, #20]	; (292c <EVENT_SYSTEM_0_init+0x24>)
    2918:	4b05      	ldr	r3, [pc, #20]	; (2930 <EVENT_SYSTEM_0_init+0x28>)
    291a:	4798      	blx	r3

	event_system_init();
    291c:	4b05      	ldr	r3, [pc, #20]	; (2934 <EVENT_SYSTEM_0_init+0x2c>)
    291e:	4798      	blx	r3
}
    2920:	bf00      	nop
    2922:	bd80      	pop	{r7, pc}
    2924:	40001c00 	.word	0x40001c00
    2928:	00001f95 	.word	0x00001f95
    292c:	40000800 	.word	0x40000800
    2930:	0000211b 	.word	0x0000211b
    2934:	00003679 	.word	0x00003679

00002938 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    2938:	b580      	push	{r7, lr}
    293a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    293c:	2101      	movs	r1, #1
    293e:	202b      	movs	r0, #43	; 0x2b
    2940:	4b2b      	ldr	r3, [pc, #172]	; (29f0 <QSPI_N25Q256_PORT_init+0xb8>)
    2942:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    2944:	2100      	movs	r1, #0
    2946:	202b      	movs	r0, #43	; 0x2b
    2948:	4b2a      	ldr	r3, [pc, #168]	; (29f4 <QSPI_N25Q256_PORT_init+0xbc>)
    294a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    294c:	492a      	ldr	r1, [pc, #168]	; (29f8 <QSPI_N25Q256_PORT_init+0xc0>)
    294e:	202b      	movs	r0, #43	; 0x2b
    2950:	4b2a      	ldr	r3, [pc, #168]	; (29fc <QSPI_N25Q256_PORT_init+0xc4>)
    2952:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    2954:	2102      	movs	r1, #2
    2956:	2008      	movs	r0, #8
    2958:	4b25      	ldr	r3, [pc, #148]	; (29f0 <QSPI_N25Q256_PORT_init+0xb8>)
    295a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    295c:	2100      	movs	r1, #0
    295e:	2008      	movs	r0, #8
    2960:	4b27      	ldr	r3, [pc, #156]	; (2a00 <QSPI_N25Q256_PORT_init+0xc8>)
    2962:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    2964:	2100      	movs	r1, #0
    2966:	2008      	movs	r0, #8
    2968:	4b22      	ldr	r3, [pc, #136]	; (29f4 <QSPI_N25Q256_PORT_init+0xbc>)
    296a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    296c:	4925      	ldr	r1, [pc, #148]	; (2a04 <QSPI_N25Q256_PORT_init+0xcc>)
    296e:	2008      	movs	r0, #8
    2970:	4b22      	ldr	r3, [pc, #136]	; (29fc <QSPI_N25Q256_PORT_init+0xc4>)
    2972:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    2974:	2102      	movs	r1, #2
    2976:	2009      	movs	r0, #9
    2978:	4b1d      	ldr	r3, [pc, #116]	; (29f0 <QSPI_N25Q256_PORT_init+0xb8>)
    297a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    297c:	2100      	movs	r1, #0
    297e:	2009      	movs	r0, #9
    2980:	4b1f      	ldr	r3, [pc, #124]	; (2a00 <QSPI_N25Q256_PORT_init+0xc8>)
    2982:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    2984:	2100      	movs	r1, #0
    2986:	2009      	movs	r0, #9
    2988:	4b1a      	ldr	r3, [pc, #104]	; (29f4 <QSPI_N25Q256_PORT_init+0xbc>)
    298a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    298c:	491e      	ldr	r1, [pc, #120]	; (2a08 <QSPI_N25Q256_PORT_init+0xd0>)
    298e:	2009      	movs	r0, #9
    2990:	4b1a      	ldr	r3, [pc, #104]	; (29fc <QSPI_N25Q256_PORT_init+0xc4>)
    2992:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    2994:	2102      	movs	r1, #2
    2996:	200a      	movs	r0, #10
    2998:	4b15      	ldr	r3, [pc, #84]	; (29f0 <QSPI_N25Q256_PORT_init+0xb8>)
    299a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    299c:	2100      	movs	r1, #0
    299e:	200a      	movs	r0, #10
    29a0:	4b17      	ldr	r3, [pc, #92]	; (2a00 <QSPI_N25Q256_PORT_init+0xc8>)
    29a2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    29a4:	2100      	movs	r1, #0
    29a6:	200a      	movs	r0, #10
    29a8:	4b12      	ldr	r3, [pc, #72]	; (29f4 <QSPI_N25Q256_PORT_init+0xbc>)
    29aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    29ac:	4917      	ldr	r1, [pc, #92]	; (2a0c <QSPI_N25Q256_PORT_init+0xd4>)
    29ae:	200a      	movs	r0, #10
    29b0:	4b12      	ldr	r3, [pc, #72]	; (29fc <QSPI_N25Q256_PORT_init+0xc4>)
    29b2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    29b4:	2102      	movs	r1, #2
    29b6:	200b      	movs	r0, #11
    29b8:	4b0d      	ldr	r3, [pc, #52]	; (29f0 <QSPI_N25Q256_PORT_init+0xb8>)
    29ba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    29bc:	2100      	movs	r1, #0
    29be:	200b      	movs	r0, #11
    29c0:	4b0f      	ldr	r3, [pc, #60]	; (2a00 <QSPI_N25Q256_PORT_init+0xc8>)
    29c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    29c4:	2100      	movs	r1, #0
    29c6:	200b      	movs	r0, #11
    29c8:	4b0a      	ldr	r3, [pc, #40]	; (29f4 <QSPI_N25Q256_PORT_init+0xbc>)
    29ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    29cc:	4910      	ldr	r1, [pc, #64]	; (2a10 <QSPI_N25Q256_PORT_init+0xd8>)
    29ce:	200b      	movs	r0, #11
    29d0:	4b0a      	ldr	r3, [pc, #40]	; (29fc <QSPI_N25Q256_PORT_init+0xc4>)
    29d2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    29d4:	2101      	movs	r1, #1
    29d6:	202a      	movs	r0, #42	; 0x2a
    29d8:	4b05      	ldr	r3, [pc, #20]	; (29f0 <QSPI_N25Q256_PORT_init+0xb8>)
    29da:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    29dc:	2100      	movs	r1, #0
    29de:	202a      	movs	r0, #42	; 0x2a
    29e0:	4b04      	ldr	r3, [pc, #16]	; (29f4 <QSPI_N25Q256_PORT_init+0xbc>)
    29e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    29e4:	490b      	ldr	r1, [pc, #44]	; (2a14 <QSPI_N25Q256_PORT_init+0xdc>)
    29e6:	202a      	movs	r0, #42	; 0x2a
    29e8:	4b04      	ldr	r3, [pc, #16]	; (29fc <QSPI_N25Q256_PORT_init+0xc4>)
    29ea:	4798      	blx	r3
}
    29ec:	bf00      	nop
    29ee:	bd80      	pop	{r7, pc}
    29f0:	00002769 	.word	0x00002769
    29f4:	00002715 	.word	0x00002715
    29f8:	002b0007 	.word	0x002b0007
    29fc:	00002749 	.word	0x00002749
    2a00:	000027a1 	.word	0x000027a1
    2a04:	00080007 	.word	0x00080007
    2a08:	00090007 	.word	0x00090007
    2a0c:	000a0007 	.word	0x000a0007
    2a10:	000b0007 	.word	0x000b0007
    2a14:	002a0007 	.word	0x002a0007

00002a18 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    2a18:	b580      	push	{r7, lr}
    2a1a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    2a1c:	4805      	ldr	r0, [pc, #20]	; (2a34 <QSPI_N25Q256_CLOCK_init+0x1c>)
    2a1e:	4b06      	ldr	r3, [pc, #24]	; (2a38 <QSPI_N25Q256_CLOCK_init+0x20>)
    2a20:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    2a22:	4804      	ldr	r0, [pc, #16]	; (2a34 <QSPI_N25Q256_CLOCK_init+0x1c>)
    2a24:	4b05      	ldr	r3, [pc, #20]	; (2a3c <QSPI_N25Q256_CLOCK_init+0x24>)
    2a26:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    2a28:	4802      	ldr	r0, [pc, #8]	; (2a34 <QSPI_N25Q256_CLOCK_init+0x1c>)
    2a2a:	4b05      	ldr	r3, [pc, #20]	; (2a40 <QSPI_N25Q256_CLOCK_init+0x28>)
    2a2c:	4798      	blx	r3
}
    2a2e:	bf00      	nop
    2a30:	bd80      	pop	{r7, pc}
    2a32:	bf00      	nop
    2a34:	40000800 	.word	0x40000800
    2a38:	00001fdb 	.word	0x00001fdb
    2a3c:	0000201b 	.word	0x0000201b
    2a40:	0000217b 	.word	0x0000217b

00002a44 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    2a44:	b580      	push	{r7, lr}
    2a46:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    2a48:	4b04      	ldr	r3, [pc, #16]	; (2a5c <QSPI_N25Q256_init+0x18>)
    2a4a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    2a4c:	4904      	ldr	r1, [pc, #16]	; (2a60 <QSPI_N25Q256_init+0x1c>)
    2a4e:	4805      	ldr	r0, [pc, #20]	; (2a64 <QSPI_N25Q256_init+0x20>)
    2a50:	4b05      	ldr	r3, [pc, #20]	; (2a68 <QSPI_N25Q256_init+0x24>)
    2a52:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    2a54:	4b05      	ldr	r3, [pc, #20]	; (2a6c <QSPI_N25Q256_init+0x28>)
    2a56:	4798      	blx	r3
}
    2a58:	bf00      	nop
    2a5a:	bd80      	pop	{r7, pc}
    2a5c:	00002a19 	.word	0x00002a19
    2a60:	42003400 	.word	0x42003400
    2a64:	200021b8 	.word	0x200021b8
    2a68:	00003bdd 	.word	0x00003bdd
    2a6c:	00002939 	.word	0x00002939

00002a70 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    2a70:	b580      	push	{r7, lr}
    2a72:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    2a74:	4802      	ldr	r0, [pc, #8]	; (2a80 <DATETIME_CLOCK_CLOCK_init+0x10>)
    2a76:	4b03      	ldr	r3, [pc, #12]	; (2a84 <DATETIME_CLOCK_CLOCK_init+0x14>)
    2a78:	4798      	blx	r3
}
    2a7a:	bf00      	nop
    2a7c:	bd80      	pop	{r7, pc}
    2a7e:	bf00      	nop
    2a80:	40000800 	.word	0x40000800
    2a84:	0000205b 	.word	0x0000205b

00002a88 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    2a88:	b580      	push	{r7, lr}
    2a8a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    2a8c:	4b03      	ldr	r3, [pc, #12]	; (2a9c <DATETIME_CLOCK_init+0x14>)
    2a8e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    2a90:	4903      	ldr	r1, [pc, #12]	; (2aa0 <DATETIME_CLOCK_init+0x18>)
    2a92:	4804      	ldr	r0, [pc, #16]	; (2aa4 <DATETIME_CLOCK_init+0x1c>)
    2a94:	4b04      	ldr	r3, [pc, #16]	; (2aa8 <DATETIME_CLOCK_init+0x20>)
    2a96:	4798      	blx	r3
}
    2a98:	bf00      	nop
    2a9a:	bd80      	pop	{r7, pc}
    2a9c:	00002a71 	.word	0x00002a71
    2aa0:	40002400 	.word	0x40002400
    2aa4:	200022f0 	.word	0x200022f0
    2aa8:	00003419 	.word	0x00003419

00002aac <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    2aac:	b580      	push	{r7, lr}
    2aae:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    2ab0:	2100      	movs	r1, #0
    2ab2:	203b      	movs	r0, #59	; 0x3b
    2ab4:	4b11      	ldr	r3, [pc, #68]	; (2afc <SPI_TEMP_PORT_init+0x50>)
    2ab6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    2ab8:	2102      	movs	r1, #2
    2aba:	203b      	movs	r0, #59	; 0x3b
    2abc:	4b10      	ldr	r3, [pc, #64]	; (2b00 <SPI_TEMP_PORT_init+0x54>)
    2abe:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    2ac0:	4910      	ldr	r1, [pc, #64]	; (2b04 <SPI_TEMP_PORT_init+0x58>)
    2ac2:	203b      	movs	r0, #59	; 0x3b
    2ac4:	4b10      	ldr	r3, [pc, #64]	; (2b08 <SPI_TEMP_PORT_init+0x5c>)
    2ac6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    2ac8:	2100      	movs	r1, #0
    2aca:	203a      	movs	r0, #58	; 0x3a
    2acc:	4b0b      	ldr	r3, [pc, #44]	; (2afc <SPI_TEMP_PORT_init+0x50>)
    2ace:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    2ad0:	2102      	movs	r1, #2
    2ad2:	203a      	movs	r0, #58	; 0x3a
    2ad4:	4b0a      	ldr	r3, [pc, #40]	; (2b00 <SPI_TEMP_PORT_init+0x54>)
    2ad6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    2ad8:	490c      	ldr	r1, [pc, #48]	; (2b0c <SPI_TEMP_PORT_init+0x60>)
    2ada:	203a      	movs	r0, #58	; 0x3a
    2adc:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <SPI_TEMP_PORT_init+0x5c>)
    2ade:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2ae0:	2101      	movs	r1, #1
    2ae2:	203c      	movs	r0, #60	; 0x3c
    2ae4:	4b06      	ldr	r3, [pc, #24]	; (2b00 <SPI_TEMP_PORT_init+0x54>)
    2ae6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    2ae8:	2100      	movs	r1, #0
    2aea:	203c      	movs	r0, #60	; 0x3c
    2aec:	4b08      	ldr	r3, [pc, #32]	; (2b10 <SPI_TEMP_PORT_init+0x64>)
    2aee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    2af0:	4908      	ldr	r1, [pc, #32]	; (2b14 <SPI_TEMP_PORT_init+0x68>)
    2af2:	203c      	movs	r0, #60	; 0x3c
    2af4:	4b04      	ldr	r3, [pc, #16]	; (2b08 <SPI_TEMP_PORT_init+0x5c>)
    2af6:	4798      	blx	r3
}
    2af8:	bf00      	nop
    2afa:	bd80      	pop	{r7, pc}
    2afc:	000027a1 	.word	0x000027a1
    2b00:	00002769 	.word	0x00002769
    2b04:	003b0003 	.word	0x003b0003
    2b08:	00002749 	.word	0x00002749
    2b0c:	003a0003 	.word	0x003a0003
    2b10:	00002715 	.word	0x00002715
    2b14:	003c0003 	.word	0x003c0003

00002b18 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2b1c:	2243      	movs	r2, #67	; 0x43
    2b1e:	2122      	movs	r1, #34	; 0x22
    2b20:	4806      	ldr	r0, [pc, #24]	; (2b3c <SPI_TEMP_CLOCK_init+0x24>)
    2b22:	4b07      	ldr	r3, [pc, #28]	; (2b40 <SPI_TEMP_CLOCK_init+0x28>)
    2b24:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2b26:	224a      	movs	r2, #74	; 0x4a
    2b28:	2103      	movs	r1, #3
    2b2a:	4804      	ldr	r0, [pc, #16]	; (2b3c <SPI_TEMP_CLOCK_init+0x24>)
    2b2c:	4b04      	ldr	r3, [pc, #16]	; (2b40 <SPI_TEMP_CLOCK_init+0x28>)
    2b2e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    2b30:	4804      	ldr	r0, [pc, #16]	; (2b44 <SPI_TEMP_CLOCK_init+0x2c>)
    2b32:	4b05      	ldr	r3, [pc, #20]	; (2b48 <SPI_TEMP_CLOCK_init+0x30>)
    2b34:	4798      	blx	r3
}
    2b36:	bf00      	nop
    2b38:	bd80      	pop	{r7, pc}
    2b3a:	bf00      	nop
    2b3c:	40001c00 	.word	0x40001c00
    2b40:	00001f95 	.word	0x00001f95
    2b44:	40000800 	.word	0x40000800
    2b48:	0000219b 	.word	0x0000219b

00002b4c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    2b4c:	b580      	push	{r7, lr}
    2b4e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    2b50:	4b05      	ldr	r3, [pc, #20]	; (2b68 <SPI_TEMP_init+0x1c>)
    2b52:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    2b54:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2b58:	4804      	ldr	r0, [pc, #16]	; (2b6c <SPI_TEMP_init+0x20>)
    2b5a:	4b05      	ldr	r3, [pc, #20]	; (2b70 <SPI_TEMP_init+0x24>)
    2b5c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    2b5e:	4b05      	ldr	r3, [pc, #20]	; (2b74 <SPI_TEMP_init+0x28>)
    2b60:	4798      	blx	r3
}
    2b62:	bf00      	nop
    2b64:	bd80      	pop	{r7, pc}
    2b66:	bf00      	nop
    2b68:	00002b19 	.word	0x00002b19
    2b6c:	20002170 	.word	0x20002170
    2b70:	00003f05 	.word	0x00003f05
    2b74:	00002aad 	.word	0x00002aad

00002b78 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    2b7c:	2100      	movs	r1, #0
    2b7e:	2017      	movs	r0, #23
    2b80:	4b07      	ldr	r3, [pc, #28]	; (2ba0 <I2C_EXPANDER_PORT_init+0x28>)
    2b82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    2b84:	4907      	ldr	r1, [pc, #28]	; (2ba4 <I2C_EXPANDER_PORT_init+0x2c>)
    2b86:	2017      	movs	r0, #23
    2b88:	4b07      	ldr	r3, [pc, #28]	; (2ba8 <I2C_EXPANDER_PORT_init+0x30>)
    2b8a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    2b8c:	2100      	movs	r1, #0
    2b8e:	2016      	movs	r0, #22
    2b90:	4b03      	ldr	r3, [pc, #12]	; (2ba0 <I2C_EXPANDER_PORT_init+0x28>)
    2b92:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    2b94:	4905      	ldr	r1, [pc, #20]	; (2bac <I2C_EXPANDER_PORT_init+0x34>)
    2b96:	2016      	movs	r0, #22
    2b98:	4b03      	ldr	r3, [pc, #12]	; (2ba8 <I2C_EXPANDER_PORT_init+0x30>)
    2b9a:	4798      	blx	r3
}
    2b9c:	bf00      	nop
    2b9e:	bd80      	pop	{r7, pc}
    2ba0:	00002715 	.word	0x00002715
    2ba4:	00170003 	.word	0x00170003
    2ba8:	00002749 	.word	0x00002749
    2bac:	00160003 	.word	0x00160003

00002bb0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2bb4:	2243      	movs	r2, #67	; 0x43
    2bb6:	2123      	movs	r1, #35	; 0x23
    2bb8:	4806      	ldr	r0, [pc, #24]	; (2bd4 <I2C_EXPANDER_CLOCK_init+0x24>)
    2bba:	4b07      	ldr	r3, [pc, #28]	; (2bd8 <I2C_EXPANDER_CLOCK_init+0x28>)
    2bbc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2bbe:	224a      	movs	r2, #74	; 0x4a
    2bc0:	2103      	movs	r1, #3
    2bc2:	4804      	ldr	r0, [pc, #16]	; (2bd4 <I2C_EXPANDER_CLOCK_init+0x24>)
    2bc4:	4b04      	ldr	r3, [pc, #16]	; (2bd8 <I2C_EXPANDER_CLOCK_init+0x28>)
    2bc6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    2bc8:	4804      	ldr	r0, [pc, #16]	; (2bdc <I2C_EXPANDER_CLOCK_init+0x2c>)
    2bca:	4b05      	ldr	r3, [pc, #20]	; (2be0 <I2C_EXPANDER_CLOCK_init+0x30>)
    2bcc:	4798      	blx	r3
}
    2bce:	bf00      	nop
    2bd0:	bd80      	pop	{r7, pc}
    2bd2:	bf00      	nop
    2bd4:	40001c00 	.word	0x40001c00
    2bd8:	00001f95 	.word	0x00001f95
    2bdc:	40000800 	.word	0x40000800
    2be0:	000021bb 	.word	0x000021bb

00002be4 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    2be4:	b580      	push	{r7, lr}
    2be6:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    2be8:	4b04      	ldr	r3, [pc, #16]	; (2bfc <I2C_EXPANDER_init+0x18>)
    2bea:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    2bec:	4904      	ldr	r1, [pc, #16]	; (2c00 <I2C_EXPANDER_init+0x1c>)
    2bee:	4805      	ldr	r0, [pc, #20]	; (2c04 <I2C_EXPANDER_init+0x20>)
    2bf0:	4b05      	ldr	r3, [pc, #20]	; (2c08 <I2C_EXPANDER_init+0x24>)
    2bf2:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    2bf4:	4b05      	ldr	r3, [pc, #20]	; (2c0c <I2C_EXPANDER_init+0x28>)
    2bf6:	4798      	blx	r3
}
    2bf8:	bf00      	nop
    2bfa:	bd80      	pop	{r7, pc}
    2bfc:	00002bb1 	.word	0x00002bb1
    2c00:	43000400 	.word	0x43000400
    2c04:	20002254 	.word	0x20002254
    2c08:	00003899 	.word	0x00003899
    2c0c:	00002b79 	.word	0x00002b79

00002c10 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    2c10:	b580      	push	{r7, lr}
    2c12:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    2c14:	2100      	movs	r1, #0
    2c16:	2044      	movs	r0, #68	; 0x44
    2c18:	4b11      	ldr	r3, [pc, #68]	; (2c60 <SPI_HI3593_PORT_init+0x50>)
    2c1a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    2c1c:	2102      	movs	r1, #2
    2c1e:	2044      	movs	r0, #68	; 0x44
    2c20:	4b10      	ldr	r3, [pc, #64]	; (2c64 <SPI_HI3593_PORT_init+0x54>)
    2c22:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    2c24:	4910      	ldr	r1, [pc, #64]	; (2c68 <SPI_HI3593_PORT_init+0x58>)
    2c26:	2044      	movs	r0, #68	; 0x44
    2c28:	4b10      	ldr	r3, [pc, #64]	; (2c6c <SPI_HI3593_PORT_init+0x5c>)
    2c2a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    2c2c:	2100      	movs	r1, #0
    2c2e:	2045      	movs	r0, #69	; 0x45
    2c30:	4b0b      	ldr	r3, [pc, #44]	; (2c60 <SPI_HI3593_PORT_init+0x50>)
    2c32:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    2c34:	2102      	movs	r1, #2
    2c36:	2045      	movs	r0, #69	; 0x45
    2c38:	4b0a      	ldr	r3, [pc, #40]	; (2c64 <SPI_HI3593_PORT_init+0x54>)
    2c3a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    2c3c:	490c      	ldr	r1, [pc, #48]	; (2c70 <SPI_HI3593_PORT_init+0x60>)
    2c3e:	2045      	movs	r0, #69	; 0x45
    2c40:	4b0a      	ldr	r3, [pc, #40]	; (2c6c <SPI_HI3593_PORT_init+0x5c>)
    2c42:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    2c44:	2101      	movs	r1, #1
    2c46:	2047      	movs	r0, #71	; 0x47
    2c48:	4b06      	ldr	r3, [pc, #24]	; (2c64 <SPI_HI3593_PORT_init+0x54>)
    2c4a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    2c4c:	2100      	movs	r1, #0
    2c4e:	2047      	movs	r0, #71	; 0x47
    2c50:	4b08      	ldr	r3, [pc, #32]	; (2c74 <SPI_HI3593_PORT_init+0x64>)
    2c52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    2c54:	4908      	ldr	r1, [pc, #32]	; (2c78 <SPI_HI3593_PORT_init+0x68>)
    2c56:	2047      	movs	r0, #71	; 0x47
    2c58:	4b04      	ldr	r3, [pc, #16]	; (2c6c <SPI_HI3593_PORT_init+0x5c>)
    2c5a:	4798      	blx	r3
}
    2c5c:	bf00      	nop
    2c5e:	bd80      	pop	{r7, pc}
    2c60:	000027a1 	.word	0x000027a1
    2c64:	00002769 	.word	0x00002769
    2c68:	00440002 	.word	0x00440002
    2c6c:	00002749 	.word	0x00002749
    2c70:	00450002 	.word	0x00450002
    2c74:	00002715 	.word	0x00002715
    2c78:	00470002 	.word	0x00470002

00002c7c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2c80:	2243      	movs	r2, #67	; 0x43
    2c82:	2124      	movs	r1, #36	; 0x24
    2c84:	4806      	ldr	r0, [pc, #24]	; (2ca0 <SPI_HI3593_CLOCK_init+0x24>)
    2c86:	4b07      	ldr	r3, [pc, #28]	; (2ca4 <SPI_HI3593_CLOCK_init+0x28>)
    2c88:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2c8a:	224a      	movs	r2, #74	; 0x4a
    2c8c:	2103      	movs	r1, #3
    2c8e:	4804      	ldr	r0, [pc, #16]	; (2ca0 <SPI_HI3593_CLOCK_init+0x24>)
    2c90:	4b04      	ldr	r3, [pc, #16]	; (2ca4 <SPI_HI3593_CLOCK_init+0x28>)
    2c92:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    2c94:	4804      	ldr	r0, [pc, #16]	; (2ca8 <SPI_HI3593_CLOCK_init+0x2c>)
    2c96:	4b05      	ldr	r3, [pc, #20]	; (2cac <SPI_HI3593_CLOCK_init+0x30>)
    2c98:	4798      	blx	r3
}
    2c9a:	bf00      	nop
    2c9c:	bd80      	pop	{r7, pc}
    2c9e:	bf00      	nop
    2ca0:	40001c00 	.word	0x40001c00
    2ca4:	00001f95 	.word	0x00001f95
    2ca8:	40000800 	.word	0x40000800
    2cac:	000021db 	.word	0x000021db

00002cb0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    2cb0:	b580      	push	{r7, lr}
    2cb2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    2cb4:	4b04      	ldr	r3, [pc, #16]	; (2cc8 <SPI_HI3593_init+0x18>)
    2cb6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    2cb8:	4904      	ldr	r1, [pc, #16]	; (2ccc <SPI_HI3593_init+0x1c>)
    2cba:	4805      	ldr	r0, [pc, #20]	; (2cd0 <SPI_HI3593_init+0x20>)
    2cbc:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <SPI_HI3593_init+0x24>)
    2cbe:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    2cc0:	4b05      	ldr	r3, [pc, #20]	; (2cd8 <SPI_HI3593_init+0x28>)
    2cc2:	4798      	blx	r3
}
    2cc4:	bf00      	nop
    2cc6:	bd80      	pop	{r7, pc}
    2cc8:	00002c7d 	.word	0x00002c7d
    2ccc:	43000800 	.word	0x43000800
    2cd0:	20002158 	.word	0x20002158
    2cd4:	000040b9 	.word	0x000040b9
    2cd8:	00002c11 	.word	0x00002c11

00002cdc <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    2cdc:	b580      	push	{r7, lr}
    2cde:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2ce0:	2100      	movs	r1, #0
    2ce2:	2068      	movs	r0, #104	; 0x68
    2ce4:	4b07      	ldr	r3, [pc, #28]	; (2d04 <I2C_EEPROM_PORT_init+0x28>)
    2ce6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    2ce8:	4907      	ldr	r1, [pc, #28]	; (2d08 <I2C_EEPROM_PORT_init+0x2c>)
    2cea:	2068      	movs	r0, #104	; 0x68
    2cec:	4b07      	ldr	r3, [pc, #28]	; (2d0c <I2C_EEPROM_PORT_init+0x30>)
    2cee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    2cf0:	2100      	movs	r1, #0
    2cf2:	2069      	movs	r0, #105	; 0x69
    2cf4:	4b03      	ldr	r3, [pc, #12]	; (2d04 <I2C_EEPROM_PORT_init+0x28>)
    2cf6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    2cf8:	4905      	ldr	r1, [pc, #20]	; (2d10 <I2C_EEPROM_PORT_init+0x34>)
    2cfa:	2069      	movs	r0, #105	; 0x69
    2cfc:	4b03      	ldr	r3, [pc, #12]	; (2d0c <I2C_EEPROM_PORT_init+0x30>)
    2cfe:	4798      	blx	r3
}
    2d00:	bf00      	nop
    2d02:	bd80      	pop	{r7, pc}
    2d04:	00002715 	.word	0x00002715
    2d08:	00680002 	.word	0x00680002
    2d0c:	00002749 	.word	0x00002749
    2d10:	00690002 	.word	0x00690002

00002d14 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    2d14:	b580      	push	{r7, lr}
    2d16:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2d18:	2244      	movs	r2, #68	; 0x44
    2d1a:	2125      	movs	r1, #37	; 0x25
    2d1c:	4806      	ldr	r0, [pc, #24]	; (2d38 <I2C_EEPROM_CLOCK_init+0x24>)
    2d1e:	4b07      	ldr	r3, [pc, #28]	; (2d3c <I2C_EEPROM_CLOCK_init+0x28>)
    2d20:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2d22:	224a      	movs	r2, #74	; 0x4a
    2d24:	2103      	movs	r1, #3
    2d26:	4804      	ldr	r0, [pc, #16]	; (2d38 <I2C_EEPROM_CLOCK_init+0x24>)
    2d28:	4b04      	ldr	r3, [pc, #16]	; (2d3c <I2C_EEPROM_CLOCK_init+0x28>)
    2d2a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    2d2c:	4804      	ldr	r0, [pc, #16]	; (2d40 <I2C_EEPROM_CLOCK_init+0x2c>)
    2d2e:	4b05      	ldr	r3, [pc, #20]	; (2d44 <I2C_EEPROM_CLOCK_init+0x30>)
    2d30:	4798      	blx	r3
}
    2d32:	bf00      	nop
    2d34:	bd80      	pop	{r7, pc}
    2d36:	bf00      	nop
    2d38:	40001c00 	.word	0x40001c00
    2d3c:	00001f95 	.word	0x00001f95
    2d40:	40000800 	.word	0x40000800
    2d44:	000021fb 	.word	0x000021fb

00002d48 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    2d4c:	4b04      	ldr	r3, [pc, #16]	; (2d60 <I2C_EEPROM_init+0x18>)
    2d4e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    2d50:	4904      	ldr	r1, [pc, #16]	; (2d64 <I2C_EEPROM_init+0x1c>)
    2d52:	4805      	ldr	r0, [pc, #20]	; (2d68 <I2C_EEPROM_init+0x20>)
    2d54:	4b05      	ldr	r3, [pc, #20]	; (2d6c <I2C_EEPROM_init+0x24>)
    2d56:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    2d58:	4b05      	ldr	r3, [pc, #20]	; (2d70 <I2C_EEPROM_init+0x28>)
    2d5a:	4798      	blx	r3
}
    2d5c:	bf00      	nop
    2d5e:	bd80      	pop	{r7, pc}
    2d60:	00002d15 	.word	0x00002d15
    2d64:	43000c00 	.word	0x43000c00
    2d68:	200022b0 	.word	0x200022b0
    2d6c:	00003899 	.word	0x00003899
    2d70:	00002cdd 	.word	0x00002cdd

00002d74 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    2d74:	b580      	push	{r7, lr}
    2d76:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2d78:	4808      	ldr	r0, [pc, #32]	; (2d9c <TIMER_INTERFACE_init+0x28>)
    2d7a:	4b09      	ldr	r3, [pc, #36]	; (2da0 <TIMER_INTERFACE_init+0x2c>)
    2d7c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2d7e:	2243      	movs	r2, #67	; 0x43
    2d80:	2109      	movs	r1, #9
    2d82:	4808      	ldr	r0, [pc, #32]	; (2da4 <TIMER_INTERFACE_init+0x30>)
    2d84:	4b08      	ldr	r3, [pc, #32]	; (2da8 <TIMER_INTERFACE_init+0x34>)
    2d86:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    2d88:	4b08      	ldr	r3, [pc, #32]	; (2dac <TIMER_INTERFACE_init+0x38>)
    2d8a:	4798      	blx	r3
    2d8c:	4603      	mov	r3, r0
    2d8e:	461a      	mov	r2, r3
    2d90:	4907      	ldr	r1, [pc, #28]	; (2db0 <TIMER_INTERFACE_init+0x3c>)
    2d92:	4808      	ldr	r0, [pc, #32]	; (2db4 <TIMER_INTERFACE_init+0x40>)
    2d94:	4b08      	ldr	r3, [pc, #32]	; (2db8 <TIMER_INTERFACE_init+0x44>)
    2d96:	4798      	blx	r3
}
    2d98:	bf00      	nop
    2d9a:	bd80      	pop	{r7, pc}
    2d9c:	40000800 	.word	0x40000800
    2da0:	0000209b 	.word	0x0000209b
    2da4:	40001c00 	.word	0x40001c00
    2da8:	00001f95 	.word	0x00001f95
    2dac:	00009749 	.word	0x00009749
    2db0:	40003800 	.word	0x40003800
    2db4:	200021d8 	.word	0x200021d8
    2db8:	00004289 	.word	0x00004289

00002dbc <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    2dbc:	b580      	push	{r7, lr}
    2dbe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    2dc0:	4808      	ldr	r0, [pc, #32]	; (2de4 <TIMER_EVENT_init+0x28>)
    2dc2:	4b09      	ldr	r3, [pc, #36]	; (2de8 <TIMER_EVENT_init+0x2c>)
    2dc4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2dc6:	2245      	movs	r2, #69	; 0x45
    2dc8:	2109      	movs	r1, #9
    2dca:	4808      	ldr	r0, [pc, #32]	; (2dec <TIMER_EVENT_init+0x30>)
    2dcc:	4b08      	ldr	r3, [pc, #32]	; (2df0 <TIMER_EVENT_init+0x34>)
    2dce:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    2dd0:	4b08      	ldr	r3, [pc, #32]	; (2df4 <TIMER_EVENT_init+0x38>)
    2dd2:	4798      	blx	r3
    2dd4:	4603      	mov	r3, r0
    2dd6:	461a      	mov	r2, r3
    2dd8:	4907      	ldr	r1, [pc, #28]	; (2df8 <TIMER_EVENT_init+0x3c>)
    2dda:	4808      	ldr	r0, [pc, #32]	; (2dfc <TIMER_EVENT_init+0x40>)
    2ddc:	4b08      	ldr	r3, [pc, #32]	; (2e00 <TIMER_EVENT_init+0x44>)
    2dde:	4798      	blx	r3
}
    2de0:	bf00      	nop
    2de2:	bd80      	pop	{r7, pc}
    2de4:	40000800 	.word	0x40000800
    2de8:	000020bb 	.word	0x000020bb
    2dec:	40001c00 	.word	0x40001c00
    2df0:	00001f95 	.word	0x00001f95
    2df4:	00009749 	.word	0x00009749
    2df8:	40003c00 	.word	0x40003c00
    2dfc:	200021bc 	.word	0x200021bc
    2e00:	00004289 	.word	0x00004289

00002e04 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    2e04:	b580      	push	{r7, lr}
    2e06:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2e08:	4808      	ldr	r0, [pc, #32]	; (2e2c <TIMER_ARINC_init+0x28>)
    2e0a:	4b09      	ldr	r3, [pc, #36]	; (2e30 <TIMER_ARINC_init+0x2c>)
    2e0c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2e0e:	2244      	movs	r2, #68	; 0x44
    2e10:	211a      	movs	r1, #26
    2e12:	4808      	ldr	r0, [pc, #32]	; (2e34 <TIMER_ARINC_init+0x30>)
    2e14:	4b08      	ldr	r3, [pc, #32]	; (2e38 <TIMER_ARINC_init+0x34>)
    2e16:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2e18:	4b08      	ldr	r3, [pc, #32]	; (2e3c <TIMER_ARINC_init+0x38>)
    2e1a:	4798      	blx	r3
    2e1c:	4603      	mov	r3, r0
    2e1e:	461a      	mov	r2, r3
    2e20:	4907      	ldr	r1, [pc, #28]	; (2e40 <TIMER_ARINC_init+0x3c>)
    2e22:	4808      	ldr	r0, [pc, #32]	; (2e44 <TIMER_ARINC_init+0x40>)
    2e24:	4b08      	ldr	r3, [pc, #32]	; (2e48 <TIMER_ARINC_init+0x44>)
    2e26:	4798      	blx	r3
}
    2e28:	bf00      	nop
    2e2a:	bd80      	pop	{r7, pc}
    2e2c:	40000800 	.word	0x40000800
    2e30:	0000213b 	.word	0x0000213b
    2e34:	40001c00 	.word	0x40001c00
    2e38:	00001f95 	.word	0x00001f95
    2e3c:	00009749 	.word	0x00009749
    2e40:	4101a000 	.word	0x4101a000
    2e44:	20002238 	.word	0x20002238
    2e48:	00004289 	.word	0x00004289

00002e4c <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    2e50:	4808      	ldr	r0, [pc, #32]	; (2e74 <TIMER_HVAC_init+0x28>)
    2e52:	4b09      	ldr	r3, [pc, #36]	; (2e78 <TIMER_HVAC_init+0x2c>)
    2e54:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2e56:	2245      	movs	r2, #69	; 0x45
    2e58:	211a      	movs	r1, #26
    2e5a:	4808      	ldr	r0, [pc, #32]	; (2e7c <TIMER_HVAC_init+0x30>)
    2e5c:	4b08      	ldr	r3, [pc, #32]	; (2e80 <TIMER_HVAC_init+0x34>)
    2e5e:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    2e60:	4b08      	ldr	r3, [pc, #32]	; (2e84 <TIMER_HVAC_init+0x38>)
    2e62:	4798      	blx	r3
    2e64:	4603      	mov	r3, r0
    2e66:	461a      	mov	r2, r3
    2e68:	4907      	ldr	r1, [pc, #28]	; (2e88 <TIMER_HVAC_init+0x3c>)
    2e6a:	4808      	ldr	r0, [pc, #32]	; (2e8c <TIMER_HVAC_init+0x40>)
    2e6c:	4b08      	ldr	r3, [pc, #32]	; (2e90 <TIMER_HVAC_init+0x44>)
    2e6e:	4798      	blx	r3
}
    2e70:	bf00      	nop
    2e72:	bd80      	pop	{r7, pc}
    2e74:	40000800 	.word	0x40000800
    2e78:	0000215b 	.word	0x0000215b
    2e7c:	40001c00 	.word	0x40001c00
    2e80:	00001f95 	.word	0x00001f95
    2e84:	00009749 	.word	0x00009749
    2e88:	4101c000 	.word	0x4101c000
    2e8c:	20002294 	.word	0x20002294
    2e90:	00004289 	.word	0x00004289

00002e94 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2e94:	b580      	push	{r7, lr}
    2e96:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    2e98:	4904      	ldr	r1, [pc, #16]	; (2eac <LIVE_PULSE_PORT_init+0x18>)
    2e9a:	2020      	movs	r0, #32
    2e9c:	4b04      	ldr	r3, [pc, #16]	; (2eb0 <LIVE_PULSE_PORT_init+0x1c>)
    2e9e:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    2ea0:	4904      	ldr	r1, [pc, #16]	; (2eb4 <LIVE_PULSE_PORT_init+0x20>)
    2ea2:	2021      	movs	r0, #33	; 0x21
    2ea4:	4b02      	ldr	r3, [pc, #8]	; (2eb0 <LIVE_PULSE_PORT_init+0x1c>)
    2ea6:	4798      	blx	r3
}
    2ea8:	bf00      	nop
    2eaa:	bd80      	pop	{r7, pc}
    2eac:	00200004 	.word	0x00200004
    2eb0:	00002749 	.word	0x00002749
    2eb4:	00210004 	.word	0x00210004

00002eb8 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2ebc:	4804      	ldr	r0, [pc, #16]	; (2ed0 <LIVE_PULSE_CLOCK_init+0x18>)
    2ebe:	4b05      	ldr	r3, [pc, #20]	; (2ed4 <LIVE_PULSE_CLOCK_init+0x1c>)
    2ec0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2ec2:	224b      	movs	r2, #75	; 0x4b
    2ec4:	2127      	movs	r1, #39	; 0x27
    2ec6:	4804      	ldr	r0, [pc, #16]	; (2ed8 <LIVE_PULSE_CLOCK_init+0x20>)
    2ec8:	4b04      	ldr	r3, [pc, #16]	; (2edc <LIVE_PULSE_CLOCK_init+0x24>)
    2eca:	4798      	blx	r3
}
    2ecc:	bf00      	nop
    2ece:	bd80      	pop	{r7, pc}
    2ed0:	40000800 	.word	0x40000800
    2ed4:	0000221b 	.word	0x0000221b
    2ed8:	40001c00 	.word	0x40001c00
    2edc:	00001f95 	.word	0x00001f95

00002ee0 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2ee4:	4b06      	ldr	r3, [pc, #24]	; (2f00 <LIVE_PULSE_init+0x20>)
    2ee6:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    2ee8:	4b06      	ldr	r3, [pc, #24]	; (2f04 <LIVE_PULSE_init+0x24>)
    2eea:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    2eec:	4b06      	ldr	r3, [pc, #24]	; (2f08 <LIVE_PULSE_init+0x28>)
    2eee:	4798      	blx	r3
    2ef0:	4603      	mov	r3, r0
    2ef2:	461a      	mov	r2, r3
    2ef4:	4905      	ldr	r1, [pc, #20]	; (2f0c <LIVE_PULSE_init+0x2c>)
    2ef6:	4806      	ldr	r0, [pc, #24]	; (2f10 <LIVE_PULSE_init+0x30>)
    2ef8:	4b06      	ldr	r3, [pc, #24]	; (2f14 <LIVE_PULSE_init+0x34>)
    2efa:	4798      	blx	r3
}
    2efc:	bf00      	nop
    2efe:	bd80      	pop	{r7, pc}
    2f00:	00002eb9 	.word	0x00002eb9
    2f04:	00002e95 	.word	0x00002e95
    2f08:	00009759 	.word	0x00009759
    2f0c:	43001800 	.word	0x43001800
    2f10:	200021f4 	.word	0x200021f4
    2f14:	00003add 	.word	0x00003add

00002f18 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2f1c:	2102      	movs	r1, #2
    2f1e:	2018      	movs	r0, #24
    2f20:	4b0f      	ldr	r3, [pc, #60]	; (2f60 <CDCUSB_PORT_init+0x48>)
    2f22:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2f24:	2100      	movs	r1, #0
    2f26:	2018      	movs	r0, #24
    2f28:	4b0e      	ldr	r3, [pc, #56]	; (2f64 <CDCUSB_PORT_init+0x4c>)
    2f2a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2f2c:	2100      	movs	r1, #0
    2f2e:	2018      	movs	r0, #24
    2f30:	4b0d      	ldr	r3, [pc, #52]	; (2f68 <CDCUSB_PORT_init+0x50>)
    2f32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2f34:	490d      	ldr	r1, [pc, #52]	; (2f6c <CDCUSB_PORT_init+0x54>)
    2f36:	2018      	movs	r0, #24
    2f38:	4b0d      	ldr	r3, [pc, #52]	; (2f70 <CDCUSB_PORT_init+0x58>)
    2f3a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2f3c:	2102      	movs	r1, #2
    2f3e:	2019      	movs	r0, #25
    2f40:	4b07      	ldr	r3, [pc, #28]	; (2f60 <CDCUSB_PORT_init+0x48>)
    2f42:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2f44:	2100      	movs	r1, #0
    2f46:	2019      	movs	r0, #25
    2f48:	4b06      	ldr	r3, [pc, #24]	; (2f64 <CDCUSB_PORT_init+0x4c>)
    2f4a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2f4c:	2100      	movs	r1, #0
    2f4e:	2019      	movs	r0, #25
    2f50:	4b05      	ldr	r3, [pc, #20]	; (2f68 <CDCUSB_PORT_init+0x50>)
    2f52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2f54:	4907      	ldr	r1, [pc, #28]	; (2f74 <CDCUSB_PORT_init+0x5c>)
    2f56:	2019      	movs	r0, #25
    2f58:	4b05      	ldr	r3, [pc, #20]	; (2f70 <CDCUSB_PORT_init+0x58>)
    2f5a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2f5c:	bf00      	nop
    2f5e:	bd80      	pop	{r7, pc}
    2f60:	00002769 	.word	0x00002769
    2f64:	000027a1 	.word	0x000027a1
    2f68:	00002715 	.word	0x00002715
    2f6c:	00180007 	.word	0x00180007
    2f70:	00002749 	.word	0x00002749
    2f74:	00190007 	.word	0x00190007

00002f78 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    2f78:	b580      	push	{r7, lr}
    2f7a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2f7c:	2242      	movs	r2, #66	; 0x42
    2f7e:	210a      	movs	r1, #10
    2f80:	4805      	ldr	r0, [pc, #20]	; (2f98 <CDCUSB_CLOCK_init+0x20>)
    2f82:	4b06      	ldr	r3, [pc, #24]	; (2f9c <CDCUSB_CLOCK_init+0x24>)
    2f84:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    2f86:	4806      	ldr	r0, [pc, #24]	; (2fa0 <CDCUSB_CLOCK_init+0x28>)
    2f88:	4b06      	ldr	r3, [pc, #24]	; (2fa4 <CDCUSB_CLOCK_init+0x2c>)
    2f8a:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2f8c:	4804      	ldr	r0, [pc, #16]	; (2fa0 <CDCUSB_CLOCK_init+0x28>)
    2f8e:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <CDCUSB_CLOCK_init+0x30>)
    2f90:	4798      	blx	r3
}
    2f92:	bf00      	nop
    2f94:	bd80      	pop	{r7, pc}
    2f96:	bf00      	nop
    2f98:	40001c00 	.word	0x40001c00
    2f9c:	00001f95 	.word	0x00001f95
    2fa0:	40000800 	.word	0x40000800
    2fa4:	00001fbb 	.word	0x00001fbb
    2fa8:	000020db 	.word	0x000020db

00002fac <CDCUSB_init>:

void CDCUSB_init(void)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2fb0:	4b03      	ldr	r3, [pc, #12]	; (2fc0 <CDCUSB_init+0x14>)
    2fb2:	4798      	blx	r3
	usb_d_init();
    2fb4:	4b03      	ldr	r3, [pc, #12]	; (2fc4 <CDCUSB_init+0x18>)
    2fb6:	4798      	blx	r3
	CDCUSB_PORT_init();
    2fb8:	4b03      	ldr	r3, [pc, #12]	; (2fc8 <CDCUSB_init+0x1c>)
    2fba:	4798      	blx	r3
}
    2fbc:	bf00      	nop
    2fbe:	bd80      	pop	{r7, pc}
    2fc0:	00002f79 	.word	0x00002f79
    2fc4:	000049a9 	.word	0x000049a9
    2fc8:	00002f19 	.word	0x00002f19

00002fcc <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2fd0:	4802      	ldr	r0, [pc, #8]	; (2fdc <WATCHDOG_CLOCK_init+0x10>)
    2fd2:	4b03      	ldr	r3, [pc, #12]	; (2fe0 <WATCHDOG_CLOCK_init+0x14>)
    2fd4:	4798      	blx	r3
}
    2fd6:	bf00      	nop
    2fd8:	bd80      	pop	{r7, pc}
    2fda:	bf00      	nop
    2fdc:	40000800 	.word	0x40000800
    2fe0:	0000203b 	.word	0x0000203b

00002fe4 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2fe4:	b580      	push	{r7, lr}
    2fe6:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2fe8:	4b03      	ldr	r3, [pc, #12]	; (2ff8 <WATCHDOG_init+0x14>)
    2fea:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2fec:	4903      	ldr	r1, [pc, #12]	; (2ffc <WATCHDOG_init+0x18>)
    2fee:	4804      	ldr	r0, [pc, #16]	; (3000 <WATCHDOG_init+0x1c>)
    2ff0:	4b04      	ldr	r3, [pc, #16]	; (3004 <WATCHDOG_init+0x20>)
    2ff2:	4798      	blx	r3
}
    2ff4:	bf00      	nop
    2ff6:	bd80      	pop	{r7, pc}
    2ff8:	00002fcd 	.word	0x00002fcd
    2ffc:	40002000 	.word	0x40002000
    3000:	20002310 	.word	0x20002310
    3004:	000027e9 	.word	0x000027e9

00003008 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    3008:	b580      	push	{r7, lr}
    300a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    300c:	4904      	ldr	r1, [pc, #16]	; (3020 <CAN_CCU_PORT_init+0x18>)
    300e:	202d      	movs	r0, #45	; 0x2d
    3010:	4b04      	ldr	r3, [pc, #16]	; (3024 <CAN_CCU_PORT_init+0x1c>)
    3012:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3014:	4904      	ldr	r1, [pc, #16]	; (3028 <CAN_CCU_PORT_init+0x20>)
    3016:	202c      	movs	r0, #44	; 0x2c
    3018:	4b02      	ldr	r3, [pc, #8]	; (3024 <CAN_CCU_PORT_init+0x1c>)
    301a:	4798      	blx	r3
}
    301c:	bf00      	nop
    301e:	bd80      	pop	{r7, pc}
    3020:	002d0007 	.word	0x002d0007
    3024:	00002749 	.word	0x00002749
    3028:	002c0007 	.word	0x002c0007

0000302c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    302c:	b580      	push	{r7, lr}
    302e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3030:	4807      	ldr	r0, [pc, #28]	; (3050 <CAN_CCU_init+0x24>)
    3032:	4b08      	ldr	r3, [pc, #32]	; (3054 <CAN_CCU_init+0x28>)
    3034:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3036:	2243      	movs	r2, #67	; 0x43
    3038:	211c      	movs	r1, #28
    303a:	4807      	ldr	r0, [pc, #28]	; (3058 <CAN_CCU_init+0x2c>)
    303c:	4b07      	ldr	r3, [pc, #28]	; (305c <CAN_CCU_init+0x30>)
    303e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3040:	4907      	ldr	r1, [pc, #28]	; (3060 <CAN_CCU_init+0x34>)
    3042:	4808      	ldr	r0, [pc, #32]	; (3064 <CAN_CCU_init+0x38>)
    3044:	4b08      	ldr	r3, [pc, #32]	; (3068 <CAN_CCU_init+0x3c>)
    3046:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3048:	4b08      	ldr	r3, [pc, #32]	; (306c <CAN_CCU_init+0x40>)
    304a:	4798      	blx	r3
}
    304c:	bf00      	nop
    304e:	bd80      	pop	{r7, pc}
    3050:	40000800 	.word	0x40000800
    3054:	00001ffb 	.word	0x00001ffb
    3058:	40001c00 	.word	0x40001c00
    305c:	00001f95 	.word	0x00001f95
    3060:	42000400 	.word	0x42000400
    3064:	20002210 	.word	0x20002210
    3068:	000034d9 	.word	0x000034d9
    306c:	00003009 	.word	0x00003009

00003070 <system_init>:

void system_init(void)
{
    3070:	b580      	push	{r7, lr}
    3072:	af00      	add	r7, sp, #0
	init_mcu();
    3074:	4b39      	ldr	r3, [pc, #228]	; (315c <system_init+0xec>)
    3076:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    3078:	2101      	movs	r1, #1
    307a:	2027      	movs	r0, #39	; 0x27
    307c:	4b38      	ldr	r3, [pc, #224]	; (3160 <system_init+0xf0>)
    307e:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    3080:	2102      	movs	r1, #2
    3082:	2027      	movs	r0, #39	; 0x27
    3084:	4b37      	ldr	r3, [pc, #220]	; (3164 <system_init+0xf4>)
    3086:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    3088:	f04f 31ff 	mov.w	r1, #4294967295
    308c:	2027      	movs	r0, #39	; 0x27
    308e:	4b36      	ldr	r3, [pc, #216]	; (3168 <system_init+0xf8>)
    3090:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    3092:	2101      	movs	r1, #1
    3094:	203d      	movs	r0, #61	; 0x3d
    3096:	4b35      	ldr	r3, [pc, #212]	; (316c <system_init+0xfc>)
    3098:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    309a:	2102      	movs	r1, #2
    309c:	203d      	movs	r0, #61	; 0x3d
    309e:	4b30      	ldr	r3, [pc, #192]	; (3160 <system_init+0xf0>)
    30a0:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    30a2:	f04f 31ff 	mov.w	r1, #4294967295
    30a6:	203d      	movs	r0, #61	; 0x3d
    30a8:	4b2f      	ldr	r3, [pc, #188]	; (3168 <system_init+0xf8>)
    30aa:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    30ac:	2101      	movs	r1, #1
    30ae:	203f      	movs	r0, #63	; 0x3f
    30b0:	4b2b      	ldr	r3, [pc, #172]	; (3160 <system_init+0xf0>)
    30b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    30b4:	2101      	movs	r1, #1
    30b6:	203f      	movs	r0, #63	; 0x3f
    30b8:	4b2a      	ldr	r3, [pc, #168]	; (3164 <system_init+0xf4>)
    30ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    30bc:	f04f 31ff 	mov.w	r1, #4294967295
    30c0:	203f      	movs	r0, #63	; 0x3f
    30c2:	4b29      	ldr	r3, [pc, #164]	; (3168 <system_init+0xf8>)
    30c4:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    30c6:	2101      	movs	r1, #1
    30c8:	204e      	movs	r0, #78	; 0x4e
    30ca:	4b28      	ldr	r3, [pc, #160]	; (316c <system_init+0xfc>)
    30cc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    30ce:	2102      	movs	r1, #2
    30d0:	204e      	movs	r0, #78	; 0x4e
    30d2:	4b23      	ldr	r3, [pc, #140]	; (3160 <system_init+0xf0>)
    30d4:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    30d6:	f04f 31ff 	mov.w	r1, #4294967295
    30da:	204e      	movs	r0, #78	; 0x4e
    30dc:	4b22      	ldr	r3, [pc, #136]	; (3168 <system_init+0xf8>)
    30de:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    30e0:	2100      	movs	r1, #0
    30e2:	204f      	movs	r0, #79	; 0x4f
    30e4:	4b21      	ldr	r3, [pc, #132]	; (316c <system_init+0xfc>)
    30e6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    30e8:	2102      	movs	r1, #2
    30ea:	204f      	movs	r0, #79	; 0x4f
    30ec:	4b1c      	ldr	r3, [pc, #112]	; (3160 <system_init+0xf0>)
    30ee:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    30f0:	f04f 31ff 	mov.w	r1, #4294967295
    30f4:	204f      	movs	r0, #79	; 0x4f
    30f6:	4b1c      	ldr	r3, [pc, #112]	; (3168 <system_init+0xf8>)
    30f8:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    30fa:	2100      	movs	r1, #0
    30fc:	2052      	movs	r0, #82	; 0x52
    30fe:	4b1b      	ldr	r3, [pc, #108]	; (316c <system_init+0xfc>)
    3100:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3102:	2102      	movs	r1, #2
    3104:	2052      	movs	r0, #82	; 0x52
    3106:	4b16      	ldr	r3, [pc, #88]	; (3160 <system_init+0xf0>)
    3108:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    310a:	f04f 31ff 	mov.w	r1, #4294967295
    310e:	2052      	movs	r0, #82	; 0x52
    3110:	4b15      	ldr	r3, [pc, #84]	; (3168 <system_init+0xf8>)
    3112:	4798      	blx	r3

	CRC_CALC_init();
    3114:	4b16      	ldr	r3, [pc, #88]	; (3170 <system_init+0x100>)
    3116:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3118:	4b16      	ldr	r3, [pc, #88]	; (3174 <system_init+0x104>)
    311a:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    311c:	4b16      	ldr	r3, [pc, #88]	; (3178 <system_init+0x108>)
    311e:	4798      	blx	r3

	QSPI_N25Q256_init();
    3120:	4b16      	ldr	r3, [pc, #88]	; (317c <system_init+0x10c>)
    3122:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3124:	4b16      	ldr	r3, [pc, #88]	; (3180 <system_init+0x110>)
    3126:	4798      	blx	r3

	SPI_TEMP_init();
    3128:	4b16      	ldr	r3, [pc, #88]	; (3184 <system_init+0x114>)
    312a:	4798      	blx	r3

	I2C_EXPANDER_init();
    312c:	4b16      	ldr	r3, [pc, #88]	; (3188 <system_init+0x118>)
    312e:	4798      	blx	r3

	SPI_HI3593_init();
    3130:	4b16      	ldr	r3, [pc, #88]	; (318c <system_init+0x11c>)
    3132:	4798      	blx	r3

	I2C_EEPROM_init();
    3134:	4b16      	ldr	r3, [pc, #88]	; (3190 <system_init+0x120>)
    3136:	4798      	blx	r3

	TIMER_INTERFACE_init();
    3138:	4b16      	ldr	r3, [pc, #88]	; (3194 <system_init+0x124>)
    313a:	4798      	blx	r3
	TIMER_EVENT_init();
    313c:	4b16      	ldr	r3, [pc, #88]	; (3198 <system_init+0x128>)
    313e:	4798      	blx	r3
	TIMER_ARINC_init();
    3140:	4b16      	ldr	r3, [pc, #88]	; (319c <system_init+0x12c>)
    3142:	4798      	blx	r3
	TIMER_HVAC_init();
    3144:	4b16      	ldr	r3, [pc, #88]	; (31a0 <system_init+0x130>)
    3146:	4798      	blx	r3
	LIVE_PULSE_init();
    3148:	4b16      	ldr	r3, [pc, #88]	; (31a4 <system_init+0x134>)
    314a:	4798      	blx	r3

	CDCUSB_init();
    314c:	4b16      	ldr	r3, [pc, #88]	; (31a8 <system_init+0x138>)
    314e:	4798      	blx	r3

	WATCHDOG_init();
    3150:	4b16      	ldr	r3, [pc, #88]	; (31ac <system_init+0x13c>)
    3152:	4798      	blx	r3
	CAN_CCU_init();
    3154:	4b16      	ldr	r3, [pc, #88]	; (31b0 <system_init+0x140>)
    3156:	4798      	blx	r3
}
    3158:	bf00      	nop
    315a:	bd80      	pop	{r7, pc}
    315c:	000027d9 	.word	0x000027d9
    3160:	00002769 	.word	0x00002769
    3164:	00002715 	.word	0x00002715
    3168:	00002749 	.word	0x00002749
    316c:	000027a1 	.word	0x000027a1
    3170:	00002839 	.word	0x00002839
    3174:	00002865 	.word	0x00002865
    3178:	00002909 	.word	0x00002909
    317c:	00002a45 	.word	0x00002a45
    3180:	00002a89 	.word	0x00002a89
    3184:	00002b4d 	.word	0x00002b4d
    3188:	00002be5 	.word	0x00002be5
    318c:	00002cb1 	.word	0x00002cb1
    3190:	00002d49 	.word	0x00002d49
    3194:	00002d75 	.word	0x00002d75
    3198:	00002dbd 	.word	0x00002dbd
    319c:	00002e05 	.word	0x00002e05
    31a0:	00002e4d 	.word	0x00002e4d
    31a4:	00002ee1 	.word	0x00002ee1
    31a8:	00002fad 	.word	0x00002fad
    31ac:	00002fe5 	.word	0x00002fe5
    31b0:	0000302d 	.word	0x0000302d

000031b4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    31b4:	b480      	push	{r7}
    31b6:	b085      	sub	sp, #20
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    31bc:	f3ef 8310 	mrs	r3, PRIMASK
    31c0:	60fb      	str	r3, [r7, #12]
  return(result);
    31c2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    31c8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    31ca:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    31ce:	bf00      	nop
    31d0:	3714      	adds	r7, #20
    31d2:	46bd      	mov	sp, r7
    31d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    31d8:	4770      	bx	lr

000031da <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    31da:	b480      	push	{r7}
    31dc:	b085      	sub	sp, #20
    31de:	af00      	add	r7, sp, #0
    31e0:	6078      	str	r0, [r7, #4]
    31e2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    31ec:	68fb      	ldr	r3, [r7, #12]
    31ee:	f383 8810 	msr	PRIMASK, r3
}
    31f2:	bf00      	nop
    31f4:	3714      	adds	r7, #20
    31f6:	46bd      	mov	sp, r7
    31f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    31fc:	4770      	bx	lr

000031fe <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    31fe:	b480      	push	{r7}
    3200:	b083      	sub	sp, #12
    3202:	af00      	add	r7, sp, #0
    3204:	4603      	mov	r3, r0
    3206:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    3208:	88fb      	ldrh	r3, [r7, #6]
    320a:	f003 0303 	and.w	r3, r3, #3
    320e:	2b00      	cmp	r3, #0
    3210:	d001      	beq.n	3216 <leap_year+0x18>
		return false;
    3212:	2300      	movs	r3, #0
    3214:	e000      	b.n	3218 <leap_year+0x1a>
	} else {
		return true;
    3216:	2301      	movs	r3, #1
	}
}
    3218:	4618      	mov	r0, r3
    321a:	370c      	adds	r7, #12
    321c:	46bd      	mov	sp, r7
    321e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3222:	4770      	bx	lr

00003224 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    3224:	b580      	push	{r7, lr}
    3226:	b084      	sub	sp, #16
    3228:	af00      	add	r7, sp, #0
    322a:	6078      	str	r0, [r7, #4]
    322c:	460b      	mov	r3, r1
    322e:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    3230:	2300      	movs	r3, #0
    3232:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	b29b      	uxth	r3, r3
    3238:	4618      	mov	r0, r3
    323a:	4b2f      	ldr	r3, [pc, #188]	; (32f8 <get_secs_in_month+0xd4>)
    323c:	4798      	blx	r3
    323e:	4603      	mov	r3, r0
    3240:	2b00      	cmp	r3, #0
    3242:	d028      	beq.n	3296 <get_secs_in_month+0x72>
		switch (month) {
    3244:	78fb      	ldrb	r3, [r7, #3]
    3246:	3b01      	subs	r3, #1
    3248:	2b0b      	cmp	r3, #11
    324a:	d84c      	bhi.n	32e6 <get_secs_in_month+0xc2>
    324c:	a201      	add	r2, pc, #4	; (adr r2, 3254 <get_secs_in_month+0x30>)
    324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3252:	bf00      	nop
    3254:	00003285 	.word	0x00003285
    3258:	0000328b 	.word	0x0000328b
    325c:	00003285 	.word	0x00003285
    3260:	00003291 	.word	0x00003291
    3264:	00003285 	.word	0x00003285
    3268:	00003291 	.word	0x00003291
    326c:	00003285 	.word	0x00003285
    3270:	00003285 	.word	0x00003285
    3274:	00003291 	.word	0x00003291
    3278:	00003285 	.word	0x00003285
    327c:	00003291 	.word	0x00003291
    3280:	00003285 	.word	0x00003285
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3284:	4b1d      	ldr	r3, [pc, #116]	; (32fc <get_secs_in_month+0xd8>)
    3286:	60fb      	str	r3, [r7, #12]
			break;
    3288:	e030      	b.n	32ec <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    328a:	4b1d      	ldr	r3, [pc, #116]	; (3300 <get_secs_in_month+0xdc>)
    328c:	60fb      	str	r3, [r7, #12]
			break;
    328e:	e02d      	b.n	32ec <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3290:	4b1c      	ldr	r3, [pc, #112]	; (3304 <get_secs_in_month+0xe0>)
    3292:	60fb      	str	r3, [r7, #12]
			break;
    3294:	e02a      	b.n	32ec <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    3296:	78fb      	ldrb	r3, [r7, #3]
    3298:	3b01      	subs	r3, #1
    329a:	2b0b      	cmp	r3, #11
    329c:	d825      	bhi.n	32ea <get_secs_in_month+0xc6>
    329e:	a201      	add	r2, pc, #4	; (adr r2, 32a4 <get_secs_in_month+0x80>)
    32a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    32a4:	000032d5 	.word	0x000032d5
    32a8:	000032db 	.word	0x000032db
    32ac:	000032d5 	.word	0x000032d5
    32b0:	000032e1 	.word	0x000032e1
    32b4:	000032d5 	.word	0x000032d5
    32b8:	000032e1 	.word	0x000032e1
    32bc:	000032d5 	.word	0x000032d5
    32c0:	000032d5 	.word	0x000032d5
    32c4:	000032e1 	.word	0x000032e1
    32c8:	000032d5 	.word	0x000032d5
    32cc:	000032e1 	.word	0x000032e1
    32d0:	000032d5 	.word	0x000032d5
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    32d4:	4b09      	ldr	r3, [pc, #36]	; (32fc <get_secs_in_month+0xd8>)
    32d6:	60fb      	str	r3, [r7, #12]
			break;
    32d8:	e008      	b.n	32ec <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    32da:	4b0b      	ldr	r3, [pc, #44]	; (3308 <get_secs_in_month+0xe4>)
    32dc:	60fb      	str	r3, [r7, #12]
			break;
    32de:	e005      	b.n	32ec <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    32e0:	4b08      	ldr	r3, [pc, #32]	; (3304 <get_secs_in_month+0xe0>)
    32e2:	60fb      	str	r3, [r7, #12]
			break;
    32e4:	e002      	b.n	32ec <get_secs_in_month+0xc8>
			break;
    32e6:	bf00      	nop
    32e8:	e000      	b.n	32ec <get_secs_in_month+0xc8>
		default:
			break;
    32ea:	bf00      	nop
		}
	}

	return sec_in_month;
    32ec:	68fb      	ldr	r3, [r7, #12]
}
    32ee:	4618      	mov	r0, r3
    32f0:	3710      	adds	r7, #16
    32f2:	46bd      	mov	sp, r7
    32f4:	bd80      	pop	{r7, pc}
    32f6:	bf00      	nop
    32f8:	000031ff 	.word	0x000031ff
    32fc:	0028de80 	.word	0x0028de80
    3300:	00263b80 	.word	0x00263b80
    3304:	00278d00 	.word	0x00278d00
    3308:	0024ea00 	.word	0x0024ea00

0000330c <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    330c:	b580      	push	{r7, lr}
    330e:	b08a      	sub	sp, #40	; 0x28
    3310:	af00      	add	r7, sp, #0
    3312:	60f8      	str	r0, [r7, #12]
    3314:	60b9      	str	r1, [r7, #8]
    3316:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    3318:	68fb      	ldr	r3, [r7, #12]
    331a:	699b      	ldr	r3, [r3, #24]
    331c:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    331e:	2301      	movs	r3, #1
    3320:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    3322:	2301      	movs	r3, #1
    3324:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    3326:	2300      	movs	r3, #0
    3328:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    332a:	2300      	movs	r3, #0
    332c:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    332e:	68bb      	ldr	r3, [r7, #8]
    3330:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    3332:	6a3b      	ldr	r3, [r7, #32]
    3334:	b29b      	uxth	r3, r3
    3336:	4618      	mov	r0, r3
    3338:	4b32      	ldr	r3, [pc, #200]	; (3404 <convert_timestamp_to_datetime+0xf8>)
    333a:	4798      	blx	r3
    333c:	4603      	mov	r3, r0
    333e:	2b00      	cmp	r3, #0
    3340:	d001      	beq.n	3346 <convert_timestamp_to_datetime+0x3a>
    3342:	4b31      	ldr	r3, [pc, #196]	; (3408 <convert_timestamp_to_datetime+0xfc>)
    3344:	e000      	b.n	3348 <convert_timestamp_to_datetime+0x3c>
    3346:	4b31      	ldr	r3, [pc, #196]	; (340c <convert_timestamp_to_datetime+0x100>)
    3348:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    334c:	69bb      	ldr	r3, [r7, #24]
    334e:	429a      	cmp	r2, r3
    3350:	d307      	bcc.n	3362 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    3352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3354:	69bb      	ldr	r3, [r7, #24]
    3356:	1ad3      	subs	r3, r2, r3
    3358:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    335a:	6a3b      	ldr	r3, [r7, #32]
    335c:	3301      	adds	r3, #1
    335e:	623b      	str	r3, [r7, #32]
    3360:	e7e7      	b.n	3332 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    3362:	7ffb      	ldrb	r3, [r7, #31]
    3364:	4619      	mov	r1, r3
    3366:	6a38      	ldr	r0, [r7, #32]
    3368:	4b29      	ldr	r3, [pc, #164]	; (3410 <convert_timestamp_to_datetime+0x104>)
    336a:	4798      	blx	r3
    336c:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3370:	697b      	ldr	r3, [r7, #20]
    3372:	429a      	cmp	r2, r3
    3374:	d307      	bcc.n	3386 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    3376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3378:	697b      	ldr	r3, [r7, #20]
    337a:	1ad3      	subs	r3, r2, r3
    337c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    337e:	7ffb      	ldrb	r3, [r7, #31]
    3380:	3301      	adds	r3, #1
    3382:	77fb      	strb	r3, [r7, #31]
    3384:	e7ed      	b.n	3362 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    3386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3388:	4a22      	ldr	r2, [pc, #136]	; (3414 <convert_timestamp_to_datetime+0x108>)
    338a:	4293      	cmp	r3, r2
    338c:	d909      	bls.n	33a2 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3390:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    3394:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    3398:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    339a:	7fbb      	ldrb	r3, [r7, #30]
    339c:	3301      	adds	r3, #1
    339e:	77bb      	strb	r3, [r7, #30]
    33a0:	e7f1      	b.n	3386 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    33a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33a4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    33a8:	d307      	bcc.n	33ba <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    33aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33ac:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    33b0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    33b2:	7f7b      	ldrb	r3, [r7, #29]
    33b4:	3301      	adds	r3, #1
    33b6:	777b      	strb	r3, [r7, #29]
    33b8:	e7f3      	b.n	33a2 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    33ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33bc:	2b3b      	cmp	r3, #59	; 0x3b
    33be:	d906      	bls.n	33ce <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    33c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33c2:	3b3c      	subs	r3, #60	; 0x3c
    33c4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    33c6:	7f3b      	ldrb	r3, [r7, #28]
    33c8:	3301      	adds	r3, #1
    33ca:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    33cc:	e7f5      	b.n	33ba <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    33ce:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    33d0:	6a3b      	ldr	r3, [r7, #32]
    33d2:	b29a      	uxth	r2, r3
    33d4:	687b      	ldr	r3, [r7, #4]
    33d6:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	7ffa      	ldrb	r2, [r7, #31]
    33dc:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	7fba      	ldrb	r2, [r7, #30]
    33e2:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    33e4:	687b      	ldr	r3, [r7, #4]
    33e6:	7f7a      	ldrb	r2, [r7, #29]
    33e8:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    33ea:	687b      	ldr	r3, [r7, #4]
    33ec:	7f3a      	ldrb	r2, [r7, #28]
    33ee:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    33f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33f2:	b2da      	uxtb	r2, r3
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    33f8:	2300      	movs	r3, #0
}
    33fa:	4618      	mov	r0, r3
    33fc:	3728      	adds	r7, #40	; 0x28
    33fe:	46bd      	mov	sp, r7
    3400:	bd80      	pop	{r7, pc}
    3402:	bf00      	nop
    3404:	000031ff 	.word	0x000031ff
    3408:	01e28500 	.word	0x01e28500
    340c:	01e13380 	.word	0x01e13380
    3410:	00003225 	.word	0x00003225
    3414:	0001517f 	.word	0x0001517f

00003418 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    3418:	b580      	push	{r7, lr}
    341a:	b084      	sub	sp, #16
    341c:	af00      	add	r7, sp, #0
    341e:	6078      	str	r0, [r7, #4]
    3420:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    3422:	2300      	movs	r3, #0
    3424:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	2b00      	cmp	r3, #0
    342a:	bf14      	ite	ne
    342c:	2301      	movne	r3, #1
    342e:	2300      	moveq	r3, #0
    3430:	b2db      	uxtb	r3, r3
    3432:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3436:	4911      	ldr	r1, [pc, #68]	; (347c <calendar_init+0x64>)
    3438:	4618      	mov	r0, r3
    343a:	4b11      	ldr	r3, [pc, #68]	; (3480 <calendar_init+0x68>)
    343c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	681a      	ldr	r2, [r3, #0]
    3442:	683b      	ldr	r3, [r7, #0]
    3444:	429a      	cmp	r2, r3
    3446:	d101      	bne.n	344c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    3448:	2300      	movs	r3, #0
    344a:	e013      	b.n	3474 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	681b      	ldr	r3, [r3, #0]
    3450:	2b00      	cmp	r3, #0
    3452:	d002      	beq.n	345a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    3454:	f06f 0311 	mvn.w	r3, #17
    3458:	e00c      	b.n	3474 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    345a:	687b      	ldr	r3, [r7, #4]
    345c:	683a      	ldr	r2, [r7, #0]
    345e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    3460:	687b      	ldr	r3, [r7, #4]
    3462:	4618      	mov	r0, r3
    3464:	4b07      	ldr	r3, [pc, #28]	; (3484 <calendar_init+0x6c>)
    3466:	4798      	blx	r3
    3468:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    346a:	687b      	ldr	r3, [r7, #4]
    346c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    3470:	619a      	str	r2, [r3, #24]

	return ret;
    3472:	68fb      	ldr	r3, [r7, #12]
}
    3474:	4618      	mov	r0, r3
    3476:	3710      	adds	r7, #16
    3478:	46bd      	mov	sp, r7
    347a:	bd80      	pop	{r7, pc}
    347c:	000112fc 	.word	0x000112fc
    3480:	00004f51 	.word	0x00004f51
    3484:	000070d5 	.word	0x000070d5

00003488 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    3488:	b580      	push	{r7, lr}
    348a:	b084      	sub	sp, #16
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
    3490:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	2b00      	cmp	r3, #0
    3496:	bf14      	ite	ne
    3498:	2301      	movne	r3, #1
    349a:	2300      	moveq	r3, #0
    349c:	b2db      	uxtb	r3, r3
    349e:	f240 223b 	movw	r2, #571	; 0x23b
    34a2:	4909      	ldr	r1, [pc, #36]	; (34c8 <calendar_get_date_time+0x40>)
    34a4:	4618      	mov	r0, r3
    34a6:	4b09      	ldr	r3, [pc, #36]	; (34cc <calendar_get_date_time+0x44>)
    34a8:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	4618      	mov	r0, r3
    34ae:	4b08      	ldr	r3, [pc, #32]	; (34d0 <calendar_get_date_time+0x48>)
    34b0:	4798      	blx	r3
    34b2:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    34b4:	683a      	ldr	r2, [r7, #0]
    34b6:	68f9      	ldr	r1, [r7, #12]
    34b8:	6878      	ldr	r0, [r7, #4]
    34ba:	4b06      	ldr	r3, [pc, #24]	; (34d4 <calendar_get_date_time+0x4c>)
    34bc:	4798      	blx	r3

	return ERR_NONE;
    34be:	2300      	movs	r3, #0
}
    34c0:	4618      	mov	r0, r3
    34c2:	3710      	adds	r7, #16
    34c4:	46bd      	mov	sp, r7
    34c6:	bd80      	pop	{r7, pc}
    34c8:	000112fc 	.word	0x000112fc
    34cc:	00004f51 	.word	0x00004f51
    34d0:	00007199 	.word	0x00007199
    34d4:	0000330d 	.word	0x0000330d

000034d8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    34d8:	b580      	push	{r7, lr}
    34da:	b084      	sub	sp, #16
    34dc:	af00      	add	r7, sp, #0
    34de:	6078      	str	r0, [r7, #4]
    34e0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    34e2:	687b      	ldr	r3, [r7, #4]
    34e4:	2b00      	cmp	r3, #0
    34e6:	d004      	beq.n	34f2 <can_async_init+0x1a>
    34e8:	683b      	ldr	r3, [r7, #0]
    34ea:	2b00      	cmp	r3, #0
    34ec:	d001      	beq.n	34f2 <can_async_init+0x1a>
    34ee:	2301      	movs	r3, #1
    34f0:	e000      	b.n	34f4 <can_async_init+0x1c>
    34f2:	2300      	movs	r3, #0
    34f4:	f003 0301 	and.w	r3, r3, #1
    34f8:	b2db      	uxtb	r3, r3
    34fa:	2241      	movs	r2, #65	; 0x41
    34fc:	490e      	ldr	r1, [pc, #56]	; (3538 <can_async_init+0x60>)
    34fe:	4618      	mov	r0, r3
    3500:	4b0e      	ldr	r3, [pc, #56]	; (353c <can_async_init+0x64>)
    3502:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	6839      	ldr	r1, [r7, #0]
    3508:	4618      	mov	r0, r3
    350a:	4b0d      	ldr	r3, [pc, #52]	; (3540 <can_async_init+0x68>)
    350c:	4798      	blx	r3
    350e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    3510:	68fb      	ldr	r3, [r7, #12]
    3512:	2b00      	cmp	r3, #0
    3514:	d001      	beq.n	351a <can_async_init+0x42>
		return rc;
    3516:	68fb      	ldr	r3, [r7, #12]
    3518:	e009      	b.n	352e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    351a:	687b      	ldr	r3, [r7, #4]
    351c:	4a09      	ldr	r2, [pc, #36]	; (3544 <can_async_init+0x6c>)
    351e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	4a09      	ldr	r2, [pc, #36]	; (3548 <can_async_init+0x70>)
    3524:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	4a08      	ldr	r2, [pc, #32]	; (354c <can_async_init+0x74>)
    352a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    352c:	2300      	movs	r3, #0
}
    352e:	4618      	mov	r0, r3
    3530:	3710      	adds	r7, #16
    3532:	46bd      	mov	sp, r7
    3534:	bd80      	pop	{r7, pc}
    3536:	bf00      	nop
    3538:	00011318 	.word	0x00011318
    353c:	00004f51 	.word	0x00004f51
    3540:	00005445 	.word	0x00005445
    3544:	00003551 	.word	0x00003551
    3548:	00003575 	.word	0x00003575
    354c:	00003599 	.word	0x00003599

00003550 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    3550:	b580      	push	{r7, lr}
    3552:	b084      	sub	sp, #16
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    355c:	68fb      	ldr	r3, [r7, #12]
    355e:	69db      	ldr	r3, [r3, #28]
    3560:	2b00      	cmp	r3, #0
    3562:	d003      	beq.n	356c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    3564:	68fb      	ldr	r3, [r7, #12]
    3566:	69db      	ldr	r3, [r3, #28]
    3568:	68f8      	ldr	r0, [r7, #12]
    356a:	4798      	blx	r3
	}
}
    356c:	bf00      	nop
    356e:	3710      	adds	r7, #16
    3570:	46bd      	mov	sp, r7
    3572:	bd80      	pop	{r7, pc}

00003574 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    3574:	b580      	push	{r7, lr}
    3576:	b084      	sub	sp, #16
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    3580:	68fb      	ldr	r3, [r7, #12]
    3582:	6a1b      	ldr	r3, [r3, #32]
    3584:	2b00      	cmp	r3, #0
    3586:	d003      	beq.n	3590 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    3588:	68fb      	ldr	r3, [r7, #12]
    358a:	6a1b      	ldr	r3, [r3, #32]
    358c:	68f8      	ldr	r0, [r7, #12]
    358e:	4798      	blx	r3
	}
}
    3590:	bf00      	nop
    3592:	3710      	adds	r7, #16
    3594:	46bd      	mov	sp, r7
    3596:	bd80      	pop	{r7, pc}

00003598 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    3598:	b580      	push	{r7, lr}
    359a:	b084      	sub	sp, #16
    359c:	af00      	add	r7, sp, #0
    359e:	6078      	str	r0, [r7, #4]
    35a0:	460b      	mov	r3, r1
    35a2:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    35a8:	68fb      	ldr	r3, [r7, #12]
    35aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35ac:	2b00      	cmp	r3, #0
    35ae:	d005      	beq.n	35bc <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    35b0:	68fb      	ldr	r3, [r7, #12]
    35b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35b4:	78fa      	ldrb	r2, [r7, #3]
    35b6:	4611      	mov	r1, r2
    35b8:	68f8      	ldr	r0, [r7, #12]
    35ba:	4798      	blx	r3
	}
}
    35bc:	bf00      	nop
    35be:	3710      	adds	r7, #16
    35c0:	46bd      	mov	sp, r7
    35c2:	bd80      	pop	{r7, pc}

000035c4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b082      	sub	sp, #8
    35c8:	af00      	add	r7, sp, #0
    35ca:	6078      	str	r0, [r7, #4]
    35cc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	2b00      	cmp	r3, #0
    35d2:	d004      	beq.n	35de <crc_sync_init+0x1a>
    35d4:	683b      	ldr	r3, [r7, #0]
    35d6:	2b00      	cmp	r3, #0
    35d8:	d001      	beq.n	35de <crc_sync_init+0x1a>
    35da:	2301      	movs	r3, #1
    35dc:	e000      	b.n	35e0 <crc_sync_init+0x1c>
    35de:	2300      	movs	r3, #0
    35e0:	f003 0301 	and.w	r3, r3, #1
    35e4:	b2db      	uxtb	r3, r3
    35e6:	222b      	movs	r2, #43	; 0x2b
    35e8:	4906      	ldr	r1, [pc, #24]	; (3604 <crc_sync_init+0x40>)
    35ea:	4618      	mov	r0, r3
    35ec:	4b06      	ldr	r3, [pc, #24]	; (3608 <crc_sync_init+0x44>)
    35ee:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	6839      	ldr	r1, [r7, #0]
    35f4:	4618      	mov	r0, r3
    35f6:	4b05      	ldr	r3, [pc, #20]	; (360c <crc_sync_init+0x48>)
    35f8:	4798      	blx	r3
    35fa:	4603      	mov	r3, r0
}
    35fc:	4618      	mov	r0, r3
    35fe:	3708      	adds	r7, #8
    3600:	46bd      	mov	sp, r7
    3602:	bd80      	pop	{r7, pc}
    3604:	00011334 	.word	0x00011334
    3608:	00004f51 	.word	0x00004f51
    360c:	00005b3d 	.word	0x00005b3d

00003610 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    3610:	b590      	push	{r4, r7, lr}
    3612:	b083      	sub	sp, #12
    3614:	af00      	add	r7, sp, #0
    3616:	4603      	mov	r3, r0
    3618:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    361a:	4b07      	ldr	r3, [pc, #28]	; (3638 <delay_us+0x28>)
    361c:	681c      	ldr	r4, [r3, #0]
    361e:	88fb      	ldrh	r3, [r7, #6]
    3620:	4618      	mov	r0, r3
    3622:	4b06      	ldr	r3, [pc, #24]	; (363c <delay_us+0x2c>)
    3624:	4798      	blx	r3
    3626:	4603      	mov	r3, r0
    3628:	4619      	mov	r1, r3
    362a:	4620      	mov	r0, r4
    362c:	4b04      	ldr	r3, [pc, #16]	; (3640 <delay_us+0x30>)
    362e:	4798      	blx	r3
}
    3630:	bf00      	nop
    3632:	370c      	adds	r7, #12
    3634:	46bd      	mov	sp, r7
    3636:	bd90      	pop	{r4, r7, pc}
    3638:	20001bbc 	.word	0x20001bbc
    363c:	00005891 	.word	0x00005891
    3640:	00005a29 	.word	0x00005a29

00003644 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3644:	b590      	push	{r4, r7, lr}
    3646:	b083      	sub	sp, #12
    3648:	af00      	add	r7, sp, #0
    364a:	4603      	mov	r3, r0
    364c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    364e:	4b07      	ldr	r3, [pc, #28]	; (366c <delay_ms+0x28>)
    3650:	681c      	ldr	r4, [r3, #0]
    3652:	88fb      	ldrh	r3, [r7, #6]
    3654:	4618      	mov	r0, r3
    3656:	4b06      	ldr	r3, [pc, #24]	; (3670 <delay_ms+0x2c>)
    3658:	4798      	blx	r3
    365a:	4603      	mov	r3, r0
    365c:	4619      	mov	r1, r3
    365e:	4620      	mov	r0, r4
    3660:	4b04      	ldr	r3, [pc, #16]	; (3674 <delay_ms+0x30>)
    3662:	4798      	blx	r3
}
    3664:	bf00      	nop
    3666:	370c      	adds	r7, #12
    3668:	46bd      	mov	sp, r7
    366a:	bd90      	pop	{r4, r7, pc}
    366c:	20001bbc 	.word	0x20001bbc
    3670:	000059fd 	.word	0x000059fd
    3674:	00005a29 	.word	0x00005a29

00003678 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    3678:	b580      	push	{r7, lr}
    367a:	af00      	add	r7, sp, #0
	return _event_system_init();
    367c:	4b02      	ldr	r3, [pc, #8]	; (3688 <event_system_init+0x10>)
    367e:	4798      	blx	r3
    3680:	4603      	mov	r3, r0
}
    3682:	4618      	mov	r0, r3
    3684:	bd80      	pop	{r7, pc}
    3686:	bf00      	nop
    3688:	00006171 	.word	0x00006171

0000368c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    368c:	b580      	push	{r7, lr}
    368e:	b082      	sub	sp, #8
    3690:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3692:	2300      	movs	r3, #0
    3694:	80fb      	strh	r3, [r7, #6]
    3696:	e00e      	b.n	36b6 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    3698:	88fb      	ldrh	r3, [r7, #6]
    369a:	4a0c      	ldr	r2, [pc, #48]	; (36cc <ext_irq_init+0x40>)
    369c:	00db      	lsls	r3, r3, #3
    369e:	4413      	add	r3, r2
    36a0:	f04f 32ff 	mov.w	r2, #4294967295
    36a4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    36a6:	88fb      	ldrh	r3, [r7, #6]
    36a8:	4a08      	ldr	r2, [pc, #32]	; (36cc <ext_irq_init+0x40>)
    36aa:	2100      	movs	r1, #0
    36ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    36b0:	88fb      	ldrh	r3, [r7, #6]
    36b2:	3301      	adds	r3, #1
    36b4:	80fb      	strh	r3, [r7, #6]
    36b6:	88fb      	ldrh	r3, [r7, #6]
    36b8:	2b03      	cmp	r3, #3
    36ba:	d9ed      	bls.n	3698 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    36bc:	4804      	ldr	r0, [pc, #16]	; (36d0 <ext_irq_init+0x44>)
    36be:	4b05      	ldr	r3, [pc, #20]	; (36d4 <ext_irq_init+0x48>)
    36c0:	4798      	blx	r3
    36c2:	4603      	mov	r3, r0
}
    36c4:	4618      	mov	r0, r3
    36c6:	3708      	adds	r7, #8
    36c8:	46bd      	mov	sp, r7
    36ca:	bd80      	pop	{r7, pc}
    36cc:	20001bc0 	.word	0x20001bc0
    36d0:	000036d9 	.word	0x000036d9
    36d4:	00005e45 	.word	0x00005e45

000036d8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    36d8:	b580      	push	{r7, lr}
    36da:	b084      	sub	sp, #16
    36dc:	af00      	add	r7, sp, #0
    36de:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    36e0:	2300      	movs	r3, #0
    36e2:	73fb      	strb	r3, [r7, #15]
    36e4:	2304      	movs	r3, #4
    36e6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    36e8:	e02a      	b.n	3740 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    36ea:	7bba      	ldrb	r2, [r7, #14]
    36ec:	7bfb      	ldrb	r3, [r7, #15]
    36ee:	4413      	add	r3, r2
    36f0:	105b      	asrs	r3, r3, #1
    36f2:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    36f4:	7b7b      	ldrb	r3, [r7, #13]
    36f6:	2b03      	cmp	r3, #3
    36f8:	d827      	bhi.n	374a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    36fa:	7b7b      	ldrb	r3, [r7, #13]
    36fc:	4a16      	ldr	r2, [pc, #88]	; (3758 <process_ext_irq+0x80>)
    36fe:	00db      	lsls	r3, r3, #3
    3700:	4413      	add	r3, r2
    3702:	685a      	ldr	r2, [r3, #4]
    3704:	687b      	ldr	r3, [r7, #4]
    3706:	429a      	cmp	r2, r3
    3708:	d10b      	bne.n	3722 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    370a:	7b7b      	ldrb	r3, [r7, #13]
    370c:	4a12      	ldr	r2, [pc, #72]	; (3758 <process_ext_irq+0x80>)
    370e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3712:	2b00      	cmp	r3, #0
    3714:	d01b      	beq.n	374e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    3716:	7b7b      	ldrb	r3, [r7, #13]
    3718:	4a0f      	ldr	r2, [pc, #60]	; (3758 <process_ext_irq+0x80>)
    371a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    371e:	4798      	blx	r3
			}
			return;
    3720:	e015      	b.n	374e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    3722:	7b7b      	ldrb	r3, [r7, #13]
    3724:	4a0c      	ldr	r2, [pc, #48]	; (3758 <process_ext_irq+0x80>)
    3726:	00db      	lsls	r3, r3, #3
    3728:	4413      	add	r3, r2
    372a:	685a      	ldr	r2, [r3, #4]
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	429a      	cmp	r2, r3
    3730:	d203      	bcs.n	373a <process_ext_irq+0x62>
			lower = middle + 1;
    3732:	7b7b      	ldrb	r3, [r7, #13]
    3734:	3301      	adds	r3, #1
    3736:	73fb      	strb	r3, [r7, #15]
    3738:	e002      	b.n	3740 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    373a:	7b7b      	ldrb	r3, [r7, #13]
    373c:	3b01      	subs	r3, #1
    373e:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    3740:	7bba      	ldrb	r2, [r7, #14]
    3742:	7bfb      	ldrb	r3, [r7, #15]
    3744:	429a      	cmp	r2, r3
    3746:	d2d0      	bcs.n	36ea <process_ext_irq+0x12>
    3748:	e002      	b.n	3750 <process_ext_irq+0x78>
			return;
    374a:	bf00      	nop
    374c:	e000      	b.n	3750 <process_ext_irq+0x78>
			return;
    374e:	bf00      	nop
		}
	}
}
    3750:	3710      	adds	r7, #16
    3752:	46bd      	mov	sp, r7
    3754:	bd80      	pop	{r7, pc}
    3756:	bf00      	nop
    3758:	20001bc0 	.word	0x20001bc0

0000375c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    375c:	b580      	push	{r7, lr}
    375e:	b084      	sub	sp, #16
    3760:	af00      	add	r7, sp, #0
    3762:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    3764:	687b      	ldr	r3, [r7, #4]
    3766:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	885b      	ldrh	r3, [r3, #2]
    376c:	b29b      	uxth	r3, r3
    376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3772:	2b00      	cmp	r3, #0
    3774:	d107      	bne.n	3786 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    3776:	68fb      	ldr	r3, [r7, #12]
    3778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    377a:	2b00      	cmp	r3, #0
    377c:	d003      	beq.n	3786 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    377e:	68fb      	ldr	r3, [r7, #12]
    3780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3782:	68f8      	ldr	r0, [r7, #12]
    3784:	4798      	blx	r3
		}
	}
}
    3786:	bf00      	nop
    3788:	3710      	adds	r7, #16
    378a:	46bd      	mov	sp, r7
    378c:	bd80      	pop	{r7, pc}

0000378e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    378e:	b580      	push	{r7, lr}
    3790:	b084      	sub	sp, #16
    3792:	af00      	add	r7, sp, #0
    3794:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	885b      	ldrh	r3, [r3, #2]
    379e:	b29b      	uxth	r3, r3
    37a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    37a4:	2b00      	cmp	r3, #0
    37a6:	d107      	bne.n	37b8 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    37a8:	68fb      	ldr	r3, [r7, #12]
    37aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    37ac:	2b00      	cmp	r3, #0
    37ae:	d003      	beq.n	37b8 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    37b0:	68fb      	ldr	r3, [r7, #12]
    37b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    37b4:	68f8      	ldr	r0, [r7, #12]
    37b6:	4798      	blx	r3
		}
	}
}
    37b8:	bf00      	nop
    37ba:	3710      	adds	r7, #16
    37bc:	46bd      	mov	sp, r7
    37be:	bd80      	pop	{r7, pc}

000037c0 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    37c0:	b580      	push	{r7, lr}
    37c2:	b084      	sub	sp, #16
    37c4:	af00      	add	r7, sp, #0
    37c6:	6078      	str	r0, [r7, #4]
    37c8:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    37ce:	687b      	ldr	r3, [r7, #4]
    37d0:	885b      	ldrh	r3, [r3, #2]
    37d2:	b29b      	uxth	r3, r3
    37d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    37d8:	2b00      	cmp	r3, #0
    37da:	d108      	bne.n	37ee <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    37dc:	68fb      	ldr	r3, [r7, #12]
    37de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    37e0:	2b00      	cmp	r3, #0
    37e2:	d004      	beq.n	37ee <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    37e4:	68fb      	ldr	r3, [r7, #12]
    37e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    37e8:	6839      	ldr	r1, [r7, #0]
    37ea:	68f8      	ldr	r0, [r7, #12]
    37ec:	4798      	blx	r3
		}
	}
}
    37ee:	bf00      	nop
    37f0:	3710      	adds	r7, #16
    37f2:	46bd      	mov	sp, r7
    37f4:	bd80      	pop	{r7, pc}
	...

000037f8 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    37f8:	b580      	push	{r7, lr}
    37fa:	b08a      	sub	sp, #40	; 0x28
    37fc:	af00      	add	r7, sp, #0
    37fe:	60f8      	str	r0, [r7, #12]
    3800:	60b9      	str	r1, [r7, #8]
    3802:	4613      	mov	r3, r2
    3804:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    3806:	68fb      	ldr	r3, [r7, #12]
    3808:	3b28      	subs	r3, #40	; 0x28
    380a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    380e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    3810:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    3812:	88fb      	ldrh	r3, [r7, #6]
    3814:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    3816:	f248 0301 	movw	r3, #32769	; 0x8001
    381a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    381c:	68bb      	ldr	r3, [r7, #8]
    381e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    3820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3822:	f107 0214 	add.w	r2, r7, #20
    3826:	4611      	mov	r1, r2
    3828:	4618      	mov	r0, r3
    382a:	4b06      	ldr	r3, [pc, #24]	; (3844 <i2c_m_async_read+0x4c>)
    382c:	4798      	blx	r3
    382e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    3830:	6a3b      	ldr	r3, [r7, #32]
    3832:	2b00      	cmp	r3, #0
    3834:	d001      	beq.n	383a <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    3836:	6a3b      	ldr	r3, [r7, #32]
    3838:	e000      	b.n	383c <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    383a:	88fb      	ldrh	r3, [r7, #6]
}
    383c:	4618      	mov	r0, r3
    383e:	3728      	adds	r7, #40	; 0x28
    3840:	46bd      	mov	sp, r7
    3842:	bd80      	pop	{r7, pc}
    3844:	00008119 	.word	0x00008119

00003848 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    3848:	b580      	push	{r7, lr}
    384a:	b08a      	sub	sp, #40	; 0x28
    384c:	af00      	add	r7, sp, #0
    384e:	60f8      	str	r0, [r7, #12]
    3850:	60b9      	str	r1, [r7, #8]
    3852:	4613      	mov	r3, r2
    3854:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	3b28      	subs	r3, #40	; 0x28
    385a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    385e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    3860:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    3862:	88fb      	ldrh	r3, [r7, #6]
    3864:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    3866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    386a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    386c:	68bb      	ldr	r3, [r7, #8]
    386e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    3870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3872:	f107 0214 	add.w	r2, r7, #20
    3876:	4611      	mov	r1, r2
    3878:	4618      	mov	r0, r3
    387a:	4b06      	ldr	r3, [pc, #24]	; (3894 <i2c_m_async_write+0x4c>)
    387c:	4798      	blx	r3
    387e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    3880:	6a3b      	ldr	r3, [r7, #32]
    3882:	2b00      	cmp	r3, #0
    3884:	d001      	beq.n	388a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    3886:	6a3b      	ldr	r3, [r7, #32]
    3888:	e000      	b.n	388c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    388a:	88fb      	ldrh	r3, [r7, #6]
}
    388c:	4618      	mov	r0, r3
    388e:	3728      	adds	r7, #40	; 0x28
    3890:	46bd      	mov	sp, r7
    3892:	bd80      	pop	{r7, pc}
    3894:	00008119 	.word	0x00008119

00003898 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    3898:	b580      	push	{r7, lr}
    389a:	b084      	sub	sp, #16
    389c:	af00      	add	r7, sp, #0
    389e:	6078      	str	r0, [r7, #4]
    38a0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	2b00      	cmp	r3, #0
    38a6:	bf14      	ite	ne
    38a8:	2301      	movne	r3, #1
    38aa:	2300      	moveq	r3, #0
    38ac:	b2db      	uxtb	r3, r3
    38ae:	2289      	movs	r2, #137	; 0x89
    38b0:	4915      	ldr	r1, [pc, #84]	; (3908 <i2c_m_async_init+0x70>)
    38b2:	4618      	mov	r0, r3
    38b4:	4b15      	ldr	r3, [pc, #84]	; (390c <i2c_m_async_init+0x74>)
    38b6:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	6839      	ldr	r1, [r7, #0]
    38bc:	4618      	mov	r0, r3
    38be:	4b14      	ldr	r3, [pc, #80]	; (3910 <i2c_m_async_init+0x78>)
    38c0:	4798      	blx	r3
    38c2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    38c4:	68fb      	ldr	r3, [r7, #12]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d001      	beq.n	38ce <i2c_m_async_init+0x36>
		return init_status;
    38ca:	68fb      	ldr	r3, [r7, #12]
    38cc:	e018      	b.n	3900 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    38ce:	687b      	ldr	r3, [r7, #4]
    38d0:	4a10      	ldr	r2, [pc, #64]	; (3914 <i2c_m_async_init+0x7c>)
    38d2:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    38d4:	687b      	ldr	r3, [r7, #4]
    38d6:	4a10      	ldr	r2, [pc, #64]	; (3918 <i2c_m_async_init+0x80>)
    38d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	4a0f      	ldr	r2, [pc, #60]	; (391c <i2c_m_async_init+0x84>)
    38de:	2101      	movs	r1, #1
    38e0:	4618      	mov	r0, r3
    38e2:	4b0f      	ldr	r3, [pc, #60]	; (3920 <i2c_m_async_init+0x88>)
    38e4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	4a0e      	ldr	r2, [pc, #56]	; (3924 <i2c_m_async_init+0x8c>)
    38ea:	2102      	movs	r1, #2
    38ec:	4618      	mov	r0, r3
    38ee:	4b0c      	ldr	r3, [pc, #48]	; (3920 <i2c_m_async_init+0x88>)
    38f0:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	4a0c      	ldr	r2, [pc, #48]	; (3928 <i2c_m_async_init+0x90>)
    38f6:	2100      	movs	r1, #0
    38f8:	4618      	mov	r0, r3
    38fa:	4b09      	ldr	r3, [pc, #36]	; (3920 <i2c_m_async_init+0x88>)
    38fc:	4798      	blx	r3

	return ERR_NONE;
    38fe:	2300      	movs	r3, #0
}
    3900:	4618      	mov	r0, r3
    3902:	3710      	adds	r7, #16
    3904:	46bd      	mov	sp, r7
    3906:	bd80      	pop	{r7, pc}
    3908:	00011350 	.word	0x00011350
    390c:	00004f51 	.word	0x00004f51
    3910:	00007f69 	.word	0x00007f69
    3914:	000037f9 	.word	0x000037f9
    3918:	00003849 	.word	0x00003849
    391c:	0000375d 	.word	0x0000375d
    3920:	000081ed 	.word	0x000081ed
    3924:	0000378f 	.word	0x0000378f
    3928:	000037c1 	.word	0x000037c1

0000392c <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    392c:	b580      	push	{r7, lr}
    392e:	b084      	sub	sp, #16
    3930:	af00      	add	r7, sp, #0
    3932:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	2b00      	cmp	r3, #0
    3938:	bf14      	ite	ne
    393a:	2301      	movne	r3, #1
    393c:	2300      	moveq	r3, #0
    393e:	b2db      	uxtb	r3, r3
    3940:	22b9      	movs	r2, #185	; 0xb9
    3942:	4911      	ldr	r1, [pc, #68]	; (3988 <i2c_m_async_enable+0x5c>)
    3944:	4618      	mov	r0, r3
    3946:	4b11      	ldr	r3, [pc, #68]	; (398c <i2c_m_async_enable+0x60>)
    3948:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    394a:	687b      	ldr	r3, [r7, #4]
    394c:	4618      	mov	r0, r3
    394e:	4b10      	ldr	r3, [pc, #64]	; (3990 <i2c_m_async_enable+0x64>)
    3950:	4798      	blx	r3
    3952:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    3954:	68fb      	ldr	r3, [r7, #12]
    3956:	2b00      	cmp	r3, #0
    3958:	d111      	bne.n	397e <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    395a:	687b      	ldr	r3, [r7, #4]
    395c:	2201      	movs	r2, #1
    395e:	2101      	movs	r1, #1
    3960:	4618      	mov	r0, r3
    3962:	4b0c      	ldr	r3, [pc, #48]	; (3994 <i2c_m_async_enable+0x68>)
    3964:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	2201      	movs	r2, #1
    396a:	2102      	movs	r1, #2
    396c:	4618      	mov	r0, r3
    396e:	4b09      	ldr	r3, [pc, #36]	; (3994 <i2c_m_async_enable+0x68>)
    3970:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    3972:	687b      	ldr	r3, [r7, #4]
    3974:	2201      	movs	r2, #1
    3976:	2100      	movs	r1, #0
    3978:	4618      	mov	r0, r3
    397a:	4b06      	ldr	r3, [pc, #24]	; (3994 <i2c_m_async_enable+0x68>)
    397c:	4798      	blx	r3
	}
	return rc;
    397e:	68fb      	ldr	r3, [r7, #12]
}
    3980:	4618      	mov	r0, r3
    3982:	3710      	adds	r7, #16
    3984:	46bd      	mov	sp, r7
    3986:	bd80      	pop	{r7, pc}
    3988:	00011350 	.word	0x00011350
    398c:	00004f51 	.word	0x00004f51
    3990:	00007f05 	.word	0x00007f05
    3994:	00008231 	.word	0x00008231

00003998 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    3998:	b480      	push	{r7}
    399a:	b085      	sub	sp, #20
    399c:	af00      	add	r7, sp, #0
    399e:	60f8      	str	r0, [r7, #12]
    39a0:	460b      	mov	r3, r1
    39a2:	607a      	str	r2, [r7, #4]
    39a4:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    39a6:	897b      	ldrh	r3, [r7, #10]
    39a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    39ac:	b21a      	sxth	r2, r3
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	b21b      	sxth	r3, r3
    39b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    39b6:	b21b      	sxth	r3, r3
    39b8:	4313      	orrs	r3, r2
    39ba:	b21b      	sxth	r3, r3
    39bc:	b29a      	uxth	r2, r3
    39be:	68fb      	ldr	r3, [r7, #12]
    39c0:	879a      	strh	r2, [r3, #60]	; 0x3c
    39c2:	68fb      	ldr	r3, [r7, #12]
    39c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    39c6:	4618      	mov	r0, r3
    39c8:	3714      	adds	r7, #20
    39ca:	46bd      	mov	sp, r7
    39cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    39d0:	4770      	bx	lr

000039d2 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    39d2:	b480      	push	{r7}
    39d4:	b085      	sub	sp, #20
    39d6:	af00      	add	r7, sp, #0
    39d8:	60f8      	str	r0, [r7, #12]
    39da:	460b      	mov	r3, r1
    39dc:	607a      	str	r2, [r7, #4]
    39de:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    39e0:	7afb      	ldrb	r3, [r7, #11]
    39e2:	2b01      	cmp	r3, #1
    39e4:	d007      	beq.n	39f6 <i2c_m_async_register_callback+0x24>
    39e6:	2b02      	cmp	r3, #2
    39e8:	d009      	beq.n	39fe <i2c_m_async_register_callback+0x2c>
    39ea:	2b00      	cmp	r3, #0
    39ec:	d10b      	bne.n	3a06 <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	687a      	ldr	r2, [r7, #4]
    39f2:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    39f4:	e00a      	b.n	3a0c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    39f6:	68fb      	ldr	r3, [r7, #12]
    39f8:	687a      	ldr	r2, [r7, #4]
    39fa:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    39fc:	e006      	b.n	3a0c <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    39fe:	68fb      	ldr	r3, [r7, #12]
    3a00:	687a      	ldr	r2, [r7, #4]
    3a02:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    3a04:	e002      	b.n	3a0c <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    3a06:	f06f 030c 	mvn.w	r3, #12
    3a0a:	e000      	b.n	3a0e <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    3a0c:	2300      	movs	r3, #0
}
    3a0e:	4618      	mov	r0, r3
    3a10:	3714      	adds	r7, #20
    3a12:	46bd      	mov	sp, r7
    3a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a18:	4770      	bx	lr

00003a1a <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    3a1a:	b480      	push	{r7}
    3a1c:	b083      	sub	sp, #12
    3a1e:	af00      	add	r7, sp, #0
    3a20:	6078      	str	r0, [r7, #4]
    3a22:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    3a24:	687b      	ldr	r3, [r7, #4]
    3a26:	f103 0228 	add.w	r2, r3, #40	; 0x28
    3a2a:	683b      	ldr	r3, [r7, #0]
    3a2c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    3a2e:	2300      	movs	r3, #0
}
    3a30:	4618      	mov	r0, r3
    3a32:	370c      	adds	r7, #12
    3a34:	46bd      	mov	sp, r7
    3a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a3a:	4770      	bx	lr

00003a3c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    3a3c:	b580      	push	{r7, lr}
    3a3e:	b084      	sub	sp, #16
    3a40:	af00      	add	r7, sp, #0
    3a42:	60f8      	str	r0, [r7, #12]
    3a44:	60b9      	str	r1, [r7, #8]
    3a46:	4613      	mov	r3, r2
    3a48:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    3a4a:	68fb      	ldr	r3, [r7, #12]
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d004      	beq.n	3a5a <io_write+0x1e>
    3a50:	68bb      	ldr	r3, [r7, #8]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d001      	beq.n	3a5a <io_write+0x1e>
    3a56:	2301      	movs	r3, #1
    3a58:	e000      	b.n	3a5c <io_write+0x20>
    3a5a:	2300      	movs	r3, #0
    3a5c:	f003 0301 	and.w	r3, r3, #1
    3a60:	b2db      	uxtb	r3, r3
    3a62:	2234      	movs	r2, #52	; 0x34
    3a64:	4907      	ldr	r1, [pc, #28]	; (3a84 <io_write+0x48>)
    3a66:	4618      	mov	r0, r3
    3a68:	4b07      	ldr	r3, [pc, #28]	; (3a88 <io_write+0x4c>)
    3a6a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    3a6c:	68fb      	ldr	r3, [r7, #12]
    3a6e:	681b      	ldr	r3, [r3, #0]
    3a70:	88fa      	ldrh	r2, [r7, #6]
    3a72:	68b9      	ldr	r1, [r7, #8]
    3a74:	68f8      	ldr	r0, [r7, #12]
    3a76:	4798      	blx	r3
    3a78:	4603      	mov	r3, r0
}
    3a7a:	4618      	mov	r0, r3
    3a7c:	3710      	adds	r7, #16
    3a7e:	46bd      	mov	sp, r7
    3a80:	bd80      	pop	{r7, pc}
    3a82:	bf00      	nop
    3a84:	00011370 	.word	0x00011370
    3a88:	00004f51 	.word	0x00004f51

00003a8c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	b084      	sub	sp, #16
    3a90:	af00      	add	r7, sp, #0
    3a92:	60f8      	str	r0, [r7, #12]
    3a94:	60b9      	str	r1, [r7, #8]
    3a96:	4613      	mov	r3, r2
    3a98:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    3a9a:	68fb      	ldr	r3, [r7, #12]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d004      	beq.n	3aaa <io_read+0x1e>
    3aa0:	68bb      	ldr	r3, [r7, #8]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d001      	beq.n	3aaa <io_read+0x1e>
    3aa6:	2301      	movs	r3, #1
    3aa8:	e000      	b.n	3aac <io_read+0x20>
    3aaa:	2300      	movs	r3, #0
    3aac:	f003 0301 	and.w	r3, r3, #1
    3ab0:	b2db      	uxtb	r3, r3
    3ab2:	223d      	movs	r2, #61	; 0x3d
    3ab4:	4907      	ldr	r1, [pc, #28]	; (3ad4 <io_read+0x48>)
    3ab6:	4618      	mov	r0, r3
    3ab8:	4b07      	ldr	r3, [pc, #28]	; (3ad8 <io_read+0x4c>)
    3aba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    3abc:	68fb      	ldr	r3, [r7, #12]
    3abe:	685b      	ldr	r3, [r3, #4]
    3ac0:	88fa      	ldrh	r2, [r7, #6]
    3ac2:	68b9      	ldr	r1, [r7, #8]
    3ac4:	68f8      	ldr	r0, [r7, #12]
    3ac6:	4798      	blx	r3
    3ac8:	4603      	mov	r3, r0
}
    3aca:	4618      	mov	r0, r3
    3acc:	3710      	adds	r7, #16
    3ace:	46bd      	mov	sp, r7
    3ad0:	bd80      	pop	{r7, pc}
    3ad2:	bf00      	nop
    3ad4:	00011370 	.word	0x00011370
    3ad8:	00004f51 	.word	0x00004f51

00003adc <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    3adc:	b580      	push	{r7, lr}
    3ade:	b084      	sub	sp, #16
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	60f8      	str	r0, [r7, #12]
    3ae4:	60b9      	str	r1, [r7, #8]
    3ae6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    3ae8:	68fb      	ldr	r3, [r7, #12]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d004      	beq.n	3af8 <pwm_init+0x1c>
    3aee:	68bb      	ldr	r3, [r7, #8]
    3af0:	2b00      	cmp	r3, #0
    3af2:	d001      	beq.n	3af8 <pwm_init+0x1c>
    3af4:	2301      	movs	r3, #1
    3af6:	e000      	b.n	3afa <pwm_init+0x1e>
    3af8:	2300      	movs	r3, #0
    3afa:	f003 0301 	and.w	r3, r3, #1
    3afe:	b2db      	uxtb	r3, r3
    3b00:	2233      	movs	r2, #51	; 0x33
    3b02:	490a      	ldr	r1, [pc, #40]	; (3b2c <pwm_init+0x50>)
    3b04:	4618      	mov	r0, r3
    3b06:	4b0a      	ldr	r3, [pc, #40]	; (3b30 <pwm_init+0x54>)
    3b08:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    3b0a:	68fb      	ldr	r3, [r7, #12]
    3b0c:	68b9      	ldr	r1, [r7, #8]
    3b0e:	4618      	mov	r0, r3
    3b10:	4b08      	ldr	r3, [pc, #32]	; (3b34 <pwm_init+0x58>)
    3b12:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    3b14:	68fb      	ldr	r3, [r7, #12]
    3b16:	4a08      	ldr	r2, [pc, #32]	; (3b38 <pwm_init+0x5c>)
    3b18:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    3b1a:	68fb      	ldr	r3, [r7, #12]
    3b1c:	4a07      	ldr	r2, [pc, #28]	; (3b3c <pwm_init+0x60>)
    3b1e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    3b20:	2300      	movs	r3, #0
}
    3b22:	4618      	mov	r0, r3
    3b24:	3710      	adds	r7, #16
    3b26:	46bd      	mov	sp, r7
    3b28:	bd80      	pop	{r7, pc}
    3b2a:	bf00      	nop
    3b2c:	00011384 	.word	0x00011384
    3b30:	00004f51 	.word	0x00004f51
    3b34:	0000948d 	.word	0x0000948d
    3b38:	00003b95 	.word	0x00003b95
    3b3c:	00003bb9 	.word	0x00003bb9

00003b40 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b082      	sub	sp, #8
    3b44:	af00      	add	r7, sp, #0
    3b46:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    3b48:	687b      	ldr	r3, [r7, #4]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	bf14      	ite	ne
    3b4e:	2301      	movne	r3, #1
    3b50:	2300      	moveq	r3, #0
    3b52:	b2db      	uxtb	r3, r3
    3b54:	224a      	movs	r2, #74	; 0x4a
    3b56:	490b      	ldr	r1, [pc, #44]	; (3b84 <pwm_enable+0x44>)
    3b58:	4618      	mov	r0, r3
    3b5a:	4b0b      	ldr	r3, [pc, #44]	; (3b88 <pwm_enable+0x48>)
    3b5c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	4618      	mov	r0, r3
    3b62:	4b0a      	ldr	r3, [pc, #40]	; (3b8c <pwm_enable+0x4c>)
    3b64:	4798      	blx	r3
    3b66:	4603      	mov	r3, r0
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d002      	beq.n	3b72 <pwm_enable+0x32>
		return ERR_DENIED;
    3b6c:	f06f 0310 	mvn.w	r3, #16
    3b70:	e004      	b.n	3b7c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	4618      	mov	r0, r3
    3b76:	4b06      	ldr	r3, [pc, #24]	; (3b90 <pwm_enable+0x50>)
    3b78:	4798      	blx	r3

	return ERR_NONE;
    3b7a:	2300      	movs	r3, #0
}
    3b7c:	4618      	mov	r0, r3
    3b7e:	3708      	adds	r7, #8
    3b80:	46bd      	mov	sp, r7
    3b82:	bd80      	pop	{r7, pc}
    3b84:	00011384 	.word	0x00011384
    3b88:	00004f51 	.word	0x00004f51
    3b8c:	00009729 	.word	0x00009729
    3b90:	000096c9 	.word	0x000096c9

00003b94 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    3b94:	b580      	push	{r7, lr}
    3b96:	b084      	sub	sp, #16
    3b98:	af00      	add	r7, sp, #0
    3b9a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3b9c:	687b      	ldr	r3, [r7, #4]
    3b9e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    3ba0:	68fb      	ldr	r3, [r7, #12]
    3ba2:	695b      	ldr	r3, [r3, #20]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d003      	beq.n	3bb0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    3ba8:	68fb      	ldr	r3, [r7, #12]
    3baa:	695b      	ldr	r3, [r3, #20]
    3bac:	68f8      	ldr	r0, [r7, #12]
    3bae:	4798      	blx	r3
	}
}
    3bb0:	bf00      	nop
    3bb2:	3710      	adds	r7, #16
    3bb4:	46bd      	mov	sp, r7
    3bb6:	bd80      	pop	{r7, pc}

00003bb8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b084      	sub	sp, #16
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    3bc4:	68fb      	ldr	r3, [r7, #12]
    3bc6:	699b      	ldr	r3, [r3, #24]
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d003      	beq.n	3bd4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    3bcc:	68fb      	ldr	r3, [r7, #12]
    3bce:	699b      	ldr	r3, [r3, #24]
    3bd0:	68f8      	ldr	r0, [r7, #12]
    3bd2:	4798      	blx	r3
	}
}
    3bd4:	bf00      	nop
    3bd6:	3710      	adds	r7, #16
    3bd8:	46bd      	mov	sp, r7
    3bda:	bd80      	pop	{r7, pc}

00003bdc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b082      	sub	sp, #8
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
    3be4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d004      	beq.n	3bf6 <qspi_sync_init+0x1a>
    3bec:	683b      	ldr	r3, [r7, #0]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d001      	beq.n	3bf6 <qspi_sync_init+0x1a>
    3bf2:	2301      	movs	r3, #1
    3bf4:	e000      	b.n	3bf8 <qspi_sync_init+0x1c>
    3bf6:	2300      	movs	r3, #0
    3bf8:	f003 0301 	and.w	r3, r3, #1
    3bfc:	b2db      	uxtb	r3, r3
    3bfe:	2231      	movs	r2, #49	; 0x31
    3c00:	4906      	ldr	r1, [pc, #24]	; (3c1c <qspi_sync_init+0x40>)
    3c02:	4618      	mov	r0, r3
    3c04:	4b06      	ldr	r3, [pc, #24]	; (3c20 <qspi_sync_init+0x44>)
    3c06:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	6839      	ldr	r1, [r7, #0]
    3c0c:	4618      	mov	r0, r3
    3c0e:	4b05      	ldr	r3, [pc, #20]	; (3c24 <qspi_sync_init+0x48>)
    3c10:	4798      	blx	r3
    3c12:	4603      	mov	r3, r0
}
    3c14:	4618      	mov	r0, r3
    3c16:	3708      	adds	r7, #8
    3c18:	46bd      	mov	sp, r7
    3c1a:	bd80      	pop	{r7, pc}
    3c1c:	0001139c 	.word	0x0001139c
    3c20:	00004f51 	.word	0x00004f51
    3c24:	00006cf1 	.word	0x00006cf1

00003c28 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    3c28:	b580      	push	{r7, lr}
    3c2a:	b082      	sub	sp, #8
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3c30:	687b      	ldr	r3, [r7, #4]
    3c32:	2b00      	cmp	r3, #0
    3c34:	bf14      	ite	ne
    3c36:	2301      	movne	r3, #1
    3c38:	2300      	moveq	r3, #0
    3c3a:	b2db      	uxtb	r3, r3
    3c3c:	223f      	movs	r2, #63	; 0x3f
    3c3e:	4906      	ldr	r1, [pc, #24]	; (3c58 <qspi_sync_enable+0x30>)
    3c40:	4618      	mov	r0, r3
    3c42:	4b06      	ldr	r3, [pc, #24]	; (3c5c <qspi_sync_enable+0x34>)
    3c44:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	4618      	mov	r0, r3
    3c4a:	4b05      	ldr	r3, [pc, #20]	; (3c60 <qspi_sync_enable+0x38>)
    3c4c:	4798      	blx	r3
    3c4e:	4603      	mov	r3, r0
}
    3c50:	4618      	mov	r0, r3
    3c52:	3708      	adds	r7, #8
    3c54:	46bd      	mov	sp, r7
    3c56:	bd80      	pop	{r7, pc}
    3c58:	0001139c 	.word	0x0001139c
    3c5c:	00004f51 	.word	0x00004f51
    3c60:	00006d65 	.word	0x00006d65

00003c64 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    3c64:	b580      	push	{r7, lr}
    3c66:	b082      	sub	sp, #8
    3c68:	af00      	add	r7, sp, #0
    3c6a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3c6c:	687b      	ldr	r3, [r7, #4]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	bf14      	ite	ne
    3c72:	2301      	movne	r3, #1
    3c74:	2300      	moveq	r3, #0
    3c76:	b2db      	uxtb	r3, r3
    3c78:	2246      	movs	r2, #70	; 0x46
    3c7a:	4906      	ldr	r1, [pc, #24]	; (3c94 <qspi_sync_disable+0x30>)
    3c7c:	4618      	mov	r0, r3
    3c7e:	4b06      	ldr	r3, [pc, #24]	; (3c98 <qspi_sync_disable+0x34>)
    3c80:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	4618      	mov	r0, r3
    3c86:	4b05      	ldr	r3, [pc, #20]	; (3c9c <qspi_sync_disable+0x38>)
    3c88:	4798      	blx	r3
    3c8a:	4603      	mov	r3, r0
}
    3c8c:	4618      	mov	r0, r3
    3c8e:	3708      	adds	r7, #8
    3c90:	46bd      	mov	sp, r7
    3c92:	bd80      	pop	{r7, pc}
    3c94:	0001139c 	.word	0x0001139c
    3c98:	00004f51 	.word	0x00004f51
    3c9c:	00006d89 	.word	0x00006d89

00003ca0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	b082      	sub	sp, #8
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	6078      	str	r0, [r7, #4]
    3ca8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	2b00      	cmp	r3, #0
    3cae:	d004      	beq.n	3cba <qspi_sync_serial_run_command+0x1a>
    3cb0:	683b      	ldr	r3, [r7, #0]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d001      	beq.n	3cba <qspi_sync_serial_run_command+0x1a>
    3cb6:	2301      	movs	r3, #1
    3cb8:	e000      	b.n	3cbc <qspi_sync_serial_run_command+0x1c>
    3cba:	2300      	movs	r3, #0
    3cbc:	f003 0301 	and.w	r3, r3, #1
    3cc0:	b2db      	uxtb	r3, r3
    3cc2:	224d      	movs	r2, #77	; 0x4d
    3cc4:	4906      	ldr	r1, [pc, #24]	; (3ce0 <qspi_sync_serial_run_command+0x40>)
    3cc6:	4618      	mov	r0, r3
    3cc8:	4b06      	ldr	r3, [pc, #24]	; (3ce4 <qspi_sync_serial_run_command+0x44>)
    3cca:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3ccc:	687b      	ldr	r3, [r7, #4]
    3cce:	6839      	ldr	r1, [r7, #0]
    3cd0:	4618      	mov	r0, r3
    3cd2:	4b05      	ldr	r3, [pc, #20]	; (3ce8 <qspi_sync_serial_run_command+0x48>)
    3cd4:	4798      	blx	r3
    3cd6:	4603      	mov	r3, r0
}
    3cd8:	4618      	mov	r0, r3
    3cda:	3708      	adds	r7, #8
    3cdc:	46bd      	mov	sp, r7
    3cde:	bd80      	pop	{r7, pc}
    3ce0:	0001139c 	.word	0x0001139c
    3ce4:	00004f51 	.word	0x00004f51
    3ce8:	00006ed5 	.word	0x00006ed5

00003cec <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	b084      	sub	sp, #16
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	3b04      	subs	r3, #4
    3cf8:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	791b      	ldrb	r3, [r3, #4]
    3cfe:	2b01      	cmp	r3, #1
    3d00:	d80e      	bhi.n	3d20 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3d06:	68fb      	ldr	r3, [r7, #12]
    3d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3d0a:	1c58      	adds	r0, r3, #1
    3d0c:	68f9      	ldr	r1, [r7, #12]
    3d0e:	6448      	str	r0, [r1, #68]	; 0x44
    3d10:	4413      	add	r3, r2
    3d12:	781b      	ldrb	r3, [r3, #0]
    3d14:	b29b      	uxth	r3, r3
    3d16:	4619      	mov	r1, r3
    3d18:	6878      	ldr	r0, [r7, #4]
    3d1a:	4b11      	ldr	r3, [pc, #68]	; (3d60 <_spi_dev_tx+0x74>)
    3d1c:	4798      	blx	r3
    3d1e:	e00d      	b.n	3d3c <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    3d20:	68fb      	ldr	r3, [r7, #12]
    3d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3d24:	68fb      	ldr	r3, [r7, #12]
    3d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3d28:	1c58      	adds	r0, r3, #1
    3d2a:	68f9      	ldr	r1, [r7, #12]
    3d2c:	6448      	str	r0, [r1, #68]	; 0x44
    3d2e:	005b      	lsls	r3, r3, #1
    3d30:	4413      	add	r3, r2
    3d32:	881b      	ldrh	r3, [r3, #0]
    3d34:	4619      	mov	r1, r3
    3d36:	6878      	ldr	r0, [r7, #4]
    3d38:	4b09      	ldr	r3, [pc, #36]	; (3d60 <_spi_dev_tx+0x74>)
    3d3a:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    3d3c:	68fb      	ldr	r3, [r7, #12]
    3d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3d40:	68fb      	ldr	r3, [r7, #12]
    3d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d44:	429a      	cmp	r2, r3
    3d46:	d107      	bne.n	3d58 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    3d48:	2100      	movs	r1, #0
    3d4a:	6878      	ldr	r0, [r7, #4]
    3d4c:	4b05      	ldr	r3, [pc, #20]	; (3d64 <_spi_dev_tx+0x78>)
    3d4e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    3d50:	2101      	movs	r1, #1
    3d52:	6878      	ldr	r0, [r7, #4]
    3d54:	4b04      	ldr	r3, [pc, #16]	; (3d68 <_spi_dev_tx+0x7c>)
    3d56:	4798      	blx	r3
	}
}
    3d58:	bf00      	nop
    3d5a:	3710      	adds	r7, #16
    3d5c:	46bd      	mov	sp, r7
    3d5e:	bd80      	pop	{r7, pc}
    3d60:	00008d3d 	.word	0x00008d3d
    3d64:	00008c01 	.word	0x00008c01
    3d68:	00008cd5 	.word	0x00008cd5

00003d6c <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    3d6c:	b590      	push	{r4, r7, lr}
    3d6e:	b085      	sub	sp, #20
    3d70:	af00      	add	r7, sp, #0
    3d72:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    3d74:	687b      	ldr	r3, [r7, #4]
    3d76:	3b04      	subs	r3, #4
    3d78:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    3d7a:	68fb      	ldr	r3, [r7, #12]
    3d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d021      	beq.n	3dc6 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	791b      	ldrb	r3, [r3, #4]
    3d86:	2b01      	cmp	r3, #1
    3d88:	d80e      	bhi.n	3da8 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    3d8a:	68fb      	ldr	r3, [r7, #12]
    3d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3d8e:	68fb      	ldr	r3, [r7, #12]
    3d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3d92:	1c58      	adds	r0, r3, #1
    3d94:	68f9      	ldr	r1, [r7, #12]
    3d96:	6448      	str	r0, [r1, #68]	; 0x44
    3d98:	18d4      	adds	r4, r2, r3
    3d9a:	6878      	ldr	r0, [r7, #4]
    3d9c:	4b2e      	ldr	r3, [pc, #184]	; (3e58 <_spi_dev_rx+0xec>)
    3d9e:	4798      	blx	r3
    3da0:	4603      	mov	r3, r0
    3da2:	b2db      	uxtb	r3, r3
    3da4:	7023      	strb	r3, [r4, #0]
    3da6:	e016      	b.n	3dd6 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    3da8:	68fb      	ldr	r3, [r7, #12]
    3daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3dac:	68fb      	ldr	r3, [r7, #12]
    3dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3db0:	1c58      	adds	r0, r3, #1
    3db2:	68f9      	ldr	r1, [r7, #12]
    3db4:	6448      	str	r0, [r1, #68]	; 0x44
    3db6:	005b      	lsls	r3, r3, #1
    3db8:	18d4      	adds	r4, r2, r3
    3dba:	6878      	ldr	r0, [r7, #4]
    3dbc:	4b26      	ldr	r3, [pc, #152]	; (3e58 <_spi_dev_rx+0xec>)
    3dbe:	4798      	blx	r3
    3dc0:	4603      	mov	r3, r0
    3dc2:	8023      	strh	r3, [r4, #0]
    3dc4:	e007      	b.n	3dd6 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    3dc6:	6878      	ldr	r0, [r7, #4]
    3dc8:	4b23      	ldr	r3, [pc, #140]	; (3e58 <_spi_dev_rx+0xec>)
    3dca:	4798      	blx	r3
		spi->xfercnt++;
    3dcc:	68fb      	ldr	r3, [r7, #12]
    3dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3dd0:	1c5a      	adds	r2, r3, #1
    3dd2:	68fb      	ldr	r3, [r7, #12]
    3dd4:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    3dd6:	68fb      	ldr	r3, [r7, #12]
    3dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3dda:	68fb      	ldr	r3, [r7, #12]
    3ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3dde:	429a      	cmp	r2, r3
    3de0:	d226      	bcs.n	3e30 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    3de2:	68fb      	ldr	r3, [r7, #12]
    3de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3de6:	2b00      	cmp	r3, #0
    3de8:	d01b      	beq.n	3e22 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	791b      	ldrb	r3, [r3, #4]
    3dee:	2b01      	cmp	r3, #1
    3df0:	d80b      	bhi.n	3e0a <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    3df2:	68fb      	ldr	r3, [r7, #12]
    3df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3df6:	68fb      	ldr	r3, [r7, #12]
    3df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3dfa:	4413      	add	r3, r2
    3dfc:	781b      	ldrb	r3, [r3, #0]
    3dfe:	b29b      	uxth	r3, r3
    3e00:	4619      	mov	r1, r3
    3e02:	6878      	ldr	r0, [r7, #4]
    3e04:	4b15      	ldr	r3, [pc, #84]	; (3e5c <_spi_dev_rx+0xf0>)
    3e06:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    3e08:	e022      	b.n	3e50 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    3e0a:	68fb      	ldr	r3, [r7, #12]
    3e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3e0e:	68fb      	ldr	r3, [r7, #12]
    3e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e12:	005b      	lsls	r3, r3, #1
    3e14:	4413      	add	r3, r2
    3e16:	881b      	ldrh	r3, [r3, #0]
    3e18:	4619      	mov	r1, r3
    3e1a:	6878      	ldr	r0, [r7, #4]
    3e1c:	4b0f      	ldr	r3, [pc, #60]	; (3e5c <_spi_dev_rx+0xf0>)
    3e1e:	4798      	blx	r3
}
    3e20:	e016      	b.n	3e50 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    3e22:	687b      	ldr	r3, [r7, #4]
    3e24:	88db      	ldrh	r3, [r3, #6]
    3e26:	4619      	mov	r1, r3
    3e28:	6878      	ldr	r0, [r7, #4]
    3e2a:	4b0c      	ldr	r3, [pc, #48]	; (3e5c <_spi_dev_rx+0xf0>)
    3e2c:	4798      	blx	r3
}
    3e2e:	e00f      	b.n	3e50 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    3e30:	2100      	movs	r1, #0
    3e32:	6878      	ldr	r0, [r7, #4]
    3e34:	4b0a      	ldr	r3, [pc, #40]	; (3e60 <_spi_dev_rx+0xf4>)
    3e36:	4798      	blx	r3
		spi->stat = 0;
    3e38:	68fb      	ldr	r3, [r7, #12]
    3e3a:	2200      	movs	r2, #0
    3e3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    3e40:	68fb      	ldr	r3, [r7, #12]
    3e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3e44:	2b00      	cmp	r3, #0
    3e46:	d003      	beq.n	3e50 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    3e48:	68fb      	ldr	r3, [r7, #12]
    3e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3e4c:	68f8      	ldr	r0, [r7, #12]
    3e4e:	4798      	blx	r3
}
    3e50:	bf00      	nop
    3e52:	3714      	adds	r7, #20
    3e54:	46bd      	mov	sp, r7
    3e56:	bd90      	pop	{r4, r7, pc}
    3e58:	00008d95 	.word	0x00008d95
    3e5c:	00008d3d 	.word	0x00008d3d
    3e60:	00008c65 	.word	0x00008c65

00003e64 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    3e64:	b580      	push	{r7, lr}
    3e66:	b084      	sub	sp, #16
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    3e6c:	687b      	ldr	r3, [r7, #4]
    3e6e:	3b04      	subs	r3, #4
    3e70:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    3e72:	68fb      	ldr	r3, [r7, #12]
    3e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e76:	68fb      	ldr	r3, [r7, #12]
    3e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e7a:	429a      	cmp	r2, r3
    3e7c:	d30f      	bcc.n	3e9e <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    3e7e:	2100      	movs	r1, #0
    3e80:	6878      	ldr	r0, [r7, #4]
    3e82:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <_spi_dev_complete+0x44>)
    3e84:	4798      	blx	r3
		spi->stat = 0;
    3e86:	68fb      	ldr	r3, [r7, #12]
    3e88:	2200      	movs	r2, #0
    3e8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    3e8e:	68fb      	ldr	r3, [r7, #12]
    3e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3e92:	2b00      	cmp	r3, #0
    3e94:	d003      	beq.n	3e9e <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    3e96:	68fb      	ldr	r3, [r7, #12]
    3e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3e9a:	68f8      	ldr	r0, [r7, #12]
    3e9c:	4798      	blx	r3
		}
	}
}
    3e9e:	bf00      	nop
    3ea0:	3710      	adds	r7, #16
    3ea2:	46bd      	mov	sp, r7
    3ea4:	bd80      	pop	{r7, pc}
    3ea6:	bf00      	nop
    3ea8:	00008cd5 	.word	0x00008cd5

00003eac <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b084      	sub	sp, #16
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    3eb4:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	3b04      	subs	r3, #4
    3eba:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    3ebc:	2100      	movs	r1, #0
    3ebe:	6878      	ldr	r0, [r7, #4]
    3ec0:	4b0d      	ldr	r3, [pc, #52]	; (3ef8 <_spi_dev_error+0x4c>)
    3ec2:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    3ec4:	2100      	movs	r1, #0
    3ec6:	6878      	ldr	r0, [r7, #4]
    3ec8:	4b0c      	ldr	r3, [pc, #48]	; (3efc <_spi_dev_error+0x50>)
    3eca:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    3ecc:	2100      	movs	r1, #0
    3ece:	6878      	ldr	r0, [r7, #4]
    3ed0:	4b0b      	ldr	r3, [pc, #44]	; (3f00 <_spi_dev_error+0x54>)
    3ed2:	4798      	blx	r3
	spi->stat = 0;
    3ed4:	68fb      	ldr	r3, [r7, #12]
    3ed6:	2200      	movs	r2, #0
    3ed8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    3edc:	68fb      	ldr	r3, [r7, #12]
    3ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d004      	beq.n	3eee <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    3ee4:	68fb      	ldr	r3, [r7, #12]
    3ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3ee8:	6839      	ldr	r1, [r7, #0]
    3eea:	68f8      	ldr	r0, [r7, #12]
    3eec:	4798      	blx	r3
	}
}
    3eee:	bf00      	nop
    3ef0:	3710      	adds	r7, #16
    3ef2:	46bd      	mov	sp, r7
    3ef4:	bd80      	pop	{r7, pc}
    3ef6:	bf00      	nop
    3ef8:	00008c01 	.word	0x00008c01
    3efc:	00008c65 	.word	0x00008c65
    3f00:	00008cd5 	.word	0x00008cd5

00003f04 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b084      	sub	sp, #16
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
    3f0c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3f0e:	2300      	movs	r3, #0
    3f10:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d004      	beq.n	3f22 <spi_m_async_init+0x1e>
    3f18:	683b      	ldr	r3, [r7, #0]
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d001      	beq.n	3f22 <spi_m_async_init+0x1e>
    3f1e:	2301      	movs	r3, #1
    3f20:	e000      	b.n	3f24 <spi_m_async_init+0x20>
    3f22:	2300      	movs	r3, #0
    3f24:	f003 0301 	and.w	r3, r3, #1
    3f28:	b2db      	uxtb	r3, r3
    3f2a:	22a5      	movs	r2, #165	; 0xa5
    3f2c:	491c      	ldr	r1, [pc, #112]	; (3fa0 <spi_m_async_init+0x9c>)
    3f2e:	4618      	mov	r0, r3
    3f30:	4b1c      	ldr	r3, [pc, #112]	; (3fa4 <spi_m_async_init+0xa0>)
    3f32:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3f34:	687b      	ldr	r3, [r7, #4]
    3f36:	683a      	ldr	r2, [r7, #0]
    3f38:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	3304      	adds	r3, #4
    3f3e:	6839      	ldr	r1, [r7, #0]
    3f40:	4618      	mov	r0, r3
    3f42:	4b19      	ldr	r3, [pc, #100]	; (3fa8 <spi_m_async_init+0xa4>)
    3f44:	4798      	blx	r3
    3f46:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    3f48:	68fb      	ldr	r3, [r7, #12]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	db23      	blt.n	3f96 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	3304      	adds	r3, #4
    3f52:	4a16      	ldr	r2, [pc, #88]	; (3fac <spi_m_async_init+0xa8>)
    3f54:	2100      	movs	r1, #0
    3f56:	4618      	mov	r0, r3
    3f58:	4b15      	ldr	r3, [pc, #84]	; (3fb0 <spi_m_async_init+0xac>)
    3f5a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	3304      	adds	r3, #4
    3f60:	4a14      	ldr	r2, [pc, #80]	; (3fb4 <spi_m_async_init+0xb0>)
    3f62:	2101      	movs	r1, #1
    3f64:	4618      	mov	r0, r3
    3f66:	4b12      	ldr	r3, [pc, #72]	; (3fb0 <spi_m_async_init+0xac>)
    3f68:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	3304      	adds	r3, #4
    3f6e:	4a12      	ldr	r2, [pc, #72]	; (3fb8 <spi_m_async_init+0xb4>)
    3f70:	2102      	movs	r1, #2
    3f72:	4618      	mov	r0, r3
    3f74:	4b0e      	ldr	r3, [pc, #56]	; (3fb0 <spi_m_async_init+0xac>)
    3f76:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	3304      	adds	r3, #4
    3f7c:	4a0f      	ldr	r2, [pc, #60]	; (3fbc <spi_m_async_init+0xb8>)
    3f7e:	2103      	movs	r1, #3
    3f80:	4618      	mov	r0, r3
    3f82:	4b0b      	ldr	r3, [pc, #44]	; (3fb0 <spi_m_async_init+0xac>)
    3f84:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	4a0d      	ldr	r2, [pc, #52]	; (3fc0 <spi_m_async_init+0xbc>)
    3f8a:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    3f8c:	687b      	ldr	r3, [r7, #4]
    3f8e:	4a0d      	ldr	r2, [pc, #52]	; (3fc4 <spi_m_async_init+0xc0>)
    3f90:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    3f92:	2300      	movs	r3, #0
    3f94:	e000      	b.n	3f98 <spi_m_async_init+0x94>
		return rc;
    3f96:	68fb      	ldr	r3, [r7, #12]
}
    3f98:	4618      	mov	r0, r3
    3f9a:	3710      	adds	r7, #16
    3f9c:	46bd      	mov	sp, r7
    3f9e:	bd80      	pop	{r7, pc}
    3fa0:	000113b8 	.word	0x000113b8
    3fa4:	00004f51 	.word	0x00004f51
    3fa8:	00008901 	.word	0x00008901
    3fac:	00003ced 	.word	0x00003ced
    3fb0:	00008de5 	.word	0x00008de5
    3fb4:	00003d6d 	.word	0x00003d6d
    3fb8:	00003e65 	.word	0x00003e65
    3fbc:	00003ead 	.word	0x00003ead
    3fc0:	00003fc9 	.word	0x00003fc9
    3fc4:	00004049 	.word	0x00004049

00003fc8 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b086      	sub	sp, #24
    3fcc:	af00      	add	r7, sp, #0
    3fce:	60f8      	str	r0, [r7, #12]
    3fd0:	60b9      	str	r1, [r7, #8]
    3fd2:	4613      	mov	r3, r2
    3fd4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3fd6:	68fb      	ldr	r3, [r7, #12]
    3fd8:	2b00      	cmp	r3, #0
    3fda:	bf14      	ite	ne
    3fdc:	2301      	movne	r3, #1
    3fde:	2300      	moveq	r3, #0
    3fe0:	b2db      	uxtb	r3, r3
    3fe2:	f240 1205 	movw	r2, #261	; 0x105
    3fe6:	4914      	ldr	r1, [pc, #80]	; (4038 <_spi_m_async_io_read+0x70>)
    3fe8:	4618      	mov	r0, r3
    3fea:	4b14      	ldr	r3, [pc, #80]	; (403c <_spi_m_async_io_read+0x74>)
    3fec:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    3fee:	68fb      	ldr	r3, [r7, #12]
    3ff0:	3b24      	subs	r3, #36	; 0x24
    3ff2:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    3ff4:	697b      	ldr	r3, [r7, #20]
    3ff6:	68ba      	ldr	r2, [r7, #8]
    3ff8:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    3ffa:	697b      	ldr	r3, [r7, #20]
    3ffc:	2200      	movs	r2, #0
    3ffe:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    4000:	88fa      	ldrh	r2, [r7, #6]
    4002:	697b      	ldr	r3, [r7, #20]
    4004:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    4006:	697b      	ldr	r3, [r7, #20]
    4008:	2200      	movs	r2, #0
    400a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    400c:	697b      	ldr	r3, [r7, #20]
    400e:	2210      	movs	r2, #16
    4010:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4014:	697b      	ldr	r3, [r7, #20]
    4016:	3304      	adds	r3, #4
    4018:	2101      	movs	r1, #1
    401a:	4618      	mov	r0, r3
    401c:	4b08      	ldr	r3, [pc, #32]	; (4040 <_spi_m_async_io_read+0x78>)
    401e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4020:	697b      	ldr	r3, [r7, #20]
    4022:	3304      	adds	r3, #4
    4024:	f240 11ff 	movw	r1, #511	; 0x1ff
    4028:	4618      	mov	r0, r3
    402a:	4b06      	ldr	r3, [pc, #24]	; (4044 <_spi_m_async_io_read+0x7c>)
    402c:	4798      	blx	r3

	return ERR_NONE;
    402e:	2300      	movs	r3, #0
}
    4030:	4618      	mov	r0, r3
    4032:	3718      	adds	r7, #24
    4034:	46bd      	mov	sp, r7
    4036:	bd80      	pop	{r7, pc}
    4038:	000113b8 	.word	0x000113b8
    403c:	00004f51 	.word	0x00004f51
    4040:	00008c65 	.word	0x00008c65
    4044:	00008d3d 	.word	0x00008d3d

00004048 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4048:	b580      	push	{r7, lr}
    404a:	b086      	sub	sp, #24
    404c:	af00      	add	r7, sp, #0
    404e:	60f8      	str	r0, [r7, #12]
    4050:	60b9      	str	r1, [r7, #8]
    4052:	4613      	mov	r3, r2
    4054:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4056:	68fb      	ldr	r3, [r7, #12]
    4058:	2b00      	cmp	r3, #0
    405a:	bf14      	ite	ne
    405c:	2301      	movne	r3, #1
    405e:	2300      	moveq	r3, #0
    4060:	b2db      	uxtb	r3, r3
    4062:	f240 1227 	movw	r2, #295	; 0x127
    4066:	4911      	ldr	r1, [pc, #68]	; (40ac <_spi_m_async_io_write+0x64>)
    4068:	4618      	mov	r0, r3
    406a:	4b11      	ldr	r3, [pc, #68]	; (40b0 <_spi_m_async_io_write+0x68>)
    406c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    406e:	68fb      	ldr	r3, [r7, #12]
    4070:	3b24      	subs	r3, #36	; 0x24
    4072:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    4074:	697b      	ldr	r3, [r7, #20]
    4076:	2200      	movs	r2, #0
    4078:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    407a:	697b      	ldr	r3, [r7, #20]
    407c:	68ba      	ldr	r2, [r7, #8]
    407e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    4080:	88fa      	ldrh	r2, [r7, #6]
    4082:	697b      	ldr	r3, [r7, #20]
    4084:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    4086:	697b      	ldr	r3, [r7, #20]
    4088:	2200      	movs	r2, #0
    408a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    408c:	697b      	ldr	r3, [r7, #20]
    408e:	2210      	movs	r2, #16
    4090:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    4094:	697b      	ldr	r3, [r7, #20]
    4096:	3304      	adds	r3, #4
    4098:	2101      	movs	r1, #1
    409a:	4618      	mov	r0, r3
    409c:	4b05      	ldr	r3, [pc, #20]	; (40b4 <_spi_m_async_io_write+0x6c>)
    409e:	4798      	blx	r3

	return ERR_NONE;
    40a0:	2300      	movs	r3, #0
}
    40a2:	4618      	mov	r0, r3
    40a4:	3718      	adds	r7, #24
    40a6:	46bd      	mov	sp, r7
    40a8:	bd80      	pop	{r7, pc}
    40aa:	bf00      	nop
    40ac:	000113b8 	.word	0x000113b8
    40b0:	00004f51 	.word	0x00004f51
    40b4:	00008c01 	.word	0x00008c01

000040b8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    40b8:	b580      	push	{r7, lr}
    40ba:	b084      	sub	sp, #16
    40bc:	af00      	add	r7, sp, #0
    40be:	6078      	str	r0, [r7, #4]
    40c0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    40c2:	2300      	movs	r3, #0
    40c4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d004      	beq.n	40d6 <spi_m_sync_init+0x1e>
    40cc:	683b      	ldr	r3, [r7, #0]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d001      	beq.n	40d6 <spi_m_sync_init+0x1e>
    40d2:	2301      	movs	r3, #1
    40d4:	e000      	b.n	40d8 <spi_m_sync_init+0x20>
    40d6:	2300      	movs	r3, #0
    40d8:	f003 0301 	and.w	r3, r3, #1
    40dc:	b2db      	uxtb	r3, r3
    40de:	2240      	movs	r2, #64	; 0x40
    40e0:	4910      	ldr	r1, [pc, #64]	; (4124 <spi_m_sync_init+0x6c>)
    40e2:	4618      	mov	r0, r3
    40e4:	4b10      	ldr	r3, [pc, #64]	; (4128 <spi_m_sync_init+0x70>)
    40e6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	683a      	ldr	r2, [r7, #0]
    40ec:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	3304      	adds	r3, #4
    40f2:	6839      	ldr	r1, [r7, #0]
    40f4:	4618      	mov	r0, r3
    40f6:	4b0d      	ldr	r3, [pc, #52]	; (412c <spi_m_sync_init+0x74>)
    40f8:	4798      	blx	r3
    40fa:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    40fc:	68fb      	ldr	r3, [r7, #12]
    40fe:	2b00      	cmp	r3, #0
    4100:	da01      	bge.n	4106 <spi_m_sync_init+0x4e>
		return rc;
    4102:	68fb      	ldr	r3, [r7, #12]
    4104:	e00a      	b.n	411c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    410c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	4a07      	ldr	r2, [pc, #28]	; (4130 <spi_m_sync_init+0x78>)
    4112:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	4a07      	ldr	r2, [pc, #28]	; (4134 <spi_m_sync_init+0x7c>)
    4118:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    411a:	2300      	movs	r3, #0
}
    411c:	4618      	mov	r0, r3
    411e:	3710      	adds	r7, #16
    4120:	46bd      	mov	sp, r7
    4122:	bd80      	pop	{r7, pc}
    4124:	000113d8 	.word	0x000113d8
    4128:	00004f51 	.word	0x00004f51
    412c:	000087f5 	.word	0x000087f5
    4130:	00004139 	.word	0x00004139
    4134:	00004191 	.word	0x00004191

00004138 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    4138:	b580      	push	{r7, lr}
    413a:	b088      	sub	sp, #32
    413c:	af00      	add	r7, sp, #0
    413e:	60f8      	str	r0, [r7, #12]
    4140:	60b9      	str	r1, [r7, #8]
    4142:	4613      	mov	r3, r2
    4144:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4146:	68fb      	ldr	r3, [r7, #12]
    4148:	2b00      	cmp	r3, #0
    414a:	bf14      	ite	ne
    414c:	2301      	movne	r3, #1
    414e:	2300      	moveq	r3, #0
    4150:	b2db      	uxtb	r3, r3
    4152:	2287      	movs	r2, #135	; 0x87
    4154:	490b      	ldr	r1, [pc, #44]	; (4184 <_spi_m_sync_io_read+0x4c>)
    4156:	4618      	mov	r0, r3
    4158:	4b0b      	ldr	r3, [pc, #44]	; (4188 <_spi_m_sync_io_read+0x50>)
    415a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    415c:	68fb      	ldr	r3, [r7, #12]
    415e:	3b0c      	subs	r3, #12
    4160:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    4162:	68bb      	ldr	r3, [r7, #8]
    4164:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    4166:	2300      	movs	r3, #0
    4168:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    416a:	88fb      	ldrh	r3, [r7, #6]
    416c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    416e:	f107 0310 	add.w	r3, r7, #16
    4172:	4619      	mov	r1, r3
    4174:	69f8      	ldr	r0, [r7, #28]
    4176:	4b05      	ldr	r3, [pc, #20]	; (418c <_spi_m_sync_io_read+0x54>)
    4178:	4798      	blx	r3
    417a:	4603      	mov	r3, r0
}
    417c:	4618      	mov	r0, r3
    417e:	3720      	adds	r7, #32
    4180:	46bd      	mov	sp, r7
    4182:	bd80      	pop	{r7, pc}
    4184:	000113d8 	.word	0x000113d8
    4188:	00004f51 	.word	0x00004f51
    418c:	000041e9 	.word	0x000041e9

00004190 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    4190:	b580      	push	{r7, lr}
    4192:	b088      	sub	sp, #32
    4194:	af00      	add	r7, sp, #0
    4196:	60f8      	str	r0, [r7, #12]
    4198:	60b9      	str	r1, [r7, #8]
    419a:	4613      	mov	r3, r2
    419c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    419e:	68fb      	ldr	r3, [r7, #12]
    41a0:	2b00      	cmp	r3, #0
    41a2:	bf14      	ite	ne
    41a4:	2301      	movne	r3, #1
    41a6:	2300      	moveq	r3, #0
    41a8:	b2db      	uxtb	r3, r3
    41aa:	22a3      	movs	r2, #163	; 0xa3
    41ac:	490b      	ldr	r1, [pc, #44]	; (41dc <_spi_m_sync_io_write+0x4c>)
    41ae:	4618      	mov	r0, r3
    41b0:	4b0b      	ldr	r3, [pc, #44]	; (41e0 <_spi_m_sync_io_write+0x50>)
    41b2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    41b4:	68fb      	ldr	r3, [r7, #12]
    41b6:	3b0c      	subs	r3, #12
    41b8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    41ba:	2300      	movs	r3, #0
    41bc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    41be:	68bb      	ldr	r3, [r7, #8]
    41c0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    41c2:	88fb      	ldrh	r3, [r7, #6]
    41c4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    41c6:	f107 0310 	add.w	r3, r7, #16
    41ca:	4619      	mov	r1, r3
    41cc:	69f8      	ldr	r0, [r7, #28]
    41ce:	4b05      	ldr	r3, [pc, #20]	; (41e4 <_spi_m_sync_io_write+0x54>)
    41d0:	4798      	blx	r3
    41d2:	4603      	mov	r3, r0
}
    41d4:	4618      	mov	r0, r3
    41d6:	3720      	adds	r7, #32
    41d8:	46bd      	mov	sp, r7
    41da:	bd80      	pop	{r7, pc}
    41dc:	000113d8 	.word	0x000113d8
    41e0:	00004f51 	.word	0x00004f51
    41e4:	000041e9 	.word	0x000041e9

000041e8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    41e8:	b580      	push	{r7, lr}
    41ea:	b086      	sub	sp, #24
    41ec:	af00      	add	r7, sp, #0
    41ee:	6078      	str	r0, [r7, #4]
    41f0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d004      	beq.n	4202 <spi_m_sync_transfer+0x1a>
    41f8:	683b      	ldr	r3, [r7, #0]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d001      	beq.n	4202 <spi_m_sync_transfer+0x1a>
    41fe:	2301      	movs	r3, #1
    4200:	e000      	b.n	4204 <spi_m_sync_transfer+0x1c>
    4202:	2300      	movs	r3, #0
    4204:	f003 0301 	and.w	r3, r3, #1
    4208:	b2db      	uxtb	r3, r3
    420a:	22b3      	movs	r2, #179	; 0xb3
    420c:	490c      	ldr	r1, [pc, #48]	; (4240 <spi_m_sync_transfer+0x58>)
    420e:	4618      	mov	r0, r3
    4210:	4b0c      	ldr	r3, [pc, #48]	; (4244 <spi_m_sync_transfer+0x5c>)
    4212:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    4214:	683b      	ldr	r3, [r7, #0]
    4216:	681b      	ldr	r3, [r3, #0]
    4218:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    421a:	683b      	ldr	r3, [r7, #0]
    421c:	685b      	ldr	r3, [r3, #4]
    421e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    4220:	683b      	ldr	r3, [r7, #0]
    4222:	689b      	ldr	r3, [r3, #8]
    4224:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	3304      	adds	r3, #4
    422a:	f107 020c 	add.w	r2, r7, #12
    422e:	4611      	mov	r1, r2
    4230:	4618      	mov	r0, r3
    4232:	4b05      	ldr	r3, [pc, #20]	; (4248 <spi_m_sync_transfer+0x60>)
    4234:	4798      	blx	r3
    4236:	4603      	mov	r3, r0
}
    4238:	4618      	mov	r0, r3
    423a:	3718      	adds	r7, #24
    423c:	46bd      	mov	sp, r7
    423e:	bd80      	pop	{r7, pc}
    4240:	000113d8 	.word	0x000113d8
    4244:	00004f51 	.word	0x00004f51
    4248:	00008ae5 	.word	0x00008ae5

0000424c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    424c:	b480      	push	{r7}
    424e:	b083      	sub	sp, #12
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	681b      	ldr	r3, [r3, #0]
}
    4258:	4618      	mov	r0, r3
    425a:	370c      	adds	r7, #12
    425c:	46bd      	mov	sp, r7
    425e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4262:	4770      	bx	lr

00004264 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    4264:	b480      	push	{r7}
    4266:	b083      	sub	sp, #12
    4268:	af00      	add	r7, sp, #0
    426a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	2b00      	cmp	r3, #0
    4270:	d002      	beq.n	4278 <list_get_next_element+0x14>
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	681b      	ldr	r3, [r3, #0]
    4276:	e000      	b.n	427a <list_get_next_element+0x16>
    4278:	2300      	movs	r3, #0
}
    427a:	4618      	mov	r0, r3
    427c:	370c      	adds	r7, #12
    427e:	46bd      	mov	sp, r7
    4280:	f85d 7b04 	ldr.w	r7, [sp], #4
    4284:	4770      	bx	lr
	...

00004288 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    4288:	b580      	push	{r7, lr}
    428a:	b084      	sub	sp, #16
    428c:	af00      	add	r7, sp, #0
    428e:	60f8      	str	r0, [r7, #12]
    4290:	60b9      	str	r1, [r7, #8]
    4292:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4294:	68fb      	ldr	r3, [r7, #12]
    4296:	2b00      	cmp	r3, #0
    4298:	d004      	beq.n	42a4 <timer_init+0x1c>
    429a:	68bb      	ldr	r3, [r7, #8]
    429c:	2b00      	cmp	r3, #0
    429e:	d001      	beq.n	42a4 <timer_init+0x1c>
    42a0:	2301      	movs	r3, #1
    42a2:	e000      	b.n	42a6 <timer_init+0x1e>
    42a4:	2300      	movs	r3, #0
    42a6:	f003 0301 	and.w	r3, r3, #1
    42aa:	b2db      	uxtb	r3, r3
    42ac:	223b      	movs	r2, #59	; 0x3b
    42ae:	490a      	ldr	r1, [pc, #40]	; (42d8 <timer_init+0x50>)
    42b0:	4618      	mov	r0, r3
    42b2:	4b0a      	ldr	r3, [pc, #40]	; (42dc <timer_init+0x54>)
    42b4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    42b6:	68fb      	ldr	r3, [r7, #12]
    42b8:	68b9      	ldr	r1, [r7, #8]
    42ba:	4618      	mov	r0, r3
    42bc:	4b08      	ldr	r3, [pc, #32]	; (42e0 <timer_init+0x58>)
    42be:	4798      	blx	r3
	descr->time                           = 0;
    42c0:	68fb      	ldr	r3, [r7, #12]
    42c2:	2200      	movs	r2, #0
    42c4:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	4a06      	ldr	r2, [pc, #24]	; (42e4 <timer_init+0x5c>)
    42ca:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    42cc:	2300      	movs	r3, #0
}
    42ce:	4618      	mov	r0, r3
    42d0:	3710      	adds	r7, #16
    42d2:	46bd      	mov	sp, r7
    42d4:	bd80      	pop	{r7, pc}
    42d6:	bf00      	nop
    42d8:	000113f4 	.word	0x000113f4
    42dc:	00004f51 	.word	0x00004f51
    42e0:	000091dd 	.word	0x000091dd
    42e4:	00004541 	.word	0x00004541

000042e8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    42e8:	b580      	push	{r7, lr}
    42ea:	b082      	sub	sp, #8
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	2b00      	cmp	r3, #0
    42f4:	bf14      	ite	ne
    42f6:	2301      	movne	r3, #1
    42f8:	2300      	moveq	r3, #0
    42fa:	b2db      	uxtb	r3, r3
    42fc:	2253      	movs	r2, #83	; 0x53
    42fe:	490b      	ldr	r1, [pc, #44]	; (432c <timer_start+0x44>)
    4300:	4618      	mov	r0, r3
    4302:	4b0b      	ldr	r3, [pc, #44]	; (4330 <timer_start+0x48>)
    4304:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	4618      	mov	r0, r3
    430a:	4b0a      	ldr	r3, [pc, #40]	; (4334 <timer_start+0x4c>)
    430c:	4798      	blx	r3
    430e:	4603      	mov	r3, r0
    4310:	2b00      	cmp	r3, #0
    4312:	d002      	beq.n	431a <timer_start+0x32>
		return ERR_DENIED;
    4314:	f06f 0310 	mvn.w	r3, #16
    4318:	e004      	b.n	4324 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	4618      	mov	r0, r3
    431e:	4b06      	ldr	r3, [pc, #24]	; (4338 <timer_start+0x50>)
    4320:	4798      	blx	r3

	return ERR_NONE;
    4322:	2300      	movs	r3, #0
}
    4324:	4618      	mov	r0, r3
    4326:	3708      	adds	r7, #8
    4328:	46bd      	mov	sp, r7
    432a:	bd80      	pop	{r7, pc}
    432c:	000113f4 	.word	0x000113f4
    4330:	00004f51 	.word	0x00004f51
    4334:	00009709 	.word	0x00009709
    4338:	000096a9 	.word	0x000096a9

0000433c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    433c:	b580      	push	{r7, lr}
    433e:	b082      	sub	sp, #8
    4340:	af00      	add	r7, sp, #0
    4342:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	2b00      	cmp	r3, #0
    4348:	bf14      	ite	ne
    434a:	2301      	movne	r3, #1
    434c:	2300      	moveq	r3, #0
    434e:	b2db      	uxtb	r3, r3
    4350:	2261      	movs	r2, #97	; 0x61
    4352:	490d      	ldr	r1, [pc, #52]	; (4388 <timer_stop+0x4c>)
    4354:	4618      	mov	r0, r3
    4356:	4b0d      	ldr	r3, [pc, #52]	; (438c <timer_stop+0x50>)
    4358:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	4618      	mov	r0, r3
    435e:	4b0c      	ldr	r3, [pc, #48]	; (4390 <timer_stop+0x54>)
    4360:	4798      	blx	r3
    4362:	4603      	mov	r3, r0
    4364:	f083 0301 	eor.w	r3, r3, #1
    4368:	b2db      	uxtb	r3, r3
    436a:	2b00      	cmp	r3, #0
    436c:	d002      	beq.n	4374 <timer_stop+0x38>
		return ERR_DENIED;
    436e:	f06f 0310 	mvn.w	r3, #16
    4372:	e004      	b.n	437e <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    4374:	687b      	ldr	r3, [r7, #4]
    4376:	4618      	mov	r0, r3
    4378:	4b06      	ldr	r3, [pc, #24]	; (4394 <timer_stop+0x58>)
    437a:	4798      	blx	r3

	return ERR_NONE;
    437c:	2300      	movs	r3, #0
}
    437e:	4618      	mov	r0, r3
    4380:	3708      	adds	r7, #8
    4382:	46bd      	mov	sp, r7
    4384:	bd80      	pop	{r7, pc}
    4386:	bf00      	nop
    4388:	000113f4 	.word	0x000113f4
    438c:	00004f51 	.word	0x00004f51
    4390:	00009709 	.word	0x00009709
    4394:	000096e9 	.word	0x000096e9

00004398 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    4398:	b580      	push	{r7, lr}
    439a:	b084      	sub	sp, #16
    439c:	af00      	add	r7, sp, #0
    439e:	6078      	str	r0, [r7, #4]
    43a0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	2b00      	cmp	r3, #0
    43a6:	d004      	beq.n	43b2 <timer_add_task+0x1a>
    43a8:	683b      	ldr	r3, [r7, #0]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d001      	beq.n	43b2 <timer_add_task+0x1a>
    43ae:	2301      	movs	r3, #1
    43b0:	e000      	b.n	43b4 <timer_add_task+0x1c>
    43b2:	2300      	movs	r3, #0
    43b4:	f003 0301 	and.w	r3, r3, #1
    43b8:	b2db      	uxtb	r3, r3
    43ba:	227a      	movs	r2, #122	; 0x7a
    43bc:	492d      	ldr	r1, [pc, #180]	; (4474 <timer_add_task+0xdc>)
    43be:	4618      	mov	r0, r3
    43c0:	4b2d      	ldr	r3, [pc, #180]	; (4478 <timer_add_task+0xe0>)
    43c2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	7e1b      	ldrb	r3, [r3, #24]
    43c8:	b2db      	uxtb	r3, r3
    43ca:	f043 0301 	orr.w	r3, r3, #1
    43ce:	b2da      	uxtb	r2, r3
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	3314      	adds	r3, #20
    43d8:	6839      	ldr	r1, [r7, #0]
    43da:	4618      	mov	r0, r3
    43dc:	4b27      	ldr	r3, [pc, #156]	; (447c <timer_add_task+0xe4>)
    43de:	4798      	blx	r3
    43e0:	4603      	mov	r3, r0
    43e2:	2b00      	cmp	r3, #0
    43e4:	d00f      	beq.n	4406 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    43e6:	687b      	ldr	r3, [r7, #4]
    43e8:	7e1b      	ldrb	r3, [r3, #24]
    43ea:	b2db      	uxtb	r3, r3
    43ec:	f023 0301 	bic.w	r3, r3, #1
    43f0:	b2da      	uxtb	r2, r3
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    43f6:	227f      	movs	r2, #127	; 0x7f
    43f8:	491e      	ldr	r1, [pc, #120]	; (4474 <timer_add_task+0xdc>)
    43fa:	2000      	movs	r0, #0
    43fc:	4b1e      	ldr	r3, [pc, #120]	; (4478 <timer_add_task+0xe0>)
    43fe:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4400:	f06f 0311 	mvn.w	r3, #17
    4404:	e032      	b.n	446c <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	691a      	ldr	r2, [r3, #16]
    440a:	683b      	ldr	r3, [r7, #0]
    440c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    440e:	687b      	ldr	r3, [r7, #4]
    4410:	f103 0014 	add.w	r0, r3, #20
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	691b      	ldr	r3, [r3, #16]
    4418:	461a      	mov	r2, r3
    441a:	6839      	ldr	r1, [r7, #0]
    441c:	4b18      	ldr	r3, [pc, #96]	; (4480 <timer_add_task+0xe8>)
    441e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	7e1b      	ldrb	r3, [r3, #24]
    4424:	b2db      	uxtb	r3, r3
    4426:	f023 0301 	bic.w	r3, r3, #1
    442a:	b2da      	uxtb	r2, r3
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	7e1b      	ldrb	r3, [r3, #24]
    4434:	b2db      	uxtb	r3, r3
    4436:	f003 0302 	and.w	r3, r3, #2
    443a:	2b00      	cmp	r3, #0
    443c:	d015      	beq.n	446a <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    443e:	f107 030c 	add.w	r3, r7, #12
    4442:	4618      	mov	r0, r3
    4444:	4b0f      	ldr	r3, [pc, #60]	; (4484 <timer_add_task+0xec>)
    4446:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4448:	687b      	ldr	r3, [r7, #4]
    444a:	7e1b      	ldrb	r3, [r3, #24]
    444c:	b2db      	uxtb	r3, r3
    444e:	f023 0302 	bic.w	r3, r3, #2
    4452:	b2da      	uxtb	r2, r3
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    4458:	687b      	ldr	r3, [r7, #4]
    445a:	4618      	mov	r0, r3
    445c:	4b0a      	ldr	r3, [pc, #40]	; (4488 <timer_add_task+0xf0>)
    445e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4460:	f107 030c 	add.w	r3, r7, #12
    4464:	4618      	mov	r0, r3
    4466:	4b09      	ldr	r3, [pc, #36]	; (448c <timer_add_task+0xf4>)
    4468:	4798      	blx	r3
	}

	return ERR_NONE;
    446a:	2300      	movs	r3, #0
}
    446c:	4618      	mov	r0, r3
    446e:	3710      	adds	r7, #16
    4470:	46bd      	mov	sp, r7
    4472:	bd80      	pop	{r7, pc}
    4474:	000113f4 	.word	0x000113f4
    4478:	00004f51 	.word	0x00004f51
    447c:	00004f79 	.word	0x00004f79
    4480:	00004491 	.word	0x00004491
    4484:	000031b5 	.word	0x000031b5
    4488:	00009769 	.word	0x00009769
    448c:	000031db 	.word	0x000031db

00004490 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4490:	b580      	push	{r7, lr}
    4492:	b088      	sub	sp, #32
    4494:	af00      	add	r7, sp, #0
    4496:	60f8      	str	r0, [r7, #12]
    4498:	60b9      	str	r1, [r7, #8]
    449a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    449c:	2300      	movs	r3, #0
    449e:	61bb      	str	r3, [r7, #24]
    44a0:	68f8      	ldr	r0, [r7, #12]
    44a2:	4b23      	ldr	r3, [pc, #140]	; (4530 <timer_add_timer_task+0xa0>)
    44a4:	4798      	blx	r3
    44a6:	6138      	str	r0, [r7, #16]

	if (!head) {
    44a8:	693b      	ldr	r3, [r7, #16]
    44aa:	2b00      	cmp	r3, #0
    44ac:	d104      	bne.n	44b8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    44ae:	68b9      	ldr	r1, [r7, #8]
    44b0:	68f8      	ldr	r0, [r7, #12]
    44b2:	4b20      	ldr	r3, [pc, #128]	; (4534 <timer_add_timer_task+0xa4>)
    44b4:	4798      	blx	r3
		return;
    44b6:	e037      	b.n	4528 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    44b8:	693b      	ldr	r3, [r7, #16]
    44ba:	61fb      	str	r3, [r7, #28]
    44bc:	e022      	b.n	4504 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    44be:	69fb      	ldr	r3, [r7, #28]
    44c0:	685a      	ldr	r2, [r3, #4]
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	429a      	cmp	r2, r3
    44c6:	d808      	bhi.n	44da <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    44c8:	69fb      	ldr	r3, [r7, #28]
    44ca:	689a      	ldr	r2, [r3, #8]
    44cc:	69fb      	ldr	r3, [r7, #28]
    44ce:	6859      	ldr	r1, [r3, #4]
    44d0:	687b      	ldr	r3, [r7, #4]
    44d2:	1acb      	subs	r3, r1, r3
    44d4:	4413      	add	r3, r2
    44d6:	617b      	str	r3, [r7, #20]
    44d8:	e009      	b.n	44ee <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	689a      	ldr	r2, [r3, #8]
    44de:	69fb      	ldr	r3, [r7, #28]
    44e0:	685b      	ldr	r3, [r3, #4]
    44e2:	441a      	add	r2, r3
    44e4:	687b      	ldr	r3, [r7, #4]
    44e6:	425b      	negs	r3, r3
    44e8:	4413      	add	r3, r2
    44ea:	3301      	adds	r3, #1
    44ec:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    44ee:	68bb      	ldr	r3, [r7, #8]
    44f0:	689a      	ldr	r2, [r3, #8]
    44f2:	697b      	ldr	r3, [r7, #20]
    44f4:	429a      	cmp	r2, r3
    44f6:	d909      	bls.n	450c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    44f8:	69fb      	ldr	r3, [r7, #28]
    44fa:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    44fc:	69f8      	ldr	r0, [r7, #28]
    44fe:	4b0e      	ldr	r3, [pc, #56]	; (4538 <timer_add_timer_task+0xa8>)
    4500:	4798      	blx	r3
    4502:	61f8      	str	r0, [r7, #28]
    4504:	69fb      	ldr	r3, [r7, #28]
    4506:	2b00      	cmp	r3, #0
    4508:	d1d9      	bne.n	44be <timer_add_timer_task+0x2e>
    450a:	e000      	b.n	450e <timer_add_timer_task+0x7e>
			break;
    450c:	bf00      	nop
	}

	if (it == head) {
    450e:	69fa      	ldr	r2, [r7, #28]
    4510:	693b      	ldr	r3, [r7, #16]
    4512:	429a      	cmp	r2, r3
    4514:	d104      	bne.n	4520 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    4516:	68b9      	ldr	r1, [r7, #8]
    4518:	68f8      	ldr	r0, [r7, #12]
    451a:	4b06      	ldr	r3, [pc, #24]	; (4534 <timer_add_timer_task+0xa4>)
    451c:	4798      	blx	r3
    451e:	e003      	b.n	4528 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    4520:	68b9      	ldr	r1, [r7, #8]
    4522:	69b8      	ldr	r0, [r7, #24]
    4524:	4b05      	ldr	r3, [pc, #20]	; (453c <timer_add_timer_task+0xac>)
    4526:	4798      	blx	r3
	}
}
    4528:	3720      	adds	r7, #32
    452a:	46bd      	mov	sp, r7
    452c:	bd80      	pop	{r7, pc}
    452e:	bf00      	nop
    4530:	0000424d 	.word	0x0000424d
    4534:	00004fb1 	.word	0x00004fb1
    4538:	00004265 	.word	0x00004265
    453c:	00005009 	.word	0x00005009

00004540 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4540:	b580      	push	{r7, lr}
    4542:	b086      	sub	sp, #24
    4544:	af00      	add	r7, sp, #0
    4546:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    4548:	687b      	ldr	r3, [r7, #4]
    454a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    454c:	693b      	ldr	r3, [r7, #16]
    454e:	3314      	adds	r3, #20
    4550:	4618      	mov	r0, r3
    4552:	4b27      	ldr	r3, [pc, #156]	; (45f0 <timer_process_counted+0xb0>)
    4554:	4798      	blx	r3
    4556:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    4558:	693b      	ldr	r3, [r7, #16]
    455a:	691b      	ldr	r3, [r3, #16]
    455c:	1c5a      	adds	r2, r3, #1
    455e:	693b      	ldr	r3, [r7, #16]
    4560:	611a      	str	r2, [r3, #16]
    4562:	693b      	ldr	r3, [r7, #16]
    4564:	691b      	ldr	r3, [r3, #16]
    4566:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4568:	693b      	ldr	r3, [r7, #16]
    456a:	7e1b      	ldrb	r3, [r3, #24]
    456c:	b2db      	uxtb	r3, r3
    456e:	f003 0301 	and.w	r3, r3, #1
    4572:	2b00      	cmp	r3, #0
    4574:	d106      	bne.n	4584 <timer_process_counted+0x44>
    4576:	693b      	ldr	r3, [r7, #16]
    4578:	7e1b      	ldrb	r3, [r3, #24]
    457a:	b2db      	uxtb	r3, r3
    457c:	f003 0302 	and.w	r3, r3, #2
    4580:	2b00      	cmp	r3, #0
    4582:	d027      	beq.n	45d4 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4584:	693b      	ldr	r3, [r7, #16]
    4586:	7e1b      	ldrb	r3, [r3, #24]
    4588:	b2db      	uxtb	r3, r3
    458a:	f043 0302 	orr.w	r3, r3, #2
    458e:	b2da      	uxtb	r2, r3
    4590:	693b      	ldr	r3, [r7, #16]
    4592:	761a      	strb	r2, [r3, #24]
		return;
    4594:	e029      	b.n	45ea <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    4596:	697b      	ldr	r3, [r7, #20]
    4598:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    459a:	693b      	ldr	r3, [r7, #16]
    459c:	3314      	adds	r3, #20
    459e:	4618      	mov	r0, r3
    45a0:	4b14      	ldr	r3, [pc, #80]	; (45f4 <timer_process_counted+0xb4>)
    45a2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    45a4:	68bb      	ldr	r3, [r7, #8]
    45a6:	7c1b      	ldrb	r3, [r3, #16]
    45a8:	2b01      	cmp	r3, #1
    45aa:	d109      	bne.n	45c0 <timer_process_counted+0x80>
			tmp->time_label = time;
    45ac:	68bb      	ldr	r3, [r7, #8]
    45ae:	68fa      	ldr	r2, [r7, #12]
    45b0:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    45b2:	693b      	ldr	r3, [r7, #16]
    45b4:	3314      	adds	r3, #20
    45b6:	68fa      	ldr	r2, [r7, #12]
    45b8:	68b9      	ldr	r1, [r7, #8]
    45ba:	4618      	mov	r0, r3
    45bc:	4b0e      	ldr	r3, [pc, #56]	; (45f8 <timer_process_counted+0xb8>)
    45be:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    45c0:	693b      	ldr	r3, [r7, #16]
    45c2:	3314      	adds	r3, #20
    45c4:	4618      	mov	r0, r3
    45c6:	4b0a      	ldr	r3, [pc, #40]	; (45f0 <timer_process_counted+0xb0>)
    45c8:	4798      	blx	r3
    45ca:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    45cc:	68bb      	ldr	r3, [r7, #8]
    45ce:	68db      	ldr	r3, [r3, #12]
    45d0:	68b8      	ldr	r0, [r7, #8]
    45d2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    45d4:	697b      	ldr	r3, [r7, #20]
    45d6:	2b00      	cmp	r3, #0
    45d8:	d007      	beq.n	45ea <timer_process_counted+0xaa>
    45da:	697b      	ldr	r3, [r7, #20]
    45dc:	685b      	ldr	r3, [r3, #4]
    45de:	68fa      	ldr	r2, [r7, #12]
    45e0:	1ad2      	subs	r2, r2, r3
    45e2:	697b      	ldr	r3, [r7, #20]
    45e4:	689b      	ldr	r3, [r3, #8]
    45e6:	429a      	cmp	r2, r3
    45e8:	d2d5      	bcs.n	4596 <timer_process_counted+0x56>
	}
}
    45ea:	3718      	adds	r7, #24
    45ec:	46bd      	mov	sp, r7
    45ee:	bd80      	pop	{r7, pc}
    45f0:	0000424d 	.word	0x0000424d
    45f4:	000050a9 	.word	0x000050a9
    45f8:	00004491 	.word	0x00004491

000045fc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    45fc:	b480      	push	{r7}
    45fe:	b085      	sub	sp, #20
    4600:	af00      	add	r7, sp, #0
    4602:	4603      	mov	r3, r0
    4604:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4606:	2300      	movs	r3, #0
    4608:	73fb      	strb	r3, [r7, #15]
    460a:	e029      	b.n	4660 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    460c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4610:	4a19      	ldr	r2, [pc, #100]	; (4678 <_usb_d_find_ep+0x7c>)
    4612:	015b      	lsls	r3, r3, #5
    4614:	4413      	add	r3, r2
    4616:	3301      	adds	r3, #1
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	79fa      	ldrb	r2, [r7, #7]
    461c:	429a      	cmp	r2, r3
    461e:	d102      	bne.n	4626 <_usb_d_find_ep+0x2a>
			return i;
    4620:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4624:	e022      	b.n	466c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4626:	f997 300f 	ldrsb.w	r3, [r7, #15]
    462a:	4a13      	ldr	r2, [pc, #76]	; (4678 <_usb_d_find_ep+0x7c>)
    462c:	015b      	lsls	r3, r3, #5
    462e:	4413      	add	r3, r2
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	2b00      	cmp	r3, #0
    4634:	d10e      	bne.n	4654 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4636:	79fb      	ldrb	r3, [r7, #7]
    4638:	f003 030f 	and.w	r3, r3, #15
    463c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    4640:	490d      	ldr	r1, [pc, #52]	; (4678 <_usb_d_find_ep+0x7c>)
    4642:	0152      	lsls	r2, r2, #5
    4644:	440a      	add	r2, r1
    4646:	3201      	adds	r2, #1
    4648:	7812      	ldrb	r2, [r2, #0]
    464a:	4293      	cmp	r3, r2
    464c:	d102      	bne.n	4654 <_usb_d_find_ep+0x58>
			return i;
    464e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4652:	e00b      	b.n	466c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4654:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4658:	b2db      	uxtb	r3, r3
    465a:	3301      	adds	r3, #1
    465c:	b2db      	uxtb	r3, r3
    465e:	73fb      	strb	r3, [r7, #15]
    4660:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4664:	2b03      	cmp	r3, #3
    4666:	ddd1      	ble.n	460c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    4668:	f04f 33ff 	mov.w	r3, #4294967295
}
    466c:	4618      	mov	r0, r3
    466e:	3714      	adds	r7, #20
    4670:	46bd      	mov	sp, r7
    4672:	f85d 7b04 	ldr.w	r7, [sp], #4
    4676:	4770      	bx	lr
    4678:	20001be0 	.word	0x20001be0

0000467c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    467c:	b580      	push	{r7, lr}
    467e:	b088      	sub	sp, #32
    4680:	af00      	add	r7, sp, #0
    4682:	60ba      	str	r2, [r7, #8]
    4684:	607b      	str	r3, [r7, #4]
    4686:	4603      	mov	r3, r0
    4688:	73fb      	strb	r3, [r7, #15]
    468a:	460b      	mov	r3, r1
    468c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    468e:	68bb      	ldr	r3, [r7, #8]
    4690:	617b      	str	r3, [r7, #20]
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	61bb      	str	r3, [r7, #24]
    4696:	7bbb      	ldrb	r3, [r7, #14]
    4698:	2b00      	cmp	r3, #0
    469a:	d004      	beq.n	46a6 <_usb_d_trans+0x2a>
    469c:	7bfb      	ldrb	r3, [r7, #15]
    469e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    46a2:	b2db      	uxtb	r3, r3
    46a4:	e003      	b.n	46ae <_usb_d_trans+0x32>
    46a6:	7bfb      	ldrb	r3, [r7, #15]
    46a8:	f003 030f 	and.w	r3, r3, #15
    46ac:	b2db      	uxtb	r3, r3
    46ae:	773b      	strb	r3, [r7, #28]
    46b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    46b4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    46b6:	f107 0314 	add.w	r3, r7, #20
    46ba:	4618      	mov	r0, r3
    46bc:	4b03      	ldr	r3, [pc, #12]	; (46cc <_usb_d_trans+0x50>)
    46be:	4798      	blx	r3
    46c0:	4603      	mov	r3, r0
}
    46c2:	4618      	mov	r0, r3
    46c4:	3720      	adds	r7, #32
    46c6:	46bd      	mov	sp, r7
    46c8:	bd80      	pop	{r7, pc}
    46ca:	bf00      	nop
    46cc:	0000be85 	.word	0x0000be85

000046d0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    46d0:	b480      	push	{r7}
    46d2:	b085      	sub	sp, #20
    46d4:	af00      	add	r7, sp, #0
    46d6:	60f8      	str	r0, [r7, #12]
    46d8:	60b9      	str	r1, [r7, #8]
    46da:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    46dc:	2300      	movs	r3, #0
}
    46de:	4618      	mov	r0, r3
    46e0:	3714      	adds	r7, #20
    46e2:	46bd      	mov	sp, r7
    46e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46e8:	4770      	bx	lr
	...

000046ec <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    46ec:	b580      	push	{r7, lr}
    46ee:	b086      	sub	sp, #24
    46f0:	af00      	add	r7, sp, #0
    46f2:	4603      	mov	r3, r0
    46f4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    46f6:	79fb      	ldrb	r3, [r7, #7]
    46f8:	4618      	mov	r0, r3
    46fa:	4b2a      	ldr	r3, [pc, #168]	; (47a4 <usb_d_cb_trans_setup+0xb8>)
    46fc:	4798      	blx	r3
    46fe:	4603      	mov	r3, r0
    4700:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4702:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4706:	015b      	lsls	r3, r3, #5
    4708:	4a27      	ldr	r2, [pc, #156]	; (47a8 <usb_d_cb_trans_setup+0xbc>)
    470a:	4413      	add	r3, r2
    470c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    470e:	693b      	ldr	r3, [r7, #16]
    4710:	330c      	adds	r3, #12
    4712:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4714:	79fb      	ldrb	r3, [r7, #7]
    4716:	68f9      	ldr	r1, [r7, #12]
    4718:	4618      	mov	r0, r3
    471a:	4b24      	ldr	r3, [pc, #144]	; (47ac <usb_d_cb_trans_setup+0xc0>)
    471c:	4798      	blx	r3
    471e:	4603      	mov	r3, r0
    4720:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    4722:	7afb      	ldrb	r3, [r7, #11]
    4724:	2b08      	cmp	r3, #8
    4726:	d00d      	beq.n	4744 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4728:	79fb      	ldrb	r3, [r7, #7]
    472a:	2101      	movs	r1, #1
    472c:	4618      	mov	r0, r3
    472e:	4b20      	ldr	r3, [pc, #128]	; (47b0 <usb_d_cb_trans_setup+0xc4>)
    4730:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4732:	79fb      	ldrb	r3, [r7, #7]
    4734:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4738:	b2db      	uxtb	r3, r3
    473a:	2101      	movs	r1, #1
    473c:	4618      	mov	r0, r3
    473e:	4b1c      	ldr	r3, [pc, #112]	; (47b0 <usb_d_cb_trans_setup+0xc4>)
    4740:	4798      	blx	r3
		return;
    4742:	e02b      	b.n	479c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4744:	79fb      	ldrb	r3, [r7, #7]
    4746:	2100      	movs	r1, #0
    4748:	4618      	mov	r0, r3
    474a:	4b19      	ldr	r3, [pc, #100]	; (47b0 <usb_d_cb_trans_setup+0xc4>)
    474c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    474e:	79fb      	ldrb	r3, [r7, #7]
    4750:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4754:	b2db      	uxtb	r3, r3
    4756:	2100      	movs	r1, #0
    4758:	4618      	mov	r0, r3
    475a:	4b15      	ldr	r3, [pc, #84]	; (47b0 <usb_d_cb_trans_setup+0xc4>)
    475c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    475e:	693b      	ldr	r3, [r7, #16]
    4760:	2201      	movs	r2, #1
    4762:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4764:	693b      	ldr	r3, [r7, #16]
    4766:	695b      	ldr	r3, [r3, #20]
    4768:	79fa      	ldrb	r2, [r7, #7]
    476a:	68f9      	ldr	r1, [r7, #12]
    476c:	4610      	mov	r0, r2
    476e:	4798      	blx	r3
    4770:	4603      	mov	r3, r0
    4772:	f083 0301 	eor.w	r3, r3, #1
    4776:	b2db      	uxtb	r3, r3
    4778:	2b00      	cmp	r3, #0
    477a:	d00f      	beq.n	479c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    477c:	693b      	ldr	r3, [r7, #16]
    477e:	2205      	movs	r2, #5
    4780:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4782:	79fb      	ldrb	r3, [r7, #7]
    4784:	2101      	movs	r1, #1
    4786:	4618      	mov	r0, r3
    4788:	4b09      	ldr	r3, [pc, #36]	; (47b0 <usb_d_cb_trans_setup+0xc4>)
    478a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    478c:	79fb      	ldrb	r3, [r7, #7]
    478e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4792:	b2db      	uxtb	r3, r3
    4794:	2101      	movs	r1, #1
    4796:	4618      	mov	r0, r3
    4798:	4b05      	ldr	r3, [pc, #20]	; (47b0 <usb_d_cb_trans_setup+0xc4>)
    479a:	4798      	blx	r3
	}
}
    479c:	3718      	adds	r7, #24
    479e:	46bd      	mov	sp, r7
    47a0:	bd80      	pop	{r7, pc}
    47a2:	bf00      	nop
    47a4:	000045fd 	.word	0x000045fd
    47a8:	20001be0 	.word	0x20001be0
    47ac:	0000bddd 	.word	0x0000bddd
    47b0:	0000bc55 	.word	0x0000bc55

000047b4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    47b4:	b580      	push	{r7, lr}
    47b6:	b084      	sub	sp, #16
    47b8:	af00      	add	r7, sp, #0
    47ba:	4603      	mov	r3, r0
    47bc:	6039      	str	r1, [r7, #0]
    47be:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    47c0:	79fb      	ldrb	r3, [r7, #7]
    47c2:	4618      	mov	r0, r3
    47c4:	4b0d      	ldr	r3, [pc, #52]	; (47fc <usb_d_cb_trans_more+0x48>)
    47c6:	4798      	blx	r3
    47c8:	4603      	mov	r3, r0
    47ca:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    47cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    47d0:	015b      	lsls	r3, r3, #5
    47d2:	4a0b      	ldr	r2, [pc, #44]	; (4800 <usb_d_cb_trans_more+0x4c>)
    47d4:	4413      	add	r3, r2
    47d6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    47d8:	68bb      	ldr	r3, [r7, #8]
    47da:	789b      	ldrb	r3, [r3, #2]
    47dc:	2b03      	cmp	r3, #3
    47de:	d107      	bne.n	47f0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    47e0:	68bb      	ldr	r3, [r7, #8]
    47e2:	699b      	ldr	r3, [r3, #24]
    47e4:	79fa      	ldrb	r2, [r7, #7]
    47e6:	6839      	ldr	r1, [r7, #0]
    47e8:	4610      	mov	r0, r2
    47ea:	4798      	blx	r3
    47ec:	4603      	mov	r3, r0
    47ee:	e000      	b.n	47f2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    47f0:	2300      	movs	r3, #0
}
    47f2:	4618      	mov	r0, r3
    47f4:	3710      	adds	r7, #16
    47f6:	46bd      	mov	sp, r7
    47f8:	bd80      	pop	{r7, pc}
    47fa:	bf00      	nop
    47fc:	000045fd 	.word	0x000045fd
    4800:	20001be0 	.word	0x20001be0

00004804 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    4804:	b590      	push	{r4, r7, lr}
    4806:	b087      	sub	sp, #28
    4808:	af02      	add	r7, sp, #8
    480a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    480c:	687b      	ldr	r3, [r7, #4]
    480e:	789b      	ldrb	r3, [r3, #2]
    4810:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	7b1b      	ldrb	r3, [r3, #12]
    4816:	f003 0380 	and.w	r3, r3, #128	; 0x80
    481a:	2b00      	cmp	r3, #0
    481c:	bf14      	ite	ne
    481e:	2301      	movne	r3, #1
    4820:	2300      	moveq	r3, #0
    4822:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    4824:	7bfb      	ldrb	r3, [r7, #15]
    4826:	2b03      	cmp	r3, #3
    4828:	d13a      	bne.n	48a0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	69db      	ldr	r3, [r3, #28]
    482e:	687a      	ldr	r2, [r7, #4]
    4830:	7850      	ldrb	r0, [r2, #1]
    4832:	687a      	ldr	r2, [r7, #4]
    4834:	320c      	adds	r2, #12
    4836:	2101      	movs	r1, #1
    4838:	4798      	blx	r3
    483a:	4603      	mov	r3, r0
    483c:	737b      	strb	r3, [r7, #13]
		if (err) {
    483e:	7b7b      	ldrb	r3, [r7, #13]
    4840:	2b00      	cmp	r3, #0
    4842:	d015      	beq.n	4870 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	2205      	movs	r2, #5
    4848:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	2202      	movs	r2, #2
    484e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4850:	7bbb      	ldrb	r3, [r7, #14]
    4852:	2b00      	cmp	r3, #0
    4854:	d002      	beq.n	485c <usb_d_ctrl_trans_done+0x58>
    4856:	687b      	ldr	r3, [r7, #4]
    4858:	785b      	ldrb	r3, [r3, #1]
    485a:	e004      	b.n	4866 <usb_d_ctrl_trans_done+0x62>
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	785b      	ldrb	r3, [r3, #1]
    4860:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4864:	b2db      	uxtb	r3, r3
    4866:	2101      	movs	r1, #1
    4868:	4618      	mov	r0, r3
    486a:	4b15      	ldr	r3, [pc, #84]	; (48c0 <usb_d_ctrl_trans_done+0xbc>)
    486c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    486e:	e022      	b.n	48b6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4870:	687b      	ldr	r3, [r7, #4]
    4872:	2204      	movs	r2, #4
    4874:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	7858      	ldrb	r0, [r3, #1]
    487a:	7bbb      	ldrb	r3, [r7, #14]
    487c:	2b00      	cmp	r3, #0
    487e:	bf14      	ite	ne
    4880:	2301      	movne	r3, #1
    4882:	2300      	moveq	r3, #0
    4884:	b2db      	uxtb	r3, r3
    4886:	f083 0301 	eor.w	r3, r3, #1
    488a:	b2db      	uxtb	r3, r3
    488c:	f003 0301 	and.w	r3, r3, #1
    4890:	b2d9      	uxtb	r1, r3
    4892:	2301      	movs	r3, #1
    4894:	9300      	str	r3, [sp, #0]
    4896:	2300      	movs	r3, #0
    4898:	2200      	movs	r2, #0
    489a:	4c0a      	ldr	r4, [pc, #40]	; (48c4 <usb_d_ctrl_trans_done+0xc0>)
    489c:	47a0      	blx	r4
}
    489e:	e00a      	b.n	48b6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	69db      	ldr	r3, [r3, #28]
    48a4:	687a      	ldr	r2, [r7, #4]
    48a6:	7850      	ldrb	r0, [r2, #1]
    48a8:	687a      	ldr	r2, [r7, #4]
    48aa:	320c      	adds	r2, #12
    48ac:	2100      	movs	r1, #0
    48ae:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    48b0:	687b      	ldr	r3, [r7, #4]
    48b2:	2202      	movs	r2, #2
    48b4:	709a      	strb	r2, [r3, #2]
}
    48b6:	bf00      	nop
    48b8:	3714      	adds	r7, #20
    48ba:	46bd      	mov	sp, r7
    48bc:	bd90      	pop	{r4, r7, pc}
    48be:	bf00      	nop
    48c0:	0000bc55 	.word	0x0000bc55
    48c4:	0000467d 	.word	0x0000467d

000048c8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    48c8:	b580      	push	{r7, lr}
    48ca:	b086      	sub	sp, #24
    48cc:	af00      	add	r7, sp, #0
    48ce:	4603      	mov	r3, r0
    48d0:	60b9      	str	r1, [r7, #8]
    48d2:	607a      	str	r2, [r7, #4]
    48d4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    48d6:	7bfb      	ldrb	r3, [r7, #15]
    48d8:	4618      	mov	r0, r3
    48da:	4b2f      	ldr	r3, [pc, #188]	; (4998 <_usb_d_cb_trans_done+0xd0>)
    48dc:	4798      	blx	r3
    48de:	4603      	mov	r3, r0
    48e0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    48e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    48e6:	015b      	lsls	r3, r3, #5
    48e8:	4a2c      	ldr	r2, [pc, #176]	; (499c <_usb_d_cb_trans_done+0xd4>)
    48ea:	4413      	add	r3, r2
    48ec:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    48ee:	68bb      	ldr	r3, [r7, #8]
    48f0:	2b00      	cmp	r3, #0
    48f2:	d10e      	bne.n	4912 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    48f4:	693b      	ldr	r3, [r7, #16]
    48f6:	2200      	movs	r2, #0
    48f8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    48fa:	693b      	ldr	r3, [r7, #16]
    48fc:	781b      	ldrb	r3, [r3, #0]
    48fe:	2b00      	cmp	r3, #0
    4900:	d103      	bne.n	490a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    4902:	6938      	ldr	r0, [r7, #16]
    4904:	4b26      	ldr	r3, [pc, #152]	; (49a0 <_usb_d_cb_trans_done+0xd8>)
    4906:	4798      	blx	r3
			return;
    4908:	e043      	b.n	4992 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    490a:	693b      	ldr	r3, [r7, #16]
    490c:	2201      	movs	r2, #1
    490e:	709a      	strb	r2, [r3, #2]
    4910:	e038      	b.n	4984 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    4912:	68bb      	ldr	r3, [r7, #8]
    4914:	2b01      	cmp	r3, #1
    4916:	d113      	bne.n	4940 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4918:	693b      	ldr	r3, [r7, #16]
    491a:	2202      	movs	r2, #2
    491c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    491e:	693b      	ldr	r3, [r7, #16]
    4920:	781b      	ldrb	r3, [r3, #0]
    4922:	2b00      	cmp	r3, #0
    4924:	d108      	bne.n	4938 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4926:	693b      	ldr	r3, [r7, #16]
    4928:	2202      	movs	r2, #2
    492a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    492c:	7bfb      	ldrb	r3, [r7, #15]
    492e:	2100      	movs	r1, #0
    4930:	4618      	mov	r0, r3
    4932:	4b1c      	ldr	r3, [pc, #112]	; (49a4 <_usb_d_cb_trans_done+0xdc>)
    4934:	4798      	blx	r3
    4936:	e025      	b.n	4984 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    4938:	693b      	ldr	r3, [r7, #16]
    493a:	2205      	movs	r2, #5
    493c:	709a      	strb	r2, [r3, #2]
    493e:	e021      	b.n	4984 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    4940:	68bb      	ldr	r3, [r7, #8]
    4942:	2b02      	cmp	r3, #2
    4944:	d10e      	bne.n	4964 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4946:	693b      	ldr	r3, [r7, #16]
    4948:	2204      	movs	r2, #4
    494a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    494c:	693b      	ldr	r3, [r7, #16]
    494e:	781b      	ldrb	r3, [r3, #0]
    4950:	2b00      	cmp	r3, #0
    4952:	d103      	bne.n	495c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4954:	693b      	ldr	r3, [r7, #16]
    4956:	2202      	movs	r2, #2
    4958:	709a      	strb	r2, [r3, #2]
			return;
    495a:	e01a      	b.n	4992 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    495c:	693b      	ldr	r3, [r7, #16]
    495e:	2201      	movs	r2, #1
    4960:	709a      	strb	r2, [r3, #2]
    4962:	e00f      	b.n	4984 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    4964:	68bb      	ldr	r3, [r7, #8]
    4966:	2b03      	cmp	r3, #3
    4968:	d106      	bne.n	4978 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    496a:	693b      	ldr	r3, [r7, #16]
    496c:	2200      	movs	r2, #0
    496e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    4970:	693b      	ldr	r3, [r7, #16]
    4972:	2205      	movs	r2, #5
    4974:	70da      	strb	r2, [r3, #3]
    4976:	e005      	b.n	4984 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    4978:	693b      	ldr	r3, [r7, #16]
    497a:	2206      	movs	r2, #6
    497c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    497e:	693b      	ldr	r3, [r7, #16]
    4980:	2206      	movs	r2, #6
    4982:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4984:	693b      	ldr	r3, [r7, #16]
    4986:	69db      	ldr	r3, [r3, #28]
    4988:	693a      	ldr	r2, [r7, #16]
    498a:	78d1      	ldrb	r1, [r2, #3]
    498c:	687a      	ldr	r2, [r7, #4]
    498e:	7bf8      	ldrb	r0, [r7, #15]
    4990:	4798      	blx	r3
}
    4992:	3718      	adds	r7, #24
    4994:	46bd      	mov	sp, r7
    4996:	bd80      	pop	{r7, pc}
    4998:	000045fd 	.word	0x000045fd
    499c:	20001be0 	.word	0x20001be0
    49a0:	00004805 	.word	0x00004805
    49a4:	0000bc55 	.word	0x0000bc55

000049a8 <usb_d_init>:

int32_t usb_d_init(void)
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b082      	sub	sp, #8
    49ac:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    49ae:	4b21      	ldr	r3, [pc, #132]	; (4a34 <usb_d_init+0x8c>)
    49b0:	4798      	blx	r3
    49b2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    49b4:	683b      	ldr	r3, [r7, #0]
    49b6:	2b00      	cmp	r3, #0
    49b8:	da01      	bge.n	49be <usb_d_init+0x16>
		return rc;
    49ba:	683b      	ldr	r3, [r7, #0]
    49bc:	e036      	b.n	4a2c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    49be:	2280      	movs	r2, #128	; 0x80
    49c0:	2100      	movs	r1, #0
    49c2:	481d      	ldr	r0, [pc, #116]	; (4a38 <usb_d_init+0x90>)
    49c4:	4b1d      	ldr	r3, [pc, #116]	; (4a3c <usb_d_init+0x94>)
    49c6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    49c8:	2300      	movs	r3, #0
    49ca:	71fb      	strb	r3, [r7, #7]
    49cc:	e01e      	b.n	4a0c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    49ce:	79fb      	ldrb	r3, [r7, #7]
    49d0:	4a19      	ldr	r2, [pc, #100]	; (4a38 <usb_d_init+0x90>)
    49d2:	015b      	lsls	r3, r3, #5
    49d4:	4413      	add	r3, r2
    49d6:	3301      	adds	r3, #1
    49d8:	22ff      	movs	r2, #255	; 0xff
    49da:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    49dc:	79fb      	ldrb	r3, [r7, #7]
    49de:	4a16      	ldr	r2, [pc, #88]	; (4a38 <usb_d_init+0x90>)
    49e0:	015b      	lsls	r3, r3, #5
    49e2:	4413      	add	r3, r2
    49e4:	3314      	adds	r3, #20
    49e6:	4a16      	ldr	r2, [pc, #88]	; (4a40 <usb_d_init+0x98>)
    49e8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    49ea:	79fb      	ldrb	r3, [r7, #7]
    49ec:	4a12      	ldr	r2, [pc, #72]	; (4a38 <usb_d_init+0x90>)
    49ee:	015b      	lsls	r3, r3, #5
    49f0:	4413      	add	r3, r2
    49f2:	3318      	adds	r3, #24
    49f4:	4a12      	ldr	r2, [pc, #72]	; (4a40 <usb_d_init+0x98>)
    49f6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    49f8:	79fb      	ldrb	r3, [r7, #7]
    49fa:	4a0f      	ldr	r2, [pc, #60]	; (4a38 <usb_d_init+0x90>)
    49fc:	015b      	lsls	r3, r3, #5
    49fe:	4413      	add	r3, r2
    4a00:	331c      	adds	r3, #28
    4a02:	4a0f      	ldr	r2, [pc, #60]	; (4a40 <usb_d_init+0x98>)
    4a04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4a06:	79fb      	ldrb	r3, [r7, #7]
    4a08:	3301      	adds	r3, #1
    4a0a:	71fb      	strb	r3, [r7, #7]
    4a0c:	79fb      	ldrb	r3, [r7, #7]
    4a0e:	2b03      	cmp	r3, #3
    4a10:	d9dd      	bls.n	49ce <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    4a12:	490c      	ldr	r1, [pc, #48]	; (4a44 <usb_d_init+0x9c>)
    4a14:	2000      	movs	r0, #0
    4a16:	4b0c      	ldr	r3, [pc, #48]	; (4a48 <usb_d_init+0xa0>)
    4a18:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    4a1a:	490c      	ldr	r1, [pc, #48]	; (4a4c <usb_d_init+0xa4>)
    4a1c:	2001      	movs	r0, #1
    4a1e:	4b0a      	ldr	r3, [pc, #40]	; (4a48 <usb_d_init+0xa0>)
    4a20:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    4a22:	490b      	ldr	r1, [pc, #44]	; (4a50 <usb_d_init+0xa8>)
    4a24:	2002      	movs	r0, #2
    4a26:	4b08      	ldr	r3, [pc, #32]	; (4a48 <usb_d_init+0xa0>)
    4a28:	4798      	blx	r3
	return ERR_NONE;
    4a2a:	2300      	movs	r3, #0
}
    4a2c:	4618      	mov	r0, r3
    4a2e:	3708      	adds	r7, #8
    4a30:	46bd      	mov	sp, r7
    4a32:	bd80      	pop	{r7, pc}
    4a34:	0000b49d 	.word	0x0000b49d
    4a38:	20001be0 	.word	0x20001be0
    4a3c:	000102ed 	.word	0x000102ed
    4a40:	000046d1 	.word	0x000046d1
    4a44:	000046ed 	.word	0x000046ed
    4a48:	0000c0e5 	.word	0x0000c0e5
    4a4c:	000047b5 	.word	0x000047b5
    4a50:	000048c9 	.word	0x000048c9

00004a54 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4a54:	b580      	push	{r7, lr}
    4a56:	b082      	sub	sp, #8
    4a58:	af00      	add	r7, sp, #0
    4a5a:	4603      	mov	r3, r0
    4a5c:	6039      	str	r1, [r7, #0]
    4a5e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    4a60:	79fb      	ldrb	r3, [r7, #7]
    4a62:	6839      	ldr	r1, [r7, #0]
    4a64:	4618      	mov	r0, r3
    4a66:	4b03      	ldr	r3, [pc, #12]	; (4a74 <usb_d_register_callback+0x20>)
    4a68:	4798      	blx	r3
}
    4a6a:	bf00      	nop
    4a6c:	3708      	adds	r7, #8
    4a6e:	46bd      	mov	sp, r7
    4a70:	bd80      	pop	{r7, pc}
    4a72:	bf00      	nop
    4a74:	0000c09d 	.word	0x0000c09d

00004a78 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    4a78:	b580      	push	{r7, lr}
    4a7a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    4a7c:	4b02      	ldr	r3, [pc, #8]	; (4a88 <usb_d_enable+0x10>)
    4a7e:	4798      	blx	r3
    4a80:	4603      	mov	r3, r0
}
    4a82:	4618      	mov	r0, r3
    4a84:	bd80      	pop	{r7, pc}
    4a86:	bf00      	nop
    4a88:	0000b58d 	.word	0x0000b58d

00004a8c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    4a8c:	b580      	push	{r7, lr}
    4a8e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    4a90:	4b01      	ldr	r3, [pc, #4]	; (4a98 <usb_d_attach+0xc>)
    4a92:	4798      	blx	r3
}
    4a94:	bf00      	nop
    4a96:	bd80      	pop	{r7, pc}
    4a98:	0000b611 	.word	0x0000b611

00004a9c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4a9c:	b580      	push	{r7, lr}
    4a9e:	b082      	sub	sp, #8
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	4603      	mov	r3, r0
    4aa4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    4aa6:	79fb      	ldrb	r3, [r7, #7]
    4aa8:	4618      	mov	r0, r3
    4aaa:	4b03      	ldr	r3, [pc, #12]	; (4ab8 <usb_d_set_address+0x1c>)
    4aac:	4798      	blx	r3
}
    4aae:	bf00      	nop
    4ab0:	3708      	adds	r7, #8
    4ab2:	46bd      	mov	sp, r7
    4ab4:	bd80      	pop	{r7, pc}
    4ab6:	bf00      	nop
    4ab8:	0000b625 	.word	0x0000b625

00004abc <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    4abc:	b580      	push	{r7, lr}
    4abe:	b082      	sub	sp, #8
    4ac0:	af00      	add	r7, sp, #0
    4ac2:	4603      	mov	r3, r0
    4ac4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    4ac6:	79fb      	ldrb	r3, [r7, #7]
    4ac8:	b29b      	uxth	r3, r3
    4aca:	461a      	mov	r2, r3
    4acc:	2100      	movs	r1, #0
    4ace:	2000      	movs	r0, #0
    4ad0:	4b03      	ldr	r3, [pc, #12]	; (4ae0 <usb_d_ep0_init+0x24>)
    4ad2:	4798      	blx	r3
    4ad4:	4603      	mov	r3, r0
}
    4ad6:	4618      	mov	r0, r3
    4ad8:	3708      	adds	r7, #8
    4ada:	46bd      	mov	sp, r7
    4adc:	bd80      	pop	{r7, pc}
    4ade:	bf00      	nop
    4ae0:	00004ae5 	.word	0x00004ae5

00004ae4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	b086      	sub	sp, #24
    4ae8:	af00      	add	r7, sp, #0
    4aea:	4603      	mov	r3, r0
    4aec:	71fb      	strb	r3, [r7, #7]
    4aee:	460b      	mov	r3, r1
    4af0:	71bb      	strb	r3, [r7, #6]
    4af2:	4613      	mov	r3, r2
    4af4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4af6:	79fb      	ldrb	r3, [r7, #7]
    4af8:	4618      	mov	r0, r3
    4afa:	4b1e      	ldr	r3, [pc, #120]	; (4b74 <usb_d_ep_init+0x90>)
    4afc:	4798      	blx	r3
    4afe:	4603      	mov	r3, r0
    4b00:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4b06:	015b      	lsls	r3, r3, #5
    4b08:	4a1b      	ldr	r2, [pc, #108]	; (4b78 <usb_d_ep_init+0x94>)
    4b0a:	4413      	add	r3, r2
    4b0c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    4b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4b12:	2b00      	cmp	r3, #0
    4b14:	db02      	blt.n	4b1c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    4b16:	f06f 0313 	mvn.w	r3, #19
    4b1a:	e027      	b.n	4b6c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    4b1c:	20ff      	movs	r0, #255	; 0xff
    4b1e:	4b15      	ldr	r3, [pc, #84]	; (4b74 <usb_d_ep_init+0x90>)
    4b20:	4798      	blx	r3
    4b22:	4603      	mov	r3, r0
    4b24:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    4b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	da02      	bge.n	4b34 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    4b2e:	f06f 0314 	mvn.w	r3, #20
    4b32:	e01b      	b.n	4b6c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    4b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4b38:	015b      	lsls	r3, r3, #5
    4b3a:	4a0f      	ldr	r2, [pc, #60]	; (4b78 <usb_d_ep_init+0x94>)
    4b3c:	4413      	add	r3, r2
    4b3e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    4b40:	88ba      	ldrh	r2, [r7, #4]
    4b42:	79b9      	ldrb	r1, [r7, #6]
    4b44:	79fb      	ldrb	r3, [r7, #7]
    4b46:	4618      	mov	r0, r3
    4b48:	4b0c      	ldr	r3, [pc, #48]	; (4b7c <usb_d_ep_init+0x98>)
    4b4a:	4798      	blx	r3
    4b4c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4b4e:	68fb      	ldr	r3, [r7, #12]
    4b50:	2b00      	cmp	r3, #0
    4b52:	da01      	bge.n	4b58 <usb_d_ep_init+0x74>
		return rc;
    4b54:	68fb      	ldr	r3, [r7, #12]
    4b56:	e009      	b.n	4b6c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    4b58:	693b      	ldr	r3, [r7, #16]
    4b5a:	79fa      	ldrb	r2, [r7, #7]
    4b5c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    4b5e:	79bb      	ldrb	r3, [r7, #6]
    4b60:	f003 0303 	and.w	r3, r3, #3
    4b64:	b2da      	uxtb	r2, r3
    4b66:	693b      	ldr	r3, [r7, #16]
    4b68:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    4b6a:	2300      	movs	r3, #0
}
    4b6c:	4618      	mov	r0, r3
    4b6e:	3718      	adds	r7, #24
    4b70:	46bd      	mov	sp, r7
    4b72:	bd80      	pop	{r7, pc}
    4b74:	000045fd 	.word	0x000045fd
    4b78:	20001be0 	.word	0x20001be0
    4b7c:	0000b6c5 	.word	0x0000b6c5

00004b80 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    4b80:	b580      	push	{r7, lr}
    4b82:	b084      	sub	sp, #16
    4b84:	af00      	add	r7, sp, #0
    4b86:	4603      	mov	r3, r0
    4b88:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4b8a:	79fb      	ldrb	r3, [r7, #7]
    4b8c:	4618      	mov	r0, r3
    4b8e:	4b0d      	ldr	r3, [pc, #52]	; (4bc4 <usb_d_ep_deinit+0x44>)
    4b90:	4798      	blx	r3
    4b92:	4603      	mov	r3, r0
    4b94:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b9a:	015b      	lsls	r3, r3, #5
    4b9c:	4a0a      	ldr	r2, [pc, #40]	; (4bc8 <usb_d_ep_deinit+0x48>)
    4b9e:	4413      	add	r3, r2
    4ba0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	db07      	blt.n	4bba <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    4baa:	79fb      	ldrb	r3, [r7, #7]
    4bac:	4618      	mov	r0, r3
    4bae:	4b07      	ldr	r3, [pc, #28]	; (4bcc <usb_d_ep_deinit+0x4c>)
    4bb0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    4bb2:	68bb      	ldr	r3, [r7, #8]
    4bb4:	22ff      	movs	r2, #255	; 0xff
    4bb6:	705a      	strb	r2, [r3, #1]
    4bb8:	e000      	b.n	4bbc <usb_d_ep_deinit+0x3c>
		return;
    4bba:	bf00      	nop
}
    4bbc:	3710      	adds	r7, #16
    4bbe:	46bd      	mov	sp, r7
    4bc0:	bd80      	pop	{r7, pc}
    4bc2:	bf00      	nop
    4bc4:	000045fd 	.word	0x000045fd
    4bc8:	20001be0 	.word	0x20001be0
    4bcc:	0000b7f9 	.word	0x0000b7f9

00004bd0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	b086      	sub	sp, #24
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	4603      	mov	r3, r0
    4bd8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4bda:	79fb      	ldrb	r3, [r7, #7]
    4bdc:	4618      	mov	r0, r3
    4bde:	4b15      	ldr	r3, [pc, #84]	; (4c34 <usb_d_ep_enable+0x64>)
    4be0:	4798      	blx	r3
    4be2:	4603      	mov	r3, r0
    4be4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4bea:	015b      	lsls	r3, r3, #5
    4bec:	4a12      	ldr	r2, [pc, #72]	; (4c38 <usb_d_ep_enable+0x68>)
    4bee:	4413      	add	r3, r2
    4bf0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	da02      	bge.n	4c00 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    4bfa:	f06f 0311 	mvn.w	r3, #17
    4bfe:	e014      	b.n	4c2a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    4c00:	693b      	ldr	r3, [r7, #16]
    4c02:	781b      	ldrb	r3, [r3, #0]
    4c04:	2b00      	cmp	r3, #0
    4c06:	d101      	bne.n	4c0c <usb_d_ep_enable+0x3c>
    4c08:	2202      	movs	r2, #2
    4c0a:	e000      	b.n	4c0e <usb_d_ep_enable+0x3e>
    4c0c:	2201      	movs	r2, #1
    4c0e:	693b      	ldr	r3, [r7, #16]
    4c10:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    4c12:	79fb      	ldrb	r3, [r7, #7]
    4c14:	4618      	mov	r0, r3
    4c16:	4b09      	ldr	r3, [pc, #36]	; (4c3c <usb_d_ep_enable+0x6c>)
    4c18:	4798      	blx	r3
    4c1a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	da02      	bge.n	4c28 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    4c22:	693b      	ldr	r3, [r7, #16]
    4c24:	2200      	movs	r2, #0
    4c26:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    4c28:	68fb      	ldr	r3, [r7, #12]
}
    4c2a:	4618      	mov	r0, r3
    4c2c:	3718      	adds	r7, #24
    4c2e:	46bd      	mov	sp, r7
    4c30:	bd80      	pop	{r7, pc}
    4c32:	bf00      	nop
    4c34:	000045fd 	.word	0x000045fd
    4c38:	20001be0 	.word	0x20001be0
    4c3c:	0000b8dd 	.word	0x0000b8dd

00004c40 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    4c40:	b590      	push	{r4, r7, lr}
    4c42:	b08d      	sub	sp, #52	; 0x34
    4c44:	af02      	add	r7, sp, #8
    4c46:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    4c48:	687b      	ldr	r3, [r7, #4]
    4c4a:	7a1b      	ldrb	r3, [r3, #8]
    4c4c:	4618      	mov	r0, r3
    4c4e:	4b51      	ldr	r3, [pc, #324]	; (4d94 <usb_d_ep_transfer+0x154>)
    4c50:	4798      	blx	r3
    4c52:	4603      	mov	r3, r0
    4c54:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    4c56:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4c5a:	015b      	lsls	r3, r3, #5
    4c5c:	4a4e      	ldr	r2, [pc, #312]	; (4d98 <usb_d_ep_transfer+0x158>)
    4c5e:	4413      	add	r3, r2
    4c60:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    4c62:	687b      	ldr	r3, [r7, #4]
    4c64:	7a1b      	ldrb	r3, [r3, #8]
    4c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	bf14      	ite	ne
    4c6e:	2301      	movne	r3, #1
    4c70:	2300      	moveq	r3, #0
    4c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	7a5b      	ldrb	r3, [r3, #9]
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	bf14      	ite	ne
    4c7e:	2301      	movne	r3, #1
    4c80:	2300      	moveq	r3, #0
    4c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	685b      	ldr	r3, [r3, #4]
    4c8a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    4c8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4c90:	2b00      	cmp	r3, #0
    4c92:	da02      	bge.n	4c9a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    4c94:	f06f 0311 	mvn.w	r3, #17
    4c98:	e077      	b.n	4d8a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    4c9a:	f107 0308 	add.w	r3, r7, #8
    4c9e:	4618      	mov	r0, r3
    4ca0:	4b3e      	ldr	r3, [pc, #248]	; (4d9c <usb_d_ep_transfer+0x15c>)
    4ca2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    4ca4:	69bb      	ldr	r3, [r7, #24]
    4ca6:	789b      	ldrb	r3, [r3, #2]
    4ca8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    4caa:	7bfb      	ldrb	r3, [r7, #15]
    4cac:	b2db      	uxtb	r3, r3
    4cae:	2b01      	cmp	r3, #1
    4cb0:	d10c      	bne.n	4ccc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    4cb2:	69bb      	ldr	r3, [r7, #24]
    4cb4:	2203      	movs	r2, #3
    4cb6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    4cb8:	f107 0308 	add.w	r3, r7, #8
    4cbc:	4618      	mov	r0, r3
    4cbe:	4b38      	ldr	r3, [pc, #224]	; (4da0 <usb_d_ep_transfer+0x160>)
    4cc0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4cc2:	69bb      	ldr	r3, [r7, #24]
    4cc4:	781b      	ldrb	r3, [r3, #0]
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d151      	bne.n	4d6e <usb_d_ep_transfer+0x12e>
    4cca:	e017      	b.n	4cfc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    4ccc:	f107 0308 	add.w	r3, r7, #8
    4cd0:	4618      	mov	r0, r3
    4cd2:	4b33      	ldr	r3, [pc, #204]	; (4da0 <usb_d_ep_transfer+0x160>)
    4cd4:	4798      	blx	r3
		switch (state) {
    4cd6:	7bfb      	ldrb	r3, [r7, #15]
    4cd8:	b2db      	uxtb	r3, r3
    4cda:	2b05      	cmp	r3, #5
    4cdc:	d004      	beq.n	4ce8 <usb_d_ep_transfer+0xa8>
    4cde:	2b06      	cmp	r3, #6
    4ce0:	d004      	beq.n	4cec <usb_d_ep_transfer+0xac>
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d005      	beq.n	4cf2 <usb_d_ep_transfer+0xb2>
    4ce6:	e007      	b.n	4cf8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    4ce8:	2302      	movs	r3, #2
    4cea:	e04e      	b.n	4d8a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    4cec:	f06f 030f 	mvn.w	r3, #15
    4cf0:	e04b      	b.n	4d8a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    4cf2:	f06f 0312 	mvn.w	r3, #18
    4cf6:	e048      	b.n	4d8a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    4cf8:	2301      	movs	r3, #1
    4cfa:	e046      	b.n	4d8a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    4cfc:	69bb      	ldr	r3, [r7, #24]
    4cfe:	7c9b      	ldrb	r3, [r3, #18]
    4d00:	b29a      	uxth	r2, r3
    4d02:	69bb      	ldr	r3, [r7, #24]
    4d04:	7cdb      	ldrb	r3, [r3, #19]
    4d06:	b29b      	uxth	r3, r3
    4d08:	021b      	lsls	r3, r3, #8
    4d0a:	b29b      	uxth	r3, r3
    4d0c:	4413      	add	r3, r2
    4d0e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    4d10:	8afb      	ldrh	r3, [r7, #22]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d10b      	bne.n	4d2e <usb_d_ep_transfer+0xee>
			dir                 = true;
    4d16:	2301      	movs	r3, #1
    4d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    4d1c:	2300      	movs	r3, #0
    4d1e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    4d20:	2301      	movs	r3, #1
    4d22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4d26:	69bb      	ldr	r3, [r7, #24]
    4d28:	2204      	movs	r2, #4
    4d2a:	709a      	strb	r2, [r3, #2]
    4d2c:	e01f      	b.n	4d6e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    4d2e:	69bb      	ldr	r3, [r7, #24]
    4d30:	7b1b      	ldrb	r3, [r3, #12]
    4d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d36:	2b00      	cmp	r3, #0
    4d38:	bf14      	ite	ne
    4d3a:	2301      	movne	r3, #1
    4d3c:	2300      	moveq	r3, #0
    4d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    4d42:	8afa      	ldrh	r2, [r7, #22]
    4d44:	6a3b      	ldr	r3, [r7, #32]
    4d46:	429a      	cmp	r2, r3
    4d48:	d201      	bcs.n	4d4e <usb_d_ep_transfer+0x10e>
				len = req_len;
    4d4a:	8afb      	ldrh	r3, [r7, #22]
    4d4c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    4d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    4d52:	2b00      	cmp	r3, #0
    4d54:	d008      	beq.n	4d68 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    4d56:	8afa      	ldrh	r2, [r7, #22]
    4d58:	6a3b      	ldr	r3, [r7, #32]
    4d5a:	429a      	cmp	r2, r3
    4d5c:	bf8c      	ite	hi
    4d5e:	2301      	movhi	r3, #1
    4d60:	2300      	movls	r3, #0
    4d62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    4d66:	e002      	b.n	4d6e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    4d68:	2300      	movs	r3, #0
    4d6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    4d6e:	687b      	ldr	r3, [r7, #4]
    4d70:	7a18      	ldrb	r0, [r3, #8]
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	681a      	ldr	r2, [r3, #0]
    4d76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    4d7a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    4d7e:	9300      	str	r3, [sp, #0]
    4d80:	6a3b      	ldr	r3, [r7, #32]
    4d82:	4c08      	ldr	r4, [pc, #32]	; (4da4 <usb_d_ep_transfer+0x164>)
    4d84:	47a0      	blx	r4
    4d86:	6138      	str	r0, [r7, #16]
	return rc;
    4d88:	693b      	ldr	r3, [r7, #16]
}
    4d8a:	4618      	mov	r0, r3
    4d8c:	372c      	adds	r7, #44	; 0x2c
    4d8e:	46bd      	mov	sp, r7
    4d90:	bd90      	pop	{r4, r7, pc}
    4d92:	bf00      	nop
    4d94:	000045fd 	.word	0x000045fd
    4d98:	20001be0 	.word	0x20001be0
    4d9c:	000031b5 	.word	0x000031b5
    4da0:	000031db 	.word	0x000031db
    4da4:	0000467d 	.word	0x0000467d

00004da8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b084      	sub	sp, #16
    4dac:	af00      	add	r7, sp, #0
    4dae:	4603      	mov	r3, r0
    4db0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4db2:	79fb      	ldrb	r3, [r7, #7]
    4db4:	4618      	mov	r0, r3
    4db6:	4b0e      	ldr	r3, [pc, #56]	; (4df0 <usb_d_ep_abort+0x48>)
    4db8:	4798      	blx	r3
    4dba:	4603      	mov	r3, r0
    4dbc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4dc2:	015b      	lsls	r3, r3, #5
    4dc4:	4a0b      	ldr	r2, [pc, #44]	; (4df4 <usb_d_ep_abort+0x4c>)
    4dc6:	4413      	add	r3, r2
    4dc8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4dce:	2b00      	cmp	r3, #0
    4dd0:	db0a      	blt.n	4de8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    4dd2:	79fb      	ldrb	r3, [r7, #7]
    4dd4:	4618      	mov	r0, r3
    4dd6:	4b08      	ldr	r3, [pc, #32]	; (4df8 <usb_d_ep_abort+0x50>)
    4dd8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4dda:	68bb      	ldr	r3, [r7, #8]
    4ddc:	2201      	movs	r2, #1
    4dde:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    4de0:	68bb      	ldr	r3, [r7, #8]
    4de2:	2204      	movs	r2, #4
    4de4:	70da      	strb	r2, [r3, #3]
    4de6:	e000      	b.n	4dea <usb_d_ep_abort+0x42>
		return;
    4de8:	bf00      	nop
}
    4dea:	3710      	adds	r7, #16
    4dec:	46bd      	mov	sp, r7
    4dee:	bd80      	pop	{r7, pc}
    4df0:	000045fd 	.word	0x000045fd
    4df4:	20001be0 	.word	0x20001be0
    4df8:	0000c049 	.word	0x0000c049

00004dfc <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    4dfc:	b580      	push	{r7, lr}
    4dfe:	b086      	sub	sp, #24
    4e00:	af00      	add	r7, sp, #0
    4e02:	4603      	mov	r3, r0
    4e04:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4e06:	79fb      	ldrb	r3, [r7, #7]
    4e08:	4618      	mov	r0, r3
    4e0a:	4b1a      	ldr	r3, [pc, #104]	; (4e74 <_usb_d_ep_halt_clr+0x78>)
    4e0c:	4798      	blx	r3
    4e0e:	4603      	mov	r3, r0
    4e10:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4e16:	015b      	lsls	r3, r3, #5
    4e18:	4a17      	ldr	r2, [pc, #92]	; (4e78 <_usb_d_ep_halt_clr+0x7c>)
    4e1a:	4413      	add	r3, r2
    4e1c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4e22:	2b00      	cmp	r3, #0
    4e24:	da02      	bge.n	4e2c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    4e26:	f06f 0311 	mvn.w	r3, #17
    4e2a:	e01f      	b.n	4e6c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    4e2c:	79fb      	ldrb	r3, [r7, #7]
    4e2e:	2102      	movs	r1, #2
    4e30:	4618      	mov	r0, r3
    4e32:	4b12      	ldr	r3, [pc, #72]	; (4e7c <_usb_d_ep_halt_clr+0x80>)
    4e34:	4798      	blx	r3
    4e36:	4603      	mov	r3, r0
    4e38:	2b00      	cmp	r3, #0
    4e3a:	d016      	beq.n	4e6a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4e3c:	79fb      	ldrb	r3, [r7, #7]
    4e3e:	2100      	movs	r1, #0
    4e40:	4618      	mov	r0, r3
    4e42:	4b0e      	ldr	r3, [pc, #56]	; (4e7c <_usb_d_ep_halt_clr+0x80>)
    4e44:	4798      	blx	r3
    4e46:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    4e48:	68fb      	ldr	r3, [r7, #12]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	da01      	bge.n	4e52 <_usb_d_ep_halt_clr+0x56>
			return rc;
    4e4e:	68fb      	ldr	r3, [r7, #12]
    4e50:	e00c      	b.n	4e6c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4e52:	693b      	ldr	r3, [r7, #16]
    4e54:	2201      	movs	r2, #1
    4e56:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    4e58:	693b      	ldr	r3, [r7, #16]
    4e5a:	2203      	movs	r2, #3
    4e5c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    4e5e:	693b      	ldr	r3, [r7, #16]
    4e60:	69db      	ldr	r3, [r3, #28]
    4e62:	79f8      	ldrb	r0, [r7, #7]
    4e64:	2200      	movs	r2, #0
    4e66:	2103      	movs	r1, #3
    4e68:	4798      	blx	r3
	}
	return ERR_NONE;
    4e6a:	2300      	movs	r3, #0
}
    4e6c:	4618      	mov	r0, r3
    4e6e:	3718      	adds	r7, #24
    4e70:	46bd      	mov	sp, r7
    4e72:	bd80      	pop	{r7, pc}
    4e74:	000045fd 	.word	0x000045fd
    4e78:	20001be0 	.word	0x20001be0
    4e7c:	0000bc55 	.word	0x0000bc55

00004e80 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4e80:	b580      	push	{r7, lr}
    4e82:	b082      	sub	sp, #8
    4e84:	af00      	add	r7, sp, #0
    4e86:	4603      	mov	r3, r0
    4e88:	460a      	mov	r2, r1
    4e8a:	71fb      	strb	r3, [r7, #7]
    4e8c:	4613      	mov	r3, r2
    4e8e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    4e90:	79bb      	ldrb	r3, [r7, #6]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d105      	bne.n	4ea2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    4e96:	79fb      	ldrb	r3, [r7, #7]
    4e98:	4618      	mov	r0, r3
    4e9a:	4b0c      	ldr	r3, [pc, #48]	; (4ecc <usb_d_ep_halt+0x4c>)
    4e9c:	4798      	blx	r3
    4e9e:	4603      	mov	r3, r0
    4ea0:	e00f      	b.n	4ec2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    4ea2:	79bb      	ldrb	r3, [r7, #6]
    4ea4:	2b01      	cmp	r3, #1
    4ea6:	d106      	bne.n	4eb6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4ea8:	79fb      	ldrb	r3, [r7, #7]
    4eaa:	2101      	movs	r1, #1
    4eac:	4618      	mov	r0, r3
    4eae:	4b08      	ldr	r3, [pc, #32]	; (4ed0 <usb_d_ep_halt+0x50>)
    4eb0:	4798      	blx	r3
    4eb2:	4603      	mov	r3, r0
    4eb4:	e005      	b.n	4ec2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    4eb6:	79fb      	ldrb	r3, [r7, #7]
    4eb8:	2102      	movs	r1, #2
    4eba:	4618      	mov	r0, r3
    4ebc:	4b04      	ldr	r3, [pc, #16]	; (4ed0 <usb_d_ep_halt+0x50>)
    4ebe:	4798      	blx	r3
    4ec0:	4603      	mov	r3, r0
	}
}
    4ec2:	4618      	mov	r0, r3
    4ec4:	3708      	adds	r7, #8
    4ec6:	46bd      	mov	sp, r7
    4ec8:	bd80      	pop	{r7, pc}
    4eca:	bf00      	nop
    4ecc:	00004dfd 	.word	0x00004dfd
    4ed0:	0000bc55 	.word	0x0000bc55

00004ed4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4ed4:	b580      	push	{r7, lr}
    4ed6:	b086      	sub	sp, #24
    4ed8:	af00      	add	r7, sp, #0
    4eda:	4603      	mov	r3, r0
    4edc:	603a      	str	r2, [r7, #0]
    4ede:	71fb      	strb	r3, [r7, #7]
    4ee0:	460b      	mov	r3, r1
    4ee2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4ee4:	79fb      	ldrb	r3, [r7, #7]
    4ee6:	4618      	mov	r0, r3
    4ee8:	4b16      	ldr	r3, [pc, #88]	; (4f44 <usb_d_ep_register_callback+0x70>)
    4eea:	4798      	blx	r3
    4eec:	4603      	mov	r3, r0
    4eee:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4ef4:	015b      	lsls	r3, r3, #5
    4ef6:	4a14      	ldr	r2, [pc, #80]	; (4f48 <usb_d_ep_register_callback+0x74>)
    4ef8:	4413      	add	r3, r2
    4efa:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4efc:	683b      	ldr	r3, [r7, #0]
    4efe:	2b00      	cmp	r3, #0
    4f00:	d001      	beq.n	4f06 <usb_d_ep_register_callback+0x32>
    4f02:	683b      	ldr	r3, [r7, #0]
    4f04:	e000      	b.n	4f08 <usb_d_ep_register_callback+0x34>
    4f06:	4b11      	ldr	r3, [pc, #68]	; (4f4c <usb_d_ep_register_callback+0x78>)
    4f08:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4f0e:	2b00      	cmp	r3, #0
    4f10:	db13      	blt.n	4f3a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    4f12:	79bb      	ldrb	r3, [r7, #6]
    4f14:	2b01      	cmp	r3, #1
    4f16:	d008      	beq.n	4f2a <usb_d_ep_register_callback+0x56>
    4f18:	2b02      	cmp	r3, #2
    4f1a:	d00a      	beq.n	4f32 <usb_d_ep_register_callback+0x5e>
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d000      	beq.n	4f22 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    4f20:	e00c      	b.n	4f3c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    4f22:	693b      	ldr	r3, [r7, #16]
    4f24:	68fa      	ldr	r2, [r7, #12]
    4f26:	615a      	str	r2, [r3, #20]
		break;
    4f28:	e008      	b.n	4f3c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    4f2a:	693b      	ldr	r3, [r7, #16]
    4f2c:	68fa      	ldr	r2, [r7, #12]
    4f2e:	619a      	str	r2, [r3, #24]
		break;
    4f30:	e004      	b.n	4f3c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    4f32:	693b      	ldr	r3, [r7, #16]
    4f34:	68fa      	ldr	r2, [r7, #12]
    4f36:	61da      	str	r2, [r3, #28]
		break;
    4f38:	e000      	b.n	4f3c <usb_d_ep_register_callback+0x68>
		return;
    4f3a:	bf00      	nop
	}
}
    4f3c:	3718      	adds	r7, #24
    4f3e:	46bd      	mov	sp, r7
    4f40:	bd80      	pop	{r7, pc}
    4f42:	bf00      	nop
    4f44:	000045fd 	.word	0x000045fd
    4f48:	20001be0 	.word	0x20001be0
    4f4c:	000046d1 	.word	0x000046d1

00004f50 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    4f50:	b480      	push	{r7}
    4f52:	b085      	sub	sp, #20
    4f54:	af00      	add	r7, sp, #0
    4f56:	4603      	mov	r3, r0
    4f58:	60b9      	str	r1, [r7, #8]
    4f5a:	607a      	str	r2, [r7, #4]
    4f5c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    4f5e:	7bfb      	ldrb	r3, [r7, #15]
    4f60:	f083 0301 	eor.w	r3, r3, #1
    4f64:	b2db      	uxtb	r3, r3
    4f66:	2b00      	cmp	r3, #0
    4f68:	d000      	beq.n	4f6c <assert+0x1c>
		__asm("BKPT #0");
    4f6a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4f6c:	bf00      	nop
    4f6e:	3714      	adds	r7, #20
    4f70:	46bd      	mov	sp, r7
    4f72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f76:	4770      	bx	lr

00004f78 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4f78:	b480      	push	{r7}
    4f7a:	b085      	sub	sp, #20
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
    4f80:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	60fb      	str	r3, [r7, #12]
    4f88:	e008      	b.n	4f9c <is_list_element+0x24>
		if (it == element) {
    4f8a:	68fa      	ldr	r2, [r7, #12]
    4f8c:	683b      	ldr	r3, [r7, #0]
    4f8e:	429a      	cmp	r2, r3
    4f90:	d101      	bne.n	4f96 <is_list_element+0x1e>
			return true;
    4f92:	2301      	movs	r3, #1
    4f94:	e006      	b.n	4fa4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    4f96:	68fb      	ldr	r3, [r7, #12]
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	60fb      	str	r3, [r7, #12]
    4f9c:	68fb      	ldr	r3, [r7, #12]
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	d1f3      	bne.n	4f8a <is_list_element+0x12>
		}
	}

	return false;
    4fa2:	2300      	movs	r3, #0
}
    4fa4:	4618      	mov	r0, r3
    4fa6:	3714      	adds	r7, #20
    4fa8:	46bd      	mov	sp, r7
    4faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fae:	4770      	bx	lr

00004fb0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	b082      	sub	sp, #8
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	6078      	str	r0, [r7, #4]
    4fb8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    4fba:	6839      	ldr	r1, [r7, #0]
    4fbc:	6878      	ldr	r0, [r7, #4]
    4fbe:	4b0f      	ldr	r3, [pc, #60]	; (4ffc <list_insert_as_head+0x4c>)
    4fc0:	4798      	blx	r3
    4fc2:	4603      	mov	r3, r0
    4fc4:	2b00      	cmp	r3, #0
    4fc6:	bf14      	ite	ne
    4fc8:	2301      	movne	r3, #1
    4fca:	2300      	moveq	r3, #0
    4fcc:	b2db      	uxtb	r3, r3
    4fce:	f083 0301 	eor.w	r3, r3, #1
    4fd2:	b2db      	uxtb	r3, r3
    4fd4:	f003 0301 	and.w	r3, r3, #1
    4fd8:	b2db      	uxtb	r3, r3
    4fda:	2239      	movs	r2, #57	; 0x39
    4fdc:	4908      	ldr	r1, [pc, #32]	; (5000 <list_insert_as_head+0x50>)
    4fde:	4618      	mov	r0, r3
    4fe0:	4b08      	ldr	r3, [pc, #32]	; (5004 <list_insert_as_head+0x54>)
    4fe2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	681a      	ldr	r2, [r3, #0]
    4fe8:	683b      	ldr	r3, [r7, #0]
    4fea:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4fec:	687b      	ldr	r3, [r7, #4]
    4fee:	683a      	ldr	r2, [r7, #0]
    4ff0:	601a      	str	r2, [r3, #0]
}
    4ff2:	bf00      	nop
    4ff4:	3708      	adds	r7, #8
    4ff6:	46bd      	mov	sp, r7
    4ff8:	bd80      	pop	{r7, pc}
    4ffa:	bf00      	nop
    4ffc:	00004f79 	.word	0x00004f79
    5000:	0001140c 	.word	0x0001140c
    5004:	00004f51 	.word	0x00004f51

00005008 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    5008:	b480      	push	{r7}
    500a:	b083      	sub	sp, #12
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
    5010:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5012:	687b      	ldr	r3, [r7, #4]
    5014:	681a      	ldr	r2, [r3, #0]
    5016:	683b      	ldr	r3, [r7, #0]
    5018:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    501a:	687b      	ldr	r3, [r7, #4]
    501c:	683a      	ldr	r2, [r7, #0]
    501e:	601a      	str	r2, [r3, #0]
}
    5020:	bf00      	nop
    5022:	370c      	adds	r7, #12
    5024:	46bd      	mov	sp, r7
    5026:	f85d 7b04 	ldr.w	r7, [sp], #4
    502a:	4770      	bx	lr

0000502c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    502c:	b580      	push	{r7, lr}
    502e:	b084      	sub	sp, #16
    5030:	af00      	add	r7, sp, #0
    5032:	6078      	str	r0, [r7, #4]
    5034:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	681b      	ldr	r3, [r3, #0]
    503a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    503c:	6839      	ldr	r1, [r7, #0]
    503e:	6878      	ldr	r0, [r7, #4]
    5040:	4b16      	ldr	r3, [pc, #88]	; (509c <list_insert_at_end+0x70>)
    5042:	4798      	blx	r3
    5044:	4603      	mov	r3, r0
    5046:	2b00      	cmp	r3, #0
    5048:	bf14      	ite	ne
    504a:	2301      	movne	r3, #1
    504c:	2300      	moveq	r3, #0
    504e:	b2db      	uxtb	r3, r3
    5050:	f083 0301 	eor.w	r3, r3, #1
    5054:	b2db      	uxtb	r3, r3
    5056:	f003 0301 	and.w	r3, r3, #1
    505a:	b2db      	uxtb	r3, r3
    505c:	224f      	movs	r2, #79	; 0x4f
    505e:	4910      	ldr	r1, [pc, #64]	; (50a0 <list_insert_at_end+0x74>)
    5060:	4618      	mov	r0, r3
    5062:	4b10      	ldr	r3, [pc, #64]	; (50a4 <list_insert_at_end+0x78>)
    5064:	4798      	blx	r3

	if (!list->head) {
    5066:	687b      	ldr	r3, [r7, #4]
    5068:	681b      	ldr	r3, [r3, #0]
    506a:	2b00      	cmp	r3, #0
    506c:	d109      	bne.n	5082 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    506e:	687b      	ldr	r3, [r7, #4]
    5070:	683a      	ldr	r2, [r7, #0]
    5072:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    5074:	683b      	ldr	r3, [r7, #0]
    5076:	2200      	movs	r2, #0
    5078:	601a      	str	r2, [r3, #0]
		return;
    507a:	e00c      	b.n	5096 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    507c:	68fb      	ldr	r3, [r7, #12]
    507e:	681b      	ldr	r3, [r3, #0]
    5080:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    5082:	68fb      	ldr	r3, [r7, #12]
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	2b00      	cmp	r3, #0
    5088:	d1f8      	bne.n	507c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    508a:	68fb      	ldr	r3, [r7, #12]
    508c:	683a      	ldr	r2, [r7, #0]
    508e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    5090:	683b      	ldr	r3, [r7, #0]
    5092:	2200      	movs	r2, #0
    5094:	601a      	str	r2, [r3, #0]
}
    5096:	3710      	adds	r7, #16
    5098:	46bd      	mov	sp, r7
    509a:	bd80      	pop	{r7, pc}
    509c:	00004f79 	.word	0x00004f79
    50a0:	0001140c 	.word	0x0001140c
    50a4:	00004f51 	.word	0x00004f51

000050a8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    50a8:	b480      	push	{r7}
    50aa:	b085      	sub	sp, #20
    50ac:	af00      	add	r7, sp, #0
    50ae:	6078      	str	r0, [r7, #4]
	if (list->head) {
    50b0:	687b      	ldr	r3, [r7, #4]
    50b2:	681b      	ldr	r3, [r3, #0]
    50b4:	2b00      	cmp	r3, #0
    50b6:	d009      	beq.n	50cc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	681b      	ldr	r3, [r3, #0]
    50bc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    50be:	687b      	ldr	r3, [r7, #4]
    50c0:	681b      	ldr	r3, [r3, #0]
    50c2:	681a      	ldr	r2, [r3, #0]
    50c4:	687b      	ldr	r3, [r7, #4]
    50c6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    50c8:	68fb      	ldr	r3, [r7, #12]
    50ca:	e000      	b.n	50ce <list_remove_head+0x26>
	}

	return NULL;
    50cc:	2300      	movs	r3, #0
}
    50ce:	4618      	mov	r0, r3
    50d0:	3714      	adds	r7, #20
    50d2:	46bd      	mov	sp, r7
    50d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    50d8:	4770      	bx	lr
	...

000050dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    50dc:	b480      	push	{r7}
    50de:	b083      	sub	sp, #12
    50e0:	af00      	add	r7, sp, #0
    50e2:	4603      	mov	r3, r0
    50e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    50e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    50ea:	2b00      	cmp	r3, #0
    50ec:	db0b      	blt.n	5106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50ee:	4909      	ldr	r1, [pc, #36]	; (5114 <__NVIC_EnableIRQ+0x38>)
    50f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    50f4:	095b      	lsrs	r3, r3, #5
    50f6:	88fa      	ldrh	r2, [r7, #6]
    50f8:	f002 021f 	and.w	r2, r2, #31
    50fc:	2001      	movs	r0, #1
    50fe:	fa00 f202 	lsl.w	r2, r0, r2
    5102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5106:	bf00      	nop
    5108:	370c      	adds	r7, #12
    510a:	46bd      	mov	sp, r7
    510c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5110:	4770      	bx	lr
    5112:	bf00      	nop
    5114:	e000e100 	.word	0xe000e100

00005118 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    5118:	b480      	push	{r7}
    511a:	b083      	sub	sp, #12
    511c:	af00      	add	r7, sp, #0
    511e:	4603      	mov	r3, r0
    5120:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5126:	2b00      	cmp	r3, #0
    5128:	db10      	blt.n	514c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    512a:	490b      	ldr	r1, [pc, #44]	; (5158 <__NVIC_DisableIRQ+0x40>)
    512c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5130:	095b      	lsrs	r3, r3, #5
    5132:	88fa      	ldrh	r2, [r7, #6]
    5134:	f002 021f 	and.w	r2, r2, #31
    5138:	2001      	movs	r0, #1
    513a:	fa00 f202 	lsl.w	r2, r0, r2
    513e:	3320      	adds	r3, #32
    5140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5148:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    514c:	bf00      	nop
    514e:	370c      	adds	r7, #12
    5150:	46bd      	mov	sp, r7
    5152:	f85d 7b04 	ldr.w	r7, [sp], #4
    5156:	4770      	bx	lr
    5158:	e000e100 	.word	0xe000e100

0000515c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    515c:	b480      	push	{r7}
    515e:	b083      	sub	sp, #12
    5160:	af00      	add	r7, sp, #0
    5162:	4603      	mov	r3, r0
    5164:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    516a:	2b00      	cmp	r3, #0
    516c:	db0c      	blt.n	5188 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    516e:	4909      	ldr	r1, [pc, #36]	; (5194 <__NVIC_ClearPendingIRQ+0x38>)
    5170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5174:	095b      	lsrs	r3, r3, #5
    5176:	88fa      	ldrh	r2, [r7, #6]
    5178:	f002 021f 	and.w	r2, r2, #31
    517c:	2001      	movs	r0, #1
    517e:	fa00 f202 	lsl.w	r2, r0, r2
    5182:	3360      	adds	r3, #96	; 0x60
    5184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5188:	bf00      	nop
    518a:	370c      	adds	r7, #12
    518c:	46bd      	mov	sp, r7
    518e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5192:	4770      	bx	lr
    5194:	e000e100 	.word	0xe000e100

00005198 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    5198:	b480      	push	{r7}
    519a:	b083      	sub	sp, #12
    519c:	af00      	add	r7, sp, #0
    519e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    51a0:	687b      	ldr	r3, [r7, #4]
    51a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    51a4:	095b      	lsrs	r3, r3, #5
    51a6:	f003 0301 	and.w	r3, r3, #1
    51aa:	2b00      	cmp	r3, #0
    51ac:	bf14      	ite	ne
    51ae:	2301      	movne	r3, #1
    51b0:	2300      	moveq	r3, #0
    51b2:	b2db      	uxtb	r3, r3
}
    51b4:	4618      	mov	r0, r3
    51b6:	370c      	adds	r7, #12
    51b8:	46bd      	mov	sp, r7
    51ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    51be:	4770      	bx	lr

000051c0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    51c0:	b480      	push	{r7}
    51c2:	b083      	sub	sp, #12
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
    51c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    51ca:	687b      	ldr	r3, [r7, #4]
    51cc:	683a      	ldr	r2, [r7, #0]
    51ce:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    51d0:	bf00      	nop
    51d2:	370c      	adds	r7, #12
    51d4:	46bd      	mov	sp, r7
    51d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51da:	4770      	bx	lr

000051dc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    51dc:	b480      	push	{r7}
    51de:	b083      	sub	sp, #12
    51e0:	af00      	add	r7, sp, #0
    51e2:	6078      	str	r0, [r7, #4]
    51e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    51e6:	687b      	ldr	r3, [r7, #4]
    51e8:	683a      	ldr	r2, [r7, #0]
    51ea:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    51ec:	bf00      	nop
    51ee:	370c      	adds	r7, #12
    51f0:	46bd      	mov	sp, r7
    51f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f6:	4770      	bx	lr

000051f8 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    51f8:	b480      	push	{r7}
    51fa:	b083      	sub	sp, #12
    51fc:	af00      	add	r7, sp, #0
    51fe:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	699b      	ldr	r3, [r3, #24]
    5204:	f043 0201 	orr.w	r2, r3, #1
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    520c:	bf00      	nop
    520e:	370c      	adds	r7, #12
    5210:	46bd      	mov	sp, r7
    5212:	f85d 7b04 	ldr.w	r7, [sp], #4
    5216:	4770      	bx	lr

00005218 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    5218:	b480      	push	{r7}
    521a:	b085      	sub	sp, #20
    521c:	af00      	add	r7, sp, #0
    521e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    5220:	687b      	ldr	r3, [r7, #4]
    5222:	699b      	ldr	r3, [r3, #24]
    5224:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    5226:	68fb      	ldr	r3, [r7, #12]
    5228:	f003 0301 	and.w	r3, r3, #1
    522c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    522e:	68fb      	ldr	r3, [r7, #12]
    5230:	2b00      	cmp	r3, #0
    5232:	bf14      	ite	ne
    5234:	2301      	movne	r3, #1
    5236:	2300      	moveq	r3, #0
    5238:	b2db      	uxtb	r3, r3
}
    523a:	4618      	mov	r0, r3
    523c:	3714      	adds	r7, #20
    523e:	46bd      	mov	sp, r7
    5240:	f85d 7b04 	ldr.w	r7, [sp], #4
    5244:	4770      	bx	lr

00005246 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    5246:	b480      	push	{r7}
    5248:	b083      	sub	sp, #12
    524a:	af00      	add	r7, sp, #0
    524c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	699b      	ldr	r3, [r3, #24]
    5252:	f023 0201 	bic.w	r2, r3, #1
    5256:	687b      	ldr	r3, [r7, #4]
    5258:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    525a:	bf00      	nop
    525c:	370c      	adds	r7, #12
    525e:	46bd      	mov	sp, r7
    5260:	f85d 7b04 	ldr.w	r7, [sp], #4
    5264:	4770      	bx	lr

00005266 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    5266:	b480      	push	{r7}
    5268:	b083      	sub	sp, #12
    526a:	af00      	add	r7, sp, #0
    526c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    526e:	687b      	ldr	r3, [r7, #4]
    5270:	699b      	ldr	r3, [r3, #24]
    5272:	f043 0202 	orr.w	r2, r3, #2
    5276:	687b      	ldr	r3, [r7, #4]
    5278:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    527a:	bf00      	nop
    527c:	370c      	adds	r7, #12
    527e:	46bd      	mov	sp, r7
    5280:	f85d 7b04 	ldr.w	r7, [sp], #4
    5284:	4770      	bx	lr

00005286 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    5286:	b480      	push	{r7}
    5288:	b083      	sub	sp, #12
    528a:	af00      	add	r7, sp, #0
    528c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    528e:	687b      	ldr	r3, [r7, #4]
    5290:	699b      	ldr	r3, [r3, #24]
    5292:	f023 0202 	bic.w	r2, r3, #2
    5296:	687b      	ldr	r3, [r7, #4]
    5298:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    529a:	bf00      	nop
    529c:	370c      	adds	r7, #12
    529e:	46bd      	mov	sp, r7
    52a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a4:	4770      	bx	lr

000052a6 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    52a6:	b480      	push	{r7}
    52a8:	b083      	sub	sp, #12
    52aa:	af00      	add	r7, sp, #0
    52ac:	6078      	str	r0, [r7, #4]
    52ae:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    52b0:	687b      	ldr	r3, [r7, #4]
    52b2:	699a      	ldr	r2, [r3, #24]
    52b4:	683b      	ldr	r3, [r7, #0]
    52b6:	431a      	orrs	r2, r3
    52b8:	687b      	ldr	r3, [r7, #4]
    52ba:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    52bc:	bf00      	nop
    52be:	370c      	adds	r7, #12
    52c0:	46bd      	mov	sp, r7
    52c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c6:	4770      	bx	lr

000052c8 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    52c8:	b480      	push	{r7}
    52ca:	b083      	sub	sp, #12
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
    52d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	683a      	ldr	r2, [r7, #0]
    52d6:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    52d8:	bf00      	nop
    52da:	370c      	adds	r7, #12
    52dc:	46bd      	mov	sp, r7
    52de:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e2:	4770      	bx	lr

000052e4 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    52e4:	b480      	push	{r7}
    52e6:	b083      	sub	sp, #12
    52e8:	af00      	add	r7, sp, #0
    52ea:	6078      	str	r0, [r7, #4]
    52ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    52ee:	687b      	ldr	r3, [r7, #4]
    52f0:	683a      	ldr	r2, [r7, #0]
    52f2:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    52f4:	bf00      	nop
    52f6:	370c      	adds	r7, #12
    52f8:	46bd      	mov	sp, r7
    52fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    52fe:	4770      	bx	lr

00005300 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    5300:	b480      	push	{r7}
    5302:	b083      	sub	sp, #12
    5304:	af00      	add	r7, sp, #0
    5306:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    5308:	687b      	ldr	r3, [r7, #4]
    530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    530c:	4618      	mov	r0, r3
    530e:	370c      	adds	r7, #12
    5310:	46bd      	mov	sp, r7
    5312:	f85d 7b04 	ldr.w	r7, [sp], #4
    5316:	4770      	bx	lr

00005318 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    5318:	b480      	push	{r7}
    531a:	b083      	sub	sp, #12
    531c:	af00      	add	r7, sp, #0
    531e:	6078      	str	r0, [r7, #4]
    5320:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    5322:	687b      	ldr	r3, [r7, #4]
    5324:	683a      	ldr	r2, [r7, #0]
    5326:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    5328:	bf00      	nop
    532a:	370c      	adds	r7, #12
    532c:	46bd      	mov	sp, r7
    532e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5332:	4770      	bx	lr

00005334 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    5334:	b480      	push	{r7}
    5336:	b083      	sub	sp, #12
    5338:	af00      	add	r7, sp, #0
    533a:	6078      	str	r0, [r7, #4]
    533c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    533e:	687b      	ldr	r3, [r7, #4]
    5340:	683a      	ldr	r2, [r7, #0]
    5342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    5346:	bf00      	nop
    5348:	370c      	adds	r7, #12
    534a:	46bd      	mov	sp, r7
    534c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5350:	4770      	bx	lr

00005352 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    5352:	b480      	push	{r7}
    5354:	b083      	sub	sp, #12
    5356:	af00      	add	r7, sp, #0
    5358:	6078      	str	r0, [r7, #4]
    535a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    535c:	687b      	ldr	r3, [r7, #4]
    535e:	683a      	ldr	r2, [r7, #0]
    5360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    5364:	bf00      	nop
    5366:	370c      	adds	r7, #12
    5368:	46bd      	mov	sp, r7
    536a:	f85d 7b04 	ldr.w	r7, [sp], #4
    536e:	4770      	bx	lr

00005370 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    5370:	b480      	push	{r7}
    5372:	b083      	sub	sp, #12
    5374:	af00      	add	r7, sp, #0
    5376:	6078      	str	r0, [r7, #4]
    5378:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    537a:	687b      	ldr	r3, [r7, #4]
    537c:	683a      	ldr	r2, [r7, #0]
    537e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    5382:	bf00      	nop
    5384:	370c      	adds	r7, #12
    5386:	46bd      	mov	sp, r7
    5388:	f85d 7b04 	ldr.w	r7, [sp], #4
    538c:	4770      	bx	lr

0000538e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    538e:	b480      	push	{r7}
    5390:	b083      	sub	sp, #12
    5392:	af00      	add	r7, sp, #0
    5394:	6078      	str	r0, [r7, #4]
    5396:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	683a      	ldr	r2, [r7, #0]
    539c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    53a0:	bf00      	nop
    53a2:	370c      	adds	r7, #12
    53a4:	46bd      	mov	sp, r7
    53a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53aa:	4770      	bx	lr

000053ac <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    53ac:	b480      	push	{r7}
    53ae:	b083      	sub	sp, #12
    53b0:	af00      	add	r7, sp, #0
    53b2:	6078      	str	r0, [r7, #4]
    53b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    53b6:	687b      	ldr	r3, [r7, #4]
    53b8:	683a      	ldr	r2, [r7, #0]
    53ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    53be:	bf00      	nop
    53c0:	370c      	adds	r7, #12
    53c2:	46bd      	mov	sp, r7
    53c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53c8:	4770      	bx	lr

000053ca <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    53ca:	b480      	push	{r7}
    53cc:	b083      	sub	sp, #12
    53ce:	af00      	add	r7, sp, #0
    53d0:	6078      	str	r0, [r7, #4]
    53d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    53d4:	687b      	ldr	r3, [r7, #4]
    53d6:	683a      	ldr	r2, [r7, #0]
    53d8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    53dc:	bf00      	nop
    53de:	370c      	adds	r7, #12
    53e0:	46bd      	mov	sp, r7
    53e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    53e6:	4770      	bx	lr

000053e8 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    53e8:	b480      	push	{r7}
    53ea:	b083      	sub	sp, #12
    53ec:	af00      	add	r7, sp, #0
    53ee:	6078      	str	r0, [r7, #4]
    53f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	683a      	ldr	r2, [r7, #0]
    53f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    53fa:	bf00      	nop
    53fc:	370c      	adds	r7, #12
    53fe:	46bd      	mov	sp, r7
    5400:	f85d 7b04 	ldr.w	r7, [sp], #4
    5404:	4770      	bx	lr

00005406 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    5406:	b480      	push	{r7}
    5408:	b083      	sub	sp, #12
    540a:	af00      	add	r7, sp, #0
    540c:	6078      	str	r0, [r7, #4]
    540e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	683a      	ldr	r2, [r7, #0]
    5414:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5418:	bf00      	nop
    541a:	370c      	adds	r7, #12
    541c:	46bd      	mov	sp, r7
    541e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5422:	4770      	bx	lr

00005424 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    5424:	b480      	push	{r7}
    5426:	b083      	sub	sp, #12
    5428:	af00      	add	r7, sp, #0
    542a:	6078      	str	r0, [r7, #4]
    542c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	683a      	ldr	r2, [r7, #0]
    5432:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5436:	bf00      	nop
    5438:	370c      	adds	r7, #12
    543a:	46bd      	mov	sp, r7
    543c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5440:	4770      	bx	lr
	...

00005444 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    5444:	b580      	push	{r7, lr}
    5446:	b082      	sub	sp, #8
    5448:	af00      	add	r7, sp, #0
    544a:	6078      	str	r0, [r7, #4]
    544c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    544e:	687b      	ldr	r3, [r7, #4]
    5450:	683a      	ldr	r2, [r7, #0]
    5452:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    5454:	687b      	ldr	r3, [r7, #4]
    5456:	681b      	ldr	r3, [r3, #0]
    5458:	4618      	mov	r0, r3
    545a:	4b53      	ldr	r3, [pc, #332]	; (55a8 <_can_async_init+0x164>)
    545c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    545e:	bf00      	nop
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	681b      	ldr	r3, [r3, #0]
    5464:	4618      	mov	r0, r3
    5466:	4b51      	ldr	r3, [pc, #324]	; (55ac <_can_async_init+0x168>)
    5468:	4798      	blx	r3
    546a:	4603      	mov	r3, r0
    546c:	f083 0301 	eor.w	r3, r3, #1
    5470:	b2db      	uxtb	r3, r3
    5472:	2b00      	cmp	r3, #0
    5474:	d1f4      	bne.n	5460 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	4618      	mov	r0, r3
    547c:	4b4c      	ldr	r3, [pc, #304]	; (55b0 <_can_async_init+0x16c>)
    547e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    5480:	683b      	ldr	r3, [r7, #0]
    5482:	4a4c      	ldr	r2, [pc, #304]	; (55b4 <_can_async_init+0x170>)
    5484:	4293      	cmp	r3, r2
    5486:	d177      	bne.n	5578 <_can_async_init+0x134>
		_can1_dev    = dev;
    5488:	4a4b      	ldr	r2, [pc, #300]	; (55b8 <_can_async_init+0x174>)
    548a:	687b      	ldr	r3, [r7, #4]
    548c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    548e:	687b      	ldr	r3, [r7, #4]
    5490:	4a4a      	ldr	r2, [pc, #296]	; (55bc <_can_async_init+0x178>)
    5492:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    5494:	687b      	ldr	r3, [r7, #4]
    5496:	681b      	ldr	r3, [r3, #0]
    5498:	2100      	movs	r1, #0
    549a:	4618      	mov	r0, r3
    549c:	4b48      	ldr	r3, [pc, #288]	; (55c0 <_can_async_init+0x17c>)
    549e:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	681b      	ldr	r3, [r3, #0]
    54a4:	2100      	movs	r1, #0
    54a6:	4618      	mov	r0, r3
    54a8:	4b46      	ldr	r3, [pc, #280]	; (55c4 <_can_async_init+0x180>)
    54aa:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    54ac:	687b      	ldr	r3, [r7, #4]
    54ae:	681b      	ldr	r3, [r3, #0]
    54b0:	4945      	ldr	r1, [pc, #276]	; (55c8 <_can_async_init+0x184>)
    54b2:	4618      	mov	r0, r3
    54b4:	4b45      	ldr	r3, [pc, #276]	; (55cc <_can_async_init+0x188>)
    54b6:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    54b8:	687b      	ldr	r3, [r7, #4]
    54ba:	681b      	ldr	r3, [r3, #0]
    54bc:	f640 2133 	movw	r1, #2611	; 0xa33
    54c0:	4618      	mov	r0, r3
    54c2:	4b43      	ldr	r3, [pc, #268]	; (55d0 <_can_async_init+0x18c>)
    54c4:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    54c6:	687b      	ldr	r3, [r7, #4]
    54c8:	681a      	ldr	r2, [r3, #0]
    54ca:	4b42      	ldr	r3, [pc, #264]	; (55d4 <_can_async_init+0x190>)
    54cc:	b29b      	uxth	r3, r3
    54ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    54d2:	4619      	mov	r1, r3
    54d4:	4610      	mov	r0, r2
    54d6:	4b40      	ldr	r3, [pc, #256]	; (55d8 <_can_async_init+0x194>)
    54d8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    54da:	687b      	ldr	r3, [r7, #4]
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	2100      	movs	r1, #0
    54e0:	4618      	mov	r0, r3
    54e2:	4b3e      	ldr	r3, [pc, #248]	; (55dc <_can_async_init+0x198>)
    54e4:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    54e6:	687b      	ldr	r3, [r7, #4]
    54e8:	681b      	ldr	r3, [r3, #0]
    54ea:	2100      	movs	r1, #0
    54ec:	4618      	mov	r0, r3
    54ee:	4b3c      	ldr	r3, [pc, #240]	; (55e0 <_can_async_init+0x19c>)
    54f0:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    54f2:	687b      	ldr	r3, [r7, #4]
    54f4:	681a      	ldr	r2, [r3, #0]
    54f6:	4b3b      	ldr	r3, [pc, #236]	; (55e4 <_can_async_init+0x1a0>)
    54f8:	b29b      	uxth	r3, r3
    54fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    54fe:	4619      	mov	r1, r3
    5500:	4610      	mov	r0, r2
    5502:	4b39      	ldr	r3, [pc, #228]	; (55e8 <_can_async_init+0x1a4>)
    5504:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    5506:	687b      	ldr	r3, [r7, #4]
    5508:	681a      	ldr	r2, [r3, #0]
    550a:	4b38      	ldr	r3, [pc, #224]	; (55ec <_can_async_init+0x1a8>)
    550c:	b29b      	uxth	r3, r3
    550e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5512:	4619      	mov	r1, r3
    5514:	4610      	mov	r0, r2
    5516:	4b36      	ldr	r3, [pc, #216]	; (55f0 <_can_async_init+0x1ac>)
    5518:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    551a:	687b      	ldr	r3, [r7, #4]
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	2128      	movs	r1, #40	; 0x28
    5520:	4618      	mov	r0, r3
    5522:	4b34      	ldr	r3, [pc, #208]	; (55f4 <_can_async_init+0x1b0>)
    5524:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    5526:	687b      	ldr	r3, [r7, #4]
    5528:	681a      	ldr	r2, [r3, #0]
    552a:	4b33      	ldr	r3, [pc, #204]	; (55f8 <_can_async_init+0x1b4>)
    552c:	b29b      	uxth	r3, r3
    552e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5532:	4619      	mov	r1, r3
    5534:	4610      	mov	r0, r2
    5536:	4b31      	ldr	r3, [pc, #196]	; (55fc <_can_async_init+0x1b8>)
    5538:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	681a      	ldr	r2, [r3, #0]
    553e:	4b30      	ldr	r3, [pc, #192]	; (5600 <_can_async_init+0x1bc>)
    5540:	b29b      	uxth	r3, r3
    5542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5546:	4619      	mov	r1, r3
    5548:	4610      	mov	r0, r2
    554a:	4b2e      	ldr	r3, [pc, #184]	; (5604 <_can_async_init+0x1c0>)
    554c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	681b      	ldr	r3, [r3, #0]
    5552:	2100      	movs	r1, #0
    5554:	4618      	mov	r0, r3
    5556:	4b2c      	ldr	r3, [pc, #176]	; (5608 <_can_async_init+0x1c4>)
    5558:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    555a:	204f      	movs	r0, #79	; 0x4f
    555c:	4b2b      	ldr	r3, [pc, #172]	; (560c <_can_async_init+0x1c8>)
    555e:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    5560:	204f      	movs	r0, #79	; 0x4f
    5562:	4b2b      	ldr	r3, [pc, #172]	; (5610 <_can_async_init+0x1cc>)
    5564:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    5566:	204f      	movs	r0, #79	; 0x4f
    5568:	4b2a      	ldr	r3, [pc, #168]	; (5614 <_can_async_init+0x1d0>)
    556a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    556c:	687b      	ldr	r3, [r7, #4]
    556e:	681b      	ldr	r3, [r3, #0]
    5570:	2101      	movs	r1, #1
    5572:	4618      	mov	r0, r3
    5574:	4b28      	ldr	r3, [pc, #160]	; (5618 <_can_async_init+0x1d4>)
    5576:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	4618      	mov	r0, r3
    557e:	4b27      	ldr	r3, [pc, #156]	; (561c <_can_async_init+0x1d8>)
    5580:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    5582:	687b      	ldr	r3, [r7, #4]
    5584:	681b      	ldr	r3, [r3, #0]
    5586:	4618      	mov	r0, r3
    5588:	4b25      	ldr	r3, [pc, #148]	; (5620 <_can_async_init+0x1dc>)
    558a:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    558c:	bf00      	nop
    558e:	687b      	ldr	r3, [r7, #4]
    5590:	681b      	ldr	r3, [r3, #0]
    5592:	4618      	mov	r0, r3
    5594:	4b05      	ldr	r3, [pc, #20]	; (55ac <_can_async_init+0x168>)
    5596:	4798      	blx	r3
    5598:	4603      	mov	r3, r0
    559a:	2b00      	cmp	r3, #0
    559c:	d1f7      	bne.n	558e <_can_async_init+0x14a>
	};

	return ERR_NONE;
    559e:	2300      	movs	r3, #0
}
    55a0:	4618      	mov	r0, r3
    55a2:	3708      	adds	r7, #8
    55a4:	46bd      	mov	sp, r7
    55a6:	bd80      	pop	{r7, pc}
    55a8:	000051f9 	.word	0x000051f9
    55ac:	00005219 	.word	0x00005219
    55b0:	00005267 	.word	0x00005267
    55b4:	42000400 	.word	0x42000400
    55b8:	20001c88 	.word	0x20001c88
    55bc:	20000004 	.word	0x20000004
    55c0:	000052a7 	.word	0x000052a7
    55c4:	000051c1 	.word	0x000051c1
    55c8:	06020a07 	.word	0x06020a07
    55cc:	000052c9 	.word	0x000052c9
    55d0:	000051dd 	.word	0x000051dd
    55d4:	20002338 	.word	0x20002338
    55d8:	000053ad 	.word	0x000053ad
    55dc:	000053cb 	.word	0x000053cb
    55e0:	00005407 	.word	0x00005407
    55e4:	20002318 	.word	0x20002318
    55e8:	000053e9 	.word	0x000053e9
    55ec:	20001c60 	.word	0x20001c60
    55f0:	00005425 	.word	0x00005425
    55f4:	00005335 	.word	0x00005335
    55f8:	20001c70 	.word	0x20001c70
    55fc:	00005353 	.word	0x00005353
    5600:	20001c78 	.word	0x20001c78
    5604:	00005371 	.word	0x00005371
    5608:	0000538f 	.word	0x0000538f
    560c:	00005119 	.word	0x00005119
    5610:	0000515d 	.word	0x0000515d
    5614:	000050dd 	.word	0x000050dd
    5618:	00005319 	.word	0x00005319
    561c:	00005287 	.word	0x00005287
    5620:	00005247 	.word	0x00005247

00005624 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    5624:	b590      	push	{r4, r7, lr}
    5626:	b083      	sub	sp, #12
    5628:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    562a:	4b2c      	ldr	r3, [pc, #176]	; (56dc <CAN1_Handler+0xb8>)
    562c:	681b      	ldr	r3, [r3, #0]
    562e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	681b      	ldr	r3, [r3, #0]
    5634:	4618      	mov	r0, r3
    5636:	4b2a      	ldr	r3, [pc, #168]	; (56e0 <CAN1_Handler+0xbc>)
    5638:	4798      	blx	r3
    563a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    563c:	683b      	ldr	r3, [r7, #0]
    563e:	f003 0301 	and.w	r3, r3, #1
    5642:	2b00      	cmp	r3, #0
    5644:	d003      	beq.n	564e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	689b      	ldr	r3, [r3, #8]
    564a:	6878      	ldr	r0, [r7, #4]
    564c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    564e:	683b      	ldr	r3, [r7, #0]
    5650:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5654:	2b00      	cmp	r3, #0
    5656:	d003      	beq.n	5660 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	685b      	ldr	r3, [r3, #4]
    565c:	6878      	ldr	r0, [r7, #4]
    565e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    5660:	683b      	ldr	r3, [r7, #0]
    5662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5666:	2b00      	cmp	r3, #0
    5668:	d004      	beq.n	5674 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    566a:	687b      	ldr	r3, [r7, #4]
    566c:	68db      	ldr	r3, [r3, #12]
    566e:	2103      	movs	r1, #3
    5670:	6878      	ldr	r0, [r7, #4]
    5672:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    5674:	683b      	ldr	r3, [r7, #0]
    5676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    567a:	2b00      	cmp	r3, #0
    567c:	d004      	beq.n	5688 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    567e:	687b      	ldr	r3, [r7, #4]
    5680:	68db      	ldr	r3, [r3, #12]
    5682:	2100      	movs	r1, #0
    5684:	6878      	ldr	r0, [r7, #4]
    5686:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    5688:	683b      	ldr	r3, [r7, #0]
    568a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    568e:	2b00      	cmp	r3, #0
    5690:	d00f      	beq.n	56b2 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    5692:	687b      	ldr	r3, [r7, #4]
    5694:	68dc      	ldr	r4, [r3, #12]
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	681b      	ldr	r3, [r3, #0]
    569a:	4618      	mov	r0, r3
    569c:	4b11      	ldr	r3, [pc, #68]	; (56e4 <CAN1_Handler+0xc0>)
    569e:	4798      	blx	r3
    56a0:	4603      	mov	r3, r0
    56a2:	2b00      	cmp	r3, #0
    56a4:	d001      	beq.n	56aa <CAN1_Handler+0x86>
    56a6:	2302      	movs	r3, #2
    56a8:	e000      	b.n	56ac <CAN1_Handler+0x88>
    56aa:	2301      	movs	r3, #1
    56ac:	4619      	mov	r1, r3
    56ae:	6878      	ldr	r0, [r7, #4]
    56b0:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    56b2:	683b      	ldr	r3, [r7, #0]
    56b4:	f003 0308 	and.w	r3, r3, #8
    56b8:	2b00      	cmp	r3, #0
    56ba:	d004      	beq.n	56c6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	68db      	ldr	r3, [r3, #12]
    56c0:	2104      	movs	r1, #4
    56c2:	6878      	ldr	r0, [r7, #4]
    56c4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    56c6:	687b      	ldr	r3, [r7, #4]
    56c8:	681b      	ldr	r3, [r3, #0]
    56ca:	6839      	ldr	r1, [r7, #0]
    56cc:	4618      	mov	r0, r3
    56ce:	4b06      	ldr	r3, [pc, #24]	; (56e8 <CAN1_Handler+0xc4>)
    56d0:	4798      	blx	r3
}
    56d2:	bf00      	nop
    56d4:	370c      	adds	r7, #12
    56d6:	46bd      	mov	sp, r7
    56d8:	bd90      	pop	{r4, r7, pc}
    56da:	bf00      	nop
    56dc:	20001c88 	.word	0x20001c88
    56e0:	00005301 	.word	0x00005301
    56e4:	00005199 	.word	0x00005199
    56e8:	000052e5 	.word	0x000052e5

000056ec <__NVIC_SetPendingIRQ>:
{
    56ec:	b480      	push	{r7}
    56ee:	b083      	sub	sp, #12
    56f0:	af00      	add	r7, sp, #0
    56f2:	4603      	mov	r3, r0
    56f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    56f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    56fa:	2b00      	cmp	r3, #0
    56fc:	db0c      	blt.n	5718 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56fe:	4909      	ldr	r1, [pc, #36]	; (5724 <__NVIC_SetPendingIRQ+0x38>)
    5700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5704:	095b      	lsrs	r3, r3, #5
    5706:	88fa      	ldrh	r2, [r7, #6]
    5708:	f002 021f 	and.w	r2, r2, #31
    570c:	2001      	movs	r0, #1
    570e:	fa00 f202 	lsl.w	r2, r0, r2
    5712:	3340      	adds	r3, #64	; 0x40
    5714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5718:	bf00      	nop
    571a:	370c      	adds	r7, #12
    571c:	46bd      	mov	sp, r7
    571e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5722:	4770      	bx	lr
    5724:	e000e100 	.word	0xe000e100

00005728 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5728:	b580      	push	{r7, lr}
    572a:	b082      	sub	sp, #8
    572c:	af00      	add	r7, sp, #0
    572e:	4603      	mov	r3, r0
    5730:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5732:	79fb      	ldrb	r3, [r7, #7]
    5734:	b21b      	sxth	r3, r3
    5736:	4618      	mov	r0, r3
    5738:	4b02      	ldr	r3, [pc, #8]	; (5744 <_irq_set+0x1c>)
    573a:	4798      	blx	r3
}
    573c:	bf00      	nop
    573e:	3708      	adds	r7, #8
    5740:	46bd      	mov	sp, r7
    5742:	bd80      	pop	{r7, pc}
    5744:	000056ed 	.word	0x000056ed

00005748 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5748:	b480      	push	{r7}
    574a:	b083      	sub	sp, #12
    574c:	af00      	add	r7, sp, #0
    574e:	4603      	mov	r3, r0
    5750:	6039      	str	r1, [r7, #0]
    5752:	80fb      	strh	r3, [r7, #6]
    5754:	4613      	mov	r3, r2
    5756:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5758:	797b      	ldrb	r3, [r7, #5]
    575a:	3b04      	subs	r3, #4
    575c:	2b05      	cmp	r3, #5
    575e:	d86b      	bhi.n	5838 <_get_cycles_for_us_internal+0xf0>
    5760:	a201      	add	r2, pc, #4	; (adr r2, 5768 <_get_cycles_for_us_internal+0x20>)
    5762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5766:	bf00      	nop
    5768:	00005817 	.word	0x00005817
    576c:	000057f7 	.word	0x000057f7
    5770:	000057d9 	.word	0x000057d9
    5774:	000057bb 	.word	0x000057bb
    5778:	0000579d 	.word	0x0000579d
    577c:	00005781 	.word	0x00005781
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5780:	88fb      	ldrh	r3, [r7, #6]
    5782:	683a      	ldr	r2, [r7, #0]
    5784:	4935      	ldr	r1, [pc, #212]	; (585c <_get_cycles_for_us_internal+0x114>)
    5786:	fba1 1202 	umull	r1, r2, r1, r2
    578a:	0c92      	lsrs	r2, r2, #18
    578c:	fb02 f303 	mul.w	r3, r2, r3
    5790:	3302      	adds	r3, #2
    5792:	4a33      	ldr	r2, [pc, #204]	; (5860 <_get_cycles_for_us_internal+0x118>)
    5794:	fba2 2303 	umull	r2, r3, r2, r3
    5798:	085b      	lsrs	r3, r3, #1
    579a:	e059      	b.n	5850 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    579c:	88fb      	ldrh	r3, [r7, #6]
    579e:	683a      	ldr	r2, [r7, #0]
    57a0:	0952      	lsrs	r2, r2, #5
    57a2:	4930      	ldr	r1, [pc, #192]	; (5864 <_get_cycles_for_us_internal+0x11c>)
    57a4:	fba1 1202 	umull	r1, r2, r1, r2
    57a8:	09d2      	lsrs	r2, r2, #7
    57aa:	fb02 f303 	mul.w	r3, r2, r3
    57ae:	331d      	adds	r3, #29
    57b0:	4a2d      	ldr	r2, [pc, #180]	; (5868 <_get_cycles_for_us_internal+0x120>)
    57b2:	fba2 2303 	umull	r2, r3, r2, r3
    57b6:	091b      	lsrs	r3, r3, #4
    57b8:	e04a      	b.n	5850 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    57ba:	88fb      	ldrh	r3, [r7, #6]
    57bc:	683a      	ldr	r2, [r7, #0]
    57be:	492b      	ldr	r1, [pc, #172]	; (586c <_get_cycles_for_us_internal+0x124>)
    57c0:	fba1 1202 	umull	r1, r2, r1, r2
    57c4:	0b52      	lsrs	r2, r2, #13
    57c6:	fb02 f303 	mul.w	r3, r2, r3
    57ca:	f203 132b 	addw	r3, r3, #299	; 0x12b
    57ce:	4a28      	ldr	r2, [pc, #160]	; (5870 <_get_cycles_for_us_internal+0x128>)
    57d0:	fba2 2303 	umull	r2, r3, r2, r3
    57d4:	095b      	lsrs	r3, r3, #5
    57d6:	e03b      	b.n	5850 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    57d8:	88fb      	ldrh	r3, [r7, #6]
    57da:	683a      	ldr	r2, [r7, #0]
    57dc:	4925      	ldr	r1, [pc, #148]	; (5874 <_get_cycles_for_us_internal+0x12c>)
    57de:	fba1 1202 	umull	r1, r2, r1, r2
    57e2:	0992      	lsrs	r2, r2, #6
    57e4:	fb02 f303 	mul.w	r3, r2, r3
    57e8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    57ec:	4a22      	ldr	r2, [pc, #136]	; (5878 <_get_cycles_for_us_internal+0x130>)
    57ee:	fba2 2303 	umull	r2, r3, r2, r3
    57f2:	099b      	lsrs	r3, r3, #6
    57f4:	e02c      	b.n	5850 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    57f6:	88fb      	ldrh	r3, [r7, #6]
    57f8:	683a      	ldr	r2, [r7, #0]
    57fa:	4920      	ldr	r1, [pc, #128]	; (587c <_get_cycles_for_us_internal+0x134>)
    57fc:	fba1 1202 	umull	r1, r2, r1, r2
    5800:	0952      	lsrs	r2, r2, #5
    5802:	fb02 f303 	mul.w	r3, r2, r3
    5806:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    580a:	332f      	adds	r3, #47	; 0x2f
    580c:	4a1c      	ldr	r2, [pc, #112]	; (5880 <_get_cycles_for_us_internal+0x138>)
    580e:	fba2 2303 	umull	r2, r3, r2, r3
    5812:	0b5b      	lsrs	r3, r3, #13
    5814:	e01c      	b.n	5850 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    5816:	88fb      	ldrh	r3, [r7, #6]
    5818:	683a      	ldr	r2, [r7, #0]
    581a:	491a      	ldr	r1, [pc, #104]	; (5884 <_get_cycles_for_us_internal+0x13c>)
    581c:	fba1 1202 	umull	r1, r2, r1, r2
    5820:	08d2      	lsrs	r2, r2, #3
    5822:	fb02 f303 	mul.w	r3, r2, r3
    5826:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    582a:	f203 33df 	addw	r3, r3, #991	; 0x3df
    582e:	4a16      	ldr	r2, [pc, #88]	; (5888 <_get_cycles_for_us_internal+0x140>)
    5830:	fba2 2303 	umull	r2, r3, r2, r3
    5834:	0c5b      	lsrs	r3, r3, #17
    5836:	e00b      	b.n	5850 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    5838:	88fb      	ldrh	r3, [r7, #6]
    583a:	683a      	ldr	r2, [r7, #0]
    583c:	fb02 f303 	mul.w	r3, r2, r3
    5840:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    5844:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5848:	4a10      	ldr	r2, [pc, #64]	; (588c <_get_cycles_for_us_internal+0x144>)
    584a:	fba2 2303 	umull	r2, r3, r2, r3
    584e:	0c9b      	lsrs	r3, r3, #18
	}
}
    5850:	4618      	mov	r0, r3
    5852:	370c      	adds	r7, #12
    5854:	46bd      	mov	sp, r7
    5856:	f85d 7b04 	ldr.w	r7, [sp], #4
    585a:	4770      	bx	lr
    585c:	431bde83 	.word	0x431bde83
    5860:	aaaaaaab 	.word	0xaaaaaaab
    5864:	0a7c5ac5 	.word	0x0a7c5ac5
    5868:	88888889 	.word	0x88888889
    586c:	d1b71759 	.word	0xd1b71759
    5870:	1b4e81b5 	.word	0x1b4e81b5
    5874:	10624dd3 	.word	0x10624dd3
    5878:	057619f1 	.word	0x057619f1
    587c:	51eb851f 	.word	0x51eb851f
    5880:	45e7b273 	.word	0x45e7b273
    5884:	cccccccd 	.word	0xcccccccd
    5888:	6fd91d85 	.word	0x6fd91d85
    588c:	165e9f81 	.word	0x165e9f81

00005890 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5890:	b580      	push	{r7, lr}
    5892:	b082      	sub	sp, #8
    5894:	af00      	add	r7, sp, #0
    5896:	4603      	mov	r3, r0
    5898:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    589a:	88fb      	ldrh	r3, [r7, #6]
    589c:	2209      	movs	r2, #9
    589e:	4904      	ldr	r1, [pc, #16]	; (58b0 <_get_cycles_for_us+0x20>)
    58a0:	4618      	mov	r0, r3
    58a2:	4b04      	ldr	r3, [pc, #16]	; (58b4 <_get_cycles_for_us+0x24>)
    58a4:	4798      	blx	r3
    58a6:	4603      	mov	r3, r0
}
    58a8:	4618      	mov	r0, r3
    58aa:	3708      	adds	r7, #8
    58ac:	46bd      	mov	sp, r7
    58ae:	bd80      	pop	{r7, pc}
    58b0:	07270e00 	.word	0x07270e00
    58b4:	00005749 	.word	0x00005749

000058b8 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    58b8:	b480      	push	{r7}
    58ba:	b083      	sub	sp, #12
    58bc:	af00      	add	r7, sp, #0
    58be:	4603      	mov	r3, r0
    58c0:	6039      	str	r1, [r7, #0]
    58c2:	80fb      	strh	r3, [r7, #6]
    58c4:	4613      	mov	r3, r2
    58c6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    58c8:	797b      	ldrb	r3, [r7, #5]
    58ca:	3b04      	subs	r3, #4
    58cc:	2b05      	cmp	r3, #5
    58ce:	d870      	bhi.n	59b2 <_get_cycles_for_ms_internal+0xfa>
    58d0:	a201      	add	r2, pc, #4	; (adr r2, 58d8 <_get_cycles_for_ms_internal+0x20>)
    58d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    58d6:	bf00      	nop
    58d8:	00005995 	.word	0x00005995
    58dc:	00005979 	.word	0x00005979
    58e0:	0000595d 	.word	0x0000595d
    58e4:	00005939 	.word	0x00005939
    58e8:	00005915 	.word	0x00005915
    58ec:	000058f1 	.word	0x000058f1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    58f0:	88fb      	ldrh	r3, [r7, #6]
    58f2:	683a      	ldr	r2, [r7, #0]
    58f4:	4937      	ldr	r1, [pc, #220]	; (59d4 <_get_cycles_for_ms_internal+0x11c>)
    58f6:	fba1 1202 	umull	r1, r2, r1, r2
    58fa:	0c92      	lsrs	r2, r2, #18
    58fc:	fb02 f303 	mul.w	r3, r2, r3
    5900:	3302      	adds	r3, #2
    5902:	4a35      	ldr	r2, [pc, #212]	; (59d8 <_get_cycles_for_ms_internal+0x120>)
    5904:	fba2 2303 	umull	r2, r3, r2, r3
    5908:	085b      	lsrs	r3, r3, #1
    590a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    590e:	fb02 f303 	mul.w	r3, r2, r3
    5912:	e058      	b.n	59c6 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    5914:	88fb      	ldrh	r3, [r7, #6]
    5916:	683a      	ldr	r2, [r7, #0]
    5918:	0952      	lsrs	r2, r2, #5
    591a:	4930      	ldr	r1, [pc, #192]	; (59dc <_get_cycles_for_ms_internal+0x124>)
    591c:	fba1 1202 	umull	r1, r2, r1, r2
    5920:	09d2      	lsrs	r2, r2, #7
    5922:	fb02 f303 	mul.w	r3, r2, r3
    5926:	3302      	adds	r3, #2
    5928:	4a2b      	ldr	r2, [pc, #172]	; (59d8 <_get_cycles_for_ms_internal+0x120>)
    592a:	fba2 2303 	umull	r2, r3, r2, r3
    592e:	085b      	lsrs	r3, r3, #1
    5930:	2264      	movs	r2, #100	; 0x64
    5932:	fb02 f303 	mul.w	r3, r2, r3
    5936:	e046      	b.n	59c6 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    5938:	88fb      	ldrh	r3, [r7, #6]
    593a:	683a      	ldr	r2, [r7, #0]
    593c:	4928      	ldr	r1, [pc, #160]	; (59e0 <_get_cycles_for_ms_internal+0x128>)
    593e:	fba1 1202 	umull	r1, r2, r1, r2
    5942:	0b52      	lsrs	r2, r2, #13
    5944:	fb02 f303 	mul.w	r3, r2, r3
    5948:	3302      	adds	r3, #2
    594a:	4a23      	ldr	r2, [pc, #140]	; (59d8 <_get_cycles_for_ms_internal+0x120>)
    594c:	fba2 2303 	umull	r2, r3, r2, r3
    5950:	085a      	lsrs	r2, r3, #1
    5952:	4613      	mov	r3, r2
    5954:	009b      	lsls	r3, r3, #2
    5956:	4413      	add	r3, r2
    5958:	005b      	lsls	r3, r3, #1
    595a:	e034      	b.n	59c6 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    595c:	88fb      	ldrh	r3, [r7, #6]
    595e:	683a      	ldr	r2, [r7, #0]
    5960:	4920      	ldr	r1, [pc, #128]	; (59e4 <_get_cycles_for_ms_internal+0x12c>)
    5962:	fba1 1202 	umull	r1, r2, r1, r2
    5966:	0992      	lsrs	r2, r2, #6
    5968:	fb02 f303 	mul.w	r3, r2, r3
    596c:	3302      	adds	r3, #2
    596e:	4a1a      	ldr	r2, [pc, #104]	; (59d8 <_get_cycles_for_ms_internal+0x120>)
    5970:	fba2 2303 	umull	r2, r3, r2, r3
    5974:	085b      	lsrs	r3, r3, #1
    5976:	e026      	b.n	59c6 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    5978:	88fb      	ldrh	r3, [r7, #6]
    597a:	683a      	ldr	r2, [r7, #0]
    597c:	491a      	ldr	r1, [pc, #104]	; (59e8 <_get_cycles_for_ms_internal+0x130>)
    597e:	fba1 1202 	umull	r1, r2, r1, r2
    5982:	0952      	lsrs	r2, r2, #5
    5984:	fb02 f303 	mul.w	r3, r2, r3
    5988:	331d      	adds	r3, #29
    598a:	4a18      	ldr	r2, [pc, #96]	; (59ec <_get_cycles_for_ms_internal+0x134>)
    598c:	fba2 2303 	umull	r2, r3, r2, r3
    5990:	091b      	lsrs	r3, r3, #4
    5992:	e018      	b.n	59c6 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    5994:	88fb      	ldrh	r3, [r7, #6]
    5996:	683a      	ldr	r2, [r7, #0]
    5998:	4915      	ldr	r1, [pc, #84]	; (59f0 <_get_cycles_for_ms_internal+0x138>)
    599a:	fba1 1202 	umull	r1, r2, r1, r2
    599e:	08d2      	lsrs	r2, r2, #3
    59a0:	fb02 f303 	mul.w	r3, r2, r3
    59a4:	f203 132b 	addw	r3, r3, #299	; 0x12b
    59a8:	4a12      	ldr	r2, [pc, #72]	; (59f4 <_get_cycles_for_ms_internal+0x13c>)
    59aa:	fba2 2303 	umull	r2, r3, r2, r3
    59ae:	095b      	lsrs	r3, r3, #5
    59b0:	e009      	b.n	59c6 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    59b2:	88fb      	ldrh	r3, [r7, #6]
    59b4:	683a      	ldr	r2, [r7, #0]
    59b6:	fb02 f303 	mul.w	r3, r2, r3
    59ba:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    59be:	4a0e      	ldr	r2, [pc, #56]	; (59f8 <_get_cycles_for_ms_internal+0x140>)
    59c0:	fba2 2303 	umull	r2, r3, r2, r3
    59c4:	099b      	lsrs	r3, r3, #6
	}
}
    59c6:	4618      	mov	r0, r3
    59c8:	370c      	adds	r7, #12
    59ca:	46bd      	mov	sp, r7
    59cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d0:	4770      	bx	lr
    59d2:	bf00      	nop
    59d4:	431bde83 	.word	0x431bde83
    59d8:	aaaaaaab 	.word	0xaaaaaaab
    59dc:	0a7c5ac5 	.word	0x0a7c5ac5
    59e0:	d1b71759 	.word	0xd1b71759
    59e4:	10624dd3 	.word	0x10624dd3
    59e8:	51eb851f 	.word	0x51eb851f
    59ec:	88888889 	.word	0x88888889
    59f0:	cccccccd 	.word	0xcccccccd
    59f4:	1b4e81b5 	.word	0x1b4e81b5
    59f8:	057619f1 	.word	0x057619f1

000059fc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    59fc:	b580      	push	{r7, lr}
    59fe:	b082      	sub	sp, #8
    5a00:	af00      	add	r7, sp, #0
    5a02:	4603      	mov	r3, r0
    5a04:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5a06:	88fb      	ldrh	r3, [r7, #6]
    5a08:	2209      	movs	r2, #9
    5a0a:	4904      	ldr	r1, [pc, #16]	; (5a1c <_get_cycles_for_ms+0x20>)
    5a0c:	4618      	mov	r0, r3
    5a0e:	4b04      	ldr	r3, [pc, #16]	; (5a20 <_get_cycles_for_ms+0x24>)
    5a10:	4798      	blx	r3
    5a12:	4603      	mov	r3, r0
}
    5a14:	4618      	mov	r0, r3
    5a16:	3708      	adds	r7, #8
    5a18:	46bd      	mov	sp, r7
    5a1a:	bd80      	pop	{r7, pc}
    5a1c:	07270e00 	.word	0x07270e00
    5a20:	000058b9 	.word	0x000058b9
    5a24:	00000000 	.word	0x00000000

00005a28 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    5a28:	b480      	push	{r7}
    5a2a:	b083      	sub	sp, #12
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
    5a30:	6039      	str	r1, [r7, #0]
    5a32:	bf00      	nop
    5a34:	f3af 8000 	nop.w

00005a38 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    5a38:	3901      	subs	r1, #1
    5a3a:	d8fd      	bhi.n	5a38 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    5a3c:	bf00      	nop
    5a3e:	370c      	adds	r7, #12
    5a40:	46bd      	mov	sp, r7
    5a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a46:	4770      	bx	lr

00005a48 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    5a48:	b480      	push	{r7}
    5a4a:	b083      	sub	sp, #12
    5a4c:	af00      	add	r7, sp, #0
    5a4e:	6078      	str	r0, [r7, #4]
    5a50:	460b      	mov	r3, r1
    5a52:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5a54:	687b      	ldr	r3, [r7, #4]
    5a56:	881b      	ldrh	r3, [r3, #0]
    5a58:	b29a      	uxth	r2, r3
    5a5a:	887b      	ldrh	r3, [r7, #2]
    5a5c:	021b      	lsls	r3, r3, #8
    5a5e:	b29b      	uxth	r3, r3
    5a60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    5a64:	b29b      	uxth	r3, r3
    5a66:	4313      	orrs	r3, r2
    5a68:	b29a      	uxth	r2, r3
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    5a6e:	bf00      	nop
    5a70:	370c      	adds	r7, #12
    5a72:	46bd      	mov	sp, r7
    5a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a78:	4770      	bx	lr

00005a7a <hri_port_set_EVCTRL_reg>:
{
    5a7a:	b480      	push	{r7}
    5a7c:	b085      	sub	sp, #20
    5a7e:	af00      	add	r7, sp, #0
    5a80:	60f8      	str	r0, [r7, #12]
    5a82:	460b      	mov	r3, r1
    5a84:	607a      	str	r2, [r7, #4]
    5a86:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    5a88:	7afb      	ldrb	r3, [r7, #11]
    5a8a:	7afa      	ldrb	r2, [r7, #11]
    5a8c:	68f9      	ldr	r1, [r7, #12]
    5a8e:	01d2      	lsls	r2, r2, #7
    5a90:	440a      	add	r2, r1
    5a92:	322c      	adds	r2, #44	; 0x2c
    5a94:	6811      	ldr	r1, [r2, #0]
    5a96:	687a      	ldr	r2, [r7, #4]
    5a98:	430a      	orrs	r2, r1
    5a9a:	68f9      	ldr	r1, [r7, #12]
    5a9c:	01db      	lsls	r3, r3, #7
    5a9e:	440b      	add	r3, r1
    5aa0:	332c      	adds	r3, #44	; 0x2c
    5aa2:	601a      	str	r2, [r3, #0]
}
    5aa4:	bf00      	nop
    5aa6:	3714      	adds	r7, #20
    5aa8:	46bd      	mov	sp, r7
    5aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aae:	4770      	bx	lr

00005ab0 <_port_event_init>:

static inline void _port_event_init()
{
    5ab0:	b580      	push	{r7, lr}
    5ab2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    5ab4:	2200      	movs	r2, #0
    5ab6:	2100      	movs	r1, #0
    5ab8:	4809      	ldr	r0, [pc, #36]	; (5ae0 <_port_event_init+0x30>)
    5aba:	4b0a      	ldr	r3, [pc, #40]	; (5ae4 <_port_event_init+0x34>)
    5abc:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    5abe:	2200      	movs	r2, #0
    5ac0:	2101      	movs	r1, #1
    5ac2:	4807      	ldr	r0, [pc, #28]	; (5ae0 <_port_event_init+0x30>)
    5ac4:	4b07      	ldr	r3, [pc, #28]	; (5ae4 <_port_event_init+0x34>)
    5ac6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    5ac8:	22ef      	movs	r2, #239	; 0xef
    5aca:	2102      	movs	r1, #2
    5acc:	4804      	ldr	r0, [pc, #16]	; (5ae0 <_port_event_init+0x30>)
    5ace:	4b05      	ldr	r3, [pc, #20]	; (5ae4 <_port_event_init+0x34>)
    5ad0:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    5ad2:	2200      	movs	r2, #0
    5ad4:	2103      	movs	r1, #3
    5ad6:	4802      	ldr	r0, [pc, #8]	; (5ae0 <_port_event_init+0x30>)
    5ad8:	4b02      	ldr	r3, [pc, #8]	; (5ae4 <_port_event_init+0x34>)
    5ada:	4798      	blx	r3
}
    5adc:	bf00      	nop
    5ade:	bd80      	pop	{r7, pc}
    5ae0:	41008000 	.word	0x41008000
    5ae4:	00005a7b 	.word	0x00005a7b

00005ae8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    5aec:	2104      	movs	r1, #4
    5aee:	480b      	ldr	r0, [pc, #44]	; (5b1c <_init_chip+0x34>)
    5af0:	4b0b      	ldr	r3, [pc, #44]	; (5b20 <_init_chip+0x38>)
    5af2:	4798      	blx	r3

	_osc32kctrl_init_sources();
    5af4:	4b0b      	ldr	r3, [pc, #44]	; (5b24 <_init_chip+0x3c>)
    5af6:	4798      	blx	r3
	_oscctrl_init_sources();
    5af8:	4b0b      	ldr	r3, [pc, #44]	; (5b28 <_init_chip+0x40>)
    5afa:	4798      	blx	r3
	_mclk_init();
    5afc:	4b0b      	ldr	r3, [pc, #44]	; (5b2c <_init_chip+0x44>)
    5afe:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5b00:	f44f 6084 	mov.w	r0, #1056	; 0x420
    5b04:	4b0a      	ldr	r3, [pc, #40]	; (5b30 <_init_chip+0x48>)
    5b06:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    5b08:	4b0a      	ldr	r3, [pc, #40]	; (5b34 <_init_chip+0x4c>)
    5b0a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5b0c:	f640 30df 	movw	r0, #3039	; 0xbdf
    5b10:	4b07      	ldr	r3, [pc, #28]	; (5b30 <_init_chip+0x48>)
    5b12:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    5b14:	4b08      	ldr	r3, [pc, #32]	; (5b38 <_init_chip+0x50>)
    5b16:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    5b18:	bf00      	nop
    5b1a:	bd80      	pop	{r7, pc}
    5b1c:	41004000 	.word	0x41004000
    5b20:	00005a49 	.word	0x00005a49
    5b24:	00006429 	.word	0x00006429
    5b28:	000068f1 	.word	0x000068f1
    5b2c:	00006349 	.word	0x00006349
    5b30:	00006251 	.word	0x00006251
    5b34:	00006931 	.word	0x00006931
    5b38:	00005ab1 	.word	0x00005ab1

00005b3c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    5b3c:	b480      	push	{r7}
    5b3e:	b083      	sub	sp, #12
    5b40:	af00      	add	r7, sp, #0
    5b42:	6078      	str	r0, [r7, #4]
    5b44:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    5b46:	687b      	ldr	r3, [r7, #4]
    5b48:	683a      	ldr	r2, [r7, #0]
    5b4a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5b4c:	2300      	movs	r3, #0
}
    5b4e:	4618      	mov	r0, r3
    5b50:	370c      	adds	r7, #12
    5b52:	46bd      	mov	sp, r7
    5b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b58:	4770      	bx	lr
	...

00005b5c <__NVIC_EnableIRQ>:
{
    5b5c:	b480      	push	{r7}
    5b5e:	b083      	sub	sp, #12
    5b60:	af00      	add	r7, sp, #0
    5b62:	4603      	mov	r3, r0
    5b64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	db0b      	blt.n	5b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b6e:	4909      	ldr	r1, [pc, #36]	; (5b94 <__NVIC_EnableIRQ+0x38>)
    5b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5b74:	095b      	lsrs	r3, r3, #5
    5b76:	88fa      	ldrh	r2, [r7, #6]
    5b78:	f002 021f 	and.w	r2, r2, #31
    5b7c:	2001      	movs	r0, #1
    5b7e:	fa00 f202 	lsl.w	r2, r0, r2
    5b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5b86:	bf00      	nop
    5b88:	370c      	adds	r7, #12
    5b8a:	46bd      	mov	sp, r7
    5b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b90:	4770      	bx	lr
    5b92:	bf00      	nop
    5b94:	e000e100 	.word	0xe000e100

00005b98 <__NVIC_DisableIRQ>:
{
    5b98:	b480      	push	{r7}
    5b9a:	b083      	sub	sp, #12
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	4603      	mov	r3, r0
    5ba0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	db10      	blt.n	5bcc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5baa:	490b      	ldr	r1, [pc, #44]	; (5bd8 <__NVIC_DisableIRQ+0x40>)
    5bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5bb0:	095b      	lsrs	r3, r3, #5
    5bb2:	88fa      	ldrh	r2, [r7, #6]
    5bb4:	f002 021f 	and.w	r2, r2, #31
    5bb8:	2001      	movs	r0, #1
    5bba:	fa00 f202 	lsl.w	r2, r0, r2
    5bbe:	3320      	adds	r3, #32
    5bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5bc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5bc8:	f3bf 8f6f 	isb	sy
}
    5bcc:	bf00      	nop
    5bce:	370c      	adds	r7, #12
    5bd0:	46bd      	mov	sp, r7
    5bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bd6:	4770      	bx	lr
    5bd8:	e000e100 	.word	0xe000e100

00005bdc <__NVIC_ClearPendingIRQ>:
{
    5bdc:	b480      	push	{r7}
    5bde:	b083      	sub	sp, #12
    5be0:	af00      	add	r7, sp, #0
    5be2:	4603      	mov	r3, r0
    5be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5bea:	2b00      	cmp	r3, #0
    5bec:	db0c      	blt.n	5c08 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5bee:	4909      	ldr	r1, [pc, #36]	; (5c14 <__NVIC_ClearPendingIRQ+0x38>)
    5bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5bf4:	095b      	lsrs	r3, r3, #5
    5bf6:	88fa      	ldrh	r2, [r7, #6]
    5bf8:	f002 021f 	and.w	r2, r2, #31
    5bfc:	2001      	movs	r0, #1
    5bfe:	fa00 f202 	lsl.w	r2, r0, r2
    5c02:	3360      	adds	r3, #96	; 0x60
    5c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5c08:	bf00      	nop
    5c0a:	370c      	adds	r7, #12
    5c0c:	46bd      	mov	sp, r7
    5c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c12:	4770      	bx	lr
    5c14:	e000e100 	.word	0xe000e100

00005c18 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5c18:	b480      	push	{r7}
    5c1a:	b083      	sub	sp, #12
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	6078      	str	r0, [r7, #4]
    5c20:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    5c22:	bf00      	nop
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	685a      	ldr	r2, [r3, #4]
    5c28:	683b      	ldr	r3, [r7, #0]
    5c2a:	4013      	ands	r3, r2
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	d1f9      	bne.n	5c24 <hri_eic_wait_for_sync+0xc>
	};
}
    5c30:	bf00      	nop
    5c32:	370c      	adds	r7, #12
    5c34:	46bd      	mov	sp, r7
    5c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c3a:	4770      	bx	lr

00005c3c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    5c3c:	b480      	push	{r7}
    5c3e:	b083      	sub	sp, #12
    5c40:	af00      	add	r7, sp, #0
    5c42:	6078      	str	r0, [r7, #4]
    5c44:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    5c46:	687b      	ldr	r3, [r7, #4]
    5c48:	685a      	ldr	r2, [r3, #4]
    5c4a:	683b      	ldr	r3, [r7, #0]
    5c4c:	4013      	ands	r3, r2
    5c4e:	2b00      	cmp	r3, #0
    5c50:	bf14      	ite	ne
    5c52:	2301      	movne	r3, #1
    5c54:	2300      	moveq	r3, #0
    5c56:	b2db      	uxtb	r3, r3
}
    5c58:	4618      	mov	r0, r3
    5c5a:	370c      	adds	r7, #12
    5c5c:	46bd      	mov	sp, r7
    5c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c62:	4770      	bx	lr

00005c64 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    5c64:	b480      	push	{r7}
    5c66:	b083      	sub	sp, #12
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	695b      	ldr	r3, [r3, #20]
}
    5c70:	4618      	mov	r0, r3
    5c72:	370c      	adds	r7, #12
    5c74:	46bd      	mov	sp, r7
    5c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c7a:	4770      	bx	lr

00005c7c <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    5c7c:	b480      	push	{r7}
    5c7e:	b083      	sub	sp, #12
    5c80:	af00      	add	r7, sp, #0
    5c82:	6078      	str	r0, [r7, #4]
    5c84:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	683a      	ldr	r2, [r7, #0]
    5c8a:	615a      	str	r2, [r3, #20]
}
    5c8c:	bf00      	nop
    5c8e:	370c      	adds	r7, #12
    5c90:	46bd      	mov	sp, r7
    5c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c96:	4770      	bx	lr

00005c98 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5c98:	b580      	push	{r7, lr}
    5c9a:	b082      	sub	sp, #8
    5c9c:	af00      	add	r7, sp, #0
    5c9e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	781b      	ldrb	r3, [r3, #0]
    5ca4:	b2db      	uxtb	r3, r3
    5ca6:	f043 0302 	orr.w	r3, r3, #2
    5caa:	b2da      	uxtb	r2, r3
    5cac:	687b      	ldr	r3, [r7, #4]
    5cae:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    5cb0:	2103      	movs	r1, #3
    5cb2:	6878      	ldr	r0, [r7, #4]
    5cb4:	4b02      	ldr	r3, [pc, #8]	; (5cc0 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    5cb6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5cb8:	bf00      	nop
    5cba:	3708      	adds	r7, #8
    5cbc:	46bd      	mov	sp, r7
    5cbe:	bd80      	pop	{r7, pc}
    5cc0:	00005c19 	.word	0x00005c19

00005cc4 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5cc4:	b580      	push	{r7, lr}
    5cc6:	b082      	sub	sp, #8
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    5ccc:	687b      	ldr	r3, [r7, #4]
    5cce:	781b      	ldrb	r3, [r3, #0]
    5cd0:	b2db      	uxtb	r3, r3
    5cd2:	f023 0302 	bic.w	r3, r3, #2
    5cd6:	b2da      	uxtb	r2, r3
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    5cdc:	2103      	movs	r1, #3
    5cde:	6878      	ldr	r0, [r7, #4]
    5ce0:	4b02      	ldr	r3, [pc, #8]	; (5cec <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    5ce2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5ce4:	bf00      	nop
    5ce6:	3708      	adds	r7, #8
    5ce8:	46bd      	mov	sp, r7
    5cea:	bd80      	pop	{r7, pc}
    5cec:	00005c19 	.word	0x00005c19

00005cf0 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    5cf0:	b580      	push	{r7, lr}
    5cf2:	b084      	sub	sp, #16
    5cf4:	af00      	add	r7, sp, #0
    5cf6:	6078      	str	r0, [r7, #4]
    5cf8:	460b      	mov	r3, r1
    5cfa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	781b      	ldrb	r3, [r3, #0]
    5d00:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    5d02:	7bfb      	ldrb	r3, [r7, #15]
    5d04:	f023 0310 	bic.w	r3, r3, #16
    5d08:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    5d0a:	78fb      	ldrb	r3, [r7, #3]
    5d0c:	011b      	lsls	r3, r3, #4
    5d0e:	b25a      	sxtb	r2, r3
    5d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5d14:	4313      	orrs	r3, r2
    5d16:	b25b      	sxtb	r3, r3
    5d18:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	7bfa      	ldrb	r2, [r7, #15]
    5d1e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    5d20:	2103      	movs	r1, #3
    5d22:	6878      	ldr	r0, [r7, #4]
    5d24:	4b02      	ldr	r3, [pc, #8]	; (5d30 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    5d26:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5d28:	bf00      	nop
    5d2a:	3710      	adds	r7, #16
    5d2c:	46bd      	mov	sp, r7
    5d2e:	bd80      	pop	{r7, pc}
    5d30:	00005c19 	.word	0x00005c19

00005d34 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    5d34:	b580      	push	{r7, lr}
    5d36:	b084      	sub	sp, #16
    5d38:	af00      	add	r7, sp, #0
    5d3a:	6078      	str	r0, [r7, #4]
    5d3c:	460b      	mov	r3, r1
    5d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    5d40:	2103      	movs	r1, #3
    5d42:	6878      	ldr	r0, [r7, #4]
    5d44:	4b06      	ldr	r3, [pc, #24]	; (5d60 <hri_eic_get_CTRLA_reg+0x2c>)
    5d46:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	781b      	ldrb	r3, [r3, #0]
    5d4c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5d4e:	7bfa      	ldrb	r2, [r7, #15]
    5d50:	78fb      	ldrb	r3, [r7, #3]
    5d52:	4013      	ands	r3, r2
    5d54:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5d56:	7bfb      	ldrb	r3, [r7, #15]
}
    5d58:	4618      	mov	r0, r3
    5d5a:	3710      	adds	r7, #16
    5d5c:	46bd      	mov	sp, r7
    5d5e:	bd80      	pop	{r7, pc}
    5d60:	00005c19 	.word	0x00005c19

00005d64 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    5d64:	b580      	push	{r7, lr}
    5d66:	b082      	sub	sp, #8
    5d68:	af00      	add	r7, sp, #0
    5d6a:	6078      	str	r0, [r7, #4]
    5d6c:	460b      	mov	r3, r1
    5d6e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    5d70:	687b      	ldr	r3, [r7, #4]
    5d72:	78fa      	ldrb	r2, [r7, #3]
    5d74:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    5d76:	2103      	movs	r1, #3
    5d78:	6878      	ldr	r0, [r7, #4]
    5d7a:	4b03      	ldr	r3, [pc, #12]	; (5d88 <hri_eic_write_CTRLA_reg+0x24>)
    5d7c:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    5d7e:	bf00      	nop
    5d80:	3708      	adds	r7, #8
    5d82:	46bd      	mov	sp, r7
    5d84:	bd80      	pop	{r7, pc}
    5d86:	bf00      	nop
    5d88:	00005c19 	.word	0x00005c19

00005d8c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    5d8c:	b480      	push	{r7}
    5d8e:	b083      	sub	sp, #12
    5d90:	af00      	add	r7, sp, #0
    5d92:	6078      	str	r0, [r7, #4]
    5d94:	460b      	mov	r3, r1
    5d96:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	78fa      	ldrb	r2, [r7, #3]
    5d9c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5d9e:	bf00      	nop
    5da0:	370c      	adds	r7, #12
    5da2:	46bd      	mov	sp, r7
    5da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5da8:	4770      	bx	lr

00005daa <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    5daa:	b480      	push	{r7}
    5dac:	b083      	sub	sp, #12
    5dae:	af00      	add	r7, sp, #0
    5db0:	6078      	str	r0, [r7, #4]
    5db2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    5db4:	687b      	ldr	r3, [r7, #4]
    5db6:	683a      	ldr	r2, [r7, #0]
    5db8:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5dba:	bf00      	nop
    5dbc:	370c      	adds	r7, #12
    5dbe:	46bd      	mov	sp, r7
    5dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc4:	4770      	bx	lr

00005dc6 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    5dc6:	b480      	push	{r7}
    5dc8:	b083      	sub	sp, #12
    5dca:	af00      	add	r7, sp, #0
    5dcc:	6078      	str	r0, [r7, #4]
    5dce:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	683a      	ldr	r2, [r7, #0]
    5dd4:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5dd6:	bf00      	nop
    5dd8:	370c      	adds	r7, #12
    5dda:	46bd      	mov	sp, r7
    5ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5de0:	4770      	bx	lr

00005de2 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    5de2:	b480      	push	{r7}
    5de4:	b085      	sub	sp, #20
    5de6:	af00      	add	r7, sp, #0
    5de8:	60f8      	str	r0, [r7, #12]
    5dea:	460b      	mov	r3, r1
    5dec:	607a      	str	r2, [r7, #4]
    5dee:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    5df0:	7afb      	ldrb	r3, [r7, #11]
    5df2:	68fa      	ldr	r2, [r7, #12]
    5df4:	3306      	adds	r3, #6
    5df6:	009b      	lsls	r3, r3, #2
    5df8:	4413      	add	r3, r2
    5dfa:	687a      	ldr	r2, [r7, #4]
    5dfc:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    5dfe:	bf00      	nop
    5e00:	3714      	adds	r7, #20
    5e02:	46bd      	mov	sp, r7
    5e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e08:	4770      	bx	lr

00005e0a <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    5e0a:	b480      	push	{r7}
    5e0c:	b083      	sub	sp, #12
    5e0e:	af00      	add	r7, sp, #0
    5e10:	6078      	str	r0, [r7, #4]
    5e12:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	683a      	ldr	r2, [r7, #0]
    5e18:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    5e1a:	bf00      	nop
    5e1c:	370c      	adds	r7, #12
    5e1e:	46bd      	mov	sp, r7
    5e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e24:	4770      	bx	lr

00005e26 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    5e26:	b480      	push	{r7}
    5e28:	b083      	sub	sp, #12
    5e2a:	af00      	add	r7, sp, #0
    5e2c:	6078      	str	r0, [r7, #4]
    5e2e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    5e30:	687b      	ldr	r3, [r7, #4]
    5e32:	683a      	ldr	r2, [r7, #0]
    5e34:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    5e36:	bf00      	nop
    5e38:	370c      	adds	r7, #12
    5e3a:	46bd      	mov	sp, r7
    5e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e40:	4770      	bx	lr
	...

00005e44 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    5e44:	b580      	push	{r7, lr}
    5e46:	b082      	sub	sp, #8
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    5e4c:	2101      	movs	r1, #1
    5e4e:	4838      	ldr	r0, [pc, #224]	; (5f30 <_ext_irq_init+0xec>)
    5e50:	4b38      	ldr	r3, [pc, #224]	; (5f34 <_ext_irq_init+0xf0>)
    5e52:	4798      	blx	r3
    5e54:	4603      	mov	r3, r0
    5e56:	f083 0301 	eor.w	r3, r3, #1
    5e5a:	b2db      	uxtb	r3, r3
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d011      	beq.n	5e84 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    5e60:	2102      	movs	r1, #2
    5e62:	4833      	ldr	r0, [pc, #204]	; (5f30 <_ext_irq_init+0xec>)
    5e64:	4b34      	ldr	r3, [pc, #208]	; (5f38 <_ext_irq_init+0xf4>)
    5e66:	4798      	blx	r3
    5e68:	4603      	mov	r3, r0
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	d006      	beq.n	5e7c <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    5e6e:	4830      	ldr	r0, [pc, #192]	; (5f30 <_ext_irq_init+0xec>)
    5e70:	4b32      	ldr	r3, [pc, #200]	; (5f3c <_ext_irq_init+0xf8>)
    5e72:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    5e74:	2102      	movs	r1, #2
    5e76:	482e      	ldr	r0, [pc, #184]	; (5f30 <_ext_irq_init+0xec>)
    5e78:	4b31      	ldr	r3, [pc, #196]	; (5f40 <_ext_irq_init+0xfc>)
    5e7a:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    5e7c:	2101      	movs	r1, #1
    5e7e:	482c      	ldr	r0, [pc, #176]	; (5f30 <_ext_irq_init+0xec>)
    5e80:	4b30      	ldr	r3, [pc, #192]	; (5f44 <_ext_irq_init+0x100>)
    5e82:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    5e84:	2101      	movs	r1, #1
    5e86:	482a      	ldr	r0, [pc, #168]	; (5f30 <_ext_irq_init+0xec>)
    5e88:	4b2d      	ldr	r3, [pc, #180]	; (5f40 <_ext_irq_init+0xfc>)
    5e8a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    5e8c:	2100      	movs	r1, #0
    5e8e:	4828      	ldr	r0, [pc, #160]	; (5f30 <_ext_irq_init+0xec>)
    5e90:	4b2d      	ldr	r3, [pc, #180]	; (5f48 <_ext_irq_init+0x104>)
    5e92:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    5e94:	2100      	movs	r1, #0
    5e96:	4826      	ldr	r0, [pc, #152]	; (5f30 <_ext_irq_init+0xec>)
    5e98:	4b2c      	ldr	r3, [pc, #176]	; (5f4c <_ext_irq_init+0x108>)
    5e9a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    5e9c:	2100      	movs	r1, #0
    5e9e:	4824      	ldr	r0, [pc, #144]	; (5f30 <_ext_irq_init+0xec>)
    5ea0:	4b2b      	ldr	r3, [pc, #172]	; (5f50 <_ext_irq_init+0x10c>)
    5ea2:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    5ea4:	2130      	movs	r1, #48	; 0x30
    5ea6:	4822      	ldr	r0, [pc, #136]	; (5f30 <_ext_irq_init+0xec>)
    5ea8:	4b2a      	ldr	r3, [pc, #168]	; (5f54 <_ext_irq_init+0x110>)
    5eaa:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    5eac:	2130      	movs	r1, #48	; 0x30
    5eae:	4820      	ldr	r0, [pc, #128]	; (5f30 <_ext_irq_init+0xec>)
    5eb0:	4b29      	ldr	r3, [pc, #164]	; (5f58 <_ext_irq_init+0x114>)
    5eb2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    5eb4:	2100      	movs	r1, #0
    5eb6:	481e      	ldr	r0, [pc, #120]	; (5f30 <_ext_irq_init+0xec>)
    5eb8:	4b28      	ldr	r3, [pc, #160]	; (5f5c <_ext_irq_init+0x118>)
    5eba:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5ebc:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    5ec0:	2100      	movs	r1, #0
    5ec2:	481b      	ldr	r0, [pc, #108]	; (5f30 <_ext_irq_init+0xec>)
    5ec4:	4b26      	ldr	r3, [pc, #152]	; (5f60 <_ext_irq_init+0x11c>)
    5ec6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5ec8:	2200      	movs	r2, #0
    5eca:	2101      	movs	r1, #1
    5ecc:	4818      	ldr	r0, [pc, #96]	; (5f30 <_ext_irq_init+0xec>)
    5ece:	4b24      	ldr	r3, [pc, #144]	; (5f60 <_ext_irq_init+0x11c>)
    5ed0:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5ed2:	4817      	ldr	r0, [pc, #92]	; (5f30 <_ext_irq_init+0xec>)
    5ed4:	4b23      	ldr	r3, [pc, #140]	; (5f64 <_ext_irq_init+0x120>)
    5ed6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    5ed8:	2010      	movs	r0, #16
    5eda:	4b23      	ldr	r3, [pc, #140]	; (5f68 <_ext_irq_init+0x124>)
    5edc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    5ede:	2010      	movs	r0, #16
    5ee0:	4b22      	ldr	r3, [pc, #136]	; (5f6c <_ext_irq_init+0x128>)
    5ee2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    5ee4:	2010      	movs	r0, #16
    5ee6:	4b22      	ldr	r3, [pc, #136]	; (5f70 <_ext_irq_init+0x12c>)
    5ee8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    5eea:	2011      	movs	r0, #17
    5eec:	4b1e      	ldr	r3, [pc, #120]	; (5f68 <_ext_irq_init+0x124>)
    5eee:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    5ef0:	2011      	movs	r0, #17
    5ef2:	4b1e      	ldr	r3, [pc, #120]	; (5f6c <_ext_irq_init+0x128>)
    5ef4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    5ef6:	2011      	movs	r0, #17
    5ef8:	4b1d      	ldr	r3, [pc, #116]	; (5f70 <_ext_irq_init+0x12c>)
    5efa:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    5efc:	2012      	movs	r0, #18
    5efe:	4b1a      	ldr	r3, [pc, #104]	; (5f68 <_ext_irq_init+0x124>)
    5f00:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    5f02:	2012      	movs	r0, #18
    5f04:	4b19      	ldr	r3, [pc, #100]	; (5f6c <_ext_irq_init+0x128>)
    5f06:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    5f08:	2012      	movs	r0, #18
    5f0a:	4b19      	ldr	r3, [pc, #100]	; (5f70 <_ext_irq_init+0x12c>)
    5f0c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    5f0e:	2013      	movs	r0, #19
    5f10:	4b15      	ldr	r3, [pc, #84]	; (5f68 <_ext_irq_init+0x124>)
    5f12:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    5f14:	2013      	movs	r0, #19
    5f16:	4b15      	ldr	r3, [pc, #84]	; (5f6c <_ext_irq_init+0x128>)
    5f18:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    5f1a:	2013      	movs	r0, #19
    5f1c:	4b14      	ldr	r3, [pc, #80]	; (5f70 <_ext_irq_init+0x12c>)
    5f1e:	4798      	blx	r3

	callback = cb;
    5f20:	4a14      	ldr	r2, [pc, #80]	; (5f74 <_ext_irq_init+0x130>)
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    5f26:	2300      	movs	r3, #0
}
    5f28:	4618      	mov	r0, r3
    5f2a:	3708      	adds	r7, #8
    5f2c:	46bd      	mov	sp, r7
    5f2e:	bd80      	pop	{r7, pc}
    5f30:	40002800 	.word	0x40002800
    5f34:	00005c3d 	.word	0x00005c3d
    5f38:	00005d35 	.word	0x00005d35
    5f3c:	00005cc5 	.word	0x00005cc5
    5f40:	00005c19 	.word	0x00005c19
    5f44:	00005d65 	.word	0x00005d65
    5f48:	00005cf1 	.word	0x00005cf1
    5f4c:	00005d8d 	.word	0x00005d8d
    5f50:	00005dab 	.word	0x00005dab
    5f54:	00005dc7 	.word	0x00005dc7
    5f58:	00005e0b 	.word	0x00005e0b
    5f5c:	00005e27 	.word	0x00005e27
    5f60:	00005de3 	.word	0x00005de3
    5f64:	00005c99 	.word	0x00005c99
    5f68:	00005b99 	.word	0x00005b99
    5f6c:	00005bdd 	.word	0x00005bdd
    5f70:	00005b5d 	.word	0x00005b5d
    5f74:	20001c8c 	.word	0x20001c8c

00005f78 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    5f78:	b580      	push	{r7, lr}
    5f7a:	b084      	sub	sp, #16
    5f7c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    5f7e:	4841      	ldr	r0, [pc, #260]	; (6084 <_ext_irq_handler+0x10c>)
    5f80:	4b41      	ldr	r3, [pc, #260]	; (6088 <_ext_irq_handler+0x110>)
    5f82:	4798      	blx	r3
    5f84:	4603      	mov	r3, r0
    5f86:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    5f88:	f04f 33ff 	mov.w	r3, #4294967295
    5f8c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    5f8e:	683b      	ldr	r3, [r7, #0]
    5f90:	4619      	mov	r1, r3
    5f92:	483c      	ldr	r0, [pc, #240]	; (6084 <_ext_irq_handler+0x10c>)
    5f94:	4b3d      	ldr	r3, [pc, #244]	; (608c <_ext_irq_handler+0x114>)
    5f96:	4798      	blx	r3

	ASSERT(callback);
    5f98:	4b3d      	ldr	r3, [pc, #244]	; (6090 <_ext_irq_handler+0x118>)
    5f9a:	681b      	ldr	r3, [r3, #0]
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	bf14      	ite	ne
    5fa0:	2301      	movne	r3, #1
    5fa2:	2300      	moveq	r3, #0
    5fa4:	b2db      	uxtb	r3, r3
    5fa6:	22f4      	movs	r2, #244	; 0xf4
    5fa8:	493a      	ldr	r1, [pc, #232]	; (6094 <_ext_irq_handler+0x11c>)
    5faa:	4618      	mov	r0, r3
    5fac:	4b3a      	ldr	r3, [pc, #232]	; (6098 <_ext_irq_handler+0x120>)
    5fae:	4798      	blx	r3

	while (flags) {
    5fb0:	e060      	b.n	6074 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    5fb2:	683b      	ldr	r3, [r7, #0]
    5fb4:	4618      	mov	r0, r3
    5fb6:	4b39      	ldr	r3, [pc, #228]	; (609c <_ext_irq_handler+0x124>)
    5fb8:	4798      	blx	r3
    5fba:	4603      	mov	r3, r0
    5fbc:	b2db      	uxtb	r3, r3
    5fbe:	3b01      	subs	r3, #1
    5fc0:	b2db      	uxtb	r3, r3
    5fc2:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    5fc4:	e047      	b.n	6056 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    5fc6:	2300      	movs	r3, #0
    5fc8:	71fb      	strb	r3, [r7, #7]
    5fca:	2304      	movs	r3, #4
    5fcc:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5fce:	e024      	b.n	601a <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    5fd0:	79ba      	ldrb	r2, [r7, #6]
    5fd2:	79fb      	ldrb	r3, [r7, #7]
    5fd4:	4413      	add	r3, r2
    5fd6:	105b      	asrs	r3, r3, #1
    5fd8:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5fda:	797b      	ldrb	r3, [r7, #5]
    5fdc:	4a30      	ldr	r2, [pc, #192]	; (60a0 <_ext_irq_handler+0x128>)
    5fde:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5fe2:	461a      	mov	r2, r3
    5fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5fe8:	429a      	cmp	r2, r3
    5fea:	d106      	bne.n	5ffa <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    5fec:	797b      	ldrb	r3, [r7, #5]
    5fee:	4a2c      	ldr	r2, [pc, #176]	; (60a0 <_ext_irq_handler+0x128>)
    5ff0:	00db      	lsls	r3, r3, #3
    5ff2:	4413      	add	r3, r2
    5ff4:	685b      	ldr	r3, [r3, #4]
    5ff6:	60bb      	str	r3, [r7, #8]
					break;
    5ff8:	e013      	b.n	6022 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    5ffa:	797b      	ldrb	r3, [r7, #5]
    5ffc:	4a28      	ldr	r2, [pc, #160]	; (60a0 <_ext_irq_handler+0x128>)
    5ffe:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6002:	461a      	mov	r2, r3
    6004:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6008:	429a      	cmp	r2, r3
    600a:	da03      	bge.n	6014 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    600c:	797b      	ldrb	r3, [r7, #5]
    600e:	3301      	adds	r3, #1
    6010:	71fb      	strb	r3, [r7, #7]
    6012:	e002      	b.n	601a <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    6014:	797b      	ldrb	r3, [r7, #5]
    6016:	3b01      	subs	r3, #1
    6018:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    601a:	79ba      	ldrb	r2, [r7, #6]
    601c:	79fb      	ldrb	r3, [r7, #7]
    601e:	429a      	cmp	r2, r3
    6020:	d2d6      	bcs.n	5fd0 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    6022:	68bb      	ldr	r3, [r7, #8]
    6024:	f1b3 3fff 	cmp.w	r3, #4294967295
    6028:	d003      	beq.n	6032 <_ext_irq_handler+0xba>
				callback(pin);
    602a:	4b19      	ldr	r3, [pc, #100]	; (6090 <_ext_irq_handler+0x118>)
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	68b8      	ldr	r0, [r7, #8]
    6030:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    6032:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6036:	2201      	movs	r2, #1
    6038:	fa02 f303 	lsl.w	r3, r2, r3
    603c:	43da      	mvns	r2, r3
    603e:	683b      	ldr	r3, [r7, #0]
    6040:	4013      	ands	r3, r2
    6042:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    6044:	683b      	ldr	r3, [r7, #0]
    6046:	4618      	mov	r0, r3
    6048:	4b14      	ldr	r3, [pc, #80]	; (609c <_ext_irq_handler+0x124>)
    604a:	4798      	blx	r3
    604c:	4603      	mov	r3, r0
    604e:	b2db      	uxtb	r3, r3
    6050:	3b01      	subs	r3, #1
    6052:	b2db      	uxtb	r3, r3
    6054:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6056:	f997 300f 	ldrsb.w	r3, [r7, #15]
    605a:	f1b3 3fff 	cmp.w	r3, #4294967295
    605e:	d1b2      	bne.n	5fc6 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    6060:	4808      	ldr	r0, [pc, #32]	; (6084 <_ext_irq_handler+0x10c>)
    6062:	4b09      	ldr	r3, [pc, #36]	; (6088 <_ext_irq_handler+0x110>)
    6064:	4798      	blx	r3
    6066:	4603      	mov	r3, r0
    6068:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	4619      	mov	r1, r3
    606e:	4805      	ldr	r0, [pc, #20]	; (6084 <_ext_irq_handler+0x10c>)
    6070:	4b06      	ldr	r3, [pc, #24]	; (608c <_ext_irq_handler+0x114>)
    6072:	4798      	blx	r3
	while (flags) {
    6074:	683b      	ldr	r3, [r7, #0]
    6076:	2b00      	cmp	r3, #0
    6078:	d19b      	bne.n	5fb2 <_ext_irq_handler+0x3a>
	}
}
    607a:	bf00      	nop
    607c:	3710      	adds	r7, #16
    607e:	46bd      	mov	sp, r7
    6080:	bd80      	pop	{r7, pc}
    6082:	bf00      	nop
    6084:	40002800 	.word	0x40002800
    6088:	00005c65 	.word	0x00005c65
    608c:	00005c7d 	.word	0x00005c7d
    6090:	20001c8c 	.word	0x20001c8c
    6094:	0001144c 	.word	0x0001144c
    6098:	00004f51 	.word	0x00004f51
    609c:	0001014d 	.word	0x0001014d
    60a0:	0001142c 	.word	0x0001142c

000060a4 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    60a4:	b580      	push	{r7, lr}
    60a6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    60a8:	4b01      	ldr	r3, [pc, #4]	; (60b0 <EIC_4_Handler+0xc>)
    60aa:	4798      	blx	r3
} /**
    60ac:	bf00      	nop
    60ae:	bd80      	pop	{r7, pc}
    60b0:	00005f79 	.word	0x00005f79

000060b4 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    60b4:	b580      	push	{r7, lr}
    60b6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    60b8:	4b01      	ldr	r3, [pc, #4]	; (60c0 <EIC_5_Handler+0xc>)
    60ba:	4798      	blx	r3
} /**
    60bc:	bf00      	nop
    60be:	bd80      	pop	{r7, pc}
    60c0:	00005f79 	.word	0x00005f79

000060c4 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    60c4:	b580      	push	{r7, lr}
    60c6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    60c8:	4b01      	ldr	r3, [pc, #4]	; (60d0 <EIC_6_Handler+0xc>)
    60ca:	4798      	blx	r3
} /**
    60cc:	bf00      	nop
    60ce:	bd80      	pop	{r7, pc}
    60d0:	00005f79 	.word	0x00005f79

000060d4 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    60d8:	4b01      	ldr	r3, [pc, #4]	; (60e0 <EIC_7_Handler+0xc>)
    60da:	4798      	blx	r3
}
    60dc:	bf00      	nop
    60de:	bd80      	pop	{r7, pc}
    60e0:	00005f79 	.word	0x00005f79

000060e4 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    60e4:	b480      	push	{r7}
    60e6:	b085      	sub	sp, #20
    60e8:	af00      	add	r7, sp, #0
    60ea:	60f8      	str	r0, [r7, #12]
    60ec:	460b      	mov	r3, r1
    60ee:	607a      	str	r2, [r7, #4]
    60f0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    60f2:	7afa      	ldrb	r2, [r7, #11]
    60f4:	68fb      	ldr	r3, [r7, #12]
    60f6:	3248      	adds	r2, #72	; 0x48
    60f8:	6879      	ldr	r1, [r7, #4]
    60fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    60fe:	bf00      	nop
    6100:	3714      	adds	r7, #20
    6102:	46bd      	mov	sp, r7
    6104:	f85d 7b04 	ldr.w	r7, [sp], #4
    6108:	4770      	bx	lr

0000610a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    610a:	b480      	push	{r7}
    610c:	b083      	sub	sp, #12
    610e:	af00      	add	r7, sp, #0
    6110:	6078      	str	r0, [r7, #4]
    6112:	460b      	mov	r3, r1
    6114:	70fb      	strb	r3, [r7, #3]
    6116:	4613      	mov	r3, r2
    6118:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    611a:	78fb      	ldrb	r3, [r7, #3]
    611c:	687a      	ldr	r2, [r7, #4]
    611e:	3304      	adds	r3, #4
    6120:	00db      	lsls	r3, r3, #3
    6122:	4413      	add	r3, r2
    6124:	78ba      	ldrb	r2, [r7, #2]
    6126:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6128:	78fb      	ldrb	r3, [r7, #3]
    612a:	78ba      	ldrb	r2, [r7, #2]
    612c:	43d2      	mvns	r2, r2
    612e:	b2d1      	uxtb	r1, r2
    6130:	687a      	ldr	r2, [r7, #4]
    6132:	3304      	adds	r3, #4
    6134:	00db      	lsls	r3, r3, #3
    6136:	4413      	add	r3, r2
    6138:	460a      	mov	r2, r1
    613a:	711a      	strb	r2, [r3, #4]
}
    613c:	bf00      	nop
    613e:	370c      	adds	r7, #12
    6140:	46bd      	mov	sp, r7
    6142:	f85d 7b04 	ldr.w	r7, [sp], #4
    6146:	4770      	bx	lr

00006148 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    6148:	b480      	push	{r7}
    614a:	b085      	sub	sp, #20
    614c:	af00      	add	r7, sp, #0
    614e:	60f8      	str	r0, [r7, #12]
    6150:	460b      	mov	r3, r1
    6152:	607a      	str	r2, [r7, #4]
    6154:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    6156:	7afa      	ldrb	r2, [r7, #11]
    6158:	68fb      	ldr	r3, [r7, #12]
    615a:	3204      	adds	r2, #4
    615c:	6879      	ldr	r1, [r7, #4]
    615e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    6162:	bf00      	nop
    6164:	3714      	adds	r7, #20
    6166:	46bd      	mov	sp, r7
    6168:	f85d 7b04 	ldr.w	r7, [sp], #4
    616c:	4770      	bx	lr
	...

00006170 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6170:	b580      	push	{r7, lr}
    6172:	b082      	sub	sp, #8
    6174:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    6176:	2300      	movs	r3, #0
    6178:	71fb      	strb	r3, [r7, #7]
    617a:	e00b      	b.n	6194 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    617c:	79fb      	ldrb	r3, [r7, #7]
    617e:	4a18      	ldr	r2, [pc, #96]	; (61e0 <_event_system_init+0x70>)
    6180:	5cd3      	ldrb	r3, [r2, r3]
    6182:	461a      	mov	r2, r3
    6184:	79fb      	ldrb	r3, [r7, #7]
    6186:	4619      	mov	r1, r3
    6188:	4816      	ldr	r0, [pc, #88]	; (61e4 <_event_system_init+0x74>)
    618a:	4b17      	ldr	r3, [pc, #92]	; (61e8 <_event_system_init+0x78>)
    618c:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    618e:	79fb      	ldrb	r3, [r7, #7]
    6190:	3301      	adds	r3, #1
    6192:	71fb      	strb	r3, [r7, #7]
    6194:	79fb      	ldrb	r3, [r7, #7]
    6196:	2b42      	cmp	r3, #66	; 0x42
    6198:	d9f0      	bls.n	617c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    619a:	2300      	movs	r3, #0
    619c:	71fb      	strb	r3, [r7, #7]
    619e:	e016      	b.n	61ce <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    61a0:	79fb      	ldrb	r3, [r7, #7]
    61a2:	4a12      	ldr	r2, [pc, #72]	; (61ec <_event_system_init+0x7c>)
    61a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    61a8:	461a      	mov	r2, r3
    61aa:	79fb      	ldrb	r3, [r7, #7]
    61ac:	4619      	mov	r1, r3
    61ae:	480d      	ldr	r0, [pc, #52]	; (61e4 <_event_system_init+0x74>)
    61b0:	4b0f      	ldr	r3, [pc, #60]	; (61f0 <_event_system_init+0x80>)
    61b2:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    61b4:	79fb      	ldrb	r3, [r7, #7]
    61b6:	4a0f      	ldr	r2, [pc, #60]	; (61f4 <_event_system_init+0x84>)
    61b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61bc:	b2da      	uxtb	r2, r3
    61be:	79fb      	ldrb	r3, [r7, #7]
    61c0:	4619      	mov	r1, r3
    61c2:	4808      	ldr	r0, [pc, #32]	; (61e4 <_event_system_init+0x74>)
    61c4:	4b0c      	ldr	r3, [pc, #48]	; (61f8 <_event_system_init+0x88>)
    61c6:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    61c8:	79fb      	ldrb	r3, [r7, #7]
    61ca:	3301      	adds	r3, #1
    61cc:	71fb      	strb	r3, [r7, #7]
    61ce:	79fb      	ldrb	r3, [r7, #7]
    61d0:	2b1f      	cmp	r3, #31
    61d2:	d9e5      	bls.n	61a0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    61d4:	2300      	movs	r3, #0
}
    61d6:	4618      	mov	r0, r3
    61d8:	3708      	adds	r7, #8
    61da:	46bd      	mov	sp, r7
    61dc:	bd80      	pop	{r7, pc}
    61de:	bf00      	nop
    61e0:	00011464 	.word	0x00011464
    61e4:	4100e000 	.word	0x4100e000
    61e8:	000060e5 	.word	0x000060e5
    61ec:	000114a8 	.word	0x000114a8
    61f0:	00006149 	.word	0x00006149
    61f4:	000114e8 	.word	0x000114e8
    61f8:	0000610b 	.word	0x0000610b

000061fc <hri_gclk_wait_for_sync>:
{
    61fc:	b480      	push	{r7}
    61fe:	b083      	sub	sp, #12
    6200:	af00      	add	r7, sp, #0
    6202:	6078      	str	r0, [r7, #4]
    6204:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6206:	bf00      	nop
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	685a      	ldr	r2, [r3, #4]
    620c:	683b      	ldr	r3, [r7, #0]
    620e:	4013      	ands	r3, r2
    6210:	2b00      	cmp	r3, #0
    6212:	d1f9      	bne.n	6208 <hri_gclk_wait_for_sync+0xc>
}
    6214:	bf00      	nop
    6216:	370c      	adds	r7, #12
    6218:	46bd      	mov	sp, r7
    621a:	f85d 7b04 	ldr.w	r7, [sp], #4
    621e:	4770      	bx	lr

00006220 <hri_gclk_write_GENCTRL_reg>:
{
    6220:	b580      	push	{r7, lr}
    6222:	b084      	sub	sp, #16
    6224:	af00      	add	r7, sp, #0
    6226:	60f8      	str	r0, [r7, #12]
    6228:	460b      	mov	r3, r1
    622a:	607a      	str	r2, [r7, #4]
    622c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    622e:	7afa      	ldrb	r2, [r7, #11]
    6230:	68fb      	ldr	r3, [r7, #12]
    6232:	3208      	adds	r2, #8
    6234:	6879      	ldr	r1, [r7, #4]
    6236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    623a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    623e:	68f8      	ldr	r0, [r7, #12]
    6240:	4b02      	ldr	r3, [pc, #8]	; (624c <hri_gclk_write_GENCTRL_reg+0x2c>)
    6242:	4798      	blx	r3
}
    6244:	bf00      	nop
    6246:	3710      	adds	r7, #16
    6248:	46bd      	mov	sp, r7
    624a:	bd80      	pop	{r7, pc}
    624c:	000061fd 	.word	0x000061fd

00006250 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    6250:	b580      	push	{r7, lr}
    6252:	b082      	sub	sp, #8
    6254:	af00      	add	r7, sp, #0
    6256:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6258:	687b      	ldr	r3, [r7, #4]
    625a:	f003 0301 	and.w	r3, r3, #1
    625e:	2b00      	cmp	r3, #0
    6260:	d004      	beq.n	626c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    6262:	4a27      	ldr	r2, [pc, #156]	; (6300 <_gclk_init_generators_by_fref+0xb0>)
    6264:	2100      	movs	r1, #0
    6266:	4827      	ldr	r0, [pc, #156]	; (6304 <_gclk_init_generators_by_fref+0xb4>)
    6268:	4b27      	ldr	r3, [pc, #156]	; (6308 <_gclk_init_generators_by_fref+0xb8>)
    626a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	f003 0302 	and.w	r3, r3, #2
    6272:	2b00      	cmp	r3, #0
    6274:	d004      	beq.n	6280 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    6276:	4a25      	ldr	r2, [pc, #148]	; (630c <_gclk_init_generators_by_fref+0xbc>)
    6278:	2101      	movs	r1, #1
    627a:	4822      	ldr	r0, [pc, #136]	; (6304 <_gclk_init_generators_by_fref+0xb4>)
    627c:	4b22      	ldr	r3, [pc, #136]	; (6308 <_gclk_init_generators_by_fref+0xb8>)
    627e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6280:	687b      	ldr	r3, [r7, #4]
    6282:	f003 0304 	and.w	r3, r3, #4
    6286:	2b00      	cmp	r3, #0
    6288:	d004      	beq.n	6294 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    628a:	4a21      	ldr	r2, [pc, #132]	; (6310 <_gclk_init_generators_by_fref+0xc0>)
    628c:	2102      	movs	r1, #2
    628e:	481d      	ldr	r0, [pc, #116]	; (6304 <_gclk_init_generators_by_fref+0xb4>)
    6290:	4b1d      	ldr	r3, [pc, #116]	; (6308 <_gclk_init_generators_by_fref+0xb8>)
    6292:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	f003 0308 	and.w	r3, r3, #8
    629a:	2b00      	cmp	r3, #0
    629c:	d004      	beq.n	62a8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    629e:	4a1d      	ldr	r2, [pc, #116]	; (6314 <_gclk_init_generators_by_fref+0xc4>)
    62a0:	2103      	movs	r1, #3
    62a2:	4818      	ldr	r0, [pc, #96]	; (6304 <_gclk_init_generators_by_fref+0xb4>)
    62a4:	4b18      	ldr	r3, [pc, #96]	; (6308 <_gclk_init_generators_by_fref+0xb8>)
    62a6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	f003 0310 	and.w	r3, r3, #16
    62ae:	2b00      	cmp	r3, #0
    62b0:	d004      	beq.n	62bc <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    62b2:	4a19      	ldr	r2, [pc, #100]	; (6318 <_gclk_init_generators_by_fref+0xc8>)
    62b4:	2104      	movs	r1, #4
    62b6:	4813      	ldr	r0, [pc, #76]	; (6304 <_gclk_init_generators_by_fref+0xb4>)
    62b8:	4b13      	ldr	r3, [pc, #76]	; (6308 <_gclk_init_generators_by_fref+0xb8>)
    62ba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	f003 0320 	and.w	r3, r3, #32
    62c2:	2b00      	cmp	r3, #0
    62c4:	d004      	beq.n	62d0 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    62c6:	4a15      	ldr	r2, [pc, #84]	; (631c <_gclk_init_generators_by_fref+0xcc>)
    62c8:	2105      	movs	r1, #5
    62ca:	480e      	ldr	r0, [pc, #56]	; (6304 <_gclk_init_generators_by_fref+0xb4>)
    62cc:	4b0e      	ldr	r3, [pc, #56]	; (6308 <_gclk_init_generators_by_fref+0xb8>)
    62ce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    62d6:	2b00      	cmp	r3, #0
    62d8:	d004      	beq.n	62e4 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    62da:	4a11      	ldr	r2, [pc, #68]	; (6320 <_gclk_init_generators_by_fref+0xd0>)
    62dc:	210a      	movs	r1, #10
    62de:	4809      	ldr	r0, [pc, #36]	; (6304 <_gclk_init_generators_by_fref+0xb4>)
    62e0:	4b09      	ldr	r3, [pc, #36]	; (6308 <_gclk_init_generators_by_fref+0xb8>)
    62e2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    62ea:	2b00      	cmp	r3, #0
    62ec:	d004      	beq.n	62f8 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    62ee:	4a0d      	ldr	r2, [pc, #52]	; (6324 <_gclk_init_generators_by_fref+0xd4>)
    62f0:	210b      	movs	r1, #11
    62f2:	4804      	ldr	r0, [pc, #16]	; (6304 <_gclk_init_generators_by_fref+0xb4>)
    62f4:	4b04      	ldr	r3, [pc, #16]	; (6308 <_gclk_init_generators_by_fref+0xb8>)
    62f6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    62f8:	bf00      	nop
    62fa:	3708      	adds	r7, #8
    62fc:	46bd      	mov	sp, r7
    62fe:	bd80      	pop	{r7, pc}
    6300:	00010107 	.word	0x00010107
    6304:	40001c00 	.word	0x40001c00
    6308:	00006221 	.word	0x00006221
    630c:	00010907 	.word	0x00010907
    6310:	00010906 	.word	0x00010906
    6314:	00011908 	.word	0x00011908
    6318:	00010901 	.word	0x00010901
    631c:	00060901 	.word	0x00060901
    6320:	00010905 	.word	0x00010905
    6324:	00041905 	.word	0x00041905

00006328 <hri_mclk_write_CPUDIV_reg>:
{
    6328:	b480      	push	{r7}
    632a:	b083      	sub	sp, #12
    632c:	af00      	add	r7, sp, #0
    632e:	6078      	str	r0, [r7, #4]
    6330:	460b      	mov	r3, r1
    6332:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	78fa      	ldrb	r2, [r7, #3]
    6338:	715a      	strb	r2, [r3, #5]
}
    633a:	bf00      	nop
    633c:	370c      	adds	r7, #12
    633e:	46bd      	mov	sp, r7
    6340:	f85d 7b04 	ldr.w	r7, [sp], #4
    6344:	4770      	bx	lr
	...

00006348 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    6348:	b580      	push	{r7, lr}
    634a:	b082      	sub	sp, #8
    634c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    634e:	4b05      	ldr	r3, [pc, #20]	; (6364 <_mclk_init+0x1c>)
    6350:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    6352:	2101      	movs	r1, #1
    6354:	6878      	ldr	r0, [r7, #4]
    6356:	4b04      	ldr	r3, [pc, #16]	; (6368 <_mclk_init+0x20>)
    6358:	4798      	blx	r3
}
    635a:	bf00      	nop
    635c:	3708      	adds	r7, #8
    635e:	46bd      	mov	sp, r7
    6360:	bd80      	pop	{r7, pc}
    6362:	bf00      	nop
    6364:	40000800 	.word	0x40000800
    6368:	00006329 	.word	0x00006329

0000636c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    636c:	b480      	push	{r7}
    636e:	b083      	sub	sp, #12
    6370:	af00      	add	r7, sp, #0
    6372:	6078      	str	r0, [r7, #4]
    6374:	460b      	mov	r3, r1
    6376:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6378:	687b      	ldr	r3, [r7, #4]
    637a:	78fa      	ldrb	r2, [r7, #3]
    637c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    637e:	bf00      	nop
    6380:	370c      	adds	r7, #12
    6382:	46bd      	mov	sp, r7
    6384:	f85d 7b04 	ldr.w	r7, [sp], #4
    6388:	4770      	bx	lr

0000638a <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    638a:	b480      	push	{r7}
    638c:	b083      	sub	sp, #12
    638e:	af00      	add	r7, sp, #0
    6390:	6078      	str	r0, [r7, #4]
    6392:	460b      	mov	r3, r1
    6394:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	887a      	ldrh	r2, [r7, #2]
    639a:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    639c:	bf00      	nop
    639e:	370c      	adds	r7, #12
    63a0:	46bd      	mov	sp, r7
    63a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    63a6:	4770      	bx	lr

000063a8 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    63a8:	b480      	push	{r7}
    63aa:	b083      	sub	sp, #12
    63ac:	af00      	add	r7, sp, #0
    63ae:	6078      	str	r0, [r7, #4]
    63b0:	460b      	mov	r3, r1
    63b2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    63b4:	687b      	ldr	r3, [r7, #4]
    63b6:	78fa      	ldrb	r2, [r7, #3]
    63b8:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    63ba:	bf00      	nop
    63bc:	370c      	adds	r7, #12
    63be:	46bd      	mov	sp, r7
    63c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    63c4:	4770      	bx	lr

000063c6 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    63c6:	b480      	push	{r7}
    63c8:	b083      	sub	sp, #12
    63ca:	af00      	add	r7, sp, #0
    63cc:	6078      	str	r0, [r7, #4]
    63ce:	460b      	mov	r3, r1
    63d0:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    63d2:	687b      	ldr	r3, [r7, #4]
    63d4:	78fa      	ldrb	r2, [r7, #3]
    63d6:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    63d8:	bf00      	nop
    63da:	370c      	adds	r7, #12
    63dc:	46bd      	mov	sp, r7
    63de:	f85d 7b04 	ldr.w	r7, [sp], #4
    63e2:	4770      	bx	lr

000063e4 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    63e4:	b480      	push	{r7}
    63e6:	b085      	sub	sp, #20
    63e8:	af00      	add	r7, sp, #0
    63ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    63ec:	687b      	ldr	r3, [r7, #4]
    63ee:	69db      	ldr	r3, [r3, #28]
    63f0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    63f2:	68fb      	ldr	r3, [r7, #12]
    63f4:	0a1b      	lsrs	r3, r3, #8
    63f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    63fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    63fc:	68fb      	ldr	r3, [r7, #12]
}
    63fe:	4618      	mov	r0, r3
    6400:	3714      	adds	r7, #20
    6402:	46bd      	mov	sp, r7
    6404:	f85d 7b04 	ldr.w	r7, [sp], #4
    6408:	4770      	bx	lr

0000640a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    640a:	b480      	push	{r7}
    640c:	b083      	sub	sp, #12
    640e:	af00      	add	r7, sp, #0
    6410:	6078      	str	r0, [r7, #4]
    6412:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6414:	687b      	ldr	r3, [r7, #4]
    6416:	683a      	ldr	r2, [r7, #0]
    6418:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    641a:	bf00      	nop
    641c:	370c      	adds	r7, #12
    641e:	46bd      	mov	sp, r7
    6420:	f85d 7b04 	ldr.w	r7, [sp], #4
    6424:	4770      	bx	lr
	...

00006428 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    6428:	b580      	push	{r7, lr}
    642a:	b082      	sub	sp, #8
    642c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    642e:	4b13      	ldr	r3, [pc, #76]	; (647c <_osc32kctrl_init_sources+0x54>)
    6430:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    6432:	2300      	movs	r3, #0
    6434:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    6436:	f242 018e 	movw	r1, #8334	; 0x208e
    643a:	6878      	ldr	r0, [r7, #4]
    643c:	4b10      	ldr	r3, [pc, #64]	; (6480 <_osc32kctrl_init_sources+0x58>)
    643e:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    6440:	2100      	movs	r1, #0
    6442:	6878      	ldr	r0, [r7, #4]
    6444:	4b0f      	ldr	r3, [pc, #60]	; (6484 <_osc32kctrl_init_sources+0x5c>)
    6446:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    6448:	2100      	movs	r1, #0
    644a:	6878      	ldr	r0, [r7, #4]
    644c:	4b0e      	ldr	r3, [pc, #56]	; (6488 <_osc32kctrl_init_sources+0x60>)
    644e:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    6450:	6878      	ldr	r0, [r7, #4]
    6452:	4b0e      	ldr	r3, [pc, #56]	; (648c <_osc32kctrl_init_sources+0x64>)
    6454:	4798      	blx	r3
    6456:	4603      	mov	r3, r0
    6458:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    645a:	887b      	ldrh	r3, [r7, #2]
    645c:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    645e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    6462:	4619      	mov	r1, r3
    6464:	6878      	ldr	r0, [r7, #4]
    6466:	4b0a      	ldr	r3, [pc, #40]	; (6490 <_osc32kctrl_init_sources+0x68>)
    6468:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    646a:	2100      	movs	r1, #0
    646c:	6878      	ldr	r0, [r7, #4]
    646e:	4b09      	ldr	r3, [pc, #36]	; (6494 <_osc32kctrl_init_sources+0x6c>)
    6470:	4798      	blx	r3
	(void)calib;
}
    6472:	bf00      	nop
    6474:	3708      	adds	r7, #8
    6476:	46bd      	mov	sp, r7
    6478:	bd80      	pop	{r7, pc}
    647a:	bf00      	nop
    647c:	40001400 	.word	0x40001400
    6480:	0000638b 	.word	0x0000638b
    6484:	000063a9 	.word	0x000063a9
    6488:	000063c7 	.word	0x000063c7
    648c:	000063e5 	.word	0x000063e5
    6490:	0000640b 	.word	0x0000640b
    6494:	0000636d 	.word	0x0000636d

00006498 <hri_gclk_wait_for_sync>:
{
    6498:	b480      	push	{r7}
    649a:	b083      	sub	sp, #12
    649c:	af00      	add	r7, sp, #0
    649e:	6078      	str	r0, [r7, #4]
    64a0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    64a2:	bf00      	nop
    64a4:	687b      	ldr	r3, [r7, #4]
    64a6:	685a      	ldr	r2, [r3, #4]
    64a8:	683b      	ldr	r3, [r7, #0]
    64aa:	4013      	ands	r3, r2
    64ac:	2b00      	cmp	r3, #0
    64ae:	d1f9      	bne.n	64a4 <hri_gclk_wait_for_sync+0xc>
}
    64b0:	bf00      	nop
    64b2:	370c      	adds	r7, #12
    64b4:	46bd      	mov	sp, r7
    64b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ba:	4770      	bx	lr

000064bc <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    64bc:	b480      	push	{r7}
    64be:	b083      	sub	sp, #12
    64c0:	af00      	add	r7, sp, #0
    64c2:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    64c4:	687b      	ldr	r3, [r7, #4]
    64c6:	685b      	ldr	r3, [r3, #4]
    64c8:	089b      	lsrs	r3, r3, #2
    64ca:	f003 0301 	and.w	r3, r3, #1
    64ce:	2b00      	cmp	r3, #0
    64d0:	bf14      	ite	ne
    64d2:	2301      	movne	r3, #1
    64d4:	2300      	moveq	r3, #0
    64d6:	b2db      	uxtb	r3, r3
}
    64d8:	4618      	mov	r0, r3
    64da:	370c      	adds	r7, #12
    64dc:	46bd      	mov	sp, r7
    64de:	f85d 7b04 	ldr.w	r7, [sp], #4
    64e2:	4770      	bx	lr

000064e4 <hri_gclk_read_SYNCBUSY_reg>:
{
    64e4:	b480      	push	{r7}
    64e6:	b083      	sub	sp, #12
    64e8:	af00      	add	r7, sp, #0
    64ea:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    64ec:	687b      	ldr	r3, [r7, #4]
    64ee:	685b      	ldr	r3, [r3, #4]
}
    64f0:	4618      	mov	r0, r3
    64f2:	370c      	adds	r7, #12
    64f4:	46bd      	mov	sp, r7
    64f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    64fa:	4770      	bx	lr

000064fc <hri_gclk_write_GENCTRL_SRC_bf>:
{
    64fc:	b580      	push	{r7, lr}
    64fe:	b086      	sub	sp, #24
    6500:	af00      	add	r7, sp, #0
    6502:	60f8      	str	r0, [r7, #12]
    6504:	460b      	mov	r3, r1
    6506:	607a      	str	r2, [r7, #4]
    6508:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    650a:	7afa      	ldrb	r2, [r7, #11]
    650c:	68fb      	ldr	r3, [r7, #12]
    650e:	3208      	adds	r2, #8
    6510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6514:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6516:	697b      	ldr	r3, [r7, #20]
    6518:	f023 030f 	bic.w	r3, r3, #15
    651c:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    651e:	687b      	ldr	r3, [r7, #4]
    6520:	f003 030f 	and.w	r3, r3, #15
    6524:	697a      	ldr	r2, [r7, #20]
    6526:	4313      	orrs	r3, r2
    6528:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    652a:	7afa      	ldrb	r2, [r7, #11]
    652c:	68fb      	ldr	r3, [r7, #12]
    652e:	3208      	adds	r2, #8
    6530:	6979      	ldr	r1, [r7, #20]
    6532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6536:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    653a:	68f8      	ldr	r0, [r7, #12]
    653c:	4b02      	ldr	r3, [pc, #8]	; (6548 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    653e:	4798      	blx	r3
}
    6540:	bf00      	nop
    6542:	3718      	adds	r7, #24
    6544:	46bd      	mov	sp, r7
    6546:	bd80      	pop	{r7, pc}
    6548:	00006499 	.word	0x00006499

0000654c <hri_gclk_write_PCHCTRL_reg>:
{
    654c:	b480      	push	{r7}
    654e:	b085      	sub	sp, #20
    6550:	af00      	add	r7, sp, #0
    6552:	60f8      	str	r0, [r7, #12]
    6554:	460b      	mov	r3, r1
    6556:	607a      	str	r2, [r7, #4]
    6558:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    655a:	7afa      	ldrb	r2, [r7, #11]
    655c:	68fb      	ldr	r3, [r7, #12]
    655e:	3220      	adds	r2, #32
    6560:	6879      	ldr	r1, [r7, #4]
    6562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6566:	bf00      	nop
    6568:	3714      	adds	r7, #20
    656a:	46bd      	mov	sp, r7
    656c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6570:	4770      	bx	lr

00006572 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    6572:	b480      	push	{r7}
    6574:	b085      	sub	sp, #20
    6576:	af00      	add	r7, sp, #0
    6578:	60f8      	str	r0, [r7, #12]
    657a:	460b      	mov	r3, r1
    657c:	607a      	str	r2, [r7, #4]
    657e:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6580:	bf00      	nop
    6582:	7afa      	ldrb	r2, [r7, #11]
    6584:	68f9      	ldr	r1, [r7, #12]
    6586:	4613      	mov	r3, r2
    6588:	009b      	lsls	r3, r3, #2
    658a:	4413      	add	r3, r2
    658c:	009b      	lsls	r3, r3, #2
    658e:	440b      	add	r3, r1
    6590:	333c      	adds	r3, #60	; 0x3c
    6592:	681a      	ldr	r2, [r3, #0]
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	4013      	ands	r3, r2
    6598:	2b00      	cmp	r3, #0
    659a:	d1f2      	bne.n	6582 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    659c:	bf00      	nop
    659e:	3714      	adds	r7, #20
    65a0:	46bd      	mov	sp, r7
    65a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65a6:	4770      	bx	lr

000065a8 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    65a8:	b480      	push	{r7}
    65aa:	b083      	sub	sp, #12
    65ac:	af00      	add	r7, sp, #0
    65ae:	6078      	str	r0, [r7, #4]
    65b0:	460b      	mov	r3, r1
    65b2:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    65b4:	78fa      	ldrb	r2, [r7, #3]
    65b6:	6879      	ldr	r1, [r7, #4]
    65b8:	4613      	mov	r3, r2
    65ba:	009b      	lsls	r3, r3, #2
    65bc:	4413      	add	r3, r2
    65be:	009b      	lsls	r3, r3, #2
    65c0:	440b      	add	r3, r1
    65c2:	3340      	adds	r3, #64	; 0x40
    65c4:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    65c6:	f003 0301 	and.w	r3, r3, #1
    65ca:	2b00      	cmp	r3, #0
    65cc:	bf14      	ite	ne
    65ce:	2301      	movne	r3, #1
    65d0:	2300      	moveq	r3, #0
    65d2:	b2db      	uxtb	r3, r3
}
    65d4:	4618      	mov	r0, r3
    65d6:	370c      	adds	r7, #12
    65d8:	46bd      	mov	sp, r7
    65da:	f85d 7b04 	ldr.w	r7, [sp], #4
    65de:	4770      	bx	lr

000065e0 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    65e0:	b480      	push	{r7}
    65e2:	b083      	sub	sp, #12
    65e4:	af00      	add	r7, sp, #0
    65e6:	6078      	str	r0, [r7, #4]
    65e8:	460b      	mov	r3, r1
    65ea:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    65ec:	78fa      	ldrb	r2, [r7, #3]
    65ee:	6879      	ldr	r1, [r7, #4]
    65f0:	4613      	mov	r3, r2
    65f2:	009b      	lsls	r3, r3, #2
    65f4:	4413      	add	r3, r2
    65f6:	009b      	lsls	r3, r3, #2
    65f8:	440b      	add	r3, r1
    65fa:	3340      	adds	r3, #64	; 0x40
    65fc:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    65fe:	085b      	lsrs	r3, r3, #1
    6600:	f003 0301 	and.w	r3, r3, #1
    6604:	2b00      	cmp	r3, #0
    6606:	bf14      	ite	ne
    6608:	2301      	movne	r3, #1
    660a:	2300      	moveq	r3, #0
    660c:	b2db      	uxtb	r3, r3
}
    660e:	4618      	mov	r0, r3
    6610:	370c      	adds	r7, #12
    6612:	46bd      	mov	sp, r7
    6614:	f85d 7b04 	ldr.w	r7, [sp], #4
    6618:	4770      	bx	lr
	...

0000661c <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    661c:	b580      	push	{r7, lr}
    661e:	b082      	sub	sp, #8
    6620:	af00      	add	r7, sp, #0
    6622:	6078      	str	r0, [r7, #4]
    6624:	460b      	mov	r3, r1
    6626:	70fb      	strb	r3, [r7, #3]
    6628:	4613      	mov	r3, r2
    662a:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    662c:	78fa      	ldrb	r2, [r7, #3]
    662e:	6879      	ldr	r1, [r7, #4]
    6630:	4613      	mov	r3, r2
    6632:	009b      	lsls	r3, r3, #2
    6634:	4413      	add	r3, r2
    6636:	009b      	lsls	r3, r3, #2
    6638:	440b      	add	r3, r1
    663a:	3330      	adds	r3, #48	; 0x30
    663c:	78ba      	ldrb	r2, [r7, #2]
    663e:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    6640:	78fb      	ldrb	r3, [r7, #3]
    6642:	2202      	movs	r2, #2
    6644:	4619      	mov	r1, r3
    6646:	6878      	ldr	r0, [r7, #4]
    6648:	4b02      	ldr	r3, [pc, #8]	; (6654 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    664a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    664c:	bf00      	nop
    664e:	3708      	adds	r7, #8
    6650:	46bd      	mov	sp, r7
    6652:	bd80      	pop	{r7, pc}
    6654:	00006573 	.word	0x00006573

00006658 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    6658:	b580      	push	{r7, lr}
    665a:	b084      	sub	sp, #16
    665c:	af00      	add	r7, sp, #0
    665e:	60f8      	str	r0, [r7, #12]
    6660:	460b      	mov	r3, r1
    6662:	607a      	str	r2, [r7, #4]
    6664:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6666:	7afa      	ldrb	r2, [r7, #11]
    6668:	68f9      	ldr	r1, [r7, #12]
    666a:	4613      	mov	r3, r2
    666c:	009b      	lsls	r3, r3, #2
    666e:	4413      	add	r3, r2
    6670:	009b      	lsls	r3, r3, #2
    6672:	440b      	add	r3, r1
    6674:	3334      	adds	r3, #52	; 0x34
    6676:	687a      	ldr	r2, [r7, #4]
    6678:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    667a:	7afb      	ldrb	r3, [r7, #11]
    667c:	2206      	movs	r2, #6
    667e:	4619      	mov	r1, r3
    6680:	68f8      	ldr	r0, [r7, #12]
    6682:	4b03      	ldr	r3, [pc, #12]	; (6690 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6684:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6686:	bf00      	nop
    6688:	3710      	adds	r7, #16
    668a:	46bd      	mov	sp, r7
    668c:	bd80      	pop	{r7, pc}
    668e:	bf00      	nop
    6690:	00006573 	.word	0x00006573

00006694 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6694:	b480      	push	{r7}
    6696:	b085      	sub	sp, #20
    6698:	af00      	add	r7, sp, #0
    669a:	60f8      	str	r0, [r7, #12]
    669c:	460b      	mov	r3, r1
    669e:	607a      	str	r2, [r7, #4]
    66a0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    66a2:	7afa      	ldrb	r2, [r7, #11]
    66a4:	68f9      	ldr	r1, [r7, #12]
    66a6:	4613      	mov	r3, r2
    66a8:	009b      	lsls	r3, r3, #2
    66aa:	4413      	add	r3, r2
    66ac:	009b      	lsls	r3, r3, #2
    66ae:	440b      	add	r3, r1
    66b0:	3338      	adds	r3, #56	; 0x38
    66b2:	687a      	ldr	r2, [r7, #4]
    66b4:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    66b6:	bf00      	nop
    66b8:	3714      	adds	r7, #20
    66ba:	46bd      	mov	sp, r7
    66bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    66c0:	4770      	bx	lr

000066c2 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    66c2:	b480      	push	{r7}
    66c4:	b083      	sub	sp, #12
    66c6:	af00      	add	r7, sp, #0
    66c8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	691b      	ldr	r3, [r3, #16]
    66ce:	085b      	lsrs	r3, r3, #1
    66d0:	f003 0301 	and.w	r3, r3, #1
    66d4:	2b00      	cmp	r3, #0
    66d6:	bf14      	ite	ne
    66d8:	2301      	movne	r3, #1
    66da:	2300      	moveq	r3, #0
    66dc:	b2db      	uxtb	r3, r3
}
    66de:	4618      	mov	r0, r3
    66e0:	370c      	adds	r7, #12
    66e2:	46bd      	mov	sp, r7
    66e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66e8:	4770      	bx	lr

000066ea <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    66ea:	b480      	push	{r7}
    66ec:	b083      	sub	sp, #12
    66ee:	af00      	add	r7, sp, #0
    66f0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	691b      	ldr	r3, [r3, #16]
    66f6:	0a1b      	lsrs	r3, r3, #8
    66f8:	f003 0301 	and.w	r3, r3, #1
    66fc:	2b00      	cmp	r3, #0
    66fe:	bf14      	ite	ne
    6700:	2301      	movne	r3, #1
    6702:	2300      	moveq	r3, #0
    6704:	b2db      	uxtb	r3, r3
}
    6706:	4618      	mov	r0, r3
    6708:	370c      	adds	r7, #12
    670a:	46bd      	mov	sp, r7
    670c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6710:	4770      	bx	lr

00006712 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    6712:	b480      	push	{r7}
    6714:	b085      	sub	sp, #20
    6716:	af00      	add	r7, sp, #0
    6718:	6078      	str	r0, [r7, #4]
    671a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    671c:	687b      	ldr	r3, [r7, #4]
    671e:	691b      	ldr	r3, [r3, #16]
    6720:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6722:	68fa      	ldr	r2, [r7, #12]
    6724:	683b      	ldr	r3, [r7, #0]
    6726:	4013      	ands	r3, r2
    6728:	60fb      	str	r3, [r7, #12]
	return tmp;
    672a:	68fb      	ldr	r3, [r7, #12]
}
    672c:	4618      	mov	r0, r3
    672e:	3714      	adds	r7, #20
    6730:	46bd      	mov	sp, r7
    6732:	f85d 7b04 	ldr.w	r7, [sp], #4
    6736:	4770      	bx	lr

00006738 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    6738:	b480      	push	{r7}
    673a:	b085      	sub	sp, #20
    673c:	af00      	add	r7, sp, #0
    673e:	60f8      	str	r0, [r7, #12]
    6740:	460b      	mov	r3, r1
    6742:	607a      	str	r2, [r7, #4]
    6744:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    6746:	7afb      	ldrb	r3, [r7, #11]
    6748:	68fa      	ldr	r2, [r7, #12]
    674a:	3304      	adds	r3, #4
    674c:	009b      	lsls	r3, r3, #2
    674e:	4413      	add	r3, r2
    6750:	687a      	ldr	r2, [r7, #4]
    6752:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6754:	bf00      	nop
    6756:	3714      	adds	r7, #20
    6758:	46bd      	mov	sp, r7
    675a:	f85d 7b04 	ldr.w	r7, [sp], #4
    675e:	4770      	bx	lr

00006760 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    6760:	b480      	push	{r7}
    6762:	b083      	sub	sp, #12
    6764:	af00      	add	r7, sp, #0
    6766:	6078      	str	r0, [r7, #4]
    6768:	460b      	mov	r3, r1
    676a:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	78fa      	ldrb	r2, [r7, #3]
    6770:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6772:	bf00      	nop
    6774:	370c      	adds	r7, #12
    6776:	46bd      	mov	sp, r7
    6778:	f85d 7b04 	ldr.w	r7, [sp], #4
    677c:	4770      	bx	lr

0000677e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    677e:	b480      	push	{r7}
    6780:	b085      	sub	sp, #20
    6782:	af00      	add	r7, sp, #0
    6784:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6786:	687b      	ldr	r3, [r7, #4]
    6788:	f893 3020 	ldrb.w	r3, [r3, #32]
    678c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    678e:	7bfb      	ldrb	r3, [r7, #15]
    6790:	f003 0301 	and.w	r3, r3, #1
    6794:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6796:	7bfb      	ldrb	r3, [r7, #15]
    6798:	2b00      	cmp	r3, #0
    679a:	bf14      	ite	ne
    679c:	2301      	movne	r3, #1
    679e:	2300      	moveq	r3, #0
    67a0:	b2db      	uxtb	r3, r3
}
    67a2:	4618      	mov	r0, r3
    67a4:	3714      	adds	r7, #20
    67a6:	46bd      	mov	sp, r7
    67a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    67ac:	4770      	bx	lr

000067ae <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    67ae:	b480      	push	{r7}
    67b0:	b083      	sub	sp, #12
    67b2:	af00      	add	r7, sp, #0
    67b4:	6078      	str	r0, [r7, #4]
    67b6:	460b      	mov	r3, r1
    67b8:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    67ba:	687b      	ldr	r3, [r7, #4]
    67bc:	78fa      	ldrb	r2, [r7, #3]
    67be:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    67c2:	bf00      	nop
    67c4:	370c      	adds	r7, #12
    67c6:	46bd      	mov	sp, r7
    67c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    67cc:	4770      	bx	lr

000067ce <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    67ce:	b480      	push	{r7}
    67d0:	b083      	sub	sp, #12
    67d2:	af00      	add	r7, sp, #0
    67d4:	6078      	str	r0, [r7, #4]
    67d6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	683a      	ldr	r2, [r7, #0]
    67dc:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    67de:	bf00      	nop
    67e0:	370c      	adds	r7, #12
    67e2:	46bd      	mov	sp, r7
    67e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    67e8:	4770      	bx	lr

000067ea <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    67ea:	b480      	push	{r7}
    67ec:	b083      	sub	sp, #12
    67ee:	af00      	add	r7, sp, #0
    67f0:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    67f2:	687b      	ldr	r3, [r7, #4]
    67f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    67f6:	4618      	mov	r0, r3
    67f8:	370c      	adds	r7, #12
    67fa:	46bd      	mov	sp, r7
    67fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6800:	4770      	bx	lr

00006802 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    6802:	b480      	push	{r7}
    6804:	b083      	sub	sp, #12
    6806:	af00      	add	r7, sp, #0
    6808:	6078      	str	r0, [r7, #4]
    680a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    680c:	687b      	ldr	r3, [r7, #4]
    680e:	683a      	ldr	r2, [r7, #0]
    6810:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6812:	bf00      	nop
    6814:	370c      	adds	r7, #12
    6816:	46bd      	mov	sp, r7
    6818:	f85d 7b04 	ldr.w	r7, [sp], #4
    681c:	4770      	bx	lr

0000681e <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    681e:	b480      	push	{r7}
    6820:	b085      	sub	sp, #20
    6822:	af00      	add	r7, sp, #0
    6824:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    682c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    682e:	7bfb      	ldrb	r3, [r7, #15]
    6830:	085b      	lsrs	r3, r3, #1
    6832:	b2db      	uxtb	r3, r3
    6834:	f003 0301 	and.w	r3, r3, #1
    6838:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    683a:	7bfb      	ldrb	r3, [r7, #15]
    683c:	2b00      	cmp	r3, #0
    683e:	bf14      	ite	ne
    6840:	2301      	movne	r3, #1
    6842:	2300      	moveq	r3, #0
    6844:	b2db      	uxtb	r3, r3
}
    6846:	4618      	mov	r0, r3
    6848:	3714      	adds	r7, #20
    684a:	46bd      	mov	sp, r7
    684c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6850:	4770      	bx	lr

00006852 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    6852:	b480      	push	{r7}
    6854:	b085      	sub	sp, #20
    6856:	af00      	add	r7, sp, #0
    6858:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6860:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    6862:	7bfb      	ldrb	r3, [r7, #15]
    6864:	089b      	lsrs	r3, r3, #2
    6866:	b2db      	uxtb	r3, r3
    6868:	f003 0301 	and.w	r3, r3, #1
    686c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    686e:	7bfb      	ldrb	r3, [r7, #15]
    6870:	2b00      	cmp	r3, #0
    6872:	bf14      	ite	ne
    6874:	2301      	movne	r3, #1
    6876:	2300      	moveq	r3, #0
    6878:	b2db      	uxtb	r3, r3
}
    687a:	4618      	mov	r0, r3
    687c:	3714      	adds	r7, #20
    687e:	46bd      	mov	sp, r7
    6880:	f85d 7b04 	ldr.w	r7, [sp], #4
    6884:	4770      	bx	lr

00006886 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    6886:	b480      	push	{r7}
    6888:	b085      	sub	sp, #20
    688a:	af00      	add	r7, sp, #0
    688c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    688e:	687b      	ldr	r3, [r7, #4]
    6890:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6894:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    6896:	7bfb      	ldrb	r3, [r7, #15]
    6898:	08db      	lsrs	r3, r3, #3
    689a:	b2db      	uxtb	r3, r3
    689c:	f003 0301 	and.w	r3, r3, #1
    68a0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    68a2:	7bfb      	ldrb	r3, [r7, #15]
    68a4:	2b00      	cmp	r3, #0
    68a6:	bf14      	ite	ne
    68a8:	2301      	movne	r3, #1
    68aa:	2300      	moveq	r3, #0
    68ac:	b2db      	uxtb	r3, r3
}
    68ae:	4618      	mov	r0, r3
    68b0:	3714      	adds	r7, #20
    68b2:	46bd      	mov	sp, r7
    68b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    68b8:	4770      	bx	lr

000068ba <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    68ba:	b480      	push	{r7}
    68bc:	b085      	sub	sp, #20
    68be:	af00      	add	r7, sp, #0
    68c0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    68c2:	687b      	ldr	r3, [r7, #4]
    68c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    68c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    68ca:	7bfb      	ldrb	r3, [r7, #15]
    68cc:	091b      	lsrs	r3, r3, #4
    68ce:	b2db      	uxtb	r3, r3
    68d0:	f003 0301 	and.w	r3, r3, #1
    68d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    68d6:	7bfb      	ldrb	r3, [r7, #15]
    68d8:	2b00      	cmp	r3, #0
    68da:	bf14      	ite	ne
    68dc:	2301      	movne	r3, #1
    68de:	2300      	moveq	r3, #0
    68e0:	b2db      	uxtb	r3, r3
}
    68e2:	4618      	mov	r0, r3
    68e4:	3714      	adds	r7, #20
    68e6:	46bd      	mov	sp, r7
    68e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    68ec:	4770      	bx	lr
	...

000068f0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b082      	sub	sp, #8
    68f4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    68f6:	4b0a      	ldr	r3, [pc, #40]	; (6920 <_oscctrl_init_sources+0x30>)
    68f8:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    68fa:	4a0a      	ldr	r2, [pc, #40]	; (6924 <_oscctrl_init_sources+0x34>)
    68fc:	2101      	movs	r1, #1
    68fe:	6878      	ldr	r0, [r7, #4]
    6900:	4b09      	ldr	r3, [pc, #36]	; (6928 <_oscctrl_init_sources+0x38>)
    6902:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6904:	bf00      	nop
    6906:	6878      	ldr	r0, [r7, #4]
    6908:	4b08      	ldr	r3, [pc, #32]	; (692c <_oscctrl_init_sources+0x3c>)
    690a:	4798      	blx	r3
    690c:	4603      	mov	r3, r0
    690e:	f083 0301 	eor.w	r3, r3, #1
    6912:	b2db      	uxtb	r3, r3
    6914:	2b00      	cmp	r3, #0
    6916:	d1f6      	bne.n	6906 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    6918:	bf00      	nop
    691a:	3708      	adds	r7, #8
    691c:	46bd      	mov	sp, r7
    691e:	bd80      	pop	{r7, pc}
    6920:	40001000 	.word	0x40001000
    6924:	03002606 	.word	0x03002606
    6928:	00006739 	.word	0x00006739
    692c:	000066c3 	.word	0x000066c3

00006930 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6930:	b580      	push	{r7, lr}
    6932:	b084      	sub	sp, #16
    6934:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6936:	4b6b      	ldr	r3, [pc, #428]	; (6ae4 <_oscctrl_init_referenced_generators+0x1b4>)
    6938:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    693a:	2204      	movs	r2, #4
    693c:	2100      	movs	r1, #0
    693e:	486a      	ldr	r0, [pc, #424]	; (6ae8 <_oscctrl_init_referenced_generators+0x1b8>)
    6940:	4b6a      	ldr	r3, [pc, #424]	; (6aec <_oscctrl_init_referenced_generators+0x1bc>)
    6942:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6944:	bf00      	nop
    6946:	4868      	ldr	r0, [pc, #416]	; (6ae8 <_oscctrl_init_referenced_generators+0x1b8>)
    6948:	4b69      	ldr	r3, [pc, #420]	; (6af0 <_oscctrl_init_referenced_generators+0x1c0>)
    694a:	4798      	blx	r3
    694c:	4603      	mov	r3, r0
    694e:	2b00      	cmp	r3, #0
    6950:	d1f9      	bne.n	6946 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    6952:	2100      	movs	r1, #0
    6954:	68f8      	ldr	r0, [r7, #12]
    6956:	4b67      	ldr	r3, [pc, #412]	; (6af4 <_oscctrl_init_referenced_generators+0x1c4>)
    6958:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    695a:	4967      	ldr	r1, [pc, #412]	; (6af8 <_oscctrl_init_referenced_generators+0x1c8>)
    695c:	68f8      	ldr	r0, [r7, #12]
    695e:	4b67      	ldr	r3, [pc, #412]	; (6afc <_oscctrl_init_referenced_generators+0x1cc>)
    6960:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6962:	bf00      	nop
    6964:	68f8      	ldr	r0, [r7, #12]
    6966:	4b66      	ldr	r3, [pc, #408]	; (6b00 <_oscctrl_init_referenced_generators+0x1d0>)
    6968:	4798      	blx	r3
    696a:	4603      	mov	r3, r0
    696c:	2b00      	cmp	r3, #0
    696e:	d1f9      	bne.n	6964 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    6970:	2100      	movs	r1, #0
    6972:	68f8      	ldr	r0, [r7, #12]
    6974:	4b63      	ldr	r3, [pc, #396]	; (6b04 <_oscctrl_init_referenced_generators+0x1d4>)
    6976:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6978:	bf00      	nop
    697a:	68f8      	ldr	r0, [r7, #12]
    697c:	4b62      	ldr	r3, [pc, #392]	; (6b08 <_oscctrl_init_referenced_generators+0x1d8>)
    697e:	4798      	blx	r3
    6980:	4603      	mov	r3, r0
    6982:	2b00      	cmp	r3, #0
    6984:	d1f9      	bne.n	697a <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    6986:	2302      	movs	r3, #2
    6988:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    698a:	7afb      	ldrb	r3, [r7, #11]
    698c:	4619      	mov	r1, r3
    698e:	68f8      	ldr	r0, [r7, #12]
    6990:	4b58      	ldr	r3, [pc, #352]	; (6af4 <_oscctrl_init_referenced_generators+0x1c4>)
    6992:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6994:	bf00      	nop
    6996:	68f8      	ldr	r0, [r7, #12]
    6998:	4b5c      	ldr	r3, [pc, #368]	; (6b0c <_oscctrl_init_referenced_generators+0x1dc>)
    699a:	4798      	blx	r3
    699c:	4603      	mov	r3, r0
    699e:	2b00      	cmp	r3, #0
    69a0:	d1f9      	bne.n	6996 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    69a2:	68f8      	ldr	r0, [r7, #12]
    69a4:	4b5a      	ldr	r3, [pc, #360]	; (6b10 <_oscctrl_init_referenced_generators+0x1e0>)
    69a6:	4798      	blx	r3
    69a8:	4603      	mov	r3, r0
    69aa:	4619      	mov	r1, r3
    69ac:	68f8      	ldr	r0, [r7, #12]
    69ae:	4b59      	ldr	r3, [pc, #356]	; (6b14 <_oscctrl_init_referenced_generators+0x1e4>)
    69b0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    69b2:	bf00      	nop
    69b4:	68f8      	ldr	r0, [r7, #12]
    69b6:	4b58      	ldr	r3, [pc, #352]	; (6b18 <_oscctrl_init_referenced_generators+0x1e8>)
    69b8:	4798      	blx	r3
    69ba:	4603      	mov	r3, r0
    69bc:	2b00      	cmp	r3, #0
    69be:	d1f9      	bne.n	69b4 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    69c0:	2319      	movs	r3, #25
    69c2:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    69c4:	7afb      	ldrb	r3, [r7, #11]
    69c6:	4619      	mov	r1, r3
    69c8:	68f8      	ldr	r0, [r7, #12]
    69ca:	4b4e      	ldr	r3, [pc, #312]	; (6b04 <_oscctrl_init_referenced_generators+0x1d4>)
    69cc:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    69ce:	bf00      	nop
    69d0:	68f8      	ldr	r0, [r7, #12]
    69d2:	4b4d      	ldr	r3, [pc, #308]	; (6b08 <_oscctrl_init_referenced_generators+0x1d8>)
    69d4:	4798      	blx	r3
    69d6:	4603      	mov	r3, r0
    69d8:	2b00      	cmp	r3, #0
    69da:	d1f9      	bne.n	69d0 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    69dc:	2245      	movs	r2, #69	; 0x45
    69de:	2101      	movs	r1, #1
    69e0:	4841      	ldr	r0, [pc, #260]	; (6ae8 <_oscctrl_init_referenced_generators+0x1b8>)
    69e2:	4b4e      	ldr	r3, [pc, #312]	; (6b1c <_oscctrl_init_referenced_generators+0x1ec>)
    69e4:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    69e6:	223b      	movs	r2, #59	; 0x3b
    69e8:	2100      	movs	r1, #0
    69ea:	68f8      	ldr	r0, [r7, #12]
    69ec:	4b4c      	ldr	r3, [pc, #304]	; (6b20 <_oscctrl_init_referenced_generators+0x1f0>)
    69ee:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    69f0:	f44f 6201 	mov.w	r2, #2064	; 0x810
    69f4:	2100      	movs	r1, #0
    69f6:	68f8      	ldr	r0, [r7, #12]
    69f8:	4b4a      	ldr	r3, [pc, #296]	; (6b24 <_oscctrl_init_referenced_generators+0x1f4>)
    69fa:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    69fc:	2202      	movs	r2, #2
    69fe:	2100      	movs	r1, #0
    6a00:	68f8      	ldr	r0, [r7, #12]
    6a02:	4b49      	ldr	r3, [pc, #292]	; (6b28 <_oscctrl_init_referenced_generators+0x1f8>)
    6a04:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6a06:	4a49      	ldr	r2, [pc, #292]	; (6b2c <_oscctrl_init_referenced_generators+0x1fc>)
    6a08:	2101      	movs	r1, #1
    6a0a:	68f8      	ldr	r0, [r7, #12]
    6a0c:	4b44      	ldr	r3, [pc, #272]	; (6b20 <_oscctrl_init_referenced_generators+0x1f0>)
    6a0e:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6a10:	f44f 6203 	mov.w	r2, #2096	; 0x830
    6a14:	2101      	movs	r1, #1
    6a16:	68f8      	ldr	r0, [r7, #12]
    6a18:	4b42      	ldr	r3, [pc, #264]	; (6b24 <_oscctrl_init_referenced_generators+0x1f4>)
    6a1a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6a1c:	2202      	movs	r2, #2
    6a1e:	2101      	movs	r1, #1
    6a20:	68f8      	ldr	r0, [r7, #12]
    6a22:	4b41      	ldr	r3, [pc, #260]	; (6b28 <_oscctrl_init_referenced_generators+0x1f8>)
    6a24:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    6a26:	68f8      	ldr	r0, [r7, #12]
    6a28:	4b41      	ldr	r3, [pc, #260]	; (6b30 <_oscctrl_init_referenced_generators+0x200>)
    6a2a:	4798      	blx	r3
    6a2c:	4603      	mov	r3, r0
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d00c      	beq.n	6a4c <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    6a32:	f44f 6310 	mov.w	r3, #2304	; 0x900
    6a36:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    6a38:	bf00      	nop
    6a3a:	6879      	ldr	r1, [r7, #4]
    6a3c:	68f8      	ldr	r0, [r7, #12]
    6a3e:	4b3d      	ldr	r3, [pc, #244]	; (6b34 <_oscctrl_init_referenced_generators+0x204>)
    6a40:	4798      	blx	r3
    6a42:	4602      	mov	r2, r0
    6a44:	687b      	ldr	r3, [r7, #4]
    6a46:	429a      	cmp	r2, r3
    6a48:	d1f7      	bne.n	6a3a <_oscctrl_init_referenced_generators+0x10a>
    6a4a:	e009      	b.n	6a60 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    6a4c:	bf00      	nop
    6a4e:	68f8      	ldr	r0, [r7, #12]
    6a50:	4b39      	ldr	r3, [pc, #228]	; (6b38 <_oscctrl_init_referenced_generators+0x208>)
    6a52:	4798      	blx	r3
    6a54:	4603      	mov	r3, r0
    6a56:	f083 0301 	eor.w	r3, r3, #1
    6a5a:	b2db      	uxtb	r3, r3
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d1f6      	bne.n	6a4e <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    6a60:	bf00      	nop
    6a62:	2100      	movs	r1, #0
    6a64:	68f8      	ldr	r0, [r7, #12]
    6a66:	4b35      	ldr	r3, [pc, #212]	; (6b3c <_oscctrl_init_referenced_generators+0x20c>)
    6a68:	4798      	blx	r3
    6a6a:	4603      	mov	r3, r0
    6a6c:	f083 0301 	eor.w	r3, r3, #1
    6a70:	b2db      	uxtb	r3, r3
    6a72:	2b00      	cmp	r3, #0
    6a74:	d009      	beq.n	6a8a <_oscctrl_init_referenced_generators+0x15a>
    6a76:	2100      	movs	r1, #0
    6a78:	68f8      	ldr	r0, [r7, #12]
    6a7a:	4b31      	ldr	r3, [pc, #196]	; (6b40 <_oscctrl_init_referenced_generators+0x210>)
    6a7c:	4798      	blx	r3
    6a7e:	4603      	mov	r3, r0
    6a80:	f083 0301 	eor.w	r3, r3, #1
    6a84:	b2db      	uxtb	r3, r3
    6a86:	2b00      	cmp	r3, #0
    6a88:	d1eb      	bne.n	6a62 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    6a8a:	bf00      	nop
    6a8c:	2101      	movs	r1, #1
    6a8e:	68f8      	ldr	r0, [r7, #12]
    6a90:	4b2a      	ldr	r3, [pc, #168]	; (6b3c <_oscctrl_init_referenced_generators+0x20c>)
    6a92:	4798      	blx	r3
    6a94:	4603      	mov	r3, r0
    6a96:	f083 0301 	eor.w	r3, r3, #1
    6a9a:	b2db      	uxtb	r3, r3
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	d009      	beq.n	6ab4 <_oscctrl_init_referenced_generators+0x184>
    6aa0:	2101      	movs	r1, #1
    6aa2:	68f8      	ldr	r0, [r7, #12]
    6aa4:	4b26      	ldr	r3, [pc, #152]	; (6b40 <_oscctrl_init_referenced_generators+0x210>)
    6aa6:	4798      	blx	r3
    6aa8:	4603      	mov	r3, r0
    6aaa:	f083 0301 	eor.w	r3, r3, #1
    6aae:	b2db      	uxtb	r3, r3
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	d1eb      	bne.n	6a8c <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    6ab4:	bf00      	nop
    6ab6:	480c      	ldr	r0, [pc, #48]	; (6ae8 <_oscctrl_init_referenced_generators+0x1b8>)
    6ab8:	4b22      	ldr	r3, [pc, #136]	; (6b44 <_oscctrl_init_referenced_generators+0x214>)
    6aba:	4798      	blx	r3
    6abc:	4603      	mov	r3, r0
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d1f9      	bne.n	6ab6 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    6ac2:	2207      	movs	r2, #7
    6ac4:	2100      	movs	r1, #0
    6ac6:	4808      	ldr	r0, [pc, #32]	; (6ae8 <_oscctrl_init_referenced_generators+0x1b8>)
    6ac8:	4b08      	ldr	r3, [pc, #32]	; (6aec <_oscctrl_init_referenced_generators+0x1bc>)
    6aca:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6acc:	bf00      	nop
    6ace:	4806      	ldr	r0, [pc, #24]	; (6ae8 <_oscctrl_init_referenced_generators+0x1b8>)
    6ad0:	4b07      	ldr	r3, [pc, #28]	; (6af0 <_oscctrl_init_referenced_generators+0x1c0>)
    6ad2:	4798      	blx	r3
    6ad4:	4603      	mov	r3, r0
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d1f9      	bne.n	6ace <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    6ada:	bf00      	nop
    6adc:	3710      	adds	r7, #16
    6ade:	46bd      	mov	sp, r7
    6ae0:	bd80      	pop	{r7, pc}
    6ae2:	bf00      	nop
    6ae4:	40001000 	.word	0x40001000
    6ae8:	40001c00 	.word	0x40001c00
    6aec:	000064fd 	.word	0x000064fd
    6af0:	000064bd 	.word	0x000064bd
    6af4:	00006761 	.word	0x00006761
    6af8:	0401bb80 	.word	0x0401bb80
    6afc:	00006803 	.word	0x00006803
    6b00:	000068bb 	.word	0x000068bb
    6b04:	000067af 	.word	0x000067af
    6b08:	00006853 	.word	0x00006853
    6b0c:	0000681f 	.word	0x0000681f
    6b10:	000067eb 	.word	0x000067eb
    6b14:	000067cf 	.word	0x000067cf
    6b18:	00006887 	.word	0x00006887
    6b1c:	0000654d 	.word	0x0000654d
    6b20:	00006659 	.word	0x00006659
    6b24:	00006695 	.word	0x00006695
    6b28:	0000661d 	.word	0x0000661d
    6b2c:	000407a0 	.word	0x000407a0
    6b30:	0000677f 	.word	0x0000677f
    6b34:	00006713 	.word	0x00006713
    6b38:	000066eb 	.word	0x000066eb
    6b3c:	000065a9 	.word	0x000065a9
    6b40:	000065e1 	.word	0x000065e1
    6b44:	000064e5 	.word	0x000064e5

00006b48 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    6b48:	b480      	push	{r7}
    6b4a:	b083      	sub	sp, #12
    6b4c:	af00      	add	r7, sp, #0
    6b4e:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    6b50:	687b      	ldr	r3, [r7, #4]
    6b52:	69db      	ldr	r3, [r3, #28]
    6b54:	0a9b      	lsrs	r3, r3, #10
    6b56:	f003 0301 	and.w	r3, r3, #1
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	bf14      	ite	ne
    6b5e:	2301      	movne	r3, #1
    6b60:	2300      	moveq	r3, #0
    6b62:	b2db      	uxtb	r3, r3
}
    6b64:	4618      	mov	r0, r3
    6b66:	370c      	adds	r7, #12
    6b68:	46bd      	mov	sp, r7
    6b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b6e:	4770      	bx	lr

00006b70 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    6b70:	b480      	push	{r7}
    6b72:	b083      	sub	sp, #12
    6b74:	af00      	add	r7, sp, #0
    6b76:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    6b78:	687b      	ldr	r3, [r7, #4]
    6b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6b7e:	61da      	str	r2, [r3, #28]
}
    6b80:	bf00      	nop
    6b82:	370c      	adds	r7, #12
    6b84:	46bd      	mov	sp, r7
    6b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b8a:	4770      	bx	lr

00006b8c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    6b8c:	b480      	push	{r7}
    6b8e:	b083      	sub	sp, #12
    6b90:	af00      	add	r7, sp, #0
    6b92:	6078      	str	r0, [r7, #4]
    6b94:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    6b96:	687b      	ldr	r3, [r7, #4]
    6b98:	683a      	ldr	r2, [r7, #0]
    6b9a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6b9c:	bf00      	nop
    6b9e:	370c      	adds	r7, #12
    6ba0:	46bd      	mov	sp, r7
    6ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ba6:	4770      	bx	lr

00006ba8 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    6ba8:	b480      	push	{r7}
    6baa:	b083      	sub	sp, #12
    6bac:	af00      	add	r7, sp, #0
    6bae:	6078      	str	r0, [r7, #4]
    6bb0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	683a      	ldr	r2, [r7, #0]
    6bb6:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6bb8:	bf00      	nop
    6bba:	370c      	adds	r7, #12
    6bbc:	46bd      	mov	sp, r7
    6bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bc2:	4770      	bx	lr

00006bc4 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    6bc4:	b480      	push	{r7}
    6bc6:	b083      	sub	sp, #12
    6bc8:	af00      	add	r7, sp, #0
    6bca:	6078      	str	r0, [r7, #4]
    6bcc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	683a      	ldr	r2, [r7, #0]
    6bd2:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6bd4:	bf00      	nop
    6bd6:	370c      	adds	r7, #12
    6bd8:	46bd      	mov	sp, r7
    6bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bde:	4770      	bx	lr

00006be0 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    6be0:	b480      	push	{r7}
    6be2:	b083      	sub	sp, #12
    6be4:	af00      	add	r7, sp, #0
    6be6:	6078      	str	r0, [r7, #4]
    6be8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    6bea:	687b      	ldr	r3, [r7, #4]
    6bec:	683a      	ldr	r2, [r7, #0]
    6bee:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6bf0:	bf00      	nop
    6bf2:	370c      	adds	r7, #12
    6bf4:	46bd      	mov	sp, r7
    6bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bfa:	4770      	bx	lr

00006bfc <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6bfc:	b480      	push	{r7}
    6bfe:	b085      	sub	sp, #20
    6c00:	af00      	add	r7, sp, #0
    6c02:	6078      	str	r0, [r7, #4]
    6c04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    6c06:	687b      	ldr	r3, [r7, #4]
    6c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6c0a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    6c0c:	68fb      	ldr	r3, [r7, #12]
    6c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    6c12:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    6c14:	683b      	ldr	r3, [r7, #0]
    6c16:	b2db      	uxtb	r3, r3
    6c18:	68fa      	ldr	r2, [r7, #12]
    6c1a:	4313      	orrs	r3, r2
    6c1c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    6c1e:	687b      	ldr	r3, [r7, #4]
    6c20:	68fa      	ldr	r2, [r7, #12]
    6c22:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6c24:	bf00      	nop
    6c26:	3714      	adds	r7, #20
    6c28:	46bd      	mov	sp, r7
    6c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c2e:	4770      	bx	lr

00006c30 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    6c30:	b480      	push	{r7}
    6c32:	b085      	sub	sp, #20
    6c34:	af00      	add	r7, sp, #0
    6c36:	6078      	str	r0, [r7, #4]
    6c38:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    6c3a:	687b      	ldr	r3, [r7, #4]
    6c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6c3e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    6c40:	68fb      	ldr	r3, [r7, #12]
    6c42:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    6c46:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    6c48:	683b      	ldr	r3, [r7, #0]
    6c4a:	041b      	lsls	r3, r3, #16
    6c4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    6c50:	68fa      	ldr	r2, [r7, #12]
    6c52:	4313      	orrs	r3, r2
    6c54:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    6c56:	687b      	ldr	r3, [r7, #4]
    6c58:	68fa      	ldr	r2, [r7, #12]
    6c5a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6c5c:	bf00      	nop
    6c5e:	3714      	adds	r7, #20
    6c60:	46bd      	mov	sp, r7
    6c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c66:	4770      	bx	lr

00006c68 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    6c68:	b480      	push	{r7}
    6c6a:	b083      	sub	sp, #12
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	6078      	str	r0, [r7, #4]
    6c70:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	683a      	ldr	r2, [r7, #0]
    6c76:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    6c78:	bf00      	nop
    6c7a:	370c      	adds	r7, #12
    6c7c:	46bd      	mov	sp, r7
    6c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c82:	4770      	bx	lr

00006c84 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    6c84:	b480      	push	{r7}
    6c86:	b083      	sub	sp, #12
    6c88:	af00      	add	r7, sp, #0
    6c8a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    6c90:	4618      	mov	r0, r3
    6c92:	370c      	adds	r7, #12
    6c94:	46bd      	mov	sp, r7
    6c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c9a:	4770      	bx	lr

00006c9c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    6c9c:	b480      	push	{r7}
    6c9e:	b085      	sub	sp, #20
    6ca0:	af00      	add	r7, sp, #0
    6ca2:	60f8      	str	r0, [r7, #12]
    6ca4:	60b9      	str	r1, [r7, #8]
    6ca6:	607a      	str	r2, [r7, #4]
	while (count--) {
    6ca8:	e007      	b.n	6cba <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    6caa:	68fb      	ldr	r3, [r7, #12]
    6cac:	1c5a      	adds	r2, r3, #1
    6cae:	60fa      	str	r2, [r7, #12]
    6cb0:	68ba      	ldr	r2, [r7, #8]
    6cb2:	1c51      	adds	r1, r2, #1
    6cb4:	60b9      	str	r1, [r7, #8]
    6cb6:	7812      	ldrb	r2, [r2, #0]
    6cb8:	701a      	strb	r2, [r3, #0]
	while (count--) {
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	1e5a      	subs	r2, r3, #1
    6cbe:	607a      	str	r2, [r7, #4]
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	d1f2      	bne.n	6caa <_qspi_memcpy+0xe>
	}
}
    6cc4:	bf00      	nop
    6cc6:	3714      	adds	r7, #20
    6cc8:	46bd      	mov	sp, r7
    6cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cce:	4770      	bx	lr

00006cd0 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    6cd0:	b580      	push	{r7, lr}
    6cd2:	b082      	sub	sp, #8
    6cd4:	af00      	add	r7, sp, #0
    6cd6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    6cd8:	4903      	ldr	r1, [pc, #12]	; (6ce8 <_qspi_end_transfer+0x18>)
    6cda:	6878      	ldr	r0, [r7, #4]
    6cdc:	4b03      	ldr	r3, [pc, #12]	; (6cec <_qspi_end_transfer+0x1c>)
    6cde:	4798      	blx	r3
}
    6ce0:	bf00      	nop
    6ce2:	3708      	adds	r7, #8
    6ce4:	46bd      	mov	sp, r7
    6ce6:	bd80      	pop	{r7, pc}
    6ce8:	01000002 	.word	0x01000002
    6cec:	00006b8d 	.word	0x00006b8d

00006cf0 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    6cf0:	b580      	push	{r7, lr}
    6cf2:	b082      	sub	sp, #8
    6cf4:	af00      	add	r7, sp, #0
    6cf6:	6078      	str	r0, [r7, #4]
    6cf8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    6cfa:	687b      	ldr	r3, [r7, #4]
    6cfc:	2b00      	cmp	r3, #0
    6cfe:	d004      	beq.n	6d0a <_qspi_sync_init+0x1a>
    6d00:	683b      	ldr	r3, [r7, #0]
    6d02:	2b00      	cmp	r3, #0
    6d04:	d001      	beq.n	6d0a <_qspi_sync_init+0x1a>
    6d06:	2301      	movs	r3, #1
    6d08:	e000      	b.n	6d0c <_qspi_sync_init+0x1c>
    6d0a:	2300      	movs	r3, #0
    6d0c:	f003 0301 	and.w	r3, r3, #1
    6d10:	b2db      	uxtb	r3, r3
    6d12:	2240      	movs	r2, #64	; 0x40
    6d14:	490c      	ldr	r1, [pc, #48]	; (6d48 <_qspi_sync_init+0x58>)
    6d16:	4618      	mov	r0, r3
    6d18:	4b0c      	ldr	r3, [pc, #48]	; (6d4c <_qspi_sync_init+0x5c>)
    6d1a:	4798      	blx	r3
	dev->prvt = hw;
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	683a      	ldr	r2, [r7, #0]
    6d20:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	681b      	ldr	r3, [r3, #0]
    6d26:	2101      	movs	r1, #1
    6d28:	4618      	mov	r0, r3
    6d2a:	4b09      	ldr	r3, [pc, #36]	; (6d50 <_qspi_sync_init+0x60>)
    6d2c:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    6d2e:	4909      	ldr	r1, [pc, #36]	; (6d54 <_qspi_sync_init+0x64>)
    6d30:	6838      	ldr	r0, [r7, #0]
    6d32:	4b09      	ldr	r3, [pc, #36]	; (6d58 <_qspi_sync_init+0x68>)
    6d34:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    6d36:	4909      	ldr	r1, [pc, #36]	; (6d5c <_qspi_sync_init+0x6c>)
    6d38:	6838      	ldr	r0, [r7, #0]
    6d3a:	4b09      	ldr	r3, [pc, #36]	; (6d60 <_qspi_sync_init+0x70>)
    6d3c:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    6d3e:	2300      	movs	r3, #0
}
    6d40:	4618      	mov	r0, r3
    6d42:	3708      	adds	r7, #8
    6d44:	46bd      	mov	sp, r7
    6d46:	bd80      	pop	{r7, pc}
    6d48:	00011568 	.word	0x00011568
    6d4c:	00004f51 	.word	0x00004f51
    6d50:	00006b8d 	.word	0x00006b8d
    6d54:	06000011 	.word	0x06000011
    6d58:	00006ba9 	.word	0x00006ba9
    6d5c:	00241300 	.word	0x00241300
    6d60:	00006bc5 	.word	0x00006bc5

00006d64 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    6d64:	b580      	push	{r7, lr}
    6d66:	b082      	sub	sp, #8
    6d68:	af00      	add	r7, sp, #0
    6d6a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	681b      	ldr	r3, [r3, #0]
    6d70:	2102      	movs	r1, #2
    6d72:	4618      	mov	r0, r3
    6d74:	4b03      	ldr	r3, [pc, #12]	; (6d84 <_qspi_sync_enable+0x20>)
    6d76:	4798      	blx	r3
	return ERR_NONE;
    6d78:	2300      	movs	r3, #0
}
    6d7a:	4618      	mov	r0, r3
    6d7c:	3708      	adds	r7, #8
    6d7e:	46bd      	mov	sp, r7
    6d80:	bd80      	pop	{r7, pc}
    6d82:	bf00      	nop
    6d84:	00006b8d 	.word	0x00006b8d

00006d88 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    6d88:	b580      	push	{r7, lr}
    6d8a:	b082      	sub	sp, #8
    6d8c:	af00      	add	r7, sp, #0
    6d8e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	2100      	movs	r1, #0
    6d96:	4618      	mov	r0, r3
    6d98:	4b03      	ldr	r3, [pc, #12]	; (6da8 <_qspi_sync_disable+0x20>)
    6d9a:	4798      	blx	r3
	return ERR_NONE;
    6d9c:	2300      	movs	r3, #0
}
    6d9e:	4618      	mov	r0, r3
    6da0:	3708      	adds	r7, #8
    6da2:	46bd      	mov	sp, r7
    6da4:	bd80      	pop	{r7, pc}
    6da6:	bf00      	nop
    6da8:	00006b8d 	.word	0x00006b8d

00006dac <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6dac:	b580      	push	{r7, lr}
    6dae:	b084      	sub	sp, #16
    6db0:	af00      	add	r7, sp, #0
    6db2:	6078      	str	r0, [r7, #4]
    6db4:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    6db6:	687b      	ldr	r3, [r7, #4]
    6db8:	681b      	ldr	r3, [r3, #0]
    6dba:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    6dbc:	683b      	ldr	r3, [r7, #0]
    6dbe:	781b      	ldrb	r3, [r3, #0]
    6dc0:	f003 0320 	and.w	r3, r3, #32
    6dc4:	b2db      	uxtb	r3, r3
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d005      	beq.n	6dd6 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    6dca:	683b      	ldr	r3, [r7, #0]
    6dcc:	689b      	ldr	r3, [r3, #8]
    6dce:	4619      	mov	r1, r3
    6dd0:	68f8      	ldr	r0, [r7, #12]
    6dd2:	4b13      	ldr	r3, [pc, #76]	; (6e20 <_qspi_sync_command_set_ifr+0x74>)
    6dd4:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    6dd6:	683b      	ldr	r3, [r7, #0]
    6dd8:	781b      	ldrb	r3, [r3, #0]
    6dda:	f003 0310 	and.w	r3, r3, #16
    6dde:	b2db      	uxtb	r3, r3
    6de0:	2b00      	cmp	r3, #0
    6de2:	d005      	beq.n	6df0 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    6de4:	683b      	ldr	r3, [r7, #0]
    6de6:	791b      	ldrb	r3, [r3, #4]
    6de8:	4619      	mov	r1, r3
    6dea:	68f8      	ldr	r0, [r7, #12]
    6dec:	4b0d      	ldr	r3, [pc, #52]	; (6e24 <_qspi_sync_command_set_ifr+0x78>)
    6dee:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    6df0:	683b      	ldr	r3, [r7, #0]
    6df2:	781b      	ldrb	r3, [r3, #0]
    6df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6df8:	b2db      	uxtb	r3, r3
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d005      	beq.n	6e0a <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    6dfe:	683b      	ldr	r3, [r7, #0]
    6e00:	795b      	ldrb	r3, [r3, #5]
    6e02:	4619      	mov	r1, r3
    6e04:	68f8      	ldr	r0, [r7, #12]
    6e06:	4b08      	ldr	r3, [pc, #32]	; (6e28 <_qspi_sync_command_set_ifr+0x7c>)
    6e08:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    6e0a:	683b      	ldr	r3, [r7, #0]
    6e0c:	681b      	ldr	r3, [r3, #0]
    6e0e:	4619      	mov	r1, r3
    6e10:	68f8      	ldr	r0, [r7, #12]
    6e12:	4b06      	ldr	r3, [pc, #24]	; (6e2c <_qspi_sync_command_set_ifr+0x80>)
    6e14:	4798      	blx	r3
}
    6e16:	bf00      	nop
    6e18:	3710      	adds	r7, #16
    6e1a:	46bd      	mov	sp, r7
    6e1c:	bd80      	pop	{r7, pc}
    6e1e:	bf00      	nop
    6e20:	00006be1 	.word	0x00006be1
    6e24:	00006bfd 	.word	0x00006bfd
    6e28:	00006c31 	.word	0x00006c31
    6e2c:	00006c69 	.word	0x00006c69

00006e30 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6e30:	b580      	push	{r7, lr}
    6e32:	b084      	sub	sp, #16
    6e34:	af00      	add	r7, sp, #0
    6e36:	6078      	str	r0, [r7, #4]
    6e38:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	681b      	ldr	r3, [r3, #0]
    6e3e:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    6e40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6e44:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    6e46:	683b      	ldr	r3, [r7, #0]
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	f003 0320 	and.w	r3, r3, #32
    6e4e:	b2db      	uxtb	r3, r3
    6e50:	2b00      	cmp	r3, #0
    6e52:	d004      	beq.n	6e5e <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    6e54:	683b      	ldr	r3, [r7, #0]
    6e56:	689b      	ldr	r3, [r3, #8]
    6e58:	68fa      	ldr	r2, [r7, #12]
    6e5a:	4413      	add	r3, r2
    6e5c:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    6e5e:	68b8      	ldr	r0, [r7, #8]
    6e60:	4b18      	ldr	r3, [pc, #96]	; (6ec4 <_qspi_sync_run_transfer+0x94>)
    6e62:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    6e64:	683b      	ldr	r3, [r7, #0]
    6e66:	691b      	ldr	r3, [r3, #16]
    6e68:	2b00      	cmp	r3, #0
    6e6a:	d103      	bne.n	6e74 <_qspi_sync_run_transfer+0x44>
    6e6c:	683b      	ldr	r3, [r7, #0]
    6e6e:	695b      	ldr	r3, [r3, #20]
    6e70:	2b00      	cmp	r3, #0
    6e72:	d001      	beq.n	6e78 <_qspi_sync_run_transfer+0x48>
    6e74:	2301      	movs	r3, #1
    6e76:	e000      	b.n	6e7a <_qspi_sync_run_transfer+0x4a>
    6e78:	2300      	movs	r3, #0
    6e7a:	f003 0301 	and.w	r3, r3, #1
    6e7e:	b2db      	uxtb	r3, r3
    6e80:	2282      	movs	r2, #130	; 0x82
    6e82:	4911      	ldr	r1, [pc, #68]	; (6ec8 <_qspi_sync_run_transfer+0x98>)
    6e84:	4618      	mov	r0, r3
    6e86:	4b11      	ldr	r3, [pc, #68]	; (6ecc <_qspi_sync_run_transfer+0x9c>)
    6e88:	4798      	blx	r3

	if (cmd->tx_buf) {
    6e8a:	683b      	ldr	r3, [r7, #0]
    6e8c:	691b      	ldr	r3, [r3, #16]
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d008      	beq.n	6ea4 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    6e92:	683b      	ldr	r3, [r7, #0]
    6e94:	6919      	ldr	r1, [r3, #16]
    6e96:	683b      	ldr	r3, [r7, #0]
    6e98:	68db      	ldr	r3, [r3, #12]
    6e9a:	461a      	mov	r2, r3
    6e9c:	68f8      	ldr	r0, [r7, #12]
    6e9e:	4b0c      	ldr	r3, [pc, #48]	; (6ed0 <_qspi_sync_run_transfer+0xa0>)
    6ea0:	4798      	blx	r3
    6ea2:	e007      	b.n	6eb4 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    6ea4:	683b      	ldr	r3, [r7, #0]
    6ea6:	6958      	ldr	r0, [r3, #20]
    6ea8:	683b      	ldr	r3, [r7, #0]
    6eaa:	68db      	ldr	r3, [r3, #12]
    6eac:	461a      	mov	r2, r3
    6eae:	68f9      	ldr	r1, [r7, #12]
    6eb0:	4b07      	ldr	r3, [pc, #28]	; (6ed0 <_qspi_sync_run_transfer+0xa0>)
    6eb2:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    6eb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6eb8:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    6ebc:	bf00      	nop
    6ebe:	3710      	adds	r7, #16
    6ec0:	46bd      	mov	sp, r7
    6ec2:	bd80      	pop	{r7, pc}
    6ec4:	00006c85 	.word	0x00006c85
    6ec8:	00011568 	.word	0x00011568
    6ecc:	00004f51 	.word	0x00004f51
    6ed0:	00006c9d 	.word	0x00006c9d

00006ed4 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b082      	sub	sp, #8
    6ed8:	af00      	add	r7, sp, #0
    6eda:	6078      	str	r0, [r7, #4]
    6edc:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    6ede:	6839      	ldr	r1, [r7, #0]
    6ee0:	6878      	ldr	r0, [r7, #4]
    6ee2:	4b14      	ldr	r3, [pc, #80]	; (6f34 <_qspi_sync_serial_run_command+0x60>)
    6ee4:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    6ee6:	683b      	ldr	r3, [r7, #0]
    6ee8:	781b      	ldrb	r3, [r3, #0]
    6eea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    6eee:	b2db      	uxtb	r3, r3
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d003      	beq.n	6efc <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    6ef4:	6839      	ldr	r1, [r7, #0]
    6ef6:	6878      	ldr	r0, [r7, #4]
    6ef8:	4b0f      	ldr	r3, [pc, #60]	; (6f38 <_qspi_sync_serial_run_command+0x64>)
    6efa:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	4618      	mov	r0, r3
    6f02:	4b0e      	ldr	r3, [pc, #56]	; (6f3c <_qspi_sync_serial_run_command+0x68>)
    6f04:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    6f06:	bf00      	nop
    6f08:	687b      	ldr	r3, [r7, #4]
    6f0a:	681b      	ldr	r3, [r3, #0]
    6f0c:	4618      	mov	r0, r3
    6f0e:	4b0c      	ldr	r3, [pc, #48]	; (6f40 <_qspi_sync_serial_run_command+0x6c>)
    6f10:	4798      	blx	r3
    6f12:	4603      	mov	r3, r0
    6f14:	f083 0301 	eor.w	r3, r3, #1
    6f18:	b2db      	uxtb	r3, r3
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d1f4      	bne.n	6f08 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	681b      	ldr	r3, [r3, #0]
    6f22:	4618      	mov	r0, r3
    6f24:	4b07      	ldr	r3, [pc, #28]	; (6f44 <_qspi_sync_serial_run_command+0x70>)
    6f26:	4798      	blx	r3
	return ERR_NONE;
    6f28:	2300      	movs	r3, #0
}
    6f2a:	4618      	mov	r0, r3
    6f2c:	3708      	adds	r7, #8
    6f2e:	46bd      	mov	sp, r7
    6f30:	bd80      	pop	{r7, pc}
    6f32:	bf00      	nop
    6f34:	00006dad 	.word	0x00006dad
    6f38:	00006e31 	.word	0x00006e31
    6f3c:	00006cd1 	.word	0x00006cd1
    6f40:	00006b49 	.word	0x00006b49
    6f44:	00006b71 	.word	0x00006b71

00006f48 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6f48:	b480      	push	{r7}
    6f4a:	b083      	sub	sp, #12
    6f4c:	af00      	add	r7, sp, #0
    6f4e:	6078      	str	r0, [r7, #4]
    6f50:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    6f52:	bf00      	nop
    6f54:	687b      	ldr	r3, [r7, #4]
    6f56:	691a      	ldr	r2, [r3, #16]
    6f58:	683b      	ldr	r3, [r7, #0]
    6f5a:	4013      	ands	r3, r2
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d1f9      	bne.n	6f54 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    6f60:	bf00      	nop
    6f62:	370c      	adds	r7, #12
    6f64:	46bd      	mov	sp, r7
    6f66:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f6a:	4770      	bx	lr

00006f6c <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6f6c:	b480      	push	{r7}
    6f6e:	b083      	sub	sp, #12
    6f70:	af00      	add	r7, sp, #0
    6f72:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6f74:	687b      	ldr	r3, [r7, #4]
    6f76:	f44f 7280 	mov.w	r2, #256	; 0x100
    6f7a:	819a      	strh	r2, [r3, #12]
}
    6f7c:	bf00      	nop
    6f7e:	370c      	adds	r7, #12
    6f80:	46bd      	mov	sp, r7
    6f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f86:	4770      	bx	lr

00006f88 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    6f88:	b480      	push	{r7}
    6f8a:	b083      	sub	sp, #12
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6f96:	819a      	strh	r2, [r3, #12]
}
    6f98:	bf00      	nop
    6f9a:	370c      	adds	r7, #12
    6f9c:	46bd      	mov	sp, r7
    6f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fa2:	4770      	bx	lr

00006fa4 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    6fa4:	b480      	push	{r7}
    6fa6:	b083      	sub	sp, #12
    6fa8:	af00      	add	r7, sp, #0
    6faa:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6fac:	687b      	ldr	r3, [r7, #4]
    6fae:	899b      	ldrh	r3, [r3, #12]
    6fb0:	b29b      	uxth	r3, r3
}
    6fb2:	4618      	mov	r0, r3
    6fb4:	370c      	adds	r7, #12
    6fb6:	46bd      	mov	sp, r7
    6fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fbc:	4770      	bx	lr

00006fbe <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    6fbe:	b480      	push	{r7}
    6fc0:	b083      	sub	sp, #12
    6fc2:	af00      	add	r7, sp, #0
    6fc4:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    6fc6:	687b      	ldr	r3, [r7, #4]
    6fc8:	895b      	ldrh	r3, [r3, #10]
    6fca:	b29b      	uxth	r3, r3
}
    6fcc:	4618      	mov	r0, r3
    6fce:	370c      	adds	r7, #12
    6fd0:	46bd      	mov	sp, r7
    6fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd6:	4770      	bx	lr

00006fd8 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	b082      	sub	sp, #8
    6fdc:	af00      	add	r7, sp, #0
    6fde:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	881b      	ldrh	r3, [r3, #0]
    6fe4:	b29b      	uxth	r3, r3
    6fe6:	f043 0301 	orr.w	r3, r3, #1
    6fea:	b29a      	uxth	r2, r3
    6fec:	687b      	ldr	r3, [r7, #4]
    6fee:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    6ff0:	2101      	movs	r1, #1
    6ff2:	6878      	ldr	r0, [r7, #4]
    6ff4:	4b02      	ldr	r3, [pc, #8]	; (7000 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    6ff6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6ff8:	bf00      	nop
    6ffa:	3708      	adds	r7, #8
    6ffc:	46bd      	mov	sp, r7
    6ffe:	bd80      	pop	{r7, pc}
    7000:	00006f49 	.word	0x00006f49

00007004 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7004:	b580      	push	{r7, lr}
    7006:	b084      	sub	sp, #16
    7008:	af00      	add	r7, sp, #0
    700a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    700c:	f248 0103 	movw	r1, #32771	; 0x8003
    7010:	6878      	ldr	r0, [r7, #4]
    7012:	4b0a      	ldr	r3, [pc, #40]	; (703c <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    7014:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	881b      	ldrh	r3, [r3, #0]
    701a:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    701c:	89fb      	ldrh	r3, [r7, #14]
    701e:	085b      	lsrs	r3, r3, #1
    7020:	b29b      	uxth	r3, r3
    7022:	f003 0301 	and.w	r3, r3, #1
    7026:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    7028:	89fb      	ldrh	r3, [r7, #14]
    702a:	2b00      	cmp	r3, #0
    702c:	bf14      	ite	ne
    702e:	2301      	movne	r3, #1
    7030:	2300      	moveq	r3, #0
    7032:	b2db      	uxtb	r3, r3
}
    7034:	4618      	mov	r0, r3
    7036:	3710      	adds	r7, #16
    7038:	46bd      	mov	sp, r7
    703a:	bd80      	pop	{r7, pc}
    703c:	00006f49 	.word	0x00006f49

00007040 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7040:	b580      	push	{r7, lr}
    7042:	b082      	sub	sp, #8
    7044:	af00      	add	r7, sp, #0
    7046:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	881b      	ldrh	r3, [r3, #0]
    704c:	b29b      	uxth	r3, r3
    704e:	f023 0302 	bic.w	r3, r3, #2
    7052:	b29a      	uxth	r2, r3
    7054:	687b      	ldr	r3, [r7, #4]
    7056:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7058:	f248 0103 	movw	r1, #32771	; 0x8003
    705c:	6878      	ldr	r0, [r7, #4]
    705e:	4b03      	ldr	r3, [pc, #12]	; (706c <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    7060:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7062:	bf00      	nop
    7064:	3708      	adds	r7, #8
    7066:	46bd      	mov	sp, r7
    7068:	bd80      	pop	{r7, pc}
    706a:	bf00      	nop
    706c:	00006f49 	.word	0x00006f49

00007070 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    7070:	b580      	push	{r7, lr}
    7072:	b082      	sub	sp, #8
    7074:	af00      	add	r7, sp, #0
    7076:	6078      	str	r0, [r7, #4]
    7078:	460b      	mov	r3, r1
    707a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    707c:	687b      	ldr	r3, [r7, #4]
    707e:	887a      	ldrh	r2, [r7, #2]
    7080:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7082:	f248 0103 	movw	r1, #32771	; 0x8003
    7086:	6878      	ldr	r0, [r7, #4]
    7088:	4b02      	ldr	r3, [pc, #8]	; (7094 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    708a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    708c:	bf00      	nop
    708e:	3708      	adds	r7, #8
    7090:	46bd      	mov	sp, r7
    7092:	bd80      	pop	{r7, pc}
    7094:	00006f49 	.word	0x00006f49

00007098 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    7098:	b580      	push	{r7, lr}
    709a:	b082      	sub	sp, #8
    709c:	af00      	add	r7, sp, #0
    709e:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    70a0:	2108      	movs	r1, #8
    70a2:	6878      	ldr	r0, [r7, #4]
    70a4:	4b03      	ldr	r3, [pc, #12]	; (70b4 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    70a6:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    70a8:	687b      	ldr	r3, [r7, #4]
    70aa:	699b      	ldr	r3, [r3, #24]
}
    70ac:	4618      	mov	r0, r3
    70ae:	3708      	adds	r7, #8
    70b0:	46bd      	mov	sp, r7
    70b2:	bd80      	pop	{r7, pc}
    70b4:	00006f49 	.word	0x00006f49

000070b8 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    70b8:	b480      	push	{r7}
    70ba:	b083      	sub	sp, #12
    70bc:	af00      	add	r7, sp, #0
    70be:	6078      	str	r0, [r7, #4]
    70c0:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	683a      	ldr	r2, [r7, #0]
    70c6:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    70c8:	bf00      	nop
    70ca:	370c      	adds	r7, #12
    70cc:	46bd      	mov	sp, r7
    70ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    70d2:	4770      	bx	lr

000070d4 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    70d4:	b580      	push	{r7, lr}
    70d6:	b082      	sub	sp, #8
    70d8:	af00      	add	r7, sp, #0
    70da:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    70dc:	687b      	ldr	r3, [r7, #4]
    70de:	2b00      	cmp	r3, #0
    70e0:	d005      	beq.n	70ee <_calendar_init+0x1a>
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	681b      	ldr	r3, [r3, #0]
    70e6:	2b00      	cmp	r3, #0
    70e8:	d001      	beq.n	70ee <_calendar_init+0x1a>
    70ea:	2301      	movs	r3, #1
    70ec:	e000      	b.n	70f0 <_calendar_init+0x1c>
    70ee:	2300      	movs	r3, #0
    70f0:	f003 0301 	and.w	r3, r3, #1
    70f4:	b2db      	uxtb	r3, r3
    70f6:	222f      	movs	r2, #47	; 0x2f
    70f8:	491e      	ldr	r1, [pc, #120]	; (7174 <_calendar_init+0xa0>)
    70fa:	4618      	mov	r0, r3
    70fc:	4b1e      	ldr	r3, [pc, #120]	; (7178 <_calendar_init+0xa4>)
    70fe:	4798      	blx	r3

	_rtc_dev = dev;
    7100:	4a1e      	ldr	r2, [pc, #120]	; (717c <_calendar_init+0xa8>)
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	681b      	ldr	r3, [r3, #0]
    710a:	2101      	movs	r1, #1
    710c:	4618      	mov	r0, r3
    710e:	4b1c      	ldr	r3, [pc, #112]	; (7180 <_calendar_init+0xac>)
    7110:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	681b      	ldr	r3, [r3, #0]
    7116:	4618      	mov	r0, r3
    7118:	4b1a      	ldr	r3, [pc, #104]	; (7184 <_calendar_init+0xb0>)
    711a:	4798      	blx	r3
    711c:	4603      	mov	r3, r0
    711e:	2b00      	cmp	r3, #0
    7120:	d00a      	beq.n	7138 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    7122:	687b      	ldr	r3, [r7, #4]
    7124:	681b      	ldr	r3, [r3, #0]
    7126:	4618      	mov	r0, r3
    7128:	4b17      	ldr	r3, [pc, #92]	; (7188 <_calendar_init+0xb4>)
    712a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    712c:	687b      	ldr	r3, [r7, #4]
    712e:	681b      	ldr	r3, [r3, #0]
    7130:	2102      	movs	r1, #2
    7132:	4618      	mov	r0, r3
    7134:	4b12      	ldr	r3, [pc, #72]	; (7180 <_calendar_init+0xac>)
    7136:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    7138:	687b      	ldr	r3, [r7, #4]
    713a:	681b      	ldr	r3, [r3, #0]
    713c:	4618      	mov	r0, r3
    713e:	4b13      	ldr	r3, [pc, #76]	; (718c <_calendar_init+0xb8>)
    7140:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7142:	687b      	ldr	r3, [r7, #4]
    7144:	681b      	ldr	r3, [r3, #0]
    7146:	2101      	movs	r1, #1
    7148:	4618      	mov	r0, r3
    714a:	4b0d      	ldr	r3, [pc, #52]	; (7180 <_calendar_init+0xac>)
    714c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    714e:	687b      	ldr	r3, [r7, #4]
    7150:	681b      	ldr	r3, [r3, #0]
    7152:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    7156:	4618      	mov	r0, r3
    7158:	4b0d      	ldr	r3, [pc, #52]	; (7190 <_calendar_init+0xbc>)
    715a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    7160:	2100      	movs	r1, #0
    7162:	4618      	mov	r0, r3
    7164:	4b0b      	ldr	r3, [pc, #44]	; (7194 <_calendar_init+0xc0>)
    7166:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    7168:	2300      	movs	r3, #0
}
    716a:	4618      	mov	r0, r3
    716c:	3708      	adds	r7, #8
    716e:	46bd      	mov	sp, r7
    7170:	bd80      	pop	{r7, pc}
    7172:	bf00      	nop
    7174:	00011580 	.word	0x00011580
    7178:	00004f51 	.word	0x00004f51
    717c:	20001c90 	.word	0x20001c90
    7180:	00006f49 	.word	0x00006f49
    7184:	00007005 	.word	0x00007005
    7188:	00007041 	.word	0x00007041
    718c:	00006fd9 	.word	0x00006fd9
    7190:	00007071 	.word	0x00007071
    7194:	000070b9 	.word	0x000070b9

00007198 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    7198:	b580      	push	{r7, lr}
    719a:	b082      	sub	sp, #8
    719c:	af00      	add	r7, sp, #0
    719e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	2b00      	cmp	r3, #0
    71a4:	d005      	beq.n	71b2 <_calendar_get_counter+0x1a>
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	681b      	ldr	r3, [r3, #0]
    71aa:	2b00      	cmp	r3, #0
    71ac:	d001      	beq.n	71b2 <_calendar_get_counter+0x1a>
    71ae:	2301      	movs	r3, #1
    71b0:	e000      	b.n	71b4 <_calendar_get_counter+0x1c>
    71b2:	2300      	movs	r3, #0
    71b4:	f003 0301 	and.w	r3, r3, #1
    71b8:	b2db      	uxtb	r3, r3
    71ba:	229a      	movs	r2, #154	; 0x9a
    71bc:	4906      	ldr	r1, [pc, #24]	; (71d8 <_calendar_get_counter+0x40>)
    71be:	4618      	mov	r0, r3
    71c0:	4b06      	ldr	r3, [pc, #24]	; (71dc <_calendar_get_counter+0x44>)
    71c2:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	4618      	mov	r0, r3
    71ca:	4b05      	ldr	r3, [pc, #20]	; (71e0 <_calendar_get_counter+0x48>)
    71cc:	4798      	blx	r3
    71ce:	4603      	mov	r3, r0
}
    71d0:	4618      	mov	r0, r3
    71d2:	3708      	adds	r7, #8
    71d4:	46bd      	mov	sp, r7
    71d6:	bd80      	pop	{r7, pc}
    71d8:	00011580 	.word	0x00011580
    71dc:	00004f51 	.word	0x00004f51
    71e0:	00007099 	.word	0x00007099

000071e4 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    71e4:	b580      	push	{r7, lr}
    71e6:	b084      	sub	sp, #16
    71e8:	af00      	add	r7, sp, #0
    71ea:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	681b      	ldr	r3, [r3, #0]
    71f0:	4618      	mov	r0, r3
    71f2:	4b19      	ldr	r3, [pc, #100]	; (7258 <_rtc_interrupt_handler+0x74>)
    71f4:	4798      	blx	r3
    71f6:	4603      	mov	r3, r0
    71f8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    71fa:	687b      	ldr	r3, [r7, #4]
    71fc:	681b      	ldr	r3, [r3, #0]
    71fe:	4618      	mov	r0, r3
    7200:	4b16      	ldr	r3, [pc, #88]	; (725c <_rtc_interrupt_handler+0x78>)
    7202:	4798      	blx	r3
    7204:	4603      	mov	r3, r0
    7206:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    7208:	89fa      	ldrh	r2, [r7, #14]
    720a:	89bb      	ldrh	r3, [r7, #12]
    720c:	4013      	ands	r3, r2
    720e:	b29b      	uxth	r3, r3
    7210:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7214:	2b00      	cmp	r3, #0
    7216:	d009      	beq.n	722c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	685b      	ldr	r3, [r3, #4]
    721c:	6878      	ldr	r0, [r7, #4]
    721e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    7220:	687b      	ldr	r3, [r7, #4]
    7222:	681b      	ldr	r3, [r3, #0]
    7224:	4618      	mov	r0, r3
    7226:	4b0e      	ldr	r3, [pc, #56]	; (7260 <_rtc_interrupt_handler+0x7c>)
    7228:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    722a:	e010      	b.n	724e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    722c:	89fa      	ldrh	r2, [r7, #14]
    722e:	89bb      	ldrh	r3, [r7, #12]
    7230:	4013      	ands	r3, r2
    7232:	b29b      	uxth	r3, r3
    7234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7238:	2b00      	cmp	r3, #0
    723a:	d008      	beq.n	724e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    723c:	687b      	ldr	r3, [r7, #4]
    723e:	689b      	ldr	r3, [r3, #8]
    7240:	6878      	ldr	r0, [r7, #4]
    7242:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    7244:	687b      	ldr	r3, [r7, #4]
    7246:	681b      	ldr	r3, [r3, #0]
    7248:	4618      	mov	r0, r3
    724a:	4b06      	ldr	r3, [pc, #24]	; (7264 <_rtc_interrupt_handler+0x80>)
    724c:	4798      	blx	r3
}
    724e:	bf00      	nop
    7250:	3710      	adds	r7, #16
    7252:	46bd      	mov	sp, r7
    7254:	bd80      	pop	{r7, pc}
    7256:	bf00      	nop
    7258:	00006fa5 	.word	0x00006fa5
    725c:	00006fbf 	.word	0x00006fbf
    7260:	00006f6d 	.word	0x00006f6d
    7264:	00006f89 	.word	0x00006f89

00007268 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    7268:	b580      	push	{r7, lr}
    726a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    726c:	4b03      	ldr	r3, [pc, #12]	; (727c <RTC_Handler+0x14>)
    726e:	681b      	ldr	r3, [r3, #0]
    7270:	4618      	mov	r0, r3
    7272:	4b03      	ldr	r3, [pc, #12]	; (7280 <RTC_Handler+0x18>)
    7274:	4798      	blx	r3
}
    7276:	bf00      	nop
    7278:	bd80      	pop	{r7, pc}
    727a:	bf00      	nop
    727c:	20001c90 	.word	0x20001c90
    7280:	000071e5 	.word	0x000071e5

00007284 <__NVIC_EnableIRQ>:
{
    7284:	b480      	push	{r7}
    7286:	b083      	sub	sp, #12
    7288:	af00      	add	r7, sp, #0
    728a:	4603      	mov	r3, r0
    728c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    728e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7292:	2b00      	cmp	r3, #0
    7294:	db0b      	blt.n	72ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7296:	4909      	ldr	r1, [pc, #36]	; (72bc <__NVIC_EnableIRQ+0x38>)
    7298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    729c:	095b      	lsrs	r3, r3, #5
    729e:	88fa      	ldrh	r2, [r7, #6]
    72a0:	f002 021f 	and.w	r2, r2, #31
    72a4:	2001      	movs	r0, #1
    72a6:	fa00 f202 	lsl.w	r2, r0, r2
    72aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72ae:	bf00      	nop
    72b0:	370c      	adds	r7, #12
    72b2:	46bd      	mov	sp, r7
    72b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b8:	4770      	bx	lr
    72ba:	bf00      	nop
    72bc:	e000e100 	.word	0xe000e100

000072c0 <__NVIC_DisableIRQ>:
{
    72c0:	b480      	push	{r7}
    72c2:	b083      	sub	sp, #12
    72c4:	af00      	add	r7, sp, #0
    72c6:	4603      	mov	r3, r0
    72c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    72ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72ce:	2b00      	cmp	r3, #0
    72d0:	db10      	blt.n	72f4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    72d2:	490b      	ldr	r1, [pc, #44]	; (7300 <__NVIC_DisableIRQ+0x40>)
    72d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72d8:	095b      	lsrs	r3, r3, #5
    72da:	88fa      	ldrh	r2, [r7, #6]
    72dc:	f002 021f 	and.w	r2, r2, #31
    72e0:	2001      	movs	r0, #1
    72e2:	fa00 f202 	lsl.w	r2, r0, r2
    72e6:	3320      	adds	r3, #32
    72e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    72ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    72f0:	f3bf 8f6f 	isb	sy
}
    72f4:	bf00      	nop
    72f6:	370c      	adds	r7, #12
    72f8:	46bd      	mov	sp, r7
    72fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    72fe:	4770      	bx	lr
    7300:	e000e100 	.word	0xe000e100

00007304 <__NVIC_ClearPendingIRQ>:
{
    7304:	b480      	push	{r7}
    7306:	b083      	sub	sp, #12
    7308:	af00      	add	r7, sp, #0
    730a:	4603      	mov	r3, r0
    730c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    730e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7312:	2b00      	cmp	r3, #0
    7314:	db0c      	blt.n	7330 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7316:	4909      	ldr	r1, [pc, #36]	; (733c <__NVIC_ClearPendingIRQ+0x38>)
    7318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    731c:	095b      	lsrs	r3, r3, #5
    731e:	88fa      	ldrh	r2, [r7, #6]
    7320:	f002 021f 	and.w	r2, r2, #31
    7324:	2001      	movs	r0, #1
    7326:	fa00 f202 	lsl.w	r2, r0, r2
    732a:	3360      	adds	r3, #96	; 0x60
    732c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7330:	bf00      	nop
    7332:	370c      	adds	r7, #12
    7334:	46bd      	mov	sp, r7
    7336:	f85d 7b04 	ldr.w	r7, [sp], #4
    733a:	4770      	bx	lr
    733c:	e000e100 	.word	0xe000e100

00007340 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7340:	b480      	push	{r7}
    7342:	b083      	sub	sp, #12
    7344:	af00      	add	r7, sp, #0
    7346:	6078      	str	r0, [r7, #4]
    7348:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    734a:	bf00      	nop
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	69da      	ldr	r2, [r3, #28]
    7350:	683b      	ldr	r3, [r7, #0]
    7352:	4013      	ands	r3, r2
    7354:	2b00      	cmp	r3, #0
    7356:	d1f9      	bne.n	734c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    7358:	bf00      	nop
    735a:	370c      	adds	r7, #12
    735c:	46bd      	mov	sp, r7
    735e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7362:	4770      	bx	lr

00007364 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7364:	b480      	push	{r7}
    7366:	b083      	sub	sp, #12
    7368:	af00      	add	r7, sp, #0
    736a:	6078      	str	r0, [r7, #4]
    736c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    736e:	687b      	ldr	r3, [r7, #4]
    7370:	69da      	ldr	r2, [r3, #28]
    7372:	683b      	ldr	r3, [r7, #0]
    7374:	4013      	ands	r3, r2
    7376:	2b00      	cmp	r3, #0
    7378:	bf14      	ite	ne
    737a:	2301      	movne	r3, #1
    737c:	2300      	moveq	r3, #0
    737e:	b2db      	uxtb	r3, r3
}
    7380:	4618      	mov	r0, r3
    7382:	370c      	adds	r7, #12
    7384:	46bd      	mov	sp, r7
    7386:	f85d 7b04 	ldr.w	r7, [sp], #4
    738a:	4770      	bx	lr

0000738c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    738c:	b480      	push	{r7}
    738e:	b083      	sub	sp, #12
    7390:	af00      	add	r7, sp, #0
    7392:	6078      	str	r0, [r7, #4]
    7394:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7396:	bf00      	nop
    7398:	687b      	ldr	r3, [r7, #4]
    739a:	69da      	ldr	r2, [r3, #28]
    739c:	683b      	ldr	r3, [r7, #0]
    739e:	4013      	ands	r3, r2
    73a0:	2b00      	cmp	r3, #0
    73a2:	d1f9      	bne.n	7398 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    73a4:	bf00      	nop
    73a6:	370c      	adds	r7, #12
    73a8:	46bd      	mov	sp, r7
    73aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    73ae:	4770      	bx	lr

000073b0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    73b0:	b480      	push	{r7}
    73b2:	b083      	sub	sp, #12
    73b4:	af00      	add	r7, sp, #0
    73b6:	6078      	str	r0, [r7, #4]
    73b8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    73ba:	687b      	ldr	r3, [r7, #4]
    73bc:	69da      	ldr	r2, [r3, #28]
    73be:	683b      	ldr	r3, [r7, #0]
    73c0:	4013      	ands	r3, r2
    73c2:	2b00      	cmp	r3, #0
    73c4:	bf14      	ite	ne
    73c6:	2301      	movne	r3, #1
    73c8:	2300      	moveq	r3, #0
    73ca:	b2db      	uxtb	r3, r3
}
    73cc:	4618      	mov	r0, r3
    73ce:	370c      	adds	r7, #12
    73d0:	46bd      	mov	sp, r7
    73d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    73d6:	4770      	bx	lr

000073d8 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    73d8:	b480      	push	{r7}
    73da:	b083      	sub	sp, #12
    73dc:	af00      	add	r7, sp, #0
    73de:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    73e0:	687b      	ldr	r3, [r7, #4]
    73e2:	2201      	movs	r2, #1
    73e4:	761a      	strb	r2, [r3, #24]
}
    73e6:	bf00      	nop
    73e8:	370c      	adds	r7, #12
    73ea:	46bd      	mov	sp, r7
    73ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    73f0:	4770      	bx	lr

000073f2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    73f2:	b480      	push	{r7}
    73f4:	b083      	sub	sp, #12
    73f6:	af00      	add	r7, sp, #0
    73f8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    73fa:	687b      	ldr	r3, [r7, #4]
    73fc:	2202      	movs	r2, #2
    73fe:	761a      	strb	r2, [r3, #24]
}
    7400:	bf00      	nop
    7402:	370c      	adds	r7, #12
    7404:	46bd      	mov	sp, r7
    7406:	f85d 7b04 	ldr.w	r7, [sp], #4
    740a:	4770      	bx	lr

0000740c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    740c:	b480      	push	{r7}
    740e:	b083      	sub	sp, #12
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	7e1b      	ldrb	r3, [r3, #24]
    7418:	b2db      	uxtb	r3, r3
}
    741a:	4618      	mov	r0, r3
    741c:	370c      	adds	r7, #12
    741e:	46bd      	mov	sp, r7
    7420:	f85d 7b04 	ldr.w	r7, [sp], #4
    7424:	4770      	bx	lr

00007426 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    7426:	b480      	push	{r7}
    7428:	b083      	sub	sp, #12
    742a:	af00      	add	r7, sp, #0
    742c:	6078      	str	r0, [r7, #4]
    742e:	460b      	mov	r3, r1
    7430:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    7432:	687b      	ldr	r3, [r7, #4]
    7434:	78fa      	ldrb	r2, [r7, #3]
    7436:	761a      	strb	r2, [r3, #24]
}
    7438:	bf00      	nop
    743a:	370c      	adds	r7, #12
    743c:	46bd      	mov	sp, r7
    743e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7442:	4770      	bx	lr

00007444 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    7444:	b480      	push	{r7}
    7446:	b085      	sub	sp, #20
    7448:	af00      	add	r7, sp, #0
    744a:	6078      	str	r0, [r7, #4]
    744c:	460b      	mov	r3, r1
    744e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    7450:	687b      	ldr	r3, [r7, #4]
    7452:	7e1b      	ldrb	r3, [r3, #24]
    7454:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7456:	7bfa      	ldrb	r2, [r7, #15]
    7458:	78fb      	ldrb	r3, [r7, #3]
    745a:	4013      	ands	r3, r2
    745c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    745e:	7bfb      	ldrb	r3, [r7, #15]
}
    7460:	4618      	mov	r0, r3
    7462:	3714      	adds	r7, #20
    7464:	46bd      	mov	sp, r7
    7466:	f85d 7b04 	ldr.w	r7, [sp], #4
    746a:	4770      	bx	lr

0000746c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    746c:	b480      	push	{r7}
    746e:	b083      	sub	sp, #12
    7470:	af00      	add	r7, sp, #0
    7472:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7474:	687b      	ldr	r3, [r7, #4]
    7476:	7e1b      	ldrb	r3, [r3, #24]
    7478:	b2db      	uxtb	r3, r3
}
    747a:	4618      	mov	r0, r3
    747c:	370c      	adds	r7, #12
    747e:	46bd      	mov	sp, r7
    7480:	f85d 7b04 	ldr.w	r7, [sp], #4
    7484:	4770      	bx	lr

00007486 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    7486:	b480      	push	{r7}
    7488:	b083      	sub	sp, #12
    748a:	af00      	add	r7, sp, #0
    748c:	6078      	str	r0, [r7, #4]
    748e:	460b      	mov	r3, r1
    7490:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7492:	687b      	ldr	r3, [r7, #4]
    7494:	78fa      	ldrb	r2, [r7, #3]
    7496:	761a      	strb	r2, [r3, #24]
}
    7498:	bf00      	nop
    749a:	370c      	adds	r7, #12
    749c:	46bd      	mov	sp, r7
    749e:	f85d 7b04 	ldr.w	r7, [sp], #4
    74a2:	4770      	bx	lr

000074a4 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    74a4:	b480      	push	{r7}
    74a6:	b083      	sub	sp, #12
    74a8:	af00      	add	r7, sp, #0
    74aa:	6078      	str	r0, [r7, #4]
    74ac:	460b      	mov	r3, r1
    74ae:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    74b0:	78fb      	ldrb	r3, [r7, #3]
    74b2:	f083 0301 	eor.w	r3, r3, #1
    74b6:	b2db      	uxtb	r3, r3
    74b8:	2b00      	cmp	r3, #0
    74ba:	d003      	beq.n	74c4 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    74bc:	687b      	ldr	r3, [r7, #4]
    74be:	2201      	movs	r2, #1
    74c0:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    74c2:	e002      	b.n	74ca <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    74c4:	687b      	ldr	r3, [r7, #4]
    74c6:	2201      	movs	r2, #1
    74c8:	759a      	strb	r2, [r3, #22]
}
    74ca:	bf00      	nop
    74cc:	370c      	adds	r7, #12
    74ce:	46bd      	mov	sp, r7
    74d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    74d4:	4770      	bx	lr

000074d6 <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    74d6:	b480      	push	{r7}
    74d8:	b083      	sub	sp, #12
    74da:	af00      	add	r7, sp, #0
    74dc:	6078      	str	r0, [r7, #4]
    74de:	460b      	mov	r3, r1
    74e0:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    74e2:	78fb      	ldrb	r3, [r7, #3]
    74e4:	f083 0301 	eor.w	r3, r3, #1
    74e8:	b2db      	uxtb	r3, r3
    74ea:	2b00      	cmp	r3, #0
    74ec:	d003      	beq.n	74f6 <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    74ee:	687b      	ldr	r3, [r7, #4]
    74f0:	2202      	movs	r2, #2
    74f2:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    74f4:	e002      	b.n	74fc <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    74f6:	687b      	ldr	r3, [r7, #4]
    74f8:	2202      	movs	r2, #2
    74fa:	759a      	strb	r2, [r3, #22]
}
    74fc:	bf00      	nop
    74fe:	370c      	adds	r7, #12
    7500:	46bd      	mov	sp, r7
    7502:	f85d 7b04 	ldr.w	r7, [sp], #4
    7506:	4770      	bx	lr

00007508 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    7508:	b480      	push	{r7}
    750a:	b083      	sub	sp, #12
    750c:	af00      	add	r7, sp, #0
    750e:	6078      	str	r0, [r7, #4]
    7510:	460b      	mov	r3, r1
    7512:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    7514:	78fb      	ldrb	r3, [r7, #3]
    7516:	f083 0301 	eor.w	r3, r3, #1
    751a:	b2db      	uxtb	r3, r3
    751c:	2b00      	cmp	r3, #0
    751e:	d003      	beq.n	7528 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    7520:	687b      	ldr	r3, [r7, #4]
    7522:	2280      	movs	r2, #128	; 0x80
    7524:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    7526:	e002      	b.n	752e <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    7528:	687b      	ldr	r3, [r7, #4]
    752a:	2280      	movs	r2, #128	; 0x80
    752c:	759a      	strb	r2, [r3, #22]
}
    752e:	bf00      	nop
    7530:	370c      	adds	r7, #12
    7532:	46bd      	mov	sp, r7
    7534:	f85d 7b04 	ldr.w	r7, [sp], #4
    7538:	4770      	bx	lr

0000753a <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    753a:	b480      	push	{r7}
    753c:	b083      	sub	sp, #12
    753e:	af00      	add	r7, sp, #0
    7540:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    7542:	687b      	ldr	r3, [r7, #4]
    7544:	2201      	movs	r2, #1
    7546:	759a      	strb	r2, [r3, #22]
}
    7548:	bf00      	nop
    754a:	370c      	adds	r7, #12
    754c:	46bd      	mov	sp, r7
    754e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7552:	4770      	bx	lr

00007554 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    7554:	b480      	push	{r7}
    7556:	b083      	sub	sp, #12
    7558:	af00      	add	r7, sp, #0
    755a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    755c:	687b      	ldr	r3, [r7, #4]
    755e:	2201      	movs	r2, #1
    7560:	751a      	strb	r2, [r3, #20]
}
    7562:	bf00      	nop
    7564:	370c      	adds	r7, #12
    7566:	46bd      	mov	sp, r7
    7568:	f85d 7b04 	ldr.w	r7, [sp], #4
    756c:	4770      	bx	lr

0000756e <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    756e:	b480      	push	{r7}
    7570:	b083      	sub	sp, #12
    7572:	af00      	add	r7, sp, #0
    7574:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7576:	687b      	ldr	r3, [r7, #4]
    7578:	2202      	movs	r2, #2
    757a:	759a      	strb	r2, [r3, #22]
}
    757c:	bf00      	nop
    757e:	370c      	adds	r7, #12
    7580:	46bd      	mov	sp, r7
    7582:	f85d 7b04 	ldr.w	r7, [sp], #4
    7586:	4770      	bx	lr

00007588 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    7588:	b480      	push	{r7}
    758a:	b083      	sub	sp, #12
    758c:	af00      	add	r7, sp, #0
    758e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    7590:	687b      	ldr	r3, [r7, #4]
    7592:	2202      	movs	r2, #2
    7594:	751a      	strb	r2, [r3, #20]
}
    7596:	bf00      	nop
    7598:	370c      	adds	r7, #12
    759a:	46bd      	mov	sp, r7
    759c:	f85d 7b04 	ldr.w	r7, [sp], #4
    75a0:	4770      	bx	lr

000075a2 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    75a2:	b480      	push	{r7}
    75a4:	b083      	sub	sp, #12
    75a6:	af00      	add	r7, sp, #0
    75a8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    75aa:	687b      	ldr	r3, [r7, #4]
    75ac:	2204      	movs	r2, #4
    75ae:	759a      	strb	r2, [r3, #22]
}
    75b0:	bf00      	nop
    75b2:	370c      	adds	r7, #12
    75b4:	46bd      	mov	sp, r7
    75b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ba:	4770      	bx	lr

000075bc <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    75bc:	b480      	push	{r7}
    75be:	b083      	sub	sp, #12
    75c0:	af00      	add	r7, sp, #0
    75c2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	2204      	movs	r2, #4
    75c8:	751a      	strb	r2, [r3, #20]
}
    75ca:	bf00      	nop
    75cc:	370c      	adds	r7, #12
    75ce:	46bd      	mov	sp, r7
    75d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    75d4:	4770      	bx	lr

000075d6 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    75d6:	b480      	push	{r7}
    75d8:	b083      	sub	sp, #12
    75da:	af00      	add	r7, sp, #0
    75dc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    75de:	687b      	ldr	r3, [r7, #4]
    75e0:	7d9b      	ldrb	r3, [r3, #22]
    75e2:	b2db      	uxtb	r3, r3
}
    75e4:	4618      	mov	r0, r3
    75e6:	370c      	adds	r7, #12
    75e8:	46bd      	mov	sp, r7
    75ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ee:	4770      	bx	lr

000075f0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    75f0:	b580      	push	{r7, lr}
    75f2:	b082      	sub	sp, #8
    75f4:	af00      	add	r7, sp, #0
    75f6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    75f8:	687b      	ldr	r3, [r7, #4]
    75fa:	681b      	ldr	r3, [r3, #0]
    75fc:	f043 0202 	orr.w	r2, r3, #2
    7600:	687b      	ldr	r3, [r7, #4]
    7602:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7604:	2103      	movs	r1, #3
    7606:	6878      	ldr	r0, [r7, #4]
    7608:	4b02      	ldr	r3, [pc, #8]	; (7614 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    760a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    760c:	bf00      	nop
    760e:	3708      	adds	r7, #8
    7610:	46bd      	mov	sp, r7
    7612:	bd80      	pop	{r7, pc}
    7614:	00007341 	.word	0x00007341

00007618 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7618:	b580      	push	{r7, lr}
    761a:	b082      	sub	sp, #8
    761c:	af00      	add	r7, sp, #0
    761e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7620:	687b      	ldr	r3, [r7, #4]
    7622:	681b      	ldr	r3, [r3, #0]
    7624:	f023 0202 	bic.w	r2, r3, #2
    7628:	687b      	ldr	r3, [r7, #4]
    762a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    762c:	2103      	movs	r1, #3
    762e:	6878      	ldr	r0, [r7, #4]
    7630:	4b02      	ldr	r3, [pc, #8]	; (763c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    7632:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7634:	bf00      	nop
    7636:	3708      	adds	r7, #8
    7638:	46bd      	mov	sp, r7
    763a:	bd80      	pop	{r7, pc}
    763c:	00007341 	.word	0x00007341

00007640 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    7640:	b480      	push	{r7}
    7642:	b085      	sub	sp, #20
    7644:	af00      	add	r7, sp, #0
    7646:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7648:	687b      	ldr	r3, [r7, #4]
    764a:	681b      	ldr	r3, [r3, #0]
    764c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    764e:	68fb      	ldr	r3, [r7, #12]
    7650:	0edb      	lsrs	r3, r3, #27
    7652:	f003 0301 	and.w	r3, r3, #1
    7656:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7658:	68fb      	ldr	r3, [r7, #12]
    765a:	2b00      	cmp	r3, #0
    765c:	bf14      	ite	ne
    765e:	2301      	movne	r3, #1
    7660:	2300      	moveq	r3, #0
    7662:	b2db      	uxtb	r3, r3
}
    7664:	4618      	mov	r0, r3
    7666:	3714      	adds	r7, #20
    7668:	46bd      	mov	sp, r7
    766a:	f85d 7b04 	ldr.w	r7, [sp], #4
    766e:	4770      	bx	lr

00007670 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    7670:	b580      	push	{r7, lr}
    7672:	b084      	sub	sp, #16
    7674:	af00      	add	r7, sp, #0
    7676:	6078      	str	r0, [r7, #4]
    7678:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    767a:	2103      	movs	r1, #3
    767c:	6878      	ldr	r0, [r7, #4]
    767e:	4b07      	ldr	r3, [pc, #28]	; (769c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    7680:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7682:	687b      	ldr	r3, [r7, #4]
    7684:	681b      	ldr	r3, [r3, #0]
    7686:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7688:	68fa      	ldr	r2, [r7, #12]
    768a:	683b      	ldr	r3, [r7, #0]
    768c:	4013      	ands	r3, r2
    768e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7690:	68fb      	ldr	r3, [r7, #12]
}
    7692:	4618      	mov	r0, r3
    7694:	3710      	adds	r7, #16
    7696:	46bd      	mov	sp, r7
    7698:	bd80      	pop	{r7, pc}
    769a:	bf00      	nop
    769c:	00007341 	.word	0x00007341

000076a0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    76a0:	b580      	push	{r7, lr}
    76a2:	b082      	sub	sp, #8
    76a4:	af00      	add	r7, sp, #0
    76a6:	6078      	str	r0, [r7, #4]
    76a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	683a      	ldr	r2, [r7, #0]
    76ae:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    76b0:	2103      	movs	r1, #3
    76b2:	6878      	ldr	r0, [r7, #4]
    76b4:	4b02      	ldr	r3, [pc, #8]	; (76c0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    76b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    76b8:	bf00      	nop
    76ba:	3708      	adds	r7, #8
    76bc:	46bd      	mov	sp, r7
    76be:	bd80      	pop	{r7, pc}
    76c0:	00007341 	.word	0x00007341

000076c4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    76c4:	b580      	push	{r7, lr}
    76c6:	b084      	sub	sp, #16
    76c8:	af00      	add	r7, sp, #0
    76ca:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    76cc:	2103      	movs	r1, #3
    76ce:	6878      	ldr	r0, [r7, #4]
    76d0:	4b09      	ldr	r3, [pc, #36]	; (76f8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    76d2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	681b      	ldr	r3, [r3, #0]
    76d8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    76da:	68fb      	ldr	r3, [r7, #12]
    76dc:	085b      	lsrs	r3, r3, #1
    76de:	f003 0301 	and.w	r3, r3, #1
    76e2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    76e4:	68fb      	ldr	r3, [r7, #12]
    76e6:	2b00      	cmp	r3, #0
    76e8:	bf14      	ite	ne
    76ea:	2301      	movne	r3, #1
    76ec:	2300      	moveq	r3, #0
    76ee:	b2db      	uxtb	r3, r3
}
    76f0:	4618      	mov	r0, r3
    76f2:	3710      	adds	r7, #16
    76f4:	46bd      	mov	sp, r7
    76f6:	bd80      	pop	{r7, pc}
    76f8:	0000738d 	.word	0x0000738d

000076fc <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    76fc:	b580      	push	{r7, lr}
    76fe:	b082      	sub	sp, #8
    7700:	af00      	add	r7, sp, #0
    7702:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7704:	687b      	ldr	r3, [r7, #4]
    7706:	681b      	ldr	r3, [r3, #0]
    7708:	f023 0202 	bic.w	r2, r3, #2
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7710:	2103      	movs	r1, #3
    7712:	6878      	ldr	r0, [r7, #4]
    7714:	4b02      	ldr	r3, [pc, #8]	; (7720 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7716:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7718:	bf00      	nop
    771a:	3708      	adds	r7, #8
    771c:	46bd      	mov	sp, r7
    771e:	bd80      	pop	{r7, pc}
    7720:	0000738d 	.word	0x0000738d

00007724 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7724:	b580      	push	{r7, lr}
    7726:	b084      	sub	sp, #16
    7728:	af00      	add	r7, sp, #0
    772a:	6078      	str	r0, [r7, #4]
    772c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    772e:	2103      	movs	r1, #3
    7730:	6878      	ldr	r0, [r7, #4]
    7732:	4b07      	ldr	r3, [pc, #28]	; (7750 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7734:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7736:	687b      	ldr	r3, [r7, #4]
    7738:	681b      	ldr	r3, [r3, #0]
    773a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    773c:	68fa      	ldr	r2, [r7, #12]
    773e:	683b      	ldr	r3, [r7, #0]
    7740:	4013      	ands	r3, r2
    7742:	60fb      	str	r3, [r7, #12]
	return tmp;
    7744:	68fb      	ldr	r3, [r7, #12]
}
    7746:	4618      	mov	r0, r3
    7748:	3710      	adds	r7, #16
    774a:	46bd      	mov	sp, r7
    774c:	bd80      	pop	{r7, pc}
    774e:	bf00      	nop
    7750:	0000738d 	.word	0x0000738d

00007754 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7754:	b580      	push	{r7, lr}
    7756:	b082      	sub	sp, #8
    7758:	af00      	add	r7, sp, #0
    775a:	6078      	str	r0, [r7, #4]
    775c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    775e:	687b      	ldr	r3, [r7, #4]
    7760:	683a      	ldr	r2, [r7, #0]
    7762:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7764:	2103      	movs	r1, #3
    7766:	6878      	ldr	r0, [r7, #4]
    7768:	4b02      	ldr	r3, [pc, #8]	; (7774 <hri_sercomspi_write_CTRLA_reg+0x20>)
    776a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    776c:	bf00      	nop
    776e:	3708      	adds	r7, #8
    7770:	46bd      	mov	sp, r7
    7772:	bd80      	pop	{r7, pc}
    7774:	0000738d 	.word	0x0000738d

00007778 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    7778:	b580      	push	{r7, lr}
    777a:	b082      	sub	sp, #8
    777c:	af00      	add	r7, sp, #0
    777e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7780:	687b      	ldr	r3, [r7, #4]
    7782:	685b      	ldr	r3, [r3, #4]
    7784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7788:	687b      	ldr	r3, [r7, #4]
    778a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    778c:	2104      	movs	r1, #4
    778e:	6878      	ldr	r0, [r7, #4]
    7790:	4b02      	ldr	r3, [pc, #8]	; (779c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    7792:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7794:	bf00      	nop
    7796:	3708      	adds	r7, #8
    7798:	46bd      	mov	sp, r7
    779a:	bd80      	pop	{r7, pc}
    779c:	00007341 	.word	0x00007341

000077a0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    77a0:	b580      	push	{r7, lr}
    77a2:	b082      	sub	sp, #8
    77a4:	af00      	add	r7, sp, #0
    77a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    77a8:	687b      	ldr	r3, [r7, #4]
    77aa:	685b      	ldr	r3, [r3, #4]
    77ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    77b0:	687b      	ldr	r3, [r7, #4]
    77b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    77b4:	2104      	movs	r1, #4
    77b6:	6878      	ldr	r0, [r7, #4]
    77b8:	4b02      	ldr	r3, [pc, #8]	; (77c4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    77ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    77bc:	bf00      	nop
    77be:	3708      	adds	r7, #8
    77c0:	46bd      	mov	sp, r7
    77c2:	bd80      	pop	{r7, pc}
    77c4:	00007341 	.word	0x00007341

000077c8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    77c8:	b580      	push	{r7, lr}
    77ca:	b082      	sub	sp, #8
    77cc:	af00      	add	r7, sp, #0
    77ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    77d0:	687b      	ldr	r3, [r7, #4]
    77d2:	685b      	ldr	r3, [r3, #4]
    77d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    77dc:	2104      	movs	r1, #4
    77de:	6878      	ldr	r0, [r7, #4]
    77e0:	4b02      	ldr	r3, [pc, #8]	; (77ec <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    77e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    77e4:	bf00      	nop
    77e6:	3708      	adds	r7, #8
    77e8:	46bd      	mov	sp, r7
    77ea:	bd80      	pop	{r7, pc}
    77ec:	00007341 	.word	0x00007341

000077f0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    77f0:	b580      	push	{r7, lr}
    77f2:	b082      	sub	sp, #8
    77f4:	af00      	add	r7, sp, #0
    77f6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    77f8:	687b      	ldr	r3, [r7, #4]
    77fa:	685b      	ldr	r3, [r3, #4]
    77fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    7800:	687b      	ldr	r3, [r7, #4]
    7802:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7804:	2104      	movs	r1, #4
    7806:	6878      	ldr	r0, [r7, #4]
    7808:	4b02      	ldr	r3, [pc, #8]	; (7814 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    780a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    780c:	bf00      	nop
    780e:	3708      	adds	r7, #8
    7810:	46bd      	mov	sp, r7
    7812:	bd80      	pop	{r7, pc}
    7814:	00007341 	.word	0x00007341

00007818 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    7818:	b580      	push	{r7, lr}
    781a:	b082      	sub	sp, #8
    781c:	af00      	add	r7, sp, #0
    781e:	6078      	str	r0, [r7, #4]
    7820:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7822:	687b      	ldr	r3, [r7, #4]
    7824:	685a      	ldr	r2, [r3, #4]
    7826:	683b      	ldr	r3, [r7, #0]
    7828:	041b      	lsls	r3, r3, #16
    782a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    782e:	431a      	orrs	r2, r3
    7830:	687b      	ldr	r3, [r7, #4]
    7832:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7834:	2104      	movs	r1, #4
    7836:	6878      	ldr	r0, [r7, #4]
    7838:	4b02      	ldr	r3, [pc, #8]	; (7844 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    783a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    783c:	bf00      	nop
    783e:	3708      	adds	r7, #8
    7840:	46bd      	mov	sp, r7
    7842:	bd80      	pop	{r7, pc}
    7844:	00007341 	.word	0x00007341

00007848 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    7848:	b580      	push	{r7, lr}
    784a:	b082      	sub	sp, #8
    784c:	af00      	add	r7, sp, #0
    784e:	6078      	str	r0, [r7, #4]
    7850:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	683a      	ldr	r2, [r7, #0]
    7856:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7858:	2104      	movs	r1, #4
    785a:	6878      	ldr	r0, [r7, #4]
    785c:	4b02      	ldr	r3, [pc, #8]	; (7868 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    785e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7860:	bf00      	nop
    7862:	3708      	adds	r7, #8
    7864:	46bd      	mov	sp, r7
    7866:	bd80      	pop	{r7, pc}
    7868:	00007341 	.word	0x00007341

0000786c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    786c:	b580      	push	{r7, lr}
    786e:	b082      	sub	sp, #8
    7870:	af00      	add	r7, sp, #0
    7872:	6078      	str	r0, [r7, #4]
    7874:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	683a      	ldr	r2, [r7, #0]
    787a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    787c:	2117      	movs	r1, #23
    787e:	6878      	ldr	r0, [r7, #4]
    7880:	4b02      	ldr	r3, [pc, #8]	; (788c <hri_sercomspi_write_CTRLB_reg+0x20>)
    7882:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7884:	bf00      	nop
    7886:	3708      	adds	r7, #8
    7888:	46bd      	mov	sp, r7
    788a:	bd80      	pop	{r7, pc}
    788c:	0000738d 	.word	0x0000738d

00007890 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    7890:	b480      	push	{r7}
    7892:	b083      	sub	sp, #12
    7894:	af00      	add	r7, sp, #0
    7896:	6078      	str	r0, [r7, #4]
    7898:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	683a      	ldr	r2, [r7, #0]
    789e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    78a0:	bf00      	nop
    78a2:	370c      	adds	r7, #12
    78a4:	46bd      	mov	sp, r7
    78a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    78aa:	4770      	bx	lr

000078ac <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    78ac:	b480      	push	{r7}
    78ae:	b083      	sub	sp, #12
    78b0:	af00      	add	r7, sp, #0
    78b2:	6078      	str	r0, [r7, #4]
    78b4:	460b      	mov	r3, r1
    78b6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    78b8:	687b      	ldr	r3, [r7, #4]
    78ba:	78fa      	ldrb	r2, [r7, #3]
    78bc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    78be:	bf00      	nop
    78c0:	370c      	adds	r7, #12
    78c2:	46bd      	mov	sp, r7
    78c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    78c8:	4770      	bx	lr
	...

000078cc <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    78cc:	b580      	push	{r7, lr}
    78ce:	b084      	sub	sp, #16
    78d0:	af00      	add	r7, sp, #0
    78d2:	6078      	str	r0, [r7, #4]
    78d4:	460b      	mov	r3, r1
    78d6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    78d8:	687b      	ldr	r3, [r7, #4]
    78da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78dc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    78de:	68fb      	ldr	r3, [r7, #12]
    78e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    78e4:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    78e6:	78fb      	ldrb	r3, [r7, #3]
    78e8:	039b      	lsls	r3, r3, #14
    78ea:	461a      	mov	r2, r3
    78ec:	68fb      	ldr	r3, [r7, #12]
    78ee:	4313      	orrs	r3, r2
    78f0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    78f2:	687b      	ldr	r3, [r7, #4]
    78f4:	68fa      	ldr	r2, [r7, #12]
    78f6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    78f8:	2104      	movs	r1, #4
    78fa:	6878      	ldr	r0, [r7, #4]
    78fc:	4b02      	ldr	r3, [pc, #8]	; (7908 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    78fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7900:	bf00      	nop
    7902:	3710      	adds	r7, #16
    7904:	46bd      	mov	sp, r7
    7906:	bd80      	pop	{r7, pc}
    7908:	00007341 	.word	0x00007341

0000790c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    790c:	b580      	push	{r7, lr}
    790e:	b082      	sub	sp, #8
    7910:	af00      	add	r7, sp, #0
    7912:	6078      	str	r0, [r7, #4]
    7914:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7916:	687b      	ldr	r3, [r7, #4]
    7918:	683a      	ldr	r2, [r7, #0]
    791a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    791c:	2104      	movs	r1, #4
    791e:	6878      	ldr	r0, [r7, #4]
    7920:	4b02      	ldr	r3, [pc, #8]	; (792c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    7922:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7924:	bf00      	nop
    7926:	3708      	adds	r7, #8
    7928:	46bd      	mov	sp, r7
    792a:	bd80      	pop	{r7, pc}
    792c:	00007341 	.word	0x00007341

00007930 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    7930:	b580      	push	{r7, lr}
    7932:	b082      	sub	sp, #8
    7934:	af00      	add	r7, sp, #0
    7936:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7938:	2104      	movs	r1, #4
    793a:	6878      	ldr	r0, [r7, #4]
    793c:	4b03      	ldr	r3, [pc, #12]	; (794c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    793e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7940:	687b      	ldr	r3, [r7, #4]
    7942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7944:	4618      	mov	r0, r3
    7946:	3708      	adds	r7, #8
    7948:	46bd      	mov	sp, r7
    794a:	bd80      	pop	{r7, pc}
    794c:	00007341 	.word	0x00007341

00007950 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    7950:	b480      	push	{r7}
    7952:	b083      	sub	sp, #12
    7954:	af00      	add	r7, sp, #0
    7956:	6078      	str	r0, [r7, #4]
    7958:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	683a      	ldr	r2, [r7, #0]
    795e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7960:	bf00      	nop
    7962:	370c      	adds	r7, #12
    7964:	46bd      	mov	sp, r7
    7966:	f85d 7b04 	ldr.w	r7, [sp], #4
    796a:	4770      	bx	lr

0000796c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    796c:	b580      	push	{r7, lr}
    796e:	b082      	sub	sp, #8
    7970:	af00      	add	r7, sp, #0
    7972:	6078      	str	r0, [r7, #4]
    7974:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7976:	687b      	ldr	r3, [r7, #4]
    7978:	683a      	ldr	r2, [r7, #0]
    797a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    797c:	2104      	movs	r1, #4
    797e:	6878      	ldr	r0, [r7, #4]
    7980:	4b02      	ldr	r3, [pc, #8]	; (798c <hri_sercomi2cm_write_DATA_reg+0x20>)
    7982:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7984:	bf00      	nop
    7986:	3708      	adds	r7, #8
    7988:	46bd      	mov	sp, r7
    798a:	bd80      	pop	{r7, pc}
    798c:	00007341 	.word	0x00007341

00007990 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    7990:	b580      	push	{r7, lr}
    7992:	b082      	sub	sp, #8
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7998:	2104      	movs	r1, #4
    799a:	6878      	ldr	r0, [r7, #4]
    799c:	4b03      	ldr	r3, [pc, #12]	; (79ac <hri_sercomi2cm_read_DATA_reg+0x1c>)
    799e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    79a0:	687b      	ldr	r3, [r7, #4]
    79a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    79a4:	4618      	mov	r0, r3
    79a6:	3708      	adds	r7, #8
    79a8:	46bd      	mov	sp, r7
    79aa:	bd80      	pop	{r7, pc}
    79ac:	00007341 	.word	0x00007341

000079b0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    79b0:	b480      	push	{r7}
    79b2:	b083      	sub	sp, #12
    79b4:	af00      	add	r7, sp, #0
    79b6:	6078      	str	r0, [r7, #4]
    79b8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	683a      	ldr	r2, [r7, #0]
    79be:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    79c0:	bf00      	nop
    79c2:	370c      	adds	r7, #12
    79c4:	46bd      	mov	sp, r7
    79c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ca:	4770      	bx	lr

000079cc <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    79cc:	b480      	push	{r7}
    79ce:	b083      	sub	sp, #12
    79d0:	af00      	add	r7, sp, #0
    79d2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    79d8:	4618      	mov	r0, r3
    79da:	370c      	adds	r7, #12
    79dc:	46bd      	mov	sp, r7
    79de:	f85d 7b04 	ldr.w	r7, [sp], #4
    79e2:	4770      	bx	lr

000079e4 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    79e4:	b480      	push	{r7}
    79e6:	b083      	sub	sp, #12
    79e8:	af00      	add	r7, sp, #0
    79ea:	6078      	str	r0, [r7, #4]
    79ec:	460b      	mov	r3, r1
    79ee:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	78fa      	ldrb	r2, [r7, #3]
    79f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    79f8:	bf00      	nop
    79fa:	370c      	adds	r7, #12
    79fc:	46bd      	mov	sp, r7
    79fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a02:	4770      	bx	lr

00007a04 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    7a04:	b480      	push	{r7}
    7a06:	b083      	sub	sp, #12
    7a08:	af00      	add	r7, sp, #0
    7a0a:	6078      	str	r0, [r7, #4]
    7a0c:	460b      	mov	r3, r1
    7a0e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7a10:	687b      	ldr	r3, [r7, #4]
    7a12:	887a      	ldrh	r2, [r7, #2]
    7a14:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7a16:	bf00      	nop
    7a18:	370c      	adds	r7, #12
    7a1a:	46bd      	mov	sp, r7
    7a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a20:	4770      	bx	lr
	...

00007a24 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    7a24:	b580      	push	{r7, lr}
    7a26:	b082      	sub	sp, #8
    7a28:	af00      	add	r7, sp, #0
    7a2a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7a2c:	2104      	movs	r1, #4
    7a2e:	6878      	ldr	r0, [r7, #4]
    7a30:	4b06      	ldr	r3, [pc, #24]	; (7a4c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    7a32:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	8b5b      	ldrh	r3, [r3, #26]
    7a38:	b29b      	uxth	r3, r3
    7a3a:	091b      	lsrs	r3, r3, #4
    7a3c:	b29b      	uxth	r3, r3
    7a3e:	f003 0303 	and.w	r3, r3, #3
    7a42:	b29b      	uxth	r3, r3
}
    7a44:	4618      	mov	r0, r3
    7a46:	3708      	adds	r7, #8
    7a48:	46bd      	mov	sp, r7
    7a4a:	bd80      	pop	{r7, pc}
    7a4c:	00007341 	.word	0x00007341

00007a50 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	b082      	sub	sp, #8
    7a54:	af00      	add	r7, sp, #0
    7a56:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7a58:	2104      	movs	r1, #4
    7a5a:	6878      	ldr	r0, [r7, #4]
    7a5c:	4b04      	ldr	r3, [pc, #16]	; (7a70 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    7a5e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	8b5b      	ldrh	r3, [r3, #26]
    7a64:	b29b      	uxth	r3, r3
}
    7a66:	4618      	mov	r0, r3
    7a68:	3708      	adds	r7, #8
    7a6a:	46bd      	mov	sp, r7
    7a6c:	bd80      	pop	{r7, pc}
    7a6e:	bf00      	nop
    7a70:	00007341 	.word	0x00007341

00007a74 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    7a74:	b580      	push	{r7, lr}
    7a76:	b082      	sub	sp, #8
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
    7a7c:	460b      	mov	r3, r1
    7a7e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	887a      	ldrh	r2, [r7, #2]
    7a84:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7a86:	2104      	movs	r1, #4
    7a88:	6878      	ldr	r0, [r7, #4]
    7a8a:	4b03      	ldr	r3, [pc, #12]	; (7a98 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    7a8c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7a8e:	bf00      	nop
    7a90:	3708      	adds	r7, #8
    7a92:	46bd      	mov	sp, r7
    7a94:	bd80      	pop	{r7, pc}
    7a96:	bf00      	nop
    7a98:	00007341 	.word	0x00007341

00007a9c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    7a9c:	b4b0      	push	{r4, r5, r7}
    7a9e:	b08d      	sub	sp, #52	; 0x34
    7aa0:	af00      	add	r7, sp, #0
    7aa2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7aa4:	4b13      	ldr	r3, [pc, #76]	; (7af4 <_sercom_get_hardware_index+0x58>)
    7aa6:	f107 040c 	add.w	r4, r7, #12
    7aaa:	461d      	mov	r5, r3
    7aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7ab0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7ab8:	2300      	movs	r3, #0
    7aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    7abc:	e010      	b.n	7ae0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ac0:	009b      	lsls	r3, r3, #2
    7ac2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7ac6:	4413      	add	r3, r2
    7ac8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7acc:	461a      	mov	r2, r3
    7ace:	687b      	ldr	r3, [r7, #4]
    7ad0:	429a      	cmp	r2, r3
    7ad2:	d102      	bne.n	7ada <_sercom_get_hardware_index+0x3e>
			return i;
    7ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ad6:	b2db      	uxtb	r3, r3
    7ad8:	e006      	b.n	7ae8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7adc:	3301      	adds	r3, #1
    7ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    7ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ae2:	2b07      	cmp	r3, #7
    7ae4:	d9eb      	bls.n	7abe <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    7ae6:	2300      	movs	r3, #0
}
    7ae8:	4618      	mov	r0, r3
    7aea:	3734      	adds	r7, #52	; 0x34
    7aec:	46bd      	mov	sp, r7
    7aee:	bcb0      	pop	{r4, r5, r7}
    7af0:	4770      	bx	lr
    7af2:	bf00      	nop
    7af4:	000115b4 	.word	0x000115b4

00007af8 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    7af8:	b480      	push	{r7}
    7afa:	b083      	sub	sp, #12
    7afc:	af00      	add	r7, sp, #0
    7afe:	6078      	str	r0, [r7, #4]
    7b00:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    7b08:	d102      	bne.n	7b10 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    7b0a:	4a0b      	ldr	r2, [pc, #44]	; (7b38 <_sercom_init_irq_param+0x40>)
    7b0c:	683b      	ldr	r3, [r7, #0]
    7b0e:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	4a0a      	ldr	r2, [pc, #40]	; (7b3c <_sercom_init_irq_param+0x44>)
    7b14:	4293      	cmp	r3, r2
    7b16:	d102      	bne.n	7b1e <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    7b18:	4a09      	ldr	r2, [pc, #36]	; (7b40 <_sercom_init_irq_param+0x48>)
    7b1a:	683b      	ldr	r3, [r7, #0]
    7b1c:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	4a08      	ldr	r2, [pc, #32]	; (7b44 <_sercom_init_irq_param+0x4c>)
    7b22:	4293      	cmp	r3, r2
    7b24:	d102      	bne.n	7b2c <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    7b26:	4a08      	ldr	r2, [pc, #32]	; (7b48 <_sercom_init_irq_param+0x50>)
    7b28:	683b      	ldr	r3, [r7, #0]
    7b2a:	6013      	str	r3, [r2, #0]
	}
}
    7b2c:	bf00      	nop
    7b2e:	370c      	adds	r7, #12
    7b30:	46bd      	mov	sp, r7
    7b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b36:	4770      	bx	lr
    7b38:	20001cac 	.word	0x20001cac
    7b3c:	43000400 	.word	0x43000400
    7b40:	20001cb0 	.word	0x20001cb0
    7b44:	43000c00 	.word	0x43000c00
    7b48:	20001cb4 	.word	0x20001cb4

00007b4c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    7b4c:	b580      	push	{r7, lr}
    7b4e:	b084      	sub	sp, #16
    7b50:	af00      	add	r7, sp, #0
    7b52:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7b54:	6878      	ldr	r0, [r7, #4]
    7b56:	4b13      	ldr	r3, [pc, #76]	; (7ba4 <_get_i2cm_index+0x58>)
    7b58:	4798      	blx	r3
    7b5a:	4603      	mov	r3, r0
    7b5c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7b5e:	2300      	movs	r3, #0
    7b60:	73fb      	strb	r3, [r7, #15]
    7b62:	e010      	b.n	7b86 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    7b64:	7bfa      	ldrb	r2, [r7, #15]
    7b66:	4910      	ldr	r1, [pc, #64]	; (7ba8 <_get_i2cm_index+0x5c>)
    7b68:	4613      	mov	r3, r2
    7b6a:	005b      	lsls	r3, r3, #1
    7b6c:	4413      	add	r3, r2
    7b6e:	00db      	lsls	r3, r3, #3
    7b70:	440b      	add	r3, r1
    7b72:	781b      	ldrb	r3, [r3, #0]
    7b74:	7bba      	ldrb	r2, [r7, #14]
    7b76:	429a      	cmp	r2, r3
    7b78:	d102      	bne.n	7b80 <_get_i2cm_index+0x34>
			return i;
    7b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7b7e:	e00d      	b.n	7b9c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7b80:	7bfb      	ldrb	r3, [r7, #15]
    7b82:	3301      	adds	r3, #1
    7b84:	73fb      	strb	r3, [r7, #15]
    7b86:	7bfb      	ldrb	r3, [r7, #15]
    7b88:	2b01      	cmp	r3, #1
    7b8a:	d9eb      	bls.n	7b64 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    7b8c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    7b90:	4906      	ldr	r1, [pc, #24]	; (7bac <_get_i2cm_index+0x60>)
    7b92:	2000      	movs	r0, #0
    7b94:	4b06      	ldr	r3, [pc, #24]	; (7bb0 <_get_i2cm_index+0x64>)
    7b96:	4798      	blx	r3
	return -1;
    7b98:	f04f 33ff 	mov.w	r3, #4294967295
}
    7b9c:	4618      	mov	r0, r3
    7b9e:	3710      	adds	r7, #16
    7ba0:	46bd      	mov	sp, r7
    7ba2:	bd80      	pop	{r7, pc}
    7ba4:	00007a9d 	.word	0x00007a9d
    7ba8:	20000018 	.word	0x20000018
    7bac:	00011598 	.word	0x00011598
    7bb0:	00004f51 	.word	0x00004f51

00007bb4 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    7bb4:	b580      	push	{r7, lr}
    7bb6:	b082      	sub	sp, #8
    7bb8:	af00      	add	r7, sp, #0
    7bba:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    7bbc:	2103      	movs	r1, #3
    7bbe:	6878      	ldr	r0, [r7, #4]
    7bc0:	4b02      	ldr	r3, [pc, #8]	; (7bcc <_sercom_i2c_send_stop+0x18>)
    7bc2:	4798      	blx	r3
}
    7bc4:	bf00      	nop
    7bc6:	3708      	adds	r7, #8
    7bc8:	46bd      	mov	sp, r7
    7bca:	bd80      	pop	{r7, pc}
    7bcc:	00007819 	.word	0x00007819

00007bd0 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    7bd0:	b590      	push	{r4, r7, lr}
    7bd2:	b087      	sub	sp, #28
    7bd4:	af00      	add	r7, sp, #0
    7bd6:	60f8      	str	r0, [r7, #12]
    7bd8:	60b9      	str	r1, [r7, #8]
    7bda:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    7bdc:	68f8      	ldr	r0, [r7, #12]
    7bde:	4b7d      	ldr	r3, [pc, #500]	; (7dd4 <_sercom_i2c_sync_analyse_flags+0x204>)
    7be0:	4798      	blx	r3
    7be2:	4603      	mov	r3, r0
    7be4:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    7be6:	68f8      	ldr	r0, [r7, #12]
    7be8:	4b7b      	ldr	r3, [pc, #492]	; (7dd8 <_sercom_i2c_sync_analyse_flags+0x208>)
    7bea:	4798      	blx	r3
    7bec:	4603      	mov	r3, r0
    7bee:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    7bf0:	68bb      	ldr	r3, [r7, #8]
    7bf2:	f003 0301 	and.w	r3, r3, #1
    7bf6:	2b00      	cmp	r3, #0
    7bf8:	f000 8095 	beq.w	7d26 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    7bfc:	8a7b      	ldrh	r3, [r7, #18]
    7bfe:	f003 0302 	and.w	r3, r3, #2
    7c02:	2b00      	cmp	r3, #0
    7c04:	d01d      	beq.n	7c42 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    7c06:	68f8      	ldr	r0, [r7, #12]
    7c08:	4b74      	ldr	r3, [pc, #464]	; (7ddc <_sercom_i2c_sync_analyse_flags+0x20c>)
    7c0a:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	885b      	ldrh	r3, [r3, #2]
    7c10:	b29b      	uxth	r3, r3
    7c12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7c16:	b29a      	uxth	r2, r3
    7c18:	687b      	ldr	r3, [r7, #4]
    7c1a:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	885b      	ldrh	r3, [r3, #2]
    7c20:	b29b      	uxth	r3, r3
    7c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7c26:	b29a      	uxth	r2, r3
    7c28:	687b      	ldr	r3, [r7, #4]
    7c2a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    7c2c:	8a7b      	ldrh	r3, [r7, #18]
    7c2e:	f003 0301 	and.w	r3, r3, #1
    7c32:	2b00      	cmp	r3, #0
    7c34:	d002      	beq.n	7c3c <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    7c36:	f06f 0304 	mvn.w	r3, #4
    7c3a:	e0c6      	b.n	7dca <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    7c3c:	f06f 0303 	mvn.w	r3, #3
    7c40:	e0c3      	b.n	7dca <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    7c42:	8a7b      	ldrh	r3, [r7, #18]
    7c44:	f003 0304 	and.w	r3, r3, #4
    7c48:	2b00      	cmp	r3, #0
    7c4a:	d01f      	beq.n	7c8c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	685b      	ldr	r3, [r3, #4]
    7c50:	2b00      	cmp	r3, #0
    7c52:	dd07      	ble.n	7c64 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    7c54:	687b      	ldr	r3, [r7, #4]
    7c56:	885b      	ldrh	r3, [r3, #2]
    7c58:	b29b      	uxth	r3, r3
    7c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    7c5e:	b29a      	uxth	r2, r3
    7c60:	687b      	ldr	r3, [r7, #4]
    7c62:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    7c64:	687b      	ldr	r3, [r7, #4]
    7c66:	885b      	ldrh	r3, [r3, #2]
    7c68:	b29b      	uxth	r3, r3
    7c6a:	b21b      	sxth	r3, r3
    7c6c:	2b00      	cmp	r3, #0
    7c6e:	da02      	bge.n	7c76 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    7c70:	68f8      	ldr	r0, [r7, #12]
    7c72:	4b5b      	ldr	r3, [pc, #364]	; (7de0 <_sercom_i2c_sync_analyse_flags+0x210>)
    7c74:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7c76:	687b      	ldr	r3, [r7, #4]
    7c78:	885b      	ldrh	r3, [r3, #2]
    7c7a:	b29b      	uxth	r3, r3
    7c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7c80:	b29a      	uxth	r2, r3
    7c82:	687b      	ldr	r3, [r7, #4]
    7c84:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    7c86:	f06f 0301 	mvn.w	r3, #1
    7c8a:	e09e      	b.n	7dca <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	885b      	ldrh	r3, [r3, #2]
    7c90:	b29b      	uxth	r3, r3
    7c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7c96:	2b00      	cmp	r3, #0
    7c98:	d01c      	beq.n	7cd4 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	881b      	ldrh	r3, [r3, #0]
    7c9e:	121b      	asrs	r3, r3, #8
    7ca0:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7ca2:	f003 0406 	and.w	r4, r3, #6
    7ca6:	68f8      	ldr	r0, [r7, #12]
    7ca8:	4b4e      	ldr	r3, [pc, #312]	; (7de4 <_sercom_i2c_sync_analyse_flags+0x214>)
    7caa:	4798      	blx	r3
    7cac:	4603      	mov	r3, r0
    7cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7cb2:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    7cb4:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    7cb8:	4619      	mov	r1, r3
    7cba:	68f8      	ldr	r0, [r7, #12]
    7cbc:	4b4a      	ldr	r3, [pc, #296]	; (7de8 <_sercom_i2c_sync_analyse_flags+0x218>)
    7cbe:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    7cc0:	687b      	ldr	r3, [r7, #4]
    7cc2:	885b      	ldrh	r3, [r3, #2]
    7cc4:	b29b      	uxth	r3, r3
    7cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    7cca:	b29a      	uxth	r2, r3
    7ccc:	687b      	ldr	r3, [r7, #4]
    7cce:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    7cd0:	2300      	movs	r3, #0
    7cd2:	e07a      	b.n	7dca <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	685b      	ldr	r3, [r3, #4]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d111      	bne.n	7d00 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    7cdc:	687b      	ldr	r3, [r7, #4]
    7cde:	885b      	ldrh	r3, [r3, #2]
    7ce0:	b29b      	uxth	r3, r3
    7ce2:	b21b      	sxth	r3, r3
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	da02      	bge.n	7cee <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    7ce8:	68f8      	ldr	r0, [r7, #12]
    7cea:	4b3d      	ldr	r3, [pc, #244]	; (7de0 <_sercom_i2c_sync_analyse_flags+0x210>)
    7cec:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7cee:	687b      	ldr	r3, [r7, #4]
    7cf0:	885b      	ldrh	r3, [r3, #2]
    7cf2:	b29b      	uxth	r3, r3
    7cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7cf8:	b29a      	uxth	r2, r3
    7cfa:	687b      	ldr	r3, [r7, #4]
    7cfc:	805a      	strh	r2, [r3, #2]
    7cfe:	e010      	b.n	7d22 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    7d00:	687b      	ldr	r3, [r7, #4]
    7d02:	689b      	ldr	r3, [r3, #8]
    7d04:	781b      	ldrb	r3, [r3, #0]
    7d06:	4619      	mov	r1, r3
    7d08:	68f8      	ldr	r0, [r7, #12]
    7d0a:	4b38      	ldr	r3, [pc, #224]	; (7dec <_sercom_i2c_sync_analyse_flags+0x21c>)
    7d0c:	4798      	blx	r3
				msg->buffer++;
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	689b      	ldr	r3, [r3, #8]
    7d12:	1c5a      	adds	r2, r3, #1
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	609a      	str	r2, [r3, #8]
				msg->len--;
    7d18:	687b      	ldr	r3, [r7, #4]
    7d1a:	685b      	ldr	r3, [r3, #4]
    7d1c:	1e5a      	subs	r2, r3, #1
    7d1e:	687b      	ldr	r3, [r7, #4]
    7d20:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    7d22:	2300      	movs	r3, #0
    7d24:	e051      	b.n	7dca <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    7d26:	68bb      	ldr	r3, [r7, #8]
    7d28:	f003 0302 	and.w	r3, r3, #2
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	d04b      	beq.n	7dc8 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    7d30:	687b      	ldr	r3, [r7, #4]
    7d32:	685b      	ldr	r3, [r3, #4]
    7d34:	2b00      	cmp	r3, #0
    7d36:	d041      	beq.n	7dbc <_sercom_i2c_sync_analyse_flags+0x1ec>
    7d38:	8a7b      	ldrh	r3, [r7, #18]
    7d3a:	f003 0304 	and.w	r3, r3, #4
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d13c      	bne.n	7dbc <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    7d42:	687b      	ldr	r3, [r7, #4]
    7d44:	685b      	ldr	r3, [r3, #4]
    7d46:	1e5a      	subs	r2, r3, #1
    7d48:	687b      	ldr	r3, [r7, #4]
    7d4a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    7d4c:	687b      	ldr	r3, [r7, #4]
    7d4e:	685b      	ldr	r3, [r3, #4]
    7d50:	2b00      	cmp	r3, #0
    7d52:	d102      	bne.n	7d5a <_sercom_i2c_sync_analyse_flags+0x18a>
    7d54:	697b      	ldr	r3, [r7, #20]
    7d56:	2b00      	cmp	r3, #0
    7d58:	d006      	beq.n	7d68 <_sercom_i2c_sync_analyse_flags+0x198>
    7d5a:	687b      	ldr	r3, [r7, #4]
    7d5c:	685b      	ldr	r3, [r3, #4]
    7d5e:	2b01      	cmp	r3, #1
    7d60:	d105      	bne.n	7d6e <_sercom_i2c_sync_analyse_flags+0x19e>
    7d62:	697b      	ldr	r3, [r7, #20]
    7d64:	2b00      	cmp	r3, #0
    7d66:	d002      	beq.n	7d6e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    7d68:	68f8      	ldr	r0, [r7, #12]
    7d6a:	4b21      	ldr	r3, [pc, #132]	; (7df0 <_sercom_i2c_sync_analyse_flags+0x220>)
    7d6c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    7d6e:	687b      	ldr	r3, [r7, #4]
    7d70:	685b      	ldr	r3, [r3, #4]
    7d72:	2b00      	cmp	r3, #0
    7d74:	d113      	bne.n	7d9e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    7d76:	687b      	ldr	r3, [r7, #4]
    7d78:	885b      	ldrh	r3, [r3, #2]
    7d7a:	b29b      	uxth	r3, r3
    7d7c:	b21b      	sxth	r3, r3
    7d7e:	2b00      	cmp	r3, #0
    7d80:	da05      	bge.n	7d8e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    7d82:	68f8      	ldr	r0, [r7, #12]
    7d84:	4b1b      	ldr	r3, [pc, #108]	; (7df4 <_sercom_i2c_sync_analyse_flags+0x224>)
    7d86:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    7d88:	68f8      	ldr	r0, [r7, #12]
    7d8a:	4b15      	ldr	r3, [pc, #84]	; (7de0 <_sercom_i2c_sync_analyse_flags+0x210>)
    7d8c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    7d8e:	687b      	ldr	r3, [r7, #4]
    7d90:	885b      	ldrh	r3, [r3, #2]
    7d92:	b29b      	uxth	r3, r3
    7d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7d98:	b29a      	uxth	r2, r3
    7d9a:	687b      	ldr	r3, [r7, #4]
    7d9c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    7d9e:	687b      	ldr	r3, [r7, #4]
    7da0:	689c      	ldr	r4, [r3, #8]
    7da2:	1c62      	adds	r2, r4, #1
    7da4:	687b      	ldr	r3, [r7, #4]
    7da6:	609a      	str	r2, [r3, #8]
    7da8:	68f8      	ldr	r0, [r7, #12]
    7daa:	4b13      	ldr	r3, [pc, #76]	; (7df8 <_sercom_i2c_sync_analyse_flags+0x228>)
    7dac:	4798      	blx	r3
    7dae:	4603      	mov	r3, r0
    7db0:	b2db      	uxtb	r3, r3
    7db2:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7db4:	68f8      	ldr	r0, [r7, #12]
    7db6:	4b11      	ldr	r3, [pc, #68]	; (7dfc <_sercom_i2c_sync_analyse_flags+0x22c>)
    7db8:	4798      	blx	r3
    7dba:	e005      	b.n	7dc8 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    7dbc:	68f8      	ldr	r0, [r7, #12]
    7dbe:	4b0f      	ldr	r3, [pc, #60]	; (7dfc <_sercom_i2c_sync_analyse_flags+0x22c>)
    7dc0:	4798      	blx	r3
			return I2C_NACK;
    7dc2:	f06f 0301 	mvn.w	r3, #1
    7dc6:	e000      	b.n	7dca <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    7dc8:	2300      	movs	r3, #0
}
    7dca:	4618      	mov	r0, r3
    7dcc:	371c      	adds	r7, #28
    7dce:	46bd      	mov	sp, r7
    7dd0:	bd90      	pop	{r4, r7, pc}
    7dd2:	bf00      	nop
    7dd4:	00007641 	.word	0x00007641
    7dd8:	00007a51 	.word	0x00007a51
    7ddc:	000073d9 	.word	0x000073d9
    7de0:	00007bb5 	.word	0x00007bb5
    7de4:	00007931 	.word	0x00007931
    7de8:	0000790d 	.word	0x0000790d
    7dec:	0000796d 	.word	0x0000796d
    7df0:	000077c9 	.word	0x000077c9
    7df4:	000077a1 	.word	0x000077a1
    7df8:	00007991 	.word	0x00007991
    7dfc:	000073f3 	.word	0x000073f3

00007e00 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    7e00:	b580      	push	{r7, lr}
    7e02:	b086      	sub	sp, #24
    7e04:	af00      	add	r7, sp, #0
    7e06:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	691b      	ldr	r3, [r3, #16]
    7e0c:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    7e0e:	6938      	ldr	r0, [r7, #16]
    7e10:	4b37      	ldr	r3, [pc, #220]	; (7ef0 <_sercom_i2c_m_irq_handler+0xf0>)
    7e12:	4798      	blx	r3
    7e14:	4603      	mov	r3, r0
    7e16:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    7e18:	2300      	movs	r3, #0
    7e1a:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    7e1c:	687b      	ldr	r3, [r7, #4]
    7e1e:	2b00      	cmp	r3, #0
    7e20:	bf14      	ite	ne
    7e22:	2301      	movne	r3, #1
    7e24:	2300      	moveq	r3, #0
    7e26:	b2db      	uxtb	r3, r3
    7e28:	f240 422a 	movw	r2, #1066	; 0x42a
    7e2c:	4931      	ldr	r1, [pc, #196]	; (7ef4 <_sercom_i2c_m_irq_handler+0xf4>)
    7e2e:	4618      	mov	r0, r3
    7e30:	4b31      	ldr	r3, [pc, #196]	; (7ef8 <_sercom_i2c_m_irq_handler+0xf8>)
    7e32:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	691b      	ldr	r3, [r3, #16]
    7e38:	2b00      	cmp	r3, #0
    7e3a:	bf14      	ite	ne
    7e3c:	2301      	movne	r3, #1
    7e3e:	2300      	moveq	r3, #0
    7e40:	b2db      	uxtb	r3, r3
    7e42:	f240 422b 	movw	r2, #1067	; 0x42b
    7e46:	492b      	ldr	r1, [pc, #172]	; (7ef4 <_sercom_i2c_m_irq_handler+0xf4>)
    7e48:	4618      	mov	r0, r3
    7e4a:	4b2b      	ldr	r3, [pc, #172]	; (7ef8 <_sercom_i2c_m_irq_handler+0xf8>)
    7e4c:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    7e4e:	bf00      	nop
    7e50:	68fb      	ldr	r3, [r7, #12]
    7e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7e56:	2b00      	cmp	r3, #0
    7e58:	d126      	bne.n	7ea8 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    7e5a:	687b      	ldr	r3, [r7, #4]
    7e5c:	461a      	mov	r2, r3
    7e5e:	68f9      	ldr	r1, [r7, #12]
    7e60:	6938      	ldr	r0, [r7, #16]
    7e62:	4b26      	ldr	r3, [pc, #152]	; (7efc <_sercom_i2c_m_irq_handler+0xfc>)
    7e64:	4798      	blx	r3
    7e66:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    7e68:	697b      	ldr	r3, [r7, #20]
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d11b      	bne.n	7ea6 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    7e6e:	68fb      	ldr	r3, [r7, #12]
    7e70:	f003 0301 	and.w	r3, r3, #1
    7e74:	2b00      	cmp	r3, #0
    7e76:	d008      	beq.n	7e8a <_sercom_i2c_m_irq_handler+0x8a>
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	699b      	ldr	r3, [r3, #24]
    7e7c:	2b00      	cmp	r3, #0
    7e7e:	d004      	beq.n	7e8a <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    7e80:	687b      	ldr	r3, [r7, #4]
    7e82:	699b      	ldr	r3, [r3, #24]
    7e84:	6878      	ldr	r0, [r7, #4]
    7e86:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    7e88:	e02e      	b.n	7ee8 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    7e8a:	68fb      	ldr	r3, [r7, #12]
    7e8c:	f003 0302 	and.w	r3, r3, #2
    7e90:	2b00      	cmp	r3, #0
    7e92:	d029      	beq.n	7ee8 <_sercom_i2c_m_irq_handler+0xe8>
    7e94:	687b      	ldr	r3, [r7, #4]
    7e96:	69db      	ldr	r3, [r3, #28]
    7e98:	2b00      	cmp	r3, #0
    7e9a:	d025      	beq.n	7ee8 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    7e9c:	687b      	ldr	r3, [r7, #4]
    7e9e:	69db      	ldr	r3, [r3, #28]
    7ea0:	6878      	ldr	r0, [r7, #4]
    7ea2:	4798      	blx	r3
		return;
    7ea4:	e020      	b.n	7ee8 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    7ea6:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7ea8:	687b      	ldr	r3, [r7, #4]
    7eaa:	885b      	ldrh	r3, [r3, #2]
    7eac:	b29b      	uxth	r3, r3
    7eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7eb2:	b29a      	uxth	r2, r3
    7eb4:	687b      	ldr	r3, [r7, #4]
    7eb6:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    7eb8:	687b      	ldr	r3, [r7, #4]
    7eba:	695b      	ldr	r3, [r3, #20]
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d014      	beq.n	7eea <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    7ec0:	697b      	ldr	r3, [r7, #20]
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d005      	beq.n	7ed2 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    7ec6:	687b      	ldr	r3, [r7, #4]
    7ec8:	695b      	ldr	r3, [r3, #20]
    7eca:	6979      	ldr	r1, [r7, #20]
    7ecc:	6878      	ldr	r0, [r7, #4]
    7ece:	4798      	blx	r3
    7ed0:	e005      	b.n	7ede <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    7ed2:	687b      	ldr	r3, [r7, #4]
    7ed4:	695b      	ldr	r3, [r3, #20]
    7ed6:	f06f 0104 	mvn.w	r1, #4
    7eda:	6878      	ldr	r0, [r7, #4]
    7edc:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    7ede:	2180      	movs	r1, #128	; 0x80
    7ee0:	6938      	ldr	r0, [r7, #16]
    7ee2:	4b07      	ldr	r3, [pc, #28]	; (7f00 <_sercom_i2c_m_irq_handler+0x100>)
    7ee4:	4798      	blx	r3
    7ee6:	e000      	b.n	7eea <_sercom_i2c_m_irq_handler+0xea>
		return;
    7ee8:	bf00      	nop
	}
}
    7eea:	3718      	adds	r7, #24
    7eec:	46bd      	mov	sp, r7
    7eee:	bd80      	pop	{r7, pc}
    7ef0:	0000740d 	.word	0x0000740d
    7ef4:	00011598 	.word	0x00011598
    7ef8:	00004f51 	.word	0x00004f51
    7efc:	00007bd1 	.word	0x00007bd1
    7f00:	00007427 	.word	0x00007427

00007f04 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    7f04:	b580      	push	{r7, lr}
    7f06:	b082      	sub	sp, #8
    7f08:	af00      	add	r7, sp, #0
    7f0a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	2b00      	cmp	r3, #0
    7f10:	bf14      	ite	ne
    7f12:	2301      	movne	r3, #1
    7f14:	2300      	moveq	r3, #0
    7f16:	b2db      	uxtb	r3, r3
    7f18:	f44f 628a 	mov.w	r2, #1104	; 0x450
    7f1c:	4906      	ldr	r1, [pc, #24]	; (7f38 <_i2c_m_async_enable+0x34>)
    7f1e:	4618      	mov	r0, r3
    7f20:	4b06      	ldr	r3, [pc, #24]	; (7f3c <_i2c_m_async_enable+0x38>)
    7f22:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	691b      	ldr	r3, [r3, #16]
    7f28:	4618      	mov	r0, r3
    7f2a:	4b05      	ldr	r3, [pc, #20]	; (7f40 <_i2c_m_async_enable+0x3c>)
    7f2c:	4798      	blx	r3
    7f2e:	4603      	mov	r3, r0
}
    7f30:	4618      	mov	r0, r3
    7f32:	3708      	adds	r7, #8
    7f34:	46bd      	mov	sp, r7
    7f36:	bd80      	pop	{r7, pc}
    7f38:	00011598 	.word	0x00011598
    7f3c:	00004f51 	.word	0x00004f51
    7f40:	00008295 	.word	0x00008295

00007f44 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    7f44:	b580      	push	{r7, lr}
    7f46:	b082      	sub	sp, #8
    7f48:	af00      	add	r7, sp, #0
    7f4a:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    7f4c:	6878      	ldr	r0, [r7, #4]
    7f4e:	4b05      	ldr	r3, [pc, #20]	; (7f64 <_sercom_get_irq_num+0x20>)
    7f50:	4798      	blx	r3
    7f52:	4603      	mov	r3, r0
    7f54:	009b      	lsls	r3, r3, #2
    7f56:	b2db      	uxtb	r3, r3
    7f58:	332e      	adds	r3, #46	; 0x2e
    7f5a:	b2db      	uxtb	r3, r3
}
    7f5c:	4618      	mov	r0, r3
    7f5e:	3708      	adds	r7, #8
    7f60:	46bd      	mov	sp, r7
    7f62:	bd80      	pop	{r7, pc}
    7f64:	00007a9d 	.word	0x00007a9d

00007f68 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    7f68:	b580      	push	{r7, lr}
    7f6a:	b086      	sub	sp, #24
    7f6c:	af00      	add	r7, sp, #0
    7f6e:	6078      	str	r0, [r7, #4]
    7f70:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	2b00      	cmp	r3, #0
    7f76:	bf14      	ite	ne
    7f78:	2301      	movne	r3, #1
    7f7a:	2300      	moveq	r3, #0
    7f7c:	b2db      	uxtb	r3, r3
    7f7e:	f240 429e 	movw	r2, #1182	; 0x49e
    7f82:	491d      	ldr	r1, [pc, #116]	; (7ff8 <_i2c_m_async_init+0x90>)
    7f84:	4618      	mov	r0, r3
    7f86:	4b1d      	ldr	r3, [pc, #116]	; (7ffc <_i2c_m_async_init+0x94>)
    7f88:	4798      	blx	r3

	i2c_dev->hw = hw;
    7f8a:	687b      	ldr	r3, [r7, #4]
    7f8c:	683a      	ldr	r2, [r7, #0]
    7f8e:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7f90:	687b      	ldr	r3, [r7, #4]
    7f92:	6839      	ldr	r1, [r7, #0]
    7f94:	4618      	mov	r0, r3
    7f96:	4b1a      	ldr	r3, [pc, #104]	; (8000 <_i2c_m_async_init+0x98>)
    7f98:	4798      	blx	r3
    7f9a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    7f9c:	68fb      	ldr	r3, [r7, #12]
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d001      	beq.n	7fa6 <_i2c_m_async_init+0x3e>
		return init_status;
    7fa2:	68fb      	ldr	r3, [r7, #12]
    7fa4:	e024      	b.n	7ff0 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7fa6:	6879      	ldr	r1, [r7, #4]
    7fa8:	6838      	ldr	r0, [r7, #0]
    7faa:	4b16      	ldr	r3, [pc, #88]	; (8004 <_i2c_m_async_init+0x9c>)
    7fac:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    7fae:	6838      	ldr	r0, [r7, #0]
    7fb0:	4b15      	ldr	r3, [pc, #84]	; (8008 <_i2c_m_async_init+0xa0>)
    7fb2:	4798      	blx	r3
    7fb4:	4603      	mov	r3, r0
    7fb6:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7fb8:	2300      	movs	r3, #0
    7fba:	613b      	str	r3, [r7, #16]
    7fbc:	e014      	b.n	7fe8 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    7fbe:	7dfb      	ldrb	r3, [r7, #23]
    7fc0:	b21b      	sxth	r3, r3
    7fc2:	4618      	mov	r0, r3
    7fc4:	4b11      	ldr	r3, [pc, #68]	; (800c <_i2c_m_async_init+0xa4>)
    7fc6:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    7fc8:	7dfb      	ldrb	r3, [r7, #23]
    7fca:	b21b      	sxth	r3, r3
    7fcc:	4618      	mov	r0, r3
    7fce:	4b10      	ldr	r3, [pc, #64]	; (8010 <_i2c_m_async_init+0xa8>)
    7fd0:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    7fd2:	7dfb      	ldrb	r3, [r7, #23]
    7fd4:	b21b      	sxth	r3, r3
    7fd6:	4618      	mov	r0, r3
    7fd8:	4b0e      	ldr	r3, [pc, #56]	; (8014 <_i2c_m_async_init+0xac>)
    7fda:	4798      	blx	r3
		irq++;
    7fdc:	7dfb      	ldrb	r3, [r7, #23]
    7fde:	3301      	adds	r3, #1
    7fe0:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7fe2:	693b      	ldr	r3, [r7, #16]
    7fe4:	3301      	adds	r3, #1
    7fe6:	613b      	str	r3, [r7, #16]
    7fe8:	693b      	ldr	r3, [r7, #16]
    7fea:	2b03      	cmp	r3, #3
    7fec:	d9e7      	bls.n	7fbe <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    7fee:	2300      	movs	r3, #0
}
    7ff0:	4618      	mov	r0, r3
    7ff2:	3718      	adds	r7, #24
    7ff4:	46bd      	mov	sp, r7
    7ff6:	bd80      	pop	{r7, pc}
    7ff8:	00011598 	.word	0x00011598
    7ffc:	00004f51 	.word	0x00004f51
    8000:	00008321 	.word	0x00008321
    8004:	00007af9 	.word	0x00007af9
    8008:	00007f45 	.word	0x00007f45
    800c:	000072c1 	.word	0x000072c1
    8010:	00007305 	.word	0x00007305
    8014:	00007285 	.word	0x00007285

00008018 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    8018:	b590      	push	{r4, r7, lr}
    801a:	b087      	sub	sp, #28
    801c:	af00      	add	r7, sp, #0
    801e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    8020:	687b      	ldr	r3, [r7, #4]
    8022:	691b      	ldr	r3, [r3, #16]
    8024:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    8026:	687b      	ldr	r3, [r7, #4]
    8028:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    802a:	6978      	ldr	r0, [r7, #20]
    802c:	4b33      	ldr	r3, [pc, #204]	; (80fc <_sercom_i2c_send_address+0xe4>)
    802e:	4798      	blx	r3
    8030:	4603      	mov	r3, r0
    8032:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	2b00      	cmp	r3, #0
    8038:	bf14      	ite	ne
    803a:	2301      	movne	r3, #1
    803c:	2300      	moveq	r3, #0
    803e:	b2db      	uxtb	r3, r3
    8040:	f240 42cc 	movw	r2, #1228	; 0x4cc
    8044:	492e      	ldr	r1, [pc, #184]	; (8100 <_sercom_i2c_send_address+0xe8>)
    8046:	4618      	mov	r0, r3
    8048:	4b2e      	ldr	r3, [pc, #184]	; (8104 <_sercom_i2c_send_address+0xec>)
    804a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    804c:	693b      	ldr	r3, [r7, #16]
    804e:	685b      	ldr	r3, [r3, #4]
    8050:	2b01      	cmp	r3, #1
    8052:	d106      	bne.n	8062 <_sercom_i2c_send_address+0x4a>
    8054:	68fb      	ldr	r3, [r7, #12]
    8056:	2b00      	cmp	r3, #0
    8058:	d003      	beq.n	8062 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    805a:	6978      	ldr	r0, [r7, #20]
    805c:	4b2a      	ldr	r3, [pc, #168]	; (8108 <_sercom_i2c_send_address+0xf0>)
    805e:	4798      	blx	r3
    8060:	e002      	b.n	8068 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    8062:	6978      	ldr	r0, [r7, #20]
    8064:	4b29      	ldr	r3, [pc, #164]	; (810c <_sercom_i2c_send_address+0xf4>)
    8066:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    8068:	693b      	ldr	r3, [r7, #16]
    806a:	881b      	ldrh	r3, [r3, #0]
    806c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8070:	2b00      	cmp	r3, #0
    8072:	d022      	beq.n	80ba <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    8074:	693b      	ldr	r3, [r7, #16]
    8076:	885b      	ldrh	r3, [r3, #2]
    8078:	b29b      	uxth	r3, r3
    807a:	f003 0301 	and.w	r3, r3, #1
    807e:	2b00      	cmp	r3, #0
    8080:	d007      	beq.n	8092 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    8082:	693b      	ldr	r3, [r7, #16]
    8084:	885b      	ldrh	r3, [r3, #2]
    8086:	b29b      	uxth	r3, r3
    8088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    808c:	b29a      	uxth	r2, r3
    808e:	693b      	ldr	r3, [r7, #16]
    8090:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    8092:	693b      	ldr	r3, [r7, #16]
    8094:	881b      	ldrh	r3, [r3, #0]
    8096:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8098:	f240 74fe 	movw	r4, #2046	; 0x7fe
    809c:	401c      	ands	r4, r3
    809e:	6978      	ldr	r0, [r7, #20]
    80a0:	4b1b      	ldr	r3, [pc, #108]	; (8110 <_sercom_i2c_send_address+0xf8>)
    80a2:	4798      	blx	r3
    80a4:	4603      	mov	r3, r0
    80a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    80aa:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    80ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    80b0:	4619      	mov	r1, r3
    80b2:	6978      	ldr	r0, [r7, #20]
    80b4:	4b17      	ldr	r3, [pc, #92]	; (8114 <_sercom_i2c_send_address+0xfc>)
    80b6:	4798      	blx	r3
    80b8:	e01a      	b.n	80f0 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    80ba:	693b      	ldr	r3, [r7, #16]
    80bc:	881b      	ldrh	r3, [r3, #0]
    80be:	005b      	lsls	r3, r3, #1
    80c0:	b2db      	uxtb	r3, r3
    80c2:	693a      	ldr	r2, [r7, #16]
    80c4:	8852      	ldrh	r2, [r2, #2]
    80c6:	b292      	uxth	r2, r2
    80c8:	f002 0201 	and.w	r2, r2, #1
    80cc:	2a00      	cmp	r2, #0
    80ce:	bf14      	ite	ne
    80d0:	2201      	movne	r2, #1
    80d2:	2200      	moveq	r2, #0
    80d4:	b2d2      	uxtb	r2, r2
    80d6:	4313      	orrs	r3, r2
    80d8:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    80da:	6978      	ldr	r0, [r7, #20]
    80dc:	4b0c      	ldr	r3, [pc, #48]	; (8110 <_sercom_i2c_send_address+0xf8>)
    80de:	4798      	blx	r3
    80e0:	4603      	mov	r3, r0
    80e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    80e6:	4323      	orrs	r3, r4
    80e8:	4619      	mov	r1, r3
    80ea:	6978      	ldr	r0, [r7, #20]
    80ec:	4b09      	ldr	r3, [pc, #36]	; (8114 <_sercom_i2c_send_address+0xfc>)
    80ee:	4798      	blx	r3
	}

	return ERR_NONE;
    80f0:	2300      	movs	r3, #0
}
    80f2:	4618      	mov	r0, r3
    80f4:	371c      	adds	r7, #28
    80f6:	46bd      	mov	sp, r7
    80f8:	bd90      	pop	{r4, r7, pc}
    80fa:	bf00      	nop
    80fc:	00007641 	.word	0x00007641
    8100:	00011598 	.word	0x00011598
    8104:	00004f51 	.word	0x00004f51
    8108:	000077c9 	.word	0x000077c9
    810c:	000077f1 	.word	0x000077f1
    8110:	00007931 	.word	0x00007931
    8114:	0000790d 	.word	0x0000790d

00008118 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    8118:	b580      	push	{r7, lr}
    811a:	b084      	sub	sp, #16
    811c:	af00      	add	r7, sp, #0
    811e:	6078      	str	r0, [r7, #4]
    8120:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    8122:	687b      	ldr	r3, [r7, #4]
    8124:	2b00      	cmp	r3, #0
    8126:	bf14      	ite	ne
    8128:	2301      	movne	r3, #1
    812a:	2300      	moveq	r3, #0
    812c:	b2db      	uxtb	r3, r3
    812e:	f240 42f4 	movw	r2, #1268	; 0x4f4
    8132:	492a      	ldr	r1, [pc, #168]	; (81dc <_i2c_m_async_transfer+0xc4>)
    8134:	4618      	mov	r0, r3
    8136:	4b2a      	ldr	r3, [pc, #168]	; (81e0 <_i2c_m_async_transfer+0xc8>)
    8138:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    813a:	687b      	ldr	r3, [r7, #4]
    813c:	691b      	ldr	r3, [r3, #16]
    813e:	2b00      	cmp	r3, #0
    8140:	bf14      	ite	ne
    8142:	2301      	movne	r3, #1
    8144:	2300      	moveq	r3, #0
    8146:	b2db      	uxtb	r3, r3
    8148:	f240 42f5 	movw	r2, #1269	; 0x4f5
    814c:	4923      	ldr	r1, [pc, #140]	; (81dc <_i2c_m_async_transfer+0xc4>)
    814e:	4618      	mov	r0, r3
    8150:	4b23      	ldr	r3, [pc, #140]	; (81e0 <_i2c_m_async_transfer+0xc8>)
    8152:	4798      	blx	r3
	ASSERT(msg);
    8154:	683b      	ldr	r3, [r7, #0]
    8156:	2b00      	cmp	r3, #0
    8158:	bf14      	ite	ne
    815a:	2301      	movne	r3, #1
    815c:	2300      	moveq	r3, #0
    815e:	b2db      	uxtb	r3, r3
    8160:	f240 42f6 	movw	r2, #1270	; 0x4f6
    8164:	491d      	ldr	r1, [pc, #116]	; (81dc <_i2c_m_async_transfer+0xc4>)
    8166:	4618      	mov	r0, r3
    8168:	4b1d      	ldr	r3, [pc, #116]	; (81e0 <_i2c_m_async_transfer+0xc8>)
    816a:	4798      	blx	r3

	if (msg->len == 0) {
    816c:	683b      	ldr	r3, [r7, #0]
    816e:	685b      	ldr	r3, [r3, #4]
    8170:	2b00      	cmp	r3, #0
    8172:	d101      	bne.n	8178 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    8174:	2300      	movs	r3, #0
    8176:	e02d      	b.n	81d4 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8178:	687b      	ldr	r3, [r7, #4]
    817a:	885b      	ldrh	r3, [r3, #2]
    817c:	b29b      	uxth	r3, r3
    817e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8182:	2b00      	cmp	r3, #0
    8184:	d002      	beq.n	818c <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    8186:	f06f 0303 	mvn.w	r3, #3
    818a:	e023      	b.n	81d4 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    818c:	683b      	ldr	r3, [r7, #0]
    818e:	885b      	ldrh	r3, [r3, #2]
    8190:	b29b      	uxth	r3, r3
    8192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8196:	b29a      	uxth	r2, r3
    8198:	683b      	ldr	r3, [r7, #0]
    819a:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    819c:	687b      	ldr	r3, [r7, #4]
    819e:	683a      	ldr	r2, [r7, #0]
    81a0:	ca07      	ldmia	r2, {r0, r1, r2}
    81a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    81a6:	687b      	ldr	r3, [r7, #4]
    81a8:	691b      	ldr	r3, [r3, #16]
    81aa:	4618      	mov	r0, r3
    81ac:	4b0d      	ldr	r3, [pc, #52]	; (81e4 <_i2c_m_async_transfer+0xcc>)
    81ae:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    81b0:	6878      	ldr	r0, [r7, #4]
    81b2:	4b0d      	ldr	r3, [pc, #52]	; (81e8 <_i2c_m_async_transfer+0xd0>)
    81b4:	4798      	blx	r3
    81b6:	60f8      	str	r0, [r7, #12]

	if (ret) {
    81b8:	68fb      	ldr	r3, [r7, #12]
    81ba:	2b00      	cmp	r3, #0
    81bc:	d009      	beq.n	81d2 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    81be:	687b      	ldr	r3, [r7, #4]
    81c0:	885b      	ldrh	r3, [r3, #2]
    81c2:	b29b      	uxth	r3, r3
    81c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    81c8:	b29a      	uxth	r2, r3
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	805a      	strh	r2, [r3, #2]

		return ret;
    81ce:	68fb      	ldr	r3, [r7, #12]
    81d0:	e000      	b.n	81d4 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    81d2:	2300      	movs	r3, #0
}
    81d4:	4618      	mov	r0, r3
    81d6:	3710      	adds	r7, #16
    81d8:	46bd      	mov	sp, r7
    81da:	bd80      	pop	{r7, pc}
    81dc:	00011598 	.word	0x00011598
    81e0:	00004f51 	.word	0x00004f51
    81e4:	00007779 	.word	0x00007779
    81e8:	00008019 	.word	0x00008019

000081ec <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    81ec:	b480      	push	{r7}
    81ee:	b085      	sub	sp, #20
    81f0:	af00      	add	r7, sp, #0
    81f2:	60f8      	str	r0, [r7, #12]
    81f4:	460b      	mov	r3, r1
    81f6:	607a      	str	r2, [r7, #4]
    81f8:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    81fa:	7afb      	ldrb	r3, [r7, #11]
    81fc:	2b01      	cmp	r3, #1
    81fe:	d008      	beq.n	8212 <_i2c_m_async_register_callback+0x26>
    8200:	2b02      	cmp	r3, #2
    8202:	d00a      	beq.n	821a <_i2c_m_async_register_callback+0x2e>
    8204:	2b00      	cmp	r3, #0
    8206:	d000      	beq.n	820a <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    8208:	e00b      	b.n	8222 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    820a:	68fb      	ldr	r3, [r7, #12]
    820c:	687a      	ldr	r2, [r7, #4]
    820e:	615a      	str	r2, [r3, #20]
		break;
    8210:	e007      	b.n	8222 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    8212:	68fb      	ldr	r3, [r7, #12]
    8214:	687a      	ldr	r2, [r7, #4]
    8216:	619a      	str	r2, [r3, #24]
		break;
    8218:	e003      	b.n	8222 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    821a:	68fb      	ldr	r3, [r7, #12]
    821c:	687a      	ldr	r2, [r7, #4]
    821e:	61da      	str	r2, [r3, #28]
		break;
    8220:	bf00      	nop
	}

	return ERR_NONE;
    8222:	2300      	movs	r3, #0
}
    8224:	4618      	mov	r0, r3
    8226:	3714      	adds	r7, #20
    8228:	46bd      	mov	sp, r7
    822a:	f85d 7b04 	ldr.w	r7, [sp], #4
    822e:	4770      	bx	lr

00008230 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    8230:	b580      	push	{r7, lr}
    8232:	b082      	sub	sp, #8
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
    8238:	460b      	mov	r3, r1
    823a:	70fb      	strb	r3, [r7, #3]
    823c:	4613      	mov	r3, r2
    823e:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    8240:	78fb      	ldrb	r3, [r7, #3]
    8242:	2b01      	cmp	r3, #1
    8244:	d002      	beq.n	824c <_i2c_m_async_set_irq_state+0x1c>
    8246:	78fb      	ldrb	r3, [r7, #3]
    8248:	2b02      	cmp	r3, #2
    824a:	d10e      	bne.n	826a <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    824c:	687b      	ldr	r3, [r7, #4]
    824e:	691b      	ldr	r3, [r3, #16]
    8250:	78ba      	ldrb	r2, [r7, #2]
    8252:	4611      	mov	r1, r2
    8254:	4618      	mov	r0, r3
    8256:	4b0c      	ldr	r3, [pc, #48]	; (8288 <_i2c_m_async_set_irq_state+0x58>)
    8258:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	691b      	ldr	r3, [r3, #16]
    825e:	78ba      	ldrb	r2, [r7, #2]
    8260:	4611      	mov	r1, r2
    8262:	4618      	mov	r0, r3
    8264:	4b09      	ldr	r3, [pc, #36]	; (828c <_i2c_m_async_set_irq_state+0x5c>)
    8266:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    8268:	e009      	b.n	827e <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    826a:	78fb      	ldrb	r3, [r7, #3]
    826c:	2b00      	cmp	r3, #0
    826e:	d106      	bne.n	827e <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	691b      	ldr	r3, [r3, #16]
    8274:	78ba      	ldrb	r2, [r7, #2]
    8276:	4611      	mov	r1, r2
    8278:	4618      	mov	r0, r3
    827a:	4b05      	ldr	r3, [pc, #20]	; (8290 <_i2c_m_async_set_irq_state+0x60>)
    827c:	4798      	blx	r3
}
    827e:	bf00      	nop
    8280:	3708      	adds	r7, #8
    8282:	46bd      	mov	sp, r7
    8284:	bd80      	pop	{r7, pc}
    8286:	bf00      	nop
    8288:	000074d7 	.word	0x000074d7
    828c:	000074a5 	.word	0x000074a5
    8290:	00007509 	.word	0x00007509

00008294 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    8294:	b580      	push	{r7, lr}
    8296:	b084      	sub	sp, #16
    8298:	af00      	add	r7, sp, #0
    829a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    829c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    82a0:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    82a2:	2304      	movs	r3, #4
    82a4:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	2b00      	cmp	r3, #0
    82aa:	bf14      	ite	ne
    82ac:	2301      	movne	r3, #1
    82ae:	2300      	moveq	r3, #0
    82b0:	b2db      	uxtb	r3, r3
    82b2:	f240 6241 	movw	r2, #1601	; 0x641
    82b6:	4915      	ldr	r1, [pc, #84]	; (830c <_i2c_m_enable_implementation+0x78>)
    82b8:	4618      	mov	r0, r3
    82ba:	4b15      	ldr	r3, [pc, #84]	; (8310 <_i2c_m_enable_implementation+0x7c>)
    82bc:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    82be:	6878      	ldr	r0, [r7, #4]
    82c0:	4b14      	ldr	r3, [pc, #80]	; (8314 <_i2c_m_enable_implementation+0x80>)
    82c2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    82c4:	e016      	b.n	82f4 <_i2c_m_enable_implementation+0x60>
		timeout--;
    82c6:	68fb      	ldr	r3, [r7, #12]
    82c8:	3b01      	subs	r3, #1
    82ca:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    82cc:	68fb      	ldr	r3, [r7, #12]
    82ce:	2b00      	cmp	r3, #0
    82d0:	dc10      	bgt.n	82f4 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    82d2:	68bb      	ldr	r3, [r7, #8]
    82d4:	3b01      	subs	r3, #1
    82d6:	60bb      	str	r3, [r7, #8]
    82d8:	68bb      	ldr	r3, [r7, #8]
    82da:	2b00      	cmp	r3, #0
    82dc:	d007      	beq.n	82ee <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    82de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    82e2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    82e4:	2110      	movs	r1, #16
    82e6:	6878      	ldr	r0, [r7, #4]
    82e8:	4b0b      	ldr	r3, [pc, #44]	; (8318 <_i2c_m_enable_implementation+0x84>)
    82ea:	4798      	blx	r3
    82ec:	e002      	b.n	82f4 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    82ee:	f06f 0305 	mvn.w	r3, #5
    82f2:	e006      	b.n	8302 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    82f4:	6878      	ldr	r0, [r7, #4]
    82f6:	4b09      	ldr	r3, [pc, #36]	; (831c <_i2c_m_enable_implementation+0x88>)
    82f8:	4798      	blx	r3
    82fa:	4603      	mov	r3, r0
    82fc:	2b01      	cmp	r3, #1
    82fe:	d1e2      	bne.n	82c6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    8300:	2300      	movs	r3, #0
}
    8302:	4618      	mov	r0, r3
    8304:	3710      	adds	r7, #16
    8306:	46bd      	mov	sp, r7
    8308:	bd80      	pop	{r7, pc}
    830a:	bf00      	nop
    830c:	00011598 	.word	0x00011598
    8310:	00004f51 	.word	0x00004f51
    8314:	000075f1 	.word	0x000075f1
    8318:	00007a75 	.word	0x00007a75
    831c:	00007a25 	.word	0x00007a25

00008320 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    8320:	b580      	push	{r7, lr}
    8322:	b084      	sub	sp, #16
    8324:	af00      	add	r7, sp, #0
    8326:	6078      	str	r0, [r7, #4]
    8328:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    832a:	6838      	ldr	r0, [r7, #0]
    832c:	4b42      	ldr	r3, [pc, #264]	; (8438 <_i2c_m_sync_init_impl+0x118>)
    832e:	4798      	blx	r3
    8330:	4603      	mov	r3, r0
    8332:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    8334:	2101      	movs	r1, #1
    8336:	6838      	ldr	r0, [r7, #0]
    8338:	4b40      	ldr	r3, [pc, #256]	; (843c <_i2c_m_sync_init_impl+0x11c>)
    833a:	4798      	blx	r3
    833c:	4603      	mov	r3, r0
    833e:	f083 0301 	eor.w	r3, r3, #1
    8342:	b2db      	uxtb	r3, r3
    8344:	2b00      	cmp	r3, #0
    8346:	d020      	beq.n	838a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    8348:	7bfa      	ldrb	r2, [r7, #15]
    834a:	493d      	ldr	r1, [pc, #244]	; (8440 <_i2c_m_sync_init_impl+0x120>)
    834c:	4613      	mov	r3, r2
    834e:	005b      	lsls	r3, r3, #1
    8350:	4413      	add	r3, r2
    8352:	00db      	lsls	r3, r3, #3
    8354:	440b      	add	r3, r1
    8356:	3304      	adds	r3, #4
    8358:	681b      	ldr	r3, [r3, #0]
    835a:	f003 031c 	and.w	r3, r3, #28
    835e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    8360:	2102      	movs	r1, #2
    8362:	6838      	ldr	r0, [r7, #0]
    8364:	4b37      	ldr	r3, [pc, #220]	; (8444 <_i2c_m_sync_init_impl+0x124>)
    8366:	4798      	blx	r3
    8368:	4603      	mov	r3, r0
    836a:	2b00      	cmp	r3, #0
    836c:	d006      	beq.n	837c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    836e:	6838      	ldr	r0, [r7, #0]
    8370:	4b35      	ldr	r3, [pc, #212]	; (8448 <_i2c_m_sync_init_impl+0x128>)
    8372:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    8374:	2102      	movs	r1, #2
    8376:	6838      	ldr	r0, [r7, #0]
    8378:	4b34      	ldr	r3, [pc, #208]	; (844c <_i2c_m_sync_init_impl+0x12c>)
    837a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    837c:	68bb      	ldr	r3, [r7, #8]
    837e:	f043 0301 	orr.w	r3, r3, #1
    8382:	4619      	mov	r1, r3
    8384:	6838      	ldr	r0, [r7, #0]
    8386:	4b32      	ldr	r3, [pc, #200]	; (8450 <_i2c_m_sync_init_impl+0x130>)
    8388:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    838a:	2101      	movs	r1, #1
    838c:	6838      	ldr	r0, [r7, #0]
    838e:	4b2f      	ldr	r3, [pc, #188]	; (844c <_i2c_m_sync_init_impl+0x12c>)
    8390:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    8392:	7bfa      	ldrb	r2, [r7, #15]
    8394:	492a      	ldr	r1, [pc, #168]	; (8440 <_i2c_m_sync_init_impl+0x120>)
    8396:	4613      	mov	r3, r2
    8398:	005b      	lsls	r3, r3, #1
    839a:	4413      	add	r3, r2
    839c:	00db      	lsls	r3, r3, #3
    839e:	440b      	add	r3, r1
    83a0:	3304      	adds	r3, #4
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	4619      	mov	r1, r3
    83a6:	6838      	ldr	r0, [r7, #0]
    83a8:	4b29      	ldr	r3, [pc, #164]	; (8450 <_i2c_m_sync_init_impl+0x130>)
    83aa:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    83ac:	7bfa      	ldrb	r2, [r7, #15]
    83ae:	4924      	ldr	r1, [pc, #144]	; (8440 <_i2c_m_sync_init_impl+0x120>)
    83b0:	4613      	mov	r3, r2
    83b2:	005b      	lsls	r3, r3, #1
    83b4:	4413      	add	r3, r2
    83b6:	00db      	lsls	r3, r3, #3
    83b8:	440b      	add	r3, r1
    83ba:	3308      	adds	r3, #8
    83bc:	681b      	ldr	r3, [r3, #0]
    83be:	4619      	mov	r1, r3
    83c0:	6838      	ldr	r0, [r7, #0]
    83c2:	4b24      	ldr	r3, [pc, #144]	; (8454 <_i2c_m_sync_init_impl+0x134>)
    83c4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    83c6:	7bfa      	ldrb	r2, [r7, #15]
    83c8:	491d      	ldr	r1, [pc, #116]	; (8440 <_i2c_m_sync_init_impl+0x120>)
    83ca:	4613      	mov	r3, r2
    83cc:	005b      	lsls	r3, r3, #1
    83ce:	4413      	add	r3, r2
    83d0:	00db      	lsls	r3, r3, #3
    83d2:	440b      	add	r3, r1
    83d4:	330c      	adds	r3, #12
    83d6:	681b      	ldr	r3, [r3, #0]
    83d8:	4619      	mov	r1, r3
    83da:	6838      	ldr	r0, [r7, #0]
    83dc:	4b1e      	ldr	r3, [pc, #120]	; (8458 <_i2c_m_sync_init_impl+0x138>)
    83de:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    83e0:	7bfa      	ldrb	r2, [r7, #15]
    83e2:	4917      	ldr	r1, [pc, #92]	; (8440 <_i2c_m_sync_init_impl+0x120>)
    83e4:	4613      	mov	r3, r2
    83e6:	005b      	lsls	r3, r3, #1
    83e8:	4413      	add	r3, r2
    83ea:	00db      	lsls	r3, r3, #3
    83ec:	440b      	add	r3, r1
    83ee:	3304      	adds	r3, #4
    83f0:	681b      	ldr	r3, [r3, #0]
    83f2:	0e1b      	lsrs	r3, r3, #24
    83f4:	b29b      	uxth	r3, r3
    83f6:	f003 0303 	and.w	r3, r3, #3
    83fa:	b29a      	uxth	r2, r3
    83fc:	687b      	ldr	r3, [r7, #4]
    83fe:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	899b      	ldrh	r3, [r3, #12]
    8404:	2b01      	cmp	r3, #1
    8406:	bf8c      	ite	hi
    8408:	2301      	movhi	r3, #1
    840a:	2300      	movls	r3, #0
    840c:	b2db      	uxtb	r3, r3
    840e:	4619      	mov	r1, r3
    8410:	6838      	ldr	r0, [r7, #0]
    8412:	4b12      	ldr	r3, [pc, #72]	; (845c <_i2c_m_sync_init_impl+0x13c>)
    8414:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    8416:	7bfa      	ldrb	r2, [r7, #15]
    8418:	4909      	ldr	r1, [pc, #36]	; (8440 <_i2c_m_sync_init_impl+0x120>)
    841a:	4613      	mov	r3, r2
    841c:	005b      	lsls	r3, r3, #1
    841e:	4413      	add	r3, r2
    8420:	00db      	lsls	r3, r3, #3
    8422:	440b      	add	r3, r1
    8424:	3312      	adds	r3, #18
    8426:	881a      	ldrh	r2, [r3, #0]
    8428:	687b      	ldr	r3, [r7, #4]
    842a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    842c:	2300      	movs	r3, #0
}
    842e:	4618      	mov	r0, r3
    8430:	3710      	adds	r7, #16
    8432:	46bd      	mov	sp, r7
    8434:	bd80      	pop	{r7, pc}
    8436:	bf00      	nop
    8438:	00007b4d 	.word	0x00007b4d
    843c:	00007365 	.word	0x00007365
    8440:	20000018 	.word	0x20000018
    8444:	00007671 	.word	0x00007671
    8448:	00007619 	.word	0x00007619
    844c:	00007341 	.word	0x00007341
    8450:	000076a1 	.word	0x000076a1
    8454:	00007849 	.word	0x00007849
    8458:	00007891 	.word	0x00007891
    845c:	000078cd 	.word	0x000078cd

00008460 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8460:	b580      	push	{r7, lr}
    8462:	b082      	sub	sp, #8
    8464:	af00      	add	r7, sp, #0
    8466:	6078      	str	r0, [r7, #4]
    8468:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    846a:	687b      	ldr	r3, [r7, #4]
    846c:	2b00      	cmp	r3, #0
    846e:	d004      	beq.n	847a <_spi_load_regs_master+0x1a>
    8470:	683b      	ldr	r3, [r7, #0]
    8472:	2b00      	cmp	r3, #0
    8474:	d001      	beq.n	847a <_spi_load_regs_master+0x1a>
    8476:	2301      	movs	r3, #1
    8478:	e000      	b.n	847c <_spi_load_regs_master+0x1c>
    847a:	2300      	movs	r3, #0
    847c:	f003 0301 	and.w	r3, r3, #1
    8480:	b2db      	uxtb	r3, r3
    8482:	f640 1242 	movw	r2, #2370	; 0x942
    8486:	4915      	ldr	r1, [pc, #84]	; (84dc <_spi_load_regs_master+0x7c>)
    8488:	4618      	mov	r0, r3
    848a:	4b15      	ldr	r3, [pc, #84]	; (84e0 <_spi_load_regs_master+0x80>)
    848c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    848e:	683b      	ldr	r3, [r7, #0]
    8490:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8492:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8496:	f023 0301 	bic.w	r3, r3, #1
    849a:	4619      	mov	r1, r3
    849c:	6878      	ldr	r0, [r7, #4]
    849e:	4b11      	ldr	r3, [pc, #68]	; (84e4 <_spi_load_regs_master+0x84>)
    84a0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    84a2:	683b      	ldr	r3, [r7, #0]
    84a4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    84a6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    84aa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    84ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    84b2:	4619      	mov	r1, r3
    84b4:	6878      	ldr	r0, [r7, #4]
    84b6:	4b0c      	ldr	r3, [pc, #48]	; (84e8 <_spi_load_regs_master+0x88>)
    84b8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    84ba:	683b      	ldr	r3, [r7, #0]
    84bc:	7b1b      	ldrb	r3, [r3, #12]
    84be:	4619      	mov	r1, r3
    84c0:	6878      	ldr	r0, [r7, #4]
    84c2:	4b0a      	ldr	r3, [pc, #40]	; (84ec <_spi_load_regs_master+0x8c>)
    84c4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    84c6:	683b      	ldr	r3, [r7, #0]
    84c8:	7b5b      	ldrb	r3, [r3, #13]
    84ca:	4619      	mov	r1, r3
    84cc:	6878      	ldr	r0, [r7, #4]
    84ce:	4b08      	ldr	r3, [pc, #32]	; (84f0 <_spi_load_regs_master+0x90>)
    84d0:	4798      	blx	r3
}
    84d2:	bf00      	nop
    84d4:	3708      	adds	r7, #8
    84d6:	46bd      	mov	sp, r7
    84d8:	bd80      	pop	{r7, pc}
    84da:	bf00      	nop
    84dc:	00011598 	.word	0x00011598
    84e0:	00004f51 	.word	0x00004f51
    84e4:	00007755 	.word	0x00007755
    84e8:	0000786d 	.word	0x0000786d
    84ec:	000078ad 	.word	0x000078ad
    84f0:	000079e5 	.word	0x000079e5

000084f4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    84f4:	b580      	push	{r7, lr}
    84f6:	b082      	sub	sp, #8
    84f8:	af00      	add	r7, sp, #0
    84fa:	6078      	str	r0, [r7, #4]
    84fc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    84fe:	687b      	ldr	r3, [r7, #4]
    8500:	2b00      	cmp	r3, #0
    8502:	d004      	beq.n	850e <_spi_load_regs_slave+0x1a>
    8504:	683b      	ldr	r3, [r7, #0]
    8506:	2b00      	cmp	r3, #0
    8508:	d001      	beq.n	850e <_spi_load_regs_slave+0x1a>
    850a:	2301      	movs	r3, #1
    850c:	e000      	b.n	8510 <_spi_load_regs_slave+0x1c>
    850e:	2300      	movs	r3, #0
    8510:	f003 0301 	and.w	r3, r3, #1
    8514:	b2db      	uxtb	r3, r3
    8516:	f640 1256 	movw	r2, #2390	; 0x956
    851a:	491a      	ldr	r1, [pc, #104]	; (8584 <_spi_load_regs_slave+0x90>)
    851c:	4618      	mov	r0, r3
    851e:	4b1a      	ldr	r3, [pc, #104]	; (8588 <_spi_load_regs_slave+0x94>)
    8520:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8522:	683b      	ldr	r3, [r7, #0]
    8524:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8526:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    852a:	f023 0301 	bic.w	r3, r3, #1
    852e:	4619      	mov	r1, r3
    8530:	6878      	ldr	r0, [r7, #4]
    8532:	4b16      	ldr	r3, [pc, #88]	; (858c <_spi_load_regs_slave+0x98>)
    8534:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8536:	683b      	ldr	r3, [r7, #0]
    8538:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    853a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    853e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8546:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    854a:	4619      	mov	r1, r3
    854c:	6878      	ldr	r0, [r7, #4]
    854e:	4b10      	ldr	r3, [pc, #64]	; (8590 <_spi_load_regs_slave+0x9c>)
    8550:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8552:	683b      	ldr	r3, [r7, #0]
    8554:	689b      	ldr	r3, [r3, #8]
    8556:	4619      	mov	r1, r3
    8558:	6878      	ldr	r0, [r7, #4]
    855a:	4b0e      	ldr	r3, [pc, #56]	; (8594 <_spi_load_regs_slave+0xa0>)
    855c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    855e:	683b      	ldr	r3, [r7, #0]
    8560:	7b5b      	ldrb	r3, [r3, #13]
    8562:	4619      	mov	r1, r3
    8564:	6878      	ldr	r0, [r7, #4]
    8566:	4b0c      	ldr	r3, [pc, #48]	; (8598 <_spi_load_regs_slave+0xa4>)
    8568:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    856a:	bf00      	nop
    856c:	f04f 31ff 	mov.w	r1, #4294967295
    8570:	6878      	ldr	r0, [r7, #4]
    8572:	4b0a      	ldr	r3, [pc, #40]	; (859c <_spi_load_regs_slave+0xa8>)
    8574:	4798      	blx	r3
    8576:	4603      	mov	r3, r0
    8578:	2b00      	cmp	r3, #0
    857a:	d1f7      	bne.n	856c <_spi_load_regs_slave+0x78>
		;
}
    857c:	bf00      	nop
    857e:	3708      	adds	r7, #8
    8580:	46bd      	mov	sp, r7
    8582:	bd80      	pop	{r7, pc}
    8584:	00011598 	.word	0x00011598
    8588:	00004f51 	.word	0x00004f51
    858c:	00007755 	.word	0x00007755
    8590:	0000786d 	.word	0x0000786d
    8594:	00007951 	.word	0x00007951
    8598:	000079e5 	.word	0x000079e5
    859c:	000073b1 	.word	0x000073b1

000085a0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    85a0:	b580      	push	{r7, lr}
    85a2:	b084      	sub	sp, #16
    85a4:	af00      	add	r7, sp, #0
    85a6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    85a8:	687b      	ldr	r3, [r7, #4]
    85aa:	4618      	mov	r0, r3
    85ac:	4b11      	ldr	r3, [pc, #68]	; (85f4 <_spi_get_regs+0x54>)
    85ae:	4798      	blx	r3
    85b0:	4603      	mov	r3, r0
    85b2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    85b4:	2300      	movs	r3, #0
    85b6:	73fb      	strb	r3, [r7, #15]
    85b8:	e014      	b.n	85e4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    85ba:	7bfa      	ldrb	r2, [r7, #15]
    85bc:	490e      	ldr	r1, [pc, #56]	; (85f8 <_spi_get_regs+0x58>)
    85be:	4613      	mov	r3, r2
    85c0:	011b      	lsls	r3, r3, #4
    85c2:	4413      	add	r3, r2
    85c4:	440b      	add	r3, r1
    85c6:	3310      	adds	r3, #16
    85c8:	781b      	ldrb	r3, [r3, #0]
    85ca:	7bba      	ldrb	r2, [r7, #14]
    85cc:	429a      	cmp	r2, r3
    85ce:	d106      	bne.n	85de <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    85d0:	7bfa      	ldrb	r2, [r7, #15]
    85d2:	4613      	mov	r3, r2
    85d4:	011b      	lsls	r3, r3, #4
    85d6:	4413      	add	r3, r2
    85d8:	4a07      	ldr	r2, [pc, #28]	; (85f8 <_spi_get_regs+0x58>)
    85da:	4413      	add	r3, r2
    85dc:	e006      	b.n	85ec <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    85de:	7bfb      	ldrb	r3, [r7, #15]
    85e0:	3301      	adds	r3, #1
    85e2:	73fb      	strb	r3, [r7, #15]
    85e4:	7bfb      	ldrb	r3, [r7, #15]
    85e6:	2b01      	cmp	r3, #1
    85e8:	d9e7      	bls.n	85ba <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    85ea:	2300      	movs	r3, #0
}
    85ec:	4618      	mov	r0, r3
    85ee:	3710      	adds	r7, #16
    85f0:	46bd      	mov	sp, r7
    85f2:	bd80      	pop	{r7, pc}
    85f4:	00007a9d 	.word	0x00007a9d
    85f8:	000115d4 	.word	0x000115d4

000085fc <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    85fc:	b580      	push	{r7, lr}
    85fe:	b084      	sub	sp, #16
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    8604:	687b      	ldr	r3, [r7, #4]
    8606:	681b      	ldr	r3, [r3, #0]
    8608:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    860a:	68f8      	ldr	r0, [r7, #12]
    860c:	4b21      	ldr	r3, [pc, #132]	; (8694 <_spi_handler+0x98>)
    860e:	4798      	blx	r3
    8610:	4603      	mov	r3, r0
    8612:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    8614:	68f8      	ldr	r0, [r7, #12]
    8616:	4b20      	ldr	r3, [pc, #128]	; (8698 <_spi_handler+0x9c>)
    8618:	4798      	blx	r3
    861a:	4603      	mov	r3, r0
    861c:	461a      	mov	r2, r3
    861e:	7afb      	ldrb	r3, [r7, #11]
    8620:	4013      	ands	r3, r2
    8622:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    8624:	7afb      	ldrb	r3, [r7, #11]
    8626:	f003 0301 	and.w	r3, r3, #1
    862a:	2b00      	cmp	r3, #0
    862c:	d004      	beq.n	8638 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    862e:	687b      	ldr	r3, [r7, #4]
    8630:	689b      	ldr	r3, [r3, #8]
    8632:	6878      	ldr	r0, [r7, #4]
    8634:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    8636:	e029      	b.n	868c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    8638:	7afb      	ldrb	r3, [r7, #11]
    863a:	f003 0304 	and.w	r3, r3, #4
    863e:	2b00      	cmp	r3, #0
    8640:	d004      	beq.n	864c <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    8642:	687b      	ldr	r3, [r7, #4]
    8644:	68db      	ldr	r3, [r3, #12]
    8646:	6878      	ldr	r0, [r7, #4]
    8648:	4798      	blx	r3
}
    864a:	e01f      	b.n	868c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    864c:	7afb      	ldrb	r3, [r7, #11]
    864e:	f003 0302 	and.w	r3, r3, #2
    8652:	2b00      	cmp	r3, #0
    8654:	d008      	beq.n	8668 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    8656:	2102      	movs	r1, #2
    8658:	68f8      	ldr	r0, [r7, #12]
    865a:	4b10      	ldr	r3, [pc, #64]	; (869c <_spi_handler+0xa0>)
    865c:	4798      	blx	r3
		dev->callbacks.complete(dev);
    865e:	687b      	ldr	r3, [r7, #4]
    8660:	691b      	ldr	r3, [r3, #16]
    8662:	6878      	ldr	r0, [r7, #4]
    8664:	4798      	blx	r3
}
    8666:	e011      	b.n	868c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    8668:	f997 300b 	ldrsb.w	r3, [r7, #11]
    866c:	2b00      	cmp	r3, #0
    866e:	da0d      	bge.n	868c <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    8670:	2104      	movs	r1, #4
    8672:	68f8      	ldr	r0, [r7, #12]
    8674:	4b0a      	ldr	r3, [pc, #40]	; (86a0 <_spi_handler+0xa4>)
    8676:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8678:	2180      	movs	r1, #128	; 0x80
    867a:	68f8      	ldr	r0, [r7, #12]
    867c:	4b07      	ldr	r3, [pc, #28]	; (869c <_spi_handler+0xa0>)
    867e:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    8680:	687b      	ldr	r3, [r7, #4]
    8682:	695b      	ldr	r3, [r3, #20]
    8684:	f06f 0112 	mvn.w	r1, #18
    8688:	6878      	ldr	r0, [r7, #4]
    868a:	4798      	blx	r3
}
    868c:	bf00      	nop
    868e:	3710      	adds	r7, #16
    8690:	46bd      	mov	sp, r7
    8692:	bd80      	pop	{r7, pc}
    8694:	0000746d 	.word	0x0000746d
    8698:	000075d7 	.word	0x000075d7
    869c:	00007487 	.word	0x00007487
    86a0:	00007a05 	.word	0x00007a05

000086a4 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    86a4:	b580      	push	{r7, lr}
    86a6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    86a8:	4b03      	ldr	r3, [pc, #12]	; (86b8 <SERCOM4_0_Handler+0x14>)
    86aa:	681b      	ldr	r3, [r3, #0]
    86ac:	4618      	mov	r0, r3
    86ae:	4b03      	ldr	r3, [pc, #12]	; (86bc <SERCOM4_0_Handler+0x18>)
    86b0:	4798      	blx	r3
}
    86b2:	bf00      	nop
    86b4:	bd80      	pop	{r7, pc}
    86b6:	bf00      	nop
    86b8:	20001cac 	.word	0x20001cac
    86bc:	000085fd 	.word	0x000085fd

000086c0 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    86c0:	b580      	push	{r7, lr}
    86c2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    86c4:	4b03      	ldr	r3, [pc, #12]	; (86d4 <SERCOM4_1_Handler+0x14>)
    86c6:	681b      	ldr	r3, [r3, #0]
    86c8:	4618      	mov	r0, r3
    86ca:	4b03      	ldr	r3, [pc, #12]	; (86d8 <SERCOM4_1_Handler+0x18>)
    86cc:	4798      	blx	r3
}
    86ce:	bf00      	nop
    86d0:	bd80      	pop	{r7, pc}
    86d2:	bf00      	nop
    86d4:	20001cac 	.word	0x20001cac
    86d8:	000085fd 	.word	0x000085fd

000086dc <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    86dc:	b580      	push	{r7, lr}
    86de:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    86e0:	4b03      	ldr	r3, [pc, #12]	; (86f0 <SERCOM4_2_Handler+0x14>)
    86e2:	681b      	ldr	r3, [r3, #0]
    86e4:	4618      	mov	r0, r3
    86e6:	4b03      	ldr	r3, [pc, #12]	; (86f4 <SERCOM4_2_Handler+0x18>)
    86e8:	4798      	blx	r3
}
    86ea:	bf00      	nop
    86ec:	bd80      	pop	{r7, pc}
    86ee:	bf00      	nop
    86f0:	20001cac 	.word	0x20001cac
    86f4:	000085fd 	.word	0x000085fd

000086f8 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    86f8:	b580      	push	{r7, lr}
    86fa:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    86fc:	4b03      	ldr	r3, [pc, #12]	; (870c <SERCOM4_3_Handler+0x14>)
    86fe:	681b      	ldr	r3, [r3, #0]
    8700:	4618      	mov	r0, r3
    8702:	4b03      	ldr	r3, [pc, #12]	; (8710 <SERCOM4_3_Handler+0x18>)
    8704:	4798      	blx	r3
}
    8706:	bf00      	nop
    8708:	bd80      	pop	{r7, pc}
    870a:	bf00      	nop
    870c:	20001cac 	.word	0x20001cac
    8710:	000085fd 	.word	0x000085fd

00008714 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    8714:	b580      	push	{r7, lr}
    8716:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8718:	4b03      	ldr	r3, [pc, #12]	; (8728 <SERCOM5_0_Handler+0x14>)
    871a:	681b      	ldr	r3, [r3, #0]
    871c:	4618      	mov	r0, r3
    871e:	4b03      	ldr	r3, [pc, #12]	; (872c <SERCOM5_0_Handler+0x18>)
    8720:	4798      	blx	r3
}
    8722:	bf00      	nop
    8724:	bd80      	pop	{r7, pc}
    8726:	bf00      	nop
    8728:	20001cb0 	.word	0x20001cb0
    872c:	00007e01 	.word	0x00007e01

00008730 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    8730:	b580      	push	{r7, lr}
    8732:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8734:	4b03      	ldr	r3, [pc, #12]	; (8744 <SERCOM5_1_Handler+0x14>)
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	4618      	mov	r0, r3
    873a:	4b03      	ldr	r3, [pc, #12]	; (8748 <SERCOM5_1_Handler+0x18>)
    873c:	4798      	blx	r3
}
    873e:	bf00      	nop
    8740:	bd80      	pop	{r7, pc}
    8742:	bf00      	nop
    8744:	20001cb0 	.word	0x20001cb0
    8748:	00007e01 	.word	0x00007e01

0000874c <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    874c:	b580      	push	{r7, lr}
    874e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8750:	4b03      	ldr	r3, [pc, #12]	; (8760 <SERCOM5_2_Handler+0x14>)
    8752:	681b      	ldr	r3, [r3, #0]
    8754:	4618      	mov	r0, r3
    8756:	4b03      	ldr	r3, [pc, #12]	; (8764 <SERCOM5_2_Handler+0x18>)
    8758:	4798      	blx	r3
}
    875a:	bf00      	nop
    875c:	bd80      	pop	{r7, pc}
    875e:	bf00      	nop
    8760:	20001cb0 	.word	0x20001cb0
    8764:	00007e01 	.word	0x00007e01

00008768 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    8768:	b580      	push	{r7, lr}
    876a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    876c:	4b03      	ldr	r3, [pc, #12]	; (877c <SERCOM5_3_Handler+0x14>)
    876e:	681b      	ldr	r3, [r3, #0]
    8770:	4618      	mov	r0, r3
    8772:	4b03      	ldr	r3, [pc, #12]	; (8780 <SERCOM5_3_Handler+0x18>)
    8774:	4798      	blx	r3
}
    8776:	bf00      	nop
    8778:	bd80      	pop	{r7, pc}
    877a:	bf00      	nop
    877c:	20001cb0 	.word	0x20001cb0
    8780:	00007e01 	.word	0x00007e01

00008784 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    8784:	b580      	push	{r7, lr}
    8786:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8788:	4b03      	ldr	r3, [pc, #12]	; (8798 <SERCOM7_0_Handler+0x14>)
    878a:	681b      	ldr	r3, [r3, #0]
    878c:	4618      	mov	r0, r3
    878e:	4b03      	ldr	r3, [pc, #12]	; (879c <SERCOM7_0_Handler+0x18>)
    8790:	4798      	blx	r3
}
    8792:	bf00      	nop
    8794:	bd80      	pop	{r7, pc}
    8796:	bf00      	nop
    8798:	20001cb4 	.word	0x20001cb4
    879c:	00007e01 	.word	0x00007e01

000087a0 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    87a0:	b580      	push	{r7, lr}
    87a2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    87a4:	4b03      	ldr	r3, [pc, #12]	; (87b4 <SERCOM7_1_Handler+0x14>)
    87a6:	681b      	ldr	r3, [r3, #0]
    87a8:	4618      	mov	r0, r3
    87aa:	4b03      	ldr	r3, [pc, #12]	; (87b8 <SERCOM7_1_Handler+0x18>)
    87ac:	4798      	blx	r3
}
    87ae:	bf00      	nop
    87b0:	bd80      	pop	{r7, pc}
    87b2:	bf00      	nop
    87b4:	20001cb4 	.word	0x20001cb4
    87b8:	00007e01 	.word	0x00007e01

000087bc <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    87bc:	b580      	push	{r7, lr}
    87be:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    87c0:	4b03      	ldr	r3, [pc, #12]	; (87d0 <SERCOM7_2_Handler+0x14>)
    87c2:	681b      	ldr	r3, [r3, #0]
    87c4:	4618      	mov	r0, r3
    87c6:	4b03      	ldr	r3, [pc, #12]	; (87d4 <SERCOM7_2_Handler+0x18>)
    87c8:	4798      	blx	r3
}
    87ca:	bf00      	nop
    87cc:	bd80      	pop	{r7, pc}
    87ce:	bf00      	nop
    87d0:	20001cb4 	.word	0x20001cb4
    87d4:	00007e01 	.word	0x00007e01

000087d8 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    87d8:	b580      	push	{r7, lr}
    87da:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    87dc:	4b03      	ldr	r3, [pc, #12]	; (87ec <SERCOM7_3_Handler+0x14>)
    87de:	681b      	ldr	r3, [r3, #0]
    87e0:	4618      	mov	r0, r3
    87e2:	4b03      	ldr	r3, [pc, #12]	; (87f0 <SERCOM7_3_Handler+0x18>)
    87e4:	4798      	blx	r3
}
    87e6:	bf00      	nop
    87e8:	bd80      	pop	{r7, pc}
    87ea:	bf00      	nop
    87ec:	20001cb4 	.word	0x20001cb4
    87f0:	00007e01 	.word	0x00007e01

000087f4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    87f4:	b580      	push	{r7, lr}
    87f6:	b084      	sub	sp, #16
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
    87fc:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    87fe:	683b      	ldr	r3, [r7, #0]
    8800:	4618      	mov	r0, r3
    8802:	4b35      	ldr	r3, [pc, #212]	; (88d8 <_spi_m_sync_init+0xe4>)
    8804:	4798      	blx	r3
    8806:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    8808:	687b      	ldr	r3, [r7, #4]
    880a:	2b00      	cmp	r3, #0
    880c:	d004      	beq.n	8818 <_spi_m_sync_init+0x24>
    880e:	683b      	ldr	r3, [r7, #0]
    8810:	2b00      	cmp	r3, #0
    8812:	d001      	beq.n	8818 <_spi_m_sync_init+0x24>
    8814:	2301      	movs	r3, #1
    8816:	e000      	b.n	881a <_spi_m_sync_init+0x26>
    8818:	2300      	movs	r3, #0
    881a:	f003 0301 	and.w	r3, r3, #1
    881e:	b2db      	uxtb	r3, r3
    8820:	f640 12e9 	movw	r2, #2537	; 0x9e9
    8824:	492d      	ldr	r1, [pc, #180]	; (88dc <_spi_m_sync_init+0xe8>)
    8826:	4618      	mov	r0, r3
    8828:	4b2d      	ldr	r3, [pc, #180]	; (88e0 <_spi_m_sync_init+0xec>)
    882a:	4798      	blx	r3

	if (regs == NULL) {
    882c:	68fb      	ldr	r3, [r7, #12]
    882e:	2b00      	cmp	r3, #0
    8830:	d102      	bne.n	8838 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    8832:	f06f 030c 	mvn.w	r3, #12
    8836:	e04a      	b.n	88ce <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8838:	2101      	movs	r1, #1
    883a:	6838      	ldr	r0, [r7, #0]
    883c:	4b29      	ldr	r3, [pc, #164]	; (88e4 <_spi_m_sync_init+0xf0>)
    883e:	4798      	blx	r3
    8840:	4603      	mov	r3, r0
    8842:	f083 0301 	eor.w	r3, r3, #1
    8846:	b2db      	uxtb	r3, r3
    8848:	2b00      	cmp	r3, #0
    884a:	d019      	beq.n	8880 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    884c:	68fb      	ldr	r3, [r7, #12]
    884e:	681b      	ldr	r3, [r3, #0]
    8850:	f003 031c 	and.w	r3, r3, #28
    8854:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8856:	2102      	movs	r1, #2
    8858:	6838      	ldr	r0, [r7, #0]
    885a:	4b23      	ldr	r3, [pc, #140]	; (88e8 <_spi_m_sync_init+0xf4>)
    885c:	4798      	blx	r3
    885e:	4603      	mov	r3, r0
    8860:	2b00      	cmp	r3, #0
    8862:	d006      	beq.n	8872 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8864:	6838      	ldr	r0, [r7, #0]
    8866:	4b21      	ldr	r3, [pc, #132]	; (88ec <_spi_m_sync_init+0xf8>)
    8868:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    886a:	2102      	movs	r1, #2
    886c:	6838      	ldr	r0, [r7, #0]
    886e:	4b20      	ldr	r3, [pc, #128]	; (88f0 <_spi_m_sync_init+0xfc>)
    8870:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8872:	68bb      	ldr	r3, [r7, #8]
    8874:	f043 0301 	orr.w	r3, r3, #1
    8878:	4619      	mov	r1, r3
    887a:	6838      	ldr	r0, [r7, #0]
    887c:	4b1d      	ldr	r3, [pc, #116]	; (88f4 <_spi_m_sync_init+0x100>)
    887e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8880:	2101      	movs	r1, #1
    8882:	6838      	ldr	r0, [r7, #0]
    8884:	4b1a      	ldr	r3, [pc, #104]	; (88f0 <_spi_m_sync_init+0xfc>)
    8886:	4798      	blx	r3

	dev->prvt = hw;
    8888:	687b      	ldr	r3, [r7, #4]
    888a:	683a      	ldr	r2, [r7, #0]
    888c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    888e:	68fb      	ldr	r3, [r7, #12]
    8890:	681b      	ldr	r3, [r3, #0]
    8892:	f003 031c 	and.w	r3, r3, #28
    8896:	2b08      	cmp	r3, #8
    8898:	d104      	bne.n	88a4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    889a:	68f9      	ldr	r1, [r7, #12]
    889c:	6838      	ldr	r0, [r7, #0]
    889e:	4b16      	ldr	r3, [pc, #88]	; (88f8 <_spi_m_sync_init+0x104>)
    88a0:	4798      	blx	r3
    88a2:	e003      	b.n	88ac <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    88a4:	68f9      	ldr	r1, [r7, #12]
    88a6:	6838      	ldr	r0, [r7, #0]
    88a8:	4b14      	ldr	r3, [pc, #80]	; (88fc <_spi_m_sync_init+0x108>)
    88aa:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    88ac:	68fb      	ldr	r3, [r7, #12]
    88ae:	685b      	ldr	r3, [r3, #4]
    88b0:	f003 0307 	and.w	r3, r3, #7
    88b4:	2b00      	cmp	r3, #0
    88b6:	d101      	bne.n	88bc <_spi_m_sync_init+0xc8>
    88b8:	2201      	movs	r2, #1
    88ba:	e000      	b.n	88be <_spi_m_sync_init+0xca>
    88bc:	2202      	movs	r2, #2
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    88c2:	68fb      	ldr	r3, [r7, #12]
    88c4:	89db      	ldrh	r3, [r3, #14]
    88c6:	b29a      	uxth	r2, r3
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    88cc:	2300      	movs	r3, #0
}
    88ce:	4618      	mov	r0, r3
    88d0:	3710      	adds	r7, #16
    88d2:	46bd      	mov	sp, r7
    88d4:	bd80      	pop	{r7, pc}
    88d6:	bf00      	nop
    88d8:	000085a1 	.word	0x000085a1
    88dc:	00011598 	.word	0x00011598
    88e0:	00004f51 	.word	0x00004f51
    88e4:	000073b1 	.word	0x000073b1
    88e8:	00007725 	.word	0x00007725
    88ec:	000076fd 	.word	0x000076fd
    88f0:	0000738d 	.word	0x0000738d
    88f4:	00007755 	.word	0x00007755
    88f8:	000084f5 	.word	0x000084f5
    88fc:	00008461 	.word	0x00008461

00008900 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    8900:	b580      	push	{r7, lr}
    8902:	b086      	sub	sp, #24
    8904:	af00      	add	r7, sp, #0
    8906:	6078      	str	r0, [r7, #4]
    8908:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    890a:	687b      	ldr	r3, [r7, #4]
    890c:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    890e:	6839      	ldr	r1, [r7, #0]
    8910:	6878      	ldr	r0, [r7, #4]
    8912:	4b1a      	ldr	r3, [pc, #104]	; (897c <_spi_m_async_init+0x7c>)
    8914:	4798      	blx	r3
    8916:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    8918:	68bb      	ldr	r3, [r7, #8]
    891a:	2b00      	cmp	r3, #0
    891c:	da01      	bge.n	8922 <_spi_m_async_init+0x22>
		return rc;
    891e:	68bb      	ldr	r3, [r7, #8]
    8920:	e028      	b.n	8974 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    8922:	6879      	ldr	r1, [r7, #4]
    8924:	6838      	ldr	r0, [r7, #0]
    8926:	4b16      	ldr	r3, [pc, #88]	; (8980 <_spi_m_async_init+0x80>)
    8928:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    892a:	68fb      	ldr	r3, [r7, #12]
    892c:	2200      	movs	r2, #0
    892e:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    8930:	68fb      	ldr	r3, [r7, #12]
    8932:	2200      	movs	r2, #0
    8934:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    8936:	68fb      	ldr	r3, [r7, #12]
    8938:	2200      	movs	r2, #0
    893a:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    893c:	6838      	ldr	r0, [r7, #0]
    893e:	4b11      	ldr	r3, [pc, #68]	; (8984 <_spi_m_async_init+0x84>)
    8940:	4798      	blx	r3
    8942:	4603      	mov	r3, r0
    8944:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8946:	2300      	movs	r3, #0
    8948:	613b      	str	r3, [r7, #16]
    894a:	e00f      	b.n	896c <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    894c:	7dfb      	ldrb	r3, [r7, #23]
    894e:	b21b      	sxth	r3, r3
    8950:	4618      	mov	r0, r3
    8952:	4b0d      	ldr	r3, [pc, #52]	; (8988 <_spi_m_async_init+0x88>)
    8954:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    8956:	7dfb      	ldrb	r3, [r7, #23]
    8958:	b21b      	sxth	r3, r3
    895a:	4618      	mov	r0, r3
    895c:	4b0b      	ldr	r3, [pc, #44]	; (898c <_spi_m_async_init+0x8c>)
    895e:	4798      	blx	r3
		irq++;
    8960:	7dfb      	ldrb	r3, [r7, #23]
    8962:	3301      	adds	r3, #1
    8964:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8966:	693b      	ldr	r3, [r7, #16]
    8968:	3301      	adds	r3, #1
    896a:	613b      	str	r3, [r7, #16]
    896c:	693b      	ldr	r3, [r7, #16]
    896e:	2b03      	cmp	r3, #3
    8970:	d9ec      	bls.n	894c <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    8972:	2300      	movs	r3, #0
}
    8974:	4618      	mov	r0, r3
    8976:	3718      	adds	r7, #24
    8978:	46bd      	mov	sp, r7
    897a:	bd80      	pop	{r7, pc}
    897c:	000087f5 	.word	0x000087f5
    8980:	00007af9 	.word	0x00007af9
    8984:	00007f45 	.word	0x00007f45
    8988:	000072c1 	.word	0x000072c1
    898c:	00007305 	.word	0x00007305

00008990 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    8990:	b580      	push	{r7, lr}
    8992:	b082      	sub	sp, #8
    8994:	af00      	add	r7, sp, #0
    8996:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    8998:	bf00      	nop
    899a:	2103      	movs	r1, #3
    899c:	6878      	ldr	r0, [r7, #4]
    899e:	4b06      	ldr	r3, [pc, #24]	; (89b8 <_spi_wait_bus_idle+0x28>)
    89a0:	4798      	blx	r3
    89a2:	4603      	mov	r3, r0
    89a4:	2b00      	cmp	r3, #0
    89a6:	d0f8      	beq.n	899a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    89a8:	2103      	movs	r1, #3
    89aa:	6878      	ldr	r0, [r7, #4]
    89ac:	4b03      	ldr	r3, [pc, #12]	; (89bc <_spi_wait_bus_idle+0x2c>)
    89ae:	4798      	blx	r3
}
    89b0:	bf00      	nop
    89b2:	3708      	adds	r7, #8
    89b4:	46bd      	mov	sp, r7
    89b6:	bd80      	pop	{r7, pc}
    89b8:	00007445 	.word	0x00007445
    89bc:	00007487 	.word	0x00007487

000089c0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    89c0:	b580      	push	{r7, lr}
    89c2:	b086      	sub	sp, #24
    89c4:	af00      	add	r7, sp, #0
    89c6:	60f8      	str	r0, [r7, #12]
    89c8:	60b9      	str	r1, [r7, #8]
    89ca:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    89cc:	68bb      	ldr	r3, [r7, #8]
    89ce:	f003 0304 	and.w	r3, r3, #4
    89d2:	2b00      	cmp	r3, #0
    89d4:	d101      	bne.n	89da <_spi_rx_check_and_receive+0x1a>
		return false;
    89d6:	2300      	movs	r3, #0
    89d8:	e022      	b.n	8a20 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    89da:	68f8      	ldr	r0, [r7, #12]
    89dc:	4b12      	ldr	r3, [pc, #72]	; (8a28 <_spi_rx_check_and_receive+0x68>)
    89de:	4798      	blx	r3
    89e0:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    89e2:	687b      	ldr	r3, [r7, #4]
    89e4:	685b      	ldr	r3, [r3, #4]
    89e6:	2b00      	cmp	r3, #0
    89e8:	d014      	beq.n	8a14 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    89ea:	687b      	ldr	r3, [r7, #4]
    89ec:	685b      	ldr	r3, [r3, #4]
    89ee:	1c59      	adds	r1, r3, #1
    89f0:	687a      	ldr	r2, [r7, #4]
    89f2:	6051      	str	r1, [r2, #4]
    89f4:	697a      	ldr	r2, [r7, #20]
    89f6:	b2d2      	uxtb	r2, r2
    89f8:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	7c1b      	ldrb	r3, [r3, #16]
    89fe:	2b01      	cmp	r3, #1
    8a00:	d908      	bls.n	8a14 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    8a02:	687b      	ldr	r3, [r7, #4]
    8a04:	685b      	ldr	r3, [r3, #4]
    8a06:	1c59      	adds	r1, r3, #1
    8a08:	687a      	ldr	r2, [r7, #4]
    8a0a:	6051      	str	r1, [r2, #4]
    8a0c:	697a      	ldr	r2, [r7, #20]
    8a0e:	0a12      	lsrs	r2, r2, #8
    8a10:	b2d2      	uxtb	r2, r2
    8a12:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	68db      	ldr	r3, [r3, #12]
    8a18:	1c5a      	adds	r2, r3, #1
    8a1a:	687b      	ldr	r3, [r7, #4]
    8a1c:	60da      	str	r2, [r3, #12]

	return true;
    8a1e:	2301      	movs	r3, #1
}
    8a20:	4618      	mov	r0, r3
    8a22:	3718      	adds	r7, #24
    8a24:	46bd      	mov	sp, r7
    8a26:	bd80      	pop	{r7, pc}
    8a28:	000079cd 	.word	0x000079cd

00008a2c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    8a2c:	b580      	push	{r7, lr}
    8a2e:	b086      	sub	sp, #24
    8a30:	af00      	add	r7, sp, #0
    8a32:	60f8      	str	r0, [r7, #12]
    8a34:	60b9      	str	r1, [r7, #8]
    8a36:	607a      	str	r2, [r7, #4]
    8a38:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    8a3a:	68bb      	ldr	r3, [r7, #8]
    8a3c:	f003 0301 	and.w	r3, r3, #1
    8a40:	2b00      	cmp	r3, #0
    8a42:	d028      	beq.n	8a96 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    8a44:	687b      	ldr	r3, [r7, #4]
    8a46:	681b      	ldr	r3, [r3, #0]
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d018      	beq.n	8a7e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    8a4c:	687b      	ldr	r3, [r7, #4]
    8a4e:	681b      	ldr	r3, [r3, #0]
    8a50:	1c59      	adds	r1, r3, #1
    8a52:	687a      	ldr	r2, [r7, #4]
    8a54:	6011      	str	r1, [r2, #0]
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    8a5a:	687b      	ldr	r3, [r7, #4]
    8a5c:	7c1b      	ldrb	r3, [r3, #16]
    8a5e:	2b01      	cmp	r3, #1
    8a60:	d90f      	bls.n	8a82 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    8a62:	687b      	ldr	r3, [r7, #4]
    8a64:	681b      	ldr	r3, [r3, #0]
    8a66:	781b      	ldrb	r3, [r3, #0]
    8a68:	021b      	lsls	r3, r3, #8
    8a6a:	461a      	mov	r2, r3
    8a6c:	697b      	ldr	r3, [r7, #20]
    8a6e:	4313      	orrs	r3, r2
    8a70:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	681b      	ldr	r3, [r3, #0]
    8a76:	1c5a      	adds	r2, r3, #1
    8a78:	687b      	ldr	r3, [r7, #4]
    8a7a:	601a      	str	r2, [r3, #0]
    8a7c:	e001      	b.n	8a82 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    8a7e:	887b      	ldrh	r3, [r7, #2]
    8a80:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    8a82:	687b      	ldr	r3, [r7, #4]
    8a84:	689b      	ldr	r3, [r3, #8]
    8a86:	1c5a      	adds	r2, r3, #1
    8a88:	687b      	ldr	r3, [r7, #4]
    8a8a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    8a8c:	6979      	ldr	r1, [r7, #20]
    8a8e:	68f8      	ldr	r0, [r7, #12]
    8a90:	4b03      	ldr	r3, [pc, #12]	; (8aa0 <_spi_tx_check_and_send+0x74>)
    8a92:	4798      	blx	r3
    8a94:	e000      	b.n	8a98 <_spi_tx_check_and_send+0x6c>
		return;
    8a96:	bf00      	nop
}
    8a98:	3718      	adds	r7, #24
    8a9a:	46bd      	mov	sp, r7
    8a9c:	bd80      	pop	{r7, pc}
    8a9e:	bf00      	nop
    8aa0:	000079b1 	.word	0x000079b1

00008aa4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    8aa4:	b580      	push	{r7, lr}
    8aa6:	b082      	sub	sp, #8
    8aa8:	af00      	add	r7, sp, #0
    8aaa:	6078      	str	r0, [r7, #4]
    8aac:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    8aae:	687b      	ldr	r3, [r7, #4]
    8ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d00b      	beq.n	8ad0 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    8ab8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8abc:	6838      	ldr	r0, [r7, #0]
    8abe:	4b07      	ldr	r3, [pc, #28]	; (8adc <_spi_err_check+0x38>)
    8ac0:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8ac2:	2180      	movs	r1, #128	; 0x80
    8ac4:	6838      	ldr	r0, [r7, #0]
    8ac6:	4b06      	ldr	r3, [pc, #24]	; (8ae0 <_spi_err_check+0x3c>)
    8ac8:	4798      	blx	r3
		return ERR_OVERFLOW;
    8aca:	f06f 0312 	mvn.w	r3, #18
    8ace:	e000      	b.n	8ad2 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    8ad0:	2300      	movs	r3, #0
}
    8ad2:	4618      	mov	r0, r3
    8ad4:	3708      	adds	r7, #8
    8ad6:	46bd      	mov	sp, r7
    8ad8:	bd80      	pop	{r7, pc}
    8ada:	bf00      	nop
    8adc:	00007a05 	.word	0x00007a05
    8ae0:	00007487 	.word	0x00007487

00008ae4 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    8ae4:	b590      	push	{r4, r7, lr}
    8ae6:	b08b      	sub	sp, #44	; 0x2c
    8ae8:	af00      	add	r7, sp, #0
    8aea:	6078      	str	r0, [r7, #4]
    8aec:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	681b      	ldr	r3, [r3, #0]
    8af2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    8af4:	2300      	movs	r3, #0
    8af6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    8af8:	683b      	ldr	r3, [r7, #0]
    8afa:	681b      	ldr	r3, [r3, #0]
    8afc:	60bb      	str	r3, [r7, #8]
    8afe:	683b      	ldr	r3, [r7, #0]
    8b00:	685b      	ldr	r3, [r3, #4]
    8b02:	60fb      	str	r3, [r7, #12]
    8b04:	2300      	movs	r3, #0
    8b06:	613b      	str	r3, [r7, #16]
    8b08:	2300      	movs	r3, #0
    8b0a:	617b      	str	r3, [r7, #20]
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	791b      	ldrb	r3, [r3, #4]
    8b10:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	2b00      	cmp	r3, #0
    8b16:	d004      	beq.n	8b22 <_spi_m_sync_trans+0x3e>
    8b18:	6a3b      	ldr	r3, [r7, #32]
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	d001      	beq.n	8b22 <_spi_m_sync_trans+0x3e>
    8b1e:	2301      	movs	r3, #1
    8b20:	e000      	b.n	8b24 <_spi_m_sync_trans+0x40>
    8b22:	2300      	movs	r3, #0
    8b24:	f003 0301 	and.w	r3, r3, #1
    8b28:	b2db      	uxtb	r3, r3
    8b2a:	f640 324d 	movw	r2, #2893	; 0xb4d
    8b2e:	492b      	ldr	r1, [pc, #172]	; (8bdc <_spi_m_sync_trans+0xf8>)
    8b30:	4618      	mov	r0, r3
    8b32:	4b2b      	ldr	r3, [pc, #172]	; (8be0 <_spi_m_sync_trans+0xfc>)
    8b34:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    8b36:	2107      	movs	r1, #7
    8b38:	6a38      	ldr	r0, [r7, #32]
    8b3a:	4b2a      	ldr	r3, [pc, #168]	; (8be4 <_spi_m_sync_trans+0x100>)
    8b3c:	4798      	blx	r3
    8b3e:	4603      	mov	r3, r0
    8b40:	2b00      	cmp	r3, #0
    8b42:	d002      	beq.n	8b4a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    8b44:	f06f 0303 	mvn.w	r3, #3
    8b48:	e043      	b.n	8bd2 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    8b4a:	6a38      	ldr	r0, [r7, #32]
    8b4c:	4b26      	ldr	r3, [pc, #152]	; (8be8 <_spi_m_sync_trans+0x104>)
    8b4e:	4798      	blx	r3
    8b50:	4603      	mov	r3, r0
    8b52:	f083 0301 	eor.w	r3, r3, #1
    8b56:	b2db      	uxtb	r3, r3
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d002      	beq.n	8b62 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    8b5c:	f06f 0313 	mvn.w	r3, #19
    8b60:	e037      	b.n	8bd2 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    8b62:	6a38      	ldr	r0, [r7, #32]
    8b64:	4b21      	ldr	r3, [pc, #132]	; (8bec <_spi_m_sync_trans+0x108>)
    8b66:	4798      	blx	r3
    8b68:	4603      	mov	r3, r0
    8b6a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    8b6c:	f107 0308 	add.w	r3, r7, #8
    8b70:	461a      	mov	r2, r3
    8b72:	69f9      	ldr	r1, [r7, #28]
    8b74:	6a38      	ldr	r0, [r7, #32]
    8b76:	4b1e      	ldr	r3, [pc, #120]	; (8bf0 <_spi_m_sync_trans+0x10c>)
    8b78:	4798      	blx	r3
    8b7a:	4603      	mov	r3, r0
    8b7c:	f083 0301 	eor.w	r3, r3, #1
    8b80:	b2db      	uxtb	r3, r3
    8b82:	2b00      	cmp	r3, #0
    8b84:	d00b      	beq.n	8b9e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    8b86:	697a      	ldr	r2, [r7, #20]
    8b88:	693b      	ldr	r3, [r7, #16]
    8b8a:	429a      	cmp	r2, r3
    8b8c:	d307      	bcc.n	8b9e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    8b8e:	687b      	ldr	r3, [r7, #4]
    8b90:	88db      	ldrh	r3, [r3, #6]
    8b92:	f107 0208 	add.w	r2, r7, #8
    8b96:	69f9      	ldr	r1, [r7, #28]
    8b98:	6a38      	ldr	r0, [r7, #32]
    8b9a:	4c16      	ldr	r4, [pc, #88]	; (8bf4 <_spi_m_sync_trans+0x110>)
    8b9c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    8b9e:	6a39      	ldr	r1, [r7, #32]
    8ba0:	69f8      	ldr	r0, [r7, #28]
    8ba2:	4b15      	ldr	r3, [pc, #84]	; (8bf8 <_spi_m_sync_trans+0x114>)
    8ba4:	4798      	blx	r3
    8ba6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    8ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8baa:	2b00      	cmp	r3, #0
    8bac:	db0c      	blt.n	8bc8 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    8bae:	693a      	ldr	r2, [r7, #16]
    8bb0:	683b      	ldr	r3, [r7, #0]
    8bb2:	689b      	ldr	r3, [r3, #8]
    8bb4:	429a      	cmp	r2, r3
    8bb6:	d3d4      	bcc.n	8b62 <_spi_m_sync_trans+0x7e>
    8bb8:	697a      	ldr	r2, [r7, #20]
    8bba:	683b      	ldr	r3, [r7, #0]
    8bbc:	689b      	ldr	r3, [r3, #8]
    8bbe:	429a      	cmp	r2, r3
    8bc0:	d3cf      	bcc.n	8b62 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    8bc2:	693b      	ldr	r3, [r7, #16]
    8bc4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    8bc6:	e000      	b.n	8bca <_spi_m_sync_trans+0xe6>
			break;
    8bc8:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    8bca:	6a38      	ldr	r0, [r7, #32]
    8bcc:	4b0b      	ldr	r3, [pc, #44]	; (8bfc <_spi_m_sync_trans+0x118>)
    8bce:	4798      	blx	r3

	return rc;
    8bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8bd2:	4618      	mov	r0, r3
    8bd4:	372c      	adds	r7, #44	; 0x2c
    8bd6:	46bd      	mov	sp, r7
    8bd8:	bd90      	pop	{r4, r7, pc}
    8bda:	bf00      	nop
    8bdc:	00011598 	.word	0x00011598
    8be0:	00004f51 	.word	0x00004f51
    8be4:	000073b1 	.word	0x000073b1
    8be8:	000076c5 	.word	0x000076c5
    8bec:	0000746d 	.word	0x0000746d
    8bf0:	000089c1 	.word	0x000089c1
    8bf4:	00008a2d 	.word	0x00008a2d
    8bf8:	00008aa5 	.word	0x00008aa5
    8bfc:	00008991 	.word	0x00008991

00008c00 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    8c00:	b580      	push	{r7, lr}
    8c02:	b084      	sub	sp, #16
    8c04:	af00      	add	r7, sp, #0
    8c06:	6078      	str	r0, [r7, #4]
    8c08:	460b      	mov	r3, r1
    8c0a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    8c0c:	687b      	ldr	r3, [r7, #4]
    8c0e:	681b      	ldr	r3, [r3, #0]
    8c10:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    8c12:	687b      	ldr	r3, [r7, #4]
    8c14:	2b00      	cmp	r3, #0
    8c16:	d004      	beq.n	8c22 <_spi_m_async_enable_tx+0x22>
    8c18:	68fb      	ldr	r3, [r7, #12]
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	d001      	beq.n	8c22 <_spi_m_async_enable_tx+0x22>
    8c1e:	2301      	movs	r3, #1
    8c20:	e000      	b.n	8c24 <_spi_m_async_enable_tx+0x24>
    8c22:	2300      	movs	r3, #0
    8c24:	f003 0301 	and.w	r3, r3, #1
    8c28:	b2db      	uxtb	r3, r3
    8c2a:	f640 3279 	movw	r2, #2937	; 0xb79
    8c2e:	4909      	ldr	r1, [pc, #36]	; (8c54 <_spi_m_async_enable_tx+0x54>)
    8c30:	4618      	mov	r0, r3
    8c32:	4b09      	ldr	r3, [pc, #36]	; (8c58 <_spi_m_async_enable_tx+0x58>)
    8c34:	4798      	blx	r3

	if (state) {
    8c36:	78fb      	ldrb	r3, [r7, #3]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d003      	beq.n	8c44 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    8c3c:	68f8      	ldr	r0, [r7, #12]
    8c3e:	4b07      	ldr	r3, [pc, #28]	; (8c5c <_spi_m_async_enable_tx+0x5c>)
    8c40:	4798      	blx	r3
    8c42:	e002      	b.n	8c4a <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    8c44:	68f8      	ldr	r0, [r7, #12]
    8c46:	4b06      	ldr	r3, [pc, #24]	; (8c60 <_spi_m_async_enable_tx+0x60>)
    8c48:	4798      	blx	r3
	}

	return ERR_NONE;
    8c4a:	2300      	movs	r3, #0
}
    8c4c:	4618      	mov	r0, r3
    8c4e:	3710      	adds	r7, #16
    8c50:	46bd      	mov	sp, r7
    8c52:	bd80      	pop	{r7, pc}
    8c54:	00011598 	.word	0x00011598
    8c58:	00004f51 	.word	0x00004f51
    8c5c:	0000753b 	.word	0x0000753b
    8c60:	00007555 	.word	0x00007555

00008c64 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    8c64:	b580      	push	{r7, lr}
    8c66:	b084      	sub	sp, #16
    8c68:	af00      	add	r7, sp, #0
    8c6a:	6078      	str	r0, [r7, #4]
    8c6c:	460b      	mov	r3, r1
    8c6e:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    8c70:	687b      	ldr	r3, [r7, #4]
    8c72:	681b      	ldr	r3, [r3, #0]
    8c74:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    8c76:	687b      	ldr	r3, [r7, #4]
    8c78:	2b00      	cmp	r3, #0
    8c7a:	bf14      	ite	ne
    8c7c:	2301      	movne	r3, #1
    8c7e:	2300      	moveq	r3, #0
    8c80:	b2db      	uxtb	r3, r3
    8c82:	f640 328d 	movw	r2, #2957	; 0xb8d
    8c86:	490f      	ldr	r1, [pc, #60]	; (8cc4 <_spi_m_async_enable_rx+0x60>)
    8c88:	4618      	mov	r0, r3
    8c8a:	4b0f      	ldr	r3, [pc, #60]	; (8cc8 <_spi_m_async_enable_rx+0x64>)
    8c8c:	4798      	blx	r3
	ASSERT(hw);
    8c8e:	68fb      	ldr	r3, [r7, #12]
    8c90:	2b00      	cmp	r3, #0
    8c92:	bf14      	ite	ne
    8c94:	2301      	movne	r3, #1
    8c96:	2300      	moveq	r3, #0
    8c98:	b2db      	uxtb	r3, r3
    8c9a:	f640 328e 	movw	r2, #2958	; 0xb8e
    8c9e:	4909      	ldr	r1, [pc, #36]	; (8cc4 <_spi_m_async_enable_rx+0x60>)
    8ca0:	4618      	mov	r0, r3
    8ca2:	4b09      	ldr	r3, [pc, #36]	; (8cc8 <_spi_m_async_enable_rx+0x64>)
    8ca4:	4798      	blx	r3

	if (state) {
    8ca6:	78fb      	ldrb	r3, [r7, #3]
    8ca8:	2b00      	cmp	r3, #0
    8caa:	d003      	beq.n	8cb4 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    8cac:	68f8      	ldr	r0, [r7, #12]
    8cae:	4b07      	ldr	r3, [pc, #28]	; (8ccc <_spi_m_async_enable_rx+0x68>)
    8cb0:	4798      	blx	r3
    8cb2:	e002      	b.n	8cba <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    8cb4:	68f8      	ldr	r0, [r7, #12]
    8cb6:	4b06      	ldr	r3, [pc, #24]	; (8cd0 <_spi_m_async_enable_rx+0x6c>)
    8cb8:	4798      	blx	r3
	}

	return ERR_NONE;
    8cba:	2300      	movs	r3, #0
}
    8cbc:	4618      	mov	r0, r3
    8cbe:	3710      	adds	r7, #16
    8cc0:	46bd      	mov	sp, r7
    8cc2:	bd80      	pop	{r7, pc}
    8cc4:	00011598 	.word	0x00011598
    8cc8:	00004f51 	.word	0x00004f51
    8ccc:	000075a3 	.word	0x000075a3
    8cd0:	000075bd 	.word	0x000075bd

00008cd4 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    8cd4:	b580      	push	{r7, lr}
    8cd6:	b082      	sub	sp, #8
    8cd8:	af00      	add	r7, sp, #0
    8cda:	6078      	str	r0, [r7, #4]
    8cdc:	460b      	mov	r3, r1
    8cde:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    8ce0:	687b      	ldr	r3, [r7, #4]
    8ce2:	2b00      	cmp	r3, #0
    8ce4:	d005      	beq.n	8cf2 <_spi_m_async_enable_tx_complete+0x1e>
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	681b      	ldr	r3, [r3, #0]
    8cea:	2b00      	cmp	r3, #0
    8cec:	d001      	beq.n	8cf2 <_spi_m_async_enable_tx_complete+0x1e>
    8cee:	2301      	movs	r3, #1
    8cf0:	e000      	b.n	8cf4 <_spi_m_async_enable_tx_complete+0x20>
    8cf2:	2300      	movs	r3, #0
    8cf4:	f003 0301 	and.w	r3, r3, #1
    8cf8:	b2db      	uxtb	r3, r3
    8cfa:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    8cfe:	490b      	ldr	r1, [pc, #44]	; (8d2c <_spi_m_async_enable_tx_complete+0x58>)
    8d00:	4618      	mov	r0, r3
    8d02:	4b0b      	ldr	r3, [pc, #44]	; (8d30 <_spi_m_async_enable_tx_complete+0x5c>)
    8d04:	4798      	blx	r3

	if (state) {
    8d06:	78fb      	ldrb	r3, [r7, #3]
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d005      	beq.n	8d18 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    8d0c:	687b      	ldr	r3, [r7, #4]
    8d0e:	681b      	ldr	r3, [r3, #0]
    8d10:	4618      	mov	r0, r3
    8d12:	4b08      	ldr	r3, [pc, #32]	; (8d34 <_spi_m_async_enable_tx_complete+0x60>)
    8d14:	4798      	blx	r3
    8d16:	e004      	b.n	8d22 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    8d18:	687b      	ldr	r3, [r7, #4]
    8d1a:	681b      	ldr	r3, [r3, #0]
    8d1c:	4618      	mov	r0, r3
    8d1e:	4b06      	ldr	r3, [pc, #24]	; (8d38 <_spi_m_async_enable_tx_complete+0x64>)
    8d20:	4798      	blx	r3
	}

	return ERR_NONE;
    8d22:	2300      	movs	r3, #0
}
    8d24:	4618      	mov	r0, r3
    8d26:	3708      	adds	r7, #8
    8d28:	46bd      	mov	sp, r7
    8d2a:	bd80      	pop	{r7, pc}
    8d2c:	00011598 	.word	0x00011598
    8d30:	00004f51 	.word	0x00004f51
    8d34:	0000756f 	.word	0x0000756f
    8d38:	00007589 	.word	0x00007589

00008d3c <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    8d3c:	b580      	push	{r7, lr}
    8d3e:	b082      	sub	sp, #8
    8d40:	af00      	add	r7, sp, #0
    8d42:	6078      	str	r0, [r7, #4]
    8d44:	460b      	mov	r3, r1
    8d46:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d005      	beq.n	8d5a <_spi_m_async_write_one+0x1e>
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	681b      	ldr	r3, [r3, #0]
    8d52:	2b00      	cmp	r3, #0
    8d54:	d001      	beq.n	8d5a <_spi_m_async_write_one+0x1e>
    8d56:	2301      	movs	r3, #1
    8d58:	e000      	b.n	8d5c <_spi_m_async_write_one+0x20>
    8d5a:	2300      	movs	r3, #0
    8d5c:	f003 0301 	and.w	r3, r3, #1
    8d60:	b2db      	uxtb	r3, r3
    8d62:	f640 32b2 	movw	r2, #2994	; 0xbb2
    8d66:	4908      	ldr	r1, [pc, #32]	; (8d88 <_spi_m_async_write_one+0x4c>)
    8d68:	4618      	mov	r0, r3
    8d6a:	4b08      	ldr	r3, [pc, #32]	; (8d8c <_spi_m_async_write_one+0x50>)
    8d6c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    8d6e:	687b      	ldr	r3, [r7, #4]
    8d70:	681b      	ldr	r3, [r3, #0]
    8d72:	887a      	ldrh	r2, [r7, #2]
    8d74:	4611      	mov	r1, r2
    8d76:	4618      	mov	r0, r3
    8d78:	4b05      	ldr	r3, [pc, #20]	; (8d90 <_spi_m_async_write_one+0x54>)
    8d7a:	4798      	blx	r3

	return ERR_NONE;
    8d7c:	2300      	movs	r3, #0
}
    8d7e:	4618      	mov	r0, r3
    8d80:	3708      	adds	r7, #8
    8d82:	46bd      	mov	sp, r7
    8d84:	bd80      	pop	{r7, pc}
    8d86:	bf00      	nop
    8d88:	00011598 	.word	0x00011598
    8d8c:	00004f51 	.word	0x00004f51
    8d90:	000079b1 	.word	0x000079b1

00008d94 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    8d94:	b580      	push	{r7, lr}
    8d96:	b082      	sub	sp, #8
    8d98:	af00      	add	r7, sp, #0
    8d9a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8d9c:	687b      	ldr	r3, [r7, #4]
    8d9e:	2b00      	cmp	r3, #0
    8da0:	d005      	beq.n	8dae <_spi_m_async_read_one+0x1a>
    8da2:	687b      	ldr	r3, [r7, #4]
    8da4:	681b      	ldr	r3, [r3, #0]
    8da6:	2b00      	cmp	r3, #0
    8da8:	d001      	beq.n	8dae <_spi_m_async_read_one+0x1a>
    8daa:	2301      	movs	r3, #1
    8dac:	e000      	b.n	8db0 <_spi_m_async_read_one+0x1c>
    8dae:	2300      	movs	r3, #0
    8db0:	f003 0301 	and.w	r3, r3, #1
    8db4:	b2db      	uxtb	r3, r3
    8db6:	f640 32cd 	movw	r2, #3021	; 0xbcd
    8dba:	4907      	ldr	r1, [pc, #28]	; (8dd8 <_spi_m_async_read_one+0x44>)
    8dbc:	4618      	mov	r0, r3
    8dbe:	4b07      	ldr	r3, [pc, #28]	; (8ddc <_spi_m_async_read_one+0x48>)
    8dc0:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	681b      	ldr	r3, [r3, #0]
    8dc6:	4618      	mov	r0, r3
    8dc8:	4b05      	ldr	r3, [pc, #20]	; (8de0 <_spi_m_async_read_one+0x4c>)
    8dca:	4798      	blx	r3
    8dcc:	4603      	mov	r3, r0
    8dce:	b29b      	uxth	r3, r3
}
    8dd0:	4618      	mov	r0, r3
    8dd2:	3708      	adds	r7, #8
    8dd4:	46bd      	mov	sp, r7
    8dd6:	bd80      	pop	{r7, pc}
    8dd8:	00011598 	.word	0x00011598
    8ddc:	00004f51 	.word	0x00004f51
    8de0:	000079cd 	.word	0x000079cd

00008de4 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    8de4:	b580      	push	{r7, lr}
    8de6:	b086      	sub	sp, #24
    8de8:	af00      	add	r7, sp, #0
    8dea:	60f8      	str	r0, [r7, #12]
    8dec:	460b      	mov	r3, r1
    8dee:	607a      	str	r2, [r7, #4]
    8df0:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    8df2:	68fb      	ldr	r3, [r7, #12]
    8df4:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    8df6:	68fb      	ldr	r3, [r7, #12]
    8df8:	2b00      	cmp	r3, #0
    8dfa:	d004      	beq.n	8e06 <_spi_m_async_register_callback+0x22>
    8dfc:	7afb      	ldrb	r3, [r7, #11]
    8dfe:	2b03      	cmp	r3, #3
    8e00:	d801      	bhi.n	8e06 <_spi_m_async_register_callback+0x22>
    8e02:	2301      	movs	r3, #1
    8e04:	e000      	b.n	8e08 <_spi_m_async_register_callback+0x24>
    8e06:	2300      	movs	r3, #0
    8e08:	f003 0301 	and.w	r3, r3, #1
    8e0c:	b2db      	uxtb	r3, r3
    8e0e:	f640 32e6 	movw	r2, #3046	; 0xbe6
    8e12:	4909      	ldr	r1, [pc, #36]	; (8e38 <_spi_m_async_register_callback+0x54>)
    8e14:	4618      	mov	r0, r3
    8e16:	4b09      	ldr	r3, [pc, #36]	; (8e3c <_spi_m_async_register_callback+0x58>)
    8e18:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    8e1a:	697b      	ldr	r3, [r7, #20]
    8e1c:	3308      	adds	r3, #8
    8e1e:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    8e20:	7afb      	ldrb	r3, [r7, #11]
    8e22:	009b      	lsls	r3, r3, #2
    8e24:	693a      	ldr	r2, [r7, #16]
    8e26:	4413      	add	r3, r2
    8e28:	687a      	ldr	r2, [r7, #4]
    8e2a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8e2c:	2300      	movs	r3, #0
}
    8e2e:	4618      	mov	r0, r3
    8e30:	3718      	adds	r7, #24
    8e32:	46bd      	mov	sp, r7
    8e34:	bd80      	pop	{r7, pc}
    8e36:	bf00      	nop
    8e38:	00011598 	.word	0x00011598
    8e3c:	00004f51 	.word	0x00004f51

00008e40 <__NVIC_EnableIRQ>:
{
    8e40:	b480      	push	{r7}
    8e42:	b083      	sub	sp, #12
    8e44:	af00      	add	r7, sp, #0
    8e46:	4603      	mov	r3, r0
    8e48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e4e:	2b00      	cmp	r3, #0
    8e50:	db0b      	blt.n	8e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e52:	4909      	ldr	r1, [pc, #36]	; (8e78 <__NVIC_EnableIRQ+0x38>)
    8e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e58:	095b      	lsrs	r3, r3, #5
    8e5a:	88fa      	ldrh	r2, [r7, #6]
    8e5c:	f002 021f 	and.w	r2, r2, #31
    8e60:	2001      	movs	r0, #1
    8e62:	fa00 f202 	lsl.w	r2, r0, r2
    8e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e6a:	bf00      	nop
    8e6c:	370c      	adds	r7, #12
    8e6e:	46bd      	mov	sp, r7
    8e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e74:	4770      	bx	lr
    8e76:	bf00      	nop
    8e78:	e000e100 	.word	0xe000e100

00008e7c <__NVIC_DisableIRQ>:
{
    8e7c:	b480      	push	{r7}
    8e7e:	b083      	sub	sp, #12
    8e80:	af00      	add	r7, sp, #0
    8e82:	4603      	mov	r3, r0
    8e84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e8a:	2b00      	cmp	r3, #0
    8e8c:	db10      	blt.n	8eb0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e8e:	490b      	ldr	r1, [pc, #44]	; (8ebc <__NVIC_DisableIRQ+0x40>)
    8e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e94:	095b      	lsrs	r3, r3, #5
    8e96:	88fa      	ldrh	r2, [r7, #6]
    8e98:	f002 021f 	and.w	r2, r2, #31
    8e9c:	2001      	movs	r0, #1
    8e9e:	fa00 f202 	lsl.w	r2, r0, r2
    8ea2:	3320      	adds	r3, #32
    8ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8eac:	f3bf 8f6f 	isb	sy
}
    8eb0:	bf00      	nop
    8eb2:	370c      	adds	r7, #12
    8eb4:	46bd      	mov	sp, r7
    8eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eba:	4770      	bx	lr
    8ebc:	e000e100 	.word	0xe000e100

00008ec0 <__NVIC_ClearPendingIRQ>:
{
    8ec0:	b480      	push	{r7}
    8ec2:	b083      	sub	sp, #12
    8ec4:	af00      	add	r7, sp, #0
    8ec6:	4603      	mov	r3, r0
    8ec8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ece:	2b00      	cmp	r3, #0
    8ed0:	db0c      	blt.n	8eec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ed2:	4909      	ldr	r1, [pc, #36]	; (8ef8 <__NVIC_ClearPendingIRQ+0x38>)
    8ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ed8:	095b      	lsrs	r3, r3, #5
    8eda:	88fa      	ldrh	r2, [r7, #6]
    8edc:	f002 021f 	and.w	r2, r2, #31
    8ee0:	2001      	movs	r0, #1
    8ee2:	fa00 f202 	lsl.w	r2, r0, r2
    8ee6:	3360      	adds	r3, #96	; 0x60
    8ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8eec:	bf00      	nop
    8eee:	370c      	adds	r7, #12
    8ef0:	46bd      	mov	sp, r7
    8ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ef6:	4770      	bx	lr
    8ef8:	e000e100 	.word	0xe000e100

00008efc <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8efc:	b480      	push	{r7}
    8efe:	b083      	sub	sp, #12
    8f00:	af00      	add	r7, sp, #0
    8f02:	6078      	str	r0, [r7, #4]
    8f04:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8f06:	bf00      	nop
    8f08:	687b      	ldr	r3, [r7, #4]
    8f0a:	691a      	ldr	r2, [r3, #16]
    8f0c:	683b      	ldr	r3, [r7, #0]
    8f0e:	4013      	ands	r3, r2
    8f10:	2b00      	cmp	r3, #0
    8f12:	d1f9      	bne.n	8f08 <hri_tc_wait_for_sync+0xc>
	};
}
    8f14:	bf00      	nop
    8f16:	370c      	adds	r7, #12
    8f18:	46bd      	mov	sp, r7
    8f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f1e:	4770      	bx	lr

00008f20 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8f20:	b480      	push	{r7}
    8f22:	b083      	sub	sp, #12
    8f24:	af00      	add	r7, sp, #0
    8f26:	6078      	str	r0, [r7, #4]
    8f28:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    8f2a:	687b      	ldr	r3, [r7, #4]
    8f2c:	691a      	ldr	r2, [r3, #16]
    8f2e:	683b      	ldr	r3, [r7, #0]
    8f30:	4013      	ands	r3, r2
    8f32:	2b00      	cmp	r3, #0
    8f34:	bf14      	ite	ne
    8f36:	2301      	movne	r3, #1
    8f38:	2300      	moveq	r3, #0
    8f3a:	b2db      	uxtb	r3, r3
}
    8f3c:	4618      	mov	r0, r3
    8f3e:	370c      	adds	r7, #12
    8f40:	46bd      	mov	sp, r7
    8f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f46:	4770      	bx	lr

00008f48 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8f48:	b480      	push	{r7}
    8f4a:	b083      	sub	sp, #12
    8f4c:	af00      	add	r7, sp, #0
    8f4e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8f50:	687b      	ldr	r3, [r7, #4]
    8f52:	7a9b      	ldrb	r3, [r3, #10]
    8f54:	b2db      	uxtb	r3, r3
    8f56:	f003 0301 	and.w	r3, r3, #1
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	bf14      	ite	ne
    8f5e:	2301      	movne	r3, #1
    8f60:	2300      	moveq	r3, #0
    8f62:	b2db      	uxtb	r3, r3
}
    8f64:	4618      	mov	r0, r3
    8f66:	370c      	adds	r7, #12
    8f68:	46bd      	mov	sp, r7
    8f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f6e:	4770      	bx	lr

00008f70 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8f70:	b480      	push	{r7}
    8f72:	b083      	sub	sp, #12
    8f74:	af00      	add	r7, sp, #0
    8f76:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	2201      	movs	r2, #1
    8f7c:	729a      	strb	r2, [r3, #10]
}
    8f7e:	bf00      	nop
    8f80:	370c      	adds	r7, #12
    8f82:	46bd      	mov	sp, r7
    8f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f88:	4770      	bx	lr

00008f8a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    8f8a:	b480      	push	{r7}
    8f8c:	b083      	sub	sp, #12
    8f8e:	af00      	add	r7, sp, #0
    8f90:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    8f92:	687b      	ldr	r3, [r7, #4]
    8f94:	2202      	movs	r2, #2
    8f96:	729a      	strb	r2, [r3, #10]
}
    8f98:	bf00      	nop
    8f9a:	370c      	adds	r7, #12
    8f9c:	46bd      	mov	sp, r7
    8f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fa2:	4770      	bx	lr

00008fa4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    8fa4:	b480      	push	{r7}
    8fa6:	b083      	sub	sp, #12
    8fa8:	af00      	add	r7, sp, #0
    8faa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	2201      	movs	r2, #1
    8fb0:	725a      	strb	r2, [r3, #9]
}
    8fb2:	bf00      	nop
    8fb4:	370c      	adds	r7, #12
    8fb6:	46bd      	mov	sp, r7
    8fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fbc:	4770      	bx	lr

00008fbe <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    8fbe:	b480      	push	{r7}
    8fc0:	b083      	sub	sp, #12
    8fc2:	af00      	add	r7, sp, #0
    8fc4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    8fc6:	687b      	ldr	r3, [r7, #4]
    8fc8:	7a5b      	ldrb	r3, [r3, #9]
    8fca:	b2db      	uxtb	r3, r3
    8fcc:	085b      	lsrs	r3, r3, #1
    8fce:	f003 0301 	and.w	r3, r3, #1
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	bf14      	ite	ne
    8fd6:	2301      	movne	r3, #1
    8fd8:	2300      	moveq	r3, #0
    8fda:	b2db      	uxtb	r3, r3
}
    8fdc:	4618      	mov	r0, r3
    8fde:	370c      	adds	r7, #12
    8fe0:	46bd      	mov	sp, r7
    8fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fe6:	4770      	bx	lr

00008fe8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8fe8:	b580      	push	{r7, lr}
    8fea:	b082      	sub	sp, #8
    8fec:	af00      	add	r7, sp, #0
    8fee:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8ff0:	687b      	ldr	r3, [r7, #4]
    8ff2:	681b      	ldr	r3, [r3, #0]
    8ff4:	f043 0202 	orr.w	r2, r3, #2
    8ff8:	687b      	ldr	r3, [r7, #4]
    8ffa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8ffc:	2103      	movs	r1, #3
    8ffe:	6878      	ldr	r0, [r7, #4]
    9000:	4b02      	ldr	r3, [pc, #8]	; (900c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    9002:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9004:	bf00      	nop
    9006:	3708      	adds	r7, #8
    9008:	46bd      	mov	sp, r7
    900a:	bd80      	pop	{r7, pc}
    900c:	00008efd 	.word	0x00008efd

00009010 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9010:	b580      	push	{r7, lr}
    9012:	b084      	sub	sp, #16
    9014:	af00      	add	r7, sp, #0
    9016:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9018:	2103      	movs	r1, #3
    901a:	6878      	ldr	r0, [r7, #4]
    901c:	4b09      	ldr	r3, [pc, #36]	; (9044 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    901e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9020:	687b      	ldr	r3, [r7, #4]
    9022:	681b      	ldr	r3, [r3, #0]
    9024:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    9026:	68fb      	ldr	r3, [r7, #12]
    9028:	085b      	lsrs	r3, r3, #1
    902a:	f003 0301 	and.w	r3, r3, #1
    902e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9030:	68fb      	ldr	r3, [r7, #12]
    9032:	2b00      	cmp	r3, #0
    9034:	bf14      	ite	ne
    9036:	2301      	movne	r3, #1
    9038:	2300      	moveq	r3, #0
    903a:	b2db      	uxtb	r3, r3
}
    903c:	4618      	mov	r0, r3
    903e:	3710      	adds	r7, #16
    9040:	46bd      	mov	sp, r7
    9042:	bd80      	pop	{r7, pc}
    9044:	00008efd 	.word	0x00008efd

00009048 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9048:	b580      	push	{r7, lr}
    904a:	b082      	sub	sp, #8
    904c:	af00      	add	r7, sp, #0
    904e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9050:	687b      	ldr	r3, [r7, #4]
    9052:	681b      	ldr	r3, [r3, #0]
    9054:	f023 0202 	bic.w	r2, r3, #2
    9058:	687b      	ldr	r3, [r7, #4]
    905a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    905c:	2103      	movs	r1, #3
    905e:	6878      	ldr	r0, [r7, #4]
    9060:	4b02      	ldr	r3, [pc, #8]	; (906c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    9062:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9064:	bf00      	nop
    9066:	3708      	adds	r7, #8
    9068:	46bd      	mov	sp, r7
    906a:	bd80      	pop	{r7, pc}
    906c:	00008efd 	.word	0x00008efd

00009070 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    9070:	b580      	push	{r7, lr}
    9072:	b084      	sub	sp, #16
    9074:	af00      	add	r7, sp, #0
    9076:	6078      	str	r0, [r7, #4]
    9078:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    907a:	2103      	movs	r1, #3
    907c:	6878      	ldr	r0, [r7, #4]
    907e:	4b07      	ldr	r3, [pc, #28]	; (909c <hri_tc_get_CTRLA_reg+0x2c>)
    9080:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	681b      	ldr	r3, [r3, #0]
    9086:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9088:	68fa      	ldr	r2, [r7, #12]
    908a:	683b      	ldr	r3, [r7, #0]
    908c:	4013      	ands	r3, r2
    908e:	60fb      	str	r3, [r7, #12]
	return tmp;
    9090:	68fb      	ldr	r3, [r7, #12]
}
    9092:	4618      	mov	r0, r3
    9094:	3710      	adds	r7, #16
    9096:	46bd      	mov	sp, r7
    9098:	bd80      	pop	{r7, pc}
    909a:	bf00      	nop
    909c:	00008efd 	.word	0x00008efd

000090a0 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    90a0:	b580      	push	{r7, lr}
    90a2:	b082      	sub	sp, #8
    90a4:	af00      	add	r7, sp, #0
    90a6:	6078      	str	r0, [r7, #4]
    90a8:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	683a      	ldr	r2, [r7, #0]
    90ae:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    90b0:	2103      	movs	r1, #3
    90b2:	6878      	ldr	r0, [r7, #4]
    90b4:	4b02      	ldr	r3, [pc, #8]	; (90c0 <hri_tc_write_CTRLA_reg+0x20>)
    90b6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    90b8:	bf00      	nop
    90ba:	3708      	adds	r7, #8
    90bc:	46bd      	mov	sp, r7
    90be:	bd80      	pop	{r7, pc}
    90c0:	00008efd 	.word	0x00008efd

000090c4 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    90c4:	b480      	push	{r7}
    90c6:	b083      	sub	sp, #12
    90c8:	af00      	add	r7, sp, #0
    90ca:	6078      	str	r0, [r7, #4]
    90cc:	460b      	mov	r3, r1
    90ce:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	887a      	ldrh	r2, [r7, #2]
    90d4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    90d6:	bf00      	nop
    90d8:	370c      	adds	r7, #12
    90da:	46bd      	mov	sp, r7
    90dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e0:	4770      	bx	lr

000090e2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    90e2:	b480      	push	{r7}
    90e4:	b083      	sub	sp, #12
    90e6:	af00      	add	r7, sp, #0
    90e8:	6078      	str	r0, [r7, #4]
    90ea:	460b      	mov	r3, r1
    90ec:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    90ee:	687b      	ldr	r3, [r7, #4]
    90f0:	78fa      	ldrb	r2, [r7, #3]
    90f2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    90f4:	bf00      	nop
    90f6:	370c      	adds	r7, #12
    90f8:	46bd      	mov	sp, r7
    90fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fe:	4770      	bx	lr

00009100 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    9100:	b480      	push	{r7}
    9102:	b083      	sub	sp, #12
    9104:	af00      	add	r7, sp, #0
    9106:	6078      	str	r0, [r7, #4]
    9108:	460b      	mov	r3, r1
    910a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    910c:	687b      	ldr	r3, [r7, #4]
    910e:	78fa      	ldrb	r2, [r7, #3]
    9110:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    9112:	bf00      	nop
    9114:	370c      	adds	r7, #12
    9116:	46bd      	mov	sp, r7
    9118:	f85d 7b04 	ldr.w	r7, [sp], #4
    911c:	4770      	bx	lr
	...

00009120 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    9120:	b580      	push	{r7, lr}
    9122:	b082      	sub	sp, #8
    9124:	af00      	add	r7, sp, #0
    9126:	6078      	str	r0, [r7, #4]
    9128:	460b      	mov	r3, r1
    912a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    912c:	687b      	ldr	r3, [r7, #4]
    912e:	78fa      	ldrb	r2, [r7, #3]
    9130:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    9132:	2120      	movs	r1, #32
    9134:	6878      	ldr	r0, [r7, #4]
    9136:	4b03      	ldr	r3, [pc, #12]	; (9144 <hri_tccount8_write_PER_reg+0x24>)
    9138:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    913a:	bf00      	nop
    913c:	3708      	adds	r7, #8
    913e:	46bd      	mov	sp, r7
    9140:	bd80      	pop	{r7, pc}
    9142:	bf00      	nop
    9144:	00008efd 	.word	0x00008efd

00009148 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    9148:	b580      	push	{r7, lr}
    914a:	b082      	sub	sp, #8
    914c:	af00      	add	r7, sp, #0
    914e:	6078      	str	r0, [r7, #4]
    9150:	460b      	mov	r3, r1
    9152:	70fb      	strb	r3, [r7, #3]
    9154:	4613      	mov	r3, r2
    9156:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9158:	78fb      	ldrb	r3, [r7, #3]
    915a:	687a      	ldr	r2, [r7, #4]
    915c:	4413      	add	r3, r2
    915e:	78ba      	ldrb	r2, [r7, #2]
    9160:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9162:	21c0      	movs	r1, #192	; 0xc0
    9164:	6878      	ldr	r0, [r7, #4]
    9166:	4b03      	ldr	r3, [pc, #12]	; (9174 <hri_tccount8_write_CC_reg+0x2c>)
    9168:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    916a:	bf00      	nop
    916c:	3708      	adds	r7, #8
    916e:	46bd      	mov	sp, r7
    9170:	bd80      	pop	{r7, pc}
    9172:	bf00      	nop
    9174:	00008efd 	.word	0x00008efd

00009178 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    9178:	b580      	push	{r7, lr}
    917a:	b082      	sub	sp, #8
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
    9180:	460b      	mov	r3, r1
    9182:	70fb      	strb	r3, [r7, #3]
    9184:	4613      	mov	r3, r2
    9186:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    9188:	78fb      	ldrb	r3, [r7, #3]
    918a:	687a      	ldr	r2, [r7, #4]
    918c:	330c      	adds	r3, #12
    918e:	005b      	lsls	r3, r3, #1
    9190:	4413      	add	r3, r2
    9192:	883a      	ldrh	r2, [r7, #0]
    9194:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9196:	21c0      	movs	r1, #192	; 0xc0
    9198:	6878      	ldr	r0, [r7, #4]
    919a:	4b03      	ldr	r3, [pc, #12]	; (91a8 <hri_tccount16_write_CC_reg+0x30>)
    919c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    919e:	bf00      	nop
    91a0:	3708      	adds	r7, #8
    91a2:	46bd      	mov	sp, r7
    91a4:	bd80      	pop	{r7, pc}
    91a6:	bf00      	nop
    91a8:	00008efd 	.word	0x00008efd

000091ac <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    91ac:	b580      	push	{r7, lr}
    91ae:	b084      	sub	sp, #16
    91b0:	af00      	add	r7, sp, #0
    91b2:	60f8      	str	r0, [r7, #12]
    91b4:	460b      	mov	r3, r1
    91b6:	607a      	str	r2, [r7, #4]
    91b8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    91ba:	7afb      	ldrb	r3, [r7, #11]
    91bc:	68fa      	ldr	r2, [r7, #12]
    91be:	3306      	adds	r3, #6
    91c0:	009b      	lsls	r3, r3, #2
    91c2:	4413      	add	r3, r2
    91c4:	687a      	ldr	r2, [r7, #4]
    91c6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    91c8:	21c0      	movs	r1, #192	; 0xc0
    91ca:	68f8      	ldr	r0, [r7, #12]
    91cc:	4b02      	ldr	r3, [pc, #8]	; (91d8 <hri_tccount32_write_CC_reg+0x2c>)
    91ce:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    91d0:	bf00      	nop
    91d2:	3710      	adds	r7, #16
    91d4:	46bd      	mov	sp, r7
    91d6:	bd80      	pop	{r7, pc}
    91d8:	00008efd 	.word	0x00008efd

000091dc <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    91dc:	b580      	push	{r7, lr}
    91de:	b084      	sub	sp, #16
    91e0:	af00      	add	r7, sp, #0
    91e2:	6078      	str	r0, [r7, #4]
    91e4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    91e6:	6838      	ldr	r0, [r7, #0]
    91e8:	4b93      	ldr	r3, [pc, #588]	; (9438 <_timer_init+0x25c>)
    91ea:	4798      	blx	r3
    91ec:	4603      	mov	r3, r0
    91ee:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    91f0:	687b      	ldr	r3, [r7, #4]
    91f2:	683a      	ldr	r2, [r7, #0]
    91f4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    91f6:	2295      	movs	r2, #149	; 0x95
    91f8:	4990      	ldr	r1, [pc, #576]	; (943c <_timer_init+0x260>)
    91fa:	2001      	movs	r0, #1
    91fc:	4b90      	ldr	r3, [pc, #576]	; (9440 <_timer_init+0x264>)
    91fe:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9200:	2101      	movs	r1, #1
    9202:	6838      	ldr	r0, [r7, #0]
    9204:	4b8f      	ldr	r3, [pc, #572]	; (9444 <_timer_init+0x268>)
    9206:	4798      	blx	r3
    9208:	4603      	mov	r3, r0
    920a:	f083 0301 	eor.w	r3, r3, #1
    920e:	b2db      	uxtb	r3, r3
    9210:	2b00      	cmp	r3, #0
    9212:	d011      	beq.n	9238 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9214:	2102      	movs	r1, #2
    9216:	6838      	ldr	r0, [r7, #0]
    9218:	4b8b      	ldr	r3, [pc, #556]	; (9448 <_timer_init+0x26c>)
    921a:	4798      	blx	r3
    921c:	4603      	mov	r3, r0
    921e:	2b00      	cmp	r3, #0
    9220:	d006      	beq.n	9230 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9222:	6838      	ldr	r0, [r7, #0]
    9224:	4b89      	ldr	r3, [pc, #548]	; (944c <_timer_init+0x270>)
    9226:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9228:	2102      	movs	r1, #2
    922a:	6838      	ldr	r0, [r7, #0]
    922c:	4b88      	ldr	r3, [pc, #544]	; (9450 <_timer_init+0x274>)
    922e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9230:	2101      	movs	r1, #1
    9232:	6838      	ldr	r0, [r7, #0]
    9234:	4b87      	ldr	r3, [pc, #540]	; (9454 <_timer_init+0x278>)
    9236:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9238:	2101      	movs	r1, #1
    923a:	6838      	ldr	r0, [r7, #0]
    923c:	4b84      	ldr	r3, [pc, #528]	; (9450 <_timer_init+0x274>)
    923e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9240:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9244:	4984      	ldr	r1, [pc, #528]	; (9458 <_timer_init+0x27c>)
    9246:	4613      	mov	r3, r2
    9248:	009b      	lsls	r3, r3, #2
    924a:	4413      	add	r3, r2
    924c:	009b      	lsls	r3, r3, #2
    924e:	440b      	add	r3, r1
    9250:	3304      	adds	r3, #4
    9252:	681b      	ldr	r3, [r3, #0]
    9254:	4619      	mov	r1, r3
    9256:	6838      	ldr	r0, [r7, #0]
    9258:	4b7e      	ldr	r3, [pc, #504]	; (9454 <_timer_init+0x278>)
    925a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    925c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9260:	497d      	ldr	r1, [pc, #500]	; (9458 <_timer_init+0x27c>)
    9262:	4613      	mov	r3, r2
    9264:	009b      	lsls	r3, r3, #2
    9266:	4413      	add	r3, r2
    9268:	009b      	lsls	r3, r3, #2
    926a:	440b      	add	r3, r1
    926c:	330a      	adds	r3, #10
    926e:	781b      	ldrb	r3, [r3, #0]
    9270:	4619      	mov	r1, r3
    9272:	6838      	ldr	r0, [r7, #0]
    9274:	4b79      	ldr	r3, [pc, #484]	; (945c <_timer_init+0x280>)
    9276:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9278:	f997 200f 	ldrsb.w	r2, [r7, #15]
    927c:	4976      	ldr	r1, [pc, #472]	; (9458 <_timer_init+0x27c>)
    927e:	4613      	mov	r3, r2
    9280:	009b      	lsls	r3, r3, #2
    9282:	4413      	add	r3, r2
    9284:	009b      	lsls	r3, r3, #2
    9286:	440b      	add	r3, r1
    9288:	3308      	adds	r3, #8
    928a:	881b      	ldrh	r3, [r3, #0]
    928c:	4619      	mov	r1, r3
    928e:	6838      	ldr	r0, [r7, #0]
    9290:	4b73      	ldr	r3, [pc, #460]	; (9460 <_timer_init+0x284>)
    9292:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    9294:	2101      	movs	r1, #1
    9296:	6838      	ldr	r0, [r7, #0]
    9298:	4b72      	ldr	r3, [pc, #456]	; (9464 <_timer_init+0x288>)
    929a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    929c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    92a0:	496d      	ldr	r1, [pc, #436]	; (9458 <_timer_init+0x27c>)
    92a2:	4613      	mov	r3, r2
    92a4:	009b      	lsls	r3, r3, #2
    92a6:	4413      	add	r3, r2
    92a8:	009b      	lsls	r3, r3, #2
    92aa:	440b      	add	r3, r1
    92ac:	3304      	adds	r3, #4
    92ae:	681b      	ldr	r3, [r3, #0]
    92b0:	f003 030c 	and.w	r3, r3, #12
    92b4:	2b08      	cmp	r3, #8
    92b6:	d11e      	bne.n	92f6 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    92b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    92bc:	4966      	ldr	r1, [pc, #408]	; (9458 <_timer_init+0x27c>)
    92be:	4613      	mov	r3, r2
    92c0:	009b      	lsls	r3, r3, #2
    92c2:	4413      	add	r3, r2
    92c4:	009b      	lsls	r3, r3, #2
    92c6:	440b      	add	r3, r1
    92c8:	330c      	adds	r3, #12
    92ca:	681b      	ldr	r3, [r3, #0]
    92cc:	461a      	mov	r2, r3
    92ce:	2100      	movs	r1, #0
    92d0:	6838      	ldr	r0, [r7, #0]
    92d2:	4b65      	ldr	r3, [pc, #404]	; (9468 <_timer_init+0x28c>)
    92d4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    92d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    92da:	495f      	ldr	r1, [pc, #380]	; (9458 <_timer_init+0x27c>)
    92dc:	4613      	mov	r3, r2
    92de:	009b      	lsls	r3, r3, #2
    92e0:	4413      	add	r3, r2
    92e2:	009b      	lsls	r3, r3, #2
    92e4:	440b      	add	r3, r1
    92e6:	3310      	adds	r3, #16
    92e8:	681b      	ldr	r3, [r3, #0]
    92ea:	461a      	mov	r2, r3
    92ec:	2101      	movs	r1, #1
    92ee:	6838      	ldr	r0, [r7, #0]
    92f0:	4b5d      	ldr	r3, [pc, #372]	; (9468 <_timer_init+0x28c>)
    92f2:	4798      	blx	r3
    92f4:	e06a      	b.n	93cc <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    92f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    92fa:	4957      	ldr	r1, [pc, #348]	; (9458 <_timer_init+0x27c>)
    92fc:	4613      	mov	r3, r2
    92fe:	009b      	lsls	r3, r3, #2
    9300:	4413      	add	r3, r2
    9302:	009b      	lsls	r3, r3, #2
    9304:	440b      	add	r3, r1
    9306:	3304      	adds	r3, #4
    9308:	681b      	ldr	r3, [r3, #0]
    930a:	f003 030c 	and.w	r3, r3, #12
    930e:	2b00      	cmp	r3, #0
    9310:	d120      	bne.n	9354 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9312:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9316:	4950      	ldr	r1, [pc, #320]	; (9458 <_timer_init+0x27c>)
    9318:	4613      	mov	r3, r2
    931a:	009b      	lsls	r3, r3, #2
    931c:	4413      	add	r3, r2
    931e:	009b      	lsls	r3, r3, #2
    9320:	440b      	add	r3, r1
    9322:	330c      	adds	r3, #12
    9324:	681b      	ldr	r3, [r3, #0]
    9326:	b29b      	uxth	r3, r3
    9328:	461a      	mov	r2, r3
    932a:	2100      	movs	r1, #0
    932c:	6838      	ldr	r0, [r7, #0]
    932e:	4b4f      	ldr	r3, [pc, #316]	; (946c <_timer_init+0x290>)
    9330:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9332:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9336:	4948      	ldr	r1, [pc, #288]	; (9458 <_timer_init+0x27c>)
    9338:	4613      	mov	r3, r2
    933a:	009b      	lsls	r3, r3, #2
    933c:	4413      	add	r3, r2
    933e:	009b      	lsls	r3, r3, #2
    9340:	440b      	add	r3, r1
    9342:	3310      	adds	r3, #16
    9344:	681b      	ldr	r3, [r3, #0]
    9346:	b29b      	uxth	r3, r3
    9348:	461a      	mov	r2, r3
    934a:	2101      	movs	r1, #1
    934c:	6838      	ldr	r0, [r7, #0]
    934e:	4b47      	ldr	r3, [pc, #284]	; (946c <_timer_init+0x290>)
    9350:	4798      	blx	r3
    9352:	e03b      	b.n	93cc <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    9354:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9358:	493f      	ldr	r1, [pc, #252]	; (9458 <_timer_init+0x27c>)
    935a:	4613      	mov	r3, r2
    935c:	009b      	lsls	r3, r3, #2
    935e:	4413      	add	r3, r2
    9360:	009b      	lsls	r3, r3, #2
    9362:	440b      	add	r3, r1
    9364:	3304      	adds	r3, #4
    9366:	681b      	ldr	r3, [r3, #0]
    9368:	f003 030c 	and.w	r3, r3, #12
    936c:	2b04      	cmp	r3, #4
    936e:	d12d      	bne.n	93cc <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    9370:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9374:	4938      	ldr	r1, [pc, #224]	; (9458 <_timer_init+0x27c>)
    9376:	4613      	mov	r3, r2
    9378:	009b      	lsls	r3, r3, #2
    937a:	4413      	add	r3, r2
    937c:	009b      	lsls	r3, r3, #2
    937e:	440b      	add	r3, r1
    9380:	330c      	adds	r3, #12
    9382:	681b      	ldr	r3, [r3, #0]
    9384:	b2db      	uxtb	r3, r3
    9386:	461a      	mov	r2, r3
    9388:	2100      	movs	r1, #0
    938a:	6838      	ldr	r0, [r7, #0]
    938c:	4b38      	ldr	r3, [pc, #224]	; (9470 <_timer_init+0x294>)
    938e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    9390:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9394:	4930      	ldr	r1, [pc, #192]	; (9458 <_timer_init+0x27c>)
    9396:	4613      	mov	r3, r2
    9398:	009b      	lsls	r3, r3, #2
    939a:	4413      	add	r3, r2
    939c:	009b      	lsls	r3, r3, #2
    939e:	440b      	add	r3, r1
    93a0:	3310      	adds	r3, #16
    93a2:	681b      	ldr	r3, [r3, #0]
    93a4:	b2db      	uxtb	r3, r3
    93a6:	461a      	mov	r2, r3
    93a8:	2101      	movs	r1, #1
    93aa:	6838      	ldr	r0, [r7, #0]
    93ac:	4b30      	ldr	r3, [pc, #192]	; (9470 <_timer_init+0x294>)
    93ae:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    93b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    93b4:	4928      	ldr	r1, [pc, #160]	; (9458 <_timer_init+0x27c>)
    93b6:	4613      	mov	r3, r2
    93b8:	009b      	lsls	r3, r3, #2
    93ba:	4413      	add	r3, r2
    93bc:	009b      	lsls	r3, r3, #2
    93be:	440b      	add	r3, r1
    93c0:	330b      	adds	r3, #11
    93c2:	781b      	ldrb	r3, [r3, #0]
    93c4:	4619      	mov	r1, r3
    93c6:	6838      	ldr	r0, [r7, #0]
    93c8:	4b2a      	ldr	r3, [pc, #168]	; (9474 <_timer_init+0x298>)
    93ca:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    93cc:	6838      	ldr	r0, [r7, #0]
    93ce:	4b2a      	ldr	r3, [pc, #168]	; (9478 <_timer_init+0x29c>)
    93d0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    93d2:	6879      	ldr	r1, [r7, #4]
    93d4:	6838      	ldr	r0, [r7, #0]
    93d6:	4b29      	ldr	r3, [pc, #164]	; (947c <_timer_init+0x2a0>)
    93d8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    93da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    93de:	491e      	ldr	r1, [pc, #120]	; (9458 <_timer_init+0x27c>)
    93e0:	4613      	mov	r3, r2
    93e2:	009b      	lsls	r3, r3, #2
    93e4:	4413      	add	r3, r2
    93e6:	009b      	lsls	r3, r3, #2
    93e8:	440b      	add	r3, r1
    93ea:	3302      	adds	r3, #2
    93ec:	f9b3 3000 	ldrsh.w	r3, [r3]
    93f0:	4618      	mov	r0, r3
    93f2:	4b23      	ldr	r3, [pc, #140]	; (9480 <_timer_init+0x2a4>)
    93f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    93f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    93fa:	4917      	ldr	r1, [pc, #92]	; (9458 <_timer_init+0x27c>)
    93fc:	4613      	mov	r3, r2
    93fe:	009b      	lsls	r3, r3, #2
    9400:	4413      	add	r3, r2
    9402:	009b      	lsls	r3, r3, #2
    9404:	440b      	add	r3, r1
    9406:	3302      	adds	r3, #2
    9408:	f9b3 3000 	ldrsh.w	r3, [r3]
    940c:	4618      	mov	r0, r3
    940e:	4b1d      	ldr	r3, [pc, #116]	; (9484 <_timer_init+0x2a8>)
    9410:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9412:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9416:	4910      	ldr	r1, [pc, #64]	; (9458 <_timer_init+0x27c>)
    9418:	4613      	mov	r3, r2
    941a:	009b      	lsls	r3, r3, #2
    941c:	4413      	add	r3, r2
    941e:	009b      	lsls	r3, r3, #2
    9420:	440b      	add	r3, r1
    9422:	3302      	adds	r3, #2
    9424:	f9b3 3000 	ldrsh.w	r3, [r3]
    9428:	4618      	mov	r0, r3
    942a:	4b17      	ldr	r3, [pc, #92]	; (9488 <_timer_init+0x2ac>)
    942c:	4798      	blx	r3

	return ERR_NONE;
    942e:	2300      	movs	r3, #0
}
    9430:	4618      	mov	r0, r3
    9432:	3710      	adds	r7, #16
    9434:	46bd      	mov	sp, r7
    9436:	bd80      	pop	{r7, pc}
    9438:	000098f9 	.word	0x000098f9
    943c:	000115f8 	.word	0x000115f8
    9440:	00004f51 	.word	0x00004f51
    9444:	00008f21 	.word	0x00008f21
    9448:	00009071 	.word	0x00009071
    944c:	00009049 	.word	0x00009049
    9450:	00008efd 	.word	0x00008efd
    9454:	000090a1 	.word	0x000090a1
    9458:	20000048 	.word	0x20000048
    945c:	00009101 	.word	0x00009101
    9460:	000090c5 	.word	0x000090c5
    9464:	000090e3 	.word	0x000090e3
    9468:	000091ad 	.word	0x000091ad
    946c:	00009179 	.word	0x00009179
    9470:	00009149 	.word	0x00009149
    9474:	00009121 	.word	0x00009121
    9478:	00008fa5 	.word	0x00008fa5
    947c:	00009961 	.word	0x00009961
    9480:	00008e7d 	.word	0x00008e7d
    9484:	00008ec1 	.word	0x00008ec1
    9488:	00008e41 	.word	0x00008e41

0000948c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    948c:	b580      	push	{r7, lr}
    948e:	b084      	sub	sp, #16
    9490:	af00      	add	r7, sp, #0
    9492:	6078      	str	r0, [r7, #4]
    9494:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    9496:	6838      	ldr	r0, [r7, #0]
    9498:	4b73      	ldr	r3, [pc, #460]	; (9668 <_pwm_init+0x1dc>)
    949a:	4798      	blx	r3
    949c:	4603      	mov	r3, r0
    949e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    94a0:	687b      	ldr	r3, [r7, #4]
    94a2:	683a      	ldr	r2, [r7, #0]
    94a4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    94a6:	2101      	movs	r1, #1
    94a8:	6838      	ldr	r0, [r7, #0]
    94aa:	4b70      	ldr	r3, [pc, #448]	; (966c <_pwm_init+0x1e0>)
    94ac:	4798      	blx	r3
    94ae:	4603      	mov	r3, r0
    94b0:	f083 0301 	eor.w	r3, r3, #1
    94b4:	b2db      	uxtb	r3, r3
    94b6:	2b00      	cmp	r3, #0
    94b8:	d011      	beq.n	94de <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    94ba:	2102      	movs	r1, #2
    94bc:	6838      	ldr	r0, [r7, #0]
    94be:	4b6c      	ldr	r3, [pc, #432]	; (9670 <_pwm_init+0x1e4>)
    94c0:	4798      	blx	r3
    94c2:	4603      	mov	r3, r0
    94c4:	2b00      	cmp	r3, #0
    94c6:	d006      	beq.n	94d6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    94c8:	6838      	ldr	r0, [r7, #0]
    94ca:	4b6a      	ldr	r3, [pc, #424]	; (9674 <_pwm_init+0x1e8>)
    94cc:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    94ce:	2102      	movs	r1, #2
    94d0:	6838      	ldr	r0, [r7, #0]
    94d2:	4b69      	ldr	r3, [pc, #420]	; (9678 <_pwm_init+0x1ec>)
    94d4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    94d6:	2101      	movs	r1, #1
    94d8:	6838      	ldr	r0, [r7, #0]
    94da:	4b68      	ldr	r3, [pc, #416]	; (967c <_pwm_init+0x1f0>)
    94dc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    94de:	2101      	movs	r1, #1
    94e0:	6838      	ldr	r0, [r7, #0]
    94e2:	4b65      	ldr	r3, [pc, #404]	; (9678 <_pwm_init+0x1ec>)
    94e4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    94e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    94ea:	4965      	ldr	r1, [pc, #404]	; (9680 <_pwm_init+0x1f4>)
    94ec:	4613      	mov	r3, r2
    94ee:	009b      	lsls	r3, r3, #2
    94f0:	4413      	add	r3, r2
    94f2:	009b      	lsls	r3, r3, #2
    94f4:	440b      	add	r3, r1
    94f6:	3304      	adds	r3, #4
    94f8:	681b      	ldr	r3, [r3, #0]
    94fa:	4619      	mov	r1, r3
    94fc:	6838      	ldr	r0, [r7, #0]
    94fe:	4b5f      	ldr	r3, [pc, #380]	; (967c <_pwm_init+0x1f0>)
    9500:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9502:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9506:	495e      	ldr	r1, [pc, #376]	; (9680 <_pwm_init+0x1f4>)
    9508:	4613      	mov	r3, r2
    950a:	009b      	lsls	r3, r3, #2
    950c:	4413      	add	r3, r2
    950e:	009b      	lsls	r3, r3, #2
    9510:	440b      	add	r3, r1
    9512:	330a      	adds	r3, #10
    9514:	781b      	ldrb	r3, [r3, #0]
    9516:	4619      	mov	r1, r3
    9518:	6838      	ldr	r0, [r7, #0]
    951a:	4b5a      	ldr	r3, [pc, #360]	; (9684 <_pwm_init+0x1f8>)
    951c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    951e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9522:	4957      	ldr	r1, [pc, #348]	; (9680 <_pwm_init+0x1f4>)
    9524:	4613      	mov	r3, r2
    9526:	009b      	lsls	r3, r3, #2
    9528:	4413      	add	r3, r2
    952a:	009b      	lsls	r3, r3, #2
    952c:	440b      	add	r3, r1
    952e:	3308      	adds	r3, #8
    9530:	881b      	ldrh	r3, [r3, #0]
    9532:	4619      	mov	r1, r3
    9534:	6838      	ldr	r0, [r7, #0]
    9536:	4b54      	ldr	r3, [pc, #336]	; (9688 <_pwm_init+0x1fc>)
    9538:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    953a:	2103      	movs	r1, #3
    953c:	6838      	ldr	r0, [r7, #0]
    953e:	4b53      	ldr	r3, [pc, #332]	; (968c <_pwm_init+0x200>)
    9540:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9542:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9546:	494e      	ldr	r1, [pc, #312]	; (9680 <_pwm_init+0x1f4>)
    9548:	4613      	mov	r3, r2
    954a:	009b      	lsls	r3, r3, #2
    954c:	4413      	add	r3, r2
    954e:	009b      	lsls	r3, r3, #2
    9550:	440b      	add	r3, r1
    9552:	3304      	adds	r3, #4
    9554:	681b      	ldr	r3, [r3, #0]
    9556:	f003 030c 	and.w	r3, r3, #12
    955a:	2b08      	cmp	r3, #8
    955c:	d11e      	bne.n	959c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    955e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9562:	4947      	ldr	r1, [pc, #284]	; (9680 <_pwm_init+0x1f4>)
    9564:	4613      	mov	r3, r2
    9566:	009b      	lsls	r3, r3, #2
    9568:	4413      	add	r3, r2
    956a:	009b      	lsls	r3, r3, #2
    956c:	440b      	add	r3, r1
    956e:	330c      	adds	r3, #12
    9570:	681b      	ldr	r3, [r3, #0]
    9572:	461a      	mov	r2, r3
    9574:	2100      	movs	r1, #0
    9576:	6838      	ldr	r0, [r7, #0]
    9578:	4b45      	ldr	r3, [pc, #276]	; (9690 <_pwm_init+0x204>)
    957a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    957c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9580:	493f      	ldr	r1, [pc, #252]	; (9680 <_pwm_init+0x1f4>)
    9582:	4613      	mov	r3, r2
    9584:	009b      	lsls	r3, r3, #2
    9586:	4413      	add	r3, r2
    9588:	009b      	lsls	r3, r3, #2
    958a:	440b      	add	r3, r1
    958c:	3310      	adds	r3, #16
    958e:	681b      	ldr	r3, [r3, #0]
    9590:	461a      	mov	r2, r3
    9592:	2101      	movs	r1, #1
    9594:	6838      	ldr	r0, [r7, #0]
    9596:	4b3e      	ldr	r3, [pc, #248]	; (9690 <_pwm_init+0x204>)
    9598:	4798      	blx	r3
    959a:	e031      	b.n	9600 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    959c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    95a0:	4937      	ldr	r1, [pc, #220]	; (9680 <_pwm_init+0x1f4>)
    95a2:	4613      	mov	r3, r2
    95a4:	009b      	lsls	r3, r3, #2
    95a6:	4413      	add	r3, r2
    95a8:	009b      	lsls	r3, r3, #2
    95aa:	440b      	add	r3, r1
    95ac:	3304      	adds	r3, #4
    95ae:	681b      	ldr	r3, [r3, #0]
    95b0:	f003 030c 	and.w	r3, r3, #12
    95b4:	2b00      	cmp	r3, #0
    95b6:	d120      	bne.n	95fa <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    95b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    95bc:	4930      	ldr	r1, [pc, #192]	; (9680 <_pwm_init+0x1f4>)
    95be:	4613      	mov	r3, r2
    95c0:	009b      	lsls	r3, r3, #2
    95c2:	4413      	add	r3, r2
    95c4:	009b      	lsls	r3, r3, #2
    95c6:	440b      	add	r3, r1
    95c8:	330c      	adds	r3, #12
    95ca:	681b      	ldr	r3, [r3, #0]
    95cc:	b29b      	uxth	r3, r3
    95ce:	461a      	mov	r2, r3
    95d0:	2100      	movs	r1, #0
    95d2:	6838      	ldr	r0, [r7, #0]
    95d4:	4b2f      	ldr	r3, [pc, #188]	; (9694 <_pwm_init+0x208>)
    95d6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    95d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    95dc:	4928      	ldr	r1, [pc, #160]	; (9680 <_pwm_init+0x1f4>)
    95de:	4613      	mov	r3, r2
    95e0:	009b      	lsls	r3, r3, #2
    95e2:	4413      	add	r3, r2
    95e4:	009b      	lsls	r3, r3, #2
    95e6:	440b      	add	r3, r1
    95e8:	3310      	adds	r3, #16
    95ea:	681b      	ldr	r3, [r3, #0]
    95ec:	b29b      	uxth	r3, r3
    95ee:	461a      	mov	r2, r3
    95f0:	2101      	movs	r1, #1
    95f2:	6838      	ldr	r0, [r7, #0]
    95f4:	4b27      	ldr	r3, [pc, #156]	; (9694 <_pwm_init+0x208>)
    95f6:	4798      	blx	r3
    95f8:	e002      	b.n	9600 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    95fa:	f04f 33ff 	mov.w	r3, #4294967295
    95fe:	e02e      	b.n	965e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    9600:	6879      	ldr	r1, [r7, #4]
    9602:	6838      	ldr	r0, [r7, #0]
    9604:	4b24      	ldr	r3, [pc, #144]	; (9698 <_pwm_init+0x20c>)
    9606:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9608:	f997 200f 	ldrsb.w	r2, [r7, #15]
    960c:	491c      	ldr	r1, [pc, #112]	; (9680 <_pwm_init+0x1f4>)
    960e:	4613      	mov	r3, r2
    9610:	009b      	lsls	r3, r3, #2
    9612:	4413      	add	r3, r2
    9614:	009b      	lsls	r3, r3, #2
    9616:	440b      	add	r3, r1
    9618:	3302      	adds	r3, #2
    961a:	f9b3 3000 	ldrsh.w	r3, [r3]
    961e:	4618      	mov	r0, r3
    9620:	4b1e      	ldr	r3, [pc, #120]	; (969c <_pwm_init+0x210>)
    9622:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9624:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9628:	4915      	ldr	r1, [pc, #84]	; (9680 <_pwm_init+0x1f4>)
    962a:	4613      	mov	r3, r2
    962c:	009b      	lsls	r3, r3, #2
    962e:	4413      	add	r3, r2
    9630:	009b      	lsls	r3, r3, #2
    9632:	440b      	add	r3, r1
    9634:	3302      	adds	r3, #2
    9636:	f9b3 3000 	ldrsh.w	r3, [r3]
    963a:	4618      	mov	r0, r3
    963c:	4b18      	ldr	r3, [pc, #96]	; (96a0 <_pwm_init+0x214>)
    963e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9640:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9644:	490e      	ldr	r1, [pc, #56]	; (9680 <_pwm_init+0x1f4>)
    9646:	4613      	mov	r3, r2
    9648:	009b      	lsls	r3, r3, #2
    964a:	4413      	add	r3, r2
    964c:	009b      	lsls	r3, r3, #2
    964e:	440b      	add	r3, r1
    9650:	3302      	adds	r3, #2
    9652:	f9b3 3000 	ldrsh.w	r3, [r3]
    9656:	4618      	mov	r0, r3
    9658:	4b12      	ldr	r3, [pc, #72]	; (96a4 <_pwm_init+0x218>)
    965a:	4798      	blx	r3

	return 0;
    965c:	2300      	movs	r3, #0
}
    965e:	4618      	mov	r0, r3
    9660:	3710      	adds	r7, #16
    9662:	46bd      	mov	sp, r7
    9664:	bd80      	pop	{r7, pc}
    9666:	bf00      	nop
    9668:	000098f9 	.word	0x000098f9
    966c:	00008f21 	.word	0x00008f21
    9670:	00009071 	.word	0x00009071
    9674:	00009049 	.word	0x00009049
    9678:	00008efd 	.word	0x00008efd
    967c:	000090a1 	.word	0x000090a1
    9680:	20000048 	.word	0x20000048
    9684:	00009101 	.word	0x00009101
    9688:	000090c5 	.word	0x000090c5
    968c:	000090e3 	.word	0x000090e3
    9690:	000091ad 	.word	0x000091ad
    9694:	00009179 	.word	0x00009179
    9698:	00009961 	.word	0x00009961
    969c:	00008e7d 	.word	0x00008e7d
    96a0:	00008ec1 	.word	0x00008ec1
    96a4:	00008e41 	.word	0x00008e41

000096a8 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    96a8:	b580      	push	{r7, lr}
    96aa:	b082      	sub	sp, #8
    96ac:	af00      	add	r7, sp, #0
    96ae:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    96b0:	687b      	ldr	r3, [r7, #4]
    96b2:	68db      	ldr	r3, [r3, #12]
    96b4:	4618      	mov	r0, r3
    96b6:	4b03      	ldr	r3, [pc, #12]	; (96c4 <_timer_start+0x1c>)
    96b8:	4798      	blx	r3
}
    96ba:	bf00      	nop
    96bc:	3708      	adds	r7, #8
    96be:	46bd      	mov	sp, r7
    96c0:	bd80      	pop	{r7, pc}
    96c2:	bf00      	nop
    96c4:	00008fe9 	.word	0x00008fe9

000096c8 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    96c8:	b580      	push	{r7, lr}
    96ca:	b082      	sub	sp, #8
    96cc:	af00      	add	r7, sp, #0
    96ce:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    96d0:	687b      	ldr	r3, [r7, #4]
    96d2:	691b      	ldr	r3, [r3, #16]
    96d4:	4618      	mov	r0, r3
    96d6:	4b03      	ldr	r3, [pc, #12]	; (96e4 <_pwm_enable+0x1c>)
    96d8:	4798      	blx	r3
}
    96da:	bf00      	nop
    96dc:	3708      	adds	r7, #8
    96de:	46bd      	mov	sp, r7
    96e0:	bd80      	pop	{r7, pc}
    96e2:	bf00      	nop
    96e4:	00008fe9 	.word	0x00008fe9

000096e8 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    96e8:	b580      	push	{r7, lr}
    96ea:	b082      	sub	sp, #8
    96ec:	af00      	add	r7, sp, #0
    96ee:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	68db      	ldr	r3, [r3, #12]
    96f4:	4618      	mov	r0, r3
    96f6:	4b03      	ldr	r3, [pc, #12]	; (9704 <_timer_stop+0x1c>)
    96f8:	4798      	blx	r3
}
    96fa:	bf00      	nop
    96fc:	3708      	adds	r7, #8
    96fe:	46bd      	mov	sp, r7
    9700:	bd80      	pop	{r7, pc}
    9702:	bf00      	nop
    9704:	00009049 	.word	0x00009049

00009708 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    9708:	b580      	push	{r7, lr}
    970a:	b082      	sub	sp, #8
    970c:	af00      	add	r7, sp, #0
    970e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9710:	687b      	ldr	r3, [r7, #4]
    9712:	68db      	ldr	r3, [r3, #12]
    9714:	4618      	mov	r0, r3
    9716:	4b03      	ldr	r3, [pc, #12]	; (9724 <_timer_is_started+0x1c>)
    9718:	4798      	blx	r3
    971a:	4603      	mov	r3, r0
}
    971c:	4618      	mov	r0, r3
    971e:	3708      	adds	r7, #8
    9720:	46bd      	mov	sp, r7
    9722:	bd80      	pop	{r7, pc}
    9724:	00009011 	.word	0x00009011

00009728 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    9728:	b580      	push	{r7, lr}
    972a:	b082      	sub	sp, #8
    972c:	af00      	add	r7, sp, #0
    972e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9730:	687b      	ldr	r3, [r7, #4]
    9732:	691b      	ldr	r3, [r3, #16]
    9734:	4618      	mov	r0, r3
    9736:	4b03      	ldr	r3, [pc, #12]	; (9744 <_pwm_is_enabled+0x1c>)
    9738:	4798      	blx	r3
    973a:	4603      	mov	r3, r0
}
    973c:	4618      	mov	r0, r3
    973e:	3708      	adds	r7, #8
    9740:	46bd      	mov	sp, r7
    9742:	bd80      	pop	{r7, pc}
    9744:	00009011 	.word	0x00009011

00009748 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9748:	b480      	push	{r7}
    974a:	af00      	add	r7, sp, #0
	return NULL;
    974c:	2300      	movs	r3, #0
}
    974e:	4618      	mov	r0, r3
    9750:	46bd      	mov	sp, r7
    9752:	f85d 7b04 	ldr.w	r7, [sp], #4
    9756:	4770      	bx	lr

00009758 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9758:	b480      	push	{r7}
    975a:	af00      	add	r7, sp, #0
	return NULL;
    975c:	2300      	movs	r3, #0
}
    975e:	4618      	mov	r0, r3
    9760:	46bd      	mov	sp, r7
    9762:	f85d 7b04 	ldr.w	r7, [sp], #4
    9766:	4770      	bx	lr

00009768 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    9768:	b580      	push	{r7, lr}
    976a:	b084      	sub	sp, #16
    976c:	af00      	add	r7, sp, #0
    976e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9770:	687b      	ldr	r3, [r7, #4]
    9772:	68db      	ldr	r3, [r3, #12]
    9774:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9776:	68f8      	ldr	r0, [r7, #12]
    9778:	4b0e      	ldr	r3, [pc, #56]	; (97b4 <_timer_set_irq+0x4c>)
    977a:	4798      	blx	r3
    977c:	4603      	mov	r3, r0
    977e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9780:	f240 12a3 	movw	r2, #419	; 0x1a3
    9784:	490c      	ldr	r1, [pc, #48]	; (97b8 <_timer_set_irq+0x50>)
    9786:	2001      	movs	r0, #1
    9788:	4b0c      	ldr	r3, [pc, #48]	; (97bc <_timer_set_irq+0x54>)
    978a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    978c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9790:	490b      	ldr	r1, [pc, #44]	; (97c0 <_timer_set_irq+0x58>)
    9792:	4613      	mov	r3, r2
    9794:	009b      	lsls	r3, r3, #2
    9796:	4413      	add	r3, r2
    9798:	009b      	lsls	r3, r3, #2
    979a:	440b      	add	r3, r1
    979c:	3302      	adds	r3, #2
    979e:	f9b3 3000 	ldrsh.w	r3, [r3]
    97a2:	b2db      	uxtb	r3, r3
    97a4:	4618      	mov	r0, r3
    97a6:	4b07      	ldr	r3, [pc, #28]	; (97c4 <_timer_set_irq+0x5c>)
    97a8:	4798      	blx	r3
}
    97aa:	bf00      	nop
    97ac:	3710      	adds	r7, #16
    97ae:	46bd      	mov	sp, r7
    97b0:	bd80      	pop	{r7, pc}
    97b2:	bf00      	nop
    97b4:	000098f9 	.word	0x000098f9
    97b8:	000115f8 	.word	0x000115f8
    97bc:	00004f51 	.word	0x00004f51
    97c0:	20000048 	.word	0x20000048
    97c4:	00005729 	.word	0x00005729

000097c8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    97c8:	b580      	push	{r7, lr}
    97ca:	b084      	sub	sp, #16
    97cc:	af00      	add	r7, sp, #0
    97ce:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    97d0:	687b      	ldr	r3, [r7, #4]
    97d2:	68db      	ldr	r3, [r3, #12]
    97d4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    97d6:	68f8      	ldr	r0, [r7, #12]
    97d8:	4b07      	ldr	r3, [pc, #28]	; (97f8 <tc_interrupt_handler+0x30>)
    97da:	4798      	blx	r3
    97dc:	4603      	mov	r3, r0
    97de:	2b00      	cmp	r3, #0
    97e0:	d006      	beq.n	97f0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    97e2:	68f8      	ldr	r0, [r7, #12]
    97e4:	4b05      	ldr	r3, [pc, #20]	; (97fc <tc_interrupt_handler+0x34>)
    97e6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    97e8:	687b      	ldr	r3, [r7, #4]
    97ea:	681b      	ldr	r3, [r3, #0]
    97ec:	6878      	ldr	r0, [r7, #4]
    97ee:	4798      	blx	r3
	}
}
    97f0:	bf00      	nop
    97f2:	3710      	adds	r7, #16
    97f4:	46bd      	mov	sp, r7
    97f6:	bd80      	pop	{r7, pc}
    97f8:	00008f49 	.word	0x00008f49
    97fc:	00008f71 	.word	0x00008f71

00009800 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    9800:	b580      	push	{r7, lr}
    9802:	b084      	sub	sp, #16
    9804:	af00      	add	r7, sp, #0
    9806:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9808:	687b      	ldr	r3, [r7, #4]
    980a:	691b      	ldr	r3, [r3, #16]
    980c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    980e:	68f8      	ldr	r0, [r7, #12]
    9810:	4b12      	ldr	r3, [pc, #72]	; (985c <tc_pwm_interrupt_handler+0x5c>)
    9812:	4798      	blx	r3
    9814:	4603      	mov	r3, r0
    9816:	2b00      	cmp	r3, #0
    9818:	d00a      	beq.n	9830 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    981a:	68f8      	ldr	r0, [r7, #12]
    981c:	4b10      	ldr	r3, [pc, #64]	; (9860 <tc_pwm_interrupt_handler+0x60>)
    981e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    9820:	687b      	ldr	r3, [r7, #4]
    9822:	681b      	ldr	r3, [r3, #0]
    9824:	2b00      	cmp	r3, #0
    9826:	d003      	beq.n	9830 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    9828:	687b      	ldr	r3, [r7, #4]
    982a:	681b      	ldr	r3, [r3, #0]
    982c:	6878      	ldr	r0, [r7, #4]
    982e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    9830:	68f8      	ldr	r0, [r7, #12]
    9832:	4b0c      	ldr	r3, [pc, #48]	; (9864 <tc_pwm_interrupt_handler+0x64>)
    9834:	4798      	blx	r3
    9836:	4603      	mov	r3, r0
    9838:	2b00      	cmp	r3, #0
    983a:	d00a      	beq.n	9852 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    983c:	68f8      	ldr	r0, [r7, #12]
    983e:	4b0a      	ldr	r3, [pc, #40]	; (9868 <tc_pwm_interrupt_handler+0x68>)
    9840:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    9842:	687b      	ldr	r3, [r7, #4]
    9844:	685b      	ldr	r3, [r3, #4]
    9846:	2b00      	cmp	r3, #0
    9848:	d003      	beq.n	9852 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    984a:	687b      	ldr	r3, [r7, #4]
    984c:	685b      	ldr	r3, [r3, #4]
    984e:	6878      	ldr	r0, [r7, #4]
    9850:	4798      	blx	r3
		}
	}
}
    9852:	bf00      	nop
    9854:	3710      	adds	r7, #16
    9856:	46bd      	mov	sp, r7
    9858:	bd80      	pop	{r7, pc}
    985a:	bf00      	nop
    985c:	00008f49 	.word	0x00008f49
    9860:	00008f71 	.word	0x00008f71
    9864:	00008fbf 	.word	0x00008fbf
    9868:	00008f8b 	.word	0x00008f8b

0000986c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    986c:	b580      	push	{r7, lr}
    986e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    9870:	4b03      	ldr	r3, [pc, #12]	; (9880 <TC0_Handler+0x14>)
    9872:	681b      	ldr	r3, [r3, #0]
    9874:	4618      	mov	r0, r3
    9876:	4b03      	ldr	r3, [pc, #12]	; (9884 <TC0_Handler+0x18>)
    9878:	4798      	blx	r3
}
    987a:	bf00      	nop
    987c:	bd80      	pop	{r7, pc}
    987e:	bf00      	nop
    9880:	20001cc8 	.word	0x20001cc8
    9884:	000097c9 	.word	0x000097c9

00009888 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    9888:	b580      	push	{r7, lr}
    988a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    988c:	4b03      	ldr	r3, [pc, #12]	; (989c <TC1_Handler+0x14>)
    988e:	681b      	ldr	r3, [r3, #0]
    9890:	4618      	mov	r0, r3
    9892:	4b03      	ldr	r3, [pc, #12]	; (98a0 <TC1_Handler+0x18>)
    9894:	4798      	blx	r3
}
    9896:	bf00      	nop
    9898:	bd80      	pop	{r7, pc}
    989a:	bf00      	nop
    989c:	20001ccc 	.word	0x20001ccc
    98a0:	000097c9 	.word	0x000097c9

000098a4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    98a4:	b580      	push	{r7, lr}
    98a6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    98a8:	4b03      	ldr	r3, [pc, #12]	; (98b8 <TC2_Handler+0x14>)
    98aa:	681b      	ldr	r3, [r3, #0]
    98ac:	4618      	mov	r0, r3
    98ae:	4b03      	ldr	r3, [pc, #12]	; (98bc <TC2_Handler+0x18>)
    98b0:	4798      	blx	r3
}
    98b2:	bf00      	nop
    98b4:	bd80      	pop	{r7, pc}
    98b6:	bf00      	nop
    98b8:	20001cd0 	.word	0x20001cd0
    98bc:	000097c9 	.word	0x000097c9

000098c0 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    98c0:	b580      	push	{r7, lr}
    98c2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    98c4:	4b03      	ldr	r3, [pc, #12]	; (98d4 <TC3_Handler+0x14>)
    98c6:	681b      	ldr	r3, [r3, #0]
    98c8:	4618      	mov	r0, r3
    98ca:	4b03      	ldr	r3, [pc, #12]	; (98d8 <TC3_Handler+0x18>)
    98cc:	4798      	blx	r3
}
    98ce:	bf00      	nop
    98d0:	bd80      	pop	{r7, pc}
    98d2:	bf00      	nop
    98d4:	20001cd4 	.word	0x20001cd4
    98d8:	000097c9 	.word	0x000097c9

000098dc <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    98dc:	b580      	push	{r7, lr}
    98de:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    98e0:	4b03      	ldr	r3, [pc, #12]	; (98f0 <TC7_Handler+0x14>)
    98e2:	681b      	ldr	r3, [r3, #0]
    98e4:	4618      	mov	r0, r3
    98e6:	4b03      	ldr	r3, [pc, #12]	; (98f4 <TC7_Handler+0x18>)
    98e8:	4798      	blx	r3
}
    98ea:	bf00      	nop
    98ec:	bd80      	pop	{r7, pc}
    98ee:	bf00      	nop
    98f0:	20001cd8 	.word	0x20001cd8
    98f4:	00009801 	.word	0x00009801

000098f8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    98f8:	b580      	push	{r7, lr}
    98fa:	b084      	sub	sp, #16
    98fc:	af00      	add	r7, sp, #0
    98fe:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    9900:	6878      	ldr	r0, [r7, #4]
    9902:	4b13      	ldr	r3, [pc, #76]	; (9950 <get_tc_index+0x58>)
    9904:	4798      	blx	r3
    9906:	4603      	mov	r3, r0
    9908:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    990a:	2300      	movs	r3, #0
    990c:	73fb      	strb	r3, [r7, #15]
    990e:	e010      	b.n	9932 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    9910:	7bfa      	ldrb	r2, [r7, #15]
    9912:	4910      	ldr	r1, [pc, #64]	; (9954 <get_tc_index+0x5c>)
    9914:	4613      	mov	r3, r2
    9916:	009b      	lsls	r3, r3, #2
    9918:	4413      	add	r3, r2
    991a:	009b      	lsls	r3, r3, #2
    991c:	440b      	add	r3, r1
    991e:	781b      	ldrb	r3, [r3, #0]
    9920:	7bba      	ldrb	r2, [r7, #14]
    9922:	429a      	cmp	r2, r3
    9924:	d102      	bne.n	992c <get_tc_index+0x34>
			return i;
    9926:	f997 300f 	ldrsb.w	r3, [r7, #15]
    992a:	e00d      	b.n	9948 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    992c:	7bfb      	ldrb	r3, [r7, #15]
    992e:	3301      	adds	r3, #1
    9930:	73fb      	strb	r3, [r7, #15]
    9932:	7bfb      	ldrb	r3, [r7, #15]
    9934:	2b04      	cmp	r3, #4
    9936:	d9eb      	bls.n	9910 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    9938:	f240 2206 	movw	r2, #518	; 0x206
    993c:	4906      	ldr	r1, [pc, #24]	; (9958 <get_tc_index+0x60>)
    993e:	2000      	movs	r0, #0
    9940:	4b06      	ldr	r3, [pc, #24]	; (995c <get_tc_index+0x64>)
    9942:	4798      	blx	r3
	return -1;
    9944:	f04f 33ff 	mov.w	r3, #4294967295
}
    9948:	4618      	mov	r0, r3
    994a:	3710      	adds	r7, #16
    994c:	46bd      	mov	sp, r7
    994e:	bd80      	pop	{r7, pc}
    9950:	000099e5 	.word	0x000099e5
    9954:	20000048 	.word	0x20000048
    9958:	000115f8 	.word	0x000115f8
    995c:	00004f51 	.word	0x00004f51

00009960 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    9960:	b480      	push	{r7}
    9962:	b083      	sub	sp, #12
    9964:	af00      	add	r7, sp, #0
    9966:	6078      	str	r0, [r7, #4]
    9968:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    996a:	687b      	ldr	r3, [r7, #4]
    996c:	4a13      	ldr	r2, [pc, #76]	; (99bc <_tc_init_irq_param+0x5c>)
    996e:	4293      	cmp	r3, r2
    9970:	d102      	bne.n	9978 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    9972:	4a13      	ldr	r2, [pc, #76]	; (99c0 <_tc_init_irq_param+0x60>)
    9974:	683b      	ldr	r3, [r7, #0]
    9976:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    9978:	687b      	ldr	r3, [r7, #4]
    997a:	4a12      	ldr	r2, [pc, #72]	; (99c4 <_tc_init_irq_param+0x64>)
    997c:	4293      	cmp	r3, r2
    997e:	d102      	bne.n	9986 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    9980:	4a11      	ldr	r2, [pc, #68]	; (99c8 <_tc_init_irq_param+0x68>)
    9982:	683b      	ldr	r3, [r7, #0]
    9984:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    9986:	687b      	ldr	r3, [r7, #4]
    9988:	4a10      	ldr	r2, [pc, #64]	; (99cc <_tc_init_irq_param+0x6c>)
    998a:	4293      	cmp	r3, r2
    998c:	d102      	bne.n	9994 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    998e:	4a10      	ldr	r2, [pc, #64]	; (99d0 <_tc_init_irq_param+0x70>)
    9990:	683b      	ldr	r3, [r7, #0]
    9992:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    9994:	687b      	ldr	r3, [r7, #4]
    9996:	4a0f      	ldr	r2, [pc, #60]	; (99d4 <_tc_init_irq_param+0x74>)
    9998:	4293      	cmp	r3, r2
    999a:	d102      	bne.n	99a2 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    999c:	4a0e      	ldr	r2, [pc, #56]	; (99d8 <_tc_init_irq_param+0x78>)
    999e:	683b      	ldr	r3, [r7, #0]
    99a0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    99a2:	687b      	ldr	r3, [r7, #4]
    99a4:	4a0d      	ldr	r2, [pc, #52]	; (99dc <_tc_init_irq_param+0x7c>)
    99a6:	4293      	cmp	r3, r2
    99a8:	d102      	bne.n	99b0 <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    99aa:	4a0d      	ldr	r2, [pc, #52]	; (99e0 <_tc_init_irq_param+0x80>)
    99ac:	683b      	ldr	r3, [r7, #0]
    99ae:	6013      	str	r3, [r2, #0]
	}
}
    99b0:	bf00      	nop
    99b2:	370c      	adds	r7, #12
    99b4:	46bd      	mov	sp, r7
    99b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ba:	4770      	bx	lr
    99bc:	40003800 	.word	0x40003800
    99c0:	20001cc8 	.word	0x20001cc8
    99c4:	40003c00 	.word	0x40003c00
    99c8:	20001ccc 	.word	0x20001ccc
    99cc:	4101a000 	.word	0x4101a000
    99d0:	20001cd0 	.word	0x20001cd0
    99d4:	4101c000 	.word	0x4101c000
    99d8:	20001cd4 	.word	0x20001cd4
    99dc:	43001800 	.word	0x43001800
    99e0:	20001cd8 	.word	0x20001cd8

000099e4 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    99e4:	b4b0      	push	{r4, r5, r7}
    99e6:	b08d      	sub	sp, #52	; 0x34
    99e8:	af00      	add	r7, sp, #0
    99ea:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    99ec:	4b13      	ldr	r3, [pc, #76]	; (9a3c <_get_hardware_offset+0x58>)
    99ee:	f107 040c 	add.w	r4, r7, #12
    99f2:	461d      	mov	r5, r3
    99f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    99f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    99f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    99fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9a00:	2300      	movs	r3, #0
    9a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    9a04:	e010      	b.n	9a28 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    9a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a08:	009b      	lsls	r3, r3, #2
    9a0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    9a0e:	4413      	add	r3, r2
    9a10:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9a14:	461a      	mov	r2, r3
    9a16:	687b      	ldr	r3, [r7, #4]
    9a18:	429a      	cmp	r2, r3
    9a1a:	d102      	bne.n	9a22 <_get_hardware_offset+0x3e>
			return i;
    9a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a1e:	b2db      	uxtb	r3, r3
    9a20:	e006      	b.n	9a30 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a24:	3301      	adds	r3, #1
    9a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    9a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a2a:	2b07      	cmp	r3, #7
    9a2c:	d9eb      	bls.n	9a06 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    9a2e:	2300      	movs	r3, #0
}
    9a30:	4618      	mov	r0, r3
    9a32:	3734      	adds	r7, #52	; 0x34
    9a34:	46bd      	mov	sp, r7
    9a36:	bcb0      	pop	{r4, r5, r7}
    9a38:	4770      	bx	lr
    9a3a:	bf00      	nop
    9a3c:	0001160c 	.word	0x0001160c

00009a40 <__NVIC_EnableIRQ>:
{
    9a40:	b480      	push	{r7}
    9a42:	b083      	sub	sp, #12
    9a44:	af00      	add	r7, sp, #0
    9a46:	4603      	mov	r3, r0
    9a48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9a4e:	2b00      	cmp	r3, #0
    9a50:	db0b      	blt.n	9a6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9a52:	4909      	ldr	r1, [pc, #36]	; (9a78 <__NVIC_EnableIRQ+0x38>)
    9a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9a58:	095b      	lsrs	r3, r3, #5
    9a5a:	88fa      	ldrh	r2, [r7, #6]
    9a5c:	f002 021f 	and.w	r2, r2, #31
    9a60:	2001      	movs	r0, #1
    9a62:	fa00 f202 	lsl.w	r2, r0, r2
    9a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a6a:	bf00      	nop
    9a6c:	370c      	adds	r7, #12
    9a6e:	46bd      	mov	sp, r7
    9a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a74:	4770      	bx	lr
    9a76:	bf00      	nop
    9a78:	e000e100 	.word	0xe000e100

00009a7c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    9a7c:	b480      	push	{r7}
    9a7e:	b087      	sub	sp, #28
    9a80:	af00      	add	r7, sp, #0
    9a82:	60f8      	str	r0, [r7, #12]
    9a84:	460b      	mov	r3, r1
    9a86:	607a      	str	r2, [r7, #4]
    9a88:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    9a8a:	7afa      	ldrb	r2, [r7, #11]
    9a8c:	68f9      	ldr	r1, [r7, #12]
    9a8e:	4613      	mov	r3, r2
    9a90:	009b      	lsls	r3, r3, #2
    9a92:	4413      	add	r3, r2
    9a94:	009b      	lsls	r3, r3, #2
    9a96:	440b      	add	r3, r1
    9a98:	3340      	adds	r3, #64	; 0x40
    9a9a:	681b      	ldr	r3, [r3, #0]
    9a9c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    9a9e:	697a      	ldr	r2, [r7, #20]
    9aa0:	687b      	ldr	r3, [r7, #4]
    9aa2:	4013      	ands	r3, r2
    9aa4:	617b      	str	r3, [r7, #20]
	return tmp;
    9aa6:	697b      	ldr	r3, [r7, #20]
}
    9aa8:	4618      	mov	r0, r3
    9aaa:	371c      	adds	r7, #28
    9aac:	46bd      	mov	sp, r7
    9aae:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ab2:	4770      	bx	lr

00009ab4 <hri_oscctrl_get_STATUS_reg>:
{
    9ab4:	b480      	push	{r7}
    9ab6:	b085      	sub	sp, #20
    9ab8:	af00      	add	r7, sp, #0
    9aba:	6078      	str	r0, [r7, #4]
    9abc:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	691b      	ldr	r3, [r3, #16]
    9ac2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9ac4:	68fa      	ldr	r2, [r7, #12]
    9ac6:	683b      	ldr	r3, [r7, #0]
    9ac8:	4013      	ands	r3, r2
    9aca:	60fb      	str	r3, [r7, #12]
	return tmp;
    9acc:	68fb      	ldr	r3, [r7, #12]
}
    9ace:	4618      	mov	r0, r3
    9ad0:	3714      	adds	r7, #20
    9ad2:	46bd      	mov	sp, r7
    9ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ad8:	4770      	bx	lr

00009ada <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    9ada:	b480      	push	{r7}
    9adc:	b085      	sub	sp, #20
    9ade:	af00      	add	r7, sp, #0
    9ae0:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9ae2:	687b      	ldr	r3, [r7, #4]
    9ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
    9ae8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9aea:	7bfb      	ldrb	r3, [r7, #15]
    9aec:	f003 0301 	and.w	r3, r3, #1
    9af0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9af2:	7bfb      	ldrb	r3, [r7, #15]
    9af4:	2b00      	cmp	r3, #0
    9af6:	bf14      	ite	ne
    9af8:	2301      	movne	r3, #1
    9afa:	2300      	moveq	r3, #0
    9afc:	b2db      	uxtb	r3, r3
}
    9afe:	4618      	mov	r0, r3
    9b00:	3714      	adds	r7, #20
    9b02:	46bd      	mov	sp, r7
    9b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b08:	4770      	bx	lr

00009b0a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9b0a:	b480      	push	{r7}
    9b0c:	b083      	sub	sp, #12
    9b0e:	af00      	add	r7, sp, #0
    9b10:	6078      	str	r0, [r7, #4]
    9b12:	460b      	mov	r3, r1
    9b14:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    9b16:	bf00      	nop
    9b18:	687b      	ldr	r3, [r7, #4]
    9b1a:	789b      	ldrb	r3, [r3, #2]
    9b1c:	b2da      	uxtb	r2, r3
    9b1e:	78fb      	ldrb	r3, [r7, #3]
    9b20:	4013      	ands	r3, r2
    9b22:	b2db      	uxtb	r3, r3
    9b24:	2b00      	cmp	r3, #0
    9b26:	d1f7      	bne.n	9b18 <hri_usb_wait_for_sync+0xe>
	};
}
    9b28:	bf00      	nop
    9b2a:	370c      	adds	r7, #12
    9b2c:	46bd      	mov	sp, r7
    9b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b32:	4770      	bx	lr

00009b34 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    9b34:	b480      	push	{r7}
    9b36:	b083      	sub	sp, #12
    9b38:	af00      	add	r7, sp, #0
    9b3a:	6078      	str	r0, [r7, #4]
    9b3c:	460b      	mov	r3, r1
    9b3e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    9b40:	687b      	ldr	r3, [r7, #4]
    9b42:	789b      	ldrb	r3, [r3, #2]
    9b44:	b2da      	uxtb	r2, r3
    9b46:	78fb      	ldrb	r3, [r7, #3]
    9b48:	4013      	ands	r3, r2
    9b4a:	b2db      	uxtb	r3, r3
    9b4c:	2b00      	cmp	r3, #0
    9b4e:	bf14      	ite	ne
    9b50:	2301      	movne	r3, #1
    9b52:	2300      	moveq	r3, #0
    9b54:	b2db      	uxtb	r3, r3
}
    9b56:	4618      	mov	r0, r3
    9b58:	370c      	adds	r7, #12
    9b5a:	46bd      	mov	sp, r7
    9b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b60:	4770      	bx	lr

00009b62 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    9b62:	b480      	push	{r7}
    9b64:	b085      	sub	sp, #20
    9b66:	af00      	add	r7, sp, #0
    9b68:	6078      	str	r0, [r7, #4]
    9b6a:	460b      	mov	r3, r1
    9b6c:	70fb      	strb	r3, [r7, #3]
    9b6e:	4613      	mov	r3, r2
    9b70:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9b72:	78fb      	ldrb	r3, [r7, #3]
    9b74:	687a      	ldr	r2, [r7, #4]
    9b76:	3308      	adds	r3, #8
    9b78:	015b      	lsls	r3, r3, #5
    9b7a:	4413      	add	r3, r2
    9b7c:	3307      	adds	r3, #7
    9b7e:	781b      	ldrb	r3, [r3, #0]
    9b80:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9b82:	7bfa      	ldrb	r2, [r7, #15]
    9b84:	78bb      	ldrb	r3, [r7, #2]
    9b86:	4013      	ands	r3, r2
    9b88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9b8a:	7bfb      	ldrb	r3, [r7, #15]
}
    9b8c:	4618      	mov	r0, r3
    9b8e:	3714      	adds	r7, #20
    9b90:	46bd      	mov	sp, r7
    9b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b96:	4770      	bx	lr

00009b98 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    9b98:	b480      	push	{r7}
    9b9a:	b083      	sub	sp, #12
    9b9c:	af00      	add	r7, sp, #0
    9b9e:	6078      	str	r0, [r7, #4]
    9ba0:	460b      	mov	r3, r1
    9ba2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9ba4:	78fb      	ldrb	r3, [r7, #3]
    9ba6:	687a      	ldr	r2, [r7, #4]
    9ba8:	3308      	adds	r3, #8
    9baa:	015b      	lsls	r3, r3, #5
    9bac:	4413      	add	r3, r2
    9bae:	3307      	adds	r3, #7
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	b2db      	uxtb	r3, r3
}
    9bb4:	4618      	mov	r0, r3
    9bb6:	370c      	adds	r7, #12
    9bb8:	46bd      	mov	sp, r7
    9bba:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bbe:	4770      	bx	lr

00009bc0 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    9bc0:	b480      	push	{r7}
    9bc2:	b083      	sub	sp, #12
    9bc4:	af00      	add	r7, sp, #0
    9bc6:	6078      	str	r0, [r7, #4]
    9bc8:	460b      	mov	r3, r1
    9bca:	70fb      	strb	r3, [r7, #3]
    9bcc:	4613      	mov	r3, r2
    9bce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9bd0:	78fb      	ldrb	r3, [r7, #3]
    9bd2:	687a      	ldr	r2, [r7, #4]
    9bd4:	3308      	adds	r3, #8
    9bd6:	015b      	lsls	r3, r3, #5
    9bd8:	4413      	add	r3, r2
    9bda:	3307      	adds	r3, #7
    9bdc:	78ba      	ldrb	r2, [r7, #2]
    9bde:	701a      	strb	r2, [r3, #0]
}
    9be0:	bf00      	nop
    9be2:	370c      	adds	r7, #12
    9be4:	46bd      	mov	sp, r7
    9be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bea:	4770      	bx	lr

00009bec <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9bec:	b480      	push	{r7}
    9bee:	b083      	sub	sp, #12
    9bf0:	af00      	add	r7, sp, #0
    9bf2:	6078      	str	r0, [r7, #4]
    9bf4:	460b      	mov	r3, r1
    9bf6:	70fb      	strb	r3, [r7, #3]
    9bf8:	4613      	mov	r3, r2
    9bfa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9bfc:	78fb      	ldrb	r3, [r7, #3]
    9bfe:	687a      	ldr	r2, [r7, #4]
    9c00:	3308      	adds	r3, #8
    9c02:	015b      	lsls	r3, r3, #5
    9c04:	4413      	add	r3, r2
    9c06:	3305      	adds	r3, #5
    9c08:	78ba      	ldrb	r2, [r7, #2]
    9c0a:	701a      	strb	r2, [r3, #0]
}
    9c0c:	bf00      	nop
    9c0e:	370c      	adds	r7, #12
    9c10:	46bd      	mov	sp, r7
    9c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c16:	4770      	bx	lr

00009c18 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9c18:	b480      	push	{r7}
    9c1a:	b083      	sub	sp, #12
    9c1c:	af00      	add	r7, sp, #0
    9c1e:	6078      	str	r0, [r7, #4]
    9c20:	460b      	mov	r3, r1
    9c22:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9c24:	78fb      	ldrb	r3, [r7, #3]
    9c26:	687a      	ldr	r2, [r7, #4]
    9c28:	3308      	adds	r3, #8
    9c2a:	015b      	lsls	r3, r3, #5
    9c2c:	4413      	add	r3, r2
    9c2e:	3306      	adds	r3, #6
    9c30:	781b      	ldrb	r3, [r3, #0]
    9c32:	b2db      	uxtb	r3, r3
}
    9c34:	4618      	mov	r0, r3
    9c36:	370c      	adds	r7, #12
    9c38:	46bd      	mov	sp, r7
    9c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c3e:	4770      	bx	lr

00009c40 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    9c40:	b480      	push	{r7}
    9c42:	b083      	sub	sp, #12
    9c44:	af00      	add	r7, sp, #0
    9c46:	6078      	str	r0, [r7, #4]
    9c48:	460b      	mov	r3, r1
    9c4a:	70fb      	strb	r3, [r7, #3]
    9c4c:	4613      	mov	r3, r2
    9c4e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9c50:	78fb      	ldrb	r3, [r7, #3]
    9c52:	687a      	ldr	r2, [r7, #4]
    9c54:	3308      	adds	r3, #8
    9c56:	015b      	lsls	r3, r3, #5
    9c58:	4413      	add	r3, r2
    9c5a:	3304      	adds	r3, #4
    9c5c:	78ba      	ldrb	r2, [r7, #2]
    9c5e:	701a      	strb	r2, [r3, #0]
}
    9c60:	bf00      	nop
    9c62:	370c      	adds	r7, #12
    9c64:	46bd      	mov	sp, r7
    9c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c6a:	4770      	bx	lr

00009c6c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    9c6c:	b480      	push	{r7}
    9c6e:	b083      	sub	sp, #12
    9c70:	af00      	add	r7, sp, #0
    9c72:	6078      	str	r0, [r7, #4]
    9c74:	460b      	mov	r3, r1
    9c76:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    9c78:	78fb      	ldrb	r3, [r7, #3]
    9c7a:	687a      	ldr	r2, [r7, #4]
    9c7c:	015b      	lsls	r3, r3, #5
    9c7e:	4413      	add	r3, r2
    9c80:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9c84:	2210      	movs	r2, #16
    9c86:	701a      	strb	r2, [r3, #0]
}
    9c88:	bf00      	nop
    9c8a:	370c      	adds	r7, #12
    9c8c:	46bd      	mov	sp, r7
    9c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c92:	4770      	bx	lr

00009c94 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9c94:	b480      	push	{r7}
    9c96:	b083      	sub	sp, #12
    9c98:	af00      	add	r7, sp, #0
    9c9a:	6078      	str	r0, [r7, #4]
    9c9c:	460b      	mov	r3, r1
    9c9e:	70fb      	strb	r3, [r7, #3]
    9ca0:	4613      	mov	r3, r2
    9ca2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9ca4:	78fb      	ldrb	r3, [r7, #3]
    9ca6:	687a      	ldr	r2, [r7, #4]
    9ca8:	015b      	lsls	r3, r3, #5
    9caa:	4413      	add	r3, r2
    9cac:	f203 1309 	addw	r3, r3, #265	; 0x109
    9cb0:	78ba      	ldrb	r2, [r7, #2]
    9cb2:	701a      	strb	r2, [r3, #0]
}
    9cb4:	bf00      	nop
    9cb6:	370c      	adds	r7, #12
    9cb8:	46bd      	mov	sp, r7
    9cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cbe:	4770      	bx	lr

00009cc0 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    9cc0:	b480      	push	{r7}
    9cc2:	b083      	sub	sp, #12
    9cc4:	af00      	add	r7, sp, #0
    9cc6:	6078      	str	r0, [r7, #4]
    9cc8:	460b      	mov	r3, r1
    9cca:	70fb      	strb	r3, [r7, #3]
    9ccc:	4613      	mov	r3, r2
    9cce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9cd0:	78fb      	ldrb	r3, [r7, #3]
    9cd2:	687a      	ldr	r2, [r7, #4]
    9cd4:	015b      	lsls	r3, r3, #5
    9cd6:	4413      	add	r3, r2
    9cd8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9cdc:	78ba      	ldrb	r2, [r7, #2]
    9cde:	701a      	strb	r2, [r3, #0]
}
    9ce0:	bf00      	nop
    9ce2:	370c      	adds	r7, #12
    9ce4:	46bd      	mov	sp, r7
    9ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9cea:	4770      	bx	lr

00009cec <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9cec:	b480      	push	{r7}
    9cee:	b085      	sub	sp, #20
    9cf0:	af00      	add	r7, sp, #0
    9cf2:	6078      	str	r0, [r7, #4]
    9cf4:	460b      	mov	r3, r1
    9cf6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9cf8:	78fb      	ldrb	r3, [r7, #3]
    9cfa:	687a      	ldr	r2, [r7, #4]
    9cfc:	3308      	adds	r3, #8
    9cfe:	015b      	lsls	r3, r3, #5
    9d00:	4413      	add	r3, r2
    9d02:	781b      	ldrb	r3, [r3, #0]
    9d04:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    9d06:	7bfb      	ldrb	r3, [r7, #15]
    9d08:	f003 0307 	and.w	r3, r3, #7
    9d0c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9d0e:	7bfb      	ldrb	r3, [r7, #15]
}
    9d10:	4618      	mov	r0, r3
    9d12:	3714      	adds	r7, #20
    9d14:	46bd      	mov	sp, r7
    9d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d1a:	4770      	bx	lr

00009d1c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9d1c:	b480      	push	{r7}
    9d1e:	b085      	sub	sp, #20
    9d20:	af00      	add	r7, sp, #0
    9d22:	6078      	str	r0, [r7, #4]
    9d24:	460b      	mov	r3, r1
    9d26:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9d28:	78fb      	ldrb	r3, [r7, #3]
    9d2a:	687a      	ldr	r2, [r7, #4]
    9d2c:	3308      	adds	r3, #8
    9d2e:	015b      	lsls	r3, r3, #5
    9d30:	4413      	add	r3, r2
    9d32:	781b      	ldrb	r3, [r3, #0]
    9d34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    9d36:	7bfb      	ldrb	r3, [r7, #15]
    9d38:	091b      	lsrs	r3, r3, #4
    9d3a:	b2db      	uxtb	r3, r3
    9d3c:	f003 0307 	and.w	r3, r3, #7
    9d40:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9d42:	7bfb      	ldrb	r3, [r7, #15]
}
    9d44:	4618      	mov	r0, r3
    9d46:	3714      	adds	r7, #20
    9d48:	46bd      	mov	sp, r7
    9d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d4e:	4770      	bx	lr

00009d50 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    9d50:	b480      	push	{r7}
    9d52:	b083      	sub	sp, #12
    9d54:	af00      	add	r7, sp, #0
    9d56:	6078      	str	r0, [r7, #4]
    9d58:	460b      	mov	r3, r1
    9d5a:	70fb      	strb	r3, [r7, #3]
    9d5c:	4613      	mov	r3, r2
    9d5e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9d60:	78fb      	ldrb	r3, [r7, #3]
    9d62:	687a      	ldr	r2, [r7, #4]
    9d64:	3308      	adds	r3, #8
    9d66:	015b      	lsls	r3, r3, #5
    9d68:	4413      	add	r3, r2
    9d6a:	78ba      	ldrb	r2, [r7, #2]
    9d6c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    9d6e:	bf00      	nop
    9d70:	370c      	adds	r7, #12
    9d72:	46bd      	mov	sp, r7
    9d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d78:	4770      	bx	lr

00009d7a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    9d7a:	b480      	push	{r7}
    9d7c:	b083      	sub	sp, #12
    9d7e:	af00      	add	r7, sp, #0
    9d80:	6078      	str	r0, [r7, #4]
    9d82:	460b      	mov	r3, r1
    9d84:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9d86:	78fb      	ldrb	r3, [r7, #3]
    9d88:	687a      	ldr	r2, [r7, #4]
    9d8a:	3308      	adds	r3, #8
    9d8c:	015b      	lsls	r3, r3, #5
    9d8e:	4413      	add	r3, r2
    9d90:	781b      	ldrb	r3, [r3, #0]
    9d92:	b2db      	uxtb	r3, r3
}
    9d94:	4618      	mov	r0, r3
    9d96:	370c      	adds	r7, #12
    9d98:	46bd      	mov	sp, r7
    9d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d9e:	4770      	bx	lr

00009da0 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    9da0:	b480      	push	{r7}
    9da2:	b083      	sub	sp, #12
    9da4:	af00      	add	r7, sp, #0
    9da6:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9da8:	687b      	ldr	r3, [r7, #4]
    9daa:	8b9b      	ldrh	r3, [r3, #28]
    9dac:	b29b      	uxth	r3, r3
}
    9dae:	4618      	mov	r0, r3
    9db0:	370c      	adds	r7, #12
    9db2:	46bd      	mov	sp, r7
    9db4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9db8:	4770      	bx	lr

00009dba <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    9dba:	b480      	push	{r7}
    9dbc:	b083      	sub	sp, #12
    9dbe:	af00      	add	r7, sp, #0
    9dc0:	6078      	str	r0, [r7, #4]
    9dc2:	460b      	mov	r3, r1
    9dc4:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9dc6:	687b      	ldr	r3, [r7, #4]
    9dc8:	887a      	ldrh	r2, [r7, #2]
    9dca:	839a      	strh	r2, [r3, #28]
}
    9dcc:	bf00      	nop
    9dce:	370c      	adds	r7, #12
    9dd0:	46bd      	mov	sp, r7
    9dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd6:	4770      	bx	lr

00009dd8 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9dd8:	b480      	push	{r7}
    9dda:	b083      	sub	sp, #12
    9ddc:	af00      	add	r7, sp, #0
    9dde:	6078      	str	r0, [r7, #4]
    9de0:	460b      	mov	r3, r1
    9de2:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9de4:	687b      	ldr	r3, [r7, #4]
    9de6:	887a      	ldrh	r2, [r7, #2]
    9de8:	831a      	strh	r2, [r3, #24]
}
    9dea:	bf00      	nop
    9dec:	370c      	adds	r7, #12
    9dee:	46bd      	mov	sp, r7
    9df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9df4:	4770      	bx	lr

00009df6 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    9df6:	b480      	push	{r7}
    9df8:	b083      	sub	sp, #12
    9dfa:	af00      	add	r7, sp, #0
    9dfc:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    9dfe:	687b      	ldr	r3, [r7, #4]
    9e00:	8b1b      	ldrh	r3, [r3, #24]
    9e02:	b29b      	uxth	r3, r3
}
    9e04:	4618      	mov	r0, r3
    9e06:	370c      	adds	r7, #12
    9e08:	46bd      	mov	sp, r7
    9e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e0e:	4770      	bx	lr

00009e10 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9e10:	b480      	push	{r7}
    9e12:	b083      	sub	sp, #12
    9e14:	af00      	add	r7, sp, #0
    9e16:	6078      	str	r0, [r7, #4]
    9e18:	460b      	mov	r3, r1
    9e1a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9e1c:	687b      	ldr	r3, [r7, #4]
    9e1e:	887a      	ldrh	r2, [r7, #2]
    9e20:	829a      	strh	r2, [r3, #20]
}
    9e22:	bf00      	nop
    9e24:	370c      	adds	r7, #12
    9e26:	46bd      	mov	sp, r7
    9e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e2c:	4770      	bx	lr

00009e2e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    9e2e:	b480      	push	{r7}
    9e30:	b085      	sub	sp, #20
    9e32:	af00      	add	r7, sp, #0
    9e34:	6078      	str	r0, [r7, #4]
    9e36:	460b      	mov	r3, r1
    9e38:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    9e3a:	687b      	ldr	r3, [r7, #4]
    9e3c:	789b      	ldrb	r3, [r3, #2]
    9e3e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9e40:	7bfa      	ldrb	r2, [r7, #15]
    9e42:	78fb      	ldrb	r3, [r7, #3]
    9e44:	4013      	ands	r3, r2
    9e46:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9e48:	7bfb      	ldrb	r3, [r7, #15]
}
    9e4a:	4618      	mov	r0, r3
    9e4c:	3714      	adds	r7, #20
    9e4e:	46bd      	mov	sp, r7
    9e50:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e54:	4770      	bx	lr
	...

00009e58 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9e58:	b580      	push	{r7, lr}
    9e5a:	b082      	sub	sp, #8
    9e5c:	af00      	add	r7, sp, #0
    9e5e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	781b      	ldrb	r3, [r3, #0]
    9e64:	b2db      	uxtb	r3, r3
    9e66:	f023 0302 	bic.w	r3, r3, #2
    9e6a:	b2da      	uxtb	r2, r3
    9e6c:	687b      	ldr	r3, [r7, #4]
    9e6e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    9e70:	2103      	movs	r1, #3
    9e72:	6878      	ldr	r0, [r7, #4]
    9e74:	4b02      	ldr	r3, [pc, #8]	; (9e80 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    9e76:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9e78:	bf00      	nop
    9e7a:	3708      	adds	r7, #8
    9e7c:	46bd      	mov	sp, r7
    9e7e:	bd80      	pop	{r7, pc}
    9e80:	00009b0b 	.word	0x00009b0b

00009e84 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9e84:	b580      	push	{r7, lr}
    9e86:	b084      	sub	sp, #16
    9e88:	af00      	add	r7, sp, #0
    9e8a:	6078      	str	r0, [r7, #4]
    9e8c:	460b      	mov	r3, r1
    9e8e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9e90:	2103      	movs	r1, #3
    9e92:	6878      	ldr	r0, [r7, #4]
    9e94:	4b06      	ldr	r3, [pc, #24]	; (9eb0 <hri_usb_get_CTRLA_reg+0x2c>)
    9e96:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9e98:	687b      	ldr	r3, [r7, #4]
    9e9a:	781b      	ldrb	r3, [r3, #0]
    9e9c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9e9e:	7bfa      	ldrb	r2, [r7, #15]
    9ea0:	78fb      	ldrb	r3, [r7, #3]
    9ea2:	4013      	ands	r3, r2
    9ea4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9ea6:	7bfb      	ldrb	r3, [r7, #15]
}
    9ea8:	4618      	mov	r0, r3
    9eaa:	3710      	adds	r7, #16
    9eac:	46bd      	mov	sp, r7
    9eae:	bd80      	pop	{r7, pc}
    9eb0:	00009b0b 	.word	0x00009b0b

00009eb4 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9eb4:	b580      	push	{r7, lr}
    9eb6:	b082      	sub	sp, #8
    9eb8:	af00      	add	r7, sp, #0
    9eba:	6078      	str	r0, [r7, #4]
    9ebc:	460b      	mov	r3, r1
    9ebe:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9ec0:	687b      	ldr	r3, [r7, #4]
    9ec2:	78fa      	ldrb	r2, [r7, #3]
    9ec4:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9ec6:	2103      	movs	r1, #3
    9ec8:	6878      	ldr	r0, [r7, #4]
    9eca:	4b03      	ldr	r3, [pc, #12]	; (9ed8 <hri_usb_write_CTRLA_reg+0x24>)
    9ecc:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9ece:	bf00      	nop
    9ed0:	3708      	adds	r7, #8
    9ed2:	46bd      	mov	sp, r7
    9ed4:	bd80      	pop	{r7, pc}
    9ed6:	bf00      	nop
    9ed8:	00009b0b 	.word	0x00009b0b

00009edc <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9edc:	b580      	push	{r7, lr}
    9ede:	b082      	sub	sp, #8
    9ee0:	af00      	add	r7, sp, #0
    9ee2:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9ee4:	2103      	movs	r1, #3
    9ee6:	6878      	ldr	r0, [r7, #4]
    9ee8:	4b04      	ldr	r3, [pc, #16]	; (9efc <hri_usb_read_CTRLA_reg+0x20>)
    9eea:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	781b      	ldrb	r3, [r3, #0]
    9ef0:	b2db      	uxtb	r3, r3
}
    9ef2:	4618      	mov	r0, r3
    9ef4:	3708      	adds	r7, #8
    9ef6:	46bd      	mov	sp, r7
    9ef8:	bd80      	pop	{r7, pc}
    9efa:	bf00      	nop
    9efc:	00009b0b 	.word	0x00009b0b

00009f00 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9f00:	b480      	push	{r7}
    9f02:	b083      	sub	sp, #12
    9f04:	af00      	add	r7, sp, #0
    9f06:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9f08:	687b      	ldr	r3, [r7, #4]
    9f0a:	891b      	ldrh	r3, [r3, #8]
    9f0c:	b29b      	uxth	r3, r3
    9f0e:	f023 0301 	bic.w	r3, r3, #1
    9f12:	b29a      	uxth	r2, r3
    9f14:	687b      	ldr	r3, [r7, #4]
    9f16:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9f18:	bf00      	nop
    9f1a:	370c      	adds	r7, #12
    9f1c:	46bd      	mov	sp, r7
    9f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f22:	4770      	bx	lr

00009f24 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9f24:	b480      	push	{r7}
    9f26:	b083      	sub	sp, #12
    9f28:	af00      	add	r7, sp, #0
    9f2a:	6078      	str	r0, [r7, #4]
    9f2c:	460b      	mov	r3, r1
    9f2e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9f30:	687b      	ldr	r3, [r7, #4]
    9f32:	887a      	ldrh	r2, [r7, #2]
    9f34:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9f36:	bf00      	nop
    9f38:	370c      	adds	r7, #12
    9f3a:	46bd      	mov	sp, r7
    9f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f40:	4770      	bx	lr

00009f42 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    9f42:	b480      	push	{r7}
    9f44:	b083      	sub	sp, #12
    9f46:	af00      	add	r7, sp, #0
    9f48:	6078      	str	r0, [r7, #4]
    9f4a:	460b      	mov	r3, r1
    9f4c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    9f4e:	687b      	ldr	r3, [r7, #4]
    9f50:	78fa      	ldrb	r2, [r7, #3]
    9f52:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9f54:	bf00      	nop
    9f56:	370c      	adds	r7, #12
    9f58:	46bd      	mov	sp, r7
    9f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f5e:	4770      	bx	lr

00009f60 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    9f60:	b480      	push	{r7}
    9f62:	b083      	sub	sp, #12
    9f64:	af00      	add	r7, sp, #0
    9f66:	6078      	str	r0, [r7, #4]
    9f68:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    9f6a:	687b      	ldr	r3, [r7, #4]
    9f6c:	683a      	ldr	r2, [r7, #0]
    9f6e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    9f70:	bf00      	nop
    9f72:	370c      	adds	r7, #12
    9f74:	46bd      	mov	sp, r7
    9f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f7a:	4770      	bx	lr

00009f7c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    9f7c:	b480      	push	{r7}
    9f7e:	b083      	sub	sp, #12
    9f80:	af00      	add	r7, sp, #0
    9f82:	6078      	str	r0, [r7, #4]
    9f84:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9f86:	2300      	movs	r3, #0
}
    9f88:	4618      	mov	r0, r3
    9f8a:	370c      	adds	r7, #12
    9f8c:	46bd      	mov	sp, r7
    9f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f92:	4770      	bx	lr

00009f94 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9f94:	b480      	push	{r7}
    9f96:	b085      	sub	sp, #20
    9f98:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    9f9a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f9e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9fa0:	4b28      	ldr	r3, [pc, #160]	; (a044 <_usb_load_calib+0xb0>)
    9fa2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9fa4:	f003 031f 	and.w	r3, r3, #31
    9fa8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    9faa:	4b26      	ldr	r3, [pc, #152]	; (a044 <_usb_load_calib+0xb0>)
    9fac:	681b      	ldr	r3, [r3, #0]
    9fae:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    9fb0:	f003 031f 	and.w	r3, r3, #31
    9fb4:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9fb6:	4b23      	ldr	r3, [pc, #140]	; (a044 <_usb_load_calib+0xb0>)
    9fb8:	681b      	ldr	r3, [r3, #0]
    9fba:	0a9b      	lsrs	r3, r3, #10
    9fbc:	f003 0307 	and.w	r3, r3, #7
    9fc0:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    9fc2:	68fb      	ldr	r3, [r7, #12]
    9fc4:	2b00      	cmp	r3, #0
    9fc6:	d002      	beq.n	9fce <_usb_load_calib+0x3a>
    9fc8:	68fb      	ldr	r3, [r7, #12]
    9fca:	2b1f      	cmp	r3, #31
    9fcc:	d101      	bne.n	9fd2 <_usb_load_calib+0x3e>
		pad_transn = 9;
    9fce:	2309      	movs	r3, #9
    9fd0:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9fd2:	68bb      	ldr	r3, [r7, #8]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d002      	beq.n	9fde <_usb_load_calib+0x4a>
    9fd8:	68bb      	ldr	r3, [r7, #8]
    9fda:	2b1f      	cmp	r3, #31
    9fdc:	d101      	bne.n	9fe2 <_usb_load_calib+0x4e>
		pad_transp = 25;
    9fde:	2319      	movs	r3, #25
    9fe0:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d002      	beq.n	9fee <_usb_load_calib+0x5a>
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	2b07      	cmp	r3, #7
    9fec:	d101      	bne.n	9ff2 <_usb_load_calib+0x5e>
		pad_trim = 6;
    9fee:	2306      	movs	r3, #6
    9ff0:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    9ff2:	68fb      	ldr	r3, [r7, #12]
    9ff4:	b29b      	uxth	r3, r3
    9ff6:	019b      	lsls	r3, r3, #6
    9ff8:	b29b      	uxth	r3, r3
    9ffa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    9ffe:	b29a      	uxth	r2, r3
    a000:	68bb      	ldr	r3, [r7, #8]
    a002:	b29b      	uxth	r3, r3
    a004:	f003 031f 	and.w	r3, r3, #31
    a008:	b29b      	uxth	r3, r3
    a00a:	4313      	orrs	r3, r2
    a00c:	b29a      	uxth	r2, r3
    a00e:	687b      	ldr	r3, [r7, #4]
    a010:	b29b      	uxth	r3, r3
    a012:	031b      	lsls	r3, r3, #12
    a014:	b29b      	uxth	r3, r3
    a016:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a01a:	b29b      	uxth	r3, r3
    a01c:	4313      	orrs	r3, r2
    a01e:	b29a      	uxth	r2, r3
    a020:	683b      	ldr	r3, [r7, #0]
    a022:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a024:	683a      	ldr	r2, [r7, #0]
    a026:	78d3      	ldrb	r3, [r2, #3]
    a028:	f043 0303 	orr.w	r3, r3, #3
    a02c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a02e:	683a      	ldr	r2, [r7, #0]
    a030:	78d3      	ldrb	r3, [r2, #3]
    a032:	f043 030c 	orr.w	r3, r3, #12
    a036:	70d3      	strb	r3, [r2, #3]
}
    a038:	bf00      	nop
    a03a:	3714      	adds	r7, #20
    a03c:	46bd      	mov	sp, r7
    a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a042:	4770      	bx	lr
    a044:	00800084 	.word	0x00800084

0000a048 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    a048:	b580      	push	{r7, lr}
    a04a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    a04c:	bf00      	nop
    a04e:	2203      	movs	r2, #3
    a050:	2100      	movs	r1, #0
    a052:	4804      	ldr	r0, [pc, #16]	; (a064 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    a054:	4b04      	ldr	r3, [pc, #16]	; (a068 <_usb_d_dev_wait_dpll_rdy+0x20>)
    a056:	4798      	blx	r3
    a058:	4603      	mov	r3, r0
    a05a:	2b03      	cmp	r3, #3
    a05c:	d1f7      	bne.n	a04e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    a05e:	bf00      	nop
    a060:	bd80      	pop	{r7, pc}
    a062:	bf00      	nop
    a064:	40001000 	.word	0x40001000
    a068:	00009a7d 	.word	0x00009a7d

0000a06c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    a06c:	b580      	push	{r7, lr}
    a06e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a070:	480e      	ldr	r0, [pc, #56]	; (a0ac <_usb_d_dev_wait_dfll_rdy+0x40>)
    a072:	4b0f      	ldr	r3, [pc, #60]	; (a0b0 <_usb_d_dev_wait_dfll_rdy+0x44>)
    a074:	4798      	blx	r3
    a076:	4603      	mov	r3, r0
    a078:	2b00      	cmp	r3, #0
    a07a:	d00a      	beq.n	a092 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a07c:	bf00      	nop
    a07e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    a082:	480a      	ldr	r0, [pc, #40]	; (a0ac <_usb_d_dev_wait_dfll_rdy+0x40>)
    a084:	4b0b      	ldr	r3, [pc, #44]	; (a0b4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a086:	4798      	blx	r3
    a088:	4603      	mov	r3, r0
    a08a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a08e:	d1f6      	bne.n	a07e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    a090:	e009      	b.n	a0a6 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a092:	bf00      	nop
    a094:	f44f 7180 	mov.w	r1, #256	; 0x100
    a098:	4804      	ldr	r0, [pc, #16]	; (a0ac <_usb_d_dev_wait_dfll_rdy+0x40>)
    a09a:	4b06      	ldr	r3, [pc, #24]	; (a0b4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a09c:	4798      	blx	r3
    a09e:	4603      	mov	r3, r0
    a0a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a0a4:	d1f6      	bne.n	a094 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    a0a6:	bf00      	nop
    a0a8:	bd80      	pop	{r7, pc}
    a0aa:	bf00      	nop
    a0ac:	40001000 	.word	0x40001000
    a0b0:	00009adb 	.word	0x00009adb
    a0b4:	00009ab5 	.word	0x00009ab5

0000a0b8 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    a0b8:	b580      	push	{r7, lr}
    a0ba:	b082      	sub	sp, #8
    a0bc:	af00      	add	r7, sp, #0
    a0be:	4603      	mov	r3, r0
    a0c0:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    a0c2:	79fb      	ldrb	r3, [r7, #7]
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d102      	bne.n	a0ce <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    a0c8:	4b05      	ldr	r3, [pc, #20]	; (a0e0 <_usb_d_dev_wait_clk_rdy+0x28>)
    a0ca:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    a0cc:	e004      	b.n	a0d8 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    a0ce:	79fb      	ldrb	r3, [r7, #7]
    a0d0:	2b01      	cmp	r3, #1
    a0d2:	d101      	bne.n	a0d8 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    a0d4:	4b03      	ldr	r3, [pc, #12]	; (a0e4 <_usb_d_dev_wait_clk_rdy+0x2c>)
    a0d6:	4798      	blx	r3
}
    a0d8:	bf00      	nop
    a0da:	3708      	adds	r7, #8
    a0dc:	46bd      	mov	sp, r7
    a0de:	bd80      	pop	{r7, pc}
    a0e0:	0000a06d 	.word	0x0000a06d
    a0e4:	0000a049 	.word	0x0000a049

0000a0e8 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    a0e8:	b580      	push	{r7, lr}
    a0ea:	b082      	sub	sp, #8
    a0ec:	af00      	add	r7, sp, #0
    a0ee:	4603      	mov	r3, r0
    a0f0:	6039      	str	r1, [r7, #0]
    a0f2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    a0f4:	683b      	ldr	r3, [r7, #0]
    a0f6:	b2da      	uxtb	r2, r3
    a0f8:	79fb      	ldrb	r3, [r7, #7]
    a0fa:	4619      	mov	r1, r3
    a0fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a100:	4b02      	ldr	r3, [pc, #8]	; (a10c <_usbd_ep_int_ack+0x24>)
    a102:	4798      	blx	r3
}
    a104:	bf00      	nop
    a106:	3708      	adds	r7, #8
    a108:	46bd      	mov	sp, r7
    a10a:	bd80      	pop	{r7, pc}
    a10c:	00009bc1 	.word	0x00009bc1

0000a110 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    a110:	b580      	push	{r7, lr}
    a112:	b082      	sub	sp, #8
    a114:	af00      	add	r7, sp, #0
    a116:	4603      	mov	r3, r0
    a118:	6039      	str	r1, [r7, #0]
    a11a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    a11c:	683b      	ldr	r3, [r7, #0]
    a11e:	b2da      	uxtb	r2, r3
    a120:	79fb      	ldrb	r3, [r7, #7]
    a122:	4619      	mov	r1, r3
    a124:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a128:	4b02      	ldr	r3, [pc, #8]	; (a134 <_usbd_ep_int_en+0x24>)
    a12a:	4798      	blx	r3
}
    a12c:	bf00      	nop
    a12e:	3708      	adds	r7, #8
    a130:	46bd      	mov	sp, r7
    a132:	bd80      	pop	{r7, pc}
    a134:	00009c95 	.word	0x00009c95

0000a138 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    a138:	b580      	push	{r7, lr}
    a13a:	b082      	sub	sp, #8
    a13c:	af00      	add	r7, sp, #0
    a13e:	4603      	mov	r3, r0
    a140:	6039      	str	r1, [r7, #0]
    a142:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    a144:	683b      	ldr	r3, [r7, #0]
    a146:	b2da      	uxtb	r2, r3
    a148:	79fb      	ldrb	r3, [r7, #7]
    a14a:	4619      	mov	r1, r3
    a14c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a150:	4b02      	ldr	r3, [pc, #8]	; (a15c <_usbd_ep_int_dis+0x24>)
    a152:	4798      	blx	r3
}
    a154:	bf00      	nop
    a156:	3708      	adds	r7, #8
    a158:	46bd      	mov	sp, r7
    a15a:	bd80      	pop	{r7, pc}
    a15c:	00009cc1 	.word	0x00009cc1

0000a160 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    a160:	b580      	push	{r7, lr}
    a162:	b082      	sub	sp, #8
    a164:	af00      	add	r7, sp, #0
    a166:	4603      	mov	r3, r0
    a168:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    a16a:	79fb      	ldrb	r3, [r7, #7]
    a16c:	4619      	mov	r1, r3
    a16e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a172:	4b06      	ldr	r3, [pc, #24]	; (a18c <_usbd_ep_is_ctrl+0x2c>)
    a174:	4798      	blx	r3
    a176:	4603      	mov	r3, r0
    a178:	2b11      	cmp	r3, #17
    a17a:	bf0c      	ite	eq
    a17c:	2301      	moveq	r3, #1
    a17e:	2300      	movne	r3, #0
    a180:	b2db      	uxtb	r3, r3
}
    a182:	4618      	mov	r0, r3
    a184:	3708      	adds	r7, #8
    a186:	46bd      	mov	sp, r7
    a188:	bd80      	pop	{r7, pc}
    a18a:	bf00      	nop
    a18c:	00009d7b 	.word	0x00009d7b

0000a190 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    a190:	b580      	push	{r7, lr}
    a192:	b082      	sub	sp, #8
    a194:	af00      	add	r7, sp, #0
    a196:	4603      	mov	r3, r0
    a198:	71fb      	strb	r3, [r7, #7]
    a19a:	460b      	mov	r3, r1
    a19c:	71bb      	strb	r3, [r7, #6]
    a19e:	4613      	mov	r3, r2
    a1a0:	717b      	strb	r3, [r7, #5]
	if (st) {
    a1a2:	797b      	ldrb	r3, [r7, #5]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d00b      	beq.n	a1c0 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a1a8:	79bb      	ldrb	r3, [r7, #6]
    a1aa:	2210      	movs	r2, #16
    a1ac:	fa02 f303 	lsl.w	r3, r2, r3
    a1b0:	b2da      	uxtb	r2, r3
    a1b2:	79fb      	ldrb	r3, [r7, #7]
    a1b4:	4619      	mov	r1, r3
    a1b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a1ba:	4b09      	ldr	r3, [pc, #36]	; (a1e0 <_usbd_ep_set_stall+0x50>)
    a1bc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    a1be:	e00a      	b.n	a1d6 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a1c0:	79bb      	ldrb	r3, [r7, #6]
    a1c2:	2210      	movs	r2, #16
    a1c4:	fa02 f303 	lsl.w	r3, r2, r3
    a1c8:	b2da      	uxtb	r2, r3
    a1ca:	79fb      	ldrb	r3, [r7, #7]
    a1cc:	4619      	mov	r1, r3
    a1ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a1d2:	4b04      	ldr	r3, [pc, #16]	; (a1e4 <_usbd_ep_set_stall+0x54>)
    a1d4:	4798      	blx	r3
}
    a1d6:	bf00      	nop
    a1d8:	3708      	adds	r7, #8
    a1da:	46bd      	mov	sp, r7
    a1dc:	bd80      	pop	{r7, pc}
    a1de:	bf00      	nop
    a1e0:	00009bed 	.word	0x00009bed
    a1e4:	00009c41 	.word	0x00009c41

0000a1e8 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    a1e8:	b580      	push	{r7, lr}
    a1ea:	b084      	sub	sp, #16
    a1ec:	af00      	add	r7, sp, #0
    a1ee:	4603      	mov	r3, r0
    a1f0:	460a      	mov	r2, r1
    a1f2:	71fb      	strb	r3, [r7, #7]
    a1f4:	4613      	mov	r3, r2
    a1f6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a1f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a1fc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a1fe:	79fb      	ldrb	r3, [r7, #7]
    a200:	4619      	mov	r1, r3
    a202:	68f8      	ldr	r0, [r7, #12]
    a204:	4b08      	ldr	r3, [pc, #32]	; (a228 <_usbd_ep_is_stalled+0x40>)
    a206:	4798      	blx	r3
    a208:	4603      	mov	r3, r0
    a20a:	4619      	mov	r1, r3
    a20c:	79bb      	ldrb	r3, [r7, #6]
    a20e:	2210      	movs	r2, #16
    a210:	fa02 f303 	lsl.w	r3, r2, r3
    a214:	400b      	ands	r3, r1
    a216:	2b00      	cmp	r3, #0
    a218:	bf14      	ite	ne
    a21a:	2301      	movne	r3, #1
    a21c:	2300      	moveq	r3, #0
    a21e:	b2db      	uxtb	r3, r3
}
    a220:	4618      	mov	r0, r3
    a222:	3710      	adds	r7, #16
    a224:	46bd      	mov	sp, r7
    a226:	bd80      	pop	{r7, pc}
    a228:	00009c19 	.word	0x00009c19

0000a22c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    a22c:	b580      	push	{r7, lr}
    a22e:	b084      	sub	sp, #16
    a230:	af00      	add	r7, sp, #0
    a232:	4603      	mov	r3, r0
    a234:	460a      	mov	r2, r1
    a236:	71fb      	strb	r3, [r7, #7]
    a238:	4613      	mov	r3, r2
    a23a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a23c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a240:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a242:	79fb      	ldrb	r3, [r7, #7]
    a244:	4619      	mov	r1, r3
    a246:	68f8      	ldr	r0, [r7, #12]
    a248:	4b08      	ldr	r3, [pc, #32]	; (a26c <_usbd_ep_is_stall_sent+0x40>)
    a24a:	4798      	blx	r3
    a24c:	4603      	mov	r3, r0
    a24e:	4619      	mov	r1, r3
    a250:	79bb      	ldrb	r3, [r7, #6]
    a252:	2220      	movs	r2, #32
    a254:	fa02 f303 	lsl.w	r3, r2, r3
    a258:	400b      	ands	r3, r1
    a25a:	2b00      	cmp	r3, #0
    a25c:	bf14      	ite	ne
    a25e:	2301      	movne	r3, #1
    a260:	2300      	moveq	r3, #0
    a262:	b2db      	uxtb	r3, r3
}
    a264:	4618      	mov	r0, r3
    a266:	3710      	adds	r7, #16
    a268:	46bd      	mov	sp, r7
    a26a:	bd80      	pop	{r7, pc}
    a26c:	00009b99 	.word	0x00009b99

0000a270 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    a270:	b580      	push	{r7, lr}
    a272:	b082      	sub	sp, #8
    a274:	af00      	add	r7, sp, #0
    a276:	4603      	mov	r3, r0
    a278:	460a      	mov	r2, r1
    a27a:	71fb      	strb	r3, [r7, #7]
    a27c:	4613      	mov	r3, r2
    a27e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a280:	79bb      	ldrb	r3, [r7, #6]
    a282:	2220      	movs	r2, #32
    a284:	409a      	lsls	r2, r3
    a286:	79fb      	ldrb	r3, [r7, #7]
    a288:	4611      	mov	r1, r2
    a28a:	4618      	mov	r0, r3
    a28c:	4b02      	ldr	r3, [pc, #8]	; (a298 <_usbd_ep_ack_stall+0x28>)
    a28e:	4798      	blx	r3
}
    a290:	bf00      	nop
    a292:	3708      	adds	r7, #8
    a294:	46bd      	mov	sp, r7
    a296:	bd80      	pop	{r7, pc}
    a298:	0000a0e9 	.word	0x0000a0e9

0000a29c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    a29c:	b580      	push	{r7, lr}
    a29e:	b082      	sub	sp, #8
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	4603      	mov	r3, r0
    a2a4:	71fb      	strb	r3, [r7, #7]
    a2a6:	460b      	mov	r3, r1
    a2a8:	71bb      	strb	r3, [r7, #6]
    a2aa:	4613      	mov	r3, r2
    a2ac:	717b      	strb	r3, [r7, #5]
	if (en) {
    a2ae:	797b      	ldrb	r3, [r7, #5]
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d008      	beq.n	a2c6 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    a2b4:	79bb      	ldrb	r3, [r7, #6]
    a2b6:	2220      	movs	r2, #32
    a2b8:	409a      	lsls	r2, r3
    a2ba:	79fb      	ldrb	r3, [r7, #7]
    a2bc:	4611      	mov	r1, r2
    a2be:	4618      	mov	r0, r3
    a2c0:	4b07      	ldr	r3, [pc, #28]	; (a2e0 <_usbd_ep_int_stall_en+0x44>)
    a2c2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    a2c4:	e007      	b.n	a2d6 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    a2c6:	79bb      	ldrb	r3, [r7, #6]
    a2c8:	2220      	movs	r2, #32
    a2ca:	409a      	lsls	r2, r3
    a2cc:	79fb      	ldrb	r3, [r7, #7]
    a2ce:	4611      	mov	r1, r2
    a2d0:	4618      	mov	r0, r3
    a2d2:	4b04      	ldr	r3, [pc, #16]	; (a2e4 <_usbd_ep_int_stall_en+0x48>)
    a2d4:	4798      	blx	r3
}
    a2d6:	bf00      	nop
    a2d8:	3708      	adds	r7, #8
    a2da:	46bd      	mov	sp, r7
    a2dc:	bd80      	pop	{r7, pc}
    a2de:	bf00      	nop
    a2e0:	0000a111 	.word	0x0000a111
    a2e4:	0000a139 	.word	0x0000a139

0000a2e8 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    a2e8:	b580      	push	{r7, lr}
    a2ea:	b082      	sub	sp, #8
    a2ec:	af00      	add	r7, sp, #0
    a2ee:	4603      	mov	r3, r0
    a2f0:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    a2f2:	79fb      	ldrb	r3, [r7, #7]
    a2f4:	4619      	mov	r1, r3
    a2f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a2fa:	4b03      	ldr	r3, [pc, #12]	; (a308 <_usbd_ep_stop_setup+0x20>)
    a2fc:	4798      	blx	r3
}
    a2fe:	bf00      	nop
    a300:	3708      	adds	r7, #8
    a302:	46bd      	mov	sp, r7
    a304:	bd80      	pop	{r7, pc}
    a306:	bf00      	nop
    a308:	00009c6d 	.word	0x00009c6d

0000a30c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    a30c:	b580      	push	{r7, lr}
    a30e:	b082      	sub	sp, #8
    a310:	af00      	add	r7, sp, #0
    a312:	4603      	mov	r3, r0
    a314:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a316:	79fb      	ldrb	r3, [r7, #7]
    a318:	2210      	movs	r2, #16
    a31a:	4619      	mov	r1, r3
    a31c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a320:	4b05      	ldr	r3, [pc, #20]	; (a338 <_usbd_ep_is_setup+0x2c>)
    a322:	4798      	blx	r3
    a324:	4603      	mov	r3, r0
    a326:	2b00      	cmp	r3, #0
    a328:	bf14      	ite	ne
    a32a:	2301      	movne	r3, #1
    a32c:	2300      	moveq	r3, #0
    a32e:	b2db      	uxtb	r3, r3
}
    a330:	4618      	mov	r0, r3
    a332:	3708      	adds	r7, #8
    a334:	46bd      	mov	sp, r7
    a336:	bd80      	pop	{r7, pc}
    a338:	00009b63 	.word	0x00009b63

0000a33c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    a33c:	b580      	push	{r7, lr}
    a33e:	b082      	sub	sp, #8
    a340:	af00      	add	r7, sp, #0
    a342:	4603      	mov	r3, r0
    a344:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a346:	79fb      	ldrb	r3, [r7, #7]
    a348:	2110      	movs	r1, #16
    a34a:	4618      	mov	r0, r3
    a34c:	4b02      	ldr	r3, [pc, #8]	; (a358 <_usbd_ep_ack_setup+0x1c>)
    a34e:	4798      	blx	r3
}
    a350:	bf00      	nop
    a352:	3708      	adds	r7, #8
    a354:	46bd      	mov	sp, r7
    a356:	bd80      	pop	{r7, pc}
    a358:	0000a0e9 	.word	0x0000a0e9

0000a35c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    a35c:	b580      	push	{r7, lr}
    a35e:	b082      	sub	sp, #8
    a360:	af00      	add	r7, sp, #0
    a362:	4603      	mov	r3, r0
    a364:	71fb      	strb	r3, [r7, #7]
    a366:	460b      	mov	r3, r1
    a368:	71bb      	strb	r3, [r7, #6]
    a36a:	4613      	mov	r3, r2
    a36c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    a36e:	797b      	ldrb	r3, [r7, #5]
    a370:	2b00      	cmp	r3, #0
    a372:	d00b      	beq.n	a38c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a374:	79bb      	ldrb	r3, [r7, #6]
    a376:	2201      	movs	r2, #1
    a378:	fa02 f303 	lsl.w	r3, r2, r3
    a37c:	b2da      	uxtb	r2, r3
    a37e:	79fb      	ldrb	r3, [r7, #7]
    a380:	4619      	mov	r1, r3
    a382:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a386:	4b09      	ldr	r3, [pc, #36]	; (a3ac <_usbd_ep_set_toggle+0x50>)
    a388:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    a38a:	e00a      	b.n	a3a2 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a38c:	79bb      	ldrb	r3, [r7, #6]
    a38e:	2201      	movs	r2, #1
    a390:	fa02 f303 	lsl.w	r3, r2, r3
    a394:	b2da      	uxtb	r2, r3
    a396:	79fb      	ldrb	r3, [r7, #7]
    a398:	4619      	mov	r1, r3
    a39a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a39e:	4b04      	ldr	r3, [pc, #16]	; (a3b0 <_usbd_ep_set_toggle+0x54>)
    a3a0:	4798      	blx	r3
}
    a3a2:	bf00      	nop
    a3a4:	3708      	adds	r7, #8
    a3a6:	46bd      	mov	sp, r7
    a3a8:	bd80      	pop	{r7, pc}
    a3aa:	bf00      	nop
    a3ac:	00009bed 	.word	0x00009bed
    a3b0:	00009c41 	.word	0x00009c41

0000a3b4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    a3b4:	b580      	push	{r7, lr}
    a3b6:	b082      	sub	sp, #8
    a3b8:	af00      	add	r7, sp, #0
    a3ba:	4603      	mov	r3, r0
    a3bc:	460a      	mov	r2, r1
    a3be:	71fb      	strb	r3, [r7, #7]
    a3c0:	4613      	mov	r3, r2
    a3c2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    a3c4:	79bb      	ldrb	r3, [r7, #6]
    a3c6:	2201      	movs	r2, #1
    a3c8:	409a      	lsls	r2, r3
    a3ca:	79fb      	ldrb	r3, [r7, #7]
    a3cc:	4611      	mov	r1, r2
    a3ce:	4618      	mov	r0, r3
    a3d0:	4b02      	ldr	r3, [pc, #8]	; (a3dc <_usbd_ep_ack_io_cpt+0x28>)
    a3d2:	4798      	blx	r3
}
    a3d4:	bf00      	nop
    a3d6:	3708      	adds	r7, #8
    a3d8:	46bd      	mov	sp, r7
    a3da:	bd80      	pop	{r7, pc}
    a3dc:	0000a0e9 	.word	0x0000a0e9

0000a3e0 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    a3e0:	b480      	push	{r7}
    a3e2:	b085      	sub	sp, #20
    a3e4:	af00      	add	r7, sp, #0
    a3e6:	4603      	mov	r3, r0
    a3e8:	603a      	str	r2, [r7, #0]
    a3ea:	71fb      	strb	r3, [r7, #7]
    a3ec:	460b      	mov	r3, r1
    a3ee:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a3f0:	79fa      	ldrb	r2, [r7, #7]
    a3f2:	79bb      	ldrb	r3, [r7, #6]
    a3f4:	0052      	lsls	r2, r2, #1
    a3f6:	4413      	add	r3, r2
    a3f8:	011b      	lsls	r3, r3, #4
    a3fa:	4a06      	ldr	r2, [pc, #24]	; (a414 <_usbd_ep_set_buf+0x34>)
    a3fc:	4413      	add	r3, r2
    a3fe:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    a400:	68fb      	ldr	r3, [r7, #12]
    a402:	683a      	ldr	r2, [r7, #0]
    a404:	601a      	str	r2, [r3, #0]
}
    a406:	bf00      	nop
    a408:	3714      	adds	r7, #20
    a40a:	46bd      	mov	sp, r7
    a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a410:	4770      	bx	lr
    a412:	bf00      	nop
    a414:	20001fe4 	.word	0x20001fe4

0000a418 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    a418:	b480      	push	{r7}
    a41a:	b085      	sub	sp, #20
    a41c:	af00      	add	r7, sp, #0
    a41e:	4603      	mov	r3, r0
    a420:	71fb      	strb	r3, [r7, #7]
    a422:	460b      	mov	r3, r1
    a424:	71bb      	strb	r3, [r7, #6]
    a426:	4613      	mov	r3, r2
    a428:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a42a:	79fa      	ldrb	r2, [r7, #7]
    a42c:	79bb      	ldrb	r3, [r7, #6]
    a42e:	0052      	lsls	r2, r2, #1
    a430:	4413      	add	r3, r2
    a432:	011b      	lsls	r3, r3, #4
    a434:	4a08      	ldr	r2, [pc, #32]	; (a458 <_usbd_ep_set_in_count+0x40>)
    a436:	4413      	add	r3, r2
    a438:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    a43a:	88bb      	ldrh	r3, [r7, #4]
    a43c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a440:	b299      	uxth	r1, r3
    a442:	68fa      	ldr	r2, [r7, #12]
    a444:	6853      	ldr	r3, [r2, #4]
    a446:	f361 339b 	bfi	r3, r1, #14, #14
    a44a:	6053      	str	r3, [r2, #4]
}
    a44c:	bf00      	nop
    a44e:	3714      	adds	r7, #20
    a450:	46bd      	mov	sp, r7
    a452:	f85d 7b04 	ldr.w	r7, [sp], #4
    a456:	4770      	bx	lr
    a458:	20001fe4 	.word	0x20001fe4

0000a45c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    a45c:	b480      	push	{r7}
    a45e:	b085      	sub	sp, #20
    a460:	af00      	add	r7, sp, #0
    a462:	4603      	mov	r3, r0
    a464:	71fb      	strb	r3, [r7, #7]
    a466:	460b      	mov	r3, r1
    a468:	71bb      	strb	r3, [r7, #6]
    a46a:	4613      	mov	r3, r2
    a46c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a46e:	79fa      	ldrb	r2, [r7, #7]
    a470:	79bb      	ldrb	r3, [r7, #6]
    a472:	0052      	lsls	r2, r2, #1
    a474:	4413      	add	r3, r2
    a476:	011b      	lsls	r3, r3, #4
    a478:	4a08      	ldr	r2, [pc, #32]	; (a49c <_usbd_ep_set_in_size+0x40>)
    a47a:	4413      	add	r3, r2
    a47c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    a47e:	88bb      	ldrh	r3, [r7, #4]
    a480:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a484:	b299      	uxth	r1, r3
    a486:	68fa      	ldr	r2, [r7, #12]
    a488:	6853      	ldr	r3, [r2, #4]
    a48a:	f361 030d 	bfi	r3, r1, #0, #14
    a48e:	6053      	str	r3, [r2, #4]
}
    a490:	bf00      	nop
    a492:	3714      	adds	r7, #20
    a494:	46bd      	mov	sp, r7
    a496:	f85d 7b04 	ldr.w	r7, [sp], #4
    a49a:	4770      	bx	lr
    a49c:	20001fe4 	.word	0x20001fe4

0000a4a0 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    a4a0:	b480      	push	{r7}
    a4a2:	b085      	sub	sp, #20
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	4603      	mov	r3, r0
    a4a8:	71fb      	strb	r3, [r7, #7]
    a4aa:	460b      	mov	r3, r1
    a4ac:	71bb      	strb	r3, [r7, #6]
    a4ae:	4613      	mov	r3, r2
    a4b0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a4b2:	79fa      	ldrb	r2, [r7, #7]
    a4b4:	79bb      	ldrb	r3, [r7, #6]
    a4b6:	0052      	lsls	r2, r2, #1
    a4b8:	4413      	add	r3, r2
    a4ba:	011b      	lsls	r3, r3, #4
    a4bc:	4a08      	ldr	r2, [pc, #32]	; (a4e0 <_usbd_ep_set_out_count+0x40>)
    a4be:	4413      	add	r3, r2
    a4c0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    a4c2:	88bb      	ldrh	r3, [r7, #4]
    a4c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a4c8:	b299      	uxth	r1, r3
    a4ca:	68fa      	ldr	r2, [r7, #12]
    a4cc:	6853      	ldr	r3, [r2, #4]
    a4ce:	f361 030d 	bfi	r3, r1, #0, #14
    a4d2:	6053      	str	r3, [r2, #4]
}
    a4d4:	bf00      	nop
    a4d6:	3714      	adds	r7, #20
    a4d8:	46bd      	mov	sp, r7
    a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4de:	4770      	bx	lr
    a4e0:	20001fe4 	.word	0x20001fe4

0000a4e4 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    a4e4:	b480      	push	{r7}
    a4e6:	b085      	sub	sp, #20
    a4e8:	af00      	add	r7, sp, #0
    a4ea:	4603      	mov	r3, r0
    a4ec:	71fb      	strb	r3, [r7, #7]
    a4ee:	460b      	mov	r3, r1
    a4f0:	71bb      	strb	r3, [r7, #6]
    a4f2:	4613      	mov	r3, r2
    a4f4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a4f6:	79fa      	ldrb	r2, [r7, #7]
    a4f8:	79bb      	ldrb	r3, [r7, #6]
    a4fa:	0052      	lsls	r2, r2, #1
    a4fc:	4413      	add	r3, r2
    a4fe:	011b      	lsls	r3, r3, #4
    a500:	4a08      	ldr	r2, [pc, #32]	; (a524 <_usbd_ep_set_out_size+0x40>)
    a502:	4413      	add	r3, r2
    a504:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    a506:	88bb      	ldrh	r3, [r7, #4]
    a508:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a50c:	b299      	uxth	r1, r3
    a50e:	68fa      	ldr	r2, [r7, #12]
    a510:	6853      	ldr	r3, [r2, #4]
    a512:	f361 339b 	bfi	r3, r1, #14, #14
    a516:	6053      	str	r3, [r2, #4]
}
    a518:	bf00      	nop
    a51a:	3714      	adds	r7, #20
    a51c:	46bd      	mov	sp, r7
    a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a522:	4770      	bx	lr
    a524:	20001fe4 	.word	0x20001fe4

0000a528 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    a528:	b580      	push	{r7, lr}
    a52a:	b084      	sub	sp, #16
    a52c:	af00      	add	r7, sp, #0
    a52e:	60ba      	str	r2, [r7, #8]
    a530:	607b      	str	r3, [r7, #4]
    a532:	4603      	mov	r3, r0
    a534:	73fb      	strb	r3, [r7, #15]
    a536:	460b      	mov	r3, r1
    a538:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    a53a:	68bb      	ldr	r3, [r7, #8]
    a53c:	b29a      	uxth	r2, r3
    a53e:	7bb9      	ldrb	r1, [r7, #14]
    a540:	7bfb      	ldrb	r3, [r7, #15]
    a542:	4618      	mov	r0, r3
    a544:	4b06      	ldr	r3, [pc, #24]	; (a560 <_usbd_ep_set_in_trans+0x38>)
    a546:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	b29a      	uxth	r2, r3
    a54c:	7bb9      	ldrb	r1, [r7, #14]
    a54e:	7bfb      	ldrb	r3, [r7, #15]
    a550:	4618      	mov	r0, r3
    a552:	4b04      	ldr	r3, [pc, #16]	; (a564 <_usbd_ep_set_in_trans+0x3c>)
    a554:	4798      	blx	r3
}
    a556:	bf00      	nop
    a558:	3710      	adds	r7, #16
    a55a:	46bd      	mov	sp, r7
    a55c:	bd80      	pop	{r7, pc}
    a55e:	bf00      	nop
    a560:	0000a45d 	.word	0x0000a45d
    a564:	0000a419 	.word	0x0000a419

0000a568 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    a568:	b580      	push	{r7, lr}
    a56a:	b084      	sub	sp, #16
    a56c:	af00      	add	r7, sp, #0
    a56e:	60ba      	str	r2, [r7, #8]
    a570:	607b      	str	r3, [r7, #4]
    a572:	4603      	mov	r3, r0
    a574:	73fb      	strb	r3, [r7, #15]
    a576:	460b      	mov	r3, r1
    a578:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    a57a:	68bb      	ldr	r3, [r7, #8]
    a57c:	b29a      	uxth	r2, r3
    a57e:	7bb9      	ldrb	r1, [r7, #14]
    a580:	7bfb      	ldrb	r3, [r7, #15]
    a582:	4618      	mov	r0, r3
    a584:	4b06      	ldr	r3, [pc, #24]	; (a5a0 <_usbd_ep_set_out_trans+0x38>)
    a586:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    a588:	687b      	ldr	r3, [r7, #4]
    a58a:	b29a      	uxth	r2, r3
    a58c:	7bb9      	ldrb	r1, [r7, #14]
    a58e:	7bfb      	ldrb	r3, [r7, #15]
    a590:	4618      	mov	r0, r3
    a592:	4b04      	ldr	r3, [pc, #16]	; (a5a4 <_usbd_ep_set_out_trans+0x3c>)
    a594:	4798      	blx	r3
}
    a596:	bf00      	nop
    a598:	3710      	adds	r7, #16
    a59a:	46bd      	mov	sp, r7
    a59c:	bd80      	pop	{r7, pc}
    a59e:	bf00      	nop
    a5a0:	0000a4e5 	.word	0x0000a4e5
    a5a4:	0000a4a1 	.word	0x0000a4a1

0000a5a8 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    a5a8:	b480      	push	{r7}
    a5aa:	b085      	sub	sp, #20
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	4603      	mov	r3, r0
    a5b0:	460a      	mov	r2, r1
    a5b2:	71fb      	strb	r3, [r7, #7]
    a5b4:	4613      	mov	r3, r2
    a5b6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    a5b8:	79fa      	ldrb	r2, [r7, #7]
    a5ba:	79bb      	ldrb	r3, [r7, #6]
    a5bc:	0052      	lsls	r2, r2, #1
    a5be:	4413      	add	r3, r2
    a5c0:	011b      	lsls	r3, r3, #4
    a5c2:	4a06      	ldr	r2, [pc, #24]	; (a5dc <_usbd_ep_clear_bank_status+0x34>)
    a5c4:	4413      	add	r3, r2
    a5c6:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    a5c8:	68fb      	ldr	r3, [r7, #12]
    a5ca:	2200      	movs	r2, #0
    a5cc:	729a      	strb	r2, [r3, #10]
}
    a5ce:	bf00      	nop
    a5d0:	3714      	adds	r7, #20
    a5d2:	46bd      	mov	sp, r7
    a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5d8:	4770      	bx	lr
    a5da:	bf00      	nop
    a5dc:	20001fe4 	.word	0x20001fe4

0000a5e0 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    a5e0:	b580      	push	{r7, lr}
    a5e2:	b082      	sub	sp, #8
    a5e4:	af00      	add	r7, sp, #0
    a5e6:	4603      	mov	r3, r0
    a5e8:	71fb      	strb	r3, [r7, #7]
    a5ea:	460b      	mov	r3, r1
    a5ec:	71bb      	strb	r3, [r7, #6]
    a5ee:	4613      	mov	r3, r2
    a5f0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    a5f2:	797b      	ldrb	r3, [r7, #5]
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	d00b      	beq.n	a610 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    a5f8:	79bb      	ldrb	r3, [r7, #6]
    a5fa:	2240      	movs	r2, #64	; 0x40
    a5fc:	fa02 f303 	lsl.w	r3, r2, r3
    a600:	b2da      	uxtb	r2, r3
    a602:	79fb      	ldrb	r3, [r7, #7]
    a604:	4619      	mov	r1, r3
    a606:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a60a:	4b09      	ldr	r3, [pc, #36]	; (a630 <_usbd_ep_set_in_rdy+0x50>)
    a60c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    a60e:	e00a      	b.n	a626 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    a610:	79bb      	ldrb	r3, [r7, #6]
    a612:	2240      	movs	r2, #64	; 0x40
    a614:	fa02 f303 	lsl.w	r3, r2, r3
    a618:	b2da      	uxtb	r2, r3
    a61a:	79fb      	ldrb	r3, [r7, #7]
    a61c:	4619      	mov	r1, r3
    a61e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a622:	4b04      	ldr	r3, [pc, #16]	; (a634 <_usbd_ep_set_in_rdy+0x54>)
    a624:	4798      	blx	r3
}
    a626:	bf00      	nop
    a628:	3708      	adds	r7, #8
    a62a:	46bd      	mov	sp, r7
    a62c:	bd80      	pop	{r7, pc}
    a62e:	bf00      	nop
    a630:	00009bed 	.word	0x00009bed
    a634:	00009c41 	.word	0x00009c41

0000a638 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    a638:	b580      	push	{r7, lr}
    a63a:	b082      	sub	sp, #8
    a63c:	af00      	add	r7, sp, #0
    a63e:	4603      	mov	r3, r0
    a640:	71fb      	strb	r3, [r7, #7]
    a642:	460b      	mov	r3, r1
    a644:	71bb      	strb	r3, [r7, #6]
    a646:	4613      	mov	r3, r2
    a648:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    a64a:	797b      	ldrb	r3, [r7, #5]
    a64c:	2b00      	cmp	r3, #0
    a64e:	d00b      	beq.n	a668 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    a650:	79bb      	ldrb	r3, [r7, #6]
    a652:	2240      	movs	r2, #64	; 0x40
    a654:	fa02 f303 	lsl.w	r3, r2, r3
    a658:	b2da      	uxtb	r2, r3
    a65a:	79fb      	ldrb	r3, [r7, #7]
    a65c:	4619      	mov	r1, r3
    a65e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a662:	4b09      	ldr	r3, [pc, #36]	; (a688 <_usbd_ep_set_out_rdy+0x50>)
    a664:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    a666:	e00a      	b.n	a67e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    a668:	79bb      	ldrb	r3, [r7, #6]
    a66a:	2240      	movs	r2, #64	; 0x40
    a66c:	fa02 f303 	lsl.w	r3, r2, r3
    a670:	b2da      	uxtb	r2, r3
    a672:	79fb      	ldrb	r3, [r7, #7]
    a674:	4619      	mov	r1, r3
    a676:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a67a:	4b04      	ldr	r3, [pc, #16]	; (a68c <_usbd_ep_set_out_rdy+0x54>)
    a67c:	4798      	blx	r3
}
    a67e:	bf00      	nop
    a680:	3708      	adds	r7, #8
    a682:	46bd      	mov	sp, r7
    a684:	bd80      	pop	{r7, pc}
    a686:	bf00      	nop
    a688:	00009c41 	.word	0x00009c41
    a68c:	00009bed 	.word	0x00009bed

0000a690 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    a690:	b480      	push	{r7}
    a692:	b083      	sub	sp, #12
    a694:	af00      	add	r7, sp, #0
    a696:	4603      	mov	r3, r0
    a698:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    a69a:	88fb      	ldrh	r3, [r7, #6]
    a69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a6a0:	d820      	bhi.n	a6e4 <_usbd_ep_pcksize_size+0x54>
    a6a2:	88fb      	ldrh	r3, [r7, #6]
    a6a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a6a8:	d81a      	bhi.n	a6e0 <_usbd_ep_pcksize_size+0x50>
    a6aa:	88fb      	ldrh	r3, [r7, #6]
    a6ac:	2b80      	cmp	r3, #128	; 0x80
    a6ae:	d815      	bhi.n	a6dc <_usbd_ep_pcksize_size+0x4c>
    a6b0:	88fb      	ldrh	r3, [r7, #6]
    a6b2:	2b40      	cmp	r3, #64	; 0x40
    a6b4:	d810      	bhi.n	a6d8 <_usbd_ep_pcksize_size+0x48>
    a6b6:	88fb      	ldrh	r3, [r7, #6]
    a6b8:	2b20      	cmp	r3, #32
    a6ba:	d80b      	bhi.n	a6d4 <_usbd_ep_pcksize_size+0x44>
    a6bc:	88fb      	ldrh	r3, [r7, #6]
    a6be:	2b10      	cmp	r3, #16
    a6c0:	d806      	bhi.n	a6d0 <_usbd_ep_pcksize_size+0x40>
    a6c2:	88fb      	ldrh	r3, [r7, #6]
    a6c4:	2b08      	cmp	r3, #8
    a6c6:	bf8c      	ite	hi
    a6c8:	2301      	movhi	r3, #1
    a6ca:	2300      	movls	r3, #0
    a6cc:	b2db      	uxtb	r3, r3
    a6ce:	e00a      	b.n	a6e6 <_usbd_ep_pcksize_size+0x56>
    a6d0:	2302      	movs	r3, #2
    a6d2:	e008      	b.n	a6e6 <_usbd_ep_pcksize_size+0x56>
    a6d4:	2303      	movs	r3, #3
    a6d6:	e006      	b.n	a6e6 <_usbd_ep_pcksize_size+0x56>
    a6d8:	2304      	movs	r3, #4
    a6da:	e004      	b.n	a6e6 <_usbd_ep_pcksize_size+0x56>
    a6dc:	2305      	movs	r3, #5
    a6de:	e002      	b.n	a6e6 <_usbd_ep_pcksize_size+0x56>
    a6e0:	2306      	movs	r3, #6
    a6e2:	e000      	b.n	a6e6 <_usbd_ep_pcksize_size+0x56>
    a6e4:	2307      	movs	r3, #7
}
    a6e6:	4618      	mov	r0, r3
    a6e8:	370c      	adds	r7, #12
    a6ea:	46bd      	mov	sp, r7
    a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6f0:	4770      	bx	lr
	...

0000a6f4 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    a6f4:	b480      	push	{r7}
    a6f6:	b085      	sub	sp, #20
    a6f8:	af00      	add	r7, sp, #0
    a6fa:	4603      	mov	r3, r0
    a6fc:	460a      	mov	r2, r1
    a6fe:	71fb      	strb	r3, [r7, #7]
    a700:	4613      	mov	r3, r2
    a702:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    a704:	79fb      	ldrb	r3, [r7, #7]
    a706:	2b00      	cmp	r3, #0
    a708:	d008      	beq.n	a71c <_usb_d_dev_ept+0x28>
    a70a:	79bb      	ldrb	r3, [r7, #6]
    a70c:	2b00      	cmp	r3, #0
    a70e:	d003      	beq.n	a718 <_usb_d_dev_ept+0x24>
    a710:	79fb      	ldrb	r3, [r7, #7]
    a712:	3304      	adds	r3, #4
    a714:	b2db      	uxtb	r3, r3
    a716:	e002      	b.n	a71e <_usb_d_dev_ept+0x2a>
    a718:	79fb      	ldrb	r3, [r7, #7]
    a71a:	e000      	b.n	a71e <_usb_d_dev_ept+0x2a>
    a71c:	2300      	movs	r3, #0
    a71e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    a720:	7bfa      	ldrb	r2, [r7, #15]
    a722:	4613      	mov	r3, r2
    a724:	009b      	lsls	r3, r3, #2
    a726:	4413      	add	r3, r2
    a728:	009b      	lsls	r3, r3, #2
    a72a:	3310      	adds	r3, #16
    a72c:	4a04      	ldr	r2, [pc, #16]	; (a740 <_usb_d_dev_ept+0x4c>)
    a72e:	4413      	add	r3, r2
    a730:	3304      	adds	r3, #4
}
    a732:	4618      	mov	r0, r3
    a734:	3714      	adds	r7, #20
    a736:	46bd      	mov	sp, r7
    a738:	f85d 7b04 	ldr.w	r7, [sp], #4
    a73c:	4770      	bx	lr
    a73e:	bf00      	nop
    a740:	20001f1c 	.word	0x20001f1c

0000a744 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    a744:	b580      	push	{r7, lr}
    a746:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    a748:	2104      	movs	r1, #4
    a74a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a74e:	4b03      	ldr	r3, [pc, #12]	; (a75c <_usb_d_dev_sof+0x18>)
    a750:	4798      	blx	r3
	dev_inst.callbacks.sof();
    a752:	4b03      	ldr	r3, [pc, #12]	; (a760 <_usb_d_dev_sof+0x1c>)
    a754:	681b      	ldr	r3, [r3, #0]
    a756:	4798      	blx	r3
}
    a758:	bf00      	nop
    a75a:	bd80      	pop	{r7, pc}
    a75c:	00009dbb 	.word	0x00009dbb
    a760:	20001f1c 	.word	0x20001f1c

0000a764 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    a764:	b580      	push	{r7, lr}
    a766:	b084      	sub	sp, #16
    a768:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    a76a:	2300      	movs	r3, #0
    a76c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a76e:	f240 2101 	movw	r1, #513	; 0x201
    a772:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a776:	4b1a      	ldr	r3, [pc, #104]	; (a7e0 <_usb_d_dev_lpmsusp+0x7c>)
    a778:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a77a:	f240 2101 	movw	r1, #513	; 0x201
    a77e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a782:	4b18      	ldr	r3, [pc, #96]	; (a7e4 <_usb_d_dev_lpmsusp+0x80>)
    a784:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a786:	2170      	movs	r1, #112	; 0x70
    a788:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a78c:	4b16      	ldr	r3, [pc, #88]	; (a7e8 <_usb_d_dev_lpmsusp+0x84>)
    a78e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    a790:	2300      	movs	r3, #0
    a792:	73fb      	strb	r3, [r7, #15]
    a794:	e018      	b.n	a7c8 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    a796:	7bfb      	ldrb	r3, [r7, #15]
    a798:	015b      	lsls	r3, r3, #5
    a79a:	4a14      	ldr	r2, [pc, #80]	; (a7ec <_usb_d_dev_lpmsusp+0x88>)
    a79c:	4413      	add	r3, r2
    a79e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	891b      	ldrh	r3, [r3, #8]
    a7a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    a7a8:	b2db      	uxtb	r3, r3
    a7aa:	2b03      	cmp	r3, #3
    a7ac:	d109      	bne.n	a7c2 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    a7ae:	687b      	ldr	r3, [r7, #4]
    a7b0:	891b      	ldrh	r3, [r3, #8]
    a7b2:	f3c3 130a 	ubfx	r3, r3, #4, #11
    a7b6:	b29b      	uxth	r3, r3
    a7b8:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    a7ba:	687b      	ldr	r3, [r7, #4]
    a7bc:	2200      	movs	r2, #0
    a7be:	811a      	strh	r2, [r3, #8]
			break;
    a7c0:	e005      	b.n	a7ce <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    a7c2:	7bfb      	ldrb	r3, [r7, #15]
    a7c4:	3301      	adds	r3, #1
    a7c6:	73fb      	strb	r3, [r7, #15]
    a7c8:	7bfb      	ldrb	r3, [r7, #15]
    a7ca:	2b03      	cmp	r3, #3
    a7cc:	d9e3      	bls.n	a796 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    a7ce:	4b08      	ldr	r3, [pc, #32]	; (a7f0 <_usb_d_dev_lpmsusp+0x8c>)
    a7d0:	685b      	ldr	r3, [r3, #4]
    a7d2:	68b9      	ldr	r1, [r7, #8]
    a7d4:	2003      	movs	r0, #3
    a7d6:	4798      	blx	r3
}
    a7d8:	bf00      	nop
    a7da:	3710      	adds	r7, #16
    a7dc:	46bd      	mov	sp, r7
    a7de:	bd80      	pop	{r7, pc}
    a7e0:	00009dbb 	.word	0x00009dbb
    a7e4:	00009e11 	.word	0x00009e11
    a7e8:	00009dd9 	.word	0x00009dd9
    a7ec:	20001fe4 	.word	0x20001fe4
    a7f0:	20001f1c 	.word	0x20001f1c

0000a7f4 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    a7f4:	b580      	push	{r7, lr}
    a7f6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    a7f8:	2180      	movs	r1, #128	; 0x80
    a7fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7fe:	4b04      	ldr	r3, [pc, #16]	; (a810 <_usb_d_dev_ramerr+0x1c>)
    a800:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    a802:	4b04      	ldr	r3, [pc, #16]	; (a814 <_usb_d_dev_ramerr+0x20>)
    a804:	685b      	ldr	r3, [r3, #4]
    a806:	2100      	movs	r1, #0
    a808:	2005      	movs	r0, #5
    a80a:	4798      	blx	r3
}
    a80c:	bf00      	nop
    a80e:	bd80      	pop	{r7, pc}
    a810:	00009dbb 	.word	0x00009dbb
    a814:	20001f1c 	.word	0x20001f1c

0000a818 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    a818:	b580      	push	{r7, lr}
    a81a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a81c:	2170      	movs	r1, #112	; 0x70
    a81e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a822:	4b0b      	ldr	r3, [pc, #44]	; (a850 <_usb_d_dev_wakeup+0x38>)
    a824:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a826:	2170      	movs	r1, #112	; 0x70
    a828:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a82c:	4b09      	ldr	r3, [pc, #36]	; (a854 <_usb_d_dev_wakeup+0x3c>)
    a82e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a830:	f240 2101 	movw	r1, #513	; 0x201
    a834:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a838:	4b07      	ldr	r3, [pc, #28]	; (a858 <_usb_d_dev_wakeup+0x40>)
    a83a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    a83c:	2000      	movs	r0, #0
    a83e:	4b07      	ldr	r3, [pc, #28]	; (a85c <_usb_d_dev_wakeup+0x44>)
    a840:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    a842:	4b07      	ldr	r3, [pc, #28]	; (a860 <_usb_d_dev_wakeup+0x48>)
    a844:	685b      	ldr	r3, [r3, #4]
    a846:	2100      	movs	r1, #0
    a848:	2002      	movs	r0, #2
    a84a:	4798      	blx	r3
}
    a84c:	bf00      	nop
    a84e:	bd80      	pop	{r7, pc}
    a850:	00009dbb 	.word	0x00009dbb
    a854:	00009e11 	.word	0x00009e11
    a858:	00009dd9 	.word	0x00009dd9
    a85c:	0000a0b9 	.word	0x0000a0b9
    a860:	20001f1c 	.word	0x20001f1c

0000a864 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    a864:	b580      	push	{r7, lr}
    a866:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    a868:	2200      	movs	r2, #0
    a86a:	2100      	movs	r1, #0
    a86c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a870:	4b0d      	ldr	r3, [pc, #52]	; (a8a8 <_usb_d_dev_reset+0x44>)
    a872:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    a874:	2108      	movs	r1, #8
    a876:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a87a:	4b0c      	ldr	r3, [pc, #48]	; (a8ac <_usb_d_dev_reset+0x48>)
    a87c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a87e:	2170      	movs	r1, #112	; 0x70
    a880:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a884:	4b0a      	ldr	r3, [pc, #40]	; (a8b0 <_usb_d_dev_reset+0x4c>)
    a886:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a888:	f240 2101 	movw	r1, #513	; 0x201
    a88c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a890:	4b08      	ldr	r3, [pc, #32]	; (a8b4 <_usb_d_dev_reset+0x50>)
    a892:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    a894:	4b08      	ldr	r3, [pc, #32]	; (a8b8 <_usb_d_dev_reset+0x54>)
    a896:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    a898:	4b08      	ldr	r3, [pc, #32]	; (a8bc <_usb_d_dev_reset+0x58>)
    a89a:	685b      	ldr	r3, [r3, #4]
    a89c:	2100      	movs	r1, #0
    a89e:	2001      	movs	r0, #1
    a8a0:	4798      	blx	r3
}
    a8a2:	bf00      	nop
    a8a4:	bd80      	pop	{r7, pc}
    a8a6:	bf00      	nop
    a8a8:	00009d51 	.word	0x00009d51
    a8ac:	00009dbb 	.word	0x00009dbb
    a8b0:	00009e11 	.word	0x00009e11
    a8b4:	00009dd9 	.word	0x00009dd9
    a8b8:	0000b421 	.word	0x0000b421
    a8bc:	20001f1c 	.word	0x20001f1c

0000a8c0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    a8c0:	b580      	push	{r7, lr}
    a8c2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a8c4:	f240 2101 	movw	r1, #513	; 0x201
    a8c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a8cc:	4b09      	ldr	r3, [pc, #36]	; (a8f4 <_usb_d_dev_suspend+0x34>)
    a8ce:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a8d0:	f240 2101 	movw	r1, #513	; 0x201
    a8d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a8d8:	4b07      	ldr	r3, [pc, #28]	; (a8f8 <_usb_d_dev_suspend+0x38>)
    a8da:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a8dc:	2170      	movs	r1, #112	; 0x70
    a8de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a8e2:	4b06      	ldr	r3, [pc, #24]	; (a8fc <_usb_d_dev_suspend+0x3c>)
    a8e4:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    a8e6:	4b06      	ldr	r3, [pc, #24]	; (a900 <_usb_d_dev_suspend+0x40>)
    a8e8:	685b      	ldr	r3, [r3, #4]
    a8ea:	2100      	movs	r1, #0
    a8ec:	2004      	movs	r0, #4
    a8ee:	4798      	blx	r3
}
    a8f0:	bf00      	nop
    a8f2:	bd80      	pop	{r7, pc}
    a8f4:	00009dbb 	.word	0x00009dbb
    a8f8:	00009e11 	.word	0x00009e11
    a8fc:	00009dd9 	.word	0x00009dd9
    a900:	20001f1c 	.word	0x20001f1c

0000a904 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    a904:	b580      	push	{r7, lr}
    a906:	b082      	sub	sp, #8
    a908:	af00      	add	r7, sp, #0
	bool     rc    = true;
    a90a:	2301      	movs	r3, #1
    a90c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    a90e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a912:	4b22      	ldr	r3, [pc, #136]	; (a99c <_usb_d_dev_handle_nep+0x98>)
    a914:	4798      	blx	r3
    a916:	4603      	mov	r3, r0
    a918:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    a91a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a91e:	4b20      	ldr	r3, [pc, #128]	; (a9a0 <_usb_d_dev_handle_nep+0x9c>)
    a920:	4798      	blx	r3
    a922:	4603      	mov	r3, r0
    a924:	461a      	mov	r2, r3
    a926:	88bb      	ldrh	r3, [r7, #4]
    a928:	4013      	ands	r3, r2
    a92a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    a92c:	88bb      	ldrh	r3, [r7, #4]
    a92e:	f003 0304 	and.w	r3, r3, #4
    a932:	2b00      	cmp	r3, #0
    a934:	d003      	beq.n	a93e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    a936:	4b1b      	ldr	r3, [pc, #108]	; (a9a4 <_usb_d_dev_handle_nep+0xa0>)
    a938:	4798      	blx	r3
		return true;
    a93a:	2301      	movs	r3, #1
    a93c:	e02a      	b.n	a994 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    a93e:	88bb      	ldrh	r3, [r7, #4]
    a940:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a944:	2b00      	cmp	r3, #0
    a946:	d002      	beq.n	a94e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    a948:	4b17      	ldr	r3, [pc, #92]	; (a9a8 <_usb_d_dev_handle_nep+0xa4>)
    a94a:	4798      	blx	r3
    a94c:	e021      	b.n	a992 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    a94e:	88bb      	ldrh	r3, [r7, #4]
    a950:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a954:	2b00      	cmp	r3, #0
    a956:	d002      	beq.n	a95e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    a958:	4b14      	ldr	r3, [pc, #80]	; (a9ac <_usb_d_dev_handle_nep+0xa8>)
    a95a:	4798      	blx	r3
    a95c:	e019      	b.n	a992 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    a95e:	88bb      	ldrh	r3, [r7, #4]
    a960:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a964:	2b00      	cmp	r3, #0
    a966:	d002      	beq.n	a96e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    a968:	4b11      	ldr	r3, [pc, #68]	; (a9b0 <_usb_d_dev_handle_nep+0xac>)
    a96a:	4798      	blx	r3
    a96c:	e011      	b.n	a992 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    a96e:	88bb      	ldrh	r3, [r7, #4]
    a970:	f003 0308 	and.w	r3, r3, #8
    a974:	2b00      	cmp	r3, #0
    a976:	d002      	beq.n	a97e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    a978:	4b0e      	ldr	r3, [pc, #56]	; (a9b4 <_usb_d_dev_handle_nep+0xb0>)
    a97a:	4798      	blx	r3
    a97c:	e009      	b.n	a992 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    a97e:	88bb      	ldrh	r3, [r7, #4]
    a980:	f003 0301 	and.w	r3, r3, #1
    a984:	2b00      	cmp	r3, #0
    a986:	d002      	beq.n	a98e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    a988:	4b0b      	ldr	r3, [pc, #44]	; (a9b8 <_usb_d_dev_handle_nep+0xb4>)
    a98a:	4798      	blx	r3
    a98c:	e001      	b.n	a992 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    a98e:	2300      	movs	r3, #0
    a990:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    a992:	79fb      	ldrb	r3, [r7, #7]
}
    a994:	4618      	mov	r0, r3
    a996:	3708      	adds	r7, #8
    a998:	46bd      	mov	sp, r7
    a99a:	bd80      	pop	{r7, pc}
    a99c:	00009da1 	.word	0x00009da1
    a9a0:	00009df7 	.word	0x00009df7
    a9a4:	0000a745 	.word	0x0000a745
    a9a8:	0000a765 	.word	0x0000a765
    a9ac:	0000a7f5 	.word	0x0000a7f5
    a9b0:	0000a819 	.word	0x0000a819
    a9b4:	0000a865 	.word	0x0000a865
    a9b8:	0000a8c1 	.word	0x0000a8c1

0000a9bc <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a9bc:	b590      	push	{r4, r7, lr}
    a9be:	b089      	sub	sp, #36	; 0x24
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	6078      	str	r0, [r7, #4]
    a9c4:	460b      	mov	r3, r1
    a9c6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    a9c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a9cc:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    a9ce:	687b      	ldr	r3, [r7, #4]
    a9d0:	7c9b      	ldrb	r3, [r3, #18]
    a9d2:	f003 030f 	and.w	r3, r3, #15
    a9d6:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a9d8:	7dfb      	ldrb	r3, [r7, #23]
    a9da:	015b      	lsls	r3, r3, #5
    a9dc:	4a73      	ldr	r2, [pc, #460]	; (abac <_usb_d_dev_in_next+0x1f0>)
    a9de:	4413      	add	r3, r2
    a9e0:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    a9e2:	78fb      	ldrb	r3, [r7, #3]
    a9e4:	2b00      	cmp	r3, #0
    a9e6:	d006      	beq.n	a9f6 <_usb_d_dev_in_next+0x3a>
    a9e8:	693b      	ldr	r3, [r7, #16]
    a9ea:	3310      	adds	r3, #16
    a9ec:	685b      	ldr	r3, [r3, #4]
    a9ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a9f2:	b29b      	uxth	r3, r3
    a9f4:	e000      	b.n	a9f8 <_usb_d_dev_in_next+0x3c>
    a9f6:	2300      	movs	r3, #0
    a9f8:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a9fa:	687b      	ldr	r3, [r7, #4]
    a9fc:	8a1b      	ldrh	r3, [r3, #16]
    a9fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    aa02:	4293      	cmp	r3, r2
    aa04:	d103      	bne.n	aa0e <_usb_d_dev_in_next+0x52>
    aa06:	687b      	ldr	r3, [r7, #4]
    aa08:	8a1b      	ldrh	r3, [r3, #16]
    aa0a:	b21b      	sxth	r3, r3
    aa0c:	e004      	b.n	aa18 <_usb_d_dev_in_next+0x5c>
    aa0e:	687b      	ldr	r3, [r7, #4]
    aa10:	8a1b      	ldrh	r3, [r3, #16]
    aa12:	3b01      	subs	r3, #1
    aa14:	b29b      	uxth	r3, r3
    aa16:	b21b      	sxth	r3, r3
    aa18:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    aa1c:	4013      	ands	r3, r2
    aa1e:	b21b      	sxth	r3, r3
    aa20:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    aa22:	2300      	movs	r3, #0
    aa24:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    aa26:	687b      	ldr	r3, [r7, #4]
    aa28:	7cdb      	ldrb	r3, [r3, #19]
    aa2a:	f003 0307 	and.w	r3, r3, #7
    aa2e:	b2db      	uxtb	r3, r3
    aa30:	2b01      	cmp	r3, #1
    aa32:	bf0c      	ite	eq
    aa34:	2301      	moveq	r3, #1
    aa36:	2300      	movne	r3, #0
    aa38:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    aa3a:	78fb      	ldrb	r3, [r7, #3]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d004      	beq.n	aa4a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    aa40:	7dfb      	ldrb	r3, [r7, #23]
    aa42:	2101      	movs	r1, #1
    aa44:	4618      	mov	r0, r3
    aa46:	4b5a      	ldr	r3, [pc, #360]	; (abb0 <_usb_d_dev_in_next+0x1f4>)
    aa48:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    aa4a:	687b      	ldr	r3, [r7, #4]
    aa4c:	689a      	ldr	r2, [r3, #8]
    aa4e:	89fb      	ldrh	r3, [r7, #14]
    aa50:	441a      	add	r2, r3
    aa52:	687b      	ldr	r3, [r7, #4]
    aa54:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    aa56:	687b      	ldr	r3, [r7, #4]
    aa58:	689a      	ldr	r2, [r3, #8]
    aa5a:	687b      	ldr	r3, [r7, #4]
    aa5c:	685b      	ldr	r3, [r3, #4]
    aa5e:	429a      	cmp	r2, r3
    aa60:	d243      	bcs.n	aaea <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    aa62:	687b      	ldr	r3, [r7, #4]
    aa64:	685b      	ldr	r3, [r3, #4]
    aa66:	b29a      	uxth	r2, r3
    aa68:	687b      	ldr	r3, [r7, #4]
    aa6a:	689b      	ldr	r3, [r3, #8]
    aa6c:	b29b      	uxth	r3, r3
    aa6e:	1ad3      	subs	r3, r2, r3
    aa70:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    aa72:	687b      	ldr	r3, [r7, #4]
    aa74:	7cdb      	ldrb	r3, [r3, #19]
    aa76:	f003 0320 	and.w	r3, r3, #32
    aa7a:	b2db      	uxtb	r3, r3
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d01b      	beq.n	aab8 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    aa80:	687b      	ldr	r3, [r7, #4]
    aa82:	8a1b      	ldrh	r3, [r3, #16]
    aa84:	8bfa      	ldrh	r2, [r7, #30]
    aa86:	429a      	cmp	r2, r3
    aa88:	d902      	bls.n	aa90 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    aa8a:	687b      	ldr	r3, [r7, #4]
    aa8c:	8a1b      	ldrh	r3, [r3, #16]
    aa8e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	68d8      	ldr	r0, [r3, #12]
    aa94:	687b      	ldr	r3, [r7, #4]
    aa96:	681a      	ldr	r2, [r3, #0]
    aa98:	687b      	ldr	r3, [r7, #4]
    aa9a:	689b      	ldr	r3, [r3, #8]
    aa9c:	4413      	add	r3, r2
    aa9e:	8bfa      	ldrh	r2, [r7, #30]
    aaa0:	4619      	mov	r1, r3
    aaa2:	4b44      	ldr	r3, [pc, #272]	; (abb4 <_usb_d_dev_in_next+0x1f8>)
    aaa4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    aaa6:	687b      	ldr	r3, [r7, #4]
    aaa8:	68db      	ldr	r3, [r3, #12]
    aaaa:	461a      	mov	r2, r3
    aaac:	7dfb      	ldrb	r3, [r7, #23]
    aaae:	2101      	movs	r1, #1
    aab0:	4618      	mov	r0, r3
    aab2:	4b41      	ldr	r3, [pc, #260]	; (abb8 <_usb_d_dev_in_next+0x1fc>)
    aab4:	4798      	blx	r3
    aab6:	e011      	b.n	aadc <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    aab8:	8bfb      	ldrh	r3, [r7, #30]
    aaba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    aabe:	d902      	bls.n	aac6 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    aac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    aac4:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    aac6:	687b      	ldr	r3, [r7, #4]
    aac8:	681a      	ldr	r2, [r3, #0]
    aaca:	687b      	ldr	r3, [r7, #4]
    aacc:	689b      	ldr	r3, [r3, #8]
    aace:	4413      	add	r3, r2
    aad0:	461a      	mov	r2, r3
    aad2:	7dfb      	ldrb	r3, [r7, #23]
    aad4:	2101      	movs	r1, #1
    aad6:	4618      	mov	r0, r3
    aad8:	4b37      	ldr	r3, [pc, #220]	; (abb8 <_usb_d_dev_in_next+0x1fc>)
    aada:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    aadc:	8bfa      	ldrh	r2, [r7, #30]
    aade:	7df8      	ldrb	r0, [r7, #23]
    aae0:	2300      	movs	r3, #0
    aae2:	2101      	movs	r1, #1
    aae4:	4c35      	ldr	r4, [pc, #212]	; (abbc <_usb_d_dev_in_next+0x200>)
    aae6:	47a0      	blx	r4
		goto _in_tx_exec;
    aae8:	e041      	b.n	ab6e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    aaea:	687b      	ldr	r3, [r7, #4]
    aaec:	7cdb      	ldrb	r3, [r3, #19]
    aaee:	f003 0310 	and.w	r3, r3, #16
    aaf2:	b2db      	uxtb	r3, r3
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d00b      	beq.n	ab10 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    aaf8:	687a      	ldr	r2, [r7, #4]
    aafa:	7cd3      	ldrb	r3, [r2, #19]
    aafc:	f36f 1304 	bfc	r3, #4, #1
    ab00:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    ab02:	7df8      	ldrb	r0, [r7, #23]
    ab04:	2300      	movs	r3, #0
    ab06:	2200      	movs	r2, #0
    ab08:	2101      	movs	r1, #1
    ab0a:	4c2c      	ldr	r4, [pc, #176]	; (abbc <_usb_d_dev_in_next+0x200>)
    ab0c:	47a0      	blx	r4
		goto _in_tx_exec;
    ab0e:	e02e      	b.n	ab6e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    ab10:	7afb      	ldrb	r3, [r7, #11]
    ab12:	2b00      	cmp	r3, #0
    ab14:	d006      	beq.n	ab24 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    ab16:	7dfb      	ldrb	r3, [r7, #23]
    ab18:	224b      	movs	r2, #75	; 0x4b
    ab1a:	4619      	mov	r1, r3
    ab1c:	69b8      	ldr	r0, [r7, #24]
    ab1e:	4b28      	ldr	r3, [pc, #160]	; (abc0 <_usb_d_dev_in_next+0x204>)
    ab20:	4798      	blx	r3
    ab22:	e005      	b.n	ab30 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    ab24:	7dfb      	ldrb	r3, [r7, #23]
    ab26:	224a      	movs	r2, #74	; 0x4a
    ab28:	4619      	mov	r1, r3
    ab2a:	69b8      	ldr	r0, [r7, #24]
    ab2c:	4b24      	ldr	r3, [pc, #144]	; (abc0 <_usb_d_dev_in_next+0x204>)
    ab2e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    ab30:	687b      	ldr	r3, [r7, #4]
    ab32:	8a1b      	ldrh	r3, [r3, #16]
    ab34:	89ba      	ldrh	r2, [r7, #12]
    ab36:	429a      	cmp	r2, r3
    ab38:	d114      	bne.n	ab64 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    ab3a:	687a      	ldr	r2, [r7, #4]
    ab3c:	7cd3      	ldrb	r3, [r2, #19]
    ab3e:	f36f 1386 	bfc	r3, #6, #1
    ab42:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    ab44:	4b1f      	ldr	r3, [pc, #124]	; (abc4 <_usb_d_dev_in_next+0x208>)
    ab46:	68db      	ldr	r3, [r3, #12]
    ab48:	687a      	ldr	r2, [r7, #4]
    ab4a:	7c90      	ldrb	r0, [r2, #18]
    ab4c:	687a      	ldr	r2, [r7, #4]
    ab4e:	6892      	ldr	r2, [r2, #8]
    ab50:	4611      	mov	r1, r2
    ab52:	4798      	blx	r3
    ab54:	4603      	mov	r3, r0
    ab56:	2b00      	cmp	r3, #0
    ab58:	d124      	bne.n	aba4 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    ab5a:	687a      	ldr	r2, [r7, #4]
    ab5c:	7cd3      	ldrb	r3, [r2, #19]
    ab5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ab62:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ab64:	2100      	movs	r1, #0
    ab66:	6878      	ldr	r0, [r7, #4]
    ab68:	4b17      	ldr	r3, [pc, #92]	; (abc8 <_usb_d_dev_in_next+0x20c>)
    ab6a:	4798      	blx	r3
	return;
    ab6c:	e01b      	b.n	aba6 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    ab6e:	78fb      	ldrb	r3, [r7, #3]
    ab70:	f083 0301 	eor.w	r3, r3, #1
    ab74:	b2db      	uxtb	r3, r3
    ab76:	2b00      	cmp	r3, #0
    ab78:	d00d      	beq.n	ab96 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    ab7a:	7afb      	ldrb	r3, [r7, #11]
    ab7c:	2b00      	cmp	r3, #0
    ab7e:	d002      	beq.n	ab86 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    ab80:	234e      	movs	r3, #78	; 0x4e
    ab82:	777b      	strb	r3, [r7, #29]
    ab84:	e001      	b.n	ab8a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    ab86:	234a      	movs	r3, #74	; 0x4a
    ab88:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ab8a:	7f7a      	ldrb	r2, [r7, #29]
    ab8c:	7dfb      	ldrb	r3, [r7, #23]
    ab8e:	4619      	mov	r1, r3
    ab90:	69b8      	ldr	r0, [r7, #24]
    ab92:	4b0e      	ldr	r3, [pc, #56]	; (abcc <_usb_d_dev_in_next+0x210>)
    ab94:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    ab96:	7dfb      	ldrb	r3, [r7, #23]
    ab98:	2201      	movs	r2, #1
    ab9a:	2101      	movs	r1, #1
    ab9c:	4618      	mov	r0, r3
    ab9e:	4b0c      	ldr	r3, [pc, #48]	; (abd0 <_usb_d_dev_in_next+0x214>)
    aba0:	4798      	blx	r3
    aba2:	e000      	b.n	aba6 <_usb_d_dev_in_next+0x1ea>
			return;
    aba4:	bf00      	nop
}
    aba6:	3724      	adds	r7, #36	; 0x24
    aba8:	46bd      	mov	sp, r7
    abaa:	bd90      	pop	{r4, r7, pc}
    abac:	20001fe4 	.word	0x20001fe4
    abb0:	0000a3b5 	.word	0x0000a3b5
    abb4:	000101b9 	.word	0x000101b9
    abb8:	0000a3e1 	.word	0x0000a3e1
    abbc:	0000a529 	.word	0x0000a529
    abc0:	00009cc1 	.word	0x00009cc1
    abc4:	20001f1c 	.word	0x20001f1c
    abc8:	0000bce5 	.word	0x0000bce5
    abcc:	00009c95 	.word	0x00009c95
    abd0:	0000a5e1 	.word	0x0000a5e1

0000abd4 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    abd4:	b590      	push	{r4, r7, lr}
    abd6:	b08b      	sub	sp, #44	; 0x2c
    abd8:	af00      	add	r7, sp, #0
    abda:	6078      	str	r0, [r7, #4]
    abdc:	460b      	mov	r3, r1
    abde:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    abe0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    abe4:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    abe6:	687b      	ldr	r3, [r7, #4]
    abe8:	7c9b      	ldrb	r3, [r3, #18]
    abea:	f003 030f 	and.w	r3, r3, #15
    abee:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    abf0:	7ffb      	ldrb	r3, [r7, #31]
    abf2:	015b      	lsls	r3, r3, #5
    abf4:	4a94      	ldr	r2, [pc, #592]	; (ae48 <_usb_d_dev_out_next+0x274>)
    abf6:	4413      	add	r3, r2
    abf8:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    abfa:	78fb      	ldrb	r3, [r7, #3]
    abfc:	2b00      	cmp	r3, #0
    abfe:	d005      	beq.n	ac0c <_usb_d_dev_out_next+0x38>
    ac00:	69bb      	ldr	r3, [r7, #24]
    ac02:	685b      	ldr	r3, [r3, #4]
    ac04:	f3c3 338d 	ubfx	r3, r3, #14, #14
    ac08:	b29b      	uxth	r3, r3
    ac0a:	e000      	b.n	ac0e <_usb_d_dev_out_next+0x3a>
    ac0c:	2300      	movs	r3, #0
    ac0e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    ac10:	78fb      	ldrb	r3, [r7, #3]
    ac12:	2b00      	cmp	r3, #0
    ac14:	d005      	beq.n	ac22 <_usb_d_dev_out_next+0x4e>
    ac16:	69bb      	ldr	r3, [r7, #24]
    ac18:	685b      	ldr	r3, [r3, #4]
    ac1a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ac1e:	b29b      	uxth	r3, r3
    ac20:	e000      	b.n	ac24 <_usb_d_dev_out_next+0x50>
    ac22:	2300      	movs	r3, #0
    ac24:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ac26:	687b      	ldr	r3, [r7, #4]
    ac28:	8a1b      	ldrh	r3, [r3, #16]
    ac2a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ac2e:	4293      	cmp	r3, r2
    ac30:	d004      	beq.n	ac3c <_usb_d_dev_out_next+0x68>
    ac32:	687b      	ldr	r3, [r7, #4]
    ac34:	8a1b      	ldrh	r3, [r3, #16]
    ac36:	3b01      	subs	r3, #1
    ac38:	b29b      	uxth	r3, r3
    ac3a:	e001      	b.n	ac40 <_usb_d_dev_out_next+0x6c>
    ac3c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ac40:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    ac42:	8aba      	ldrh	r2, [r7, #20]
    ac44:	8a7b      	ldrh	r3, [r7, #18]
    ac46:	4013      	ands	r3, r2
    ac48:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ac4a:	687b      	ldr	r3, [r7, #4]
    ac4c:	7cdb      	ldrb	r3, [r3, #19]
    ac4e:	f003 0307 	and.w	r3, r3, #7
    ac52:	b2db      	uxtb	r3, r3
    ac54:	2b01      	cmp	r3, #1
    ac56:	bf0c      	ite	eq
    ac58:	2301      	moveq	r3, #1
    ac5a:	2300      	movne	r3, #0
    ac5c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    ac5e:	78fb      	ldrb	r3, [r7, #3]
    ac60:	2b00      	cmp	r3, #0
    ac62:	d004      	beq.n	ac6e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    ac64:	7ffb      	ldrb	r3, [r7, #31]
    ac66:	2100      	movs	r1, #0
    ac68:	4618      	mov	r0, r3
    ac6a:	4b78      	ldr	r3, [pc, #480]	; (ae4c <_usb_d_dev_out_next+0x278>)
    ac6c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    ac6e:	687b      	ldr	r3, [r7, #4]
    ac70:	7cdb      	ldrb	r3, [r3, #19]
    ac72:	f003 0320 	and.w	r3, r3, #32
    ac76:	b2db      	uxtb	r3, r3
    ac78:	2b00      	cmp	r3, #0
    ac7a:	d01c      	beq.n	acb6 <_usb_d_dev_out_next+0xe2>
    ac7c:	687b      	ldr	r3, [r7, #4]
    ac7e:	685b      	ldr	r3, [r3, #4]
    ac80:	2b00      	cmp	r3, #0
    ac82:	d018      	beq.n	acb6 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	685b      	ldr	r3, [r3, #4]
    ac88:	b29a      	uxth	r2, r3
    ac8a:	687b      	ldr	r3, [r7, #4]
    ac8c:	689b      	ldr	r3, [r3, #8]
    ac8e:	b29b      	uxth	r3, r3
    ac90:	1ad3      	subs	r3, r2, r3
    ac92:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    ac94:	687b      	ldr	r3, [r7, #4]
    ac96:	681a      	ldr	r2, [r3, #0]
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	689b      	ldr	r3, [r3, #8]
    ac9c:	18d0      	adds	r0, r2, r3
    ac9e:	687b      	ldr	r3, [r7, #4]
    aca0:	68d9      	ldr	r1, [r3, #12]
    aca2:	89ba      	ldrh	r2, [r7, #12]
    aca4:	8a3b      	ldrh	r3, [r7, #16]
    aca6:	429a      	cmp	r2, r3
    aca8:	d901      	bls.n	acae <_usb_d_dev_out_next+0xda>
    acaa:	8a3b      	ldrh	r3, [r7, #16]
    acac:	e000      	b.n	acb0 <_usb_d_dev_out_next+0xdc>
    acae:	89bb      	ldrh	r3, [r7, #12]
    acb0:	461a      	mov	r2, r3
    acb2:	4b67      	ldr	r3, [pc, #412]	; (ae50 <_usb_d_dev_out_next+0x27c>)
    acb4:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    acb6:	687b      	ldr	r3, [r7, #4]
    acb8:	685b      	ldr	r3, [r3, #4]
    acba:	2b00      	cmp	r3, #0
    acbc:	d121      	bne.n	ad02 <_usb_d_dev_out_next+0x12e>
    acbe:	687b      	ldr	r3, [r7, #4]
    acc0:	7cdb      	ldrb	r3, [r3, #19]
    acc2:	f003 0310 	and.w	r3, r3, #16
    acc6:	b2db      	uxtb	r3, r3
    acc8:	2b00      	cmp	r3, #0
    acca:	d01a      	beq.n	ad02 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    accc:	687a      	ldr	r2, [r7, #4]
    acce:	7cd3      	ldrb	r3, [r2, #19]
    acd0:	f36f 1304 	bfc	r3, #4, #1
    acd4:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    acd6:	687a      	ldr	r2, [r7, #4]
    acd8:	7cd3      	ldrb	r3, [r2, #19]
    acda:	f043 0320 	orr.w	r3, r3, #32
    acde:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ace0:	687b      	ldr	r3, [r7, #4]
    ace2:	68db      	ldr	r3, [r3, #12]
    ace4:	461a      	mov	r2, r3
    ace6:	7ffb      	ldrb	r3, [r7, #31]
    ace8:	2100      	movs	r1, #0
    acea:	4618      	mov	r0, r3
    acec:	4b59      	ldr	r3, [pc, #356]	; (ae54 <_usb_d_dev_out_next+0x280>)
    acee:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    acf0:	687b      	ldr	r3, [r7, #4]
    acf2:	8a1b      	ldrh	r3, [r3, #16]
    acf4:	461a      	mov	r2, r3
    acf6:	7ff8      	ldrb	r0, [r7, #31]
    acf8:	2300      	movs	r3, #0
    acfa:	2100      	movs	r1, #0
    acfc:	4c56      	ldr	r4, [pc, #344]	; (ae58 <_usb_d_dev_out_next+0x284>)
    acfe:	47a0      	blx	r4
		goto _out_rx_exec;
    ad00:	e090      	b.n	ae24 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    ad02:	78fb      	ldrb	r3, [r7, #3]
    ad04:	2b00      	cmp	r3, #0
    ad06:	d010      	beq.n	ad2a <_usb_d_dev_out_next+0x156>
    ad08:	687b      	ldr	r3, [r7, #4]
    ad0a:	8a1b      	ldrh	r3, [r3, #16]
    ad0c:	8a3a      	ldrh	r2, [r7, #16]
    ad0e:	429a      	cmp	r2, r3
    ad10:	d20b      	bcs.n	ad2a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    ad12:	687a      	ldr	r2, [r7, #4]
    ad14:	7cd3      	ldrb	r3, [r2, #19]
    ad16:	f36f 1304 	bfc	r3, #4, #1
    ad1a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    ad1c:	687b      	ldr	r3, [r7, #4]
    ad1e:	689a      	ldr	r2, [r3, #8]
    ad20:	8abb      	ldrh	r3, [r7, #20]
    ad22:	441a      	add	r2, r3
    ad24:	687b      	ldr	r3, [r7, #4]
    ad26:	609a      	str	r2, [r3, #8]
    ad28:	e05c      	b.n	ade4 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    ad2a:	687b      	ldr	r3, [r7, #4]
    ad2c:	689a      	ldr	r2, [r3, #8]
    ad2e:	8afb      	ldrh	r3, [r7, #22]
    ad30:	441a      	add	r2, r3
    ad32:	687b      	ldr	r3, [r7, #4]
    ad34:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    ad36:	687b      	ldr	r3, [r7, #4]
    ad38:	689a      	ldr	r2, [r3, #8]
    ad3a:	687b      	ldr	r3, [r7, #4]
    ad3c:	685b      	ldr	r3, [r3, #4]
    ad3e:	429a      	cmp	r2, r3
    ad40:	d250      	bcs.n	ade4 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    ad42:	687b      	ldr	r3, [r7, #4]
    ad44:	685b      	ldr	r3, [r3, #4]
    ad46:	b29a      	uxth	r2, r3
    ad48:	687b      	ldr	r3, [r7, #4]
    ad4a:	689b      	ldr	r3, [r3, #8]
    ad4c:	b29b      	uxth	r3, r3
    ad4e:	1ad3      	subs	r3, r2, r3
    ad50:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    ad52:	687b      	ldr	r3, [r7, #4]
    ad54:	7cdb      	ldrb	r3, [r3, #19]
    ad56:	f003 0320 	and.w	r3, r3, #32
    ad5a:	b2db      	uxtb	r3, r3
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	d010      	beq.n	ad82 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	8a1b      	ldrh	r3, [r3, #16]
    ad64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ad66:	429a      	cmp	r2, r3
    ad68:	d902      	bls.n	ad70 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    ad6a:	687b      	ldr	r3, [r7, #4]
    ad6c:	8a1b      	ldrh	r3, [r3, #16]
    ad6e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ad70:	687b      	ldr	r3, [r7, #4]
    ad72:	68db      	ldr	r3, [r3, #12]
    ad74:	461a      	mov	r2, r3
    ad76:	7ffb      	ldrb	r3, [r7, #31]
    ad78:	2100      	movs	r1, #0
    ad7a:	4618      	mov	r0, r3
    ad7c:	4b35      	ldr	r3, [pc, #212]	; (ae54 <_usb_d_dev_out_next+0x280>)
    ad7e:	4798      	blx	r3
    ad80:	e029      	b.n	add6 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    ad82:	687b      	ldr	r3, [r7, #4]
    ad84:	8a1b      	ldrh	r3, [r3, #16]
    ad86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ad88:	429a      	cmp	r2, r3
    ad8a:	d90f      	bls.n	adac <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    ad8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ad8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ad92:	d903      	bls.n	ad9c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    ad94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ad98:	84fb      	strh	r3, [r7, #38]	; 0x26
    ad9a:	e011      	b.n	adc0 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    ad9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ad9e:	8a7b      	ldrh	r3, [r7, #18]
    ada0:	4013      	ands	r3, r2
    ada2:	b29b      	uxth	r3, r3
    ada4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ada6:	1ad3      	subs	r3, r2, r3
    ada8:	84fb      	strh	r3, [r7, #38]	; 0x26
    adaa:	e009      	b.n	adc0 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    adac:	687b      	ldr	r3, [r7, #4]
    adae:	8a1b      	ldrh	r3, [r3, #16]
    adb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    adb2:	429a      	cmp	r2, r3
    adb4:	d204      	bcs.n	adc0 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    adb6:	687a      	ldr	r2, [r7, #4]
    adb8:	7cd3      	ldrb	r3, [r2, #19]
    adba:	f043 0320 	orr.w	r3, r3, #32
    adbe:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    adc0:	687b      	ldr	r3, [r7, #4]
    adc2:	681a      	ldr	r2, [r3, #0]
    adc4:	687b      	ldr	r3, [r7, #4]
    adc6:	689b      	ldr	r3, [r3, #8]
    adc8:	4413      	add	r3, r2
    adca:	461a      	mov	r2, r3
    adcc:	7ffb      	ldrb	r3, [r7, #31]
    adce:	2100      	movs	r1, #0
    add0:	4618      	mov	r0, r3
    add2:	4b20      	ldr	r3, [pc, #128]	; (ae54 <_usb_d_dev_out_next+0x280>)
    add4:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    add6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    add8:	7ff8      	ldrb	r0, [r7, #31]
    adda:	2300      	movs	r3, #0
    addc:	2100      	movs	r1, #0
    adde:	4c1e      	ldr	r4, [pc, #120]	; (ae58 <_usb_d_dev_out_next+0x284>)
    ade0:	47a0      	blx	r4
			goto _out_rx_exec;
    ade2:	e01f      	b.n	ae24 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    ade4:	7bfb      	ldrb	r3, [r7, #15]
    ade6:	2b00      	cmp	r3, #0
    ade8:	d006      	beq.n	adf8 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    adea:	7ffb      	ldrb	r3, [r7, #31]
    adec:	222d      	movs	r2, #45	; 0x2d
    adee:	4619      	mov	r1, r3
    adf0:	6a38      	ldr	r0, [r7, #32]
    adf2:	4b1a      	ldr	r3, [pc, #104]	; (ae5c <_usb_d_dev_out_next+0x288>)
    adf4:	4798      	blx	r3
    adf6:	e005      	b.n	ae04 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    adf8:	7ffb      	ldrb	r3, [r7, #31]
    adfa:	2225      	movs	r2, #37	; 0x25
    adfc:	4619      	mov	r1, r3
    adfe:	6a38      	ldr	r0, [r7, #32]
    ae00:	4b16      	ldr	r3, [pc, #88]	; (ae5c <_usb_d_dev_out_next+0x288>)
    ae02:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    ae04:	7ffb      	ldrb	r3, [r7, #31]
    ae06:	2b00      	cmp	r3, #0
    ae08:	d107      	bne.n	ae1a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ae0a:	687b      	ldr	r3, [r7, #4]
    ae0c:	68db      	ldr	r3, [r3, #12]
    ae0e:	461a      	mov	r2, r3
    ae10:	7ffb      	ldrb	r3, [r7, #31]
    ae12:	2100      	movs	r1, #0
    ae14:	4618      	mov	r0, r3
    ae16:	4b0f      	ldr	r3, [pc, #60]	; (ae54 <_usb_d_dev_out_next+0x280>)
    ae18:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ae1a:	2100      	movs	r1, #0
    ae1c:	6878      	ldr	r0, [r7, #4]
    ae1e:	4b10      	ldr	r3, [pc, #64]	; (ae60 <_usb_d_dev_out_next+0x28c>)
    ae20:	4798      	blx	r3
	return;
    ae22:	e031      	b.n	ae88 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    ae24:	78fb      	ldrb	r3, [r7, #3]
    ae26:	f083 0301 	eor.w	r3, r3, #1
    ae2a:	b2db      	uxtb	r3, r3
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d025      	beq.n	ae7c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    ae30:	7bfb      	ldrb	r3, [r7, #15]
    ae32:	2b00      	cmp	r3, #0
    ae34:	d018      	beq.n	ae68 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    ae36:	7ffb      	ldrb	r3, [r7, #31]
    ae38:	2101      	movs	r1, #1
    ae3a:	4618      	mov	r0, r3
    ae3c:	4b09      	ldr	r3, [pc, #36]	; (ae64 <_usb_d_dev_out_next+0x290>)
    ae3e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    ae40:	232d      	movs	r3, #45	; 0x2d
    ae42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    ae46:	e012      	b.n	ae6e <_usb_d_dev_out_next+0x29a>
    ae48:	20001fe4 	.word	0x20001fe4
    ae4c:	0000a3b5 	.word	0x0000a3b5
    ae50:	000101b9 	.word	0x000101b9
    ae54:	0000a3e1 	.word	0x0000a3e1
    ae58:	0000a569 	.word	0x0000a569
    ae5c:	00009cc1 	.word	0x00009cc1
    ae60:	0000bce5 	.word	0x0000bce5
    ae64:	0000a5a9 	.word	0x0000a5a9
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    ae68:	2325      	movs	r3, #37	; 0x25
    ae6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    ae6e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    ae72:	7ffb      	ldrb	r3, [r7, #31]
    ae74:	4619      	mov	r1, r3
    ae76:	6a38      	ldr	r0, [r7, #32]
    ae78:	4b05      	ldr	r3, [pc, #20]	; (ae90 <_usb_d_dev_out_next+0x2bc>)
    ae7a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    ae7c:	7ffb      	ldrb	r3, [r7, #31]
    ae7e:	2201      	movs	r2, #1
    ae80:	2100      	movs	r1, #0
    ae82:	4618      	mov	r0, r3
    ae84:	4b03      	ldr	r3, [pc, #12]	; (ae94 <_usb_d_dev_out_next+0x2c0>)
    ae86:	4798      	blx	r3
}
    ae88:	372c      	adds	r7, #44	; 0x2c
    ae8a:	46bd      	mov	sp, r7
    ae8c:	bd90      	pop	{r4, r7, pc}
    ae8e:	bf00      	nop
    ae90:	00009c95 	.word	0x00009c95
    ae94:	0000a639 	.word	0x0000a639

0000ae98 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    ae98:	b580      	push	{r7, lr}
    ae9a:	b084      	sub	sp, #16
    ae9c:	af00      	add	r7, sp, #0
    ae9e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    aea0:	687b      	ldr	r3, [r7, #4]
    aea2:	7c9b      	ldrb	r3, [r3, #18]
    aea4:	f003 030f 	and.w	r3, r3, #15
    aea8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    aeaa:	687b      	ldr	r3, [r7, #4]
    aeac:	7cdb      	ldrb	r3, [r3, #19]
    aeae:	f003 0307 	and.w	r3, r3, #7
    aeb2:	b2db      	uxtb	r3, r3
    aeb4:	2b01      	cmp	r3, #1
    aeb6:	bf0c      	ite	eq
    aeb8:	2301      	moveq	r3, #1
    aeba:	2300      	movne	r3, #0
    aebc:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    aebe:	7bbb      	ldrb	r3, [r7, #14]
    aec0:	f083 0301 	eor.w	r3, r3, #1
    aec4:	b2db      	uxtb	r3, r3
    aec6:	2b00      	cmp	r3, #0
    aec8:	d008      	beq.n	aedc <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    aeca:	7bfb      	ldrb	r3, [r7, #15]
    aecc:	4618      	mov	r0, r3
    aece:	4b20      	ldr	r3, [pc, #128]	; (af50 <_usb_d_dev_handle_setup+0xb8>)
    aed0:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    aed2:	7bfb      	ldrb	r3, [r7, #15]
    aed4:	4618      	mov	r0, r3
    aed6:	4b1f      	ldr	r3, [pc, #124]	; (af54 <_usb_d_dev_handle_setup+0xbc>)
    aed8:	4798      	blx	r3
		return;
    aeda:	e036      	b.n	af4a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    aedc:	687b      	ldr	r3, [r7, #4]
    aede:	7cdb      	ldrb	r3, [r3, #19]
    aee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aee4:	b2db      	uxtb	r3, r3
    aee6:	2b00      	cmp	r3, #0
    aee8:	d010      	beq.n	af0c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    aeea:	687a      	ldr	r2, [r7, #4]
    aeec:	7cd3      	ldrb	r3, [r2, #19]
    aeee:	f36f 1386 	bfc	r3, #6, #1
    aef2:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aef4:	7bfb      	ldrb	r3, [r7, #15]
    aef6:	2200      	movs	r2, #0
    aef8:	2101      	movs	r1, #1
    aefa:	4618      	mov	r0, r3
    aefc:	4b16      	ldr	r3, [pc, #88]	; (af58 <_usb_d_dev_handle_setup+0xc0>)
    aefe:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    af00:	7bfb      	ldrb	r3, [r7, #15]
    af02:	2200      	movs	r2, #0
    af04:	2100      	movs	r1, #0
    af06:	4618      	mov	r0, r3
    af08:	4b14      	ldr	r3, [pc, #80]	; (af5c <_usb_d_dev_handle_setup+0xc4>)
    af0a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    af0c:	687a      	ldr	r2, [r7, #4]
    af0e:	7cd3      	ldrb	r3, [r2, #19]
    af10:	f36f 03c3 	bfc	r3, #3, #1
    af14:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    af16:	7bfb      	ldrb	r3, [r7, #15]
    af18:	2100      	movs	r1, #0
    af1a:	4618      	mov	r0, r3
    af1c:	4b10      	ldr	r3, [pc, #64]	; (af60 <_usb_d_dev_handle_setup+0xc8>)
    af1e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    af20:	7bfb      	ldrb	r3, [r7, #15]
    af22:	2101      	movs	r1, #1
    af24:	4618      	mov	r0, r3
    af26:	4b0e      	ldr	r3, [pc, #56]	; (af60 <_usb_d_dev_handle_setup+0xc8>)
    af28:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    af2a:	7bfb      	ldrb	r3, [r7, #15]
    af2c:	216f      	movs	r1, #111	; 0x6f
    af2e:	4618      	mov	r0, r3
    af30:	4b0c      	ldr	r3, [pc, #48]	; (af64 <_usb_d_dev_handle_setup+0xcc>)
    af32:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    af34:	7bfb      	ldrb	r3, [r7, #15]
    af36:	216f      	movs	r1, #111	; 0x6f
    af38:	4618      	mov	r0, r3
    af3a:	4b0b      	ldr	r3, [pc, #44]	; (af68 <_usb_d_dev_handle_setup+0xd0>)
    af3c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    af3e:	4b0b      	ldr	r3, [pc, #44]	; (af6c <_usb_d_dev_handle_setup+0xd4>)
    af40:	689b      	ldr	r3, [r3, #8]
    af42:	687a      	ldr	r2, [r7, #4]
    af44:	7c92      	ldrb	r2, [r2, #18]
    af46:	4610      	mov	r0, r2
    af48:	4798      	blx	r3
}
    af4a:	3710      	adds	r7, #16
    af4c:	46bd      	mov	sp, r7
    af4e:	bd80      	pop	{r7, pc}
    af50:	0000a33d 	.word	0x0000a33d
    af54:	0000a2e9 	.word	0x0000a2e9
    af58:	0000a5e1 	.word	0x0000a5e1
    af5c:	0000a639 	.word	0x0000a639
    af60:	0000a5a9 	.word	0x0000a5a9
    af64:	0000a0e9 	.word	0x0000a0e9
    af68:	0000a139 	.word	0x0000a139
    af6c:	20001f1c 	.word	0x20001f1c

0000af70 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    af70:	b580      	push	{r7, lr}
    af72:	b084      	sub	sp, #16
    af74:	af00      	add	r7, sp, #0
    af76:	6078      	str	r0, [r7, #4]
    af78:	460b      	mov	r3, r1
    af7a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    af7c:	687b      	ldr	r3, [r7, #4]
    af7e:	7c9b      	ldrb	r3, [r3, #18]
    af80:	f003 030f 	and.w	r3, r3, #15
    af84:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    af86:	78f9      	ldrb	r1, [r7, #3]
    af88:	7bfb      	ldrb	r3, [r7, #15]
    af8a:	2200      	movs	r2, #0
    af8c:	4618      	mov	r0, r3
    af8e:	4b07      	ldr	r3, [pc, #28]	; (afac <_usb_d_dev_handle_stall+0x3c>)
    af90:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    af92:	4b07      	ldr	r3, [pc, #28]	; (afb0 <_usb_d_dev_handle_stall+0x40>)
    af94:	691b      	ldr	r3, [r3, #16]
    af96:	687a      	ldr	r2, [r7, #4]
    af98:	7c90      	ldrb	r0, [r2, #18]
    af9a:	687a      	ldr	r2, [r7, #4]
    af9c:	6892      	ldr	r2, [r2, #8]
    af9e:	2101      	movs	r1, #1
    afa0:	4798      	blx	r3
}
    afa2:	bf00      	nop
    afa4:	3710      	adds	r7, #16
    afa6:	46bd      	mov	sp, r7
    afa8:	bd80      	pop	{r7, pc}
    afaa:	bf00      	nop
    afac:	0000a29d 	.word	0x0000a29d
    afb0:	20001f1c 	.word	0x20001f1c

0000afb4 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    afb4:	b580      	push	{r7, lr}
    afb6:	b088      	sub	sp, #32
    afb8:	af00      	add	r7, sp, #0
    afba:	6078      	str	r0, [r7, #4]
    afbc:	460b      	mov	r3, r1
    afbe:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    afc0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    afc4:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    afc6:	687b      	ldr	r3, [r7, #4]
    afc8:	7c9b      	ldrb	r3, [r3, #18]
    afca:	f003 030f 	and.w	r3, r3, #15
    afce:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    afd0:	4b61      	ldr	r3, [pc, #388]	; (b158 <_usb_d_dev_handle_trfail+0x1a4>)
    afd2:	881b      	ldrh	r3, [r3, #0]
    afd4:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    afd6:	7efb      	ldrb	r3, [r7, #27]
    afd8:	015b      	lsls	r3, r3, #5
    afda:	4a60      	ldr	r2, [pc, #384]	; (b15c <_usb_d_dev_handle_trfail+0x1a8>)
    afdc:	4413      	add	r3, r2
    afde:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    afe0:	78fb      	ldrb	r3, [r7, #3]
    afe2:	2b00      	cmp	r3, #0
    afe4:	d006      	beq.n	aff4 <_usb_d_dev_handle_trfail+0x40>
    afe6:	7efb      	ldrb	r3, [r7, #27]
    afe8:	4619      	mov	r1, r3
    afea:	69f8      	ldr	r0, [r7, #28]
    afec:	4b5c      	ldr	r3, [pc, #368]	; (b160 <_usb_d_dev_handle_trfail+0x1ac>)
    afee:	4798      	blx	r3
    aff0:	4603      	mov	r3, r0
    aff2:	e005      	b.n	b000 <_usb_d_dev_handle_trfail+0x4c>
    aff4:	7efb      	ldrb	r3, [r7, #27]
    aff6:	4619      	mov	r1, r3
    aff8:	69f8      	ldr	r0, [r7, #28]
    affa:	4b5a      	ldr	r3, [pc, #360]	; (b164 <_usb_d_dev_handle_trfail+0x1b0>)
    affc:	4798      	blx	r3
    affe:	4603      	mov	r3, r0
    b000:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b002:	687b      	ldr	r3, [r7, #4]
    b004:	7cdb      	ldrb	r3, [r3, #19]
    b006:	f003 0307 	and.w	r3, r3, #7
    b00a:	b2db      	uxtb	r3, r3
    b00c:	2b01      	cmp	r3, #1
    b00e:	bf0c      	ite	eq
    b010:	2301      	moveq	r3, #1
    b012:	2300      	movne	r3, #0
    b014:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    b016:	78fb      	ldrb	r3, [r7, #3]
    b018:	011b      	lsls	r3, r3, #4
    b01a:	697a      	ldr	r2, [r7, #20]
    b01c:	4413      	add	r3, r2
    b01e:	7a9b      	ldrb	r3, [r3, #10]
    b020:	b2db      	uxtb	r3, r3
    b022:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    b024:	7cfb      	ldrb	r3, [r7, #19]
    b026:	2b02      	cmp	r3, #2
    b028:	d12f      	bne.n	b08a <_usb_d_dev_handle_trfail+0xd6>
    b02a:	7b3b      	ldrb	r3, [r7, #12]
    b02c:	f003 0301 	and.w	r3, r3, #1
    b030:	b2db      	uxtb	r3, r3
    b032:	2b00      	cmp	r3, #0
    b034:	d029      	beq.n	b08a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    b036:	78fb      	ldrb	r3, [r7, #3]
    b038:	011b      	lsls	r3, r3, #4
    b03a:	697a      	ldr	r2, [r7, #20]
    b03c:	441a      	add	r2, r3
    b03e:	7a93      	ldrb	r3, [r2, #10]
    b040:	f36f 0300 	bfc	r3, #0, #1
    b044:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b046:	78fb      	ldrb	r3, [r7, #3]
    b048:	f107 0220 	add.w	r2, r7, #32
    b04c:	4413      	add	r3, r2
    b04e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b052:	7efb      	ldrb	r3, [r7, #27]
    b054:	4619      	mov	r1, r3
    b056:	69f8      	ldr	r0, [r7, #28]
    b058:	4b43      	ldr	r3, [pc, #268]	; (b168 <_usb_d_dev_handle_trfail+0x1b4>)
    b05a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b05c:	78fb      	ldrb	r3, [r7, #3]
    b05e:	f107 0220 	add.w	r2, r7, #32
    b062:	4413      	add	r3, r2
    b064:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b068:	7efb      	ldrb	r3, [r7, #27]
    b06a:	4619      	mov	r1, r3
    b06c:	69f8      	ldr	r0, [r7, #28]
    b06e:	4b3f      	ldr	r3, [pc, #252]	; (b16c <_usb_d_dev_handle_trfail+0x1b8>)
    b070:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    b072:	78fb      	ldrb	r3, [r7, #3]
    b074:	2b00      	cmp	r3, #0
    b076:	bf14      	ite	ne
    b078:	2301      	movne	r3, #1
    b07a:	2300      	moveq	r3, #0
    b07c:	b2db      	uxtb	r3, r3
    b07e:	2204      	movs	r2, #4
    b080:	4619      	mov	r1, r3
    b082:	6878      	ldr	r0, [r7, #4]
    b084:	4b3a      	ldr	r3, [pc, #232]	; (b170 <_usb_d_dev_handle_trfail+0x1bc>)
    b086:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    b088:	e062      	b.n	b150 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    b08a:	7b3b      	ldrb	r3, [r7, #12]
    b08c:	f003 0302 	and.w	r3, r3, #2
    b090:	b2db      	uxtb	r3, r3
    b092:	2b00      	cmp	r3, #0
    b094:	d040      	beq.n	b118 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    b096:	78fb      	ldrb	r3, [r7, #3]
    b098:	011b      	lsls	r3, r3, #4
    b09a:	697a      	ldr	r2, [r7, #20]
    b09c:	441a      	add	r2, r3
    b09e:	7a93      	ldrb	r3, [r2, #10]
    b0a0:	f36f 0341 	bfc	r3, #1, #1
    b0a4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b0a6:	78fb      	ldrb	r3, [r7, #3]
    b0a8:	f107 0220 	add.w	r2, r7, #32
    b0ac:	4413      	add	r3, r2
    b0ae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b0b2:	7efb      	ldrb	r3, [r7, #27]
    b0b4:	4619      	mov	r1, r3
    b0b6:	69f8      	ldr	r0, [r7, #28]
    b0b8:	4b2b      	ldr	r3, [pc, #172]	; (b168 <_usb_d_dev_handle_trfail+0x1b4>)
    b0ba:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b0bc:	78fb      	ldrb	r3, [r7, #3]
    b0be:	f107 0220 	add.w	r2, r7, #32
    b0c2:	4413      	add	r3, r2
    b0c4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b0c8:	7efb      	ldrb	r3, [r7, #27]
    b0ca:	4619      	mov	r1, r3
    b0cc:	69f8      	ldr	r0, [r7, #28]
    b0ce:	4b27      	ldr	r3, [pc, #156]	; (b16c <_usb_d_dev_handle_trfail+0x1b8>)
    b0d0:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    b0d2:	7cbb      	ldrb	r3, [r7, #18]
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d03b      	beq.n	b150 <_usb_d_dev_handle_trfail+0x19c>
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	7cdb      	ldrb	r3, [r3, #19]
    b0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b0e0:	b2db      	uxtb	r3, r3
    b0e2:	2b00      	cmp	r3, #0
    b0e4:	d034      	beq.n	b150 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    b0e6:	687b      	ldr	r3, [r7, #4]
    b0e8:	7cdb      	ldrb	r3, [r3, #19]
    b0ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b0ee:	b2db      	uxtb	r3, r3
    b0f0:	461a      	mov	r2, r3
    b0f2:	78fb      	ldrb	r3, [r7, #3]
    b0f4:	4293      	cmp	r3, r2
    b0f6:	d02b      	beq.n	b150 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    b0f8:	687b      	ldr	r3, [r7, #4]
    b0fa:	7cdb      	ldrb	r3, [r3, #19]
    b0fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b100:	b2db      	uxtb	r3, r3
    b102:	2b00      	cmp	r3, #0
    b104:	bf14      	ite	ne
    b106:	2301      	movne	r3, #1
    b108:	2300      	moveq	r3, #0
    b10a:	b2db      	uxtb	r3, r3
    b10c:	2200      	movs	r2, #0
    b10e:	4619      	mov	r1, r3
    b110:	6878      	ldr	r0, [r7, #4]
    b112:	4b17      	ldr	r3, [pc, #92]	; (b170 <_usb_d_dev_handle_trfail+0x1bc>)
    b114:	4798      	blx	r3
}
    b116:	e01b      	b.n	b150 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    b118:	78fa      	ldrb	r2, [r7, #3]
    b11a:	7efb      	ldrb	r3, [r7, #27]
    b11c:	4611      	mov	r1, r2
    b11e:	4618      	mov	r0, r3
    b120:	4b14      	ldr	r3, [pc, #80]	; (b174 <_usb_d_dev_handle_trfail+0x1c0>)
    b122:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b124:	78fb      	ldrb	r3, [r7, #3]
    b126:	f107 0220 	add.w	r2, r7, #32
    b12a:	4413      	add	r3, r2
    b12c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b130:	7efb      	ldrb	r3, [r7, #27]
    b132:	4619      	mov	r1, r3
    b134:	69f8      	ldr	r0, [r7, #28]
    b136:	4b0c      	ldr	r3, [pc, #48]	; (b168 <_usb_d_dev_handle_trfail+0x1b4>)
    b138:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b13a:	78fb      	ldrb	r3, [r7, #3]
    b13c:	f107 0220 	add.w	r2, r7, #32
    b140:	4413      	add	r3, r2
    b142:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b146:	7efb      	ldrb	r3, [r7, #27]
    b148:	4619      	mov	r1, r3
    b14a:	69f8      	ldr	r0, [r7, #28]
    b14c:	4b07      	ldr	r3, [pc, #28]	; (b16c <_usb_d_dev_handle_trfail+0x1b8>)
    b14e:	4798      	blx	r3
}
    b150:	bf00      	nop
    b152:	3720      	adds	r7, #32
    b154:	46bd      	mov	sp, r7
    b156:	bd80      	pop	{r7, pc}
    b158:	00011668 	.word	0x00011668
    b15c:	20001fe4 	.word	0x20001fe4
    b160:	00009d1d 	.word	0x00009d1d
    b164:	00009ced 	.word	0x00009ced
    b168:	00009bc1 	.word	0x00009bc1
    b16c:	00009cc1 	.word	0x00009cc1
    b170:	0000bd2d 	.word	0x0000bd2d
    b174:	0000a5a9 	.word	0x0000a5a9

0000b178 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b178:	b580      	push	{r7, lr}
    b17a:	b082      	sub	sp, #8
    b17c:	af00      	add	r7, sp, #0
    b17e:	6078      	str	r0, [r7, #4]
    b180:	460b      	mov	r3, r1
    b182:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b184:	78fb      	ldrb	r3, [r7, #3]
    b186:	f003 0310 	and.w	r3, r3, #16
    b18a:	2b00      	cmp	r3, #0
    b18c:	d003      	beq.n	b196 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    b18e:	6878      	ldr	r0, [r7, #4]
    b190:	4b0c      	ldr	r3, [pc, #48]	; (b1c4 <_usb_d_dev_trans_setup_isr+0x4c>)
    b192:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    b194:	e012      	b.n	b1bc <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b196:	78fb      	ldrb	r3, [r7, #3]
    b198:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b19c:	2b00      	cmp	r3, #0
    b19e:	d004      	beq.n	b1aa <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    b1a0:	2101      	movs	r1, #1
    b1a2:	6878      	ldr	r0, [r7, #4]
    b1a4:	4b08      	ldr	r3, [pc, #32]	; (b1c8 <_usb_d_dev_trans_setup_isr+0x50>)
    b1a6:	4798      	blx	r3
}
    b1a8:	e008      	b.n	b1bc <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b1aa:	78fb      	ldrb	r3, [r7, #3]
    b1ac:	f003 0320 	and.w	r3, r3, #32
    b1b0:	2b00      	cmp	r3, #0
    b1b2:	d003      	beq.n	b1bc <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    b1b4:	2100      	movs	r1, #0
    b1b6:	6878      	ldr	r0, [r7, #4]
    b1b8:	4b03      	ldr	r3, [pc, #12]	; (b1c8 <_usb_d_dev_trans_setup_isr+0x50>)
    b1ba:	4798      	blx	r3
}
    b1bc:	bf00      	nop
    b1be:	3708      	adds	r7, #8
    b1c0:	46bd      	mov	sp, r7
    b1c2:	bd80      	pop	{r7, pc}
    b1c4:	0000ae99 	.word	0x0000ae99
    b1c8:	0000af71 	.word	0x0000af71

0000b1cc <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b1cc:	b580      	push	{r7, lr}
    b1ce:	b082      	sub	sp, #8
    b1d0:	af00      	add	r7, sp, #0
    b1d2:	6078      	str	r0, [r7, #4]
    b1d4:	460b      	mov	r3, r1
    b1d6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b1d8:	78fb      	ldrb	r3, [r7, #3]
    b1da:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b1de:	2b00      	cmp	r3, #0
    b1e0:	d004      	beq.n	b1ec <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    b1e2:	2101      	movs	r1, #1
    b1e4:	6878      	ldr	r0, [r7, #4]
    b1e6:	4b1a      	ldr	r3, [pc, #104]	; (b250 <_usb_d_dev_trans_in_isr+0x84>)
    b1e8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b1ea:	e02c      	b.n	b246 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b1ec:	78fb      	ldrb	r3, [r7, #3]
    b1ee:	f003 0308 	and.w	r3, r3, #8
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d004      	beq.n	b200 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    b1f6:	2101      	movs	r1, #1
    b1f8:	6878      	ldr	r0, [r7, #4]
    b1fa:	4b16      	ldr	r3, [pc, #88]	; (b254 <_usb_d_dev_trans_in_isr+0x88>)
    b1fc:	4798      	blx	r3
}
    b1fe:	e022      	b.n	b246 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    b200:	78fb      	ldrb	r3, [r7, #3]
    b202:	f003 0302 	and.w	r3, r3, #2
    b206:	2b00      	cmp	r3, #0
    b208:	d004      	beq.n	b214 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    b20a:	2101      	movs	r1, #1
    b20c:	6878      	ldr	r0, [r7, #4]
    b20e:	4b12      	ldr	r3, [pc, #72]	; (b258 <_usb_d_dev_trans_in_isr+0x8c>)
    b210:	4798      	blx	r3
}
    b212:	e018      	b.n	b246 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b214:	687b      	ldr	r3, [r7, #4]
    b216:	7cdb      	ldrb	r3, [r3, #19]
    b218:	f003 0307 	and.w	r3, r3, #7
    b21c:	b2db      	uxtb	r3, r3
    b21e:	2b01      	cmp	r3, #1
    b220:	d111      	bne.n	b246 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b222:	78fb      	ldrb	r3, [r7, #3]
    b224:	f003 0304 	and.w	r3, r3, #4
    b228:	2b00      	cmp	r3, #0
    b22a:	d004      	beq.n	b236 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    b22c:	2100      	movs	r1, #0
    b22e:	6878      	ldr	r0, [r7, #4]
    b230:	4b08      	ldr	r3, [pc, #32]	; (b254 <_usb_d_dev_trans_in_isr+0x88>)
    b232:	4798      	blx	r3
}
    b234:	e007      	b.n	b246 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b236:	78fb      	ldrb	r3, [r7, #3]
    b238:	f003 0310 	and.w	r3, r3, #16
    b23c:	2b00      	cmp	r3, #0
    b23e:	d002      	beq.n	b246 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b240:	6878      	ldr	r0, [r7, #4]
    b242:	4b06      	ldr	r3, [pc, #24]	; (b25c <_usb_d_dev_trans_in_isr+0x90>)
    b244:	4798      	blx	r3
}
    b246:	bf00      	nop
    b248:	3708      	adds	r7, #8
    b24a:	46bd      	mov	sp, r7
    b24c:	bd80      	pop	{r7, pc}
    b24e:	bf00      	nop
    b250:	0000af71 	.word	0x0000af71
    b254:	0000afb5 	.word	0x0000afb5
    b258:	0000a9bd 	.word	0x0000a9bd
    b25c:	0000ae99 	.word	0x0000ae99

0000b260 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b260:	b580      	push	{r7, lr}
    b262:	b082      	sub	sp, #8
    b264:	af00      	add	r7, sp, #0
    b266:	6078      	str	r0, [r7, #4]
    b268:	460b      	mov	r3, r1
    b26a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b26c:	78fb      	ldrb	r3, [r7, #3]
    b26e:	f003 0320 	and.w	r3, r3, #32
    b272:	2b00      	cmp	r3, #0
    b274:	d004      	beq.n	b280 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    b276:	2100      	movs	r1, #0
    b278:	6878      	ldr	r0, [r7, #4]
    b27a:	4b1a      	ldr	r3, [pc, #104]	; (b2e4 <_usb_d_dev_trans_out_isr+0x84>)
    b27c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b27e:	e02c      	b.n	b2da <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b280:	78fb      	ldrb	r3, [r7, #3]
    b282:	f003 0304 	and.w	r3, r3, #4
    b286:	2b00      	cmp	r3, #0
    b288:	d004      	beq.n	b294 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    b28a:	2100      	movs	r1, #0
    b28c:	6878      	ldr	r0, [r7, #4]
    b28e:	4b16      	ldr	r3, [pc, #88]	; (b2e8 <_usb_d_dev_trans_out_isr+0x88>)
    b290:	4798      	blx	r3
}
    b292:	e022      	b.n	b2da <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    b294:	78fb      	ldrb	r3, [r7, #3]
    b296:	f003 0301 	and.w	r3, r3, #1
    b29a:	2b00      	cmp	r3, #0
    b29c:	d004      	beq.n	b2a8 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    b29e:	2101      	movs	r1, #1
    b2a0:	6878      	ldr	r0, [r7, #4]
    b2a2:	4b12      	ldr	r3, [pc, #72]	; (b2ec <_usb_d_dev_trans_out_isr+0x8c>)
    b2a4:	4798      	blx	r3
}
    b2a6:	e018      	b.n	b2da <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b2a8:	687b      	ldr	r3, [r7, #4]
    b2aa:	7cdb      	ldrb	r3, [r3, #19]
    b2ac:	f003 0307 	and.w	r3, r3, #7
    b2b0:	b2db      	uxtb	r3, r3
    b2b2:	2b01      	cmp	r3, #1
    b2b4:	d111      	bne.n	b2da <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b2b6:	78fb      	ldrb	r3, [r7, #3]
    b2b8:	f003 0308 	and.w	r3, r3, #8
    b2bc:	2b00      	cmp	r3, #0
    b2be:	d004      	beq.n	b2ca <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    b2c0:	2101      	movs	r1, #1
    b2c2:	6878      	ldr	r0, [r7, #4]
    b2c4:	4b08      	ldr	r3, [pc, #32]	; (b2e8 <_usb_d_dev_trans_out_isr+0x88>)
    b2c6:	4798      	blx	r3
}
    b2c8:	e007      	b.n	b2da <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b2ca:	78fb      	ldrb	r3, [r7, #3]
    b2cc:	f003 0310 	and.w	r3, r3, #16
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d002      	beq.n	b2da <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b2d4:	6878      	ldr	r0, [r7, #4]
    b2d6:	4b06      	ldr	r3, [pc, #24]	; (b2f0 <_usb_d_dev_trans_out_isr+0x90>)
    b2d8:	4798      	blx	r3
}
    b2da:	bf00      	nop
    b2dc:	3708      	adds	r7, #8
    b2de:	46bd      	mov	sp, r7
    b2e0:	bd80      	pop	{r7, pc}
    b2e2:	bf00      	nop
    b2e4:	0000af71 	.word	0x0000af71
    b2e8:	0000afb5 	.word	0x0000afb5
    b2ec:	0000abd5 	.word	0x0000abd5
    b2f0:	0000ae99 	.word	0x0000ae99

0000b2f4 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    b2f4:	b580      	push	{r7, lr}
    b2f6:	b084      	sub	sp, #16
    b2f8:	af00      	add	r7, sp, #0
    b2fa:	6078      	str	r0, [r7, #4]
    b2fc:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    b2fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b302:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b304:	683b      	ldr	r3, [r7, #0]
    b306:	7c9b      	ldrb	r3, [r3, #18]
    b308:	f003 030f 	and.w	r3, r3, #15
    b30c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    b30e:	7afb      	ldrb	r3, [r7, #11]
    b310:	2201      	movs	r2, #1
    b312:	409a      	lsls	r2, r3
    b314:	687b      	ldr	r3, [r7, #4]
    b316:	4013      	ands	r3, r2
    b318:	2b00      	cmp	r3, #0
    b31a:	d03d      	beq.n	b398 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    b31c:	7afb      	ldrb	r3, [r7, #11]
    b31e:	68fa      	ldr	r2, [r7, #12]
    b320:	3308      	adds	r3, #8
    b322:	015b      	lsls	r3, r3, #5
    b324:	4413      	add	r3, r2
    b326:	3307      	adds	r3, #7
    b328:	781b      	ldrb	r3, [r3, #0]
    b32a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    b32c:	7afb      	ldrb	r3, [r7, #11]
    b32e:	68fa      	ldr	r2, [r7, #12]
    b330:	015b      	lsls	r3, r3, #5
    b332:	4413      	add	r3, r2
    b334:	f203 1309 	addw	r3, r3, #265	; 0x109
    b338:	781b      	ldrb	r3, [r3, #0]
    b33a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    b33c:	7aba      	ldrb	r2, [r7, #10]
    b33e:	7a7b      	ldrb	r3, [r7, #9]
    b340:	4013      	ands	r3, r2
    b342:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    b344:	7abb      	ldrb	r3, [r7, #10]
    b346:	2b00      	cmp	r3, #0
    b348:	d027      	beq.n	b39a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    b34a:	683b      	ldr	r3, [r7, #0]
    b34c:	7cdb      	ldrb	r3, [r3, #19]
    b34e:	f003 0307 	and.w	r3, r3, #7
    b352:	b2db      	uxtb	r3, r3
    b354:	2b01      	cmp	r3, #1
    b356:	d10c      	bne.n	b372 <_usb_d_dev_handle_eps+0x7e>
    b358:	683b      	ldr	r3, [r7, #0]
    b35a:	7cdb      	ldrb	r3, [r3, #19]
    b35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b360:	b2db      	uxtb	r3, r3
    b362:	2b00      	cmp	r3, #0
    b364:	d105      	bne.n	b372 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    b366:	7abb      	ldrb	r3, [r7, #10]
    b368:	4619      	mov	r1, r3
    b36a:	6838      	ldr	r0, [r7, #0]
    b36c:	4b0c      	ldr	r3, [pc, #48]	; (b3a0 <_usb_d_dev_handle_eps+0xac>)
    b36e:	4798      	blx	r3
    b370:	e013      	b.n	b39a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    b372:	683b      	ldr	r3, [r7, #0]
    b374:	7cdb      	ldrb	r3, [r3, #19]
    b376:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b37a:	b2db      	uxtb	r3, r3
    b37c:	2b00      	cmp	r3, #0
    b37e:	d005      	beq.n	b38c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    b380:	7abb      	ldrb	r3, [r7, #10]
    b382:	4619      	mov	r1, r3
    b384:	6838      	ldr	r0, [r7, #0]
    b386:	4b07      	ldr	r3, [pc, #28]	; (b3a4 <_usb_d_dev_handle_eps+0xb0>)
    b388:	4798      	blx	r3
    b38a:	e006      	b.n	b39a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    b38c:	7abb      	ldrb	r3, [r7, #10]
    b38e:	4619      	mov	r1, r3
    b390:	6838      	ldr	r0, [r7, #0]
    b392:	4b05      	ldr	r3, [pc, #20]	; (b3a8 <_usb_d_dev_handle_eps+0xb4>)
    b394:	4798      	blx	r3
    b396:	e000      	b.n	b39a <_usb_d_dev_handle_eps+0xa6>
		return;
    b398:	bf00      	nop
		}
	}
}
    b39a:	3710      	adds	r7, #16
    b39c:	46bd      	mov	sp, r7
    b39e:	bd80      	pop	{r7, pc}
    b3a0:	0000b179 	.word	0x0000b179
    b3a4:	0000b1cd 	.word	0x0000b1cd
    b3a8:	0000b261 	.word	0x0000b261

0000b3ac <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    b3ac:	b580      	push	{r7, lr}
    b3ae:	b084      	sub	sp, #16
    b3b0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    b3b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b3b6:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    b3b8:	68bb      	ldr	r3, [r7, #8]
    b3ba:	8c1b      	ldrh	r3, [r3, #32]
    b3bc:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    b3be:	88fb      	ldrh	r3, [r7, #6]
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d104      	bne.n	b3ce <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    b3c4:	4b13      	ldr	r3, [pc, #76]	; (b414 <_usb_d_dev_handler+0x68>)
    b3c6:	4798      	blx	r3
    b3c8:	4603      	mov	r3, r0
    b3ca:	2b00      	cmp	r3, #0
    b3cc:	d11e      	bne.n	b40c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    b3ce:	2300      	movs	r3, #0
    b3d0:	73fb      	strb	r3, [r7, #15]
    b3d2:	e017      	b.n	b404 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    b3d4:	7bfa      	ldrb	r2, [r7, #15]
    b3d6:	4613      	mov	r3, r2
    b3d8:	009b      	lsls	r3, r3, #2
    b3da:	4413      	add	r3, r2
    b3dc:	009b      	lsls	r3, r3, #2
    b3de:	3310      	adds	r3, #16
    b3e0:	4a0d      	ldr	r2, [pc, #52]	; (b418 <_usb_d_dev_handler+0x6c>)
    b3e2:	4413      	add	r3, r2
    b3e4:	3304      	adds	r3, #4
    b3e6:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    b3e8:	683b      	ldr	r3, [r7, #0]
    b3ea:	7c9b      	ldrb	r3, [r3, #18]
    b3ec:	2bff      	cmp	r3, #255	; 0xff
    b3ee:	d005      	beq.n	b3fc <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    b3f0:	88fb      	ldrh	r3, [r7, #6]
    b3f2:	6839      	ldr	r1, [r7, #0]
    b3f4:	4618      	mov	r0, r3
    b3f6:	4b09      	ldr	r3, [pc, #36]	; (b41c <_usb_d_dev_handler+0x70>)
    b3f8:	4798      	blx	r3
    b3fa:	e000      	b.n	b3fe <_usb_d_dev_handler+0x52>
			continue;
    b3fc:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    b3fe:	7bfb      	ldrb	r3, [r7, #15]
    b400:	3301      	adds	r3, #1
    b402:	73fb      	strb	r3, [r7, #15]
    b404:	7bfb      	ldrb	r3, [r7, #15]
    b406:	2b08      	cmp	r3, #8
    b408:	d9e4      	bls.n	b3d4 <_usb_d_dev_handler+0x28>
    b40a:	e000      	b.n	b40e <_usb_d_dev_handler+0x62>
			return;
    b40c:	bf00      	nop
	}
}
    b40e:	3710      	adds	r7, #16
    b410:	46bd      	mov	sp, r7
    b412:	bd80      	pop	{r7, pc}
    b414:	0000a905 	.word	0x0000a905
    b418:	20001f1c 	.word	0x20001f1c
    b41c:	0000b2f5 	.word	0x0000b2f5

0000b420 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    b420:	b580      	push	{r7, lr}
    b422:	b082      	sub	sp, #8
    b424:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    b426:	2300      	movs	r3, #0
    b428:	71fb      	strb	r3, [r7, #7]
    b42a:	e023      	b.n	b474 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    b42c:	79fa      	ldrb	r2, [r7, #7]
    b42e:	4613      	mov	r3, r2
    b430:	009b      	lsls	r3, r3, #2
    b432:	4413      	add	r3, r2
    b434:	009b      	lsls	r3, r3, #2
    b436:	3310      	adds	r3, #16
    b438:	4a14      	ldr	r2, [pc, #80]	; (b48c <_usb_d_dev_reset_epts+0x6c>)
    b43a:	4413      	add	r3, r2
    b43c:	3304      	adds	r3, #4
    b43e:	2103      	movs	r1, #3
    b440:	4618      	mov	r0, r3
    b442:	4b13      	ldr	r3, [pc, #76]	; (b490 <_usb_d_dev_reset_epts+0x70>)
    b444:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    b446:	79fa      	ldrb	r2, [r7, #7]
    b448:	4910      	ldr	r1, [pc, #64]	; (b48c <_usb_d_dev_reset_epts+0x6c>)
    b44a:	4613      	mov	r3, r2
    b44c:	009b      	lsls	r3, r3, #2
    b44e:	4413      	add	r3, r2
    b450:	009b      	lsls	r3, r3, #2
    b452:	440b      	add	r3, r1
    b454:	3326      	adds	r3, #38	; 0x26
    b456:	22ff      	movs	r2, #255	; 0xff
    b458:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    b45a:	79fa      	ldrb	r2, [r7, #7]
    b45c:	490b      	ldr	r1, [pc, #44]	; (b48c <_usb_d_dev_reset_epts+0x6c>)
    b45e:	4613      	mov	r3, r2
    b460:	009b      	lsls	r3, r3, #2
    b462:	4413      	add	r3, r2
    b464:	009b      	lsls	r3, r3, #2
    b466:	440b      	add	r3, r1
    b468:	3327      	adds	r3, #39	; 0x27
    b46a:	2200      	movs	r2, #0
    b46c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    b46e:	79fb      	ldrb	r3, [r7, #7]
    b470:	3301      	adds	r3, #1
    b472:	71fb      	strb	r3, [r7, #7]
    b474:	79fb      	ldrb	r3, [r7, #7]
    b476:	2b08      	cmp	r3, #8
    b478:	d9d8      	bls.n	b42c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    b47a:	22a0      	movs	r2, #160	; 0xa0
    b47c:	2100      	movs	r1, #0
    b47e:	4805      	ldr	r0, [pc, #20]	; (b494 <_usb_d_dev_reset_epts+0x74>)
    b480:	4b05      	ldr	r3, [pc, #20]	; (b498 <_usb_d_dev_reset_epts+0x78>)
    b482:	4798      	blx	r3
}
    b484:	bf00      	nop
    b486:	3708      	adds	r7, #8
    b488:	46bd      	mov	sp, r7
    b48a:	bd80      	pop	{r7, pc}
    b48c:	20001f1c 	.word	0x20001f1c
    b490:	0000bce5 	.word	0x0000bce5
    b494:	20001fe4 	.word	0x20001fe4
    b498:	000102ed 	.word	0x000102ed

0000b49c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    b49c:	b580      	push	{r7, lr}
    b49e:	b084      	sub	sp, #16
    b4a0:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    b4a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b4a6:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    b4a8:	2301      	movs	r3, #1
    b4aa:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    b4ac:	2304      	movs	r3, #4
    b4ae:	713b      	strb	r3, [r7, #4]
    b4b0:	2300      	movs	r3, #0
    b4b2:	717b      	strb	r3, [r7, #5]
    b4b4:	2300      	movs	r3, #0
    b4b6:	71bb      	strb	r3, [r7, #6]
    b4b8:	2300      	movs	r3, #0
    b4ba:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    b4bc:	2101      	movs	r1, #1
    b4be:	68f8      	ldr	r0, [r7, #12]
    b4c0:	4b26      	ldr	r3, [pc, #152]	; (b55c <_usb_d_dev_init+0xc0>)
    b4c2:	4798      	blx	r3
    b4c4:	4603      	mov	r3, r0
    b4c6:	f083 0301 	eor.w	r3, r3, #1
    b4ca:	b2db      	uxtb	r3, r3
    b4cc:	2b00      	cmp	r3, #0
    b4ce:	d011      	beq.n	b4f4 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    b4d0:	2102      	movs	r1, #2
    b4d2:	68f8      	ldr	r0, [r7, #12]
    b4d4:	4b22      	ldr	r3, [pc, #136]	; (b560 <_usb_d_dev_init+0xc4>)
    b4d6:	4798      	blx	r3
    b4d8:	4603      	mov	r3, r0
    b4da:	2b00      	cmp	r3, #0
    b4dc:	d006      	beq.n	b4ec <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    b4de:	68f8      	ldr	r0, [r7, #12]
    b4e0:	4b20      	ldr	r3, [pc, #128]	; (b564 <_usb_d_dev_init+0xc8>)
    b4e2:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    b4e4:	2102      	movs	r1, #2
    b4e6:	68f8      	ldr	r0, [r7, #12]
    b4e8:	4b1f      	ldr	r3, [pc, #124]	; (b568 <_usb_d_dev_init+0xcc>)
    b4ea:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    b4ec:	2101      	movs	r1, #1
    b4ee:	68f8      	ldr	r0, [r7, #12]
    b4f0:	4b1e      	ldr	r3, [pc, #120]	; (b56c <_usb_d_dev_init+0xd0>)
    b4f2:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    b4f4:	2101      	movs	r1, #1
    b4f6:	68f8      	ldr	r0, [r7, #12]
    b4f8:	4b1b      	ldr	r3, [pc, #108]	; (b568 <_usb_d_dev_init+0xcc>)
    b4fa:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    b4fc:	4b1c      	ldr	r3, [pc, #112]	; (b570 <_usb_d_dev_init+0xd4>)
    b4fe:	4a1d      	ldr	r2, [pc, #116]	; (b574 <_usb_d_dev_init+0xd8>)
    b500:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    b502:	4b1b      	ldr	r3, [pc, #108]	; (b570 <_usb_d_dev_init+0xd4>)
    b504:	4a1b      	ldr	r2, [pc, #108]	; (b574 <_usb_d_dev_init+0xd8>)
    b506:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    b508:	4b19      	ldr	r3, [pc, #100]	; (b570 <_usb_d_dev_init+0xd4>)
    b50a:	4a1a      	ldr	r2, [pc, #104]	; (b574 <_usb_d_dev_init+0xd8>)
    b50c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    b50e:	4b18      	ldr	r3, [pc, #96]	; (b570 <_usb_d_dev_init+0xd4>)
    b510:	4a18      	ldr	r2, [pc, #96]	; (b574 <_usb_d_dev_init+0xd8>)
    b512:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    b514:	4b16      	ldr	r3, [pc, #88]	; (b570 <_usb_d_dev_init+0xd4>)
    b516:	4a17      	ldr	r2, [pc, #92]	; (b574 <_usb_d_dev_init+0xd8>)
    b518:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    b51a:	4b17      	ldr	r3, [pc, #92]	; (b578 <_usb_d_dev_init+0xdc>)
    b51c:	4798      	blx	r3

	_usb_load_calib();
    b51e:	4b17      	ldr	r3, [pc, #92]	; (b57c <_usb_d_dev_init+0xe0>)
    b520:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    b522:	2104      	movs	r1, #4
    b524:	68f8      	ldr	r0, [r7, #12]
    b526:	4b11      	ldr	r3, [pc, #68]	; (b56c <_usb_d_dev_init+0xd0>)
    b528:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    b52a:	4b15      	ldr	r3, [pc, #84]	; (b580 <_usb_d_dev_init+0xe4>)
    b52c:	4619      	mov	r1, r3
    b52e:	68f8      	ldr	r0, [r7, #12]
    b530:	4b14      	ldr	r3, [pc, #80]	; (b584 <_usb_d_dev_init+0xe8>)
    b532:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    b534:	7afb      	ldrb	r3, [r7, #11]
    b536:	f107 0210 	add.w	r2, r7, #16
    b53a:	4413      	add	r3, r2
    b53c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    b540:	f043 0301 	orr.w	r3, r3, #1
    b544:	b2db      	uxtb	r3, r3
    b546:	b29b      	uxth	r3, r3
    b548:	4619      	mov	r1, r3
    b54a:	68f8      	ldr	r0, [r7, #12]
    b54c:	4b0e      	ldr	r3, [pc, #56]	; (b588 <_usb_d_dev_init+0xec>)
    b54e:	4798      	blx	r3

	return ERR_NONE;
    b550:	2300      	movs	r3, #0
}
    b552:	4618      	mov	r0, r3
    b554:	3710      	adds	r7, #16
    b556:	46bd      	mov	sp, r7
    b558:	bd80      	pop	{r7, pc}
    b55a:	bf00      	nop
    b55c:	00009b35 	.word	0x00009b35
    b560:	00009e85 	.word	0x00009e85
    b564:	00009e59 	.word	0x00009e59
    b568:	00009b0b 	.word	0x00009b0b
    b56c:	00009eb5 	.word	0x00009eb5
    b570:	20001f1c 	.word	0x20001f1c
    b574:	00009f7d 	.word	0x00009f7d
    b578:	0000b421 	.word	0x0000b421
    b57c:	00009f95 	.word	0x00009f95
    b580:	20001fe4 	.word	0x20001fe4
    b584:	00009f61 	.word	0x00009f61
    b588:	00009f25 	.word	0x00009f25

0000b58c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    b58c:	b580      	push	{r7, lr}
    b58e:	b082      	sub	sp, #8
    b590:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    b592:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b596:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    b598:	2103      	movs	r1, #3
    b59a:	6878      	ldr	r0, [r7, #4]
    b59c:	4b17      	ldr	r3, [pc, #92]	; (b5fc <_usb_d_dev_enable+0x70>)
    b59e:	4798      	blx	r3
    b5a0:	4603      	mov	r3, r0
    b5a2:	2b00      	cmp	r3, #0
    b5a4:	d002      	beq.n	b5ac <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    b5a6:	f06f 0310 	mvn.w	r3, #16
    b5aa:	e023      	b.n	b5f4 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    b5ac:	6878      	ldr	r0, [r7, #4]
    b5ae:	4b14      	ldr	r3, [pc, #80]	; (b600 <_usb_d_dev_enable+0x74>)
    b5b0:	4798      	blx	r3
    b5b2:	4603      	mov	r3, r0
    b5b4:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    b5b6:	78fb      	ldrb	r3, [r7, #3]
    b5b8:	f003 0302 	and.w	r3, r3, #2
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d107      	bne.n	b5d0 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    b5c0:	78fb      	ldrb	r3, [r7, #3]
    b5c2:	f043 0302 	orr.w	r3, r3, #2
    b5c6:	b2db      	uxtb	r3, r3
    b5c8:	4619      	mov	r1, r3
    b5ca:	6878      	ldr	r0, [r7, #4]
    b5cc:	4b0d      	ldr	r3, [pc, #52]	; (b604 <_usb_d_dev_enable+0x78>)
    b5ce:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    b5d0:	2050      	movs	r0, #80	; 0x50
    b5d2:	4b0d      	ldr	r3, [pc, #52]	; (b608 <_usb_d_dev_enable+0x7c>)
    b5d4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    b5d6:	2051      	movs	r0, #81	; 0x51
    b5d8:	4b0b      	ldr	r3, [pc, #44]	; (b608 <_usb_d_dev_enable+0x7c>)
    b5da:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    b5dc:	2052      	movs	r0, #82	; 0x52
    b5de:	4b0a      	ldr	r3, [pc, #40]	; (b608 <_usb_d_dev_enable+0x7c>)
    b5e0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    b5e2:	2053      	movs	r0, #83	; 0x53
    b5e4:	4b08      	ldr	r3, [pc, #32]	; (b608 <_usb_d_dev_enable+0x7c>)
    b5e6:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    b5e8:	f240 218d 	movw	r1, #653	; 0x28d
    b5ec:	6878      	ldr	r0, [r7, #4]
    b5ee:	4b07      	ldr	r3, [pc, #28]	; (b60c <_usb_d_dev_enable+0x80>)
    b5f0:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    b5f2:	2300      	movs	r3, #0
}
    b5f4:	4618      	mov	r0, r3
    b5f6:	3708      	adds	r7, #8
    b5f8:	46bd      	mov	sp, r7
    b5fa:	bd80      	pop	{r7, pc}
    b5fc:	00009e2f 	.word	0x00009e2f
    b600:	00009edd 	.word	0x00009edd
    b604:	00009eb5 	.word	0x00009eb5
    b608:	00009a41 	.word	0x00009a41
    b60c:	00009dd9 	.word	0x00009dd9

0000b610 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    b610:	b580      	push	{r7, lr}
    b612:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    b614:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b618:	4b01      	ldr	r3, [pc, #4]	; (b620 <_usb_d_dev_attach+0x10>)
    b61a:	4798      	blx	r3
}
    b61c:	bf00      	nop
    b61e:	bd80      	pop	{r7, pc}
    b620:	00009f01 	.word	0x00009f01

0000b624 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    b624:	b580      	push	{r7, lr}
    b626:	b082      	sub	sp, #8
    b628:	af00      	add	r7, sp, #0
    b62a:	4603      	mov	r3, r0
    b62c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    b62e:	79fb      	ldrb	r3, [r7, #7]
    b630:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b634:	b2db      	uxtb	r3, r3
    b636:	4619      	mov	r1, r3
    b638:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b63c:	4b02      	ldr	r3, [pc, #8]	; (b648 <_usb_d_dev_set_address+0x24>)
    b63e:	4798      	blx	r3
}
    b640:	bf00      	nop
    b642:	3708      	adds	r7, #8
    b644:	46bd      	mov	sp, r7
    b646:	bd80      	pop	{r7, pc}
    b648:	00009f43 	.word	0x00009f43

0000b64c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    b64c:	b590      	push	{r4, r7, lr}
    b64e:	b085      	sub	sp, #20
    b650:	af00      	add	r7, sp, #0
    b652:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    b654:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b658:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b65a:	687b      	ldr	r3, [r7, #4]
    b65c:	7c9b      	ldrb	r3, [r3, #18]
    b65e:	f003 030f 	and.w	r3, r3, #15
    b662:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b664:	687b      	ldr	r3, [r7, #4]
    b666:	68db      	ldr	r3, [r3, #12]
    b668:	461a      	mov	r2, r3
    b66a:	7afb      	ldrb	r3, [r7, #11]
    b66c:	2100      	movs	r1, #0
    b66e:	4618      	mov	r0, r3
    b670:	4b0f      	ldr	r3, [pc, #60]	; (b6b0 <_usb_d_dev_trans_setup+0x64>)
    b672:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b674:	687b      	ldr	r3, [r7, #4]
    b676:	8a1b      	ldrh	r3, [r3, #16]
    b678:	461a      	mov	r2, r3
    b67a:	7af8      	ldrb	r0, [r7, #11]
    b67c:	2300      	movs	r3, #0
    b67e:	2100      	movs	r1, #0
    b680:	4c0c      	ldr	r4, [pc, #48]	; (b6b4 <_usb_d_dev_trans_setup+0x68>)
    b682:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    b684:	7afb      	ldrb	r3, [r7, #11]
    b686:	22b0      	movs	r2, #176	; 0xb0
    b688:	4619      	mov	r1, r3
    b68a:	68f8      	ldr	r0, [r7, #12]
    b68c:	4b0a      	ldr	r3, [pc, #40]	; (b6b8 <_usb_d_dev_trans_setup+0x6c>)
    b68e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    b690:	7afb      	ldrb	r3, [r7, #11]
    b692:	2200      	movs	r2, #0
    b694:	2100      	movs	r1, #0
    b696:	4618      	mov	r0, r3
    b698:	4b08      	ldr	r3, [pc, #32]	; (b6bc <_usb_d_dev_trans_setup+0x70>)
    b69a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    b69c:	7afb      	ldrb	r3, [r7, #11]
    b69e:	2210      	movs	r2, #16
    b6a0:	4619      	mov	r1, r3
    b6a2:	68f8      	ldr	r0, [r7, #12]
    b6a4:	4b06      	ldr	r3, [pc, #24]	; (b6c0 <_usb_d_dev_trans_setup+0x74>)
    b6a6:	4798      	blx	r3
}
    b6a8:	bf00      	nop
    b6aa:	3714      	adds	r7, #20
    b6ac:	46bd      	mov	sp, r7
    b6ae:	bd90      	pop	{r4, r7, pc}
    b6b0:	0000a3e1 	.word	0x0000a3e1
    b6b4:	0000a569 	.word	0x0000a569
    b6b8:	00009c41 	.word	0x00009c41
    b6bc:	0000a639 	.word	0x0000a639
    b6c0:	00009c95 	.word	0x00009c95

0000b6c4 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    b6c4:	b580      	push	{r7, lr}
    b6c6:	b088      	sub	sp, #32
    b6c8:	af00      	add	r7, sp, #0
    b6ca:	4603      	mov	r3, r0
    b6cc:	71fb      	strb	r3, [r7, #7]
    b6ce:	460b      	mov	r3, r1
    b6d0:	71bb      	strb	r3, [r7, #6]
    b6d2:	4613      	mov	r3, r2
    b6d4:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    b6d6:	79fb      	ldrb	r3, [r7, #7]
    b6d8:	f003 030f 	and.w	r3, r3, #15
    b6dc:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    b6de:	79fb      	ldrb	r3, [r7, #7]
    b6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	bf14      	ite	ne
    b6e8:	2301      	movne	r3, #1
    b6ea:	2300      	moveq	r3, #0
    b6ec:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b6ee:	7fba      	ldrb	r2, [r7, #30]
    b6f0:	7ffb      	ldrb	r3, [r7, #31]
    b6f2:	4611      	mov	r1, r2
    b6f4:	4618      	mov	r0, r3
    b6f6:	4b3e      	ldr	r3, [pc, #248]	; (b7f0 <_usb_d_dev_ep_init+0x12c>)
    b6f8:	4798      	blx	r3
    b6fa:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    b6fc:	79bb      	ldrb	r3, [r7, #6]
    b6fe:	f003 0303 	and.w	r3, r3, #3
    b702:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    b704:	7ffa      	ldrb	r2, [r7, #31]
    b706:	4613      	mov	r3, r2
    b708:	005b      	lsls	r3, r3, #1
    b70a:	4413      	add	r3, r2
    b70c:	009b      	lsls	r3, r3, #2
    b70e:	4a39      	ldr	r2, [pc, #228]	; (b7f4 <_usb_d_dev_ep_init+0x130>)
    b710:	4413      	add	r3, r2
    b712:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    b714:	7ffb      	ldrb	r3, [r7, #31]
    b716:	2b04      	cmp	r3, #4
    b718:	d902      	bls.n	b720 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    b71a:	f06f 0311 	mvn.w	r3, #17
    b71e:	e063      	b.n	b7e8 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    b720:	69bb      	ldr	r3, [r7, #24]
    b722:	7c9b      	ldrb	r3, [r3, #18]
    b724:	2bff      	cmp	r3, #255	; 0xff
    b726:	d002      	beq.n	b72e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    b728:	f06f 0313 	mvn.w	r3, #19
    b72c:	e05c      	b.n	b7e8 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    b72e:	7dfb      	ldrb	r3, [r7, #23]
    b730:	2b00      	cmp	r3, #0
    b732:	d11f      	bne.n	b774 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    b734:	7fbb      	ldrb	r3, [r7, #30]
    b736:	2b00      	cmp	r3, #0
    b738:	bf14      	ite	ne
    b73a:	2301      	movne	r3, #1
    b73c:	2300      	moveq	r3, #0
    b73e:	b2db      	uxtb	r3, r3
    b740:	f083 0301 	eor.w	r3, r3, #1
    b744:	b2db      	uxtb	r3, r3
    b746:	f003 0301 	and.w	r3, r3, #1
    b74a:	b2da      	uxtb	r2, r3
    b74c:	7ffb      	ldrb	r3, [r7, #31]
    b74e:	4611      	mov	r1, r2
    b750:	4618      	mov	r0, r3
    b752:	4b27      	ldr	r3, [pc, #156]	; (b7f0 <_usb_d_dev_ep_init+0x12c>)
    b754:	4798      	blx	r3
    b756:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    b758:	68fb      	ldr	r3, [r7, #12]
    b75a:	7c9b      	ldrb	r3, [r3, #18]
    b75c:	2bff      	cmp	r3, #255	; 0xff
    b75e:	d002      	beq.n	b766 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    b760:	f06f 0313 	mvn.w	r3, #19
    b764:	e040      	b.n	b7e8 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    b766:	693b      	ldr	r3, [r7, #16]
    b768:	681b      	ldr	r3, [r3, #0]
    b76a:	2b00      	cmp	r3, #0
    b76c:	d102      	bne.n	b774 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    b76e:	f06f 0312 	mvn.w	r3, #18
    b772:	e039      	b.n	b7e8 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    b774:	7fbb      	ldrb	r3, [r7, #30]
    b776:	2b00      	cmp	r3, #0
    b778:	d007      	beq.n	b78a <_usb_d_dev_ep_init+0xc6>
    b77a:	693b      	ldr	r3, [r7, #16]
    b77c:	685b      	ldr	r3, [r3, #4]
    b77e:	2b00      	cmp	r3, #0
    b780:	bf14      	ite	ne
    b782:	2301      	movne	r3, #1
    b784:	2300      	moveq	r3, #0
    b786:	b2db      	uxtb	r3, r3
    b788:	e006      	b.n	b798 <_usb_d_dev_ep_init+0xd4>
    b78a:	693b      	ldr	r3, [r7, #16]
    b78c:	681b      	ldr	r3, [r3, #0]
    b78e:	2b00      	cmp	r3, #0
    b790:	bf14      	ite	ne
    b792:	2301      	movne	r3, #1
    b794:	2300      	moveq	r3, #0
    b796:	b2db      	uxtb	r3, r3
    b798:	2b00      	cmp	r3, #0
    b79a:	d00f      	beq.n	b7bc <_usb_d_dev_ep_init+0xf8>
    b79c:	7fbb      	ldrb	r3, [r7, #30]
    b79e:	2b00      	cmp	r3, #0
    b7a0:	d003      	beq.n	b7aa <_usb_d_dev_ep_init+0xe6>
    b7a2:	693b      	ldr	r3, [r7, #16]
    b7a4:	895b      	ldrh	r3, [r3, #10]
    b7a6:	461a      	mov	r2, r3
    b7a8:	e002      	b.n	b7b0 <_usb_d_dev_ep_init+0xec>
    b7aa:	693b      	ldr	r3, [r7, #16]
    b7ac:	891b      	ldrh	r3, [r3, #8]
    b7ae:	461a      	mov	r2, r3
    b7b0:	88bb      	ldrh	r3, [r7, #4]
    b7b2:	429a      	cmp	r2, r3
    b7b4:	da02      	bge.n	b7bc <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    b7b6:	f06f 0312 	mvn.w	r3, #18
    b7ba:	e015      	b.n	b7e8 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    b7bc:	7fbb      	ldrb	r3, [r7, #30]
    b7be:	2b00      	cmp	r3, #0
    b7c0:	d002      	beq.n	b7c8 <_usb_d_dev_ep_init+0x104>
    b7c2:	693b      	ldr	r3, [r7, #16]
    b7c4:	685b      	ldr	r3, [r3, #4]
    b7c6:	e001      	b.n	b7cc <_usb_d_dev_ep_init+0x108>
    b7c8:	693b      	ldr	r3, [r7, #16]
    b7ca:	681b      	ldr	r3, [r3, #0]
    b7cc:	69ba      	ldr	r2, [r7, #24]
    b7ce:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    b7d0:	69bb      	ldr	r3, [r7, #24]
    b7d2:	88ba      	ldrh	r2, [r7, #4]
    b7d4:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    b7d6:	7dfb      	ldrb	r3, [r7, #23]
    b7d8:	3301      	adds	r3, #1
    b7da:	b2da      	uxtb	r2, r3
    b7dc:	69bb      	ldr	r3, [r7, #24]
    b7de:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    b7e0:	69bb      	ldr	r3, [r7, #24]
    b7e2:	79fa      	ldrb	r2, [r7, #7]
    b7e4:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    b7e6:	2300      	movs	r3, #0
}
    b7e8:	4618      	mov	r0, r3
    b7ea:	3720      	adds	r7, #32
    b7ec:	46bd      	mov	sp, r7
    b7ee:	bd80      	pop	{r7, pc}
    b7f0:	0000a6f5 	.word	0x0000a6f5
    b7f4:	0001162c 	.word	0x0001162c

0000b7f8 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    b7f8:	b580      	push	{r7, lr}
    b7fa:	b086      	sub	sp, #24
    b7fc:	af00      	add	r7, sp, #0
    b7fe:	4603      	mov	r3, r0
    b800:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    b802:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b806:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    b808:	79fb      	ldrb	r3, [r7, #7]
    b80a:	f003 030f 	and.w	r3, r3, #15
    b80e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b810:	79fb      	ldrb	r3, [r7, #7]
    b812:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b816:	2b00      	cmp	r3, #0
    b818:	bf14      	ite	ne
    b81a:	2301      	movne	r3, #1
    b81c:	2300      	moveq	r3, #0
    b81e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b820:	7cba      	ldrb	r2, [r7, #18]
    b822:	7cfb      	ldrb	r3, [r7, #19]
    b824:	4611      	mov	r1, r2
    b826:	4618      	mov	r0, r3
    b828:	4b2a      	ldr	r3, [pc, #168]	; (b8d4 <_usb_d_dev_ep_deinit+0xdc>)
    b82a:	4798      	blx	r3
    b82c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b82e:	7cfb      	ldrb	r3, [r7, #19]
    b830:	2b04      	cmp	r3, #4
    b832:	d84a      	bhi.n	b8ca <_usb_d_dev_ep_deinit+0xd2>
    b834:	68fb      	ldr	r3, [r7, #12]
    b836:	7c9b      	ldrb	r3, [r3, #18]
    b838:	2bff      	cmp	r3, #255	; 0xff
    b83a:	d046      	beq.n	b8ca <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    b83c:	7cbb      	ldrb	r3, [r7, #18]
    b83e:	2203      	movs	r2, #3
    b840:	4619      	mov	r1, r3
    b842:	68f8      	ldr	r0, [r7, #12]
    b844:	4b24      	ldr	r3, [pc, #144]	; (b8d8 <_usb_d_dev_ep_deinit+0xe0>)
    b846:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b848:	68fb      	ldr	r3, [r7, #12]
    b84a:	7cdb      	ldrb	r3, [r3, #19]
    b84c:	f003 0307 	and.w	r3, r3, #7
    b850:	b2db      	uxtb	r3, r3
    b852:	2b01      	cmp	r3, #1
    b854:	d107      	bne.n	b866 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    b856:	79fb      	ldrb	r3, [r7, #7]
    b858:	697a      	ldr	r2, [r7, #20]
    b85a:	3308      	adds	r3, #8
    b85c:	015b      	lsls	r3, r3, #5
    b85e:	4413      	add	r3, r2
    b860:	2200      	movs	r2, #0
    b862:	701a      	strb	r2, [r3, #0]
    b864:	e02a      	b.n	b8bc <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    b866:	f997 3007 	ldrsb.w	r3, [r7, #7]
    b86a:	2b00      	cmp	r3, #0
    b86c:	da15      	bge.n	b89a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    b86e:	79fb      	ldrb	r3, [r7, #7]
    b870:	f003 030f 	and.w	r3, r3, #15
    b874:	79fa      	ldrb	r2, [r7, #7]
    b876:	f002 020f 	and.w	r2, r2, #15
    b87a:	6979      	ldr	r1, [r7, #20]
    b87c:	3208      	adds	r2, #8
    b87e:	0152      	lsls	r2, r2, #5
    b880:	440a      	add	r2, r1
    b882:	7812      	ldrb	r2, [r2, #0]
    b884:	b2d2      	uxtb	r2, r2
    b886:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    b88a:	b2d1      	uxtb	r1, r2
    b88c:	697a      	ldr	r2, [r7, #20]
    b88e:	3308      	adds	r3, #8
    b890:	015b      	lsls	r3, r3, #5
    b892:	4413      	add	r3, r2
    b894:	460a      	mov	r2, r1
    b896:	701a      	strb	r2, [r3, #0]
    b898:	e010      	b.n	b8bc <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    b89a:	79fb      	ldrb	r3, [r7, #7]
    b89c:	79fa      	ldrb	r2, [r7, #7]
    b89e:	6979      	ldr	r1, [r7, #20]
    b8a0:	3208      	adds	r2, #8
    b8a2:	0152      	lsls	r2, r2, #5
    b8a4:	440a      	add	r2, r1
    b8a6:	7812      	ldrb	r2, [r2, #0]
    b8a8:	b2d2      	uxtb	r2, r2
    b8aa:	f022 0207 	bic.w	r2, r2, #7
    b8ae:	b2d1      	uxtb	r1, r2
    b8b0:	697a      	ldr	r2, [r7, #20]
    b8b2:	3308      	adds	r3, #8
    b8b4:	015b      	lsls	r3, r3, #5
    b8b6:	4413      	add	r3, r2
    b8b8:	460a      	mov	r2, r1
    b8ba:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    b8bc:	68fb      	ldr	r3, [r7, #12]
    b8be:	2200      	movs	r2, #0
    b8c0:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    b8c2:	68fb      	ldr	r3, [r7, #12]
    b8c4:	22ff      	movs	r2, #255	; 0xff
    b8c6:	749a      	strb	r2, [r3, #18]
    b8c8:	e000      	b.n	b8cc <_usb_d_dev_ep_deinit+0xd4>
		return;
    b8ca:	bf00      	nop
}
    b8cc:	3718      	adds	r7, #24
    b8ce:	46bd      	mov	sp, r7
    b8d0:	bd80      	pop	{r7, pc}
    b8d2:	bf00      	nop
    b8d4:	0000a6f5 	.word	0x0000a6f5
    b8d8:	0000bd2d 	.word	0x0000bd2d

0000b8dc <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    b8dc:	b5b0      	push	{r4, r5, r7, lr}
    b8de:	b088      	sub	sp, #32
    b8e0:	af00      	add	r7, sp, #0
    b8e2:	4603      	mov	r3, r0
    b8e4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    b8e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b8ea:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    b8ec:	79fb      	ldrb	r3, [r7, #7]
    b8ee:	f003 030f 	and.w	r3, r3, #15
    b8f2:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    b8f4:	79fb      	ldrb	r3, [r7, #7]
    b8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	bf14      	ite	ne
    b8fe:	2301      	movne	r3, #1
    b900:	2300      	moveq	r3, #0
    b902:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    b904:	7eba      	ldrb	r2, [r7, #26]
    b906:	7efb      	ldrb	r3, [r7, #27]
    b908:	4611      	mov	r1, r2
    b90a:	4618      	mov	r0, r3
    b90c:	4b70      	ldr	r3, [pc, #448]	; (bad0 <_usb_d_dev_ep_enable+0x1f4>)
    b90e:	4798      	blx	r3
    b910:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    b912:	7efb      	ldrb	r3, [r7, #27]
    b914:	4619      	mov	r1, r3
    b916:	69f8      	ldr	r0, [r7, #28]
    b918:	4b6e      	ldr	r3, [pc, #440]	; (bad4 <_usb_d_dev_ep_enable+0x1f8>)
    b91a:	4798      	blx	r3
    b91c:	4603      	mov	r3, r0
    b91e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b920:	7efb      	ldrb	r3, [r7, #27]
    b922:	2b04      	cmp	r3, #4
    b924:	d803      	bhi.n	b92e <_usb_d_dev_ep_enable+0x52>
    b926:	697b      	ldr	r3, [r7, #20]
    b928:	7c9b      	ldrb	r3, [r3, #18]
    b92a:	2bff      	cmp	r3, #255	; 0xff
    b92c:	d102      	bne.n	b934 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    b92e:	f06f 0311 	mvn.w	r3, #17
    b932:	e0c8      	b.n	bac6 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    b934:	7efb      	ldrb	r3, [r7, #27]
    b936:	015b      	lsls	r3, r3, #5
    b938:	4a67      	ldr	r2, [pc, #412]	; (bad8 <_usb_d_dev_ep_enable+0x1fc>)
    b93a:	4413      	add	r3, r2
    b93c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    b93e:	697b      	ldr	r3, [r7, #20]
    b940:	7cdb      	ldrb	r3, [r3, #19]
    b942:	f003 0307 	and.w	r3, r3, #7
    b946:	b2db      	uxtb	r3, r3
    b948:	2b01      	cmp	r3, #1
    b94a:	d14b      	bne.n	b9e4 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    b94c:	7cfb      	ldrb	r3, [r7, #19]
    b94e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    b952:	2b00      	cmp	r3, #0
    b954:	d002      	beq.n	b95c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    b956:	f06f 0313 	mvn.w	r3, #19
    b95a:	e0b4      	b.n	bac6 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    b95c:	7efb      	ldrb	r3, [r7, #27]
    b95e:	2211      	movs	r2, #17
    b960:	4619      	mov	r1, r3
    b962:	69f8      	ldr	r0, [r7, #28]
    b964:	4b5d      	ldr	r3, [pc, #372]	; (badc <_usb_d_dev_ep_enable+0x200>)
    b966:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b968:	697b      	ldr	r3, [r7, #20]
    b96a:	8a1b      	ldrh	r3, [r3, #16]
    b96c:	039b      	lsls	r3, r3, #14
    b96e:	4c5c      	ldr	r4, [pc, #368]	; (bae0 <_usb_d_dev_ep_enable+0x204>)
    b970:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b972:	697b      	ldr	r3, [r7, #20]
    b974:	8a1b      	ldrh	r3, [r3, #16]
    b976:	4618      	mov	r0, r3
    b978:	4b5a      	ldr	r3, [pc, #360]	; (bae4 <_usb_d_dev_ep_enable+0x208>)
    b97a:	4798      	blx	r3
    b97c:	4603      	mov	r3, r0
    b97e:	071b      	lsls	r3, r3, #28
    b980:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b984:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b988:	68fb      	ldr	r3, [r7, #12]
    b98a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    b98c:	68fb      	ldr	r3, [r7, #12]
    b98e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b992:	697b      	ldr	r3, [r7, #20]
    b994:	8a1b      	ldrh	r3, [r3, #16]
    b996:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b99a:	697b      	ldr	r3, [r7, #20]
    b99c:	8a1b      	ldrh	r3, [r3, #16]
    b99e:	4618      	mov	r0, r3
    b9a0:	4b50      	ldr	r3, [pc, #320]	; (bae4 <_usb_d_dev_ep_enable+0x208>)
    b9a2:	4798      	blx	r3
    b9a4:	4603      	mov	r3, r0
    b9a6:	071b      	lsls	r3, r3, #28
    b9a8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b9ac:	432b      	orrs	r3, r5
    b9ae:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b9b0:	7efb      	ldrb	r3, [r7, #27]
    b9b2:	2200      	movs	r2, #0
    b9b4:	2100      	movs	r1, #0
    b9b6:	4618      	mov	r0, r3
    b9b8:	4b4b      	ldr	r3, [pc, #300]	; (bae8 <_usb_d_dev_ep_enable+0x20c>)
    b9ba:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    b9bc:	7efb      	ldrb	r3, [r7, #27]
    b9be:	2200      	movs	r2, #0
    b9c0:	2101      	movs	r1, #1
    b9c2:	4618      	mov	r0, r3
    b9c4:	4b49      	ldr	r3, [pc, #292]	; (baec <_usb_d_dev_ep_enable+0x210>)
    b9c6:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    b9c8:	7efb      	ldrb	r3, [r7, #27]
    b9ca:	2100      	movs	r1, #0
    b9cc:	4618      	mov	r0, r3
    b9ce:	4b48      	ldr	r3, [pc, #288]	; (baf0 <_usb_d_dev_ep_enable+0x214>)
    b9d0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b9d2:	7efb      	ldrb	r3, [r7, #27]
    b9d4:	2101      	movs	r1, #1
    b9d6:	4618      	mov	r0, r3
    b9d8:	4b45      	ldr	r3, [pc, #276]	; (baf0 <_usb_d_dev_ep_enable+0x214>)
    b9da:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    b9dc:	6978      	ldr	r0, [r7, #20]
    b9de:	4b45      	ldr	r3, [pc, #276]	; (baf4 <_usb_d_dev_ep_enable+0x218>)
    b9e0:	4798      	blx	r3
    b9e2:	e06f      	b.n	bac4 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    b9e4:	7ebb      	ldrb	r3, [r7, #26]
    b9e6:	2b00      	cmp	r3, #0
    b9e8:	d038      	beq.n	ba5c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b9ea:	7cfb      	ldrb	r3, [r7, #19]
    b9ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b9f0:	2b00      	cmp	r3, #0
    b9f2:	d002      	beq.n	b9fa <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    b9f4:	f06f 0313 	mvn.w	r3, #19
    b9f8:	e065      	b.n	bac6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b9fa:	697b      	ldr	r3, [r7, #20]
    b9fc:	7cdb      	ldrb	r3, [r3, #19]
    b9fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba02:	b2db      	uxtb	r3, r3
    ba04:	011b      	lsls	r3, r3, #4
    ba06:	b2db      	uxtb	r3, r3
    ba08:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ba0c:	b2da      	uxtb	r2, r3
    ba0e:	7cfb      	ldrb	r3, [r7, #19]
    ba10:	4313      	orrs	r3, r2
    ba12:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ba14:	7cfa      	ldrb	r2, [r7, #19]
    ba16:	7efb      	ldrb	r3, [r7, #27]
    ba18:	4619      	mov	r1, r3
    ba1a:	69f8      	ldr	r0, [r7, #28]
    ba1c:	4b2f      	ldr	r3, [pc, #188]	; (badc <_usb_d_dev_ep_enable+0x200>)
    ba1e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    ba20:	68fb      	ldr	r3, [r7, #12]
    ba22:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ba26:	697b      	ldr	r3, [r7, #20]
    ba28:	8a1b      	ldrh	r3, [r3, #16]
    ba2a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ba2e:	697b      	ldr	r3, [r7, #20]
    ba30:	8a1b      	ldrh	r3, [r3, #16]
    ba32:	4618      	mov	r0, r3
    ba34:	4b2b      	ldr	r3, [pc, #172]	; (bae4 <_usb_d_dev_ep_enable+0x208>)
    ba36:	4798      	blx	r3
    ba38:	4603      	mov	r3, r0
    ba3a:	071b      	lsls	r3, r3, #28
    ba3c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ba40:	432b      	orrs	r3, r5
    ba42:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ba44:	7efb      	ldrb	r3, [r7, #27]
    ba46:	2200      	movs	r2, #0
    ba48:	2101      	movs	r1, #1
    ba4a:	4618      	mov	r0, r3
    ba4c:	4b27      	ldr	r3, [pc, #156]	; (baec <_usb_d_dev_ep_enable+0x210>)
    ba4e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ba50:	7efb      	ldrb	r3, [r7, #27]
    ba52:	2101      	movs	r1, #1
    ba54:	4618      	mov	r0, r3
    ba56:	4b26      	ldr	r3, [pc, #152]	; (baf0 <_usb_d_dev_ep_enable+0x214>)
    ba58:	4798      	blx	r3
    ba5a:	e033      	b.n	bac4 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    ba5c:	7cfb      	ldrb	r3, [r7, #19]
    ba5e:	f003 0307 	and.w	r3, r3, #7
    ba62:	2b00      	cmp	r3, #0
    ba64:	d002      	beq.n	ba6c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    ba66:	f06f 0313 	mvn.w	r3, #19
    ba6a:	e02c      	b.n	bac6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    ba6c:	697b      	ldr	r3, [r7, #20]
    ba6e:	7cdb      	ldrb	r3, [r3, #19]
    ba70:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba74:	b2db      	uxtb	r3, r3
    ba76:	461a      	mov	r2, r3
    ba78:	7cfb      	ldrb	r3, [r7, #19]
    ba7a:	4313      	orrs	r3, r2
    ba7c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ba7e:	7cfa      	ldrb	r2, [r7, #19]
    ba80:	7efb      	ldrb	r3, [r7, #27]
    ba82:	4619      	mov	r1, r3
    ba84:	69f8      	ldr	r0, [r7, #28]
    ba86:	4b15      	ldr	r3, [pc, #84]	; (badc <_usb_d_dev_ep_enable+0x200>)
    ba88:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ba8a:	697b      	ldr	r3, [r7, #20]
    ba8c:	8a1b      	ldrh	r3, [r3, #16]
    ba8e:	039b      	lsls	r3, r3, #14
    ba90:	4c13      	ldr	r4, [pc, #76]	; (bae0 <_usb_d_dev_ep_enable+0x204>)
    ba92:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ba94:	697b      	ldr	r3, [r7, #20]
    ba96:	8a1b      	ldrh	r3, [r3, #16]
    ba98:	4618      	mov	r0, r3
    ba9a:	4b12      	ldr	r3, [pc, #72]	; (bae4 <_usb_d_dev_ep_enable+0x208>)
    ba9c:	4798      	blx	r3
    ba9e:	4603      	mov	r3, r0
    baa0:	071b      	lsls	r3, r3, #28
    baa2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    baa6:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    baaa:	68fb      	ldr	r3, [r7, #12]
    baac:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    baae:	7efb      	ldrb	r3, [r7, #27]
    bab0:	2200      	movs	r2, #0
    bab2:	2100      	movs	r1, #0
    bab4:	4618      	mov	r0, r3
    bab6:	4b0c      	ldr	r3, [pc, #48]	; (bae8 <_usb_d_dev_ep_enable+0x20c>)
    bab8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    baba:	7efb      	ldrb	r3, [r7, #27]
    babc:	2100      	movs	r1, #0
    babe:	4618      	mov	r0, r3
    bac0:	4b0b      	ldr	r3, [pc, #44]	; (baf0 <_usb_d_dev_ep_enable+0x214>)
    bac2:	4798      	blx	r3
	}

	return USB_OK;
    bac4:	2300      	movs	r3, #0
}
    bac6:	4618      	mov	r0, r3
    bac8:	3720      	adds	r7, #32
    baca:	46bd      	mov	sp, r7
    bacc:	bdb0      	pop	{r4, r5, r7, pc}
    bace:	bf00      	nop
    bad0:	0000a6f5 	.word	0x0000a6f5
    bad4:	00009d7b 	.word	0x00009d7b
    bad8:	20001fe4 	.word	0x20001fe4
    badc:	00009d51 	.word	0x00009d51
    bae0:	0fffc000 	.word	0x0fffc000
    bae4:	0000a691 	.word	0x0000a691
    bae8:	0000a639 	.word	0x0000a639
    baec:	0000a5e1 	.word	0x0000a5e1
    baf0:	0000a5a9 	.word	0x0000a5a9
    baf4:	0000b64d 	.word	0x0000b64d

0000baf8 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    baf8:	b580      	push	{r7, lr}
    bafa:	b084      	sub	sp, #16
    bafc:	af00      	add	r7, sp, #0
    bafe:	6078      	str	r0, [r7, #4]
    bb00:	460b      	mov	r3, r1
    bb02:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bb04:	687b      	ldr	r3, [r7, #4]
    bb06:	7c9b      	ldrb	r3, [r3, #18]
    bb08:	f003 030f 	and.w	r3, r3, #15
    bb0c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    bb0e:	78fa      	ldrb	r2, [r7, #3]
    bb10:	7bfb      	ldrb	r3, [r7, #15]
    bb12:	4611      	mov	r1, r2
    bb14:	4618      	mov	r0, r3
    bb16:	4b03      	ldr	r3, [pc, #12]	; (bb24 <_usb_d_dev_ep_stall_get+0x2c>)
    bb18:	4798      	blx	r3
    bb1a:	4603      	mov	r3, r0
}
    bb1c:	4618      	mov	r0, r3
    bb1e:	3710      	adds	r7, #16
    bb20:	46bd      	mov	sp, r7
    bb22:	bd80      	pop	{r7, pc}
    bb24:	0000a1e9 	.word	0x0000a1e9

0000bb28 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    bb28:	b580      	push	{r7, lr}
    bb2a:	b084      	sub	sp, #16
    bb2c:	af00      	add	r7, sp, #0
    bb2e:	6078      	str	r0, [r7, #4]
    bb30:	460b      	mov	r3, r1
    bb32:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bb34:	687b      	ldr	r3, [r7, #4]
    bb36:	7c9b      	ldrb	r3, [r3, #18]
    bb38:	f003 030f 	and.w	r3, r3, #15
    bb3c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    bb3e:	78f9      	ldrb	r1, [r7, #3]
    bb40:	7bfb      	ldrb	r3, [r7, #15]
    bb42:	2201      	movs	r2, #1
    bb44:	4618      	mov	r0, r3
    bb46:	4b0a      	ldr	r3, [pc, #40]	; (bb70 <_usb_d_dev_ep_stall_set+0x48>)
    bb48:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    bb4a:	78fb      	ldrb	r3, [r7, #3]
    bb4c:	2220      	movs	r2, #32
    bb4e:	409a      	lsls	r2, r3
    bb50:	7bfb      	ldrb	r3, [r7, #15]
    bb52:	4611      	mov	r1, r2
    bb54:	4618      	mov	r0, r3
    bb56:	4b07      	ldr	r3, [pc, #28]	; (bb74 <_usb_d_dev_ep_stall_set+0x4c>)
    bb58:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    bb5a:	687a      	ldr	r2, [r7, #4]
    bb5c:	7cd3      	ldrb	r3, [r2, #19]
    bb5e:	f043 0308 	orr.w	r3, r3, #8
    bb62:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    bb64:	2300      	movs	r3, #0
}
    bb66:	4618      	mov	r0, r3
    bb68:	3710      	adds	r7, #16
    bb6a:	46bd      	mov	sp, r7
    bb6c:	bd80      	pop	{r7, pc}
    bb6e:	bf00      	nop
    bb70:	0000a191 	.word	0x0000a191
    bb74:	0000a111 	.word	0x0000a111

0000bb78 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    bb78:	b580      	push	{r7, lr}
    bb7a:	b084      	sub	sp, #16
    bb7c:	af00      	add	r7, sp, #0
    bb7e:	6078      	str	r0, [r7, #4]
    bb80:	460b      	mov	r3, r1
    bb82:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    bb84:	687b      	ldr	r3, [r7, #4]
    bb86:	7c9b      	ldrb	r3, [r3, #18]
    bb88:	f003 030f 	and.w	r3, r3, #15
    bb8c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    bb8e:	78fa      	ldrb	r2, [r7, #3]
    bb90:	7bfb      	ldrb	r3, [r7, #15]
    bb92:	4611      	mov	r1, r2
    bb94:	4618      	mov	r0, r3
    bb96:	4b28      	ldr	r3, [pc, #160]	; (bc38 <_usb_d_dev_ep_stall_clr+0xc0>)
    bb98:	4798      	blx	r3
    bb9a:	4603      	mov	r3, r0
    bb9c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    bb9e:	7bbb      	ldrb	r3, [r7, #14]
    bba0:	f083 0301 	eor.w	r3, r3, #1
    bba4:	b2db      	uxtb	r3, r3
    bba6:	2b00      	cmp	r3, #0
    bba8:	d001      	beq.n	bbae <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    bbaa:	2300      	movs	r3, #0
    bbac:	e040      	b.n	bc30 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    bbae:	78f9      	ldrb	r1, [r7, #3]
    bbb0:	7bfb      	ldrb	r3, [r7, #15]
    bbb2:	2200      	movs	r2, #0
    bbb4:	4618      	mov	r0, r3
    bbb6:	4b21      	ldr	r3, [pc, #132]	; (bc3c <_usb_d_dev_ep_stall_clr+0xc4>)
    bbb8:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    bbba:	78fb      	ldrb	r3, [r7, #3]
    bbbc:	2220      	movs	r2, #32
    bbbe:	409a      	lsls	r2, r3
    bbc0:	7bfb      	ldrb	r3, [r7, #15]
    bbc2:	4611      	mov	r1, r2
    bbc4:	4618      	mov	r0, r3
    bbc6:	4b1e      	ldr	r3, [pc, #120]	; (bc40 <_usb_d_dev_ep_stall_clr+0xc8>)
    bbc8:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    bbca:	78fa      	ldrb	r2, [r7, #3]
    bbcc:	7bfb      	ldrb	r3, [r7, #15]
    bbce:	4611      	mov	r1, r2
    bbd0:	4618      	mov	r0, r3
    bbd2:	4b1c      	ldr	r3, [pc, #112]	; (bc44 <_usb_d_dev_ep_stall_clr+0xcc>)
    bbd4:	4798      	blx	r3
    bbd6:	4603      	mov	r3, r0
    bbd8:	2b00      	cmp	r3, #0
    bbda:	d00b      	beq.n	bbf4 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    bbdc:	78fa      	ldrb	r2, [r7, #3]
    bbde:	7bfb      	ldrb	r3, [r7, #15]
    bbe0:	4611      	mov	r1, r2
    bbe2:	4618      	mov	r0, r3
    bbe4:	4b18      	ldr	r3, [pc, #96]	; (bc48 <_usb_d_dev_ep_stall_clr+0xd0>)
    bbe6:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    bbe8:	78f9      	ldrb	r1, [r7, #3]
    bbea:	7bfb      	ldrb	r3, [r7, #15]
    bbec:	2200      	movs	r2, #0
    bbee:	4618      	mov	r0, r3
    bbf0:	4b16      	ldr	r3, [pc, #88]	; (bc4c <_usb_d_dev_ep_stall_clr+0xd4>)
    bbf2:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    bbf4:	687b      	ldr	r3, [r7, #4]
    bbf6:	7cdb      	ldrb	r3, [r3, #19]
    bbf8:	f003 0307 	and.w	r3, r3, #7
    bbfc:	b2db      	uxtb	r3, r3
    bbfe:	2b01      	cmp	r3, #1
    bc00:	d110      	bne.n	bc24 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    bc02:	7bfb      	ldrb	r3, [r7, #15]
    bc04:	4619      	mov	r1, r3
    bc06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bc0a:	4b11      	ldr	r3, [pc, #68]	; (bc50 <_usb_d_dev_ep_stall_clr+0xd8>)
    bc0c:	4798      	blx	r3
    bc0e:	4603      	mov	r3, r0
    bc10:	f003 0330 	and.w	r3, r3, #48	; 0x30
    bc14:	2b00      	cmp	r3, #0
    bc16:	d10a      	bne.n	bc2e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    bc18:	687a      	ldr	r2, [r7, #4]
    bc1a:	7cd3      	ldrb	r3, [r2, #19]
    bc1c:	f36f 03c3 	bfc	r3, #3, #1
    bc20:	74d3      	strb	r3, [r2, #19]
    bc22:	e004      	b.n	bc2e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    bc24:	687a      	ldr	r2, [r7, #4]
    bc26:	7cd3      	ldrb	r3, [r2, #19]
    bc28:	f36f 03c3 	bfc	r3, #3, #1
    bc2c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    bc2e:	2300      	movs	r3, #0
}
    bc30:	4618      	mov	r0, r3
    bc32:	3710      	adds	r7, #16
    bc34:	46bd      	mov	sp, r7
    bc36:	bd80      	pop	{r7, pc}
    bc38:	0000a1e9 	.word	0x0000a1e9
    bc3c:	0000a191 	.word	0x0000a191
    bc40:	0000a139 	.word	0x0000a139
    bc44:	0000a22d 	.word	0x0000a22d
    bc48:	0000a271 	.word	0x0000a271
    bc4c:	0000a35d 	.word	0x0000a35d
    bc50:	00009c19 	.word	0x00009c19

0000bc54 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    bc54:	b580      	push	{r7, lr}
    bc56:	b086      	sub	sp, #24
    bc58:	af00      	add	r7, sp, #0
    bc5a:	4603      	mov	r3, r0
    bc5c:	460a      	mov	r2, r1
    bc5e:	71fb      	strb	r3, [r7, #7]
    bc60:	4613      	mov	r3, r2
    bc62:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    bc64:	79fb      	ldrb	r3, [r7, #7]
    bc66:	f003 030f 	and.w	r3, r3, #15
    bc6a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    bc6c:	79fb      	ldrb	r3, [r7, #7]
    bc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc72:	2b00      	cmp	r3, #0
    bc74:	bf14      	ite	ne
    bc76:	2301      	movne	r3, #1
    bc78:	2300      	moveq	r3, #0
    bc7a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bc7c:	7cba      	ldrb	r2, [r7, #18]
    bc7e:	7cfb      	ldrb	r3, [r7, #19]
    bc80:	4611      	mov	r1, r2
    bc82:	4618      	mov	r0, r3
    bc84:	4b13      	ldr	r3, [pc, #76]	; (bcd4 <_usb_d_dev_ep_stall+0x80>)
    bc86:	4798      	blx	r3
    bc88:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    bc8a:	7cfb      	ldrb	r3, [r7, #19]
    bc8c:	2b04      	cmp	r3, #4
    bc8e:	d902      	bls.n	bc96 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    bc90:	f06f 0311 	mvn.w	r3, #17
    bc94:	e01a      	b.n	bccc <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    bc96:	79bb      	ldrb	r3, [r7, #6]
    bc98:	2b01      	cmp	r3, #1
    bc9a:	d106      	bne.n	bcaa <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    bc9c:	7cbb      	ldrb	r3, [r7, #18]
    bc9e:	4619      	mov	r1, r3
    bca0:	68f8      	ldr	r0, [r7, #12]
    bca2:	4b0d      	ldr	r3, [pc, #52]	; (bcd8 <_usb_d_dev_ep_stall+0x84>)
    bca4:	4798      	blx	r3
    bca6:	6178      	str	r0, [r7, #20]
    bca8:	e00f      	b.n	bcca <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    bcaa:	79bb      	ldrb	r3, [r7, #6]
    bcac:	2b00      	cmp	r3, #0
    bcae:	d106      	bne.n	bcbe <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    bcb0:	7cbb      	ldrb	r3, [r7, #18]
    bcb2:	4619      	mov	r1, r3
    bcb4:	68f8      	ldr	r0, [r7, #12]
    bcb6:	4b09      	ldr	r3, [pc, #36]	; (bcdc <_usb_d_dev_ep_stall+0x88>)
    bcb8:	4798      	blx	r3
    bcba:	6178      	str	r0, [r7, #20]
    bcbc:	e005      	b.n	bcca <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    bcbe:	7cbb      	ldrb	r3, [r7, #18]
    bcc0:	4619      	mov	r1, r3
    bcc2:	68f8      	ldr	r0, [r7, #12]
    bcc4:	4b06      	ldr	r3, [pc, #24]	; (bce0 <_usb_d_dev_ep_stall+0x8c>)
    bcc6:	4798      	blx	r3
    bcc8:	6178      	str	r0, [r7, #20]
	}
	return rc;
    bcca:	697b      	ldr	r3, [r7, #20]
}
    bccc:	4618      	mov	r0, r3
    bcce:	3718      	adds	r7, #24
    bcd0:	46bd      	mov	sp, r7
    bcd2:	bd80      	pop	{r7, pc}
    bcd4:	0000a6f5 	.word	0x0000a6f5
    bcd8:	0000bb29 	.word	0x0000bb29
    bcdc:	0000bb79 	.word	0x0000bb79
    bce0:	0000baf9 	.word	0x0000baf9

0000bce4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    bce4:	b580      	push	{r7, lr}
    bce6:	b082      	sub	sp, #8
    bce8:	af00      	add	r7, sp, #0
    bcea:	6078      	str	r0, [r7, #4]
    bcec:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    bcee:	687b      	ldr	r3, [r7, #4]
    bcf0:	7c9b      	ldrb	r3, [r3, #18]
    bcf2:	2bff      	cmp	r3, #255	; 0xff
    bcf4:	d014      	beq.n	bd20 <_usb_d_dev_trans_done+0x3c>
    bcf6:	687b      	ldr	r3, [r7, #4]
    bcf8:	7cdb      	ldrb	r3, [r3, #19]
    bcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bcfe:	b2db      	uxtb	r3, r3
    bd00:	2b00      	cmp	r3, #0
    bd02:	d00d      	beq.n	bd20 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    bd04:	687a      	ldr	r2, [r7, #4]
    bd06:	7cd3      	ldrb	r3, [r2, #19]
    bd08:	f36f 1386 	bfc	r3, #6, #1
    bd0c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    bd0e:	4b06      	ldr	r3, [pc, #24]	; (bd28 <_usb_d_dev_trans_done+0x44>)
    bd10:	691b      	ldr	r3, [r3, #16]
    bd12:	687a      	ldr	r2, [r7, #4]
    bd14:	7c90      	ldrb	r0, [r2, #18]
    bd16:	687a      	ldr	r2, [r7, #4]
    bd18:	6892      	ldr	r2, [r2, #8]
    bd1a:	6839      	ldr	r1, [r7, #0]
    bd1c:	4798      	blx	r3
    bd1e:	e000      	b.n	bd22 <_usb_d_dev_trans_done+0x3e>
		return;
    bd20:	bf00      	nop
}
    bd22:	3708      	adds	r7, #8
    bd24:	46bd      	mov	sp, r7
    bd26:	bd80      	pop	{r7, pc}
    bd28:	20001f1c 	.word	0x20001f1c

0000bd2c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    bd2c:	b580      	push	{r7, lr}
    bd2e:	b086      	sub	sp, #24
    bd30:	af00      	add	r7, sp, #0
    bd32:	60f8      	str	r0, [r7, #12]
    bd34:	460b      	mov	r3, r1
    bd36:	607a      	str	r2, [r7, #4]
    bd38:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bd3a:	68fb      	ldr	r3, [r7, #12]
    bd3c:	7c9b      	ldrb	r3, [r3, #18]
    bd3e:	f003 030f 	and.w	r3, r3, #15
    bd42:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    bd44:	4b1f      	ldr	r3, [pc, #124]	; (bdc4 <_usb_d_dev_trans_stop+0x98>)
    bd46:	881b      	ldrh	r3, [r3, #0]
    bd48:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    bd4a:	68fb      	ldr	r3, [r7, #12]
    bd4c:	7c9b      	ldrb	r3, [r3, #18]
    bd4e:	2bff      	cmp	r3, #255	; 0xff
    bd50:	d033      	beq.n	bdba <_usb_d_dev_trans_stop+0x8e>
    bd52:	68fb      	ldr	r3, [r7, #12]
    bd54:	7cdb      	ldrb	r3, [r3, #19]
    bd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bd5a:	b2db      	uxtb	r3, r3
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	d02c      	beq.n	bdba <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    bd60:	7afb      	ldrb	r3, [r7, #11]
    bd62:	2b00      	cmp	r3, #0
    bd64:	d006      	beq.n	bd74 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    bd66:	7dfb      	ldrb	r3, [r7, #23]
    bd68:	2200      	movs	r2, #0
    bd6a:	2101      	movs	r1, #1
    bd6c:	4618      	mov	r0, r3
    bd6e:	4b16      	ldr	r3, [pc, #88]	; (bdc8 <_usb_d_dev_trans_stop+0x9c>)
    bd70:	4798      	blx	r3
    bd72:	e005      	b.n	bd80 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    bd74:	7dfb      	ldrb	r3, [r7, #23]
    bd76:	2200      	movs	r2, #0
    bd78:	2100      	movs	r1, #0
    bd7a:	4618      	mov	r0, r3
    bd7c:	4b13      	ldr	r3, [pc, #76]	; (bdcc <_usb_d_dev_trans_stop+0xa0>)
    bd7e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    bd80:	7afb      	ldrb	r3, [r7, #11]
    bd82:	f107 0218 	add.w	r2, r7, #24
    bd86:	4413      	add	r3, r2
    bd88:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    bd8c:	461a      	mov	r2, r3
    bd8e:	7dfb      	ldrb	r3, [r7, #23]
    bd90:	4611      	mov	r1, r2
    bd92:	4618      	mov	r0, r3
    bd94:	4b0e      	ldr	r3, [pc, #56]	; (bdd0 <_usb_d_dev_trans_stop+0xa4>)
    bd96:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    bd98:	7afb      	ldrb	r3, [r7, #11]
    bd9a:	f107 0218 	add.w	r2, r7, #24
    bd9e:	4413      	add	r3, r2
    bda0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    bda4:	461a      	mov	r2, r3
    bda6:	7dfb      	ldrb	r3, [r7, #23]
    bda8:	4611      	mov	r1, r2
    bdaa:	4618      	mov	r0, r3
    bdac:	4b09      	ldr	r3, [pc, #36]	; (bdd4 <_usb_d_dev_trans_stop+0xa8>)
    bdae:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    bdb0:	6879      	ldr	r1, [r7, #4]
    bdb2:	68f8      	ldr	r0, [r7, #12]
    bdb4:	4b08      	ldr	r3, [pc, #32]	; (bdd8 <_usb_d_dev_trans_stop+0xac>)
    bdb6:	4798      	blx	r3
    bdb8:	e000      	b.n	bdbc <_usb_d_dev_trans_stop+0x90>
		return;
    bdba:	bf00      	nop
}
    bdbc:	3718      	adds	r7, #24
    bdbe:	46bd      	mov	sp, r7
    bdc0:	bd80      	pop	{r7, pc}
    bdc2:	bf00      	nop
    bdc4:	0001166c 	.word	0x0001166c
    bdc8:	0000a5e1 	.word	0x0000a5e1
    bdcc:	0000a639 	.word	0x0000a639
    bdd0:	0000a0e9 	.word	0x0000a0e9
    bdd4:	0000a139 	.word	0x0000a139
    bdd8:	0000bce5 	.word	0x0000bce5

0000bddc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    bddc:	b580      	push	{r7, lr}
    bdde:	b086      	sub	sp, #24
    bde0:	af00      	add	r7, sp, #0
    bde2:	4603      	mov	r3, r0
    bde4:	6039      	str	r1, [r7, #0]
    bde6:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    bde8:	79fb      	ldrb	r3, [r7, #7]
    bdea:	f003 030f 	and.w	r3, r3, #15
    bdee:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    bdf0:	7dfb      	ldrb	r3, [r7, #23]
    bdf2:	015b      	lsls	r3, r3, #5
    bdf4:	4a1e      	ldr	r2, [pc, #120]	; (be70 <_usb_d_dev_ep_read_req+0x94>)
    bdf6:	4413      	add	r3, r2
    bdf8:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    bdfa:	693b      	ldr	r3, [r7, #16]
    bdfc:	681b      	ldr	r3, [r3, #0]
    bdfe:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    be00:	693b      	ldr	r3, [r7, #16]
    be02:	685b      	ldr	r3, [r3, #4]
    be04:	f3c3 030d 	ubfx	r3, r3, #0, #14
    be08:	b29b      	uxth	r3, r3
    be0a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    be0c:	7dfb      	ldrb	r3, [r7, #23]
    be0e:	2b04      	cmp	r3, #4
    be10:	d802      	bhi.n	be18 <_usb_d_dev_ep_read_req+0x3c>
    be12:	683b      	ldr	r3, [r7, #0]
    be14:	2b00      	cmp	r3, #0
    be16:	d102      	bne.n	be1e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    be18:	f06f 0311 	mvn.w	r3, #17
    be1c:	e023      	b.n	be66 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    be1e:	7dfb      	ldrb	r3, [r7, #23]
    be20:	4618      	mov	r0, r3
    be22:	4b14      	ldr	r3, [pc, #80]	; (be74 <_usb_d_dev_ep_read_req+0x98>)
    be24:	4798      	blx	r3
    be26:	4603      	mov	r3, r0
    be28:	f083 0301 	eor.w	r3, r3, #1
    be2c:	b2db      	uxtb	r3, r3
    be2e:	2b00      	cmp	r3, #0
    be30:	d002      	beq.n	be38 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    be32:	f06f 0312 	mvn.w	r3, #18
    be36:	e016      	b.n	be66 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    be38:	7dfb      	ldrb	r3, [r7, #23]
    be3a:	4618      	mov	r0, r3
    be3c:	4b0e      	ldr	r3, [pc, #56]	; (be78 <_usb_d_dev_ep_read_req+0x9c>)
    be3e:	4798      	blx	r3
    be40:	4603      	mov	r3, r0
    be42:	f083 0301 	eor.w	r3, r3, #1
    be46:	b2db      	uxtb	r3, r3
    be48:	2b00      	cmp	r3, #0
    be4a:	d001      	beq.n	be50 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    be4c:	2300      	movs	r3, #0
    be4e:	e00a      	b.n	be66 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    be50:	68fb      	ldr	r3, [r7, #12]
    be52:	2208      	movs	r2, #8
    be54:	4619      	mov	r1, r3
    be56:	6838      	ldr	r0, [r7, #0]
    be58:	4b08      	ldr	r3, [pc, #32]	; (be7c <_usb_d_dev_ep_read_req+0xa0>)
    be5a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    be5c:	7dfb      	ldrb	r3, [r7, #23]
    be5e:	4618      	mov	r0, r3
    be60:	4b07      	ldr	r3, [pc, #28]	; (be80 <_usb_d_dev_ep_read_req+0xa4>)
    be62:	4798      	blx	r3

	return bytes;
    be64:	897b      	ldrh	r3, [r7, #10]
}
    be66:	4618      	mov	r0, r3
    be68:	3718      	adds	r7, #24
    be6a:	46bd      	mov	sp, r7
    be6c:	bd80      	pop	{r7, pc}
    be6e:	bf00      	nop
    be70:	20001fe4 	.word	0x20001fe4
    be74:	0000a161 	.word	0x0000a161
    be78:	0000a30d 	.word	0x0000a30d
    be7c:	000101b9 	.word	0x000101b9
    be80:	0000a33d 	.word	0x0000a33d

0000be84 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    be84:	b580      	push	{r7, lr}
    be86:	b086      	sub	sp, #24
    be88:	af00      	add	r7, sp, #0
    be8a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    be8c:	687b      	ldr	r3, [r7, #4]
    be8e:	7a1b      	ldrb	r3, [r3, #8]
    be90:	f003 030f 	and.w	r3, r3, #15
    be94:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    be96:	687b      	ldr	r3, [r7, #4]
    be98:	7a1b      	ldrb	r3, [r3, #8]
    be9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    be9e:	2b00      	cmp	r3, #0
    bea0:	bf14      	ite	ne
    bea2:	2301      	movne	r3, #1
    bea4:	2300      	moveq	r3, #0
    bea6:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bea8:	7d7a      	ldrb	r2, [r7, #21]
    beaa:	7dbb      	ldrb	r3, [r7, #22]
    beac:	4611      	mov	r1, r2
    beae:	4618      	mov	r0, r3
    beb0:	4b5f      	ldr	r3, [pc, #380]	; (c030 <_usb_d_dev_ep_trans+0x1ac>)
    beb2:	4798      	blx	r3
    beb4:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    beb6:	693b      	ldr	r3, [r7, #16]
    beb8:	8a1b      	ldrh	r3, [r3, #16]
    beba:	f240 32ff 	movw	r2, #1023	; 0x3ff
    bebe:	4293      	cmp	r3, r2
    bec0:	d004      	beq.n	becc <_usb_d_dev_ep_trans+0x48>
    bec2:	693b      	ldr	r3, [r7, #16]
    bec4:	8a1b      	ldrh	r3, [r3, #16]
    bec6:	3b01      	subs	r3, #1
    bec8:	b29b      	uxth	r3, r3
    beca:	e001      	b.n	bed0 <_usb_d_dev_ep_trans+0x4c>
    becc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    bed0:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    bed2:	687b      	ldr	r3, [r7, #4]
    bed4:	685a      	ldr	r2, [r3, #4]
    bed6:	89fb      	ldrh	r3, [r7, #14]
    bed8:	4013      	ands	r3, r2
    beda:	2b00      	cmp	r3, #0
    bedc:	bf14      	ite	ne
    bede:	2301      	movne	r3, #1
    bee0:	2300      	moveq	r3, #0
    bee2:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    bee4:	2300      	movs	r3, #0
    bee6:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    bee8:	7dbb      	ldrb	r3, [r7, #22]
    beea:	2b04      	cmp	r3, #4
    beec:	d902      	bls.n	bef4 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    beee:	f06f 0311 	mvn.w	r3, #17
    bef2:	e098      	b.n	c026 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    bef4:	687b      	ldr	r3, [r7, #4]
    bef6:	681b      	ldr	r3, [r3, #0]
    bef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    befc:	d31a      	bcc.n	bf34 <_usb_d_dev_ep_trans+0xb0>
    befe:	687b      	ldr	r3, [r7, #4]
    bf00:	681b      	ldr	r3, [r3, #0]
    bf02:	461a      	mov	r2, r3
    bf04:	687b      	ldr	r3, [r7, #4]
    bf06:	685b      	ldr	r3, [r3, #4]
    bf08:	4413      	add	r3, r2
    bf0a:	4a4a      	ldr	r2, [pc, #296]	; (c034 <_usb_d_dev_ep_trans+0x1b0>)
    bf0c:	4293      	cmp	r3, r2
    bf0e:	d811      	bhi.n	bf34 <_usb_d_dev_ep_trans+0xb0>
    bf10:	687b      	ldr	r3, [r7, #4]
    bf12:	681b      	ldr	r3, [r3, #0]
    bf14:	f003 0303 	and.w	r3, r3, #3
    bf18:	2b00      	cmp	r3, #0
    bf1a:	d10b      	bne.n	bf34 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    bf1c:	7d7b      	ldrb	r3, [r7, #21]
    bf1e:	f083 0301 	eor.w	r3, r3, #1
    bf22:	b2db      	uxtb	r3, r3
    bf24:	2b00      	cmp	r3, #0
    bf26:	d00e      	beq.n	bf46 <_usb_d_dev_ep_trans+0xc2>
    bf28:	687b      	ldr	r3, [r7, #4]
    bf2a:	685b      	ldr	r3, [r3, #4]
    bf2c:	693a      	ldr	r2, [r7, #16]
    bf2e:	8a12      	ldrh	r2, [r2, #16]
    bf30:	4293      	cmp	r3, r2
    bf32:	d208      	bcs.n	bf46 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    bf34:	693b      	ldr	r3, [r7, #16]
    bf36:	68db      	ldr	r3, [r3, #12]
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d102      	bne.n	bf42 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    bf3c:	f06f 0312 	mvn.w	r3, #18
    bf40:	e071      	b.n	c026 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    bf42:	2301      	movs	r3, #1
    bf44:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    bf46:	7d7b      	ldrb	r3, [r7, #21]
    bf48:	f083 0301 	eor.w	r3, r3, #1
    bf4c:	b2db      	uxtb	r3, r3
    bf4e:	2b00      	cmp	r3, #0
    bf50:	d009      	beq.n	bf66 <_usb_d_dev_ep_trans+0xe2>
    bf52:	7b7b      	ldrb	r3, [r7, #13]
    bf54:	2b00      	cmp	r3, #0
    bf56:	d006      	beq.n	bf66 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    bf58:	693b      	ldr	r3, [r7, #16]
    bf5a:	68db      	ldr	r3, [r3, #12]
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d102      	bne.n	bf66 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    bf60:	f06f 0311 	mvn.w	r3, #17
    bf64:	e05f      	b.n	c026 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    bf66:	693b      	ldr	r3, [r7, #16]
    bf68:	7cdb      	ldrb	r3, [r3, #19]
    bf6a:	f003 0308 	and.w	r3, r3, #8
    bf6e:	b2db      	uxtb	r3, r3
    bf70:	2b00      	cmp	r3, #0
    bf72:	d001      	beq.n	bf78 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    bf74:	2302      	movs	r3, #2
    bf76:	e056      	b.n	c026 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    bf78:	f107 0308 	add.w	r3, r7, #8
    bf7c:	4618      	mov	r0, r3
    bf7e:	4b2e      	ldr	r3, [pc, #184]	; (c038 <_usb_d_dev_ep_trans+0x1b4>)
    bf80:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    bf82:	693b      	ldr	r3, [r7, #16]
    bf84:	7cdb      	ldrb	r3, [r3, #19]
    bf86:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bf8a:	b2db      	uxtb	r3, r3
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	d006      	beq.n	bf9e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    bf90:	f107 0308 	add.w	r3, r7, #8
    bf94:	4618      	mov	r0, r3
    bf96:	4b29      	ldr	r3, [pc, #164]	; (c03c <_usb_d_dev_ep_trans+0x1b8>)
    bf98:	4798      	blx	r3
		return USB_BUSY;
    bf9a:	2301      	movs	r3, #1
    bf9c:	e043      	b.n	c026 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    bf9e:	693a      	ldr	r2, [r7, #16]
    bfa0:	7cd3      	ldrb	r3, [r2, #19]
    bfa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bfa6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    bfa8:	f107 0308 	add.w	r3, r7, #8
    bfac:	4618      	mov	r0, r3
    bfae:	4b23      	ldr	r3, [pc, #140]	; (c03c <_usb_d_dev_ep_trans+0x1b8>)
    bfb0:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    bfb2:	687b      	ldr	r3, [r7, #4]
    bfb4:	681a      	ldr	r2, [r3, #0]
    bfb6:	693b      	ldr	r3, [r7, #16]
    bfb8:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    bfba:	687b      	ldr	r3, [r7, #4]
    bfbc:	685a      	ldr	r2, [r3, #4]
    bfbe:	693b      	ldr	r3, [r7, #16]
    bfc0:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    bfc2:	693b      	ldr	r3, [r7, #16]
    bfc4:	2200      	movs	r2, #0
    bfc6:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    bfc8:	693a      	ldr	r2, [r7, #16]
    bfca:	7cd3      	ldrb	r3, [r2, #19]
    bfcc:	7d79      	ldrb	r1, [r7, #21]
    bfce:	f361 13c7 	bfi	r3, r1, #7, #1
    bfd2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    bfd4:	693a      	ldr	r2, [r7, #16]
    bfd6:	7cd3      	ldrb	r3, [r2, #19]
    bfd8:	7df9      	ldrb	r1, [r7, #23]
    bfda:	f361 1345 	bfi	r3, r1, #5, #1
    bfde:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    bfe0:	687b      	ldr	r3, [r7, #4]
    bfe2:	7a5b      	ldrb	r3, [r3, #9]
    bfe4:	2b00      	cmp	r3, #0
    bfe6:	d007      	beq.n	bff8 <_usb_d_dev_ep_trans+0x174>
    bfe8:	7b7b      	ldrb	r3, [r7, #13]
    bfea:	f083 0301 	eor.w	r3, r3, #1
    bfee:	b2db      	uxtb	r3, r3
    bff0:	2b00      	cmp	r3, #0
    bff2:	d001      	beq.n	bff8 <_usb_d_dev_ep_trans+0x174>
    bff4:	2301      	movs	r3, #1
    bff6:	e000      	b.n	bffa <_usb_d_dev_ep_trans+0x176>
    bff8:	2300      	movs	r3, #0
    bffa:	b2db      	uxtb	r3, r3
    bffc:	f003 0301 	and.w	r3, r3, #1
    c000:	b2d9      	uxtb	r1, r3
    c002:	693a      	ldr	r2, [r7, #16]
    c004:	7cd3      	ldrb	r3, [r2, #19]
    c006:	f361 1304 	bfi	r3, r1, #4, #1
    c00a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    c00c:	7d7b      	ldrb	r3, [r7, #21]
    c00e:	2b00      	cmp	r3, #0
    c010:	d004      	beq.n	c01c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    c012:	2100      	movs	r1, #0
    c014:	6938      	ldr	r0, [r7, #16]
    c016:	4b0a      	ldr	r3, [pc, #40]	; (c040 <_usb_d_dev_ep_trans+0x1bc>)
    c018:	4798      	blx	r3
    c01a:	e003      	b.n	c024 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    c01c:	2100      	movs	r1, #0
    c01e:	6938      	ldr	r0, [r7, #16]
    c020:	4b08      	ldr	r3, [pc, #32]	; (c044 <_usb_d_dev_ep_trans+0x1c0>)
    c022:	4798      	blx	r3
	}

	return ERR_NONE;
    c024:	2300      	movs	r3, #0
}
    c026:	4618      	mov	r0, r3
    c028:	3718      	adds	r7, #24
    c02a:	46bd      	mov	sp, r7
    c02c:	bd80      	pop	{r7, pc}
    c02e:	bf00      	nop
    c030:	0000a6f5 	.word	0x0000a6f5
    c034:	20041fff 	.word	0x20041fff
    c038:	000031b5 	.word	0x000031b5
    c03c:	000031db 	.word	0x000031db
    c040:	0000a9bd 	.word	0x0000a9bd
    c044:	0000abd5 	.word	0x0000abd5

0000c048 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    c048:	b580      	push	{r7, lr}
    c04a:	b084      	sub	sp, #16
    c04c:	af00      	add	r7, sp, #0
    c04e:	4603      	mov	r3, r0
    c050:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    c052:	79fb      	ldrb	r3, [r7, #7]
    c054:	f003 030f 	and.w	r3, r3, #15
    c058:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    c05a:	79fb      	ldrb	r3, [r7, #7]
    c05c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c060:	2b00      	cmp	r3, #0
    c062:	bf14      	ite	ne
    c064:	2301      	movne	r3, #1
    c066:	2300      	moveq	r3, #0
    c068:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c06a:	7bba      	ldrb	r2, [r7, #14]
    c06c:	7bfb      	ldrb	r3, [r7, #15]
    c06e:	4611      	mov	r1, r2
    c070:	4618      	mov	r0, r3
    c072:	4b08      	ldr	r3, [pc, #32]	; (c094 <_usb_d_dev_ep_abort+0x4c>)
    c074:	4798      	blx	r3
    c076:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    c078:	7bfb      	ldrb	r3, [r7, #15]
    c07a:	2b04      	cmp	r3, #4
    c07c:	d806      	bhi.n	c08c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    c07e:	7bbb      	ldrb	r3, [r7, #14]
    c080:	2202      	movs	r2, #2
    c082:	4619      	mov	r1, r3
    c084:	68b8      	ldr	r0, [r7, #8]
    c086:	4b04      	ldr	r3, [pc, #16]	; (c098 <_usb_d_dev_ep_abort+0x50>)
    c088:	4798      	blx	r3
    c08a:	e000      	b.n	c08e <_usb_d_dev_ep_abort+0x46>
		return;
    c08c:	bf00      	nop
}
    c08e:	3710      	adds	r7, #16
    c090:	46bd      	mov	sp, r7
    c092:	bd80      	pop	{r7, pc}
    c094:	0000a6f5 	.word	0x0000a6f5
    c098:	0000bd2d 	.word	0x0000bd2d

0000c09c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    c09c:	b480      	push	{r7}
    c09e:	b085      	sub	sp, #20
    c0a0:	af00      	add	r7, sp, #0
    c0a2:	4603      	mov	r3, r0
    c0a4:	6039      	str	r1, [r7, #0]
    c0a6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c0a8:	683b      	ldr	r3, [r7, #0]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d001      	beq.n	c0b2 <_usb_d_dev_register_callback+0x16>
    c0ae:	683b      	ldr	r3, [r7, #0]
    c0b0:	e000      	b.n	c0b4 <_usb_d_dev_register_callback+0x18>
    c0b2:	4b0a      	ldr	r3, [pc, #40]	; (c0dc <_usb_d_dev_register_callback+0x40>)
    c0b4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    c0b6:	79fb      	ldrb	r3, [r7, #7]
    c0b8:	2b01      	cmp	r3, #1
    c0ba:	d103      	bne.n	c0c4 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c0bc:	4a08      	ldr	r2, [pc, #32]	; (c0e0 <_usb_d_dev_register_callback+0x44>)
    c0be:	68fb      	ldr	r3, [r7, #12]
    c0c0:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    c0c2:	e005      	b.n	c0d0 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    c0c4:	79fb      	ldrb	r3, [r7, #7]
    c0c6:	2b00      	cmp	r3, #0
    c0c8:	d102      	bne.n	c0d0 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c0ca:	4a05      	ldr	r2, [pc, #20]	; (c0e0 <_usb_d_dev_register_callback+0x44>)
    c0cc:	68fb      	ldr	r3, [r7, #12]
    c0ce:	6013      	str	r3, [r2, #0]
}
    c0d0:	bf00      	nop
    c0d2:	3714      	adds	r7, #20
    c0d4:	46bd      	mov	sp, r7
    c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0da:	4770      	bx	lr
    c0dc:	00009f7d 	.word	0x00009f7d
    c0e0:	20001f1c 	.word	0x20001f1c

0000c0e4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    c0e4:	b480      	push	{r7}
    c0e6:	b085      	sub	sp, #20
    c0e8:	af00      	add	r7, sp, #0
    c0ea:	4603      	mov	r3, r0
    c0ec:	6039      	str	r1, [r7, #0]
    c0ee:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c0f0:	683b      	ldr	r3, [r7, #0]
    c0f2:	2b00      	cmp	r3, #0
    c0f4:	d001      	beq.n	c0fa <_usb_d_dev_register_ep_callback+0x16>
    c0f6:	683b      	ldr	r3, [r7, #0]
    c0f8:	e000      	b.n	c0fc <_usb_d_dev_register_ep_callback+0x18>
    c0fa:	4b0e      	ldr	r3, [pc, #56]	; (c134 <_usb_d_dev_register_ep_callback+0x50>)
    c0fc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    c0fe:	79fb      	ldrb	r3, [r7, #7]
    c100:	2b00      	cmp	r3, #0
    c102:	d103      	bne.n	c10c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    c104:	4a0c      	ldr	r2, [pc, #48]	; (c138 <_usb_d_dev_register_ep_callback+0x54>)
    c106:	68fb      	ldr	r3, [r7, #12]
    c108:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    c10a:	e00c      	b.n	c126 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    c10c:	79fb      	ldrb	r3, [r7, #7]
    c10e:	2b01      	cmp	r3, #1
    c110:	d103      	bne.n	c11a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    c112:	4a09      	ldr	r2, [pc, #36]	; (c138 <_usb_d_dev_register_ep_callback+0x54>)
    c114:	68fb      	ldr	r3, [r7, #12]
    c116:	60d3      	str	r3, [r2, #12]
}
    c118:	e005      	b.n	c126 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    c11a:	79fb      	ldrb	r3, [r7, #7]
    c11c:	2b02      	cmp	r3, #2
    c11e:	d102      	bne.n	c126 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    c120:	4a05      	ldr	r2, [pc, #20]	; (c138 <_usb_d_dev_register_ep_callback+0x54>)
    c122:	68fb      	ldr	r3, [r7, #12]
    c124:	6113      	str	r3, [r2, #16]
}
    c126:	bf00      	nop
    c128:	3714      	adds	r7, #20
    c12a:	46bd      	mov	sp, r7
    c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c130:	4770      	bx	lr
    c132:	bf00      	nop
    c134:	00009f7d 	.word	0x00009f7d
    c138:	20001f1c 	.word	0x20001f1c

0000c13c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    c13c:	b580      	push	{r7, lr}
    c13e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c140:	4b01      	ldr	r3, [pc, #4]	; (c148 <USB_0_Handler+0xc>)
    c142:	4798      	blx	r3
}
    c144:	bf00      	nop
    c146:	bd80      	pop	{r7, pc}
    c148:	0000b3ad 	.word	0x0000b3ad

0000c14c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    c14c:	b580      	push	{r7, lr}
    c14e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c150:	4b01      	ldr	r3, [pc, #4]	; (c158 <USB_1_Handler+0xc>)
    c152:	4798      	blx	r3
}
    c154:	bf00      	nop
    c156:	bd80      	pop	{r7, pc}
    c158:	0000b3ad 	.word	0x0000b3ad

0000c15c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    c15c:	b580      	push	{r7, lr}
    c15e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c160:	4b01      	ldr	r3, [pc, #4]	; (c168 <USB_2_Handler+0xc>)
    c162:	4798      	blx	r3
}
    c164:	bf00      	nop
    c166:	bd80      	pop	{r7, pc}
    c168:	0000b3ad 	.word	0x0000b3ad

0000c16c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    c16c:	b580      	push	{r7, lr}
    c16e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c170:	4b01      	ldr	r3, [pc, #4]	; (c178 <USB_3_Handler+0xc>)
    c172:	4798      	blx	r3
}
    c174:	bf00      	nop
    c176:	bd80      	pop	{r7, pc}
    c178:	0000b3ad 	.word	0x0000b3ad

0000c17c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    c17c:	b480      	push	{r7}
    c17e:	b083      	sub	sp, #12
    c180:	af00      	add	r7, sp, #0
    c182:	6078      	str	r0, [r7, #4]
    c184:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    c186:	bf00      	nop
    c188:	687b      	ldr	r3, [r7, #4]
    c18a:	689a      	ldr	r2, [r3, #8]
    c18c:	683b      	ldr	r3, [r7, #0]
    c18e:	4013      	ands	r3, r2
    c190:	2b00      	cmp	r3, #0
    c192:	d1f9      	bne.n	c188 <hri_wdt_wait_for_sync+0xc>
	};
}
    c194:	bf00      	nop
    c196:	370c      	adds	r7, #12
    c198:	46bd      	mov	sp, r7
    c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c19e:	4770      	bx	lr

0000c1a0 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b084      	sub	sp, #16
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c1a8:	210e      	movs	r1, #14
    c1aa:	6878      	ldr	r0, [r7, #4]
    c1ac:	4b0a      	ldr	r3, [pc, #40]	; (c1d8 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    c1ae:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c1b0:	687b      	ldr	r3, [r7, #4]
    c1b2:	781b      	ldrb	r3, [r3, #0]
    c1b4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    c1b6:	7bfb      	ldrb	r3, [r7, #15]
    c1b8:	085b      	lsrs	r3, r3, #1
    c1ba:	b2db      	uxtb	r3, r3
    c1bc:	f003 0301 	and.w	r3, r3, #1
    c1c0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c1c2:	7bfb      	ldrb	r3, [r7, #15]
    c1c4:	2b00      	cmp	r3, #0
    c1c6:	bf14      	ite	ne
    c1c8:	2301      	movne	r3, #1
    c1ca:	2300      	moveq	r3, #0
    c1cc:	b2db      	uxtb	r3, r3
}
    c1ce:	4618      	mov	r0, r3
    c1d0:	3710      	adds	r7, #16
    c1d2:	46bd      	mov	sp, r7
    c1d4:	bd80      	pop	{r7, pc}
    c1d6:	bf00      	nop
    c1d8:	0000c17d 	.word	0x0000c17d

0000c1dc <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	b082      	sub	sp, #8
    c1e0:	af00      	add	r7, sp, #0
    c1e2:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    c1e4:	687b      	ldr	r3, [r7, #4]
    c1e6:	781b      	ldrb	r3, [r3, #0]
    c1e8:	b2db      	uxtb	r3, r3
    c1ea:	f023 0304 	bic.w	r3, r3, #4
    c1ee:	b2da      	uxtb	r2, r3
    c1f0:	687b      	ldr	r3, [r7, #4]
    c1f2:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c1f4:	210e      	movs	r1, #14
    c1f6:	6878      	ldr	r0, [r7, #4]
    c1f8:	4b02      	ldr	r3, [pc, #8]	; (c204 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    c1fa:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    c1fc:	bf00      	nop
    c1fe:	3708      	adds	r7, #8
    c200:	46bd      	mov	sp, r7
    c202:	bd80      	pop	{r7, pc}
    c204:	0000c17d 	.word	0x0000c17d

0000c208 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    c208:	b580      	push	{r7, lr}
    c20a:	b084      	sub	sp, #16
    c20c:	af00      	add	r7, sp, #0
    c20e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c210:	210e      	movs	r1, #14
    c212:	6878      	ldr	r0, [r7, #4]
    c214:	4b08      	ldr	r3, [pc, #32]	; (c238 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    c216:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c218:	687b      	ldr	r3, [r7, #4]
    c21a:	781b      	ldrb	r3, [r3, #0]
    c21c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    c21e:	7bfb      	ldrb	r3, [r7, #15]
    c220:	09db      	lsrs	r3, r3, #7
    c222:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c224:	7bfb      	ldrb	r3, [r7, #15]
    c226:	2b00      	cmp	r3, #0
    c228:	bf14      	ite	ne
    c22a:	2301      	movne	r3, #1
    c22c:	2300      	moveq	r3, #0
    c22e:	b2db      	uxtb	r3, r3
}
    c230:	4618      	mov	r0, r3
    c232:	3710      	adds	r7, #16
    c234:	46bd      	mov	sp, r7
    c236:	bd80      	pop	{r7, pc}
    c238:	0000c17d 	.word	0x0000c17d

0000c23c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    c23c:	b480      	push	{r7}
    c23e:	b085      	sub	sp, #20
    c240:	af00      	add	r7, sp, #0
    c242:	6078      	str	r0, [r7, #4]
    c244:	460b      	mov	r3, r1
    c246:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    c248:	687b      	ldr	r3, [r7, #4]
    c24a:	785b      	ldrb	r3, [r3, #1]
    c24c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    c24e:	7bfb      	ldrb	r3, [r7, #15]
    c250:	f023 030f 	bic.w	r3, r3, #15
    c254:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    c256:	78fb      	ldrb	r3, [r7, #3]
    c258:	f003 030f 	and.w	r3, r3, #15
    c25c:	b2da      	uxtb	r2, r3
    c25e:	7bfb      	ldrb	r3, [r7, #15]
    c260:	4313      	orrs	r3, r2
    c262:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    c264:	687b      	ldr	r3, [r7, #4]
    c266:	7bfa      	ldrb	r2, [r7, #15]
    c268:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    c26a:	bf00      	nop
    c26c:	3714      	adds	r7, #20
    c26e:	46bd      	mov	sp, r7
    c270:	f85d 7b04 	ldr.w	r7, [sp], #4
    c274:	4770      	bx	lr
	...

0000c278 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    c278:	b580      	push	{r7, lr}
    c27a:	b082      	sub	sp, #8
    c27c:	af00      	add	r7, sp, #0
    c27e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    c280:	687b      	ldr	r3, [r7, #4]
    c282:	2b00      	cmp	r3, #0
    c284:	d005      	beq.n	c292 <_wdt_init+0x1a>
    c286:	687b      	ldr	r3, [r7, #4]
    c288:	681b      	ldr	r3, [r3, #0]
    c28a:	2b00      	cmp	r3, #0
    c28c:	d001      	beq.n	c292 <_wdt_init+0x1a>
    c28e:	2301      	movs	r3, #1
    c290:	e000      	b.n	c294 <_wdt_init+0x1c>
    c292:	2300      	movs	r3, #0
    c294:	f003 0301 	and.w	r3, r3, #1
    c298:	b2db      	uxtb	r3, r3
    c29a:	2250      	movs	r2, #80	; 0x50
    c29c:	4913      	ldr	r1, [pc, #76]	; (c2ec <_wdt_init+0x74>)
    c29e:	4618      	mov	r0, r3
    c2a0:	4b13      	ldr	r3, [pc, #76]	; (c2f0 <_wdt_init+0x78>)
    c2a2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    c2a4:	687b      	ldr	r3, [r7, #4]
    c2a6:	681b      	ldr	r3, [r3, #0]
    c2a8:	4618      	mov	r0, r3
    c2aa:	4b12      	ldr	r3, [pc, #72]	; (c2f4 <_wdt_init+0x7c>)
    c2ac:	4798      	blx	r3
    c2ae:	4603      	mov	r3, r0
    c2b0:	2b00      	cmp	r3, #0
    c2b2:	d107      	bne.n	c2c4 <_wdt_init+0x4c>
    c2b4:	687b      	ldr	r3, [r7, #4]
    c2b6:	681b      	ldr	r3, [r3, #0]
    c2b8:	4618      	mov	r0, r3
    c2ba:	4b0f      	ldr	r3, [pc, #60]	; (c2f8 <_wdt_init+0x80>)
    c2bc:	4798      	blx	r3
    c2be:	4603      	mov	r3, r0
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	d002      	beq.n	c2ca <_wdt_init+0x52>
		return ERR_DENIED;
    c2c4:	f06f 0310 	mvn.w	r3, #16
    c2c8:	e00b      	b.n	c2e2 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    c2ca:	687b      	ldr	r3, [r7, #4]
    c2cc:	681b      	ldr	r3, [r3, #0]
    c2ce:	4618      	mov	r0, r3
    c2d0:	4b0a      	ldr	r3, [pc, #40]	; (c2fc <_wdt_init+0x84>)
    c2d2:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    c2d4:	687b      	ldr	r3, [r7, #4]
    c2d6:	681b      	ldr	r3, [r3, #0]
    c2d8:	210b      	movs	r1, #11
    c2da:	4618      	mov	r0, r3
    c2dc:	4b08      	ldr	r3, [pc, #32]	; (c300 <_wdt_init+0x88>)
    c2de:	4798      	blx	r3
	}

	return ERR_NONE;
    c2e0:	2300      	movs	r3, #0
}
    c2e2:	4618      	mov	r0, r3
    c2e4:	3708      	adds	r7, #8
    c2e6:	46bd      	mov	sp, r7
    c2e8:	bd80      	pop	{r7, pc}
    c2ea:	bf00      	nop
    c2ec:	00011670 	.word	0x00011670
    c2f0:	00004f51 	.word	0x00004f51
    c2f4:	0000c209 	.word	0x0000c209
    c2f8:	0000c1a1 	.word	0x0000c1a1
    c2fc:	0000c1dd 	.word	0x0000c1dd
    c300:	0000c23d 	.word	0x0000c23d

0000c304 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    c304:	b580      	push	{r7, lr}
    c306:	b08c      	sub	sp, #48	; 0x30
    c308:	af00      	add	r7, sp, #0
    c30a:	6078      	str	r0, [r7, #4]
    c30c:	460b      	mov	r3, r1
    c30e:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c310:	687b      	ldr	r3, [r7, #4]
    c312:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c314:	687b      	ldr	r3, [r7, #4]
    c316:	681b      	ldr	r3, [r3, #0]
    c318:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    c31a:	f107 030c 	add.w	r3, r7, #12
    c31e:	2200      	movs	r2, #0
    c320:	601a      	str	r2, [r3, #0]
    c322:	605a      	str	r2, [r3, #4]
    c324:	609a      	str	r2, [r3, #8]
    c326:	60da      	str	r2, [r3, #12]
    c328:	611a      	str	r2, [r3, #16]
    c32a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c32e:	7b1b      	ldrb	r3, [r3, #12]
    c330:	2b00      	cmp	r3, #0
    c332:	d001      	beq.n	c338 <n25q256a_xip_confirm+0x34>
    c334:	2206      	movs	r2, #6
    c336:	e000      	b.n	c33a <n25q256a_xip_confirm+0x36>
    c338:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c33a:	7b3b      	ldrb	r3, [r7, #12]
    c33c:	f362 0302 	bfi	r3, r2, #0, #3
    c340:	733b      	strb	r3, [r7, #12]
    c342:	7b3b      	ldrb	r3, [r7, #12]
    c344:	f043 0310 	orr.w	r3, r3, #16
    c348:	733b      	strb	r3, [r7, #12]
    c34a:	7b3b      	ldrb	r3, [r7, #12]
    c34c:	f043 0320 	orr.w	r3, r3, #32
    c350:	733b      	strb	r3, [r7, #12]
    c352:	7b3b      	ldrb	r3, [r7, #12]
    c354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c358:	733b      	strb	r3, [r7, #12]
    c35a:	7b3b      	ldrb	r3, [r7, #12]
    c35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c360:	733b      	strb	r3, [r7, #12]
    c362:	7b7b      	ldrb	r3, [r7, #13]
    c364:	f043 0303 	orr.w	r3, r3, #3
    c368:	737b      	strb	r3, [r7, #13]
    c36a:	7b7b      	ldrb	r3, [r7, #13]
    c36c:	2201      	movs	r2, #1
    c36e:	f362 1305 	bfi	r3, r2, #4, #2
    c372:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c376:	7b1b      	ldrb	r3, [r3, #12]
    c378:	2b00      	cmp	r3, #0
    c37a:	d001      	beq.n	c380 <n25q256a_xip_confirm+0x7c>
    c37c:	2208      	movs	r2, #8
    c37e:	e000      	b.n	c382 <n25q256a_xip_confirm+0x7e>
    c380:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c382:	7bbb      	ldrb	r3, [r7, #14]
    c384:	f362 0304 	bfi	r3, r2, #0, #5
    c388:	73bb      	strb	r3, [r7, #14]
    c38a:	230b      	movs	r3, #11
    c38c:	743b      	strb	r3, [r7, #16]
    c38e:	78fb      	ldrb	r3, [r7, #3]
    c390:	2b00      	cmp	r3, #0
    c392:	d001      	beq.n	c398 <n25q256a_xip_confirm+0x94>
    c394:	2300      	movs	r3, #0
    c396:	e000      	b.n	c39a <n25q256a_xip_confirm+0x96>
    c398:	23ff      	movs	r3, #255	; 0xff
    c39a:	747b      	strb	r3, [r7, #17]
    c39c:	2301      	movs	r3, #1
    c39e:	61bb      	str	r3, [r7, #24]
    c3a0:	f107 0327 	add.w	r3, r7, #39	; 0x27
    c3a4:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    c3a6:	f107 030c 	add.w	r3, r7, #12
    c3aa:	4619      	mov	r1, r3
    c3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c3ae:	4b07      	ldr	r3, [pc, #28]	; (c3cc <n25q256a_xip_confirm+0xc8>)
    c3b0:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    c3b2:	78fb      	ldrb	r3, [r7, #3]
    c3b4:	2b00      	cmp	r3, #0
    c3b6:	d001      	beq.n	c3bc <n25q256a_xip_confirm+0xb8>
    c3b8:	2202      	movs	r2, #2
    c3ba:	e000      	b.n	c3be <n25q256a_xip_confirm+0xba>
    c3bc:	2201      	movs	r2, #1
    c3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c3c0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c3c2:	2300      	movs	r3, #0
}
    c3c4:	4618      	mov	r0, r3
    c3c6:	3730      	adds	r7, #48	; 0x30
    c3c8:	46bd      	mov	sp, r7
    c3ca:	bd80      	pop	{r7, pc}
    c3cc:	00003ca1 	.word	0x00003ca1

0000c3d0 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    c3d0:	b580      	push	{r7, lr}
    c3d2:	b08c      	sub	sp, #48	; 0x30
    c3d4:	af00      	add	r7, sp, #0
    c3d6:	6078      	str	r0, [r7, #4]
    c3d8:	460b      	mov	r3, r1
    c3da:	70fb      	strb	r3, [r7, #3]
    c3dc:	4613      	mov	r3, r2
    c3de:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    c3e0:	2300      	movs	r3, #0
    c3e2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    c3e4:	687b      	ldr	r3, [r7, #4]
    c3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    c3e8:	687b      	ldr	r3, [r7, #4]
    c3ea:	681b      	ldr	r3, [r3, #0]
    c3ec:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    c3ee:	f107 030c 	add.w	r3, r7, #12
    c3f2:	2200      	movs	r2, #0
    c3f4:	601a      	str	r2, [r3, #0]
    c3f6:	605a      	str	r2, [r3, #4]
    c3f8:	609a      	str	r2, [r3, #8]
    c3fa:	60da      	str	r2, [r3, #12]
    c3fc:	611a      	str	r2, [r3, #16]
    c3fe:	615a      	str	r2, [r3, #20]
    c400:	78fb      	ldrb	r3, [r7, #3]
    c402:	f003 0307 	and.w	r3, r3, #7
    c406:	b2da      	uxtb	r2, r3
    c408:	7b3b      	ldrb	r3, [r7, #12]
    c40a:	f362 0302 	bfi	r3, r2, #0, #3
    c40e:	733b      	strb	r3, [r7, #12]
    c410:	7b3b      	ldrb	r3, [r7, #12]
    c412:	f043 0310 	orr.w	r3, r3, #16
    c416:	733b      	strb	r3, [r7, #12]
    c418:	7b3b      	ldrb	r3, [r7, #12]
    c41a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c41e:	733b      	strb	r3, [r7, #12]
    c420:	78bb      	ldrb	r3, [r7, #2]
    c422:	743b      	strb	r3, [r7, #16]
    c424:	2301      	movs	r3, #1
    c426:	61bb      	str	r3, [r7, #24]
    c428:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c42c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    c42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c430:	7b5b      	ldrb	r3, [r3, #13]
    c432:	2b00      	cmp	r3, #0
    c434:	d003      	beq.n	c43e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    c436:	2100      	movs	r1, #0
    c438:	6878      	ldr	r0, [r7, #4]
    c43a:	4b0a      	ldr	r3, [pc, #40]	; (c464 <n25q256a_read_reg+0x94>)
    c43c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c43e:	f107 030c 	add.w	r3, r7, #12
    c442:	4619      	mov	r1, r3
    c444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c446:	4b08      	ldr	r3, [pc, #32]	; (c468 <n25q256a_read_reg+0x98>)
    c448:	4798      	blx	r3
	if (n25q->xip_mode) {
    c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c44c:	7b5b      	ldrb	r3, [r3, #13]
    c44e:	2b00      	cmp	r3, #0
    c450:	d003      	beq.n	c45a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    c452:	2101      	movs	r1, #1
    c454:	6878      	ldr	r0, [r7, #4]
    c456:	4b03      	ldr	r3, [pc, #12]	; (c464 <n25q256a_read_reg+0x94>)
    c458:	4798      	blx	r3
	}
	return status;
    c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c45c:	4618      	mov	r0, r3
    c45e:	3730      	adds	r7, #48	; 0x30
    c460:	46bd      	mov	sp, r7
    c462:	bd80      	pop	{r7, pc}
    c464:	0000c305 	.word	0x0000c305
    c468:	00003ca1 	.word	0x00003ca1

0000c46c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    c46c:	b580      	push	{r7, lr}
    c46e:	b08c      	sub	sp, #48	; 0x30
    c470:	af00      	add	r7, sp, #0
    c472:	60f8      	str	r0, [r7, #12]
    c474:	607b      	str	r3, [r7, #4]
    c476:	460b      	mov	r3, r1
    c478:	72fb      	strb	r3, [r7, #11]
    c47a:	4613      	mov	r3, r2
    c47c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c47e:	68fb      	ldr	r3, [r7, #12]
    c480:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c482:	68fb      	ldr	r3, [r7, #12]
    c484:	681b      	ldr	r3, [r3, #0]
    c486:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    c488:	f107 0310 	add.w	r3, r7, #16
    c48c:	2200      	movs	r2, #0
    c48e:	601a      	str	r2, [r3, #0]
    c490:	605a      	str	r2, [r3, #4]
    c492:	609a      	str	r2, [r3, #8]
    c494:	60da      	str	r2, [r3, #12]
    c496:	611a      	str	r2, [r3, #16]
    c498:	615a      	str	r2, [r3, #20]
    c49a:	7afb      	ldrb	r3, [r7, #11]
    c49c:	f003 0307 	and.w	r3, r3, #7
    c4a0:	b2da      	uxtb	r2, r3
    c4a2:	7c3b      	ldrb	r3, [r7, #16]
    c4a4:	f362 0302 	bfi	r3, r2, #0, #3
    c4a8:	743b      	strb	r3, [r7, #16]
    c4aa:	7c3b      	ldrb	r3, [r7, #16]
    c4ac:	f043 0310 	orr.w	r3, r3, #16
    c4b0:	743b      	strb	r3, [r7, #16]
    c4b2:	7c3b      	ldrb	r3, [r7, #16]
    c4b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c4b8:	743b      	strb	r3, [r7, #16]
    c4ba:	7c7b      	ldrb	r3, [r7, #17]
    c4bc:	2202      	movs	r2, #2
    c4be:	f362 1305 	bfi	r3, r2, #4, #2
    c4c2:	747b      	strb	r3, [r7, #17]
    c4c4:	7abb      	ldrb	r3, [r7, #10]
    c4c6:	753b      	strb	r3, [r7, #20]
    c4c8:	2301      	movs	r3, #1
    c4ca:	61fb      	str	r3, [r7, #28]
    c4cc:	1d3b      	adds	r3, r7, #4
    c4ce:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4d2:	7b5b      	ldrb	r3, [r3, #13]
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	d003      	beq.n	c4e0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    c4d8:	2100      	movs	r1, #0
    c4da:	68f8      	ldr	r0, [r7, #12]
    c4dc:	4b09      	ldr	r3, [pc, #36]	; (c504 <n25q256a_write_reg+0x98>)
    c4de:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c4e0:	f107 0310 	add.w	r3, r7, #16
    c4e4:	4619      	mov	r1, r3
    c4e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c4e8:	4b07      	ldr	r3, [pc, #28]	; (c508 <n25q256a_write_reg+0x9c>)
    c4ea:	4798      	blx	r3
	if (n25q->xip_mode) {
    c4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4ee:	7b5b      	ldrb	r3, [r3, #13]
    c4f0:	2b00      	cmp	r3, #0
    c4f2:	d003      	beq.n	c4fc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    c4f4:	2101      	movs	r1, #1
    c4f6:	68f8      	ldr	r0, [r7, #12]
    c4f8:	4b02      	ldr	r3, [pc, #8]	; (c504 <n25q256a_write_reg+0x98>)
    c4fa:	4798      	blx	r3
	}
}
    c4fc:	bf00      	nop
    c4fe:	3730      	adds	r7, #48	; 0x30
    c500:	46bd      	mov	sp, r7
    c502:	bd80      	pop	{r7, pc}
    c504:	0000c305 	.word	0x0000c305
    c508:	00003ca1 	.word	0x00003ca1

0000c50c <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    c50c:	b580      	push	{r7, lr}
    c50e:	b090      	sub	sp, #64	; 0x40
    c510:	af00      	add	r7, sp, #0
    c512:	6078      	str	r0, [r7, #4]
    c514:	460b      	mov	r3, r1
    c516:	70fb      	strb	r3, [r7, #3]
    c518:	4613      	mov	r3, r2
    c51a:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c51c:	687b      	ldr	r3, [r7, #4]
    c51e:	681b      	ldr	r3, [r3, #0]
    c520:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    c522:	78bb      	ldrb	r3, [r7, #2]
    c524:	2b00      	cmp	r3, #0
    c526:	d001      	beq.n	c52c <n25q256a_write_enable+0x20>
    c528:	2306      	movs	r3, #6
    c52a:	e000      	b.n	c52e <n25q256a_write_enable+0x22>
    c52c:	2304      	movs	r3, #4
    c52e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    c532:	f107 0320 	add.w	r3, r7, #32
    c536:	2200      	movs	r2, #0
    c538:	601a      	str	r2, [r3, #0]
    c53a:	605a      	str	r2, [r3, #4]
    c53c:	609a      	str	r2, [r3, #8]
    c53e:	60da      	str	r2, [r3, #12]
    c540:	611a      	str	r2, [r3, #16]
    c542:	615a      	str	r2, [r3, #20]
    c544:	78fb      	ldrb	r3, [r7, #3]
    c546:	f003 0307 	and.w	r3, r3, #7
    c54a:	b2da      	uxtb	r2, r3
    c54c:	f897 3020 	ldrb.w	r3, [r7, #32]
    c550:	f362 0302 	bfi	r3, r2, #0, #3
    c554:	f887 3020 	strb.w	r3, [r7, #32]
    c558:	f897 3020 	ldrb.w	r3, [r7, #32]
    c55c:	f043 0310 	orr.w	r3, r3, #16
    c560:	f887 3020 	strb.w	r3, [r7, #32]
    c564:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c568:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c56c:	f107 0308 	add.w	r3, r7, #8
    c570:	2200      	movs	r2, #0
    c572:	601a      	str	r2, [r3, #0]
    c574:	605a      	str	r2, [r3, #4]
    c576:	609a      	str	r2, [r3, #8]
    c578:	60da      	str	r2, [r3, #12]
    c57a:	611a      	str	r2, [r3, #16]
    c57c:	615a      	str	r2, [r3, #20]
    c57e:	78fb      	ldrb	r3, [r7, #3]
    c580:	f003 0307 	and.w	r3, r3, #7
    c584:	b2da      	uxtb	r2, r3
    c586:	7a3b      	ldrb	r3, [r7, #8]
    c588:	f362 0302 	bfi	r3, r2, #0, #3
    c58c:	723b      	strb	r3, [r7, #8]
    c58e:	7a3b      	ldrb	r3, [r7, #8]
    c590:	f043 0310 	orr.w	r3, r3, #16
    c594:	723b      	strb	r3, [r7, #8]
    c596:	7a3b      	ldrb	r3, [r7, #8]
    c598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c59c:	723b      	strb	r3, [r7, #8]
    c59e:	2305      	movs	r3, #5
    c5a0:	733b      	strb	r3, [r7, #12]
    c5a2:	2301      	movs	r3, #1
    c5a4:	617b      	str	r3, [r7, #20]
    c5a6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c5aa:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c5ac:	f107 0320 	add.w	r3, r7, #32
    c5b0:	4619      	mov	r1, r3
    c5b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c5b4:	4b08      	ldr	r3, [pc, #32]	; (c5d8 <n25q256a_write_enable+0xcc>)
    c5b6:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c5b8:	f107 0308 	add.w	r3, r7, #8
    c5bc:	4619      	mov	r1, r3
    c5be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c5c0:	4b05      	ldr	r3, [pc, #20]	; (c5d8 <n25q256a_write_enable+0xcc>)
    c5c2:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c5c4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c5c8:	f003 0302 	and.w	r3, r3, #2
    c5cc:	2b00      	cmp	r3, #0
    c5ce:	d0ed      	beq.n	c5ac <n25q256a_write_enable+0xa0>
}
    c5d0:	bf00      	nop
    c5d2:	3740      	adds	r7, #64	; 0x40
    c5d4:	46bd      	mov	sp, r7
    c5d6:	bd80      	pop	{r7, pc}
    c5d8:	00003ca1 	.word	0x00003ca1

0000c5dc <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c5dc:	b590      	push	{r4, r7, lr}
    c5de:	b087      	sub	sp, #28
    c5e0:	af00      	add	r7, sp, #0
    c5e2:	6078      	str	r0, [r7, #4]
    c5e4:	460b      	mov	r3, r1
    c5e6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c5e8:	687b      	ldr	r3, [r7, #4]
    c5ea:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c5ec:	68fb      	ldr	r3, [r7, #12]
    c5ee:	7b1b      	ldrb	r3, [r3, #12]
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d001      	beq.n	c5f8 <n25q256a_switch_mode+0x1c>
    c5f4:	2306      	movs	r3, #6
    c5f6:	e000      	b.n	c5fa <n25q256a_switch_mode+0x1e>
    c5f8:	2300      	movs	r3, #0
    c5fa:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c5fc:	7afb      	ldrb	r3, [r7, #11]
    c5fe:	2265      	movs	r2, #101	; 0x65
    c600:	4619      	mov	r1, r3
    c602:	6878      	ldr	r0, [r7, #4]
    c604:	4b25      	ldr	r3, [pc, #148]	; (c69c <n25q256a_switch_mode+0xc0>)
    c606:	4798      	blx	r3
    c608:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c60a:	2300      	movs	r3, #0
    c60c:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c60e:	68fb      	ldr	r3, [r7, #12]
    c610:	7b1b      	ldrb	r3, [r3, #12]
    c612:	78fa      	ldrb	r2, [r7, #3]
    c614:	429a      	cmp	r2, r3
    c616:	d03d      	beq.n	c694 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c618:	78fb      	ldrb	r3, [r7, #3]
    c61a:	2b00      	cmp	r3, #0
    c61c:	d00b      	beq.n	c636 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c61e:	697b      	ldr	r3, [r7, #20]
    c620:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c624:	2b00      	cmp	r3, #0
    c626:	d011      	beq.n	c64c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c628:	697b      	ldr	r3, [r7, #20]
    c62a:	f003 031f 	and.w	r3, r3, #31
    c62e:	617b      	str	r3, [r7, #20]
			modify = 1;
    c630:	2301      	movs	r3, #1
    c632:	74fb      	strb	r3, [r7, #19]
    c634:	e00a      	b.n	c64c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c636:	697b      	ldr	r3, [r7, #20]
    c638:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c63c:	2b00      	cmp	r3, #0
    c63e:	d105      	bne.n	c64c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c640:	697b      	ldr	r3, [r7, #20]
    c642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c646:	617b      	str	r3, [r7, #20]
			modify = 1;
    c648:	2301      	movs	r3, #1
    c64a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c64c:	7cfb      	ldrb	r3, [r7, #19]
    c64e:	2b00      	cmp	r3, #0
    c650:	d021      	beq.n	c696 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c652:	68fb      	ldr	r3, [r7, #12]
    c654:	78fa      	ldrb	r2, [r7, #3]
    c656:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c658:	7afb      	ldrb	r3, [r7, #11]
    c65a:	2201      	movs	r2, #1
    c65c:	4619      	mov	r1, r3
    c65e:	6878      	ldr	r0, [r7, #4]
    c660:	4b0f      	ldr	r3, [pc, #60]	; (c6a0 <n25q256a_switch_mode+0xc4>)
    c662:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c664:	7af9      	ldrb	r1, [r7, #11]
    c666:	697b      	ldr	r3, [r7, #20]
    c668:	2261      	movs	r2, #97	; 0x61
    c66a:	6878      	ldr	r0, [r7, #4]
    c66c:	4c0d      	ldr	r4, [pc, #52]	; (c6a4 <n25q256a_switch_mode+0xc8>)
    c66e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c670:	78fb      	ldrb	r3, [r7, #3]
    c672:	2b00      	cmp	r3, #0
    c674:	d001      	beq.n	c67a <n25q256a_switch_mode+0x9e>
    c676:	2306      	movs	r3, #6
    c678:	e000      	b.n	c67c <n25q256a_switch_mode+0xa0>
    c67a:	2300      	movs	r3, #0
    c67c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c67e:	7afb      	ldrb	r3, [r7, #11]
    c680:	2265      	movs	r2, #101	; 0x65
    c682:	4619      	mov	r1, r3
    c684:	6878      	ldr	r0, [r7, #4]
    c686:	4b05      	ldr	r3, [pc, #20]	; (c69c <n25q256a_switch_mode+0xc0>)
    c688:	4798      	blx	r3
    c68a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c68c:	68fb      	ldr	r3, [r7, #12]
    c68e:	78fa      	ldrb	r2, [r7, #3]
    c690:	731a      	strb	r2, [r3, #12]
    c692:	e000      	b.n	c696 <n25q256a_switch_mode+0xba>
		return;
    c694:	bf00      	nop
	}
}
    c696:	371c      	adds	r7, #28
    c698:	46bd      	mov	sp, r7
    c69a:	bd90      	pop	{r4, r7, pc}
    c69c:	0000c3d1 	.word	0x0000c3d1
    c6a0:	0000c50d 	.word	0x0000c50d
    c6a4:	0000c46d 	.word	0x0000c46d

0000c6a8 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c6a8:	b580      	push	{r7, lr}
    c6aa:	b086      	sub	sp, #24
    c6ac:	af00      	add	r7, sp, #0
    c6ae:	60f8      	str	r0, [r7, #12]
    c6b0:	60b9      	str	r1, [r7, #8]
    c6b2:	607a      	str	r2, [r7, #4]
    c6b4:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c6b6:	68fb      	ldr	r3, [r7, #12]
    c6b8:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c6ba:	4a0c      	ldr	r2, [pc, #48]	; (c6ec <n25q256a_construct+0x44>)
    c6bc:	68b9      	ldr	r1, [r7, #8]
    c6be:	68f8      	ldr	r0, [r7, #12]
    c6c0:	4b0b      	ldr	r3, [pc, #44]	; (c6f0 <n25q256a_construct+0x48>)
    c6c2:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c6c4:	697b      	ldr	r3, [r7, #20]
    c6c6:	2200      	movs	r2, #0
    c6c8:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c6ca:	697b      	ldr	r3, [r7, #20]
    c6cc:	2200      	movs	r2, #0
    c6ce:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c6d0:	697b      	ldr	r3, [r7, #20]
    c6d2:	687a      	ldr	r2, [r7, #4]
    c6d4:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c6d6:	78fb      	ldrb	r3, [r7, #3]
    c6d8:	4619      	mov	r1, r3
    c6da:	68f8      	ldr	r0, [r7, #12]
    c6dc:	4b05      	ldr	r3, [pc, #20]	; (c6f4 <n25q256a_construct+0x4c>)
    c6de:	4798      	blx	r3
	return me;
    c6e0:	68fb      	ldr	r3, [r7, #12]
}
    c6e2:	4618      	mov	r0, r3
    c6e4:	3718      	adds	r7, #24
    c6e6:	46bd      	mov	sp, r7
    c6e8:	bd80      	pop	{r7, pc}
    c6ea:	bf00      	nop
    c6ec:	00011688 	.word	0x00011688
    c6f0:	0000cb85 	.word	0x0000cb85
    c6f4:	0000c5dd 	.word	0x0000c5dd

0000c6f8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c6f8:	b580      	push	{r7, lr}
    c6fa:	b08c      	sub	sp, #48	; 0x30
    c6fc:	af00      	add	r7, sp, #0
    c6fe:	60f8      	str	r0, [r7, #12]
    c700:	60b9      	str	r1, [r7, #8]
    c702:	607a      	str	r2, [r7, #4]
    c704:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c706:	68fb      	ldr	r3, [r7, #12]
    c708:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c70a:	68fb      	ldr	r3, [r7, #12]
    c70c:	681b      	ldr	r3, [r3, #0]
    c70e:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c710:	f107 0310 	add.w	r3, r7, #16
    c714:	2200      	movs	r2, #0
    c716:	601a      	str	r2, [r3, #0]
    c718:	605a      	str	r2, [r3, #4]
    c71a:	609a      	str	r2, [r3, #8]
    c71c:	60da      	str	r2, [r3, #12]
    c71e:	611a      	str	r2, [r3, #16]
    c720:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c724:	7b1b      	ldrb	r3, [r3, #12]
    c726:	2b00      	cmp	r3, #0
    c728:	d001      	beq.n	c72e <n25q256a_read+0x36>
    c72a:	2206      	movs	r2, #6
    c72c:	e000      	b.n	c730 <n25q256a_read+0x38>
    c72e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c730:	7c3b      	ldrb	r3, [r7, #16]
    c732:	f362 0302 	bfi	r3, r2, #0, #3
    c736:	743b      	strb	r3, [r7, #16]
    c738:	7c3b      	ldrb	r3, [r7, #16]
    c73a:	f043 0310 	orr.w	r3, r3, #16
    c73e:	743b      	strb	r3, [r7, #16]
    c740:	7c3b      	ldrb	r3, [r7, #16]
    c742:	f043 0320 	orr.w	r3, r3, #32
    c746:	743b      	strb	r3, [r7, #16]
    c748:	7c3b      	ldrb	r3, [r7, #16]
    c74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c74e:	743b      	strb	r3, [r7, #16]
    c750:	7c7b      	ldrb	r3, [r7, #17]
    c752:	2201      	movs	r2, #1
    c754:	f362 1305 	bfi	r3, r2, #4, #2
    c758:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c75c:	7b1b      	ldrb	r3, [r3, #12]
    c75e:	2b00      	cmp	r3, #0
    c760:	d001      	beq.n	c766 <n25q256a_read+0x6e>
    c762:	220a      	movs	r2, #10
    c764:	e000      	b.n	c768 <n25q256a_read+0x70>
    c766:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c768:	7cbb      	ldrb	r3, [r7, #18]
    c76a:	f362 0304 	bfi	r3, r2, #0, #5
    c76e:	74bb      	strb	r3, [r7, #18]
    c770:	230b      	movs	r3, #11
    c772:	753b      	strb	r3, [r7, #20]
    c774:	687b      	ldr	r3, [r7, #4]
    c776:	61bb      	str	r3, [r7, #24]
    c778:	683b      	ldr	r3, [r7, #0]
    c77a:	61fb      	str	r3, [r7, #28]
    c77c:	68bb      	ldr	r3, [r7, #8]
    c77e:	627b      	str	r3, [r7, #36]	; 0x24
	    .instruction                  = N25Q_FAST_READ,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c780:	f107 0310 	add.w	r3, r7, #16
    c784:	4619      	mov	r1, r3
    c786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c788:	4b03      	ldr	r3, [pc, #12]	; (c798 <n25q256a_read+0xa0>)
    c78a:	4798      	blx	r3
	return ERR_NONE;
    c78c:	2300      	movs	r3, #0
}
    c78e:	4618      	mov	r0, r3
    c790:	3730      	adds	r7, #48	; 0x30
    c792:	46bd      	mov	sp, r7
    c794:	bd80      	pop	{r7, pc}
    c796:	bf00      	nop
    c798:	00003ca1 	.word	0x00003ca1

0000c79c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c79c:	b580      	push	{r7, lr}
    c79e:	b08c      	sub	sp, #48	; 0x30
    c7a0:	af00      	add	r7, sp, #0
    c7a2:	60f8      	str	r0, [r7, #12]
    c7a4:	60b9      	str	r1, [r7, #8]
    c7a6:	607a      	str	r2, [r7, #4]
    c7a8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c7aa:	68fb      	ldr	r3, [r7, #12]
    c7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c7ae:	68fb      	ldr	r3, [r7, #12]
    c7b0:	681b      	ldr	r3, [r3, #0]
    c7b2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c7b4:	f107 0310 	add.w	r3, r7, #16
    c7b8:	2200      	movs	r2, #0
    c7ba:	601a      	str	r2, [r3, #0]
    c7bc:	605a      	str	r2, [r3, #4]
    c7be:	609a      	str	r2, [r3, #8]
    c7c0:	60da      	str	r2, [r3, #12]
    c7c2:	611a      	str	r2, [r3, #16]
    c7c4:	615a      	str	r2, [r3, #20]
    c7c6:	7c3b      	ldrb	r3, [r7, #16]
    c7c8:	f043 0310 	orr.w	r3, r3, #16
    c7cc:	743b      	strb	r3, [r7, #16]
    c7ce:	7c3b      	ldrb	r3, [r7, #16]
    c7d0:	f043 0320 	orr.w	r3, r3, #32
    c7d4:	743b      	strb	r3, [r7, #16]
    c7d6:	7c3b      	ldrb	r3, [r7, #16]
    c7d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c7dc:	743b      	strb	r3, [r7, #16]
    c7de:	7c7b      	ldrb	r3, [r7, #17]
    c7e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c7e4:	747b      	strb	r3, [r7, #17]
    c7e6:	2302      	movs	r3, #2
    c7e8:	753b      	strb	r3, [r7, #20]
    c7ea:	687b      	ldr	r3, [r7, #4]
    c7ec:	61bb      	str	r3, [r7, #24]
    c7ee:	683b      	ldr	r3, [r7, #0]
    c7f0:	61fb      	str	r3, [r7, #28]
    c7f2:	68bb      	ldr	r3, [r7, #8]
    c7f4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c7f8:	7b1b      	ldrb	r3, [r3, #12]
    c7fa:	2b00      	cmp	r3, #0
    c7fc:	d001      	beq.n	c802 <n25q256a_write+0x66>
    c7fe:	2206      	movs	r2, #6
    c800:	e000      	b.n	c804 <n25q256a_write+0x68>
    c802:	2200      	movs	r2, #0
    c804:	7c3b      	ldrb	r3, [r7, #16]
    c806:	f362 0302 	bfi	r3, r2, #0, #3
    c80a:	743b      	strb	r3, [r7, #16]
	while (length) {
    c80c:	e035      	b.n	c87a <n25q256a_write+0xde>
		cmd.address = address;
    c80e:	687b      	ldr	r3, [r7, #4]
    c810:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c812:	683b      	ldr	r3, [r7, #0]
    c814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c818:	d802      	bhi.n	c820 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c81a:	683b      	ldr	r3, [r7, #0]
    c81c:	61fb      	str	r3, [r7, #28]
    c81e:	e002      	b.n	c826 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c820:	f44f 7380 	mov.w	r3, #256	; 0x100
    c824:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c826:	7c3b      	ldrb	r3, [r7, #16]
    c828:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c82c:	b2db      	uxtb	r3, r3
    c82e:	2201      	movs	r2, #1
    c830:	4619      	mov	r1, r3
    c832:	68f8      	ldr	r0, [r7, #12]
    c834:	4b19      	ldr	r3, [pc, #100]	; (c89c <n25q256a_write+0x100>)
    c836:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c838:	f107 0310 	add.w	r3, r7, #16
    c83c:	4619      	mov	r1, r3
    c83e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c840:	4b17      	ldr	r3, [pc, #92]	; (c8a0 <n25q256a_write+0x104>)
    c842:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c844:	bf00      	nop
    c846:	7c3b      	ldrb	r3, [r7, #16]
    c848:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c84c:	b2db      	uxtb	r3, r3
    c84e:	2270      	movs	r2, #112	; 0x70
    c850:	4619      	mov	r1, r3
    c852:	68f8      	ldr	r0, [r7, #12]
    c854:	4b13      	ldr	r3, [pc, #76]	; (c8a4 <n25q256a_write+0x108>)
    c856:	4798      	blx	r3
    c858:	4603      	mov	r3, r0
    c85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c85e:	2b00      	cmp	r3, #0
    c860:	d0f1      	beq.n	c846 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c862:	6a3a      	ldr	r2, [r7, #32]
    c864:	69fb      	ldr	r3, [r7, #28]
    c866:	4413      	add	r3, r2
    c868:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c86a:	69fb      	ldr	r3, [r7, #28]
    c86c:	683a      	ldr	r2, [r7, #0]
    c86e:	1ad3      	subs	r3, r2, r3
    c870:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c872:	69fb      	ldr	r3, [r7, #28]
    c874:	687a      	ldr	r2, [r7, #4]
    c876:	4413      	add	r3, r2
    c878:	607b      	str	r3, [r7, #4]
	while (length) {
    c87a:	683b      	ldr	r3, [r7, #0]
    c87c:	2b00      	cmp	r3, #0
    c87e:	d1c6      	bne.n	c80e <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c882:	7b5b      	ldrb	r3, [r3, #13]
    c884:	2b00      	cmp	r3, #0
    c886:	d003      	beq.n	c890 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c888:	2101      	movs	r1, #1
    c88a:	68f8      	ldr	r0, [r7, #12]
    c88c:	4b06      	ldr	r3, [pc, #24]	; (c8a8 <n25q256a_write+0x10c>)
    c88e:	4798      	blx	r3
	}
	return ERR_NONE;
    c890:	2300      	movs	r3, #0
}
    c892:	4618      	mov	r0, r3
    c894:	3730      	adds	r7, #48	; 0x30
    c896:	46bd      	mov	sp, r7
    c898:	bd80      	pop	{r7, pc}
    c89a:	bf00      	nop
    c89c:	0000c50d 	.word	0x0000c50d
    c8a0:	00003ca1 	.word	0x00003ca1
    c8a4:	0000c3d1 	.word	0x0000c3d1
    c8a8:	0000c305 	.word	0x0000c305

0000c8ac <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c8ac:	b580      	push	{r7, lr}
    c8ae:	b090      	sub	sp, #64	; 0x40
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	60f8      	str	r0, [r7, #12]
    c8b4:	60b9      	str	r1, [r7, #8]
    c8b6:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c8b8:	68fb      	ldr	r3, [r7, #12]
    c8ba:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c8bc:	68fb      	ldr	r3, [r7, #12]
    c8be:	681b      	ldr	r3, [r3, #0]
    c8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c8c2:	f107 0314 	add.w	r3, r7, #20
    c8c6:	2200      	movs	r2, #0
    c8c8:	601a      	str	r2, [r3, #0]
    c8ca:	605a      	str	r2, [r3, #4]
    c8cc:	609a      	str	r2, [r3, #8]
    c8ce:	60da      	str	r2, [r3, #12]
    c8d0:	611a      	str	r2, [r3, #16]
    c8d2:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c8d6:	7b1b      	ldrb	r3, [r3, #12]
    c8d8:	2b00      	cmp	r3, #0
    c8da:	d001      	beq.n	c8e0 <n25q256a_erase+0x34>
    c8dc:	2206      	movs	r2, #6
    c8de:	e000      	b.n	c8e2 <n25q256a_erase+0x36>
    c8e0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c8e2:	7d3b      	ldrb	r3, [r7, #20]
    c8e4:	f362 0302 	bfi	r3, r2, #0, #3
    c8e8:	753b      	strb	r3, [r7, #20]
    c8ea:	7d3b      	ldrb	r3, [r7, #20]
    c8ec:	f043 0310 	orr.w	r3, r3, #16
    c8f0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c8f2:	687b      	ldr	r3, [r7, #4]
    c8f4:	4a56      	ldr	r2, [pc, #344]	; (ca50 <n25q256a_erase+0x1a4>)
    c8f6:	4293      	cmp	r3, r2
    c8f8:	bf94      	ite	ls
    c8fa:	2301      	movls	r3, #1
    c8fc:	2300      	movhi	r3, #0
    c8fe:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c900:	7d3b      	ldrb	r3, [r7, #20]
    c902:	f362 1345 	bfi	r3, r2, #5, #1
    c906:	753b      	strb	r3, [r7, #20]
    c908:	7d7b      	ldrb	r3, [r7, #21]
    c90a:	2202      	movs	r2, #2
    c90c:	f362 1305 	bfi	r3, r2, #4, #2
    c910:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c912:	68bb      	ldr	r3, [r7, #8]
    c914:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c916:	687b      	ldr	r3, [r7, #4]
    c918:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c91a:	2300      	movs	r3, #0
    c91c:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c91e:	687b      	ldr	r3, [r7, #4]
    c920:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c924:	2b00      	cmp	r3, #0
    c926:	d104      	bne.n	c932 <n25q256a_erase+0x86>
    c928:	68bb      	ldr	r3, [r7, #8]
    c92a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c92e:	2b00      	cmp	r3, #0
    c930:	d002      	beq.n	c938 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c932:	f06f 030c 	mvn.w	r3, #12
    c936:	e087      	b.n	ca48 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c938:	687b      	ldr	r3, [r7, #4]
    c93a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c93e:	d368      	bcc.n	ca12 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c940:	23c7      	movs	r3, #199	; 0xc7
    c942:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c944:	7d3b      	ldrb	r3, [r7, #20]
    c946:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c94a:	b2db      	uxtb	r3, r3
    c94c:	2201      	movs	r2, #1
    c94e:	4619      	mov	r1, r3
    c950:	68f8      	ldr	r0, [r7, #12]
    c952:	4b40      	ldr	r3, [pc, #256]	; (ca54 <n25q256a_erase+0x1a8>)
    c954:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c956:	f107 0314 	add.w	r3, r7, #20
    c95a:	4619      	mov	r1, r3
    c95c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c95e:	4b3e      	ldr	r3, [pc, #248]	; (ca58 <n25q256a_erase+0x1ac>)
    c960:	4798      	blx	r3
    c962:	e059      	b.n	ca18 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c966:	b29b      	uxth	r3, r3
    c968:	2b00      	cmp	r3, #0
    c96a:	d11f      	bne.n	c9ac <n25q256a_erase+0x100>
    c96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c96e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c972:	d31b      	bcc.n	c9ac <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c976:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c978:	23d8      	movs	r3, #216	; 0xd8
    c97a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c97c:	7d3b      	ldrb	r3, [r7, #20]
    c97e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c982:	b2db      	uxtb	r3, r3
    c984:	2201      	movs	r2, #1
    c986:	4619      	mov	r1, r3
    c988:	68f8      	ldr	r0, [r7, #12]
    c98a:	4b32      	ldr	r3, [pc, #200]	; (ca54 <n25q256a_erase+0x1a8>)
    c98c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c98e:	f107 0314 	add.w	r3, r7, #20
    c992:	4619      	mov	r1, r3
    c994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c996:	4b30      	ldr	r3, [pc, #192]	; (ca58 <n25q256a_erase+0x1ac>)
    c998:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c99c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c9a4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c9a8:	63bb      	str	r3, [r7, #56]	; 0x38
    c9aa:	e023      	b.n	c9f4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c9b2:	d31b      	bcc.n	c9ec <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c9b6:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c9b8:	2320      	movs	r3, #32
    c9ba:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c9bc:	7d3b      	ldrb	r3, [r7, #20]
    c9be:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c9c2:	b2db      	uxtb	r3, r3
    c9c4:	2201      	movs	r2, #1
    c9c6:	4619      	mov	r1, r3
    c9c8:	68f8      	ldr	r0, [r7, #12]
    c9ca:	4b22      	ldr	r3, [pc, #136]	; (ca54 <n25q256a_erase+0x1a8>)
    c9cc:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c9ce:	f107 0314 	add.w	r3, r7, #20
    c9d2:	4619      	mov	r1, r3
    c9d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c9d6:	4b20      	ldr	r3, [pc, #128]	; (ca58 <n25q256a_erase+0x1ac>)
    c9d8:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c9dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c9e4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c9e8:	63bb      	str	r3, [r7, #56]	; 0x38
    c9ea:	e003      	b.n	c9f4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c9ec:	f06f 030c 	mvn.w	r3, #12
    c9f0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c9f2:	e011      	b.n	ca18 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c9f4:	bf00      	nop
    c9f6:	7d3b      	ldrb	r3, [r7, #20]
    c9f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c9fc:	b2db      	uxtb	r3, r3
    c9fe:	2270      	movs	r2, #112	; 0x70
    ca00:	4619      	mov	r1, r3
    ca02:	68f8      	ldr	r0, [r7, #12]
    ca04:	4b15      	ldr	r3, [pc, #84]	; (ca5c <n25q256a_erase+0x1b0>)
    ca06:	4798      	blx	r3
    ca08:	4603      	mov	r3, r0
    ca0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ca0e:	2b00      	cmp	r3, #0
    ca10:	d0f1      	beq.n	c9f6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ca14:	2b00      	cmp	r3, #0
    ca16:	d1a5      	bne.n	c964 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ca18:	bf00      	nop
    ca1a:	7d3b      	ldrb	r3, [r7, #20]
    ca1c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ca20:	b2db      	uxtb	r3, r3
    ca22:	2270      	movs	r2, #112	; 0x70
    ca24:	4619      	mov	r1, r3
    ca26:	68f8      	ldr	r0, [r7, #12]
    ca28:	4b0c      	ldr	r3, [pc, #48]	; (ca5c <n25q256a_erase+0x1b0>)
    ca2a:	4798      	blx	r3
    ca2c:	4603      	mov	r3, r0
    ca2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ca32:	2b00      	cmp	r3, #0
    ca34:	d0f1      	beq.n	ca1a <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca38:	7b5b      	ldrb	r3, [r3, #13]
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	d003      	beq.n	ca46 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    ca3e:	2101      	movs	r1, #1
    ca40:	68f8      	ldr	r0, [r7, #12]
    ca42:	4b07      	ldr	r3, [pc, #28]	; (ca60 <n25q256a_erase+0x1b4>)
    ca44:	4798      	blx	r3
	}
	return rc;
    ca46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    ca48:	4618      	mov	r0, r3
    ca4a:	3740      	adds	r7, #64	; 0x40
    ca4c:	46bd      	mov	sp, r7
    ca4e:	bd80      	pop	{r7, pc}
    ca50:	001fffff 	.word	0x001fffff
    ca54:	0000c50d 	.word	0x0000c50d
    ca58:	00003ca1 	.word	0x00003ca1
    ca5c:	0000c3d1 	.word	0x0000c3d1
    ca60:	0000c305 	.word	0x0000c305

0000ca64 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    ca64:	b590      	push	{r4, r7, lr}
    ca66:	b085      	sub	sp, #20
    ca68:	af00      	add	r7, sp, #0
    ca6a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    ca6c:	687b      	ldr	r3, [r7, #4]
    ca6e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ca70:	68fb      	ldr	r3, [r7, #12]
    ca72:	7b1b      	ldrb	r3, [r3, #12]
    ca74:	2b00      	cmp	r3, #0
    ca76:	d001      	beq.n	ca7c <n25q256a_enable_xip+0x18>
    ca78:	2306      	movs	r3, #6
    ca7a:	e000      	b.n	ca7e <n25q256a_enable_xip+0x1a>
    ca7c:	2300      	movs	r3, #0
    ca7e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    ca80:	68fb      	ldr	r3, [r7, #12]
    ca82:	7b5b      	ldrb	r3, [r3, #13]
    ca84:	2b00      	cmp	r3, #0
    ca86:	d129      	bne.n	cadc <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ca88:	7afb      	ldrb	r3, [r7, #11]
    ca8a:	2285      	movs	r2, #133	; 0x85
    ca8c:	4619      	mov	r1, r3
    ca8e:	6878      	ldr	r0, [r7, #4]
    ca90:	4b15      	ldr	r3, [pc, #84]	; (cae8 <n25q256a_enable_xip+0x84>)
    ca92:	4798      	blx	r3
    ca94:	4603      	mov	r3, r0
    ca96:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    ca98:	7abb      	ldrb	r3, [r7, #10]
    ca9a:	f003 0308 	and.w	r3, r3, #8
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d015      	beq.n	cace <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    caa2:	7abb      	ldrb	r3, [r7, #10]
    caa4:	f023 0308 	bic.w	r3, r3, #8
    caa8:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    caaa:	7abb      	ldrb	r3, [r7, #10]
    caac:	7af9      	ldrb	r1, [r7, #11]
    caae:	2281      	movs	r2, #129	; 0x81
    cab0:	6878      	ldr	r0, [r7, #4]
    cab2:	4c0e      	ldr	r4, [pc, #56]	; (caec <n25q256a_enable_xip+0x88>)
    cab4:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    cab6:	bf00      	nop
    cab8:	7afb      	ldrb	r3, [r7, #11]
    caba:	2270      	movs	r2, #112	; 0x70
    cabc:	4619      	mov	r1, r3
    cabe:	6878      	ldr	r0, [r7, #4]
    cac0:	4b09      	ldr	r3, [pc, #36]	; (cae8 <n25q256a_enable_xip+0x84>)
    cac2:	4798      	blx	r3
    cac4:	4603      	mov	r3, r0
    cac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    caca:	2b00      	cmp	r3, #0
    cacc:	d0f4      	beq.n	cab8 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    cace:	68fb      	ldr	r3, [r7, #12]
    cad0:	2201      	movs	r2, #1
    cad2:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    cad4:	2101      	movs	r1, #1
    cad6:	6878      	ldr	r0, [r7, #4]
    cad8:	4b05      	ldr	r3, [pc, #20]	; (caf0 <n25q256a_enable_xip+0x8c>)
    cada:	4798      	blx	r3
	}
	return ERR_NONE;
    cadc:	2300      	movs	r3, #0
}
    cade:	4618      	mov	r0, r3
    cae0:	3714      	adds	r7, #20
    cae2:	46bd      	mov	sp, r7
    cae4:	bd90      	pop	{r4, r7, pc}
    cae6:	bf00      	nop
    cae8:	0000c3d1 	.word	0x0000c3d1
    caec:	0000c46d 	.word	0x0000c46d
    caf0:	0000c305 	.word	0x0000c305

0000caf4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    caf4:	b580      	push	{r7, lr}
    caf6:	b086      	sub	sp, #24
    caf8:	af00      	add	r7, sp, #0
    cafa:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    cafc:	687b      	ldr	r3, [r7, #4]
    cafe:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cb00:	687b      	ldr	r3, [r7, #4]
    cb02:	681b      	ldr	r3, [r3, #0]
    cb04:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    cb06:	697b      	ldr	r3, [r7, #20]
    cb08:	7b1b      	ldrb	r3, [r3, #12]
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d001      	beq.n	cb12 <n25q256a_disable_xip+0x1e>
    cb0e:	2306      	movs	r3, #6
    cb10:	e000      	b.n	cb14 <n25q256a_disable_xip+0x20>
    cb12:	2300      	movs	r3, #0
    cb14:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    cb16:	2100      	movs	r1, #0
    cb18:	6878      	ldr	r0, [r7, #4]
    cb1a:	4b15      	ldr	r3, [pc, #84]	; (cb70 <n25q256a_disable_xip+0x7c>)
    cb1c:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    cb1e:	7bfb      	ldrb	r3, [r7, #15]
    cb20:	2285      	movs	r2, #133	; 0x85
    cb22:	4619      	mov	r1, r3
    cb24:	6878      	ldr	r0, [r7, #4]
    cb26:	4b13      	ldr	r3, [pc, #76]	; (cb74 <n25q256a_disable_xip+0x80>)
    cb28:	4798      	blx	r3
    cb2a:	4603      	mov	r3, r0
    cb2c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    cb2e:	7bbb      	ldrb	r3, [r7, #14]
    cb30:	f003 0308 	and.w	r3, r3, #8
    cb34:	2b00      	cmp	r3, #0
    cb36:	d113      	bne.n	cb60 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    cb38:	697b      	ldr	r3, [r7, #20]
    cb3a:	689b      	ldr	r3, [r3, #8]
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d00f      	beq.n	cb60 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    cb40:	693b      	ldr	r3, [r7, #16]
    cb42:	681b      	ldr	r3, [r3, #0]
    cb44:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    cb46:	6938      	ldr	r0, [r7, #16]
    cb48:	4b0b      	ldr	r3, [pc, #44]	; (cb78 <n25q256a_disable_xip+0x84>)
    cb4a:	4798      	blx	r3
			n25q->pin_exit_xip();
    cb4c:	697b      	ldr	r3, [r7, #20]
    cb4e:	689b      	ldr	r3, [r3, #8]
    cb50:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    cb52:	68b9      	ldr	r1, [r7, #8]
    cb54:	6938      	ldr	r0, [r7, #16]
    cb56:	4b09      	ldr	r3, [pc, #36]	; (cb7c <n25q256a_disable_xip+0x88>)
    cb58:	4798      	blx	r3
			qspi_sync_enable(descr);
    cb5a:	6938      	ldr	r0, [r7, #16]
    cb5c:	4b08      	ldr	r3, [pc, #32]	; (cb80 <n25q256a_disable_xip+0x8c>)
    cb5e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    cb60:	697b      	ldr	r3, [r7, #20]
    cb62:	2200      	movs	r2, #0
    cb64:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    cb66:	2300      	movs	r3, #0
}
    cb68:	4618      	mov	r0, r3
    cb6a:	3718      	adds	r7, #24
    cb6c:	46bd      	mov	sp, r7
    cb6e:	bd80      	pop	{r7, pc}
    cb70:	0000c305 	.word	0x0000c305
    cb74:	0000c3d1 	.word	0x0000c3d1
    cb78:	00003c65 	.word	0x00003c65
    cb7c:	00003bdd 	.word	0x00003bdd
    cb80:	00003c29 	.word	0x00003c29

0000cb84 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    cb84:	b480      	push	{r7}
    cb86:	b085      	sub	sp, #20
    cb88:	af00      	add	r7, sp, #0
    cb8a:	60f8      	str	r0, [r7, #12]
    cb8c:	60b9      	str	r1, [r7, #8]
    cb8e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    cb90:	68fb      	ldr	r3, [r7, #12]
    cb92:	68ba      	ldr	r2, [r7, #8]
    cb94:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    cb96:	68fb      	ldr	r3, [r7, #12]
    cb98:	687a      	ldr	r2, [r7, #4]
    cb9a:	605a      	str	r2, [r3, #4]

	return me;
    cb9c:	68fb      	ldr	r3, [r7, #12]
}
    cb9e:	4618      	mov	r0, r3
    cba0:	3714      	adds	r7, #20
    cba2:	46bd      	mov	sp, r7
    cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cba8:	4770      	bx	lr

0000cbaa <hri_port_set_DIR_reg>:
{
    cbaa:	b480      	push	{r7}
    cbac:	b085      	sub	sp, #20
    cbae:	af00      	add	r7, sp, #0
    cbb0:	60f8      	str	r0, [r7, #12]
    cbb2:	460b      	mov	r3, r1
    cbb4:	607a      	str	r2, [r7, #4]
    cbb6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    cbb8:	7afb      	ldrb	r3, [r7, #11]
    cbba:	68fa      	ldr	r2, [r7, #12]
    cbbc:	01db      	lsls	r3, r3, #7
    cbbe:	4413      	add	r3, r2
    cbc0:	3308      	adds	r3, #8
    cbc2:	687a      	ldr	r2, [r7, #4]
    cbc4:	601a      	str	r2, [r3, #0]
}
    cbc6:	bf00      	nop
    cbc8:	3714      	adds	r7, #20
    cbca:	46bd      	mov	sp, r7
    cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbd0:	4770      	bx	lr

0000cbd2 <hri_port_clear_DIR_reg>:
{
    cbd2:	b480      	push	{r7}
    cbd4:	b085      	sub	sp, #20
    cbd6:	af00      	add	r7, sp, #0
    cbd8:	60f8      	str	r0, [r7, #12]
    cbda:	460b      	mov	r3, r1
    cbdc:	607a      	str	r2, [r7, #4]
    cbde:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    cbe0:	7afb      	ldrb	r3, [r7, #11]
    cbe2:	68fa      	ldr	r2, [r7, #12]
    cbe4:	01db      	lsls	r3, r3, #7
    cbe6:	4413      	add	r3, r2
    cbe8:	3304      	adds	r3, #4
    cbea:	687a      	ldr	r2, [r7, #4]
    cbec:	601a      	str	r2, [r3, #0]
}
    cbee:	bf00      	nop
    cbf0:	3714      	adds	r7, #20
    cbf2:	46bd      	mov	sp, r7
    cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbf8:	4770      	bx	lr

0000cbfa <hri_port_set_OUT_reg>:
{
    cbfa:	b480      	push	{r7}
    cbfc:	b085      	sub	sp, #20
    cbfe:	af00      	add	r7, sp, #0
    cc00:	60f8      	str	r0, [r7, #12]
    cc02:	460b      	mov	r3, r1
    cc04:	607a      	str	r2, [r7, #4]
    cc06:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    cc08:	7afb      	ldrb	r3, [r7, #11]
    cc0a:	68fa      	ldr	r2, [r7, #12]
    cc0c:	01db      	lsls	r3, r3, #7
    cc0e:	4413      	add	r3, r2
    cc10:	3318      	adds	r3, #24
    cc12:	687a      	ldr	r2, [r7, #4]
    cc14:	601a      	str	r2, [r3, #0]
}
    cc16:	bf00      	nop
    cc18:	3714      	adds	r7, #20
    cc1a:	46bd      	mov	sp, r7
    cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc20:	4770      	bx	lr

0000cc22 <hri_port_clear_OUT_reg>:
{
    cc22:	b480      	push	{r7}
    cc24:	b085      	sub	sp, #20
    cc26:	af00      	add	r7, sp, #0
    cc28:	60f8      	str	r0, [r7, #12]
    cc2a:	460b      	mov	r3, r1
    cc2c:	607a      	str	r2, [r7, #4]
    cc2e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    cc30:	7afb      	ldrb	r3, [r7, #11]
    cc32:	68fa      	ldr	r2, [r7, #12]
    cc34:	01db      	lsls	r3, r3, #7
    cc36:	4413      	add	r3, r2
    cc38:	3314      	adds	r3, #20
    cc3a:	687a      	ldr	r2, [r7, #4]
    cc3c:	601a      	str	r2, [r3, #0]
}
    cc3e:	bf00      	nop
    cc40:	3714      	adds	r7, #20
    cc42:	46bd      	mov	sp, r7
    cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc48:	4770      	bx	lr

0000cc4a <hri_port_write_PMUX_PMUXE_bf>:
{
    cc4a:	b480      	push	{r7}
    cc4c:	b085      	sub	sp, #20
    cc4e:	af00      	add	r7, sp, #0
    cc50:	6078      	str	r0, [r7, #4]
    cc52:	4608      	mov	r0, r1
    cc54:	4611      	mov	r1, r2
    cc56:	461a      	mov	r2, r3
    cc58:	4603      	mov	r3, r0
    cc5a:	70fb      	strb	r3, [r7, #3]
    cc5c:	460b      	mov	r3, r1
    cc5e:	70bb      	strb	r3, [r7, #2]
    cc60:	4613      	mov	r3, r2
    cc62:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    cc64:	78fa      	ldrb	r2, [r7, #3]
    cc66:	78bb      	ldrb	r3, [r7, #2]
    cc68:	6879      	ldr	r1, [r7, #4]
    cc6a:	01d2      	lsls	r2, r2, #7
    cc6c:	440a      	add	r2, r1
    cc6e:	4413      	add	r3, r2
    cc70:	3330      	adds	r3, #48	; 0x30
    cc72:	781b      	ldrb	r3, [r3, #0]
    cc74:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    cc76:	7bfb      	ldrb	r3, [r7, #15]
    cc78:	f023 030f 	bic.w	r3, r3, #15
    cc7c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    cc7e:	787b      	ldrb	r3, [r7, #1]
    cc80:	f003 030f 	and.w	r3, r3, #15
    cc84:	b2da      	uxtb	r2, r3
    cc86:	7bfb      	ldrb	r3, [r7, #15]
    cc88:	4313      	orrs	r3, r2
    cc8a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    cc8c:	78fa      	ldrb	r2, [r7, #3]
    cc8e:	78bb      	ldrb	r3, [r7, #2]
    cc90:	6879      	ldr	r1, [r7, #4]
    cc92:	01d2      	lsls	r2, r2, #7
    cc94:	440a      	add	r2, r1
    cc96:	4413      	add	r3, r2
    cc98:	3330      	adds	r3, #48	; 0x30
    cc9a:	7bfa      	ldrb	r2, [r7, #15]
    cc9c:	701a      	strb	r2, [r3, #0]
}
    cc9e:	bf00      	nop
    cca0:	3714      	adds	r7, #20
    cca2:	46bd      	mov	sp, r7
    cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cca8:	4770      	bx	lr

0000ccaa <hri_port_write_PMUX_PMUXO_bf>:
{
    ccaa:	b480      	push	{r7}
    ccac:	b085      	sub	sp, #20
    ccae:	af00      	add	r7, sp, #0
    ccb0:	6078      	str	r0, [r7, #4]
    ccb2:	4608      	mov	r0, r1
    ccb4:	4611      	mov	r1, r2
    ccb6:	461a      	mov	r2, r3
    ccb8:	4603      	mov	r3, r0
    ccba:	70fb      	strb	r3, [r7, #3]
    ccbc:	460b      	mov	r3, r1
    ccbe:	70bb      	strb	r3, [r7, #2]
    ccc0:	4613      	mov	r3, r2
    ccc2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ccc4:	78fa      	ldrb	r2, [r7, #3]
    ccc6:	78bb      	ldrb	r3, [r7, #2]
    ccc8:	6879      	ldr	r1, [r7, #4]
    ccca:	01d2      	lsls	r2, r2, #7
    cccc:	440a      	add	r2, r1
    ccce:	4413      	add	r3, r2
    ccd0:	3330      	adds	r3, #48	; 0x30
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ccd6:	7bfb      	ldrb	r3, [r7, #15]
    ccd8:	f003 030f 	and.w	r3, r3, #15
    ccdc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    ccde:	787b      	ldrb	r3, [r7, #1]
    cce0:	011b      	lsls	r3, r3, #4
    cce2:	b2da      	uxtb	r2, r3
    cce4:	7bfb      	ldrb	r3, [r7, #15]
    cce6:	4313      	orrs	r3, r2
    cce8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ccea:	78fa      	ldrb	r2, [r7, #3]
    ccec:	78bb      	ldrb	r3, [r7, #2]
    ccee:	6879      	ldr	r1, [r7, #4]
    ccf0:	01d2      	lsls	r2, r2, #7
    ccf2:	440a      	add	r2, r1
    ccf4:	4413      	add	r3, r2
    ccf6:	3330      	adds	r3, #48	; 0x30
    ccf8:	7bfa      	ldrb	r2, [r7, #15]
    ccfa:	701a      	strb	r2, [r3, #0]
}
    ccfc:	bf00      	nop
    ccfe:	3714      	adds	r7, #20
    cd00:	46bd      	mov	sp, r7
    cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd06:	4770      	bx	lr

0000cd08 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    cd08:	b480      	push	{r7}
    cd0a:	b085      	sub	sp, #20
    cd0c:	af00      	add	r7, sp, #0
    cd0e:	6078      	str	r0, [r7, #4]
    cd10:	4608      	mov	r0, r1
    cd12:	4611      	mov	r1, r2
    cd14:	461a      	mov	r2, r3
    cd16:	4603      	mov	r3, r0
    cd18:	70fb      	strb	r3, [r7, #3]
    cd1a:	460b      	mov	r3, r1
    cd1c:	70bb      	strb	r3, [r7, #2]
    cd1e:	4613      	mov	r3, r2
    cd20:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    cd22:	78fa      	ldrb	r2, [r7, #3]
    cd24:	78bb      	ldrb	r3, [r7, #2]
    cd26:	6879      	ldr	r1, [r7, #4]
    cd28:	01d2      	lsls	r2, r2, #7
    cd2a:	440a      	add	r2, r1
    cd2c:	4413      	add	r3, r2
    cd2e:	3340      	adds	r3, #64	; 0x40
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    cd34:	7bfb      	ldrb	r3, [r7, #15]
    cd36:	f023 0301 	bic.w	r3, r3, #1
    cd3a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    cd3c:	787a      	ldrb	r2, [r7, #1]
    cd3e:	7bfb      	ldrb	r3, [r7, #15]
    cd40:	4313      	orrs	r3, r2
    cd42:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    cd44:	78fa      	ldrb	r2, [r7, #3]
    cd46:	78bb      	ldrb	r3, [r7, #2]
    cd48:	6879      	ldr	r1, [r7, #4]
    cd4a:	01d2      	lsls	r2, r2, #7
    cd4c:	440a      	add	r2, r1
    cd4e:	4413      	add	r3, r2
    cd50:	3340      	adds	r3, #64	; 0x40
    cd52:	7bfa      	ldrb	r2, [r7, #15]
    cd54:	701a      	strb	r2, [r3, #0]
}
    cd56:	bf00      	nop
    cd58:	3714      	adds	r7, #20
    cd5a:	46bd      	mov	sp, r7
    cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd60:	4770      	bx	lr

0000cd62 <hri_port_write_WRCONFIG_reg>:
{
    cd62:	b480      	push	{r7}
    cd64:	b085      	sub	sp, #20
    cd66:	af00      	add	r7, sp, #0
    cd68:	60f8      	str	r0, [r7, #12]
    cd6a:	460b      	mov	r3, r1
    cd6c:	607a      	str	r2, [r7, #4]
    cd6e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    cd70:	7afb      	ldrb	r3, [r7, #11]
    cd72:	68fa      	ldr	r2, [r7, #12]
    cd74:	01db      	lsls	r3, r3, #7
    cd76:	4413      	add	r3, r2
    cd78:	3328      	adds	r3, #40	; 0x28
    cd7a:	687a      	ldr	r2, [r7, #4]
    cd7c:	601a      	str	r2, [r3, #0]
}
    cd7e:	bf00      	nop
    cd80:	3714      	adds	r7, #20
    cd82:	46bd      	mov	sp, r7
    cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd88:	4770      	bx	lr
	...

0000cd8c <_gpio_set_direction>:
{
    cd8c:	b580      	push	{r7, lr}
    cd8e:	b082      	sub	sp, #8
    cd90:	af00      	add	r7, sp, #0
    cd92:	4603      	mov	r3, r0
    cd94:	6039      	str	r1, [r7, #0]
    cd96:	71fb      	strb	r3, [r7, #7]
    cd98:	4613      	mov	r3, r2
    cd9a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    cd9c:	79bb      	ldrb	r3, [r7, #6]
    cd9e:	2b01      	cmp	r3, #1
    cda0:	d01c      	beq.n	cddc <_gpio_set_direction+0x50>
    cda2:	2b02      	cmp	r3, #2
    cda4:	d037      	beq.n	ce16 <_gpio_set_direction+0x8a>
    cda6:	2b00      	cmp	r3, #0
    cda8:	d14e      	bne.n	ce48 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    cdaa:	79fb      	ldrb	r3, [r7, #7]
    cdac:	683a      	ldr	r2, [r7, #0]
    cdae:	4619      	mov	r1, r3
    cdb0:	482a      	ldr	r0, [pc, #168]	; (ce5c <_gpio_set_direction+0xd0>)
    cdb2:	4b2b      	ldr	r3, [pc, #172]	; (ce60 <_gpio_set_direction+0xd4>)
    cdb4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    cdb6:	683b      	ldr	r3, [r7, #0]
    cdb8:	b29b      	uxth	r3, r3
    cdba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cdbe:	79fb      	ldrb	r3, [r7, #7]
    cdc0:	4619      	mov	r1, r3
    cdc2:	4826      	ldr	r0, [pc, #152]	; (ce5c <_gpio_set_direction+0xd0>)
    cdc4:	4b27      	ldr	r3, [pc, #156]	; (ce64 <_gpio_set_direction+0xd8>)
    cdc6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    cdc8:	683b      	ldr	r3, [r7, #0]
    cdca:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    cdcc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    cdd0:	79fb      	ldrb	r3, [r7, #7]
    cdd2:	4619      	mov	r1, r3
    cdd4:	4821      	ldr	r0, [pc, #132]	; (ce5c <_gpio_set_direction+0xd0>)
    cdd6:	4b23      	ldr	r3, [pc, #140]	; (ce64 <_gpio_set_direction+0xd8>)
    cdd8:	4798      	blx	r3
		break;
    cdda:	e03a      	b.n	ce52 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    cddc:	79fb      	ldrb	r3, [r7, #7]
    cdde:	683a      	ldr	r2, [r7, #0]
    cde0:	4619      	mov	r1, r3
    cde2:	481e      	ldr	r0, [pc, #120]	; (ce5c <_gpio_set_direction+0xd0>)
    cde4:	4b1e      	ldr	r3, [pc, #120]	; (ce60 <_gpio_set_direction+0xd4>)
    cde6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    cde8:	683b      	ldr	r3, [r7, #0]
    cdea:	b29b      	uxth	r3, r3
    cdec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    cdf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    cdf4:	79f9      	ldrb	r1, [r7, #7]
    cdf6:	461a      	mov	r2, r3
    cdf8:	4818      	ldr	r0, [pc, #96]	; (ce5c <_gpio_set_direction+0xd0>)
    cdfa:	4b1a      	ldr	r3, [pc, #104]	; (ce64 <_gpio_set_direction+0xd8>)
    cdfc:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    cdfe:	683b      	ldr	r3, [r7, #0]
    ce00:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ce02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ce06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ce0a:	79f9      	ldrb	r1, [r7, #7]
    ce0c:	461a      	mov	r2, r3
    ce0e:	4813      	ldr	r0, [pc, #76]	; (ce5c <_gpio_set_direction+0xd0>)
    ce10:	4b14      	ldr	r3, [pc, #80]	; (ce64 <_gpio_set_direction+0xd8>)
    ce12:	4798      	blx	r3
		break;
    ce14:	e01d      	b.n	ce52 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ce16:	79fb      	ldrb	r3, [r7, #7]
    ce18:	683a      	ldr	r2, [r7, #0]
    ce1a:	4619      	mov	r1, r3
    ce1c:	480f      	ldr	r0, [pc, #60]	; (ce5c <_gpio_set_direction+0xd0>)
    ce1e:	4b12      	ldr	r3, [pc, #72]	; (ce68 <_gpio_set_direction+0xdc>)
    ce20:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ce22:	683b      	ldr	r3, [r7, #0]
    ce24:	b29b      	uxth	r3, r3
    ce26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ce2a:	79fb      	ldrb	r3, [r7, #7]
    ce2c:	4619      	mov	r1, r3
    ce2e:	480b      	ldr	r0, [pc, #44]	; (ce5c <_gpio_set_direction+0xd0>)
    ce30:	4b0c      	ldr	r3, [pc, #48]	; (ce64 <_gpio_set_direction+0xd8>)
    ce32:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ce34:	683b      	ldr	r3, [r7, #0]
    ce36:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ce38:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ce3c:	79fb      	ldrb	r3, [r7, #7]
    ce3e:	4619      	mov	r1, r3
    ce40:	4806      	ldr	r0, [pc, #24]	; (ce5c <_gpio_set_direction+0xd0>)
    ce42:	4b08      	ldr	r3, [pc, #32]	; (ce64 <_gpio_set_direction+0xd8>)
    ce44:	4798      	blx	r3
		break;
    ce46:	e004      	b.n	ce52 <_gpio_set_direction+0xc6>
		ASSERT(false);
    ce48:	2246      	movs	r2, #70	; 0x46
    ce4a:	4908      	ldr	r1, [pc, #32]	; (ce6c <_gpio_set_direction+0xe0>)
    ce4c:	2000      	movs	r0, #0
    ce4e:	4b08      	ldr	r3, [pc, #32]	; (ce70 <_gpio_set_direction+0xe4>)
    ce50:	4798      	blx	r3
}
    ce52:	bf00      	nop
    ce54:	3708      	adds	r7, #8
    ce56:	46bd      	mov	sp, r7
    ce58:	bd80      	pop	{r7, pc}
    ce5a:	bf00      	nop
    ce5c:	41008000 	.word	0x41008000
    ce60:	0000cbd3 	.word	0x0000cbd3
    ce64:	0000cd63 	.word	0x0000cd63
    ce68:	0000cbab 	.word	0x0000cbab
    ce6c:	0001169c 	.word	0x0001169c
    ce70:	00004f51 	.word	0x00004f51

0000ce74 <_gpio_set_level>:
{
    ce74:	b580      	push	{r7, lr}
    ce76:	b082      	sub	sp, #8
    ce78:	af00      	add	r7, sp, #0
    ce7a:	4603      	mov	r3, r0
    ce7c:	6039      	str	r1, [r7, #0]
    ce7e:	71fb      	strb	r3, [r7, #7]
    ce80:	4613      	mov	r3, r2
    ce82:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ce84:	79bb      	ldrb	r3, [r7, #6]
    ce86:	2b00      	cmp	r3, #0
    ce88:	d006      	beq.n	ce98 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ce8a:	79fb      	ldrb	r3, [r7, #7]
    ce8c:	683a      	ldr	r2, [r7, #0]
    ce8e:	4619      	mov	r1, r3
    ce90:	4806      	ldr	r0, [pc, #24]	; (ceac <_gpio_set_level+0x38>)
    ce92:	4b07      	ldr	r3, [pc, #28]	; (ceb0 <_gpio_set_level+0x3c>)
    ce94:	4798      	blx	r3
}
    ce96:	e005      	b.n	cea4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ce98:	79fb      	ldrb	r3, [r7, #7]
    ce9a:	683a      	ldr	r2, [r7, #0]
    ce9c:	4619      	mov	r1, r3
    ce9e:	4803      	ldr	r0, [pc, #12]	; (ceac <_gpio_set_level+0x38>)
    cea0:	4b04      	ldr	r3, [pc, #16]	; (ceb4 <_gpio_set_level+0x40>)
    cea2:	4798      	blx	r3
}
    cea4:	bf00      	nop
    cea6:	3708      	adds	r7, #8
    cea8:	46bd      	mov	sp, r7
    ceaa:	bd80      	pop	{r7, pc}
    ceac:	41008000 	.word	0x41008000
    ceb0:	0000cbfb 	.word	0x0000cbfb
    ceb4:	0000cc23 	.word	0x0000cc23

0000ceb8 <_gpio_set_pin_function>:
{
    ceb8:	b590      	push	{r4, r7, lr}
    ceba:	b085      	sub	sp, #20
    cebc:	af00      	add	r7, sp, #0
    cebe:	6078      	str	r0, [r7, #4]
    cec0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    cec2:	687b      	ldr	r3, [r7, #4]
    cec4:	095b      	lsrs	r3, r3, #5
    cec6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    cec8:	687b      	ldr	r3, [r7, #4]
    ceca:	b2db      	uxtb	r3, r3
    cecc:	f003 031f 	and.w	r3, r3, #31
    ced0:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ced2:	683b      	ldr	r3, [r7, #0]
    ced4:	f1b3 3fff 	cmp.w	r3, #4294967295
    ced8:	d106      	bne.n	cee8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ceda:	7bba      	ldrb	r2, [r7, #14]
    cedc:	7bf9      	ldrb	r1, [r7, #15]
    cede:	2300      	movs	r3, #0
    cee0:	4812      	ldr	r0, [pc, #72]	; (cf2c <_gpio_set_pin_function+0x74>)
    cee2:	4c13      	ldr	r4, [pc, #76]	; (cf30 <_gpio_set_pin_function+0x78>)
    cee4:	47a0      	blx	r4
}
    cee6:	e01d      	b.n	cf24 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    cee8:	7bba      	ldrb	r2, [r7, #14]
    ceea:	7bf9      	ldrb	r1, [r7, #15]
    ceec:	2301      	movs	r3, #1
    ceee:	480f      	ldr	r0, [pc, #60]	; (cf2c <_gpio_set_pin_function+0x74>)
    cef0:	4c0f      	ldr	r4, [pc, #60]	; (cf30 <_gpio_set_pin_function+0x78>)
    cef2:	47a0      	blx	r4
		if (pin & 1) {
    cef4:	7bbb      	ldrb	r3, [r7, #14]
    cef6:	f003 0301 	and.w	r3, r3, #1
    cefa:	2b00      	cmp	r3, #0
    cefc:	d009      	beq.n	cf12 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    cefe:	7bbb      	ldrb	r3, [r7, #14]
    cf00:	085b      	lsrs	r3, r3, #1
    cf02:	b2da      	uxtb	r2, r3
    cf04:	683b      	ldr	r3, [r7, #0]
    cf06:	b2db      	uxtb	r3, r3
    cf08:	7bf9      	ldrb	r1, [r7, #15]
    cf0a:	4808      	ldr	r0, [pc, #32]	; (cf2c <_gpio_set_pin_function+0x74>)
    cf0c:	4c09      	ldr	r4, [pc, #36]	; (cf34 <_gpio_set_pin_function+0x7c>)
    cf0e:	47a0      	blx	r4
}
    cf10:	e008      	b.n	cf24 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    cf12:	7bbb      	ldrb	r3, [r7, #14]
    cf14:	085b      	lsrs	r3, r3, #1
    cf16:	b2da      	uxtb	r2, r3
    cf18:	683b      	ldr	r3, [r7, #0]
    cf1a:	b2db      	uxtb	r3, r3
    cf1c:	7bf9      	ldrb	r1, [r7, #15]
    cf1e:	4803      	ldr	r0, [pc, #12]	; (cf2c <_gpio_set_pin_function+0x74>)
    cf20:	4c05      	ldr	r4, [pc, #20]	; (cf38 <_gpio_set_pin_function+0x80>)
    cf22:	47a0      	blx	r4
}
    cf24:	bf00      	nop
    cf26:	3714      	adds	r7, #20
    cf28:	46bd      	mov	sp, r7
    cf2a:	bd90      	pop	{r4, r7, pc}
    cf2c:	41008000 	.word	0x41008000
    cf30:	0000cd09 	.word	0x0000cd09
    cf34:	0000ccab 	.word	0x0000ccab
    cf38:	0000cc4b 	.word	0x0000cc4b

0000cf3c <gpio_set_pin_function>:
{
    cf3c:	b580      	push	{r7, lr}
    cf3e:	b082      	sub	sp, #8
    cf40:	af00      	add	r7, sp, #0
    cf42:	6078      	str	r0, [r7, #4]
    cf44:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    cf46:	6839      	ldr	r1, [r7, #0]
    cf48:	6878      	ldr	r0, [r7, #4]
    cf4a:	4b03      	ldr	r3, [pc, #12]	; (cf58 <gpio_set_pin_function+0x1c>)
    cf4c:	4798      	blx	r3
}
    cf4e:	bf00      	nop
    cf50:	3708      	adds	r7, #8
    cf52:	46bd      	mov	sp, r7
    cf54:	bd80      	pop	{r7, pc}
    cf56:	bf00      	nop
    cf58:	0000ceb9 	.word	0x0000ceb9

0000cf5c <gpio_set_pin_direction>:
{
    cf5c:	b580      	push	{r7, lr}
    cf5e:	b082      	sub	sp, #8
    cf60:	af00      	add	r7, sp, #0
    cf62:	4603      	mov	r3, r0
    cf64:	460a      	mov	r2, r1
    cf66:	71fb      	strb	r3, [r7, #7]
    cf68:	4613      	mov	r3, r2
    cf6a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    cf6c:	79fb      	ldrb	r3, [r7, #7]
    cf6e:	095b      	lsrs	r3, r3, #5
    cf70:	b2d8      	uxtb	r0, r3
    cf72:	79fb      	ldrb	r3, [r7, #7]
    cf74:	f003 031f 	and.w	r3, r3, #31
    cf78:	2201      	movs	r2, #1
    cf7a:	fa02 f303 	lsl.w	r3, r2, r3
    cf7e:	79ba      	ldrb	r2, [r7, #6]
    cf80:	4619      	mov	r1, r3
    cf82:	4b03      	ldr	r3, [pc, #12]	; (cf90 <gpio_set_pin_direction+0x34>)
    cf84:	4798      	blx	r3
}
    cf86:	bf00      	nop
    cf88:	3708      	adds	r7, #8
    cf8a:	46bd      	mov	sp, r7
    cf8c:	bd80      	pop	{r7, pc}
    cf8e:	bf00      	nop
    cf90:	0000cd8d 	.word	0x0000cd8d

0000cf94 <gpio_set_pin_level>:
{
    cf94:	b580      	push	{r7, lr}
    cf96:	b082      	sub	sp, #8
    cf98:	af00      	add	r7, sp, #0
    cf9a:	4603      	mov	r3, r0
    cf9c:	460a      	mov	r2, r1
    cf9e:	71fb      	strb	r3, [r7, #7]
    cfa0:	4613      	mov	r3, r2
    cfa2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    cfa4:	79fb      	ldrb	r3, [r7, #7]
    cfa6:	095b      	lsrs	r3, r3, #5
    cfa8:	b2d8      	uxtb	r0, r3
    cfaa:	79fb      	ldrb	r3, [r7, #7]
    cfac:	f003 031f 	and.w	r3, r3, #31
    cfb0:	2201      	movs	r2, #1
    cfb2:	fa02 f303 	lsl.w	r3, r2, r3
    cfb6:	79ba      	ldrb	r2, [r7, #6]
    cfb8:	4619      	mov	r1, r3
    cfba:	4b03      	ldr	r3, [pc, #12]	; (cfc8 <gpio_set_pin_level+0x34>)
    cfbc:	4798      	blx	r3
}
    cfbe:	bf00      	nop
    cfc0:	3708      	adds	r7, #8
    cfc2:	46bd      	mov	sp, r7
    cfc4:	bd80      	pop	{r7, pc}
    cfc6:	bf00      	nop
    cfc8:	0000ce75 	.word	0x0000ce75

0000cfcc <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    cfcc:	b580      	push	{r7, lr}
    cfce:	b082      	sub	sp, #8
    cfd0:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    cfd2:	2100      	movs	r1, #0
    cfd4:	2008      	movs	r0, #8
    cfd6:	4b24      	ldr	r3, [pc, #144]	; (d068 <QSPI_N25Q256_exit_xip+0x9c>)
    cfd8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    cfda:	2100      	movs	r1, #0
    cfdc:	202b      	movs	r0, #43	; 0x2b
    cfde:	4b22      	ldr	r3, [pc, #136]	; (d068 <QSPI_N25Q256_exit_xip+0x9c>)
    cfe0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    cfe2:	2100      	movs	r1, #0
    cfe4:	202a      	movs	r0, #42	; 0x2a
    cfe6:	4b20      	ldr	r3, [pc, #128]	; (d068 <QSPI_N25Q256_exit_xip+0x9c>)
    cfe8:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    cfea:	2102      	movs	r1, #2
    cfec:	2008      	movs	r0, #8
    cfee:	4b1f      	ldr	r3, [pc, #124]	; (d06c <QSPI_N25Q256_exit_xip+0xa0>)
    cff0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    cff2:	2102      	movs	r1, #2
    cff4:	202b      	movs	r0, #43	; 0x2b
    cff6:	4b1d      	ldr	r3, [pc, #116]	; (d06c <QSPI_N25Q256_exit_xip+0xa0>)
    cff8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    cffa:	2102      	movs	r1, #2
    cffc:	202a      	movs	r0, #42	; 0x2a
    cffe:	4b1b      	ldr	r3, [pc, #108]	; (d06c <QSPI_N25Q256_exit_xip+0xa0>)
    d000:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    d002:	2101      	movs	r1, #1
    d004:	2008      	movs	r0, #8
    d006:	4b1a      	ldr	r3, [pc, #104]	; (d070 <QSPI_N25Q256_exit_xip+0xa4>)
    d008:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    d00a:	2100      	movs	r1, #0
    d00c:	202b      	movs	r0, #43	; 0x2b
    d00e:	4b18      	ldr	r3, [pc, #96]	; (d070 <QSPI_N25Q256_exit_xip+0xa4>)
    d010:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    d012:	2100      	movs	r1, #0
    d014:	202a      	movs	r0, #42	; 0x2a
    d016:	4b16      	ldr	r3, [pc, #88]	; (d070 <QSPI_N25Q256_exit_xip+0xa4>)
    d018:	4798      	blx	r3

	delay_us(1);
    d01a:	2001      	movs	r0, #1
    d01c:	4b15      	ldr	r3, [pc, #84]	; (d074 <QSPI_N25Q256_exit_xip+0xa8>)
    d01e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    d020:	2300      	movs	r3, #0
    d022:	607b      	str	r3, [r7, #4]
    d024:	e010      	b.n	d048 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    d026:	2101      	movs	r1, #1
    d028:	202a      	movs	r0, #42	; 0x2a
    d02a:	4b11      	ldr	r3, [pc, #68]	; (d070 <QSPI_N25Q256_exit_xip+0xa4>)
    d02c:	4798      	blx	r3
		delay_us(1);
    d02e:	2001      	movs	r0, #1
    d030:	4b10      	ldr	r3, [pc, #64]	; (d074 <QSPI_N25Q256_exit_xip+0xa8>)
    d032:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    d034:	2100      	movs	r1, #0
    d036:	202a      	movs	r0, #42	; 0x2a
    d038:	4b0d      	ldr	r3, [pc, #52]	; (d070 <QSPI_N25Q256_exit_xip+0xa4>)
    d03a:	4798      	blx	r3
		delay_us(1);
    d03c:	2001      	movs	r0, #1
    d03e:	4b0d      	ldr	r3, [pc, #52]	; (d074 <QSPI_N25Q256_exit_xip+0xa8>)
    d040:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    d042:	687b      	ldr	r3, [r7, #4]
    d044:	3301      	adds	r3, #1
    d046:	607b      	str	r3, [r7, #4]
    d048:	687b      	ldr	r3, [r7, #4]
    d04a:	2b06      	cmp	r3, #6
    d04c:	ddeb      	ble.n	d026 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    d04e:	2101      	movs	r1, #1
    d050:	202b      	movs	r0, #43	; 0x2b
    d052:	4b07      	ldr	r3, [pc, #28]	; (d070 <QSPI_N25Q256_exit_xip+0xa4>)
    d054:	4798      	blx	r3
	delay_us(1);
    d056:	2001      	movs	r0, #1
    d058:	4b06      	ldr	r3, [pc, #24]	; (d074 <QSPI_N25Q256_exit_xip+0xa8>)
    d05a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    d05c:	4b06      	ldr	r3, [pc, #24]	; (d078 <QSPI_N25Q256_exit_xip+0xac>)
    d05e:	4798      	blx	r3
}
    d060:	bf00      	nop
    d062:	3708      	adds	r7, #8
    d064:	46bd      	mov	sp, r7
    d066:	bd80      	pop	{r7, pc}
    d068:	0000cf3d 	.word	0x0000cf3d
    d06c:	0000cf5d 	.word	0x0000cf5d
    d070:	0000cf95 	.word	0x0000cf95
    d074:	00003611 	.word	0x00003611
    d078:	00002939 	.word	0x00002939

0000d07c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    d07c:	b598      	push	{r3, r4, r7, lr}
    d07e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    d080:	4806      	ldr	r0, [pc, #24]	; (d09c <spi_nor_flash_init+0x20>)
    d082:	4b07      	ldr	r3, [pc, #28]	; (d0a0 <spi_nor_flash_init+0x24>)
    d084:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    d086:	2300      	movs	r3, #0
    d088:	4a06      	ldr	r2, [pc, #24]	; (d0a4 <spi_nor_flash_init+0x28>)
    d08a:	4904      	ldr	r1, [pc, #16]	; (d09c <spi_nor_flash_init+0x20>)
    d08c:	4806      	ldr	r0, [pc, #24]	; (d0a8 <spi_nor_flash_init+0x2c>)
    d08e:	4c07      	ldr	r4, [pc, #28]	; (d0ac <spi_nor_flash_init+0x30>)
    d090:	47a0      	blx	r4
    d092:	4602      	mov	r2, r0
    d094:	4b06      	ldr	r3, [pc, #24]	; (d0b0 <spi_nor_flash_init+0x34>)
    d096:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    d098:	bf00      	nop
    d09a:	bd98      	pop	{r3, r4, r7, pc}
    d09c:	200021b8 	.word	0x200021b8
    d0a0:	00003c29 	.word	0x00003c29
    d0a4:	0000cfcd 	.word	0x0000cfcd
    d0a8:	20002084 	.word	0x20002084
    d0ac:	0000c6a9 	.word	0x0000c6a9
    d0b0:	20002358 	.word	0x20002358

0000d0b4 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    d0b4:	b480      	push	{r7}
    d0b6:	b083      	sub	sp, #12
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d0bc:	687b      	ldr	r3, [r7, #4]
    d0be:	781b      	ldrb	r3, [r3, #0]
    d0c0:	b29a      	uxth	r2, r3
    d0c2:	687b      	ldr	r3, [r7, #4]
    d0c4:	3301      	adds	r3, #1
    d0c6:	781b      	ldrb	r3, [r3, #0]
    d0c8:	b29b      	uxth	r3, r3
    d0ca:	021b      	lsls	r3, r3, #8
    d0cc:	b29b      	uxth	r3, r3
    d0ce:	4413      	add	r3, r2
    d0d0:	b29b      	uxth	r3, r3
}
    d0d2:	4618      	mov	r0, r3
    d0d4:	370c      	adds	r7, #12
    d0d6:	46bd      	mov	sp, r7
    d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0dc:	4770      	bx	lr

0000d0de <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    d0de:	b480      	push	{r7}
    d0e0:	b083      	sub	sp, #12
    d0e2:	af00      	add	r7, sp, #0
    d0e4:	6078      	str	r0, [r7, #4]
	return desc[0];
    d0e6:	687b      	ldr	r3, [r7, #4]
    d0e8:	781b      	ldrb	r3, [r3, #0]
}
    d0ea:	4618      	mov	r0, r3
    d0ec:	370c      	adds	r7, #12
    d0ee:	46bd      	mov	sp, r7
    d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0f4:	4770      	bx	lr
	...

0000d0f8 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    d0f8:	b580      	push	{r7, lr}
    d0fa:	b082      	sub	sp, #8
    d0fc:	af00      	add	r7, sp, #0
    d0fe:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d100:	6878      	ldr	r0, [r7, #4]
    d102:	4b05      	ldr	r3, [pc, #20]	; (d118 <usb_desc_next+0x20>)
    d104:	4798      	blx	r3
    d106:	4603      	mov	r3, r0
    d108:	461a      	mov	r2, r3
    d10a:	687b      	ldr	r3, [r7, #4]
    d10c:	4413      	add	r3, r2
}
    d10e:	4618      	mov	r0, r3
    d110:	3708      	adds	r7, #8
    d112:	46bd      	mov	sp, r7
    d114:	bd80      	pop	{r7, pc}
    d116:	bf00      	nop
    d118:	0000d0df 	.word	0x0000d0df

0000d11c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d11c:	b580      	push	{r7, lr}
    d11e:	b08c      	sub	sp, #48	; 0x30
    d120:	af00      	add	r7, sp, #0
    d122:	6078      	str	r0, [r7, #4]
    d124:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d126:	687b      	ldr	r3, [r7, #4]
    d128:	689b      	ldr	r3, [r3, #8]
    d12a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    d12c:	683b      	ldr	r3, [r7, #0]
    d12e:	681b      	ldr	r3, [r3, #0]
    d130:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d132:	2300      	movs	r3, #0
    d134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d138:	e08f      	b.n	d25a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    d13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d13c:	2b00      	cmp	r3, #0
    d13e:	d102      	bne.n	d146 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    d140:	f06f 0309 	mvn.w	r3, #9
    d144:	e092      	b.n	d26c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d148:	789b      	ldrb	r3, [r3, #2]
    d14a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d14e:	795b      	ldrb	r3, [r3, #5]
    d150:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    d152:	7c7b      	ldrb	r3, [r7, #17]
    d154:	2b02      	cmp	r3, #2
    d156:	d002      	beq.n	d15e <cdcdf_acm_enable+0x42>
    d158:	7c7b      	ldrb	r3, [r7, #17]
    d15a:	2b0a      	cmp	r3, #10
    d15c:	d121      	bne.n	d1a2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d15e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d162:	6a3a      	ldr	r2, [r7, #32]
    d164:	5cd2      	ldrb	r2, [r2, r3]
    d166:	7bbb      	ldrb	r3, [r7, #14]
    d168:	429a      	cmp	r2, r3
    d16a:	d102      	bne.n	d172 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    d16c:	f06f 0311 	mvn.w	r3, #17
    d170:	e07c      	b.n	d26c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    d172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d176:	6a3a      	ldr	r2, [r7, #32]
    d178:	5cd3      	ldrb	r3, [r2, r3]
    d17a:	2bff      	cmp	r3, #255	; 0xff
    d17c:	d002      	beq.n	d184 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    d17e:	f06f 031b 	mvn.w	r3, #27
    d182:	e073      	b.n	d26c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    d184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d188:	7bb9      	ldrb	r1, [r7, #14]
    d18a:	6a3a      	ldr	r2, [r7, #32]
    d18c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d18e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    d190:	683b      	ldr	r3, [r7, #0]
    d192:	685b      	ldr	r3, [r3, #4]
    d194:	2205      	movs	r2, #5
    d196:	4619      	mov	r1, r3
    d198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d19a:	4b36      	ldr	r3, [pc, #216]	; (d274 <cdcdf_acm_enable+0x158>)
    d19c:	4798      	blx	r3
    d19e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d1a0:	e047      	b.n	d232 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    d1a2:	f06f 0309 	mvn.w	r3, #9
    d1a6:	e061      	b.n	d26c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1aa:	789b      	ldrb	r3, [r3, #2]
    d1ac:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1b0:	78db      	ldrb	r3, [r3, #3]
    d1b2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1b6:	3304      	adds	r3, #4
    d1b8:	4618      	mov	r0, r3
    d1ba:	4b2f      	ldr	r3, [pc, #188]	; (d278 <cdcdf_acm_enable+0x15c>)
    d1bc:	4798      	blx	r3
    d1be:	4603      	mov	r3, r0
    d1c0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d1c2:	7ebb      	ldrb	r3, [r7, #26]
    d1c4:	7ef9      	ldrb	r1, [r7, #27]
    d1c6:	8bba      	ldrh	r2, [r7, #28]
    d1c8:	4618      	mov	r0, r3
    d1ca:	4b2c      	ldr	r3, [pc, #176]	; (d27c <cdcdf_acm_enable+0x160>)
    d1cc:	4798      	blx	r3
    d1ce:	4603      	mov	r3, r0
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d002      	beq.n	d1da <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    d1d4:	f06f 0313 	mvn.w	r3, #19
    d1d8:	e048      	b.n	d26c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d1da:	7ebb      	ldrb	r3, [r7, #26]
    d1dc:	b25b      	sxtb	r3, r3
    d1de:	2b00      	cmp	r3, #0
    d1e0:	da0f      	bge.n	d202 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    d1e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d1e6:	7eb9      	ldrb	r1, [r7, #26]
    d1e8:	6a3a      	ldr	r2, [r7, #32]
    d1ea:	4413      	add	r3, r2
    d1ec:	460a      	mov	r2, r1
    d1ee:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    d1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d1f4:	6a3a      	ldr	r2, [r7, #32]
    d1f6:	4413      	add	r3, r2
    d1f8:	789b      	ldrb	r3, [r3, #2]
    d1fa:	4618      	mov	r0, r3
    d1fc:	4b20      	ldr	r3, [pc, #128]	; (d280 <cdcdf_acm_enable+0x164>)
    d1fe:	4798      	blx	r3
    d200:	e007      	b.n	d212 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    d202:	7eba      	ldrb	r2, [r7, #26]
    d204:	6a3b      	ldr	r3, [r7, #32]
    d206:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    d208:	6a3b      	ldr	r3, [r7, #32]
    d20a:	791b      	ldrb	r3, [r3, #4]
    d20c:	4618      	mov	r0, r3
    d20e:	4b1c      	ldr	r3, [pc, #112]	; (d280 <cdcdf_acm_enable+0x164>)
    d210:	4798      	blx	r3
			}
			desc->sod = ep;
    d212:	683b      	ldr	r3, [r7, #0]
    d214:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d216:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d218:	683b      	ldr	r3, [r7, #0]
    d21a:	681b      	ldr	r3, [r3, #0]
    d21c:	4618      	mov	r0, r3
    d21e:	4b19      	ldr	r3, [pc, #100]	; (d284 <cdcdf_acm_enable+0x168>)
    d220:	4798      	blx	r3
    d222:	4602      	mov	r2, r0
    d224:	683b      	ldr	r3, [r7, #0]
    d226:	685b      	ldr	r3, [r3, #4]
    d228:	4619      	mov	r1, r3
    d22a:	4610      	mov	r0, r2
    d22c:	4b16      	ldr	r3, [pc, #88]	; (d288 <cdcdf_acm_enable+0x16c>)
    d22e:	4798      	blx	r3
    d230:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d234:	2b00      	cmp	r3, #0
    d236:	d1b7      	bne.n	d1a8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    d238:	683b      	ldr	r3, [r7, #0]
    d23a:	681b      	ldr	r3, [r3, #0]
    d23c:	4618      	mov	r0, r3
    d23e:	4b11      	ldr	r3, [pc, #68]	; (d284 <cdcdf_acm_enable+0x168>)
    d240:	4798      	blx	r3
    d242:	683b      	ldr	r3, [r7, #0]
    d244:	685b      	ldr	r3, [r3, #4]
    d246:	2204      	movs	r2, #4
    d248:	4619      	mov	r1, r3
    d24a:	4b0a      	ldr	r3, [pc, #40]	; (d274 <cdcdf_acm_enable+0x158>)
    d24c:	4798      	blx	r3
    d24e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d254:	3301      	adds	r3, #1
    d256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d25a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d25e:	2b01      	cmp	r3, #1
    d260:	f67f af6b 	bls.w	d13a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    d264:	4b09      	ldr	r3, [pc, #36]	; (d28c <cdcdf_acm_enable+0x170>)
    d266:	2201      	movs	r2, #1
    d268:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d26a:	2300      	movs	r3, #0
}
    d26c:	4618      	mov	r0, r3
    d26e:	3730      	adds	r7, #48	; 0x30
    d270:	46bd      	mov	sp, r7
    d272:	bd80      	pop	{r7, pc}
    d274:	0000e4dd 	.word	0x0000e4dd
    d278:	0000d0b5 	.word	0x0000d0b5
    d27c:	00004ae5 	.word	0x00004ae5
    d280:	00004bd1 	.word	0x00004bd1
    d284:	0000d0f9 	.word	0x0000d0f9
    d288:	0000e539 	.word	0x0000e539
    d28c:	200020a0 	.word	0x200020a0

0000d290 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d290:	b580      	push	{r7, lr}
    d292:	b088      	sub	sp, #32
    d294:	af00      	add	r7, sp, #0
    d296:	6078      	str	r0, [r7, #4]
    d298:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d29a:	687b      	ldr	r3, [r7, #4]
    d29c:	689b      	ldr	r3, [r3, #8]
    d29e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    d2a0:	683b      	ldr	r3, [r7, #0]
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	d00c      	beq.n	d2c0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d2a6:	683b      	ldr	r3, [r7, #0]
    d2a8:	681b      	ldr	r3, [r3, #0]
    d2aa:	795b      	ldrb	r3, [r3, #5]
    d2ac:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    d2ae:	7c7b      	ldrb	r3, [r7, #17]
    d2b0:	2b02      	cmp	r3, #2
    d2b2:	d005      	beq.n	d2c0 <cdcdf_acm_disable+0x30>
    d2b4:	7c7b      	ldrb	r3, [r7, #17]
    d2b6:	2b0a      	cmp	r3, #10
    d2b8:	d002      	beq.n	d2c0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    d2ba:	f06f 0309 	mvn.w	r3, #9
    d2be:	e035      	b.n	d32c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    d2c0:	2300      	movs	r3, #0
    d2c2:	77fb      	strb	r3, [r7, #31]
    d2c4:	e01f      	b.n	d306 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    d2c6:	7ffb      	ldrb	r3, [r7, #31]
    d2c8:	69ba      	ldr	r2, [r7, #24]
    d2ca:	5cd3      	ldrb	r3, [r2, r3]
    d2cc:	2bff      	cmp	r3, #255	; 0xff
    d2ce:	d016      	beq.n	d2fe <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    d2d0:	7ffb      	ldrb	r3, [r7, #31]
    d2d2:	69ba      	ldr	r2, [r7, #24]
    d2d4:	21ff      	movs	r1, #255	; 0xff
    d2d6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    d2d8:	7ffb      	ldrb	r3, [r7, #31]
    d2da:	69ba      	ldr	r2, [r7, #24]
    d2dc:	4413      	add	r3, r2
    d2de:	789b      	ldrb	r3, [r3, #2]
    d2e0:	2bff      	cmp	r3, #255	; 0xff
    d2e2:	d00d      	beq.n	d300 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d2e4:	7ffb      	ldrb	r3, [r7, #31]
    d2e6:	69ba      	ldr	r2, [r7, #24]
    d2e8:	4413      	add	r3, r2
    d2ea:	789b      	ldrb	r3, [r3, #2]
    d2ec:	4618      	mov	r0, r3
    d2ee:	4b11      	ldr	r3, [pc, #68]	; (d334 <cdcdf_acm_disable+0xa4>)
    d2f0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    d2f2:	7ffb      	ldrb	r3, [r7, #31]
    d2f4:	69ba      	ldr	r2, [r7, #24]
    d2f6:	4413      	add	r3, r2
    d2f8:	22ff      	movs	r2, #255	; 0xff
    d2fa:	709a      	strb	r2, [r3, #2]
    d2fc:	e000      	b.n	d300 <cdcdf_acm_disable+0x70>
			continue;
    d2fe:	bf00      	nop
	for (i = 0; i < 2; i++) {
    d300:	7ffb      	ldrb	r3, [r7, #31]
    d302:	3301      	adds	r3, #1
    d304:	77fb      	strb	r3, [r7, #31]
    d306:	7ffb      	ldrb	r3, [r7, #31]
    d308:	2b01      	cmp	r3, #1
    d30a:	d9dc      	bls.n	d2c6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    d30c:	69bb      	ldr	r3, [r7, #24]
    d30e:	791b      	ldrb	r3, [r3, #4]
    d310:	2bff      	cmp	r3, #255	; 0xff
    d312:	d007      	beq.n	d324 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    d314:	69bb      	ldr	r3, [r7, #24]
    d316:	791b      	ldrb	r3, [r3, #4]
    d318:	4618      	mov	r0, r3
    d31a:	4b06      	ldr	r3, [pc, #24]	; (d334 <cdcdf_acm_disable+0xa4>)
    d31c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    d31e:	69bb      	ldr	r3, [r7, #24]
    d320:	22ff      	movs	r2, #255	; 0xff
    d322:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    d324:	4b04      	ldr	r3, [pc, #16]	; (d338 <cdcdf_acm_disable+0xa8>)
    d326:	2200      	movs	r2, #0
    d328:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d32a:	2300      	movs	r3, #0
}
    d32c:	4618      	mov	r0, r3
    d32e:	3720      	adds	r7, #32
    d330:	46bd      	mov	sp, r7
    d332:	bd80      	pop	{r7, pc}
    d334:	00004b81 	.word	0x00004b81
    d338:	200020a0 	.word	0x200020a0

0000d33c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    d33c:	b580      	push	{r7, lr}
    d33e:	b084      	sub	sp, #16
    d340:	af00      	add	r7, sp, #0
    d342:	60f8      	str	r0, [r7, #12]
    d344:	460b      	mov	r3, r1
    d346:	607a      	str	r2, [r7, #4]
    d348:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    d34a:	7afb      	ldrb	r3, [r7, #11]
    d34c:	2b01      	cmp	r3, #1
    d34e:	d009      	beq.n	d364 <cdcdf_acm_ctrl+0x28>
    d350:	2b02      	cmp	r3, #2
    d352:	d00d      	beq.n	d370 <cdcdf_acm_ctrl+0x34>
    d354:	2b00      	cmp	r3, #0
    d356:	d10e      	bne.n	d376 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    d358:	6879      	ldr	r1, [r7, #4]
    d35a:	68f8      	ldr	r0, [r7, #12]
    d35c:	4b09      	ldr	r3, [pc, #36]	; (d384 <cdcdf_acm_ctrl+0x48>)
    d35e:	4798      	blx	r3
    d360:	4603      	mov	r3, r0
    d362:	e00a      	b.n	d37a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    d364:	6879      	ldr	r1, [r7, #4]
    d366:	68f8      	ldr	r0, [r7, #12]
    d368:	4b07      	ldr	r3, [pc, #28]	; (d388 <cdcdf_acm_ctrl+0x4c>)
    d36a:	4798      	blx	r3
    d36c:	4603      	mov	r3, r0
    d36e:	e004      	b.n	d37a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    d370:	f06f 031a 	mvn.w	r3, #26
    d374:	e001      	b.n	d37a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    d376:	f06f 030c 	mvn.w	r3, #12
	}
}
    d37a:	4618      	mov	r0, r3
    d37c:	3710      	adds	r7, #16
    d37e:	46bd      	mov	sp, r7
    d380:	bd80      	pop	{r7, pc}
    d382:	bf00      	nop
    d384:	0000d11d 	.word	0x0000d11d
    d388:	0000d291 	.word	0x0000d291

0000d38c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d38c:	b590      	push	{r4, r7, lr}
    d38e:	b087      	sub	sp, #28
    d390:	af00      	add	r7, sp, #0
    d392:	4603      	mov	r3, r0
    d394:	6039      	str	r1, [r7, #0]
    d396:	71fb      	strb	r3, [r7, #7]
    d398:	4613      	mov	r3, r2
    d39a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    d39c:	683b      	ldr	r3, [r7, #0]
    d39e:	799a      	ldrb	r2, [r3, #6]
    d3a0:	79db      	ldrb	r3, [r3, #7]
    d3a2:	021b      	lsls	r3, r3, #8
    d3a4:	4313      	orrs	r3, r2
    d3a6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    d3a8:	4b2b      	ldr	r3, [pc, #172]	; (d458 <cdcdf_acm_set_req+0xcc>)
    d3aa:	4798      	blx	r3
    d3ac:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    d3ae:	683b      	ldr	r3, [r7, #0]
    d3b0:	785b      	ldrb	r3, [r3, #1]
    d3b2:	2b20      	cmp	r3, #32
    d3b4:	d002      	beq.n	d3bc <cdcdf_acm_set_req+0x30>
    d3b6:	2b22      	cmp	r3, #34	; 0x22
    d3b8:	d034      	beq.n	d424 <cdcdf_acm_set_req+0x98>
    d3ba:	e046      	b.n	d44a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    d3bc:	8afb      	ldrh	r3, [r7, #22]
    d3be:	2b07      	cmp	r3, #7
    d3c0:	d002      	beq.n	d3c8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    d3c2:	f04f 33ff 	mov.w	r3, #4294967295
    d3c6:	e042      	b.n	d44e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    d3c8:	79bb      	ldrb	r3, [r7, #6]
    d3ca:	2b00      	cmp	r3, #0
    d3cc:	d107      	bne.n	d3de <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    d3ce:	8afa      	ldrh	r2, [r7, #22]
    d3d0:	79f8      	ldrb	r0, [r7, #7]
    d3d2:	2300      	movs	r3, #0
    d3d4:	6939      	ldr	r1, [r7, #16]
    d3d6:	4c21      	ldr	r4, [pc, #132]	; (d45c <cdcdf_acm_set_req+0xd0>)
    d3d8:	47a0      	blx	r4
    d3da:	4603      	mov	r3, r0
    d3dc:	e037      	b.n	d44e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    d3de:	693a      	ldr	r2, [r7, #16]
    d3e0:	f107 0308 	add.w	r3, r7, #8
    d3e4:	6810      	ldr	r0, [r2, #0]
    d3e6:	6018      	str	r0, [r3, #0]
    d3e8:	8891      	ldrh	r1, [r2, #4]
    d3ea:	7992      	ldrb	r2, [r2, #6]
    d3ec:	8099      	strh	r1, [r3, #4]
    d3ee:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    d3f0:	4b1b      	ldr	r3, [pc, #108]	; (d460 <cdcdf_acm_set_req+0xd4>)
    d3f2:	681b      	ldr	r3, [r3, #0]
    d3f4:	2b00      	cmp	r3, #0
    d3f6:	d008      	beq.n	d40a <cdcdf_acm_set_req+0x7e>
    d3f8:	4b19      	ldr	r3, [pc, #100]	; (d460 <cdcdf_acm_set_req+0xd4>)
    d3fa:	681b      	ldr	r3, [r3, #0]
    d3fc:	f107 0208 	add.w	r2, r7, #8
    d400:	4610      	mov	r0, r2
    d402:	4798      	blx	r3
    d404:	4603      	mov	r3, r0
    d406:	2b00      	cmp	r3, #0
    d408:	d00a      	beq.n	d420 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    d40a:	4b16      	ldr	r3, [pc, #88]	; (d464 <cdcdf_acm_set_req+0xd8>)
    d40c:	f107 0208 	add.w	r2, r7, #8
    d410:	e892 0003 	ldmia.w	r2, {r0, r1}
    d414:	6018      	str	r0, [r3, #0]
    d416:	3304      	adds	r3, #4
    d418:	8019      	strh	r1, [r3, #0]
    d41a:	3302      	adds	r3, #2
    d41c:	0c0a      	lsrs	r2, r1, #16
    d41e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    d420:	2300      	movs	r3, #0
    d422:	e014      	b.n	d44e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    d424:	2300      	movs	r3, #0
    d426:	2200      	movs	r2, #0
    d428:	2100      	movs	r1, #0
    d42a:	2000      	movs	r0, #0
    d42c:	4c0b      	ldr	r4, [pc, #44]	; (d45c <cdcdf_acm_set_req+0xd0>)
    d42e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    d430:	4b0d      	ldr	r3, [pc, #52]	; (d468 <cdcdf_acm_set_req+0xdc>)
    d432:	681b      	ldr	r3, [r3, #0]
    d434:	2b00      	cmp	r3, #0
    d436:	d006      	beq.n	d446 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    d438:	4b0b      	ldr	r3, [pc, #44]	; (d468 <cdcdf_acm_set_req+0xdc>)
    d43a:	681b      	ldr	r3, [r3, #0]
    d43c:	683a      	ldr	r2, [r7, #0]
    d43e:	8852      	ldrh	r2, [r2, #2]
    d440:	b292      	uxth	r2, r2
    d442:	4610      	mov	r0, r2
    d444:	4798      	blx	r3
		}
		return ERR_NONE;
    d446:	2300      	movs	r3, #0
    d448:	e001      	b.n	d44e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    d44a:	f06f 030c 	mvn.w	r3, #12
	}
}
    d44e:	4618      	mov	r0, r3
    d450:	371c      	adds	r7, #28
    d452:	46bd      	mov	sp, r7
    d454:	bd90      	pop	{r4, r7, pc}
    d456:	bf00      	nop
    d458:	0000e3d9 	.word	0x0000e3d9
    d45c:	0000e24d 	.word	0x0000e24d
    d460:	200020b4 	.word	0x200020b4
    d464:	200020a8 	.word	0x200020a8
    d468:	200020b0 	.word	0x200020b0

0000d46c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d46c:	b590      	push	{r4, r7, lr}
    d46e:	b085      	sub	sp, #20
    d470:	af00      	add	r7, sp, #0
    d472:	4603      	mov	r3, r0
    d474:	6039      	str	r1, [r7, #0]
    d476:	71fb      	strb	r3, [r7, #7]
    d478:	4613      	mov	r3, r2
    d47a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    d47c:	683b      	ldr	r3, [r7, #0]
    d47e:	799a      	ldrb	r2, [r3, #6]
    d480:	79db      	ldrb	r3, [r3, #7]
    d482:	021b      	lsls	r3, r3, #8
    d484:	4313      	orrs	r3, r2
    d486:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    d488:	79bb      	ldrb	r3, [r7, #6]
    d48a:	2b01      	cmp	r3, #1
    d48c:	d101      	bne.n	d492 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    d48e:	2300      	movs	r3, #0
    d490:	e013      	b.n	d4ba <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    d492:	683b      	ldr	r3, [r7, #0]
    d494:	785b      	ldrb	r3, [r3, #1]
    d496:	2b21      	cmp	r3, #33	; 0x21
    d498:	d10d      	bne.n	d4b6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    d49a:	89fb      	ldrh	r3, [r7, #14]
    d49c:	2b07      	cmp	r3, #7
    d49e:	d002      	beq.n	d4a6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    d4a0:	f04f 33ff 	mov.w	r3, #4294967295
    d4a4:	e009      	b.n	d4ba <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    d4a6:	89fa      	ldrh	r2, [r7, #14]
    d4a8:	79f8      	ldrb	r0, [r7, #7]
    d4aa:	2300      	movs	r3, #0
    d4ac:	4905      	ldr	r1, [pc, #20]	; (d4c4 <cdcdf_acm_get_req+0x58>)
    d4ae:	4c06      	ldr	r4, [pc, #24]	; (d4c8 <cdcdf_acm_get_req+0x5c>)
    d4b0:	47a0      	blx	r4
    d4b2:	4603      	mov	r3, r0
    d4b4:	e001      	b.n	d4ba <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    d4b6:	f06f 030c 	mvn.w	r3, #12
	}
}
    d4ba:	4618      	mov	r0, r3
    d4bc:	3714      	adds	r7, #20
    d4be:	46bd      	mov	sp, r7
    d4c0:	bd90      	pop	{r4, r7, pc}
    d4c2:	bf00      	nop
    d4c4:	200020a8 	.word	0x200020a8
    d4c8:	0000e24d 	.word	0x0000e24d

0000d4cc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d4cc:	b580      	push	{r7, lr}
    d4ce:	b082      	sub	sp, #8
    d4d0:	af00      	add	r7, sp, #0
    d4d2:	4603      	mov	r3, r0
    d4d4:	6039      	str	r1, [r7, #0]
    d4d6:	71fb      	strb	r3, [r7, #7]
    d4d8:	4613      	mov	r3, r2
    d4da:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    d4dc:	683b      	ldr	r3, [r7, #0]
    d4de:	781b      	ldrb	r3, [r3, #0]
    d4e0:	095b      	lsrs	r3, r3, #5
    d4e2:	b2db      	uxtb	r3, r3
    d4e4:	f003 0303 	and.w	r3, r3, #3
    d4e8:	2b01      	cmp	r3, #1
    d4ea:	d002      	beq.n	d4f2 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    d4ec:	f06f 0309 	mvn.w	r3, #9
    d4f0:	e026      	b.n	d540 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    d4f2:	683b      	ldr	r3, [r7, #0]
    d4f4:	889b      	ldrh	r3, [r3, #4]
    d4f6:	b29a      	uxth	r2, r3
    d4f8:	4b13      	ldr	r3, [pc, #76]	; (d548 <cdcdf_acm_req+0x7c>)
    d4fa:	781b      	ldrb	r3, [r3, #0]
    d4fc:	b29b      	uxth	r3, r3
    d4fe:	429a      	cmp	r2, r3
    d500:	d007      	beq.n	d512 <cdcdf_acm_req+0x46>
    d502:	683b      	ldr	r3, [r7, #0]
    d504:	889b      	ldrh	r3, [r3, #4]
    d506:	b29a      	uxth	r2, r3
    d508:	4b0f      	ldr	r3, [pc, #60]	; (d548 <cdcdf_acm_req+0x7c>)
    d50a:	785b      	ldrb	r3, [r3, #1]
    d50c:	b29b      	uxth	r3, r3
    d50e:	429a      	cmp	r2, r3
    d510:	d114      	bne.n	d53c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    d512:	683b      	ldr	r3, [r7, #0]
    d514:	781b      	ldrb	r3, [r3, #0]
    d516:	b25b      	sxtb	r3, r3
    d518:	2b00      	cmp	r3, #0
    d51a:	da07      	bge.n	d52c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    d51c:	79ba      	ldrb	r2, [r7, #6]
    d51e:	79fb      	ldrb	r3, [r7, #7]
    d520:	6839      	ldr	r1, [r7, #0]
    d522:	4618      	mov	r0, r3
    d524:	4b09      	ldr	r3, [pc, #36]	; (d54c <cdcdf_acm_req+0x80>)
    d526:	4798      	blx	r3
    d528:	4603      	mov	r3, r0
    d52a:	e009      	b.n	d540 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    d52c:	79ba      	ldrb	r2, [r7, #6]
    d52e:	79fb      	ldrb	r3, [r7, #7]
    d530:	6839      	ldr	r1, [r7, #0]
    d532:	4618      	mov	r0, r3
    d534:	4b06      	ldr	r3, [pc, #24]	; (d550 <cdcdf_acm_req+0x84>)
    d536:	4798      	blx	r3
    d538:	4603      	mov	r3, r0
    d53a:	e001      	b.n	d540 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    d53c:	f06f 0309 	mvn.w	r3, #9
	}
}
    d540:	4618      	mov	r0, r3
    d542:	3708      	adds	r7, #8
    d544:	46bd      	mov	sp, r7
    d546:	bd80      	pop	{r7, pc}
    d548:	200020a0 	.word	0x200020a0
    d54c:	0000d46d 	.word	0x0000d46d
    d550:	0000d38d 	.word	0x0000d38d

0000d554 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    d554:	b580      	push	{r7, lr}
    d556:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    d558:	4b0b      	ldr	r3, [pc, #44]	; (d588 <cdcdf_acm_init+0x34>)
    d55a:	4798      	blx	r3
    d55c:	4603      	mov	r3, r0
    d55e:	2b01      	cmp	r3, #1
    d560:	d902      	bls.n	d568 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    d562:	f06f 0310 	mvn.w	r3, #16
    d566:	e00d      	b.n	d584 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    d568:	4b08      	ldr	r3, [pc, #32]	; (d58c <cdcdf_acm_init+0x38>)
    d56a:	4a09      	ldr	r2, [pc, #36]	; (d590 <cdcdf_acm_init+0x3c>)
    d56c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    d56e:	4b07      	ldr	r3, [pc, #28]	; (d58c <cdcdf_acm_init+0x38>)
    d570:	4a08      	ldr	r2, [pc, #32]	; (d594 <cdcdf_acm_init+0x40>)
    d572:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    d574:	4805      	ldr	r0, [pc, #20]	; (d58c <cdcdf_acm_init+0x38>)
    d576:	4b08      	ldr	r3, [pc, #32]	; (d598 <cdcdf_acm_init+0x44>)
    d578:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    d57a:	4908      	ldr	r1, [pc, #32]	; (d59c <cdcdf_acm_init+0x48>)
    d57c:	2001      	movs	r0, #1
    d57e:	4b08      	ldr	r3, [pc, #32]	; (d5a0 <cdcdf_acm_init+0x4c>)
    d580:	4798      	blx	r3
	return ERR_NONE;
    d582:	2300      	movs	r3, #0
}
    d584:	4618      	mov	r0, r3
    d586:	bd80      	pop	{r7, pc}
    d588:	0000e3f1 	.word	0x0000e3f1
    d58c:	20002094 	.word	0x20002094
    d590:	0000d33d 	.word	0x0000d33d
    d594:	200020a0 	.word	0x200020a0
    d598:	0000e359 	.word	0x0000e359
    d59c:	200000ac 	.word	0x200000ac
    d5a0:	0000e289 	.word	0x0000e289

0000d5a4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    d5a4:	b590      	push	{r4, r7, lr}
    d5a6:	b083      	sub	sp, #12
    d5a8:	af00      	add	r7, sp, #0
    d5aa:	6078      	str	r0, [r7, #4]
    d5ac:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    d5ae:	4b0b      	ldr	r3, [pc, #44]	; (d5dc <cdcdf_acm_read+0x38>)
    d5b0:	4798      	blx	r3
    d5b2:	4603      	mov	r3, r0
    d5b4:	f083 0301 	eor.w	r3, r3, #1
    d5b8:	b2db      	uxtb	r3, r3
    d5ba:	2b00      	cmp	r3, #0
    d5bc:	d002      	beq.n	d5c4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    d5be:	f06f 0310 	mvn.w	r3, #16
    d5c2:	e007      	b.n	d5d4 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    d5c4:	4b06      	ldr	r3, [pc, #24]	; (d5e0 <cdcdf_acm_read+0x3c>)
    d5c6:	7918      	ldrb	r0, [r3, #4]
    d5c8:	2300      	movs	r3, #0
    d5ca:	683a      	ldr	r2, [r7, #0]
    d5cc:	6879      	ldr	r1, [r7, #4]
    d5ce:	4c05      	ldr	r4, [pc, #20]	; (d5e4 <cdcdf_acm_read+0x40>)
    d5d0:	47a0      	blx	r4
    d5d2:	4603      	mov	r3, r0
}
    d5d4:	4618      	mov	r0, r3
    d5d6:	370c      	adds	r7, #12
    d5d8:	46bd      	mov	sp, r7
    d5da:	bd90      	pop	{r4, r7, pc}
    d5dc:	0000d6c9 	.word	0x0000d6c9
    d5e0:	200020a0 	.word	0x200020a0
    d5e4:	0000e24d 	.word	0x0000e24d

0000d5e8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    d5e8:	b590      	push	{r4, r7, lr}
    d5ea:	b083      	sub	sp, #12
    d5ec:	af00      	add	r7, sp, #0
    d5ee:	6078      	str	r0, [r7, #4]
    d5f0:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    d5f2:	4b0b      	ldr	r3, [pc, #44]	; (d620 <cdcdf_acm_write+0x38>)
    d5f4:	4798      	blx	r3
    d5f6:	4603      	mov	r3, r0
    d5f8:	f083 0301 	eor.w	r3, r3, #1
    d5fc:	b2db      	uxtb	r3, r3
    d5fe:	2b00      	cmp	r3, #0
    d600:	d002      	beq.n	d608 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    d602:	f06f 0310 	mvn.w	r3, #16
    d606:	e007      	b.n	d618 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    d608:	4b06      	ldr	r3, [pc, #24]	; (d624 <cdcdf_acm_write+0x3c>)
    d60a:	78d8      	ldrb	r0, [r3, #3]
    d60c:	2301      	movs	r3, #1
    d60e:	683a      	ldr	r2, [r7, #0]
    d610:	6879      	ldr	r1, [r7, #4]
    d612:	4c05      	ldr	r4, [pc, #20]	; (d628 <cdcdf_acm_write+0x40>)
    d614:	47a0      	blx	r4
    d616:	4603      	mov	r3, r0
}
    d618:	4618      	mov	r0, r3
    d61a:	370c      	adds	r7, #12
    d61c:	46bd      	mov	sp, r7
    d61e:	bd90      	pop	{r4, r7, pc}
    d620:	0000d6c9 	.word	0x0000d6c9
    d624:	200020a0 	.word	0x200020a0
    d628:	0000e24d 	.word	0x0000e24d

0000d62c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    d62c:	b580      	push	{r7, lr}
    d62e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    d630:	4b05      	ldr	r3, [pc, #20]	; (d648 <cdcdf_acm_stop_xfer+0x1c>)
    d632:	78db      	ldrb	r3, [r3, #3]
    d634:	4618      	mov	r0, r3
    d636:	4b05      	ldr	r3, [pc, #20]	; (d64c <cdcdf_acm_stop_xfer+0x20>)
    d638:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    d63a:	4b03      	ldr	r3, [pc, #12]	; (d648 <cdcdf_acm_stop_xfer+0x1c>)
    d63c:	791b      	ldrb	r3, [r3, #4]
    d63e:	4618      	mov	r0, r3
    d640:	4b02      	ldr	r3, [pc, #8]	; (d64c <cdcdf_acm_stop_xfer+0x20>)
    d642:	4798      	blx	r3
}
    d644:	bf00      	nop
    d646:	bd80      	pop	{r7, pc}
    d648:	200020a0 	.word	0x200020a0
    d64c:	00004da9 	.word	0x00004da9

0000d650 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    d650:	b580      	push	{r7, lr}
    d652:	b082      	sub	sp, #8
    d654:	af00      	add	r7, sp, #0
    d656:	4603      	mov	r3, r0
    d658:	6039      	str	r1, [r7, #0]
    d65a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    d65c:	79fb      	ldrb	r3, [r7, #7]
    d65e:	2b03      	cmp	r3, #3
    d660:	d822      	bhi.n	d6a8 <cdcdf_acm_register_callback+0x58>
    d662:	a201      	add	r2, pc, #4	; (adr r2, d668 <cdcdf_acm_register_callback+0x18>)
    d664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d668:	0000d679 	.word	0x0000d679
    d66c:	0000d689 	.word	0x0000d689
    d670:	0000d699 	.word	0x0000d699
    d674:	0000d6a1 	.word	0x0000d6a1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    d678:	4b0f      	ldr	r3, [pc, #60]	; (d6b8 <cdcdf_acm_register_callback+0x68>)
    d67a:	791b      	ldrb	r3, [r3, #4]
    d67c:	683a      	ldr	r2, [r7, #0]
    d67e:	2102      	movs	r1, #2
    d680:	4618      	mov	r0, r3
    d682:	4b0e      	ldr	r3, [pc, #56]	; (d6bc <cdcdf_acm_register_callback+0x6c>)
    d684:	4798      	blx	r3
		break;
    d686:	e012      	b.n	d6ae <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    d688:	4b0b      	ldr	r3, [pc, #44]	; (d6b8 <cdcdf_acm_register_callback+0x68>)
    d68a:	78db      	ldrb	r3, [r3, #3]
    d68c:	683a      	ldr	r2, [r7, #0]
    d68e:	2102      	movs	r1, #2
    d690:	4618      	mov	r0, r3
    d692:	4b0a      	ldr	r3, [pc, #40]	; (d6bc <cdcdf_acm_register_callback+0x6c>)
    d694:	4798      	blx	r3
		break;
    d696:	e00a      	b.n	d6ae <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    d698:	4a09      	ldr	r2, [pc, #36]	; (d6c0 <cdcdf_acm_register_callback+0x70>)
    d69a:	683b      	ldr	r3, [r7, #0]
    d69c:	6013      	str	r3, [r2, #0]
		break;
    d69e:	e006      	b.n	d6ae <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    d6a0:	4a08      	ldr	r2, [pc, #32]	; (d6c4 <cdcdf_acm_register_callback+0x74>)
    d6a2:	683b      	ldr	r3, [r7, #0]
    d6a4:	6013      	str	r3, [r2, #0]
		break;
    d6a6:	e002      	b.n	d6ae <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    d6a8:	f06f 030c 	mvn.w	r3, #12
    d6ac:	e000      	b.n	d6b0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    d6ae:	2300      	movs	r3, #0
}
    d6b0:	4618      	mov	r0, r3
    d6b2:	3708      	adds	r7, #8
    d6b4:	46bd      	mov	sp, r7
    d6b6:	bd80      	pop	{r7, pc}
    d6b8:	200020a0 	.word	0x200020a0
    d6bc:	00004ed5 	.word	0x00004ed5
    d6c0:	200020b4 	.word	0x200020b4
    d6c4:	200020b0 	.word	0x200020b0

0000d6c8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    d6c8:	b480      	push	{r7}
    d6ca:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    d6cc:	4b03      	ldr	r3, [pc, #12]	; (d6dc <cdcdf_acm_is_enabled+0x14>)
    d6ce:	795b      	ldrb	r3, [r3, #5]
}
    d6d0:	4618      	mov	r0, r3
    d6d2:	46bd      	mov	sp, r7
    d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6d8:	4770      	bx	lr
    d6da:	bf00      	nop
    d6dc:	200020a0 	.word	0x200020a0

0000d6e0 <usb_get_u16>:
{
    d6e0:	b480      	push	{r7}
    d6e2:	b083      	sub	sp, #12
    d6e4:	af00      	add	r7, sp, #0
    d6e6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d6e8:	687b      	ldr	r3, [r7, #4]
    d6ea:	781b      	ldrb	r3, [r3, #0]
    d6ec:	b29a      	uxth	r2, r3
    d6ee:	687b      	ldr	r3, [r7, #4]
    d6f0:	3301      	adds	r3, #1
    d6f2:	781b      	ldrb	r3, [r3, #0]
    d6f4:	b29b      	uxth	r3, r3
    d6f6:	021b      	lsls	r3, r3, #8
    d6f8:	b29b      	uxth	r3, r3
    d6fa:	4413      	add	r3, r2
    d6fc:	b29b      	uxth	r3, r3
}
    d6fe:	4618      	mov	r0, r3
    d700:	370c      	adds	r7, #12
    d702:	46bd      	mov	sp, r7
    d704:	f85d 7b04 	ldr.w	r7, [sp], #4
    d708:	4770      	bx	lr

0000d70a <usb_desc_len>:
{
    d70a:	b480      	push	{r7}
    d70c:	b083      	sub	sp, #12
    d70e:	af00      	add	r7, sp, #0
    d710:	6078      	str	r0, [r7, #4]
	return desc[0];
    d712:	687b      	ldr	r3, [r7, #4]
    d714:	781b      	ldrb	r3, [r3, #0]
}
    d716:	4618      	mov	r0, r3
    d718:	370c      	adds	r7, #12
    d71a:	46bd      	mov	sp, r7
    d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d720:	4770      	bx	lr
	...

0000d724 <usb_desc_next>:
{
    d724:	b580      	push	{r7, lr}
    d726:	b082      	sub	sp, #8
    d728:	af00      	add	r7, sp, #0
    d72a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d72c:	6878      	ldr	r0, [r7, #4]
    d72e:	4b05      	ldr	r3, [pc, #20]	; (d744 <usb_desc_next+0x20>)
    d730:	4798      	blx	r3
    d732:	4603      	mov	r3, r0
    d734:	461a      	mov	r2, r3
    d736:	687b      	ldr	r3, [r7, #4]
    d738:	4413      	add	r3, r2
}
    d73a:	4618      	mov	r0, r3
    d73c:	3708      	adds	r7, #8
    d73e:	46bd      	mov	sp, r7
    d740:	bd80      	pop	{r7, pc}
    d742:	bf00      	nop
    d744:	0000d70b 	.word	0x0000d70b

0000d748 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    d748:	b580      	push	{r7, lr}
    d74a:	b082      	sub	sp, #8
    d74c:	af00      	add	r7, sp, #0
    d74e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d750:	687b      	ldr	r3, [r7, #4]
    d752:	3302      	adds	r3, #2
    d754:	4618      	mov	r0, r3
    d756:	4b03      	ldr	r3, [pc, #12]	; (d764 <usb_cfg_desc_total_len+0x1c>)
    d758:	4798      	blx	r3
    d75a:	4603      	mov	r3, r0
}
    d75c:	4618      	mov	r0, r3
    d75e:	3708      	adds	r7, #8
    d760:	46bd      	mov	sp, r7
    d762:	bd80      	pop	{r7, pc}
    d764:	0000d6e1 	.word	0x0000d6e1

0000d768 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    d768:	b590      	push	{r4, r7, lr}
    d76a:	b085      	sub	sp, #20
    d76c:	af00      	add	r7, sp, #0
    d76e:	4603      	mov	r3, r0
    d770:	6039      	str	r1, [r7, #0]
    d772:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    d774:	2300      	movs	r3, #0
    d776:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    d778:	683b      	ldr	r3, [r7, #0]
    d77a:	799a      	ldrb	r2, [r3, #6]
    d77c:	79db      	ldrb	r3, [r3, #7]
    d77e:	021b      	lsls	r3, r3, #8
    d780:	4313      	orrs	r3, r2
    d782:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    d784:	897b      	ldrh	r3, [r7, #10]
    d786:	2b12      	cmp	r3, #18
    d788:	d901      	bls.n	d78e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    d78a:	2312      	movs	r3, #18
    d78c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    d78e:	68fb      	ldr	r3, [r7, #12]
    d790:	2b00      	cmp	r3, #0
    d792:	d10a      	bne.n	d7aa <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d794:	4b0f      	ldr	r3, [pc, #60]	; (d7d4 <usbdc_get_dev_desc+0x6c>)
    d796:	681b      	ldr	r3, [r3, #0]
    d798:	6818      	ldr	r0, [r3, #0]
    d79a:	4b0e      	ldr	r3, [pc, #56]	; (d7d4 <usbdc_get_dev_desc+0x6c>)
    d79c:	681b      	ldr	r3, [r3, #0]
    d79e:	685b      	ldr	r3, [r3, #4]
    d7a0:	2201      	movs	r2, #1
    d7a2:	4619      	mov	r1, r3
    d7a4:	4b0c      	ldr	r3, [pc, #48]	; (d7d8 <usbdc_get_dev_desc+0x70>)
    d7a6:	4798      	blx	r3
    d7a8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    d7aa:	68fb      	ldr	r3, [r7, #12]
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d101      	bne.n	d7b4 <usbdc_get_dev_desc+0x4c>
		return false;
    d7b0:	2300      	movs	r3, #0
    d7b2:	e00b      	b.n	d7cc <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    d7b4:	897a      	ldrh	r2, [r7, #10]
    d7b6:	79f8      	ldrb	r0, [r7, #7]
    d7b8:	2300      	movs	r3, #0
    d7ba:	68f9      	ldr	r1, [r7, #12]
    d7bc:	4c07      	ldr	r4, [pc, #28]	; (d7dc <usbdc_get_dev_desc+0x74>)
    d7be:	47a0      	blx	r4
    d7c0:	4603      	mov	r3, r0
    d7c2:	2b00      	cmp	r3, #0
    d7c4:	d001      	beq.n	d7ca <usbdc_get_dev_desc+0x62>
		return false;
    d7c6:	2300      	movs	r3, #0
    d7c8:	e000      	b.n	d7cc <usbdc_get_dev_desc+0x64>
	}
	return true;
    d7ca:	2301      	movs	r3, #1
}
    d7cc:	4618      	mov	r0, r3
    d7ce:	3714      	adds	r7, #20
    d7d0:	46bd      	mov	sp, r7
    d7d2:	bd90      	pop	{r4, r7, pc}
    d7d4:	200020b8 	.word	0x200020b8
    d7d8:	0000e4dd 	.word	0x0000e4dd
    d7dc:	0000e24d 	.word	0x0000e24d

0000d7e0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    d7e0:	b590      	push	{r4, r7, lr}
    d7e2:	b087      	sub	sp, #28
    d7e4:	af00      	add	r7, sp, #0
    d7e6:	4603      	mov	r3, r0
    d7e8:	6039      	str	r1, [r7, #0]
    d7ea:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    d7ec:	2300      	movs	r3, #0
    d7ee:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    d7f0:	683b      	ldr	r3, [r7, #0]
    d7f2:	799a      	ldrb	r2, [r3, #6]
    d7f4:	79db      	ldrb	r3, [r3, #7]
    d7f6:	021b      	lsls	r3, r3, #8
    d7f8:	4313      	orrs	r3, r2
    d7fa:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    d7fc:	683b      	ldr	r3, [r7, #0]
    d7fe:	885b      	ldrh	r3, [r3, #2]
    d800:	b29b      	uxth	r3, r3
    d802:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d804:	8a7a      	ldrh	r2, [r7, #18]
    d806:	4b1e      	ldr	r3, [pc, #120]	; (d880 <usbdc_get_cfg_desc+0xa0>)
    d808:	7f1b      	ldrb	r3, [r3, #28]
    d80a:	3b01      	subs	r3, #1
    d80c:	4013      	ands	r3, r2
    d80e:	2b00      	cmp	r3, #0
    d810:	bf0c      	ite	eq
    d812:	2301      	moveq	r3, #1
    d814:	2300      	movne	r3, #0
    d816:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d818:	697b      	ldr	r3, [r7, #20]
    d81a:	2b00      	cmp	r3, #0
    d81c:	d10c      	bne.n	d838 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d81e:	4b18      	ldr	r3, [pc, #96]	; (d880 <usbdc_get_cfg_desc+0xa0>)
    d820:	681b      	ldr	r3, [r3, #0]
    d822:	6818      	ldr	r0, [r3, #0]
    d824:	4b16      	ldr	r3, [pc, #88]	; (d880 <usbdc_get_cfg_desc+0xa0>)
    d826:	681b      	ldr	r3, [r3, #0]
    d828:	6859      	ldr	r1, [r3, #4]
    d82a:	7c3b      	ldrb	r3, [r7, #16]
    d82c:	3301      	adds	r3, #1
    d82e:	b2db      	uxtb	r3, r3
    d830:	461a      	mov	r2, r3
    d832:	4b14      	ldr	r3, [pc, #80]	; (d884 <usbdc_get_cfg_desc+0xa4>)
    d834:	4798      	blx	r3
    d836:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    d838:	697b      	ldr	r3, [r7, #20]
    d83a:	2b00      	cmp	r3, #0
    d83c:	d101      	bne.n	d842 <usbdc_get_cfg_desc+0x62>
		return false;
    d83e:	2300      	movs	r3, #0
    d840:	e019      	b.n	d876 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    d842:	6978      	ldr	r0, [r7, #20]
    d844:	4b10      	ldr	r3, [pc, #64]	; (d888 <usbdc_get_cfg_desc+0xa8>)
    d846:	4798      	blx	r3
    d848:	4603      	mov	r3, r0
    d84a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    d84c:	8a7a      	ldrh	r2, [r7, #18]
    d84e:	89fb      	ldrh	r3, [r7, #14]
    d850:	429a      	cmp	r2, r3
    d852:	d802      	bhi.n	d85a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    d854:	2300      	movs	r3, #0
    d856:	747b      	strb	r3, [r7, #17]
    d858:	e001      	b.n	d85e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    d85a:	89fb      	ldrh	r3, [r7, #14]
    d85c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d85e:	8a7a      	ldrh	r2, [r7, #18]
    d860:	7c7b      	ldrb	r3, [r7, #17]
    d862:	79f8      	ldrb	r0, [r7, #7]
    d864:	6979      	ldr	r1, [r7, #20]
    d866:	4c09      	ldr	r4, [pc, #36]	; (d88c <usbdc_get_cfg_desc+0xac>)
    d868:	47a0      	blx	r4
    d86a:	4603      	mov	r3, r0
    d86c:	2b00      	cmp	r3, #0
    d86e:	d001      	beq.n	d874 <usbdc_get_cfg_desc+0x94>
		return false;
    d870:	2300      	movs	r3, #0
    d872:	e000      	b.n	d876 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    d874:	2301      	movs	r3, #1
}
    d876:	4618      	mov	r0, r3
    d878:	371c      	adds	r7, #28
    d87a:	46bd      	mov	sp, r7
    d87c:	bd90      	pop	{r4, r7, pc}
    d87e:	bf00      	nop
    d880:	200020b8 	.word	0x200020b8
    d884:	0000e59d 	.word	0x0000e59d
    d888:	0000d749 	.word	0x0000d749
    d88c:	0000e24d 	.word	0x0000e24d

0000d890 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    d890:	b590      	push	{r4, r7, lr}
    d892:	b085      	sub	sp, #20
    d894:	af00      	add	r7, sp, #0
    d896:	4603      	mov	r3, r0
    d898:	6039      	str	r1, [r7, #0]
    d89a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    d89c:	683b      	ldr	r3, [r7, #0]
    d89e:	799a      	ldrb	r2, [r3, #6]
    d8a0:	79db      	ldrb	r3, [r3, #7]
    d8a2:	021b      	lsls	r3, r3, #8
    d8a4:	4313      	orrs	r3, r2
    d8a6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    d8a8:	683b      	ldr	r3, [r7, #0]
    d8aa:	885b      	ldrh	r3, [r3, #2]
    d8ac:	b29b      	uxth	r3, r3
    d8ae:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d8b0:	89fa      	ldrh	r2, [r7, #14]
    d8b2:	4b1a      	ldr	r3, [pc, #104]	; (d91c <usbdc_get_str_desc+0x8c>)
    d8b4:	7f1b      	ldrb	r3, [r3, #28]
    d8b6:	3b01      	subs	r3, #1
    d8b8:	4013      	ands	r3, r2
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	bf0c      	ite	eq
    d8be:	2301      	moveq	r3, #1
    d8c0:	2300      	movne	r3, #0
    d8c2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d8c4:	4b15      	ldr	r3, [pc, #84]	; (d91c <usbdc_get_str_desc+0x8c>)
    d8c6:	681b      	ldr	r3, [r3, #0]
    d8c8:	6818      	ldr	r0, [r3, #0]
    d8ca:	4b14      	ldr	r3, [pc, #80]	; (d91c <usbdc_get_str_desc+0x8c>)
    d8cc:	681b      	ldr	r3, [r3, #0]
    d8ce:	685b      	ldr	r3, [r3, #4]
    d8d0:	7b3a      	ldrb	r2, [r7, #12]
    d8d2:	4619      	mov	r1, r3
    d8d4:	4b12      	ldr	r3, [pc, #72]	; (d920 <usbdc_get_str_desc+0x90>)
    d8d6:	4798      	blx	r3
    d8d8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    d8da:	68bb      	ldr	r3, [r7, #8]
    d8dc:	2b00      	cmp	r3, #0
    d8de:	d101      	bne.n	d8e4 <usbdc_get_str_desc+0x54>
		return false;
    d8e0:	2300      	movs	r3, #0
    d8e2:	e017      	b.n	d914 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    d8e4:	68bb      	ldr	r3, [r7, #8]
    d8e6:	781b      	ldrb	r3, [r3, #0]
    d8e8:	b29b      	uxth	r3, r3
    d8ea:	89fa      	ldrh	r2, [r7, #14]
    d8ec:	429a      	cmp	r2, r3
    d8ee:	d802      	bhi.n	d8f6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    d8f0:	2300      	movs	r3, #0
    d8f2:	737b      	strb	r3, [r7, #13]
    d8f4:	e002      	b.n	d8fc <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    d8f6:	68bb      	ldr	r3, [r7, #8]
    d8f8:	781b      	ldrb	r3, [r3, #0]
    d8fa:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d8fc:	89fa      	ldrh	r2, [r7, #14]
    d8fe:	7b7b      	ldrb	r3, [r7, #13]
    d900:	79f8      	ldrb	r0, [r7, #7]
    d902:	68b9      	ldr	r1, [r7, #8]
    d904:	4c07      	ldr	r4, [pc, #28]	; (d924 <usbdc_get_str_desc+0x94>)
    d906:	47a0      	blx	r4
    d908:	4603      	mov	r3, r0
    d90a:	2b00      	cmp	r3, #0
    d90c:	d001      	beq.n	d912 <usbdc_get_str_desc+0x82>
		return false;
    d90e:	2300      	movs	r3, #0
    d910:	e000      	b.n	d914 <usbdc_get_str_desc+0x84>
	}
	return true;
    d912:	2301      	movs	r3, #1
}
    d914:	4618      	mov	r0, r3
    d916:	3714      	adds	r7, #20
    d918:	46bd      	mov	sp, r7
    d91a:	bd90      	pop	{r4, r7, pc}
    d91c:	200020b8 	.word	0x200020b8
    d920:	0000e615 	.word	0x0000e615
    d924:	0000e24d 	.word	0x0000e24d

0000d928 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    d928:	b580      	push	{r7, lr}
    d92a:	b084      	sub	sp, #16
    d92c:	af00      	add	r7, sp, #0
    d92e:	4603      	mov	r3, r0
    d930:	6039      	str	r1, [r7, #0]
    d932:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d934:	683b      	ldr	r3, [r7, #0]
    d936:	885b      	ldrh	r3, [r3, #2]
    d938:	b29b      	uxth	r3, r3
    d93a:	0a1b      	lsrs	r3, r3, #8
    d93c:	b29b      	uxth	r3, r3
    d93e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    d940:	7bfb      	ldrb	r3, [r7, #15]
    d942:	2b02      	cmp	r3, #2
    d944:	d00d      	beq.n	d962 <usbdc_get_desc_req+0x3a>
    d946:	2b03      	cmp	r3, #3
    d948:	d012      	beq.n	d970 <usbdc_get_desc_req+0x48>
    d94a:	2b01      	cmp	r3, #1
    d94c:	d002      	beq.n	d954 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    d94e:	bf00      	nop
	}
	return false;
    d950:	2300      	movs	r3, #0
    d952:	e013      	b.n	d97c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    d954:	79fb      	ldrb	r3, [r7, #7]
    d956:	6839      	ldr	r1, [r7, #0]
    d958:	4618      	mov	r0, r3
    d95a:	4b0a      	ldr	r3, [pc, #40]	; (d984 <usbdc_get_desc_req+0x5c>)
    d95c:	4798      	blx	r3
    d95e:	4603      	mov	r3, r0
    d960:	e00c      	b.n	d97c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    d962:	79fb      	ldrb	r3, [r7, #7]
    d964:	6839      	ldr	r1, [r7, #0]
    d966:	4618      	mov	r0, r3
    d968:	4b07      	ldr	r3, [pc, #28]	; (d988 <usbdc_get_desc_req+0x60>)
    d96a:	4798      	blx	r3
    d96c:	4603      	mov	r3, r0
    d96e:	e005      	b.n	d97c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    d970:	79fb      	ldrb	r3, [r7, #7]
    d972:	6839      	ldr	r1, [r7, #0]
    d974:	4618      	mov	r0, r3
    d976:	4b05      	ldr	r3, [pc, #20]	; (d98c <usbdc_get_desc_req+0x64>)
    d978:	4798      	blx	r3
    d97a:	4603      	mov	r3, r0
}
    d97c:	4618      	mov	r0, r3
    d97e:	3710      	adds	r7, #16
    d980:	46bd      	mov	sp, r7
    d982:	bd80      	pop	{r7, pc}
    d984:	0000d769 	.word	0x0000d769
    d988:	0000d7e1 	.word	0x0000d7e1
    d98c:	0000d891 	.word	0x0000d891

0000d990 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    d990:	b590      	push	{r4, r7, lr}
    d992:	b085      	sub	sp, #20
    d994:	af00      	add	r7, sp, #0
    d996:	4603      	mov	r3, r0
    d998:	6039      	str	r1, [r7, #0]
    d99a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d99c:	683b      	ldr	r3, [r7, #0]
    d99e:	781b      	ldrb	r3, [r3, #0]
    d9a0:	f003 031f 	and.w	r3, r3, #31
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	db1b      	blt.n	d9e0 <usbdc_get_status_req+0x50>
    d9a8:	2b01      	cmp	r3, #1
    d9aa:	dd02      	ble.n	d9b2 <usbdc_get_status_req+0x22>
    d9ac:	2b02      	cmp	r3, #2
    d9ae:	d003      	beq.n	d9b8 <usbdc_get_status_req+0x28>
    d9b0:	e016      	b.n	d9e0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    d9b2:	2300      	movs	r3, #0
    d9b4:	60fb      	str	r3, [r7, #12]
		break;
    d9b6:	e015      	b.n	d9e4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d9b8:	683b      	ldr	r3, [r7, #0]
    d9ba:	889b      	ldrh	r3, [r3, #4]
    d9bc:	b29b      	uxth	r3, r3
    d9be:	b2db      	uxtb	r3, r3
    d9c0:	2102      	movs	r1, #2
    d9c2:	4618      	mov	r0, r3
    d9c4:	4b0f      	ldr	r3, [pc, #60]	; (da04 <usbdc_get_status_req+0x74>)
    d9c6:	4798      	blx	r3
    d9c8:	4603      	mov	r3, r0
    d9ca:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    d9cc:	68fb      	ldr	r3, [r7, #12]
    d9ce:	2b00      	cmp	r3, #0
    d9d0:	da01      	bge.n	d9d6 <usbdc_get_status_req+0x46>
			return false;
    d9d2:	2300      	movs	r3, #0
    d9d4:	e012      	b.n	d9fc <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    d9d6:	68fb      	ldr	r3, [r7, #12]
    d9d8:	f003 0301 	and.w	r3, r3, #1
    d9dc:	60fb      	str	r3, [r7, #12]
		break;
    d9de:	e001      	b.n	d9e4 <usbdc_get_status_req+0x54>
	default:
		return false;
    d9e0:	2300      	movs	r3, #0
    d9e2:	e00b      	b.n	d9fc <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    d9e4:	4b08      	ldr	r3, [pc, #32]	; (da08 <usbdc_get_status_req+0x78>)
    d9e6:	695b      	ldr	r3, [r3, #20]
    d9e8:	89ba      	ldrh	r2, [r7, #12]
    d9ea:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d9ec:	4b06      	ldr	r3, [pc, #24]	; (da08 <usbdc_get_status_req+0x78>)
    d9ee:	6959      	ldr	r1, [r3, #20]
    d9f0:	79f8      	ldrb	r0, [r7, #7]
    d9f2:	2300      	movs	r3, #0
    d9f4:	2202      	movs	r2, #2
    d9f6:	4c05      	ldr	r4, [pc, #20]	; (da0c <usbdc_get_status_req+0x7c>)
    d9f8:	47a0      	blx	r4
	return true;
    d9fa:	2301      	movs	r3, #1
}
    d9fc:	4618      	mov	r0, r3
    d9fe:	3714      	adds	r7, #20
    da00:	46bd      	mov	sp, r7
    da02:	bd90      	pop	{r4, r7, pc}
    da04:	00004e81 	.word	0x00004e81
    da08:	200020b8 	.word	0x200020b8
    da0c:	0000e24d 	.word	0x0000e24d

0000da10 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    da10:	b590      	push	{r4, r7, lr}
    da12:	b085      	sub	sp, #20
    da14:	af00      	add	r7, sp, #0
    da16:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    da18:	4b1f      	ldr	r3, [pc, #124]	; (da98 <usbdc_get_interface+0x88>)
    da1a:	691b      	ldr	r3, [r3, #16]
    da1c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    da1e:	4b1e      	ldr	r3, [pc, #120]	; (da98 <usbdc_get_interface+0x88>)
    da20:	7f5b      	ldrb	r3, [r3, #29]
    da22:	461a      	mov	r2, r3
    da24:	687b      	ldr	r3, [r7, #4]
    da26:	889b      	ldrh	r3, [r3, #4]
    da28:	b29b      	uxth	r3, r3
    da2a:	fa42 f303 	asr.w	r3, r2, r3
    da2e:	f003 0301 	and.w	r3, r3, #1
    da32:	2b00      	cmp	r3, #0
    da34:	d128      	bne.n	da88 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    da36:	4b18      	ldr	r3, [pc, #96]	; (da98 <usbdc_get_interface+0x88>)
    da38:	695b      	ldr	r3, [r3, #20]
    da3a:	2200      	movs	r2, #0
    da3c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    da3e:	4b16      	ldr	r3, [pc, #88]	; (da98 <usbdc_get_interface+0x88>)
    da40:	6959      	ldr	r1, [r3, #20]
    da42:	2300      	movs	r3, #0
    da44:	2201      	movs	r2, #1
    da46:	2000      	movs	r0, #0
    da48:	4c14      	ldr	r4, [pc, #80]	; (da9c <usbdc_get_interface+0x8c>)
    da4a:	47a0      	blx	r4
		return true;
    da4c:	2301      	movs	r3, #1
    da4e:	e01f      	b.n	da90 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    da50:	68fb      	ldr	r3, [r7, #12]
    da52:	685b      	ldr	r3, [r3, #4]
    da54:	687a      	ldr	r2, [r7, #4]
    da56:	2102      	movs	r1, #2
    da58:	68f8      	ldr	r0, [r7, #12]
    da5a:	4798      	blx	r3
    da5c:	60b8      	str	r0, [r7, #8]
    da5e:	68bb      	ldr	r3, [r7, #8]
    da60:	2b00      	cmp	r3, #0
    da62:	da03      	bge.n	da6c <usbdc_get_interface+0x5c>
			func = func->next;
    da64:	68fb      	ldr	r3, [r7, #12]
    da66:	681b      	ldr	r3, [r3, #0]
    da68:	60fb      	str	r3, [r7, #12]
    da6a:	e00d      	b.n	da88 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    da6c:	4b0a      	ldr	r3, [pc, #40]	; (da98 <usbdc_get_interface+0x88>)
    da6e:	695b      	ldr	r3, [r3, #20]
    da70:	68ba      	ldr	r2, [r7, #8]
    da72:	b2d2      	uxtb	r2, r2
    da74:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    da76:	4b08      	ldr	r3, [pc, #32]	; (da98 <usbdc_get_interface+0x88>)
    da78:	6959      	ldr	r1, [r3, #20]
    da7a:	2300      	movs	r3, #0
    da7c:	2201      	movs	r2, #1
    da7e:	2000      	movs	r0, #0
    da80:	4c06      	ldr	r4, [pc, #24]	; (da9c <usbdc_get_interface+0x8c>)
    da82:	47a0      	blx	r4
			return true;
    da84:	2301      	movs	r3, #1
    da86:	e003      	b.n	da90 <usbdc_get_interface+0x80>
	while (NULL != func) {
    da88:	68fb      	ldr	r3, [r7, #12]
    da8a:	2b00      	cmp	r3, #0
    da8c:	d1e0      	bne.n	da50 <usbdc_get_interface+0x40>
		}
	}
	return false;
    da8e:	2300      	movs	r3, #0
}
    da90:	4618      	mov	r0, r3
    da92:	3714      	adds	r7, #20
    da94:	46bd      	mov	sp, r7
    da96:	bd90      	pop	{r4, r7, pc}
    da98:	200020b8 	.word	0x200020b8
    da9c:	0000e24d 	.word	0x0000e24d

0000daa0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    daa0:	b590      	push	{r4, r7, lr}
    daa2:	b083      	sub	sp, #12
    daa4:	af00      	add	r7, sp, #0
    daa6:	4603      	mov	r3, r0
    daa8:	6039      	str	r1, [r7, #0]
    daaa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    daac:	683b      	ldr	r3, [r7, #0]
    daae:	785b      	ldrb	r3, [r3, #1]
    dab0:	2b0a      	cmp	r3, #10
    dab2:	d83a      	bhi.n	db2a <usbdc_get_req+0x8a>
    dab4:	a201      	add	r2, pc, #4	; (adr r2, dabc <usbdc_get_req+0x1c>)
    dab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    daba:	bf00      	nop
    dabc:	0000db13 	.word	0x0000db13
    dac0:	0000db2b 	.word	0x0000db2b
    dac4:	0000db2b 	.word	0x0000db2b
    dac8:	0000db2b 	.word	0x0000db2b
    dacc:	0000db2b 	.word	0x0000db2b
    dad0:	0000db2b 	.word	0x0000db2b
    dad4:	0000dae9 	.word	0x0000dae9
    dad8:	0000db2b 	.word	0x0000db2b
    dadc:	0000daf7 	.word	0x0000daf7
    dae0:	0000db2b 	.word	0x0000db2b
    dae4:	0000db21 	.word	0x0000db21
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    dae8:	79fb      	ldrb	r3, [r7, #7]
    daea:	6839      	ldr	r1, [r7, #0]
    daec:	4618      	mov	r0, r3
    daee:	4b11      	ldr	r3, [pc, #68]	; (db34 <usbdc_get_req+0x94>)
    daf0:	4798      	blx	r3
    daf2:	4603      	mov	r3, r0
    daf4:	e01a      	b.n	db2c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    daf6:	4b10      	ldr	r3, [pc, #64]	; (db38 <usbdc_get_req+0x98>)
    daf8:	695b      	ldr	r3, [r3, #20]
    dafa:	4a0f      	ldr	r2, [pc, #60]	; (db38 <usbdc_get_req+0x98>)
    dafc:	7ed2      	ldrb	r2, [r2, #27]
    dafe:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    db00:	4b0d      	ldr	r3, [pc, #52]	; (db38 <usbdc_get_req+0x98>)
    db02:	6959      	ldr	r1, [r3, #20]
    db04:	79f8      	ldrb	r0, [r7, #7]
    db06:	2300      	movs	r3, #0
    db08:	2201      	movs	r2, #1
    db0a:	4c0c      	ldr	r4, [pc, #48]	; (db3c <usbdc_get_req+0x9c>)
    db0c:	47a0      	blx	r4
		return true;
    db0e:	2301      	movs	r3, #1
    db10:	e00c      	b.n	db2c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    db12:	79fb      	ldrb	r3, [r7, #7]
    db14:	6839      	ldr	r1, [r7, #0]
    db16:	4618      	mov	r0, r3
    db18:	4b09      	ldr	r3, [pc, #36]	; (db40 <usbdc_get_req+0xa0>)
    db1a:	4798      	blx	r3
    db1c:	4603      	mov	r3, r0
    db1e:	e005      	b.n	db2c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    db20:	6838      	ldr	r0, [r7, #0]
    db22:	4b08      	ldr	r3, [pc, #32]	; (db44 <usbdc_get_req+0xa4>)
    db24:	4798      	blx	r3
    db26:	4603      	mov	r3, r0
    db28:	e000      	b.n	db2c <usbdc_get_req+0x8c>
	default:
		return false;
    db2a:	2300      	movs	r3, #0
	}
}
    db2c:	4618      	mov	r0, r3
    db2e:	370c      	adds	r7, #12
    db30:	46bd      	mov	sp, r7
    db32:	bd90      	pop	{r4, r7, pc}
    db34:	0000d929 	.word	0x0000d929
    db38:	200020b8 	.word	0x200020b8
    db3c:	0000e24d 	.word	0x0000e24d
    db40:	0000d991 	.word	0x0000d991
    db44:	0000da11 	.word	0x0000da11

0000db48 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    db48:	b590      	push	{r4, r7, lr}
    db4a:	b083      	sub	sp, #12
    db4c:	af00      	add	r7, sp, #0
    db4e:	4603      	mov	r3, r0
    db50:	6039      	str	r1, [r7, #0]
    db52:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    db54:	683b      	ldr	r3, [r7, #0]
    db56:	781b      	ldrb	r3, [r3, #0]
    db58:	f003 031f 	and.w	r3, r3, #31
    db5c:	2b02      	cmp	r3, #2
    db5e:	d116      	bne.n	db8e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    db60:	683b      	ldr	r3, [r7, #0]
    db62:	88db      	ldrh	r3, [r3, #6]
    db64:	b29b      	uxth	r3, r3
    db66:	2b00      	cmp	r3, #0
    db68:	d001      	beq.n	db6e <usbdc_clear_ftr_req+0x26>
			return false;
    db6a:	2300      	movs	r3, #0
    db6c:	e010      	b.n	db90 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    db6e:	683b      	ldr	r3, [r7, #0]
    db70:	889b      	ldrh	r3, [r3, #4]
    db72:	b29b      	uxth	r3, r3
    db74:	b2db      	uxtb	r3, r3
    db76:	2100      	movs	r1, #0
    db78:	4618      	mov	r0, r3
    db7a:	4b07      	ldr	r3, [pc, #28]	; (db98 <usbdc_clear_ftr_req+0x50>)
    db7c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    db7e:	79f8      	ldrb	r0, [r7, #7]
    db80:	2301      	movs	r3, #1
    db82:	2200      	movs	r2, #0
    db84:	2100      	movs	r1, #0
    db86:	4c05      	ldr	r4, [pc, #20]	; (db9c <usbdc_clear_ftr_req+0x54>)
    db88:	47a0      	blx	r4
		return true;
    db8a:	2301      	movs	r3, #1
    db8c:	e000      	b.n	db90 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    db8e:	2300      	movs	r3, #0
	}
}
    db90:	4618      	mov	r0, r3
    db92:	370c      	adds	r7, #12
    db94:	46bd      	mov	sp, r7
    db96:	bd90      	pop	{r4, r7, pc}
    db98:	00004e81 	.word	0x00004e81
    db9c:	0000e24d 	.word	0x0000e24d

0000dba0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    dba0:	b590      	push	{r4, r7, lr}
    dba2:	b083      	sub	sp, #12
    dba4:	af00      	add	r7, sp, #0
    dba6:	4603      	mov	r3, r0
    dba8:	6039      	str	r1, [r7, #0]
    dbaa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    dbac:	683b      	ldr	r3, [r7, #0]
    dbae:	781b      	ldrb	r3, [r3, #0]
    dbb0:	f003 031f 	and.w	r3, r3, #31
    dbb4:	2b02      	cmp	r3, #2
    dbb6:	d116      	bne.n	dbe6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    dbb8:	683b      	ldr	r3, [r7, #0]
    dbba:	88db      	ldrh	r3, [r3, #6]
    dbbc:	b29b      	uxth	r3, r3
    dbbe:	2b00      	cmp	r3, #0
    dbc0:	d001      	beq.n	dbc6 <usbdc_set_ftr_req+0x26>
			return false;
    dbc2:	2300      	movs	r3, #0
    dbc4:	e010      	b.n	dbe8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    dbc6:	683b      	ldr	r3, [r7, #0]
    dbc8:	889b      	ldrh	r3, [r3, #4]
    dbca:	b29b      	uxth	r3, r3
    dbcc:	b2db      	uxtb	r3, r3
    dbce:	2101      	movs	r1, #1
    dbd0:	4618      	mov	r0, r3
    dbd2:	4b07      	ldr	r3, [pc, #28]	; (dbf0 <usbdc_set_ftr_req+0x50>)
    dbd4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    dbd6:	79f8      	ldrb	r0, [r7, #7]
    dbd8:	2301      	movs	r3, #1
    dbda:	2200      	movs	r2, #0
    dbdc:	2100      	movs	r1, #0
    dbde:	4c05      	ldr	r4, [pc, #20]	; (dbf4 <usbdc_set_ftr_req+0x54>)
    dbe0:	47a0      	blx	r4
		return true;
    dbe2:	2301      	movs	r3, #1
    dbe4:	e000      	b.n	dbe8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    dbe6:	2300      	movs	r3, #0
	}
}
    dbe8:	4618      	mov	r0, r3
    dbea:	370c      	adds	r7, #12
    dbec:	46bd      	mov	sp, r7
    dbee:	bd90      	pop	{r4, r7, pc}
    dbf0:	00004e81 	.word	0x00004e81
    dbf4:	0000e24d 	.word	0x0000e24d

0000dbf8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    dbf8:	b580      	push	{r7, lr}
    dbfa:	b082      	sub	sp, #8
    dbfc:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    dbfe:	4b0a      	ldr	r3, [pc, #40]	; (dc28 <usbdc_unconfig+0x30>)
    dc00:	691b      	ldr	r3, [r3, #16]
    dc02:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    dc04:	e008      	b.n	dc18 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    dc06:	687b      	ldr	r3, [r7, #4]
    dc08:	685b      	ldr	r3, [r3, #4]
    dc0a:	2200      	movs	r2, #0
    dc0c:	2101      	movs	r1, #1
    dc0e:	6878      	ldr	r0, [r7, #4]
    dc10:	4798      	blx	r3
		func = func->next;
    dc12:	687b      	ldr	r3, [r7, #4]
    dc14:	681b      	ldr	r3, [r3, #0]
    dc16:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    dc18:	687b      	ldr	r3, [r7, #4]
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d1f3      	bne.n	dc06 <usbdc_unconfig+0xe>
	}
}
    dc1e:	bf00      	nop
    dc20:	3708      	adds	r7, #8
    dc22:	46bd      	mov	sp, r7
    dc24:	bd80      	pop	{r7, pc}
    dc26:	bf00      	nop
    dc28:	200020b8 	.word	0x200020b8

0000dc2c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    dc2c:	b580      	push	{r7, lr}
    dc2e:	b088      	sub	sp, #32
    dc30:	af00      	add	r7, sp, #0
    dc32:	4603      	mov	r3, r0
    dc34:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    dc36:	2300      	movs	r3, #0
    dc38:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    dc3a:	23ff      	movs	r3, #255	; 0xff
    dc3c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    dc3e:	79fb      	ldrb	r3, [r7, #7]
    dc40:	2b00      	cmp	r3, #0
    dc42:	d103      	bne.n	dc4c <usbdc_set_config+0x20>
		usbdc_unconfig();
    dc44:	4b2e      	ldr	r3, [pc, #184]	; (dd00 <usbdc_set_config+0xd4>)
    dc46:	4798      	blx	r3
		return true;
    dc48:	2301      	movs	r3, #1
    dc4a:	e055      	b.n	dcf8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    dc4c:	69bb      	ldr	r3, [r7, #24]
    dc4e:	2b00      	cmp	r3, #0
    dc50:	d10a      	bne.n	dc68 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    dc52:	4b2c      	ldr	r3, [pc, #176]	; (dd04 <usbdc_set_config+0xd8>)
    dc54:	681b      	ldr	r3, [r3, #0]
    dc56:	6818      	ldr	r0, [r3, #0]
    dc58:	4b2a      	ldr	r3, [pc, #168]	; (dd04 <usbdc_set_config+0xd8>)
    dc5a:	681b      	ldr	r3, [r3, #0]
    dc5c:	685b      	ldr	r3, [r3, #4]
    dc5e:	79fa      	ldrb	r2, [r7, #7]
    dc60:	4619      	mov	r1, r3
    dc62:	4b29      	ldr	r3, [pc, #164]	; (dd08 <usbdc_set_config+0xdc>)
    dc64:	4798      	blx	r3
    dc66:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    dc68:	69bb      	ldr	r3, [r7, #24]
    dc6a:	2b00      	cmp	r3, #0
    dc6c:	d101      	bne.n	dc72 <usbdc_set_config+0x46>
		return false;
    dc6e:	2300      	movs	r3, #0
    dc70:	e042      	b.n	dcf8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    dc72:	69b8      	ldr	r0, [r7, #24]
    dc74:	4b25      	ldr	r3, [pc, #148]	; (dd0c <usbdc_set_config+0xe0>)
    dc76:	4798      	blx	r3
    dc78:	4603      	mov	r3, r0
    dc7a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    dc7c:	8abb      	ldrh	r3, [r7, #20]
    dc7e:	69ba      	ldr	r2, [r7, #24]
    dc80:	4413      	add	r3, r2
    dc82:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    dc84:	693b      	ldr	r3, [r7, #16]
    dc86:	2204      	movs	r2, #4
    dc88:	4619      	mov	r1, r3
    dc8a:	69b8      	ldr	r0, [r7, #24]
    dc8c:	4b20      	ldr	r3, [pc, #128]	; (dd10 <usbdc_set_config+0xe4>)
    dc8e:	4798      	blx	r3
    dc90:	4603      	mov	r3, r0
    dc92:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    dc94:	e02c      	b.n	dcf0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    dc96:	68fb      	ldr	r3, [r7, #12]
    dc98:	3302      	adds	r3, #2
    dc9a:	781b      	ldrb	r3, [r3, #0]
    dc9c:	7dfa      	ldrb	r2, [r7, #23]
    dc9e:	429a      	cmp	r2, r3
    dca0:	d018      	beq.n	dcd4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    dca2:	68fb      	ldr	r3, [r7, #12]
    dca4:	789b      	ldrb	r3, [r3, #2]
    dca6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    dca8:	4b16      	ldr	r3, [pc, #88]	; (dd04 <usbdc_set_config+0xd8>)
    dcaa:	691b      	ldr	r3, [r3, #16]
    dcac:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    dcae:	e00c      	b.n	dcca <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    dcb0:	69fb      	ldr	r3, [r7, #28]
    dcb2:	685b      	ldr	r3, [r3, #4]
    dcb4:	f107 020c 	add.w	r2, r7, #12
    dcb8:	2100      	movs	r1, #0
    dcba:	69f8      	ldr	r0, [r7, #28]
    dcbc:	4798      	blx	r3
    dcbe:	4603      	mov	r3, r0
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	d006      	beq.n	dcd2 <usbdc_set_config+0xa6>
					func = func->next;
    dcc4:	69fb      	ldr	r3, [r7, #28]
    dcc6:	681b      	ldr	r3, [r3, #0]
    dcc8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    dcca:	69fb      	ldr	r3, [r7, #28]
    dccc:	2b00      	cmp	r3, #0
    dcce:	d1ef      	bne.n	dcb0 <usbdc_set_config+0x84>
    dcd0:	e000      	b.n	dcd4 <usbdc_set_config+0xa8>
				} else {
					break;
    dcd2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    dcd4:	68fb      	ldr	r3, [r7, #12]
    dcd6:	4618      	mov	r0, r3
    dcd8:	4b0e      	ldr	r3, [pc, #56]	; (dd14 <usbdc_set_config+0xe8>)
    dcda:	4798      	blx	r3
    dcdc:	4603      	mov	r3, r0
    dcde:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    dce0:	68fb      	ldr	r3, [r7, #12]
    dce2:	6939      	ldr	r1, [r7, #16]
    dce4:	2204      	movs	r2, #4
    dce6:	4618      	mov	r0, r3
    dce8:	4b09      	ldr	r3, [pc, #36]	; (dd10 <usbdc_set_config+0xe4>)
    dcea:	4798      	blx	r3
    dcec:	4603      	mov	r3, r0
    dcee:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    dcf0:	68fb      	ldr	r3, [r7, #12]
    dcf2:	2b00      	cmp	r3, #0
    dcf4:	d1cf      	bne.n	dc96 <usbdc_set_config+0x6a>
	}
	return true;
    dcf6:	2301      	movs	r3, #1
}
    dcf8:	4618      	mov	r0, r3
    dcfa:	3720      	adds	r7, #32
    dcfc:	46bd      	mov	sp, r7
    dcfe:	bd80      	pop	{r7, pc}
    dd00:	0000dbf9 	.word	0x0000dbf9
    dd04:	200020b8 	.word	0x200020b8
    dd08:	0000e59d 	.word	0x0000e59d
    dd0c:	0000d749 	.word	0x0000d749
    dd10:	0000e4dd 	.word	0x0000e4dd
    dd14:	0000d725 	.word	0x0000d725

0000dd18 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    dd18:	b580      	push	{r7, lr}
    dd1a:	b082      	sub	sp, #8
    dd1c:	af00      	add	r7, sp, #0
    dd1e:	4603      	mov	r3, r0
    dd20:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    dd22:	79fb      	ldrb	r3, [r7, #7]
    dd24:	4618      	mov	r0, r3
    dd26:	4b03      	ldr	r3, [pc, #12]	; (dd34 <usbdc_set_address+0x1c>)
    dd28:	4798      	blx	r3
}
    dd2a:	bf00      	nop
    dd2c:	3708      	adds	r7, #8
    dd2e:	46bd      	mov	sp, r7
    dd30:	bd80      	pop	{r7, pc}
    dd32:	bf00      	nop
    dd34:	00004a9d 	.word	0x00004a9d

0000dd38 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    dd38:	b590      	push	{r4, r7, lr}
    dd3a:	b087      	sub	sp, #28
    dd3c:	af00      	add	r7, sp, #0
    dd3e:	4603      	mov	r3, r0
    dd40:	460a      	mov	r2, r1
    dd42:	80fb      	strh	r3, [r7, #6]
    dd44:	4613      	mov	r3, r2
    dd46:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    dd48:	2300      	movs	r3, #0
    dd4a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    dd4c:	693b      	ldr	r3, [r7, #16]
    dd4e:	2b00      	cmp	r3, #0
    dd50:	d10b      	bne.n	dd6a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    dd52:	4b43      	ldr	r3, [pc, #268]	; (de60 <usbdc_set_interface+0x128>)
    dd54:	681b      	ldr	r3, [r3, #0]
    dd56:	6818      	ldr	r0, [r3, #0]
    dd58:	4b41      	ldr	r3, [pc, #260]	; (de60 <usbdc_set_interface+0x128>)
    dd5a:	681b      	ldr	r3, [r3, #0]
    dd5c:	6859      	ldr	r1, [r3, #4]
    dd5e:	4b40      	ldr	r3, [pc, #256]	; (de60 <usbdc_set_interface+0x128>)
    dd60:	7edb      	ldrb	r3, [r3, #27]
    dd62:	461a      	mov	r2, r3
    dd64:	4b3f      	ldr	r3, [pc, #252]	; (de64 <usbdc_set_interface+0x12c>)
    dd66:	4798      	blx	r3
    dd68:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    dd6a:	693b      	ldr	r3, [r7, #16]
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d101      	bne.n	dd74 <usbdc_set_interface+0x3c>
		return false;
    dd70:	2300      	movs	r3, #0
    dd72:	e071      	b.n	de58 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    dd74:	693b      	ldr	r3, [r7, #16]
    dd76:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    dd78:	6938      	ldr	r0, [r7, #16]
    dd7a:	4b3b      	ldr	r3, [pc, #236]	; (de68 <usbdc_set_interface+0x130>)
    dd7c:	4798      	blx	r3
    dd7e:	4603      	mov	r3, r0
    dd80:	461a      	mov	r2, r3
    dd82:	693b      	ldr	r3, [r7, #16]
    dd84:	4413      	add	r3, r2
    dd86:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    dd88:	68bb      	ldr	r3, [r7, #8]
    dd8a:	68f9      	ldr	r1, [r7, #12]
    dd8c:	2204      	movs	r2, #4
    dd8e:	4618      	mov	r0, r3
    dd90:	4b36      	ldr	r3, [pc, #216]	; (de6c <usbdc_set_interface+0x134>)
    dd92:	4798      	blx	r3
    dd94:	6138      	str	r0, [r7, #16]
    dd96:	693b      	ldr	r3, [r7, #16]
    dd98:	2b00      	cmp	r3, #0
    dd9a:	d113      	bne.n	ddc4 <usbdc_set_interface+0x8c>
		return false;
    dd9c:	2300      	movs	r3, #0
    dd9e:	e05b      	b.n	de58 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    dda0:	68bb      	ldr	r3, [r7, #8]
    dda2:	4618      	mov	r0, r3
    dda4:	4b32      	ldr	r3, [pc, #200]	; (de70 <usbdc_set_interface+0x138>)
    dda6:	4798      	blx	r3
    dda8:	4603      	mov	r3, r0
    ddaa:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ddac:	68bb      	ldr	r3, [r7, #8]
    ddae:	68f9      	ldr	r1, [r7, #12]
    ddb0:	2204      	movs	r2, #4
    ddb2:	4618      	mov	r0, r3
    ddb4:	4b2d      	ldr	r3, [pc, #180]	; (de6c <usbdc_set_interface+0x134>)
    ddb6:	4798      	blx	r3
    ddb8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    ddba:	693b      	ldr	r3, [r7, #16]
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d101      	bne.n	ddc4 <usbdc_set_interface+0x8c>
			return false;
    ddc0:	2300      	movs	r3, #0
    ddc2:	e049      	b.n	de58 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    ddc4:	693b      	ldr	r3, [r7, #16]
    ddc6:	3302      	adds	r3, #2
    ddc8:	781b      	ldrb	r3, [r3, #0]
    ddca:	b29b      	uxth	r3, r3
    ddcc:	88ba      	ldrh	r2, [r7, #4]
    ddce:	429a      	cmp	r2, r3
    ddd0:	d1e6      	bne.n	dda0 <usbdc_set_interface+0x68>
    ddd2:	693b      	ldr	r3, [r7, #16]
    ddd4:	3303      	adds	r3, #3
    ddd6:	781b      	ldrb	r3, [r3, #0]
    ddd8:	b29b      	uxth	r3, r3
    ddda:	88fa      	ldrh	r2, [r7, #6]
    dddc:	429a      	cmp	r2, r3
    ddde:	d1df      	bne.n	dda0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    dde0:	693b      	ldr	r3, [r7, #16]
    dde2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    dde4:	4b1e      	ldr	r3, [pc, #120]	; (de60 <usbdc_set_interface+0x128>)
    dde6:	691b      	ldr	r3, [r3, #16]
    dde8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    ddea:	e031      	b.n	de50 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    ddec:	697b      	ldr	r3, [r7, #20]
    ddee:	685b      	ldr	r3, [r3, #4]
    ddf0:	f107 0208 	add.w	r2, r7, #8
    ddf4:	2101      	movs	r1, #1
    ddf6:	6978      	ldr	r0, [r7, #20]
    ddf8:	4798      	blx	r3
    ddfa:	4603      	mov	r3, r0
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	d003      	beq.n	de08 <usbdc_set_interface+0xd0>
			func = func->next;
    de00:	697b      	ldr	r3, [r7, #20]
    de02:	681b      	ldr	r3, [r3, #0]
    de04:	617b      	str	r3, [r7, #20]
    de06:	e023      	b.n	de50 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    de08:	697b      	ldr	r3, [r7, #20]
    de0a:	685b      	ldr	r3, [r3, #4]
    de0c:	f107 0208 	add.w	r2, r7, #8
    de10:	2100      	movs	r1, #0
    de12:	6978      	ldr	r0, [r7, #20]
    de14:	4798      	blx	r3
    de16:	4603      	mov	r3, r0
    de18:	2b00      	cmp	r3, #0
    de1a:	d117      	bne.n	de4c <usbdc_set_interface+0x114>
			if (alt_set) {
    de1c:	88fb      	ldrh	r3, [r7, #6]
    de1e:	2b00      	cmp	r3, #0
    de20:	d00c      	beq.n	de3c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    de22:	4b0f      	ldr	r3, [pc, #60]	; (de60 <usbdc_set_interface+0x128>)
    de24:	7f5b      	ldrb	r3, [r3, #29]
    de26:	b25a      	sxtb	r2, r3
    de28:	88bb      	ldrh	r3, [r7, #4]
    de2a:	2101      	movs	r1, #1
    de2c:	fa01 f303 	lsl.w	r3, r1, r3
    de30:	b25b      	sxtb	r3, r3
    de32:	4313      	orrs	r3, r2
    de34:	b25b      	sxtb	r3, r3
    de36:	b2da      	uxtb	r2, r3
    de38:	4b09      	ldr	r3, [pc, #36]	; (de60 <usbdc_set_interface+0x128>)
    de3a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    de3c:	2300      	movs	r3, #0
    de3e:	2200      	movs	r2, #0
    de40:	2100      	movs	r1, #0
    de42:	2000      	movs	r0, #0
    de44:	4c0b      	ldr	r4, [pc, #44]	; (de74 <usbdc_set_interface+0x13c>)
    de46:	47a0      	blx	r4
			return true;
    de48:	2301      	movs	r3, #1
    de4a:	e005      	b.n	de58 <usbdc_set_interface+0x120>
		} else {
			return false;
    de4c:	2300      	movs	r3, #0
    de4e:	e003      	b.n	de58 <usbdc_set_interface+0x120>
	while (NULL != func) {
    de50:	697b      	ldr	r3, [r7, #20]
    de52:	2b00      	cmp	r3, #0
    de54:	d1ca      	bne.n	ddec <usbdc_set_interface+0xb4>
		}
	}

	return false;
    de56:	2300      	movs	r3, #0
}
    de58:	4618      	mov	r0, r3
    de5a:	371c      	adds	r7, #28
    de5c:	46bd      	mov	sp, r7
    de5e:	bd90      	pop	{r4, r7, pc}
    de60:	200020b8 	.word	0x200020b8
    de64:	0000e59d 	.word	0x0000e59d
    de68:	0000d749 	.word	0x0000d749
    de6c:	0000e4dd 	.word	0x0000e4dd
    de70:	0000d725 	.word	0x0000d725
    de74:	0000e24d 	.word	0x0000e24d

0000de78 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    de78:	b590      	push	{r4, r7, lr}
    de7a:	b083      	sub	sp, #12
    de7c:	af00      	add	r7, sp, #0
    de7e:	4603      	mov	r3, r0
    de80:	6039      	str	r1, [r7, #0]
    de82:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    de84:	683b      	ldr	r3, [r7, #0]
    de86:	785b      	ldrb	r3, [r3, #1]
    de88:	3b01      	subs	r3, #1
    de8a:	2b0a      	cmp	r3, #10
    de8c:	d85b      	bhi.n	df46 <usbdc_set_req+0xce>
    de8e:	a201      	add	r2, pc, #4	; (adr r2, de94 <usbdc_set_req+0x1c>)
    de90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    de94:	0000df13 	.word	0x0000df13
    de98:	0000df47 	.word	0x0000df47
    de9c:	0000df21 	.word	0x0000df21
    dea0:	0000df47 	.word	0x0000df47
    dea4:	0000dec1 	.word	0x0000dec1
    dea8:	0000df47 	.word	0x0000df47
    deac:	0000df47 	.word	0x0000df47
    deb0:	0000df47 	.word	0x0000df47
    deb4:	0000dedb 	.word	0x0000dedb
    deb8:	0000df47 	.word	0x0000df47
    debc:	0000df2f 	.word	0x0000df2f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    dec0:	79f8      	ldrb	r0, [r7, #7]
    dec2:	2301      	movs	r3, #1
    dec4:	2200      	movs	r2, #0
    dec6:	2100      	movs	r1, #0
    dec8:	4c21      	ldr	r4, [pc, #132]	; (df50 <usbdc_set_req+0xd8>)
    deca:	47a0      	blx	r4
    decc:	4603      	mov	r3, r0
    dece:	2b00      	cmp	r3, #0
    ded0:	bf0c      	ite	eq
    ded2:	2301      	moveq	r3, #1
    ded4:	2300      	movne	r3, #0
    ded6:	b2db      	uxtb	r3, r3
    ded8:	e036      	b.n	df48 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    deda:	683b      	ldr	r3, [r7, #0]
    dedc:	885b      	ldrh	r3, [r3, #2]
    dede:	b29b      	uxth	r3, r3
    dee0:	b2db      	uxtb	r3, r3
    dee2:	4618      	mov	r0, r3
    dee4:	4b1b      	ldr	r3, [pc, #108]	; (df54 <usbdc_set_req+0xdc>)
    dee6:	4798      	blx	r3
    dee8:	4603      	mov	r3, r0
    deea:	f083 0301 	eor.w	r3, r3, #1
    deee:	b2db      	uxtb	r3, r3
    def0:	2b00      	cmp	r3, #0
    def2:	d001      	beq.n	def8 <usbdc_set_req+0x80>
			return false;
    def4:	2300      	movs	r3, #0
    def6:	e027      	b.n	df48 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    def8:	79f8      	ldrb	r0, [r7, #7]
    defa:	2301      	movs	r3, #1
    defc:	2200      	movs	r2, #0
    defe:	2100      	movs	r1, #0
    df00:	4c13      	ldr	r4, [pc, #76]	; (df50 <usbdc_set_req+0xd8>)
    df02:	47a0      	blx	r4
    df04:	4603      	mov	r3, r0
    df06:	2b00      	cmp	r3, #0
    df08:	bf0c      	ite	eq
    df0a:	2301      	moveq	r3, #1
    df0c:	2300      	movne	r3, #0
    df0e:	b2db      	uxtb	r3, r3
    df10:	e01a      	b.n	df48 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    df12:	79fb      	ldrb	r3, [r7, #7]
    df14:	6839      	ldr	r1, [r7, #0]
    df16:	4618      	mov	r0, r3
    df18:	4b0f      	ldr	r3, [pc, #60]	; (df58 <usbdc_set_req+0xe0>)
    df1a:	4798      	blx	r3
    df1c:	4603      	mov	r3, r0
    df1e:	e013      	b.n	df48 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    df20:	79fb      	ldrb	r3, [r7, #7]
    df22:	6839      	ldr	r1, [r7, #0]
    df24:	4618      	mov	r0, r3
    df26:	4b0d      	ldr	r3, [pc, #52]	; (df5c <usbdc_set_req+0xe4>)
    df28:	4798      	blx	r3
    df2a:	4603      	mov	r3, r0
    df2c:	e00c      	b.n	df48 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    df2e:	683b      	ldr	r3, [r7, #0]
    df30:	885b      	ldrh	r3, [r3, #2]
    df32:	b29a      	uxth	r2, r3
    df34:	683b      	ldr	r3, [r7, #0]
    df36:	889b      	ldrh	r3, [r3, #4]
    df38:	b29b      	uxth	r3, r3
    df3a:	4619      	mov	r1, r3
    df3c:	4610      	mov	r0, r2
    df3e:	4b08      	ldr	r3, [pc, #32]	; (df60 <usbdc_set_req+0xe8>)
    df40:	4798      	blx	r3
    df42:	4603      	mov	r3, r0
    df44:	e000      	b.n	df48 <usbdc_set_req+0xd0>
	default:
		return false;
    df46:	2300      	movs	r3, #0
	}
}
    df48:	4618      	mov	r0, r3
    df4a:	370c      	adds	r7, #12
    df4c:	46bd      	mov	sp, r7
    df4e:	bd90      	pop	{r4, r7, pc}
    df50:	0000e24d 	.word	0x0000e24d
    df54:	0000dc2d 	.word	0x0000dc2d
    df58:	0000db49 	.word	0x0000db49
    df5c:	0000dba1 	.word	0x0000dba1
    df60:	0000dd39 	.word	0x0000dd39

0000df64 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    df64:	b580      	push	{r7, lr}
    df66:	b082      	sub	sp, #8
    df68:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    df6a:	4b0a      	ldr	r3, [pc, #40]	; (df94 <usbdc_sof_notify+0x30>)
    df6c:	685b      	ldr	r3, [r3, #4]
    df6e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    df70:	e009      	b.n	df86 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    df72:	687b      	ldr	r3, [r7, #4]
    df74:	685b      	ldr	r3, [r3, #4]
    df76:	2b00      	cmp	r3, #0
    df78:	d002      	beq.n	df80 <usbdc_sof_notify+0x1c>
			sof->cb();
    df7a:	687b      	ldr	r3, [r7, #4]
    df7c:	685b      	ldr	r3, [r3, #4]
    df7e:	4798      	blx	r3
		}
		sof = sof->next;
    df80:	687b      	ldr	r3, [r7, #4]
    df82:	681b      	ldr	r3, [r3, #0]
    df84:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    df86:	687b      	ldr	r3, [r7, #4]
    df88:	2b00      	cmp	r3, #0
    df8a:	d1f2      	bne.n	df72 <usbdc_sof_notify+0xe>
	}
}
    df8c:	bf00      	nop
    df8e:	3708      	adds	r7, #8
    df90:	46bd      	mov	sp, r7
    df92:	bd80      	pop	{r7, pc}
    df94:	200020b8 	.word	0x200020b8

0000df98 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    df98:	b580      	push	{r7, lr}
    df9a:	b084      	sub	sp, #16
    df9c:	af00      	add	r7, sp, #0
    df9e:	4603      	mov	r3, r0
    dfa0:	6039      	str	r1, [r7, #0]
    dfa2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    dfa4:	4b0b      	ldr	r3, [pc, #44]	; (dfd4 <usbdc_change_notify+0x3c>)
    dfa6:	68db      	ldr	r3, [r3, #12]
    dfa8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    dfaa:	e00c      	b.n	dfc6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    dfac:	68fb      	ldr	r3, [r7, #12]
    dfae:	685b      	ldr	r3, [r3, #4]
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d005      	beq.n	dfc0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    dfb4:	68fb      	ldr	r3, [r7, #12]
    dfb6:	685b      	ldr	r3, [r3, #4]
    dfb8:	79fa      	ldrb	r2, [r7, #7]
    dfba:	6839      	ldr	r1, [r7, #0]
    dfbc:	4610      	mov	r0, r2
    dfbe:	4798      	blx	r3
		}
		cg = cg->next;
    dfc0:	68fb      	ldr	r3, [r7, #12]
    dfc2:	681b      	ldr	r3, [r3, #0]
    dfc4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    dfc6:	68fb      	ldr	r3, [r7, #12]
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d1ef      	bne.n	dfac <usbdc_change_notify+0x14>
	}
}
    dfcc:	bf00      	nop
    dfce:	3710      	adds	r7, #16
    dfd0:	46bd      	mov	sp, r7
    dfd2:	bd80      	pop	{r7, pc}
    dfd4:	200020b8 	.word	0x200020b8

0000dfd8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dfd8:	b580      	push	{r7, lr}
    dfda:	b084      	sub	sp, #16
    dfdc:	af00      	add	r7, sp, #0
    dfde:	4603      	mov	r3, r0
    dfe0:	6039      	str	r1, [r7, #0]
    dfe2:	71fb      	strb	r3, [r7, #7]
    dfe4:	4613      	mov	r3, r2
    dfe6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    dfe8:	4b12      	ldr	r3, [pc, #72]	; (e034 <usbdc_request_handler+0x5c>)
    dfea:	689b      	ldr	r3, [r3, #8]
    dfec:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    dfee:	e019      	b.n	e024 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    dff0:	68fb      	ldr	r3, [r7, #12]
    dff2:	685b      	ldr	r3, [r3, #4]
    dff4:	2b00      	cmp	r3, #0
    dff6:	d012      	beq.n	e01e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    dff8:	68fb      	ldr	r3, [r7, #12]
    dffa:	685b      	ldr	r3, [r3, #4]
    dffc:	79ba      	ldrb	r2, [r7, #6]
    dffe:	79f8      	ldrb	r0, [r7, #7]
    e000:	6839      	ldr	r1, [r7, #0]
    e002:	4798      	blx	r3
    e004:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    e006:	68bb      	ldr	r3, [r7, #8]
    e008:	2b00      	cmp	r3, #0
    e00a:	d101      	bne.n	e010 <usbdc_request_handler+0x38>
				return true;
    e00c:	2301      	movs	r3, #1
    e00e:	e00d      	b.n	e02c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    e010:	68bb      	ldr	r3, [r7, #8]
    e012:	f113 0f0a 	cmn.w	r3, #10
    e016:	d002      	beq.n	e01e <usbdc_request_handler+0x46>
				return -1;
    e018:	f04f 33ff 	mov.w	r3, #4294967295
    e01c:	e006      	b.n	e02c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    e01e:	68fb      	ldr	r3, [r7, #12]
    e020:	681b      	ldr	r3, [r3, #0]
    e022:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    e024:	68fb      	ldr	r3, [r7, #12]
    e026:	2b00      	cmp	r3, #0
    e028:	d1e2      	bne.n	dff0 <usbdc_request_handler+0x18>
	}
	return false;
    e02a:	2300      	movs	r3, #0
}
    e02c:	4618      	mov	r0, r3
    e02e:	3710      	adds	r7, #16
    e030:	46bd      	mov	sp, r7
    e032:	bd80      	pop	{r7, pc}
    e034:	200020b8 	.word	0x200020b8

0000e038 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    e038:	b580      	push	{r7, lr}
    e03a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    e03c:	4b01      	ldr	r3, [pc, #4]	; (e044 <usbd_sof_cb+0xc>)
    e03e:	4798      	blx	r3
}
    e040:	bf00      	nop
    e042:	bd80      	pop	{r7, pc}
    e044:	0000df65 	.word	0x0000df65

0000e048 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    e048:	b580      	push	{r7, lr}
    e04a:	b082      	sub	sp, #8
    e04c:	af00      	add	r7, sp, #0
    e04e:	4603      	mov	r3, r0
    e050:	6039      	str	r1, [r7, #0]
    e052:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    e054:	79fb      	ldrb	r3, [r7, #7]
    e056:	2200      	movs	r2, #0
    e058:	6839      	ldr	r1, [r7, #0]
    e05a:	4618      	mov	r0, r3
    e05c:	4b14      	ldr	r3, [pc, #80]	; (e0b0 <usbdc_cb_ctl_req+0x68>)
    e05e:	4798      	blx	r3
    e060:	4603      	mov	r3, r0
    e062:	f1b3 3fff 	cmp.w	r3, #4294967295
    e066:	d00b      	beq.n	e080 <usbdc_cb_ctl_req+0x38>
    e068:	2b01      	cmp	r3, #1
    e06a:	d007      	beq.n	e07c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    e06c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e06e:	683b      	ldr	r3, [r7, #0]
    e070:	781b      	ldrb	r3, [r3, #0]
    e072:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e076:	2b00      	cmp	r3, #0
    e078:	d007      	beq.n	e08a <usbdc_cb_ctl_req+0x42>
    e07a:	e003      	b.n	e084 <usbdc_cb_ctl_req+0x3c>
		return true;
    e07c:	2301      	movs	r3, #1
    e07e:	e013      	b.n	e0a8 <usbdc_cb_ctl_req+0x60>
		return false;
    e080:	2300      	movs	r3, #0
    e082:	e011      	b.n	e0a8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e084:	2b80      	cmp	r3, #128	; 0x80
    e086:	d007      	beq.n	e098 <usbdc_cb_ctl_req+0x50>
    e088:	e00d      	b.n	e0a6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    e08a:	79fb      	ldrb	r3, [r7, #7]
    e08c:	6839      	ldr	r1, [r7, #0]
    e08e:	4618      	mov	r0, r3
    e090:	4b08      	ldr	r3, [pc, #32]	; (e0b4 <usbdc_cb_ctl_req+0x6c>)
    e092:	4798      	blx	r3
    e094:	4603      	mov	r3, r0
    e096:	e007      	b.n	e0a8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    e098:	79fb      	ldrb	r3, [r7, #7]
    e09a:	6839      	ldr	r1, [r7, #0]
    e09c:	4618      	mov	r0, r3
    e09e:	4b06      	ldr	r3, [pc, #24]	; (e0b8 <usbdc_cb_ctl_req+0x70>)
    e0a0:	4798      	blx	r3
    e0a2:	4603      	mov	r3, r0
    e0a4:	e000      	b.n	e0a8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    e0a6:	2300      	movs	r3, #0
	}
}
    e0a8:	4618      	mov	r0, r3
    e0aa:	3708      	adds	r7, #8
    e0ac:	46bd      	mov	sp, r7
    e0ae:	bd80      	pop	{r7, pc}
    e0b0:	0000dfd9 	.word	0x0000dfd9
    e0b4:	0000de79 	.word	0x0000de79
    e0b8:	0000daa1 	.word	0x0000daa1

0000e0bc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    e0bc:	b580      	push	{r7, lr}
    e0be:	b082      	sub	sp, #8
    e0c0:	af00      	add	r7, sp, #0
    e0c2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    e0c4:	687b      	ldr	r3, [r7, #4]
    e0c6:	781b      	ldrb	r3, [r3, #0]
    e0c8:	2b00      	cmp	r3, #0
    e0ca:	d135      	bne.n	e138 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    e0cc:	687b      	ldr	r3, [r7, #4]
    e0ce:	785b      	ldrb	r3, [r3, #1]
    e0d0:	2b05      	cmp	r3, #5
    e0d2:	d019      	beq.n	e108 <usbdc_ctrl_status_end+0x4c>
    e0d4:	2b09      	cmp	r3, #9
    e0d6:	d000      	beq.n	e0da <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    e0d8:	e02f      	b.n	e13a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    e0da:	687b      	ldr	r3, [r7, #4]
    e0dc:	885b      	ldrh	r3, [r3, #2]
    e0de:	b29b      	uxth	r3, r3
    e0e0:	b2da      	uxtb	r2, r3
    e0e2:	4b17      	ldr	r3, [pc, #92]	; (e140 <usbdc_ctrl_status_end+0x84>)
    e0e4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    e0e6:	687b      	ldr	r3, [r7, #4]
    e0e8:	885b      	ldrh	r3, [r3, #2]
    e0ea:	b29b      	uxth	r3, r3
    e0ec:	2b00      	cmp	r3, #0
    e0ee:	d001      	beq.n	e0f4 <usbdc_ctrl_status_end+0x38>
    e0f0:	2204      	movs	r2, #4
    e0f2:	e000      	b.n	e0f6 <usbdc_ctrl_status_end+0x3a>
    e0f4:	2203      	movs	r2, #3
    e0f6:	4b12      	ldr	r3, [pc, #72]	; (e140 <usbdc_ctrl_status_end+0x84>)
    e0f8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e0fa:	4b11      	ldr	r3, [pc, #68]	; (e140 <usbdc_ctrl_status_end+0x84>)
    e0fc:	7e9b      	ldrb	r3, [r3, #26]
    e0fe:	4619      	mov	r1, r3
    e100:	2001      	movs	r0, #1
    e102:	4b10      	ldr	r3, [pc, #64]	; (e144 <usbdc_ctrl_status_end+0x88>)
    e104:	4798      	blx	r3
		break;
    e106:	e018      	b.n	e13a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    e108:	687b      	ldr	r3, [r7, #4]
    e10a:	885b      	ldrh	r3, [r3, #2]
    e10c:	b29b      	uxth	r3, r3
    e10e:	b2db      	uxtb	r3, r3
    e110:	4618      	mov	r0, r3
    e112:	4b0d      	ldr	r3, [pc, #52]	; (e148 <usbdc_ctrl_status_end+0x8c>)
    e114:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    e116:	687b      	ldr	r3, [r7, #4]
    e118:	885b      	ldrh	r3, [r3, #2]
    e11a:	b29b      	uxth	r3, r3
    e11c:	2b00      	cmp	r3, #0
    e11e:	d001      	beq.n	e124 <usbdc_ctrl_status_end+0x68>
    e120:	2203      	movs	r2, #3
    e122:	e000      	b.n	e126 <usbdc_ctrl_status_end+0x6a>
    e124:	2202      	movs	r2, #2
    e126:	4b06      	ldr	r3, [pc, #24]	; (e140 <usbdc_ctrl_status_end+0x84>)
    e128:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e12a:	4b05      	ldr	r3, [pc, #20]	; (e140 <usbdc_ctrl_status_end+0x84>)
    e12c:	7e9b      	ldrb	r3, [r3, #26]
    e12e:	4619      	mov	r1, r3
    e130:	2001      	movs	r0, #1
    e132:	4b04      	ldr	r3, [pc, #16]	; (e144 <usbdc_ctrl_status_end+0x88>)
    e134:	4798      	blx	r3
		break;
    e136:	e000      	b.n	e13a <usbdc_ctrl_status_end+0x7e>
		return;
    e138:	bf00      	nop
	}
}
    e13a:	3708      	adds	r7, #8
    e13c:	46bd      	mov	sp, r7
    e13e:	bd80      	pop	{r7, pc}
    e140:	200020b8 	.word	0x200020b8
    e144:	0000df99 	.word	0x0000df99
    e148:	0000dd19 	.word	0x0000dd19

0000e14c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    e14c:	b580      	push	{r7, lr}
    e14e:	b082      	sub	sp, #8
    e150:	af00      	add	r7, sp, #0
    e152:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    e154:	2201      	movs	r2, #1
    e156:	6879      	ldr	r1, [r7, #4]
    e158:	2000      	movs	r0, #0
    e15a:	4b03      	ldr	r3, [pc, #12]	; (e168 <usbdc_ctrl_data_end+0x1c>)
    e15c:	4798      	blx	r3
	return false;
    e15e:	2300      	movs	r3, #0
}
    e160:	4618      	mov	r0, r3
    e162:	3708      	adds	r7, #8
    e164:	46bd      	mov	sp, r7
    e166:	bd80      	pop	{r7, pc}
    e168:	0000dfd9 	.word	0x0000dfd9

0000e16c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    e16c:	b580      	push	{r7, lr}
    e16e:	b082      	sub	sp, #8
    e170:	af00      	add	r7, sp, #0
    e172:	4603      	mov	r3, r0
    e174:	603a      	str	r2, [r7, #0]
    e176:	71fb      	strb	r3, [r7, #7]
    e178:	460b      	mov	r3, r1
    e17a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    e17c:	79bb      	ldrb	r3, [r7, #6]
    e17e:	2b00      	cmp	r3, #0
    e180:	d002      	beq.n	e188 <usbdc_cb_ctl_done+0x1c>
    e182:	2b01      	cmp	r3, #1
    e184:	d004      	beq.n	e190 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    e186:	e008      	b.n	e19a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    e188:	6838      	ldr	r0, [r7, #0]
    e18a:	4b06      	ldr	r3, [pc, #24]	; (e1a4 <usbdc_cb_ctl_done+0x38>)
    e18c:	4798      	blx	r3
		break;
    e18e:	e004      	b.n	e19a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    e190:	6838      	ldr	r0, [r7, #0]
    e192:	4b05      	ldr	r3, [pc, #20]	; (e1a8 <usbdc_cb_ctl_done+0x3c>)
    e194:	4798      	blx	r3
    e196:	4603      	mov	r3, r0
    e198:	e000      	b.n	e19c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    e19a:	2300      	movs	r3, #0
}
    e19c:	4618      	mov	r0, r3
    e19e:	3708      	adds	r7, #8
    e1a0:	46bd      	mov	sp, r7
    e1a2:	bd80      	pop	{r7, pc}
    e1a4:	0000e0bd 	.word	0x0000e0bd
    e1a8:	0000e14d 	.word	0x0000e14d

0000e1ac <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    e1ac:	b580      	push	{r7, lr}
    e1ae:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    e1b0:	4b10      	ldr	r3, [pc, #64]	; (e1f4 <usbdc_reset+0x48>)
    e1b2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    e1b4:	4b10      	ldr	r3, [pc, #64]	; (e1f8 <usbdc_reset+0x4c>)
    e1b6:	2202      	movs	r2, #2
    e1b8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    e1ba:	4b0f      	ldr	r3, [pc, #60]	; (e1f8 <usbdc_reset+0x4c>)
    e1bc:	2200      	movs	r2, #0
    e1be:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    e1c0:	4b0d      	ldr	r3, [pc, #52]	; (e1f8 <usbdc_reset+0x4c>)
    e1c2:	2200      	movs	r2, #0
    e1c4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    e1c6:	2000      	movs	r0, #0
    e1c8:	4b0c      	ldr	r3, [pc, #48]	; (e1fc <usbdc_reset+0x50>)
    e1ca:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    e1cc:	4b0a      	ldr	r3, [pc, #40]	; (e1f8 <usbdc_reset+0x4c>)
    e1ce:	7f1b      	ldrb	r3, [r3, #28]
    e1d0:	4618      	mov	r0, r3
    e1d2:	4b0b      	ldr	r3, [pc, #44]	; (e200 <usbdc_reset+0x54>)
    e1d4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    e1d6:	4a0b      	ldr	r2, [pc, #44]	; (e204 <usbdc_reset+0x58>)
    e1d8:	2100      	movs	r1, #0
    e1da:	2000      	movs	r0, #0
    e1dc:	4b0a      	ldr	r3, [pc, #40]	; (e208 <usbdc_reset+0x5c>)
    e1de:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    e1e0:	4a0a      	ldr	r2, [pc, #40]	; (e20c <usbdc_reset+0x60>)
    e1e2:	2102      	movs	r1, #2
    e1e4:	2000      	movs	r0, #0
    e1e6:	4b08      	ldr	r3, [pc, #32]	; (e208 <usbdc_reset+0x5c>)
    e1e8:	4798      	blx	r3
	usb_d_ep_enable(0);
    e1ea:	2000      	movs	r0, #0
    e1ec:	4b08      	ldr	r3, [pc, #32]	; (e210 <usbdc_reset+0x64>)
    e1ee:	4798      	blx	r3
}
    e1f0:	bf00      	nop
    e1f2:	bd80      	pop	{r7, pc}
    e1f4:	0000dbf9 	.word	0x0000dbf9
    e1f8:	200020b8 	.word	0x200020b8
    e1fc:	00004b81 	.word	0x00004b81
    e200:	00004abd 	.word	0x00004abd
    e204:	0000e049 	.word	0x0000e049
    e208:	00004ed5 	.word	0x00004ed5
    e20c:	0000e16d 	.word	0x0000e16d
    e210:	00004bd1 	.word	0x00004bd1

0000e214 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    e214:	b580      	push	{r7, lr}
    e216:	b082      	sub	sp, #8
    e218:	af00      	add	r7, sp, #0
    e21a:	4603      	mov	r3, r0
    e21c:	6039      	str	r1, [r7, #0]
    e21e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    e220:	79fb      	ldrb	r3, [r7, #7]
    e222:	2b00      	cmp	r3, #0
    e224:	d002      	beq.n	e22c <usbd_event_cb+0x18>
    e226:	2b01      	cmp	r3, #1
    e228:	d005      	beq.n	e236 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    e22a:	e007      	b.n	e23c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    e22c:	6839      	ldr	r1, [r7, #0]
    e22e:	2000      	movs	r0, #0
    e230:	4b04      	ldr	r3, [pc, #16]	; (e244 <usbd_event_cb+0x30>)
    e232:	4798      	blx	r3
		break;
    e234:	e002      	b.n	e23c <usbd_event_cb+0x28>
		usbdc_reset();
    e236:	4b04      	ldr	r3, [pc, #16]	; (e248 <usbd_event_cb+0x34>)
    e238:	4798      	blx	r3
		break;
    e23a:	bf00      	nop
	}
}
    e23c:	bf00      	nop
    e23e:	3708      	adds	r7, #8
    e240:	46bd      	mov	sp, r7
    e242:	bd80      	pop	{r7, pc}
    e244:	0000df99 	.word	0x0000df99
    e248:	0000e1ad 	.word	0x0000e1ad

0000e24c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    e24c:	b580      	push	{r7, lr}
    e24e:	b088      	sub	sp, #32
    e250:	af00      	add	r7, sp, #0
    e252:	60b9      	str	r1, [r7, #8]
    e254:	607a      	str	r2, [r7, #4]
    e256:	461a      	mov	r2, r3
    e258:	4603      	mov	r3, r0
    e25a:	73fb      	strb	r3, [r7, #15]
    e25c:	4613      	mov	r3, r2
    e25e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    e260:	68bb      	ldr	r3, [r7, #8]
    e262:	617b      	str	r3, [r7, #20]
    e264:	687b      	ldr	r3, [r7, #4]
    e266:	61bb      	str	r3, [r7, #24]
    e268:	7bfb      	ldrb	r3, [r7, #15]
    e26a:	773b      	strb	r3, [r7, #28]
    e26c:	7bbb      	ldrb	r3, [r7, #14]
    e26e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    e270:	f107 0314 	add.w	r3, r7, #20
    e274:	4618      	mov	r0, r3
    e276:	4b03      	ldr	r3, [pc, #12]	; (e284 <usbdc_xfer+0x38>)
    e278:	4798      	blx	r3
    e27a:	4603      	mov	r3, r0
}
    e27c:	4618      	mov	r0, r3
    e27e:	3720      	adds	r7, #32
    e280:	46bd      	mov	sp, r7
    e282:	bd80      	pop	{r7, pc}
    e284:	00004c41 	.word	0x00004c41

0000e288 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    e288:	b580      	push	{r7, lr}
    e28a:	b082      	sub	sp, #8
    e28c:	af00      	add	r7, sp, #0
    e28e:	4603      	mov	r3, r0
    e290:	6039      	str	r1, [r7, #0]
    e292:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    e294:	79fb      	ldrb	r3, [r7, #7]
    e296:	2b01      	cmp	r3, #1
    e298:	d009      	beq.n	e2ae <usbdc_register_handler+0x26>
    e29a:	2b02      	cmp	r3, #2
    e29c:	d00c      	beq.n	e2b8 <usbdc_register_handler+0x30>
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d000      	beq.n	e2a4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    e2a2:	e00e      	b.n	e2c2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    e2a4:	6839      	ldr	r1, [r7, #0]
    e2a6:	4809      	ldr	r0, [pc, #36]	; (e2cc <usbdc_register_handler+0x44>)
    e2a8:	4b09      	ldr	r3, [pc, #36]	; (e2d0 <usbdc_register_handler+0x48>)
    e2aa:	4798      	blx	r3
		break;
    e2ac:	e009      	b.n	e2c2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    e2ae:	6839      	ldr	r1, [r7, #0]
    e2b0:	4808      	ldr	r0, [pc, #32]	; (e2d4 <usbdc_register_handler+0x4c>)
    e2b2:	4b07      	ldr	r3, [pc, #28]	; (e2d0 <usbdc_register_handler+0x48>)
    e2b4:	4798      	blx	r3
		break;
    e2b6:	e004      	b.n	e2c2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    e2b8:	6839      	ldr	r1, [r7, #0]
    e2ba:	4807      	ldr	r0, [pc, #28]	; (e2d8 <usbdc_register_handler+0x50>)
    e2bc:	4b04      	ldr	r3, [pc, #16]	; (e2d0 <usbdc_register_handler+0x48>)
    e2be:	4798      	blx	r3
		break;
    e2c0:	bf00      	nop
	}
}
    e2c2:	bf00      	nop
    e2c4:	3708      	adds	r7, #8
    e2c6:	46bd      	mov	sp, r7
    e2c8:	bd80      	pop	{r7, pc}
    e2ca:	bf00      	nop
    e2cc:	200020bc 	.word	0x200020bc
    e2d0:	0000502d 	.word	0x0000502d
    e2d4:	200020c0 	.word	0x200020c0
    e2d8:	200020c4 	.word	0x200020c4

0000e2dc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    e2dc:	b580      	push	{r7, lr}
    e2de:	b084      	sub	sp, #16
    e2e0:	af00      	add	r7, sp, #0
    e2e2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    e2e4:	687b      	ldr	r3, [r7, #4]
    e2e6:	2b00      	cmp	r3, #0
    e2e8:	bf14      	ite	ne
    e2ea:	2301      	movne	r3, #1
    e2ec:	2300      	moveq	r3, #0
    e2ee:	b2db      	uxtb	r3, r3
    e2f0:	f240 3255 	movw	r2, #853	; 0x355
    e2f4:	4910      	ldr	r1, [pc, #64]	; (e338 <usbdc_init+0x5c>)
    e2f6:	4618      	mov	r0, r3
    e2f8:	4b10      	ldr	r3, [pc, #64]	; (e33c <usbdc_init+0x60>)
    e2fa:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    e2fc:	4b10      	ldr	r3, [pc, #64]	; (e340 <usbdc_init+0x64>)
    e2fe:	4798      	blx	r3
    e300:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    e302:	68fb      	ldr	r3, [r7, #12]
    e304:	2b00      	cmp	r3, #0
    e306:	da01      	bge.n	e30c <usbdc_init+0x30>
		return rc;
    e308:	68fb      	ldr	r3, [r7, #12]
    e30a:	e010      	b.n	e32e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    e30c:	2220      	movs	r2, #32
    e30e:	2100      	movs	r1, #0
    e310:	480c      	ldr	r0, [pc, #48]	; (e344 <usbdc_init+0x68>)
    e312:	4b0d      	ldr	r3, [pc, #52]	; (e348 <usbdc_init+0x6c>)
    e314:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    e316:	4a0b      	ldr	r2, [pc, #44]	; (e344 <usbdc_init+0x68>)
    e318:	687b      	ldr	r3, [r7, #4]
    e31a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    e31c:	490b      	ldr	r1, [pc, #44]	; (e34c <usbdc_init+0x70>)
    e31e:	2000      	movs	r0, #0
    e320:	4b0b      	ldr	r3, [pc, #44]	; (e350 <usbdc_init+0x74>)
    e322:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    e324:	490b      	ldr	r1, [pc, #44]	; (e354 <usbdc_init+0x78>)
    e326:	2001      	movs	r0, #1
    e328:	4b09      	ldr	r3, [pc, #36]	; (e350 <usbdc_init+0x74>)
    e32a:	4798      	blx	r3

	return 0;
    e32c:	2300      	movs	r3, #0
}
    e32e:	4618      	mov	r0, r3
    e330:	3710      	adds	r7, #16
    e332:	46bd      	mov	sp, r7
    e334:	bd80      	pop	{r7, pc}
    e336:	bf00      	nop
    e338:	000116b8 	.word	0x000116b8
    e33c:	00004f51 	.word	0x00004f51
    e340:	000049a9 	.word	0x000049a9
    e344:	200020b8 	.word	0x200020b8
    e348:	000102ed 	.word	0x000102ed
    e34c:	0000e039 	.word	0x0000e039
    e350:	00004a55 	.word	0x00004a55
    e354:	0000e215 	.word	0x0000e215

0000e358 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    e358:	b580      	push	{r7, lr}
    e35a:	b082      	sub	sp, #8
    e35c:	af00      	add	r7, sp, #0
    e35e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    e360:	6879      	ldr	r1, [r7, #4]
    e362:	4803      	ldr	r0, [pc, #12]	; (e370 <usbdc_register_function+0x18>)
    e364:	4b03      	ldr	r3, [pc, #12]	; (e374 <usbdc_register_function+0x1c>)
    e366:	4798      	blx	r3
}
    e368:	bf00      	nop
    e36a:	3708      	adds	r7, #8
    e36c:	46bd      	mov	sp, r7
    e36e:	bd80      	pop	{r7, pc}
    e370:	200020c8 	.word	0x200020c8
    e374:	0000502d 	.word	0x0000502d

0000e378 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    e378:	b580      	push	{r7, lr}
    e37a:	b082      	sub	sp, #8
    e37c:	af00      	add	r7, sp, #0
    e37e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    e380:	4b0f      	ldr	r3, [pc, #60]	; (e3c0 <usbdc_start+0x48>)
    e382:	7e9b      	ldrb	r3, [r3, #26]
    e384:	2b00      	cmp	r3, #0
    e386:	d002      	beq.n	e38e <usbdc_start+0x16>
		return ERR_BUSY;
    e388:	f06f 0303 	mvn.w	r3, #3
    e38c:	e013      	b.n	e3b6 <usbdc_start+0x3e>
	}

	if (desces) {
    e38e:	687b      	ldr	r3, [r7, #4]
    e390:	2b00      	cmp	r3, #0
    e392:	d00e      	beq.n	e3b2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    e394:	4a0a      	ldr	r2, [pc, #40]	; (e3c0 <usbdc_start+0x48>)
    e396:	687b      	ldr	r3, [r7, #4]
    e398:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    e39a:	687b      	ldr	r3, [r7, #4]
    e39c:	681b      	ldr	r3, [r3, #0]
    e39e:	79da      	ldrb	r2, [r3, #7]
    e3a0:	4b07      	ldr	r3, [pc, #28]	; (e3c0 <usbdc_start+0x48>)
    e3a2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    e3a4:	4b06      	ldr	r3, [pc, #24]	; (e3c0 <usbdc_start+0x48>)
    e3a6:	2201      	movs	r2, #1
    e3a8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    e3aa:	4b06      	ldr	r3, [pc, #24]	; (e3c4 <usbdc_start+0x4c>)
    e3ac:	4798      	blx	r3
	return ERR_NONE;
    e3ae:	2300      	movs	r3, #0
    e3b0:	e001      	b.n	e3b6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    e3b2:	f06f 0308 	mvn.w	r3, #8
}
    e3b6:	4618      	mov	r0, r3
    e3b8:	3708      	adds	r7, #8
    e3ba:	46bd      	mov	sp, r7
    e3bc:	bd80      	pop	{r7, pc}
    e3be:	bf00      	nop
    e3c0:	200020b8 	.word	0x200020b8
    e3c4:	00004a79 	.word	0x00004a79

0000e3c8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    e3c8:	b580      	push	{r7, lr}
    e3ca:	af00      	add	r7, sp, #0
	usb_d_attach();
    e3cc:	4b01      	ldr	r3, [pc, #4]	; (e3d4 <usbdc_attach+0xc>)
    e3ce:	4798      	blx	r3
}
    e3d0:	bf00      	nop
    e3d2:	bd80      	pop	{r7, pc}
    e3d4:	00004a8d 	.word	0x00004a8d

0000e3d8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    e3d8:	b480      	push	{r7}
    e3da:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    e3dc:	4b03      	ldr	r3, [pc, #12]	; (e3ec <usbdc_get_ctrl_buffer+0x14>)
    e3de:	695b      	ldr	r3, [r3, #20]
}
    e3e0:	4618      	mov	r0, r3
    e3e2:	46bd      	mov	sp, r7
    e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3e8:	4770      	bx	lr
    e3ea:	bf00      	nop
    e3ec:	200020b8 	.word	0x200020b8

0000e3f0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    e3f0:	b480      	push	{r7}
    e3f2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    e3f4:	4b07      	ldr	r3, [pc, #28]	; (e414 <usbdc_get_state+0x24>)
    e3f6:	7e9b      	ldrb	r3, [r3, #26]
    e3f8:	f003 0310 	and.w	r3, r3, #16
    e3fc:	2b00      	cmp	r3, #0
    e3fe:	d001      	beq.n	e404 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    e400:	2310      	movs	r3, #16
    e402:	e001      	b.n	e408 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    e404:	4b03      	ldr	r3, [pc, #12]	; (e414 <usbdc_get_state+0x24>)
    e406:	7e9b      	ldrb	r3, [r3, #26]
}
    e408:	4618      	mov	r0, r3
    e40a:	46bd      	mov	sp, r7
    e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e410:	4770      	bx	lr
    e412:	bf00      	nop
    e414:	200020b8 	.word	0x200020b8

0000e418 <usb_get_u16>:
{
    e418:	b480      	push	{r7}
    e41a:	b083      	sub	sp, #12
    e41c:	af00      	add	r7, sp, #0
    e41e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e420:	687b      	ldr	r3, [r7, #4]
    e422:	781b      	ldrb	r3, [r3, #0]
    e424:	b29a      	uxth	r2, r3
    e426:	687b      	ldr	r3, [r7, #4]
    e428:	3301      	adds	r3, #1
    e42a:	781b      	ldrb	r3, [r3, #0]
    e42c:	b29b      	uxth	r3, r3
    e42e:	021b      	lsls	r3, r3, #8
    e430:	b29b      	uxth	r3, r3
    e432:	4413      	add	r3, r2
    e434:	b29b      	uxth	r3, r3
}
    e436:	4618      	mov	r0, r3
    e438:	370c      	adds	r7, #12
    e43a:	46bd      	mov	sp, r7
    e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e440:	4770      	bx	lr

0000e442 <usb_desc_len>:
{
    e442:	b480      	push	{r7}
    e444:	b083      	sub	sp, #12
    e446:	af00      	add	r7, sp, #0
    e448:	6078      	str	r0, [r7, #4]
	return desc[0];
    e44a:	687b      	ldr	r3, [r7, #4]
    e44c:	781b      	ldrb	r3, [r3, #0]
}
    e44e:	4618      	mov	r0, r3
    e450:	370c      	adds	r7, #12
    e452:	46bd      	mov	sp, r7
    e454:	f85d 7b04 	ldr.w	r7, [sp], #4
    e458:	4770      	bx	lr

0000e45a <usb_desc_type>:
{
    e45a:	b480      	push	{r7}
    e45c:	b083      	sub	sp, #12
    e45e:	af00      	add	r7, sp, #0
    e460:	6078      	str	r0, [r7, #4]
	return desc[1];
    e462:	687b      	ldr	r3, [r7, #4]
    e464:	3301      	adds	r3, #1
    e466:	781b      	ldrb	r3, [r3, #0]
}
    e468:	4618      	mov	r0, r3
    e46a:	370c      	adds	r7, #12
    e46c:	46bd      	mov	sp, r7
    e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e472:	4770      	bx	lr

0000e474 <usb_desc_next>:
{
    e474:	b580      	push	{r7, lr}
    e476:	b082      	sub	sp, #8
    e478:	af00      	add	r7, sp, #0
    e47a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e47c:	6878      	ldr	r0, [r7, #4]
    e47e:	4b05      	ldr	r3, [pc, #20]	; (e494 <usb_desc_next+0x20>)
    e480:	4798      	blx	r3
    e482:	4603      	mov	r3, r0
    e484:	461a      	mov	r2, r3
    e486:	687b      	ldr	r3, [r7, #4]
    e488:	4413      	add	r3, r2
}
    e48a:	4618      	mov	r0, r3
    e48c:	3708      	adds	r7, #8
    e48e:	46bd      	mov	sp, r7
    e490:	bd80      	pop	{r7, pc}
    e492:	bf00      	nop
    e494:	0000e443 	.word	0x0000e443

0000e498 <usb_cfg_desc_total_len>:
{
    e498:	b580      	push	{r7, lr}
    e49a:	b082      	sub	sp, #8
    e49c:	af00      	add	r7, sp, #0
    e49e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e4a0:	687b      	ldr	r3, [r7, #4]
    e4a2:	3302      	adds	r3, #2
    e4a4:	4618      	mov	r0, r3
    e4a6:	4b03      	ldr	r3, [pc, #12]	; (e4b4 <usb_cfg_desc_total_len+0x1c>)
    e4a8:	4798      	blx	r3
    e4aa:	4603      	mov	r3, r0
}
    e4ac:	4618      	mov	r0, r3
    e4ae:	3708      	adds	r7, #8
    e4b0:	46bd      	mov	sp, r7
    e4b2:	bd80      	pop	{r7, pc}
    e4b4:	0000e419 	.word	0x0000e419

0000e4b8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    e4b8:	b580      	push	{r7, lr}
    e4ba:	b082      	sub	sp, #8
    e4bc:	af00      	add	r7, sp, #0
    e4be:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    e4c0:	6878      	ldr	r0, [r7, #4]
    e4c2:	4b05      	ldr	r3, [pc, #20]	; (e4d8 <usb_cfg_desc_next+0x20>)
    e4c4:	4798      	blx	r3
    e4c6:	4603      	mov	r3, r0
    e4c8:	461a      	mov	r2, r3
    e4ca:	687b      	ldr	r3, [r7, #4]
    e4cc:	4413      	add	r3, r2
}
    e4ce:	4618      	mov	r0, r3
    e4d0:	3708      	adds	r7, #8
    e4d2:	46bd      	mov	sp, r7
    e4d4:	bd80      	pop	{r7, pc}
    e4d6:	bf00      	nop
    e4d8:	0000e499 	.word	0x0000e499

0000e4dc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    e4dc:	b580      	push	{r7, lr}
    e4de:	b084      	sub	sp, #16
    e4e0:	af00      	add	r7, sp, #0
    e4e2:	60f8      	str	r0, [r7, #12]
    e4e4:	60b9      	str	r1, [r7, #8]
    e4e6:	4613      	mov	r3, r2
    e4e8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    e4ea:	e015      	b.n	e518 <usb_find_desc+0x3c>
		_desc_len_check();
    e4ec:	68f8      	ldr	r0, [r7, #12]
    e4ee:	4b0f      	ldr	r3, [pc, #60]	; (e52c <usb_find_desc+0x50>)
    e4f0:	4798      	blx	r3
    e4f2:	4603      	mov	r3, r0
    e4f4:	2b01      	cmp	r3, #1
    e4f6:	d801      	bhi.n	e4fc <usb_find_desc+0x20>
    e4f8:	2300      	movs	r3, #0
    e4fa:	e012      	b.n	e522 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    e4fc:	68f8      	ldr	r0, [r7, #12]
    e4fe:	4b0c      	ldr	r3, [pc, #48]	; (e530 <usb_find_desc+0x54>)
    e500:	4798      	blx	r3
    e502:	4603      	mov	r3, r0
    e504:	461a      	mov	r2, r3
    e506:	79fb      	ldrb	r3, [r7, #7]
    e508:	4293      	cmp	r3, r2
    e50a:	d101      	bne.n	e510 <usb_find_desc+0x34>
			return desc;
    e50c:	68fb      	ldr	r3, [r7, #12]
    e50e:	e008      	b.n	e522 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    e510:	68f8      	ldr	r0, [r7, #12]
    e512:	4b08      	ldr	r3, [pc, #32]	; (e534 <usb_find_desc+0x58>)
    e514:	4798      	blx	r3
    e516:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    e518:	68fa      	ldr	r2, [r7, #12]
    e51a:	68bb      	ldr	r3, [r7, #8]
    e51c:	429a      	cmp	r2, r3
    e51e:	d3e5      	bcc.n	e4ec <usb_find_desc+0x10>
	}
	return NULL;
    e520:	2300      	movs	r3, #0
}
    e522:	4618      	mov	r0, r3
    e524:	3710      	adds	r7, #16
    e526:	46bd      	mov	sp, r7
    e528:	bd80      	pop	{r7, pc}
    e52a:	bf00      	nop
    e52c:	0000e443 	.word	0x0000e443
    e530:	0000e45b 	.word	0x0000e45b
    e534:	0000e475 	.word	0x0000e475

0000e538 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    e538:	b580      	push	{r7, lr}
    e53a:	b082      	sub	sp, #8
    e53c:	af00      	add	r7, sp, #0
    e53e:	6078      	str	r0, [r7, #4]
    e540:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    e542:	e019      	b.n	e578 <usb_find_ep_desc+0x40>
		_desc_len_check();
    e544:	6878      	ldr	r0, [r7, #4]
    e546:	4b12      	ldr	r3, [pc, #72]	; (e590 <usb_find_ep_desc+0x58>)
    e548:	4798      	blx	r3
    e54a:	4603      	mov	r3, r0
    e54c:	2b01      	cmp	r3, #1
    e54e:	d801      	bhi.n	e554 <usb_find_ep_desc+0x1c>
    e550:	2300      	movs	r3, #0
    e552:	e018      	b.n	e586 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    e554:	6878      	ldr	r0, [r7, #4]
    e556:	4b0f      	ldr	r3, [pc, #60]	; (e594 <usb_find_ep_desc+0x5c>)
    e558:	4798      	blx	r3
    e55a:	4603      	mov	r3, r0
    e55c:	2b04      	cmp	r3, #4
    e55e:	d010      	beq.n	e582 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    e560:	6878      	ldr	r0, [r7, #4]
    e562:	4b0c      	ldr	r3, [pc, #48]	; (e594 <usb_find_ep_desc+0x5c>)
    e564:	4798      	blx	r3
    e566:	4603      	mov	r3, r0
    e568:	2b05      	cmp	r3, #5
    e56a:	d101      	bne.n	e570 <usb_find_ep_desc+0x38>
			return desc;
    e56c:	687b      	ldr	r3, [r7, #4]
    e56e:	e00a      	b.n	e586 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    e570:	6878      	ldr	r0, [r7, #4]
    e572:	4b09      	ldr	r3, [pc, #36]	; (e598 <usb_find_ep_desc+0x60>)
    e574:	4798      	blx	r3
    e576:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    e578:	687a      	ldr	r2, [r7, #4]
    e57a:	683b      	ldr	r3, [r7, #0]
    e57c:	429a      	cmp	r2, r3
    e57e:	d3e1      	bcc.n	e544 <usb_find_ep_desc+0xc>
    e580:	e000      	b.n	e584 <usb_find_ep_desc+0x4c>
			break;
    e582:	bf00      	nop
	}
	return NULL;
    e584:	2300      	movs	r3, #0
}
    e586:	4618      	mov	r0, r3
    e588:	3708      	adds	r7, #8
    e58a:	46bd      	mov	sp, r7
    e58c:	bd80      	pop	{r7, pc}
    e58e:	bf00      	nop
    e590:	0000e443 	.word	0x0000e443
    e594:	0000e45b 	.word	0x0000e45b
    e598:	0000e475 	.word	0x0000e475

0000e59c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    e59c:	b580      	push	{r7, lr}
    e59e:	b084      	sub	sp, #16
    e5a0:	af00      	add	r7, sp, #0
    e5a2:	60f8      	str	r0, [r7, #12]
    e5a4:	60b9      	str	r1, [r7, #8]
    e5a6:	4613      	mov	r3, r2
    e5a8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    e5aa:	2202      	movs	r2, #2
    e5ac:	68b9      	ldr	r1, [r7, #8]
    e5ae:	68f8      	ldr	r0, [r7, #12]
    e5b0:	4b15      	ldr	r3, [pc, #84]	; (e608 <usb_find_cfg_desc+0x6c>)
    e5b2:	4798      	blx	r3
    e5b4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    e5b6:	68fb      	ldr	r3, [r7, #12]
    e5b8:	2b00      	cmp	r3, #0
    e5ba:	d11a      	bne.n	e5f2 <usb_find_cfg_desc+0x56>
		return NULL;
    e5bc:	2300      	movs	r3, #0
    e5be:	e01f      	b.n	e600 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    e5c0:	68f8      	ldr	r0, [r7, #12]
    e5c2:	4b12      	ldr	r3, [pc, #72]	; (e60c <usb_find_cfg_desc+0x70>)
    e5c4:	4798      	blx	r3
    e5c6:	4603      	mov	r3, r0
    e5c8:	2b01      	cmp	r3, #1
    e5ca:	d801      	bhi.n	e5d0 <usb_find_cfg_desc+0x34>
    e5cc:	2300      	movs	r3, #0
    e5ce:	e017      	b.n	e600 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    e5d0:	68fb      	ldr	r3, [r7, #12]
    e5d2:	3301      	adds	r3, #1
    e5d4:	781b      	ldrb	r3, [r3, #0]
    e5d6:	2b02      	cmp	r3, #2
    e5d8:	d110      	bne.n	e5fc <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    e5da:	68fb      	ldr	r3, [r7, #12]
    e5dc:	3305      	adds	r3, #5
    e5de:	781b      	ldrb	r3, [r3, #0]
    e5e0:	79fa      	ldrb	r2, [r7, #7]
    e5e2:	429a      	cmp	r2, r3
    e5e4:	d101      	bne.n	e5ea <usb_find_cfg_desc+0x4e>
			return desc;
    e5e6:	68fb      	ldr	r3, [r7, #12]
    e5e8:	e00a      	b.n	e600 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    e5ea:	68f8      	ldr	r0, [r7, #12]
    e5ec:	4b08      	ldr	r3, [pc, #32]	; (e610 <usb_find_cfg_desc+0x74>)
    e5ee:	4798      	blx	r3
    e5f0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    e5f2:	68fa      	ldr	r2, [r7, #12]
    e5f4:	68bb      	ldr	r3, [r7, #8]
    e5f6:	429a      	cmp	r2, r3
    e5f8:	d3e2      	bcc.n	e5c0 <usb_find_cfg_desc+0x24>
    e5fa:	e000      	b.n	e5fe <usb_find_cfg_desc+0x62>
			break;
    e5fc:	bf00      	nop
	}
	return NULL;
    e5fe:	2300      	movs	r3, #0
}
    e600:	4618      	mov	r0, r3
    e602:	3710      	adds	r7, #16
    e604:	46bd      	mov	sp, r7
    e606:	bd80      	pop	{r7, pc}
    e608:	0000e4dd 	.word	0x0000e4dd
    e60c:	0000e443 	.word	0x0000e443
    e610:	0000e4b9 	.word	0x0000e4b9

0000e614 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    e614:	b580      	push	{r7, lr}
    e616:	b086      	sub	sp, #24
    e618:	af00      	add	r7, sp, #0
    e61a:	60f8      	str	r0, [r7, #12]
    e61c:	60b9      	str	r1, [r7, #8]
    e61e:	4613      	mov	r3, r2
    e620:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    e622:	2300      	movs	r3, #0
    e624:	75fb      	strb	r3, [r7, #23]
    e626:	e020      	b.n	e66a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    e628:	2203      	movs	r2, #3
    e62a:	68b9      	ldr	r1, [r7, #8]
    e62c:	68f8      	ldr	r0, [r7, #12]
    e62e:	4b13      	ldr	r3, [pc, #76]	; (e67c <usb_find_str_desc+0x68>)
    e630:	4798      	blx	r3
    e632:	60f8      	str	r0, [r7, #12]
		if (desc) {
    e634:	68fb      	ldr	r3, [r7, #12]
    e636:	2b00      	cmp	r3, #0
    e638:	d015      	beq.n	e666 <usb_find_str_desc+0x52>
			_desc_len_check();
    e63a:	68f8      	ldr	r0, [r7, #12]
    e63c:	4b10      	ldr	r3, [pc, #64]	; (e680 <usb_find_str_desc+0x6c>)
    e63e:	4798      	blx	r3
    e640:	4603      	mov	r3, r0
    e642:	2b01      	cmp	r3, #1
    e644:	d801      	bhi.n	e64a <usb_find_str_desc+0x36>
    e646:	2300      	movs	r3, #0
    e648:	e014      	b.n	e674 <usb_find_str_desc+0x60>
			if (i == str_index) {
    e64a:	7dfa      	ldrb	r2, [r7, #23]
    e64c:	79fb      	ldrb	r3, [r7, #7]
    e64e:	429a      	cmp	r2, r3
    e650:	d101      	bne.n	e656 <usb_find_str_desc+0x42>
				return desc;
    e652:	68fb      	ldr	r3, [r7, #12]
    e654:	e00e      	b.n	e674 <usb_find_str_desc+0x60>
			}
			i++;
    e656:	7dfb      	ldrb	r3, [r7, #23]
    e658:	3301      	adds	r3, #1
    e65a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    e65c:	68f8      	ldr	r0, [r7, #12]
    e65e:	4b09      	ldr	r3, [pc, #36]	; (e684 <usb_find_str_desc+0x70>)
    e660:	4798      	blx	r3
    e662:	60f8      	str	r0, [r7, #12]
    e664:	e001      	b.n	e66a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    e666:	2300      	movs	r3, #0
    e668:	e004      	b.n	e674 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    e66a:	68fa      	ldr	r2, [r7, #12]
    e66c:	68bb      	ldr	r3, [r7, #8]
    e66e:	429a      	cmp	r2, r3
    e670:	d3da      	bcc.n	e628 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    e672:	2300      	movs	r3, #0
}
    e674:	4618      	mov	r0, r3
    e676:	3718      	adds	r7, #24
    e678:	46bd      	mov	sp, r7
    e67a:	bd80      	pop	{r7, pc}
    e67c:	0000e4dd 	.word	0x0000e4dd
    e680:	0000e443 	.word	0x0000e443
    e684:	0000e475 	.word	0x0000e475

0000e688 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    e688:	b580      	push	{r7, lr}
    e68a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    e68c:	4805      	ldr	r0, [pc, #20]	; (e6a4 <cdc_device_acm_init+0x1c>)
    e68e:	4b06      	ldr	r3, [pc, #24]	; (e6a8 <cdc_device_acm_init+0x20>)
    e690:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    e692:	4b06      	ldr	r3, [pc, #24]	; (e6ac <cdc_device_acm_init+0x24>)
    e694:	4798      	blx	r3

	usbdc_start(single_desc);
    e696:	4806      	ldr	r0, [pc, #24]	; (e6b0 <cdc_device_acm_init+0x28>)
    e698:	4b06      	ldr	r3, [pc, #24]	; (e6b4 <cdc_device_acm_init+0x2c>)
    e69a:	4798      	blx	r3
	usbdc_attach();
    e69c:	4b06      	ldr	r3, [pc, #24]	; (e6b8 <cdc_device_acm_init+0x30>)
    e69e:	4798      	blx	r3
}
    e6a0:	bf00      	nop
    e6a2:	bd80      	pop	{r7, pc}
    e6a4:	20002118 	.word	0x20002118
    e6a8:	0000e2dd 	.word	0x0000e2dd
    e6ac:	0000d555 	.word	0x0000d555
    e6b0:	2000010c 	.word	0x2000010c
    e6b4:	0000e379 	.word	0x0000e379
    e6b8:	0000e3c9 	.word	0x0000e3c9

0000e6bc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    e6bc:	b580      	push	{r7, lr}
    e6be:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    e6c0:	4b01      	ldr	r3, [pc, #4]	; (e6c8 <usb_init+0xc>)
    e6c2:	4798      	blx	r3
}
    e6c4:	bf00      	nop
    e6c6:	bd80      	pop	{r7, pc}
    e6c8:	0000e689 	.word	0x0000e689

0000e6cc <__aeabi_atexit>:
    e6cc:	460b      	mov	r3, r1
    e6ce:	4601      	mov	r1, r0
    e6d0:	4618      	mov	r0, r3
    e6d2:	f001 bd2f 	b.w	10134 <__cxa_atexit>
    e6d6:	bf00      	nop

0000e6d8 <_ZdlPvj>:
    e6d8:	f7f3 bb6a 	b.w	1db0 <_ZdlPv>

0000e6dc <pow>:
    e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6e0:	f8df 92f0 	ldr.w	r9, [pc, #752]	; e9d4 <pow+0x2f8>
    e6e4:	b08d      	sub	sp, #52	; 0x34
    e6e6:	4606      	mov	r6, r0
    e6e8:	460f      	mov	r7, r1
    e6ea:	4614      	mov	r4, r2
    e6ec:	461d      	mov	r5, r3
    e6ee:	f000 f973 	bl	e9d8 <__ieee754_pow>
    e6f2:	f999 8000 	ldrsb.w	r8, [r9]
    e6f6:	f1b8 3fff 	cmp.w	r8, #4294967295
    e6fa:	e9cd 0100 	strd	r0, r1, [sp]
    e6fe:	d036      	beq.n	e76e <pow+0x92>
    e700:	4622      	mov	r2, r4
    e702:	462b      	mov	r3, r5
    e704:	4620      	mov	r0, r4
    e706:	4629      	mov	r1, r5
    e708:	f001 fcde 	bl	100c8 <__aeabi_dcmpun>
    e70c:	4683      	mov	fp, r0
    e70e:	bb70      	cbnz	r0, e76e <pow+0x92>
    e710:	4632      	mov	r2, r6
    e712:	463b      	mov	r3, r7
    e714:	4630      	mov	r0, r6
    e716:	4639      	mov	r1, r7
    e718:	f001 fcd6 	bl	100c8 <__aeabi_dcmpun>
    e71c:	2200      	movs	r2, #0
    e71e:	4682      	mov	sl, r0
    e720:	2300      	movs	r3, #0
    e722:	2800      	cmp	r0, #0
    e724:	f040 80a0 	bne.w	e868 <pow+0x18c>
    e728:	4630      	mov	r0, r6
    e72a:	4639      	mov	r1, r7
    e72c:	f001 fc9a 	bl	10064 <__aeabi_dcmpeq>
    e730:	b310      	cbz	r0, e778 <pow+0x9c>
    e732:	2200      	movs	r2, #0
    e734:	2300      	movs	r3, #0
    e736:	4620      	mov	r0, r4
    e738:	4629      	mov	r1, r5
    e73a:	f001 fc93 	bl	10064 <__aeabi_dcmpeq>
    e73e:	4683      	mov	fp, r0
    e740:	2800      	cmp	r0, #0
    e742:	d06a      	beq.n	e81a <pow+0x13e>
    e744:	2201      	movs	r2, #1
    e746:	4b9c      	ldr	r3, [pc, #624]	; (e9b8 <pow+0x2dc>)
    e748:	9202      	str	r2, [sp, #8]
    e74a:	2100      	movs	r1, #0
    e74c:	2200      	movs	r2, #0
    e74e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    e752:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e756:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e75a:	e9cd 1208 	strd	r1, r2, [sp, #32]
    e75e:	9303      	str	r3, [sp, #12]
    e760:	f1b8 0f00 	cmp.w	r8, #0
    e764:	d045      	beq.n	e7f2 <pow+0x116>
    e766:	4c95      	ldr	r4, [pc, #596]	; (e9bc <pow+0x2e0>)
    e768:	2300      	movs	r3, #0
    e76a:	e9cd 3400 	strd	r3, r4, [sp]
    e76e:	e9dd 0100 	ldrd	r0, r1, [sp]
    e772:	b00d      	add	sp, #52	; 0x34
    e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e778:	e9dd 0100 	ldrd	r0, r1, [sp]
    e77c:	f000 ff32 	bl	f5e4 <finite>
    e780:	4680      	mov	r8, r0
    e782:	2800      	cmp	r0, #0
    e784:	f000 808b 	beq.w	e89e <pow+0x1c2>
    e788:	f04f 0a00 	mov.w	sl, #0
    e78c:	f04f 0b00 	mov.w	fp, #0
    e790:	4652      	mov	r2, sl
    e792:	465b      	mov	r3, fp
    e794:	e9dd 0100 	ldrd	r0, r1, [sp]
    e798:	f001 fc64 	bl	10064 <__aeabi_dcmpeq>
    e79c:	2800      	cmp	r0, #0
    e79e:	d0e6      	beq.n	e76e <pow+0x92>
    e7a0:	4630      	mov	r0, r6
    e7a2:	4639      	mov	r1, r7
    e7a4:	f000 ff1e 	bl	f5e4 <finite>
    e7a8:	2800      	cmp	r0, #0
    e7aa:	d0e0      	beq.n	e76e <pow+0x92>
    e7ac:	4620      	mov	r0, r4
    e7ae:	4629      	mov	r1, r5
    e7b0:	f000 ff18 	bl	f5e4 <finite>
    e7b4:	2800      	cmp	r0, #0
    e7b6:	d0da      	beq.n	e76e <pow+0x92>
    e7b8:	f999 3000 	ldrsb.w	r3, [r9]
    e7bc:	4a7e      	ldr	r2, [pc, #504]	; (e9b8 <pow+0x2dc>)
    e7be:	9203      	str	r2, [sp, #12]
    e7c0:	2104      	movs	r1, #4
    e7c2:	2200      	movs	r2, #0
    e7c4:	2b02      	cmp	r3, #2
    e7c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e7ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e7ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
    e7d2:	9102      	str	r1, [sp, #8]
    e7d4:	920a      	str	r2, [sp, #40]	; 0x28
    e7d6:	d003      	beq.n	e7e0 <pow+0x104>
    e7d8:	a802      	add	r0, sp, #8
    e7da:	f000 ff09 	bl	f5f0 <matherr>
    e7de:	b968      	cbnz	r0, e7fc <pow+0x120>
    e7e0:	f001 fcae 	bl	10140 <__errno>
    e7e4:	2322      	movs	r3, #34	; 0x22
    e7e6:	6003      	str	r3, [r0, #0]
    e7e8:	e008      	b.n	e7fc <pow+0x120>
    e7ea:	2300      	movs	r3, #0
    e7ec:	2400      	movs	r4, #0
    e7ee:	e9cd 3408 	strd	r3, r4, [sp, #32]
    e7f2:	a802      	add	r0, sp, #8
    e7f4:	f000 fefc 	bl	f5f0 <matherr>
    e7f8:	2800      	cmp	r0, #0
    e7fa:	d030      	beq.n	e85e <pow+0x182>
    e7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e7fe:	b11b      	cbz	r3, e808 <pow+0x12c>
    e800:	f001 fc9e 	bl	10140 <__errno>
    e804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e806:	6003      	str	r3, [r0, #0]
    e808:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    e80c:	e9cd 3400 	strd	r3, r4, [sp]
    e810:	e9dd 0100 	ldrd	r0, r1, [sp]
    e814:	b00d      	add	sp, #52	; 0x34
    e816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e81a:	4620      	mov	r0, r4
    e81c:	4629      	mov	r1, r5
    e81e:	f000 fee1 	bl	f5e4 <finite>
    e822:	2800      	cmp	r0, #0
    e824:	d0a3      	beq.n	e76e <pow+0x92>
    e826:	2200      	movs	r2, #0
    e828:	2300      	movs	r3, #0
    e82a:	4620      	mov	r0, r4
    e82c:	4629      	mov	r1, r5
    e82e:	f001 fc23 	bl	10078 <__aeabi_dcmplt>
    e832:	2800      	cmp	r0, #0
    e834:	d09b      	beq.n	e76e <pow+0x92>
    e836:	f999 3000 	ldrsb.w	r3, [r9]
    e83a:	4a5f      	ldr	r2, [pc, #380]	; (e9b8 <pow+0x2dc>)
    e83c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    e840:	2101      	movs	r1, #1
    e842:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e846:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e84a:	9102      	str	r1, [sp, #8]
    e84c:	9203      	str	r2, [sp, #12]
    e84e:	2b00      	cmp	r3, #0
    e850:	d0cb      	beq.n	e7ea <pow+0x10e>
    e852:	495b      	ldr	r1, [pc, #364]	; (e9c0 <pow+0x2e4>)
    e854:	2000      	movs	r0, #0
    e856:	2b02      	cmp	r3, #2
    e858:	e9cd 0108 	strd	r0, r1, [sp, #32]
    e85c:	d1c9      	bne.n	e7f2 <pow+0x116>
    e85e:	f001 fc6f 	bl	10140 <__errno>
    e862:	2321      	movs	r3, #33	; 0x21
    e864:	6003      	str	r3, [r0, #0]
    e866:	e7c9      	b.n	e7fc <pow+0x120>
    e868:	4620      	mov	r0, r4
    e86a:	4629      	mov	r1, r5
    e86c:	f001 fbfa 	bl	10064 <__aeabi_dcmpeq>
    e870:	2800      	cmp	r0, #0
    e872:	f43f af7c 	beq.w	e76e <pow+0x92>
    e876:	4b51      	ldr	r3, [pc, #324]	; (e9bc <pow+0x2e0>)
    e878:	494f      	ldr	r1, [pc, #316]	; (e9b8 <pow+0x2dc>)
    e87a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    e87e:	2001      	movs	r0, #1
    e880:	2200      	movs	r2, #0
    e882:	f1b8 0f02 	cmp.w	r8, #2
    e886:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e88a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e88e:	9002      	str	r0, [sp, #8]
    e890:	9103      	str	r1, [sp, #12]
    e892:	e9cd 2308 	strd	r2, r3, [sp, #32]
    e896:	d1ac      	bne.n	e7f2 <pow+0x116>
    e898:	e9cd 2300 	strd	r2, r3, [sp]
    e89c:	e767      	b.n	e76e <pow+0x92>
    e89e:	4630      	mov	r0, r6
    e8a0:	4639      	mov	r1, r7
    e8a2:	f000 fe9f 	bl	f5e4 <finite>
    e8a6:	2800      	cmp	r0, #0
    e8a8:	f43f af6e 	beq.w	e788 <pow+0xac>
    e8ac:	4620      	mov	r0, r4
    e8ae:	4629      	mov	r1, r5
    e8b0:	f000 fe98 	bl	f5e4 <finite>
    e8b4:	2800      	cmp	r0, #0
    e8b6:	f43f af67 	beq.w	e788 <pow+0xac>
    e8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
    e8be:	4610      	mov	r0, r2
    e8c0:	4619      	mov	r1, r3
    e8c2:	f001 fc01 	bl	100c8 <__aeabi_dcmpun>
    e8c6:	2800      	cmp	r0, #0
    e8c8:	d158      	bne.n	e97c <pow+0x2a0>
    e8ca:	2303      	movs	r3, #3
    e8cc:	f999 8000 	ldrsb.w	r8, [r9]
    e8d0:	9302      	str	r3, [sp, #8]
    e8d2:	4b39      	ldr	r3, [pc, #228]	; (e9b8 <pow+0x2dc>)
    e8d4:	900a      	str	r0, [sp, #40]	; 0x28
    e8d6:	9303      	str	r3, [sp, #12]
    e8d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e8dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e8e0:	2200      	movs	r2, #0
    e8e2:	2300      	movs	r3, #0
    e8e4:	4630      	mov	r0, r6
    e8e6:	4639      	mov	r1, r7
    e8e8:	f1b8 0f00 	cmp.w	r8, #0
    e8ec:	d126      	bne.n	e93c <pow+0x260>
    e8ee:	4f35      	ldr	r7, [pc, #212]	; (e9c4 <pow+0x2e8>)
    e8f0:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    e8f4:	e9cd 6708 	strd	r6, r7, [sp, #32]
    e8f8:	f001 fbbe 	bl	10078 <__aeabi_dcmplt>
    e8fc:	2800      	cmp	r0, #0
    e8fe:	f43f af6b 	beq.w	e7d8 <pow+0xfc>
    e902:	2200      	movs	r2, #0
    e904:	4b30      	ldr	r3, [pc, #192]	; (e9c8 <pow+0x2ec>)
    e906:	4620      	mov	r0, r4
    e908:	4629      	mov	r1, r5
    e90a:	f001 f943 	bl	fb94 <__aeabi_dmul>
    e90e:	4604      	mov	r4, r0
    e910:	460d      	mov	r5, r1
    e912:	f000 fe75 	bl	f600 <rint>
    e916:	4602      	mov	r2, r0
    e918:	460b      	mov	r3, r1
    e91a:	4620      	mov	r0, r4
    e91c:	4629      	mov	r1, r5
    e91e:	f001 fba1 	bl	10064 <__aeabi_dcmpeq>
    e922:	bb40      	cbnz	r0, e976 <pow+0x29a>
    e924:	4b29      	ldr	r3, [pc, #164]	; (e9cc <pow+0x2f0>)
    e926:	f999 8000 	ldrsb.w	r8, [r9]
    e92a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e92e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    e932:	f1b8 0f02 	cmp.w	r8, #2
    e936:	f47f af4f 	bne.w	e7d8 <pow+0xfc>
    e93a:	e751      	b.n	e7e0 <pow+0x104>
    e93c:	4f24      	ldr	r7, [pc, #144]	; (e9d0 <pow+0x2f4>)
    e93e:	2600      	movs	r6, #0
    e940:	e9cd 6708 	strd	r6, r7, [sp, #32]
    e944:	f001 fb98 	bl	10078 <__aeabi_dcmplt>
    e948:	2800      	cmp	r0, #0
    e94a:	d0f2      	beq.n	e932 <pow+0x256>
    e94c:	2200      	movs	r2, #0
    e94e:	4b1e      	ldr	r3, [pc, #120]	; (e9c8 <pow+0x2ec>)
    e950:	4620      	mov	r0, r4
    e952:	4629      	mov	r1, r5
    e954:	f001 f91e 	bl	fb94 <__aeabi_dmul>
    e958:	4604      	mov	r4, r0
    e95a:	460d      	mov	r5, r1
    e95c:	f000 fe50 	bl	f600 <rint>
    e960:	4602      	mov	r2, r0
    e962:	460b      	mov	r3, r1
    e964:	4620      	mov	r0, r4
    e966:	4629      	mov	r1, r5
    e968:	f001 fb7c 	bl	10064 <__aeabi_dcmpeq>
    e96c:	b918      	cbnz	r0, e976 <pow+0x29a>
    e96e:	4b14      	ldr	r3, [pc, #80]	; (e9c0 <pow+0x2e4>)
    e970:	2200      	movs	r2, #0
    e972:	e9cd 2308 	strd	r2, r3, [sp, #32]
    e976:	f999 8000 	ldrsb.w	r8, [r9]
    e97a:	e7da      	b.n	e932 <pow+0x256>
    e97c:	f999 9000 	ldrsb.w	r9, [r9]
    e980:	4b0d      	ldr	r3, [pc, #52]	; (e9b8 <pow+0x2dc>)
    e982:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e986:	2201      	movs	r2, #1
    e988:	e9cd 6704 	strd	r6, r7, [sp, #16]
    e98c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    e990:	9202      	str	r2, [sp, #8]
    e992:	9303      	str	r3, [sp, #12]
    e994:	f1b9 0f00 	cmp.w	r9, #0
    e998:	f43f af27 	beq.w	e7ea <pow+0x10e>
    e99c:	2200      	movs	r2, #0
    e99e:	2300      	movs	r3, #0
    e9a0:	4610      	mov	r0, r2
    e9a2:	4619      	mov	r1, r3
    e9a4:	f001 fa20 	bl	fde8 <__aeabi_ddiv>
    e9a8:	f1b9 0f02 	cmp.w	r9, #2
    e9ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
    e9b0:	f43f af55 	beq.w	e85e <pow+0x182>
    e9b4:	e71d      	b.n	e7f2 <pow+0x116>
    e9b6:	bf00      	nop
    e9b8:	000116d0 	.word	0x000116d0
    e9bc:	3ff00000 	.word	0x3ff00000
    e9c0:	fff00000 	.word	0xfff00000
    e9c4:	47efffff 	.word	0x47efffff
    e9c8:	3fe00000 	.word	0x3fe00000
    e9cc:	c7efffff 	.word	0xc7efffff
    e9d0:	7ff00000 	.word	0x7ff00000
    e9d4:	20000114 	.word	0x20000114

0000e9d8 <__ieee754_pow>:
    e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9dc:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    e9e0:	ea57 0402 	orrs.w	r4, r7, r2
    e9e4:	b093      	sub	sp, #76	; 0x4c
    e9e6:	d037      	beq.n	ea58 <__ieee754_pow+0x80>
    e9e8:	4c67      	ldr	r4, [pc, #412]	; (eb88 <__ieee754_pow+0x1b0>)
    e9ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    e9ee:	42a6      	cmp	r6, r4
    e9f0:	4683      	mov	fp, r0
    e9f2:	460d      	mov	r5, r1
    e9f4:	dc29      	bgt.n	ea4a <__ieee754_pow+0x72>
    e9f6:	469a      	mov	sl, r3
    e9f8:	4696      	mov	lr, r2
    e9fa:	d025      	beq.n	ea48 <__ieee754_pow+0x70>
    e9fc:	42a7      	cmp	r7, r4
    e9fe:	dc24      	bgt.n	ea4a <__ieee754_pow+0x72>
    ea00:	4c61      	ldr	r4, [pc, #388]	; (eb88 <__ieee754_pow+0x1b0>)
    ea02:	42a7      	cmp	r7, r4
    ea04:	d079      	beq.n	eafa <__ieee754_pow+0x122>
    ea06:	2d00      	cmp	r5, #0
    ea08:	4689      	mov	r9, r1
    ea0a:	4680      	mov	r8, r0
    ea0c:	e9cd 2300 	strd	r2, r3, [sp]
    ea10:	db77      	blt.n	eb02 <__ieee754_pow+0x12a>
    ea12:	2400      	movs	r4, #0
    ea14:	f1be 0f00 	cmp.w	lr, #0
    ea18:	d12c      	bne.n	ea74 <__ieee754_pow+0x9c>
    ea1a:	4b5b      	ldr	r3, [pc, #364]	; (eb88 <__ieee754_pow+0x1b0>)
    ea1c:	429f      	cmp	r7, r3
    ea1e:	f000 808b 	beq.w	eb38 <__ieee754_pow+0x160>
    ea22:	4b5a      	ldr	r3, [pc, #360]	; (eb8c <__ieee754_pow+0x1b4>)
    ea24:	429f      	cmp	r7, r3
    ea26:	d061      	beq.n	eaec <__ieee754_pow+0x114>
    ea28:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    ea2c:	f000 83ba 	beq.w	f1a4 <__ieee754_pow+0x7cc>
    ea30:	4b57      	ldr	r3, [pc, #348]	; (eb90 <__ieee754_pow+0x1b8>)
    ea32:	459a      	cmp	sl, r3
    ea34:	d11e      	bne.n	ea74 <__ieee754_pow+0x9c>
    ea36:	2d00      	cmp	r5, #0
    ea38:	db1c      	blt.n	ea74 <__ieee754_pow+0x9c>
    ea3a:	4640      	mov	r0, r8
    ea3c:	4649      	mov	r1, r9
    ea3e:	b013      	add	sp, #76	; 0x4c
    ea40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea44:	f000 bd0e 	b.w	f464 <__ieee754_sqrt>
    ea48:	b158      	cbz	r0, ea62 <__ieee754_pow+0x8a>
    ea4a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    ea4e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    ea52:	ea56 030b 	orrs.w	r3, r6, fp
    ea56:	d106      	bne.n	ea66 <__ieee754_pow+0x8e>
    ea58:	494c      	ldr	r1, [pc, #304]	; (eb8c <__ieee754_pow+0x1b4>)
    ea5a:	2000      	movs	r0, #0
    ea5c:	b013      	add	sp, #76	; 0x4c
    ea5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea62:	42b7      	cmp	r7, r6
    ea64:	ddcc      	ble.n	ea00 <__ieee754_pow+0x28>
    ea66:	484b      	ldr	r0, [pc, #300]	; (eb94 <__ieee754_pow+0x1bc>)
    ea68:	b013      	add	sp, #76	; 0x4c
    ea6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea6e:	f000 bdc1 	b.w	f5f4 <nan>
    ea72:	2400      	movs	r4, #0
    ea74:	4640      	mov	r0, r8
    ea76:	4649      	mov	r1, r9
    ea78:	f000 fdb0 	bl	f5dc <fabs>
    ea7c:	f1bb 0f00 	cmp.w	fp, #0
    ea80:	d119      	bne.n	eab6 <__ieee754_pow+0xde>
    ea82:	b126      	cbz	r6, ea8e <__ieee754_pow+0xb6>
    ea84:	4b41      	ldr	r3, [pc, #260]	; (eb8c <__ieee754_pow+0x1b4>)
    ea86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    ea8a:	429a      	cmp	r2, r3
    ea8c:	d113      	bne.n	eab6 <__ieee754_pow+0xde>
    ea8e:	f1ba 0f00 	cmp.w	sl, #0
    ea92:	f2c0 83bc 	blt.w	f20e <__ieee754_pow+0x836>
    ea96:	2d00      	cmp	r5, #0
    ea98:	dae0      	bge.n	ea5c <__ieee754_pow+0x84>
    ea9a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    ea9e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    eaa2:	ea56 0304 	orrs.w	r3, r6, r4
    eaa6:	f000 848f 	beq.w	f3c8 <__ieee754_pow+0x9f0>
    eaaa:	2c01      	cmp	r4, #1
    eaac:	d1d6      	bne.n	ea5c <__ieee754_pow+0x84>
    eaae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    eab2:	4619      	mov	r1, r3
    eab4:	e7d2      	b.n	ea5c <__ieee754_pow+0x84>
    eab6:	0fed      	lsrs	r5, r5, #31
    eab8:	3d01      	subs	r5, #1
    eaba:	ea54 0305 	orrs.w	r3, r4, r5
    eabe:	d04e      	beq.n	eb5e <__ieee754_pow+0x186>
    eac0:	4b35      	ldr	r3, [pc, #212]	; (eb98 <__ieee754_pow+0x1c0>)
    eac2:	429f      	cmp	r7, r3
    eac4:	dd6e      	ble.n	eba4 <__ieee754_pow+0x1cc>
    eac6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    eaca:	429f      	cmp	r7, r3
    eacc:	f340 83e8 	ble.w	f2a0 <__ieee754_pow+0x8c8>
    ead0:	4b32      	ldr	r3, [pc, #200]	; (eb9c <__ieee754_pow+0x1c4>)
    ead2:	429e      	cmp	r6, r3
    ead4:	dd4e      	ble.n	eb74 <__ieee754_pow+0x19c>
    ead6:	f1ba 0f00 	cmp.w	sl, #0
    eada:	dd4e      	ble.n	eb7a <__ieee754_pow+0x1a2>
    eadc:	a328      	add	r3, pc, #160	; (adr r3, eb80 <__ieee754_pow+0x1a8>)
    eade:	e9d3 2300 	ldrd	r2, r3, [r3]
    eae2:	4610      	mov	r0, r2
    eae4:	4619      	mov	r1, r3
    eae6:	f001 f855 	bl	fb94 <__aeabi_dmul>
    eaea:	e7b7      	b.n	ea5c <__ieee754_pow+0x84>
    eaec:	f1ba 0f00 	cmp.w	sl, #0
    eaf0:	f2c0 843c 	blt.w	f36c <__ieee754_pow+0x994>
    eaf4:	4640      	mov	r0, r8
    eaf6:	4649      	mov	r1, r9
    eaf8:	e7b0      	b.n	ea5c <__ieee754_pow+0x84>
    eafa:	f1be 0f00 	cmp.w	lr, #0
    eafe:	d082      	beq.n	ea06 <__ieee754_pow+0x2e>
    eb00:	e7a3      	b.n	ea4a <__ieee754_pow+0x72>
    eb02:	4b27      	ldr	r3, [pc, #156]	; (eba0 <__ieee754_pow+0x1c8>)
    eb04:	429f      	cmp	r7, r3
    eb06:	dc28      	bgt.n	eb5a <__ieee754_pow+0x182>
    eb08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    eb0c:	429f      	cmp	r7, r3
    eb0e:	dd80      	ble.n	ea12 <__ieee754_pow+0x3a>
    eb10:	153b      	asrs	r3, r7, #20
    eb12:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    eb16:	2b14      	cmp	r3, #20
    eb18:	f340 843e 	ble.w	f398 <__ieee754_pow+0x9c0>
    eb1c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    eb20:	fa2e f203 	lsr.w	r2, lr, r3
    eb24:	fa02 f303 	lsl.w	r3, r2, r3
    eb28:	459e      	cmp	lr, r3
    eb2a:	f47f af72 	bne.w	ea12 <__ieee754_pow+0x3a>
    eb2e:	f002 0201 	and.w	r2, r2, #1
    eb32:	f1c2 0402 	rsb	r4, r2, #2
    eb36:	e76d      	b.n	ea14 <__ieee754_pow+0x3c>
    eb38:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    eb3c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    eb40:	ea53 030b 	orrs.w	r3, r3, fp
    eb44:	d088      	beq.n	ea58 <__ieee754_pow+0x80>
    eb46:	4b15      	ldr	r3, [pc, #84]	; (eb9c <__ieee754_pow+0x1c4>)
    eb48:	429e      	cmp	r6, r3
    eb4a:	f340 8332 	ble.w	f1b2 <__ieee754_pow+0x7da>
    eb4e:	f1ba 0f00 	cmp.w	sl, #0
    eb52:	db12      	blt.n	eb7a <__ieee754_pow+0x1a2>
    eb54:	e9dd 0100 	ldrd	r0, r1, [sp]
    eb58:	e780      	b.n	ea5c <__ieee754_pow+0x84>
    eb5a:	2402      	movs	r4, #2
    eb5c:	e75a      	b.n	ea14 <__ieee754_pow+0x3c>
    eb5e:	4642      	mov	r2, r8
    eb60:	464b      	mov	r3, r9
    eb62:	4640      	mov	r0, r8
    eb64:	4649      	mov	r1, r9
    eb66:	f000 fe61 	bl	f82c <__aeabi_dsub>
    eb6a:	4602      	mov	r2, r0
    eb6c:	460b      	mov	r3, r1
    eb6e:	f001 f93b 	bl	fde8 <__aeabi_ddiv>
    eb72:	e773      	b.n	ea5c <__ieee754_pow+0x84>
    eb74:	f1ba 0f00 	cmp.w	sl, #0
    eb78:	dbb0      	blt.n	eadc <__ieee754_pow+0x104>
    eb7a:	2000      	movs	r0, #0
    eb7c:	2100      	movs	r1, #0
    eb7e:	e76d      	b.n	ea5c <__ieee754_pow+0x84>
    eb80:	8800759c 	.word	0x8800759c
    eb84:	7e37e43c 	.word	0x7e37e43c
    eb88:	7ff00000 	.word	0x7ff00000
    eb8c:	3ff00000 	.word	0x3ff00000
    eb90:	3fe00000 	.word	0x3fe00000
    eb94:	000116d4 	.word	0x000116d4
    eb98:	41e00000 	.word	0x41e00000
    eb9c:	3fefffff 	.word	0x3fefffff
    eba0:	433fffff 	.word	0x433fffff
    eba4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    eba8:	f04f 0200 	mov.w	r2, #0
    ebac:	da05      	bge.n	ebba <__ieee754_pow+0x1e2>
    ebae:	4bd4      	ldr	r3, [pc, #848]	; (ef00 <__ieee754_pow+0x528>)
    ebb0:	f000 fff0 	bl	fb94 <__aeabi_dmul>
    ebb4:	f06f 0234 	mvn.w	r2, #52	; 0x34
    ebb8:	460e      	mov	r6, r1
    ebba:	1533      	asrs	r3, r6, #20
    ebbc:	4fd1      	ldr	r7, [pc, #836]	; (ef04 <__ieee754_pow+0x52c>)
    ebbe:	f3c6 0613 	ubfx	r6, r6, #0, #20
    ebc2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    ebc6:	4413      	add	r3, r2
    ebc8:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    ebcc:	42be      	cmp	r6, r7
    ebce:	461a      	mov	r2, r3
    ebd0:	930d      	str	r3, [sp, #52]	; 0x34
    ebd2:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    ebd6:	f340 8321 	ble.w	f21c <__ieee754_pow+0x844>
    ebda:	4bcb      	ldr	r3, [pc, #812]	; (ef08 <__ieee754_pow+0x530>)
    ebdc:	429e      	cmp	r6, r3
    ebde:	f340 83fd 	ble.w	f3dc <__ieee754_pow+0xa04>
    ebe2:	4613      	mov	r3, r2
    ebe4:	3301      	adds	r3, #1
    ebe6:	930d      	str	r3, [sp, #52]	; 0x34
    ebe8:	4bc8      	ldr	r3, [pc, #800]	; (ef0c <__ieee754_pow+0x534>)
    ebea:	2200      	movs	r2, #0
    ebec:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ebf0:	2700      	movs	r7, #0
    ebf2:	2600      	movs	r6, #0
    ebf4:	e9cd 6708 	strd	r6, r7, [sp, #32]
    ebf8:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    ebfc:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    ec00:	2700      	movs	r7, #0
    ec02:	4602      	mov	r2, r0
    ec04:	4653      	mov	r3, sl
    ec06:	4651      	mov	r1, sl
    ec08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ec0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ec10:	f000 fe0c 	bl	f82c <__aeabi_dsub>
    ec14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ec18:	4680      	mov	r8, r0
    ec1a:	4689      	mov	r9, r1
    ec1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    ec20:	f000 fe06 	bl	f830 <__adddf3>
    ec24:	4602      	mov	r2, r0
    ec26:	460b      	mov	r3, r1
    ec28:	2000      	movs	r0, #0
    ec2a:	49b8      	ldr	r1, [pc, #736]	; (ef0c <__ieee754_pow+0x534>)
    ec2c:	f001 f8dc 	bl	fde8 <__aeabi_ddiv>
    ec30:	460a      	mov	r2, r1
    ec32:	4601      	mov	r1, r0
    ec34:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    ec38:	4613      	mov	r3, r2
    ec3a:	4649      	mov	r1, r9
    ec3c:	4602      	mov	r2, r0
    ec3e:	4640      	mov	r0, r8
    ec40:	f000 ffa8 	bl	fb94 <__aeabi_dmul>
    ec44:	ea4f 036a 	mov.w	r3, sl, asr #1
    ec48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    ec4c:	468c      	mov	ip, r1
    ec4e:	4683      	mov	fp, r0
    ec50:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    ec54:	e9cd bc04 	strd	fp, ip, [sp, #16]
    ec58:	46da      	mov	sl, fp
    ec5a:	468b      	mov	fp, r1
    ec5c:	19d9      	adds	r1, r3, r7
    ec5e:	2300      	movs	r3, #0
    ec60:	e9cd ab02 	strd	sl, fp, [sp, #8]
    ec64:	9302      	str	r3, [sp, #8]
    ec66:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    ec6a:	2000      	movs	r0, #0
    ec6c:	4606      	mov	r6, r0
    ec6e:	460f      	mov	r7, r1
    ec70:	4602      	mov	r2, r0
    ec72:	460b      	mov	r3, r1
    ec74:	4650      	mov	r0, sl
    ec76:	4659      	mov	r1, fp
    ec78:	f000 ff8c 	bl	fb94 <__aeabi_dmul>
    ec7c:	4602      	mov	r2, r0
    ec7e:	460b      	mov	r3, r1
    ec80:	4640      	mov	r0, r8
    ec82:	4649      	mov	r1, r9
    ec84:	f000 fdd2 	bl	f82c <__aeabi_dsub>
    ec88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ec8c:	4680      	mov	r8, r0
    ec8e:	4689      	mov	r9, r1
    ec90:	4630      	mov	r0, r6
    ec92:	4639      	mov	r1, r7
    ec94:	f000 fdca 	bl	f82c <__aeabi_dsub>
    ec98:	4602      	mov	r2, r0
    ec9a:	460b      	mov	r3, r1
    ec9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    eca0:	f000 fdc4 	bl	f82c <__aeabi_dsub>
    eca4:	4652      	mov	r2, sl
    eca6:	465b      	mov	r3, fp
    eca8:	f000 ff74 	bl	fb94 <__aeabi_dmul>
    ecac:	4602      	mov	r2, r0
    ecae:	460b      	mov	r3, r1
    ecb0:	4640      	mov	r0, r8
    ecb2:	4649      	mov	r1, r9
    ecb4:	f000 fdba 	bl	f82c <__aeabi_dsub>
    ecb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ecbc:	f000 ff6a 	bl	fb94 <__aeabi_dmul>
    ecc0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    ecc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    ecc8:	4632      	mov	r2, r6
    ecca:	463b      	mov	r3, r7
    eccc:	4630      	mov	r0, r6
    ecce:	4639      	mov	r1, r7
    ecd0:	f000 ff60 	bl	fb94 <__aeabi_dmul>
    ecd4:	a378      	add	r3, pc, #480	; (adr r3, eeb8 <__ieee754_pow+0x4e0>)
    ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecda:	4606      	mov	r6, r0
    ecdc:	460f      	mov	r7, r1
    ecde:	f000 ff59 	bl	fb94 <__aeabi_dmul>
    ece2:	a377      	add	r3, pc, #476	; (adr r3, eec0 <__ieee754_pow+0x4e8>)
    ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
    ece8:	f000 fda2 	bl	f830 <__adddf3>
    ecec:	4632      	mov	r2, r6
    ecee:	463b      	mov	r3, r7
    ecf0:	f000 ff50 	bl	fb94 <__aeabi_dmul>
    ecf4:	a374      	add	r3, pc, #464	; (adr r3, eec8 <__ieee754_pow+0x4f0>)
    ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecfa:	f000 fd99 	bl	f830 <__adddf3>
    ecfe:	4632      	mov	r2, r6
    ed00:	463b      	mov	r3, r7
    ed02:	f000 ff47 	bl	fb94 <__aeabi_dmul>
    ed06:	a372      	add	r3, pc, #456	; (adr r3, eed0 <__ieee754_pow+0x4f8>)
    ed08:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed0c:	f000 fd90 	bl	f830 <__adddf3>
    ed10:	4632      	mov	r2, r6
    ed12:	463b      	mov	r3, r7
    ed14:	f000 ff3e 	bl	fb94 <__aeabi_dmul>
    ed18:	a36f      	add	r3, pc, #444	; (adr r3, eed8 <__ieee754_pow+0x500>)
    ed1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed1e:	f000 fd87 	bl	f830 <__adddf3>
    ed22:	4632      	mov	r2, r6
    ed24:	463b      	mov	r3, r7
    ed26:	f000 ff35 	bl	fb94 <__aeabi_dmul>
    ed2a:	a36d      	add	r3, pc, #436	; (adr r3, eee0 <__ieee754_pow+0x508>)
    ed2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed30:	f000 fd7e 	bl	f830 <__adddf3>
    ed34:	4632      	mov	r2, r6
    ed36:	4680      	mov	r8, r0
    ed38:	4689      	mov	r9, r1
    ed3a:	463b      	mov	r3, r7
    ed3c:	4630      	mov	r0, r6
    ed3e:	4639      	mov	r1, r7
    ed40:	f000 ff28 	bl	fb94 <__aeabi_dmul>
    ed44:	4602      	mov	r2, r0
    ed46:	460b      	mov	r3, r1
    ed48:	4640      	mov	r0, r8
    ed4a:	4649      	mov	r1, r9
    ed4c:	f000 ff22 	bl	fb94 <__aeabi_dmul>
    ed50:	4652      	mov	r2, sl
    ed52:	4606      	mov	r6, r0
    ed54:	460f      	mov	r7, r1
    ed56:	465b      	mov	r3, fp
    ed58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ed5c:	f000 fd68 	bl	f830 <__adddf3>
    ed60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ed64:	f000 ff16 	bl	fb94 <__aeabi_dmul>
    ed68:	4632      	mov	r2, r6
    ed6a:	463b      	mov	r3, r7
    ed6c:	f000 fd60 	bl	f830 <__adddf3>
    ed70:	4652      	mov	r2, sl
    ed72:	4680      	mov	r8, r0
    ed74:	4689      	mov	r9, r1
    ed76:	465b      	mov	r3, fp
    ed78:	4650      	mov	r0, sl
    ed7a:	4659      	mov	r1, fp
    ed7c:	f000 ff0a 	bl	fb94 <__aeabi_dmul>
    ed80:	2200      	movs	r2, #0
    ed82:	4b63      	ldr	r3, [pc, #396]	; (ef10 <__ieee754_pow+0x538>)
    ed84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    ed88:	f000 fd52 	bl	f830 <__adddf3>
    ed8c:	4642      	mov	r2, r8
    ed8e:	464b      	mov	r3, r9
    ed90:	f000 fd4e 	bl	f830 <__adddf3>
    ed94:	9802      	ldr	r0, [sp, #8]
    ed96:	460f      	mov	r7, r1
    ed98:	4606      	mov	r6, r0
    ed9a:	4632      	mov	r2, r6
    ed9c:	463b      	mov	r3, r7
    ed9e:	4650      	mov	r0, sl
    eda0:	4659      	mov	r1, fp
    eda2:	f000 fef7 	bl	fb94 <__aeabi_dmul>
    eda6:	2200      	movs	r2, #0
    eda8:	4682      	mov	sl, r0
    edaa:	468b      	mov	fp, r1
    edac:	4b58      	ldr	r3, [pc, #352]	; (ef10 <__ieee754_pow+0x538>)
    edae:	4630      	mov	r0, r6
    edb0:	4639      	mov	r1, r7
    edb2:	f000 fd3b 	bl	f82c <__aeabi_dsub>
    edb6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    edba:	f000 fd37 	bl	f82c <__aeabi_dsub>
    edbe:	4602      	mov	r2, r0
    edc0:	460b      	mov	r3, r1
    edc2:	4640      	mov	r0, r8
    edc4:	4649      	mov	r1, r9
    edc6:	f000 fd31 	bl	f82c <__aeabi_dsub>
    edca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    edce:	f000 fee1 	bl	fb94 <__aeabi_dmul>
    edd2:	4632      	mov	r2, r6
    edd4:	4680      	mov	r8, r0
    edd6:	4689      	mov	r9, r1
    edd8:	463b      	mov	r3, r7
    edda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    edde:	f000 fed9 	bl	fb94 <__aeabi_dmul>
    ede2:	4602      	mov	r2, r0
    ede4:	460b      	mov	r3, r1
    ede6:	4640      	mov	r0, r8
    ede8:	4649      	mov	r1, r9
    edea:	f000 fd21 	bl	f830 <__adddf3>
    edee:	4680      	mov	r8, r0
    edf0:	4689      	mov	r9, r1
    edf2:	4602      	mov	r2, r0
    edf4:	460b      	mov	r3, r1
    edf6:	4650      	mov	r0, sl
    edf8:	4659      	mov	r1, fp
    edfa:	e9cd ab04 	strd	sl, fp, [sp, #16]
    edfe:	f000 fd17 	bl	f830 <__adddf3>
    ee02:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    ee06:	a338      	add	r3, pc, #224	; (adr r3, eee8 <__ieee754_pow+0x510>)
    ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee0c:	4650      	mov	r0, sl
    ee0e:	460f      	mov	r7, r1
    ee10:	f000 fec0 	bl	fb94 <__aeabi_dmul>
    ee14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ee18:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ee1c:	4639      	mov	r1, r7
    ee1e:	4650      	mov	r0, sl
    ee20:	f000 fd04 	bl	f82c <__aeabi_dsub>
    ee24:	4602      	mov	r2, r0
    ee26:	460b      	mov	r3, r1
    ee28:	4640      	mov	r0, r8
    ee2a:	4649      	mov	r1, r9
    ee2c:	f000 fcfe 	bl	f82c <__aeabi_dsub>
    ee30:	a32f      	add	r3, pc, #188	; (adr r3, eef0 <__ieee754_pow+0x518>)
    ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee36:	f000 fead 	bl	fb94 <__aeabi_dmul>
    ee3a:	a32f      	add	r3, pc, #188	; (adr r3, eef8 <__ieee754_pow+0x520>)
    ee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee40:	4680      	mov	r8, r0
    ee42:	4689      	mov	r9, r1
    ee44:	4650      	mov	r0, sl
    ee46:	4639      	mov	r1, r7
    ee48:	f000 fea4 	bl	fb94 <__aeabi_dmul>
    ee4c:	4602      	mov	r2, r0
    ee4e:	460b      	mov	r3, r1
    ee50:	4640      	mov	r0, r8
    ee52:	4649      	mov	r1, r9
    ee54:	f000 fcec 	bl	f830 <__adddf3>
    ee58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ee5c:	f000 fce8 	bl	f830 <__adddf3>
    ee60:	4680      	mov	r8, r0
    ee62:	980d      	ldr	r0, [sp, #52]	; 0x34
    ee64:	4689      	mov	r9, r1
    ee66:	f000 fe2f 	bl	fac8 <__aeabi_i2d>
    ee6a:	4642      	mov	r2, r8
    ee6c:	4606      	mov	r6, r0
    ee6e:	460f      	mov	r7, r1
    ee70:	464b      	mov	r3, r9
    ee72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ee76:	f000 fcdb 	bl	f830 <__adddf3>
    ee7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ee7e:	f000 fcd7 	bl	f830 <__adddf3>
    ee82:	4632      	mov	r2, r6
    ee84:	463b      	mov	r3, r7
    ee86:	f000 fcd3 	bl	f830 <__adddf3>
    ee8a:	4632      	mov	r2, r6
    ee8c:	463b      	mov	r3, r7
    ee8e:	4650      	mov	r0, sl
    ee90:	468b      	mov	fp, r1
    ee92:	f000 fccb 	bl	f82c <__aeabi_dsub>
    ee96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ee9a:	f000 fcc7 	bl	f82c <__aeabi_dsub>
    ee9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    eea2:	f000 fcc3 	bl	f82c <__aeabi_dsub>
    eea6:	4602      	mov	r2, r0
    eea8:	460b      	mov	r3, r1
    eeaa:	4640      	mov	r0, r8
    eeac:	4649      	mov	r1, r9
    eeae:	f000 fcbd 	bl	f82c <__aeabi_dsub>
    eeb2:	4680      	mov	r8, r0
    eeb4:	e02e      	b.n	ef14 <__ieee754_pow+0x53c>
    eeb6:	bf00      	nop
    eeb8:	4a454eef 	.word	0x4a454eef
    eebc:	3fca7e28 	.word	0x3fca7e28
    eec0:	93c9db65 	.word	0x93c9db65
    eec4:	3fcd864a 	.word	0x3fcd864a
    eec8:	a91d4101 	.word	0xa91d4101
    eecc:	3fd17460 	.word	0x3fd17460
    eed0:	518f264d 	.word	0x518f264d
    eed4:	3fd55555 	.word	0x3fd55555
    eed8:	db6fabff 	.word	0xdb6fabff
    eedc:	3fdb6db6 	.word	0x3fdb6db6
    eee0:	33333303 	.word	0x33333303
    eee4:	3fe33333 	.word	0x3fe33333
    eee8:	e0000000 	.word	0xe0000000
    eeec:	3feec709 	.word	0x3feec709
    eef0:	dc3a03fd 	.word	0xdc3a03fd
    eef4:	3feec709 	.word	0x3feec709
    eef8:	145b01f5 	.word	0x145b01f5
    eefc:	be3e2fe0 	.word	0xbe3e2fe0
    ef00:	43400000 	.word	0x43400000
    ef04:	0003988e 	.word	0x0003988e
    ef08:	000bb679 	.word	0x000bb679
    ef0c:	3ff00000 	.word	0x3ff00000
    ef10:	40080000 	.word	0x40080000
    ef14:	4689      	mov	r9, r1
    ef16:	3c01      	subs	r4, #1
    ef18:	ea54 0305 	orrs.w	r3, r4, r5
    ef1c:	e9dd 0100 	ldrd	r0, r1, [sp]
    ef20:	bf14      	ite	ne
    ef22:	4cd9      	ldrne	r4, [pc, #868]	; (f288 <__ieee754_pow+0x8b0>)
    ef24:	4cd9      	ldreq	r4, [pc, #868]	; (f28c <__ieee754_pow+0x8b4>)
    ef26:	2300      	movs	r3, #0
    ef28:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ef2c:	4603      	mov	r3, r0
    ef2e:	460c      	mov	r4, r1
    ef30:	e9cd 3402 	strd	r3, r4, [sp, #8]
    ef34:	2300      	movs	r3, #0
    ef36:	9302      	str	r3, [sp, #8]
    ef38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    ef3c:	4622      	mov	r2, r4
    ef3e:	462b      	mov	r3, r5
    ef40:	f000 fc74 	bl	f82c <__aeabi_dsub>
    ef44:	4652      	mov	r2, sl
    ef46:	465b      	mov	r3, fp
    ef48:	f000 fe24 	bl	fb94 <__aeabi_dmul>
    ef4c:	e9dd 2300 	ldrd	r2, r3, [sp]
    ef50:	4606      	mov	r6, r0
    ef52:	460f      	mov	r7, r1
    ef54:	4640      	mov	r0, r8
    ef56:	4649      	mov	r1, r9
    ef58:	f000 fe1c 	bl	fb94 <__aeabi_dmul>
    ef5c:	4602      	mov	r2, r0
    ef5e:	460b      	mov	r3, r1
    ef60:	4630      	mov	r0, r6
    ef62:	4639      	mov	r1, r7
    ef64:	f000 fc64 	bl	f830 <__adddf3>
    ef68:	4622      	mov	r2, r4
    ef6a:	4680      	mov	r8, r0
    ef6c:	4689      	mov	r9, r1
    ef6e:	462b      	mov	r3, r5
    ef70:	4650      	mov	r0, sl
    ef72:	4659      	mov	r1, fp
    ef74:	e9cd 8900 	strd	r8, r9, [sp]
    ef78:	f000 fe0c 	bl	fb94 <__aeabi_dmul>
    ef7c:	460b      	mov	r3, r1
    ef7e:	4602      	mov	r2, r0
    ef80:	4606      	mov	r6, r0
    ef82:	460f      	mov	r7, r1
    ef84:	4640      	mov	r0, r8
    ef86:	4649      	mov	r1, r9
    ef88:	f000 fc52 	bl	f830 <__adddf3>
    ef8c:	4bc0      	ldr	r3, [pc, #768]	; (f290 <__ieee754_pow+0x8b8>)
    ef8e:	4299      	cmp	r1, r3
    ef90:	4604      	mov	r4, r0
    ef92:	460d      	mov	r5, r1
    ef94:	468a      	mov	sl, r1
    ef96:	f340 8116 	ble.w	f1c6 <__ieee754_pow+0x7ee>
    ef9a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    ef9e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    efa2:	4303      	orrs	r3, r0
    efa4:	f040 81ea 	bne.w	f37c <__ieee754_pow+0x9a4>
    efa8:	a3a3      	add	r3, pc, #652	; (adr r3, f238 <__ieee754_pow+0x860>)
    efaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    efae:	e9dd 0100 	ldrd	r0, r1, [sp]
    efb2:	f000 fc3d 	bl	f830 <__adddf3>
    efb6:	4632      	mov	r2, r6
    efb8:	4680      	mov	r8, r0
    efba:	4689      	mov	r9, r1
    efbc:	463b      	mov	r3, r7
    efbe:	4620      	mov	r0, r4
    efc0:	4629      	mov	r1, r5
    efc2:	f000 fc33 	bl	f82c <__aeabi_dsub>
    efc6:	4602      	mov	r2, r0
    efc8:	460b      	mov	r3, r1
    efca:	4640      	mov	r0, r8
    efcc:	4649      	mov	r1, r9
    efce:	f001 f871 	bl	100b4 <__aeabi_dcmpgt>
    efd2:	2800      	cmp	r0, #0
    efd4:	f040 81d2 	bne.w	f37c <__ieee754_pow+0x9a4>
    efd8:	46a8      	mov	r8, r5
    efda:	ea4f 5328 	mov.w	r3, r8, asr #20
    efde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    efe2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    efe6:	fa42 f303 	asr.w	r3, r2, r3
    efea:	4453      	add	r3, sl
    efec:	f3c3 520a 	ubfx	r2, r3, #20, #11
    eff0:	4da8      	ldr	r5, [pc, #672]	; (f294 <__ieee754_pow+0x8bc>)
    eff2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    eff6:	4115      	asrs	r5, r2
    eff8:	f3c3 0413 	ubfx	r4, r3, #0, #20
    effc:	ea23 0105 	bic.w	r1, r3, r5
    f000:	2000      	movs	r0, #0
    f002:	f1c2 0b14 	rsb	fp, r2, #20
    f006:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    f00a:	f1ba 0f00 	cmp.w	sl, #0
    f00e:	4602      	mov	r2, r0
    f010:	460b      	mov	r3, r1
    f012:	fa44 fb0b 	asr.w	fp, r4, fp
    f016:	4630      	mov	r0, r6
    f018:	4639      	mov	r1, r7
    f01a:	bfb8      	it	lt
    f01c:	f1cb 0b00 	rsblt	fp, fp, #0
    f020:	f000 fc04 	bl	f82c <__aeabi_dsub>
    f024:	4602      	mov	r2, r0
    f026:	460b      	mov	r3, r1
    f028:	4606      	mov	r6, r0
    f02a:	460f      	mov	r7, r1
    f02c:	e9dd 0100 	ldrd	r0, r1, [sp]
    f030:	f000 fbfe 	bl	f830 <__adddf3>
    f034:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    f038:	460d      	mov	r5, r1
    f03a:	2400      	movs	r4, #0
    f03c:	a380      	add	r3, pc, #512	; (adr r3, f240 <__ieee754_pow+0x868>)
    f03e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f042:	4620      	mov	r0, r4
    f044:	4629      	mov	r1, r5
    f046:	f000 fda5 	bl	fb94 <__aeabi_dmul>
    f04a:	4632      	mov	r2, r6
    f04c:	4680      	mov	r8, r0
    f04e:	4689      	mov	r9, r1
    f050:	463b      	mov	r3, r7
    f052:	4620      	mov	r0, r4
    f054:	4629      	mov	r1, r5
    f056:	f000 fbe9 	bl	f82c <__aeabi_dsub>
    f05a:	4602      	mov	r2, r0
    f05c:	460b      	mov	r3, r1
    f05e:	e9dd 0100 	ldrd	r0, r1, [sp]
    f062:	f000 fbe3 	bl	f82c <__aeabi_dsub>
    f066:	a378      	add	r3, pc, #480	; (adr r3, f248 <__ieee754_pow+0x870>)
    f068:	e9d3 2300 	ldrd	r2, r3, [r3]
    f06c:	f000 fd92 	bl	fb94 <__aeabi_dmul>
    f070:	a377      	add	r3, pc, #476	; (adr r3, f250 <__ieee754_pow+0x878>)
    f072:	e9d3 2300 	ldrd	r2, r3, [r3]
    f076:	4606      	mov	r6, r0
    f078:	460f      	mov	r7, r1
    f07a:	4620      	mov	r0, r4
    f07c:	4629      	mov	r1, r5
    f07e:	f000 fd89 	bl	fb94 <__aeabi_dmul>
    f082:	4602      	mov	r2, r0
    f084:	460b      	mov	r3, r1
    f086:	4630      	mov	r0, r6
    f088:	4639      	mov	r1, r7
    f08a:	f000 fbd1 	bl	f830 <__adddf3>
    f08e:	4606      	mov	r6, r0
    f090:	460f      	mov	r7, r1
    f092:	4602      	mov	r2, r0
    f094:	460b      	mov	r3, r1
    f096:	4640      	mov	r0, r8
    f098:	4649      	mov	r1, r9
    f09a:	f000 fbc9 	bl	f830 <__adddf3>
    f09e:	4642      	mov	r2, r8
    f0a0:	464b      	mov	r3, r9
    f0a2:	4604      	mov	r4, r0
    f0a4:	460d      	mov	r5, r1
    f0a6:	f000 fbc1 	bl	f82c <__aeabi_dsub>
    f0aa:	4602      	mov	r2, r0
    f0ac:	460b      	mov	r3, r1
    f0ae:	4630      	mov	r0, r6
    f0b0:	4639      	mov	r1, r7
    f0b2:	f000 fbbb 	bl	f82c <__aeabi_dsub>
    f0b6:	4622      	mov	r2, r4
    f0b8:	4680      	mov	r8, r0
    f0ba:	4689      	mov	r9, r1
    f0bc:	462b      	mov	r3, r5
    f0be:	4620      	mov	r0, r4
    f0c0:	4629      	mov	r1, r5
    f0c2:	f000 fd67 	bl	fb94 <__aeabi_dmul>
    f0c6:	a364      	add	r3, pc, #400	; (adr r3, f258 <__ieee754_pow+0x880>)
    f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0cc:	4606      	mov	r6, r0
    f0ce:	460f      	mov	r7, r1
    f0d0:	f000 fd60 	bl	fb94 <__aeabi_dmul>
    f0d4:	a362      	add	r3, pc, #392	; (adr r3, f260 <__ieee754_pow+0x888>)
    f0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0da:	f000 fba7 	bl	f82c <__aeabi_dsub>
    f0de:	4632      	mov	r2, r6
    f0e0:	463b      	mov	r3, r7
    f0e2:	f000 fd57 	bl	fb94 <__aeabi_dmul>
    f0e6:	a360      	add	r3, pc, #384	; (adr r3, f268 <__ieee754_pow+0x890>)
    f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0ec:	f000 fba0 	bl	f830 <__adddf3>
    f0f0:	4632      	mov	r2, r6
    f0f2:	463b      	mov	r3, r7
    f0f4:	f000 fd4e 	bl	fb94 <__aeabi_dmul>
    f0f8:	a35d      	add	r3, pc, #372	; (adr r3, f270 <__ieee754_pow+0x898>)
    f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0fe:	f000 fb95 	bl	f82c <__aeabi_dsub>
    f102:	4632      	mov	r2, r6
    f104:	463b      	mov	r3, r7
    f106:	f000 fd45 	bl	fb94 <__aeabi_dmul>
    f10a:	a35b      	add	r3, pc, #364	; (adr r3, f278 <__ieee754_pow+0x8a0>)
    f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f110:	f000 fb8e 	bl	f830 <__adddf3>
    f114:	4632      	mov	r2, r6
    f116:	463b      	mov	r3, r7
    f118:	f000 fd3c 	bl	fb94 <__aeabi_dmul>
    f11c:	4602      	mov	r2, r0
    f11e:	460b      	mov	r3, r1
    f120:	4620      	mov	r0, r4
    f122:	4629      	mov	r1, r5
    f124:	f000 fb82 	bl	f82c <__aeabi_dsub>
    f128:	4606      	mov	r6, r0
    f12a:	460f      	mov	r7, r1
    f12c:	4602      	mov	r2, r0
    f12e:	460b      	mov	r3, r1
    f130:	4620      	mov	r0, r4
    f132:	4629      	mov	r1, r5
    f134:	f000 fd2e 	bl	fb94 <__aeabi_dmul>
    f138:	2200      	movs	r2, #0
    f13a:	e9cd 0100 	strd	r0, r1, [sp]
    f13e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f142:	4630      	mov	r0, r6
    f144:	4639      	mov	r1, r7
    f146:	f000 fb71 	bl	f82c <__aeabi_dsub>
    f14a:	4602      	mov	r2, r0
    f14c:	460b      	mov	r3, r1
    f14e:	e9dd 0100 	ldrd	r0, r1, [sp]
    f152:	f000 fe49 	bl	fde8 <__aeabi_ddiv>
    f156:	4642      	mov	r2, r8
    f158:	4606      	mov	r6, r0
    f15a:	460f      	mov	r7, r1
    f15c:	464b      	mov	r3, r9
    f15e:	4620      	mov	r0, r4
    f160:	4629      	mov	r1, r5
    f162:	f000 fd17 	bl	fb94 <__aeabi_dmul>
    f166:	4642      	mov	r2, r8
    f168:	464b      	mov	r3, r9
    f16a:	f000 fb61 	bl	f830 <__adddf3>
    f16e:	4602      	mov	r2, r0
    f170:	460b      	mov	r3, r1
    f172:	4630      	mov	r0, r6
    f174:	4639      	mov	r1, r7
    f176:	f000 fb59 	bl	f82c <__aeabi_dsub>
    f17a:	4622      	mov	r2, r4
    f17c:	462b      	mov	r3, r5
    f17e:	f000 fb55 	bl	f82c <__aeabi_dsub>
    f182:	4602      	mov	r2, r0
    f184:	460b      	mov	r3, r1
    f186:	2000      	movs	r0, #0
    f188:	493f      	ldr	r1, [pc, #252]	; (f288 <__ieee754_pow+0x8b0>)
    f18a:	f000 fb4f 	bl	f82c <__aeabi_dsub>
    f18e:	448a      	add	sl, r1
    f190:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    f194:	f2c0 8133 	blt.w	f3fe <__ieee754_pow+0xa26>
    f198:	4651      	mov	r1, sl
    f19a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f19e:	f000 fcf9 	bl	fb94 <__aeabi_dmul>
    f1a2:	e45b      	b.n	ea5c <__ieee754_pow+0x84>
    f1a4:	4642      	mov	r2, r8
    f1a6:	4640      	mov	r0, r8
    f1a8:	464b      	mov	r3, r9
    f1aa:	4649      	mov	r1, r9
    f1ac:	f000 fcf2 	bl	fb94 <__aeabi_dmul>
    f1b0:	e454      	b.n	ea5c <__ieee754_pow+0x84>
    f1b2:	f1ba 0f00 	cmp.w	sl, #0
    f1b6:	f6bf ace0 	bge.w	eb7a <__ieee754_pow+0x1a2>
    f1ba:	e9dd 3400 	ldrd	r3, r4, [sp]
    f1be:	4618      	mov	r0, r3
    f1c0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    f1c4:	e44a      	b.n	ea5c <__ieee754_pow+0x84>
    f1c6:	4b34      	ldr	r3, [pc, #208]	; (f298 <__ieee754_pow+0x8c0>)
    f1c8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    f1cc:	4598      	cmp	r8, r3
    f1ce:	f340 80f2 	ble.w	f3b6 <__ieee754_pow+0x9de>
    f1d2:	4b32      	ldr	r3, [pc, #200]	; (f29c <__ieee754_pow+0x8c4>)
    f1d4:	440b      	add	r3, r1
    f1d6:	4303      	orrs	r3, r0
    f1d8:	d10c      	bne.n	f1f4 <__ieee754_pow+0x81c>
    f1da:	4632      	mov	r2, r6
    f1dc:	463b      	mov	r3, r7
    f1de:	f000 fb25 	bl	f82c <__aeabi_dsub>
    f1e2:	4602      	mov	r2, r0
    f1e4:	460b      	mov	r3, r1
    f1e6:	e9dd 0100 	ldrd	r0, r1, [sp]
    f1ea:	f000 ff4f 	bl	1008c <__aeabi_dcmple>
    f1ee:	2800      	cmp	r0, #0
    f1f0:	f43f aef3 	beq.w	efda <__ieee754_pow+0x602>
    f1f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f1f8:	a321      	add	r3, pc, #132	; (adr r3, f280 <__ieee754_pow+0x8a8>)
    f1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    f1fe:	f000 fcc9 	bl	fb94 <__aeabi_dmul>
    f202:	a31f      	add	r3, pc, #124	; (adr r3, f280 <__ieee754_pow+0x8a8>)
    f204:	e9d3 2300 	ldrd	r2, r3, [r3]
    f208:	f000 fcc4 	bl	fb94 <__aeabi_dmul>
    f20c:	e426      	b.n	ea5c <__ieee754_pow+0x84>
    f20e:	4602      	mov	r2, r0
    f210:	460b      	mov	r3, r1
    f212:	2000      	movs	r0, #0
    f214:	491c      	ldr	r1, [pc, #112]	; (f288 <__ieee754_pow+0x8b0>)
    f216:	f000 fde7 	bl	fde8 <__aeabi_ddiv>
    f21a:	e43c      	b.n	ea96 <__ieee754_pow+0xbe>
    f21c:	2200      	movs	r2, #0
    f21e:	2300      	movs	r3, #0
    f220:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f224:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    f228:	4b17      	ldr	r3, [pc, #92]	; (f288 <__ieee754_pow+0x8b0>)
    f22a:	2200      	movs	r2, #0
    f22c:	2700      	movs	r7, #0
    f22e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f232:	e4e6      	b.n	ec02 <__ieee754_pow+0x22a>
    f234:	f3af 8000 	nop.w
    f238:	652b82fe 	.word	0x652b82fe
    f23c:	3c971547 	.word	0x3c971547
    f240:	00000000 	.word	0x00000000
    f244:	3fe62e43 	.word	0x3fe62e43
    f248:	fefa39ef 	.word	0xfefa39ef
    f24c:	3fe62e42 	.word	0x3fe62e42
    f250:	0ca86c39 	.word	0x0ca86c39
    f254:	be205c61 	.word	0xbe205c61
    f258:	72bea4d0 	.word	0x72bea4d0
    f25c:	3e663769 	.word	0x3e663769
    f260:	c5d26bf1 	.word	0xc5d26bf1
    f264:	3ebbbd41 	.word	0x3ebbbd41
    f268:	af25de2c 	.word	0xaf25de2c
    f26c:	3f11566a 	.word	0x3f11566a
    f270:	16bebd93 	.word	0x16bebd93
    f274:	3f66c16c 	.word	0x3f66c16c
    f278:	5555553e 	.word	0x5555553e
    f27c:	3fc55555 	.word	0x3fc55555
    f280:	c2f8f359 	.word	0xc2f8f359
    f284:	01a56e1f 	.word	0x01a56e1f
    f288:	3ff00000 	.word	0x3ff00000
    f28c:	bff00000 	.word	0xbff00000
    f290:	408fffff 	.word	0x408fffff
    f294:	000fffff 	.word	0x000fffff
    f298:	4090cbff 	.word	0x4090cbff
    f29c:	3f6f3400 	.word	0x3f6f3400
    f2a0:	4b6b      	ldr	r3, [pc, #428]	; (f450 <__ieee754_pow+0xa78>)
    f2a2:	429e      	cmp	r6, r3
    f2a4:	f77f ac66 	ble.w	eb74 <__ieee754_pow+0x19c>
    f2a8:	4b6a      	ldr	r3, [pc, #424]	; (f454 <__ieee754_pow+0xa7c>)
    f2aa:	429e      	cmp	r6, r3
    f2ac:	f73f ac13 	bgt.w	ead6 <__ieee754_pow+0xfe>
    f2b0:	2200      	movs	r2, #0
    f2b2:	4b68      	ldr	r3, [pc, #416]	; (f454 <__ieee754_pow+0xa7c>)
    f2b4:	f000 faba 	bl	f82c <__aeabi_dsub>
    f2b8:	a357      	add	r3, pc, #348	; (adr r3, f418 <__ieee754_pow+0xa40>)
    f2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    f2be:	4606      	mov	r6, r0
    f2c0:	460f      	mov	r7, r1
    f2c2:	f000 fc67 	bl	fb94 <__aeabi_dmul>
    f2c6:	a356      	add	r3, pc, #344	; (adr r3, f420 <__ieee754_pow+0xa48>)
    f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f2cc:	4680      	mov	r8, r0
    f2ce:	4689      	mov	r9, r1
    f2d0:	4630      	mov	r0, r6
    f2d2:	4639      	mov	r1, r7
    f2d4:	f000 fc5e 	bl	fb94 <__aeabi_dmul>
    f2d8:	2200      	movs	r2, #0
    f2da:	4682      	mov	sl, r0
    f2dc:	468b      	mov	fp, r1
    f2de:	4b5e      	ldr	r3, [pc, #376]	; (f458 <__ieee754_pow+0xa80>)
    f2e0:	4630      	mov	r0, r6
    f2e2:	4639      	mov	r1, r7
    f2e4:	f000 fc56 	bl	fb94 <__aeabi_dmul>
    f2e8:	4602      	mov	r2, r0
    f2ea:	460b      	mov	r3, r1
    f2ec:	a14e      	add	r1, pc, #312	; (adr r1, f428 <__ieee754_pow+0xa50>)
    f2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
    f2f2:	f000 fa9b 	bl	f82c <__aeabi_dsub>
    f2f6:	4632      	mov	r2, r6
    f2f8:	463b      	mov	r3, r7
    f2fa:	f000 fc4b 	bl	fb94 <__aeabi_dmul>
    f2fe:	4602      	mov	r2, r0
    f300:	460b      	mov	r3, r1
    f302:	2000      	movs	r0, #0
    f304:	4955      	ldr	r1, [pc, #340]	; (f45c <__ieee754_pow+0xa84>)
    f306:	f000 fa91 	bl	f82c <__aeabi_dsub>
    f30a:	4632      	mov	r2, r6
    f30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    f310:	463b      	mov	r3, r7
    f312:	4630      	mov	r0, r6
    f314:	4639      	mov	r1, r7
    f316:	f000 fc3d 	bl	fb94 <__aeabi_dmul>
    f31a:	4602      	mov	r2, r0
    f31c:	460b      	mov	r3, r1
    f31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f322:	f000 fc37 	bl	fb94 <__aeabi_dmul>
    f326:	a342      	add	r3, pc, #264	; (adr r3, f430 <__ieee754_pow+0xa58>)
    f328:	e9d3 2300 	ldrd	r2, r3, [r3]
    f32c:	f000 fc32 	bl	fb94 <__aeabi_dmul>
    f330:	4602      	mov	r2, r0
    f332:	460b      	mov	r3, r1
    f334:	4650      	mov	r0, sl
    f336:	4659      	mov	r1, fp
    f338:	f000 fa78 	bl	f82c <__aeabi_dsub>
    f33c:	4602      	mov	r2, r0
    f33e:	460b      	mov	r3, r1
    f340:	4606      	mov	r6, r0
    f342:	460f      	mov	r7, r1
    f344:	4640      	mov	r0, r8
    f346:	4649      	mov	r1, r9
    f348:	f000 fa72 	bl	f830 <__adddf3>
    f34c:	4642      	mov	r2, r8
    f34e:	464b      	mov	r3, r9
    f350:	2000      	movs	r0, #0
    f352:	4682      	mov	sl, r0
    f354:	468b      	mov	fp, r1
    f356:	f000 fa69 	bl	f82c <__aeabi_dsub>
    f35a:	4602      	mov	r2, r0
    f35c:	460b      	mov	r3, r1
    f35e:	4630      	mov	r0, r6
    f360:	4639      	mov	r1, r7
    f362:	f000 fa63 	bl	f82c <__aeabi_dsub>
    f366:	4680      	mov	r8, r0
    f368:	4689      	mov	r9, r1
    f36a:	e5d4      	b.n	ef16 <__ieee754_pow+0x53e>
    f36c:	4642      	mov	r2, r8
    f36e:	464b      	mov	r3, r9
    f370:	2000      	movs	r0, #0
    f372:	4938      	ldr	r1, [pc, #224]	; (f454 <__ieee754_pow+0xa7c>)
    f374:	f000 fd38 	bl	fde8 <__aeabi_ddiv>
    f378:	f7ff bb70 	b.w	ea5c <__ieee754_pow+0x84>
    f37c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f380:	a32d      	add	r3, pc, #180	; (adr r3, f438 <__ieee754_pow+0xa60>)
    f382:	e9d3 2300 	ldrd	r2, r3, [r3]
    f386:	f000 fc05 	bl	fb94 <__aeabi_dmul>
    f38a:	a32b      	add	r3, pc, #172	; (adr r3, f438 <__ieee754_pow+0xa60>)
    f38c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f390:	f000 fc00 	bl	fb94 <__aeabi_dmul>
    f394:	f7ff bb62 	b.w	ea5c <__ieee754_pow+0x84>
    f398:	f1be 0f00 	cmp.w	lr, #0
    f39c:	f47f ab69 	bne.w	ea72 <__ieee754_pow+0x9a>
    f3a0:	f1c3 0314 	rsb	r3, r3, #20
    f3a4:	fa47 f203 	asr.w	r2, r7, r3
    f3a8:	fa02 f303 	lsl.w	r3, r2, r3
    f3ac:	429f      	cmp	r7, r3
    f3ae:	d02a      	beq.n	f406 <__ieee754_pow+0xa2e>
    f3b0:	4674      	mov	r4, lr
    f3b2:	f7ff bb36 	b.w	ea22 <__ieee754_pow+0x4a>
    f3b6:	4b29      	ldr	r3, [pc, #164]	; (f45c <__ieee754_pow+0xa84>)
    f3b8:	4598      	cmp	r8, r3
    f3ba:	f73f ae0e 	bgt.w	efda <__ieee754_pow+0x602>
    f3be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f3c2:	4692      	mov	sl, r2
    f3c4:	4693      	mov	fp, r2
    f3c6:	e638      	b.n	f03a <__ieee754_pow+0x662>
    f3c8:	4602      	mov	r2, r0
    f3ca:	460b      	mov	r3, r1
    f3cc:	f000 fa2e 	bl	f82c <__aeabi_dsub>
    f3d0:	4602      	mov	r2, r0
    f3d2:	460b      	mov	r3, r1
    f3d4:	f000 fd08 	bl	fde8 <__aeabi_ddiv>
    f3d8:	f7ff bb40 	b.w	ea5c <__ieee754_pow+0x84>
    f3dc:	a318      	add	r3, pc, #96	; (adr r3, f440 <__ieee754_pow+0xa68>)
    f3de:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f3e6:	a318      	add	r3, pc, #96	; (adr r3, f448 <__ieee754_pow+0xa70>)
    f3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    f3f0:	4b1b      	ldr	r3, [pc, #108]	; (f460 <__ieee754_pow+0xa88>)
    f3f2:	2200      	movs	r2, #0
    f3f4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    f3f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f3fc:	e401      	b.n	ec02 <__ieee754_pow+0x22a>
    f3fe:	465a      	mov	r2, fp
    f400:	f000 f98a 	bl	f718 <scalbn>
    f404:	e6c9      	b.n	f19a <__ieee754_pow+0x7c2>
    f406:	f002 0201 	and.w	r2, r2, #1
    f40a:	f1c2 0402 	rsb	r4, r2, #2
    f40e:	f7ff bb08 	b.w	ea22 <__ieee754_pow+0x4a>
    f412:	bf00      	nop
    f414:	f3af 8000 	nop.w
    f418:	60000000 	.word	0x60000000
    f41c:	3ff71547 	.word	0x3ff71547
    f420:	f85ddf44 	.word	0xf85ddf44
    f424:	3e54ae0b 	.word	0x3e54ae0b
    f428:	55555555 	.word	0x55555555
    f42c:	3fd55555 	.word	0x3fd55555
    f430:	652b82fe 	.word	0x652b82fe
    f434:	3ff71547 	.word	0x3ff71547
    f438:	8800759c 	.word	0x8800759c
    f43c:	7e37e43c 	.word	0x7e37e43c
    f440:	40000000 	.word	0x40000000
    f444:	3fe2b803 	.word	0x3fe2b803
    f448:	43cfd006 	.word	0x43cfd006
    f44c:	3e4cfdeb 	.word	0x3e4cfdeb
    f450:	3feffffe 	.word	0x3feffffe
    f454:	3ff00000 	.word	0x3ff00000
    f458:	3fd00000 	.word	0x3fd00000
    f45c:	3fe00000 	.word	0x3fe00000
    f460:	3ff80000 	.word	0x3ff80000

0000f464 <__ieee754_sqrt>:
    f464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f468:	4f5b      	ldr	r7, [pc, #364]	; (f5d8 <__ieee754_sqrt+0x174>)
    f46a:	438f      	bics	r7, r1
    f46c:	4605      	mov	r5, r0
    f46e:	460c      	mov	r4, r1
    f470:	f000 8092 	beq.w	f598 <__ieee754_sqrt+0x134>
    f474:	2900      	cmp	r1, #0
    f476:	460b      	mov	r3, r1
    f478:	4602      	mov	r2, r0
    f47a:	dd6f      	ble.n	f55c <__ieee754_sqrt+0xf8>
    f47c:	150f      	asrs	r7, r1, #20
    f47e:	d07b      	beq.n	f578 <__ieee754_sqrt+0x114>
    f480:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    f484:	f3c3 0313 	ubfx	r3, r3, #0, #20
    f488:	07f8      	lsls	r0, r7, #31
    f48a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f48e:	d45c      	bmi.n	f54a <__ieee754_sqrt+0xe6>
    f490:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    f494:	2600      	movs	r6, #0
    f496:	440b      	add	r3, r1
    f498:	107f      	asrs	r7, r7, #1
    f49a:	0052      	lsls	r2, r2, #1
    f49c:	46b6      	mov	lr, r6
    f49e:	2016      	movs	r0, #22
    f4a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    f4a4:	eb0e 0401 	add.w	r4, lr, r1
    f4a8:	429c      	cmp	r4, r3
    f4aa:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    f4ae:	ea4f 0242 	mov.w	r2, r2, lsl #1
    f4b2:	dc03      	bgt.n	f4bc <__ieee754_sqrt+0x58>
    f4b4:	1b1b      	subs	r3, r3, r4
    f4b6:	eb04 0e01 	add.w	lr, r4, r1
    f4ba:	440e      	add	r6, r1
    f4bc:	3801      	subs	r0, #1
    f4be:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    f4c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
    f4c6:	d1ed      	bne.n	f4a4 <__ieee754_sqrt+0x40>
    f4c8:	4684      	mov	ip, r0
    f4ca:	2420      	movs	r4, #32
    f4cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    f4d0:	e009      	b.n	f4e6 <__ieee754_sqrt+0x82>
    f4d2:	d020      	beq.n	f516 <__ieee754_sqrt+0xb2>
    f4d4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    f4d8:	3c01      	subs	r4, #1
    f4da:	ea4f 0151 	mov.w	r1, r1, lsr #1
    f4de:	442b      	add	r3, r5
    f4e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    f4e4:	d020      	beq.n	f528 <__ieee754_sqrt+0xc4>
    f4e6:	4573      	cmp	r3, lr
    f4e8:	eb01 050c 	add.w	r5, r1, ip
    f4ec:	ddf1      	ble.n	f4d2 <__ieee754_sqrt+0x6e>
    f4ee:	2d00      	cmp	r5, #0
    f4f0:	eb05 0c01 	add.w	ip, r5, r1
    f4f4:	db09      	blt.n	f50a <__ieee754_sqrt+0xa6>
    f4f6:	46f0      	mov	r8, lr
    f4f8:	4295      	cmp	r5, r2
    f4fa:	eba3 030e 	sub.w	r3, r3, lr
    f4fe:	d900      	bls.n	f502 <__ieee754_sqrt+0x9e>
    f500:	3b01      	subs	r3, #1
    f502:	1b52      	subs	r2, r2, r5
    f504:	4408      	add	r0, r1
    f506:	46c6      	mov	lr, r8
    f508:	e7e4      	b.n	f4d4 <__ieee754_sqrt+0x70>
    f50a:	f1bc 0f00 	cmp.w	ip, #0
    f50e:	dbf2      	blt.n	f4f6 <__ieee754_sqrt+0x92>
    f510:	f10e 0801 	add.w	r8, lr, #1
    f514:	e7f0      	b.n	f4f8 <__ieee754_sqrt+0x94>
    f516:	4295      	cmp	r5, r2
    f518:	d8dc      	bhi.n	f4d4 <__ieee754_sqrt+0x70>
    f51a:	2d00      	cmp	r5, #0
    f51c:	eb05 0c01 	add.w	ip, r5, r1
    f520:	db44      	blt.n	f5ac <__ieee754_sqrt+0x148>
    f522:	4698      	mov	r8, r3
    f524:	2300      	movs	r3, #0
    f526:	e7ec      	b.n	f502 <__ieee754_sqrt+0x9e>
    f528:	4313      	orrs	r3, r2
    f52a:	d113      	bne.n	f554 <__ieee754_sqrt+0xf0>
    f52c:	0840      	lsrs	r0, r0, #1
    f52e:	1073      	asrs	r3, r6, #1
    f530:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    f534:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    f538:	07f2      	lsls	r2, r6, #31
    f53a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    f53e:	bf48      	it	mi
    f540:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    f544:	4649      	mov	r1, r9
    f546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f54a:	005b      	lsls	r3, r3, #1
    f54c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    f550:	0052      	lsls	r2, r2, #1
    f552:	e79d      	b.n	f490 <__ieee754_sqrt+0x2c>
    f554:	1c41      	adds	r1, r0, #1
    f556:	d02d      	beq.n	f5b4 <__ieee754_sqrt+0x150>
    f558:	3001      	adds	r0, #1
    f55a:	e7e7      	b.n	f52c <__ieee754_sqrt+0xc8>
    f55c:	4606      	mov	r6, r0
    f55e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    f562:	433e      	orrs	r6, r7
    f564:	d0ef      	beq.n	f546 <__ieee754_sqrt+0xe2>
    f566:	bb69      	cbnz	r1, f5c4 <__ieee754_sqrt+0x160>
    f568:	460f      	mov	r7, r1
    f56a:	0ad3      	lsrs	r3, r2, #11
    f56c:	3f15      	subs	r7, #21
    f56e:	0552      	lsls	r2, r2, #21
    f570:	2b00      	cmp	r3, #0
    f572:	d0fa      	beq.n	f56a <__ieee754_sqrt+0x106>
    f574:	02de      	lsls	r6, r3, #11
    f576:	d420      	bmi.n	f5ba <__ieee754_sqrt+0x156>
    f578:	2400      	movs	r4, #0
    f57a:	e000      	b.n	f57e <__ieee754_sqrt+0x11a>
    f57c:	4604      	mov	r4, r0
    f57e:	005b      	lsls	r3, r3, #1
    f580:	02dd      	lsls	r5, r3, #11
    f582:	f104 0001 	add.w	r0, r4, #1
    f586:	d5f9      	bpl.n	f57c <__ieee754_sqrt+0x118>
    f588:	f1c0 0120 	rsb	r1, r0, #32
    f58c:	fa22 f101 	lsr.w	r1, r2, r1
    f590:	430b      	orrs	r3, r1
    f592:	1b3f      	subs	r7, r7, r4
    f594:	4082      	lsls	r2, r0
    f596:	e773      	b.n	f480 <__ieee754_sqrt+0x1c>
    f598:	4602      	mov	r2, r0
    f59a:	460b      	mov	r3, r1
    f59c:	f000 fafa 	bl	fb94 <__aeabi_dmul>
    f5a0:	462a      	mov	r2, r5
    f5a2:	4623      	mov	r3, r4
    f5a4:	f000 f944 	bl	f830 <__adddf3>
    f5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f5ac:	f1bc 0f00 	cmp.w	ip, #0
    f5b0:	daae      	bge.n	f510 <__ieee754_sqrt+0xac>
    f5b2:	e7b6      	b.n	f522 <__ieee754_sqrt+0xbe>
    f5b4:	3601      	adds	r6, #1
    f5b6:	4620      	mov	r0, r4
    f5b8:	e7b9      	b.n	f52e <__ieee754_sqrt+0xca>
    f5ba:	2000      	movs	r0, #0
    f5bc:	2120      	movs	r1, #32
    f5be:	f04f 34ff 	mov.w	r4, #4294967295
    f5c2:	e7e3      	b.n	f58c <__ieee754_sqrt+0x128>
    f5c4:	4602      	mov	r2, r0
    f5c6:	460b      	mov	r3, r1
    f5c8:	f000 f930 	bl	f82c <__aeabi_dsub>
    f5cc:	4602      	mov	r2, r0
    f5ce:	460b      	mov	r3, r1
    f5d0:	f000 fc0a 	bl	fde8 <__aeabi_ddiv>
    f5d4:	e7b7      	b.n	f546 <__ieee754_sqrt+0xe2>
    f5d6:	bf00      	nop
    f5d8:	7ff00000 	.word	0x7ff00000

0000f5dc <fabs>:
    f5dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f5e0:	4770      	bx	lr
    f5e2:	bf00      	nop

0000f5e4 <finite>:
    f5e4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    f5e8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
    f5ec:	0fc0      	lsrs	r0, r0, #31
    f5ee:	4770      	bx	lr

0000f5f0 <matherr>:
    f5f0:	2000      	movs	r0, #0
    f5f2:	4770      	bx	lr

0000f5f4 <nan>:
    f5f4:	2000      	movs	r0, #0
    f5f6:	4901      	ldr	r1, [pc, #4]	; (f5fc <nan+0x8>)
    f5f8:	4770      	bx	lr
    f5fa:	bf00      	nop
    f5fc:	7ff80000 	.word	0x7ff80000

0000f600 <rint>:
    f600:	b5f0      	push	{r4, r5, r6, r7, lr}
    f602:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
    f606:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
    f60a:	2e13      	cmp	r6, #19
    f60c:	b083      	sub	sp, #12
    f60e:	4602      	mov	r2, r0
    f610:	460b      	mov	r3, r1
    f612:	460c      	mov	r4, r1
    f614:	ea4f 75d1 	mov.w	r5, r1, lsr #31
    f618:	4607      	mov	r7, r0
    f61a:	dc2e      	bgt.n	f67a <rint+0x7a>
    f61c:	2e00      	cmp	r6, #0
    f61e:	db49      	blt.n	f6b4 <rint+0xb4>
    f620:	493a      	ldr	r1, [pc, #232]	; (f70c <rint+0x10c>)
    f622:	4131      	asrs	r1, r6
    f624:	ea03 0001 	and.w	r0, r3, r1
    f628:	4310      	orrs	r0, r2
    f62a:	d02b      	beq.n	f684 <rint+0x84>
    f62c:	0849      	lsrs	r1, r1, #1
    f62e:	400b      	ands	r3, r1
    f630:	ea53 0702 	orrs.w	r7, r3, r2
    f634:	d00c      	beq.n	f650 <rint+0x50>
    f636:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    f63a:	2e13      	cmp	r6, #19
    f63c:	ea24 0101 	bic.w	r1, r4, r1
    f640:	fa43 f406 	asr.w	r4, r3, r6
    f644:	ea44 0401 	orr.w	r4, r4, r1
    f648:	bf0c      	ite	eq
    f64a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
    f64e:	2700      	movne	r7, #0
    f650:	4b2f      	ldr	r3, [pc, #188]	; (f710 <rint+0x110>)
    f652:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    f656:	4621      	mov	r1, r4
    f658:	e9d5 4500 	ldrd	r4, r5, [r5]
    f65c:	4638      	mov	r0, r7
    f65e:	4622      	mov	r2, r4
    f660:	462b      	mov	r3, r5
    f662:	f000 f8e5 	bl	f830 <__adddf3>
    f666:	e9cd 0100 	strd	r0, r1, [sp]
    f66a:	4622      	mov	r2, r4
    f66c:	462b      	mov	r3, r5
    f66e:	e9dd 0100 	ldrd	r0, r1, [sp]
    f672:	f000 f8db 	bl	f82c <__aeabi_dsub>
    f676:	b003      	add	sp, #12
    f678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f67a:	2e33      	cmp	r6, #51	; 0x33
    f67c:	dd06      	ble.n	f68c <rint+0x8c>
    f67e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    f682:	d040      	beq.n	f706 <rint+0x106>
    f684:	4610      	mov	r0, r2
    f686:	4619      	mov	r1, r3
    f688:	b003      	add	sp, #12
    f68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f68c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
    f690:	f04f 31ff 	mov.w	r1, #4294967295
    f694:	fa21 f10e 	lsr.w	r1, r1, lr
    f698:	4208      	tst	r0, r1
    f69a:	d0f3      	beq.n	f684 <rint+0x84>
    f69c:	0849      	lsrs	r1, r1, #1
    f69e:	4208      	tst	r0, r1
    f6a0:	d0d6      	beq.n	f650 <rint+0x50>
    f6a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f6a6:	ea20 0101 	bic.w	r1, r0, r1
    f6aa:	fa43 fe0e 	asr.w	lr, r3, lr
    f6ae:	ea4e 0701 	orr.w	r7, lr, r1
    f6b2:	e7cd      	b.n	f650 <rint+0x50>
    f6b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f6b8:	4301      	orrs	r1, r0
    f6ba:	d0e3      	beq.n	f684 <rint+0x84>
    f6bc:	f3c3 0113 	ubfx	r1, r3, #0, #20
    f6c0:	4e13      	ldr	r6, [pc, #76]	; (f710 <rint+0x110>)
    f6c2:	4301      	orrs	r1, r0
    f6c4:	f1c1 0c00 	rsb	ip, r1, #0
    f6c8:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    f6cc:	e9d6 6700 	ldrd	r6, r7, [r6]
    f6d0:	ea4c 0c01 	orr.w	ip, ip, r1
    f6d4:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
    f6d8:	0c5c      	lsrs	r4, r3, #17
    f6da:	0464      	lsls	r4, r4, #17
    f6dc:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
    f6e0:	ea43 0104 	orr.w	r1, r3, r4
    f6e4:	4632      	mov	r2, r6
    f6e6:	463b      	mov	r3, r7
    f6e8:	f000 f8a2 	bl	f830 <__adddf3>
    f6ec:	e9cd 0100 	strd	r0, r1, [sp]
    f6f0:	4632      	mov	r2, r6
    f6f2:	463b      	mov	r3, r7
    f6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
    f6f8:	f000 f898 	bl	f82c <__aeabi_dsub>
    f6fc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    f700:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
    f704:	e7c0      	b.n	f688 <rint+0x88>
    f706:	f000 f893 	bl	f830 <__adddf3>
    f70a:	e7bd      	b.n	f688 <rint+0x88>
    f70c:	000fffff 	.word	0x000fffff
    f710:	000116d8 	.word	0x000116d8
    f714:	00000000 	.word	0x00000000

0000f718 <scalbn>:
    f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f71a:	f3c1 560a 	ubfx	r6, r1, #20, #11
    f71e:	4604      	mov	r4, r0
    f720:	460d      	mov	r5, r1
    f722:	460b      	mov	r3, r1
    f724:	4617      	mov	r7, r2
    f726:	bb0e      	cbnz	r6, f76c <scalbn+0x54>
    f728:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    f72c:	4303      	orrs	r3, r0
    f72e:	4686      	mov	lr, r0
    f730:	d025      	beq.n	f77e <scalbn+0x66>
    f732:	2200      	movs	r2, #0
    f734:	4b34      	ldr	r3, [pc, #208]	; (f808 <scalbn+0xf0>)
    f736:	f000 fa2d 	bl	fb94 <__aeabi_dmul>
    f73a:	4a34      	ldr	r2, [pc, #208]	; (f80c <scalbn+0xf4>)
    f73c:	4297      	cmp	r7, r2
    f73e:	4604      	mov	r4, r0
    f740:	460d      	mov	r5, r1
    f742:	460b      	mov	r3, r1
    f744:	db2a      	blt.n	f79c <scalbn+0x84>
    f746:	f3c1 560a 	ubfx	r6, r1, #20, #11
    f74a:	3e36      	subs	r6, #54	; 0x36
    f74c:	443e      	add	r6, r7
    f74e:	f240 72fe 	movw	r2, #2046	; 0x7fe
    f752:	4296      	cmp	r6, r2
    f754:	dc28      	bgt.n	f7a8 <scalbn+0x90>
    f756:	2e00      	cmp	r6, #0
    f758:	dd12      	ble.n	f780 <scalbn+0x68>
    f75a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    f75e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    f762:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    f766:	4620      	mov	r0, r4
    f768:	4629      	mov	r1, r5
    f76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f76c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    f770:	4296      	cmp	r6, r2
    f772:	d1eb      	bne.n	f74c <scalbn+0x34>
    f774:	4602      	mov	r2, r0
    f776:	460b      	mov	r3, r1
    f778:	f000 f85a 	bl	f830 <__adddf3>
    f77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f780:	f116 0f35 	cmn.w	r6, #53	; 0x35
    f784:	da1d      	bge.n	f7c2 <scalbn+0xaa>
    f786:	f24c 3350 	movw	r3, #50000	; 0xc350
    f78a:	429f      	cmp	r7, r3
    f78c:	4622      	mov	r2, r4
    f78e:	462b      	mov	r3, r5
    f790:	dc25      	bgt.n	f7de <scalbn+0xc6>
    f792:	a119      	add	r1, pc, #100	; (adr r1, f7f8 <scalbn+0xe0>)
    f794:	e9d1 0100 	ldrd	r0, r1, [r1]
    f798:	f000 f83c 	bl	f814 <copysign>
    f79c:	a316      	add	r3, pc, #88	; (adr r3, f7f8 <scalbn+0xe0>)
    f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7a2:	f000 f9f7 	bl	fb94 <__aeabi_dmul>
    f7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7a8:	4622      	mov	r2, r4
    f7aa:	462b      	mov	r3, r5
    f7ac:	a114      	add	r1, pc, #80	; (adr r1, f800 <scalbn+0xe8>)
    f7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
    f7b2:	f000 f82f 	bl	f814 <copysign>
    f7b6:	a312      	add	r3, pc, #72	; (adr r3, f800 <scalbn+0xe8>)
    f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7bc:	f000 f9ea 	bl	fb94 <__aeabi_dmul>
    f7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    f7c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    f7ca:	3636      	adds	r6, #54	; 0x36
    f7cc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    f7d0:	4620      	mov	r0, r4
    f7d2:	4629      	mov	r1, r5
    f7d4:	2200      	movs	r2, #0
    f7d6:	4b0e      	ldr	r3, [pc, #56]	; (f810 <scalbn+0xf8>)
    f7d8:	f000 f9dc 	bl	fb94 <__aeabi_dmul>
    f7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7de:	a108      	add	r1, pc, #32	; (adr r1, f800 <scalbn+0xe8>)
    f7e0:	e9d1 0100 	ldrd	r0, r1, [r1]
    f7e4:	f000 f816 	bl	f814 <copysign>
    f7e8:	a305      	add	r3, pc, #20	; (adr r3, f800 <scalbn+0xe8>)
    f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7ee:	f000 f9d1 	bl	fb94 <__aeabi_dmul>
    f7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7f4:	f3af 8000 	nop.w
    f7f8:	c2f8f359 	.word	0xc2f8f359
    f7fc:	01a56e1f 	.word	0x01a56e1f
    f800:	8800759c 	.word	0x8800759c
    f804:	7e37e43c 	.word	0x7e37e43c
    f808:	43500000 	.word	0x43500000
    f80c:	ffff3cb0 	.word	0xffff3cb0
    f810:	3c900000 	.word	0x3c900000

0000f814 <copysign>:
    f814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    f818:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    f81c:	ea42 0103 	orr.w	r1, r2, r3
    f820:	4770      	bx	lr
    f822:	bf00      	nop

0000f824 <__aeabi_drsub>:
    f824:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    f828:	e002      	b.n	f830 <__adddf3>
    f82a:	bf00      	nop

0000f82c <__aeabi_dsub>:
    f82c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000f830 <__adddf3>:
    f830:	b530      	push	{r4, r5, lr}
    f832:	ea4f 0441 	mov.w	r4, r1, lsl #1
    f836:	ea4f 0543 	mov.w	r5, r3, lsl #1
    f83a:	ea94 0f05 	teq	r4, r5
    f83e:	bf08      	it	eq
    f840:	ea90 0f02 	teqeq	r0, r2
    f844:	bf1f      	itttt	ne
    f846:	ea54 0c00 	orrsne.w	ip, r4, r0
    f84a:	ea55 0c02 	orrsne.w	ip, r5, r2
    f84e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    f852:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    f856:	f000 80e2 	beq.w	fa1e <__adddf3+0x1ee>
    f85a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    f85e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    f862:	bfb8      	it	lt
    f864:	426d      	neglt	r5, r5
    f866:	dd0c      	ble.n	f882 <__adddf3+0x52>
    f868:	442c      	add	r4, r5
    f86a:	ea80 0202 	eor.w	r2, r0, r2
    f86e:	ea81 0303 	eor.w	r3, r1, r3
    f872:	ea82 0000 	eor.w	r0, r2, r0
    f876:	ea83 0101 	eor.w	r1, r3, r1
    f87a:	ea80 0202 	eor.w	r2, r0, r2
    f87e:	ea81 0303 	eor.w	r3, r1, r3
    f882:	2d36      	cmp	r5, #54	; 0x36
    f884:	bf88      	it	hi
    f886:	bd30      	pophi	{r4, r5, pc}
    f888:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    f88c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    f890:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    f894:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    f898:	d002      	beq.n	f8a0 <__adddf3+0x70>
    f89a:	4240      	negs	r0, r0
    f89c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f8a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    f8a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    f8a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    f8ac:	d002      	beq.n	f8b4 <__adddf3+0x84>
    f8ae:	4252      	negs	r2, r2
    f8b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    f8b4:	ea94 0f05 	teq	r4, r5
    f8b8:	f000 80a7 	beq.w	fa0a <__adddf3+0x1da>
    f8bc:	f1a4 0401 	sub.w	r4, r4, #1
    f8c0:	f1d5 0e20 	rsbs	lr, r5, #32
    f8c4:	db0d      	blt.n	f8e2 <__adddf3+0xb2>
    f8c6:	fa02 fc0e 	lsl.w	ip, r2, lr
    f8ca:	fa22 f205 	lsr.w	r2, r2, r5
    f8ce:	1880      	adds	r0, r0, r2
    f8d0:	f141 0100 	adc.w	r1, r1, #0
    f8d4:	fa03 f20e 	lsl.w	r2, r3, lr
    f8d8:	1880      	adds	r0, r0, r2
    f8da:	fa43 f305 	asr.w	r3, r3, r5
    f8de:	4159      	adcs	r1, r3
    f8e0:	e00e      	b.n	f900 <__adddf3+0xd0>
    f8e2:	f1a5 0520 	sub.w	r5, r5, #32
    f8e6:	f10e 0e20 	add.w	lr, lr, #32
    f8ea:	2a01      	cmp	r2, #1
    f8ec:	fa03 fc0e 	lsl.w	ip, r3, lr
    f8f0:	bf28      	it	cs
    f8f2:	f04c 0c02 	orrcs.w	ip, ip, #2
    f8f6:	fa43 f305 	asr.w	r3, r3, r5
    f8fa:	18c0      	adds	r0, r0, r3
    f8fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    f900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    f904:	d507      	bpl.n	f916 <__adddf3+0xe6>
    f906:	f04f 0e00 	mov.w	lr, #0
    f90a:	f1dc 0c00 	rsbs	ip, ip, #0
    f90e:	eb7e 0000 	sbcs.w	r0, lr, r0
    f912:	eb6e 0101 	sbc.w	r1, lr, r1
    f916:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    f91a:	d31b      	bcc.n	f954 <__adddf3+0x124>
    f91c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    f920:	d30c      	bcc.n	f93c <__adddf3+0x10c>
    f922:	0849      	lsrs	r1, r1, #1
    f924:	ea5f 0030 	movs.w	r0, r0, rrx
    f928:	ea4f 0c3c 	mov.w	ip, ip, rrx
    f92c:	f104 0401 	add.w	r4, r4, #1
    f930:	ea4f 5244 	mov.w	r2, r4, lsl #21
    f934:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    f938:	f080 809a 	bcs.w	fa70 <__adddf3+0x240>
    f93c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    f940:	bf08      	it	eq
    f942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    f946:	f150 0000 	adcs.w	r0, r0, #0
    f94a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    f94e:	ea41 0105 	orr.w	r1, r1, r5
    f952:	bd30      	pop	{r4, r5, pc}
    f954:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    f958:	4140      	adcs	r0, r0
    f95a:	eb41 0101 	adc.w	r1, r1, r1
    f95e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    f962:	f1a4 0401 	sub.w	r4, r4, #1
    f966:	d1e9      	bne.n	f93c <__adddf3+0x10c>
    f968:	f091 0f00 	teq	r1, #0
    f96c:	bf04      	itt	eq
    f96e:	4601      	moveq	r1, r0
    f970:	2000      	moveq	r0, #0
    f972:	fab1 f381 	clz	r3, r1
    f976:	bf08      	it	eq
    f978:	3320      	addeq	r3, #32
    f97a:	f1a3 030b 	sub.w	r3, r3, #11
    f97e:	f1b3 0220 	subs.w	r2, r3, #32
    f982:	da0c      	bge.n	f99e <__adddf3+0x16e>
    f984:	320c      	adds	r2, #12
    f986:	dd08      	ble.n	f99a <__adddf3+0x16a>
    f988:	f102 0c14 	add.w	ip, r2, #20
    f98c:	f1c2 020c 	rsb	r2, r2, #12
    f990:	fa01 f00c 	lsl.w	r0, r1, ip
    f994:	fa21 f102 	lsr.w	r1, r1, r2
    f998:	e00c      	b.n	f9b4 <__adddf3+0x184>
    f99a:	f102 0214 	add.w	r2, r2, #20
    f99e:	bfd8      	it	le
    f9a0:	f1c2 0c20 	rsble	ip, r2, #32
    f9a4:	fa01 f102 	lsl.w	r1, r1, r2
    f9a8:	fa20 fc0c 	lsr.w	ip, r0, ip
    f9ac:	bfdc      	itt	le
    f9ae:	ea41 010c 	orrle.w	r1, r1, ip
    f9b2:	4090      	lslle	r0, r2
    f9b4:	1ae4      	subs	r4, r4, r3
    f9b6:	bfa2      	ittt	ge
    f9b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    f9bc:	4329      	orrge	r1, r5
    f9be:	bd30      	popge	{r4, r5, pc}
    f9c0:	ea6f 0404 	mvn.w	r4, r4
    f9c4:	3c1f      	subs	r4, #31
    f9c6:	da1c      	bge.n	fa02 <__adddf3+0x1d2>
    f9c8:	340c      	adds	r4, #12
    f9ca:	dc0e      	bgt.n	f9ea <__adddf3+0x1ba>
    f9cc:	f104 0414 	add.w	r4, r4, #20
    f9d0:	f1c4 0220 	rsb	r2, r4, #32
    f9d4:	fa20 f004 	lsr.w	r0, r0, r4
    f9d8:	fa01 f302 	lsl.w	r3, r1, r2
    f9dc:	ea40 0003 	orr.w	r0, r0, r3
    f9e0:	fa21 f304 	lsr.w	r3, r1, r4
    f9e4:	ea45 0103 	orr.w	r1, r5, r3
    f9e8:	bd30      	pop	{r4, r5, pc}
    f9ea:	f1c4 040c 	rsb	r4, r4, #12
    f9ee:	f1c4 0220 	rsb	r2, r4, #32
    f9f2:	fa20 f002 	lsr.w	r0, r0, r2
    f9f6:	fa01 f304 	lsl.w	r3, r1, r4
    f9fa:	ea40 0003 	orr.w	r0, r0, r3
    f9fe:	4629      	mov	r1, r5
    fa00:	bd30      	pop	{r4, r5, pc}
    fa02:	fa21 f004 	lsr.w	r0, r1, r4
    fa06:	4629      	mov	r1, r5
    fa08:	bd30      	pop	{r4, r5, pc}
    fa0a:	f094 0f00 	teq	r4, #0
    fa0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    fa12:	bf06      	itte	eq
    fa14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    fa18:	3401      	addeq	r4, #1
    fa1a:	3d01      	subne	r5, #1
    fa1c:	e74e      	b.n	f8bc <__adddf3+0x8c>
    fa1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    fa22:	bf18      	it	ne
    fa24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    fa28:	d029      	beq.n	fa7e <__adddf3+0x24e>
    fa2a:	ea94 0f05 	teq	r4, r5
    fa2e:	bf08      	it	eq
    fa30:	ea90 0f02 	teqeq	r0, r2
    fa34:	d005      	beq.n	fa42 <__adddf3+0x212>
    fa36:	ea54 0c00 	orrs.w	ip, r4, r0
    fa3a:	bf04      	itt	eq
    fa3c:	4619      	moveq	r1, r3
    fa3e:	4610      	moveq	r0, r2
    fa40:	bd30      	pop	{r4, r5, pc}
    fa42:	ea91 0f03 	teq	r1, r3
    fa46:	bf1e      	ittt	ne
    fa48:	2100      	movne	r1, #0
    fa4a:	2000      	movne	r0, #0
    fa4c:	bd30      	popne	{r4, r5, pc}
    fa4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    fa52:	d105      	bne.n	fa60 <__adddf3+0x230>
    fa54:	0040      	lsls	r0, r0, #1
    fa56:	4149      	adcs	r1, r1
    fa58:	bf28      	it	cs
    fa5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    fa5e:	bd30      	pop	{r4, r5, pc}
    fa60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    fa64:	bf3c      	itt	cc
    fa66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    fa6a:	bd30      	popcc	{r4, r5, pc}
    fa6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    fa70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    fa74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    fa78:	f04f 0000 	mov.w	r0, #0
    fa7c:	bd30      	pop	{r4, r5, pc}
    fa7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    fa82:	bf1a      	itte	ne
    fa84:	4619      	movne	r1, r3
    fa86:	4610      	movne	r0, r2
    fa88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    fa8c:	bf1c      	itt	ne
    fa8e:	460b      	movne	r3, r1
    fa90:	4602      	movne	r2, r0
    fa92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    fa96:	bf06      	itte	eq
    fa98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    fa9c:	ea91 0f03 	teqeq	r1, r3
    faa0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    faa4:	bd30      	pop	{r4, r5, pc}
    faa6:	bf00      	nop

0000faa8 <__aeabi_ui2d>:
    faa8:	f090 0f00 	teq	r0, #0
    faac:	bf04      	itt	eq
    faae:	2100      	moveq	r1, #0
    fab0:	4770      	bxeq	lr
    fab2:	b530      	push	{r4, r5, lr}
    fab4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fab8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fabc:	f04f 0500 	mov.w	r5, #0
    fac0:	f04f 0100 	mov.w	r1, #0
    fac4:	e750      	b.n	f968 <__adddf3+0x138>
    fac6:	bf00      	nop

0000fac8 <__aeabi_i2d>:
    fac8:	f090 0f00 	teq	r0, #0
    facc:	bf04      	itt	eq
    face:	2100      	moveq	r1, #0
    fad0:	4770      	bxeq	lr
    fad2:	b530      	push	{r4, r5, lr}
    fad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fadc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    fae0:	bf48      	it	mi
    fae2:	4240      	negmi	r0, r0
    fae4:	f04f 0100 	mov.w	r1, #0
    fae8:	e73e      	b.n	f968 <__adddf3+0x138>
    faea:	bf00      	nop

0000faec <__aeabi_f2d>:
    faec:	0042      	lsls	r2, r0, #1
    faee:	ea4f 01e2 	mov.w	r1, r2, asr #3
    faf2:	ea4f 0131 	mov.w	r1, r1, rrx
    faf6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    fafa:	bf1f      	itttt	ne
    fafc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    fb00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    fb04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    fb08:	4770      	bxne	lr
    fb0a:	f092 0f00 	teq	r2, #0
    fb0e:	bf14      	ite	ne
    fb10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    fb14:	4770      	bxeq	lr
    fb16:	b530      	push	{r4, r5, lr}
    fb18:	f44f 7460 	mov.w	r4, #896	; 0x380
    fb1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    fb20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fb24:	e720      	b.n	f968 <__adddf3+0x138>
    fb26:	bf00      	nop

0000fb28 <__aeabi_ul2d>:
    fb28:	ea50 0201 	orrs.w	r2, r0, r1
    fb2c:	bf08      	it	eq
    fb2e:	4770      	bxeq	lr
    fb30:	b530      	push	{r4, r5, lr}
    fb32:	f04f 0500 	mov.w	r5, #0
    fb36:	e00a      	b.n	fb4e <__aeabi_l2d+0x16>

0000fb38 <__aeabi_l2d>:
    fb38:	ea50 0201 	orrs.w	r2, r0, r1
    fb3c:	bf08      	it	eq
    fb3e:	4770      	bxeq	lr
    fb40:	b530      	push	{r4, r5, lr}
    fb42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    fb46:	d502      	bpl.n	fb4e <__aeabi_l2d+0x16>
    fb48:	4240      	negs	r0, r0
    fb4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fb4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fb52:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fb56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    fb5a:	f43f aedc 	beq.w	f916 <__adddf3+0xe6>
    fb5e:	f04f 0203 	mov.w	r2, #3
    fb62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    fb66:	bf18      	it	ne
    fb68:	3203      	addne	r2, #3
    fb6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    fb6e:	bf18      	it	ne
    fb70:	3203      	addne	r2, #3
    fb72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    fb76:	f1c2 0320 	rsb	r3, r2, #32
    fb7a:	fa00 fc03 	lsl.w	ip, r0, r3
    fb7e:	fa20 f002 	lsr.w	r0, r0, r2
    fb82:	fa01 fe03 	lsl.w	lr, r1, r3
    fb86:	ea40 000e 	orr.w	r0, r0, lr
    fb8a:	fa21 f102 	lsr.w	r1, r1, r2
    fb8e:	4414      	add	r4, r2
    fb90:	e6c1      	b.n	f916 <__adddf3+0xe6>
    fb92:	bf00      	nop

0000fb94 <__aeabi_dmul>:
    fb94:	b570      	push	{r4, r5, r6, lr}
    fb96:	f04f 0cff 	mov.w	ip, #255	; 0xff
    fb9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    fb9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    fba2:	bf1d      	ittte	ne
    fba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    fba8:	ea94 0f0c 	teqne	r4, ip
    fbac:	ea95 0f0c 	teqne	r5, ip
    fbb0:	f000 f8de 	bleq	fd70 <__aeabi_dmul+0x1dc>
    fbb4:	442c      	add	r4, r5
    fbb6:	ea81 0603 	eor.w	r6, r1, r3
    fbba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    fbbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    fbc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    fbc6:	bf18      	it	ne
    fbc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    fbcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    fbd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    fbd4:	d038      	beq.n	fc48 <__aeabi_dmul+0xb4>
    fbd6:	fba0 ce02 	umull	ip, lr, r0, r2
    fbda:	f04f 0500 	mov.w	r5, #0
    fbde:	fbe1 e502 	umlal	lr, r5, r1, r2
    fbe2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    fbe6:	fbe0 e503 	umlal	lr, r5, r0, r3
    fbea:	f04f 0600 	mov.w	r6, #0
    fbee:	fbe1 5603 	umlal	r5, r6, r1, r3
    fbf2:	f09c 0f00 	teq	ip, #0
    fbf6:	bf18      	it	ne
    fbf8:	f04e 0e01 	orrne.w	lr, lr, #1
    fbfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    fc00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    fc04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    fc08:	d204      	bcs.n	fc14 <__aeabi_dmul+0x80>
    fc0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    fc0e:	416d      	adcs	r5, r5
    fc10:	eb46 0606 	adc.w	r6, r6, r6
    fc14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    fc18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    fc1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    fc20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    fc24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    fc28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    fc2c:	bf88      	it	hi
    fc2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    fc32:	d81e      	bhi.n	fc72 <__aeabi_dmul+0xde>
    fc34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    fc38:	bf08      	it	eq
    fc3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    fc3e:	f150 0000 	adcs.w	r0, r0, #0
    fc42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    fc46:	bd70      	pop	{r4, r5, r6, pc}
    fc48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    fc4c:	ea46 0101 	orr.w	r1, r6, r1
    fc50:	ea40 0002 	orr.w	r0, r0, r2
    fc54:	ea81 0103 	eor.w	r1, r1, r3
    fc58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    fc5c:	bfc2      	ittt	gt
    fc5e:	ebd4 050c 	rsbsgt	r5, r4, ip
    fc62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    fc66:	bd70      	popgt	{r4, r5, r6, pc}
    fc68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    fc6c:	f04f 0e00 	mov.w	lr, #0
    fc70:	3c01      	subs	r4, #1
    fc72:	f300 80ab 	bgt.w	fdcc <__aeabi_dmul+0x238>
    fc76:	f114 0f36 	cmn.w	r4, #54	; 0x36
    fc7a:	bfde      	ittt	le
    fc7c:	2000      	movle	r0, #0
    fc7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    fc82:	bd70      	pople	{r4, r5, r6, pc}
    fc84:	f1c4 0400 	rsb	r4, r4, #0
    fc88:	3c20      	subs	r4, #32
    fc8a:	da35      	bge.n	fcf8 <__aeabi_dmul+0x164>
    fc8c:	340c      	adds	r4, #12
    fc8e:	dc1b      	bgt.n	fcc8 <__aeabi_dmul+0x134>
    fc90:	f104 0414 	add.w	r4, r4, #20
    fc94:	f1c4 0520 	rsb	r5, r4, #32
    fc98:	fa00 f305 	lsl.w	r3, r0, r5
    fc9c:	fa20 f004 	lsr.w	r0, r0, r4
    fca0:	fa01 f205 	lsl.w	r2, r1, r5
    fca4:	ea40 0002 	orr.w	r0, r0, r2
    fca8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    fcac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fcb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    fcb4:	fa21 f604 	lsr.w	r6, r1, r4
    fcb8:	eb42 0106 	adc.w	r1, r2, r6
    fcbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    fcc0:	bf08      	it	eq
    fcc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    fcc6:	bd70      	pop	{r4, r5, r6, pc}
    fcc8:	f1c4 040c 	rsb	r4, r4, #12
    fccc:	f1c4 0520 	rsb	r5, r4, #32
    fcd0:	fa00 f304 	lsl.w	r3, r0, r4
    fcd4:	fa20 f005 	lsr.w	r0, r0, r5
    fcd8:	fa01 f204 	lsl.w	r2, r1, r4
    fcdc:	ea40 0002 	orr.w	r0, r0, r2
    fce0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fce4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    fce8:	f141 0100 	adc.w	r1, r1, #0
    fcec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    fcf0:	bf08      	it	eq
    fcf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    fcf6:	bd70      	pop	{r4, r5, r6, pc}
    fcf8:	f1c4 0520 	rsb	r5, r4, #32
    fcfc:	fa00 f205 	lsl.w	r2, r0, r5
    fd00:	ea4e 0e02 	orr.w	lr, lr, r2
    fd04:	fa20 f304 	lsr.w	r3, r0, r4
    fd08:	fa01 f205 	lsl.w	r2, r1, r5
    fd0c:	ea43 0302 	orr.w	r3, r3, r2
    fd10:	fa21 f004 	lsr.w	r0, r1, r4
    fd14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fd18:	fa21 f204 	lsr.w	r2, r1, r4
    fd1c:	ea20 0002 	bic.w	r0, r0, r2
    fd20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    fd24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    fd28:	bf08      	it	eq
    fd2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    fd2e:	bd70      	pop	{r4, r5, r6, pc}
    fd30:	f094 0f00 	teq	r4, #0
    fd34:	d10f      	bne.n	fd56 <__aeabi_dmul+0x1c2>
    fd36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    fd3a:	0040      	lsls	r0, r0, #1
    fd3c:	eb41 0101 	adc.w	r1, r1, r1
    fd40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    fd44:	bf08      	it	eq
    fd46:	3c01      	subeq	r4, #1
    fd48:	d0f7      	beq.n	fd3a <__aeabi_dmul+0x1a6>
    fd4a:	ea41 0106 	orr.w	r1, r1, r6
    fd4e:	f095 0f00 	teq	r5, #0
    fd52:	bf18      	it	ne
    fd54:	4770      	bxne	lr
    fd56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    fd5a:	0052      	lsls	r2, r2, #1
    fd5c:	eb43 0303 	adc.w	r3, r3, r3
    fd60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    fd64:	bf08      	it	eq
    fd66:	3d01      	subeq	r5, #1
    fd68:	d0f7      	beq.n	fd5a <__aeabi_dmul+0x1c6>
    fd6a:	ea43 0306 	orr.w	r3, r3, r6
    fd6e:	4770      	bx	lr
    fd70:	ea94 0f0c 	teq	r4, ip
    fd74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    fd78:	bf18      	it	ne
    fd7a:	ea95 0f0c 	teqne	r5, ip
    fd7e:	d00c      	beq.n	fd9a <__aeabi_dmul+0x206>
    fd80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    fd84:	bf18      	it	ne
    fd86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    fd8a:	d1d1      	bne.n	fd30 <__aeabi_dmul+0x19c>
    fd8c:	ea81 0103 	eor.w	r1, r1, r3
    fd90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fd94:	f04f 0000 	mov.w	r0, #0
    fd98:	bd70      	pop	{r4, r5, r6, pc}
    fd9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    fd9e:	bf06      	itte	eq
    fda0:	4610      	moveq	r0, r2
    fda2:	4619      	moveq	r1, r3
    fda4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    fda8:	d019      	beq.n	fdde <__aeabi_dmul+0x24a>
    fdaa:	ea94 0f0c 	teq	r4, ip
    fdae:	d102      	bne.n	fdb6 <__aeabi_dmul+0x222>
    fdb0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    fdb4:	d113      	bne.n	fdde <__aeabi_dmul+0x24a>
    fdb6:	ea95 0f0c 	teq	r5, ip
    fdba:	d105      	bne.n	fdc8 <__aeabi_dmul+0x234>
    fdbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    fdc0:	bf1c      	itt	ne
    fdc2:	4610      	movne	r0, r2
    fdc4:	4619      	movne	r1, r3
    fdc6:	d10a      	bne.n	fdde <__aeabi_dmul+0x24a>
    fdc8:	ea81 0103 	eor.w	r1, r1, r3
    fdcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fdd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    fdd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    fdd8:	f04f 0000 	mov.w	r0, #0
    fddc:	bd70      	pop	{r4, r5, r6, pc}
    fdde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    fde2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    fde6:	bd70      	pop	{r4, r5, r6, pc}

0000fde8 <__aeabi_ddiv>:
    fde8:	b570      	push	{r4, r5, r6, lr}
    fdea:	f04f 0cff 	mov.w	ip, #255	; 0xff
    fdee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    fdf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    fdf6:	bf1d      	ittte	ne
    fdf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    fdfc:	ea94 0f0c 	teqne	r4, ip
    fe00:	ea95 0f0c 	teqne	r5, ip
    fe04:	f000 f8a7 	bleq	ff56 <__aeabi_ddiv+0x16e>
    fe08:	eba4 0405 	sub.w	r4, r4, r5
    fe0c:	ea81 0e03 	eor.w	lr, r1, r3
    fe10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    fe14:	ea4f 3101 	mov.w	r1, r1, lsl #12
    fe18:	f000 8088 	beq.w	ff2c <__aeabi_ddiv+0x144>
    fe1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    fe20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    fe24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    fe28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    fe2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    fe30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    fe34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    fe38:	ea4f 2600 	mov.w	r6, r0, lsl #8
    fe3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    fe40:	429d      	cmp	r5, r3
    fe42:	bf08      	it	eq
    fe44:	4296      	cmpeq	r6, r2
    fe46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    fe4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    fe4e:	d202      	bcs.n	fe56 <__aeabi_ddiv+0x6e>
    fe50:	085b      	lsrs	r3, r3, #1
    fe52:	ea4f 0232 	mov.w	r2, r2, rrx
    fe56:	1ab6      	subs	r6, r6, r2
    fe58:	eb65 0503 	sbc.w	r5, r5, r3
    fe5c:	085b      	lsrs	r3, r3, #1
    fe5e:	ea4f 0232 	mov.w	r2, r2, rrx
    fe62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    fe66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    fe6a:	ebb6 0e02 	subs.w	lr, r6, r2
    fe6e:	eb75 0e03 	sbcs.w	lr, r5, r3
    fe72:	bf22      	ittt	cs
    fe74:	1ab6      	subcs	r6, r6, r2
    fe76:	4675      	movcs	r5, lr
    fe78:	ea40 000c 	orrcs.w	r0, r0, ip
    fe7c:	085b      	lsrs	r3, r3, #1
    fe7e:	ea4f 0232 	mov.w	r2, r2, rrx
    fe82:	ebb6 0e02 	subs.w	lr, r6, r2
    fe86:	eb75 0e03 	sbcs.w	lr, r5, r3
    fe8a:	bf22      	ittt	cs
    fe8c:	1ab6      	subcs	r6, r6, r2
    fe8e:	4675      	movcs	r5, lr
    fe90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    fe94:	085b      	lsrs	r3, r3, #1
    fe96:	ea4f 0232 	mov.w	r2, r2, rrx
    fe9a:	ebb6 0e02 	subs.w	lr, r6, r2
    fe9e:	eb75 0e03 	sbcs.w	lr, r5, r3
    fea2:	bf22      	ittt	cs
    fea4:	1ab6      	subcs	r6, r6, r2
    fea6:	4675      	movcs	r5, lr
    fea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    feac:	085b      	lsrs	r3, r3, #1
    feae:	ea4f 0232 	mov.w	r2, r2, rrx
    feb2:	ebb6 0e02 	subs.w	lr, r6, r2
    feb6:	eb75 0e03 	sbcs.w	lr, r5, r3
    feba:	bf22      	ittt	cs
    febc:	1ab6      	subcs	r6, r6, r2
    febe:	4675      	movcs	r5, lr
    fec0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    fec4:	ea55 0e06 	orrs.w	lr, r5, r6
    fec8:	d018      	beq.n	fefc <__aeabi_ddiv+0x114>
    feca:	ea4f 1505 	mov.w	r5, r5, lsl #4
    fece:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    fed2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    fed6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    feda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    fede:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    fee2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    fee6:	d1c0      	bne.n	fe6a <__aeabi_ddiv+0x82>
    fee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    feec:	d10b      	bne.n	ff06 <__aeabi_ddiv+0x11e>
    feee:	ea41 0100 	orr.w	r1, r1, r0
    fef2:	f04f 0000 	mov.w	r0, #0
    fef6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    fefa:	e7b6      	b.n	fe6a <__aeabi_ddiv+0x82>
    fefc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ff00:	bf04      	itt	eq
    ff02:	4301      	orreq	r1, r0
    ff04:	2000      	moveq	r0, #0
    ff06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ff0a:	bf88      	it	hi
    ff0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ff10:	f63f aeaf 	bhi.w	fc72 <__aeabi_dmul+0xde>
    ff14:	ebb5 0c03 	subs.w	ip, r5, r3
    ff18:	bf04      	itt	eq
    ff1a:	ebb6 0c02 	subseq.w	ip, r6, r2
    ff1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ff22:	f150 0000 	adcs.w	r0, r0, #0
    ff26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ff2a:	bd70      	pop	{r4, r5, r6, pc}
    ff2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ff30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ff34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    ff38:	bfc2      	ittt	gt
    ff3a:	ebd4 050c 	rsbsgt	r5, r4, ip
    ff3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ff42:	bd70      	popgt	{r4, r5, r6, pc}
    ff44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ff48:	f04f 0e00 	mov.w	lr, #0
    ff4c:	3c01      	subs	r4, #1
    ff4e:	e690      	b.n	fc72 <__aeabi_dmul+0xde>
    ff50:	ea45 0e06 	orr.w	lr, r5, r6
    ff54:	e68d      	b.n	fc72 <__aeabi_dmul+0xde>
    ff56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ff5a:	ea94 0f0c 	teq	r4, ip
    ff5e:	bf08      	it	eq
    ff60:	ea95 0f0c 	teqeq	r5, ip
    ff64:	f43f af3b 	beq.w	fdde <__aeabi_dmul+0x24a>
    ff68:	ea94 0f0c 	teq	r4, ip
    ff6c:	d10a      	bne.n	ff84 <__aeabi_ddiv+0x19c>
    ff6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ff72:	f47f af34 	bne.w	fdde <__aeabi_dmul+0x24a>
    ff76:	ea95 0f0c 	teq	r5, ip
    ff7a:	f47f af25 	bne.w	fdc8 <__aeabi_dmul+0x234>
    ff7e:	4610      	mov	r0, r2
    ff80:	4619      	mov	r1, r3
    ff82:	e72c      	b.n	fdde <__aeabi_dmul+0x24a>
    ff84:	ea95 0f0c 	teq	r5, ip
    ff88:	d106      	bne.n	ff98 <__aeabi_ddiv+0x1b0>
    ff8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ff8e:	f43f aefd 	beq.w	fd8c <__aeabi_dmul+0x1f8>
    ff92:	4610      	mov	r0, r2
    ff94:	4619      	mov	r1, r3
    ff96:	e722      	b.n	fdde <__aeabi_dmul+0x24a>
    ff98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ff9c:	bf18      	it	ne
    ff9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ffa2:	f47f aec5 	bne.w	fd30 <__aeabi_dmul+0x19c>
    ffa6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ffaa:	f47f af0d 	bne.w	fdc8 <__aeabi_dmul+0x234>
    ffae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ffb2:	f47f aeeb 	bne.w	fd8c <__aeabi_dmul+0x1f8>
    ffb6:	e712      	b.n	fdde <__aeabi_dmul+0x24a>

0000ffb8 <__gedf2>:
    ffb8:	f04f 3cff 	mov.w	ip, #4294967295
    ffbc:	e006      	b.n	ffcc <__cmpdf2+0x4>
    ffbe:	bf00      	nop

0000ffc0 <__ledf2>:
    ffc0:	f04f 0c01 	mov.w	ip, #1
    ffc4:	e002      	b.n	ffcc <__cmpdf2+0x4>
    ffc6:	bf00      	nop

0000ffc8 <__cmpdf2>:
    ffc8:	f04f 0c01 	mov.w	ip, #1
    ffcc:	f84d cd04 	str.w	ip, [sp, #-4]!
    ffd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ffd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ffd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ffdc:	bf18      	it	ne
    ffde:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    ffe2:	d01b      	beq.n	1001c <STACK_SIZE+0x1c>
    ffe4:	b001      	add	sp, #4
    ffe6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    ffea:	bf0c      	ite	eq
    ffec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    fff0:	ea91 0f03 	teqne	r1, r3
    fff4:	bf02      	ittt	eq
    fff6:	ea90 0f02 	teqeq	r0, r2
    fffa:	2000      	moveq	r0, #0
    fffc:	4770      	bxeq	lr
    fffe:	f110 0f00 	cmn.w	r0, #0
   10002:	ea91 0f03 	teq	r1, r3
   10006:	bf58      	it	pl
   10008:	4299      	cmppl	r1, r3
   1000a:	bf08      	it	eq
   1000c:	4290      	cmpeq	r0, r2
   1000e:	bf2c      	ite	cs
   10010:	17d8      	asrcs	r0, r3, #31
   10012:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   10016:	f040 0001 	orr.w	r0, r0, #1
   1001a:	4770      	bx	lr
   1001c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10024:	d102      	bne.n	1002c <STACK_SIZE+0x2c>
   10026:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1002a:	d107      	bne.n	1003c <STACK_SIZE+0x3c>
   1002c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10030:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10034:	d1d6      	bne.n	ffe4 <__cmpdf2+0x1c>
   10036:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1003a:	d0d3      	beq.n	ffe4 <__cmpdf2+0x1c>
   1003c:	f85d 0b04 	ldr.w	r0, [sp], #4
   10040:	4770      	bx	lr
   10042:	bf00      	nop

00010044 <__aeabi_cdrcmple>:
   10044:	4684      	mov	ip, r0
   10046:	4610      	mov	r0, r2
   10048:	4662      	mov	r2, ip
   1004a:	468c      	mov	ip, r1
   1004c:	4619      	mov	r1, r3
   1004e:	4663      	mov	r3, ip
   10050:	e000      	b.n	10054 <__aeabi_cdcmpeq>
   10052:	bf00      	nop

00010054 <__aeabi_cdcmpeq>:
   10054:	b501      	push	{r0, lr}
   10056:	f7ff ffb7 	bl	ffc8 <__cmpdf2>
   1005a:	2800      	cmp	r0, #0
   1005c:	bf48      	it	mi
   1005e:	f110 0f00 	cmnmi.w	r0, #0
   10062:	bd01      	pop	{r0, pc}

00010064 <__aeabi_dcmpeq>:
   10064:	f84d ed08 	str.w	lr, [sp, #-8]!
   10068:	f7ff fff4 	bl	10054 <__aeabi_cdcmpeq>
   1006c:	bf0c      	ite	eq
   1006e:	2001      	moveq	r0, #1
   10070:	2000      	movne	r0, #0
   10072:	f85d fb08 	ldr.w	pc, [sp], #8
   10076:	bf00      	nop

00010078 <__aeabi_dcmplt>:
   10078:	f84d ed08 	str.w	lr, [sp, #-8]!
   1007c:	f7ff ffea 	bl	10054 <__aeabi_cdcmpeq>
   10080:	bf34      	ite	cc
   10082:	2001      	movcc	r0, #1
   10084:	2000      	movcs	r0, #0
   10086:	f85d fb08 	ldr.w	pc, [sp], #8
   1008a:	bf00      	nop

0001008c <__aeabi_dcmple>:
   1008c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10090:	f7ff ffe0 	bl	10054 <__aeabi_cdcmpeq>
   10094:	bf94      	ite	ls
   10096:	2001      	movls	r0, #1
   10098:	2000      	movhi	r0, #0
   1009a:	f85d fb08 	ldr.w	pc, [sp], #8
   1009e:	bf00      	nop

000100a0 <__aeabi_dcmpge>:
   100a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   100a4:	f7ff ffce 	bl	10044 <__aeabi_cdrcmple>
   100a8:	bf94      	ite	ls
   100aa:	2001      	movls	r0, #1
   100ac:	2000      	movhi	r0, #0
   100ae:	f85d fb08 	ldr.w	pc, [sp], #8
   100b2:	bf00      	nop

000100b4 <__aeabi_dcmpgt>:
   100b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   100b8:	f7ff ffc4 	bl	10044 <__aeabi_cdrcmple>
   100bc:	bf34      	ite	cc
   100be:	2001      	movcc	r0, #1
   100c0:	2000      	movcs	r0, #0
   100c2:	f85d fb08 	ldr.w	pc, [sp], #8
   100c6:	bf00      	nop

000100c8 <__aeabi_dcmpun>:
   100c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   100cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   100d0:	d102      	bne.n	100d8 <__aeabi_dcmpun+0x10>
   100d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   100d6:	d10a      	bne.n	100ee <__aeabi_dcmpun+0x26>
   100d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   100dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   100e0:	d102      	bne.n	100e8 <__aeabi_dcmpun+0x20>
   100e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   100e6:	d102      	bne.n	100ee <__aeabi_dcmpun+0x26>
   100e8:	f04f 0000 	mov.w	r0, #0
   100ec:	4770      	bx	lr
   100ee:	f04f 0001 	mov.w	r0, #1
   100f2:	4770      	bx	lr

000100f4 <__aeabi_d2uiz>:
   100f4:	004a      	lsls	r2, r1, #1
   100f6:	d211      	bcs.n	1011c <__aeabi_d2uiz+0x28>
   100f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   100fc:	d211      	bcs.n	10122 <__aeabi_d2uiz+0x2e>
   100fe:	d50d      	bpl.n	1011c <__aeabi_d2uiz+0x28>
   10100:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10104:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10108:	d40e      	bmi.n	10128 <__aeabi_d2uiz+0x34>
   1010a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1010e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10112:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10116:	fa23 f002 	lsr.w	r0, r3, r2
   1011a:	4770      	bx	lr
   1011c:	f04f 0000 	mov.w	r0, #0
   10120:	4770      	bx	lr
   10122:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10126:	d102      	bne.n	1012e <__aeabi_d2uiz+0x3a>
   10128:	f04f 30ff 	mov.w	r0, #4294967295
   1012c:	4770      	bx	lr
   1012e:	f04f 0000 	mov.w	r0, #0
   10132:	4770      	bx	lr

00010134 <__cxa_atexit>:
   10134:	4613      	mov	r3, r2
   10136:	460a      	mov	r2, r1
   10138:	4601      	mov	r1, r0
   1013a:	2002      	movs	r0, #2
   1013c:	f000 b9ae 	b.w	1049c <__register_exitproc>

00010140 <__errno>:
   10140:	4b01      	ldr	r3, [pc, #4]	; (10148 <__errno+0x8>)
   10142:	6818      	ldr	r0, [r3, #0]
   10144:	4770      	bx	lr
   10146:	bf00      	nop
   10148:	20000118 	.word	0x20000118

0001014c <ffs>:
   1014c:	b140      	cbz	r0, 10160 <ffs+0x14>
   1014e:	2300      	movs	r3, #0
   10150:	fa40 f103 	asr.w	r1, r0, r3
   10154:	1c5a      	adds	r2, r3, #1
   10156:	07c9      	lsls	r1, r1, #31
   10158:	4613      	mov	r3, r2
   1015a:	d5f9      	bpl.n	10150 <ffs+0x4>
   1015c:	4610      	mov	r0, r2
   1015e:	4770      	bx	lr
   10160:	4602      	mov	r2, r0
   10162:	4610      	mov	r0, r2
   10164:	4770      	bx	lr
   10166:	bf00      	nop

00010168 <__libc_init_array>:
   10168:	b570      	push	{r4, r5, r6, lr}
   1016a:	4e0f      	ldr	r6, [pc, #60]	; (101a8 <__libc_init_array+0x40>)
   1016c:	4d0f      	ldr	r5, [pc, #60]	; (101ac <__libc_init_array+0x44>)
   1016e:	1b76      	subs	r6, r6, r5
   10170:	10b6      	asrs	r6, r6, #2
   10172:	bf18      	it	ne
   10174:	2400      	movne	r4, #0
   10176:	d005      	beq.n	10184 <__libc_init_array+0x1c>
   10178:	3401      	adds	r4, #1
   1017a:	f855 3b04 	ldr.w	r3, [r5], #4
   1017e:	4798      	blx	r3
   10180:	42a6      	cmp	r6, r4
   10182:	d1f9      	bne.n	10178 <__libc_init_array+0x10>
   10184:	4e0a      	ldr	r6, [pc, #40]	; (101b0 <__libc_init_array+0x48>)
   10186:	4d0b      	ldr	r5, [pc, #44]	; (101b4 <__libc_init_array+0x4c>)
   10188:	1b76      	subs	r6, r6, r5
   1018a:	f001 faaf 	bl	116ec <_init>
   1018e:	10b6      	asrs	r6, r6, #2
   10190:	bf18      	it	ne
   10192:	2400      	movne	r4, #0
   10194:	d006      	beq.n	101a4 <__libc_init_array+0x3c>
   10196:	3401      	adds	r4, #1
   10198:	f855 3b04 	ldr.w	r3, [r5], #4
   1019c:	4798      	blx	r3
   1019e:	42a6      	cmp	r6, r4
   101a0:	d1f9      	bne.n	10196 <__libc_init_array+0x2e>
   101a2:	bd70      	pop	{r4, r5, r6, pc}
   101a4:	bd70      	pop	{r4, r5, r6, pc}
   101a6:	bf00      	nop
   101a8:	000116f8 	.word	0x000116f8
   101ac:	000116f8 	.word	0x000116f8
   101b0:	00011728 	.word	0x00011728
   101b4:	000116f8 	.word	0x000116f8

000101b8 <memcpy>:
   101b8:	4684      	mov	ip, r0
   101ba:	ea41 0300 	orr.w	r3, r1, r0
   101be:	f013 0303 	ands.w	r3, r3, #3
   101c2:	d16d      	bne.n	102a0 <memcpy+0xe8>
   101c4:	3a40      	subs	r2, #64	; 0x40
   101c6:	d341      	bcc.n	1024c <memcpy+0x94>
   101c8:	f851 3b04 	ldr.w	r3, [r1], #4
   101cc:	f840 3b04 	str.w	r3, [r0], #4
   101d0:	f851 3b04 	ldr.w	r3, [r1], #4
   101d4:	f840 3b04 	str.w	r3, [r0], #4
   101d8:	f851 3b04 	ldr.w	r3, [r1], #4
   101dc:	f840 3b04 	str.w	r3, [r0], #4
   101e0:	f851 3b04 	ldr.w	r3, [r1], #4
   101e4:	f840 3b04 	str.w	r3, [r0], #4
   101e8:	f851 3b04 	ldr.w	r3, [r1], #4
   101ec:	f840 3b04 	str.w	r3, [r0], #4
   101f0:	f851 3b04 	ldr.w	r3, [r1], #4
   101f4:	f840 3b04 	str.w	r3, [r0], #4
   101f8:	f851 3b04 	ldr.w	r3, [r1], #4
   101fc:	f840 3b04 	str.w	r3, [r0], #4
   10200:	f851 3b04 	ldr.w	r3, [r1], #4
   10204:	f840 3b04 	str.w	r3, [r0], #4
   10208:	f851 3b04 	ldr.w	r3, [r1], #4
   1020c:	f840 3b04 	str.w	r3, [r0], #4
   10210:	f851 3b04 	ldr.w	r3, [r1], #4
   10214:	f840 3b04 	str.w	r3, [r0], #4
   10218:	f851 3b04 	ldr.w	r3, [r1], #4
   1021c:	f840 3b04 	str.w	r3, [r0], #4
   10220:	f851 3b04 	ldr.w	r3, [r1], #4
   10224:	f840 3b04 	str.w	r3, [r0], #4
   10228:	f851 3b04 	ldr.w	r3, [r1], #4
   1022c:	f840 3b04 	str.w	r3, [r0], #4
   10230:	f851 3b04 	ldr.w	r3, [r1], #4
   10234:	f840 3b04 	str.w	r3, [r0], #4
   10238:	f851 3b04 	ldr.w	r3, [r1], #4
   1023c:	f840 3b04 	str.w	r3, [r0], #4
   10240:	f851 3b04 	ldr.w	r3, [r1], #4
   10244:	f840 3b04 	str.w	r3, [r0], #4
   10248:	3a40      	subs	r2, #64	; 0x40
   1024a:	d2bd      	bcs.n	101c8 <memcpy+0x10>
   1024c:	3230      	adds	r2, #48	; 0x30
   1024e:	d311      	bcc.n	10274 <memcpy+0xbc>
   10250:	f851 3b04 	ldr.w	r3, [r1], #4
   10254:	f840 3b04 	str.w	r3, [r0], #4
   10258:	f851 3b04 	ldr.w	r3, [r1], #4
   1025c:	f840 3b04 	str.w	r3, [r0], #4
   10260:	f851 3b04 	ldr.w	r3, [r1], #4
   10264:	f840 3b04 	str.w	r3, [r0], #4
   10268:	f851 3b04 	ldr.w	r3, [r1], #4
   1026c:	f840 3b04 	str.w	r3, [r0], #4
   10270:	3a10      	subs	r2, #16
   10272:	d2ed      	bcs.n	10250 <memcpy+0x98>
   10274:	320c      	adds	r2, #12
   10276:	d305      	bcc.n	10284 <memcpy+0xcc>
   10278:	f851 3b04 	ldr.w	r3, [r1], #4
   1027c:	f840 3b04 	str.w	r3, [r0], #4
   10280:	3a04      	subs	r2, #4
   10282:	d2f9      	bcs.n	10278 <memcpy+0xc0>
   10284:	3204      	adds	r2, #4
   10286:	d008      	beq.n	1029a <memcpy+0xe2>
   10288:	07d2      	lsls	r2, r2, #31
   1028a:	bf1c      	itt	ne
   1028c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10290:	f800 3b01 	strbne.w	r3, [r0], #1
   10294:	d301      	bcc.n	1029a <memcpy+0xe2>
   10296:	880b      	ldrh	r3, [r1, #0]
   10298:	8003      	strh	r3, [r0, #0]
   1029a:	4660      	mov	r0, ip
   1029c:	4770      	bx	lr
   1029e:	bf00      	nop
   102a0:	2a08      	cmp	r2, #8
   102a2:	d313      	bcc.n	102cc <memcpy+0x114>
   102a4:	078b      	lsls	r3, r1, #30
   102a6:	d08d      	beq.n	101c4 <memcpy+0xc>
   102a8:	f010 0303 	ands.w	r3, r0, #3
   102ac:	d08a      	beq.n	101c4 <memcpy+0xc>
   102ae:	f1c3 0304 	rsb	r3, r3, #4
   102b2:	1ad2      	subs	r2, r2, r3
   102b4:	07db      	lsls	r3, r3, #31
   102b6:	bf1c      	itt	ne
   102b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   102bc:	f800 3b01 	strbne.w	r3, [r0], #1
   102c0:	d380      	bcc.n	101c4 <memcpy+0xc>
   102c2:	f831 3b02 	ldrh.w	r3, [r1], #2
   102c6:	f820 3b02 	strh.w	r3, [r0], #2
   102ca:	e77b      	b.n	101c4 <memcpy+0xc>
   102cc:	3a04      	subs	r2, #4
   102ce:	d3d9      	bcc.n	10284 <memcpy+0xcc>
   102d0:	3a01      	subs	r2, #1
   102d2:	f811 3b01 	ldrb.w	r3, [r1], #1
   102d6:	f800 3b01 	strb.w	r3, [r0], #1
   102da:	d2f9      	bcs.n	102d0 <memcpy+0x118>
   102dc:	780b      	ldrb	r3, [r1, #0]
   102de:	7003      	strb	r3, [r0, #0]
   102e0:	784b      	ldrb	r3, [r1, #1]
   102e2:	7043      	strb	r3, [r0, #1]
   102e4:	788b      	ldrb	r3, [r1, #2]
   102e6:	7083      	strb	r3, [r0, #2]
   102e8:	4660      	mov	r0, ip
   102ea:	4770      	bx	lr

000102ec <memset>:
   102ec:	b470      	push	{r4, r5, r6}
   102ee:	0786      	lsls	r6, r0, #30
   102f0:	d046      	beq.n	10380 <memset+0x94>
   102f2:	1e54      	subs	r4, r2, #1
   102f4:	2a00      	cmp	r2, #0
   102f6:	d041      	beq.n	1037c <memset+0x90>
   102f8:	b2ca      	uxtb	r2, r1
   102fa:	4603      	mov	r3, r0
   102fc:	e002      	b.n	10304 <memset+0x18>
   102fe:	f114 34ff 	adds.w	r4, r4, #4294967295
   10302:	d33b      	bcc.n	1037c <memset+0x90>
   10304:	f803 2b01 	strb.w	r2, [r3], #1
   10308:	079d      	lsls	r5, r3, #30
   1030a:	d1f8      	bne.n	102fe <memset+0x12>
   1030c:	2c03      	cmp	r4, #3
   1030e:	d92e      	bls.n	1036e <memset+0x82>
   10310:	b2cd      	uxtb	r5, r1
   10312:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10316:	2c0f      	cmp	r4, #15
   10318:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1031c:	d919      	bls.n	10352 <memset+0x66>
   1031e:	f103 0210 	add.w	r2, r3, #16
   10322:	4626      	mov	r6, r4
   10324:	3e10      	subs	r6, #16
   10326:	2e0f      	cmp	r6, #15
   10328:	f842 5c10 	str.w	r5, [r2, #-16]
   1032c:	f842 5c0c 	str.w	r5, [r2, #-12]
   10330:	f842 5c08 	str.w	r5, [r2, #-8]
   10334:	f842 5c04 	str.w	r5, [r2, #-4]
   10338:	f102 0210 	add.w	r2, r2, #16
   1033c:	d8f2      	bhi.n	10324 <memset+0x38>
   1033e:	f1a4 0210 	sub.w	r2, r4, #16
   10342:	f022 020f 	bic.w	r2, r2, #15
   10346:	f004 040f 	and.w	r4, r4, #15
   1034a:	3210      	adds	r2, #16
   1034c:	2c03      	cmp	r4, #3
   1034e:	4413      	add	r3, r2
   10350:	d90d      	bls.n	1036e <memset+0x82>
   10352:	461e      	mov	r6, r3
   10354:	4622      	mov	r2, r4
   10356:	3a04      	subs	r2, #4
   10358:	2a03      	cmp	r2, #3
   1035a:	f846 5b04 	str.w	r5, [r6], #4
   1035e:	d8fa      	bhi.n	10356 <memset+0x6a>
   10360:	1f22      	subs	r2, r4, #4
   10362:	f022 0203 	bic.w	r2, r2, #3
   10366:	3204      	adds	r2, #4
   10368:	4413      	add	r3, r2
   1036a:	f004 0403 	and.w	r4, r4, #3
   1036e:	b12c      	cbz	r4, 1037c <memset+0x90>
   10370:	b2c9      	uxtb	r1, r1
   10372:	441c      	add	r4, r3
   10374:	f803 1b01 	strb.w	r1, [r3], #1
   10378:	429c      	cmp	r4, r3
   1037a:	d1fb      	bne.n	10374 <memset+0x88>
   1037c:	bc70      	pop	{r4, r5, r6}
   1037e:	4770      	bx	lr
   10380:	4614      	mov	r4, r2
   10382:	4603      	mov	r3, r0
   10384:	e7c2      	b.n	1030c <memset+0x20>
   10386:	bf00      	nop
	...

000103c0 <strlen>:
   103c0:	f890 f000 	pld	[r0]
   103c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   103c8:	f020 0107 	bic.w	r1, r0, #7
   103cc:	f06f 0c00 	mvn.w	ip, #0
   103d0:	f010 0407 	ands.w	r4, r0, #7
   103d4:	f891 f020 	pld	[r1, #32]
   103d8:	f040 8049 	bne.w	1046e <strlen+0xae>
   103dc:	f04f 0400 	mov.w	r4, #0
   103e0:	f06f 0007 	mvn.w	r0, #7
   103e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   103e8:	f891 f040 	pld	[r1, #64]	; 0x40
   103ec:	f100 0008 	add.w	r0, r0, #8
   103f0:	fa82 f24c 	uadd8	r2, r2, ip
   103f4:	faa4 f28c 	sel	r2, r4, ip
   103f8:	fa83 f34c 	uadd8	r3, r3, ip
   103fc:	faa2 f38c 	sel	r3, r2, ip
   10400:	bb4b      	cbnz	r3, 10456 <strlen+0x96>
   10402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10406:	fa82 f24c 	uadd8	r2, r2, ip
   1040a:	f100 0008 	add.w	r0, r0, #8
   1040e:	faa4 f28c 	sel	r2, r4, ip
   10412:	fa83 f34c 	uadd8	r3, r3, ip
   10416:	faa2 f38c 	sel	r3, r2, ip
   1041a:	b9e3      	cbnz	r3, 10456 <strlen+0x96>
   1041c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10420:	fa82 f24c 	uadd8	r2, r2, ip
   10424:	f100 0008 	add.w	r0, r0, #8
   10428:	faa4 f28c 	sel	r2, r4, ip
   1042c:	fa83 f34c 	uadd8	r3, r3, ip
   10430:	faa2 f38c 	sel	r3, r2, ip
   10434:	b97b      	cbnz	r3, 10456 <strlen+0x96>
   10436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1043a:	f101 0120 	add.w	r1, r1, #32
   1043e:	fa82 f24c 	uadd8	r2, r2, ip
   10442:	f100 0008 	add.w	r0, r0, #8
   10446:	faa4 f28c 	sel	r2, r4, ip
   1044a:	fa83 f34c 	uadd8	r3, r3, ip
   1044e:	faa2 f38c 	sel	r3, r2, ip
   10452:	2b00      	cmp	r3, #0
   10454:	d0c6      	beq.n	103e4 <strlen+0x24>
   10456:	2a00      	cmp	r2, #0
   10458:	bf04      	itt	eq
   1045a:	3004      	addeq	r0, #4
   1045c:	461a      	moveq	r2, r3
   1045e:	ba12      	rev	r2, r2
   10460:	fab2 f282 	clz	r2, r2
   10464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1046c:	4770      	bx	lr
   1046e:	e9d1 2300 	ldrd	r2, r3, [r1]
   10472:	f004 0503 	and.w	r5, r4, #3
   10476:	f1c4 0000 	rsb	r0, r4, #0
   1047a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1047e:	f014 0f04 	tst.w	r4, #4
   10482:	f891 f040 	pld	[r1, #64]	; 0x40
   10486:	fa0c f505 	lsl.w	r5, ip, r5
   1048a:	ea62 0205 	orn	r2, r2, r5
   1048e:	bf1c      	itt	ne
   10490:	ea63 0305 	ornne	r3, r3, r5
   10494:	4662      	movne	r2, ip
   10496:	f04f 0400 	mov.w	r4, #0
   1049a:	e7a9      	b.n	103f0 <strlen+0x30>

0001049c <__register_exitproc>:
   1049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   104a0:	4d2c      	ldr	r5, [pc, #176]	; (10554 <__register_exitproc+0xb8>)
   104a2:	4606      	mov	r6, r0
   104a4:	6828      	ldr	r0, [r5, #0]
   104a6:	4698      	mov	r8, r3
   104a8:	460f      	mov	r7, r1
   104aa:	4691      	mov	r9, r2
   104ac:	f000 f882 	bl	105b4 <__retarget_lock_acquire_recursive>
   104b0:	4b29      	ldr	r3, [pc, #164]	; (10558 <__register_exitproc+0xbc>)
   104b2:	681c      	ldr	r4, [r3, #0]
   104b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   104b8:	2b00      	cmp	r3, #0
   104ba:	d03e      	beq.n	1053a <__register_exitproc+0x9e>
   104bc:	685a      	ldr	r2, [r3, #4]
   104be:	2a1f      	cmp	r2, #31
   104c0:	dc1c      	bgt.n	104fc <__register_exitproc+0x60>
   104c2:	f102 0e01 	add.w	lr, r2, #1
   104c6:	b176      	cbz	r6, 104e6 <__register_exitproc+0x4a>
   104c8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   104cc:	2401      	movs	r4, #1
   104ce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   104d2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   104d6:	4094      	lsls	r4, r2
   104d8:	4320      	orrs	r0, r4
   104da:	2e02      	cmp	r6, #2
   104dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   104e0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   104e4:	d023      	beq.n	1052e <__register_exitproc+0x92>
   104e6:	3202      	adds	r2, #2
   104e8:	f8c3 e004 	str.w	lr, [r3, #4]
   104ec:	6828      	ldr	r0, [r5, #0]
   104ee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   104f2:	f000 f861 	bl	105b8 <__retarget_lock_release_recursive>
   104f6:	2000      	movs	r0, #0
   104f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   104fc:	4b17      	ldr	r3, [pc, #92]	; (1055c <__register_exitproc+0xc0>)
   104fe:	b30b      	cbz	r3, 10544 <__register_exitproc+0xa8>
   10500:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10504:	f7f1 fc3a 	bl	1d7c <malloc>
   10508:	4603      	mov	r3, r0
   1050a:	b1d8      	cbz	r0, 10544 <__register_exitproc+0xa8>
   1050c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10510:	6002      	str	r2, [r0, #0]
   10512:	2100      	movs	r1, #0
   10514:	6041      	str	r1, [r0, #4]
   10516:	460a      	mov	r2, r1
   10518:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1051c:	f04f 0e01 	mov.w	lr, #1
   10520:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10524:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10528:	2e00      	cmp	r6, #0
   1052a:	d0dc      	beq.n	104e6 <__register_exitproc+0x4a>
   1052c:	e7cc      	b.n	104c8 <__register_exitproc+0x2c>
   1052e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10532:	430c      	orrs	r4, r1
   10534:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10538:	e7d5      	b.n	104e6 <__register_exitproc+0x4a>
   1053a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1053e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10542:	e7bb      	b.n	104bc <__register_exitproc+0x20>
   10544:	6828      	ldr	r0, [r5, #0]
   10546:	f000 f837 	bl	105b8 <__retarget_lock_release_recursive>
   1054a:	f04f 30ff 	mov.w	r0, #4294967295
   1054e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10552:	bf00      	nop
   10554:	20000548 	.word	0x20000548
   10558:	000116e8 	.word	0x000116e8
   1055c:	00001d7d 	.word	0x00001d7d

00010560 <register_fini>:
   10560:	4b02      	ldr	r3, [pc, #8]	; (1056c <register_fini+0xc>)
   10562:	b113      	cbz	r3, 1056a <register_fini+0xa>
   10564:	4802      	ldr	r0, [pc, #8]	; (10570 <register_fini+0x10>)
   10566:	f000 b805 	b.w	10574 <atexit>
   1056a:	4770      	bx	lr
   1056c:	00000000 	.word	0x00000000
   10570:	00010581 	.word	0x00010581

00010574 <atexit>:
   10574:	2300      	movs	r3, #0
   10576:	4601      	mov	r1, r0
   10578:	461a      	mov	r2, r3
   1057a:	4618      	mov	r0, r3
   1057c:	f7ff bf8e 	b.w	1049c <__register_exitproc>

00010580 <__libc_fini_array>:
   10580:	b538      	push	{r3, r4, r5, lr}
   10582:	4c0a      	ldr	r4, [pc, #40]	; (105ac <__libc_fini_array+0x2c>)
   10584:	4d0a      	ldr	r5, [pc, #40]	; (105b0 <__libc_fini_array+0x30>)
   10586:	1b64      	subs	r4, r4, r5
   10588:	10a4      	asrs	r4, r4, #2
   1058a:	d00a      	beq.n	105a2 <__libc_fini_array+0x22>
   1058c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10590:	3b01      	subs	r3, #1
   10592:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10596:	3c01      	subs	r4, #1
   10598:	f855 3904 	ldr.w	r3, [r5], #-4
   1059c:	4798      	blx	r3
   1059e:	2c00      	cmp	r4, #0
   105a0:	d1f9      	bne.n	10596 <__libc_fini_array+0x16>
   105a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   105a6:	f001 b8bf 	b.w	11728 <_fini>
   105aa:	bf00      	nop
   105ac:	00011738 	.word	0x00011738
   105b0:	00011734 	.word	0x00011734

000105b4 <__retarget_lock_acquire_recursive>:
   105b4:	4770      	bx	lr
   105b6:	bf00      	nop

000105b8 <__retarget_lock_release_recursive>:
   105b8:	4770      	bx	lr
   105ba:	bf00      	nop

000105bc <_ZTV17ARINC_Conversions>:
	...
   105c4:	0515 0000 03e5 0000                         ........

000105cc <_ZL5Mesg1>:
   105cc:	5241 4e49 2043 614c 6562 3a6c 0020 0000     ARINC Label: ...

000105dc <_ZL5Mesg2>:
   105dc:	6144 6174 203a 0000                         Data: ..

000105e4 <_ZL10HexToAscii>:
   105e4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

000105f4 <_ZL11HistoryMesg>:
   105f4:	6948 7473 726f 2079 4946 4f46 203a 0000     History FIFO: ..
   10604:	0d0a 4948 332d 3935 2033 6166 6c69 6465     ..HI-3593 failed
   10614:	7420 206f 6e69 7469 6c69 7a69 0a65 000d      to initilize...
   10624:	0d0a 2d0a 2d2d 6820 3273 4120 4952 434e     ...--- hs2 ARINC
   10634:	4920 746e 7265 6166 6563 2020 2d2d 2d2d      Interface  ----
   10644:	0d0a 0000 0a72 2d2d 212d 6f67 2074 656d     ....r.---!got me
   10654:	7373 6761 2165 2d2d 2d2d 0000 0d0a 7254     ssage!----....Tr
   10664:	6e61 6d73 7469 2620 5220 6365 6965 6576     ansmit & Receive
   10674:	5720 7469 2068 614c 6562 736c 4d20 646f      With Labels Mod
   10684:	0a65 000d 0d0a 4553 464c 542d 5345 2c54     e.....SELF-TEST,
   10694:	4920 746e 7265 616e 206c 6944 6967 6174      Internal Digita
   106a4:	206c 6f4c 706f 622d 6361 2c6b 4e20 206f     l Loop-back, No 
   106b4:	6164 6174 6920 2073 7274 6e61 6d73 7469     data is transmit
   106c4:	6574 2064 7865 6574 6e72 6c61 796c 0d0a     ted externally..
   106d4:	0000 0000 0d0a 6f20 206e 6154 6c62 2065     ...... on Table 
   106e4:	616c 6562 736c 6120 6572 4520 616e 6c62     labels are Enabl
   106f4:	6465 0000 0d0a 500a 6572 7373 5320 2d57     ed.....Press SW-
   10704:	2031 6f74 7320 6174 7472 6920 696e 6974     1 to start initi
   10714:	6c61 796c 0d0a 000a 2d2d 202d 7542 7474     ally....--- Butt
   10724:	6e6f 4320 6d6f 616d 646e 2073 2d2d 0a2d     on Commands ---.
   10734:	000d 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
   10744:	6f74 4420 7369 6c70 7961 5320 6174 7574     to Display Statu
   10754:	2073 6e61 2064 6f43 746e 6f72 206c 6552     s and Control Re
   10764:	6967 7473 7265 0a73 000d 0000 2020 2070     gisters.....  p 
   10774:	6f74 5020 7561 6573 0d0a 0000 2020 206d     to Pause....  m 
   10784:	6f74 4420 7369 6c70 7961 4c20 6261 6c65     to Display Label
   10794:	4d20 6d65 726f 0079 0d0a 003e 0d0a 7254      Memory...>...Tr
   107a4:	6e61 6d73 7469 6974 676e 0d0a 003e 0000     ansmitting..>...
   107b4:	0d0a 4948 332d 3935 2033 7453 7461 7375     ..HI-3593 Status
   107c4:	202c 6f43 746e 6f72 206c 6552 6967 7473     , Control Regist
   107d4:	7265 0d73 000a 0000 0d0a 2009 2a20 2a2a     ers........  ***
   107e4:	2a2a 5020 6572 7373 2020 7073 6361 6265     ** Press  spaceb
   107f4:	7261 7420 206f 6f63 746e 6e69 6575 2a20     ar to continue *
   10804:	2a2a 2a2a 002a 0000 0a0a 540d 6172 736e     *****......Trans
   10814:	696d 2074 6150 7375 6465 0d0a 0000 0000     mit Paused......
   10824:	0d0a 7250 7365 2073 4c4f 4445 425f 5455     ..Press OLED_BUT
   10834:	4f54 2d4e 2032 6f74 7420 6172 736e 696d     TON-2 to transmi
   10844:	2074 6e6f 2065 7266 6d61 2065 6e61 2064     t one frame and 
   10854:	6170 7375 0a65 000d 0d0a 7250 7365 2073     pause.....Press 
   10864:	4c4f 4445 425f 5455 4f54 2d4e 2033 6f74     OLED_BUTTON-3 to
   10874:	5220 7365 6d75 0a65 000d 0000 0d0a 7254      Resume.......Tr
   10884:	6e61 6d73 7469 6574 2072 6552 7573 656d     ansmitter Resume
   10894:	2e64 2e2e 0d0a 0000 0d0a 6552 6563 7669     d.........Receiv
   108a4:	7265 3120 4c20 6261 6c65 0a73 000d 0000     er 1 Labels.....
   108b4:	0d0a 6552 6563 7669 7265 3220 4c20 6261     ..Receiver 2 Lab
   108c4:	6c65 0a73 000d 0000 0d0a 7254 6e61 6d73     els.......Transm
   108d4:	7469 2620 5220 6365 6965 6576 4520 6863     it & Receive Ech
   108e4:	206f 6f4d 6564 0d0a 0000 0000 0d0a 6c53     o Mode........Sl
   108f4:	776f 5320 6570 6465 0000 0000 0d0a 6146     ow Speed......Fa
   10904:	7473 5320 6570 6465 0000 0000 0d0a 7254     st Speed......Tr
   10914:	6e61 6d73 7469 6574 2072 6150 6972 7974     ansmitter Parity
   10924:	4520 616e 6c62 6465 0000 0000 0d0a 6154      Enabled......Ta
   10934:	6c62 2065 616c 6562 736c 6120 6572 4520     ble labels are E
   10944:	616e 6c62 6465 0000 0d0a 2d0a 2d2d 4320     nabled.....--- C
   10954:	6e6f 6f73 656c 4320 6d6f 616d 646e 2073     onsole Commands 
   10964:	6548 706c 2d20 2d2d 0000 0000 2020 2050     Help ---....  P 
   10974:	203d 6150 6972 7974 5420 676f 6c67 2065     = Parity Toggle 
   10984:	6e6f 6f2f 6666 0000 2020 2054 203d 4654     on/off..  T = TF
   10994:	494c 2050 5420 676f 6c67 2065 6e6f 6f2f     LIP  Toggle on/o
   109a4:	6666 0000 2020 2052 203d 4652 494c 2050     ff..  R = RFLIP 
   109b4:	5420 676f 6c67 2065 6e6f 6f2f 6666 0000      Toggle on/off..
   109c4:	2020 2053 203d 4453 4e4f 202c 4453 2c39       S = SDON, SD9,
   109d4:	5320 3144 2030 6f54 6767 656c 6f20 2f6e      SD10 Toggle on/
   109e4:	666f 0066 2020 2048 203d 6854 7369 4820     off.  H = This H
   109f4:	6c65 2070 6150 6567 0000 0000 2020 7053     elp Page....  Sp
   10a04:	6361 2065 6142 2072 203d 6944 7073 616c     ace Bar = Displa
   10a14:	2079 7453 7461 7375 6120 646e 4320 6e6f     y Status and Con
   10a24:	7274 6c6f 7220 6765 0073 0000 2020 2049     trol regs...  I 
   10a34:	203d 6e49 7263 6d65 6e65 2074 654d 7373     = Increment Mess
   10a44:	6761 2065 6e61 2064 7254 6e61 6d73 7469     age and Transmit
   10a54:	202e 7845 6c70 726f 7265 4d20 646f 2065     . Explorer Mode 
   10a64:	2d20 4f20 4c4e 2159 0000 0000 2020 204d      - ONLY!....  M 
   10a74:	203d 6e45 6574 2072 7543 7473 6d6f 4d20     = Enter Custom M
   10a84:	7365 6173 6567 202e 7845 6c70 726f 7265     essage. Explorer
   10a94:	4d20 646f 2065 2d20 4f20 4c4e 2159 0000      Mode  - ONLY!..
   10aa4:	2020 4e45 4554 3d52 5420 6172 736e 696d       ENTER= Transmi
   10ab4:	2074 656e 7478 6d20 7365 6173 6567 202e     t next message. 
   10ac4:	7845 6c70 726f 7265 4d20 646f 2065 2d20     Explorer Mode  -
   10ad4:	4f20 4c4e 2159 0000 7830 0020 7826 3030      ONLY!..0x .&x00
   10ae4:	2030 0000 5854 5020 7261 7469 2079 4e4f     0 ..TX Parity ON
   10af4:	0d0a 003e 5854 5020 7261 7469 2079 464f     ..>.TX Parity OF
   10b04:	0a46 3e0d 0000 0000 4654 494c 2050 6553     F..>....TFLIP Se
   10b14:	0a74 3e0d 0000 0000 4654 494c 2050 6c43     t..>....TFLIP Cl
   10b24:	6165 6572 0a64 3e0d 0000 0000 4552 2d43     eared..>....REC-
   10b34:	2031 4652 494c 2050 6553 0a74 3e0d 0000     1 RFLIP Set..>..
   10b44:	4552 2d43 2031 4652 494c 2050 6c43 6165     REC-1 RFLIP Clea
   10b54:	6572 0a64 3e0d 0000 4552 2d43 2032 4652     red..>..REC-2 RF
   10b64:	494c 2050 6553 0a74 3e0d 0000 4552 2d43     LIP Set..>..REC-
   10b74:	2032 4652 494c 2050 6c43 6165 6572 0a64     2 RFLIP Cleared.
   10b84:	3e0d 0000 4552 2d43 2031 4453 4e4f 532c     .>..REC-1 SDON,S
   10b94:	3944 6120 646e 5320 3144 2030 6553 0a74     D9 and SD10 Set.
   10ba4:	3e0d 0000 4552 2d43 2031 4453 4e4f 532c     .>..REC-1 SDON,S
   10bb4:	3944 6120 646e 5320 3144 2030 6c43 6165     D9 and SD10 Clea
   10bc4:	6572 0a64 3e0d 0000 4552 2d43 2032 4453     red..>..REC-2 SD
   10bd4:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
   10be4:	6553 0a74 3e0d 0000 4552 2d43 2032 4453     Set..>..REC-2 SD
   10bf4:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
   10c04:	6c43 6165 6572 0a64 3e0d 0000 0d0a 500a     Cleared..>.....P
   10c14:	6572 7373 5320 6170 6563 4220 7261 6f20     ress Space Bar o
   10c24:	2072 5753 342d 7420 206f 6572 7573 656d     r SW-4 to resume
   10c34:	0000 0000 614c 6562 736c 2020 2030 202d     ....Labels  0 - 
   10c44:	3336 203a 0020 0000 0020 0000 0d0a 614c     63:  ... .....La
   10c54:	6562 736c 2020 3436 312d 3732 203a 0020     bels  64-127:  .
   10c64:	0d0a 614c 6562 736c 3120 3832 312d 3139     ..Labels 128-191
   10c74:	203a 0020 0d0a 614c 6562 736c 3120 3239     :  ...Labels 192
   10c84:	322d 3535 203a 0020 0d0a 614c 6562 736c     -255:  ...Labels
   10c94:	2020 2030 202d 3336 203a 0020 0d0a 543e       0 - 63:  ...>T
   10ca4:	2058 2020 4420 7461 3a61 0000 614c 6562     X    Data:..Labe
   10cb4:	3a6c 0000 003e 0000 6552 2d63 2031 6144     l:..>...Rec-1 Da
   10cc4:	6174 003a 4c50 2d31 2031 6144 6174 003a     ta:.PL1-1 Data:.
   10cd4:	614d 6374 3a68 0000 4c50 2d31 2032 6144     Match:..PL1-2 Da
   10ce4:	6174 003a 4c50 2d31 2033 6144 6174 003a     ta:.PL1-3 Data:.
   10cf4:	6552 2d63 2032 6144 6174 003a 4c50 2d32     Rec-2 Data:.PL2-
   10d04:	2031 6144 6174 003a 4c50 2d32 2032 6144     1 Data:.PL2-2 Da
   10d14:	6174 003a 4c50 2d32 2033 6144 6174 003a     ta:.PL2-3 Data:.
   10d24:	0d0a 0000 0d0a 7845 6c70 726f 7265 4d20     ......Explorer M
   10d34:	646f 0a65 000d 0000 0d0a 6c20 6261 6c65     ode....... label
   10d44:	2073 6154 6c62 2065 7369 4520 616e 6c62     s Table is Enabl
   10d54:	6465 0000 0d0a 2d0a 2d2d 4220 7475 6f74     ed.....--- Butto
   10d64:	206e 6f43 6d6d 6e61 7364 2d20 2d2d 0000     n Commands ---..
   10d74:	0d0a 2020 7073 6361 6265 7261 7420 206f     ..  spacebar to 
   10d84:	6944 7073 616c 2079 7453 7461 7375 6120     Display Status a
   10d94:	646e 4320 6e6f 7274 6c6f 5220 6765 7369     nd Control Regis
   10da4:	6574 7372 0000 0000 0d0a 2020 4c4f 4445     ters......  OLED
   10db4:	422d 5455 4f54 324e 7420 6172 736e 696d     -BUTTON2 transmi
   10dc4:	2074 6e6f 2065 656d 7373 6761 2065 7266     t one message fr
   10dd4:	6d6f 7420 6172 736e 696d 2074 7562 6666     om transmit buff
   10de4:	7265 0000 0d0a 2020 204c 6f74 5020 6972     er....  L to Pri
   10df4:	746e 4c20 6261 6c65 4d20 6d65 726f 0a79     nt Label Memory.
   10e04:	000d 0000 0d0a 7250 7365 2073 4e45 4554     ......Press ENTE
   10e14:	2052 6f74 5420 6172 736e 696d 2074 726f     R to Transmit or
   10e24:	7520 6573 7420 6568 2820 294d 6320 6d6f      use the (M) com
   10e34:	616d 646e 7420 206f 6e65 6574 2072 2061     mand to enter a 
   10e44:	7563 7473 6d6f 6d20 7365 6173 6567 0000     custom message..
   10e54:	7250 7365 2073 5753 2034 726f 7320 6170     Press SW4 or spa
   10e64:	6563 6162 2072 6f74 6320 6e6f 6974 756e     cebar to continu
   10e74:	0065 0000 7250 7365 2073 7073 6361 6265     e...Press spaceb
   10e84:	7261 7420 206f 6f63 746e 6e69 6575 0000     ar to continue..
   10e94:	0d0a 433e 6d6f 616d 646e 4d20 0000 0000     ..>Command M....
   10ea4:	0d0a 6e45 6574 2072 2033 7962 6574 2073     ..Enter 3 bytes 
   10eb4:	202b 414c 4542 204c 6f74 5420 6172 736e     + LABEL to Trans
   10ec4:	696d 2074 6f66 6c6c 776f 6465 6220 2079     mit followed by 
   10ed4:	4e45 4554 0a52 000d 0d0a 6f54 5420 6172     ENTER.....To Tra
   10ee4:	736e 696d 2c74 6520 746e 7265 3320 6220     nsmit, enter 3 b
   10ef4:	7479 7365 6620 6c6f 6f6c 6577 2064 7962     ytes followed by
   10f04:	6120 4c20 6261 6c65 6220 7479 2065 6f66      a Label byte fo
   10f14:	6c6c 776f 6465 6220 2079 4e45 4554 0a52     llowed by ENTER.
   10f24:	000d 0000 6f46 6d72 7461 203a 6942 7374     ....Format: Bits
   10f34:	3233 322d 2c35 4220 7469 3273 2d34 3731     32-25, Bits24-17
   10f44:	202c 6942 7374 3631 392d 202c 414c 4542     , Bits16-9, LABE
   10f54:	0a4c 3a0d 0000 0000 7845 6d61 6c70 3a65     L..:....Example:
   10f64:	3020 2031 3332 3420 2035 3736 4520 544e      01 23 45 67 ENT
   10f74:	5245 0d0a 003a 0000 5020 6572 7373 5220     ER..:... Press R
   10f84:	5445 5255 004e 0000 5420 6172 736e 696d     ETURN... Transmi
   10f94:	6974 676e 2e2e 002e 5420 6172 736e 696d     ting.... Transmi
   10fa4:	6574 2164 0000 0000 6f43 6d6d 6e61 2064     ted!....Command 
   10fb4:	3a49 4920 636e 6572 656d 746e 6420 7461     I: Increment dat
   10fc4:	0a61 3e0d 0000 0000                         a..>....

00010fcc <_ZTV15ARINC_Interface>:
	...
   10fe0:	0515 0000 03e5 0000 0601 0000 0665 0000     ............e...
   10ff0:	0691 0000                                   ....

00010ff4 <_ZTT15ARINC_Interface>:
   10ff4:	0fe0 0001 1018 0001 1018 0001 0fe0 0001     ................

00011004 <_ZTC15ARINC_Interface0_14Protocol_Class>:
	...
   11018:	0515 0000 03e5 0000 0000 0000 0000 0000     ................
   11028:	1da3 0000 2a2a 2a2a 4c20 6669 2065 7550     ....**** Life Pu
   11038:	736c 2065 6341 6974 6176 6574 2a64 2a2a     lse Activated***
   11048:	002a 0000 0a0d 0000 7469 7320 6f68 6c75     *.......it shoul
   11058:	2064 6f77 6b72 0000 7469 6420 656f 2073     d work..it does 
   11068:	6f77 6b72 0000 0000 2020 7546 636e 6974     work....  Functi
   11078:	6e6f 6620 726f 7420 7365 6974 676e 6120     on for testing a
   11088:	206e 3269 2063 4545 5250 4d4f 0000 0000     n i2c EEPROM....
   11098:	7420 6568 7620 6c61 6575 6f20 206e 6461      the value on ad
   110a8:	7264 7365 3a73 0020 6920 3a73 0020 0000     dress: . is: ...
   110b8:	2d2d 492d 4332 6320 6e6f 656e 7463 6f69     ---I2C connectio
   110c8:	206e 7265 6f72 2172 2d21 2d2d 2d2d 0000     n error!!-----..
   110d8:	5351 4950 5020 6f72 7267 6d61 5320 6174     QSPI Program Sta
   110e8:	7472 6465 0d0a 0000 6c46 7361 2068 7277     rted....Flash wr
   110f8:	7469 2065 7573 6363 7365 6673 6c75 0a20     ite successful .
   11108:	000d 0000 6c46 7361 2068 6572 6461 7320     ....Flash read s
   11118:	6375 6563 7373 7566 0a6c 000d 6c46 7361     uccessful...Flas
   11128:	2068 6164 6174 7620 7265 6669 6369 7461     h data verificat
   11138:	6f69 206e 6166 6c69 6465 0a2e 000d 0000     ion failed......
   11148:	6962 2074 003a 0000 7257 7469 2065 202d     bit :...Write - 
   11158:	6552 6461 6920 2073 7573 6363 7365 6673     Read is successf
   11168:	6c75 6920 206e 5351 4950 4620 616c 6873     ul in QSPI Flash
   11178:	6d20 6d65 726f 2e79 0d0a 0000 2a2a 2a2a      memory.....****
   11188:	2020 6143 656c 646e 7261 5520 6470 7461       Calendar Updat
   11198:	2065 6554 7473 2a2a 002a 0000 6f4d 206e     e Test***...Mon 
   111a8:	754a 206c 3732 3120 3a37 3431 313a 2039     Jul 27 17:14:19 
   111b8:	3032 3032 0000 0000 2a2a 2a2a 616c 7473     2020....****last
   111c8:	6420 7461 2061 6974 656d 003a 7909 6165      data time:..yea
   111d8:	2072 003a 6d09 6e6f 6874 3a20 0000 0000     r :..month :....
   111e8:	6409 7961 203a 0000 6809 756f 2072 003a     .day: ...hour :.
   111f8:	6d09 6e69 3a20 0000 7309 6365 203a 0000     .min :...sec: ..
   11208:	2a2a 7563 7272 6e65 2074 6164 6174 7420     **current data t
   11218:	6d69 3a65 0000 0000                         ime:....

00011220 <_ZTV14Calendar_Class>:
	...
   11228:	1295 0000 12e5 0000                         ........

00011230 <_ZTV17DateTimeLog_Class>:
	...
   11238:	1da3 0000 1da3 0000                         ........

00011240 <_ZTV9CDC_Class>:
	...
   11248:	1b25 0000 1be9 0000 17cd 0000 1aed 0000     %...............
   11258:	1c71 0000 1ab1 0000 1a21 0000 1a71 0000     q.......!...q...
   11268:	1b0d 0000 1b5d 0000                         ....]...

00011270 <_ZTV6Stream>:
	...
   11278:	1da3 0000 1e09 0000 17cd 0000 17e1 0000     ................
   11288:	1da3 0000 1da3 0000 1da3 0000 7830 2e25     ............0x%.
   11298:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   112a8:	766f 0066                                   ovf.

000112ac <_ZTV5Print>:
	...
   112b4:	1da3 0000 1e09 0000 17cd 0000 17e1 0000     ................
   112c4:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
   112d4:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
   112e4:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
   112f4:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
   11304:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
   11314:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   11324:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
   11334:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   11344:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
   11354:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   11364:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
   11374:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.
   11384:	2e2e 682f 6c61 732f 6372 682f 6c61 705f     ../hal/src/hal_p
   11394:	6d77 632e 0000 0000 2e2e 682f 6c61 732f     wm.c....../hal/s
   113a4:	6372 682f 6c61 715f 7073 5f69 7973 636e     rc/hal_qspi_sync
   113b4:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   113c4:	6c61 735f 6970 6d5f 615f 7973 636e 632e     al_spi_m_async.c
   113d4:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   113e4:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
   113f4:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
   11404:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
   11414:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
   11424:	7369 2e74 0063 0000                         ist.c...

0001142c <_map>:
   1142c:	0004 0000 0004 0000 0005 0000 0005 0000     ................
   1143c:	0006 0000 0056 0000 0007 0000 0057 0000     ....V.......W...
   1144c:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
   1145c:	6369 632e 0000 0000                         ic.c....

00011464 <user_mux_confs>:
   11464:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

000114a8 <channel_confs>:
   114a8:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

000114e8 <interrupt_cfg>:
	...
   11568:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   11578:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   11588:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   11598:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   115a8:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   115b8:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   115c8:	0400 4300 0800 4300 0c00 4300               ...C...C...C

000115d4 <sercomspi_regs>:
   115d4:	000c 0020 0000 0002 0000 0000 004f 01ff     .. .........O...
   115e4:	0c04 3000 0000 0200 0000 0000 4f00 ff00     ...0.........O..
   115f4:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   11604:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   11614:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   11624:	1400 4300 1800 4300                         ...C...C

0001162c <_usb_ep_cfgs>:
   1162c:	1cdc 2000 0000 0000 0040 0000 1d1c 2000     ... ....@...... 
   1163c:	1d5c 2000 0040 0040 1d9c 2000 1ddc 2000     \.. @.@.... ... 
   1164c:	0040 0040 1e1c 2000 1e5c 2000 0040 0040     @.@.... \.. @.@.
   1165c:	1e9c 2000 1edc 2000 0040 0040 0804 0000     ... ... @.@.....
   1166c:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   1167c:	6c70 775f 7464 632e 0000 0000               pl_wdt.c....

00011688 <n25q256a_interface>:
   11688:	c6f9 0000 c79d 0000 c8ad 0000 ca65 0000     ............e...
   11698:	caf5 0000 2e2e 682f 6c70 702f 726f 2f74     ....../hpl/port/
   116a8:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   116b8:	2e2e 752f 6273 642f 7665 6369 2f65 7375     ../usb/device/us
   116c8:	6462 2e63 0063 0000 6f70 0077 0000 0000     bdc.c...pow.....

000116d8 <TWO52>:
   116d8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000116e8 <_global_impure_ptr>:
   116e8:	0120 2000                                    .. 

000116ec <_init>:
   116ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116ee:	bf00      	nop
   116f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   116f2:	bc08      	pop	{r3}
   116f4:	469e      	mov	lr, r3
   116f6:	4770      	bx	lr

000116f8 <__init_array_start>:
   116f8:	00010561 	.word	0x00010561

000116fc <__frame_dummy_init_array_entry>:
   116fc:	00000289 00000355 00000739 000008bd     ....U...9.......
   1170c:	000009d1 00000c71 00001181 0000121d     ....q...........
   1171c:	00001531 00001795 00001d69              1.......i...

00011728 <_fini>:
   11728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1172a:	bf00      	nop
   1172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1172e:	bc08      	pop	{r3}
   11730:	469e      	mov	lr, r3
   11732:	4770      	bx	lr

00011734 <__fini_array_start>:
   11734:	00000265 	.word	0x00000265
