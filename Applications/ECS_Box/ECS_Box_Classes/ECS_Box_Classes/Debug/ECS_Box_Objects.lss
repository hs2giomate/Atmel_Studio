
ECS_Box_Objects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012d6c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012d6c  00012d6c  00022d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000058c  20000000  00012d74  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003058c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003058c  2**0
                  CONTENTS
  5 .bss          000023d8  20000590  00013308  00030590  2**3
                  ALLOC
  6 .stack        00010000  20002968  000156e0  00030590  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003058c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000305ba  2**0
                  CONTENTS, READONLY
  9 .debug_info   0008eb19  00000000  00000000  00030613  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000d4a9  00000000  00000000  000bf12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000223a7  00000000  00000000  000cc5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003d40  00000000  00000000  000ee97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000038e8  00000000  00000000  000f26bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00055d78  00000000  00000000  000f5fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004acc2  00000000  00000000  0014bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00143efa  00000000  00000000  001969de  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00010558  00000000  00000000  002da8d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 29 01 20 b9 07 00 00 3d 08 00 00 3d 08 00 00     h). ....=...=...
      10:	3d 08 00 00 3d 08 00 00 3d 08 00 00 00 00 00 00     =...=...=.......
	...
      2c:	3d 08 00 00 3d 08 00 00 00 00 00 00 3d 08 00 00     =...=.......=...
      3c:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      4c:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      5c:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      6c:	9d 83 00 00 8d 71 00 00 3d 08 00 00 3d 08 00 00     .....q..=...=...
      7c:	3d 08 00 00 9d 71 00 00 ad 71 00 00 bd 71 00 00     =....q...q...q..
      8c:	cd 71 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     .q..=...=...=...
      9c:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      ac:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      bc:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      cc:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      dc:	3d 08 00 00 3d 08 00 00 3d 08 00 00 00 00 00 00     =...=...=.......
	...
      f4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     104:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     114:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     124:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     134:	3d 08 00 00 c9 9a 00 00 e5 9a 00 00 01 9b 00 00     =...............
     144:	1d 9b 00 00 39 9b 00 00 55 9b 00 00 71 9b 00 00     ....9...U...q...
     154:	8d 9b 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     ....=...=...=...
     164:	3d 08 00 00 a9 9b 00 00 c5 9b 00 00 e1 9b 00 00     =...............
     174:	fd 9b 00 00 3d 08 00 00 1d 66 00 00 c5 d5 00 00     ....=....f......
     184:	d5 d5 00 00 e5 d5 00 00 f5 d5 00 00 3d 08 00 00     ............=...
     194:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1a4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1b4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1c4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1d4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1e4:	3d 08 00 00 3d 08 00 00 91 ac 00 00 ad ac 00 00     =...=...........
     1f4:	c9 ac 00 00 e5 ac 00 00 01 ad 00 00 1d ad 00 00     ................
     204:	3d 08 00 00 39 ad 00 00 3d 08 00 00 3d 08 00 00     =...9...=...=...
     214:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     224:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     234:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     244:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     254:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000590 	.word	0x20000590
     280:	00000000 	.word	0x00000000
     284:	00012d74 	.word	0x00012d74

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00012d74 	.word	0x00012d74
     2c4:	20000594 	.word	0x20000594
     2c8:	00012d74 	.word	0x00012d74
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
{
} //AMMC_Class
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	4618      	mov	r0, r3
     2dc:	370c      	adds	r7, #12
     2de:	46bd      	mov	sp, r7
     2e0:	bc80      	pop	{r7}
     2e2:	4770      	bx	lr

000002e4 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     2e4:	b480      	push	{r7}
     2e6:	b083      	sub	sp, #12
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
{
} //~AMMC_Class
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	4618      	mov	r0, r3
     2f0:	370c      	adds	r7, #12
     2f2:	46bd      	mov	sp, r7
     2f4:	bc80      	pop	{r7}
     2f6:	4770      	bx	lr

000002f8 <_Z41__static_initialization_and_destruction_0ii>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
     300:	6039      	str	r1, [r7, #0]
     302:	687b      	ldr	r3, [r7, #4]
     304:	2b01      	cmp	r3, #1
     306:	d114      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     30e:	4293      	cmp	r3, r2
     310:	d10f      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     312:	480a      	ldr	r0, [pc, #40]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     314:	4b0a      	ldr	r3, [pc, #40]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     316:	4798      	blx	r3
     318:	4a0a      	ldr	r2, [pc, #40]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     31a:	490b      	ldr	r1, [pc, #44]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     31c:	4807      	ldr	r0, [pc, #28]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     320:	4798      	blx	r3
AMMC_Class	ammc2;
     322:	480b      	ldr	r0, [pc, #44]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     326:	4798      	blx	r3
     328:	4a06      	ldr	r2, [pc, #24]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     32a:	4907      	ldr	r1, [pc, #28]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     32c:	4808      	ldr	r0, [pc, #32]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     32e:	4b07      	ldr	r3, [pc, #28]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     330:	4798      	blx	r3
     332:	bf00      	nop
     334:	3708      	adds	r7, #8
     336:	46bd      	mov	sp, r7
     338:	bd80      	pop	{r7, pc}
     33a:	bf00      	nop
     33c:	200005ac 	.word	0x200005ac
     340:	000002d1 	.word	0x000002d1
     344:	20000000 	.word	0x20000000
     348:	000002e5 	.word	0x000002e5
     34c:	0000fc55 	.word	0x0000fc55
     350:	200005b0 	.word	0x200005b0

00000354 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     354:	b580      	push	{r7, lr}
     356:	af00      	add	r7, sp, #0
     358:	f64f 71ff 	movw	r1, #65535	; 0xffff
     35c:	2001      	movs	r0, #1
     35e:	4b01      	ldr	r3, [pc, #4]	; (364 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     360:	4798      	blx	r3
     362:	bd80      	pop	{r7, pc}
     364:	000002f9 	.word	0x000002f9

00000368 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
     370:	4a04      	ldr	r2, [pc, #16]	; (384 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
     372:	687b      	ldr	r3, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
     376:	687b      	ldr	r3, [r7, #4]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	bc80      	pop	{r7}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	00011b44 	.word	0x00011b44

00000388 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
     390:	4a04      	ldr	r2, [pc, #16]	; (3a4 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
     392:	687b      	ldr	r3, [r7, #4]
     394:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
     396:	687b      	ldr	r3, [r7, #4]
     398:	4618      	mov	r0, r3
     39a:	370c      	adds	r7, #12
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	00011b44 	.word	0x00011b44

000003a8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
     3a8:	b5b0      	push	{r4, r5, r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     3b2:	4b0a      	ldr	r3, [pc, #40]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	4798      	blx	r3
     3b8:	4604      	mov	r4, r0
     3ba:	460d      	mov	r5, r1
     3bc:	4b07      	ldr	r3, [pc, #28]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3be:	6838      	ldr	r0, [r7, #0]
     3c0:	4798      	blx	r3
     3c2:	4602      	mov	r2, r0
     3c4:	460b      	mov	r3, r1
     3c6:	4620      	mov	r0, r4
     3c8:	4629      	mov	r1, r5
     3ca:	4c05      	ldr	r4, [pc, #20]	; (3e0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
     3cc:	47a0      	blx	r4
     3ce:	4603      	mov	r3, r0
     3d0:	460c      	mov	r4, r1
    }
     3d2:	4618      	mov	r0, r3
     3d4:	4621      	mov	r1, r4
     3d6:	3708      	adds	r7, #8
     3d8:	46bd      	mov	sp, r7
     3da:	bdb0      	pop	{r4, r5, r7, pc}
     3dc:	00011051 	.word	0x00011051
     3e0:	0000fc65 	.word	0x0000fc65

000003e4 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
     3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3e8:	b085      	sub	sp, #20
     3ea:	af00      	add	r7, sp, #0
     3ec:	6078      	str	r0, [r7, #4]
     3ee:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
     3f0:	2300      	movs	r3, #0
     3f2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     3f4:	2300      	movs	r3, #0
     3f6:	73bb      	strb	r3, [r7, #14]
     3f8:	7bbb      	ldrb	r3, [r7, #14]
     3fa:	2b02      	cmp	r3, #2
     3fc:	d86d      	bhi.n	4da <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
     3fe:	7bbb      	ldrb	r3, [r7, #14]
     400:	f1c3 0402 	rsb	r4, r3, #2
     404:	4b3c      	ldr	r3, [pc, #240]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     406:	6838      	ldr	r0, [r7, #0]
     408:	4798      	blx	r3
     40a:	4680      	mov	r8, r0
     40c:	4689      	mov	r9, r1
     40e:	7bbb      	ldrb	r3, [r7, #14]
     410:	f1c3 0302 	rsb	r3, r3, #2
     414:	4619      	mov	r1, r3
     416:	200a      	movs	r0, #10
     418:	4b38      	ldr	r3, [pc, #224]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     41a:	4798      	blx	r3
     41c:	4602      	mov	r2, r0
     41e:	460b      	mov	r3, r1
     420:	4d37      	ldr	r5, [pc, #220]	; (500 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
     422:	4640      	mov	r0, r8
     424:	4649      	mov	r1, r9
     426:	47a8      	blx	r5
     428:	4602      	mov	r2, r0
     42a:	460b      	mov	r3, r1
     42c:	4611      	mov	r1, r2
     42e:	461a      	mov	r2, r3
     430:	4b34      	ldr	r3, [pc, #208]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     432:	4608      	mov	r0, r1
     434:	4611      	mov	r1, r2
     436:	4798      	blx	r3
     438:	4603      	mov	r3, r0
     43a:	b2da      	uxtb	r2, r3
     43c:	f107 0310 	add.w	r3, r7, #16
     440:	4423      	add	r3, r4
     442:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
     446:	7bbb      	ldrb	r3, [r7, #14]
     448:	f1c3 0302 	rsb	r3, r3, #2
     44c:	f107 0210 	add.w	r2, r7, #16
     450:	4413      	add	r3, r2
     452:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     456:	461a      	mov	r2, r3
     458:	4b2b      	ldr	r3, [pc, #172]	; (508 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
     45a:	4610      	mov	r0, r2
     45c:	4798      	blx	r3
     45e:	4605      	mov	r5, r0
     460:	460e      	mov	r6, r1
     462:	7bbb      	ldrb	r3, [r7, #14]
     464:	f1c3 0302 	rsb	r3, r3, #2
     468:	4619      	mov	r1, r3
     46a:	200a      	movs	r0, #10
     46c:	4b23      	ldr	r3, [pc, #140]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     46e:	4798      	blx	r3
     470:	4602      	mov	r2, r0
     472:	460b      	mov	r3, r1
     474:	4c25      	ldr	r4, [pc, #148]	; (50c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
     476:	4628      	mov	r0, r5
     478:	4631      	mov	r1, r6
     47a:	47a0      	blx	r4
     47c:	4603      	mov	r3, r0
     47e:	460c      	mov	r4, r1
     480:	461d      	mov	r5, r3
     482:	4626      	mov	r6, r4
     484:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     486:	6838      	ldr	r0, [r7, #0]
     488:	4798      	blx	r3
     48a:	4c21      	ldr	r4, [pc, #132]	; (510 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
     48c:	462a      	mov	r2, r5
     48e:	4633      	mov	r3, r6
     490:	47a0      	blx	r4
     492:	4603      	mov	r3, r0
     494:	460c      	mov	r4, r1
     496:	4619      	mov	r1, r3
     498:	4622      	mov	r2, r4
     49a:	4b1a      	ldr	r3, [pc, #104]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     49c:	4608      	mov	r0, r1
     49e:	4611      	mov	r1, r2
     4a0:	4798      	blx	r3
     4a2:	4603      	mov	r3, r0
     4a4:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
     4a6:	7bbb      	ldrb	r3, [r7, #14]
     4a8:	f1c3 0302 	rsb	r3, r3, #2
     4ac:	f107 0210 	add.w	r2, r7, #16
     4b0:	4413      	add	r3, r2
     4b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     4b6:	461a      	mov	r2, r3
     4b8:	7bbb      	ldrb	r3, [r7, #14]
     4ba:	4619      	mov	r1, r3
     4bc:	009b      	lsls	r3, r3, #2
     4be:	1acb      	subs	r3, r1, r3
     4c0:	3306      	adds	r3, #6
     4c2:	fa02 f303 	lsl.w	r3, r2, r3
     4c6:	b25a      	sxtb	r2, r3
     4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
     4cc:	4313      	orrs	r3, r2
     4ce:	b25b      	sxtb	r3, r3
     4d0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     4d2:	7bbb      	ldrb	r3, [r7, #14]
     4d4:	3301      	adds	r3, #1
     4d6:	73bb      	strb	r3, [r7, #14]
     4d8:	e78e      	b.n	3f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	7bfa      	ldrb	r2, [r7, #15]
     4e2:	4611      	mov	r1, r2
     4e4:	6878      	ldr	r0, [r7, #4]
     4e6:	4798      	blx	r3
     4e8:	4603      	mov	r3, r0
     4ea:	73fb      	strb	r3, [r7, #15]
	return result;
     4ec:	7bfb      	ldrb	r3, [r7, #15]
	
}
     4ee:	4618      	mov	r0, r3
     4f0:	3714      	adds	r7, #20
     4f2:	46bd      	mov	sp, r7
     4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4f8:	00011031 	.word	0x00011031
     4fc:	000003a9 	.word	0x000003a9
     500:	00011371 	.word	0x00011371
     504:	0001167d 	.word	0x0001167d
     508:	00011051 	.word	0x00011051
     50c:	0001111d 	.word	0x0001111d
     510:	00010db5 	.word	0x00010db5

00000514 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
     514:	b480      	push	{r7}
     516:	b085      	sub	sp, #20
     518:	af00      	add	r7, sp, #0
     51a:	6078      	str	r0, [r7, #4]
     51c:	460b      	mov	r3, r1
     51e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
     520:	2300      	movs	r3, #0
     522:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     524:	2300      	movs	r3, #0
     526:	60bb      	str	r3, [r7, #8]
     528:	68bb      	ldr	r3, [r7, #8]
     52a:	2b07      	cmp	r3, #7
     52c:	dc13      	bgt.n	556 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
     52e:	7bfb      	ldrb	r3, [r7, #15]
     530:	005b      	lsls	r3, r3, #1
     532:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
     534:	78fa      	ldrb	r2, [r7, #3]
     536:	68bb      	ldr	r3, [r7, #8]
     538:	fa42 f303 	asr.w	r3, r2, r3
     53c:	b25b      	sxtb	r3, r3
     53e:	f003 0301 	and.w	r3, r3, #1
     542:	b25a      	sxtb	r2, r3
     544:	f997 300f 	ldrsb.w	r3, [r7, #15]
     548:	4313      	orrs	r3, r2
     54a:	b25b      	sxtb	r3, r3
     54c:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     54e:	68bb      	ldr	r3, [r7, #8]
     550:	3301      	adds	r3, #1
     552:	60bb      	str	r3, [r7, #8]
     554:	e7e8      	b.n	528 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
     556:	7bfb      	ldrb	r3, [r7, #15]
}
     558:	4618      	mov	r0, r3
     55a:	3714      	adds	r7, #20
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr

00000562 <_ZN14Protocol_ClassC2Ev>:
		{
				ch=0xff;
			usb.println("Command I: Increment data\n\r>");
			BigCounter.Word32++;
			TXBuffer[0] = BigCounter.PayLoad[1];
			TXBuffer[1] = BigCounter.PayLoad[2];
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
			TXBuffer[2] = BigCounter.PayLoad[3];
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
     56a:	6039      	str	r1, [r7, #0]
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	681a      	ldr	r2, [r3, #0]
			TXBuffer[3] = BigCounter.PayLoad[3];               // copy the LSB to the label for testing purposes
     570:	687b      	ldr	r3, [r7, #4]
     572:	601a      	str	r2, [r3, #0]
     574:	687b      	ldr	r3, [r7, #4]
     576:	681b      	ldr	r3, [r3, #0]
     578:	3b0c      	subs	r3, #12
			
			cpu_irq_disable();
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	461a      	mov	r2, r3
     57e:	687b      	ldr	r3, [r7, #4]
			HI3593.TransmitCommandAndData(TXFIFO,TXBuffer);
     580:	4413      	add	r3, r2
     582:	683a      	ldr	r2, [r7, #0]
     584:	6852      	ldr	r2, [r2, #4]
     586:	601a      	str	r2, [r3, #0]
     588:	687b      	ldr	r3, [r7, #4]
     58a:	4618      	mov	r0, r3
     58c:	370c      	adds	r7, #12
     58e:	46bd      	mov	sp, r7
     590:	bc80      	pop	{r7}
			cpu_irq_enable();
     592:	4770      	bx	lr

00000594 <_ZN15ARINC_InterfaceC1Ev>:
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
			printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	f503 7340 	add.w	r3, r3, #768	; 0x300
     5a2:	4618      	mov	r0, r3
			//PORTT= ~TXBuffer[3];                               // show the transmitted upper nibble of the LSB
		}
		
		
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
     5a4:	4b0e      	ldr	r3, [pc, #56]	; (5e0 <_ZN15ARINC_InterfaceC1Ev+0x4c>)
     5a6:	4798      	blx	r3
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	4a0e      	ldr	r2, [pc, #56]	; (5e4 <_ZN15ARINC_InterfaceC1Ev+0x50>)
     5ac:	4611      	mov	r1, r2
     5ae:	4618      	mov	r0, r3
     5b0:	4b0d      	ldr	r3, [pc, #52]	; (5e8 <_ZN15ARINC_InterfaceC1Ev+0x54>)
     5b2:	4798      	blx	r3
     5b4:	4a0d      	ldr	r2, [pc, #52]	; (5ec <_ZN15ARINC_InterfaceC1Ev+0x58>)
     5b6:	687b      	ldr	r3, [r7, #4]
		
		if (newMessageR1)
     5b8:	601a      	str	r2, [r3, #0]
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
     5c0:	4a0b      	ldr	r2, [pc, #44]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
     5c2:	601a      	str	r2, [r3, #0]
		{
			reading=ReadArincBuffer();
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
     5ca:	4618      	mov	r0, r3
			newMessageR1=false;
     5cc:	4b09      	ldr	r3, [pc, #36]	; (5f4 <_ZN15ARINC_InterfaceC1Ev+0x60>)
     5ce:	4798      	blx	r3
     5d0:	4a09      	ldr	r2, [pc, #36]	; (5f8 <_ZN15ARINC_InterfaceC1Ev+0x64>)
		}
	}
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	6013      	str	r3, [r2, #0]
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	4618      	mov	r0, r3
     5da:	3708      	adds	r7, #8
     5dc:	46bd      	mov	sp, r7
     5de:	bd80      	pop	{r7, pc}
     5e0:	00000369 	.word	0x00000369
     5e4:	000125c4 	.word	0x000125c4
     5e8:	00000563 	.word	0x00000563
     5ec:	0001259c 	.word	0x0001259c
     5f0:	000125b8 	.word	0x000125b8
     5f4:	00000745 	.word	0x00000745
     5f8:	200005b8 	.word	0x200005b8

000005fc <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
     5fc:	b580      	push	{r7, lr}
     5fe:	b082      	sub	sp, #8
     600:	af00      	add	r7, sp, #0
     602:	6078      	str	r0, [r7, #4]
     604:	4a0f      	ldr	r2, [pc, #60]	; (644 <_ZN15ARINC_InterfaceD1Ev+0x48>)
     606:	687b      	ldr	r3, [r7, #4]
     608:	601a      	str	r2, [r3, #0]
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	f503 7340 	add.w	r3, r3, #768	; 0x300
     610:	4a0d      	ldr	r2, [pc, #52]	; (648 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     612:	601a      	str	r2, [r3, #0]
     614:	687b      	ldr	r3, [r7, #4]
     616:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
     61a:	4618      	mov	r0, r3
     61c:	4b0b      	ldr	r3, [pc, #44]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x50>)
     61e:	4798      	blx	r3
     620:	687b      	ldr	r3, [r7, #4]
     622:	4a0b      	ldr	r2, [pc, #44]	; (650 <_ZN15ARINC_InterfaceD1Ev+0x54>)
     624:	4611      	mov	r1, r2
     626:	4618      	mov	r0, r3
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <_ZN15ARINC_InterfaceD1Ev+0x58>)
     62a:	4798      	blx	r3
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	f503 7340 	add.w	r3, r3, #768	; 0x300
     632:	4618      	mov	r0, r3
     634:	4b08      	ldr	r3, [pc, #32]	; (658 <_ZN15ARINC_InterfaceD1Ev+0x5c>)
     636:	4798      	blx	r3
} //~ARINC_Interface
     638:	687b      	ldr	r3, [r7, #4]
     63a:	4618      	mov	r0, r3
     63c:	3708      	adds	r7, #8
     63e:	46bd      	mov	sp, r7
     640:	bd80      	pop	{r7, pc}
     642:	bf00      	nop
     644:	0001259c 	.word	0x0001259c
     648:	000125b8 	.word	0x000125b8
     64c:	00000765 	.word	0x00000765
     650:	000125c4 	.word	0x000125c4
     654:	00000785 	.word	0x00000785
     658:	00000389 	.word	0x00000389

0000065c <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
     65c:	b580      	push	{r7, lr}
     65e:	b082      	sub	sp, #8
     660:	af00      	add	r7, sp, #0
     662:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
     664:	6878      	ldr	r0, [r7, #4]
     666:	4b06      	ldr	r3, [pc, #24]	; (680 <_ZN15ARINC_InterfaceD0Ev+0x24>)
     668:	4798      	blx	r3
     66a:	f44f 7143 	mov.w	r1, #780	; 0x30c
     66e:	6878      	ldr	r0, [r7, #4]
     670:	4b04      	ldr	r3, [pc, #16]	; (684 <_ZN15ARINC_InterfaceD0Ev+0x28>)
     672:	4798      	blx	r3
     674:	687b      	ldr	r3, [r7, #4]
     676:	4618      	mov	r0, r3
     678:	3708      	adds	r7, #8
     67a:	46bd      	mov	sp, r7
     67c:	bd80      	pop	{r7, pc}
     67e:	bf00      	nop
     680:	000005fd 	.word	0x000005fd
     684:	0000fc61 	.word	0x0000fc61

00000688 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
     688:	b480      	push	{r7}
     68a:	b085      	sub	sp, #20
     68c:	af00      	add	r7, sp, #0
     68e:	6078      	str	r0, [r7, #4]
     690:	460b      	mov	r3, r1
     692:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     694:	2300      	movs	r3, #0
     696:	73fb      	strb	r3, [r7, #15]
     698:	7bfb      	ldrb	r3, [r7, #15]
     69a:	2b3f      	cmp	r3, #63	; 0x3f
     69c:	dc1e      	bgt.n	6dc <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
     6a4:	7bfb      	ldrb	r3, [r7, #15]
     6a6:	4413      	add	r3, r2
     6a8:	b2db      	uxtb	r3, r3
     6aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     6ae:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
     6b0:	7bbb      	ldrb	r3, [r7, #14]
     6b2:	687a      	ldr	r2, [r7, #4]
     6b4:	009b      	lsls	r3, r3, #2
     6b6:	4413      	add	r3, r2
     6b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
     6bc:	78fa      	ldrb	r2, [r7, #3]
     6be:	429a      	cmp	r2, r3
     6c0:	d108      	bne.n	6d4 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
			data=(uint32_t*)receiverBuffer[j];
     6c2:	7bbb      	ldrb	r3, [r7, #14]
     6c4:	3310      	adds	r3, #16
     6c6:	009b      	lsls	r3, r3, #2
     6c8:	687a      	ldr	r2, [r7, #4]
     6ca:	4413      	add	r3, r2
     6cc:	60bb      	str	r3, [r7, #8]
			return *data;
     6ce:	68bb      	ldr	r3, [r7, #8]
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	e004      	b.n	6de <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     6d4:	7bfb      	ldrb	r3, [r7, #15]
     6d6:	3301      	adds	r3, #1
     6d8:	73fb      	strb	r3, [r7, #15]
     6da:	e7dd      	b.n	698 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
	return 0;
     6dc:	2300      	movs	r3, #0
}
     6de:	4618      	mov	r0, r3
     6e0:	3714      	adds	r7, #20
     6e2:	46bd      	mov	sp, r7
     6e4:	bc80      	pop	{r7}
     6e6:	4770      	bx	lr

000006e8 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

     6e8:	b580      	push	{r7, lr}
     6ea:	b082      	sub	sp, #8
     6ec:	af00      	add	r7, sp, #0
     6ee:	6078      	str	r0, [r7, #4]
     6f0:	6039      	str	r1, [r7, #0]
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	2b01      	cmp	r3, #1
     6f6:	d10c      	bne.n	712 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     6f8:	683b      	ldr	r3, [r7, #0]
     6fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
     6fe:	4293      	cmp	r3, r2
     700:	d107      	bne.n	712 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     702:	4806      	ldr	r0, [pc, #24]	; (71c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     704:	4b06      	ldr	r3, [pc, #24]	; (720 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     706:	4798      	blx	r3
     708:	4a06      	ldr	r2, [pc, #24]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     70a:	4907      	ldr	r1, [pc, #28]	; (728 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     70c:	4803      	ldr	r0, [pc, #12]	; (71c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     70e:	4b07      	ldr	r3, [pc, #28]	; (72c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     710:	4798      	blx	r3
     712:	bf00      	nop
     714:	3708      	adds	r7, #8
     716:	46bd      	mov	sp, r7
     718:	bd80      	pop	{r7, pc}
     71a:	bf00      	nop
     71c:	200005bc 	.word	0x200005bc
     720:	00000595 	.word	0x00000595
     724:	20000000 	.word	0x20000000
     728:	000005fd 	.word	0x000005fd
     72c:	0000fc55 	.word	0x0000fc55

00000730 <_GLOBAL__sub_I_HexSymbols>:
     730:	b580      	push	{r7, lr}
     732:	af00      	add	r7, sp, #0
     734:	f64f 71ff 	movw	r1, #65535	; 0xffff
     738:	2001      	movs	r0, #1
     73a:	4b01      	ldr	r3, [pc, #4]	; (740 <_GLOBAL__sub_I_HexSymbols+0x10>)
     73c:	4798      	blx	r3
     73e:	bd80      	pop	{r7, pc}
     740:	000006e9 	.word	0x000006e9

00000744 <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
     744:	b580      	push	{r7, lr}
     746:	b082      	sub	sp, #8
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	4618      	mov	r0, r3
     750:	4b03      	ldr	r3, [pc, #12]	; (760 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
     752:	4798      	blx	r3
{
} //Holt_3593_Class
     754:	687b      	ldr	r3, [r7, #4]
     756:	4618      	mov	r0, r3
     758:	3708      	adds	r7, #8
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}
     75e:	bf00      	nop
     760:	00001691 	.word	0x00001691

00000764 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
     764:	b580      	push	{r7, lr}
     766:	b082      	sub	sp, #8
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	4618      	mov	r0, r3
     770:	4b03      	ldr	r3, [pc, #12]	; (780 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
     772:	4798      	blx	r3
{
} //~Holt_3593_Class
     774:	687b      	ldr	r3, [r7, #4]
     776:	4618      	mov	r0, r3
     778:	3708      	adds	r7, #8
     77a:	46bd      	mov	sp, r7
     77c:	bd80      	pop	{r7, pc}
     77e:	bf00      	nop
     780:	000016b1 	.word	0x000016b1

00000784 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
     784:	b480      	push	{r7}
     786:	b083      	sub	sp, #12
     788:	af00      	add	r7, sp, #0
     78a:	6078      	str	r0, [r7, #4]
     78c:	6039      	str	r1, [r7, #0]
     78e:	683b      	ldr	r3, [r7, #0]
     790:	681a      	ldr	r2, [r3, #0]
     792:	687b      	ldr	r3, [r7, #4]
     794:	601a      	str	r2, [r3, #0]
     796:	687b      	ldr	r3, [r7, #4]
     798:	681b      	ldr	r3, [r3, #0]
     79a:	3b0c      	subs	r3, #12
     79c:	681b      	ldr	r3, [r3, #0]
     79e:	461a      	mov	r2, r3
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	4413      	add	r3, r2
     7a4:	683a      	ldr	r2, [r7, #0]
     7a6:	6852      	ldr	r2, [r2, #4]
     7a8:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	4618      	mov	r0, r3
     7ae:	370c      	adds	r7, #12
     7b0:	46bd      	mov	sp, r7
     7b2:	bc80      	pop	{r7}
     7b4:	4770      	bx	lr
	...

000007b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     7b8:	b580      	push	{r7, lr}
     7ba:	b082      	sub	sp, #8
     7bc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     7be:	4b16      	ldr	r3, [pc, #88]	; (818 <Reset_Handler+0x60>)
     7c0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     7c2:	4b16      	ldr	r3, [pc, #88]	; (81c <Reset_Handler+0x64>)
     7c4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     7c6:	687a      	ldr	r2, [r7, #4]
     7c8:	683b      	ldr	r3, [r7, #0]
     7ca:	429a      	cmp	r2, r3
     7cc:	d00c      	beq.n	7e8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     7ce:	e007      	b.n	7e0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	1d1a      	adds	r2, r3, #4
     7d4:	603a      	str	r2, [r7, #0]
     7d6:	687a      	ldr	r2, [r7, #4]
     7d8:	1d11      	adds	r1, r2, #4
     7da:	6079      	str	r1, [r7, #4]
     7dc:	6812      	ldr	r2, [r2, #0]
     7de:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     7e0:	683b      	ldr	r3, [r7, #0]
     7e2:	4a0f      	ldr	r2, [pc, #60]	; (820 <Reset_Handler+0x68>)
     7e4:	4293      	cmp	r3, r2
     7e6:	d3f3      	bcc.n	7d0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7e8:	4b0e      	ldr	r3, [pc, #56]	; (824 <Reset_Handler+0x6c>)
     7ea:	603b      	str	r3, [r7, #0]
     7ec:	e004      	b.n	7f8 <Reset_Handler+0x40>
                *pDest++ = 0;
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	1d1a      	adds	r2, r3, #4
     7f2:	603a      	str	r2, [r7, #0]
     7f4:	2200      	movs	r2, #0
     7f6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     7f8:	683b      	ldr	r3, [r7, #0]
     7fa:	4a0b      	ldr	r2, [pc, #44]	; (828 <Reset_Handler+0x70>)
     7fc:	4293      	cmp	r3, r2
     7fe:	d3f6      	bcc.n	7ee <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <Reset_Handler+0x74>)
     802:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     804:	4a0a      	ldr	r2, [pc, #40]	; (830 <Reset_Handler+0x78>)
     806:	687b      	ldr	r3, [r7, #4]
     808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     80c:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     80e:	4b09      	ldr	r3, [pc, #36]	; (834 <Reset_Handler+0x7c>)
     810:	4798      	blx	r3

        /* Branch to main function */
        main();
     812:	4b09      	ldr	r3, [pc, #36]	; (838 <Reset_Handler+0x80>)
     814:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     816:	e7fe      	b.n	816 <Reset_Handler+0x5e>
     818:	00012d74 	.word	0x00012d74
     81c:	20000000 	.word	0x20000000
     820:	2000058c 	.word	0x2000058c
     824:	20000590 	.word	0x20000590
     828:	20002968 	.word	0x20002968
     82c:	00000000 	.word	0x00000000
     830:	e000ed00 	.word	0xe000ed00
     834:	000116f1 	.word	0x000116f1
     838:	00001535 	.word	0x00001535

0000083c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     83c:	b480      	push	{r7}
     83e:	af00      	add	r7, sp, #0
        while (1) {
     840:	e7fe      	b.n	840 <Dummy_Handler+0x4>

00000842 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
     842:	b480      	push	{r7}
     844:	b083      	sub	sp, #12
     846:	af00      	add	r7, sp, #0
     848:	6078      	str	r0, [r7, #4]
    return (void *)0;
     84a:	2300      	movs	r3, #0
	}
     84c:	4618      	mov	r0, r3
     84e:	370c      	adds	r7, #12
     850:	46bd      	mov	sp, r7
     852:	bc80      	pop	{r7}
     854:	4770      	bx	lr

00000856 <free>:
//............................................................................
extern "C" void free(void *)
	{
     856:	b480      	push	{r7}
     858:	b083      	sub	sp, #12
     85a:	af00      	add	r7, sp, #0
     85c:	6078      	str	r0, [r7, #4]
	}
     85e:	bf00      	nop
     860:	370c      	adds	r7, #12
     862:	46bd      	mov	sp, r7
     864:	bc80      	pop	{r7}
     866:	4770      	bx	lr

00000868 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
     868:	b480      	push	{r7}
     86a:	af00      	add	r7, sp, #0
		}
     86c:	bf00      	nop
     86e:	46bd      	mov	sp, r7
     870:	bc80      	pop	{r7}
     872:	4770      	bx	lr

00000874 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
	free(p);
     87c:	6878      	ldr	r0, [r7, #4]
     87e:	4b03      	ldr	r3, [pc, #12]	; (88c <_ZdlPv+0x18>)
     880:	4798      	blx	r3
	}
     882:	bf00      	nop
     884:	3708      	adds	r7, #8
     886:	46bd      	mov	sp, r7
     888:	bd80      	pop	{r7, pc}
     88a:	bf00      	nop
     88c:	00000857 	.word	0x00000857

00000890 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
     890:	b480      	push	{r7}
     892:	b083      	sub	sp, #12
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
     898:	687b      	ldr	r3, [r7, #4]
     89a:	4618      	mov	r0, r3
     89c:	370c      	adds	r7, #12
     89e:	46bd      	mov	sp, r7
     8a0:	bc80      	pop	{r7}
     8a2:	4770      	bx	lr

000008a4 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
     8a4:	b480      	push	{r7}
     8a6:	b083      	sub	sp, #12
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	4618      	mov	r0, r3
     8b0:	370c      	adds	r7, #12
     8b2:	46bd      	mov	sp, r7
     8b4:	bc80      	pop	{r7}
     8b6:	4770      	bx	lr

000008b8 <_Z41__static_initialization_and_destruction_0ii>:
void Diagnostics::_printSupportLink(void) {
	usb.print(F("If this does not help resolve/clarify this issue, "));
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
}

Diagnostics diagnostics; // default instantiation of Diagnostics object
     8b8:	b580      	push	{r7, lr}
     8ba:	b082      	sub	sp, #8
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	2b01      	cmp	r3, #1
     8c6:	d10c      	bne.n	8e2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8c8:	683b      	ldr	r3, [r7, #0]
     8ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
     8ce:	4293      	cmp	r3, r2
     8d0:	d107      	bne.n	8e2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8d2:	4806      	ldr	r0, [pc, #24]	; (8ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8d4:	4b06      	ldr	r3, [pc, #24]	; (8f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     8d6:	4798      	blx	r3
     8d8:	4a06      	ldr	r2, [pc, #24]	; (8f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     8da:	4907      	ldr	r1, [pc, #28]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     8dc:	4803      	ldr	r0, [pc, #12]	; (8ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8de:	4b07      	ldr	r3, [pc, #28]	; (8fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     8e0:	4798      	blx	r3
     8e2:	bf00      	nop
     8e4:	3708      	adds	r7, #8
     8e6:	46bd      	mov	sp, r7
     8e8:	bd80      	pop	{r7, pc}
     8ea:	bf00      	nop
     8ec:	200008c8 	.word	0x200008c8
     8f0:	00000891 	.word	0x00000891
     8f4:	20000000 	.word	0x20000000
     8f8:	000008a5 	.word	0x000008a5
     8fc:	0000fc55 	.word	0x0000fc55

00000900 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
     900:	b580      	push	{r7, lr}
     902:	af00      	add	r7, sp, #0
     904:	f64f 71ff 	movw	r1, #65535	; 0xffff
     908:	2001      	movs	r0, #1
     90a:	4b01      	ldr	r3, [pc, #4]	; (910 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
     90c:	4798      	blx	r3
     90e:	bd80      	pop	{r7, pc}
     910:	000008b9 	.word	0x000008b9

00000914 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     914:	b480      	push	{r7}
     916:	b083      	sub	sp, #12
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
     91c:	6039      	str	r1, [r7, #0]
	{
	data = v;
     91e:	687b      	ldr	r3, [r7, #4]
     920:	683a      	ldr	r2, [r7, #0]
     922:	601a      	str	r2, [r3, #0]
	}
     924:	687b      	ldr	r3, [r7, #4]
     926:	4618      	mov	r0, r3
     928:	370c      	adds	r7, #12
     92a:	46bd      	mov	sp, r7
     92c:	bc80      	pop	{r7}
     92e:	4770      	bx	lr

00000930 <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
     930:	b580      	push	{r7, lr}
     932:	b082      	sub	sp, #8
     934:	af00      	add	r7, sp, #0
     936:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     938:	687b      	ldr	r3, [r7, #4]
     93a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     93e:	801a      	strh	r2, [r3, #0]
     940:	687b      	ldr	r3, [r7, #4]
     942:	f64f 72ff 	movw	r2, #65535	; 0xffff
     946:	805a      	strh	r2, [r3, #2]
     948:	687b      	ldr	r3, [r7, #4]
     94a:	2200      	movs	r2, #0
     94c:	605a      	str	r2, [r3, #4]
     94e:	687b      	ldr	r3, [r7, #4]
     950:	3308      	adds	r3, #8
     952:	2100      	movs	r1, #0
     954:	4618      	mov	r0, r3
     956:	4b05      	ldr	r3, [pc, #20]	; (96c <_ZN5eventC1Ev+0x3c>)
     958:	4798      	blx	r3
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	2200      	movs	r2, #0
     95e:	60da      	str	r2, [r3, #12]
	{
	}
     960:	687b      	ldr	r3, [r7, #4]
     962:	4618      	mov	r0, r3
     964:	3708      	adds	r7, #8
     966:	46bd      	mov	sp, r7
     968:	bd80      	pop	{r7, pc}
     96a:	bf00      	nop
     96c:	00000915 	.word	0x00000915

00000970 <_ZN18EventHandler_ClassC1Ev>:
	ptrEventHandlerClass->eventTimeout=true;
}


// default constructor
EventHandler_Class::EventHandler_Class()
     970:	b480      	push	{r7}
     972:	b083      	sub	sp, #12
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     978:	4a04      	ldr	r2, [pc, #16]	; (98c <_ZN18EventHandler_ClassC1Ev+0x1c>)
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
     97e:	687b      	ldr	r3, [r7, #4]
     980:	4618      	mov	r0, r3
     982:	370c      	adds	r7, #12
     984:	46bd      	mov	sp, r7
     986:	bc80      	pop	{r7}
     988:	4770      	bx	lr
     98a:	bf00      	nop
     98c:	200018d4 	.word	0x200018d4

00000990 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
     990:	b480      	push	{r7}
     992:	b083      	sub	sp, #12
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     998:	4a04      	ldr	r2, [pc, #16]	; (9ac <_ZN18EventHandler_ClassD1Ev+0x1c>)
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4618      	mov	r0, r3
     9a2:	370c      	adds	r7, #12
     9a4:	46bd      	mov	sp, r7
     9a6:	bc80      	pop	{r7}
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	200018d4 	.word	0x200018d4

000009b0 <_Z41__static_initialization_and_destruction_0ii>:
	return	(uint32_t)eventsInUse;
	
}


     9b0:	b5b0      	push	{r4, r5, r7, lr}
     9b2:	b082      	sub	sp, #8
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
     9b8:	6039      	str	r1, [r7, #0]
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	2b01      	cmp	r3, #1
     9be:	d117      	bne.n	9f0 <_Z41__static_initialization_and_destruction_0ii+0x40>
     9c0:	683b      	ldr	r3, [r7, #0]
     9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     9c6:	4293      	cmp	r3, r2
     9c8:	d112      	bne.n	9f0 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
     9ca:	4b0b      	ldr	r3, [pc, #44]	; (9f8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     9cc:	24ff      	movs	r4, #255	; 0xff
     9ce:	461d      	mov	r5, r3
     9d0:	2c00      	cmp	r4, #0
     9d2:	db05      	blt.n	9e0 <_Z41__static_initialization_and_destruction_0ii+0x30>
     9d4:	4628      	mov	r0, r5
     9d6:	4b09      	ldr	r3, [pc, #36]	; (9fc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     9d8:	4798      	blx	r3
     9da:	3510      	adds	r5, #16
     9dc:	3c01      	subs	r4, #1
     9de:	e7f7      	b.n	9d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
     9e0:	4807      	ldr	r0, [pc, #28]	; (a00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9e2:	4b08      	ldr	r3, [pc, #32]	; (a04 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     9e4:	4798      	blx	r3
     9e6:	4a08      	ldr	r2, [pc, #32]	; (a08 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     9e8:	4908      	ldr	r1, [pc, #32]	; (a0c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     9ea:	4805      	ldr	r0, [pc, #20]	; (a00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9ec:	4b08      	ldr	r3, [pc, #32]	; (a10 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     9ee:	4798      	blx	r3
     9f0:	bf00      	nop
     9f2:	3708      	adds	r7, #8
     9f4:	46bd      	mov	sp, r7
     9f6:	bdb0      	pop	{r4, r5, r7, pc}
     9f8:	200008cc 	.word	0x200008cc
     9fc:	00000931 	.word	0x00000931
     a00:	200018e4 	.word	0x200018e4
     a04:	00000971 	.word	0x00000971
     a08:	20000000 	.word	0x20000000
     a0c:	00000991 	.word	0x00000991
     a10:	0000fc55 	.word	0x0000fc55

00000a14 <_GLOBAL__sub_I_maxEventCount>:
     a14:	b580      	push	{r7, lr}
     a16:	af00      	add	r7, sp, #0
     a18:	f64f 71ff 	movw	r1, #65535	; 0xffff
     a1c:	2001      	movs	r0, #1
     a1e:	4b01      	ldr	r3, [pc, #4]	; (a24 <_GLOBAL__sub_I_maxEventCount+0x10>)
     a20:	4798      	blx	r3
     a22:	bd80      	pop	{r7, pc}
     a24:	000009b1 	.word	0x000009b1

00000a28 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class=NULL;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
     a28:	b580      	push	{r7, lr}
     a2a:	b084      	sub	sp, #16
     a2c:	af00      	add	r7, sp, #0
     a2e:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
     a30:	4b08      	ldr	r3, [pc, #32]	; (a54 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	6879      	ldr	r1, [r7, #4]
     a36:	4618      	mov	r0, r3
     a38:	4b07      	ldr	r3, [pc, #28]	; (a58 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
     a3a:	4798      	blx	r3
     a3c:	4603      	mov	r3, r0
     a3e:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
     a40:	68fb      	ldr	r3, [r7, #12]
     a42:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
     a44:	4a03      	ldr	r2, [pc, #12]	; (a54 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
     a46:	68bb      	ldr	r3, [r7, #8]
     a48:	6013      	str	r3, [r2, #0]
}
     a4a:	bf00      	nop
     a4c:	3710      	adds	r7, #16
     a4e:	46bd      	mov	sp, r7
     a50:	bd80      	pop	{r7, pc}
     a52:	bf00      	nop
     a54:	20001900 	.word	0x20001900
     a58:	00000e05 	.word	0x00000e05

00000a5c <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
     a5c:	b580      	push	{r7, lr}
     a5e:	b082      	sub	sp, #8
     a60:	af00      	add	r7, sp, #0
     a62:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
     a64:	6878      	ldr	r0, [r7, #4]
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
     a68:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
     a6a:	4b05      	ldr	r3, [pc, #20]	; (a80 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	2201      	movs	r2, #1
     a70:	741a      	strb	r2, [r3, #16]


}
     a72:	bf00      	nop
     a74:	3708      	adds	r7, #8
     a76:	46bd      	mov	sp, r7
     a78:	bd80      	pop	{r7, pc}
     a7a:	bf00      	nop
     a7c:	00000a29 	.word	0x00000a29
     a80:	20001900 	.word	0x20001900

00000a84 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
     a8a:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
     a8c:	6878      	ldr	r0, [r7, #4]
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
     a90:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
     a92:	4b05      	ldr	r3, [pc, #20]	; (aa8 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
     a94:	681b      	ldr	r3, [r3, #0]
     a96:	2201      	movs	r2, #1
     a98:	745a      	strb	r2, [r3, #17]
}
     a9a:	bf00      	nop
     a9c:	3708      	adds	r7, #8
     a9e:	46bd      	mov	sp, r7
     aa0:	bd80      	pop	{r7, pc}
     aa2:	bf00      	nop
     aa4:	00000a29 	.word	0x00000a29
     aa8:	20001900 	.word	0x20001900

00000aac <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
     aac:	b580      	push	{r7, lr}
     aae:	b082      	sub	sp, #8
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
     ab4:	6878      	ldr	r0, [r7, #4]
     ab6:	4b09      	ldr	r3, [pc, #36]	; (adc <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
     ab8:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
     aba:	4b09      	ldr	r3, [pc, #36]	; (ae0 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	4618      	mov	r0, r3
     ac0:	4b08      	ldr	r3, [pc, #32]	; (ae4 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
     ac2:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
     ac4:	4b06      	ldr	r3, [pc, #24]	; (ae0 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	2201      	movs	r2, #1
     aca:	741a      	strb	r2, [r3, #16]
		ptrI2C_Asyn_Class->rxReady=true;
     acc:	4b04      	ldr	r3, [pc, #16]	; (ae0 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	2201      	movs	r2, #1
     ad2:	745a      	strb	r2, [r3, #17]
 }
     ad4:	bf00      	nop
     ad6:	3708      	adds	r7, #8
     ad8:	46bd      	mov	sp, r7
     ada:	bd80      	pop	{r7, pc}
     adc:	00000a29 	.word	0x00000a29
     ae0:	20001900 	.word	0x20001900
     ae4:	00000ce9 	.word	0x00000ce9

00000ae8 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
     ae8:	b580      	push	{r7, lr}
     aea:	b082      	sub	sp, #8
     aec:	af00      	add	r7, sp, #0
     aee:	6078      	str	r0, [r7, #4]
     af0:	687b      	ldr	r3, [r7, #4]
     af2:	4618      	mov	r0, r3
     af4:	4b07      	ldr	r3, [pc, #28]	; (b14 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
     af6:	4798      	blx	r3
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	4a07      	ldr	r2, [pc, #28]	; (b18 <_ZN14I2C_Asyn_ClassC1Ev+0x30>)
     afc:	61da      	str	r2, [r3, #28]
	ptrClass=this;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	687a      	ldr	r2, [r7, #4]
     b02:	615a      	str	r2, [r3, #20]
	ptrI2C_Asyn_Class=this;
     b04:	4a05      	ldr	r2, [pc, #20]	; (b1c <_ZN14I2C_Asyn_ClassC1Ev+0x34>)
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	4618      	mov	r0, r3
     b0e:	3708      	adds	r7, #8
     b10:	46bd      	mov	sp, r7
     b12:	bd80      	pop	{r7, pc}
     b14:	00000d1d 	.word	0x00000d1d
     b18:	200027cc 	.word	0x200027cc
     b1c:	20001900 	.word	0x20001900

00000b20 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrClass=this;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
     b20:	b580      	push	{r7, lr}
     b22:	b082      	sub	sp, #8
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
     b28:	687b      	ldr	r3, [r7, #4]
     b2a:	4618      	mov	r0, r3
     b2c:	4b03      	ldr	r3, [pc, #12]	; (b3c <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
     b2e:	4798      	blx	r3
{

} //~I2C_Asyn_Class
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	4618      	mov	r0, r3
     b34:	3708      	adds	r7, #8
     b36:	46bd      	mov	sp, r7
     b38:	bd80      	pop	{r7, pc}
     b3a:	bf00      	nop
     b3c:	00000d3d 	.word	0x00000d3d

00000b40 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
     b40:	b480      	push	{r7}
     b42:	b083      	sub	sp, #12
     b44:	af00      	add	r7, sp, #0
     b46:	6078      	str	r0, [r7, #4]
     b48:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	683a      	ldr	r2, [r7, #0]
     b4e:	61da      	str	r2, [r3, #28]
	ptrClass=this;
     b50:	687b      	ldr	r3, [r7, #4]
     b52:	687a      	ldr	r2, [r7, #4]
     b54:	615a      	str	r2, [r3, #20]
	ptrI2C_Asyn_Class=this;
     b56:	4a04      	ldr	r2, [pc, #16]	; (b68 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
     b58:	687b      	ldr	r3, [r7, #4]
     b5a:	6013      	str	r3, [r2, #0]
}
     b5c:	bf00      	nop
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	bc80      	pop	{r7}
     b64:	4770      	bx	lr
     b66:	bf00      	nop
     b68:	20001900 	.word	0x20001900

00000b6c <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
     b6c:	b580      	push	{r7, lr}
     b6e:	b084      	sub	sp, #16
     b70:	af00      	add	r7, sp, #0
     b72:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	69da      	ldr	r2, [r3, #28]
     b78:	687b      	ldr	r3, [r7, #4]
     b7a:	3318      	adds	r3, #24
     b7c:	4619      	mov	r1, r3
     b7e:	4610      	mov	r0, r2
     b80:	4b1e      	ldr	r3, [pc, #120]	; (bfc <_ZN14I2C_Asyn_Class4InitEv+0x90>)
     b82:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
     b84:	687b      	ldr	r3, [r7, #4]
     b86:	69db      	ldr	r3, [r3, #28]
     b88:	4618      	mov	r0, r3
     b8a:	4b1d      	ldr	r3, [pc, #116]	; (c00 <_ZN14I2C_Asyn_Class4InitEv+0x94>)
     b8c:	4798      	blx	r3
     b8e:	4603      	mov	r3, r0
     b90:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	69db      	ldr	r3, [r3, #28]
     b96:	4a1b      	ldr	r2, [pc, #108]	; (c04 <_ZN14I2C_Asyn_Class4InitEv+0x98>)
     b98:	2101      	movs	r1, #1
     b9a:	4618      	mov	r0, r3
     b9c:	4b1a      	ldr	r3, [pc, #104]	; (c08 <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
     b9e:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
     ba0:	687b      	ldr	r3, [r7, #4]
     ba2:	69db      	ldr	r3, [r3, #28]
     ba4:	4a19      	ldr	r2, [pc, #100]	; (c0c <_ZN14I2C_Asyn_Class4InitEv+0xa0>)
     ba6:	2102      	movs	r1, #2
     ba8:	4618      	mov	r0, r3
     baa:	4b17      	ldr	r3, [pc, #92]	; (c08 <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
     bac:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	69db      	ldr	r3, [r3, #28]
     bb2:	4a17      	ldr	r2, [pc, #92]	; (c10 <_ZN14I2C_Asyn_Class4InitEv+0xa4>)
     bb4:	2100      	movs	r1, #0
     bb6:	4618      	mov	r0, r3
     bb8:	4b13      	ldr	r3, [pc, #76]	; (c08 <_ZN14I2C_Asyn_Class4InitEv+0x9c>)
     bba:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
     bbc:	687b      	ldr	r3, [r7, #4]
     bbe:	695b      	ldr	r3, [r3, #20]
     bc0:	461a      	mov	r2, r3
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	coupleKey.i2cDescr=ptrI2CAsynDescr;
     bc6:	687b      	ldr	r3, [r7, #4]
     bc8:	69da      	ldr	r2, [r3, #28]
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	629a      	str	r2, [r3, #40]	; 0x28
	coupleKey.dummy=(uint32_t)ptrClass;
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	695b      	ldr	r3, [r3, #20]
     bd2:	461a      	mov	r2, r3
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	625a      	str	r2, [r3, #36]	; 0x24
	AddI2CObject(coupleKey);
     bd8:	687a      	ldr	r2, [r7, #4]
     bda:	687b      	ldr	r3, [r7, #4]
     bdc:	3324      	adds	r3, #36	; 0x24
     bde:	4619      	mov	r1, r3
     be0:	4610      	mov	r0, r2
     be2:	4b0c      	ldr	r3, [pc, #48]	; (c14 <_ZN14I2C_Asyn_Class4InitEv+0xa8>)
     be4:	4798      	blx	r3
	txReady=true;
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	2201      	movs	r2, #1
     bea:	741a      	strb	r2, [r3, #16]
	rxReady=true;
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	2201      	movs	r2, #1
     bf0:	745a      	strb	r2, [r3, #17]
	return ena;
     bf2:	7bfb      	ldrb	r3, [r7, #15]
	
}
     bf4:	4618      	mov	r0, r3
     bf6:	3710      	adds	r7, #16
     bf8:	46bd      	mov	sp, r7
     bfa:	bd80      	pop	{r7, pc}
     bfc:	000048af 	.word	0x000048af
     c00:	000047c1 	.word	0x000047c1
     c04:	00000a5d 	.word	0x00000a5d
     c08:	00004867 	.word	0x00004867
     c0c:	00000a85 	.word	0x00000a85
     c10:	00000aad 	.word	0x00000aad
     c14:	00000d51 	.word	0x00000d51

00000c18 <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
     c18:	b580      	push	{r7, lr}
     c1a:	b084      	sub	sp, #16
     c1c:	af00      	add	r7, sp, #0
     c1e:	6078      	str	r0, [r7, #4]
     c20:	460b      	mov	r3, r1
     c22:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
     c24:	6878      	ldr	r0, [r7, #4]
     c26:	4b0c      	ldr	r3, [pc, #48]	; (c58 <_ZN14I2C_Asyn_Class4InitEh+0x40>)
     c28:	4798      	blx	r3
     c2a:	4603      	mov	r3, r0
     c2c:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	69db      	ldr	r3, [r3, #28]
     c32:	78fa      	ldrb	r2, [r7, #3]
     c34:	b211      	sxth	r1, r2
     c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
     c3a:	4618      	mov	r0, r3
     c3c:	4b07      	ldr	r3, [pc, #28]	; (c5c <_ZN14I2C_Asyn_Class4InitEh+0x44>)
     c3e:	4798      	blx	r3
	txReady=true;
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	2201      	movs	r2, #1
     c44:	741a      	strb	r2, [r3, #16]
	rxReady=true;
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	2201      	movs	r2, #1
     c4a:	745a      	strb	r2, [r3, #17]
	return ena;
     c4c:	7bfb      	ldrb	r3, [r7, #15]
}
     c4e:	4618      	mov	r0, r3
     c50:	3710      	adds	r7, #16
     c52:	46bd      	mov	sp, r7
     c54:	bd80      	pop	{r7, pc}
     c56:	bf00      	nop
     c58:	00000b6d 	.word	0x00000b6d
     c5c:	0000482d 	.word	0x0000482d

00000c60 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
     c60:	b580      	push	{r7, lr}
     c62:	b084      	sub	sp, #16
     c64:	af00      	add	r7, sp, #0
     c66:	60f8      	str	r0, [r7, #12]
     c68:	60b9      	str	r1, [r7, #8]
     c6a:	4613      	mov	r3, r2
     c6c:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	7c1b      	ldrb	r3, [r3, #16]
     c72:	b2db      	uxtb	r3, r3
     c74:	f083 0301 	eor.w	r3, r3, #1
     c78:	b2db      	uxtb	r3, r3
     c7a:	2b00      	cmp	r3, #0
     c7c:	d000      	beq.n	c80 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
     c7e:	e7f6      	b.n	c6e <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
     c80:	68fb      	ldr	r3, [r7, #12]
     c82:	2200      	movs	r2, #0
     c84:	741a      	strb	r2, [r3, #16]
	return io_write(I2C_io, buffer, lenght);
     c86:	68fb      	ldr	r3, [r7, #12]
     c88:	699b      	ldr	r3, [r3, #24]
     c8a:	88fa      	ldrh	r2, [r7, #6]
     c8c:	68b9      	ldr	r1, [r7, #8]
     c8e:	4618      	mov	r0, r3
     c90:	4b03      	ldr	r3, [pc, #12]	; (ca0 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
     c92:	4798      	blx	r3
     c94:	4603      	mov	r3, r0
}
     c96:	4618      	mov	r0, r3
     c98:	3710      	adds	r7, #16
     c9a:	46bd      	mov	sp, r7
     c9c:	bd80      	pop	{r7, pc}
     c9e:	bf00      	nop
     ca0:	000048d1 	.word	0x000048d1

00000ca4 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
     ca4:	b580      	push	{r7, lr}
     ca6:	b084      	sub	sp, #16
     ca8:	af00      	add	r7, sp, #0
     caa:	60f8      	str	r0, [r7, #12]
     cac:	60b9      	str	r1, [r7, #8]
     cae:	4613      	mov	r3, r2
     cb0:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
     cb2:	68fb      	ldr	r3, [r7, #12]
     cb4:	7c5b      	ldrb	r3, [r3, #17]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	f083 0301 	eor.w	r3, r3, #1
     cbc:	b2db      	uxtb	r3, r3
     cbe:	2b00      	cmp	r3, #0
     cc0:	d000      	beq.n	cc4 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
     cc2:	e7f6      	b.n	cb2 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
     cc4:	68fb      	ldr	r3, [r7, #12]
     cc6:	2200      	movs	r2, #0
     cc8:	745a      	strb	r2, [r3, #17]
		return io_read(I2C_io, buffer, lenght);
     cca:	68fb      	ldr	r3, [r7, #12]
     ccc:	699b      	ldr	r3, [r3, #24]
     cce:	88fa      	ldrh	r2, [r7, #6]
     cd0:	68b9      	ldr	r1, [r7, #8]
     cd2:	4618      	mov	r0, r3
     cd4:	4b03      	ldr	r3, [pc, #12]	; (ce4 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
     cd6:	4798      	blx	r3
     cd8:	4603      	mov	r3, r0
}
     cda:	4618      	mov	r0, r3
     cdc:	3710      	adds	r7, #16
     cde:	46bd      	mov	sp, r7
     ce0:	bd80      	pop	{r7, pc}
     ce2:	bf00      	nop
     ce4:	00004921 	.word	0x00004921

00000ce8 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
     ce8:	b480      	push	{r7}
     cea:	b083      	sub	sp, #12
     cec:	af00      	add	r7, sp, #0
     cee:	6078      	str	r0, [r7, #4]
	 ack=false;
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	2200      	movs	r2, #0
     cf4:	749a      	strb	r2, [r3, #18]
	 return ack;
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	7c9b      	ldrb	r3, [r3, #18]
     cfa:	b2db      	uxtb	r3, r3
     cfc:	4618      	mov	r0, r3
     cfe:	370c      	adds	r7, #12
     d00:	46bd      	mov	sp, r7
     d02:	bc80      	pop	{r7}
     d04:	4770      	bx	lr

00000d06 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     d06:	b480      	push	{r7}
     d08:	b083      	sub	sp, #12
     d0a:	af00      	add	r7, sp, #0
     d0c:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	681b      	ldr	r3, [r3, #0]
}
     d12:	4618      	mov	r0, r3
     d14:	370c      	adds	r7, #12
     d16:	46bd      	mov	sp, r7
     d18:	bc80      	pop	{r7}
     d1a:	4770      	bx	lr

00000d1c <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
     d1c:	b480      	push	{r7}
     d1e:	b083      	sub	sp, #12
     d20:	af00      	add	r7, sp, #0
     d22:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	4a04      	ldr	r2, [pc, #16]	; (d38 <_ZN14I2C_ObjectListC1Ev+0x1c>)
     d28:	60da      	str	r2, [r3, #12]
} //I2C_ObjectList
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	4618      	mov	r0, r3
     d2e:	370c      	adds	r7, #12
     d30:	46bd      	mov	sp, r7
     d32:	bc80      	pop	{r7}
     d34:	4770      	bx	lr
     d36:	bf00      	nop
     d38:	20001904 	.word	0x20001904

00000d3c <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
     d3c:	b480      	push	{r7}
     d3e:	b083      	sub	sp, #12
     d40:	af00      	add	r7, sp, #0
     d42:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
     d44:	687b      	ldr	r3, [r7, #4]
     d46:	4618      	mov	r0, r3
     d48:	370c      	adds	r7, #12
     d4a:	46bd      	mov	sp, r7
     d4c:	bc80      	pop	{r7}
     d4e:	4770      	bx	lr

00000d50 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
     d50:	b580      	push	{r7, lr}
     d52:	b082      	sub	sp, #8
     d54:	af00      	add	r7, sp, #0
     d56:	6078      	str	r0, [r7, #4]
     d58:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	68db      	ldr	r3, [r3, #12]
     d5e:	2b00      	cmp	r3, #0
     d60:	d004      	beq.n	d6c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
     d62:	683b      	ldr	r3, [r7, #0]
     d64:	2b00      	cmp	r3, #0
     d66:	d001      	beq.n	d6c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
     d68:	2301      	movs	r3, #1
     d6a:	e000      	b.n	d6e <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
     d6c:	2300      	movs	r3, #0
     d6e:	2219      	movs	r2, #25
     d70:	4910      	ldr	r1, [pc, #64]	; (db4 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
     d72:	4618      	mov	r0, r3
     d74:	4b10      	ldr	r3, [pc, #64]	; (db8 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
     d76:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	68db      	ldr	r3, [r3, #12]
     d7c:	6839      	ldr	r1, [r7, #0]
     d7e:	4618      	mov	r0, r3
     d80:	4b0e      	ldr	r3, [pc, #56]	; (dbc <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
     d82:	4798      	blx	r3
     d84:	4603      	mov	r3, r0
     d86:	2b00      	cmp	r3, #0
     d88:	d007      	beq.n	d9a <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
     d8a:	221c      	movs	r2, #28
     d8c:	4909      	ldr	r1, [pc, #36]	; (db4 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
     d8e:	2000      	movs	r0, #0
     d90:	4b09      	ldr	r3, [pc, #36]	; (db8 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
     d92:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
     d94:	f06f 0311 	mvn.w	r3, #17
     d98:	e007      	b.n	daa <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	68db      	ldr	r3, [r3, #12]
     d9e:	683a      	ldr	r2, [r7, #0]
     da0:	4619      	mov	r1, r3
     da2:	6878      	ldr	r0, [r7, #4]
     da4:	4b06      	ldr	r3, [pc, #24]	; (dc0 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
     da6:	4798      	blx	r3
		return ERR_NONE;
     da8:	2300      	movs	r3, #0
}
     daa:	4618      	mov	r0, r3
     dac:	3708      	adds	r7, #8
     dae:	46bd      	mov	sp, r7
     db0:	bd80      	pop	{r7, pc}
     db2:	bf00      	nop
     db4:	00012600 	.word	0x00012600
     db8:	00005ed5 	.word	0x00005ed5
     dbc:	00005efd 	.word	0x00005efd
     dc0:	00000dc5 	.word	0x00000dc5

00000dc4 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
     dc4:	b580      	push	{r7, lr}
     dc6:	b086      	sub	sp, #24
     dc8:	af00      	add	r7, sp, #0
     dca:	60f8      	str	r0, [r7, #12]
     dcc:	60b9      	str	r1, [r7, #8]
     dce:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
     dd0:	68b8      	ldr	r0, [r7, #8]
     dd2:	4b09      	ldr	r3, [pc, #36]	; (df8 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
     dd4:	4798      	blx	r3
     dd6:	6178      	str	r0, [r7, #20]

		if (!head) {
     dd8:	697b      	ldr	r3, [r7, #20]
     dda:	2b00      	cmp	r3, #0
     ddc:	d104      	bne.n	de8 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
     dde:	6879      	ldr	r1, [r7, #4]
     de0:	68b8      	ldr	r0, [r7, #8]
     de2:	4b06      	ldr	r3, [pc, #24]	; (dfc <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
     de4:	4798      	blx	r3
			return;
     de6:	e003      	b.n	df0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
     de8:	6879      	ldr	r1, [r7, #4]
     dea:	68b8      	ldr	r0, [r7, #8]
     dec:	4b04      	ldr	r3, [pc, #16]	; (e00 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
     dee:	4798      	blx	r3
		}
}
     df0:	3718      	adds	r7, #24
     df2:	46bd      	mov	sp, r7
     df4:	bd80      	pop	{r7, pc}
     df6:	bf00      	nop
     df8:	00000d07 	.word	0x00000d07
     dfc:	00005f35 	.word	0x00005f35
     e00:	00005fb1 	.word	0x00005fb1

00000e04 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
     e04:	b480      	push	{r7}
     e06:	b087      	sub	sp, #28
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
     e0c:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	68db      	ldr	r3, [r3, #12]
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	617b      	str	r3, [r7, #20]
     e16:	697b      	ldr	r3, [r7, #20]
     e18:	2b00      	cmp	r3, #0
     e1a:	d00f      	beq.n	e3c <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
     e1c:	697b      	ldr	r3, [r7, #20]
     e1e:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
     e20:	693b      	ldr	r3, [r7, #16]
     e22:	685a      	ldr	r2, [r3, #4]
     e24:	683b      	ldr	r3, [r7, #0]
     e26:	429a      	cmp	r2, r3
     e28:	d104      	bne.n	e34 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
     e2a:	693b      	ldr	r3, [r7, #16]
     e2c:	689b      	ldr	r3, [r3, #8]
     e2e:	60fb      	str	r3, [r7, #12]
				return ptr;
     e30:	68fb      	ldr	r3, [r7, #12]
     e32:	e004      	b.n	e3e <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
     e34:	697b      	ldr	r3, [r7, #20]
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	617b      	str	r3, [r7, #20]
     e3a:	e7ec      	b.n	e16 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
     e3c:	2300      	movs	r3, #0
     e3e:	4618      	mov	r0, r3
     e40:	371c      	adds	r7, #28
     e42:	46bd      	mov	sp, r7
     e44:	bc80      	pop	{r7}
     e46:	4770      	bx	lr

00000e48 <_ZL13MCPHadChangedv>:



MCP23017_Class	*ptrMCP23017Class;

static void	MCPHadChanged(void){
     e48:	b480      	push	{r7}
     e4a:	af00      	add	r7, sp, #0
	
			ptrMCP23017Class->hasChanged=true;
     e4c:	4b03      	ldr	r3, [pc, #12]	; (e5c <_ZL13MCPHadChangedv+0x14>)
     e4e:	681b      	ldr	r3, [r3, #0]
     e50:	2201      	movs	r2, #1
     e52:	705a      	strb	r2, [r3, #1]

}
     e54:	bf00      	nop
     e56:	46bd      	mov	sp, r7
     e58:	bc80      	pop	{r7}
     e5a:	4770      	bx	lr
     e5c:	20001908 	.word	0x20001908

00000e60 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
     e60:	b580      	push	{r7, lr}
     e62:	b082      	sub	sp, #8
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	6039      	str	r1, [r7, #0]
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	3304      	adds	r3, #4
     e6e:	4618      	mov	r0, r3
     e70:	4b06      	ldr	r3, [pc, #24]	; (e8c <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
     e72:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	683a      	ldr	r2, [r7, #0]
     e78:	635a      	str	r2, [r3, #52]	; 0x34
	ptrMCP23017Class=this;
     e7a:	4a05      	ldr	r2, [pc, #20]	; (e90 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	4618      	mov	r0, r3
     e84:	3708      	adds	r7, #8
     e86:	46bd      	mov	sp, r7
     e88:	bd80      	pop	{r7, pc}
     e8a:	bf00      	nop
     e8c:	00000ae9 	.word	0x00000ae9
     e90:	20001908 	.word	0x20001908

00000e94 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
     e94:	b580      	push	{r7, lr}
     e96:	b082      	sub	sp, #8
     e98:	af00      	add	r7, sp, #0
     e9a:	6078      	str	r0, [r7, #4]
     e9c:	687b      	ldr	r3, [r7, #4]
     e9e:	3304      	adds	r3, #4
     ea0:	4618      	mov	r0, r3
     ea2:	4b03      	ldr	r3, [pc, #12]	; (eb0 <_ZN14MCP23017_ClassD1Ev+0x1c>)
     ea4:	4798      	blx	r3
{
} //~AT24MAC_Class
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	4618      	mov	r0, r3
     eaa:	3708      	adds	r7, #8
     eac:	46bd      	mov	sp, r7
     eae:	bd80      	pop	{r7, pc}
     eb0:	00000b21 	.word	0x00000b21

00000eb4 <_ZN14MCP23017_Class4InitEh>:

void MCP23017_Class::Init(uint8_t addr) {
     eb4:	b580      	push	{r7, lr}
     eb6:	b082      	sub	sp, #8
     eb8:	af00      	add	r7, sp, #0
     eba:	6078      	str	r0, [r7, #4]
     ebc:	460b      	mov	r3, r1
     ebe:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	78fa      	ldrb	r2, [r7, #3]
     ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i2ca.Set_descriptor(ptrI2CDescr);
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	1d1a      	adds	r2, r3, #4
     ecc:	687b      	ldr	r3, [r7, #4]
     ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ed0:	4619      	mov	r1, r3
     ed2:	4610      	mov	r0, r2
     ed4:	4b0c      	ldr	r3, [pc, #48]	; (f08 <_ZN14MCP23017_Class4InitEh+0x54>)
     ed6:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	3304      	adds	r3, #4
     edc:	78fa      	ldrb	r2, [r7, #3]
     ede:	4611      	mov	r1, r2
     ee0:	4618      	mov	r0, r3
     ee2:	4b0a      	ldr	r3, [pc, #40]	; (f0c <_ZN14MCP23017_Class4InitEh+0x58>)
     ee4:	4798      	blx	r3
     ee6:	4603      	mov	r3, r0
     ee8:	2b00      	cmp	r3, #0
     eea:	bf0c      	ite	eq
     eec:	2301      	moveq	r3, #1
     eee:	2300      	movne	r3, #0
     ef0:	b2da      	uxtb	r2, r3
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	701a      	strb	r2, [r3, #0]
	ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
     ef6:	4906      	ldr	r1, [pc, #24]	; (f10 <_ZN14MCP23017_Class4InitEh+0x5c>)
     ef8:	2004      	movs	r0, #4
     efa:	4b06      	ldr	r3, [pc, #24]	; (f14 <_ZN14MCP23017_Class4InitEh+0x60>)
     efc:	4798      	blx	r3
}
     efe:	bf00      	nop
     f00:	3708      	adds	r7, #8
     f02:	46bd      	mov	sp, r7
     f04:	bd80      	pop	{r7, pc}
     f06:	bf00      	nop
     f08:	00000b41 	.word	0x00000b41
     f0c:	00000c19 	.word	0x00000c19
     f10:	00000e49 	.word	0x00000e49
     f14:	00004415 	.word	0x00004415

00000f18 <_ZN14MCP23017_Class4InitEv>:
}

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
bool MCP23017_Class::Init(void) {
     f18:	b580      	push	{r7, lr}
     f1a:	b082      	sub	sp, #8
     f1c:	af00      	add	r7, sp, #0
     f1e:	6078      	str	r0, [r7, #4]
    Init((uint8_t)MCP23017_ADDRESS);
     f20:	2127      	movs	r1, #39	; 0x27
     f22:	6878      	ldr	r0, [r7, #4]
     f24:	4b04      	ldr	r3, [pc, #16]	; (f38 <_ZN14MCP23017_Class4InitEv+0x20>)
     f26:	4798      	blx	r3
	return	SelfTest();	
     f28:	6878      	ldr	r0, [r7, #4]
     f2a:	4b04      	ldr	r3, [pc, #16]	; (f3c <_ZN14MCP23017_Class4InitEv+0x24>)
     f2c:	4798      	blx	r3
     f2e:	4603      	mov	r3, r0
}
     f30:	4618      	mov	r0, r3
     f32:	3708      	adds	r7, #8
     f34:	46bd      	mov	sp, r7
     f36:	bd80      	pop	{r7, pc}
     f38:	00000eb5 	.word	0x00000eb5
     f3c:	000012e1 	.word	0x000012e1

00000f40 <_ZN14MCP23017_Class9bitForPinEh>:
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23017_Class::bitForPin(uint8_t pin){
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	6078      	str	r0, [r7, #4]
     f48:	460b      	mov	r3, r1
     f4a:	70fb      	strb	r3, [r7, #3]
    return pin%8;
     f4c:	78fb      	ldrb	r3, [r7, #3]
     f4e:	f003 0307 	and.w	r3, r3, #7
     f52:	b2db      	uxtb	r3, r3
}
     f54:	4618      	mov	r0, r3
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	bc80      	pop	{r7}
     f5c:	4770      	bx	lr

00000f5e <_ZN14MCP23017_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23017_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
     f5e:	b480      	push	{r7}
     f60:	b083      	sub	sp, #12
     f62:	af00      	add	r7, sp, #0
     f64:	6078      	str	r0, [r7, #4]
     f66:	4608      	mov	r0, r1
     f68:	4611      	mov	r1, r2
     f6a:	461a      	mov	r2, r3
     f6c:	4603      	mov	r3, r0
     f6e:	70fb      	strb	r3, [r7, #3]
     f70:	460b      	mov	r3, r1
     f72:	70bb      	strb	r3, [r7, #2]
     f74:	4613      	mov	r3, r2
     f76:	707b      	strb	r3, [r7, #1]
    return(pin<8) ?portAaddr:portBaddr;
     f78:	78fb      	ldrb	r3, [r7, #3]
     f7a:	2b07      	cmp	r3, #7
     f7c:	dc01      	bgt.n	f82 <_ZN14MCP23017_Class9regForPinEhhh+0x24>
     f7e:	78bb      	ldrb	r3, [r7, #2]
     f80:	e000      	b.n	f84 <_ZN14MCP23017_Class9regForPinEhhh+0x26>
     f82:	787b      	ldrb	r3, [r7, #1]
}
     f84:	4618      	mov	r0, r3
     f86:	370c      	adds	r7, #12
     f88:	46bd      	mov	sp, r7
     f8a:	bc80      	pop	{r7}
     f8c:	4770      	bx	lr
	...

00000f90 <_ZN14MCP23017_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::readRegister(uint8_t addr){
     f90:	b580      	push	{r7, lr}
     f92:	b082      	sub	sp, #8
     f94:	af00      	add	r7, sp, #0
     f96:	6078      	str	r0, [r7, #4]
     f98:	460b      	mov	r3, r1
     f9a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
     f9c:	687b      	ldr	r3, [r7, #4]
     f9e:	3304      	adds	r3, #4
     fa0:	1cf9      	adds	r1, r7, #3
     fa2:	2201      	movs	r2, #1
     fa4:	4618      	mov	r0, r3
     fa6:	4b11      	ldr	r3, [pc, #68]	; (fec <_ZN14MCP23017_Class12readRegisterEh+0x5c>)
     fa8:	4798      	blx	r3
	while(!i2ca.txReady);
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	7d1b      	ldrb	r3, [r3, #20]
     fae:	b2db      	uxtb	r3, r3
     fb0:	f083 0301 	eor.w	r3, r3, #1
     fb4:	b2db      	uxtb	r3, r3
     fb6:	2b00      	cmp	r3, #0
     fb8:	d000      	beq.n	fbc <_ZN14MCP23017_Class12readRegisterEh+0x2c>
     fba:	e7f6      	b.n	faa <_ZN14MCP23017_Class12readRegisterEh+0x1a>
	i2ca.Read(&registerValue,1);
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	1d18      	adds	r0, r3, #4
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	3339      	adds	r3, #57	; 0x39
     fc4:	2201      	movs	r2, #1
     fc6:	4619      	mov	r1, r3
     fc8:	4b09      	ldr	r3, [pc, #36]	; (ff0 <_ZN14MCP23017_Class12readRegisterEh+0x60>)
     fca:	4798      	blx	r3
	while(!i2ca.rxReady);
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	7d5b      	ldrb	r3, [r3, #21]
     fd0:	b2db      	uxtb	r3, r3
     fd2:	f083 0301 	eor.w	r3, r3, #1
     fd6:	b2db      	uxtb	r3, r3
     fd8:	2b00      	cmp	r3, #0
     fda:	d000      	beq.n	fde <_ZN14MCP23017_Class12readRegisterEh+0x4e>
     fdc:	e7f6      	b.n	fcc <_ZN14MCP23017_Class12readRegisterEh+0x3c>
	return registerValue;
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
}
     fe4:	4618      	mov	r0, r3
     fe6:	3708      	adds	r7, #8
     fe8:	46bd      	mov	sp, r7
     fea:	bd80      	pop	{r7, pc}
     fec:	00000c61 	.word	0x00000c61
     ff0:	00000ca5 	.word	0x00000ca5

00000ff4 <_ZN14MCP23017_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
void MCP23017_Class::writeRegister(uint8_t addr, uint8_t value){
     ff4:	b580      	push	{r7, lr}
     ff6:	b084      	sub	sp, #16
     ff8:	af00      	add	r7, sp, #0
     ffa:	6078      	str	r0, [r7, #4]
     ffc:	460b      	mov	r3, r1
     ffe:	70fb      	strb	r3, [r7, #3]
    1000:	4613      	mov	r3, r2
    1002:	70bb      	strb	r3, [r7, #2]
	// Write the register
	isReady=false;
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	2200      	movs	r2, #0
    1008:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
    100a:	78fb      	ldrb	r3, [r7, #3]
    100c:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    100e:	78bb      	ldrb	r3, [r7, #2]
    1010:	737b      	strb	r3, [r7, #13]
	i2ca.Write(array,2);
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	3304      	adds	r3, #4
    1016:	f107 010c 	add.w	r1, r7, #12
    101a:	2202      	movs	r2, #2
    101c:	4618      	mov	r0, r3
    101e:	4b07      	ldr	r3, [pc, #28]	; (103c <_ZN14MCP23017_Class13writeRegisterEhh+0x48>)
    1020:	4798      	blx	r3
	while(!i2ca.txReady);
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	7d1b      	ldrb	r3, [r3, #20]
    1026:	b2db      	uxtb	r3, r3
    1028:	f083 0301 	eor.w	r3, r3, #1
    102c:	b2db      	uxtb	r3, r3
    102e:	2b00      	cmp	r3, #0
    1030:	d000      	beq.n	1034 <_ZN14MCP23017_Class13writeRegisterEhh+0x40>
    1032:	e7f6      	b.n	1022 <_ZN14MCP23017_Class13writeRegisterEhh+0x2e>
}
    1034:	bf00      	nop
    1036:	3710      	adds	r7, #16
    1038:	46bd      	mov	sp, r7
    103a:	bd80      	pop	{r7, pc}
    103c:	00000c61 	.word	0x00000c61

00001040 <_ZN14MCP23017_Class13SetPortAInputEv>:

void	MCP23017_Class::SetPortAInput(void){
    1040:	b580      	push	{r7, lr}
    1042:	b082      	sub	sp, #8
    1044:	af00      	add	r7, sp, #0
    1046:	6078      	str	r0, [r7, #4]
	for (i=0;i<8;i++)
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	2200      	movs	r2, #0
    104c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    1056:	2b07      	cmp	r3, #7
    1058:	dc18      	bgt.n	108c <_ZN14MCP23017_Class13SetPortAInputEv+0x4c>
	{
		pinMode(i,INPUT);
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    1060:	2200      	movs	r2, #0
    1062:	4619      	mov	r1, r3
    1064:	6878      	ldr	r0, [r7, #4]
    1066:	4b0b      	ldr	r3, [pc, #44]	; (1094 <_ZN14MCP23017_Class13SetPortAInputEv+0x54>)
    1068:	4798      	blx	r3
		pullUp(i,HIGH);
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    1070:	2201      	movs	r2, #1
    1072:	4619      	mov	r1, r3
    1074:	6878      	ldr	r0, [r7, #4]
    1076:	4b08      	ldr	r3, [pc, #32]	; (1098 <_ZN14MCP23017_Class13SetPortAInputEv+0x58>)
    1078:	4798      	blx	r3
	for (i=0;i<8;i++)
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    1080:	3301      	adds	r3, #1
    1082:	b2da      	uxtb	r2, r3
    1084:	687b      	ldr	r3, [r7, #4]
    1086:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    108a:	e7e1      	b.n	1050 <_ZN14MCP23017_Class13SetPortAInputEv+0x10>
	}
}
    108c:	bf00      	nop
    108e:	3708      	adds	r7, #8
    1090:	46bd      	mov	sp, r7
    1092:	bd80      	pop	{r7, pc}
    1094:	00001181 	.word	0x00001181
    1098:	00001259 	.word	0x00001259

0000109c <_ZN14MCP23017_Class14SetPortBOutputEv>:
void	MCP23017_Class::SetPortBOutput(void){
    109c:	b580      	push	{r7, lr}
    109e:	b082      	sub	sp, #8
    10a0:	af00      	add	r7, sp, #0
    10a2:	6078      	str	r0, [r7, #4]
	for (i=8;i<16;i++)
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	2208      	movs	r2, #8
    10a8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    10ac:	687b      	ldr	r3, [r7, #4]
    10ae:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    10b2:	2b0f      	cmp	r3, #15
    10b4:	dc10      	bgt.n	10d8 <_ZN14MCP23017_Class14SetPortBOutputEv+0x3c>
	{
		pinMode(i,OUTPUT);
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    10bc:	2201      	movs	r2, #1
    10be:	4619      	mov	r1, r3
    10c0:	6878      	ldr	r0, [r7, #4]
    10c2:	4b07      	ldr	r3, [pc, #28]	; (10e0 <_ZN14MCP23017_Class14SetPortBOutputEv+0x44>)
    10c4:	4798      	blx	r3
	for (i=8;i<16;i++)
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    10cc:	3301      	adds	r3, #1
    10ce:	b2da      	uxtb	r2, r3
    10d0:	687b      	ldr	r3, [r7, #4]
    10d2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    10d6:	e7e9      	b.n	10ac <_ZN14MCP23017_Class14SetPortBOutputEv+0x10>
	}
}
    10d8:	bf00      	nop
    10da:	3708      	adds	r7, #8
    10dc:	46bd      	mov	sp, r7
    10de:	bd80      	pop	{r7, pc}
    10e0:	00001181 	.word	0x00001181

000010e4 <_ZN14MCP23017_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23017_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    10e4:	b590      	push	{r4, r7, lr}
    10e6:	b085      	sub	sp, #20
    10e8:	af00      	add	r7, sp, #0
    10ea:	6078      	str	r0, [r7, #4]
    10ec:	4608      	mov	r0, r1
    10ee:	4611      	mov	r1, r2
    10f0:	461a      	mov	r2, r3
    10f2:	4603      	mov	r3, r0
    10f4:	70fb      	strb	r3, [r7, #3]
    10f6:	460b      	mov	r3, r1
    10f8:	70bb      	strb	r3, [r7, #2]
    10fa:	4613      	mov	r3, r2
    10fc:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
    10fe:	f897 3020 	ldrb.w	r3, [r7, #32]
    1102:	787a      	ldrb	r2, [r7, #1]
    1104:	78f9      	ldrb	r1, [r7, #3]
    1106:	6878      	ldr	r0, [r7, #4]
    1108:	4c19      	ldr	r4, [pc, #100]	; (1170 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x8c>)
    110a:	47a0      	blx	r4
    110c:	4603      	mov	r3, r0
    110e:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    1110:	78fb      	ldrb	r3, [r7, #3]
    1112:	4619      	mov	r1, r3
    1114:	6878      	ldr	r0, [r7, #4]
    1116:	4b17      	ldr	r3, [pc, #92]	; (1174 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x90>)
    1118:	4798      	blx	r3
    111a:	4603      	mov	r3, r0
    111c:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    111e:	7bfb      	ldrb	r3, [r7, #15]
    1120:	4619      	mov	r1, r3
    1122:	6878      	ldr	r0, [r7, #4]
    1124:	4b14      	ldr	r3, [pc, #80]	; (1178 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x94>)
    1126:	4798      	blx	r3
    1128:	4603      	mov	r3, r0
    112a:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    112c:	78bb      	ldrb	r3, [r7, #2]
    112e:	2b00      	cmp	r3, #0
    1130:	d009      	beq.n	1146 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x62>
    1132:	7bba      	ldrb	r2, [r7, #14]
    1134:	7b7b      	ldrb	r3, [r7, #13]
    1136:	4619      	mov	r1, r3
    1138:	2301      	movs	r3, #1
    113a:	408b      	lsls	r3, r1
    113c:	b2db      	uxtb	r3, r3
    113e:	4313      	orrs	r3, r2
    1140:	b2db      	uxtb	r3, r3
    1142:	73bb      	strb	r3, [r7, #14]
    1144:	e00a      	b.n	115c <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x78>
    1146:	7bba      	ldrb	r2, [r7, #14]
    1148:	7b7b      	ldrb	r3, [r7, #13]
    114a:	4619      	mov	r1, r3
    114c:	2301      	movs	r3, #1
    114e:	408b      	lsls	r3, r1
    1150:	b2db      	uxtb	r3, r3
    1152:	43db      	mvns	r3, r3
    1154:	b2db      	uxtb	r3, r3
    1156:	4013      	ands	r3, r2
    1158:	b2db      	uxtb	r3, r3
    115a:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    115c:	7bba      	ldrb	r2, [r7, #14]
    115e:	7bfb      	ldrb	r3, [r7, #15]
    1160:	4619      	mov	r1, r3
    1162:	6878      	ldr	r0, [r7, #4]
    1164:	4b05      	ldr	r3, [pc, #20]	; (117c <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x98>)
    1166:	4798      	blx	r3
}
    1168:	bf00      	nop
    116a:	3714      	adds	r7, #20
    116c:	46bd      	mov	sp, r7
    116e:	bd90      	pop	{r4, r7, pc}
    1170:	00000f5f 	.word	0x00000f5f
    1174:	00000f41 	.word	0x00000f41
    1178:	00000f91 	.word	0x00000f91
    117c:	00000ff5 	.word	0x00000ff5

00001180 <_ZN14MCP23017_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23017_Class::pinMode(uint8_t p, uint8_t d) {
    1180:	b590      	push	{r4, r7, lr}
    1182:	b085      	sub	sp, #20
    1184:	af02      	add	r7, sp, #8
    1186:	6078      	str	r0, [r7, #4]
    1188:	460b      	mov	r3, r1
    118a:	70fb      	strb	r3, [r7, #3]
    118c:	4613      	mov	r3, r2
    118e:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
    1190:	78bb      	ldrb	r3, [r7, #2]
    1192:	2b00      	cmp	r3, #0
    1194:	bf0c      	ite	eq
    1196:	2301      	moveq	r3, #1
    1198:	2300      	movne	r3, #0
    119a:	b2db      	uxtb	r3, r3
    119c:	461a      	mov	r2, r3
    119e:	78f9      	ldrb	r1, [r7, #3]
    11a0:	2301      	movs	r3, #1
    11a2:	9300      	str	r3, [sp, #0]
    11a4:	2300      	movs	r3, #0
    11a6:	6878      	ldr	r0, [r7, #4]
    11a8:	4c02      	ldr	r4, [pc, #8]	; (11b4 <_ZN14MCP23017_Class7pinModeEhh+0x34>)
    11aa:	47a0      	blx	r4
}
    11ac:	bf00      	nop
    11ae:	370c      	adds	r7, #12
    11b0:	46bd      	mov	sp, r7
    11b2:	bd90      	pop	{r4, r7, pc}
    11b4:	000010e5 	.word	0x000010e5

000011b8 <_ZN14MCP23017_Class12digitalWriteEhh>:
	array[2]=(uint8_t)(ba)&(0xff);
	i2ca.Write(array,3);
	//while(!i2ca.txReady);
}

void MCP23017_Class::digitalWrite(uint8_t pin, uint8_t d) {
    11b8:	b590      	push	{r4, r7, lr}
    11ba:	b085      	sub	sp, #20
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
    11c0:	460b      	mov	r3, r1
    11c2:	70fb      	strb	r3, [r7, #3]
    11c4:	4613      	mov	r3, r2
    11c6:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    11c8:	78fb      	ldrb	r3, [r7, #3]
    11ca:	4619      	mov	r1, r3
    11cc:	6878      	ldr	r0, [r7, #4]
    11ce:	4b1e      	ldr	r3, [pc, #120]	; (1248 <_ZN14MCP23017_Class12digitalWriteEhh+0x90>)
    11d0:	4798      	blx	r3
    11d2:	4603      	mov	r3, r0
    11d4:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
    11d6:	78f9      	ldrb	r1, [r7, #3]
    11d8:	2315      	movs	r3, #21
    11da:	2214      	movs	r2, #20
    11dc:	6878      	ldr	r0, [r7, #4]
    11de:	4c1b      	ldr	r4, [pc, #108]	; (124c <_ZN14MCP23017_Class12digitalWriteEhh+0x94>)
    11e0:	47a0      	blx	r4
    11e2:	4603      	mov	r3, r0
    11e4:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    11e6:	7bfb      	ldrb	r3, [r7, #15]
    11e8:	4619      	mov	r1, r3
    11ea:	6878      	ldr	r0, [r7, #4]
    11ec:	4b18      	ldr	r3, [pc, #96]	; (1250 <_ZN14MCP23017_Class12digitalWriteEhh+0x98>)
    11ee:	4798      	blx	r3
    11f0:	4603      	mov	r3, r0
    11f2:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,d);
    11f4:	78bb      	ldrb	r3, [r7, #2]
    11f6:	2b00      	cmp	r3, #0
    11f8:	d009      	beq.n	120e <_ZN14MCP23017_Class12digitalWriteEhh+0x56>
    11fa:	7bba      	ldrb	r2, [r7, #14]
    11fc:	7b7b      	ldrb	r3, [r7, #13]
    11fe:	4619      	mov	r1, r3
    1200:	2301      	movs	r3, #1
    1202:	408b      	lsls	r3, r1
    1204:	b2db      	uxtb	r3, r3
    1206:	4313      	orrs	r3, r2
    1208:	b2db      	uxtb	r3, r3
    120a:	73bb      	strb	r3, [r7, #14]
    120c:	e00a      	b.n	1224 <_ZN14MCP23017_Class12digitalWriteEhh+0x6c>
    120e:	7bba      	ldrb	r2, [r7, #14]
    1210:	7b7b      	ldrb	r3, [r7, #13]
    1212:	4619      	mov	r1, r3
    1214:	2301      	movs	r3, #1
    1216:	408b      	lsls	r3, r1
    1218:	b2db      	uxtb	r3, r3
    121a:	43db      	mvns	r3, r3
    121c:	b2db      	uxtb	r3, r3
    121e:	4013      	ands	r3, r2
    1220:	b2db      	uxtb	r3, r3
    1222:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
    1224:	78f9      	ldrb	r1, [r7, #3]
    1226:	2313      	movs	r3, #19
    1228:	2212      	movs	r2, #18
    122a:	6878      	ldr	r0, [r7, #4]
    122c:	4c07      	ldr	r4, [pc, #28]	; (124c <_ZN14MCP23017_Class12digitalWriteEhh+0x94>)
    122e:	47a0      	blx	r4
    1230:	4603      	mov	r3, r0
    1232:	73fb      	strb	r3, [r7, #15]
	writeRegister(regAddr,gpio);
    1234:	7bba      	ldrb	r2, [r7, #14]
    1236:	7bfb      	ldrb	r3, [r7, #15]
    1238:	4619      	mov	r1, r3
    123a:	6878      	ldr	r0, [r7, #4]
    123c:	4b05      	ldr	r3, [pc, #20]	; (1254 <_ZN14MCP23017_Class12digitalWriteEhh+0x9c>)
    123e:	4798      	blx	r3
}
    1240:	bf00      	nop
    1242:	3714      	adds	r7, #20
    1244:	46bd      	mov	sp, r7
    1246:	bd90      	pop	{r4, r7, pc}
    1248:	00000f41 	.word	0x00000f41
    124c:	00000f5f 	.word	0x00000f5f
    1250:	00000f91 	.word	0x00000f91
    1254:	00000ff5 	.word	0x00000ff5

00001258 <_ZN14MCP23017_Class6pullUpEhh>:

void MCP23017_Class::pullUp(uint8_t p, uint8_t d) {
    1258:	b590      	push	{r4, r7, lr}
    125a:	b085      	sub	sp, #20
    125c:	af02      	add	r7, sp, #8
    125e:	6078      	str	r0, [r7, #4]
    1260:	460b      	mov	r3, r1
    1262:	70fb      	strb	r3, [r7, #3]
    1264:	4613      	mov	r3, r2
    1266:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
    1268:	78ba      	ldrb	r2, [r7, #2]
    126a:	78f9      	ldrb	r1, [r7, #3]
    126c:	230d      	movs	r3, #13
    126e:	9300      	str	r3, [sp, #0]
    1270:	230c      	movs	r3, #12
    1272:	6878      	ldr	r0, [r7, #4]
    1274:	4c02      	ldr	r4, [pc, #8]	; (1280 <_ZN14MCP23017_Class6pullUpEhh+0x28>)
    1276:	47a0      	blx	r4
}
    1278:	bf00      	nop
    127a:	370c      	adds	r7, #12
    127c:	46bd      	mov	sp, r7
    127e:	bd90      	pop	{r4, r7, pc}
    1280:	000010e5 	.word	0x000010e5

00001284 <_ZN14MCP23017_Class11digitalReadEh>:

uint8_t MCP23017_Class::digitalRead(uint8_t pin) {
    1284:	b590      	push	{r4, r7, lr}
    1286:	b085      	sub	sp, #20
    1288:	af00      	add	r7, sp, #0
    128a:	6078      	str	r0, [r7, #4]
    128c:	460b      	mov	r3, r1
    128e:	70fb      	strb	r3, [r7, #3]
	uint8_t bit=bitForPin(pin);
    1290:	78fb      	ldrb	r3, [r7, #3]
    1292:	4619      	mov	r1, r3
    1294:	6878      	ldr	r0, [r7, #4]
    1296:	4b0f      	ldr	r3, [pc, #60]	; (12d4 <_ZN14MCP23017_Class11digitalReadEh+0x50>)
    1298:	4798      	blx	r3
    129a:	4603      	mov	r3, r0
    129c:	73fb      	strb	r3, [r7, #15]
	uint8_t regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
    129e:	78f9      	ldrb	r1, [r7, #3]
    12a0:	2313      	movs	r3, #19
    12a2:	2212      	movs	r2, #18
    12a4:	6878      	ldr	r0, [r7, #4]
    12a6:	4c0c      	ldr	r4, [pc, #48]	; (12d8 <_ZN14MCP23017_Class11digitalReadEh+0x54>)
    12a8:	47a0      	blx	r4
    12aa:	4603      	mov	r3, r0
    12ac:	73bb      	strb	r3, [r7, #14]
	return (readRegister(regAddr) >> bit) & 0x1;
    12ae:	7bbb      	ldrb	r3, [r7, #14]
    12b0:	4619      	mov	r1, r3
    12b2:	6878      	ldr	r0, [r7, #4]
    12b4:	4b09      	ldr	r3, [pc, #36]	; (12dc <_ZN14MCP23017_Class11digitalReadEh+0x58>)
    12b6:	4798      	blx	r3
    12b8:	4603      	mov	r3, r0
    12ba:	461a      	mov	r2, r3
    12bc:	7bfb      	ldrb	r3, [r7, #15]
    12be:	fa42 f303 	asr.w	r3, r2, r3
    12c2:	b2db      	uxtb	r3, r3
    12c4:	f003 0301 	and.w	r3, r3, #1
    12c8:	b2db      	uxtb	r3, r3
}
    12ca:	4618      	mov	r0, r3
    12cc:	3714      	adds	r7, #20
    12ce:	46bd      	mov	sp, r7
    12d0:	bd90      	pop	{r4, r7, pc}
    12d2:	bf00      	nop
    12d4:	00000f41 	.word	0x00000f41
    12d8:	00000f5f 	.word	0x00000f5f
    12dc:	00000f91 	.word	0x00000f91

000012e0 <_ZN14MCP23017_Class8SelfTestEv>:
		return (readRegister(intcapreg)>>bit) & (0x01);
	}

	return MCP23017_INT_ERR;
}
bool	MCP23017_Class::SelfTest(void){
    12e0:	b590      	push	{r4, r7, lr}
    12e2:	b085      	sub	sp, #20
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
	mcp.SetPortAInput();
    12e8:	4824      	ldr	r0, [pc, #144]	; (137c <_ZN14MCP23017_Class8SelfTestEv+0x9c>)
    12ea:	4b25      	ldr	r3, [pc, #148]	; (1380 <_ZN14MCP23017_Class8SelfTestEv+0xa0>)
    12ec:	4798      	blx	r3
	mcp.SetPortBOutput();
    12ee:	4823      	ldr	r0, [pc, #140]	; (137c <_ZN14MCP23017_Class8SelfTestEv+0x9c>)
    12f0:	4b24      	ldr	r3, [pc, #144]	; (1384 <_ZN14MCP23017_Class8SelfTestEv+0xa4>)
    12f2:	4798      	blx	r3
	for (int i = 0; i < 8; i++)
    12f4:	2300      	movs	r3, #0
    12f6:	60fb      	str	r3, [r7, #12]
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	2b07      	cmp	r3, #7
    12fc:	dc13      	bgt.n	1326 <_ZN14MCP23017_Class8SelfTestEv+0x46>
	{
		mcp.digitalWrite(8+i,mcp.digitalRead(i));
    12fe:	68fb      	ldr	r3, [r7, #12]
    1300:	b2db      	uxtb	r3, r3
    1302:	3308      	adds	r3, #8
    1304:	b2dc      	uxtb	r4, r3
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	b2db      	uxtb	r3, r3
    130a:	4619      	mov	r1, r3
    130c:	481b      	ldr	r0, [pc, #108]	; (137c <_ZN14MCP23017_Class8SelfTestEv+0x9c>)
    130e:	4b1e      	ldr	r3, [pc, #120]	; (1388 <_ZN14MCP23017_Class8SelfTestEv+0xa8>)
    1310:	4798      	blx	r3
    1312:	4603      	mov	r3, r0
    1314:	461a      	mov	r2, r3
    1316:	4621      	mov	r1, r4
    1318:	4818      	ldr	r0, [pc, #96]	; (137c <_ZN14MCP23017_Class8SelfTestEv+0x9c>)
    131a:	4b1c      	ldr	r3, [pc, #112]	; (138c <_ZN14MCP23017_Class8SelfTestEv+0xac>)
    131c:	4798      	blx	r3
	for (int i = 0; i < 8; i++)
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	3301      	adds	r3, #1
    1322:	60fb      	str	r3, [r7, #12]
    1324:	e7e8      	b.n	12f8 <_ZN14MCP23017_Class8SelfTestEv+0x18>
	}
		
	controlRegisterA=readRegister(MCP23017_IOCONA);
    1326:	210a      	movs	r1, #10
    1328:	6878      	ldr	r0, [r7, #4]
    132a:	4b19      	ldr	r3, [pc, #100]	; (1390 <_ZN14MCP23017_Class8SelfTestEv+0xb0>)
    132c:	4798      	blx	r3
    132e:	4603      	mov	r3, r0
    1330:	461a      	mov	r2, r3
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	controlRegisterB=readRegister(MCP23017_IOCONB);
    1338:	210b      	movs	r1, #11
    133a:	6878      	ldr	r0, [r7, #4]
    133c:	4b14      	ldr	r3, [pc, #80]	; (1390 <_ZN14MCP23017_Class8SelfTestEv+0xb0>)
    133e:	4798      	blx	r3
    1340:	4603      	mov	r3, r0
    1342:	461a      	mov	r2, r3
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	if (controlRegisterA==controlRegisterB)
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    1350:	687b      	ldr	r3, [r7, #4]
    1352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    1356:	429a      	cmp	r2, r3
    1358:	d104      	bne.n	1364 <_ZN14MCP23017_Class8SelfTestEv+0x84>
		{
			isOK=true;
		} 
		else
		{
			isOK=false;
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	2200      	movs	r2, #0
    135e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    1362:	e003      	b.n	136c <_ZN14MCP23017_Class8SelfTestEv+0x8c>
		}
	} 
	else
	{
		isOK=false;
    1364:	687b      	ldr	r3, [r7, #4]
    1366:	2200      	movs	r2, #0
    1368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	return isOK;
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
}
    1372:	4618      	mov	r0, r3
    1374:	3714      	adds	r7, #20
    1376:	46bd      	mov	sp, r7
    1378:	bd90      	pop	{r4, r7, pc}
    137a:	bf00      	nop
    137c:	2000190c 	.word	0x2000190c
    1380:	00001041 	.word	0x00001041
    1384:	0000109d 	.word	0x0000109d
    1388:	00001285 	.word	0x00001285
    138c:	000011b9 	.word	0x000011b9
    1390:	00000f91 	.word	0x00000f91

00001394 <_Z41__static_initialization_and_destruction_0ii>:
    1394:	b580      	push	{r7, lr}
    1396:	b082      	sub	sp, #8
    1398:	af00      	add	r7, sp, #0
    139a:	6078      	str	r0, [r7, #4]
    139c:	6039      	str	r1, [r7, #0]
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	2b01      	cmp	r3, #1
    13a2:	d10d      	bne.n	13c0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    13a4:	683b      	ldr	r3, [r7, #0]
    13a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    13aa:	4293      	cmp	r3, r2
    13ac:	d108      	bne.n	13c0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    13ae:	4906      	ldr	r1, [pc, #24]	; (13c8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    13b0:	4806      	ldr	r0, [pc, #24]	; (13cc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    13b2:	4b07      	ldr	r3, [pc, #28]	; (13d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    13b4:	4798      	blx	r3
    13b6:	4a07      	ldr	r2, [pc, #28]	; (13d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    13b8:	4907      	ldr	r1, [pc, #28]	; (13d8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    13ba:	4804      	ldr	r0, [pc, #16]	; (13cc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    13bc:	4b07      	ldr	r3, [pc, #28]	; (13dc <_Z41__static_initialization_and_destruction_0ii+0x48>)
    13be:	4798      	blx	r3
    13c0:	bf00      	nop
    13c2:	3708      	adds	r7, #8
    13c4:	46bd      	mov	sp, r7
    13c6:	bd80      	pop	{r7, pc}
    13c8:	200027cc 	.word	0x200027cc
    13cc:	2000190c 	.word	0x2000190c
    13d0:	00000e61 	.word	0x00000e61
    13d4:	20000000 	.word	0x20000000
    13d8:	00000e95 	.word	0x00000e95
    13dc:	0000fc55 	.word	0x0000fc55

000013e0 <_GLOBAL__sub_I_ptrMCP23017Class>:
    13e0:	b580      	push	{r7, lr}
    13e2:	af00      	add	r7, sp, #0
    13e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    13e8:	2001      	movs	r0, #1
    13ea:	4b01      	ldr	r3, [pc, #4]	; (13f0 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
    13ec:	4798      	blx	r3
    13ee:	bd80      	pop	{r7, pc}
    13f0:	00001395 	.word	0x00001395

000013f4 <_ZN13LTC2983_ClassD1Ev>:
LTC2983_Class::LTC2983_Class()
{
} //LTC2983_Class

// default destructor
LTC2983_Class::~LTC2983_Class()
    13f4:	b580      	push	{r7, lr}
    13f6:	b082      	sub	sp, #8
    13f8:	af00      	add	r7, sp, #0
    13fa:	6078      	str	r0, [r7, #4]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	4618      	mov	r0, r3
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_ZN13LTC2983_ClassD1Ev+0x1c>)
    1402:	4798      	blx	r3
{
} //~LTC2983_Class
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	4618      	mov	r0, r3
    1408:	3708      	adds	r7, #8
    140a:	46bd      	mov	sp, r7
    140c:	bd80      	pop	{r7, pc}
    140e:	bf00      	nop
    1410:	000014c5 	.word	0x000014c5

00001414 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor>:

LTC2983_Class::LTC2983_Class(spi_m_async_descriptor *SPI_LTC){
    1414:	b580      	push	{r7, lr}
    1416:	b082      	sub	sp, #8
    1418:	af00      	add	r7, sp, #0
    141a:	6078      	str	r0, [r7, #4]
    141c:	6039      	str	r1, [r7, #0]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	4618      	mov	r0, r3
    1422:	4b06      	ldr	r3, [pc, #24]	; (143c <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x28>)
    1424:	4798      	blx	r3
	ptrLTCClass=this;
    1426:	4a06      	ldr	r2, [pc, #24]	; (1440 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x2c>)
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	6013      	str	r3, [r2, #0]
	SPIA=SPI_LTC;
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	683a      	ldr	r2, [r7, #0]
    1430:	615a      	str	r2, [r3, #20]
	};
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	4618      	mov	r0, r3
    1436:	3708      	adds	r7, #8
    1438:	46bd      	mov	sp, r7
    143a:	bd80      	pop	{r7, pc}
    143c:	000014a5 	.word	0x000014a5
    1440:	20001950 	.word	0x20001950

00001444 <_Z41__static_initialization_and_destruction_0ii>:
	}
	isOK=process_finished==1?true:false;
	return	isOK;
	}

LTC2983_Class	temperatures(&SPI_TEMP);
    1444:	b580      	push	{r7, lr}
    1446:	b082      	sub	sp, #8
    1448:	af00      	add	r7, sp, #0
    144a:	6078      	str	r0, [r7, #4]
    144c:	6039      	str	r1, [r7, #0]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	2b01      	cmp	r3, #1
    1452:	d10d      	bne.n	1470 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1454:	683b      	ldr	r3, [r7, #0]
    1456:	f64f 72ff 	movw	r2, #65535	; 0xffff
    145a:	4293      	cmp	r3, r2
    145c:	d108      	bne.n	1470 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    145e:	4906      	ldr	r1, [pc, #24]	; (1478 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1460:	4806      	ldr	r0, [pc, #24]	; (147c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1462:	4b07      	ldr	r3, [pc, #28]	; (1480 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1464:	4798      	blx	r3
    1466:	4a07      	ldr	r2, [pc, #28]	; (1484 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1468:	4907      	ldr	r1, [pc, #28]	; (1488 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    146a:	4804      	ldr	r0, [pc, #16]	; (147c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    146c:	4b07      	ldr	r3, [pc, #28]	; (148c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    146e:	4798      	blx	r3
    1470:	bf00      	nop
    1472:	3708      	adds	r7, #8
    1474:	46bd      	mov	sp, r7
    1476:	bd80      	pop	{r7, pc}
    1478:	200026b0 	.word	0x200026b0
    147c:	20001954 	.word	0x20001954
    1480:	00001415 	.word	0x00001415
    1484:	20000000 	.word	0x20000000
    1488:	000013f5 	.word	0x000013f5
    148c:	0000fc55 	.word	0x0000fc55

00001490 <_GLOBAL__sub_I_ptrLTCClass>:
    1490:	b580      	push	{r7, lr}
    1492:	af00      	add	r7, sp, #0
    1494:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1498:	2001      	movs	r0, #1
    149a:	4b01      	ldr	r3, [pc, #4]	; (14a0 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
    149c:	4798      	blx	r3
    149e:	bd80      	pop	{r7, pc}
    14a0:	00001445 	.word	0x00001445

000014a4 <_ZN6LT_SPIC1Ev>:

SPI_Asyn_Class LT_SPI::spiTemp;


// default constructor
LT_SPI::LT_SPI()
    14a4:	b480      	push	{r7}
    14a6:	b083      	sub	sp, #12
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
    14ac:	4a04      	ldr	r2, [pc, #16]	; (14c0 <_ZN6LT_SPIC1Ev+0x1c>)
    14ae:	687b      	ldr	r3, [r7, #4]
    14b0:	6013      	str	r3, [r2, #0]
} //LT_SPI
    14b2:	687b      	ldr	r3, [r7, #4]
    14b4:	4618      	mov	r0, r3
    14b6:	370c      	adds	r7, #12
    14b8:	46bd      	mov	sp, r7
    14ba:	bc80      	pop	{r7}
    14bc:	4770      	bx	lr
    14be:	bf00      	nop
    14c0:	2000198c 	.word	0x2000198c

000014c4 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
    14c4:	b480      	push	{r7}
    14c6:	b083      	sub	sp, #12
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
    14cc:	687b      	ldr	r3, [r7, #4]
    14ce:	4618      	mov	r0, r3
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	bc80      	pop	{r7}
    14d6:	4770      	bx	lr

000014d8 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
    14d8:	b580      	push	{r7, lr}
    14da:	b082      	sub	sp, #8
    14dc:	af00      	add	r7, sp, #0
    14de:	6078      	str	r0, [r7, #4]
    14e0:	6039      	str	r1, [r7, #0]
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	2b01      	cmp	r3, #1
    14e6:	d10c      	bne.n	1502 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    14e8:	683b      	ldr	r3, [r7, #0]
    14ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    14ee:	4293      	cmp	r3, r2
    14f0:	d107      	bne.n	1502 <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
    14f2:	4806      	ldr	r0, [pc, #24]	; (150c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    14f4:	4b06      	ldr	r3, [pc, #24]	; (1510 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    14f6:	4798      	blx	r3
    14f8:	4a06      	ldr	r2, [pc, #24]	; (1514 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    14fa:	4907      	ldr	r1, [pc, #28]	; (1518 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    14fc:	4803      	ldr	r0, [pc, #12]	; (150c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    14fe:	4b07      	ldr	r3, [pc, #28]	; (151c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1500:	4798      	blx	r3
}
    1502:	bf00      	nop
    1504:	3708      	adds	r7, #8
    1506:	46bd      	mov	sp, r7
    1508:	bd80      	pop	{r7, pc}
    150a:	bf00      	nop
    150c:	20001990 	.word	0x20001990
    1510:	0000165d 	.word	0x0000165d
    1514:	20000000 	.word	0x20000000
    1518:	0000167d 	.word	0x0000167d
    151c:	0000fc55 	.word	0x0000fc55

00001520 <_GLOBAL__sub_I_ptrLTSPIClass>:
    1520:	b580      	push	{r7, lr}
    1522:	af00      	add	r7, sp, #0
    1524:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1528:	2001      	movs	r0, #1
    152a:	4b01      	ldr	r3, [pc, #4]	; (1530 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
    152c:	4798      	blx	r3
    152e:	bd80      	pop	{r7, pc}
    1530:	000014d9 	.word	0x000014d9

00001534 <main>:
 */ 

#include "main.h"

int main(void)
{
    1534:	b580      	push	{r7, lr}
    1536:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <main+0x20>)
    153a:	4798      	blx	r3
	
	usb.Init();
    153c:	4806      	ldr	r0, [pc, #24]	; (1558 <main+0x24>)
    153e:	4b07      	ldr	r3, [pc, #28]	; (155c <main+0x28>)
    1540:	4798      	blx	r3
	delay_ms(100);
    1542:	2064      	movs	r0, #100	; 0x64
    1544:	4b06      	ldr	r3, [pc, #24]	; (1560 <main+0x2c>)
    1546:	4798      	blx	r3
	StartLivePulse();
    1548:	4b06      	ldr	r3, [pc, #24]	; (1564 <main+0x30>)
    154a:	4798      	blx	r3
	//QSPIDriverTest();
	//DateTimeTest();
//	EEPROM_Test();
	IO_ExpanderTest();
    154c:	4b06      	ldr	r3, [pc, #24]	; (1568 <main+0x34>)
    154e:	4798      	blx	r3
		/* Replace with your application code */
	while (1) {
    1550:	e7fe      	b.n	1550 <main+0x1c>
    1552:	bf00      	nop
    1554:	000029c5 	.word	0x000029c5
    1558:	20001f14 	.word	0x20001f14
    155c:	00001fcd 	.word	0x00001fcd
    1560:	00004381 	.word	0x00004381
    1564:	0000156d 	.word	0x0000156d
    1568:	000015b9 	.word	0x000015b9

0000156c <_Z14StartLivePulsev>:
		
		
	}
}

uint8_t	StartLivePulse(void){
    156c:	b580      	push	{r7, lr}
    156e:	b082      	sub	sp, #8
    1570:	af00      	add	r7, sp, #0
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
    1572:	490a      	ldr	r1, [pc, #40]	; (159c <_Z14StartLivePulsev+0x30>)
    1574:	480a      	ldr	r0, [pc, #40]	; (15a0 <_Z14StartLivePulsev+0x34>)
    1576:	4b0b      	ldr	r3, [pc, #44]	; (15a4 <_Z14StartLivePulsev+0x38>)
    1578:	4798      	blx	r3
    157a:	4603      	mov	r3, r0
    157c:	490a      	ldr	r1, [pc, #40]	; (15a8 <_Z14StartLivePulsev+0x3c>)
    157e:	4618      	mov	r0, r3
    1580:	4b0a      	ldr	r3, [pc, #40]	; (15ac <_Z14StartLivePulsev+0x40>)
    1582:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
    1584:	480a      	ldr	r0, [pc, #40]	; (15b0 <_Z14StartLivePulsev+0x44>)
    1586:	4b0b      	ldr	r3, [pc, #44]	; (15b4 <_Z14StartLivePulsev+0x48>)
    1588:	4798      	blx	r3
    158a:	4603      	mov	r3, r0
    158c:	607b      	str	r3, [r7, #4]
	return p;
    158e:	687b      	ldr	r3, [r7, #4]
    1590:	b2db      	uxtb	r3, r3
}
    1592:	4618      	mov	r0, r3
    1594:	3708      	adds	r7, #8
    1596:	46bd      	mov	sp, r7
    1598:	bd80      	pop	{r7, pc}
    159a:	bf00      	nop
    159c:	0001261c 	.word	0x0001261c
    15a0:	20001f14 	.word	0x20001f14
    15a4:	0000161d 	.word	0x0000161d
    15a8:	0001263c 	.word	0x0001263c
    15ac:	0000163d 	.word	0x0000163d
    15b0:	20002750 	.word	0x20002750
    15b4:	000049d5 	.word	0x000049d5

000015b8 <_Z15IO_ExpanderTestv>:
		
	}
	
}

void	IO_ExpanderTest(void){
    15b8:	b590      	push	{r4, r7, lr}
    15ba:	b083      	sub	sp, #12
    15bc:	af00      	add	r7, sp, #0
	mcp.Init();
    15be:	4811      	ldr	r0, [pc, #68]	; (1604 <_Z15IO_ExpanderTestv+0x4c>)
    15c0:	4b11      	ldr	r3, [pc, #68]	; (1608 <_Z15IO_ExpanderTestv+0x50>)
    15c2:	4798      	blx	r3
	mcp.SetPortAInput();
    15c4:	480f      	ldr	r0, [pc, #60]	; (1604 <_Z15IO_ExpanderTestv+0x4c>)
    15c6:	4b11      	ldr	r3, [pc, #68]	; (160c <_Z15IO_ExpanderTestv+0x54>)
    15c8:	4798      	blx	r3
	mcp.SetPortBOutput();
    15ca:	480e      	ldr	r0, [pc, #56]	; (1604 <_Z15IO_ExpanderTestv+0x4c>)
    15cc:	4b10      	ldr	r3, [pc, #64]	; (1610 <_Z15IO_ExpanderTestv+0x58>)
    15ce:	4798      	blx	r3

	/* Replace with your application code */
	while (1)
	{
		for (int i = 0; i < 8; i++)
    15d0:	2300      	movs	r3, #0
    15d2:	607b      	str	r3, [r7, #4]
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	2b07      	cmp	r3, #7
    15d8:	dcfa      	bgt.n	15d0 <_Z15IO_ExpanderTestv+0x18>
		{
			mcp.digitalWrite(8+i,mcp.digitalRead(i));
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	b2db      	uxtb	r3, r3
    15de:	3308      	adds	r3, #8
    15e0:	b2dc      	uxtb	r4, r3
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	b2db      	uxtb	r3, r3
    15e6:	4619      	mov	r1, r3
    15e8:	4806      	ldr	r0, [pc, #24]	; (1604 <_Z15IO_ExpanderTestv+0x4c>)
    15ea:	4b0a      	ldr	r3, [pc, #40]	; (1614 <_Z15IO_ExpanderTestv+0x5c>)
    15ec:	4798      	blx	r3
    15ee:	4603      	mov	r3, r0
    15f0:	461a      	mov	r2, r3
    15f2:	4621      	mov	r1, r4
    15f4:	4803      	ldr	r0, [pc, #12]	; (1604 <_Z15IO_ExpanderTestv+0x4c>)
    15f6:	4b08      	ldr	r3, [pc, #32]	; (1618 <_Z15IO_ExpanderTestv+0x60>)
    15f8:	4798      	blx	r3
		for (int i = 0; i < 8; i++)
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	3301      	adds	r3, #1
    15fe:	607b      	str	r3, [r7, #4]
    1600:	e7e8      	b.n	15d4 <_Z15IO_ExpanderTestv+0x1c>
    1602:	bf00      	nop
    1604:	2000190c 	.word	0x2000190c
    1608:	00000f19 	.word	0x00000f19
    160c:	00001041 	.word	0x00001041
    1610:	0000109d 	.word	0x0000109d
    1614:	00001285 	.word	0x00001285
    1618:	000011b9 	.word	0x000011b9

0000161c <_ZlsIA30_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
    161c:	b580      	push	{r7, lr}
    161e:	b082      	sub	sp, #8
    1620:	af00      	add	r7, sp, #0
    1622:	6078      	str	r0, [r7, #4]
    1624:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1626:	6839      	ldr	r1, [r7, #0]
    1628:	6878      	ldr	r0, [r7, #4]
    162a:	4b03      	ldr	r3, [pc, #12]	; (1638 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
    162c:	4798      	blx	r3
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	4618      	mov	r0, r3
    1632:	3708      	adds	r7, #8
    1634:	46bd      	mov	sp, r7
    1636:	bd80      	pop	{r7, pc}
    1638:	00002419 	.word	0x00002419

0000163c <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    163c:	b580      	push	{r7, lr}
    163e:	b082      	sub	sp, #8
    1640:	af00      	add	r7, sp, #0
    1642:	6078      	str	r0, [r7, #4]
    1644:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    1646:	6839      	ldr	r1, [r7, #0]
    1648:	6878      	ldr	r0, [r7, #4]
    164a:	4b03      	ldr	r3, [pc, #12]	; (1658 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
    164c:	4798      	blx	r3
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	4618      	mov	r0, r3
    1652:	3708      	adds	r7, #8
    1654:	46bd      	mov	sp, r7
    1656:	bd80      	pop	{r7, pc}
    1658:	00002419 	.word	0x00002419

0000165c <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
    1664:	4a04      	ldr	r2, [pc, #16]	; (1678 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
    166a:	687b      	ldr	r3, [r7, #4]
    166c:	4618      	mov	r0, r3
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	bc80      	pop	{r7}
    1674:	4770      	bx	lr
    1676:	bf00      	nop
    1678:	200019b0 	.word	0x200019b0

0000167c <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
    167c:	b480      	push	{r7}
    167e:	b083      	sub	sp, #12
    1680:	af00      	add	r7, sp, #0
    1682:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
    1684:	687b      	ldr	r3, [r7, #4]
    1686:	4618      	mov	r0, r3
    1688:	370c      	adds	r7, #12
    168a:	46bd      	mov	sp, r7
    168c:	bc80      	pop	{r7}
    168e:	4770      	bx	lr

00001690 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    1690:	b480      	push	{r7}
    1692:	b083      	sub	sp, #12
    1694:	af00      	add	r7, sp, #0
    1696:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    1698:	4a04      	ldr	r2, [pc, #16]	; (16ac <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	4618      	mov	r0, r3
    16a2:	370c      	adds	r7, #12
    16a4:	46bd      	mov	sp, r7
    16a6:	bc80      	pop	{r7}
    16a8:	4770      	bx	lr
    16aa:	bf00      	nop
    16ac:	200019b4 	.word	0x200019b4

000016b0 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    16b0:	b480      	push	{r7}
    16b2:	b083      	sub	sp, #12
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	4618      	mov	r0, r3
    16bc:	370c      	adds	r7, #12
    16be:	46bd      	mov	sp, r7
    16c0:	bc80      	pop	{r7}
    16c2:	4770      	bx	lr

000016c4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
    16c4:	b580      	push	{r7, lr}
    16c6:	b082      	sub	sp, #8
    16c8:	af00      	add	r7, sp, #0
    16ca:	6078      	str	r0, [r7, #4]
    16cc:	6039      	str	r1, [r7, #0]
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	3304      	adds	r3, #4
    16d2:	4618      	mov	r0, r3
    16d4:	4b06      	ldr	r3, [pc, #24]	; (16f0 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
    16d6:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
    16d8:	687b      	ldr	r3, [r7, #4]
    16da:	683a      	ldr	r2, [r7, #0]
    16dc:	635a      	str	r2, [r3, #52]	; 0x34
	ptrAT24MACClass=this;
    16de:	4a05      	ldr	r2, [pc, #20]	; (16f4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
    16e0:	687b      	ldr	r3, [r7, #4]
    16e2:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	4618      	mov	r0, r3
    16e8:	3708      	adds	r7, #8
    16ea:	46bd      	mov	sp, r7
    16ec:	bd80      	pop	{r7, pc}
    16ee:	bf00      	nop
    16f0:	00000ae9 	.word	0x00000ae9
    16f4:	200019b8 	.word	0x200019b8

000016f8 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
    16f8:	b580      	push	{r7, lr}
    16fa:	b082      	sub	sp, #8
    16fc:	af00      	add	r7, sp, #0
    16fe:	6078      	str	r0, [r7, #4]
    1700:	687b      	ldr	r3, [r7, #4]
    1702:	3304      	adds	r3, #4
    1704:	4618      	mov	r0, r3
    1706:	4b03      	ldr	r3, [pc, #12]	; (1714 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
    1708:	4798      	blx	r3
{
} //~AT24MAC_Class
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	4618      	mov	r0, r3
    170e:	3708      	adds	r7, #8
    1710:	46bd      	mov	sp, r7
    1712:	bd80      	pop	{r7, pc}
    1714:	00000b21 	.word	0x00000b21

00001718 <_Z41__static_initialization_and_destruction_0ii>:
		isReady=false;
	}
	return isReady;	
}

    1718:	b580      	push	{r7, lr}
    171a:	b082      	sub	sp, #8
    171c:	af00      	add	r7, sp, #0
    171e:	6078      	str	r0, [r7, #4]
    1720:	6039      	str	r1, [r7, #0]
    1722:	687b      	ldr	r3, [r7, #4]
    1724:	2b01      	cmp	r3, #1
    1726:	d10d      	bne.n	1744 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    172e:	4293      	cmp	r3, r2
    1730:	d108      	bne.n	1744 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1732:	4906      	ldr	r1, [pc, #24]	; (174c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1734:	4806      	ldr	r0, [pc, #24]	; (1750 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1736:	4b07      	ldr	r3, [pc, #28]	; (1754 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1738:	4798      	blx	r3
    173a:	4a07      	ldr	r2, [pc, #28]	; (1758 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    173c:	4907      	ldr	r1, [pc, #28]	; (175c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    173e:	4804      	ldr	r0, [pc, #16]	; (1750 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1740:	4b07      	ldr	r3, [pc, #28]	; (1760 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1742:	4798      	blx	r3
    1744:	bf00      	nop
    1746:	3708      	adds	r7, #8
    1748:	46bd      	mov	sp, r7
    174a:	bd80      	pop	{r7, pc}
    174c:	20002848 	.word	0x20002848
    1750:	200019c0 	.word	0x200019c0
    1754:	000016c5 	.word	0x000016c5
    1758:	20000000 	.word	0x20000000
    175c:	000016f9 	.word	0x000016f9
    1760:	0000fc55 	.word	0x0000fc55

00001764 <_GLOBAL__sub_I_ptrAT24MACClass>:
    1764:	b580      	push	{r7, lr}
    1766:	af00      	add	r7, sp, #0
    1768:	f64f 71ff 	movw	r1, #65535	; 0xffff
    176c:	2001      	movs	r0, #1
    176e:	4b01      	ldr	r3, [pc, #4]	; (1774 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
    1770:	4798      	blx	r3
    1772:	bd80      	pop	{r7, pc}
    1774:	00001719 	.word	0x00001719

00001778 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    1778:	b580      	push	{r7, lr}
    177a:	b082      	sub	sp, #8
    177c:	af00      	add	r7, sp, #0
    177e:	6078      	str	r0, [r7, #4]
    1780:	6039      	str	r1, [r7, #0]
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	3318      	adds	r3, #24
    1786:	4618      	mov	r0, r3
    1788:	4b08      	ldr	r3, [pc, #32]	; (17ac <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    178a:	4798      	blx	r3
{
	appParameters=defaultParameters;
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	4a08      	ldr	r2, [pc, #32]	; (17b0 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    1790:	7812      	ldrb	r2, [r2, #0]
    1792:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	683a      	ldr	r2, [r7, #0]
    1798:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    179a:	4b06      	ldr	r3, [pc, #24]	; (17b4 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    179c:	681a      	ldr	r2, [r3, #0]
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	4618      	mov	r0, r3
    17a6:	3708      	adds	r7, #8
    17a8:	46bd      	mov	sp, r7
    17aa:	bd80      	pop	{r7, pc}
    17ac:	00001691 	.word	0x00001691
    17b0:	000127fc 	.word	0x000127fc
    17b4:	20001a20 	.word	0x20001a20

000017b8 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    17b8:	b580      	push	{r7, lr}
    17ba:	b082      	sub	sp, #8
    17bc:	af00      	add	r7, sp, #0
    17be:	6078      	str	r0, [r7, #4]
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	3318      	adds	r3, #24
    17c4:	4618      	mov	r0, r3
    17c6:	4b03      	ldr	r3, [pc, #12]	; (17d4 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    17c8:	4798      	blx	r3
{
} //~FlashMemoryClass
    17ca:	687b      	ldr	r3, [r7, #4]
    17cc:	4618      	mov	r0, r3
    17ce:	3708      	adds	r7, #8
    17d0:	46bd      	mov	sp, r7
    17d2:	bd80      	pop	{r7, pc}
    17d4:	000016b1 	.word	0x000016b1

000017d8 <_Z41__static_initialization_and_destruction_0ii>:
	flashClose();
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    17d8:	b580      	push	{r7, lr}
    17da:	b082      	sub	sp, #8
    17dc:	af00      	add	r7, sp, #0
    17de:	6078      	str	r0, [r7, #4]
    17e0:	6039      	str	r1, [r7, #0]
    17e2:	687b      	ldr	r3, [r7, #4]
    17e4:	2b01      	cmp	r3, #1
    17e6:	d10d      	bne.n	1804 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    17e8:	683b      	ldr	r3, [r7, #0]
    17ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    17ee:	4293      	cmp	r3, r2
    17f0:	d108      	bne.n	1804 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    17f2:	4906      	ldr	r1, [pc, #24]	; (180c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    17f4:	4806      	ldr	r0, [pc, #24]	; (1810 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    17f6:	4b07      	ldr	r3, [pc, #28]	; (1814 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    17f8:	4798      	blx	r3
    17fa:	4a07      	ldr	r2, [pc, #28]	; (1818 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    17fc:	4907      	ldr	r1, [pc, #28]	; (181c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    17fe:	4804      	ldr	r0, [pc, #16]	; (1810 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1800:	4b07      	ldr	r3, [pc, #28]	; (1820 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1802:	4798      	blx	r3
    1804:	bf00      	nop
    1806:	3708      	adds	r7, #8
    1808:	46bd      	mov	sp, r7
    180a:	bd80      	pop	{r7, pc}
    180c:	20002680 	.word	0x20002680
    1810:	20001a24 	.word	0x20001a24
    1814:	00001779 	.word	0x00001779
    1818:	20000000 	.word	0x20000000
    181c:	000017b9 	.word	0x000017b9
    1820:	0000fc55 	.word	0x0000fc55

00001824 <_GLOBAL__sub_I_flashLayout>:
    1824:	b580      	push	{r7, lr}
    1826:	af00      	add	r7, sp, #0
    1828:	f64f 71ff 	movw	r1, #65535	; 0xffff
    182c:	2001      	movs	r0, #1
    182e:	4b01      	ldr	r3, [pc, #4]	; (1834 <_GLOBAL__sub_I_flashLayout+0x10>)
    1830:	4798      	blx	r3
    1832:	bd80      	pop	{r7, pc}
    1834:	000017d9 	.word	0x000017d9

00001838 <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
    1838:	b580      	push	{r7, lr}
    183a:	b082      	sub	sp, #8
    183c:	af00      	add	r7, sp, #0
    183e:	6078      	str	r0, [r7, #4]
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	3318      	adds	r3, #24
    1844:	4618      	mov	r0, r3
    1846:	4b03      	ldr	r3, [pc, #12]	; (1854 <_ZN17FRAM_Memory_ClassD1Ev+0x1c>)
    1848:	4798      	blx	r3
{
} //~FRAM_Memory_Class
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	4618      	mov	r0, r3
    184e:	3708      	adds	r7, #8
    1850:	46bd      	mov	sp, r7
    1852:	bd80      	pop	{r7, pc}
    1854:	000016b1 	.word	0x000016b1

00001858 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
    1858:	b580      	push	{r7, lr}
    185a:	b082      	sub	sp, #8
    185c:	af00      	add	r7, sp, #0
    185e:	6078      	str	r0, [r7, #4]
    1860:	6039      	str	r1, [r7, #0]
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	3318      	adds	r3, #24
    1866:	4618      	mov	r0, r3
    1868:	4b08      	ldr	r3, [pc, #32]	; (188c <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x34>)
    186a:	4798      	blx	r3
{
	appParameters=defaultParameters;
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	4a08      	ldr	r2, [pc, #32]	; (1890 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x38>)
    1870:	7812      	ldrb	r2, [r2, #0]
    1872:	741a      	strb	r2, [r3, #16]
	spi_descriptor=spi_des;
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	683a      	ldr	r2, [r7, #0]
    1878:	615a      	str	r2, [r3, #20]
	memoryAddress=framMemory;
    187a:	4b06      	ldr	r3, [pc, #24]	; (1894 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x3c>)
    187c:	681a      	ldr	r2, [r3, #0]
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	60da      	str	r2, [r3, #12]
} //FlashMemoryClass
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	4618      	mov	r0, r3
    1886:	3708      	adds	r7, #8
    1888:	46bd      	mov	sp, r7
    188a:	bd80      	pop	{r7, pc}
    188c:	00001691 	.word	0x00001691
    1890:	000127fc 	.word	0x000127fc
    1894:	20001a6c 	.word	0x20001a6c

00001898 <_Z41__static_initialization_and_destruction_0ii>:
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}

    1898:	b580      	push	{r7, lr}
    189a:	b082      	sub	sp, #8
    189c:	af00      	add	r7, sp, #0
    189e:	6078      	str	r0, [r7, #4]
    18a0:	6039      	str	r1, [r7, #0]
    18a2:	687b      	ldr	r3, [r7, #4]
    18a4:	2b01      	cmp	r3, #1
    18a6:	d10d      	bne.n	18c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    18a8:	683b      	ldr	r3, [r7, #0]
    18aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    18ae:	4293      	cmp	r3, r2
    18b0:	d108      	bne.n	18c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    18b2:	4906      	ldr	r1, [pc, #24]	; (18cc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    18b4:	4806      	ldr	r0, [pc, #24]	; (18d0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    18b6:	4b07      	ldr	r3, [pc, #28]	; (18d4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    18b8:	4798      	blx	r3
    18ba:	4a07      	ldr	r2, [pc, #28]	; (18d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    18bc:	4907      	ldr	r1, [pc, #28]	; (18dc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    18be:	4804      	ldr	r0, [pc, #16]	; (18d0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    18c0:	4b07      	ldr	r3, [pc, #28]	; (18e0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    18c2:	4798      	blx	r3
    18c4:	bf00      	nop
    18c6:	3708      	adds	r7, #8
    18c8:	46bd      	mov	sp, r7
    18ca:	bd80      	pop	{r7, pc}
    18cc:	20002680 	.word	0x20002680
    18d0:	20001a70 	.word	0x20001a70
    18d4:	00001859 	.word	0x00001859
    18d8:	20000000 	.word	0x20000000
    18dc:	00001839 	.word	0x00001839
    18e0:	0000fc55 	.word	0x0000fc55

000018e4 <_GLOBAL__sub_I_framMemory>:
    18e4:	b580      	push	{r7, lr}
    18e6:	af00      	add	r7, sp, #0
    18e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    18ec:	2001      	movs	r0, #1
    18ee:	4b01      	ldr	r3, [pc, #4]	; (18f4 <_GLOBAL__sub_I_framMemory+0x10>)
    18f0:	4798      	blx	r3
    18f2:	bd80      	pop	{r7, pc}
    18f4:	00001899 	.word	0x00001899

000018f8 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    18f8:	b480      	push	{r7}
    18fa:	b083      	sub	sp, #12
    18fc:	af00      	add	r7, sp, #0
    18fe:	6078      	str	r0, [r7, #4]
    1900:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	683a      	ldr	r2, [r7, #0]
    1906:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	4a04      	ldr	r2, [pc, #16]	; (191c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    190c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	4618      	mov	r0, r3
    1914:	370c      	adds	r7, #12
    1916:	46bd      	mov	sp, r7
    1918:	bc80      	pop	{r7}
    191a:	4770      	bx	lr
    191c:	001fff00 	.word	0x001fff00

00001920 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    1920:	b480      	push	{r7}
    1922:	b083      	sub	sp, #12
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	4618      	mov	r0, r3
    192c:	370c      	adds	r7, #12
    192e:	46bd      	mov	sp, r7
    1930:	bc80      	pop	{r7}
    1932:	4770      	bx	lr

00001934 <_Z41__static_initialization_and_destruction_0ii>:
		}
					
	}
	return	isOK;
}
    1934:	b580      	push	{r7, lr}
    1936:	b082      	sub	sp, #8
    1938:	af00      	add	r7, sp, #0
    193a:	6078      	str	r0, [r7, #4]
    193c:	6039      	str	r1, [r7, #0]
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	2b01      	cmp	r3, #1
    1942:	d10d      	bne.n	1960 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1944:	683b      	ldr	r3, [r7, #0]
    1946:	f64f 72ff 	movw	r2, #65535	; 0xffff
    194a:	4293      	cmp	r3, r2
    194c:	d108      	bne.n	1960 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    194e:	4906      	ldr	r1, [pc, #24]	; (1968 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1950:	4806      	ldr	r0, [pc, #24]	; (196c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1952:	4b07      	ldr	r3, [pc, #28]	; (1970 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1954:	4798      	blx	r3
    1956:	4a07      	ldr	r2, [pc, #28]	; (1974 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1958:	4907      	ldr	r1, [pc, #28]	; (1978 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    195a:	4804      	ldr	r0, [pc, #16]	; (196c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    195c:	4b07      	ldr	r3, [pc, #28]	; (197c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    195e:	4798      	blx	r3
    1960:	bf00      	nop
    1962:	3708      	adds	r7, #8
    1964:	46bd      	mov	sp, r7
    1966:	bd80      	pop	{r7, pc}
    1968:	20002714 	.word	0x20002714
    196c:	20001af4 	.word	0x20001af4
    1970:	000018f9 	.word	0x000018f9
    1974:	20000000 	.word	0x20000000
    1978:	00001921 	.word	0x00001921
    197c:	0000fc55 	.word	0x0000fc55

00001980 <_GLOBAL__sub_I_ptrN25Q256Class>:
    1980:	b580      	push	{r7, lr}
    1982:	af00      	add	r7, sp, #0
    1984:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1988:	2001      	movs	r0, #1
    198a:	4b01      	ldr	r3, [pc, #4]	; (1990 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    198c:	4798      	blx	r3
    198e:	bd80      	pop	{r7, pc}
    1990:	00001935 	.word	0x00001935

00001994 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:
	ptrCalendarClass=this;
	//ptrMemory=&memory;
} //Calendar_Class

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    1994:	b580      	push	{r7, lr}
    1996:	b082      	sub	sp, #8
    1998:	af00      	add	r7, sp, #0
    199a:	6078      	str	r0, [r7, #4]
    199c:	6039      	str	r1, [r7, #0]
    199e:	687b      	ldr	r3, [r7, #4]
    19a0:	4618      	mov	r0, r3
    19a2:	4b08      	ldr	r3, [pc, #32]	; (19c4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    19a4:	4798      	blx	r3
    19a6:	4a08      	ldr	r2, [pc, #32]	; (19c8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    19a8:	687b      	ldr	r3, [r7, #4]
    19aa:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	683a      	ldr	r2, [r7, #0]
    19b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
    19b4:	4a05      	ldr	r2, [pc, #20]	; (19cc <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	4618      	mov	r0, r3
    19be:	3708      	adds	r7, #8
    19c0:	46bd      	mov	sp, r7
    19c2:	bd80      	pop	{r7, pc}
    19c4:	00001ca9 	.word	0x00001ca9
    19c8:	00012810 	.word	0x00012810
    19cc:	20001d28 	.word	0x20001d28

000019d0 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    19d0:	b580      	push	{r7, lr}
    19d2:	b082      	sub	sp, #8
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
    19d8:	4a05      	ldr	r2, [pc, #20]	; (19f0 <_ZN14Calendar_ClassD1Ev+0x20>)
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	601a      	str	r2, [r3, #0]
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	4618      	mov	r0, r3
    19e2:	4b04      	ldr	r3, [pc, #16]	; (19f4 <_ZN14Calendar_ClassD1Ev+0x24>)
    19e4:	4798      	blx	r3
{
} //~Calendar_Class
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	4618      	mov	r0, r3
    19ea:	3708      	adds	r7, #8
    19ec:	46bd      	mov	sp, r7
    19ee:	bd80      	pop	{r7, pc}
    19f0:	00012810 	.word	0x00012810
    19f4:	00001cc9 	.word	0x00001cc9

000019f8 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    19f8:	b580      	push	{r7, lr}
    19fa:	b082      	sub	sp, #8
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    1a00:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1a08:	6839      	ldr	r1, [r7, #0]
    1a0a:	4618      	mov	r0, r3
    1a0c:	4b03      	ldr	r3, [pc, #12]	; (1a1c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    1a0e:	4798      	blx	r3
    1a10:	4603      	mov	r3, r0
}
    1a12:	4618      	mov	r0, r3
    1a14:	3708      	adds	r7, #8
    1a16:	46bd      	mov	sp, r7
    1a18:	bd80      	pop	{r7, pc}
    1a1a:	bf00      	nop
    1a1c:	000041c5 	.word	0x000041c5

00001a20 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    1a20:	b480      	push	{r7}
    1a22:	b083      	sub	sp, #12
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
    1a28:	460b      	mov	r3, r1
    1a2a:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    1a2c:	887b      	ldrh	r3, [r7, #2]
    1a2e:	f003 0303 	and.w	r3, r3, #3
    1a32:	2b00      	cmp	r3, #0
    1a34:	d001      	beq.n	1a3a <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    1a36:	2300      	movs	r3, #0
    1a38:	e000      	b.n	1a3c <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    1a3a:	2301      	movs	r3, #1
	}
}
    1a3c:	4618      	mov	r0, r3
    1a3e:	370c      	adds	r7, #12
    1a40:	46bd      	mov	sp, r7
    1a42:	bc80      	pop	{r7}
    1a44:	4770      	bx	lr
	...

00001a48 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    1a48:	b580      	push	{r7, lr}
    1a4a:	b086      	sub	sp, #24
    1a4c:	af00      	add	r7, sp, #0
    1a4e:	6078      	str	r0, [r7, #4]
    1a50:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    1a52:	2300      	movs	r3, #0
    1a54:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    1a56:	2300      	movs	r3, #0
    1a58:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    1a5a:	683b      	ldr	r3, [r7, #0]
    1a5c:	88db      	ldrh	r3, [r3, #6]
    1a5e:	b2da      	uxtb	r2, r3
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1a66:	699b      	ldr	r3, [r3, #24]
    1a68:	b2db      	uxtb	r3, r3
    1a6a:	1ad3      	subs	r3, r2, r3
    1a6c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    1a6e:	683b      	ldr	r3, [r7, #0]
    1a70:	795b      	ldrb	r3, [r3, #5]
    1a72:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    1a74:	683b      	ldr	r3, [r7, #0]
    1a76:	791b      	ldrb	r3, [r3, #4]
    1a78:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    1a7a:	683b      	ldr	r3, [r7, #0]
    1a7c:	789b      	ldrb	r3, [r3, #2]
    1a7e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    1a80:	683b      	ldr	r3, [r7, #0]
    1a82:	785b      	ldrb	r3, [r3, #1]
    1a84:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    1a86:	683b      	ldr	r3, [r7, #0]
    1a88:	781b      	ldrb	r3, [r3, #0]
    1a8a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    1a8c:	2300      	movs	r3, #0
    1a8e:	613b      	str	r3, [r7, #16]
    1a90:	7bfa      	ldrb	r2, [r7, #15]
    1a92:	693b      	ldr	r3, [r7, #16]
    1a94:	429a      	cmp	r2, r3
    1a96:	d91e      	bls.n	1ad6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1a9e:	699b      	ldr	r3, [r3, #24]
    1aa0:	b29a      	uxth	r2, r3
    1aa2:	693b      	ldr	r3, [r7, #16]
    1aa4:	b29b      	uxth	r3, r3
    1aa6:	4413      	add	r3, r2
    1aa8:	b29b      	uxth	r3, r3
    1aaa:	4619      	mov	r1, r3
    1aac:	6878      	ldr	r0, [r7, #4]
    1aae:	4b27      	ldr	r3, [pc, #156]	; (1b4c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    1ab0:	4798      	blx	r3
    1ab2:	4603      	mov	r3, r0
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d006      	beq.n	1ac6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    1ab8:	697b      	ldr	r3, [r7, #20]
    1aba:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    1abe:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    1ac2:	617b      	str	r3, [r7, #20]
    1ac4:	e003      	b.n	1ace <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    1ac6:	697a      	ldr	r2, [r7, #20]
    1ac8:	4b21      	ldr	r3, [pc, #132]	; (1b50 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    1aca:	4413      	add	r3, r2
    1acc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    1ace:	693b      	ldr	r3, [r7, #16]
    1ad0:	3301      	adds	r3, #1
    1ad2:	613b      	str	r3, [r7, #16]
    1ad4:	e7dc      	b.n	1a90 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    1ad6:	2301      	movs	r3, #1
    1ad8:	613b      	str	r3, [r7, #16]
    1ada:	7bba      	ldrb	r2, [r7, #14]
    1adc:	693b      	ldr	r3, [r7, #16]
    1ade:	429a      	cmp	r2, r3
    1ae0:	d910      	bls.n	1b04 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    1ae2:	683b      	ldr	r3, [r7, #0]
    1ae4:	88db      	ldrh	r3, [r3, #6]
    1ae6:	4619      	mov	r1, r3
    1ae8:	693b      	ldr	r3, [r7, #16]
    1aea:	b2db      	uxtb	r3, r3
    1aec:	461a      	mov	r2, r3
    1aee:	6878      	ldr	r0, [r7, #4]
    1af0:	4b18      	ldr	r3, [pc, #96]	; (1b54 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    1af2:	4798      	blx	r3
    1af4:	4602      	mov	r2, r0
    1af6:	697b      	ldr	r3, [r7, #20]
    1af8:	4413      	add	r3, r2
    1afa:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    1afc:	693b      	ldr	r3, [r7, #16]
    1afe:	3301      	adds	r3, #1
    1b00:	613b      	str	r3, [r7, #16]
    1b02:	e7ea      	b.n	1ada <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    1b04:	7b7b      	ldrb	r3, [r7, #13]
    1b06:	3b01      	subs	r3, #1
    1b08:	4a13      	ldr	r2, [pc, #76]	; (1b58 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    1b0a:	fb02 f303 	mul.w	r3, r2, r3
    1b0e:	461a      	mov	r2, r3
    1b10:	697b      	ldr	r3, [r7, #20]
    1b12:	4413      	add	r3, r2
    1b14:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    1b16:	7b3b      	ldrb	r3, [r7, #12]
    1b18:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1b1c:	fb02 f303 	mul.w	r3, r2, r3
    1b20:	461a      	mov	r2, r3
    1b22:	697b      	ldr	r3, [r7, #20]
    1b24:	4413      	add	r3, r2
    1b26:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    1b28:	7afa      	ldrb	r2, [r7, #11]
    1b2a:	4613      	mov	r3, r2
    1b2c:	011b      	lsls	r3, r3, #4
    1b2e:	1a9b      	subs	r3, r3, r2
    1b30:	009b      	lsls	r3, r3, #2
    1b32:	461a      	mov	r2, r3
    1b34:	697b      	ldr	r3, [r7, #20]
    1b36:	4413      	add	r3, r2
    1b38:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    1b3a:	7abb      	ldrb	r3, [r7, #10]
    1b3c:	697a      	ldr	r2, [r7, #20]
    1b3e:	4413      	add	r3, r2
    1b40:	617b      	str	r3, [r7, #20]

	return tmp;
    1b42:	697b      	ldr	r3, [r7, #20]
}
    1b44:	4618      	mov	r0, r3
    1b46:	3718      	adds	r7, #24
    1b48:	46bd      	mov	sp, r7
    1b4a:	bd80      	pop	{r7, pc}
    1b4c:	00001a21 	.word	0x00001a21
    1b50:	01e13380 	.word	0x01e13380
    1b54:	00001b5d 	.word	0x00001b5d
    1b58:	00015180 	.word	0x00015180

00001b5c <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b086      	sub	sp, #24
    1b60:	af00      	add	r7, sp, #0
    1b62:	60f8      	str	r0, [r7, #12]
    1b64:	60b9      	str	r1, [r7, #8]
    1b66:	4613      	mov	r3, r2
    1b68:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    1b6a:	2300      	movs	r3, #0
    1b6c:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    1b6e:	68bb      	ldr	r3, [r7, #8]
    1b70:	b29b      	uxth	r3, r3
    1b72:	4619      	mov	r1, r3
    1b74:	68f8      	ldr	r0, [r7, #12]
    1b76:	4b2f      	ldr	r3, [pc, #188]	; (1c34 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    1b78:	4798      	blx	r3
    1b7a:	4603      	mov	r3, r0
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d028      	beq.n	1bd2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    1b80:	79fb      	ldrb	r3, [r7, #7]
    1b82:	3b01      	subs	r3, #1
    1b84:	2b0b      	cmp	r3, #11
    1b86:	d84c      	bhi.n	1c22 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    1b88:	a201      	add	r2, pc, #4	; (adr r2, 1b90 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    1b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1b8e:	bf00      	nop
    1b90:	00001bc1 	.word	0x00001bc1
    1b94:	00001bc7 	.word	0x00001bc7
    1b98:	00001bc1 	.word	0x00001bc1
    1b9c:	00001bcd 	.word	0x00001bcd
    1ba0:	00001bc1 	.word	0x00001bc1
    1ba4:	00001bcd 	.word	0x00001bcd
    1ba8:	00001bc1 	.word	0x00001bc1
    1bac:	00001bc1 	.word	0x00001bc1
    1bb0:	00001bcd 	.word	0x00001bcd
    1bb4:	00001bc1 	.word	0x00001bc1
    1bb8:	00001bcd 	.word	0x00001bcd
    1bbc:	00001bc1 	.word	0x00001bc1
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1bc0:	4b1d      	ldr	r3, [pc, #116]	; (1c38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1bc2:	617b      	str	r3, [r7, #20]
			break;
    1bc4:	e030      	b.n	1c28 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    1bc6:	4b1d      	ldr	r3, [pc, #116]	; (1c3c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    1bc8:	617b      	str	r3, [r7, #20]
			break;
    1bca:	e02d      	b.n	1c28 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    1bcc:	4b1c      	ldr	r3, [pc, #112]	; (1c40 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    1bce:	617b      	str	r3, [r7, #20]
			break;
    1bd0:	e02a      	b.n	1c28 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    1bd2:	79fb      	ldrb	r3, [r7, #7]
    1bd4:	3b01      	subs	r3, #1
    1bd6:	2b0b      	cmp	r3, #11
    1bd8:	d825      	bhi.n	1c26 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    1bda:	a201      	add	r2, pc, #4	; (adr r2, 1be0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    1bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1be0:	00001c11 	.word	0x00001c11
    1be4:	00001c17 	.word	0x00001c17
    1be8:	00001c11 	.word	0x00001c11
    1bec:	00001c1d 	.word	0x00001c1d
    1bf0:	00001c11 	.word	0x00001c11
    1bf4:	00001c1d 	.word	0x00001c1d
    1bf8:	00001c11 	.word	0x00001c11
    1bfc:	00001c11 	.word	0x00001c11
    1c00:	00001c1d 	.word	0x00001c1d
    1c04:	00001c11 	.word	0x00001c11
    1c08:	00001c1d 	.word	0x00001c1d
    1c0c:	00001c11 	.word	0x00001c11
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1c10:	4b09      	ldr	r3, [pc, #36]	; (1c38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1c12:	617b      	str	r3, [r7, #20]
			break;
    1c14:	e008      	b.n	1c28 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    1c16:	4b0b      	ldr	r3, [pc, #44]	; (1c44 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    1c18:	617b      	str	r3, [r7, #20]
			break;
    1c1a:	e005      	b.n	1c28 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    1c1c:	4b08      	ldr	r3, [pc, #32]	; (1c40 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    1c1e:	617b      	str	r3, [r7, #20]
			break;
    1c20:	e002      	b.n	1c28 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    1c22:	bf00      	nop
    1c24:	e000      	b.n	1c28 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    1c26:	bf00      	nop
		}
	}

	return sec_in_month;
    1c28:	697b      	ldr	r3, [r7, #20]
}
    1c2a:	4618      	mov	r0, r3
    1c2c:	3718      	adds	r7, #24
    1c2e:	46bd      	mov	sp, r7
    1c30:	bd80      	pop	{r7, pc}
    1c32:	bf00      	nop
    1c34:	00001a21 	.word	0x00001a21
    1c38:	0028de80 	.word	0x0028de80
    1c3c:	00263b80 	.word	0x00263b80
    1c40:	00278d00 	.word	0x00278d00
    1c44:	0024ea00 	.word	0x0024ea00

00001c48 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
    1c48:	b580      	push	{r7, lr}
    1c4a:	b082      	sub	sp, #8
    1c4c:	af00      	add	r7, sp, #0
    1c4e:	6078      	str	r0, [r7, #4]
    1c50:	6039      	str	r1, [r7, #0]
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	2b01      	cmp	r3, #1
    1c56:	d10d      	bne.n	1c74 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1c58:	683b      	ldr	r3, [r7, #0]
    1c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1c5e:	4293      	cmp	r3, r2
    1c60:	d108      	bne.n	1c74 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1c62:	4906      	ldr	r1, [pc, #24]	; (1c7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1c64:	4806      	ldr	r0, [pc, #24]	; (1c80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1c66:	4b07      	ldr	r3, [pc, #28]	; (1c84 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1c68:	4798      	blx	r3
    1c6a:	4a07      	ldr	r2, [pc, #28]	; (1c88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1c6c:	4907      	ldr	r1, [pc, #28]	; (1c8c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1c6e:	4804      	ldr	r0, [pc, #16]	; (1c80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1c70:	4b07      	ldr	r3, [pc, #28]	; (1c90 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1c72:	4798      	blx	r3
    1c74:	bf00      	nop
    1c76:	3708      	adds	r7, #8
    1c78:	46bd      	mov	sp, r7
    1c7a:	bd80      	pop	{r7, pc}
    1c7c:	20002888 	.word	0x20002888
    1c80:	20001d30 	.word	0x20001d30
    1c84:	00001995 	.word	0x00001995
    1c88:	20000000 	.word	0x20000000
    1c8c:	000019d1 	.word	0x000019d1
    1c90:	0000fc55 	.word	0x0000fc55

00001c94 <_GLOBAL__sub_I_ptrCalendarClass>:
    1c94:	b580      	push	{r7, lr}
    1c96:	af00      	add	r7, sp, #0
    1c98:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1c9c:	2001      	movs	r0, #1
    1c9e:	4b01      	ldr	r3, [pc, #4]	; (1ca4 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    1ca0:	4798      	blx	r3
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	00001c49 	.word	0x00001c49

00001ca8 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    1ca8:	b480      	push	{r7}
    1caa:	b083      	sub	sp, #12
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
    1cb0:	4a04      	ldr	r2, [pc, #16]	; (1cc4 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	601a      	str	r2, [r3, #0]
{
} //~D
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	4618      	mov	r0, r3
    1cba:	370c      	adds	r7, #12
    1cbc:	46bd      	mov	sp, r7
    1cbe:	bc80      	pop	{r7}
    1cc0:	4770      	bx	lr
    1cc2:	bf00      	nop
    1cc4:	00012820 	.word	0x00012820

00001cc8 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    1cc8:	b480      	push	{r7}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	4a04      	ldr	r2, [pc, #16]	; (1ce4 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    1cd6:	687b      	ldr	r3, [r7, #4]
    1cd8:	4618      	mov	r0, r3
    1cda:	370c      	adds	r7, #12
    1cdc:	46bd      	mov	sp, r7
    1cde:	bc80      	pop	{r7}
    1ce0:	4770      	bx	lr
    1ce2:	bf00      	nop
    1ce4:	00012820 	.word	0x00012820

00001ce8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    1ce8:	b480      	push	{r7}
    1cea:	b083      	sub	sp, #12
    1cec:	af00      	add	r7, sp, #0
    1cee:	6078      	str	r0, [r7, #4]
    1cf0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	683a      	ldr	r2, [r7, #0]
    1cf6:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    1cf8:	4a07      	ldr	r2, [pc, #28]	; (1d18 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    1cfa:	687b      	ldr	r3, [r7, #4]
    1cfc:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d04:	615a      	str	r2, [r3, #20]
	task=&countTicks;
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	4a04      	ldr	r2, [pc, #16]	; (1d1c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    1d0a:	619a      	str	r2, [r3, #24]
	//task->cb=task_cb;
} //Timer_Class
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	4618      	mov	r0, r3
    1d10:	370c      	adds	r7, #12
    1d12:	46bd      	mov	sp, r7
    1d14:	bc80      	pop	{r7}
    1d16:	4770      	bx	lr
    1d18:	20001dd8 	.word	0x20001dd8
    1d1c:	20001e7c 	.word	0x20001e7c

00001d20 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    1d20:	b480      	push	{r7}
    1d22:	b083      	sub	sp, #12
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	2200      	movs	r2, #0
    1d2c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	4618      	mov	r0, r3
    1d32:	370c      	adds	r7, #12
    1d34:	46bd      	mov	sp, r7
    1d36:	bc80      	pop	{r7}
    1d38:	4770      	bx	lr
	...

00001d3c <_Z41__static_initialization_and_destruction_0ii>:
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
    1d3c:	b580      	push	{r7, lr}
    1d3e:	b082      	sub	sp, #8
    1d40:	af00      	add	r7, sp, #0
    1d42:	6078      	str	r0, [r7, #4]
    1d44:	6039      	str	r1, [r7, #0]
    1d46:	687b      	ldr	r3, [r7, #4]
    1d48:	2b01      	cmp	r3, #1
    1d4a:	d128      	bne.n	1d9e <_Z41__static_initialization_and_destruction_0ii+0x62>
    1d4c:	683b      	ldr	r3, [r7, #0]
    1d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d52:	4293      	cmp	r3, r2
    1d54:	d123      	bne.n	1d9e <_Z41__static_initialization_and_destruction_0ii+0x62>
Timer_Class eventTimer(&TIMER_EVENT);
    1d56:	4914      	ldr	r1, [pc, #80]	; (1da8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1d58:	4814      	ldr	r0, [pc, #80]	; (1dac <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1d5a:	4b15      	ldr	r3, [pc, #84]	; (1db0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1d5c:	4798      	blx	r3
    1d5e:	4a15      	ldr	r2, [pc, #84]	; (1db4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1d60:	4915      	ldr	r1, [pc, #84]	; (1db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1d62:	4812      	ldr	r0, [pc, #72]	; (1dac <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1d64:	4b15      	ldr	r3, [pc, #84]	; (1dbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1d66:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    1d68:	4915      	ldr	r1, [pc, #84]	; (1dc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    1d6a:	4816      	ldr	r0, [pc, #88]	; (1dc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    1d6c:	4b10      	ldr	r3, [pc, #64]	; (1db0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1d6e:	4798      	blx	r3
    1d70:	4a10      	ldr	r2, [pc, #64]	; (1db4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1d72:	4911      	ldr	r1, [pc, #68]	; (1db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1d74:	4813      	ldr	r0, [pc, #76]	; (1dc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    1d76:	4b11      	ldr	r3, [pc, #68]	; (1dbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1d78:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    1d7a:	4913      	ldr	r1, [pc, #76]	; (1dc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    1d7c:	4813      	ldr	r0, [pc, #76]	; (1dcc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    1d7e:	4b0c      	ldr	r3, [pc, #48]	; (1db0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1d80:	4798      	blx	r3
    1d82:	4a0c      	ldr	r2, [pc, #48]	; (1db4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1d84:	490c      	ldr	r1, [pc, #48]	; (1db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1d86:	4811      	ldr	r0, [pc, #68]	; (1dcc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    1d88:	4b0c      	ldr	r3, [pc, #48]	; (1dbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1d8a:	4798      	blx	r3
    1d8c:	4910      	ldr	r1, [pc, #64]	; (1dd0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    1d8e:	4811      	ldr	r0, [pc, #68]	; (1dd4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    1d90:	4b07      	ldr	r3, [pc, #28]	; (1db0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1d92:	4798      	blx	r3
    1d94:	4a07      	ldr	r2, [pc, #28]	; (1db4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1d96:	4908      	ldr	r1, [pc, #32]	; (1db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1d98:	480e      	ldr	r0, [pc, #56]	; (1dd4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    1d9a:	4b08      	ldr	r3, [pc, #32]	; (1dbc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1d9c:	4798      	blx	r3
    1d9e:	bf00      	nop
    1da0:	3708      	adds	r7, #8
    1da2:	46bd      	mov	sp, r7
    1da4:	bd80      	pop	{r7, pc}
    1da6:	bf00      	nop
    1da8:	20002718 	.word	0x20002718
    1dac:	20001e90 	.word	0x20001e90
    1db0:	00001ce9 	.word	0x00001ce9
    1db4:	20000000 	.word	0x20000000
    1db8:	00001d21 	.word	0x00001d21
    1dbc:	0000fc55 	.word	0x0000fc55
    1dc0:	2000282c 	.word	0x2000282c
    1dc4:	20001eb0 	.word	0x20001eb0
    1dc8:	20002734 	.word	0x20002734
    1dcc:	20001ed0 	.word	0x20001ed0
    1dd0:	20002794 	.word	0x20002794
    1dd4:	20001ef0 	.word	0x20001ef0

00001dd8 <_GLOBAL__sub_I_ptrTimerClass>:
    1dd8:	b580      	push	{r7, lr}
    1dda:	af00      	add	r7, sp, #0
    1ddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1de0:	2001      	movs	r0, #1
    1de2:	4b01      	ldr	r3, [pc, #4]	; (1de8 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    1de4:	4798      	blx	r3
    1de6:	bd80      	pop	{r7, pc}
    1de8:	00001d3d 	.word	0x00001d3d

00001dec <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1dec:	b480      	push	{r7}
    1dee:	b083      	sub	sp, #12
    1df0:	af00      	add	r7, sp, #0
    1df2:	6078      	str	r0, [r7, #4]
    1df4:	4a05      	ldr	r2, [pc, #20]	; (1e0c <_ZN5PrintC1Ev+0x20>)
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	601a      	str	r2, [r3, #0]
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	2200      	movs	r2, #0
    1dfe:	605a      	str	r2, [r3, #4]
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	4618      	mov	r0, r3
    1e04:	370c      	adds	r7, #12
    1e06:	46bd      	mov	sp, r7
    1e08:	bc80      	pop	{r7}
    1e0a:	4770      	bx	lr
    1e0c:	0001289c 	.word	0x0001289c

00001e10 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1e10:	b480      	push	{r7}
    1e12:	b083      	sub	sp, #12
    1e14:	af00      	add	r7, sp, #0
    1e16:	6078      	str	r0, [r7, #4]
    1e18:	2300      	movs	r3, #0
    1e1a:	4618      	mov	r0, r3
    1e1c:	370c      	adds	r7, #12
    1e1e:	46bd      	mov	sp, r7
    1e20:	bc80      	pop	{r7}
    1e22:	4770      	bx	lr

00001e24 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1e24:	b480      	push	{r7}
    1e26:	b083      	sub	sp, #12
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
    1e2c:	bf00      	nop
    1e2e:	370c      	adds	r7, #12
    1e30:	46bd      	mov	sp, r7
    1e32:	bc80      	pop	{r7}
    1e34:	4770      	bx	lr
	...

00001e38 <_ZN6StreamC1Ev>:
    Stream() {_timeout=1000;}
    1e38:	b580      	push	{r7, lr}
    1e3a:	b082      	sub	sp, #8
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	6078      	str	r0, [r7, #4]
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	4618      	mov	r0, r3
    1e44:	4b06      	ldr	r3, [pc, #24]	; (1e60 <_ZN6StreamC1Ev+0x28>)
    1e46:	4798      	blx	r3
    1e48:	4a06      	ldr	r2, [pc, #24]	; (1e64 <_ZN6StreamC1Ev+0x2c>)
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	601a      	str	r2, [r3, #0]
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e54:	609a      	str	r2, [r3, #8]
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	4618      	mov	r0, r3
    1e5a:	3708      	adds	r7, #8
    1e5c:	46bd      	mov	sp, r7
    1e5e:	bd80      	pop	{r7, pc}
    1e60:	00001ded 	.word	0x00001ded
    1e64:	00012860 	.word	0x00012860

00001e68 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    1e68:	b480      	push	{r7}
    1e6a:	b083      	sub	sp, #12
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    1e70:	4b06      	ldr	r3, [pc, #24]	; (1e8c <_ZL10USBTimeoutPK10timer_task+0x24>)
    1e72:	681b      	ldr	r3, [r3, #0]
    1e74:	2201      	movs	r2, #1
    1e76:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    1e78:	4b04      	ldr	r3, [pc, #16]	; (1e8c <_ZL10USBTimeoutPK10timer_task+0x24>)
    1e7a:	681b      	ldr	r3, [r3, #0]
    1e7c:	2200      	movs	r2, #0
    1e7e:	741a      	strb	r2, [r3, #16]
	
}
    1e80:	bf00      	nop
    1e82:	370c      	adds	r7, #12
    1e84:	46bd      	mov	sp, r7
    1e86:	bc80      	pop	{r7}
    1e88:	4770      	bx	lr
    1e8a:	bf00      	nop
    1e8c:	20001f10 	.word	0x20001f10

00001e90 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1e90:	b480      	push	{r7}
    1e92:	b083      	sub	sp, #12
    1e94:	af00      	add	r7, sp, #0
    1e96:	4603      	mov	r3, r0
    1e98:	603a      	str	r2, [r7, #0]
    1e9a:	71fb      	strb	r3, [r7, #7]
    1e9c:	460b      	mov	r3, r1
    1e9e:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    1ea0:	4b08      	ldr	r3, [pc, #32]	; (1ec4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	2201      	movs	r2, #1
    1ea6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    1ea8:	4b06      	ldr	r3, [pc, #24]	; (1ec4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1eaa:	681b      	ldr	r3, [r3, #0]
    1eac:	2201      	movs	r2, #1
    1eae:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    1eb0:	4b04      	ldr	r3, [pc, #16]	; (1ec4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2201      	movs	r2, #1
    1eb6:	741a      	strb	r2, [r3, #16]


	return false;
    1eb8:	2300      	movs	r3, #0
}
    1eba:	4618      	mov	r0, r3
    1ebc:	370c      	adds	r7, #12
    1ebe:	46bd      	mov	sp, r7
    1ec0:	bc80      	pop	{r7}
    1ec2:	4770      	bx	lr
    1ec4:	20001f10 	.word	0x20001f10

00001ec8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1ec8:	b480      	push	{r7}
    1eca:	b083      	sub	sp, #12
    1ecc:	af00      	add	r7, sp, #0
    1ece:	4603      	mov	r3, r0
    1ed0:	603a      	str	r2, [r7, #0]
    1ed2:	71fb      	strb	r3, [r7, #7]
    1ed4:	460b      	mov	r3, r1
    1ed6:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    1ed8:	4b08      	ldr	r3, [pc, #32]	; (1efc <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	2201      	movs	r2, #1
    1ede:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    1ee0:	4b06      	ldr	r3, [pc, #24]	; (1efc <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1ee2:	681b      	ldr	r3, [r3, #0]
    1ee4:	2201      	movs	r2, #1
    1ee6:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    1ee8:	4b04      	ldr	r3, [pc, #16]	; (1efc <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	2201      	movs	r2, #1
    1eee:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    1ef0:	2300      	movs	r3, #0
}
    1ef2:	4618      	mov	r0, r3
    1ef4:	370c      	adds	r7, #12
    1ef6:	46bd      	mov	sp, r7
    1ef8:	bc80      	pop	{r7}
    1efa:	4770      	bx	lr
    1efc:	20001f10 	.word	0x20001f10

00001f00 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    1f00:	b580      	push	{r7, lr}
    1f02:	b082      	sub	sp, #8
    1f04:	af00      	add	r7, sp, #0
    1f06:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    1f08:	793b      	ldrb	r3, [r7, #4]
    1f0a:	f003 0301 	and.w	r3, r3, #1
    1f0e:	b2db      	uxtb	r3, r3
    1f10:	2b00      	cmp	r3, #0
    1f12:	d013      	beq.n	1f3c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    1f14:	490c      	ldr	r1, [pc, #48]	; (1f48 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    1f16:	2000      	movs	r0, #0
    1f18:	4b0c      	ldr	r3, [pc, #48]	; (1f4c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    1f1a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    1f1c:	490c      	ldr	r1, [pc, #48]	; (1f50 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    1f1e:	2001      	movs	r0, #1
    1f20:	4b0a      	ldr	r3, [pc, #40]	; (1f4c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    1f22:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    1f24:	4b0b      	ldr	r3, [pc, #44]	; (1f54 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1f26:	681b      	ldr	r3, [r3, #0]
    1f28:	2201      	movs	r2, #1
    1f2a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    1f2c:	4b09      	ldr	r3, [pc, #36]	; (1f54 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1f2e:	681b      	ldr	r3, [r3, #0]
    1f30:	2201      	movs	r2, #1
    1f32:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    1f34:	4b07      	ldr	r3, [pc, #28]	; (1f54 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1f36:	681b      	ldr	r3, [r3, #0]
    1f38:	2201      	movs	r2, #1
    1f3a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    1f3c:	2300      	movs	r3, #0
}
    1f3e:	4618      	mov	r0, r3
    1f40:	3708      	adds	r7, #8
    1f42:	46bd      	mov	sp, r7
    1f44:	bd80      	pop	{r7, pc}
    1f46:	bf00      	nop
    1f48:	00001e91 	.word	0x00001e91
    1f4c:	0000ead9 	.word	0x0000ead9
    1f50:	00001ec9 	.word	0x00001ec9
    1f54:	20001f10 	.word	0x20001f10

00001f58 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    1f58:	b580      	push	{r7, lr}
    1f5a:	b082      	sub	sp, #8
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	6078      	str	r0, [r7, #4]
    1f60:	687b      	ldr	r3, [r7, #4]
    1f62:	4618      	mov	r0, r3
    1f64:	4b0a      	ldr	r3, [pc, #40]	; (1f90 <_ZN9CDC_ClassC1Ev+0x38>)
    1f66:	4798      	blx	r3
    1f68:	687b      	ldr	r3, [r7, #4]
    1f6a:	3310      	adds	r3, #16
    1f6c:	4618      	mov	r0, r3
    1f6e:	4b09      	ldr	r3, [pc, #36]	; (1f94 <_ZN9CDC_ClassC1Ev+0x3c>)
    1f70:	4798      	blx	r3
    1f72:	4a09      	ldr	r2, [pc, #36]	; (1f98 <_ZN9CDC_ClassC1Ev+0x40>)
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	f04f 32ff 	mov.w	r2, #4294967295
    1f7e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    1f80:	4a06      	ldr	r2, [pc, #24]	; (1f9c <_ZN9CDC_ClassC1Ev+0x44>)
    1f82:	687b      	ldr	r3, [r7, #4]
    1f84:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	4618      	mov	r0, r3
    1f8a:	3708      	adds	r7, #8
    1f8c:	46bd      	mov	sp, r7
    1f8e:	bd80      	pop	{r7, pc}
    1f90:	00001e39 	.word	0x00001e39
    1f94:	000025b1 	.word	0x000025b1
    1f98:	00012830 	.word	0x00012830
    1f9c:	20001f10 	.word	0x20001f10

00001fa0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    1fa0:	b580      	push	{r7, lr}
    1fa2:	b082      	sub	sp, #8
    1fa4:	af00      	add	r7, sp, #0
    1fa6:	6078      	str	r0, [r7, #4]
    1fa8:	4a06      	ldr	r2, [pc, #24]	; (1fc4 <_ZN9CDC_ClassD1Ev+0x24>)
    1faa:	687b      	ldr	r3, [r7, #4]
    1fac:	601a      	str	r2, [r3, #0]
    1fae:	687b      	ldr	r3, [r7, #4]
    1fb0:	3310      	adds	r3, #16
    1fb2:	4618      	mov	r0, r3
    1fb4:	4b04      	ldr	r3, [pc, #16]	; (1fc8 <_ZN9CDC_ClassD1Ev+0x28>)
    1fb6:	4798      	blx	r3
{
} //~CDC_Class
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	4618      	mov	r0, r3
    1fbc:	3708      	adds	r7, #8
    1fbe:	46bd      	mov	sp, r7
    1fc0:	bd80      	pop	{r7, pc}
    1fc2:	bf00      	nop
    1fc4:	00012830 	.word	0x00012830
    1fc8:	000025d1 	.word	0x000025d1

00001fcc <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    1fcc:	b580      	push	{r7, lr}
    1fce:	b082      	sub	sp, #8
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
	
	OnInit();
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	3310      	adds	r3, #16
    1fd8:	4618      	mov	r0, r3
    1fda:	4b07      	ldr	r3, [pc, #28]	; (1ff8 <_ZN9CDC_Class4InitEv+0x2c>)
    1fdc:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    1fde:	4907      	ldr	r1, [pc, #28]	; (1ffc <_ZN9CDC_Class4InitEv+0x30>)
    1fe0:	2003      	movs	r0, #3
    1fe2:	4b07      	ldr	r3, [pc, #28]	; (2000 <_ZN9CDC_Class4InitEv+0x34>)
    1fe4:	4798      	blx	r3
	
		
	if (connected)
    1fe6:	687b      	ldr	r3, [r7, #4]
    1fe8:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
    1fea:	20c8      	movs	r0, #200	; 0xc8
    1fec:	4b05      	ldr	r3, [pc, #20]	; (2004 <_ZN9CDC_Class4InitEv+0x38>)
    1fee:	4798      	blx	r3

}
    1ff0:	bf00      	nop
    1ff2:	3708      	adds	r7, #8
    1ff4:	46bd      	mov	sp, r7
    1ff6:	bd80      	pop	{r7, pc}
    1ff8:	000025e5 	.word	0x000025e5
    1ffc:	00001f01 	.word	0x00001f01
    2000:	0000ead9 	.word	0x0000ead9
    2004:	00004381 	.word	0x00004381

00002008 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    2008:	b580      	push	{r7, lr}
    200a:	b082      	sub	sp, #8
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    2010:	4b03      	ldr	r3, [pc, #12]	; (2020 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    2012:	4798      	blx	r3
    2014:	4603      	mov	r3, r0
	
}
    2016:	4618      	mov	r0, r3
    2018:	3708      	adds	r7, #8
    201a:	46bd      	mov	sp, r7
    201c:	bd80      	pop	{r7, pc}
    201e:	bf00      	nop
    2020:	0000eb51 	.word	0x0000eb51

00002024 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    2024:	b580      	push	{r7, lr}
    2026:	b084      	sub	sp, #16
    2028:	af00      	add	r7, sp, #0
    202a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	699b      	ldr	r3, [r3, #24]
    2030:	f1b3 3fff 	cmp.w	r3, #4294967295
    2034:	bf14      	ite	ne
    2036:	2301      	movne	r3, #1
    2038:	2300      	moveq	r3, #0
    203a:	b2db      	uxtb	r3, r3
    203c:	2b00      	cmp	r3, #0
    203e:	d002      	beq.n	2046 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	699b      	ldr	r3, [r3, #24]
    2044:	e011      	b.n	206a <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    2046:	687b      	ldr	r3, [r7, #4]
    2048:	681b      	ldr	r3, [r3, #0]
    204a:	331c      	adds	r3, #28
    204c:	681b      	ldr	r3, [r3, #0]
    204e:	f107 010f 	add.w	r1, r7, #15
    2052:	2201      	movs	r2, #1
    2054:	6878      	ldr	r0, [r7, #4]
    2056:	4798      	blx	r3
    2058:	4602      	mov	r2, r0
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    205e:	7bfb      	ldrb	r3, [r7, #15]
    2060:	461a      	mov	r2, r3
    2062:	687b      	ldr	r3, [r7, #4]
    2064:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	699b      	ldr	r3, [r3, #24]
}
    206a:	4618      	mov	r0, r3
    206c:	3710      	adds	r7, #16
    206e:	46bd      	mov	sp, r7
    2070:	bd80      	pop	{r7, pc}
	...

00002074 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    2074:	b580      	push	{r7, lr}
    2076:	b086      	sub	sp, #24
    2078:	af00      	add	r7, sp, #0
    207a:	60f8      	str	r0, [r7, #12]
    207c:	60b9      	str	r1, [r7, #8]
    207e:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    2080:	68fb      	ldr	r3, [r7, #12]
    2082:	7c1b      	ldrb	r3, [r3, #16]
    2084:	b2db      	uxtb	r3, r3
    2086:	2b00      	cmp	r3, #0
    2088:	d02e      	beq.n	20e8 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    208a:	687a      	ldr	r2, [r7, #4]
    208c:	4613      	mov	r3, r2
    208e:	009b      	lsls	r3, r3, #2
    2090:	4413      	add	r3, r2
    2092:	005b      	lsls	r3, r3, #1
    2094:	461a      	mov	r2, r3
    2096:	4918      	ldr	r1, [pc, #96]	; (20f8 <_ZN9CDC_Class8readDataEPvl+0x84>)
    2098:	4818      	ldr	r0, [pc, #96]	; (20fc <_ZN9CDC_Class8readDataEPvl+0x88>)
    209a:	4b19      	ldr	r3, [pc, #100]	; (2100 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    209c:	4798      	blx	r3
		rxReady=false;
    209e:	68fb      	ldr	r3, [r7, #12]
    20a0:	2200      	movs	r2, #0
    20a2:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	4619      	mov	r1, r3
    20a8:	68b8      	ldr	r0, [r7, #8]
    20aa:	4b16      	ldr	r3, [pc, #88]	; (2104 <_ZN9CDC_Class8readDataEPvl+0x90>)
    20ac:	4798      	blx	r3
    20ae:	4603      	mov	r3, r0
    20b0:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    20b2:	68fb      	ldr	r3, [r7, #12]
    20b4:	7d5b      	ldrb	r3, [r3, #21]
    20b6:	b2db      	uxtb	r3, r3
    20b8:	f083 0301 	eor.w	r3, r3, #1
    20bc:	b2db      	uxtb	r3, r3
    20be:	2b00      	cmp	r3, #0
    20c0:	d006      	beq.n	20d0 <_ZN9CDC_Class8readDataEPvl+0x5c>
    20c2:	68fb      	ldr	r3, [r7, #12]
    20c4:	7c1b      	ldrb	r3, [r3, #16]
    20c6:	b2db      	uxtb	r3, r3
    20c8:	2b00      	cmp	r3, #0
    20ca:	d001      	beq.n	20d0 <_ZN9CDC_Class8readDataEPvl+0x5c>
    20cc:	2301      	movs	r3, #1
    20ce:	e000      	b.n	20d2 <_ZN9CDC_Class8readDataEPvl+0x5e>
    20d0:	2300      	movs	r3, #0
    20d2:	2b00      	cmp	r3, #0
    20d4:	d000      	beq.n	20d8 <_ZN9CDC_Class8readDataEPvl+0x64>
    20d6:	e7ec      	b.n	20b2 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    20d8:	4808      	ldr	r0, [pc, #32]	; (20fc <_ZN9CDC_Class8readDataEPvl+0x88>)
    20da:	4b0b      	ldr	r3, [pc, #44]	; (2108 <_ZN9CDC_Class8readDataEPvl+0x94>)
    20dc:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    20de:	4906      	ldr	r1, [pc, #24]	; (20f8 <_ZN9CDC_Class8readDataEPvl+0x84>)
    20e0:	4806      	ldr	r0, [pc, #24]	; (20fc <_ZN9CDC_Class8readDataEPvl+0x88>)
    20e2:	4b0a      	ldr	r3, [pc, #40]	; (210c <_ZN9CDC_Class8readDataEPvl+0x98>)
    20e4:	4798      	blx	r3
    20e6:	e001      	b.n	20ec <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    20e8:	2300      	movs	r3, #0
    20ea:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    20ec:	7dfb      	ldrb	r3, [r7, #23]
}
    20ee:	4618      	mov	r0, r3
    20f0:	3718      	adds	r7, #24
    20f2:	46bd      	mov	sp, r7
    20f4:	bd80      	pop	{r7, pc}
    20f6:	bf00      	nop
    20f8:	00001e69 	.word	0x00001e69
    20fc:	2000201c 	.word	0x2000201c
    2100:	000027e9 	.word	0x000027e9
    2104:	0000ea2d 	.word	0x0000ea2d
    2108:	00002731 	.word	0x00002731
    210c:	00002821 	.word	0x00002821

00002110 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    2110:	b580      	push	{r7, lr}
    2112:	b084      	sub	sp, #16
    2114:	af00      	add	r7, sp, #0
    2116:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	2200      	movs	r2, #0
    211c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    211e:	f107 030f 	add.w	r3, r7, #15
    2122:	2101      	movs	r1, #1
    2124:	4618      	mov	r0, r3
    2126:	4b08      	ldr	r3, [pc, #32]	; (2148 <_ZN9CDC_Class4readEv+0x38>)
    2128:	4798      	blx	r3
	while(!rxReady);
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	7d5b      	ldrb	r3, [r3, #21]
    212e:	b2db      	uxtb	r3, r3
    2130:	f083 0301 	eor.w	r3, r3, #1
    2134:	b2db      	uxtb	r3, r3
    2136:	2b00      	cmp	r3, #0
    2138:	d000      	beq.n	213c <_ZN9CDC_Class4readEv+0x2c>
    213a:	e7f6      	b.n	212a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    213c:	7bfb      	ldrb	r3, [r7, #15]
}
    213e:	4618      	mov	r0, r3
    2140:	3710      	adds	r7, #16
    2142:	46bd      	mov	sp, r7
    2144:	bd80      	pop	{r7, pc}
    2146:	bf00      	nop
    2148:	0000ea2d 	.word	0x0000ea2d

0000214c <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    214c:	b580      	push	{r7, lr}
    214e:	b082      	sub	sp, #8
    2150:	af00      	add	r7, sp, #0
    2152:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	331c      	adds	r3, #28
    2158:	2140      	movs	r1, #64	; 0x40
    215a:	4618      	mov	r0, r3
    215c:	4b02      	ldr	r3, [pc, #8]	; (2168 <_ZN9CDC_Class5flushEv+0x1c>)
    215e:	4798      	blx	r3
}
    2160:	bf00      	nop
    2162:	3708      	adds	r7, #8
    2164:	46bd      	mov	sp, r7
    2166:	bd80      	pop	{r7, pc}
    2168:	0000ea71 	.word	0x0000ea71

0000216c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    216c:	b580      	push	{r7, lr}
    216e:	b082      	sub	sp, #8
    2170:	af00      	add	r7, sp, #0
    2172:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    2174:	4b02      	ldr	r3, [pc, #8]	; (2180 <_ZN9CDC_Class5clearEv+0x14>)
    2176:	4798      	blx	r3
}
    2178:	bf00      	nop
    217a:	3708      	adds	r7, #8
    217c:	46bd      	mov	sp, r7
    217e:	bd80      	pop	{r7, pc}
    2180:	0000eab5 	.word	0x0000eab5

00002184 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    2184:	b580      	push	{r7, lr}
    2186:	b082      	sub	sp, #8
    2188:	af00      	add	r7, sp, #0
    218a:	6078      	str	r0, [r7, #4]
    218c:	460b      	mov	r3, r1
    218e:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	7d1b      	ldrb	r3, [r3, #20]
    2194:	b2db      	uxtb	r3, r3
    2196:	f083 0301 	eor.w	r3, r3, #1
    219a:	b2db      	uxtb	r3, r3
    219c:	2b00      	cmp	r3, #0
    219e:	d000      	beq.n	21a2 <_ZN9CDC_Class5writeEh+0x1e>
    21a0:	e7f6      	b.n	2190 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	681b      	ldr	r3, [r3, #0]
    21a6:	3324      	adds	r3, #36	; 0x24
    21a8:	681b      	ldr	r3, [r3, #0]
    21aa:	1cf9      	adds	r1, r7, #3
    21ac:	2201      	movs	r2, #1
    21ae:	6878      	ldr	r0, [r7, #4]
    21b0:	4798      	blx	r3
    21b2:	4603      	mov	r3, r0
}
    21b4:	4618      	mov	r0, r3
    21b6:	3708      	adds	r7, #8
    21b8:	46bd      	mov	sp, r7
    21ba:	bd80      	pop	{r7, pc}

000021bc <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    21bc:	b580      	push	{r7, lr}
    21be:	b086      	sub	sp, #24
    21c0:	af00      	add	r7, sp, #0
    21c2:	60f8      	str	r0, [r7, #12]
    21c4:	60b9      	str	r1, [r7, #8]
    21c6:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    21c8:	68fb      	ldr	r3, [r7, #12]
    21ca:	7c1b      	ldrb	r3, [r3, #16]
    21cc:	b2db      	uxtb	r3, r3
    21ce:	2b00      	cmp	r3, #0
    21d0:	d02f      	beq.n	2232 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    21d2:	687a      	ldr	r2, [r7, #4]
    21d4:	4613      	mov	r3, r2
    21d6:	009b      	lsls	r3, r3, #2
    21d8:	4413      	add	r3, r2
    21da:	005b      	lsls	r3, r3, #1
    21dc:	461a      	mov	r2, r3
    21de:	4917      	ldr	r1, [pc, #92]	; (223c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    21e0:	4817      	ldr	r0, [pc, #92]	; (2240 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    21e2:	4b18      	ldr	r3, [pc, #96]	; (2244 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    21e4:	4798      	blx	r3
		txReady=false;
    21e6:	68fb      	ldr	r3, [r7, #12]
    21e8:	2200      	movs	r2, #0
    21ea:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	4619      	mov	r1, r3
    21f0:	68b8      	ldr	r0, [r7, #8]
    21f2:	4b15      	ldr	r3, [pc, #84]	; (2248 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    21f4:	4798      	blx	r3
    21f6:	4603      	mov	r3, r0
    21f8:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    21fa:	68fb      	ldr	r3, [r7, #12]
    21fc:	7d1b      	ldrb	r3, [r3, #20]
    21fe:	b2db      	uxtb	r3, r3
    2200:	f083 0301 	eor.w	r3, r3, #1
    2204:	b2db      	uxtb	r3, r3
    2206:	2b00      	cmp	r3, #0
    2208:	d006      	beq.n	2218 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    220a:	68fb      	ldr	r3, [r7, #12]
    220c:	7c1b      	ldrb	r3, [r3, #16]
    220e:	b2db      	uxtb	r3, r3
    2210:	2b00      	cmp	r3, #0
    2212:	d001      	beq.n	2218 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    2214:	2301      	movs	r3, #1
    2216:	e000      	b.n	221a <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    2218:	2300      	movs	r3, #0
    221a:	2b00      	cmp	r3, #0
    221c:	d000      	beq.n	2220 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    221e:	e7ec      	b.n	21fa <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    2220:	4807      	ldr	r0, [pc, #28]	; (2240 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    2222:	4b0a      	ldr	r3, [pc, #40]	; (224c <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    2224:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    2226:	4905      	ldr	r1, [pc, #20]	; (223c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    2228:	4805      	ldr	r0, [pc, #20]	; (2240 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    222a:	4b09      	ldr	r3, [pc, #36]	; (2250 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    222c:	4798      	blx	r3
		return r;
    222e:	697b      	ldr	r3, [r7, #20]
    2230:	e000      	b.n	2234 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    2232:	2300      	movs	r3, #0
	}
	

}
    2234:	4618      	mov	r0, r3
    2236:	3718      	adds	r7, #24
    2238:	46bd      	mov	sp, r7
    223a:	bd80      	pop	{r7, pc}
    223c:	00001e69 	.word	0x00001e69
    2240:	2000201c 	.word	0x2000201c
    2244:	000027e9 	.word	0x000027e9
    2248:	0000ea71 	.word	0x0000ea71
    224c:	00002731 	.word	0x00002731
    2250:	00002821 	.word	0x00002821

00002254 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    2254:	b580      	push	{r7, lr}
    2256:	b086      	sub	sp, #24
    2258:	af00      	add	r7, sp, #0
    225a:	60f8      	str	r0, [r7, #12]
    225c:	60b9      	str	r1, [r7, #8]
    225e:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    2260:	68fb      	ldr	r3, [r7, #12]
    2262:	2200      	movs	r2, #0
    2264:	751a      	strb	r2, [r3, #20]

 	if (connected){
    2266:	68fb      	ldr	r3, [r7, #12]
    2268:	7c1b      	ldrb	r3, [r3, #16]
    226a:	b2db      	uxtb	r3, r3
    226c:	2b00      	cmp	r3, #0
    226e:	d02a      	beq.n	22c6 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    2270:	687a      	ldr	r2, [r7, #4]
    2272:	4613      	mov	r3, r2
    2274:	009b      	lsls	r3, r3, #2
    2276:	4413      	add	r3, r2
    2278:	005b      	lsls	r3, r3, #1
    227a:	461a      	mov	r2, r3
    227c:	4915      	ldr	r1, [pc, #84]	; (22d4 <_ZN9CDC_Class5writeEPKhj+0x80>)
    227e:	4816      	ldr	r0, [pc, #88]	; (22d8 <_ZN9CDC_Class5writeEPKhj+0x84>)
    2280:	4b16      	ldr	r3, [pc, #88]	; (22dc <_ZN9CDC_Class5writeEPKhj+0x88>)
    2282:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    2284:	6879      	ldr	r1, [r7, #4]
    2286:	68b8      	ldr	r0, [r7, #8]
    2288:	4b15      	ldr	r3, [pc, #84]	; (22e0 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    228a:	4798      	blx	r3
    228c:	4603      	mov	r3, r0
    228e:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    2290:	68fb      	ldr	r3, [r7, #12]
    2292:	7d1b      	ldrb	r3, [r3, #20]
    2294:	b2db      	uxtb	r3, r3
    2296:	f083 0301 	eor.w	r3, r3, #1
    229a:	b2db      	uxtb	r3, r3
    229c:	2b00      	cmp	r3, #0
    229e:	d006      	beq.n	22ae <_ZN9CDC_Class5writeEPKhj+0x5a>
    22a0:	68fb      	ldr	r3, [r7, #12]
    22a2:	7c1b      	ldrb	r3, [r3, #16]
    22a4:	b2db      	uxtb	r3, r3
    22a6:	2b00      	cmp	r3, #0
    22a8:	d001      	beq.n	22ae <_ZN9CDC_Class5writeEPKhj+0x5a>
    22aa:	2301      	movs	r3, #1
    22ac:	e000      	b.n	22b0 <_ZN9CDC_Class5writeEPKhj+0x5c>
    22ae:	2300      	movs	r3, #0
    22b0:	2b00      	cmp	r3, #0
    22b2:	d000      	beq.n	22b6 <_ZN9CDC_Class5writeEPKhj+0x62>
    22b4:	e7ec      	b.n	2290 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    22b6:	4808      	ldr	r0, [pc, #32]	; (22d8 <_ZN9CDC_Class5writeEPKhj+0x84>)
    22b8:	4b0a      	ldr	r3, [pc, #40]	; (22e4 <_ZN9CDC_Class5writeEPKhj+0x90>)
    22ba:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    22bc:	4905      	ldr	r1, [pc, #20]	; (22d4 <_ZN9CDC_Class5writeEPKhj+0x80>)
    22be:	4806      	ldr	r0, [pc, #24]	; (22d8 <_ZN9CDC_Class5writeEPKhj+0x84>)
    22c0:	4b09      	ldr	r3, [pc, #36]	; (22e8 <_ZN9CDC_Class5writeEPKhj+0x94>)
    22c2:	4798      	blx	r3
    22c4:	e001      	b.n	22ca <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    22c6:	2300      	movs	r3, #0
    22c8:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    22ca:	697b      	ldr	r3, [r7, #20]
}
    22cc:	4618      	mov	r0, r3
    22ce:	3718      	adds	r7, #24
    22d0:	46bd      	mov	sp, r7
    22d2:	bd80      	pop	{r7, pc}
    22d4:	00001e69 	.word	0x00001e69
    22d8:	2000201c 	.word	0x2000201c
    22dc:	000027e9 	.word	0x000027e9
    22e0:	0000ea71 	.word	0x0000ea71
    22e4:	00002731 	.word	0x00002731
    22e8:	00002821 	.word	0x00002821

000022ec <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    22ec:	b480      	push	{r7}
    22ee:	b083      	sub	sp, #12
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	7d5b      	ldrb	r3, [r3, #21]
    22f8:	b2db      	uxtb	r3, r3
    22fa:	2b00      	cmp	r3, #0
    22fc:	d006      	beq.n	230c <_ZN9CDC_Class9availableEv+0x20>
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	7d1b      	ldrb	r3, [r3, #20]
    2302:	b2db      	uxtb	r3, r3
    2304:	2b00      	cmp	r3, #0
    2306:	d001      	beq.n	230c <_ZN9CDC_Class9availableEv+0x20>
    2308:	2301      	movs	r3, #1
    230a:	e000      	b.n	230e <_ZN9CDC_Class9availableEv+0x22>
    230c:	2300      	movs	r3, #0
    230e:	2b00      	cmp	r3, #0
    2310:	d001      	beq.n	2316 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    2312:	2301      	movs	r3, #1
    2314:	e000      	b.n	2318 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    2316:	2300      	movs	r3, #0
	}
	
}
    2318:	4618      	mov	r0, r3
    231a:	370c      	adds	r7, #12
    231c:	46bd      	mov	sp, r7
    231e:	bc80      	pop	{r7}
    2320:	4770      	bx	lr
	...

00002324 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    2324:	b580      	push	{r7, lr}
    2326:	b082      	sub	sp, #8
    2328:	af00      	add	r7, sp, #0
    232a:	6078      	str	r0, [r7, #4]
    232c:	6039      	str	r1, [r7, #0]
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	2b01      	cmp	r3, #1
    2332:	d10c      	bne.n	234e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2334:	683b      	ldr	r3, [r7, #0]
    2336:	f64f 72ff 	movw	r2, #65535	; 0xffff
    233a:	4293      	cmp	r3, r2
    233c:	d107      	bne.n	234e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    233e:	4806      	ldr	r0, [pc, #24]	; (2358 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2340:	4b06      	ldr	r3, [pc, #24]	; (235c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2342:	4798      	blx	r3
    2344:	4a06      	ldr	r2, [pc, #24]	; (2360 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2346:	4907      	ldr	r1, [pc, #28]	; (2364 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2348:	4803      	ldr	r0, [pc, #12]	; (2358 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    234a:	4b07      	ldr	r3, [pc, #28]	; (2368 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    234c:	4798      	blx	r3
    234e:	bf00      	nop
    2350:	3708      	adds	r7, #8
    2352:	46bd      	mov	sp, r7
    2354:	bd80      	pop	{r7, pc}
    2356:	bf00      	nop
    2358:	20001f14 	.word	0x20001f14
    235c:	00001f59 	.word	0x00001f59
    2360:	20000000 	.word	0x20000000
    2364:	00001fa1 	.word	0x00001fa1
    2368:	0000fc55 	.word	0x0000fc55

0000236c <_GLOBAL__sub_I_ptrCDCClass>:
    236c:	b580      	push	{r7, lr}
    236e:	af00      	add	r7, sp, #0
    2370:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2374:	2001      	movs	r0, #1
    2376:	4b01      	ldr	r3, [pc, #4]	; (237c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    2378:	4798      	blx	r3
    237a:	bd80      	pop	{r7, pc}
    237c:	00002325 	.word	0x00002325

00002380 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    2380:	b590      	push	{r4, r7, lr}
    2382:	b083      	sub	sp, #12
    2384:	af00      	add	r7, sp, #0
    2386:	6078      	str	r0, [r7, #4]
    2388:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    238a:	683b      	ldr	r3, [r7, #0]
    238c:	2b00      	cmp	r3, #0
    238e:	d101      	bne.n	2394 <_ZN5Print5writeEPKc+0x14>
    2390:	2300      	movs	r3, #0
    2392:	e00c      	b.n	23ae <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	681b      	ldr	r3, [r3, #0]
    2398:	3304      	adds	r3, #4
    239a:	681c      	ldr	r4, [r3, #0]
    239c:	6838      	ldr	r0, [r7, #0]
    239e:	4b06      	ldr	r3, [pc, #24]	; (23b8 <_ZN5Print5writeEPKc+0x38>)
    23a0:	4798      	blx	r3
    23a2:	4603      	mov	r3, r0
    23a4:	461a      	mov	r2, r3
    23a6:	6839      	ldr	r1, [r7, #0]
    23a8:	6878      	ldr	r0, [r7, #4]
    23aa:	47a0      	blx	r4
    23ac:	4603      	mov	r3, r0
    }
    23ae:	4618      	mov	r0, r3
    23b0:	370c      	adds	r7, #12
    23b2:	46bd      	mov	sp, r7
    23b4:	bd90      	pop	{r4, r7, pc}
    23b6:	bf00      	nop
    23b8:	00011941 	.word	0x00011941

000023bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    23bc:	b580      	push	{r7, lr}
    23be:	b086      	sub	sp, #24
    23c0:	af00      	add	r7, sp, #0
    23c2:	60f8      	str	r0, [r7, #12]
    23c4:	60b9      	str	r1, [r7, #8]
    23c6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    23c8:	2300      	movs	r3, #0
    23ca:	617b      	str	r3, [r7, #20]
  while (size--) {
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	1e5a      	subs	r2, r3, #1
    23d0:	607a      	str	r2, [r7, #4]
    23d2:	2b00      	cmp	r3, #0
    23d4:	bf14      	ite	ne
    23d6:	2301      	movne	r3, #1
    23d8:	2300      	moveq	r3, #0
    23da:	b2db      	uxtb	r3, r3
    23dc:	2b00      	cmp	r3, #0
    23de:	d016      	beq.n	240e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    23e0:	68fb      	ldr	r3, [r7, #12]
    23e2:	681b      	ldr	r3, [r3, #0]
    23e4:	681a      	ldr	r2, [r3, #0]
    23e6:	68bb      	ldr	r3, [r7, #8]
    23e8:	1c59      	adds	r1, r3, #1
    23ea:	60b9      	str	r1, [r7, #8]
    23ec:	781b      	ldrb	r3, [r3, #0]
    23ee:	4619      	mov	r1, r3
    23f0:	68f8      	ldr	r0, [r7, #12]
    23f2:	4790      	blx	r2
    23f4:	4603      	mov	r3, r0
    23f6:	2b00      	cmp	r3, #0
    23f8:	bf14      	ite	ne
    23fa:	2301      	movne	r3, #1
    23fc:	2300      	moveq	r3, #0
    23fe:	b2db      	uxtb	r3, r3
    2400:	2b00      	cmp	r3, #0
    2402:	d003      	beq.n	240c <_ZN5Print5writeEPKhj+0x50>
    2404:	697b      	ldr	r3, [r7, #20]
    2406:	3301      	adds	r3, #1
    2408:	617b      	str	r3, [r7, #20]
  while (size--) {
    240a:	e7df      	b.n	23cc <_ZN5Print5writeEPKhj+0x10>
    else break;
    240c:	bf00      	nop
  }
  return n;
    240e:	697b      	ldr	r3, [r7, #20]
}
    2410:	4618      	mov	r0, r3
    2412:	3718      	adds	r7, #24
    2414:	46bd      	mov	sp, r7
    2416:	bd80      	pop	{r7, pc}

00002418 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    2418:	b580      	push	{r7, lr}
    241a:	b082      	sub	sp, #8
    241c:	af00      	add	r7, sp, #0
    241e:	6078      	str	r0, [r7, #4]
    2420:	6039      	str	r1, [r7, #0]
  return write(str);
    2422:	6839      	ldr	r1, [r7, #0]
    2424:	6878      	ldr	r0, [r7, #4]
    2426:	4b03      	ldr	r3, [pc, #12]	; (2434 <_ZN5Print5printEPKc+0x1c>)
    2428:	4798      	blx	r3
    242a:	4603      	mov	r3, r0
}
    242c:	4618      	mov	r0, r3
    242e:	3708      	adds	r7, #8
    2430:	46bd      	mov	sp, r7
    2432:	bd80      	pop	{r7, pc}
    2434:	00002381 	.word	0x00002381

00002438 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    2438:	b480      	push	{r7}
    243a:	b083      	sub	sp, #12
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
    2440:	460b      	mov	r3, r1
    2442:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2444:	78fb      	ldrb	r3, [r7, #3]
    2446:	687a      	ldr	r2, [r7, #4]
    2448:	01db      	lsls	r3, r3, #7
    244a:	4413      	add	r3, r2
    244c:	681b      	ldr	r3, [r3, #0]
}
    244e:	4618      	mov	r0, r3
    2450:	370c      	adds	r7, #12
    2452:	46bd      	mov	sp, r7
    2454:	bc80      	pop	{r7}
    2456:	4770      	bx	lr

00002458 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    2458:	b480      	push	{r7}
    245a:	b083      	sub	sp, #12
    245c:	af00      	add	r7, sp, #0
    245e:	6078      	str	r0, [r7, #4]
    2460:	460b      	mov	r3, r1
    2462:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2464:	78fb      	ldrb	r3, [r7, #3]
    2466:	687a      	ldr	r2, [r7, #4]
    2468:	01db      	lsls	r3, r3, #7
    246a:	4413      	add	r3, r2
    246c:	3310      	adds	r3, #16
    246e:	681b      	ldr	r3, [r3, #0]
}
    2470:	4618      	mov	r0, r3
    2472:	370c      	adds	r7, #12
    2474:	46bd      	mov	sp, r7
    2476:	bc80      	pop	{r7}
    2478:	4770      	bx	lr

0000247a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    247a:	b480      	push	{r7}
    247c:	b083      	sub	sp, #12
    247e:	af00      	add	r7, sp, #0
    2480:	6078      	str	r0, [r7, #4]
    2482:	460b      	mov	r3, r1
    2484:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2486:	78fb      	ldrb	r3, [r7, #3]
    2488:	687a      	ldr	r2, [r7, #4]
    248a:	01db      	lsls	r3, r3, #7
    248c:	4413      	add	r3, r2
    248e:	3320      	adds	r3, #32
    2490:	681b      	ldr	r3, [r3, #0]
}
    2492:	4618      	mov	r0, r3
    2494:	370c      	adds	r7, #12
    2496:	46bd      	mov	sp, r7
    2498:	bc80      	pop	{r7}
    249a:	4770      	bx	lr

0000249c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    249c:	b580      	push	{r7, lr}
    249e:	b086      	sub	sp, #24
    24a0:	af00      	add	r7, sp, #0
    24a2:	4603      	mov	r3, r0
    24a4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    24a6:	f107 030c 	add.w	r3, r7, #12
    24aa:	4618      	mov	r0, r3
    24ac:	4b13      	ldr	r3, [pc, #76]	; (24fc <_gpio_get_level+0x60>)
    24ae:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    24b0:	79fb      	ldrb	r3, [r7, #7]
    24b2:	4619      	mov	r1, r3
    24b4:	4812      	ldr	r0, [pc, #72]	; (2500 <_gpio_get_level+0x64>)
    24b6:	4b13      	ldr	r3, [pc, #76]	; (2504 <_gpio_get_level+0x68>)
    24b8:	4798      	blx	r3
    24ba:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    24bc:	79fb      	ldrb	r3, [r7, #7]
    24be:	4619      	mov	r1, r3
    24c0:	480f      	ldr	r0, [pc, #60]	; (2500 <_gpio_get_level+0x64>)
    24c2:	4b11      	ldr	r3, [pc, #68]	; (2508 <_gpio_get_level+0x6c>)
    24c4:	4798      	blx	r3
    24c6:	4602      	mov	r2, r0
    24c8:	697b      	ldr	r3, [r7, #20]
    24ca:	43db      	mvns	r3, r3
    24cc:	4013      	ands	r3, r2
    24ce:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    24d0:	79fb      	ldrb	r3, [r7, #7]
    24d2:	4619      	mov	r1, r3
    24d4:	480a      	ldr	r0, [pc, #40]	; (2500 <_gpio_get_level+0x64>)
    24d6:	4b0d      	ldr	r3, [pc, #52]	; (250c <_gpio_get_level+0x70>)
    24d8:	4798      	blx	r3
    24da:	4602      	mov	r2, r0
    24dc:	697b      	ldr	r3, [r7, #20]
    24de:	4013      	ands	r3, r2
    24e0:	693a      	ldr	r2, [r7, #16]
    24e2:	4313      	orrs	r3, r2
    24e4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    24e6:	f107 030c 	add.w	r3, r7, #12
    24ea:	4618      	mov	r0, r3
    24ec:	4b08      	ldr	r3, [pc, #32]	; (2510 <_gpio_get_level+0x74>)
    24ee:	4798      	blx	r3

	return tmp;
    24f0:	693b      	ldr	r3, [r7, #16]
}
    24f2:	4618      	mov	r0, r3
    24f4:	3718      	adds	r7, #24
    24f6:	46bd      	mov	sp, r7
    24f8:	bd80      	pop	{r7, pc}
    24fa:	bf00      	nop
    24fc:	00003ef1 	.word	0x00003ef1
    2500:	41008000 	.word	0x41008000
    2504:	00002439 	.word	0x00002439
    2508:	0000247b 	.word	0x0000247b
    250c:	00002459 	.word	0x00002459
    2510:	00003f17 	.word	0x00003f17

00002514 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    2514:	b580      	push	{r7, lr}
    2516:	b082      	sub	sp, #8
    2518:	af00      	add	r7, sp, #0
    251a:	4603      	mov	r3, r0
    251c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    251e:	79fb      	ldrb	r3, [r7, #7]
    2520:	115b      	asrs	r3, r3, #5
    2522:	b2db      	uxtb	r3, r3
    2524:	4618      	mov	r0, r3
    2526:	4b09      	ldr	r3, [pc, #36]	; (254c <gpio_get_pin_level+0x38>)
    2528:	4798      	blx	r3
    252a:	4601      	mov	r1, r0
    252c:	79fb      	ldrb	r3, [r7, #7]
    252e:	f003 031f 	and.w	r3, r3, #31
    2532:	2201      	movs	r2, #1
    2534:	fa02 f303 	lsl.w	r3, r2, r3
    2538:	400b      	ands	r3, r1
    253a:	2b00      	cmp	r3, #0
    253c:	bf14      	ite	ne
    253e:	2301      	movne	r3, #1
    2540:	2300      	moveq	r3, #0
    2542:	b2db      	uxtb	r3, r3
}
    2544:	4618      	mov	r0, r3
    2546:	3708      	adds	r7, #8
    2548:	46bd      	mov	sp, r7
    254a:	bd80      	pop	{r7, pc}
    254c:	0000249d 	.word	0x0000249d

00002550 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    2550:	b480      	push	{r7}
    2552:	b083      	sub	sp, #12
    2554:	af00      	add	r7, sp, #0
    2556:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    2558:	4b06      	ldr	r3, [pc, #24]	; (2574 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	2201      	movs	r2, #1
    255e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    2560:	4b04      	ldr	r3, [pc, #16]	; (2574 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    2562:	681b      	ldr	r3, [r3, #0]
    2564:	2200      	movs	r2, #0
    2566:	705a      	strb	r2, [r3, #1]
}
    2568:	bf00      	nop
    256a:	370c      	adds	r7, #12
    256c:	46bd      	mov	sp, r7
    256e:	bc80      	pop	{r7}
    2570:	4770      	bx	lr
    2572:	bf00      	nop
    2574:	20001f74 	.word	0x20001f74

00002578 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    2578:	b580      	push	{r7, lr}
    257a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    257c:	2040      	movs	r0, #64	; 0x40
    257e:	4b0a      	ldr	r3, [pc, #40]	; (25a8 <_ZL10USBPluggedv+0x30>)
    2580:	4798      	blx	r3
    2582:	4603      	mov	r3, r0
    2584:	2b00      	cmp	r3, #0
    2586:	d004      	beq.n	2592 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    2588:	4b08      	ldr	r3, [pc, #32]	; (25ac <_ZL10USBPluggedv+0x34>)
    258a:	681b      	ldr	r3, [r3, #0]
    258c:	2201      	movs	r2, #1
    258e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    2590:	e007      	b.n	25a2 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    2592:	4b06      	ldr	r3, [pc, #24]	; (25ac <_ZL10USBPluggedv+0x34>)
    2594:	681b      	ldr	r3, [r3, #0]
    2596:	2200      	movs	r2, #0
    2598:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    259a:	4b04      	ldr	r3, [pc, #16]	; (25ac <_ZL10USBPluggedv+0x34>)
    259c:	681b      	ldr	r3, [r3, #0]
    259e:	2200      	movs	r2, #0
    25a0:	701a      	strb	r2, [r3, #0]
}
    25a2:	bf00      	nop
    25a4:	bd80      	pop	{r7, pc}
    25a6:	bf00      	nop
    25a8:	00002515 	.word	0x00002515
    25ac:	20001f74 	.word	0x20001f74

000025b0 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    25b0:	b480      	push	{r7}
    25b2:	b083      	sub	sp, #12
    25b4:	af00      	add	r7, sp, #0
    25b6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    25b8:	4a04      	ldr	r2, [pc, #16]	; (25cc <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    25ba:	687b      	ldr	r3, [r7, #4]
    25bc:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    25be:	687b      	ldr	r3, [r7, #4]
    25c0:	4618      	mov	r0, r3
    25c2:	370c      	adds	r7, #12
    25c4:	46bd      	mov	sp, r7
    25c6:	bc80      	pop	{r7}
    25c8:	4770      	bx	lr
    25ca:	bf00      	nop
    25cc:	20001f74 	.word	0x20001f74

000025d0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    25d0:	b480      	push	{r7}
    25d2:	b083      	sub	sp, #12
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	4618      	mov	r0, r3
    25dc:	370c      	adds	r7, #12
    25de:	46bd      	mov	sp, r7
    25e0:	bc80      	pop	{r7}
    25e2:	4770      	bx	lr

000025e4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    25e4:	b580      	push	{r7, lr}
    25e6:	b082      	sub	sp, #8
    25e8:	af00      	add	r7, sp, #0
    25ea:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    25ec:	491e      	ldr	r1, [pc, #120]	; (2668 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    25ee:	2040      	movs	r0, #64	; 0x40
    25f0:	4b1e      	ldr	r3, [pc, #120]	; (266c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    25f2:	4798      	blx	r3
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    25f4:	2040      	movs	r0, #64	; 0x40
    25f6:	4b1e      	ldr	r3, [pc, #120]	; (2670 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    25f8:	4798      	blx	r3
    25fa:	4603      	mov	r3, r0
    25fc:	461a      	mov	r2, r3
    25fe:	687b      	ldr	r3, [r7, #4]
    2600:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	78db      	ldrb	r3, [r3, #3]
    2606:	2b00      	cmp	r3, #0
    2608:	d024      	beq.n	2654 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	2200      	movs	r2, #0
    260e:	709a      	strb	r2, [r3, #2]
			plugged=true;
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	2201      	movs	r2, #1
    2614:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    2616:	f44f 7216 	mov.w	r2, #600	; 0x258
    261a:	4916      	ldr	r1, [pc, #88]	; (2674 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    261c:	4816      	ldr	r0, [pc, #88]	; (2678 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    261e:	4b17      	ldr	r3, [pc, #92]	; (267c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    2620:	4798      	blx	r3
			usbTerminalTimer.Start();
    2622:	4815      	ldr	r0, [pc, #84]	; (2678 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    2624:	4b16      	ldr	r3, [pc, #88]	; (2680 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    2626:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    2628:	4816      	ldr	r0, [pc, #88]	; (2684 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    262a:	4b17      	ldr	r3, [pc, #92]	; (2688 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    262c:	4798      	blx	r3
    262e:	4603      	mov	r3, r0
    2630:	f083 0301 	eor.w	r3, r3, #1
    2634:	b2db      	uxtb	r3, r3
    2636:	2b00      	cmp	r3, #0
    2638:	d008      	beq.n	264c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	789b      	ldrb	r3, [r3, #2]
    263e:	b2db      	uxtb	r3, r3
    2640:	2b00      	cmp	r3, #0
    2642:	d0f1      	beq.n	2628 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    2644:	687b      	ldr	r3, [r7, #4]
    2646:	2200      	movs	r2, #0
    2648:	701a      	strb	r2, [r3, #0]
					return;
    264a:	e009      	b.n	2660 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    264c:	480a      	ldr	r0, [pc, #40]	; (2678 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    264e:	4b0f      	ldr	r3, [pc, #60]	; (268c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    2650:	4798      	blx	r3
    2652:	e005      	b.n	2660 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	2200      	movs	r2, #0
    2658:	701a      	strb	r2, [r3, #0]
			plugged=false;
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	2200      	movs	r2, #0
    265e:	705a      	strb	r2, [r3, #1]
		}
		
}
    2660:	3708      	adds	r7, #8
    2662:	46bd      	mov	sp, r7
    2664:	bd80      	pop	{r7, pc}
    2666:	bf00      	nop
    2668:	00002579 	.word	0x00002579
    266c:	00004415 	.word	0x00004415
    2670:	00002515 	.word	0x00002515
    2674:	00002551 	.word	0x00002551
    2678:	2000201c 	.word	0x2000201c
    267c:	000027c1 	.word	0x000027c1
    2680:	0000270d 	.word	0x0000270d
    2684:	20001f14 	.word	0x20001f14
    2688:	00002009 	.word	0x00002009
    268c:	00002731 	.word	0x00002731

00002690 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    2690:	b580      	push	{r7, lr}
    2692:	b082      	sub	sp, #8
    2694:	af00      	add	r7, sp, #0
    2696:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    2698:	4b04      	ldr	r3, [pc, #16]	; (26ac <_ZL7task_cbPK10timer_task+0x1c>)
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	4618      	mov	r0, r3
    269e:	4b04      	ldr	r3, [pc, #16]	; (26b0 <_ZL7task_cbPK10timer_task+0x20>)
    26a0:	4798      	blx	r3
}
    26a2:	bf00      	nop
    26a4:	3708      	adds	r7, #8
    26a6:	46bd      	mov	sp, r7
    26a8:	bd80      	pop	{r7, pc}
    26aa:	bf00      	nop
    26ac:	20001f78 	.word	0x20001f78
    26b0:	00002759 	.word	0x00002759

000026b4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    26b4:	b480      	push	{r7}
    26b6:	b083      	sub	sp, #12
    26b8:	af00      	add	r7, sp, #0
    26ba:	6078      	str	r0, [r7, #4]
    26bc:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    26be:	687b      	ldr	r3, [r7, #4]
    26c0:	683a      	ldr	r2, [r7, #0]
    26c2:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
    26c4:	4a08      	ldr	r2, [pc, #32]	; (26e8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    26d0:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	689b      	ldr	r3, [r3, #8]
    26d6:	4a05      	ldr	r2, [pc, #20]	; (26ec <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    26d8:	60da      	str	r2, [r3, #12]
} //Timer_Class
    26da:	687b      	ldr	r3, [r7, #4]
    26dc:	4618      	mov	r0, r3
    26de:	370c      	adds	r7, #12
    26e0:	46bd      	mov	sp, r7
    26e2:	bc80      	pop	{r7}
    26e4:	4770      	bx	lr
    26e6:	bf00      	nop
    26e8:	20001f78 	.word	0x20001f78
    26ec:	00002691 	.word	0x00002691

000026f0 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    26f0:	b480      	push	{r7}
    26f2:	b083      	sub	sp, #12
    26f4:	af00      	add	r7, sp, #0
    26f6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	2200      	movs	r2, #0
    26fc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	4618      	mov	r0, r3
    2702:	370c      	adds	r7, #12
    2704:	46bd      	mov	sp, r7
    2706:	bc80      	pop	{r7}
    2708:	4770      	bx	lr
	...

0000270c <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    270c:	b580      	push	{r7, lr}
    270e:	b084      	sub	sp, #16
    2710:	af00      	add	r7, sp, #0
    2712:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	68db      	ldr	r3, [r3, #12]
    2718:	4618      	mov	r0, r3
    271a:	4b04      	ldr	r3, [pc, #16]	; (272c <_ZN17TimerSerial_Class5StartEv+0x20>)
    271c:	4798      	blx	r3
    271e:	60f8      	str	r0, [r7, #12]
	return status;
    2720:	68fb      	ldr	r3, [r7, #12]
	
}
    2722:	4618      	mov	r0, r3
    2724:	3710      	adds	r7, #16
    2726:	46bd      	mov	sp, r7
    2728:	bd80      	pop	{r7, pc}
    272a:	bf00      	nop
    272c:	0000517d 	.word	0x0000517d

00002730 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    2730:	b580      	push	{r7, lr}
    2732:	b084      	sub	sp, #16
    2734:	af00      	add	r7, sp, #0
    2736:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	68db      	ldr	r3, [r3, #12]
    273c:	4618      	mov	r0, r3
    273e:	4b05      	ldr	r3, [pc, #20]	; (2754 <_ZN17TimerSerial_Class4StopEv+0x24>)
    2740:	4798      	blx	r3
    2742:	60f8      	str	r0, [r7, #12]
	timeout=0;
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	2200      	movs	r2, #0
    2748:	705a      	strb	r2, [r3, #1]
	return status;
    274a:	68fb      	ldr	r3, [r7, #12]
}
    274c:	4618      	mov	r0, r3
    274e:	3710      	adds	r7, #16
    2750:	46bd      	mov	sp, r7
    2752:	bd80      	pop	{r7, pc}
    2754:	000051d1 	.word	0x000051d1

00002758 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    2758:	b480      	push	{r7}
    275a:	b083      	sub	sp, #12
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
	timeout=1;
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	2201      	movs	r2, #1
    2764:	705a      	strb	r2, [r3, #1]
}
    2766:	bf00      	nop
    2768:	370c      	adds	r7, #12
    276a:	46bd      	mov	sp, r7
    276c:	bc80      	pop	{r7}
    276e:	4770      	bx	lr

00002770 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    2770:	b580      	push	{r7, lr}
    2772:	b086      	sub	sp, #24
    2774:	af00      	add	r7, sp, #0
    2776:	60f8      	str	r0, [r7, #12]
    2778:	60b9      	str	r1, [r7, #8]
    277a:	607a      	str	r2, [r7, #4]
    277c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    277e:	68f8      	ldr	r0, [r7, #12]
    2780:	4b0d      	ldr	r3, [pc, #52]	; (27b8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    2782:	4798      	blx	r3
	task->interval = interval;
    2784:	68fb      	ldr	r3, [r7, #12]
    2786:	689b      	ldr	r3, [r3, #8]
    2788:	687a      	ldr	r2, [r7, #4]
    278a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    278c:	68fb      	ldr	r3, [r7, #12]
    278e:	689b      	ldr	r3, [r3, #8]
    2790:	68ba      	ldr	r2, [r7, #8]
    2792:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    2794:	68fb      	ldr	r3, [r7, #12]
    2796:	689b      	ldr	r3, [r3, #8]
    2798:	78fa      	ldrb	r2, [r7, #3]
    279a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    279c:	68fb      	ldr	r3, [r7, #12]
    279e:	68da      	ldr	r2, [r3, #12]
    27a0:	68fb      	ldr	r3, [r7, #12]
    27a2:	689b      	ldr	r3, [r3, #8]
    27a4:	4619      	mov	r1, r3
    27a6:	4610      	mov	r0, r2
    27a8:	4b04      	ldr	r3, [pc, #16]	; (27bc <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    27aa:	4798      	blx	r3
    27ac:	6178      	str	r0, [r7, #20]
	
	return status;
    27ae:	697b      	ldr	r3, [r7, #20]
}
    27b0:	4618      	mov	r0, r3
    27b2:	3718      	adds	r7, #24
    27b4:	46bd      	mov	sp, r7
    27b6:	bd80      	pop	{r7, pc}
    27b8:	00002879 	.word	0x00002879
    27bc:	0000522d 	.word	0x0000522d

000027c0 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    27c0:	b590      	push	{r4, r7, lr}
    27c2:	b087      	sub	sp, #28
    27c4:	af00      	add	r7, sp, #0
    27c6:	60f8      	str	r0, [r7, #12]
    27c8:	60b9      	str	r1, [r7, #8]
    27ca:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    27cc:	2300      	movs	r3, #0
    27ce:	687a      	ldr	r2, [r7, #4]
    27d0:	68b9      	ldr	r1, [r7, #8]
    27d2:	68f8      	ldr	r0, [r7, #12]
    27d4:	4c03      	ldr	r4, [pc, #12]	; (27e4 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    27d6:	47a0      	blx	r4
    27d8:	6178      	str	r0, [r7, #20]
	return status;
    27da:	697b      	ldr	r3, [r7, #20]
}
    27dc:	4618      	mov	r0, r3
    27de:	371c      	adds	r7, #28
    27e0:	46bd      	mov	sp, r7
    27e2:	bd90      	pop	{r4, r7, pc}
    27e4:	00002771 	.word	0x00002771

000027e8 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    27e8:	b590      	push	{r4, r7, lr}
    27ea:	b087      	sub	sp, #28
    27ec:	af00      	add	r7, sp, #0
    27ee:	60f8      	str	r0, [r7, #12]
    27f0:	60b9      	str	r1, [r7, #8]
    27f2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    27f4:	2300      	movs	r3, #0
    27f6:	687a      	ldr	r2, [r7, #4]
    27f8:	68b9      	ldr	r1, [r7, #8]
    27fa:	68f8      	ldr	r0, [r7, #12]
    27fc:	4c06      	ldr	r4, [pc, #24]	; (2818 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    27fe:	47a0      	blx	r4
    2800:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    2802:	68fb      	ldr	r3, [r7, #12]
    2804:	68db      	ldr	r3, [r3, #12]
    2806:	4618      	mov	r0, r3
    2808:	4b04      	ldr	r3, [pc, #16]	; (281c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    280a:	4798      	blx	r3
    280c:	6178      	str	r0, [r7, #20]
	return status;
    280e:	697b      	ldr	r3, [r7, #20]
}
    2810:	4618      	mov	r0, r3
    2812:	371c      	adds	r7, #28
    2814:	46bd      	mov	sp, r7
    2816:	bd90      	pop	{r4, r7, pc}
    2818:	00002771 	.word	0x00002771
    281c:	0000517d 	.word	0x0000517d

00002820 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    2820:	b580      	push	{r7, lr}
    2822:	b082      	sub	sp, #8
    2824:	af00      	add	r7, sp, #0
    2826:	6078      	str	r0, [r7, #4]
    2828:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    282a:	6839      	ldr	r1, [r7, #0]
    282c:	6878      	ldr	r0, [r7, #4]
    282e:	4b0f      	ldr	r3, [pc, #60]	; (286c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    2830:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	68db      	ldr	r3, [r3, #12]
    2836:	f103 0214 	add.w	r2, r3, #20
    283a:	687b      	ldr	r3, [r7, #4]
    283c:	689b      	ldr	r3, [r3, #8]
    283e:	4619      	mov	r1, r3
    2840:	4610      	mov	r0, r2
    2842:	4b0b      	ldr	r3, [pc, #44]	; (2870 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    2844:	4798      	blx	r3
    2846:	4603      	mov	r3, r0
    2848:	2b00      	cmp	r3, #0
    284a:	d007      	beq.n	285c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	68da      	ldr	r2, [r3, #12]
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	689b      	ldr	r3, [r3, #8]
    2854:	4619      	mov	r1, r3
    2856:	4610      	mov	r0, r2
    2858:	4b06      	ldr	r3, [pc, #24]	; (2874 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    285a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	689b      	ldr	r3, [r3, #8]
    2860:	2200      	movs	r2, #0
    2862:	60da      	str	r2, [r3, #12]
}
    2864:	bf00      	nop
    2866:	3708      	adds	r7, #8
    2868:	46bd      	mov	sp, r7
    286a:	bd80      	pop	{r7, pc}
    286c:	000028e1 	.word	0x000028e1
    2870:	00005efd 	.word	0x00005efd
    2874:	00005325 	.word	0x00005325

00002878 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    2878:	b480      	push	{r7}
    287a:	b083      	sub	sp, #12
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	2200      	movs	r2, #0
    2884:	771a      	strb	r2, [r3, #28]
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	7f1b      	ldrb	r3, [r3, #28]
    288a:	2b07      	cmp	r3, #7
    288c:	dc1f      	bgt.n	28ce <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
    288e:	687b      	ldr	r3, [r7, #4]
    2890:	7f1b      	ldrb	r3, [r3, #28]
    2892:	4619      	mov	r1, r3
    2894:	4a11      	ldr	r2, [pc, #68]	; (28dc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    2896:	460b      	mov	r3, r1
    2898:	009b      	lsls	r3, r3, #2
    289a:	440b      	add	r3, r1
    289c:	009b      	lsls	r3, r3, #2
    289e:	4413      	add	r3, r2
    28a0:	330c      	adds	r3, #12
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	2b00      	cmp	r3, #0
    28a6:	d10b      	bne.n	28c0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	7f1b      	ldrb	r3, [r3, #28]
    28ac:	461a      	mov	r2, r3
    28ae:	4613      	mov	r3, r2
    28b0:	009b      	lsls	r3, r3, #2
    28b2:	4413      	add	r3, r2
    28b4:	009b      	lsls	r3, r3, #2
    28b6:	4a09      	ldr	r2, [pc, #36]	; (28dc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    28b8:	441a      	add	r2, r3
    28ba:	687b      	ldr	r3, [r7, #4]
    28bc:	609a      	str	r2, [r3, #8]
			return;
    28be:	e009      	b.n	28d4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	7f1b      	ldrb	r3, [r3, #28]
    28c4:	3301      	adds	r3, #1
    28c6:	b2da      	uxtb	r2, r3
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	771a      	strb	r2, [r3, #28]
    28cc:	e7db      	b.n	2886 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	4a02      	ldr	r2, [pc, #8]	; (28dc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    28d2:	609a      	str	r2, [r3, #8]

}
    28d4:	370c      	adds	r7, #12
    28d6:	46bd      	mov	sp, r7
    28d8:	bc80      	pop	{r7}
    28da:	4770      	bx	lr
    28dc:	20001f7c 	.word	0x20001f7c

000028e0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    28e0:	b480      	push	{r7}
    28e2:	b083      	sub	sp, #12
    28e4:	af00      	add	r7, sp, #0
    28e6:	6078      	str	r0, [r7, #4]
    28e8:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	2200      	movs	r2, #0
    28ee:	771a      	strb	r2, [r3, #28]
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	7f1b      	ldrb	r3, [r3, #28]
    28f4:	2b07      	cmp	r3, #7
    28f6:	dc20      	bgt.n	293a <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	7f1b      	ldrb	r3, [r3, #28]
    28fc:	4619      	mov	r1, r3
    28fe:	4a11      	ldr	r2, [pc, #68]	; (2944 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    2900:	460b      	mov	r3, r1
    2902:	009b      	lsls	r3, r3, #2
    2904:	440b      	add	r3, r1
    2906:	009b      	lsls	r3, r3, #2
    2908:	4413      	add	r3, r2
    290a:	330c      	adds	r3, #12
    290c:	681a      	ldr	r2, [r3, #0]
    290e:	683b      	ldr	r3, [r7, #0]
    2910:	429a      	cmp	r2, r3
    2912:	d10b      	bne.n	292c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	7f1b      	ldrb	r3, [r3, #28]
    2918:	461a      	mov	r2, r3
    291a:	4613      	mov	r3, r2
    291c:	009b      	lsls	r3, r3, #2
    291e:	4413      	add	r3, r2
    2920:	009b      	lsls	r3, r3, #2
    2922:	4a08      	ldr	r2, [pc, #32]	; (2944 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    2924:	441a      	add	r2, r3
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	609a      	str	r2, [r3, #8]
			return;
    292a:	e006      	b.n	293a <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	7f1b      	ldrb	r3, [r3, #28]
    2930:	3301      	adds	r3, #1
    2932:	b2da      	uxtb	r2, r3
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	771a      	strb	r2, [r3, #28]
    2938:	e7da      	b.n	28f0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
    293a:	370c      	adds	r7, #12
    293c:	46bd      	mov	sp, r7
    293e:	bc80      	pop	{r7}
    2940:	4770      	bx	lr
    2942:	bf00      	nop
    2944:	20001f7c 	.word	0x20001f7c

00002948 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    2948:	b580      	push	{r7, lr}
    294a:	b082      	sub	sp, #8
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
    2950:	6039      	str	r1, [r7, #0]
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	2b01      	cmp	r3, #1
    2956:	d116      	bne.n	2986 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    2958:	683b      	ldr	r3, [r7, #0]
    295a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    295e:	4293      	cmp	r3, r2
    2960:	d111      	bne.n	2986 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    2962:	490b      	ldr	r1, [pc, #44]	; (2990 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    2964:	480b      	ldr	r0, [pc, #44]	; (2994 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    2966:	4b0c      	ldr	r3, [pc, #48]	; (2998 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    2968:	4798      	blx	r3
    296a:	4a0c      	ldr	r2, [pc, #48]	; (299c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    296c:	490c      	ldr	r1, [pc, #48]	; (29a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    296e:	4809      	ldr	r0, [pc, #36]	; (2994 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    2970:	4b0c      	ldr	r3, [pc, #48]	; (29a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    2972:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    2974:	490c      	ldr	r1, [pc, #48]	; (29a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    2976:	480d      	ldr	r0, [pc, #52]	; (29ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
    2978:	4b07      	ldr	r3, [pc, #28]	; (2998 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    297a:	4798      	blx	r3
    297c:	4a07      	ldr	r2, [pc, #28]	; (299c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    297e:	4908      	ldr	r1, [pc, #32]	; (29a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    2980:	480a      	ldr	r0, [pc, #40]	; (29ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
    2982:	4b08      	ldr	r3, [pc, #32]	; (29a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    2984:	4798      	blx	r3
    2986:	bf00      	nop
    2988:	3708      	adds	r7, #8
    298a:	46bd      	mov	sp, r7
    298c:	bd80      	pop	{r7, pc}
    298e:	bf00      	nop
    2990:	200027b0 	.word	0x200027b0
    2994:	2000201c 	.word	0x2000201c
    2998:	000026b5 	.word	0x000026b5
    299c:	20000000 	.word	0x20000000
    29a0:	000026f1 	.word	0x000026f1
    29a4:	0000fc55 	.word	0x0000fc55
    29a8:	200026f8 	.word	0x200026f8
    29ac:	2000203c 	.word	0x2000203c

000029b0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    29b0:	b580      	push	{r7, lr}
    29b2:	af00      	add	r7, sp, #0
    29b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    29b8:	2001      	movs	r0, #1
    29ba:	4b01      	ldr	r3, [pc, #4]	; (29c0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    29bc:	4798      	blx	r3
    29be:	bd80      	pop	{r7, pc}
    29c0:	00002949 	.word	0x00002949

000029c4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    29c4:	b580      	push	{r7, lr}
    29c6:	af00      	add	r7, sp, #0
	system_init();
    29c8:	4b03      	ldr	r3, [pc, #12]	; (29d8 <atmel_start_init+0x14>)
    29ca:	4798      	blx	r3
	usb_init();
    29cc:	4b03      	ldr	r3, [pc, #12]	; (29dc <atmel_start_init+0x18>)
    29ce:	4798      	blx	r3
	spi_nor_flash_init();
    29d0:	4b03      	ldr	r3, [pc, #12]	; (29e0 <atmel_start_init+0x1c>)
    29d2:	4798      	blx	r3
}
    29d4:	bf00      	nop
    29d6:	bd80      	pop	{r7, pc}
    29d8:	00003d3d 	.word	0x00003d3d
    29dc:	0000fb45 	.word	0x0000fb45
    29e0:	0000e505 	.word	0x0000e505

000029e4 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    29e4:	b480      	push	{r7}
    29e6:	b085      	sub	sp, #20
    29e8:	af00      	add	r7, sp, #0
    29ea:	60f8      	str	r0, [r7, #12]
    29ec:	460b      	mov	r3, r1
    29ee:	607a      	str	r2, [r7, #4]
    29f0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    29f2:	7afa      	ldrb	r2, [r7, #11]
    29f4:	68fb      	ldr	r3, [r7, #12]
    29f6:	3220      	adds	r2, #32
    29f8:	6879      	ldr	r1, [r7, #4]
    29fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    29fe:	bf00      	nop
    2a00:	3714      	adds	r7, #20
    2a02:	46bd      	mov	sp, r7
    2a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a08:	4770      	bx	lr

00002a0a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    2a0a:	b480      	push	{r7}
    2a0c:	b083      	sub	sp, #12
    2a0e:	af00      	add	r7, sp, #0
    2a10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	691b      	ldr	r3, [r3, #16]
    2a16:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a1e:	bf00      	nop
    2a20:	370c      	adds	r7, #12
    2a22:	46bd      	mov	sp, r7
    2a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a28:	4770      	bx	lr

00002a2a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    2a2a:	b480      	push	{r7}
    2a2c:	b083      	sub	sp, #12
    2a2e:	af00      	add	r7, sp, #0
    2a30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	691b      	ldr	r3, [r3, #16]
    2a36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a3e:	bf00      	nop
    2a40:	370c      	adds	r7, #12
    2a42:	46bd      	mov	sp, r7
    2a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a48:	4770      	bx	lr

00002a4a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    2a4a:	b480      	push	{r7}
    2a4c:	b083      	sub	sp, #12
    2a4e:	af00      	add	r7, sp, #0
    2a50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	691b      	ldr	r3, [r3, #16]
    2a56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a5e:	bf00      	nop
    2a60:	370c      	adds	r7, #12
    2a62:	46bd      	mov	sp, r7
    2a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a68:	4770      	bx	lr

00002a6a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2a6a:	b480      	push	{r7}
    2a6c:	b083      	sub	sp, #12
    2a6e:	af00      	add	r7, sp, #0
    2a70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	691b      	ldr	r3, [r3, #16]
    2a76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2a7a:	687b      	ldr	r3, [r7, #4]
    2a7c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a7e:	bf00      	nop
    2a80:	370c      	adds	r7, #12
    2a82:	46bd      	mov	sp, r7
    2a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a88:	4770      	bx	lr

00002a8a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2a8a:	b480      	push	{r7}
    2a8c:	b083      	sub	sp, #12
    2a8e:	af00      	add	r7, sp, #0
    2a90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	695b      	ldr	r3, [r3, #20]
    2a96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2a9e:	bf00      	nop
    2aa0:	370c      	adds	r7, #12
    2aa2:	46bd      	mov	sp, r7
    2aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aa8:	4770      	bx	lr

00002aaa <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2aaa:	b480      	push	{r7}
    2aac:	b083      	sub	sp, #12
    2aae:	af00      	add	r7, sp, #0
    2ab0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2ab2:	687b      	ldr	r3, [r7, #4]
    2ab4:	695b      	ldr	r3, [r3, #20]
    2ab6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2aba:	687b      	ldr	r3, [r7, #4]
    2abc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2abe:	bf00      	nop
    2ac0:	370c      	adds	r7, #12
    2ac2:	46bd      	mov	sp, r7
    2ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac8:	4770      	bx	lr

00002aca <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2aca:	b480      	push	{r7}
    2acc:	b083      	sub	sp, #12
    2ace:	af00      	add	r7, sp, #0
    2ad0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	695b      	ldr	r3, [r3, #20]
    2ad6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2ade:	bf00      	nop
    2ae0:	370c      	adds	r7, #12
    2ae2:	46bd      	mov	sp, r7
    2ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ae8:	4770      	bx	lr

00002aea <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    2aea:	b480      	push	{r7}
    2aec:	b083      	sub	sp, #12
    2aee:	af00      	add	r7, sp, #0
    2af0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	695b      	ldr	r3, [r3, #20]
    2af6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2afe:	bf00      	nop
    2b00:	370c      	adds	r7, #12
    2b02:	46bd      	mov	sp, r7
    2b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b08:	4770      	bx	lr

00002b0a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    2b0a:	b480      	push	{r7}
    2b0c:	b083      	sub	sp, #12
    2b0e:	af00      	add	r7, sp, #0
    2b10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	695b      	ldr	r3, [r3, #20]
    2b16:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b1e:	bf00      	nop
    2b20:	370c      	adds	r7, #12
    2b22:	46bd      	mov	sp, r7
    2b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b28:	4770      	bx	lr

00002b2a <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    2b2a:	b480      	push	{r7}
    2b2c:	b083      	sub	sp, #12
    2b2e:	af00      	add	r7, sp, #0
    2b30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    2b32:	687b      	ldr	r3, [r7, #4]
    2b34:	695b      	ldr	r3, [r3, #20]
    2b36:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b3e:	bf00      	nop
    2b40:	370c      	adds	r7, #12
    2b42:	46bd      	mov	sp, r7
    2b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b48:	4770      	bx	lr

00002b4a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    2b4a:	b480      	push	{r7}
    2b4c:	b083      	sub	sp, #12
    2b4e:	af00      	add	r7, sp, #0
    2b50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2b52:	687b      	ldr	r3, [r7, #4]
    2b54:	699b      	ldr	r3, [r3, #24]
    2b56:	f043 0201 	orr.w	r2, r3, #1
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b5e:	bf00      	nop
    2b60:	370c      	adds	r7, #12
    2b62:	46bd      	mov	sp, r7
    2b64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b68:	4770      	bx	lr

00002b6a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    2b6a:	b480      	push	{r7}
    2b6c:	b083      	sub	sp, #12
    2b6e:	af00      	add	r7, sp, #0
    2b70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	699b      	ldr	r3, [r3, #24]
    2b76:	f043 0202 	orr.w	r2, r3, #2
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b7e:	bf00      	nop
    2b80:	370c      	adds	r7, #12
    2b82:	46bd      	mov	sp, r7
    2b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b88:	4770      	bx	lr

00002b8a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2b8a:	b480      	push	{r7}
    2b8c:	b083      	sub	sp, #12
    2b8e:	af00      	add	r7, sp, #0
    2b90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	699b      	ldr	r3, [r3, #24]
    2b96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2b9a:	687b      	ldr	r3, [r7, #4]
    2b9c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b9e:	bf00      	nop
    2ba0:	370c      	adds	r7, #12
    2ba2:	46bd      	mov	sp, r7
    2ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ba8:	4770      	bx	lr

00002baa <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
    2baa:	b480      	push	{r7}
    2bac:	b083      	sub	sp, #12
    2bae:	af00      	add	r7, sp, #0
    2bb0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	699b      	ldr	r3, [r3, #24]
    2bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2bba:	687b      	ldr	r3, [r7, #4]
    2bbc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bbe:	bf00      	nop
    2bc0:	370c      	adds	r7, #12
    2bc2:	46bd      	mov	sp, r7
    2bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bc8:	4770      	bx	lr

00002bca <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2bca:	b480      	push	{r7}
    2bcc:	b083      	sub	sp, #12
    2bce:	af00      	add	r7, sp, #0
    2bd0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	699b      	ldr	r3, [r3, #24]
    2bd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bde:	bf00      	nop
    2be0:	370c      	adds	r7, #12
    2be2:	46bd      	mov	sp, r7
    2be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2be8:	4770      	bx	lr

00002bea <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    2bea:	b480      	push	{r7}
    2bec:	b083      	sub	sp, #12
    2bee:	af00      	add	r7, sp, #0
    2bf0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	699b      	ldr	r3, [r3, #24]
    2bf6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bfe:	bf00      	nop
    2c00:	370c      	adds	r7, #12
    2c02:	46bd      	mov	sp, r7
    2c04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c08:	4770      	bx	lr

00002c0a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    2c0a:	b480      	push	{r7}
    2c0c:	b083      	sub	sp, #12
    2c0e:	af00      	add	r7, sp, #0
    2c10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	69db      	ldr	r3, [r3, #28]
    2c16:	f043 0220 	orr.w	r2, r3, #32
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c1e:	bf00      	nop
    2c20:	370c      	adds	r7, #12
    2c22:	46bd      	mov	sp, r7
    2c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c28:	4770      	bx	lr

00002c2a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    2c2a:	b480      	push	{r7}
    2c2c:	b083      	sub	sp, #12
    2c2e:	af00      	add	r7, sp, #0
    2c30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	69db      	ldr	r3, [r3, #28]
    2c36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c3e:	bf00      	nop
    2c40:	370c      	adds	r7, #12
    2c42:	46bd      	mov	sp, r7
    2c44:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c48:	4770      	bx	lr

00002c4a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    2c4a:	b480      	push	{r7}
    2c4c:	b083      	sub	sp, #12
    2c4e:	af00      	add	r7, sp, #0
    2c50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	69db      	ldr	r3, [r3, #28]
    2c56:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c5e:	bf00      	nop
    2c60:	370c      	adds	r7, #12
    2c62:	46bd      	mov	sp, r7
    2c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c68:	4770      	bx	lr

00002c6a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2c6a:	b480      	push	{r7}
    2c6c:	b083      	sub	sp, #12
    2c6e:	af00      	add	r7, sp, #0
    2c70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	6a1b      	ldr	r3, [r3, #32]
    2c76:	f043 0201 	orr.w	r2, r3, #1
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c7e:	bf00      	nop
    2c80:	370c      	adds	r7, #12
    2c82:	46bd      	mov	sp, r7
    2c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c88:	4770      	bx	lr

00002c8a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    2c8a:	b480      	push	{r7}
    2c8c:	b083      	sub	sp, #12
    2c8e:	af00      	add	r7, sp, #0
    2c90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	6a1b      	ldr	r3, [r3, #32]
    2c96:	f043 0202 	orr.w	r2, r3, #2
    2c9a:	687b      	ldr	r3, [r7, #4]
    2c9c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c9e:	bf00      	nop
    2ca0:	370c      	adds	r7, #12
    2ca2:	46bd      	mov	sp, r7
    2ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ca8:	4770      	bx	lr

00002caa <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    2caa:	b480      	push	{r7}
    2cac:	b083      	sub	sp, #12
    2cae:	af00      	add	r7, sp, #0
    2cb0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    2cb2:	687b      	ldr	r3, [r7, #4]
    2cb4:	6a1b      	ldr	r3, [r3, #32]
    2cb6:	f043 0204 	orr.w	r2, r3, #4
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cbe:	bf00      	nop
    2cc0:	370c      	adds	r7, #12
    2cc2:	46bd      	mov	sp, r7
    2cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cc8:	4770      	bx	lr

00002cca <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2cca:	b480      	push	{r7}
    2ccc:	b083      	sub	sp, #12
    2cce:	af00      	add	r7, sp, #0
    2cd0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	6a1b      	ldr	r3, [r3, #32]
    2cd6:	f043 0208 	orr.w	r2, r3, #8
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cde:	bf00      	nop
    2ce0:	370c      	adds	r7, #12
    2ce2:	46bd      	mov	sp, r7
    2ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ce8:	4770      	bx	lr

00002cea <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    2cea:	b480      	push	{r7}
    2cec:	b083      	sub	sp, #12
    2cee:	af00      	add	r7, sp, #0
    2cf0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	6a1b      	ldr	r3, [r3, #32]
    2cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cfe:	bf00      	nop
    2d00:	370c      	adds	r7, #12
    2d02:	46bd      	mov	sp, r7
    2d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d08:	4770      	bx	lr

00002d0a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2d0a:	b480      	push	{r7}
    2d0c:	b085      	sub	sp, #20
    2d0e:	af00      	add	r7, sp, #0
    2d10:	60f8      	str	r0, [r7, #12]
    2d12:	460b      	mov	r3, r1
    2d14:	607a      	str	r2, [r7, #4]
    2d16:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d18:	7afb      	ldrb	r3, [r7, #11]
    2d1a:	68fa      	ldr	r2, [r7, #12]
    2d1c:	01db      	lsls	r3, r3, #7
    2d1e:	4413      	add	r3, r2
    2d20:	3308      	adds	r3, #8
    2d22:	687a      	ldr	r2, [r7, #4]
    2d24:	601a      	str	r2, [r3, #0]
}
    2d26:	bf00      	nop
    2d28:	3714      	adds	r7, #20
    2d2a:	46bd      	mov	sp, r7
    2d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d30:	4770      	bx	lr

00002d32 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2d32:	b480      	push	{r7}
    2d34:	b085      	sub	sp, #20
    2d36:	af00      	add	r7, sp, #0
    2d38:	60f8      	str	r0, [r7, #12]
    2d3a:	460b      	mov	r3, r1
    2d3c:	607a      	str	r2, [r7, #4]
    2d3e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d40:	7afb      	ldrb	r3, [r7, #11]
    2d42:	68fa      	ldr	r2, [r7, #12]
    2d44:	01db      	lsls	r3, r3, #7
    2d46:	4413      	add	r3, r2
    2d48:	3304      	adds	r3, #4
    2d4a:	687a      	ldr	r2, [r7, #4]
    2d4c:	601a      	str	r2, [r3, #0]
}
    2d4e:	bf00      	nop
    2d50:	3714      	adds	r7, #20
    2d52:	46bd      	mov	sp, r7
    2d54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d58:	4770      	bx	lr

00002d5a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2d5a:	b480      	push	{r7}
    2d5c:	b085      	sub	sp, #20
    2d5e:	af00      	add	r7, sp, #0
    2d60:	60f8      	str	r0, [r7, #12]
    2d62:	460b      	mov	r3, r1
    2d64:	607a      	str	r2, [r7, #4]
    2d66:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d68:	7afb      	ldrb	r3, [r7, #11]
    2d6a:	68fa      	ldr	r2, [r7, #12]
    2d6c:	01db      	lsls	r3, r3, #7
    2d6e:	4413      	add	r3, r2
    2d70:	3318      	adds	r3, #24
    2d72:	687a      	ldr	r2, [r7, #4]
    2d74:	601a      	str	r2, [r3, #0]
}
    2d76:	bf00      	nop
    2d78:	3714      	adds	r7, #20
    2d7a:	46bd      	mov	sp, r7
    2d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d80:	4770      	bx	lr

00002d82 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2d82:	b480      	push	{r7}
    2d84:	b085      	sub	sp, #20
    2d86:	af00      	add	r7, sp, #0
    2d88:	60f8      	str	r0, [r7, #12]
    2d8a:	460b      	mov	r3, r1
    2d8c:	607a      	str	r2, [r7, #4]
    2d8e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d90:	7afb      	ldrb	r3, [r7, #11]
    2d92:	68fa      	ldr	r2, [r7, #12]
    2d94:	01db      	lsls	r3, r3, #7
    2d96:	4413      	add	r3, r2
    2d98:	3314      	adds	r3, #20
    2d9a:	687a      	ldr	r2, [r7, #4]
    2d9c:	601a      	str	r2, [r3, #0]
}
    2d9e:	bf00      	nop
    2da0:	3714      	adds	r7, #20
    2da2:	46bd      	mov	sp, r7
    2da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2da8:	4770      	bx	lr

00002daa <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2daa:	b480      	push	{r7}
    2dac:	b085      	sub	sp, #20
    2dae:	af00      	add	r7, sp, #0
    2db0:	6078      	str	r0, [r7, #4]
    2db2:	4608      	mov	r0, r1
    2db4:	4611      	mov	r1, r2
    2db6:	461a      	mov	r2, r3
    2db8:	4603      	mov	r3, r0
    2dba:	70fb      	strb	r3, [r7, #3]
    2dbc:	460b      	mov	r3, r1
    2dbe:	70bb      	strb	r3, [r7, #2]
    2dc0:	4613      	mov	r3, r2
    2dc2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2dc4:	78fa      	ldrb	r2, [r7, #3]
    2dc6:	78bb      	ldrb	r3, [r7, #2]
    2dc8:	6879      	ldr	r1, [r7, #4]
    2dca:	01d2      	lsls	r2, r2, #7
    2dcc:	440a      	add	r2, r1
    2dce:	4413      	add	r3, r2
    2dd0:	3330      	adds	r3, #48	; 0x30
    2dd2:	781b      	ldrb	r3, [r3, #0]
    2dd4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2dd6:	7bfb      	ldrb	r3, [r7, #15]
    2dd8:	f023 030f 	bic.w	r3, r3, #15
    2ddc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    2dde:	787b      	ldrb	r3, [r7, #1]
    2de0:	f003 030f 	and.w	r3, r3, #15
    2de4:	b2da      	uxtb	r2, r3
    2de6:	7bfb      	ldrb	r3, [r7, #15]
    2de8:	4313      	orrs	r3, r2
    2dea:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2dec:	78fa      	ldrb	r2, [r7, #3]
    2dee:	78bb      	ldrb	r3, [r7, #2]
    2df0:	6879      	ldr	r1, [r7, #4]
    2df2:	01d2      	lsls	r2, r2, #7
    2df4:	440a      	add	r2, r1
    2df6:	4413      	add	r3, r2
    2df8:	3330      	adds	r3, #48	; 0x30
    2dfa:	7bfa      	ldrb	r2, [r7, #15]
    2dfc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2dfe:	bf00      	nop
    2e00:	3714      	adds	r7, #20
    2e02:	46bd      	mov	sp, r7
    2e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e08:	4770      	bx	lr

00002e0a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2e0a:	b480      	push	{r7}
    2e0c:	b085      	sub	sp, #20
    2e0e:	af00      	add	r7, sp, #0
    2e10:	6078      	str	r0, [r7, #4]
    2e12:	4608      	mov	r0, r1
    2e14:	4611      	mov	r1, r2
    2e16:	461a      	mov	r2, r3
    2e18:	4603      	mov	r3, r0
    2e1a:	70fb      	strb	r3, [r7, #3]
    2e1c:	460b      	mov	r3, r1
    2e1e:	70bb      	strb	r3, [r7, #2]
    2e20:	4613      	mov	r3, r2
    2e22:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e24:	78fa      	ldrb	r2, [r7, #3]
    2e26:	78bb      	ldrb	r3, [r7, #2]
    2e28:	6879      	ldr	r1, [r7, #4]
    2e2a:	01d2      	lsls	r2, r2, #7
    2e2c:	440a      	add	r2, r1
    2e2e:	4413      	add	r3, r2
    2e30:	3330      	adds	r3, #48	; 0x30
    2e32:	781b      	ldrb	r3, [r3, #0]
    2e34:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2e36:	7bfb      	ldrb	r3, [r7, #15]
    2e38:	f003 030f 	and.w	r3, r3, #15
    2e3c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    2e3e:	787b      	ldrb	r3, [r7, #1]
    2e40:	011b      	lsls	r3, r3, #4
    2e42:	b2da      	uxtb	r2, r3
    2e44:	7bfb      	ldrb	r3, [r7, #15]
    2e46:	4313      	orrs	r3, r2
    2e48:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e4a:	78fa      	ldrb	r2, [r7, #3]
    2e4c:	78bb      	ldrb	r3, [r7, #2]
    2e4e:	6879      	ldr	r1, [r7, #4]
    2e50:	01d2      	lsls	r2, r2, #7
    2e52:	440a      	add	r2, r1
    2e54:	4413      	add	r3, r2
    2e56:	3330      	adds	r3, #48	; 0x30
    2e58:	7bfa      	ldrb	r2, [r7, #15]
    2e5a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2e5c:	bf00      	nop
    2e5e:	3714      	adds	r7, #20
    2e60:	46bd      	mov	sp, r7
    2e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e66:	4770      	bx	lr

00002e68 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    2e68:	b480      	push	{r7}
    2e6a:	b085      	sub	sp, #20
    2e6c:	af00      	add	r7, sp, #0
    2e6e:	6078      	str	r0, [r7, #4]
    2e70:	4608      	mov	r0, r1
    2e72:	4611      	mov	r1, r2
    2e74:	461a      	mov	r2, r3
    2e76:	4603      	mov	r3, r0
    2e78:	70fb      	strb	r3, [r7, #3]
    2e7a:	460b      	mov	r3, r1
    2e7c:	70bb      	strb	r3, [r7, #2]
    2e7e:	4613      	mov	r3, r2
    2e80:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e82:	78fa      	ldrb	r2, [r7, #3]
    2e84:	78bb      	ldrb	r3, [r7, #2]
    2e86:	6879      	ldr	r1, [r7, #4]
    2e88:	01d2      	lsls	r2, r2, #7
    2e8a:	440a      	add	r2, r1
    2e8c:	4413      	add	r3, r2
    2e8e:	3340      	adds	r3, #64	; 0x40
    2e90:	781b      	ldrb	r3, [r3, #0]
    2e92:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e94:	7bfb      	ldrb	r3, [r7, #15]
    2e96:	f023 0301 	bic.w	r3, r3, #1
    2e9a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e9c:	787a      	ldrb	r2, [r7, #1]
    2e9e:	7bfb      	ldrb	r3, [r7, #15]
    2ea0:	4313      	orrs	r3, r2
    2ea2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ea4:	78fa      	ldrb	r2, [r7, #3]
    2ea6:	78bb      	ldrb	r3, [r7, #2]
    2ea8:	6879      	ldr	r1, [r7, #4]
    2eaa:	01d2      	lsls	r2, r2, #7
    2eac:	440a      	add	r2, r1
    2eae:	4413      	add	r3, r2
    2eb0:	3340      	adds	r3, #64	; 0x40
    2eb2:	7bfa      	ldrb	r2, [r7, #15]
    2eb4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2eb6:	bf00      	nop
    2eb8:	3714      	adds	r7, #20
    2eba:	46bd      	mov	sp, r7
    2ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ec0:	4770      	bx	lr

00002ec2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2ec2:	b490      	push	{r4, r7}
    2ec4:	b082      	sub	sp, #8
    2ec6:	af00      	add	r7, sp, #0
    2ec8:	6078      	str	r0, [r7, #4]
    2eca:	460b      	mov	r3, r1
    2ecc:	70fb      	strb	r3, [r7, #3]
    2ece:	4613      	mov	r3, r2
    2ed0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2ed2:	78fa      	ldrb	r2, [r7, #3]
    2ed4:	78bb      	ldrb	r3, [r7, #2]
    2ed6:	78f8      	ldrb	r0, [r7, #3]
    2ed8:	78b9      	ldrb	r1, [r7, #2]
    2eda:	687c      	ldr	r4, [r7, #4]
    2edc:	01c0      	lsls	r0, r0, #7
    2ede:	4420      	add	r0, r4
    2ee0:	4401      	add	r1, r0
    2ee2:	3140      	adds	r1, #64	; 0x40
    2ee4:	7809      	ldrb	r1, [r1, #0]
    2ee6:	b2c9      	uxtb	r1, r1
    2ee8:	f041 0104 	orr.w	r1, r1, #4
    2eec:	b2c8      	uxtb	r0, r1
    2eee:	6879      	ldr	r1, [r7, #4]
    2ef0:	01d2      	lsls	r2, r2, #7
    2ef2:	440a      	add	r2, r1
    2ef4:	4413      	add	r3, r2
    2ef6:	3340      	adds	r3, #64	; 0x40
    2ef8:	4602      	mov	r2, r0
    2efa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2efc:	bf00      	nop
    2efe:	3708      	adds	r7, #8
    2f00:	46bd      	mov	sp, r7
    2f02:	bc90      	pop	{r4, r7}
    2f04:	4770      	bx	lr

00002f06 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    2f06:	b490      	push	{r4, r7}
    2f08:	b082      	sub	sp, #8
    2f0a:	af00      	add	r7, sp, #0
    2f0c:	6078      	str	r0, [r7, #4]
    2f0e:	460b      	mov	r3, r1
    2f10:	70fb      	strb	r3, [r7, #3]
    2f12:	4613      	mov	r3, r2
    2f14:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f16:	78fa      	ldrb	r2, [r7, #3]
    2f18:	78bb      	ldrb	r3, [r7, #2]
    2f1a:	78f8      	ldrb	r0, [r7, #3]
    2f1c:	78b9      	ldrb	r1, [r7, #2]
    2f1e:	687c      	ldr	r4, [r7, #4]
    2f20:	01c0      	lsls	r0, r0, #7
    2f22:	4420      	add	r0, r4
    2f24:	4401      	add	r1, r0
    2f26:	3140      	adds	r1, #64	; 0x40
    2f28:	7809      	ldrb	r1, [r1, #0]
    2f2a:	b2c9      	uxtb	r1, r1
    2f2c:	f021 0104 	bic.w	r1, r1, #4
    2f30:	b2c8      	uxtb	r0, r1
    2f32:	6879      	ldr	r1, [r7, #4]
    2f34:	01d2      	lsls	r2, r2, #7
    2f36:	440a      	add	r2, r1
    2f38:	4413      	add	r3, r2
    2f3a:	3340      	adds	r3, #64	; 0x40
    2f3c:	4602      	mov	r2, r0
    2f3e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2f40:	bf00      	nop
    2f42:	3708      	adds	r7, #8
    2f44:	46bd      	mov	sp, r7
    2f46:	bc90      	pop	{r4, r7}
    2f48:	4770      	bx	lr

00002f4a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    2f4a:	b480      	push	{r7}
    2f4c:	b085      	sub	sp, #20
    2f4e:	af00      	add	r7, sp, #0
    2f50:	60f8      	str	r0, [r7, #12]
    2f52:	460b      	mov	r3, r1
    2f54:	607a      	str	r2, [r7, #4]
    2f56:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f58:	7afb      	ldrb	r3, [r7, #11]
    2f5a:	68fa      	ldr	r2, [r7, #12]
    2f5c:	01db      	lsls	r3, r3, #7
    2f5e:	4413      	add	r3, r2
    2f60:	3328      	adds	r3, #40	; 0x28
    2f62:	687a      	ldr	r2, [r7, #4]
    2f64:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2f66:	bf00      	nop
    2f68:	3714      	adds	r7, #20
    2f6a:	46bd      	mov	sp, r7
    2f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f70:	4770      	bx	lr
	...

00002f74 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    2f74:	b580      	push	{r7, lr}
    2f76:	b082      	sub	sp, #8
    2f78:	af00      	add	r7, sp, #0
    2f7a:	4603      	mov	r3, r0
    2f7c:	6039      	str	r1, [r7, #0]
    2f7e:	71fb      	strb	r3, [r7, #7]
    2f80:	4613      	mov	r3, r2
    2f82:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    2f84:	79bb      	ldrb	r3, [r7, #6]
    2f86:	2b01      	cmp	r3, #1
    2f88:	d01c      	beq.n	2fc4 <_gpio_set_direction+0x50>
    2f8a:	2b02      	cmp	r3, #2
    2f8c:	d037      	beq.n	2ffe <_gpio_set_direction+0x8a>
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d14e      	bne.n	3030 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    2f92:	79fb      	ldrb	r3, [r7, #7]
    2f94:	683a      	ldr	r2, [r7, #0]
    2f96:	4619      	mov	r1, r3
    2f98:	482a      	ldr	r0, [pc, #168]	; (3044 <_gpio_set_direction+0xd0>)
    2f9a:	4b2b      	ldr	r3, [pc, #172]	; (3048 <_gpio_set_direction+0xd4>)
    2f9c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2f9e:	683b      	ldr	r3, [r7, #0]
    2fa0:	b29b      	uxth	r3, r3
    2fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2fa6:	79fb      	ldrb	r3, [r7, #7]
    2fa8:	4619      	mov	r1, r3
    2faa:	4826      	ldr	r0, [pc, #152]	; (3044 <_gpio_set_direction+0xd0>)
    2fac:	4b27      	ldr	r3, [pc, #156]	; (304c <_gpio_set_direction+0xd8>)
    2fae:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2fb0:	683b      	ldr	r3, [r7, #0]
    2fb2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2fb4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2fb8:	79fb      	ldrb	r3, [r7, #7]
    2fba:	4619      	mov	r1, r3
    2fbc:	4821      	ldr	r0, [pc, #132]	; (3044 <_gpio_set_direction+0xd0>)
    2fbe:	4b23      	ldr	r3, [pc, #140]	; (304c <_gpio_set_direction+0xd8>)
    2fc0:	4798      	blx	r3
		break;
    2fc2:	e03a      	b.n	303a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    2fc4:	79fb      	ldrb	r3, [r7, #7]
    2fc6:	683a      	ldr	r2, [r7, #0]
    2fc8:	4619      	mov	r1, r3
    2fca:	481e      	ldr	r0, [pc, #120]	; (3044 <_gpio_set_direction+0xd0>)
    2fcc:	4b1e      	ldr	r3, [pc, #120]	; (3048 <_gpio_set_direction+0xd4>)
    2fce:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    2fd0:	683b      	ldr	r3, [r7, #0]
    2fd2:	b29b      	uxth	r3, r3
    2fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    2fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2fdc:	79f9      	ldrb	r1, [r7, #7]
    2fde:	461a      	mov	r2, r3
    2fe0:	4818      	ldr	r0, [pc, #96]	; (3044 <_gpio_set_direction+0xd0>)
    2fe2:	4b1a      	ldr	r3, [pc, #104]	; (304c <_gpio_set_direction+0xd8>)
    2fe4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    2fe6:	683b      	ldr	r3, [r7, #0]
    2fe8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2fea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    2fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2ff2:	79f9      	ldrb	r1, [r7, #7]
    2ff4:	461a      	mov	r2, r3
    2ff6:	4813      	ldr	r0, [pc, #76]	; (3044 <_gpio_set_direction+0xd0>)
    2ff8:	4b14      	ldr	r3, [pc, #80]	; (304c <_gpio_set_direction+0xd8>)
    2ffa:	4798      	blx	r3
		break;
    2ffc:	e01d      	b.n	303a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    2ffe:	79fb      	ldrb	r3, [r7, #7]
    3000:	683a      	ldr	r2, [r7, #0]
    3002:	4619      	mov	r1, r3
    3004:	480f      	ldr	r0, [pc, #60]	; (3044 <_gpio_set_direction+0xd0>)
    3006:	4b12      	ldr	r3, [pc, #72]	; (3050 <_gpio_set_direction+0xdc>)
    3008:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    300a:	683b      	ldr	r3, [r7, #0]
    300c:	b29b      	uxth	r3, r3
    300e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3012:	79fb      	ldrb	r3, [r7, #7]
    3014:	4619      	mov	r1, r3
    3016:	480b      	ldr	r0, [pc, #44]	; (3044 <_gpio_set_direction+0xd0>)
    3018:	4b0c      	ldr	r3, [pc, #48]	; (304c <_gpio_set_direction+0xd8>)
    301a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    301c:	683b      	ldr	r3, [r7, #0]
    301e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3020:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3024:	79fb      	ldrb	r3, [r7, #7]
    3026:	4619      	mov	r1, r3
    3028:	4806      	ldr	r0, [pc, #24]	; (3044 <_gpio_set_direction+0xd0>)
    302a:	4b08      	ldr	r3, [pc, #32]	; (304c <_gpio_set_direction+0xd8>)
    302c:	4798      	blx	r3
		break;
    302e:	e004      	b.n	303a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    3030:	2246      	movs	r2, #70	; 0x46
    3032:	4908      	ldr	r1, [pc, #32]	; (3054 <_gpio_set_direction+0xe0>)
    3034:	2000      	movs	r0, #0
    3036:	4b08      	ldr	r3, [pc, #32]	; (3058 <_gpio_set_direction+0xe4>)
    3038:	4798      	blx	r3
	}
}
    303a:	bf00      	nop
    303c:	3708      	adds	r7, #8
    303e:	46bd      	mov	sp, r7
    3040:	bd80      	pop	{r7, pc}
    3042:	bf00      	nop
    3044:	41008000 	.word	0x41008000
    3048:	00002d33 	.word	0x00002d33
    304c:	00002f4b 	.word	0x00002f4b
    3050:	00002d0b 	.word	0x00002d0b
    3054:	000128ac 	.word	0x000128ac
    3058:	00005ed5 	.word	0x00005ed5

0000305c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    305c:	b580      	push	{r7, lr}
    305e:	b082      	sub	sp, #8
    3060:	af00      	add	r7, sp, #0
    3062:	4603      	mov	r3, r0
    3064:	6039      	str	r1, [r7, #0]
    3066:	71fb      	strb	r3, [r7, #7]
    3068:	4613      	mov	r3, r2
    306a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    306c:	79bb      	ldrb	r3, [r7, #6]
    306e:	2b00      	cmp	r3, #0
    3070:	d006      	beq.n	3080 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    3072:	79fb      	ldrb	r3, [r7, #7]
    3074:	683a      	ldr	r2, [r7, #0]
    3076:	4619      	mov	r1, r3
    3078:	4806      	ldr	r0, [pc, #24]	; (3094 <_gpio_set_level+0x38>)
    307a:	4b07      	ldr	r3, [pc, #28]	; (3098 <_gpio_set_level+0x3c>)
    307c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    307e:	e005      	b.n	308c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    3080:	79fb      	ldrb	r3, [r7, #7]
    3082:	683a      	ldr	r2, [r7, #0]
    3084:	4619      	mov	r1, r3
    3086:	4803      	ldr	r0, [pc, #12]	; (3094 <_gpio_set_level+0x38>)
    3088:	4b04      	ldr	r3, [pc, #16]	; (309c <_gpio_set_level+0x40>)
    308a:	4798      	blx	r3
}
    308c:	bf00      	nop
    308e:	3708      	adds	r7, #8
    3090:	46bd      	mov	sp, r7
    3092:	bd80      	pop	{r7, pc}
    3094:	41008000 	.word	0x41008000
    3098:	00002d5b 	.word	0x00002d5b
    309c:	00002d83 	.word	0x00002d83

000030a0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b082      	sub	sp, #8
    30a4:	af00      	add	r7, sp, #0
    30a6:	4603      	mov	r3, r0
    30a8:	71fb      	strb	r3, [r7, #7]
    30aa:	460b      	mov	r3, r1
    30ac:	71bb      	strb	r3, [r7, #6]
    30ae:	4613      	mov	r3, r2
    30b0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    30b2:	797b      	ldrb	r3, [r7, #5]
    30b4:	2b01      	cmp	r3, #1
    30b6:	d00a      	beq.n	30ce <_gpio_set_pin_pull_mode+0x2e>
    30b8:	2b02      	cmp	r3, #2
    30ba:	d01f      	beq.n	30fc <_gpio_set_pin_pull_mode+0x5c>
    30bc:	2b00      	cmp	r3, #0
    30be:	d134      	bne.n	312a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    30c0:	79ba      	ldrb	r2, [r7, #6]
    30c2:	79fb      	ldrb	r3, [r7, #7]
    30c4:	4619      	mov	r1, r3
    30c6:	481e      	ldr	r0, [pc, #120]	; (3140 <_gpio_set_pin_pull_mode+0xa0>)
    30c8:	4b1e      	ldr	r3, [pc, #120]	; (3144 <_gpio_set_pin_pull_mode+0xa4>)
    30ca:	4798      	blx	r3
		break;
    30cc:	e033      	b.n	3136 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    30ce:	79bb      	ldrb	r3, [r7, #6]
    30d0:	2201      	movs	r2, #1
    30d2:	409a      	lsls	r2, r3
    30d4:	79fb      	ldrb	r3, [r7, #7]
    30d6:	4619      	mov	r1, r3
    30d8:	4819      	ldr	r0, [pc, #100]	; (3140 <_gpio_set_pin_pull_mode+0xa0>)
    30da:	4b1b      	ldr	r3, [pc, #108]	; (3148 <_gpio_set_pin_pull_mode+0xa8>)
    30dc:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    30de:	79ba      	ldrb	r2, [r7, #6]
    30e0:	79fb      	ldrb	r3, [r7, #7]
    30e2:	4619      	mov	r1, r3
    30e4:	4816      	ldr	r0, [pc, #88]	; (3140 <_gpio_set_pin_pull_mode+0xa0>)
    30e6:	4b19      	ldr	r3, [pc, #100]	; (314c <_gpio_set_pin_pull_mode+0xac>)
    30e8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    30ea:	79bb      	ldrb	r3, [r7, #6]
    30ec:	2201      	movs	r2, #1
    30ee:	409a      	lsls	r2, r3
    30f0:	79fb      	ldrb	r3, [r7, #7]
    30f2:	4619      	mov	r1, r3
    30f4:	4812      	ldr	r0, [pc, #72]	; (3140 <_gpio_set_pin_pull_mode+0xa0>)
    30f6:	4b16      	ldr	r3, [pc, #88]	; (3150 <_gpio_set_pin_pull_mode+0xb0>)
    30f8:	4798      	blx	r3
		break;
    30fa:	e01c      	b.n	3136 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    30fc:	79bb      	ldrb	r3, [r7, #6]
    30fe:	2201      	movs	r2, #1
    3100:	409a      	lsls	r2, r3
    3102:	79fb      	ldrb	r3, [r7, #7]
    3104:	4619      	mov	r1, r3
    3106:	480e      	ldr	r0, [pc, #56]	; (3140 <_gpio_set_pin_pull_mode+0xa0>)
    3108:	4b0f      	ldr	r3, [pc, #60]	; (3148 <_gpio_set_pin_pull_mode+0xa8>)
    310a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    310c:	79ba      	ldrb	r2, [r7, #6]
    310e:	79fb      	ldrb	r3, [r7, #7]
    3110:	4619      	mov	r1, r3
    3112:	480b      	ldr	r0, [pc, #44]	; (3140 <_gpio_set_pin_pull_mode+0xa0>)
    3114:	4b0d      	ldr	r3, [pc, #52]	; (314c <_gpio_set_pin_pull_mode+0xac>)
    3116:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    3118:	79bb      	ldrb	r3, [r7, #6]
    311a:	2201      	movs	r2, #1
    311c:	409a      	lsls	r2, r3
    311e:	79fb      	ldrb	r3, [r7, #7]
    3120:	4619      	mov	r1, r3
    3122:	4807      	ldr	r0, [pc, #28]	; (3140 <_gpio_set_pin_pull_mode+0xa0>)
    3124:	4b0b      	ldr	r3, [pc, #44]	; (3154 <_gpio_set_pin_pull_mode+0xb4>)
    3126:	4798      	blx	r3
		break;
    3128:	e005      	b.n	3136 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    312a:	2289      	movs	r2, #137	; 0x89
    312c:	490a      	ldr	r1, [pc, #40]	; (3158 <_gpio_set_pin_pull_mode+0xb8>)
    312e:	2000      	movs	r0, #0
    3130:	4b0a      	ldr	r3, [pc, #40]	; (315c <_gpio_set_pin_pull_mode+0xbc>)
    3132:	4798      	blx	r3
		break;
    3134:	bf00      	nop
	}
}
    3136:	bf00      	nop
    3138:	3708      	adds	r7, #8
    313a:	46bd      	mov	sp, r7
    313c:	bd80      	pop	{r7, pc}
    313e:	bf00      	nop
    3140:	41008000 	.word	0x41008000
    3144:	00002f07 	.word	0x00002f07
    3148:	00002d33 	.word	0x00002d33
    314c:	00002ec3 	.word	0x00002ec3
    3150:	00002d5b 	.word	0x00002d5b
    3154:	00002d83 	.word	0x00002d83
    3158:	000128ac 	.word	0x000128ac
    315c:	00005ed5 	.word	0x00005ed5

00003160 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    3160:	b590      	push	{r4, r7, lr}
    3162:	b085      	sub	sp, #20
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	095b      	lsrs	r3, r3, #5
    316e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	b2db      	uxtb	r3, r3
    3174:	f003 031f 	and.w	r3, r3, #31
    3178:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    317a:	683b      	ldr	r3, [r7, #0]
    317c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3180:	d106      	bne.n	3190 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    3182:	7bba      	ldrb	r2, [r7, #14]
    3184:	7bf9      	ldrb	r1, [r7, #15]
    3186:	2300      	movs	r3, #0
    3188:	4812      	ldr	r0, [pc, #72]	; (31d4 <_gpio_set_pin_function+0x74>)
    318a:	4c13      	ldr	r4, [pc, #76]	; (31d8 <_gpio_set_pin_function+0x78>)
    318c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    318e:	e01d      	b.n	31cc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    3190:	7bba      	ldrb	r2, [r7, #14]
    3192:	7bf9      	ldrb	r1, [r7, #15]
    3194:	2301      	movs	r3, #1
    3196:	480f      	ldr	r0, [pc, #60]	; (31d4 <_gpio_set_pin_function+0x74>)
    3198:	4c0f      	ldr	r4, [pc, #60]	; (31d8 <_gpio_set_pin_function+0x78>)
    319a:	47a0      	blx	r4
		if (pin & 1) {
    319c:	7bbb      	ldrb	r3, [r7, #14]
    319e:	f003 0301 	and.w	r3, r3, #1
    31a2:	2b00      	cmp	r3, #0
    31a4:	d009      	beq.n	31ba <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    31a6:	7bbb      	ldrb	r3, [r7, #14]
    31a8:	085b      	lsrs	r3, r3, #1
    31aa:	b2da      	uxtb	r2, r3
    31ac:	683b      	ldr	r3, [r7, #0]
    31ae:	b2db      	uxtb	r3, r3
    31b0:	7bf9      	ldrb	r1, [r7, #15]
    31b2:	4808      	ldr	r0, [pc, #32]	; (31d4 <_gpio_set_pin_function+0x74>)
    31b4:	4c09      	ldr	r4, [pc, #36]	; (31dc <_gpio_set_pin_function+0x7c>)
    31b6:	47a0      	blx	r4
}
    31b8:	e008      	b.n	31cc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    31ba:	7bbb      	ldrb	r3, [r7, #14]
    31bc:	085b      	lsrs	r3, r3, #1
    31be:	b2da      	uxtb	r2, r3
    31c0:	683b      	ldr	r3, [r7, #0]
    31c2:	b2db      	uxtb	r3, r3
    31c4:	7bf9      	ldrb	r1, [r7, #15]
    31c6:	4803      	ldr	r0, [pc, #12]	; (31d4 <_gpio_set_pin_function+0x74>)
    31c8:	4c05      	ldr	r4, [pc, #20]	; (31e0 <_gpio_set_pin_function+0x80>)
    31ca:	47a0      	blx	r4
}
    31cc:	bf00      	nop
    31ce:	3714      	adds	r7, #20
    31d0:	46bd      	mov	sp, r7
    31d2:	bd90      	pop	{r4, r7, pc}
    31d4:	41008000 	.word	0x41008000
    31d8:	00002e69 	.word	0x00002e69
    31dc:	00002e0b 	.word	0x00002e0b
    31e0:	00002dab 	.word	0x00002dab

000031e4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    31e4:	b580      	push	{r7, lr}
    31e6:	b082      	sub	sp, #8
    31e8:	af00      	add	r7, sp, #0
    31ea:	4603      	mov	r3, r0
    31ec:	460a      	mov	r2, r1
    31ee:	71fb      	strb	r3, [r7, #7]
    31f0:	4613      	mov	r3, r2
    31f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    31f4:	79fb      	ldrb	r3, [r7, #7]
    31f6:	095b      	lsrs	r3, r3, #5
    31f8:	b2d8      	uxtb	r0, r3
    31fa:	79fb      	ldrb	r3, [r7, #7]
    31fc:	f003 031f 	and.w	r3, r3, #31
    3200:	b2db      	uxtb	r3, r3
    3202:	79ba      	ldrb	r2, [r7, #6]
    3204:	4619      	mov	r1, r3
    3206:	4b03      	ldr	r3, [pc, #12]	; (3214 <gpio_set_pin_pull_mode+0x30>)
    3208:	4798      	blx	r3
}
    320a:	bf00      	nop
    320c:	3708      	adds	r7, #8
    320e:	46bd      	mov	sp, r7
    3210:	bd80      	pop	{r7, pc}
    3212:	bf00      	nop
    3214:	000030a1 	.word	0x000030a1

00003218 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3218:	b580      	push	{r7, lr}
    321a:	b082      	sub	sp, #8
    321c:	af00      	add	r7, sp, #0
    321e:	6078      	str	r0, [r7, #4]
    3220:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3222:	6839      	ldr	r1, [r7, #0]
    3224:	6878      	ldr	r0, [r7, #4]
    3226:	4b03      	ldr	r3, [pc, #12]	; (3234 <gpio_set_pin_function+0x1c>)
    3228:	4798      	blx	r3
}
    322a:	bf00      	nop
    322c:	3708      	adds	r7, #8
    322e:	46bd      	mov	sp, r7
    3230:	bd80      	pop	{r7, pc}
    3232:	bf00      	nop
    3234:	00003161 	.word	0x00003161

00003238 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3238:	b580      	push	{r7, lr}
    323a:	b082      	sub	sp, #8
    323c:	af00      	add	r7, sp, #0
    323e:	4603      	mov	r3, r0
    3240:	460a      	mov	r2, r1
    3242:	71fb      	strb	r3, [r7, #7]
    3244:	4613      	mov	r3, r2
    3246:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3248:	79fb      	ldrb	r3, [r7, #7]
    324a:	095b      	lsrs	r3, r3, #5
    324c:	b2d8      	uxtb	r0, r3
    324e:	79fb      	ldrb	r3, [r7, #7]
    3250:	f003 031f 	and.w	r3, r3, #31
    3254:	2201      	movs	r2, #1
    3256:	fa02 f303 	lsl.w	r3, r2, r3
    325a:	79ba      	ldrb	r2, [r7, #6]
    325c:	4619      	mov	r1, r3
    325e:	4b03      	ldr	r3, [pc, #12]	; (326c <gpio_set_pin_direction+0x34>)
    3260:	4798      	blx	r3
}
    3262:	bf00      	nop
    3264:	3708      	adds	r7, #8
    3266:	46bd      	mov	sp, r7
    3268:	bd80      	pop	{r7, pc}
    326a:	bf00      	nop
    326c:	00002f75 	.word	0x00002f75

00003270 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3270:	b580      	push	{r7, lr}
    3272:	b082      	sub	sp, #8
    3274:	af00      	add	r7, sp, #0
    3276:	4603      	mov	r3, r0
    3278:	460a      	mov	r2, r1
    327a:	71fb      	strb	r3, [r7, #7]
    327c:	4613      	mov	r3, r2
    327e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3280:	79fb      	ldrb	r3, [r7, #7]
    3282:	095b      	lsrs	r3, r3, #5
    3284:	b2d8      	uxtb	r0, r3
    3286:	79fb      	ldrb	r3, [r7, #7]
    3288:	f003 031f 	and.w	r3, r3, #31
    328c:	2201      	movs	r2, #1
    328e:	fa02 f303 	lsl.w	r3, r2, r3
    3292:	79ba      	ldrb	r2, [r7, #6]
    3294:	4619      	mov	r1, r3
    3296:	4b03      	ldr	r3, [pc, #12]	; (32a4 <gpio_set_pin_level+0x34>)
    3298:	4798      	blx	r3
}
    329a:	bf00      	nop
    329c:	3708      	adds	r7, #8
    329e:	46bd      	mov	sp, r7
    32a0:	bd80      	pop	{r7, pc}
    32a2:	bf00      	nop
    32a4:	0000305d 	.word	0x0000305d

000032a8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	af00      	add	r7, sp, #0
	_init_chip();
    32ac:	4b01      	ldr	r3, [pc, #4]	; (32b4 <init_mcu+0xc>)
    32ae:	4798      	blx	r3
}
    32b0:	bf00      	nop
    32b2:	bd80      	pop	{r7, pc}
    32b4:	00006ae1 	.word	0x00006ae1

000032b8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    32b8:	b580      	push	{r7, lr}
    32ba:	b082      	sub	sp, #8
    32bc:	af00      	add	r7, sp, #0
    32be:	6078      	str	r0, [r7, #4]
    32c0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	2b00      	cmp	r3, #0
    32c6:	d004      	beq.n	32d2 <wdt_init+0x1a>
    32c8:	683b      	ldr	r3, [r7, #0]
    32ca:	2b00      	cmp	r3, #0
    32cc:	d001      	beq.n	32d2 <wdt_init+0x1a>
    32ce:	2301      	movs	r3, #1
    32d0:	e000      	b.n	32d4 <wdt_init+0x1c>
    32d2:	2300      	movs	r3, #0
    32d4:	f003 0301 	and.w	r3, r3, #1
    32d8:	b2db      	uxtb	r3, r3
    32da:	2248      	movs	r2, #72	; 0x48
    32dc:	4907      	ldr	r1, [pc, #28]	; (32fc <wdt_init+0x44>)
    32de:	4618      	mov	r0, r3
    32e0:	4b07      	ldr	r3, [pc, #28]	; (3300 <wdt_init+0x48>)
    32e2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	683a      	ldr	r2, [r7, #0]
    32e8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    32ea:	687b      	ldr	r3, [r7, #4]
    32ec:	4618      	mov	r0, r3
    32ee:	4b05      	ldr	r3, [pc, #20]	; (3304 <wdt_init+0x4c>)
    32f0:	4798      	blx	r3
    32f2:	4603      	mov	r3, r0
}
    32f4:	4618      	mov	r0, r3
    32f6:	3708      	adds	r7, #8
    32f8:	46bd      	mov	sp, r7
    32fa:	bd80      	pop	{r7, pc}
    32fc:	000128c8 	.word	0x000128c8
    3300:	00005ed5 	.word	0x00005ed5
    3304:	0000d701 	.word	0x0000d701

00003308 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    3308:	b580      	push	{r7, lr}
    330a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    330c:	4804      	ldr	r0, [pc, #16]	; (3320 <CRC_CALC_init+0x18>)
    330e:	4b05      	ldr	r3, [pc, #20]	; (3324 <CRC_CALC_init+0x1c>)
    3310:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    3312:	4905      	ldr	r1, [pc, #20]	; (3328 <CRC_CALC_init+0x20>)
    3314:	4805      	ldr	r0, [pc, #20]	; (332c <CRC_CALC_init+0x24>)
    3316:	4b06      	ldr	r3, [pc, #24]	; (3330 <CRC_CALC_init+0x28>)
    3318:	4798      	blx	r3
}
    331a:	bf00      	nop
    331c:	bd80      	pop	{r7, pc}
    331e:	bf00      	nop
    3320:	40000800 	.word	0x40000800
    3324:	00002b6b 	.word	0x00002b6b
    3328:	41002000 	.word	0x41002000
    332c:	200028ac 	.word	0x200028ac
    3330:	00004301 	.word	0x00004301

00003334 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    3334:	b580      	push	{r7, lr}
    3336:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3338:	2244      	movs	r2, #68	; 0x44
    333a:	2104      	movs	r1, #4
    333c:	4825      	ldr	r0, [pc, #148]	; (33d4 <EXTERNAL_IRQ_0_init+0xa0>)
    333e:	4b26      	ldr	r3, [pc, #152]	; (33d8 <EXTERNAL_IRQ_0_init+0xa4>)
    3340:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    3342:	4826      	ldr	r0, [pc, #152]	; (33dc <EXTERNAL_IRQ_0_init+0xa8>)
    3344:	4b26      	ldr	r3, [pc, #152]	; (33e0 <EXTERNAL_IRQ_0_init+0xac>)
    3346:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    3348:	2101      	movs	r1, #1
    334a:	2040      	movs	r0, #64	; 0x40
    334c:	4b25      	ldr	r3, [pc, #148]	; (33e4 <EXTERNAL_IRQ_0_init+0xb0>)
    334e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    3350:	2100      	movs	r1, #0
    3352:	2040      	movs	r0, #64	; 0x40
    3354:	4b24      	ldr	r3, [pc, #144]	; (33e8 <EXTERNAL_IRQ_0_init+0xb4>)
    3356:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    3358:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    335c:	2040      	movs	r0, #64	; 0x40
    335e:	4b23      	ldr	r3, [pc, #140]	; (33ec <EXTERNAL_IRQ_0_init+0xb8>)
    3360:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    3362:	2101      	movs	r1, #1
    3364:	2004      	movs	r0, #4
    3366:	4b1f      	ldr	r3, [pc, #124]	; (33e4 <EXTERNAL_IRQ_0_init+0xb0>)
    3368:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    336a:	2102      	movs	r1, #2
    336c:	2004      	movs	r0, #4
    336e:	4b1e      	ldr	r3, [pc, #120]	; (33e8 <EXTERNAL_IRQ_0_init+0xb4>)
    3370:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    3372:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    3376:	2004      	movs	r0, #4
    3378:	4b1c      	ldr	r3, [pc, #112]	; (33ec <EXTERNAL_IRQ_0_init+0xb8>)
    337a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    337c:	2101      	movs	r1, #1
    337e:	2005      	movs	r0, #5
    3380:	4b18      	ldr	r3, [pc, #96]	; (33e4 <EXTERNAL_IRQ_0_init+0xb0>)
    3382:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    3384:	2102      	movs	r1, #2
    3386:	2005      	movs	r0, #5
    3388:	4b17      	ldr	r3, [pc, #92]	; (33e8 <EXTERNAL_IRQ_0_init+0xb4>)
    338a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    338c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3390:	2005      	movs	r0, #5
    3392:	4b16      	ldr	r3, [pc, #88]	; (33ec <EXTERNAL_IRQ_0_init+0xb8>)
    3394:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    3396:	2101      	movs	r1, #1
    3398:	2056      	movs	r0, #86	; 0x56
    339a:	4b12      	ldr	r3, [pc, #72]	; (33e4 <EXTERNAL_IRQ_0_init+0xb0>)
    339c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    339e:	2102      	movs	r1, #2
    33a0:	2056      	movs	r0, #86	; 0x56
    33a2:	4b11      	ldr	r3, [pc, #68]	; (33e8 <EXTERNAL_IRQ_0_init+0xb4>)
    33a4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    33a6:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    33aa:	2056      	movs	r0, #86	; 0x56
    33ac:	4b0f      	ldr	r3, [pc, #60]	; (33ec <EXTERNAL_IRQ_0_init+0xb8>)
    33ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    33b0:	2101      	movs	r1, #1
    33b2:	2057      	movs	r0, #87	; 0x57
    33b4:	4b0b      	ldr	r3, [pc, #44]	; (33e4 <EXTERNAL_IRQ_0_init+0xb0>)
    33b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    33b8:	2102      	movs	r1, #2
    33ba:	2057      	movs	r0, #87	; 0x57
    33bc:	4b0a      	ldr	r3, [pc, #40]	; (33e8 <EXTERNAL_IRQ_0_init+0xb4>)
    33be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    33c0:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    33c4:	2057      	movs	r0, #87	; 0x57
    33c6:	4b09      	ldr	r3, [pc, #36]	; (33ec <EXTERNAL_IRQ_0_init+0xb8>)
    33c8:	4798      	blx	r3

	ext_irq_init();
    33ca:	4b09      	ldr	r3, [pc, #36]	; (33f0 <EXTERNAL_IRQ_0_init+0xbc>)
    33cc:	4798      	blx	r3
}
    33ce:	bf00      	nop
    33d0:	bd80      	pop	{r7, pc}
    33d2:	bf00      	nop
    33d4:	40001c00 	.word	0x40001c00
    33d8:	000029e5 	.word	0x000029e5
    33dc:	40000800 	.word	0x40000800
    33e0:	00002acb 	.word	0x00002acb
    33e4:	00003239 	.word	0x00003239
    33e8:	000031e5 	.word	0x000031e5
    33ec:	00003219 	.word	0x00003219
    33f0:	000043c9 	.word	0x000043c9

000033f4 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    33f4:	b580      	push	{r7, lr}
    33f6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    33f8:	2244      	movs	r2, #68	; 0x44
    33fa:	210b      	movs	r1, #11
    33fc:	4804      	ldr	r0, [pc, #16]	; (3410 <EVENT_SYSTEM_0_init+0x1c>)
    33fe:	4b05      	ldr	r3, [pc, #20]	; (3414 <EVENT_SYSTEM_0_init+0x20>)
    3400:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    3402:	4805      	ldr	r0, [pc, #20]	; (3418 <EVENT_SYSTEM_0_init+0x24>)
    3404:	4b05      	ldr	r3, [pc, #20]	; (341c <EVENT_SYSTEM_0_init+0x28>)
    3406:	4798      	blx	r3

	event_system_init();
    3408:	4b05      	ldr	r3, [pc, #20]	; (3420 <EVENT_SYSTEM_0_init+0x2c>)
    340a:	4798      	blx	r3
}
    340c:	bf00      	nop
    340e:	bd80      	pop	{r7, pc}
    3410:	40001c00 	.word	0x40001c00
    3414:	000029e5 	.word	0x000029e5
    3418:	40000800 	.word	0x40000800
    341c:	00002b8b 	.word	0x00002b8b
    3420:	000043b5 	.word	0x000043b5

00003424 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    3424:	b580      	push	{r7, lr}
    3426:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    3428:	2101      	movs	r1, #1
    342a:	202b      	movs	r0, #43	; 0x2b
    342c:	4b2b      	ldr	r3, [pc, #172]	; (34dc <QSPI_N25Q256_PORT_init+0xb8>)
    342e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3430:	2100      	movs	r1, #0
    3432:	202b      	movs	r0, #43	; 0x2b
    3434:	4b2a      	ldr	r3, [pc, #168]	; (34e0 <QSPI_N25Q256_PORT_init+0xbc>)
    3436:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    3438:	492a      	ldr	r1, [pc, #168]	; (34e4 <QSPI_N25Q256_PORT_init+0xc0>)
    343a:	202b      	movs	r0, #43	; 0x2b
    343c:	4b2a      	ldr	r3, [pc, #168]	; (34e8 <QSPI_N25Q256_PORT_init+0xc4>)
    343e:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3440:	2102      	movs	r1, #2
    3442:	2008      	movs	r0, #8
    3444:	4b25      	ldr	r3, [pc, #148]	; (34dc <QSPI_N25Q256_PORT_init+0xb8>)
    3446:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    3448:	2100      	movs	r1, #0
    344a:	2008      	movs	r0, #8
    344c:	4b27      	ldr	r3, [pc, #156]	; (34ec <QSPI_N25Q256_PORT_init+0xc8>)
    344e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    3450:	2100      	movs	r1, #0
    3452:	2008      	movs	r0, #8
    3454:	4b22      	ldr	r3, [pc, #136]	; (34e0 <QSPI_N25Q256_PORT_init+0xbc>)
    3456:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    3458:	4925      	ldr	r1, [pc, #148]	; (34f0 <QSPI_N25Q256_PORT_init+0xcc>)
    345a:	2008      	movs	r0, #8
    345c:	4b22      	ldr	r3, [pc, #136]	; (34e8 <QSPI_N25Q256_PORT_init+0xc4>)
    345e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    3460:	2102      	movs	r1, #2
    3462:	2009      	movs	r0, #9
    3464:	4b1d      	ldr	r3, [pc, #116]	; (34dc <QSPI_N25Q256_PORT_init+0xb8>)
    3466:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    3468:	2100      	movs	r1, #0
    346a:	2009      	movs	r0, #9
    346c:	4b1f      	ldr	r3, [pc, #124]	; (34ec <QSPI_N25Q256_PORT_init+0xc8>)
    346e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    3470:	2100      	movs	r1, #0
    3472:	2009      	movs	r0, #9
    3474:	4b1a      	ldr	r3, [pc, #104]	; (34e0 <QSPI_N25Q256_PORT_init+0xbc>)
    3476:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    3478:	491e      	ldr	r1, [pc, #120]	; (34f4 <QSPI_N25Q256_PORT_init+0xd0>)
    347a:	2009      	movs	r0, #9
    347c:	4b1a      	ldr	r3, [pc, #104]	; (34e8 <QSPI_N25Q256_PORT_init+0xc4>)
    347e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3480:	2102      	movs	r1, #2
    3482:	200a      	movs	r0, #10
    3484:	4b15      	ldr	r3, [pc, #84]	; (34dc <QSPI_N25Q256_PORT_init+0xb8>)
    3486:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    3488:	2100      	movs	r1, #0
    348a:	200a      	movs	r0, #10
    348c:	4b17      	ldr	r3, [pc, #92]	; (34ec <QSPI_N25Q256_PORT_init+0xc8>)
    348e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3490:	2100      	movs	r1, #0
    3492:	200a      	movs	r0, #10
    3494:	4b12      	ldr	r3, [pc, #72]	; (34e0 <QSPI_N25Q256_PORT_init+0xbc>)
    3496:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    3498:	4917      	ldr	r1, [pc, #92]	; (34f8 <QSPI_N25Q256_PORT_init+0xd4>)
    349a:	200a      	movs	r0, #10
    349c:	4b12      	ldr	r3, [pc, #72]	; (34e8 <QSPI_N25Q256_PORT_init+0xc4>)
    349e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    34a0:	2102      	movs	r1, #2
    34a2:	200b      	movs	r0, #11
    34a4:	4b0d      	ldr	r3, [pc, #52]	; (34dc <QSPI_N25Q256_PORT_init+0xb8>)
    34a6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    34a8:	2100      	movs	r1, #0
    34aa:	200b      	movs	r0, #11
    34ac:	4b0f      	ldr	r3, [pc, #60]	; (34ec <QSPI_N25Q256_PORT_init+0xc8>)
    34ae:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    34b0:	2100      	movs	r1, #0
    34b2:	200b      	movs	r0, #11
    34b4:	4b0a      	ldr	r3, [pc, #40]	; (34e0 <QSPI_N25Q256_PORT_init+0xbc>)
    34b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    34b8:	4910      	ldr	r1, [pc, #64]	; (34fc <QSPI_N25Q256_PORT_init+0xd8>)
    34ba:	200b      	movs	r0, #11
    34bc:	4b0a      	ldr	r3, [pc, #40]	; (34e8 <QSPI_N25Q256_PORT_init+0xc4>)
    34be:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    34c0:	2101      	movs	r1, #1
    34c2:	202a      	movs	r0, #42	; 0x2a
    34c4:	4b05      	ldr	r3, [pc, #20]	; (34dc <QSPI_N25Q256_PORT_init+0xb8>)
    34c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    34c8:	2100      	movs	r1, #0
    34ca:	202a      	movs	r0, #42	; 0x2a
    34cc:	4b04      	ldr	r3, [pc, #16]	; (34e0 <QSPI_N25Q256_PORT_init+0xbc>)
    34ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    34d0:	490b      	ldr	r1, [pc, #44]	; (3500 <QSPI_N25Q256_PORT_init+0xdc>)
    34d2:	202a      	movs	r0, #42	; 0x2a
    34d4:	4b04      	ldr	r3, [pc, #16]	; (34e8 <QSPI_N25Q256_PORT_init+0xc4>)
    34d6:	4798      	blx	r3
}
    34d8:	bf00      	nop
    34da:	bd80      	pop	{r7, pc}
    34dc:	00003239 	.word	0x00003239
    34e0:	000031e5 	.word	0x000031e5
    34e4:	002b0007 	.word	0x002b0007
    34e8:	00003219 	.word	0x00003219
    34ec:	00003271 	.word	0x00003271
    34f0:	00080007 	.word	0x00080007
    34f4:	00090007 	.word	0x00090007
    34f8:	000a0007 	.word	0x000a0007
    34fc:	000b0007 	.word	0x000b0007
    3500:	002a0007 	.word	0x002a0007

00003504 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3504:	b580      	push	{r7, lr}
    3506:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    3508:	4805      	ldr	r0, [pc, #20]	; (3520 <QSPI_N25Q256_CLOCK_init+0x1c>)
    350a:	4b06      	ldr	r3, [pc, #24]	; (3524 <QSPI_N25Q256_CLOCK_init+0x20>)
    350c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    350e:	4804      	ldr	r0, [pc, #16]	; (3520 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3510:	4b05      	ldr	r3, [pc, #20]	; (3528 <QSPI_N25Q256_CLOCK_init+0x24>)
    3512:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3514:	4802      	ldr	r0, [pc, #8]	; (3520 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3516:	4b05      	ldr	r3, [pc, #20]	; (352c <QSPI_N25Q256_CLOCK_init+0x28>)
    3518:	4798      	blx	r3
}
    351a:	bf00      	nop
    351c:	bd80      	pop	{r7, pc}
    351e:	bf00      	nop
    3520:	40000800 	.word	0x40000800
    3524:	00002a2b 	.word	0x00002a2b
    3528:	00002a6b 	.word	0x00002a6b
    352c:	00002c4b 	.word	0x00002c4b

00003530 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3530:	b580      	push	{r7, lr}
    3532:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3534:	4b04      	ldr	r3, [pc, #16]	; (3548 <QSPI_N25Q256_init+0x18>)
    3536:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    3538:	4904      	ldr	r1, [pc, #16]	; (354c <QSPI_N25Q256_init+0x1c>)
    353a:	4805      	ldr	r0, [pc, #20]	; (3550 <QSPI_N25Q256_init+0x20>)
    353c:	4b05      	ldr	r3, [pc, #20]	; (3554 <QSPI_N25Q256_init+0x24>)
    353e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3540:	4b05      	ldr	r3, [pc, #20]	; (3558 <QSPI_N25Q256_init+0x28>)
    3542:	4798      	blx	r3
}
    3544:	bf00      	nop
    3546:	bd80      	pop	{r7, pc}
    3548:	00003505 	.word	0x00003505
    354c:	42003400 	.word	0x42003400
    3550:	20002714 	.word	0x20002714
    3554:	00004a71 	.word	0x00004a71
    3558:	00003425 	.word	0x00003425

0000355c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    355c:	b580      	push	{r7, lr}
    355e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3560:	4802      	ldr	r0, [pc, #8]	; (356c <DATETIME_CLOCK_CLOCK_init+0x10>)
    3562:	4b03      	ldr	r3, [pc, #12]	; (3570 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3564:	4798      	blx	r3
}
    3566:	bf00      	nop
    3568:	bd80      	pop	{r7, pc}
    356a:	bf00      	nop
    356c:	40000800 	.word	0x40000800
    3570:	00002aab 	.word	0x00002aab

00003574 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3574:	b580      	push	{r7, lr}
    3576:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    3578:	4b03      	ldr	r3, [pc, #12]	; (3588 <DATETIME_CLOCK_init+0x14>)
    357a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    357c:	4903      	ldr	r1, [pc, #12]	; (358c <DATETIME_CLOCK_init+0x18>)
    357e:	4804      	ldr	r0, [pc, #16]	; (3590 <DATETIME_CLOCK_init+0x1c>)
    3580:	4b04      	ldr	r3, [pc, #16]	; (3594 <DATETIME_CLOCK_init+0x20>)
    3582:	4798      	blx	r3
}
    3584:	bf00      	nop
    3586:	bd80      	pop	{r7, pc}
    3588:	0000355d 	.word	0x0000355d
    358c:	40002400 	.word	0x40002400
    3590:	20002888 	.word	0x20002888
    3594:	00004155 	.word	0x00004155

00003598 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    3598:	b580      	push	{r7, lr}
    359a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    359c:	2100      	movs	r1, #0
    359e:	2010      	movs	r0, #16
    35a0:	4b11      	ldr	r3, [pc, #68]	; (35e8 <SPI_MEMORIES_PORT_init+0x50>)
    35a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    35a4:	2102      	movs	r1, #2
    35a6:	2010      	movs	r0, #16
    35a8:	4b10      	ldr	r3, [pc, #64]	; (35ec <SPI_MEMORIES_PORT_init+0x54>)
    35aa:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    35ac:	4910      	ldr	r1, [pc, #64]	; (35f0 <SPI_MEMORIES_PORT_init+0x58>)
    35ae:	2010      	movs	r0, #16
    35b0:	4b10      	ldr	r3, [pc, #64]	; (35f4 <SPI_MEMORIES_PORT_init+0x5c>)
    35b2:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    35b4:	2100      	movs	r1, #0
    35b6:	2011      	movs	r0, #17
    35b8:	4b0b      	ldr	r3, [pc, #44]	; (35e8 <SPI_MEMORIES_PORT_init+0x50>)
    35ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    35bc:	2102      	movs	r1, #2
    35be:	2011      	movs	r0, #17
    35c0:	4b0a      	ldr	r3, [pc, #40]	; (35ec <SPI_MEMORIES_PORT_init+0x54>)
    35c2:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    35c4:	490c      	ldr	r1, [pc, #48]	; (35f8 <SPI_MEMORIES_PORT_init+0x60>)
    35c6:	2011      	movs	r0, #17
    35c8:	4b0a      	ldr	r3, [pc, #40]	; (35f4 <SPI_MEMORIES_PORT_init+0x5c>)
    35ca:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    35cc:	2101      	movs	r1, #1
    35ce:	2012      	movs	r0, #18
    35d0:	4b06      	ldr	r3, [pc, #24]	; (35ec <SPI_MEMORIES_PORT_init+0x54>)
    35d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    35d4:	2100      	movs	r1, #0
    35d6:	2012      	movs	r0, #18
    35d8:	4b08      	ldr	r3, [pc, #32]	; (35fc <SPI_MEMORIES_PORT_init+0x64>)
    35da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    35dc:	4908      	ldr	r1, [pc, #32]	; (3600 <SPI_MEMORIES_PORT_init+0x68>)
    35de:	2012      	movs	r0, #18
    35e0:	4b04      	ldr	r3, [pc, #16]	; (35f4 <SPI_MEMORIES_PORT_init+0x5c>)
    35e2:	4798      	blx	r3
}
    35e4:	bf00      	nop
    35e6:	bd80      	pop	{r7, pc}
    35e8:	00003271 	.word	0x00003271
    35ec:	00003239 	.word	0x00003239
    35f0:	00100002 	.word	0x00100002
    35f4:	00003219 	.word	0x00003219
    35f8:	00110002 	.word	0x00110002
    35fc:	000031e5 	.word	0x000031e5
    3600:	00120002 	.word	0x00120002

00003604 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    3604:	b580      	push	{r7, lr}
    3606:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3608:	2245      	movs	r2, #69	; 0x45
    360a:	2108      	movs	r1, #8
    360c:	4806      	ldr	r0, [pc, #24]	; (3628 <SPI_MEMORIES_CLOCK_init+0x24>)
    360e:	4b07      	ldr	r3, [pc, #28]	; (362c <SPI_MEMORIES_CLOCK_init+0x28>)
    3610:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3612:	224a      	movs	r2, #74	; 0x4a
    3614:	2103      	movs	r1, #3
    3616:	4804      	ldr	r0, [pc, #16]	; (3628 <SPI_MEMORIES_CLOCK_init+0x24>)
    3618:	4b04      	ldr	r3, [pc, #16]	; (362c <SPI_MEMORIES_CLOCK_init+0x28>)
    361a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    361c:	4804      	ldr	r0, [pc, #16]	; (3630 <SPI_MEMORIES_CLOCK_init+0x2c>)
    361e:	4b05      	ldr	r3, [pc, #20]	; (3634 <SPI_MEMORIES_CLOCK_init+0x30>)
    3620:	4798      	blx	r3
}
    3622:	bf00      	nop
    3624:	bd80      	pop	{r7, pc}
    3626:	bf00      	nop
    3628:	40001c00 	.word	0x40001c00
    362c:	000029e5 	.word	0x000029e5
    3630:	40000800 	.word	0x40000800
    3634:	00002aeb 	.word	0x00002aeb

00003638 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    3638:	b580      	push	{r7, lr}
    363a:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    363c:	4b04      	ldr	r3, [pc, #16]	; (3650 <SPI_MEMORIES_init+0x18>)
    363e:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    3640:	4904      	ldr	r1, [pc, #16]	; (3654 <SPI_MEMORIES_init+0x1c>)
    3642:	4805      	ldr	r0, [pc, #20]	; (3658 <SPI_MEMORIES_init+0x20>)
    3644:	4b05      	ldr	r3, [pc, #20]	; (365c <SPI_MEMORIES_init+0x24>)
    3646:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    3648:	4b05      	ldr	r3, [pc, #20]	; (3660 <SPI_MEMORIES_init+0x28>)
    364a:	4798      	blx	r3
}
    364c:	bf00      	nop
    364e:	bd80      	pop	{r7, pc}
    3650:	00003605 	.word	0x00003605
    3654:	40003400 	.word	0x40003400
    3658:	20002680 	.word	0x20002680
    365c:	00004f4d 	.word	0x00004f4d
    3660:	00003599 	.word	0x00003599

00003664 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    3664:	b580      	push	{r7, lr}
    3666:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
    3668:	2100      	movs	r1, #0
    366a:	200c      	movs	r0, #12
    366c:	4b07      	ldr	r3, [pc, #28]	; (368c <I2C_SHARED_PORT_init+0x28>)
    366e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    3670:	4907      	ldr	r1, [pc, #28]	; (3690 <I2C_SHARED_PORT_init+0x2c>)
    3672:	200c      	movs	r0, #12
    3674:	4b07      	ldr	r3, [pc, #28]	; (3694 <I2C_SHARED_PORT_init+0x30>)
    3676:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
    3678:	2100      	movs	r1, #0
    367a:	200d      	movs	r0, #13
    367c:	4b03      	ldr	r3, [pc, #12]	; (368c <I2C_SHARED_PORT_init+0x28>)
    367e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
    3680:	4905      	ldr	r1, [pc, #20]	; (3698 <I2C_SHARED_PORT_init+0x34>)
    3682:	200d      	movs	r0, #13
    3684:	4b03      	ldr	r3, [pc, #12]	; (3694 <I2C_SHARED_PORT_init+0x30>)
    3686:	4798      	blx	r3
}
    3688:	bf00      	nop
    368a:	bd80      	pop	{r7, pc}
    368c:	000031e5 	.word	0x000031e5
    3690:	000c0002 	.word	0x000c0002
    3694:	00003219 	.word	0x00003219
    3698:	000d0002 	.word	0x000d0002

0000369c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    369c:	b580      	push	{r7, lr}
    369e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    36a0:	2242      	movs	r2, #66	; 0x42
    36a2:	2117      	movs	r1, #23
    36a4:	4806      	ldr	r0, [pc, #24]	; (36c0 <I2C_SHARED_CLOCK_init+0x24>)
    36a6:	4b07      	ldr	r3, [pc, #28]	; (36c4 <I2C_SHARED_CLOCK_init+0x28>)
    36a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    36aa:	224a      	movs	r2, #74	; 0x4a
    36ac:	2103      	movs	r1, #3
    36ae:	4804      	ldr	r0, [pc, #16]	; (36c0 <I2C_SHARED_CLOCK_init+0x24>)
    36b0:	4b04      	ldr	r3, [pc, #16]	; (36c4 <I2C_SHARED_CLOCK_init+0x28>)
    36b2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
    36b4:	4804      	ldr	r0, [pc, #16]	; (36c8 <I2C_SHARED_CLOCK_init+0x2c>)
    36b6:	4b05      	ldr	r3, [pc, #20]	; (36cc <I2C_SHARED_CLOCK_init+0x30>)
    36b8:	4798      	blx	r3
}
    36ba:	bf00      	nop
    36bc:	bd80      	pop	{r7, pc}
    36be:	bf00      	nop
    36c0:	40001c00 	.word	0x40001c00
    36c4:	000029e5 	.word	0x000029e5
    36c8:	40000800 	.word	0x40000800
    36cc:	00002bab 	.word	0x00002bab

000036d0 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    36d0:	b580      	push	{r7, lr}
    36d2:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    36d4:	4b04      	ldr	r3, [pc, #16]	; (36e8 <I2C_SHARED_init+0x18>)
    36d6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM2);
    36d8:	4904      	ldr	r1, [pc, #16]	; (36ec <I2C_SHARED_init+0x1c>)
    36da:	4805      	ldr	r0, [pc, #20]	; (36f0 <I2C_SHARED_init+0x20>)
    36dc:	4b05      	ldr	r3, [pc, #20]	; (36f4 <I2C_SHARED_init+0x24>)
    36de:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    36e0:	4b05      	ldr	r3, [pc, #20]	; (36f8 <I2C_SHARED_init+0x28>)
    36e2:	4798      	blx	r3
}
    36e4:	bf00      	nop
    36e6:	bd80      	pop	{r7, pc}
    36e8:	0000369d 	.word	0x0000369d
    36ec:	41012000 	.word	0x41012000
    36f0:	2000280c 	.word	0x2000280c
    36f4:	0000fbf5 	.word	0x0000fbf5
    36f8:	00003665 	.word	0x00003665

000036fc <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    36fc:	b580      	push	{r7, lr}
    36fe:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    3700:	2100      	movs	r1, #0
    3702:	203b      	movs	r0, #59	; 0x3b
    3704:	4b11      	ldr	r3, [pc, #68]	; (374c <SPI_TEMP_PORT_init+0x50>)
    3706:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    3708:	2102      	movs	r1, #2
    370a:	203b      	movs	r0, #59	; 0x3b
    370c:	4b10      	ldr	r3, [pc, #64]	; (3750 <SPI_TEMP_PORT_init+0x54>)
    370e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    3710:	4910      	ldr	r1, [pc, #64]	; (3754 <SPI_TEMP_PORT_init+0x58>)
    3712:	203b      	movs	r0, #59	; 0x3b
    3714:	4b10      	ldr	r3, [pc, #64]	; (3758 <SPI_TEMP_PORT_init+0x5c>)
    3716:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    3718:	2100      	movs	r1, #0
    371a:	203a      	movs	r0, #58	; 0x3a
    371c:	4b0b      	ldr	r3, [pc, #44]	; (374c <SPI_TEMP_PORT_init+0x50>)
    371e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    3720:	2102      	movs	r1, #2
    3722:	203a      	movs	r0, #58	; 0x3a
    3724:	4b0a      	ldr	r3, [pc, #40]	; (3750 <SPI_TEMP_PORT_init+0x54>)
    3726:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    3728:	490c      	ldr	r1, [pc, #48]	; (375c <SPI_TEMP_PORT_init+0x60>)
    372a:	203a      	movs	r0, #58	; 0x3a
    372c:	4b0a      	ldr	r3, [pc, #40]	; (3758 <SPI_TEMP_PORT_init+0x5c>)
    372e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    3730:	2101      	movs	r1, #1
    3732:	203c      	movs	r0, #60	; 0x3c
    3734:	4b06      	ldr	r3, [pc, #24]	; (3750 <SPI_TEMP_PORT_init+0x54>)
    3736:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    3738:	2100      	movs	r1, #0
    373a:	203c      	movs	r0, #60	; 0x3c
    373c:	4b08      	ldr	r3, [pc, #32]	; (3760 <SPI_TEMP_PORT_init+0x64>)
    373e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    3740:	4908      	ldr	r1, [pc, #32]	; (3764 <SPI_TEMP_PORT_init+0x68>)
    3742:	203c      	movs	r0, #60	; 0x3c
    3744:	4b04      	ldr	r3, [pc, #16]	; (3758 <SPI_TEMP_PORT_init+0x5c>)
    3746:	4798      	blx	r3
}
    3748:	bf00      	nop
    374a:	bd80      	pop	{r7, pc}
    374c:	00003271 	.word	0x00003271
    3750:	00003239 	.word	0x00003239
    3754:	003b0003 	.word	0x003b0003
    3758:	00003219 	.word	0x00003219
    375c:	003a0003 	.word	0x003a0003
    3760:	000031e5 	.word	0x000031e5
    3764:	003c0003 	.word	0x003c0003

00003768 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    3768:	b580      	push	{r7, lr}
    376a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    376c:	2242      	movs	r2, #66	; 0x42
    376e:	2122      	movs	r1, #34	; 0x22
    3770:	4806      	ldr	r0, [pc, #24]	; (378c <SPI_TEMP_CLOCK_init+0x24>)
    3772:	4b07      	ldr	r3, [pc, #28]	; (3790 <SPI_TEMP_CLOCK_init+0x28>)
    3774:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3776:	224a      	movs	r2, #74	; 0x4a
    3778:	2103      	movs	r1, #3
    377a:	4804      	ldr	r0, [pc, #16]	; (378c <SPI_TEMP_CLOCK_init+0x24>)
    377c:	4b04      	ldr	r3, [pc, #16]	; (3790 <SPI_TEMP_CLOCK_init+0x28>)
    377e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    3780:	4804      	ldr	r0, [pc, #16]	; (3794 <SPI_TEMP_CLOCK_init+0x2c>)
    3782:	4b05      	ldr	r3, [pc, #20]	; (3798 <SPI_TEMP_CLOCK_init+0x30>)
    3784:	4798      	blx	r3
}
    3786:	bf00      	nop
    3788:	bd80      	pop	{r7, pc}
    378a:	bf00      	nop
    378c:	40001c00 	.word	0x40001c00
    3790:	000029e5 	.word	0x000029e5
    3794:	40000800 	.word	0x40000800
    3798:	00002c6b 	.word	0x00002c6b

0000379c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    379c:	b580      	push	{r7, lr}
    379e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    37a0:	4b05      	ldr	r3, [pc, #20]	; (37b8 <SPI_TEMP_init+0x1c>)
    37a2:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    37a4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    37a8:	4804      	ldr	r0, [pc, #16]	; (37bc <SPI_TEMP_init+0x20>)
    37aa:	4b05      	ldr	r3, [pc, #20]	; (37c0 <SPI_TEMP_init+0x24>)
    37ac:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    37ae:	4b05      	ldr	r3, [pc, #20]	; (37c4 <SPI_TEMP_init+0x28>)
    37b0:	4798      	blx	r3
}
    37b2:	bf00      	nop
    37b4:	bd80      	pop	{r7, pc}
    37b6:	bf00      	nop
    37b8:	00003769 	.word	0x00003769
    37bc:	200026b0 	.word	0x200026b0
    37c0:	00004d99 	.word	0x00004d99
    37c4:	000036fd 	.word	0x000036fd

000037c8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    37c8:	b580      	push	{r7, lr}
    37ca:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    37cc:	2100      	movs	r1, #0
    37ce:	2017      	movs	r0, #23
    37d0:	4b07      	ldr	r3, [pc, #28]	; (37f0 <I2C_EXPANDER_PORT_init+0x28>)
    37d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    37d4:	4907      	ldr	r1, [pc, #28]	; (37f4 <I2C_EXPANDER_PORT_init+0x2c>)
    37d6:	2017      	movs	r0, #23
    37d8:	4b07      	ldr	r3, [pc, #28]	; (37f8 <I2C_EXPANDER_PORT_init+0x30>)
    37da:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    37dc:	2100      	movs	r1, #0
    37de:	2016      	movs	r0, #22
    37e0:	4b03      	ldr	r3, [pc, #12]	; (37f0 <I2C_EXPANDER_PORT_init+0x28>)
    37e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    37e4:	4905      	ldr	r1, [pc, #20]	; (37fc <I2C_EXPANDER_PORT_init+0x34>)
    37e6:	2016      	movs	r0, #22
    37e8:	4b03      	ldr	r3, [pc, #12]	; (37f8 <I2C_EXPANDER_PORT_init+0x30>)
    37ea:	4798      	blx	r3
}
    37ec:	bf00      	nop
    37ee:	bd80      	pop	{r7, pc}
    37f0:	000031e5 	.word	0x000031e5
    37f4:	00170003 	.word	0x00170003
    37f8:	00003219 	.word	0x00003219
    37fc:	00160003 	.word	0x00160003

00003800 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    3800:	b580      	push	{r7, lr}
    3802:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3804:	2242      	movs	r2, #66	; 0x42
    3806:	2123      	movs	r1, #35	; 0x23
    3808:	4806      	ldr	r0, [pc, #24]	; (3824 <I2C_EXPANDER_CLOCK_init+0x24>)
    380a:	4b07      	ldr	r3, [pc, #28]	; (3828 <I2C_EXPANDER_CLOCK_init+0x28>)
    380c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    380e:	2246      	movs	r2, #70	; 0x46
    3810:	2103      	movs	r1, #3
    3812:	4804      	ldr	r0, [pc, #16]	; (3824 <I2C_EXPANDER_CLOCK_init+0x24>)
    3814:	4b04      	ldr	r3, [pc, #16]	; (3828 <I2C_EXPANDER_CLOCK_init+0x28>)
    3816:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    3818:	4804      	ldr	r0, [pc, #16]	; (382c <I2C_EXPANDER_CLOCK_init+0x2c>)
    381a:	4b05      	ldr	r3, [pc, #20]	; (3830 <I2C_EXPANDER_CLOCK_init+0x30>)
    381c:	4798      	blx	r3
}
    381e:	bf00      	nop
    3820:	bd80      	pop	{r7, pc}
    3822:	bf00      	nop
    3824:	40001c00 	.word	0x40001c00
    3828:	000029e5 	.word	0x000029e5
    382c:	40000800 	.word	0x40000800
    3830:	00002c8b 	.word	0x00002c8b

00003834 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    3834:	b580      	push	{r7, lr}
    3836:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    3838:	4b04      	ldr	r3, [pc, #16]	; (384c <I2C_EXPANDER_init+0x18>)
    383a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    383c:	4904      	ldr	r1, [pc, #16]	; (3850 <I2C_EXPANDER_init+0x1c>)
    383e:	4805      	ldr	r0, [pc, #20]	; (3854 <I2C_EXPANDER_init+0x20>)
    3840:	4b05      	ldr	r3, [pc, #20]	; (3858 <I2C_EXPANDER_init+0x24>)
    3842:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    3844:	4b05      	ldr	r3, [pc, #20]	; (385c <I2C_EXPANDER_init+0x28>)
    3846:	4798      	blx	r3
}
    3848:	bf00      	nop
    384a:	bd80      	pop	{r7, pc}
    384c:	00003801 	.word	0x00003801
    3850:	43000400 	.word	0x43000400
    3854:	200027cc 	.word	0x200027cc
    3858:	0000472d 	.word	0x0000472d
    385c:	000037c9 	.word	0x000037c9

00003860 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    3860:	b580      	push	{r7, lr}
    3862:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    3864:	2100      	movs	r1, #0
    3866:	2044      	movs	r0, #68	; 0x44
    3868:	4b11      	ldr	r3, [pc, #68]	; (38b0 <SPI_HI3593_PORT_init+0x50>)
    386a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    386c:	2102      	movs	r1, #2
    386e:	2044      	movs	r0, #68	; 0x44
    3870:	4b10      	ldr	r3, [pc, #64]	; (38b4 <SPI_HI3593_PORT_init+0x54>)
    3872:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    3874:	4910      	ldr	r1, [pc, #64]	; (38b8 <SPI_HI3593_PORT_init+0x58>)
    3876:	2044      	movs	r0, #68	; 0x44
    3878:	4b10      	ldr	r3, [pc, #64]	; (38bc <SPI_HI3593_PORT_init+0x5c>)
    387a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    387c:	2100      	movs	r1, #0
    387e:	2045      	movs	r0, #69	; 0x45
    3880:	4b0b      	ldr	r3, [pc, #44]	; (38b0 <SPI_HI3593_PORT_init+0x50>)
    3882:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    3884:	2102      	movs	r1, #2
    3886:	2045      	movs	r0, #69	; 0x45
    3888:	4b0a      	ldr	r3, [pc, #40]	; (38b4 <SPI_HI3593_PORT_init+0x54>)
    388a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    388c:	490c      	ldr	r1, [pc, #48]	; (38c0 <SPI_HI3593_PORT_init+0x60>)
    388e:	2045      	movs	r0, #69	; 0x45
    3890:	4b0a      	ldr	r3, [pc, #40]	; (38bc <SPI_HI3593_PORT_init+0x5c>)
    3892:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    3894:	2101      	movs	r1, #1
    3896:	2047      	movs	r0, #71	; 0x47
    3898:	4b06      	ldr	r3, [pc, #24]	; (38b4 <SPI_HI3593_PORT_init+0x54>)
    389a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    389c:	2100      	movs	r1, #0
    389e:	2047      	movs	r0, #71	; 0x47
    38a0:	4b08      	ldr	r3, [pc, #32]	; (38c4 <SPI_HI3593_PORT_init+0x64>)
    38a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    38a4:	4908      	ldr	r1, [pc, #32]	; (38c8 <SPI_HI3593_PORT_init+0x68>)
    38a6:	2047      	movs	r0, #71	; 0x47
    38a8:	4b04      	ldr	r3, [pc, #16]	; (38bc <SPI_HI3593_PORT_init+0x5c>)
    38aa:	4798      	blx	r3
}
    38ac:	bf00      	nop
    38ae:	bd80      	pop	{r7, pc}
    38b0:	00003271 	.word	0x00003271
    38b4:	00003239 	.word	0x00003239
    38b8:	00440002 	.word	0x00440002
    38bc:	00003219 	.word	0x00003219
    38c0:	00450002 	.word	0x00450002
    38c4:	000031e5 	.word	0x000031e5
    38c8:	00470002 	.word	0x00470002

000038cc <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    38cc:	b580      	push	{r7, lr}
    38ce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38d0:	2242      	movs	r2, #66	; 0x42
    38d2:	2124      	movs	r1, #36	; 0x24
    38d4:	4806      	ldr	r0, [pc, #24]	; (38f0 <SPI_HI3593_CLOCK_init+0x24>)
    38d6:	4b07      	ldr	r3, [pc, #28]	; (38f4 <SPI_HI3593_CLOCK_init+0x28>)
    38d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38da:	224a      	movs	r2, #74	; 0x4a
    38dc:	2103      	movs	r1, #3
    38de:	4804      	ldr	r0, [pc, #16]	; (38f0 <SPI_HI3593_CLOCK_init+0x24>)
    38e0:	4b04      	ldr	r3, [pc, #16]	; (38f4 <SPI_HI3593_CLOCK_init+0x28>)
    38e2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    38e4:	4804      	ldr	r0, [pc, #16]	; (38f8 <SPI_HI3593_CLOCK_init+0x2c>)
    38e6:	4b05      	ldr	r3, [pc, #20]	; (38fc <SPI_HI3593_CLOCK_init+0x30>)
    38e8:	4798      	blx	r3
}
    38ea:	bf00      	nop
    38ec:	bd80      	pop	{r7, pc}
    38ee:	bf00      	nop
    38f0:	40001c00 	.word	0x40001c00
    38f4:	000029e5 	.word	0x000029e5
    38f8:	40000800 	.word	0x40000800
    38fc:	00002cab 	.word	0x00002cab

00003900 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    3900:	b580      	push	{r7, lr}
    3902:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    3904:	4b04      	ldr	r3, [pc, #16]	; (3918 <SPI_HI3593_init+0x18>)
    3906:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    3908:	4904      	ldr	r1, [pc, #16]	; (391c <SPI_HI3593_init+0x1c>)
    390a:	4805      	ldr	r0, [pc, #20]	; (3920 <SPI_HI3593_init+0x20>)
    390c:	4b05      	ldr	r3, [pc, #20]	; (3924 <SPI_HI3593_init+0x24>)
    390e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    3910:	4b05      	ldr	r3, [pc, #20]	; (3928 <SPI_HI3593_init+0x28>)
    3912:	4798      	blx	r3
}
    3914:	bf00      	nop
    3916:	bd80      	pop	{r7, pc}
    3918:	000038cd 	.word	0x000038cd
    391c:	43000800 	.word	0x43000800
    3920:	20002698 	.word	0x20002698
    3924:	00004f4d 	.word	0x00004f4d
    3928:	00003861 	.word	0x00003861

0000392c <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    392c:	b580      	push	{r7, lr}
    392e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    3930:	2100      	movs	r1, #0
    3932:	2068      	movs	r0, #104	; 0x68
    3934:	4b07      	ldr	r3, [pc, #28]	; (3954 <I2C_EEPROM_PORT_init+0x28>)
    3936:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    3938:	4907      	ldr	r1, [pc, #28]	; (3958 <I2C_EEPROM_PORT_init+0x2c>)
    393a:	2068      	movs	r0, #104	; 0x68
    393c:	4b07      	ldr	r3, [pc, #28]	; (395c <I2C_EEPROM_PORT_init+0x30>)
    393e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    3940:	2100      	movs	r1, #0
    3942:	2069      	movs	r0, #105	; 0x69
    3944:	4b03      	ldr	r3, [pc, #12]	; (3954 <I2C_EEPROM_PORT_init+0x28>)
    3946:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    3948:	4905      	ldr	r1, [pc, #20]	; (3960 <I2C_EEPROM_PORT_init+0x34>)
    394a:	2069      	movs	r0, #105	; 0x69
    394c:	4b03      	ldr	r3, [pc, #12]	; (395c <I2C_EEPROM_PORT_init+0x30>)
    394e:	4798      	blx	r3
}
    3950:	bf00      	nop
    3952:	bd80      	pop	{r7, pc}
    3954:	000031e5 	.word	0x000031e5
    3958:	00680002 	.word	0x00680002
    395c:	00003219 	.word	0x00003219
    3960:	00690002 	.word	0x00690002

00003964 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    3964:	b580      	push	{r7, lr}
    3966:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3968:	2242      	movs	r2, #66	; 0x42
    396a:	2125      	movs	r1, #37	; 0x25
    396c:	4806      	ldr	r0, [pc, #24]	; (3988 <I2C_EEPROM_CLOCK_init+0x24>)
    396e:	4b07      	ldr	r3, [pc, #28]	; (398c <I2C_EEPROM_CLOCK_init+0x28>)
    3970:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3972:	224a      	movs	r2, #74	; 0x4a
    3974:	2103      	movs	r1, #3
    3976:	4804      	ldr	r0, [pc, #16]	; (3988 <I2C_EEPROM_CLOCK_init+0x24>)
    3978:	4b04      	ldr	r3, [pc, #16]	; (398c <I2C_EEPROM_CLOCK_init+0x28>)
    397a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    397c:	4804      	ldr	r0, [pc, #16]	; (3990 <I2C_EEPROM_CLOCK_init+0x2c>)
    397e:	4b05      	ldr	r3, [pc, #20]	; (3994 <I2C_EEPROM_CLOCK_init+0x30>)
    3980:	4798      	blx	r3
}
    3982:	bf00      	nop
    3984:	bd80      	pop	{r7, pc}
    3986:	bf00      	nop
    3988:	40001c00 	.word	0x40001c00
    398c:	000029e5 	.word	0x000029e5
    3990:	40000800 	.word	0x40000800
    3994:	00002ccb 	.word	0x00002ccb

00003998 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    3998:	b580      	push	{r7, lr}
    399a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <I2C_EEPROM_init+0x18>)
    399e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    39a0:	4904      	ldr	r1, [pc, #16]	; (39b4 <I2C_EEPROM_init+0x1c>)
    39a2:	4805      	ldr	r0, [pc, #20]	; (39b8 <I2C_EEPROM_init+0x20>)
    39a4:	4b05      	ldr	r3, [pc, #20]	; (39bc <I2C_EEPROM_init+0x24>)
    39a6:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    39a8:	4b05      	ldr	r3, [pc, #20]	; (39c0 <I2C_EEPROM_init+0x28>)
    39aa:	4798      	blx	r3
}
    39ac:	bf00      	nop
    39ae:	bd80      	pop	{r7, pc}
    39b0:	00003965 	.word	0x00003965
    39b4:	43000c00 	.word	0x43000c00
    39b8:	20002848 	.word	0x20002848
    39bc:	0000472d 	.word	0x0000472d
    39c0:	0000392d 	.word	0x0000392d

000039c4 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    39c4:	b580      	push	{r7, lr}
    39c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    39c8:	4808      	ldr	r0, [pc, #32]	; (39ec <TIMER_USB_init+0x28>)
    39ca:	4b09      	ldr	r3, [pc, #36]	; (39f0 <TIMER_USB_init+0x2c>)
    39cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    39ce:	2243      	movs	r2, #67	; 0x43
    39d0:	2109      	movs	r1, #9
    39d2:	4808      	ldr	r0, [pc, #32]	; (39f4 <TIMER_USB_init+0x30>)
    39d4:	4b08      	ldr	r3, [pc, #32]	; (39f8 <TIMER_USB_init+0x34>)
    39d6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    39d8:	4b08      	ldr	r3, [pc, #32]	; (39fc <TIMER_USB_init+0x38>)
    39da:	4798      	blx	r3
    39dc:	4603      	mov	r3, r0
    39de:	461a      	mov	r2, r3
    39e0:	4907      	ldr	r1, [pc, #28]	; (3a00 <TIMER_USB_init+0x3c>)
    39e2:	4808      	ldr	r0, [pc, #32]	; (3a04 <TIMER_USB_init+0x40>)
    39e4:	4b08      	ldr	r3, [pc, #32]	; (3a08 <TIMER_USB_init+0x44>)
    39e6:	4798      	blx	r3
}
    39e8:	bf00      	nop
    39ea:	bd80      	pop	{r7, pc}
    39ec:	40000800 	.word	0x40000800
    39f0:	00002b0b 	.word	0x00002b0b
    39f4:	40001c00 	.word	0x40001c00
    39f8:	000029e5 	.word	0x000029e5
    39fc:	0000ab6d 	.word	0x0000ab6d
    3a00:	40003800 	.word	0x40003800
    3a04:	200027b0 	.word	0x200027b0
    3a08:	0000511d 	.word	0x0000511d

00003a0c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    3a0c:	b580      	push	{r7, lr}
    3a0e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    3a10:	4808      	ldr	r0, [pc, #32]	; (3a34 <TIMER_EVENT_init+0x28>)
    3a12:	4b09      	ldr	r3, [pc, #36]	; (3a38 <TIMER_EVENT_init+0x2c>)
    3a14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a16:	2245      	movs	r2, #69	; 0x45
    3a18:	2109      	movs	r1, #9
    3a1a:	4808      	ldr	r0, [pc, #32]	; (3a3c <TIMER_EVENT_init+0x30>)
    3a1c:	4b08      	ldr	r3, [pc, #32]	; (3a40 <TIMER_EVENT_init+0x34>)
    3a1e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    3a20:	4b08      	ldr	r3, [pc, #32]	; (3a44 <TIMER_EVENT_init+0x38>)
    3a22:	4798      	blx	r3
    3a24:	4603      	mov	r3, r0
    3a26:	461a      	mov	r2, r3
    3a28:	4907      	ldr	r1, [pc, #28]	; (3a48 <TIMER_EVENT_init+0x3c>)
    3a2a:	4808      	ldr	r0, [pc, #32]	; (3a4c <TIMER_EVENT_init+0x40>)
    3a2c:	4b08      	ldr	r3, [pc, #32]	; (3a50 <TIMER_EVENT_init+0x44>)
    3a2e:	4798      	blx	r3
}
    3a30:	bf00      	nop
    3a32:	bd80      	pop	{r7, pc}
    3a34:	40000800 	.word	0x40000800
    3a38:	00002b2b 	.word	0x00002b2b
    3a3c:	40001c00 	.word	0x40001c00
    3a40:	000029e5 	.word	0x000029e5
    3a44:	0000ab6d 	.word	0x0000ab6d
    3a48:	40003c00 	.word	0x40003c00
    3a4c:	20002718 	.word	0x20002718
    3a50:	0000511d 	.word	0x0000511d

00003a54 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3a54:	b580      	push	{r7, lr}
    3a56:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3a58:	4808      	ldr	r0, [pc, #32]	; (3a7c <TIMER_ARINC_init+0x28>)
    3a5a:	4b09      	ldr	r3, [pc, #36]	; (3a80 <TIMER_ARINC_init+0x2c>)
    3a5c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a5e:	2244      	movs	r2, #68	; 0x44
    3a60:	211a      	movs	r1, #26
    3a62:	4808      	ldr	r0, [pc, #32]	; (3a84 <TIMER_ARINC_init+0x30>)
    3a64:	4b08      	ldr	r3, [pc, #32]	; (3a88 <TIMER_ARINC_init+0x34>)
    3a66:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3a68:	4b08      	ldr	r3, [pc, #32]	; (3a8c <TIMER_ARINC_init+0x38>)
    3a6a:	4798      	blx	r3
    3a6c:	4603      	mov	r3, r0
    3a6e:	461a      	mov	r2, r3
    3a70:	4907      	ldr	r1, [pc, #28]	; (3a90 <TIMER_ARINC_init+0x3c>)
    3a72:	4808      	ldr	r0, [pc, #32]	; (3a94 <TIMER_ARINC_init+0x40>)
    3a74:	4b08      	ldr	r3, [pc, #32]	; (3a98 <TIMER_ARINC_init+0x44>)
    3a76:	4798      	blx	r3
}
    3a78:	bf00      	nop
    3a7a:	bd80      	pop	{r7, pc}
    3a7c:	40000800 	.word	0x40000800
    3a80:	00002bcb 	.word	0x00002bcb
    3a84:	40001c00 	.word	0x40001c00
    3a88:	000029e5 	.word	0x000029e5
    3a8c:	0000ab6d 	.word	0x0000ab6d
    3a90:	4101a000 	.word	0x4101a000
    3a94:	20002794 	.word	0x20002794
    3a98:	0000511d 	.word	0x0000511d

00003a9c <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    3a9c:	b580      	push	{r7, lr}
    3a9e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    3aa0:	4808      	ldr	r0, [pc, #32]	; (3ac4 <TIMER_HVAC_init+0x28>)
    3aa2:	4b09      	ldr	r3, [pc, #36]	; (3ac8 <TIMER_HVAC_init+0x2c>)
    3aa4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3aa6:	2245      	movs	r2, #69	; 0x45
    3aa8:	211a      	movs	r1, #26
    3aaa:	4808      	ldr	r0, [pc, #32]	; (3acc <TIMER_HVAC_init+0x30>)
    3aac:	4b08      	ldr	r3, [pc, #32]	; (3ad0 <TIMER_HVAC_init+0x34>)
    3aae:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    3ab0:	4b08      	ldr	r3, [pc, #32]	; (3ad4 <TIMER_HVAC_init+0x38>)
    3ab2:	4798      	blx	r3
    3ab4:	4603      	mov	r3, r0
    3ab6:	461a      	mov	r2, r3
    3ab8:	4907      	ldr	r1, [pc, #28]	; (3ad8 <TIMER_HVAC_init+0x3c>)
    3aba:	4808      	ldr	r0, [pc, #32]	; (3adc <TIMER_HVAC_init+0x40>)
    3abc:	4b08      	ldr	r3, [pc, #32]	; (3ae0 <TIMER_HVAC_init+0x44>)
    3abe:	4798      	blx	r3
}
    3ac0:	bf00      	nop
    3ac2:	bd80      	pop	{r7, pc}
    3ac4:	40000800 	.word	0x40000800
    3ac8:	00002beb 	.word	0x00002beb
    3acc:	40001c00 	.word	0x40001c00
    3ad0:	000029e5 	.word	0x000029e5
    3ad4:	0000ab6d 	.word	0x0000ab6d
    3ad8:	4101c000 	.word	0x4101c000
    3adc:	2000282c 	.word	0x2000282c
    3ae0:	0000511d 	.word	0x0000511d

00003ae4 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    3ae4:	b580      	push	{r7, lr}
    3ae6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    3ae8:	4808      	ldr	r0, [pc, #32]	; (3b0c <TIMER_MAINTENANCE_init+0x28>)
    3aea:	4b09      	ldr	r3, [pc, #36]	; (3b10 <TIMER_MAINTENANCE_init+0x2c>)
    3aec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3aee:	2246      	movs	r2, #70	; 0x46
    3af0:	211e      	movs	r1, #30
    3af2:	4808      	ldr	r0, [pc, #32]	; (3b14 <TIMER_MAINTENANCE_init+0x30>)
    3af4:	4b08      	ldr	r3, [pc, #32]	; (3b18 <TIMER_MAINTENANCE_init+0x34>)
    3af6:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    3af8:	4b08      	ldr	r3, [pc, #32]	; (3b1c <TIMER_MAINTENANCE_init+0x38>)
    3afa:	4798      	blx	r3
    3afc:	4603      	mov	r3, r0
    3afe:	461a      	mov	r2, r3
    3b00:	4907      	ldr	r1, [pc, #28]	; (3b20 <TIMER_MAINTENANCE_init+0x3c>)
    3b02:	4808      	ldr	r0, [pc, #32]	; (3b24 <TIMER_MAINTENANCE_init+0x40>)
    3b04:	4b08      	ldr	r3, [pc, #32]	; (3b28 <TIMER_MAINTENANCE_init+0x44>)
    3b06:	4798      	blx	r3
}
    3b08:	bf00      	nop
    3b0a:	bd80      	pop	{r7, pc}
    3b0c:	40000800 	.word	0x40000800
    3b10:	00002c0b 	.word	0x00002c0b
    3b14:	40001c00 	.word	0x40001c00
    3b18:	000029e5 	.word	0x000029e5
    3b1c:	0000ab6d 	.word	0x0000ab6d
    3b20:	42001400 	.word	0x42001400
    3b24:	200026f8 	.word	0x200026f8
    3b28:	0000511d 	.word	0x0000511d

00003b2c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3b2c:	b580      	push	{r7, lr}
    3b2e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    3b30:	4808      	ldr	r0, [pc, #32]	; (3b54 <TIMER_INTERFACE_init+0x28>)
    3b32:	4b09      	ldr	r3, [pc, #36]	; (3b58 <TIMER_INTERFACE_init+0x2c>)
    3b34:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b36:	2246      	movs	r2, #70	; 0x46
    3b38:	211e      	movs	r1, #30
    3b3a:	4808      	ldr	r0, [pc, #32]	; (3b5c <TIMER_INTERFACE_init+0x30>)
    3b3c:	4b08      	ldr	r3, [pc, #32]	; (3b60 <TIMER_INTERFACE_init+0x34>)
    3b3e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    3b40:	4b08      	ldr	r3, [pc, #32]	; (3b64 <TIMER_INTERFACE_init+0x38>)
    3b42:	4798      	blx	r3
    3b44:	4603      	mov	r3, r0
    3b46:	461a      	mov	r2, r3
    3b48:	4907      	ldr	r1, [pc, #28]	; (3b68 <TIMER_INTERFACE_init+0x3c>)
    3b4a:	4808      	ldr	r0, [pc, #32]	; (3b6c <TIMER_INTERFACE_init+0x40>)
    3b4c:	4b08      	ldr	r3, [pc, #32]	; (3b70 <TIMER_INTERFACE_init+0x44>)
    3b4e:	4798      	blx	r3
}
    3b50:	bf00      	nop
    3b52:	bd80      	pop	{r7, pc}
    3b54:	40000800 	.word	0x40000800
    3b58:	00002c2b 	.word	0x00002c2b
    3b5c:	40001c00 	.word	0x40001c00
    3b60:	000029e5 	.word	0x000029e5
    3b64:	0000ab6d 	.word	0x0000ab6d
    3b68:	42001800 	.word	0x42001800
    3b6c:	20002734 	.word	0x20002734
    3b70:	0000511d 	.word	0x0000511d

00003b74 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3b74:	b480      	push	{r7}
    3b76:	af00      	add	r7, sp, #0
}
    3b78:	bf00      	nop
    3b7a:	46bd      	mov	sp, r7
    3b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b80:	4770      	bx	lr
	...

00003b84 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    3b84:	b580      	push	{r7, lr}
    3b86:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    3b88:	4804      	ldr	r0, [pc, #16]	; (3b9c <LIVE_PULSE_CLOCK_init+0x18>)
    3b8a:	4b05      	ldr	r3, [pc, #20]	; (3ba0 <LIVE_PULSE_CLOCK_init+0x1c>)
    3b8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b8e:	224b      	movs	r2, #75	; 0x4b
    3b90:	2127      	movs	r1, #39	; 0x27
    3b92:	4804      	ldr	r0, [pc, #16]	; (3ba4 <LIVE_PULSE_CLOCK_init+0x20>)
    3b94:	4b04      	ldr	r3, [pc, #16]	; (3ba8 <LIVE_PULSE_CLOCK_init+0x24>)
    3b96:	4798      	blx	r3
}
    3b98:	bf00      	nop
    3b9a:	bd80      	pop	{r7, pc}
    3b9c:	40000800 	.word	0x40000800
    3ba0:	00002ceb 	.word	0x00002ceb
    3ba4:	40001c00 	.word	0x40001c00
    3ba8:	000029e5 	.word	0x000029e5

00003bac <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    3bac:	b580      	push	{r7, lr}
    3bae:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    3bb0:	4b06      	ldr	r3, [pc, #24]	; (3bcc <LIVE_PULSE_init+0x20>)
    3bb2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    3bb4:	4b06      	ldr	r3, [pc, #24]	; (3bd0 <LIVE_PULSE_init+0x24>)
    3bb6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    3bb8:	4b06      	ldr	r3, [pc, #24]	; (3bd4 <LIVE_PULSE_init+0x28>)
    3bba:	4798      	blx	r3
    3bbc:	4603      	mov	r3, r0
    3bbe:	461a      	mov	r2, r3
    3bc0:	4905      	ldr	r1, [pc, #20]	; (3bd8 <LIVE_PULSE_init+0x2c>)
    3bc2:	4806      	ldr	r0, [pc, #24]	; (3bdc <LIVE_PULSE_init+0x30>)
    3bc4:	4b06      	ldr	r3, [pc, #24]	; (3be0 <LIVE_PULSE_init+0x34>)
    3bc6:	4798      	blx	r3
}
    3bc8:	bf00      	nop
    3bca:	bd80      	pop	{r7, pc}
    3bcc:	00003b85 	.word	0x00003b85
    3bd0:	00003b75 	.word	0x00003b75
    3bd4:	0000ab7d 	.word	0x0000ab7d
    3bd8:	43001800 	.word	0x43001800
    3bdc:	20002750 	.word	0x20002750
    3be0:	00004971 	.word	0x00004971

00003be4 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    3be4:	b580      	push	{r7, lr}
    3be6:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    3be8:	2102      	movs	r1, #2
    3bea:	2018      	movs	r0, #24
    3bec:	4b0f      	ldr	r3, [pc, #60]	; (3c2c <CDCUSB_PORT_init+0x48>)
    3bee:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    3bf0:	2100      	movs	r1, #0
    3bf2:	2018      	movs	r0, #24
    3bf4:	4b0e      	ldr	r3, [pc, #56]	; (3c30 <CDCUSB_PORT_init+0x4c>)
    3bf6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    3bf8:	2100      	movs	r1, #0
    3bfa:	2018      	movs	r0, #24
    3bfc:	4b0d      	ldr	r3, [pc, #52]	; (3c34 <CDCUSB_PORT_init+0x50>)
    3bfe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    3c00:	490d      	ldr	r1, [pc, #52]	; (3c38 <CDCUSB_PORT_init+0x54>)
    3c02:	2018      	movs	r0, #24
    3c04:	4b0d      	ldr	r3, [pc, #52]	; (3c3c <CDCUSB_PORT_init+0x58>)
    3c06:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    3c08:	2102      	movs	r1, #2
    3c0a:	2019      	movs	r0, #25
    3c0c:	4b07      	ldr	r3, [pc, #28]	; (3c2c <CDCUSB_PORT_init+0x48>)
    3c0e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    3c10:	2100      	movs	r1, #0
    3c12:	2019      	movs	r0, #25
    3c14:	4b06      	ldr	r3, [pc, #24]	; (3c30 <CDCUSB_PORT_init+0x4c>)
    3c16:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    3c18:	2100      	movs	r1, #0
    3c1a:	2019      	movs	r0, #25
    3c1c:	4b05      	ldr	r3, [pc, #20]	; (3c34 <CDCUSB_PORT_init+0x50>)
    3c1e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    3c20:	4907      	ldr	r1, [pc, #28]	; (3c40 <CDCUSB_PORT_init+0x5c>)
    3c22:	2019      	movs	r0, #25
    3c24:	4b05      	ldr	r3, [pc, #20]	; (3c3c <CDCUSB_PORT_init+0x58>)
    3c26:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    3c28:	bf00      	nop
    3c2a:	bd80      	pop	{r7, pc}
    3c2c:	00003239 	.word	0x00003239
    3c30:	00003271 	.word	0x00003271
    3c34:	000031e5 	.word	0x000031e5
    3c38:	00180007 	.word	0x00180007
    3c3c:	00003219 	.word	0x00003219
    3c40:	00190007 	.word	0x00190007

00003c44 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3c48:	2242      	movs	r2, #66	; 0x42
    3c4a:	210a      	movs	r1, #10
    3c4c:	4805      	ldr	r0, [pc, #20]	; (3c64 <CDCUSB_CLOCK_init+0x20>)
    3c4e:	4b06      	ldr	r3, [pc, #24]	; (3c68 <CDCUSB_CLOCK_init+0x24>)
    3c50:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    3c52:	4806      	ldr	r0, [pc, #24]	; (3c6c <CDCUSB_CLOCK_init+0x28>)
    3c54:	4b06      	ldr	r3, [pc, #24]	; (3c70 <CDCUSB_CLOCK_init+0x2c>)
    3c56:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3c58:	4804      	ldr	r0, [pc, #16]	; (3c6c <CDCUSB_CLOCK_init+0x28>)
    3c5a:	4b06      	ldr	r3, [pc, #24]	; (3c74 <CDCUSB_CLOCK_init+0x30>)
    3c5c:	4798      	blx	r3
}
    3c5e:	bf00      	nop
    3c60:	bd80      	pop	{r7, pc}
    3c62:	bf00      	nop
    3c64:	40001c00 	.word	0x40001c00
    3c68:	000029e5 	.word	0x000029e5
    3c6c:	40000800 	.word	0x40000800
    3c70:	00002a0b 	.word	0x00002a0b
    3c74:	00002b4b 	.word	0x00002b4b

00003c78 <CDCUSB_init>:

void CDCUSB_init(void)
{
    3c78:	b580      	push	{r7, lr}
    3c7a:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3c7c:	4b03      	ldr	r3, [pc, #12]	; (3c8c <CDCUSB_init+0x14>)
    3c7e:	4798      	blx	r3
	usb_d_init();
    3c80:	4b03      	ldr	r3, [pc, #12]	; (3c90 <CDCUSB_init+0x18>)
    3c82:	4798      	blx	r3
	CDCUSB_PORT_init();
    3c84:	4b03      	ldr	r3, [pc, #12]	; (3c94 <CDCUSB_init+0x1c>)
    3c86:	4798      	blx	r3
}
    3c88:	bf00      	nop
    3c8a:	bd80      	pop	{r7, pc}
    3c8c:	00003c45 	.word	0x00003c45
    3c90:	0000592d 	.word	0x0000592d
    3c94:	00003be5 	.word	0x00003be5

00003c98 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3c98:	b580      	push	{r7, lr}
    3c9a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3c9c:	4802      	ldr	r0, [pc, #8]	; (3ca8 <WATCHDOG_CLOCK_init+0x10>)
    3c9e:	4b03      	ldr	r3, [pc, #12]	; (3cac <WATCHDOG_CLOCK_init+0x14>)
    3ca0:	4798      	blx	r3
}
    3ca2:	bf00      	nop
    3ca4:	bd80      	pop	{r7, pc}
    3ca6:	bf00      	nop
    3ca8:	40000800 	.word	0x40000800
    3cac:	00002a8b 	.word	0x00002a8b

00003cb0 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    3cb4:	4b03      	ldr	r3, [pc, #12]	; (3cc4 <WATCHDOG_init+0x14>)
    3cb6:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    3cb8:	4903      	ldr	r1, [pc, #12]	; (3cc8 <WATCHDOG_init+0x18>)
    3cba:	4804      	ldr	r0, [pc, #16]	; (3ccc <WATCHDOG_init+0x1c>)
    3cbc:	4b04      	ldr	r3, [pc, #16]	; (3cd0 <WATCHDOG_init+0x20>)
    3cbe:	4798      	blx	r3
}
    3cc0:	bf00      	nop
    3cc2:	bd80      	pop	{r7, pc}
    3cc4:	00003c99 	.word	0x00003c99
    3cc8:	40002000 	.word	0x40002000
    3ccc:	200028a8 	.word	0x200028a8
    3cd0:	000032b9 	.word	0x000032b9

00003cd4 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    3cd8:	4904      	ldr	r1, [pc, #16]	; (3cec <CAN_CCU_PORT_init+0x18>)
    3cda:	202d      	movs	r0, #45	; 0x2d
    3cdc:	4b04      	ldr	r3, [pc, #16]	; (3cf0 <CAN_CCU_PORT_init+0x1c>)
    3cde:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3ce0:	4904      	ldr	r1, [pc, #16]	; (3cf4 <CAN_CCU_PORT_init+0x20>)
    3ce2:	202c      	movs	r0, #44	; 0x2c
    3ce4:	4b02      	ldr	r3, [pc, #8]	; (3cf0 <CAN_CCU_PORT_init+0x1c>)
    3ce6:	4798      	blx	r3
}
    3ce8:	bf00      	nop
    3cea:	bd80      	pop	{r7, pc}
    3cec:	002d0007 	.word	0x002d0007
    3cf0:	00003219 	.word	0x00003219
    3cf4:	002c0007 	.word	0x002c0007

00003cf8 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3cfc:	4807      	ldr	r0, [pc, #28]	; (3d1c <CAN_CCU_init+0x24>)
    3cfe:	4b08      	ldr	r3, [pc, #32]	; (3d20 <CAN_CCU_init+0x28>)
    3d00:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3d02:	2243      	movs	r2, #67	; 0x43
    3d04:	211c      	movs	r1, #28
    3d06:	4807      	ldr	r0, [pc, #28]	; (3d24 <CAN_CCU_init+0x2c>)
    3d08:	4b07      	ldr	r3, [pc, #28]	; (3d28 <CAN_CCU_init+0x30>)
    3d0a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3d0c:	4907      	ldr	r1, [pc, #28]	; (3d2c <CAN_CCU_init+0x34>)
    3d0e:	4808      	ldr	r0, [pc, #32]	; (3d30 <CAN_CCU_init+0x38>)
    3d10:	4b08      	ldr	r3, [pc, #32]	; (3d34 <CAN_CCU_init+0x3c>)
    3d12:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3d14:	4b08      	ldr	r3, [pc, #32]	; (3d38 <CAN_CCU_init+0x40>)
    3d16:	4798      	blx	r3
}
    3d18:	bf00      	nop
    3d1a:	bd80      	pop	{r7, pc}
    3d1c:	40000800 	.word	0x40000800
    3d20:	00002a4b 	.word	0x00002a4b
    3d24:	40001c00 	.word	0x40001c00
    3d28:	000029e5 	.word	0x000029e5
    3d2c:	42000400 	.word	0x42000400
    3d30:	2000276c 	.word	0x2000276c
    3d34:	00004215 	.word	0x00004215
    3d38:	00003cd5 	.word	0x00003cd5

00003d3c <system_init>:

void system_init(void)
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	af00      	add	r7, sp, #0
	init_mcu();
    3d40:	4b51      	ldr	r3, [pc, #324]	; (3e88 <system_init+0x14c>)
    3d42:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    3d44:	2101      	movs	r1, #1
    3d46:	200f      	movs	r0, #15
    3d48:	4b50      	ldr	r3, [pc, #320]	; (3e8c <system_init+0x150>)
    3d4a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    3d4c:	2102      	movs	r1, #2
    3d4e:	200f      	movs	r0, #15
    3d50:	4b4f      	ldr	r3, [pc, #316]	; (3e90 <system_init+0x154>)
    3d52:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    3d54:	f04f 31ff 	mov.w	r1, #4294967295
    3d58:	200f      	movs	r0, #15
    3d5a:	4b4e      	ldr	r3, [pc, #312]	; (3e94 <system_init+0x158>)
    3d5c:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    3d5e:	2101      	movs	r1, #1
    3d60:	2013      	movs	r0, #19
    3d62:	4b4a      	ldr	r3, [pc, #296]	; (3e8c <system_init+0x150>)
    3d64:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    3d66:	2102      	movs	r1, #2
    3d68:	2013      	movs	r0, #19
    3d6a:	4b49      	ldr	r3, [pc, #292]	; (3e90 <system_init+0x154>)
    3d6c:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    3d6e:	f04f 31ff 	mov.w	r1, #4294967295
    3d72:	2013      	movs	r0, #19
    3d74:	4b47      	ldr	r3, [pc, #284]	; (3e94 <system_init+0x158>)
    3d76:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    3d78:	2101      	movs	r1, #1
    3d7a:	2027      	movs	r0, #39	; 0x27
    3d7c:	4b44      	ldr	r3, [pc, #272]	; (3e90 <system_init+0x154>)
    3d7e:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    3d80:	2102      	movs	r1, #2
    3d82:	2027      	movs	r0, #39	; 0x27
    3d84:	4b44      	ldr	r3, [pc, #272]	; (3e98 <system_init+0x15c>)
    3d86:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    3d88:	f04f 31ff 	mov.w	r1, #4294967295
    3d8c:	2027      	movs	r0, #39	; 0x27
    3d8e:	4b41      	ldr	r3, [pc, #260]	; (3e94 <system_init+0x158>)
    3d90:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    3d92:	2101      	movs	r1, #1
    3d94:	203d      	movs	r0, #61	; 0x3d
    3d96:	4b3d      	ldr	r3, [pc, #244]	; (3e8c <system_init+0x150>)
    3d98:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    3d9a:	2102      	movs	r1, #2
    3d9c:	203d      	movs	r0, #61	; 0x3d
    3d9e:	4b3c      	ldr	r3, [pc, #240]	; (3e90 <system_init+0x154>)
    3da0:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    3da2:	f04f 31ff 	mov.w	r1, #4294967295
    3da6:	203d      	movs	r0, #61	; 0x3d
    3da8:	4b3a      	ldr	r3, [pc, #232]	; (3e94 <system_init+0x158>)
    3daa:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    3dac:	2101      	movs	r1, #1
    3dae:	203f      	movs	r0, #63	; 0x3f
    3db0:	4b37      	ldr	r3, [pc, #220]	; (3e90 <system_init+0x154>)
    3db2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    3db4:	2101      	movs	r1, #1
    3db6:	203f      	movs	r0, #63	; 0x3f
    3db8:	4b37      	ldr	r3, [pc, #220]	; (3e98 <system_init+0x15c>)
    3dba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    3dbc:	f04f 31ff 	mov.w	r1, #4294967295
    3dc0:	203f      	movs	r0, #63	; 0x3f
    3dc2:	4b34      	ldr	r3, [pc, #208]	; (3e94 <system_init+0x158>)
    3dc4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    3dc6:	2100      	movs	r1, #0
    3dc8:	204d      	movs	r0, #77	; 0x4d
    3dca:	4b30      	ldr	r3, [pc, #192]	; (3e8c <system_init+0x150>)
    3dcc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    3dce:	2102      	movs	r1, #2
    3dd0:	204d      	movs	r0, #77	; 0x4d
    3dd2:	4b2f      	ldr	r3, [pc, #188]	; (3e90 <system_init+0x154>)
    3dd4:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    3dd6:	f04f 31ff 	mov.w	r1, #4294967295
    3dda:	204d      	movs	r0, #77	; 0x4d
    3ddc:	4b2d      	ldr	r3, [pc, #180]	; (3e94 <system_init+0x158>)
    3dde:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    3de0:	2101      	movs	r1, #1
    3de2:	204e      	movs	r0, #78	; 0x4e
    3de4:	4b29      	ldr	r3, [pc, #164]	; (3e8c <system_init+0x150>)
    3de6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    3de8:	2102      	movs	r1, #2
    3dea:	204e      	movs	r0, #78	; 0x4e
    3dec:	4b28      	ldr	r3, [pc, #160]	; (3e90 <system_init+0x154>)
    3dee:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    3df0:	f04f 31ff 	mov.w	r1, #4294967295
    3df4:	204e      	movs	r0, #78	; 0x4e
    3df6:	4b27      	ldr	r3, [pc, #156]	; (3e94 <system_init+0x158>)
    3df8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    3dfa:	2100      	movs	r1, #0
    3dfc:	204f      	movs	r0, #79	; 0x4f
    3dfe:	4b23      	ldr	r3, [pc, #140]	; (3e8c <system_init+0x150>)
    3e00:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    3e02:	2102      	movs	r1, #2
    3e04:	204f      	movs	r0, #79	; 0x4f
    3e06:	4b22      	ldr	r3, [pc, #136]	; (3e90 <system_init+0x154>)
    3e08:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    3e0a:	f04f 31ff 	mov.w	r1, #4294967295
    3e0e:	204f      	movs	r0, #79	; 0x4f
    3e10:	4b20      	ldr	r3, [pc, #128]	; (3e94 <system_init+0x158>)
    3e12:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3e14:	2100      	movs	r1, #0
    3e16:	2052      	movs	r0, #82	; 0x52
    3e18:	4b1c      	ldr	r3, [pc, #112]	; (3e8c <system_init+0x150>)
    3e1a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3e1c:	2102      	movs	r1, #2
    3e1e:	2052      	movs	r0, #82	; 0x52
    3e20:	4b1b      	ldr	r3, [pc, #108]	; (3e90 <system_init+0x154>)
    3e22:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3e24:	f04f 31ff 	mov.w	r1, #4294967295
    3e28:	2052      	movs	r0, #82	; 0x52
    3e2a:	4b1a      	ldr	r3, [pc, #104]	; (3e94 <system_init+0x158>)
    3e2c:	4798      	blx	r3

	CRC_CALC_init();
    3e2e:	4b1b      	ldr	r3, [pc, #108]	; (3e9c <system_init+0x160>)
    3e30:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3e32:	4b1b      	ldr	r3, [pc, #108]	; (3ea0 <system_init+0x164>)
    3e34:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3e36:	4b1b      	ldr	r3, [pc, #108]	; (3ea4 <system_init+0x168>)
    3e38:	4798      	blx	r3

	QSPI_N25Q256_init();
    3e3a:	4b1b      	ldr	r3, [pc, #108]	; (3ea8 <system_init+0x16c>)
    3e3c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3e3e:	4b1b      	ldr	r3, [pc, #108]	; (3eac <system_init+0x170>)
    3e40:	4798      	blx	r3

	SPI_MEMORIES_init();
    3e42:	4b1b      	ldr	r3, [pc, #108]	; (3eb0 <system_init+0x174>)
    3e44:	4798      	blx	r3

	I2C_SHARED_init();
    3e46:	4b1b      	ldr	r3, [pc, #108]	; (3eb4 <system_init+0x178>)
    3e48:	4798      	blx	r3

	SPI_TEMP_init();
    3e4a:	4b1b      	ldr	r3, [pc, #108]	; (3eb8 <system_init+0x17c>)
    3e4c:	4798      	blx	r3

	I2C_EXPANDER_init();
    3e4e:	4b1b      	ldr	r3, [pc, #108]	; (3ebc <system_init+0x180>)
    3e50:	4798      	blx	r3

	SPI_HI3593_init();
    3e52:	4b1b      	ldr	r3, [pc, #108]	; (3ec0 <system_init+0x184>)
    3e54:	4798      	blx	r3

	I2C_EEPROM_init();
    3e56:	4b1b      	ldr	r3, [pc, #108]	; (3ec4 <system_init+0x188>)
    3e58:	4798      	blx	r3

	TIMER_USB_init();
    3e5a:	4b1b      	ldr	r3, [pc, #108]	; (3ec8 <system_init+0x18c>)
    3e5c:	4798      	blx	r3
	TIMER_EVENT_init();
    3e5e:	4b1b      	ldr	r3, [pc, #108]	; (3ecc <system_init+0x190>)
    3e60:	4798      	blx	r3
	TIMER_ARINC_init();
    3e62:	4b1b      	ldr	r3, [pc, #108]	; (3ed0 <system_init+0x194>)
    3e64:	4798      	blx	r3
	TIMER_HVAC_init();
    3e66:	4b1b      	ldr	r3, [pc, #108]	; (3ed4 <system_init+0x198>)
    3e68:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    3e6a:	4b1b      	ldr	r3, [pc, #108]	; (3ed8 <system_init+0x19c>)
    3e6c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    3e6e:	4b1b      	ldr	r3, [pc, #108]	; (3edc <system_init+0x1a0>)
    3e70:	4798      	blx	r3
	LIVE_PULSE_init();
    3e72:	4b1b      	ldr	r3, [pc, #108]	; (3ee0 <system_init+0x1a4>)
    3e74:	4798      	blx	r3

	CDCUSB_init();
    3e76:	4b1b      	ldr	r3, [pc, #108]	; (3ee4 <system_init+0x1a8>)
    3e78:	4798      	blx	r3

	WATCHDOG_init();
    3e7a:	4b1b      	ldr	r3, [pc, #108]	; (3ee8 <system_init+0x1ac>)
    3e7c:	4798      	blx	r3
	CAN_CCU_init();
    3e7e:	4b1b      	ldr	r3, [pc, #108]	; (3eec <system_init+0x1b0>)
    3e80:	4798      	blx	r3
}
    3e82:	bf00      	nop
    3e84:	bd80      	pop	{r7, pc}
    3e86:	bf00      	nop
    3e88:	000032a9 	.word	0x000032a9
    3e8c:	00003271 	.word	0x00003271
    3e90:	00003239 	.word	0x00003239
    3e94:	00003219 	.word	0x00003219
    3e98:	000031e5 	.word	0x000031e5
    3e9c:	00003309 	.word	0x00003309
    3ea0:	00003335 	.word	0x00003335
    3ea4:	000033f5 	.word	0x000033f5
    3ea8:	00003531 	.word	0x00003531
    3eac:	00003575 	.word	0x00003575
    3eb0:	00003639 	.word	0x00003639
    3eb4:	000036d1 	.word	0x000036d1
    3eb8:	0000379d 	.word	0x0000379d
    3ebc:	00003835 	.word	0x00003835
    3ec0:	00003901 	.word	0x00003901
    3ec4:	00003999 	.word	0x00003999
    3ec8:	000039c5 	.word	0x000039c5
    3ecc:	00003a0d 	.word	0x00003a0d
    3ed0:	00003a55 	.word	0x00003a55
    3ed4:	00003a9d 	.word	0x00003a9d
    3ed8:	00003ae5 	.word	0x00003ae5
    3edc:	00003b2d 	.word	0x00003b2d
    3ee0:	00003bad 	.word	0x00003bad
    3ee4:	00003c79 	.word	0x00003c79
    3ee8:	00003cb1 	.word	0x00003cb1
    3eec:	00003cf9 	.word	0x00003cf9

00003ef0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    3ef0:	b480      	push	{r7}
    3ef2:	b085      	sub	sp, #20
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3ef8:	f3ef 8310 	mrs	r3, PRIMASK
    3efc:	60fb      	str	r3, [r7, #12]
  return(result);
    3efe:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3f04:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3f06:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    3f0a:	bf00      	nop
    3f0c:	3714      	adds	r7, #20
    3f0e:	46bd      	mov	sp, r7
    3f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f14:	4770      	bx	lr

00003f16 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    3f16:	b480      	push	{r7}
    3f18:	b085      	sub	sp, #20
    3f1a:	af00      	add	r7, sp, #0
    3f1c:	6078      	str	r0, [r7, #4]
    3f1e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	681b      	ldr	r3, [r3, #0]
    3f26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3f28:	68fb      	ldr	r3, [r7, #12]
    3f2a:	f383 8810 	msr	PRIMASK, r3
}
    3f2e:	bf00      	nop
    3f30:	3714      	adds	r7, #20
    3f32:	46bd      	mov	sp, r7
    3f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f38:	4770      	bx	lr

00003f3a <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    3f3a:	b480      	push	{r7}
    3f3c:	b083      	sub	sp, #12
    3f3e:	af00      	add	r7, sp, #0
    3f40:	4603      	mov	r3, r0
    3f42:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    3f44:	88fb      	ldrh	r3, [r7, #6]
    3f46:	f003 0303 	and.w	r3, r3, #3
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d001      	beq.n	3f52 <leap_year+0x18>
		return false;
    3f4e:	2300      	movs	r3, #0
    3f50:	e000      	b.n	3f54 <leap_year+0x1a>
	} else {
		return true;
    3f52:	2301      	movs	r3, #1
	}
}
    3f54:	4618      	mov	r0, r3
    3f56:	370c      	adds	r7, #12
    3f58:	46bd      	mov	sp, r7
    3f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f5e:	4770      	bx	lr

00003f60 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    3f60:	b580      	push	{r7, lr}
    3f62:	b084      	sub	sp, #16
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	460b      	mov	r3, r1
    3f6a:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    3f6c:	2300      	movs	r3, #0
    3f6e:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	b29b      	uxth	r3, r3
    3f74:	4618      	mov	r0, r3
    3f76:	4b2f      	ldr	r3, [pc, #188]	; (4034 <get_secs_in_month+0xd4>)
    3f78:	4798      	blx	r3
    3f7a:	4603      	mov	r3, r0
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d028      	beq.n	3fd2 <get_secs_in_month+0x72>
		switch (month) {
    3f80:	78fb      	ldrb	r3, [r7, #3]
    3f82:	3b01      	subs	r3, #1
    3f84:	2b0b      	cmp	r3, #11
    3f86:	d84c      	bhi.n	4022 <get_secs_in_month+0xc2>
    3f88:	a201      	add	r2, pc, #4	; (adr r2, 3f90 <get_secs_in_month+0x30>)
    3f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3f8e:	bf00      	nop
    3f90:	00003fc1 	.word	0x00003fc1
    3f94:	00003fc7 	.word	0x00003fc7
    3f98:	00003fc1 	.word	0x00003fc1
    3f9c:	00003fcd 	.word	0x00003fcd
    3fa0:	00003fc1 	.word	0x00003fc1
    3fa4:	00003fcd 	.word	0x00003fcd
    3fa8:	00003fc1 	.word	0x00003fc1
    3fac:	00003fc1 	.word	0x00003fc1
    3fb0:	00003fcd 	.word	0x00003fcd
    3fb4:	00003fc1 	.word	0x00003fc1
    3fb8:	00003fcd 	.word	0x00003fcd
    3fbc:	00003fc1 	.word	0x00003fc1
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3fc0:	4b1d      	ldr	r3, [pc, #116]	; (4038 <get_secs_in_month+0xd8>)
    3fc2:	60fb      	str	r3, [r7, #12]
			break;
    3fc4:	e030      	b.n	4028 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    3fc6:	4b1d      	ldr	r3, [pc, #116]	; (403c <get_secs_in_month+0xdc>)
    3fc8:	60fb      	str	r3, [r7, #12]
			break;
    3fca:	e02d      	b.n	4028 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3fcc:	4b1c      	ldr	r3, [pc, #112]	; (4040 <get_secs_in_month+0xe0>)
    3fce:	60fb      	str	r3, [r7, #12]
			break;
    3fd0:	e02a      	b.n	4028 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    3fd2:	78fb      	ldrb	r3, [r7, #3]
    3fd4:	3b01      	subs	r3, #1
    3fd6:	2b0b      	cmp	r3, #11
    3fd8:	d825      	bhi.n	4026 <get_secs_in_month+0xc6>
    3fda:	a201      	add	r2, pc, #4	; (adr r2, 3fe0 <get_secs_in_month+0x80>)
    3fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3fe0:	00004011 	.word	0x00004011
    3fe4:	00004017 	.word	0x00004017
    3fe8:	00004011 	.word	0x00004011
    3fec:	0000401d 	.word	0x0000401d
    3ff0:	00004011 	.word	0x00004011
    3ff4:	0000401d 	.word	0x0000401d
    3ff8:	00004011 	.word	0x00004011
    3ffc:	00004011 	.word	0x00004011
    4000:	0000401d 	.word	0x0000401d
    4004:	00004011 	.word	0x00004011
    4008:	0000401d 	.word	0x0000401d
    400c:	00004011 	.word	0x00004011
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4010:	4b09      	ldr	r3, [pc, #36]	; (4038 <get_secs_in_month+0xd8>)
    4012:	60fb      	str	r3, [r7, #12]
			break;
    4014:	e008      	b.n	4028 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    4016:	4b0b      	ldr	r3, [pc, #44]	; (4044 <get_secs_in_month+0xe4>)
    4018:	60fb      	str	r3, [r7, #12]
			break;
    401a:	e005      	b.n	4028 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    401c:	4b08      	ldr	r3, [pc, #32]	; (4040 <get_secs_in_month+0xe0>)
    401e:	60fb      	str	r3, [r7, #12]
			break;
    4020:	e002      	b.n	4028 <get_secs_in_month+0xc8>
			break;
    4022:	bf00      	nop
    4024:	e000      	b.n	4028 <get_secs_in_month+0xc8>
		default:
			break;
    4026:	bf00      	nop
		}
	}

	return sec_in_month;
    4028:	68fb      	ldr	r3, [r7, #12]
}
    402a:	4618      	mov	r0, r3
    402c:	3710      	adds	r7, #16
    402e:	46bd      	mov	sp, r7
    4030:	bd80      	pop	{r7, pc}
    4032:	bf00      	nop
    4034:	00003f3b 	.word	0x00003f3b
    4038:	0028de80 	.word	0x0028de80
    403c:	00263b80 	.word	0x00263b80
    4040:	00278d00 	.word	0x00278d00
    4044:	0024ea00 	.word	0x0024ea00

00004048 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    4048:	b580      	push	{r7, lr}
    404a:	b08a      	sub	sp, #40	; 0x28
    404c:	af00      	add	r7, sp, #0
    404e:	60f8      	str	r0, [r7, #12]
    4050:	60b9      	str	r1, [r7, #8]
    4052:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	699b      	ldr	r3, [r3, #24]
    4058:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    405a:	2301      	movs	r3, #1
    405c:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    405e:	2301      	movs	r3, #1
    4060:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    4062:	2300      	movs	r3, #0
    4064:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    4066:	2300      	movs	r3, #0
    4068:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    406a:	68bb      	ldr	r3, [r7, #8]
    406c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    406e:	6a3b      	ldr	r3, [r7, #32]
    4070:	b29b      	uxth	r3, r3
    4072:	4618      	mov	r0, r3
    4074:	4b32      	ldr	r3, [pc, #200]	; (4140 <convert_timestamp_to_datetime+0xf8>)
    4076:	4798      	blx	r3
    4078:	4603      	mov	r3, r0
    407a:	2b00      	cmp	r3, #0
    407c:	d001      	beq.n	4082 <convert_timestamp_to_datetime+0x3a>
    407e:	4b31      	ldr	r3, [pc, #196]	; (4144 <convert_timestamp_to_datetime+0xfc>)
    4080:	e000      	b.n	4084 <convert_timestamp_to_datetime+0x3c>
    4082:	4b31      	ldr	r3, [pc, #196]	; (4148 <convert_timestamp_to_datetime+0x100>)
    4084:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    4086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4088:	69bb      	ldr	r3, [r7, #24]
    408a:	429a      	cmp	r2, r3
    408c:	d307      	bcc.n	409e <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4090:	69bb      	ldr	r3, [r7, #24]
    4092:	1ad3      	subs	r3, r2, r3
    4094:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    4096:	6a3b      	ldr	r3, [r7, #32]
    4098:	3301      	adds	r3, #1
    409a:	623b      	str	r3, [r7, #32]
    409c:	e7e7      	b.n	406e <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    409e:	7ffb      	ldrb	r3, [r7, #31]
    40a0:	4619      	mov	r1, r3
    40a2:	6a38      	ldr	r0, [r7, #32]
    40a4:	4b29      	ldr	r3, [pc, #164]	; (414c <convert_timestamp_to_datetime+0x104>)
    40a6:	4798      	blx	r3
    40a8:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    40aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    40ac:	697b      	ldr	r3, [r7, #20]
    40ae:	429a      	cmp	r2, r3
    40b0:	d307      	bcc.n	40c2 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    40b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    40b4:	697b      	ldr	r3, [r7, #20]
    40b6:	1ad3      	subs	r3, r2, r3
    40b8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    40ba:	7ffb      	ldrb	r3, [r7, #31]
    40bc:	3301      	adds	r3, #1
    40be:	77fb      	strb	r3, [r7, #31]
    40c0:	e7ed      	b.n	409e <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    40c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40c4:	4a22      	ldr	r2, [pc, #136]	; (4150 <convert_timestamp_to_datetime+0x108>)
    40c6:	4293      	cmp	r3, r2
    40c8:	d909      	bls.n	40de <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    40ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40cc:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    40d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    40d4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    40d6:	7fbb      	ldrb	r3, [r7, #30]
    40d8:	3301      	adds	r3, #1
    40da:	77bb      	strb	r3, [r7, #30]
    40dc:	e7f1      	b.n	40c2 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    40de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40e0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    40e4:	d307      	bcc.n	40f6 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    40e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40e8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    40ec:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    40ee:	7f7b      	ldrb	r3, [r7, #29]
    40f0:	3301      	adds	r3, #1
    40f2:	777b      	strb	r3, [r7, #29]
    40f4:	e7f3      	b.n	40de <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    40f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40f8:	2b3b      	cmp	r3, #59	; 0x3b
    40fa:	d906      	bls.n	410a <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    40fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40fe:	3b3c      	subs	r3, #60	; 0x3c
    4100:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    4102:	7f3b      	ldrb	r3, [r7, #28]
    4104:	3301      	adds	r3, #1
    4106:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    4108:	e7f5      	b.n	40f6 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    410a:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    410c:	6a3b      	ldr	r3, [r7, #32]
    410e:	b29a      	uxth	r2, r3
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	7ffa      	ldrb	r2, [r7, #31]
    4118:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	7fba      	ldrb	r2, [r7, #30]
    411e:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	7f7a      	ldrb	r2, [r7, #29]
    4124:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	7f3a      	ldrb	r2, [r7, #28]
    412a:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    412e:	b2da      	uxtb	r2, r3
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    4134:	2300      	movs	r3, #0
}
    4136:	4618      	mov	r0, r3
    4138:	3728      	adds	r7, #40	; 0x28
    413a:	46bd      	mov	sp, r7
    413c:	bd80      	pop	{r7, pc}
    413e:	bf00      	nop
    4140:	00003f3b 	.word	0x00003f3b
    4144:	01e28500 	.word	0x01e28500
    4148:	01e13380 	.word	0x01e13380
    414c:	00003f61 	.word	0x00003f61
    4150:	0001517f 	.word	0x0001517f

00004154 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    4154:	b580      	push	{r7, lr}
    4156:	b084      	sub	sp, #16
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
    415c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    415e:	2300      	movs	r3, #0
    4160:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	2b00      	cmp	r3, #0
    4166:	bf14      	ite	ne
    4168:	2301      	movne	r3, #1
    416a:	2300      	moveq	r3, #0
    416c:	b2db      	uxtb	r3, r3
    416e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    4172:	4911      	ldr	r1, [pc, #68]	; (41b8 <calendar_init+0x64>)
    4174:	4618      	mov	r0, r3
    4176:	4b11      	ldr	r3, [pc, #68]	; (41bc <calendar_init+0x68>)
    4178:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	681a      	ldr	r2, [r3, #0]
    417e:	683b      	ldr	r3, [r7, #0]
    4180:	429a      	cmp	r2, r3
    4182:	d101      	bne.n	4188 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    4184:	2300      	movs	r3, #0
    4186:	e013      	b.n	41b0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	681b      	ldr	r3, [r3, #0]
    418c:	2b00      	cmp	r3, #0
    418e:	d002      	beq.n	4196 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    4190:	f06f 0311 	mvn.w	r3, #17
    4194:	e00c      	b.n	41b0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    4196:	687b      	ldr	r3, [r7, #4]
    4198:	683a      	ldr	r2, [r7, #0]
    419a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	4618      	mov	r0, r3
    41a0:	4b07      	ldr	r3, [pc, #28]	; (41c0 <calendar_init+0x6c>)
    41a2:	4798      	blx	r3
    41a4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    41ac:	619a      	str	r2, [r3, #24]

	return ret;
    41ae:	68fb      	ldr	r3, [r7, #12]
}
    41b0:	4618      	mov	r0, r3
    41b2:	3710      	adds	r7, #16
    41b4:	46bd      	mov	sp, r7
    41b6:	bd80      	pop	{r7, pc}
    41b8:	000128e4 	.word	0x000128e4
    41bc:	00005ed5 	.word	0x00005ed5
    41c0:	00008215 	.word	0x00008215

000041c4 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    41c4:	b580      	push	{r7, lr}
    41c6:	b084      	sub	sp, #16
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
    41cc:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	2b00      	cmp	r3, #0
    41d2:	bf14      	ite	ne
    41d4:	2301      	movne	r3, #1
    41d6:	2300      	moveq	r3, #0
    41d8:	b2db      	uxtb	r3, r3
    41da:	f240 223b 	movw	r2, #571	; 0x23b
    41de:	4909      	ldr	r1, [pc, #36]	; (4204 <calendar_get_date_time+0x40>)
    41e0:	4618      	mov	r0, r3
    41e2:	4b09      	ldr	r3, [pc, #36]	; (4208 <calendar_get_date_time+0x44>)
    41e4:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    41e6:	687b      	ldr	r3, [r7, #4]
    41e8:	4618      	mov	r0, r3
    41ea:	4b08      	ldr	r3, [pc, #32]	; (420c <calendar_get_date_time+0x48>)
    41ec:	4798      	blx	r3
    41ee:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    41f0:	683a      	ldr	r2, [r7, #0]
    41f2:	68f9      	ldr	r1, [r7, #12]
    41f4:	6878      	ldr	r0, [r7, #4]
    41f6:	4b06      	ldr	r3, [pc, #24]	; (4210 <calendar_get_date_time+0x4c>)
    41f8:	4798      	blx	r3

	return ERR_NONE;
    41fa:	2300      	movs	r3, #0
}
    41fc:	4618      	mov	r0, r3
    41fe:	3710      	adds	r7, #16
    4200:	46bd      	mov	sp, r7
    4202:	bd80      	pop	{r7, pc}
    4204:	000128e4 	.word	0x000128e4
    4208:	00005ed5 	.word	0x00005ed5
    420c:	000082cd 	.word	0x000082cd
    4210:	00004049 	.word	0x00004049

00004214 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    4214:	b580      	push	{r7, lr}
    4216:	b084      	sub	sp, #16
    4218:	af00      	add	r7, sp, #0
    421a:	6078      	str	r0, [r7, #4]
    421c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	2b00      	cmp	r3, #0
    4222:	d004      	beq.n	422e <can_async_init+0x1a>
    4224:	683b      	ldr	r3, [r7, #0]
    4226:	2b00      	cmp	r3, #0
    4228:	d001      	beq.n	422e <can_async_init+0x1a>
    422a:	2301      	movs	r3, #1
    422c:	e000      	b.n	4230 <can_async_init+0x1c>
    422e:	2300      	movs	r3, #0
    4230:	f003 0301 	and.w	r3, r3, #1
    4234:	b2db      	uxtb	r3, r3
    4236:	2241      	movs	r2, #65	; 0x41
    4238:	490e      	ldr	r1, [pc, #56]	; (4274 <can_async_init+0x60>)
    423a:	4618      	mov	r0, r3
    423c:	4b0e      	ldr	r3, [pc, #56]	; (4278 <can_async_init+0x64>)
    423e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	6839      	ldr	r1, [r7, #0]
    4244:	4618      	mov	r0, r3
    4246:	4b0d      	ldr	r3, [pc, #52]	; (427c <can_async_init+0x68>)
    4248:	4798      	blx	r3
    424a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    424c:	68fb      	ldr	r3, [r7, #12]
    424e:	2b00      	cmp	r3, #0
    4250:	d001      	beq.n	4256 <can_async_init+0x42>
		return rc;
    4252:	68fb      	ldr	r3, [r7, #12]
    4254:	e009      	b.n	426a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	4a09      	ldr	r2, [pc, #36]	; (4280 <can_async_init+0x6c>)
    425a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	4a09      	ldr	r2, [pc, #36]	; (4284 <can_async_init+0x70>)
    4260:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	4a08      	ldr	r2, [pc, #32]	; (4288 <can_async_init+0x74>)
    4266:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4268:	2300      	movs	r3, #0
}
    426a:	4618      	mov	r0, r3
    426c:	3710      	adds	r7, #16
    426e:	46bd      	mov	sp, r7
    4270:	bd80      	pop	{r7, pc}
    4272:	bf00      	nop
    4274:	00012900 	.word	0x00012900
    4278:	00005ed5 	.word	0x00005ed5
    427c:	00006431 	.word	0x00006431
    4280:	0000428d 	.word	0x0000428d
    4284:	000042b1 	.word	0x000042b1
    4288:	000042d5 	.word	0x000042d5

0000428c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    428c:	b580      	push	{r7, lr}
    428e:	b084      	sub	sp, #16
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    4298:	68fb      	ldr	r3, [r7, #12]
    429a:	69db      	ldr	r3, [r3, #28]
    429c:	2b00      	cmp	r3, #0
    429e:	d003      	beq.n	42a8 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    42a0:	68fb      	ldr	r3, [r7, #12]
    42a2:	69db      	ldr	r3, [r3, #28]
    42a4:	68f8      	ldr	r0, [r7, #12]
    42a6:	4798      	blx	r3
	}
}
    42a8:	bf00      	nop
    42aa:	3710      	adds	r7, #16
    42ac:	46bd      	mov	sp, r7
    42ae:	bd80      	pop	{r7, pc}

000042b0 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    42b0:	b580      	push	{r7, lr}
    42b2:	b084      	sub	sp, #16
    42b4:	af00      	add	r7, sp, #0
    42b6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    42b8:	687b      	ldr	r3, [r7, #4]
    42ba:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	6a1b      	ldr	r3, [r3, #32]
    42c0:	2b00      	cmp	r3, #0
    42c2:	d003      	beq.n	42cc <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    42c4:	68fb      	ldr	r3, [r7, #12]
    42c6:	6a1b      	ldr	r3, [r3, #32]
    42c8:	68f8      	ldr	r0, [r7, #12]
    42ca:	4798      	blx	r3
	}
}
    42cc:	bf00      	nop
    42ce:	3710      	adds	r7, #16
    42d0:	46bd      	mov	sp, r7
    42d2:	bd80      	pop	{r7, pc}

000042d4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b084      	sub	sp, #16
    42d8:	af00      	add	r7, sp, #0
    42da:	6078      	str	r0, [r7, #4]
    42dc:	460b      	mov	r3, r1
    42de:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    42e4:	68fb      	ldr	r3, [r7, #12]
    42e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42e8:	2b00      	cmp	r3, #0
    42ea:	d005      	beq.n	42f8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    42ec:	68fb      	ldr	r3, [r7, #12]
    42ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42f0:	78fa      	ldrb	r2, [r7, #3]
    42f2:	4611      	mov	r1, r2
    42f4:	68f8      	ldr	r0, [r7, #12]
    42f6:	4798      	blx	r3
	}
}
    42f8:	bf00      	nop
    42fa:	3710      	adds	r7, #16
    42fc:	46bd      	mov	sp, r7
    42fe:	bd80      	pop	{r7, pc}

00004300 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4300:	b580      	push	{r7, lr}
    4302:	b082      	sub	sp, #8
    4304:	af00      	add	r7, sp, #0
    4306:	6078      	str	r0, [r7, #4]
    4308:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	2b00      	cmp	r3, #0
    430e:	d004      	beq.n	431a <crc_sync_init+0x1a>
    4310:	683b      	ldr	r3, [r7, #0]
    4312:	2b00      	cmp	r3, #0
    4314:	d001      	beq.n	431a <crc_sync_init+0x1a>
    4316:	2301      	movs	r3, #1
    4318:	e000      	b.n	431c <crc_sync_init+0x1c>
    431a:	2300      	movs	r3, #0
    431c:	f003 0301 	and.w	r3, r3, #1
    4320:	b2db      	uxtb	r3, r3
    4322:	222b      	movs	r2, #43	; 0x2b
    4324:	4906      	ldr	r1, [pc, #24]	; (4340 <crc_sync_init+0x40>)
    4326:	4618      	mov	r0, r3
    4328:	4b06      	ldr	r3, [pc, #24]	; (4344 <crc_sync_init+0x44>)
    432a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	6839      	ldr	r1, [r7, #0]
    4330:	4618      	mov	r0, r3
    4332:	4b05      	ldr	r3, [pc, #20]	; (4348 <crc_sync_init+0x48>)
    4334:	4798      	blx	r3
    4336:	4603      	mov	r3, r0
}
    4338:	4618      	mov	r0, r3
    433a:	3708      	adds	r7, #8
    433c:	46bd      	mov	sp, r7
    433e:	bd80      	pop	{r7, pc}
    4340:	0001291c 	.word	0x0001291c
    4344:	00005ed5 	.word	0x00005ed5
    4348:	00006b35 	.word	0x00006b35

0000434c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    434c:	b590      	push	{r4, r7, lr}
    434e:	b083      	sub	sp, #12
    4350:	af00      	add	r7, sp, #0
    4352:	4603      	mov	r3, r0
    4354:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4356:	4b07      	ldr	r3, [pc, #28]	; (4374 <delay_us+0x28>)
    4358:	681c      	ldr	r4, [r3, #0]
    435a:	88fb      	ldrh	r3, [r7, #6]
    435c:	4618      	mov	r0, r3
    435e:	4b06      	ldr	r3, [pc, #24]	; (4378 <delay_us+0x2c>)
    4360:	4798      	blx	r3
    4362:	4603      	mov	r3, r0
    4364:	4619      	mov	r1, r3
    4366:	4620      	mov	r0, r4
    4368:	4b04      	ldr	r3, [pc, #16]	; (437c <delay_us+0x30>)
    436a:	4798      	blx	r3
}
    436c:	bf00      	nop
    436e:	370c      	adds	r7, #12
    4370:	46bd      	mov	sp, r7
    4372:	bd90      	pop	{r4, r7, pc}
    4374:	2000205c 	.word	0x2000205c
    4378:	00006889 	.word	0x00006889
    437c:	00006a21 	.word	0x00006a21

00004380 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4380:	b590      	push	{r4, r7, lr}
    4382:	b083      	sub	sp, #12
    4384:	af00      	add	r7, sp, #0
    4386:	4603      	mov	r3, r0
    4388:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    438a:	4b07      	ldr	r3, [pc, #28]	; (43a8 <delay_ms+0x28>)
    438c:	681c      	ldr	r4, [r3, #0]
    438e:	88fb      	ldrh	r3, [r7, #6]
    4390:	4618      	mov	r0, r3
    4392:	4b06      	ldr	r3, [pc, #24]	; (43ac <delay_ms+0x2c>)
    4394:	4798      	blx	r3
    4396:	4603      	mov	r3, r0
    4398:	4619      	mov	r1, r3
    439a:	4620      	mov	r0, r4
    439c:	4b04      	ldr	r3, [pc, #16]	; (43b0 <delay_ms+0x30>)
    439e:	4798      	blx	r3
}
    43a0:	bf00      	nop
    43a2:	370c      	adds	r7, #12
    43a4:	46bd      	mov	sp, r7
    43a6:	bd90      	pop	{r4, r7, pc}
    43a8:	2000205c 	.word	0x2000205c
    43ac:	000069f5 	.word	0x000069f5
    43b0:	00006a21 	.word	0x00006a21

000043b4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    43b4:	b580      	push	{r7, lr}
    43b6:	af00      	add	r7, sp, #0
	return _event_system_init();
    43b8:	4b02      	ldr	r3, [pc, #8]	; (43c4 <event_system_init+0x10>)
    43ba:	4798      	blx	r3
    43bc:	4603      	mov	r3, r0
}
    43be:	4618      	mov	r0, r3
    43c0:	bd80      	pop	{r7, pc}
    43c2:	bf00      	nop
    43c4:	00007269 	.word	0x00007269

000043c8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    43c8:	b580      	push	{r7, lr}
    43ca:	b082      	sub	sp, #8
    43cc:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    43ce:	2300      	movs	r3, #0
    43d0:	80fb      	strh	r3, [r7, #6]
    43d2:	e00e      	b.n	43f2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    43d4:	88fb      	ldrh	r3, [r7, #6]
    43d6:	4a0c      	ldr	r2, [pc, #48]	; (4408 <ext_irq_init+0x40>)
    43d8:	00db      	lsls	r3, r3, #3
    43da:	4413      	add	r3, r2
    43dc:	f04f 32ff 	mov.w	r2, #4294967295
    43e0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    43e2:	88fb      	ldrh	r3, [r7, #6]
    43e4:	4a08      	ldr	r2, [pc, #32]	; (4408 <ext_irq_init+0x40>)
    43e6:	2100      	movs	r1, #0
    43e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    43ec:	88fb      	ldrh	r3, [r7, #6]
    43ee:	3301      	adds	r3, #1
    43f0:	80fb      	strh	r3, [r7, #6]
    43f2:	88fb      	ldrh	r3, [r7, #6]
    43f4:	2b04      	cmp	r3, #4
    43f6:	d9ed      	bls.n	43d4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    43f8:	4804      	ldr	r0, [pc, #16]	; (440c <ext_irq_init+0x44>)
    43fa:	4b05      	ldr	r3, [pc, #20]	; (4410 <ext_irq_init+0x48>)
    43fc:	4798      	blx	r3
    43fe:	4603      	mov	r3, r0
}
    4400:	4618      	mov	r0, r3
    4402:	3708      	adds	r7, #8
    4404:	46bd      	mov	sp, r7
    4406:	bd80      	pop	{r7, pc}
    4408:	20002060 	.word	0x20002060
    440c:	0000456d 	.word	0x0000456d
    4410:	00006e75 	.word	0x00006e75

00004414 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    4414:	b580      	push	{r7, lr}
    4416:	b086      	sub	sp, #24
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
    441c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    441e:	2300      	movs	r3, #0
    4420:	75fb      	strb	r3, [r7, #23]
    4422:	2300      	movs	r3, #0
    4424:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    4426:	2300      	movs	r3, #0
    4428:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    442a:	e012      	b.n	4452 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    442c:	7dfb      	ldrb	r3, [r7, #23]
    442e:	4a4d      	ldr	r2, [pc, #308]	; (4564 <ext_irq_register+0x150>)
    4430:	00db      	lsls	r3, r3, #3
    4432:	4413      	add	r3, r2
    4434:	685a      	ldr	r2, [r3, #4]
    4436:	687b      	ldr	r3, [r7, #4]
    4438:	429a      	cmp	r2, r3
    443a:	d107      	bne.n	444c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    443c:	7dfb      	ldrb	r3, [r7, #23]
    443e:	4949      	ldr	r1, [pc, #292]	; (4564 <ext_irq_register+0x150>)
    4440:	683a      	ldr	r2, [r7, #0]
    4442:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    4446:	2301      	movs	r3, #1
    4448:	757b      	strb	r3, [r7, #21]
			break;
    444a:	e005      	b.n	4458 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    444c:	7dfb      	ldrb	r3, [r7, #23]
    444e:	3301      	adds	r3, #1
    4450:	75fb      	strb	r3, [r7, #23]
    4452:	7dfb      	ldrb	r3, [r7, #23]
    4454:	2b04      	cmp	r3, #4
    4456:	d9e9      	bls.n	442c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    4458:	683b      	ldr	r3, [r7, #0]
    445a:	2b00      	cmp	r3, #0
    445c:	d10e      	bne.n	447c <ext_irq_register+0x68>
		if (!found) {
    445e:	7d7b      	ldrb	r3, [r7, #21]
    4460:	f083 0301 	eor.w	r3, r3, #1
    4464:	b2db      	uxtb	r3, r3
    4466:	2b00      	cmp	r3, #0
    4468:	d002      	beq.n	4470 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    446a:	f06f 030c 	mvn.w	r3, #12
    446e:	e074      	b.n	455a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    4470:	2100      	movs	r1, #0
    4472:	6878      	ldr	r0, [r7, #4]
    4474:	4b3c      	ldr	r3, [pc, #240]	; (4568 <ext_irq_register+0x154>)
    4476:	4798      	blx	r3
    4478:	4603      	mov	r3, r0
    447a:	e06e      	b.n	455a <ext_irq_register+0x146>
	}

	if (!found) {
    447c:	7d7b      	ldrb	r3, [r7, #21]
    447e:	f083 0301 	eor.w	r3, r3, #1
    4482:	b2db      	uxtb	r3, r3
    4484:	2b00      	cmp	r3, #0
    4486:	d05a      	beq.n	453e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4488:	2300      	movs	r3, #0
    448a:	75fb      	strb	r3, [r7, #23]
    448c:	e016      	b.n	44bc <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    448e:	7dfb      	ldrb	r3, [r7, #23]
    4490:	4a34      	ldr	r2, [pc, #208]	; (4564 <ext_irq_register+0x150>)
    4492:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4496:	2b00      	cmp	r3, #0
    4498:	d10d      	bne.n	44b6 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    449a:	7dfb      	ldrb	r3, [r7, #23]
    449c:	4931      	ldr	r1, [pc, #196]	; (4564 <ext_irq_register+0x150>)
    449e:	683a      	ldr	r2, [r7, #0]
    44a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    44a4:	7dfb      	ldrb	r3, [r7, #23]
    44a6:	4a2f      	ldr	r2, [pc, #188]	; (4564 <ext_irq_register+0x150>)
    44a8:	00db      	lsls	r3, r3, #3
    44aa:	4413      	add	r3, r2
    44ac:	687a      	ldr	r2, [r7, #4]
    44ae:	605a      	str	r2, [r3, #4]
				found           = true;
    44b0:	2301      	movs	r3, #1
    44b2:	757b      	strb	r3, [r7, #21]
				break;
    44b4:	e005      	b.n	44c2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    44b6:	7dfb      	ldrb	r3, [r7, #23]
    44b8:	3301      	adds	r3, #1
    44ba:	75fb      	strb	r3, [r7, #23]
    44bc:	7dfb      	ldrb	r3, [r7, #23]
    44be:	2b04      	cmp	r3, #4
    44c0:	d9e5      	bls.n	448e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    44c2:	e036      	b.n	4532 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    44c4:	7dfb      	ldrb	r3, [r7, #23]
    44c6:	4a27      	ldr	r2, [pc, #156]	; (4564 <ext_irq_register+0x150>)
    44c8:	00db      	lsls	r3, r3, #3
    44ca:	4413      	add	r3, r2
    44cc:	685a      	ldr	r2, [r3, #4]
    44ce:	7dbb      	ldrb	r3, [r7, #22]
    44d0:	4924      	ldr	r1, [pc, #144]	; (4564 <ext_irq_register+0x150>)
    44d2:	00db      	lsls	r3, r3, #3
    44d4:	440b      	add	r3, r1
    44d6:	685b      	ldr	r3, [r3, #4]
    44d8:	429a      	cmp	r2, r3
    44da:	d227      	bcs.n	452c <ext_irq_register+0x118>
    44dc:	7dbb      	ldrb	r3, [r7, #22]
    44de:	4a21      	ldr	r2, [pc, #132]	; (4564 <ext_irq_register+0x150>)
    44e0:	00db      	lsls	r3, r3, #3
    44e2:	4413      	add	r3, r2
    44e4:	685b      	ldr	r3, [r3, #4]
    44e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    44ea:	d01f      	beq.n	452c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    44ec:	7dbb      	ldrb	r3, [r7, #22]
    44ee:	491d      	ldr	r1, [pc, #116]	; (4564 <ext_irq_register+0x150>)
    44f0:	f107 020c 	add.w	r2, r7, #12
    44f4:	00db      	lsls	r3, r3, #3
    44f6:	440b      	add	r3, r1
    44f8:	e893 0003 	ldmia.w	r3, {r0, r1}
    44fc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    4500:	7dbb      	ldrb	r3, [r7, #22]
    4502:	7dfa      	ldrb	r2, [r7, #23]
    4504:	4817      	ldr	r0, [pc, #92]	; (4564 <ext_irq_register+0x150>)
    4506:	4917      	ldr	r1, [pc, #92]	; (4564 <ext_irq_register+0x150>)
    4508:	00db      	lsls	r3, r3, #3
    450a:	4403      	add	r3, r0
    450c:	00d2      	lsls	r2, r2, #3
    450e:	440a      	add	r2, r1
    4510:	e892 0003 	ldmia.w	r2, {r0, r1}
    4514:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    4518:	7dfb      	ldrb	r3, [r7, #23]
    451a:	4a12      	ldr	r2, [pc, #72]	; (4564 <ext_irq_register+0x150>)
    451c:	00db      	lsls	r3, r3, #3
    451e:	4413      	add	r3, r2
    4520:	f107 020c 	add.w	r2, r7, #12
    4524:	e892 0003 	ldmia.w	r2, {r0, r1}
    4528:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    452c:	7dbb      	ldrb	r3, [r7, #22]
    452e:	3301      	adds	r3, #1
    4530:	75bb      	strb	r3, [r7, #22]
    4532:	7dbb      	ldrb	r3, [r7, #22]
    4534:	2b04      	cmp	r3, #4
    4536:	d802      	bhi.n	453e <ext_irq_register+0x12a>
    4538:	7dfb      	ldrb	r3, [r7, #23]
    453a:	2b04      	cmp	r3, #4
    453c:	d9c2      	bls.n	44c4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    453e:	7d7b      	ldrb	r3, [r7, #21]
    4540:	f083 0301 	eor.w	r3, r3, #1
    4544:	b2db      	uxtb	r3, r3
    4546:	2b00      	cmp	r3, #0
    4548:	d002      	beq.n	4550 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    454a:	f06f 030c 	mvn.w	r3, #12
    454e:	e004      	b.n	455a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    4550:	2101      	movs	r1, #1
    4552:	6878      	ldr	r0, [r7, #4]
    4554:	4b04      	ldr	r3, [pc, #16]	; (4568 <ext_irq_register+0x154>)
    4556:	4798      	blx	r3
    4558:	4603      	mov	r3, r0
}
    455a:	4618      	mov	r0, r3
    455c:	3718      	adds	r7, #24
    455e:	46bd      	mov	sp, r7
    4560:	bd80      	pop	{r7, pc}
    4562:	bf00      	nop
    4564:	20002060 	.word	0x20002060
    4568:	00006fc1 	.word	0x00006fc1

0000456c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    456c:	b580      	push	{r7, lr}
    456e:	b084      	sub	sp, #16
    4570:	af00      	add	r7, sp, #0
    4572:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4574:	2300      	movs	r3, #0
    4576:	73fb      	strb	r3, [r7, #15]
    4578:	2305      	movs	r3, #5
    457a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    457c:	e02a      	b.n	45d4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    457e:	7bba      	ldrb	r2, [r7, #14]
    4580:	7bfb      	ldrb	r3, [r7, #15]
    4582:	4413      	add	r3, r2
    4584:	105b      	asrs	r3, r3, #1
    4586:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    4588:	7b7b      	ldrb	r3, [r7, #13]
    458a:	2b04      	cmp	r3, #4
    458c:	d827      	bhi.n	45de <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    458e:	7b7b      	ldrb	r3, [r7, #13]
    4590:	4a16      	ldr	r2, [pc, #88]	; (45ec <process_ext_irq+0x80>)
    4592:	00db      	lsls	r3, r3, #3
    4594:	4413      	add	r3, r2
    4596:	685a      	ldr	r2, [r3, #4]
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	429a      	cmp	r2, r3
    459c:	d10b      	bne.n	45b6 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    459e:	7b7b      	ldrb	r3, [r7, #13]
    45a0:	4a12      	ldr	r2, [pc, #72]	; (45ec <process_ext_irq+0x80>)
    45a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d01b      	beq.n	45e2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    45aa:	7b7b      	ldrb	r3, [r7, #13]
    45ac:	4a0f      	ldr	r2, [pc, #60]	; (45ec <process_ext_irq+0x80>)
    45ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    45b2:	4798      	blx	r3
			}
			return;
    45b4:	e015      	b.n	45e2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    45b6:	7b7b      	ldrb	r3, [r7, #13]
    45b8:	4a0c      	ldr	r2, [pc, #48]	; (45ec <process_ext_irq+0x80>)
    45ba:	00db      	lsls	r3, r3, #3
    45bc:	4413      	add	r3, r2
    45be:	685a      	ldr	r2, [r3, #4]
    45c0:	687b      	ldr	r3, [r7, #4]
    45c2:	429a      	cmp	r2, r3
    45c4:	d203      	bcs.n	45ce <process_ext_irq+0x62>
			lower = middle + 1;
    45c6:	7b7b      	ldrb	r3, [r7, #13]
    45c8:	3301      	adds	r3, #1
    45ca:	73fb      	strb	r3, [r7, #15]
    45cc:	e002      	b.n	45d4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    45ce:	7b7b      	ldrb	r3, [r7, #13]
    45d0:	3b01      	subs	r3, #1
    45d2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    45d4:	7bba      	ldrb	r2, [r7, #14]
    45d6:	7bfb      	ldrb	r3, [r7, #15]
    45d8:	429a      	cmp	r2, r3
    45da:	d2d0      	bcs.n	457e <process_ext_irq+0x12>
    45dc:	e002      	b.n	45e4 <process_ext_irq+0x78>
			return;
    45de:	bf00      	nop
    45e0:	e000      	b.n	45e4 <process_ext_irq+0x78>
			return;
    45e2:	bf00      	nop
		}
	}
}
    45e4:	3710      	adds	r7, #16
    45e6:	46bd      	mov	sp, r7
    45e8:	bd80      	pop	{r7, pc}
    45ea:	bf00      	nop
    45ec:	20002060 	.word	0x20002060

000045f0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    45f0:	b580      	push	{r7, lr}
    45f2:	b084      	sub	sp, #16
    45f4:	af00      	add	r7, sp, #0
    45f6:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	885b      	ldrh	r3, [r3, #2]
    4600:	b29b      	uxth	r3, r3
    4602:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4606:	2b00      	cmp	r3, #0
    4608:	d107      	bne.n	461a <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    460a:	68fb      	ldr	r3, [r7, #12]
    460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    460e:	2b00      	cmp	r3, #0
    4610:	d003      	beq.n	461a <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    4612:	68fb      	ldr	r3, [r7, #12]
    4614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4616:	68f8      	ldr	r0, [r7, #12]
    4618:	4798      	blx	r3
		}
	}
}
    461a:	bf00      	nop
    461c:	3710      	adds	r7, #16
    461e:	46bd      	mov	sp, r7
    4620:	bd80      	pop	{r7, pc}

00004622 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    4622:	b580      	push	{r7, lr}
    4624:	b084      	sub	sp, #16
    4626:	af00      	add	r7, sp, #0
    4628:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	885b      	ldrh	r3, [r3, #2]
    4632:	b29b      	uxth	r3, r3
    4634:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4638:	2b00      	cmp	r3, #0
    463a:	d107      	bne.n	464c <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    463c:	68fb      	ldr	r3, [r7, #12]
    463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4640:	2b00      	cmp	r3, #0
    4642:	d003      	beq.n	464c <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    4644:	68fb      	ldr	r3, [r7, #12]
    4646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4648:	68f8      	ldr	r0, [r7, #12]
    464a:	4798      	blx	r3
		}
	}
}
    464c:	bf00      	nop
    464e:	3710      	adds	r7, #16
    4650:	46bd      	mov	sp, r7
    4652:	bd80      	pop	{r7, pc}

00004654 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
    465c:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    465e:	687b      	ldr	r3, [r7, #4]
    4660:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4662:	687b      	ldr	r3, [r7, #4]
    4664:	885b      	ldrh	r3, [r3, #2]
    4666:	b29b      	uxth	r3, r3
    4668:	f403 7380 	and.w	r3, r3, #256	; 0x100
    466c:	2b00      	cmp	r3, #0
    466e:	d108      	bne.n	4682 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4674:	2b00      	cmp	r3, #0
    4676:	d004      	beq.n	4682 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    4678:	68fb      	ldr	r3, [r7, #12]
    467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    467c:	6839      	ldr	r1, [r7, #0]
    467e:	68f8      	ldr	r0, [r7, #12]
    4680:	4798      	blx	r3
		}
	}
}
    4682:	bf00      	nop
    4684:	3710      	adds	r7, #16
    4686:	46bd      	mov	sp, r7
    4688:	bd80      	pop	{r7, pc}
	...

0000468c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    468c:	b580      	push	{r7, lr}
    468e:	b08a      	sub	sp, #40	; 0x28
    4690:	af00      	add	r7, sp, #0
    4692:	60f8      	str	r0, [r7, #12]
    4694:	60b9      	str	r1, [r7, #8]
    4696:	4613      	mov	r3, r2
    4698:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    469a:	68fb      	ldr	r3, [r7, #12]
    469c:	3b28      	subs	r3, #40	; 0x28
    469e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    46a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    46a4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    46a6:	88fb      	ldrh	r3, [r7, #6]
    46a8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    46aa:	f248 0301 	movw	r3, #32769	; 0x8001
    46ae:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    46b0:	68bb      	ldr	r3, [r7, #8]
    46b2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    46b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46b6:	f107 0214 	add.w	r2, r7, #20
    46ba:	4611      	mov	r1, r2
    46bc:	4618      	mov	r0, r3
    46be:	4b06      	ldr	r3, [pc, #24]	; (46d8 <i2c_m_async_read+0x4c>)
    46c0:	4798      	blx	r3
    46c2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    46c4:	6a3b      	ldr	r3, [r7, #32]
    46c6:	2b00      	cmp	r3, #0
    46c8:	d001      	beq.n	46ce <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    46ca:	6a3b      	ldr	r3, [r7, #32]
    46cc:	e000      	b.n	46d0 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    46ce:	88fb      	ldrh	r3, [r7, #6]
}
    46d0:	4618      	mov	r0, r3
    46d2:	3728      	adds	r7, #40	; 0x28
    46d4:	46bd      	mov	sp, r7
    46d6:	bd80      	pop	{r7, pc}
    46d8:	0000924d 	.word	0x0000924d

000046dc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b08a      	sub	sp, #40	; 0x28
    46e0:	af00      	add	r7, sp, #0
    46e2:	60f8      	str	r0, [r7, #12]
    46e4:	60b9      	str	r1, [r7, #8]
    46e6:	4613      	mov	r3, r2
    46e8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    46ea:	68fb      	ldr	r3, [r7, #12]
    46ec:	3b28      	subs	r3, #40	; 0x28
    46ee:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    46f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    46f4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    46f6:	88fb      	ldrh	r3, [r7, #6]
    46f8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    46fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    46fe:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    4700:	68bb      	ldr	r3, [r7, #8]
    4702:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4706:	f107 0214 	add.w	r2, r7, #20
    470a:	4611      	mov	r1, r2
    470c:	4618      	mov	r0, r3
    470e:	4b06      	ldr	r3, [pc, #24]	; (4728 <i2c_m_async_write+0x4c>)
    4710:	4798      	blx	r3
    4712:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4714:	6a3b      	ldr	r3, [r7, #32]
    4716:	2b00      	cmp	r3, #0
    4718:	d001      	beq.n	471e <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    471a:	6a3b      	ldr	r3, [r7, #32]
    471c:	e000      	b.n	4720 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    471e:	88fb      	ldrh	r3, [r7, #6]
}
    4720:	4618      	mov	r0, r3
    4722:	3728      	adds	r7, #40	; 0x28
    4724:	46bd      	mov	sp, r7
    4726:	bd80      	pop	{r7, pc}
    4728:	0000924d 	.word	0x0000924d

0000472c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    472c:	b580      	push	{r7, lr}
    472e:	b084      	sub	sp, #16
    4730:	af00      	add	r7, sp, #0
    4732:	6078      	str	r0, [r7, #4]
    4734:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	2b00      	cmp	r3, #0
    473a:	bf14      	ite	ne
    473c:	2301      	movne	r3, #1
    473e:	2300      	moveq	r3, #0
    4740:	b2db      	uxtb	r3, r3
    4742:	2289      	movs	r2, #137	; 0x89
    4744:	4915      	ldr	r1, [pc, #84]	; (479c <i2c_m_async_init+0x70>)
    4746:	4618      	mov	r0, r3
    4748:	4b15      	ldr	r3, [pc, #84]	; (47a0 <i2c_m_async_init+0x74>)
    474a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    474c:	687b      	ldr	r3, [r7, #4]
    474e:	6839      	ldr	r1, [r7, #0]
    4750:	4618      	mov	r0, r3
    4752:	4b14      	ldr	r3, [pc, #80]	; (47a4 <i2c_m_async_init+0x78>)
    4754:	4798      	blx	r3
    4756:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	2b00      	cmp	r3, #0
    475c:	d001      	beq.n	4762 <i2c_m_async_init+0x36>
		return init_status;
    475e:	68fb      	ldr	r3, [r7, #12]
    4760:	e018      	b.n	4794 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	4a10      	ldr	r2, [pc, #64]	; (47a8 <i2c_m_async_init+0x7c>)
    4766:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	4a10      	ldr	r2, [pc, #64]	; (47ac <i2c_m_async_init+0x80>)
    476c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    476e:	687b      	ldr	r3, [r7, #4]
    4770:	4a0f      	ldr	r2, [pc, #60]	; (47b0 <i2c_m_async_init+0x84>)
    4772:	2101      	movs	r1, #1
    4774:	4618      	mov	r0, r3
    4776:	4b0f      	ldr	r3, [pc, #60]	; (47b4 <i2c_m_async_init+0x88>)
    4778:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    477a:	687b      	ldr	r3, [r7, #4]
    477c:	4a0e      	ldr	r2, [pc, #56]	; (47b8 <i2c_m_async_init+0x8c>)
    477e:	2102      	movs	r1, #2
    4780:	4618      	mov	r0, r3
    4782:	4b0c      	ldr	r3, [pc, #48]	; (47b4 <i2c_m_async_init+0x88>)
    4784:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    4786:	687b      	ldr	r3, [r7, #4]
    4788:	4a0c      	ldr	r2, [pc, #48]	; (47bc <i2c_m_async_init+0x90>)
    478a:	2100      	movs	r1, #0
    478c:	4618      	mov	r0, r3
    478e:	4b09      	ldr	r3, [pc, #36]	; (47b4 <i2c_m_async_init+0x88>)
    4790:	4798      	blx	r3

	return ERR_NONE;
    4792:	2300      	movs	r3, #0
}
    4794:	4618      	mov	r0, r3
    4796:	3710      	adds	r7, #16
    4798:	46bd      	mov	sp, r7
    479a:	bd80      	pop	{r7, pc}
    479c:	00012938 	.word	0x00012938
    47a0:	00005ed5 	.word	0x00005ed5
    47a4:	0000909d 	.word	0x0000909d
    47a8:	0000468d 	.word	0x0000468d
    47ac:	000046dd 	.word	0x000046dd
    47b0:	000045f1 	.word	0x000045f1
    47b4:	00009321 	.word	0x00009321
    47b8:	00004623 	.word	0x00004623
    47bc:	00004655 	.word	0x00004655

000047c0 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    47c0:	b580      	push	{r7, lr}
    47c2:	b084      	sub	sp, #16
    47c4:	af00      	add	r7, sp, #0
    47c6:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    47c8:	687b      	ldr	r3, [r7, #4]
    47ca:	2b00      	cmp	r3, #0
    47cc:	bf14      	ite	ne
    47ce:	2301      	movne	r3, #1
    47d0:	2300      	moveq	r3, #0
    47d2:	b2db      	uxtb	r3, r3
    47d4:	22b9      	movs	r2, #185	; 0xb9
    47d6:	4911      	ldr	r1, [pc, #68]	; (481c <i2c_m_async_enable+0x5c>)
    47d8:	4618      	mov	r0, r3
    47da:	4b11      	ldr	r3, [pc, #68]	; (4820 <i2c_m_async_enable+0x60>)
    47dc:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	4618      	mov	r0, r3
    47e2:	4b10      	ldr	r3, [pc, #64]	; (4824 <i2c_m_async_enable+0x64>)
    47e4:	4798      	blx	r3
    47e6:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    47e8:	68fb      	ldr	r3, [r7, #12]
    47ea:	2b00      	cmp	r3, #0
    47ec:	d111      	bne.n	4812 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	2201      	movs	r2, #1
    47f2:	2101      	movs	r1, #1
    47f4:	4618      	mov	r0, r3
    47f6:	4b0c      	ldr	r3, [pc, #48]	; (4828 <i2c_m_async_enable+0x68>)
    47f8:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	2201      	movs	r2, #1
    47fe:	2102      	movs	r1, #2
    4800:	4618      	mov	r0, r3
    4802:	4b09      	ldr	r3, [pc, #36]	; (4828 <i2c_m_async_enable+0x68>)
    4804:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    4806:	687b      	ldr	r3, [r7, #4]
    4808:	2201      	movs	r2, #1
    480a:	2100      	movs	r1, #0
    480c:	4618      	mov	r0, r3
    480e:	4b06      	ldr	r3, [pc, #24]	; (4828 <i2c_m_async_enable+0x68>)
    4810:	4798      	blx	r3
	}
	return rc;
    4812:	68fb      	ldr	r3, [r7, #12]
}
    4814:	4618      	mov	r0, r3
    4816:	3710      	adds	r7, #16
    4818:	46bd      	mov	sp, r7
    481a:	bd80      	pop	{r7, pc}
    481c:	00012938 	.word	0x00012938
    4820:	00005ed5 	.word	0x00005ed5
    4824:	00009039 	.word	0x00009039
    4828:	000093ad 	.word	0x000093ad

0000482c <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    482c:	b480      	push	{r7}
    482e:	b085      	sub	sp, #20
    4830:	af00      	add	r7, sp, #0
    4832:	60f8      	str	r0, [r7, #12]
    4834:	460b      	mov	r3, r1
    4836:	607a      	str	r2, [r7, #4]
    4838:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    483a:	897b      	ldrh	r3, [r7, #10]
    483c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4840:	b21a      	sxth	r2, r3
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	b21b      	sxth	r3, r3
    4846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    484a:	b21b      	sxth	r3, r3
    484c:	4313      	orrs	r3, r2
    484e:	b21b      	sxth	r3, r3
    4850:	b29a      	uxth	r2, r3
    4852:	68fb      	ldr	r3, [r7, #12]
    4854:	879a      	strh	r2, [r3, #60]	; 0x3c
    4856:	68fb      	ldr	r3, [r7, #12]
    4858:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    485a:	4618      	mov	r0, r3
    485c:	3714      	adds	r7, #20
    485e:	46bd      	mov	sp, r7
    4860:	f85d 7b04 	ldr.w	r7, [sp], #4
    4864:	4770      	bx	lr

00004866 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    4866:	b480      	push	{r7}
    4868:	b085      	sub	sp, #20
    486a:	af00      	add	r7, sp, #0
    486c:	60f8      	str	r0, [r7, #12]
    486e:	460b      	mov	r3, r1
    4870:	607a      	str	r2, [r7, #4]
    4872:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    4874:	7afb      	ldrb	r3, [r7, #11]
    4876:	2b01      	cmp	r3, #1
    4878:	d007      	beq.n	488a <i2c_m_async_register_callback+0x24>
    487a:	2b02      	cmp	r3, #2
    487c:	d009      	beq.n	4892 <i2c_m_async_register_callback+0x2c>
    487e:	2b00      	cmp	r3, #0
    4880:	d10b      	bne.n	489a <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    4882:	68fb      	ldr	r3, [r7, #12]
    4884:	687a      	ldr	r2, [r7, #4]
    4886:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    4888:	e00a      	b.n	48a0 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    488a:	68fb      	ldr	r3, [r7, #12]
    488c:	687a      	ldr	r2, [r7, #4]
    488e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    4890:	e006      	b.n	48a0 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    4892:	68fb      	ldr	r3, [r7, #12]
    4894:	687a      	ldr	r2, [r7, #4]
    4896:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    4898:	e002      	b.n	48a0 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    489a:	f06f 030c 	mvn.w	r3, #12
    489e:	e000      	b.n	48a2 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    48a0:	2300      	movs	r3, #0
}
    48a2:	4618      	mov	r0, r3
    48a4:	3714      	adds	r7, #20
    48a6:	46bd      	mov	sp, r7
    48a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ac:	4770      	bx	lr

000048ae <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    48ae:	b480      	push	{r7}
    48b0:	b083      	sub	sp, #12
    48b2:	af00      	add	r7, sp, #0
    48b4:	6078      	str	r0, [r7, #4]
    48b6:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	f103 0228 	add.w	r2, r3, #40	; 0x28
    48be:	683b      	ldr	r3, [r7, #0]
    48c0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    48c2:	2300      	movs	r3, #0
}
    48c4:	4618      	mov	r0, r3
    48c6:	370c      	adds	r7, #12
    48c8:	46bd      	mov	sp, r7
    48ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ce:	4770      	bx	lr

000048d0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    48d0:	b580      	push	{r7, lr}
    48d2:	b084      	sub	sp, #16
    48d4:	af00      	add	r7, sp, #0
    48d6:	60f8      	str	r0, [r7, #12]
    48d8:	60b9      	str	r1, [r7, #8]
    48da:	4613      	mov	r3, r2
    48dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    48de:	68fb      	ldr	r3, [r7, #12]
    48e0:	2b00      	cmp	r3, #0
    48e2:	d004      	beq.n	48ee <io_write+0x1e>
    48e4:	68bb      	ldr	r3, [r7, #8]
    48e6:	2b00      	cmp	r3, #0
    48e8:	d001      	beq.n	48ee <io_write+0x1e>
    48ea:	2301      	movs	r3, #1
    48ec:	e000      	b.n	48f0 <io_write+0x20>
    48ee:	2300      	movs	r3, #0
    48f0:	f003 0301 	and.w	r3, r3, #1
    48f4:	b2db      	uxtb	r3, r3
    48f6:	2234      	movs	r2, #52	; 0x34
    48f8:	4907      	ldr	r1, [pc, #28]	; (4918 <io_write+0x48>)
    48fa:	4618      	mov	r0, r3
    48fc:	4b07      	ldr	r3, [pc, #28]	; (491c <io_write+0x4c>)
    48fe:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    4900:	68fb      	ldr	r3, [r7, #12]
    4902:	681b      	ldr	r3, [r3, #0]
    4904:	88fa      	ldrh	r2, [r7, #6]
    4906:	68b9      	ldr	r1, [r7, #8]
    4908:	68f8      	ldr	r0, [r7, #12]
    490a:	4798      	blx	r3
    490c:	4603      	mov	r3, r0
}
    490e:	4618      	mov	r0, r3
    4910:	3710      	adds	r7, #16
    4912:	46bd      	mov	sp, r7
    4914:	bd80      	pop	{r7, pc}
    4916:	bf00      	nop
    4918:	00012958 	.word	0x00012958
    491c:	00005ed5 	.word	0x00005ed5

00004920 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    4920:	b580      	push	{r7, lr}
    4922:	b084      	sub	sp, #16
    4924:	af00      	add	r7, sp, #0
    4926:	60f8      	str	r0, [r7, #12]
    4928:	60b9      	str	r1, [r7, #8]
    492a:	4613      	mov	r3, r2
    492c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    492e:	68fb      	ldr	r3, [r7, #12]
    4930:	2b00      	cmp	r3, #0
    4932:	d004      	beq.n	493e <io_read+0x1e>
    4934:	68bb      	ldr	r3, [r7, #8]
    4936:	2b00      	cmp	r3, #0
    4938:	d001      	beq.n	493e <io_read+0x1e>
    493a:	2301      	movs	r3, #1
    493c:	e000      	b.n	4940 <io_read+0x20>
    493e:	2300      	movs	r3, #0
    4940:	f003 0301 	and.w	r3, r3, #1
    4944:	b2db      	uxtb	r3, r3
    4946:	223d      	movs	r2, #61	; 0x3d
    4948:	4907      	ldr	r1, [pc, #28]	; (4968 <io_read+0x48>)
    494a:	4618      	mov	r0, r3
    494c:	4b07      	ldr	r3, [pc, #28]	; (496c <io_read+0x4c>)
    494e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4950:	68fb      	ldr	r3, [r7, #12]
    4952:	685b      	ldr	r3, [r3, #4]
    4954:	88fa      	ldrh	r2, [r7, #6]
    4956:	68b9      	ldr	r1, [r7, #8]
    4958:	68f8      	ldr	r0, [r7, #12]
    495a:	4798      	blx	r3
    495c:	4603      	mov	r3, r0
}
    495e:	4618      	mov	r0, r3
    4960:	3710      	adds	r7, #16
    4962:	46bd      	mov	sp, r7
    4964:	bd80      	pop	{r7, pc}
    4966:	bf00      	nop
    4968:	00012958 	.word	0x00012958
    496c:	00005ed5 	.word	0x00005ed5

00004970 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4970:	b580      	push	{r7, lr}
    4972:	b084      	sub	sp, #16
    4974:	af00      	add	r7, sp, #0
    4976:	60f8      	str	r0, [r7, #12]
    4978:	60b9      	str	r1, [r7, #8]
    497a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    497c:	68fb      	ldr	r3, [r7, #12]
    497e:	2b00      	cmp	r3, #0
    4980:	d004      	beq.n	498c <pwm_init+0x1c>
    4982:	68bb      	ldr	r3, [r7, #8]
    4984:	2b00      	cmp	r3, #0
    4986:	d001      	beq.n	498c <pwm_init+0x1c>
    4988:	2301      	movs	r3, #1
    498a:	e000      	b.n	498e <pwm_init+0x1e>
    498c:	2300      	movs	r3, #0
    498e:	f003 0301 	and.w	r3, r3, #1
    4992:	b2db      	uxtb	r3, r3
    4994:	2233      	movs	r2, #51	; 0x33
    4996:	490a      	ldr	r1, [pc, #40]	; (49c0 <pwm_init+0x50>)
    4998:	4618      	mov	r0, r3
    499a:	4b0a      	ldr	r3, [pc, #40]	; (49c4 <pwm_init+0x54>)
    499c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    499e:	68fb      	ldr	r3, [r7, #12]
    49a0:	68b9      	ldr	r1, [r7, #8]
    49a2:	4618      	mov	r0, r3
    49a4:	4b08      	ldr	r3, [pc, #32]	; (49c8 <pwm_init+0x58>)
    49a6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    49a8:	68fb      	ldr	r3, [r7, #12]
    49aa:	4a08      	ldr	r2, [pc, #32]	; (49cc <pwm_init+0x5c>)
    49ac:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    49ae:	68fb      	ldr	r3, [r7, #12]
    49b0:	4a07      	ldr	r2, [pc, #28]	; (49d0 <pwm_init+0x60>)
    49b2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    49b4:	2300      	movs	r3, #0
}
    49b6:	4618      	mov	r0, r3
    49b8:	3710      	adds	r7, #16
    49ba:	46bd      	mov	sp, r7
    49bc:	bd80      	pop	{r7, pc}
    49be:	bf00      	nop
    49c0:	0001296c 	.word	0x0001296c
    49c4:	00005ed5 	.word	0x00005ed5
    49c8:	0000a8b1 	.word	0x0000a8b1
    49cc:	00004a29 	.word	0x00004a29
    49d0:	00004a4d 	.word	0x00004a4d

000049d4 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	b082      	sub	sp, #8
    49d8:	af00      	add	r7, sp, #0
    49da:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	2b00      	cmp	r3, #0
    49e0:	bf14      	ite	ne
    49e2:	2301      	movne	r3, #1
    49e4:	2300      	moveq	r3, #0
    49e6:	b2db      	uxtb	r3, r3
    49e8:	224a      	movs	r2, #74	; 0x4a
    49ea:	490b      	ldr	r1, [pc, #44]	; (4a18 <pwm_enable+0x44>)
    49ec:	4618      	mov	r0, r3
    49ee:	4b0b      	ldr	r3, [pc, #44]	; (4a1c <pwm_enable+0x48>)
    49f0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	4618      	mov	r0, r3
    49f6:	4b0a      	ldr	r3, [pc, #40]	; (4a20 <pwm_enable+0x4c>)
    49f8:	4798      	blx	r3
    49fa:	4603      	mov	r3, r0
    49fc:	2b00      	cmp	r3, #0
    49fe:	d002      	beq.n	4a06 <pwm_enable+0x32>
		return ERR_DENIED;
    4a00:	f06f 0310 	mvn.w	r3, #16
    4a04:	e004      	b.n	4a10 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    4a06:	687b      	ldr	r3, [r7, #4]
    4a08:	4618      	mov	r0, r3
    4a0a:	4b06      	ldr	r3, [pc, #24]	; (4a24 <pwm_enable+0x50>)
    4a0c:	4798      	blx	r3

	return ERR_NONE;
    4a0e:	2300      	movs	r3, #0
}
    4a10:	4618      	mov	r0, r3
    4a12:	3708      	adds	r7, #8
    4a14:	46bd      	mov	sp, r7
    4a16:	bd80      	pop	{r7, pc}
    4a18:	0001296c 	.word	0x0001296c
    4a1c:	00005ed5 	.word	0x00005ed5
    4a20:	0000ab4d 	.word	0x0000ab4d
    4a24:	0000aaed 	.word	0x0000aaed

00004a28 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	b084      	sub	sp, #16
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    4a34:	68fb      	ldr	r3, [r7, #12]
    4a36:	695b      	ldr	r3, [r3, #20]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d003      	beq.n	4a44 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    4a3c:	68fb      	ldr	r3, [r7, #12]
    4a3e:	695b      	ldr	r3, [r3, #20]
    4a40:	68f8      	ldr	r0, [r7, #12]
    4a42:	4798      	blx	r3
	}
}
    4a44:	bf00      	nop
    4a46:	3710      	adds	r7, #16
    4a48:	46bd      	mov	sp, r7
    4a4a:	bd80      	pop	{r7, pc}

00004a4c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    4a4c:	b580      	push	{r7, lr}
    4a4e:	b084      	sub	sp, #16
    4a50:	af00      	add	r7, sp, #0
    4a52:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4a54:	687b      	ldr	r3, [r7, #4]
    4a56:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    4a58:	68fb      	ldr	r3, [r7, #12]
    4a5a:	699b      	ldr	r3, [r3, #24]
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	d003      	beq.n	4a68 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    4a60:	68fb      	ldr	r3, [r7, #12]
    4a62:	699b      	ldr	r3, [r3, #24]
    4a64:	68f8      	ldr	r0, [r7, #12]
    4a66:	4798      	blx	r3
	}
}
    4a68:	bf00      	nop
    4a6a:	3710      	adds	r7, #16
    4a6c:	46bd      	mov	sp, r7
    4a6e:	bd80      	pop	{r7, pc}

00004a70 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    4a70:	b580      	push	{r7, lr}
    4a72:	b082      	sub	sp, #8
    4a74:	af00      	add	r7, sp, #0
    4a76:	6078      	str	r0, [r7, #4]
    4a78:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    4a7a:	687b      	ldr	r3, [r7, #4]
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	d004      	beq.n	4a8a <qspi_sync_init+0x1a>
    4a80:	683b      	ldr	r3, [r7, #0]
    4a82:	2b00      	cmp	r3, #0
    4a84:	d001      	beq.n	4a8a <qspi_sync_init+0x1a>
    4a86:	2301      	movs	r3, #1
    4a88:	e000      	b.n	4a8c <qspi_sync_init+0x1c>
    4a8a:	2300      	movs	r3, #0
    4a8c:	f003 0301 	and.w	r3, r3, #1
    4a90:	b2db      	uxtb	r3, r3
    4a92:	2231      	movs	r2, #49	; 0x31
    4a94:	4906      	ldr	r1, [pc, #24]	; (4ab0 <qspi_sync_init+0x40>)
    4a96:	4618      	mov	r0, r3
    4a98:	4b06      	ldr	r3, [pc, #24]	; (4ab4 <qspi_sync_init+0x44>)
    4a9a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	6839      	ldr	r1, [r7, #0]
    4aa0:	4618      	mov	r0, r3
    4aa2:	4b05      	ldr	r3, [pc, #20]	; (4ab8 <qspi_sync_init+0x48>)
    4aa4:	4798      	blx	r3
    4aa6:	4603      	mov	r3, r0
}
    4aa8:	4618      	mov	r0, r3
    4aaa:	3708      	adds	r7, #8
    4aac:	46bd      	mov	sp, r7
    4aae:	bd80      	pop	{r7, pc}
    4ab0:	00012984 	.word	0x00012984
    4ab4:	00005ed5 	.word	0x00005ed5
    4ab8:	00007e31 	.word	0x00007e31

00004abc <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    4abc:	b580      	push	{r7, lr}
    4abe:	b082      	sub	sp, #8
    4ac0:	af00      	add	r7, sp, #0
    4ac2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	bf14      	ite	ne
    4aca:	2301      	movne	r3, #1
    4acc:	2300      	moveq	r3, #0
    4ace:	b2db      	uxtb	r3, r3
    4ad0:	223f      	movs	r2, #63	; 0x3f
    4ad2:	4906      	ldr	r1, [pc, #24]	; (4aec <qspi_sync_enable+0x30>)
    4ad4:	4618      	mov	r0, r3
    4ad6:	4b06      	ldr	r3, [pc, #24]	; (4af0 <qspi_sync_enable+0x34>)
    4ad8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    4ada:	687b      	ldr	r3, [r7, #4]
    4adc:	4618      	mov	r0, r3
    4ade:	4b05      	ldr	r3, [pc, #20]	; (4af4 <qspi_sync_enable+0x38>)
    4ae0:	4798      	blx	r3
    4ae2:	4603      	mov	r3, r0
}
    4ae4:	4618      	mov	r0, r3
    4ae6:	3708      	adds	r7, #8
    4ae8:	46bd      	mov	sp, r7
    4aea:	bd80      	pop	{r7, pc}
    4aec:	00012984 	.word	0x00012984
    4af0:	00005ed5 	.word	0x00005ed5
    4af4:	00007ea5 	.word	0x00007ea5

00004af8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    4af8:	b580      	push	{r7, lr}
    4afa:	b082      	sub	sp, #8
    4afc:	af00      	add	r7, sp, #0
    4afe:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	2b00      	cmp	r3, #0
    4b04:	bf14      	ite	ne
    4b06:	2301      	movne	r3, #1
    4b08:	2300      	moveq	r3, #0
    4b0a:	b2db      	uxtb	r3, r3
    4b0c:	2246      	movs	r2, #70	; 0x46
    4b0e:	4906      	ldr	r1, [pc, #24]	; (4b28 <qspi_sync_disable+0x30>)
    4b10:	4618      	mov	r0, r3
    4b12:	4b06      	ldr	r3, [pc, #24]	; (4b2c <qspi_sync_disable+0x34>)
    4b14:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    4b16:	687b      	ldr	r3, [r7, #4]
    4b18:	4618      	mov	r0, r3
    4b1a:	4b05      	ldr	r3, [pc, #20]	; (4b30 <qspi_sync_disable+0x38>)
    4b1c:	4798      	blx	r3
    4b1e:	4603      	mov	r3, r0
}
    4b20:	4618      	mov	r0, r3
    4b22:	3708      	adds	r7, #8
    4b24:	46bd      	mov	sp, r7
    4b26:	bd80      	pop	{r7, pc}
    4b28:	00012984 	.word	0x00012984
    4b2c:	00005ed5 	.word	0x00005ed5
    4b30:	00007ec9 	.word	0x00007ec9

00004b34 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    4b34:	b580      	push	{r7, lr}
    4b36:	b082      	sub	sp, #8
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
    4b3c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	2b00      	cmp	r3, #0
    4b42:	d004      	beq.n	4b4e <qspi_sync_serial_run_command+0x1a>
    4b44:	683b      	ldr	r3, [r7, #0]
    4b46:	2b00      	cmp	r3, #0
    4b48:	d001      	beq.n	4b4e <qspi_sync_serial_run_command+0x1a>
    4b4a:	2301      	movs	r3, #1
    4b4c:	e000      	b.n	4b50 <qspi_sync_serial_run_command+0x1c>
    4b4e:	2300      	movs	r3, #0
    4b50:	f003 0301 	and.w	r3, r3, #1
    4b54:	b2db      	uxtb	r3, r3
    4b56:	224d      	movs	r2, #77	; 0x4d
    4b58:	4906      	ldr	r1, [pc, #24]	; (4b74 <qspi_sync_serial_run_command+0x40>)
    4b5a:	4618      	mov	r0, r3
    4b5c:	4b06      	ldr	r3, [pc, #24]	; (4b78 <qspi_sync_serial_run_command+0x44>)
    4b5e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	6839      	ldr	r1, [r7, #0]
    4b64:	4618      	mov	r0, r3
    4b66:	4b05      	ldr	r3, [pc, #20]	; (4b7c <qspi_sync_serial_run_command+0x48>)
    4b68:	4798      	blx	r3
    4b6a:	4603      	mov	r3, r0
}
    4b6c:	4618      	mov	r0, r3
    4b6e:	3708      	adds	r7, #8
    4b70:	46bd      	mov	sp, r7
    4b72:	bd80      	pop	{r7, pc}
    4b74:	00012984 	.word	0x00012984
    4b78:	00005ed5 	.word	0x00005ed5
    4b7c:	00008015 	.word	0x00008015

00004b80 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    4b80:	b580      	push	{r7, lr}
    4b82:	b084      	sub	sp, #16
    4b84:	af00      	add	r7, sp, #0
    4b86:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	3b04      	subs	r3, #4
    4b8c:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    4b8e:	687b      	ldr	r3, [r7, #4]
    4b90:	791b      	ldrb	r3, [r3, #4]
    4b92:	2b01      	cmp	r3, #1
    4b94:	d80e      	bhi.n	4bb4 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4b96:	68fb      	ldr	r3, [r7, #12]
    4b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4b9a:	68fb      	ldr	r3, [r7, #12]
    4b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4b9e:	1c58      	adds	r0, r3, #1
    4ba0:	68f9      	ldr	r1, [r7, #12]
    4ba2:	6448      	str	r0, [r1, #68]	; 0x44
    4ba4:	4413      	add	r3, r2
    4ba6:	781b      	ldrb	r3, [r3, #0]
    4ba8:	b29b      	uxth	r3, r3
    4baa:	4619      	mov	r1, r3
    4bac:	6878      	ldr	r0, [r7, #4]
    4bae:	4b11      	ldr	r3, [pc, #68]	; (4bf4 <_spi_dev_tx+0x74>)
    4bb0:	4798      	blx	r3
    4bb2:	e00d      	b.n	4bd0 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4bb4:	68fb      	ldr	r3, [r7, #12]
    4bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4bb8:	68fb      	ldr	r3, [r7, #12]
    4bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4bbc:	1c58      	adds	r0, r3, #1
    4bbe:	68f9      	ldr	r1, [r7, #12]
    4bc0:	6448      	str	r0, [r1, #68]	; 0x44
    4bc2:	005b      	lsls	r3, r3, #1
    4bc4:	4413      	add	r3, r2
    4bc6:	881b      	ldrh	r3, [r3, #0]
    4bc8:	4619      	mov	r1, r3
    4bca:	6878      	ldr	r0, [r7, #4]
    4bcc:	4b09      	ldr	r3, [pc, #36]	; (4bf4 <_spi_dev_tx+0x74>)
    4bce:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    4bd0:	68fb      	ldr	r3, [r7, #12]
    4bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4bd4:	68fb      	ldr	r3, [r7, #12]
    4bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4bd8:	429a      	cmp	r2, r3
    4bda:	d107      	bne.n	4bec <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    4bdc:	2100      	movs	r1, #0
    4bde:	6878      	ldr	r0, [r7, #4]
    4be0:	4b05      	ldr	r3, [pc, #20]	; (4bf8 <_spi_dev_tx+0x78>)
    4be2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4be4:	2101      	movs	r1, #1
    4be6:	6878      	ldr	r0, [r7, #4]
    4be8:	4b04      	ldr	r3, [pc, #16]	; (4bfc <_spi_dev_tx+0x7c>)
    4bea:	4798      	blx	r3
	}
}
    4bec:	bf00      	nop
    4bee:	3710      	adds	r7, #16
    4bf0:	46bd      	mov	sp, r7
    4bf2:	bd80      	pop	{r7, pc}
    4bf4:	0000a161 	.word	0x0000a161
    4bf8:	0000a025 	.word	0x0000a025
    4bfc:	0000a0f9 	.word	0x0000a0f9

00004c00 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    4c00:	b590      	push	{r4, r7, lr}
    4c02:	b085      	sub	sp, #20
    4c04:	af00      	add	r7, sp, #0
    4c06:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	3b04      	subs	r3, #4
    4c0c:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    4c0e:	68fb      	ldr	r3, [r7, #12]
    4c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4c12:	2b00      	cmp	r3, #0
    4c14:	d021      	beq.n	4c5a <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    4c16:	687b      	ldr	r3, [r7, #4]
    4c18:	791b      	ldrb	r3, [r3, #4]
    4c1a:	2b01      	cmp	r3, #1
    4c1c:	d80e      	bhi.n	4c3c <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4c1e:	68fb      	ldr	r3, [r7, #12]
    4c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4c22:	68fb      	ldr	r3, [r7, #12]
    4c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4c26:	1c58      	adds	r0, r3, #1
    4c28:	68f9      	ldr	r1, [r7, #12]
    4c2a:	6448      	str	r0, [r1, #68]	; 0x44
    4c2c:	18d4      	adds	r4, r2, r3
    4c2e:	6878      	ldr	r0, [r7, #4]
    4c30:	4b2e      	ldr	r3, [pc, #184]	; (4cec <_spi_dev_rx+0xec>)
    4c32:	4798      	blx	r3
    4c34:	4603      	mov	r3, r0
    4c36:	b2db      	uxtb	r3, r3
    4c38:	7023      	strb	r3, [r4, #0]
    4c3a:	e016      	b.n	4c6a <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4c3c:	68fb      	ldr	r3, [r7, #12]
    4c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4c40:	68fb      	ldr	r3, [r7, #12]
    4c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4c44:	1c58      	adds	r0, r3, #1
    4c46:	68f9      	ldr	r1, [r7, #12]
    4c48:	6448      	str	r0, [r1, #68]	; 0x44
    4c4a:	005b      	lsls	r3, r3, #1
    4c4c:	18d4      	adds	r4, r2, r3
    4c4e:	6878      	ldr	r0, [r7, #4]
    4c50:	4b26      	ldr	r3, [pc, #152]	; (4cec <_spi_dev_rx+0xec>)
    4c52:	4798      	blx	r3
    4c54:	4603      	mov	r3, r0
    4c56:	8023      	strh	r3, [r4, #0]
    4c58:	e007      	b.n	4c6a <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    4c5a:	6878      	ldr	r0, [r7, #4]
    4c5c:	4b23      	ldr	r3, [pc, #140]	; (4cec <_spi_dev_rx+0xec>)
    4c5e:	4798      	blx	r3
		spi->xfercnt++;
    4c60:	68fb      	ldr	r3, [r7, #12]
    4c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4c64:	1c5a      	adds	r2, r3, #1
    4c66:	68fb      	ldr	r3, [r7, #12]
    4c68:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    4c6a:	68fb      	ldr	r3, [r7, #12]
    4c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4c6e:	68fb      	ldr	r3, [r7, #12]
    4c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c72:	429a      	cmp	r2, r3
    4c74:	d226      	bcs.n	4cc4 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    4c76:	68fb      	ldr	r3, [r7, #12]
    4c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d01b      	beq.n	4cb6 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    4c7e:	687b      	ldr	r3, [r7, #4]
    4c80:	791b      	ldrb	r3, [r3, #4]
    4c82:	2b01      	cmp	r3, #1
    4c84:	d80b      	bhi.n	4c9e <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4c86:	68fb      	ldr	r3, [r7, #12]
    4c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4c8a:	68fb      	ldr	r3, [r7, #12]
    4c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4c8e:	4413      	add	r3, r2
    4c90:	781b      	ldrb	r3, [r3, #0]
    4c92:	b29b      	uxth	r3, r3
    4c94:	4619      	mov	r1, r3
    4c96:	6878      	ldr	r0, [r7, #4]
    4c98:	4b15      	ldr	r3, [pc, #84]	; (4cf0 <_spi_dev_rx+0xf0>)
    4c9a:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    4c9c:	e022      	b.n	4ce4 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4c9e:	68fb      	ldr	r3, [r7, #12]
    4ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4ca6:	005b      	lsls	r3, r3, #1
    4ca8:	4413      	add	r3, r2
    4caa:	881b      	ldrh	r3, [r3, #0]
    4cac:	4619      	mov	r1, r3
    4cae:	6878      	ldr	r0, [r7, #4]
    4cb0:	4b0f      	ldr	r3, [pc, #60]	; (4cf0 <_spi_dev_rx+0xf0>)
    4cb2:	4798      	blx	r3
}
    4cb4:	e016      	b.n	4ce4 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4cb6:	687b      	ldr	r3, [r7, #4]
    4cb8:	88db      	ldrh	r3, [r3, #6]
    4cba:	4619      	mov	r1, r3
    4cbc:	6878      	ldr	r0, [r7, #4]
    4cbe:	4b0c      	ldr	r3, [pc, #48]	; (4cf0 <_spi_dev_rx+0xf0>)
    4cc0:	4798      	blx	r3
}
    4cc2:	e00f      	b.n	4ce4 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    4cc4:	2100      	movs	r1, #0
    4cc6:	6878      	ldr	r0, [r7, #4]
    4cc8:	4b0a      	ldr	r3, [pc, #40]	; (4cf4 <_spi_dev_rx+0xf4>)
    4cca:	4798      	blx	r3
		spi->stat = 0;
    4ccc:	68fb      	ldr	r3, [r7, #12]
    4cce:	2200      	movs	r2, #0
    4cd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    4cd4:	68fb      	ldr	r3, [r7, #12]
    4cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d003      	beq.n	4ce4 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    4cdc:	68fb      	ldr	r3, [r7, #12]
    4cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4ce0:	68f8      	ldr	r0, [r7, #12]
    4ce2:	4798      	blx	r3
}
    4ce4:	bf00      	nop
    4ce6:	3714      	adds	r7, #20
    4ce8:	46bd      	mov	sp, r7
    4cea:	bd90      	pop	{r4, r7, pc}
    4cec:	0000a1b9 	.word	0x0000a1b9
    4cf0:	0000a161 	.word	0x0000a161
    4cf4:	0000a089 	.word	0x0000a089

00004cf8 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	b084      	sub	sp, #16
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4d00:	687b      	ldr	r3, [r7, #4]
    4d02:	3b04      	subs	r3, #4
    4d04:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    4d06:	68fb      	ldr	r3, [r7, #12]
    4d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4d0a:	68fb      	ldr	r3, [r7, #12]
    4d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4d0e:	429a      	cmp	r2, r3
    4d10:	d30f      	bcc.n	4d32 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    4d12:	2100      	movs	r1, #0
    4d14:	6878      	ldr	r0, [r7, #4]
    4d16:	4b09      	ldr	r3, [pc, #36]	; (4d3c <_spi_dev_complete+0x44>)
    4d18:	4798      	blx	r3
		spi->stat = 0;
    4d1a:	68fb      	ldr	r3, [r7, #12]
    4d1c:	2200      	movs	r2, #0
    4d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    4d22:	68fb      	ldr	r3, [r7, #12]
    4d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d26:	2b00      	cmp	r3, #0
    4d28:	d003      	beq.n	4d32 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    4d2a:	68fb      	ldr	r3, [r7, #12]
    4d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d2e:	68f8      	ldr	r0, [r7, #12]
    4d30:	4798      	blx	r3
		}
	}
}
    4d32:	bf00      	nop
    4d34:	3710      	adds	r7, #16
    4d36:	46bd      	mov	sp, r7
    4d38:	bd80      	pop	{r7, pc}
    4d3a:	bf00      	nop
    4d3c:	0000a0f9 	.word	0x0000a0f9

00004d40 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    4d40:	b580      	push	{r7, lr}
    4d42:	b084      	sub	sp, #16
    4d44:	af00      	add	r7, sp, #0
    4d46:	6078      	str	r0, [r7, #4]
    4d48:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	3b04      	subs	r3, #4
    4d4e:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    4d50:	2100      	movs	r1, #0
    4d52:	6878      	ldr	r0, [r7, #4]
    4d54:	4b0d      	ldr	r3, [pc, #52]	; (4d8c <_spi_dev_error+0x4c>)
    4d56:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4d58:	2100      	movs	r1, #0
    4d5a:	6878      	ldr	r0, [r7, #4]
    4d5c:	4b0c      	ldr	r3, [pc, #48]	; (4d90 <_spi_dev_error+0x50>)
    4d5e:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4d60:	2100      	movs	r1, #0
    4d62:	6878      	ldr	r0, [r7, #4]
    4d64:	4b0b      	ldr	r3, [pc, #44]	; (4d94 <_spi_dev_error+0x54>)
    4d66:	4798      	blx	r3
	spi->stat = 0;
    4d68:	68fb      	ldr	r3, [r7, #12]
    4d6a:	2200      	movs	r2, #0
    4d6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    4d70:	68fb      	ldr	r3, [r7, #12]
    4d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4d74:	2b00      	cmp	r3, #0
    4d76:	d004      	beq.n	4d82 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    4d78:	68fb      	ldr	r3, [r7, #12]
    4d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4d7c:	6839      	ldr	r1, [r7, #0]
    4d7e:	68f8      	ldr	r0, [r7, #12]
    4d80:	4798      	blx	r3
	}
}
    4d82:	bf00      	nop
    4d84:	3710      	adds	r7, #16
    4d86:	46bd      	mov	sp, r7
    4d88:	bd80      	pop	{r7, pc}
    4d8a:	bf00      	nop
    4d8c:	0000a025 	.word	0x0000a025
    4d90:	0000a089 	.word	0x0000a089
    4d94:	0000a0f9 	.word	0x0000a0f9

00004d98 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    4d98:	b580      	push	{r7, lr}
    4d9a:	b084      	sub	sp, #16
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
    4da0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    4da2:	2300      	movs	r3, #0
    4da4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	2b00      	cmp	r3, #0
    4daa:	d004      	beq.n	4db6 <spi_m_async_init+0x1e>
    4dac:	683b      	ldr	r3, [r7, #0]
    4dae:	2b00      	cmp	r3, #0
    4db0:	d001      	beq.n	4db6 <spi_m_async_init+0x1e>
    4db2:	2301      	movs	r3, #1
    4db4:	e000      	b.n	4db8 <spi_m_async_init+0x20>
    4db6:	2300      	movs	r3, #0
    4db8:	f003 0301 	and.w	r3, r3, #1
    4dbc:	b2db      	uxtb	r3, r3
    4dbe:	22a5      	movs	r2, #165	; 0xa5
    4dc0:	491c      	ldr	r1, [pc, #112]	; (4e34 <spi_m_async_init+0x9c>)
    4dc2:	4618      	mov	r0, r3
    4dc4:	4b1c      	ldr	r3, [pc, #112]	; (4e38 <spi_m_async_init+0xa0>)
    4dc6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	683a      	ldr	r2, [r7, #0]
    4dcc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	3304      	adds	r3, #4
    4dd2:	6839      	ldr	r1, [r7, #0]
    4dd4:	4618      	mov	r0, r3
    4dd6:	4b19      	ldr	r3, [pc, #100]	; (4e3c <spi_m_async_init+0xa4>)
    4dd8:	4798      	blx	r3
    4dda:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    4ddc:	68fb      	ldr	r3, [r7, #12]
    4dde:	2b00      	cmp	r3, #0
    4de0:	db23      	blt.n	4e2a <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	3304      	adds	r3, #4
    4de6:	4a16      	ldr	r2, [pc, #88]	; (4e40 <spi_m_async_init+0xa8>)
    4de8:	2100      	movs	r1, #0
    4dea:	4618      	mov	r0, r3
    4dec:	4b15      	ldr	r3, [pc, #84]	; (4e44 <spi_m_async_init+0xac>)
    4dee:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	3304      	adds	r3, #4
    4df4:	4a14      	ldr	r2, [pc, #80]	; (4e48 <spi_m_async_init+0xb0>)
    4df6:	2101      	movs	r1, #1
    4df8:	4618      	mov	r0, r3
    4dfa:	4b12      	ldr	r3, [pc, #72]	; (4e44 <spi_m_async_init+0xac>)
    4dfc:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4dfe:	687b      	ldr	r3, [r7, #4]
    4e00:	3304      	adds	r3, #4
    4e02:	4a12      	ldr	r2, [pc, #72]	; (4e4c <spi_m_async_init+0xb4>)
    4e04:	2102      	movs	r1, #2
    4e06:	4618      	mov	r0, r3
    4e08:	4b0e      	ldr	r3, [pc, #56]	; (4e44 <spi_m_async_init+0xac>)
    4e0a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4e0c:	687b      	ldr	r3, [r7, #4]
    4e0e:	3304      	adds	r3, #4
    4e10:	4a0f      	ldr	r2, [pc, #60]	; (4e50 <spi_m_async_init+0xb8>)
    4e12:	2103      	movs	r1, #3
    4e14:	4618      	mov	r0, r3
    4e16:	4b0b      	ldr	r3, [pc, #44]	; (4e44 <spi_m_async_init+0xac>)
    4e18:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	4a0d      	ldr	r2, [pc, #52]	; (4e54 <spi_m_async_init+0xbc>)
    4e1e:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	4a0d      	ldr	r2, [pc, #52]	; (4e58 <spi_m_async_init+0xc0>)
    4e24:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    4e26:	2300      	movs	r3, #0
    4e28:	e000      	b.n	4e2c <spi_m_async_init+0x94>
		return rc;
    4e2a:	68fb      	ldr	r3, [r7, #12]
}
    4e2c:	4618      	mov	r0, r3
    4e2e:	3710      	adds	r7, #16
    4e30:	46bd      	mov	sp, r7
    4e32:	bd80      	pop	{r7, pc}
    4e34:	000129a0 	.word	0x000129a0
    4e38:	00005ed5 	.word	0x00005ed5
    4e3c:	00009d25 	.word	0x00009d25
    4e40:	00004b81 	.word	0x00004b81
    4e44:	0000a209 	.word	0x0000a209
    4e48:	00004c01 	.word	0x00004c01
    4e4c:	00004cf9 	.word	0x00004cf9
    4e50:	00004d41 	.word	0x00004d41
    4e54:	00004e5d 	.word	0x00004e5d
    4e58:	00004edd 	.word	0x00004edd

00004e5c <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b086      	sub	sp, #24
    4e60:	af00      	add	r7, sp, #0
    4e62:	60f8      	str	r0, [r7, #12]
    4e64:	60b9      	str	r1, [r7, #8]
    4e66:	4613      	mov	r3, r2
    4e68:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4e6a:	68fb      	ldr	r3, [r7, #12]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	bf14      	ite	ne
    4e70:	2301      	movne	r3, #1
    4e72:	2300      	moveq	r3, #0
    4e74:	b2db      	uxtb	r3, r3
    4e76:	f240 1205 	movw	r2, #261	; 0x105
    4e7a:	4914      	ldr	r1, [pc, #80]	; (4ecc <_spi_m_async_io_read+0x70>)
    4e7c:	4618      	mov	r0, r3
    4e7e:	4b14      	ldr	r3, [pc, #80]	; (4ed0 <_spi_m_async_io_read+0x74>)
    4e80:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    4e82:	68fb      	ldr	r3, [r7, #12]
    4e84:	3b24      	subs	r3, #36	; 0x24
    4e86:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    4e88:	697b      	ldr	r3, [r7, #20]
    4e8a:	68ba      	ldr	r2, [r7, #8]
    4e8c:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    4e8e:	697b      	ldr	r3, [r7, #20]
    4e90:	2200      	movs	r2, #0
    4e92:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    4e94:	88fa      	ldrh	r2, [r7, #6]
    4e96:	697b      	ldr	r3, [r7, #20]
    4e98:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    4e9a:	697b      	ldr	r3, [r7, #20]
    4e9c:	2200      	movs	r2, #0
    4e9e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4ea0:	697b      	ldr	r3, [r7, #20]
    4ea2:	2210      	movs	r2, #16
    4ea4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4ea8:	697b      	ldr	r3, [r7, #20]
    4eaa:	3304      	adds	r3, #4
    4eac:	2101      	movs	r1, #1
    4eae:	4618      	mov	r0, r3
    4eb0:	4b08      	ldr	r3, [pc, #32]	; (4ed4 <_spi_m_async_io_read+0x78>)
    4eb2:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4eb4:	697b      	ldr	r3, [r7, #20]
    4eb6:	3304      	adds	r3, #4
    4eb8:	f240 11ff 	movw	r1, #511	; 0x1ff
    4ebc:	4618      	mov	r0, r3
    4ebe:	4b06      	ldr	r3, [pc, #24]	; (4ed8 <_spi_m_async_io_read+0x7c>)
    4ec0:	4798      	blx	r3

	return ERR_NONE;
    4ec2:	2300      	movs	r3, #0
}
    4ec4:	4618      	mov	r0, r3
    4ec6:	3718      	adds	r7, #24
    4ec8:	46bd      	mov	sp, r7
    4eca:	bd80      	pop	{r7, pc}
    4ecc:	000129a0 	.word	0x000129a0
    4ed0:	00005ed5 	.word	0x00005ed5
    4ed4:	0000a089 	.word	0x0000a089
    4ed8:	0000a161 	.word	0x0000a161

00004edc <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4edc:	b580      	push	{r7, lr}
    4ede:	b086      	sub	sp, #24
    4ee0:	af00      	add	r7, sp, #0
    4ee2:	60f8      	str	r0, [r7, #12]
    4ee4:	60b9      	str	r1, [r7, #8]
    4ee6:	4613      	mov	r3, r2
    4ee8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4eea:	68fb      	ldr	r3, [r7, #12]
    4eec:	2b00      	cmp	r3, #0
    4eee:	bf14      	ite	ne
    4ef0:	2301      	movne	r3, #1
    4ef2:	2300      	moveq	r3, #0
    4ef4:	b2db      	uxtb	r3, r3
    4ef6:	f240 1227 	movw	r2, #295	; 0x127
    4efa:	4911      	ldr	r1, [pc, #68]	; (4f40 <_spi_m_async_io_write+0x64>)
    4efc:	4618      	mov	r0, r3
    4efe:	4b11      	ldr	r3, [pc, #68]	; (4f44 <_spi_m_async_io_write+0x68>)
    4f00:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    4f02:	68fb      	ldr	r3, [r7, #12]
    4f04:	3b24      	subs	r3, #36	; 0x24
    4f06:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    4f08:	697b      	ldr	r3, [r7, #20]
    4f0a:	2200      	movs	r2, #0
    4f0c:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    4f0e:	697b      	ldr	r3, [r7, #20]
    4f10:	68ba      	ldr	r2, [r7, #8]
    4f12:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    4f14:	88fa      	ldrh	r2, [r7, #6]
    4f16:	697b      	ldr	r3, [r7, #20]
    4f18:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    4f1a:	697b      	ldr	r3, [r7, #20]
    4f1c:	2200      	movs	r2, #0
    4f1e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4f20:	697b      	ldr	r3, [r7, #20]
    4f22:	2210      	movs	r2, #16
    4f24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    4f28:	697b      	ldr	r3, [r7, #20]
    4f2a:	3304      	adds	r3, #4
    4f2c:	2101      	movs	r1, #1
    4f2e:	4618      	mov	r0, r3
    4f30:	4b05      	ldr	r3, [pc, #20]	; (4f48 <_spi_m_async_io_write+0x6c>)
    4f32:	4798      	blx	r3

	return ERR_NONE;
    4f34:	2300      	movs	r3, #0
}
    4f36:	4618      	mov	r0, r3
    4f38:	3718      	adds	r7, #24
    4f3a:	46bd      	mov	sp, r7
    4f3c:	bd80      	pop	{r7, pc}
    4f3e:	bf00      	nop
    4f40:	000129a0 	.word	0x000129a0
    4f44:	00005ed5 	.word	0x00005ed5
    4f48:	0000a025 	.word	0x0000a025

00004f4c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    4f4c:	b580      	push	{r7, lr}
    4f4e:	b084      	sub	sp, #16
    4f50:	af00      	add	r7, sp, #0
    4f52:	6078      	str	r0, [r7, #4]
    4f54:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    4f56:	2300      	movs	r3, #0
    4f58:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d004      	beq.n	4f6a <spi_m_sync_init+0x1e>
    4f60:	683b      	ldr	r3, [r7, #0]
    4f62:	2b00      	cmp	r3, #0
    4f64:	d001      	beq.n	4f6a <spi_m_sync_init+0x1e>
    4f66:	2301      	movs	r3, #1
    4f68:	e000      	b.n	4f6c <spi_m_sync_init+0x20>
    4f6a:	2300      	movs	r3, #0
    4f6c:	f003 0301 	and.w	r3, r3, #1
    4f70:	b2db      	uxtb	r3, r3
    4f72:	2240      	movs	r2, #64	; 0x40
    4f74:	4910      	ldr	r1, [pc, #64]	; (4fb8 <spi_m_sync_init+0x6c>)
    4f76:	4618      	mov	r0, r3
    4f78:	4b10      	ldr	r3, [pc, #64]	; (4fbc <spi_m_sync_init+0x70>)
    4f7a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	683a      	ldr	r2, [r7, #0]
    4f80:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	3304      	adds	r3, #4
    4f86:	6839      	ldr	r1, [r7, #0]
    4f88:	4618      	mov	r0, r3
    4f8a:	4b0d      	ldr	r3, [pc, #52]	; (4fc0 <spi_m_sync_init+0x74>)
    4f8c:	4798      	blx	r3
    4f8e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    4f90:	68fb      	ldr	r3, [r7, #12]
    4f92:	2b00      	cmp	r3, #0
    4f94:	da01      	bge.n	4f9a <spi_m_sync_init+0x4e>
		return rc;
    4f96:	68fb      	ldr	r3, [r7, #12]
    4f98:	e00a      	b.n	4fb0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    4f9a:	687b      	ldr	r3, [r7, #4]
    4f9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4fa0:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    4fa2:	687b      	ldr	r3, [r7, #4]
    4fa4:	4a07      	ldr	r2, [pc, #28]	; (4fc4 <spi_m_sync_init+0x78>)
    4fa6:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	4a07      	ldr	r2, [pc, #28]	; (4fc8 <spi_m_sync_init+0x7c>)
    4fac:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4fae:	2300      	movs	r3, #0
}
    4fb0:	4618      	mov	r0, r3
    4fb2:	3710      	adds	r7, #16
    4fb4:	46bd      	mov	sp, r7
    4fb6:	bd80      	pop	{r7, pc}
    4fb8:	000129c0 	.word	0x000129c0
    4fbc:	00005ed5 	.word	0x00005ed5
    4fc0:	00009c19 	.word	0x00009c19
    4fc4:	00004fcd 	.word	0x00004fcd
    4fc8:	00005025 	.word	0x00005025

00004fcc <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    4fcc:	b580      	push	{r7, lr}
    4fce:	b088      	sub	sp, #32
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	60f8      	str	r0, [r7, #12]
    4fd4:	60b9      	str	r1, [r7, #8]
    4fd6:	4613      	mov	r3, r2
    4fd8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4fda:	68fb      	ldr	r3, [r7, #12]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	bf14      	ite	ne
    4fe0:	2301      	movne	r3, #1
    4fe2:	2300      	moveq	r3, #0
    4fe4:	b2db      	uxtb	r3, r3
    4fe6:	2287      	movs	r2, #135	; 0x87
    4fe8:	490b      	ldr	r1, [pc, #44]	; (5018 <_spi_m_sync_io_read+0x4c>)
    4fea:	4618      	mov	r0, r3
    4fec:	4b0b      	ldr	r3, [pc, #44]	; (501c <_spi_m_sync_io_read+0x50>)
    4fee:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    4ff0:	68fb      	ldr	r3, [r7, #12]
    4ff2:	3b0c      	subs	r3, #12
    4ff4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    4ff6:	68bb      	ldr	r3, [r7, #8]
    4ff8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    4ffa:	2300      	movs	r3, #0
    4ffc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    4ffe:	88fb      	ldrh	r3, [r7, #6]
    5000:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    5002:	f107 0310 	add.w	r3, r7, #16
    5006:	4619      	mov	r1, r3
    5008:	69f8      	ldr	r0, [r7, #28]
    500a:	4b05      	ldr	r3, [pc, #20]	; (5020 <_spi_m_sync_io_read+0x54>)
    500c:	4798      	blx	r3
    500e:	4603      	mov	r3, r0
}
    5010:	4618      	mov	r0, r3
    5012:	3720      	adds	r7, #32
    5014:	46bd      	mov	sp, r7
    5016:	bd80      	pop	{r7, pc}
    5018:	000129c0 	.word	0x000129c0
    501c:	00005ed5 	.word	0x00005ed5
    5020:	0000507d 	.word	0x0000507d

00005024 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    5024:	b580      	push	{r7, lr}
    5026:	b088      	sub	sp, #32
    5028:	af00      	add	r7, sp, #0
    502a:	60f8      	str	r0, [r7, #12]
    502c:	60b9      	str	r1, [r7, #8]
    502e:	4613      	mov	r3, r2
    5030:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5032:	68fb      	ldr	r3, [r7, #12]
    5034:	2b00      	cmp	r3, #0
    5036:	bf14      	ite	ne
    5038:	2301      	movne	r3, #1
    503a:	2300      	moveq	r3, #0
    503c:	b2db      	uxtb	r3, r3
    503e:	22a3      	movs	r2, #163	; 0xa3
    5040:	490b      	ldr	r1, [pc, #44]	; (5070 <_spi_m_sync_io_write+0x4c>)
    5042:	4618      	mov	r0, r3
    5044:	4b0b      	ldr	r3, [pc, #44]	; (5074 <_spi_m_sync_io_write+0x50>)
    5046:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    5048:	68fb      	ldr	r3, [r7, #12]
    504a:	3b0c      	subs	r3, #12
    504c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    504e:	2300      	movs	r3, #0
    5050:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    5052:	68bb      	ldr	r3, [r7, #8]
    5054:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    5056:	88fb      	ldrh	r3, [r7, #6]
    5058:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    505a:	f107 0310 	add.w	r3, r7, #16
    505e:	4619      	mov	r1, r3
    5060:	69f8      	ldr	r0, [r7, #28]
    5062:	4b05      	ldr	r3, [pc, #20]	; (5078 <_spi_m_sync_io_write+0x54>)
    5064:	4798      	blx	r3
    5066:	4603      	mov	r3, r0
}
    5068:	4618      	mov	r0, r3
    506a:	3720      	adds	r7, #32
    506c:	46bd      	mov	sp, r7
    506e:	bd80      	pop	{r7, pc}
    5070:	000129c0 	.word	0x000129c0
    5074:	00005ed5 	.word	0x00005ed5
    5078:	0000507d 	.word	0x0000507d

0000507c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    507c:	b580      	push	{r7, lr}
    507e:	b086      	sub	sp, #24
    5080:	af00      	add	r7, sp, #0
    5082:	6078      	str	r0, [r7, #4]
    5084:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	2b00      	cmp	r3, #0
    508a:	d004      	beq.n	5096 <spi_m_sync_transfer+0x1a>
    508c:	683b      	ldr	r3, [r7, #0]
    508e:	2b00      	cmp	r3, #0
    5090:	d001      	beq.n	5096 <spi_m_sync_transfer+0x1a>
    5092:	2301      	movs	r3, #1
    5094:	e000      	b.n	5098 <spi_m_sync_transfer+0x1c>
    5096:	2300      	movs	r3, #0
    5098:	f003 0301 	and.w	r3, r3, #1
    509c:	b2db      	uxtb	r3, r3
    509e:	22b3      	movs	r2, #179	; 0xb3
    50a0:	490c      	ldr	r1, [pc, #48]	; (50d4 <spi_m_sync_transfer+0x58>)
    50a2:	4618      	mov	r0, r3
    50a4:	4b0c      	ldr	r3, [pc, #48]	; (50d8 <spi_m_sync_transfer+0x5c>)
    50a6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    50a8:	683b      	ldr	r3, [r7, #0]
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    50ae:	683b      	ldr	r3, [r7, #0]
    50b0:	685b      	ldr	r3, [r3, #4]
    50b2:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    50b4:	683b      	ldr	r3, [r7, #0]
    50b6:	689b      	ldr	r3, [r3, #8]
    50b8:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    50ba:	687b      	ldr	r3, [r7, #4]
    50bc:	3304      	adds	r3, #4
    50be:	f107 020c 	add.w	r2, r7, #12
    50c2:	4611      	mov	r1, r2
    50c4:	4618      	mov	r0, r3
    50c6:	4b05      	ldr	r3, [pc, #20]	; (50dc <spi_m_sync_transfer+0x60>)
    50c8:	4798      	blx	r3
    50ca:	4603      	mov	r3, r0
}
    50cc:	4618      	mov	r0, r3
    50ce:	3718      	adds	r7, #24
    50d0:	46bd      	mov	sp, r7
    50d2:	bd80      	pop	{r7, pc}
    50d4:	000129c0 	.word	0x000129c0
    50d8:	00005ed5 	.word	0x00005ed5
    50dc:	00009f09 	.word	0x00009f09

000050e0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    50e0:	b480      	push	{r7}
    50e2:	b083      	sub	sp, #12
    50e4:	af00      	add	r7, sp, #0
    50e6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    50e8:	687b      	ldr	r3, [r7, #4]
    50ea:	681b      	ldr	r3, [r3, #0]
}
    50ec:	4618      	mov	r0, r3
    50ee:	370c      	adds	r7, #12
    50f0:	46bd      	mov	sp, r7
    50f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f6:	4770      	bx	lr

000050f8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    50f8:	b480      	push	{r7}
    50fa:	b083      	sub	sp, #12
    50fc:	af00      	add	r7, sp, #0
    50fe:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    5100:	687b      	ldr	r3, [r7, #4]
    5102:	2b00      	cmp	r3, #0
    5104:	d002      	beq.n	510c <list_get_next_element+0x14>
    5106:	687b      	ldr	r3, [r7, #4]
    5108:	681b      	ldr	r3, [r3, #0]
    510a:	e000      	b.n	510e <list_get_next_element+0x16>
    510c:	2300      	movs	r3, #0
}
    510e:	4618      	mov	r0, r3
    5110:	370c      	adds	r7, #12
    5112:	46bd      	mov	sp, r7
    5114:	f85d 7b04 	ldr.w	r7, [sp], #4
    5118:	4770      	bx	lr
	...

0000511c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    511c:	b580      	push	{r7, lr}
    511e:	b084      	sub	sp, #16
    5120:	af00      	add	r7, sp, #0
    5122:	60f8      	str	r0, [r7, #12]
    5124:	60b9      	str	r1, [r7, #8]
    5126:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	2b00      	cmp	r3, #0
    512c:	d004      	beq.n	5138 <timer_init+0x1c>
    512e:	68bb      	ldr	r3, [r7, #8]
    5130:	2b00      	cmp	r3, #0
    5132:	d001      	beq.n	5138 <timer_init+0x1c>
    5134:	2301      	movs	r3, #1
    5136:	e000      	b.n	513a <timer_init+0x1e>
    5138:	2300      	movs	r3, #0
    513a:	f003 0301 	and.w	r3, r3, #1
    513e:	b2db      	uxtb	r3, r3
    5140:	223b      	movs	r2, #59	; 0x3b
    5142:	490a      	ldr	r1, [pc, #40]	; (516c <timer_init+0x50>)
    5144:	4618      	mov	r0, r3
    5146:	4b0a      	ldr	r3, [pc, #40]	; (5170 <timer_init+0x54>)
    5148:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    514a:	68fb      	ldr	r3, [r7, #12]
    514c:	68b9      	ldr	r1, [r7, #8]
    514e:	4618      	mov	r0, r3
    5150:	4b08      	ldr	r3, [pc, #32]	; (5174 <timer_init+0x58>)
    5152:	4798      	blx	r3
	descr->time                           = 0;
    5154:	68fb      	ldr	r3, [r7, #12]
    5156:	2200      	movs	r2, #0
    5158:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    515a:	68fb      	ldr	r3, [r7, #12]
    515c:	4a06      	ldr	r2, [pc, #24]	; (5178 <timer_init+0x5c>)
    515e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5160:	2300      	movs	r3, #0
}
    5162:	4618      	mov	r0, r3
    5164:	3710      	adds	r7, #16
    5166:	46bd      	mov	sp, r7
    5168:	bd80      	pop	{r7, pc}
    516a:	bf00      	nop
    516c:	000129dc 	.word	0x000129dc
    5170:	00005ed5 	.word	0x00005ed5
    5174:	0000a601 	.word	0x0000a601
    5178:	000054c5 	.word	0x000054c5

0000517c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    517c:	b580      	push	{r7, lr}
    517e:	b082      	sub	sp, #8
    5180:	af00      	add	r7, sp, #0
    5182:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5184:	687b      	ldr	r3, [r7, #4]
    5186:	2b00      	cmp	r3, #0
    5188:	bf14      	ite	ne
    518a:	2301      	movne	r3, #1
    518c:	2300      	moveq	r3, #0
    518e:	b2db      	uxtb	r3, r3
    5190:	2253      	movs	r2, #83	; 0x53
    5192:	490b      	ldr	r1, [pc, #44]	; (51c0 <timer_start+0x44>)
    5194:	4618      	mov	r0, r3
    5196:	4b0b      	ldr	r3, [pc, #44]	; (51c4 <timer_start+0x48>)
    5198:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    519a:	687b      	ldr	r3, [r7, #4]
    519c:	4618      	mov	r0, r3
    519e:	4b0a      	ldr	r3, [pc, #40]	; (51c8 <timer_start+0x4c>)
    51a0:	4798      	blx	r3
    51a2:	4603      	mov	r3, r0
    51a4:	2b00      	cmp	r3, #0
    51a6:	d002      	beq.n	51ae <timer_start+0x32>
		return ERR_DENIED;
    51a8:	f06f 0310 	mvn.w	r3, #16
    51ac:	e004      	b.n	51b8 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	4618      	mov	r0, r3
    51b2:	4b06      	ldr	r3, [pc, #24]	; (51cc <timer_start+0x50>)
    51b4:	4798      	blx	r3

	return ERR_NONE;
    51b6:	2300      	movs	r3, #0
}
    51b8:	4618      	mov	r0, r3
    51ba:	3708      	adds	r7, #8
    51bc:	46bd      	mov	sp, r7
    51be:	bd80      	pop	{r7, pc}
    51c0:	000129dc 	.word	0x000129dc
    51c4:	00005ed5 	.word	0x00005ed5
    51c8:	0000ab2d 	.word	0x0000ab2d
    51cc:	0000aacd 	.word	0x0000aacd

000051d0 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    51d0:	b580      	push	{r7, lr}
    51d2:	b082      	sub	sp, #8
    51d4:	af00      	add	r7, sp, #0
    51d6:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	2b00      	cmp	r3, #0
    51dc:	bf14      	ite	ne
    51de:	2301      	movne	r3, #1
    51e0:	2300      	moveq	r3, #0
    51e2:	b2db      	uxtb	r3, r3
    51e4:	2261      	movs	r2, #97	; 0x61
    51e6:	490d      	ldr	r1, [pc, #52]	; (521c <timer_stop+0x4c>)
    51e8:	4618      	mov	r0, r3
    51ea:	4b0d      	ldr	r3, [pc, #52]	; (5220 <timer_stop+0x50>)
    51ec:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    51ee:	687b      	ldr	r3, [r7, #4]
    51f0:	4618      	mov	r0, r3
    51f2:	4b0c      	ldr	r3, [pc, #48]	; (5224 <timer_stop+0x54>)
    51f4:	4798      	blx	r3
    51f6:	4603      	mov	r3, r0
    51f8:	f083 0301 	eor.w	r3, r3, #1
    51fc:	b2db      	uxtb	r3, r3
    51fe:	2b00      	cmp	r3, #0
    5200:	d002      	beq.n	5208 <timer_stop+0x38>
		return ERR_DENIED;
    5202:	f06f 0310 	mvn.w	r3, #16
    5206:	e004      	b.n	5212 <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	4618      	mov	r0, r3
    520c:	4b06      	ldr	r3, [pc, #24]	; (5228 <timer_stop+0x58>)
    520e:	4798      	blx	r3

	return ERR_NONE;
    5210:	2300      	movs	r3, #0
}
    5212:	4618      	mov	r0, r3
    5214:	3708      	adds	r7, #8
    5216:	46bd      	mov	sp, r7
    5218:	bd80      	pop	{r7, pc}
    521a:	bf00      	nop
    521c:	000129dc 	.word	0x000129dc
    5220:	00005ed5 	.word	0x00005ed5
    5224:	0000ab2d 	.word	0x0000ab2d
    5228:	0000ab0d 	.word	0x0000ab0d

0000522c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    522c:	b580      	push	{r7, lr}
    522e:	b084      	sub	sp, #16
    5230:	af00      	add	r7, sp, #0
    5232:	6078      	str	r0, [r7, #4]
    5234:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    5236:	687b      	ldr	r3, [r7, #4]
    5238:	2b00      	cmp	r3, #0
    523a:	d004      	beq.n	5246 <timer_add_task+0x1a>
    523c:	683b      	ldr	r3, [r7, #0]
    523e:	2b00      	cmp	r3, #0
    5240:	d001      	beq.n	5246 <timer_add_task+0x1a>
    5242:	2301      	movs	r3, #1
    5244:	e000      	b.n	5248 <timer_add_task+0x1c>
    5246:	2300      	movs	r3, #0
    5248:	f003 0301 	and.w	r3, r3, #1
    524c:	b2db      	uxtb	r3, r3
    524e:	227a      	movs	r2, #122	; 0x7a
    5250:	492d      	ldr	r1, [pc, #180]	; (5308 <timer_add_task+0xdc>)
    5252:	4618      	mov	r0, r3
    5254:	4b2d      	ldr	r3, [pc, #180]	; (530c <timer_add_task+0xe0>)
    5256:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	7e1b      	ldrb	r3, [r3, #24]
    525c:	b2db      	uxtb	r3, r3
    525e:	f043 0301 	orr.w	r3, r3, #1
    5262:	b2da      	uxtb	r2, r3
    5264:	687b      	ldr	r3, [r7, #4]
    5266:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    5268:	687b      	ldr	r3, [r7, #4]
    526a:	3314      	adds	r3, #20
    526c:	6839      	ldr	r1, [r7, #0]
    526e:	4618      	mov	r0, r3
    5270:	4b27      	ldr	r3, [pc, #156]	; (5310 <timer_add_task+0xe4>)
    5272:	4798      	blx	r3
    5274:	4603      	mov	r3, r0
    5276:	2b00      	cmp	r3, #0
    5278:	d00f      	beq.n	529a <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	7e1b      	ldrb	r3, [r3, #24]
    527e:	b2db      	uxtb	r3, r3
    5280:	f023 0301 	bic.w	r3, r3, #1
    5284:	b2da      	uxtb	r2, r3
    5286:	687b      	ldr	r3, [r7, #4]
    5288:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    528a:	227f      	movs	r2, #127	; 0x7f
    528c:	491e      	ldr	r1, [pc, #120]	; (5308 <timer_add_task+0xdc>)
    528e:	2000      	movs	r0, #0
    5290:	4b1e      	ldr	r3, [pc, #120]	; (530c <timer_add_task+0xe0>)
    5292:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    5294:	f06f 0311 	mvn.w	r3, #17
    5298:	e032      	b.n	5300 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	691a      	ldr	r2, [r3, #16]
    529e:	683b      	ldr	r3, [r7, #0]
    52a0:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	f103 0014 	add.w	r0, r3, #20
    52a8:	687b      	ldr	r3, [r7, #4]
    52aa:	691b      	ldr	r3, [r3, #16]
    52ac:	461a      	mov	r2, r3
    52ae:	6839      	ldr	r1, [r7, #0]
    52b0:	4b18      	ldr	r3, [pc, #96]	; (5314 <timer_add_task+0xe8>)
    52b2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    52b4:	687b      	ldr	r3, [r7, #4]
    52b6:	7e1b      	ldrb	r3, [r3, #24]
    52b8:	b2db      	uxtb	r3, r3
    52ba:	f023 0301 	bic.w	r3, r3, #1
    52be:	b2da      	uxtb	r2, r3
    52c0:	687b      	ldr	r3, [r7, #4]
    52c2:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    52c4:	687b      	ldr	r3, [r7, #4]
    52c6:	7e1b      	ldrb	r3, [r3, #24]
    52c8:	b2db      	uxtb	r3, r3
    52ca:	f003 0302 	and.w	r3, r3, #2
    52ce:	2b00      	cmp	r3, #0
    52d0:	d015      	beq.n	52fe <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    52d2:	f107 030c 	add.w	r3, r7, #12
    52d6:	4618      	mov	r0, r3
    52d8:	4b0f      	ldr	r3, [pc, #60]	; (5318 <timer_add_task+0xec>)
    52da:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	7e1b      	ldrb	r3, [r3, #24]
    52e0:	b2db      	uxtb	r3, r3
    52e2:	f023 0302 	bic.w	r3, r3, #2
    52e6:	b2da      	uxtb	r2, r3
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	4618      	mov	r0, r3
    52f0:	4b0a      	ldr	r3, [pc, #40]	; (531c <timer_add_task+0xf0>)
    52f2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    52f4:	f107 030c 	add.w	r3, r7, #12
    52f8:	4618      	mov	r0, r3
    52fa:	4b09      	ldr	r3, [pc, #36]	; (5320 <timer_add_task+0xf4>)
    52fc:	4798      	blx	r3
	}

	return ERR_NONE;
    52fe:	2300      	movs	r3, #0
}
    5300:	4618      	mov	r0, r3
    5302:	3710      	adds	r7, #16
    5304:	46bd      	mov	sp, r7
    5306:	bd80      	pop	{r7, pc}
    5308:	000129dc 	.word	0x000129dc
    530c:	00005ed5 	.word	0x00005ed5
    5310:	00005efd 	.word	0x00005efd
    5314:	00005415 	.word	0x00005415
    5318:	00003ef1 	.word	0x00003ef1
    531c:	0000ab8d 	.word	0x0000ab8d
    5320:	00003f17 	.word	0x00003f17

00005324 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    5324:	b580      	push	{r7, lr}
    5326:	b084      	sub	sp, #16
    5328:	af00      	add	r7, sp, #0
    532a:	6078      	str	r0, [r7, #4]
    532c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    532e:	687b      	ldr	r3, [r7, #4]
    5330:	2b00      	cmp	r3, #0
    5332:	d004      	beq.n	533e <timer_remove_task+0x1a>
    5334:	683b      	ldr	r3, [r7, #0]
    5336:	2b00      	cmp	r3, #0
    5338:	d001      	beq.n	533e <timer_remove_task+0x1a>
    533a:	2301      	movs	r3, #1
    533c:	e000      	b.n	5340 <timer_remove_task+0x1c>
    533e:	2300      	movs	r3, #0
    5340:	f003 0301 	and.w	r3, r3, #1
    5344:	b2db      	uxtb	r3, r3
    5346:	2295      	movs	r2, #149	; 0x95
    5348:	492b      	ldr	r1, [pc, #172]	; (53f8 <timer_remove_task+0xd4>)
    534a:	4618      	mov	r0, r3
    534c:	4b2b      	ldr	r3, [pc, #172]	; (53fc <timer_remove_task+0xd8>)
    534e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5350:	687b      	ldr	r3, [r7, #4]
    5352:	7e1b      	ldrb	r3, [r3, #24]
    5354:	b2db      	uxtb	r3, r3
    5356:	f043 0301 	orr.w	r3, r3, #1
    535a:	b2da      	uxtb	r2, r3
    535c:	687b      	ldr	r3, [r7, #4]
    535e:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	3314      	adds	r3, #20
    5364:	6839      	ldr	r1, [r7, #0]
    5366:	4618      	mov	r0, r3
    5368:	4b25      	ldr	r3, [pc, #148]	; (5400 <timer_remove_task+0xdc>)
    536a:	4798      	blx	r3
    536c:	4603      	mov	r3, r0
    536e:	f083 0301 	eor.w	r3, r3, #1
    5372:	b2db      	uxtb	r3, r3
    5374:	2b00      	cmp	r3, #0
    5376:	d00f      	beq.n	5398 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5378:	687b      	ldr	r3, [r7, #4]
    537a:	7e1b      	ldrb	r3, [r3, #24]
    537c:	b2db      	uxtb	r3, r3
    537e:	f023 0301 	bic.w	r3, r3, #1
    5382:	b2da      	uxtb	r2, r3
    5384:	687b      	ldr	r3, [r7, #4]
    5386:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    5388:	229a      	movs	r2, #154	; 0x9a
    538a:	491b      	ldr	r1, [pc, #108]	; (53f8 <timer_remove_task+0xd4>)
    538c:	2000      	movs	r0, #0
    538e:	4b1b      	ldr	r3, [pc, #108]	; (53fc <timer_remove_task+0xd8>)
    5390:	4798      	blx	r3
		return ERR_NOT_FOUND;
    5392:	f06f 0309 	mvn.w	r3, #9
    5396:	e02b      	b.n	53f0 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	3314      	adds	r3, #20
    539c:	6839      	ldr	r1, [r7, #0]
    539e:	4618      	mov	r0, r3
    53a0:	4b18      	ldr	r3, [pc, #96]	; (5404 <timer_remove_task+0xe0>)
    53a2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	7e1b      	ldrb	r3, [r3, #24]
    53a8:	b2db      	uxtb	r3, r3
    53aa:	f023 0301 	bic.w	r3, r3, #1
    53ae:	b2da      	uxtb	r2, r3
    53b0:	687b      	ldr	r3, [r7, #4]
    53b2:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    53b4:	687b      	ldr	r3, [r7, #4]
    53b6:	7e1b      	ldrb	r3, [r3, #24]
    53b8:	b2db      	uxtb	r3, r3
    53ba:	f003 0302 	and.w	r3, r3, #2
    53be:	2b00      	cmp	r3, #0
    53c0:	d015      	beq.n	53ee <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    53c2:	f107 030c 	add.w	r3, r7, #12
    53c6:	4618      	mov	r0, r3
    53c8:	4b0f      	ldr	r3, [pc, #60]	; (5408 <timer_remove_task+0xe4>)
    53ca:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    53cc:	687b      	ldr	r3, [r7, #4]
    53ce:	7e1b      	ldrb	r3, [r3, #24]
    53d0:	b2db      	uxtb	r3, r3
    53d2:	f023 0302 	bic.w	r3, r3, #2
    53d6:	b2da      	uxtb	r2, r3
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    53dc:	687b      	ldr	r3, [r7, #4]
    53de:	4618      	mov	r0, r3
    53e0:	4b0a      	ldr	r3, [pc, #40]	; (540c <timer_remove_task+0xe8>)
    53e2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    53e4:	f107 030c 	add.w	r3, r7, #12
    53e8:	4618      	mov	r0, r3
    53ea:	4b09      	ldr	r3, [pc, #36]	; (5410 <timer_remove_task+0xec>)
    53ec:	4798      	blx	r3
	}

	return ERR_NONE;
    53ee:	2300      	movs	r3, #0
}
    53f0:	4618      	mov	r0, r3
    53f2:	3710      	adds	r7, #16
    53f4:	46bd      	mov	sp, r7
    53f6:	bd80      	pop	{r7, pc}
    53f8:	000129dc 	.word	0x000129dc
    53fc:	00005ed5 	.word	0x00005ed5
    5400:	00005efd 	.word	0x00005efd
    5404:	0000605f 	.word	0x0000605f
    5408:	00003ef1 	.word	0x00003ef1
    540c:	0000ab8d 	.word	0x0000ab8d
    5410:	00003f17 	.word	0x00003f17

00005414 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5414:	b580      	push	{r7, lr}
    5416:	b088      	sub	sp, #32
    5418:	af00      	add	r7, sp, #0
    541a:	60f8      	str	r0, [r7, #12]
    541c:	60b9      	str	r1, [r7, #8]
    541e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    5420:	2300      	movs	r3, #0
    5422:	61bb      	str	r3, [r7, #24]
    5424:	68f8      	ldr	r0, [r7, #12]
    5426:	4b23      	ldr	r3, [pc, #140]	; (54b4 <timer_add_timer_task+0xa0>)
    5428:	4798      	blx	r3
    542a:	6138      	str	r0, [r7, #16]

	if (!head) {
    542c:	693b      	ldr	r3, [r7, #16]
    542e:	2b00      	cmp	r3, #0
    5430:	d104      	bne.n	543c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    5432:	68b9      	ldr	r1, [r7, #8]
    5434:	68f8      	ldr	r0, [r7, #12]
    5436:	4b20      	ldr	r3, [pc, #128]	; (54b8 <timer_add_timer_task+0xa4>)
    5438:	4798      	blx	r3
		return;
    543a:	e037      	b.n	54ac <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    543c:	693b      	ldr	r3, [r7, #16]
    543e:	61fb      	str	r3, [r7, #28]
    5440:	e022      	b.n	5488 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    5442:	69fb      	ldr	r3, [r7, #28]
    5444:	685a      	ldr	r2, [r3, #4]
    5446:	687b      	ldr	r3, [r7, #4]
    5448:	429a      	cmp	r2, r3
    544a:	d808      	bhi.n	545e <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    544c:	69fb      	ldr	r3, [r7, #28]
    544e:	689a      	ldr	r2, [r3, #8]
    5450:	69fb      	ldr	r3, [r7, #28]
    5452:	6859      	ldr	r1, [r3, #4]
    5454:	687b      	ldr	r3, [r7, #4]
    5456:	1acb      	subs	r3, r1, r3
    5458:	4413      	add	r3, r2
    545a:	617b      	str	r3, [r7, #20]
    545c:	e009      	b.n	5472 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    545e:	69fb      	ldr	r3, [r7, #28]
    5460:	689a      	ldr	r2, [r3, #8]
    5462:	69fb      	ldr	r3, [r7, #28]
    5464:	685b      	ldr	r3, [r3, #4]
    5466:	441a      	add	r2, r3
    5468:	687b      	ldr	r3, [r7, #4]
    546a:	425b      	negs	r3, r3
    546c:	4413      	add	r3, r2
    546e:	3301      	adds	r3, #1
    5470:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    5472:	68bb      	ldr	r3, [r7, #8]
    5474:	689a      	ldr	r2, [r3, #8]
    5476:	697b      	ldr	r3, [r7, #20]
    5478:	429a      	cmp	r2, r3
    547a:	d909      	bls.n	5490 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    547c:	69fb      	ldr	r3, [r7, #28]
    547e:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5480:	69f8      	ldr	r0, [r7, #28]
    5482:	4b0e      	ldr	r3, [pc, #56]	; (54bc <timer_add_timer_task+0xa8>)
    5484:	4798      	blx	r3
    5486:	61f8      	str	r0, [r7, #28]
    5488:	69fb      	ldr	r3, [r7, #28]
    548a:	2b00      	cmp	r3, #0
    548c:	d1d9      	bne.n	5442 <timer_add_timer_task+0x2e>
    548e:	e000      	b.n	5492 <timer_add_timer_task+0x7e>
			break;
    5490:	bf00      	nop
	}

	if (it == head) {
    5492:	69fa      	ldr	r2, [r7, #28]
    5494:	693b      	ldr	r3, [r7, #16]
    5496:	429a      	cmp	r2, r3
    5498:	d104      	bne.n	54a4 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    549a:	68b9      	ldr	r1, [r7, #8]
    549c:	68f8      	ldr	r0, [r7, #12]
    549e:	4b06      	ldr	r3, [pc, #24]	; (54b8 <timer_add_timer_task+0xa4>)
    54a0:	4798      	blx	r3
    54a2:	e003      	b.n	54ac <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    54a4:	68b9      	ldr	r1, [r7, #8]
    54a6:	69b8      	ldr	r0, [r7, #24]
    54a8:	4b05      	ldr	r3, [pc, #20]	; (54c0 <timer_add_timer_task+0xac>)
    54aa:	4798      	blx	r3
	}
}
    54ac:	3720      	adds	r7, #32
    54ae:	46bd      	mov	sp, r7
    54b0:	bd80      	pop	{r7, pc}
    54b2:	bf00      	nop
    54b4:	000050e1 	.word	0x000050e1
    54b8:	00005f35 	.word	0x00005f35
    54bc:	000050f9 	.word	0x000050f9
    54c0:	00005f8d 	.word	0x00005f8d

000054c4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    54c4:	b580      	push	{r7, lr}
    54c6:	b086      	sub	sp, #24
    54c8:	af00      	add	r7, sp, #0
    54ca:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    54cc:	687b      	ldr	r3, [r7, #4]
    54ce:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    54d0:	693b      	ldr	r3, [r7, #16]
    54d2:	3314      	adds	r3, #20
    54d4:	4618      	mov	r0, r3
    54d6:	4b27      	ldr	r3, [pc, #156]	; (5574 <timer_process_counted+0xb0>)
    54d8:	4798      	blx	r3
    54da:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    54dc:	693b      	ldr	r3, [r7, #16]
    54de:	691b      	ldr	r3, [r3, #16]
    54e0:	1c5a      	adds	r2, r3, #1
    54e2:	693b      	ldr	r3, [r7, #16]
    54e4:	611a      	str	r2, [r3, #16]
    54e6:	693b      	ldr	r3, [r7, #16]
    54e8:	691b      	ldr	r3, [r3, #16]
    54ea:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    54ec:	693b      	ldr	r3, [r7, #16]
    54ee:	7e1b      	ldrb	r3, [r3, #24]
    54f0:	b2db      	uxtb	r3, r3
    54f2:	f003 0301 	and.w	r3, r3, #1
    54f6:	2b00      	cmp	r3, #0
    54f8:	d106      	bne.n	5508 <timer_process_counted+0x44>
    54fa:	693b      	ldr	r3, [r7, #16]
    54fc:	7e1b      	ldrb	r3, [r3, #24]
    54fe:	b2db      	uxtb	r3, r3
    5500:	f003 0302 	and.w	r3, r3, #2
    5504:	2b00      	cmp	r3, #0
    5506:	d027      	beq.n	5558 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    5508:	693b      	ldr	r3, [r7, #16]
    550a:	7e1b      	ldrb	r3, [r3, #24]
    550c:	b2db      	uxtb	r3, r3
    550e:	f043 0302 	orr.w	r3, r3, #2
    5512:	b2da      	uxtb	r2, r3
    5514:	693b      	ldr	r3, [r7, #16]
    5516:	761a      	strb	r2, [r3, #24]
		return;
    5518:	e029      	b.n	556e <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    551a:	697b      	ldr	r3, [r7, #20]
    551c:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    551e:	693b      	ldr	r3, [r7, #16]
    5520:	3314      	adds	r3, #20
    5522:	4618      	mov	r0, r3
    5524:	4b14      	ldr	r3, [pc, #80]	; (5578 <timer_process_counted+0xb4>)
    5526:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    5528:	68bb      	ldr	r3, [r7, #8]
    552a:	7c1b      	ldrb	r3, [r3, #16]
    552c:	2b01      	cmp	r3, #1
    552e:	d109      	bne.n	5544 <timer_process_counted+0x80>
			tmp->time_label = time;
    5530:	68bb      	ldr	r3, [r7, #8]
    5532:	68fa      	ldr	r2, [r7, #12]
    5534:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    5536:	693b      	ldr	r3, [r7, #16]
    5538:	3314      	adds	r3, #20
    553a:	68fa      	ldr	r2, [r7, #12]
    553c:	68b9      	ldr	r1, [r7, #8]
    553e:	4618      	mov	r0, r3
    5540:	4b0e      	ldr	r3, [pc, #56]	; (557c <timer_process_counted+0xb8>)
    5542:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    5544:	693b      	ldr	r3, [r7, #16]
    5546:	3314      	adds	r3, #20
    5548:	4618      	mov	r0, r3
    554a:	4b0a      	ldr	r3, [pc, #40]	; (5574 <timer_process_counted+0xb0>)
    554c:	4798      	blx	r3
    554e:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    5550:	68bb      	ldr	r3, [r7, #8]
    5552:	68db      	ldr	r3, [r3, #12]
    5554:	68b8      	ldr	r0, [r7, #8]
    5556:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    5558:	697b      	ldr	r3, [r7, #20]
    555a:	2b00      	cmp	r3, #0
    555c:	d007      	beq.n	556e <timer_process_counted+0xaa>
    555e:	697b      	ldr	r3, [r7, #20]
    5560:	685b      	ldr	r3, [r3, #4]
    5562:	68fa      	ldr	r2, [r7, #12]
    5564:	1ad2      	subs	r2, r2, r3
    5566:	697b      	ldr	r3, [r7, #20]
    5568:	689b      	ldr	r3, [r3, #8]
    556a:	429a      	cmp	r2, r3
    556c:	d2d5      	bcs.n	551a <timer_process_counted+0x56>
	}
}
    556e:	3718      	adds	r7, #24
    5570:	46bd      	mov	sp, r7
    5572:	bd80      	pop	{r7, pc}
    5574:	000050e1 	.word	0x000050e1
    5578:	0000602d 	.word	0x0000602d
    557c:	00005415 	.word	0x00005415

00005580 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    5580:	b480      	push	{r7}
    5582:	b085      	sub	sp, #20
    5584:	af00      	add	r7, sp, #0
    5586:	4603      	mov	r3, r0
    5588:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    558a:	2300      	movs	r3, #0
    558c:	73fb      	strb	r3, [r7, #15]
    558e:	e029      	b.n	55e4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5590:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5594:	4a19      	ldr	r2, [pc, #100]	; (55fc <_usb_d_find_ep+0x7c>)
    5596:	015b      	lsls	r3, r3, #5
    5598:	4413      	add	r3, r2
    559a:	3301      	adds	r3, #1
    559c:	781b      	ldrb	r3, [r3, #0]
    559e:	79fa      	ldrb	r2, [r7, #7]
    55a0:	429a      	cmp	r2, r3
    55a2:	d102      	bne.n	55aa <_usb_d_find_ep+0x2a>
			return i;
    55a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    55a8:	e022      	b.n	55f0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    55aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    55ae:	4a13      	ldr	r2, [pc, #76]	; (55fc <_usb_d_find_ep+0x7c>)
    55b0:	015b      	lsls	r3, r3, #5
    55b2:	4413      	add	r3, r2
    55b4:	781b      	ldrb	r3, [r3, #0]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d10e      	bne.n	55d8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    55ba:	79fb      	ldrb	r3, [r7, #7]
    55bc:	f003 030f 	and.w	r3, r3, #15
    55c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    55c4:	490d      	ldr	r1, [pc, #52]	; (55fc <_usb_d_find_ep+0x7c>)
    55c6:	0152      	lsls	r2, r2, #5
    55c8:	440a      	add	r2, r1
    55ca:	3201      	adds	r2, #1
    55cc:	7812      	ldrb	r2, [r2, #0]
    55ce:	4293      	cmp	r3, r2
    55d0:	d102      	bne.n	55d8 <_usb_d_find_ep+0x58>
			return i;
    55d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    55d6:	e00b      	b.n	55f0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    55d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    55dc:	b2db      	uxtb	r3, r3
    55de:	3301      	adds	r3, #1
    55e0:	b2db      	uxtb	r3, r3
    55e2:	73fb      	strb	r3, [r7, #15]
    55e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    55e8:	2b03      	cmp	r3, #3
    55ea:	ddd1      	ble.n	5590 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    55ec:	f04f 33ff 	mov.w	r3, #4294967295
}
    55f0:	4618      	mov	r0, r3
    55f2:	3714      	adds	r7, #20
    55f4:	46bd      	mov	sp, r7
    55f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55fa:	4770      	bx	lr
    55fc:	20002088 	.word	0x20002088

00005600 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    5600:	b580      	push	{r7, lr}
    5602:	b088      	sub	sp, #32
    5604:	af00      	add	r7, sp, #0
    5606:	60ba      	str	r2, [r7, #8]
    5608:	607b      	str	r3, [r7, #4]
    560a:	4603      	mov	r3, r0
    560c:	73fb      	strb	r3, [r7, #15]
    560e:	460b      	mov	r3, r1
    5610:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    5612:	68bb      	ldr	r3, [r7, #8]
    5614:	617b      	str	r3, [r7, #20]
    5616:	687b      	ldr	r3, [r7, #4]
    5618:	61bb      	str	r3, [r7, #24]
    561a:	7bbb      	ldrb	r3, [r7, #14]
    561c:	2b00      	cmp	r3, #0
    561e:	d004      	beq.n	562a <_usb_d_trans+0x2a>
    5620:	7bfb      	ldrb	r3, [r7, #15]
    5622:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5626:	b2db      	uxtb	r3, r3
    5628:	e003      	b.n	5632 <_usb_d_trans+0x32>
    562a:	7bfb      	ldrb	r3, [r7, #15]
    562c:	f003 030f 	and.w	r3, r3, #15
    5630:	b2db      	uxtb	r3, r3
    5632:	773b      	strb	r3, [r7, #28]
    5634:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    5638:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    563a:	f107 0314 	add.w	r3, r7, #20
    563e:	4618      	mov	r0, r3
    5640:	4b03      	ldr	r3, [pc, #12]	; (5650 <_usb_d_trans+0x50>)
    5642:	4798      	blx	r3
    5644:	4603      	mov	r3, r0
}
    5646:	4618      	mov	r0, r3
    5648:	3720      	adds	r7, #32
    564a:	46bd      	mov	sp, r7
    564c:	bd80      	pop	{r7, pc}
    564e:	bf00      	nop
    5650:	0000d30d 	.word	0x0000d30d

00005654 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    5654:	b480      	push	{r7}
    5656:	b085      	sub	sp, #20
    5658:	af00      	add	r7, sp, #0
    565a:	60f8      	str	r0, [r7, #12]
    565c:	60b9      	str	r1, [r7, #8]
    565e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    5660:	2300      	movs	r3, #0
}
    5662:	4618      	mov	r0, r3
    5664:	3714      	adds	r7, #20
    5666:	46bd      	mov	sp, r7
    5668:	f85d 7b04 	ldr.w	r7, [sp], #4
    566c:	4770      	bx	lr
	...

00005670 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    5670:	b580      	push	{r7, lr}
    5672:	b086      	sub	sp, #24
    5674:	af00      	add	r7, sp, #0
    5676:	4603      	mov	r3, r0
    5678:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    567a:	79fb      	ldrb	r3, [r7, #7]
    567c:	4618      	mov	r0, r3
    567e:	4b2a      	ldr	r3, [pc, #168]	; (5728 <usb_d_cb_trans_setup+0xb8>)
    5680:	4798      	blx	r3
    5682:	4603      	mov	r3, r0
    5684:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5686:	f997 3017 	ldrsb.w	r3, [r7, #23]
    568a:	015b      	lsls	r3, r3, #5
    568c:	4a27      	ldr	r2, [pc, #156]	; (572c <usb_d_cb_trans_setup+0xbc>)
    568e:	4413      	add	r3, r2
    5690:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    5692:	693b      	ldr	r3, [r7, #16]
    5694:	330c      	adds	r3, #12
    5696:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    5698:	79fb      	ldrb	r3, [r7, #7]
    569a:	68f9      	ldr	r1, [r7, #12]
    569c:	4618      	mov	r0, r3
    569e:	4b24      	ldr	r3, [pc, #144]	; (5730 <usb_d_cb_trans_setup+0xc0>)
    56a0:	4798      	blx	r3
    56a2:	4603      	mov	r3, r0
    56a4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    56a6:	7afb      	ldrb	r3, [r7, #11]
    56a8:	2b08      	cmp	r3, #8
    56aa:	d00d      	beq.n	56c8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    56ac:	79fb      	ldrb	r3, [r7, #7]
    56ae:	2101      	movs	r1, #1
    56b0:	4618      	mov	r0, r3
    56b2:	4b20      	ldr	r3, [pc, #128]	; (5734 <usb_d_cb_trans_setup+0xc4>)
    56b4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    56b6:	79fb      	ldrb	r3, [r7, #7]
    56b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    56bc:	b2db      	uxtb	r3, r3
    56be:	2101      	movs	r1, #1
    56c0:	4618      	mov	r0, r3
    56c2:	4b1c      	ldr	r3, [pc, #112]	; (5734 <usb_d_cb_trans_setup+0xc4>)
    56c4:	4798      	blx	r3
		return;
    56c6:	e02b      	b.n	5720 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    56c8:	79fb      	ldrb	r3, [r7, #7]
    56ca:	2100      	movs	r1, #0
    56cc:	4618      	mov	r0, r3
    56ce:	4b19      	ldr	r3, [pc, #100]	; (5734 <usb_d_cb_trans_setup+0xc4>)
    56d0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    56d2:	79fb      	ldrb	r3, [r7, #7]
    56d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    56d8:	b2db      	uxtb	r3, r3
    56da:	2100      	movs	r1, #0
    56dc:	4618      	mov	r0, r3
    56de:	4b15      	ldr	r3, [pc, #84]	; (5734 <usb_d_cb_trans_setup+0xc4>)
    56e0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    56e2:	693b      	ldr	r3, [r7, #16]
    56e4:	2201      	movs	r2, #1
    56e6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    56e8:	693b      	ldr	r3, [r7, #16]
    56ea:	695b      	ldr	r3, [r3, #20]
    56ec:	79fa      	ldrb	r2, [r7, #7]
    56ee:	68f9      	ldr	r1, [r7, #12]
    56f0:	4610      	mov	r0, r2
    56f2:	4798      	blx	r3
    56f4:	4603      	mov	r3, r0
    56f6:	f083 0301 	eor.w	r3, r3, #1
    56fa:	b2db      	uxtb	r3, r3
    56fc:	2b00      	cmp	r3, #0
    56fe:	d00f      	beq.n	5720 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    5700:	693b      	ldr	r3, [r7, #16]
    5702:	2205      	movs	r2, #5
    5704:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5706:	79fb      	ldrb	r3, [r7, #7]
    5708:	2101      	movs	r1, #1
    570a:	4618      	mov	r0, r3
    570c:	4b09      	ldr	r3, [pc, #36]	; (5734 <usb_d_cb_trans_setup+0xc4>)
    570e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    5710:	79fb      	ldrb	r3, [r7, #7]
    5712:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5716:	b2db      	uxtb	r3, r3
    5718:	2101      	movs	r1, #1
    571a:	4618      	mov	r0, r3
    571c:	4b05      	ldr	r3, [pc, #20]	; (5734 <usb_d_cb_trans_setup+0xc4>)
    571e:	4798      	blx	r3
	}
}
    5720:	3718      	adds	r7, #24
    5722:	46bd      	mov	sp, r7
    5724:	bd80      	pop	{r7, pc}
    5726:	bf00      	nop
    5728:	00005581 	.word	0x00005581
    572c:	20002088 	.word	0x20002088
    5730:	0000d265 	.word	0x0000d265
    5734:	0000d0dd 	.word	0x0000d0dd

00005738 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    5738:	b580      	push	{r7, lr}
    573a:	b084      	sub	sp, #16
    573c:	af00      	add	r7, sp, #0
    573e:	4603      	mov	r3, r0
    5740:	6039      	str	r1, [r7, #0]
    5742:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5744:	79fb      	ldrb	r3, [r7, #7]
    5746:	4618      	mov	r0, r3
    5748:	4b0d      	ldr	r3, [pc, #52]	; (5780 <usb_d_cb_trans_more+0x48>)
    574a:	4798      	blx	r3
    574c:	4603      	mov	r3, r0
    574e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5750:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5754:	015b      	lsls	r3, r3, #5
    5756:	4a0b      	ldr	r2, [pc, #44]	; (5784 <usb_d_cb_trans_more+0x4c>)
    5758:	4413      	add	r3, r2
    575a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    575c:	68bb      	ldr	r3, [r7, #8]
    575e:	789b      	ldrb	r3, [r3, #2]
    5760:	2b03      	cmp	r3, #3
    5762:	d107      	bne.n	5774 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    5764:	68bb      	ldr	r3, [r7, #8]
    5766:	699b      	ldr	r3, [r3, #24]
    5768:	79fa      	ldrb	r2, [r7, #7]
    576a:	6839      	ldr	r1, [r7, #0]
    576c:	4610      	mov	r0, r2
    576e:	4798      	blx	r3
    5770:	4603      	mov	r3, r0
    5772:	e000      	b.n	5776 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    5774:	2300      	movs	r3, #0
}
    5776:	4618      	mov	r0, r3
    5778:	3710      	adds	r7, #16
    577a:	46bd      	mov	sp, r7
    577c:	bd80      	pop	{r7, pc}
    577e:	bf00      	nop
    5780:	00005581 	.word	0x00005581
    5784:	20002088 	.word	0x20002088

00005788 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    5788:	b590      	push	{r4, r7, lr}
    578a:	b087      	sub	sp, #28
    578c:	af02      	add	r7, sp, #8
    578e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    5790:	687b      	ldr	r3, [r7, #4]
    5792:	789b      	ldrb	r3, [r3, #2]
    5794:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    5796:	687b      	ldr	r3, [r7, #4]
    5798:	7b1b      	ldrb	r3, [r3, #12]
    579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    579e:	2b00      	cmp	r3, #0
    57a0:	bf14      	ite	ne
    57a2:	2301      	movne	r3, #1
    57a4:	2300      	moveq	r3, #0
    57a6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    57a8:	7bfb      	ldrb	r3, [r7, #15]
    57aa:	2b03      	cmp	r3, #3
    57ac:	d13a      	bne.n	5824 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	69db      	ldr	r3, [r3, #28]
    57b2:	687a      	ldr	r2, [r7, #4]
    57b4:	7850      	ldrb	r0, [r2, #1]
    57b6:	687a      	ldr	r2, [r7, #4]
    57b8:	320c      	adds	r2, #12
    57ba:	2101      	movs	r1, #1
    57bc:	4798      	blx	r3
    57be:	4603      	mov	r3, r0
    57c0:	737b      	strb	r3, [r7, #13]
		if (err) {
    57c2:	7b7b      	ldrb	r3, [r7, #13]
    57c4:	2b00      	cmp	r3, #0
    57c6:	d015      	beq.n	57f4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	2205      	movs	r2, #5
    57cc:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    57ce:	687b      	ldr	r3, [r7, #4]
    57d0:	2202      	movs	r2, #2
    57d2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    57d4:	7bbb      	ldrb	r3, [r7, #14]
    57d6:	2b00      	cmp	r3, #0
    57d8:	d002      	beq.n	57e0 <usb_d_ctrl_trans_done+0x58>
    57da:	687b      	ldr	r3, [r7, #4]
    57dc:	785b      	ldrb	r3, [r3, #1]
    57de:	e004      	b.n	57ea <usb_d_ctrl_trans_done+0x62>
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	785b      	ldrb	r3, [r3, #1]
    57e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    57e8:	b2db      	uxtb	r3, r3
    57ea:	2101      	movs	r1, #1
    57ec:	4618      	mov	r0, r3
    57ee:	4b15      	ldr	r3, [pc, #84]	; (5844 <usb_d_ctrl_trans_done+0xbc>)
    57f0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    57f2:	e022      	b.n	583a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    57f4:	687b      	ldr	r3, [r7, #4]
    57f6:	2204      	movs	r2, #4
    57f8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	7858      	ldrb	r0, [r3, #1]
    57fe:	7bbb      	ldrb	r3, [r7, #14]
    5800:	2b00      	cmp	r3, #0
    5802:	bf14      	ite	ne
    5804:	2301      	movne	r3, #1
    5806:	2300      	moveq	r3, #0
    5808:	b2db      	uxtb	r3, r3
    580a:	f083 0301 	eor.w	r3, r3, #1
    580e:	b2db      	uxtb	r3, r3
    5810:	f003 0301 	and.w	r3, r3, #1
    5814:	b2d9      	uxtb	r1, r3
    5816:	2301      	movs	r3, #1
    5818:	9300      	str	r3, [sp, #0]
    581a:	2300      	movs	r3, #0
    581c:	2200      	movs	r2, #0
    581e:	4c0a      	ldr	r4, [pc, #40]	; (5848 <usb_d_ctrl_trans_done+0xc0>)
    5820:	47a0      	blx	r4
}
    5822:	e00a      	b.n	583a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    5824:	687b      	ldr	r3, [r7, #4]
    5826:	69db      	ldr	r3, [r3, #28]
    5828:	687a      	ldr	r2, [r7, #4]
    582a:	7850      	ldrb	r0, [r2, #1]
    582c:	687a      	ldr	r2, [r7, #4]
    582e:	320c      	adds	r2, #12
    5830:	2100      	movs	r1, #0
    5832:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    5834:	687b      	ldr	r3, [r7, #4]
    5836:	2202      	movs	r2, #2
    5838:	709a      	strb	r2, [r3, #2]
}
    583a:	bf00      	nop
    583c:	3714      	adds	r7, #20
    583e:	46bd      	mov	sp, r7
    5840:	bd90      	pop	{r4, r7, pc}
    5842:	bf00      	nop
    5844:	0000d0dd 	.word	0x0000d0dd
    5848:	00005601 	.word	0x00005601

0000584c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    584c:	b580      	push	{r7, lr}
    584e:	b086      	sub	sp, #24
    5850:	af00      	add	r7, sp, #0
    5852:	4603      	mov	r3, r0
    5854:	60b9      	str	r1, [r7, #8]
    5856:	607a      	str	r2, [r7, #4]
    5858:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    585a:	7bfb      	ldrb	r3, [r7, #15]
    585c:	4618      	mov	r0, r3
    585e:	4b2f      	ldr	r3, [pc, #188]	; (591c <_usb_d_cb_trans_done+0xd0>)
    5860:	4798      	blx	r3
    5862:	4603      	mov	r3, r0
    5864:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5866:	f997 3017 	ldrsb.w	r3, [r7, #23]
    586a:	015b      	lsls	r3, r3, #5
    586c:	4a2c      	ldr	r2, [pc, #176]	; (5920 <_usb_d_cb_trans_done+0xd4>)
    586e:	4413      	add	r3, r2
    5870:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    5872:	68bb      	ldr	r3, [r7, #8]
    5874:	2b00      	cmp	r3, #0
    5876:	d10e      	bne.n	5896 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    5878:	693b      	ldr	r3, [r7, #16]
    587a:	2200      	movs	r2, #0
    587c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    587e:	693b      	ldr	r3, [r7, #16]
    5880:	781b      	ldrb	r3, [r3, #0]
    5882:	2b00      	cmp	r3, #0
    5884:	d103      	bne.n	588e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    5886:	6938      	ldr	r0, [r7, #16]
    5888:	4b26      	ldr	r3, [pc, #152]	; (5924 <_usb_d_cb_trans_done+0xd8>)
    588a:	4798      	blx	r3
			return;
    588c:	e043      	b.n	5916 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    588e:	693b      	ldr	r3, [r7, #16]
    5890:	2201      	movs	r2, #1
    5892:	709a      	strb	r2, [r3, #2]
    5894:	e038      	b.n	5908 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    5896:	68bb      	ldr	r3, [r7, #8]
    5898:	2b01      	cmp	r3, #1
    589a:	d113      	bne.n	58c4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    589c:	693b      	ldr	r3, [r7, #16]
    589e:	2202      	movs	r2, #2
    58a0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    58a2:	693b      	ldr	r3, [r7, #16]
    58a4:	781b      	ldrb	r3, [r3, #0]
    58a6:	2b00      	cmp	r3, #0
    58a8:	d108      	bne.n	58bc <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    58aa:	693b      	ldr	r3, [r7, #16]
    58ac:	2202      	movs	r2, #2
    58ae:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    58b0:	7bfb      	ldrb	r3, [r7, #15]
    58b2:	2100      	movs	r1, #0
    58b4:	4618      	mov	r0, r3
    58b6:	4b1c      	ldr	r3, [pc, #112]	; (5928 <_usb_d_cb_trans_done+0xdc>)
    58b8:	4798      	blx	r3
    58ba:	e025      	b.n	5908 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    58bc:	693b      	ldr	r3, [r7, #16]
    58be:	2205      	movs	r2, #5
    58c0:	709a      	strb	r2, [r3, #2]
    58c2:	e021      	b.n	5908 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    58c4:	68bb      	ldr	r3, [r7, #8]
    58c6:	2b02      	cmp	r3, #2
    58c8:	d10e      	bne.n	58e8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    58ca:	693b      	ldr	r3, [r7, #16]
    58cc:	2204      	movs	r2, #4
    58ce:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    58d0:	693b      	ldr	r3, [r7, #16]
    58d2:	781b      	ldrb	r3, [r3, #0]
    58d4:	2b00      	cmp	r3, #0
    58d6:	d103      	bne.n	58e0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    58d8:	693b      	ldr	r3, [r7, #16]
    58da:	2202      	movs	r2, #2
    58dc:	709a      	strb	r2, [r3, #2]
			return;
    58de:	e01a      	b.n	5916 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    58e0:	693b      	ldr	r3, [r7, #16]
    58e2:	2201      	movs	r2, #1
    58e4:	709a      	strb	r2, [r3, #2]
    58e6:	e00f      	b.n	5908 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    58e8:	68bb      	ldr	r3, [r7, #8]
    58ea:	2b03      	cmp	r3, #3
    58ec:	d106      	bne.n	58fc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    58ee:	693b      	ldr	r3, [r7, #16]
    58f0:	2200      	movs	r2, #0
    58f2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    58f4:	693b      	ldr	r3, [r7, #16]
    58f6:	2205      	movs	r2, #5
    58f8:	70da      	strb	r2, [r3, #3]
    58fa:	e005      	b.n	5908 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    58fc:	693b      	ldr	r3, [r7, #16]
    58fe:	2206      	movs	r2, #6
    5900:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    5902:	693b      	ldr	r3, [r7, #16]
    5904:	2206      	movs	r2, #6
    5906:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    5908:	693b      	ldr	r3, [r7, #16]
    590a:	69db      	ldr	r3, [r3, #28]
    590c:	693a      	ldr	r2, [r7, #16]
    590e:	78d1      	ldrb	r1, [r2, #3]
    5910:	687a      	ldr	r2, [r7, #4]
    5912:	7bf8      	ldrb	r0, [r7, #15]
    5914:	4798      	blx	r3
}
    5916:	3718      	adds	r7, #24
    5918:	46bd      	mov	sp, r7
    591a:	bd80      	pop	{r7, pc}
    591c:	00005581 	.word	0x00005581
    5920:	20002088 	.word	0x20002088
    5924:	00005789 	.word	0x00005789
    5928:	0000d0dd 	.word	0x0000d0dd

0000592c <usb_d_init>:

int32_t usb_d_init(void)
{
    592c:	b580      	push	{r7, lr}
    592e:	b082      	sub	sp, #8
    5930:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    5932:	4b21      	ldr	r3, [pc, #132]	; (59b8 <usb_d_init+0x8c>)
    5934:	4798      	blx	r3
    5936:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    5938:	683b      	ldr	r3, [r7, #0]
    593a:	2b00      	cmp	r3, #0
    593c:	da01      	bge.n	5942 <usb_d_init+0x16>
		return rc;
    593e:	683b      	ldr	r3, [r7, #0]
    5940:	e036      	b.n	59b0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    5942:	2280      	movs	r2, #128	; 0x80
    5944:	2100      	movs	r1, #0
    5946:	481d      	ldr	r0, [pc, #116]	; (59bc <usb_d_init+0x90>)
    5948:	4b1d      	ldr	r3, [pc, #116]	; (59c0 <usb_d_init+0x94>)
    594a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    594c:	2300      	movs	r3, #0
    594e:	71fb      	strb	r3, [r7, #7]
    5950:	e01e      	b.n	5990 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5952:	79fb      	ldrb	r3, [r7, #7]
    5954:	4a19      	ldr	r2, [pc, #100]	; (59bc <usb_d_init+0x90>)
    5956:	015b      	lsls	r3, r3, #5
    5958:	4413      	add	r3, r2
    595a:	3301      	adds	r3, #1
    595c:	22ff      	movs	r2, #255	; 0xff
    595e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5960:	79fb      	ldrb	r3, [r7, #7]
    5962:	4a16      	ldr	r2, [pc, #88]	; (59bc <usb_d_init+0x90>)
    5964:	015b      	lsls	r3, r3, #5
    5966:	4413      	add	r3, r2
    5968:	3314      	adds	r3, #20
    596a:	4a16      	ldr	r2, [pc, #88]	; (59c4 <usb_d_init+0x98>)
    596c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    596e:	79fb      	ldrb	r3, [r7, #7]
    5970:	4a12      	ldr	r2, [pc, #72]	; (59bc <usb_d_init+0x90>)
    5972:	015b      	lsls	r3, r3, #5
    5974:	4413      	add	r3, r2
    5976:	3318      	adds	r3, #24
    5978:	4a12      	ldr	r2, [pc, #72]	; (59c4 <usb_d_init+0x98>)
    597a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    597c:	79fb      	ldrb	r3, [r7, #7]
    597e:	4a0f      	ldr	r2, [pc, #60]	; (59bc <usb_d_init+0x90>)
    5980:	015b      	lsls	r3, r3, #5
    5982:	4413      	add	r3, r2
    5984:	331c      	adds	r3, #28
    5986:	4a0f      	ldr	r2, [pc, #60]	; (59c4 <usb_d_init+0x98>)
    5988:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    598a:	79fb      	ldrb	r3, [r7, #7]
    598c:	3301      	adds	r3, #1
    598e:	71fb      	strb	r3, [r7, #7]
    5990:	79fb      	ldrb	r3, [r7, #7]
    5992:	2b03      	cmp	r3, #3
    5994:	d9dd      	bls.n	5952 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5996:	490c      	ldr	r1, [pc, #48]	; (59c8 <usb_d_init+0x9c>)
    5998:	2000      	movs	r0, #0
    599a:	4b0c      	ldr	r3, [pc, #48]	; (59cc <usb_d_init+0xa0>)
    599c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    599e:	490c      	ldr	r1, [pc, #48]	; (59d0 <usb_d_init+0xa4>)
    59a0:	2001      	movs	r0, #1
    59a2:	4b0a      	ldr	r3, [pc, #40]	; (59cc <usb_d_init+0xa0>)
    59a4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    59a6:	490b      	ldr	r1, [pc, #44]	; (59d4 <usb_d_init+0xa8>)
    59a8:	2002      	movs	r0, #2
    59aa:	4b08      	ldr	r3, [pc, #32]	; (59cc <usb_d_init+0xa0>)
    59ac:	4798      	blx	r3
	return ERR_NONE;
    59ae:	2300      	movs	r3, #0
}
    59b0:	4618      	mov	r0, r3
    59b2:	3708      	adds	r7, #8
    59b4:	46bd      	mov	sp, r7
    59b6:	bd80      	pop	{r7, pc}
    59b8:	0000c925 	.word	0x0000c925
    59bc:	20002088 	.word	0x20002088
    59c0:	00011875 	.word	0x00011875
    59c4:	00005655 	.word	0x00005655
    59c8:	00005671 	.word	0x00005671
    59cc:	0000d56d 	.word	0x0000d56d
    59d0:	00005739 	.word	0x00005739
    59d4:	0000584d 	.word	0x0000584d

000059d8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    59d8:	b580      	push	{r7, lr}
    59da:	b082      	sub	sp, #8
    59dc:	af00      	add	r7, sp, #0
    59de:	4603      	mov	r3, r0
    59e0:	6039      	str	r1, [r7, #0]
    59e2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    59e4:	79fb      	ldrb	r3, [r7, #7]
    59e6:	6839      	ldr	r1, [r7, #0]
    59e8:	4618      	mov	r0, r3
    59ea:	4b03      	ldr	r3, [pc, #12]	; (59f8 <usb_d_register_callback+0x20>)
    59ec:	4798      	blx	r3
}
    59ee:	bf00      	nop
    59f0:	3708      	adds	r7, #8
    59f2:	46bd      	mov	sp, r7
    59f4:	bd80      	pop	{r7, pc}
    59f6:	bf00      	nop
    59f8:	0000d525 	.word	0x0000d525

000059fc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    59fc:	b580      	push	{r7, lr}
    59fe:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    5a00:	4b02      	ldr	r3, [pc, #8]	; (5a0c <usb_d_enable+0x10>)
    5a02:	4798      	blx	r3
    5a04:	4603      	mov	r3, r0
}
    5a06:	4618      	mov	r0, r3
    5a08:	bd80      	pop	{r7, pc}
    5a0a:	bf00      	nop
    5a0c:	0000ca15 	.word	0x0000ca15

00005a10 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5a10:	b580      	push	{r7, lr}
    5a12:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    5a14:	4b01      	ldr	r3, [pc, #4]	; (5a1c <usb_d_attach+0xc>)
    5a16:	4798      	blx	r3
}
    5a18:	bf00      	nop
    5a1a:	bd80      	pop	{r7, pc}
    5a1c:	0000ca99 	.word	0x0000ca99

00005a20 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5a20:	b580      	push	{r7, lr}
    5a22:	b082      	sub	sp, #8
    5a24:	af00      	add	r7, sp, #0
    5a26:	4603      	mov	r3, r0
    5a28:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    5a2a:	79fb      	ldrb	r3, [r7, #7]
    5a2c:	4618      	mov	r0, r3
    5a2e:	4b03      	ldr	r3, [pc, #12]	; (5a3c <usb_d_set_address+0x1c>)
    5a30:	4798      	blx	r3
}
    5a32:	bf00      	nop
    5a34:	3708      	adds	r7, #8
    5a36:	46bd      	mov	sp, r7
    5a38:	bd80      	pop	{r7, pc}
    5a3a:	bf00      	nop
    5a3c:	0000caad 	.word	0x0000caad

00005a40 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    5a40:	b580      	push	{r7, lr}
    5a42:	b082      	sub	sp, #8
    5a44:	af00      	add	r7, sp, #0
    5a46:	4603      	mov	r3, r0
    5a48:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5a4a:	79fb      	ldrb	r3, [r7, #7]
    5a4c:	b29b      	uxth	r3, r3
    5a4e:	461a      	mov	r2, r3
    5a50:	2100      	movs	r1, #0
    5a52:	2000      	movs	r0, #0
    5a54:	4b03      	ldr	r3, [pc, #12]	; (5a64 <usb_d_ep0_init+0x24>)
    5a56:	4798      	blx	r3
    5a58:	4603      	mov	r3, r0
}
    5a5a:	4618      	mov	r0, r3
    5a5c:	3708      	adds	r7, #8
    5a5e:	46bd      	mov	sp, r7
    5a60:	bd80      	pop	{r7, pc}
    5a62:	bf00      	nop
    5a64:	00005a69 	.word	0x00005a69

00005a68 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5a68:	b580      	push	{r7, lr}
    5a6a:	b086      	sub	sp, #24
    5a6c:	af00      	add	r7, sp, #0
    5a6e:	4603      	mov	r3, r0
    5a70:	71fb      	strb	r3, [r7, #7]
    5a72:	460b      	mov	r3, r1
    5a74:	71bb      	strb	r3, [r7, #6]
    5a76:	4613      	mov	r3, r2
    5a78:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5a7a:	79fb      	ldrb	r3, [r7, #7]
    5a7c:	4618      	mov	r0, r3
    5a7e:	4b1e      	ldr	r3, [pc, #120]	; (5af8 <usb_d_ep_init+0x90>)
    5a80:	4798      	blx	r3
    5a82:	4603      	mov	r3, r0
    5a84:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5a8a:	015b      	lsls	r3, r3, #5
    5a8c:	4a1b      	ldr	r2, [pc, #108]	; (5afc <usb_d_ep_init+0x94>)
    5a8e:	4413      	add	r3, r2
    5a90:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    5a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5a96:	2b00      	cmp	r3, #0
    5a98:	db02      	blt.n	5aa0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    5a9a:	f06f 0313 	mvn.w	r3, #19
    5a9e:	e027      	b.n	5af0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5aa0:	20ff      	movs	r0, #255	; 0xff
    5aa2:	4b15      	ldr	r3, [pc, #84]	; (5af8 <usb_d_ep_init+0x90>)
    5aa4:	4798      	blx	r3
    5aa6:	4603      	mov	r3, r0
    5aa8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    5aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5aae:	2b00      	cmp	r3, #0
    5ab0:	da02      	bge.n	5ab8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    5ab2:	f06f 0314 	mvn.w	r3, #20
    5ab6:	e01b      	b.n	5af0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    5ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5abc:	015b      	lsls	r3, r3, #5
    5abe:	4a0f      	ldr	r2, [pc, #60]	; (5afc <usb_d_ep_init+0x94>)
    5ac0:	4413      	add	r3, r2
    5ac2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5ac4:	88ba      	ldrh	r2, [r7, #4]
    5ac6:	79b9      	ldrb	r1, [r7, #6]
    5ac8:	79fb      	ldrb	r3, [r7, #7]
    5aca:	4618      	mov	r0, r3
    5acc:	4b0c      	ldr	r3, [pc, #48]	; (5b00 <usb_d_ep_init+0x98>)
    5ace:	4798      	blx	r3
    5ad0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5ad2:	68fb      	ldr	r3, [r7, #12]
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	da01      	bge.n	5adc <usb_d_ep_init+0x74>
		return rc;
    5ad8:	68fb      	ldr	r3, [r7, #12]
    5ada:	e009      	b.n	5af0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    5adc:	693b      	ldr	r3, [r7, #16]
    5ade:	79fa      	ldrb	r2, [r7, #7]
    5ae0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5ae2:	79bb      	ldrb	r3, [r7, #6]
    5ae4:	f003 0303 	and.w	r3, r3, #3
    5ae8:	b2da      	uxtb	r2, r3
    5aea:	693b      	ldr	r3, [r7, #16]
    5aec:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    5aee:	2300      	movs	r3, #0
}
    5af0:	4618      	mov	r0, r3
    5af2:	3718      	adds	r7, #24
    5af4:	46bd      	mov	sp, r7
    5af6:	bd80      	pop	{r7, pc}
    5af8:	00005581 	.word	0x00005581
    5afc:	20002088 	.word	0x20002088
    5b00:	0000cb4d 	.word	0x0000cb4d

00005b04 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5b04:	b580      	push	{r7, lr}
    5b06:	b084      	sub	sp, #16
    5b08:	af00      	add	r7, sp, #0
    5b0a:	4603      	mov	r3, r0
    5b0c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5b0e:	79fb      	ldrb	r3, [r7, #7]
    5b10:	4618      	mov	r0, r3
    5b12:	4b0d      	ldr	r3, [pc, #52]	; (5b48 <usb_d_ep_deinit+0x44>)
    5b14:	4798      	blx	r3
    5b16:	4603      	mov	r3, r0
    5b18:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5b1e:	015b      	lsls	r3, r3, #5
    5b20:	4a0a      	ldr	r2, [pc, #40]	; (5b4c <usb_d_ep_deinit+0x48>)
    5b22:	4413      	add	r3, r2
    5b24:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	db07      	blt.n	5b3e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5b2e:	79fb      	ldrb	r3, [r7, #7]
    5b30:	4618      	mov	r0, r3
    5b32:	4b07      	ldr	r3, [pc, #28]	; (5b50 <usb_d_ep_deinit+0x4c>)
    5b34:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5b36:	68bb      	ldr	r3, [r7, #8]
    5b38:	22ff      	movs	r2, #255	; 0xff
    5b3a:	705a      	strb	r2, [r3, #1]
    5b3c:	e000      	b.n	5b40 <usb_d_ep_deinit+0x3c>
		return;
    5b3e:	bf00      	nop
}
    5b40:	3710      	adds	r7, #16
    5b42:	46bd      	mov	sp, r7
    5b44:	bd80      	pop	{r7, pc}
    5b46:	bf00      	nop
    5b48:	00005581 	.word	0x00005581
    5b4c:	20002088 	.word	0x20002088
    5b50:	0000cc81 	.word	0x0000cc81

00005b54 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5b54:	b580      	push	{r7, lr}
    5b56:	b086      	sub	sp, #24
    5b58:	af00      	add	r7, sp, #0
    5b5a:	4603      	mov	r3, r0
    5b5c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5b5e:	79fb      	ldrb	r3, [r7, #7]
    5b60:	4618      	mov	r0, r3
    5b62:	4b15      	ldr	r3, [pc, #84]	; (5bb8 <usb_d_ep_enable+0x64>)
    5b64:	4798      	blx	r3
    5b66:	4603      	mov	r3, r0
    5b68:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5b6e:	015b      	lsls	r3, r3, #5
    5b70:	4a12      	ldr	r2, [pc, #72]	; (5bbc <usb_d_ep_enable+0x68>)
    5b72:	4413      	add	r3, r2
    5b74:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	da02      	bge.n	5b84 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    5b7e:	f06f 0311 	mvn.w	r3, #17
    5b82:	e014      	b.n	5bae <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5b84:	693b      	ldr	r3, [r7, #16]
    5b86:	781b      	ldrb	r3, [r3, #0]
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d101      	bne.n	5b90 <usb_d_ep_enable+0x3c>
    5b8c:	2202      	movs	r2, #2
    5b8e:	e000      	b.n	5b92 <usb_d_ep_enable+0x3e>
    5b90:	2201      	movs	r2, #1
    5b92:	693b      	ldr	r3, [r7, #16]
    5b94:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5b96:	79fb      	ldrb	r3, [r7, #7]
    5b98:	4618      	mov	r0, r3
    5b9a:	4b09      	ldr	r3, [pc, #36]	; (5bc0 <usb_d_ep_enable+0x6c>)
    5b9c:	4798      	blx	r3
    5b9e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5ba0:	68fb      	ldr	r3, [r7, #12]
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	da02      	bge.n	5bac <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5ba6:	693b      	ldr	r3, [r7, #16]
    5ba8:	2200      	movs	r2, #0
    5baa:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    5bac:	68fb      	ldr	r3, [r7, #12]
}
    5bae:	4618      	mov	r0, r3
    5bb0:	3718      	adds	r7, #24
    5bb2:	46bd      	mov	sp, r7
    5bb4:	bd80      	pop	{r7, pc}
    5bb6:	bf00      	nop
    5bb8:	00005581 	.word	0x00005581
    5bbc:	20002088 	.word	0x20002088
    5bc0:	0000cd65 	.word	0x0000cd65

00005bc4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5bc4:	b590      	push	{r4, r7, lr}
    5bc6:	b08d      	sub	sp, #52	; 0x34
    5bc8:	af02      	add	r7, sp, #8
    5bca:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5bcc:	687b      	ldr	r3, [r7, #4]
    5bce:	7a1b      	ldrb	r3, [r3, #8]
    5bd0:	4618      	mov	r0, r3
    5bd2:	4b51      	ldr	r3, [pc, #324]	; (5d18 <usb_d_ep_transfer+0x154>)
    5bd4:	4798      	blx	r3
    5bd6:	4603      	mov	r3, r0
    5bd8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    5bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5bde:	015b      	lsls	r3, r3, #5
    5be0:	4a4e      	ldr	r2, [pc, #312]	; (5d1c <usb_d_ep_transfer+0x158>)
    5be2:	4413      	add	r3, r2
    5be4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	7a1b      	ldrb	r3, [r3, #8]
    5bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5bee:	2b00      	cmp	r3, #0
    5bf0:	bf14      	ite	ne
    5bf2:	2301      	movne	r3, #1
    5bf4:	2300      	moveq	r3, #0
    5bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	7a5b      	ldrb	r3, [r3, #9]
    5bfe:	2b00      	cmp	r3, #0
    5c00:	bf14      	ite	ne
    5c02:	2301      	movne	r3, #1
    5c04:	2300      	moveq	r3, #0
    5c06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	685b      	ldr	r3, [r3, #4]
    5c0e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5c10:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5c14:	2b00      	cmp	r3, #0
    5c16:	da02      	bge.n	5c1e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    5c18:	f06f 0311 	mvn.w	r3, #17
    5c1c:	e077      	b.n	5d0e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    5c1e:	f107 0308 	add.w	r3, r7, #8
    5c22:	4618      	mov	r0, r3
    5c24:	4b3e      	ldr	r3, [pc, #248]	; (5d20 <usb_d_ep_transfer+0x15c>)
    5c26:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5c28:	69bb      	ldr	r3, [r7, #24]
    5c2a:	789b      	ldrb	r3, [r3, #2]
    5c2c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    5c2e:	7bfb      	ldrb	r3, [r7, #15]
    5c30:	b2db      	uxtb	r3, r3
    5c32:	2b01      	cmp	r3, #1
    5c34:	d10c      	bne.n	5c50 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    5c36:	69bb      	ldr	r3, [r7, #24]
    5c38:	2203      	movs	r2, #3
    5c3a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5c3c:	f107 0308 	add.w	r3, r7, #8
    5c40:	4618      	mov	r0, r3
    5c42:	4b38      	ldr	r3, [pc, #224]	; (5d24 <usb_d_ep_transfer+0x160>)
    5c44:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5c46:	69bb      	ldr	r3, [r7, #24]
    5c48:	781b      	ldrb	r3, [r3, #0]
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d151      	bne.n	5cf2 <usb_d_ep_transfer+0x12e>
    5c4e:	e017      	b.n	5c80 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    5c50:	f107 0308 	add.w	r3, r7, #8
    5c54:	4618      	mov	r0, r3
    5c56:	4b33      	ldr	r3, [pc, #204]	; (5d24 <usb_d_ep_transfer+0x160>)
    5c58:	4798      	blx	r3
		switch (state) {
    5c5a:	7bfb      	ldrb	r3, [r7, #15]
    5c5c:	b2db      	uxtb	r3, r3
    5c5e:	2b05      	cmp	r3, #5
    5c60:	d004      	beq.n	5c6c <usb_d_ep_transfer+0xa8>
    5c62:	2b06      	cmp	r3, #6
    5c64:	d004      	beq.n	5c70 <usb_d_ep_transfer+0xac>
    5c66:	2b00      	cmp	r3, #0
    5c68:	d005      	beq.n	5c76 <usb_d_ep_transfer+0xb2>
    5c6a:	e007      	b.n	5c7c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    5c6c:	2302      	movs	r3, #2
    5c6e:	e04e      	b.n	5d0e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    5c70:	f06f 030f 	mvn.w	r3, #15
    5c74:	e04b      	b.n	5d0e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    5c76:	f06f 0312 	mvn.w	r3, #18
    5c7a:	e048      	b.n	5d0e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    5c7c:	2301      	movs	r3, #1
    5c7e:	e046      	b.n	5d0e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5c80:	69bb      	ldr	r3, [r7, #24]
    5c82:	7c9b      	ldrb	r3, [r3, #18]
    5c84:	b29a      	uxth	r2, r3
    5c86:	69bb      	ldr	r3, [r7, #24]
    5c88:	7cdb      	ldrb	r3, [r3, #19]
    5c8a:	b29b      	uxth	r3, r3
    5c8c:	021b      	lsls	r3, r3, #8
    5c8e:	b29b      	uxth	r3, r3
    5c90:	4413      	add	r3, r2
    5c92:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    5c94:	8afb      	ldrh	r3, [r7, #22]
    5c96:	2b00      	cmp	r3, #0
    5c98:	d10b      	bne.n	5cb2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    5c9a:	2301      	movs	r3, #1
    5c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    5ca0:	2300      	movs	r3, #0
    5ca2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    5ca4:	2301      	movs	r3, #1
    5ca6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5caa:	69bb      	ldr	r3, [r7, #24]
    5cac:	2204      	movs	r2, #4
    5cae:	709a      	strb	r2, [r3, #2]
    5cb0:	e01f      	b.n	5cf2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5cb2:	69bb      	ldr	r3, [r7, #24]
    5cb4:	7b1b      	ldrb	r3, [r3, #12]
    5cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5cba:	2b00      	cmp	r3, #0
    5cbc:	bf14      	ite	ne
    5cbe:	2301      	movne	r3, #1
    5cc0:	2300      	moveq	r3, #0
    5cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    5cc6:	8afa      	ldrh	r2, [r7, #22]
    5cc8:	6a3b      	ldr	r3, [r7, #32]
    5cca:	429a      	cmp	r2, r3
    5ccc:	d201      	bcs.n	5cd2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    5cce:	8afb      	ldrh	r3, [r7, #22]
    5cd0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    5cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d008      	beq.n	5cec <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    5cda:	8afa      	ldrh	r2, [r7, #22]
    5cdc:	6a3b      	ldr	r3, [r7, #32]
    5cde:	429a      	cmp	r2, r3
    5ce0:	bf8c      	ite	hi
    5ce2:	2301      	movhi	r3, #1
    5ce4:	2300      	movls	r3, #0
    5ce6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    5cea:	e002      	b.n	5cf2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    5cec:	2300      	movs	r3, #0
    5cee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	7a18      	ldrb	r0, [r3, #8]
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	681a      	ldr	r2, [r3, #0]
    5cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    5cfe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    5d02:	9300      	str	r3, [sp, #0]
    5d04:	6a3b      	ldr	r3, [r7, #32]
    5d06:	4c08      	ldr	r4, [pc, #32]	; (5d28 <usb_d_ep_transfer+0x164>)
    5d08:	47a0      	blx	r4
    5d0a:	6138      	str	r0, [r7, #16]
	return rc;
    5d0c:	693b      	ldr	r3, [r7, #16]
}
    5d0e:	4618      	mov	r0, r3
    5d10:	372c      	adds	r7, #44	; 0x2c
    5d12:	46bd      	mov	sp, r7
    5d14:	bd90      	pop	{r4, r7, pc}
    5d16:	bf00      	nop
    5d18:	00005581 	.word	0x00005581
    5d1c:	20002088 	.word	0x20002088
    5d20:	00003ef1 	.word	0x00003ef1
    5d24:	00003f17 	.word	0x00003f17
    5d28:	00005601 	.word	0x00005601

00005d2c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b084      	sub	sp, #16
    5d30:	af00      	add	r7, sp, #0
    5d32:	4603      	mov	r3, r0
    5d34:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5d36:	79fb      	ldrb	r3, [r7, #7]
    5d38:	4618      	mov	r0, r3
    5d3a:	4b0e      	ldr	r3, [pc, #56]	; (5d74 <usb_d_ep_abort+0x48>)
    5d3c:	4798      	blx	r3
    5d3e:	4603      	mov	r3, r0
    5d40:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5d46:	015b      	lsls	r3, r3, #5
    5d48:	4a0b      	ldr	r2, [pc, #44]	; (5d78 <usb_d_ep_abort+0x4c>)
    5d4a:	4413      	add	r3, r2
    5d4c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5d52:	2b00      	cmp	r3, #0
    5d54:	db0a      	blt.n	5d6c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    5d56:	79fb      	ldrb	r3, [r7, #7]
    5d58:	4618      	mov	r0, r3
    5d5a:	4b08      	ldr	r3, [pc, #32]	; (5d7c <usb_d_ep_abort+0x50>)
    5d5c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5d5e:	68bb      	ldr	r3, [r7, #8]
    5d60:	2201      	movs	r2, #1
    5d62:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    5d64:	68bb      	ldr	r3, [r7, #8]
    5d66:	2204      	movs	r2, #4
    5d68:	70da      	strb	r2, [r3, #3]
    5d6a:	e000      	b.n	5d6e <usb_d_ep_abort+0x42>
		return;
    5d6c:	bf00      	nop
}
    5d6e:	3710      	adds	r7, #16
    5d70:	46bd      	mov	sp, r7
    5d72:	bd80      	pop	{r7, pc}
    5d74:	00005581 	.word	0x00005581
    5d78:	20002088 	.word	0x20002088
    5d7c:	0000d4d1 	.word	0x0000d4d1

00005d80 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    5d80:	b580      	push	{r7, lr}
    5d82:	b086      	sub	sp, #24
    5d84:	af00      	add	r7, sp, #0
    5d86:	4603      	mov	r3, r0
    5d88:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5d8a:	79fb      	ldrb	r3, [r7, #7]
    5d8c:	4618      	mov	r0, r3
    5d8e:	4b1a      	ldr	r3, [pc, #104]	; (5df8 <_usb_d_ep_halt_clr+0x78>)
    5d90:	4798      	blx	r3
    5d92:	4603      	mov	r3, r0
    5d94:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5d9a:	015b      	lsls	r3, r3, #5
    5d9c:	4a17      	ldr	r2, [pc, #92]	; (5dfc <_usb_d_ep_halt_clr+0x7c>)
    5d9e:	4413      	add	r3, r2
    5da0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5da6:	2b00      	cmp	r3, #0
    5da8:	da02      	bge.n	5db0 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    5daa:	f06f 0311 	mvn.w	r3, #17
    5dae:	e01f      	b.n	5df0 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5db0:	79fb      	ldrb	r3, [r7, #7]
    5db2:	2102      	movs	r1, #2
    5db4:	4618      	mov	r0, r3
    5db6:	4b12      	ldr	r3, [pc, #72]	; (5e00 <_usb_d_ep_halt_clr+0x80>)
    5db8:	4798      	blx	r3
    5dba:	4603      	mov	r3, r0
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	d016      	beq.n	5dee <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5dc0:	79fb      	ldrb	r3, [r7, #7]
    5dc2:	2100      	movs	r1, #0
    5dc4:	4618      	mov	r0, r3
    5dc6:	4b0e      	ldr	r3, [pc, #56]	; (5e00 <_usb_d_ep_halt_clr+0x80>)
    5dc8:	4798      	blx	r3
    5dca:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    5dcc:	68fb      	ldr	r3, [r7, #12]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	da01      	bge.n	5dd6 <_usb_d_ep_halt_clr+0x56>
			return rc;
    5dd2:	68fb      	ldr	r3, [r7, #12]
    5dd4:	e00c      	b.n	5df0 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5dd6:	693b      	ldr	r3, [r7, #16]
    5dd8:	2201      	movs	r2, #1
    5dda:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    5ddc:	693b      	ldr	r3, [r7, #16]
    5dde:	2203      	movs	r2, #3
    5de0:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5de2:	693b      	ldr	r3, [r7, #16]
    5de4:	69db      	ldr	r3, [r3, #28]
    5de6:	79f8      	ldrb	r0, [r7, #7]
    5de8:	2200      	movs	r2, #0
    5dea:	2103      	movs	r1, #3
    5dec:	4798      	blx	r3
	}
	return ERR_NONE;
    5dee:	2300      	movs	r3, #0
}
    5df0:	4618      	mov	r0, r3
    5df2:	3718      	adds	r7, #24
    5df4:	46bd      	mov	sp, r7
    5df6:	bd80      	pop	{r7, pc}
    5df8:	00005581 	.word	0x00005581
    5dfc:	20002088 	.word	0x20002088
    5e00:	0000d0dd 	.word	0x0000d0dd

00005e04 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5e04:	b580      	push	{r7, lr}
    5e06:	b082      	sub	sp, #8
    5e08:	af00      	add	r7, sp, #0
    5e0a:	4603      	mov	r3, r0
    5e0c:	460a      	mov	r2, r1
    5e0e:	71fb      	strb	r3, [r7, #7]
    5e10:	4613      	mov	r3, r2
    5e12:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    5e14:	79bb      	ldrb	r3, [r7, #6]
    5e16:	2b00      	cmp	r3, #0
    5e18:	d105      	bne.n	5e26 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    5e1a:	79fb      	ldrb	r3, [r7, #7]
    5e1c:	4618      	mov	r0, r3
    5e1e:	4b0c      	ldr	r3, [pc, #48]	; (5e50 <usb_d_ep_halt+0x4c>)
    5e20:	4798      	blx	r3
    5e22:	4603      	mov	r3, r0
    5e24:	e00f      	b.n	5e46 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    5e26:	79bb      	ldrb	r3, [r7, #6]
    5e28:	2b01      	cmp	r3, #1
    5e2a:	d106      	bne.n	5e3a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5e2c:	79fb      	ldrb	r3, [r7, #7]
    5e2e:	2101      	movs	r1, #1
    5e30:	4618      	mov	r0, r3
    5e32:	4b08      	ldr	r3, [pc, #32]	; (5e54 <usb_d_ep_halt+0x50>)
    5e34:	4798      	blx	r3
    5e36:	4603      	mov	r3, r0
    5e38:	e005      	b.n	5e46 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5e3a:	79fb      	ldrb	r3, [r7, #7]
    5e3c:	2102      	movs	r1, #2
    5e3e:	4618      	mov	r0, r3
    5e40:	4b04      	ldr	r3, [pc, #16]	; (5e54 <usb_d_ep_halt+0x50>)
    5e42:	4798      	blx	r3
    5e44:	4603      	mov	r3, r0
	}
}
    5e46:	4618      	mov	r0, r3
    5e48:	3708      	adds	r7, #8
    5e4a:	46bd      	mov	sp, r7
    5e4c:	bd80      	pop	{r7, pc}
    5e4e:	bf00      	nop
    5e50:	00005d81 	.word	0x00005d81
    5e54:	0000d0dd 	.word	0x0000d0dd

00005e58 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5e58:	b580      	push	{r7, lr}
    5e5a:	b086      	sub	sp, #24
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	4603      	mov	r3, r0
    5e60:	603a      	str	r2, [r7, #0]
    5e62:	71fb      	strb	r3, [r7, #7]
    5e64:	460b      	mov	r3, r1
    5e66:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5e68:	79fb      	ldrb	r3, [r7, #7]
    5e6a:	4618      	mov	r0, r3
    5e6c:	4b16      	ldr	r3, [pc, #88]	; (5ec8 <usb_d_ep_register_callback+0x70>)
    5e6e:	4798      	blx	r3
    5e70:	4603      	mov	r3, r0
    5e72:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e78:	015b      	lsls	r3, r3, #5
    5e7a:	4a14      	ldr	r2, [pc, #80]	; (5ecc <usb_d_ep_register_callback+0x74>)
    5e7c:	4413      	add	r3, r2
    5e7e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5e80:	683b      	ldr	r3, [r7, #0]
    5e82:	2b00      	cmp	r3, #0
    5e84:	d001      	beq.n	5e8a <usb_d_ep_register_callback+0x32>
    5e86:	683b      	ldr	r3, [r7, #0]
    5e88:	e000      	b.n	5e8c <usb_d_ep_register_callback+0x34>
    5e8a:	4b11      	ldr	r3, [pc, #68]	; (5ed0 <usb_d_ep_register_callback+0x78>)
    5e8c:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    5e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e92:	2b00      	cmp	r3, #0
    5e94:	db13      	blt.n	5ebe <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    5e96:	79bb      	ldrb	r3, [r7, #6]
    5e98:	2b01      	cmp	r3, #1
    5e9a:	d008      	beq.n	5eae <usb_d_ep_register_callback+0x56>
    5e9c:	2b02      	cmp	r3, #2
    5e9e:	d00a      	beq.n	5eb6 <usb_d_ep_register_callback+0x5e>
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d000      	beq.n	5ea6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    5ea4:	e00c      	b.n	5ec0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5ea6:	693b      	ldr	r3, [r7, #16]
    5ea8:	68fa      	ldr	r2, [r7, #12]
    5eaa:	615a      	str	r2, [r3, #20]
		break;
    5eac:	e008      	b.n	5ec0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5eae:	693b      	ldr	r3, [r7, #16]
    5eb0:	68fa      	ldr	r2, [r7, #12]
    5eb2:	619a      	str	r2, [r3, #24]
		break;
    5eb4:	e004      	b.n	5ec0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5eb6:	693b      	ldr	r3, [r7, #16]
    5eb8:	68fa      	ldr	r2, [r7, #12]
    5eba:	61da      	str	r2, [r3, #28]
		break;
    5ebc:	e000      	b.n	5ec0 <usb_d_ep_register_callback+0x68>
		return;
    5ebe:	bf00      	nop
	}
}
    5ec0:	3718      	adds	r7, #24
    5ec2:	46bd      	mov	sp, r7
    5ec4:	bd80      	pop	{r7, pc}
    5ec6:	bf00      	nop
    5ec8:	00005581 	.word	0x00005581
    5ecc:	20002088 	.word	0x20002088
    5ed0:	00005655 	.word	0x00005655

00005ed4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    5ed4:	b480      	push	{r7}
    5ed6:	b085      	sub	sp, #20
    5ed8:	af00      	add	r7, sp, #0
    5eda:	4603      	mov	r3, r0
    5edc:	60b9      	str	r1, [r7, #8]
    5ede:	607a      	str	r2, [r7, #4]
    5ee0:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    5ee2:	7bfb      	ldrb	r3, [r7, #15]
    5ee4:	f083 0301 	eor.w	r3, r3, #1
    5ee8:	b2db      	uxtb	r3, r3
    5eea:	2b00      	cmp	r3, #0
    5eec:	d000      	beq.n	5ef0 <assert+0x1c>
		__asm("BKPT #0");
    5eee:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    5ef0:	bf00      	nop
    5ef2:	3714      	adds	r7, #20
    5ef4:	46bd      	mov	sp, r7
    5ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efa:	4770      	bx	lr

00005efc <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    5efc:	b480      	push	{r7}
    5efe:	b085      	sub	sp, #20
    5f00:	af00      	add	r7, sp, #0
    5f02:	6078      	str	r0, [r7, #4]
    5f04:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	681b      	ldr	r3, [r3, #0]
    5f0a:	60fb      	str	r3, [r7, #12]
    5f0c:	e008      	b.n	5f20 <is_list_element+0x24>
		if (it == element) {
    5f0e:	68fa      	ldr	r2, [r7, #12]
    5f10:	683b      	ldr	r3, [r7, #0]
    5f12:	429a      	cmp	r2, r3
    5f14:	d101      	bne.n	5f1a <is_list_element+0x1e>
			return true;
    5f16:	2301      	movs	r3, #1
    5f18:	e006      	b.n	5f28 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    5f1a:	68fb      	ldr	r3, [r7, #12]
    5f1c:	681b      	ldr	r3, [r3, #0]
    5f1e:	60fb      	str	r3, [r7, #12]
    5f20:	68fb      	ldr	r3, [r7, #12]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d1f3      	bne.n	5f0e <is_list_element+0x12>
		}
	}

	return false;
    5f26:	2300      	movs	r3, #0
}
    5f28:	4618      	mov	r0, r3
    5f2a:	3714      	adds	r7, #20
    5f2c:	46bd      	mov	sp, r7
    5f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f32:	4770      	bx	lr

00005f34 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5f34:	b580      	push	{r7, lr}
    5f36:	b082      	sub	sp, #8
    5f38:	af00      	add	r7, sp, #0
    5f3a:	6078      	str	r0, [r7, #4]
    5f3c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    5f3e:	6839      	ldr	r1, [r7, #0]
    5f40:	6878      	ldr	r0, [r7, #4]
    5f42:	4b0f      	ldr	r3, [pc, #60]	; (5f80 <list_insert_as_head+0x4c>)
    5f44:	4798      	blx	r3
    5f46:	4603      	mov	r3, r0
    5f48:	2b00      	cmp	r3, #0
    5f4a:	bf14      	ite	ne
    5f4c:	2301      	movne	r3, #1
    5f4e:	2300      	moveq	r3, #0
    5f50:	b2db      	uxtb	r3, r3
    5f52:	f083 0301 	eor.w	r3, r3, #1
    5f56:	b2db      	uxtb	r3, r3
    5f58:	f003 0301 	and.w	r3, r3, #1
    5f5c:	b2db      	uxtb	r3, r3
    5f5e:	2239      	movs	r2, #57	; 0x39
    5f60:	4908      	ldr	r1, [pc, #32]	; (5f84 <list_insert_as_head+0x50>)
    5f62:	4618      	mov	r0, r3
    5f64:	4b08      	ldr	r3, [pc, #32]	; (5f88 <list_insert_as_head+0x54>)
    5f66:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    5f68:	687b      	ldr	r3, [r7, #4]
    5f6a:	681a      	ldr	r2, [r3, #0]
    5f6c:	683b      	ldr	r3, [r7, #0]
    5f6e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	683a      	ldr	r2, [r7, #0]
    5f74:	601a      	str	r2, [r3, #0]
}
    5f76:	bf00      	nop
    5f78:	3708      	adds	r7, #8
    5f7a:	46bd      	mov	sp, r7
    5f7c:	bd80      	pop	{r7, pc}
    5f7e:	bf00      	nop
    5f80:	00005efd 	.word	0x00005efd
    5f84:	000129f4 	.word	0x000129f4
    5f88:	00005ed5 	.word	0x00005ed5

00005f8c <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    5f8c:	b480      	push	{r7}
    5f8e:	b083      	sub	sp, #12
    5f90:	af00      	add	r7, sp, #0
    5f92:	6078      	str	r0, [r7, #4]
    5f94:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	681a      	ldr	r2, [r3, #0]
    5f9a:	683b      	ldr	r3, [r7, #0]
    5f9c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    5f9e:	687b      	ldr	r3, [r7, #4]
    5fa0:	683a      	ldr	r2, [r7, #0]
    5fa2:	601a      	str	r2, [r3, #0]
}
    5fa4:	bf00      	nop
    5fa6:	370c      	adds	r7, #12
    5fa8:	46bd      	mov	sp, r7
    5faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fae:	4770      	bx	lr

00005fb0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5fb0:	b580      	push	{r7, lr}
    5fb2:	b084      	sub	sp, #16
    5fb4:	af00      	add	r7, sp, #0
    5fb6:	6078      	str	r0, [r7, #4]
    5fb8:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	681b      	ldr	r3, [r3, #0]
    5fbe:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    5fc0:	6839      	ldr	r1, [r7, #0]
    5fc2:	6878      	ldr	r0, [r7, #4]
    5fc4:	4b16      	ldr	r3, [pc, #88]	; (6020 <list_insert_at_end+0x70>)
    5fc6:	4798      	blx	r3
    5fc8:	4603      	mov	r3, r0
    5fca:	2b00      	cmp	r3, #0
    5fcc:	bf14      	ite	ne
    5fce:	2301      	movne	r3, #1
    5fd0:	2300      	moveq	r3, #0
    5fd2:	b2db      	uxtb	r3, r3
    5fd4:	f083 0301 	eor.w	r3, r3, #1
    5fd8:	b2db      	uxtb	r3, r3
    5fda:	f003 0301 	and.w	r3, r3, #1
    5fde:	b2db      	uxtb	r3, r3
    5fe0:	224f      	movs	r2, #79	; 0x4f
    5fe2:	4910      	ldr	r1, [pc, #64]	; (6024 <list_insert_at_end+0x74>)
    5fe4:	4618      	mov	r0, r3
    5fe6:	4b10      	ldr	r3, [pc, #64]	; (6028 <list_insert_at_end+0x78>)
    5fe8:	4798      	blx	r3

	if (!list->head) {
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	681b      	ldr	r3, [r3, #0]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d109      	bne.n	6006 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	683a      	ldr	r2, [r7, #0]
    5ff6:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    5ff8:	683b      	ldr	r3, [r7, #0]
    5ffa:	2200      	movs	r2, #0
    5ffc:	601a      	str	r2, [r3, #0]
		return;
    5ffe:	e00c      	b.n	601a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    6000:	68fb      	ldr	r3, [r7, #12]
    6002:	681b      	ldr	r3, [r3, #0]
    6004:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    6006:	68fb      	ldr	r3, [r7, #12]
    6008:	681b      	ldr	r3, [r3, #0]
    600a:	2b00      	cmp	r3, #0
    600c:	d1f8      	bne.n	6000 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    600e:	68fb      	ldr	r3, [r7, #12]
    6010:	683a      	ldr	r2, [r7, #0]
    6012:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    6014:	683b      	ldr	r3, [r7, #0]
    6016:	2200      	movs	r2, #0
    6018:	601a      	str	r2, [r3, #0]
}
    601a:	3710      	adds	r7, #16
    601c:	46bd      	mov	sp, r7
    601e:	bd80      	pop	{r7, pc}
    6020:	00005efd 	.word	0x00005efd
    6024:	000129f4 	.word	0x000129f4
    6028:	00005ed5 	.word	0x00005ed5

0000602c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    602c:	b480      	push	{r7}
    602e:	b085      	sub	sp, #20
    6030:	af00      	add	r7, sp, #0
    6032:	6078      	str	r0, [r7, #4]
	if (list->head) {
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	681b      	ldr	r3, [r3, #0]
    6038:	2b00      	cmp	r3, #0
    603a:	d009      	beq.n	6050 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	681b      	ldr	r3, [r3, #0]
    6040:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    6042:	687b      	ldr	r3, [r7, #4]
    6044:	681b      	ldr	r3, [r3, #0]
    6046:	681a      	ldr	r2, [r3, #0]
    6048:	687b      	ldr	r3, [r7, #4]
    604a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    604c:	68fb      	ldr	r3, [r7, #12]
    604e:	e000      	b.n	6052 <list_remove_head+0x26>
	}

	return NULL;
    6050:	2300      	movs	r3, #0
}
    6052:	4618      	mov	r0, r3
    6054:	3714      	adds	r7, #20
    6056:	46bd      	mov	sp, r7
    6058:	f85d 7b04 	ldr.w	r7, [sp], #4
    605c:	4770      	bx	lr

0000605e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    605e:	b480      	push	{r7}
    6060:	b085      	sub	sp, #20
    6062:	af00      	add	r7, sp, #0
    6064:	6078      	str	r0, [r7, #4]
    6066:	6039      	str	r1, [r7, #0]
	if (!element) {
    6068:	683b      	ldr	r3, [r7, #0]
    606a:	2b00      	cmp	r3, #0
    606c:	d101      	bne.n	6072 <list_delete_element+0x14>
		return false;
    606e:	2300      	movs	r3, #0
    6070:	e024      	b.n	60bc <list_delete_element+0x5e>
	}

	if (list->head == element) {
    6072:	687b      	ldr	r3, [r7, #4]
    6074:	681a      	ldr	r2, [r3, #0]
    6076:	683b      	ldr	r3, [r7, #0]
    6078:	429a      	cmp	r2, r3
    607a:	d106      	bne.n	608a <list_delete_element+0x2c>
		list->head = list->head->next;
    607c:	687b      	ldr	r3, [r7, #4]
    607e:	681b      	ldr	r3, [r3, #0]
    6080:	681a      	ldr	r2, [r3, #0]
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	601a      	str	r2, [r3, #0]
		return true;
    6086:	2301      	movs	r3, #1
    6088:	e018      	b.n	60bc <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    608a:	687b      	ldr	r3, [r7, #4]
    608c:	681b      	ldr	r3, [r3, #0]
    608e:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    6090:	e002      	b.n	6098 <list_delete_element+0x3a>
			it = it->next;
    6092:	68fb      	ldr	r3, [r7, #12]
    6094:	681b      	ldr	r3, [r3, #0]
    6096:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    6098:	68fb      	ldr	r3, [r7, #12]
    609a:	2b00      	cmp	r3, #0
    609c:	d004      	beq.n	60a8 <list_delete_element+0x4a>
    609e:	68fb      	ldr	r3, [r7, #12]
    60a0:	681a      	ldr	r2, [r3, #0]
    60a2:	683b      	ldr	r3, [r7, #0]
    60a4:	429a      	cmp	r2, r3
    60a6:	d1f4      	bne.n	6092 <list_delete_element+0x34>
		}
		if (it) {
    60a8:	68fb      	ldr	r3, [r7, #12]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d005      	beq.n	60ba <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    60ae:	683b      	ldr	r3, [r7, #0]
    60b0:	681a      	ldr	r2, [r3, #0]
    60b2:	68fb      	ldr	r3, [r7, #12]
    60b4:	601a      	str	r2, [r3, #0]
			return true;
    60b6:	2301      	movs	r3, #1
    60b8:	e000      	b.n	60bc <list_delete_element+0x5e>
		}
	}

	return false;
    60ba:	2300      	movs	r3, #0
}
    60bc:	4618      	mov	r0, r3
    60be:	3714      	adds	r7, #20
    60c0:	46bd      	mov	sp, r7
    60c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60c6:	4770      	bx	lr

000060c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    60c8:	b480      	push	{r7}
    60ca:	b083      	sub	sp, #12
    60cc:	af00      	add	r7, sp, #0
    60ce:	4603      	mov	r3, r0
    60d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    60d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    60d6:	2b00      	cmp	r3, #0
    60d8:	db0b      	blt.n	60f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60da:	4909      	ldr	r1, [pc, #36]	; (6100 <__NVIC_EnableIRQ+0x38>)
    60dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    60e0:	095b      	lsrs	r3, r3, #5
    60e2:	88fa      	ldrh	r2, [r7, #6]
    60e4:	f002 021f 	and.w	r2, r2, #31
    60e8:	2001      	movs	r0, #1
    60ea:	fa00 f202 	lsl.w	r2, r0, r2
    60ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    60f2:	bf00      	nop
    60f4:	370c      	adds	r7, #12
    60f6:	46bd      	mov	sp, r7
    60f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    60fc:	4770      	bx	lr
    60fe:	bf00      	nop
    6100:	e000e100 	.word	0xe000e100

00006104 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    6104:	b480      	push	{r7}
    6106:	b083      	sub	sp, #12
    6108:	af00      	add	r7, sp, #0
    610a:	4603      	mov	r3, r0
    610c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    610e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6112:	2b00      	cmp	r3, #0
    6114:	db10      	blt.n	6138 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6116:	490b      	ldr	r1, [pc, #44]	; (6144 <__NVIC_DisableIRQ+0x40>)
    6118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    611c:	095b      	lsrs	r3, r3, #5
    611e:	88fa      	ldrh	r2, [r7, #6]
    6120:	f002 021f 	and.w	r2, r2, #31
    6124:	2001      	movs	r0, #1
    6126:	fa00 f202 	lsl.w	r2, r0, r2
    612a:	3320      	adds	r3, #32
    612c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6130:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6134:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    6138:	bf00      	nop
    613a:	370c      	adds	r7, #12
    613c:	46bd      	mov	sp, r7
    613e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6142:	4770      	bx	lr
    6144:	e000e100 	.word	0xe000e100

00006148 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    6148:	b480      	push	{r7}
    614a:	b083      	sub	sp, #12
    614c:	af00      	add	r7, sp, #0
    614e:	4603      	mov	r3, r0
    6150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6156:	2b00      	cmp	r3, #0
    6158:	db0c      	blt.n	6174 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    615a:	4909      	ldr	r1, [pc, #36]	; (6180 <__NVIC_ClearPendingIRQ+0x38>)
    615c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6160:	095b      	lsrs	r3, r3, #5
    6162:	88fa      	ldrh	r2, [r7, #6]
    6164:	f002 021f 	and.w	r2, r2, #31
    6168:	2001      	movs	r0, #1
    616a:	fa00 f202 	lsl.w	r2, r0, r2
    616e:	3360      	adds	r3, #96	; 0x60
    6170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6174:	bf00      	nop
    6176:	370c      	adds	r7, #12
    6178:	46bd      	mov	sp, r7
    617a:	f85d 7b04 	ldr.w	r7, [sp], #4
    617e:	4770      	bx	lr
    6180:	e000e100 	.word	0xe000e100

00006184 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    6184:	b480      	push	{r7}
    6186:	b083      	sub	sp, #12
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    618c:	687b      	ldr	r3, [r7, #4]
    618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6190:	095b      	lsrs	r3, r3, #5
    6192:	f003 0301 	and.w	r3, r3, #1
    6196:	2b00      	cmp	r3, #0
    6198:	bf14      	ite	ne
    619a:	2301      	movne	r3, #1
    619c:	2300      	moveq	r3, #0
    619e:	b2db      	uxtb	r3, r3
}
    61a0:	4618      	mov	r0, r3
    61a2:	370c      	adds	r7, #12
    61a4:	46bd      	mov	sp, r7
    61a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    61aa:	4770      	bx	lr

000061ac <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    61ac:	b480      	push	{r7}
    61ae:	b083      	sub	sp, #12
    61b0:	af00      	add	r7, sp, #0
    61b2:	6078      	str	r0, [r7, #4]
    61b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	683a      	ldr	r2, [r7, #0]
    61ba:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    61bc:	bf00      	nop
    61be:	370c      	adds	r7, #12
    61c0:	46bd      	mov	sp, r7
    61c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    61c6:	4770      	bx	lr

000061c8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    61c8:	b480      	push	{r7}
    61ca:	b083      	sub	sp, #12
    61cc:	af00      	add	r7, sp, #0
    61ce:	6078      	str	r0, [r7, #4]
    61d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    61d2:	687b      	ldr	r3, [r7, #4]
    61d4:	683a      	ldr	r2, [r7, #0]
    61d6:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    61d8:	bf00      	nop
    61da:	370c      	adds	r7, #12
    61dc:	46bd      	mov	sp, r7
    61de:	f85d 7b04 	ldr.w	r7, [sp], #4
    61e2:	4770      	bx	lr

000061e4 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    61e4:	b480      	push	{r7}
    61e6:	b083      	sub	sp, #12
    61e8:	af00      	add	r7, sp, #0
    61ea:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    61ec:	687b      	ldr	r3, [r7, #4]
    61ee:	699b      	ldr	r3, [r3, #24]
    61f0:	f043 0201 	orr.w	r2, r3, #1
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    61f8:	bf00      	nop
    61fa:	370c      	adds	r7, #12
    61fc:	46bd      	mov	sp, r7
    61fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6202:	4770      	bx	lr

00006204 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    6204:	b480      	push	{r7}
    6206:	b085      	sub	sp, #20
    6208:	af00      	add	r7, sp, #0
    620a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	699b      	ldr	r3, [r3, #24]
    6210:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    6212:	68fb      	ldr	r3, [r7, #12]
    6214:	f003 0301 	and.w	r3, r3, #1
    6218:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    621a:	68fb      	ldr	r3, [r7, #12]
    621c:	2b00      	cmp	r3, #0
    621e:	bf14      	ite	ne
    6220:	2301      	movne	r3, #1
    6222:	2300      	moveq	r3, #0
    6224:	b2db      	uxtb	r3, r3
}
    6226:	4618      	mov	r0, r3
    6228:	3714      	adds	r7, #20
    622a:	46bd      	mov	sp, r7
    622c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6230:	4770      	bx	lr

00006232 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    6232:	b480      	push	{r7}
    6234:	b083      	sub	sp, #12
    6236:	af00      	add	r7, sp, #0
    6238:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    623a:	687b      	ldr	r3, [r7, #4]
    623c:	699b      	ldr	r3, [r3, #24]
    623e:	f023 0201 	bic.w	r2, r3, #1
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6246:	bf00      	nop
    6248:	370c      	adds	r7, #12
    624a:	46bd      	mov	sp, r7
    624c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6250:	4770      	bx	lr

00006252 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    6252:	b480      	push	{r7}
    6254:	b083      	sub	sp, #12
    6256:	af00      	add	r7, sp, #0
    6258:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    625a:	687b      	ldr	r3, [r7, #4]
    625c:	699b      	ldr	r3, [r3, #24]
    625e:	f043 0202 	orr.w	r2, r3, #2
    6262:	687b      	ldr	r3, [r7, #4]
    6264:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6266:	bf00      	nop
    6268:	370c      	adds	r7, #12
    626a:	46bd      	mov	sp, r7
    626c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6270:	4770      	bx	lr

00006272 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    6272:	b480      	push	{r7}
    6274:	b083      	sub	sp, #12
    6276:	af00      	add	r7, sp, #0
    6278:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	699b      	ldr	r3, [r3, #24]
    627e:	f023 0202 	bic.w	r2, r3, #2
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6286:	bf00      	nop
    6288:	370c      	adds	r7, #12
    628a:	46bd      	mov	sp, r7
    628c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6290:	4770      	bx	lr

00006292 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    6292:	b480      	push	{r7}
    6294:	b083      	sub	sp, #12
    6296:	af00      	add	r7, sp, #0
    6298:	6078      	str	r0, [r7, #4]
    629a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	699a      	ldr	r2, [r3, #24]
    62a0:	683b      	ldr	r3, [r7, #0]
    62a2:	431a      	orrs	r2, r3
    62a4:	687b      	ldr	r3, [r7, #4]
    62a6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    62a8:	bf00      	nop
    62aa:	370c      	adds	r7, #12
    62ac:	46bd      	mov	sp, r7
    62ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    62b2:	4770      	bx	lr

000062b4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    62b4:	b480      	push	{r7}
    62b6:	b083      	sub	sp, #12
    62b8:	af00      	add	r7, sp, #0
    62ba:	6078      	str	r0, [r7, #4]
    62bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    62be:	687b      	ldr	r3, [r7, #4]
    62c0:	683a      	ldr	r2, [r7, #0]
    62c2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    62c4:	bf00      	nop
    62c6:	370c      	adds	r7, #12
    62c8:	46bd      	mov	sp, r7
    62ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ce:	4770      	bx	lr

000062d0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    62d0:	b480      	push	{r7}
    62d2:	b083      	sub	sp, #12
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
    62d8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    62da:	687b      	ldr	r3, [r7, #4]
    62dc:	683a      	ldr	r2, [r7, #0]
    62de:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    62e0:	bf00      	nop
    62e2:	370c      	adds	r7, #12
    62e4:	46bd      	mov	sp, r7
    62e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ea:	4770      	bx	lr

000062ec <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    62ec:	b480      	push	{r7}
    62ee:	b083      	sub	sp, #12
    62f0:	af00      	add	r7, sp, #0
    62f2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    62f8:	4618      	mov	r0, r3
    62fa:	370c      	adds	r7, #12
    62fc:	46bd      	mov	sp, r7
    62fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6302:	4770      	bx	lr

00006304 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    6304:	b480      	push	{r7}
    6306:	b083      	sub	sp, #12
    6308:	af00      	add	r7, sp, #0
    630a:	6078      	str	r0, [r7, #4]
    630c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    630e:	687b      	ldr	r3, [r7, #4]
    6310:	683a      	ldr	r2, [r7, #0]
    6312:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    6314:	bf00      	nop
    6316:	370c      	adds	r7, #12
    6318:	46bd      	mov	sp, r7
    631a:	f85d 7b04 	ldr.w	r7, [sp], #4
    631e:	4770      	bx	lr

00006320 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    6320:	b480      	push	{r7}
    6322:	b083      	sub	sp, #12
    6324:	af00      	add	r7, sp, #0
    6326:	6078      	str	r0, [r7, #4]
    6328:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	683a      	ldr	r2, [r7, #0]
    632e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    6332:	bf00      	nop
    6334:	370c      	adds	r7, #12
    6336:	46bd      	mov	sp, r7
    6338:	f85d 7b04 	ldr.w	r7, [sp], #4
    633c:	4770      	bx	lr

0000633e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    633e:	b480      	push	{r7}
    6340:	b083      	sub	sp, #12
    6342:	af00      	add	r7, sp, #0
    6344:	6078      	str	r0, [r7, #4]
    6346:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    6348:	687b      	ldr	r3, [r7, #4]
    634a:	683a      	ldr	r2, [r7, #0]
    634c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    6350:	bf00      	nop
    6352:	370c      	adds	r7, #12
    6354:	46bd      	mov	sp, r7
    6356:	f85d 7b04 	ldr.w	r7, [sp], #4
    635a:	4770      	bx	lr

0000635c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    635c:	b480      	push	{r7}
    635e:	b083      	sub	sp, #12
    6360:	af00      	add	r7, sp, #0
    6362:	6078      	str	r0, [r7, #4]
    6364:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	683a      	ldr	r2, [r7, #0]
    636a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    636e:	bf00      	nop
    6370:	370c      	adds	r7, #12
    6372:	46bd      	mov	sp, r7
    6374:	f85d 7b04 	ldr.w	r7, [sp], #4
    6378:	4770      	bx	lr

0000637a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    637a:	b480      	push	{r7}
    637c:	b083      	sub	sp, #12
    637e:	af00      	add	r7, sp, #0
    6380:	6078      	str	r0, [r7, #4]
    6382:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    6384:	687b      	ldr	r3, [r7, #4]
    6386:	683a      	ldr	r2, [r7, #0]
    6388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    638c:	bf00      	nop
    638e:	370c      	adds	r7, #12
    6390:	46bd      	mov	sp, r7
    6392:	f85d 7b04 	ldr.w	r7, [sp], #4
    6396:	4770      	bx	lr

00006398 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    6398:	b480      	push	{r7}
    639a:	b083      	sub	sp, #12
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
    63a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	683a      	ldr	r2, [r7, #0]
    63a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    63aa:	bf00      	nop
    63ac:	370c      	adds	r7, #12
    63ae:	46bd      	mov	sp, r7
    63b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b4:	4770      	bx	lr

000063b6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    63b6:	b480      	push	{r7}
    63b8:	b083      	sub	sp, #12
    63ba:	af00      	add	r7, sp, #0
    63bc:	6078      	str	r0, [r7, #4]
    63be:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	683a      	ldr	r2, [r7, #0]
    63c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    63c8:	bf00      	nop
    63ca:	370c      	adds	r7, #12
    63cc:	46bd      	mov	sp, r7
    63ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    63d2:	4770      	bx	lr

000063d4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    63d4:	b480      	push	{r7}
    63d6:	b083      	sub	sp, #12
    63d8:	af00      	add	r7, sp, #0
    63da:	6078      	str	r0, [r7, #4]
    63dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    63de:	687b      	ldr	r3, [r7, #4]
    63e0:	683a      	ldr	r2, [r7, #0]
    63e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    63e6:	bf00      	nop
    63e8:	370c      	adds	r7, #12
    63ea:	46bd      	mov	sp, r7
    63ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    63f0:	4770      	bx	lr

000063f2 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    63f2:	b480      	push	{r7}
    63f4:	b083      	sub	sp, #12
    63f6:	af00      	add	r7, sp, #0
    63f8:	6078      	str	r0, [r7, #4]
    63fa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    63fc:	687b      	ldr	r3, [r7, #4]
    63fe:	683a      	ldr	r2, [r7, #0]
    6400:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    6404:	bf00      	nop
    6406:	370c      	adds	r7, #12
    6408:	46bd      	mov	sp, r7
    640a:	f85d 7b04 	ldr.w	r7, [sp], #4
    640e:	4770      	bx	lr

00006410 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    6410:	b480      	push	{r7}
    6412:	b083      	sub	sp, #12
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
    6418:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	683a      	ldr	r2, [r7, #0]
    641e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6422:	bf00      	nop
    6424:	370c      	adds	r7, #12
    6426:	46bd      	mov	sp, r7
    6428:	f85d 7b04 	ldr.w	r7, [sp], #4
    642c:	4770      	bx	lr
	...

00006430 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    6430:	b580      	push	{r7, lr}
    6432:	b082      	sub	sp, #8
    6434:	af00      	add	r7, sp, #0
    6436:	6078      	str	r0, [r7, #4]
    6438:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    643a:	687b      	ldr	r3, [r7, #4]
    643c:	683a      	ldr	r2, [r7, #0]
    643e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	4618      	mov	r0, r3
    6446:	4b55      	ldr	r3, [pc, #340]	; (659c <_can_async_init+0x16c>)
    6448:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    644a:	bf00      	nop
    644c:	687b      	ldr	r3, [r7, #4]
    644e:	681b      	ldr	r3, [r3, #0]
    6450:	4618      	mov	r0, r3
    6452:	4b53      	ldr	r3, [pc, #332]	; (65a0 <_can_async_init+0x170>)
    6454:	4798      	blx	r3
    6456:	4603      	mov	r3, r0
    6458:	f083 0301 	eor.w	r3, r3, #1
    645c:	b2db      	uxtb	r3, r3
    645e:	2b00      	cmp	r3, #0
    6460:	d1f4      	bne.n	644c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    6462:	687b      	ldr	r3, [r7, #4]
    6464:	681b      	ldr	r3, [r3, #0]
    6466:	4618      	mov	r0, r3
    6468:	4b4e      	ldr	r3, [pc, #312]	; (65a4 <_can_async_init+0x174>)
    646a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    646c:	683b      	ldr	r3, [r7, #0]
    646e:	4a4e      	ldr	r2, [pc, #312]	; (65a8 <_can_async_init+0x178>)
    6470:	4293      	cmp	r3, r2
    6472:	d17a      	bne.n	656a <_can_async_init+0x13a>
		_can1_dev    = dev;
    6474:	4a4d      	ldr	r2, [pc, #308]	; (65ac <_can_async_init+0x17c>)
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    647a:	687b      	ldr	r3, [r7, #4]
    647c:	4a4c      	ldr	r2, [pc, #304]	; (65b0 <_can_async_init+0x180>)
    647e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    6480:	687b      	ldr	r3, [r7, #4]
    6482:	681b      	ldr	r3, [r3, #0]
    6484:	f44f 7140 	mov.w	r1, #768	; 0x300
    6488:	4618      	mov	r0, r3
    648a:	4b4a      	ldr	r3, [pc, #296]	; (65b4 <_can_async_init+0x184>)
    648c:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	681b      	ldr	r3, [r3, #0]
    6492:	2102      	movs	r1, #2
    6494:	4618      	mov	r0, r3
    6496:	4b48      	ldr	r3, [pc, #288]	; (65b8 <_can_async_init+0x188>)
    6498:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	681b      	ldr	r3, [r3, #0]
    649e:	4947      	ldr	r1, [pc, #284]	; (65bc <_can_async_init+0x18c>)
    64a0:	4618      	mov	r0, r3
    64a2:	4b47      	ldr	r3, [pc, #284]	; (65c0 <_can_async_init+0x190>)
    64a4:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	681b      	ldr	r3, [r3, #0]
    64aa:	4946      	ldr	r1, [pc, #280]	; (65c4 <_can_async_init+0x194>)
    64ac:	4618      	mov	r0, r3
    64ae:	4b46      	ldr	r3, [pc, #280]	; (65c8 <_can_async_init+0x198>)
    64b0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	681a      	ldr	r2, [r3, #0]
    64b6:	4b45      	ldr	r3, [pc, #276]	; (65cc <_can_async_init+0x19c>)
    64b8:	b29b      	uxth	r3, r3
    64ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    64be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    64c2:	4619      	mov	r1, r3
    64c4:	4610      	mov	r0, r2
    64c6:	4b42      	ldr	r3, [pc, #264]	; (65d0 <_can_async_init+0x1a0>)
    64c8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	681b      	ldr	r3, [r3, #0]
    64ce:	2107      	movs	r1, #7
    64d0:	4618      	mov	r0, r3
    64d2:	4b40      	ldr	r3, [pc, #256]	; (65d4 <_can_async_init+0x1a4>)
    64d4:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    64d6:	687b      	ldr	r3, [r7, #4]
    64d8:	681b      	ldr	r3, [r3, #0]
    64da:	2107      	movs	r1, #7
    64dc:	4618      	mov	r0, r3
    64de:	4b3e      	ldr	r3, [pc, #248]	; (65d8 <_can_async_init+0x1a8>)
    64e0:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	681a      	ldr	r2, [r3, #0]
    64e6:	4b3d      	ldr	r3, [pc, #244]	; (65dc <_can_async_init+0x1ac>)
    64e8:	b29b      	uxth	r3, r3
    64ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    64ee:	4619      	mov	r1, r3
    64f0:	4610      	mov	r0, r2
    64f2:	4b3b      	ldr	r3, [pc, #236]	; (65e0 <_can_async_init+0x1b0>)
    64f4:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    64f6:	687b      	ldr	r3, [r7, #4]
    64f8:	681a      	ldr	r2, [r3, #0]
    64fa:	4b3a      	ldr	r3, [pc, #232]	; (65e4 <_can_async_init+0x1b4>)
    64fc:	b29b      	uxth	r3, r3
    64fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6502:	4619      	mov	r1, r3
    6504:	4610      	mov	r0, r2
    6506:	4b38      	ldr	r3, [pc, #224]	; (65e8 <_can_async_init+0x1b8>)
    6508:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	681b      	ldr	r3, [r3, #0]
    650e:	2108      	movs	r1, #8
    6510:	4618      	mov	r0, r3
    6512:	4b36      	ldr	r3, [pc, #216]	; (65ec <_can_async_init+0x1bc>)
    6514:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    6516:	687b      	ldr	r3, [r7, #4]
    6518:	681a      	ldr	r2, [r3, #0]
    651a:	4b35      	ldr	r3, [pc, #212]	; (65f0 <_can_async_init+0x1c0>)
    651c:	b29b      	uxth	r3, r3
    651e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    6522:	4619      	mov	r1, r3
    6524:	4610      	mov	r0, r2
    6526:	4b33      	ldr	r3, [pc, #204]	; (65f4 <_can_async_init+0x1c4>)
    6528:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	681a      	ldr	r2, [r3, #0]
    652e:	4b32      	ldr	r3, [pc, #200]	; (65f8 <_can_async_init+0x1c8>)
    6530:	b29b      	uxth	r3, r3
    6532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6536:	4619      	mov	r1, r3
    6538:	4610      	mov	r0, r2
    653a:	4b30      	ldr	r3, [pc, #192]	; (65fc <_can_async_init+0x1cc>)
    653c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	681b      	ldr	r3, [r3, #0]
    6542:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    6546:	4618      	mov	r0, r3
    6548:	4b2d      	ldr	r3, [pc, #180]	; (6600 <_can_async_init+0x1d0>)
    654a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    654c:	204f      	movs	r0, #79	; 0x4f
    654e:	4b2d      	ldr	r3, [pc, #180]	; (6604 <_can_async_init+0x1d4>)
    6550:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    6552:	204f      	movs	r0, #79	; 0x4f
    6554:	4b2c      	ldr	r3, [pc, #176]	; (6608 <_can_async_init+0x1d8>)
    6556:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    6558:	204f      	movs	r0, #79	; 0x4f
    655a:	4b2c      	ldr	r3, [pc, #176]	; (660c <_can_async_init+0x1dc>)
    655c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    655e:	687b      	ldr	r3, [r7, #4]
    6560:	681b      	ldr	r3, [r3, #0]
    6562:	2101      	movs	r1, #1
    6564:	4618      	mov	r0, r3
    6566:	4b2a      	ldr	r3, [pc, #168]	; (6610 <_can_async_init+0x1e0>)
    6568:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	681b      	ldr	r3, [r3, #0]
    656e:	4618      	mov	r0, r3
    6570:	4b28      	ldr	r3, [pc, #160]	; (6614 <_can_async_init+0x1e4>)
    6572:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    6574:	687b      	ldr	r3, [r7, #4]
    6576:	681b      	ldr	r3, [r3, #0]
    6578:	4618      	mov	r0, r3
    657a:	4b27      	ldr	r3, [pc, #156]	; (6618 <_can_async_init+0x1e8>)
    657c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    657e:	bf00      	nop
    6580:	687b      	ldr	r3, [r7, #4]
    6582:	681b      	ldr	r3, [r3, #0]
    6584:	4618      	mov	r0, r3
    6586:	4b06      	ldr	r3, [pc, #24]	; (65a0 <_can_async_init+0x170>)
    6588:	4798      	blx	r3
    658a:	4603      	mov	r3, r0
    658c:	2b00      	cmp	r3, #0
    658e:	d1f7      	bne.n	6580 <_can_async_init+0x150>
	};

	return ERR_NONE;
    6590:	2300      	movs	r3, #0
}
    6592:	4618      	mov	r0, r3
    6594:	3708      	adds	r7, #8
    6596:	46bd      	mov	sp, r7
    6598:	bd80      	pop	{r7, pc}
    659a:	bf00      	nop
    659c:	000061e5 	.word	0x000061e5
    65a0:	00006205 	.word	0x00006205
    65a4:	00006253 	.word	0x00006253
    65a8:	42000400 	.word	0x42000400
    65ac:	200021a8 	.word	0x200021a8
    65b0:	20000004 	.word	0x20000004
    65b4:	00006293 	.word	0x00006293
    65b8:	000061ad 	.word	0x000061ad
    65bc:	00010c01 	.word	0x00010c01
    65c0:	000062b5 	.word	0x000062b5
    65c4:	00010c10 	.word	0x00010c10
    65c8:	000061c9 	.word	0x000061c9
    65cc:	200028f8 	.word	0x200028f8
    65d0:	00006399 	.word	0x00006399
    65d4:	000063b7 	.word	0x000063b7
    65d8:	000063f3 	.word	0x000063f3
    65dc:	200028b0 	.word	0x200028b0
    65e0:	000063d5 	.word	0x000063d5
    65e4:	20002108 	.word	0x20002108
    65e8:	00006411 	.word	0x00006411
    65ec:	00006321 	.word	0x00006321
    65f0:	20002118 	.word	0x20002118
    65f4:	0000633f 	.word	0x0000633f
    65f8:	20002198 	.word	0x20002198
    65fc:	0000635d 	.word	0x0000635d
    6600:	0000637b 	.word	0x0000637b
    6604:	00006105 	.word	0x00006105
    6608:	00006149 	.word	0x00006149
    660c:	000060c9 	.word	0x000060c9
    6610:	00006305 	.word	0x00006305
    6614:	00006273 	.word	0x00006273
    6618:	00006233 	.word	0x00006233

0000661c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    661c:	b590      	push	{r4, r7, lr}
    661e:	b083      	sub	sp, #12
    6620:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    6622:	4b2c      	ldr	r3, [pc, #176]	; (66d4 <CAN1_Handler+0xb8>)
    6624:	681b      	ldr	r3, [r3, #0]
    6626:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    6628:	687b      	ldr	r3, [r7, #4]
    662a:	681b      	ldr	r3, [r3, #0]
    662c:	4618      	mov	r0, r3
    662e:	4b2a      	ldr	r3, [pc, #168]	; (66d8 <CAN1_Handler+0xbc>)
    6630:	4798      	blx	r3
    6632:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    6634:	683b      	ldr	r3, [r7, #0]
    6636:	f003 0301 	and.w	r3, r3, #1
    663a:	2b00      	cmp	r3, #0
    663c:	d003      	beq.n	6646 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	689b      	ldr	r3, [r3, #8]
    6642:	6878      	ldr	r0, [r7, #4]
    6644:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    6646:	683b      	ldr	r3, [r7, #0]
    6648:	f403 7300 	and.w	r3, r3, #512	; 0x200
    664c:	2b00      	cmp	r3, #0
    664e:	d003      	beq.n	6658 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    6650:	687b      	ldr	r3, [r7, #4]
    6652:	685b      	ldr	r3, [r3, #4]
    6654:	6878      	ldr	r0, [r7, #4]
    6656:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    6658:	683b      	ldr	r3, [r7, #0]
    665a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    665e:	2b00      	cmp	r3, #0
    6660:	d004      	beq.n	666c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	68db      	ldr	r3, [r3, #12]
    6666:	2103      	movs	r1, #3
    6668:	6878      	ldr	r0, [r7, #4]
    666a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    666c:	683b      	ldr	r3, [r7, #0]
    666e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6672:	2b00      	cmp	r3, #0
    6674:	d004      	beq.n	6680 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    6676:	687b      	ldr	r3, [r7, #4]
    6678:	68db      	ldr	r3, [r3, #12]
    667a:	2100      	movs	r1, #0
    667c:	6878      	ldr	r0, [r7, #4]
    667e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    6680:	683b      	ldr	r3, [r7, #0]
    6682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    6686:	2b00      	cmp	r3, #0
    6688:	d00f      	beq.n	66aa <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    668a:	687b      	ldr	r3, [r7, #4]
    668c:	68dc      	ldr	r4, [r3, #12]
    668e:	687b      	ldr	r3, [r7, #4]
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	4618      	mov	r0, r3
    6694:	4b11      	ldr	r3, [pc, #68]	; (66dc <CAN1_Handler+0xc0>)
    6696:	4798      	blx	r3
    6698:	4603      	mov	r3, r0
    669a:	2b00      	cmp	r3, #0
    669c:	d001      	beq.n	66a2 <CAN1_Handler+0x86>
    669e:	2302      	movs	r3, #2
    66a0:	e000      	b.n	66a4 <CAN1_Handler+0x88>
    66a2:	2301      	movs	r3, #1
    66a4:	4619      	mov	r1, r3
    66a6:	6878      	ldr	r0, [r7, #4]
    66a8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    66aa:	683b      	ldr	r3, [r7, #0]
    66ac:	f003 0308 	and.w	r3, r3, #8
    66b0:	2b00      	cmp	r3, #0
    66b2:	d004      	beq.n	66be <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	68db      	ldr	r3, [r3, #12]
    66b8:	2104      	movs	r1, #4
    66ba:	6878      	ldr	r0, [r7, #4]
    66bc:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    66be:	687b      	ldr	r3, [r7, #4]
    66c0:	681b      	ldr	r3, [r3, #0]
    66c2:	6839      	ldr	r1, [r7, #0]
    66c4:	4618      	mov	r0, r3
    66c6:	4b06      	ldr	r3, [pc, #24]	; (66e0 <CAN1_Handler+0xc4>)
    66c8:	4798      	blx	r3
}
    66ca:	bf00      	nop
    66cc:	370c      	adds	r7, #12
    66ce:	46bd      	mov	sp, r7
    66d0:	bd90      	pop	{r4, r7, pc}
    66d2:	bf00      	nop
    66d4:	200021a8 	.word	0x200021a8
    66d8:	000062ed 	.word	0x000062ed
    66dc:	00006185 	.word	0x00006185
    66e0:	000062d1 	.word	0x000062d1

000066e4 <__NVIC_SetPendingIRQ>:
{
    66e4:	b480      	push	{r7}
    66e6:	b083      	sub	sp, #12
    66e8:	af00      	add	r7, sp, #0
    66ea:	4603      	mov	r3, r0
    66ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    66ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    66f2:	2b00      	cmp	r3, #0
    66f4:	db0c      	blt.n	6710 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66f6:	4909      	ldr	r1, [pc, #36]	; (671c <__NVIC_SetPendingIRQ+0x38>)
    66f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    66fc:	095b      	lsrs	r3, r3, #5
    66fe:	88fa      	ldrh	r2, [r7, #6]
    6700:	f002 021f 	and.w	r2, r2, #31
    6704:	2001      	movs	r0, #1
    6706:	fa00 f202 	lsl.w	r2, r0, r2
    670a:	3340      	adds	r3, #64	; 0x40
    670c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6710:	bf00      	nop
    6712:	370c      	adds	r7, #12
    6714:	46bd      	mov	sp, r7
    6716:	f85d 7b04 	ldr.w	r7, [sp], #4
    671a:	4770      	bx	lr
    671c:	e000e100 	.word	0xe000e100

00006720 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    6720:	b580      	push	{r7, lr}
    6722:	b082      	sub	sp, #8
    6724:	af00      	add	r7, sp, #0
    6726:	4603      	mov	r3, r0
    6728:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    672a:	79fb      	ldrb	r3, [r7, #7]
    672c:	b21b      	sxth	r3, r3
    672e:	4618      	mov	r0, r3
    6730:	4b02      	ldr	r3, [pc, #8]	; (673c <_irq_set+0x1c>)
    6732:	4798      	blx	r3
}
    6734:	bf00      	nop
    6736:	3708      	adds	r7, #8
    6738:	46bd      	mov	sp, r7
    673a:	bd80      	pop	{r7, pc}
    673c:	000066e5 	.word	0x000066e5

00006740 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    6740:	b480      	push	{r7}
    6742:	b083      	sub	sp, #12
    6744:	af00      	add	r7, sp, #0
    6746:	4603      	mov	r3, r0
    6748:	6039      	str	r1, [r7, #0]
    674a:	80fb      	strh	r3, [r7, #6]
    674c:	4613      	mov	r3, r2
    674e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6750:	797b      	ldrb	r3, [r7, #5]
    6752:	3b04      	subs	r3, #4
    6754:	2b05      	cmp	r3, #5
    6756:	d86b      	bhi.n	6830 <_get_cycles_for_us_internal+0xf0>
    6758:	a201      	add	r2, pc, #4	; (adr r2, 6760 <_get_cycles_for_us_internal+0x20>)
    675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    675e:	bf00      	nop
    6760:	0000680f 	.word	0x0000680f
    6764:	000067ef 	.word	0x000067ef
    6768:	000067d1 	.word	0x000067d1
    676c:	000067b3 	.word	0x000067b3
    6770:	00006795 	.word	0x00006795
    6774:	00006779 	.word	0x00006779
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    6778:	88fb      	ldrh	r3, [r7, #6]
    677a:	683a      	ldr	r2, [r7, #0]
    677c:	4935      	ldr	r1, [pc, #212]	; (6854 <_get_cycles_for_us_internal+0x114>)
    677e:	fba1 1202 	umull	r1, r2, r1, r2
    6782:	0c92      	lsrs	r2, r2, #18
    6784:	fb02 f303 	mul.w	r3, r2, r3
    6788:	3302      	adds	r3, #2
    678a:	4a33      	ldr	r2, [pc, #204]	; (6858 <_get_cycles_for_us_internal+0x118>)
    678c:	fba2 2303 	umull	r2, r3, r2, r3
    6790:	085b      	lsrs	r3, r3, #1
    6792:	e059      	b.n	6848 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    6794:	88fb      	ldrh	r3, [r7, #6]
    6796:	683a      	ldr	r2, [r7, #0]
    6798:	0952      	lsrs	r2, r2, #5
    679a:	4930      	ldr	r1, [pc, #192]	; (685c <_get_cycles_for_us_internal+0x11c>)
    679c:	fba1 1202 	umull	r1, r2, r1, r2
    67a0:	09d2      	lsrs	r2, r2, #7
    67a2:	fb02 f303 	mul.w	r3, r2, r3
    67a6:	331d      	adds	r3, #29
    67a8:	4a2d      	ldr	r2, [pc, #180]	; (6860 <_get_cycles_for_us_internal+0x120>)
    67aa:	fba2 2303 	umull	r2, r3, r2, r3
    67ae:	091b      	lsrs	r3, r3, #4
    67b0:	e04a      	b.n	6848 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    67b2:	88fb      	ldrh	r3, [r7, #6]
    67b4:	683a      	ldr	r2, [r7, #0]
    67b6:	492b      	ldr	r1, [pc, #172]	; (6864 <_get_cycles_for_us_internal+0x124>)
    67b8:	fba1 1202 	umull	r1, r2, r1, r2
    67bc:	0b52      	lsrs	r2, r2, #13
    67be:	fb02 f303 	mul.w	r3, r2, r3
    67c2:	f203 132b 	addw	r3, r3, #299	; 0x12b
    67c6:	4a28      	ldr	r2, [pc, #160]	; (6868 <_get_cycles_for_us_internal+0x128>)
    67c8:	fba2 2303 	umull	r2, r3, r2, r3
    67cc:	095b      	lsrs	r3, r3, #5
    67ce:	e03b      	b.n	6848 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    67d0:	88fb      	ldrh	r3, [r7, #6]
    67d2:	683a      	ldr	r2, [r7, #0]
    67d4:	4925      	ldr	r1, [pc, #148]	; (686c <_get_cycles_for_us_internal+0x12c>)
    67d6:	fba1 1202 	umull	r1, r2, r1, r2
    67da:	0992      	lsrs	r2, r2, #6
    67dc:	fb02 f303 	mul.w	r3, r2, r3
    67e0:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    67e4:	4a22      	ldr	r2, [pc, #136]	; (6870 <_get_cycles_for_us_internal+0x130>)
    67e6:	fba2 2303 	umull	r2, r3, r2, r3
    67ea:	099b      	lsrs	r3, r3, #6
    67ec:	e02c      	b.n	6848 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    67ee:	88fb      	ldrh	r3, [r7, #6]
    67f0:	683a      	ldr	r2, [r7, #0]
    67f2:	4920      	ldr	r1, [pc, #128]	; (6874 <_get_cycles_for_us_internal+0x134>)
    67f4:	fba1 1202 	umull	r1, r2, r1, r2
    67f8:	0952      	lsrs	r2, r2, #5
    67fa:	fb02 f303 	mul.w	r3, r2, r3
    67fe:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    6802:	332f      	adds	r3, #47	; 0x2f
    6804:	4a1c      	ldr	r2, [pc, #112]	; (6878 <_get_cycles_for_us_internal+0x138>)
    6806:	fba2 2303 	umull	r2, r3, r2, r3
    680a:	0b5b      	lsrs	r3, r3, #13
    680c:	e01c      	b.n	6848 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    680e:	88fb      	ldrh	r3, [r7, #6]
    6810:	683a      	ldr	r2, [r7, #0]
    6812:	491a      	ldr	r1, [pc, #104]	; (687c <_get_cycles_for_us_internal+0x13c>)
    6814:	fba1 1202 	umull	r1, r2, r1, r2
    6818:	08d2      	lsrs	r2, r2, #3
    681a:	fb02 f303 	mul.w	r3, r2, r3
    681e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    6822:	f203 33df 	addw	r3, r3, #991	; 0x3df
    6826:	4a16      	ldr	r2, [pc, #88]	; (6880 <_get_cycles_for_us_internal+0x140>)
    6828:	fba2 2303 	umull	r2, r3, r2, r3
    682c:	0c5b      	lsrs	r3, r3, #17
    682e:	e00b      	b.n	6848 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    6830:	88fb      	ldrh	r3, [r7, #6]
    6832:	683a      	ldr	r2, [r7, #0]
    6834:	fb02 f303 	mul.w	r3, r2, r3
    6838:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    683c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    6840:	4a10      	ldr	r2, [pc, #64]	; (6884 <_get_cycles_for_us_internal+0x144>)
    6842:	fba2 2303 	umull	r2, r3, r2, r3
    6846:	0c9b      	lsrs	r3, r3, #18
	}
}
    6848:	4618      	mov	r0, r3
    684a:	370c      	adds	r7, #12
    684c:	46bd      	mov	sp, r7
    684e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6852:	4770      	bx	lr
    6854:	431bde83 	.word	0x431bde83
    6858:	aaaaaaab 	.word	0xaaaaaaab
    685c:	0a7c5ac5 	.word	0x0a7c5ac5
    6860:	88888889 	.word	0x88888889
    6864:	d1b71759 	.word	0xd1b71759
    6868:	1b4e81b5 	.word	0x1b4e81b5
    686c:	10624dd3 	.word	0x10624dd3
    6870:	057619f1 	.word	0x057619f1
    6874:	51eb851f 	.word	0x51eb851f
    6878:	45e7b273 	.word	0x45e7b273
    687c:	cccccccd 	.word	0xcccccccd
    6880:	6fd91d85 	.word	0x6fd91d85
    6884:	165e9f81 	.word	0x165e9f81

00006888 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    6888:	b580      	push	{r7, lr}
    688a:	b082      	sub	sp, #8
    688c:	af00      	add	r7, sp, #0
    688e:	4603      	mov	r3, r0
    6890:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6892:	88fb      	ldrh	r3, [r7, #6]
    6894:	2209      	movs	r2, #9
    6896:	4904      	ldr	r1, [pc, #16]	; (68a8 <_get_cycles_for_us+0x20>)
    6898:	4618      	mov	r0, r3
    689a:	4b04      	ldr	r3, [pc, #16]	; (68ac <_get_cycles_for_us+0x24>)
    689c:	4798      	blx	r3
    689e:	4603      	mov	r3, r0
}
    68a0:	4618      	mov	r0, r3
    68a2:	3708      	adds	r7, #8
    68a4:	46bd      	mov	sp, r7
    68a6:	bd80      	pop	{r7, pc}
    68a8:	07270e00 	.word	0x07270e00
    68ac:	00006741 	.word	0x00006741

000068b0 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    68b0:	b480      	push	{r7}
    68b2:	b083      	sub	sp, #12
    68b4:	af00      	add	r7, sp, #0
    68b6:	4603      	mov	r3, r0
    68b8:	6039      	str	r1, [r7, #0]
    68ba:	80fb      	strh	r3, [r7, #6]
    68bc:	4613      	mov	r3, r2
    68be:	717b      	strb	r3, [r7, #5]
	switch (power) {
    68c0:	797b      	ldrb	r3, [r7, #5]
    68c2:	3b04      	subs	r3, #4
    68c4:	2b05      	cmp	r3, #5
    68c6:	d870      	bhi.n	69aa <_get_cycles_for_ms_internal+0xfa>
    68c8:	a201      	add	r2, pc, #4	; (adr r2, 68d0 <_get_cycles_for_ms_internal+0x20>)
    68ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    68ce:	bf00      	nop
    68d0:	0000698d 	.word	0x0000698d
    68d4:	00006971 	.word	0x00006971
    68d8:	00006955 	.word	0x00006955
    68dc:	00006931 	.word	0x00006931
    68e0:	0000690d 	.word	0x0000690d
    68e4:	000068e9 	.word	0x000068e9
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    68e8:	88fb      	ldrh	r3, [r7, #6]
    68ea:	683a      	ldr	r2, [r7, #0]
    68ec:	4937      	ldr	r1, [pc, #220]	; (69cc <_get_cycles_for_ms_internal+0x11c>)
    68ee:	fba1 1202 	umull	r1, r2, r1, r2
    68f2:	0c92      	lsrs	r2, r2, #18
    68f4:	fb02 f303 	mul.w	r3, r2, r3
    68f8:	3302      	adds	r3, #2
    68fa:	4a35      	ldr	r2, [pc, #212]	; (69d0 <_get_cycles_for_ms_internal+0x120>)
    68fc:	fba2 2303 	umull	r2, r3, r2, r3
    6900:	085b      	lsrs	r3, r3, #1
    6902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6906:	fb02 f303 	mul.w	r3, r2, r3
    690a:	e058      	b.n	69be <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    690c:	88fb      	ldrh	r3, [r7, #6]
    690e:	683a      	ldr	r2, [r7, #0]
    6910:	0952      	lsrs	r2, r2, #5
    6912:	4930      	ldr	r1, [pc, #192]	; (69d4 <_get_cycles_for_ms_internal+0x124>)
    6914:	fba1 1202 	umull	r1, r2, r1, r2
    6918:	09d2      	lsrs	r2, r2, #7
    691a:	fb02 f303 	mul.w	r3, r2, r3
    691e:	3302      	adds	r3, #2
    6920:	4a2b      	ldr	r2, [pc, #172]	; (69d0 <_get_cycles_for_ms_internal+0x120>)
    6922:	fba2 2303 	umull	r2, r3, r2, r3
    6926:	085b      	lsrs	r3, r3, #1
    6928:	2264      	movs	r2, #100	; 0x64
    692a:	fb02 f303 	mul.w	r3, r2, r3
    692e:	e046      	b.n	69be <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    6930:	88fb      	ldrh	r3, [r7, #6]
    6932:	683a      	ldr	r2, [r7, #0]
    6934:	4928      	ldr	r1, [pc, #160]	; (69d8 <_get_cycles_for_ms_internal+0x128>)
    6936:	fba1 1202 	umull	r1, r2, r1, r2
    693a:	0b52      	lsrs	r2, r2, #13
    693c:	fb02 f303 	mul.w	r3, r2, r3
    6940:	3302      	adds	r3, #2
    6942:	4a23      	ldr	r2, [pc, #140]	; (69d0 <_get_cycles_for_ms_internal+0x120>)
    6944:	fba2 2303 	umull	r2, r3, r2, r3
    6948:	085a      	lsrs	r2, r3, #1
    694a:	4613      	mov	r3, r2
    694c:	009b      	lsls	r3, r3, #2
    694e:	4413      	add	r3, r2
    6950:	005b      	lsls	r3, r3, #1
    6952:	e034      	b.n	69be <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    6954:	88fb      	ldrh	r3, [r7, #6]
    6956:	683a      	ldr	r2, [r7, #0]
    6958:	4920      	ldr	r1, [pc, #128]	; (69dc <_get_cycles_for_ms_internal+0x12c>)
    695a:	fba1 1202 	umull	r1, r2, r1, r2
    695e:	0992      	lsrs	r2, r2, #6
    6960:	fb02 f303 	mul.w	r3, r2, r3
    6964:	3302      	adds	r3, #2
    6966:	4a1a      	ldr	r2, [pc, #104]	; (69d0 <_get_cycles_for_ms_internal+0x120>)
    6968:	fba2 2303 	umull	r2, r3, r2, r3
    696c:	085b      	lsrs	r3, r3, #1
    696e:	e026      	b.n	69be <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    6970:	88fb      	ldrh	r3, [r7, #6]
    6972:	683a      	ldr	r2, [r7, #0]
    6974:	491a      	ldr	r1, [pc, #104]	; (69e0 <_get_cycles_for_ms_internal+0x130>)
    6976:	fba1 1202 	umull	r1, r2, r1, r2
    697a:	0952      	lsrs	r2, r2, #5
    697c:	fb02 f303 	mul.w	r3, r2, r3
    6980:	331d      	adds	r3, #29
    6982:	4a18      	ldr	r2, [pc, #96]	; (69e4 <_get_cycles_for_ms_internal+0x134>)
    6984:	fba2 2303 	umull	r2, r3, r2, r3
    6988:	091b      	lsrs	r3, r3, #4
    698a:	e018      	b.n	69be <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    698c:	88fb      	ldrh	r3, [r7, #6]
    698e:	683a      	ldr	r2, [r7, #0]
    6990:	4915      	ldr	r1, [pc, #84]	; (69e8 <_get_cycles_for_ms_internal+0x138>)
    6992:	fba1 1202 	umull	r1, r2, r1, r2
    6996:	08d2      	lsrs	r2, r2, #3
    6998:	fb02 f303 	mul.w	r3, r2, r3
    699c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    69a0:	4a12      	ldr	r2, [pc, #72]	; (69ec <_get_cycles_for_ms_internal+0x13c>)
    69a2:	fba2 2303 	umull	r2, r3, r2, r3
    69a6:	095b      	lsrs	r3, r3, #5
    69a8:	e009      	b.n	69be <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    69aa:	88fb      	ldrh	r3, [r7, #6]
    69ac:	683a      	ldr	r2, [r7, #0]
    69ae:	fb02 f303 	mul.w	r3, r2, r3
    69b2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    69b6:	4a0e      	ldr	r2, [pc, #56]	; (69f0 <_get_cycles_for_ms_internal+0x140>)
    69b8:	fba2 2303 	umull	r2, r3, r2, r3
    69bc:	099b      	lsrs	r3, r3, #6
	}
}
    69be:	4618      	mov	r0, r3
    69c0:	370c      	adds	r7, #12
    69c2:	46bd      	mov	sp, r7
    69c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    69c8:	4770      	bx	lr
    69ca:	bf00      	nop
    69cc:	431bde83 	.word	0x431bde83
    69d0:	aaaaaaab 	.word	0xaaaaaaab
    69d4:	0a7c5ac5 	.word	0x0a7c5ac5
    69d8:	d1b71759 	.word	0xd1b71759
    69dc:	10624dd3 	.word	0x10624dd3
    69e0:	51eb851f 	.word	0x51eb851f
    69e4:	88888889 	.word	0x88888889
    69e8:	cccccccd 	.word	0xcccccccd
    69ec:	1b4e81b5 	.word	0x1b4e81b5
    69f0:	057619f1 	.word	0x057619f1

000069f4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    69f4:	b580      	push	{r7, lr}
    69f6:	b082      	sub	sp, #8
    69f8:	af00      	add	r7, sp, #0
    69fa:	4603      	mov	r3, r0
    69fc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    69fe:	88fb      	ldrh	r3, [r7, #6]
    6a00:	2209      	movs	r2, #9
    6a02:	4904      	ldr	r1, [pc, #16]	; (6a14 <_get_cycles_for_ms+0x20>)
    6a04:	4618      	mov	r0, r3
    6a06:	4b04      	ldr	r3, [pc, #16]	; (6a18 <_get_cycles_for_ms+0x24>)
    6a08:	4798      	blx	r3
    6a0a:	4603      	mov	r3, r0
}
    6a0c:	4618      	mov	r0, r3
    6a0e:	3708      	adds	r7, #8
    6a10:	46bd      	mov	sp, r7
    6a12:	bd80      	pop	{r7, pc}
    6a14:	07270e00 	.word	0x07270e00
    6a18:	000068b1 	.word	0x000068b1
    6a1c:	00000000 	.word	0x00000000

00006a20 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    6a20:	b480      	push	{r7}
    6a22:	b083      	sub	sp, #12
    6a24:	af00      	add	r7, sp, #0
    6a26:	6078      	str	r0, [r7, #4]
    6a28:	6039      	str	r1, [r7, #0]
    6a2a:	bf00      	nop
    6a2c:	f3af 8000 	nop.w

00006a30 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    6a30:	3901      	subs	r1, #1
    6a32:	d8fd      	bhi.n	6a30 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    6a34:	bf00      	nop
    6a36:	370c      	adds	r7, #12
    6a38:	46bd      	mov	sp, r7
    6a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a3e:	4770      	bx	lr

00006a40 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    6a40:	b480      	push	{r7}
    6a42:	b083      	sub	sp, #12
    6a44:	af00      	add	r7, sp, #0
    6a46:	6078      	str	r0, [r7, #4]
    6a48:	460b      	mov	r3, r1
    6a4a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	881b      	ldrh	r3, [r3, #0]
    6a50:	b29a      	uxth	r2, r3
    6a52:	887b      	ldrh	r3, [r7, #2]
    6a54:	021b      	lsls	r3, r3, #8
    6a56:	b29b      	uxth	r3, r3
    6a58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6a5c:	b29b      	uxth	r3, r3
    6a5e:	4313      	orrs	r3, r2
    6a60:	b29a      	uxth	r2, r3
    6a62:	687b      	ldr	r3, [r7, #4]
    6a64:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    6a66:	bf00      	nop
    6a68:	370c      	adds	r7, #12
    6a6a:	46bd      	mov	sp, r7
    6a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a70:	4770      	bx	lr

00006a72 <hri_port_set_EVCTRL_reg>:
{
    6a72:	b480      	push	{r7}
    6a74:	b085      	sub	sp, #20
    6a76:	af00      	add	r7, sp, #0
    6a78:	60f8      	str	r0, [r7, #12]
    6a7a:	460b      	mov	r3, r1
    6a7c:	607a      	str	r2, [r7, #4]
    6a7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    6a80:	7afb      	ldrb	r3, [r7, #11]
    6a82:	7afa      	ldrb	r2, [r7, #11]
    6a84:	68f9      	ldr	r1, [r7, #12]
    6a86:	01d2      	lsls	r2, r2, #7
    6a88:	440a      	add	r2, r1
    6a8a:	322c      	adds	r2, #44	; 0x2c
    6a8c:	6811      	ldr	r1, [r2, #0]
    6a8e:	687a      	ldr	r2, [r7, #4]
    6a90:	430a      	orrs	r2, r1
    6a92:	68f9      	ldr	r1, [r7, #12]
    6a94:	01db      	lsls	r3, r3, #7
    6a96:	440b      	add	r3, r1
    6a98:	332c      	adds	r3, #44	; 0x2c
    6a9a:	601a      	str	r2, [r3, #0]
}
    6a9c:	bf00      	nop
    6a9e:	3714      	adds	r7, #20
    6aa0:	46bd      	mov	sp, r7
    6aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aa6:	4770      	bx	lr

00006aa8 <_port_event_init>:

static inline void _port_event_init()
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    6aac:	2200      	movs	r2, #0
    6aae:	2100      	movs	r1, #0
    6ab0:	4809      	ldr	r0, [pc, #36]	; (6ad8 <_port_event_init+0x30>)
    6ab2:	4b0a      	ldr	r3, [pc, #40]	; (6adc <_port_event_init+0x34>)
    6ab4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    6ab6:	2200      	movs	r2, #0
    6ab8:	2101      	movs	r1, #1
    6aba:	4807      	ldr	r0, [pc, #28]	; (6ad8 <_port_event_init+0x30>)
    6abc:	4b07      	ldr	r3, [pc, #28]	; (6adc <_port_event_init+0x34>)
    6abe:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    6ac0:	22ef      	movs	r2, #239	; 0xef
    6ac2:	2102      	movs	r1, #2
    6ac4:	4804      	ldr	r0, [pc, #16]	; (6ad8 <_port_event_init+0x30>)
    6ac6:	4b05      	ldr	r3, [pc, #20]	; (6adc <_port_event_init+0x34>)
    6ac8:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    6aca:	2200      	movs	r2, #0
    6acc:	2103      	movs	r1, #3
    6ace:	4802      	ldr	r0, [pc, #8]	; (6ad8 <_port_event_init+0x30>)
    6ad0:	4b02      	ldr	r3, [pc, #8]	; (6adc <_port_event_init+0x34>)
    6ad2:	4798      	blx	r3
}
    6ad4:	bf00      	nop
    6ad6:	bd80      	pop	{r7, pc}
    6ad8:	41008000 	.word	0x41008000
    6adc:	00006a73 	.word	0x00006a73

00006ae0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6ae0:	b580      	push	{r7, lr}
    6ae2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    6ae4:	2104      	movs	r1, #4
    6ae6:	480b      	ldr	r0, [pc, #44]	; (6b14 <_init_chip+0x34>)
    6ae8:	4b0b      	ldr	r3, [pc, #44]	; (6b18 <_init_chip+0x38>)
    6aea:	4798      	blx	r3

	_osc32kctrl_init_sources();
    6aec:	4b0b      	ldr	r3, [pc, #44]	; (6b1c <_init_chip+0x3c>)
    6aee:	4798      	blx	r3
	_oscctrl_init_sources();
    6af0:	4b0b      	ldr	r3, [pc, #44]	; (6b20 <_init_chip+0x40>)
    6af2:	4798      	blx	r3
	_mclk_init();
    6af4:	4b0b      	ldr	r3, [pc, #44]	; (6b24 <_init_chip+0x44>)
    6af6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6af8:	f44f 6084 	mov.w	r0, #1056	; 0x420
    6afc:	4b0a      	ldr	r3, [pc, #40]	; (6b28 <_init_chip+0x48>)
    6afe:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    6b00:	4b0a      	ldr	r3, [pc, #40]	; (6b2c <_init_chip+0x4c>)
    6b02:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6b04:	f640 30df 	movw	r0, #3039	; 0xbdf
    6b08:	4b07      	ldr	r3, [pc, #28]	; (6b28 <_init_chip+0x48>)
    6b0a:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    6b0c:	4b08      	ldr	r3, [pc, #32]	; (6b30 <_init_chip+0x50>)
    6b0e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    6b10:	bf00      	nop
    6b12:	bd80      	pop	{r7, pc}
    6b14:	41004000 	.word	0x41004000
    6b18:	00006a41 	.word	0x00006a41
    6b1c:	00007569 	.word	0x00007569
    6b20:	00007a31 	.word	0x00007a31
    6b24:	00007489 	.word	0x00007489
    6b28:	00007349 	.word	0x00007349
    6b2c:	00007a71 	.word	0x00007a71
    6b30:	00006aa9 	.word	0x00006aa9

00006b34 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    6b34:	b480      	push	{r7}
    6b36:	b083      	sub	sp, #12
    6b38:	af00      	add	r7, sp, #0
    6b3a:	6078      	str	r0, [r7, #4]
    6b3c:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    6b3e:	687b      	ldr	r3, [r7, #4]
    6b40:	683a      	ldr	r2, [r7, #0]
    6b42:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6b44:	2300      	movs	r3, #0
}
    6b46:	4618      	mov	r0, r3
    6b48:	370c      	adds	r7, #12
    6b4a:	46bd      	mov	sp, r7
    6b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b50:	4770      	bx	lr
	...

00006b54 <__NVIC_EnableIRQ>:
{
    6b54:	b480      	push	{r7}
    6b56:	b083      	sub	sp, #12
    6b58:	af00      	add	r7, sp, #0
    6b5a:	4603      	mov	r3, r0
    6b5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6b62:	2b00      	cmp	r3, #0
    6b64:	db0b      	blt.n	6b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b66:	4909      	ldr	r1, [pc, #36]	; (6b8c <__NVIC_EnableIRQ+0x38>)
    6b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6b6c:	095b      	lsrs	r3, r3, #5
    6b6e:	88fa      	ldrh	r2, [r7, #6]
    6b70:	f002 021f 	and.w	r2, r2, #31
    6b74:	2001      	movs	r0, #1
    6b76:	fa00 f202 	lsl.w	r2, r0, r2
    6b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b7e:	bf00      	nop
    6b80:	370c      	adds	r7, #12
    6b82:	46bd      	mov	sp, r7
    6b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b88:	4770      	bx	lr
    6b8a:	bf00      	nop
    6b8c:	e000e100 	.word	0xe000e100

00006b90 <__NVIC_DisableIRQ>:
{
    6b90:	b480      	push	{r7}
    6b92:	b083      	sub	sp, #12
    6b94:	af00      	add	r7, sp, #0
    6b96:	4603      	mov	r3, r0
    6b98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	db10      	blt.n	6bc4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ba2:	490b      	ldr	r1, [pc, #44]	; (6bd0 <__NVIC_DisableIRQ+0x40>)
    6ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6ba8:	095b      	lsrs	r3, r3, #5
    6baa:	88fa      	ldrh	r2, [r7, #6]
    6bac:	f002 021f 	and.w	r2, r2, #31
    6bb0:	2001      	movs	r0, #1
    6bb2:	fa00 f202 	lsl.w	r2, r0, r2
    6bb6:	3320      	adds	r3, #32
    6bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6bbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6bc0:	f3bf 8f6f 	isb	sy
}
    6bc4:	bf00      	nop
    6bc6:	370c      	adds	r7, #12
    6bc8:	46bd      	mov	sp, r7
    6bca:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bce:	4770      	bx	lr
    6bd0:	e000e100 	.word	0xe000e100

00006bd4 <__NVIC_ClearPendingIRQ>:
{
    6bd4:	b480      	push	{r7}
    6bd6:	b083      	sub	sp, #12
    6bd8:	af00      	add	r7, sp, #0
    6bda:	4603      	mov	r3, r0
    6bdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6be2:	2b00      	cmp	r3, #0
    6be4:	db0c      	blt.n	6c00 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6be6:	4909      	ldr	r1, [pc, #36]	; (6c0c <__NVIC_ClearPendingIRQ+0x38>)
    6be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bec:	095b      	lsrs	r3, r3, #5
    6bee:	88fa      	ldrh	r2, [r7, #6]
    6bf0:	f002 021f 	and.w	r2, r2, #31
    6bf4:	2001      	movs	r0, #1
    6bf6:	fa00 f202 	lsl.w	r2, r0, r2
    6bfa:	3360      	adds	r3, #96	; 0x60
    6bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c00:	bf00      	nop
    6c02:	370c      	adds	r7, #12
    6c04:	46bd      	mov	sp, r7
    6c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c0a:	4770      	bx	lr
    6c0c:	e000e100 	.word	0xe000e100

00006c10 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6c10:	b480      	push	{r7}
    6c12:	b083      	sub	sp, #12
    6c14:	af00      	add	r7, sp, #0
    6c16:	6078      	str	r0, [r7, #4]
    6c18:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    6c1a:	bf00      	nop
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	685a      	ldr	r2, [r3, #4]
    6c20:	683b      	ldr	r3, [r7, #0]
    6c22:	4013      	ands	r3, r2
    6c24:	2b00      	cmp	r3, #0
    6c26:	d1f9      	bne.n	6c1c <hri_eic_wait_for_sync+0xc>
	};
}
    6c28:	bf00      	nop
    6c2a:	370c      	adds	r7, #12
    6c2c:	46bd      	mov	sp, r7
    6c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c32:	4770      	bx	lr

00006c34 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6c34:	b480      	push	{r7}
    6c36:	b083      	sub	sp, #12
    6c38:	af00      	add	r7, sp, #0
    6c3a:	6078      	str	r0, [r7, #4]
    6c3c:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    6c3e:	687b      	ldr	r3, [r7, #4]
    6c40:	685a      	ldr	r2, [r3, #4]
    6c42:	683b      	ldr	r3, [r7, #0]
    6c44:	4013      	ands	r3, r2
    6c46:	2b00      	cmp	r3, #0
    6c48:	bf14      	ite	ne
    6c4a:	2301      	movne	r3, #1
    6c4c:	2300      	moveq	r3, #0
    6c4e:	b2db      	uxtb	r3, r3
}
    6c50:	4618      	mov	r0, r3
    6c52:	370c      	adds	r7, #12
    6c54:	46bd      	mov	sp, r7
    6c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c5a:	4770      	bx	lr

00006c5c <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    6c5c:	b480      	push	{r7}
    6c5e:	b083      	sub	sp, #12
    6c60:	af00      	add	r7, sp, #0
    6c62:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    6c64:	687b      	ldr	r3, [r7, #4]
    6c66:	695b      	ldr	r3, [r3, #20]
}
    6c68:	4618      	mov	r0, r3
    6c6a:	370c      	adds	r7, #12
    6c6c:	46bd      	mov	sp, r7
    6c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c72:	4770      	bx	lr

00006c74 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    6c74:	b480      	push	{r7}
    6c76:	b083      	sub	sp, #12
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
    6c7c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	683a      	ldr	r2, [r7, #0]
    6c82:	615a      	str	r2, [r3, #20]
}
    6c84:	bf00      	nop
    6c86:	370c      	adds	r7, #12
    6c88:	46bd      	mov	sp, r7
    6c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c8e:	4770      	bx	lr

00006c90 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    6c90:	b480      	push	{r7}
    6c92:	b083      	sub	sp, #12
    6c94:	af00      	add	r7, sp, #0
    6c96:	6078      	str	r0, [r7, #4]
    6c98:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    6c9a:	687b      	ldr	r3, [r7, #4]
    6c9c:	683a      	ldr	r2, [r7, #0]
    6c9e:	611a      	str	r2, [r3, #16]
}
    6ca0:	bf00      	nop
    6ca2:	370c      	adds	r7, #12
    6ca4:	46bd      	mov	sp, r7
    6ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6caa:	4770      	bx	lr

00006cac <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    6cac:	b480      	push	{r7}
    6cae:	b083      	sub	sp, #12
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	6078      	str	r0, [r7, #4]
    6cb4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    6cb6:	687b      	ldr	r3, [r7, #4]
    6cb8:	683a      	ldr	r2, [r7, #0]
    6cba:	60da      	str	r2, [r3, #12]
}
    6cbc:	bf00      	nop
    6cbe:	370c      	adds	r7, #12
    6cc0:	46bd      	mov	sp, r7
    6cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cc6:	4770      	bx	lr

00006cc8 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6cc8:	b580      	push	{r7, lr}
    6cca:	b082      	sub	sp, #8
    6ccc:	af00      	add	r7, sp, #0
    6cce:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	781b      	ldrb	r3, [r3, #0]
    6cd4:	b2db      	uxtb	r3, r3
    6cd6:	f043 0302 	orr.w	r3, r3, #2
    6cda:	b2da      	uxtb	r2, r3
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6ce0:	2103      	movs	r1, #3
    6ce2:	6878      	ldr	r0, [r7, #4]
    6ce4:	4b02      	ldr	r3, [pc, #8]	; (6cf0 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    6ce6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6ce8:	bf00      	nop
    6cea:	3708      	adds	r7, #8
    6cec:	46bd      	mov	sp, r7
    6cee:	bd80      	pop	{r7, pc}
    6cf0:	00006c11 	.word	0x00006c11

00006cf4 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6cf4:	b580      	push	{r7, lr}
    6cf6:	b082      	sub	sp, #8
    6cf8:	af00      	add	r7, sp, #0
    6cfa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6cfc:	687b      	ldr	r3, [r7, #4]
    6cfe:	781b      	ldrb	r3, [r3, #0]
    6d00:	b2db      	uxtb	r3, r3
    6d02:	f023 0302 	bic.w	r3, r3, #2
    6d06:	b2da      	uxtb	r2, r3
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6d0c:	2103      	movs	r1, #3
    6d0e:	6878      	ldr	r0, [r7, #4]
    6d10:	4b02      	ldr	r3, [pc, #8]	; (6d1c <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    6d12:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6d14:	bf00      	nop
    6d16:	3708      	adds	r7, #8
    6d18:	46bd      	mov	sp, r7
    6d1a:	bd80      	pop	{r7, pc}
    6d1c:	00006c11 	.word	0x00006c11

00006d20 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    6d20:	b580      	push	{r7, lr}
    6d22:	b084      	sub	sp, #16
    6d24:	af00      	add	r7, sp, #0
    6d26:	6078      	str	r0, [r7, #4]
    6d28:	460b      	mov	r3, r1
    6d2a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6d2c:	687b      	ldr	r3, [r7, #4]
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    6d32:	7bfb      	ldrb	r3, [r7, #15]
    6d34:	f023 0310 	bic.w	r3, r3, #16
    6d38:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    6d3a:	78fb      	ldrb	r3, [r7, #3]
    6d3c:	011b      	lsls	r3, r3, #4
    6d3e:	b25a      	sxtb	r2, r3
    6d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6d44:	4313      	orrs	r3, r2
    6d46:	b25b      	sxtb	r3, r3
    6d48:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	7bfa      	ldrb	r2, [r7, #15]
    6d4e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6d50:	2103      	movs	r1, #3
    6d52:	6878      	ldr	r0, [r7, #4]
    6d54:	4b02      	ldr	r3, [pc, #8]	; (6d60 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    6d56:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6d58:	bf00      	nop
    6d5a:	3710      	adds	r7, #16
    6d5c:	46bd      	mov	sp, r7
    6d5e:	bd80      	pop	{r7, pc}
    6d60:	00006c11 	.word	0x00006c11

00006d64 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    6d64:	b580      	push	{r7, lr}
    6d66:	b084      	sub	sp, #16
    6d68:	af00      	add	r7, sp, #0
    6d6a:	6078      	str	r0, [r7, #4]
    6d6c:	460b      	mov	r3, r1
    6d6e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6d70:	2103      	movs	r1, #3
    6d72:	6878      	ldr	r0, [r7, #4]
    6d74:	4b06      	ldr	r3, [pc, #24]	; (6d90 <hri_eic_get_CTRLA_reg+0x2c>)
    6d76:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6d7e:	7bfa      	ldrb	r2, [r7, #15]
    6d80:	78fb      	ldrb	r3, [r7, #3]
    6d82:	4013      	ands	r3, r2
    6d84:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6d86:	7bfb      	ldrb	r3, [r7, #15]
}
    6d88:	4618      	mov	r0, r3
    6d8a:	3710      	adds	r7, #16
    6d8c:	46bd      	mov	sp, r7
    6d8e:	bd80      	pop	{r7, pc}
    6d90:	00006c11 	.word	0x00006c11

00006d94 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    6d94:	b580      	push	{r7, lr}
    6d96:	b082      	sub	sp, #8
    6d98:	af00      	add	r7, sp, #0
    6d9a:	6078      	str	r0, [r7, #4]
    6d9c:	460b      	mov	r3, r1
    6d9e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    6da0:	687b      	ldr	r3, [r7, #4]
    6da2:	78fa      	ldrb	r2, [r7, #3]
    6da4:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6da6:	2103      	movs	r1, #3
    6da8:	6878      	ldr	r0, [r7, #4]
    6daa:	4b03      	ldr	r3, [pc, #12]	; (6db8 <hri_eic_write_CTRLA_reg+0x24>)
    6dac:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6dae:	bf00      	nop
    6db0:	3708      	adds	r7, #8
    6db2:	46bd      	mov	sp, r7
    6db4:	bd80      	pop	{r7, pc}
    6db6:	bf00      	nop
    6db8:	00006c11 	.word	0x00006c11

00006dbc <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    6dbc:	b480      	push	{r7}
    6dbe:	b083      	sub	sp, #12
    6dc0:	af00      	add	r7, sp, #0
    6dc2:	6078      	str	r0, [r7, #4]
    6dc4:	460b      	mov	r3, r1
    6dc6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    6dc8:	687b      	ldr	r3, [r7, #4]
    6dca:	78fa      	ldrb	r2, [r7, #3]
    6dcc:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6dce:	bf00      	nop
    6dd0:	370c      	adds	r7, #12
    6dd2:	46bd      	mov	sp, r7
    6dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dd8:	4770      	bx	lr

00006dda <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    6dda:	b480      	push	{r7}
    6ddc:	b083      	sub	sp, #12
    6dde:	af00      	add	r7, sp, #0
    6de0:	6078      	str	r0, [r7, #4]
    6de2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	683a      	ldr	r2, [r7, #0]
    6de8:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6dea:	bf00      	nop
    6dec:	370c      	adds	r7, #12
    6dee:	46bd      	mov	sp, r7
    6df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6df4:	4770      	bx	lr

00006df6 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    6df6:	b480      	push	{r7}
    6df8:	b083      	sub	sp, #12
    6dfa:	af00      	add	r7, sp, #0
    6dfc:	6078      	str	r0, [r7, #4]
    6dfe:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	683a      	ldr	r2, [r7, #0]
    6e04:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6e06:	bf00      	nop
    6e08:	370c      	adds	r7, #12
    6e0a:	46bd      	mov	sp, r7
    6e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e10:	4770      	bx	lr

00006e12 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    6e12:	b480      	push	{r7}
    6e14:	b085      	sub	sp, #20
    6e16:	af00      	add	r7, sp, #0
    6e18:	60f8      	str	r0, [r7, #12]
    6e1a:	460b      	mov	r3, r1
    6e1c:	607a      	str	r2, [r7, #4]
    6e1e:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    6e20:	7afb      	ldrb	r3, [r7, #11]
    6e22:	68fa      	ldr	r2, [r7, #12]
    6e24:	3306      	adds	r3, #6
    6e26:	009b      	lsls	r3, r3, #2
    6e28:	4413      	add	r3, r2
    6e2a:	687a      	ldr	r2, [r7, #4]
    6e2c:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6e2e:	bf00      	nop
    6e30:	3714      	adds	r7, #20
    6e32:	46bd      	mov	sp, r7
    6e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e38:	4770      	bx	lr

00006e3a <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    6e3a:	b480      	push	{r7}
    6e3c:	b083      	sub	sp, #12
    6e3e:	af00      	add	r7, sp, #0
    6e40:	6078      	str	r0, [r7, #4]
    6e42:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    6e44:	687b      	ldr	r3, [r7, #4]
    6e46:	683a      	ldr	r2, [r7, #0]
    6e48:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    6e4a:	bf00      	nop
    6e4c:	370c      	adds	r7, #12
    6e4e:	46bd      	mov	sp, r7
    6e50:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e54:	4770      	bx	lr

00006e56 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    6e56:	b480      	push	{r7}
    6e58:	b083      	sub	sp, #12
    6e5a:	af00      	add	r7, sp, #0
    6e5c:	6078      	str	r0, [r7, #4]
    6e5e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	683a      	ldr	r2, [r7, #0]
    6e64:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    6e66:	bf00      	nop
    6e68:	370c      	adds	r7, #12
    6e6a:	46bd      	mov	sp, r7
    6e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e70:	4770      	bx	lr
	...

00006e74 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    6e74:	b580      	push	{r7, lr}
    6e76:	b082      	sub	sp, #8
    6e78:	af00      	add	r7, sp, #0
    6e7a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    6e7c:	2101      	movs	r1, #1
    6e7e:	483d      	ldr	r0, [pc, #244]	; (6f74 <_ext_irq_init+0x100>)
    6e80:	4b3d      	ldr	r3, [pc, #244]	; (6f78 <_ext_irq_init+0x104>)
    6e82:	4798      	blx	r3
    6e84:	4603      	mov	r3, r0
    6e86:	f083 0301 	eor.w	r3, r3, #1
    6e8a:	b2db      	uxtb	r3, r3
    6e8c:	2b00      	cmp	r3, #0
    6e8e:	d011      	beq.n	6eb4 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    6e90:	2102      	movs	r1, #2
    6e92:	4838      	ldr	r0, [pc, #224]	; (6f74 <_ext_irq_init+0x100>)
    6e94:	4b39      	ldr	r3, [pc, #228]	; (6f7c <_ext_irq_init+0x108>)
    6e96:	4798      	blx	r3
    6e98:	4603      	mov	r3, r0
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	d006      	beq.n	6eac <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    6e9e:	4835      	ldr	r0, [pc, #212]	; (6f74 <_ext_irq_init+0x100>)
    6ea0:	4b37      	ldr	r3, [pc, #220]	; (6f80 <_ext_irq_init+0x10c>)
    6ea2:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    6ea4:	2102      	movs	r1, #2
    6ea6:	4833      	ldr	r0, [pc, #204]	; (6f74 <_ext_irq_init+0x100>)
    6ea8:	4b36      	ldr	r3, [pc, #216]	; (6f84 <_ext_irq_init+0x110>)
    6eaa:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    6eac:	2101      	movs	r1, #1
    6eae:	4831      	ldr	r0, [pc, #196]	; (6f74 <_ext_irq_init+0x100>)
    6eb0:	4b35      	ldr	r3, [pc, #212]	; (6f88 <_ext_irq_init+0x114>)
    6eb2:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    6eb4:	2101      	movs	r1, #1
    6eb6:	482f      	ldr	r0, [pc, #188]	; (6f74 <_ext_irq_init+0x100>)
    6eb8:	4b32      	ldr	r3, [pc, #200]	; (6f84 <_ext_irq_init+0x110>)
    6eba:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    6ebc:	2100      	movs	r1, #0
    6ebe:	482d      	ldr	r0, [pc, #180]	; (6f74 <_ext_irq_init+0x100>)
    6ec0:	4b32      	ldr	r3, [pc, #200]	; (6f8c <_ext_irq_init+0x118>)
    6ec2:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    6ec4:	2100      	movs	r1, #0
    6ec6:	482b      	ldr	r0, [pc, #172]	; (6f74 <_ext_irq_init+0x100>)
    6ec8:	4b31      	ldr	r3, [pc, #196]	; (6f90 <_ext_irq_init+0x11c>)
    6eca:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    6ecc:	2100      	movs	r1, #0
    6ece:	4829      	ldr	r0, [pc, #164]	; (6f74 <_ext_irq_init+0x100>)
    6ed0:	4b30      	ldr	r3, [pc, #192]	; (6f94 <_ext_irq_init+0x120>)
    6ed2:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    6ed4:	f240 3131 	movw	r1, #817	; 0x331
    6ed8:	4826      	ldr	r0, [pc, #152]	; (6f74 <_ext_irq_init+0x100>)
    6eda:	4b2f      	ldr	r3, [pc, #188]	; (6f98 <_ext_irq_init+0x124>)
    6edc:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    6ede:	f240 3131 	movw	r1, #817	; 0x331
    6ee2:	4824      	ldr	r0, [pc, #144]	; (6f74 <_ext_irq_init+0x100>)
    6ee4:	4b2d      	ldr	r3, [pc, #180]	; (6f9c <_ext_irq_init+0x128>)
    6ee6:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    6ee8:	2100      	movs	r1, #0
    6eea:	4822      	ldr	r0, [pc, #136]	; (6f74 <_ext_irq_init+0x100>)
    6eec:	4b2c      	ldr	r3, [pc, #176]	; (6fa0 <_ext_irq_init+0x12c>)
    6eee:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6ef0:	4a2c      	ldr	r2, [pc, #176]	; (6fa4 <_ext_irq_init+0x130>)
    6ef2:	2100      	movs	r1, #0
    6ef4:	481f      	ldr	r0, [pc, #124]	; (6f74 <_ext_irq_init+0x100>)
    6ef6:	4b2c      	ldr	r3, [pc, #176]	; (6fa8 <_ext_irq_init+0x134>)
    6ef8:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6efa:	2211      	movs	r2, #17
    6efc:	2101      	movs	r1, #1
    6efe:	481d      	ldr	r0, [pc, #116]	; (6f74 <_ext_irq_init+0x100>)
    6f00:	4b29      	ldr	r3, [pc, #164]	; (6fa8 <_ext_irq_init+0x134>)
    6f02:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    6f04:	481b      	ldr	r0, [pc, #108]	; (6f74 <_ext_irq_init+0x100>)
    6f06:	4b29      	ldr	r3, [pc, #164]	; (6fac <_ext_irq_init+0x138>)
    6f08:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    6f0a:	200c      	movs	r0, #12
    6f0c:	4b28      	ldr	r3, [pc, #160]	; (6fb0 <_ext_irq_init+0x13c>)
    6f0e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    6f10:	200c      	movs	r0, #12
    6f12:	4b28      	ldr	r3, [pc, #160]	; (6fb4 <_ext_irq_init+0x140>)
    6f14:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    6f16:	200c      	movs	r0, #12
    6f18:	4b27      	ldr	r3, [pc, #156]	; (6fb8 <_ext_irq_init+0x144>)
    6f1a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    6f1c:	2010      	movs	r0, #16
    6f1e:	4b24      	ldr	r3, [pc, #144]	; (6fb0 <_ext_irq_init+0x13c>)
    6f20:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    6f22:	2010      	movs	r0, #16
    6f24:	4b23      	ldr	r3, [pc, #140]	; (6fb4 <_ext_irq_init+0x140>)
    6f26:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    6f28:	2010      	movs	r0, #16
    6f2a:	4b23      	ldr	r3, [pc, #140]	; (6fb8 <_ext_irq_init+0x144>)
    6f2c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    6f2e:	2011      	movs	r0, #17
    6f30:	4b1f      	ldr	r3, [pc, #124]	; (6fb0 <_ext_irq_init+0x13c>)
    6f32:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    6f34:	2011      	movs	r0, #17
    6f36:	4b1f      	ldr	r3, [pc, #124]	; (6fb4 <_ext_irq_init+0x140>)
    6f38:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    6f3a:	2011      	movs	r0, #17
    6f3c:	4b1e      	ldr	r3, [pc, #120]	; (6fb8 <_ext_irq_init+0x144>)
    6f3e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6f40:	2012      	movs	r0, #18
    6f42:	4b1b      	ldr	r3, [pc, #108]	; (6fb0 <_ext_irq_init+0x13c>)
    6f44:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    6f46:	2012      	movs	r0, #18
    6f48:	4b1a      	ldr	r3, [pc, #104]	; (6fb4 <_ext_irq_init+0x140>)
    6f4a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    6f4c:	2012      	movs	r0, #18
    6f4e:	4b1a      	ldr	r3, [pc, #104]	; (6fb8 <_ext_irq_init+0x144>)
    6f50:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    6f52:	2013      	movs	r0, #19
    6f54:	4b16      	ldr	r3, [pc, #88]	; (6fb0 <_ext_irq_init+0x13c>)
    6f56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    6f58:	2013      	movs	r0, #19
    6f5a:	4b16      	ldr	r3, [pc, #88]	; (6fb4 <_ext_irq_init+0x140>)
    6f5c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    6f5e:	2013      	movs	r0, #19
    6f60:	4b15      	ldr	r3, [pc, #84]	; (6fb8 <_ext_irq_init+0x144>)
    6f62:	4798      	blx	r3

	callback = cb;
    6f64:	4a15      	ldr	r2, [pc, #84]	; (6fbc <_ext_irq_init+0x148>)
    6f66:	687b      	ldr	r3, [r7, #4]
    6f68:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    6f6a:	2300      	movs	r3, #0
}
    6f6c:	4618      	mov	r0, r3
    6f6e:	3708      	adds	r7, #8
    6f70:	46bd      	mov	sp, r7
    6f72:	bd80      	pop	{r7, pc}
    6f74:	40002800 	.word	0x40002800
    6f78:	00006c35 	.word	0x00006c35
    6f7c:	00006d65 	.word	0x00006d65
    6f80:	00006cf5 	.word	0x00006cf5
    6f84:	00006c11 	.word	0x00006c11
    6f88:	00006d95 	.word	0x00006d95
    6f8c:	00006d21 	.word	0x00006d21
    6f90:	00006dbd 	.word	0x00006dbd
    6f94:	00006ddb 	.word	0x00006ddb
    6f98:	00006df7 	.word	0x00006df7
    6f9c:	00006e3b 	.word	0x00006e3b
    6fa0:	00006e57 	.word	0x00006e57
    6fa4:	00990003 	.word	0x00990003
    6fa8:	00006e13 	.word	0x00006e13
    6fac:	00006cc9 	.word	0x00006cc9
    6fb0:	00006b91 	.word	0x00006b91
    6fb4:	00006bd5 	.word	0x00006bd5
    6fb8:	00006b55 	.word	0x00006b55
    6fbc:	200021ac 	.word	0x200021ac

00006fc0 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    6fc0:	b580      	push	{r7, lr}
    6fc2:	b084      	sub	sp, #16
    6fc4:	af00      	add	r7, sp, #0
    6fc6:	6078      	str	r0, [r7, #4]
    6fc8:	460b      	mov	r3, r1
    6fca:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    6fcc:	23ff      	movs	r3, #255	; 0xff
    6fce:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    6fd0:	2300      	movs	r3, #0
    6fd2:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    6fd4:	e010      	b.n	6ff8 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    6fd6:	7bbb      	ldrb	r3, [r7, #14]
    6fd8:	4a1c      	ldr	r2, [pc, #112]	; (704c <_ext_irq_enable+0x8c>)
    6fda:	00db      	lsls	r3, r3, #3
    6fdc:	4413      	add	r3, r2
    6fde:	685a      	ldr	r2, [r3, #4]
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	429a      	cmp	r2, r3
    6fe4:	d105      	bne.n	6ff2 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    6fe6:	7bbb      	ldrb	r3, [r7, #14]
    6fe8:	4a18      	ldr	r2, [pc, #96]	; (704c <_ext_irq_enable+0x8c>)
    6fea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6fee:	73fb      	strb	r3, [r7, #15]
			break;
    6ff0:	e005      	b.n	6ffe <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    6ff2:	7bbb      	ldrb	r3, [r7, #14]
    6ff4:	3301      	adds	r3, #1
    6ff6:	73bb      	strb	r3, [r7, #14]
    6ff8:	7bbb      	ldrb	r3, [r7, #14]
    6ffa:	2b04      	cmp	r3, #4
    6ffc:	d9eb      	bls.n	6fd6 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    6ffe:	7bfb      	ldrb	r3, [r7, #15]
    7000:	2bff      	cmp	r3, #255	; 0xff
    7002:	d102      	bne.n	700a <_ext_irq_enable+0x4a>
		return -1;
    7004:	f04f 33ff 	mov.w	r3, #4294967295
    7008:	e01c      	b.n	7044 <_ext_irq_enable+0x84>
	}

	if (enable) {
    700a:	78fb      	ldrb	r3, [r7, #3]
    700c:	2b00      	cmp	r3, #0
    700e:	d008      	beq.n	7022 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    7010:	7bfb      	ldrb	r3, [r7, #15]
    7012:	2201      	movs	r2, #1
    7014:	fa02 f303 	lsl.w	r3, r2, r3
    7018:	4619      	mov	r1, r3
    701a:	480d      	ldr	r0, [pc, #52]	; (7050 <_ext_irq_enable+0x90>)
    701c:	4b0d      	ldr	r3, [pc, #52]	; (7054 <_ext_irq_enable+0x94>)
    701e:	4798      	blx	r3
    7020:	e00f      	b.n	7042 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    7022:	7bfb      	ldrb	r3, [r7, #15]
    7024:	2201      	movs	r2, #1
    7026:	fa02 f303 	lsl.w	r3, r2, r3
    702a:	4619      	mov	r1, r3
    702c:	4808      	ldr	r0, [pc, #32]	; (7050 <_ext_irq_enable+0x90>)
    702e:	4b0a      	ldr	r3, [pc, #40]	; (7058 <_ext_irq_enable+0x98>)
    7030:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    7032:	7bfb      	ldrb	r3, [r7, #15]
    7034:	2201      	movs	r2, #1
    7036:	fa02 f303 	lsl.w	r3, r2, r3
    703a:	4619      	mov	r1, r3
    703c:	4804      	ldr	r0, [pc, #16]	; (7050 <_ext_irq_enable+0x90>)
    703e:	4b07      	ldr	r3, [pc, #28]	; (705c <_ext_irq_enable+0x9c>)
    7040:	4798      	blx	r3
	}

	return ERR_NONE;
    7042:	2300      	movs	r3, #0
}
    7044:	4618      	mov	r0, r3
    7046:	3710      	adds	r7, #16
    7048:	46bd      	mov	sp, r7
    704a:	bd80      	pop	{r7, pc}
    704c:	00012a14 	.word	0x00012a14
    7050:	40002800 	.word	0x40002800
    7054:	00006c91 	.word	0x00006c91
    7058:	00006cad 	.word	0x00006cad
    705c:	00006c75 	.word	0x00006c75

00007060 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    7060:	b580      	push	{r7, lr}
    7062:	b084      	sub	sp, #16
    7064:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    7066:	4841      	ldr	r0, [pc, #260]	; (716c <_ext_irq_handler+0x10c>)
    7068:	4b41      	ldr	r3, [pc, #260]	; (7170 <_ext_irq_handler+0x110>)
    706a:	4798      	blx	r3
    706c:	4603      	mov	r3, r0
    706e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    7070:	f04f 33ff 	mov.w	r3, #4294967295
    7074:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    7076:	683b      	ldr	r3, [r7, #0]
    7078:	4619      	mov	r1, r3
    707a:	483c      	ldr	r0, [pc, #240]	; (716c <_ext_irq_handler+0x10c>)
    707c:	4b3d      	ldr	r3, [pc, #244]	; (7174 <_ext_irq_handler+0x114>)
    707e:	4798      	blx	r3

	ASSERT(callback);
    7080:	4b3d      	ldr	r3, [pc, #244]	; (7178 <_ext_irq_handler+0x118>)
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	2b00      	cmp	r3, #0
    7086:	bf14      	ite	ne
    7088:	2301      	movne	r3, #1
    708a:	2300      	moveq	r3, #0
    708c:	b2db      	uxtb	r3, r3
    708e:	22f8      	movs	r2, #248	; 0xf8
    7090:	493a      	ldr	r1, [pc, #232]	; (717c <_ext_irq_handler+0x11c>)
    7092:	4618      	mov	r0, r3
    7094:	4b3a      	ldr	r3, [pc, #232]	; (7180 <_ext_irq_handler+0x120>)
    7096:	4798      	blx	r3

	while (flags) {
    7098:	e060      	b.n	715c <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    709a:	683b      	ldr	r3, [r7, #0]
    709c:	4618      	mov	r0, r3
    709e:	4b39      	ldr	r3, [pc, #228]	; (7184 <_ext_irq_handler+0x124>)
    70a0:	4798      	blx	r3
    70a2:	4603      	mov	r3, r0
    70a4:	b2db      	uxtb	r3, r3
    70a6:	3b01      	subs	r3, #1
    70a8:	b2db      	uxtb	r3, r3
    70aa:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    70ac:	e047      	b.n	713e <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    70ae:	2300      	movs	r3, #0
    70b0:	71fb      	strb	r3, [r7, #7]
    70b2:	2305      	movs	r3, #5
    70b4:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    70b6:	e024      	b.n	7102 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    70b8:	79ba      	ldrb	r2, [r7, #6]
    70ba:	79fb      	ldrb	r3, [r7, #7]
    70bc:	4413      	add	r3, r2
    70be:	105b      	asrs	r3, r3, #1
    70c0:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    70c2:	797b      	ldrb	r3, [r7, #5]
    70c4:	4a30      	ldr	r2, [pc, #192]	; (7188 <_ext_irq_handler+0x128>)
    70c6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    70ca:	461a      	mov	r2, r3
    70cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    70d0:	429a      	cmp	r2, r3
    70d2:	d106      	bne.n	70e2 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    70d4:	797b      	ldrb	r3, [r7, #5]
    70d6:	4a2c      	ldr	r2, [pc, #176]	; (7188 <_ext_irq_handler+0x128>)
    70d8:	00db      	lsls	r3, r3, #3
    70da:	4413      	add	r3, r2
    70dc:	685b      	ldr	r3, [r3, #4]
    70de:	60bb      	str	r3, [r7, #8]
					break;
    70e0:	e013      	b.n	710a <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    70e2:	797b      	ldrb	r3, [r7, #5]
    70e4:	4a28      	ldr	r2, [pc, #160]	; (7188 <_ext_irq_handler+0x128>)
    70e6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    70ea:	461a      	mov	r2, r3
    70ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    70f0:	429a      	cmp	r2, r3
    70f2:	da03      	bge.n	70fc <_ext_irq_handler+0x9c>
					lower = middle + 1;
    70f4:	797b      	ldrb	r3, [r7, #5]
    70f6:	3301      	adds	r3, #1
    70f8:	71fb      	strb	r3, [r7, #7]
    70fa:	e002      	b.n	7102 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    70fc:	797b      	ldrb	r3, [r7, #5]
    70fe:	3b01      	subs	r3, #1
    7100:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    7102:	79ba      	ldrb	r2, [r7, #6]
    7104:	79fb      	ldrb	r3, [r7, #7]
    7106:	429a      	cmp	r2, r3
    7108:	d2d6      	bcs.n	70b8 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    710a:	68bb      	ldr	r3, [r7, #8]
    710c:	f1b3 3fff 	cmp.w	r3, #4294967295
    7110:	d003      	beq.n	711a <_ext_irq_handler+0xba>
				callback(pin);
    7112:	4b19      	ldr	r3, [pc, #100]	; (7178 <_ext_irq_handler+0x118>)
    7114:	681b      	ldr	r3, [r3, #0]
    7116:	68b8      	ldr	r0, [r7, #8]
    7118:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    711a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    711e:	2201      	movs	r2, #1
    7120:	fa02 f303 	lsl.w	r3, r2, r3
    7124:	43da      	mvns	r2, r3
    7126:	683b      	ldr	r3, [r7, #0]
    7128:	4013      	ands	r3, r2
    712a:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    712c:	683b      	ldr	r3, [r7, #0]
    712e:	4618      	mov	r0, r3
    7130:	4b14      	ldr	r3, [pc, #80]	; (7184 <_ext_irq_handler+0x124>)
    7132:	4798      	blx	r3
    7134:	4603      	mov	r3, r0
    7136:	b2db      	uxtb	r3, r3
    7138:	3b01      	subs	r3, #1
    713a:	b2db      	uxtb	r3, r3
    713c:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    713e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7142:	f1b3 3fff 	cmp.w	r3, #4294967295
    7146:	d1b2      	bne.n	70ae <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    7148:	4808      	ldr	r0, [pc, #32]	; (716c <_ext_irq_handler+0x10c>)
    714a:	4b09      	ldr	r3, [pc, #36]	; (7170 <_ext_irq_handler+0x110>)
    714c:	4798      	blx	r3
    714e:	4603      	mov	r3, r0
    7150:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    7152:	683b      	ldr	r3, [r7, #0]
    7154:	4619      	mov	r1, r3
    7156:	4805      	ldr	r0, [pc, #20]	; (716c <_ext_irq_handler+0x10c>)
    7158:	4b06      	ldr	r3, [pc, #24]	; (7174 <_ext_irq_handler+0x114>)
    715a:	4798      	blx	r3
	while (flags) {
    715c:	683b      	ldr	r3, [r7, #0]
    715e:	2b00      	cmp	r3, #0
    7160:	d19b      	bne.n	709a <_ext_irq_handler+0x3a>
	}
}
    7162:	bf00      	nop
    7164:	3710      	adds	r7, #16
    7166:	46bd      	mov	sp, r7
    7168:	bd80      	pop	{r7, pc}
    716a:	bf00      	nop
    716c:	40002800 	.word	0x40002800
    7170:	00006c5d 	.word	0x00006c5d
    7174:	00006c75 	.word	0x00006c75
    7178:	200021ac 	.word	0x200021ac
    717c:	00012a3c 	.word	0x00012a3c
    7180:	00005ed5 	.word	0x00005ed5
    7184:	000116d5 	.word	0x000116d5
    7188:	00012a14 	.word	0x00012a14

0000718c <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    718c:	b580      	push	{r7, lr}
    718e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7190:	4b01      	ldr	r3, [pc, #4]	; (7198 <EIC_0_Handler+0xc>)
    7192:	4798      	blx	r3
} /**
    7194:	bf00      	nop
    7196:	bd80      	pop	{r7, pc}
    7198:	00007061 	.word	0x00007061

0000719c <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    719c:	b580      	push	{r7, lr}
    719e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    71a0:	4b01      	ldr	r3, [pc, #4]	; (71a8 <EIC_4_Handler+0xc>)
    71a2:	4798      	blx	r3
} /**
    71a4:	bf00      	nop
    71a6:	bd80      	pop	{r7, pc}
    71a8:	00007061 	.word	0x00007061

000071ac <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    71ac:	b580      	push	{r7, lr}
    71ae:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    71b0:	4b01      	ldr	r3, [pc, #4]	; (71b8 <EIC_5_Handler+0xc>)
    71b2:	4798      	blx	r3
} /**
    71b4:	bf00      	nop
    71b6:	bd80      	pop	{r7, pc}
    71b8:	00007061 	.word	0x00007061

000071bc <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    71bc:	b580      	push	{r7, lr}
    71be:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    71c0:	4b01      	ldr	r3, [pc, #4]	; (71c8 <EIC_6_Handler+0xc>)
    71c2:	4798      	blx	r3
} /**
    71c4:	bf00      	nop
    71c6:	bd80      	pop	{r7, pc}
    71c8:	00007061 	.word	0x00007061

000071cc <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    71cc:	b580      	push	{r7, lr}
    71ce:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    71d0:	4b01      	ldr	r3, [pc, #4]	; (71d8 <EIC_7_Handler+0xc>)
    71d2:	4798      	blx	r3
}
    71d4:	bf00      	nop
    71d6:	bd80      	pop	{r7, pc}
    71d8:	00007061 	.word	0x00007061

000071dc <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    71dc:	b480      	push	{r7}
    71de:	b085      	sub	sp, #20
    71e0:	af00      	add	r7, sp, #0
    71e2:	60f8      	str	r0, [r7, #12]
    71e4:	460b      	mov	r3, r1
    71e6:	607a      	str	r2, [r7, #4]
    71e8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    71ea:	7afa      	ldrb	r2, [r7, #11]
    71ec:	68fb      	ldr	r3, [r7, #12]
    71ee:	3248      	adds	r2, #72	; 0x48
    71f0:	6879      	ldr	r1, [r7, #4]
    71f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    71f6:	bf00      	nop
    71f8:	3714      	adds	r7, #20
    71fa:	46bd      	mov	sp, r7
    71fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7200:	4770      	bx	lr

00007202 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    7202:	b480      	push	{r7}
    7204:	b083      	sub	sp, #12
    7206:	af00      	add	r7, sp, #0
    7208:	6078      	str	r0, [r7, #4]
    720a:	460b      	mov	r3, r1
    720c:	70fb      	strb	r3, [r7, #3]
    720e:	4613      	mov	r3, r2
    7210:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    7212:	78fb      	ldrb	r3, [r7, #3]
    7214:	687a      	ldr	r2, [r7, #4]
    7216:	3304      	adds	r3, #4
    7218:	00db      	lsls	r3, r3, #3
    721a:	4413      	add	r3, r2
    721c:	78ba      	ldrb	r2, [r7, #2]
    721e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    7220:	78fb      	ldrb	r3, [r7, #3]
    7222:	78ba      	ldrb	r2, [r7, #2]
    7224:	43d2      	mvns	r2, r2
    7226:	b2d1      	uxtb	r1, r2
    7228:	687a      	ldr	r2, [r7, #4]
    722a:	3304      	adds	r3, #4
    722c:	00db      	lsls	r3, r3, #3
    722e:	4413      	add	r3, r2
    7230:	460a      	mov	r2, r1
    7232:	711a      	strb	r2, [r3, #4]
}
    7234:	bf00      	nop
    7236:	370c      	adds	r7, #12
    7238:	46bd      	mov	sp, r7
    723a:	f85d 7b04 	ldr.w	r7, [sp], #4
    723e:	4770      	bx	lr

00007240 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    7240:	b480      	push	{r7}
    7242:	b085      	sub	sp, #20
    7244:	af00      	add	r7, sp, #0
    7246:	60f8      	str	r0, [r7, #12]
    7248:	460b      	mov	r3, r1
    724a:	607a      	str	r2, [r7, #4]
    724c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    724e:	7afa      	ldrb	r2, [r7, #11]
    7250:	68fb      	ldr	r3, [r7, #12]
    7252:	3204      	adds	r2, #4
    7254:	6879      	ldr	r1, [r7, #4]
    7256:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    725a:	bf00      	nop
    725c:	3714      	adds	r7, #20
    725e:	46bd      	mov	sp, r7
    7260:	f85d 7b04 	ldr.w	r7, [sp], #4
    7264:	4770      	bx	lr
	...

00007268 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    7268:	b580      	push	{r7, lr}
    726a:	b082      	sub	sp, #8
    726c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    726e:	2300      	movs	r3, #0
    7270:	71fb      	strb	r3, [r7, #7]
    7272:	e00b      	b.n	728c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    7274:	79fb      	ldrb	r3, [r7, #7]
    7276:	4a18      	ldr	r2, [pc, #96]	; (72d8 <_event_system_init+0x70>)
    7278:	5cd3      	ldrb	r3, [r2, r3]
    727a:	461a      	mov	r2, r3
    727c:	79fb      	ldrb	r3, [r7, #7]
    727e:	4619      	mov	r1, r3
    7280:	4816      	ldr	r0, [pc, #88]	; (72dc <_event_system_init+0x74>)
    7282:	4b17      	ldr	r3, [pc, #92]	; (72e0 <_event_system_init+0x78>)
    7284:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    7286:	79fb      	ldrb	r3, [r7, #7]
    7288:	3301      	adds	r3, #1
    728a:	71fb      	strb	r3, [r7, #7]
    728c:	79fb      	ldrb	r3, [r7, #7]
    728e:	2b42      	cmp	r3, #66	; 0x42
    7290:	d9f0      	bls.n	7274 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7292:	2300      	movs	r3, #0
    7294:	71fb      	strb	r3, [r7, #7]
    7296:	e016      	b.n	72c6 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    7298:	79fb      	ldrb	r3, [r7, #7]
    729a:	4a12      	ldr	r2, [pc, #72]	; (72e4 <_event_system_init+0x7c>)
    729c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    72a0:	461a      	mov	r2, r3
    72a2:	79fb      	ldrb	r3, [r7, #7]
    72a4:	4619      	mov	r1, r3
    72a6:	480d      	ldr	r0, [pc, #52]	; (72dc <_event_system_init+0x74>)
    72a8:	4b0f      	ldr	r3, [pc, #60]	; (72e8 <_event_system_init+0x80>)
    72aa:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    72ac:	79fb      	ldrb	r3, [r7, #7]
    72ae:	4a0f      	ldr	r2, [pc, #60]	; (72ec <_event_system_init+0x84>)
    72b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72b4:	b2da      	uxtb	r2, r3
    72b6:	79fb      	ldrb	r3, [r7, #7]
    72b8:	4619      	mov	r1, r3
    72ba:	4808      	ldr	r0, [pc, #32]	; (72dc <_event_system_init+0x74>)
    72bc:	4b0c      	ldr	r3, [pc, #48]	; (72f0 <_event_system_init+0x88>)
    72be:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    72c0:	79fb      	ldrb	r3, [r7, #7]
    72c2:	3301      	adds	r3, #1
    72c4:	71fb      	strb	r3, [r7, #7]
    72c6:	79fb      	ldrb	r3, [r7, #7]
    72c8:	2b1f      	cmp	r3, #31
    72ca:	d9e5      	bls.n	7298 <_event_system_init+0x30>
	}

	return ERR_NONE;
    72cc:	2300      	movs	r3, #0
}
    72ce:	4618      	mov	r0, r3
    72d0:	3708      	adds	r7, #8
    72d2:	46bd      	mov	sp, r7
    72d4:	bd80      	pop	{r7, pc}
    72d6:	bf00      	nop
    72d8:	00012a54 	.word	0x00012a54
    72dc:	4100e000 	.word	0x4100e000
    72e0:	000071dd 	.word	0x000071dd
    72e4:	00012a98 	.word	0x00012a98
    72e8:	00007241 	.word	0x00007241
    72ec:	00012ad8 	.word	0x00012ad8
    72f0:	00007203 	.word	0x00007203

000072f4 <hri_gclk_wait_for_sync>:
{
    72f4:	b480      	push	{r7}
    72f6:	b083      	sub	sp, #12
    72f8:	af00      	add	r7, sp, #0
    72fa:	6078      	str	r0, [r7, #4]
    72fc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    72fe:	bf00      	nop
    7300:	687b      	ldr	r3, [r7, #4]
    7302:	685a      	ldr	r2, [r3, #4]
    7304:	683b      	ldr	r3, [r7, #0]
    7306:	4013      	ands	r3, r2
    7308:	2b00      	cmp	r3, #0
    730a:	d1f9      	bne.n	7300 <hri_gclk_wait_for_sync+0xc>
}
    730c:	bf00      	nop
    730e:	370c      	adds	r7, #12
    7310:	46bd      	mov	sp, r7
    7312:	f85d 7b04 	ldr.w	r7, [sp], #4
    7316:	4770      	bx	lr

00007318 <hri_gclk_write_GENCTRL_reg>:
{
    7318:	b580      	push	{r7, lr}
    731a:	b084      	sub	sp, #16
    731c:	af00      	add	r7, sp, #0
    731e:	60f8      	str	r0, [r7, #12]
    7320:	460b      	mov	r3, r1
    7322:	607a      	str	r2, [r7, #4]
    7324:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7326:	7afa      	ldrb	r2, [r7, #11]
    7328:	68fb      	ldr	r3, [r7, #12]
    732a:	3208      	adds	r2, #8
    732c:	6879      	ldr	r1, [r7, #4]
    732e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7332:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7336:	68f8      	ldr	r0, [r7, #12]
    7338:	4b02      	ldr	r3, [pc, #8]	; (7344 <hri_gclk_write_GENCTRL_reg+0x2c>)
    733a:	4798      	blx	r3
}
    733c:	bf00      	nop
    733e:	3710      	adds	r7, #16
    7340:	46bd      	mov	sp, r7
    7342:	bd80      	pop	{r7, pc}
    7344:	000072f5 	.word	0x000072f5

00007348 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    7348:	b580      	push	{r7, lr}
    734a:	b082      	sub	sp, #8
    734c:	af00      	add	r7, sp, #0
    734e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	f003 0301 	and.w	r3, r3, #1
    7356:	2b00      	cmp	r3, #0
    7358:	d004      	beq.n	7364 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    735a:	4a36      	ldr	r2, [pc, #216]	; (7434 <_gclk_init_generators_by_fref+0xec>)
    735c:	2100      	movs	r1, #0
    735e:	4836      	ldr	r0, [pc, #216]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    7360:	4b36      	ldr	r3, [pc, #216]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    7362:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    7364:	687b      	ldr	r3, [r7, #4]
    7366:	f003 0302 	and.w	r3, r3, #2
    736a:	2b00      	cmp	r3, #0
    736c:	d004      	beq.n	7378 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    736e:	4a34      	ldr	r2, [pc, #208]	; (7440 <_gclk_init_generators_by_fref+0xf8>)
    7370:	2101      	movs	r1, #1
    7372:	4831      	ldr	r0, [pc, #196]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    7374:	4b31      	ldr	r3, [pc, #196]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    7376:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7378:	687b      	ldr	r3, [r7, #4]
    737a:	f003 0304 	and.w	r3, r3, #4
    737e:	2b00      	cmp	r3, #0
    7380:	d004      	beq.n	738c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    7382:	4a30      	ldr	r2, [pc, #192]	; (7444 <_gclk_init_generators_by_fref+0xfc>)
    7384:	2102      	movs	r1, #2
    7386:	482c      	ldr	r0, [pc, #176]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    7388:	4b2c      	ldr	r3, [pc, #176]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    738a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	f003 0308 	and.w	r3, r3, #8
    7392:	2b00      	cmp	r3, #0
    7394:	d004      	beq.n	73a0 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    7396:	4a2c      	ldr	r2, [pc, #176]	; (7448 <_gclk_init_generators_by_fref+0x100>)
    7398:	2103      	movs	r1, #3
    739a:	4827      	ldr	r0, [pc, #156]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    739c:	4b27      	ldr	r3, [pc, #156]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    739e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	f003 0310 	and.w	r3, r3, #16
    73a6:	2b00      	cmp	r3, #0
    73a8:	d004      	beq.n	73b4 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    73aa:	4a28      	ldr	r2, [pc, #160]	; (744c <_gclk_init_generators_by_fref+0x104>)
    73ac:	2104      	movs	r1, #4
    73ae:	4822      	ldr	r0, [pc, #136]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    73b0:	4b22      	ldr	r3, [pc, #136]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    73b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    73b4:	687b      	ldr	r3, [r7, #4]
    73b6:	f003 0320 	and.w	r3, r3, #32
    73ba:	2b00      	cmp	r3, #0
    73bc:	d004      	beq.n	73c8 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    73be:	4a24      	ldr	r2, [pc, #144]	; (7450 <_gclk_init_generators_by_fref+0x108>)
    73c0:	2105      	movs	r1, #5
    73c2:	481d      	ldr	r0, [pc, #116]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    73c4:	4b1d      	ldr	r3, [pc, #116]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    73c6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    73ce:	2b00      	cmp	r3, #0
    73d0:	d004      	beq.n	73dc <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    73d2:	4a20      	ldr	r2, [pc, #128]	; (7454 <_gclk_init_generators_by_fref+0x10c>)
    73d4:	2106      	movs	r1, #6
    73d6:	4818      	ldr	r0, [pc, #96]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    73d8:	4b18      	ldr	r3, [pc, #96]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    73da:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    73dc:	687b      	ldr	r3, [r7, #4]
    73de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    73e2:	2b00      	cmp	r3, #0
    73e4:	d004      	beq.n	73f0 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    73e6:	4a1c      	ldr	r2, [pc, #112]	; (7458 <_gclk_init_generators_by_fref+0x110>)
    73e8:	2107      	movs	r1, #7
    73ea:	4813      	ldr	r0, [pc, #76]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    73ec:	4b13      	ldr	r3, [pc, #76]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    73ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    73f0:	687b      	ldr	r3, [r7, #4]
    73f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    73f6:	2b00      	cmp	r3, #0
    73f8:	d004      	beq.n	7404 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    73fa:	4a18      	ldr	r2, [pc, #96]	; (745c <_gclk_init_generators_by_fref+0x114>)
    73fc:	2108      	movs	r1, #8
    73fe:	480e      	ldr	r0, [pc, #56]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    7400:	4b0e      	ldr	r3, [pc, #56]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    7402:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    7404:	687b      	ldr	r3, [r7, #4]
    7406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    740a:	2b00      	cmp	r3, #0
    740c:	d004      	beq.n	7418 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    740e:	4a14      	ldr	r2, [pc, #80]	; (7460 <_gclk_init_generators_by_fref+0x118>)
    7410:	210a      	movs	r1, #10
    7412:	4809      	ldr	r0, [pc, #36]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    7414:	4b09      	ldr	r3, [pc, #36]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    7416:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    741e:	2b00      	cmp	r3, #0
    7420:	d004      	beq.n	742c <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    7422:	4a10      	ldr	r2, [pc, #64]	; (7464 <_gclk_init_generators_by_fref+0x11c>)
    7424:	210b      	movs	r1, #11
    7426:	4804      	ldr	r0, [pc, #16]	; (7438 <_gclk_init_generators_by_fref+0xf0>)
    7428:	4b04      	ldr	r3, [pc, #16]	; (743c <_gclk_init_generators_by_fref+0xf4>)
    742a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    742c:	bf00      	nop
    742e:	3708      	adds	r7, #8
    7430:	46bd      	mov	sp, r7
    7432:	bd80      	pop	{r7, pc}
    7434:	00010107 	.word	0x00010107
    7438:	40001c00 	.word	0x40001c00
    743c:	00007319 	.word	0x00007319
    7440:	00010907 	.word	0x00010907
    7444:	00010906 	.word	0x00010906
    7448:	00020908 	.word	0x00020908
    744c:	00010901 	.word	0x00010901
    7450:	00062901 	.word	0x00062901
    7454:	000c2901 	.word	0x000c2901
    7458:	00082908 	.word	0x00082908
    745c:	00032901 	.word	0x00032901
    7460:	00010905 	.word	0x00010905
    7464:	00041905 	.word	0x00041905

00007468 <hri_mclk_write_CPUDIV_reg>:
{
    7468:	b480      	push	{r7}
    746a:	b083      	sub	sp, #12
    746c:	af00      	add	r7, sp, #0
    746e:	6078      	str	r0, [r7, #4]
    7470:	460b      	mov	r3, r1
    7472:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    7474:	687b      	ldr	r3, [r7, #4]
    7476:	78fa      	ldrb	r2, [r7, #3]
    7478:	715a      	strb	r2, [r3, #5]
}
    747a:	bf00      	nop
    747c:	370c      	adds	r7, #12
    747e:	46bd      	mov	sp, r7
    7480:	f85d 7b04 	ldr.w	r7, [sp], #4
    7484:	4770      	bx	lr
	...

00007488 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    7488:	b580      	push	{r7, lr}
    748a:	b082      	sub	sp, #8
    748c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    748e:	4b05      	ldr	r3, [pc, #20]	; (74a4 <_mclk_init+0x1c>)
    7490:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    7492:	2101      	movs	r1, #1
    7494:	6878      	ldr	r0, [r7, #4]
    7496:	4b04      	ldr	r3, [pc, #16]	; (74a8 <_mclk_init+0x20>)
    7498:	4798      	blx	r3
}
    749a:	bf00      	nop
    749c:	3708      	adds	r7, #8
    749e:	46bd      	mov	sp, r7
    74a0:	bd80      	pop	{r7, pc}
    74a2:	bf00      	nop
    74a4:	40000800 	.word	0x40000800
    74a8:	00007469 	.word	0x00007469

000074ac <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    74ac:	b480      	push	{r7}
    74ae:	b083      	sub	sp, #12
    74b0:	af00      	add	r7, sp, #0
    74b2:	6078      	str	r0, [r7, #4]
    74b4:	460b      	mov	r3, r1
    74b6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    74b8:	687b      	ldr	r3, [r7, #4]
    74ba:	78fa      	ldrb	r2, [r7, #3]
    74bc:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    74be:	bf00      	nop
    74c0:	370c      	adds	r7, #12
    74c2:	46bd      	mov	sp, r7
    74c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    74c8:	4770      	bx	lr

000074ca <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    74ca:	b480      	push	{r7}
    74cc:	b083      	sub	sp, #12
    74ce:	af00      	add	r7, sp, #0
    74d0:	6078      	str	r0, [r7, #4]
    74d2:	460b      	mov	r3, r1
    74d4:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    74d6:	687b      	ldr	r3, [r7, #4]
    74d8:	887a      	ldrh	r2, [r7, #2]
    74da:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    74dc:	bf00      	nop
    74de:	370c      	adds	r7, #12
    74e0:	46bd      	mov	sp, r7
    74e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    74e6:	4770      	bx	lr

000074e8 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    74e8:	b480      	push	{r7}
    74ea:	b083      	sub	sp, #12
    74ec:	af00      	add	r7, sp, #0
    74ee:	6078      	str	r0, [r7, #4]
    74f0:	460b      	mov	r3, r1
    74f2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    74f4:	687b      	ldr	r3, [r7, #4]
    74f6:	78fa      	ldrb	r2, [r7, #3]
    74f8:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    74fa:	bf00      	nop
    74fc:	370c      	adds	r7, #12
    74fe:	46bd      	mov	sp, r7
    7500:	f85d 7b04 	ldr.w	r7, [sp], #4
    7504:	4770      	bx	lr

00007506 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    7506:	b480      	push	{r7}
    7508:	b083      	sub	sp, #12
    750a:	af00      	add	r7, sp, #0
    750c:	6078      	str	r0, [r7, #4]
    750e:	460b      	mov	r3, r1
    7510:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    7512:	687b      	ldr	r3, [r7, #4]
    7514:	78fa      	ldrb	r2, [r7, #3]
    7516:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    7518:	bf00      	nop
    751a:	370c      	adds	r7, #12
    751c:	46bd      	mov	sp, r7
    751e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7522:	4770      	bx	lr

00007524 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    7524:	b480      	push	{r7}
    7526:	b085      	sub	sp, #20
    7528:	af00      	add	r7, sp, #0
    752a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    752c:	687b      	ldr	r3, [r7, #4]
    752e:	69db      	ldr	r3, [r3, #28]
    7530:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    7532:	68fb      	ldr	r3, [r7, #12]
    7534:	0a1b      	lsrs	r3, r3, #8
    7536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    753a:	60fb      	str	r3, [r7, #12]
	return tmp;
    753c:	68fb      	ldr	r3, [r7, #12]
}
    753e:	4618      	mov	r0, r3
    7540:	3714      	adds	r7, #20
    7542:	46bd      	mov	sp, r7
    7544:	f85d 7b04 	ldr.w	r7, [sp], #4
    7548:	4770      	bx	lr

0000754a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    754a:	b480      	push	{r7}
    754c:	b083      	sub	sp, #12
    754e:	af00      	add	r7, sp, #0
    7550:	6078      	str	r0, [r7, #4]
    7552:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	683a      	ldr	r2, [r7, #0]
    7558:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    755a:	bf00      	nop
    755c:	370c      	adds	r7, #12
    755e:	46bd      	mov	sp, r7
    7560:	f85d 7b04 	ldr.w	r7, [sp], #4
    7564:	4770      	bx	lr
	...

00007568 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    7568:	b580      	push	{r7, lr}
    756a:	b082      	sub	sp, #8
    756c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    756e:	4b13      	ldr	r3, [pc, #76]	; (75bc <_osc32kctrl_init_sources+0x54>)
    7570:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    7572:	2300      	movs	r3, #0
    7574:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    7576:	f242 018e 	movw	r1, #8334	; 0x208e
    757a:	6878      	ldr	r0, [r7, #4]
    757c:	4b10      	ldr	r3, [pc, #64]	; (75c0 <_osc32kctrl_init_sources+0x58>)
    757e:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    7580:	2100      	movs	r1, #0
    7582:	6878      	ldr	r0, [r7, #4]
    7584:	4b0f      	ldr	r3, [pc, #60]	; (75c4 <_osc32kctrl_init_sources+0x5c>)
    7586:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    7588:	2100      	movs	r1, #0
    758a:	6878      	ldr	r0, [r7, #4]
    758c:	4b0e      	ldr	r3, [pc, #56]	; (75c8 <_osc32kctrl_init_sources+0x60>)
    758e:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    7590:	6878      	ldr	r0, [r7, #4]
    7592:	4b0e      	ldr	r3, [pc, #56]	; (75cc <_osc32kctrl_init_sources+0x64>)
    7594:	4798      	blx	r3
    7596:	4603      	mov	r3, r0
    7598:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    759a:	887b      	ldrh	r3, [r7, #2]
    759c:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    759e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    75a2:	4619      	mov	r1, r3
    75a4:	6878      	ldr	r0, [r7, #4]
    75a6:	4b0a      	ldr	r3, [pc, #40]	; (75d0 <_osc32kctrl_init_sources+0x68>)
    75a8:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    75aa:	2100      	movs	r1, #0
    75ac:	6878      	ldr	r0, [r7, #4]
    75ae:	4b09      	ldr	r3, [pc, #36]	; (75d4 <_osc32kctrl_init_sources+0x6c>)
    75b0:	4798      	blx	r3
	(void)calib;
}
    75b2:	bf00      	nop
    75b4:	3708      	adds	r7, #8
    75b6:	46bd      	mov	sp, r7
    75b8:	bd80      	pop	{r7, pc}
    75ba:	bf00      	nop
    75bc:	40001400 	.word	0x40001400
    75c0:	000074cb 	.word	0x000074cb
    75c4:	000074e9 	.word	0x000074e9
    75c8:	00007507 	.word	0x00007507
    75cc:	00007525 	.word	0x00007525
    75d0:	0000754b 	.word	0x0000754b
    75d4:	000074ad 	.word	0x000074ad

000075d8 <hri_gclk_wait_for_sync>:
{
    75d8:	b480      	push	{r7}
    75da:	b083      	sub	sp, #12
    75dc:	af00      	add	r7, sp, #0
    75de:	6078      	str	r0, [r7, #4]
    75e0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    75e2:	bf00      	nop
    75e4:	687b      	ldr	r3, [r7, #4]
    75e6:	685a      	ldr	r2, [r3, #4]
    75e8:	683b      	ldr	r3, [r7, #0]
    75ea:	4013      	ands	r3, r2
    75ec:	2b00      	cmp	r3, #0
    75ee:	d1f9      	bne.n	75e4 <hri_gclk_wait_for_sync+0xc>
}
    75f0:	bf00      	nop
    75f2:	370c      	adds	r7, #12
    75f4:	46bd      	mov	sp, r7
    75f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75fa:	4770      	bx	lr

000075fc <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    75fc:	b480      	push	{r7}
    75fe:	b083      	sub	sp, #12
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	685b      	ldr	r3, [r3, #4]
    7608:	089b      	lsrs	r3, r3, #2
    760a:	f003 0301 	and.w	r3, r3, #1
    760e:	2b00      	cmp	r3, #0
    7610:	bf14      	ite	ne
    7612:	2301      	movne	r3, #1
    7614:	2300      	moveq	r3, #0
    7616:	b2db      	uxtb	r3, r3
}
    7618:	4618      	mov	r0, r3
    761a:	370c      	adds	r7, #12
    761c:	46bd      	mov	sp, r7
    761e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7622:	4770      	bx	lr

00007624 <hri_gclk_read_SYNCBUSY_reg>:
{
    7624:	b480      	push	{r7}
    7626:	b083      	sub	sp, #12
    7628:	af00      	add	r7, sp, #0
    762a:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	685b      	ldr	r3, [r3, #4]
}
    7630:	4618      	mov	r0, r3
    7632:	370c      	adds	r7, #12
    7634:	46bd      	mov	sp, r7
    7636:	f85d 7b04 	ldr.w	r7, [sp], #4
    763a:	4770      	bx	lr

0000763c <hri_gclk_write_GENCTRL_SRC_bf>:
{
    763c:	b580      	push	{r7, lr}
    763e:	b086      	sub	sp, #24
    7640:	af00      	add	r7, sp, #0
    7642:	60f8      	str	r0, [r7, #12]
    7644:	460b      	mov	r3, r1
    7646:	607a      	str	r2, [r7, #4]
    7648:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    764a:	7afa      	ldrb	r2, [r7, #11]
    764c:	68fb      	ldr	r3, [r7, #12]
    764e:	3208      	adds	r2, #8
    7650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7654:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7656:	697b      	ldr	r3, [r7, #20]
    7658:	f023 030f 	bic.w	r3, r3, #15
    765c:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    765e:	687b      	ldr	r3, [r7, #4]
    7660:	f003 030f 	and.w	r3, r3, #15
    7664:	697a      	ldr	r2, [r7, #20]
    7666:	4313      	orrs	r3, r2
    7668:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    766a:	7afa      	ldrb	r2, [r7, #11]
    766c:	68fb      	ldr	r3, [r7, #12]
    766e:	3208      	adds	r2, #8
    7670:	6979      	ldr	r1, [r7, #20]
    7672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7676:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    767a:	68f8      	ldr	r0, [r7, #12]
    767c:	4b02      	ldr	r3, [pc, #8]	; (7688 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    767e:	4798      	blx	r3
}
    7680:	bf00      	nop
    7682:	3718      	adds	r7, #24
    7684:	46bd      	mov	sp, r7
    7686:	bd80      	pop	{r7, pc}
    7688:	000075d9 	.word	0x000075d9

0000768c <hri_gclk_write_PCHCTRL_reg>:
{
    768c:	b480      	push	{r7}
    768e:	b085      	sub	sp, #20
    7690:	af00      	add	r7, sp, #0
    7692:	60f8      	str	r0, [r7, #12]
    7694:	460b      	mov	r3, r1
    7696:	607a      	str	r2, [r7, #4]
    7698:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    769a:	7afa      	ldrb	r2, [r7, #11]
    769c:	68fb      	ldr	r3, [r7, #12]
    769e:	3220      	adds	r2, #32
    76a0:	6879      	ldr	r1, [r7, #4]
    76a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    76a6:	bf00      	nop
    76a8:	3714      	adds	r7, #20
    76aa:	46bd      	mov	sp, r7
    76ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    76b0:	4770      	bx	lr

000076b2 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    76b2:	b480      	push	{r7}
    76b4:	b085      	sub	sp, #20
    76b6:	af00      	add	r7, sp, #0
    76b8:	60f8      	str	r0, [r7, #12]
    76ba:	460b      	mov	r3, r1
    76bc:	607a      	str	r2, [r7, #4]
    76be:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    76c0:	bf00      	nop
    76c2:	7afa      	ldrb	r2, [r7, #11]
    76c4:	68f9      	ldr	r1, [r7, #12]
    76c6:	4613      	mov	r3, r2
    76c8:	009b      	lsls	r3, r3, #2
    76ca:	4413      	add	r3, r2
    76cc:	009b      	lsls	r3, r3, #2
    76ce:	440b      	add	r3, r1
    76d0:	333c      	adds	r3, #60	; 0x3c
    76d2:	681a      	ldr	r2, [r3, #0]
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	4013      	ands	r3, r2
    76d8:	2b00      	cmp	r3, #0
    76da:	d1f2      	bne.n	76c2 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    76dc:	bf00      	nop
    76de:	3714      	adds	r7, #20
    76e0:	46bd      	mov	sp, r7
    76e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    76e6:	4770      	bx	lr

000076e8 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    76e8:	b480      	push	{r7}
    76ea:	b083      	sub	sp, #12
    76ec:	af00      	add	r7, sp, #0
    76ee:	6078      	str	r0, [r7, #4]
    76f0:	460b      	mov	r3, r1
    76f2:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    76f4:	78fa      	ldrb	r2, [r7, #3]
    76f6:	6879      	ldr	r1, [r7, #4]
    76f8:	4613      	mov	r3, r2
    76fa:	009b      	lsls	r3, r3, #2
    76fc:	4413      	add	r3, r2
    76fe:	009b      	lsls	r3, r3, #2
    7700:	440b      	add	r3, r1
    7702:	3340      	adds	r3, #64	; 0x40
    7704:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    7706:	f003 0301 	and.w	r3, r3, #1
    770a:	2b00      	cmp	r3, #0
    770c:	bf14      	ite	ne
    770e:	2301      	movne	r3, #1
    7710:	2300      	moveq	r3, #0
    7712:	b2db      	uxtb	r3, r3
}
    7714:	4618      	mov	r0, r3
    7716:	370c      	adds	r7, #12
    7718:	46bd      	mov	sp, r7
    771a:	f85d 7b04 	ldr.w	r7, [sp], #4
    771e:	4770      	bx	lr

00007720 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    7720:	b480      	push	{r7}
    7722:	b083      	sub	sp, #12
    7724:	af00      	add	r7, sp, #0
    7726:	6078      	str	r0, [r7, #4]
    7728:	460b      	mov	r3, r1
    772a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    772c:	78fa      	ldrb	r2, [r7, #3]
    772e:	6879      	ldr	r1, [r7, #4]
    7730:	4613      	mov	r3, r2
    7732:	009b      	lsls	r3, r3, #2
    7734:	4413      	add	r3, r2
    7736:	009b      	lsls	r3, r3, #2
    7738:	440b      	add	r3, r1
    773a:	3340      	adds	r3, #64	; 0x40
    773c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    773e:	085b      	lsrs	r3, r3, #1
    7740:	f003 0301 	and.w	r3, r3, #1
    7744:	2b00      	cmp	r3, #0
    7746:	bf14      	ite	ne
    7748:	2301      	movne	r3, #1
    774a:	2300      	moveq	r3, #0
    774c:	b2db      	uxtb	r3, r3
}
    774e:	4618      	mov	r0, r3
    7750:	370c      	adds	r7, #12
    7752:	46bd      	mov	sp, r7
    7754:	f85d 7b04 	ldr.w	r7, [sp], #4
    7758:	4770      	bx	lr
	...

0000775c <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    775c:	b580      	push	{r7, lr}
    775e:	b082      	sub	sp, #8
    7760:	af00      	add	r7, sp, #0
    7762:	6078      	str	r0, [r7, #4]
    7764:	460b      	mov	r3, r1
    7766:	70fb      	strb	r3, [r7, #3]
    7768:	4613      	mov	r3, r2
    776a:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    776c:	78fa      	ldrb	r2, [r7, #3]
    776e:	6879      	ldr	r1, [r7, #4]
    7770:	4613      	mov	r3, r2
    7772:	009b      	lsls	r3, r3, #2
    7774:	4413      	add	r3, r2
    7776:	009b      	lsls	r3, r3, #2
    7778:	440b      	add	r3, r1
    777a:	3330      	adds	r3, #48	; 0x30
    777c:	78ba      	ldrb	r2, [r7, #2]
    777e:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    7780:	78fb      	ldrb	r3, [r7, #3]
    7782:	2202      	movs	r2, #2
    7784:	4619      	mov	r1, r3
    7786:	6878      	ldr	r0, [r7, #4]
    7788:	4b02      	ldr	r3, [pc, #8]	; (7794 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    778a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    778c:	bf00      	nop
    778e:	3708      	adds	r7, #8
    7790:	46bd      	mov	sp, r7
    7792:	bd80      	pop	{r7, pc}
    7794:	000076b3 	.word	0x000076b3

00007798 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    7798:	b580      	push	{r7, lr}
    779a:	b084      	sub	sp, #16
    779c:	af00      	add	r7, sp, #0
    779e:	60f8      	str	r0, [r7, #12]
    77a0:	460b      	mov	r3, r1
    77a2:	607a      	str	r2, [r7, #4]
    77a4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    77a6:	7afa      	ldrb	r2, [r7, #11]
    77a8:	68f9      	ldr	r1, [r7, #12]
    77aa:	4613      	mov	r3, r2
    77ac:	009b      	lsls	r3, r3, #2
    77ae:	4413      	add	r3, r2
    77b0:	009b      	lsls	r3, r3, #2
    77b2:	440b      	add	r3, r1
    77b4:	3334      	adds	r3, #52	; 0x34
    77b6:	687a      	ldr	r2, [r7, #4]
    77b8:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    77ba:	7afb      	ldrb	r3, [r7, #11]
    77bc:	2206      	movs	r2, #6
    77be:	4619      	mov	r1, r3
    77c0:	68f8      	ldr	r0, [r7, #12]
    77c2:	4b03      	ldr	r3, [pc, #12]	; (77d0 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    77c4:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    77c6:	bf00      	nop
    77c8:	3710      	adds	r7, #16
    77ca:	46bd      	mov	sp, r7
    77cc:	bd80      	pop	{r7, pc}
    77ce:	bf00      	nop
    77d0:	000076b3 	.word	0x000076b3

000077d4 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    77d4:	b480      	push	{r7}
    77d6:	b085      	sub	sp, #20
    77d8:	af00      	add	r7, sp, #0
    77da:	60f8      	str	r0, [r7, #12]
    77dc:	460b      	mov	r3, r1
    77de:	607a      	str	r2, [r7, #4]
    77e0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    77e2:	7afa      	ldrb	r2, [r7, #11]
    77e4:	68f9      	ldr	r1, [r7, #12]
    77e6:	4613      	mov	r3, r2
    77e8:	009b      	lsls	r3, r3, #2
    77ea:	4413      	add	r3, r2
    77ec:	009b      	lsls	r3, r3, #2
    77ee:	440b      	add	r3, r1
    77f0:	3338      	adds	r3, #56	; 0x38
    77f2:	687a      	ldr	r2, [r7, #4]
    77f4:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    77f6:	bf00      	nop
    77f8:	3714      	adds	r7, #20
    77fa:	46bd      	mov	sp, r7
    77fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7800:	4770      	bx	lr

00007802 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    7802:	b480      	push	{r7}
    7804:	b083      	sub	sp, #12
    7806:	af00      	add	r7, sp, #0
    7808:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    780a:	687b      	ldr	r3, [r7, #4]
    780c:	691b      	ldr	r3, [r3, #16]
    780e:	085b      	lsrs	r3, r3, #1
    7810:	f003 0301 	and.w	r3, r3, #1
    7814:	2b00      	cmp	r3, #0
    7816:	bf14      	ite	ne
    7818:	2301      	movne	r3, #1
    781a:	2300      	moveq	r3, #0
    781c:	b2db      	uxtb	r3, r3
}
    781e:	4618      	mov	r0, r3
    7820:	370c      	adds	r7, #12
    7822:	46bd      	mov	sp, r7
    7824:	f85d 7b04 	ldr.w	r7, [sp], #4
    7828:	4770      	bx	lr

0000782a <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    782a:	b480      	push	{r7}
    782c:	b083      	sub	sp, #12
    782e:	af00      	add	r7, sp, #0
    7830:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    7832:	687b      	ldr	r3, [r7, #4]
    7834:	691b      	ldr	r3, [r3, #16]
    7836:	0a1b      	lsrs	r3, r3, #8
    7838:	f003 0301 	and.w	r3, r3, #1
    783c:	2b00      	cmp	r3, #0
    783e:	bf14      	ite	ne
    7840:	2301      	movne	r3, #1
    7842:	2300      	moveq	r3, #0
    7844:	b2db      	uxtb	r3, r3
}
    7846:	4618      	mov	r0, r3
    7848:	370c      	adds	r7, #12
    784a:	46bd      	mov	sp, r7
    784c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7850:	4770      	bx	lr

00007852 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    7852:	b480      	push	{r7}
    7854:	b085      	sub	sp, #20
    7856:	af00      	add	r7, sp, #0
    7858:	6078      	str	r0, [r7, #4]
    785a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    785c:	687b      	ldr	r3, [r7, #4]
    785e:	691b      	ldr	r3, [r3, #16]
    7860:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7862:	68fa      	ldr	r2, [r7, #12]
    7864:	683b      	ldr	r3, [r7, #0]
    7866:	4013      	ands	r3, r2
    7868:	60fb      	str	r3, [r7, #12]
	return tmp;
    786a:	68fb      	ldr	r3, [r7, #12]
}
    786c:	4618      	mov	r0, r3
    786e:	3714      	adds	r7, #20
    7870:	46bd      	mov	sp, r7
    7872:	f85d 7b04 	ldr.w	r7, [sp], #4
    7876:	4770      	bx	lr

00007878 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    7878:	b480      	push	{r7}
    787a:	b085      	sub	sp, #20
    787c:	af00      	add	r7, sp, #0
    787e:	60f8      	str	r0, [r7, #12]
    7880:	460b      	mov	r3, r1
    7882:	607a      	str	r2, [r7, #4]
    7884:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    7886:	7afb      	ldrb	r3, [r7, #11]
    7888:	68fa      	ldr	r2, [r7, #12]
    788a:	3304      	adds	r3, #4
    788c:	009b      	lsls	r3, r3, #2
    788e:	4413      	add	r3, r2
    7890:	687a      	ldr	r2, [r7, #4]
    7892:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7894:	bf00      	nop
    7896:	3714      	adds	r7, #20
    7898:	46bd      	mov	sp, r7
    789a:	f85d 7b04 	ldr.w	r7, [sp], #4
    789e:	4770      	bx	lr

000078a0 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    78a0:	b480      	push	{r7}
    78a2:	b083      	sub	sp, #12
    78a4:	af00      	add	r7, sp, #0
    78a6:	6078      	str	r0, [r7, #4]
    78a8:	460b      	mov	r3, r1
    78aa:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    78ac:	687b      	ldr	r3, [r7, #4]
    78ae:	78fa      	ldrb	r2, [r7, #3]
    78b0:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    78b2:	bf00      	nop
    78b4:	370c      	adds	r7, #12
    78b6:	46bd      	mov	sp, r7
    78b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    78bc:	4770      	bx	lr

000078be <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    78be:	b480      	push	{r7}
    78c0:	b085      	sub	sp, #20
    78c2:	af00      	add	r7, sp, #0
    78c4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	f893 3020 	ldrb.w	r3, [r3, #32]
    78cc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    78ce:	7bfb      	ldrb	r3, [r7, #15]
    78d0:	f003 0301 	and.w	r3, r3, #1
    78d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    78d6:	7bfb      	ldrb	r3, [r7, #15]
    78d8:	2b00      	cmp	r3, #0
    78da:	bf14      	ite	ne
    78dc:	2301      	movne	r3, #1
    78de:	2300      	moveq	r3, #0
    78e0:	b2db      	uxtb	r3, r3
}
    78e2:	4618      	mov	r0, r3
    78e4:	3714      	adds	r7, #20
    78e6:	46bd      	mov	sp, r7
    78e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    78ec:	4770      	bx	lr

000078ee <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    78ee:	b480      	push	{r7}
    78f0:	b083      	sub	sp, #12
    78f2:	af00      	add	r7, sp, #0
    78f4:	6078      	str	r0, [r7, #4]
    78f6:	460b      	mov	r3, r1
    78f8:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    78fa:	687b      	ldr	r3, [r7, #4]
    78fc:	78fa      	ldrb	r2, [r7, #3]
    78fe:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7902:	bf00      	nop
    7904:	370c      	adds	r7, #12
    7906:	46bd      	mov	sp, r7
    7908:	f85d 7b04 	ldr.w	r7, [sp], #4
    790c:	4770      	bx	lr

0000790e <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    790e:	b480      	push	{r7}
    7910:	b083      	sub	sp, #12
    7912:	af00      	add	r7, sp, #0
    7914:	6078      	str	r0, [r7, #4]
    7916:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    7918:	687b      	ldr	r3, [r7, #4]
    791a:	683a      	ldr	r2, [r7, #0]
    791c:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    791e:	bf00      	nop
    7920:	370c      	adds	r7, #12
    7922:	46bd      	mov	sp, r7
    7924:	f85d 7b04 	ldr.w	r7, [sp], #4
    7928:	4770      	bx	lr

0000792a <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    792a:	b480      	push	{r7}
    792c:	b083      	sub	sp, #12
    792e:	af00      	add	r7, sp, #0
    7930:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    7932:	687b      	ldr	r3, [r7, #4]
    7934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7936:	4618      	mov	r0, r3
    7938:	370c      	adds	r7, #12
    793a:	46bd      	mov	sp, r7
    793c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7940:	4770      	bx	lr

00007942 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    7942:	b480      	push	{r7}
    7944:	b083      	sub	sp, #12
    7946:	af00      	add	r7, sp, #0
    7948:	6078      	str	r0, [r7, #4]
    794a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	683a      	ldr	r2, [r7, #0]
    7950:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7952:	bf00      	nop
    7954:	370c      	adds	r7, #12
    7956:	46bd      	mov	sp, r7
    7958:	f85d 7b04 	ldr.w	r7, [sp], #4
    795c:	4770      	bx	lr

0000795e <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    795e:	b480      	push	{r7}
    7960:	b085      	sub	sp, #20
    7962:	af00      	add	r7, sp, #0
    7964:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    796c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    796e:	7bfb      	ldrb	r3, [r7, #15]
    7970:	085b      	lsrs	r3, r3, #1
    7972:	b2db      	uxtb	r3, r3
    7974:	f003 0301 	and.w	r3, r3, #1
    7978:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    797a:	7bfb      	ldrb	r3, [r7, #15]
    797c:	2b00      	cmp	r3, #0
    797e:	bf14      	ite	ne
    7980:	2301      	movne	r3, #1
    7982:	2300      	moveq	r3, #0
    7984:	b2db      	uxtb	r3, r3
}
    7986:	4618      	mov	r0, r3
    7988:	3714      	adds	r7, #20
    798a:	46bd      	mov	sp, r7
    798c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7990:	4770      	bx	lr

00007992 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    7992:	b480      	push	{r7}
    7994:	b085      	sub	sp, #20
    7996:	af00      	add	r7, sp, #0
    7998:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    799a:	687b      	ldr	r3, [r7, #4]
    799c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    79a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    79a2:	7bfb      	ldrb	r3, [r7, #15]
    79a4:	089b      	lsrs	r3, r3, #2
    79a6:	b2db      	uxtb	r3, r3
    79a8:	f003 0301 	and.w	r3, r3, #1
    79ac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    79ae:	7bfb      	ldrb	r3, [r7, #15]
    79b0:	2b00      	cmp	r3, #0
    79b2:	bf14      	ite	ne
    79b4:	2301      	movne	r3, #1
    79b6:	2300      	moveq	r3, #0
    79b8:	b2db      	uxtb	r3, r3
}
    79ba:	4618      	mov	r0, r3
    79bc:	3714      	adds	r7, #20
    79be:	46bd      	mov	sp, r7
    79c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c4:	4770      	bx	lr

000079c6 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    79c6:	b480      	push	{r7}
    79c8:	b085      	sub	sp, #20
    79ca:	af00      	add	r7, sp, #0
    79cc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    79ce:	687b      	ldr	r3, [r7, #4]
    79d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    79d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    79d6:	7bfb      	ldrb	r3, [r7, #15]
    79d8:	08db      	lsrs	r3, r3, #3
    79da:	b2db      	uxtb	r3, r3
    79dc:	f003 0301 	and.w	r3, r3, #1
    79e0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    79e2:	7bfb      	ldrb	r3, [r7, #15]
    79e4:	2b00      	cmp	r3, #0
    79e6:	bf14      	ite	ne
    79e8:	2301      	movne	r3, #1
    79ea:	2300      	moveq	r3, #0
    79ec:	b2db      	uxtb	r3, r3
}
    79ee:	4618      	mov	r0, r3
    79f0:	3714      	adds	r7, #20
    79f2:	46bd      	mov	sp, r7
    79f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    79f8:	4770      	bx	lr

000079fa <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    79fa:	b480      	push	{r7}
    79fc:	b085      	sub	sp, #20
    79fe:	af00      	add	r7, sp, #0
    7a00:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7a02:	687b      	ldr	r3, [r7, #4]
    7a04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7a08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    7a0a:	7bfb      	ldrb	r3, [r7, #15]
    7a0c:	091b      	lsrs	r3, r3, #4
    7a0e:	b2db      	uxtb	r3, r3
    7a10:	f003 0301 	and.w	r3, r3, #1
    7a14:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7a16:	7bfb      	ldrb	r3, [r7, #15]
    7a18:	2b00      	cmp	r3, #0
    7a1a:	bf14      	ite	ne
    7a1c:	2301      	movne	r3, #1
    7a1e:	2300      	moveq	r3, #0
    7a20:	b2db      	uxtb	r3, r3
}
    7a22:	4618      	mov	r0, r3
    7a24:	3714      	adds	r7, #20
    7a26:	46bd      	mov	sp, r7
    7a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a2c:	4770      	bx	lr
	...

00007a30 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7a30:	b580      	push	{r7, lr}
    7a32:	b082      	sub	sp, #8
    7a34:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7a36:	4b0a      	ldr	r3, [pc, #40]	; (7a60 <_oscctrl_init_sources+0x30>)
    7a38:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    7a3a:	4a0a      	ldr	r2, [pc, #40]	; (7a64 <_oscctrl_init_sources+0x34>)
    7a3c:	2101      	movs	r1, #1
    7a3e:	6878      	ldr	r0, [r7, #4]
    7a40:	4b09      	ldr	r3, [pc, #36]	; (7a68 <_oscctrl_init_sources+0x38>)
    7a42:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    7a44:	bf00      	nop
    7a46:	6878      	ldr	r0, [r7, #4]
    7a48:	4b08      	ldr	r3, [pc, #32]	; (7a6c <_oscctrl_init_sources+0x3c>)
    7a4a:	4798      	blx	r3
    7a4c:	4603      	mov	r3, r0
    7a4e:	f083 0301 	eor.w	r3, r3, #1
    7a52:	b2db      	uxtb	r3, r3
    7a54:	2b00      	cmp	r3, #0
    7a56:	d1f6      	bne.n	7a46 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    7a58:	bf00      	nop
    7a5a:	3708      	adds	r7, #8
    7a5c:	46bd      	mov	sp, r7
    7a5e:	bd80      	pop	{r7, pc}
    7a60:	40001000 	.word	0x40001000
    7a64:	03002646 	.word	0x03002646
    7a68:	00007879 	.word	0x00007879
    7a6c:	00007803 	.word	0x00007803

00007a70 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    7a70:	b580      	push	{r7, lr}
    7a72:	b084      	sub	sp, #16
    7a74:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7a76:	4b6b      	ldr	r3, [pc, #428]	; (7c24 <_oscctrl_init_referenced_generators+0x1b4>)
    7a78:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    7a7a:	2204      	movs	r2, #4
    7a7c:	2100      	movs	r1, #0
    7a7e:	486a      	ldr	r0, [pc, #424]	; (7c28 <_oscctrl_init_referenced_generators+0x1b8>)
    7a80:	4b6a      	ldr	r3, [pc, #424]	; (7c2c <_oscctrl_init_referenced_generators+0x1bc>)
    7a82:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7a84:	bf00      	nop
    7a86:	4868      	ldr	r0, [pc, #416]	; (7c28 <_oscctrl_init_referenced_generators+0x1b8>)
    7a88:	4b69      	ldr	r3, [pc, #420]	; (7c30 <_oscctrl_init_referenced_generators+0x1c0>)
    7a8a:	4798      	blx	r3
    7a8c:	4603      	mov	r3, r0
    7a8e:	2b00      	cmp	r3, #0
    7a90:	d1f9      	bne.n	7a86 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    7a92:	2100      	movs	r1, #0
    7a94:	68f8      	ldr	r0, [r7, #12]
    7a96:	4b67      	ldr	r3, [pc, #412]	; (7c34 <_oscctrl_init_referenced_generators+0x1c4>)
    7a98:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    7a9a:	4967      	ldr	r1, [pc, #412]	; (7c38 <_oscctrl_init_referenced_generators+0x1c8>)
    7a9c:	68f8      	ldr	r0, [r7, #12]
    7a9e:	4b67      	ldr	r3, [pc, #412]	; (7c3c <_oscctrl_init_referenced_generators+0x1cc>)
    7aa0:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7aa2:	bf00      	nop
    7aa4:	68f8      	ldr	r0, [r7, #12]
    7aa6:	4b66      	ldr	r3, [pc, #408]	; (7c40 <_oscctrl_init_referenced_generators+0x1d0>)
    7aa8:	4798      	blx	r3
    7aaa:	4603      	mov	r3, r0
    7aac:	2b00      	cmp	r3, #0
    7aae:	d1f9      	bne.n	7aa4 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    7ab0:	2100      	movs	r1, #0
    7ab2:	68f8      	ldr	r0, [r7, #12]
    7ab4:	4b63      	ldr	r3, [pc, #396]	; (7c44 <_oscctrl_init_referenced_generators+0x1d4>)
    7ab6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7ab8:	bf00      	nop
    7aba:	68f8      	ldr	r0, [r7, #12]
    7abc:	4b62      	ldr	r3, [pc, #392]	; (7c48 <_oscctrl_init_referenced_generators+0x1d8>)
    7abe:	4798      	blx	r3
    7ac0:	4603      	mov	r3, r0
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d1f9      	bne.n	7aba <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    7ac6:	2302      	movs	r3, #2
    7ac8:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    7aca:	7afb      	ldrb	r3, [r7, #11]
    7acc:	4619      	mov	r1, r3
    7ace:	68f8      	ldr	r0, [r7, #12]
    7ad0:	4b58      	ldr	r3, [pc, #352]	; (7c34 <_oscctrl_init_referenced_generators+0x1c4>)
    7ad2:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    7ad4:	bf00      	nop
    7ad6:	68f8      	ldr	r0, [r7, #12]
    7ad8:	4b5c      	ldr	r3, [pc, #368]	; (7c4c <_oscctrl_init_referenced_generators+0x1dc>)
    7ada:	4798      	blx	r3
    7adc:	4603      	mov	r3, r0
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d1f9      	bne.n	7ad6 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    7ae2:	68f8      	ldr	r0, [r7, #12]
    7ae4:	4b5a      	ldr	r3, [pc, #360]	; (7c50 <_oscctrl_init_referenced_generators+0x1e0>)
    7ae6:	4798      	blx	r3
    7ae8:	4603      	mov	r3, r0
    7aea:	4619      	mov	r1, r3
    7aec:	68f8      	ldr	r0, [r7, #12]
    7aee:	4b59      	ldr	r3, [pc, #356]	; (7c54 <_oscctrl_init_referenced_generators+0x1e4>)
    7af0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7af2:	bf00      	nop
    7af4:	68f8      	ldr	r0, [r7, #12]
    7af6:	4b58      	ldr	r3, [pc, #352]	; (7c58 <_oscctrl_init_referenced_generators+0x1e8>)
    7af8:	4798      	blx	r3
    7afa:	4603      	mov	r3, r0
    7afc:	2b00      	cmp	r3, #0
    7afe:	d1f9      	bne.n	7af4 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    7b00:	2319      	movs	r3, #25
    7b02:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    7b04:	7afb      	ldrb	r3, [r7, #11]
    7b06:	4619      	mov	r1, r3
    7b08:	68f8      	ldr	r0, [r7, #12]
    7b0a:	4b4e      	ldr	r3, [pc, #312]	; (7c44 <_oscctrl_init_referenced_generators+0x1d4>)
    7b0c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7b0e:	bf00      	nop
    7b10:	68f8      	ldr	r0, [r7, #12]
    7b12:	4b4d      	ldr	r3, [pc, #308]	; (7c48 <_oscctrl_init_referenced_generators+0x1d8>)
    7b14:	4798      	blx	r3
    7b16:	4603      	mov	r3, r0
    7b18:	2b00      	cmp	r3, #0
    7b1a:	d1f9      	bne.n	7b10 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    7b1c:	2245      	movs	r2, #69	; 0x45
    7b1e:	2101      	movs	r1, #1
    7b20:	4841      	ldr	r0, [pc, #260]	; (7c28 <_oscctrl_init_referenced_generators+0x1b8>)
    7b22:	4b4e      	ldr	r3, [pc, #312]	; (7c5c <_oscctrl_init_referenced_generators+0x1ec>)
    7b24:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    7b26:	223b      	movs	r2, #59	; 0x3b
    7b28:	2100      	movs	r1, #0
    7b2a:	68f8      	ldr	r0, [r7, #12]
    7b2c:	4b4c      	ldr	r3, [pc, #304]	; (7c60 <_oscctrl_init_referenced_generators+0x1f0>)
    7b2e:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7b30:	f44f 6201 	mov.w	r2, #2064	; 0x810
    7b34:	2100      	movs	r1, #0
    7b36:	68f8      	ldr	r0, [r7, #12]
    7b38:	4b4a      	ldr	r3, [pc, #296]	; (7c64 <_oscctrl_init_referenced_generators+0x1f4>)
    7b3a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7b3c:	2242      	movs	r2, #66	; 0x42
    7b3e:	2100      	movs	r1, #0
    7b40:	68f8      	ldr	r0, [r7, #12]
    7b42:	4b49      	ldr	r3, [pc, #292]	; (7c68 <_oscctrl_init_referenced_generators+0x1f8>)
    7b44:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    7b46:	4a49      	ldr	r2, [pc, #292]	; (7c6c <_oscctrl_init_referenced_generators+0x1fc>)
    7b48:	2101      	movs	r1, #1
    7b4a:	68f8      	ldr	r0, [r7, #12]
    7b4c:	4b44      	ldr	r3, [pc, #272]	; (7c60 <_oscctrl_init_referenced_generators+0x1f0>)
    7b4e:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7b50:	f44f 6203 	mov.w	r2, #2096	; 0x830
    7b54:	2101      	movs	r1, #1
    7b56:	68f8      	ldr	r0, [r7, #12]
    7b58:	4b42      	ldr	r3, [pc, #264]	; (7c64 <_oscctrl_init_referenced_generators+0x1f4>)
    7b5a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7b5c:	2202      	movs	r2, #2
    7b5e:	2101      	movs	r1, #1
    7b60:	68f8      	ldr	r0, [r7, #12]
    7b62:	4b41      	ldr	r3, [pc, #260]	; (7c68 <_oscctrl_init_referenced_generators+0x1f8>)
    7b64:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    7b66:	68f8      	ldr	r0, [r7, #12]
    7b68:	4b41      	ldr	r3, [pc, #260]	; (7c70 <_oscctrl_init_referenced_generators+0x200>)
    7b6a:	4798      	blx	r3
    7b6c:	4603      	mov	r3, r0
    7b6e:	2b00      	cmp	r3, #0
    7b70:	d00c      	beq.n	7b8c <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    7b72:	f44f 6310 	mov.w	r3, #2304	; 0x900
    7b76:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    7b78:	bf00      	nop
    7b7a:	6879      	ldr	r1, [r7, #4]
    7b7c:	68f8      	ldr	r0, [r7, #12]
    7b7e:	4b3d      	ldr	r3, [pc, #244]	; (7c74 <_oscctrl_init_referenced_generators+0x204>)
    7b80:	4798      	blx	r3
    7b82:	4602      	mov	r2, r0
    7b84:	687b      	ldr	r3, [r7, #4]
    7b86:	429a      	cmp	r2, r3
    7b88:	d1f7      	bne.n	7b7a <_oscctrl_init_referenced_generators+0x10a>
    7b8a:	e009      	b.n	7ba0 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    7b8c:	bf00      	nop
    7b8e:	68f8      	ldr	r0, [r7, #12]
    7b90:	4b39      	ldr	r3, [pc, #228]	; (7c78 <_oscctrl_init_referenced_generators+0x208>)
    7b92:	4798      	blx	r3
    7b94:	4603      	mov	r3, r0
    7b96:	f083 0301 	eor.w	r3, r3, #1
    7b9a:	b2db      	uxtb	r3, r3
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d1f6      	bne.n	7b8e <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    7ba0:	bf00      	nop
    7ba2:	2100      	movs	r1, #0
    7ba4:	68f8      	ldr	r0, [r7, #12]
    7ba6:	4b35      	ldr	r3, [pc, #212]	; (7c7c <_oscctrl_init_referenced_generators+0x20c>)
    7ba8:	4798      	blx	r3
    7baa:	4603      	mov	r3, r0
    7bac:	f083 0301 	eor.w	r3, r3, #1
    7bb0:	b2db      	uxtb	r3, r3
    7bb2:	2b00      	cmp	r3, #0
    7bb4:	d009      	beq.n	7bca <_oscctrl_init_referenced_generators+0x15a>
    7bb6:	2100      	movs	r1, #0
    7bb8:	68f8      	ldr	r0, [r7, #12]
    7bba:	4b31      	ldr	r3, [pc, #196]	; (7c80 <_oscctrl_init_referenced_generators+0x210>)
    7bbc:	4798      	blx	r3
    7bbe:	4603      	mov	r3, r0
    7bc0:	f083 0301 	eor.w	r3, r3, #1
    7bc4:	b2db      	uxtb	r3, r3
    7bc6:	2b00      	cmp	r3, #0
    7bc8:	d1eb      	bne.n	7ba2 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    7bca:	bf00      	nop
    7bcc:	2101      	movs	r1, #1
    7bce:	68f8      	ldr	r0, [r7, #12]
    7bd0:	4b2a      	ldr	r3, [pc, #168]	; (7c7c <_oscctrl_init_referenced_generators+0x20c>)
    7bd2:	4798      	blx	r3
    7bd4:	4603      	mov	r3, r0
    7bd6:	f083 0301 	eor.w	r3, r3, #1
    7bda:	b2db      	uxtb	r3, r3
    7bdc:	2b00      	cmp	r3, #0
    7bde:	d009      	beq.n	7bf4 <_oscctrl_init_referenced_generators+0x184>
    7be0:	2101      	movs	r1, #1
    7be2:	68f8      	ldr	r0, [r7, #12]
    7be4:	4b26      	ldr	r3, [pc, #152]	; (7c80 <_oscctrl_init_referenced_generators+0x210>)
    7be6:	4798      	blx	r3
    7be8:	4603      	mov	r3, r0
    7bea:	f083 0301 	eor.w	r3, r3, #1
    7bee:	b2db      	uxtb	r3, r3
    7bf0:	2b00      	cmp	r3, #0
    7bf2:	d1eb      	bne.n	7bcc <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    7bf4:	bf00      	nop
    7bf6:	480c      	ldr	r0, [pc, #48]	; (7c28 <_oscctrl_init_referenced_generators+0x1b8>)
    7bf8:	4b22      	ldr	r3, [pc, #136]	; (7c84 <_oscctrl_init_referenced_generators+0x214>)
    7bfa:	4798      	blx	r3
    7bfc:	4603      	mov	r3, r0
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d1f9      	bne.n	7bf6 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    7c02:	2207      	movs	r2, #7
    7c04:	2100      	movs	r1, #0
    7c06:	4808      	ldr	r0, [pc, #32]	; (7c28 <_oscctrl_init_referenced_generators+0x1b8>)
    7c08:	4b08      	ldr	r3, [pc, #32]	; (7c2c <_oscctrl_init_referenced_generators+0x1bc>)
    7c0a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7c0c:	bf00      	nop
    7c0e:	4806      	ldr	r0, [pc, #24]	; (7c28 <_oscctrl_init_referenced_generators+0x1b8>)
    7c10:	4b07      	ldr	r3, [pc, #28]	; (7c30 <_oscctrl_init_referenced_generators+0x1c0>)
    7c12:	4798      	blx	r3
    7c14:	4603      	mov	r3, r0
    7c16:	2b00      	cmp	r3, #0
    7c18:	d1f9      	bne.n	7c0e <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    7c1a:	bf00      	nop
    7c1c:	3710      	adds	r7, #16
    7c1e:	46bd      	mov	sp, r7
    7c20:	bd80      	pop	{r7, pc}
    7c22:	bf00      	nop
    7c24:	40001000 	.word	0x40001000
    7c28:	40001c00 	.word	0x40001c00
    7c2c:	0000763d 	.word	0x0000763d
    7c30:	000075fd 	.word	0x000075fd
    7c34:	000078a1 	.word	0x000078a1
    7c38:	0401bb80 	.word	0x0401bb80
    7c3c:	00007943 	.word	0x00007943
    7c40:	000079fb 	.word	0x000079fb
    7c44:	000078ef 	.word	0x000078ef
    7c48:	00007993 	.word	0x00007993
    7c4c:	0000795f 	.word	0x0000795f
    7c50:	0000792b 	.word	0x0000792b
    7c54:	0000790f 	.word	0x0000790f
    7c58:	000079c7 	.word	0x000079c7
    7c5c:	0000768d 	.word	0x0000768d
    7c60:	00007799 	.word	0x00007799
    7c64:	000077d5 	.word	0x000077d5
    7c68:	0000775d 	.word	0x0000775d
    7c6c:	000407a0 	.word	0x000407a0
    7c70:	000078bf 	.word	0x000078bf
    7c74:	00007853 	.word	0x00007853
    7c78:	0000782b 	.word	0x0000782b
    7c7c:	000076e9 	.word	0x000076e9
    7c80:	00007721 	.word	0x00007721
    7c84:	00007625 	.word	0x00007625

00007c88 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    7c88:	b480      	push	{r7}
    7c8a:	b083      	sub	sp, #12
    7c8c:	af00      	add	r7, sp, #0
    7c8e:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	69db      	ldr	r3, [r3, #28]
    7c94:	0a9b      	lsrs	r3, r3, #10
    7c96:	f003 0301 	and.w	r3, r3, #1
    7c9a:	2b00      	cmp	r3, #0
    7c9c:	bf14      	ite	ne
    7c9e:	2301      	movne	r3, #1
    7ca0:	2300      	moveq	r3, #0
    7ca2:	b2db      	uxtb	r3, r3
}
    7ca4:	4618      	mov	r0, r3
    7ca6:	370c      	adds	r7, #12
    7ca8:	46bd      	mov	sp, r7
    7caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cae:	4770      	bx	lr

00007cb0 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    7cb0:	b480      	push	{r7}
    7cb2:	b083      	sub	sp, #12
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    7cb8:	687b      	ldr	r3, [r7, #4]
    7cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7cbe:	61da      	str	r2, [r3, #28]
}
    7cc0:	bf00      	nop
    7cc2:	370c      	adds	r7, #12
    7cc4:	46bd      	mov	sp, r7
    7cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cca:	4770      	bx	lr

00007ccc <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    7ccc:	b480      	push	{r7}
    7cce:	b083      	sub	sp, #12
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	6078      	str	r0, [r7, #4]
    7cd4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7cd6:	687b      	ldr	r3, [r7, #4]
    7cd8:	683a      	ldr	r2, [r7, #0]
    7cda:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7cdc:	bf00      	nop
    7cde:	370c      	adds	r7, #12
    7ce0:	46bd      	mov	sp, r7
    7ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ce6:	4770      	bx	lr

00007ce8 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7ce8:	b480      	push	{r7}
    7cea:	b083      	sub	sp, #12
    7cec:	af00      	add	r7, sp, #0
    7cee:	6078      	str	r0, [r7, #4]
    7cf0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    7cf2:	687b      	ldr	r3, [r7, #4]
    7cf4:	683a      	ldr	r2, [r7, #0]
    7cf6:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7cf8:	bf00      	nop
    7cfa:	370c      	adds	r7, #12
    7cfc:	46bd      	mov	sp, r7
    7cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d02:	4770      	bx	lr

00007d04 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    7d04:	b480      	push	{r7}
    7d06:	b083      	sub	sp, #12
    7d08:	af00      	add	r7, sp, #0
    7d0a:	6078      	str	r0, [r7, #4]
    7d0c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	683a      	ldr	r2, [r7, #0]
    7d12:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7d14:	bf00      	nop
    7d16:	370c      	adds	r7, #12
    7d18:	46bd      	mov	sp, r7
    7d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d1e:	4770      	bx	lr

00007d20 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    7d20:	b480      	push	{r7}
    7d22:	b083      	sub	sp, #12
    7d24:	af00      	add	r7, sp, #0
    7d26:	6078      	str	r0, [r7, #4]
    7d28:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	683a      	ldr	r2, [r7, #0]
    7d2e:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7d30:	bf00      	nop
    7d32:	370c      	adds	r7, #12
    7d34:	46bd      	mov	sp, r7
    7d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d3a:	4770      	bx	lr

00007d3c <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7d3c:	b480      	push	{r7}
    7d3e:	b085      	sub	sp, #20
    7d40:	af00      	add	r7, sp, #0
    7d42:	6078      	str	r0, [r7, #4]
    7d44:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7d46:	687b      	ldr	r3, [r7, #4]
    7d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7d4a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    7d4c:	68fb      	ldr	r3, [r7, #12]
    7d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7d52:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    7d54:	683b      	ldr	r3, [r7, #0]
    7d56:	b2db      	uxtb	r3, r3
    7d58:	68fa      	ldr	r2, [r7, #12]
    7d5a:	4313      	orrs	r3, r2
    7d5c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7d5e:	687b      	ldr	r3, [r7, #4]
    7d60:	68fa      	ldr	r2, [r7, #12]
    7d62:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7d64:	bf00      	nop
    7d66:	3714      	adds	r7, #20
    7d68:	46bd      	mov	sp, r7
    7d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d6e:	4770      	bx	lr

00007d70 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7d70:	b480      	push	{r7}
    7d72:	b085      	sub	sp, #20
    7d74:	af00      	add	r7, sp, #0
    7d76:	6078      	str	r0, [r7, #4]
    7d78:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7d7a:	687b      	ldr	r3, [r7, #4]
    7d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7d7e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    7d80:	68fb      	ldr	r3, [r7, #12]
    7d82:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    7d86:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    7d88:	683b      	ldr	r3, [r7, #0]
    7d8a:	041b      	lsls	r3, r3, #16
    7d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    7d90:	68fa      	ldr	r2, [r7, #12]
    7d92:	4313      	orrs	r3, r2
    7d94:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7d96:	687b      	ldr	r3, [r7, #4]
    7d98:	68fa      	ldr	r2, [r7, #12]
    7d9a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7d9c:	bf00      	nop
    7d9e:	3714      	adds	r7, #20
    7da0:	46bd      	mov	sp, r7
    7da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7da6:	4770      	bx	lr

00007da8 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    7da8:	b480      	push	{r7}
    7daa:	b083      	sub	sp, #12
    7dac:	af00      	add	r7, sp, #0
    7dae:	6078      	str	r0, [r7, #4]
    7db0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    7db2:	687b      	ldr	r3, [r7, #4]
    7db4:	683a      	ldr	r2, [r7, #0]
    7db6:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7db8:	bf00      	nop
    7dba:	370c      	adds	r7, #12
    7dbc:	46bd      	mov	sp, r7
    7dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dc2:	4770      	bx	lr

00007dc4 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    7dc4:	b480      	push	{r7}
    7dc6:	b083      	sub	sp, #12
    7dc8:	af00      	add	r7, sp, #0
    7dca:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    7dd0:	4618      	mov	r0, r3
    7dd2:	370c      	adds	r7, #12
    7dd4:	46bd      	mov	sp, r7
    7dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dda:	4770      	bx	lr

00007ddc <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    7ddc:	b480      	push	{r7}
    7dde:	b085      	sub	sp, #20
    7de0:	af00      	add	r7, sp, #0
    7de2:	60f8      	str	r0, [r7, #12]
    7de4:	60b9      	str	r1, [r7, #8]
    7de6:	607a      	str	r2, [r7, #4]
	while (count--) {
    7de8:	e007      	b.n	7dfa <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    7dea:	68fb      	ldr	r3, [r7, #12]
    7dec:	1c5a      	adds	r2, r3, #1
    7dee:	60fa      	str	r2, [r7, #12]
    7df0:	68ba      	ldr	r2, [r7, #8]
    7df2:	1c51      	adds	r1, r2, #1
    7df4:	60b9      	str	r1, [r7, #8]
    7df6:	7812      	ldrb	r2, [r2, #0]
    7df8:	701a      	strb	r2, [r3, #0]
	while (count--) {
    7dfa:	687b      	ldr	r3, [r7, #4]
    7dfc:	1e5a      	subs	r2, r3, #1
    7dfe:	607a      	str	r2, [r7, #4]
    7e00:	2b00      	cmp	r3, #0
    7e02:	d1f2      	bne.n	7dea <_qspi_memcpy+0xe>
	}
}
    7e04:	bf00      	nop
    7e06:	3714      	adds	r7, #20
    7e08:	46bd      	mov	sp, r7
    7e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e0e:	4770      	bx	lr

00007e10 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    7e10:	b580      	push	{r7, lr}
    7e12:	b082      	sub	sp, #8
    7e14:	af00      	add	r7, sp, #0
    7e16:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7e18:	4903      	ldr	r1, [pc, #12]	; (7e28 <_qspi_end_transfer+0x18>)
    7e1a:	6878      	ldr	r0, [r7, #4]
    7e1c:	4b03      	ldr	r3, [pc, #12]	; (7e2c <_qspi_end_transfer+0x1c>)
    7e1e:	4798      	blx	r3
}
    7e20:	bf00      	nop
    7e22:	3708      	adds	r7, #8
    7e24:	46bd      	mov	sp, r7
    7e26:	bd80      	pop	{r7, pc}
    7e28:	01000002 	.word	0x01000002
    7e2c:	00007ccd 	.word	0x00007ccd

00007e30 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    7e30:	b580      	push	{r7, lr}
    7e32:	b082      	sub	sp, #8
    7e34:	af00      	add	r7, sp, #0
    7e36:	6078      	str	r0, [r7, #4]
    7e38:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    7e3a:	687b      	ldr	r3, [r7, #4]
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d004      	beq.n	7e4a <_qspi_sync_init+0x1a>
    7e40:	683b      	ldr	r3, [r7, #0]
    7e42:	2b00      	cmp	r3, #0
    7e44:	d001      	beq.n	7e4a <_qspi_sync_init+0x1a>
    7e46:	2301      	movs	r3, #1
    7e48:	e000      	b.n	7e4c <_qspi_sync_init+0x1c>
    7e4a:	2300      	movs	r3, #0
    7e4c:	f003 0301 	and.w	r3, r3, #1
    7e50:	b2db      	uxtb	r3, r3
    7e52:	2240      	movs	r2, #64	; 0x40
    7e54:	490c      	ldr	r1, [pc, #48]	; (7e88 <_qspi_sync_init+0x58>)
    7e56:	4618      	mov	r0, r3
    7e58:	4b0c      	ldr	r3, [pc, #48]	; (7e8c <_qspi_sync_init+0x5c>)
    7e5a:	4798      	blx	r3
	dev->prvt = hw;
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	683a      	ldr	r2, [r7, #0]
    7e60:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    7e62:	687b      	ldr	r3, [r7, #4]
    7e64:	681b      	ldr	r3, [r3, #0]
    7e66:	2101      	movs	r1, #1
    7e68:	4618      	mov	r0, r3
    7e6a:	4b09      	ldr	r3, [pc, #36]	; (7e90 <_qspi_sync_init+0x60>)
    7e6c:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    7e6e:	4909      	ldr	r1, [pc, #36]	; (7e94 <_qspi_sync_init+0x64>)
    7e70:	6838      	ldr	r0, [r7, #0]
    7e72:	4b09      	ldr	r3, [pc, #36]	; (7e98 <_qspi_sync_init+0x68>)
    7e74:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    7e76:	4909      	ldr	r1, [pc, #36]	; (7e9c <_qspi_sync_init+0x6c>)
    7e78:	6838      	ldr	r0, [r7, #0]
    7e7a:	4b09      	ldr	r3, [pc, #36]	; (7ea0 <_qspi_sync_init+0x70>)
    7e7c:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    7e7e:	2300      	movs	r3, #0
}
    7e80:	4618      	mov	r0, r3
    7e82:	3708      	adds	r7, #8
    7e84:	46bd      	mov	sp, r7
    7e86:	bd80      	pop	{r7, pc}
    7e88:	00012b58 	.word	0x00012b58
    7e8c:	00005ed5 	.word	0x00005ed5
    7e90:	00007ccd 	.word	0x00007ccd
    7e94:	06000011 	.word	0x06000011
    7e98:	00007ce9 	.word	0x00007ce9
    7e9c:	00241300 	.word	0x00241300
    7ea0:	00007d05 	.word	0x00007d05

00007ea4 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    7ea4:	b580      	push	{r7, lr}
    7ea6:	b082      	sub	sp, #8
    7ea8:	af00      	add	r7, sp, #0
    7eaa:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    7eac:	687b      	ldr	r3, [r7, #4]
    7eae:	681b      	ldr	r3, [r3, #0]
    7eb0:	2102      	movs	r1, #2
    7eb2:	4618      	mov	r0, r3
    7eb4:	4b03      	ldr	r3, [pc, #12]	; (7ec4 <_qspi_sync_enable+0x20>)
    7eb6:	4798      	blx	r3
	return ERR_NONE;
    7eb8:	2300      	movs	r3, #0
}
    7eba:	4618      	mov	r0, r3
    7ebc:	3708      	adds	r7, #8
    7ebe:	46bd      	mov	sp, r7
    7ec0:	bd80      	pop	{r7, pc}
    7ec2:	bf00      	nop
    7ec4:	00007ccd 	.word	0x00007ccd

00007ec8 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    7ec8:	b580      	push	{r7, lr}
    7eca:	b082      	sub	sp, #8
    7ecc:	af00      	add	r7, sp, #0
    7ece:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    7ed0:	687b      	ldr	r3, [r7, #4]
    7ed2:	681b      	ldr	r3, [r3, #0]
    7ed4:	2100      	movs	r1, #0
    7ed6:	4618      	mov	r0, r3
    7ed8:	4b03      	ldr	r3, [pc, #12]	; (7ee8 <_qspi_sync_disable+0x20>)
    7eda:	4798      	blx	r3
	return ERR_NONE;
    7edc:	2300      	movs	r3, #0
}
    7ede:	4618      	mov	r0, r3
    7ee0:	3708      	adds	r7, #8
    7ee2:	46bd      	mov	sp, r7
    7ee4:	bd80      	pop	{r7, pc}
    7ee6:	bf00      	nop
    7ee8:	00007ccd 	.word	0x00007ccd

00007eec <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7eec:	b580      	push	{r7, lr}
    7eee:	b084      	sub	sp, #16
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	6078      	str	r0, [r7, #4]
    7ef4:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	681b      	ldr	r3, [r3, #0]
    7efa:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    7efc:	683b      	ldr	r3, [r7, #0]
    7efe:	781b      	ldrb	r3, [r3, #0]
    7f00:	f003 0320 	and.w	r3, r3, #32
    7f04:	b2db      	uxtb	r3, r3
    7f06:	2b00      	cmp	r3, #0
    7f08:	d005      	beq.n	7f16 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    7f0a:	683b      	ldr	r3, [r7, #0]
    7f0c:	689b      	ldr	r3, [r3, #8]
    7f0e:	4619      	mov	r1, r3
    7f10:	68f8      	ldr	r0, [r7, #12]
    7f12:	4b13      	ldr	r3, [pc, #76]	; (7f60 <_qspi_sync_command_set_ifr+0x74>)
    7f14:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    7f16:	683b      	ldr	r3, [r7, #0]
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	f003 0310 	and.w	r3, r3, #16
    7f1e:	b2db      	uxtb	r3, r3
    7f20:	2b00      	cmp	r3, #0
    7f22:	d005      	beq.n	7f30 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    7f24:	683b      	ldr	r3, [r7, #0]
    7f26:	791b      	ldrb	r3, [r3, #4]
    7f28:	4619      	mov	r1, r3
    7f2a:	68f8      	ldr	r0, [r7, #12]
    7f2c:	4b0d      	ldr	r3, [pc, #52]	; (7f64 <_qspi_sync_command_set_ifr+0x78>)
    7f2e:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    7f30:	683b      	ldr	r3, [r7, #0]
    7f32:	781b      	ldrb	r3, [r3, #0]
    7f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7f38:	b2db      	uxtb	r3, r3
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d005      	beq.n	7f4a <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    7f3e:	683b      	ldr	r3, [r7, #0]
    7f40:	795b      	ldrb	r3, [r3, #5]
    7f42:	4619      	mov	r1, r3
    7f44:	68f8      	ldr	r0, [r7, #12]
    7f46:	4b08      	ldr	r3, [pc, #32]	; (7f68 <_qspi_sync_command_set_ifr+0x7c>)
    7f48:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    7f4a:	683b      	ldr	r3, [r7, #0]
    7f4c:	681b      	ldr	r3, [r3, #0]
    7f4e:	4619      	mov	r1, r3
    7f50:	68f8      	ldr	r0, [r7, #12]
    7f52:	4b06      	ldr	r3, [pc, #24]	; (7f6c <_qspi_sync_command_set_ifr+0x80>)
    7f54:	4798      	blx	r3
}
    7f56:	bf00      	nop
    7f58:	3710      	adds	r7, #16
    7f5a:	46bd      	mov	sp, r7
    7f5c:	bd80      	pop	{r7, pc}
    7f5e:	bf00      	nop
    7f60:	00007d21 	.word	0x00007d21
    7f64:	00007d3d 	.word	0x00007d3d
    7f68:	00007d71 	.word	0x00007d71
    7f6c:	00007da9 	.word	0x00007da9

00007f70 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7f70:	b580      	push	{r7, lr}
    7f72:	b084      	sub	sp, #16
    7f74:	af00      	add	r7, sp, #0
    7f76:	6078      	str	r0, [r7, #4]
    7f78:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    7f7a:	687b      	ldr	r3, [r7, #4]
    7f7c:	681b      	ldr	r3, [r3, #0]
    7f7e:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    7f80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7f84:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    7f86:	683b      	ldr	r3, [r7, #0]
    7f88:	781b      	ldrb	r3, [r3, #0]
    7f8a:	f003 0320 	and.w	r3, r3, #32
    7f8e:	b2db      	uxtb	r3, r3
    7f90:	2b00      	cmp	r3, #0
    7f92:	d004      	beq.n	7f9e <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    7f94:	683b      	ldr	r3, [r7, #0]
    7f96:	689b      	ldr	r3, [r3, #8]
    7f98:	68fa      	ldr	r2, [r7, #12]
    7f9a:	4413      	add	r3, r2
    7f9c:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    7f9e:	68b8      	ldr	r0, [r7, #8]
    7fa0:	4b18      	ldr	r3, [pc, #96]	; (8004 <_qspi_sync_run_transfer+0x94>)
    7fa2:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    7fa4:	683b      	ldr	r3, [r7, #0]
    7fa6:	691b      	ldr	r3, [r3, #16]
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d103      	bne.n	7fb4 <_qspi_sync_run_transfer+0x44>
    7fac:	683b      	ldr	r3, [r7, #0]
    7fae:	695b      	ldr	r3, [r3, #20]
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	d001      	beq.n	7fb8 <_qspi_sync_run_transfer+0x48>
    7fb4:	2301      	movs	r3, #1
    7fb6:	e000      	b.n	7fba <_qspi_sync_run_transfer+0x4a>
    7fb8:	2300      	movs	r3, #0
    7fba:	f003 0301 	and.w	r3, r3, #1
    7fbe:	b2db      	uxtb	r3, r3
    7fc0:	2282      	movs	r2, #130	; 0x82
    7fc2:	4911      	ldr	r1, [pc, #68]	; (8008 <_qspi_sync_run_transfer+0x98>)
    7fc4:	4618      	mov	r0, r3
    7fc6:	4b11      	ldr	r3, [pc, #68]	; (800c <_qspi_sync_run_transfer+0x9c>)
    7fc8:	4798      	blx	r3

	if (cmd->tx_buf) {
    7fca:	683b      	ldr	r3, [r7, #0]
    7fcc:	691b      	ldr	r3, [r3, #16]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d008      	beq.n	7fe4 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    7fd2:	683b      	ldr	r3, [r7, #0]
    7fd4:	6919      	ldr	r1, [r3, #16]
    7fd6:	683b      	ldr	r3, [r7, #0]
    7fd8:	68db      	ldr	r3, [r3, #12]
    7fda:	461a      	mov	r2, r3
    7fdc:	68f8      	ldr	r0, [r7, #12]
    7fde:	4b0c      	ldr	r3, [pc, #48]	; (8010 <_qspi_sync_run_transfer+0xa0>)
    7fe0:	4798      	blx	r3
    7fe2:	e007      	b.n	7ff4 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    7fe4:	683b      	ldr	r3, [r7, #0]
    7fe6:	6958      	ldr	r0, [r3, #20]
    7fe8:	683b      	ldr	r3, [r7, #0]
    7fea:	68db      	ldr	r3, [r3, #12]
    7fec:	461a      	mov	r2, r3
    7fee:	68f9      	ldr	r1, [r7, #12]
    7ff0:	4b07      	ldr	r3, [pc, #28]	; (8010 <_qspi_sync_run_transfer+0xa0>)
    7ff2:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    7ff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ff8:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    7ffc:	bf00      	nop
    7ffe:	3710      	adds	r7, #16
    8000:	46bd      	mov	sp, r7
    8002:	bd80      	pop	{r7, pc}
    8004:	00007dc5 	.word	0x00007dc5
    8008:	00012b58 	.word	0x00012b58
    800c:	00005ed5 	.word	0x00005ed5
    8010:	00007ddd 	.word	0x00007ddd

00008014 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8014:	b580      	push	{r7, lr}
    8016:	b082      	sub	sp, #8
    8018:	af00      	add	r7, sp, #0
    801a:	6078      	str	r0, [r7, #4]
    801c:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    801e:	6839      	ldr	r1, [r7, #0]
    8020:	6878      	ldr	r0, [r7, #4]
    8022:	4b14      	ldr	r3, [pc, #80]	; (8074 <_qspi_sync_serial_run_command+0x60>)
    8024:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    8026:	683b      	ldr	r3, [r7, #0]
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    802e:	b2db      	uxtb	r3, r3
    8030:	2b00      	cmp	r3, #0
    8032:	d003      	beq.n	803c <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    8034:	6839      	ldr	r1, [r7, #0]
    8036:	6878      	ldr	r0, [r7, #4]
    8038:	4b0f      	ldr	r3, [pc, #60]	; (8078 <_qspi_sync_serial_run_command+0x64>)
    803a:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    803c:	687b      	ldr	r3, [r7, #4]
    803e:	681b      	ldr	r3, [r3, #0]
    8040:	4618      	mov	r0, r3
    8042:	4b0e      	ldr	r3, [pc, #56]	; (807c <_qspi_sync_serial_run_command+0x68>)
    8044:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    8046:	bf00      	nop
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	681b      	ldr	r3, [r3, #0]
    804c:	4618      	mov	r0, r3
    804e:	4b0c      	ldr	r3, [pc, #48]	; (8080 <_qspi_sync_serial_run_command+0x6c>)
    8050:	4798      	blx	r3
    8052:	4603      	mov	r3, r0
    8054:	f083 0301 	eor.w	r3, r3, #1
    8058:	b2db      	uxtb	r3, r3
    805a:	2b00      	cmp	r3, #0
    805c:	d1f4      	bne.n	8048 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    805e:	687b      	ldr	r3, [r7, #4]
    8060:	681b      	ldr	r3, [r3, #0]
    8062:	4618      	mov	r0, r3
    8064:	4b07      	ldr	r3, [pc, #28]	; (8084 <_qspi_sync_serial_run_command+0x70>)
    8066:	4798      	blx	r3
	return ERR_NONE;
    8068:	2300      	movs	r3, #0
}
    806a:	4618      	mov	r0, r3
    806c:	3708      	adds	r7, #8
    806e:	46bd      	mov	sp, r7
    8070:	bd80      	pop	{r7, pc}
    8072:	bf00      	nop
    8074:	00007eed 	.word	0x00007eed
    8078:	00007f71 	.word	0x00007f71
    807c:	00007e11 	.word	0x00007e11
    8080:	00007c89 	.word	0x00007c89
    8084:	00007cb1 	.word	0x00007cb1

00008088 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    8088:	b480      	push	{r7}
    808a:	b083      	sub	sp, #12
    808c:	af00      	add	r7, sp, #0
    808e:	6078      	str	r0, [r7, #4]
    8090:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8092:	bf00      	nop
    8094:	687b      	ldr	r3, [r7, #4]
    8096:	691a      	ldr	r2, [r3, #16]
    8098:	683b      	ldr	r3, [r7, #0]
    809a:	4013      	ands	r3, r2
    809c:	2b00      	cmp	r3, #0
    809e:	d1f9      	bne.n	8094 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    80a0:	bf00      	nop
    80a2:	370c      	adds	r7, #12
    80a4:	46bd      	mov	sp, r7
    80a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    80aa:	4770      	bx	lr

000080ac <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    80ac:	b480      	push	{r7}
    80ae:	b083      	sub	sp, #12
    80b0:	af00      	add	r7, sp, #0
    80b2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    80b4:	687b      	ldr	r3, [r7, #4]
    80b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    80ba:	819a      	strh	r2, [r3, #12]
}
    80bc:	bf00      	nop
    80be:	370c      	adds	r7, #12
    80c0:	46bd      	mov	sp, r7
    80c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80c6:	4770      	bx	lr

000080c8 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    80c8:	b480      	push	{r7}
    80ca:	b083      	sub	sp, #12
    80cc:	af00      	add	r7, sp, #0
    80ce:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    80d0:	687b      	ldr	r3, [r7, #4]
    80d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    80d6:	819a      	strh	r2, [r3, #12]
}
    80d8:	bf00      	nop
    80da:	370c      	adds	r7, #12
    80dc:	46bd      	mov	sp, r7
    80de:	f85d 7b04 	ldr.w	r7, [sp], #4
    80e2:	4770      	bx	lr

000080e4 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    80e4:	b480      	push	{r7}
    80e6:	b083      	sub	sp, #12
    80e8:	af00      	add	r7, sp, #0
    80ea:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	899b      	ldrh	r3, [r3, #12]
    80f0:	b29b      	uxth	r3, r3
}
    80f2:	4618      	mov	r0, r3
    80f4:	370c      	adds	r7, #12
    80f6:	46bd      	mov	sp, r7
    80f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    80fc:	4770      	bx	lr

000080fe <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    80fe:	b480      	push	{r7}
    8100:	b083      	sub	sp, #12
    8102:	af00      	add	r7, sp, #0
    8104:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    8106:	687b      	ldr	r3, [r7, #4]
    8108:	895b      	ldrh	r3, [r3, #10]
    810a:	b29b      	uxth	r3, r3
}
    810c:	4618      	mov	r0, r3
    810e:	370c      	adds	r7, #12
    8110:	46bd      	mov	sp, r7
    8112:	f85d 7b04 	ldr.w	r7, [sp], #4
    8116:	4770      	bx	lr

00008118 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    8118:	b580      	push	{r7, lr}
    811a:	b082      	sub	sp, #8
    811c:	af00      	add	r7, sp, #0
    811e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    8120:	687b      	ldr	r3, [r7, #4]
    8122:	881b      	ldrh	r3, [r3, #0]
    8124:	b29b      	uxth	r3, r3
    8126:	f043 0301 	orr.w	r3, r3, #1
    812a:	b29a      	uxth	r2, r3
    812c:	687b      	ldr	r3, [r7, #4]
    812e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    8130:	2101      	movs	r1, #1
    8132:	6878      	ldr	r0, [r7, #4]
    8134:	4b02      	ldr	r3, [pc, #8]	; (8140 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    8136:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8138:	bf00      	nop
    813a:	3708      	adds	r7, #8
    813c:	46bd      	mov	sp, r7
    813e:	bd80      	pop	{r7, pc}
    8140:	00008089 	.word	0x00008089

00008144 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8144:	b580      	push	{r7, lr}
    8146:	b084      	sub	sp, #16
    8148:	af00      	add	r7, sp, #0
    814a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    814c:	f248 0103 	movw	r1, #32771	; 0x8003
    8150:	6878      	ldr	r0, [r7, #4]
    8152:	4b0a      	ldr	r3, [pc, #40]	; (817c <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    8154:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    8156:	687b      	ldr	r3, [r7, #4]
    8158:	881b      	ldrh	r3, [r3, #0]
    815a:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    815c:	89fb      	ldrh	r3, [r7, #14]
    815e:	085b      	lsrs	r3, r3, #1
    8160:	b29b      	uxth	r3, r3
    8162:	f003 0301 	and.w	r3, r3, #1
    8166:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    8168:	89fb      	ldrh	r3, [r7, #14]
    816a:	2b00      	cmp	r3, #0
    816c:	bf14      	ite	ne
    816e:	2301      	movne	r3, #1
    8170:	2300      	moveq	r3, #0
    8172:	b2db      	uxtb	r3, r3
}
    8174:	4618      	mov	r0, r3
    8176:	3710      	adds	r7, #16
    8178:	46bd      	mov	sp, r7
    817a:	bd80      	pop	{r7, pc}
    817c:	00008089 	.word	0x00008089

00008180 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8180:	b580      	push	{r7, lr}
    8182:	b082      	sub	sp, #8
    8184:	af00      	add	r7, sp, #0
    8186:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	881b      	ldrh	r3, [r3, #0]
    818c:	b29b      	uxth	r3, r3
    818e:	f023 0302 	bic.w	r3, r3, #2
    8192:	b29a      	uxth	r2, r3
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8198:	f248 0103 	movw	r1, #32771	; 0x8003
    819c:	6878      	ldr	r0, [r7, #4]
    819e:	4b03      	ldr	r3, [pc, #12]	; (81ac <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    81a0:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    81a2:	bf00      	nop
    81a4:	3708      	adds	r7, #8
    81a6:	46bd      	mov	sp, r7
    81a8:	bd80      	pop	{r7, pc}
    81aa:	bf00      	nop
    81ac:	00008089 	.word	0x00008089

000081b0 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    81b0:	b580      	push	{r7, lr}
    81b2:	b082      	sub	sp, #8
    81b4:	af00      	add	r7, sp, #0
    81b6:	6078      	str	r0, [r7, #4]
    81b8:	460b      	mov	r3, r1
    81ba:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    81bc:	687b      	ldr	r3, [r7, #4]
    81be:	887a      	ldrh	r2, [r7, #2]
    81c0:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    81c2:	f248 0103 	movw	r1, #32771	; 0x8003
    81c6:	6878      	ldr	r0, [r7, #4]
    81c8:	4b02      	ldr	r3, [pc, #8]	; (81d4 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    81ca:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    81cc:	bf00      	nop
    81ce:	3708      	adds	r7, #8
    81d0:	46bd      	mov	sp, r7
    81d2:	bd80      	pop	{r7, pc}
    81d4:	00008089 	.word	0x00008089

000081d8 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    81d8:	b580      	push	{r7, lr}
    81da:	b082      	sub	sp, #8
    81dc:	af00      	add	r7, sp, #0
    81de:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    81e0:	2108      	movs	r1, #8
    81e2:	6878      	ldr	r0, [r7, #4]
    81e4:	4b03      	ldr	r3, [pc, #12]	; (81f4 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    81e6:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    81e8:	687b      	ldr	r3, [r7, #4]
    81ea:	699b      	ldr	r3, [r3, #24]
}
    81ec:	4618      	mov	r0, r3
    81ee:	3708      	adds	r7, #8
    81f0:	46bd      	mov	sp, r7
    81f2:	bd80      	pop	{r7, pc}
    81f4:	00008089 	.word	0x00008089

000081f8 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    81f8:	b480      	push	{r7}
    81fa:	b083      	sub	sp, #12
    81fc:	af00      	add	r7, sp, #0
    81fe:	6078      	str	r0, [r7, #4]
    8200:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    8202:	687b      	ldr	r3, [r7, #4]
    8204:	683a      	ldr	r2, [r7, #0]
    8206:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    8208:	bf00      	nop
    820a:	370c      	adds	r7, #12
    820c:	46bd      	mov	sp, r7
    820e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8212:	4770      	bx	lr

00008214 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    8214:	b580      	push	{r7, lr}
    8216:	b082      	sub	sp, #8
    8218:	af00      	add	r7, sp, #0
    821a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    821c:	687b      	ldr	r3, [r7, #4]
    821e:	2b00      	cmp	r3, #0
    8220:	d005      	beq.n	822e <_calendar_init+0x1a>
    8222:	687b      	ldr	r3, [r7, #4]
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	2b00      	cmp	r3, #0
    8228:	d001      	beq.n	822e <_calendar_init+0x1a>
    822a:	2301      	movs	r3, #1
    822c:	e000      	b.n	8230 <_calendar_init+0x1c>
    822e:	2300      	movs	r3, #0
    8230:	f003 0301 	and.w	r3, r3, #1
    8234:	b2db      	uxtb	r3, r3
    8236:	222f      	movs	r2, #47	; 0x2f
    8238:	491b      	ldr	r1, [pc, #108]	; (82a8 <_calendar_init+0x94>)
    823a:	4618      	mov	r0, r3
    823c:	4b1b      	ldr	r3, [pc, #108]	; (82ac <_calendar_init+0x98>)
    823e:	4798      	blx	r3

	_rtc_dev = dev;
    8240:	4a1b      	ldr	r2, [pc, #108]	; (82b0 <_calendar_init+0x9c>)
    8242:	687b      	ldr	r3, [r7, #4]
    8244:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    8246:	687b      	ldr	r3, [r7, #4]
    8248:	681b      	ldr	r3, [r3, #0]
    824a:	4618      	mov	r0, r3
    824c:	4b19      	ldr	r3, [pc, #100]	; (82b4 <_calendar_init+0xa0>)
    824e:	4798      	blx	r3
    8250:	4603      	mov	r3, r0
    8252:	2b00      	cmp	r3, #0
    8254:	d00a      	beq.n	826c <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    8256:	687b      	ldr	r3, [r7, #4]
    8258:	681b      	ldr	r3, [r3, #0]
    825a:	4618      	mov	r0, r3
    825c:	4b16      	ldr	r3, [pc, #88]	; (82b8 <_calendar_init+0xa4>)
    825e:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	681b      	ldr	r3, [r3, #0]
    8264:	2102      	movs	r1, #2
    8266:	4618      	mov	r0, r3
    8268:	4b14      	ldr	r3, [pc, #80]	; (82bc <_calendar_init+0xa8>)
    826a:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    826c:	687b      	ldr	r3, [r7, #4]
    826e:	681b      	ldr	r3, [r3, #0]
    8270:	4618      	mov	r0, r3
    8272:	4b13      	ldr	r3, [pc, #76]	; (82c0 <_calendar_init+0xac>)
    8274:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	681b      	ldr	r3, [r3, #0]
    827a:	2101      	movs	r1, #1
    827c:	4618      	mov	r0, r3
    827e:	4b0f      	ldr	r3, [pc, #60]	; (82bc <_calendar_init+0xa8>)
    8280:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    8282:	687b      	ldr	r3, [r7, #4]
    8284:	681b      	ldr	r3, [r3, #0]
    8286:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    828a:	4618      	mov	r0, r3
    828c:	4b0d      	ldr	r3, [pc, #52]	; (82c4 <_calendar_init+0xb0>)
    828e:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    8294:	2100      	movs	r1, #0
    8296:	4618      	mov	r0, r3
    8298:	4b0b      	ldr	r3, [pc, #44]	; (82c8 <_calendar_init+0xb4>)
    829a:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    829c:	2300      	movs	r3, #0
}
    829e:	4618      	mov	r0, r3
    82a0:	3708      	adds	r7, #8
    82a2:	46bd      	mov	sp, r7
    82a4:	bd80      	pop	{r7, pc}
    82a6:	bf00      	nop
    82a8:	00012b70 	.word	0x00012b70
    82ac:	00005ed5 	.word	0x00005ed5
    82b0:	200021b0 	.word	0x200021b0
    82b4:	00008145 	.word	0x00008145
    82b8:	00008181 	.word	0x00008181
    82bc:	00008089 	.word	0x00008089
    82c0:	00008119 	.word	0x00008119
    82c4:	000081b1 	.word	0x000081b1
    82c8:	000081f9 	.word	0x000081f9

000082cc <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    82cc:	b580      	push	{r7, lr}
    82ce:	b082      	sub	sp, #8
    82d0:	af00      	add	r7, sp, #0
    82d2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	2b00      	cmp	r3, #0
    82d8:	d005      	beq.n	82e6 <_calendar_get_counter+0x1a>
    82da:	687b      	ldr	r3, [r7, #4]
    82dc:	681b      	ldr	r3, [r3, #0]
    82de:	2b00      	cmp	r3, #0
    82e0:	d001      	beq.n	82e6 <_calendar_get_counter+0x1a>
    82e2:	2301      	movs	r3, #1
    82e4:	e000      	b.n	82e8 <_calendar_get_counter+0x1c>
    82e6:	2300      	movs	r3, #0
    82e8:	f003 0301 	and.w	r3, r3, #1
    82ec:	b2db      	uxtb	r3, r3
    82ee:	2299      	movs	r2, #153	; 0x99
    82f0:	4906      	ldr	r1, [pc, #24]	; (830c <_calendar_get_counter+0x40>)
    82f2:	4618      	mov	r0, r3
    82f4:	4b06      	ldr	r3, [pc, #24]	; (8310 <_calendar_get_counter+0x44>)
    82f6:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    82f8:	687b      	ldr	r3, [r7, #4]
    82fa:	681b      	ldr	r3, [r3, #0]
    82fc:	4618      	mov	r0, r3
    82fe:	4b05      	ldr	r3, [pc, #20]	; (8314 <_calendar_get_counter+0x48>)
    8300:	4798      	blx	r3
    8302:	4603      	mov	r3, r0
}
    8304:	4618      	mov	r0, r3
    8306:	3708      	adds	r7, #8
    8308:	46bd      	mov	sp, r7
    830a:	bd80      	pop	{r7, pc}
    830c:	00012b70 	.word	0x00012b70
    8310:	00005ed5 	.word	0x00005ed5
    8314:	000081d9 	.word	0x000081d9

00008318 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    8318:	b580      	push	{r7, lr}
    831a:	b084      	sub	sp, #16
    831c:	af00      	add	r7, sp, #0
    831e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    8320:	687b      	ldr	r3, [r7, #4]
    8322:	681b      	ldr	r3, [r3, #0]
    8324:	4618      	mov	r0, r3
    8326:	4b19      	ldr	r3, [pc, #100]	; (838c <_rtc_interrupt_handler+0x74>)
    8328:	4798      	blx	r3
    832a:	4603      	mov	r3, r0
    832c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	681b      	ldr	r3, [r3, #0]
    8332:	4618      	mov	r0, r3
    8334:	4b16      	ldr	r3, [pc, #88]	; (8390 <_rtc_interrupt_handler+0x78>)
    8336:	4798      	blx	r3
    8338:	4603      	mov	r3, r0
    833a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    833c:	89fa      	ldrh	r2, [r7, #14]
    833e:	89bb      	ldrh	r3, [r7, #12]
    8340:	4013      	ands	r3, r2
    8342:	b29b      	uxth	r3, r3
    8344:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8348:	2b00      	cmp	r3, #0
    834a:	d009      	beq.n	8360 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    834c:	687b      	ldr	r3, [r7, #4]
    834e:	685b      	ldr	r3, [r3, #4]
    8350:	6878      	ldr	r0, [r7, #4]
    8352:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    8354:	687b      	ldr	r3, [r7, #4]
    8356:	681b      	ldr	r3, [r3, #0]
    8358:	4618      	mov	r0, r3
    835a:	4b0e      	ldr	r3, [pc, #56]	; (8394 <_rtc_interrupt_handler+0x7c>)
    835c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    835e:	e010      	b.n	8382 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    8360:	89fa      	ldrh	r2, [r7, #14]
    8362:	89bb      	ldrh	r3, [r7, #12]
    8364:	4013      	ands	r3, r2
    8366:	b29b      	uxth	r3, r3
    8368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    836c:	2b00      	cmp	r3, #0
    836e:	d008      	beq.n	8382 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	689b      	ldr	r3, [r3, #8]
    8374:	6878      	ldr	r0, [r7, #4]
    8376:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	681b      	ldr	r3, [r3, #0]
    837c:	4618      	mov	r0, r3
    837e:	4b06      	ldr	r3, [pc, #24]	; (8398 <_rtc_interrupt_handler+0x80>)
    8380:	4798      	blx	r3
}
    8382:	bf00      	nop
    8384:	3710      	adds	r7, #16
    8386:	46bd      	mov	sp, r7
    8388:	bd80      	pop	{r7, pc}
    838a:	bf00      	nop
    838c:	000080e5 	.word	0x000080e5
    8390:	000080ff 	.word	0x000080ff
    8394:	000080ad 	.word	0x000080ad
    8398:	000080c9 	.word	0x000080c9

0000839c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    839c:	b580      	push	{r7, lr}
    839e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    83a0:	4b03      	ldr	r3, [pc, #12]	; (83b0 <RTC_Handler+0x14>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	4618      	mov	r0, r3
    83a6:	4b03      	ldr	r3, [pc, #12]	; (83b4 <RTC_Handler+0x18>)
    83a8:	4798      	blx	r3
}
    83aa:	bf00      	nop
    83ac:	bd80      	pop	{r7, pc}
    83ae:	bf00      	nop
    83b0:	200021b0 	.word	0x200021b0
    83b4:	00008319 	.word	0x00008319

000083b8 <__NVIC_EnableIRQ>:
{
    83b8:	b480      	push	{r7}
    83ba:	b083      	sub	sp, #12
    83bc:	af00      	add	r7, sp, #0
    83be:	4603      	mov	r3, r0
    83c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    83c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83c6:	2b00      	cmp	r3, #0
    83c8:	db0b      	blt.n	83e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83ca:	4909      	ldr	r1, [pc, #36]	; (83f0 <__NVIC_EnableIRQ+0x38>)
    83cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83d0:	095b      	lsrs	r3, r3, #5
    83d2:	88fa      	ldrh	r2, [r7, #6]
    83d4:	f002 021f 	and.w	r2, r2, #31
    83d8:	2001      	movs	r0, #1
    83da:	fa00 f202 	lsl.w	r2, r0, r2
    83de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    83e2:	bf00      	nop
    83e4:	370c      	adds	r7, #12
    83e6:	46bd      	mov	sp, r7
    83e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ec:	4770      	bx	lr
    83ee:	bf00      	nop
    83f0:	e000e100 	.word	0xe000e100

000083f4 <__NVIC_DisableIRQ>:
{
    83f4:	b480      	push	{r7}
    83f6:	b083      	sub	sp, #12
    83f8:	af00      	add	r7, sp, #0
    83fa:	4603      	mov	r3, r0
    83fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    83fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8402:	2b00      	cmp	r3, #0
    8404:	db10      	blt.n	8428 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8406:	490b      	ldr	r1, [pc, #44]	; (8434 <__NVIC_DisableIRQ+0x40>)
    8408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    840c:	095b      	lsrs	r3, r3, #5
    840e:	88fa      	ldrh	r2, [r7, #6]
    8410:	f002 021f 	and.w	r2, r2, #31
    8414:	2001      	movs	r0, #1
    8416:	fa00 f202 	lsl.w	r2, r0, r2
    841a:	3320      	adds	r3, #32
    841c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8424:	f3bf 8f6f 	isb	sy
}
    8428:	bf00      	nop
    842a:	370c      	adds	r7, #12
    842c:	46bd      	mov	sp, r7
    842e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8432:	4770      	bx	lr
    8434:	e000e100 	.word	0xe000e100

00008438 <__NVIC_ClearPendingIRQ>:
{
    8438:	b480      	push	{r7}
    843a:	b083      	sub	sp, #12
    843c:	af00      	add	r7, sp, #0
    843e:	4603      	mov	r3, r0
    8440:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8446:	2b00      	cmp	r3, #0
    8448:	db0c      	blt.n	8464 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    844a:	4909      	ldr	r1, [pc, #36]	; (8470 <__NVIC_ClearPendingIRQ+0x38>)
    844c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8450:	095b      	lsrs	r3, r3, #5
    8452:	88fa      	ldrh	r2, [r7, #6]
    8454:	f002 021f 	and.w	r2, r2, #31
    8458:	2001      	movs	r0, #1
    845a:	fa00 f202 	lsl.w	r2, r0, r2
    845e:	3360      	adds	r3, #96	; 0x60
    8460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8464:	bf00      	nop
    8466:	370c      	adds	r7, #12
    8468:	46bd      	mov	sp, r7
    846a:	f85d 7b04 	ldr.w	r7, [sp], #4
    846e:	4770      	bx	lr
    8470:	e000e100 	.word	0xe000e100

00008474 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8474:	b480      	push	{r7}
    8476:	b083      	sub	sp, #12
    8478:	af00      	add	r7, sp, #0
    847a:	6078      	str	r0, [r7, #4]
    847c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    847e:	bf00      	nop
    8480:	687b      	ldr	r3, [r7, #4]
    8482:	69da      	ldr	r2, [r3, #28]
    8484:	683b      	ldr	r3, [r7, #0]
    8486:	4013      	ands	r3, r2
    8488:	2b00      	cmp	r3, #0
    848a:	d1f9      	bne.n	8480 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    848c:	bf00      	nop
    848e:	370c      	adds	r7, #12
    8490:	46bd      	mov	sp, r7
    8492:	f85d 7b04 	ldr.w	r7, [sp], #4
    8496:	4770      	bx	lr

00008498 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8498:	b480      	push	{r7}
    849a:	b083      	sub	sp, #12
    849c:	af00      	add	r7, sp, #0
    849e:	6078      	str	r0, [r7, #4]
    84a0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    84a2:	687b      	ldr	r3, [r7, #4]
    84a4:	69da      	ldr	r2, [r3, #28]
    84a6:	683b      	ldr	r3, [r7, #0]
    84a8:	4013      	ands	r3, r2
    84aa:	2b00      	cmp	r3, #0
    84ac:	bf14      	ite	ne
    84ae:	2301      	movne	r3, #1
    84b0:	2300      	moveq	r3, #0
    84b2:	b2db      	uxtb	r3, r3
}
    84b4:	4618      	mov	r0, r3
    84b6:	370c      	adds	r7, #12
    84b8:	46bd      	mov	sp, r7
    84ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    84be:	4770      	bx	lr

000084c0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    84c0:	b480      	push	{r7}
    84c2:	b083      	sub	sp, #12
    84c4:	af00      	add	r7, sp, #0
    84c6:	6078      	str	r0, [r7, #4]
    84c8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    84ca:	bf00      	nop
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	69da      	ldr	r2, [r3, #28]
    84d0:	683b      	ldr	r3, [r7, #0]
    84d2:	4013      	ands	r3, r2
    84d4:	2b00      	cmp	r3, #0
    84d6:	d1f9      	bne.n	84cc <hri_sercomspi_wait_for_sync+0xc>
	};
}
    84d8:	bf00      	nop
    84da:	370c      	adds	r7, #12
    84dc:	46bd      	mov	sp, r7
    84de:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e2:	4770      	bx	lr

000084e4 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    84e4:	b480      	push	{r7}
    84e6:	b083      	sub	sp, #12
    84e8:	af00      	add	r7, sp, #0
    84ea:	6078      	str	r0, [r7, #4]
    84ec:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    84ee:	687b      	ldr	r3, [r7, #4]
    84f0:	69da      	ldr	r2, [r3, #28]
    84f2:	683b      	ldr	r3, [r7, #0]
    84f4:	4013      	ands	r3, r2
    84f6:	2b00      	cmp	r3, #0
    84f8:	bf14      	ite	ne
    84fa:	2301      	movne	r3, #1
    84fc:	2300      	moveq	r3, #0
    84fe:	b2db      	uxtb	r3, r3
}
    8500:	4618      	mov	r0, r3
    8502:	370c      	adds	r7, #12
    8504:	46bd      	mov	sp, r7
    8506:	f85d 7b04 	ldr.w	r7, [sp], #4
    850a:	4770      	bx	lr

0000850c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    850c:	b480      	push	{r7}
    850e:	b083      	sub	sp, #12
    8510:	af00      	add	r7, sp, #0
    8512:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    8514:	687b      	ldr	r3, [r7, #4]
    8516:	2201      	movs	r2, #1
    8518:	761a      	strb	r2, [r3, #24]
}
    851a:	bf00      	nop
    851c:	370c      	adds	r7, #12
    851e:	46bd      	mov	sp, r7
    8520:	f85d 7b04 	ldr.w	r7, [sp], #4
    8524:	4770      	bx	lr

00008526 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    8526:	b480      	push	{r7}
    8528:	b083      	sub	sp, #12
    852a:	af00      	add	r7, sp, #0
    852c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    852e:	687b      	ldr	r3, [r7, #4]
    8530:	2202      	movs	r2, #2
    8532:	761a      	strb	r2, [r3, #24]
}
    8534:	bf00      	nop
    8536:	370c      	adds	r7, #12
    8538:	46bd      	mov	sp, r7
    853a:	f85d 7b04 	ldr.w	r7, [sp], #4
    853e:	4770      	bx	lr

00008540 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    8540:	b480      	push	{r7}
    8542:	b083      	sub	sp, #12
    8544:	af00      	add	r7, sp, #0
    8546:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    8548:	687b      	ldr	r3, [r7, #4]
    854a:	7e1b      	ldrb	r3, [r3, #24]
    854c:	b2db      	uxtb	r3, r3
}
    854e:	4618      	mov	r0, r3
    8550:	370c      	adds	r7, #12
    8552:	46bd      	mov	sp, r7
    8554:	f85d 7b04 	ldr.w	r7, [sp], #4
    8558:	4770      	bx	lr

0000855a <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    855a:	b480      	push	{r7}
    855c:	b083      	sub	sp, #12
    855e:	af00      	add	r7, sp, #0
    8560:	6078      	str	r0, [r7, #4]
    8562:	460b      	mov	r3, r1
    8564:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    8566:	687b      	ldr	r3, [r7, #4]
    8568:	78fa      	ldrb	r2, [r7, #3]
    856a:	761a      	strb	r2, [r3, #24]
}
    856c:	bf00      	nop
    856e:	370c      	adds	r7, #12
    8570:	46bd      	mov	sp, r7
    8572:	f85d 7b04 	ldr.w	r7, [sp], #4
    8576:	4770      	bx	lr

00008578 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    8578:	b480      	push	{r7}
    857a:	b085      	sub	sp, #20
    857c:	af00      	add	r7, sp, #0
    857e:	6078      	str	r0, [r7, #4]
    8580:	460b      	mov	r3, r1
    8582:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    8584:	687b      	ldr	r3, [r7, #4]
    8586:	7e1b      	ldrb	r3, [r3, #24]
    8588:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    858a:	7bfa      	ldrb	r2, [r7, #15]
    858c:	78fb      	ldrb	r3, [r7, #3]
    858e:	4013      	ands	r3, r2
    8590:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8592:	7bfb      	ldrb	r3, [r7, #15]
}
    8594:	4618      	mov	r0, r3
    8596:	3714      	adds	r7, #20
    8598:	46bd      	mov	sp, r7
    859a:	f85d 7b04 	ldr.w	r7, [sp], #4
    859e:	4770      	bx	lr

000085a0 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    85a0:	b480      	push	{r7}
    85a2:	b083      	sub	sp, #12
    85a4:	af00      	add	r7, sp, #0
    85a6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    85a8:	687b      	ldr	r3, [r7, #4]
    85aa:	7e1b      	ldrb	r3, [r3, #24]
    85ac:	b2db      	uxtb	r3, r3
}
    85ae:	4618      	mov	r0, r3
    85b0:	370c      	adds	r7, #12
    85b2:	46bd      	mov	sp, r7
    85b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    85b8:	4770      	bx	lr

000085ba <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    85ba:	b480      	push	{r7}
    85bc:	b083      	sub	sp, #12
    85be:	af00      	add	r7, sp, #0
    85c0:	6078      	str	r0, [r7, #4]
    85c2:	460b      	mov	r3, r1
    85c4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    85c6:	687b      	ldr	r3, [r7, #4]
    85c8:	78fa      	ldrb	r2, [r7, #3]
    85ca:	761a      	strb	r2, [r3, #24]
}
    85cc:	bf00      	nop
    85ce:	370c      	adds	r7, #12
    85d0:	46bd      	mov	sp, r7
    85d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d6:	4770      	bx	lr

000085d8 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    85d8:	b480      	push	{r7}
    85da:	b083      	sub	sp, #12
    85dc:	af00      	add	r7, sp, #0
    85de:	6078      	str	r0, [r7, #4]
    85e0:	460b      	mov	r3, r1
    85e2:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    85e4:	78fb      	ldrb	r3, [r7, #3]
    85e6:	f083 0301 	eor.w	r3, r3, #1
    85ea:	b2db      	uxtb	r3, r3
    85ec:	2b00      	cmp	r3, #0
    85ee:	d003      	beq.n	85f8 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    85f0:	687b      	ldr	r3, [r7, #4]
    85f2:	2201      	movs	r2, #1
    85f4:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    85f6:	e002      	b.n	85fe <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	2201      	movs	r2, #1
    85fc:	759a      	strb	r2, [r3, #22]
}
    85fe:	bf00      	nop
    8600:	370c      	adds	r7, #12
    8602:	46bd      	mov	sp, r7
    8604:	f85d 7b04 	ldr.w	r7, [sp], #4
    8608:	4770      	bx	lr

0000860a <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    860a:	b480      	push	{r7}
    860c:	b083      	sub	sp, #12
    860e:	af00      	add	r7, sp, #0
    8610:	6078      	str	r0, [r7, #4]
    8612:	460b      	mov	r3, r1
    8614:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8616:	78fb      	ldrb	r3, [r7, #3]
    8618:	f083 0301 	eor.w	r3, r3, #1
    861c:	b2db      	uxtb	r3, r3
    861e:	2b00      	cmp	r3, #0
    8620:	d003      	beq.n	862a <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    8622:	687b      	ldr	r3, [r7, #4]
    8624:	2202      	movs	r2, #2
    8626:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    8628:	e002      	b.n	8630 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    862a:	687b      	ldr	r3, [r7, #4]
    862c:	2202      	movs	r2, #2
    862e:	759a      	strb	r2, [r3, #22]
}
    8630:	bf00      	nop
    8632:	370c      	adds	r7, #12
    8634:	46bd      	mov	sp, r7
    8636:	f85d 7b04 	ldr.w	r7, [sp], #4
    863a:	4770      	bx	lr

0000863c <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    863c:	b480      	push	{r7}
    863e:	b083      	sub	sp, #12
    8640:	af00      	add	r7, sp, #0
    8642:	6078      	str	r0, [r7, #4]
    8644:	460b      	mov	r3, r1
    8646:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8648:	78fb      	ldrb	r3, [r7, #3]
    864a:	f083 0301 	eor.w	r3, r3, #1
    864e:	b2db      	uxtb	r3, r3
    8650:	2b00      	cmp	r3, #0
    8652:	d003      	beq.n	865c <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	2280      	movs	r2, #128	; 0x80
    8658:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    865a:	e002      	b.n	8662 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	2280      	movs	r2, #128	; 0x80
    8660:	759a      	strb	r2, [r3, #22]
}
    8662:	bf00      	nop
    8664:	370c      	adds	r7, #12
    8666:	46bd      	mov	sp, r7
    8668:	f85d 7b04 	ldr.w	r7, [sp], #4
    866c:	4770      	bx	lr

0000866e <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    866e:	b480      	push	{r7}
    8670:	b083      	sub	sp, #12
    8672:	af00      	add	r7, sp, #0
    8674:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    8676:	687b      	ldr	r3, [r7, #4]
    8678:	2201      	movs	r2, #1
    867a:	759a      	strb	r2, [r3, #22]
}
    867c:	bf00      	nop
    867e:	370c      	adds	r7, #12
    8680:	46bd      	mov	sp, r7
    8682:	f85d 7b04 	ldr.w	r7, [sp], #4
    8686:	4770      	bx	lr

00008688 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    8688:	b480      	push	{r7}
    868a:	b083      	sub	sp, #12
    868c:	af00      	add	r7, sp, #0
    868e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    8690:	687b      	ldr	r3, [r7, #4]
    8692:	2201      	movs	r2, #1
    8694:	751a      	strb	r2, [r3, #20]
}
    8696:	bf00      	nop
    8698:	370c      	adds	r7, #12
    869a:	46bd      	mov	sp, r7
    869c:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a0:	4770      	bx	lr

000086a2 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    86a2:	b480      	push	{r7}
    86a4:	b083      	sub	sp, #12
    86a6:	af00      	add	r7, sp, #0
    86a8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	2202      	movs	r2, #2
    86ae:	759a      	strb	r2, [r3, #22]
}
    86b0:	bf00      	nop
    86b2:	370c      	adds	r7, #12
    86b4:	46bd      	mov	sp, r7
    86b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ba:	4770      	bx	lr

000086bc <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    86bc:	b480      	push	{r7}
    86be:	b083      	sub	sp, #12
    86c0:	af00      	add	r7, sp, #0
    86c2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    86c4:	687b      	ldr	r3, [r7, #4]
    86c6:	2202      	movs	r2, #2
    86c8:	751a      	strb	r2, [r3, #20]
}
    86ca:	bf00      	nop
    86cc:	370c      	adds	r7, #12
    86ce:	46bd      	mov	sp, r7
    86d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86d4:	4770      	bx	lr

000086d6 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    86d6:	b480      	push	{r7}
    86d8:	b083      	sub	sp, #12
    86da:	af00      	add	r7, sp, #0
    86dc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    86de:	687b      	ldr	r3, [r7, #4]
    86e0:	2204      	movs	r2, #4
    86e2:	759a      	strb	r2, [r3, #22]
}
    86e4:	bf00      	nop
    86e6:	370c      	adds	r7, #12
    86e8:	46bd      	mov	sp, r7
    86ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ee:	4770      	bx	lr

000086f0 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    86f0:	b480      	push	{r7}
    86f2:	b083      	sub	sp, #12
    86f4:	af00      	add	r7, sp, #0
    86f6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    86f8:	687b      	ldr	r3, [r7, #4]
    86fa:	2204      	movs	r2, #4
    86fc:	751a      	strb	r2, [r3, #20]
}
    86fe:	bf00      	nop
    8700:	370c      	adds	r7, #12
    8702:	46bd      	mov	sp, r7
    8704:	f85d 7b04 	ldr.w	r7, [sp], #4
    8708:	4770      	bx	lr

0000870a <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    870a:	b480      	push	{r7}
    870c:	b083      	sub	sp, #12
    870e:	af00      	add	r7, sp, #0
    8710:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    8712:	687b      	ldr	r3, [r7, #4]
    8714:	7d9b      	ldrb	r3, [r3, #22]
    8716:	b2db      	uxtb	r3, r3
}
    8718:	4618      	mov	r0, r3
    871a:	370c      	adds	r7, #12
    871c:	46bd      	mov	sp, r7
    871e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8722:	4770      	bx	lr

00008724 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8724:	b580      	push	{r7, lr}
    8726:	b082      	sub	sp, #8
    8728:	af00      	add	r7, sp, #0
    872a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	681b      	ldr	r3, [r3, #0]
    8730:	f043 0202 	orr.w	r2, r3, #2
    8734:	687b      	ldr	r3, [r7, #4]
    8736:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    8738:	2103      	movs	r1, #3
    873a:	6878      	ldr	r0, [r7, #4]
    873c:	4b02      	ldr	r3, [pc, #8]	; (8748 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    873e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8740:	bf00      	nop
    8742:	3708      	adds	r7, #8
    8744:	46bd      	mov	sp, r7
    8746:	bd80      	pop	{r7, pc}
    8748:	00008475 	.word	0x00008475

0000874c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    874c:	b580      	push	{r7, lr}
    874e:	b082      	sub	sp, #8
    8750:	af00      	add	r7, sp, #0
    8752:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	681b      	ldr	r3, [r3, #0]
    8758:	f023 0202 	bic.w	r2, r3, #2
    875c:	687b      	ldr	r3, [r7, #4]
    875e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    8760:	2103      	movs	r1, #3
    8762:	6878      	ldr	r0, [r7, #4]
    8764:	4b02      	ldr	r3, [pc, #8]	; (8770 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    8766:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8768:	bf00      	nop
    876a:	3708      	adds	r7, #8
    876c:	46bd      	mov	sp, r7
    876e:	bd80      	pop	{r7, pc}
    8770:	00008475 	.word	0x00008475

00008774 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    8774:	b480      	push	{r7}
    8776:	b085      	sub	sp, #20
    8778:	af00      	add	r7, sp, #0
    877a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    877c:	687b      	ldr	r3, [r7, #4]
    877e:	681b      	ldr	r3, [r3, #0]
    8780:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    8782:	68fb      	ldr	r3, [r7, #12]
    8784:	0edb      	lsrs	r3, r3, #27
    8786:	f003 0301 	and.w	r3, r3, #1
    878a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    878c:	68fb      	ldr	r3, [r7, #12]
    878e:	2b00      	cmp	r3, #0
    8790:	bf14      	ite	ne
    8792:	2301      	movne	r3, #1
    8794:	2300      	moveq	r3, #0
    8796:	b2db      	uxtb	r3, r3
}
    8798:	4618      	mov	r0, r3
    879a:	3714      	adds	r7, #20
    879c:	46bd      	mov	sp, r7
    879e:	f85d 7b04 	ldr.w	r7, [sp], #4
    87a2:	4770      	bx	lr

000087a4 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    87a4:	b580      	push	{r7, lr}
    87a6:	b084      	sub	sp, #16
    87a8:	af00      	add	r7, sp, #0
    87aa:	6078      	str	r0, [r7, #4]
    87ac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    87ae:	2103      	movs	r1, #3
    87b0:	6878      	ldr	r0, [r7, #4]
    87b2:	4b07      	ldr	r3, [pc, #28]	; (87d0 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    87b4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    87b6:	687b      	ldr	r3, [r7, #4]
    87b8:	681b      	ldr	r3, [r3, #0]
    87ba:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    87bc:	68fa      	ldr	r2, [r7, #12]
    87be:	683b      	ldr	r3, [r7, #0]
    87c0:	4013      	ands	r3, r2
    87c2:	60fb      	str	r3, [r7, #12]
	return tmp;
    87c4:	68fb      	ldr	r3, [r7, #12]
}
    87c6:	4618      	mov	r0, r3
    87c8:	3710      	adds	r7, #16
    87ca:	46bd      	mov	sp, r7
    87cc:	bd80      	pop	{r7, pc}
    87ce:	bf00      	nop
    87d0:	00008475 	.word	0x00008475

000087d4 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	6078      	str	r0, [r7, #4]
    87dc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    87de:	687b      	ldr	r3, [r7, #4]
    87e0:	683a      	ldr	r2, [r7, #0]
    87e2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    87e4:	2103      	movs	r1, #3
    87e6:	6878      	ldr	r0, [r7, #4]
    87e8:	4b02      	ldr	r3, [pc, #8]	; (87f4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    87ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    87ec:	bf00      	nop
    87ee:	3708      	adds	r7, #8
    87f0:	46bd      	mov	sp, r7
    87f2:	bd80      	pop	{r7, pc}
    87f4:	00008475 	.word	0x00008475

000087f8 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    87f8:	b580      	push	{r7, lr}
    87fa:	b084      	sub	sp, #16
    87fc:	af00      	add	r7, sp, #0
    87fe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8800:	2103      	movs	r1, #3
    8802:	6878      	ldr	r0, [r7, #4]
    8804:	4b09      	ldr	r3, [pc, #36]	; (882c <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    8806:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    8808:	687b      	ldr	r3, [r7, #4]
    880a:	681b      	ldr	r3, [r3, #0]
    880c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    880e:	68fb      	ldr	r3, [r7, #12]
    8810:	085b      	lsrs	r3, r3, #1
    8812:	f003 0301 	and.w	r3, r3, #1
    8816:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8818:	68fb      	ldr	r3, [r7, #12]
    881a:	2b00      	cmp	r3, #0
    881c:	bf14      	ite	ne
    881e:	2301      	movne	r3, #1
    8820:	2300      	moveq	r3, #0
    8822:	b2db      	uxtb	r3, r3
}
    8824:	4618      	mov	r0, r3
    8826:	3710      	adds	r7, #16
    8828:	46bd      	mov	sp, r7
    882a:	bd80      	pop	{r7, pc}
    882c:	000084c1 	.word	0x000084c1

00008830 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8830:	b580      	push	{r7, lr}
    8832:	b082      	sub	sp, #8
    8834:	af00      	add	r7, sp, #0
    8836:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	681b      	ldr	r3, [r3, #0]
    883c:	f023 0202 	bic.w	r2, r3, #2
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8844:	2103      	movs	r1, #3
    8846:	6878      	ldr	r0, [r7, #4]
    8848:	4b02      	ldr	r3, [pc, #8]	; (8854 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    884a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    884c:	bf00      	nop
    884e:	3708      	adds	r7, #8
    8850:	46bd      	mov	sp, r7
    8852:	bd80      	pop	{r7, pc}
    8854:	000084c1 	.word	0x000084c1

00008858 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    8858:	b580      	push	{r7, lr}
    885a:	b084      	sub	sp, #16
    885c:	af00      	add	r7, sp, #0
    885e:	6078      	str	r0, [r7, #4]
    8860:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8862:	2103      	movs	r1, #3
    8864:	6878      	ldr	r0, [r7, #4]
    8866:	4b07      	ldr	r3, [pc, #28]	; (8884 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    8868:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    886a:	687b      	ldr	r3, [r7, #4]
    886c:	681b      	ldr	r3, [r3, #0]
    886e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8870:	68fa      	ldr	r2, [r7, #12]
    8872:	683b      	ldr	r3, [r7, #0]
    8874:	4013      	ands	r3, r2
    8876:	60fb      	str	r3, [r7, #12]
	return tmp;
    8878:	68fb      	ldr	r3, [r7, #12]
}
    887a:	4618      	mov	r0, r3
    887c:	3710      	adds	r7, #16
    887e:	46bd      	mov	sp, r7
    8880:	bd80      	pop	{r7, pc}
    8882:	bf00      	nop
    8884:	000084c1 	.word	0x000084c1

00008888 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    8888:	b580      	push	{r7, lr}
    888a:	b082      	sub	sp, #8
    888c:	af00      	add	r7, sp, #0
    888e:	6078      	str	r0, [r7, #4]
    8890:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8892:	687b      	ldr	r3, [r7, #4]
    8894:	683a      	ldr	r2, [r7, #0]
    8896:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8898:	2103      	movs	r1, #3
    889a:	6878      	ldr	r0, [r7, #4]
    889c:	4b02      	ldr	r3, [pc, #8]	; (88a8 <hri_sercomspi_write_CTRLA_reg+0x20>)
    889e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    88a0:	bf00      	nop
    88a2:	3708      	adds	r7, #8
    88a4:	46bd      	mov	sp, r7
    88a6:	bd80      	pop	{r7, pc}
    88a8:	000084c1 	.word	0x000084c1

000088ac <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    88ac:	b580      	push	{r7, lr}
    88ae:	b082      	sub	sp, #8
    88b0:	af00      	add	r7, sp, #0
    88b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    88b4:	687b      	ldr	r3, [r7, #4]
    88b6:	685b      	ldr	r3, [r3, #4]
    88b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    88bc:	687b      	ldr	r3, [r7, #4]
    88be:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    88c0:	2104      	movs	r1, #4
    88c2:	6878      	ldr	r0, [r7, #4]
    88c4:	4b02      	ldr	r3, [pc, #8]	; (88d0 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    88c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    88c8:	bf00      	nop
    88ca:	3708      	adds	r7, #8
    88cc:	46bd      	mov	sp, r7
    88ce:	bd80      	pop	{r7, pc}
    88d0:	00008475 	.word	0x00008475

000088d4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    88d4:	b580      	push	{r7, lr}
    88d6:	b082      	sub	sp, #8
    88d8:	af00      	add	r7, sp, #0
    88da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    88dc:	687b      	ldr	r3, [r7, #4]
    88de:	685b      	ldr	r3, [r3, #4]
    88e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    88e4:	687b      	ldr	r3, [r7, #4]
    88e6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    88e8:	2104      	movs	r1, #4
    88ea:	6878      	ldr	r0, [r7, #4]
    88ec:	4b02      	ldr	r3, [pc, #8]	; (88f8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    88ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    88f0:	bf00      	nop
    88f2:	3708      	adds	r7, #8
    88f4:	46bd      	mov	sp, r7
    88f6:	bd80      	pop	{r7, pc}
    88f8:	00008475 	.word	0x00008475

000088fc <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    88fc:	b580      	push	{r7, lr}
    88fe:	b082      	sub	sp, #8
    8900:	af00      	add	r7, sp, #0
    8902:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    8904:	687b      	ldr	r3, [r7, #4]
    8906:	685b      	ldr	r3, [r3, #4]
    8908:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    890c:	687b      	ldr	r3, [r7, #4]
    890e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8910:	2104      	movs	r1, #4
    8912:	6878      	ldr	r0, [r7, #4]
    8914:	4b02      	ldr	r3, [pc, #8]	; (8920 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    8916:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8918:	bf00      	nop
    891a:	3708      	adds	r7, #8
    891c:	46bd      	mov	sp, r7
    891e:	bd80      	pop	{r7, pc}
    8920:	00008475 	.word	0x00008475

00008924 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    8924:	b580      	push	{r7, lr}
    8926:	b082      	sub	sp, #8
    8928:	af00      	add	r7, sp, #0
    892a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	685b      	ldr	r3, [r3, #4]
    8930:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    8934:	687b      	ldr	r3, [r7, #4]
    8936:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8938:	2104      	movs	r1, #4
    893a:	6878      	ldr	r0, [r7, #4]
    893c:	4b02      	ldr	r3, [pc, #8]	; (8948 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    893e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8940:	bf00      	nop
    8942:	3708      	adds	r7, #8
    8944:	46bd      	mov	sp, r7
    8946:	bd80      	pop	{r7, pc}
    8948:	00008475 	.word	0x00008475

0000894c <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    894c:	b580      	push	{r7, lr}
    894e:	b082      	sub	sp, #8
    8950:	af00      	add	r7, sp, #0
    8952:	6078      	str	r0, [r7, #4]
    8954:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    8956:	687b      	ldr	r3, [r7, #4]
    8958:	685a      	ldr	r2, [r3, #4]
    895a:	683b      	ldr	r3, [r7, #0]
    895c:	041b      	lsls	r3, r3, #16
    895e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    8962:	431a      	orrs	r2, r3
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8968:	2104      	movs	r1, #4
    896a:	6878      	ldr	r0, [r7, #4]
    896c:	4b02      	ldr	r3, [pc, #8]	; (8978 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    896e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8970:	bf00      	nop
    8972:	3708      	adds	r7, #8
    8974:	46bd      	mov	sp, r7
    8976:	bd80      	pop	{r7, pc}
    8978:	00008475 	.word	0x00008475

0000897c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    897c:	b580      	push	{r7, lr}
    897e:	b082      	sub	sp, #8
    8980:	af00      	add	r7, sp, #0
    8982:	6078      	str	r0, [r7, #4]
    8984:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    8986:	687b      	ldr	r3, [r7, #4]
    8988:	683a      	ldr	r2, [r7, #0]
    898a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    898c:	2104      	movs	r1, #4
    898e:	6878      	ldr	r0, [r7, #4]
    8990:	4b02      	ldr	r3, [pc, #8]	; (899c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    8992:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8994:	bf00      	nop
    8996:	3708      	adds	r7, #8
    8998:	46bd      	mov	sp, r7
    899a:	bd80      	pop	{r7, pc}
    899c:	00008475 	.word	0x00008475

000089a0 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    89a0:	b580      	push	{r7, lr}
    89a2:	b082      	sub	sp, #8
    89a4:	af00      	add	r7, sp, #0
    89a6:	6078      	str	r0, [r7, #4]
    89a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    89aa:	687b      	ldr	r3, [r7, #4]
    89ac:	683a      	ldr	r2, [r7, #0]
    89ae:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    89b0:	2117      	movs	r1, #23
    89b2:	6878      	ldr	r0, [r7, #4]
    89b4:	4b02      	ldr	r3, [pc, #8]	; (89c0 <hri_sercomspi_write_CTRLB_reg+0x20>)
    89b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    89b8:	bf00      	nop
    89ba:	3708      	adds	r7, #8
    89bc:	46bd      	mov	sp, r7
    89be:	bd80      	pop	{r7, pc}
    89c0:	000084c1 	.word	0x000084c1

000089c4 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    89c4:	b480      	push	{r7}
    89c6:	b083      	sub	sp, #12
    89c8:	af00      	add	r7, sp, #0
    89ca:	6078      	str	r0, [r7, #4]
    89cc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	683a      	ldr	r2, [r7, #0]
    89d2:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    89d4:	bf00      	nop
    89d6:	370c      	adds	r7, #12
    89d8:	46bd      	mov	sp, r7
    89da:	f85d 7b04 	ldr.w	r7, [sp], #4
    89de:	4770      	bx	lr

000089e0 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    89e0:	b480      	push	{r7}
    89e2:	b083      	sub	sp, #12
    89e4:	af00      	add	r7, sp, #0
    89e6:	6078      	str	r0, [r7, #4]
    89e8:	460b      	mov	r3, r1
    89ea:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    89ec:	687b      	ldr	r3, [r7, #4]
    89ee:	78fa      	ldrb	r2, [r7, #3]
    89f0:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    89f2:	bf00      	nop
    89f4:	370c      	adds	r7, #12
    89f6:	46bd      	mov	sp, r7
    89f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    89fc:	4770      	bx	lr
	...

00008a00 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    8a00:	b580      	push	{r7, lr}
    8a02:	b084      	sub	sp, #16
    8a04:	af00      	add	r7, sp, #0
    8a06:	6078      	str	r0, [r7, #4]
    8a08:	460b      	mov	r3, r1
    8a0a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    8a0c:	687b      	ldr	r3, [r7, #4]
    8a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a10:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    8a12:	68fb      	ldr	r3, [r7, #12]
    8a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    8a18:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    8a1a:	78fb      	ldrb	r3, [r7, #3]
    8a1c:	039b      	lsls	r3, r3, #14
    8a1e:	461a      	mov	r2, r3
    8a20:	68fb      	ldr	r3, [r7, #12]
    8a22:	4313      	orrs	r3, r2
    8a24:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    8a26:	687b      	ldr	r3, [r7, #4]
    8a28:	68fa      	ldr	r2, [r7, #12]
    8a2a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8a2c:	2104      	movs	r1, #4
    8a2e:	6878      	ldr	r0, [r7, #4]
    8a30:	4b02      	ldr	r3, [pc, #8]	; (8a3c <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    8a32:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8a34:	bf00      	nop
    8a36:	3710      	adds	r7, #16
    8a38:	46bd      	mov	sp, r7
    8a3a:	bd80      	pop	{r7, pc}
    8a3c:	00008475 	.word	0x00008475

00008a40 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    8a40:	b580      	push	{r7, lr}
    8a42:	b082      	sub	sp, #8
    8a44:	af00      	add	r7, sp, #0
    8a46:	6078      	str	r0, [r7, #4]
    8a48:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    8a4a:	687b      	ldr	r3, [r7, #4]
    8a4c:	683a      	ldr	r2, [r7, #0]
    8a4e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8a50:	2104      	movs	r1, #4
    8a52:	6878      	ldr	r0, [r7, #4]
    8a54:	4b02      	ldr	r3, [pc, #8]	; (8a60 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    8a56:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8a58:	bf00      	nop
    8a5a:	3708      	adds	r7, #8
    8a5c:	46bd      	mov	sp, r7
    8a5e:	bd80      	pop	{r7, pc}
    8a60:	00008475 	.word	0x00008475

00008a64 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    8a64:	b580      	push	{r7, lr}
    8a66:	b082      	sub	sp, #8
    8a68:	af00      	add	r7, sp, #0
    8a6a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8a6c:	2104      	movs	r1, #4
    8a6e:	6878      	ldr	r0, [r7, #4]
    8a70:	4b03      	ldr	r3, [pc, #12]	; (8a80 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    8a72:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    8a74:	687b      	ldr	r3, [r7, #4]
    8a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    8a78:	4618      	mov	r0, r3
    8a7a:	3708      	adds	r7, #8
    8a7c:	46bd      	mov	sp, r7
    8a7e:	bd80      	pop	{r7, pc}
    8a80:	00008475 	.word	0x00008475

00008a84 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    8a84:	b480      	push	{r7}
    8a86:	b083      	sub	sp, #12
    8a88:	af00      	add	r7, sp, #0
    8a8a:	6078      	str	r0, [r7, #4]
    8a8c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    8a8e:	687b      	ldr	r3, [r7, #4]
    8a90:	683a      	ldr	r2, [r7, #0]
    8a92:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8a94:	bf00      	nop
    8a96:	370c      	adds	r7, #12
    8a98:	46bd      	mov	sp, r7
    8a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a9e:	4770      	bx	lr

00008aa0 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    8aa0:	b580      	push	{r7, lr}
    8aa2:	b082      	sub	sp, #8
    8aa4:	af00      	add	r7, sp, #0
    8aa6:	6078      	str	r0, [r7, #4]
    8aa8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    8aaa:	687b      	ldr	r3, [r7, #4]
    8aac:	683a      	ldr	r2, [r7, #0]
    8aae:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8ab0:	2104      	movs	r1, #4
    8ab2:	6878      	ldr	r0, [r7, #4]
    8ab4:	4b02      	ldr	r3, [pc, #8]	; (8ac0 <hri_sercomi2cm_write_DATA_reg+0x20>)
    8ab6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8ab8:	bf00      	nop
    8aba:	3708      	adds	r7, #8
    8abc:	46bd      	mov	sp, r7
    8abe:	bd80      	pop	{r7, pc}
    8ac0:	00008475 	.word	0x00008475

00008ac4 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    8ac4:	b580      	push	{r7, lr}
    8ac6:	b082      	sub	sp, #8
    8ac8:	af00      	add	r7, sp, #0
    8aca:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8acc:	2104      	movs	r1, #4
    8ace:	6878      	ldr	r0, [r7, #4]
    8ad0:	4b03      	ldr	r3, [pc, #12]	; (8ae0 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    8ad2:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    8ad4:	687b      	ldr	r3, [r7, #4]
    8ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8ad8:	4618      	mov	r0, r3
    8ada:	3708      	adds	r7, #8
    8adc:	46bd      	mov	sp, r7
    8ade:	bd80      	pop	{r7, pc}
    8ae0:	00008475 	.word	0x00008475

00008ae4 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    8ae4:	b480      	push	{r7}
    8ae6:	b083      	sub	sp, #12
    8ae8:	af00      	add	r7, sp, #0
    8aea:	6078      	str	r0, [r7, #4]
    8aec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	683a      	ldr	r2, [r7, #0]
    8af2:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8af4:	bf00      	nop
    8af6:	370c      	adds	r7, #12
    8af8:	46bd      	mov	sp, r7
    8afa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8afe:	4770      	bx	lr

00008b00 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    8b00:	b480      	push	{r7}
    8b02:	b083      	sub	sp, #12
    8b04:	af00      	add	r7, sp, #0
    8b06:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8b0c:	4618      	mov	r0, r3
    8b0e:	370c      	adds	r7, #12
    8b10:	46bd      	mov	sp, r7
    8b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b16:	4770      	bx	lr

00008b18 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    8b18:	b480      	push	{r7}
    8b1a:	b083      	sub	sp, #12
    8b1c:	af00      	add	r7, sp, #0
    8b1e:	6078      	str	r0, [r7, #4]
    8b20:	460b      	mov	r3, r1
    8b22:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8b24:	687b      	ldr	r3, [r7, #4]
    8b26:	78fa      	ldrb	r2, [r7, #3]
    8b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8b2c:	bf00      	nop
    8b2e:	370c      	adds	r7, #12
    8b30:	46bd      	mov	sp, r7
    8b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b36:	4770      	bx	lr

00008b38 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    8b38:	b480      	push	{r7}
    8b3a:	b083      	sub	sp, #12
    8b3c:	af00      	add	r7, sp, #0
    8b3e:	6078      	str	r0, [r7, #4]
    8b40:	460b      	mov	r3, r1
    8b42:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	887a      	ldrh	r2, [r7, #2]
    8b48:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8b4a:	bf00      	nop
    8b4c:	370c      	adds	r7, #12
    8b4e:	46bd      	mov	sp, r7
    8b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b54:	4770      	bx	lr
	...

00008b58 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    8b58:	b580      	push	{r7, lr}
    8b5a:	b082      	sub	sp, #8
    8b5c:	af00      	add	r7, sp, #0
    8b5e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8b60:	2104      	movs	r1, #4
    8b62:	6878      	ldr	r0, [r7, #4]
    8b64:	4b06      	ldr	r3, [pc, #24]	; (8b80 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    8b66:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	8b5b      	ldrh	r3, [r3, #26]
    8b6c:	b29b      	uxth	r3, r3
    8b6e:	091b      	lsrs	r3, r3, #4
    8b70:	b29b      	uxth	r3, r3
    8b72:	f003 0303 	and.w	r3, r3, #3
    8b76:	b29b      	uxth	r3, r3
}
    8b78:	4618      	mov	r0, r3
    8b7a:	3708      	adds	r7, #8
    8b7c:	46bd      	mov	sp, r7
    8b7e:	bd80      	pop	{r7, pc}
    8b80:	00008475 	.word	0x00008475

00008b84 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    8b84:	b580      	push	{r7, lr}
    8b86:	b082      	sub	sp, #8
    8b88:	af00      	add	r7, sp, #0
    8b8a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8b8c:	2104      	movs	r1, #4
    8b8e:	6878      	ldr	r0, [r7, #4]
    8b90:	4b04      	ldr	r3, [pc, #16]	; (8ba4 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    8b92:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	8b5b      	ldrh	r3, [r3, #26]
    8b98:	b29b      	uxth	r3, r3
}
    8b9a:	4618      	mov	r0, r3
    8b9c:	3708      	adds	r7, #8
    8b9e:	46bd      	mov	sp, r7
    8ba0:	bd80      	pop	{r7, pc}
    8ba2:	bf00      	nop
    8ba4:	00008475 	.word	0x00008475

00008ba8 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    8ba8:	b580      	push	{r7, lr}
    8baa:	b082      	sub	sp, #8
    8bac:	af00      	add	r7, sp, #0
    8bae:	6078      	str	r0, [r7, #4]
    8bb0:	460b      	mov	r3, r1
    8bb2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    8bb4:	687b      	ldr	r3, [r7, #4]
    8bb6:	887a      	ldrh	r2, [r7, #2]
    8bb8:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8bba:	2104      	movs	r1, #4
    8bbc:	6878      	ldr	r0, [r7, #4]
    8bbe:	4b03      	ldr	r3, [pc, #12]	; (8bcc <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    8bc0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8bc2:	bf00      	nop
    8bc4:	3708      	adds	r7, #8
    8bc6:	46bd      	mov	sp, r7
    8bc8:	bd80      	pop	{r7, pc}
    8bca:	bf00      	nop
    8bcc:	00008475 	.word	0x00008475

00008bd0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    8bd0:	b4b0      	push	{r4, r5, r7}
    8bd2:	b08d      	sub	sp, #52	; 0x34
    8bd4:	af00      	add	r7, sp, #0
    8bd6:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    8bd8:	4b13      	ldr	r3, [pc, #76]	; (8c28 <_sercom_get_hardware_index+0x58>)
    8bda:	f107 040c 	add.w	r4, r7, #12
    8bde:	461d      	mov	r5, r3
    8be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8be4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8bec:	2300      	movs	r3, #0
    8bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    8bf0:	e010      	b.n	8c14 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    8bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8bf4:	009b      	lsls	r3, r3, #2
    8bf6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8bfa:	4413      	add	r3, r2
    8bfc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8c00:	461a      	mov	r2, r3
    8c02:	687b      	ldr	r3, [r7, #4]
    8c04:	429a      	cmp	r2, r3
    8c06:	d102      	bne.n	8c0e <_sercom_get_hardware_index+0x3e>
			return i;
    8c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8c0a:	b2db      	uxtb	r3, r3
    8c0c:	e006      	b.n	8c1c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8c10:	3301      	adds	r3, #1
    8c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    8c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8c16:	2b07      	cmp	r3, #7
    8c18:	d9eb      	bls.n	8bf2 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    8c1a:	2300      	movs	r3, #0
}
    8c1c:	4618      	mov	r0, r3
    8c1e:	3734      	adds	r7, #52	; 0x34
    8c20:	46bd      	mov	sp, r7
    8c22:	bcb0      	pop	{r4, r5, r7}
    8c24:	4770      	bx	lr
    8c26:	bf00      	nop
    8c28:	00012ba4 	.word	0x00012ba4

00008c2c <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    8c2c:	b480      	push	{r7}
    8c2e:	b083      	sub	sp, #12
    8c30:	af00      	add	r7, sp, #0
    8c32:	6078      	str	r0, [r7, #4]
    8c34:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    8c3c:	d102      	bne.n	8c44 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    8c3e:	4a0b      	ldr	r2, [pc, #44]	; (8c6c <_sercom_init_irq_param+0x40>)
    8c40:	683b      	ldr	r3, [r7, #0]
    8c42:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    8c44:	687b      	ldr	r3, [r7, #4]
    8c46:	4a0a      	ldr	r2, [pc, #40]	; (8c70 <_sercom_init_irq_param+0x44>)
    8c48:	4293      	cmp	r3, r2
    8c4a:	d102      	bne.n	8c52 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    8c4c:	4a09      	ldr	r2, [pc, #36]	; (8c74 <_sercom_init_irq_param+0x48>)
    8c4e:	683b      	ldr	r3, [r7, #0]
    8c50:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    8c52:	687b      	ldr	r3, [r7, #4]
    8c54:	4a08      	ldr	r2, [pc, #32]	; (8c78 <_sercom_init_irq_param+0x4c>)
    8c56:	4293      	cmp	r3, r2
    8c58:	d102      	bne.n	8c60 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    8c5a:	4a08      	ldr	r2, [pc, #32]	; (8c7c <_sercom_init_irq_param+0x50>)
    8c5c:	683b      	ldr	r3, [r7, #0]
    8c5e:	6013      	str	r3, [r2, #0]
	}
}
    8c60:	bf00      	nop
    8c62:	370c      	adds	r7, #12
    8c64:	46bd      	mov	sp, r7
    8c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c6a:	4770      	bx	lr
    8c6c:	200021cc 	.word	0x200021cc
    8c70:	43000400 	.word	0x43000400
    8c74:	200021d0 	.word	0x200021d0
    8c78:	43000c00 	.word	0x43000c00
    8c7c:	200021d4 	.word	0x200021d4

00008c80 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    8c80:	b580      	push	{r7, lr}
    8c82:	b084      	sub	sp, #16
    8c84:	af00      	add	r7, sp, #0
    8c86:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    8c88:	6878      	ldr	r0, [r7, #4]
    8c8a:	4b13      	ldr	r3, [pc, #76]	; (8cd8 <_get_i2cm_index+0x58>)
    8c8c:	4798      	blx	r3
    8c8e:	4603      	mov	r3, r0
    8c90:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    8c92:	2300      	movs	r3, #0
    8c94:	73fb      	strb	r3, [r7, #15]
    8c96:	e010      	b.n	8cba <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    8c98:	7bfa      	ldrb	r2, [r7, #15]
    8c9a:	4910      	ldr	r1, [pc, #64]	; (8cdc <_get_i2cm_index+0x5c>)
    8c9c:	4613      	mov	r3, r2
    8c9e:	005b      	lsls	r3, r3, #1
    8ca0:	4413      	add	r3, r2
    8ca2:	00db      	lsls	r3, r3, #3
    8ca4:	440b      	add	r3, r1
    8ca6:	781b      	ldrb	r3, [r3, #0]
    8ca8:	7bba      	ldrb	r2, [r7, #14]
    8caa:	429a      	cmp	r2, r3
    8cac:	d102      	bne.n	8cb4 <_get_i2cm_index+0x34>
			return i;
    8cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8cb2:	e00d      	b.n	8cd0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    8cb4:	7bfb      	ldrb	r3, [r7, #15]
    8cb6:	3301      	adds	r3, #1
    8cb8:	73fb      	strb	r3, [r7, #15]
    8cba:	7bfb      	ldrb	r3, [r7, #15]
    8cbc:	2b02      	cmp	r3, #2
    8cbe:	d9eb      	bls.n	8c98 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    8cc0:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    8cc4:	4906      	ldr	r1, [pc, #24]	; (8ce0 <_get_i2cm_index+0x60>)
    8cc6:	2000      	movs	r0, #0
    8cc8:	4b06      	ldr	r3, [pc, #24]	; (8ce4 <_get_i2cm_index+0x64>)
    8cca:	4798      	blx	r3
	return -1;
    8ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
    8cd0:	4618      	mov	r0, r3
    8cd2:	3710      	adds	r7, #16
    8cd4:	46bd      	mov	sp, r7
    8cd6:	bd80      	pop	{r7, pc}
    8cd8:	00008bd1 	.word	0x00008bd1
    8cdc:	20000018 	.word	0x20000018
    8ce0:	00012b88 	.word	0x00012b88
    8ce4:	00005ed5 	.word	0x00005ed5

00008ce8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    8ce8:	b580      	push	{r7, lr}
    8cea:	b082      	sub	sp, #8
    8cec:	af00      	add	r7, sp, #0
    8cee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    8cf0:	2103      	movs	r1, #3
    8cf2:	6878      	ldr	r0, [r7, #4]
    8cf4:	4b02      	ldr	r3, [pc, #8]	; (8d00 <_sercom_i2c_send_stop+0x18>)
    8cf6:	4798      	blx	r3
}
    8cf8:	bf00      	nop
    8cfa:	3708      	adds	r7, #8
    8cfc:	46bd      	mov	sp, r7
    8cfe:	bd80      	pop	{r7, pc}
    8d00:	0000894d 	.word	0x0000894d

00008d04 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    8d04:	b590      	push	{r4, r7, lr}
    8d06:	b087      	sub	sp, #28
    8d08:	af00      	add	r7, sp, #0
    8d0a:	60f8      	str	r0, [r7, #12]
    8d0c:	60b9      	str	r1, [r7, #8]
    8d0e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    8d10:	68f8      	ldr	r0, [r7, #12]
    8d12:	4b7d      	ldr	r3, [pc, #500]	; (8f08 <_sercom_i2c_sync_analyse_flags+0x204>)
    8d14:	4798      	blx	r3
    8d16:	4603      	mov	r3, r0
    8d18:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    8d1a:	68f8      	ldr	r0, [r7, #12]
    8d1c:	4b7b      	ldr	r3, [pc, #492]	; (8f0c <_sercom_i2c_sync_analyse_flags+0x208>)
    8d1e:	4798      	blx	r3
    8d20:	4603      	mov	r3, r0
    8d22:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    8d24:	68bb      	ldr	r3, [r7, #8]
    8d26:	f003 0301 	and.w	r3, r3, #1
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	f000 8095 	beq.w	8e5a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    8d30:	8a7b      	ldrh	r3, [r7, #18]
    8d32:	f003 0302 	and.w	r3, r3, #2
    8d36:	2b00      	cmp	r3, #0
    8d38:	d01d      	beq.n	8d76 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    8d3a:	68f8      	ldr	r0, [r7, #12]
    8d3c:	4b74      	ldr	r3, [pc, #464]	; (8f10 <_sercom_i2c_sync_analyse_flags+0x20c>)
    8d3e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    8d40:	687b      	ldr	r3, [r7, #4]
    8d42:	885b      	ldrh	r3, [r3, #2]
    8d44:	b29b      	uxth	r3, r3
    8d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8d4a:	b29a      	uxth	r2, r3
    8d4c:	687b      	ldr	r3, [r7, #4]
    8d4e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	885b      	ldrh	r3, [r3, #2]
    8d54:	b29b      	uxth	r3, r3
    8d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8d5a:	b29a      	uxth	r2, r3
    8d5c:	687b      	ldr	r3, [r7, #4]
    8d5e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8d60:	8a7b      	ldrh	r3, [r7, #18]
    8d62:	f003 0301 	and.w	r3, r3, #1
    8d66:	2b00      	cmp	r3, #0
    8d68:	d002      	beq.n	8d70 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    8d6a:	f06f 0304 	mvn.w	r3, #4
    8d6e:	e0c6      	b.n	8efe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    8d70:	f06f 0303 	mvn.w	r3, #3
    8d74:	e0c3      	b.n	8efe <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    8d76:	8a7b      	ldrh	r3, [r7, #18]
    8d78:	f003 0304 	and.w	r3, r3, #4
    8d7c:	2b00      	cmp	r3, #0
    8d7e:	d01f      	beq.n	8dc0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    8d80:	687b      	ldr	r3, [r7, #4]
    8d82:	685b      	ldr	r3, [r3, #4]
    8d84:	2b00      	cmp	r3, #0
    8d86:	dd07      	ble.n	8d98 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    8d88:	687b      	ldr	r3, [r7, #4]
    8d8a:	885b      	ldrh	r3, [r3, #2]
    8d8c:	b29b      	uxth	r3, r3
    8d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8d92:	b29a      	uxth	r2, r3
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	885b      	ldrh	r3, [r3, #2]
    8d9c:	b29b      	uxth	r3, r3
    8d9e:	b21b      	sxth	r3, r3
    8da0:	2b00      	cmp	r3, #0
    8da2:	da02      	bge.n	8daa <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    8da4:	68f8      	ldr	r0, [r7, #12]
    8da6:	4b5b      	ldr	r3, [pc, #364]	; (8f14 <_sercom_i2c_sync_analyse_flags+0x210>)
    8da8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8daa:	687b      	ldr	r3, [r7, #4]
    8dac:	885b      	ldrh	r3, [r3, #2]
    8dae:	b29b      	uxth	r3, r3
    8db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8db4:	b29a      	uxth	r2, r3
    8db6:	687b      	ldr	r3, [r7, #4]
    8db8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    8dba:	f06f 0301 	mvn.w	r3, #1
    8dbe:	e09e      	b.n	8efe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	885b      	ldrh	r3, [r3, #2]
    8dc4:	b29b      	uxth	r3, r3
    8dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8dca:	2b00      	cmp	r3, #0
    8dcc:	d01c      	beq.n	8e08 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    8dce:	687b      	ldr	r3, [r7, #4]
    8dd0:	881b      	ldrh	r3, [r3, #0]
    8dd2:	121b      	asrs	r3, r3, #8
    8dd4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8dd6:	f003 0406 	and.w	r4, r3, #6
    8dda:	68f8      	ldr	r0, [r7, #12]
    8ddc:	4b4e      	ldr	r3, [pc, #312]	; (8f18 <_sercom_i2c_sync_analyse_flags+0x214>)
    8dde:	4798      	blx	r3
    8de0:	4603      	mov	r3, r0
    8de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8de6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    8de8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    8dec:	4619      	mov	r1, r3
    8dee:	68f8      	ldr	r0, [r7, #12]
    8df0:	4b4a      	ldr	r3, [pc, #296]	; (8f1c <_sercom_i2c_sync_analyse_flags+0x218>)
    8df2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    8df4:	687b      	ldr	r3, [r7, #4]
    8df6:	885b      	ldrh	r3, [r3, #2]
    8df8:	b29b      	uxth	r3, r3
    8dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    8dfe:	b29a      	uxth	r2, r3
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    8e04:	2300      	movs	r3, #0
    8e06:	e07a      	b.n	8efe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    8e08:	687b      	ldr	r3, [r7, #4]
    8e0a:	685b      	ldr	r3, [r3, #4]
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d111      	bne.n	8e34 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	885b      	ldrh	r3, [r3, #2]
    8e14:	b29b      	uxth	r3, r3
    8e16:	b21b      	sxth	r3, r3
    8e18:	2b00      	cmp	r3, #0
    8e1a:	da02      	bge.n	8e22 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    8e1c:	68f8      	ldr	r0, [r7, #12]
    8e1e:	4b3d      	ldr	r3, [pc, #244]	; (8f14 <_sercom_i2c_sync_analyse_flags+0x210>)
    8e20:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8e22:	687b      	ldr	r3, [r7, #4]
    8e24:	885b      	ldrh	r3, [r3, #2]
    8e26:	b29b      	uxth	r3, r3
    8e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8e2c:	b29a      	uxth	r2, r3
    8e2e:	687b      	ldr	r3, [r7, #4]
    8e30:	805a      	strh	r2, [r3, #2]
    8e32:	e010      	b.n	8e56 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    8e34:	687b      	ldr	r3, [r7, #4]
    8e36:	689b      	ldr	r3, [r3, #8]
    8e38:	781b      	ldrb	r3, [r3, #0]
    8e3a:	4619      	mov	r1, r3
    8e3c:	68f8      	ldr	r0, [r7, #12]
    8e3e:	4b38      	ldr	r3, [pc, #224]	; (8f20 <_sercom_i2c_sync_analyse_flags+0x21c>)
    8e40:	4798      	blx	r3
				msg->buffer++;
    8e42:	687b      	ldr	r3, [r7, #4]
    8e44:	689b      	ldr	r3, [r3, #8]
    8e46:	1c5a      	adds	r2, r3, #1
    8e48:	687b      	ldr	r3, [r7, #4]
    8e4a:	609a      	str	r2, [r3, #8]
				msg->len--;
    8e4c:	687b      	ldr	r3, [r7, #4]
    8e4e:	685b      	ldr	r3, [r3, #4]
    8e50:	1e5a      	subs	r2, r3, #1
    8e52:	687b      	ldr	r3, [r7, #4]
    8e54:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    8e56:	2300      	movs	r3, #0
    8e58:	e051      	b.n	8efe <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    8e5a:	68bb      	ldr	r3, [r7, #8]
    8e5c:	f003 0302 	and.w	r3, r3, #2
    8e60:	2b00      	cmp	r3, #0
    8e62:	d04b      	beq.n	8efc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    8e64:	687b      	ldr	r3, [r7, #4]
    8e66:	685b      	ldr	r3, [r3, #4]
    8e68:	2b00      	cmp	r3, #0
    8e6a:	d041      	beq.n	8ef0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    8e6c:	8a7b      	ldrh	r3, [r7, #18]
    8e6e:	f003 0304 	and.w	r3, r3, #4
    8e72:	2b00      	cmp	r3, #0
    8e74:	d13c      	bne.n	8ef0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    8e76:	687b      	ldr	r3, [r7, #4]
    8e78:	685b      	ldr	r3, [r3, #4]
    8e7a:	1e5a      	subs	r2, r3, #1
    8e7c:	687b      	ldr	r3, [r7, #4]
    8e7e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	685b      	ldr	r3, [r3, #4]
    8e84:	2b00      	cmp	r3, #0
    8e86:	d102      	bne.n	8e8e <_sercom_i2c_sync_analyse_flags+0x18a>
    8e88:	697b      	ldr	r3, [r7, #20]
    8e8a:	2b00      	cmp	r3, #0
    8e8c:	d006      	beq.n	8e9c <_sercom_i2c_sync_analyse_flags+0x198>
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	685b      	ldr	r3, [r3, #4]
    8e92:	2b01      	cmp	r3, #1
    8e94:	d105      	bne.n	8ea2 <_sercom_i2c_sync_analyse_flags+0x19e>
    8e96:	697b      	ldr	r3, [r7, #20]
    8e98:	2b00      	cmp	r3, #0
    8e9a:	d002      	beq.n	8ea2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    8e9c:	68f8      	ldr	r0, [r7, #12]
    8e9e:	4b21      	ldr	r3, [pc, #132]	; (8f24 <_sercom_i2c_sync_analyse_flags+0x220>)
    8ea0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	685b      	ldr	r3, [r3, #4]
    8ea6:	2b00      	cmp	r3, #0
    8ea8:	d113      	bne.n	8ed2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    8eaa:	687b      	ldr	r3, [r7, #4]
    8eac:	885b      	ldrh	r3, [r3, #2]
    8eae:	b29b      	uxth	r3, r3
    8eb0:	b21b      	sxth	r3, r3
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	da05      	bge.n	8ec2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    8eb6:	68f8      	ldr	r0, [r7, #12]
    8eb8:	4b1b      	ldr	r3, [pc, #108]	; (8f28 <_sercom_i2c_sync_analyse_flags+0x224>)
    8eba:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    8ebc:	68f8      	ldr	r0, [r7, #12]
    8ebe:	4b15      	ldr	r3, [pc, #84]	; (8f14 <_sercom_i2c_sync_analyse_flags+0x210>)
    8ec0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8ec2:	687b      	ldr	r3, [r7, #4]
    8ec4:	885b      	ldrh	r3, [r3, #2]
    8ec6:	b29b      	uxth	r3, r3
    8ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8ecc:	b29a      	uxth	r2, r3
    8ece:	687b      	ldr	r3, [r7, #4]
    8ed0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	689c      	ldr	r4, [r3, #8]
    8ed6:	1c62      	adds	r2, r4, #1
    8ed8:	687b      	ldr	r3, [r7, #4]
    8eda:	609a      	str	r2, [r3, #8]
    8edc:	68f8      	ldr	r0, [r7, #12]
    8ede:	4b13      	ldr	r3, [pc, #76]	; (8f2c <_sercom_i2c_sync_analyse_flags+0x228>)
    8ee0:	4798      	blx	r3
    8ee2:	4603      	mov	r3, r0
    8ee4:	b2db      	uxtb	r3, r3
    8ee6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8ee8:	68f8      	ldr	r0, [r7, #12]
    8eea:	4b11      	ldr	r3, [pc, #68]	; (8f30 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8eec:	4798      	blx	r3
    8eee:	e005      	b.n	8efc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8ef0:	68f8      	ldr	r0, [r7, #12]
    8ef2:	4b0f      	ldr	r3, [pc, #60]	; (8f30 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8ef4:	4798      	blx	r3
			return I2C_NACK;
    8ef6:	f06f 0301 	mvn.w	r3, #1
    8efa:	e000      	b.n	8efe <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    8efc:	2300      	movs	r3, #0
}
    8efe:	4618      	mov	r0, r3
    8f00:	371c      	adds	r7, #28
    8f02:	46bd      	mov	sp, r7
    8f04:	bd90      	pop	{r4, r7, pc}
    8f06:	bf00      	nop
    8f08:	00008775 	.word	0x00008775
    8f0c:	00008b85 	.word	0x00008b85
    8f10:	0000850d 	.word	0x0000850d
    8f14:	00008ce9 	.word	0x00008ce9
    8f18:	00008a65 	.word	0x00008a65
    8f1c:	00008a41 	.word	0x00008a41
    8f20:	00008aa1 	.word	0x00008aa1
    8f24:	000088fd 	.word	0x000088fd
    8f28:	000088d5 	.word	0x000088d5
    8f2c:	00008ac5 	.word	0x00008ac5
    8f30:	00008527 	.word	0x00008527

00008f34 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    8f34:	b580      	push	{r7, lr}
    8f36:	b086      	sub	sp, #24
    8f38:	af00      	add	r7, sp, #0
    8f3a:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	691b      	ldr	r3, [r3, #16]
    8f40:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    8f42:	6938      	ldr	r0, [r7, #16]
    8f44:	4b37      	ldr	r3, [pc, #220]	; (9024 <_sercom_i2c_m_irq_handler+0xf0>)
    8f46:	4798      	blx	r3
    8f48:	4603      	mov	r3, r0
    8f4a:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    8f4c:	2300      	movs	r3, #0
    8f4e:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    8f50:	687b      	ldr	r3, [r7, #4]
    8f52:	2b00      	cmp	r3, #0
    8f54:	bf14      	ite	ne
    8f56:	2301      	movne	r3, #1
    8f58:	2300      	moveq	r3, #0
    8f5a:	b2db      	uxtb	r3, r3
    8f5c:	f240 422a 	movw	r2, #1066	; 0x42a
    8f60:	4931      	ldr	r1, [pc, #196]	; (9028 <_sercom_i2c_m_irq_handler+0xf4>)
    8f62:	4618      	mov	r0, r3
    8f64:	4b31      	ldr	r3, [pc, #196]	; (902c <_sercom_i2c_m_irq_handler+0xf8>)
    8f66:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	691b      	ldr	r3, [r3, #16]
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	bf14      	ite	ne
    8f70:	2301      	movne	r3, #1
    8f72:	2300      	moveq	r3, #0
    8f74:	b2db      	uxtb	r3, r3
    8f76:	f240 422b 	movw	r2, #1067	; 0x42b
    8f7a:	492b      	ldr	r1, [pc, #172]	; (9028 <_sercom_i2c_m_irq_handler+0xf4>)
    8f7c:	4618      	mov	r0, r3
    8f7e:	4b2b      	ldr	r3, [pc, #172]	; (902c <_sercom_i2c_m_irq_handler+0xf8>)
    8f80:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    8f82:	bf00      	nop
    8f84:	68fb      	ldr	r3, [r7, #12]
    8f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8f8a:	2b00      	cmp	r3, #0
    8f8c:	d126      	bne.n	8fdc <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    8f8e:	687b      	ldr	r3, [r7, #4]
    8f90:	461a      	mov	r2, r3
    8f92:	68f9      	ldr	r1, [r7, #12]
    8f94:	6938      	ldr	r0, [r7, #16]
    8f96:	4b26      	ldr	r3, [pc, #152]	; (9030 <_sercom_i2c_m_irq_handler+0xfc>)
    8f98:	4798      	blx	r3
    8f9a:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    8f9c:	697b      	ldr	r3, [r7, #20]
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	d11b      	bne.n	8fda <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    8fa2:	68fb      	ldr	r3, [r7, #12]
    8fa4:	f003 0301 	and.w	r3, r3, #1
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d008      	beq.n	8fbe <_sercom_i2c_m_irq_handler+0x8a>
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	699b      	ldr	r3, [r3, #24]
    8fb0:	2b00      	cmp	r3, #0
    8fb2:	d004      	beq.n	8fbe <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	699b      	ldr	r3, [r3, #24]
    8fb8:	6878      	ldr	r0, [r7, #4]
    8fba:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    8fbc:	e02e      	b.n	901c <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    8fbe:	68fb      	ldr	r3, [r7, #12]
    8fc0:	f003 0302 	and.w	r3, r3, #2
    8fc4:	2b00      	cmp	r3, #0
    8fc6:	d029      	beq.n	901c <_sercom_i2c_m_irq_handler+0xe8>
    8fc8:	687b      	ldr	r3, [r7, #4]
    8fca:	69db      	ldr	r3, [r3, #28]
    8fcc:	2b00      	cmp	r3, #0
    8fce:	d025      	beq.n	901c <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	69db      	ldr	r3, [r3, #28]
    8fd4:	6878      	ldr	r0, [r7, #4]
    8fd6:	4798      	blx	r3
		return;
    8fd8:	e020      	b.n	901c <_sercom_i2c_m_irq_handler+0xe8>
			break;
    8fda:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	885b      	ldrh	r3, [r3, #2]
    8fe0:	b29b      	uxth	r3, r3
    8fe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8fe6:	b29a      	uxth	r2, r3
    8fe8:	687b      	ldr	r3, [r7, #4]
    8fea:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	695b      	ldr	r3, [r3, #20]
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d014      	beq.n	901e <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    8ff4:	697b      	ldr	r3, [r7, #20]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d005      	beq.n	9006 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    8ffa:	687b      	ldr	r3, [r7, #4]
    8ffc:	695b      	ldr	r3, [r3, #20]
    8ffe:	6979      	ldr	r1, [r7, #20]
    9000:	6878      	ldr	r0, [r7, #4]
    9002:	4798      	blx	r3
    9004:	e005      	b.n	9012 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    9006:	687b      	ldr	r3, [r7, #4]
    9008:	695b      	ldr	r3, [r3, #20]
    900a:	f06f 0104 	mvn.w	r1, #4
    900e:	6878      	ldr	r0, [r7, #4]
    9010:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    9012:	2180      	movs	r1, #128	; 0x80
    9014:	6938      	ldr	r0, [r7, #16]
    9016:	4b07      	ldr	r3, [pc, #28]	; (9034 <_sercom_i2c_m_irq_handler+0x100>)
    9018:	4798      	blx	r3
    901a:	e000      	b.n	901e <_sercom_i2c_m_irq_handler+0xea>
		return;
    901c:	bf00      	nop
	}
}
    901e:	3718      	adds	r7, #24
    9020:	46bd      	mov	sp, r7
    9022:	bd80      	pop	{r7, pc}
    9024:	00008541 	.word	0x00008541
    9028:	00012b88 	.word	0x00012b88
    902c:	00005ed5 	.word	0x00005ed5
    9030:	00008d05 	.word	0x00008d05
    9034:	0000855b 	.word	0x0000855b

00009038 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    9038:	b580      	push	{r7, lr}
    903a:	b082      	sub	sp, #8
    903c:	af00      	add	r7, sp, #0
    903e:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    9040:	687b      	ldr	r3, [r7, #4]
    9042:	2b00      	cmp	r3, #0
    9044:	bf14      	ite	ne
    9046:	2301      	movne	r3, #1
    9048:	2300      	moveq	r3, #0
    904a:	b2db      	uxtb	r3, r3
    904c:	f44f 628a 	mov.w	r2, #1104	; 0x450
    9050:	4906      	ldr	r1, [pc, #24]	; (906c <_i2c_m_async_enable+0x34>)
    9052:	4618      	mov	r0, r3
    9054:	4b06      	ldr	r3, [pc, #24]	; (9070 <_i2c_m_async_enable+0x38>)
    9056:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    9058:	687b      	ldr	r3, [r7, #4]
    905a:	691b      	ldr	r3, [r3, #16]
    905c:	4618      	mov	r0, r3
    905e:	4b05      	ldr	r3, [pc, #20]	; (9074 <_i2c_m_async_enable+0x3c>)
    9060:	4798      	blx	r3
    9062:	4603      	mov	r3, r0
}
    9064:	4618      	mov	r0, r3
    9066:	3708      	adds	r7, #8
    9068:	46bd      	mov	sp, r7
    906a:	bd80      	pop	{r7, pc}
    906c:	00012b88 	.word	0x00012b88
    9070:	00005ed5 	.word	0x00005ed5
    9074:	000096b9 	.word	0x000096b9

00009078 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    9078:	b580      	push	{r7, lr}
    907a:	b082      	sub	sp, #8
    907c:	af00      	add	r7, sp, #0
    907e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    9080:	6878      	ldr	r0, [r7, #4]
    9082:	4b05      	ldr	r3, [pc, #20]	; (9098 <_sercom_get_irq_num+0x20>)
    9084:	4798      	blx	r3
    9086:	4603      	mov	r3, r0
    9088:	009b      	lsls	r3, r3, #2
    908a:	b2db      	uxtb	r3, r3
    908c:	332e      	adds	r3, #46	; 0x2e
    908e:	b2db      	uxtb	r3, r3
}
    9090:	4618      	mov	r0, r3
    9092:	3708      	adds	r7, #8
    9094:	46bd      	mov	sp, r7
    9096:	bd80      	pop	{r7, pc}
    9098:	00008bd1 	.word	0x00008bd1

0000909c <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    909c:	b580      	push	{r7, lr}
    909e:	b086      	sub	sp, #24
    90a0:	af00      	add	r7, sp, #0
    90a2:	6078      	str	r0, [r7, #4]
    90a4:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    90a6:	687b      	ldr	r3, [r7, #4]
    90a8:	2b00      	cmp	r3, #0
    90aa:	bf14      	ite	ne
    90ac:	2301      	movne	r3, #1
    90ae:	2300      	moveq	r3, #0
    90b0:	b2db      	uxtb	r3, r3
    90b2:	f240 429e 	movw	r2, #1182	; 0x49e
    90b6:	491d      	ldr	r1, [pc, #116]	; (912c <_i2c_m_async_init+0x90>)
    90b8:	4618      	mov	r0, r3
    90ba:	4b1d      	ldr	r3, [pc, #116]	; (9130 <_i2c_m_async_init+0x94>)
    90bc:	4798      	blx	r3

	i2c_dev->hw = hw;
    90be:	687b      	ldr	r3, [r7, #4]
    90c0:	683a      	ldr	r2, [r7, #0]
    90c2:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    90c4:	687b      	ldr	r3, [r7, #4]
    90c6:	6839      	ldr	r1, [r7, #0]
    90c8:	4618      	mov	r0, r3
    90ca:	4b1a      	ldr	r3, [pc, #104]	; (9134 <_i2c_m_async_init+0x98>)
    90cc:	4798      	blx	r3
    90ce:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    90d0:	68fb      	ldr	r3, [r7, #12]
    90d2:	2b00      	cmp	r3, #0
    90d4:	d001      	beq.n	90da <_i2c_m_async_init+0x3e>
		return init_status;
    90d6:	68fb      	ldr	r3, [r7, #12]
    90d8:	e024      	b.n	9124 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    90da:	6879      	ldr	r1, [r7, #4]
    90dc:	6838      	ldr	r0, [r7, #0]
    90de:	4b16      	ldr	r3, [pc, #88]	; (9138 <_i2c_m_async_init+0x9c>)
    90e0:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    90e2:	6838      	ldr	r0, [r7, #0]
    90e4:	4b15      	ldr	r3, [pc, #84]	; (913c <_i2c_m_async_init+0xa0>)
    90e6:	4798      	blx	r3
    90e8:	4603      	mov	r3, r0
    90ea:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    90ec:	2300      	movs	r3, #0
    90ee:	613b      	str	r3, [r7, #16]
    90f0:	e014      	b.n	911c <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    90f2:	7dfb      	ldrb	r3, [r7, #23]
    90f4:	b21b      	sxth	r3, r3
    90f6:	4618      	mov	r0, r3
    90f8:	4b11      	ldr	r3, [pc, #68]	; (9140 <_i2c_m_async_init+0xa4>)
    90fa:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    90fc:	7dfb      	ldrb	r3, [r7, #23]
    90fe:	b21b      	sxth	r3, r3
    9100:	4618      	mov	r0, r3
    9102:	4b10      	ldr	r3, [pc, #64]	; (9144 <_i2c_m_async_init+0xa8>)
    9104:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    9106:	7dfb      	ldrb	r3, [r7, #23]
    9108:	b21b      	sxth	r3, r3
    910a:	4618      	mov	r0, r3
    910c:	4b0e      	ldr	r3, [pc, #56]	; (9148 <_i2c_m_async_init+0xac>)
    910e:	4798      	blx	r3
		irq++;
    9110:	7dfb      	ldrb	r3, [r7, #23]
    9112:	3301      	adds	r3, #1
    9114:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9116:	693b      	ldr	r3, [r7, #16]
    9118:	3301      	adds	r3, #1
    911a:	613b      	str	r3, [r7, #16]
    911c:	693b      	ldr	r3, [r7, #16]
    911e:	2b03      	cmp	r3, #3
    9120:	d9e7      	bls.n	90f2 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    9122:	2300      	movs	r3, #0
}
    9124:	4618      	mov	r0, r3
    9126:	3718      	adds	r7, #24
    9128:	46bd      	mov	sp, r7
    912a:	bd80      	pop	{r7, pc}
    912c:	00012b88 	.word	0x00012b88
    9130:	00005ed5 	.word	0x00005ed5
    9134:	00009745 	.word	0x00009745
    9138:	00008c2d 	.word	0x00008c2d
    913c:	00009079 	.word	0x00009079
    9140:	000083f5 	.word	0x000083f5
    9144:	00008439 	.word	0x00008439
    9148:	000083b9 	.word	0x000083b9

0000914c <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    914c:	b590      	push	{r4, r7, lr}
    914e:	b087      	sub	sp, #28
    9150:	af00      	add	r7, sp, #0
    9152:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9154:	687b      	ldr	r3, [r7, #4]
    9156:	691b      	ldr	r3, [r3, #16]
    9158:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    915a:	687b      	ldr	r3, [r7, #4]
    915c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    915e:	6978      	ldr	r0, [r7, #20]
    9160:	4b33      	ldr	r3, [pc, #204]	; (9230 <_sercom_i2c_send_address+0xe4>)
    9162:	4798      	blx	r3
    9164:	4603      	mov	r3, r0
    9166:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    9168:	687b      	ldr	r3, [r7, #4]
    916a:	2b00      	cmp	r3, #0
    916c:	bf14      	ite	ne
    916e:	2301      	movne	r3, #1
    9170:	2300      	moveq	r3, #0
    9172:	b2db      	uxtb	r3, r3
    9174:	f240 42cc 	movw	r2, #1228	; 0x4cc
    9178:	492e      	ldr	r1, [pc, #184]	; (9234 <_sercom_i2c_send_address+0xe8>)
    917a:	4618      	mov	r0, r3
    917c:	4b2e      	ldr	r3, [pc, #184]	; (9238 <_sercom_i2c_send_address+0xec>)
    917e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    9180:	693b      	ldr	r3, [r7, #16]
    9182:	685b      	ldr	r3, [r3, #4]
    9184:	2b01      	cmp	r3, #1
    9186:	d106      	bne.n	9196 <_sercom_i2c_send_address+0x4a>
    9188:	68fb      	ldr	r3, [r7, #12]
    918a:	2b00      	cmp	r3, #0
    918c:	d003      	beq.n	9196 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    918e:	6978      	ldr	r0, [r7, #20]
    9190:	4b2a      	ldr	r3, [pc, #168]	; (923c <_sercom_i2c_send_address+0xf0>)
    9192:	4798      	blx	r3
    9194:	e002      	b.n	919c <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    9196:	6978      	ldr	r0, [r7, #20]
    9198:	4b29      	ldr	r3, [pc, #164]	; (9240 <_sercom_i2c_send_address+0xf4>)
    919a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    919c:	693b      	ldr	r3, [r7, #16]
    919e:	881b      	ldrh	r3, [r3, #0]
    91a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    91a4:	2b00      	cmp	r3, #0
    91a6:	d022      	beq.n	91ee <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    91a8:	693b      	ldr	r3, [r7, #16]
    91aa:	885b      	ldrh	r3, [r3, #2]
    91ac:	b29b      	uxth	r3, r3
    91ae:	f003 0301 	and.w	r3, r3, #1
    91b2:	2b00      	cmp	r3, #0
    91b4:	d007      	beq.n	91c6 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    91b6:	693b      	ldr	r3, [r7, #16]
    91b8:	885b      	ldrh	r3, [r3, #2]
    91ba:	b29b      	uxth	r3, r3
    91bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    91c0:	b29a      	uxth	r2, r3
    91c2:	693b      	ldr	r3, [r7, #16]
    91c4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    91c6:	693b      	ldr	r3, [r7, #16]
    91c8:	881b      	ldrh	r3, [r3, #0]
    91ca:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    91cc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    91d0:	401c      	ands	r4, r3
    91d2:	6978      	ldr	r0, [r7, #20]
    91d4:	4b1b      	ldr	r3, [pc, #108]	; (9244 <_sercom_i2c_send_address+0xf8>)
    91d6:	4798      	blx	r3
    91d8:	4603      	mov	r3, r0
    91da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    91de:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    91e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    91e4:	4619      	mov	r1, r3
    91e6:	6978      	ldr	r0, [r7, #20]
    91e8:	4b17      	ldr	r3, [pc, #92]	; (9248 <_sercom_i2c_send_address+0xfc>)
    91ea:	4798      	blx	r3
    91ec:	e01a      	b.n	9224 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    91ee:	693b      	ldr	r3, [r7, #16]
    91f0:	881b      	ldrh	r3, [r3, #0]
    91f2:	005b      	lsls	r3, r3, #1
    91f4:	b2db      	uxtb	r3, r3
    91f6:	693a      	ldr	r2, [r7, #16]
    91f8:	8852      	ldrh	r2, [r2, #2]
    91fa:	b292      	uxth	r2, r2
    91fc:	f002 0201 	and.w	r2, r2, #1
    9200:	2a00      	cmp	r2, #0
    9202:	bf14      	ite	ne
    9204:	2201      	movne	r2, #1
    9206:	2200      	moveq	r2, #0
    9208:	b2d2      	uxtb	r2, r2
    920a:	4313      	orrs	r3, r2
    920c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    920e:	6978      	ldr	r0, [r7, #20]
    9210:	4b0c      	ldr	r3, [pc, #48]	; (9244 <_sercom_i2c_send_address+0xf8>)
    9212:	4798      	blx	r3
    9214:	4603      	mov	r3, r0
    9216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    921a:	4323      	orrs	r3, r4
    921c:	4619      	mov	r1, r3
    921e:	6978      	ldr	r0, [r7, #20]
    9220:	4b09      	ldr	r3, [pc, #36]	; (9248 <_sercom_i2c_send_address+0xfc>)
    9222:	4798      	blx	r3
	}

	return ERR_NONE;
    9224:	2300      	movs	r3, #0
}
    9226:	4618      	mov	r0, r3
    9228:	371c      	adds	r7, #28
    922a:	46bd      	mov	sp, r7
    922c:	bd90      	pop	{r4, r7, pc}
    922e:	bf00      	nop
    9230:	00008775 	.word	0x00008775
    9234:	00012b88 	.word	0x00012b88
    9238:	00005ed5 	.word	0x00005ed5
    923c:	000088fd 	.word	0x000088fd
    9240:	00008925 	.word	0x00008925
    9244:	00008a65 	.word	0x00008a65
    9248:	00008a41 	.word	0x00008a41

0000924c <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    924c:	b580      	push	{r7, lr}
    924e:	b084      	sub	sp, #16
    9250:	af00      	add	r7, sp, #0
    9252:	6078      	str	r0, [r7, #4]
    9254:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    9256:	687b      	ldr	r3, [r7, #4]
    9258:	2b00      	cmp	r3, #0
    925a:	bf14      	ite	ne
    925c:	2301      	movne	r3, #1
    925e:	2300      	moveq	r3, #0
    9260:	b2db      	uxtb	r3, r3
    9262:	f240 42f4 	movw	r2, #1268	; 0x4f4
    9266:	492a      	ldr	r1, [pc, #168]	; (9310 <_i2c_m_async_transfer+0xc4>)
    9268:	4618      	mov	r0, r3
    926a:	4b2a      	ldr	r3, [pc, #168]	; (9314 <_i2c_m_async_transfer+0xc8>)
    926c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    926e:	687b      	ldr	r3, [r7, #4]
    9270:	691b      	ldr	r3, [r3, #16]
    9272:	2b00      	cmp	r3, #0
    9274:	bf14      	ite	ne
    9276:	2301      	movne	r3, #1
    9278:	2300      	moveq	r3, #0
    927a:	b2db      	uxtb	r3, r3
    927c:	f240 42f5 	movw	r2, #1269	; 0x4f5
    9280:	4923      	ldr	r1, [pc, #140]	; (9310 <_i2c_m_async_transfer+0xc4>)
    9282:	4618      	mov	r0, r3
    9284:	4b23      	ldr	r3, [pc, #140]	; (9314 <_i2c_m_async_transfer+0xc8>)
    9286:	4798      	blx	r3
	ASSERT(msg);
    9288:	683b      	ldr	r3, [r7, #0]
    928a:	2b00      	cmp	r3, #0
    928c:	bf14      	ite	ne
    928e:	2301      	movne	r3, #1
    9290:	2300      	moveq	r3, #0
    9292:	b2db      	uxtb	r3, r3
    9294:	f240 42f6 	movw	r2, #1270	; 0x4f6
    9298:	491d      	ldr	r1, [pc, #116]	; (9310 <_i2c_m_async_transfer+0xc4>)
    929a:	4618      	mov	r0, r3
    929c:	4b1d      	ldr	r3, [pc, #116]	; (9314 <_i2c_m_async_transfer+0xc8>)
    929e:	4798      	blx	r3

	if (msg->len == 0) {
    92a0:	683b      	ldr	r3, [r7, #0]
    92a2:	685b      	ldr	r3, [r3, #4]
    92a4:	2b00      	cmp	r3, #0
    92a6:	d101      	bne.n	92ac <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    92a8:	2300      	movs	r3, #0
    92aa:	e02d      	b.n	9308 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	885b      	ldrh	r3, [r3, #2]
    92b0:	b29b      	uxth	r3, r3
    92b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    92b6:	2b00      	cmp	r3, #0
    92b8:	d002      	beq.n	92c0 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    92ba:	f06f 0303 	mvn.w	r3, #3
    92be:	e023      	b.n	9308 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    92c0:	683b      	ldr	r3, [r7, #0]
    92c2:	885b      	ldrh	r3, [r3, #2]
    92c4:	b29b      	uxth	r3, r3
    92c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    92ca:	b29a      	uxth	r2, r3
    92cc:	683b      	ldr	r3, [r7, #0]
    92ce:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	683a      	ldr	r2, [r7, #0]
    92d4:	ca07      	ldmia	r2, {r0, r1, r2}
    92d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    92da:	687b      	ldr	r3, [r7, #4]
    92dc:	691b      	ldr	r3, [r3, #16]
    92de:	4618      	mov	r0, r3
    92e0:	4b0d      	ldr	r3, [pc, #52]	; (9318 <_i2c_m_async_transfer+0xcc>)
    92e2:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    92e4:	6878      	ldr	r0, [r7, #4]
    92e6:	4b0d      	ldr	r3, [pc, #52]	; (931c <_i2c_m_async_transfer+0xd0>)
    92e8:	4798      	blx	r3
    92ea:	60f8      	str	r0, [r7, #12]

	if (ret) {
    92ec:	68fb      	ldr	r3, [r7, #12]
    92ee:	2b00      	cmp	r3, #0
    92f0:	d009      	beq.n	9306 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	885b      	ldrh	r3, [r3, #2]
    92f6:	b29b      	uxth	r3, r3
    92f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    92fc:	b29a      	uxth	r2, r3
    92fe:	687b      	ldr	r3, [r7, #4]
    9300:	805a      	strh	r2, [r3, #2]

		return ret;
    9302:	68fb      	ldr	r3, [r7, #12]
    9304:	e000      	b.n	9308 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    9306:	2300      	movs	r3, #0
}
    9308:	4618      	mov	r0, r3
    930a:	3710      	adds	r7, #16
    930c:	46bd      	mov	sp, r7
    930e:	bd80      	pop	{r7, pc}
    9310:	00012b88 	.word	0x00012b88
    9314:	00005ed5 	.word	0x00005ed5
    9318:	000088ad 	.word	0x000088ad
    931c:	0000914d 	.word	0x0000914d

00009320 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    9320:	b480      	push	{r7}
    9322:	b085      	sub	sp, #20
    9324:	af00      	add	r7, sp, #0
    9326:	60f8      	str	r0, [r7, #12]
    9328:	460b      	mov	r3, r1
    932a:	607a      	str	r2, [r7, #4]
    932c:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    932e:	7afb      	ldrb	r3, [r7, #11]
    9330:	2b01      	cmp	r3, #1
    9332:	d008      	beq.n	9346 <_i2c_m_async_register_callback+0x26>
    9334:	2b02      	cmp	r3, #2
    9336:	d00a      	beq.n	934e <_i2c_m_async_register_callback+0x2e>
    9338:	2b00      	cmp	r3, #0
    933a:	d000      	beq.n	933e <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    933c:	e00b      	b.n	9356 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    933e:	68fb      	ldr	r3, [r7, #12]
    9340:	687a      	ldr	r2, [r7, #4]
    9342:	615a      	str	r2, [r3, #20]
		break;
    9344:	e007      	b.n	9356 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    9346:	68fb      	ldr	r3, [r7, #12]
    9348:	687a      	ldr	r2, [r7, #4]
    934a:	619a      	str	r2, [r3, #24]
		break;
    934c:	e003      	b.n	9356 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    934e:	68fb      	ldr	r3, [r7, #12]
    9350:	687a      	ldr	r2, [r7, #4]
    9352:	61da      	str	r2, [r3, #28]
		break;
    9354:	bf00      	nop
	}

	return ERR_NONE;
    9356:	2300      	movs	r3, #0
}
    9358:	4618      	mov	r0, r3
    935a:	3714      	adds	r7, #20
    935c:	46bd      	mov	sp, r7
    935e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9362:	4770      	bx	lr

00009364 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    9364:	b580      	push	{r7, lr}
    9366:	b082      	sub	sp, #8
    9368:	af00      	add	r7, sp, #0
    936a:	6078      	str	r0, [r7, #4]
    936c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    936e:	687b      	ldr	r3, [r7, #4]
    9370:	2b00      	cmp	r3, #0
    9372:	bf14      	ite	ne
    9374:	2301      	movne	r3, #1
    9376:	2300      	moveq	r3, #0
    9378:	b2db      	uxtb	r3, r3
    937a:	f240 5254 	movw	r2, #1364	; 0x554
    937e:	4908      	ldr	r1, [pc, #32]	; (93a0 <_i2c_m_sync_init+0x3c>)
    9380:	4618      	mov	r0, r3
    9382:	4b08      	ldr	r3, [pc, #32]	; (93a4 <_i2c_m_sync_init+0x40>)
    9384:	4798      	blx	r3

	i2c_dev->hw = hw;
    9386:	687b      	ldr	r3, [r7, #4]
    9388:	683a      	ldr	r2, [r7, #0]
    938a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    938c:	687b      	ldr	r3, [r7, #4]
    938e:	6839      	ldr	r1, [r7, #0]
    9390:	4618      	mov	r0, r3
    9392:	4b05      	ldr	r3, [pc, #20]	; (93a8 <_i2c_m_sync_init+0x44>)
    9394:	4798      	blx	r3
    9396:	4603      	mov	r3, r0
}
    9398:	4618      	mov	r0, r3
    939a:	3708      	adds	r7, #8
    939c:	46bd      	mov	sp, r7
    939e:	bd80      	pop	{r7, pc}
    93a0:	00012b88 	.word	0x00012b88
    93a4:	00005ed5 	.word	0x00005ed5
    93a8:	00009745 	.word	0x00009745

000093ac <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    93ac:	b580      	push	{r7, lr}
    93ae:	b082      	sub	sp, #8
    93b0:	af00      	add	r7, sp, #0
    93b2:	6078      	str	r0, [r7, #4]
    93b4:	460b      	mov	r3, r1
    93b6:	70fb      	strb	r3, [r7, #3]
    93b8:	4613      	mov	r3, r2
    93ba:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    93bc:	78fb      	ldrb	r3, [r7, #3]
    93be:	2b01      	cmp	r3, #1
    93c0:	d002      	beq.n	93c8 <_i2c_m_async_set_irq_state+0x1c>
    93c2:	78fb      	ldrb	r3, [r7, #3]
    93c4:	2b02      	cmp	r3, #2
    93c6:	d10e      	bne.n	93e6 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    93c8:	687b      	ldr	r3, [r7, #4]
    93ca:	691b      	ldr	r3, [r3, #16]
    93cc:	78ba      	ldrb	r2, [r7, #2]
    93ce:	4611      	mov	r1, r2
    93d0:	4618      	mov	r0, r3
    93d2:	4b0c      	ldr	r3, [pc, #48]	; (9404 <_i2c_m_async_set_irq_state+0x58>)
    93d4:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    93d6:	687b      	ldr	r3, [r7, #4]
    93d8:	691b      	ldr	r3, [r3, #16]
    93da:	78ba      	ldrb	r2, [r7, #2]
    93dc:	4611      	mov	r1, r2
    93de:	4618      	mov	r0, r3
    93e0:	4b09      	ldr	r3, [pc, #36]	; (9408 <_i2c_m_async_set_irq_state+0x5c>)
    93e2:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    93e4:	e009      	b.n	93fa <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    93e6:	78fb      	ldrb	r3, [r7, #3]
    93e8:	2b00      	cmp	r3, #0
    93ea:	d106      	bne.n	93fa <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    93ec:	687b      	ldr	r3, [r7, #4]
    93ee:	691b      	ldr	r3, [r3, #16]
    93f0:	78ba      	ldrb	r2, [r7, #2]
    93f2:	4611      	mov	r1, r2
    93f4:	4618      	mov	r0, r3
    93f6:	4b05      	ldr	r3, [pc, #20]	; (940c <_i2c_m_async_set_irq_state+0x60>)
    93f8:	4798      	blx	r3
}
    93fa:	bf00      	nop
    93fc:	3708      	adds	r7, #8
    93fe:	46bd      	mov	sp, r7
    9400:	bd80      	pop	{r7, pc}
    9402:	bf00      	nop
    9404:	0000860b 	.word	0x0000860b
    9408:	000085d9 	.word	0x000085d9
    940c:	0000863d 	.word	0x0000863d

00009410 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    9410:	b580      	push	{r7, lr}
    9412:	b084      	sub	sp, #16
    9414:	af00      	add	r7, sp, #0
    9416:	6078      	str	r0, [r7, #4]
    9418:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    941a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    941e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    9420:	687b      	ldr	r3, [r7, #4]
    9422:	691b      	ldr	r3, [r3, #16]
    9424:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    9426:	68b8      	ldr	r0, [r7, #8]
    9428:	4b0f      	ldr	r3, [pc, #60]	; (9468 <_sercom_i2c_sync_wait_bus+0x58>)
    942a:	4798      	blx	r3
    942c:	4603      	mov	r3, r0
    942e:	461a      	mov	r2, r3
    9430:	683b      	ldr	r3, [r7, #0]
    9432:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    9434:	68fb      	ldr	r3, [r7, #12]
    9436:	1e5a      	subs	r2, r3, #1
    9438:	60fa      	str	r2, [r7, #12]
    943a:	2b00      	cmp	r3, #0
    943c:	d102      	bne.n	9444 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    943e:	f06f 0304 	mvn.w	r3, #4
    9442:	e00c      	b.n	945e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    9444:	683b      	ldr	r3, [r7, #0]
    9446:	681b      	ldr	r3, [r3, #0]
    9448:	f003 0301 	and.w	r3, r3, #1
    944c:	2b00      	cmp	r3, #0
    944e:	d105      	bne.n	945c <_sercom_i2c_sync_wait_bus+0x4c>
    9450:	683b      	ldr	r3, [r7, #0]
    9452:	681b      	ldr	r3, [r3, #0]
    9454:	f003 0302 	and.w	r3, r3, #2
    9458:	2b00      	cmp	r3, #0
    945a:	d0e4      	beq.n	9426 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    945c:	2300      	movs	r3, #0
}
    945e:	4618      	mov	r0, r3
    9460:	3710      	adds	r7, #16
    9462:	46bd      	mov	sp, r7
    9464:	bd80      	pop	{r7, pc}
    9466:	bf00      	nop
    9468:	00008541 	.word	0x00008541

0000946c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    946c:	b590      	push	{r4, r7, lr}
    946e:	b087      	sub	sp, #28
    9470:	af00      	add	r7, sp, #0
    9472:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9474:	687b      	ldr	r3, [r7, #4]
    9476:	691b      	ldr	r3, [r3, #16]
    9478:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    947e:	6978      	ldr	r0, [r7, #20]
    9480:	4b39      	ldr	r3, [pc, #228]	; (9568 <_sercom_i2c_sync_send_address+0xfc>)
    9482:	4798      	blx	r3
    9484:	4603      	mov	r3, r0
    9486:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	2b00      	cmp	r3, #0
    948c:	bf14      	ite	ne
    948e:	2301      	movne	r3, #1
    9490:	2300      	moveq	r3, #0
    9492:	b2db      	uxtb	r3, r3
    9494:	f240 52e1 	movw	r2, #1505	; 0x5e1
    9498:	4934      	ldr	r1, [pc, #208]	; (956c <_sercom_i2c_sync_send_address+0x100>)
    949a:	4618      	mov	r0, r3
    949c:	4b34      	ldr	r3, [pc, #208]	; (9570 <_sercom_i2c_sync_send_address+0x104>)
    949e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    94a0:	693b      	ldr	r3, [r7, #16]
    94a2:	685b      	ldr	r3, [r3, #4]
    94a4:	2b01      	cmp	r3, #1
    94a6:	d106      	bne.n	94b6 <_sercom_i2c_sync_send_address+0x4a>
    94a8:	68fb      	ldr	r3, [r7, #12]
    94aa:	2b00      	cmp	r3, #0
    94ac:	d003      	beq.n	94b6 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    94ae:	6978      	ldr	r0, [r7, #20]
    94b0:	4b30      	ldr	r3, [pc, #192]	; (9574 <_sercom_i2c_sync_send_address+0x108>)
    94b2:	4798      	blx	r3
    94b4:	e002      	b.n	94bc <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    94b6:	6978      	ldr	r0, [r7, #20]
    94b8:	4b2f      	ldr	r3, [pc, #188]	; (9578 <_sercom_i2c_sync_send_address+0x10c>)
    94ba:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    94bc:	693b      	ldr	r3, [r7, #16]
    94be:	881b      	ldrh	r3, [r3, #0]
    94c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    94c4:	2b00      	cmp	r3, #0
    94c6:	d022      	beq.n	950e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    94c8:	693b      	ldr	r3, [r7, #16]
    94ca:	885b      	ldrh	r3, [r3, #2]
    94cc:	b29b      	uxth	r3, r3
    94ce:	f003 0301 	and.w	r3, r3, #1
    94d2:	2b00      	cmp	r3, #0
    94d4:	d007      	beq.n	94e6 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    94d6:	693b      	ldr	r3, [r7, #16]
    94d8:	885b      	ldrh	r3, [r3, #2]
    94da:	b29b      	uxth	r3, r3
    94dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    94e0:	b29a      	uxth	r2, r3
    94e2:	693b      	ldr	r3, [r7, #16]
    94e4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    94e6:	693b      	ldr	r3, [r7, #16]
    94e8:	881b      	ldrh	r3, [r3, #0]
    94ea:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    94ec:	f240 74fe 	movw	r4, #2046	; 0x7fe
    94f0:	401c      	ands	r4, r3
    94f2:	6978      	ldr	r0, [r7, #20]
    94f4:	4b21      	ldr	r3, [pc, #132]	; (957c <_sercom_i2c_sync_send_address+0x110>)
    94f6:	4798      	blx	r3
    94f8:	4603      	mov	r3, r0
    94fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    94fe:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    9500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9504:	4619      	mov	r1, r3
    9506:	6978      	ldr	r0, [r7, #20]
    9508:	4b1d      	ldr	r3, [pc, #116]	; (9580 <_sercom_i2c_sync_send_address+0x114>)
    950a:	4798      	blx	r3
    950c:	e01a      	b.n	9544 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    950e:	693b      	ldr	r3, [r7, #16]
    9510:	881b      	ldrh	r3, [r3, #0]
    9512:	005b      	lsls	r3, r3, #1
    9514:	b2db      	uxtb	r3, r3
    9516:	693a      	ldr	r2, [r7, #16]
    9518:	8852      	ldrh	r2, [r2, #2]
    951a:	b292      	uxth	r2, r2
    951c:	f002 0201 	and.w	r2, r2, #1
    9520:	2a00      	cmp	r2, #0
    9522:	bf14      	ite	ne
    9524:	2201      	movne	r2, #1
    9526:	2200      	moveq	r2, #0
    9528:	b2d2      	uxtb	r2, r2
    952a:	4313      	orrs	r3, r2
    952c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    952e:	6978      	ldr	r0, [r7, #20]
    9530:	4b12      	ldr	r3, [pc, #72]	; (957c <_sercom_i2c_sync_send_address+0x110>)
    9532:	4798      	blx	r3
    9534:	4603      	mov	r3, r0
    9536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    953a:	4323      	orrs	r3, r4
    953c:	4619      	mov	r1, r3
    953e:	6978      	ldr	r0, [r7, #20]
    9540:	4b0f      	ldr	r3, [pc, #60]	; (9580 <_sercom_i2c_sync_send_address+0x114>)
    9542:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    9544:	f107 0308 	add.w	r3, r7, #8
    9548:	4619      	mov	r1, r3
    954a:	6878      	ldr	r0, [r7, #4]
    954c:	4b0d      	ldr	r3, [pc, #52]	; (9584 <_sercom_i2c_sync_send_address+0x118>)
    954e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    9550:	68bb      	ldr	r3, [r7, #8]
    9552:	693a      	ldr	r2, [r7, #16]
    9554:	4619      	mov	r1, r3
    9556:	6978      	ldr	r0, [r7, #20]
    9558:	4b0b      	ldr	r3, [pc, #44]	; (9588 <_sercom_i2c_sync_send_address+0x11c>)
    955a:	4798      	blx	r3
    955c:	4603      	mov	r3, r0
}
    955e:	4618      	mov	r0, r3
    9560:	371c      	adds	r7, #28
    9562:	46bd      	mov	sp, r7
    9564:	bd90      	pop	{r4, r7, pc}
    9566:	bf00      	nop
    9568:	00008775 	.word	0x00008775
    956c:	00012b88 	.word	0x00012b88
    9570:	00005ed5 	.word	0x00005ed5
    9574:	000088fd 	.word	0x000088fd
    9578:	00008925 	.word	0x00008925
    957c:	00008a65 	.word	0x00008a65
    9580:	00008a41 	.word	0x00008a41
    9584:	00009411 	.word	0x00009411
    9588:	00008d05 	.word	0x00008d05

0000958c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    958c:	b580      	push	{r7, lr}
    958e:	b086      	sub	sp, #24
    9590:	af00      	add	r7, sp, #0
    9592:	6078      	str	r0, [r7, #4]
    9594:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    9596:	687b      	ldr	r3, [r7, #4]
    9598:	691b      	ldr	r3, [r3, #16]
    959a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	2b00      	cmp	r3, #0
    95a0:	bf14      	ite	ne
    95a2:	2301      	movne	r3, #1
    95a4:	2300      	moveq	r3, #0
    95a6:	b2db      	uxtb	r3, r3
    95a8:	f240 620c 	movw	r2, #1548	; 0x60c
    95ac:	493b      	ldr	r1, [pc, #236]	; (969c <_i2c_m_sync_transfer+0x110>)
    95ae:	4618      	mov	r0, r3
    95b0:	4b3b      	ldr	r3, [pc, #236]	; (96a0 <_i2c_m_sync_transfer+0x114>)
    95b2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	691b      	ldr	r3, [r3, #16]
    95b8:	2b00      	cmp	r3, #0
    95ba:	bf14      	ite	ne
    95bc:	2301      	movne	r3, #1
    95be:	2300      	moveq	r3, #0
    95c0:	b2db      	uxtb	r3, r3
    95c2:	f240 620d 	movw	r2, #1549	; 0x60d
    95c6:	4935      	ldr	r1, [pc, #212]	; (969c <_i2c_m_sync_transfer+0x110>)
    95c8:	4618      	mov	r0, r3
    95ca:	4b35      	ldr	r3, [pc, #212]	; (96a0 <_i2c_m_sync_transfer+0x114>)
    95cc:	4798      	blx	r3
	ASSERT(msg);
    95ce:	683b      	ldr	r3, [r7, #0]
    95d0:	2b00      	cmp	r3, #0
    95d2:	bf14      	ite	ne
    95d4:	2301      	movne	r3, #1
    95d6:	2300      	moveq	r3, #0
    95d8:	b2db      	uxtb	r3, r3
    95da:	f240 620e 	movw	r2, #1550	; 0x60e
    95de:	492f      	ldr	r1, [pc, #188]	; (969c <_i2c_m_sync_transfer+0x110>)
    95e0:	4618      	mov	r0, r3
    95e2:	4b2f      	ldr	r3, [pc, #188]	; (96a0 <_i2c_m_sync_transfer+0x114>)
    95e4:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	885b      	ldrh	r3, [r3, #2]
    95ea:	b29b      	uxth	r3, r3
    95ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
    95f0:	2b00      	cmp	r3, #0
    95f2:	d002      	beq.n	95fa <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    95f4:	f06f 0305 	mvn.w	r3, #5
    95f8:	e04c      	b.n	9694 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    95fa:	683b      	ldr	r3, [r7, #0]
    95fc:	885b      	ldrh	r3, [r3, #2]
    95fe:	b29b      	uxth	r3, r3
    9600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9604:	b29a      	uxth	r2, r3
    9606:	683b      	ldr	r3, [r7, #0]
    9608:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	683a      	ldr	r2, [r7, #0]
    960e:	ca07      	ldmia	r2, {r0, r1, r2}
    9610:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    9614:	6938      	ldr	r0, [r7, #16]
    9616:	4b23      	ldr	r3, [pc, #140]	; (96a4 <_i2c_m_sync_transfer+0x118>)
    9618:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    961a:	6878      	ldr	r0, [r7, #4]
    961c:	4b22      	ldr	r3, [pc, #136]	; (96a8 <_i2c_m_sync_transfer+0x11c>)
    961e:	4798      	blx	r3
    9620:	6178      	str	r0, [r7, #20]

	if (ret) {
    9622:	697b      	ldr	r3, [r7, #20]
    9624:	2b00      	cmp	r3, #0
    9626:	d02d      	beq.n	9684 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9628:	687b      	ldr	r3, [r7, #4]
    962a:	885b      	ldrh	r3, [r3, #2]
    962c:	b29b      	uxth	r3, r3
    962e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9632:	b29a      	uxth	r2, r3
    9634:	687b      	ldr	r3, [r7, #4]
    9636:	805a      	strh	r2, [r3, #2]

		return ret;
    9638:	697b      	ldr	r3, [r7, #20]
    963a:	e02b      	b.n	9694 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    963c:	f107 030c 	add.w	r3, r7, #12
    9640:	4619      	mov	r1, r3
    9642:	6878      	ldr	r0, [r7, #4]
    9644:	4b19      	ldr	r3, [pc, #100]	; (96ac <_i2c_m_sync_transfer+0x120>)
    9646:	4798      	blx	r3
    9648:	6178      	str	r0, [r7, #20]

		if (ret) {
    964a:	697b      	ldr	r3, [r7, #20]
    964c:	2b00      	cmp	r3, #0
    964e:	d012      	beq.n	9676 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    9650:	683b      	ldr	r3, [r7, #0]
    9652:	885b      	ldrh	r3, [r3, #2]
    9654:	b29b      	uxth	r3, r3
    9656:	b21b      	sxth	r3, r3
    9658:	2b00      	cmp	r3, #0
    965a:	da02      	bge.n	9662 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    965c:	6938      	ldr	r0, [r7, #16]
    965e:	4b14      	ldr	r3, [pc, #80]	; (96b0 <_i2c_m_sync_transfer+0x124>)
    9660:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9662:	687b      	ldr	r3, [r7, #4]
    9664:	885b      	ldrh	r3, [r3, #2]
    9666:	b29b      	uxth	r3, r3
    9668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    966c:	b29a      	uxth	r2, r3
    966e:	687b      	ldr	r3, [r7, #4]
    9670:	805a      	strh	r2, [r3, #2]

			return ret;
    9672:	697b      	ldr	r3, [r7, #20]
    9674:	e00e      	b.n	9694 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    9676:	68fb      	ldr	r3, [r7, #12]
    9678:	687a      	ldr	r2, [r7, #4]
    967a:	4619      	mov	r1, r3
    967c:	6938      	ldr	r0, [r7, #16]
    967e:	4b0d      	ldr	r3, [pc, #52]	; (96b4 <_i2c_m_sync_transfer+0x128>)
    9680:	4798      	blx	r3
    9682:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	885b      	ldrh	r3, [r3, #2]
    9688:	b29b      	uxth	r3, r3
    968a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    968e:	2b00      	cmp	r3, #0
    9690:	d1d4      	bne.n	963c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    9692:	697b      	ldr	r3, [r7, #20]
}
    9694:	4618      	mov	r0, r3
    9696:	3718      	adds	r7, #24
    9698:	46bd      	mov	sp, r7
    969a:	bd80      	pop	{r7, pc}
    969c:	00012b88 	.word	0x00012b88
    96a0:	00005ed5 	.word	0x00005ed5
    96a4:	000088ad 	.word	0x000088ad
    96a8:	0000946d 	.word	0x0000946d
    96ac:	00009411 	.word	0x00009411
    96b0:	00008ce9 	.word	0x00008ce9
    96b4:	00008d05 	.word	0x00008d05

000096b8 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    96b8:	b580      	push	{r7, lr}
    96ba:	b084      	sub	sp, #16
    96bc:	af00      	add	r7, sp, #0
    96be:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    96c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    96c4:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    96c6:	2304      	movs	r3, #4
    96c8:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    96ca:	687b      	ldr	r3, [r7, #4]
    96cc:	2b00      	cmp	r3, #0
    96ce:	bf14      	ite	ne
    96d0:	2301      	movne	r3, #1
    96d2:	2300      	moveq	r3, #0
    96d4:	b2db      	uxtb	r3, r3
    96d6:	f240 6241 	movw	r2, #1601	; 0x641
    96da:	4915      	ldr	r1, [pc, #84]	; (9730 <_i2c_m_enable_implementation+0x78>)
    96dc:	4618      	mov	r0, r3
    96de:	4b15      	ldr	r3, [pc, #84]	; (9734 <_i2c_m_enable_implementation+0x7c>)
    96e0:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    96e2:	6878      	ldr	r0, [r7, #4]
    96e4:	4b14      	ldr	r3, [pc, #80]	; (9738 <_i2c_m_enable_implementation+0x80>)
    96e6:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    96e8:	e016      	b.n	9718 <_i2c_m_enable_implementation+0x60>
		timeout--;
    96ea:	68fb      	ldr	r3, [r7, #12]
    96ec:	3b01      	subs	r3, #1
    96ee:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    96f0:	68fb      	ldr	r3, [r7, #12]
    96f2:	2b00      	cmp	r3, #0
    96f4:	dc10      	bgt.n	9718 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    96f6:	68bb      	ldr	r3, [r7, #8]
    96f8:	3b01      	subs	r3, #1
    96fa:	60bb      	str	r3, [r7, #8]
    96fc:	68bb      	ldr	r3, [r7, #8]
    96fe:	2b00      	cmp	r3, #0
    9700:	d007      	beq.n	9712 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    9702:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9706:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    9708:	2110      	movs	r1, #16
    970a:	6878      	ldr	r0, [r7, #4]
    970c:	4b0b      	ldr	r3, [pc, #44]	; (973c <_i2c_m_enable_implementation+0x84>)
    970e:	4798      	blx	r3
    9710:	e002      	b.n	9718 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    9712:	f06f 0305 	mvn.w	r3, #5
    9716:	e006      	b.n	9726 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    9718:	6878      	ldr	r0, [r7, #4]
    971a:	4b09      	ldr	r3, [pc, #36]	; (9740 <_i2c_m_enable_implementation+0x88>)
    971c:	4798      	blx	r3
    971e:	4603      	mov	r3, r0
    9720:	2b01      	cmp	r3, #1
    9722:	d1e2      	bne.n	96ea <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    9724:	2300      	movs	r3, #0
}
    9726:	4618      	mov	r0, r3
    9728:	3710      	adds	r7, #16
    972a:	46bd      	mov	sp, r7
    972c:	bd80      	pop	{r7, pc}
    972e:	bf00      	nop
    9730:	00012b88 	.word	0x00012b88
    9734:	00005ed5 	.word	0x00005ed5
    9738:	00008725 	.word	0x00008725
    973c:	00008ba9 	.word	0x00008ba9
    9740:	00008b59 	.word	0x00008b59

00009744 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    9744:	b580      	push	{r7, lr}
    9746:	b084      	sub	sp, #16
    9748:	af00      	add	r7, sp, #0
    974a:	6078      	str	r0, [r7, #4]
    974c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    974e:	6838      	ldr	r0, [r7, #0]
    9750:	4b42      	ldr	r3, [pc, #264]	; (985c <_i2c_m_sync_init_impl+0x118>)
    9752:	4798      	blx	r3
    9754:	4603      	mov	r3, r0
    9756:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    9758:	2101      	movs	r1, #1
    975a:	6838      	ldr	r0, [r7, #0]
    975c:	4b40      	ldr	r3, [pc, #256]	; (9860 <_i2c_m_sync_init_impl+0x11c>)
    975e:	4798      	blx	r3
    9760:	4603      	mov	r3, r0
    9762:	f083 0301 	eor.w	r3, r3, #1
    9766:	b2db      	uxtb	r3, r3
    9768:	2b00      	cmp	r3, #0
    976a:	d020      	beq.n	97ae <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    976c:	7bfa      	ldrb	r2, [r7, #15]
    976e:	493d      	ldr	r1, [pc, #244]	; (9864 <_i2c_m_sync_init_impl+0x120>)
    9770:	4613      	mov	r3, r2
    9772:	005b      	lsls	r3, r3, #1
    9774:	4413      	add	r3, r2
    9776:	00db      	lsls	r3, r3, #3
    9778:	440b      	add	r3, r1
    977a:	3304      	adds	r3, #4
    977c:	681b      	ldr	r3, [r3, #0]
    977e:	f003 031c 	and.w	r3, r3, #28
    9782:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    9784:	2102      	movs	r1, #2
    9786:	6838      	ldr	r0, [r7, #0]
    9788:	4b37      	ldr	r3, [pc, #220]	; (9868 <_i2c_m_sync_init_impl+0x124>)
    978a:	4798      	blx	r3
    978c:	4603      	mov	r3, r0
    978e:	2b00      	cmp	r3, #0
    9790:	d006      	beq.n	97a0 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    9792:	6838      	ldr	r0, [r7, #0]
    9794:	4b35      	ldr	r3, [pc, #212]	; (986c <_i2c_m_sync_init_impl+0x128>)
    9796:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    9798:	2102      	movs	r1, #2
    979a:	6838      	ldr	r0, [r7, #0]
    979c:	4b34      	ldr	r3, [pc, #208]	; (9870 <_i2c_m_sync_init_impl+0x12c>)
    979e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    97a0:	68bb      	ldr	r3, [r7, #8]
    97a2:	f043 0301 	orr.w	r3, r3, #1
    97a6:	4619      	mov	r1, r3
    97a8:	6838      	ldr	r0, [r7, #0]
    97aa:	4b32      	ldr	r3, [pc, #200]	; (9874 <_i2c_m_sync_init_impl+0x130>)
    97ac:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    97ae:	2101      	movs	r1, #1
    97b0:	6838      	ldr	r0, [r7, #0]
    97b2:	4b2f      	ldr	r3, [pc, #188]	; (9870 <_i2c_m_sync_init_impl+0x12c>)
    97b4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    97b6:	7bfa      	ldrb	r2, [r7, #15]
    97b8:	492a      	ldr	r1, [pc, #168]	; (9864 <_i2c_m_sync_init_impl+0x120>)
    97ba:	4613      	mov	r3, r2
    97bc:	005b      	lsls	r3, r3, #1
    97be:	4413      	add	r3, r2
    97c0:	00db      	lsls	r3, r3, #3
    97c2:	440b      	add	r3, r1
    97c4:	3304      	adds	r3, #4
    97c6:	681b      	ldr	r3, [r3, #0]
    97c8:	4619      	mov	r1, r3
    97ca:	6838      	ldr	r0, [r7, #0]
    97cc:	4b29      	ldr	r3, [pc, #164]	; (9874 <_i2c_m_sync_init_impl+0x130>)
    97ce:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    97d0:	7bfa      	ldrb	r2, [r7, #15]
    97d2:	4924      	ldr	r1, [pc, #144]	; (9864 <_i2c_m_sync_init_impl+0x120>)
    97d4:	4613      	mov	r3, r2
    97d6:	005b      	lsls	r3, r3, #1
    97d8:	4413      	add	r3, r2
    97da:	00db      	lsls	r3, r3, #3
    97dc:	440b      	add	r3, r1
    97de:	3308      	adds	r3, #8
    97e0:	681b      	ldr	r3, [r3, #0]
    97e2:	4619      	mov	r1, r3
    97e4:	6838      	ldr	r0, [r7, #0]
    97e6:	4b24      	ldr	r3, [pc, #144]	; (9878 <_i2c_m_sync_init_impl+0x134>)
    97e8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    97ea:	7bfa      	ldrb	r2, [r7, #15]
    97ec:	491d      	ldr	r1, [pc, #116]	; (9864 <_i2c_m_sync_init_impl+0x120>)
    97ee:	4613      	mov	r3, r2
    97f0:	005b      	lsls	r3, r3, #1
    97f2:	4413      	add	r3, r2
    97f4:	00db      	lsls	r3, r3, #3
    97f6:	440b      	add	r3, r1
    97f8:	330c      	adds	r3, #12
    97fa:	681b      	ldr	r3, [r3, #0]
    97fc:	4619      	mov	r1, r3
    97fe:	6838      	ldr	r0, [r7, #0]
    9800:	4b1e      	ldr	r3, [pc, #120]	; (987c <_i2c_m_sync_init_impl+0x138>)
    9802:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    9804:	7bfa      	ldrb	r2, [r7, #15]
    9806:	4917      	ldr	r1, [pc, #92]	; (9864 <_i2c_m_sync_init_impl+0x120>)
    9808:	4613      	mov	r3, r2
    980a:	005b      	lsls	r3, r3, #1
    980c:	4413      	add	r3, r2
    980e:	00db      	lsls	r3, r3, #3
    9810:	440b      	add	r3, r1
    9812:	3304      	adds	r3, #4
    9814:	681b      	ldr	r3, [r3, #0]
    9816:	0e1b      	lsrs	r3, r3, #24
    9818:	b29b      	uxth	r3, r3
    981a:	f003 0303 	and.w	r3, r3, #3
    981e:	b29a      	uxth	r2, r3
    9820:	687b      	ldr	r3, [r7, #4]
    9822:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    9824:	687b      	ldr	r3, [r7, #4]
    9826:	899b      	ldrh	r3, [r3, #12]
    9828:	2b01      	cmp	r3, #1
    982a:	bf8c      	ite	hi
    982c:	2301      	movhi	r3, #1
    982e:	2300      	movls	r3, #0
    9830:	b2db      	uxtb	r3, r3
    9832:	4619      	mov	r1, r3
    9834:	6838      	ldr	r0, [r7, #0]
    9836:	4b12      	ldr	r3, [pc, #72]	; (9880 <_i2c_m_sync_init_impl+0x13c>)
    9838:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    983a:	7bfa      	ldrb	r2, [r7, #15]
    983c:	4909      	ldr	r1, [pc, #36]	; (9864 <_i2c_m_sync_init_impl+0x120>)
    983e:	4613      	mov	r3, r2
    9840:	005b      	lsls	r3, r3, #1
    9842:	4413      	add	r3, r2
    9844:	00db      	lsls	r3, r3, #3
    9846:	440b      	add	r3, r1
    9848:	3312      	adds	r3, #18
    984a:	881a      	ldrh	r2, [r3, #0]
    984c:	687b      	ldr	r3, [r7, #4]
    984e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    9850:	2300      	movs	r3, #0
}
    9852:	4618      	mov	r0, r3
    9854:	3710      	adds	r7, #16
    9856:	46bd      	mov	sp, r7
    9858:	bd80      	pop	{r7, pc}
    985a:	bf00      	nop
    985c:	00008c81 	.word	0x00008c81
    9860:	00008499 	.word	0x00008499
    9864:	20000018 	.word	0x20000018
    9868:	000087a5 	.word	0x000087a5
    986c:	0000874d 	.word	0x0000874d
    9870:	00008475 	.word	0x00008475
    9874:	000087d5 	.word	0x000087d5
    9878:	0000897d 	.word	0x0000897d
    987c:	000089c5 	.word	0x000089c5
    9880:	00008a01 	.word	0x00008a01

00009884 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    9884:	b580      	push	{r7, lr}
    9886:	b082      	sub	sp, #8
    9888:	af00      	add	r7, sp, #0
    988a:	6078      	str	r0, [r7, #4]
    988c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    988e:	687b      	ldr	r3, [r7, #4]
    9890:	2b00      	cmp	r3, #0
    9892:	d004      	beq.n	989e <_spi_load_regs_master+0x1a>
    9894:	683b      	ldr	r3, [r7, #0]
    9896:	2b00      	cmp	r3, #0
    9898:	d001      	beq.n	989e <_spi_load_regs_master+0x1a>
    989a:	2301      	movs	r3, #1
    989c:	e000      	b.n	98a0 <_spi_load_regs_master+0x1c>
    989e:	2300      	movs	r3, #0
    98a0:	f003 0301 	and.w	r3, r3, #1
    98a4:	b2db      	uxtb	r3, r3
    98a6:	f640 1245 	movw	r2, #2373	; 0x945
    98aa:	4915      	ldr	r1, [pc, #84]	; (9900 <_spi_load_regs_master+0x7c>)
    98ac:	4618      	mov	r0, r3
    98ae:	4b15      	ldr	r3, [pc, #84]	; (9904 <_spi_load_regs_master+0x80>)
    98b0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    98b2:	683b      	ldr	r3, [r7, #0]
    98b4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    98b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    98ba:	f023 0301 	bic.w	r3, r3, #1
    98be:	4619      	mov	r1, r3
    98c0:	6878      	ldr	r0, [r7, #4]
    98c2:	4b11      	ldr	r3, [pc, #68]	; (9908 <_spi_load_regs_master+0x84>)
    98c4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    98c6:	683b      	ldr	r3, [r7, #0]
    98c8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    98ca:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    98ce:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    98d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    98d6:	4619      	mov	r1, r3
    98d8:	6878      	ldr	r0, [r7, #4]
    98da:	4b0c      	ldr	r3, [pc, #48]	; (990c <_spi_load_regs_master+0x88>)
    98dc:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    98de:	683b      	ldr	r3, [r7, #0]
    98e0:	7b1b      	ldrb	r3, [r3, #12]
    98e2:	4619      	mov	r1, r3
    98e4:	6878      	ldr	r0, [r7, #4]
    98e6:	4b0a      	ldr	r3, [pc, #40]	; (9910 <_spi_load_regs_master+0x8c>)
    98e8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    98ea:	683b      	ldr	r3, [r7, #0]
    98ec:	7b5b      	ldrb	r3, [r3, #13]
    98ee:	4619      	mov	r1, r3
    98f0:	6878      	ldr	r0, [r7, #4]
    98f2:	4b08      	ldr	r3, [pc, #32]	; (9914 <_spi_load_regs_master+0x90>)
    98f4:	4798      	blx	r3
}
    98f6:	bf00      	nop
    98f8:	3708      	adds	r7, #8
    98fa:	46bd      	mov	sp, r7
    98fc:	bd80      	pop	{r7, pc}
    98fe:	bf00      	nop
    9900:	00012b88 	.word	0x00012b88
    9904:	00005ed5 	.word	0x00005ed5
    9908:	00008889 	.word	0x00008889
    990c:	000089a1 	.word	0x000089a1
    9910:	000089e1 	.word	0x000089e1
    9914:	00008b19 	.word	0x00008b19

00009918 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    9918:	b580      	push	{r7, lr}
    991a:	b082      	sub	sp, #8
    991c:	af00      	add	r7, sp, #0
    991e:	6078      	str	r0, [r7, #4]
    9920:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    9922:	687b      	ldr	r3, [r7, #4]
    9924:	2b00      	cmp	r3, #0
    9926:	d004      	beq.n	9932 <_spi_load_regs_slave+0x1a>
    9928:	683b      	ldr	r3, [r7, #0]
    992a:	2b00      	cmp	r3, #0
    992c:	d001      	beq.n	9932 <_spi_load_regs_slave+0x1a>
    992e:	2301      	movs	r3, #1
    9930:	e000      	b.n	9934 <_spi_load_regs_slave+0x1c>
    9932:	2300      	movs	r3, #0
    9934:	f003 0301 	and.w	r3, r3, #1
    9938:	b2db      	uxtb	r3, r3
    993a:	f640 1259 	movw	r2, #2393	; 0x959
    993e:	491a      	ldr	r1, [pc, #104]	; (99a8 <_spi_load_regs_slave+0x90>)
    9940:	4618      	mov	r0, r3
    9942:	4b1a      	ldr	r3, [pc, #104]	; (99ac <_spi_load_regs_slave+0x94>)
    9944:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9946:	683b      	ldr	r3, [r7, #0]
    9948:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    994a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    994e:	f023 0301 	bic.w	r3, r3, #1
    9952:	4619      	mov	r1, r3
    9954:	6878      	ldr	r0, [r7, #4]
    9956:	4b16      	ldr	r3, [pc, #88]	; (99b0 <_spi_load_regs_slave+0x98>)
    9958:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    995a:	683b      	ldr	r3, [r7, #0]
    995c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    995e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    9962:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    9966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    996a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    996e:	4619      	mov	r1, r3
    9970:	6878      	ldr	r0, [r7, #4]
    9972:	4b10      	ldr	r3, [pc, #64]	; (99b4 <_spi_load_regs_slave+0x9c>)
    9974:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    9976:	683b      	ldr	r3, [r7, #0]
    9978:	689b      	ldr	r3, [r3, #8]
    997a:	4619      	mov	r1, r3
    997c:	6878      	ldr	r0, [r7, #4]
    997e:	4b0e      	ldr	r3, [pc, #56]	; (99b8 <_spi_load_regs_slave+0xa0>)
    9980:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    9982:	683b      	ldr	r3, [r7, #0]
    9984:	7b5b      	ldrb	r3, [r3, #13]
    9986:	4619      	mov	r1, r3
    9988:	6878      	ldr	r0, [r7, #4]
    998a:	4b0c      	ldr	r3, [pc, #48]	; (99bc <_spi_load_regs_slave+0xa4>)
    998c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    998e:	bf00      	nop
    9990:	f04f 31ff 	mov.w	r1, #4294967295
    9994:	6878      	ldr	r0, [r7, #4]
    9996:	4b0a      	ldr	r3, [pc, #40]	; (99c0 <_spi_load_regs_slave+0xa8>)
    9998:	4798      	blx	r3
    999a:	4603      	mov	r3, r0
    999c:	2b00      	cmp	r3, #0
    999e:	d1f7      	bne.n	9990 <_spi_load_regs_slave+0x78>
		;
}
    99a0:	bf00      	nop
    99a2:	3708      	adds	r7, #8
    99a4:	46bd      	mov	sp, r7
    99a6:	bd80      	pop	{r7, pc}
    99a8:	00012b88 	.word	0x00012b88
    99ac:	00005ed5 	.word	0x00005ed5
    99b0:	00008889 	.word	0x00008889
    99b4:	000089a1 	.word	0x000089a1
    99b8:	00008a85 	.word	0x00008a85
    99bc:	00008b19 	.word	0x00008b19
    99c0:	000084e5 	.word	0x000084e5

000099c4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    99c4:	b580      	push	{r7, lr}
    99c6:	b084      	sub	sp, #16
    99c8:	af00      	add	r7, sp, #0
    99ca:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	4618      	mov	r0, r3
    99d0:	4b11      	ldr	r3, [pc, #68]	; (9a18 <_spi_get_regs+0x54>)
    99d2:	4798      	blx	r3
    99d4:	4603      	mov	r3, r0
    99d6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    99d8:	2300      	movs	r3, #0
    99da:	73fb      	strb	r3, [r7, #15]
    99dc:	e014      	b.n	9a08 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    99de:	7bfa      	ldrb	r2, [r7, #15]
    99e0:	490e      	ldr	r1, [pc, #56]	; (9a1c <_spi_get_regs+0x58>)
    99e2:	4613      	mov	r3, r2
    99e4:	011b      	lsls	r3, r3, #4
    99e6:	4413      	add	r3, r2
    99e8:	440b      	add	r3, r1
    99ea:	3310      	adds	r3, #16
    99ec:	781b      	ldrb	r3, [r3, #0]
    99ee:	7bba      	ldrb	r2, [r7, #14]
    99f0:	429a      	cmp	r2, r3
    99f2:	d106      	bne.n	9a02 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    99f4:	7bfa      	ldrb	r2, [r7, #15]
    99f6:	4613      	mov	r3, r2
    99f8:	011b      	lsls	r3, r3, #4
    99fa:	4413      	add	r3, r2
    99fc:	4a07      	ldr	r2, [pc, #28]	; (9a1c <_spi_get_regs+0x58>)
    99fe:	4413      	add	r3, r2
    9a00:	e006      	b.n	9a10 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    9a02:	7bfb      	ldrb	r3, [r7, #15]
    9a04:	3301      	adds	r3, #1
    9a06:	73fb      	strb	r3, [r7, #15]
    9a08:	7bfb      	ldrb	r3, [r7, #15]
    9a0a:	2b02      	cmp	r3, #2
    9a0c:	d9e7      	bls.n	99de <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    9a0e:	2300      	movs	r3, #0
}
    9a10:	4618      	mov	r0, r3
    9a12:	3710      	adds	r7, #16
    9a14:	46bd      	mov	sp, r7
    9a16:	bd80      	pop	{r7, pc}
    9a18:	00008bd1 	.word	0x00008bd1
    9a1c:	00012bc4 	.word	0x00012bc4

00009a20 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    9a20:	b580      	push	{r7, lr}
    9a22:	b084      	sub	sp, #16
    9a24:	af00      	add	r7, sp, #0
    9a26:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    9a28:	687b      	ldr	r3, [r7, #4]
    9a2a:	681b      	ldr	r3, [r3, #0]
    9a2c:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    9a2e:	68f8      	ldr	r0, [r7, #12]
    9a30:	4b21      	ldr	r3, [pc, #132]	; (9ab8 <_spi_handler+0x98>)
    9a32:	4798      	blx	r3
    9a34:	4603      	mov	r3, r0
    9a36:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    9a38:	68f8      	ldr	r0, [r7, #12]
    9a3a:	4b20      	ldr	r3, [pc, #128]	; (9abc <_spi_handler+0x9c>)
    9a3c:	4798      	blx	r3
    9a3e:	4603      	mov	r3, r0
    9a40:	461a      	mov	r2, r3
    9a42:	7afb      	ldrb	r3, [r7, #11]
    9a44:	4013      	ands	r3, r2
    9a46:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    9a48:	7afb      	ldrb	r3, [r7, #11]
    9a4a:	f003 0301 	and.w	r3, r3, #1
    9a4e:	2b00      	cmp	r3, #0
    9a50:	d004      	beq.n	9a5c <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    9a52:	687b      	ldr	r3, [r7, #4]
    9a54:	689b      	ldr	r3, [r3, #8]
    9a56:	6878      	ldr	r0, [r7, #4]
    9a58:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    9a5a:	e029      	b.n	9ab0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    9a5c:	7afb      	ldrb	r3, [r7, #11]
    9a5e:	f003 0304 	and.w	r3, r3, #4
    9a62:	2b00      	cmp	r3, #0
    9a64:	d004      	beq.n	9a70 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    9a66:	687b      	ldr	r3, [r7, #4]
    9a68:	68db      	ldr	r3, [r3, #12]
    9a6a:	6878      	ldr	r0, [r7, #4]
    9a6c:	4798      	blx	r3
}
    9a6e:	e01f      	b.n	9ab0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    9a70:	7afb      	ldrb	r3, [r7, #11]
    9a72:	f003 0302 	and.w	r3, r3, #2
    9a76:	2b00      	cmp	r3, #0
    9a78:	d008      	beq.n	9a8c <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    9a7a:	2102      	movs	r1, #2
    9a7c:	68f8      	ldr	r0, [r7, #12]
    9a7e:	4b10      	ldr	r3, [pc, #64]	; (9ac0 <_spi_handler+0xa0>)
    9a80:	4798      	blx	r3
		dev->callbacks.complete(dev);
    9a82:	687b      	ldr	r3, [r7, #4]
    9a84:	691b      	ldr	r3, [r3, #16]
    9a86:	6878      	ldr	r0, [r7, #4]
    9a88:	4798      	blx	r3
}
    9a8a:	e011      	b.n	9ab0 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    9a8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    9a90:	2b00      	cmp	r3, #0
    9a92:	da0d      	bge.n	9ab0 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    9a94:	2104      	movs	r1, #4
    9a96:	68f8      	ldr	r0, [r7, #12]
    9a98:	4b0a      	ldr	r3, [pc, #40]	; (9ac4 <_spi_handler+0xa4>)
    9a9a:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    9a9c:	2180      	movs	r1, #128	; 0x80
    9a9e:	68f8      	ldr	r0, [r7, #12]
    9aa0:	4b07      	ldr	r3, [pc, #28]	; (9ac0 <_spi_handler+0xa0>)
    9aa2:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    9aa4:	687b      	ldr	r3, [r7, #4]
    9aa6:	695b      	ldr	r3, [r3, #20]
    9aa8:	f06f 0112 	mvn.w	r1, #18
    9aac:	6878      	ldr	r0, [r7, #4]
    9aae:	4798      	blx	r3
}
    9ab0:	bf00      	nop
    9ab2:	3710      	adds	r7, #16
    9ab4:	46bd      	mov	sp, r7
    9ab6:	bd80      	pop	{r7, pc}
    9ab8:	000085a1 	.word	0x000085a1
    9abc:	0000870b 	.word	0x0000870b
    9ac0:	000085bb 	.word	0x000085bb
    9ac4:	00008b39 	.word	0x00008b39

00009ac8 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    9ac8:	b580      	push	{r7, lr}
    9aca:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    9acc:	4b03      	ldr	r3, [pc, #12]	; (9adc <SERCOM4_0_Handler+0x14>)
    9ace:	681b      	ldr	r3, [r3, #0]
    9ad0:	4618      	mov	r0, r3
    9ad2:	4b03      	ldr	r3, [pc, #12]	; (9ae0 <SERCOM4_0_Handler+0x18>)
    9ad4:	4798      	blx	r3
}
    9ad6:	bf00      	nop
    9ad8:	bd80      	pop	{r7, pc}
    9ada:	bf00      	nop
    9adc:	200021cc 	.word	0x200021cc
    9ae0:	00009a21 	.word	0x00009a21

00009ae4 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    9ae4:	b580      	push	{r7, lr}
    9ae6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    9ae8:	4b03      	ldr	r3, [pc, #12]	; (9af8 <SERCOM4_1_Handler+0x14>)
    9aea:	681b      	ldr	r3, [r3, #0]
    9aec:	4618      	mov	r0, r3
    9aee:	4b03      	ldr	r3, [pc, #12]	; (9afc <SERCOM4_1_Handler+0x18>)
    9af0:	4798      	blx	r3
}
    9af2:	bf00      	nop
    9af4:	bd80      	pop	{r7, pc}
    9af6:	bf00      	nop
    9af8:	200021cc 	.word	0x200021cc
    9afc:	00009a21 	.word	0x00009a21

00009b00 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    9b00:	b580      	push	{r7, lr}
    9b02:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    9b04:	4b03      	ldr	r3, [pc, #12]	; (9b14 <SERCOM4_2_Handler+0x14>)
    9b06:	681b      	ldr	r3, [r3, #0]
    9b08:	4618      	mov	r0, r3
    9b0a:	4b03      	ldr	r3, [pc, #12]	; (9b18 <SERCOM4_2_Handler+0x18>)
    9b0c:	4798      	blx	r3
}
    9b0e:	bf00      	nop
    9b10:	bd80      	pop	{r7, pc}
    9b12:	bf00      	nop
    9b14:	200021cc 	.word	0x200021cc
    9b18:	00009a21 	.word	0x00009a21

00009b1c <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    9b1c:	b580      	push	{r7, lr}
    9b1e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    9b20:	4b03      	ldr	r3, [pc, #12]	; (9b30 <SERCOM4_3_Handler+0x14>)
    9b22:	681b      	ldr	r3, [r3, #0]
    9b24:	4618      	mov	r0, r3
    9b26:	4b03      	ldr	r3, [pc, #12]	; (9b34 <SERCOM4_3_Handler+0x18>)
    9b28:	4798      	blx	r3
}
    9b2a:	bf00      	nop
    9b2c:	bd80      	pop	{r7, pc}
    9b2e:	bf00      	nop
    9b30:	200021cc 	.word	0x200021cc
    9b34:	00009a21 	.word	0x00009a21

00009b38 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    9b38:	b580      	push	{r7, lr}
    9b3a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    9b3c:	4b03      	ldr	r3, [pc, #12]	; (9b4c <SERCOM5_0_Handler+0x14>)
    9b3e:	681b      	ldr	r3, [r3, #0]
    9b40:	4618      	mov	r0, r3
    9b42:	4b03      	ldr	r3, [pc, #12]	; (9b50 <SERCOM5_0_Handler+0x18>)
    9b44:	4798      	blx	r3
}
    9b46:	bf00      	nop
    9b48:	bd80      	pop	{r7, pc}
    9b4a:	bf00      	nop
    9b4c:	200021d0 	.word	0x200021d0
    9b50:	00008f35 	.word	0x00008f35

00009b54 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    9b54:	b580      	push	{r7, lr}
    9b56:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    9b58:	4b03      	ldr	r3, [pc, #12]	; (9b68 <SERCOM5_1_Handler+0x14>)
    9b5a:	681b      	ldr	r3, [r3, #0]
    9b5c:	4618      	mov	r0, r3
    9b5e:	4b03      	ldr	r3, [pc, #12]	; (9b6c <SERCOM5_1_Handler+0x18>)
    9b60:	4798      	blx	r3
}
    9b62:	bf00      	nop
    9b64:	bd80      	pop	{r7, pc}
    9b66:	bf00      	nop
    9b68:	200021d0 	.word	0x200021d0
    9b6c:	00008f35 	.word	0x00008f35

00009b70 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    9b70:	b580      	push	{r7, lr}
    9b72:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    9b74:	4b03      	ldr	r3, [pc, #12]	; (9b84 <SERCOM5_2_Handler+0x14>)
    9b76:	681b      	ldr	r3, [r3, #0]
    9b78:	4618      	mov	r0, r3
    9b7a:	4b03      	ldr	r3, [pc, #12]	; (9b88 <SERCOM5_2_Handler+0x18>)
    9b7c:	4798      	blx	r3
}
    9b7e:	bf00      	nop
    9b80:	bd80      	pop	{r7, pc}
    9b82:	bf00      	nop
    9b84:	200021d0 	.word	0x200021d0
    9b88:	00008f35 	.word	0x00008f35

00009b8c <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    9b8c:	b580      	push	{r7, lr}
    9b8e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    9b90:	4b03      	ldr	r3, [pc, #12]	; (9ba0 <SERCOM5_3_Handler+0x14>)
    9b92:	681b      	ldr	r3, [r3, #0]
    9b94:	4618      	mov	r0, r3
    9b96:	4b03      	ldr	r3, [pc, #12]	; (9ba4 <SERCOM5_3_Handler+0x18>)
    9b98:	4798      	blx	r3
}
    9b9a:	bf00      	nop
    9b9c:	bd80      	pop	{r7, pc}
    9b9e:	bf00      	nop
    9ba0:	200021d0 	.word	0x200021d0
    9ba4:	00008f35 	.word	0x00008f35

00009ba8 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    9ba8:	b580      	push	{r7, lr}
    9baa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    9bac:	4b03      	ldr	r3, [pc, #12]	; (9bbc <SERCOM7_0_Handler+0x14>)
    9bae:	681b      	ldr	r3, [r3, #0]
    9bb0:	4618      	mov	r0, r3
    9bb2:	4b03      	ldr	r3, [pc, #12]	; (9bc0 <SERCOM7_0_Handler+0x18>)
    9bb4:	4798      	blx	r3
}
    9bb6:	bf00      	nop
    9bb8:	bd80      	pop	{r7, pc}
    9bba:	bf00      	nop
    9bbc:	200021d4 	.word	0x200021d4
    9bc0:	00008f35 	.word	0x00008f35

00009bc4 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    9bc4:	b580      	push	{r7, lr}
    9bc6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    9bc8:	4b03      	ldr	r3, [pc, #12]	; (9bd8 <SERCOM7_1_Handler+0x14>)
    9bca:	681b      	ldr	r3, [r3, #0]
    9bcc:	4618      	mov	r0, r3
    9bce:	4b03      	ldr	r3, [pc, #12]	; (9bdc <SERCOM7_1_Handler+0x18>)
    9bd0:	4798      	blx	r3
}
    9bd2:	bf00      	nop
    9bd4:	bd80      	pop	{r7, pc}
    9bd6:	bf00      	nop
    9bd8:	200021d4 	.word	0x200021d4
    9bdc:	00008f35 	.word	0x00008f35

00009be0 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    9be0:	b580      	push	{r7, lr}
    9be2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    9be4:	4b03      	ldr	r3, [pc, #12]	; (9bf4 <SERCOM7_2_Handler+0x14>)
    9be6:	681b      	ldr	r3, [r3, #0]
    9be8:	4618      	mov	r0, r3
    9bea:	4b03      	ldr	r3, [pc, #12]	; (9bf8 <SERCOM7_2_Handler+0x18>)
    9bec:	4798      	blx	r3
}
    9bee:	bf00      	nop
    9bf0:	bd80      	pop	{r7, pc}
    9bf2:	bf00      	nop
    9bf4:	200021d4 	.word	0x200021d4
    9bf8:	00008f35 	.word	0x00008f35

00009bfc <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    9bfc:	b580      	push	{r7, lr}
    9bfe:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    9c00:	4b03      	ldr	r3, [pc, #12]	; (9c10 <SERCOM7_3_Handler+0x14>)
    9c02:	681b      	ldr	r3, [r3, #0]
    9c04:	4618      	mov	r0, r3
    9c06:	4b03      	ldr	r3, [pc, #12]	; (9c14 <SERCOM7_3_Handler+0x18>)
    9c08:	4798      	blx	r3
}
    9c0a:	bf00      	nop
    9c0c:	bd80      	pop	{r7, pc}
    9c0e:	bf00      	nop
    9c10:	200021d4 	.word	0x200021d4
    9c14:	00008f35 	.word	0x00008f35

00009c18 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    9c18:	b580      	push	{r7, lr}
    9c1a:	b084      	sub	sp, #16
    9c1c:	af00      	add	r7, sp, #0
    9c1e:	6078      	str	r0, [r7, #4]
    9c20:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    9c22:	683b      	ldr	r3, [r7, #0]
    9c24:	4618      	mov	r0, r3
    9c26:	4b35      	ldr	r3, [pc, #212]	; (9cfc <_spi_m_sync_init+0xe4>)
    9c28:	4798      	blx	r3
    9c2a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    9c2c:	687b      	ldr	r3, [r7, #4]
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d004      	beq.n	9c3c <_spi_m_sync_init+0x24>
    9c32:	683b      	ldr	r3, [r7, #0]
    9c34:	2b00      	cmp	r3, #0
    9c36:	d001      	beq.n	9c3c <_spi_m_sync_init+0x24>
    9c38:	2301      	movs	r3, #1
    9c3a:	e000      	b.n	9c3e <_spi_m_sync_init+0x26>
    9c3c:	2300      	movs	r3, #0
    9c3e:	f003 0301 	and.w	r3, r3, #1
    9c42:	b2db      	uxtb	r3, r3
    9c44:	f640 12ec 	movw	r2, #2540	; 0x9ec
    9c48:	492d      	ldr	r1, [pc, #180]	; (9d00 <_spi_m_sync_init+0xe8>)
    9c4a:	4618      	mov	r0, r3
    9c4c:	4b2d      	ldr	r3, [pc, #180]	; (9d04 <_spi_m_sync_init+0xec>)
    9c4e:	4798      	blx	r3

	if (regs == NULL) {
    9c50:	68fb      	ldr	r3, [r7, #12]
    9c52:	2b00      	cmp	r3, #0
    9c54:	d102      	bne.n	9c5c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    9c56:	f06f 030c 	mvn.w	r3, #12
    9c5a:	e04a      	b.n	9cf2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    9c5c:	2101      	movs	r1, #1
    9c5e:	6838      	ldr	r0, [r7, #0]
    9c60:	4b29      	ldr	r3, [pc, #164]	; (9d08 <_spi_m_sync_init+0xf0>)
    9c62:	4798      	blx	r3
    9c64:	4603      	mov	r3, r0
    9c66:	f083 0301 	eor.w	r3, r3, #1
    9c6a:	b2db      	uxtb	r3, r3
    9c6c:	2b00      	cmp	r3, #0
    9c6e:	d019      	beq.n	9ca4 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    9c70:	68fb      	ldr	r3, [r7, #12]
    9c72:	681b      	ldr	r3, [r3, #0]
    9c74:	f003 031c 	and.w	r3, r3, #28
    9c78:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    9c7a:	2102      	movs	r1, #2
    9c7c:	6838      	ldr	r0, [r7, #0]
    9c7e:	4b23      	ldr	r3, [pc, #140]	; (9d0c <_spi_m_sync_init+0xf4>)
    9c80:	4798      	blx	r3
    9c82:	4603      	mov	r3, r0
    9c84:	2b00      	cmp	r3, #0
    9c86:	d006      	beq.n	9c96 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    9c88:	6838      	ldr	r0, [r7, #0]
    9c8a:	4b21      	ldr	r3, [pc, #132]	; (9d10 <_spi_m_sync_init+0xf8>)
    9c8c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    9c8e:	2102      	movs	r1, #2
    9c90:	6838      	ldr	r0, [r7, #0]
    9c92:	4b20      	ldr	r3, [pc, #128]	; (9d14 <_spi_m_sync_init+0xfc>)
    9c94:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    9c96:	68bb      	ldr	r3, [r7, #8]
    9c98:	f043 0301 	orr.w	r3, r3, #1
    9c9c:	4619      	mov	r1, r3
    9c9e:	6838      	ldr	r0, [r7, #0]
    9ca0:	4b1d      	ldr	r3, [pc, #116]	; (9d18 <_spi_m_sync_init+0x100>)
    9ca2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    9ca4:	2101      	movs	r1, #1
    9ca6:	6838      	ldr	r0, [r7, #0]
    9ca8:	4b1a      	ldr	r3, [pc, #104]	; (9d14 <_spi_m_sync_init+0xfc>)
    9caa:	4798      	blx	r3

	dev->prvt = hw;
    9cac:	687b      	ldr	r3, [r7, #4]
    9cae:	683a      	ldr	r2, [r7, #0]
    9cb0:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    9cb2:	68fb      	ldr	r3, [r7, #12]
    9cb4:	681b      	ldr	r3, [r3, #0]
    9cb6:	f003 031c 	and.w	r3, r3, #28
    9cba:	2b08      	cmp	r3, #8
    9cbc:	d104      	bne.n	9cc8 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    9cbe:	68f9      	ldr	r1, [r7, #12]
    9cc0:	6838      	ldr	r0, [r7, #0]
    9cc2:	4b16      	ldr	r3, [pc, #88]	; (9d1c <_spi_m_sync_init+0x104>)
    9cc4:	4798      	blx	r3
    9cc6:	e003      	b.n	9cd0 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    9cc8:	68f9      	ldr	r1, [r7, #12]
    9cca:	6838      	ldr	r0, [r7, #0]
    9ccc:	4b14      	ldr	r3, [pc, #80]	; (9d20 <_spi_m_sync_init+0x108>)
    9cce:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    9cd0:	68fb      	ldr	r3, [r7, #12]
    9cd2:	685b      	ldr	r3, [r3, #4]
    9cd4:	f003 0307 	and.w	r3, r3, #7
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d101      	bne.n	9ce0 <_spi_m_sync_init+0xc8>
    9cdc:	2201      	movs	r2, #1
    9cde:	e000      	b.n	9ce2 <_spi_m_sync_init+0xca>
    9ce0:	2202      	movs	r2, #2
    9ce2:	687b      	ldr	r3, [r7, #4]
    9ce4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    9ce6:	68fb      	ldr	r3, [r7, #12]
    9ce8:	89db      	ldrh	r3, [r3, #14]
    9cea:	b29a      	uxth	r2, r3
    9cec:	687b      	ldr	r3, [r7, #4]
    9cee:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    9cf0:	2300      	movs	r3, #0
}
    9cf2:	4618      	mov	r0, r3
    9cf4:	3710      	adds	r7, #16
    9cf6:	46bd      	mov	sp, r7
    9cf8:	bd80      	pop	{r7, pc}
    9cfa:	bf00      	nop
    9cfc:	000099c5 	.word	0x000099c5
    9d00:	00012b88 	.word	0x00012b88
    9d04:	00005ed5 	.word	0x00005ed5
    9d08:	000084e5 	.word	0x000084e5
    9d0c:	00008859 	.word	0x00008859
    9d10:	00008831 	.word	0x00008831
    9d14:	000084c1 	.word	0x000084c1
    9d18:	00008889 	.word	0x00008889
    9d1c:	00009919 	.word	0x00009919
    9d20:	00009885 	.word	0x00009885

00009d24 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    9d24:	b580      	push	{r7, lr}
    9d26:	b086      	sub	sp, #24
    9d28:	af00      	add	r7, sp, #0
    9d2a:	6078      	str	r0, [r7, #4]
    9d2c:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    9d2e:	687b      	ldr	r3, [r7, #4]
    9d30:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    9d32:	6839      	ldr	r1, [r7, #0]
    9d34:	6878      	ldr	r0, [r7, #4]
    9d36:	4b1a      	ldr	r3, [pc, #104]	; (9da0 <_spi_m_async_init+0x7c>)
    9d38:	4798      	blx	r3
    9d3a:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    9d3c:	68bb      	ldr	r3, [r7, #8]
    9d3e:	2b00      	cmp	r3, #0
    9d40:	da01      	bge.n	9d46 <_spi_m_async_init+0x22>
		return rc;
    9d42:	68bb      	ldr	r3, [r7, #8]
    9d44:	e028      	b.n	9d98 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    9d46:	6879      	ldr	r1, [r7, #4]
    9d48:	6838      	ldr	r0, [r7, #0]
    9d4a:	4b16      	ldr	r3, [pc, #88]	; (9da4 <_spi_m_async_init+0x80>)
    9d4c:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    9d4e:	68fb      	ldr	r3, [r7, #12]
    9d50:	2200      	movs	r2, #0
    9d52:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    9d54:	68fb      	ldr	r3, [r7, #12]
    9d56:	2200      	movs	r2, #0
    9d58:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    9d5a:	68fb      	ldr	r3, [r7, #12]
    9d5c:	2200      	movs	r2, #0
    9d5e:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    9d60:	6838      	ldr	r0, [r7, #0]
    9d62:	4b11      	ldr	r3, [pc, #68]	; (9da8 <_spi_m_async_init+0x84>)
    9d64:	4798      	blx	r3
    9d66:	4603      	mov	r3, r0
    9d68:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9d6a:	2300      	movs	r3, #0
    9d6c:	613b      	str	r3, [r7, #16]
    9d6e:	e00f      	b.n	9d90 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    9d70:	7dfb      	ldrb	r3, [r7, #23]
    9d72:	b21b      	sxth	r3, r3
    9d74:	4618      	mov	r0, r3
    9d76:	4b0d      	ldr	r3, [pc, #52]	; (9dac <_spi_m_async_init+0x88>)
    9d78:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    9d7a:	7dfb      	ldrb	r3, [r7, #23]
    9d7c:	b21b      	sxth	r3, r3
    9d7e:	4618      	mov	r0, r3
    9d80:	4b0b      	ldr	r3, [pc, #44]	; (9db0 <_spi_m_async_init+0x8c>)
    9d82:	4798      	blx	r3
		irq++;
    9d84:	7dfb      	ldrb	r3, [r7, #23]
    9d86:	3301      	adds	r3, #1
    9d88:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9d8a:	693b      	ldr	r3, [r7, #16]
    9d8c:	3301      	adds	r3, #1
    9d8e:	613b      	str	r3, [r7, #16]
    9d90:	693b      	ldr	r3, [r7, #16]
    9d92:	2b03      	cmp	r3, #3
    9d94:	d9ec      	bls.n	9d70 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    9d96:	2300      	movs	r3, #0
}
    9d98:	4618      	mov	r0, r3
    9d9a:	3718      	adds	r7, #24
    9d9c:	46bd      	mov	sp, r7
    9d9e:	bd80      	pop	{r7, pc}
    9da0:	00009c19 	.word	0x00009c19
    9da4:	00008c2d 	.word	0x00008c2d
    9da8:	00009079 	.word	0x00009079
    9dac:	000083f5 	.word	0x000083f5
    9db0:	00008439 	.word	0x00008439

00009db4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    9db4:	b580      	push	{r7, lr}
    9db6:	b082      	sub	sp, #8
    9db8:	af00      	add	r7, sp, #0
    9dba:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    9dbc:	bf00      	nop
    9dbe:	2103      	movs	r1, #3
    9dc0:	6878      	ldr	r0, [r7, #4]
    9dc2:	4b06      	ldr	r3, [pc, #24]	; (9ddc <_spi_wait_bus_idle+0x28>)
    9dc4:	4798      	blx	r3
    9dc6:	4603      	mov	r3, r0
    9dc8:	2b00      	cmp	r3, #0
    9dca:	d0f8      	beq.n	9dbe <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    9dcc:	2103      	movs	r1, #3
    9dce:	6878      	ldr	r0, [r7, #4]
    9dd0:	4b03      	ldr	r3, [pc, #12]	; (9de0 <_spi_wait_bus_idle+0x2c>)
    9dd2:	4798      	blx	r3
}
    9dd4:	bf00      	nop
    9dd6:	3708      	adds	r7, #8
    9dd8:	46bd      	mov	sp, r7
    9dda:	bd80      	pop	{r7, pc}
    9ddc:	00008579 	.word	0x00008579
    9de0:	000085bb 	.word	0x000085bb

00009de4 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    9de4:	b580      	push	{r7, lr}
    9de6:	b086      	sub	sp, #24
    9de8:	af00      	add	r7, sp, #0
    9dea:	60f8      	str	r0, [r7, #12]
    9dec:	60b9      	str	r1, [r7, #8]
    9dee:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    9df0:	68bb      	ldr	r3, [r7, #8]
    9df2:	f003 0304 	and.w	r3, r3, #4
    9df6:	2b00      	cmp	r3, #0
    9df8:	d101      	bne.n	9dfe <_spi_rx_check_and_receive+0x1a>
		return false;
    9dfa:	2300      	movs	r3, #0
    9dfc:	e022      	b.n	9e44 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    9dfe:	68f8      	ldr	r0, [r7, #12]
    9e00:	4b12      	ldr	r3, [pc, #72]	; (9e4c <_spi_rx_check_and_receive+0x68>)
    9e02:	4798      	blx	r3
    9e04:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    9e06:	687b      	ldr	r3, [r7, #4]
    9e08:	685b      	ldr	r3, [r3, #4]
    9e0a:	2b00      	cmp	r3, #0
    9e0c:	d014      	beq.n	9e38 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    9e0e:	687b      	ldr	r3, [r7, #4]
    9e10:	685b      	ldr	r3, [r3, #4]
    9e12:	1c59      	adds	r1, r3, #1
    9e14:	687a      	ldr	r2, [r7, #4]
    9e16:	6051      	str	r1, [r2, #4]
    9e18:	697a      	ldr	r2, [r7, #20]
    9e1a:	b2d2      	uxtb	r2, r2
    9e1c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    9e1e:	687b      	ldr	r3, [r7, #4]
    9e20:	7c1b      	ldrb	r3, [r3, #16]
    9e22:	2b01      	cmp	r3, #1
    9e24:	d908      	bls.n	9e38 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	685b      	ldr	r3, [r3, #4]
    9e2a:	1c59      	adds	r1, r3, #1
    9e2c:	687a      	ldr	r2, [r7, #4]
    9e2e:	6051      	str	r1, [r2, #4]
    9e30:	697a      	ldr	r2, [r7, #20]
    9e32:	0a12      	lsrs	r2, r2, #8
    9e34:	b2d2      	uxtb	r2, r2
    9e36:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	68db      	ldr	r3, [r3, #12]
    9e3c:	1c5a      	adds	r2, r3, #1
    9e3e:	687b      	ldr	r3, [r7, #4]
    9e40:	60da      	str	r2, [r3, #12]

	return true;
    9e42:	2301      	movs	r3, #1
}
    9e44:	4618      	mov	r0, r3
    9e46:	3718      	adds	r7, #24
    9e48:	46bd      	mov	sp, r7
    9e4a:	bd80      	pop	{r7, pc}
    9e4c:	00008b01 	.word	0x00008b01

00009e50 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    9e50:	b580      	push	{r7, lr}
    9e52:	b086      	sub	sp, #24
    9e54:	af00      	add	r7, sp, #0
    9e56:	60f8      	str	r0, [r7, #12]
    9e58:	60b9      	str	r1, [r7, #8]
    9e5a:	607a      	str	r2, [r7, #4]
    9e5c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    9e5e:	68bb      	ldr	r3, [r7, #8]
    9e60:	f003 0301 	and.w	r3, r3, #1
    9e64:	2b00      	cmp	r3, #0
    9e66:	d028      	beq.n	9eba <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    9e68:	687b      	ldr	r3, [r7, #4]
    9e6a:	681b      	ldr	r3, [r3, #0]
    9e6c:	2b00      	cmp	r3, #0
    9e6e:	d018      	beq.n	9ea2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	681b      	ldr	r3, [r3, #0]
    9e74:	1c59      	adds	r1, r3, #1
    9e76:	687a      	ldr	r2, [r7, #4]
    9e78:	6011      	str	r1, [r2, #0]
    9e7a:	781b      	ldrb	r3, [r3, #0]
    9e7c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	7c1b      	ldrb	r3, [r3, #16]
    9e82:	2b01      	cmp	r3, #1
    9e84:	d90f      	bls.n	9ea6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    9e86:	687b      	ldr	r3, [r7, #4]
    9e88:	681b      	ldr	r3, [r3, #0]
    9e8a:	781b      	ldrb	r3, [r3, #0]
    9e8c:	021b      	lsls	r3, r3, #8
    9e8e:	461a      	mov	r2, r3
    9e90:	697b      	ldr	r3, [r7, #20]
    9e92:	4313      	orrs	r3, r2
    9e94:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    9e96:	687b      	ldr	r3, [r7, #4]
    9e98:	681b      	ldr	r3, [r3, #0]
    9e9a:	1c5a      	adds	r2, r3, #1
    9e9c:	687b      	ldr	r3, [r7, #4]
    9e9e:	601a      	str	r2, [r3, #0]
    9ea0:	e001      	b.n	9ea6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    9ea2:	887b      	ldrh	r3, [r7, #2]
    9ea4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	689b      	ldr	r3, [r3, #8]
    9eaa:	1c5a      	adds	r2, r3, #1
    9eac:	687b      	ldr	r3, [r7, #4]
    9eae:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    9eb0:	6979      	ldr	r1, [r7, #20]
    9eb2:	68f8      	ldr	r0, [r7, #12]
    9eb4:	4b03      	ldr	r3, [pc, #12]	; (9ec4 <_spi_tx_check_and_send+0x74>)
    9eb6:	4798      	blx	r3
    9eb8:	e000      	b.n	9ebc <_spi_tx_check_and_send+0x6c>
		return;
    9eba:	bf00      	nop
}
    9ebc:	3718      	adds	r7, #24
    9ebe:	46bd      	mov	sp, r7
    9ec0:	bd80      	pop	{r7, pc}
    9ec2:	bf00      	nop
    9ec4:	00008ae5 	.word	0x00008ae5

00009ec8 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    9ec8:	b580      	push	{r7, lr}
    9eca:	b082      	sub	sp, #8
    9ecc:	af00      	add	r7, sp, #0
    9ece:	6078      	str	r0, [r7, #4]
    9ed0:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d00b      	beq.n	9ef4 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    9edc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9ee0:	6838      	ldr	r0, [r7, #0]
    9ee2:	4b07      	ldr	r3, [pc, #28]	; (9f00 <_spi_err_check+0x38>)
    9ee4:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    9ee6:	2180      	movs	r1, #128	; 0x80
    9ee8:	6838      	ldr	r0, [r7, #0]
    9eea:	4b06      	ldr	r3, [pc, #24]	; (9f04 <_spi_err_check+0x3c>)
    9eec:	4798      	blx	r3
		return ERR_OVERFLOW;
    9eee:	f06f 0312 	mvn.w	r3, #18
    9ef2:	e000      	b.n	9ef6 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    9ef4:	2300      	movs	r3, #0
}
    9ef6:	4618      	mov	r0, r3
    9ef8:	3708      	adds	r7, #8
    9efa:	46bd      	mov	sp, r7
    9efc:	bd80      	pop	{r7, pc}
    9efe:	bf00      	nop
    9f00:	00008b39 	.word	0x00008b39
    9f04:	000085bb 	.word	0x000085bb

00009f08 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    9f08:	b590      	push	{r4, r7, lr}
    9f0a:	b08b      	sub	sp, #44	; 0x2c
    9f0c:	af00      	add	r7, sp, #0
    9f0e:	6078      	str	r0, [r7, #4]
    9f10:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	681b      	ldr	r3, [r3, #0]
    9f16:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    9f18:	2300      	movs	r3, #0
    9f1a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    9f1c:	683b      	ldr	r3, [r7, #0]
    9f1e:	681b      	ldr	r3, [r3, #0]
    9f20:	60bb      	str	r3, [r7, #8]
    9f22:	683b      	ldr	r3, [r7, #0]
    9f24:	685b      	ldr	r3, [r3, #4]
    9f26:	60fb      	str	r3, [r7, #12]
    9f28:	2300      	movs	r3, #0
    9f2a:	613b      	str	r3, [r7, #16]
    9f2c:	2300      	movs	r3, #0
    9f2e:	617b      	str	r3, [r7, #20]
    9f30:	687b      	ldr	r3, [r7, #4]
    9f32:	791b      	ldrb	r3, [r3, #4]
    9f34:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    9f36:	687b      	ldr	r3, [r7, #4]
    9f38:	2b00      	cmp	r3, #0
    9f3a:	d004      	beq.n	9f46 <_spi_m_sync_trans+0x3e>
    9f3c:	6a3b      	ldr	r3, [r7, #32]
    9f3e:	2b00      	cmp	r3, #0
    9f40:	d001      	beq.n	9f46 <_spi_m_sync_trans+0x3e>
    9f42:	2301      	movs	r3, #1
    9f44:	e000      	b.n	9f48 <_spi_m_sync_trans+0x40>
    9f46:	2300      	movs	r3, #0
    9f48:	f003 0301 	and.w	r3, r3, #1
    9f4c:	b2db      	uxtb	r3, r3
    9f4e:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    9f52:	492b      	ldr	r1, [pc, #172]	; (a000 <_spi_m_sync_trans+0xf8>)
    9f54:	4618      	mov	r0, r3
    9f56:	4b2b      	ldr	r3, [pc, #172]	; (a004 <_spi_m_sync_trans+0xfc>)
    9f58:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    9f5a:	2107      	movs	r1, #7
    9f5c:	6a38      	ldr	r0, [r7, #32]
    9f5e:	4b2a      	ldr	r3, [pc, #168]	; (a008 <_spi_m_sync_trans+0x100>)
    9f60:	4798      	blx	r3
    9f62:	4603      	mov	r3, r0
    9f64:	2b00      	cmp	r3, #0
    9f66:	d002      	beq.n	9f6e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    9f68:	f06f 0303 	mvn.w	r3, #3
    9f6c:	e043      	b.n	9ff6 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    9f6e:	6a38      	ldr	r0, [r7, #32]
    9f70:	4b26      	ldr	r3, [pc, #152]	; (a00c <_spi_m_sync_trans+0x104>)
    9f72:	4798      	blx	r3
    9f74:	4603      	mov	r3, r0
    9f76:	f083 0301 	eor.w	r3, r3, #1
    9f7a:	b2db      	uxtb	r3, r3
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d002      	beq.n	9f86 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    9f80:	f06f 0313 	mvn.w	r3, #19
    9f84:	e037      	b.n	9ff6 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    9f86:	6a38      	ldr	r0, [r7, #32]
    9f88:	4b21      	ldr	r3, [pc, #132]	; (a010 <_spi_m_sync_trans+0x108>)
    9f8a:	4798      	blx	r3
    9f8c:	4603      	mov	r3, r0
    9f8e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    9f90:	f107 0308 	add.w	r3, r7, #8
    9f94:	461a      	mov	r2, r3
    9f96:	69f9      	ldr	r1, [r7, #28]
    9f98:	6a38      	ldr	r0, [r7, #32]
    9f9a:	4b1e      	ldr	r3, [pc, #120]	; (a014 <_spi_m_sync_trans+0x10c>)
    9f9c:	4798      	blx	r3
    9f9e:	4603      	mov	r3, r0
    9fa0:	f083 0301 	eor.w	r3, r3, #1
    9fa4:	b2db      	uxtb	r3, r3
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	d00b      	beq.n	9fc2 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    9faa:	697a      	ldr	r2, [r7, #20]
    9fac:	693b      	ldr	r3, [r7, #16]
    9fae:	429a      	cmp	r2, r3
    9fb0:	d307      	bcc.n	9fc2 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    9fb2:	687b      	ldr	r3, [r7, #4]
    9fb4:	88db      	ldrh	r3, [r3, #6]
    9fb6:	f107 0208 	add.w	r2, r7, #8
    9fba:	69f9      	ldr	r1, [r7, #28]
    9fbc:	6a38      	ldr	r0, [r7, #32]
    9fbe:	4c16      	ldr	r4, [pc, #88]	; (a018 <_spi_m_sync_trans+0x110>)
    9fc0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    9fc2:	6a39      	ldr	r1, [r7, #32]
    9fc4:	69f8      	ldr	r0, [r7, #28]
    9fc6:	4b15      	ldr	r3, [pc, #84]	; (a01c <_spi_m_sync_trans+0x114>)
    9fc8:	4798      	blx	r3
    9fca:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    9fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9fce:	2b00      	cmp	r3, #0
    9fd0:	db0c      	blt.n	9fec <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    9fd2:	693a      	ldr	r2, [r7, #16]
    9fd4:	683b      	ldr	r3, [r7, #0]
    9fd6:	689b      	ldr	r3, [r3, #8]
    9fd8:	429a      	cmp	r2, r3
    9fda:	d3d4      	bcc.n	9f86 <_spi_m_sync_trans+0x7e>
    9fdc:	697a      	ldr	r2, [r7, #20]
    9fde:	683b      	ldr	r3, [r7, #0]
    9fe0:	689b      	ldr	r3, [r3, #8]
    9fe2:	429a      	cmp	r2, r3
    9fe4:	d3cf      	bcc.n	9f86 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    9fe6:	693b      	ldr	r3, [r7, #16]
    9fe8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    9fea:	e000      	b.n	9fee <_spi_m_sync_trans+0xe6>
			break;
    9fec:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    9fee:	6a38      	ldr	r0, [r7, #32]
    9ff0:	4b0b      	ldr	r3, [pc, #44]	; (a020 <_spi_m_sync_trans+0x118>)
    9ff2:	4798      	blx	r3

	return rc;
    9ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    9ff6:	4618      	mov	r0, r3
    9ff8:	372c      	adds	r7, #44	; 0x2c
    9ffa:	46bd      	mov	sp, r7
    9ffc:	bd90      	pop	{r4, r7, pc}
    9ffe:	bf00      	nop
    a000:	00012b88 	.word	0x00012b88
    a004:	00005ed5 	.word	0x00005ed5
    a008:	000084e5 	.word	0x000084e5
    a00c:	000087f9 	.word	0x000087f9
    a010:	000085a1 	.word	0x000085a1
    a014:	00009de5 	.word	0x00009de5
    a018:	00009e51 	.word	0x00009e51
    a01c:	00009ec9 	.word	0x00009ec9
    a020:	00009db5 	.word	0x00009db5

0000a024 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    a024:	b580      	push	{r7, lr}
    a026:	b084      	sub	sp, #16
    a028:	af00      	add	r7, sp, #0
    a02a:	6078      	str	r0, [r7, #4]
    a02c:	460b      	mov	r3, r1
    a02e:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	681b      	ldr	r3, [r3, #0]
    a034:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    a036:	687b      	ldr	r3, [r7, #4]
    a038:	2b00      	cmp	r3, #0
    a03a:	d004      	beq.n	a046 <_spi_m_async_enable_tx+0x22>
    a03c:	68fb      	ldr	r3, [r7, #12]
    a03e:	2b00      	cmp	r3, #0
    a040:	d001      	beq.n	a046 <_spi_m_async_enable_tx+0x22>
    a042:	2301      	movs	r3, #1
    a044:	e000      	b.n	a048 <_spi_m_async_enable_tx+0x24>
    a046:	2300      	movs	r3, #0
    a048:	f003 0301 	and.w	r3, r3, #1
    a04c:	b2db      	uxtb	r3, r3
    a04e:	f640 327c 	movw	r2, #2940	; 0xb7c
    a052:	4909      	ldr	r1, [pc, #36]	; (a078 <_spi_m_async_enable_tx+0x54>)
    a054:	4618      	mov	r0, r3
    a056:	4b09      	ldr	r3, [pc, #36]	; (a07c <_spi_m_async_enable_tx+0x58>)
    a058:	4798      	blx	r3

	if (state) {
    a05a:	78fb      	ldrb	r3, [r7, #3]
    a05c:	2b00      	cmp	r3, #0
    a05e:	d003      	beq.n	a068 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    a060:	68f8      	ldr	r0, [r7, #12]
    a062:	4b07      	ldr	r3, [pc, #28]	; (a080 <_spi_m_async_enable_tx+0x5c>)
    a064:	4798      	blx	r3
    a066:	e002      	b.n	a06e <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    a068:	68f8      	ldr	r0, [r7, #12]
    a06a:	4b06      	ldr	r3, [pc, #24]	; (a084 <_spi_m_async_enable_tx+0x60>)
    a06c:	4798      	blx	r3
	}

	return ERR_NONE;
    a06e:	2300      	movs	r3, #0
}
    a070:	4618      	mov	r0, r3
    a072:	3710      	adds	r7, #16
    a074:	46bd      	mov	sp, r7
    a076:	bd80      	pop	{r7, pc}
    a078:	00012b88 	.word	0x00012b88
    a07c:	00005ed5 	.word	0x00005ed5
    a080:	0000866f 	.word	0x0000866f
    a084:	00008689 	.word	0x00008689

0000a088 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    a088:	b580      	push	{r7, lr}
    a08a:	b084      	sub	sp, #16
    a08c:	af00      	add	r7, sp, #0
    a08e:	6078      	str	r0, [r7, #4]
    a090:	460b      	mov	r3, r1
    a092:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    a094:	687b      	ldr	r3, [r7, #4]
    a096:	681b      	ldr	r3, [r3, #0]
    a098:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    a09a:	687b      	ldr	r3, [r7, #4]
    a09c:	2b00      	cmp	r3, #0
    a09e:	bf14      	ite	ne
    a0a0:	2301      	movne	r3, #1
    a0a2:	2300      	moveq	r3, #0
    a0a4:	b2db      	uxtb	r3, r3
    a0a6:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    a0aa:	490f      	ldr	r1, [pc, #60]	; (a0e8 <_spi_m_async_enable_rx+0x60>)
    a0ac:	4618      	mov	r0, r3
    a0ae:	4b0f      	ldr	r3, [pc, #60]	; (a0ec <_spi_m_async_enable_rx+0x64>)
    a0b0:	4798      	blx	r3
	ASSERT(hw);
    a0b2:	68fb      	ldr	r3, [r7, #12]
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	bf14      	ite	ne
    a0b8:	2301      	movne	r3, #1
    a0ba:	2300      	moveq	r3, #0
    a0bc:	b2db      	uxtb	r3, r3
    a0be:	f640 3291 	movw	r2, #2961	; 0xb91
    a0c2:	4909      	ldr	r1, [pc, #36]	; (a0e8 <_spi_m_async_enable_rx+0x60>)
    a0c4:	4618      	mov	r0, r3
    a0c6:	4b09      	ldr	r3, [pc, #36]	; (a0ec <_spi_m_async_enable_rx+0x64>)
    a0c8:	4798      	blx	r3

	if (state) {
    a0ca:	78fb      	ldrb	r3, [r7, #3]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d003      	beq.n	a0d8 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    a0d0:	68f8      	ldr	r0, [r7, #12]
    a0d2:	4b07      	ldr	r3, [pc, #28]	; (a0f0 <_spi_m_async_enable_rx+0x68>)
    a0d4:	4798      	blx	r3
    a0d6:	e002      	b.n	a0de <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    a0d8:	68f8      	ldr	r0, [r7, #12]
    a0da:	4b06      	ldr	r3, [pc, #24]	; (a0f4 <_spi_m_async_enable_rx+0x6c>)
    a0dc:	4798      	blx	r3
	}

	return ERR_NONE;
    a0de:	2300      	movs	r3, #0
}
    a0e0:	4618      	mov	r0, r3
    a0e2:	3710      	adds	r7, #16
    a0e4:	46bd      	mov	sp, r7
    a0e6:	bd80      	pop	{r7, pc}
    a0e8:	00012b88 	.word	0x00012b88
    a0ec:	00005ed5 	.word	0x00005ed5
    a0f0:	000086d7 	.word	0x000086d7
    a0f4:	000086f1 	.word	0x000086f1

0000a0f8 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    a0f8:	b580      	push	{r7, lr}
    a0fa:	b082      	sub	sp, #8
    a0fc:	af00      	add	r7, sp, #0
    a0fe:	6078      	str	r0, [r7, #4]
    a100:	460b      	mov	r3, r1
    a102:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	2b00      	cmp	r3, #0
    a108:	d005      	beq.n	a116 <_spi_m_async_enable_tx_complete+0x1e>
    a10a:	687b      	ldr	r3, [r7, #4]
    a10c:	681b      	ldr	r3, [r3, #0]
    a10e:	2b00      	cmp	r3, #0
    a110:	d001      	beq.n	a116 <_spi_m_async_enable_tx_complete+0x1e>
    a112:	2301      	movs	r3, #1
    a114:	e000      	b.n	a118 <_spi_m_async_enable_tx_complete+0x20>
    a116:	2300      	movs	r3, #0
    a118:	f003 0301 	and.w	r3, r3, #1
    a11c:	b2db      	uxtb	r3, r3
    a11e:	f640 32a3 	movw	r2, #2979	; 0xba3
    a122:	490b      	ldr	r1, [pc, #44]	; (a150 <_spi_m_async_enable_tx_complete+0x58>)
    a124:	4618      	mov	r0, r3
    a126:	4b0b      	ldr	r3, [pc, #44]	; (a154 <_spi_m_async_enable_tx_complete+0x5c>)
    a128:	4798      	blx	r3

	if (state) {
    a12a:	78fb      	ldrb	r3, [r7, #3]
    a12c:	2b00      	cmp	r3, #0
    a12e:	d005      	beq.n	a13c <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    a130:	687b      	ldr	r3, [r7, #4]
    a132:	681b      	ldr	r3, [r3, #0]
    a134:	4618      	mov	r0, r3
    a136:	4b08      	ldr	r3, [pc, #32]	; (a158 <_spi_m_async_enable_tx_complete+0x60>)
    a138:	4798      	blx	r3
    a13a:	e004      	b.n	a146 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    a13c:	687b      	ldr	r3, [r7, #4]
    a13e:	681b      	ldr	r3, [r3, #0]
    a140:	4618      	mov	r0, r3
    a142:	4b06      	ldr	r3, [pc, #24]	; (a15c <_spi_m_async_enable_tx_complete+0x64>)
    a144:	4798      	blx	r3
	}

	return ERR_NONE;
    a146:	2300      	movs	r3, #0
}
    a148:	4618      	mov	r0, r3
    a14a:	3708      	adds	r7, #8
    a14c:	46bd      	mov	sp, r7
    a14e:	bd80      	pop	{r7, pc}
    a150:	00012b88 	.word	0x00012b88
    a154:	00005ed5 	.word	0x00005ed5
    a158:	000086a3 	.word	0x000086a3
    a15c:	000086bd 	.word	0x000086bd

0000a160 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    a160:	b580      	push	{r7, lr}
    a162:	b082      	sub	sp, #8
    a164:	af00      	add	r7, sp, #0
    a166:	6078      	str	r0, [r7, #4]
    a168:	460b      	mov	r3, r1
    a16a:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	2b00      	cmp	r3, #0
    a170:	d005      	beq.n	a17e <_spi_m_async_write_one+0x1e>
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	681b      	ldr	r3, [r3, #0]
    a176:	2b00      	cmp	r3, #0
    a178:	d001      	beq.n	a17e <_spi_m_async_write_one+0x1e>
    a17a:	2301      	movs	r3, #1
    a17c:	e000      	b.n	a180 <_spi_m_async_write_one+0x20>
    a17e:	2300      	movs	r3, #0
    a180:	f003 0301 	and.w	r3, r3, #1
    a184:	b2db      	uxtb	r3, r3
    a186:	f640 32b5 	movw	r2, #2997	; 0xbb5
    a18a:	4908      	ldr	r1, [pc, #32]	; (a1ac <_spi_m_async_write_one+0x4c>)
    a18c:	4618      	mov	r0, r3
    a18e:	4b08      	ldr	r3, [pc, #32]	; (a1b0 <_spi_m_async_write_one+0x50>)
    a190:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	681b      	ldr	r3, [r3, #0]
    a196:	887a      	ldrh	r2, [r7, #2]
    a198:	4611      	mov	r1, r2
    a19a:	4618      	mov	r0, r3
    a19c:	4b05      	ldr	r3, [pc, #20]	; (a1b4 <_spi_m_async_write_one+0x54>)
    a19e:	4798      	blx	r3

	return ERR_NONE;
    a1a0:	2300      	movs	r3, #0
}
    a1a2:	4618      	mov	r0, r3
    a1a4:	3708      	adds	r7, #8
    a1a6:	46bd      	mov	sp, r7
    a1a8:	bd80      	pop	{r7, pc}
    a1aa:	bf00      	nop
    a1ac:	00012b88 	.word	0x00012b88
    a1b0:	00005ed5 	.word	0x00005ed5
    a1b4:	00008ae5 	.word	0x00008ae5

0000a1b8 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    a1b8:	b580      	push	{r7, lr}
    a1ba:	b082      	sub	sp, #8
    a1bc:	af00      	add	r7, sp, #0
    a1be:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a1c0:	687b      	ldr	r3, [r7, #4]
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d005      	beq.n	a1d2 <_spi_m_async_read_one+0x1a>
    a1c6:	687b      	ldr	r3, [r7, #4]
    a1c8:	681b      	ldr	r3, [r3, #0]
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d001      	beq.n	a1d2 <_spi_m_async_read_one+0x1a>
    a1ce:	2301      	movs	r3, #1
    a1d0:	e000      	b.n	a1d4 <_spi_m_async_read_one+0x1c>
    a1d2:	2300      	movs	r3, #0
    a1d4:	f003 0301 	and.w	r3, r3, #1
    a1d8:	b2db      	uxtb	r3, r3
    a1da:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    a1de:	4907      	ldr	r1, [pc, #28]	; (a1fc <_spi_m_async_read_one+0x44>)
    a1e0:	4618      	mov	r0, r3
    a1e2:	4b07      	ldr	r3, [pc, #28]	; (a200 <_spi_m_async_read_one+0x48>)
    a1e4:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    a1e6:	687b      	ldr	r3, [r7, #4]
    a1e8:	681b      	ldr	r3, [r3, #0]
    a1ea:	4618      	mov	r0, r3
    a1ec:	4b05      	ldr	r3, [pc, #20]	; (a204 <_spi_m_async_read_one+0x4c>)
    a1ee:	4798      	blx	r3
    a1f0:	4603      	mov	r3, r0
    a1f2:	b29b      	uxth	r3, r3
}
    a1f4:	4618      	mov	r0, r3
    a1f6:	3708      	adds	r7, #8
    a1f8:	46bd      	mov	sp, r7
    a1fa:	bd80      	pop	{r7, pc}
    a1fc:	00012b88 	.word	0x00012b88
    a200:	00005ed5 	.word	0x00005ed5
    a204:	00008b01 	.word	0x00008b01

0000a208 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    a208:	b580      	push	{r7, lr}
    a20a:	b086      	sub	sp, #24
    a20c:	af00      	add	r7, sp, #0
    a20e:	60f8      	str	r0, [r7, #12]
    a210:	460b      	mov	r3, r1
    a212:	607a      	str	r2, [r7, #4]
    a214:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    a216:	68fb      	ldr	r3, [r7, #12]
    a218:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    a21a:	68fb      	ldr	r3, [r7, #12]
    a21c:	2b00      	cmp	r3, #0
    a21e:	d004      	beq.n	a22a <_spi_m_async_register_callback+0x22>
    a220:	7afb      	ldrb	r3, [r7, #11]
    a222:	2b03      	cmp	r3, #3
    a224:	d801      	bhi.n	a22a <_spi_m_async_register_callback+0x22>
    a226:	2301      	movs	r3, #1
    a228:	e000      	b.n	a22c <_spi_m_async_register_callback+0x24>
    a22a:	2300      	movs	r3, #0
    a22c:	f003 0301 	and.w	r3, r3, #1
    a230:	b2db      	uxtb	r3, r3
    a232:	f640 32e9 	movw	r2, #3049	; 0xbe9
    a236:	4909      	ldr	r1, [pc, #36]	; (a25c <_spi_m_async_register_callback+0x54>)
    a238:	4618      	mov	r0, r3
    a23a:	4b09      	ldr	r3, [pc, #36]	; (a260 <_spi_m_async_register_callback+0x58>)
    a23c:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    a23e:	697b      	ldr	r3, [r7, #20]
    a240:	3308      	adds	r3, #8
    a242:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    a244:	7afb      	ldrb	r3, [r7, #11]
    a246:	009b      	lsls	r3, r3, #2
    a248:	693a      	ldr	r2, [r7, #16]
    a24a:	4413      	add	r3, r2
    a24c:	687a      	ldr	r2, [r7, #4]
    a24e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    a250:	2300      	movs	r3, #0
}
    a252:	4618      	mov	r0, r3
    a254:	3718      	adds	r7, #24
    a256:	46bd      	mov	sp, r7
    a258:	bd80      	pop	{r7, pc}
    a25a:	bf00      	nop
    a25c:	00012b88 	.word	0x00012b88
    a260:	00005ed5 	.word	0x00005ed5

0000a264 <__NVIC_EnableIRQ>:
{
    a264:	b480      	push	{r7}
    a266:	b083      	sub	sp, #12
    a268:	af00      	add	r7, sp, #0
    a26a:	4603      	mov	r3, r0
    a26c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a26e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a272:	2b00      	cmp	r3, #0
    a274:	db0b      	blt.n	a28e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a276:	4909      	ldr	r1, [pc, #36]	; (a29c <__NVIC_EnableIRQ+0x38>)
    a278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a27c:	095b      	lsrs	r3, r3, #5
    a27e:	88fa      	ldrh	r2, [r7, #6]
    a280:	f002 021f 	and.w	r2, r2, #31
    a284:	2001      	movs	r0, #1
    a286:	fa00 f202 	lsl.w	r2, r0, r2
    a28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a28e:	bf00      	nop
    a290:	370c      	adds	r7, #12
    a292:	46bd      	mov	sp, r7
    a294:	f85d 7b04 	ldr.w	r7, [sp], #4
    a298:	4770      	bx	lr
    a29a:	bf00      	nop
    a29c:	e000e100 	.word	0xe000e100

0000a2a0 <__NVIC_DisableIRQ>:
{
    a2a0:	b480      	push	{r7}
    a2a2:	b083      	sub	sp, #12
    a2a4:	af00      	add	r7, sp, #0
    a2a6:	4603      	mov	r3, r0
    a2a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a2aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	db10      	blt.n	a2d4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a2b2:	490b      	ldr	r1, [pc, #44]	; (a2e0 <__NVIC_DisableIRQ+0x40>)
    a2b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a2b8:	095b      	lsrs	r3, r3, #5
    a2ba:	88fa      	ldrh	r2, [r7, #6]
    a2bc:	f002 021f 	and.w	r2, r2, #31
    a2c0:	2001      	movs	r0, #1
    a2c2:	fa00 f202 	lsl.w	r2, r0, r2
    a2c6:	3320      	adds	r3, #32
    a2c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a2cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a2d0:	f3bf 8f6f 	isb	sy
}
    a2d4:	bf00      	nop
    a2d6:	370c      	adds	r7, #12
    a2d8:	46bd      	mov	sp, r7
    a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2de:	4770      	bx	lr
    a2e0:	e000e100 	.word	0xe000e100

0000a2e4 <__NVIC_ClearPendingIRQ>:
{
    a2e4:	b480      	push	{r7}
    a2e6:	b083      	sub	sp, #12
    a2e8:	af00      	add	r7, sp, #0
    a2ea:	4603      	mov	r3, r0
    a2ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a2ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	db0c      	blt.n	a310 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a2f6:	4909      	ldr	r1, [pc, #36]	; (a31c <__NVIC_ClearPendingIRQ+0x38>)
    a2f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a2fc:	095b      	lsrs	r3, r3, #5
    a2fe:	88fa      	ldrh	r2, [r7, #6]
    a300:	f002 021f 	and.w	r2, r2, #31
    a304:	2001      	movs	r0, #1
    a306:	fa00 f202 	lsl.w	r2, r0, r2
    a30a:	3360      	adds	r3, #96	; 0x60
    a30c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a310:	bf00      	nop
    a312:	370c      	adds	r7, #12
    a314:	46bd      	mov	sp, r7
    a316:	f85d 7b04 	ldr.w	r7, [sp], #4
    a31a:	4770      	bx	lr
    a31c:	e000e100 	.word	0xe000e100

0000a320 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    a320:	b480      	push	{r7}
    a322:	b083      	sub	sp, #12
    a324:	af00      	add	r7, sp, #0
    a326:	6078      	str	r0, [r7, #4]
    a328:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    a32a:	bf00      	nop
    a32c:	687b      	ldr	r3, [r7, #4]
    a32e:	691a      	ldr	r2, [r3, #16]
    a330:	683b      	ldr	r3, [r7, #0]
    a332:	4013      	ands	r3, r2
    a334:	2b00      	cmp	r3, #0
    a336:	d1f9      	bne.n	a32c <hri_tc_wait_for_sync+0xc>
	};
}
    a338:	bf00      	nop
    a33a:	370c      	adds	r7, #12
    a33c:	46bd      	mov	sp, r7
    a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a342:	4770      	bx	lr

0000a344 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    a344:	b480      	push	{r7}
    a346:	b083      	sub	sp, #12
    a348:	af00      	add	r7, sp, #0
    a34a:	6078      	str	r0, [r7, #4]
    a34c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    a34e:	687b      	ldr	r3, [r7, #4]
    a350:	691a      	ldr	r2, [r3, #16]
    a352:	683b      	ldr	r3, [r7, #0]
    a354:	4013      	ands	r3, r2
    a356:	2b00      	cmp	r3, #0
    a358:	bf14      	ite	ne
    a35a:	2301      	movne	r3, #1
    a35c:	2300      	moveq	r3, #0
    a35e:	b2db      	uxtb	r3, r3
}
    a360:	4618      	mov	r0, r3
    a362:	370c      	adds	r7, #12
    a364:	46bd      	mov	sp, r7
    a366:	f85d 7b04 	ldr.w	r7, [sp], #4
    a36a:	4770      	bx	lr

0000a36c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    a36c:	b480      	push	{r7}
    a36e:	b083      	sub	sp, #12
    a370:	af00      	add	r7, sp, #0
    a372:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    a374:	687b      	ldr	r3, [r7, #4]
    a376:	7a9b      	ldrb	r3, [r3, #10]
    a378:	b2db      	uxtb	r3, r3
    a37a:	f003 0301 	and.w	r3, r3, #1
    a37e:	2b00      	cmp	r3, #0
    a380:	bf14      	ite	ne
    a382:	2301      	movne	r3, #1
    a384:	2300      	moveq	r3, #0
    a386:	b2db      	uxtb	r3, r3
}
    a388:	4618      	mov	r0, r3
    a38a:	370c      	adds	r7, #12
    a38c:	46bd      	mov	sp, r7
    a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a392:	4770      	bx	lr

0000a394 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    a394:	b480      	push	{r7}
    a396:	b083      	sub	sp, #12
    a398:	af00      	add	r7, sp, #0
    a39a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	2201      	movs	r2, #1
    a3a0:	729a      	strb	r2, [r3, #10]
}
    a3a2:	bf00      	nop
    a3a4:	370c      	adds	r7, #12
    a3a6:	46bd      	mov	sp, r7
    a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ac:	4770      	bx	lr

0000a3ae <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    a3ae:	b480      	push	{r7}
    a3b0:	b083      	sub	sp, #12
    a3b2:	af00      	add	r7, sp, #0
    a3b4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    a3b6:	687b      	ldr	r3, [r7, #4]
    a3b8:	2202      	movs	r2, #2
    a3ba:	729a      	strb	r2, [r3, #10]
}
    a3bc:	bf00      	nop
    a3be:	370c      	adds	r7, #12
    a3c0:	46bd      	mov	sp, r7
    a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3c6:	4770      	bx	lr

0000a3c8 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    a3c8:	b480      	push	{r7}
    a3ca:	b083      	sub	sp, #12
    a3cc:	af00      	add	r7, sp, #0
    a3ce:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    a3d0:	687b      	ldr	r3, [r7, #4]
    a3d2:	2201      	movs	r2, #1
    a3d4:	725a      	strb	r2, [r3, #9]
}
    a3d6:	bf00      	nop
    a3d8:	370c      	adds	r7, #12
    a3da:	46bd      	mov	sp, r7
    a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3e0:	4770      	bx	lr

0000a3e2 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    a3e2:	b480      	push	{r7}
    a3e4:	b083      	sub	sp, #12
    a3e6:	af00      	add	r7, sp, #0
    a3e8:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    a3ea:	687b      	ldr	r3, [r7, #4]
    a3ec:	7a5b      	ldrb	r3, [r3, #9]
    a3ee:	b2db      	uxtb	r3, r3
    a3f0:	085b      	lsrs	r3, r3, #1
    a3f2:	f003 0301 	and.w	r3, r3, #1
    a3f6:	2b00      	cmp	r3, #0
    a3f8:	bf14      	ite	ne
    a3fa:	2301      	movne	r3, #1
    a3fc:	2300      	moveq	r3, #0
    a3fe:	b2db      	uxtb	r3, r3
}
    a400:	4618      	mov	r0, r3
    a402:	370c      	adds	r7, #12
    a404:	46bd      	mov	sp, r7
    a406:	f85d 7b04 	ldr.w	r7, [sp], #4
    a40a:	4770      	bx	lr

0000a40c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a40c:	b580      	push	{r7, lr}
    a40e:	b082      	sub	sp, #8
    a410:	af00      	add	r7, sp, #0
    a412:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    a414:	687b      	ldr	r3, [r7, #4]
    a416:	681b      	ldr	r3, [r3, #0]
    a418:	f043 0202 	orr.w	r2, r3, #2
    a41c:	687b      	ldr	r3, [r7, #4]
    a41e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a420:	2103      	movs	r1, #3
    a422:	6878      	ldr	r0, [r7, #4]
    a424:	4b02      	ldr	r3, [pc, #8]	; (a430 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    a426:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a428:	bf00      	nop
    a42a:	3708      	adds	r7, #8
    a42c:	46bd      	mov	sp, r7
    a42e:	bd80      	pop	{r7, pc}
    a430:	0000a321 	.word	0x0000a321

0000a434 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a434:	b580      	push	{r7, lr}
    a436:	b084      	sub	sp, #16
    a438:	af00      	add	r7, sp, #0
    a43a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a43c:	2103      	movs	r1, #3
    a43e:	6878      	ldr	r0, [r7, #4]
    a440:	4b09      	ldr	r3, [pc, #36]	; (a468 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    a442:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    a444:	687b      	ldr	r3, [r7, #4]
    a446:	681b      	ldr	r3, [r3, #0]
    a448:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    a44a:	68fb      	ldr	r3, [r7, #12]
    a44c:	085b      	lsrs	r3, r3, #1
    a44e:	f003 0301 	and.w	r3, r3, #1
    a452:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    a454:	68fb      	ldr	r3, [r7, #12]
    a456:	2b00      	cmp	r3, #0
    a458:	bf14      	ite	ne
    a45a:	2301      	movne	r3, #1
    a45c:	2300      	moveq	r3, #0
    a45e:	b2db      	uxtb	r3, r3
}
    a460:	4618      	mov	r0, r3
    a462:	3710      	adds	r7, #16
    a464:	46bd      	mov	sp, r7
    a466:	bd80      	pop	{r7, pc}
    a468:	0000a321 	.word	0x0000a321

0000a46c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a46c:	b580      	push	{r7, lr}
    a46e:	b082      	sub	sp, #8
    a470:	af00      	add	r7, sp, #0
    a472:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    a474:	687b      	ldr	r3, [r7, #4]
    a476:	681b      	ldr	r3, [r3, #0]
    a478:	f023 0202 	bic.w	r2, r3, #2
    a47c:	687b      	ldr	r3, [r7, #4]
    a47e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a480:	2103      	movs	r1, #3
    a482:	6878      	ldr	r0, [r7, #4]
    a484:	4b02      	ldr	r3, [pc, #8]	; (a490 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    a486:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a488:	bf00      	nop
    a48a:	3708      	adds	r7, #8
    a48c:	46bd      	mov	sp, r7
    a48e:	bd80      	pop	{r7, pc}
    a490:	0000a321 	.word	0x0000a321

0000a494 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    a494:	b580      	push	{r7, lr}
    a496:	b084      	sub	sp, #16
    a498:	af00      	add	r7, sp, #0
    a49a:	6078      	str	r0, [r7, #4]
    a49c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a49e:	2103      	movs	r1, #3
    a4a0:	6878      	ldr	r0, [r7, #4]
    a4a2:	4b07      	ldr	r3, [pc, #28]	; (a4c0 <hri_tc_get_CTRLA_reg+0x2c>)
    a4a4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    a4a6:	687b      	ldr	r3, [r7, #4]
    a4a8:	681b      	ldr	r3, [r3, #0]
    a4aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a4ac:	68fa      	ldr	r2, [r7, #12]
    a4ae:	683b      	ldr	r3, [r7, #0]
    a4b0:	4013      	ands	r3, r2
    a4b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    a4b4:	68fb      	ldr	r3, [r7, #12]
}
    a4b6:	4618      	mov	r0, r3
    a4b8:	3710      	adds	r7, #16
    a4ba:	46bd      	mov	sp, r7
    a4bc:	bd80      	pop	{r7, pc}
    a4be:	bf00      	nop
    a4c0:	0000a321 	.word	0x0000a321

0000a4c4 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    a4c4:	b580      	push	{r7, lr}
    a4c6:	b082      	sub	sp, #8
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	6078      	str	r0, [r7, #4]
    a4cc:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    a4ce:	687b      	ldr	r3, [r7, #4]
    a4d0:	683a      	ldr	r2, [r7, #0]
    a4d2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a4d4:	2103      	movs	r1, #3
    a4d6:	6878      	ldr	r0, [r7, #4]
    a4d8:	4b02      	ldr	r3, [pc, #8]	; (a4e4 <hri_tc_write_CTRLA_reg+0x20>)
    a4da:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a4dc:	bf00      	nop
    a4de:	3708      	adds	r7, #8
    a4e0:	46bd      	mov	sp, r7
    a4e2:	bd80      	pop	{r7, pc}
    a4e4:	0000a321 	.word	0x0000a321

0000a4e8 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    a4e8:	b480      	push	{r7}
    a4ea:	b083      	sub	sp, #12
    a4ec:	af00      	add	r7, sp, #0
    a4ee:	6078      	str	r0, [r7, #4]
    a4f0:	460b      	mov	r3, r1
    a4f2:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    a4f4:	687b      	ldr	r3, [r7, #4]
    a4f6:	887a      	ldrh	r2, [r7, #2]
    a4f8:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    a4fa:	bf00      	nop
    a4fc:	370c      	adds	r7, #12
    a4fe:	46bd      	mov	sp, r7
    a500:	f85d 7b04 	ldr.w	r7, [sp], #4
    a504:	4770      	bx	lr

0000a506 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    a506:	b480      	push	{r7}
    a508:	b083      	sub	sp, #12
    a50a:	af00      	add	r7, sp, #0
    a50c:	6078      	str	r0, [r7, #4]
    a50e:	460b      	mov	r3, r1
    a510:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    a512:	687b      	ldr	r3, [r7, #4]
    a514:	78fa      	ldrb	r2, [r7, #3]
    a516:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    a518:	bf00      	nop
    a51a:	370c      	adds	r7, #12
    a51c:	46bd      	mov	sp, r7
    a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a522:	4770      	bx	lr

0000a524 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    a524:	b480      	push	{r7}
    a526:	b083      	sub	sp, #12
    a528:	af00      	add	r7, sp, #0
    a52a:	6078      	str	r0, [r7, #4]
    a52c:	460b      	mov	r3, r1
    a52e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    a530:	687b      	ldr	r3, [r7, #4]
    a532:	78fa      	ldrb	r2, [r7, #3]
    a534:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    a536:	bf00      	nop
    a538:	370c      	adds	r7, #12
    a53a:	46bd      	mov	sp, r7
    a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a540:	4770      	bx	lr
	...

0000a544 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    a544:	b580      	push	{r7, lr}
    a546:	b082      	sub	sp, #8
    a548:	af00      	add	r7, sp, #0
    a54a:	6078      	str	r0, [r7, #4]
    a54c:	460b      	mov	r3, r1
    a54e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    a550:	687b      	ldr	r3, [r7, #4]
    a552:	78fa      	ldrb	r2, [r7, #3]
    a554:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    a556:	2120      	movs	r1, #32
    a558:	6878      	ldr	r0, [r7, #4]
    a55a:	4b03      	ldr	r3, [pc, #12]	; (a568 <hri_tccount8_write_PER_reg+0x24>)
    a55c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a55e:	bf00      	nop
    a560:	3708      	adds	r7, #8
    a562:	46bd      	mov	sp, r7
    a564:	bd80      	pop	{r7, pc}
    a566:	bf00      	nop
    a568:	0000a321 	.word	0x0000a321

0000a56c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    a56c:	b580      	push	{r7, lr}
    a56e:	b082      	sub	sp, #8
    a570:	af00      	add	r7, sp, #0
    a572:	6078      	str	r0, [r7, #4]
    a574:	460b      	mov	r3, r1
    a576:	70fb      	strb	r3, [r7, #3]
    a578:	4613      	mov	r3, r2
    a57a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    a57c:	78fb      	ldrb	r3, [r7, #3]
    a57e:	687a      	ldr	r2, [r7, #4]
    a580:	4413      	add	r3, r2
    a582:	78ba      	ldrb	r2, [r7, #2]
    a584:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    a586:	21c0      	movs	r1, #192	; 0xc0
    a588:	6878      	ldr	r0, [r7, #4]
    a58a:	4b03      	ldr	r3, [pc, #12]	; (a598 <hri_tccount8_write_CC_reg+0x2c>)
    a58c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a58e:	bf00      	nop
    a590:	3708      	adds	r7, #8
    a592:	46bd      	mov	sp, r7
    a594:	bd80      	pop	{r7, pc}
    a596:	bf00      	nop
    a598:	0000a321 	.word	0x0000a321

0000a59c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    a59c:	b580      	push	{r7, lr}
    a59e:	b082      	sub	sp, #8
    a5a0:	af00      	add	r7, sp, #0
    a5a2:	6078      	str	r0, [r7, #4]
    a5a4:	460b      	mov	r3, r1
    a5a6:	70fb      	strb	r3, [r7, #3]
    a5a8:	4613      	mov	r3, r2
    a5aa:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    a5ac:	78fb      	ldrb	r3, [r7, #3]
    a5ae:	687a      	ldr	r2, [r7, #4]
    a5b0:	330c      	adds	r3, #12
    a5b2:	005b      	lsls	r3, r3, #1
    a5b4:	4413      	add	r3, r2
    a5b6:	883a      	ldrh	r2, [r7, #0]
    a5b8:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    a5ba:	21c0      	movs	r1, #192	; 0xc0
    a5bc:	6878      	ldr	r0, [r7, #4]
    a5be:	4b03      	ldr	r3, [pc, #12]	; (a5cc <hri_tccount16_write_CC_reg+0x30>)
    a5c0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a5c2:	bf00      	nop
    a5c4:	3708      	adds	r7, #8
    a5c6:	46bd      	mov	sp, r7
    a5c8:	bd80      	pop	{r7, pc}
    a5ca:	bf00      	nop
    a5cc:	0000a321 	.word	0x0000a321

0000a5d0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    a5d0:	b580      	push	{r7, lr}
    a5d2:	b084      	sub	sp, #16
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	60f8      	str	r0, [r7, #12]
    a5d8:	460b      	mov	r3, r1
    a5da:	607a      	str	r2, [r7, #4]
    a5dc:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    a5de:	7afb      	ldrb	r3, [r7, #11]
    a5e0:	68fa      	ldr	r2, [r7, #12]
    a5e2:	3306      	adds	r3, #6
    a5e4:	009b      	lsls	r3, r3, #2
    a5e6:	4413      	add	r3, r2
    a5e8:	687a      	ldr	r2, [r7, #4]
    a5ea:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    a5ec:	21c0      	movs	r1, #192	; 0xc0
    a5ee:	68f8      	ldr	r0, [r7, #12]
    a5f0:	4b02      	ldr	r3, [pc, #8]	; (a5fc <hri_tccount32_write_CC_reg+0x2c>)
    a5f2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a5f4:	bf00      	nop
    a5f6:	3710      	adds	r7, #16
    a5f8:	46bd      	mov	sp, r7
    a5fa:	bd80      	pop	{r7, pc}
    a5fc:	0000a321 	.word	0x0000a321

0000a600 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    a600:	b580      	push	{r7, lr}
    a602:	b084      	sub	sp, #16
    a604:	af00      	add	r7, sp, #0
    a606:	6078      	str	r0, [r7, #4]
    a608:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    a60a:	6838      	ldr	r0, [r7, #0]
    a60c:	4b93      	ldr	r3, [pc, #588]	; (a85c <_timer_init+0x25c>)
    a60e:	4798      	blx	r3
    a610:	4603      	mov	r3, r0
    a612:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    a614:	687b      	ldr	r3, [r7, #4]
    a616:	683a      	ldr	r2, [r7, #0]
    a618:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    a61a:	2299      	movs	r2, #153	; 0x99
    a61c:	4990      	ldr	r1, [pc, #576]	; (a860 <_timer_init+0x260>)
    a61e:	2001      	movs	r0, #1
    a620:	4b90      	ldr	r3, [pc, #576]	; (a864 <_timer_init+0x264>)
    a622:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    a624:	2101      	movs	r1, #1
    a626:	6838      	ldr	r0, [r7, #0]
    a628:	4b8f      	ldr	r3, [pc, #572]	; (a868 <_timer_init+0x268>)
    a62a:	4798      	blx	r3
    a62c:	4603      	mov	r3, r0
    a62e:	f083 0301 	eor.w	r3, r3, #1
    a632:	b2db      	uxtb	r3, r3
    a634:	2b00      	cmp	r3, #0
    a636:	d011      	beq.n	a65c <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    a638:	2102      	movs	r1, #2
    a63a:	6838      	ldr	r0, [r7, #0]
    a63c:	4b8b      	ldr	r3, [pc, #556]	; (a86c <_timer_init+0x26c>)
    a63e:	4798      	blx	r3
    a640:	4603      	mov	r3, r0
    a642:	2b00      	cmp	r3, #0
    a644:	d006      	beq.n	a654 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    a646:	6838      	ldr	r0, [r7, #0]
    a648:	4b89      	ldr	r3, [pc, #548]	; (a870 <_timer_init+0x270>)
    a64a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    a64c:	2102      	movs	r1, #2
    a64e:	6838      	ldr	r0, [r7, #0]
    a650:	4b88      	ldr	r3, [pc, #544]	; (a874 <_timer_init+0x274>)
    a652:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    a654:	2101      	movs	r1, #1
    a656:	6838      	ldr	r0, [r7, #0]
    a658:	4b87      	ldr	r3, [pc, #540]	; (a878 <_timer_init+0x278>)
    a65a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    a65c:	2101      	movs	r1, #1
    a65e:	6838      	ldr	r0, [r7, #0]
    a660:	4b84      	ldr	r3, [pc, #528]	; (a874 <_timer_init+0x274>)
    a662:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    a664:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a668:	4984      	ldr	r1, [pc, #528]	; (a87c <_timer_init+0x27c>)
    a66a:	4613      	mov	r3, r2
    a66c:	009b      	lsls	r3, r3, #2
    a66e:	4413      	add	r3, r2
    a670:	009b      	lsls	r3, r3, #2
    a672:	440b      	add	r3, r1
    a674:	3304      	adds	r3, #4
    a676:	681b      	ldr	r3, [r3, #0]
    a678:	4619      	mov	r1, r3
    a67a:	6838      	ldr	r0, [r7, #0]
    a67c:	4b7e      	ldr	r3, [pc, #504]	; (a878 <_timer_init+0x278>)
    a67e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    a680:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a684:	497d      	ldr	r1, [pc, #500]	; (a87c <_timer_init+0x27c>)
    a686:	4613      	mov	r3, r2
    a688:	009b      	lsls	r3, r3, #2
    a68a:	4413      	add	r3, r2
    a68c:	009b      	lsls	r3, r3, #2
    a68e:	440b      	add	r3, r1
    a690:	330a      	adds	r3, #10
    a692:	781b      	ldrb	r3, [r3, #0]
    a694:	4619      	mov	r1, r3
    a696:	6838      	ldr	r0, [r7, #0]
    a698:	4b79      	ldr	r3, [pc, #484]	; (a880 <_timer_init+0x280>)
    a69a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    a69c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a6a0:	4976      	ldr	r1, [pc, #472]	; (a87c <_timer_init+0x27c>)
    a6a2:	4613      	mov	r3, r2
    a6a4:	009b      	lsls	r3, r3, #2
    a6a6:	4413      	add	r3, r2
    a6a8:	009b      	lsls	r3, r3, #2
    a6aa:	440b      	add	r3, r1
    a6ac:	3308      	adds	r3, #8
    a6ae:	881b      	ldrh	r3, [r3, #0]
    a6b0:	4619      	mov	r1, r3
    a6b2:	6838      	ldr	r0, [r7, #0]
    a6b4:	4b73      	ldr	r3, [pc, #460]	; (a884 <_timer_init+0x284>)
    a6b6:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    a6b8:	2101      	movs	r1, #1
    a6ba:	6838      	ldr	r0, [r7, #0]
    a6bc:	4b72      	ldr	r3, [pc, #456]	; (a888 <_timer_init+0x288>)
    a6be:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    a6c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a6c4:	496d      	ldr	r1, [pc, #436]	; (a87c <_timer_init+0x27c>)
    a6c6:	4613      	mov	r3, r2
    a6c8:	009b      	lsls	r3, r3, #2
    a6ca:	4413      	add	r3, r2
    a6cc:	009b      	lsls	r3, r3, #2
    a6ce:	440b      	add	r3, r1
    a6d0:	3304      	adds	r3, #4
    a6d2:	681b      	ldr	r3, [r3, #0]
    a6d4:	f003 030c 	and.w	r3, r3, #12
    a6d8:	2b08      	cmp	r3, #8
    a6da:	d11e      	bne.n	a71a <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    a6dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a6e0:	4966      	ldr	r1, [pc, #408]	; (a87c <_timer_init+0x27c>)
    a6e2:	4613      	mov	r3, r2
    a6e4:	009b      	lsls	r3, r3, #2
    a6e6:	4413      	add	r3, r2
    a6e8:	009b      	lsls	r3, r3, #2
    a6ea:	440b      	add	r3, r1
    a6ec:	330c      	adds	r3, #12
    a6ee:	681b      	ldr	r3, [r3, #0]
    a6f0:	461a      	mov	r2, r3
    a6f2:	2100      	movs	r1, #0
    a6f4:	6838      	ldr	r0, [r7, #0]
    a6f6:	4b65      	ldr	r3, [pc, #404]	; (a88c <_timer_init+0x28c>)
    a6f8:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    a6fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a6fe:	495f      	ldr	r1, [pc, #380]	; (a87c <_timer_init+0x27c>)
    a700:	4613      	mov	r3, r2
    a702:	009b      	lsls	r3, r3, #2
    a704:	4413      	add	r3, r2
    a706:	009b      	lsls	r3, r3, #2
    a708:	440b      	add	r3, r1
    a70a:	3310      	adds	r3, #16
    a70c:	681b      	ldr	r3, [r3, #0]
    a70e:	461a      	mov	r2, r3
    a710:	2101      	movs	r1, #1
    a712:	6838      	ldr	r0, [r7, #0]
    a714:	4b5d      	ldr	r3, [pc, #372]	; (a88c <_timer_init+0x28c>)
    a716:	4798      	blx	r3
    a718:	e06a      	b.n	a7f0 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    a71a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a71e:	4957      	ldr	r1, [pc, #348]	; (a87c <_timer_init+0x27c>)
    a720:	4613      	mov	r3, r2
    a722:	009b      	lsls	r3, r3, #2
    a724:	4413      	add	r3, r2
    a726:	009b      	lsls	r3, r3, #2
    a728:	440b      	add	r3, r1
    a72a:	3304      	adds	r3, #4
    a72c:	681b      	ldr	r3, [r3, #0]
    a72e:	f003 030c 	and.w	r3, r3, #12
    a732:	2b00      	cmp	r3, #0
    a734:	d120      	bne.n	a778 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    a736:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a73a:	4950      	ldr	r1, [pc, #320]	; (a87c <_timer_init+0x27c>)
    a73c:	4613      	mov	r3, r2
    a73e:	009b      	lsls	r3, r3, #2
    a740:	4413      	add	r3, r2
    a742:	009b      	lsls	r3, r3, #2
    a744:	440b      	add	r3, r1
    a746:	330c      	adds	r3, #12
    a748:	681b      	ldr	r3, [r3, #0]
    a74a:	b29b      	uxth	r3, r3
    a74c:	461a      	mov	r2, r3
    a74e:	2100      	movs	r1, #0
    a750:	6838      	ldr	r0, [r7, #0]
    a752:	4b4f      	ldr	r3, [pc, #316]	; (a890 <_timer_init+0x290>)
    a754:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    a756:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a75a:	4948      	ldr	r1, [pc, #288]	; (a87c <_timer_init+0x27c>)
    a75c:	4613      	mov	r3, r2
    a75e:	009b      	lsls	r3, r3, #2
    a760:	4413      	add	r3, r2
    a762:	009b      	lsls	r3, r3, #2
    a764:	440b      	add	r3, r1
    a766:	3310      	adds	r3, #16
    a768:	681b      	ldr	r3, [r3, #0]
    a76a:	b29b      	uxth	r3, r3
    a76c:	461a      	mov	r2, r3
    a76e:	2101      	movs	r1, #1
    a770:	6838      	ldr	r0, [r7, #0]
    a772:	4b47      	ldr	r3, [pc, #284]	; (a890 <_timer_init+0x290>)
    a774:	4798      	blx	r3
    a776:	e03b      	b.n	a7f0 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    a778:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a77c:	493f      	ldr	r1, [pc, #252]	; (a87c <_timer_init+0x27c>)
    a77e:	4613      	mov	r3, r2
    a780:	009b      	lsls	r3, r3, #2
    a782:	4413      	add	r3, r2
    a784:	009b      	lsls	r3, r3, #2
    a786:	440b      	add	r3, r1
    a788:	3304      	adds	r3, #4
    a78a:	681b      	ldr	r3, [r3, #0]
    a78c:	f003 030c 	and.w	r3, r3, #12
    a790:	2b04      	cmp	r3, #4
    a792:	d12d      	bne.n	a7f0 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    a794:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a798:	4938      	ldr	r1, [pc, #224]	; (a87c <_timer_init+0x27c>)
    a79a:	4613      	mov	r3, r2
    a79c:	009b      	lsls	r3, r3, #2
    a79e:	4413      	add	r3, r2
    a7a0:	009b      	lsls	r3, r3, #2
    a7a2:	440b      	add	r3, r1
    a7a4:	330c      	adds	r3, #12
    a7a6:	681b      	ldr	r3, [r3, #0]
    a7a8:	b2db      	uxtb	r3, r3
    a7aa:	461a      	mov	r2, r3
    a7ac:	2100      	movs	r1, #0
    a7ae:	6838      	ldr	r0, [r7, #0]
    a7b0:	4b38      	ldr	r3, [pc, #224]	; (a894 <_timer_init+0x294>)
    a7b2:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    a7b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a7b8:	4930      	ldr	r1, [pc, #192]	; (a87c <_timer_init+0x27c>)
    a7ba:	4613      	mov	r3, r2
    a7bc:	009b      	lsls	r3, r3, #2
    a7be:	4413      	add	r3, r2
    a7c0:	009b      	lsls	r3, r3, #2
    a7c2:	440b      	add	r3, r1
    a7c4:	3310      	adds	r3, #16
    a7c6:	681b      	ldr	r3, [r3, #0]
    a7c8:	b2db      	uxtb	r3, r3
    a7ca:	461a      	mov	r2, r3
    a7cc:	2101      	movs	r1, #1
    a7ce:	6838      	ldr	r0, [r7, #0]
    a7d0:	4b30      	ldr	r3, [pc, #192]	; (a894 <_timer_init+0x294>)
    a7d2:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    a7d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a7d8:	4928      	ldr	r1, [pc, #160]	; (a87c <_timer_init+0x27c>)
    a7da:	4613      	mov	r3, r2
    a7dc:	009b      	lsls	r3, r3, #2
    a7de:	4413      	add	r3, r2
    a7e0:	009b      	lsls	r3, r3, #2
    a7e2:	440b      	add	r3, r1
    a7e4:	330b      	adds	r3, #11
    a7e6:	781b      	ldrb	r3, [r3, #0]
    a7e8:	4619      	mov	r1, r3
    a7ea:	6838      	ldr	r0, [r7, #0]
    a7ec:	4b2a      	ldr	r3, [pc, #168]	; (a898 <_timer_init+0x298>)
    a7ee:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    a7f0:	6838      	ldr	r0, [r7, #0]
    a7f2:	4b2a      	ldr	r3, [pc, #168]	; (a89c <_timer_init+0x29c>)
    a7f4:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    a7f6:	6879      	ldr	r1, [r7, #4]
    a7f8:	6838      	ldr	r0, [r7, #0]
    a7fa:	4b29      	ldr	r3, [pc, #164]	; (a8a0 <_timer_init+0x2a0>)
    a7fc:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    a7fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a802:	491e      	ldr	r1, [pc, #120]	; (a87c <_timer_init+0x27c>)
    a804:	4613      	mov	r3, r2
    a806:	009b      	lsls	r3, r3, #2
    a808:	4413      	add	r3, r2
    a80a:	009b      	lsls	r3, r3, #2
    a80c:	440b      	add	r3, r1
    a80e:	3302      	adds	r3, #2
    a810:	f9b3 3000 	ldrsh.w	r3, [r3]
    a814:	4618      	mov	r0, r3
    a816:	4b23      	ldr	r3, [pc, #140]	; (a8a4 <_timer_init+0x2a4>)
    a818:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    a81a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a81e:	4917      	ldr	r1, [pc, #92]	; (a87c <_timer_init+0x27c>)
    a820:	4613      	mov	r3, r2
    a822:	009b      	lsls	r3, r3, #2
    a824:	4413      	add	r3, r2
    a826:	009b      	lsls	r3, r3, #2
    a828:	440b      	add	r3, r1
    a82a:	3302      	adds	r3, #2
    a82c:	f9b3 3000 	ldrsh.w	r3, [r3]
    a830:	4618      	mov	r0, r3
    a832:	4b1d      	ldr	r3, [pc, #116]	; (a8a8 <_timer_init+0x2a8>)
    a834:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    a836:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a83a:	4910      	ldr	r1, [pc, #64]	; (a87c <_timer_init+0x27c>)
    a83c:	4613      	mov	r3, r2
    a83e:	009b      	lsls	r3, r3, #2
    a840:	4413      	add	r3, r2
    a842:	009b      	lsls	r3, r3, #2
    a844:	440b      	add	r3, r1
    a846:	3302      	adds	r3, #2
    a848:	f9b3 3000 	ldrsh.w	r3, [r3]
    a84c:	4618      	mov	r0, r3
    a84e:	4b17      	ldr	r3, [pc, #92]	; (a8ac <_timer_init+0x2ac>)
    a850:	4798      	blx	r3

	return ERR_NONE;
    a852:	2300      	movs	r3, #0
}
    a854:	4618      	mov	r0, r3
    a856:	3710      	adds	r7, #16
    a858:	46bd      	mov	sp, r7
    a85a:	bd80      	pop	{r7, pc}
    a85c:	0000ad55 	.word	0x0000ad55
    a860:	00012bf8 	.word	0x00012bf8
    a864:	00005ed5 	.word	0x00005ed5
    a868:	0000a345 	.word	0x0000a345
    a86c:	0000a495 	.word	0x0000a495
    a870:	0000a46d 	.word	0x0000a46d
    a874:	0000a321 	.word	0x0000a321
    a878:	0000a4c5 	.word	0x0000a4c5
    a87c:	20000060 	.word	0x20000060
    a880:	0000a525 	.word	0x0000a525
    a884:	0000a4e9 	.word	0x0000a4e9
    a888:	0000a507 	.word	0x0000a507
    a88c:	0000a5d1 	.word	0x0000a5d1
    a890:	0000a59d 	.word	0x0000a59d
    a894:	0000a56d 	.word	0x0000a56d
    a898:	0000a545 	.word	0x0000a545
    a89c:	0000a3c9 	.word	0x0000a3c9
    a8a0:	0000adbd 	.word	0x0000adbd
    a8a4:	0000a2a1 	.word	0x0000a2a1
    a8a8:	0000a2e5 	.word	0x0000a2e5
    a8ac:	0000a265 	.word	0x0000a265

0000a8b0 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    a8b0:	b580      	push	{r7, lr}
    a8b2:	b084      	sub	sp, #16
    a8b4:	af00      	add	r7, sp, #0
    a8b6:	6078      	str	r0, [r7, #4]
    a8b8:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    a8ba:	6838      	ldr	r0, [r7, #0]
    a8bc:	4b73      	ldr	r3, [pc, #460]	; (aa8c <_pwm_init+0x1dc>)
    a8be:	4798      	blx	r3
    a8c0:	4603      	mov	r3, r0
    a8c2:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	683a      	ldr	r2, [r7, #0]
    a8c8:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    a8ca:	2101      	movs	r1, #1
    a8cc:	6838      	ldr	r0, [r7, #0]
    a8ce:	4b70      	ldr	r3, [pc, #448]	; (aa90 <_pwm_init+0x1e0>)
    a8d0:	4798      	blx	r3
    a8d2:	4603      	mov	r3, r0
    a8d4:	f083 0301 	eor.w	r3, r3, #1
    a8d8:	b2db      	uxtb	r3, r3
    a8da:	2b00      	cmp	r3, #0
    a8dc:	d011      	beq.n	a902 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    a8de:	2102      	movs	r1, #2
    a8e0:	6838      	ldr	r0, [r7, #0]
    a8e2:	4b6c      	ldr	r3, [pc, #432]	; (aa94 <_pwm_init+0x1e4>)
    a8e4:	4798      	blx	r3
    a8e6:	4603      	mov	r3, r0
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d006      	beq.n	a8fa <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    a8ec:	6838      	ldr	r0, [r7, #0]
    a8ee:	4b6a      	ldr	r3, [pc, #424]	; (aa98 <_pwm_init+0x1e8>)
    a8f0:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    a8f2:	2102      	movs	r1, #2
    a8f4:	6838      	ldr	r0, [r7, #0]
    a8f6:	4b69      	ldr	r3, [pc, #420]	; (aa9c <_pwm_init+0x1ec>)
    a8f8:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    a8fa:	2101      	movs	r1, #1
    a8fc:	6838      	ldr	r0, [r7, #0]
    a8fe:	4b68      	ldr	r3, [pc, #416]	; (aaa0 <_pwm_init+0x1f0>)
    a900:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    a902:	2101      	movs	r1, #1
    a904:	6838      	ldr	r0, [r7, #0]
    a906:	4b65      	ldr	r3, [pc, #404]	; (aa9c <_pwm_init+0x1ec>)
    a908:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    a90a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a90e:	4965      	ldr	r1, [pc, #404]	; (aaa4 <_pwm_init+0x1f4>)
    a910:	4613      	mov	r3, r2
    a912:	009b      	lsls	r3, r3, #2
    a914:	4413      	add	r3, r2
    a916:	009b      	lsls	r3, r3, #2
    a918:	440b      	add	r3, r1
    a91a:	3304      	adds	r3, #4
    a91c:	681b      	ldr	r3, [r3, #0]
    a91e:	4619      	mov	r1, r3
    a920:	6838      	ldr	r0, [r7, #0]
    a922:	4b5f      	ldr	r3, [pc, #380]	; (aaa0 <_pwm_init+0x1f0>)
    a924:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    a926:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a92a:	495e      	ldr	r1, [pc, #376]	; (aaa4 <_pwm_init+0x1f4>)
    a92c:	4613      	mov	r3, r2
    a92e:	009b      	lsls	r3, r3, #2
    a930:	4413      	add	r3, r2
    a932:	009b      	lsls	r3, r3, #2
    a934:	440b      	add	r3, r1
    a936:	330a      	adds	r3, #10
    a938:	781b      	ldrb	r3, [r3, #0]
    a93a:	4619      	mov	r1, r3
    a93c:	6838      	ldr	r0, [r7, #0]
    a93e:	4b5a      	ldr	r3, [pc, #360]	; (aaa8 <_pwm_init+0x1f8>)
    a940:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    a942:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a946:	4957      	ldr	r1, [pc, #348]	; (aaa4 <_pwm_init+0x1f4>)
    a948:	4613      	mov	r3, r2
    a94a:	009b      	lsls	r3, r3, #2
    a94c:	4413      	add	r3, r2
    a94e:	009b      	lsls	r3, r3, #2
    a950:	440b      	add	r3, r1
    a952:	3308      	adds	r3, #8
    a954:	881b      	ldrh	r3, [r3, #0]
    a956:	4619      	mov	r1, r3
    a958:	6838      	ldr	r0, [r7, #0]
    a95a:	4b54      	ldr	r3, [pc, #336]	; (aaac <_pwm_init+0x1fc>)
    a95c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    a95e:	2103      	movs	r1, #3
    a960:	6838      	ldr	r0, [r7, #0]
    a962:	4b53      	ldr	r3, [pc, #332]	; (aab0 <_pwm_init+0x200>)
    a964:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    a966:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a96a:	494e      	ldr	r1, [pc, #312]	; (aaa4 <_pwm_init+0x1f4>)
    a96c:	4613      	mov	r3, r2
    a96e:	009b      	lsls	r3, r3, #2
    a970:	4413      	add	r3, r2
    a972:	009b      	lsls	r3, r3, #2
    a974:	440b      	add	r3, r1
    a976:	3304      	adds	r3, #4
    a978:	681b      	ldr	r3, [r3, #0]
    a97a:	f003 030c 	and.w	r3, r3, #12
    a97e:	2b08      	cmp	r3, #8
    a980:	d11e      	bne.n	a9c0 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    a982:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a986:	4947      	ldr	r1, [pc, #284]	; (aaa4 <_pwm_init+0x1f4>)
    a988:	4613      	mov	r3, r2
    a98a:	009b      	lsls	r3, r3, #2
    a98c:	4413      	add	r3, r2
    a98e:	009b      	lsls	r3, r3, #2
    a990:	440b      	add	r3, r1
    a992:	330c      	adds	r3, #12
    a994:	681b      	ldr	r3, [r3, #0]
    a996:	461a      	mov	r2, r3
    a998:	2100      	movs	r1, #0
    a99a:	6838      	ldr	r0, [r7, #0]
    a99c:	4b45      	ldr	r3, [pc, #276]	; (aab4 <_pwm_init+0x204>)
    a99e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    a9a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a9a4:	493f      	ldr	r1, [pc, #252]	; (aaa4 <_pwm_init+0x1f4>)
    a9a6:	4613      	mov	r3, r2
    a9a8:	009b      	lsls	r3, r3, #2
    a9aa:	4413      	add	r3, r2
    a9ac:	009b      	lsls	r3, r3, #2
    a9ae:	440b      	add	r3, r1
    a9b0:	3310      	adds	r3, #16
    a9b2:	681b      	ldr	r3, [r3, #0]
    a9b4:	461a      	mov	r2, r3
    a9b6:	2101      	movs	r1, #1
    a9b8:	6838      	ldr	r0, [r7, #0]
    a9ba:	4b3e      	ldr	r3, [pc, #248]	; (aab4 <_pwm_init+0x204>)
    a9bc:	4798      	blx	r3
    a9be:	e031      	b.n	aa24 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    a9c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a9c4:	4937      	ldr	r1, [pc, #220]	; (aaa4 <_pwm_init+0x1f4>)
    a9c6:	4613      	mov	r3, r2
    a9c8:	009b      	lsls	r3, r3, #2
    a9ca:	4413      	add	r3, r2
    a9cc:	009b      	lsls	r3, r3, #2
    a9ce:	440b      	add	r3, r1
    a9d0:	3304      	adds	r3, #4
    a9d2:	681b      	ldr	r3, [r3, #0]
    a9d4:	f003 030c 	and.w	r3, r3, #12
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d120      	bne.n	aa1e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    a9dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a9e0:	4930      	ldr	r1, [pc, #192]	; (aaa4 <_pwm_init+0x1f4>)
    a9e2:	4613      	mov	r3, r2
    a9e4:	009b      	lsls	r3, r3, #2
    a9e6:	4413      	add	r3, r2
    a9e8:	009b      	lsls	r3, r3, #2
    a9ea:	440b      	add	r3, r1
    a9ec:	330c      	adds	r3, #12
    a9ee:	681b      	ldr	r3, [r3, #0]
    a9f0:	b29b      	uxth	r3, r3
    a9f2:	461a      	mov	r2, r3
    a9f4:	2100      	movs	r1, #0
    a9f6:	6838      	ldr	r0, [r7, #0]
    a9f8:	4b2f      	ldr	r3, [pc, #188]	; (aab8 <_pwm_init+0x208>)
    a9fa:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    a9fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aa00:	4928      	ldr	r1, [pc, #160]	; (aaa4 <_pwm_init+0x1f4>)
    aa02:	4613      	mov	r3, r2
    aa04:	009b      	lsls	r3, r3, #2
    aa06:	4413      	add	r3, r2
    aa08:	009b      	lsls	r3, r3, #2
    aa0a:	440b      	add	r3, r1
    aa0c:	3310      	adds	r3, #16
    aa0e:	681b      	ldr	r3, [r3, #0]
    aa10:	b29b      	uxth	r3, r3
    aa12:	461a      	mov	r2, r3
    aa14:	2101      	movs	r1, #1
    aa16:	6838      	ldr	r0, [r7, #0]
    aa18:	4b27      	ldr	r3, [pc, #156]	; (aab8 <_pwm_init+0x208>)
    aa1a:	4798      	blx	r3
    aa1c:	e002      	b.n	aa24 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    aa1e:	f04f 33ff 	mov.w	r3, #4294967295
    aa22:	e02e      	b.n	aa82 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    aa24:	6879      	ldr	r1, [r7, #4]
    aa26:	6838      	ldr	r0, [r7, #0]
    aa28:	4b24      	ldr	r3, [pc, #144]	; (aabc <_pwm_init+0x20c>)
    aa2a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    aa2c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aa30:	491c      	ldr	r1, [pc, #112]	; (aaa4 <_pwm_init+0x1f4>)
    aa32:	4613      	mov	r3, r2
    aa34:	009b      	lsls	r3, r3, #2
    aa36:	4413      	add	r3, r2
    aa38:	009b      	lsls	r3, r3, #2
    aa3a:	440b      	add	r3, r1
    aa3c:	3302      	adds	r3, #2
    aa3e:	f9b3 3000 	ldrsh.w	r3, [r3]
    aa42:	4618      	mov	r0, r3
    aa44:	4b1e      	ldr	r3, [pc, #120]	; (aac0 <_pwm_init+0x210>)
    aa46:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    aa48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aa4c:	4915      	ldr	r1, [pc, #84]	; (aaa4 <_pwm_init+0x1f4>)
    aa4e:	4613      	mov	r3, r2
    aa50:	009b      	lsls	r3, r3, #2
    aa52:	4413      	add	r3, r2
    aa54:	009b      	lsls	r3, r3, #2
    aa56:	440b      	add	r3, r1
    aa58:	3302      	adds	r3, #2
    aa5a:	f9b3 3000 	ldrsh.w	r3, [r3]
    aa5e:	4618      	mov	r0, r3
    aa60:	4b18      	ldr	r3, [pc, #96]	; (aac4 <_pwm_init+0x214>)
    aa62:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    aa64:	f997 200f 	ldrsb.w	r2, [r7, #15]
    aa68:	490e      	ldr	r1, [pc, #56]	; (aaa4 <_pwm_init+0x1f4>)
    aa6a:	4613      	mov	r3, r2
    aa6c:	009b      	lsls	r3, r3, #2
    aa6e:	4413      	add	r3, r2
    aa70:	009b      	lsls	r3, r3, #2
    aa72:	440b      	add	r3, r1
    aa74:	3302      	adds	r3, #2
    aa76:	f9b3 3000 	ldrsh.w	r3, [r3]
    aa7a:	4618      	mov	r0, r3
    aa7c:	4b12      	ldr	r3, [pc, #72]	; (aac8 <_pwm_init+0x218>)
    aa7e:	4798      	blx	r3

	return 0;
    aa80:	2300      	movs	r3, #0
}
    aa82:	4618      	mov	r0, r3
    aa84:	3710      	adds	r7, #16
    aa86:	46bd      	mov	sp, r7
    aa88:	bd80      	pop	{r7, pc}
    aa8a:	bf00      	nop
    aa8c:	0000ad55 	.word	0x0000ad55
    aa90:	0000a345 	.word	0x0000a345
    aa94:	0000a495 	.word	0x0000a495
    aa98:	0000a46d 	.word	0x0000a46d
    aa9c:	0000a321 	.word	0x0000a321
    aaa0:	0000a4c5 	.word	0x0000a4c5
    aaa4:	20000060 	.word	0x20000060
    aaa8:	0000a525 	.word	0x0000a525
    aaac:	0000a4e9 	.word	0x0000a4e9
    aab0:	0000a507 	.word	0x0000a507
    aab4:	0000a5d1 	.word	0x0000a5d1
    aab8:	0000a59d 	.word	0x0000a59d
    aabc:	0000adbd 	.word	0x0000adbd
    aac0:	0000a2a1 	.word	0x0000a2a1
    aac4:	0000a2e5 	.word	0x0000a2e5
    aac8:	0000a265 	.word	0x0000a265

0000aacc <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    aacc:	b580      	push	{r7, lr}
    aace:	b082      	sub	sp, #8
    aad0:	af00      	add	r7, sp, #0
    aad2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    aad4:	687b      	ldr	r3, [r7, #4]
    aad6:	68db      	ldr	r3, [r3, #12]
    aad8:	4618      	mov	r0, r3
    aada:	4b03      	ldr	r3, [pc, #12]	; (aae8 <_timer_start+0x1c>)
    aadc:	4798      	blx	r3
}
    aade:	bf00      	nop
    aae0:	3708      	adds	r7, #8
    aae2:	46bd      	mov	sp, r7
    aae4:	bd80      	pop	{r7, pc}
    aae6:	bf00      	nop
    aae8:	0000a40d 	.word	0x0000a40d

0000aaec <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    aaec:	b580      	push	{r7, lr}
    aaee:	b082      	sub	sp, #8
    aaf0:	af00      	add	r7, sp, #0
    aaf2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    aaf4:	687b      	ldr	r3, [r7, #4]
    aaf6:	691b      	ldr	r3, [r3, #16]
    aaf8:	4618      	mov	r0, r3
    aafa:	4b03      	ldr	r3, [pc, #12]	; (ab08 <_pwm_enable+0x1c>)
    aafc:	4798      	blx	r3
}
    aafe:	bf00      	nop
    ab00:	3708      	adds	r7, #8
    ab02:	46bd      	mov	sp, r7
    ab04:	bd80      	pop	{r7, pc}
    ab06:	bf00      	nop
    ab08:	0000a40d 	.word	0x0000a40d

0000ab0c <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    ab0c:	b580      	push	{r7, lr}
    ab0e:	b082      	sub	sp, #8
    ab10:	af00      	add	r7, sp, #0
    ab12:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    ab14:	687b      	ldr	r3, [r7, #4]
    ab16:	68db      	ldr	r3, [r3, #12]
    ab18:	4618      	mov	r0, r3
    ab1a:	4b03      	ldr	r3, [pc, #12]	; (ab28 <_timer_stop+0x1c>)
    ab1c:	4798      	blx	r3
}
    ab1e:	bf00      	nop
    ab20:	3708      	adds	r7, #8
    ab22:	46bd      	mov	sp, r7
    ab24:	bd80      	pop	{r7, pc}
    ab26:	bf00      	nop
    ab28:	0000a46d 	.word	0x0000a46d

0000ab2c <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	b082      	sub	sp, #8
    ab30:	af00      	add	r7, sp, #0
    ab32:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    ab34:	687b      	ldr	r3, [r7, #4]
    ab36:	68db      	ldr	r3, [r3, #12]
    ab38:	4618      	mov	r0, r3
    ab3a:	4b03      	ldr	r3, [pc, #12]	; (ab48 <_timer_is_started+0x1c>)
    ab3c:	4798      	blx	r3
    ab3e:	4603      	mov	r3, r0
}
    ab40:	4618      	mov	r0, r3
    ab42:	3708      	adds	r7, #8
    ab44:	46bd      	mov	sp, r7
    ab46:	bd80      	pop	{r7, pc}
    ab48:	0000a435 	.word	0x0000a435

0000ab4c <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    ab4c:	b580      	push	{r7, lr}
    ab4e:	b082      	sub	sp, #8
    ab50:	af00      	add	r7, sp, #0
    ab52:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    ab54:	687b      	ldr	r3, [r7, #4]
    ab56:	691b      	ldr	r3, [r3, #16]
    ab58:	4618      	mov	r0, r3
    ab5a:	4b03      	ldr	r3, [pc, #12]	; (ab68 <_pwm_is_enabled+0x1c>)
    ab5c:	4798      	blx	r3
    ab5e:	4603      	mov	r3, r0
}
    ab60:	4618      	mov	r0, r3
    ab62:	3708      	adds	r7, #8
    ab64:	46bd      	mov	sp, r7
    ab66:	bd80      	pop	{r7, pc}
    ab68:	0000a435 	.word	0x0000a435

0000ab6c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    ab6c:	b480      	push	{r7}
    ab6e:	af00      	add	r7, sp, #0
	return NULL;
    ab70:	2300      	movs	r3, #0
}
    ab72:	4618      	mov	r0, r3
    ab74:	46bd      	mov	sp, r7
    ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab7a:	4770      	bx	lr

0000ab7c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    ab7c:	b480      	push	{r7}
    ab7e:	af00      	add	r7, sp, #0
	return NULL;
    ab80:	2300      	movs	r3, #0
}
    ab82:	4618      	mov	r0, r3
    ab84:	46bd      	mov	sp, r7
    ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab8a:	4770      	bx	lr

0000ab8c <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    ab8c:	b580      	push	{r7, lr}
    ab8e:	b084      	sub	sp, #16
    ab90:	af00      	add	r7, sp, #0
    ab92:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	68db      	ldr	r3, [r3, #12]
    ab98:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    ab9a:	68f8      	ldr	r0, [r7, #12]
    ab9c:	4b0e      	ldr	r3, [pc, #56]	; (abd8 <_timer_set_irq+0x4c>)
    ab9e:	4798      	blx	r3
    aba0:	4603      	mov	r3, r0
    aba2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    aba4:	f240 12a7 	movw	r2, #423	; 0x1a7
    aba8:	490c      	ldr	r1, [pc, #48]	; (abdc <_timer_set_irq+0x50>)
    abaa:	2001      	movs	r0, #1
    abac:	4b0c      	ldr	r3, [pc, #48]	; (abe0 <_timer_set_irq+0x54>)
    abae:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    abb0:	f997 200b 	ldrsb.w	r2, [r7, #11]
    abb4:	490b      	ldr	r1, [pc, #44]	; (abe4 <_timer_set_irq+0x58>)
    abb6:	4613      	mov	r3, r2
    abb8:	009b      	lsls	r3, r3, #2
    abba:	4413      	add	r3, r2
    abbc:	009b      	lsls	r3, r3, #2
    abbe:	440b      	add	r3, r1
    abc0:	3302      	adds	r3, #2
    abc2:	f9b3 3000 	ldrsh.w	r3, [r3]
    abc6:	b2db      	uxtb	r3, r3
    abc8:	4618      	mov	r0, r3
    abca:	4b07      	ldr	r3, [pc, #28]	; (abe8 <_timer_set_irq+0x5c>)
    abcc:	4798      	blx	r3
}
    abce:	bf00      	nop
    abd0:	3710      	adds	r7, #16
    abd2:	46bd      	mov	sp, r7
    abd4:	bd80      	pop	{r7, pc}
    abd6:	bf00      	nop
    abd8:	0000ad55 	.word	0x0000ad55
    abdc:	00012bf8 	.word	0x00012bf8
    abe0:	00005ed5 	.word	0x00005ed5
    abe4:	20000060 	.word	0x20000060
    abe8:	00006721 	.word	0x00006721

0000abec <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    abec:	b580      	push	{r7, lr}
    abee:	b084      	sub	sp, #16
    abf0:	af00      	add	r7, sp, #0
    abf2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    abf4:	687b      	ldr	r3, [r7, #4]
    abf6:	68db      	ldr	r3, [r3, #12]
    abf8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    abfa:	68f8      	ldr	r0, [r7, #12]
    abfc:	4b07      	ldr	r3, [pc, #28]	; (ac1c <tc_interrupt_handler+0x30>)
    abfe:	4798      	blx	r3
    ac00:	4603      	mov	r3, r0
    ac02:	2b00      	cmp	r3, #0
    ac04:	d006      	beq.n	ac14 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    ac06:	68f8      	ldr	r0, [r7, #12]
    ac08:	4b05      	ldr	r3, [pc, #20]	; (ac20 <tc_interrupt_handler+0x34>)
    ac0a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    ac0c:	687b      	ldr	r3, [r7, #4]
    ac0e:	681b      	ldr	r3, [r3, #0]
    ac10:	6878      	ldr	r0, [r7, #4]
    ac12:	4798      	blx	r3
	}
}
    ac14:	bf00      	nop
    ac16:	3710      	adds	r7, #16
    ac18:	46bd      	mov	sp, r7
    ac1a:	bd80      	pop	{r7, pc}
    ac1c:	0000a36d 	.word	0x0000a36d
    ac20:	0000a395 	.word	0x0000a395

0000ac24 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    ac24:	b580      	push	{r7, lr}
    ac26:	b084      	sub	sp, #16
    ac28:	af00      	add	r7, sp, #0
    ac2a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    ac2c:	687b      	ldr	r3, [r7, #4]
    ac2e:	691b      	ldr	r3, [r3, #16]
    ac30:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    ac32:	68f8      	ldr	r0, [r7, #12]
    ac34:	4b12      	ldr	r3, [pc, #72]	; (ac80 <tc_pwm_interrupt_handler+0x5c>)
    ac36:	4798      	blx	r3
    ac38:	4603      	mov	r3, r0
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d00a      	beq.n	ac54 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    ac3e:	68f8      	ldr	r0, [r7, #12]
    ac40:	4b10      	ldr	r3, [pc, #64]	; (ac84 <tc_pwm_interrupt_handler+0x60>)
    ac42:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    ac44:	687b      	ldr	r3, [r7, #4]
    ac46:	681b      	ldr	r3, [r3, #0]
    ac48:	2b00      	cmp	r3, #0
    ac4a:	d003      	beq.n	ac54 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    ac4c:	687b      	ldr	r3, [r7, #4]
    ac4e:	681b      	ldr	r3, [r3, #0]
    ac50:	6878      	ldr	r0, [r7, #4]
    ac52:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    ac54:	68f8      	ldr	r0, [r7, #12]
    ac56:	4b0c      	ldr	r3, [pc, #48]	; (ac88 <tc_pwm_interrupt_handler+0x64>)
    ac58:	4798      	blx	r3
    ac5a:	4603      	mov	r3, r0
    ac5c:	2b00      	cmp	r3, #0
    ac5e:	d00a      	beq.n	ac76 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    ac60:	68f8      	ldr	r0, [r7, #12]
    ac62:	4b0a      	ldr	r3, [pc, #40]	; (ac8c <tc_pwm_interrupt_handler+0x68>)
    ac64:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    ac66:	687b      	ldr	r3, [r7, #4]
    ac68:	685b      	ldr	r3, [r3, #4]
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d003      	beq.n	ac76 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    ac6e:	687b      	ldr	r3, [r7, #4]
    ac70:	685b      	ldr	r3, [r3, #4]
    ac72:	6878      	ldr	r0, [r7, #4]
    ac74:	4798      	blx	r3
		}
	}
}
    ac76:	bf00      	nop
    ac78:	3710      	adds	r7, #16
    ac7a:	46bd      	mov	sp, r7
    ac7c:	bd80      	pop	{r7, pc}
    ac7e:	bf00      	nop
    ac80:	0000a36d 	.word	0x0000a36d
    ac84:	0000a395 	.word	0x0000a395
    ac88:	0000a3e3 	.word	0x0000a3e3
    ac8c:	0000a3af 	.word	0x0000a3af

0000ac90 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    ac90:	b580      	push	{r7, lr}
    ac92:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    ac94:	4b03      	ldr	r3, [pc, #12]	; (aca4 <TC0_Handler+0x14>)
    ac96:	681b      	ldr	r3, [r3, #0]
    ac98:	4618      	mov	r0, r3
    ac9a:	4b03      	ldr	r3, [pc, #12]	; (aca8 <TC0_Handler+0x18>)
    ac9c:	4798      	blx	r3
}
    ac9e:	bf00      	nop
    aca0:	bd80      	pop	{r7, pc}
    aca2:	bf00      	nop
    aca4:	200021e8 	.word	0x200021e8
    aca8:	0000abed 	.word	0x0000abed

0000acac <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    acac:	b580      	push	{r7, lr}
    acae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    acb0:	4b03      	ldr	r3, [pc, #12]	; (acc0 <TC1_Handler+0x14>)
    acb2:	681b      	ldr	r3, [r3, #0]
    acb4:	4618      	mov	r0, r3
    acb6:	4b03      	ldr	r3, [pc, #12]	; (acc4 <TC1_Handler+0x18>)
    acb8:	4798      	blx	r3
}
    acba:	bf00      	nop
    acbc:	bd80      	pop	{r7, pc}
    acbe:	bf00      	nop
    acc0:	200021ec 	.word	0x200021ec
    acc4:	0000abed 	.word	0x0000abed

0000acc8 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    acc8:	b580      	push	{r7, lr}
    acca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    accc:	4b03      	ldr	r3, [pc, #12]	; (acdc <TC2_Handler+0x14>)
    acce:	681b      	ldr	r3, [r3, #0]
    acd0:	4618      	mov	r0, r3
    acd2:	4b03      	ldr	r3, [pc, #12]	; (ace0 <TC2_Handler+0x18>)
    acd4:	4798      	blx	r3
}
    acd6:	bf00      	nop
    acd8:	bd80      	pop	{r7, pc}
    acda:	bf00      	nop
    acdc:	200021f0 	.word	0x200021f0
    ace0:	0000abed 	.word	0x0000abed

0000ace4 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    ace4:	b580      	push	{r7, lr}
    ace6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    ace8:	4b03      	ldr	r3, [pc, #12]	; (acf8 <TC3_Handler+0x14>)
    acea:	681b      	ldr	r3, [r3, #0]
    acec:	4618      	mov	r0, r3
    acee:	4b03      	ldr	r3, [pc, #12]	; (acfc <TC3_Handler+0x18>)
    acf0:	4798      	blx	r3
}
    acf2:	bf00      	nop
    acf4:	bd80      	pop	{r7, pc}
    acf6:	bf00      	nop
    acf8:	200021f4 	.word	0x200021f4
    acfc:	0000abed 	.word	0x0000abed

0000ad00 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    ad00:	b580      	push	{r7, lr}
    ad02:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    ad04:	4b03      	ldr	r3, [pc, #12]	; (ad14 <TC4_Handler+0x14>)
    ad06:	681b      	ldr	r3, [r3, #0]
    ad08:	4618      	mov	r0, r3
    ad0a:	4b03      	ldr	r3, [pc, #12]	; (ad18 <TC4_Handler+0x18>)
    ad0c:	4798      	blx	r3
}
    ad0e:	bf00      	nop
    ad10:	bd80      	pop	{r7, pc}
    ad12:	bf00      	nop
    ad14:	200021f8 	.word	0x200021f8
    ad18:	0000abed 	.word	0x0000abed

0000ad1c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    ad1c:	b580      	push	{r7, lr}
    ad1e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    ad20:	4b03      	ldr	r3, [pc, #12]	; (ad30 <TC5_Handler+0x14>)
    ad22:	681b      	ldr	r3, [r3, #0]
    ad24:	4618      	mov	r0, r3
    ad26:	4b03      	ldr	r3, [pc, #12]	; (ad34 <TC5_Handler+0x18>)
    ad28:	4798      	blx	r3
}
    ad2a:	bf00      	nop
    ad2c:	bd80      	pop	{r7, pc}
    ad2e:	bf00      	nop
    ad30:	200021fc 	.word	0x200021fc
    ad34:	0000abed 	.word	0x0000abed

0000ad38 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    ad38:	b580      	push	{r7, lr}
    ad3a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    ad3c:	4b03      	ldr	r3, [pc, #12]	; (ad4c <TC7_Handler+0x14>)
    ad3e:	681b      	ldr	r3, [r3, #0]
    ad40:	4618      	mov	r0, r3
    ad42:	4b03      	ldr	r3, [pc, #12]	; (ad50 <TC7_Handler+0x18>)
    ad44:	4798      	blx	r3
}
    ad46:	bf00      	nop
    ad48:	bd80      	pop	{r7, pc}
    ad4a:	bf00      	nop
    ad4c:	20002200 	.word	0x20002200
    ad50:	0000ac25 	.word	0x0000ac25

0000ad54 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    ad54:	b580      	push	{r7, lr}
    ad56:	b084      	sub	sp, #16
    ad58:	af00      	add	r7, sp, #0
    ad5a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    ad5c:	6878      	ldr	r0, [r7, #4]
    ad5e:	4b13      	ldr	r3, [pc, #76]	; (adac <get_tc_index+0x58>)
    ad60:	4798      	blx	r3
    ad62:	4603      	mov	r3, r0
    ad64:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    ad66:	2300      	movs	r3, #0
    ad68:	73fb      	strb	r3, [r7, #15]
    ad6a:	e010      	b.n	ad8e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    ad6c:	7bfa      	ldrb	r2, [r7, #15]
    ad6e:	4910      	ldr	r1, [pc, #64]	; (adb0 <get_tc_index+0x5c>)
    ad70:	4613      	mov	r3, r2
    ad72:	009b      	lsls	r3, r3, #2
    ad74:	4413      	add	r3, r2
    ad76:	009b      	lsls	r3, r3, #2
    ad78:	440b      	add	r3, r1
    ad7a:	781b      	ldrb	r3, [r3, #0]
    ad7c:	7bba      	ldrb	r2, [r7, #14]
    ad7e:	429a      	cmp	r2, r3
    ad80:	d102      	bne.n	ad88 <get_tc_index+0x34>
			return i;
    ad82:	f997 300f 	ldrsb.w	r3, [r7, #15]
    ad86:	e00d      	b.n	ada4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    ad88:	7bfb      	ldrb	r3, [r7, #15]
    ad8a:	3301      	adds	r3, #1
    ad8c:	73fb      	strb	r3, [r7, #15]
    ad8e:	7bfb      	ldrb	r3, [r7, #15]
    ad90:	2b06      	cmp	r3, #6
    ad92:	d9eb      	bls.n	ad6c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    ad94:	f240 221a 	movw	r2, #538	; 0x21a
    ad98:	4906      	ldr	r1, [pc, #24]	; (adb4 <get_tc_index+0x60>)
    ad9a:	2000      	movs	r0, #0
    ad9c:	4b06      	ldr	r3, [pc, #24]	; (adb8 <get_tc_index+0x64>)
    ad9e:	4798      	blx	r3
	return -1;
    ada0:	f04f 33ff 	mov.w	r3, #4294967295
}
    ada4:	4618      	mov	r0, r3
    ada6:	3710      	adds	r7, #16
    ada8:	46bd      	mov	sp, r7
    adaa:	bd80      	pop	{r7, pc}
    adac:	0000ae6d 	.word	0x0000ae6d
    adb0:	20000060 	.word	0x20000060
    adb4:	00012bf8 	.word	0x00012bf8
    adb8:	00005ed5 	.word	0x00005ed5

0000adbc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    adbc:	b480      	push	{r7}
    adbe:	b083      	sub	sp, #12
    adc0:	af00      	add	r7, sp, #0
    adc2:	6078      	str	r0, [r7, #4]
    adc4:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    adc6:	687b      	ldr	r3, [r7, #4]
    adc8:	4a1a      	ldr	r2, [pc, #104]	; (ae34 <_tc_init_irq_param+0x78>)
    adca:	4293      	cmp	r3, r2
    adcc:	d102      	bne.n	add4 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    adce:	4a1a      	ldr	r2, [pc, #104]	; (ae38 <_tc_init_irq_param+0x7c>)
    add0:	683b      	ldr	r3, [r7, #0]
    add2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    add4:	687b      	ldr	r3, [r7, #4]
    add6:	4a19      	ldr	r2, [pc, #100]	; (ae3c <_tc_init_irq_param+0x80>)
    add8:	4293      	cmp	r3, r2
    adda:	d102      	bne.n	ade2 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    addc:	4a18      	ldr	r2, [pc, #96]	; (ae40 <_tc_init_irq_param+0x84>)
    adde:	683b      	ldr	r3, [r7, #0]
    ade0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    ade2:	687b      	ldr	r3, [r7, #4]
    ade4:	4a17      	ldr	r2, [pc, #92]	; (ae44 <_tc_init_irq_param+0x88>)
    ade6:	4293      	cmp	r3, r2
    ade8:	d102      	bne.n	adf0 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    adea:	4a17      	ldr	r2, [pc, #92]	; (ae48 <_tc_init_irq_param+0x8c>)
    adec:	683b      	ldr	r3, [r7, #0]
    adee:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    adf0:	687b      	ldr	r3, [r7, #4]
    adf2:	4a16      	ldr	r2, [pc, #88]	; (ae4c <_tc_init_irq_param+0x90>)
    adf4:	4293      	cmp	r3, r2
    adf6:	d102      	bne.n	adfe <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    adf8:	4a15      	ldr	r2, [pc, #84]	; (ae50 <_tc_init_irq_param+0x94>)
    adfa:	683b      	ldr	r3, [r7, #0]
    adfc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    adfe:	687b      	ldr	r3, [r7, #4]
    ae00:	4a14      	ldr	r2, [pc, #80]	; (ae54 <_tc_init_irq_param+0x98>)
    ae02:	4293      	cmp	r3, r2
    ae04:	d102      	bne.n	ae0c <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    ae06:	4a14      	ldr	r2, [pc, #80]	; (ae58 <_tc_init_irq_param+0x9c>)
    ae08:	683b      	ldr	r3, [r7, #0]
    ae0a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    ae0c:	687b      	ldr	r3, [r7, #4]
    ae0e:	4a13      	ldr	r2, [pc, #76]	; (ae5c <_tc_init_irq_param+0xa0>)
    ae10:	4293      	cmp	r3, r2
    ae12:	d102      	bne.n	ae1a <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    ae14:	4a12      	ldr	r2, [pc, #72]	; (ae60 <_tc_init_irq_param+0xa4>)
    ae16:	683b      	ldr	r3, [r7, #0]
    ae18:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    ae1a:	687b      	ldr	r3, [r7, #4]
    ae1c:	4a11      	ldr	r2, [pc, #68]	; (ae64 <_tc_init_irq_param+0xa8>)
    ae1e:	4293      	cmp	r3, r2
    ae20:	d102      	bne.n	ae28 <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    ae22:	4a11      	ldr	r2, [pc, #68]	; (ae68 <_tc_init_irq_param+0xac>)
    ae24:	683b      	ldr	r3, [r7, #0]
    ae26:	6013      	str	r3, [r2, #0]
	}
}
    ae28:	bf00      	nop
    ae2a:	370c      	adds	r7, #12
    ae2c:	46bd      	mov	sp, r7
    ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae32:	4770      	bx	lr
    ae34:	40003800 	.word	0x40003800
    ae38:	200021e8 	.word	0x200021e8
    ae3c:	40003c00 	.word	0x40003c00
    ae40:	200021ec 	.word	0x200021ec
    ae44:	4101a000 	.word	0x4101a000
    ae48:	200021f0 	.word	0x200021f0
    ae4c:	4101c000 	.word	0x4101c000
    ae50:	200021f4 	.word	0x200021f4
    ae54:	42001400 	.word	0x42001400
    ae58:	200021f8 	.word	0x200021f8
    ae5c:	42001800 	.word	0x42001800
    ae60:	200021fc 	.word	0x200021fc
    ae64:	43001800 	.word	0x43001800
    ae68:	20002200 	.word	0x20002200

0000ae6c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    ae6c:	b4b0      	push	{r4, r5, r7}
    ae6e:	b08d      	sub	sp, #52	; 0x34
    ae70:	af00      	add	r7, sp, #0
    ae72:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    ae74:	4b13      	ldr	r3, [pc, #76]	; (aec4 <_get_hardware_offset+0x58>)
    ae76:	f107 040c 	add.w	r4, r7, #12
    ae7a:	461d      	mov	r5, r3
    ae7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ae7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ae80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ae84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    ae88:	2300      	movs	r3, #0
    ae8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ae8c:	e010      	b.n	aeb0 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae90:	009b      	lsls	r3, r3, #2
    ae92:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ae96:	4413      	add	r3, r2
    ae98:	f853 3c24 	ldr.w	r3, [r3, #-36]
    ae9c:	461a      	mov	r2, r3
    ae9e:	687b      	ldr	r3, [r7, #4]
    aea0:	429a      	cmp	r2, r3
    aea2:	d102      	bne.n	aeaa <_get_hardware_offset+0x3e>
			return i;
    aea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aea6:	b2db      	uxtb	r3, r3
    aea8:	e006      	b.n	aeb8 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    aeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aeac:	3301      	adds	r3, #1
    aeae:	62fb      	str	r3, [r7, #44]	; 0x2c
    aeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aeb2:	2b07      	cmp	r3, #7
    aeb4:	d9eb      	bls.n	ae8e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    aeb6:	2300      	movs	r3, #0
}
    aeb8:	4618      	mov	r0, r3
    aeba:	3734      	adds	r7, #52	; 0x34
    aebc:	46bd      	mov	sp, r7
    aebe:	bcb0      	pop	{r4, r5, r7}
    aec0:	4770      	bx	lr
    aec2:	bf00      	nop
    aec4:	00012c0c 	.word	0x00012c0c

0000aec8 <__NVIC_EnableIRQ>:
{
    aec8:	b480      	push	{r7}
    aeca:	b083      	sub	sp, #12
    aecc:	af00      	add	r7, sp, #0
    aece:	4603      	mov	r3, r0
    aed0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    aed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aed6:	2b00      	cmp	r3, #0
    aed8:	db0b      	blt.n	aef2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aeda:	4909      	ldr	r1, [pc, #36]	; (af00 <__NVIC_EnableIRQ+0x38>)
    aedc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aee0:	095b      	lsrs	r3, r3, #5
    aee2:	88fa      	ldrh	r2, [r7, #6]
    aee4:	f002 021f 	and.w	r2, r2, #31
    aee8:	2001      	movs	r0, #1
    aeea:	fa00 f202 	lsl.w	r2, r0, r2
    aeee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aef2:	bf00      	nop
    aef4:	370c      	adds	r7, #12
    aef6:	46bd      	mov	sp, r7
    aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aefc:	4770      	bx	lr
    aefe:	bf00      	nop
    af00:	e000e100 	.word	0xe000e100

0000af04 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    af04:	b480      	push	{r7}
    af06:	b087      	sub	sp, #28
    af08:	af00      	add	r7, sp, #0
    af0a:	60f8      	str	r0, [r7, #12]
    af0c:	460b      	mov	r3, r1
    af0e:	607a      	str	r2, [r7, #4]
    af10:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    af12:	7afa      	ldrb	r2, [r7, #11]
    af14:	68f9      	ldr	r1, [r7, #12]
    af16:	4613      	mov	r3, r2
    af18:	009b      	lsls	r3, r3, #2
    af1a:	4413      	add	r3, r2
    af1c:	009b      	lsls	r3, r3, #2
    af1e:	440b      	add	r3, r1
    af20:	3340      	adds	r3, #64	; 0x40
    af22:	681b      	ldr	r3, [r3, #0]
    af24:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    af26:	697a      	ldr	r2, [r7, #20]
    af28:	687b      	ldr	r3, [r7, #4]
    af2a:	4013      	ands	r3, r2
    af2c:	617b      	str	r3, [r7, #20]
	return tmp;
    af2e:	697b      	ldr	r3, [r7, #20]
}
    af30:	4618      	mov	r0, r3
    af32:	371c      	adds	r7, #28
    af34:	46bd      	mov	sp, r7
    af36:	f85d 7b04 	ldr.w	r7, [sp], #4
    af3a:	4770      	bx	lr

0000af3c <hri_oscctrl_get_STATUS_reg>:
{
    af3c:	b480      	push	{r7}
    af3e:	b085      	sub	sp, #20
    af40:	af00      	add	r7, sp, #0
    af42:	6078      	str	r0, [r7, #4]
    af44:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    af46:	687b      	ldr	r3, [r7, #4]
    af48:	691b      	ldr	r3, [r3, #16]
    af4a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    af4c:	68fa      	ldr	r2, [r7, #12]
    af4e:	683b      	ldr	r3, [r7, #0]
    af50:	4013      	ands	r3, r2
    af52:	60fb      	str	r3, [r7, #12]
	return tmp;
    af54:	68fb      	ldr	r3, [r7, #12]
}
    af56:	4618      	mov	r0, r3
    af58:	3714      	adds	r7, #20
    af5a:	46bd      	mov	sp, r7
    af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    af60:	4770      	bx	lr

0000af62 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    af62:	b480      	push	{r7}
    af64:	b085      	sub	sp, #20
    af66:	af00      	add	r7, sp, #0
    af68:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    af6a:	687b      	ldr	r3, [r7, #4]
    af6c:	f893 3020 	ldrb.w	r3, [r3, #32]
    af70:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    af72:	7bfb      	ldrb	r3, [r7, #15]
    af74:	f003 0301 	and.w	r3, r3, #1
    af78:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    af7a:	7bfb      	ldrb	r3, [r7, #15]
    af7c:	2b00      	cmp	r3, #0
    af7e:	bf14      	ite	ne
    af80:	2301      	movne	r3, #1
    af82:	2300      	moveq	r3, #0
    af84:	b2db      	uxtb	r3, r3
}
    af86:	4618      	mov	r0, r3
    af88:	3714      	adds	r7, #20
    af8a:	46bd      	mov	sp, r7
    af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    af90:	4770      	bx	lr

0000af92 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    af92:	b480      	push	{r7}
    af94:	b083      	sub	sp, #12
    af96:	af00      	add	r7, sp, #0
    af98:	6078      	str	r0, [r7, #4]
    af9a:	460b      	mov	r3, r1
    af9c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    af9e:	bf00      	nop
    afa0:	687b      	ldr	r3, [r7, #4]
    afa2:	789b      	ldrb	r3, [r3, #2]
    afa4:	b2da      	uxtb	r2, r3
    afa6:	78fb      	ldrb	r3, [r7, #3]
    afa8:	4013      	ands	r3, r2
    afaa:	b2db      	uxtb	r3, r3
    afac:	2b00      	cmp	r3, #0
    afae:	d1f7      	bne.n	afa0 <hri_usb_wait_for_sync+0xe>
	};
}
    afb0:	bf00      	nop
    afb2:	370c      	adds	r7, #12
    afb4:	46bd      	mov	sp, r7
    afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    afba:	4770      	bx	lr

0000afbc <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    afbc:	b480      	push	{r7}
    afbe:	b083      	sub	sp, #12
    afc0:	af00      	add	r7, sp, #0
    afc2:	6078      	str	r0, [r7, #4]
    afc4:	460b      	mov	r3, r1
    afc6:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    afc8:	687b      	ldr	r3, [r7, #4]
    afca:	789b      	ldrb	r3, [r3, #2]
    afcc:	b2da      	uxtb	r2, r3
    afce:	78fb      	ldrb	r3, [r7, #3]
    afd0:	4013      	ands	r3, r2
    afd2:	b2db      	uxtb	r3, r3
    afd4:	2b00      	cmp	r3, #0
    afd6:	bf14      	ite	ne
    afd8:	2301      	movne	r3, #1
    afda:	2300      	moveq	r3, #0
    afdc:	b2db      	uxtb	r3, r3
}
    afde:	4618      	mov	r0, r3
    afe0:	370c      	adds	r7, #12
    afe2:	46bd      	mov	sp, r7
    afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    afe8:	4770      	bx	lr

0000afea <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    afea:	b480      	push	{r7}
    afec:	b085      	sub	sp, #20
    afee:	af00      	add	r7, sp, #0
    aff0:	6078      	str	r0, [r7, #4]
    aff2:	460b      	mov	r3, r1
    aff4:	70fb      	strb	r3, [r7, #3]
    aff6:	4613      	mov	r3, r2
    aff8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    affa:	78fb      	ldrb	r3, [r7, #3]
    affc:	687a      	ldr	r2, [r7, #4]
    affe:	3308      	adds	r3, #8
    b000:	015b      	lsls	r3, r3, #5
    b002:	4413      	add	r3, r2
    b004:	3307      	adds	r3, #7
    b006:	781b      	ldrb	r3, [r3, #0]
    b008:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    b00a:	7bfa      	ldrb	r2, [r7, #15]
    b00c:	78bb      	ldrb	r3, [r7, #2]
    b00e:	4013      	ands	r3, r2
    b010:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b012:	7bfb      	ldrb	r3, [r7, #15]
}
    b014:	4618      	mov	r0, r3
    b016:	3714      	adds	r7, #20
    b018:	46bd      	mov	sp, r7
    b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b01e:	4770      	bx	lr

0000b020 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    b020:	b480      	push	{r7}
    b022:	b083      	sub	sp, #12
    b024:	af00      	add	r7, sp, #0
    b026:	6078      	str	r0, [r7, #4]
    b028:	460b      	mov	r3, r1
    b02a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b02c:	78fb      	ldrb	r3, [r7, #3]
    b02e:	687a      	ldr	r2, [r7, #4]
    b030:	3308      	adds	r3, #8
    b032:	015b      	lsls	r3, r3, #5
    b034:	4413      	add	r3, r2
    b036:	3307      	adds	r3, #7
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	b2db      	uxtb	r3, r3
}
    b03c:	4618      	mov	r0, r3
    b03e:	370c      	adds	r7, #12
    b040:	46bd      	mov	sp, r7
    b042:	f85d 7b04 	ldr.w	r7, [sp], #4
    b046:	4770      	bx	lr

0000b048 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    b048:	b480      	push	{r7}
    b04a:	b083      	sub	sp, #12
    b04c:	af00      	add	r7, sp, #0
    b04e:	6078      	str	r0, [r7, #4]
    b050:	460b      	mov	r3, r1
    b052:	70fb      	strb	r3, [r7, #3]
    b054:	4613      	mov	r3, r2
    b056:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    b058:	78fb      	ldrb	r3, [r7, #3]
    b05a:	687a      	ldr	r2, [r7, #4]
    b05c:	3308      	adds	r3, #8
    b05e:	015b      	lsls	r3, r3, #5
    b060:	4413      	add	r3, r2
    b062:	3307      	adds	r3, #7
    b064:	78ba      	ldrb	r2, [r7, #2]
    b066:	701a      	strb	r2, [r3, #0]
}
    b068:	bf00      	nop
    b06a:	370c      	adds	r7, #12
    b06c:	46bd      	mov	sp, r7
    b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b072:	4770      	bx	lr

0000b074 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    b074:	b480      	push	{r7}
    b076:	b083      	sub	sp, #12
    b078:	af00      	add	r7, sp, #0
    b07a:	6078      	str	r0, [r7, #4]
    b07c:	460b      	mov	r3, r1
    b07e:	70fb      	strb	r3, [r7, #3]
    b080:	4613      	mov	r3, r2
    b082:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    b084:	78fb      	ldrb	r3, [r7, #3]
    b086:	687a      	ldr	r2, [r7, #4]
    b088:	3308      	adds	r3, #8
    b08a:	015b      	lsls	r3, r3, #5
    b08c:	4413      	add	r3, r2
    b08e:	3305      	adds	r3, #5
    b090:	78ba      	ldrb	r2, [r7, #2]
    b092:	701a      	strb	r2, [r3, #0]
}
    b094:	bf00      	nop
    b096:	370c      	adds	r7, #12
    b098:	46bd      	mov	sp, r7
    b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b09e:	4770      	bx	lr

0000b0a0 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    b0a0:	b480      	push	{r7}
    b0a2:	b083      	sub	sp, #12
    b0a4:	af00      	add	r7, sp, #0
    b0a6:	6078      	str	r0, [r7, #4]
    b0a8:	460b      	mov	r3, r1
    b0aa:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    b0ac:	78fb      	ldrb	r3, [r7, #3]
    b0ae:	687a      	ldr	r2, [r7, #4]
    b0b0:	3308      	adds	r3, #8
    b0b2:	015b      	lsls	r3, r3, #5
    b0b4:	4413      	add	r3, r2
    b0b6:	3306      	adds	r3, #6
    b0b8:	781b      	ldrb	r3, [r3, #0]
    b0ba:	b2db      	uxtb	r3, r3
}
    b0bc:	4618      	mov	r0, r3
    b0be:	370c      	adds	r7, #12
    b0c0:	46bd      	mov	sp, r7
    b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0c6:	4770      	bx	lr

0000b0c8 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    b0c8:	b480      	push	{r7}
    b0ca:	b083      	sub	sp, #12
    b0cc:	af00      	add	r7, sp, #0
    b0ce:	6078      	str	r0, [r7, #4]
    b0d0:	460b      	mov	r3, r1
    b0d2:	70fb      	strb	r3, [r7, #3]
    b0d4:	4613      	mov	r3, r2
    b0d6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b0d8:	78fb      	ldrb	r3, [r7, #3]
    b0da:	687a      	ldr	r2, [r7, #4]
    b0dc:	3308      	adds	r3, #8
    b0de:	015b      	lsls	r3, r3, #5
    b0e0:	4413      	add	r3, r2
    b0e2:	3304      	adds	r3, #4
    b0e4:	78ba      	ldrb	r2, [r7, #2]
    b0e6:	701a      	strb	r2, [r3, #0]
}
    b0e8:	bf00      	nop
    b0ea:	370c      	adds	r7, #12
    b0ec:	46bd      	mov	sp, r7
    b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0f2:	4770      	bx	lr

0000b0f4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    b0f4:	b480      	push	{r7}
    b0f6:	b083      	sub	sp, #12
    b0f8:	af00      	add	r7, sp, #0
    b0fa:	6078      	str	r0, [r7, #4]
    b0fc:	460b      	mov	r3, r1
    b0fe:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    b100:	78fb      	ldrb	r3, [r7, #3]
    b102:	687a      	ldr	r2, [r7, #4]
    b104:	015b      	lsls	r3, r3, #5
    b106:	4413      	add	r3, r2
    b108:	f503 7384 	add.w	r3, r3, #264	; 0x108
    b10c:	2210      	movs	r2, #16
    b10e:	701a      	strb	r2, [r3, #0]
}
    b110:	bf00      	nop
    b112:	370c      	adds	r7, #12
    b114:	46bd      	mov	sp, r7
    b116:	f85d 7b04 	ldr.w	r7, [sp], #4
    b11a:	4770      	bx	lr

0000b11c <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    b11c:	b480      	push	{r7}
    b11e:	b083      	sub	sp, #12
    b120:	af00      	add	r7, sp, #0
    b122:	6078      	str	r0, [r7, #4]
    b124:	460b      	mov	r3, r1
    b126:	70fb      	strb	r3, [r7, #3]
    b128:	4613      	mov	r3, r2
    b12a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    b12c:	78fb      	ldrb	r3, [r7, #3]
    b12e:	687a      	ldr	r2, [r7, #4]
    b130:	015b      	lsls	r3, r3, #5
    b132:	4413      	add	r3, r2
    b134:	f203 1309 	addw	r3, r3, #265	; 0x109
    b138:	78ba      	ldrb	r2, [r7, #2]
    b13a:	701a      	strb	r2, [r3, #0]
}
    b13c:	bf00      	nop
    b13e:	370c      	adds	r7, #12
    b140:	46bd      	mov	sp, r7
    b142:	f85d 7b04 	ldr.w	r7, [sp], #4
    b146:	4770      	bx	lr

0000b148 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    b148:	b480      	push	{r7}
    b14a:	b083      	sub	sp, #12
    b14c:	af00      	add	r7, sp, #0
    b14e:	6078      	str	r0, [r7, #4]
    b150:	460b      	mov	r3, r1
    b152:	70fb      	strb	r3, [r7, #3]
    b154:	4613      	mov	r3, r2
    b156:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    b158:	78fb      	ldrb	r3, [r7, #3]
    b15a:	687a      	ldr	r2, [r7, #4]
    b15c:	015b      	lsls	r3, r3, #5
    b15e:	4413      	add	r3, r2
    b160:	f503 7384 	add.w	r3, r3, #264	; 0x108
    b164:	78ba      	ldrb	r2, [r7, #2]
    b166:	701a      	strb	r2, [r3, #0]
}
    b168:	bf00      	nop
    b16a:	370c      	adds	r7, #12
    b16c:	46bd      	mov	sp, r7
    b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b172:	4770      	bx	lr

0000b174 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    b174:	b480      	push	{r7}
    b176:	b085      	sub	sp, #20
    b178:	af00      	add	r7, sp, #0
    b17a:	6078      	str	r0, [r7, #4]
    b17c:	460b      	mov	r3, r1
    b17e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b180:	78fb      	ldrb	r3, [r7, #3]
    b182:	687a      	ldr	r2, [r7, #4]
    b184:	3308      	adds	r3, #8
    b186:	015b      	lsls	r3, r3, #5
    b188:	4413      	add	r3, r2
    b18a:	781b      	ldrb	r3, [r3, #0]
    b18c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    b18e:	7bfb      	ldrb	r3, [r7, #15]
    b190:	f003 0307 	and.w	r3, r3, #7
    b194:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b196:	7bfb      	ldrb	r3, [r7, #15]
}
    b198:	4618      	mov	r0, r3
    b19a:	3714      	adds	r7, #20
    b19c:	46bd      	mov	sp, r7
    b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1a2:	4770      	bx	lr

0000b1a4 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    b1a4:	b480      	push	{r7}
    b1a6:	b085      	sub	sp, #20
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	6078      	str	r0, [r7, #4]
    b1ac:	460b      	mov	r3, r1
    b1ae:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b1b0:	78fb      	ldrb	r3, [r7, #3]
    b1b2:	687a      	ldr	r2, [r7, #4]
    b1b4:	3308      	adds	r3, #8
    b1b6:	015b      	lsls	r3, r3, #5
    b1b8:	4413      	add	r3, r2
    b1ba:	781b      	ldrb	r3, [r3, #0]
    b1bc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    b1be:	7bfb      	ldrb	r3, [r7, #15]
    b1c0:	091b      	lsrs	r3, r3, #4
    b1c2:	b2db      	uxtb	r3, r3
    b1c4:	f003 0307 	and.w	r3, r3, #7
    b1c8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
    b1cc:	4618      	mov	r0, r3
    b1ce:	3714      	adds	r7, #20
    b1d0:	46bd      	mov	sp, r7
    b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1d6:	4770      	bx	lr

0000b1d8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    b1d8:	b480      	push	{r7}
    b1da:	b083      	sub	sp, #12
    b1dc:	af00      	add	r7, sp, #0
    b1de:	6078      	str	r0, [r7, #4]
    b1e0:	460b      	mov	r3, r1
    b1e2:	70fb      	strb	r3, [r7, #3]
    b1e4:	4613      	mov	r3, r2
    b1e6:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    b1e8:	78fb      	ldrb	r3, [r7, #3]
    b1ea:	687a      	ldr	r2, [r7, #4]
    b1ec:	3308      	adds	r3, #8
    b1ee:	015b      	lsls	r3, r3, #5
    b1f0:	4413      	add	r3, r2
    b1f2:	78ba      	ldrb	r2, [r7, #2]
    b1f4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    b1f6:	bf00      	nop
    b1f8:	370c      	adds	r7, #12
    b1fa:	46bd      	mov	sp, r7
    b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b200:	4770      	bx	lr

0000b202 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    b202:	b480      	push	{r7}
    b204:	b083      	sub	sp, #12
    b206:	af00      	add	r7, sp, #0
    b208:	6078      	str	r0, [r7, #4]
    b20a:	460b      	mov	r3, r1
    b20c:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b20e:	78fb      	ldrb	r3, [r7, #3]
    b210:	687a      	ldr	r2, [r7, #4]
    b212:	3308      	adds	r3, #8
    b214:	015b      	lsls	r3, r3, #5
    b216:	4413      	add	r3, r2
    b218:	781b      	ldrb	r3, [r3, #0]
    b21a:	b2db      	uxtb	r3, r3
}
    b21c:	4618      	mov	r0, r3
    b21e:	370c      	adds	r7, #12
    b220:	46bd      	mov	sp, r7
    b222:	f85d 7b04 	ldr.w	r7, [sp], #4
    b226:	4770      	bx	lr

0000b228 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    b228:	b480      	push	{r7}
    b22a:	b083      	sub	sp, #12
    b22c:	af00      	add	r7, sp, #0
    b22e:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    b230:	687b      	ldr	r3, [r7, #4]
    b232:	8b9b      	ldrh	r3, [r3, #28]
    b234:	b29b      	uxth	r3, r3
}
    b236:	4618      	mov	r0, r3
    b238:	370c      	adds	r7, #12
    b23a:	46bd      	mov	sp, r7
    b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b240:	4770      	bx	lr

0000b242 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    b242:	b480      	push	{r7}
    b244:	b083      	sub	sp, #12
    b246:	af00      	add	r7, sp, #0
    b248:	6078      	str	r0, [r7, #4]
    b24a:	460b      	mov	r3, r1
    b24c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    b24e:	687b      	ldr	r3, [r7, #4]
    b250:	887a      	ldrh	r2, [r7, #2]
    b252:	839a      	strh	r2, [r3, #28]
}
    b254:	bf00      	nop
    b256:	370c      	adds	r7, #12
    b258:	46bd      	mov	sp, r7
    b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b25e:	4770      	bx	lr

0000b260 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    b260:	b480      	push	{r7}
    b262:	b083      	sub	sp, #12
    b264:	af00      	add	r7, sp, #0
    b266:	6078      	str	r0, [r7, #4]
    b268:	460b      	mov	r3, r1
    b26a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    b26c:	687b      	ldr	r3, [r7, #4]
    b26e:	887a      	ldrh	r2, [r7, #2]
    b270:	831a      	strh	r2, [r3, #24]
}
    b272:	bf00      	nop
    b274:	370c      	adds	r7, #12
    b276:	46bd      	mov	sp, r7
    b278:	f85d 7b04 	ldr.w	r7, [sp], #4
    b27c:	4770      	bx	lr

0000b27e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    b27e:	b480      	push	{r7}
    b280:	b083      	sub	sp, #12
    b282:	af00      	add	r7, sp, #0
    b284:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    b286:	687b      	ldr	r3, [r7, #4]
    b288:	8b1b      	ldrh	r3, [r3, #24]
    b28a:	b29b      	uxth	r3, r3
}
    b28c:	4618      	mov	r0, r3
    b28e:	370c      	adds	r7, #12
    b290:	46bd      	mov	sp, r7
    b292:	f85d 7b04 	ldr.w	r7, [sp], #4
    b296:	4770      	bx	lr

0000b298 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    b298:	b480      	push	{r7}
    b29a:	b083      	sub	sp, #12
    b29c:	af00      	add	r7, sp, #0
    b29e:	6078      	str	r0, [r7, #4]
    b2a0:	460b      	mov	r3, r1
    b2a2:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    b2a4:	687b      	ldr	r3, [r7, #4]
    b2a6:	887a      	ldrh	r2, [r7, #2]
    b2a8:	829a      	strh	r2, [r3, #20]
}
    b2aa:	bf00      	nop
    b2ac:	370c      	adds	r7, #12
    b2ae:	46bd      	mov	sp, r7
    b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2b4:	4770      	bx	lr

0000b2b6 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    b2b6:	b480      	push	{r7}
    b2b8:	b085      	sub	sp, #20
    b2ba:	af00      	add	r7, sp, #0
    b2bc:	6078      	str	r0, [r7, #4]
    b2be:	460b      	mov	r3, r1
    b2c0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    b2c2:	687b      	ldr	r3, [r7, #4]
    b2c4:	789b      	ldrb	r3, [r3, #2]
    b2c6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    b2c8:	7bfa      	ldrb	r2, [r7, #15]
    b2ca:	78fb      	ldrb	r3, [r7, #3]
    b2cc:	4013      	ands	r3, r2
    b2ce:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b2d0:	7bfb      	ldrb	r3, [r7, #15]
}
    b2d2:	4618      	mov	r0, r3
    b2d4:	3714      	adds	r7, #20
    b2d6:	46bd      	mov	sp, r7
    b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2dc:	4770      	bx	lr
	...

0000b2e0 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b2e0:	b580      	push	{r7, lr}
    b2e2:	b082      	sub	sp, #8
    b2e4:	af00      	add	r7, sp, #0
    b2e6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    b2e8:	687b      	ldr	r3, [r7, #4]
    b2ea:	781b      	ldrb	r3, [r3, #0]
    b2ec:	b2db      	uxtb	r3, r3
    b2ee:	f023 0302 	bic.w	r3, r3, #2
    b2f2:	b2da      	uxtb	r2, r3
    b2f4:	687b      	ldr	r3, [r7, #4]
    b2f6:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    b2f8:	2103      	movs	r1, #3
    b2fa:	6878      	ldr	r0, [r7, #4]
    b2fc:	4b02      	ldr	r3, [pc, #8]	; (b308 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    b2fe:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    b300:	bf00      	nop
    b302:	3708      	adds	r7, #8
    b304:	46bd      	mov	sp, r7
    b306:	bd80      	pop	{r7, pc}
    b308:	0000af93 	.word	0x0000af93

0000b30c <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    b30c:	b580      	push	{r7, lr}
    b30e:	b084      	sub	sp, #16
    b310:	af00      	add	r7, sp, #0
    b312:	6078      	str	r0, [r7, #4]
    b314:	460b      	mov	r3, r1
    b316:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    b318:	2103      	movs	r1, #3
    b31a:	6878      	ldr	r0, [r7, #4]
    b31c:	4b06      	ldr	r3, [pc, #24]	; (b338 <hri_usb_get_CTRLA_reg+0x2c>)
    b31e:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    b320:	687b      	ldr	r3, [r7, #4]
    b322:	781b      	ldrb	r3, [r3, #0]
    b324:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    b326:	7bfa      	ldrb	r2, [r7, #15]
    b328:	78fb      	ldrb	r3, [r7, #3]
    b32a:	4013      	ands	r3, r2
    b32c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b32e:	7bfb      	ldrb	r3, [r7, #15]
}
    b330:	4618      	mov	r0, r3
    b332:	3710      	adds	r7, #16
    b334:	46bd      	mov	sp, r7
    b336:	bd80      	pop	{r7, pc}
    b338:	0000af93 	.word	0x0000af93

0000b33c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    b33c:	b580      	push	{r7, lr}
    b33e:	b082      	sub	sp, #8
    b340:	af00      	add	r7, sp, #0
    b342:	6078      	str	r0, [r7, #4]
    b344:	460b      	mov	r3, r1
    b346:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    b348:	687b      	ldr	r3, [r7, #4]
    b34a:	78fa      	ldrb	r2, [r7, #3]
    b34c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    b34e:	2103      	movs	r1, #3
    b350:	6878      	ldr	r0, [r7, #4]
    b352:	4b03      	ldr	r3, [pc, #12]	; (b360 <hri_usb_write_CTRLA_reg+0x24>)
    b354:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    b356:	bf00      	nop
    b358:	3708      	adds	r7, #8
    b35a:	46bd      	mov	sp, r7
    b35c:	bd80      	pop	{r7, pc}
    b35e:	bf00      	nop
    b360:	0000af93 	.word	0x0000af93

0000b364 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    b364:	b580      	push	{r7, lr}
    b366:	b082      	sub	sp, #8
    b368:	af00      	add	r7, sp, #0
    b36a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    b36c:	2103      	movs	r1, #3
    b36e:	6878      	ldr	r0, [r7, #4]
    b370:	4b04      	ldr	r3, [pc, #16]	; (b384 <hri_usb_read_CTRLA_reg+0x20>)
    b372:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	781b      	ldrb	r3, [r3, #0]
    b378:	b2db      	uxtb	r3, r3
}
    b37a:	4618      	mov	r0, r3
    b37c:	3708      	adds	r7, #8
    b37e:	46bd      	mov	sp, r7
    b380:	bd80      	pop	{r7, pc}
    b382:	bf00      	nop
    b384:	0000af93 	.word	0x0000af93

0000b388 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    b388:	b480      	push	{r7}
    b38a:	b083      	sub	sp, #12
    b38c:	af00      	add	r7, sp, #0
    b38e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    b390:	687b      	ldr	r3, [r7, #4]
    b392:	891b      	ldrh	r3, [r3, #8]
    b394:	b29b      	uxth	r3, r3
    b396:	f023 0301 	bic.w	r3, r3, #1
    b39a:	b29a      	uxth	r2, r3
    b39c:	687b      	ldr	r3, [r7, #4]
    b39e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    b3a0:	bf00      	nop
    b3a2:	370c      	adds	r7, #12
    b3a4:	46bd      	mov	sp, r7
    b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3aa:	4770      	bx	lr

0000b3ac <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    b3ac:	b480      	push	{r7}
    b3ae:	b083      	sub	sp, #12
    b3b0:	af00      	add	r7, sp, #0
    b3b2:	6078      	str	r0, [r7, #4]
    b3b4:	460b      	mov	r3, r1
    b3b6:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    b3b8:	687b      	ldr	r3, [r7, #4]
    b3ba:	887a      	ldrh	r2, [r7, #2]
    b3bc:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    b3be:	bf00      	nop
    b3c0:	370c      	adds	r7, #12
    b3c2:	46bd      	mov	sp, r7
    b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3c8:	4770      	bx	lr

0000b3ca <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    b3ca:	b480      	push	{r7}
    b3cc:	b083      	sub	sp, #12
    b3ce:	af00      	add	r7, sp, #0
    b3d0:	6078      	str	r0, [r7, #4]
    b3d2:	460b      	mov	r3, r1
    b3d4:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    b3d6:	687b      	ldr	r3, [r7, #4]
    b3d8:	78fa      	ldrb	r2, [r7, #3]
    b3da:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    b3dc:	bf00      	nop
    b3de:	370c      	adds	r7, #12
    b3e0:	46bd      	mov	sp, r7
    b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3e6:	4770      	bx	lr

0000b3e8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    b3e8:	b480      	push	{r7}
    b3ea:	b083      	sub	sp, #12
    b3ec:	af00      	add	r7, sp, #0
    b3ee:	6078      	str	r0, [r7, #4]
    b3f0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	683a      	ldr	r2, [r7, #0]
    b3f6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    b3f8:	bf00      	nop
    b3fa:	370c      	adds	r7, #12
    b3fc:	46bd      	mov	sp, r7
    b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    b402:	4770      	bx	lr

0000b404 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    b404:	b480      	push	{r7}
    b406:	b083      	sub	sp, #12
    b408:	af00      	add	r7, sp, #0
    b40a:	6078      	str	r0, [r7, #4]
    b40c:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    b40e:	2300      	movs	r3, #0
}
    b410:	4618      	mov	r0, r3
    b412:	370c      	adds	r7, #12
    b414:	46bd      	mov	sp, r7
    b416:	f85d 7b04 	ldr.w	r7, [sp], #4
    b41a:	4770      	bx	lr

0000b41c <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    b41c:	b480      	push	{r7}
    b41e:	b085      	sub	sp, #20
    b420:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    b422:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b426:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    b428:	4b28      	ldr	r3, [pc, #160]	; (b4cc <_usb_load_calib+0xb0>)
    b42a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    b42c:	f003 031f 	and.w	r3, r3, #31
    b430:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    b432:	4b26      	ldr	r3, [pc, #152]	; (b4cc <_usb_load_calib+0xb0>)
    b434:	681b      	ldr	r3, [r3, #0]
    b436:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    b438:	f003 031f 	and.w	r3, r3, #31
    b43c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    b43e:	4b23      	ldr	r3, [pc, #140]	; (b4cc <_usb_load_calib+0xb0>)
    b440:	681b      	ldr	r3, [r3, #0]
    b442:	0a9b      	lsrs	r3, r3, #10
    b444:	f003 0307 	and.w	r3, r3, #7
    b448:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    b44a:	68fb      	ldr	r3, [r7, #12]
    b44c:	2b00      	cmp	r3, #0
    b44e:	d002      	beq.n	b456 <_usb_load_calib+0x3a>
    b450:	68fb      	ldr	r3, [r7, #12]
    b452:	2b1f      	cmp	r3, #31
    b454:	d101      	bne.n	b45a <_usb_load_calib+0x3e>
		pad_transn = 9;
    b456:	2309      	movs	r3, #9
    b458:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    b45a:	68bb      	ldr	r3, [r7, #8]
    b45c:	2b00      	cmp	r3, #0
    b45e:	d002      	beq.n	b466 <_usb_load_calib+0x4a>
    b460:	68bb      	ldr	r3, [r7, #8]
    b462:	2b1f      	cmp	r3, #31
    b464:	d101      	bne.n	b46a <_usb_load_calib+0x4e>
		pad_transp = 25;
    b466:	2319      	movs	r3, #25
    b468:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    b46a:	687b      	ldr	r3, [r7, #4]
    b46c:	2b00      	cmp	r3, #0
    b46e:	d002      	beq.n	b476 <_usb_load_calib+0x5a>
    b470:	687b      	ldr	r3, [r7, #4]
    b472:	2b07      	cmp	r3, #7
    b474:	d101      	bne.n	b47a <_usb_load_calib+0x5e>
		pad_trim = 6;
    b476:	2306      	movs	r3, #6
    b478:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    b47a:	68fb      	ldr	r3, [r7, #12]
    b47c:	b29b      	uxth	r3, r3
    b47e:	019b      	lsls	r3, r3, #6
    b480:	b29b      	uxth	r3, r3
    b482:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    b486:	b29a      	uxth	r2, r3
    b488:	68bb      	ldr	r3, [r7, #8]
    b48a:	b29b      	uxth	r3, r3
    b48c:	f003 031f 	and.w	r3, r3, #31
    b490:	b29b      	uxth	r3, r3
    b492:	4313      	orrs	r3, r2
    b494:	b29a      	uxth	r2, r3
    b496:	687b      	ldr	r3, [r7, #4]
    b498:	b29b      	uxth	r3, r3
    b49a:	031b      	lsls	r3, r3, #12
    b49c:	b29b      	uxth	r3, r3
    b49e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    b4a2:	b29b      	uxth	r3, r3
    b4a4:	4313      	orrs	r3, r2
    b4a6:	b29a      	uxth	r2, r3
    b4a8:	683b      	ldr	r3, [r7, #0]
    b4aa:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    b4ac:	683a      	ldr	r2, [r7, #0]
    b4ae:	78d3      	ldrb	r3, [r2, #3]
    b4b0:	f043 0303 	orr.w	r3, r3, #3
    b4b4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    b4b6:	683a      	ldr	r2, [r7, #0]
    b4b8:	78d3      	ldrb	r3, [r2, #3]
    b4ba:	f043 030c 	orr.w	r3, r3, #12
    b4be:	70d3      	strb	r3, [r2, #3]
}
    b4c0:	bf00      	nop
    b4c2:	3714      	adds	r7, #20
    b4c4:	46bd      	mov	sp, r7
    b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4ca:	4770      	bx	lr
    b4cc:	00800084 	.word	0x00800084

0000b4d0 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    b4d0:	b580      	push	{r7, lr}
    b4d2:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    b4d4:	bf00      	nop
    b4d6:	2203      	movs	r2, #3
    b4d8:	2100      	movs	r1, #0
    b4da:	4804      	ldr	r0, [pc, #16]	; (b4ec <_usb_d_dev_wait_dpll_rdy+0x1c>)
    b4dc:	4b04      	ldr	r3, [pc, #16]	; (b4f0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    b4de:	4798      	blx	r3
    b4e0:	4603      	mov	r3, r0
    b4e2:	2b03      	cmp	r3, #3
    b4e4:	d1f7      	bne.n	b4d6 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    b4e6:	bf00      	nop
    b4e8:	bd80      	pop	{r7, pc}
    b4ea:	bf00      	nop
    b4ec:	40001000 	.word	0x40001000
    b4f0:	0000af05 	.word	0x0000af05

0000b4f4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    b4f4:	b580      	push	{r7, lr}
    b4f6:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    b4f8:	480e      	ldr	r0, [pc, #56]	; (b534 <_usb_d_dev_wait_dfll_rdy+0x40>)
    b4fa:	4b0f      	ldr	r3, [pc, #60]	; (b538 <_usb_d_dev_wait_dfll_rdy+0x44>)
    b4fc:	4798      	blx	r3
    b4fe:	4603      	mov	r3, r0
    b500:	2b00      	cmp	r3, #0
    b502:	d00a      	beq.n	b51a <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    b504:	bf00      	nop
    b506:	f44f 6110 	mov.w	r1, #2304	; 0x900
    b50a:	480a      	ldr	r0, [pc, #40]	; (b534 <_usb_d_dev_wait_dfll_rdy+0x40>)
    b50c:	4b0b      	ldr	r3, [pc, #44]	; (b53c <_usb_d_dev_wait_dfll_rdy+0x48>)
    b50e:	4798      	blx	r3
    b510:	4603      	mov	r3, r0
    b512:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    b516:	d1f6      	bne.n	b506 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    b518:	e009      	b.n	b52e <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    b51a:	bf00      	nop
    b51c:	f44f 7180 	mov.w	r1, #256	; 0x100
    b520:	4804      	ldr	r0, [pc, #16]	; (b534 <_usb_d_dev_wait_dfll_rdy+0x40>)
    b522:	4b06      	ldr	r3, [pc, #24]	; (b53c <_usb_d_dev_wait_dfll_rdy+0x48>)
    b524:	4798      	blx	r3
    b526:	4603      	mov	r3, r0
    b528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b52c:	d1f6      	bne.n	b51c <_usb_d_dev_wait_dfll_rdy+0x28>
}
    b52e:	bf00      	nop
    b530:	bd80      	pop	{r7, pc}
    b532:	bf00      	nop
    b534:	40001000 	.word	0x40001000
    b538:	0000af63 	.word	0x0000af63
    b53c:	0000af3d 	.word	0x0000af3d

0000b540 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    b540:	b580      	push	{r7, lr}
    b542:	b082      	sub	sp, #8
    b544:	af00      	add	r7, sp, #0
    b546:	4603      	mov	r3, r0
    b548:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    b54a:	79fb      	ldrb	r3, [r7, #7]
    b54c:	2b00      	cmp	r3, #0
    b54e:	d102      	bne.n	b556 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    b550:	4b05      	ldr	r3, [pc, #20]	; (b568 <_usb_d_dev_wait_clk_rdy+0x28>)
    b552:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    b554:	e004      	b.n	b560 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    b556:	79fb      	ldrb	r3, [r7, #7]
    b558:	2b01      	cmp	r3, #1
    b55a:	d101      	bne.n	b560 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    b55c:	4b03      	ldr	r3, [pc, #12]	; (b56c <_usb_d_dev_wait_clk_rdy+0x2c>)
    b55e:	4798      	blx	r3
}
    b560:	bf00      	nop
    b562:	3708      	adds	r7, #8
    b564:	46bd      	mov	sp, r7
    b566:	bd80      	pop	{r7, pc}
    b568:	0000b4f5 	.word	0x0000b4f5
    b56c:	0000b4d1 	.word	0x0000b4d1

0000b570 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    b570:	b580      	push	{r7, lr}
    b572:	b082      	sub	sp, #8
    b574:	af00      	add	r7, sp, #0
    b576:	4603      	mov	r3, r0
    b578:	6039      	str	r1, [r7, #0]
    b57a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    b57c:	683b      	ldr	r3, [r7, #0]
    b57e:	b2da      	uxtb	r2, r3
    b580:	79fb      	ldrb	r3, [r7, #7]
    b582:	4619      	mov	r1, r3
    b584:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b588:	4b02      	ldr	r3, [pc, #8]	; (b594 <_usbd_ep_int_ack+0x24>)
    b58a:	4798      	blx	r3
}
    b58c:	bf00      	nop
    b58e:	3708      	adds	r7, #8
    b590:	46bd      	mov	sp, r7
    b592:	bd80      	pop	{r7, pc}
    b594:	0000b049 	.word	0x0000b049

0000b598 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    b598:	b580      	push	{r7, lr}
    b59a:	b082      	sub	sp, #8
    b59c:	af00      	add	r7, sp, #0
    b59e:	4603      	mov	r3, r0
    b5a0:	6039      	str	r1, [r7, #0]
    b5a2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    b5a4:	683b      	ldr	r3, [r7, #0]
    b5a6:	b2da      	uxtb	r2, r3
    b5a8:	79fb      	ldrb	r3, [r7, #7]
    b5aa:	4619      	mov	r1, r3
    b5ac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b5b0:	4b02      	ldr	r3, [pc, #8]	; (b5bc <_usbd_ep_int_en+0x24>)
    b5b2:	4798      	blx	r3
}
    b5b4:	bf00      	nop
    b5b6:	3708      	adds	r7, #8
    b5b8:	46bd      	mov	sp, r7
    b5ba:	bd80      	pop	{r7, pc}
    b5bc:	0000b11d 	.word	0x0000b11d

0000b5c0 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    b5c0:	b580      	push	{r7, lr}
    b5c2:	b082      	sub	sp, #8
    b5c4:	af00      	add	r7, sp, #0
    b5c6:	4603      	mov	r3, r0
    b5c8:	6039      	str	r1, [r7, #0]
    b5ca:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    b5cc:	683b      	ldr	r3, [r7, #0]
    b5ce:	b2da      	uxtb	r2, r3
    b5d0:	79fb      	ldrb	r3, [r7, #7]
    b5d2:	4619      	mov	r1, r3
    b5d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b5d8:	4b02      	ldr	r3, [pc, #8]	; (b5e4 <_usbd_ep_int_dis+0x24>)
    b5da:	4798      	blx	r3
}
    b5dc:	bf00      	nop
    b5de:	3708      	adds	r7, #8
    b5e0:	46bd      	mov	sp, r7
    b5e2:	bd80      	pop	{r7, pc}
    b5e4:	0000b149 	.word	0x0000b149

0000b5e8 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    b5e8:	b580      	push	{r7, lr}
    b5ea:	b082      	sub	sp, #8
    b5ec:	af00      	add	r7, sp, #0
    b5ee:	4603      	mov	r3, r0
    b5f0:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    b5f2:	79fb      	ldrb	r3, [r7, #7]
    b5f4:	4619      	mov	r1, r3
    b5f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b5fa:	4b06      	ldr	r3, [pc, #24]	; (b614 <_usbd_ep_is_ctrl+0x2c>)
    b5fc:	4798      	blx	r3
    b5fe:	4603      	mov	r3, r0
    b600:	2b11      	cmp	r3, #17
    b602:	bf0c      	ite	eq
    b604:	2301      	moveq	r3, #1
    b606:	2300      	movne	r3, #0
    b608:	b2db      	uxtb	r3, r3
}
    b60a:	4618      	mov	r0, r3
    b60c:	3708      	adds	r7, #8
    b60e:	46bd      	mov	sp, r7
    b610:	bd80      	pop	{r7, pc}
    b612:	bf00      	nop
    b614:	0000b203 	.word	0x0000b203

0000b618 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    b618:	b580      	push	{r7, lr}
    b61a:	b082      	sub	sp, #8
    b61c:	af00      	add	r7, sp, #0
    b61e:	4603      	mov	r3, r0
    b620:	71fb      	strb	r3, [r7, #7]
    b622:	460b      	mov	r3, r1
    b624:	71bb      	strb	r3, [r7, #6]
    b626:	4613      	mov	r3, r2
    b628:	717b      	strb	r3, [r7, #5]
	if (st) {
    b62a:	797b      	ldrb	r3, [r7, #5]
    b62c:	2b00      	cmp	r3, #0
    b62e:	d00b      	beq.n	b648 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b630:	79bb      	ldrb	r3, [r7, #6]
    b632:	2210      	movs	r2, #16
    b634:	fa02 f303 	lsl.w	r3, r2, r3
    b638:	b2da      	uxtb	r2, r3
    b63a:	79fb      	ldrb	r3, [r7, #7]
    b63c:	4619      	mov	r1, r3
    b63e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b642:	4b09      	ldr	r3, [pc, #36]	; (b668 <_usbd_ep_set_stall+0x50>)
    b644:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    b646:	e00a      	b.n	b65e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b648:	79bb      	ldrb	r3, [r7, #6]
    b64a:	2210      	movs	r2, #16
    b64c:	fa02 f303 	lsl.w	r3, r2, r3
    b650:	b2da      	uxtb	r2, r3
    b652:	79fb      	ldrb	r3, [r7, #7]
    b654:	4619      	mov	r1, r3
    b656:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b65a:	4b04      	ldr	r3, [pc, #16]	; (b66c <_usbd_ep_set_stall+0x54>)
    b65c:	4798      	blx	r3
}
    b65e:	bf00      	nop
    b660:	3708      	adds	r7, #8
    b662:	46bd      	mov	sp, r7
    b664:	bd80      	pop	{r7, pc}
    b666:	bf00      	nop
    b668:	0000b075 	.word	0x0000b075
    b66c:	0000b0c9 	.word	0x0000b0c9

0000b670 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    b670:	b580      	push	{r7, lr}
    b672:	b084      	sub	sp, #16
    b674:	af00      	add	r7, sp, #0
    b676:	4603      	mov	r3, r0
    b678:	460a      	mov	r2, r1
    b67a:	71fb      	strb	r3, [r7, #7]
    b67c:	4613      	mov	r3, r2
    b67e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    b680:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b684:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b686:	79fb      	ldrb	r3, [r7, #7]
    b688:	4619      	mov	r1, r3
    b68a:	68f8      	ldr	r0, [r7, #12]
    b68c:	4b08      	ldr	r3, [pc, #32]	; (b6b0 <_usbd_ep_is_stalled+0x40>)
    b68e:	4798      	blx	r3
    b690:	4603      	mov	r3, r0
    b692:	4619      	mov	r1, r3
    b694:	79bb      	ldrb	r3, [r7, #6]
    b696:	2210      	movs	r2, #16
    b698:	fa02 f303 	lsl.w	r3, r2, r3
    b69c:	400b      	ands	r3, r1
    b69e:	2b00      	cmp	r3, #0
    b6a0:	bf14      	ite	ne
    b6a2:	2301      	movne	r3, #1
    b6a4:	2300      	moveq	r3, #0
    b6a6:	b2db      	uxtb	r3, r3
}
    b6a8:	4618      	mov	r0, r3
    b6aa:	3710      	adds	r7, #16
    b6ac:	46bd      	mov	sp, r7
    b6ae:	bd80      	pop	{r7, pc}
    b6b0:	0000b0a1 	.word	0x0000b0a1

0000b6b4 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    b6b4:	b580      	push	{r7, lr}
    b6b6:	b084      	sub	sp, #16
    b6b8:	af00      	add	r7, sp, #0
    b6ba:	4603      	mov	r3, r0
    b6bc:	460a      	mov	r2, r1
    b6be:	71fb      	strb	r3, [r7, #7]
    b6c0:	4613      	mov	r3, r2
    b6c2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    b6c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b6c8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    b6ca:	79fb      	ldrb	r3, [r7, #7]
    b6cc:	4619      	mov	r1, r3
    b6ce:	68f8      	ldr	r0, [r7, #12]
    b6d0:	4b08      	ldr	r3, [pc, #32]	; (b6f4 <_usbd_ep_is_stall_sent+0x40>)
    b6d2:	4798      	blx	r3
    b6d4:	4603      	mov	r3, r0
    b6d6:	4619      	mov	r1, r3
    b6d8:	79bb      	ldrb	r3, [r7, #6]
    b6da:	2220      	movs	r2, #32
    b6dc:	fa02 f303 	lsl.w	r3, r2, r3
    b6e0:	400b      	ands	r3, r1
    b6e2:	2b00      	cmp	r3, #0
    b6e4:	bf14      	ite	ne
    b6e6:	2301      	movne	r3, #1
    b6e8:	2300      	moveq	r3, #0
    b6ea:	b2db      	uxtb	r3, r3
}
    b6ec:	4618      	mov	r0, r3
    b6ee:	3710      	adds	r7, #16
    b6f0:	46bd      	mov	sp, r7
    b6f2:	bd80      	pop	{r7, pc}
    b6f4:	0000b021 	.word	0x0000b021

0000b6f8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    b6f8:	b580      	push	{r7, lr}
    b6fa:	b082      	sub	sp, #8
    b6fc:	af00      	add	r7, sp, #0
    b6fe:	4603      	mov	r3, r0
    b700:	460a      	mov	r2, r1
    b702:	71fb      	strb	r3, [r7, #7]
    b704:	4613      	mov	r3, r2
    b706:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    b708:	79bb      	ldrb	r3, [r7, #6]
    b70a:	2220      	movs	r2, #32
    b70c:	409a      	lsls	r2, r3
    b70e:	79fb      	ldrb	r3, [r7, #7]
    b710:	4611      	mov	r1, r2
    b712:	4618      	mov	r0, r3
    b714:	4b02      	ldr	r3, [pc, #8]	; (b720 <_usbd_ep_ack_stall+0x28>)
    b716:	4798      	blx	r3
}
    b718:	bf00      	nop
    b71a:	3708      	adds	r7, #8
    b71c:	46bd      	mov	sp, r7
    b71e:	bd80      	pop	{r7, pc}
    b720:	0000b571 	.word	0x0000b571

0000b724 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    b724:	b580      	push	{r7, lr}
    b726:	b082      	sub	sp, #8
    b728:	af00      	add	r7, sp, #0
    b72a:	4603      	mov	r3, r0
    b72c:	71fb      	strb	r3, [r7, #7]
    b72e:	460b      	mov	r3, r1
    b730:	71bb      	strb	r3, [r7, #6]
    b732:	4613      	mov	r3, r2
    b734:	717b      	strb	r3, [r7, #5]
	if (en) {
    b736:	797b      	ldrb	r3, [r7, #5]
    b738:	2b00      	cmp	r3, #0
    b73a:	d008      	beq.n	b74e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    b73c:	79bb      	ldrb	r3, [r7, #6]
    b73e:	2220      	movs	r2, #32
    b740:	409a      	lsls	r2, r3
    b742:	79fb      	ldrb	r3, [r7, #7]
    b744:	4611      	mov	r1, r2
    b746:	4618      	mov	r0, r3
    b748:	4b07      	ldr	r3, [pc, #28]	; (b768 <_usbd_ep_int_stall_en+0x44>)
    b74a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    b74c:	e007      	b.n	b75e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    b74e:	79bb      	ldrb	r3, [r7, #6]
    b750:	2220      	movs	r2, #32
    b752:	409a      	lsls	r2, r3
    b754:	79fb      	ldrb	r3, [r7, #7]
    b756:	4611      	mov	r1, r2
    b758:	4618      	mov	r0, r3
    b75a:	4b04      	ldr	r3, [pc, #16]	; (b76c <_usbd_ep_int_stall_en+0x48>)
    b75c:	4798      	blx	r3
}
    b75e:	bf00      	nop
    b760:	3708      	adds	r7, #8
    b762:	46bd      	mov	sp, r7
    b764:	bd80      	pop	{r7, pc}
    b766:	bf00      	nop
    b768:	0000b599 	.word	0x0000b599
    b76c:	0000b5c1 	.word	0x0000b5c1

0000b770 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    b770:	b580      	push	{r7, lr}
    b772:	b082      	sub	sp, #8
    b774:	af00      	add	r7, sp, #0
    b776:	4603      	mov	r3, r0
    b778:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    b77a:	79fb      	ldrb	r3, [r7, #7]
    b77c:	4619      	mov	r1, r3
    b77e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b782:	4b03      	ldr	r3, [pc, #12]	; (b790 <_usbd_ep_stop_setup+0x20>)
    b784:	4798      	blx	r3
}
    b786:	bf00      	nop
    b788:	3708      	adds	r7, #8
    b78a:	46bd      	mov	sp, r7
    b78c:	bd80      	pop	{r7, pc}
    b78e:	bf00      	nop
    b790:	0000b0f5 	.word	0x0000b0f5

0000b794 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    b794:	b580      	push	{r7, lr}
    b796:	b082      	sub	sp, #8
    b798:	af00      	add	r7, sp, #0
    b79a:	4603      	mov	r3, r0
    b79c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    b79e:	79fb      	ldrb	r3, [r7, #7]
    b7a0:	2210      	movs	r2, #16
    b7a2:	4619      	mov	r1, r3
    b7a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b7a8:	4b05      	ldr	r3, [pc, #20]	; (b7c0 <_usbd_ep_is_setup+0x2c>)
    b7aa:	4798      	blx	r3
    b7ac:	4603      	mov	r3, r0
    b7ae:	2b00      	cmp	r3, #0
    b7b0:	bf14      	ite	ne
    b7b2:	2301      	movne	r3, #1
    b7b4:	2300      	moveq	r3, #0
    b7b6:	b2db      	uxtb	r3, r3
}
    b7b8:	4618      	mov	r0, r3
    b7ba:	3708      	adds	r7, #8
    b7bc:	46bd      	mov	sp, r7
    b7be:	bd80      	pop	{r7, pc}
    b7c0:	0000afeb 	.word	0x0000afeb

0000b7c4 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    b7c4:	b580      	push	{r7, lr}
    b7c6:	b082      	sub	sp, #8
    b7c8:	af00      	add	r7, sp, #0
    b7ca:	4603      	mov	r3, r0
    b7cc:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    b7ce:	79fb      	ldrb	r3, [r7, #7]
    b7d0:	2110      	movs	r1, #16
    b7d2:	4618      	mov	r0, r3
    b7d4:	4b02      	ldr	r3, [pc, #8]	; (b7e0 <_usbd_ep_ack_setup+0x1c>)
    b7d6:	4798      	blx	r3
}
    b7d8:	bf00      	nop
    b7da:	3708      	adds	r7, #8
    b7dc:	46bd      	mov	sp, r7
    b7de:	bd80      	pop	{r7, pc}
    b7e0:	0000b571 	.word	0x0000b571

0000b7e4 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    b7e4:	b580      	push	{r7, lr}
    b7e6:	b082      	sub	sp, #8
    b7e8:	af00      	add	r7, sp, #0
    b7ea:	4603      	mov	r3, r0
    b7ec:	71fb      	strb	r3, [r7, #7]
    b7ee:	460b      	mov	r3, r1
    b7f0:	71bb      	strb	r3, [r7, #6]
    b7f2:	4613      	mov	r3, r2
    b7f4:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    b7f6:	797b      	ldrb	r3, [r7, #5]
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	d00b      	beq.n	b814 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b7fc:	79bb      	ldrb	r3, [r7, #6]
    b7fe:	2201      	movs	r2, #1
    b800:	fa02 f303 	lsl.w	r3, r2, r3
    b804:	b2da      	uxtb	r2, r3
    b806:	79fb      	ldrb	r3, [r7, #7]
    b808:	4619      	mov	r1, r3
    b80a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b80e:	4b09      	ldr	r3, [pc, #36]	; (b834 <_usbd_ep_set_toggle+0x50>)
    b810:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    b812:	e00a      	b.n	b82a <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b814:	79bb      	ldrb	r3, [r7, #6]
    b816:	2201      	movs	r2, #1
    b818:	fa02 f303 	lsl.w	r3, r2, r3
    b81c:	b2da      	uxtb	r2, r3
    b81e:	79fb      	ldrb	r3, [r7, #7]
    b820:	4619      	mov	r1, r3
    b822:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b826:	4b04      	ldr	r3, [pc, #16]	; (b838 <_usbd_ep_set_toggle+0x54>)
    b828:	4798      	blx	r3
}
    b82a:	bf00      	nop
    b82c:	3708      	adds	r7, #8
    b82e:	46bd      	mov	sp, r7
    b830:	bd80      	pop	{r7, pc}
    b832:	bf00      	nop
    b834:	0000b075 	.word	0x0000b075
    b838:	0000b0c9 	.word	0x0000b0c9

0000b83c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    b83c:	b580      	push	{r7, lr}
    b83e:	b082      	sub	sp, #8
    b840:	af00      	add	r7, sp, #0
    b842:	4603      	mov	r3, r0
    b844:	460a      	mov	r2, r1
    b846:	71fb      	strb	r3, [r7, #7]
    b848:	4613      	mov	r3, r2
    b84a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    b84c:	79bb      	ldrb	r3, [r7, #6]
    b84e:	2201      	movs	r2, #1
    b850:	409a      	lsls	r2, r3
    b852:	79fb      	ldrb	r3, [r7, #7]
    b854:	4611      	mov	r1, r2
    b856:	4618      	mov	r0, r3
    b858:	4b02      	ldr	r3, [pc, #8]	; (b864 <_usbd_ep_ack_io_cpt+0x28>)
    b85a:	4798      	blx	r3
}
    b85c:	bf00      	nop
    b85e:	3708      	adds	r7, #8
    b860:	46bd      	mov	sp, r7
    b862:	bd80      	pop	{r7, pc}
    b864:	0000b571 	.word	0x0000b571

0000b868 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    b868:	b480      	push	{r7}
    b86a:	b085      	sub	sp, #20
    b86c:	af00      	add	r7, sp, #0
    b86e:	4603      	mov	r3, r0
    b870:	603a      	str	r2, [r7, #0]
    b872:	71fb      	strb	r3, [r7, #7]
    b874:	460b      	mov	r3, r1
    b876:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b878:	79fa      	ldrb	r2, [r7, #7]
    b87a:	79bb      	ldrb	r3, [r7, #6]
    b87c:	0052      	lsls	r2, r2, #1
    b87e:	4413      	add	r3, r2
    b880:	011b      	lsls	r3, r3, #4
    b882:	4a06      	ldr	r2, [pc, #24]	; (b89c <_usbd_ep_set_buf+0x34>)
    b884:	4413      	add	r3, r2
    b886:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    b888:	68fb      	ldr	r3, [r7, #12]
    b88a:	683a      	ldr	r2, [r7, #0]
    b88c:	601a      	str	r2, [r3, #0]
}
    b88e:	bf00      	nop
    b890:	3714      	adds	r7, #20
    b892:	46bd      	mov	sp, r7
    b894:	f85d 7b04 	ldr.w	r7, [sp], #4
    b898:	4770      	bx	lr
    b89a:	bf00      	nop
    b89c:	2000250c 	.word	0x2000250c

0000b8a0 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    b8a0:	b480      	push	{r7}
    b8a2:	b085      	sub	sp, #20
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	4603      	mov	r3, r0
    b8a8:	71fb      	strb	r3, [r7, #7]
    b8aa:	460b      	mov	r3, r1
    b8ac:	71bb      	strb	r3, [r7, #6]
    b8ae:	4613      	mov	r3, r2
    b8b0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b8b2:	79fa      	ldrb	r2, [r7, #7]
    b8b4:	79bb      	ldrb	r3, [r7, #6]
    b8b6:	0052      	lsls	r2, r2, #1
    b8b8:	4413      	add	r3, r2
    b8ba:	011b      	lsls	r3, r3, #4
    b8bc:	4a08      	ldr	r2, [pc, #32]	; (b8e0 <_usbd_ep_set_in_count+0x40>)
    b8be:	4413      	add	r3, r2
    b8c0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    b8c2:	88bb      	ldrh	r3, [r7, #4]
    b8c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b8c8:	b299      	uxth	r1, r3
    b8ca:	68fa      	ldr	r2, [r7, #12]
    b8cc:	6853      	ldr	r3, [r2, #4]
    b8ce:	f361 339b 	bfi	r3, r1, #14, #14
    b8d2:	6053      	str	r3, [r2, #4]
}
    b8d4:	bf00      	nop
    b8d6:	3714      	adds	r7, #20
    b8d8:	46bd      	mov	sp, r7
    b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8de:	4770      	bx	lr
    b8e0:	2000250c 	.word	0x2000250c

0000b8e4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    b8e4:	b480      	push	{r7}
    b8e6:	b085      	sub	sp, #20
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	4603      	mov	r3, r0
    b8ec:	71fb      	strb	r3, [r7, #7]
    b8ee:	460b      	mov	r3, r1
    b8f0:	71bb      	strb	r3, [r7, #6]
    b8f2:	4613      	mov	r3, r2
    b8f4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b8f6:	79fa      	ldrb	r2, [r7, #7]
    b8f8:	79bb      	ldrb	r3, [r7, #6]
    b8fa:	0052      	lsls	r2, r2, #1
    b8fc:	4413      	add	r3, r2
    b8fe:	011b      	lsls	r3, r3, #4
    b900:	4a08      	ldr	r2, [pc, #32]	; (b924 <_usbd_ep_set_in_size+0x40>)
    b902:	4413      	add	r3, r2
    b904:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    b906:	88bb      	ldrh	r3, [r7, #4]
    b908:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b90c:	b299      	uxth	r1, r3
    b90e:	68fa      	ldr	r2, [r7, #12]
    b910:	6853      	ldr	r3, [r2, #4]
    b912:	f361 030d 	bfi	r3, r1, #0, #14
    b916:	6053      	str	r3, [r2, #4]
}
    b918:	bf00      	nop
    b91a:	3714      	adds	r7, #20
    b91c:	46bd      	mov	sp, r7
    b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b922:	4770      	bx	lr
    b924:	2000250c 	.word	0x2000250c

0000b928 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    b928:	b480      	push	{r7}
    b92a:	b085      	sub	sp, #20
    b92c:	af00      	add	r7, sp, #0
    b92e:	4603      	mov	r3, r0
    b930:	71fb      	strb	r3, [r7, #7]
    b932:	460b      	mov	r3, r1
    b934:	71bb      	strb	r3, [r7, #6]
    b936:	4613      	mov	r3, r2
    b938:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b93a:	79fa      	ldrb	r2, [r7, #7]
    b93c:	79bb      	ldrb	r3, [r7, #6]
    b93e:	0052      	lsls	r2, r2, #1
    b940:	4413      	add	r3, r2
    b942:	011b      	lsls	r3, r3, #4
    b944:	4a08      	ldr	r2, [pc, #32]	; (b968 <_usbd_ep_set_out_count+0x40>)
    b946:	4413      	add	r3, r2
    b948:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    b94a:	88bb      	ldrh	r3, [r7, #4]
    b94c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b950:	b299      	uxth	r1, r3
    b952:	68fa      	ldr	r2, [r7, #12]
    b954:	6853      	ldr	r3, [r2, #4]
    b956:	f361 030d 	bfi	r3, r1, #0, #14
    b95a:	6053      	str	r3, [r2, #4]
}
    b95c:	bf00      	nop
    b95e:	3714      	adds	r7, #20
    b960:	46bd      	mov	sp, r7
    b962:	f85d 7b04 	ldr.w	r7, [sp], #4
    b966:	4770      	bx	lr
    b968:	2000250c 	.word	0x2000250c

0000b96c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    b96c:	b480      	push	{r7}
    b96e:	b085      	sub	sp, #20
    b970:	af00      	add	r7, sp, #0
    b972:	4603      	mov	r3, r0
    b974:	71fb      	strb	r3, [r7, #7]
    b976:	460b      	mov	r3, r1
    b978:	71bb      	strb	r3, [r7, #6]
    b97a:	4613      	mov	r3, r2
    b97c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b97e:	79fa      	ldrb	r2, [r7, #7]
    b980:	79bb      	ldrb	r3, [r7, #6]
    b982:	0052      	lsls	r2, r2, #1
    b984:	4413      	add	r3, r2
    b986:	011b      	lsls	r3, r3, #4
    b988:	4a08      	ldr	r2, [pc, #32]	; (b9ac <_usbd_ep_set_out_size+0x40>)
    b98a:	4413      	add	r3, r2
    b98c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    b98e:	88bb      	ldrh	r3, [r7, #4]
    b990:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b994:	b299      	uxth	r1, r3
    b996:	68fa      	ldr	r2, [r7, #12]
    b998:	6853      	ldr	r3, [r2, #4]
    b99a:	f361 339b 	bfi	r3, r1, #14, #14
    b99e:	6053      	str	r3, [r2, #4]
}
    b9a0:	bf00      	nop
    b9a2:	3714      	adds	r7, #20
    b9a4:	46bd      	mov	sp, r7
    b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9aa:	4770      	bx	lr
    b9ac:	2000250c 	.word	0x2000250c

0000b9b0 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    b9b0:	b580      	push	{r7, lr}
    b9b2:	b084      	sub	sp, #16
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	60ba      	str	r2, [r7, #8]
    b9b8:	607b      	str	r3, [r7, #4]
    b9ba:	4603      	mov	r3, r0
    b9bc:	73fb      	strb	r3, [r7, #15]
    b9be:	460b      	mov	r3, r1
    b9c0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    b9c2:	68bb      	ldr	r3, [r7, #8]
    b9c4:	b29a      	uxth	r2, r3
    b9c6:	7bb9      	ldrb	r1, [r7, #14]
    b9c8:	7bfb      	ldrb	r3, [r7, #15]
    b9ca:	4618      	mov	r0, r3
    b9cc:	4b06      	ldr	r3, [pc, #24]	; (b9e8 <_usbd_ep_set_in_trans+0x38>)
    b9ce:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    b9d0:	687b      	ldr	r3, [r7, #4]
    b9d2:	b29a      	uxth	r2, r3
    b9d4:	7bb9      	ldrb	r1, [r7, #14]
    b9d6:	7bfb      	ldrb	r3, [r7, #15]
    b9d8:	4618      	mov	r0, r3
    b9da:	4b04      	ldr	r3, [pc, #16]	; (b9ec <_usbd_ep_set_in_trans+0x3c>)
    b9dc:	4798      	blx	r3
}
    b9de:	bf00      	nop
    b9e0:	3710      	adds	r7, #16
    b9e2:	46bd      	mov	sp, r7
    b9e4:	bd80      	pop	{r7, pc}
    b9e6:	bf00      	nop
    b9e8:	0000b8e5 	.word	0x0000b8e5
    b9ec:	0000b8a1 	.word	0x0000b8a1

0000b9f0 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    b9f0:	b580      	push	{r7, lr}
    b9f2:	b084      	sub	sp, #16
    b9f4:	af00      	add	r7, sp, #0
    b9f6:	60ba      	str	r2, [r7, #8]
    b9f8:	607b      	str	r3, [r7, #4]
    b9fa:	4603      	mov	r3, r0
    b9fc:	73fb      	strb	r3, [r7, #15]
    b9fe:	460b      	mov	r3, r1
    ba00:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    ba02:	68bb      	ldr	r3, [r7, #8]
    ba04:	b29a      	uxth	r2, r3
    ba06:	7bb9      	ldrb	r1, [r7, #14]
    ba08:	7bfb      	ldrb	r3, [r7, #15]
    ba0a:	4618      	mov	r0, r3
    ba0c:	4b06      	ldr	r3, [pc, #24]	; (ba28 <_usbd_ep_set_out_trans+0x38>)
    ba0e:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    ba10:	687b      	ldr	r3, [r7, #4]
    ba12:	b29a      	uxth	r2, r3
    ba14:	7bb9      	ldrb	r1, [r7, #14]
    ba16:	7bfb      	ldrb	r3, [r7, #15]
    ba18:	4618      	mov	r0, r3
    ba1a:	4b04      	ldr	r3, [pc, #16]	; (ba2c <_usbd_ep_set_out_trans+0x3c>)
    ba1c:	4798      	blx	r3
}
    ba1e:	bf00      	nop
    ba20:	3710      	adds	r7, #16
    ba22:	46bd      	mov	sp, r7
    ba24:	bd80      	pop	{r7, pc}
    ba26:	bf00      	nop
    ba28:	0000b96d 	.word	0x0000b96d
    ba2c:	0000b929 	.word	0x0000b929

0000ba30 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    ba30:	b480      	push	{r7}
    ba32:	b085      	sub	sp, #20
    ba34:	af00      	add	r7, sp, #0
    ba36:	4603      	mov	r3, r0
    ba38:	460a      	mov	r2, r1
    ba3a:	71fb      	strb	r3, [r7, #7]
    ba3c:	4613      	mov	r3, r2
    ba3e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ba40:	79fa      	ldrb	r2, [r7, #7]
    ba42:	79bb      	ldrb	r3, [r7, #6]
    ba44:	0052      	lsls	r2, r2, #1
    ba46:	4413      	add	r3, r2
    ba48:	011b      	lsls	r3, r3, #4
    ba4a:	4a06      	ldr	r2, [pc, #24]	; (ba64 <_usbd_ep_clear_bank_status+0x34>)
    ba4c:	4413      	add	r3, r2
    ba4e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    ba50:	68fb      	ldr	r3, [r7, #12]
    ba52:	2200      	movs	r2, #0
    ba54:	729a      	strb	r2, [r3, #10]
}
    ba56:	bf00      	nop
    ba58:	3714      	adds	r7, #20
    ba5a:	46bd      	mov	sp, r7
    ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba60:	4770      	bx	lr
    ba62:	bf00      	nop
    ba64:	2000250c 	.word	0x2000250c

0000ba68 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ba68:	b580      	push	{r7, lr}
    ba6a:	b082      	sub	sp, #8
    ba6c:	af00      	add	r7, sp, #0
    ba6e:	4603      	mov	r3, r0
    ba70:	71fb      	strb	r3, [r7, #7]
    ba72:	460b      	mov	r3, r1
    ba74:	71bb      	strb	r3, [r7, #6]
    ba76:	4613      	mov	r3, r2
    ba78:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ba7a:	797b      	ldrb	r3, [r7, #5]
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d00b      	beq.n	ba98 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ba80:	79bb      	ldrb	r3, [r7, #6]
    ba82:	2240      	movs	r2, #64	; 0x40
    ba84:	fa02 f303 	lsl.w	r3, r2, r3
    ba88:	b2da      	uxtb	r2, r3
    ba8a:	79fb      	ldrb	r3, [r7, #7]
    ba8c:	4619      	mov	r1, r3
    ba8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ba92:	4b09      	ldr	r3, [pc, #36]	; (bab8 <_usbd_ep_set_in_rdy+0x50>)
    ba94:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ba96:	e00a      	b.n	baae <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ba98:	79bb      	ldrb	r3, [r7, #6]
    ba9a:	2240      	movs	r2, #64	; 0x40
    ba9c:	fa02 f303 	lsl.w	r3, r2, r3
    baa0:	b2da      	uxtb	r2, r3
    baa2:	79fb      	ldrb	r3, [r7, #7]
    baa4:	4619      	mov	r1, r3
    baa6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    baaa:	4b04      	ldr	r3, [pc, #16]	; (babc <_usbd_ep_set_in_rdy+0x54>)
    baac:	4798      	blx	r3
}
    baae:	bf00      	nop
    bab0:	3708      	adds	r7, #8
    bab2:	46bd      	mov	sp, r7
    bab4:	bd80      	pop	{r7, pc}
    bab6:	bf00      	nop
    bab8:	0000b075 	.word	0x0000b075
    babc:	0000b0c9 	.word	0x0000b0c9

0000bac0 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    bac0:	b580      	push	{r7, lr}
    bac2:	b082      	sub	sp, #8
    bac4:	af00      	add	r7, sp, #0
    bac6:	4603      	mov	r3, r0
    bac8:	71fb      	strb	r3, [r7, #7]
    baca:	460b      	mov	r3, r1
    bacc:	71bb      	strb	r3, [r7, #6]
    bace:	4613      	mov	r3, r2
    bad0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    bad2:	797b      	ldrb	r3, [r7, #5]
    bad4:	2b00      	cmp	r3, #0
    bad6:	d00b      	beq.n	baf0 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    bad8:	79bb      	ldrb	r3, [r7, #6]
    bada:	2240      	movs	r2, #64	; 0x40
    badc:	fa02 f303 	lsl.w	r3, r2, r3
    bae0:	b2da      	uxtb	r2, r3
    bae2:	79fb      	ldrb	r3, [r7, #7]
    bae4:	4619      	mov	r1, r3
    bae6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    baea:	4b09      	ldr	r3, [pc, #36]	; (bb10 <_usbd_ep_set_out_rdy+0x50>)
    baec:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    baee:	e00a      	b.n	bb06 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    baf0:	79bb      	ldrb	r3, [r7, #6]
    baf2:	2240      	movs	r2, #64	; 0x40
    baf4:	fa02 f303 	lsl.w	r3, r2, r3
    baf8:	b2da      	uxtb	r2, r3
    bafa:	79fb      	ldrb	r3, [r7, #7]
    bafc:	4619      	mov	r1, r3
    bafe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bb02:	4b04      	ldr	r3, [pc, #16]	; (bb14 <_usbd_ep_set_out_rdy+0x54>)
    bb04:	4798      	blx	r3
}
    bb06:	bf00      	nop
    bb08:	3708      	adds	r7, #8
    bb0a:	46bd      	mov	sp, r7
    bb0c:	bd80      	pop	{r7, pc}
    bb0e:	bf00      	nop
    bb10:	0000b0c9 	.word	0x0000b0c9
    bb14:	0000b075 	.word	0x0000b075

0000bb18 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    bb18:	b480      	push	{r7}
    bb1a:	b083      	sub	sp, #12
    bb1c:	af00      	add	r7, sp, #0
    bb1e:	4603      	mov	r3, r0
    bb20:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    bb22:	88fb      	ldrh	r3, [r7, #6]
    bb24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bb28:	d820      	bhi.n	bb6c <_usbd_ep_pcksize_size+0x54>
    bb2a:	88fb      	ldrh	r3, [r7, #6]
    bb2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bb30:	d81a      	bhi.n	bb68 <_usbd_ep_pcksize_size+0x50>
    bb32:	88fb      	ldrh	r3, [r7, #6]
    bb34:	2b80      	cmp	r3, #128	; 0x80
    bb36:	d815      	bhi.n	bb64 <_usbd_ep_pcksize_size+0x4c>
    bb38:	88fb      	ldrh	r3, [r7, #6]
    bb3a:	2b40      	cmp	r3, #64	; 0x40
    bb3c:	d810      	bhi.n	bb60 <_usbd_ep_pcksize_size+0x48>
    bb3e:	88fb      	ldrh	r3, [r7, #6]
    bb40:	2b20      	cmp	r3, #32
    bb42:	d80b      	bhi.n	bb5c <_usbd_ep_pcksize_size+0x44>
    bb44:	88fb      	ldrh	r3, [r7, #6]
    bb46:	2b10      	cmp	r3, #16
    bb48:	d806      	bhi.n	bb58 <_usbd_ep_pcksize_size+0x40>
    bb4a:	88fb      	ldrh	r3, [r7, #6]
    bb4c:	2b08      	cmp	r3, #8
    bb4e:	bf8c      	ite	hi
    bb50:	2301      	movhi	r3, #1
    bb52:	2300      	movls	r3, #0
    bb54:	b2db      	uxtb	r3, r3
    bb56:	e00a      	b.n	bb6e <_usbd_ep_pcksize_size+0x56>
    bb58:	2302      	movs	r3, #2
    bb5a:	e008      	b.n	bb6e <_usbd_ep_pcksize_size+0x56>
    bb5c:	2303      	movs	r3, #3
    bb5e:	e006      	b.n	bb6e <_usbd_ep_pcksize_size+0x56>
    bb60:	2304      	movs	r3, #4
    bb62:	e004      	b.n	bb6e <_usbd_ep_pcksize_size+0x56>
    bb64:	2305      	movs	r3, #5
    bb66:	e002      	b.n	bb6e <_usbd_ep_pcksize_size+0x56>
    bb68:	2306      	movs	r3, #6
    bb6a:	e000      	b.n	bb6e <_usbd_ep_pcksize_size+0x56>
    bb6c:	2307      	movs	r3, #7
}
    bb6e:	4618      	mov	r0, r3
    bb70:	370c      	adds	r7, #12
    bb72:	46bd      	mov	sp, r7
    bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb78:	4770      	bx	lr
	...

0000bb7c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    bb7c:	b480      	push	{r7}
    bb7e:	b085      	sub	sp, #20
    bb80:	af00      	add	r7, sp, #0
    bb82:	4603      	mov	r3, r0
    bb84:	460a      	mov	r2, r1
    bb86:	71fb      	strb	r3, [r7, #7]
    bb88:	4613      	mov	r3, r2
    bb8a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    bb8c:	79fb      	ldrb	r3, [r7, #7]
    bb8e:	2b00      	cmp	r3, #0
    bb90:	d008      	beq.n	bba4 <_usb_d_dev_ept+0x28>
    bb92:	79bb      	ldrb	r3, [r7, #6]
    bb94:	2b00      	cmp	r3, #0
    bb96:	d003      	beq.n	bba0 <_usb_d_dev_ept+0x24>
    bb98:	79fb      	ldrb	r3, [r7, #7]
    bb9a:	3304      	adds	r3, #4
    bb9c:	b2db      	uxtb	r3, r3
    bb9e:	e002      	b.n	bba6 <_usb_d_dev_ept+0x2a>
    bba0:	79fb      	ldrb	r3, [r7, #7]
    bba2:	e000      	b.n	bba6 <_usb_d_dev_ept+0x2a>
    bba4:	2300      	movs	r3, #0
    bba6:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    bba8:	7bfa      	ldrb	r2, [r7, #15]
    bbaa:	4613      	mov	r3, r2
    bbac:	009b      	lsls	r3, r3, #2
    bbae:	4413      	add	r3, r2
    bbb0:	009b      	lsls	r3, r3, #2
    bbb2:	3310      	adds	r3, #16
    bbb4:	4a04      	ldr	r2, [pc, #16]	; (bbc8 <_usb_d_dev_ept+0x4c>)
    bbb6:	4413      	add	r3, r2
    bbb8:	3304      	adds	r3, #4
}
    bbba:	4618      	mov	r0, r3
    bbbc:	3714      	adds	r7, #20
    bbbe:	46bd      	mov	sp, r7
    bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbc4:	4770      	bx	lr
    bbc6:	bf00      	nop
    bbc8:	20002444 	.word	0x20002444

0000bbcc <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    bbcc:	b580      	push	{r7, lr}
    bbce:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    bbd0:	2104      	movs	r1, #4
    bbd2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bbd6:	4b03      	ldr	r3, [pc, #12]	; (bbe4 <_usb_d_dev_sof+0x18>)
    bbd8:	4798      	blx	r3
	dev_inst.callbacks.sof();
    bbda:	4b03      	ldr	r3, [pc, #12]	; (bbe8 <_usb_d_dev_sof+0x1c>)
    bbdc:	681b      	ldr	r3, [r3, #0]
    bbde:	4798      	blx	r3
}
    bbe0:	bf00      	nop
    bbe2:	bd80      	pop	{r7, pc}
    bbe4:	0000b243 	.word	0x0000b243
    bbe8:	20002444 	.word	0x20002444

0000bbec <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    bbec:	b580      	push	{r7, lr}
    bbee:	b084      	sub	sp, #16
    bbf0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    bbf2:	2300      	movs	r3, #0
    bbf4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bbf6:	f240 2101 	movw	r1, #513	; 0x201
    bbfa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bbfe:	4b1a      	ldr	r3, [pc, #104]	; (bc68 <_usb_d_dev_lpmsusp+0x7c>)
    bc00:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bc02:	f240 2101 	movw	r1, #513	; 0x201
    bc06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bc0a:	4b18      	ldr	r3, [pc, #96]	; (bc6c <_usb_d_dev_lpmsusp+0x80>)
    bc0c:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    bc0e:	2170      	movs	r1, #112	; 0x70
    bc10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bc14:	4b16      	ldr	r3, [pc, #88]	; (bc70 <_usb_d_dev_lpmsusp+0x84>)
    bc16:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    bc18:	2300      	movs	r3, #0
    bc1a:	73fb      	strb	r3, [r7, #15]
    bc1c:	e018      	b.n	bc50 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    bc1e:	7bfb      	ldrb	r3, [r7, #15]
    bc20:	015b      	lsls	r3, r3, #5
    bc22:	4a14      	ldr	r2, [pc, #80]	; (bc74 <_usb_d_dev_lpmsusp+0x88>)
    bc24:	4413      	add	r3, r2
    bc26:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    bc28:	687b      	ldr	r3, [r7, #4]
    bc2a:	891b      	ldrh	r3, [r3, #8]
    bc2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    bc30:	b2db      	uxtb	r3, r3
    bc32:	2b03      	cmp	r3, #3
    bc34:	d109      	bne.n	bc4a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    bc36:	687b      	ldr	r3, [r7, #4]
    bc38:	891b      	ldrh	r3, [r3, #8]
    bc3a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    bc3e:	b29b      	uxth	r3, r3
    bc40:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    bc42:	687b      	ldr	r3, [r7, #4]
    bc44:	2200      	movs	r2, #0
    bc46:	811a      	strh	r2, [r3, #8]
			break;
    bc48:	e005      	b.n	bc56 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    bc4a:	7bfb      	ldrb	r3, [r7, #15]
    bc4c:	3301      	adds	r3, #1
    bc4e:	73fb      	strb	r3, [r7, #15]
    bc50:	7bfb      	ldrb	r3, [r7, #15]
    bc52:	2b03      	cmp	r3, #3
    bc54:	d9e3      	bls.n	bc1e <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    bc56:	4b08      	ldr	r3, [pc, #32]	; (bc78 <_usb_d_dev_lpmsusp+0x8c>)
    bc58:	685b      	ldr	r3, [r3, #4]
    bc5a:	68b9      	ldr	r1, [r7, #8]
    bc5c:	2003      	movs	r0, #3
    bc5e:	4798      	blx	r3
}
    bc60:	bf00      	nop
    bc62:	3710      	adds	r7, #16
    bc64:	46bd      	mov	sp, r7
    bc66:	bd80      	pop	{r7, pc}
    bc68:	0000b243 	.word	0x0000b243
    bc6c:	0000b299 	.word	0x0000b299
    bc70:	0000b261 	.word	0x0000b261
    bc74:	2000250c 	.word	0x2000250c
    bc78:	20002444 	.word	0x20002444

0000bc7c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    bc7c:	b580      	push	{r7, lr}
    bc7e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    bc80:	2180      	movs	r1, #128	; 0x80
    bc82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bc86:	4b04      	ldr	r3, [pc, #16]	; (bc98 <_usb_d_dev_ramerr+0x1c>)
    bc88:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    bc8a:	4b04      	ldr	r3, [pc, #16]	; (bc9c <_usb_d_dev_ramerr+0x20>)
    bc8c:	685b      	ldr	r3, [r3, #4]
    bc8e:	2100      	movs	r1, #0
    bc90:	2005      	movs	r0, #5
    bc92:	4798      	blx	r3
}
    bc94:	bf00      	nop
    bc96:	bd80      	pop	{r7, pc}
    bc98:	0000b243 	.word	0x0000b243
    bc9c:	20002444 	.word	0x20002444

0000bca0 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    bca0:	b580      	push	{r7, lr}
    bca2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    bca4:	2170      	movs	r1, #112	; 0x70
    bca6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bcaa:	4b0b      	ldr	r3, [pc, #44]	; (bcd8 <_usb_d_dev_wakeup+0x38>)
    bcac:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    bcae:	2170      	movs	r1, #112	; 0x70
    bcb0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bcb4:	4b09      	ldr	r3, [pc, #36]	; (bcdc <_usb_d_dev_wakeup+0x3c>)
    bcb6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bcb8:	f240 2101 	movw	r1, #513	; 0x201
    bcbc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bcc0:	4b07      	ldr	r3, [pc, #28]	; (bce0 <_usb_d_dev_wakeup+0x40>)
    bcc2:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    bcc4:	2000      	movs	r0, #0
    bcc6:	4b07      	ldr	r3, [pc, #28]	; (bce4 <_usb_d_dev_wakeup+0x44>)
    bcc8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    bcca:	4b07      	ldr	r3, [pc, #28]	; (bce8 <_usb_d_dev_wakeup+0x48>)
    bccc:	685b      	ldr	r3, [r3, #4]
    bcce:	2100      	movs	r1, #0
    bcd0:	2002      	movs	r0, #2
    bcd2:	4798      	blx	r3
}
    bcd4:	bf00      	nop
    bcd6:	bd80      	pop	{r7, pc}
    bcd8:	0000b243 	.word	0x0000b243
    bcdc:	0000b299 	.word	0x0000b299
    bce0:	0000b261 	.word	0x0000b261
    bce4:	0000b541 	.word	0x0000b541
    bce8:	20002444 	.word	0x20002444

0000bcec <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    bcec:	b580      	push	{r7, lr}
    bcee:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    bcf0:	2200      	movs	r2, #0
    bcf2:	2100      	movs	r1, #0
    bcf4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bcf8:	4b0d      	ldr	r3, [pc, #52]	; (bd30 <_usb_d_dev_reset+0x44>)
    bcfa:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    bcfc:	2108      	movs	r1, #8
    bcfe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bd02:	4b0c      	ldr	r3, [pc, #48]	; (bd34 <_usb_d_dev_reset+0x48>)
    bd04:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    bd06:	2170      	movs	r1, #112	; 0x70
    bd08:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bd0c:	4b0a      	ldr	r3, [pc, #40]	; (bd38 <_usb_d_dev_reset+0x4c>)
    bd0e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bd10:	f240 2101 	movw	r1, #513	; 0x201
    bd14:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bd18:	4b08      	ldr	r3, [pc, #32]	; (bd3c <_usb_d_dev_reset+0x50>)
    bd1a:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    bd1c:	4b08      	ldr	r3, [pc, #32]	; (bd40 <_usb_d_dev_reset+0x54>)
    bd1e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    bd20:	4b08      	ldr	r3, [pc, #32]	; (bd44 <_usb_d_dev_reset+0x58>)
    bd22:	685b      	ldr	r3, [r3, #4]
    bd24:	2100      	movs	r1, #0
    bd26:	2001      	movs	r0, #1
    bd28:	4798      	blx	r3
}
    bd2a:	bf00      	nop
    bd2c:	bd80      	pop	{r7, pc}
    bd2e:	bf00      	nop
    bd30:	0000b1d9 	.word	0x0000b1d9
    bd34:	0000b243 	.word	0x0000b243
    bd38:	0000b299 	.word	0x0000b299
    bd3c:	0000b261 	.word	0x0000b261
    bd40:	0000c8a9 	.word	0x0000c8a9
    bd44:	20002444 	.word	0x20002444

0000bd48 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    bd48:	b580      	push	{r7, lr}
    bd4a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bd4c:	f240 2101 	movw	r1, #513	; 0x201
    bd50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bd54:	4b09      	ldr	r3, [pc, #36]	; (bd7c <_usb_d_dev_suspend+0x34>)
    bd56:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bd58:	f240 2101 	movw	r1, #513	; 0x201
    bd5c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bd60:	4b07      	ldr	r3, [pc, #28]	; (bd80 <_usb_d_dev_suspend+0x38>)
    bd62:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    bd64:	2170      	movs	r1, #112	; 0x70
    bd66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bd6a:	4b06      	ldr	r3, [pc, #24]	; (bd84 <_usb_d_dev_suspend+0x3c>)
    bd6c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    bd6e:	4b06      	ldr	r3, [pc, #24]	; (bd88 <_usb_d_dev_suspend+0x40>)
    bd70:	685b      	ldr	r3, [r3, #4]
    bd72:	2100      	movs	r1, #0
    bd74:	2004      	movs	r0, #4
    bd76:	4798      	blx	r3
}
    bd78:	bf00      	nop
    bd7a:	bd80      	pop	{r7, pc}
    bd7c:	0000b243 	.word	0x0000b243
    bd80:	0000b299 	.word	0x0000b299
    bd84:	0000b261 	.word	0x0000b261
    bd88:	20002444 	.word	0x20002444

0000bd8c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    bd8c:	b580      	push	{r7, lr}
    bd8e:	b082      	sub	sp, #8
    bd90:	af00      	add	r7, sp, #0
	bool     rc    = true;
    bd92:	2301      	movs	r3, #1
    bd94:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    bd96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bd9a:	4b22      	ldr	r3, [pc, #136]	; (be24 <_usb_d_dev_handle_nep+0x98>)
    bd9c:	4798      	blx	r3
    bd9e:	4603      	mov	r3, r0
    bda0:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    bda2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bda6:	4b20      	ldr	r3, [pc, #128]	; (be28 <_usb_d_dev_handle_nep+0x9c>)
    bda8:	4798      	blx	r3
    bdaa:	4603      	mov	r3, r0
    bdac:	461a      	mov	r2, r3
    bdae:	88bb      	ldrh	r3, [r7, #4]
    bdb0:	4013      	ands	r3, r2
    bdb2:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    bdb4:	88bb      	ldrh	r3, [r7, #4]
    bdb6:	f003 0304 	and.w	r3, r3, #4
    bdba:	2b00      	cmp	r3, #0
    bdbc:	d003      	beq.n	bdc6 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    bdbe:	4b1b      	ldr	r3, [pc, #108]	; (be2c <_usb_d_dev_handle_nep+0xa0>)
    bdc0:	4798      	blx	r3
		return true;
    bdc2:	2301      	movs	r3, #1
    bdc4:	e02a      	b.n	be1c <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    bdc6:	88bb      	ldrh	r3, [r7, #4]
    bdc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    bdcc:	2b00      	cmp	r3, #0
    bdce:	d002      	beq.n	bdd6 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    bdd0:	4b17      	ldr	r3, [pc, #92]	; (be30 <_usb_d_dev_handle_nep+0xa4>)
    bdd2:	4798      	blx	r3
    bdd4:	e021      	b.n	be1a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    bdd6:	88bb      	ldrh	r3, [r7, #4]
    bdd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bddc:	2b00      	cmp	r3, #0
    bdde:	d002      	beq.n	bde6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    bde0:	4b14      	ldr	r3, [pc, #80]	; (be34 <_usb_d_dev_handle_nep+0xa8>)
    bde2:	4798      	blx	r3
    bde4:	e019      	b.n	be1a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    bde6:	88bb      	ldrh	r3, [r7, #4]
    bde8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    bdec:	2b00      	cmp	r3, #0
    bdee:	d002      	beq.n	bdf6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    bdf0:	4b11      	ldr	r3, [pc, #68]	; (be38 <_usb_d_dev_handle_nep+0xac>)
    bdf2:	4798      	blx	r3
    bdf4:	e011      	b.n	be1a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    bdf6:	88bb      	ldrh	r3, [r7, #4]
    bdf8:	f003 0308 	and.w	r3, r3, #8
    bdfc:	2b00      	cmp	r3, #0
    bdfe:	d002      	beq.n	be06 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    be00:	4b0e      	ldr	r3, [pc, #56]	; (be3c <_usb_d_dev_handle_nep+0xb0>)
    be02:	4798      	blx	r3
    be04:	e009      	b.n	be1a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    be06:	88bb      	ldrh	r3, [r7, #4]
    be08:	f003 0301 	and.w	r3, r3, #1
    be0c:	2b00      	cmp	r3, #0
    be0e:	d002      	beq.n	be16 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    be10:	4b0b      	ldr	r3, [pc, #44]	; (be40 <_usb_d_dev_handle_nep+0xb4>)
    be12:	4798      	blx	r3
    be14:	e001      	b.n	be1a <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    be16:	2300      	movs	r3, #0
    be18:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    be1a:	79fb      	ldrb	r3, [r7, #7]
}
    be1c:	4618      	mov	r0, r3
    be1e:	3708      	adds	r7, #8
    be20:	46bd      	mov	sp, r7
    be22:	bd80      	pop	{r7, pc}
    be24:	0000b229 	.word	0x0000b229
    be28:	0000b27f 	.word	0x0000b27f
    be2c:	0000bbcd 	.word	0x0000bbcd
    be30:	0000bbed 	.word	0x0000bbed
    be34:	0000bc7d 	.word	0x0000bc7d
    be38:	0000bca1 	.word	0x0000bca1
    be3c:	0000bced 	.word	0x0000bced
    be40:	0000bd49 	.word	0x0000bd49

0000be44 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    be44:	b590      	push	{r4, r7, lr}
    be46:	b089      	sub	sp, #36	; 0x24
    be48:	af00      	add	r7, sp, #0
    be4a:	6078      	str	r0, [r7, #4]
    be4c:	460b      	mov	r3, r1
    be4e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    be50:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    be54:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    be56:	687b      	ldr	r3, [r7, #4]
    be58:	7c9b      	ldrb	r3, [r3, #18]
    be5a:	f003 030f 	and.w	r3, r3, #15
    be5e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    be60:	7dfb      	ldrb	r3, [r7, #23]
    be62:	015b      	lsls	r3, r3, #5
    be64:	4a73      	ldr	r2, [pc, #460]	; (c034 <_usb_d_dev_in_next+0x1f0>)
    be66:	4413      	add	r3, r2
    be68:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    be6a:	78fb      	ldrb	r3, [r7, #3]
    be6c:	2b00      	cmp	r3, #0
    be6e:	d006      	beq.n	be7e <_usb_d_dev_in_next+0x3a>
    be70:	693b      	ldr	r3, [r7, #16]
    be72:	3310      	adds	r3, #16
    be74:	685b      	ldr	r3, [r3, #4]
    be76:	f3c3 030d 	ubfx	r3, r3, #0, #14
    be7a:	b29b      	uxth	r3, r3
    be7c:	e000      	b.n	be80 <_usb_d_dev_in_next+0x3c>
    be7e:	2300      	movs	r3, #0
    be80:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    be82:	687b      	ldr	r3, [r7, #4]
    be84:	8a1b      	ldrh	r3, [r3, #16]
    be86:	f240 32ff 	movw	r2, #1023	; 0x3ff
    be8a:	4293      	cmp	r3, r2
    be8c:	d103      	bne.n	be96 <_usb_d_dev_in_next+0x52>
    be8e:	687b      	ldr	r3, [r7, #4]
    be90:	8a1b      	ldrh	r3, [r3, #16]
    be92:	b21b      	sxth	r3, r3
    be94:	e004      	b.n	bea0 <_usb_d_dev_in_next+0x5c>
    be96:	687b      	ldr	r3, [r7, #4]
    be98:	8a1b      	ldrh	r3, [r3, #16]
    be9a:	3b01      	subs	r3, #1
    be9c:	b29b      	uxth	r3, r3
    be9e:	b21b      	sxth	r3, r3
    bea0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    bea4:	4013      	ands	r3, r2
    bea6:	b21b      	sxth	r3, r3
    bea8:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    beaa:	2300      	movs	r3, #0
    beac:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	7cdb      	ldrb	r3, [r3, #19]
    beb2:	f003 0307 	and.w	r3, r3, #7
    beb6:	b2db      	uxtb	r3, r3
    beb8:	2b01      	cmp	r3, #1
    beba:	bf0c      	ite	eq
    bebc:	2301      	moveq	r3, #1
    bebe:	2300      	movne	r3, #0
    bec0:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    bec2:	78fb      	ldrb	r3, [r7, #3]
    bec4:	2b00      	cmp	r3, #0
    bec6:	d004      	beq.n	bed2 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    bec8:	7dfb      	ldrb	r3, [r7, #23]
    beca:	2101      	movs	r1, #1
    becc:	4618      	mov	r0, r3
    bece:	4b5a      	ldr	r3, [pc, #360]	; (c038 <_usb_d_dev_in_next+0x1f4>)
    bed0:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    bed2:	687b      	ldr	r3, [r7, #4]
    bed4:	689a      	ldr	r2, [r3, #8]
    bed6:	89fb      	ldrh	r3, [r7, #14]
    bed8:	441a      	add	r2, r3
    beda:	687b      	ldr	r3, [r7, #4]
    bedc:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    bede:	687b      	ldr	r3, [r7, #4]
    bee0:	689a      	ldr	r2, [r3, #8]
    bee2:	687b      	ldr	r3, [r7, #4]
    bee4:	685b      	ldr	r3, [r3, #4]
    bee6:	429a      	cmp	r2, r3
    bee8:	d243      	bcs.n	bf72 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    beea:	687b      	ldr	r3, [r7, #4]
    beec:	685b      	ldr	r3, [r3, #4]
    beee:	b29a      	uxth	r2, r3
    bef0:	687b      	ldr	r3, [r7, #4]
    bef2:	689b      	ldr	r3, [r3, #8]
    bef4:	b29b      	uxth	r3, r3
    bef6:	1ad3      	subs	r3, r2, r3
    bef8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    befa:	687b      	ldr	r3, [r7, #4]
    befc:	7cdb      	ldrb	r3, [r3, #19]
    befe:	f003 0320 	and.w	r3, r3, #32
    bf02:	b2db      	uxtb	r3, r3
    bf04:	2b00      	cmp	r3, #0
    bf06:	d01b      	beq.n	bf40 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    bf08:	687b      	ldr	r3, [r7, #4]
    bf0a:	8a1b      	ldrh	r3, [r3, #16]
    bf0c:	8bfa      	ldrh	r2, [r7, #30]
    bf0e:	429a      	cmp	r2, r3
    bf10:	d902      	bls.n	bf18 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    bf12:	687b      	ldr	r3, [r7, #4]
    bf14:	8a1b      	ldrh	r3, [r3, #16]
    bf16:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    bf18:	687b      	ldr	r3, [r7, #4]
    bf1a:	68d8      	ldr	r0, [r3, #12]
    bf1c:	687b      	ldr	r3, [r7, #4]
    bf1e:	681a      	ldr	r2, [r3, #0]
    bf20:	687b      	ldr	r3, [r7, #4]
    bf22:	689b      	ldr	r3, [r3, #8]
    bf24:	4413      	add	r3, r2
    bf26:	8bfa      	ldrh	r2, [r7, #30]
    bf28:	4619      	mov	r1, r3
    bf2a:	4b44      	ldr	r3, [pc, #272]	; (c03c <_usb_d_dev_in_next+0x1f8>)
    bf2c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    bf2e:	687b      	ldr	r3, [r7, #4]
    bf30:	68db      	ldr	r3, [r3, #12]
    bf32:	461a      	mov	r2, r3
    bf34:	7dfb      	ldrb	r3, [r7, #23]
    bf36:	2101      	movs	r1, #1
    bf38:	4618      	mov	r0, r3
    bf3a:	4b41      	ldr	r3, [pc, #260]	; (c040 <_usb_d_dev_in_next+0x1fc>)
    bf3c:	4798      	blx	r3
    bf3e:	e011      	b.n	bf64 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    bf40:	8bfb      	ldrh	r3, [r7, #30]
    bf42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    bf46:	d902      	bls.n	bf4e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    bf48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bf4c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    bf4e:	687b      	ldr	r3, [r7, #4]
    bf50:	681a      	ldr	r2, [r3, #0]
    bf52:	687b      	ldr	r3, [r7, #4]
    bf54:	689b      	ldr	r3, [r3, #8]
    bf56:	4413      	add	r3, r2
    bf58:	461a      	mov	r2, r3
    bf5a:	7dfb      	ldrb	r3, [r7, #23]
    bf5c:	2101      	movs	r1, #1
    bf5e:	4618      	mov	r0, r3
    bf60:	4b37      	ldr	r3, [pc, #220]	; (c040 <_usb_d_dev_in_next+0x1fc>)
    bf62:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    bf64:	8bfa      	ldrh	r2, [r7, #30]
    bf66:	7df8      	ldrb	r0, [r7, #23]
    bf68:	2300      	movs	r3, #0
    bf6a:	2101      	movs	r1, #1
    bf6c:	4c35      	ldr	r4, [pc, #212]	; (c044 <_usb_d_dev_in_next+0x200>)
    bf6e:	47a0      	blx	r4
		goto _in_tx_exec;
    bf70:	e041      	b.n	bff6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    bf72:	687b      	ldr	r3, [r7, #4]
    bf74:	7cdb      	ldrb	r3, [r3, #19]
    bf76:	f003 0310 	and.w	r3, r3, #16
    bf7a:	b2db      	uxtb	r3, r3
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d00b      	beq.n	bf98 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    bf80:	687a      	ldr	r2, [r7, #4]
    bf82:	7cd3      	ldrb	r3, [r2, #19]
    bf84:	f36f 1304 	bfc	r3, #4, #1
    bf88:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    bf8a:	7df8      	ldrb	r0, [r7, #23]
    bf8c:	2300      	movs	r3, #0
    bf8e:	2200      	movs	r2, #0
    bf90:	2101      	movs	r1, #1
    bf92:	4c2c      	ldr	r4, [pc, #176]	; (c044 <_usb_d_dev_in_next+0x200>)
    bf94:	47a0      	blx	r4
		goto _in_tx_exec;
    bf96:	e02e      	b.n	bff6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    bf98:	7afb      	ldrb	r3, [r7, #11]
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d006      	beq.n	bfac <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    bf9e:	7dfb      	ldrb	r3, [r7, #23]
    bfa0:	224b      	movs	r2, #75	; 0x4b
    bfa2:	4619      	mov	r1, r3
    bfa4:	69b8      	ldr	r0, [r7, #24]
    bfa6:	4b28      	ldr	r3, [pc, #160]	; (c048 <_usb_d_dev_in_next+0x204>)
    bfa8:	4798      	blx	r3
    bfaa:	e005      	b.n	bfb8 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    bfac:	7dfb      	ldrb	r3, [r7, #23]
    bfae:	224a      	movs	r2, #74	; 0x4a
    bfb0:	4619      	mov	r1, r3
    bfb2:	69b8      	ldr	r0, [r7, #24]
    bfb4:	4b24      	ldr	r3, [pc, #144]	; (c048 <_usb_d_dev_in_next+0x204>)
    bfb6:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    bfb8:	687b      	ldr	r3, [r7, #4]
    bfba:	8a1b      	ldrh	r3, [r3, #16]
    bfbc:	89ba      	ldrh	r2, [r7, #12]
    bfbe:	429a      	cmp	r2, r3
    bfc0:	d114      	bne.n	bfec <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    bfc2:	687a      	ldr	r2, [r7, #4]
    bfc4:	7cd3      	ldrb	r3, [r2, #19]
    bfc6:	f36f 1386 	bfc	r3, #6, #1
    bfca:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    bfcc:	4b1f      	ldr	r3, [pc, #124]	; (c04c <_usb_d_dev_in_next+0x208>)
    bfce:	68db      	ldr	r3, [r3, #12]
    bfd0:	687a      	ldr	r2, [r7, #4]
    bfd2:	7c90      	ldrb	r0, [r2, #18]
    bfd4:	687a      	ldr	r2, [r7, #4]
    bfd6:	6892      	ldr	r2, [r2, #8]
    bfd8:	4611      	mov	r1, r2
    bfda:	4798      	blx	r3
    bfdc:	4603      	mov	r3, r0
    bfde:	2b00      	cmp	r3, #0
    bfe0:	d124      	bne.n	c02c <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    bfe2:	687a      	ldr	r2, [r7, #4]
    bfe4:	7cd3      	ldrb	r3, [r2, #19]
    bfe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bfea:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    bfec:	2100      	movs	r1, #0
    bfee:	6878      	ldr	r0, [r7, #4]
    bff0:	4b17      	ldr	r3, [pc, #92]	; (c050 <_usb_d_dev_in_next+0x20c>)
    bff2:	4798      	blx	r3
	return;
    bff4:	e01b      	b.n	c02e <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    bff6:	78fb      	ldrb	r3, [r7, #3]
    bff8:	f083 0301 	eor.w	r3, r3, #1
    bffc:	b2db      	uxtb	r3, r3
    bffe:	2b00      	cmp	r3, #0
    c000:	d00d      	beq.n	c01e <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    c002:	7afb      	ldrb	r3, [r7, #11]
    c004:	2b00      	cmp	r3, #0
    c006:	d002      	beq.n	c00e <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    c008:	234e      	movs	r3, #78	; 0x4e
    c00a:	777b      	strb	r3, [r7, #29]
    c00c:	e001      	b.n	c012 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    c00e:	234a      	movs	r3, #74	; 0x4a
    c010:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    c012:	7f7a      	ldrb	r2, [r7, #29]
    c014:	7dfb      	ldrb	r3, [r7, #23]
    c016:	4619      	mov	r1, r3
    c018:	69b8      	ldr	r0, [r7, #24]
    c01a:	4b0e      	ldr	r3, [pc, #56]	; (c054 <_usb_d_dev_in_next+0x210>)
    c01c:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    c01e:	7dfb      	ldrb	r3, [r7, #23]
    c020:	2201      	movs	r2, #1
    c022:	2101      	movs	r1, #1
    c024:	4618      	mov	r0, r3
    c026:	4b0c      	ldr	r3, [pc, #48]	; (c058 <_usb_d_dev_in_next+0x214>)
    c028:	4798      	blx	r3
    c02a:	e000      	b.n	c02e <_usb_d_dev_in_next+0x1ea>
			return;
    c02c:	bf00      	nop
}
    c02e:	3724      	adds	r7, #36	; 0x24
    c030:	46bd      	mov	sp, r7
    c032:	bd90      	pop	{r4, r7, pc}
    c034:	2000250c 	.word	0x2000250c
    c038:	0000b83d 	.word	0x0000b83d
    c03c:	00011741 	.word	0x00011741
    c040:	0000b869 	.word	0x0000b869
    c044:	0000b9b1 	.word	0x0000b9b1
    c048:	0000b149 	.word	0x0000b149
    c04c:	20002444 	.word	0x20002444
    c050:	0000d16d 	.word	0x0000d16d
    c054:	0000b11d 	.word	0x0000b11d
    c058:	0000ba69 	.word	0x0000ba69

0000c05c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c05c:	b590      	push	{r4, r7, lr}
    c05e:	b08b      	sub	sp, #44	; 0x2c
    c060:	af00      	add	r7, sp, #0
    c062:	6078      	str	r0, [r7, #4]
    c064:	460b      	mov	r3, r1
    c066:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    c068:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c06c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    c06e:	687b      	ldr	r3, [r7, #4]
    c070:	7c9b      	ldrb	r3, [r3, #18]
    c072:	f003 030f 	and.w	r3, r3, #15
    c076:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c078:	7ffb      	ldrb	r3, [r7, #31]
    c07a:	015b      	lsls	r3, r3, #5
    c07c:	4a94      	ldr	r2, [pc, #592]	; (c2d0 <_usb_d_dev_out_next+0x274>)
    c07e:	4413      	add	r3, r2
    c080:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c082:	78fb      	ldrb	r3, [r7, #3]
    c084:	2b00      	cmp	r3, #0
    c086:	d005      	beq.n	c094 <_usb_d_dev_out_next+0x38>
    c088:	69bb      	ldr	r3, [r7, #24]
    c08a:	685b      	ldr	r3, [r3, #4]
    c08c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    c090:	b29b      	uxth	r3, r3
    c092:	e000      	b.n	c096 <_usb_d_dev_out_next+0x3a>
    c094:	2300      	movs	r3, #0
    c096:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c098:	78fb      	ldrb	r3, [r7, #3]
    c09a:	2b00      	cmp	r3, #0
    c09c:	d005      	beq.n	c0aa <_usb_d_dev_out_next+0x4e>
    c09e:	69bb      	ldr	r3, [r7, #24]
    c0a0:	685b      	ldr	r3, [r3, #4]
    c0a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c0a6:	b29b      	uxth	r3, r3
    c0a8:	e000      	b.n	c0ac <_usb_d_dev_out_next+0x50>
    c0aa:	2300      	movs	r3, #0
    c0ac:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c0ae:	687b      	ldr	r3, [r7, #4]
    c0b0:	8a1b      	ldrh	r3, [r3, #16]
    c0b2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c0b6:	4293      	cmp	r3, r2
    c0b8:	d004      	beq.n	c0c4 <_usb_d_dev_out_next+0x68>
    c0ba:	687b      	ldr	r3, [r7, #4]
    c0bc:	8a1b      	ldrh	r3, [r3, #16]
    c0be:	3b01      	subs	r3, #1
    c0c0:	b29b      	uxth	r3, r3
    c0c2:	e001      	b.n	c0c8 <_usb_d_dev_out_next+0x6c>
    c0c4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c0c8:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    c0ca:	8aba      	ldrh	r2, [r7, #20]
    c0cc:	8a7b      	ldrh	r3, [r7, #18]
    c0ce:	4013      	ands	r3, r2
    c0d0:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c0d2:	687b      	ldr	r3, [r7, #4]
    c0d4:	7cdb      	ldrb	r3, [r3, #19]
    c0d6:	f003 0307 	and.w	r3, r3, #7
    c0da:	b2db      	uxtb	r3, r3
    c0dc:	2b01      	cmp	r3, #1
    c0de:	bf0c      	ite	eq
    c0e0:	2301      	moveq	r3, #1
    c0e2:	2300      	movne	r3, #0
    c0e4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    c0e6:	78fb      	ldrb	r3, [r7, #3]
    c0e8:	2b00      	cmp	r3, #0
    c0ea:	d004      	beq.n	c0f6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    c0ec:	7ffb      	ldrb	r3, [r7, #31]
    c0ee:	2100      	movs	r1, #0
    c0f0:	4618      	mov	r0, r3
    c0f2:	4b78      	ldr	r3, [pc, #480]	; (c2d4 <_usb_d_dev_out_next+0x278>)
    c0f4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    c0f6:	687b      	ldr	r3, [r7, #4]
    c0f8:	7cdb      	ldrb	r3, [r3, #19]
    c0fa:	f003 0320 	and.w	r3, r3, #32
    c0fe:	b2db      	uxtb	r3, r3
    c100:	2b00      	cmp	r3, #0
    c102:	d01c      	beq.n	c13e <_usb_d_dev_out_next+0xe2>
    c104:	687b      	ldr	r3, [r7, #4]
    c106:	685b      	ldr	r3, [r3, #4]
    c108:	2b00      	cmp	r3, #0
    c10a:	d018      	beq.n	c13e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c10c:	687b      	ldr	r3, [r7, #4]
    c10e:	685b      	ldr	r3, [r3, #4]
    c110:	b29a      	uxth	r2, r3
    c112:	687b      	ldr	r3, [r7, #4]
    c114:	689b      	ldr	r3, [r3, #8]
    c116:	b29b      	uxth	r3, r3
    c118:	1ad3      	subs	r3, r2, r3
    c11a:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c11c:	687b      	ldr	r3, [r7, #4]
    c11e:	681a      	ldr	r2, [r3, #0]
    c120:	687b      	ldr	r3, [r7, #4]
    c122:	689b      	ldr	r3, [r3, #8]
    c124:	18d0      	adds	r0, r2, r3
    c126:	687b      	ldr	r3, [r7, #4]
    c128:	68d9      	ldr	r1, [r3, #12]
    c12a:	89ba      	ldrh	r2, [r7, #12]
    c12c:	8a3b      	ldrh	r3, [r7, #16]
    c12e:	429a      	cmp	r2, r3
    c130:	d901      	bls.n	c136 <_usb_d_dev_out_next+0xda>
    c132:	8a3b      	ldrh	r3, [r7, #16]
    c134:	e000      	b.n	c138 <_usb_d_dev_out_next+0xdc>
    c136:	89bb      	ldrh	r3, [r7, #12]
    c138:	461a      	mov	r2, r3
    c13a:	4b67      	ldr	r3, [pc, #412]	; (c2d8 <_usb_d_dev_out_next+0x27c>)
    c13c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    c13e:	687b      	ldr	r3, [r7, #4]
    c140:	685b      	ldr	r3, [r3, #4]
    c142:	2b00      	cmp	r3, #0
    c144:	d121      	bne.n	c18a <_usb_d_dev_out_next+0x12e>
    c146:	687b      	ldr	r3, [r7, #4]
    c148:	7cdb      	ldrb	r3, [r3, #19]
    c14a:	f003 0310 	and.w	r3, r3, #16
    c14e:	b2db      	uxtb	r3, r3
    c150:	2b00      	cmp	r3, #0
    c152:	d01a      	beq.n	c18a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    c154:	687a      	ldr	r2, [r7, #4]
    c156:	7cd3      	ldrb	r3, [r2, #19]
    c158:	f36f 1304 	bfc	r3, #4, #1
    c15c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    c15e:	687a      	ldr	r2, [r7, #4]
    c160:	7cd3      	ldrb	r3, [r2, #19]
    c162:	f043 0320 	orr.w	r3, r3, #32
    c166:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c168:	687b      	ldr	r3, [r7, #4]
    c16a:	68db      	ldr	r3, [r3, #12]
    c16c:	461a      	mov	r2, r3
    c16e:	7ffb      	ldrb	r3, [r7, #31]
    c170:	2100      	movs	r1, #0
    c172:	4618      	mov	r0, r3
    c174:	4b59      	ldr	r3, [pc, #356]	; (c2dc <_usb_d_dev_out_next+0x280>)
    c176:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    c178:	687b      	ldr	r3, [r7, #4]
    c17a:	8a1b      	ldrh	r3, [r3, #16]
    c17c:	461a      	mov	r2, r3
    c17e:	7ff8      	ldrb	r0, [r7, #31]
    c180:	2300      	movs	r3, #0
    c182:	2100      	movs	r1, #0
    c184:	4c56      	ldr	r4, [pc, #344]	; (c2e0 <_usb_d_dev_out_next+0x284>)
    c186:	47a0      	blx	r4
		goto _out_rx_exec;
    c188:	e090      	b.n	c2ac <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    c18a:	78fb      	ldrb	r3, [r7, #3]
    c18c:	2b00      	cmp	r3, #0
    c18e:	d010      	beq.n	c1b2 <_usb_d_dev_out_next+0x156>
    c190:	687b      	ldr	r3, [r7, #4]
    c192:	8a1b      	ldrh	r3, [r3, #16]
    c194:	8a3a      	ldrh	r2, [r7, #16]
    c196:	429a      	cmp	r2, r3
    c198:	d20b      	bcs.n	c1b2 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    c19a:	687a      	ldr	r2, [r7, #4]
    c19c:	7cd3      	ldrb	r3, [r2, #19]
    c19e:	f36f 1304 	bfc	r3, #4, #1
    c1a2:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    c1a4:	687b      	ldr	r3, [r7, #4]
    c1a6:	689a      	ldr	r2, [r3, #8]
    c1a8:	8abb      	ldrh	r3, [r7, #20]
    c1aa:	441a      	add	r2, r3
    c1ac:	687b      	ldr	r3, [r7, #4]
    c1ae:	609a      	str	r2, [r3, #8]
    c1b0:	e05c      	b.n	c26c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    c1b2:	687b      	ldr	r3, [r7, #4]
    c1b4:	689a      	ldr	r2, [r3, #8]
    c1b6:	8afb      	ldrh	r3, [r7, #22]
    c1b8:	441a      	add	r2, r3
    c1ba:	687b      	ldr	r3, [r7, #4]
    c1bc:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    c1be:	687b      	ldr	r3, [r7, #4]
    c1c0:	689a      	ldr	r2, [r3, #8]
    c1c2:	687b      	ldr	r3, [r7, #4]
    c1c4:	685b      	ldr	r3, [r3, #4]
    c1c6:	429a      	cmp	r2, r3
    c1c8:	d250      	bcs.n	c26c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    c1ca:	687b      	ldr	r3, [r7, #4]
    c1cc:	685b      	ldr	r3, [r3, #4]
    c1ce:	b29a      	uxth	r2, r3
    c1d0:	687b      	ldr	r3, [r7, #4]
    c1d2:	689b      	ldr	r3, [r3, #8]
    c1d4:	b29b      	uxth	r3, r3
    c1d6:	1ad3      	subs	r3, r2, r3
    c1d8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    c1da:	687b      	ldr	r3, [r7, #4]
    c1dc:	7cdb      	ldrb	r3, [r3, #19]
    c1de:	f003 0320 	and.w	r3, r3, #32
    c1e2:	b2db      	uxtb	r3, r3
    c1e4:	2b00      	cmp	r3, #0
    c1e6:	d010      	beq.n	c20a <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    c1e8:	687b      	ldr	r3, [r7, #4]
    c1ea:	8a1b      	ldrh	r3, [r3, #16]
    c1ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    c1ee:	429a      	cmp	r2, r3
    c1f0:	d902      	bls.n	c1f8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    c1f2:	687b      	ldr	r3, [r7, #4]
    c1f4:	8a1b      	ldrh	r3, [r3, #16]
    c1f6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c1f8:	687b      	ldr	r3, [r7, #4]
    c1fa:	68db      	ldr	r3, [r3, #12]
    c1fc:	461a      	mov	r2, r3
    c1fe:	7ffb      	ldrb	r3, [r7, #31]
    c200:	2100      	movs	r1, #0
    c202:	4618      	mov	r0, r3
    c204:	4b35      	ldr	r3, [pc, #212]	; (c2dc <_usb_d_dev_out_next+0x280>)
    c206:	4798      	blx	r3
    c208:	e029      	b.n	c25e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    c20a:	687b      	ldr	r3, [r7, #4]
    c20c:	8a1b      	ldrh	r3, [r3, #16]
    c20e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    c210:	429a      	cmp	r2, r3
    c212:	d90f      	bls.n	c234 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    c214:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    c216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c21a:	d903      	bls.n	c224 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    c21c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c220:	84fb      	strh	r3, [r7, #38]	; 0x26
    c222:	e011      	b.n	c248 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    c224:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    c226:	8a7b      	ldrh	r3, [r7, #18]
    c228:	4013      	ands	r3, r2
    c22a:	b29b      	uxth	r3, r3
    c22c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    c22e:	1ad3      	subs	r3, r2, r3
    c230:	84fb      	strh	r3, [r7, #38]	; 0x26
    c232:	e009      	b.n	c248 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    c234:	687b      	ldr	r3, [r7, #4]
    c236:	8a1b      	ldrh	r3, [r3, #16]
    c238:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    c23a:	429a      	cmp	r2, r3
    c23c:	d204      	bcs.n	c248 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    c23e:	687a      	ldr	r2, [r7, #4]
    c240:	7cd3      	ldrb	r3, [r2, #19]
    c242:	f043 0320 	orr.w	r3, r3, #32
    c246:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c248:	687b      	ldr	r3, [r7, #4]
    c24a:	681a      	ldr	r2, [r3, #0]
    c24c:	687b      	ldr	r3, [r7, #4]
    c24e:	689b      	ldr	r3, [r3, #8]
    c250:	4413      	add	r3, r2
    c252:	461a      	mov	r2, r3
    c254:	7ffb      	ldrb	r3, [r7, #31]
    c256:	2100      	movs	r1, #0
    c258:	4618      	mov	r0, r3
    c25a:	4b20      	ldr	r3, [pc, #128]	; (c2dc <_usb_d_dev_out_next+0x280>)
    c25c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    c25e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    c260:	7ff8      	ldrb	r0, [r7, #31]
    c262:	2300      	movs	r3, #0
    c264:	2100      	movs	r1, #0
    c266:	4c1e      	ldr	r4, [pc, #120]	; (c2e0 <_usb_d_dev_out_next+0x284>)
    c268:	47a0      	blx	r4
			goto _out_rx_exec;
    c26a:	e01f      	b.n	c2ac <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    c26c:	7bfb      	ldrb	r3, [r7, #15]
    c26e:	2b00      	cmp	r3, #0
    c270:	d006      	beq.n	c280 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    c272:	7ffb      	ldrb	r3, [r7, #31]
    c274:	222d      	movs	r2, #45	; 0x2d
    c276:	4619      	mov	r1, r3
    c278:	6a38      	ldr	r0, [r7, #32]
    c27a:	4b1a      	ldr	r3, [pc, #104]	; (c2e4 <_usb_d_dev_out_next+0x288>)
    c27c:	4798      	blx	r3
    c27e:	e005      	b.n	c28c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    c280:	7ffb      	ldrb	r3, [r7, #31]
    c282:	2225      	movs	r2, #37	; 0x25
    c284:	4619      	mov	r1, r3
    c286:	6a38      	ldr	r0, [r7, #32]
    c288:	4b16      	ldr	r3, [pc, #88]	; (c2e4 <_usb_d_dev_out_next+0x288>)
    c28a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    c28c:	7ffb      	ldrb	r3, [r7, #31]
    c28e:	2b00      	cmp	r3, #0
    c290:	d107      	bne.n	c2a2 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c292:	687b      	ldr	r3, [r7, #4]
    c294:	68db      	ldr	r3, [r3, #12]
    c296:	461a      	mov	r2, r3
    c298:	7ffb      	ldrb	r3, [r7, #31]
    c29a:	2100      	movs	r1, #0
    c29c:	4618      	mov	r0, r3
    c29e:	4b0f      	ldr	r3, [pc, #60]	; (c2dc <_usb_d_dev_out_next+0x280>)
    c2a0:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c2a2:	2100      	movs	r1, #0
    c2a4:	6878      	ldr	r0, [r7, #4]
    c2a6:	4b10      	ldr	r3, [pc, #64]	; (c2e8 <_usb_d_dev_out_next+0x28c>)
    c2a8:	4798      	blx	r3
	return;
    c2aa:	e031      	b.n	c310 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    c2ac:	78fb      	ldrb	r3, [r7, #3]
    c2ae:	f083 0301 	eor.w	r3, r3, #1
    c2b2:	b2db      	uxtb	r3, r3
    c2b4:	2b00      	cmp	r3, #0
    c2b6:	d025      	beq.n	c304 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    c2b8:	7bfb      	ldrb	r3, [r7, #15]
    c2ba:	2b00      	cmp	r3, #0
    c2bc:	d018      	beq.n	c2f0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    c2be:	7ffb      	ldrb	r3, [r7, #31]
    c2c0:	2101      	movs	r1, #1
    c2c2:	4618      	mov	r0, r3
    c2c4:	4b09      	ldr	r3, [pc, #36]	; (c2ec <_usb_d_dev_out_next+0x290>)
    c2c6:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    c2c8:	232d      	movs	r3, #45	; 0x2d
    c2ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    c2ce:	e012      	b.n	c2f6 <_usb_d_dev_out_next+0x29a>
    c2d0:	2000250c 	.word	0x2000250c
    c2d4:	0000b83d 	.word	0x0000b83d
    c2d8:	00011741 	.word	0x00011741
    c2dc:	0000b869 	.word	0x0000b869
    c2e0:	0000b9f1 	.word	0x0000b9f1
    c2e4:	0000b149 	.word	0x0000b149
    c2e8:	0000d16d 	.word	0x0000d16d
    c2ec:	0000ba31 	.word	0x0000ba31
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    c2f0:	2325      	movs	r3, #37	; 0x25
    c2f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    c2f6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    c2fa:	7ffb      	ldrb	r3, [r7, #31]
    c2fc:	4619      	mov	r1, r3
    c2fe:	6a38      	ldr	r0, [r7, #32]
    c300:	4b05      	ldr	r3, [pc, #20]	; (c318 <_usb_d_dev_out_next+0x2bc>)
    c302:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    c304:	7ffb      	ldrb	r3, [r7, #31]
    c306:	2201      	movs	r2, #1
    c308:	2100      	movs	r1, #0
    c30a:	4618      	mov	r0, r3
    c30c:	4b03      	ldr	r3, [pc, #12]	; (c31c <_usb_d_dev_out_next+0x2c0>)
    c30e:	4798      	blx	r3
}
    c310:	372c      	adds	r7, #44	; 0x2c
    c312:	46bd      	mov	sp, r7
    c314:	bd90      	pop	{r4, r7, pc}
    c316:	bf00      	nop
    c318:	0000b11d 	.word	0x0000b11d
    c31c:	0000bac1 	.word	0x0000bac1

0000c320 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    c320:	b580      	push	{r7, lr}
    c322:	b084      	sub	sp, #16
    c324:	af00      	add	r7, sp, #0
    c326:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    c328:	687b      	ldr	r3, [r7, #4]
    c32a:	7c9b      	ldrb	r3, [r3, #18]
    c32c:	f003 030f 	and.w	r3, r3, #15
    c330:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c332:	687b      	ldr	r3, [r7, #4]
    c334:	7cdb      	ldrb	r3, [r3, #19]
    c336:	f003 0307 	and.w	r3, r3, #7
    c33a:	b2db      	uxtb	r3, r3
    c33c:	2b01      	cmp	r3, #1
    c33e:	bf0c      	ite	eq
    c340:	2301      	moveq	r3, #1
    c342:	2300      	movne	r3, #0
    c344:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    c346:	7bbb      	ldrb	r3, [r7, #14]
    c348:	f083 0301 	eor.w	r3, r3, #1
    c34c:	b2db      	uxtb	r3, r3
    c34e:	2b00      	cmp	r3, #0
    c350:	d008      	beq.n	c364 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    c352:	7bfb      	ldrb	r3, [r7, #15]
    c354:	4618      	mov	r0, r3
    c356:	4b20      	ldr	r3, [pc, #128]	; (c3d8 <_usb_d_dev_handle_setup+0xb8>)
    c358:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    c35a:	7bfb      	ldrb	r3, [r7, #15]
    c35c:	4618      	mov	r0, r3
    c35e:	4b1f      	ldr	r3, [pc, #124]	; (c3dc <_usb_d_dev_handle_setup+0xbc>)
    c360:	4798      	blx	r3
		return;
    c362:	e036      	b.n	c3d2 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    c364:	687b      	ldr	r3, [r7, #4]
    c366:	7cdb      	ldrb	r3, [r3, #19]
    c368:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c36c:	b2db      	uxtb	r3, r3
    c36e:	2b00      	cmp	r3, #0
    c370:	d010      	beq.n	c394 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    c372:	687a      	ldr	r2, [r7, #4]
    c374:	7cd3      	ldrb	r3, [r2, #19]
    c376:	f36f 1386 	bfc	r3, #6, #1
    c37a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c37c:	7bfb      	ldrb	r3, [r7, #15]
    c37e:	2200      	movs	r2, #0
    c380:	2101      	movs	r1, #1
    c382:	4618      	mov	r0, r3
    c384:	4b16      	ldr	r3, [pc, #88]	; (c3e0 <_usb_d_dev_handle_setup+0xc0>)
    c386:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    c388:	7bfb      	ldrb	r3, [r7, #15]
    c38a:	2200      	movs	r2, #0
    c38c:	2100      	movs	r1, #0
    c38e:	4618      	mov	r0, r3
    c390:	4b14      	ldr	r3, [pc, #80]	; (c3e4 <_usb_d_dev_handle_setup+0xc4>)
    c392:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    c394:	687a      	ldr	r2, [r7, #4]
    c396:	7cd3      	ldrb	r3, [r2, #19]
    c398:	f36f 03c3 	bfc	r3, #3, #1
    c39c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    c39e:	7bfb      	ldrb	r3, [r7, #15]
    c3a0:	2100      	movs	r1, #0
    c3a2:	4618      	mov	r0, r3
    c3a4:	4b10      	ldr	r3, [pc, #64]	; (c3e8 <_usb_d_dev_handle_setup+0xc8>)
    c3a6:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    c3a8:	7bfb      	ldrb	r3, [r7, #15]
    c3aa:	2101      	movs	r1, #1
    c3ac:	4618      	mov	r0, r3
    c3ae:	4b0e      	ldr	r3, [pc, #56]	; (c3e8 <_usb_d_dev_handle_setup+0xc8>)
    c3b0:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    c3b2:	7bfb      	ldrb	r3, [r7, #15]
    c3b4:	216f      	movs	r1, #111	; 0x6f
    c3b6:	4618      	mov	r0, r3
    c3b8:	4b0c      	ldr	r3, [pc, #48]	; (c3ec <_usb_d_dev_handle_setup+0xcc>)
    c3ba:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    c3bc:	7bfb      	ldrb	r3, [r7, #15]
    c3be:	216f      	movs	r1, #111	; 0x6f
    c3c0:	4618      	mov	r0, r3
    c3c2:	4b0b      	ldr	r3, [pc, #44]	; (c3f0 <_usb_d_dev_handle_setup+0xd0>)
    c3c4:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    c3c6:	4b0b      	ldr	r3, [pc, #44]	; (c3f4 <_usb_d_dev_handle_setup+0xd4>)
    c3c8:	689b      	ldr	r3, [r3, #8]
    c3ca:	687a      	ldr	r2, [r7, #4]
    c3cc:	7c92      	ldrb	r2, [r2, #18]
    c3ce:	4610      	mov	r0, r2
    c3d0:	4798      	blx	r3
}
    c3d2:	3710      	adds	r7, #16
    c3d4:	46bd      	mov	sp, r7
    c3d6:	bd80      	pop	{r7, pc}
    c3d8:	0000b7c5 	.word	0x0000b7c5
    c3dc:	0000b771 	.word	0x0000b771
    c3e0:	0000ba69 	.word	0x0000ba69
    c3e4:	0000bac1 	.word	0x0000bac1
    c3e8:	0000ba31 	.word	0x0000ba31
    c3ec:	0000b571 	.word	0x0000b571
    c3f0:	0000b5c1 	.word	0x0000b5c1
    c3f4:	20002444 	.word	0x20002444

0000c3f8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    c3f8:	b580      	push	{r7, lr}
    c3fa:	b084      	sub	sp, #16
    c3fc:	af00      	add	r7, sp, #0
    c3fe:	6078      	str	r0, [r7, #4]
    c400:	460b      	mov	r3, r1
    c402:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c404:	687b      	ldr	r3, [r7, #4]
    c406:	7c9b      	ldrb	r3, [r3, #18]
    c408:	f003 030f 	and.w	r3, r3, #15
    c40c:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    c40e:	78f9      	ldrb	r1, [r7, #3]
    c410:	7bfb      	ldrb	r3, [r7, #15]
    c412:	2200      	movs	r2, #0
    c414:	4618      	mov	r0, r3
    c416:	4b07      	ldr	r3, [pc, #28]	; (c434 <_usb_d_dev_handle_stall+0x3c>)
    c418:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c41a:	4b07      	ldr	r3, [pc, #28]	; (c438 <_usb_d_dev_handle_stall+0x40>)
    c41c:	691b      	ldr	r3, [r3, #16]
    c41e:	687a      	ldr	r2, [r7, #4]
    c420:	7c90      	ldrb	r0, [r2, #18]
    c422:	687a      	ldr	r2, [r7, #4]
    c424:	6892      	ldr	r2, [r2, #8]
    c426:	2101      	movs	r1, #1
    c428:	4798      	blx	r3
}
    c42a:	bf00      	nop
    c42c:	3710      	adds	r7, #16
    c42e:	46bd      	mov	sp, r7
    c430:	bd80      	pop	{r7, pc}
    c432:	bf00      	nop
    c434:	0000b725 	.word	0x0000b725
    c438:	20002444 	.word	0x20002444

0000c43c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    c43c:	b580      	push	{r7, lr}
    c43e:	b088      	sub	sp, #32
    c440:	af00      	add	r7, sp, #0
    c442:	6078      	str	r0, [r7, #4]
    c444:	460b      	mov	r3, r1
    c446:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    c448:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c44c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    c44e:	687b      	ldr	r3, [r7, #4]
    c450:	7c9b      	ldrb	r3, [r3, #18]
    c452:	f003 030f 	and.w	r3, r3, #15
    c456:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    c458:	4b61      	ldr	r3, [pc, #388]	; (c5e0 <_usb_d_dev_handle_trfail+0x1a4>)
    c45a:	881b      	ldrh	r3, [r3, #0]
    c45c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    c45e:	7efb      	ldrb	r3, [r7, #27]
    c460:	015b      	lsls	r3, r3, #5
    c462:	4a60      	ldr	r2, [pc, #384]	; (c5e4 <_usb_d_dev_handle_trfail+0x1a8>)
    c464:	4413      	add	r3, r2
    c466:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    c468:	78fb      	ldrb	r3, [r7, #3]
    c46a:	2b00      	cmp	r3, #0
    c46c:	d006      	beq.n	c47c <_usb_d_dev_handle_trfail+0x40>
    c46e:	7efb      	ldrb	r3, [r7, #27]
    c470:	4619      	mov	r1, r3
    c472:	69f8      	ldr	r0, [r7, #28]
    c474:	4b5c      	ldr	r3, [pc, #368]	; (c5e8 <_usb_d_dev_handle_trfail+0x1ac>)
    c476:	4798      	blx	r3
    c478:	4603      	mov	r3, r0
    c47a:	e005      	b.n	c488 <_usb_d_dev_handle_trfail+0x4c>
    c47c:	7efb      	ldrb	r3, [r7, #27]
    c47e:	4619      	mov	r1, r3
    c480:	69f8      	ldr	r0, [r7, #28]
    c482:	4b5a      	ldr	r3, [pc, #360]	; (c5ec <_usb_d_dev_handle_trfail+0x1b0>)
    c484:	4798      	blx	r3
    c486:	4603      	mov	r3, r0
    c488:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c48a:	687b      	ldr	r3, [r7, #4]
    c48c:	7cdb      	ldrb	r3, [r3, #19]
    c48e:	f003 0307 	and.w	r3, r3, #7
    c492:	b2db      	uxtb	r3, r3
    c494:	2b01      	cmp	r3, #1
    c496:	bf0c      	ite	eq
    c498:	2301      	moveq	r3, #1
    c49a:	2300      	movne	r3, #0
    c49c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    c49e:	78fb      	ldrb	r3, [r7, #3]
    c4a0:	011b      	lsls	r3, r3, #4
    c4a2:	697a      	ldr	r2, [r7, #20]
    c4a4:	4413      	add	r3, r2
    c4a6:	7a9b      	ldrb	r3, [r3, #10]
    c4a8:	b2db      	uxtb	r3, r3
    c4aa:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    c4ac:	7cfb      	ldrb	r3, [r7, #19]
    c4ae:	2b02      	cmp	r3, #2
    c4b0:	d12f      	bne.n	c512 <_usb_d_dev_handle_trfail+0xd6>
    c4b2:	7b3b      	ldrb	r3, [r7, #12]
    c4b4:	f003 0301 	and.w	r3, r3, #1
    c4b8:	b2db      	uxtb	r3, r3
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d029      	beq.n	c512 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    c4be:	78fb      	ldrb	r3, [r7, #3]
    c4c0:	011b      	lsls	r3, r3, #4
    c4c2:	697a      	ldr	r2, [r7, #20]
    c4c4:	441a      	add	r2, r3
    c4c6:	7a93      	ldrb	r3, [r2, #10]
    c4c8:	f36f 0300 	bfc	r3, #0, #1
    c4cc:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c4ce:	78fb      	ldrb	r3, [r7, #3]
    c4d0:	f107 0220 	add.w	r2, r7, #32
    c4d4:	4413      	add	r3, r2
    c4d6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c4da:	7efb      	ldrb	r3, [r7, #27]
    c4dc:	4619      	mov	r1, r3
    c4de:	69f8      	ldr	r0, [r7, #28]
    c4e0:	4b43      	ldr	r3, [pc, #268]	; (c5f0 <_usb_d_dev_handle_trfail+0x1b4>)
    c4e2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    c4e4:	78fb      	ldrb	r3, [r7, #3]
    c4e6:	f107 0220 	add.w	r2, r7, #32
    c4ea:	4413      	add	r3, r2
    c4ec:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c4f0:	7efb      	ldrb	r3, [r7, #27]
    c4f2:	4619      	mov	r1, r3
    c4f4:	69f8      	ldr	r0, [r7, #28]
    c4f6:	4b3f      	ldr	r3, [pc, #252]	; (c5f4 <_usb_d_dev_handle_trfail+0x1b8>)
    c4f8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    c4fa:	78fb      	ldrb	r3, [r7, #3]
    c4fc:	2b00      	cmp	r3, #0
    c4fe:	bf14      	ite	ne
    c500:	2301      	movne	r3, #1
    c502:	2300      	moveq	r3, #0
    c504:	b2db      	uxtb	r3, r3
    c506:	2204      	movs	r2, #4
    c508:	4619      	mov	r1, r3
    c50a:	6878      	ldr	r0, [r7, #4]
    c50c:	4b3a      	ldr	r3, [pc, #232]	; (c5f8 <_usb_d_dev_handle_trfail+0x1bc>)
    c50e:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    c510:	e062      	b.n	c5d8 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    c512:	7b3b      	ldrb	r3, [r7, #12]
    c514:	f003 0302 	and.w	r3, r3, #2
    c518:	b2db      	uxtb	r3, r3
    c51a:	2b00      	cmp	r3, #0
    c51c:	d040      	beq.n	c5a0 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    c51e:	78fb      	ldrb	r3, [r7, #3]
    c520:	011b      	lsls	r3, r3, #4
    c522:	697a      	ldr	r2, [r7, #20]
    c524:	441a      	add	r2, r3
    c526:	7a93      	ldrb	r3, [r2, #10]
    c528:	f36f 0341 	bfc	r3, #1, #1
    c52c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c52e:	78fb      	ldrb	r3, [r7, #3]
    c530:	f107 0220 	add.w	r2, r7, #32
    c534:	4413      	add	r3, r2
    c536:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c53a:	7efb      	ldrb	r3, [r7, #27]
    c53c:	4619      	mov	r1, r3
    c53e:	69f8      	ldr	r0, [r7, #28]
    c540:	4b2b      	ldr	r3, [pc, #172]	; (c5f0 <_usb_d_dev_handle_trfail+0x1b4>)
    c542:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    c544:	78fb      	ldrb	r3, [r7, #3]
    c546:	f107 0220 	add.w	r2, r7, #32
    c54a:	4413      	add	r3, r2
    c54c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c550:	7efb      	ldrb	r3, [r7, #27]
    c552:	4619      	mov	r1, r3
    c554:	69f8      	ldr	r0, [r7, #28]
    c556:	4b27      	ldr	r3, [pc, #156]	; (c5f4 <_usb_d_dev_handle_trfail+0x1b8>)
    c558:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    c55a:	7cbb      	ldrb	r3, [r7, #18]
    c55c:	2b00      	cmp	r3, #0
    c55e:	d03b      	beq.n	c5d8 <_usb_d_dev_handle_trfail+0x19c>
    c560:	687b      	ldr	r3, [r7, #4]
    c562:	7cdb      	ldrb	r3, [r3, #19]
    c564:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c568:	b2db      	uxtb	r3, r3
    c56a:	2b00      	cmp	r3, #0
    c56c:	d034      	beq.n	c5d8 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    c56e:	687b      	ldr	r3, [r7, #4]
    c570:	7cdb      	ldrb	r3, [r3, #19]
    c572:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c576:	b2db      	uxtb	r3, r3
    c578:	461a      	mov	r2, r3
    c57a:	78fb      	ldrb	r3, [r7, #3]
    c57c:	4293      	cmp	r3, r2
    c57e:	d02b      	beq.n	c5d8 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c580:	687b      	ldr	r3, [r7, #4]
    c582:	7cdb      	ldrb	r3, [r3, #19]
    c584:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c588:	b2db      	uxtb	r3, r3
    c58a:	2b00      	cmp	r3, #0
    c58c:	bf14      	ite	ne
    c58e:	2301      	movne	r3, #1
    c590:	2300      	moveq	r3, #0
    c592:	b2db      	uxtb	r3, r3
    c594:	2200      	movs	r2, #0
    c596:	4619      	mov	r1, r3
    c598:	6878      	ldr	r0, [r7, #4]
    c59a:	4b17      	ldr	r3, [pc, #92]	; (c5f8 <_usb_d_dev_handle_trfail+0x1bc>)
    c59c:	4798      	blx	r3
}
    c59e:	e01b      	b.n	c5d8 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    c5a0:	78fa      	ldrb	r2, [r7, #3]
    c5a2:	7efb      	ldrb	r3, [r7, #27]
    c5a4:	4611      	mov	r1, r2
    c5a6:	4618      	mov	r0, r3
    c5a8:	4b14      	ldr	r3, [pc, #80]	; (c5fc <_usb_d_dev_handle_trfail+0x1c0>)
    c5aa:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c5ac:	78fb      	ldrb	r3, [r7, #3]
    c5ae:	f107 0220 	add.w	r2, r7, #32
    c5b2:	4413      	add	r3, r2
    c5b4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c5b8:	7efb      	ldrb	r3, [r7, #27]
    c5ba:	4619      	mov	r1, r3
    c5bc:	69f8      	ldr	r0, [r7, #28]
    c5be:	4b0c      	ldr	r3, [pc, #48]	; (c5f0 <_usb_d_dev_handle_trfail+0x1b4>)
    c5c0:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    c5c2:	78fb      	ldrb	r3, [r7, #3]
    c5c4:	f107 0220 	add.w	r2, r7, #32
    c5c8:	4413      	add	r3, r2
    c5ca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c5ce:	7efb      	ldrb	r3, [r7, #27]
    c5d0:	4619      	mov	r1, r3
    c5d2:	69f8      	ldr	r0, [r7, #28]
    c5d4:	4b07      	ldr	r3, [pc, #28]	; (c5f4 <_usb_d_dev_handle_trfail+0x1b8>)
    c5d6:	4798      	blx	r3
}
    c5d8:	bf00      	nop
    c5da:	3720      	adds	r7, #32
    c5dc:	46bd      	mov	sp, r7
    c5de:	bd80      	pop	{r7, pc}
    c5e0:	00012c68 	.word	0x00012c68
    c5e4:	2000250c 	.word	0x2000250c
    c5e8:	0000b1a5 	.word	0x0000b1a5
    c5ec:	0000b175 	.word	0x0000b175
    c5f0:	0000b049 	.word	0x0000b049
    c5f4:	0000b149 	.word	0x0000b149
    c5f8:	0000d1b5 	.word	0x0000d1b5
    c5fc:	0000ba31 	.word	0x0000ba31

0000c600 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c600:	b580      	push	{r7, lr}
    c602:	b082      	sub	sp, #8
    c604:	af00      	add	r7, sp, #0
    c606:	6078      	str	r0, [r7, #4]
    c608:	460b      	mov	r3, r1
    c60a:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c60c:	78fb      	ldrb	r3, [r7, #3]
    c60e:	f003 0310 	and.w	r3, r3, #16
    c612:	2b00      	cmp	r3, #0
    c614:	d003      	beq.n	c61e <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    c616:	6878      	ldr	r0, [r7, #4]
    c618:	4b0c      	ldr	r3, [pc, #48]	; (c64c <_usb_d_dev_trans_setup_isr+0x4c>)
    c61a:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    c61c:	e012      	b.n	c644 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c61e:	78fb      	ldrb	r3, [r7, #3]
    c620:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c624:	2b00      	cmp	r3, #0
    c626:	d004      	beq.n	c632 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    c628:	2101      	movs	r1, #1
    c62a:	6878      	ldr	r0, [r7, #4]
    c62c:	4b08      	ldr	r3, [pc, #32]	; (c650 <_usb_d_dev_trans_setup_isr+0x50>)
    c62e:	4798      	blx	r3
}
    c630:	e008      	b.n	c644 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c632:	78fb      	ldrb	r3, [r7, #3]
    c634:	f003 0320 	and.w	r3, r3, #32
    c638:	2b00      	cmp	r3, #0
    c63a:	d003      	beq.n	c644 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    c63c:	2100      	movs	r1, #0
    c63e:	6878      	ldr	r0, [r7, #4]
    c640:	4b03      	ldr	r3, [pc, #12]	; (c650 <_usb_d_dev_trans_setup_isr+0x50>)
    c642:	4798      	blx	r3
}
    c644:	bf00      	nop
    c646:	3708      	adds	r7, #8
    c648:	46bd      	mov	sp, r7
    c64a:	bd80      	pop	{r7, pc}
    c64c:	0000c321 	.word	0x0000c321
    c650:	0000c3f9 	.word	0x0000c3f9

0000c654 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c654:	b580      	push	{r7, lr}
    c656:	b082      	sub	sp, #8
    c658:	af00      	add	r7, sp, #0
    c65a:	6078      	str	r0, [r7, #4]
    c65c:	460b      	mov	r3, r1
    c65e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c660:	78fb      	ldrb	r3, [r7, #3]
    c662:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c666:	2b00      	cmp	r3, #0
    c668:	d004      	beq.n	c674 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    c66a:	2101      	movs	r1, #1
    c66c:	6878      	ldr	r0, [r7, #4]
    c66e:	4b1a      	ldr	r3, [pc, #104]	; (c6d8 <_usb_d_dev_trans_in_isr+0x84>)
    c670:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    c672:	e02c      	b.n	c6ce <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c674:	78fb      	ldrb	r3, [r7, #3]
    c676:	f003 0308 	and.w	r3, r3, #8
    c67a:	2b00      	cmp	r3, #0
    c67c:	d004      	beq.n	c688 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    c67e:	2101      	movs	r1, #1
    c680:	6878      	ldr	r0, [r7, #4]
    c682:	4b16      	ldr	r3, [pc, #88]	; (c6dc <_usb_d_dev_trans_in_isr+0x88>)
    c684:	4798      	blx	r3
}
    c686:	e022      	b.n	c6ce <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    c688:	78fb      	ldrb	r3, [r7, #3]
    c68a:	f003 0302 	and.w	r3, r3, #2
    c68e:	2b00      	cmp	r3, #0
    c690:	d004      	beq.n	c69c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    c692:	2101      	movs	r1, #1
    c694:	6878      	ldr	r0, [r7, #4]
    c696:	4b12      	ldr	r3, [pc, #72]	; (c6e0 <_usb_d_dev_trans_in_isr+0x8c>)
    c698:	4798      	blx	r3
}
    c69a:	e018      	b.n	c6ce <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c69c:	687b      	ldr	r3, [r7, #4]
    c69e:	7cdb      	ldrb	r3, [r3, #19]
    c6a0:	f003 0307 	and.w	r3, r3, #7
    c6a4:	b2db      	uxtb	r3, r3
    c6a6:	2b01      	cmp	r3, #1
    c6a8:	d111      	bne.n	c6ce <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c6aa:	78fb      	ldrb	r3, [r7, #3]
    c6ac:	f003 0304 	and.w	r3, r3, #4
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d004      	beq.n	c6be <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    c6b4:	2100      	movs	r1, #0
    c6b6:	6878      	ldr	r0, [r7, #4]
    c6b8:	4b08      	ldr	r3, [pc, #32]	; (c6dc <_usb_d_dev_trans_in_isr+0x88>)
    c6ba:	4798      	blx	r3
}
    c6bc:	e007      	b.n	c6ce <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c6be:	78fb      	ldrb	r3, [r7, #3]
    c6c0:	f003 0310 	and.w	r3, r3, #16
    c6c4:	2b00      	cmp	r3, #0
    c6c6:	d002      	beq.n	c6ce <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    c6c8:	6878      	ldr	r0, [r7, #4]
    c6ca:	4b06      	ldr	r3, [pc, #24]	; (c6e4 <_usb_d_dev_trans_in_isr+0x90>)
    c6cc:	4798      	blx	r3
}
    c6ce:	bf00      	nop
    c6d0:	3708      	adds	r7, #8
    c6d2:	46bd      	mov	sp, r7
    c6d4:	bd80      	pop	{r7, pc}
    c6d6:	bf00      	nop
    c6d8:	0000c3f9 	.word	0x0000c3f9
    c6dc:	0000c43d 	.word	0x0000c43d
    c6e0:	0000be45 	.word	0x0000be45
    c6e4:	0000c321 	.word	0x0000c321

0000c6e8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c6e8:	b580      	push	{r7, lr}
    c6ea:	b082      	sub	sp, #8
    c6ec:	af00      	add	r7, sp, #0
    c6ee:	6078      	str	r0, [r7, #4]
    c6f0:	460b      	mov	r3, r1
    c6f2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c6f4:	78fb      	ldrb	r3, [r7, #3]
    c6f6:	f003 0320 	and.w	r3, r3, #32
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	d004      	beq.n	c708 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    c6fe:	2100      	movs	r1, #0
    c700:	6878      	ldr	r0, [r7, #4]
    c702:	4b1a      	ldr	r3, [pc, #104]	; (c76c <_usb_d_dev_trans_out_isr+0x84>)
    c704:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    c706:	e02c      	b.n	c762 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c708:	78fb      	ldrb	r3, [r7, #3]
    c70a:	f003 0304 	and.w	r3, r3, #4
    c70e:	2b00      	cmp	r3, #0
    c710:	d004      	beq.n	c71c <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    c712:	2100      	movs	r1, #0
    c714:	6878      	ldr	r0, [r7, #4]
    c716:	4b16      	ldr	r3, [pc, #88]	; (c770 <_usb_d_dev_trans_out_isr+0x88>)
    c718:	4798      	blx	r3
}
    c71a:	e022      	b.n	c762 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    c71c:	78fb      	ldrb	r3, [r7, #3]
    c71e:	f003 0301 	and.w	r3, r3, #1
    c722:	2b00      	cmp	r3, #0
    c724:	d004      	beq.n	c730 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    c726:	2101      	movs	r1, #1
    c728:	6878      	ldr	r0, [r7, #4]
    c72a:	4b12      	ldr	r3, [pc, #72]	; (c774 <_usb_d_dev_trans_out_isr+0x8c>)
    c72c:	4798      	blx	r3
}
    c72e:	e018      	b.n	c762 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c730:	687b      	ldr	r3, [r7, #4]
    c732:	7cdb      	ldrb	r3, [r3, #19]
    c734:	f003 0307 	and.w	r3, r3, #7
    c738:	b2db      	uxtb	r3, r3
    c73a:	2b01      	cmp	r3, #1
    c73c:	d111      	bne.n	c762 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c73e:	78fb      	ldrb	r3, [r7, #3]
    c740:	f003 0308 	and.w	r3, r3, #8
    c744:	2b00      	cmp	r3, #0
    c746:	d004      	beq.n	c752 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    c748:	2101      	movs	r1, #1
    c74a:	6878      	ldr	r0, [r7, #4]
    c74c:	4b08      	ldr	r3, [pc, #32]	; (c770 <_usb_d_dev_trans_out_isr+0x88>)
    c74e:	4798      	blx	r3
}
    c750:	e007      	b.n	c762 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c752:	78fb      	ldrb	r3, [r7, #3]
    c754:	f003 0310 	and.w	r3, r3, #16
    c758:	2b00      	cmp	r3, #0
    c75a:	d002      	beq.n	c762 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    c75c:	6878      	ldr	r0, [r7, #4]
    c75e:	4b06      	ldr	r3, [pc, #24]	; (c778 <_usb_d_dev_trans_out_isr+0x90>)
    c760:	4798      	blx	r3
}
    c762:	bf00      	nop
    c764:	3708      	adds	r7, #8
    c766:	46bd      	mov	sp, r7
    c768:	bd80      	pop	{r7, pc}
    c76a:	bf00      	nop
    c76c:	0000c3f9 	.word	0x0000c3f9
    c770:	0000c43d 	.word	0x0000c43d
    c774:	0000c05d 	.word	0x0000c05d
    c778:	0000c321 	.word	0x0000c321

0000c77c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    c77c:	b580      	push	{r7, lr}
    c77e:	b084      	sub	sp, #16
    c780:	af00      	add	r7, sp, #0
    c782:	6078      	str	r0, [r7, #4]
    c784:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    c786:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c78a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c78c:	683b      	ldr	r3, [r7, #0]
    c78e:	7c9b      	ldrb	r3, [r3, #18]
    c790:	f003 030f 	and.w	r3, r3, #15
    c794:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    c796:	7afb      	ldrb	r3, [r7, #11]
    c798:	2201      	movs	r2, #1
    c79a:	409a      	lsls	r2, r3
    c79c:	687b      	ldr	r3, [r7, #4]
    c79e:	4013      	ands	r3, r2
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d03d      	beq.n	c820 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c7a4:	7afb      	ldrb	r3, [r7, #11]
    c7a6:	68fa      	ldr	r2, [r7, #12]
    c7a8:	3308      	adds	r3, #8
    c7aa:	015b      	lsls	r3, r3, #5
    c7ac:	4413      	add	r3, r2
    c7ae:	3307      	adds	r3, #7
    c7b0:	781b      	ldrb	r3, [r3, #0]
    c7b2:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c7b4:	7afb      	ldrb	r3, [r7, #11]
    c7b6:	68fa      	ldr	r2, [r7, #12]
    c7b8:	015b      	lsls	r3, r3, #5
    c7ba:	4413      	add	r3, r2
    c7bc:	f203 1309 	addw	r3, r3, #265	; 0x109
    c7c0:	781b      	ldrb	r3, [r3, #0]
    c7c2:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    c7c4:	7aba      	ldrb	r2, [r7, #10]
    c7c6:	7a7b      	ldrb	r3, [r7, #9]
    c7c8:	4013      	ands	r3, r2
    c7ca:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    c7cc:	7abb      	ldrb	r3, [r7, #10]
    c7ce:	2b00      	cmp	r3, #0
    c7d0:	d027      	beq.n	c822 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c7d2:	683b      	ldr	r3, [r7, #0]
    c7d4:	7cdb      	ldrb	r3, [r3, #19]
    c7d6:	f003 0307 	and.w	r3, r3, #7
    c7da:	b2db      	uxtb	r3, r3
    c7dc:	2b01      	cmp	r3, #1
    c7de:	d10c      	bne.n	c7fa <_usb_d_dev_handle_eps+0x7e>
    c7e0:	683b      	ldr	r3, [r7, #0]
    c7e2:	7cdb      	ldrb	r3, [r3, #19]
    c7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c7e8:	b2db      	uxtb	r3, r3
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d105      	bne.n	c7fa <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    c7ee:	7abb      	ldrb	r3, [r7, #10]
    c7f0:	4619      	mov	r1, r3
    c7f2:	6838      	ldr	r0, [r7, #0]
    c7f4:	4b0c      	ldr	r3, [pc, #48]	; (c828 <_usb_d_dev_handle_eps+0xac>)
    c7f6:	4798      	blx	r3
    c7f8:	e013      	b.n	c822 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    c7fa:	683b      	ldr	r3, [r7, #0]
    c7fc:	7cdb      	ldrb	r3, [r3, #19]
    c7fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c802:	b2db      	uxtb	r3, r3
    c804:	2b00      	cmp	r3, #0
    c806:	d005      	beq.n	c814 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    c808:	7abb      	ldrb	r3, [r7, #10]
    c80a:	4619      	mov	r1, r3
    c80c:	6838      	ldr	r0, [r7, #0]
    c80e:	4b07      	ldr	r3, [pc, #28]	; (c82c <_usb_d_dev_handle_eps+0xb0>)
    c810:	4798      	blx	r3
    c812:	e006      	b.n	c822 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    c814:	7abb      	ldrb	r3, [r7, #10]
    c816:	4619      	mov	r1, r3
    c818:	6838      	ldr	r0, [r7, #0]
    c81a:	4b05      	ldr	r3, [pc, #20]	; (c830 <_usb_d_dev_handle_eps+0xb4>)
    c81c:	4798      	blx	r3
    c81e:	e000      	b.n	c822 <_usb_d_dev_handle_eps+0xa6>
		return;
    c820:	bf00      	nop
		}
	}
}
    c822:	3710      	adds	r7, #16
    c824:	46bd      	mov	sp, r7
    c826:	bd80      	pop	{r7, pc}
    c828:	0000c601 	.word	0x0000c601
    c82c:	0000c655 	.word	0x0000c655
    c830:	0000c6e9 	.word	0x0000c6e9

0000c834 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    c834:	b580      	push	{r7, lr}
    c836:	b084      	sub	sp, #16
    c838:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    c83a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c83e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c840:	68bb      	ldr	r3, [r7, #8]
    c842:	8c1b      	ldrh	r3, [r3, #32]
    c844:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    c846:	88fb      	ldrh	r3, [r7, #6]
    c848:	2b00      	cmp	r3, #0
    c84a:	d104      	bne.n	c856 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    c84c:	4b13      	ldr	r3, [pc, #76]	; (c89c <_usb_d_dev_handler+0x68>)
    c84e:	4798      	blx	r3
    c850:	4603      	mov	r3, r0
    c852:	2b00      	cmp	r3, #0
    c854:	d11e      	bne.n	c894 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    c856:	2300      	movs	r3, #0
    c858:	73fb      	strb	r3, [r7, #15]
    c85a:	e017      	b.n	c88c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    c85c:	7bfa      	ldrb	r2, [r7, #15]
    c85e:	4613      	mov	r3, r2
    c860:	009b      	lsls	r3, r3, #2
    c862:	4413      	add	r3, r2
    c864:	009b      	lsls	r3, r3, #2
    c866:	3310      	adds	r3, #16
    c868:	4a0d      	ldr	r2, [pc, #52]	; (c8a0 <_usb_d_dev_handler+0x6c>)
    c86a:	4413      	add	r3, r2
    c86c:	3304      	adds	r3, #4
    c86e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    c870:	683b      	ldr	r3, [r7, #0]
    c872:	7c9b      	ldrb	r3, [r3, #18]
    c874:	2bff      	cmp	r3, #255	; 0xff
    c876:	d005      	beq.n	c884 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    c878:	88fb      	ldrh	r3, [r7, #6]
    c87a:	6839      	ldr	r1, [r7, #0]
    c87c:	4618      	mov	r0, r3
    c87e:	4b09      	ldr	r3, [pc, #36]	; (c8a4 <_usb_d_dev_handler+0x70>)
    c880:	4798      	blx	r3
    c882:	e000      	b.n	c886 <_usb_d_dev_handler+0x52>
			continue;
    c884:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    c886:	7bfb      	ldrb	r3, [r7, #15]
    c888:	3301      	adds	r3, #1
    c88a:	73fb      	strb	r3, [r7, #15]
    c88c:	7bfb      	ldrb	r3, [r7, #15]
    c88e:	2b08      	cmp	r3, #8
    c890:	d9e4      	bls.n	c85c <_usb_d_dev_handler+0x28>
    c892:	e000      	b.n	c896 <_usb_d_dev_handler+0x62>
			return;
    c894:	bf00      	nop
	}
}
    c896:	3710      	adds	r7, #16
    c898:	46bd      	mov	sp, r7
    c89a:	bd80      	pop	{r7, pc}
    c89c:	0000bd8d 	.word	0x0000bd8d
    c8a0:	20002444 	.word	0x20002444
    c8a4:	0000c77d 	.word	0x0000c77d

0000c8a8 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    c8a8:	b580      	push	{r7, lr}
    c8aa:	b082      	sub	sp, #8
    c8ac:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    c8ae:	2300      	movs	r3, #0
    c8b0:	71fb      	strb	r3, [r7, #7]
    c8b2:	e023      	b.n	c8fc <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c8b4:	79fa      	ldrb	r2, [r7, #7]
    c8b6:	4613      	mov	r3, r2
    c8b8:	009b      	lsls	r3, r3, #2
    c8ba:	4413      	add	r3, r2
    c8bc:	009b      	lsls	r3, r3, #2
    c8be:	3310      	adds	r3, #16
    c8c0:	4a14      	ldr	r2, [pc, #80]	; (c914 <_usb_d_dev_reset_epts+0x6c>)
    c8c2:	4413      	add	r3, r2
    c8c4:	3304      	adds	r3, #4
    c8c6:	2103      	movs	r1, #3
    c8c8:	4618      	mov	r0, r3
    c8ca:	4b13      	ldr	r3, [pc, #76]	; (c918 <_usb_d_dev_reset_epts+0x70>)
    c8cc:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    c8ce:	79fa      	ldrb	r2, [r7, #7]
    c8d0:	4910      	ldr	r1, [pc, #64]	; (c914 <_usb_d_dev_reset_epts+0x6c>)
    c8d2:	4613      	mov	r3, r2
    c8d4:	009b      	lsls	r3, r3, #2
    c8d6:	4413      	add	r3, r2
    c8d8:	009b      	lsls	r3, r3, #2
    c8da:	440b      	add	r3, r1
    c8dc:	3326      	adds	r3, #38	; 0x26
    c8de:	22ff      	movs	r2, #255	; 0xff
    c8e0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    c8e2:	79fa      	ldrb	r2, [r7, #7]
    c8e4:	490b      	ldr	r1, [pc, #44]	; (c914 <_usb_d_dev_reset_epts+0x6c>)
    c8e6:	4613      	mov	r3, r2
    c8e8:	009b      	lsls	r3, r3, #2
    c8ea:	4413      	add	r3, r2
    c8ec:	009b      	lsls	r3, r3, #2
    c8ee:	440b      	add	r3, r1
    c8f0:	3327      	adds	r3, #39	; 0x27
    c8f2:	2200      	movs	r2, #0
    c8f4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    c8f6:	79fb      	ldrb	r3, [r7, #7]
    c8f8:	3301      	adds	r3, #1
    c8fa:	71fb      	strb	r3, [r7, #7]
    c8fc:	79fb      	ldrb	r3, [r7, #7]
    c8fe:	2b08      	cmp	r3, #8
    c900:	d9d8      	bls.n	c8b4 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    c902:	22a0      	movs	r2, #160	; 0xa0
    c904:	2100      	movs	r1, #0
    c906:	4805      	ldr	r0, [pc, #20]	; (c91c <_usb_d_dev_reset_epts+0x74>)
    c908:	4b05      	ldr	r3, [pc, #20]	; (c920 <_usb_d_dev_reset_epts+0x78>)
    c90a:	4798      	blx	r3
}
    c90c:	bf00      	nop
    c90e:	3708      	adds	r7, #8
    c910:	46bd      	mov	sp, r7
    c912:	bd80      	pop	{r7, pc}
    c914:	20002444 	.word	0x20002444
    c918:	0000d16d 	.word	0x0000d16d
    c91c:	2000250c 	.word	0x2000250c
    c920:	00011875 	.word	0x00011875

0000c924 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    c924:	b580      	push	{r7, lr}
    c926:	b084      	sub	sp, #16
    c928:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    c92a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c92e:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    c930:	2301      	movs	r3, #1
    c932:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    c934:	2304      	movs	r3, #4
    c936:	713b      	strb	r3, [r7, #4]
    c938:	2300      	movs	r3, #0
    c93a:	717b      	strb	r3, [r7, #5]
    c93c:	2300      	movs	r3, #0
    c93e:	71bb      	strb	r3, [r7, #6]
    c940:	2300      	movs	r3, #0
    c942:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    c944:	2101      	movs	r1, #1
    c946:	68f8      	ldr	r0, [r7, #12]
    c948:	4b26      	ldr	r3, [pc, #152]	; (c9e4 <_usb_d_dev_init+0xc0>)
    c94a:	4798      	blx	r3
    c94c:	4603      	mov	r3, r0
    c94e:	f083 0301 	eor.w	r3, r3, #1
    c952:	b2db      	uxtb	r3, r3
    c954:	2b00      	cmp	r3, #0
    c956:	d011      	beq.n	c97c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    c958:	2102      	movs	r1, #2
    c95a:	68f8      	ldr	r0, [r7, #12]
    c95c:	4b22      	ldr	r3, [pc, #136]	; (c9e8 <_usb_d_dev_init+0xc4>)
    c95e:	4798      	blx	r3
    c960:	4603      	mov	r3, r0
    c962:	2b00      	cmp	r3, #0
    c964:	d006      	beq.n	c974 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    c966:	68f8      	ldr	r0, [r7, #12]
    c968:	4b20      	ldr	r3, [pc, #128]	; (c9ec <_usb_d_dev_init+0xc8>)
    c96a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    c96c:	2102      	movs	r1, #2
    c96e:	68f8      	ldr	r0, [r7, #12]
    c970:	4b1f      	ldr	r3, [pc, #124]	; (c9f0 <_usb_d_dev_init+0xcc>)
    c972:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    c974:	2101      	movs	r1, #1
    c976:	68f8      	ldr	r0, [r7, #12]
    c978:	4b1e      	ldr	r3, [pc, #120]	; (c9f4 <_usb_d_dev_init+0xd0>)
    c97a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    c97c:	2101      	movs	r1, #1
    c97e:	68f8      	ldr	r0, [r7, #12]
    c980:	4b1b      	ldr	r3, [pc, #108]	; (c9f0 <_usb_d_dev_init+0xcc>)
    c982:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    c984:	4b1c      	ldr	r3, [pc, #112]	; (c9f8 <_usb_d_dev_init+0xd4>)
    c986:	4a1d      	ldr	r2, [pc, #116]	; (c9fc <_usb_d_dev_init+0xd8>)
    c988:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    c98a:	4b1b      	ldr	r3, [pc, #108]	; (c9f8 <_usb_d_dev_init+0xd4>)
    c98c:	4a1b      	ldr	r2, [pc, #108]	; (c9fc <_usb_d_dev_init+0xd8>)
    c98e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    c990:	4b19      	ldr	r3, [pc, #100]	; (c9f8 <_usb_d_dev_init+0xd4>)
    c992:	4a1a      	ldr	r2, [pc, #104]	; (c9fc <_usb_d_dev_init+0xd8>)
    c994:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    c996:	4b18      	ldr	r3, [pc, #96]	; (c9f8 <_usb_d_dev_init+0xd4>)
    c998:	4a18      	ldr	r2, [pc, #96]	; (c9fc <_usb_d_dev_init+0xd8>)
    c99a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    c99c:	4b16      	ldr	r3, [pc, #88]	; (c9f8 <_usb_d_dev_init+0xd4>)
    c99e:	4a17      	ldr	r2, [pc, #92]	; (c9fc <_usb_d_dev_init+0xd8>)
    c9a0:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    c9a2:	4b17      	ldr	r3, [pc, #92]	; (ca00 <_usb_d_dev_init+0xdc>)
    c9a4:	4798      	blx	r3

	_usb_load_calib();
    c9a6:	4b17      	ldr	r3, [pc, #92]	; (ca04 <_usb_d_dev_init+0xe0>)
    c9a8:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    c9aa:	2104      	movs	r1, #4
    c9ac:	68f8      	ldr	r0, [r7, #12]
    c9ae:	4b11      	ldr	r3, [pc, #68]	; (c9f4 <_usb_d_dev_init+0xd0>)
    c9b0:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    c9b2:	4b15      	ldr	r3, [pc, #84]	; (ca08 <_usb_d_dev_init+0xe4>)
    c9b4:	4619      	mov	r1, r3
    c9b6:	68f8      	ldr	r0, [r7, #12]
    c9b8:	4b14      	ldr	r3, [pc, #80]	; (ca0c <_usb_d_dev_init+0xe8>)
    c9ba:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    c9bc:	7afb      	ldrb	r3, [r7, #11]
    c9be:	f107 0210 	add.w	r2, r7, #16
    c9c2:	4413      	add	r3, r2
    c9c4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    c9c8:	f043 0301 	orr.w	r3, r3, #1
    c9cc:	b2db      	uxtb	r3, r3
    c9ce:	b29b      	uxth	r3, r3
    c9d0:	4619      	mov	r1, r3
    c9d2:	68f8      	ldr	r0, [r7, #12]
    c9d4:	4b0e      	ldr	r3, [pc, #56]	; (ca10 <_usb_d_dev_init+0xec>)
    c9d6:	4798      	blx	r3

	return ERR_NONE;
    c9d8:	2300      	movs	r3, #0
}
    c9da:	4618      	mov	r0, r3
    c9dc:	3710      	adds	r7, #16
    c9de:	46bd      	mov	sp, r7
    c9e0:	bd80      	pop	{r7, pc}
    c9e2:	bf00      	nop
    c9e4:	0000afbd 	.word	0x0000afbd
    c9e8:	0000b30d 	.word	0x0000b30d
    c9ec:	0000b2e1 	.word	0x0000b2e1
    c9f0:	0000af93 	.word	0x0000af93
    c9f4:	0000b33d 	.word	0x0000b33d
    c9f8:	20002444 	.word	0x20002444
    c9fc:	0000b405 	.word	0x0000b405
    ca00:	0000c8a9 	.word	0x0000c8a9
    ca04:	0000b41d 	.word	0x0000b41d
    ca08:	2000250c 	.word	0x2000250c
    ca0c:	0000b3e9 	.word	0x0000b3e9
    ca10:	0000b3ad 	.word	0x0000b3ad

0000ca14 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    ca14:	b580      	push	{r7, lr}
    ca16:	b082      	sub	sp, #8
    ca18:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ca1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ca1e:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    ca20:	2103      	movs	r1, #3
    ca22:	6878      	ldr	r0, [r7, #4]
    ca24:	4b17      	ldr	r3, [pc, #92]	; (ca84 <_usb_d_dev_enable+0x70>)
    ca26:	4798      	blx	r3
    ca28:	4603      	mov	r3, r0
    ca2a:	2b00      	cmp	r3, #0
    ca2c:	d002      	beq.n	ca34 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    ca2e:	f06f 0310 	mvn.w	r3, #16
    ca32:	e023      	b.n	ca7c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    ca34:	6878      	ldr	r0, [r7, #4]
    ca36:	4b14      	ldr	r3, [pc, #80]	; (ca88 <_usb_d_dev_enable+0x74>)
    ca38:	4798      	blx	r3
    ca3a:	4603      	mov	r3, r0
    ca3c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    ca3e:	78fb      	ldrb	r3, [r7, #3]
    ca40:	f003 0302 	and.w	r3, r3, #2
    ca44:	2b00      	cmp	r3, #0
    ca46:	d107      	bne.n	ca58 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    ca48:	78fb      	ldrb	r3, [r7, #3]
    ca4a:	f043 0302 	orr.w	r3, r3, #2
    ca4e:	b2db      	uxtb	r3, r3
    ca50:	4619      	mov	r1, r3
    ca52:	6878      	ldr	r0, [r7, #4]
    ca54:	4b0d      	ldr	r3, [pc, #52]	; (ca8c <_usb_d_dev_enable+0x78>)
    ca56:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    ca58:	2050      	movs	r0, #80	; 0x50
    ca5a:	4b0d      	ldr	r3, [pc, #52]	; (ca90 <_usb_d_dev_enable+0x7c>)
    ca5c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    ca5e:	2051      	movs	r0, #81	; 0x51
    ca60:	4b0b      	ldr	r3, [pc, #44]	; (ca90 <_usb_d_dev_enable+0x7c>)
    ca62:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    ca64:	2052      	movs	r0, #82	; 0x52
    ca66:	4b0a      	ldr	r3, [pc, #40]	; (ca90 <_usb_d_dev_enable+0x7c>)
    ca68:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    ca6a:	2053      	movs	r0, #83	; 0x53
    ca6c:	4b08      	ldr	r3, [pc, #32]	; (ca90 <_usb_d_dev_enable+0x7c>)
    ca6e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    ca70:	f240 218d 	movw	r1, #653	; 0x28d
    ca74:	6878      	ldr	r0, [r7, #4]
    ca76:	4b07      	ldr	r3, [pc, #28]	; (ca94 <_usb_d_dev_enable+0x80>)
    ca78:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    ca7a:	2300      	movs	r3, #0
}
    ca7c:	4618      	mov	r0, r3
    ca7e:	3708      	adds	r7, #8
    ca80:	46bd      	mov	sp, r7
    ca82:	bd80      	pop	{r7, pc}
    ca84:	0000b2b7 	.word	0x0000b2b7
    ca88:	0000b365 	.word	0x0000b365
    ca8c:	0000b33d 	.word	0x0000b33d
    ca90:	0000aec9 	.word	0x0000aec9
    ca94:	0000b261 	.word	0x0000b261

0000ca98 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    ca98:	b580      	push	{r7, lr}
    ca9a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    ca9c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    caa0:	4b01      	ldr	r3, [pc, #4]	; (caa8 <_usb_d_dev_attach+0x10>)
    caa2:	4798      	blx	r3
}
    caa4:	bf00      	nop
    caa6:	bd80      	pop	{r7, pc}
    caa8:	0000b389 	.word	0x0000b389

0000caac <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    caac:	b580      	push	{r7, lr}
    caae:	b082      	sub	sp, #8
    cab0:	af00      	add	r7, sp, #0
    cab2:	4603      	mov	r3, r0
    cab4:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    cab6:	79fb      	ldrb	r3, [r7, #7]
    cab8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cabc:	b2db      	uxtb	r3, r3
    cabe:	4619      	mov	r1, r3
    cac0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cac4:	4b02      	ldr	r3, [pc, #8]	; (cad0 <_usb_d_dev_set_address+0x24>)
    cac6:	4798      	blx	r3
}
    cac8:	bf00      	nop
    caca:	3708      	adds	r7, #8
    cacc:	46bd      	mov	sp, r7
    cace:	bd80      	pop	{r7, pc}
    cad0:	0000b3cb 	.word	0x0000b3cb

0000cad4 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    cad4:	b590      	push	{r4, r7, lr}
    cad6:	b085      	sub	sp, #20
    cad8:	af00      	add	r7, sp, #0
    cada:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    cadc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cae0:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cae2:	687b      	ldr	r3, [r7, #4]
    cae4:	7c9b      	ldrb	r3, [r3, #18]
    cae6:	f003 030f 	and.w	r3, r3, #15
    caea:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    caec:	687b      	ldr	r3, [r7, #4]
    caee:	68db      	ldr	r3, [r3, #12]
    caf0:	461a      	mov	r2, r3
    caf2:	7afb      	ldrb	r3, [r7, #11]
    caf4:	2100      	movs	r1, #0
    caf6:	4618      	mov	r0, r3
    caf8:	4b0f      	ldr	r3, [pc, #60]	; (cb38 <_usb_d_dev_trans_setup+0x64>)
    cafa:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    cafc:	687b      	ldr	r3, [r7, #4]
    cafe:	8a1b      	ldrh	r3, [r3, #16]
    cb00:	461a      	mov	r2, r3
    cb02:	7af8      	ldrb	r0, [r7, #11]
    cb04:	2300      	movs	r3, #0
    cb06:	2100      	movs	r1, #0
    cb08:	4c0c      	ldr	r4, [pc, #48]	; (cb3c <_usb_d_dev_trans_setup+0x68>)
    cb0a:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    cb0c:	7afb      	ldrb	r3, [r7, #11]
    cb0e:	22b0      	movs	r2, #176	; 0xb0
    cb10:	4619      	mov	r1, r3
    cb12:	68f8      	ldr	r0, [r7, #12]
    cb14:	4b0a      	ldr	r3, [pc, #40]	; (cb40 <_usb_d_dev_trans_setup+0x6c>)
    cb16:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    cb18:	7afb      	ldrb	r3, [r7, #11]
    cb1a:	2200      	movs	r2, #0
    cb1c:	2100      	movs	r1, #0
    cb1e:	4618      	mov	r0, r3
    cb20:	4b08      	ldr	r3, [pc, #32]	; (cb44 <_usb_d_dev_trans_setup+0x70>)
    cb22:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    cb24:	7afb      	ldrb	r3, [r7, #11]
    cb26:	2210      	movs	r2, #16
    cb28:	4619      	mov	r1, r3
    cb2a:	68f8      	ldr	r0, [r7, #12]
    cb2c:	4b06      	ldr	r3, [pc, #24]	; (cb48 <_usb_d_dev_trans_setup+0x74>)
    cb2e:	4798      	blx	r3
}
    cb30:	bf00      	nop
    cb32:	3714      	adds	r7, #20
    cb34:	46bd      	mov	sp, r7
    cb36:	bd90      	pop	{r4, r7, pc}
    cb38:	0000b869 	.word	0x0000b869
    cb3c:	0000b9f1 	.word	0x0000b9f1
    cb40:	0000b0c9 	.word	0x0000b0c9
    cb44:	0000bac1 	.word	0x0000bac1
    cb48:	0000b11d 	.word	0x0000b11d

0000cb4c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    cb4c:	b580      	push	{r7, lr}
    cb4e:	b088      	sub	sp, #32
    cb50:	af00      	add	r7, sp, #0
    cb52:	4603      	mov	r3, r0
    cb54:	71fb      	strb	r3, [r7, #7]
    cb56:	460b      	mov	r3, r1
    cb58:	71bb      	strb	r3, [r7, #6]
    cb5a:	4613      	mov	r3, r2
    cb5c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    cb5e:	79fb      	ldrb	r3, [r7, #7]
    cb60:	f003 030f 	and.w	r3, r3, #15
    cb64:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    cb66:	79fb      	ldrb	r3, [r7, #7]
    cb68:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cb6c:	2b00      	cmp	r3, #0
    cb6e:	bf14      	ite	ne
    cb70:	2301      	movne	r3, #1
    cb72:	2300      	moveq	r3, #0
    cb74:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cb76:	7fba      	ldrb	r2, [r7, #30]
    cb78:	7ffb      	ldrb	r3, [r7, #31]
    cb7a:	4611      	mov	r1, r2
    cb7c:	4618      	mov	r0, r3
    cb7e:	4b3e      	ldr	r3, [pc, #248]	; (cc78 <_usb_d_dev_ep_init+0x12c>)
    cb80:	4798      	blx	r3
    cb82:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    cb84:	79bb      	ldrb	r3, [r7, #6]
    cb86:	f003 0303 	and.w	r3, r3, #3
    cb8a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    cb8c:	7ffa      	ldrb	r2, [r7, #31]
    cb8e:	4613      	mov	r3, r2
    cb90:	005b      	lsls	r3, r3, #1
    cb92:	4413      	add	r3, r2
    cb94:	009b      	lsls	r3, r3, #2
    cb96:	4a39      	ldr	r2, [pc, #228]	; (cc7c <_usb_d_dev_ep_init+0x130>)
    cb98:	4413      	add	r3, r2
    cb9a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    cb9c:	7ffb      	ldrb	r3, [r7, #31]
    cb9e:	2b04      	cmp	r3, #4
    cba0:	d902      	bls.n	cba8 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    cba2:	f06f 0311 	mvn.w	r3, #17
    cba6:	e063      	b.n	cc70 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    cba8:	69bb      	ldr	r3, [r7, #24]
    cbaa:	7c9b      	ldrb	r3, [r3, #18]
    cbac:	2bff      	cmp	r3, #255	; 0xff
    cbae:	d002      	beq.n	cbb6 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    cbb0:	f06f 0313 	mvn.w	r3, #19
    cbb4:	e05c      	b.n	cc70 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    cbb6:	7dfb      	ldrb	r3, [r7, #23]
    cbb8:	2b00      	cmp	r3, #0
    cbba:	d11f      	bne.n	cbfc <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    cbbc:	7fbb      	ldrb	r3, [r7, #30]
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	bf14      	ite	ne
    cbc2:	2301      	movne	r3, #1
    cbc4:	2300      	moveq	r3, #0
    cbc6:	b2db      	uxtb	r3, r3
    cbc8:	f083 0301 	eor.w	r3, r3, #1
    cbcc:	b2db      	uxtb	r3, r3
    cbce:	f003 0301 	and.w	r3, r3, #1
    cbd2:	b2da      	uxtb	r2, r3
    cbd4:	7ffb      	ldrb	r3, [r7, #31]
    cbd6:	4611      	mov	r1, r2
    cbd8:	4618      	mov	r0, r3
    cbda:	4b27      	ldr	r3, [pc, #156]	; (cc78 <_usb_d_dev_ep_init+0x12c>)
    cbdc:	4798      	blx	r3
    cbde:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    cbe0:	68fb      	ldr	r3, [r7, #12]
    cbe2:	7c9b      	ldrb	r3, [r3, #18]
    cbe4:	2bff      	cmp	r3, #255	; 0xff
    cbe6:	d002      	beq.n	cbee <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    cbe8:	f06f 0313 	mvn.w	r3, #19
    cbec:	e040      	b.n	cc70 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    cbee:	693b      	ldr	r3, [r7, #16]
    cbf0:	681b      	ldr	r3, [r3, #0]
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d102      	bne.n	cbfc <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    cbf6:	f06f 0312 	mvn.w	r3, #18
    cbfa:	e039      	b.n	cc70 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cbfc:	7fbb      	ldrb	r3, [r7, #30]
    cbfe:	2b00      	cmp	r3, #0
    cc00:	d007      	beq.n	cc12 <_usb_d_dev_ep_init+0xc6>
    cc02:	693b      	ldr	r3, [r7, #16]
    cc04:	685b      	ldr	r3, [r3, #4]
    cc06:	2b00      	cmp	r3, #0
    cc08:	bf14      	ite	ne
    cc0a:	2301      	movne	r3, #1
    cc0c:	2300      	moveq	r3, #0
    cc0e:	b2db      	uxtb	r3, r3
    cc10:	e006      	b.n	cc20 <_usb_d_dev_ep_init+0xd4>
    cc12:	693b      	ldr	r3, [r7, #16]
    cc14:	681b      	ldr	r3, [r3, #0]
    cc16:	2b00      	cmp	r3, #0
    cc18:	bf14      	ite	ne
    cc1a:	2301      	movne	r3, #1
    cc1c:	2300      	moveq	r3, #0
    cc1e:	b2db      	uxtb	r3, r3
    cc20:	2b00      	cmp	r3, #0
    cc22:	d00f      	beq.n	cc44 <_usb_d_dev_ep_init+0xf8>
    cc24:	7fbb      	ldrb	r3, [r7, #30]
    cc26:	2b00      	cmp	r3, #0
    cc28:	d003      	beq.n	cc32 <_usb_d_dev_ep_init+0xe6>
    cc2a:	693b      	ldr	r3, [r7, #16]
    cc2c:	895b      	ldrh	r3, [r3, #10]
    cc2e:	461a      	mov	r2, r3
    cc30:	e002      	b.n	cc38 <_usb_d_dev_ep_init+0xec>
    cc32:	693b      	ldr	r3, [r7, #16]
    cc34:	891b      	ldrh	r3, [r3, #8]
    cc36:	461a      	mov	r2, r3
    cc38:	88bb      	ldrh	r3, [r7, #4]
    cc3a:	429a      	cmp	r2, r3
    cc3c:	da02      	bge.n	cc44 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    cc3e:	f06f 0312 	mvn.w	r3, #18
    cc42:	e015      	b.n	cc70 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cc44:	7fbb      	ldrb	r3, [r7, #30]
    cc46:	2b00      	cmp	r3, #0
    cc48:	d002      	beq.n	cc50 <_usb_d_dev_ep_init+0x104>
    cc4a:	693b      	ldr	r3, [r7, #16]
    cc4c:	685b      	ldr	r3, [r3, #4]
    cc4e:	e001      	b.n	cc54 <_usb_d_dev_ep_init+0x108>
    cc50:	693b      	ldr	r3, [r7, #16]
    cc52:	681b      	ldr	r3, [r3, #0]
    cc54:	69ba      	ldr	r2, [r7, #24]
    cc56:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    cc58:	69bb      	ldr	r3, [r7, #24]
    cc5a:	88ba      	ldrh	r2, [r7, #4]
    cc5c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    cc5e:	7dfb      	ldrb	r3, [r7, #23]
    cc60:	3301      	adds	r3, #1
    cc62:	b2da      	uxtb	r2, r3
    cc64:	69bb      	ldr	r3, [r7, #24]
    cc66:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    cc68:	69bb      	ldr	r3, [r7, #24]
    cc6a:	79fa      	ldrb	r2, [r7, #7]
    cc6c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    cc6e:	2300      	movs	r3, #0
}
    cc70:	4618      	mov	r0, r3
    cc72:	3720      	adds	r7, #32
    cc74:	46bd      	mov	sp, r7
    cc76:	bd80      	pop	{r7, pc}
    cc78:	0000bb7d 	.word	0x0000bb7d
    cc7c:	00012c2c 	.word	0x00012c2c

0000cc80 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    cc80:	b580      	push	{r7, lr}
    cc82:	b086      	sub	sp, #24
    cc84:	af00      	add	r7, sp, #0
    cc86:	4603      	mov	r3, r0
    cc88:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    cc8a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cc8e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    cc90:	79fb      	ldrb	r3, [r7, #7]
    cc92:	f003 030f 	and.w	r3, r3, #15
    cc96:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    cc98:	79fb      	ldrb	r3, [r7, #7]
    cc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cc9e:	2b00      	cmp	r3, #0
    cca0:	bf14      	ite	ne
    cca2:	2301      	movne	r3, #1
    cca4:	2300      	moveq	r3, #0
    cca6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cca8:	7cba      	ldrb	r2, [r7, #18]
    ccaa:	7cfb      	ldrb	r3, [r7, #19]
    ccac:	4611      	mov	r1, r2
    ccae:	4618      	mov	r0, r3
    ccb0:	4b2a      	ldr	r3, [pc, #168]	; (cd5c <_usb_d_dev_ep_deinit+0xdc>)
    ccb2:	4798      	blx	r3
    ccb4:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ccb6:	7cfb      	ldrb	r3, [r7, #19]
    ccb8:	2b04      	cmp	r3, #4
    ccba:	d84a      	bhi.n	cd52 <_usb_d_dev_ep_deinit+0xd2>
    ccbc:	68fb      	ldr	r3, [r7, #12]
    ccbe:	7c9b      	ldrb	r3, [r3, #18]
    ccc0:	2bff      	cmp	r3, #255	; 0xff
    ccc2:	d046      	beq.n	cd52 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ccc4:	7cbb      	ldrb	r3, [r7, #18]
    ccc6:	2203      	movs	r2, #3
    ccc8:	4619      	mov	r1, r3
    ccca:	68f8      	ldr	r0, [r7, #12]
    cccc:	4b24      	ldr	r3, [pc, #144]	; (cd60 <_usb_d_dev_ep_deinit+0xe0>)
    ccce:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ccd0:	68fb      	ldr	r3, [r7, #12]
    ccd2:	7cdb      	ldrb	r3, [r3, #19]
    ccd4:	f003 0307 	and.w	r3, r3, #7
    ccd8:	b2db      	uxtb	r3, r3
    ccda:	2b01      	cmp	r3, #1
    ccdc:	d107      	bne.n	ccee <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ccde:	79fb      	ldrb	r3, [r7, #7]
    cce0:	697a      	ldr	r2, [r7, #20]
    cce2:	3308      	adds	r3, #8
    cce4:	015b      	lsls	r3, r3, #5
    cce6:	4413      	add	r3, r2
    cce8:	2200      	movs	r2, #0
    ccea:	701a      	strb	r2, [r3, #0]
    ccec:	e02a      	b.n	cd44 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    ccee:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ccf2:	2b00      	cmp	r3, #0
    ccf4:	da15      	bge.n	cd22 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    ccf6:	79fb      	ldrb	r3, [r7, #7]
    ccf8:	f003 030f 	and.w	r3, r3, #15
    ccfc:	79fa      	ldrb	r2, [r7, #7]
    ccfe:	f002 020f 	and.w	r2, r2, #15
    cd02:	6979      	ldr	r1, [r7, #20]
    cd04:	3208      	adds	r2, #8
    cd06:	0152      	lsls	r2, r2, #5
    cd08:	440a      	add	r2, r1
    cd0a:	7812      	ldrb	r2, [r2, #0]
    cd0c:	b2d2      	uxtb	r2, r2
    cd0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    cd12:	b2d1      	uxtb	r1, r2
    cd14:	697a      	ldr	r2, [r7, #20]
    cd16:	3308      	adds	r3, #8
    cd18:	015b      	lsls	r3, r3, #5
    cd1a:	4413      	add	r3, r2
    cd1c:	460a      	mov	r2, r1
    cd1e:	701a      	strb	r2, [r3, #0]
    cd20:	e010      	b.n	cd44 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    cd22:	79fb      	ldrb	r3, [r7, #7]
    cd24:	79fa      	ldrb	r2, [r7, #7]
    cd26:	6979      	ldr	r1, [r7, #20]
    cd28:	3208      	adds	r2, #8
    cd2a:	0152      	lsls	r2, r2, #5
    cd2c:	440a      	add	r2, r1
    cd2e:	7812      	ldrb	r2, [r2, #0]
    cd30:	b2d2      	uxtb	r2, r2
    cd32:	f022 0207 	bic.w	r2, r2, #7
    cd36:	b2d1      	uxtb	r1, r2
    cd38:	697a      	ldr	r2, [r7, #20]
    cd3a:	3308      	adds	r3, #8
    cd3c:	015b      	lsls	r3, r3, #5
    cd3e:	4413      	add	r3, r2
    cd40:	460a      	mov	r2, r1
    cd42:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    cd44:	68fb      	ldr	r3, [r7, #12]
    cd46:	2200      	movs	r2, #0
    cd48:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    cd4a:	68fb      	ldr	r3, [r7, #12]
    cd4c:	22ff      	movs	r2, #255	; 0xff
    cd4e:	749a      	strb	r2, [r3, #18]
    cd50:	e000      	b.n	cd54 <_usb_d_dev_ep_deinit+0xd4>
		return;
    cd52:	bf00      	nop
}
    cd54:	3718      	adds	r7, #24
    cd56:	46bd      	mov	sp, r7
    cd58:	bd80      	pop	{r7, pc}
    cd5a:	bf00      	nop
    cd5c:	0000bb7d 	.word	0x0000bb7d
    cd60:	0000d1b5 	.word	0x0000d1b5

0000cd64 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    cd64:	b5b0      	push	{r4, r5, r7, lr}
    cd66:	b088      	sub	sp, #32
    cd68:	af00      	add	r7, sp, #0
    cd6a:	4603      	mov	r3, r0
    cd6c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    cd6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cd72:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    cd74:	79fb      	ldrb	r3, [r7, #7]
    cd76:	f003 030f 	and.w	r3, r3, #15
    cd7a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    cd7c:	79fb      	ldrb	r3, [r7, #7]
    cd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cd82:	2b00      	cmp	r3, #0
    cd84:	bf14      	ite	ne
    cd86:	2301      	movne	r3, #1
    cd88:	2300      	moveq	r3, #0
    cd8a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    cd8c:	7eba      	ldrb	r2, [r7, #26]
    cd8e:	7efb      	ldrb	r3, [r7, #27]
    cd90:	4611      	mov	r1, r2
    cd92:	4618      	mov	r0, r3
    cd94:	4b70      	ldr	r3, [pc, #448]	; (cf58 <_usb_d_dev_ep_enable+0x1f4>)
    cd96:	4798      	blx	r3
    cd98:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    cd9a:	7efb      	ldrb	r3, [r7, #27]
    cd9c:	4619      	mov	r1, r3
    cd9e:	69f8      	ldr	r0, [r7, #28]
    cda0:	4b6e      	ldr	r3, [pc, #440]	; (cf5c <_usb_d_dev_ep_enable+0x1f8>)
    cda2:	4798      	blx	r3
    cda4:	4603      	mov	r3, r0
    cda6:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cda8:	7efb      	ldrb	r3, [r7, #27]
    cdaa:	2b04      	cmp	r3, #4
    cdac:	d803      	bhi.n	cdb6 <_usb_d_dev_ep_enable+0x52>
    cdae:	697b      	ldr	r3, [r7, #20]
    cdb0:	7c9b      	ldrb	r3, [r3, #18]
    cdb2:	2bff      	cmp	r3, #255	; 0xff
    cdb4:	d102      	bne.n	cdbc <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    cdb6:	f06f 0311 	mvn.w	r3, #17
    cdba:	e0c8      	b.n	cf4e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    cdbc:	7efb      	ldrb	r3, [r7, #27]
    cdbe:	015b      	lsls	r3, r3, #5
    cdc0:	4a67      	ldr	r2, [pc, #412]	; (cf60 <_usb_d_dev_ep_enable+0x1fc>)
    cdc2:	4413      	add	r3, r2
    cdc4:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    cdc6:	697b      	ldr	r3, [r7, #20]
    cdc8:	7cdb      	ldrb	r3, [r3, #19]
    cdca:	f003 0307 	and.w	r3, r3, #7
    cdce:	b2db      	uxtb	r3, r3
    cdd0:	2b01      	cmp	r3, #1
    cdd2:	d14b      	bne.n	ce6c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    cdd4:	7cfb      	ldrb	r3, [r7, #19]
    cdd6:	f003 0377 	and.w	r3, r3, #119	; 0x77
    cdda:	2b00      	cmp	r3, #0
    cddc:	d002      	beq.n	cde4 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    cdde:	f06f 0313 	mvn.w	r3, #19
    cde2:	e0b4      	b.n	cf4e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    cde4:	7efb      	ldrb	r3, [r7, #27]
    cde6:	2211      	movs	r2, #17
    cde8:	4619      	mov	r1, r3
    cdea:	69f8      	ldr	r0, [r7, #28]
    cdec:	4b5d      	ldr	r3, [pc, #372]	; (cf64 <_usb_d_dev_ep_enable+0x200>)
    cdee:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cdf0:	697b      	ldr	r3, [r7, #20]
    cdf2:	8a1b      	ldrh	r3, [r3, #16]
    cdf4:	039b      	lsls	r3, r3, #14
    cdf6:	4c5c      	ldr	r4, [pc, #368]	; (cf68 <_usb_d_dev_ep_enable+0x204>)
    cdf8:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cdfa:	697b      	ldr	r3, [r7, #20]
    cdfc:	8a1b      	ldrh	r3, [r3, #16]
    cdfe:	4618      	mov	r0, r3
    ce00:	4b5a      	ldr	r3, [pc, #360]	; (cf6c <_usb_d_dev_ep_enable+0x208>)
    ce02:	4798      	blx	r3
    ce04:	4603      	mov	r3, r0
    ce06:	071b      	lsls	r3, r3, #28
    ce08:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ce0c:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ce10:	68fb      	ldr	r3, [r7, #12]
    ce12:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    ce14:	68fb      	ldr	r3, [r7, #12]
    ce16:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ce1a:	697b      	ldr	r3, [r7, #20]
    ce1c:	8a1b      	ldrh	r3, [r3, #16]
    ce1e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ce22:	697b      	ldr	r3, [r7, #20]
    ce24:	8a1b      	ldrh	r3, [r3, #16]
    ce26:	4618      	mov	r0, r3
    ce28:	4b50      	ldr	r3, [pc, #320]	; (cf6c <_usb_d_dev_ep_enable+0x208>)
    ce2a:	4798      	blx	r3
    ce2c:	4603      	mov	r3, r0
    ce2e:	071b      	lsls	r3, r3, #28
    ce30:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ce34:	432b      	orrs	r3, r5
    ce36:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ce38:	7efb      	ldrb	r3, [r7, #27]
    ce3a:	2200      	movs	r2, #0
    ce3c:	2100      	movs	r1, #0
    ce3e:	4618      	mov	r0, r3
    ce40:	4b4b      	ldr	r3, [pc, #300]	; (cf70 <_usb_d_dev_ep_enable+0x20c>)
    ce42:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ce44:	7efb      	ldrb	r3, [r7, #27]
    ce46:	2200      	movs	r2, #0
    ce48:	2101      	movs	r1, #1
    ce4a:	4618      	mov	r0, r3
    ce4c:	4b49      	ldr	r3, [pc, #292]	; (cf74 <_usb_d_dev_ep_enable+0x210>)
    ce4e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    ce50:	7efb      	ldrb	r3, [r7, #27]
    ce52:	2100      	movs	r1, #0
    ce54:	4618      	mov	r0, r3
    ce56:	4b48      	ldr	r3, [pc, #288]	; (cf78 <_usb_d_dev_ep_enable+0x214>)
    ce58:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ce5a:	7efb      	ldrb	r3, [r7, #27]
    ce5c:	2101      	movs	r1, #1
    ce5e:	4618      	mov	r0, r3
    ce60:	4b45      	ldr	r3, [pc, #276]	; (cf78 <_usb_d_dev_ep_enable+0x214>)
    ce62:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ce64:	6978      	ldr	r0, [r7, #20]
    ce66:	4b45      	ldr	r3, [pc, #276]	; (cf7c <_usb_d_dev_ep_enable+0x218>)
    ce68:	4798      	blx	r3
    ce6a:	e06f      	b.n	cf4c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ce6c:	7ebb      	ldrb	r3, [r7, #26]
    ce6e:	2b00      	cmp	r3, #0
    ce70:	d038      	beq.n	cee4 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ce72:	7cfb      	ldrb	r3, [r7, #19]
    ce74:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ce78:	2b00      	cmp	r3, #0
    ce7a:	d002      	beq.n	ce82 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    ce7c:	f06f 0313 	mvn.w	r3, #19
    ce80:	e065      	b.n	cf4e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    ce82:	697b      	ldr	r3, [r7, #20]
    ce84:	7cdb      	ldrb	r3, [r3, #19]
    ce86:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ce8a:	b2db      	uxtb	r3, r3
    ce8c:	011b      	lsls	r3, r3, #4
    ce8e:	b2db      	uxtb	r3, r3
    ce90:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ce94:	b2da      	uxtb	r2, r3
    ce96:	7cfb      	ldrb	r3, [r7, #19]
    ce98:	4313      	orrs	r3, r2
    ce9a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ce9c:	7cfa      	ldrb	r2, [r7, #19]
    ce9e:	7efb      	ldrb	r3, [r7, #27]
    cea0:	4619      	mov	r1, r3
    cea2:	69f8      	ldr	r0, [r7, #28]
    cea4:	4b2f      	ldr	r3, [pc, #188]	; (cf64 <_usb_d_dev_ep_enable+0x200>)
    cea6:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    cea8:	68fb      	ldr	r3, [r7, #12]
    ceaa:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ceae:	697b      	ldr	r3, [r7, #20]
    ceb0:	8a1b      	ldrh	r3, [r3, #16]
    ceb2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ceb6:	697b      	ldr	r3, [r7, #20]
    ceb8:	8a1b      	ldrh	r3, [r3, #16]
    ceba:	4618      	mov	r0, r3
    cebc:	4b2b      	ldr	r3, [pc, #172]	; (cf6c <_usb_d_dev_ep_enable+0x208>)
    cebe:	4798      	blx	r3
    cec0:	4603      	mov	r3, r0
    cec2:	071b      	lsls	r3, r3, #28
    cec4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cec8:	432b      	orrs	r3, r5
    ceca:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cecc:	7efb      	ldrb	r3, [r7, #27]
    cece:	2200      	movs	r2, #0
    ced0:	2101      	movs	r1, #1
    ced2:	4618      	mov	r0, r3
    ced4:	4b27      	ldr	r3, [pc, #156]	; (cf74 <_usb_d_dev_ep_enable+0x210>)
    ced6:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ced8:	7efb      	ldrb	r3, [r7, #27]
    ceda:	2101      	movs	r1, #1
    cedc:	4618      	mov	r0, r3
    cede:	4b26      	ldr	r3, [pc, #152]	; (cf78 <_usb_d_dev_ep_enable+0x214>)
    cee0:	4798      	blx	r3
    cee2:	e033      	b.n	cf4c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    cee4:	7cfb      	ldrb	r3, [r7, #19]
    cee6:	f003 0307 	and.w	r3, r3, #7
    ceea:	2b00      	cmp	r3, #0
    ceec:	d002      	beq.n	cef4 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    ceee:	f06f 0313 	mvn.w	r3, #19
    cef2:	e02c      	b.n	cf4e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    cef4:	697b      	ldr	r3, [r7, #20]
    cef6:	7cdb      	ldrb	r3, [r3, #19]
    cef8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cefc:	b2db      	uxtb	r3, r3
    cefe:	461a      	mov	r2, r3
    cf00:	7cfb      	ldrb	r3, [r7, #19]
    cf02:	4313      	orrs	r3, r2
    cf04:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    cf06:	7cfa      	ldrb	r2, [r7, #19]
    cf08:	7efb      	ldrb	r3, [r7, #27]
    cf0a:	4619      	mov	r1, r3
    cf0c:	69f8      	ldr	r0, [r7, #28]
    cf0e:	4b15      	ldr	r3, [pc, #84]	; (cf64 <_usb_d_dev_ep_enable+0x200>)
    cf10:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cf12:	697b      	ldr	r3, [r7, #20]
    cf14:	8a1b      	ldrh	r3, [r3, #16]
    cf16:	039b      	lsls	r3, r3, #14
    cf18:	4c13      	ldr	r4, [pc, #76]	; (cf68 <_usb_d_dev_ep_enable+0x204>)
    cf1a:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cf1c:	697b      	ldr	r3, [r7, #20]
    cf1e:	8a1b      	ldrh	r3, [r3, #16]
    cf20:	4618      	mov	r0, r3
    cf22:	4b12      	ldr	r3, [pc, #72]	; (cf6c <_usb_d_dev_ep_enable+0x208>)
    cf24:	4798      	blx	r3
    cf26:	4603      	mov	r3, r0
    cf28:	071b      	lsls	r3, r3, #28
    cf2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cf2e:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cf32:	68fb      	ldr	r3, [r7, #12]
    cf34:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    cf36:	7efb      	ldrb	r3, [r7, #27]
    cf38:	2200      	movs	r2, #0
    cf3a:	2100      	movs	r1, #0
    cf3c:	4618      	mov	r0, r3
    cf3e:	4b0c      	ldr	r3, [pc, #48]	; (cf70 <_usb_d_dev_ep_enable+0x20c>)
    cf40:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    cf42:	7efb      	ldrb	r3, [r7, #27]
    cf44:	2100      	movs	r1, #0
    cf46:	4618      	mov	r0, r3
    cf48:	4b0b      	ldr	r3, [pc, #44]	; (cf78 <_usb_d_dev_ep_enable+0x214>)
    cf4a:	4798      	blx	r3
	}

	return USB_OK;
    cf4c:	2300      	movs	r3, #0
}
    cf4e:	4618      	mov	r0, r3
    cf50:	3720      	adds	r7, #32
    cf52:	46bd      	mov	sp, r7
    cf54:	bdb0      	pop	{r4, r5, r7, pc}
    cf56:	bf00      	nop
    cf58:	0000bb7d 	.word	0x0000bb7d
    cf5c:	0000b203 	.word	0x0000b203
    cf60:	2000250c 	.word	0x2000250c
    cf64:	0000b1d9 	.word	0x0000b1d9
    cf68:	0fffc000 	.word	0x0fffc000
    cf6c:	0000bb19 	.word	0x0000bb19
    cf70:	0000bac1 	.word	0x0000bac1
    cf74:	0000ba69 	.word	0x0000ba69
    cf78:	0000ba31 	.word	0x0000ba31
    cf7c:	0000cad5 	.word	0x0000cad5

0000cf80 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    cf80:	b580      	push	{r7, lr}
    cf82:	b084      	sub	sp, #16
    cf84:	af00      	add	r7, sp, #0
    cf86:	6078      	str	r0, [r7, #4]
    cf88:	460b      	mov	r3, r1
    cf8a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cf8c:	687b      	ldr	r3, [r7, #4]
    cf8e:	7c9b      	ldrb	r3, [r3, #18]
    cf90:	f003 030f 	and.w	r3, r3, #15
    cf94:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    cf96:	78fa      	ldrb	r2, [r7, #3]
    cf98:	7bfb      	ldrb	r3, [r7, #15]
    cf9a:	4611      	mov	r1, r2
    cf9c:	4618      	mov	r0, r3
    cf9e:	4b03      	ldr	r3, [pc, #12]	; (cfac <_usb_d_dev_ep_stall_get+0x2c>)
    cfa0:	4798      	blx	r3
    cfa2:	4603      	mov	r3, r0
}
    cfa4:	4618      	mov	r0, r3
    cfa6:	3710      	adds	r7, #16
    cfa8:	46bd      	mov	sp, r7
    cfaa:	bd80      	pop	{r7, pc}
    cfac:	0000b671 	.word	0x0000b671

0000cfb0 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    cfb0:	b580      	push	{r7, lr}
    cfb2:	b084      	sub	sp, #16
    cfb4:	af00      	add	r7, sp, #0
    cfb6:	6078      	str	r0, [r7, #4]
    cfb8:	460b      	mov	r3, r1
    cfba:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cfbc:	687b      	ldr	r3, [r7, #4]
    cfbe:	7c9b      	ldrb	r3, [r3, #18]
    cfc0:	f003 030f 	and.w	r3, r3, #15
    cfc4:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    cfc6:	78f9      	ldrb	r1, [r7, #3]
    cfc8:	7bfb      	ldrb	r3, [r7, #15]
    cfca:	2201      	movs	r2, #1
    cfcc:	4618      	mov	r0, r3
    cfce:	4b0a      	ldr	r3, [pc, #40]	; (cff8 <_usb_d_dev_ep_stall_set+0x48>)
    cfd0:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    cfd2:	78fb      	ldrb	r3, [r7, #3]
    cfd4:	2220      	movs	r2, #32
    cfd6:	409a      	lsls	r2, r3
    cfd8:	7bfb      	ldrb	r3, [r7, #15]
    cfda:	4611      	mov	r1, r2
    cfdc:	4618      	mov	r0, r3
    cfde:	4b07      	ldr	r3, [pc, #28]	; (cffc <_usb_d_dev_ep_stall_set+0x4c>)
    cfe0:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    cfe2:	687a      	ldr	r2, [r7, #4]
    cfe4:	7cd3      	ldrb	r3, [r2, #19]
    cfe6:	f043 0308 	orr.w	r3, r3, #8
    cfea:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    cfec:	2300      	movs	r3, #0
}
    cfee:	4618      	mov	r0, r3
    cff0:	3710      	adds	r7, #16
    cff2:	46bd      	mov	sp, r7
    cff4:	bd80      	pop	{r7, pc}
    cff6:	bf00      	nop
    cff8:	0000b619 	.word	0x0000b619
    cffc:	0000b599 	.word	0x0000b599

0000d000 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    d000:	b580      	push	{r7, lr}
    d002:	b084      	sub	sp, #16
    d004:	af00      	add	r7, sp, #0
    d006:	6078      	str	r0, [r7, #4]
    d008:	460b      	mov	r3, r1
    d00a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    d00c:	687b      	ldr	r3, [r7, #4]
    d00e:	7c9b      	ldrb	r3, [r3, #18]
    d010:	f003 030f 	and.w	r3, r3, #15
    d014:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    d016:	78fa      	ldrb	r2, [r7, #3]
    d018:	7bfb      	ldrb	r3, [r7, #15]
    d01a:	4611      	mov	r1, r2
    d01c:	4618      	mov	r0, r3
    d01e:	4b28      	ldr	r3, [pc, #160]	; (d0c0 <_usb_d_dev_ep_stall_clr+0xc0>)
    d020:	4798      	blx	r3
    d022:	4603      	mov	r3, r0
    d024:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    d026:	7bbb      	ldrb	r3, [r7, #14]
    d028:	f083 0301 	eor.w	r3, r3, #1
    d02c:	b2db      	uxtb	r3, r3
    d02e:	2b00      	cmp	r3, #0
    d030:	d001      	beq.n	d036 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    d032:	2300      	movs	r3, #0
    d034:	e040      	b.n	d0b8 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    d036:	78f9      	ldrb	r1, [r7, #3]
    d038:	7bfb      	ldrb	r3, [r7, #15]
    d03a:	2200      	movs	r2, #0
    d03c:	4618      	mov	r0, r3
    d03e:	4b21      	ldr	r3, [pc, #132]	; (d0c4 <_usb_d_dev_ep_stall_clr+0xc4>)
    d040:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d042:	78fb      	ldrb	r3, [r7, #3]
    d044:	2220      	movs	r2, #32
    d046:	409a      	lsls	r2, r3
    d048:	7bfb      	ldrb	r3, [r7, #15]
    d04a:	4611      	mov	r1, r2
    d04c:	4618      	mov	r0, r3
    d04e:	4b1e      	ldr	r3, [pc, #120]	; (d0c8 <_usb_d_dev_ep_stall_clr+0xc8>)
    d050:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    d052:	78fa      	ldrb	r2, [r7, #3]
    d054:	7bfb      	ldrb	r3, [r7, #15]
    d056:	4611      	mov	r1, r2
    d058:	4618      	mov	r0, r3
    d05a:	4b1c      	ldr	r3, [pc, #112]	; (d0cc <_usb_d_dev_ep_stall_clr+0xcc>)
    d05c:	4798      	blx	r3
    d05e:	4603      	mov	r3, r0
    d060:	2b00      	cmp	r3, #0
    d062:	d00b      	beq.n	d07c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    d064:	78fa      	ldrb	r2, [r7, #3]
    d066:	7bfb      	ldrb	r3, [r7, #15]
    d068:	4611      	mov	r1, r2
    d06a:	4618      	mov	r0, r3
    d06c:	4b18      	ldr	r3, [pc, #96]	; (d0d0 <_usb_d_dev_ep_stall_clr+0xd0>)
    d06e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    d070:	78f9      	ldrb	r1, [r7, #3]
    d072:	7bfb      	ldrb	r3, [r7, #15]
    d074:	2200      	movs	r2, #0
    d076:	4618      	mov	r0, r3
    d078:	4b16      	ldr	r3, [pc, #88]	; (d0d4 <_usb_d_dev_ep_stall_clr+0xd4>)
    d07a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d07c:	687b      	ldr	r3, [r7, #4]
    d07e:	7cdb      	ldrb	r3, [r3, #19]
    d080:	f003 0307 	and.w	r3, r3, #7
    d084:	b2db      	uxtb	r3, r3
    d086:	2b01      	cmp	r3, #1
    d088:	d110      	bne.n	d0ac <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    d08a:	7bfb      	ldrb	r3, [r7, #15]
    d08c:	4619      	mov	r1, r3
    d08e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d092:	4b11      	ldr	r3, [pc, #68]	; (d0d8 <_usb_d_dev_ep_stall_clr+0xd8>)
    d094:	4798      	blx	r3
    d096:	4603      	mov	r3, r0
    d098:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d09c:	2b00      	cmp	r3, #0
    d09e:	d10a      	bne.n	d0b6 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    d0a0:	687a      	ldr	r2, [r7, #4]
    d0a2:	7cd3      	ldrb	r3, [r2, #19]
    d0a4:	f36f 03c3 	bfc	r3, #3, #1
    d0a8:	74d3      	strb	r3, [r2, #19]
    d0aa:	e004      	b.n	d0b6 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    d0ac:	687a      	ldr	r2, [r7, #4]
    d0ae:	7cd3      	ldrb	r3, [r2, #19]
    d0b0:	f36f 03c3 	bfc	r3, #3, #1
    d0b4:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    d0b6:	2300      	movs	r3, #0
}
    d0b8:	4618      	mov	r0, r3
    d0ba:	3710      	adds	r7, #16
    d0bc:	46bd      	mov	sp, r7
    d0be:	bd80      	pop	{r7, pc}
    d0c0:	0000b671 	.word	0x0000b671
    d0c4:	0000b619 	.word	0x0000b619
    d0c8:	0000b5c1 	.word	0x0000b5c1
    d0cc:	0000b6b5 	.word	0x0000b6b5
    d0d0:	0000b6f9 	.word	0x0000b6f9
    d0d4:	0000b7e5 	.word	0x0000b7e5
    d0d8:	0000b0a1 	.word	0x0000b0a1

0000d0dc <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    d0dc:	b580      	push	{r7, lr}
    d0de:	b086      	sub	sp, #24
    d0e0:	af00      	add	r7, sp, #0
    d0e2:	4603      	mov	r3, r0
    d0e4:	460a      	mov	r2, r1
    d0e6:	71fb      	strb	r3, [r7, #7]
    d0e8:	4613      	mov	r3, r2
    d0ea:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    d0ec:	79fb      	ldrb	r3, [r7, #7]
    d0ee:	f003 030f 	and.w	r3, r3, #15
    d0f2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d0f4:	79fb      	ldrb	r3, [r7, #7]
    d0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	bf14      	ite	ne
    d0fe:	2301      	movne	r3, #1
    d100:	2300      	moveq	r3, #0
    d102:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d104:	7cba      	ldrb	r2, [r7, #18]
    d106:	7cfb      	ldrb	r3, [r7, #19]
    d108:	4611      	mov	r1, r2
    d10a:	4618      	mov	r0, r3
    d10c:	4b13      	ldr	r3, [pc, #76]	; (d15c <_usb_d_dev_ep_stall+0x80>)
    d10e:	4798      	blx	r3
    d110:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    d112:	7cfb      	ldrb	r3, [r7, #19]
    d114:	2b04      	cmp	r3, #4
    d116:	d902      	bls.n	d11e <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    d118:	f06f 0311 	mvn.w	r3, #17
    d11c:	e01a      	b.n	d154 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    d11e:	79bb      	ldrb	r3, [r7, #6]
    d120:	2b01      	cmp	r3, #1
    d122:	d106      	bne.n	d132 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    d124:	7cbb      	ldrb	r3, [r7, #18]
    d126:	4619      	mov	r1, r3
    d128:	68f8      	ldr	r0, [r7, #12]
    d12a:	4b0d      	ldr	r3, [pc, #52]	; (d160 <_usb_d_dev_ep_stall+0x84>)
    d12c:	4798      	blx	r3
    d12e:	6178      	str	r0, [r7, #20]
    d130:	e00f      	b.n	d152 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    d132:	79bb      	ldrb	r3, [r7, #6]
    d134:	2b00      	cmp	r3, #0
    d136:	d106      	bne.n	d146 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    d138:	7cbb      	ldrb	r3, [r7, #18]
    d13a:	4619      	mov	r1, r3
    d13c:	68f8      	ldr	r0, [r7, #12]
    d13e:	4b09      	ldr	r3, [pc, #36]	; (d164 <_usb_d_dev_ep_stall+0x88>)
    d140:	4798      	blx	r3
    d142:	6178      	str	r0, [r7, #20]
    d144:	e005      	b.n	d152 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    d146:	7cbb      	ldrb	r3, [r7, #18]
    d148:	4619      	mov	r1, r3
    d14a:	68f8      	ldr	r0, [r7, #12]
    d14c:	4b06      	ldr	r3, [pc, #24]	; (d168 <_usb_d_dev_ep_stall+0x8c>)
    d14e:	4798      	blx	r3
    d150:	6178      	str	r0, [r7, #20]
	}
	return rc;
    d152:	697b      	ldr	r3, [r7, #20]
}
    d154:	4618      	mov	r0, r3
    d156:	3718      	adds	r7, #24
    d158:	46bd      	mov	sp, r7
    d15a:	bd80      	pop	{r7, pc}
    d15c:	0000bb7d 	.word	0x0000bb7d
    d160:	0000cfb1 	.word	0x0000cfb1
    d164:	0000d001 	.word	0x0000d001
    d168:	0000cf81 	.word	0x0000cf81

0000d16c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    d16c:	b580      	push	{r7, lr}
    d16e:	b082      	sub	sp, #8
    d170:	af00      	add	r7, sp, #0
    d172:	6078      	str	r0, [r7, #4]
    d174:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    d176:	687b      	ldr	r3, [r7, #4]
    d178:	7c9b      	ldrb	r3, [r3, #18]
    d17a:	2bff      	cmp	r3, #255	; 0xff
    d17c:	d014      	beq.n	d1a8 <_usb_d_dev_trans_done+0x3c>
    d17e:	687b      	ldr	r3, [r7, #4]
    d180:	7cdb      	ldrb	r3, [r3, #19]
    d182:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d186:	b2db      	uxtb	r3, r3
    d188:	2b00      	cmp	r3, #0
    d18a:	d00d      	beq.n	d1a8 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    d18c:	687a      	ldr	r2, [r7, #4]
    d18e:	7cd3      	ldrb	r3, [r2, #19]
    d190:	f36f 1386 	bfc	r3, #6, #1
    d194:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    d196:	4b06      	ldr	r3, [pc, #24]	; (d1b0 <_usb_d_dev_trans_done+0x44>)
    d198:	691b      	ldr	r3, [r3, #16]
    d19a:	687a      	ldr	r2, [r7, #4]
    d19c:	7c90      	ldrb	r0, [r2, #18]
    d19e:	687a      	ldr	r2, [r7, #4]
    d1a0:	6892      	ldr	r2, [r2, #8]
    d1a2:	6839      	ldr	r1, [r7, #0]
    d1a4:	4798      	blx	r3
    d1a6:	e000      	b.n	d1aa <_usb_d_dev_trans_done+0x3e>
		return;
    d1a8:	bf00      	nop
}
    d1aa:	3708      	adds	r7, #8
    d1ac:	46bd      	mov	sp, r7
    d1ae:	bd80      	pop	{r7, pc}
    d1b0:	20002444 	.word	0x20002444

0000d1b4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    d1b4:	b580      	push	{r7, lr}
    d1b6:	b086      	sub	sp, #24
    d1b8:	af00      	add	r7, sp, #0
    d1ba:	60f8      	str	r0, [r7, #12]
    d1bc:	460b      	mov	r3, r1
    d1be:	607a      	str	r2, [r7, #4]
    d1c0:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d1c2:	68fb      	ldr	r3, [r7, #12]
    d1c4:	7c9b      	ldrb	r3, [r3, #18]
    d1c6:	f003 030f 	and.w	r3, r3, #15
    d1ca:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    d1cc:	4b1f      	ldr	r3, [pc, #124]	; (d24c <_usb_d_dev_trans_stop+0x98>)
    d1ce:	881b      	ldrh	r3, [r3, #0]
    d1d0:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    d1d2:	68fb      	ldr	r3, [r7, #12]
    d1d4:	7c9b      	ldrb	r3, [r3, #18]
    d1d6:	2bff      	cmp	r3, #255	; 0xff
    d1d8:	d033      	beq.n	d242 <_usb_d_dev_trans_stop+0x8e>
    d1da:	68fb      	ldr	r3, [r7, #12]
    d1dc:	7cdb      	ldrb	r3, [r3, #19]
    d1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d1e2:	b2db      	uxtb	r3, r3
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d02c      	beq.n	d242 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    d1e8:	7afb      	ldrb	r3, [r7, #11]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d006      	beq.n	d1fc <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    d1ee:	7dfb      	ldrb	r3, [r7, #23]
    d1f0:	2200      	movs	r2, #0
    d1f2:	2101      	movs	r1, #1
    d1f4:	4618      	mov	r0, r3
    d1f6:	4b16      	ldr	r3, [pc, #88]	; (d250 <_usb_d_dev_trans_stop+0x9c>)
    d1f8:	4798      	blx	r3
    d1fa:	e005      	b.n	d208 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d1fc:	7dfb      	ldrb	r3, [r7, #23]
    d1fe:	2200      	movs	r2, #0
    d200:	2100      	movs	r1, #0
    d202:	4618      	mov	r0, r3
    d204:	4b13      	ldr	r3, [pc, #76]	; (d254 <_usb_d_dev_trans_stop+0xa0>)
    d206:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    d208:	7afb      	ldrb	r3, [r7, #11]
    d20a:	f107 0218 	add.w	r2, r7, #24
    d20e:	4413      	add	r3, r2
    d210:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    d214:	461a      	mov	r2, r3
    d216:	7dfb      	ldrb	r3, [r7, #23]
    d218:	4611      	mov	r1, r2
    d21a:	4618      	mov	r0, r3
    d21c:	4b0e      	ldr	r3, [pc, #56]	; (d258 <_usb_d_dev_trans_stop+0xa4>)
    d21e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    d220:	7afb      	ldrb	r3, [r7, #11]
    d222:	f107 0218 	add.w	r2, r7, #24
    d226:	4413      	add	r3, r2
    d228:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    d22c:	461a      	mov	r2, r3
    d22e:	7dfb      	ldrb	r3, [r7, #23]
    d230:	4611      	mov	r1, r2
    d232:	4618      	mov	r0, r3
    d234:	4b09      	ldr	r3, [pc, #36]	; (d25c <_usb_d_dev_trans_stop+0xa8>)
    d236:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    d238:	6879      	ldr	r1, [r7, #4]
    d23a:	68f8      	ldr	r0, [r7, #12]
    d23c:	4b08      	ldr	r3, [pc, #32]	; (d260 <_usb_d_dev_trans_stop+0xac>)
    d23e:	4798      	blx	r3
    d240:	e000      	b.n	d244 <_usb_d_dev_trans_stop+0x90>
		return;
    d242:	bf00      	nop
}
    d244:	3718      	adds	r7, #24
    d246:	46bd      	mov	sp, r7
    d248:	bd80      	pop	{r7, pc}
    d24a:	bf00      	nop
    d24c:	00012c6c 	.word	0x00012c6c
    d250:	0000ba69 	.word	0x0000ba69
    d254:	0000bac1 	.word	0x0000bac1
    d258:	0000b571 	.word	0x0000b571
    d25c:	0000b5c1 	.word	0x0000b5c1
    d260:	0000d16d 	.word	0x0000d16d

0000d264 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    d264:	b580      	push	{r7, lr}
    d266:	b086      	sub	sp, #24
    d268:	af00      	add	r7, sp, #0
    d26a:	4603      	mov	r3, r0
    d26c:	6039      	str	r1, [r7, #0]
    d26e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    d270:	79fb      	ldrb	r3, [r7, #7]
    d272:	f003 030f 	and.w	r3, r3, #15
    d276:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    d278:	7dfb      	ldrb	r3, [r7, #23]
    d27a:	015b      	lsls	r3, r3, #5
    d27c:	4a1e      	ldr	r2, [pc, #120]	; (d2f8 <_usb_d_dev_ep_read_req+0x94>)
    d27e:	4413      	add	r3, r2
    d280:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    d282:	693b      	ldr	r3, [r7, #16]
    d284:	681b      	ldr	r3, [r3, #0]
    d286:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    d288:	693b      	ldr	r3, [r7, #16]
    d28a:	685b      	ldr	r3, [r3, #4]
    d28c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d290:	b29b      	uxth	r3, r3
    d292:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    d294:	7dfb      	ldrb	r3, [r7, #23]
    d296:	2b04      	cmp	r3, #4
    d298:	d802      	bhi.n	d2a0 <_usb_d_dev_ep_read_req+0x3c>
    d29a:	683b      	ldr	r3, [r7, #0]
    d29c:	2b00      	cmp	r3, #0
    d29e:	d102      	bne.n	d2a6 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    d2a0:	f06f 0311 	mvn.w	r3, #17
    d2a4:	e023      	b.n	d2ee <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    d2a6:	7dfb      	ldrb	r3, [r7, #23]
    d2a8:	4618      	mov	r0, r3
    d2aa:	4b14      	ldr	r3, [pc, #80]	; (d2fc <_usb_d_dev_ep_read_req+0x98>)
    d2ac:	4798      	blx	r3
    d2ae:	4603      	mov	r3, r0
    d2b0:	f083 0301 	eor.w	r3, r3, #1
    d2b4:	b2db      	uxtb	r3, r3
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d002      	beq.n	d2c0 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    d2ba:	f06f 0312 	mvn.w	r3, #18
    d2be:	e016      	b.n	d2ee <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    d2c0:	7dfb      	ldrb	r3, [r7, #23]
    d2c2:	4618      	mov	r0, r3
    d2c4:	4b0e      	ldr	r3, [pc, #56]	; (d300 <_usb_d_dev_ep_read_req+0x9c>)
    d2c6:	4798      	blx	r3
    d2c8:	4603      	mov	r3, r0
    d2ca:	f083 0301 	eor.w	r3, r3, #1
    d2ce:	b2db      	uxtb	r3, r3
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d001      	beq.n	d2d8 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    d2d4:	2300      	movs	r3, #0
    d2d6:	e00a      	b.n	d2ee <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    d2d8:	68fb      	ldr	r3, [r7, #12]
    d2da:	2208      	movs	r2, #8
    d2dc:	4619      	mov	r1, r3
    d2de:	6838      	ldr	r0, [r7, #0]
    d2e0:	4b08      	ldr	r3, [pc, #32]	; (d304 <_usb_d_dev_ep_read_req+0xa0>)
    d2e2:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    d2e4:	7dfb      	ldrb	r3, [r7, #23]
    d2e6:	4618      	mov	r0, r3
    d2e8:	4b07      	ldr	r3, [pc, #28]	; (d308 <_usb_d_dev_ep_read_req+0xa4>)
    d2ea:	4798      	blx	r3

	return bytes;
    d2ec:	897b      	ldrh	r3, [r7, #10]
}
    d2ee:	4618      	mov	r0, r3
    d2f0:	3718      	adds	r7, #24
    d2f2:	46bd      	mov	sp, r7
    d2f4:	bd80      	pop	{r7, pc}
    d2f6:	bf00      	nop
    d2f8:	2000250c 	.word	0x2000250c
    d2fc:	0000b5e9 	.word	0x0000b5e9
    d300:	0000b795 	.word	0x0000b795
    d304:	00011741 	.word	0x00011741
    d308:	0000b7c5 	.word	0x0000b7c5

0000d30c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    d30c:	b580      	push	{r7, lr}
    d30e:	b086      	sub	sp, #24
    d310:	af00      	add	r7, sp, #0
    d312:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	7a1b      	ldrb	r3, [r3, #8]
    d318:	f003 030f 	and.w	r3, r3, #15
    d31c:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    d31e:	687b      	ldr	r3, [r7, #4]
    d320:	7a1b      	ldrb	r3, [r3, #8]
    d322:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d326:	2b00      	cmp	r3, #0
    d328:	bf14      	ite	ne
    d32a:	2301      	movne	r3, #1
    d32c:	2300      	moveq	r3, #0
    d32e:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d330:	7d7a      	ldrb	r2, [r7, #21]
    d332:	7dbb      	ldrb	r3, [r7, #22]
    d334:	4611      	mov	r1, r2
    d336:	4618      	mov	r0, r3
    d338:	4b5f      	ldr	r3, [pc, #380]	; (d4b8 <_usb_d_dev_ep_trans+0x1ac>)
    d33a:	4798      	blx	r3
    d33c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    d33e:	693b      	ldr	r3, [r7, #16]
    d340:	8a1b      	ldrh	r3, [r3, #16]
    d342:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d346:	4293      	cmp	r3, r2
    d348:	d004      	beq.n	d354 <_usb_d_dev_ep_trans+0x48>
    d34a:	693b      	ldr	r3, [r7, #16]
    d34c:	8a1b      	ldrh	r3, [r3, #16]
    d34e:	3b01      	subs	r3, #1
    d350:	b29b      	uxth	r3, r3
    d352:	e001      	b.n	d358 <_usb_d_dev_ep_trans+0x4c>
    d354:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d358:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    d35a:	687b      	ldr	r3, [r7, #4]
    d35c:	685a      	ldr	r2, [r3, #4]
    d35e:	89fb      	ldrh	r3, [r7, #14]
    d360:	4013      	ands	r3, r2
    d362:	2b00      	cmp	r3, #0
    d364:	bf14      	ite	ne
    d366:	2301      	movne	r3, #1
    d368:	2300      	moveq	r3, #0
    d36a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    d36c:	2300      	movs	r3, #0
    d36e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    d370:	7dbb      	ldrb	r3, [r7, #22]
    d372:	2b04      	cmp	r3, #4
    d374:	d902      	bls.n	d37c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    d376:	f06f 0311 	mvn.w	r3, #17
    d37a:	e098      	b.n	d4ae <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    d37c:	687b      	ldr	r3, [r7, #4]
    d37e:	681b      	ldr	r3, [r3, #0]
    d380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    d384:	d31a      	bcc.n	d3bc <_usb_d_dev_ep_trans+0xb0>
    d386:	687b      	ldr	r3, [r7, #4]
    d388:	681b      	ldr	r3, [r3, #0]
    d38a:	461a      	mov	r2, r3
    d38c:	687b      	ldr	r3, [r7, #4]
    d38e:	685b      	ldr	r3, [r3, #4]
    d390:	4413      	add	r3, r2
    d392:	4a4a      	ldr	r2, [pc, #296]	; (d4bc <_usb_d_dev_ep_trans+0x1b0>)
    d394:	4293      	cmp	r3, r2
    d396:	d811      	bhi.n	d3bc <_usb_d_dev_ep_trans+0xb0>
    d398:	687b      	ldr	r3, [r7, #4]
    d39a:	681b      	ldr	r3, [r3, #0]
    d39c:	f003 0303 	and.w	r3, r3, #3
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	d10b      	bne.n	d3bc <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    d3a4:	7d7b      	ldrb	r3, [r7, #21]
    d3a6:	f083 0301 	eor.w	r3, r3, #1
    d3aa:	b2db      	uxtb	r3, r3
    d3ac:	2b00      	cmp	r3, #0
    d3ae:	d00e      	beq.n	d3ce <_usb_d_dev_ep_trans+0xc2>
    d3b0:	687b      	ldr	r3, [r7, #4]
    d3b2:	685b      	ldr	r3, [r3, #4]
    d3b4:	693a      	ldr	r2, [r7, #16]
    d3b6:	8a12      	ldrh	r2, [r2, #16]
    d3b8:	4293      	cmp	r3, r2
    d3ba:	d208      	bcs.n	d3ce <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    d3bc:	693b      	ldr	r3, [r7, #16]
    d3be:	68db      	ldr	r3, [r3, #12]
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d102      	bne.n	d3ca <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    d3c4:	f06f 0312 	mvn.w	r3, #18
    d3c8:	e071      	b.n	d4ae <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    d3ca:	2301      	movs	r3, #1
    d3cc:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    d3ce:	7d7b      	ldrb	r3, [r7, #21]
    d3d0:	f083 0301 	eor.w	r3, r3, #1
    d3d4:	b2db      	uxtb	r3, r3
    d3d6:	2b00      	cmp	r3, #0
    d3d8:	d009      	beq.n	d3ee <_usb_d_dev_ep_trans+0xe2>
    d3da:	7b7b      	ldrb	r3, [r7, #13]
    d3dc:	2b00      	cmp	r3, #0
    d3de:	d006      	beq.n	d3ee <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    d3e0:	693b      	ldr	r3, [r7, #16]
    d3e2:	68db      	ldr	r3, [r3, #12]
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	d102      	bne.n	d3ee <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    d3e8:	f06f 0311 	mvn.w	r3, #17
    d3ec:	e05f      	b.n	d4ae <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    d3ee:	693b      	ldr	r3, [r7, #16]
    d3f0:	7cdb      	ldrb	r3, [r3, #19]
    d3f2:	f003 0308 	and.w	r3, r3, #8
    d3f6:	b2db      	uxtb	r3, r3
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d001      	beq.n	d400 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    d3fc:	2302      	movs	r3, #2
    d3fe:	e056      	b.n	d4ae <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    d400:	f107 0308 	add.w	r3, r7, #8
    d404:	4618      	mov	r0, r3
    d406:	4b2e      	ldr	r3, [pc, #184]	; (d4c0 <_usb_d_dev_ep_trans+0x1b4>)
    d408:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    d40a:	693b      	ldr	r3, [r7, #16]
    d40c:	7cdb      	ldrb	r3, [r3, #19]
    d40e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d412:	b2db      	uxtb	r3, r3
    d414:	2b00      	cmp	r3, #0
    d416:	d006      	beq.n	d426 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    d418:	f107 0308 	add.w	r3, r7, #8
    d41c:	4618      	mov	r0, r3
    d41e:	4b29      	ldr	r3, [pc, #164]	; (d4c4 <_usb_d_dev_ep_trans+0x1b8>)
    d420:	4798      	blx	r3
		return USB_BUSY;
    d422:	2301      	movs	r3, #1
    d424:	e043      	b.n	d4ae <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    d426:	693a      	ldr	r2, [r7, #16]
    d428:	7cd3      	ldrb	r3, [r2, #19]
    d42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d42e:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    d430:	f107 0308 	add.w	r3, r7, #8
    d434:	4618      	mov	r0, r3
    d436:	4b23      	ldr	r3, [pc, #140]	; (d4c4 <_usb_d_dev_ep_trans+0x1b8>)
    d438:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    d43a:	687b      	ldr	r3, [r7, #4]
    d43c:	681a      	ldr	r2, [r3, #0]
    d43e:	693b      	ldr	r3, [r7, #16]
    d440:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    d442:	687b      	ldr	r3, [r7, #4]
    d444:	685a      	ldr	r2, [r3, #4]
    d446:	693b      	ldr	r3, [r7, #16]
    d448:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    d44a:	693b      	ldr	r3, [r7, #16]
    d44c:	2200      	movs	r2, #0
    d44e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    d450:	693a      	ldr	r2, [r7, #16]
    d452:	7cd3      	ldrb	r3, [r2, #19]
    d454:	7d79      	ldrb	r1, [r7, #21]
    d456:	f361 13c7 	bfi	r3, r1, #7, #1
    d45a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    d45c:	693a      	ldr	r2, [r7, #16]
    d45e:	7cd3      	ldrb	r3, [r2, #19]
    d460:	7df9      	ldrb	r1, [r7, #23]
    d462:	f361 1345 	bfi	r3, r1, #5, #1
    d466:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    d468:	687b      	ldr	r3, [r7, #4]
    d46a:	7a5b      	ldrb	r3, [r3, #9]
    d46c:	2b00      	cmp	r3, #0
    d46e:	d007      	beq.n	d480 <_usb_d_dev_ep_trans+0x174>
    d470:	7b7b      	ldrb	r3, [r7, #13]
    d472:	f083 0301 	eor.w	r3, r3, #1
    d476:	b2db      	uxtb	r3, r3
    d478:	2b00      	cmp	r3, #0
    d47a:	d001      	beq.n	d480 <_usb_d_dev_ep_trans+0x174>
    d47c:	2301      	movs	r3, #1
    d47e:	e000      	b.n	d482 <_usb_d_dev_ep_trans+0x176>
    d480:	2300      	movs	r3, #0
    d482:	b2db      	uxtb	r3, r3
    d484:	f003 0301 	and.w	r3, r3, #1
    d488:	b2d9      	uxtb	r1, r3
    d48a:	693a      	ldr	r2, [r7, #16]
    d48c:	7cd3      	ldrb	r3, [r2, #19]
    d48e:	f361 1304 	bfi	r3, r1, #4, #1
    d492:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    d494:	7d7b      	ldrb	r3, [r7, #21]
    d496:	2b00      	cmp	r3, #0
    d498:	d004      	beq.n	d4a4 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    d49a:	2100      	movs	r1, #0
    d49c:	6938      	ldr	r0, [r7, #16]
    d49e:	4b0a      	ldr	r3, [pc, #40]	; (d4c8 <_usb_d_dev_ep_trans+0x1bc>)
    d4a0:	4798      	blx	r3
    d4a2:	e003      	b.n	d4ac <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    d4a4:	2100      	movs	r1, #0
    d4a6:	6938      	ldr	r0, [r7, #16]
    d4a8:	4b08      	ldr	r3, [pc, #32]	; (d4cc <_usb_d_dev_ep_trans+0x1c0>)
    d4aa:	4798      	blx	r3
	}

	return ERR_NONE;
    d4ac:	2300      	movs	r3, #0
}
    d4ae:	4618      	mov	r0, r3
    d4b0:	3718      	adds	r7, #24
    d4b2:	46bd      	mov	sp, r7
    d4b4:	bd80      	pop	{r7, pc}
    d4b6:	bf00      	nop
    d4b8:	0000bb7d 	.word	0x0000bb7d
    d4bc:	20041fff 	.word	0x20041fff
    d4c0:	00003ef1 	.word	0x00003ef1
    d4c4:	00003f17 	.word	0x00003f17
    d4c8:	0000be45 	.word	0x0000be45
    d4cc:	0000c05d 	.word	0x0000c05d

0000d4d0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    d4d0:	b580      	push	{r7, lr}
    d4d2:	b084      	sub	sp, #16
    d4d4:	af00      	add	r7, sp, #0
    d4d6:	4603      	mov	r3, r0
    d4d8:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    d4da:	79fb      	ldrb	r3, [r7, #7]
    d4dc:	f003 030f 	and.w	r3, r3, #15
    d4e0:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    d4e2:	79fb      	ldrb	r3, [r7, #7]
    d4e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	bf14      	ite	ne
    d4ec:	2301      	movne	r3, #1
    d4ee:	2300      	moveq	r3, #0
    d4f0:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d4f2:	7bba      	ldrb	r2, [r7, #14]
    d4f4:	7bfb      	ldrb	r3, [r7, #15]
    d4f6:	4611      	mov	r1, r2
    d4f8:	4618      	mov	r0, r3
    d4fa:	4b08      	ldr	r3, [pc, #32]	; (d51c <_usb_d_dev_ep_abort+0x4c>)
    d4fc:	4798      	blx	r3
    d4fe:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    d500:	7bfb      	ldrb	r3, [r7, #15]
    d502:	2b04      	cmp	r3, #4
    d504:	d806      	bhi.n	d514 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    d506:	7bbb      	ldrb	r3, [r7, #14]
    d508:	2202      	movs	r2, #2
    d50a:	4619      	mov	r1, r3
    d50c:	68b8      	ldr	r0, [r7, #8]
    d50e:	4b04      	ldr	r3, [pc, #16]	; (d520 <_usb_d_dev_ep_abort+0x50>)
    d510:	4798      	blx	r3
    d512:	e000      	b.n	d516 <_usb_d_dev_ep_abort+0x46>
		return;
    d514:	bf00      	nop
}
    d516:	3710      	adds	r7, #16
    d518:	46bd      	mov	sp, r7
    d51a:	bd80      	pop	{r7, pc}
    d51c:	0000bb7d 	.word	0x0000bb7d
    d520:	0000d1b5 	.word	0x0000d1b5

0000d524 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    d524:	b480      	push	{r7}
    d526:	b085      	sub	sp, #20
    d528:	af00      	add	r7, sp, #0
    d52a:	4603      	mov	r3, r0
    d52c:	6039      	str	r1, [r7, #0]
    d52e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    d530:	683b      	ldr	r3, [r7, #0]
    d532:	2b00      	cmp	r3, #0
    d534:	d001      	beq.n	d53a <_usb_d_dev_register_callback+0x16>
    d536:	683b      	ldr	r3, [r7, #0]
    d538:	e000      	b.n	d53c <_usb_d_dev_register_callback+0x18>
    d53a:	4b0a      	ldr	r3, [pc, #40]	; (d564 <_usb_d_dev_register_callback+0x40>)
    d53c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    d53e:	79fb      	ldrb	r3, [r7, #7]
    d540:	2b01      	cmp	r3, #1
    d542:	d103      	bne.n	d54c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    d544:	4a08      	ldr	r2, [pc, #32]	; (d568 <_usb_d_dev_register_callback+0x44>)
    d546:	68fb      	ldr	r3, [r7, #12]
    d548:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    d54a:	e005      	b.n	d558 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    d54c:	79fb      	ldrb	r3, [r7, #7]
    d54e:	2b00      	cmp	r3, #0
    d550:	d102      	bne.n	d558 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    d552:	4a05      	ldr	r2, [pc, #20]	; (d568 <_usb_d_dev_register_callback+0x44>)
    d554:	68fb      	ldr	r3, [r7, #12]
    d556:	6013      	str	r3, [r2, #0]
}
    d558:	bf00      	nop
    d55a:	3714      	adds	r7, #20
    d55c:	46bd      	mov	sp, r7
    d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d562:	4770      	bx	lr
    d564:	0000b405 	.word	0x0000b405
    d568:	20002444 	.word	0x20002444

0000d56c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    d56c:	b480      	push	{r7}
    d56e:	b085      	sub	sp, #20
    d570:	af00      	add	r7, sp, #0
    d572:	4603      	mov	r3, r0
    d574:	6039      	str	r1, [r7, #0]
    d576:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    d578:	683b      	ldr	r3, [r7, #0]
    d57a:	2b00      	cmp	r3, #0
    d57c:	d001      	beq.n	d582 <_usb_d_dev_register_ep_callback+0x16>
    d57e:	683b      	ldr	r3, [r7, #0]
    d580:	e000      	b.n	d584 <_usb_d_dev_register_ep_callback+0x18>
    d582:	4b0e      	ldr	r3, [pc, #56]	; (d5bc <_usb_d_dev_register_ep_callback+0x50>)
    d584:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    d586:	79fb      	ldrb	r3, [r7, #7]
    d588:	2b00      	cmp	r3, #0
    d58a:	d103      	bne.n	d594 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    d58c:	4a0c      	ldr	r2, [pc, #48]	; (d5c0 <_usb_d_dev_register_ep_callback+0x54>)
    d58e:	68fb      	ldr	r3, [r7, #12]
    d590:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    d592:	e00c      	b.n	d5ae <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    d594:	79fb      	ldrb	r3, [r7, #7]
    d596:	2b01      	cmp	r3, #1
    d598:	d103      	bne.n	d5a2 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    d59a:	4a09      	ldr	r2, [pc, #36]	; (d5c0 <_usb_d_dev_register_ep_callback+0x54>)
    d59c:	68fb      	ldr	r3, [r7, #12]
    d59e:	60d3      	str	r3, [r2, #12]
}
    d5a0:	e005      	b.n	d5ae <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    d5a2:	79fb      	ldrb	r3, [r7, #7]
    d5a4:	2b02      	cmp	r3, #2
    d5a6:	d102      	bne.n	d5ae <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    d5a8:	4a05      	ldr	r2, [pc, #20]	; (d5c0 <_usb_d_dev_register_ep_callback+0x54>)
    d5aa:	68fb      	ldr	r3, [r7, #12]
    d5ac:	6113      	str	r3, [r2, #16]
}
    d5ae:	bf00      	nop
    d5b0:	3714      	adds	r7, #20
    d5b2:	46bd      	mov	sp, r7
    d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5b8:	4770      	bx	lr
    d5ba:	bf00      	nop
    d5bc:	0000b405 	.word	0x0000b405
    d5c0:	20002444 	.word	0x20002444

0000d5c4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    d5c4:	b580      	push	{r7, lr}
    d5c6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d5c8:	4b01      	ldr	r3, [pc, #4]	; (d5d0 <USB_0_Handler+0xc>)
    d5ca:	4798      	blx	r3
}
    d5cc:	bf00      	nop
    d5ce:	bd80      	pop	{r7, pc}
    d5d0:	0000c835 	.word	0x0000c835

0000d5d4 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    d5d4:	b580      	push	{r7, lr}
    d5d6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d5d8:	4b01      	ldr	r3, [pc, #4]	; (d5e0 <USB_1_Handler+0xc>)
    d5da:	4798      	blx	r3
}
    d5dc:	bf00      	nop
    d5de:	bd80      	pop	{r7, pc}
    d5e0:	0000c835 	.word	0x0000c835

0000d5e4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    d5e4:	b580      	push	{r7, lr}
    d5e6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d5e8:	4b01      	ldr	r3, [pc, #4]	; (d5f0 <USB_2_Handler+0xc>)
    d5ea:	4798      	blx	r3
}
    d5ec:	bf00      	nop
    d5ee:	bd80      	pop	{r7, pc}
    d5f0:	0000c835 	.word	0x0000c835

0000d5f4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    d5f4:	b580      	push	{r7, lr}
    d5f6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d5f8:	4b01      	ldr	r3, [pc, #4]	; (d600 <USB_3_Handler+0xc>)
    d5fa:	4798      	blx	r3
}
    d5fc:	bf00      	nop
    d5fe:	bd80      	pop	{r7, pc}
    d600:	0000c835 	.word	0x0000c835

0000d604 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    d604:	b480      	push	{r7}
    d606:	b083      	sub	sp, #12
    d608:	af00      	add	r7, sp, #0
    d60a:	6078      	str	r0, [r7, #4]
    d60c:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    d60e:	bf00      	nop
    d610:	687b      	ldr	r3, [r7, #4]
    d612:	689a      	ldr	r2, [r3, #8]
    d614:	683b      	ldr	r3, [r7, #0]
    d616:	4013      	ands	r3, r2
    d618:	2b00      	cmp	r3, #0
    d61a:	d1f9      	bne.n	d610 <hri_wdt_wait_for_sync+0xc>
	};
}
    d61c:	bf00      	nop
    d61e:	370c      	adds	r7, #12
    d620:	46bd      	mov	sp, r7
    d622:	f85d 7b04 	ldr.w	r7, [sp], #4
    d626:	4770      	bx	lr

0000d628 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    d628:	b580      	push	{r7, lr}
    d62a:	b084      	sub	sp, #16
    d62c:	af00      	add	r7, sp, #0
    d62e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d630:	210e      	movs	r1, #14
    d632:	6878      	ldr	r0, [r7, #4]
    d634:	4b0a      	ldr	r3, [pc, #40]	; (d660 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    d636:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    d638:	687b      	ldr	r3, [r7, #4]
    d63a:	781b      	ldrb	r3, [r3, #0]
    d63c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    d63e:	7bfb      	ldrb	r3, [r7, #15]
    d640:	085b      	lsrs	r3, r3, #1
    d642:	b2db      	uxtb	r3, r3
    d644:	f003 0301 	and.w	r3, r3, #1
    d648:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d64a:	7bfb      	ldrb	r3, [r7, #15]
    d64c:	2b00      	cmp	r3, #0
    d64e:	bf14      	ite	ne
    d650:	2301      	movne	r3, #1
    d652:	2300      	moveq	r3, #0
    d654:	b2db      	uxtb	r3, r3
}
    d656:	4618      	mov	r0, r3
    d658:	3710      	adds	r7, #16
    d65a:	46bd      	mov	sp, r7
    d65c:	bd80      	pop	{r7, pc}
    d65e:	bf00      	nop
    d660:	0000d605 	.word	0x0000d605

0000d664 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    d664:	b580      	push	{r7, lr}
    d666:	b082      	sub	sp, #8
    d668:	af00      	add	r7, sp, #0
    d66a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    d66c:	687b      	ldr	r3, [r7, #4]
    d66e:	781b      	ldrb	r3, [r3, #0]
    d670:	b2db      	uxtb	r3, r3
    d672:	f023 0304 	bic.w	r3, r3, #4
    d676:	b2da      	uxtb	r2, r3
    d678:	687b      	ldr	r3, [r7, #4]
    d67a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d67c:	210e      	movs	r1, #14
    d67e:	6878      	ldr	r0, [r7, #4]
    d680:	4b02      	ldr	r3, [pc, #8]	; (d68c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    d682:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    d684:	bf00      	nop
    d686:	3708      	adds	r7, #8
    d688:	46bd      	mov	sp, r7
    d68a:	bd80      	pop	{r7, pc}
    d68c:	0000d605 	.word	0x0000d605

0000d690 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    d690:	b580      	push	{r7, lr}
    d692:	b084      	sub	sp, #16
    d694:	af00      	add	r7, sp, #0
    d696:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d698:	210e      	movs	r1, #14
    d69a:	6878      	ldr	r0, [r7, #4]
    d69c:	4b08      	ldr	r3, [pc, #32]	; (d6c0 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    d69e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	781b      	ldrb	r3, [r3, #0]
    d6a4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    d6a6:	7bfb      	ldrb	r3, [r7, #15]
    d6a8:	09db      	lsrs	r3, r3, #7
    d6aa:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d6ac:	7bfb      	ldrb	r3, [r7, #15]
    d6ae:	2b00      	cmp	r3, #0
    d6b0:	bf14      	ite	ne
    d6b2:	2301      	movne	r3, #1
    d6b4:	2300      	moveq	r3, #0
    d6b6:	b2db      	uxtb	r3, r3
}
    d6b8:	4618      	mov	r0, r3
    d6ba:	3710      	adds	r7, #16
    d6bc:	46bd      	mov	sp, r7
    d6be:	bd80      	pop	{r7, pc}
    d6c0:	0000d605 	.word	0x0000d605

0000d6c4 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    d6c4:	b480      	push	{r7}
    d6c6:	b085      	sub	sp, #20
    d6c8:	af00      	add	r7, sp, #0
    d6ca:	6078      	str	r0, [r7, #4]
    d6cc:	460b      	mov	r3, r1
    d6ce:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    d6d0:	687b      	ldr	r3, [r7, #4]
    d6d2:	785b      	ldrb	r3, [r3, #1]
    d6d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    d6d6:	7bfb      	ldrb	r3, [r7, #15]
    d6d8:	f023 030f 	bic.w	r3, r3, #15
    d6dc:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    d6de:	78fb      	ldrb	r3, [r7, #3]
    d6e0:	f003 030f 	and.w	r3, r3, #15
    d6e4:	b2da      	uxtb	r2, r3
    d6e6:	7bfb      	ldrb	r3, [r7, #15]
    d6e8:	4313      	orrs	r3, r2
    d6ea:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    d6ec:	687b      	ldr	r3, [r7, #4]
    d6ee:	7bfa      	ldrb	r2, [r7, #15]
    d6f0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    d6f2:	bf00      	nop
    d6f4:	3714      	adds	r7, #20
    d6f6:	46bd      	mov	sp, r7
    d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6fc:	4770      	bx	lr
	...

0000d700 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    d700:	b580      	push	{r7, lr}
    d702:	b082      	sub	sp, #8
    d704:	af00      	add	r7, sp, #0
    d706:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    d708:	687b      	ldr	r3, [r7, #4]
    d70a:	2b00      	cmp	r3, #0
    d70c:	d005      	beq.n	d71a <_wdt_init+0x1a>
    d70e:	687b      	ldr	r3, [r7, #4]
    d710:	681b      	ldr	r3, [r3, #0]
    d712:	2b00      	cmp	r3, #0
    d714:	d001      	beq.n	d71a <_wdt_init+0x1a>
    d716:	2301      	movs	r3, #1
    d718:	e000      	b.n	d71c <_wdt_init+0x1c>
    d71a:	2300      	movs	r3, #0
    d71c:	f003 0301 	and.w	r3, r3, #1
    d720:	b2db      	uxtb	r3, r3
    d722:	2250      	movs	r2, #80	; 0x50
    d724:	4913      	ldr	r1, [pc, #76]	; (d774 <_wdt_init+0x74>)
    d726:	4618      	mov	r0, r3
    d728:	4b13      	ldr	r3, [pc, #76]	; (d778 <_wdt_init+0x78>)
    d72a:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    d72c:	687b      	ldr	r3, [r7, #4]
    d72e:	681b      	ldr	r3, [r3, #0]
    d730:	4618      	mov	r0, r3
    d732:	4b12      	ldr	r3, [pc, #72]	; (d77c <_wdt_init+0x7c>)
    d734:	4798      	blx	r3
    d736:	4603      	mov	r3, r0
    d738:	2b00      	cmp	r3, #0
    d73a:	d107      	bne.n	d74c <_wdt_init+0x4c>
    d73c:	687b      	ldr	r3, [r7, #4]
    d73e:	681b      	ldr	r3, [r3, #0]
    d740:	4618      	mov	r0, r3
    d742:	4b0f      	ldr	r3, [pc, #60]	; (d780 <_wdt_init+0x80>)
    d744:	4798      	blx	r3
    d746:	4603      	mov	r3, r0
    d748:	2b00      	cmp	r3, #0
    d74a:	d002      	beq.n	d752 <_wdt_init+0x52>
		return ERR_DENIED;
    d74c:	f06f 0310 	mvn.w	r3, #16
    d750:	e00b      	b.n	d76a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    d752:	687b      	ldr	r3, [r7, #4]
    d754:	681b      	ldr	r3, [r3, #0]
    d756:	4618      	mov	r0, r3
    d758:	4b0a      	ldr	r3, [pc, #40]	; (d784 <_wdt_init+0x84>)
    d75a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    d75c:	687b      	ldr	r3, [r7, #4]
    d75e:	681b      	ldr	r3, [r3, #0]
    d760:	210b      	movs	r1, #11
    d762:	4618      	mov	r0, r3
    d764:	4b08      	ldr	r3, [pc, #32]	; (d788 <_wdt_init+0x88>)
    d766:	4798      	blx	r3
	}

	return ERR_NONE;
    d768:	2300      	movs	r3, #0
}
    d76a:	4618      	mov	r0, r3
    d76c:	3708      	adds	r7, #8
    d76e:	46bd      	mov	sp, r7
    d770:	bd80      	pop	{r7, pc}
    d772:	bf00      	nop
    d774:	00012c70 	.word	0x00012c70
    d778:	00005ed5 	.word	0x00005ed5
    d77c:	0000d691 	.word	0x0000d691
    d780:	0000d629 	.word	0x0000d629
    d784:	0000d665 	.word	0x0000d665
    d788:	0000d6c5 	.word	0x0000d6c5

0000d78c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    d78c:	b580      	push	{r7, lr}
    d78e:	b08c      	sub	sp, #48	; 0x30
    d790:	af00      	add	r7, sp, #0
    d792:	6078      	str	r0, [r7, #4]
    d794:	460b      	mov	r3, r1
    d796:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d798:	687b      	ldr	r3, [r7, #4]
    d79a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d79c:	687b      	ldr	r3, [r7, #4]
    d79e:	681b      	ldr	r3, [r3, #0]
    d7a0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    d7a2:	f107 030c 	add.w	r3, r7, #12
    d7a6:	2200      	movs	r2, #0
    d7a8:	601a      	str	r2, [r3, #0]
    d7aa:	605a      	str	r2, [r3, #4]
    d7ac:	609a      	str	r2, [r3, #8]
    d7ae:	60da      	str	r2, [r3, #12]
    d7b0:	611a      	str	r2, [r3, #16]
    d7b2:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7b6:	7b1b      	ldrb	r3, [r3, #12]
    d7b8:	2b00      	cmp	r3, #0
    d7ba:	d001      	beq.n	d7c0 <n25q256a_xip_confirm+0x34>
    d7bc:	2206      	movs	r2, #6
    d7be:	e000      	b.n	d7c2 <n25q256a_xip_confirm+0x36>
    d7c0:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d7c2:	7b3b      	ldrb	r3, [r7, #12]
    d7c4:	f362 0302 	bfi	r3, r2, #0, #3
    d7c8:	733b      	strb	r3, [r7, #12]
    d7ca:	7b3b      	ldrb	r3, [r7, #12]
    d7cc:	f043 0310 	orr.w	r3, r3, #16
    d7d0:	733b      	strb	r3, [r7, #12]
    d7d2:	7b3b      	ldrb	r3, [r7, #12]
    d7d4:	f043 0320 	orr.w	r3, r3, #32
    d7d8:	733b      	strb	r3, [r7, #12]
    d7da:	7b3b      	ldrb	r3, [r7, #12]
    d7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d7e0:	733b      	strb	r3, [r7, #12]
    d7e2:	7b3b      	ldrb	r3, [r7, #12]
    d7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d7e8:	733b      	strb	r3, [r7, #12]
    d7ea:	7b7b      	ldrb	r3, [r7, #13]
    d7ec:	f043 0303 	orr.w	r3, r3, #3
    d7f0:	737b      	strb	r3, [r7, #13]
    d7f2:	7b7b      	ldrb	r3, [r7, #13]
    d7f4:	2201      	movs	r2, #1
    d7f6:	f362 1305 	bfi	r3, r2, #4, #2
    d7fa:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    d7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7fe:	7b1b      	ldrb	r3, [r3, #12]
    d800:	2b00      	cmp	r3, #0
    d802:	d001      	beq.n	d808 <n25q256a_xip_confirm+0x7c>
    d804:	2208      	movs	r2, #8
    d806:	e000      	b.n	d80a <n25q256a_xip_confirm+0x7e>
    d808:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d80a:	7bbb      	ldrb	r3, [r7, #14]
    d80c:	f362 0304 	bfi	r3, r2, #0, #5
    d810:	73bb      	strb	r3, [r7, #14]
    d812:	230b      	movs	r3, #11
    d814:	743b      	strb	r3, [r7, #16]
    d816:	78fb      	ldrb	r3, [r7, #3]
    d818:	2b00      	cmp	r3, #0
    d81a:	d001      	beq.n	d820 <n25q256a_xip_confirm+0x94>
    d81c:	2300      	movs	r3, #0
    d81e:	e000      	b.n	d822 <n25q256a_xip_confirm+0x96>
    d820:	23ff      	movs	r3, #255	; 0xff
    d822:	747b      	strb	r3, [r7, #17]
    d824:	2301      	movs	r3, #1
    d826:	61bb      	str	r3, [r7, #24]
    d828:	f107 0327 	add.w	r3, r7, #39	; 0x27
    d82c:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    d82e:	f107 030c 	add.w	r3, r7, #12
    d832:	4619      	mov	r1, r3
    d834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d836:	4b07      	ldr	r3, [pc, #28]	; (d854 <n25q256a_xip_confirm+0xc8>)
    d838:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    d83a:	78fb      	ldrb	r3, [r7, #3]
    d83c:	2b00      	cmp	r3, #0
    d83e:	d001      	beq.n	d844 <n25q256a_xip_confirm+0xb8>
    d840:	2202      	movs	r2, #2
    d842:	e000      	b.n	d846 <n25q256a_xip_confirm+0xba>
    d844:	2201      	movs	r2, #1
    d846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d848:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d84a:	2300      	movs	r3, #0
}
    d84c:	4618      	mov	r0, r3
    d84e:	3730      	adds	r7, #48	; 0x30
    d850:	46bd      	mov	sp, r7
    d852:	bd80      	pop	{r7, pc}
    d854:	00004b35 	.word	0x00004b35

0000d858 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    d858:	b580      	push	{r7, lr}
    d85a:	b08c      	sub	sp, #48	; 0x30
    d85c:	af00      	add	r7, sp, #0
    d85e:	6078      	str	r0, [r7, #4]
    d860:	460b      	mov	r3, r1
    d862:	70fb      	strb	r3, [r7, #3]
    d864:	4613      	mov	r3, r2
    d866:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    d868:	2300      	movs	r3, #0
    d86a:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    d86c:	687b      	ldr	r3, [r7, #4]
    d86e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    d870:	687b      	ldr	r3, [r7, #4]
    d872:	681b      	ldr	r3, [r3, #0]
    d874:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    d876:	f107 030c 	add.w	r3, r7, #12
    d87a:	2200      	movs	r2, #0
    d87c:	601a      	str	r2, [r3, #0]
    d87e:	605a      	str	r2, [r3, #4]
    d880:	609a      	str	r2, [r3, #8]
    d882:	60da      	str	r2, [r3, #12]
    d884:	611a      	str	r2, [r3, #16]
    d886:	615a      	str	r2, [r3, #20]
    d888:	78fb      	ldrb	r3, [r7, #3]
    d88a:	f003 0307 	and.w	r3, r3, #7
    d88e:	b2da      	uxtb	r2, r3
    d890:	7b3b      	ldrb	r3, [r7, #12]
    d892:	f362 0302 	bfi	r3, r2, #0, #3
    d896:	733b      	strb	r3, [r7, #12]
    d898:	7b3b      	ldrb	r3, [r7, #12]
    d89a:	f043 0310 	orr.w	r3, r3, #16
    d89e:	733b      	strb	r3, [r7, #12]
    d8a0:	7b3b      	ldrb	r3, [r7, #12]
    d8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d8a6:	733b      	strb	r3, [r7, #12]
    d8a8:	78bb      	ldrb	r3, [r7, #2]
    d8aa:	743b      	strb	r3, [r7, #16]
    d8ac:	2301      	movs	r3, #1
    d8ae:	61bb      	str	r3, [r7, #24]
    d8b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d8b4:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8b8:	7b5b      	ldrb	r3, [r3, #13]
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	d003      	beq.n	d8c6 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    d8be:	2100      	movs	r1, #0
    d8c0:	6878      	ldr	r0, [r7, #4]
    d8c2:	4b0a      	ldr	r3, [pc, #40]	; (d8ec <n25q256a_read_reg+0x94>)
    d8c4:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d8c6:	f107 030c 	add.w	r3, r7, #12
    d8ca:	4619      	mov	r1, r3
    d8cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d8ce:	4b08      	ldr	r3, [pc, #32]	; (d8f0 <n25q256a_read_reg+0x98>)
    d8d0:	4798      	blx	r3
	if (n25q->xip_mode) {
    d8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d8d4:	7b5b      	ldrb	r3, [r3, #13]
    d8d6:	2b00      	cmp	r3, #0
    d8d8:	d003      	beq.n	d8e2 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    d8da:	2101      	movs	r1, #1
    d8dc:	6878      	ldr	r0, [r7, #4]
    d8de:	4b03      	ldr	r3, [pc, #12]	; (d8ec <n25q256a_read_reg+0x94>)
    d8e0:	4798      	blx	r3
	}
	return status;
    d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d8e4:	4618      	mov	r0, r3
    d8e6:	3730      	adds	r7, #48	; 0x30
    d8e8:	46bd      	mov	sp, r7
    d8ea:	bd80      	pop	{r7, pc}
    d8ec:	0000d78d 	.word	0x0000d78d
    d8f0:	00004b35 	.word	0x00004b35

0000d8f4 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    d8f4:	b580      	push	{r7, lr}
    d8f6:	b08c      	sub	sp, #48	; 0x30
    d8f8:	af00      	add	r7, sp, #0
    d8fa:	60f8      	str	r0, [r7, #12]
    d8fc:	607b      	str	r3, [r7, #4]
    d8fe:	460b      	mov	r3, r1
    d900:	72fb      	strb	r3, [r7, #11]
    d902:	4613      	mov	r3, r2
    d904:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d906:	68fb      	ldr	r3, [r7, #12]
    d908:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d90a:	68fb      	ldr	r3, [r7, #12]
    d90c:	681b      	ldr	r3, [r3, #0]
    d90e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    d910:	f107 0310 	add.w	r3, r7, #16
    d914:	2200      	movs	r2, #0
    d916:	601a      	str	r2, [r3, #0]
    d918:	605a      	str	r2, [r3, #4]
    d91a:	609a      	str	r2, [r3, #8]
    d91c:	60da      	str	r2, [r3, #12]
    d91e:	611a      	str	r2, [r3, #16]
    d920:	615a      	str	r2, [r3, #20]
    d922:	7afb      	ldrb	r3, [r7, #11]
    d924:	f003 0307 	and.w	r3, r3, #7
    d928:	b2da      	uxtb	r2, r3
    d92a:	7c3b      	ldrb	r3, [r7, #16]
    d92c:	f362 0302 	bfi	r3, r2, #0, #3
    d930:	743b      	strb	r3, [r7, #16]
    d932:	7c3b      	ldrb	r3, [r7, #16]
    d934:	f043 0310 	orr.w	r3, r3, #16
    d938:	743b      	strb	r3, [r7, #16]
    d93a:	7c3b      	ldrb	r3, [r7, #16]
    d93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d940:	743b      	strb	r3, [r7, #16]
    d942:	7c7b      	ldrb	r3, [r7, #17]
    d944:	2202      	movs	r2, #2
    d946:	f362 1305 	bfi	r3, r2, #4, #2
    d94a:	747b      	strb	r3, [r7, #17]
    d94c:	7abb      	ldrb	r3, [r7, #10]
    d94e:	753b      	strb	r3, [r7, #20]
    d950:	2301      	movs	r3, #1
    d952:	61fb      	str	r3, [r7, #28]
    d954:	1d3b      	adds	r3, r7, #4
    d956:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    d958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d95a:	7b5b      	ldrb	r3, [r3, #13]
    d95c:	2b00      	cmp	r3, #0
    d95e:	d003      	beq.n	d968 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    d960:	2100      	movs	r1, #0
    d962:	68f8      	ldr	r0, [r7, #12]
    d964:	4b09      	ldr	r3, [pc, #36]	; (d98c <n25q256a_write_reg+0x98>)
    d966:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d968:	f107 0310 	add.w	r3, r7, #16
    d96c:	4619      	mov	r1, r3
    d96e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d970:	4b07      	ldr	r3, [pc, #28]	; (d990 <n25q256a_write_reg+0x9c>)
    d972:	4798      	blx	r3
	if (n25q->xip_mode) {
    d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d976:	7b5b      	ldrb	r3, [r3, #13]
    d978:	2b00      	cmp	r3, #0
    d97a:	d003      	beq.n	d984 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    d97c:	2101      	movs	r1, #1
    d97e:	68f8      	ldr	r0, [r7, #12]
    d980:	4b02      	ldr	r3, [pc, #8]	; (d98c <n25q256a_write_reg+0x98>)
    d982:	4798      	blx	r3
	}
}
    d984:	bf00      	nop
    d986:	3730      	adds	r7, #48	; 0x30
    d988:	46bd      	mov	sp, r7
    d98a:	bd80      	pop	{r7, pc}
    d98c:	0000d78d 	.word	0x0000d78d
    d990:	00004b35 	.word	0x00004b35

0000d994 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    d994:	b580      	push	{r7, lr}
    d996:	b090      	sub	sp, #64	; 0x40
    d998:	af00      	add	r7, sp, #0
    d99a:	6078      	str	r0, [r7, #4]
    d99c:	460b      	mov	r3, r1
    d99e:	70fb      	strb	r3, [r7, #3]
    d9a0:	4613      	mov	r3, r2
    d9a2:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d9a4:	687b      	ldr	r3, [r7, #4]
    d9a6:	681b      	ldr	r3, [r3, #0]
    d9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    d9aa:	78bb      	ldrb	r3, [r7, #2]
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d001      	beq.n	d9b4 <n25q256a_write_enable+0x20>
    d9b0:	2306      	movs	r3, #6
    d9b2:	e000      	b.n	d9b6 <n25q256a_write_enable+0x22>
    d9b4:	2304      	movs	r3, #4
    d9b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    d9ba:	f107 0320 	add.w	r3, r7, #32
    d9be:	2200      	movs	r2, #0
    d9c0:	601a      	str	r2, [r3, #0]
    d9c2:	605a      	str	r2, [r3, #4]
    d9c4:	609a      	str	r2, [r3, #8]
    d9c6:	60da      	str	r2, [r3, #12]
    d9c8:	611a      	str	r2, [r3, #16]
    d9ca:	615a      	str	r2, [r3, #20]
    d9cc:	78fb      	ldrb	r3, [r7, #3]
    d9ce:	f003 0307 	and.w	r3, r3, #7
    d9d2:	b2da      	uxtb	r2, r3
    d9d4:	f897 3020 	ldrb.w	r3, [r7, #32]
    d9d8:	f362 0302 	bfi	r3, r2, #0, #3
    d9dc:	f887 3020 	strb.w	r3, [r7, #32]
    d9e0:	f897 3020 	ldrb.w	r3, [r7, #32]
    d9e4:	f043 0310 	orr.w	r3, r3, #16
    d9e8:	f887 3020 	strb.w	r3, [r7, #32]
    d9ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d9f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    d9f4:	f107 0308 	add.w	r3, r7, #8
    d9f8:	2200      	movs	r2, #0
    d9fa:	601a      	str	r2, [r3, #0]
    d9fc:	605a      	str	r2, [r3, #4]
    d9fe:	609a      	str	r2, [r3, #8]
    da00:	60da      	str	r2, [r3, #12]
    da02:	611a      	str	r2, [r3, #16]
    da04:	615a      	str	r2, [r3, #20]
    da06:	78fb      	ldrb	r3, [r7, #3]
    da08:	f003 0307 	and.w	r3, r3, #7
    da0c:	b2da      	uxtb	r2, r3
    da0e:	7a3b      	ldrb	r3, [r7, #8]
    da10:	f362 0302 	bfi	r3, r2, #0, #3
    da14:	723b      	strb	r3, [r7, #8]
    da16:	7a3b      	ldrb	r3, [r7, #8]
    da18:	f043 0310 	orr.w	r3, r3, #16
    da1c:	723b      	strb	r3, [r7, #8]
    da1e:	7a3b      	ldrb	r3, [r7, #8]
    da20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da24:	723b      	strb	r3, [r7, #8]
    da26:	2305      	movs	r3, #5
    da28:	733b      	strb	r3, [r7, #12]
    da2a:	2301      	movs	r3, #1
    da2c:	617b      	str	r3, [r7, #20]
    da2e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    da32:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    da34:	f107 0320 	add.w	r3, r7, #32
    da38:	4619      	mov	r1, r3
    da3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    da3c:	4b08      	ldr	r3, [pc, #32]	; (da60 <n25q256a_write_enable+0xcc>)
    da3e:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    da40:	f107 0308 	add.w	r3, r7, #8
    da44:	4619      	mov	r1, r3
    da46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    da48:	4b05      	ldr	r3, [pc, #20]	; (da60 <n25q256a_write_enable+0xcc>)
    da4a:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    da4c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    da50:	f003 0302 	and.w	r3, r3, #2
    da54:	2b00      	cmp	r3, #0
    da56:	d0ed      	beq.n	da34 <n25q256a_write_enable+0xa0>
}
    da58:	bf00      	nop
    da5a:	3740      	adds	r7, #64	; 0x40
    da5c:	46bd      	mov	sp, r7
    da5e:	bd80      	pop	{r7, pc}
    da60:	00004b35 	.word	0x00004b35

0000da64 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    da64:	b590      	push	{r4, r7, lr}
    da66:	b087      	sub	sp, #28
    da68:	af00      	add	r7, sp, #0
    da6a:	6078      	str	r0, [r7, #4]
    da6c:	460b      	mov	r3, r1
    da6e:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    da70:	687b      	ldr	r3, [r7, #4]
    da72:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    da74:	68fb      	ldr	r3, [r7, #12]
    da76:	7b1b      	ldrb	r3, [r3, #12]
    da78:	2b00      	cmp	r3, #0
    da7a:	d001      	beq.n	da80 <n25q256a_switch_mode+0x1c>
    da7c:	2306      	movs	r3, #6
    da7e:	e000      	b.n	da82 <n25q256a_switch_mode+0x1e>
    da80:	2300      	movs	r3, #0
    da82:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    da84:	7afb      	ldrb	r3, [r7, #11]
    da86:	2265      	movs	r2, #101	; 0x65
    da88:	4619      	mov	r1, r3
    da8a:	6878      	ldr	r0, [r7, #4]
    da8c:	4b25      	ldr	r3, [pc, #148]	; (db24 <n25q256a_switch_mode+0xc0>)
    da8e:	4798      	blx	r3
    da90:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    da92:	2300      	movs	r3, #0
    da94:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    da96:	68fb      	ldr	r3, [r7, #12]
    da98:	7b1b      	ldrb	r3, [r3, #12]
    da9a:	78fa      	ldrb	r2, [r7, #3]
    da9c:	429a      	cmp	r2, r3
    da9e:	d03d      	beq.n	db1c <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    daa0:	78fb      	ldrb	r3, [r7, #3]
    daa2:	2b00      	cmp	r3, #0
    daa4:	d00b      	beq.n	dabe <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    daa6:	697b      	ldr	r3, [r7, #20]
    daa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    daac:	2b00      	cmp	r3, #0
    daae:	d011      	beq.n	dad4 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    dab0:	697b      	ldr	r3, [r7, #20]
    dab2:	f003 031f 	and.w	r3, r3, #31
    dab6:	617b      	str	r3, [r7, #20]
			modify = 1;
    dab8:	2301      	movs	r3, #1
    daba:	74fb      	strb	r3, [r7, #19]
    dabc:	e00a      	b.n	dad4 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    dabe:	697b      	ldr	r3, [r7, #20]
    dac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dac4:	2b00      	cmp	r3, #0
    dac6:	d105      	bne.n	dad4 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    dac8:	697b      	ldr	r3, [r7, #20]
    daca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    dace:	617b      	str	r3, [r7, #20]
			modify = 1;
    dad0:	2301      	movs	r3, #1
    dad2:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    dad4:	7cfb      	ldrb	r3, [r7, #19]
    dad6:	2b00      	cmp	r3, #0
    dad8:	d021      	beq.n	db1e <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    dada:	68fb      	ldr	r3, [r7, #12]
    dadc:	78fa      	ldrb	r2, [r7, #3]
    dade:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    dae0:	7afb      	ldrb	r3, [r7, #11]
    dae2:	2201      	movs	r2, #1
    dae4:	4619      	mov	r1, r3
    dae6:	6878      	ldr	r0, [r7, #4]
    dae8:	4b0f      	ldr	r3, [pc, #60]	; (db28 <n25q256a_switch_mode+0xc4>)
    daea:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    daec:	7af9      	ldrb	r1, [r7, #11]
    daee:	697b      	ldr	r3, [r7, #20]
    daf0:	2261      	movs	r2, #97	; 0x61
    daf2:	6878      	ldr	r0, [r7, #4]
    daf4:	4c0d      	ldr	r4, [pc, #52]	; (db2c <n25q256a_switch_mode+0xc8>)
    daf6:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    daf8:	78fb      	ldrb	r3, [r7, #3]
    dafa:	2b00      	cmp	r3, #0
    dafc:	d001      	beq.n	db02 <n25q256a_switch_mode+0x9e>
    dafe:	2306      	movs	r3, #6
    db00:	e000      	b.n	db04 <n25q256a_switch_mode+0xa0>
    db02:	2300      	movs	r3, #0
    db04:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    db06:	7afb      	ldrb	r3, [r7, #11]
    db08:	2265      	movs	r2, #101	; 0x65
    db0a:	4619      	mov	r1, r3
    db0c:	6878      	ldr	r0, [r7, #4]
    db0e:	4b05      	ldr	r3, [pc, #20]	; (db24 <n25q256a_switch_mode+0xc0>)
    db10:	4798      	blx	r3
    db12:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    db14:	68fb      	ldr	r3, [r7, #12]
    db16:	78fa      	ldrb	r2, [r7, #3]
    db18:	731a      	strb	r2, [r3, #12]
    db1a:	e000      	b.n	db1e <n25q256a_switch_mode+0xba>
		return;
    db1c:	bf00      	nop
	}
}
    db1e:	371c      	adds	r7, #28
    db20:	46bd      	mov	sp, r7
    db22:	bd90      	pop	{r4, r7, pc}
    db24:	0000d859 	.word	0x0000d859
    db28:	0000d995 	.word	0x0000d995
    db2c:	0000d8f5 	.word	0x0000d8f5

0000db30 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    db30:	b580      	push	{r7, lr}
    db32:	b086      	sub	sp, #24
    db34:	af00      	add	r7, sp, #0
    db36:	60f8      	str	r0, [r7, #12]
    db38:	60b9      	str	r1, [r7, #8]
    db3a:	607a      	str	r2, [r7, #4]
    db3c:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    db3e:	68fb      	ldr	r3, [r7, #12]
    db40:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    db42:	4a0c      	ldr	r2, [pc, #48]	; (db74 <n25q256a_construct+0x44>)
    db44:	68b9      	ldr	r1, [r7, #8]
    db46:	68f8      	ldr	r0, [r7, #12]
    db48:	4b0b      	ldr	r3, [pc, #44]	; (db78 <n25q256a_construct+0x48>)
    db4a:	4798      	blx	r3
	n25q->quad_mode    = 0;
    db4c:	697b      	ldr	r3, [r7, #20]
    db4e:	2200      	movs	r2, #0
    db50:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    db52:	697b      	ldr	r3, [r7, #20]
    db54:	2200      	movs	r2, #0
    db56:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    db58:	697b      	ldr	r3, [r7, #20]
    db5a:	687a      	ldr	r2, [r7, #4]
    db5c:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    db5e:	78fb      	ldrb	r3, [r7, #3]
    db60:	4619      	mov	r1, r3
    db62:	68f8      	ldr	r0, [r7, #12]
    db64:	4b05      	ldr	r3, [pc, #20]	; (db7c <n25q256a_construct+0x4c>)
    db66:	4798      	blx	r3
	return me;
    db68:	68fb      	ldr	r3, [r7, #12]
}
    db6a:	4618      	mov	r0, r3
    db6c:	3718      	adds	r7, #24
    db6e:	46bd      	mov	sp, r7
    db70:	bd80      	pop	{r7, pc}
    db72:	bf00      	nop
    db74:	00012c88 	.word	0x00012c88
    db78:	0000e00d 	.word	0x0000e00d
    db7c:	0000da65 	.word	0x0000da65

0000db80 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    db80:	b580      	push	{r7, lr}
    db82:	b08c      	sub	sp, #48	; 0x30
    db84:	af00      	add	r7, sp, #0
    db86:	60f8      	str	r0, [r7, #12]
    db88:	60b9      	str	r1, [r7, #8]
    db8a:	607a      	str	r2, [r7, #4]
    db8c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    db8e:	68fb      	ldr	r3, [r7, #12]
    db90:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    db92:	68fb      	ldr	r3, [r7, #12]
    db94:	681b      	ldr	r3, [r3, #0]
    db96:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    db98:	f107 0310 	add.w	r3, r7, #16
    db9c:	2200      	movs	r2, #0
    db9e:	601a      	str	r2, [r3, #0]
    dba0:	605a      	str	r2, [r3, #4]
    dba2:	609a      	str	r2, [r3, #8]
    dba4:	60da      	str	r2, [r3, #12]
    dba6:	611a      	str	r2, [r3, #16]
    dba8:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    dbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbac:	7b1b      	ldrb	r3, [r3, #12]
    dbae:	2b00      	cmp	r3, #0
    dbb0:	d001      	beq.n	dbb6 <n25q256a_read+0x36>
    dbb2:	2206      	movs	r2, #6
    dbb4:	e000      	b.n	dbb8 <n25q256a_read+0x38>
    dbb6:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    dbb8:	7c3b      	ldrb	r3, [r7, #16]
    dbba:	f362 0302 	bfi	r3, r2, #0, #3
    dbbe:	743b      	strb	r3, [r7, #16]
    dbc0:	7c3b      	ldrb	r3, [r7, #16]
    dbc2:	f043 0310 	orr.w	r3, r3, #16
    dbc6:	743b      	strb	r3, [r7, #16]
    dbc8:	7c3b      	ldrb	r3, [r7, #16]
    dbca:	f043 0320 	orr.w	r3, r3, #32
    dbce:	743b      	strb	r3, [r7, #16]
    dbd0:	7c3b      	ldrb	r3, [r7, #16]
    dbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dbd6:	743b      	strb	r3, [r7, #16]
    dbd8:	7c7b      	ldrb	r3, [r7, #17]
    dbda:	2201      	movs	r2, #1
    dbdc:	f362 1305 	bfi	r3, r2, #4, #2
    dbe0:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbe4:	7b1b      	ldrb	r3, [r3, #12]
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	d001      	beq.n	dbee <n25q256a_read+0x6e>
    dbea:	220a      	movs	r2, #10
    dbec:	e000      	b.n	dbf0 <n25q256a_read+0x70>
    dbee:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    dbf0:	7cbb      	ldrb	r3, [r7, #18]
    dbf2:	f362 0304 	bfi	r3, r2, #0, #5
    dbf6:	74bb      	strb	r3, [r7, #18]
    dbf8:	230b      	movs	r3, #11
    dbfa:	753b      	strb	r3, [r7, #20]
    dbfc:	687b      	ldr	r3, [r7, #4]
    dbfe:	61bb      	str	r3, [r7, #24]
    dc00:	683b      	ldr	r3, [r7, #0]
    dc02:	61fb      	str	r3, [r7, #28]
    dc04:	68bb      	ldr	r3, [r7, #8]
    dc06:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    dc08:	f107 0310 	add.w	r3, r7, #16
    dc0c:	4619      	mov	r1, r3
    dc0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    dc10:	4b03      	ldr	r3, [pc, #12]	; (dc20 <n25q256a_read+0xa0>)
    dc12:	4798      	blx	r3
	return ERR_NONE;
    dc14:	2300      	movs	r3, #0
}
    dc16:	4618      	mov	r0, r3
    dc18:	3730      	adds	r7, #48	; 0x30
    dc1a:	46bd      	mov	sp, r7
    dc1c:	bd80      	pop	{r7, pc}
    dc1e:	bf00      	nop
    dc20:	00004b35 	.word	0x00004b35

0000dc24 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    dc24:	b580      	push	{r7, lr}
    dc26:	b08c      	sub	sp, #48	; 0x30
    dc28:	af00      	add	r7, sp, #0
    dc2a:	60f8      	str	r0, [r7, #12]
    dc2c:	60b9      	str	r1, [r7, #8]
    dc2e:	607a      	str	r2, [r7, #4]
    dc30:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    dc32:	68fb      	ldr	r3, [r7, #12]
    dc34:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    dc36:	68fb      	ldr	r3, [r7, #12]
    dc38:	681b      	ldr	r3, [r3, #0]
    dc3a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    dc3c:	f107 0310 	add.w	r3, r7, #16
    dc40:	2200      	movs	r2, #0
    dc42:	601a      	str	r2, [r3, #0]
    dc44:	605a      	str	r2, [r3, #4]
    dc46:	609a      	str	r2, [r3, #8]
    dc48:	60da      	str	r2, [r3, #12]
    dc4a:	611a      	str	r2, [r3, #16]
    dc4c:	615a      	str	r2, [r3, #20]
    dc4e:	7c3b      	ldrb	r3, [r7, #16]
    dc50:	f043 0310 	orr.w	r3, r3, #16
    dc54:	743b      	strb	r3, [r7, #16]
    dc56:	7c3b      	ldrb	r3, [r7, #16]
    dc58:	f043 0320 	orr.w	r3, r3, #32
    dc5c:	743b      	strb	r3, [r7, #16]
    dc5e:	7c3b      	ldrb	r3, [r7, #16]
    dc60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dc64:	743b      	strb	r3, [r7, #16]
    dc66:	7c7b      	ldrb	r3, [r7, #17]
    dc68:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    dc6c:	747b      	strb	r3, [r7, #17]
    dc6e:	2302      	movs	r3, #2
    dc70:	753b      	strb	r3, [r7, #20]
    dc72:	687b      	ldr	r3, [r7, #4]
    dc74:	61bb      	str	r3, [r7, #24]
    dc76:	683b      	ldr	r3, [r7, #0]
    dc78:	61fb      	str	r3, [r7, #28]
    dc7a:	68bb      	ldr	r3, [r7, #8]
    dc7c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    dc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc80:	7b1b      	ldrb	r3, [r3, #12]
    dc82:	2b00      	cmp	r3, #0
    dc84:	d001      	beq.n	dc8a <n25q256a_write+0x66>
    dc86:	2206      	movs	r2, #6
    dc88:	e000      	b.n	dc8c <n25q256a_write+0x68>
    dc8a:	2200      	movs	r2, #0
    dc8c:	7c3b      	ldrb	r3, [r7, #16]
    dc8e:	f362 0302 	bfi	r3, r2, #0, #3
    dc92:	743b      	strb	r3, [r7, #16]
	while (length) {
    dc94:	e035      	b.n	dd02 <n25q256a_write+0xde>
		cmd.address = address;
    dc96:	687b      	ldr	r3, [r7, #4]
    dc98:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    dc9a:	683b      	ldr	r3, [r7, #0]
    dc9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    dca0:	d802      	bhi.n	dca8 <n25q256a_write+0x84>
			cmd.buf_len = length;
    dca2:	683b      	ldr	r3, [r7, #0]
    dca4:	61fb      	str	r3, [r7, #28]
    dca6:	e002      	b.n	dcae <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    dca8:	f44f 7380 	mov.w	r3, #256	; 0x100
    dcac:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    dcae:	7c3b      	ldrb	r3, [r7, #16]
    dcb0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dcb4:	b2db      	uxtb	r3, r3
    dcb6:	2201      	movs	r2, #1
    dcb8:	4619      	mov	r1, r3
    dcba:	68f8      	ldr	r0, [r7, #12]
    dcbc:	4b19      	ldr	r3, [pc, #100]	; (dd24 <n25q256a_write+0x100>)
    dcbe:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    dcc0:	f107 0310 	add.w	r3, r7, #16
    dcc4:	4619      	mov	r1, r3
    dcc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    dcc8:	4b17      	ldr	r3, [pc, #92]	; (dd28 <n25q256a_write+0x104>)
    dcca:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    dccc:	bf00      	nop
    dcce:	7c3b      	ldrb	r3, [r7, #16]
    dcd0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dcd4:	b2db      	uxtb	r3, r3
    dcd6:	2270      	movs	r2, #112	; 0x70
    dcd8:	4619      	mov	r1, r3
    dcda:	68f8      	ldr	r0, [r7, #12]
    dcdc:	4b13      	ldr	r3, [pc, #76]	; (dd2c <n25q256a_write+0x108>)
    dcde:	4798      	blx	r3
    dce0:	4603      	mov	r3, r0
    dce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dce6:	2b00      	cmp	r3, #0
    dce8:	d0f1      	beq.n	dcce <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    dcea:	6a3a      	ldr	r2, [r7, #32]
    dcec:	69fb      	ldr	r3, [r7, #28]
    dcee:	4413      	add	r3, r2
    dcf0:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    dcf2:	69fb      	ldr	r3, [r7, #28]
    dcf4:	683a      	ldr	r2, [r7, #0]
    dcf6:	1ad3      	subs	r3, r2, r3
    dcf8:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    dcfa:	69fb      	ldr	r3, [r7, #28]
    dcfc:	687a      	ldr	r2, [r7, #4]
    dcfe:	4413      	add	r3, r2
    dd00:	607b      	str	r3, [r7, #4]
	while (length) {
    dd02:	683b      	ldr	r3, [r7, #0]
    dd04:	2b00      	cmp	r3, #0
    dd06:	d1c6      	bne.n	dc96 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd0a:	7b5b      	ldrb	r3, [r3, #13]
    dd0c:	2b00      	cmp	r3, #0
    dd0e:	d003      	beq.n	dd18 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    dd10:	2101      	movs	r1, #1
    dd12:	68f8      	ldr	r0, [r7, #12]
    dd14:	4b06      	ldr	r3, [pc, #24]	; (dd30 <n25q256a_write+0x10c>)
    dd16:	4798      	blx	r3
	}
	return ERR_NONE;
    dd18:	2300      	movs	r3, #0
}
    dd1a:	4618      	mov	r0, r3
    dd1c:	3730      	adds	r7, #48	; 0x30
    dd1e:	46bd      	mov	sp, r7
    dd20:	bd80      	pop	{r7, pc}
    dd22:	bf00      	nop
    dd24:	0000d995 	.word	0x0000d995
    dd28:	00004b35 	.word	0x00004b35
    dd2c:	0000d859 	.word	0x0000d859
    dd30:	0000d78d 	.word	0x0000d78d

0000dd34 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    dd34:	b580      	push	{r7, lr}
    dd36:	b090      	sub	sp, #64	; 0x40
    dd38:	af00      	add	r7, sp, #0
    dd3a:	60f8      	str	r0, [r7, #12]
    dd3c:	60b9      	str	r1, [r7, #8]
    dd3e:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    dd40:	68fb      	ldr	r3, [r7, #12]
    dd42:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    dd44:	68fb      	ldr	r3, [r7, #12]
    dd46:	681b      	ldr	r3, [r3, #0]
    dd48:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    dd4a:	f107 0314 	add.w	r3, r7, #20
    dd4e:	2200      	movs	r2, #0
    dd50:	601a      	str	r2, [r3, #0]
    dd52:	605a      	str	r2, [r3, #4]
    dd54:	609a      	str	r2, [r3, #8]
    dd56:	60da      	str	r2, [r3, #12]
    dd58:	611a      	str	r2, [r3, #16]
    dd5a:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    dd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dd5e:	7b1b      	ldrb	r3, [r3, #12]
    dd60:	2b00      	cmp	r3, #0
    dd62:	d001      	beq.n	dd68 <n25q256a_erase+0x34>
    dd64:	2206      	movs	r2, #6
    dd66:	e000      	b.n	dd6a <n25q256a_erase+0x36>
    dd68:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    dd6a:	7d3b      	ldrb	r3, [r7, #20]
    dd6c:	f362 0302 	bfi	r3, r2, #0, #3
    dd70:	753b      	strb	r3, [r7, #20]
    dd72:	7d3b      	ldrb	r3, [r7, #20]
    dd74:	f043 0310 	orr.w	r3, r3, #16
    dd78:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    dd7a:	687b      	ldr	r3, [r7, #4]
    dd7c:	4a56      	ldr	r2, [pc, #344]	; (ded8 <n25q256a_erase+0x1a4>)
    dd7e:	4293      	cmp	r3, r2
    dd80:	bf94      	ite	ls
    dd82:	2301      	movls	r3, #1
    dd84:	2300      	movhi	r3, #0
    dd86:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    dd88:	7d3b      	ldrb	r3, [r7, #20]
    dd8a:	f362 1345 	bfi	r3, r2, #5, #1
    dd8e:	753b      	strb	r3, [r7, #20]
    dd90:	7d7b      	ldrb	r3, [r7, #21]
    dd92:	2202      	movs	r2, #2
    dd94:	f362 1305 	bfi	r3, r2, #4, #2
    dd98:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    dd9a:	68bb      	ldr	r3, [r7, #8]
    dd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    dd9e:	687b      	ldr	r3, [r7, #4]
    dda0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    dda2:	2300      	movs	r3, #0
    dda4:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    dda6:	687b      	ldr	r3, [r7, #4]
    dda8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ddac:	2b00      	cmp	r3, #0
    ddae:	d104      	bne.n	ddba <n25q256a_erase+0x86>
    ddb0:	68bb      	ldr	r3, [r7, #8]
    ddb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ddb6:	2b00      	cmp	r3, #0
    ddb8:	d002      	beq.n	ddc0 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    ddba:	f06f 030c 	mvn.w	r3, #12
    ddbe:	e087      	b.n	ded0 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ddc0:	687b      	ldr	r3, [r7, #4]
    ddc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    ddc6:	d368      	bcc.n	de9a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    ddc8:	23c7      	movs	r3, #199	; 0xc7
    ddca:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ddcc:	7d3b      	ldrb	r3, [r7, #20]
    ddce:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ddd2:	b2db      	uxtb	r3, r3
    ddd4:	2201      	movs	r2, #1
    ddd6:	4619      	mov	r1, r3
    ddd8:	68f8      	ldr	r0, [r7, #12]
    ddda:	4b40      	ldr	r3, [pc, #256]	; (dedc <n25q256a_erase+0x1a8>)
    dddc:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ddde:	f107 0314 	add.w	r3, r7, #20
    dde2:	4619      	mov	r1, r3
    dde4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dde6:	4b3e      	ldr	r3, [pc, #248]	; (dee0 <n25q256a_erase+0x1ac>)
    dde8:	4798      	blx	r3
    ddea:	e059      	b.n	dea0 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ddec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddee:	b29b      	uxth	r3, r3
    ddf0:	2b00      	cmp	r3, #0
    ddf2:	d11f      	bne.n	de34 <n25q256a_erase+0x100>
    ddf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ddf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ddfa:	d31b      	bcc.n	de34 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ddfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ddfe:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    de00:	23d8      	movs	r3, #216	; 0xd8
    de02:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    de04:	7d3b      	ldrb	r3, [r7, #20]
    de06:	f3c3 0302 	ubfx	r3, r3, #0, #3
    de0a:	b2db      	uxtb	r3, r3
    de0c:	2201      	movs	r2, #1
    de0e:	4619      	mov	r1, r3
    de10:	68f8      	ldr	r0, [r7, #12]
    de12:	4b32      	ldr	r3, [pc, #200]	; (dedc <n25q256a_erase+0x1a8>)
    de14:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    de16:	f107 0314 	add.w	r3, r7, #20
    de1a:	4619      	mov	r1, r3
    de1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    de1e:	4b30      	ldr	r3, [pc, #192]	; (dee0 <n25q256a_erase+0x1ac>)
    de20:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    de22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de24:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    de28:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    de2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de2c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    de30:	63bb      	str	r3, [r7, #56]	; 0x38
    de32:	e023      	b.n	de7c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    de3a:	d31b      	bcc.n	de74 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    de3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de3e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    de40:	2320      	movs	r3, #32
    de42:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    de44:	7d3b      	ldrb	r3, [r7, #20]
    de46:	f3c3 0302 	ubfx	r3, r3, #0, #3
    de4a:	b2db      	uxtb	r3, r3
    de4c:	2201      	movs	r2, #1
    de4e:	4619      	mov	r1, r3
    de50:	68f8      	ldr	r0, [r7, #12]
    de52:	4b22      	ldr	r3, [pc, #136]	; (dedc <n25q256a_erase+0x1a8>)
    de54:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    de56:	f107 0314 	add.w	r3, r7, #20
    de5a:	4619      	mov	r1, r3
    de5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    de5e:	4b20      	ldr	r3, [pc, #128]	; (dee0 <n25q256a_erase+0x1ac>)
    de60:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    de62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    de68:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de6c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    de70:	63bb      	str	r3, [r7, #56]	; 0x38
    de72:	e003      	b.n	de7c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    de74:	f06f 030c 	mvn.w	r3, #12
    de78:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    de7a:	e011      	b.n	dea0 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    de7c:	bf00      	nop
    de7e:	7d3b      	ldrb	r3, [r7, #20]
    de80:	f3c3 0302 	ubfx	r3, r3, #0, #3
    de84:	b2db      	uxtb	r3, r3
    de86:	2270      	movs	r2, #112	; 0x70
    de88:	4619      	mov	r1, r3
    de8a:	68f8      	ldr	r0, [r7, #12]
    de8c:	4b15      	ldr	r3, [pc, #84]	; (dee4 <n25q256a_erase+0x1b0>)
    de8e:	4798      	blx	r3
    de90:	4603      	mov	r3, r0
    de92:	f003 0380 	and.w	r3, r3, #128	; 0x80
    de96:	2b00      	cmp	r3, #0
    de98:	d0f1      	beq.n	de7e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    de9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    de9c:	2b00      	cmp	r3, #0
    de9e:	d1a5      	bne.n	ddec <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    dea0:	bf00      	nop
    dea2:	7d3b      	ldrb	r3, [r7, #20]
    dea4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dea8:	b2db      	uxtb	r3, r3
    deaa:	2270      	movs	r2, #112	; 0x70
    deac:	4619      	mov	r1, r3
    deae:	68f8      	ldr	r0, [r7, #12]
    deb0:	4b0c      	ldr	r3, [pc, #48]	; (dee4 <n25q256a_erase+0x1b0>)
    deb2:	4798      	blx	r3
    deb4:	4603      	mov	r3, r0
    deb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    deba:	2b00      	cmp	r3, #0
    debc:	d0f1      	beq.n	dea2 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dec0:	7b5b      	ldrb	r3, [r3, #13]
    dec2:	2b00      	cmp	r3, #0
    dec4:	d003      	beq.n	dece <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    dec6:	2101      	movs	r1, #1
    dec8:	68f8      	ldr	r0, [r7, #12]
    deca:	4b07      	ldr	r3, [pc, #28]	; (dee8 <n25q256a_erase+0x1b4>)
    decc:	4798      	blx	r3
	}
	return rc;
    dece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    ded0:	4618      	mov	r0, r3
    ded2:	3740      	adds	r7, #64	; 0x40
    ded4:	46bd      	mov	sp, r7
    ded6:	bd80      	pop	{r7, pc}
    ded8:	001fffff 	.word	0x001fffff
    dedc:	0000d995 	.word	0x0000d995
    dee0:	00004b35 	.word	0x00004b35
    dee4:	0000d859 	.word	0x0000d859
    dee8:	0000d78d 	.word	0x0000d78d

0000deec <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    deec:	b590      	push	{r4, r7, lr}
    deee:	b085      	sub	sp, #20
    def0:	af00      	add	r7, sp, #0
    def2:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    def4:	687b      	ldr	r3, [r7, #4]
    def6:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    def8:	68fb      	ldr	r3, [r7, #12]
    defa:	7b1b      	ldrb	r3, [r3, #12]
    defc:	2b00      	cmp	r3, #0
    defe:	d001      	beq.n	df04 <n25q256a_enable_xip+0x18>
    df00:	2306      	movs	r3, #6
    df02:	e000      	b.n	df06 <n25q256a_enable_xip+0x1a>
    df04:	2300      	movs	r3, #0
    df06:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    df08:	68fb      	ldr	r3, [r7, #12]
    df0a:	7b5b      	ldrb	r3, [r3, #13]
    df0c:	2b00      	cmp	r3, #0
    df0e:	d129      	bne.n	df64 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    df10:	7afb      	ldrb	r3, [r7, #11]
    df12:	2285      	movs	r2, #133	; 0x85
    df14:	4619      	mov	r1, r3
    df16:	6878      	ldr	r0, [r7, #4]
    df18:	4b15      	ldr	r3, [pc, #84]	; (df70 <n25q256a_enable_xip+0x84>)
    df1a:	4798      	blx	r3
    df1c:	4603      	mov	r3, r0
    df1e:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    df20:	7abb      	ldrb	r3, [r7, #10]
    df22:	f003 0308 	and.w	r3, r3, #8
    df26:	2b00      	cmp	r3, #0
    df28:	d015      	beq.n	df56 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    df2a:	7abb      	ldrb	r3, [r7, #10]
    df2c:	f023 0308 	bic.w	r3, r3, #8
    df30:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    df32:	7abb      	ldrb	r3, [r7, #10]
    df34:	7af9      	ldrb	r1, [r7, #11]
    df36:	2281      	movs	r2, #129	; 0x81
    df38:	6878      	ldr	r0, [r7, #4]
    df3a:	4c0e      	ldr	r4, [pc, #56]	; (df74 <n25q256a_enable_xip+0x88>)
    df3c:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    df3e:	bf00      	nop
    df40:	7afb      	ldrb	r3, [r7, #11]
    df42:	2270      	movs	r2, #112	; 0x70
    df44:	4619      	mov	r1, r3
    df46:	6878      	ldr	r0, [r7, #4]
    df48:	4b09      	ldr	r3, [pc, #36]	; (df70 <n25q256a_enable_xip+0x84>)
    df4a:	4798      	blx	r3
    df4c:	4603      	mov	r3, r0
    df4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    df52:	2b00      	cmp	r3, #0
    df54:	d0f4      	beq.n	df40 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    df56:	68fb      	ldr	r3, [r7, #12]
    df58:	2201      	movs	r2, #1
    df5a:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    df5c:	2101      	movs	r1, #1
    df5e:	6878      	ldr	r0, [r7, #4]
    df60:	4b05      	ldr	r3, [pc, #20]	; (df78 <n25q256a_enable_xip+0x8c>)
    df62:	4798      	blx	r3
	}
	return ERR_NONE;
    df64:	2300      	movs	r3, #0
}
    df66:	4618      	mov	r0, r3
    df68:	3714      	adds	r7, #20
    df6a:	46bd      	mov	sp, r7
    df6c:	bd90      	pop	{r4, r7, pc}
    df6e:	bf00      	nop
    df70:	0000d859 	.word	0x0000d859
    df74:	0000d8f5 	.word	0x0000d8f5
    df78:	0000d78d 	.word	0x0000d78d

0000df7c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    df7c:	b580      	push	{r7, lr}
    df7e:	b086      	sub	sp, #24
    df80:	af00      	add	r7, sp, #0
    df82:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    df84:	687b      	ldr	r3, [r7, #4]
    df86:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    df88:	687b      	ldr	r3, [r7, #4]
    df8a:	681b      	ldr	r3, [r3, #0]
    df8c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    df8e:	697b      	ldr	r3, [r7, #20]
    df90:	7b1b      	ldrb	r3, [r3, #12]
    df92:	2b00      	cmp	r3, #0
    df94:	d001      	beq.n	df9a <n25q256a_disable_xip+0x1e>
    df96:	2306      	movs	r3, #6
    df98:	e000      	b.n	df9c <n25q256a_disable_xip+0x20>
    df9a:	2300      	movs	r3, #0
    df9c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    df9e:	2100      	movs	r1, #0
    dfa0:	6878      	ldr	r0, [r7, #4]
    dfa2:	4b15      	ldr	r3, [pc, #84]	; (dff8 <n25q256a_disable_xip+0x7c>)
    dfa4:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    dfa6:	7bfb      	ldrb	r3, [r7, #15]
    dfa8:	2285      	movs	r2, #133	; 0x85
    dfaa:	4619      	mov	r1, r3
    dfac:	6878      	ldr	r0, [r7, #4]
    dfae:	4b13      	ldr	r3, [pc, #76]	; (dffc <n25q256a_disable_xip+0x80>)
    dfb0:	4798      	blx	r3
    dfb2:	4603      	mov	r3, r0
    dfb4:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    dfb6:	7bbb      	ldrb	r3, [r7, #14]
    dfb8:	f003 0308 	and.w	r3, r3, #8
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	d113      	bne.n	dfe8 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    dfc0:	697b      	ldr	r3, [r7, #20]
    dfc2:	689b      	ldr	r3, [r3, #8]
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	d00f      	beq.n	dfe8 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    dfc8:	693b      	ldr	r3, [r7, #16]
    dfca:	681b      	ldr	r3, [r3, #0]
    dfcc:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    dfce:	6938      	ldr	r0, [r7, #16]
    dfd0:	4b0b      	ldr	r3, [pc, #44]	; (e000 <n25q256a_disable_xip+0x84>)
    dfd2:	4798      	blx	r3
			n25q->pin_exit_xip();
    dfd4:	697b      	ldr	r3, [r7, #20]
    dfd6:	689b      	ldr	r3, [r3, #8]
    dfd8:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    dfda:	68b9      	ldr	r1, [r7, #8]
    dfdc:	6938      	ldr	r0, [r7, #16]
    dfde:	4b09      	ldr	r3, [pc, #36]	; (e004 <n25q256a_disable_xip+0x88>)
    dfe0:	4798      	blx	r3
			qspi_sync_enable(descr);
    dfe2:	6938      	ldr	r0, [r7, #16]
    dfe4:	4b08      	ldr	r3, [pc, #32]	; (e008 <n25q256a_disable_xip+0x8c>)
    dfe6:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    dfe8:	697b      	ldr	r3, [r7, #20]
    dfea:	2200      	movs	r2, #0
    dfec:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    dfee:	2300      	movs	r3, #0
}
    dff0:	4618      	mov	r0, r3
    dff2:	3718      	adds	r7, #24
    dff4:	46bd      	mov	sp, r7
    dff6:	bd80      	pop	{r7, pc}
    dff8:	0000d78d 	.word	0x0000d78d
    dffc:	0000d859 	.word	0x0000d859
    e000:	00004af9 	.word	0x00004af9
    e004:	00004a71 	.word	0x00004a71
    e008:	00004abd 	.word	0x00004abd

0000e00c <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    e00c:	b480      	push	{r7}
    e00e:	b085      	sub	sp, #20
    e010:	af00      	add	r7, sp, #0
    e012:	60f8      	str	r0, [r7, #12]
    e014:	60b9      	str	r1, [r7, #8]
    e016:	607a      	str	r2, [r7, #4]
	me->io        = io;
    e018:	68fb      	ldr	r3, [r7, #12]
    e01a:	68ba      	ldr	r2, [r7, #8]
    e01c:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    e01e:	68fb      	ldr	r3, [r7, #12]
    e020:	687a      	ldr	r2, [r7, #4]
    e022:	605a      	str	r2, [r3, #4]

	return me;
    e024:	68fb      	ldr	r3, [r7, #12]
}
    e026:	4618      	mov	r0, r3
    e028:	3714      	adds	r7, #20
    e02a:	46bd      	mov	sp, r7
    e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e030:	4770      	bx	lr

0000e032 <hri_port_set_DIR_reg>:
{
    e032:	b480      	push	{r7}
    e034:	b085      	sub	sp, #20
    e036:	af00      	add	r7, sp, #0
    e038:	60f8      	str	r0, [r7, #12]
    e03a:	460b      	mov	r3, r1
    e03c:	607a      	str	r2, [r7, #4]
    e03e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    e040:	7afb      	ldrb	r3, [r7, #11]
    e042:	68fa      	ldr	r2, [r7, #12]
    e044:	01db      	lsls	r3, r3, #7
    e046:	4413      	add	r3, r2
    e048:	3308      	adds	r3, #8
    e04a:	687a      	ldr	r2, [r7, #4]
    e04c:	601a      	str	r2, [r3, #0]
}
    e04e:	bf00      	nop
    e050:	3714      	adds	r7, #20
    e052:	46bd      	mov	sp, r7
    e054:	f85d 7b04 	ldr.w	r7, [sp], #4
    e058:	4770      	bx	lr

0000e05a <hri_port_clear_DIR_reg>:
{
    e05a:	b480      	push	{r7}
    e05c:	b085      	sub	sp, #20
    e05e:	af00      	add	r7, sp, #0
    e060:	60f8      	str	r0, [r7, #12]
    e062:	460b      	mov	r3, r1
    e064:	607a      	str	r2, [r7, #4]
    e066:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    e068:	7afb      	ldrb	r3, [r7, #11]
    e06a:	68fa      	ldr	r2, [r7, #12]
    e06c:	01db      	lsls	r3, r3, #7
    e06e:	4413      	add	r3, r2
    e070:	3304      	adds	r3, #4
    e072:	687a      	ldr	r2, [r7, #4]
    e074:	601a      	str	r2, [r3, #0]
}
    e076:	bf00      	nop
    e078:	3714      	adds	r7, #20
    e07a:	46bd      	mov	sp, r7
    e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e080:	4770      	bx	lr

0000e082 <hri_port_set_OUT_reg>:
{
    e082:	b480      	push	{r7}
    e084:	b085      	sub	sp, #20
    e086:	af00      	add	r7, sp, #0
    e088:	60f8      	str	r0, [r7, #12]
    e08a:	460b      	mov	r3, r1
    e08c:	607a      	str	r2, [r7, #4]
    e08e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e090:	7afb      	ldrb	r3, [r7, #11]
    e092:	68fa      	ldr	r2, [r7, #12]
    e094:	01db      	lsls	r3, r3, #7
    e096:	4413      	add	r3, r2
    e098:	3318      	adds	r3, #24
    e09a:	687a      	ldr	r2, [r7, #4]
    e09c:	601a      	str	r2, [r3, #0]
}
    e09e:	bf00      	nop
    e0a0:	3714      	adds	r7, #20
    e0a2:	46bd      	mov	sp, r7
    e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0a8:	4770      	bx	lr

0000e0aa <hri_port_clear_OUT_reg>:
{
    e0aa:	b480      	push	{r7}
    e0ac:	b085      	sub	sp, #20
    e0ae:	af00      	add	r7, sp, #0
    e0b0:	60f8      	str	r0, [r7, #12]
    e0b2:	460b      	mov	r3, r1
    e0b4:	607a      	str	r2, [r7, #4]
    e0b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e0b8:	7afb      	ldrb	r3, [r7, #11]
    e0ba:	68fa      	ldr	r2, [r7, #12]
    e0bc:	01db      	lsls	r3, r3, #7
    e0be:	4413      	add	r3, r2
    e0c0:	3314      	adds	r3, #20
    e0c2:	687a      	ldr	r2, [r7, #4]
    e0c4:	601a      	str	r2, [r3, #0]
}
    e0c6:	bf00      	nop
    e0c8:	3714      	adds	r7, #20
    e0ca:	46bd      	mov	sp, r7
    e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0d0:	4770      	bx	lr

0000e0d2 <hri_port_write_PMUX_PMUXE_bf>:
{
    e0d2:	b480      	push	{r7}
    e0d4:	b085      	sub	sp, #20
    e0d6:	af00      	add	r7, sp, #0
    e0d8:	6078      	str	r0, [r7, #4]
    e0da:	4608      	mov	r0, r1
    e0dc:	4611      	mov	r1, r2
    e0de:	461a      	mov	r2, r3
    e0e0:	4603      	mov	r3, r0
    e0e2:	70fb      	strb	r3, [r7, #3]
    e0e4:	460b      	mov	r3, r1
    e0e6:	70bb      	strb	r3, [r7, #2]
    e0e8:	4613      	mov	r3, r2
    e0ea:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e0ec:	78fa      	ldrb	r2, [r7, #3]
    e0ee:	78bb      	ldrb	r3, [r7, #2]
    e0f0:	6879      	ldr	r1, [r7, #4]
    e0f2:	01d2      	lsls	r2, r2, #7
    e0f4:	440a      	add	r2, r1
    e0f6:	4413      	add	r3, r2
    e0f8:	3330      	adds	r3, #48	; 0x30
    e0fa:	781b      	ldrb	r3, [r3, #0]
    e0fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    e0fe:	7bfb      	ldrb	r3, [r7, #15]
    e100:	f023 030f 	bic.w	r3, r3, #15
    e104:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    e106:	787b      	ldrb	r3, [r7, #1]
    e108:	f003 030f 	and.w	r3, r3, #15
    e10c:	b2da      	uxtb	r2, r3
    e10e:	7bfb      	ldrb	r3, [r7, #15]
    e110:	4313      	orrs	r3, r2
    e112:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e114:	78fa      	ldrb	r2, [r7, #3]
    e116:	78bb      	ldrb	r3, [r7, #2]
    e118:	6879      	ldr	r1, [r7, #4]
    e11a:	01d2      	lsls	r2, r2, #7
    e11c:	440a      	add	r2, r1
    e11e:	4413      	add	r3, r2
    e120:	3330      	adds	r3, #48	; 0x30
    e122:	7bfa      	ldrb	r2, [r7, #15]
    e124:	701a      	strb	r2, [r3, #0]
}
    e126:	bf00      	nop
    e128:	3714      	adds	r7, #20
    e12a:	46bd      	mov	sp, r7
    e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e130:	4770      	bx	lr

0000e132 <hri_port_write_PMUX_PMUXO_bf>:
{
    e132:	b480      	push	{r7}
    e134:	b085      	sub	sp, #20
    e136:	af00      	add	r7, sp, #0
    e138:	6078      	str	r0, [r7, #4]
    e13a:	4608      	mov	r0, r1
    e13c:	4611      	mov	r1, r2
    e13e:	461a      	mov	r2, r3
    e140:	4603      	mov	r3, r0
    e142:	70fb      	strb	r3, [r7, #3]
    e144:	460b      	mov	r3, r1
    e146:	70bb      	strb	r3, [r7, #2]
    e148:	4613      	mov	r3, r2
    e14a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    e14c:	78fa      	ldrb	r2, [r7, #3]
    e14e:	78bb      	ldrb	r3, [r7, #2]
    e150:	6879      	ldr	r1, [r7, #4]
    e152:	01d2      	lsls	r2, r2, #7
    e154:	440a      	add	r2, r1
    e156:	4413      	add	r3, r2
    e158:	3330      	adds	r3, #48	; 0x30
    e15a:	781b      	ldrb	r3, [r3, #0]
    e15c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    e15e:	7bfb      	ldrb	r3, [r7, #15]
    e160:	f003 030f 	and.w	r3, r3, #15
    e164:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    e166:	787b      	ldrb	r3, [r7, #1]
    e168:	011b      	lsls	r3, r3, #4
    e16a:	b2da      	uxtb	r2, r3
    e16c:	7bfb      	ldrb	r3, [r7, #15]
    e16e:	4313      	orrs	r3, r2
    e170:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    e172:	78fa      	ldrb	r2, [r7, #3]
    e174:	78bb      	ldrb	r3, [r7, #2]
    e176:	6879      	ldr	r1, [r7, #4]
    e178:	01d2      	lsls	r2, r2, #7
    e17a:	440a      	add	r2, r1
    e17c:	4413      	add	r3, r2
    e17e:	3330      	adds	r3, #48	; 0x30
    e180:	7bfa      	ldrb	r2, [r7, #15]
    e182:	701a      	strb	r2, [r3, #0]
}
    e184:	bf00      	nop
    e186:	3714      	adds	r7, #20
    e188:	46bd      	mov	sp, r7
    e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e18e:	4770      	bx	lr

0000e190 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    e190:	b480      	push	{r7}
    e192:	b085      	sub	sp, #20
    e194:	af00      	add	r7, sp, #0
    e196:	6078      	str	r0, [r7, #4]
    e198:	4608      	mov	r0, r1
    e19a:	4611      	mov	r1, r2
    e19c:	461a      	mov	r2, r3
    e19e:	4603      	mov	r3, r0
    e1a0:	70fb      	strb	r3, [r7, #3]
    e1a2:	460b      	mov	r3, r1
    e1a4:	70bb      	strb	r3, [r7, #2]
    e1a6:	4613      	mov	r3, r2
    e1a8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    e1aa:	78fa      	ldrb	r2, [r7, #3]
    e1ac:	78bb      	ldrb	r3, [r7, #2]
    e1ae:	6879      	ldr	r1, [r7, #4]
    e1b0:	01d2      	lsls	r2, r2, #7
    e1b2:	440a      	add	r2, r1
    e1b4:	4413      	add	r3, r2
    e1b6:	3340      	adds	r3, #64	; 0x40
    e1b8:	781b      	ldrb	r3, [r3, #0]
    e1ba:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    e1bc:	7bfb      	ldrb	r3, [r7, #15]
    e1be:	f023 0301 	bic.w	r3, r3, #1
    e1c2:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    e1c4:	787a      	ldrb	r2, [r7, #1]
    e1c6:	7bfb      	ldrb	r3, [r7, #15]
    e1c8:	4313      	orrs	r3, r2
    e1ca:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    e1cc:	78fa      	ldrb	r2, [r7, #3]
    e1ce:	78bb      	ldrb	r3, [r7, #2]
    e1d0:	6879      	ldr	r1, [r7, #4]
    e1d2:	01d2      	lsls	r2, r2, #7
    e1d4:	440a      	add	r2, r1
    e1d6:	4413      	add	r3, r2
    e1d8:	3340      	adds	r3, #64	; 0x40
    e1da:	7bfa      	ldrb	r2, [r7, #15]
    e1dc:	701a      	strb	r2, [r3, #0]
}
    e1de:	bf00      	nop
    e1e0:	3714      	adds	r7, #20
    e1e2:	46bd      	mov	sp, r7
    e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1e8:	4770      	bx	lr

0000e1ea <hri_port_write_WRCONFIG_reg>:
{
    e1ea:	b480      	push	{r7}
    e1ec:	b085      	sub	sp, #20
    e1ee:	af00      	add	r7, sp, #0
    e1f0:	60f8      	str	r0, [r7, #12]
    e1f2:	460b      	mov	r3, r1
    e1f4:	607a      	str	r2, [r7, #4]
    e1f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    e1f8:	7afb      	ldrb	r3, [r7, #11]
    e1fa:	68fa      	ldr	r2, [r7, #12]
    e1fc:	01db      	lsls	r3, r3, #7
    e1fe:	4413      	add	r3, r2
    e200:	3328      	adds	r3, #40	; 0x28
    e202:	687a      	ldr	r2, [r7, #4]
    e204:	601a      	str	r2, [r3, #0]
}
    e206:	bf00      	nop
    e208:	3714      	adds	r7, #20
    e20a:	46bd      	mov	sp, r7
    e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e210:	4770      	bx	lr
	...

0000e214 <_gpio_set_direction>:
{
    e214:	b580      	push	{r7, lr}
    e216:	b082      	sub	sp, #8
    e218:	af00      	add	r7, sp, #0
    e21a:	4603      	mov	r3, r0
    e21c:	6039      	str	r1, [r7, #0]
    e21e:	71fb      	strb	r3, [r7, #7]
    e220:	4613      	mov	r3, r2
    e222:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    e224:	79bb      	ldrb	r3, [r7, #6]
    e226:	2b01      	cmp	r3, #1
    e228:	d01c      	beq.n	e264 <_gpio_set_direction+0x50>
    e22a:	2b02      	cmp	r3, #2
    e22c:	d037      	beq.n	e29e <_gpio_set_direction+0x8a>
    e22e:	2b00      	cmp	r3, #0
    e230:	d14e      	bne.n	e2d0 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e232:	79fb      	ldrb	r3, [r7, #7]
    e234:	683a      	ldr	r2, [r7, #0]
    e236:	4619      	mov	r1, r3
    e238:	482a      	ldr	r0, [pc, #168]	; (e2e4 <_gpio_set_direction+0xd0>)
    e23a:	4b2b      	ldr	r3, [pc, #172]	; (e2e8 <_gpio_set_direction+0xd4>)
    e23c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e23e:	683b      	ldr	r3, [r7, #0]
    e240:	b29b      	uxth	r3, r3
    e242:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e246:	79fb      	ldrb	r3, [r7, #7]
    e248:	4619      	mov	r1, r3
    e24a:	4826      	ldr	r0, [pc, #152]	; (e2e4 <_gpio_set_direction+0xd0>)
    e24c:	4b27      	ldr	r3, [pc, #156]	; (e2ec <_gpio_set_direction+0xd8>)
    e24e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e250:	683b      	ldr	r3, [r7, #0]
    e252:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e254:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e258:	79fb      	ldrb	r3, [r7, #7]
    e25a:	4619      	mov	r1, r3
    e25c:	4821      	ldr	r0, [pc, #132]	; (e2e4 <_gpio_set_direction+0xd0>)
    e25e:	4b23      	ldr	r3, [pc, #140]	; (e2ec <_gpio_set_direction+0xd8>)
    e260:	4798      	blx	r3
		break;
    e262:	e03a      	b.n	e2da <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e264:	79fb      	ldrb	r3, [r7, #7]
    e266:	683a      	ldr	r2, [r7, #0]
    e268:	4619      	mov	r1, r3
    e26a:	481e      	ldr	r0, [pc, #120]	; (e2e4 <_gpio_set_direction+0xd0>)
    e26c:	4b1e      	ldr	r3, [pc, #120]	; (e2e8 <_gpio_set_direction+0xd4>)
    e26e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    e270:	683b      	ldr	r3, [r7, #0]
    e272:	b29b      	uxth	r3, r3
    e274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    e278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e27c:	79f9      	ldrb	r1, [r7, #7]
    e27e:	461a      	mov	r2, r3
    e280:	4818      	ldr	r0, [pc, #96]	; (e2e4 <_gpio_set_direction+0xd0>)
    e282:	4b1a      	ldr	r3, [pc, #104]	; (e2ec <_gpio_set_direction+0xd8>)
    e284:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    e286:	683b      	ldr	r3, [r7, #0]
    e288:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    e28a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    e28e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e292:	79f9      	ldrb	r1, [r7, #7]
    e294:	461a      	mov	r2, r3
    e296:	4813      	ldr	r0, [pc, #76]	; (e2e4 <_gpio_set_direction+0xd0>)
    e298:	4b14      	ldr	r3, [pc, #80]	; (e2ec <_gpio_set_direction+0xd8>)
    e29a:	4798      	blx	r3
		break;
    e29c:	e01d      	b.n	e2da <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    e29e:	79fb      	ldrb	r3, [r7, #7]
    e2a0:	683a      	ldr	r2, [r7, #0]
    e2a2:	4619      	mov	r1, r3
    e2a4:	480f      	ldr	r0, [pc, #60]	; (e2e4 <_gpio_set_direction+0xd0>)
    e2a6:	4b12      	ldr	r3, [pc, #72]	; (e2f0 <_gpio_set_direction+0xdc>)
    e2a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e2aa:	683b      	ldr	r3, [r7, #0]
    e2ac:	b29b      	uxth	r3, r3
    e2ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e2b2:	79fb      	ldrb	r3, [r7, #7]
    e2b4:	4619      	mov	r1, r3
    e2b6:	480b      	ldr	r0, [pc, #44]	; (e2e4 <_gpio_set_direction+0xd0>)
    e2b8:	4b0c      	ldr	r3, [pc, #48]	; (e2ec <_gpio_set_direction+0xd8>)
    e2ba:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e2bc:	683b      	ldr	r3, [r7, #0]
    e2be:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e2c0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e2c4:	79fb      	ldrb	r3, [r7, #7]
    e2c6:	4619      	mov	r1, r3
    e2c8:	4806      	ldr	r0, [pc, #24]	; (e2e4 <_gpio_set_direction+0xd0>)
    e2ca:	4b08      	ldr	r3, [pc, #32]	; (e2ec <_gpio_set_direction+0xd8>)
    e2cc:	4798      	blx	r3
		break;
    e2ce:	e004      	b.n	e2da <_gpio_set_direction+0xc6>
		ASSERT(false);
    e2d0:	2246      	movs	r2, #70	; 0x46
    e2d2:	4908      	ldr	r1, [pc, #32]	; (e2f4 <_gpio_set_direction+0xe0>)
    e2d4:	2000      	movs	r0, #0
    e2d6:	4b08      	ldr	r3, [pc, #32]	; (e2f8 <_gpio_set_direction+0xe4>)
    e2d8:	4798      	blx	r3
}
    e2da:	bf00      	nop
    e2dc:	3708      	adds	r7, #8
    e2de:	46bd      	mov	sp, r7
    e2e0:	bd80      	pop	{r7, pc}
    e2e2:	bf00      	nop
    e2e4:	41008000 	.word	0x41008000
    e2e8:	0000e05b 	.word	0x0000e05b
    e2ec:	0000e1eb 	.word	0x0000e1eb
    e2f0:	0000e033 	.word	0x0000e033
    e2f4:	00012c9c 	.word	0x00012c9c
    e2f8:	00005ed5 	.word	0x00005ed5

0000e2fc <_gpio_set_level>:
{
    e2fc:	b580      	push	{r7, lr}
    e2fe:	b082      	sub	sp, #8
    e300:	af00      	add	r7, sp, #0
    e302:	4603      	mov	r3, r0
    e304:	6039      	str	r1, [r7, #0]
    e306:	71fb      	strb	r3, [r7, #7]
    e308:	4613      	mov	r3, r2
    e30a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e30c:	79bb      	ldrb	r3, [r7, #6]
    e30e:	2b00      	cmp	r3, #0
    e310:	d006      	beq.n	e320 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e312:	79fb      	ldrb	r3, [r7, #7]
    e314:	683a      	ldr	r2, [r7, #0]
    e316:	4619      	mov	r1, r3
    e318:	4806      	ldr	r0, [pc, #24]	; (e334 <_gpio_set_level+0x38>)
    e31a:	4b07      	ldr	r3, [pc, #28]	; (e338 <_gpio_set_level+0x3c>)
    e31c:	4798      	blx	r3
}
    e31e:	e005      	b.n	e32c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e320:	79fb      	ldrb	r3, [r7, #7]
    e322:	683a      	ldr	r2, [r7, #0]
    e324:	4619      	mov	r1, r3
    e326:	4803      	ldr	r0, [pc, #12]	; (e334 <_gpio_set_level+0x38>)
    e328:	4b04      	ldr	r3, [pc, #16]	; (e33c <_gpio_set_level+0x40>)
    e32a:	4798      	blx	r3
}
    e32c:	bf00      	nop
    e32e:	3708      	adds	r7, #8
    e330:	46bd      	mov	sp, r7
    e332:	bd80      	pop	{r7, pc}
    e334:	41008000 	.word	0x41008000
    e338:	0000e083 	.word	0x0000e083
    e33c:	0000e0ab 	.word	0x0000e0ab

0000e340 <_gpio_set_pin_function>:
{
    e340:	b590      	push	{r4, r7, lr}
    e342:	b085      	sub	sp, #20
    e344:	af00      	add	r7, sp, #0
    e346:	6078      	str	r0, [r7, #4]
    e348:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    e34a:	687b      	ldr	r3, [r7, #4]
    e34c:	095b      	lsrs	r3, r3, #5
    e34e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    e350:	687b      	ldr	r3, [r7, #4]
    e352:	b2db      	uxtb	r3, r3
    e354:	f003 031f 	and.w	r3, r3, #31
    e358:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    e35a:	683b      	ldr	r3, [r7, #0]
    e35c:	f1b3 3fff 	cmp.w	r3, #4294967295
    e360:	d106      	bne.n	e370 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    e362:	7bba      	ldrb	r2, [r7, #14]
    e364:	7bf9      	ldrb	r1, [r7, #15]
    e366:	2300      	movs	r3, #0
    e368:	4812      	ldr	r0, [pc, #72]	; (e3b4 <_gpio_set_pin_function+0x74>)
    e36a:	4c13      	ldr	r4, [pc, #76]	; (e3b8 <_gpio_set_pin_function+0x78>)
    e36c:	47a0      	blx	r4
}
    e36e:	e01d      	b.n	e3ac <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    e370:	7bba      	ldrb	r2, [r7, #14]
    e372:	7bf9      	ldrb	r1, [r7, #15]
    e374:	2301      	movs	r3, #1
    e376:	480f      	ldr	r0, [pc, #60]	; (e3b4 <_gpio_set_pin_function+0x74>)
    e378:	4c0f      	ldr	r4, [pc, #60]	; (e3b8 <_gpio_set_pin_function+0x78>)
    e37a:	47a0      	blx	r4
		if (pin & 1) {
    e37c:	7bbb      	ldrb	r3, [r7, #14]
    e37e:	f003 0301 	and.w	r3, r3, #1
    e382:	2b00      	cmp	r3, #0
    e384:	d009      	beq.n	e39a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    e386:	7bbb      	ldrb	r3, [r7, #14]
    e388:	085b      	lsrs	r3, r3, #1
    e38a:	b2da      	uxtb	r2, r3
    e38c:	683b      	ldr	r3, [r7, #0]
    e38e:	b2db      	uxtb	r3, r3
    e390:	7bf9      	ldrb	r1, [r7, #15]
    e392:	4808      	ldr	r0, [pc, #32]	; (e3b4 <_gpio_set_pin_function+0x74>)
    e394:	4c09      	ldr	r4, [pc, #36]	; (e3bc <_gpio_set_pin_function+0x7c>)
    e396:	47a0      	blx	r4
}
    e398:	e008      	b.n	e3ac <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    e39a:	7bbb      	ldrb	r3, [r7, #14]
    e39c:	085b      	lsrs	r3, r3, #1
    e39e:	b2da      	uxtb	r2, r3
    e3a0:	683b      	ldr	r3, [r7, #0]
    e3a2:	b2db      	uxtb	r3, r3
    e3a4:	7bf9      	ldrb	r1, [r7, #15]
    e3a6:	4803      	ldr	r0, [pc, #12]	; (e3b4 <_gpio_set_pin_function+0x74>)
    e3a8:	4c05      	ldr	r4, [pc, #20]	; (e3c0 <_gpio_set_pin_function+0x80>)
    e3aa:	47a0      	blx	r4
}
    e3ac:	bf00      	nop
    e3ae:	3714      	adds	r7, #20
    e3b0:	46bd      	mov	sp, r7
    e3b2:	bd90      	pop	{r4, r7, pc}
    e3b4:	41008000 	.word	0x41008000
    e3b8:	0000e191 	.word	0x0000e191
    e3bc:	0000e133 	.word	0x0000e133
    e3c0:	0000e0d3 	.word	0x0000e0d3

0000e3c4 <gpio_set_pin_function>:
{
    e3c4:	b580      	push	{r7, lr}
    e3c6:	b082      	sub	sp, #8
    e3c8:	af00      	add	r7, sp, #0
    e3ca:	6078      	str	r0, [r7, #4]
    e3cc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    e3ce:	6839      	ldr	r1, [r7, #0]
    e3d0:	6878      	ldr	r0, [r7, #4]
    e3d2:	4b03      	ldr	r3, [pc, #12]	; (e3e0 <gpio_set_pin_function+0x1c>)
    e3d4:	4798      	blx	r3
}
    e3d6:	bf00      	nop
    e3d8:	3708      	adds	r7, #8
    e3da:	46bd      	mov	sp, r7
    e3dc:	bd80      	pop	{r7, pc}
    e3de:	bf00      	nop
    e3e0:	0000e341 	.word	0x0000e341

0000e3e4 <gpio_set_pin_direction>:
{
    e3e4:	b580      	push	{r7, lr}
    e3e6:	b082      	sub	sp, #8
    e3e8:	af00      	add	r7, sp, #0
    e3ea:	4603      	mov	r3, r0
    e3ec:	460a      	mov	r2, r1
    e3ee:	71fb      	strb	r3, [r7, #7]
    e3f0:	4613      	mov	r3, r2
    e3f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    e3f4:	79fb      	ldrb	r3, [r7, #7]
    e3f6:	095b      	lsrs	r3, r3, #5
    e3f8:	b2d8      	uxtb	r0, r3
    e3fa:	79fb      	ldrb	r3, [r7, #7]
    e3fc:	f003 031f 	and.w	r3, r3, #31
    e400:	2201      	movs	r2, #1
    e402:	fa02 f303 	lsl.w	r3, r2, r3
    e406:	79ba      	ldrb	r2, [r7, #6]
    e408:	4619      	mov	r1, r3
    e40a:	4b03      	ldr	r3, [pc, #12]	; (e418 <gpio_set_pin_direction+0x34>)
    e40c:	4798      	blx	r3
}
    e40e:	bf00      	nop
    e410:	3708      	adds	r7, #8
    e412:	46bd      	mov	sp, r7
    e414:	bd80      	pop	{r7, pc}
    e416:	bf00      	nop
    e418:	0000e215 	.word	0x0000e215

0000e41c <gpio_set_pin_level>:
{
    e41c:	b580      	push	{r7, lr}
    e41e:	b082      	sub	sp, #8
    e420:	af00      	add	r7, sp, #0
    e422:	4603      	mov	r3, r0
    e424:	460a      	mov	r2, r1
    e426:	71fb      	strb	r3, [r7, #7]
    e428:	4613      	mov	r3, r2
    e42a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e42c:	79fb      	ldrb	r3, [r7, #7]
    e42e:	095b      	lsrs	r3, r3, #5
    e430:	b2d8      	uxtb	r0, r3
    e432:	79fb      	ldrb	r3, [r7, #7]
    e434:	f003 031f 	and.w	r3, r3, #31
    e438:	2201      	movs	r2, #1
    e43a:	fa02 f303 	lsl.w	r3, r2, r3
    e43e:	79ba      	ldrb	r2, [r7, #6]
    e440:	4619      	mov	r1, r3
    e442:	4b03      	ldr	r3, [pc, #12]	; (e450 <gpio_set_pin_level+0x34>)
    e444:	4798      	blx	r3
}
    e446:	bf00      	nop
    e448:	3708      	adds	r7, #8
    e44a:	46bd      	mov	sp, r7
    e44c:	bd80      	pop	{r7, pc}
    e44e:	bf00      	nop
    e450:	0000e2fd 	.word	0x0000e2fd

0000e454 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    e454:	b580      	push	{r7, lr}
    e456:	b082      	sub	sp, #8
    e458:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    e45a:	2100      	movs	r1, #0
    e45c:	2008      	movs	r0, #8
    e45e:	4b24      	ldr	r3, [pc, #144]	; (e4f0 <QSPI_N25Q256_exit_xip+0x9c>)
    e460:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    e462:	2100      	movs	r1, #0
    e464:	202b      	movs	r0, #43	; 0x2b
    e466:	4b22      	ldr	r3, [pc, #136]	; (e4f0 <QSPI_N25Q256_exit_xip+0x9c>)
    e468:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    e46a:	2100      	movs	r1, #0
    e46c:	202a      	movs	r0, #42	; 0x2a
    e46e:	4b20      	ldr	r3, [pc, #128]	; (e4f0 <QSPI_N25Q256_exit_xip+0x9c>)
    e470:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    e472:	2102      	movs	r1, #2
    e474:	2008      	movs	r0, #8
    e476:	4b1f      	ldr	r3, [pc, #124]	; (e4f4 <QSPI_N25Q256_exit_xip+0xa0>)
    e478:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    e47a:	2102      	movs	r1, #2
    e47c:	202b      	movs	r0, #43	; 0x2b
    e47e:	4b1d      	ldr	r3, [pc, #116]	; (e4f4 <QSPI_N25Q256_exit_xip+0xa0>)
    e480:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    e482:	2102      	movs	r1, #2
    e484:	202a      	movs	r0, #42	; 0x2a
    e486:	4b1b      	ldr	r3, [pc, #108]	; (e4f4 <QSPI_N25Q256_exit_xip+0xa0>)
    e488:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    e48a:	2101      	movs	r1, #1
    e48c:	2008      	movs	r0, #8
    e48e:	4b1a      	ldr	r3, [pc, #104]	; (e4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    e490:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    e492:	2100      	movs	r1, #0
    e494:	202b      	movs	r0, #43	; 0x2b
    e496:	4b18      	ldr	r3, [pc, #96]	; (e4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    e498:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    e49a:	2100      	movs	r1, #0
    e49c:	202a      	movs	r0, #42	; 0x2a
    e49e:	4b16      	ldr	r3, [pc, #88]	; (e4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    e4a0:	4798      	blx	r3

	delay_us(1);
    e4a2:	2001      	movs	r0, #1
    e4a4:	4b15      	ldr	r3, [pc, #84]	; (e4fc <QSPI_N25Q256_exit_xip+0xa8>)
    e4a6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    e4a8:	2300      	movs	r3, #0
    e4aa:	607b      	str	r3, [r7, #4]
    e4ac:	e010      	b.n	e4d0 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    e4ae:	2101      	movs	r1, #1
    e4b0:	202a      	movs	r0, #42	; 0x2a
    e4b2:	4b11      	ldr	r3, [pc, #68]	; (e4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    e4b4:	4798      	blx	r3
		delay_us(1);
    e4b6:	2001      	movs	r0, #1
    e4b8:	4b10      	ldr	r3, [pc, #64]	; (e4fc <QSPI_N25Q256_exit_xip+0xa8>)
    e4ba:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    e4bc:	2100      	movs	r1, #0
    e4be:	202a      	movs	r0, #42	; 0x2a
    e4c0:	4b0d      	ldr	r3, [pc, #52]	; (e4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    e4c2:	4798      	blx	r3
		delay_us(1);
    e4c4:	2001      	movs	r0, #1
    e4c6:	4b0d      	ldr	r3, [pc, #52]	; (e4fc <QSPI_N25Q256_exit_xip+0xa8>)
    e4c8:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    e4ca:	687b      	ldr	r3, [r7, #4]
    e4cc:	3301      	adds	r3, #1
    e4ce:	607b      	str	r3, [r7, #4]
    e4d0:	687b      	ldr	r3, [r7, #4]
    e4d2:	2b06      	cmp	r3, #6
    e4d4:	ddeb      	ble.n	e4ae <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    e4d6:	2101      	movs	r1, #1
    e4d8:	202b      	movs	r0, #43	; 0x2b
    e4da:	4b07      	ldr	r3, [pc, #28]	; (e4f8 <QSPI_N25Q256_exit_xip+0xa4>)
    e4dc:	4798      	blx	r3
	delay_us(1);
    e4de:	2001      	movs	r0, #1
    e4e0:	4b06      	ldr	r3, [pc, #24]	; (e4fc <QSPI_N25Q256_exit_xip+0xa8>)
    e4e2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    e4e4:	4b06      	ldr	r3, [pc, #24]	; (e500 <QSPI_N25Q256_exit_xip+0xac>)
    e4e6:	4798      	blx	r3
}
    e4e8:	bf00      	nop
    e4ea:	3708      	adds	r7, #8
    e4ec:	46bd      	mov	sp, r7
    e4ee:	bd80      	pop	{r7, pc}
    e4f0:	0000e3c5 	.word	0x0000e3c5
    e4f4:	0000e3e5 	.word	0x0000e3e5
    e4f8:	0000e41d 	.word	0x0000e41d
    e4fc:	0000434d 	.word	0x0000434d
    e500:	00003425 	.word	0x00003425

0000e504 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    e504:	b598      	push	{r3, r4, r7, lr}
    e506:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    e508:	4806      	ldr	r0, [pc, #24]	; (e524 <spi_nor_flash_init+0x20>)
    e50a:	4b07      	ldr	r3, [pc, #28]	; (e528 <spi_nor_flash_init+0x24>)
    e50c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    e50e:	2300      	movs	r3, #0
    e510:	4a06      	ldr	r2, [pc, #24]	; (e52c <spi_nor_flash_init+0x28>)
    e512:	4904      	ldr	r1, [pc, #16]	; (e524 <spi_nor_flash_init+0x20>)
    e514:	4806      	ldr	r0, [pc, #24]	; (e530 <spi_nor_flash_init+0x2c>)
    e516:	4c07      	ldr	r4, [pc, #28]	; (e534 <spi_nor_flash_init+0x30>)
    e518:	47a0      	blx	r4
    e51a:	4602      	mov	r2, r0
    e51c:	4b06      	ldr	r3, [pc, #24]	; (e538 <spi_nor_flash_init+0x34>)
    e51e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    e520:	bf00      	nop
    e522:	bd98      	pop	{r3, r4, r7, pc}
    e524:	20002714 	.word	0x20002714
    e528:	00004abd 	.word	0x00004abd
    e52c:	0000e455 	.word	0x0000e455
    e530:	200025ac 	.word	0x200025ac
    e534:	0000db31 	.word	0x0000db31
    e538:	20002940 	.word	0x20002940

0000e53c <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    e53c:	b480      	push	{r7}
    e53e:	b083      	sub	sp, #12
    e540:	af00      	add	r7, sp, #0
    e542:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e544:	687b      	ldr	r3, [r7, #4]
    e546:	781b      	ldrb	r3, [r3, #0]
    e548:	b29a      	uxth	r2, r3
    e54a:	687b      	ldr	r3, [r7, #4]
    e54c:	3301      	adds	r3, #1
    e54e:	781b      	ldrb	r3, [r3, #0]
    e550:	b29b      	uxth	r3, r3
    e552:	021b      	lsls	r3, r3, #8
    e554:	b29b      	uxth	r3, r3
    e556:	4413      	add	r3, r2
    e558:	b29b      	uxth	r3, r3
}
    e55a:	4618      	mov	r0, r3
    e55c:	370c      	adds	r7, #12
    e55e:	46bd      	mov	sp, r7
    e560:	f85d 7b04 	ldr.w	r7, [sp], #4
    e564:	4770      	bx	lr

0000e566 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    e566:	b480      	push	{r7}
    e568:	b083      	sub	sp, #12
    e56a:	af00      	add	r7, sp, #0
    e56c:	6078      	str	r0, [r7, #4]
	return desc[0];
    e56e:	687b      	ldr	r3, [r7, #4]
    e570:	781b      	ldrb	r3, [r3, #0]
}
    e572:	4618      	mov	r0, r3
    e574:	370c      	adds	r7, #12
    e576:	46bd      	mov	sp, r7
    e578:	f85d 7b04 	ldr.w	r7, [sp], #4
    e57c:	4770      	bx	lr
	...

0000e580 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    e580:	b580      	push	{r7, lr}
    e582:	b082      	sub	sp, #8
    e584:	af00      	add	r7, sp, #0
    e586:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e588:	6878      	ldr	r0, [r7, #4]
    e58a:	4b05      	ldr	r3, [pc, #20]	; (e5a0 <usb_desc_next+0x20>)
    e58c:	4798      	blx	r3
    e58e:	4603      	mov	r3, r0
    e590:	461a      	mov	r2, r3
    e592:	687b      	ldr	r3, [r7, #4]
    e594:	4413      	add	r3, r2
}
    e596:	4618      	mov	r0, r3
    e598:	3708      	adds	r7, #8
    e59a:	46bd      	mov	sp, r7
    e59c:	bd80      	pop	{r7, pc}
    e59e:	bf00      	nop
    e5a0:	0000e567 	.word	0x0000e567

0000e5a4 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    e5a4:	b580      	push	{r7, lr}
    e5a6:	b08c      	sub	sp, #48	; 0x30
    e5a8:	af00      	add	r7, sp, #0
    e5aa:	6078      	str	r0, [r7, #4]
    e5ac:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e5ae:	687b      	ldr	r3, [r7, #4]
    e5b0:	689b      	ldr	r3, [r3, #8]
    e5b2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    e5b4:	683b      	ldr	r3, [r7, #0]
    e5b6:	681b      	ldr	r3, [r3, #0]
    e5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    e5ba:	2300      	movs	r3, #0
    e5bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    e5c0:	e08f      	b.n	e6e2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5c4:	2b00      	cmp	r3, #0
    e5c6:	d102      	bne.n	e5ce <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    e5c8:	f06f 0309 	mvn.w	r3, #9
    e5cc:	e092      	b.n	e6f4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    e5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5d0:	789b      	ldrb	r3, [r3, #2]
    e5d2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    e5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5d6:	795b      	ldrb	r3, [r3, #5]
    e5d8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    e5da:	7c7b      	ldrb	r3, [r7, #17]
    e5dc:	2b02      	cmp	r3, #2
    e5de:	d002      	beq.n	e5e6 <cdcdf_acm_enable+0x42>
    e5e0:	7c7b      	ldrb	r3, [r7, #17]
    e5e2:	2b0a      	cmp	r3, #10
    e5e4:	d121      	bne.n	e62a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    e5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e5ea:	6a3a      	ldr	r2, [r7, #32]
    e5ec:	5cd2      	ldrb	r2, [r2, r3]
    e5ee:	7bbb      	ldrb	r3, [r7, #14]
    e5f0:	429a      	cmp	r2, r3
    e5f2:	d102      	bne.n	e5fa <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    e5f4:	f06f 0311 	mvn.w	r3, #17
    e5f8:	e07c      	b.n	e6f4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    e5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e5fe:	6a3a      	ldr	r2, [r7, #32]
    e600:	5cd3      	ldrb	r3, [r2, r3]
    e602:	2bff      	cmp	r3, #255	; 0xff
    e604:	d002      	beq.n	e60c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    e606:	f06f 031b 	mvn.w	r3, #27
    e60a:	e073      	b.n	e6f4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    e60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e610:	7bb9      	ldrb	r1, [r7, #14]
    e612:	6a3a      	ldr	r2, [r7, #32]
    e614:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    e616:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    e618:	683b      	ldr	r3, [r7, #0]
    e61a:	685b      	ldr	r3, [r3, #4]
    e61c:	2205      	movs	r2, #5
    e61e:	4619      	mov	r1, r3
    e620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e622:	4b36      	ldr	r3, [pc, #216]	; (e6fc <cdcdf_acm_enable+0x158>)
    e624:	4798      	blx	r3
    e626:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    e628:	e047      	b.n	e6ba <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    e62a:	f06f 0309 	mvn.w	r3, #9
    e62e:	e061      	b.n	e6f4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    e630:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e632:	789b      	ldrb	r3, [r3, #2]
    e634:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    e636:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e638:	78db      	ldrb	r3, [r3, #3]
    e63a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e63e:	3304      	adds	r3, #4
    e640:	4618      	mov	r0, r3
    e642:	4b2f      	ldr	r3, [pc, #188]	; (e700 <cdcdf_acm_enable+0x15c>)
    e644:	4798      	blx	r3
    e646:	4603      	mov	r3, r0
    e648:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    e64a:	7ebb      	ldrb	r3, [r7, #26]
    e64c:	7ef9      	ldrb	r1, [r7, #27]
    e64e:	8bba      	ldrh	r2, [r7, #28]
    e650:	4618      	mov	r0, r3
    e652:	4b2c      	ldr	r3, [pc, #176]	; (e704 <cdcdf_acm_enable+0x160>)
    e654:	4798      	blx	r3
    e656:	4603      	mov	r3, r0
    e658:	2b00      	cmp	r3, #0
    e65a:	d002      	beq.n	e662 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    e65c:	f06f 0313 	mvn.w	r3, #19
    e660:	e048      	b.n	e6f4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    e662:	7ebb      	ldrb	r3, [r7, #26]
    e664:	b25b      	sxtb	r3, r3
    e666:	2b00      	cmp	r3, #0
    e668:	da0f      	bge.n	e68a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    e66a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e66e:	7eb9      	ldrb	r1, [r7, #26]
    e670:	6a3a      	ldr	r2, [r7, #32]
    e672:	4413      	add	r3, r2
    e674:	460a      	mov	r2, r1
    e676:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    e678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e67c:	6a3a      	ldr	r2, [r7, #32]
    e67e:	4413      	add	r3, r2
    e680:	789b      	ldrb	r3, [r3, #2]
    e682:	4618      	mov	r0, r3
    e684:	4b20      	ldr	r3, [pc, #128]	; (e708 <cdcdf_acm_enable+0x164>)
    e686:	4798      	blx	r3
    e688:	e007      	b.n	e69a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    e68a:	7eba      	ldrb	r2, [r7, #26]
    e68c:	6a3b      	ldr	r3, [r7, #32]
    e68e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    e690:	6a3b      	ldr	r3, [r7, #32]
    e692:	791b      	ldrb	r3, [r3, #4]
    e694:	4618      	mov	r0, r3
    e696:	4b1c      	ldr	r3, [pc, #112]	; (e708 <cdcdf_acm_enable+0x164>)
    e698:	4798      	blx	r3
			}
			desc->sod = ep;
    e69a:	683b      	ldr	r3, [r7, #0]
    e69c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e69e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    e6a0:	683b      	ldr	r3, [r7, #0]
    e6a2:	681b      	ldr	r3, [r3, #0]
    e6a4:	4618      	mov	r0, r3
    e6a6:	4b19      	ldr	r3, [pc, #100]	; (e70c <cdcdf_acm_enable+0x168>)
    e6a8:	4798      	blx	r3
    e6aa:	4602      	mov	r2, r0
    e6ac:	683b      	ldr	r3, [r7, #0]
    e6ae:	685b      	ldr	r3, [r3, #4]
    e6b0:	4619      	mov	r1, r3
    e6b2:	4610      	mov	r0, r2
    e6b4:	4b16      	ldr	r3, [pc, #88]	; (e710 <cdcdf_acm_enable+0x16c>)
    e6b6:	4798      	blx	r3
    e6b8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d1b7      	bne.n	e630 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    e6c0:	683b      	ldr	r3, [r7, #0]
    e6c2:	681b      	ldr	r3, [r3, #0]
    e6c4:	4618      	mov	r0, r3
    e6c6:	4b11      	ldr	r3, [pc, #68]	; (e70c <cdcdf_acm_enable+0x168>)
    e6c8:	4798      	blx	r3
    e6ca:	683b      	ldr	r3, [r7, #0]
    e6cc:	685b      	ldr	r3, [r3, #4]
    e6ce:	2204      	movs	r2, #4
    e6d0:	4619      	mov	r1, r3
    e6d2:	4b0a      	ldr	r3, [pc, #40]	; (e6fc <cdcdf_acm_enable+0x158>)
    e6d4:	4798      	blx	r3
    e6d6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    e6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e6dc:	3301      	adds	r3, #1
    e6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    e6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e6e6:	2b01      	cmp	r3, #1
    e6e8:	f67f af6b 	bls.w	e5c2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    e6ec:	4b09      	ldr	r3, [pc, #36]	; (e714 <cdcdf_acm_enable+0x170>)
    e6ee:	2201      	movs	r2, #1
    e6f0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e6f2:	2300      	movs	r3, #0
}
    e6f4:	4618      	mov	r0, r3
    e6f6:	3730      	adds	r7, #48	; 0x30
    e6f8:	46bd      	mov	sp, r7
    e6fa:	bd80      	pop	{r7, pc}
    e6fc:	0000f965 	.word	0x0000f965
    e700:	0000e53d 	.word	0x0000e53d
    e704:	00005a69 	.word	0x00005a69
    e708:	00005b55 	.word	0x00005b55
    e70c:	0000e581 	.word	0x0000e581
    e710:	0000f9c1 	.word	0x0000f9c1
    e714:	200025c8 	.word	0x200025c8

0000e718 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    e718:	b580      	push	{r7, lr}
    e71a:	b088      	sub	sp, #32
    e71c:	af00      	add	r7, sp, #0
    e71e:	6078      	str	r0, [r7, #4]
    e720:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e722:	687b      	ldr	r3, [r7, #4]
    e724:	689b      	ldr	r3, [r3, #8]
    e726:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    e728:	683b      	ldr	r3, [r7, #0]
    e72a:	2b00      	cmp	r3, #0
    e72c:	d00c      	beq.n	e748 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    e72e:	683b      	ldr	r3, [r7, #0]
    e730:	681b      	ldr	r3, [r3, #0]
    e732:	795b      	ldrb	r3, [r3, #5]
    e734:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    e736:	7c7b      	ldrb	r3, [r7, #17]
    e738:	2b02      	cmp	r3, #2
    e73a:	d005      	beq.n	e748 <cdcdf_acm_disable+0x30>
    e73c:	7c7b      	ldrb	r3, [r7, #17]
    e73e:	2b0a      	cmp	r3, #10
    e740:	d002      	beq.n	e748 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    e742:	f06f 0309 	mvn.w	r3, #9
    e746:	e035      	b.n	e7b4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    e748:	2300      	movs	r3, #0
    e74a:	77fb      	strb	r3, [r7, #31]
    e74c:	e01f      	b.n	e78e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    e74e:	7ffb      	ldrb	r3, [r7, #31]
    e750:	69ba      	ldr	r2, [r7, #24]
    e752:	5cd3      	ldrb	r3, [r2, r3]
    e754:	2bff      	cmp	r3, #255	; 0xff
    e756:	d016      	beq.n	e786 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    e758:	7ffb      	ldrb	r3, [r7, #31]
    e75a:	69ba      	ldr	r2, [r7, #24]
    e75c:	21ff      	movs	r1, #255	; 0xff
    e75e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    e760:	7ffb      	ldrb	r3, [r7, #31]
    e762:	69ba      	ldr	r2, [r7, #24]
    e764:	4413      	add	r3, r2
    e766:	789b      	ldrb	r3, [r3, #2]
    e768:	2bff      	cmp	r3, #255	; 0xff
    e76a:	d00d      	beq.n	e788 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    e76c:	7ffb      	ldrb	r3, [r7, #31]
    e76e:	69ba      	ldr	r2, [r7, #24]
    e770:	4413      	add	r3, r2
    e772:	789b      	ldrb	r3, [r3, #2]
    e774:	4618      	mov	r0, r3
    e776:	4b11      	ldr	r3, [pc, #68]	; (e7bc <cdcdf_acm_disable+0xa4>)
    e778:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    e77a:	7ffb      	ldrb	r3, [r7, #31]
    e77c:	69ba      	ldr	r2, [r7, #24]
    e77e:	4413      	add	r3, r2
    e780:	22ff      	movs	r2, #255	; 0xff
    e782:	709a      	strb	r2, [r3, #2]
    e784:	e000      	b.n	e788 <cdcdf_acm_disable+0x70>
			continue;
    e786:	bf00      	nop
	for (i = 0; i < 2; i++) {
    e788:	7ffb      	ldrb	r3, [r7, #31]
    e78a:	3301      	adds	r3, #1
    e78c:	77fb      	strb	r3, [r7, #31]
    e78e:	7ffb      	ldrb	r3, [r7, #31]
    e790:	2b01      	cmp	r3, #1
    e792:	d9dc      	bls.n	e74e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    e794:	69bb      	ldr	r3, [r7, #24]
    e796:	791b      	ldrb	r3, [r3, #4]
    e798:	2bff      	cmp	r3, #255	; 0xff
    e79a:	d007      	beq.n	e7ac <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    e79c:	69bb      	ldr	r3, [r7, #24]
    e79e:	791b      	ldrb	r3, [r3, #4]
    e7a0:	4618      	mov	r0, r3
    e7a2:	4b06      	ldr	r3, [pc, #24]	; (e7bc <cdcdf_acm_disable+0xa4>)
    e7a4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    e7a6:	69bb      	ldr	r3, [r7, #24]
    e7a8:	22ff      	movs	r2, #255	; 0xff
    e7aa:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    e7ac:	4b04      	ldr	r3, [pc, #16]	; (e7c0 <cdcdf_acm_disable+0xa8>)
    e7ae:	2200      	movs	r2, #0
    e7b0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e7b2:	2300      	movs	r3, #0
}
    e7b4:	4618      	mov	r0, r3
    e7b6:	3720      	adds	r7, #32
    e7b8:	46bd      	mov	sp, r7
    e7ba:	bd80      	pop	{r7, pc}
    e7bc:	00005b05 	.word	0x00005b05
    e7c0:	200025c8 	.word	0x200025c8

0000e7c4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    e7c4:	b580      	push	{r7, lr}
    e7c6:	b084      	sub	sp, #16
    e7c8:	af00      	add	r7, sp, #0
    e7ca:	60f8      	str	r0, [r7, #12]
    e7cc:	460b      	mov	r3, r1
    e7ce:	607a      	str	r2, [r7, #4]
    e7d0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    e7d2:	7afb      	ldrb	r3, [r7, #11]
    e7d4:	2b01      	cmp	r3, #1
    e7d6:	d009      	beq.n	e7ec <cdcdf_acm_ctrl+0x28>
    e7d8:	2b02      	cmp	r3, #2
    e7da:	d00d      	beq.n	e7f8 <cdcdf_acm_ctrl+0x34>
    e7dc:	2b00      	cmp	r3, #0
    e7de:	d10e      	bne.n	e7fe <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    e7e0:	6879      	ldr	r1, [r7, #4]
    e7e2:	68f8      	ldr	r0, [r7, #12]
    e7e4:	4b09      	ldr	r3, [pc, #36]	; (e80c <cdcdf_acm_ctrl+0x48>)
    e7e6:	4798      	blx	r3
    e7e8:	4603      	mov	r3, r0
    e7ea:	e00a      	b.n	e802 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    e7ec:	6879      	ldr	r1, [r7, #4]
    e7ee:	68f8      	ldr	r0, [r7, #12]
    e7f0:	4b07      	ldr	r3, [pc, #28]	; (e810 <cdcdf_acm_ctrl+0x4c>)
    e7f2:	4798      	blx	r3
    e7f4:	4603      	mov	r3, r0
    e7f6:	e004      	b.n	e802 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    e7f8:	f06f 031a 	mvn.w	r3, #26
    e7fc:	e001      	b.n	e802 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    e7fe:	f06f 030c 	mvn.w	r3, #12
	}
}
    e802:	4618      	mov	r0, r3
    e804:	3710      	adds	r7, #16
    e806:	46bd      	mov	sp, r7
    e808:	bd80      	pop	{r7, pc}
    e80a:	bf00      	nop
    e80c:	0000e5a5 	.word	0x0000e5a5
    e810:	0000e719 	.word	0x0000e719

0000e814 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e814:	b590      	push	{r4, r7, lr}
    e816:	b087      	sub	sp, #28
    e818:	af00      	add	r7, sp, #0
    e81a:	4603      	mov	r3, r0
    e81c:	6039      	str	r1, [r7, #0]
    e81e:	71fb      	strb	r3, [r7, #7]
    e820:	4613      	mov	r3, r2
    e822:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    e824:	683b      	ldr	r3, [r7, #0]
    e826:	799a      	ldrb	r2, [r3, #6]
    e828:	79db      	ldrb	r3, [r3, #7]
    e82a:	021b      	lsls	r3, r3, #8
    e82c:	4313      	orrs	r3, r2
    e82e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    e830:	4b2b      	ldr	r3, [pc, #172]	; (e8e0 <cdcdf_acm_set_req+0xcc>)
    e832:	4798      	blx	r3
    e834:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    e836:	683b      	ldr	r3, [r7, #0]
    e838:	785b      	ldrb	r3, [r3, #1]
    e83a:	2b20      	cmp	r3, #32
    e83c:	d002      	beq.n	e844 <cdcdf_acm_set_req+0x30>
    e83e:	2b22      	cmp	r3, #34	; 0x22
    e840:	d034      	beq.n	e8ac <cdcdf_acm_set_req+0x98>
    e842:	e046      	b.n	e8d2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e844:	8afb      	ldrh	r3, [r7, #22]
    e846:	2b07      	cmp	r3, #7
    e848:	d002      	beq.n	e850 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    e84a:	f04f 33ff 	mov.w	r3, #4294967295
    e84e:	e042      	b.n	e8d6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    e850:	79bb      	ldrb	r3, [r7, #6]
    e852:	2b00      	cmp	r3, #0
    e854:	d107      	bne.n	e866 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    e856:	8afa      	ldrh	r2, [r7, #22]
    e858:	79f8      	ldrb	r0, [r7, #7]
    e85a:	2300      	movs	r3, #0
    e85c:	6939      	ldr	r1, [r7, #16]
    e85e:	4c21      	ldr	r4, [pc, #132]	; (e8e4 <cdcdf_acm_set_req+0xd0>)
    e860:	47a0      	blx	r4
    e862:	4603      	mov	r3, r0
    e864:	e037      	b.n	e8d6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    e866:	693a      	ldr	r2, [r7, #16]
    e868:	f107 0308 	add.w	r3, r7, #8
    e86c:	6810      	ldr	r0, [r2, #0]
    e86e:	6018      	str	r0, [r3, #0]
    e870:	8891      	ldrh	r1, [r2, #4]
    e872:	7992      	ldrb	r2, [r2, #6]
    e874:	8099      	strh	r1, [r3, #4]
    e876:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    e878:	4b1b      	ldr	r3, [pc, #108]	; (e8e8 <cdcdf_acm_set_req+0xd4>)
    e87a:	681b      	ldr	r3, [r3, #0]
    e87c:	2b00      	cmp	r3, #0
    e87e:	d008      	beq.n	e892 <cdcdf_acm_set_req+0x7e>
    e880:	4b19      	ldr	r3, [pc, #100]	; (e8e8 <cdcdf_acm_set_req+0xd4>)
    e882:	681b      	ldr	r3, [r3, #0]
    e884:	f107 0208 	add.w	r2, r7, #8
    e888:	4610      	mov	r0, r2
    e88a:	4798      	blx	r3
    e88c:	4603      	mov	r3, r0
    e88e:	2b00      	cmp	r3, #0
    e890:	d00a      	beq.n	e8a8 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    e892:	4b16      	ldr	r3, [pc, #88]	; (e8ec <cdcdf_acm_set_req+0xd8>)
    e894:	f107 0208 	add.w	r2, r7, #8
    e898:	e892 0003 	ldmia.w	r2, {r0, r1}
    e89c:	6018      	str	r0, [r3, #0]
    e89e:	3304      	adds	r3, #4
    e8a0:	8019      	strh	r1, [r3, #0]
    e8a2:	3302      	adds	r3, #2
    e8a4:	0c0a      	lsrs	r2, r1, #16
    e8a6:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    e8a8:	2300      	movs	r3, #0
    e8aa:	e014      	b.n	e8d6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    e8ac:	2300      	movs	r3, #0
    e8ae:	2200      	movs	r2, #0
    e8b0:	2100      	movs	r1, #0
    e8b2:	2000      	movs	r0, #0
    e8b4:	4c0b      	ldr	r4, [pc, #44]	; (e8e4 <cdcdf_acm_set_req+0xd0>)
    e8b6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    e8b8:	4b0d      	ldr	r3, [pc, #52]	; (e8f0 <cdcdf_acm_set_req+0xdc>)
    e8ba:	681b      	ldr	r3, [r3, #0]
    e8bc:	2b00      	cmp	r3, #0
    e8be:	d006      	beq.n	e8ce <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    e8c0:	4b0b      	ldr	r3, [pc, #44]	; (e8f0 <cdcdf_acm_set_req+0xdc>)
    e8c2:	681b      	ldr	r3, [r3, #0]
    e8c4:	683a      	ldr	r2, [r7, #0]
    e8c6:	8852      	ldrh	r2, [r2, #2]
    e8c8:	b292      	uxth	r2, r2
    e8ca:	4610      	mov	r0, r2
    e8cc:	4798      	blx	r3
		}
		return ERR_NONE;
    e8ce:	2300      	movs	r3, #0
    e8d0:	e001      	b.n	e8d6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    e8d2:	f06f 030c 	mvn.w	r3, #12
	}
}
    e8d6:	4618      	mov	r0, r3
    e8d8:	371c      	adds	r7, #28
    e8da:	46bd      	mov	sp, r7
    e8dc:	bd90      	pop	{r4, r7, pc}
    e8de:	bf00      	nop
    e8e0:	0000f861 	.word	0x0000f861
    e8e4:	0000f6d5 	.word	0x0000f6d5
    e8e8:	200025dc 	.word	0x200025dc
    e8ec:	200025d0 	.word	0x200025d0
    e8f0:	200025d8 	.word	0x200025d8

0000e8f4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e8f4:	b590      	push	{r4, r7, lr}
    e8f6:	b085      	sub	sp, #20
    e8f8:	af00      	add	r7, sp, #0
    e8fa:	4603      	mov	r3, r0
    e8fc:	6039      	str	r1, [r7, #0]
    e8fe:	71fb      	strb	r3, [r7, #7]
    e900:	4613      	mov	r3, r2
    e902:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    e904:	683b      	ldr	r3, [r7, #0]
    e906:	799a      	ldrb	r2, [r3, #6]
    e908:	79db      	ldrb	r3, [r3, #7]
    e90a:	021b      	lsls	r3, r3, #8
    e90c:	4313      	orrs	r3, r2
    e90e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    e910:	79bb      	ldrb	r3, [r7, #6]
    e912:	2b01      	cmp	r3, #1
    e914:	d101      	bne.n	e91a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    e916:	2300      	movs	r3, #0
    e918:	e013      	b.n	e942 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    e91a:	683b      	ldr	r3, [r7, #0]
    e91c:	785b      	ldrb	r3, [r3, #1]
    e91e:	2b21      	cmp	r3, #33	; 0x21
    e920:	d10d      	bne.n	e93e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e922:	89fb      	ldrh	r3, [r7, #14]
    e924:	2b07      	cmp	r3, #7
    e926:	d002      	beq.n	e92e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    e928:	f04f 33ff 	mov.w	r3, #4294967295
    e92c:	e009      	b.n	e942 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    e92e:	89fa      	ldrh	r2, [r7, #14]
    e930:	79f8      	ldrb	r0, [r7, #7]
    e932:	2300      	movs	r3, #0
    e934:	4905      	ldr	r1, [pc, #20]	; (e94c <cdcdf_acm_get_req+0x58>)
    e936:	4c06      	ldr	r4, [pc, #24]	; (e950 <cdcdf_acm_get_req+0x5c>)
    e938:	47a0      	blx	r4
    e93a:	4603      	mov	r3, r0
    e93c:	e001      	b.n	e942 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    e93e:	f06f 030c 	mvn.w	r3, #12
	}
}
    e942:	4618      	mov	r0, r3
    e944:	3714      	adds	r7, #20
    e946:	46bd      	mov	sp, r7
    e948:	bd90      	pop	{r4, r7, pc}
    e94a:	bf00      	nop
    e94c:	200025d0 	.word	0x200025d0
    e950:	0000f6d5 	.word	0x0000f6d5

0000e954 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e954:	b580      	push	{r7, lr}
    e956:	b082      	sub	sp, #8
    e958:	af00      	add	r7, sp, #0
    e95a:	4603      	mov	r3, r0
    e95c:	6039      	str	r1, [r7, #0]
    e95e:	71fb      	strb	r3, [r7, #7]
    e960:	4613      	mov	r3, r2
    e962:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    e964:	683b      	ldr	r3, [r7, #0]
    e966:	781b      	ldrb	r3, [r3, #0]
    e968:	095b      	lsrs	r3, r3, #5
    e96a:	b2db      	uxtb	r3, r3
    e96c:	f003 0303 	and.w	r3, r3, #3
    e970:	2b01      	cmp	r3, #1
    e972:	d002      	beq.n	e97a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    e974:	f06f 0309 	mvn.w	r3, #9
    e978:	e026      	b.n	e9c8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    e97a:	683b      	ldr	r3, [r7, #0]
    e97c:	889b      	ldrh	r3, [r3, #4]
    e97e:	b29a      	uxth	r2, r3
    e980:	4b13      	ldr	r3, [pc, #76]	; (e9d0 <cdcdf_acm_req+0x7c>)
    e982:	781b      	ldrb	r3, [r3, #0]
    e984:	b29b      	uxth	r3, r3
    e986:	429a      	cmp	r2, r3
    e988:	d007      	beq.n	e99a <cdcdf_acm_req+0x46>
    e98a:	683b      	ldr	r3, [r7, #0]
    e98c:	889b      	ldrh	r3, [r3, #4]
    e98e:	b29a      	uxth	r2, r3
    e990:	4b0f      	ldr	r3, [pc, #60]	; (e9d0 <cdcdf_acm_req+0x7c>)
    e992:	785b      	ldrb	r3, [r3, #1]
    e994:	b29b      	uxth	r3, r3
    e996:	429a      	cmp	r2, r3
    e998:	d114      	bne.n	e9c4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    e99a:	683b      	ldr	r3, [r7, #0]
    e99c:	781b      	ldrb	r3, [r3, #0]
    e99e:	b25b      	sxtb	r3, r3
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	da07      	bge.n	e9b4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    e9a4:	79ba      	ldrb	r2, [r7, #6]
    e9a6:	79fb      	ldrb	r3, [r7, #7]
    e9a8:	6839      	ldr	r1, [r7, #0]
    e9aa:	4618      	mov	r0, r3
    e9ac:	4b09      	ldr	r3, [pc, #36]	; (e9d4 <cdcdf_acm_req+0x80>)
    e9ae:	4798      	blx	r3
    e9b0:	4603      	mov	r3, r0
    e9b2:	e009      	b.n	e9c8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    e9b4:	79ba      	ldrb	r2, [r7, #6]
    e9b6:	79fb      	ldrb	r3, [r7, #7]
    e9b8:	6839      	ldr	r1, [r7, #0]
    e9ba:	4618      	mov	r0, r3
    e9bc:	4b06      	ldr	r3, [pc, #24]	; (e9d8 <cdcdf_acm_req+0x84>)
    e9be:	4798      	blx	r3
    e9c0:	4603      	mov	r3, r0
    e9c2:	e001      	b.n	e9c8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    e9c4:	f06f 0309 	mvn.w	r3, #9
	}
}
    e9c8:	4618      	mov	r0, r3
    e9ca:	3708      	adds	r7, #8
    e9cc:	46bd      	mov	sp, r7
    e9ce:	bd80      	pop	{r7, pc}
    e9d0:	200025c8 	.word	0x200025c8
    e9d4:	0000e8f5 	.word	0x0000e8f5
    e9d8:	0000e815 	.word	0x0000e815

0000e9dc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    e9dc:	b580      	push	{r7, lr}
    e9de:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    e9e0:	4b0b      	ldr	r3, [pc, #44]	; (ea10 <cdcdf_acm_init+0x34>)
    e9e2:	4798      	blx	r3
    e9e4:	4603      	mov	r3, r0
    e9e6:	2b01      	cmp	r3, #1
    e9e8:	d902      	bls.n	e9f0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    e9ea:	f06f 0310 	mvn.w	r3, #16
    e9ee:	e00d      	b.n	ea0c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    e9f0:	4b08      	ldr	r3, [pc, #32]	; (ea14 <cdcdf_acm_init+0x38>)
    e9f2:	4a09      	ldr	r2, [pc, #36]	; (ea18 <cdcdf_acm_init+0x3c>)
    e9f4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    e9f6:	4b07      	ldr	r3, [pc, #28]	; (ea14 <cdcdf_acm_init+0x38>)
    e9f8:	4a08      	ldr	r2, [pc, #32]	; (ea1c <cdcdf_acm_init+0x40>)
    e9fa:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    e9fc:	4805      	ldr	r0, [pc, #20]	; (ea14 <cdcdf_acm_init+0x38>)
    e9fe:	4b08      	ldr	r3, [pc, #32]	; (ea20 <cdcdf_acm_init+0x44>)
    ea00:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    ea02:	4908      	ldr	r1, [pc, #32]	; (ea24 <cdcdf_acm_init+0x48>)
    ea04:	2001      	movs	r0, #1
    ea06:	4b08      	ldr	r3, [pc, #32]	; (ea28 <cdcdf_acm_init+0x4c>)
    ea08:	4798      	blx	r3
	return ERR_NONE;
    ea0a:	2300      	movs	r3, #0
}
    ea0c:	4618      	mov	r0, r3
    ea0e:	bd80      	pop	{r7, pc}
    ea10:	0000f879 	.word	0x0000f879
    ea14:	200025bc 	.word	0x200025bc
    ea18:	0000e7c5 	.word	0x0000e7c5
    ea1c:	200025c8 	.word	0x200025c8
    ea20:	0000f7e1 	.word	0x0000f7e1
    ea24:	200000ec 	.word	0x200000ec
    ea28:	0000f711 	.word	0x0000f711

0000ea2c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    ea2c:	b590      	push	{r4, r7, lr}
    ea2e:	b083      	sub	sp, #12
    ea30:	af00      	add	r7, sp, #0
    ea32:	6078      	str	r0, [r7, #4]
    ea34:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ea36:	4b0b      	ldr	r3, [pc, #44]	; (ea64 <cdcdf_acm_read+0x38>)
    ea38:	4798      	blx	r3
    ea3a:	4603      	mov	r3, r0
    ea3c:	f083 0301 	eor.w	r3, r3, #1
    ea40:	b2db      	uxtb	r3, r3
    ea42:	2b00      	cmp	r3, #0
    ea44:	d002      	beq.n	ea4c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    ea46:	f06f 0310 	mvn.w	r3, #16
    ea4a:	e007      	b.n	ea5c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ea4c:	4b06      	ldr	r3, [pc, #24]	; (ea68 <cdcdf_acm_read+0x3c>)
    ea4e:	7918      	ldrb	r0, [r3, #4]
    ea50:	2300      	movs	r3, #0
    ea52:	683a      	ldr	r2, [r7, #0]
    ea54:	6879      	ldr	r1, [r7, #4]
    ea56:	4c05      	ldr	r4, [pc, #20]	; (ea6c <cdcdf_acm_read+0x40>)
    ea58:	47a0      	blx	r4
    ea5a:	4603      	mov	r3, r0
}
    ea5c:	4618      	mov	r0, r3
    ea5e:	370c      	adds	r7, #12
    ea60:	46bd      	mov	sp, r7
    ea62:	bd90      	pop	{r4, r7, pc}
    ea64:	0000eb51 	.word	0x0000eb51
    ea68:	200025c8 	.word	0x200025c8
    ea6c:	0000f6d5 	.word	0x0000f6d5

0000ea70 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    ea70:	b590      	push	{r4, r7, lr}
    ea72:	b083      	sub	sp, #12
    ea74:	af00      	add	r7, sp, #0
    ea76:	6078      	str	r0, [r7, #4]
    ea78:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ea7a:	4b0b      	ldr	r3, [pc, #44]	; (eaa8 <cdcdf_acm_write+0x38>)
    ea7c:	4798      	blx	r3
    ea7e:	4603      	mov	r3, r0
    ea80:	f083 0301 	eor.w	r3, r3, #1
    ea84:	b2db      	uxtb	r3, r3
    ea86:	2b00      	cmp	r3, #0
    ea88:	d002      	beq.n	ea90 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    ea8a:	f06f 0310 	mvn.w	r3, #16
    ea8e:	e007      	b.n	eaa0 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ea90:	4b06      	ldr	r3, [pc, #24]	; (eaac <cdcdf_acm_write+0x3c>)
    ea92:	78d8      	ldrb	r0, [r3, #3]
    ea94:	2301      	movs	r3, #1
    ea96:	683a      	ldr	r2, [r7, #0]
    ea98:	6879      	ldr	r1, [r7, #4]
    ea9a:	4c05      	ldr	r4, [pc, #20]	; (eab0 <cdcdf_acm_write+0x40>)
    ea9c:	47a0      	blx	r4
    ea9e:	4603      	mov	r3, r0
}
    eaa0:	4618      	mov	r0, r3
    eaa2:	370c      	adds	r7, #12
    eaa4:	46bd      	mov	sp, r7
    eaa6:	bd90      	pop	{r4, r7, pc}
    eaa8:	0000eb51 	.word	0x0000eb51
    eaac:	200025c8 	.word	0x200025c8
    eab0:	0000f6d5 	.word	0x0000f6d5

0000eab4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    eab4:	b580      	push	{r7, lr}
    eab6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    eab8:	4b05      	ldr	r3, [pc, #20]	; (ead0 <cdcdf_acm_stop_xfer+0x1c>)
    eaba:	78db      	ldrb	r3, [r3, #3]
    eabc:	4618      	mov	r0, r3
    eabe:	4b05      	ldr	r3, [pc, #20]	; (ead4 <cdcdf_acm_stop_xfer+0x20>)
    eac0:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    eac2:	4b03      	ldr	r3, [pc, #12]	; (ead0 <cdcdf_acm_stop_xfer+0x1c>)
    eac4:	791b      	ldrb	r3, [r3, #4]
    eac6:	4618      	mov	r0, r3
    eac8:	4b02      	ldr	r3, [pc, #8]	; (ead4 <cdcdf_acm_stop_xfer+0x20>)
    eaca:	4798      	blx	r3
}
    eacc:	bf00      	nop
    eace:	bd80      	pop	{r7, pc}
    ead0:	200025c8 	.word	0x200025c8
    ead4:	00005d2d 	.word	0x00005d2d

0000ead8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    ead8:	b580      	push	{r7, lr}
    eada:	b082      	sub	sp, #8
    eadc:	af00      	add	r7, sp, #0
    eade:	4603      	mov	r3, r0
    eae0:	6039      	str	r1, [r7, #0]
    eae2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    eae4:	79fb      	ldrb	r3, [r7, #7]
    eae6:	2b03      	cmp	r3, #3
    eae8:	d822      	bhi.n	eb30 <cdcdf_acm_register_callback+0x58>
    eaea:	a201      	add	r2, pc, #4	; (adr r2, eaf0 <cdcdf_acm_register_callback+0x18>)
    eaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    eaf0:	0000eb01 	.word	0x0000eb01
    eaf4:	0000eb11 	.word	0x0000eb11
    eaf8:	0000eb21 	.word	0x0000eb21
    eafc:	0000eb29 	.word	0x0000eb29
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    eb00:	4b0f      	ldr	r3, [pc, #60]	; (eb40 <cdcdf_acm_register_callback+0x68>)
    eb02:	791b      	ldrb	r3, [r3, #4]
    eb04:	683a      	ldr	r2, [r7, #0]
    eb06:	2102      	movs	r1, #2
    eb08:	4618      	mov	r0, r3
    eb0a:	4b0e      	ldr	r3, [pc, #56]	; (eb44 <cdcdf_acm_register_callback+0x6c>)
    eb0c:	4798      	blx	r3
		break;
    eb0e:	e012      	b.n	eb36 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    eb10:	4b0b      	ldr	r3, [pc, #44]	; (eb40 <cdcdf_acm_register_callback+0x68>)
    eb12:	78db      	ldrb	r3, [r3, #3]
    eb14:	683a      	ldr	r2, [r7, #0]
    eb16:	2102      	movs	r1, #2
    eb18:	4618      	mov	r0, r3
    eb1a:	4b0a      	ldr	r3, [pc, #40]	; (eb44 <cdcdf_acm_register_callback+0x6c>)
    eb1c:	4798      	blx	r3
		break;
    eb1e:	e00a      	b.n	eb36 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    eb20:	4a09      	ldr	r2, [pc, #36]	; (eb48 <cdcdf_acm_register_callback+0x70>)
    eb22:	683b      	ldr	r3, [r7, #0]
    eb24:	6013      	str	r3, [r2, #0]
		break;
    eb26:	e006      	b.n	eb36 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    eb28:	4a08      	ldr	r2, [pc, #32]	; (eb4c <cdcdf_acm_register_callback+0x74>)
    eb2a:	683b      	ldr	r3, [r7, #0]
    eb2c:	6013      	str	r3, [r2, #0]
		break;
    eb2e:	e002      	b.n	eb36 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    eb30:	f06f 030c 	mvn.w	r3, #12
    eb34:	e000      	b.n	eb38 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    eb36:	2300      	movs	r3, #0
}
    eb38:	4618      	mov	r0, r3
    eb3a:	3708      	adds	r7, #8
    eb3c:	46bd      	mov	sp, r7
    eb3e:	bd80      	pop	{r7, pc}
    eb40:	200025c8 	.word	0x200025c8
    eb44:	00005e59 	.word	0x00005e59
    eb48:	200025dc 	.word	0x200025dc
    eb4c:	200025d8 	.word	0x200025d8

0000eb50 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    eb50:	b480      	push	{r7}
    eb52:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    eb54:	4b03      	ldr	r3, [pc, #12]	; (eb64 <cdcdf_acm_is_enabled+0x14>)
    eb56:	795b      	ldrb	r3, [r3, #5]
}
    eb58:	4618      	mov	r0, r3
    eb5a:	46bd      	mov	sp, r7
    eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb60:	4770      	bx	lr
    eb62:	bf00      	nop
    eb64:	200025c8 	.word	0x200025c8

0000eb68 <usb_get_u16>:
{
    eb68:	b480      	push	{r7}
    eb6a:	b083      	sub	sp, #12
    eb6c:	af00      	add	r7, sp, #0
    eb6e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    eb70:	687b      	ldr	r3, [r7, #4]
    eb72:	781b      	ldrb	r3, [r3, #0]
    eb74:	b29a      	uxth	r2, r3
    eb76:	687b      	ldr	r3, [r7, #4]
    eb78:	3301      	adds	r3, #1
    eb7a:	781b      	ldrb	r3, [r3, #0]
    eb7c:	b29b      	uxth	r3, r3
    eb7e:	021b      	lsls	r3, r3, #8
    eb80:	b29b      	uxth	r3, r3
    eb82:	4413      	add	r3, r2
    eb84:	b29b      	uxth	r3, r3
}
    eb86:	4618      	mov	r0, r3
    eb88:	370c      	adds	r7, #12
    eb8a:	46bd      	mov	sp, r7
    eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb90:	4770      	bx	lr

0000eb92 <usb_desc_len>:
{
    eb92:	b480      	push	{r7}
    eb94:	b083      	sub	sp, #12
    eb96:	af00      	add	r7, sp, #0
    eb98:	6078      	str	r0, [r7, #4]
	return desc[0];
    eb9a:	687b      	ldr	r3, [r7, #4]
    eb9c:	781b      	ldrb	r3, [r3, #0]
}
    eb9e:	4618      	mov	r0, r3
    eba0:	370c      	adds	r7, #12
    eba2:	46bd      	mov	sp, r7
    eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    eba8:	4770      	bx	lr
	...

0000ebac <usb_desc_next>:
{
    ebac:	b580      	push	{r7, lr}
    ebae:	b082      	sub	sp, #8
    ebb0:	af00      	add	r7, sp, #0
    ebb2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ebb4:	6878      	ldr	r0, [r7, #4]
    ebb6:	4b05      	ldr	r3, [pc, #20]	; (ebcc <usb_desc_next+0x20>)
    ebb8:	4798      	blx	r3
    ebba:	4603      	mov	r3, r0
    ebbc:	461a      	mov	r2, r3
    ebbe:	687b      	ldr	r3, [r7, #4]
    ebc0:	4413      	add	r3, r2
}
    ebc2:	4618      	mov	r0, r3
    ebc4:	3708      	adds	r7, #8
    ebc6:	46bd      	mov	sp, r7
    ebc8:	bd80      	pop	{r7, pc}
    ebca:	bf00      	nop
    ebcc:	0000eb93 	.word	0x0000eb93

0000ebd0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    ebd0:	b580      	push	{r7, lr}
    ebd2:	b082      	sub	sp, #8
    ebd4:	af00      	add	r7, sp, #0
    ebd6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ebd8:	687b      	ldr	r3, [r7, #4]
    ebda:	3302      	adds	r3, #2
    ebdc:	4618      	mov	r0, r3
    ebde:	4b03      	ldr	r3, [pc, #12]	; (ebec <usb_cfg_desc_total_len+0x1c>)
    ebe0:	4798      	blx	r3
    ebe2:	4603      	mov	r3, r0
}
    ebe4:	4618      	mov	r0, r3
    ebe6:	3708      	adds	r7, #8
    ebe8:	46bd      	mov	sp, r7
    ebea:	bd80      	pop	{r7, pc}
    ebec:	0000eb69 	.word	0x0000eb69

0000ebf0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    ebf0:	b590      	push	{r4, r7, lr}
    ebf2:	b085      	sub	sp, #20
    ebf4:	af00      	add	r7, sp, #0
    ebf6:	4603      	mov	r3, r0
    ebf8:	6039      	str	r1, [r7, #0]
    ebfa:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    ebfc:	2300      	movs	r3, #0
    ebfe:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    ec00:	683b      	ldr	r3, [r7, #0]
    ec02:	799a      	ldrb	r2, [r3, #6]
    ec04:	79db      	ldrb	r3, [r3, #7]
    ec06:	021b      	lsls	r3, r3, #8
    ec08:	4313      	orrs	r3, r2
    ec0a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    ec0c:	897b      	ldrh	r3, [r7, #10]
    ec0e:	2b12      	cmp	r3, #18
    ec10:	d901      	bls.n	ec16 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    ec12:	2312      	movs	r3, #18
    ec14:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    ec16:	68fb      	ldr	r3, [r7, #12]
    ec18:	2b00      	cmp	r3, #0
    ec1a:	d10a      	bne.n	ec32 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ec1c:	4b0f      	ldr	r3, [pc, #60]	; (ec5c <usbdc_get_dev_desc+0x6c>)
    ec1e:	681b      	ldr	r3, [r3, #0]
    ec20:	6818      	ldr	r0, [r3, #0]
    ec22:	4b0e      	ldr	r3, [pc, #56]	; (ec5c <usbdc_get_dev_desc+0x6c>)
    ec24:	681b      	ldr	r3, [r3, #0]
    ec26:	685b      	ldr	r3, [r3, #4]
    ec28:	2201      	movs	r2, #1
    ec2a:	4619      	mov	r1, r3
    ec2c:	4b0c      	ldr	r3, [pc, #48]	; (ec60 <usbdc_get_dev_desc+0x70>)
    ec2e:	4798      	blx	r3
    ec30:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    ec32:	68fb      	ldr	r3, [r7, #12]
    ec34:	2b00      	cmp	r3, #0
    ec36:	d101      	bne.n	ec3c <usbdc_get_dev_desc+0x4c>
		return false;
    ec38:	2300      	movs	r3, #0
    ec3a:	e00b      	b.n	ec54 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ec3c:	897a      	ldrh	r2, [r7, #10]
    ec3e:	79f8      	ldrb	r0, [r7, #7]
    ec40:	2300      	movs	r3, #0
    ec42:	68f9      	ldr	r1, [r7, #12]
    ec44:	4c07      	ldr	r4, [pc, #28]	; (ec64 <usbdc_get_dev_desc+0x74>)
    ec46:	47a0      	blx	r4
    ec48:	4603      	mov	r3, r0
    ec4a:	2b00      	cmp	r3, #0
    ec4c:	d001      	beq.n	ec52 <usbdc_get_dev_desc+0x62>
		return false;
    ec4e:	2300      	movs	r3, #0
    ec50:	e000      	b.n	ec54 <usbdc_get_dev_desc+0x64>
	}
	return true;
    ec52:	2301      	movs	r3, #1
}
    ec54:	4618      	mov	r0, r3
    ec56:	3714      	adds	r7, #20
    ec58:	46bd      	mov	sp, r7
    ec5a:	bd90      	pop	{r4, r7, pc}
    ec5c:	200025e0 	.word	0x200025e0
    ec60:	0000f965 	.word	0x0000f965
    ec64:	0000f6d5 	.word	0x0000f6d5

0000ec68 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    ec68:	b590      	push	{r4, r7, lr}
    ec6a:	b087      	sub	sp, #28
    ec6c:	af00      	add	r7, sp, #0
    ec6e:	4603      	mov	r3, r0
    ec70:	6039      	str	r1, [r7, #0]
    ec72:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    ec74:	2300      	movs	r3, #0
    ec76:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    ec78:	683b      	ldr	r3, [r7, #0]
    ec7a:	799a      	ldrb	r2, [r3, #6]
    ec7c:	79db      	ldrb	r3, [r3, #7]
    ec7e:	021b      	lsls	r3, r3, #8
    ec80:	4313      	orrs	r3, r2
    ec82:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    ec84:	683b      	ldr	r3, [r7, #0]
    ec86:	885b      	ldrh	r3, [r3, #2]
    ec88:	b29b      	uxth	r3, r3
    ec8a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ec8c:	8a7a      	ldrh	r2, [r7, #18]
    ec8e:	4b1e      	ldr	r3, [pc, #120]	; (ed08 <usbdc_get_cfg_desc+0xa0>)
    ec90:	7f1b      	ldrb	r3, [r3, #28]
    ec92:	3b01      	subs	r3, #1
    ec94:	4013      	ands	r3, r2
    ec96:	2b00      	cmp	r3, #0
    ec98:	bf0c      	ite	eq
    ec9a:	2301      	moveq	r3, #1
    ec9c:	2300      	movne	r3, #0
    ec9e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    eca0:	697b      	ldr	r3, [r7, #20]
    eca2:	2b00      	cmp	r3, #0
    eca4:	d10c      	bne.n	ecc0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    eca6:	4b18      	ldr	r3, [pc, #96]	; (ed08 <usbdc_get_cfg_desc+0xa0>)
    eca8:	681b      	ldr	r3, [r3, #0]
    ecaa:	6818      	ldr	r0, [r3, #0]
    ecac:	4b16      	ldr	r3, [pc, #88]	; (ed08 <usbdc_get_cfg_desc+0xa0>)
    ecae:	681b      	ldr	r3, [r3, #0]
    ecb0:	6859      	ldr	r1, [r3, #4]
    ecb2:	7c3b      	ldrb	r3, [r7, #16]
    ecb4:	3301      	adds	r3, #1
    ecb6:	b2db      	uxtb	r3, r3
    ecb8:	461a      	mov	r2, r3
    ecba:	4b14      	ldr	r3, [pc, #80]	; (ed0c <usbdc_get_cfg_desc+0xa4>)
    ecbc:	4798      	blx	r3
    ecbe:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    ecc0:	697b      	ldr	r3, [r7, #20]
    ecc2:	2b00      	cmp	r3, #0
    ecc4:	d101      	bne.n	ecca <usbdc_get_cfg_desc+0x62>
		return false;
    ecc6:	2300      	movs	r3, #0
    ecc8:	e019      	b.n	ecfe <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    ecca:	6978      	ldr	r0, [r7, #20]
    eccc:	4b10      	ldr	r3, [pc, #64]	; (ed10 <usbdc_get_cfg_desc+0xa8>)
    ecce:	4798      	blx	r3
    ecd0:	4603      	mov	r3, r0
    ecd2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    ecd4:	8a7a      	ldrh	r2, [r7, #18]
    ecd6:	89fb      	ldrh	r3, [r7, #14]
    ecd8:	429a      	cmp	r2, r3
    ecda:	d802      	bhi.n	ece2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    ecdc:	2300      	movs	r3, #0
    ecde:	747b      	strb	r3, [r7, #17]
    ece0:	e001      	b.n	ece6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    ece2:	89fb      	ldrh	r3, [r7, #14]
    ece4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    ece6:	8a7a      	ldrh	r2, [r7, #18]
    ece8:	7c7b      	ldrb	r3, [r7, #17]
    ecea:	79f8      	ldrb	r0, [r7, #7]
    ecec:	6979      	ldr	r1, [r7, #20]
    ecee:	4c09      	ldr	r4, [pc, #36]	; (ed14 <usbdc_get_cfg_desc+0xac>)
    ecf0:	47a0      	blx	r4
    ecf2:	4603      	mov	r3, r0
    ecf4:	2b00      	cmp	r3, #0
    ecf6:	d001      	beq.n	ecfc <usbdc_get_cfg_desc+0x94>
		return false;
    ecf8:	2300      	movs	r3, #0
    ecfa:	e000      	b.n	ecfe <usbdc_get_cfg_desc+0x96>
	}
	return true;
    ecfc:	2301      	movs	r3, #1
}
    ecfe:	4618      	mov	r0, r3
    ed00:	371c      	adds	r7, #28
    ed02:	46bd      	mov	sp, r7
    ed04:	bd90      	pop	{r4, r7, pc}
    ed06:	bf00      	nop
    ed08:	200025e0 	.word	0x200025e0
    ed0c:	0000fa25 	.word	0x0000fa25
    ed10:	0000ebd1 	.word	0x0000ebd1
    ed14:	0000f6d5 	.word	0x0000f6d5

0000ed18 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    ed18:	b590      	push	{r4, r7, lr}
    ed1a:	b085      	sub	sp, #20
    ed1c:	af00      	add	r7, sp, #0
    ed1e:	4603      	mov	r3, r0
    ed20:	6039      	str	r1, [r7, #0]
    ed22:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    ed24:	683b      	ldr	r3, [r7, #0]
    ed26:	799a      	ldrb	r2, [r3, #6]
    ed28:	79db      	ldrb	r3, [r3, #7]
    ed2a:	021b      	lsls	r3, r3, #8
    ed2c:	4313      	orrs	r3, r2
    ed2e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    ed30:	683b      	ldr	r3, [r7, #0]
    ed32:	885b      	ldrh	r3, [r3, #2]
    ed34:	b29b      	uxth	r3, r3
    ed36:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ed38:	89fa      	ldrh	r2, [r7, #14]
    ed3a:	4b1a      	ldr	r3, [pc, #104]	; (eda4 <usbdc_get_str_desc+0x8c>)
    ed3c:	7f1b      	ldrb	r3, [r3, #28]
    ed3e:	3b01      	subs	r3, #1
    ed40:	4013      	ands	r3, r2
    ed42:	2b00      	cmp	r3, #0
    ed44:	bf0c      	ite	eq
    ed46:	2301      	moveq	r3, #1
    ed48:	2300      	movne	r3, #0
    ed4a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ed4c:	4b15      	ldr	r3, [pc, #84]	; (eda4 <usbdc_get_str_desc+0x8c>)
    ed4e:	681b      	ldr	r3, [r3, #0]
    ed50:	6818      	ldr	r0, [r3, #0]
    ed52:	4b14      	ldr	r3, [pc, #80]	; (eda4 <usbdc_get_str_desc+0x8c>)
    ed54:	681b      	ldr	r3, [r3, #0]
    ed56:	685b      	ldr	r3, [r3, #4]
    ed58:	7b3a      	ldrb	r2, [r7, #12]
    ed5a:	4619      	mov	r1, r3
    ed5c:	4b12      	ldr	r3, [pc, #72]	; (eda8 <usbdc_get_str_desc+0x90>)
    ed5e:	4798      	blx	r3
    ed60:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    ed62:	68bb      	ldr	r3, [r7, #8]
    ed64:	2b00      	cmp	r3, #0
    ed66:	d101      	bne.n	ed6c <usbdc_get_str_desc+0x54>
		return false;
    ed68:	2300      	movs	r3, #0
    ed6a:	e017      	b.n	ed9c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    ed6c:	68bb      	ldr	r3, [r7, #8]
    ed6e:	781b      	ldrb	r3, [r3, #0]
    ed70:	b29b      	uxth	r3, r3
    ed72:	89fa      	ldrh	r2, [r7, #14]
    ed74:	429a      	cmp	r2, r3
    ed76:	d802      	bhi.n	ed7e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    ed78:	2300      	movs	r3, #0
    ed7a:	737b      	strb	r3, [r7, #13]
    ed7c:	e002      	b.n	ed84 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    ed7e:	68bb      	ldr	r3, [r7, #8]
    ed80:	781b      	ldrb	r3, [r3, #0]
    ed82:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    ed84:	89fa      	ldrh	r2, [r7, #14]
    ed86:	7b7b      	ldrb	r3, [r7, #13]
    ed88:	79f8      	ldrb	r0, [r7, #7]
    ed8a:	68b9      	ldr	r1, [r7, #8]
    ed8c:	4c07      	ldr	r4, [pc, #28]	; (edac <usbdc_get_str_desc+0x94>)
    ed8e:	47a0      	blx	r4
    ed90:	4603      	mov	r3, r0
    ed92:	2b00      	cmp	r3, #0
    ed94:	d001      	beq.n	ed9a <usbdc_get_str_desc+0x82>
		return false;
    ed96:	2300      	movs	r3, #0
    ed98:	e000      	b.n	ed9c <usbdc_get_str_desc+0x84>
	}
	return true;
    ed9a:	2301      	movs	r3, #1
}
    ed9c:	4618      	mov	r0, r3
    ed9e:	3714      	adds	r7, #20
    eda0:	46bd      	mov	sp, r7
    eda2:	bd90      	pop	{r4, r7, pc}
    eda4:	200025e0 	.word	0x200025e0
    eda8:	0000fa9d 	.word	0x0000fa9d
    edac:	0000f6d5 	.word	0x0000f6d5

0000edb0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    edb0:	b580      	push	{r7, lr}
    edb2:	b084      	sub	sp, #16
    edb4:	af00      	add	r7, sp, #0
    edb6:	4603      	mov	r3, r0
    edb8:	6039      	str	r1, [r7, #0]
    edba:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    edbc:	683b      	ldr	r3, [r7, #0]
    edbe:	885b      	ldrh	r3, [r3, #2]
    edc0:	b29b      	uxth	r3, r3
    edc2:	0a1b      	lsrs	r3, r3, #8
    edc4:	b29b      	uxth	r3, r3
    edc6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    edc8:	7bfb      	ldrb	r3, [r7, #15]
    edca:	2b02      	cmp	r3, #2
    edcc:	d00d      	beq.n	edea <usbdc_get_desc_req+0x3a>
    edce:	2b03      	cmp	r3, #3
    edd0:	d012      	beq.n	edf8 <usbdc_get_desc_req+0x48>
    edd2:	2b01      	cmp	r3, #1
    edd4:	d002      	beq.n	eddc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    edd6:	bf00      	nop
	}
	return false;
    edd8:	2300      	movs	r3, #0
    edda:	e013      	b.n	ee04 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    eddc:	79fb      	ldrb	r3, [r7, #7]
    edde:	6839      	ldr	r1, [r7, #0]
    ede0:	4618      	mov	r0, r3
    ede2:	4b0a      	ldr	r3, [pc, #40]	; (ee0c <usbdc_get_desc_req+0x5c>)
    ede4:	4798      	blx	r3
    ede6:	4603      	mov	r3, r0
    ede8:	e00c      	b.n	ee04 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    edea:	79fb      	ldrb	r3, [r7, #7]
    edec:	6839      	ldr	r1, [r7, #0]
    edee:	4618      	mov	r0, r3
    edf0:	4b07      	ldr	r3, [pc, #28]	; (ee10 <usbdc_get_desc_req+0x60>)
    edf2:	4798      	blx	r3
    edf4:	4603      	mov	r3, r0
    edf6:	e005      	b.n	ee04 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    edf8:	79fb      	ldrb	r3, [r7, #7]
    edfa:	6839      	ldr	r1, [r7, #0]
    edfc:	4618      	mov	r0, r3
    edfe:	4b05      	ldr	r3, [pc, #20]	; (ee14 <usbdc_get_desc_req+0x64>)
    ee00:	4798      	blx	r3
    ee02:	4603      	mov	r3, r0
}
    ee04:	4618      	mov	r0, r3
    ee06:	3710      	adds	r7, #16
    ee08:	46bd      	mov	sp, r7
    ee0a:	bd80      	pop	{r7, pc}
    ee0c:	0000ebf1 	.word	0x0000ebf1
    ee10:	0000ec69 	.word	0x0000ec69
    ee14:	0000ed19 	.word	0x0000ed19

0000ee18 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ee18:	b590      	push	{r4, r7, lr}
    ee1a:	b085      	sub	sp, #20
    ee1c:	af00      	add	r7, sp, #0
    ee1e:	4603      	mov	r3, r0
    ee20:	6039      	str	r1, [r7, #0]
    ee22:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ee24:	683b      	ldr	r3, [r7, #0]
    ee26:	781b      	ldrb	r3, [r3, #0]
    ee28:	f003 031f 	and.w	r3, r3, #31
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	db1b      	blt.n	ee68 <usbdc_get_status_req+0x50>
    ee30:	2b01      	cmp	r3, #1
    ee32:	dd02      	ble.n	ee3a <usbdc_get_status_req+0x22>
    ee34:	2b02      	cmp	r3, #2
    ee36:	d003      	beq.n	ee40 <usbdc_get_status_req+0x28>
    ee38:	e016      	b.n	ee68 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ee3a:	2300      	movs	r3, #0
    ee3c:	60fb      	str	r3, [r7, #12]
		break;
    ee3e:	e015      	b.n	ee6c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ee40:	683b      	ldr	r3, [r7, #0]
    ee42:	889b      	ldrh	r3, [r3, #4]
    ee44:	b29b      	uxth	r3, r3
    ee46:	b2db      	uxtb	r3, r3
    ee48:	2102      	movs	r1, #2
    ee4a:	4618      	mov	r0, r3
    ee4c:	4b0f      	ldr	r3, [pc, #60]	; (ee8c <usbdc_get_status_req+0x74>)
    ee4e:	4798      	blx	r3
    ee50:	4603      	mov	r3, r0
    ee52:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ee54:	68fb      	ldr	r3, [r7, #12]
    ee56:	2b00      	cmp	r3, #0
    ee58:	da01      	bge.n	ee5e <usbdc_get_status_req+0x46>
			return false;
    ee5a:	2300      	movs	r3, #0
    ee5c:	e012      	b.n	ee84 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ee5e:	68fb      	ldr	r3, [r7, #12]
    ee60:	f003 0301 	and.w	r3, r3, #1
    ee64:	60fb      	str	r3, [r7, #12]
		break;
    ee66:	e001      	b.n	ee6c <usbdc_get_status_req+0x54>
	default:
		return false;
    ee68:	2300      	movs	r3, #0
    ee6a:	e00b      	b.n	ee84 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ee6c:	4b08      	ldr	r3, [pc, #32]	; (ee90 <usbdc_get_status_req+0x78>)
    ee6e:	695b      	ldr	r3, [r3, #20]
    ee70:	89ba      	ldrh	r2, [r7, #12]
    ee72:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ee74:	4b06      	ldr	r3, [pc, #24]	; (ee90 <usbdc_get_status_req+0x78>)
    ee76:	6959      	ldr	r1, [r3, #20]
    ee78:	79f8      	ldrb	r0, [r7, #7]
    ee7a:	2300      	movs	r3, #0
    ee7c:	2202      	movs	r2, #2
    ee7e:	4c05      	ldr	r4, [pc, #20]	; (ee94 <usbdc_get_status_req+0x7c>)
    ee80:	47a0      	blx	r4
	return true;
    ee82:	2301      	movs	r3, #1
}
    ee84:	4618      	mov	r0, r3
    ee86:	3714      	adds	r7, #20
    ee88:	46bd      	mov	sp, r7
    ee8a:	bd90      	pop	{r4, r7, pc}
    ee8c:	00005e05 	.word	0x00005e05
    ee90:	200025e0 	.word	0x200025e0
    ee94:	0000f6d5 	.word	0x0000f6d5

0000ee98 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    ee98:	b590      	push	{r4, r7, lr}
    ee9a:	b085      	sub	sp, #20
    ee9c:	af00      	add	r7, sp, #0
    ee9e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    eea0:	4b1f      	ldr	r3, [pc, #124]	; (ef20 <usbdc_get_interface+0x88>)
    eea2:	691b      	ldr	r3, [r3, #16]
    eea4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    eea6:	4b1e      	ldr	r3, [pc, #120]	; (ef20 <usbdc_get_interface+0x88>)
    eea8:	7f5b      	ldrb	r3, [r3, #29]
    eeaa:	461a      	mov	r2, r3
    eeac:	687b      	ldr	r3, [r7, #4]
    eeae:	889b      	ldrh	r3, [r3, #4]
    eeb0:	b29b      	uxth	r3, r3
    eeb2:	fa42 f303 	asr.w	r3, r2, r3
    eeb6:	f003 0301 	and.w	r3, r3, #1
    eeba:	2b00      	cmp	r3, #0
    eebc:	d128      	bne.n	ef10 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    eebe:	4b18      	ldr	r3, [pc, #96]	; (ef20 <usbdc_get_interface+0x88>)
    eec0:	695b      	ldr	r3, [r3, #20]
    eec2:	2200      	movs	r2, #0
    eec4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    eec6:	4b16      	ldr	r3, [pc, #88]	; (ef20 <usbdc_get_interface+0x88>)
    eec8:	6959      	ldr	r1, [r3, #20]
    eeca:	2300      	movs	r3, #0
    eecc:	2201      	movs	r2, #1
    eece:	2000      	movs	r0, #0
    eed0:	4c14      	ldr	r4, [pc, #80]	; (ef24 <usbdc_get_interface+0x8c>)
    eed2:	47a0      	blx	r4
		return true;
    eed4:	2301      	movs	r3, #1
    eed6:	e01f      	b.n	ef18 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    eed8:	68fb      	ldr	r3, [r7, #12]
    eeda:	685b      	ldr	r3, [r3, #4]
    eedc:	687a      	ldr	r2, [r7, #4]
    eede:	2102      	movs	r1, #2
    eee0:	68f8      	ldr	r0, [r7, #12]
    eee2:	4798      	blx	r3
    eee4:	60b8      	str	r0, [r7, #8]
    eee6:	68bb      	ldr	r3, [r7, #8]
    eee8:	2b00      	cmp	r3, #0
    eeea:	da03      	bge.n	eef4 <usbdc_get_interface+0x5c>
			func = func->next;
    eeec:	68fb      	ldr	r3, [r7, #12]
    eeee:	681b      	ldr	r3, [r3, #0]
    eef0:	60fb      	str	r3, [r7, #12]
    eef2:	e00d      	b.n	ef10 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    eef4:	4b0a      	ldr	r3, [pc, #40]	; (ef20 <usbdc_get_interface+0x88>)
    eef6:	695b      	ldr	r3, [r3, #20]
    eef8:	68ba      	ldr	r2, [r7, #8]
    eefa:	b2d2      	uxtb	r2, r2
    eefc:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    eefe:	4b08      	ldr	r3, [pc, #32]	; (ef20 <usbdc_get_interface+0x88>)
    ef00:	6959      	ldr	r1, [r3, #20]
    ef02:	2300      	movs	r3, #0
    ef04:	2201      	movs	r2, #1
    ef06:	2000      	movs	r0, #0
    ef08:	4c06      	ldr	r4, [pc, #24]	; (ef24 <usbdc_get_interface+0x8c>)
    ef0a:	47a0      	blx	r4
			return true;
    ef0c:	2301      	movs	r3, #1
    ef0e:	e003      	b.n	ef18 <usbdc_get_interface+0x80>
	while (NULL != func) {
    ef10:	68fb      	ldr	r3, [r7, #12]
    ef12:	2b00      	cmp	r3, #0
    ef14:	d1e0      	bne.n	eed8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    ef16:	2300      	movs	r3, #0
}
    ef18:	4618      	mov	r0, r3
    ef1a:	3714      	adds	r7, #20
    ef1c:	46bd      	mov	sp, r7
    ef1e:	bd90      	pop	{r4, r7, pc}
    ef20:	200025e0 	.word	0x200025e0
    ef24:	0000f6d5 	.word	0x0000f6d5

0000ef28 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ef28:	b590      	push	{r4, r7, lr}
    ef2a:	b083      	sub	sp, #12
    ef2c:	af00      	add	r7, sp, #0
    ef2e:	4603      	mov	r3, r0
    ef30:	6039      	str	r1, [r7, #0]
    ef32:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ef34:	683b      	ldr	r3, [r7, #0]
    ef36:	785b      	ldrb	r3, [r3, #1]
    ef38:	2b0a      	cmp	r3, #10
    ef3a:	d83a      	bhi.n	efb2 <usbdc_get_req+0x8a>
    ef3c:	a201      	add	r2, pc, #4	; (adr r2, ef44 <usbdc_get_req+0x1c>)
    ef3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ef42:	bf00      	nop
    ef44:	0000ef9b 	.word	0x0000ef9b
    ef48:	0000efb3 	.word	0x0000efb3
    ef4c:	0000efb3 	.word	0x0000efb3
    ef50:	0000efb3 	.word	0x0000efb3
    ef54:	0000efb3 	.word	0x0000efb3
    ef58:	0000efb3 	.word	0x0000efb3
    ef5c:	0000ef71 	.word	0x0000ef71
    ef60:	0000efb3 	.word	0x0000efb3
    ef64:	0000ef7f 	.word	0x0000ef7f
    ef68:	0000efb3 	.word	0x0000efb3
    ef6c:	0000efa9 	.word	0x0000efa9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    ef70:	79fb      	ldrb	r3, [r7, #7]
    ef72:	6839      	ldr	r1, [r7, #0]
    ef74:	4618      	mov	r0, r3
    ef76:	4b11      	ldr	r3, [pc, #68]	; (efbc <usbdc_get_req+0x94>)
    ef78:	4798      	blx	r3
    ef7a:	4603      	mov	r3, r0
    ef7c:	e01a      	b.n	efb4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ef7e:	4b10      	ldr	r3, [pc, #64]	; (efc0 <usbdc_get_req+0x98>)
    ef80:	695b      	ldr	r3, [r3, #20]
    ef82:	4a0f      	ldr	r2, [pc, #60]	; (efc0 <usbdc_get_req+0x98>)
    ef84:	7ed2      	ldrb	r2, [r2, #27]
    ef86:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ef88:	4b0d      	ldr	r3, [pc, #52]	; (efc0 <usbdc_get_req+0x98>)
    ef8a:	6959      	ldr	r1, [r3, #20]
    ef8c:	79f8      	ldrb	r0, [r7, #7]
    ef8e:	2300      	movs	r3, #0
    ef90:	2201      	movs	r2, #1
    ef92:	4c0c      	ldr	r4, [pc, #48]	; (efc4 <usbdc_get_req+0x9c>)
    ef94:	47a0      	blx	r4
		return true;
    ef96:	2301      	movs	r3, #1
    ef98:	e00c      	b.n	efb4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    ef9a:	79fb      	ldrb	r3, [r7, #7]
    ef9c:	6839      	ldr	r1, [r7, #0]
    ef9e:	4618      	mov	r0, r3
    efa0:	4b09      	ldr	r3, [pc, #36]	; (efc8 <usbdc_get_req+0xa0>)
    efa2:	4798      	blx	r3
    efa4:	4603      	mov	r3, r0
    efa6:	e005      	b.n	efb4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    efa8:	6838      	ldr	r0, [r7, #0]
    efaa:	4b08      	ldr	r3, [pc, #32]	; (efcc <usbdc_get_req+0xa4>)
    efac:	4798      	blx	r3
    efae:	4603      	mov	r3, r0
    efb0:	e000      	b.n	efb4 <usbdc_get_req+0x8c>
	default:
		return false;
    efb2:	2300      	movs	r3, #0
	}
}
    efb4:	4618      	mov	r0, r3
    efb6:	370c      	adds	r7, #12
    efb8:	46bd      	mov	sp, r7
    efba:	bd90      	pop	{r4, r7, pc}
    efbc:	0000edb1 	.word	0x0000edb1
    efc0:	200025e0 	.word	0x200025e0
    efc4:	0000f6d5 	.word	0x0000f6d5
    efc8:	0000ee19 	.word	0x0000ee19
    efcc:	0000ee99 	.word	0x0000ee99

0000efd0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    efd0:	b590      	push	{r4, r7, lr}
    efd2:	b083      	sub	sp, #12
    efd4:	af00      	add	r7, sp, #0
    efd6:	4603      	mov	r3, r0
    efd8:	6039      	str	r1, [r7, #0]
    efda:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    efdc:	683b      	ldr	r3, [r7, #0]
    efde:	781b      	ldrb	r3, [r3, #0]
    efe0:	f003 031f 	and.w	r3, r3, #31
    efe4:	2b02      	cmp	r3, #2
    efe6:	d116      	bne.n	f016 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    efe8:	683b      	ldr	r3, [r7, #0]
    efea:	88db      	ldrh	r3, [r3, #6]
    efec:	b29b      	uxth	r3, r3
    efee:	2b00      	cmp	r3, #0
    eff0:	d001      	beq.n	eff6 <usbdc_clear_ftr_req+0x26>
			return false;
    eff2:	2300      	movs	r3, #0
    eff4:	e010      	b.n	f018 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    eff6:	683b      	ldr	r3, [r7, #0]
    eff8:	889b      	ldrh	r3, [r3, #4]
    effa:	b29b      	uxth	r3, r3
    effc:	b2db      	uxtb	r3, r3
    effe:	2100      	movs	r1, #0
    f000:	4618      	mov	r0, r3
    f002:	4b07      	ldr	r3, [pc, #28]	; (f020 <usbdc_clear_ftr_req+0x50>)
    f004:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f006:	79f8      	ldrb	r0, [r7, #7]
    f008:	2301      	movs	r3, #1
    f00a:	2200      	movs	r2, #0
    f00c:	2100      	movs	r1, #0
    f00e:	4c05      	ldr	r4, [pc, #20]	; (f024 <usbdc_clear_ftr_req+0x54>)
    f010:	47a0      	blx	r4
		return true;
    f012:	2301      	movs	r3, #1
    f014:	e000      	b.n	f018 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    f016:	2300      	movs	r3, #0
	}
}
    f018:	4618      	mov	r0, r3
    f01a:	370c      	adds	r7, #12
    f01c:	46bd      	mov	sp, r7
    f01e:	bd90      	pop	{r4, r7, pc}
    f020:	00005e05 	.word	0x00005e05
    f024:	0000f6d5 	.word	0x0000f6d5

0000f028 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    f028:	b590      	push	{r4, r7, lr}
    f02a:	b083      	sub	sp, #12
    f02c:	af00      	add	r7, sp, #0
    f02e:	4603      	mov	r3, r0
    f030:	6039      	str	r1, [r7, #0]
    f032:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f034:	683b      	ldr	r3, [r7, #0]
    f036:	781b      	ldrb	r3, [r3, #0]
    f038:	f003 031f 	and.w	r3, r3, #31
    f03c:	2b02      	cmp	r3, #2
    f03e:	d116      	bne.n	f06e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    f040:	683b      	ldr	r3, [r7, #0]
    f042:	88db      	ldrh	r3, [r3, #6]
    f044:	b29b      	uxth	r3, r3
    f046:	2b00      	cmp	r3, #0
    f048:	d001      	beq.n	f04e <usbdc_set_ftr_req+0x26>
			return false;
    f04a:	2300      	movs	r3, #0
    f04c:	e010      	b.n	f070 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    f04e:	683b      	ldr	r3, [r7, #0]
    f050:	889b      	ldrh	r3, [r3, #4]
    f052:	b29b      	uxth	r3, r3
    f054:	b2db      	uxtb	r3, r3
    f056:	2101      	movs	r1, #1
    f058:	4618      	mov	r0, r3
    f05a:	4b07      	ldr	r3, [pc, #28]	; (f078 <usbdc_set_ftr_req+0x50>)
    f05c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f05e:	79f8      	ldrb	r0, [r7, #7]
    f060:	2301      	movs	r3, #1
    f062:	2200      	movs	r2, #0
    f064:	2100      	movs	r1, #0
    f066:	4c05      	ldr	r4, [pc, #20]	; (f07c <usbdc_set_ftr_req+0x54>)
    f068:	47a0      	blx	r4
		return true;
    f06a:	2301      	movs	r3, #1
    f06c:	e000      	b.n	f070 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    f06e:	2300      	movs	r3, #0
	}
}
    f070:	4618      	mov	r0, r3
    f072:	370c      	adds	r7, #12
    f074:	46bd      	mov	sp, r7
    f076:	bd90      	pop	{r4, r7, pc}
    f078:	00005e05 	.word	0x00005e05
    f07c:	0000f6d5 	.word	0x0000f6d5

0000f080 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    f080:	b580      	push	{r7, lr}
    f082:	b082      	sub	sp, #8
    f084:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f086:	4b0a      	ldr	r3, [pc, #40]	; (f0b0 <usbdc_unconfig+0x30>)
    f088:	691b      	ldr	r3, [r3, #16]
    f08a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    f08c:	e008      	b.n	f0a0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    f08e:	687b      	ldr	r3, [r7, #4]
    f090:	685b      	ldr	r3, [r3, #4]
    f092:	2200      	movs	r2, #0
    f094:	2101      	movs	r1, #1
    f096:	6878      	ldr	r0, [r7, #4]
    f098:	4798      	blx	r3
		func = func->next;
    f09a:	687b      	ldr	r3, [r7, #4]
    f09c:	681b      	ldr	r3, [r3, #0]
    f09e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    f0a0:	687b      	ldr	r3, [r7, #4]
    f0a2:	2b00      	cmp	r3, #0
    f0a4:	d1f3      	bne.n	f08e <usbdc_unconfig+0xe>
	}
}
    f0a6:	bf00      	nop
    f0a8:	3708      	adds	r7, #8
    f0aa:	46bd      	mov	sp, r7
    f0ac:	bd80      	pop	{r7, pc}
    f0ae:	bf00      	nop
    f0b0:	200025e0 	.word	0x200025e0

0000f0b4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    f0b4:	b580      	push	{r7, lr}
    f0b6:	b088      	sub	sp, #32
    f0b8:	af00      	add	r7, sp, #0
    f0ba:	4603      	mov	r3, r0
    f0bc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    f0be:	2300      	movs	r3, #0
    f0c0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    f0c2:	23ff      	movs	r3, #255	; 0xff
    f0c4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    f0c6:	79fb      	ldrb	r3, [r7, #7]
    f0c8:	2b00      	cmp	r3, #0
    f0ca:	d103      	bne.n	f0d4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    f0cc:	4b2e      	ldr	r3, [pc, #184]	; (f188 <usbdc_set_config+0xd4>)
    f0ce:	4798      	blx	r3
		return true;
    f0d0:	2301      	movs	r3, #1
    f0d2:	e055      	b.n	f180 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    f0d4:	69bb      	ldr	r3, [r7, #24]
    f0d6:	2b00      	cmp	r3, #0
    f0d8:	d10a      	bne.n	f0f0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    f0da:	4b2c      	ldr	r3, [pc, #176]	; (f18c <usbdc_set_config+0xd8>)
    f0dc:	681b      	ldr	r3, [r3, #0]
    f0de:	6818      	ldr	r0, [r3, #0]
    f0e0:	4b2a      	ldr	r3, [pc, #168]	; (f18c <usbdc_set_config+0xd8>)
    f0e2:	681b      	ldr	r3, [r3, #0]
    f0e4:	685b      	ldr	r3, [r3, #4]
    f0e6:	79fa      	ldrb	r2, [r7, #7]
    f0e8:	4619      	mov	r1, r3
    f0ea:	4b29      	ldr	r3, [pc, #164]	; (f190 <usbdc_set_config+0xdc>)
    f0ec:	4798      	blx	r3
    f0ee:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    f0f0:	69bb      	ldr	r3, [r7, #24]
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	d101      	bne.n	f0fa <usbdc_set_config+0x46>
		return false;
    f0f6:	2300      	movs	r3, #0
    f0f8:	e042      	b.n	f180 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    f0fa:	69b8      	ldr	r0, [r7, #24]
    f0fc:	4b25      	ldr	r3, [pc, #148]	; (f194 <usbdc_set_config+0xe0>)
    f0fe:	4798      	blx	r3
    f100:	4603      	mov	r3, r0
    f102:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    f104:	8abb      	ldrh	r3, [r7, #20]
    f106:	69ba      	ldr	r2, [r7, #24]
    f108:	4413      	add	r3, r2
    f10a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    f10c:	693b      	ldr	r3, [r7, #16]
    f10e:	2204      	movs	r2, #4
    f110:	4619      	mov	r1, r3
    f112:	69b8      	ldr	r0, [r7, #24]
    f114:	4b20      	ldr	r3, [pc, #128]	; (f198 <usbdc_set_config+0xe4>)
    f116:	4798      	blx	r3
    f118:	4603      	mov	r3, r0
    f11a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    f11c:	e02c      	b.n	f178 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    f11e:	68fb      	ldr	r3, [r7, #12]
    f120:	3302      	adds	r3, #2
    f122:	781b      	ldrb	r3, [r3, #0]
    f124:	7dfa      	ldrb	r2, [r7, #23]
    f126:	429a      	cmp	r2, r3
    f128:	d018      	beq.n	f15c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    f12a:	68fb      	ldr	r3, [r7, #12]
    f12c:	789b      	ldrb	r3, [r3, #2]
    f12e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    f130:	4b16      	ldr	r3, [pc, #88]	; (f18c <usbdc_set_config+0xd8>)
    f132:	691b      	ldr	r3, [r3, #16]
    f134:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    f136:	e00c      	b.n	f152 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    f138:	69fb      	ldr	r3, [r7, #28]
    f13a:	685b      	ldr	r3, [r3, #4]
    f13c:	f107 020c 	add.w	r2, r7, #12
    f140:	2100      	movs	r1, #0
    f142:	69f8      	ldr	r0, [r7, #28]
    f144:	4798      	blx	r3
    f146:	4603      	mov	r3, r0
    f148:	2b00      	cmp	r3, #0
    f14a:	d006      	beq.n	f15a <usbdc_set_config+0xa6>
					func = func->next;
    f14c:	69fb      	ldr	r3, [r7, #28]
    f14e:	681b      	ldr	r3, [r3, #0]
    f150:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    f152:	69fb      	ldr	r3, [r7, #28]
    f154:	2b00      	cmp	r3, #0
    f156:	d1ef      	bne.n	f138 <usbdc_set_config+0x84>
    f158:	e000      	b.n	f15c <usbdc_set_config+0xa8>
				} else {
					break;
    f15a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    f15c:	68fb      	ldr	r3, [r7, #12]
    f15e:	4618      	mov	r0, r3
    f160:	4b0e      	ldr	r3, [pc, #56]	; (f19c <usbdc_set_config+0xe8>)
    f162:	4798      	blx	r3
    f164:	4603      	mov	r3, r0
    f166:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    f168:	68fb      	ldr	r3, [r7, #12]
    f16a:	6939      	ldr	r1, [r7, #16]
    f16c:	2204      	movs	r2, #4
    f16e:	4618      	mov	r0, r3
    f170:	4b09      	ldr	r3, [pc, #36]	; (f198 <usbdc_set_config+0xe4>)
    f172:	4798      	blx	r3
    f174:	4603      	mov	r3, r0
    f176:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    f178:	68fb      	ldr	r3, [r7, #12]
    f17a:	2b00      	cmp	r3, #0
    f17c:	d1cf      	bne.n	f11e <usbdc_set_config+0x6a>
	}
	return true;
    f17e:	2301      	movs	r3, #1
}
    f180:	4618      	mov	r0, r3
    f182:	3720      	adds	r7, #32
    f184:	46bd      	mov	sp, r7
    f186:	bd80      	pop	{r7, pc}
    f188:	0000f081 	.word	0x0000f081
    f18c:	200025e0 	.word	0x200025e0
    f190:	0000fa25 	.word	0x0000fa25
    f194:	0000ebd1 	.word	0x0000ebd1
    f198:	0000f965 	.word	0x0000f965
    f19c:	0000ebad 	.word	0x0000ebad

0000f1a0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    f1a0:	b580      	push	{r7, lr}
    f1a2:	b082      	sub	sp, #8
    f1a4:	af00      	add	r7, sp, #0
    f1a6:	4603      	mov	r3, r0
    f1a8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    f1aa:	79fb      	ldrb	r3, [r7, #7]
    f1ac:	4618      	mov	r0, r3
    f1ae:	4b03      	ldr	r3, [pc, #12]	; (f1bc <usbdc_set_address+0x1c>)
    f1b0:	4798      	blx	r3
}
    f1b2:	bf00      	nop
    f1b4:	3708      	adds	r7, #8
    f1b6:	46bd      	mov	sp, r7
    f1b8:	bd80      	pop	{r7, pc}
    f1ba:	bf00      	nop
    f1bc:	00005a21 	.word	0x00005a21

0000f1c0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    f1c0:	b590      	push	{r4, r7, lr}
    f1c2:	b087      	sub	sp, #28
    f1c4:	af00      	add	r7, sp, #0
    f1c6:	4603      	mov	r3, r0
    f1c8:	460a      	mov	r2, r1
    f1ca:	80fb      	strh	r3, [r7, #6]
    f1cc:	4613      	mov	r3, r2
    f1ce:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    f1d0:	2300      	movs	r3, #0
    f1d2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    f1d4:	693b      	ldr	r3, [r7, #16]
    f1d6:	2b00      	cmp	r3, #0
    f1d8:	d10b      	bne.n	f1f2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    f1da:	4b43      	ldr	r3, [pc, #268]	; (f2e8 <usbdc_set_interface+0x128>)
    f1dc:	681b      	ldr	r3, [r3, #0]
    f1de:	6818      	ldr	r0, [r3, #0]
    f1e0:	4b41      	ldr	r3, [pc, #260]	; (f2e8 <usbdc_set_interface+0x128>)
    f1e2:	681b      	ldr	r3, [r3, #0]
    f1e4:	6859      	ldr	r1, [r3, #4]
    f1e6:	4b40      	ldr	r3, [pc, #256]	; (f2e8 <usbdc_set_interface+0x128>)
    f1e8:	7edb      	ldrb	r3, [r3, #27]
    f1ea:	461a      	mov	r2, r3
    f1ec:	4b3f      	ldr	r3, [pc, #252]	; (f2ec <usbdc_set_interface+0x12c>)
    f1ee:	4798      	blx	r3
    f1f0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    f1f2:	693b      	ldr	r3, [r7, #16]
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	d101      	bne.n	f1fc <usbdc_set_interface+0x3c>
		return false;
    f1f8:	2300      	movs	r3, #0
    f1fa:	e071      	b.n	f2e0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    f1fc:	693b      	ldr	r3, [r7, #16]
    f1fe:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    f200:	6938      	ldr	r0, [r7, #16]
    f202:	4b3b      	ldr	r3, [pc, #236]	; (f2f0 <usbdc_set_interface+0x130>)
    f204:	4798      	blx	r3
    f206:	4603      	mov	r3, r0
    f208:	461a      	mov	r2, r3
    f20a:	693b      	ldr	r3, [r7, #16]
    f20c:	4413      	add	r3, r2
    f20e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    f210:	68bb      	ldr	r3, [r7, #8]
    f212:	68f9      	ldr	r1, [r7, #12]
    f214:	2204      	movs	r2, #4
    f216:	4618      	mov	r0, r3
    f218:	4b36      	ldr	r3, [pc, #216]	; (f2f4 <usbdc_set_interface+0x134>)
    f21a:	4798      	blx	r3
    f21c:	6138      	str	r0, [r7, #16]
    f21e:	693b      	ldr	r3, [r7, #16]
    f220:	2b00      	cmp	r3, #0
    f222:	d113      	bne.n	f24c <usbdc_set_interface+0x8c>
		return false;
    f224:	2300      	movs	r3, #0
    f226:	e05b      	b.n	f2e0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    f228:	68bb      	ldr	r3, [r7, #8]
    f22a:	4618      	mov	r0, r3
    f22c:	4b32      	ldr	r3, [pc, #200]	; (f2f8 <usbdc_set_interface+0x138>)
    f22e:	4798      	blx	r3
    f230:	4603      	mov	r3, r0
    f232:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    f234:	68bb      	ldr	r3, [r7, #8]
    f236:	68f9      	ldr	r1, [r7, #12]
    f238:	2204      	movs	r2, #4
    f23a:	4618      	mov	r0, r3
    f23c:	4b2d      	ldr	r3, [pc, #180]	; (f2f4 <usbdc_set_interface+0x134>)
    f23e:	4798      	blx	r3
    f240:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    f242:	693b      	ldr	r3, [r7, #16]
    f244:	2b00      	cmp	r3, #0
    f246:	d101      	bne.n	f24c <usbdc_set_interface+0x8c>
			return false;
    f248:	2300      	movs	r3, #0
    f24a:	e049      	b.n	f2e0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    f24c:	693b      	ldr	r3, [r7, #16]
    f24e:	3302      	adds	r3, #2
    f250:	781b      	ldrb	r3, [r3, #0]
    f252:	b29b      	uxth	r3, r3
    f254:	88ba      	ldrh	r2, [r7, #4]
    f256:	429a      	cmp	r2, r3
    f258:	d1e6      	bne.n	f228 <usbdc_set_interface+0x68>
    f25a:	693b      	ldr	r3, [r7, #16]
    f25c:	3303      	adds	r3, #3
    f25e:	781b      	ldrb	r3, [r3, #0]
    f260:	b29b      	uxth	r3, r3
    f262:	88fa      	ldrh	r2, [r7, #6]
    f264:	429a      	cmp	r2, r3
    f266:	d1df      	bne.n	f228 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    f268:	693b      	ldr	r3, [r7, #16]
    f26a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    f26c:	4b1e      	ldr	r3, [pc, #120]	; (f2e8 <usbdc_set_interface+0x128>)
    f26e:	691b      	ldr	r3, [r3, #16]
    f270:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    f272:	e031      	b.n	f2d8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    f274:	697b      	ldr	r3, [r7, #20]
    f276:	685b      	ldr	r3, [r3, #4]
    f278:	f107 0208 	add.w	r2, r7, #8
    f27c:	2101      	movs	r1, #1
    f27e:	6978      	ldr	r0, [r7, #20]
    f280:	4798      	blx	r3
    f282:	4603      	mov	r3, r0
    f284:	2b00      	cmp	r3, #0
    f286:	d003      	beq.n	f290 <usbdc_set_interface+0xd0>
			func = func->next;
    f288:	697b      	ldr	r3, [r7, #20]
    f28a:	681b      	ldr	r3, [r3, #0]
    f28c:	617b      	str	r3, [r7, #20]
    f28e:	e023      	b.n	f2d8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    f290:	697b      	ldr	r3, [r7, #20]
    f292:	685b      	ldr	r3, [r3, #4]
    f294:	f107 0208 	add.w	r2, r7, #8
    f298:	2100      	movs	r1, #0
    f29a:	6978      	ldr	r0, [r7, #20]
    f29c:	4798      	blx	r3
    f29e:	4603      	mov	r3, r0
    f2a0:	2b00      	cmp	r3, #0
    f2a2:	d117      	bne.n	f2d4 <usbdc_set_interface+0x114>
			if (alt_set) {
    f2a4:	88fb      	ldrh	r3, [r7, #6]
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	d00c      	beq.n	f2c4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    f2aa:	4b0f      	ldr	r3, [pc, #60]	; (f2e8 <usbdc_set_interface+0x128>)
    f2ac:	7f5b      	ldrb	r3, [r3, #29]
    f2ae:	b25a      	sxtb	r2, r3
    f2b0:	88bb      	ldrh	r3, [r7, #4]
    f2b2:	2101      	movs	r1, #1
    f2b4:	fa01 f303 	lsl.w	r3, r1, r3
    f2b8:	b25b      	sxtb	r3, r3
    f2ba:	4313      	orrs	r3, r2
    f2bc:	b25b      	sxtb	r3, r3
    f2be:	b2da      	uxtb	r2, r3
    f2c0:	4b09      	ldr	r3, [pc, #36]	; (f2e8 <usbdc_set_interface+0x128>)
    f2c2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    f2c4:	2300      	movs	r3, #0
    f2c6:	2200      	movs	r2, #0
    f2c8:	2100      	movs	r1, #0
    f2ca:	2000      	movs	r0, #0
    f2cc:	4c0b      	ldr	r4, [pc, #44]	; (f2fc <usbdc_set_interface+0x13c>)
    f2ce:	47a0      	blx	r4
			return true;
    f2d0:	2301      	movs	r3, #1
    f2d2:	e005      	b.n	f2e0 <usbdc_set_interface+0x120>
		} else {
			return false;
    f2d4:	2300      	movs	r3, #0
    f2d6:	e003      	b.n	f2e0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    f2d8:	697b      	ldr	r3, [r7, #20]
    f2da:	2b00      	cmp	r3, #0
    f2dc:	d1ca      	bne.n	f274 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    f2de:	2300      	movs	r3, #0
}
    f2e0:	4618      	mov	r0, r3
    f2e2:	371c      	adds	r7, #28
    f2e4:	46bd      	mov	sp, r7
    f2e6:	bd90      	pop	{r4, r7, pc}
    f2e8:	200025e0 	.word	0x200025e0
    f2ec:	0000fa25 	.word	0x0000fa25
    f2f0:	0000ebd1 	.word	0x0000ebd1
    f2f4:	0000f965 	.word	0x0000f965
    f2f8:	0000ebad 	.word	0x0000ebad
    f2fc:	0000f6d5 	.word	0x0000f6d5

0000f300 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    f300:	b590      	push	{r4, r7, lr}
    f302:	b083      	sub	sp, #12
    f304:	af00      	add	r7, sp, #0
    f306:	4603      	mov	r3, r0
    f308:	6039      	str	r1, [r7, #0]
    f30a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    f30c:	683b      	ldr	r3, [r7, #0]
    f30e:	785b      	ldrb	r3, [r3, #1]
    f310:	3b01      	subs	r3, #1
    f312:	2b0a      	cmp	r3, #10
    f314:	d85b      	bhi.n	f3ce <usbdc_set_req+0xce>
    f316:	a201      	add	r2, pc, #4	; (adr r2, f31c <usbdc_set_req+0x1c>)
    f318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f31c:	0000f39b 	.word	0x0000f39b
    f320:	0000f3cf 	.word	0x0000f3cf
    f324:	0000f3a9 	.word	0x0000f3a9
    f328:	0000f3cf 	.word	0x0000f3cf
    f32c:	0000f349 	.word	0x0000f349
    f330:	0000f3cf 	.word	0x0000f3cf
    f334:	0000f3cf 	.word	0x0000f3cf
    f338:	0000f3cf 	.word	0x0000f3cf
    f33c:	0000f363 	.word	0x0000f363
    f340:	0000f3cf 	.word	0x0000f3cf
    f344:	0000f3b7 	.word	0x0000f3b7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    f348:	79f8      	ldrb	r0, [r7, #7]
    f34a:	2301      	movs	r3, #1
    f34c:	2200      	movs	r2, #0
    f34e:	2100      	movs	r1, #0
    f350:	4c21      	ldr	r4, [pc, #132]	; (f3d8 <usbdc_set_req+0xd8>)
    f352:	47a0      	blx	r4
    f354:	4603      	mov	r3, r0
    f356:	2b00      	cmp	r3, #0
    f358:	bf0c      	ite	eq
    f35a:	2301      	moveq	r3, #1
    f35c:	2300      	movne	r3, #0
    f35e:	b2db      	uxtb	r3, r3
    f360:	e036      	b.n	f3d0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    f362:	683b      	ldr	r3, [r7, #0]
    f364:	885b      	ldrh	r3, [r3, #2]
    f366:	b29b      	uxth	r3, r3
    f368:	b2db      	uxtb	r3, r3
    f36a:	4618      	mov	r0, r3
    f36c:	4b1b      	ldr	r3, [pc, #108]	; (f3dc <usbdc_set_req+0xdc>)
    f36e:	4798      	blx	r3
    f370:	4603      	mov	r3, r0
    f372:	f083 0301 	eor.w	r3, r3, #1
    f376:	b2db      	uxtb	r3, r3
    f378:	2b00      	cmp	r3, #0
    f37a:	d001      	beq.n	f380 <usbdc_set_req+0x80>
			return false;
    f37c:	2300      	movs	r3, #0
    f37e:	e027      	b.n	f3d0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    f380:	79f8      	ldrb	r0, [r7, #7]
    f382:	2301      	movs	r3, #1
    f384:	2200      	movs	r2, #0
    f386:	2100      	movs	r1, #0
    f388:	4c13      	ldr	r4, [pc, #76]	; (f3d8 <usbdc_set_req+0xd8>)
    f38a:	47a0      	blx	r4
    f38c:	4603      	mov	r3, r0
    f38e:	2b00      	cmp	r3, #0
    f390:	bf0c      	ite	eq
    f392:	2301      	moveq	r3, #1
    f394:	2300      	movne	r3, #0
    f396:	b2db      	uxtb	r3, r3
    f398:	e01a      	b.n	f3d0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    f39a:	79fb      	ldrb	r3, [r7, #7]
    f39c:	6839      	ldr	r1, [r7, #0]
    f39e:	4618      	mov	r0, r3
    f3a0:	4b0f      	ldr	r3, [pc, #60]	; (f3e0 <usbdc_set_req+0xe0>)
    f3a2:	4798      	blx	r3
    f3a4:	4603      	mov	r3, r0
    f3a6:	e013      	b.n	f3d0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    f3a8:	79fb      	ldrb	r3, [r7, #7]
    f3aa:	6839      	ldr	r1, [r7, #0]
    f3ac:	4618      	mov	r0, r3
    f3ae:	4b0d      	ldr	r3, [pc, #52]	; (f3e4 <usbdc_set_req+0xe4>)
    f3b0:	4798      	blx	r3
    f3b2:	4603      	mov	r3, r0
    f3b4:	e00c      	b.n	f3d0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    f3b6:	683b      	ldr	r3, [r7, #0]
    f3b8:	885b      	ldrh	r3, [r3, #2]
    f3ba:	b29a      	uxth	r2, r3
    f3bc:	683b      	ldr	r3, [r7, #0]
    f3be:	889b      	ldrh	r3, [r3, #4]
    f3c0:	b29b      	uxth	r3, r3
    f3c2:	4619      	mov	r1, r3
    f3c4:	4610      	mov	r0, r2
    f3c6:	4b08      	ldr	r3, [pc, #32]	; (f3e8 <usbdc_set_req+0xe8>)
    f3c8:	4798      	blx	r3
    f3ca:	4603      	mov	r3, r0
    f3cc:	e000      	b.n	f3d0 <usbdc_set_req+0xd0>
	default:
		return false;
    f3ce:	2300      	movs	r3, #0
	}
}
    f3d0:	4618      	mov	r0, r3
    f3d2:	370c      	adds	r7, #12
    f3d4:	46bd      	mov	sp, r7
    f3d6:	bd90      	pop	{r4, r7, pc}
    f3d8:	0000f6d5 	.word	0x0000f6d5
    f3dc:	0000f0b5 	.word	0x0000f0b5
    f3e0:	0000efd1 	.word	0x0000efd1
    f3e4:	0000f029 	.word	0x0000f029
    f3e8:	0000f1c1 	.word	0x0000f1c1

0000f3ec <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    f3ec:	b580      	push	{r7, lr}
    f3ee:	b082      	sub	sp, #8
    f3f0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    f3f2:	4b0a      	ldr	r3, [pc, #40]	; (f41c <usbdc_sof_notify+0x30>)
    f3f4:	685b      	ldr	r3, [r3, #4]
    f3f6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    f3f8:	e009      	b.n	f40e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    f3fa:	687b      	ldr	r3, [r7, #4]
    f3fc:	685b      	ldr	r3, [r3, #4]
    f3fe:	2b00      	cmp	r3, #0
    f400:	d002      	beq.n	f408 <usbdc_sof_notify+0x1c>
			sof->cb();
    f402:	687b      	ldr	r3, [r7, #4]
    f404:	685b      	ldr	r3, [r3, #4]
    f406:	4798      	blx	r3
		}
		sof = sof->next;
    f408:	687b      	ldr	r3, [r7, #4]
    f40a:	681b      	ldr	r3, [r3, #0]
    f40c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    f40e:	687b      	ldr	r3, [r7, #4]
    f410:	2b00      	cmp	r3, #0
    f412:	d1f2      	bne.n	f3fa <usbdc_sof_notify+0xe>
	}
}
    f414:	bf00      	nop
    f416:	3708      	adds	r7, #8
    f418:	46bd      	mov	sp, r7
    f41a:	bd80      	pop	{r7, pc}
    f41c:	200025e0 	.word	0x200025e0

0000f420 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    f420:	b580      	push	{r7, lr}
    f422:	b084      	sub	sp, #16
    f424:	af00      	add	r7, sp, #0
    f426:	4603      	mov	r3, r0
    f428:	6039      	str	r1, [r7, #0]
    f42a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    f42c:	4b0b      	ldr	r3, [pc, #44]	; (f45c <usbdc_change_notify+0x3c>)
    f42e:	68db      	ldr	r3, [r3, #12]
    f430:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    f432:	e00c      	b.n	f44e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    f434:	68fb      	ldr	r3, [r7, #12]
    f436:	685b      	ldr	r3, [r3, #4]
    f438:	2b00      	cmp	r3, #0
    f43a:	d005      	beq.n	f448 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    f43c:	68fb      	ldr	r3, [r7, #12]
    f43e:	685b      	ldr	r3, [r3, #4]
    f440:	79fa      	ldrb	r2, [r7, #7]
    f442:	6839      	ldr	r1, [r7, #0]
    f444:	4610      	mov	r0, r2
    f446:	4798      	blx	r3
		}
		cg = cg->next;
    f448:	68fb      	ldr	r3, [r7, #12]
    f44a:	681b      	ldr	r3, [r3, #0]
    f44c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    f44e:	68fb      	ldr	r3, [r7, #12]
    f450:	2b00      	cmp	r3, #0
    f452:	d1ef      	bne.n	f434 <usbdc_change_notify+0x14>
	}
}
    f454:	bf00      	nop
    f456:	3710      	adds	r7, #16
    f458:	46bd      	mov	sp, r7
    f45a:	bd80      	pop	{r7, pc}
    f45c:	200025e0 	.word	0x200025e0

0000f460 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f460:	b580      	push	{r7, lr}
    f462:	b084      	sub	sp, #16
    f464:	af00      	add	r7, sp, #0
    f466:	4603      	mov	r3, r0
    f468:	6039      	str	r1, [r7, #0]
    f46a:	71fb      	strb	r3, [r7, #7]
    f46c:	4613      	mov	r3, r2
    f46e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    f470:	4b12      	ldr	r3, [pc, #72]	; (f4bc <usbdc_request_handler+0x5c>)
    f472:	689b      	ldr	r3, [r3, #8]
    f474:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    f476:	e019      	b.n	f4ac <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    f478:	68fb      	ldr	r3, [r7, #12]
    f47a:	685b      	ldr	r3, [r3, #4]
    f47c:	2b00      	cmp	r3, #0
    f47e:	d012      	beq.n	f4a6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    f480:	68fb      	ldr	r3, [r7, #12]
    f482:	685b      	ldr	r3, [r3, #4]
    f484:	79ba      	ldrb	r2, [r7, #6]
    f486:	79f8      	ldrb	r0, [r7, #7]
    f488:	6839      	ldr	r1, [r7, #0]
    f48a:	4798      	blx	r3
    f48c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    f48e:	68bb      	ldr	r3, [r7, #8]
    f490:	2b00      	cmp	r3, #0
    f492:	d101      	bne.n	f498 <usbdc_request_handler+0x38>
				return true;
    f494:	2301      	movs	r3, #1
    f496:	e00d      	b.n	f4b4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    f498:	68bb      	ldr	r3, [r7, #8]
    f49a:	f113 0f0a 	cmn.w	r3, #10
    f49e:	d002      	beq.n	f4a6 <usbdc_request_handler+0x46>
				return -1;
    f4a0:	f04f 33ff 	mov.w	r3, #4294967295
    f4a4:	e006      	b.n	f4b4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    f4a6:	68fb      	ldr	r3, [r7, #12]
    f4a8:	681b      	ldr	r3, [r3, #0]
    f4aa:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    f4ac:	68fb      	ldr	r3, [r7, #12]
    f4ae:	2b00      	cmp	r3, #0
    f4b0:	d1e2      	bne.n	f478 <usbdc_request_handler+0x18>
	}
	return false;
    f4b2:	2300      	movs	r3, #0
}
    f4b4:	4618      	mov	r0, r3
    f4b6:	3710      	adds	r7, #16
    f4b8:	46bd      	mov	sp, r7
    f4ba:	bd80      	pop	{r7, pc}
    f4bc:	200025e0 	.word	0x200025e0

0000f4c0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    f4c0:	b580      	push	{r7, lr}
    f4c2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    f4c4:	4b01      	ldr	r3, [pc, #4]	; (f4cc <usbd_sof_cb+0xc>)
    f4c6:	4798      	blx	r3
}
    f4c8:	bf00      	nop
    f4ca:	bd80      	pop	{r7, pc}
    f4cc:	0000f3ed 	.word	0x0000f3ed

0000f4d0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    f4d0:	b580      	push	{r7, lr}
    f4d2:	b082      	sub	sp, #8
    f4d4:	af00      	add	r7, sp, #0
    f4d6:	4603      	mov	r3, r0
    f4d8:	6039      	str	r1, [r7, #0]
    f4da:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    f4dc:	79fb      	ldrb	r3, [r7, #7]
    f4de:	2200      	movs	r2, #0
    f4e0:	6839      	ldr	r1, [r7, #0]
    f4e2:	4618      	mov	r0, r3
    f4e4:	4b14      	ldr	r3, [pc, #80]	; (f538 <usbdc_cb_ctl_req+0x68>)
    f4e6:	4798      	blx	r3
    f4e8:	4603      	mov	r3, r0
    f4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    f4ee:	d00b      	beq.n	f508 <usbdc_cb_ctl_req+0x38>
    f4f0:	2b01      	cmp	r3, #1
    f4f2:	d007      	beq.n	f504 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    f4f4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    f4f6:	683b      	ldr	r3, [r7, #0]
    f4f8:	781b      	ldrb	r3, [r3, #0]
    f4fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    f4fe:	2b00      	cmp	r3, #0
    f500:	d007      	beq.n	f512 <usbdc_cb_ctl_req+0x42>
    f502:	e003      	b.n	f50c <usbdc_cb_ctl_req+0x3c>
		return true;
    f504:	2301      	movs	r3, #1
    f506:	e013      	b.n	f530 <usbdc_cb_ctl_req+0x60>
		return false;
    f508:	2300      	movs	r3, #0
    f50a:	e011      	b.n	f530 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    f50c:	2b80      	cmp	r3, #128	; 0x80
    f50e:	d007      	beq.n	f520 <usbdc_cb_ctl_req+0x50>
    f510:	e00d      	b.n	f52e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    f512:	79fb      	ldrb	r3, [r7, #7]
    f514:	6839      	ldr	r1, [r7, #0]
    f516:	4618      	mov	r0, r3
    f518:	4b08      	ldr	r3, [pc, #32]	; (f53c <usbdc_cb_ctl_req+0x6c>)
    f51a:	4798      	blx	r3
    f51c:	4603      	mov	r3, r0
    f51e:	e007      	b.n	f530 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    f520:	79fb      	ldrb	r3, [r7, #7]
    f522:	6839      	ldr	r1, [r7, #0]
    f524:	4618      	mov	r0, r3
    f526:	4b06      	ldr	r3, [pc, #24]	; (f540 <usbdc_cb_ctl_req+0x70>)
    f528:	4798      	blx	r3
    f52a:	4603      	mov	r3, r0
    f52c:	e000      	b.n	f530 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    f52e:	2300      	movs	r3, #0
	}
}
    f530:	4618      	mov	r0, r3
    f532:	3708      	adds	r7, #8
    f534:	46bd      	mov	sp, r7
    f536:	bd80      	pop	{r7, pc}
    f538:	0000f461 	.word	0x0000f461
    f53c:	0000f301 	.word	0x0000f301
    f540:	0000ef29 	.word	0x0000ef29

0000f544 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    f544:	b580      	push	{r7, lr}
    f546:	b082      	sub	sp, #8
    f548:	af00      	add	r7, sp, #0
    f54a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    f54c:	687b      	ldr	r3, [r7, #4]
    f54e:	781b      	ldrb	r3, [r3, #0]
    f550:	2b00      	cmp	r3, #0
    f552:	d135      	bne.n	f5c0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    f554:	687b      	ldr	r3, [r7, #4]
    f556:	785b      	ldrb	r3, [r3, #1]
    f558:	2b05      	cmp	r3, #5
    f55a:	d019      	beq.n	f590 <usbdc_ctrl_status_end+0x4c>
    f55c:	2b09      	cmp	r3, #9
    f55e:	d000      	beq.n	f562 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    f560:	e02f      	b.n	f5c2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    f562:	687b      	ldr	r3, [r7, #4]
    f564:	885b      	ldrh	r3, [r3, #2]
    f566:	b29b      	uxth	r3, r3
    f568:	b2da      	uxtb	r2, r3
    f56a:	4b17      	ldr	r3, [pc, #92]	; (f5c8 <usbdc_ctrl_status_end+0x84>)
    f56c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    f56e:	687b      	ldr	r3, [r7, #4]
    f570:	885b      	ldrh	r3, [r3, #2]
    f572:	b29b      	uxth	r3, r3
    f574:	2b00      	cmp	r3, #0
    f576:	d001      	beq.n	f57c <usbdc_ctrl_status_end+0x38>
    f578:	2204      	movs	r2, #4
    f57a:	e000      	b.n	f57e <usbdc_ctrl_status_end+0x3a>
    f57c:	2203      	movs	r2, #3
    f57e:	4b12      	ldr	r3, [pc, #72]	; (f5c8 <usbdc_ctrl_status_end+0x84>)
    f580:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    f582:	4b11      	ldr	r3, [pc, #68]	; (f5c8 <usbdc_ctrl_status_end+0x84>)
    f584:	7e9b      	ldrb	r3, [r3, #26]
    f586:	4619      	mov	r1, r3
    f588:	2001      	movs	r0, #1
    f58a:	4b10      	ldr	r3, [pc, #64]	; (f5cc <usbdc_ctrl_status_end+0x88>)
    f58c:	4798      	blx	r3
		break;
    f58e:	e018      	b.n	f5c2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    f590:	687b      	ldr	r3, [r7, #4]
    f592:	885b      	ldrh	r3, [r3, #2]
    f594:	b29b      	uxth	r3, r3
    f596:	b2db      	uxtb	r3, r3
    f598:	4618      	mov	r0, r3
    f59a:	4b0d      	ldr	r3, [pc, #52]	; (f5d0 <usbdc_ctrl_status_end+0x8c>)
    f59c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    f59e:	687b      	ldr	r3, [r7, #4]
    f5a0:	885b      	ldrh	r3, [r3, #2]
    f5a2:	b29b      	uxth	r3, r3
    f5a4:	2b00      	cmp	r3, #0
    f5a6:	d001      	beq.n	f5ac <usbdc_ctrl_status_end+0x68>
    f5a8:	2203      	movs	r2, #3
    f5aa:	e000      	b.n	f5ae <usbdc_ctrl_status_end+0x6a>
    f5ac:	2202      	movs	r2, #2
    f5ae:	4b06      	ldr	r3, [pc, #24]	; (f5c8 <usbdc_ctrl_status_end+0x84>)
    f5b0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    f5b2:	4b05      	ldr	r3, [pc, #20]	; (f5c8 <usbdc_ctrl_status_end+0x84>)
    f5b4:	7e9b      	ldrb	r3, [r3, #26]
    f5b6:	4619      	mov	r1, r3
    f5b8:	2001      	movs	r0, #1
    f5ba:	4b04      	ldr	r3, [pc, #16]	; (f5cc <usbdc_ctrl_status_end+0x88>)
    f5bc:	4798      	blx	r3
		break;
    f5be:	e000      	b.n	f5c2 <usbdc_ctrl_status_end+0x7e>
		return;
    f5c0:	bf00      	nop
	}
}
    f5c2:	3708      	adds	r7, #8
    f5c4:	46bd      	mov	sp, r7
    f5c6:	bd80      	pop	{r7, pc}
    f5c8:	200025e0 	.word	0x200025e0
    f5cc:	0000f421 	.word	0x0000f421
    f5d0:	0000f1a1 	.word	0x0000f1a1

0000f5d4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    f5d4:	b580      	push	{r7, lr}
    f5d6:	b082      	sub	sp, #8
    f5d8:	af00      	add	r7, sp, #0
    f5da:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    f5dc:	2201      	movs	r2, #1
    f5de:	6879      	ldr	r1, [r7, #4]
    f5e0:	2000      	movs	r0, #0
    f5e2:	4b03      	ldr	r3, [pc, #12]	; (f5f0 <usbdc_ctrl_data_end+0x1c>)
    f5e4:	4798      	blx	r3
	return false;
    f5e6:	2300      	movs	r3, #0
}
    f5e8:	4618      	mov	r0, r3
    f5ea:	3708      	adds	r7, #8
    f5ec:	46bd      	mov	sp, r7
    f5ee:	bd80      	pop	{r7, pc}
    f5f0:	0000f461 	.word	0x0000f461

0000f5f4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    f5f4:	b580      	push	{r7, lr}
    f5f6:	b082      	sub	sp, #8
    f5f8:	af00      	add	r7, sp, #0
    f5fa:	4603      	mov	r3, r0
    f5fc:	603a      	str	r2, [r7, #0]
    f5fe:	71fb      	strb	r3, [r7, #7]
    f600:	460b      	mov	r3, r1
    f602:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    f604:	79bb      	ldrb	r3, [r7, #6]
    f606:	2b00      	cmp	r3, #0
    f608:	d002      	beq.n	f610 <usbdc_cb_ctl_done+0x1c>
    f60a:	2b01      	cmp	r3, #1
    f60c:	d004      	beq.n	f618 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    f60e:	e008      	b.n	f622 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    f610:	6838      	ldr	r0, [r7, #0]
    f612:	4b06      	ldr	r3, [pc, #24]	; (f62c <usbdc_cb_ctl_done+0x38>)
    f614:	4798      	blx	r3
		break;
    f616:	e004      	b.n	f622 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    f618:	6838      	ldr	r0, [r7, #0]
    f61a:	4b05      	ldr	r3, [pc, #20]	; (f630 <usbdc_cb_ctl_done+0x3c>)
    f61c:	4798      	blx	r3
    f61e:	4603      	mov	r3, r0
    f620:	e000      	b.n	f624 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    f622:	2300      	movs	r3, #0
}
    f624:	4618      	mov	r0, r3
    f626:	3708      	adds	r7, #8
    f628:	46bd      	mov	sp, r7
    f62a:	bd80      	pop	{r7, pc}
    f62c:	0000f545 	.word	0x0000f545
    f630:	0000f5d5 	.word	0x0000f5d5

0000f634 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    f634:	b580      	push	{r7, lr}
    f636:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    f638:	4b10      	ldr	r3, [pc, #64]	; (f67c <usbdc_reset+0x48>)
    f63a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    f63c:	4b10      	ldr	r3, [pc, #64]	; (f680 <usbdc_reset+0x4c>)
    f63e:	2202      	movs	r2, #2
    f640:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    f642:	4b0f      	ldr	r3, [pc, #60]	; (f680 <usbdc_reset+0x4c>)
    f644:	2200      	movs	r2, #0
    f646:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    f648:	4b0d      	ldr	r3, [pc, #52]	; (f680 <usbdc_reset+0x4c>)
    f64a:	2200      	movs	r2, #0
    f64c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    f64e:	2000      	movs	r0, #0
    f650:	4b0c      	ldr	r3, [pc, #48]	; (f684 <usbdc_reset+0x50>)
    f652:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    f654:	4b0a      	ldr	r3, [pc, #40]	; (f680 <usbdc_reset+0x4c>)
    f656:	7f1b      	ldrb	r3, [r3, #28]
    f658:	4618      	mov	r0, r3
    f65a:	4b0b      	ldr	r3, [pc, #44]	; (f688 <usbdc_reset+0x54>)
    f65c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    f65e:	4a0b      	ldr	r2, [pc, #44]	; (f68c <usbdc_reset+0x58>)
    f660:	2100      	movs	r1, #0
    f662:	2000      	movs	r0, #0
    f664:	4b0a      	ldr	r3, [pc, #40]	; (f690 <usbdc_reset+0x5c>)
    f666:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    f668:	4a0a      	ldr	r2, [pc, #40]	; (f694 <usbdc_reset+0x60>)
    f66a:	2102      	movs	r1, #2
    f66c:	2000      	movs	r0, #0
    f66e:	4b08      	ldr	r3, [pc, #32]	; (f690 <usbdc_reset+0x5c>)
    f670:	4798      	blx	r3
	usb_d_ep_enable(0);
    f672:	2000      	movs	r0, #0
    f674:	4b08      	ldr	r3, [pc, #32]	; (f698 <usbdc_reset+0x64>)
    f676:	4798      	blx	r3
}
    f678:	bf00      	nop
    f67a:	bd80      	pop	{r7, pc}
    f67c:	0000f081 	.word	0x0000f081
    f680:	200025e0 	.word	0x200025e0
    f684:	00005b05 	.word	0x00005b05
    f688:	00005a41 	.word	0x00005a41
    f68c:	0000f4d1 	.word	0x0000f4d1
    f690:	00005e59 	.word	0x00005e59
    f694:	0000f5f5 	.word	0x0000f5f5
    f698:	00005b55 	.word	0x00005b55

0000f69c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    f69c:	b580      	push	{r7, lr}
    f69e:	b082      	sub	sp, #8
    f6a0:	af00      	add	r7, sp, #0
    f6a2:	4603      	mov	r3, r0
    f6a4:	6039      	str	r1, [r7, #0]
    f6a6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    f6a8:	79fb      	ldrb	r3, [r7, #7]
    f6aa:	2b00      	cmp	r3, #0
    f6ac:	d002      	beq.n	f6b4 <usbd_event_cb+0x18>
    f6ae:	2b01      	cmp	r3, #1
    f6b0:	d005      	beq.n	f6be <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    f6b2:	e007      	b.n	f6c4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    f6b4:	6839      	ldr	r1, [r7, #0]
    f6b6:	2000      	movs	r0, #0
    f6b8:	4b04      	ldr	r3, [pc, #16]	; (f6cc <usbd_event_cb+0x30>)
    f6ba:	4798      	blx	r3
		break;
    f6bc:	e002      	b.n	f6c4 <usbd_event_cb+0x28>
		usbdc_reset();
    f6be:	4b04      	ldr	r3, [pc, #16]	; (f6d0 <usbd_event_cb+0x34>)
    f6c0:	4798      	blx	r3
		break;
    f6c2:	bf00      	nop
	}
}
    f6c4:	bf00      	nop
    f6c6:	3708      	adds	r7, #8
    f6c8:	46bd      	mov	sp, r7
    f6ca:	bd80      	pop	{r7, pc}
    f6cc:	0000f421 	.word	0x0000f421
    f6d0:	0000f635 	.word	0x0000f635

0000f6d4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    f6d4:	b580      	push	{r7, lr}
    f6d6:	b088      	sub	sp, #32
    f6d8:	af00      	add	r7, sp, #0
    f6da:	60b9      	str	r1, [r7, #8]
    f6dc:	607a      	str	r2, [r7, #4]
    f6de:	461a      	mov	r2, r3
    f6e0:	4603      	mov	r3, r0
    f6e2:	73fb      	strb	r3, [r7, #15]
    f6e4:	4613      	mov	r3, r2
    f6e6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    f6e8:	68bb      	ldr	r3, [r7, #8]
    f6ea:	617b      	str	r3, [r7, #20]
    f6ec:	687b      	ldr	r3, [r7, #4]
    f6ee:	61bb      	str	r3, [r7, #24]
    f6f0:	7bfb      	ldrb	r3, [r7, #15]
    f6f2:	773b      	strb	r3, [r7, #28]
    f6f4:	7bbb      	ldrb	r3, [r7, #14]
    f6f6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    f6f8:	f107 0314 	add.w	r3, r7, #20
    f6fc:	4618      	mov	r0, r3
    f6fe:	4b03      	ldr	r3, [pc, #12]	; (f70c <usbdc_xfer+0x38>)
    f700:	4798      	blx	r3
    f702:	4603      	mov	r3, r0
}
    f704:	4618      	mov	r0, r3
    f706:	3720      	adds	r7, #32
    f708:	46bd      	mov	sp, r7
    f70a:	bd80      	pop	{r7, pc}
    f70c:	00005bc5 	.word	0x00005bc5

0000f710 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    f710:	b580      	push	{r7, lr}
    f712:	b082      	sub	sp, #8
    f714:	af00      	add	r7, sp, #0
    f716:	4603      	mov	r3, r0
    f718:	6039      	str	r1, [r7, #0]
    f71a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    f71c:	79fb      	ldrb	r3, [r7, #7]
    f71e:	2b01      	cmp	r3, #1
    f720:	d009      	beq.n	f736 <usbdc_register_handler+0x26>
    f722:	2b02      	cmp	r3, #2
    f724:	d00c      	beq.n	f740 <usbdc_register_handler+0x30>
    f726:	2b00      	cmp	r3, #0
    f728:	d000      	beq.n	f72c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    f72a:	e00e      	b.n	f74a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    f72c:	6839      	ldr	r1, [r7, #0]
    f72e:	4809      	ldr	r0, [pc, #36]	; (f754 <usbdc_register_handler+0x44>)
    f730:	4b09      	ldr	r3, [pc, #36]	; (f758 <usbdc_register_handler+0x48>)
    f732:	4798      	blx	r3
		break;
    f734:	e009      	b.n	f74a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    f736:	6839      	ldr	r1, [r7, #0]
    f738:	4808      	ldr	r0, [pc, #32]	; (f75c <usbdc_register_handler+0x4c>)
    f73a:	4b07      	ldr	r3, [pc, #28]	; (f758 <usbdc_register_handler+0x48>)
    f73c:	4798      	blx	r3
		break;
    f73e:	e004      	b.n	f74a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    f740:	6839      	ldr	r1, [r7, #0]
    f742:	4807      	ldr	r0, [pc, #28]	; (f760 <usbdc_register_handler+0x50>)
    f744:	4b04      	ldr	r3, [pc, #16]	; (f758 <usbdc_register_handler+0x48>)
    f746:	4798      	blx	r3
		break;
    f748:	bf00      	nop
	}
}
    f74a:	bf00      	nop
    f74c:	3708      	adds	r7, #8
    f74e:	46bd      	mov	sp, r7
    f750:	bd80      	pop	{r7, pc}
    f752:	bf00      	nop
    f754:	200025e4 	.word	0x200025e4
    f758:	00005fb1 	.word	0x00005fb1
    f75c:	200025e8 	.word	0x200025e8
    f760:	200025ec 	.word	0x200025ec

0000f764 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    f764:	b580      	push	{r7, lr}
    f766:	b084      	sub	sp, #16
    f768:	af00      	add	r7, sp, #0
    f76a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    f76c:	687b      	ldr	r3, [r7, #4]
    f76e:	2b00      	cmp	r3, #0
    f770:	bf14      	ite	ne
    f772:	2301      	movne	r3, #1
    f774:	2300      	moveq	r3, #0
    f776:	b2db      	uxtb	r3, r3
    f778:	f240 3255 	movw	r2, #853	; 0x355
    f77c:	4910      	ldr	r1, [pc, #64]	; (f7c0 <usbdc_init+0x5c>)
    f77e:	4618      	mov	r0, r3
    f780:	4b10      	ldr	r3, [pc, #64]	; (f7c4 <usbdc_init+0x60>)
    f782:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    f784:	4b10      	ldr	r3, [pc, #64]	; (f7c8 <usbdc_init+0x64>)
    f786:	4798      	blx	r3
    f788:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    f78a:	68fb      	ldr	r3, [r7, #12]
    f78c:	2b00      	cmp	r3, #0
    f78e:	da01      	bge.n	f794 <usbdc_init+0x30>
		return rc;
    f790:	68fb      	ldr	r3, [r7, #12]
    f792:	e010      	b.n	f7b6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    f794:	2220      	movs	r2, #32
    f796:	2100      	movs	r1, #0
    f798:	480c      	ldr	r0, [pc, #48]	; (f7cc <usbdc_init+0x68>)
    f79a:	4b0d      	ldr	r3, [pc, #52]	; (f7d0 <usbdc_init+0x6c>)
    f79c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    f79e:	4a0b      	ldr	r2, [pc, #44]	; (f7cc <usbdc_init+0x68>)
    f7a0:	687b      	ldr	r3, [r7, #4]
    f7a2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    f7a4:	490b      	ldr	r1, [pc, #44]	; (f7d4 <usbdc_init+0x70>)
    f7a6:	2000      	movs	r0, #0
    f7a8:	4b0b      	ldr	r3, [pc, #44]	; (f7d8 <usbdc_init+0x74>)
    f7aa:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    f7ac:	490b      	ldr	r1, [pc, #44]	; (f7dc <usbdc_init+0x78>)
    f7ae:	2001      	movs	r0, #1
    f7b0:	4b09      	ldr	r3, [pc, #36]	; (f7d8 <usbdc_init+0x74>)
    f7b2:	4798      	blx	r3

	return 0;
    f7b4:	2300      	movs	r3, #0
}
    f7b6:	4618      	mov	r0, r3
    f7b8:	3710      	adds	r7, #16
    f7ba:	46bd      	mov	sp, r7
    f7bc:	bd80      	pop	{r7, pc}
    f7be:	bf00      	nop
    f7c0:	00012cb8 	.word	0x00012cb8
    f7c4:	00005ed5 	.word	0x00005ed5
    f7c8:	0000592d 	.word	0x0000592d
    f7cc:	200025e0 	.word	0x200025e0
    f7d0:	00011875 	.word	0x00011875
    f7d4:	0000f4c1 	.word	0x0000f4c1
    f7d8:	000059d9 	.word	0x000059d9
    f7dc:	0000f69d 	.word	0x0000f69d

0000f7e0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    f7e0:	b580      	push	{r7, lr}
    f7e2:	b082      	sub	sp, #8
    f7e4:	af00      	add	r7, sp, #0
    f7e6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    f7e8:	6879      	ldr	r1, [r7, #4]
    f7ea:	4803      	ldr	r0, [pc, #12]	; (f7f8 <usbdc_register_function+0x18>)
    f7ec:	4b03      	ldr	r3, [pc, #12]	; (f7fc <usbdc_register_function+0x1c>)
    f7ee:	4798      	blx	r3
}
    f7f0:	bf00      	nop
    f7f2:	3708      	adds	r7, #8
    f7f4:	46bd      	mov	sp, r7
    f7f6:	bd80      	pop	{r7, pc}
    f7f8:	200025f0 	.word	0x200025f0
    f7fc:	00005fb1 	.word	0x00005fb1

0000f800 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    f800:	b580      	push	{r7, lr}
    f802:	b082      	sub	sp, #8
    f804:	af00      	add	r7, sp, #0
    f806:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    f808:	4b0f      	ldr	r3, [pc, #60]	; (f848 <usbdc_start+0x48>)
    f80a:	7e9b      	ldrb	r3, [r3, #26]
    f80c:	2b00      	cmp	r3, #0
    f80e:	d002      	beq.n	f816 <usbdc_start+0x16>
		return ERR_BUSY;
    f810:	f06f 0303 	mvn.w	r3, #3
    f814:	e013      	b.n	f83e <usbdc_start+0x3e>
	}

	if (desces) {
    f816:	687b      	ldr	r3, [r7, #4]
    f818:	2b00      	cmp	r3, #0
    f81a:	d00e      	beq.n	f83a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    f81c:	4a0a      	ldr	r2, [pc, #40]	; (f848 <usbdc_start+0x48>)
    f81e:	687b      	ldr	r3, [r7, #4]
    f820:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    f822:	687b      	ldr	r3, [r7, #4]
    f824:	681b      	ldr	r3, [r3, #0]
    f826:	79da      	ldrb	r2, [r3, #7]
    f828:	4b07      	ldr	r3, [pc, #28]	; (f848 <usbdc_start+0x48>)
    f82a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    f82c:	4b06      	ldr	r3, [pc, #24]	; (f848 <usbdc_start+0x48>)
    f82e:	2201      	movs	r2, #1
    f830:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    f832:	4b06      	ldr	r3, [pc, #24]	; (f84c <usbdc_start+0x4c>)
    f834:	4798      	blx	r3
	return ERR_NONE;
    f836:	2300      	movs	r3, #0
    f838:	e001      	b.n	f83e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    f83a:	f06f 0308 	mvn.w	r3, #8
}
    f83e:	4618      	mov	r0, r3
    f840:	3708      	adds	r7, #8
    f842:	46bd      	mov	sp, r7
    f844:	bd80      	pop	{r7, pc}
    f846:	bf00      	nop
    f848:	200025e0 	.word	0x200025e0
    f84c:	000059fd 	.word	0x000059fd

0000f850 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    f850:	b580      	push	{r7, lr}
    f852:	af00      	add	r7, sp, #0
	usb_d_attach();
    f854:	4b01      	ldr	r3, [pc, #4]	; (f85c <usbdc_attach+0xc>)
    f856:	4798      	blx	r3
}
    f858:	bf00      	nop
    f85a:	bd80      	pop	{r7, pc}
    f85c:	00005a11 	.word	0x00005a11

0000f860 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    f860:	b480      	push	{r7}
    f862:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    f864:	4b03      	ldr	r3, [pc, #12]	; (f874 <usbdc_get_ctrl_buffer+0x14>)
    f866:	695b      	ldr	r3, [r3, #20]
}
    f868:	4618      	mov	r0, r3
    f86a:	46bd      	mov	sp, r7
    f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f870:	4770      	bx	lr
    f872:	bf00      	nop
    f874:	200025e0 	.word	0x200025e0

0000f878 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    f878:	b480      	push	{r7}
    f87a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    f87c:	4b07      	ldr	r3, [pc, #28]	; (f89c <usbdc_get_state+0x24>)
    f87e:	7e9b      	ldrb	r3, [r3, #26]
    f880:	f003 0310 	and.w	r3, r3, #16
    f884:	2b00      	cmp	r3, #0
    f886:	d001      	beq.n	f88c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    f888:	2310      	movs	r3, #16
    f88a:	e001      	b.n	f890 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    f88c:	4b03      	ldr	r3, [pc, #12]	; (f89c <usbdc_get_state+0x24>)
    f88e:	7e9b      	ldrb	r3, [r3, #26]
}
    f890:	4618      	mov	r0, r3
    f892:	46bd      	mov	sp, r7
    f894:	f85d 7b04 	ldr.w	r7, [sp], #4
    f898:	4770      	bx	lr
    f89a:	bf00      	nop
    f89c:	200025e0 	.word	0x200025e0

0000f8a0 <usb_get_u16>:
{
    f8a0:	b480      	push	{r7}
    f8a2:	b083      	sub	sp, #12
    f8a4:	af00      	add	r7, sp, #0
    f8a6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f8a8:	687b      	ldr	r3, [r7, #4]
    f8aa:	781b      	ldrb	r3, [r3, #0]
    f8ac:	b29a      	uxth	r2, r3
    f8ae:	687b      	ldr	r3, [r7, #4]
    f8b0:	3301      	adds	r3, #1
    f8b2:	781b      	ldrb	r3, [r3, #0]
    f8b4:	b29b      	uxth	r3, r3
    f8b6:	021b      	lsls	r3, r3, #8
    f8b8:	b29b      	uxth	r3, r3
    f8ba:	4413      	add	r3, r2
    f8bc:	b29b      	uxth	r3, r3
}
    f8be:	4618      	mov	r0, r3
    f8c0:	370c      	adds	r7, #12
    f8c2:	46bd      	mov	sp, r7
    f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    f8c8:	4770      	bx	lr

0000f8ca <usb_desc_len>:
{
    f8ca:	b480      	push	{r7}
    f8cc:	b083      	sub	sp, #12
    f8ce:	af00      	add	r7, sp, #0
    f8d0:	6078      	str	r0, [r7, #4]
	return desc[0];
    f8d2:	687b      	ldr	r3, [r7, #4]
    f8d4:	781b      	ldrb	r3, [r3, #0]
}
    f8d6:	4618      	mov	r0, r3
    f8d8:	370c      	adds	r7, #12
    f8da:	46bd      	mov	sp, r7
    f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    f8e0:	4770      	bx	lr

0000f8e2 <usb_desc_type>:
{
    f8e2:	b480      	push	{r7}
    f8e4:	b083      	sub	sp, #12
    f8e6:	af00      	add	r7, sp, #0
    f8e8:	6078      	str	r0, [r7, #4]
	return desc[1];
    f8ea:	687b      	ldr	r3, [r7, #4]
    f8ec:	3301      	adds	r3, #1
    f8ee:	781b      	ldrb	r3, [r3, #0]
}
    f8f0:	4618      	mov	r0, r3
    f8f2:	370c      	adds	r7, #12
    f8f4:	46bd      	mov	sp, r7
    f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    f8fa:	4770      	bx	lr

0000f8fc <usb_desc_next>:
{
    f8fc:	b580      	push	{r7, lr}
    f8fe:	b082      	sub	sp, #8
    f900:	af00      	add	r7, sp, #0
    f902:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f904:	6878      	ldr	r0, [r7, #4]
    f906:	4b05      	ldr	r3, [pc, #20]	; (f91c <usb_desc_next+0x20>)
    f908:	4798      	blx	r3
    f90a:	4603      	mov	r3, r0
    f90c:	461a      	mov	r2, r3
    f90e:	687b      	ldr	r3, [r7, #4]
    f910:	4413      	add	r3, r2
}
    f912:	4618      	mov	r0, r3
    f914:	3708      	adds	r7, #8
    f916:	46bd      	mov	sp, r7
    f918:	bd80      	pop	{r7, pc}
    f91a:	bf00      	nop
    f91c:	0000f8cb 	.word	0x0000f8cb

0000f920 <usb_cfg_desc_total_len>:
{
    f920:	b580      	push	{r7, lr}
    f922:	b082      	sub	sp, #8
    f924:	af00      	add	r7, sp, #0
    f926:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f928:	687b      	ldr	r3, [r7, #4]
    f92a:	3302      	adds	r3, #2
    f92c:	4618      	mov	r0, r3
    f92e:	4b03      	ldr	r3, [pc, #12]	; (f93c <usb_cfg_desc_total_len+0x1c>)
    f930:	4798      	blx	r3
    f932:	4603      	mov	r3, r0
}
    f934:	4618      	mov	r0, r3
    f936:	3708      	adds	r7, #8
    f938:	46bd      	mov	sp, r7
    f93a:	bd80      	pop	{r7, pc}
    f93c:	0000f8a1 	.word	0x0000f8a1

0000f940 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    f940:	b580      	push	{r7, lr}
    f942:	b082      	sub	sp, #8
    f944:	af00      	add	r7, sp, #0
    f946:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    f948:	6878      	ldr	r0, [r7, #4]
    f94a:	4b05      	ldr	r3, [pc, #20]	; (f960 <usb_cfg_desc_next+0x20>)
    f94c:	4798      	blx	r3
    f94e:	4603      	mov	r3, r0
    f950:	461a      	mov	r2, r3
    f952:	687b      	ldr	r3, [r7, #4]
    f954:	4413      	add	r3, r2
}
    f956:	4618      	mov	r0, r3
    f958:	3708      	adds	r7, #8
    f95a:	46bd      	mov	sp, r7
    f95c:	bd80      	pop	{r7, pc}
    f95e:	bf00      	nop
    f960:	0000f921 	.word	0x0000f921

0000f964 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    f964:	b580      	push	{r7, lr}
    f966:	b084      	sub	sp, #16
    f968:	af00      	add	r7, sp, #0
    f96a:	60f8      	str	r0, [r7, #12]
    f96c:	60b9      	str	r1, [r7, #8]
    f96e:	4613      	mov	r3, r2
    f970:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f972:	e015      	b.n	f9a0 <usb_find_desc+0x3c>
		_desc_len_check();
    f974:	68f8      	ldr	r0, [r7, #12]
    f976:	4b0f      	ldr	r3, [pc, #60]	; (f9b4 <usb_find_desc+0x50>)
    f978:	4798      	blx	r3
    f97a:	4603      	mov	r3, r0
    f97c:	2b01      	cmp	r3, #1
    f97e:	d801      	bhi.n	f984 <usb_find_desc+0x20>
    f980:	2300      	movs	r3, #0
    f982:	e012      	b.n	f9aa <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    f984:	68f8      	ldr	r0, [r7, #12]
    f986:	4b0c      	ldr	r3, [pc, #48]	; (f9b8 <usb_find_desc+0x54>)
    f988:	4798      	blx	r3
    f98a:	4603      	mov	r3, r0
    f98c:	461a      	mov	r2, r3
    f98e:	79fb      	ldrb	r3, [r7, #7]
    f990:	4293      	cmp	r3, r2
    f992:	d101      	bne.n	f998 <usb_find_desc+0x34>
			return desc;
    f994:	68fb      	ldr	r3, [r7, #12]
    f996:	e008      	b.n	f9aa <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    f998:	68f8      	ldr	r0, [r7, #12]
    f99a:	4b08      	ldr	r3, [pc, #32]	; (f9bc <usb_find_desc+0x58>)
    f99c:	4798      	blx	r3
    f99e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    f9a0:	68fa      	ldr	r2, [r7, #12]
    f9a2:	68bb      	ldr	r3, [r7, #8]
    f9a4:	429a      	cmp	r2, r3
    f9a6:	d3e5      	bcc.n	f974 <usb_find_desc+0x10>
	}
	return NULL;
    f9a8:	2300      	movs	r3, #0
}
    f9aa:	4618      	mov	r0, r3
    f9ac:	3710      	adds	r7, #16
    f9ae:	46bd      	mov	sp, r7
    f9b0:	bd80      	pop	{r7, pc}
    f9b2:	bf00      	nop
    f9b4:	0000f8cb 	.word	0x0000f8cb
    f9b8:	0000f8e3 	.word	0x0000f8e3
    f9bc:	0000f8fd 	.word	0x0000f8fd

0000f9c0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    f9c0:	b580      	push	{r7, lr}
    f9c2:	b082      	sub	sp, #8
    f9c4:	af00      	add	r7, sp, #0
    f9c6:	6078      	str	r0, [r7, #4]
    f9c8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f9ca:	e019      	b.n	fa00 <usb_find_ep_desc+0x40>
		_desc_len_check();
    f9cc:	6878      	ldr	r0, [r7, #4]
    f9ce:	4b12      	ldr	r3, [pc, #72]	; (fa18 <usb_find_ep_desc+0x58>)
    f9d0:	4798      	blx	r3
    f9d2:	4603      	mov	r3, r0
    f9d4:	2b01      	cmp	r3, #1
    f9d6:	d801      	bhi.n	f9dc <usb_find_ep_desc+0x1c>
    f9d8:	2300      	movs	r3, #0
    f9da:	e018      	b.n	fa0e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    f9dc:	6878      	ldr	r0, [r7, #4]
    f9de:	4b0f      	ldr	r3, [pc, #60]	; (fa1c <usb_find_ep_desc+0x5c>)
    f9e0:	4798      	blx	r3
    f9e2:	4603      	mov	r3, r0
    f9e4:	2b04      	cmp	r3, #4
    f9e6:	d010      	beq.n	fa0a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    f9e8:	6878      	ldr	r0, [r7, #4]
    f9ea:	4b0c      	ldr	r3, [pc, #48]	; (fa1c <usb_find_ep_desc+0x5c>)
    f9ec:	4798      	blx	r3
    f9ee:	4603      	mov	r3, r0
    f9f0:	2b05      	cmp	r3, #5
    f9f2:	d101      	bne.n	f9f8 <usb_find_ep_desc+0x38>
			return desc;
    f9f4:	687b      	ldr	r3, [r7, #4]
    f9f6:	e00a      	b.n	fa0e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    f9f8:	6878      	ldr	r0, [r7, #4]
    f9fa:	4b09      	ldr	r3, [pc, #36]	; (fa20 <usb_find_ep_desc+0x60>)
    f9fc:	4798      	blx	r3
    f9fe:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    fa00:	687a      	ldr	r2, [r7, #4]
    fa02:	683b      	ldr	r3, [r7, #0]
    fa04:	429a      	cmp	r2, r3
    fa06:	d3e1      	bcc.n	f9cc <usb_find_ep_desc+0xc>
    fa08:	e000      	b.n	fa0c <usb_find_ep_desc+0x4c>
			break;
    fa0a:	bf00      	nop
	}
	return NULL;
    fa0c:	2300      	movs	r3, #0
}
    fa0e:	4618      	mov	r0, r3
    fa10:	3708      	adds	r7, #8
    fa12:	46bd      	mov	sp, r7
    fa14:	bd80      	pop	{r7, pc}
    fa16:	bf00      	nop
    fa18:	0000f8cb 	.word	0x0000f8cb
    fa1c:	0000f8e3 	.word	0x0000f8e3
    fa20:	0000f8fd 	.word	0x0000f8fd

0000fa24 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    fa24:	b580      	push	{r7, lr}
    fa26:	b084      	sub	sp, #16
    fa28:	af00      	add	r7, sp, #0
    fa2a:	60f8      	str	r0, [r7, #12]
    fa2c:	60b9      	str	r1, [r7, #8]
    fa2e:	4613      	mov	r3, r2
    fa30:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    fa32:	2202      	movs	r2, #2
    fa34:	68b9      	ldr	r1, [r7, #8]
    fa36:	68f8      	ldr	r0, [r7, #12]
    fa38:	4b15      	ldr	r3, [pc, #84]	; (fa90 <usb_find_cfg_desc+0x6c>)
    fa3a:	4798      	blx	r3
    fa3c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    fa3e:	68fb      	ldr	r3, [r7, #12]
    fa40:	2b00      	cmp	r3, #0
    fa42:	d11a      	bne.n	fa7a <usb_find_cfg_desc+0x56>
		return NULL;
    fa44:	2300      	movs	r3, #0
    fa46:	e01f      	b.n	fa88 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    fa48:	68f8      	ldr	r0, [r7, #12]
    fa4a:	4b12      	ldr	r3, [pc, #72]	; (fa94 <usb_find_cfg_desc+0x70>)
    fa4c:	4798      	blx	r3
    fa4e:	4603      	mov	r3, r0
    fa50:	2b01      	cmp	r3, #1
    fa52:	d801      	bhi.n	fa58 <usb_find_cfg_desc+0x34>
    fa54:	2300      	movs	r3, #0
    fa56:	e017      	b.n	fa88 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    fa58:	68fb      	ldr	r3, [r7, #12]
    fa5a:	3301      	adds	r3, #1
    fa5c:	781b      	ldrb	r3, [r3, #0]
    fa5e:	2b02      	cmp	r3, #2
    fa60:	d110      	bne.n	fa84 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    fa62:	68fb      	ldr	r3, [r7, #12]
    fa64:	3305      	adds	r3, #5
    fa66:	781b      	ldrb	r3, [r3, #0]
    fa68:	79fa      	ldrb	r2, [r7, #7]
    fa6a:	429a      	cmp	r2, r3
    fa6c:	d101      	bne.n	fa72 <usb_find_cfg_desc+0x4e>
			return desc;
    fa6e:	68fb      	ldr	r3, [r7, #12]
    fa70:	e00a      	b.n	fa88 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    fa72:	68f8      	ldr	r0, [r7, #12]
    fa74:	4b08      	ldr	r3, [pc, #32]	; (fa98 <usb_find_cfg_desc+0x74>)
    fa76:	4798      	blx	r3
    fa78:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    fa7a:	68fa      	ldr	r2, [r7, #12]
    fa7c:	68bb      	ldr	r3, [r7, #8]
    fa7e:	429a      	cmp	r2, r3
    fa80:	d3e2      	bcc.n	fa48 <usb_find_cfg_desc+0x24>
    fa82:	e000      	b.n	fa86 <usb_find_cfg_desc+0x62>
			break;
    fa84:	bf00      	nop
	}
	return NULL;
    fa86:	2300      	movs	r3, #0
}
    fa88:	4618      	mov	r0, r3
    fa8a:	3710      	adds	r7, #16
    fa8c:	46bd      	mov	sp, r7
    fa8e:	bd80      	pop	{r7, pc}
    fa90:	0000f965 	.word	0x0000f965
    fa94:	0000f8cb 	.word	0x0000f8cb
    fa98:	0000f941 	.word	0x0000f941

0000fa9c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    fa9c:	b580      	push	{r7, lr}
    fa9e:	b086      	sub	sp, #24
    faa0:	af00      	add	r7, sp, #0
    faa2:	60f8      	str	r0, [r7, #12]
    faa4:	60b9      	str	r1, [r7, #8]
    faa6:	4613      	mov	r3, r2
    faa8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    faaa:	2300      	movs	r3, #0
    faac:	75fb      	strb	r3, [r7, #23]
    faae:	e020      	b.n	faf2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    fab0:	2203      	movs	r2, #3
    fab2:	68b9      	ldr	r1, [r7, #8]
    fab4:	68f8      	ldr	r0, [r7, #12]
    fab6:	4b13      	ldr	r3, [pc, #76]	; (fb04 <usb_find_str_desc+0x68>)
    fab8:	4798      	blx	r3
    faba:	60f8      	str	r0, [r7, #12]
		if (desc) {
    fabc:	68fb      	ldr	r3, [r7, #12]
    fabe:	2b00      	cmp	r3, #0
    fac0:	d015      	beq.n	faee <usb_find_str_desc+0x52>
			_desc_len_check();
    fac2:	68f8      	ldr	r0, [r7, #12]
    fac4:	4b10      	ldr	r3, [pc, #64]	; (fb08 <usb_find_str_desc+0x6c>)
    fac6:	4798      	blx	r3
    fac8:	4603      	mov	r3, r0
    faca:	2b01      	cmp	r3, #1
    facc:	d801      	bhi.n	fad2 <usb_find_str_desc+0x36>
    face:	2300      	movs	r3, #0
    fad0:	e014      	b.n	fafc <usb_find_str_desc+0x60>
			if (i == str_index) {
    fad2:	7dfa      	ldrb	r2, [r7, #23]
    fad4:	79fb      	ldrb	r3, [r7, #7]
    fad6:	429a      	cmp	r2, r3
    fad8:	d101      	bne.n	fade <usb_find_str_desc+0x42>
				return desc;
    fada:	68fb      	ldr	r3, [r7, #12]
    fadc:	e00e      	b.n	fafc <usb_find_str_desc+0x60>
			}
			i++;
    fade:	7dfb      	ldrb	r3, [r7, #23]
    fae0:	3301      	adds	r3, #1
    fae2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    fae4:	68f8      	ldr	r0, [r7, #12]
    fae6:	4b09      	ldr	r3, [pc, #36]	; (fb0c <usb_find_str_desc+0x70>)
    fae8:	4798      	blx	r3
    faea:	60f8      	str	r0, [r7, #12]
    faec:	e001      	b.n	faf2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    faee:	2300      	movs	r3, #0
    faf0:	e004      	b.n	fafc <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    faf2:	68fa      	ldr	r2, [r7, #12]
    faf4:	68bb      	ldr	r3, [r7, #8]
    faf6:	429a      	cmp	r2, r3
    faf8:	d3da      	bcc.n	fab0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    fafa:	2300      	movs	r3, #0
}
    fafc:	4618      	mov	r0, r3
    fafe:	3718      	adds	r7, #24
    fb00:	46bd      	mov	sp, r7
    fb02:	bd80      	pop	{r7, pc}
    fb04:	0000f965 	.word	0x0000f965
    fb08:	0000f8cb 	.word	0x0000f8cb
    fb0c:	0000f8fd 	.word	0x0000f8fd

0000fb10 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    fb10:	b580      	push	{r7, lr}
    fb12:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    fb14:	4805      	ldr	r0, [pc, #20]	; (fb2c <cdc_device_acm_init+0x1c>)
    fb16:	4b06      	ldr	r3, [pc, #24]	; (fb30 <cdc_device_acm_init+0x20>)
    fb18:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    fb1a:	4b06      	ldr	r3, [pc, #24]	; (fb34 <cdc_device_acm_init+0x24>)
    fb1c:	4798      	blx	r3

	usbdc_start(single_desc);
    fb1e:	4806      	ldr	r0, [pc, #24]	; (fb38 <cdc_device_acm_init+0x28>)
    fb20:	4b06      	ldr	r3, [pc, #24]	; (fb3c <cdc_device_acm_init+0x2c>)
    fb22:	4798      	blx	r3
	usbdc_attach();
    fb24:	4b06      	ldr	r3, [pc, #24]	; (fb40 <cdc_device_acm_init+0x30>)
    fb26:	4798      	blx	r3
}
    fb28:	bf00      	nop
    fb2a:	bd80      	pop	{r7, pc}
    fb2c:	20002640 	.word	0x20002640
    fb30:	0000f765 	.word	0x0000f765
    fb34:	0000e9dd 	.word	0x0000e9dd
    fb38:	2000014c 	.word	0x2000014c
    fb3c:	0000f801 	.word	0x0000f801
    fb40:	0000f851 	.word	0x0000f851

0000fb44 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    fb44:	b580      	push	{r7, lr}
    fb46:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    fb48:	4b01      	ldr	r3, [pc, #4]	; (fb50 <usb_init+0xc>)
    fb4a:	4798      	blx	r3
}
    fb4c:	bf00      	nop
    fb4e:	bd80      	pop	{r7, pc}
    fb50:	0000fb11 	.word	0x0000fb11

0000fb54 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    fb54:	b580      	push	{r7, lr}
    fb56:	b08a      	sub	sp, #40	; 0x28
    fb58:	af00      	add	r7, sp, #0
    fb5a:	60f8      	str	r0, [r7, #12]
    fb5c:	60b9      	str	r1, [r7, #8]
    fb5e:	4613      	mov	r3, r2
    fb60:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    fb62:	68fb      	ldr	r3, [r7, #12]
    fb64:	3b14      	subs	r3, #20
    fb66:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    fb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fb6a:	8b9b      	ldrh	r3, [r3, #28]
    fb6c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    fb6e:	88fb      	ldrh	r3, [r7, #6]
    fb70:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    fb72:	f248 0301 	movw	r3, #32769	; 0x8001
    fb76:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    fb78:	68bb      	ldr	r3, [r7, #8]
    fb7a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fb7e:	f107 0214 	add.w	r2, r7, #20
    fb82:	4611      	mov	r1, r2
    fb84:	4618      	mov	r0, r3
    fb86:	4b06      	ldr	r3, [pc, #24]	; (fba0 <i2c_m_sync_read+0x4c>)
    fb88:	4798      	blx	r3
    fb8a:	6238      	str	r0, [r7, #32]

	if (ret) {
    fb8c:	6a3b      	ldr	r3, [r7, #32]
    fb8e:	2b00      	cmp	r3, #0
    fb90:	d001      	beq.n	fb96 <i2c_m_sync_read+0x42>
		return ret;
    fb92:	6a3b      	ldr	r3, [r7, #32]
    fb94:	e000      	b.n	fb98 <i2c_m_sync_read+0x44>
	}

	return n;
    fb96:	88fb      	ldrh	r3, [r7, #6]
}
    fb98:	4618      	mov	r0, r3
    fb9a:	3728      	adds	r7, #40	; 0x28
    fb9c:	46bd      	mov	sp, r7
    fb9e:	bd80      	pop	{r7, pc}
    fba0:	0000958d 	.word	0x0000958d

0000fba4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    fba4:	b580      	push	{r7, lr}
    fba6:	b08a      	sub	sp, #40	; 0x28
    fba8:	af00      	add	r7, sp, #0
    fbaa:	60f8      	str	r0, [r7, #12]
    fbac:	60b9      	str	r1, [r7, #8]
    fbae:	4613      	mov	r3, r2
    fbb0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    fbb2:	68fb      	ldr	r3, [r7, #12]
    fbb4:	3b14      	subs	r3, #20
    fbb6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fbba:	8b9b      	ldrh	r3, [r3, #28]
    fbbc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    fbbe:	88fb      	ldrh	r3, [r7, #6]
    fbc0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    fbc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    fbc6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    fbc8:	68bb      	ldr	r3, [r7, #8]
    fbca:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    fbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fbce:	f107 0214 	add.w	r2, r7, #20
    fbd2:	4611      	mov	r1, r2
    fbd4:	4618      	mov	r0, r3
    fbd6:	4b06      	ldr	r3, [pc, #24]	; (fbf0 <i2c_m_sync_write+0x4c>)
    fbd8:	4798      	blx	r3
    fbda:	6238      	str	r0, [r7, #32]

	if (ret) {
    fbdc:	6a3b      	ldr	r3, [r7, #32]
    fbde:	2b00      	cmp	r3, #0
    fbe0:	d001      	beq.n	fbe6 <i2c_m_sync_write+0x42>
		return ret;
    fbe2:	6a3b      	ldr	r3, [r7, #32]
    fbe4:	e000      	b.n	fbe8 <i2c_m_sync_write+0x44>
	}

	return n;
    fbe6:	88fb      	ldrh	r3, [r7, #6]
}
    fbe8:	4618      	mov	r0, r3
    fbea:	3728      	adds	r7, #40	; 0x28
    fbec:	46bd      	mov	sp, r7
    fbee:	bd80      	pop	{r7, pc}
    fbf0:	0000958d 	.word	0x0000958d

0000fbf4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    fbf4:	b580      	push	{r7, lr}
    fbf6:	b084      	sub	sp, #16
    fbf8:	af00      	add	r7, sp, #0
    fbfa:	6078      	str	r0, [r7, #4]
    fbfc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    fbfe:	687b      	ldr	r3, [r7, #4]
    fc00:	2b00      	cmp	r3, #0
    fc02:	bf14      	ite	ne
    fc04:	2301      	movne	r3, #1
    fc06:	2300      	moveq	r3, #0
    fc08:	b2db      	uxtb	r3, r3
    fc0a:	225e      	movs	r2, #94	; 0x5e
    fc0c:	490c      	ldr	r1, [pc, #48]	; (fc40 <i2c_m_sync_init+0x4c>)
    fc0e:	4618      	mov	r0, r3
    fc10:	4b0c      	ldr	r3, [pc, #48]	; (fc44 <i2c_m_sync_init+0x50>)
    fc12:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    fc14:	687b      	ldr	r3, [r7, #4]
    fc16:	6839      	ldr	r1, [r7, #0]
    fc18:	4618      	mov	r0, r3
    fc1a:	4b0b      	ldr	r3, [pc, #44]	; (fc48 <i2c_m_sync_init+0x54>)
    fc1c:	4798      	blx	r3
    fc1e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    fc20:	68fb      	ldr	r3, [r7, #12]
    fc22:	2b00      	cmp	r3, #0
    fc24:	d001      	beq.n	fc2a <i2c_m_sync_init+0x36>
		return init_status;
    fc26:	68fb      	ldr	r3, [r7, #12]
    fc28:	e006      	b.n	fc38 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    fc2a:	687b      	ldr	r3, [r7, #4]
    fc2c:	4a07      	ldr	r2, [pc, #28]	; (fc4c <i2c_m_sync_init+0x58>)
    fc2e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    fc30:	687b      	ldr	r3, [r7, #4]
    fc32:	4a07      	ldr	r2, [pc, #28]	; (fc50 <i2c_m_sync_init+0x5c>)
    fc34:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    fc36:	2300      	movs	r3, #0
}
    fc38:	4618      	mov	r0, r3
    fc3a:	3710      	adds	r7, #16
    fc3c:	46bd      	mov	sp, r7
    fc3e:	bd80      	pop	{r7, pc}
    fc40:	00012cd0 	.word	0x00012cd0
    fc44:	00005ed5 	.word	0x00005ed5
    fc48:	00009365 	.word	0x00009365
    fc4c:	0000fb55 	.word	0x0000fb55
    fc50:	0000fba5 	.word	0x0000fba5

0000fc54 <__aeabi_atexit>:
    fc54:	460b      	mov	r3, r1
    fc56:	4601      	mov	r1, r0
    fc58:	4618      	mov	r0, r3
    fc5a:	f001 bd2f 	b.w	116bc <__cxa_atexit>
    fc5e:	bf00      	nop

0000fc60 <_ZdlPvj>:
    fc60:	f7f0 be08 	b.w	874 <_ZdlPv>

0000fc64 <pow>:
    fc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc68:	f8df 92f0 	ldr.w	r9, [pc, #752]	; ff5c <pow+0x2f8>
    fc6c:	b08d      	sub	sp, #52	; 0x34
    fc6e:	4606      	mov	r6, r0
    fc70:	460f      	mov	r7, r1
    fc72:	4614      	mov	r4, r2
    fc74:	461d      	mov	r5, r3
    fc76:	f000 f973 	bl	ff60 <__ieee754_pow>
    fc7a:	f999 8000 	ldrsb.w	r8, [r9]
    fc7e:	f1b8 3fff 	cmp.w	r8, #4294967295
    fc82:	e9cd 0100 	strd	r0, r1, [sp]
    fc86:	d036      	beq.n	fcf6 <pow+0x92>
    fc88:	4622      	mov	r2, r4
    fc8a:	462b      	mov	r3, r5
    fc8c:	4620      	mov	r0, r4
    fc8e:	4629      	mov	r1, r5
    fc90:	f001 fcde 	bl	11650 <__aeabi_dcmpun>
    fc94:	4683      	mov	fp, r0
    fc96:	bb70      	cbnz	r0, fcf6 <pow+0x92>
    fc98:	4632      	mov	r2, r6
    fc9a:	463b      	mov	r3, r7
    fc9c:	4630      	mov	r0, r6
    fc9e:	4639      	mov	r1, r7
    fca0:	f001 fcd6 	bl	11650 <__aeabi_dcmpun>
    fca4:	2200      	movs	r2, #0
    fca6:	4682      	mov	sl, r0
    fca8:	2300      	movs	r3, #0
    fcaa:	2800      	cmp	r0, #0
    fcac:	f040 80a0 	bne.w	fdf0 <pow+0x18c>
    fcb0:	4630      	mov	r0, r6
    fcb2:	4639      	mov	r1, r7
    fcb4:	f001 fc9a 	bl	115ec <__aeabi_dcmpeq>
    fcb8:	b310      	cbz	r0, fd00 <pow+0x9c>
    fcba:	2200      	movs	r2, #0
    fcbc:	2300      	movs	r3, #0
    fcbe:	4620      	mov	r0, r4
    fcc0:	4629      	mov	r1, r5
    fcc2:	f001 fc93 	bl	115ec <__aeabi_dcmpeq>
    fcc6:	4683      	mov	fp, r0
    fcc8:	2800      	cmp	r0, #0
    fcca:	d06a      	beq.n	fda2 <pow+0x13e>
    fccc:	2201      	movs	r2, #1
    fcce:	4b9c      	ldr	r3, [pc, #624]	; (ff40 <pow+0x2dc>)
    fcd0:	9202      	str	r2, [sp, #8]
    fcd2:	2100      	movs	r1, #0
    fcd4:	2200      	movs	r2, #0
    fcd6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    fcda:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fcde:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fce2:	e9cd 1208 	strd	r1, r2, [sp, #32]
    fce6:	9303      	str	r3, [sp, #12]
    fce8:	f1b8 0f00 	cmp.w	r8, #0
    fcec:	d045      	beq.n	fd7a <pow+0x116>
    fcee:	4c95      	ldr	r4, [pc, #596]	; (ff44 <pow+0x2e0>)
    fcf0:	2300      	movs	r3, #0
    fcf2:	e9cd 3400 	strd	r3, r4, [sp]
    fcf6:	e9dd 0100 	ldrd	r0, r1, [sp]
    fcfa:	b00d      	add	sp, #52	; 0x34
    fcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd00:	e9dd 0100 	ldrd	r0, r1, [sp]
    fd04:	f000 ff32 	bl	10b6c <finite>
    fd08:	4680      	mov	r8, r0
    fd0a:	2800      	cmp	r0, #0
    fd0c:	f000 808b 	beq.w	fe26 <pow+0x1c2>
    fd10:	f04f 0a00 	mov.w	sl, #0
    fd14:	f04f 0b00 	mov.w	fp, #0
    fd18:	4652      	mov	r2, sl
    fd1a:	465b      	mov	r3, fp
    fd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
    fd20:	f001 fc64 	bl	115ec <__aeabi_dcmpeq>
    fd24:	2800      	cmp	r0, #0
    fd26:	d0e6      	beq.n	fcf6 <pow+0x92>
    fd28:	4630      	mov	r0, r6
    fd2a:	4639      	mov	r1, r7
    fd2c:	f000 ff1e 	bl	10b6c <finite>
    fd30:	2800      	cmp	r0, #0
    fd32:	d0e0      	beq.n	fcf6 <pow+0x92>
    fd34:	4620      	mov	r0, r4
    fd36:	4629      	mov	r1, r5
    fd38:	f000 ff18 	bl	10b6c <finite>
    fd3c:	2800      	cmp	r0, #0
    fd3e:	d0da      	beq.n	fcf6 <pow+0x92>
    fd40:	f999 3000 	ldrsb.w	r3, [r9]
    fd44:	4a7e      	ldr	r2, [pc, #504]	; (ff40 <pow+0x2dc>)
    fd46:	9203      	str	r2, [sp, #12]
    fd48:	2104      	movs	r1, #4
    fd4a:	2200      	movs	r2, #0
    fd4c:	2b02      	cmp	r3, #2
    fd4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fd52:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fd56:	e9cd ab08 	strd	sl, fp, [sp, #32]
    fd5a:	9102      	str	r1, [sp, #8]
    fd5c:	920a      	str	r2, [sp, #40]	; 0x28
    fd5e:	d003      	beq.n	fd68 <pow+0x104>
    fd60:	a802      	add	r0, sp, #8
    fd62:	f000 ff09 	bl	10b78 <matherr>
    fd66:	b968      	cbnz	r0, fd84 <pow+0x120>
    fd68:	f001 fcae 	bl	116c8 <__errno>
    fd6c:	2322      	movs	r3, #34	; 0x22
    fd6e:	6003      	str	r3, [r0, #0]
    fd70:	e008      	b.n	fd84 <pow+0x120>
    fd72:	2300      	movs	r3, #0
    fd74:	2400      	movs	r4, #0
    fd76:	e9cd 3408 	strd	r3, r4, [sp, #32]
    fd7a:	a802      	add	r0, sp, #8
    fd7c:	f000 fefc 	bl	10b78 <matherr>
    fd80:	2800      	cmp	r0, #0
    fd82:	d030      	beq.n	fde6 <pow+0x182>
    fd84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd86:	b11b      	cbz	r3, fd90 <pow+0x12c>
    fd88:	f001 fc9e 	bl	116c8 <__errno>
    fd8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd8e:	6003      	str	r3, [r0, #0]
    fd90:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    fd94:	e9cd 3400 	strd	r3, r4, [sp]
    fd98:	e9dd 0100 	ldrd	r0, r1, [sp]
    fd9c:	b00d      	add	sp, #52	; 0x34
    fd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fda2:	4620      	mov	r0, r4
    fda4:	4629      	mov	r1, r5
    fda6:	f000 fee1 	bl	10b6c <finite>
    fdaa:	2800      	cmp	r0, #0
    fdac:	d0a3      	beq.n	fcf6 <pow+0x92>
    fdae:	2200      	movs	r2, #0
    fdb0:	2300      	movs	r3, #0
    fdb2:	4620      	mov	r0, r4
    fdb4:	4629      	mov	r1, r5
    fdb6:	f001 fc23 	bl	11600 <__aeabi_dcmplt>
    fdba:	2800      	cmp	r0, #0
    fdbc:	d09b      	beq.n	fcf6 <pow+0x92>
    fdbe:	f999 3000 	ldrsb.w	r3, [r9]
    fdc2:	4a5f      	ldr	r2, [pc, #380]	; (ff40 <pow+0x2dc>)
    fdc4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fdc8:	2101      	movs	r1, #1
    fdca:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fdce:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fdd2:	9102      	str	r1, [sp, #8]
    fdd4:	9203      	str	r2, [sp, #12]
    fdd6:	2b00      	cmp	r3, #0
    fdd8:	d0cb      	beq.n	fd72 <pow+0x10e>
    fdda:	495b      	ldr	r1, [pc, #364]	; (ff48 <pow+0x2e4>)
    fddc:	2000      	movs	r0, #0
    fdde:	2b02      	cmp	r3, #2
    fde0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    fde4:	d1c9      	bne.n	fd7a <pow+0x116>
    fde6:	f001 fc6f 	bl	116c8 <__errno>
    fdea:	2321      	movs	r3, #33	; 0x21
    fdec:	6003      	str	r3, [r0, #0]
    fdee:	e7c9      	b.n	fd84 <pow+0x120>
    fdf0:	4620      	mov	r0, r4
    fdf2:	4629      	mov	r1, r5
    fdf4:	f001 fbfa 	bl	115ec <__aeabi_dcmpeq>
    fdf8:	2800      	cmp	r0, #0
    fdfa:	f43f af7c 	beq.w	fcf6 <pow+0x92>
    fdfe:	4b51      	ldr	r3, [pc, #324]	; (ff44 <pow+0x2e0>)
    fe00:	494f      	ldr	r1, [pc, #316]	; (ff40 <pow+0x2dc>)
    fe02:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fe06:	2001      	movs	r0, #1
    fe08:	2200      	movs	r2, #0
    fe0a:	f1b8 0f02 	cmp.w	r8, #2
    fe0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fe12:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fe16:	9002      	str	r0, [sp, #8]
    fe18:	9103      	str	r1, [sp, #12]
    fe1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    fe1e:	d1ac      	bne.n	fd7a <pow+0x116>
    fe20:	e9cd 2300 	strd	r2, r3, [sp]
    fe24:	e767      	b.n	fcf6 <pow+0x92>
    fe26:	4630      	mov	r0, r6
    fe28:	4639      	mov	r1, r7
    fe2a:	f000 fe9f 	bl	10b6c <finite>
    fe2e:	2800      	cmp	r0, #0
    fe30:	f43f af6e 	beq.w	fd10 <pow+0xac>
    fe34:	4620      	mov	r0, r4
    fe36:	4629      	mov	r1, r5
    fe38:	f000 fe98 	bl	10b6c <finite>
    fe3c:	2800      	cmp	r0, #0
    fe3e:	f43f af67 	beq.w	fd10 <pow+0xac>
    fe42:	e9dd 2300 	ldrd	r2, r3, [sp]
    fe46:	4610      	mov	r0, r2
    fe48:	4619      	mov	r1, r3
    fe4a:	f001 fc01 	bl	11650 <__aeabi_dcmpun>
    fe4e:	2800      	cmp	r0, #0
    fe50:	d158      	bne.n	ff04 <pow+0x2a0>
    fe52:	2303      	movs	r3, #3
    fe54:	f999 8000 	ldrsb.w	r8, [r9]
    fe58:	9302      	str	r3, [sp, #8]
    fe5a:	4b39      	ldr	r3, [pc, #228]	; (ff40 <pow+0x2dc>)
    fe5c:	900a      	str	r0, [sp, #40]	; 0x28
    fe5e:	9303      	str	r3, [sp, #12]
    fe60:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fe64:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fe68:	2200      	movs	r2, #0
    fe6a:	2300      	movs	r3, #0
    fe6c:	4630      	mov	r0, r6
    fe6e:	4639      	mov	r1, r7
    fe70:	f1b8 0f00 	cmp.w	r8, #0
    fe74:	d126      	bne.n	fec4 <pow+0x260>
    fe76:	4f35      	ldr	r7, [pc, #212]	; (ff4c <pow+0x2e8>)
    fe78:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    fe7c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    fe80:	f001 fbbe 	bl	11600 <__aeabi_dcmplt>
    fe84:	2800      	cmp	r0, #0
    fe86:	f43f af6b 	beq.w	fd60 <pow+0xfc>
    fe8a:	2200      	movs	r2, #0
    fe8c:	4b30      	ldr	r3, [pc, #192]	; (ff50 <pow+0x2ec>)
    fe8e:	4620      	mov	r0, r4
    fe90:	4629      	mov	r1, r5
    fe92:	f001 f943 	bl	1111c <__aeabi_dmul>
    fe96:	4604      	mov	r4, r0
    fe98:	460d      	mov	r5, r1
    fe9a:	f000 fe75 	bl	10b88 <rint>
    fe9e:	4602      	mov	r2, r0
    fea0:	460b      	mov	r3, r1
    fea2:	4620      	mov	r0, r4
    fea4:	4629      	mov	r1, r5
    fea6:	f001 fba1 	bl	115ec <__aeabi_dcmpeq>
    feaa:	bb40      	cbnz	r0, fefe <pow+0x29a>
    feac:	4b29      	ldr	r3, [pc, #164]	; (ff54 <pow+0x2f0>)
    feae:	f999 8000 	ldrsb.w	r8, [r9]
    feb2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    feb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    feba:	f1b8 0f02 	cmp.w	r8, #2
    febe:	f47f af4f 	bne.w	fd60 <pow+0xfc>
    fec2:	e751      	b.n	fd68 <pow+0x104>
    fec4:	4f24      	ldr	r7, [pc, #144]	; (ff58 <pow+0x2f4>)
    fec6:	2600      	movs	r6, #0
    fec8:	e9cd 6708 	strd	r6, r7, [sp, #32]
    fecc:	f001 fb98 	bl	11600 <__aeabi_dcmplt>
    fed0:	2800      	cmp	r0, #0
    fed2:	d0f2      	beq.n	feba <pow+0x256>
    fed4:	2200      	movs	r2, #0
    fed6:	4b1e      	ldr	r3, [pc, #120]	; (ff50 <pow+0x2ec>)
    fed8:	4620      	mov	r0, r4
    feda:	4629      	mov	r1, r5
    fedc:	f001 f91e 	bl	1111c <__aeabi_dmul>
    fee0:	4604      	mov	r4, r0
    fee2:	460d      	mov	r5, r1
    fee4:	f000 fe50 	bl	10b88 <rint>
    fee8:	4602      	mov	r2, r0
    feea:	460b      	mov	r3, r1
    feec:	4620      	mov	r0, r4
    feee:	4629      	mov	r1, r5
    fef0:	f001 fb7c 	bl	115ec <__aeabi_dcmpeq>
    fef4:	b918      	cbnz	r0, fefe <pow+0x29a>
    fef6:	4b14      	ldr	r3, [pc, #80]	; (ff48 <pow+0x2e4>)
    fef8:	2200      	movs	r2, #0
    fefa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    fefe:	f999 8000 	ldrsb.w	r8, [r9]
    ff02:	e7da      	b.n	feba <pow+0x256>
    ff04:	f999 9000 	ldrsb.w	r9, [r9]
    ff08:	4b0d      	ldr	r3, [pc, #52]	; (ff40 <pow+0x2dc>)
    ff0a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    ff0e:	2201      	movs	r2, #1
    ff10:	e9cd 6704 	strd	r6, r7, [sp, #16]
    ff14:	e9cd 4506 	strd	r4, r5, [sp, #24]
    ff18:	9202      	str	r2, [sp, #8]
    ff1a:	9303      	str	r3, [sp, #12]
    ff1c:	f1b9 0f00 	cmp.w	r9, #0
    ff20:	f43f af27 	beq.w	fd72 <pow+0x10e>
    ff24:	2200      	movs	r2, #0
    ff26:	2300      	movs	r3, #0
    ff28:	4610      	mov	r0, r2
    ff2a:	4619      	mov	r1, r3
    ff2c:	f001 fa20 	bl	11370 <__aeabi_ddiv>
    ff30:	f1b9 0f02 	cmp.w	r9, #2
    ff34:	e9cd 0108 	strd	r0, r1, [sp, #32]
    ff38:	f43f af55 	beq.w	fde6 <pow+0x182>
    ff3c:	e71d      	b.n	fd7a <pow+0x116>
    ff3e:	bf00      	nop
    ff40:	00012cec 	.word	0x00012cec
    ff44:	3ff00000 	.word	0x3ff00000
    ff48:	fff00000 	.word	0xfff00000
    ff4c:	47efffff 	.word	0x47efffff
    ff50:	3fe00000 	.word	0x3fe00000
    ff54:	c7efffff 	.word	0xc7efffff
    ff58:	7ff00000 	.word	0x7ff00000
    ff5c:	20000154 	.word	0x20000154

0000ff60 <__ieee754_pow>:
    ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff64:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    ff68:	ea57 0402 	orrs.w	r4, r7, r2
    ff6c:	b093      	sub	sp, #76	; 0x4c
    ff6e:	d037      	beq.n	ffe0 <__ieee754_pow+0x80>
    ff70:	4c67      	ldr	r4, [pc, #412]	; (10110 <STACK_SIZE+0x110>)
    ff72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    ff76:	42a6      	cmp	r6, r4
    ff78:	4683      	mov	fp, r0
    ff7a:	460d      	mov	r5, r1
    ff7c:	dc29      	bgt.n	ffd2 <__ieee754_pow+0x72>
    ff7e:	469a      	mov	sl, r3
    ff80:	4696      	mov	lr, r2
    ff82:	d025      	beq.n	ffd0 <__ieee754_pow+0x70>
    ff84:	42a7      	cmp	r7, r4
    ff86:	dc24      	bgt.n	ffd2 <__ieee754_pow+0x72>
    ff88:	4c61      	ldr	r4, [pc, #388]	; (10110 <STACK_SIZE+0x110>)
    ff8a:	42a7      	cmp	r7, r4
    ff8c:	d079      	beq.n	10082 <STACK_SIZE+0x82>
    ff8e:	2d00      	cmp	r5, #0
    ff90:	4689      	mov	r9, r1
    ff92:	4680      	mov	r8, r0
    ff94:	e9cd 2300 	strd	r2, r3, [sp]
    ff98:	db77      	blt.n	1008a <STACK_SIZE+0x8a>
    ff9a:	2400      	movs	r4, #0
    ff9c:	f1be 0f00 	cmp.w	lr, #0
    ffa0:	d12c      	bne.n	fffc <__ieee754_pow+0x9c>
    ffa2:	4b5b      	ldr	r3, [pc, #364]	; (10110 <STACK_SIZE+0x110>)
    ffa4:	429f      	cmp	r7, r3
    ffa6:	f000 808b 	beq.w	100c0 <STACK_SIZE+0xc0>
    ffaa:	4b5a      	ldr	r3, [pc, #360]	; (10114 <STACK_SIZE+0x114>)
    ffac:	429f      	cmp	r7, r3
    ffae:	d061      	beq.n	10074 <STACK_SIZE+0x74>
    ffb0:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    ffb4:	f000 83ba 	beq.w	1072c <STACK_SIZE+0x72c>
    ffb8:	4b57      	ldr	r3, [pc, #348]	; (10118 <STACK_SIZE+0x118>)
    ffba:	459a      	cmp	sl, r3
    ffbc:	d11e      	bne.n	fffc <__ieee754_pow+0x9c>
    ffbe:	2d00      	cmp	r5, #0
    ffc0:	db1c      	blt.n	fffc <__ieee754_pow+0x9c>
    ffc2:	4640      	mov	r0, r8
    ffc4:	4649      	mov	r1, r9
    ffc6:	b013      	add	sp, #76	; 0x4c
    ffc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffcc:	f000 bd0e 	b.w	109ec <__ieee754_sqrt>
    ffd0:	b158      	cbz	r0, ffea <__ieee754_pow+0x8a>
    ffd2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    ffd6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    ffda:	ea56 030b 	orrs.w	r3, r6, fp
    ffde:	d106      	bne.n	ffee <__ieee754_pow+0x8e>
    ffe0:	494c      	ldr	r1, [pc, #304]	; (10114 <STACK_SIZE+0x114>)
    ffe2:	2000      	movs	r0, #0
    ffe4:	b013      	add	sp, #76	; 0x4c
    ffe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffea:	42b7      	cmp	r7, r6
    ffec:	ddcc      	ble.n	ff88 <__ieee754_pow+0x28>
    ffee:	484b      	ldr	r0, [pc, #300]	; (1011c <STACK_SIZE+0x11c>)
    fff0:	b013      	add	sp, #76	; 0x4c
    fff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fff6:	f000 bdc1 	b.w	10b7c <nan>
    fffa:	2400      	movs	r4, #0
    fffc:	4640      	mov	r0, r8
    fffe:	4649      	mov	r1, r9
   10000:	f000 fdb0 	bl	10b64 <fabs>
   10004:	f1bb 0f00 	cmp.w	fp, #0
   10008:	d119      	bne.n	1003e <STACK_SIZE+0x3e>
   1000a:	b126      	cbz	r6, 10016 <STACK_SIZE+0x16>
   1000c:	4b41      	ldr	r3, [pc, #260]	; (10114 <STACK_SIZE+0x114>)
   1000e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   10012:	429a      	cmp	r2, r3
   10014:	d113      	bne.n	1003e <STACK_SIZE+0x3e>
   10016:	f1ba 0f00 	cmp.w	sl, #0
   1001a:	f2c0 83bc 	blt.w	10796 <STACK_SIZE+0x796>
   1001e:	2d00      	cmp	r5, #0
   10020:	dae0      	bge.n	ffe4 <__ieee754_pow+0x84>
   10022:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   10026:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1002a:	ea56 0304 	orrs.w	r3, r6, r4
   1002e:	f000 848f 	beq.w	10950 <STACK_SIZE+0x950>
   10032:	2c01      	cmp	r4, #1
   10034:	d1d6      	bne.n	ffe4 <__ieee754_pow+0x84>
   10036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1003a:	4619      	mov	r1, r3
   1003c:	e7d2      	b.n	ffe4 <__ieee754_pow+0x84>
   1003e:	0fed      	lsrs	r5, r5, #31
   10040:	3d01      	subs	r5, #1
   10042:	ea54 0305 	orrs.w	r3, r4, r5
   10046:	d04e      	beq.n	100e6 <STACK_SIZE+0xe6>
   10048:	4b35      	ldr	r3, [pc, #212]	; (10120 <STACK_SIZE+0x120>)
   1004a:	429f      	cmp	r7, r3
   1004c:	dd6e      	ble.n	1012c <STACK_SIZE+0x12c>
   1004e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   10052:	429f      	cmp	r7, r3
   10054:	f340 83e8 	ble.w	10828 <STACK_SIZE+0x828>
   10058:	4b32      	ldr	r3, [pc, #200]	; (10124 <STACK_SIZE+0x124>)
   1005a:	429e      	cmp	r6, r3
   1005c:	dd4e      	ble.n	100fc <STACK_SIZE+0xfc>
   1005e:	f1ba 0f00 	cmp.w	sl, #0
   10062:	dd4e      	ble.n	10102 <STACK_SIZE+0x102>
   10064:	a328      	add	r3, pc, #160	; (adr r3, 10108 <STACK_SIZE+0x108>)
   10066:	e9d3 2300 	ldrd	r2, r3, [r3]
   1006a:	4610      	mov	r0, r2
   1006c:	4619      	mov	r1, r3
   1006e:	f001 f855 	bl	1111c <__aeabi_dmul>
   10072:	e7b7      	b.n	ffe4 <__ieee754_pow+0x84>
   10074:	f1ba 0f00 	cmp.w	sl, #0
   10078:	f2c0 843c 	blt.w	108f4 <STACK_SIZE+0x8f4>
   1007c:	4640      	mov	r0, r8
   1007e:	4649      	mov	r1, r9
   10080:	e7b0      	b.n	ffe4 <__ieee754_pow+0x84>
   10082:	f1be 0f00 	cmp.w	lr, #0
   10086:	d082      	beq.n	ff8e <__ieee754_pow+0x2e>
   10088:	e7a3      	b.n	ffd2 <__ieee754_pow+0x72>
   1008a:	4b27      	ldr	r3, [pc, #156]	; (10128 <STACK_SIZE+0x128>)
   1008c:	429f      	cmp	r7, r3
   1008e:	dc28      	bgt.n	100e2 <STACK_SIZE+0xe2>
   10090:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   10094:	429f      	cmp	r7, r3
   10096:	dd80      	ble.n	ff9a <__ieee754_pow+0x3a>
   10098:	153b      	asrs	r3, r7, #20
   1009a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1009e:	2b14      	cmp	r3, #20
   100a0:	f340 843e 	ble.w	10920 <STACK_SIZE+0x920>
   100a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   100a8:	fa2e f203 	lsr.w	r2, lr, r3
   100ac:	fa02 f303 	lsl.w	r3, r2, r3
   100b0:	459e      	cmp	lr, r3
   100b2:	f47f af72 	bne.w	ff9a <__ieee754_pow+0x3a>
   100b6:	f002 0201 	and.w	r2, r2, #1
   100ba:	f1c2 0402 	rsb	r4, r2, #2
   100be:	e76d      	b.n	ff9c <__ieee754_pow+0x3c>
   100c0:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   100c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   100c8:	ea53 030b 	orrs.w	r3, r3, fp
   100cc:	d088      	beq.n	ffe0 <__ieee754_pow+0x80>
   100ce:	4b15      	ldr	r3, [pc, #84]	; (10124 <STACK_SIZE+0x124>)
   100d0:	429e      	cmp	r6, r3
   100d2:	f340 8332 	ble.w	1073a <STACK_SIZE+0x73a>
   100d6:	f1ba 0f00 	cmp.w	sl, #0
   100da:	db12      	blt.n	10102 <STACK_SIZE+0x102>
   100dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   100e0:	e780      	b.n	ffe4 <__ieee754_pow+0x84>
   100e2:	2402      	movs	r4, #2
   100e4:	e75a      	b.n	ff9c <__ieee754_pow+0x3c>
   100e6:	4642      	mov	r2, r8
   100e8:	464b      	mov	r3, r9
   100ea:	4640      	mov	r0, r8
   100ec:	4649      	mov	r1, r9
   100ee:	f000 fe61 	bl	10db4 <__aeabi_dsub>
   100f2:	4602      	mov	r2, r0
   100f4:	460b      	mov	r3, r1
   100f6:	f001 f93b 	bl	11370 <__aeabi_ddiv>
   100fa:	e773      	b.n	ffe4 <__ieee754_pow+0x84>
   100fc:	f1ba 0f00 	cmp.w	sl, #0
   10100:	dbb0      	blt.n	10064 <STACK_SIZE+0x64>
   10102:	2000      	movs	r0, #0
   10104:	2100      	movs	r1, #0
   10106:	e76d      	b.n	ffe4 <__ieee754_pow+0x84>
   10108:	8800759c 	.word	0x8800759c
   1010c:	7e37e43c 	.word	0x7e37e43c
   10110:	7ff00000 	.word	0x7ff00000
   10114:	3ff00000 	.word	0x3ff00000
   10118:	3fe00000 	.word	0x3fe00000
   1011c:	00012cf0 	.word	0x00012cf0
   10120:	41e00000 	.word	0x41e00000
   10124:	3fefffff 	.word	0x3fefffff
   10128:	433fffff 	.word	0x433fffff
   1012c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   10130:	f04f 0200 	mov.w	r2, #0
   10134:	da05      	bge.n	10142 <STACK_SIZE+0x142>
   10136:	4bd4      	ldr	r3, [pc, #848]	; (10488 <STACK_SIZE+0x488>)
   10138:	f000 fff0 	bl	1111c <__aeabi_dmul>
   1013c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   10140:	460e      	mov	r6, r1
   10142:	1533      	asrs	r3, r6, #20
   10144:	4fd1      	ldr	r7, [pc, #836]	; (1048c <STACK_SIZE+0x48c>)
   10146:	f3c6 0613 	ubfx	r6, r6, #0, #20
   1014a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1014e:	4413      	add	r3, r2
   10150:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   10154:	42be      	cmp	r6, r7
   10156:	461a      	mov	r2, r3
   10158:	930d      	str	r3, [sp, #52]	; 0x34
   1015a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   1015e:	f340 8321 	ble.w	107a4 <STACK_SIZE+0x7a4>
   10162:	4bcb      	ldr	r3, [pc, #812]	; (10490 <STACK_SIZE+0x490>)
   10164:	429e      	cmp	r6, r3
   10166:	f340 83fd 	ble.w	10964 <STACK_SIZE+0x964>
   1016a:	4613      	mov	r3, r2
   1016c:	3301      	adds	r3, #1
   1016e:	930d      	str	r3, [sp, #52]	; 0x34
   10170:	4bc8      	ldr	r3, [pc, #800]	; (10494 <STACK_SIZE+0x494>)
   10172:	2200      	movs	r2, #0
   10174:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10178:	2700      	movs	r7, #0
   1017a:	2600      	movs	r6, #0
   1017c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   10180:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   10184:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   10188:	2700      	movs	r7, #0
   1018a:	4602      	mov	r2, r0
   1018c:	4653      	mov	r3, sl
   1018e:	4651      	mov	r1, sl
   10190:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   10194:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10198:	f000 fe0c 	bl	10db4 <__aeabi_dsub>
   1019c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   101a0:	4680      	mov	r8, r0
   101a2:	4689      	mov	r9, r1
   101a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   101a8:	f000 fe06 	bl	10db8 <__adddf3>
   101ac:	4602      	mov	r2, r0
   101ae:	460b      	mov	r3, r1
   101b0:	2000      	movs	r0, #0
   101b2:	49b8      	ldr	r1, [pc, #736]	; (10494 <STACK_SIZE+0x494>)
   101b4:	f001 f8dc 	bl	11370 <__aeabi_ddiv>
   101b8:	460a      	mov	r2, r1
   101ba:	4601      	mov	r1, r0
   101bc:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   101c0:	4613      	mov	r3, r2
   101c2:	4649      	mov	r1, r9
   101c4:	4602      	mov	r2, r0
   101c6:	4640      	mov	r0, r8
   101c8:	f000 ffa8 	bl	1111c <__aeabi_dmul>
   101cc:	ea4f 036a 	mov.w	r3, sl, asr #1
   101d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   101d4:	468c      	mov	ip, r1
   101d6:	4683      	mov	fp, r0
   101d8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   101dc:	e9cd bc04 	strd	fp, ip, [sp, #16]
   101e0:	46da      	mov	sl, fp
   101e2:	468b      	mov	fp, r1
   101e4:	19d9      	adds	r1, r3, r7
   101e6:	2300      	movs	r3, #0
   101e8:	e9cd ab02 	strd	sl, fp, [sp, #8]
   101ec:	9302      	str	r3, [sp, #8]
   101ee:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   101f2:	2000      	movs	r0, #0
   101f4:	4606      	mov	r6, r0
   101f6:	460f      	mov	r7, r1
   101f8:	4602      	mov	r2, r0
   101fa:	460b      	mov	r3, r1
   101fc:	4650      	mov	r0, sl
   101fe:	4659      	mov	r1, fp
   10200:	f000 ff8c 	bl	1111c <__aeabi_dmul>
   10204:	4602      	mov	r2, r0
   10206:	460b      	mov	r3, r1
   10208:	4640      	mov	r0, r8
   1020a:	4649      	mov	r1, r9
   1020c:	f000 fdd2 	bl	10db4 <__aeabi_dsub>
   10210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10214:	4680      	mov	r8, r0
   10216:	4689      	mov	r9, r1
   10218:	4630      	mov	r0, r6
   1021a:	4639      	mov	r1, r7
   1021c:	f000 fdca 	bl	10db4 <__aeabi_dsub>
   10220:	4602      	mov	r2, r0
   10222:	460b      	mov	r3, r1
   10224:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10228:	f000 fdc4 	bl	10db4 <__aeabi_dsub>
   1022c:	4652      	mov	r2, sl
   1022e:	465b      	mov	r3, fp
   10230:	f000 ff74 	bl	1111c <__aeabi_dmul>
   10234:	4602      	mov	r2, r0
   10236:	460b      	mov	r3, r1
   10238:	4640      	mov	r0, r8
   1023a:	4649      	mov	r1, r9
   1023c:	f000 fdba 	bl	10db4 <__aeabi_dsub>
   10240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10244:	f000 ff6a 	bl	1111c <__aeabi_dmul>
   10248:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1024c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   10250:	4632      	mov	r2, r6
   10252:	463b      	mov	r3, r7
   10254:	4630      	mov	r0, r6
   10256:	4639      	mov	r1, r7
   10258:	f000 ff60 	bl	1111c <__aeabi_dmul>
   1025c:	a378      	add	r3, pc, #480	; (adr r3, 10440 <STACK_SIZE+0x440>)
   1025e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10262:	4606      	mov	r6, r0
   10264:	460f      	mov	r7, r1
   10266:	f000 ff59 	bl	1111c <__aeabi_dmul>
   1026a:	a377      	add	r3, pc, #476	; (adr r3, 10448 <STACK_SIZE+0x448>)
   1026c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10270:	f000 fda2 	bl	10db8 <__adddf3>
   10274:	4632      	mov	r2, r6
   10276:	463b      	mov	r3, r7
   10278:	f000 ff50 	bl	1111c <__aeabi_dmul>
   1027c:	a374      	add	r3, pc, #464	; (adr r3, 10450 <STACK_SIZE+0x450>)
   1027e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10282:	f000 fd99 	bl	10db8 <__adddf3>
   10286:	4632      	mov	r2, r6
   10288:	463b      	mov	r3, r7
   1028a:	f000 ff47 	bl	1111c <__aeabi_dmul>
   1028e:	a372      	add	r3, pc, #456	; (adr r3, 10458 <STACK_SIZE+0x458>)
   10290:	e9d3 2300 	ldrd	r2, r3, [r3]
   10294:	f000 fd90 	bl	10db8 <__adddf3>
   10298:	4632      	mov	r2, r6
   1029a:	463b      	mov	r3, r7
   1029c:	f000 ff3e 	bl	1111c <__aeabi_dmul>
   102a0:	a36f      	add	r3, pc, #444	; (adr r3, 10460 <STACK_SIZE+0x460>)
   102a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   102a6:	f000 fd87 	bl	10db8 <__adddf3>
   102aa:	4632      	mov	r2, r6
   102ac:	463b      	mov	r3, r7
   102ae:	f000 ff35 	bl	1111c <__aeabi_dmul>
   102b2:	a36d      	add	r3, pc, #436	; (adr r3, 10468 <STACK_SIZE+0x468>)
   102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   102b8:	f000 fd7e 	bl	10db8 <__adddf3>
   102bc:	4632      	mov	r2, r6
   102be:	4680      	mov	r8, r0
   102c0:	4689      	mov	r9, r1
   102c2:	463b      	mov	r3, r7
   102c4:	4630      	mov	r0, r6
   102c6:	4639      	mov	r1, r7
   102c8:	f000 ff28 	bl	1111c <__aeabi_dmul>
   102cc:	4602      	mov	r2, r0
   102ce:	460b      	mov	r3, r1
   102d0:	4640      	mov	r0, r8
   102d2:	4649      	mov	r1, r9
   102d4:	f000 ff22 	bl	1111c <__aeabi_dmul>
   102d8:	4652      	mov	r2, sl
   102da:	4606      	mov	r6, r0
   102dc:	460f      	mov	r7, r1
   102de:	465b      	mov	r3, fp
   102e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   102e4:	f000 fd68 	bl	10db8 <__adddf3>
   102e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   102ec:	f000 ff16 	bl	1111c <__aeabi_dmul>
   102f0:	4632      	mov	r2, r6
   102f2:	463b      	mov	r3, r7
   102f4:	f000 fd60 	bl	10db8 <__adddf3>
   102f8:	4652      	mov	r2, sl
   102fa:	4680      	mov	r8, r0
   102fc:	4689      	mov	r9, r1
   102fe:	465b      	mov	r3, fp
   10300:	4650      	mov	r0, sl
   10302:	4659      	mov	r1, fp
   10304:	f000 ff0a 	bl	1111c <__aeabi_dmul>
   10308:	2200      	movs	r2, #0
   1030a:	4b63      	ldr	r3, [pc, #396]	; (10498 <STACK_SIZE+0x498>)
   1030c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10310:	f000 fd52 	bl	10db8 <__adddf3>
   10314:	4642      	mov	r2, r8
   10316:	464b      	mov	r3, r9
   10318:	f000 fd4e 	bl	10db8 <__adddf3>
   1031c:	9802      	ldr	r0, [sp, #8]
   1031e:	460f      	mov	r7, r1
   10320:	4606      	mov	r6, r0
   10322:	4632      	mov	r2, r6
   10324:	463b      	mov	r3, r7
   10326:	4650      	mov	r0, sl
   10328:	4659      	mov	r1, fp
   1032a:	f000 fef7 	bl	1111c <__aeabi_dmul>
   1032e:	2200      	movs	r2, #0
   10330:	4682      	mov	sl, r0
   10332:	468b      	mov	fp, r1
   10334:	4b58      	ldr	r3, [pc, #352]	; (10498 <STACK_SIZE+0x498>)
   10336:	4630      	mov	r0, r6
   10338:	4639      	mov	r1, r7
   1033a:	f000 fd3b 	bl	10db4 <__aeabi_dsub>
   1033e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10342:	f000 fd37 	bl	10db4 <__aeabi_dsub>
   10346:	4602      	mov	r2, r0
   10348:	460b      	mov	r3, r1
   1034a:	4640      	mov	r0, r8
   1034c:	4649      	mov	r1, r9
   1034e:	f000 fd31 	bl	10db4 <__aeabi_dsub>
   10352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10356:	f000 fee1 	bl	1111c <__aeabi_dmul>
   1035a:	4632      	mov	r2, r6
   1035c:	4680      	mov	r8, r0
   1035e:	4689      	mov	r9, r1
   10360:	463b      	mov	r3, r7
   10362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   10366:	f000 fed9 	bl	1111c <__aeabi_dmul>
   1036a:	4602      	mov	r2, r0
   1036c:	460b      	mov	r3, r1
   1036e:	4640      	mov	r0, r8
   10370:	4649      	mov	r1, r9
   10372:	f000 fd21 	bl	10db8 <__adddf3>
   10376:	4680      	mov	r8, r0
   10378:	4689      	mov	r9, r1
   1037a:	4602      	mov	r2, r0
   1037c:	460b      	mov	r3, r1
   1037e:	4650      	mov	r0, sl
   10380:	4659      	mov	r1, fp
   10382:	e9cd ab04 	strd	sl, fp, [sp, #16]
   10386:	f000 fd17 	bl	10db8 <__adddf3>
   1038a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1038e:	a338      	add	r3, pc, #224	; (adr r3, 10470 <STACK_SIZE+0x470>)
   10390:	e9d3 2300 	ldrd	r2, r3, [r3]
   10394:	4650      	mov	r0, sl
   10396:	460f      	mov	r7, r1
   10398:	f000 fec0 	bl	1111c <__aeabi_dmul>
   1039c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   103a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   103a4:	4639      	mov	r1, r7
   103a6:	4650      	mov	r0, sl
   103a8:	f000 fd04 	bl	10db4 <__aeabi_dsub>
   103ac:	4602      	mov	r2, r0
   103ae:	460b      	mov	r3, r1
   103b0:	4640      	mov	r0, r8
   103b2:	4649      	mov	r1, r9
   103b4:	f000 fcfe 	bl	10db4 <__aeabi_dsub>
   103b8:	a32f      	add	r3, pc, #188	; (adr r3, 10478 <STACK_SIZE+0x478>)
   103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   103be:	f000 fead 	bl	1111c <__aeabi_dmul>
   103c2:	a32f      	add	r3, pc, #188	; (adr r3, 10480 <STACK_SIZE+0x480>)
   103c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   103c8:	4680      	mov	r8, r0
   103ca:	4689      	mov	r9, r1
   103cc:	4650      	mov	r0, sl
   103ce:	4639      	mov	r1, r7
   103d0:	f000 fea4 	bl	1111c <__aeabi_dmul>
   103d4:	4602      	mov	r2, r0
   103d6:	460b      	mov	r3, r1
   103d8:	4640      	mov	r0, r8
   103da:	4649      	mov	r1, r9
   103dc:	f000 fcec 	bl	10db8 <__adddf3>
   103e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   103e4:	f000 fce8 	bl	10db8 <__adddf3>
   103e8:	4680      	mov	r8, r0
   103ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   103ec:	4689      	mov	r9, r1
   103ee:	f000 fe2f 	bl	11050 <__aeabi_i2d>
   103f2:	4642      	mov	r2, r8
   103f4:	4606      	mov	r6, r0
   103f6:	460f      	mov	r7, r1
   103f8:	464b      	mov	r3, r9
   103fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   103fe:	f000 fcdb 	bl	10db8 <__adddf3>
   10402:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   10406:	f000 fcd7 	bl	10db8 <__adddf3>
   1040a:	4632      	mov	r2, r6
   1040c:	463b      	mov	r3, r7
   1040e:	f000 fcd3 	bl	10db8 <__adddf3>
   10412:	4632      	mov	r2, r6
   10414:	463b      	mov	r3, r7
   10416:	4650      	mov	r0, sl
   10418:	468b      	mov	fp, r1
   1041a:	f000 fccb 	bl	10db4 <__aeabi_dsub>
   1041e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   10422:	f000 fcc7 	bl	10db4 <__aeabi_dsub>
   10426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1042a:	f000 fcc3 	bl	10db4 <__aeabi_dsub>
   1042e:	4602      	mov	r2, r0
   10430:	460b      	mov	r3, r1
   10432:	4640      	mov	r0, r8
   10434:	4649      	mov	r1, r9
   10436:	f000 fcbd 	bl	10db4 <__aeabi_dsub>
   1043a:	4680      	mov	r8, r0
   1043c:	e02e      	b.n	1049c <STACK_SIZE+0x49c>
   1043e:	bf00      	nop
   10440:	4a454eef 	.word	0x4a454eef
   10444:	3fca7e28 	.word	0x3fca7e28
   10448:	93c9db65 	.word	0x93c9db65
   1044c:	3fcd864a 	.word	0x3fcd864a
   10450:	a91d4101 	.word	0xa91d4101
   10454:	3fd17460 	.word	0x3fd17460
   10458:	518f264d 	.word	0x518f264d
   1045c:	3fd55555 	.word	0x3fd55555
   10460:	db6fabff 	.word	0xdb6fabff
   10464:	3fdb6db6 	.word	0x3fdb6db6
   10468:	33333303 	.word	0x33333303
   1046c:	3fe33333 	.word	0x3fe33333
   10470:	e0000000 	.word	0xe0000000
   10474:	3feec709 	.word	0x3feec709
   10478:	dc3a03fd 	.word	0xdc3a03fd
   1047c:	3feec709 	.word	0x3feec709
   10480:	145b01f5 	.word	0x145b01f5
   10484:	be3e2fe0 	.word	0xbe3e2fe0
   10488:	43400000 	.word	0x43400000
   1048c:	0003988e 	.word	0x0003988e
   10490:	000bb679 	.word	0x000bb679
   10494:	3ff00000 	.word	0x3ff00000
   10498:	40080000 	.word	0x40080000
   1049c:	4689      	mov	r9, r1
   1049e:	3c01      	subs	r4, #1
   104a0:	ea54 0305 	orrs.w	r3, r4, r5
   104a4:	e9dd 0100 	ldrd	r0, r1, [sp]
   104a8:	bf14      	ite	ne
   104aa:	4cd9      	ldrne	r4, [pc, #868]	; (10810 <STACK_SIZE+0x810>)
   104ac:	4cd9      	ldreq	r4, [pc, #868]	; (10814 <STACK_SIZE+0x814>)
   104ae:	2300      	movs	r3, #0
   104b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
   104b4:	4603      	mov	r3, r0
   104b6:	460c      	mov	r4, r1
   104b8:	e9cd 3402 	strd	r3, r4, [sp, #8]
   104bc:	2300      	movs	r3, #0
   104be:	9302      	str	r3, [sp, #8]
   104c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   104c4:	4622      	mov	r2, r4
   104c6:	462b      	mov	r3, r5
   104c8:	f000 fc74 	bl	10db4 <__aeabi_dsub>
   104cc:	4652      	mov	r2, sl
   104ce:	465b      	mov	r3, fp
   104d0:	f000 fe24 	bl	1111c <__aeabi_dmul>
   104d4:	e9dd 2300 	ldrd	r2, r3, [sp]
   104d8:	4606      	mov	r6, r0
   104da:	460f      	mov	r7, r1
   104dc:	4640      	mov	r0, r8
   104de:	4649      	mov	r1, r9
   104e0:	f000 fe1c 	bl	1111c <__aeabi_dmul>
   104e4:	4602      	mov	r2, r0
   104e6:	460b      	mov	r3, r1
   104e8:	4630      	mov	r0, r6
   104ea:	4639      	mov	r1, r7
   104ec:	f000 fc64 	bl	10db8 <__adddf3>
   104f0:	4622      	mov	r2, r4
   104f2:	4680      	mov	r8, r0
   104f4:	4689      	mov	r9, r1
   104f6:	462b      	mov	r3, r5
   104f8:	4650      	mov	r0, sl
   104fa:	4659      	mov	r1, fp
   104fc:	e9cd 8900 	strd	r8, r9, [sp]
   10500:	f000 fe0c 	bl	1111c <__aeabi_dmul>
   10504:	460b      	mov	r3, r1
   10506:	4602      	mov	r2, r0
   10508:	4606      	mov	r6, r0
   1050a:	460f      	mov	r7, r1
   1050c:	4640      	mov	r0, r8
   1050e:	4649      	mov	r1, r9
   10510:	f000 fc52 	bl	10db8 <__adddf3>
   10514:	4bc0      	ldr	r3, [pc, #768]	; (10818 <STACK_SIZE+0x818>)
   10516:	4299      	cmp	r1, r3
   10518:	4604      	mov	r4, r0
   1051a:	460d      	mov	r5, r1
   1051c:	468a      	mov	sl, r1
   1051e:	f340 8116 	ble.w	1074e <STACK_SIZE+0x74e>
   10522:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   10526:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   1052a:	4303      	orrs	r3, r0
   1052c:	f040 81ea 	bne.w	10904 <STACK_SIZE+0x904>
   10530:	a3a3      	add	r3, pc, #652	; (adr r3, 107c0 <STACK_SIZE+0x7c0>)
   10532:	e9d3 2300 	ldrd	r2, r3, [r3]
   10536:	e9dd 0100 	ldrd	r0, r1, [sp]
   1053a:	f000 fc3d 	bl	10db8 <__adddf3>
   1053e:	4632      	mov	r2, r6
   10540:	4680      	mov	r8, r0
   10542:	4689      	mov	r9, r1
   10544:	463b      	mov	r3, r7
   10546:	4620      	mov	r0, r4
   10548:	4629      	mov	r1, r5
   1054a:	f000 fc33 	bl	10db4 <__aeabi_dsub>
   1054e:	4602      	mov	r2, r0
   10550:	460b      	mov	r3, r1
   10552:	4640      	mov	r0, r8
   10554:	4649      	mov	r1, r9
   10556:	f001 f871 	bl	1163c <__aeabi_dcmpgt>
   1055a:	2800      	cmp	r0, #0
   1055c:	f040 81d2 	bne.w	10904 <STACK_SIZE+0x904>
   10560:	46a8      	mov	r8, r5
   10562:	ea4f 5328 	mov.w	r3, r8, asr #20
   10566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1056a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1056e:	fa42 f303 	asr.w	r3, r2, r3
   10572:	4453      	add	r3, sl
   10574:	f3c3 520a 	ubfx	r2, r3, #20, #11
   10578:	4da8      	ldr	r5, [pc, #672]	; (1081c <STACK_SIZE+0x81c>)
   1057a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   1057e:	4115      	asrs	r5, r2
   10580:	f3c3 0413 	ubfx	r4, r3, #0, #20
   10584:	ea23 0105 	bic.w	r1, r3, r5
   10588:	2000      	movs	r0, #0
   1058a:	f1c2 0b14 	rsb	fp, r2, #20
   1058e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   10592:	f1ba 0f00 	cmp.w	sl, #0
   10596:	4602      	mov	r2, r0
   10598:	460b      	mov	r3, r1
   1059a:	fa44 fb0b 	asr.w	fp, r4, fp
   1059e:	4630      	mov	r0, r6
   105a0:	4639      	mov	r1, r7
   105a2:	bfb8      	it	lt
   105a4:	f1cb 0b00 	rsblt	fp, fp, #0
   105a8:	f000 fc04 	bl	10db4 <__aeabi_dsub>
   105ac:	4602      	mov	r2, r0
   105ae:	460b      	mov	r3, r1
   105b0:	4606      	mov	r6, r0
   105b2:	460f      	mov	r7, r1
   105b4:	e9dd 0100 	ldrd	r0, r1, [sp]
   105b8:	f000 fbfe 	bl	10db8 <__adddf3>
   105bc:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   105c0:	460d      	mov	r5, r1
   105c2:	2400      	movs	r4, #0
   105c4:	a380      	add	r3, pc, #512	; (adr r3, 107c8 <STACK_SIZE+0x7c8>)
   105c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   105ca:	4620      	mov	r0, r4
   105cc:	4629      	mov	r1, r5
   105ce:	f000 fda5 	bl	1111c <__aeabi_dmul>
   105d2:	4632      	mov	r2, r6
   105d4:	4680      	mov	r8, r0
   105d6:	4689      	mov	r9, r1
   105d8:	463b      	mov	r3, r7
   105da:	4620      	mov	r0, r4
   105dc:	4629      	mov	r1, r5
   105de:	f000 fbe9 	bl	10db4 <__aeabi_dsub>
   105e2:	4602      	mov	r2, r0
   105e4:	460b      	mov	r3, r1
   105e6:	e9dd 0100 	ldrd	r0, r1, [sp]
   105ea:	f000 fbe3 	bl	10db4 <__aeabi_dsub>
   105ee:	a378      	add	r3, pc, #480	; (adr r3, 107d0 <STACK_SIZE+0x7d0>)
   105f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   105f4:	f000 fd92 	bl	1111c <__aeabi_dmul>
   105f8:	a377      	add	r3, pc, #476	; (adr r3, 107d8 <STACK_SIZE+0x7d8>)
   105fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   105fe:	4606      	mov	r6, r0
   10600:	460f      	mov	r7, r1
   10602:	4620      	mov	r0, r4
   10604:	4629      	mov	r1, r5
   10606:	f000 fd89 	bl	1111c <__aeabi_dmul>
   1060a:	4602      	mov	r2, r0
   1060c:	460b      	mov	r3, r1
   1060e:	4630      	mov	r0, r6
   10610:	4639      	mov	r1, r7
   10612:	f000 fbd1 	bl	10db8 <__adddf3>
   10616:	4606      	mov	r6, r0
   10618:	460f      	mov	r7, r1
   1061a:	4602      	mov	r2, r0
   1061c:	460b      	mov	r3, r1
   1061e:	4640      	mov	r0, r8
   10620:	4649      	mov	r1, r9
   10622:	f000 fbc9 	bl	10db8 <__adddf3>
   10626:	4642      	mov	r2, r8
   10628:	464b      	mov	r3, r9
   1062a:	4604      	mov	r4, r0
   1062c:	460d      	mov	r5, r1
   1062e:	f000 fbc1 	bl	10db4 <__aeabi_dsub>
   10632:	4602      	mov	r2, r0
   10634:	460b      	mov	r3, r1
   10636:	4630      	mov	r0, r6
   10638:	4639      	mov	r1, r7
   1063a:	f000 fbbb 	bl	10db4 <__aeabi_dsub>
   1063e:	4622      	mov	r2, r4
   10640:	4680      	mov	r8, r0
   10642:	4689      	mov	r9, r1
   10644:	462b      	mov	r3, r5
   10646:	4620      	mov	r0, r4
   10648:	4629      	mov	r1, r5
   1064a:	f000 fd67 	bl	1111c <__aeabi_dmul>
   1064e:	a364      	add	r3, pc, #400	; (adr r3, 107e0 <STACK_SIZE+0x7e0>)
   10650:	e9d3 2300 	ldrd	r2, r3, [r3]
   10654:	4606      	mov	r6, r0
   10656:	460f      	mov	r7, r1
   10658:	f000 fd60 	bl	1111c <__aeabi_dmul>
   1065c:	a362      	add	r3, pc, #392	; (adr r3, 107e8 <STACK_SIZE+0x7e8>)
   1065e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10662:	f000 fba7 	bl	10db4 <__aeabi_dsub>
   10666:	4632      	mov	r2, r6
   10668:	463b      	mov	r3, r7
   1066a:	f000 fd57 	bl	1111c <__aeabi_dmul>
   1066e:	a360      	add	r3, pc, #384	; (adr r3, 107f0 <STACK_SIZE+0x7f0>)
   10670:	e9d3 2300 	ldrd	r2, r3, [r3]
   10674:	f000 fba0 	bl	10db8 <__adddf3>
   10678:	4632      	mov	r2, r6
   1067a:	463b      	mov	r3, r7
   1067c:	f000 fd4e 	bl	1111c <__aeabi_dmul>
   10680:	a35d      	add	r3, pc, #372	; (adr r3, 107f8 <STACK_SIZE+0x7f8>)
   10682:	e9d3 2300 	ldrd	r2, r3, [r3]
   10686:	f000 fb95 	bl	10db4 <__aeabi_dsub>
   1068a:	4632      	mov	r2, r6
   1068c:	463b      	mov	r3, r7
   1068e:	f000 fd45 	bl	1111c <__aeabi_dmul>
   10692:	a35b      	add	r3, pc, #364	; (adr r3, 10800 <STACK_SIZE+0x800>)
   10694:	e9d3 2300 	ldrd	r2, r3, [r3]
   10698:	f000 fb8e 	bl	10db8 <__adddf3>
   1069c:	4632      	mov	r2, r6
   1069e:	463b      	mov	r3, r7
   106a0:	f000 fd3c 	bl	1111c <__aeabi_dmul>
   106a4:	4602      	mov	r2, r0
   106a6:	460b      	mov	r3, r1
   106a8:	4620      	mov	r0, r4
   106aa:	4629      	mov	r1, r5
   106ac:	f000 fb82 	bl	10db4 <__aeabi_dsub>
   106b0:	4606      	mov	r6, r0
   106b2:	460f      	mov	r7, r1
   106b4:	4602      	mov	r2, r0
   106b6:	460b      	mov	r3, r1
   106b8:	4620      	mov	r0, r4
   106ba:	4629      	mov	r1, r5
   106bc:	f000 fd2e 	bl	1111c <__aeabi_dmul>
   106c0:	2200      	movs	r2, #0
   106c2:	e9cd 0100 	strd	r0, r1, [sp]
   106c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   106ca:	4630      	mov	r0, r6
   106cc:	4639      	mov	r1, r7
   106ce:	f000 fb71 	bl	10db4 <__aeabi_dsub>
   106d2:	4602      	mov	r2, r0
   106d4:	460b      	mov	r3, r1
   106d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   106da:	f000 fe49 	bl	11370 <__aeabi_ddiv>
   106de:	4642      	mov	r2, r8
   106e0:	4606      	mov	r6, r0
   106e2:	460f      	mov	r7, r1
   106e4:	464b      	mov	r3, r9
   106e6:	4620      	mov	r0, r4
   106e8:	4629      	mov	r1, r5
   106ea:	f000 fd17 	bl	1111c <__aeabi_dmul>
   106ee:	4642      	mov	r2, r8
   106f0:	464b      	mov	r3, r9
   106f2:	f000 fb61 	bl	10db8 <__adddf3>
   106f6:	4602      	mov	r2, r0
   106f8:	460b      	mov	r3, r1
   106fa:	4630      	mov	r0, r6
   106fc:	4639      	mov	r1, r7
   106fe:	f000 fb59 	bl	10db4 <__aeabi_dsub>
   10702:	4622      	mov	r2, r4
   10704:	462b      	mov	r3, r5
   10706:	f000 fb55 	bl	10db4 <__aeabi_dsub>
   1070a:	4602      	mov	r2, r0
   1070c:	460b      	mov	r3, r1
   1070e:	2000      	movs	r0, #0
   10710:	493f      	ldr	r1, [pc, #252]	; (10810 <STACK_SIZE+0x810>)
   10712:	f000 fb4f 	bl	10db4 <__aeabi_dsub>
   10716:	448a      	add	sl, r1
   10718:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   1071c:	f2c0 8133 	blt.w	10986 <STACK_SIZE+0x986>
   10720:	4651      	mov	r1, sl
   10722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10726:	f000 fcf9 	bl	1111c <__aeabi_dmul>
   1072a:	e45b      	b.n	ffe4 <__ieee754_pow+0x84>
   1072c:	4642      	mov	r2, r8
   1072e:	4640      	mov	r0, r8
   10730:	464b      	mov	r3, r9
   10732:	4649      	mov	r1, r9
   10734:	f000 fcf2 	bl	1111c <__aeabi_dmul>
   10738:	e454      	b.n	ffe4 <__ieee754_pow+0x84>
   1073a:	f1ba 0f00 	cmp.w	sl, #0
   1073e:	f6bf ace0 	bge.w	10102 <STACK_SIZE+0x102>
   10742:	e9dd 3400 	ldrd	r3, r4, [sp]
   10746:	4618      	mov	r0, r3
   10748:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1074c:	e44a      	b.n	ffe4 <__ieee754_pow+0x84>
   1074e:	4b34      	ldr	r3, [pc, #208]	; (10820 <STACK_SIZE+0x820>)
   10750:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   10754:	4598      	cmp	r8, r3
   10756:	f340 80f2 	ble.w	1093e <STACK_SIZE+0x93e>
   1075a:	4b32      	ldr	r3, [pc, #200]	; (10824 <STACK_SIZE+0x824>)
   1075c:	440b      	add	r3, r1
   1075e:	4303      	orrs	r3, r0
   10760:	d10c      	bne.n	1077c <STACK_SIZE+0x77c>
   10762:	4632      	mov	r2, r6
   10764:	463b      	mov	r3, r7
   10766:	f000 fb25 	bl	10db4 <__aeabi_dsub>
   1076a:	4602      	mov	r2, r0
   1076c:	460b      	mov	r3, r1
   1076e:	e9dd 0100 	ldrd	r0, r1, [sp]
   10772:	f000 ff4f 	bl	11614 <__aeabi_dcmple>
   10776:	2800      	cmp	r0, #0
   10778:	f43f aef3 	beq.w	10562 <STACK_SIZE+0x562>
   1077c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10780:	a321      	add	r3, pc, #132	; (adr r3, 10808 <STACK_SIZE+0x808>)
   10782:	e9d3 2300 	ldrd	r2, r3, [r3]
   10786:	f000 fcc9 	bl	1111c <__aeabi_dmul>
   1078a:	a31f      	add	r3, pc, #124	; (adr r3, 10808 <STACK_SIZE+0x808>)
   1078c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10790:	f000 fcc4 	bl	1111c <__aeabi_dmul>
   10794:	e426      	b.n	ffe4 <__ieee754_pow+0x84>
   10796:	4602      	mov	r2, r0
   10798:	460b      	mov	r3, r1
   1079a:	2000      	movs	r0, #0
   1079c:	491c      	ldr	r1, [pc, #112]	; (10810 <STACK_SIZE+0x810>)
   1079e:	f000 fde7 	bl	11370 <__aeabi_ddiv>
   107a2:	e43c      	b.n	1001e <STACK_SIZE+0x1e>
   107a4:	2200      	movs	r2, #0
   107a6:	2300      	movs	r3, #0
   107a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   107ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   107b0:	4b17      	ldr	r3, [pc, #92]	; (10810 <STACK_SIZE+0x810>)
   107b2:	2200      	movs	r2, #0
   107b4:	2700      	movs	r7, #0
   107b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   107ba:	e4e6      	b.n	1018a <STACK_SIZE+0x18a>
   107bc:	f3af 8000 	nop.w
   107c0:	652b82fe 	.word	0x652b82fe
   107c4:	3c971547 	.word	0x3c971547
   107c8:	00000000 	.word	0x00000000
   107cc:	3fe62e43 	.word	0x3fe62e43
   107d0:	fefa39ef 	.word	0xfefa39ef
   107d4:	3fe62e42 	.word	0x3fe62e42
   107d8:	0ca86c39 	.word	0x0ca86c39
   107dc:	be205c61 	.word	0xbe205c61
   107e0:	72bea4d0 	.word	0x72bea4d0
   107e4:	3e663769 	.word	0x3e663769
   107e8:	c5d26bf1 	.word	0xc5d26bf1
   107ec:	3ebbbd41 	.word	0x3ebbbd41
   107f0:	af25de2c 	.word	0xaf25de2c
   107f4:	3f11566a 	.word	0x3f11566a
   107f8:	16bebd93 	.word	0x16bebd93
   107fc:	3f66c16c 	.word	0x3f66c16c
   10800:	5555553e 	.word	0x5555553e
   10804:	3fc55555 	.word	0x3fc55555
   10808:	c2f8f359 	.word	0xc2f8f359
   1080c:	01a56e1f 	.word	0x01a56e1f
   10810:	3ff00000 	.word	0x3ff00000
   10814:	bff00000 	.word	0xbff00000
   10818:	408fffff 	.word	0x408fffff
   1081c:	000fffff 	.word	0x000fffff
   10820:	4090cbff 	.word	0x4090cbff
   10824:	3f6f3400 	.word	0x3f6f3400
   10828:	4b6b      	ldr	r3, [pc, #428]	; (109d8 <STACK_SIZE+0x9d8>)
   1082a:	429e      	cmp	r6, r3
   1082c:	f77f ac66 	ble.w	100fc <STACK_SIZE+0xfc>
   10830:	4b6a      	ldr	r3, [pc, #424]	; (109dc <STACK_SIZE+0x9dc>)
   10832:	429e      	cmp	r6, r3
   10834:	f73f ac13 	bgt.w	1005e <STACK_SIZE+0x5e>
   10838:	2200      	movs	r2, #0
   1083a:	4b68      	ldr	r3, [pc, #416]	; (109dc <STACK_SIZE+0x9dc>)
   1083c:	f000 faba 	bl	10db4 <__aeabi_dsub>
   10840:	a357      	add	r3, pc, #348	; (adr r3, 109a0 <STACK_SIZE+0x9a0>)
   10842:	e9d3 2300 	ldrd	r2, r3, [r3]
   10846:	4606      	mov	r6, r0
   10848:	460f      	mov	r7, r1
   1084a:	f000 fc67 	bl	1111c <__aeabi_dmul>
   1084e:	a356      	add	r3, pc, #344	; (adr r3, 109a8 <STACK_SIZE+0x9a8>)
   10850:	e9d3 2300 	ldrd	r2, r3, [r3]
   10854:	4680      	mov	r8, r0
   10856:	4689      	mov	r9, r1
   10858:	4630      	mov	r0, r6
   1085a:	4639      	mov	r1, r7
   1085c:	f000 fc5e 	bl	1111c <__aeabi_dmul>
   10860:	2200      	movs	r2, #0
   10862:	4682      	mov	sl, r0
   10864:	468b      	mov	fp, r1
   10866:	4b5e      	ldr	r3, [pc, #376]	; (109e0 <STACK_SIZE+0x9e0>)
   10868:	4630      	mov	r0, r6
   1086a:	4639      	mov	r1, r7
   1086c:	f000 fc56 	bl	1111c <__aeabi_dmul>
   10870:	4602      	mov	r2, r0
   10872:	460b      	mov	r3, r1
   10874:	a14e      	add	r1, pc, #312	; (adr r1, 109b0 <STACK_SIZE+0x9b0>)
   10876:	e9d1 0100 	ldrd	r0, r1, [r1]
   1087a:	f000 fa9b 	bl	10db4 <__aeabi_dsub>
   1087e:	4632      	mov	r2, r6
   10880:	463b      	mov	r3, r7
   10882:	f000 fc4b 	bl	1111c <__aeabi_dmul>
   10886:	4602      	mov	r2, r0
   10888:	460b      	mov	r3, r1
   1088a:	2000      	movs	r0, #0
   1088c:	4955      	ldr	r1, [pc, #340]	; (109e4 <STACK_SIZE+0x9e4>)
   1088e:	f000 fa91 	bl	10db4 <__aeabi_dsub>
   10892:	4632      	mov	r2, r6
   10894:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10898:	463b      	mov	r3, r7
   1089a:	4630      	mov	r0, r6
   1089c:	4639      	mov	r1, r7
   1089e:	f000 fc3d 	bl	1111c <__aeabi_dmul>
   108a2:	4602      	mov	r2, r0
   108a4:	460b      	mov	r3, r1
   108a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   108aa:	f000 fc37 	bl	1111c <__aeabi_dmul>
   108ae:	a342      	add	r3, pc, #264	; (adr r3, 109b8 <STACK_SIZE+0x9b8>)
   108b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   108b4:	f000 fc32 	bl	1111c <__aeabi_dmul>
   108b8:	4602      	mov	r2, r0
   108ba:	460b      	mov	r3, r1
   108bc:	4650      	mov	r0, sl
   108be:	4659      	mov	r1, fp
   108c0:	f000 fa78 	bl	10db4 <__aeabi_dsub>
   108c4:	4602      	mov	r2, r0
   108c6:	460b      	mov	r3, r1
   108c8:	4606      	mov	r6, r0
   108ca:	460f      	mov	r7, r1
   108cc:	4640      	mov	r0, r8
   108ce:	4649      	mov	r1, r9
   108d0:	f000 fa72 	bl	10db8 <__adddf3>
   108d4:	4642      	mov	r2, r8
   108d6:	464b      	mov	r3, r9
   108d8:	2000      	movs	r0, #0
   108da:	4682      	mov	sl, r0
   108dc:	468b      	mov	fp, r1
   108de:	f000 fa69 	bl	10db4 <__aeabi_dsub>
   108e2:	4602      	mov	r2, r0
   108e4:	460b      	mov	r3, r1
   108e6:	4630      	mov	r0, r6
   108e8:	4639      	mov	r1, r7
   108ea:	f000 fa63 	bl	10db4 <__aeabi_dsub>
   108ee:	4680      	mov	r8, r0
   108f0:	4689      	mov	r9, r1
   108f2:	e5d4      	b.n	1049e <STACK_SIZE+0x49e>
   108f4:	4642      	mov	r2, r8
   108f6:	464b      	mov	r3, r9
   108f8:	2000      	movs	r0, #0
   108fa:	4938      	ldr	r1, [pc, #224]	; (109dc <STACK_SIZE+0x9dc>)
   108fc:	f000 fd38 	bl	11370 <__aeabi_ddiv>
   10900:	f7ff bb70 	b.w	ffe4 <__ieee754_pow+0x84>
   10904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10908:	a32d      	add	r3, pc, #180	; (adr r3, 109c0 <STACK_SIZE+0x9c0>)
   1090a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1090e:	f000 fc05 	bl	1111c <__aeabi_dmul>
   10912:	a32b      	add	r3, pc, #172	; (adr r3, 109c0 <STACK_SIZE+0x9c0>)
   10914:	e9d3 2300 	ldrd	r2, r3, [r3]
   10918:	f000 fc00 	bl	1111c <__aeabi_dmul>
   1091c:	f7ff bb62 	b.w	ffe4 <__ieee754_pow+0x84>
   10920:	f1be 0f00 	cmp.w	lr, #0
   10924:	f47f ab69 	bne.w	fffa <__ieee754_pow+0x9a>
   10928:	f1c3 0314 	rsb	r3, r3, #20
   1092c:	fa47 f203 	asr.w	r2, r7, r3
   10930:	fa02 f303 	lsl.w	r3, r2, r3
   10934:	429f      	cmp	r7, r3
   10936:	d02a      	beq.n	1098e <STACK_SIZE+0x98e>
   10938:	4674      	mov	r4, lr
   1093a:	f7ff bb36 	b.w	ffaa <__ieee754_pow+0x4a>
   1093e:	4b29      	ldr	r3, [pc, #164]	; (109e4 <STACK_SIZE+0x9e4>)
   10940:	4598      	cmp	r8, r3
   10942:	f73f ae0e 	bgt.w	10562 <STACK_SIZE+0x562>
   10946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1094a:	4692      	mov	sl, r2
   1094c:	4693      	mov	fp, r2
   1094e:	e638      	b.n	105c2 <STACK_SIZE+0x5c2>
   10950:	4602      	mov	r2, r0
   10952:	460b      	mov	r3, r1
   10954:	f000 fa2e 	bl	10db4 <__aeabi_dsub>
   10958:	4602      	mov	r2, r0
   1095a:	460b      	mov	r3, r1
   1095c:	f000 fd08 	bl	11370 <__aeabi_ddiv>
   10960:	f7ff bb40 	b.w	ffe4 <__ieee754_pow+0x84>
   10964:	a318      	add	r3, pc, #96	; (adr r3, 109c8 <STACK_SIZE+0x9c8>)
   10966:	e9d3 2300 	ldrd	r2, r3, [r3]
   1096a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1096e:	a318      	add	r3, pc, #96	; (adr r3, 109d0 <STACK_SIZE+0x9d0>)
   10970:	e9d3 2300 	ldrd	r2, r3, [r3]
   10974:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   10978:	4b1b      	ldr	r3, [pc, #108]	; (109e8 <STACK_SIZE+0x9e8>)
   1097a:	2200      	movs	r2, #0
   1097c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   10980:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10984:	e401      	b.n	1018a <STACK_SIZE+0x18a>
   10986:	465a      	mov	r2, fp
   10988:	f000 f98a 	bl	10ca0 <scalbn>
   1098c:	e6c9      	b.n	10722 <STACK_SIZE+0x722>
   1098e:	f002 0201 	and.w	r2, r2, #1
   10992:	f1c2 0402 	rsb	r4, r2, #2
   10996:	f7ff bb08 	b.w	ffaa <__ieee754_pow+0x4a>
   1099a:	bf00      	nop
   1099c:	f3af 8000 	nop.w
   109a0:	60000000 	.word	0x60000000
   109a4:	3ff71547 	.word	0x3ff71547
   109a8:	f85ddf44 	.word	0xf85ddf44
   109ac:	3e54ae0b 	.word	0x3e54ae0b
   109b0:	55555555 	.word	0x55555555
   109b4:	3fd55555 	.word	0x3fd55555
   109b8:	652b82fe 	.word	0x652b82fe
   109bc:	3ff71547 	.word	0x3ff71547
   109c0:	8800759c 	.word	0x8800759c
   109c4:	7e37e43c 	.word	0x7e37e43c
   109c8:	40000000 	.word	0x40000000
   109cc:	3fe2b803 	.word	0x3fe2b803
   109d0:	43cfd006 	.word	0x43cfd006
   109d4:	3e4cfdeb 	.word	0x3e4cfdeb
   109d8:	3feffffe 	.word	0x3feffffe
   109dc:	3ff00000 	.word	0x3ff00000
   109e0:	3fd00000 	.word	0x3fd00000
   109e4:	3fe00000 	.word	0x3fe00000
   109e8:	3ff80000 	.word	0x3ff80000

000109ec <__ieee754_sqrt>:
   109ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   109f0:	4f5b      	ldr	r7, [pc, #364]	; (10b60 <__ieee754_sqrt+0x174>)
   109f2:	438f      	bics	r7, r1
   109f4:	4605      	mov	r5, r0
   109f6:	460c      	mov	r4, r1
   109f8:	f000 8092 	beq.w	10b20 <__ieee754_sqrt+0x134>
   109fc:	2900      	cmp	r1, #0
   109fe:	460b      	mov	r3, r1
   10a00:	4602      	mov	r2, r0
   10a02:	dd6f      	ble.n	10ae4 <__ieee754_sqrt+0xf8>
   10a04:	150f      	asrs	r7, r1, #20
   10a06:	d07b      	beq.n	10b00 <__ieee754_sqrt+0x114>
   10a08:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   10a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   10a10:	07f8      	lsls	r0, r7, #31
   10a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10a16:	d45c      	bmi.n	10ad2 <__ieee754_sqrt+0xe6>
   10a18:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   10a1c:	2600      	movs	r6, #0
   10a1e:	440b      	add	r3, r1
   10a20:	107f      	asrs	r7, r7, #1
   10a22:	0052      	lsls	r2, r2, #1
   10a24:	46b6      	mov	lr, r6
   10a26:	2016      	movs	r0, #22
   10a28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   10a2c:	eb0e 0401 	add.w	r4, lr, r1
   10a30:	429c      	cmp	r4, r3
   10a32:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   10a36:	ea4f 0242 	mov.w	r2, r2, lsl #1
   10a3a:	dc03      	bgt.n	10a44 <__ieee754_sqrt+0x58>
   10a3c:	1b1b      	subs	r3, r3, r4
   10a3e:	eb04 0e01 	add.w	lr, r4, r1
   10a42:	440e      	add	r6, r1
   10a44:	3801      	subs	r0, #1
   10a46:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   10a4a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   10a4e:	d1ed      	bne.n	10a2c <__ieee754_sqrt+0x40>
   10a50:	4684      	mov	ip, r0
   10a52:	2420      	movs	r4, #32
   10a54:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   10a58:	e009      	b.n	10a6e <__ieee754_sqrt+0x82>
   10a5a:	d020      	beq.n	10a9e <__ieee754_sqrt+0xb2>
   10a5c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   10a60:	3c01      	subs	r4, #1
   10a62:	ea4f 0151 	mov.w	r1, r1, lsr #1
   10a66:	442b      	add	r3, r5
   10a68:	ea4f 0242 	mov.w	r2, r2, lsl #1
   10a6c:	d020      	beq.n	10ab0 <__ieee754_sqrt+0xc4>
   10a6e:	4573      	cmp	r3, lr
   10a70:	eb01 050c 	add.w	r5, r1, ip
   10a74:	ddf1      	ble.n	10a5a <__ieee754_sqrt+0x6e>
   10a76:	2d00      	cmp	r5, #0
   10a78:	eb05 0c01 	add.w	ip, r5, r1
   10a7c:	db09      	blt.n	10a92 <__ieee754_sqrt+0xa6>
   10a7e:	46f0      	mov	r8, lr
   10a80:	4295      	cmp	r5, r2
   10a82:	eba3 030e 	sub.w	r3, r3, lr
   10a86:	d900      	bls.n	10a8a <__ieee754_sqrt+0x9e>
   10a88:	3b01      	subs	r3, #1
   10a8a:	1b52      	subs	r2, r2, r5
   10a8c:	4408      	add	r0, r1
   10a8e:	46c6      	mov	lr, r8
   10a90:	e7e4      	b.n	10a5c <__ieee754_sqrt+0x70>
   10a92:	f1bc 0f00 	cmp.w	ip, #0
   10a96:	dbf2      	blt.n	10a7e <__ieee754_sqrt+0x92>
   10a98:	f10e 0801 	add.w	r8, lr, #1
   10a9c:	e7f0      	b.n	10a80 <__ieee754_sqrt+0x94>
   10a9e:	4295      	cmp	r5, r2
   10aa0:	d8dc      	bhi.n	10a5c <__ieee754_sqrt+0x70>
   10aa2:	2d00      	cmp	r5, #0
   10aa4:	eb05 0c01 	add.w	ip, r5, r1
   10aa8:	db44      	blt.n	10b34 <__ieee754_sqrt+0x148>
   10aaa:	4698      	mov	r8, r3
   10aac:	2300      	movs	r3, #0
   10aae:	e7ec      	b.n	10a8a <__ieee754_sqrt+0x9e>
   10ab0:	4313      	orrs	r3, r2
   10ab2:	d113      	bne.n	10adc <__ieee754_sqrt+0xf0>
   10ab4:	0840      	lsrs	r0, r0, #1
   10ab6:	1073      	asrs	r3, r6, #1
   10ab8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   10abc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   10ac0:	07f2      	lsls	r2, r6, #31
   10ac2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   10ac6:	bf48      	it	mi
   10ac8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   10acc:	4649      	mov	r1, r9
   10ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10ad2:	005b      	lsls	r3, r3, #1
   10ad4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   10ad8:	0052      	lsls	r2, r2, #1
   10ada:	e79d      	b.n	10a18 <__ieee754_sqrt+0x2c>
   10adc:	1c41      	adds	r1, r0, #1
   10ade:	d02d      	beq.n	10b3c <__ieee754_sqrt+0x150>
   10ae0:	3001      	adds	r0, #1
   10ae2:	e7e7      	b.n	10ab4 <__ieee754_sqrt+0xc8>
   10ae4:	4606      	mov	r6, r0
   10ae6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   10aea:	433e      	orrs	r6, r7
   10aec:	d0ef      	beq.n	10ace <__ieee754_sqrt+0xe2>
   10aee:	bb69      	cbnz	r1, 10b4c <__ieee754_sqrt+0x160>
   10af0:	460f      	mov	r7, r1
   10af2:	0ad3      	lsrs	r3, r2, #11
   10af4:	3f15      	subs	r7, #21
   10af6:	0552      	lsls	r2, r2, #21
   10af8:	2b00      	cmp	r3, #0
   10afa:	d0fa      	beq.n	10af2 <__ieee754_sqrt+0x106>
   10afc:	02de      	lsls	r6, r3, #11
   10afe:	d420      	bmi.n	10b42 <__ieee754_sqrt+0x156>
   10b00:	2400      	movs	r4, #0
   10b02:	e000      	b.n	10b06 <__ieee754_sqrt+0x11a>
   10b04:	4604      	mov	r4, r0
   10b06:	005b      	lsls	r3, r3, #1
   10b08:	02dd      	lsls	r5, r3, #11
   10b0a:	f104 0001 	add.w	r0, r4, #1
   10b0e:	d5f9      	bpl.n	10b04 <__ieee754_sqrt+0x118>
   10b10:	f1c0 0120 	rsb	r1, r0, #32
   10b14:	fa22 f101 	lsr.w	r1, r2, r1
   10b18:	430b      	orrs	r3, r1
   10b1a:	1b3f      	subs	r7, r7, r4
   10b1c:	4082      	lsls	r2, r0
   10b1e:	e773      	b.n	10a08 <__ieee754_sqrt+0x1c>
   10b20:	4602      	mov	r2, r0
   10b22:	460b      	mov	r3, r1
   10b24:	f000 fafa 	bl	1111c <__aeabi_dmul>
   10b28:	462a      	mov	r2, r5
   10b2a:	4623      	mov	r3, r4
   10b2c:	f000 f944 	bl	10db8 <__adddf3>
   10b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b34:	f1bc 0f00 	cmp.w	ip, #0
   10b38:	daae      	bge.n	10a98 <__ieee754_sqrt+0xac>
   10b3a:	e7b6      	b.n	10aaa <__ieee754_sqrt+0xbe>
   10b3c:	3601      	adds	r6, #1
   10b3e:	4620      	mov	r0, r4
   10b40:	e7b9      	b.n	10ab6 <__ieee754_sqrt+0xca>
   10b42:	2000      	movs	r0, #0
   10b44:	2120      	movs	r1, #32
   10b46:	f04f 34ff 	mov.w	r4, #4294967295
   10b4a:	e7e3      	b.n	10b14 <__ieee754_sqrt+0x128>
   10b4c:	4602      	mov	r2, r0
   10b4e:	460b      	mov	r3, r1
   10b50:	f000 f930 	bl	10db4 <__aeabi_dsub>
   10b54:	4602      	mov	r2, r0
   10b56:	460b      	mov	r3, r1
   10b58:	f000 fc0a 	bl	11370 <__aeabi_ddiv>
   10b5c:	e7b7      	b.n	10ace <__ieee754_sqrt+0xe2>
   10b5e:	bf00      	nop
   10b60:	7ff00000 	.word	0x7ff00000

00010b64 <fabs>:
   10b64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10b68:	4770      	bx	lr
   10b6a:	bf00      	nop

00010b6c <finite>:
   10b6c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   10b70:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   10b74:	0fc0      	lsrs	r0, r0, #31
   10b76:	4770      	bx	lr

00010b78 <matherr>:
   10b78:	2000      	movs	r0, #0
   10b7a:	4770      	bx	lr

00010b7c <nan>:
   10b7c:	2000      	movs	r0, #0
   10b7e:	4901      	ldr	r1, [pc, #4]	; (10b84 <nan+0x8>)
   10b80:	4770      	bx	lr
   10b82:	bf00      	nop
   10b84:	7ff80000 	.word	0x7ff80000

00010b88 <rint>:
   10b88:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b8a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   10b8e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   10b92:	2e13      	cmp	r6, #19
   10b94:	b083      	sub	sp, #12
   10b96:	4602      	mov	r2, r0
   10b98:	460b      	mov	r3, r1
   10b9a:	460c      	mov	r4, r1
   10b9c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   10ba0:	4607      	mov	r7, r0
   10ba2:	dc2e      	bgt.n	10c02 <rint+0x7a>
   10ba4:	2e00      	cmp	r6, #0
   10ba6:	db49      	blt.n	10c3c <rint+0xb4>
   10ba8:	493a      	ldr	r1, [pc, #232]	; (10c94 <rint+0x10c>)
   10baa:	4131      	asrs	r1, r6
   10bac:	ea03 0001 	and.w	r0, r3, r1
   10bb0:	4310      	orrs	r0, r2
   10bb2:	d02b      	beq.n	10c0c <rint+0x84>
   10bb4:	0849      	lsrs	r1, r1, #1
   10bb6:	400b      	ands	r3, r1
   10bb8:	ea53 0702 	orrs.w	r7, r3, r2
   10bbc:	d00c      	beq.n	10bd8 <rint+0x50>
   10bbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   10bc2:	2e13      	cmp	r6, #19
   10bc4:	ea24 0101 	bic.w	r1, r4, r1
   10bc8:	fa43 f406 	asr.w	r4, r3, r6
   10bcc:	ea44 0401 	orr.w	r4, r4, r1
   10bd0:	bf0c      	ite	eq
   10bd2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   10bd6:	2700      	movne	r7, #0
   10bd8:	4b2f      	ldr	r3, [pc, #188]	; (10c98 <rint+0x110>)
   10bda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   10bde:	4621      	mov	r1, r4
   10be0:	e9d5 4500 	ldrd	r4, r5, [r5]
   10be4:	4638      	mov	r0, r7
   10be6:	4622      	mov	r2, r4
   10be8:	462b      	mov	r3, r5
   10bea:	f000 f8e5 	bl	10db8 <__adddf3>
   10bee:	e9cd 0100 	strd	r0, r1, [sp]
   10bf2:	4622      	mov	r2, r4
   10bf4:	462b      	mov	r3, r5
   10bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
   10bfa:	f000 f8db 	bl	10db4 <__aeabi_dsub>
   10bfe:	b003      	add	sp, #12
   10c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c02:	2e33      	cmp	r6, #51	; 0x33
   10c04:	dd06      	ble.n	10c14 <rint+0x8c>
   10c06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   10c0a:	d040      	beq.n	10c8e <rint+0x106>
   10c0c:	4610      	mov	r0, r2
   10c0e:	4619      	mov	r1, r3
   10c10:	b003      	add	sp, #12
   10c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c14:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   10c18:	f04f 31ff 	mov.w	r1, #4294967295
   10c1c:	fa21 f10e 	lsr.w	r1, r1, lr
   10c20:	4208      	tst	r0, r1
   10c22:	d0f3      	beq.n	10c0c <rint+0x84>
   10c24:	0849      	lsrs	r1, r1, #1
   10c26:	4208      	tst	r0, r1
   10c28:	d0d6      	beq.n	10bd8 <rint+0x50>
   10c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10c2e:	ea20 0101 	bic.w	r1, r0, r1
   10c32:	fa43 fe0e 	asr.w	lr, r3, lr
   10c36:	ea4e 0701 	orr.w	r7, lr, r1
   10c3a:	e7cd      	b.n	10bd8 <rint+0x50>
   10c3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10c40:	4301      	orrs	r1, r0
   10c42:	d0e3      	beq.n	10c0c <rint+0x84>
   10c44:	f3c3 0113 	ubfx	r1, r3, #0, #20
   10c48:	4e13      	ldr	r6, [pc, #76]	; (10c98 <rint+0x110>)
   10c4a:	4301      	orrs	r1, r0
   10c4c:	f1c1 0c00 	rsb	ip, r1, #0
   10c50:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   10c54:	e9d6 6700 	ldrd	r6, r7, [r6]
   10c58:	ea4c 0c01 	orr.w	ip, ip, r1
   10c5c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   10c60:	0c5c      	lsrs	r4, r3, #17
   10c62:	0464      	lsls	r4, r4, #17
   10c64:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   10c68:	ea43 0104 	orr.w	r1, r3, r4
   10c6c:	4632      	mov	r2, r6
   10c6e:	463b      	mov	r3, r7
   10c70:	f000 f8a2 	bl	10db8 <__adddf3>
   10c74:	e9cd 0100 	strd	r0, r1, [sp]
   10c78:	4632      	mov	r2, r6
   10c7a:	463b      	mov	r3, r7
   10c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
   10c80:	f000 f898 	bl	10db4 <__aeabi_dsub>
   10c84:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   10c88:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   10c8c:	e7c0      	b.n	10c10 <rint+0x88>
   10c8e:	f000 f893 	bl	10db8 <__adddf3>
   10c92:	e7bd      	b.n	10c10 <rint+0x88>
   10c94:	000fffff 	.word	0x000fffff
   10c98:	00012cf8 	.word	0x00012cf8
   10c9c:	00000000 	.word	0x00000000

00010ca0 <scalbn>:
   10ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ca2:	f3c1 560a 	ubfx	r6, r1, #20, #11
   10ca6:	4604      	mov	r4, r0
   10ca8:	460d      	mov	r5, r1
   10caa:	460b      	mov	r3, r1
   10cac:	4617      	mov	r7, r2
   10cae:	bb0e      	cbnz	r6, 10cf4 <scalbn+0x54>
   10cb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10cb4:	4303      	orrs	r3, r0
   10cb6:	4686      	mov	lr, r0
   10cb8:	d025      	beq.n	10d06 <scalbn+0x66>
   10cba:	2200      	movs	r2, #0
   10cbc:	4b34      	ldr	r3, [pc, #208]	; (10d90 <scalbn+0xf0>)
   10cbe:	f000 fa2d 	bl	1111c <__aeabi_dmul>
   10cc2:	4a34      	ldr	r2, [pc, #208]	; (10d94 <scalbn+0xf4>)
   10cc4:	4297      	cmp	r7, r2
   10cc6:	4604      	mov	r4, r0
   10cc8:	460d      	mov	r5, r1
   10cca:	460b      	mov	r3, r1
   10ccc:	db2a      	blt.n	10d24 <scalbn+0x84>
   10cce:	f3c1 560a 	ubfx	r6, r1, #20, #11
   10cd2:	3e36      	subs	r6, #54	; 0x36
   10cd4:	443e      	add	r6, r7
   10cd6:	f240 72fe 	movw	r2, #2046	; 0x7fe
   10cda:	4296      	cmp	r6, r2
   10cdc:	dc28      	bgt.n	10d30 <scalbn+0x90>
   10cde:	2e00      	cmp	r6, #0
   10ce0:	dd12      	ble.n	10d08 <scalbn+0x68>
   10ce2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   10ce6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   10cea:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   10cee:	4620      	mov	r0, r4
   10cf0:	4629      	mov	r1, r5
   10cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10cf4:	f240 72ff 	movw	r2, #2047	; 0x7ff
   10cf8:	4296      	cmp	r6, r2
   10cfa:	d1eb      	bne.n	10cd4 <scalbn+0x34>
   10cfc:	4602      	mov	r2, r0
   10cfe:	460b      	mov	r3, r1
   10d00:	f000 f85a 	bl	10db8 <__adddf3>
   10d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d08:	f116 0f35 	cmn.w	r6, #53	; 0x35
   10d0c:	da1d      	bge.n	10d4a <scalbn+0xaa>
   10d0e:	f24c 3350 	movw	r3, #50000	; 0xc350
   10d12:	429f      	cmp	r7, r3
   10d14:	4622      	mov	r2, r4
   10d16:	462b      	mov	r3, r5
   10d18:	dc25      	bgt.n	10d66 <scalbn+0xc6>
   10d1a:	a119      	add	r1, pc, #100	; (adr r1, 10d80 <scalbn+0xe0>)
   10d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
   10d20:	f000 f83c 	bl	10d9c <copysign>
   10d24:	a316      	add	r3, pc, #88	; (adr r3, 10d80 <scalbn+0xe0>)
   10d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d2a:	f000 f9f7 	bl	1111c <__aeabi_dmul>
   10d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d30:	4622      	mov	r2, r4
   10d32:	462b      	mov	r3, r5
   10d34:	a114      	add	r1, pc, #80	; (adr r1, 10d88 <scalbn+0xe8>)
   10d36:	e9d1 0100 	ldrd	r0, r1, [r1]
   10d3a:	f000 f82f 	bl	10d9c <copysign>
   10d3e:	a312      	add	r3, pc, #72	; (adr r3, 10d88 <scalbn+0xe8>)
   10d40:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d44:	f000 f9ea 	bl	1111c <__aeabi_dmul>
   10d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   10d4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   10d52:	3636      	adds	r6, #54	; 0x36
   10d54:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   10d58:	4620      	mov	r0, r4
   10d5a:	4629      	mov	r1, r5
   10d5c:	2200      	movs	r2, #0
   10d5e:	4b0e      	ldr	r3, [pc, #56]	; (10d98 <scalbn+0xf8>)
   10d60:	f000 f9dc 	bl	1111c <__aeabi_dmul>
   10d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d66:	a108      	add	r1, pc, #32	; (adr r1, 10d88 <scalbn+0xe8>)
   10d68:	e9d1 0100 	ldrd	r0, r1, [r1]
   10d6c:	f000 f816 	bl	10d9c <copysign>
   10d70:	a305      	add	r3, pc, #20	; (adr r3, 10d88 <scalbn+0xe8>)
   10d72:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d76:	f000 f9d1 	bl	1111c <__aeabi_dmul>
   10d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d7c:	f3af 8000 	nop.w
   10d80:	c2f8f359 	.word	0xc2f8f359
   10d84:	01a56e1f 	.word	0x01a56e1f
   10d88:	8800759c 	.word	0x8800759c
   10d8c:	7e37e43c 	.word	0x7e37e43c
   10d90:	43500000 	.word	0x43500000
   10d94:	ffff3cb0 	.word	0xffff3cb0
   10d98:	3c900000 	.word	0x3c900000

00010d9c <copysign>:
   10d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   10da0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   10da4:	ea42 0103 	orr.w	r1, r2, r3
   10da8:	4770      	bx	lr
   10daa:	bf00      	nop

00010dac <__aeabi_drsub>:
   10dac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10db0:	e002      	b.n	10db8 <__adddf3>
   10db2:	bf00      	nop

00010db4 <__aeabi_dsub>:
   10db4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00010db8 <__adddf3>:
   10db8:	b530      	push	{r4, r5, lr}
   10dba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10dbe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10dc2:	ea94 0f05 	teq	r4, r5
   10dc6:	bf08      	it	eq
   10dc8:	ea90 0f02 	teqeq	r0, r2
   10dcc:	bf1f      	itttt	ne
   10dce:	ea54 0c00 	orrsne.w	ip, r4, r0
   10dd2:	ea55 0c02 	orrsne.w	ip, r5, r2
   10dd6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   10dda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10dde:	f000 80e2 	beq.w	10fa6 <__adddf3+0x1ee>
   10de2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   10de6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   10dea:	bfb8      	it	lt
   10dec:	426d      	neglt	r5, r5
   10dee:	dd0c      	ble.n	10e0a <__adddf3+0x52>
   10df0:	442c      	add	r4, r5
   10df2:	ea80 0202 	eor.w	r2, r0, r2
   10df6:	ea81 0303 	eor.w	r3, r1, r3
   10dfa:	ea82 0000 	eor.w	r0, r2, r0
   10dfe:	ea83 0101 	eor.w	r1, r3, r1
   10e02:	ea80 0202 	eor.w	r2, r0, r2
   10e06:	ea81 0303 	eor.w	r3, r1, r3
   10e0a:	2d36      	cmp	r5, #54	; 0x36
   10e0c:	bf88      	it	hi
   10e0e:	bd30      	pophi	{r4, r5, pc}
   10e10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10e14:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10e18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   10e1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   10e20:	d002      	beq.n	10e28 <__adddf3+0x70>
   10e22:	4240      	negs	r0, r0
   10e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10e28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   10e2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10e30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   10e34:	d002      	beq.n	10e3c <__adddf3+0x84>
   10e36:	4252      	negs	r2, r2
   10e38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10e3c:	ea94 0f05 	teq	r4, r5
   10e40:	f000 80a7 	beq.w	10f92 <__adddf3+0x1da>
   10e44:	f1a4 0401 	sub.w	r4, r4, #1
   10e48:	f1d5 0e20 	rsbs	lr, r5, #32
   10e4c:	db0d      	blt.n	10e6a <__adddf3+0xb2>
   10e4e:	fa02 fc0e 	lsl.w	ip, r2, lr
   10e52:	fa22 f205 	lsr.w	r2, r2, r5
   10e56:	1880      	adds	r0, r0, r2
   10e58:	f141 0100 	adc.w	r1, r1, #0
   10e5c:	fa03 f20e 	lsl.w	r2, r3, lr
   10e60:	1880      	adds	r0, r0, r2
   10e62:	fa43 f305 	asr.w	r3, r3, r5
   10e66:	4159      	adcs	r1, r3
   10e68:	e00e      	b.n	10e88 <__adddf3+0xd0>
   10e6a:	f1a5 0520 	sub.w	r5, r5, #32
   10e6e:	f10e 0e20 	add.w	lr, lr, #32
   10e72:	2a01      	cmp	r2, #1
   10e74:	fa03 fc0e 	lsl.w	ip, r3, lr
   10e78:	bf28      	it	cs
   10e7a:	f04c 0c02 	orrcs.w	ip, ip, #2
   10e7e:	fa43 f305 	asr.w	r3, r3, r5
   10e82:	18c0      	adds	r0, r0, r3
   10e84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   10e88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10e8c:	d507      	bpl.n	10e9e <__adddf3+0xe6>
   10e8e:	f04f 0e00 	mov.w	lr, #0
   10e92:	f1dc 0c00 	rsbs	ip, ip, #0
   10e96:	eb7e 0000 	sbcs.w	r0, lr, r0
   10e9a:	eb6e 0101 	sbc.w	r1, lr, r1
   10e9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10ea2:	d31b      	bcc.n	10edc <__adddf3+0x124>
   10ea4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   10ea8:	d30c      	bcc.n	10ec4 <__adddf3+0x10c>
   10eaa:	0849      	lsrs	r1, r1, #1
   10eac:	ea5f 0030 	movs.w	r0, r0, rrx
   10eb0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10eb4:	f104 0401 	add.w	r4, r4, #1
   10eb8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10ebc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10ec0:	f080 809a 	bcs.w	10ff8 <__adddf3+0x240>
   10ec4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10ec8:	bf08      	it	eq
   10eca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10ece:	f150 0000 	adcs.w	r0, r0, #0
   10ed2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10ed6:	ea41 0105 	orr.w	r1, r1, r5
   10eda:	bd30      	pop	{r4, r5, pc}
   10edc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10ee0:	4140      	adcs	r0, r0
   10ee2:	eb41 0101 	adc.w	r1, r1, r1
   10ee6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10eea:	f1a4 0401 	sub.w	r4, r4, #1
   10eee:	d1e9      	bne.n	10ec4 <__adddf3+0x10c>
   10ef0:	f091 0f00 	teq	r1, #0
   10ef4:	bf04      	itt	eq
   10ef6:	4601      	moveq	r1, r0
   10ef8:	2000      	moveq	r0, #0
   10efa:	fab1 f381 	clz	r3, r1
   10efe:	bf08      	it	eq
   10f00:	3320      	addeq	r3, #32
   10f02:	f1a3 030b 	sub.w	r3, r3, #11
   10f06:	f1b3 0220 	subs.w	r2, r3, #32
   10f0a:	da0c      	bge.n	10f26 <__adddf3+0x16e>
   10f0c:	320c      	adds	r2, #12
   10f0e:	dd08      	ble.n	10f22 <__adddf3+0x16a>
   10f10:	f102 0c14 	add.w	ip, r2, #20
   10f14:	f1c2 020c 	rsb	r2, r2, #12
   10f18:	fa01 f00c 	lsl.w	r0, r1, ip
   10f1c:	fa21 f102 	lsr.w	r1, r1, r2
   10f20:	e00c      	b.n	10f3c <__adddf3+0x184>
   10f22:	f102 0214 	add.w	r2, r2, #20
   10f26:	bfd8      	it	le
   10f28:	f1c2 0c20 	rsble	ip, r2, #32
   10f2c:	fa01 f102 	lsl.w	r1, r1, r2
   10f30:	fa20 fc0c 	lsr.w	ip, r0, ip
   10f34:	bfdc      	itt	le
   10f36:	ea41 010c 	orrle.w	r1, r1, ip
   10f3a:	4090      	lslle	r0, r2
   10f3c:	1ae4      	subs	r4, r4, r3
   10f3e:	bfa2      	ittt	ge
   10f40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10f44:	4329      	orrge	r1, r5
   10f46:	bd30      	popge	{r4, r5, pc}
   10f48:	ea6f 0404 	mvn.w	r4, r4
   10f4c:	3c1f      	subs	r4, #31
   10f4e:	da1c      	bge.n	10f8a <__adddf3+0x1d2>
   10f50:	340c      	adds	r4, #12
   10f52:	dc0e      	bgt.n	10f72 <__adddf3+0x1ba>
   10f54:	f104 0414 	add.w	r4, r4, #20
   10f58:	f1c4 0220 	rsb	r2, r4, #32
   10f5c:	fa20 f004 	lsr.w	r0, r0, r4
   10f60:	fa01 f302 	lsl.w	r3, r1, r2
   10f64:	ea40 0003 	orr.w	r0, r0, r3
   10f68:	fa21 f304 	lsr.w	r3, r1, r4
   10f6c:	ea45 0103 	orr.w	r1, r5, r3
   10f70:	bd30      	pop	{r4, r5, pc}
   10f72:	f1c4 040c 	rsb	r4, r4, #12
   10f76:	f1c4 0220 	rsb	r2, r4, #32
   10f7a:	fa20 f002 	lsr.w	r0, r0, r2
   10f7e:	fa01 f304 	lsl.w	r3, r1, r4
   10f82:	ea40 0003 	orr.w	r0, r0, r3
   10f86:	4629      	mov	r1, r5
   10f88:	bd30      	pop	{r4, r5, pc}
   10f8a:	fa21 f004 	lsr.w	r0, r1, r4
   10f8e:	4629      	mov	r1, r5
   10f90:	bd30      	pop	{r4, r5, pc}
   10f92:	f094 0f00 	teq	r4, #0
   10f96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   10f9a:	bf06      	itte	eq
   10f9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10fa0:	3401      	addeq	r4, #1
   10fa2:	3d01      	subne	r5, #1
   10fa4:	e74e      	b.n	10e44 <__adddf3+0x8c>
   10fa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   10faa:	bf18      	it	ne
   10fac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10fb0:	d029      	beq.n	11006 <__adddf3+0x24e>
   10fb2:	ea94 0f05 	teq	r4, r5
   10fb6:	bf08      	it	eq
   10fb8:	ea90 0f02 	teqeq	r0, r2
   10fbc:	d005      	beq.n	10fca <__adddf3+0x212>
   10fbe:	ea54 0c00 	orrs.w	ip, r4, r0
   10fc2:	bf04      	itt	eq
   10fc4:	4619      	moveq	r1, r3
   10fc6:	4610      	moveq	r0, r2
   10fc8:	bd30      	pop	{r4, r5, pc}
   10fca:	ea91 0f03 	teq	r1, r3
   10fce:	bf1e      	ittt	ne
   10fd0:	2100      	movne	r1, #0
   10fd2:	2000      	movne	r0, #0
   10fd4:	bd30      	popne	{r4, r5, pc}
   10fd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   10fda:	d105      	bne.n	10fe8 <__adddf3+0x230>
   10fdc:	0040      	lsls	r0, r0, #1
   10fde:	4149      	adcs	r1, r1
   10fe0:	bf28      	it	cs
   10fe2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   10fe6:	bd30      	pop	{r4, r5, pc}
   10fe8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10fec:	bf3c      	itt	cc
   10fee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10ff2:	bd30      	popcc	{r4, r5, pc}
   10ff4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10ff8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10ffc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   11000:	f04f 0000 	mov.w	r0, #0
   11004:	bd30      	pop	{r4, r5, pc}
   11006:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1100a:	bf1a      	itte	ne
   1100c:	4619      	movne	r1, r3
   1100e:	4610      	movne	r0, r2
   11010:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   11014:	bf1c      	itt	ne
   11016:	460b      	movne	r3, r1
   11018:	4602      	movne	r2, r0
   1101a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1101e:	bf06      	itte	eq
   11020:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   11024:	ea91 0f03 	teqeq	r1, r3
   11028:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1102c:	bd30      	pop	{r4, r5, pc}
   1102e:	bf00      	nop

00011030 <__aeabi_ui2d>:
   11030:	f090 0f00 	teq	r0, #0
   11034:	bf04      	itt	eq
   11036:	2100      	moveq	r1, #0
   11038:	4770      	bxeq	lr
   1103a:	b530      	push	{r4, r5, lr}
   1103c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11040:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11044:	f04f 0500 	mov.w	r5, #0
   11048:	f04f 0100 	mov.w	r1, #0
   1104c:	e750      	b.n	10ef0 <__adddf3+0x138>
   1104e:	bf00      	nop

00011050 <__aeabi_i2d>:
   11050:	f090 0f00 	teq	r0, #0
   11054:	bf04      	itt	eq
   11056:	2100      	moveq	r1, #0
   11058:	4770      	bxeq	lr
   1105a:	b530      	push	{r4, r5, lr}
   1105c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11060:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11064:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   11068:	bf48      	it	mi
   1106a:	4240      	negmi	r0, r0
   1106c:	f04f 0100 	mov.w	r1, #0
   11070:	e73e      	b.n	10ef0 <__adddf3+0x138>
   11072:	bf00      	nop

00011074 <__aeabi_f2d>:
   11074:	0042      	lsls	r2, r0, #1
   11076:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1107a:	ea4f 0131 	mov.w	r1, r1, rrx
   1107e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   11082:	bf1f      	itttt	ne
   11084:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   11088:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1108c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   11090:	4770      	bxne	lr
   11092:	f092 0f00 	teq	r2, #0
   11096:	bf14      	ite	ne
   11098:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1109c:	4770      	bxeq	lr
   1109e:	b530      	push	{r4, r5, lr}
   110a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   110a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   110a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   110ac:	e720      	b.n	10ef0 <__adddf3+0x138>
   110ae:	bf00      	nop

000110b0 <__aeabi_ul2d>:
   110b0:	ea50 0201 	orrs.w	r2, r0, r1
   110b4:	bf08      	it	eq
   110b6:	4770      	bxeq	lr
   110b8:	b530      	push	{r4, r5, lr}
   110ba:	f04f 0500 	mov.w	r5, #0
   110be:	e00a      	b.n	110d6 <__aeabi_l2d+0x16>

000110c0 <__aeabi_l2d>:
   110c0:	ea50 0201 	orrs.w	r2, r0, r1
   110c4:	bf08      	it	eq
   110c6:	4770      	bxeq	lr
   110c8:	b530      	push	{r4, r5, lr}
   110ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   110ce:	d502      	bpl.n	110d6 <__aeabi_l2d+0x16>
   110d0:	4240      	negs	r0, r0
   110d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   110d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   110da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   110de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   110e2:	f43f aedc 	beq.w	10e9e <__adddf3+0xe6>
   110e6:	f04f 0203 	mov.w	r2, #3
   110ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   110ee:	bf18      	it	ne
   110f0:	3203      	addne	r2, #3
   110f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   110f6:	bf18      	it	ne
   110f8:	3203      	addne	r2, #3
   110fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   110fe:	f1c2 0320 	rsb	r3, r2, #32
   11102:	fa00 fc03 	lsl.w	ip, r0, r3
   11106:	fa20 f002 	lsr.w	r0, r0, r2
   1110a:	fa01 fe03 	lsl.w	lr, r1, r3
   1110e:	ea40 000e 	orr.w	r0, r0, lr
   11112:	fa21 f102 	lsr.w	r1, r1, r2
   11116:	4414      	add	r4, r2
   11118:	e6c1      	b.n	10e9e <__adddf3+0xe6>
   1111a:	bf00      	nop

0001111c <__aeabi_dmul>:
   1111c:	b570      	push	{r4, r5, r6, lr}
   1111e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   11126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1112a:	bf1d      	ittte	ne
   1112c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   11130:	ea94 0f0c 	teqne	r4, ip
   11134:	ea95 0f0c 	teqne	r5, ip
   11138:	f000 f8de 	bleq	112f8 <__aeabi_dmul+0x1dc>
   1113c:	442c      	add	r4, r5
   1113e:	ea81 0603 	eor.w	r6, r1, r3
   11142:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   11146:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1114a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1114e:	bf18      	it	ne
   11150:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   11154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1115c:	d038      	beq.n	111d0 <__aeabi_dmul+0xb4>
   1115e:	fba0 ce02 	umull	ip, lr, r0, r2
   11162:	f04f 0500 	mov.w	r5, #0
   11166:	fbe1 e502 	umlal	lr, r5, r1, r2
   1116a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1116e:	fbe0 e503 	umlal	lr, r5, r0, r3
   11172:	f04f 0600 	mov.w	r6, #0
   11176:	fbe1 5603 	umlal	r5, r6, r1, r3
   1117a:	f09c 0f00 	teq	ip, #0
   1117e:	bf18      	it	ne
   11180:	f04e 0e01 	orrne.w	lr, lr, #1
   11184:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   11188:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1118c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   11190:	d204      	bcs.n	1119c <__aeabi_dmul+0x80>
   11192:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   11196:	416d      	adcs	r5, r5
   11198:	eb46 0606 	adc.w	r6, r6, r6
   1119c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   111a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   111a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   111a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   111ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   111b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   111b4:	bf88      	it	hi
   111b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   111ba:	d81e      	bhi.n	111fa <__aeabi_dmul+0xde>
   111bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   111c0:	bf08      	it	eq
   111c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   111c6:	f150 0000 	adcs.w	r0, r0, #0
   111ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   111ce:	bd70      	pop	{r4, r5, r6, pc}
   111d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   111d4:	ea46 0101 	orr.w	r1, r6, r1
   111d8:	ea40 0002 	orr.w	r0, r0, r2
   111dc:	ea81 0103 	eor.w	r1, r1, r3
   111e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   111e4:	bfc2      	ittt	gt
   111e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   111ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   111ee:	bd70      	popgt	{r4, r5, r6, pc}
   111f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   111f4:	f04f 0e00 	mov.w	lr, #0
   111f8:	3c01      	subs	r4, #1
   111fa:	f300 80ab 	bgt.w	11354 <__aeabi_dmul+0x238>
   111fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   11202:	bfde      	ittt	le
   11204:	2000      	movle	r0, #0
   11206:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1120a:	bd70      	pople	{r4, r5, r6, pc}
   1120c:	f1c4 0400 	rsb	r4, r4, #0
   11210:	3c20      	subs	r4, #32
   11212:	da35      	bge.n	11280 <__aeabi_dmul+0x164>
   11214:	340c      	adds	r4, #12
   11216:	dc1b      	bgt.n	11250 <__aeabi_dmul+0x134>
   11218:	f104 0414 	add.w	r4, r4, #20
   1121c:	f1c4 0520 	rsb	r5, r4, #32
   11220:	fa00 f305 	lsl.w	r3, r0, r5
   11224:	fa20 f004 	lsr.w	r0, r0, r4
   11228:	fa01 f205 	lsl.w	r2, r1, r5
   1122c:	ea40 0002 	orr.w	r0, r0, r2
   11230:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   11234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1123c:	fa21 f604 	lsr.w	r6, r1, r4
   11240:	eb42 0106 	adc.w	r1, r2, r6
   11244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   11248:	bf08      	it	eq
   1124a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1124e:	bd70      	pop	{r4, r5, r6, pc}
   11250:	f1c4 040c 	rsb	r4, r4, #12
   11254:	f1c4 0520 	rsb	r5, r4, #32
   11258:	fa00 f304 	lsl.w	r3, r0, r4
   1125c:	fa20 f005 	lsr.w	r0, r0, r5
   11260:	fa01 f204 	lsl.w	r2, r1, r4
   11264:	ea40 0002 	orr.w	r0, r0, r2
   11268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1126c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   11270:	f141 0100 	adc.w	r1, r1, #0
   11274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   11278:	bf08      	it	eq
   1127a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1127e:	bd70      	pop	{r4, r5, r6, pc}
   11280:	f1c4 0520 	rsb	r5, r4, #32
   11284:	fa00 f205 	lsl.w	r2, r0, r5
   11288:	ea4e 0e02 	orr.w	lr, lr, r2
   1128c:	fa20 f304 	lsr.w	r3, r0, r4
   11290:	fa01 f205 	lsl.w	r2, r1, r5
   11294:	ea43 0302 	orr.w	r3, r3, r2
   11298:	fa21 f004 	lsr.w	r0, r1, r4
   1129c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   112a0:	fa21 f204 	lsr.w	r2, r1, r4
   112a4:	ea20 0002 	bic.w	r0, r0, r2
   112a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   112ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   112b0:	bf08      	it	eq
   112b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   112b6:	bd70      	pop	{r4, r5, r6, pc}
   112b8:	f094 0f00 	teq	r4, #0
   112bc:	d10f      	bne.n	112de <__aeabi_dmul+0x1c2>
   112be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   112c2:	0040      	lsls	r0, r0, #1
   112c4:	eb41 0101 	adc.w	r1, r1, r1
   112c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   112cc:	bf08      	it	eq
   112ce:	3c01      	subeq	r4, #1
   112d0:	d0f7      	beq.n	112c2 <__aeabi_dmul+0x1a6>
   112d2:	ea41 0106 	orr.w	r1, r1, r6
   112d6:	f095 0f00 	teq	r5, #0
   112da:	bf18      	it	ne
   112dc:	4770      	bxne	lr
   112de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   112e2:	0052      	lsls	r2, r2, #1
   112e4:	eb43 0303 	adc.w	r3, r3, r3
   112e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   112ec:	bf08      	it	eq
   112ee:	3d01      	subeq	r5, #1
   112f0:	d0f7      	beq.n	112e2 <__aeabi_dmul+0x1c6>
   112f2:	ea43 0306 	orr.w	r3, r3, r6
   112f6:	4770      	bx	lr
   112f8:	ea94 0f0c 	teq	r4, ip
   112fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   11300:	bf18      	it	ne
   11302:	ea95 0f0c 	teqne	r5, ip
   11306:	d00c      	beq.n	11322 <__aeabi_dmul+0x206>
   11308:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1130c:	bf18      	it	ne
   1130e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11312:	d1d1      	bne.n	112b8 <__aeabi_dmul+0x19c>
   11314:	ea81 0103 	eor.w	r1, r1, r3
   11318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1131c:	f04f 0000 	mov.w	r0, #0
   11320:	bd70      	pop	{r4, r5, r6, pc}
   11322:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11326:	bf06      	itte	eq
   11328:	4610      	moveq	r0, r2
   1132a:	4619      	moveq	r1, r3
   1132c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11330:	d019      	beq.n	11366 <__aeabi_dmul+0x24a>
   11332:	ea94 0f0c 	teq	r4, ip
   11336:	d102      	bne.n	1133e <__aeabi_dmul+0x222>
   11338:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1133c:	d113      	bne.n	11366 <__aeabi_dmul+0x24a>
   1133e:	ea95 0f0c 	teq	r5, ip
   11342:	d105      	bne.n	11350 <__aeabi_dmul+0x234>
   11344:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   11348:	bf1c      	itt	ne
   1134a:	4610      	movne	r0, r2
   1134c:	4619      	movne	r1, r3
   1134e:	d10a      	bne.n	11366 <__aeabi_dmul+0x24a>
   11350:	ea81 0103 	eor.w	r1, r1, r3
   11354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11358:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1135c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   11360:	f04f 0000 	mov.w	r0, #0
   11364:	bd70      	pop	{r4, r5, r6, pc}
   11366:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1136a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1136e:	bd70      	pop	{r4, r5, r6, pc}

00011370 <__aeabi_ddiv>:
   11370:	b570      	push	{r4, r5, r6, lr}
   11372:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11376:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1137a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1137e:	bf1d      	ittte	ne
   11380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   11384:	ea94 0f0c 	teqne	r4, ip
   11388:	ea95 0f0c 	teqne	r5, ip
   1138c:	f000 f8a7 	bleq	114de <__aeabi_ddiv+0x16e>
   11390:	eba4 0405 	sub.w	r4, r4, r5
   11394:	ea81 0e03 	eor.w	lr, r1, r3
   11398:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1139c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   113a0:	f000 8088 	beq.w	114b4 <__aeabi_ddiv+0x144>
   113a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   113a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   113ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   113b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   113b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   113b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   113bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   113c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   113c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   113c8:	429d      	cmp	r5, r3
   113ca:	bf08      	it	eq
   113cc:	4296      	cmpeq	r6, r2
   113ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   113d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   113d6:	d202      	bcs.n	113de <__aeabi_ddiv+0x6e>
   113d8:	085b      	lsrs	r3, r3, #1
   113da:	ea4f 0232 	mov.w	r2, r2, rrx
   113de:	1ab6      	subs	r6, r6, r2
   113e0:	eb65 0503 	sbc.w	r5, r5, r3
   113e4:	085b      	lsrs	r3, r3, #1
   113e6:	ea4f 0232 	mov.w	r2, r2, rrx
   113ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   113ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   113f2:	ebb6 0e02 	subs.w	lr, r6, r2
   113f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   113fa:	bf22      	ittt	cs
   113fc:	1ab6      	subcs	r6, r6, r2
   113fe:	4675      	movcs	r5, lr
   11400:	ea40 000c 	orrcs.w	r0, r0, ip
   11404:	085b      	lsrs	r3, r3, #1
   11406:	ea4f 0232 	mov.w	r2, r2, rrx
   1140a:	ebb6 0e02 	subs.w	lr, r6, r2
   1140e:	eb75 0e03 	sbcs.w	lr, r5, r3
   11412:	bf22      	ittt	cs
   11414:	1ab6      	subcs	r6, r6, r2
   11416:	4675      	movcs	r5, lr
   11418:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1141c:	085b      	lsrs	r3, r3, #1
   1141e:	ea4f 0232 	mov.w	r2, r2, rrx
   11422:	ebb6 0e02 	subs.w	lr, r6, r2
   11426:	eb75 0e03 	sbcs.w	lr, r5, r3
   1142a:	bf22      	ittt	cs
   1142c:	1ab6      	subcs	r6, r6, r2
   1142e:	4675      	movcs	r5, lr
   11430:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   11434:	085b      	lsrs	r3, r3, #1
   11436:	ea4f 0232 	mov.w	r2, r2, rrx
   1143a:	ebb6 0e02 	subs.w	lr, r6, r2
   1143e:	eb75 0e03 	sbcs.w	lr, r5, r3
   11442:	bf22      	ittt	cs
   11444:	1ab6      	subcs	r6, r6, r2
   11446:	4675      	movcs	r5, lr
   11448:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1144c:	ea55 0e06 	orrs.w	lr, r5, r6
   11450:	d018      	beq.n	11484 <__aeabi_ddiv+0x114>
   11452:	ea4f 1505 	mov.w	r5, r5, lsl #4
   11456:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1145a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1145e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11462:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   11466:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1146a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1146e:	d1c0      	bne.n	113f2 <__aeabi_ddiv+0x82>
   11470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11474:	d10b      	bne.n	1148e <__aeabi_ddiv+0x11e>
   11476:	ea41 0100 	orr.w	r1, r1, r0
   1147a:	f04f 0000 	mov.w	r0, #0
   1147e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   11482:	e7b6      	b.n	113f2 <__aeabi_ddiv+0x82>
   11484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11488:	bf04      	itt	eq
   1148a:	4301      	orreq	r1, r0
   1148c:	2000      	moveq	r0, #0
   1148e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   11492:	bf88      	it	hi
   11494:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   11498:	f63f aeaf 	bhi.w	111fa <__aeabi_dmul+0xde>
   1149c:	ebb5 0c03 	subs.w	ip, r5, r3
   114a0:	bf04      	itt	eq
   114a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   114a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   114aa:	f150 0000 	adcs.w	r0, r0, #0
   114ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   114b2:	bd70      	pop	{r4, r5, r6, pc}
   114b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   114b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   114bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   114c0:	bfc2      	ittt	gt
   114c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   114c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   114ca:	bd70      	popgt	{r4, r5, r6, pc}
   114cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   114d0:	f04f 0e00 	mov.w	lr, #0
   114d4:	3c01      	subs	r4, #1
   114d6:	e690      	b.n	111fa <__aeabi_dmul+0xde>
   114d8:	ea45 0e06 	orr.w	lr, r5, r6
   114dc:	e68d      	b.n	111fa <__aeabi_dmul+0xde>
   114de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   114e2:	ea94 0f0c 	teq	r4, ip
   114e6:	bf08      	it	eq
   114e8:	ea95 0f0c 	teqeq	r5, ip
   114ec:	f43f af3b 	beq.w	11366 <__aeabi_dmul+0x24a>
   114f0:	ea94 0f0c 	teq	r4, ip
   114f4:	d10a      	bne.n	1150c <__aeabi_ddiv+0x19c>
   114f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   114fa:	f47f af34 	bne.w	11366 <__aeabi_dmul+0x24a>
   114fe:	ea95 0f0c 	teq	r5, ip
   11502:	f47f af25 	bne.w	11350 <__aeabi_dmul+0x234>
   11506:	4610      	mov	r0, r2
   11508:	4619      	mov	r1, r3
   1150a:	e72c      	b.n	11366 <__aeabi_dmul+0x24a>
   1150c:	ea95 0f0c 	teq	r5, ip
   11510:	d106      	bne.n	11520 <__aeabi_ddiv+0x1b0>
   11512:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   11516:	f43f aefd 	beq.w	11314 <__aeabi_dmul+0x1f8>
   1151a:	4610      	mov	r0, r2
   1151c:	4619      	mov	r1, r3
   1151e:	e722      	b.n	11366 <__aeabi_dmul+0x24a>
   11520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11524:	bf18      	it	ne
   11526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1152a:	f47f aec5 	bne.w	112b8 <__aeabi_dmul+0x19c>
   1152e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   11532:	f47f af0d 	bne.w	11350 <__aeabi_dmul+0x234>
   11536:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1153a:	f47f aeeb 	bne.w	11314 <__aeabi_dmul+0x1f8>
   1153e:	e712      	b.n	11366 <__aeabi_dmul+0x24a>

00011540 <__gedf2>:
   11540:	f04f 3cff 	mov.w	ip, #4294967295
   11544:	e006      	b.n	11554 <__cmpdf2+0x4>
   11546:	bf00      	nop

00011548 <__ledf2>:
   11548:	f04f 0c01 	mov.w	ip, #1
   1154c:	e002      	b.n	11554 <__cmpdf2+0x4>
   1154e:	bf00      	nop

00011550 <__cmpdf2>:
   11550:	f04f 0c01 	mov.w	ip, #1
   11554:	f84d cd04 	str.w	ip, [sp, #-4]!
   11558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1155c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11564:	bf18      	it	ne
   11566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1156a:	d01b      	beq.n	115a4 <__cmpdf2+0x54>
   1156c:	b001      	add	sp, #4
   1156e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   11572:	bf0c      	ite	eq
   11574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   11578:	ea91 0f03 	teqne	r1, r3
   1157c:	bf02      	ittt	eq
   1157e:	ea90 0f02 	teqeq	r0, r2
   11582:	2000      	moveq	r0, #0
   11584:	4770      	bxeq	lr
   11586:	f110 0f00 	cmn.w	r0, #0
   1158a:	ea91 0f03 	teq	r1, r3
   1158e:	bf58      	it	pl
   11590:	4299      	cmppl	r1, r3
   11592:	bf08      	it	eq
   11594:	4290      	cmpeq	r0, r2
   11596:	bf2c      	ite	cs
   11598:	17d8      	asrcs	r0, r3, #31
   1159a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1159e:	f040 0001 	orr.w	r0, r0, #1
   115a2:	4770      	bx	lr
   115a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   115a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   115ac:	d102      	bne.n	115b4 <__cmpdf2+0x64>
   115ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   115b2:	d107      	bne.n	115c4 <__cmpdf2+0x74>
   115b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   115b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   115bc:	d1d6      	bne.n	1156c <__cmpdf2+0x1c>
   115be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   115c2:	d0d3      	beq.n	1156c <__cmpdf2+0x1c>
   115c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   115c8:	4770      	bx	lr
   115ca:	bf00      	nop

000115cc <__aeabi_cdrcmple>:
   115cc:	4684      	mov	ip, r0
   115ce:	4610      	mov	r0, r2
   115d0:	4662      	mov	r2, ip
   115d2:	468c      	mov	ip, r1
   115d4:	4619      	mov	r1, r3
   115d6:	4663      	mov	r3, ip
   115d8:	e000      	b.n	115dc <__aeabi_cdcmpeq>
   115da:	bf00      	nop

000115dc <__aeabi_cdcmpeq>:
   115dc:	b501      	push	{r0, lr}
   115de:	f7ff ffb7 	bl	11550 <__cmpdf2>
   115e2:	2800      	cmp	r0, #0
   115e4:	bf48      	it	mi
   115e6:	f110 0f00 	cmnmi.w	r0, #0
   115ea:	bd01      	pop	{r0, pc}

000115ec <__aeabi_dcmpeq>:
   115ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   115f0:	f7ff fff4 	bl	115dc <__aeabi_cdcmpeq>
   115f4:	bf0c      	ite	eq
   115f6:	2001      	moveq	r0, #1
   115f8:	2000      	movne	r0, #0
   115fa:	f85d fb08 	ldr.w	pc, [sp], #8
   115fe:	bf00      	nop

00011600 <__aeabi_dcmplt>:
   11600:	f84d ed08 	str.w	lr, [sp, #-8]!
   11604:	f7ff ffea 	bl	115dc <__aeabi_cdcmpeq>
   11608:	bf34      	ite	cc
   1160a:	2001      	movcc	r0, #1
   1160c:	2000      	movcs	r0, #0
   1160e:	f85d fb08 	ldr.w	pc, [sp], #8
   11612:	bf00      	nop

00011614 <__aeabi_dcmple>:
   11614:	f84d ed08 	str.w	lr, [sp, #-8]!
   11618:	f7ff ffe0 	bl	115dc <__aeabi_cdcmpeq>
   1161c:	bf94      	ite	ls
   1161e:	2001      	movls	r0, #1
   11620:	2000      	movhi	r0, #0
   11622:	f85d fb08 	ldr.w	pc, [sp], #8
   11626:	bf00      	nop

00011628 <__aeabi_dcmpge>:
   11628:	f84d ed08 	str.w	lr, [sp, #-8]!
   1162c:	f7ff ffce 	bl	115cc <__aeabi_cdrcmple>
   11630:	bf94      	ite	ls
   11632:	2001      	movls	r0, #1
   11634:	2000      	movhi	r0, #0
   11636:	f85d fb08 	ldr.w	pc, [sp], #8
   1163a:	bf00      	nop

0001163c <__aeabi_dcmpgt>:
   1163c:	f84d ed08 	str.w	lr, [sp, #-8]!
   11640:	f7ff ffc4 	bl	115cc <__aeabi_cdrcmple>
   11644:	bf34      	ite	cc
   11646:	2001      	movcc	r0, #1
   11648:	2000      	movcs	r0, #0
   1164a:	f85d fb08 	ldr.w	pc, [sp], #8
   1164e:	bf00      	nop

00011650 <__aeabi_dcmpun>:
   11650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11658:	d102      	bne.n	11660 <__aeabi_dcmpun+0x10>
   1165a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1165e:	d10a      	bne.n	11676 <__aeabi_dcmpun+0x26>
   11660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11668:	d102      	bne.n	11670 <__aeabi_dcmpun+0x20>
   1166a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1166e:	d102      	bne.n	11676 <__aeabi_dcmpun+0x26>
   11670:	f04f 0000 	mov.w	r0, #0
   11674:	4770      	bx	lr
   11676:	f04f 0001 	mov.w	r0, #1
   1167a:	4770      	bx	lr

0001167c <__aeabi_d2uiz>:
   1167c:	004a      	lsls	r2, r1, #1
   1167e:	d211      	bcs.n	116a4 <__aeabi_d2uiz+0x28>
   11680:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11684:	d211      	bcs.n	116aa <__aeabi_d2uiz+0x2e>
   11686:	d50d      	bpl.n	116a4 <__aeabi_d2uiz+0x28>
   11688:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1168c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11690:	d40e      	bmi.n	116b0 <__aeabi_d2uiz+0x34>
   11692:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1169a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1169e:	fa23 f002 	lsr.w	r0, r3, r2
   116a2:	4770      	bx	lr
   116a4:	f04f 0000 	mov.w	r0, #0
   116a8:	4770      	bx	lr
   116aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   116ae:	d102      	bne.n	116b6 <__aeabi_d2uiz+0x3a>
   116b0:	f04f 30ff 	mov.w	r0, #4294967295
   116b4:	4770      	bx	lr
   116b6:	f04f 0000 	mov.w	r0, #0
   116ba:	4770      	bx	lr

000116bc <__cxa_atexit>:
   116bc:	4613      	mov	r3, r2
   116be:	460a      	mov	r2, r1
   116c0:	4601      	mov	r1, r0
   116c2:	2002      	movs	r0, #2
   116c4:	f000 b9aa 	b.w	11a1c <__register_exitproc>

000116c8 <__errno>:
   116c8:	4b01      	ldr	r3, [pc, #4]	; (116d0 <__errno+0x8>)
   116ca:	6818      	ldr	r0, [r3, #0]
   116cc:	4770      	bx	lr
   116ce:	bf00      	nop
   116d0:	20000158 	.word	0x20000158

000116d4 <ffs>:
   116d4:	b140      	cbz	r0, 116e8 <ffs+0x14>
   116d6:	2300      	movs	r3, #0
   116d8:	fa40 f103 	asr.w	r1, r0, r3
   116dc:	1c5a      	adds	r2, r3, #1
   116de:	07c9      	lsls	r1, r1, #31
   116e0:	4613      	mov	r3, r2
   116e2:	d5f9      	bpl.n	116d8 <ffs+0x4>
   116e4:	4610      	mov	r0, r2
   116e6:	4770      	bx	lr
   116e8:	4602      	mov	r2, r0
   116ea:	4610      	mov	r0, r2
   116ec:	4770      	bx	lr
   116ee:	bf00      	nop

000116f0 <__libc_init_array>:
   116f0:	b570      	push	{r4, r5, r6, lr}
   116f2:	4e0f      	ldr	r6, [pc, #60]	; (11730 <__libc_init_array+0x40>)
   116f4:	4d0f      	ldr	r5, [pc, #60]	; (11734 <__libc_init_array+0x44>)
   116f6:	1b76      	subs	r6, r6, r5
   116f8:	10b6      	asrs	r6, r6, #2
   116fa:	bf18      	it	ne
   116fc:	2400      	movne	r4, #0
   116fe:	d005      	beq.n	1170c <__libc_init_array+0x1c>
   11700:	3401      	adds	r4, #1
   11702:	f855 3b04 	ldr.w	r3, [r5], #4
   11706:	4798      	blx	r3
   11708:	42a6      	cmp	r6, r4
   1170a:	d1f9      	bne.n	11700 <__libc_init_array+0x10>
   1170c:	4e0a      	ldr	r6, [pc, #40]	; (11738 <__libc_init_array+0x48>)
   1170e:	4d0b      	ldr	r5, [pc, #44]	; (1173c <__libc_init_array+0x4c>)
   11710:	1b76      	subs	r6, r6, r5
   11712:	f001 fafb 	bl	12d0c <_init>
   11716:	10b6      	asrs	r6, r6, #2
   11718:	bf18      	it	ne
   1171a:	2400      	movne	r4, #0
   1171c:	d006      	beq.n	1172c <__libc_init_array+0x3c>
   1171e:	3401      	adds	r4, #1
   11720:	f855 3b04 	ldr.w	r3, [r5], #4
   11724:	4798      	blx	r3
   11726:	42a6      	cmp	r6, r4
   11728:	d1f9      	bne.n	1171e <__libc_init_array+0x2e>
   1172a:	bd70      	pop	{r4, r5, r6, pc}
   1172c:	bd70      	pop	{r4, r5, r6, pc}
   1172e:	bf00      	nop
   11730:	00012d18 	.word	0x00012d18
   11734:	00012d18 	.word	0x00012d18
   11738:	00012d5c 	.word	0x00012d5c
   1173c:	00012d18 	.word	0x00012d18

00011740 <memcpy>:
   11740:	4684      	mov	ip, r0
   11742:	ea41 0300 	orr.w	r3, r1, r0
   11746:	f013 0303 	ands.w	r3, r3, #3
   1174a:	d16d      	bne.n	11828 <memcpy+0xe8>
   1174c:	3a40      	subs	r2, #64	; 0x40
   1174e:	d341      	bcc.n	117d4 <memcpy+0x94>
   11750:	f851 3b04 	ldr.w	r3, [r1], #4
   11754:	f840 3b04 	str.w	r3, [r0], #4
   11758:	f851 3b04 	ldr.w	r3, [r1], #4
   1175c:	f840 3b04 	str.w	r3, [r0], #4
   11760:	f851 3b04 	ldr.w	r3, [r1], #4
   11764:	f840 3b04 	str.w	r3, [r0], #4
   11768:	f851 3b04 	ldr.w	r3, [r1], #4
   1176c:	f840 3b04 	str.w	r3, [r0], #4
   11770:	f851 3b04 	ldr.w	r3, [r1], #4
   11774:	f840 3b04 	str.w	r3, [r0], #4
   11778:	f851 3b04 	ldr.w	r3, [r1], #4
   1177c:	f840 3b04 	str.w	r3, [r0], #4
   11780:	f851 3b04 	ldr.w	r3, [r1], #4
   11784:	f840 3b04 	str.w	r3, [r0], #4
   11788:	f851 3b04 	ldr.w	r3, [r1], #4
   1178c:	f840 3b04 	str.w	r3, [r0], #4
   11790:	f851 3b04 	ldr.w	r3, [r1], #4
   11794:	f840 3b04 	str.w	r3, [r0], #4
   11798:	f851 3b04 	ldr.w	r3, [r1], #4
   1179c:	f840 3b04 	str.w	r3, [r0], #4
   117a0:	f851 3b04 	ldr.w	r3, [r1], #4
   117a4:	f840 3b04 	str.w	r3, [r0], #4
   117a8:	f851 3b04 	ldr.w	r3, [r1], #4
   117ac:	f840 3b04 	str.w	r3, [r0], #4
   117b0:	f851 3b04 	ldr.w	r3, [r1], #4
   117b4:	f840 3b04 	str.w	r3, [r0], #4
   117b8:	f851 3b04 	ldr.w	r3, [r1], #4
   117bc:	f840 3b04 	str.w	r3, [r0], #4
   117c0:	f851 3b04 	ldr.w	r3, [r1], #4
   117c4:	f840 3b04 	str.w	r3, [r0], #4
   117c8:	f851 3b04 	ldr.w	r3, [r1], #4
   117cc:	f840 3b04 	str.w	r3, [r0], #4
   117d0:	3a40      	subs	r2, #64	; 0x40
   117d2:	d2bd      	bcs.n	11750 <memcpy+0x10>
   117d4:	3230      	adds	r2, #48	; 0x30
   117d6:	d311      	bcc.n	117fc <memcpy+0xbc>
   117d8:	f851 3b04 	ldr.w	r3, [r1], #4
   117dc:	f840 3b04 	str.w	r3, [r0], #4
   117e0:	f851 3b04 	ldr.w	r3, [r1], #4
   117e4:	f840 3b04 	str.w	r3, [r0], #4
   117e8:	f851 3b04 	ldr.w	r3, [r1], #4
   117ec:	f840 3b04 	str.w	r3, [r0], #4
   117f0:	f851 3b04 	ldr.w	r3, [r1], #4
   117f4:	f840 3b04 	str.w	r3, [r0], #4
   117f8:	3a10      	subs	r2, #16
   117fa:	d2ed      	bcs.n	117d8 <memcpy+0x98>
   117fc:	320c      	adds	r2, #12
   117fe:	d305      	bcc.n	1180c <memcpy+0xcc>
   11800:	f851 3b04 	ldr.w	r3, [r1], #4
   11804:	f840 3b04 	str.w	r3, [r0], #4
   11808:	3a04      	subs	r2, #4
   1180a:	d2f9      	bcs.n	11800 <memcpy+0xc0>
   1180c:	3204      	adds	r2, #4
   1180e:	d008      	beq.n	11822 <memcpy+0xe2>
   11810:	07d2      	lsls	r2, r2, #31
   11812:	bf1c      	itt	ne
   11814:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11818:	f800 3b01 	strbne.w	r3, [r0], #1
   1181c:	d301      	bcc.n	11822 <memcpy+0xe2>
   1181e:	880b      	ldrh	r3, [r1, #0]
   11820:	8003      	strh	r3, [r0, #0]
   11822:	4660      	mov	r0, ip
   11824:	4770      	bx	lr
   11826:	bf00      	nop
   11828:	2a08      	cmp	r2, #8
   1182a:	d313      	bcc.n	11854 <memcpy+0x114>
   1182c:	078b      	lsls	r3, r1, #30
   1182e:	d08d      	beq.n	1174c <memcpy+0xc>
   11830:	f010 0303 	ands.w	r3, r0, #3
   11834:	d08a      	beq.n	1174c <memcpy+0xc>
   11836:	f1c3 0304 	rsb	r3, r3, #4
   1183a:	1ad2      	subs	r2, r2, r3
   1183c:	07db      	lsls	r3, r3, #31
   1183e:	bf1c      	itt	ne
   11840:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11844:	f800 3b01 	strbne.w	r3, [r0], #1
   11848:	d380      	bcc.n	1174c <memcpy+0xc>
   1184a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1184e:	f820 3b02 	strh.w	r3, [r0], #2
   11852:	e77b      	b.n	1174c <memcpy+0xc>
   11854:	3a04      	subs	r2, #4
   11856:	d3d9      	bcc.n	1180c <memcpy+0xcc>
   11858:	3a01      	subs	r2, #1
   1185a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1185e:	f800 3b01 	strb.w	r3, [r0], #1
   11862:	d2f9      	bcs.n	11858 <memcpy+0x118>
   11864:	780b      	ldrb	r3, [r1, #0]
   11866:	7003      	strb	r3, [r0, #0]
   11868:	784b      	ldrb	r3, [r1, #1]
   1186a:	7043      	strb	r3, [r0, #1]
   1186c:	788b      	ldrb	r3, [r1, #2]
   1186e:	7083      	strb	r3, [r0, #2]
   11870:	4660      	mov	r0, ip
   11872:	4770      	bx	lr

00011874 <memset>:
   11874:	b470      	push	{r4, r5, r6}
   11876:	0786      	lsls	r6, r0, #30
   11878:	d046      	beq.n	11908 <memset+0x94>
   1187a:	1e54      	subs	r4, r2, #1
   1187c:	2a00      	cmp	r2, #0
   1187e:	d041      	beq.n	11904 <memset+0x90>
   11880:	b2ca      	uxtb	r2, r1
   11882:	4603      	mov	r3, r0
   11884:	e002      	b.n	1188c <memset+0x18>
   11886:	f114 34ff 	adds.w	r4, r4, #4294967295
   1188a:	d33b      	bcc.n	11904 <memset+0x90>
   1188c:	f803 2b01 	strb.w	r2, [r3], #1
   11890:	079d      	lsls	r5, r3, #30
   11892:	d1f8      	bne.n	11886 <memset+0x12>
   11894:	2c03      	cmp	r4, #3
   11896:	d92e      	bls.n	118f6 <memset+0x82>
   11898:	b2cd      	uxtb	r5, r1
   1189a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1189e:	2c0f      	cmp	r4, #15
   118a0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   118a4:	d919      	bls.n	118da <memset+0x66>
   118a6:	f103 0210 	add.w	r2, r3, #16
   118aa:	4626      	mov	r6, r4
   118ac:	3e10      	subs	r6, #16
   118ae:	2e0f      	cmp	r6, #15
   118b0:	f842 5c10 	str.w	r5, [r2, #-16]
   118b4:	f842 5c0c 	str.w	r5, [r2, #-12]
   118b8:	f842 5c08 	str.w	r5, [r2, #-8]
   118bc:	f842 5c04 	str.w	r5, [r2, #-4]
   118c0:	f102 0210 	add.w	r2, r2, #16
   118c4:	d8f2      	bhi.n	118ac <memset+0x38>
   118c6:	f1a4 0210 	sub.w	r2, r4, #16
   118ca:	f022 020f 	bic.w	r2, r2, #15
   118ce:	f004 040f 	and.w	r4, r4, #15
   118d2:	3210      	adds	r2, #16
   118d4:	2c03      	cmp	r4, #3
   118d6:	4413      	add	r3, r2
   118d8:	d90d      	bls.n	118f6 <memset+0x82>
   118da:	461e      	mov	r6, r3
   118dc:	4622      	mov	r2, r4
   118de:	3a04      	subs	r2, #4
   118e0:	2a03      	cmp	r2, #3
   118e2:	f846 5b04 	str.w	r5, [r6], #4
   118e6:	d8fa      	bhi.n	118de <memset+0x6a>
   118e8:	1f22      	subs	r2, r4, #4
   118ea:	f022 0203 	bic.w	r2, r2, #3
   118ee:	3204      	adds	r2, #4
   118f0:	4413      	add	r3, r2
   118f2:	f004 0403 	and.w	r4, r4, #3
   118f6:	b12c      	cbz	r4, 11904 <memset+0x90>
   118f8:	b2c9      	uxtb	r1, r1
   118fa:	441c      	add	r4, r3
   118fc:	f803 1b01 	strb.w	r1, [r3], #1
   11900:	429c      	cmp	r4, r3
   11902:	d1fb      	bne.n	118fc <memset+0x88>
   11904:	bc70      	pop	{r4, r5, r6}
   11906:	4770      	bx	lr
   11908:	4614      	mov	r4, r2
   1190a:	4603      	mov	r3, r0
   1190c:	e7c2      	b.n	11894 <memset+0x20>
   1190e:	bf00      	nop
	...

00011940 <strlen>:
   11940:	f890 f000 	pld	[r0]
   11944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   11948:	f020 0107 	bic.w	r1, r0, #7
   1194c:	f06f 0c00 	mvn.w	ip, #0
   11950:	f010 0407 	ands.w	r4, r0, #7
   11954:	f891 f020 	pld	[r1, #32]
   11958:	f040 8049 	bne.w	119ee <strlen+0xae>
   1195c:	f04f 0400 	mov.w	r4, #0
   11960:	f06f 0007 	mvn.w	r0, #7
   11964:	e9d1 2300 	ldrd	r2, r3, [r1]
   11968:	f891 f040 	pld	[r1, #64]	; 0x40
   1196c:	f100 0008 	add.w	r0, r0, #8
   11970:	fa82 f24c 	uadd8	r2, r2, ip
   11974:	faa4 f28c 	sel	r2, r4, ip
   11978:	fa83 f34c 	uadd8	r3, r3, ip
   1197c:	faa2 f38c 	sel	r3, r2, ip
   11980:	bb4b      	cbnz	r3, 119d6 <strlen+0x96>
   11982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11986:	fa82 f24c 	uadd8	r2, r2, ip
   1198a:	f100 0008 	add.w	r0, r0, #8
   1198e:	faa4 f28c 	sel	r2, r4, ip
   11992:	fa83 f34c 	uadd8	r3, r3, ip
   11996:	faa2 f38c 	sel	r3, r2, ip
   1199a:	b9e3      	cbnz	r3, 119d6 <strlen+0x96>
   1199c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   119a0:	fa82 f24c 	uadd8	r2, r2, ip
   119a4:	f100 0008 	add.w	r0, r0, #8
   119a8:	faa4 f28c 	sel	r2, r4, ip
   119ac:	fa83 f34c 	uadd8	r3, r3, ip
   119b0:	faa2 f38c 	sel	r3, r2, ip
   119b4:	b97b      	cbnz	r3, 119d6 <strlen+0x96>
   119b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   119ba:	f101 0120 	add.w	r1, r1, #32
   119be:	fa82 f24c 	uadd8	r2, r2, ip
   119c2:	f100 0008 	add.w	r0, r0, #8
   119c6:	faa4 f28c 	sel	r2, r4, ip
   119ca:	fa83 f34c 	uadd8	r3, r3, ip
   119ce:	faa2 f38c 	sel	r3, r2, ip
   119d2:	2b00      	cmp	r3, #0
   119d4:	d0c6      	beq.n	11964 <strlen+0x24>
   119d6:	2a00      	cmp	r2, #0
   119d8:	bf04      	itt	eq
   119da:	3004      	addeq	r0, #4
   119dc:	461a      	moveq	r2, r3
   119de:	ba12      	rev	r2, r2
   119e0:	fab2 f282 	clz	r2, r2
   119e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   119e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   119ec:	4770      	bx	lr
   119ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   119f2:	f004 0503 	and.w	r5, r4, #3
   119f6:	f1c4 0000 	rsb	r0, r4, #0
   119fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   119fe:	f014 0f04 	tst.w	r4, #4
   11a02:	f891 f040 	pld	[r1, #64]	; 0x40
   11a06:	fa0c f505 	lsl.w	r5, ip, r5
   11a0a:	ea62 0205 	orn	r2, r2, r5
   11a0e:	bf1c      	itt	ne
   11a10:	ea63 0305 	ornne	r3, r3, r5
   11a14:	4662      	movne	r2, ip
   11a16:	f04f 0400 	mov.w	r4, #0
   11a1a:	e7a9      	b.n	11970 <strlen+0x30>

00011a1c <__register_exitproc>:
   11a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11a20:	4d2c      	ldr	r5, [pc, #176]	; (11ad4 <__register_exitproc+0xb8>)
   11a22:	4606      	mov	r6, r0
   11a24:	6828      	ldr	r0, [r5, #0]
   11a26:	4698      	mov	r8, r3
   11a28:	460f      	mov	r7, r1
   11a2a:	4691      	mov	r9, r2
   11a2c:	f000 f882 	bl	11b34 <__retarget_lock_acquire_recursive>
   11a30:	4b29      	ldr	r3, [pc, #164]	; (11ad8 <__register_exitproc+0xbc>)
   11a32:	681c      	ldr	r4, [r3, #0]
   11a34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   11a38:	2b00      	cmp	r3, #0
   11a3a:	d03e      	beq.n	11aba <__register_exitproc+0x9e>
   11a3c:	685a      	ldr	r2, [r3, #4]
   11a3e:	2a1f      	cmp	r2, #31
   11a40:	dc1c      	bgt.n	11a7c <__register_exitproc+0x60>
   11a42:	f102 0e01 	add.w	lr, r2, #1
   11a46:	b176      	cbz	r6, 11a66 <__register_exitproc+0x4a>
   11a48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   11a4c:	2401      	movs	r4, #1
   11a4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11a52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   11a56:	4094      	lsls	r4, r2
   11a58:	4320      	orrs	r0, r4
   11a5a:	2e02      	cmp	r6, #2
   11a5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   11a60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11a64:	d023      	beq.n	11aae <__register_exitproc+0x92>
   11a66:	3202      	adds	r2, #2
   11a68:	f8c3 e004 	str.w	lr, [r3, #4]
   11a6c:	6828      	ldr	r0, [r5, #0]
   11a6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11a72:	f000 f861 	bl	11b38 <__retarget_lock_release_recursive>
   11a76:	2000      	movs	r0, #0
   11a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11a7c:	4b17      	ldr	r3, [pc, #92]	; (11adc <__register_exitproc+0xc0>)
   11a7e:	b30b      	cbz	r3, 11ac4 <__register_exitproc+0xa8>
   11a80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11a84:	f7ee fedd 	bl	842 <malloc>
   11a88:	4603      	mov	r3, r0
   11a8a:	b1d8      	cbz	r0, 11ac4 <__register_exitproc+0xa8>
   11a8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11a90:	6002      	str	r2, [r0, #0]
   11a92:	2100      	movs	r1, #0
   11a94:	6041      	str	r1, [r0, #4]
   11a96:	460a      	mov	r2, r1
   11a98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   11a9c:	f04f 0e01 	mov.w	lr, #1
   11aa0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   11aa4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   11aa8:	2e00      	cmp	r6, #0
   11aaa:	d0dc      	beq.n	11a66 <__register_exitproc+0x4a>
   11aac:	e7cc      	b.n	11a48 <__register_exitproc+0x2c>
   11aae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   11ab2:	430c      	orrs	r4, r1
   11ab4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   11ab8:	e7d5      	b.n	11a66 <__register_exitproc+0x4a>
   11aba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   11abe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   11ac2:	e7bb      	b.n	11a3c <__register_exitproc+0x20>
   11ac4:	6828      	ldr	r0, [r5, #0]
   11ac6:	f000 f837 	bl	11b38 <__retarget_lock_release_recursive>
   11aca:	f04f 30ff 	mov.w	r0, #4294967295
   11ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11ad2:	bf00      	nop
   11ad4:	20000588 	.word	0x20000588
   11ad8:	00012d08 	.word	0x00012d08
   11adc:	00000843 	.word	0x00000843

00011ae0 <register_fini>:
   11ae0:	4b02      	ldr	r3, [pc, #8]	; (11aec <register_fini+0xc>)
   11ae2:	b113      	cbz	r3, 11aea <register_fini+0xa>
   11ae4:	4802      	ldr	r0, [pc, #8]	; (11af0 <register_fini+0x10>)
   11ae6:	f000 b805 	b.w	11af4 <atexit>
   11aea:	4770      	bx	lr
   11aec:	00000000 	.word	0x00000000
   11af0:	00011b01 	.word	0x00011b01

00011af4 <atexit>:
   11af4:	2300      	movs	r3, #0
   11af6:	4601      	mov	r1, r0
   11af8:	461a      	mov	r2, r3
   11afa:	4618      	mov	r0, r3
   11afc:	f7ff bf8e 	b.w	11a1c <__register_exitproc>

00011b00 <__libc_fini_array>:
   11b00:	b538      	push	{r3, r4, r5, lr}
   11b02:	4c0a      	ldr	r4, [pc, #40]	; (11b2c <__libc_fini_array+0x2c>)
   11b04:	4d0a      	ldr	r5, [pc, #40]	; (11b30 <__libc_fini_array+0x30>)
   11b06:	1b64      	subs	r4, r4, r5
   11b08:	10a4      	asrs	r4, r4, #2
   11b0a:	d00a      	beq.n	11b22 <__libc_fini_array+0x22>
   11b0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   11b10:	3b01      	subs	r3, #1
   11b12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11b16:	3c01      	subs	r4, #1
   11b18:	f855 3904 	ldr.w	r3, [r5], #-4
   11b1c:	4798      	blx	r3
   11b1e:	2c00      	cmp	r4, #0
   11b20:	d1f9      	bne.n	11b16 <__libc_fini_array+0x16>
   11b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11b26:	f001 b919 	b.w	12d5c <_fini>
   11b2a:	bf00      	nop
   11b2c:	00012d6c 	.word	0x00012d6c
   11b30:	00012d68 	.word	0x00012d68

00011b34 <__retarget_lock_acquire_recursive>:
   11b34:	4770      	bx	lr
   11b36:	bf00      	nop

00011b38 <__retarget_lock_release_recursive>:
   11b38:	4770      	bx	lr
   11b3a:	bf00      	nop

00011b3c <_ZTV17ARINC_Conversions>:
	...
   11b44:	0515 0000 03e5 0000                         ........

00011b4c <_ZL5Mesg1>:
   11b4c:	5241 4e49 2043 614c 6562 3a6c 0020 0000     ARINC Label: ...

00011b5c <_ZL5Mesg2>:
   11b5c:	6144 6174 203a 0000                         Data: ..

00011b64 <_ZL10HexToAscii>:
   11b64:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

00011b74 <_ZL11HistoryMesg>:
   11b74:	6948 7473 726f 2079 4946 4f46 203a 0000     History FIFO: ..
   11b84:	0d0a 4948 332d 3935 2033 6166 6c69 6465     ..HI-3593 failed
   11b94:	7420 206f 6e49 7469 6c69 7a69 0a65 000d      to Initilize...
   11ba4:	0d0a 2d0a 2d2d 6820 3273 4120 4952 434e     ...--- hs2 ARINC
   11bb4:	4920 746e 7265 6166 6563 2020 2d2d 2d2d      Interface  ----
   11bc4:	0d0a 0000 0a72 2d2d 212d 6f67 2074 656d     ....r.---!got me
   11bd4:	7373 6761 2165 2d2d 2d2d 0000 7420 6172     ssage!----.. tra
   11be4:	736e 696d 7474 6e69 2e67 2e2e 0000 0000     nsmitting.......
   11bf4:	5420 6172 736e 696d 7474 6465 0021 0000      Transmitted!...
   11c04:	003e 0000 0d0a 7254 6e61 6d73 7469 2620     >.....Transmit &
   11c14:	5220 6365 6965 6576 5720 7469 2068 614c      Receive With La
   11c24:	6562 736c 4d20 646f 0a65 000d 0d0a 4553     bels Mode.....SE
   11c34:	464c 542d 5345 2c54 4920 746e 7265 616e     LF-TEST, Interna
   11c44:	206c 6944 6967 6174 206c 6f4c 706f 622d     l Digital Loop-b
   11c54:	6361 2c6b 4e20 206f 6164 6174 6920 2073     ack, No data is 
   11c64:	7274 6e61 6d73 7469 6574 2064 7865 6574     transmitted exte
   11c74:	6e72 6c61 796c 0d0a 0000 0000 0d0a 6f20     rnally........ o
   11c84:	206e 6154 6c62 2065 616c 6562 736c 6120     n Table labels a
   11c94:	6572 4520 616e 6c62 6465 0000 0d0a 500a     re Enabled.....P
   11ca4:	6572 7373 5320 2d57 2031 6f74 7320 6174     ress SW-1 to sta
   11cb4:	7472 6920 696e 6974 6c61 796c 0d0a 000a     rt initially....
   11cc4:	2d2d 202d 7542 7474 6e6f 4320 6d6f 616d     --- Button Comma
   11cd4:	646e 2073 2d2d 0a2d 000d 0000 2020 7053     nds ---.....  Sp
   11ce4:	6361 2065 6142 2072 6f74 4420 7369 6c70     ace Bar to Displ
   11cf4:	7961 5320 6174 7574 2073 6e61 2064 6f43     ay Status and Co
   11d04:	746e 6f72 206c 6552 6967 7473 7265 0a73     ntrol Registers.
   11d14:	000d 0000 2020 2070 6f74 5020 7561 6573     ....  p to Pause
   11d24:	0d0a 0000 2020 206d 6f74 4420 7369 6c70     ....  m to Displ
   11d34:	7961 4c20 6261 6c65 4d20 6d65 726f 0079     ay Label Memory.
   11d44:	0d0a 003e 0d0a 7254 6e61 6d73 7469 6974     ..>...Transmitti
   11d54:	676e 0d0a 003e 0000 0d0a 4948 332d 3935     ng..>.....HI-359
   11d64:	2033 7453 7461 7375 202c 6f43 746e 6f72     3 Status, Contro
   11d74:	206c 6552 6967 7473 7265 0d73 000a 0000     l Registers.....
   11d84:	0d0a 2009 2a20 2a2a 2a2a 5020 6572 7373     ...  ***** Press
   11d94:	2020 7073 6361 6265 7261 7420 206f 6f63       spacebar to co
   11da4:	746e 6e69 6575 2a20 2a2a 2a2a 002a 0000     ntinue ******...
   11db4:	0a0a 540d 6172 736e 696d 2074 6150 7375     ...Transmit Paus
   11dc4:	6465 0d0a 0000 0000 0d0a 7250 7365 2073     ed........Press 
   11dd4:	4c4f 4445 425f 5455 4f54 2d4e 2032 6f74     OLED_BUTTON-2 to
   11de4:	7420 6172 736e 696d 2074 6e6f 2065 7266      transmit one fr
   11df4:	6d61 2065 6e61 2064 6170 7375 0a65 000d     ame and pause...
   11e04:	0d0a 7250 7365 2073 4c4f 4445 425f 5455     ..Press OLED_BUT
   11e14:	4f54 2d4e 2033 6f74 5220 7365 6d75 0a65     TON-3 to Resume.
   11e24:	000d 0000 0d0a 7254 6e61 6d73 7469 6574     ......Transmitte
   11e34:	2072 6552 7573 656d 2e64 2e2e 0d0a 0000     r Resumed.......
   11e44:	0d0a 6552 6563 7669 7265 3120 4c20 6261     ..Receiver 1 Lab
   11e54:	6c65 0a73 000d 0000 0d0a 6552 6563 7669     els.......Receiv
   11e64:	7265 3220 4c20 6261 6c65 0a73 000d 0000     er 2 Labels.....
   11e74:	0d0a 7254 6e61 6d73 7469 2620 5220 6365     ..Transmit & Rec
   11e84:	6965 6576 4520 6863 206f 6f4d 6564 0d0a     eive Echo Mode..
   11e94:	0000 0000 0d0a 6c53 776f 5320 6570 6465     ......Slow Speed
   11ea4:	0000 0000 0d0a 6146 7473 5320 6570 6465     ......Fast Speed
   11eb4:	0000 0000 0d0a 7254 6e61 6d73 7469 6574     ......Transmitte
   11ec4:	2072 6150 6972 7974 4520 616e 6c62 6465     r Parity Enabled
   11ed4:	0000 0000 0d0a 4948 332d 3935 2033 6166     ......HI-3593 fa
   11ee4:	6c69 6465 7420 206f 6e69 7469 6c69 7a69     iled to initiliz
   11ef4:	0a65 000d 0d0a 6154 6c62 2065 616c 6562     e.....Table labe
   11f04:	736c 6120 6572 4520 616e 6c62 6465 0000     ls are Enabled..
   11f14:	0d0a 2d0a 2d2d 4320 6e6f 6f73 656c 4320     ...--- Console C
   11f24:	6d6f 616d 646e 2073 6548 706c 2d20 2d2d     ommands Help ---
   11f34:	0000 0000 2020 2050 203d 6150 6972 7974     ....  P = Parity
   11f44:	5420 676f 6c67 2065 6e6f 6f2f 6666 0000      Toggle on/off..
   11f54:	2020 2054 203d 4654 494c 2050 5420 676f       T = TFLIP  Tog
   11f64:	6c67 2065 6e6f 6f2f 6666 0000 2020 2052     gle on/off..  R 
   11f74:	203d 4652 494c 2050 5420 676f 6c67 2065     = RFLIP  Toggle 
   11f84:	6e6f 6f2f 6666 0000 2020 2053 203d 4453     on/off..  S = SD
   11f94:	4e4f 202c 4453 2c39 5320 3144 2030 6f54     ON, SD9, SD10 To
   11fa4:	6767 656c 6f20 2f6e 666f 0066 2020 2048     ggle on/off.  H 
   11fb4:	203d 6854 7369 4820 6c65 2070 6150 6567     = This Help Page
   11fc4:	0000 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
   11fd4:	203d 6944 7073 616c 2079 7453 7461 7375     = Display Status
   11fe4:	6120 646e 4320 6e6f 7274 6c6f 7220 6765      and Control reg
   11ff4:	0073 0000 2020 2049 203d 6e49 7263 6d65     s...  I = Increm
   12004:	6e65 2074 654d 7373 6761 2065 6e61 2064     ent Message and 
   12014:	7254 6e61 6d73 7469 202e 7845 6c70 726f     Transmit. Explor
   12024:	7265 4d20 646f 2065 2d20 4f20 4c4e 2159     er Mode  - ONLY!
   12034:	0000 0000 2020 204d 203d 6e45 6574 2072     ....  M = Enter 
   12044:	7543 7473 6d6f 4d20 7365 6173 6567 202e     Custom Message. 
   12054:	7845 6c70 726f 7265 4d20 646f 2065 2d20     Explorer Mode  -
   12064:	4f20 4c4e 2159 0000 2020 4e45 4554 3d52      ONLY!..  ENTER=
   12074:	5420 6172 736e 696d 2074 656e 7478 6d20      Transmit next m
   12084:	7365 6173 6567 202e 7845 6c70 726f 7265     essage. Explorer
   12094:	4d20 646f 2065 2d20 4f20 4c4e 2159 0000      Mode  - ONLY!..
   120a4:	7830 0020 7826 3030 2030 0000 5854 5020     0x .&x000 ..TX P
   120b4:	7261 7469 2079 4e4f 0d0a 003e 5854 5020     arity ON..>.TX P
   120c4:	7261 7469 2079 464f 0a46 3e0d 0000 0000     arity OFF..>....
   120d4:	4654 494c 2050 6553 0a74 3e0d 0000 0000     TFLIP Set..>....
   120e4:	4654 494c 2050 6c43 6165 6572 0a64 3e0d     TFLIP Cleared..>
   120f4:	0000 0000 4552 2d43 2031 4652 494c 2050     ....REC-1 RFLIP 
   12104:	6553 0a74 3e0d 0000 4552 2d43 2031 4652     Set..>..REC-1 RF
   12114:	494c 2050 6c43 6165 6572 0a64 3e0d 0000     LIP Cleared..>..
   12124:	4552 2d43 2032 4652 494c 2050 6553 0a74     REC-2 RFLIP Set.
   12134:	3e0d 0000 4552 2d43 2032 4652 494c 2050     .>..REC-2 RFLIP 
   12144:	6c43 6165 6572 0a64 3e0d 0000 4552 2d43     Cleared..>..REC-
   12154:	2031 4453 4e4f 532c 3944 6120 646e 5320     1 SDON,SD9 and S
   12164:	3144 2030 6553 0a74 3e0d 0000 4552 2d43     D10 Set..>..REC-
   12174:	2031 4453 4e4f 532c 3944 6120 646e 5320     1 SDON,SD9 and S
   12184:	3144 2030 6c43 6165 6572 0a64 3e0d 0000     D10 Cleared..>..
   12194:	4552 2d43 2032 4453 4e4f 532c 3944 6120     REC-2 SDON,SD9 a
   121a4:	646e 5320 3144 2030 6553 0a74 3e0d 0000     nd SD10 Set..>..
   121b4:	4552 2d43 2032 4453 4e4f 532c 3944 6120     REC-2 SDON,SD9 a
   121c4:	646e 5320 3144 2030 6c43 6165 6572 0a64     nd SD10 Cleared.
   121d4:	3e0d 0000 0d0a 500a 6572 7373 5320 6170     .>.....Press Spa
   121e4:	6563 4220 7261 6f20 2072 5753 342d 7420     ce Bar or SW-4 t
   121f4:	206f 6572 7573 656d 0000 0000 614c 6562     o resume....Labe
   12204:	736c 2020 2030 202d 3336 203a 0020 0000     ls  0 - 63:  ...
   12214:	0020 0000 0d0a 614c 6562 736c 2020 3436      .....Labels  64
   12224:	312d 3732 203a 0020 0d0a 614c 6562 736c     -127:  ...Labels
   12234:	3120 3832 312d 3139 203a 0020 0d0a 614c      128-191:  ...La
   12244:	6562 736c 3120 3239 322d 3535 203a 0020     bels 192-255:  .
   12254:	0d0a 614c 6562 736c 2020 2030 202d 3336     ..Labels  0 - 63
   12264:	203a 0020 0d0a 543e 2058 2020 4420 7461     :  ...>TX    Dat
   12274:	3a61 0000 614c 6562 3a6c 0000 6552 2d63     a:..Label:..Rec-
   12284:	2031 6144 6174 003a 4c50 2d31 2031 6144     1 Data:.PL1-1 Da
   12294:	6174 003a 614d 6374 3a68 0000 4c50 2d31     ta:.Match:..PL1-
   122a4:	2032 6144 6174 003a 4c50 2d31 2033 6144     2 Data:.PL1-3 Da
   122b4:	6174 003a 6552 2d63 2032 6144 6174 003a     ta:.Rec-2 Data:.
   122c4:	4c50 2d32 2031 6144 6174 003a 4c50 2d32     PL2-1 Data:.PL2-
   122d4:	2032 6144 6174 003a 4c50 2d32 2033 6144     2 Data:.PL2-3 Da
   122e4:	6174 003a 0d0a 0000 0d0a 7845 6c70 726f     ta:.......Explor
   122f4:	7265 4d20 646f 0a65 000d 0000 0d0a 6c20     er Mode....... l
   12304:	6261 6c65 2073 6154 6c62 2065 7369 4520     abels Table is E
   12314:	616e 6c62 6465 0000 0d0a 2d0a 2d2d 4220     nabled.....--- B
   12324:	7475 6f74 206e 6f43 6d6d 6e61 7364 2d20     utton Commands -
   12334:	2d2d 0000 0d0a 2020 7073 6361 6265 7261     --....  spacebar
   12344:	7420 206f 6944 7073 616c 2079 7453 7461      to Display Stat
   12354:	7375 6120 646e 4320 6e6f 7274 6c6f 5220     us and Control R
   12364:	6765 7369 6574 7372 0000 0000 0d0a 2020     egisters......  
   12374:	4c4f 4445 422d 5455 4f54 324e 7420 6172     OLED-BUTTON2 tra
   12384:	736e 696d 2074 6e6f 2065 656d 7373 6761     nsmit one messag
   12394:	2065 7266 6d6f 7420 6172 736e 696d 2074     e from transmit 
   123a4:	7562 6666 7265 0000 0d0a 2020 204c 6f74     buffer....  L to
   123b4:	5020 6972 746e 4c20 6261 6c65 4d20 6d65      Print Label Mem
   123c4:	726f 0a79 000d 0000 0d0a 7250 7365 2073     ory.......Press 
   123d4:	4e45 4554 2052 6f74 5420 6172 736e 696d     ENTER to Transmi
   123e4:	2074 726f 7520 6573 7420 6568 2820 294d     t or use the (M)
   123f4:	6320 6d6f 616d 646e 7420 206f 6e65 6574      command to ente
   12404:	2072 2061 7563 7473 6d6f 6d20 7365 6173     r a custom messa
   12414:	6567 0000 7250 7365 2073 5753 2034 726f     ge..Press SW4 or
   12424:	7320 6170 6563 6162 2072 6f74 6320 6e6f      spacebar to con
   12434:	6974 756e 0065 0000 7250 7365 2073 7073     tinue...Press sp
   12444:	6361 6265 7261 7420 206f 6f63 746e 6e69     acebar to contin
   12454:	6575 0000 0d0a 433e 6d6f 616d 646e 4d20     ue....>Command M
   12464:	0000 0000 0d0a 6e45 6574 2072 2033 7962     ......Enter 3 by
   12474:	6574 2073 202b 414c 4542 204c 6f74 5420     tes + LABEL to T
   12484:	6172 736e 696d 2074 6f66 6c6c 776f 6465     ransmit followed
   12494:	6220 2079 4e45 4554 0a52 000d 0d0a 6f54      by ENTER.....To
   124a4:	5420 6172 736e 696d 2c74 6520 746e 7265      Transmit, enter
   124b4:	3320 6220 7479 7365 6620 6c6f 6f6c 6577      3 bytes followe
   124c4:	2064 7962 6120 4c20 6261 6c65 6220 7479     d by a Label byt
   124d4:	2065 6f66 6c6c 776f 6465 6220 2079 4e45     e followed by EN
   124e4:	4554 0a52 000d 0000 6f46 6d72 7461 203a     TER.....Format: 
   124f4:	6942 7374 3233 322d 2c35 4220 7469 3273     Bits32-25, Bits2
   12504:	2d34 3731 202c 6942 7374 3631 392d 202c     4-17, Bits16-9, 
   12514:	414c 4542 0a4c 3a0d 0000 0000 7845 6d61     LABEL..:....Exam
   12524:	6c70 3a65 3020 2031 3332 3420 2035 3736     ple: 01 23 45 67
   12534:	4520 544e 5245 0d0a 003a 0000 5020 6572      ENTER..:... Pre
   12544:	7373 5220 5445 5255 004e 0000 5420 6172     ss RETURN... Tra
   12554:	736e 696d 6974 676e 2e2e 002e 5420 6172     nsmiting.... Tra
   12564:	736e 696d 6574 2164 0000 0000 6f43 6d6d     nsmited!....Comm
   12574:	6e61 2064 3a49 4920 636e 6572 656d 746e     and I: Increment
   12584:	6420 7461 0a61 3e0d 0000 0000                data..>....

00012590 <_ZTV15ARINC_Interface>:
   12590:	0300 0000 0000 0000 0000 0000 05fd 0000     ................
   125a0:	065d 0000 0689 0000 0000 0000 0000 0000     ]...............
   125b0:	fd00 ffff 0000 0000 0515 0000 03e5 0000     ................

000125c0 <_ZTT15ARINC_Interface>:
   125c0:	259c 0001 25dc 0001 25f8 0001 25b8 0001     .%...%...%...%..

000125d0 <_ZTC15ARINC_Interface0_14Protocol_Class>:
   125d0:	0300 0000 0000 0000 0000 0000 0000 0000     ................
   125e0:	0000 0000 0869 0000 0000 0000 0000 0000     ....i...........
   125f0:	fd00 ffff 0000 0000 0515 0000 03e5 0000     ................
   12600:	2e2e 492f 4332 492f 4332 4f5f 6a62 6365     ../I2C/I2C_Objec
   12610:	4c74 7369 2e74 7063 0070 0000 2a2a 2a2a     tList.cpp...****
   12620:	4c20 6669 2065 7550 736c 2065 6341 6974      Life Pulse Acti
   12630:	6176 6574 2a64 2a2a 002a 0000 0a0d 0000     vated****.......
   12640:	7469 7320 6f68 6c75 2064 6f77 6b72 0000     it should work..
   12650:	7469 6420 656f 2073 6f77 6b72 0000 0000     it does work....
   12660:	2020 7546 636e 6974 6e6f 6620 726f 7420       Function for t
   12670:	7365 6974 676e 6120 206e 3269 2063 4545     esting an i2c EE
   12680:	5250 4d4f 0000 0000 4545 5250 4d4f 7620     PROM....EEPROM v
   12690:	7265 6669 6369 7461 6f69 206e 6166 6c69     erification fail
   126a0:	6465 202e 6441 7264 7365 3a73 0020 0000     ed. Address: ...
   126b0:	6220 7469 3a20 0000 7257 7469 2065 202d      bit :..Write - 
   126c0:	6552 6461 6920 2073 7573 6363 7365 6673     Read is successf
   126d0:	6c75 6920 206e 4545 5250 4d4f 6d20 6d65     ul in EEPROM mem
   126e0:	726f 2079 0020 0000 5351 4950 5020 6f72     ory  ...QSPI Pro
   126f0:	7267 6d61 5320 6174 7472 6465 0d0a 0000     gram Started....
   12700:	6c46 7361 2068 6164 6174 7620 7265 6669     Flash data verif
   12710:	6369 7461 6f69 206e 6166 6c69 6465 202e     ication failed. 
   12720:	6441 7264 7365 3a73 0020 0000 7257 7469     Address: ...Writ
   12730:	2065 202d 6552 6461 6920 2073 7573 6363     e - Read is succ
   12740:	7365 6673 6c75 6920 206e 5351 4950 4620     essful in QSPI F
   12750:	616c 6873 6d20 6d65 726f 2079 0020 0000     lash memory  ...
   12760:	2a2a 2a2a 2020 6143 656c 646e 7261 5520     ****  Calendar U
   12770:	6470 7461 2065 6554 7473 2a2a 002a 0000     pdate Test***...
   12780:	7246 2069 634f 2074 3230 3120 3a34 3035     Fri Oct 02 14:50
   12790:	333a 2033 3032 3032 0000 0000 2a2a 2a2a     :33 2020....****
   127a0:	616c 7473 6420 7461 2061 6974 656d 003a     last data time:.
   127b0:	7909 6165 2072 003a 6d09 6e6f 6874 3a20     .year :..month :
   127c0:	0000 0000 6409 7961 203a 0000 6809 756f     .....day: ...hou
   127d0:	2072 003a 6d09 6e69 3a20 0000 7309 6365     r :..min :...sec
   127e0:	203a 0000 2a2a 7563 7272 6e65 2074 6164     : ..**current da
   127f0:	6174 7420 6d69 3a65 0000 0000               ta time:....

000127fc <defaultParameters>:
   127fc:	0082 0000                                   ....

00012800 <defaultPreferences>:
   12800:	00fa 0000 0032 0000                         ....2...

00012808 <_ZTV14Calendar_Class>:
	...
   12810:	19f9 0000 1a49 0000                         ....I...

00012818 <_ZTV17DateTimeLog_Class>:
	...
   12820:	0869 0000 0869 0000                         i...i...

00012828 <_ZTV9CDC_Class>:
	...
   12830:	2185 0000 2255 0000 1e11 0000 214d 0000     .!..U"......M!..
   12840:	22ed 0000 2111 0000 2025 0000 2075 0000     ."...!..% ..u ..
   12850:	216d 0000 21bd 0000                         m!...!..

00012858 <_ZTV6Stream>:
	...
   12860:	0869 0000 23bd 0000 1e11 0000 1e25 0000     i....#......%...
   12870:	0869 0000 0869 0000 0869 0000 7830 2e25     i...i...i...0x%.
   12880:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   12890:	766f 0066                                   ovf.

00012894 <_ZTV5Print>:
	...
   1289c:	0869 0000 23bd 0000 1e11 0000 1e25 0000     i....#......%...
   128ac:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
   128bc:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
   128cc:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
   128dc:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
   128ec:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
   128fc:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   1290c:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
   1291c:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   1292c:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
   1293c:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   1294c:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
   1295c:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.
   1296c:	2e2e 682f 6c61 732f 6372 682f 6c61 705f     ../hal/src/hal_p
   1297c:	6d77 632e 0000 0000 2e2e 682f 6c61 732f     wm.c....../hal/s
   1298c:	6372 682f 6c61 715f 7073 5f69 7973 636e     rc/hal_qspi_sync
   1299c:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   129ac:	6c61 735f 6970 6d5f 615f 7973 636e 632e     al_spi_m_async.c
   129bc:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   129cc:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
   129dc:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
   129ec:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
   129fc:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
   12a0c:	7369 2e74 0063 0000                         ist.c...

00012a14 <_map>:
   12a14:	0000 0000 0040 0000 0004 0000 0004 0000     ....@...........
   12a24:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   12a34:	0007 0000 0057 0000 2e2e 682f 6c70 652f     ....W...../hpl/e
   12a44:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00012a54 <user_mux_confs>:
   12a54:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

00012a98 <channel_confs>:
   12a98:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

00012ad8 <interrupt_cfg>:
	...
   12b58:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   12b68:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   12b78:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   12b88:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   12b98:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   12ba8:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   12bb8:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00012bc4 <sercomspi_regs>:
   12bc4:	008c 0020 0000 0002 0000 0000 0063 01ff     .. .........c...
   12bd4:	0c01 2000 0000 0200 0000 0000 ef00 ff00     ... ............
   12be4:	0401 000c 0030 0000 0002 0000 0000 00ef     ....0...........
   12bf4:	01ff 0006 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   12c04:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   12c14:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   12c24:	1400 4300 1800 4300                         ...C...C

00012c2c <_usb_ep_cfgs>:
   12c2c:	2204 2000 0000 0000 0040 0000 2244 2000     .". ....@...D". 
   12c3c:	2284 2000 0040 0040 22c4 2000 2304 2000     .". @.@..". .#. 
   12c4c:	0040 0040 2344 2000 2384 2000 0040 0040     @.@.D#. .#. @.@.
   12c5c:	23c4 2000 2404 2000 0040 0040 0804 0000     .#. .$. @.@.....
   12c6c:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   12c7c:	6c70 775f 7464 632e 0000 0000               pl_wdt.c....

00012c88 <n25q256a_interface>:
   12c88:	db81 0000 dc25 0000 dd35 0000 deed 0000     ....%...5.......
   12c98:	df7d 0000 2e2e 682f 6c70 702f 726f 2f74     }...../hpl/port/
   12ca8:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   12cb8:	2e2e 752f 6273 642f 7665 6369 2f65 7375     ../usb/device/us
   12cc8:	6462 2e63 0063 0000 2e2e 682f 6c61 732f     bdc.c...../hal/s
   12cd8:	6372 682f 6c61 695f 6332 6d5f 735f 6e79     rc/hal_i2c_m_syn
   12ce8:	2e63 0063 6f70 0077 0000 0000 0000 0000     c.c.pow.........

00012cf8 <TWO52>:
   12cf8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

00012d08 <_global_impure_ptr>:
   12d08:	0160 2000                                   `.. 

00012d0c <_init>:
   12d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d0e:	bf00      	nop
   12d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12d12:	bc08      	pop	{r3}
   12d14:	469e      	mov	lr, r3
   12d16:	4770      	bx	lr

00012d18 <__init_array_start>:
   12d18:	00011ae1 	.word	0x00011ae1

00012d1c <__frame_dummy_init_array_entry>:
   12d1c:	00000289 00000355 00000731 00000901     ....U...1.......
   12d2c:	00000a15 000013e1 00001491 00001521     ............!...
   12d3c:	00001765 00001825 000018e5 00001981     e...%...........
   12d4c:	00001c95 00001dd9 0000236d 000029b1     ........m#...)..

00012d5c <_fini>:
   12d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d5e:	bf00      	nop
   12d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12d62:	bc08      	pop	{r3}
   12d64:	469e      	mov	lr, r3
   12d66:	4770      	bx	lr

00012d68 <__fini_array_start>:
   12d68:	00000265 	.word	0x00000265
