
Classes_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004730  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00004730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200bc  2**0
                  CONTENTS
  4 .bss          0000049c  200000bc  000047ec  000200bc  2**2
                  ALLOC
  5 .stack        00010000  20000558  00004c88  000200bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   00042b01  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000052c0  00000000  00000000  00062c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016402  00000000  00000000  00067f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001000  00000000  00000000  0007e306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001840  00000000  00000000  0007f306  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038dca  00000000  00000000  00080b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001c10b  00000000  00000000  000b9910  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012ac76  00000000  00000000  000d5a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002a0c  00000000  00000000  00200694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 05 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     X.. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	79 19 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     y...............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	a1 17 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 45 14 00 00 c5 38 00 00     ........E....8..
     184:	d1 38 00 00 dd 38 00 00 e9 38 00 00 e5 02 00 00     .8...8...8......
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 49 26 00 00 e5 02 00 00     ........I&......
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000bc 	.word	0x200000bc
     280:	00000000 	.word	0x00000000
     284:	00004730 	.word	0x00004730

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004730 	.word	0x00004730
     2c4:	200000c0 	.word	0x200000c0
     2c8:	00004730 	.word	0x00004730
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000008a5 	.word	0x000008a5
     2e0:	000043e1 	.word	0x000043e1

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00004730 	.word	0x00004730
     364:	200000bc 	.word	0x200000bc
     368:	20000558 	.word	0x20000558
     36c:	200000bc 	.word	0x200000bc
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	000043ed 	.word	0x000043ed
     37c:	000038f5 	.word	0x000038f5

00000380 <EVENT_SYSTEM_0_init>:
struct can_async_descriptor  CAN_Compressor;

struct i2c_m_sync_desc I2C_EEPROM;

void EVENT_SYSTEM_0_init(void)
{
     380:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     382:	2240      	movs	r2, #64	; 0x40
     384:	4b05      	ldr	r3, [pc, #20]	; (39c <EVENT_SYSTEM_0_init+0x1c>)
     386:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     38a:	4a05      	ldr	r2, [pc, #20]	; (3a0 <EVENT_SYSTEM_0_init+0x20>)
     38c:	6993      	ldr	r3, [r2, #24]
     38e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     392:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     394:	4b03      	ldr	r3, [pc, #12]	; (3a4 <EVENT_SYSTEM_0_init+0x24>)
     396:	4798      	blx	r3
     398:	bd08      	pop	{r3, pc}
     39a:	bf00      	nop
     39c:	40001c00 	.word	0x40001c00
     3a0:	40000800 	.word	0x40000800
     3a4:	00000a21 	.word	0x00000a21

000003a8 <SPI_HOLT_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3a8:	4b28      	ldr	r3, [pc, #160]	; (44c <SPI_HOLT_PORT_init+0xa4>)
     3aa:	2210      	movs	r2, #16
     3ac:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ae:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3b0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3b4:	629a      	str	r2, [r3, #40]	; 0x28
     3b6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     3ba:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3bc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3c4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3cc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3d4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3d8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3dc:	2220      	movs	r2, #32
     3de:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3e0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3e6:	629a      	str	r2, [r3, #40]	; 0x28
     3e8:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3fa:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     402:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     406:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     40a:	2240      	movs	r2, #64	; 0x40
     40c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     40e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     412:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     416:	629a      	str	r2, [r3, #40]	; 0x28
     418:	4a0d      	ldr	r2, [pc, #52]	; (450 <SPI_HOLT_PORT_init+0xa8>)
     41a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     41c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     420:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     428:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     42c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     430:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     438:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     43c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     440:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     444:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     448:	4770      	bx	lr
     44a:	bf00      	nop
     44c:	41008000 	.word	0x41008000
     450:	c0020000 	.word	0xc0020000

00000454 <SPI_HOLT_CLOCK_init>:
     454:	4b06      	ldr	r3, [pc, #24]	; (470 <SPI_HOLT_CLOCK_init+0x1c>)
     456:	2240      	movs	r2, #64	; 0x40
     458:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     45c:	2243      	movs	r2, #67	; 0x43
     45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     462:	4a04      	ldr	r2, [pc, #16]	; (474 <SPI_HOLT_CLOCK_init+0x20>)
     464:	6953      	ldr	r3, [r2, #20]
     466:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     46a:	6153      	str	r3, [r2, #20]
     46c:	4770      	bx	lr
     46e:	bf00      	nop
     470:	40001c00 	.word	0x40001c00
     474:	40000800 	.word	0x40000800

00000478 <SPI_HOLT_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_HOLT_init(void)
{
     478:	b508      	push	{r3, lr}
	SPI_HOLT_CLOCK_init();
     47a:	4b04      	ldr	r3, [pc, #16]	; (48c <SPI_HOLT_init+0x14>)
     47c:	4798      	blx	r3
	spi_m_sync_init(&SPI_HOLT, SERCOM0);
     47e:	4904      	ldr	r1, [pc, #16]	; (490 <SPI_HOLT_init+0x18>)
     480:	4804      	ldr	r0, [pc, #16]	; (494 <SPI_HOLT_init+0x1c>)
     482:	4b05      	ldr	r3, [pc, #20]	; (498 <SPI_HOLT_init+0x20>)
     484:	4798      	blx	r3
	SPI_HOLT_PORT_init();
     486:	4b05      	ldr	r3, [pc, #20]	; (49c <SPI_HOLT_init+0x24>)
     488:	4798      	blx	r3
     48a:	bd08      	pop	{r3, pc}
     48c:	00000455 	.word	0x00000455
     490:	40003000 	.word	0x40003000
     494:	20000450 	.word	0x20000450
     498:	00000acd 	.word	0x00000acd
     49c:	000003a9 	.word	0x000003a9

000004a0 <SPI_TEMP_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a0:	4b28      	ldr	r3, [pc, #160]	; (544 <SPI_TEMP_PORT_init+0xa4>)
     4a2:	2201      	movs	r2, #1
     4a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4ac:	629a      	str	r2, [r3, #40]	; 0x28
     4ae:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4bc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4c8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4cc:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4d4:	2202      	movs	r2, #2
     4d6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4d8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4de:	629a      	str	r2, [r3, #40]	; 0x28
     4e0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4f6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4fa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     502:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     506:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     508:	4a0f      	ldr	r2, [pc, #60]	; (548 <SPI_TEMP_PORT_init+0xa8>)
     50a:	629a      	str	r2, [r3, #40]	; 0x28
     50c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     510:	3204      	adds	r2, #4
     512:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     514:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
     518:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     51c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     520:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     528:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     52c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     530:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     534:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     538:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     53c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     540:	4770      	bx	lr
     542:	bf00      	nop
     544:	41008000 	.word	0x41008000
     548:	40020000 	.word	0x40020000

0000054c <SPI_TEMP_CLOCK_init>:
     54c:	4b06      	ldr	r3, [pc, #24]	; (568 <SPI_TEMP_CLOCK_init+0x1c>)
     54e:	2240      	movs	r2, #64	; 0x40
     550:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     554:	2243      	movs	r2, #67	; 0x43
     556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     55a:	4a04      	ldr	r2, [pc, #16]	; (56c <SPI_TEMP_CLOCK_init+0x20>)
     55c:	6953      	ldr	r3, [r2, #20]
     55e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     562:	6153      	str	r3, [r2, #20]
     564:	4770      	bx	lr
     566:	bf00      	nop
     568:	40001c00 	.word	0x40001c00
     56c:	40000800 	.word	0x40000800

00000570 <SPI_TEMP_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void SPI_TEMP_init(void)
{
     570:	b508      	push	{r3, lr}
	SPI_TEMP_CLOCK_init();
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <SPI_TEMP_init+0x14>)
     574:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM1);
     576:	4904      	ldr	r1, [pc, #16]	; (588 <SPI_TEMP_init+0x18>)
     578:	4804      	ldr	r0, [pc, #16]	; (58c <SPI_TEMP_init+0x1c>)
     57a:	4b05      	ldr	r3, [pc, #20]	; (590 <SPI_TEMP_init+0x20>)
     57c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
     57e:	4b05      	ldr	r3, [pc, #20]	; (594 <SPI_TEMP_init+0x24>)
     580:	4798      	blx	r3
     582:	bd08      	pop	{r3, pc}
     584:	0000054d 	.word	0x0000054d
     588:	40003400 	.word	0x40003400
     58c:	20000468 	.word	0x20000468
     590:	00000acd 	.word	0x00000acd
     594:	000004a1 	.word	0x000004a1

00000598 <I2C_EEPROM_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     598:	4b16      	ldr	r3, [pc, #88]	; (5f4 <I2C_EEPROM_PORT_init+0x5c>)
     59a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     59e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5a6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     5aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5b6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5ba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5be:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5c6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     5ca:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ce:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5da:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5de:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ea:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     5f2:	4770      	bx	lr
     5f4:	41008000 	.word	0x41008000

000005f8 <I2C_EEPROM_CLOCK_init>:
     5f8:	4b06      	ldr	r3, [pc, #24]	; (614 <I2C_EEPROM_CLOCK_init+0x1c>)
     5fa:	2240      	movs	r2, #64	; 0x40
     5fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     600:	2243      	movs	r2, #67	; 0x43
     602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     606:	4a04      	ldr	r2, [pc, #16]	; (618 <I2C_EEPROM_CLOCK_init+0x20>)
     608:	6993      	ldr	r3, [r2, #24]
     60a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     60e:	6193      	str	r3, [r2, #24]
     610:	4770      	bx	lr
     612:	bf00      	nop
     614:	40001c00 	.word	0x40001c00
     618:	40000800 	.word	0x40000800

0000061c <I2C_EEPROM_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_EEPROM_init(void)
{
     61c:	b508      	push	{r3, lr}
	I2C_EEPROM_CLOCK_init();
     61e:	4b04      	ldr	r3, [pc, #16]	; (630 <I2C_EEPROM_init+0x14>)
     620:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EEPROM, SERCOM3);
     622:	4904      	ldr	r1, [pc, #16]	; (634 <I2C_EEPROM_init+0x18>)
     624:	4804      	ldr	r0, [pc, #16]	; (638 <I2C_EEPROM_init+0x1c>)
     626:	4b05      	ldr	r3, [pc, #20]	; (63c <I2C_EEPROM_init+0x20>)
     628:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
     62a:	4b05      	ldr	r3, [pc, #20]	; (640 <I2C_EEPROM_init+0x24>)
     62c:	4798      	blx	r3
     62e:	bd08      	pop	{r3, pc}
     630:	000005f9 	.word	0x000005f9
     634:	41014000 	.word	0x41014000
     638:	200004e8 	.word	0x200004e8
     63c:	00000a8d 	.word	0x00000a8d
     640:	00000599 	.word	0x00000599

00000644 <SPI_MEMORIES_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     644:	4b2f      	ldr	r3, [pc, #188]	; (704 <SPI_MEMORIES_PORT_init+0xc0>)
     646:	f44f 7280 	mov.w	r2, #256	; 0x100
     64a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     64e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     652:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     656:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     65a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     65e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     662:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     666:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     66a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     672:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     676:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     67a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     682:	f44f 7200 	mov.w	r2, #512	; 0x200
     686:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     68a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     68e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     692:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     696:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     69a:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     69e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6aa:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ae:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6b2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
     6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6c6:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     6ca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6ce:	4a0e      	ldr	r2, [pc, #56]	; (708 <SPI_MEMORIES_PORT_init+0xc4>)
     6d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6d4:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     6d8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6dc:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6e0:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     6e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6e8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ec:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6f0:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6f8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6fc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
     700:	4770      	bx	lr
     702:	bf00      	nop
     704:	41008000 	.word	0x41008000
     708:	c0020000 	.word	0xc0020000

0000070c <SPI_MEMORIES_CLOCK_init>:
     70c:	4b06      	ldr	r3, [pc, #24]	; (728 <SPI_MEMORIES_CLOCK_init+0x1c>)
     70e:	2240      	movs	r2, #64	; 0x40
     710:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     714:	2243      	movs	r2, #67	; 0x43
     716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     71a:	4a04      	ldr	r2, [pc, #16]	; (72c <SPI_MEMORIES_CLOCK_init+0x20>)
     71c:	6a13      	ldr	r3, [r2, #32]
     71e:	f043 0301 	orr.w	r3, r3, #1
     722:	6213      	str	r3, [r2, #32]
     724:	4770      	bx	lr
     726:	bf00      	nop
     728:	40001c00 	.word	0x40001c00
     72c:	40000800 	.word	0x40000800

00000730 <SPI_MEMORIES_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_MEMORIES_init(void)
{
     730:	b508      	push	{r3, lr}
	SPI_MEMORIES_CLOCK_init();
     732:	4b05      	ldr	r3, [pc, #20]	; (748 <SPI_MEMORIES_init+0x18>)
     734:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM4);
     736:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     73a:	4804      	ldr	r0, [pc, #16]	; (74c <SPI_MEMORIES_init+0x1c>)
     73c:	4b04      	ldr	r3, [pc, #16]	; (750 <SPI_MEMORIES_init+0x20>)
     73e:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
     740:	4b04      	ldr	r3, [pc, #16]	; (754 <SPI_MEMORIES_init+0x24>)
     742:	4798      	blx	r3
     744:	bd08      	pop	{r3, pc}
     746:	bf00      	nop
     748:	0000070d 	.word	0x0000070d
     74c:	20000438 	.word	0x20000438
     750:	00000acd 	.word	0x00000acd
     754:	00000645 	.word	0x00000645

00000758 <CDCUSB_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     758:	4b1e      	ldr	r3, [pc, #120]	; (7d4 <CDCUSB_PORT_init+0x7c>)
     75a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     75e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     760:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     764:	6299      	str	r1, [r3, #40]	; 0x28
     766:	481c      	ldr	r0, [pc, #112]	; (7d8 <CDCUSB_PORT_init+0x80>)
     768:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     76a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     76c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     770:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     774:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     778:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     77c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     780:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     788:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     78c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     790:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     79c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     79e:	6299      	str	r1, [r3, #40]	; 0x28
     7a0:	490e      	ldr	r1, [pc, #56]	; (7dc <CDCUSB_PORT_init+0x84>)
     7a2:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7a6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     7aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7c2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7c6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7ca:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     7d2:	4770      	bx	lr
     7d4:	41008000 	.word	0x41008000
     7d8:	c0000100 	.word	0xc0000100
     7dc:	c0000200 	.word	0xc0000200

000007e0 <CDCUSB_CLOCK_init>:
     7e0:	2242      	movs	r2, #66	; 0x42
     7e2:	4b07      	ldr	r3, [pc, #28]	; (800 <CDCUSB_CLOCK_init+0x20>)
     7e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     7e8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     7ec:	691a      	ldr	r2, [r3, #16]
     7ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     7f2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     7f4:	699a      	ldr	r2, [r3, #24]
     7f6:	f042 0201 	orr.w	r2, r2, #1
     7fa:	619a      	str	r2, [r3, #24]
     7fc:	4770      	bx	lr
     7fe:	bf00      	nop
     800:	40001c00 	.word	0x40001c00

00000804 <CDCUSB_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void CDCUSB_init(void)
{
     804:	b508      	push	{r3, lr}
	CDCUSB_CLOCK_init();
     806:	4b03      	ldr	r3, [pc, #12]	; (814 <CDCUSB_init+0x10>)
     808:	4798      	blx	r3
	usb_d_init();
     80a:	4b03      	ldr	r3, [pc, #12]	; (818 <CDCUSB_init+0x14>)
     80c:	4798      	blx	r3
	CDCUSB_PORT_init();
     80e:	4b03      	ldr	r3, [pc, #12]	; (81c <CDCUSB_init+0x18>)
     810:	4798      	blx	r3
     812:	bd08      	pop	{r3, pc}
     814:	000007e1 	.word	0x000007e1
     818:	00000f45 	.word	0x00000f45
     81c:	00000759 	.word	0x00000759

00000820 <CAN_Compressor_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     820:	4b10      	ldr	r3, [pc, #64]	; (864 <CAN_Compressor_PORT_init+0x44>)
     822:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     826:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     82a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     82e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     832:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     836:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     83a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     83e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     842:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     846:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     84a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     84e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     852:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     856:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     85a:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     85e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     862:	4770      	bx	lr
     864:	41008000 	.word	0x41008000

00000868 <CAN_Compressor_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_Compressor_init(void)
{
     868:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     86a:	4a08      	ldr	r2, [pc, #32]	; (88c <CAN_Compressor_init+0x24>)
     86c:	6913      	ldr	r3, [r2, #16]
     86e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     872:	6113      	str	r3, [r2, #16]
     874:	2241      	movs	r2, #65	; 0x41
     876:	4b06      	ldr	r3, [pc, #24]	; (890 <CAN_Compressor_init+0x28>)
     878:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_Compressor, CAN1);
     87c:	4905      	ldr	r1, [pc, #20]	; (894 <CAN_Compressor_init+0x2c>)
     87e:	4806      	ldr	r0, [pc, #24]	; (898 <CAN_Compressor_init+0x30>)
     880:	4b06      	ldr	r3, [pc, #24]	; (89c <CAN_Compressor_init+0x34>)
     882:	4798      	blx	r3
	CAN_Compressor_PORT_init();
     884:	4b06      	ldr	r3, [pc, #24]	; (8a0 <CAN_Compressor_init+0x38>)
     886:	4798      	blx	r3
     888:	bd08      	pop	{r3, pc}
     88a:	bf00      	nop
     88c:	40000800 	.word	0x40000800
     890:	40001c00 	.word	0x40001c00
     894:	42000400 	.word	0x42000400
     898:	20000480 	.word	0x20000480
     89c:	000009d1 	.word	0x000009d1
     8a0:	00000821 	.word	0x00000821

000008a4 <system_init>:
}

void system_init(void)
{
     8a4:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     8a6:	4b28      	ldr	r3, [pc, #160]	; (948 <system_init+0xa4>)
     8a8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8aa:	4b28      	ldr	r3, [pc, #160]	; (94c <system_init+0xa8>)
     8ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     8b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     8bc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     8c0:	4a23      	ldr	r2, [pc, #140]	; (950 <system_init+0xac>)
     8c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8c6:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8ce:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     8d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8de:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     8e2:	4a1c      	ldr	r2, [pc, #112]	; (954 <system_init+0xb0>)
     8e4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8e8:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8f0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
     8f4:	4b18      	ldr	r3, [pc, #96]	; (958 <system_init+0xb4>)
     8f6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     8f8:	4c18      	ldr	r4, [pc, #96]	; (95c <system_init+0xb8>)
     8fa:	6963      	ldr	r3, [r4, #20]
     8fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     900:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_RTC, RTC, _rtc_get_timer());
     902:	4b17      	ldr	r3, [pc, #92]	; (960 <system_init+0xbc>)
     904:	4798      	blx	r3
     906:	4602      	mov	r2, r0
     908:	4916      	ldr	r1, [pc, #88]	; (964 <system_init+0xc0>)
     90a:	4817      	ldr	r0, [pc, #92]	; (968 <system_init+0xc4>)
     90c:	4d17      	ldr	r5, [pc, #92]	; (96c <system_init+0xc8>)
     90e:	47a8      	blx	r5

	TIMER_RTC_init();

	SPI_HOLT_init();
     910:	4b17      	ldr	r3, [pc, #92]	; (970 <system_init+0xcc>)
     912:	4798      	blx	r3

	SPI_TEMP_init();
     914:	4b17      	ldr	r3, [pc, #92]	; (974 <system_init+0xd0>)
     916:	4798      	blx	r3

	I2C_EEPROM_init();
     918:	4b17      	ldr	r3, [pc, #92]	; (978 <system_init+0xd4>)
     91a:	4798      	blx	r3

	SPI_MEMORIES_init();
     91c:	4b17      	ldr	r3, [pc, #92]	; (97c <system_init+0xd8>)
     91e:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     920:	6963      	ldr	r3, [r4, #20]
     922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     926:	6163      	str	r3, [r4, #20]
     928:	224a      	movs	r2, #74	; 0x4a
     92a:	4b15      	ldr	r3, [pc, #84]	; (980 <system_init+0xdc>)
     92c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMEOUT, TC0, _tc_get_timer());
     930:	4b14      	ldr	r3, [pc, #80]	; (984 <system_init+0xe0>)
     932:	4798      	blx	r3
     934:	4602      	mov	r2, r0
     936:	4914      	ldr	r1, [pc, #80]	; (988 <system_init+0xe4>)
     938:	4814      	ldr	r0, [pc, #80]	; (98c <system_init+0xe8>)
     93a:	47a8      	blx	r5

	TIMEOUT_init();
	CDCUSB_init();
     93c:	4b14      	ldr	r3, [pc, #80]	; (990 <system_init+0xec>)
     93e:	4798      	blx	r3
	CAN_Compressor_init();
     940:	4b14      	ldr	r3, [pc, #80]	; (994 <system_init+0xf0>)
     942:	4798      	blx	r3
     944:	bd38      	pop	{r3, r4, r5, pc}
     946:	bf00      	nop
     948:	000014dd 	.word	0x000014dd
     94c:	41008000 	.word	0x41008000
     950:	c0008000 	.word	0xc0008000
     954:	c0000004 	.word	0xc0000004
     958:	00000381 	.word	0x00000381
     95c:	40000800 	.word	0x40000800
     960:	00001971 	.word	0x00001971
     964:	40002400 	.word	0x40002400
     968:	200004a8 	.word	0x200004a8
     96c:	00000cad 	.word	0x00000cad
     970:	00000479 	.word	0x00000479
     974:	00000571 	.word	0x00000571
     978:	0000061d 	.word	0x0000061d
     97c:	00000731 	.word	0x00000731
     980:	40001c00 	.word	0x40001c00
     984:	00002641 	.word	0x00002641
     988:	40003800 	.word	0x40003800
     98c:	200004c8 	.word	0x200004c8
     990:	00000805 	.word	0x00000805
     994:	00000869 	.word	0x00000869

00000998 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     998:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     99c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     99e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     9a0:	f3bf 8f5f 	dmb	sy
     9a4:	4770      	bx	lr

000009a6 <atomic_leave_critical>:
     9a6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     9aa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     9ac:	f383 8810 	msr	PRIMASK, r3
     9b0:	4770      	bx	lr

000009b2 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     9b2:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     9b4:	69c3      	ldr	r3, [r0, #28]
     9b6:	b103      	cbz	r3, 9ba <can_tx_done+0x8>
		descr->cb.tx_done(descr);
     9b8:	4798      	blx	r3
     9ba:	bd08      	pop	{r3, pc}

000009bc <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     9bc:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     9be:	6a03      	ldr	r3, [r0, #32]
     9c0:	b103      	cbz	r3, 9c4 <can_rx_done+0x8>
		descr->cb.rx_done(descr);
     9c2:	4798      	blx	r3
     9c4:	bd08      	pop	{r3, pc}

000009c6 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     9c6:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     9c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
     9ca:	b103      	cbz	r3, 9ce <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
     9cc:	4798      	blx	r3
     9ce:	bd08      	pop	{r3, pc}

000009d0 <can_async_init>:
{
     9d0:	b538      	push	{r3, r4, r5, lr}
     9d2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     9d4:	4604      	mov	r4, r0
     9d6:	b1a0      	cbz	r0, a02 <can_async_init+0x32>
     9d8:	1c08      	adds	r0, r1, #0
     9da:	bf18      	it	ne
     9dc:	2001      	movne	r0, #1
     9de:	2241      	movs	r2, #65	; 0x41
     9e0:	4909      	ldr	r1, [pc, #36]	; (a08 <can_async_init+0x38>)
     9e2:	4b0a      	ldr	r3, [pc, #40]	; (a0c <can_async_init+0x3c>)
     9e4:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     9e6:	4629      	mov	r1, r5
     9e8:	4620      	mov	r0, r4
     9ea:	4b09      	ldr	r3, [pc, #36]	; (a10 <can_async_init+0x40>)
     9ec:	4798      	blx	r3
	if (rc) {
     9ee:	4603      	mov	r3, r0
     9f0:	b928      	cbnz	r0, 9fe <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
     9f2:	4a08      	ldr	r2, [pc, #32]	; (a14 <can_async_init+0x44>)
     9f4:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     9f6:	4a08      	ldr	r2, [pc, #32]	; (a18 <can_async_init+0x48>)
     9f8:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     9fa:	4a08      	ldr	r2, [pc, #32]	; (a1c <can_async_init+0x4c>)
     9fc:	60e2      	str	r2, [r4, #12]
}
     9fe:	4618      	mov	r0, r3
     a00:	bd38      	pop	{r3, r4, r5, pc}
     a02:	2000      	movs	r0, #0
     a04:	e7eb      	b.n	9de <can_async_init+0xe>
     a06:	bf00      	nop
     a08:	0000445c 	.word	0x0000445c
     a0c:	00001291 	.word	0x00001291
     a10:	00001339 	.word	0x00001339
     a14:	000009b3 	.word	0x000009b3
     a18:	000009bd 	.word	0x000009bd
     a1c:	000009c7 	.word	0x000009c7

00000a20 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     a20:	b508      	push	{r3, lr}
	return _event_system_init();
     a22:	4b01      	ldr	r3, [pc, #4]	; (a28 <event_system_init+0x8>)
     a24:	4798      	blx	r3
}
     a26:	bd08      	pop	{r3, pc}
     a28:	00001545 	.word	0x00001545

00000a2c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     a2c:	b510      	push	{r4, lr}
     a2e:	b084      	sub	sp, #16
     a30:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     a32:	8903      	ldrh	r3, [r0, #8]
     a34:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a38:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     a3e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     a42:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a44:	a901      	add	r1, sp, #4
     a46:	3814      	subs	r0, #20
     a48:	4b03      	ldr	r3, [pc, #12]	; (a58 <i2c_m_sync_write+0x2c>)
     a4a:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
     a4c:	2800      	cmp	r0, #0
     a4e:	bf08      	it	eq
     a50:	4620      	moveq	r0, r4
     a52:	b004      	add	sp, #16
     a54:	bd10      	pop	{r4, pc}
     a56:	bf00      	nop
     a58:	00001b1d 	.word	0x00001b1d

00000a5c <i2c_m_sync_read>:
{
     a5c:	b510      	push	{r4, lr}
     a5e:	b084      	sub	sp, #16
     a60:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
     a62:	8903      	ldrh	r3, [r0, #8]
     a64:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a68:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     a6a:	f248 0301 	movw	r3, #32769	; 0x8001
     a6e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     a72:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a74:	a901      	add	r1, sp, #4
     a76:	3814      	subs	r0, #20
     a78:	4b03      	ldr	r3, [pc, #12]	; (a88 <i2c_m_sync_read+0x2c>)
     a7a:	4798      	blx	r3
}
     a7c:	2800      	cmp	r0, #0
     a7e:	bf08      	it	eq
     a80:	4620      	moveq	r0, r4
     a82:	b004      	add	sp, #16
     a84:	bd10      	pop	{r4, pc}
     a86:	bf00      	nop
     a88:	00001b1d 	.word	0x00001b1d

00000a8c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     a8c:	b538      	push	{r3, r4, r5, lr}
     a8e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     a90:	4604      	mov	r4, r0
     a92:	225e      	movs	r2, #94	; 0x5e
     a94:	4908      	ldr	r1, [pc, #32]	; (ab8 <i2c_m_sync_init+0x2c>)
     a96:	3000      	adds	r0, #0
     a98:	bf18      	it	ne
     a9a:	2001      	movne	r0, #1
     a9c:	4b07      	ldr	r3, [pc, #28]	; (abc <i2c_m_sync_init+0x30>)
     a9e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     aa0:	4629      	mov	r1, r5
     aa2:	4620      	mov	r0, r4
     aa4:	4b06      	ldr	r3, [pc, #24]	; (ac0 <i2c_m_sync_init+0x34>)
     aa6:	4798      	blx	r3
	if (init_status) {
     aa8:	4603      	mov	r3, r0
     aaa:	b918      	cbnz	r0, ab4 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     aac:	4a05      	ldr	r2, [pc, #20]	; (ac4 <i2c_m_sync_init+0x38>)
     aae:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     ab0:	4a05      	ldr	r2, [pc, #20]	; (ac8 <i2c_m_sync_init+0x3c>)
     ab2:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     ab4:	4618      	mov	r0, r3
     ab6:	bd38      	pop	{r3, r4, r5, pc}
     ab8:	00004478 	.word	0x00004478
     abc:	00001291 	.word	0x00001291
     ac0:	00001aed 	.word	0x00001aed
     ac4:	00000a5d 	.word	0x00000a5d
     ac8:	00000a2d 	.word	0x00000a2d

00000acc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     acc:	b538      	push	{r3, r4, r5, lr}
     ace:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     ad0:	4604      	mov	r4, r0
     ad2:	b1b8      	cbz	r0, b04 <spi_m_sync_init+0x38>
     ad4:	1c08      	adds	r0, r1, #0
     ad6:	bf18      	it	ne
     ad8:	2001      	movne	r0, #1
     ada:	2240      	movs	r2, #64	; 0x40
     adc:	490a      	ldr	r1, [pc, #40]	; (b08 <spi_m_sync_init+0x3c>)
     ade:	4b0b      	ldr	r3, [pc, #44]	; (b0c <spi_m_sync_init+0x40>)
     ae0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     ae2:	4620      	mov	r0, r4
     ae4:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     ae8:	4629      	mov	r1, r5
     aea:	4b09      	ldr	r3, [pc, #36]	; (b10 <spi_m_sync_init+0x44>)
     aec:	4798      	blx	r3

	if (rc < 0) {
     aee:	2800      	cmp	r0, #0
     af0:	db07      	blt.n	b02 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     af6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     af8:	4b06      	ldr	r3, [pc, #24]	; (b14 <spi_m_sync_init+0x48>)
     afa:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     afc:	4b06      	ldr	r3, [pc, #24]	; (b18 <spi_m_sync_init+0x4c>)
     afe:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     b00:	2000      	movs	r0, #0
}
     b02:	bd38      	pop	{r3, r4, r5, pc}
     b04:	2000      	movs	r0, #0
     b06:	e7e8      	b.n	ada <spi_m_sync_init+0xe>
     b08:	00004494 	.word	0x00004494
     b0c:	00001291 	.word	0x00001291
     b10:	00002039 	.word	0x00002039
     b14:	00000b99 	.word	0x00000b99
     b18:	00000b5d 	.word	0x00000b5d

00000b1c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     b1c:	b530      	push	{r4, r5, lr}
     b1e:	b085      	sub	sp, #20
     b20:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     b22:	4605      	mov	r5, r0
     b24:	b190      	cbz	r0, b4c <spi_m_sync_transfer+0x30>
     b26:	1c08      	adds	r0, r1, #0
     b28:	bf18      	it	ne
     b2a:	2001      	movne	r0, #1
     b2c:	22b3      	movs	r2, #179	; 0xb3
     b2e:	4908      	ldr	r1, [pc, #32]	; (b50 <spi_m_sync_transfer+0x34>)
     b30:	4b08      	ldr	r3, [pc, #32]	; (b54 <spi_m_sync_transfer+0x38>)
     b32:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     b34:	6823      	ldr	r3, [r4, #0]
     b36:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     b38:	6863      	ldr	r3, [r4, #4]
     b3a:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     b3c:	68a3      	ldr	r3, [r4, #8]
     b3e:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     b40:	a901      	add	r1, sp, #4
     b42:	1d28      	adds	r0, r5, #4
     b44:	4b04      	ldr	r3, [pc, #16]	; (b58 <spi_m_sync_transfer+0x3c>)
     b46:	4798      	blx	r3
}
     b48:	b005      	add	sp, #20
     b4a:	bd30      	pop	{r4, r5, pc}
     b4c:	2000      	movs	r0, #0
     b4e:	e7ed      	b.n	b2c <spi_m_sync_transfer+0x10>
     b50:	00004494 	.word	0x00004494
     b54:	00001291 	.word	0x00001291
     b58:	000021d1 	.word	0x000021d1

00000b5c <_spi_m_sync_io_write>:
{
     b5c:	b570      	push	{r4, r5, r6, lr}
     b5e:	b084      	sub	sp, #16
     b60:	460e      	mov	r6, r1
     b62:	4615      	mov	r5, r2
	ASSERT(io);
     b64:	4604      	mov	r4, r0
     b66:	22a3      	movs	r2, #163	; 0xa3
     b68:	4908      	ldr	r1, [pc, #32]	; (b8c <_spi_m_sync_io_write+0x30>)
     b6a:	3000      	adds	r0, #0
     b6c:	bf18      	it	ne
     b6e:	2001      	movne	r0, #1
     b70:	4b07      	ldr	r3, [pc, #28]	; (b90 <_spi_m_sync_io_write+0x34>)
     b72:	4798      	blx	r3
	xfer.rxbuf = 0;
     b74:	2300      	movs	r3, #0
     b76:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     b78:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     b7a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     b7c:	a901      	add	r1, sp, #4
     b7e:	f1a4 000c 	sub.w	r0, r4, #12
     b82:	4b04      	ldr	r3, [pc, #16]	; (b94 <_spi_m_sync_io_write+0x38>)
     b84:	4798      	blx	r3
}
     b86:	b004      	add	sp, #16
     b88:	bd70      	pop	{r4, r5, r6, pc}
     b8a:	bf00      	nop
     b8c:	00004494 	.word	0x00004494
     b90:	00001291 	.word	0x00001291
     b94:	00000b1d 	.word	0x00000b1d

00000b98 <_spi_m_sync_io_read>:
{
     b98:	b570      	push	{r4, r5, r6, lr}
     b9a:	b084      	sub	sp, #16
     b9c:	460e      	mov	r6, r1
     b9e:	4615      	mov	r5, r2
	ASSERT(io);
     ba0:	4604      	mov	r4, r0
     ba2:	2287      	movs	r2, #135	; 0x87
     ba4:	4908      	ldr	r1, [pc, #32]	; (bc8 <_spi_m_sync_io_read+0x30>)
     ba6:	3000      	adds	r0, #0
     ba8:	bf18      	it	ne
     baa:	2001      	movne	r0, #1
     bac:	4b07      	ldr	r3, [pc, #28]	; (bcc <_spi_m_sync_io_read+0x34>)
     bae:	4798      	blx	r3
	xfer.rxbuf = buf;
     bb0:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     bb2:	2300      	movs	r3, #0
     bb4:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     bb6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     bb8:	a901      	add	r1, sp, #4
     bba:	f1a4 000c 	sub.w	r0, r4, #12
     bbe:	4b04      	ldr	r3, [pc, #16]	; (bd0 <_spi_m_sync_io_read+0x38>)
     bc0:	4798      	blx	r3
}
     bc2:	b004      	add	sp, #16
     bc4:	bd70      	pop	{r4, r5, r6, pc}
     bc6:	bf00      	nop
     bc8:	00004494 	.word	0x00004494
     bcc:	00001291 	.word	0x00001291
     bd0:	00000b1d 	.word	0x00000b1d

00000bd4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bd6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     bd8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     bda:	b12f      	cbz	r7, be8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     bdc:	688d      	ldr	r5, [r1, #8]
     bde:	463c      	mov	r4, r7
     be0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     be2:	f1c2 0e01 	rsb	lr, r2, #1
     be6:	e00b      	b.n	c00 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     be8:	4b0e      	ldr	r3, [pc, #56]	; (c24 <timer_add_timer_task+0x50>)
     bea:	4798      	blx	r3
		return;
     bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     bee:	4473      	add	r3, lr
     bf0:	68a0      	ldr	r0, [r4, #8]
     bf2:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     bf4:	42ab      	cmp	r3, r5
     bf6:	d20a      	bcs.n	c0e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     bf8:	6823      	ldr	r3, [r4, #0]
     bfa:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     bfc:	b153      	cbz	r3, c14 <timer_add_timer_task+0x40>
     bfe:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     c00:	6863      	ldr	r3, [r4, #4]
     c02:	4293      	cmp	r3, r2
     c04:	d8f3      	bhi.n	bee <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     c06:	68a0      	ldr	r0, [r4, #8]
     c08:	4403      	add	r3, r0
     c0a:	1a9b      	subs	r3, r3, r2
     c0c:	e7f2      	b.n	bf4 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     c0e:	42a7      	cmp	r7, r4
     c10:	d004      	beq.n	c1c <timer_add_timer_task+0x48>
     c12:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c14:	4620      	mov	r0, r4
     c16:	4b04      	ldr	r3, [pc, #16]	; (c28 <timer_add_timer_task+0x54>)
     c18:	4798      	blx	r3
     c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c1c:	4660      	mov	r0, ip
     c1e:	4b01      	ldr	r3, [pc, #4]	; (c24 <timer_add_timer_task+0x50>)
     c20:	4798      	blx	r3
     c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c24:	000012b9 	.word	0x000012b9
     c28:	000012e5 	.word	0x000012e5

00000c2c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     c30:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c32:	6907      	ldr	r7, [r0, #16]
     c34:	3701      	adds	r7, #1
     c36:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c38:	7e03      	ldrb	r3, [r0, #24]
     c3a:	f013 0f01 	tst.w	r3, #1
     c3e:	d113      	bne.n	c68 <timer_process_counted+0x3c>
     c40:	7e03      	ldrb	r3, [r0, #24]
     c42:	f013 0f02 	tst.w	r3, #2
     c46:	d10f      	bne.n	c68 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c48:	b354      	cbz	r4, ca0 <timer_process_counted+0x74>
     c4a:	6863      	ldr	r3, [r4, #4]
     c4c:	1afb      	subs	r3, r7, r3
     c4e:	68a2      	ldr	r2, [r4, #8]
     c50:	4293      	cmp	r3, r2
     c52:	d307      	bcc.n	c64 <timer_process_counted+0x38>
     c54:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c56:	f100 0814 	add.w	r8, r0, #20
     c5a:	f8df 9048 	ldr.w	r9, [pc, #72]	; ca4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     c5e:	f8df a048 	ldr.w	sl, [pc, #72]	; ca8 <timer_process_counted+0x7c>
     c62:	e012      	b.n	c8a <timer_process_counted+0x5e>
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c68:	7e03      	ldrb	r3, [r0, #24]
     c6a:	f043 0302 	orr.w	r3, r3, #2
     c6e:	7603      	strb	r3, [r0, #24]
		return;
     c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c74:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     c76:	68e3      	ldr	r3, [r4, #12]
     c78:	4620      	mov	r0, r4
     c7a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c7c:	b185      	cbz	r5, ca0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c7e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     c80:	686b      	ldr	r3, [r5, #4]
     c82:	1afb      	subs	r3, r7, r3
     c84:	68aa      	ldr	r2, [r5, #8]
     c86:	4293      	cmp	r3, r2
     c88:	d30a      	bcc.n	ca0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     c8a:	4640      	mov	r0, r8
     c8c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c8e:	7c23      	ldrb	r3, [r4, #16]
     c90:	2b01      	cmp	r3, #1
     c92:	d1ef      	bne.n	c74 <timer_process_counted+0x48>
			tmp->time_label = time;
     c94:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c96:	463a      	mov	r2, r7
     c98:	4621      	mov	r1, r4
     c9a:	4640      	mov	r0, r8
     c9c:	47d0      	blx	sl
     c9e:	e7e9      	b.n	c74 <timer_process_counted+0x48>
     ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ca4:	0000132d 	.word	0x0000132d
     ca8:	00000bd5 	.word	0x00000bd5

00000cac <timer_init>:
{
     cac:	b570      	push	{r4, r5, r6, lr}
     cae:	460e      	mov	r6, r1
     cb0:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
     cb2:	4604      	mov	r4, r0
     cb4:	b190      	cbz	r0, cdc <timer_init+0x30>
     cb6:	b199      	cbz	r1, ce0 <timer_init+0x34>
     cb8:	1c10      	adds	r0, r2, #0
     cba:	bf18      	it	ne
     cbc:	2001      	movne	r0, #1
     cbe:	223b      	movs	r2, #59	; 0x3b
     cc0:	4908      	ldr	r1, [pc, #32]	; (ce4 <timer_init+0x38>)
     cc2:	4b09      	ldr	r3, [pc, #36]	; (ce8 <timer_init+0x3c>)
     cc4:	4798      	blx	r3
	descr->func = func;
     cc6:	4620      	mov	r0, r4
     cc8:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
     ccc:	682b      	ldr	r3, [r5, #0]
     cce:	4631      	mov	r1, r6
     cd0:	4798      	blx	r3
	descr->time                           = 0;
     cd2:	2000      	movs	r0, #0
     cd4:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cd6:	4b05      	ldr	r3, [pc, #20]	; (cec <timer_init+0x40>)
     cd8:	6063      	str	r3, [r4, #4]
}
     cda:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
     cdc:	2000      	movs	r0, #0
     cde:	e7ee      	b.n	cbe <timer_init+0x12>
     ce0:	2000      	movs	r0, #0
     ce2:	e7ec      	b.n	cbe <timer_init+0x12>
     ce4:	000044b0 	.word	0x000044b0
     ce8:	00001291 	.word	0x00001291
     cec:	00000c2d 	.word	0x00000c2d

00000cf0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     cf0:	4b0f      	ldr	r3, [pc, #60]	; (d30 <_usb_d_find_ep+0x40>)
     cf2:	7859      	ldrb	r1, [r3, #1]
     cf4:	4288      	cmp	r0, r1
     cf6:	d018      	beq.n	d2a <_usb_d_find_ep+0x3a>
{
     cf8:	b430      	push	{r4, r5}
     cfa:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     cfc:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     cfe:	f000 050f 	and.w	r5, r0, #15
     d02:	e007      	b.n	d14 <_usb_d_find_ep+0x24>
     d04:	3301      	adds	r3, #1
     d06:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     d08:	2b04      	cmp	r3, #4
     d0a:	d009      	beq.n	d20 <_usb_d_find_ep+0x30>
     d0c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     d0e:	7851      	ldrb	r1, [r2, #1]
     d10:	4281      	cmp	r1, r0
     d12:	d007      	beq.n	d24 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     d14:	7814      	ldrb	r4, [r2, #0]
     d16:	2c00      	cmp	r4, #0
     d18:	d1f4      	bne.n	d04 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     d1a:	428d      	cmp	r5, r1
     d1c:	d1f2      	bne.n	d04 <_usb_d_find_ep+0x14>
     d1e:	e001      	b.n	d24 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     d20:	f04f 33ff 	mov.w	r3, #4294967295
}
     d24:	4618      	mov	r0, r3
     d26:	bc30      	pop	{r4, r5}
     d28:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     d2a:	2300      	movs	r3, #0
}
     d2c:	4618      	mov	r0, r3
     d2e:	4770      	bx	lr
     d30:	200000d8 	.word	0x200000d8

00000d34 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     d34:	2000      	movs	r0, #0
     d36:	4770      	bx	lr

00000d38 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     d38:	b538      	push	{r3, r4, r5, lr}
     d3a:	4604      	mov	r4, r0
     d3c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     d3e:	4b09      	ldr	r3, [pc, #36]	; (d64 <usb_d_cb_trans_more+0x2c>)
     d40:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     d42:	4b09      	ldr	r3, [pc, #36]	; (d68 <usb_d_cb_trans_more+0x30>)
     d44:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     d48:	789b      	ldrb	r3, [r3, #2]
     d4a:	2b03      	cmp	r3, #3
     d4c:	d001      	beq.n	d52 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     d4e:	2000      	movs	r0, #0
}
     d50:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     d52:	4b05      	ldr	r3, [pc, #20]	; (d68 <usb_d_cb_trans_more+0x30>)
     d54:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     d58:	6983      	ldr	r3, [r0, #24]
     d5a:	4629      	mov	r1, r5
     d5c:	4620      	mov	r0, r4
     d5e:	4798      	blx	r3
     d60:	bd38      	pop	{r3, r4, r5, pc}
     d62:	bf00      	nop
     d64:	00000cf1 	.word	0x00000cf1
     d68:	200000d8 	.word	0x200000d8

00000d6c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d6e:	b085      	sub	sp, #20
     d70:	4606      	mov	r6, r0
     d72:	460d      	mov	r5, r1
     d74:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     d76:	4b4d      	ldr	r3, [pc, #308]	; (eac <_usb_d_cb_trans_done+0x140>)
     d78:	4798      	blx	r3
     d7a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     d7c:	2d00      	cmp	r5, #0
     d7e:	d15b      	bne.n	e38 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     d80:	4a4b      	ldr	r2, [pc, #300]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     d82:	0143      	lsls	r3, r0, #5
     d84:	18d1      	adds	r1, r2, r3
     d86:	2000      	movs	r0, #0
     d88:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d8a:	5cd3      	ldrb	r3, [r2, r3]
     d8c:	b173      	cbz	r3, dac <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     d8e:	4b48      	ldr	r3, [pc, #288]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     d90:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     d94:	2201      	movs	r2, #1
     d96:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     d98:	4845      	ldr	r0, [pc, #276]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     d9a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     d9e:	69c3      	ldr	r3, [r0, #28]
     da0:	463a      	mov	r2, r7
     da2:	78c1      	ldrb	r1, [r0, #3]
     da4:	4630      	mov	r0, r6
     da6:	4798      	blx	r3
}
     da8:	b005      	add	sp, #20
     daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     dac:	788b      	ldrb	r3, [r1, #2]
     dae:	2b03      	cmp	r3, #3
     db0:	d00b      	beq.n	dca <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     db2:	483f      	ldr	r0, [pc, #252]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     db4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     db8:	4614      	mov	r4, r2
     dba:	69d3      	ldr	r3, [r2, #28]
     dbc:	320c      	adds	r2, #12
     dbe:	2100      	movs	r1, #0
     dc0:	7860      	ldrb	r0, [r4, #1]
     dc2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     dc4:	2302      	movs	r3, #2
     dc6:	70a3      	strb	r3, [r4, #2]
     dc8:	e7ee      	b.n	da8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     dca:	460b      	mov	r3, r1
     dcc:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     dd0:	460a      	mov	r2, r1
     dd2:	69ce      	ldr	r6, [r1, #28]
     dd4:	320c      	adds	r2, #12
     dd6:	2101      	movs	r1, #1
     dd8:	7858      	ldrb	r0, [r3, #1]
     dda:	47b0      	blx	r6
		if (err) {
     ddc:	b1a0      	cbz	r0, e08 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     dde:	4b34      	ldr	r3, [pc, #208]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     de0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     de4:	2205      	movs	r2, #5
     de6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     de8:	2202      	movs	r2, #2
     dea:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     dec:	2d00      	cmp	r5, #0
     dee:	db09      	blt.n	e04 <_usb_d_cb_trans_done+0x98>
     df0:	482f      	ldr	r0, [pc, #188]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     df2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     df6:	7840      	ldrb	r0, [r0, #1]
     df8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     dfc:	2101      	movs	r1, #1
     dfe:	4b2d      	ldr	r3, [pc, #180]	; (eb4 <_usb_d_cb_trans_done+0x148>)
     e00:	4798      	blx	r3
     e02:	e7d1      	b.n	da8 <_usb_d_cb_trans_done+0x3c>
     e04:	7858      	ldrb	r0, [r3, #1]
     e06:	e7f9      	b.n	dfc <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     e08:	4829      	ldr	r0, [pc, #164]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     e0a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     e0e:	2304      	movs	r3, #4
     e10:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     e12:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     e14:	2200      	movs	r2, #0
     e16:	9201      	str	r2, [sp, #4]
     e18:	9202      	str	r2, [sp, #8]
     e1a:	4295      	cmp	r5, r2
     e1c:	bfac      	ite	ge
     e1e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     e22:	f003 030f 	andlt.w	r3, r3, #15
     e26:	f88d 300c 	strb.w	r3, [sp, #12]
     e2a:	2301      	movs	r3, #1
     e2c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     e30:	a801      	add	r0, sp, #4
     e32:	4b21      	ldr	r3, [pc, #132]	; (eb8 <_usb_d_cb_trans_done+0x14c>)
     e34:	4798      	blx	r3
     e36:	e7b7      	b.n	da8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     e38:	2d01      	cmp	r5, #1
     e3a:	d00a      	beq.n	e52 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     e3c:	2d02      	cmp	r5, #2
     e3e:	d01c      	beq.n	e7a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     e40:	2d03      	cmp	r5, #3
     e42:	d02a      	beq.n	e9a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     e44:	4b1a      	ldr	r3, [pc, #104]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     e46:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     e4a:	2206      	movs	r2, #6
     e4c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     e4e:	70da      	strb	r2, [r3, #3]
     e50:	e7a2      	b.n	d98 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     e52:	4a17      	ldr	r2, [pc, #92]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     e54:	0143      	lsls	r3, r0, #5
     e56:	18d1      	adds	r1, r2, r3
     e58:	2002      	movs	r0, #2
     e5a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e5c:	5cd3      	ldrb	r3, [r2, r3]
     e5e:	b12b      	cbz	r3, e6c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     e60:	4b13      	ldr	r3, [pc, #76]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     e62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     e66:	2205      	movs	r2, #5
     e68:	709a      	strb	r2, [r3, #2]
     e6a:	e795      	b.n	d98 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e6c:	460b      	mov	r3, r1
     e6e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e70:	2100      	movs	r1, #0
     e72:	4630      	mov	r0, r6
     e74:	4b0f      	ldr	r3, [pc, #60]	; (eb4 <_usb_d_cb_trans_done+0x148>)
     e76:	4798      	blx	r3
     e78:	e78e      	b.n	d98 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     e7a:	4a0d      	ldr	r2, [pc, #52]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     e7c:	0143      	lsls	r3, r0, #5
     e7e:	18d1      	adds	r1, r2, r3
     e80:	2004      	movs	r0, #4
     e82:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e84:	5cd3      	ldrb	r3, [r2, r3]
     e86:	b12b      	cbz	r3, e94 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     e88:	4b09      	ldr	r3, [pc, #36]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     e8a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     e8e:	2201      	movs	r2, #1
     e90:	709a      	strb	r2, [r3, #2]
     e92:	e781      	b.n	d98 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e94:	2302      	movs	r3, #2
     e96:	708b      	strb	r3, [r1, #2]
			return;
     e98:	e786      	b.n	da8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     e9a:	4b05      	ldr	r3, [pc, #20]	; (eb0 <_usb_d_cb_trans_done+0x144>)
     e9c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     ea0:	2200      	movs	r2, #0
     ea2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     ea4:	2205      	movs	r2, #5
     ea6:	70da      	strb	r2, [r3, #3]
     ea8:	e776      	b.n	d98 <_usb_d_cb_trans_done+0x2c>
     eaa:	bf00      	nop
     eac:	00000cf1 	.word	0x00000cf1
     eb0:	200000d8 	.word	0x200000d8
     eb4:	000034e9 	.word	0x000034e9
     eb8:	00003691 	.word	0x00003691

00000ebc <usb_d_cb_trans_setup>:
{
     ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ec0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ec2:	4b1c      	ldr	r3, [pc, #112]	; (f34 <usb_d_cb_trans_setup+0x78>)
     ec4:	4798      	blx	r3
     ec6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     ec8:	4c1b      	ldr	r4, [pc, #108]	; (f38 <usb_d_cb_trans_setup+0x7c>)
     eca:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     ece:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     ed0:	4621      	mov	r1, r4
     ed2:	4628      	mov	r0, r5
     ed4:	4b19      	ldr	r3, [pc, #100]	; (f3c <usb_d_cb_trans_setup+0x80>)
     ed6:	4798      	blx	r3
	if (n != 8) {
     ed8:	b2c0      	uxtb	r0, r0
     eda:	2808      	cmp	r0, #8
     edc:	d009      	beq.n	ef2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     ede:	2101      	movs	r1, #1
     ee0:	4628      	mov	r0, r5
     ee2:	4c17      	ldr	r4, [pc, #92]	; (f40 <usb_d_cb_trans_setup+0x84>)
     ee4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     ee6:	2101      	movs	r1, #1
     ee8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     eec:	47a0      	blx	r4
		return;
     eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ef2:	2100      	movs	r1, #0
     ef4:	4628      	mov	r0, r5
     ef6:	4f12      	ldr	r7, [pc, #72]	; (f40 <usb_d_cb_trans_setup+0x84>)
     ef8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     efa:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     efe:	2100      	movs	r1, #0
     f00:	4640      	mov	r0, r8
     f02:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     f04:	4b0c      	ldr	r3, [pc, #48]	; (f38 <usb_d_cb_trans_setup+0x7c>)
     f06:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     f0a:	2201      	movs	r2, #1
     f0c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     f0e:	695b      	ldr	r3, [r3, #20]
     f10:	4621      	mov	r1, r4
     f12:	4628      	mov	r0, r5
     f14:	4798      	blx	r3
     f16:	b108      	cbz	r0, f1c <usb_d_cb_trans_setup+0x60>
     f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     f1c:	4b06      	ldr	r3, [pc, #24]	; (f38 <usb_d_cb_trans_setup+0x7c>)
     f1e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     f22:	2305      	movs	r3, #5
     f24:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     f26:	2101      	movs	r1, #1
     f28:	4628      	mov	r0, r5
     f2a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     f2c:	2101      	movs	r1, #1
     f2e:	4640      	mov	r0, r8
     f30:	47b8      	blx	r7
     f32:	e7f1      	b.n	f18 <usb_d_cb_trans_setup+0x5c>
     f34:	00000cf1 	.word	0x00000cf1
     f38:	200000d8 	.word	0x200000d8
     f3c:	00003631 	.word	0x00003631
     f40:	000034e9 	.word	0x000034e9

00000f44 <usb_d_init>:

int32_t usb_d_init(void)
{
     f44:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     f46:	4b11      	ldr	r3, [pc, #68]	; (f8c <usb_d_init+0x48>)
     f48:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     f4a:	2800      	cmp	r0, #0
     f4c:	db1c      	blt.n	f88 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     f4e:	4c10      	ldr	r4, [pc, #64]	; (f90 <usb_d_init+0x4c>)
     f50:	2280      	movs	r2, #128	; 0x80
     f52:	2100      	movs	r1, #0
     f54:	4620      	mov	r0, r4
     f56:	4b0f      	ldr	r3, [pc, #60]	; (f94 <usb_d_init+0x50>)
     f58:	4798      	blx	r3
     f5a:	4623      	mov	r3, r4
     f5c:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     f60:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     f62:	4a0d      	ldr	r2, [pc, #52]	; (f98 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     f64:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     f66:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     f68:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     f6a:	61da      	str	r2, [r3, #28]
     f6c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     f6e:	4283      	cmp	r3, r0
     f70:	d1f8      	bne.n	f64 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     f72:	490a      	ldr	r1, [pc, #40]	; (f9c <usb_d_init+0x58>)
     f74:	2000      	movs	r0, #0
     f76:	4c0a      	ldr	r4, [pc, #40]	; (fa0 <usb_d_init+0x5c>)
     f78:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     f7a:	490a      	ldr	r1, [pc, #40]	; (fa4 <usb_d_init+0x60>)
     f7c:	2001      	movs	r0, #1
     f7e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     f80:	4909      	ldr	r1, [pc, #36]	; (fa8 <usb_d_init+0x64>)
     f82:	2002      	movs	r0, #2
     f84:	47a0      	blx	r4
	return ERR_NONE;
     f86:	2000      	movs	r0, #0
}
     f88:	bd10      	pop	{r4, pc}
     f8a:	bf00      	nop
     f8c:	00002edd 	.word	0x00002edd
     f90:	200000d8 	.word	0x200000d8
     f94:	0000444b 	.word	0x0000444b
     f98:	00000d35 	.word	0x00000d35
     f9c:	00000ebd 	.word	0x00000ebd
     fa0:	00003895 	.word	0x00003895
     fa4:	00000d39 	.word	0x00000d39
     fa8:	00000d6d 	.word	0x00000d6d

00000fac <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     fac:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     fae:	4b01      	ldr	r3, [pc, #4]	; (fb4 <usb_d_register_callback+0x8>)
     fb0:	4798      	blx	r3
     fb2:	bd08      	pop	{r3, pc}
     fb4:	00003871 	.word	0x00003871

00000fb8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     fb8:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     fba:	4b01      	ldr	r3, [pc, #4]	; (fc0 <usb_d_enable+0x8>)
     fbc:	4798      	blx	r3
}
     fbe:	bd08      	pop	{r3, pc}
     fc0:	00002fd9 	.word	0x00002fd9

00000fc4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     fc4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     fc6:	4b01      	ldr	r3, [pc, #4]	; (fcc <usb_d_attach+0x8>)
     fc8:	4798      	blx	r3
     fca:	bd08      	pop	{r3, pc}
     fcc:	00003045 	.word	0x00003045

00000fd0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     fd0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     fd2:	4b01      	ldr	r3, [pc, #4]	; (fd8 <usb_d_set_address+0x8>)
     fd4:	4798      	blx	r3
     fd6:	bd08      	pop	{r3, pc}
     fd8:	00003057 	.word	0x00003057

00000fdc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fde:	4606      	mov	r6, r0
     fe0:	460c      	mov	r4, r1
     fe2:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     fe4:	4b0f      	ldr	r3, [pc, #60]	; (1024 <usb_d_ep_init+0x48>)
     fe6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     fe8:	2800      	cmp	r0, #0
     fea:	da14      	bge.n	1016 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     fec:	20ff      	movs	r0, #255	; 0xff
     fee:	4b0d      	ldr	r3, [pc, #52]	; (1024 <usb_d_ep_init+0x48>)
     ff0:	4798      	blx	r3
		if (ep_index < 0) {
     ff2:	1e05      	subs	r5, r0, #0
     ff4:	db12      	blt.n	101c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     ff6:	463a      	mov	r2, r7
     ff8:	4621      	mov	r1, r4
     ffa:	4630      	mov	r0, r6
     ffc:	4b0a      	ldr	r3, [pc, #40]	; (1028 <usb_d_ep_init+0x4c>)
     ffe:	4798      	blx	r3
	if (rc < 0) {
    1000:	2800      	cmp	r0, #0
    1002:	db0d      	blt.n	1020 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1004:	4b09      	ldr	r3, [pc, #36]	; (102c <usb_d_ep_init+0x50>)
    1006:	0168      	lsls	r0, r5, #5
    1008:	181a      	adds	r2, r3, r0
    100a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    100c:	f004 0403 	and.w	r4, r4, #3
    1010:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1012:	2000      	movs	r0, #0
    1014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1016:	f06f 0013 	mvn.w	r0, #19
    101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    101c:	f06f 0014 	mvn.w	r0, #20
}
    1020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1022:	bf00      	nop
    1024:	00000cf1 	.word	0x00000cf1
    1028:	00003065 	.word	0x00003065
    102c:	200000d8 	.word	0x200000d8

00001030 <usb_d_ep0_init>:
{
    1030:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1032:	4602      	mov	r2, r0
    1034:	2100      	movs	r1, #0
    1036:	4608      	mov	r0, r1
    1038:	4b01      	ldr	r3, [pc, #4]	; (1040 <usb_d_ep0_init+0x10>)
    103a:	4798      	blx	r3
}
    103c:	bd08      	pop	{r3, pc}
    103e:	bf00      	nop
    1040:	00000fdd 	.word	0x00000fdd

00001044 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1044:	b538      	push	{r3, r4, r5, lr}
    1046:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1048:	4b06      	ldr	r3, [pc, #24]	; (1064 <usb_d_ep_deinit+0x20>)
    104a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    104c:	1e04      	subs	r4, r0, #0
    104e:	db07      	blt.n	1060 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1050:	4628      	mov	r0, r5
    1052:	4b05      	ldr	r3, [pc, #20]	; (1068 <usb_d_ep_deinit+0x24>)
    1054:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1056:	4805      	ldr	r0, [pc, #20]	; (106c <usb_d_ep_deinit+0x28>)
    1058:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    105c:	23ff      	movs	r3, #255	; 0xff
    105e:	7043      	strb	r3, [r0, #1]
    1060:	bd38      	pop	{r3, r4, r5, pc}
    1062:	bf00      	nop
    1064:	00000cf1 	.word	0x00000cf1
    1068:	0000317d 	.word	0x0000317d
    106c:	200000d8 	.word	0x200000d8

00001070 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1070:	b538      	push	{r3, r4, r5, lr}
    1072:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1074:	4b0e      	ldr	r3, [pc, #56]	; (10b0 <usb_d_ep_enable+0x40>)
    1076:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1078:	1e04      	subs	r4, r0, #0
    107a:	db16      	blt.n	10aa <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    107c:	0163      	lsls	r3, r4, #5
    107e:	4a0d      	ldr	r2, [pc, #52]	; (10b4 <usb_d_ep_enable+0x44>)
    1080:	5cd3      	ldrb	r3, [r2, r3]
    1082:	2b00      	cmp	r3, #0
    1084:	bf0c      	ite	eq
    1086:	2202      	moveq	r2, #2
    1088:	2201      	movne	r2, #1
    108a:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <usb_d_ep_enable+0x44>)
    108c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1090:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1092:	4628      	mov	r0, r5
    1094:	4b08      	ldr	r3, [pc, #32]	; (10b8 <usb_d_ep_enable+0x48>)
    1096:	4798      	blx	r3
	if (rc < 0) {
    1098:	2800      	cmp	r0, #0
    109a:	db00      	blt.n	109e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    109c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    109e:	4b05      	ldr	r3, [pc, #20]	; (10b4 <usb_d_ep_enable+0x44>)
    10a0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    10a4:	2300      	movs	r3, #0
    10a6:	70a3      	strb	r3, [r4, #2]
    10a8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    10aa:	f06f 0011 	mvn.w	r0, #17
    10ae:	e7f5      	b.n	109c <usb_d_ep_enable+0x2c>
    10b0:	00000cf1 	.word	0x00000cf1
    10b4:	200000d8 	.word	0x200000d8
    10b8:	00003241 	.word	0x00003241

000010bc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    10bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10c0:	b086      	sub	sp, #24
    10c2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    10c4:	7a07      	ldrb	r7, [r0, #8]
    10c6:	4638      	mov	r0, r7
    10c8:	4b3f      	ldr	r3, [pc, #252]	; (11c8 <usb_d_ep_transfer+0x10c>)
    10ca:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    10cc:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    10ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    10d2:	1e06      	subs	r6, r0, #0
    10d4:	db72      	blt.n	11bc <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    10d6:	a804      	add	r0, sp, #16
    10d8:	4b3c      	ldr	r3, [pc, #240]	; (11cc <usb_d_ep_transfer+0x110>)
    10da:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    10dc:	4b3c      	ldr	r3, [pc, #240]	; (11d0 <usb_d_ep_transfer+0x114>)
    10de:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    10e2:	789b      	ldrb	r3, [r3, #2]
    10e4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    10e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    10ec:	b2db      	uxtb	r3, r3
    10ee:	2b01      	cmp	r3, #1
    10f0:	d011      	beq.n	1116 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    10f2:	a804      	add	r0, sp, #16
    10f4:	4b37      	ldr	r3, [pc, #220]	; (11d4 <usb_d_ep_transfer+0x118>)
    10f6:	4798      	blx	r3
		switch (state) {
    10f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    10fc:	b2db      	uxtb	r3, r3
    10fe:	2b05      	cmp	r3, #5
    1100:	d05f      	beq.n	11c2 <usb_d_ep_transfer+0x106>
    1102:	2b06      	cmp	r3, #6
    1104:	d023      	beq.n	114e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1106:	2b00      	cmp	r3, #0
    1108:	bf0c      	ite	eq
    110a:	f06f 0012 	mvneq.w	r0, #18
    110e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    1110:	b006      	add	sp, #24
    1112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1116:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 11d0 <usb_d_ep_transfer+0x114>
    111a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    111e:	eb0a 0309 	add.w	r3, sl, r9
    1122:	2203      	movs	r2, #3
    1124:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1126:	a804      	add	r0, sp, #16
    1128:	4b2a      	ldr	r3, [pc, #168]	; (11d4 <usb_d_ep_transfer+0x118>)
    112a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    112c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1130:	b183      	cbz	r3, 1154 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1132:	7a22      	ldrb	r2, [r4, #8]
    1134:	3500      	adds	r5, #0
    1136:	bf18      	it	ne
    1138:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    113a:	6823      	ldr	r3, [r4, #0]
    113c:	9301      	str	r3, [sp, #4]
    113e:	f8cd 8008 	str.w	r8, [sp, #8]
    1142:	f017 0f80 	tst.w	r7, #128	; 0x80
    1146:	d119      	bne.n	117c <usb_d_ep_transfer+0xc0>
    1148:	f002 030f 	and.w	r3, r2, #15
    114c:	e018      	b.n	1180 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    114e:	f06f 000f 	mvn.w	r0, #15
    1152:	e7dd      	b.n	1110 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1154:	4b1e      	ldr	r3, [pc, #120]	; (11d0 <usb_d_ep_transfer+0x114>)
    1156:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    115a:	7cda      	ldrb	r2, [r3, #19]
    115c:	7c9d      	ldrb	r5, [r3, #18]
    115e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    1162:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1164:	b9a5      	cbnz	r5, 1190 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1166:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <usb_d_ep_transfer+0x114>)
    1168:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    116c:	2304      	movs	r3, #4
    116e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1170:	2300      	movs	r3, #0
			zlp                 = true;
    1172:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1174:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1176:	6821      	ldr	r1, [r4, #0]
    1178:	9101      	str	r1, [sp, #4]
    117a:	9302      	str	r3, [sp, #8]
    117c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1180:	f88d 300c 	strb.w	r3, [sp, #12]
    1184:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1188:	a801      	add	r0, sp, #4
    118a:	4b13      	ldr	r3, [pc, #76]	; (11d8 <usb_d_ep_transfer+0x11c>)
    118c:	4798      	blx	r3
	return rc;
    118e:	e7bf      	b.n	1110 <usb_d_ep_transfer+0x54>
    1190:	4643      	mov	r3, r8
    1192:	45a8      	cmp	r8, r5
    1194:	bf28      	it	cs
    1196:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1198:	4a0d      	ldr	r2, [pc, #52]	; (11d0 <usb_d_ep_transfer+0x114>)
    119a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    119e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    11a2:	2a00      	cmp	r2, #0
    11a4:	db05      	blt.n	11b2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    11a6:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    11a8:	6821      	ldr	r1, [r4, #0]
    11aa:	9101      	str	r1, [sp, #4]
    11ac:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    11ae:	2500      	movs	r5, #0
    11b0:	e7ca      	b.n	1148 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    11b2:	429d      	cmp	r5, r3
    11b4:	bf94      	ite	ls
    11b6:	2500      	movls	r5, #0
    11b8:	2501      	movhi	r5, #1
    11ba:	e7db      	b.n	1174 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    11bc:	f06f 0011 	mvn.w	r0, #17
    11c0:	e7a6      	b.n	1110 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    11c2:	2002      	movs	r0, #2
    11c4:	e7a4      	b.n	1110 <usb_d_ep_transfer+0x54>
    11c6:	bf00      	nop
    11c8:	00000cf1 	.word	0x00000cf1
    11cc:	00000999 	.word	0x00000999
    11d0:	200000d8 	.word	0x200000d8
    11d4:	000009a7 	.word	0x000009a7
    11d8:	00003691 	.word	0x00003691

000011dc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    11dc:	b538      	push	{r3, r4, r5, lr}
    11de:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    11e0:	b141      	cbz	r1, 11f4 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    11e2:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    11e4:	bf0c      	ite	eq
    11e6:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    11e8:	2102      	movne	r1, #2
    11ea:	4b13      	ldr	r3, [pc, #76]	; (1238 <usb_d_ep_halt+0x5c>)
    11ec:	4798      	blx	r3
    11ee:	4603      	mov	r3, r0
	}
}
    11f0:	4618      	mov	r0, r3
    11f2:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    11f4:	4b11      	ldr	r3, [pc, #68]	; (123c <usb_d_ep_halt+0x60>)
    11f6:	4798      	blx	r3
	if (ep_index < 0) {
    11f8:	1e05      	subs	r5, r0, #0
    11fa:	db19      	blt.n	1230 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    11fc:	2102      	movs	r1, #2
    11fe:	4620      	mov	r0, r4
    1200:	4b0d      	ldr	r3, [pc, #52]	; (1238 <usb_d_ep_halt+0x5c>)
    1202:	4798      	blx	r3
    1204:	4603      	mov	r3, r0
    1206:	2800      	cmp	r0, #0
    1208:	d0f2      	beq.n	11f0 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    120a:	2100      	movs	r1, #0
    120c:	4620      	mov	r0, r4
    120e:	4b0a      	ldr	r3, [pc, #40]	; (1238 <usb_d_ep_halt+0x5c>)
    1210:	4798      	blx	r3
		if (rc < 0) {
    1212:	1e03      	subs	r3, r0, #0
    1214:	dbec      	blt.n	11f0 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1216:	4b0a      	ldr	r3, [pc, #40]	; (1240 <usb_d_ep_halt+0x64>)
    1218:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    121c:	2201      	movs	r2, #1
    121e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1220:	2103      	movs	r1, #3
    1222:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1224:	69db      	ldr	r3, [r3, #28]
    1226:	2200      	movs	r2, #0
    1228:	4620      	mov	r0, r4
    122a:	4798      	blx	r3
	return ERR_NONE;
    122c:	2300      	movs	r3, #0
    122e:	e7df      	b.n	11f0 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1230:	f06f 0311 	mvn.w	r3, #17
    1234:	e7dc      	b.n	11f0 <usb_d_ep_halt+0x14>
    1236:	bf00      	nop
    1238:	000034e9 	.word	0x000034e9
    123c:	00000cf1 	.word	0x00000cf1
    1240:	200000d8 	.word	0x200000d8

00001244 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1244:	b538      	push	{r3, r4, r5, lr}
    1246:	460d      	mov	r5, r1
    1248:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    124a:	4b0e      	ldr	r3, [pc, #56]	; (1284 <usb_d_ep_register_callback+0x40>)
    124c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    124e:	4b0e      	ldr	r3, [pc, #56]	; (1288 <usb_d_ep_register_callback+0x44>)
    1250:	2c00      	cmp	r4, #0
    1252:	bf08      	it	eq
    1254:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1256:	2800      	cmp	r0, #0
    1258:	db13      	blt.n	1282 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    125a:	2d01      	cmp	r5, #1
    125c:	d008      	beq.n	1270 <usb_d_ep_register_callback+0x2c>
    125e:	b115      	cbz	r5, 1266 <usb_d_ep_register_callback+0x22>
    1260:	2d02      	cmp	r5, #2
    1262:	d00a      	beq.n	127a <usb_d_ep_register_callback+0x36>
    1264:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1266:	4b09      	ldr	r3, [pc, #36]	; (128c <usb_d_ep_register_callback+0x48>)
    1268:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    126c:	6144      	str	r4, [r0, #20]
		break;
    126e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1270:	4b06      	ldr	r3, [pc, #24]	; (128c <usb_d_ep_register_callback+0x48>)
    1272:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1276:	6184      	str	r4, [r0, #24]
		break;
    1278:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <usb_d_ep_register_callback+0x48>)
    127c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1280:	61c4      	str	r4, [r0, #28]
    1282:	bd38      	pop	{r3, r4, r5, pc}
    1284:	00000cf1 	.word	0x00000cf1
    1288:	00000d35 	.word	0x00000d35
    128c:	200000d8 	.word	0x200000d8

00001290 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1290:	b900      	cbnz	r0, 1294 <assert+0x4>
		__asm("BKPT #0");
    1292:	be00      	bkpt	0x0000
    1294:	4770      	bx	lr

00001296 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1296:	6803      	ldr	r3, [r0, #0]
    1298:	b14b      	cbz	r3, 12ae <is_list_element+0x18>
		if (it == element) {
    129a:	428b      	cmp	r3, r1
    129c:	d009      	beq.n	12b2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    129e:	681b      	ldr	r3, [r3, #0]
    12a0:	b11b      	cbz	r3, 12aa <is_list_element+0x14>
		if (it == element) {
    12a2:	4299      	cmp	r1, r3
    12a4:	d1fb      	bne.n	129e <is_list_element+0x8>
			return true;
    12a6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    12a8:	4770      	bx	lr
	return false;
    12aa:	2000      	movs	r0, #0
    12ac:	4770      	bx	lr
    12ae:	2000      	movs	r0, #0
    12b0:	4770      	bx	lr
			return true;
    12b2:	2001      	movs	r0, #1
    12b4:	4770      	bx	lr
	...

000012b8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    12b8:	b538      	push	{r3, r4, r5, lr}
    12ba:	4604      	mov	r4, r0
    12bc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    12be:	4b06      	ldr	r3, [pc, #24]	; (12d8 <list_insert_as_head+0x20>)
    12c0:	4798      	blx	r3
    12c2:	f080 0001 	eor.w	r0, r0, #1
    12c6:	2239      	movs	r2, #57	; 0x39
    12c8:	4904      	ldr	r1, [pc, #16]	; (12dc <list_insert_as_head+0x24>)
    12ca:	b2c0      	uxtb	r0, r0
    12cc:	4b04      	ldr	r3, [pc, #16]	; (12e0 <list_insert_as_head+0x28>)
    12ce:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    12d0:	6823      	ldr	r3, [r4, #0]
    12d2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    12d4:	6025      	str	r5, [r4, #0]
    12d6:	bd38      	pop	{r3, r4, r5, pc}
    12d8:	00001297 	.word	0x00001297
    12dc:	000044c8 	.word	0x000044c8
    12e0:	00001291 	.word	0x00001291

000012e4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    12e4:	6803      	ldr	r3, [r0, #0]
    12e6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    12e8:	6001      	str	r1, [r0, #0]
    12ea:	4770      	bx	lr

000012ec <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	4605      	mov	r5, r0
    12f0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    12f2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    12f4:	4b0a      	ldr	r3, [pc, #40]	; (1320 <list_insert_at_end+0x34>)
    12f6:	4798      	blx	r3
    12f8:	f080 0001 	eor.w	r0, r0, #1
    12fc:	224f      	movs	r2, #79	; 0x4f
    12fe:	4909      	ldr	r1, [pc, #36]	; (1324 <list_insert_at_end+0x38>)
    1300:	b2c0      	uxtb	r0, r0
    1302:	4b09      	ldr	r3, [pc, #36]	; (1328 <list_insert_at_end+0x3c>)
    1304:	4798      	blx	r3

	if (!list->head) {
    1306:	682b      	ldr	r3, [r5, #0]
    1308:	b91b      	cbnz	r3, 1312 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    130a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    130c:	6033      	str	r3, [r6, #0]
		return;
    130e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1310:	461c      	mov	r4, r3
	while (it->next) {
    1312:	6823      	ldr	r3, [r4, #0]
    1314:	2b00      	cmp	r3, #0
    1316:	d1fb      	bne.n	1310 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1318:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    131a:	6033      	str	r3, [r6, #0]
    131c:	bd70      	pop	{r4, r5, r6, pc}
    131e:	bf00      	nop
    1320:	00001297 	.word	0x00001297
    1324:	000044c8 	.word	0x000044c8
    1328:	00001291 	.word	0x00001291

0000132c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    132c:	6803      	ldr	r3, [r0, #0]
    132e:	b10b      	cbz	r3, 1334 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1330:	681a      	ldr	r2, [r3, #0]
    1332:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1334:	4618      	mov	r0, r3
    1336:	4770      	bx	lr

00001338 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1338:	b430      	push	{r4, r5}
	dev->hw = hw;
    133a:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    133c:	698b      	ldr	r3, [r1, #24]
    133e:	f043 0301 	orr.w	r3, r3, #1
    1342:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1344:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    1346:	6993      	ldr	r3, [r2, #24]
    1348:	f013 0f01 	tst.w	r3, #1
    134c:	d0fb      	beq.n	1346 <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    134e:	6993      	ldr	r3, [r2, #24]
    1350:	f043 0302 	orr.w	r3, r3, #2
    1354:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    1356:	4b34      	ldr	r3, [pc, #208]	; (1428 <_can_async_init+0xf0>)
    1358:	4299      	cmp	r1, r3
    135a:	d011      	beq.n	1380 <_can_async_init+0x48>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    135c:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    135e:	6993      	ldr	r3, [r2, #24]
    1360:	f023 0302 	bic.w	r3, r3, #2
    1364:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1366:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1368:	6993      	ldr	r3, [r2, #24]
    136a:	f023 0301 	bic.w	r3, r3, #1
    136e:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    1370:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1372:	6993      	ldr	r3, [r2, #24]
    1374:	f013 0f01 	tst.w	r3, #1
    1378:	d1fb      	bne.n	1372 <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    137a:	2000      	movs	r0, #0
    137c:	bc30      	pop	{r4, r5}
    137e:	4770      	bx	lr
		_can1_dev    = dev;
    1380:	4b2a      	ldr	r3, [pc, #168]	; (142c <_can_async_init+0xf4>)
    1382:	461a      	mov	r2, r3
    1384:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    1388:	4929      	ldr	r1, [pc, #164]	; (1430 <_can_async_init+0xf8>)
    138a:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    138c:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    138e:	698c      	ldr	r4, [r1, #24]
    1390:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    1392:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    1394:	2400      	movs	r4, #0
    1396:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    1398:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    139a:	4d26      	ldr	r5, [pc, #152]	; (1434 <_can_async_init+0xfc>)
    139c:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    139e:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    13a0:	f640 2533 	movw	r5, #2611	; 0xa33
    13a4:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    13a6:	6805      	ldr	r5, [r0, #0]
    13a8:	4923      	ldr	r1, [pc, #140]	; (1438 <_can_async_init+0x100>)
    13aa:	b289      	uxth	r1, r1
    13ac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    13b0:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    13b4:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    13b6:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    13ba:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    13bc:	f8c1 40c8 	str.w	r4, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    13c0:	6805      	ldr	r5, [r0, #0]
    13c2:	491e      	ldr	r1, [pc, #120]	; (143c <_can_async_init+0x104>)
    13c4:	b289      	uxth	r1, r1
    13c6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
    13ca:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    13ce:	6801      	ldr	r1, [r0, #0]
    13d0:	b292      	uxth	r2, r2
    13d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    13d6:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    13da:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    13dc:	2128      	movs	r1, #40	; 0x28
    13de:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    13e2:	6801      	ldr	r1, [r0, #0]
    13e4:	f103 0214 	add.w	r2, r3, #20
    13e8:	b292      	uxth	r2, r2
    13ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    13ee:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    13f2:	6802      	ldr	r2, [r0, #0]
    13f4:	331c      	adds	r3, #28
    13f6:	b29b      	uxth	r3, r3
    13f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    13fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    1400:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    1402:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1406:	4b0e      	ldr	r3, [pc, #56]	; (1440 <_can_async_init+0x108>)
    1408:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    140c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    1410:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1414:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1418:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    141c:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    141e:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    1420:	2201      	movs	r2, #1
    1422:	65da      	str	r2, [r3, #92]	; 0x5c
    1424:	e79a      	b.n	135c <_can_async_init+0x24>
    1426:	bf00      	nop
    1428:	42000400 	.word	0x42000400
    142c:	20000158 	.word	0x20000158
    1430:	20000000 	.word	0x20000000
    1434:	06020a07 	.word	0x06020a07
    1438:	20000528 	.word	0x20000528
    143c:	20000508 	.word	0x20000508
    1440:	e000e100 	.word	0xe000e100

00001444 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1444:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1446:	4b1d      	ldr	r3, [pc, #116]	; (14bc <CAN1_Handler+0x78>)
    1448:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    144a:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    144c:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    144e:	f014 0f01 	tst.w	r4, #1
    1452:	d11c      	bne.n	148e <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1454:	f414 7f00 	tst.w	r4, #512	; 0x200
    1458:	d11d      	bne.n	1496 <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    145a:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    145e:	d11e      	bne.n	149e <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    1460:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    1464:	d120      	bne.n	14a8 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1466:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    146a:	d00a      	beq.n	1482 <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    146c:	68ea      	ldr	r2, [r5, #12]
    146e:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    1470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1472:	f3c3 1340 	ubfx	r3, r3, #5, #1
    1476:	2b00      	cmp	r3, #0
    1478:	bf14      	ite	ne
    147a:	2102      	movne	r1, #2
    147c:	2101      	moveq	r1, #1
    147e:	4628      	mov	r0, r5
    1480:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    1482:	f014 0f08 	tst.w	r4, #8
    1486:	d114      	bne.n	14b2 <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1488:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    148a:	651c      	str	r4, [r3, #80]	; 0x50
    148c:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    148e:	68ab      	ldr	r3, [r5, #8]
    1490:	4628      	mov	r0, r5
    1492:	4798      	blx	r3
    1494:	e7de      	b.n	1454 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    1496:	686b      	ldr	r3, [r5, #4]
    1498:	4628      	mov	r0, r5
    149a:	4798      	blx	r3
    149c:	e7dd      	b.n	145a <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    149e:	68eb      	ldr	r3, [r5, #12]
    14a0:	2103      	movs	r1, #3
    14a2:	4628      	mov	r0, r5
    14a4:	4798      	blx	r3
    14a6:	e7db      	b.n	1460 <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    14a8:	68eb      	ldr	r3, [r5, #12]
    14aa:	2100      	movs	r1, #0
    14ac:	4628      	mov	r0, r5
    14ae:	4798      	blx	r3
    14b0:	e7d9      	b.n	1466 <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    14b2:	68eb      	ldr	r3, [r5, #12]
    14b4:	2104      	movs	r1, #4
    14b6:	4628      	mov	r0, r5
    14b8:	4798      	blx	r3
    14ba:	e7e5      	b.n	1488 <CAN1_Handler+0x44>
    14bc:	20000158 	.word	0x20000158

000014c0 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14c0:	0943      	lsrs	r3, r0, #5
    14c2:	f000 001f 	and.w	r0, r0, #31
    14c6:	2201      	movs	r2, #1
    14c8:	fa02 f000 	lsl.w	r0, r2, r0
    14cc:	3340      	adds	r3, #64	; 0x40
    14ce:	4a02      	ldr	r2, [pc, #8]	; (14d8 <_irq_set+0x18>)
    14d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    14d4:	4770      	bx	lr
    14d6:	bf00      	nop
    14d8:	e000e100 	.word	0xe000e100

000014dc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14dc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    14de:	4a12      	ldr	r2, [pc, #72]	; (1528 <_init_chip+0x4c>)
    14e0:	8813      	ldrh	r3, [r2, #0]
    14e2:	b29b      	uxth	r3, r3
    14e4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    14e6:	4b11      	ldr	r3, [pc, #68]	; (152c <_init_chip+0x50>)
    14e8:	4798      	blx	r3
	_oscctrl_init_sources();
    14ea:	4b11      	ldr	r3, [pc, #68]	; (1530 <_init_chip+0x54>)
    14ec:	4798      	blx	r3
	_mclk_init();
    14ee:	4b11      	ldr	r3, [pc, #68]	; (1534 <_init_chip+0x58>)
    14f0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    14f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    14f6:	4c10      	ldr	r4, [pc, #64]	; (1538 <_init_chip+0x5c>)
    14f8:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    14fa:	4b10      	ldr	r3, [pc, #64]	; (153c <_init_chip+0x60>)
    14fc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    14fe:	f640 30ff 	movw	r0, #3071	; 0xbff
    1502:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1504:	4b0e      	ldr	r3, [pc, #56]	; (1540 <_init_chip+0x64>)
    1506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1508:	62da      	str	r2, [r3, #44]	; 0x2c
    150a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    150e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1512:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1516:	f042 028f 	orr.w	r2, r2, #143	; 0x8f
    151a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    151e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1522:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1526:	bd10      	pop	{r4, pc}
    1528:	41004000 	.word	0x41004000
    152c:	00001641 	.word	0x00001641
    1530:	00001661 	.word	0x00001661
    1534:	00001635 	.word	0x00001635
    1538:	000015a1 	.word	0x000015a1
    153c:	0000167d 	.word	0x0000167d
    1540:	41008000 	.word	0x41008000

00001544 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1544:	b430      	push	{r4, r5}
    1546:	4814      	ldr	r0, [pc, #80]	; (1598 <_event_system_init+0x54>)
    1548:	f100 0543 	add.w	r5, r0, #67	; 0x43
    154c:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    154e:	4c13      	ldr	r4, [pc, #76]	; (159c <_event_system_init+0x58>)
    1550:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1552:	f813 1b01 	ldrb.w	r1, [r3], #1
    1556:	3248      	adds	r2, #72	; 0x48
    1558:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    155c:	42ab      	cmp	r3, r5
    155e:	d1f7      	bne.n	1550 <_event_system_init+0xc>
    1560:	480d      	ldr	r0, [pc, #52]	; (1598 <_event_system_init+0x54>)
    1562:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1566:	3080      	adds	r0, #128	; 0x80
    1568:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    156a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    156e:	00ca      	lsls	r2, r1, #3
    1570:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1574:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1578:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    157a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    157e:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1580:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1584:	43db      	mvns	r3, r3
    1586:	b2db      	uxtb	r3, r3
    1588:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    158c:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    158e:	2920      	cmp	r1, #32
    1590:	d1eb      	bne.n	156a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1592:	2000      	movs	r0, #0
    1594:	bc30      	pop	{r4, r5}
    1596:	4770      	bx	lr
    1598:	000044e8 	.word	0x000044e8
    159c:	4100e000 	.word	0x4100e000

000015a0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    15a0:	f010 0f01 	tst.w	r0, #1
    15a4:	d008      	beq.n	15b8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15a6:	4a1d      	ldr	r2, [pc, #116]	; (161c <_gclk_init_generators_by_fref+0x7c>)
    15a8:	4b1d      	ldr	r3, [pc, #116]	; (1620 <_gclk_init_generators_by_fref+0x80>)
    15aa:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15ac:	4619      	mov	r1, r3
    15ae:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15b2:	684b      	ldr	r3, [r1, #4]
    15b4:	4213      	tst	r3, r2
    15b6:	d1fc      	bne.n	15b2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    15b8:	f010 0f02 	tst.w	r0, #2
    15bc:	d008      	beq.n	15d0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15be:	4a19      	ldr	r2, [pc, #100]	; (1624 <_gclk_init_generators_by_fref+0x84>)
    15c0:	4b17      	ldr	r3, [pc, #92]	; (1620 <_gclk_init_generators_by_fref+0x80>)
    15c2:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15c4:	4619      	mov	r1, r3
    15c6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15ca:	684b      	ldr	r3, [r1, #4]
    15cc:	4213      	tst	r3, r2
    15ce:	d1fc      	bne.n	15ca <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    15d0:	f010 0f04 	tst.w	r0, #4
    15d4:	d008      	beq.n	15e8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15d6:	4a14      	ldr	r2, [pc, #80]	; (1628 <_gclk_init_generators_by_fref+0x88>)
    15d8:	4b11      	ldr	r3, [pc, #68]	; (1620 <_gclk_init_generators_by_fref+0x80>)
    15da:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15dc:	4619      	mov	r1, r3
    15de:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15e2:	684b      	ldr	r3, [r1, #4]
    15e4:	4213      	tst	r3, r2
    15e6:	d1fc      	bne.n	15e2 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    15e8:	f410 6f80 	tst.w	r0, #1024	; 0x400
    15ec:	d008      	beq.n	1600 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15ee:	4a0f      	ldr	r2, [pc, #60]	; (162c <_gclk_init_generators_by_fref+0x8c>)
    15f0:	4b0b      	ldr	r3, [pc, #44]	; (1620 <_gclk_init_generators_by_fref+0x80>)
    15f2:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15f4:	4619      	mov	r1, r3
    15f6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15fa:	684b      	ldr	r3, [r1, #4]
    15fc:	4213      	tst	r3, r2
    15fe:	d1fc      	bne.n	15fa <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1600:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1604:	d008      	beq.n	1618 <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1606:	4a0a      	ldr	r2, [pc, #40]	; (1630 <_gclk_init_generators_by_fref+0x90>)
    1608:	4b05      	ldr	r3, [pc, #20]	; (1620 <_gclk_init_generators_by_fref+0x80>)
    160a:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    160c:	4619      	mov	r1, r3
    160e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1612:	684b      	ldr	r3, [r1, #4]
    1614:	4213      	tst	r3, r2
    1616:	d1fc      	bne.n	1612 <_gclk_init_generators_by_fref+0x72>
    1618:	4770      	bx	lr
    161a:	bf00      	nop
    161c:	00010101 	.word	0x00010101
    1620:	40001c00 	.word	0x40001c00
    1624:	00040908 	.word	0x00040908
    1628:	00010906 	.word	0x00010906
    162c:	00010905 	.word	0x00010905
    1630:	00010904 	.word	0x00010904

00001634 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1634:	2201      	movs	r2, #1
    1636:	4b01      	ldr	r3, [pc, #4]	; (163c <_mclk_init+0x8>)
    1638:	715a      	strb	r2, [r3, #5]
    163a:	4770      	bx	lr
    163c:	40000800 	.word	0x40000800

00001640 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1640:	4b06      	ldr	r3, [pc, #24]	; (165c <_osc32kctrl_init_sources+0x1c>)
    1642:	f242 0286 	movw	r2, #8326	; 0x2086
    1646:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1648:	2200      	movs	r2, #0
    164a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    164c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    164e:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1650:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1654:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1656:	741a      	strb	r2, [r3, #16]
    1658:	4770      	bx	lr
    165a:	bf00      	nop
    165c:	40001400 	.word	0x40001400

00001660 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1660:	4a04      	ldr	r2, [pc, #16]	; (1674 <_oscctrl_init_sources+0x14>)
    1662:	4b05      	ldr	r3, [pc, #20]	; (1678 <_oscctrl_init_sources+0x18>)
    1664:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1666:	461a      	mov	r2, r3
    1668:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    166a:	f013 0f02 	tst.w	r3, #2
    166e:	d0fb      	beq.n	1668 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1670:	4770      	bx	lr
    1672:	bf00      	nop
    1674:	03002606 	.word	0x03002606
    1678:	40001000 	.word	0x40001000

0000167c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    167c:	4a44      	ldr	r2, [pc, #272]	; (1790 <_oscctrl_init_referenced_generators+0x114>)
    167e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1680:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1684:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1688:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    168a:	4611      	mov	r1, r2
    168c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1690:	684b      	ldr	r3, [r1, #4]
    1692:	4213      	tst	r3, r2
    1694:	d1fc      	bne.n	1690 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1696:	4a3e      	ldr	r2, [pc, #248]	; (1790 <_oscctrl_init_referenced_generators+0x114>)
    1698:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    169a:	f013 0f04 	tst.w	r3, #4
    169e:	d1fb      	bne.n	1698 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    16a0:	4b3c      	ldr	r3, [pc, #240]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    16a2:	2200      	movs	r2, #0
    16a4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    16a6:	4a3c      	ldr	r2, [pc, #240]	; (1798 <_oscctrl_init_referenced_generators+0x11c>)
    16a8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16aa:	461a      	mov	r2, r3
    16ac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    16b0:	f013 0f10 	tst.w	r3, #16
    16b4:	d1fa      	bne.n	16ac <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    16b6:	2200      	movs	r2, #0
    16b8:	4b36      	ldr	r3, [pc, #216]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    16ba:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16be:	461a      	mov	r2, r3
    16c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    16c4:	f013 0f04 	tst.w	r3, #4
    16c8:	d1fa      	bne.n	16c0 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    16ca:	2202      	movs	r2, #2
    16cc:	4b31      	ldr	r3, [pc, #196]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    16ce:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16d0:	461a      	mov	r2, r3
    16d2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    16d6:	f013 0f02 	tst.w	r3, #2
    16da:	d1fa      	bne.n	16d2 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    16dc:	4b2d      	ldr	r3, [pc, #180]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    16de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    16e0:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16e2:	461a      	mov	r2, r3
    16e4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    16e8:	f013 0f08 	tst.w	r3, #8
    16ec:	d1fa      	bne.n	16e4 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    16ee:	2219      	movs	r2, #25
    16f0:	4b28      	ldr	r3, [pc, #160]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    16f2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    16f6:	461a      	mov	r2, r3
    16f8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    16fc:	f013 0f04 	tst.w	r3, #4
    1700:	d1fa      	bne.n	16f8 <_oscctrl_init_referenced_generators+0x7c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1702:	4a26      	ldr	r2, [pc, #152]	; (179c <_oscctrl_init_referenced_generators+0x120>)
    1704:	4b23      	ldr	r3, [pc, #140]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    1706:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1708:	461a      	mov	r2, r3
    170a:	6d13      	ldr	r3, [r2, #80]	; 0x50
    170c:	f013 0f06 	tst.w	r3, #6
    1710:	d1fb      	bne.n	170a <_oscctrl_init_referenced_generators+0x8e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1712:	4b20      	ldr	r3, [pc, #128]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    1714:	2220      	movs	r2, #32
    1716:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1718:	2202      	movs	r2, #2
    171a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    171e:	461a      	mov	r2, r3
    1720:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1722:	f013 0f02 	tst.w	r3, #2
    1726:	d1fb      	bne.n	1720 <_oscctrl_init_referenced_generators+0xa4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1728:	4b1a      	ldr	r3, [pc, #104]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    172a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    172e:	f013 0f01 	tst.w	r3, #1
    1732:	d026      	beq.n	1782 <_oscctrl_init_referenced_generators+0x106>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1734:	4a17      	ldr	r2, [pc, #92]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    1736:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1738:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    173c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1740:	d1f9      	bne.n	1736 <_oscctrl_init_referenced_generators+0xba>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1742:	4b14      	ldr	r3, [pc, #80]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    1744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1746:	f012 0f01 	tst.w	r2, #1
    174a:	d103      	bne.n	1754 <_oscctrl_init_referenced_generators+0xd8>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    174c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    174e:	f012 0f02 	tst.w	r2, #2
    1752:	d0f7      	beq.n	1744 <_oscctrl_init_referenced_generators+0xc8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1754:	4a0e      	ldr	r2, [pc, #56]	; (1790 <_oscctrl_init_referenced_generators+0x114>)
    1756:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1758:	2b00      	cmp	r3, #0
    175a:	d1fc      	bne.n	1756 <_oscctrl_init_referenced_generators+0xda>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    175c:	4a0c      	ldr	r2, [pc, #48]	; (1790 <_oscctrl_init_referenced_generators+0x114>)
    175e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1760:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1764:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1768:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    176a:	4611      	mov	r1, r2
    176c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1770:	684b      	ldr	r3, [r1, #4]
    1772:	4213      	tst	r3, r2
    1774:	d1fc      	bne.n	1770 <_oscctrl_init_referenced_generators+0xf4>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1776:	4a06      	ldr	r2, [pc, #24]	; (1790 <_oscctrl_init_referenced_generators+0x114>)
    1778:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    177a:	f013 0f04 	tst.w	r3, #4
    177e:	d1fb      	bne.n	1778 <_oscctrl_init_referenced_generators+0xfc>
		;
#endif
	(void)hw;
}
    1780:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1782:	4a04      	ldr	r2, [pc, #16]	; (1794 <_oscctrl_init_referenced_generators+0x118>)
    1784:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1786:	f413 7f80 	tst.w	r3, #256	; 0x100
    178a:	d0fb      	beq.n	1784 <_oscctrl_init_referenced_generators+0x108>
    178c:	e7d9      	b.n	1742 <_oscctrl_init_referenced_generators+0xc6>
    178e:	bf00      	nop
    1790:	40001c00 	.word	0x40001c00
    1794:	40001000 	.word	0x40001000
    1798:	0401bb80 	.word	0x0401bb80
    179c:	000407a0 	.word	0x000407a0

000017a0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    17a0:	b500      	push	{lr}
    17a2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    17a4:	4b0d      	ldr	r3, [pc, #52]	; (17dc <RAMECC_Handler+0x3c>)
    17a6:	789b      	ldrb	r3, [r3, #2]
    17a8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    17aa:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    17ac:	9b01      	ldr	r3, [sp, #4]
    17ae:	f013 0f02 	tst.w	r3, #2
    17b2:	d006      	beq.n	17c2 <RAMECC_Handler+0x22>
    17b4:	4b0a      	ldr	r3, [pc, #40]	; (17e0 <RAMECC_Handler+0x40>)
    17b6:	681b      	ldr	r3, [r3, #0]
    17b8:	b11b      	cbz	r3, 17c2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    17ba:	4a08      	ldr	r2, [pc, #32]	; (17dc <RAMECC_Handler+0x3c>)
    17bc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    17be:	4798      	blx	r3
    17c0:	e009      	b.n	17d6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    17c2:	9b01      	ldr	r3, [sp, #4]
    17c4:	f013 0f01 	tst.w	r3, #1
    17c8:	d005      	beq.n	17d6 <RAMECC_Handler+0x36>
    17ca:	4b05      	ldr	r3, [pc, #20]	; (17e0 <RAMECC_Handler+0x40>)
    17cc:	685b      	ldr	r3, [r3, #4]
    17ce:	b113      	cbz	r3, 17d6 <RAMECC_Handler+0x36>
    17d0:	4a02      	ldr	r2, [pc, #8]	; (17dc <RAMECC_Handler+0x3c>)
    17d2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    17d4:	4798      	blx	r3
	} else {
		return;
	}
}
    17d6:	b003      	add	sp, #12
    17d8:	f85d fb04 	ldr.w	pc, [sp], #4
    17dc:	41020000 	.word	0x41020000
    17e0:	20000548 	.word	0x20000548

000017e4 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    17e4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    17e6:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    17e8:	6913      	ldr	r3, [r2, #16]
    17ea:	f013 0f60 	tst.w	r3, #96	; 0x60
    17ee:	d1fb      	bne.n	17e8 <_rtc_timer_set_period+0x4>
}
    17f0:	4770      	bx	lr

000017f2 <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    17f2:	68c2      	ldr	r2, [r0, #12]
    17f4:	6913      	ldr	r3, [r2, #16]
    17f6:	f013 0f60 	tst.w	r3, #96	; 0x60
    17fa:	d1fb      	bne.n	17f4 <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    17fc:	6a10      	ldr	r0, [r2, #32]
}
    17fe:	4770      	bx	lr

00001800 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    1800:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1802:	f248 0103 	movw	r1, #32771	; 0x8003
    1806:	6913      	ldr	r3, [r2, #16]
    1808:	420b      	tst	r3, r1
    180a:	d1fc      	bne.n	1806 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    180c:	8810      	ldrh	r0, [r2, #0]
}
    180e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1812:	4770      	bx	lr

00001814 <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    1814:	4770      	bx	lr
	...

00001818 <_rtc_timer_init>:
{
    1818:	b538      	push	{r3, r4, r5, lr}
    181a:	460c      	mov	r4, r1
	ASSERT(dev);
    181c:	4605      	mov	r5, r0
    181e:	2230      	movs	r2, #48	; 0x30
    1820:	4917      	ldr	r1, [pc, #92]	; (1880 <_rtc_timer_init+0x68>)
    1822:	3000      	adds	r0, #0
    1824:	bf18      	it	ne
    1826:	2001      	movne	r0, #1
    1828:	4b16      	ldr	r3, [pc, #88]	; (1884 <_rtc_timer_init+0x6c>)
    182a:	4798      	blx	r3
	dev->hw = hw;
    182c:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    182e:	2301      	movs	r3, #1
    1830:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1832:	f248 0203 	movw	r2, #32771	; 0x8003
    1836:	6923      	ldr	r3, [r4, #16]
    1838:	4213      	tst	r3, r2
    183a:	d1fc      	bne.n	1836 <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    183c:	68ea      	ldr	r2, [r5, #12]
    183e:	6913      	ldr	r3, [r2, #16]
    1840:	f013 0f01 	tst.w	r3, #1
    1844:	d1fb      	bne.n	183e <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1846:	f44f 7380 	mov.w	r3, #256	; 0x100
    184a:	6053      	str	r3, [r2, #4]
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    184c:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    184e:	f248 0380 	movw	r3, #32896	; 0x8080
    1852:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1854:	f248 0103 	movw	r1, #32771	; 0x8003
    1858:	6913      	ldr	r3, [r2, #16]
    185a:	420b      	tst	r3, r1
    185c:	d1fc      	bne.n	1858 <_rtc_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    185e:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1860:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1864:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1866:	6913      	ldr	r3, [r2, #16]
    1868:	f013 0f60 	tst.w	r3, #96	; 0x60
    186c:	d1fb      	bne.n	1866 <_rtc_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    186e:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1870:	f44f 7280 	mov.w	r2, #256	; 0x100
    1874:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    1876:	4b04      	ldr	r3, [pc, #16]	; (1888 <_rtc_timer_init+0x70>)
    1878:	601d      	str	r5, [r3, #0]
}
    187a:	2000      	movs	r0, #0
    187c:	bd38      	pop	{r3, r4, r5, pc}
    187e:	bf00      	nop
    1880:	000045ec 	.word	0x000045ec
    1884:	00001291 	.word	0x00001291
    1888:	20000184 	.word	0x20000184

0000188c <_rtc_timer_deinit>:
{
    188c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    188e:	4604      	mov	r4, r0
    1890:	b1c8      	cbz	r0, 18c6 <_rtc_timer_deinit+0x3a>
    1892:	68c0      	ldr	r0, [r0, #12]
    1894:	3000      	adds	r0, #0
    1896:	bf18      	it	ne
    1898:	2001      	movne	r0, #1
    189a:	2252      	movs	r2, #82	; 0x52
    189c:	490b      	ldr	r1, [pc, #44]	; (18cc <_rtc_timer_deinit+0x40>)
    189e:	4b0c      	ldr	r3, [pc, #48]	; (18d0 <_rtc_timer_deinit+0x44>)
    18a0:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18a6:	4b0b      	ldr	r3, [pc, #44]	; (18d4 <_rtc_timer_deinit+0x48>)
    18a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    18ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18b0:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    18b4:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    18b6:	2301      	movs	r3, #1
    18b8:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    18ba:	f248 0103 	movw	r1, #32771	; 0x8003
    18be:	6913      	ldr	r3, [r2, #16]
    18c0:	420b      	tst	r3, r1
    18c2:	d1fc      	bne.n	18be <_rtc_timer_deinit+0x32>
}
    18c4:	bd10      	pop	{r4, pc}
    18c6:	2000      	movs	r0, #0
    18c8:	e7e7      	b.n	189a <_rtc_timer_deinit+0xe>
    18ca:	bf00      	nop
    18cc:	000045ec 	.word	0x000045ec
    18d0:	00001291 	.word	0x00001291
    18d4:	e000e100 	.word	0xe000e100

000018d8 <_rtc_timer_start>:
{
    18d8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    18da:	4604      	mov	r4, r0
    18dc:	b310      	cbz	r0, 1924 <_rtc_timer_start+0x4c>
    18de:	68c0      	ldr	r0, [r0, #12]
    18e0:	3000      	adds	r0, #0
    18e2:	bf18      	it	ne
    18e4:	2001      	movne	r0, #1
    18e6:	225e      	movs	r2, #94	; 0x5e
    18e8:	490f      	ldr	r1, [pc, #60]	; (1928 <_rtc_timer_start+0x50>)
    18ea:	4b10      	ldr	r3, [pc, #64]	; (192c <_rtc_timer_start+0x54>)
    18ec:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18f2:	4b0f      	ldr	r3, [pc, #60]	; (1930 <_rtc_timer_start+0x58>)
    18f4:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    18f6:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    18f8:	2300      	movs	r3, #0
    18fa:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    18fc:	6913      	ldr	r3, [r2, #16]
    18fe:	f013 0f08 	tst.w	r3, #8
    1902:	d1fb      	bne.n	18fc <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    1904:	68e3      	ldr	r3, [r4, #12]
    1906:	691a      	ldr	r2, [r3, #16]
    1908:	f012 0f08 	tst.w	r2, #8
    190c:	d1fb      	bne.n	1906 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    190e:	881a      	ldrh	r2, [r3, #0]
    1910:	b292      	uxth	r2, r2
    1912:	f042 0202 	orr.w	r2, r2, #2
    1916:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1918:	f248 0103 	movw	r1, #32771	; 0x8003
    191c:	691a      	ldr	r2, [r3, #16]
    191e:	420a      	tst	r2, r1
    1920:	d1fc      	bne.n	191c <_rtc_timer_start+0x44>
}
    1922:	bd10      	pop	{r4, pc}
    1924:	2000      	movs	r0, #0
    1926:	e7de      	b.n	18e6 <_rtc_timer_start+0xe>
    1928:	000045ec 	.word	0x000045ec
    192c:	00001291 	.word	0x00001291
    1930:	e000e100 	.word	0xe000e100

00001934 <_rtc_timer_stop>:
{
    1934:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    1936:	4604      	mov	r4, r0
    1938:	b1a0      	cbz	r0, 1964 <_rtc_timer_stop+0x30>
    193a:	68c0      	ldr	r0, [r0, #12]
    193c:	3000      	adds	r0, #0
    193e:	bf18      	it	ne
    1940:	2001      	movne	r0, #1
    1942:	226b      	movs	r2, #107	; 0x6b
    1944:	4908      	ldr	r1, [pc, #32]	; (1968 <_rtc_timer_stop+0x34>)
    1946:	4b09      	ldr	r3, [pc, #36]	; (196c <_rtc_timer_stop+0x38>)
    1948:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    194a:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    194c:	8813      	ldrh	r3, [r2, #0]
    194e:	f023 0302 	bic.w	r3, r3, #2
    1952:	041b      	lsls	r3, r3, #16
    1954:	0c1b      	lsrs	r3, r3, #16
    1956:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1958:	f248 0103 	movw	r1, #32771	; 0x8003
    195c:	6913      	ldr	r3, [r2, #16]
    195e:	420b      	tst	r3, r1
    1960:	d1fc      	bne.n	195c <_rtc_timer_stop+0x28>
}
    1962:	bd10      	pop	{r4, pc}
    1964:	2000      	movs	r0, #0
    1966:	e7ec      	b.n	1942 <_rtc_timer_stop+0xe>
    1968:	000045ec 	.word	0x000045ec
    196c:	00001291 	.word	0x00001291

00001970 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    1970:	4800      	ldr	r0, [pc, #0]	; (1974 <_rtc_get_timer+0x4>)
    1972:	4770      	bx	lr
    1974:	20000014 	.word	0x20000014

00001978 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1978:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    197a:	4b08      	ldr	r3, [pc, #32]	; (199c <RTC_Handler+0x24>)
    197c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    197e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1980:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1982:	f413 7f80 	tst.w	r3, #256	; 0x100
    1986:	d007      	beq.n	1998 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1988:	6823      	ldr	r3, [r4, #0]
    198a:	b10b      	cbz	r3, 1990 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    198c:	4620      	mov	r0, r4
    198e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1990:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1992:	f44f 7280 	mov.w	r2, #256	; 0x100
    1996:	819a      	strh	r2, [r3, #12]
    1998:	bd10      	pop	{r4, pc}
    199a:	bf00      	nop
    199c:	20000184 	.word	0x20000184

000019a0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    19a0:	b470      	push	{r4, r5, r6}
    19a2:	b089      	sub	sp, #36	; 0x24
    19a4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    19a6:	466c      	mov	r4, sp
    19a8:	4d0d      	ldr	r5, [pc, #52]	; (19e0 <_sercom_get_hardware_index+0x40>)
    19aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    19ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    19ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    19b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    19b6:	9b00      	ldr	r3, [sp, #0]
    19b8:	42b3      	cmp	r3, r6
    19ba:	d00d      	beq.n	19d8 <_sercom_get_hardware_index+0x38>
    19bc:	4631      	mov	r1, r6
    19be:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19c0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    19c2:	f853 2b04 	ldr.w	r2, [r3], #4
    19c6:	428a      	cmp	r2, r1
    19c8:	d007      	beq.n	19da <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19ca:	3001      	adds	r0, #1
    19cc:	2808      	cmp	r0, #8
    19ce:	d1f8      	bne.n	19c2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    19d0:	2000      	movs	r0, #0
}
    19d2:	b009      	add	sp, #36	; 0x24
    19d4:	bc70      	pop	{r4, r5, r6}
    19d6:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19d8:	2000      	movs	r0, #0
			return i;
    19da:	b2c0      	uxtb	r0, r0
    19dc:	e7f9      	b.n	19d2 <_sercom_get_hardware_index+0x32>
    19de:	bf00      	nop
    19e0:	00004604 	.word	0x00004604

000019e4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    19e4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    19e6:	4b07      	ldr	r3, [pc, #28]	; (1a04 <_get_i2cm_index+0x20>)
    19e8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    19ea:	2803      	cmp	r0, #3
    19ec:	d008      	beq.n	1a00 <_get_i2cm_index+0x1c>
			return i;
		}
	}

	ASSERT(false);
    19ee:	f240 32a6 	movw	r2, #934	; 0x3a6
    19f2:	4905      	ldr	r1, [pc, #20]	; (1a08 <_get_i2cm_index+0x24>)
    19f4:	2000      	movs	r0, #0
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <_get_i2cm_index+0x28>)
    19f8:	4798      	blx	r3
	return -1;
    19fa:	f04f 30ff 	mov.w	r0, #4294967295
}
    19fe:	bd08      	pop	{r3, pc}
			return i;
    1a00:	2000      	movs	r0, #0
    1a02:	bd08      	pop	{r3, pc}
    1a04:	000019a1 	.word	0x000019a1
    1a08:	00004670 	.word	0x00004670
    1a0c:	00001291 	.word	0x00001291

00001a10 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1a10:	b538      	push	{r3, r4, r5, lr}
    1a12:	4605      	mov	r5, r0
    1a14:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1a16:	4608      	mov	r0, r1
    1a18:	4b32      	ldr	r3, [pc, #200]	; (1ae4 <_i2c_m_sync_init_impl+0xd4>)
    1a1a:	4798      	blx	r3
    1a1c:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1a1e:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1a20:	f013 0f01 	tst.w	r3, #1
    1a24:	d122      	bne.n	1a6c <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1a26:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a2a:	4a2f      	ldr	r2, [pc, #188]	; (1ae8 <_i2c_m_sync_init_impl+0xd8>)
    1a2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a32:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a36:	69e3      	ldr	r3, [r4, #28]
    1a38:	f013 0f03 	tst.w	r3, #3
    1a3c:	d1fb      	bne.n	1a36 <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1a3e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1a40:	f013 0f02 	tst.w	r3, #2
    1a44:	d00b      	beq.n	1a5e <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1a46:	6823      	ldr	r3, [r4, #0]
    1a48:	f023 0302 	bic.w	r3, r3, #2
    1a4c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a4e:	69e3      	ldr	r3, [r4, #28]
    1a50:	f013 0f03 	tst.w	r3, #3
    1a54:	d1fb      	bne.n	1a4e <_i2c_m_sync_init_impl+0x3e>
    1a56:	69e3      	ldr	r3, [r4, #28]
    1a58:	f013 0f02 	tst.w	r3, #2
    1a5c:	d1fb      	bne.n	1a56 <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1a5e:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1a62:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a64:	69e3      	ldr	r3, [r4, #28]
    1a66:	f013 0f03 	tst.w	r3, #3
    1a6a:	d1fb      	bne.n	1a64 <_i2c_m_sync_init_impl+0x54>
    1a6c:	69e3      	ldr	r3, [r4, #28]
    1a6e:	f013 0f01 	tst.w	r3, #1
    1a72:	d1fb      	bne.n	1a6c <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1a74:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a78:	4a1b      	ldr	r2, [pc, #108]	; (1ae8 <_i2c_m_sync_init_impl+0xd8>)
    1a7a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1a80:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a82:	69e3      	ldr	r3, [r4, #28]
    1a84:	f013 0f03 	tst.w	r3, #3
    1a88:	d1fb      	bne.n	1a82 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1a8a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a8e:	4916      	ldr	r1, [pc, #88]	; (1ae8 <_i2c_m_sync_init_impl+0xd8>)
    1a90:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1a96:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a98:	69e3      	ldr	r3, [r4, #28]
    1a9a:	f013 0f04 	tst.w	r3, #4
    1a9e:	d1fb      	bne.n	1a98 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1aa0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1aa4:	4910      	ldr	r1, [pc, #64]	; (1ae8 <_i2c_m_sync_init_impl+0xd8>)
    1aa6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1aac:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1aae:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1ab2:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1ab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1aba:	2b01      	cmp	r3, #1
    1abc:	bf94      	ite	ls
    1abe:	2300      	movls	r3, #0
    1ac0:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1ac2:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1ac6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ac8:	69e3      	ldr	r3, [r4, #28]
    1aca:	f013 0f04 	tst.w	r3, #4
    1ace:	d1fb      	bne.n	1ac8 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    1ad0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ad4:	4b04      	ldr	r3, [pc, #16]	; (1ae8 <_i2c_m_sync_init_impl+0xd8>)
    1ad6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1ada:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1adc:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1ade:	2000      	movs	r0, #0
    1ae0:	bd38      	pop	{r3, r4, r5, pc}
    1ae2:	bf00      	nop
    1ae4:	000019e5 	.word	0x000019e5
    1ae8:	00004604 	.word	0x00004604

00001aec <_i2c_m_sync_init>:
{
    1aec:	b538      	push	{r3, r4, r5, lr}
    1aee:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1af0:	4604      	mov	r4, r0
    1af2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    1af6:	4906      	ldr	r1, [pc, #24]	; (1b10 <_i2c_m_sync_init+0x24>)
    1af8:	3000      	adds	r0, #0
    1afa:	bf18      	it	ne
    1afc:	2001      	movne	r0, #1
    1afe:	4b05      	ldr	r3, [pc, #20]	; (1b14 <_i2c_m_sync_init+0x28>)
    1b00:	4798      	blx	r3
	i2c_dev->hw = hw;
    1b02:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1b04:	4629      	mov	r1, r5
    1b06:	4620      	mov	r0, r4
    1b08:	4b03      	ldr	r3, [pc, #12]	; (1b18 <_i2c_m_sync_init+0x2c>)
    1b0a:	4798      	blx	r3
}
    1b0c:	bd38      	pop	{r3, r4, r5, pc}
    1b0e:	bf00      	nop
    1b10:	00004670 	.word	0x00004670
    1b14:	00001291 	.word	0x00001291
    1b18:	00001a11 	.word	0x00001a11

00001b1c <_i2c_m_sync_transfer>:
{
    1b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1b20:	4605      	mov	r5, r0
    1b22:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    1b24:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1b26:	f110 0800 	adds.w	r8, r0, #0
    1b2a:	bf18      	it	ne
    1b2c:	f04f 0801 	movne.w	r8, #1
    1b30:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 1df8 <_i2c_m_sync_transfer+0x2dc>
    1b34:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    1b38:	4649      	mov	r1, r9
    1b3a:	4640      	mov	r0, r8
    1b3c:	4fad      	ldr	r7, [pc, #692]	; (1df4 <_i2c_m_sync_transfer+0x2d8>)
    1b3e:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1b40:	6928      	ldr	r0, [r5, #16]
    1b42:	f240 52d1 	movw	r2, #1489	; 0x5d1
    1b46:	4649      	mov	r1, r9
    1b48:	3000      	adds	r0, #0
    1b4a:	bf18      	it	ne
    1b4c:	2001      	movne	r0, #1
    1b4e:	47b8      	blx	r7
	ASSERT(msg);
    1b50:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1b54:	4649      	mov	r1, r9
    1b56:	1c30      	adds	r0, r6, #0
    1b58:	bf18      	it	ne
    1b5a:	2001      	movne	r0, #1
    1b5c:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1b5e:	886b      	ldrh	r3, [r5, #2]
    1b60:	f413 7f80 	tst.w	r3, #256	; 0x100
    1b64:	f040 8218 	bne.w	1f98 <_i2c_m_sync_transfer+0x47c>
	msg->flags |= I2C_M_BUSY;
    1b68:	8873      	ldrh	r3, [r6, #2]
    1b6a:	b29b      	uxth	r3, r3
    1b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1b70:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    1b72:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1b76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1b7a:	6863      	ldr	r3, [r4, #4]
    1b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1b80:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1b82:	69e3      	ldr	r3, [r4, #28]
    1b84:	f013 0f04 	tst.w	r3, #4
    1b88:	d1fb      	bne.n	1b82 <_i2c_m_sync_transfer+0x66>
	void *             hw    = i2c_dev->hw;
    1b8a:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1b8c:	f8d7 9000 	ldr.w	r9, [r7]
	ASSERT(i2c_dev);
    1b90:	f240 52a5 	movw	r2, #1445	; 0x5a5
    1b94:	4998      	ldr	r1, [pc, #608]	; (1df8 <_i2c_m_sync_transfer+0x2dc>)
    1b96:	4640      	mov	r0, r8
    1b98:	4b96      	ldr	r3, [pc, #600]	; (1df4 <_i2c_m_sync_transfer+0x2d8>)
    1b9a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1b9c:	686b      	ldr	r3, [r5, #4]
    1b9e:	2b01      	cmp	r3, #1
    1ba0:	d05e      	beq.n	1c60 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1ba8:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1baa:	69fb      	ldr	r3, [r7, #28]
    1bac:	f013 0f04 	tst.w	r3, #4
    1bb0:	d1fb      	bne.n	1baa <_i2c_m_sync_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    1bb2:	882b      	ldrh	r3, [r5, #0]
    1bb4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1bb8:	d05e      	beq.n	1c78 <_i2c_m_sync_transfer+0x15c>
		if (msg->flags & I2C_M_RD) {
    1bba:	886a      	ldrh	r2, [r5, #2]
    1bbc:	f012 0f01 	tst.w	r2, #1
    1bc0:	d004      	beq.n	1bcc <_i2c_m_sync_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    1bc2:	886a      	ldrh	r2, [r5, #2]
    1bc4:	b292      	uxth	r2, r2
    1bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1bca:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1bcc:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1bd0:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    1bd4:	69fb      	ldr	r3, [r7, #28]
    1bd6:	f013 0f04 	tst.w	r3, #4
    1bda:	d1fb      	bne.n	1bd4 <_i2c_m_sync_transfer+0xb8>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1be6:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1be8:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1bea:	69fb      	ldr	r3, [r7, #28]
    1bec:	f013 0f04 	tst.w	r3, #4
    1bf0:	d1fb      	bne.n	1bea <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    1bf2:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1bf4:	7e0b      	ldrb	r3, [r1, #24]
    1bf6:	b2db      	uxtb	r3, r3
    1bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1bfc:	f013 0f03 	tst.w	r3, #3
    1c00:	d103      	bne.n	1c0a <_i2c_m_sync_transfer+0xee>
    1c02:	7e0b      	ldrb	r3, [r1, #24]
    1c04:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    1c06:	3a01      	subs	r2, #1
    1c08:	d1f8      	bne.n	1bfc <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1c0a:	6839      	ldr	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c0c:	69fa      	ldr	r2, [r7, #28]
    1c0e:	f012 0f04 	tst.w	r2, #4
    1c12:	d1fb      	bne.n	1c0c <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1c14:	8b7a      	ldrh	r2, [r7, #26]
    1c16:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1c18:	f013 0f01 	tst.w	r3, #1
    1c1c:	f000 80a3 	beq.w	1d66 <_i2c_m_sync_transfer+0x24a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1c20:	f012 0f02 	tst.w	r2, #2
    1c24:	d03c      	beq.n	1ca0 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1c26:	2301      	movs	r3, #1
    1c28:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    1c2a:	886b      	ldrh	r3, [r5, #2]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1c32:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1c34:	886b      	ldrh	r3, [r5, #2]
    1c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1c3a:	041b      	lsls	r3, r3, #16
    1c3c:	0c1b      	lsrs	r3, r3, #16
    1c3e:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1c40:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    1c44:	2a00      	cmp	r2, #0
    1c46:	bf14      	ite	ne
    1c48:	f06f 0004 	mvnne.w	r0, #4
    1c4c:	f06f 0003 	mvneq.w	r0, #3
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1c50:	886b      	ldrh	r3, [r5, #2]
    1c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1c56:	041b      	lsls	r3, r3, #16
    1c58:	0c1b      	lsrs	r3, r3, #16
    1c5a:	806b      	strh	r3, [r5, #2]
		return ret;
    1c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (msg->len == 1 && sclsm) {
    1c60:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
    1c64:	d09d      	beq.n	1ba2 <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1c6c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c6e:	69fb      	ldr	r3, [r7, #28]
    1c70:	f013 0f04 	tst.w	r3, #4
    1c74:	d1fb      	bne.n	1c6e <_i2c_m_sync_transfer+0x152>
    1c76:	e79c      	b.n	1bb2 <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1c78:	8869      	ldrh	r1, [r5, #2]
    1c7a:	005a      	lsls	r2, r3, #1
    1c7c:	b2d2      	uxtb	r2, r2
    1c7e:	f001 0301 	and.w	r3, r1, #1
    1c82:	431a      	orrs	r2, r3
    1c84:	69fb      	ldr	r3, [r7, #28]
    1c86:	f013 0f04 	tst.w	r3, #4
    1c8a:	d1fb      	bne.n	1c84 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1c92:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1c94:	627a      	str	r2, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c96:	69fb      	ldr	r3, [r7, #28]
    1c98:	f013 0f04 	tst.w	r3, #4
    1c9c:	d1fb      	bne.n	1c96 <_i2c_m_sync_transfer+0x17a>
    1c9e:	e7a8      	b.n	1bf2 <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1ca0:	f012 0f04 	tst.w	r2, #4
    1ca4:	d11d      	bne.n	1ce2 <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_TEN) {
    1ca6:	886b      	ldrh	r3, [r5, #2]
    1ca8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1cac:	d037      	beq.n	1d1e <_i2c_m_sync_transfer+0x202>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1cae:	882b      	ldrh	r3, [r5, #0]
    1cb0:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1cb2:	f003 0206 	and.w	r2, r3, #6
    1cb6:	69fb      	ldr	r3, [r7, #28]
    1cb8:	f013 0f04 	tst.w	r3, #4
    1cbc:	d1fb      	bne.n	1cb6 <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    1cc4:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    1cc8:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1cca:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ccc:	69fb      	ldr	r3, [r7, #28]
    1cce:	f013 0f04 	tst.w	r3, #4
    1cd2:	d1fb      	bne.n	1ccc <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    1cd4:	886b      	ldrh	r3, [r5, #2]
    1cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1cda:	041b      	lsls	r3, r3, #16
    1cdc:	0c1b      	lsrs	r3, r3, #16
    1cde:	806b      	strh	r3, [r5, #2]
    1ce0:	e069      	b.n	1db6 <_i2c_m_sync_transfer+0x29a>
				if (msg->len > 0) {
    1ce2:	686b      	ldr	r3, [r5, #4]
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	dd04      	ble.n	1cf2 <_i2c_m_sync_transfer+0x1d6>
					msg->flags |= I2C_M_FAIL;
    1ce8:	886b      	ldrh	r3, [r5, #2]
    1cea:	b29b      	uxth	r3, r3
    1cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1cf0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1cf2:	886b      	ldrh	r3, [r5, #2]
    1cf4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1cf8:	d108      	bne.n	1d0c <_i2c_m_sync_transfer+0x1f0>
				msg->flags &= ~I2C_M_BUSY;
    1cfa:	886b      	ldrh	r3, [r5, #2]
    1cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1d00:	041b      	lsls	r3, r3, #16
    1d02:	0c1b      	lsrs	r3, r3, #16
    1d04:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1d06:	f06f 0001 	mvn.w	r0, #1
    1d0a:	e7a1      	b.n	1c50 <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1d12:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d14:	69fb      	ldr	r3, [r7, #28]
    1d16:	f013 0f04 	tst.w	r3, #4
    1d1a:	d1fb      	bne.n	1d14 <_i2c_m_sync_transfer+0x1f8>
    1d1c:	e7ed      	b.n	1cfa <_i2c_m_sync_transfer+0x1de>
			if (msg->len == 0) {
    1d1e:	686b      	ldr	r3, [r5, #4]
    1d20:	b99b      	cbnz	r3, 1d4a <_i2c_m_sync_transfer+0x22e>
				if (msg->flags & I2C_M_STOP) {
    1d22:	886b      	ldrh	r3, [r5, #2]
    1d24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1d28:	d106      	bne.n	1d38 <_i2c_m_sync_transfer+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    1d2a:	886b      	ldrh	r3, [r5, #2]
    1d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1d30:	041b      	lsls	r3, r3, #16
    1d32:	0c1b      	lsrs	r3, r3, #16
    1d34:	806b      	strh	r3, [r5, #2]
    1d36:	e03e      	b.n	1db6 <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1d3e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d40:	69fb      	ldr	r3, [r7, #28]
    1d42:	f013 0f04 	tst.w	r3, #4
    1d46:	d1fb      	bne.n	1d40 <_i2c_m_sync_transfer+0x224>
    1d48:	e7ef      	b.n	1d2a <_i2c_m_sync_transfer+0x20e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1d4a:	68ab      	ldr	r3, [r5, #8]
    1d4c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d50:	69fb      	ldr	r3, [r7, #28]
    1d52:	f013 0f04 	tst.w	r3, #4
    1d56:	d1fb      	bne.n	1d50 <_i2c_m_sync_transfer+0x234>
				msg->buffer++;
    1d58:	68ab      	ldr	r3, [r5, #8]
    1d5a:	3301      	adds	r3, #1
    1d5c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1d5e:	686b      	ldr	r3, [r5, #4]
    1d60:	3b01      	subs	r3, #1
    1d62:	606b      	str	r3, [r5, #4]
    1d64:	e027      	b.n	1db6 <_i2c_m_sync_transfer+0x29a>
	} else if (flags & SB_FLAG) {
    1d66:	f013 0f02 	tst.w	r3, #2
    1d6a:	d024      	beq.n	1db6 <_i2c_m_sync_transfer+0x29a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1d6c:	686b      	ldr	r3, [r5, #4]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d03a      	beq.n	1de8 <_i2c_m_sync_transfer+0x2cc>
    1d72:	f012 0f04 	tst.w	r2, #4
    1d76:	d137      	bne.n	1de8 <_i2c_m_sync_transfer+0x2cc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1d78:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    1d7c:	3b01      	subs	r3, #1
    1d7e:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1d80:	2b00      	cmp	r3, #0
    1d82:	f040 810d 	bne.w	1fa0 <_i2c_m_sync_transfer+0x484>
    1d86:	2900      	cmp	r1, #0
    1d88:	f000 8110 	beq.w	1fac <_i2c_m_sync_transfer+0x490>
				if (msg->flags & I2C_M_STOP) {
    1d8c:	886b      	ldrh	r3, [r5, #2]
    1d8e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1d92:	d118      	bne.n	1dc6 <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    1d94:	886b      	ldrh	r3, [r5, #2]
    1d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1d9a:	041b      	lsls	r3, r3, #16
    1d9c:	0c1b      	lsrs	r3, r3, #16
    1d9e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1da0:	68aa      	ldr	r2, [r5, #8]
    1da2:	1c53      	adds	r3, r2, #1
    1da4:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1da6:	69fb      	ldr	r3, [r7, #28]
    1da8:	f013 0f04 	tst.w	r3, #4
    1dac:	d1fb      	bne.n	1da6 <_i2c_m_sync_transfer+0x28a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1db0:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1db2:	2302      	movs	r3, #2
    1db4:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    1db6:	2200      	movs	r2, #0
	return I2C_OK;
    1db8:	4610      	mov	r0, r2
    1dba:	2702      	movs	r7, #2
			return I2C_NACK;
    1dbc:	f06f 0c01 	mvn.w	ip, #1
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1dc0:	f04f 0e01 	mov.w	lr, #1
    1dc4:	e0b0      	b.n	1f28 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1dc6:	687b      	ldr	r3, [r7, #4]
    1dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1dcc:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1dce:	69fb      	ldr	r3, [r7, #28]
    1dd0:	f013 0f04 	tst.w	r3, #4
    1dd4:	d1fb      	bne.n	1dce <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1ddc:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1dde:	69fb      	ldr	r3, [r7, #28]
    1de0:	f013 0f04 	tst.w	r3, #4
    1de4:	d1fb      	bne.n	1dde <_i2c_m_sync_transfer+0x2c2>
    1de6:	e7d5      	b.n	1d94 <_i2c_m_sync_transfer+0x278>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1de8:	2302      	movs	r3, #2
    1dea:	763b      	strb	r3, [r7, #24]
    1dec:	f06f 0001 	mvn.w	r0, #1
    1df0:	e72e      	b.n	1c50 <_i2c_m_sync_transfer+0x134>
    1df2:	bf00      	nop
    1df4:	00001291 	.word	0x00001291
    1df8:	00004670 	.word	0x00004670
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1dfc:	6863      	ldr	r3, [r4, #4]
    1dfe:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1e02:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e04:	69e3      	ldr	r3, [r4, #28]
    1e06:	f013 0f04 	tst.w	r3, #4
    1e0a:	d1fb      	bne.n	1e04 <_i2c_m_sync_transfer+0x2e8>
    1e0c:	e0a1      	b.n	1f52 <_i2c_m_sync_transfer+0x436>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1e0e:	f012 0f04 	tst.w	r2, #4
    1e12:	d11e      	bne.n	1e52 <_i2c_m_sync_transfer+0x336>
			if (msg->flags & I2C_M_TEN) {
    1e14:	886b      	ldrh	r3, [r5, #2]
    1e16:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1e1a:	d037      	beq.n	1e8c <_i2c_m_sync_transfer+0x370>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1e1c:	882b      	ldrh	r3, [r5, #0]
    1e1e:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1e20:	f003 0206 	and.w	r2, r3, #6
    1e24:	69e3      	ldr	r3, [r4, #28]
    1e26:	f013 0f04 	tst.w	r3, #4
    1e2a:	d1fb      	bne.n	1e24 <_i2c_m_sync_transfer+0x308>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    1e32:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    1e36:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1e38:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e3a:	69e3      	ldr	r3, [r4, #28]
    1e3c:	f013 0f04 	tst.w	r3, #4
    1e40:	d1fb      	bne.n	1e3a <_i2c_m_sync_transfer+0x31e>
				msg->flags &= ~I2C_M_TEN;
    1e42:	886b      	ldrh	r3, [r5, #2]
    1e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1e48:	041b      	lsls	r3, r3, #16
    1e4a:	0c1b      	lsrs	r3, r3, #16
    1e4c:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1e4e:	4602      	mov	r2, r0
    1e50:	e06a      	b.n	1f28 <_i2c_m_sync_transfer+0x40c>
				if (msg->len > 0) {
    1e52:	686b      	ldr	r3, [r5, #4]
    1e54:	2b00      	cmp	r3, #0
    1e56:	dd04      	ble.n	1e62 <_i2c_m_sync_transfer+0x346>
					msg->flags |= I2C_M_FAIL;
    1e58:	886b      	ldrh	r3, [r5, #2]
    1e5a:	b29b      	uxth	r3, r3
    1e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1e60:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1e62:	886b      	ldrh	r3, [r5, #2]
    1e64:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1e68:	d107      	bne.n	1e7a <_i2c_m_sync_transfer+0x35e>
				msg->flags &= ~I2C_M_BUSY;
    1e6a:	886b      	ldrh	r3, [r5, #2]
    1e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1e70:	041b      	lsls	r3, r3, #16
    1e72:	0c1b      	lsrs	r3, r3, #16
    1e74:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1e76:	4662      	mov	r2, ip
    1e78:	e056      	b.n	1f28 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1e7a:	6863      	ldr	r3, [r4, #4]
    1e7c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1e80:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e82:	69e3      	ldr	r3, [r4, #28]
    1e84:	f013 0f04 	tst.w	r3, #4
    1e88:	d1fb      	bne.n	1e82 <_i2c_m_sync_transfer+0x366>
    1e8a:	e7ee      	b.n	1e6a <_i2c_m_sync_transfer+0x34e>
			if (msg->len == 0) {
    1e8c:	686b      	ldr	r3, [r5, #4]
    1e8e:	b9a3      	cbnz	r3, 1eba <_i2c_m_sync_transfer+0x39e>
				if (msg->flags & I2C_M_STOP) {
    1e90:	886b      	ldrh	r3, [r5, #2]
    1e92:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1e96:	d107      	bne.n	1ea8 <_i2c_m_sync_transfer+0x38c>
				msg->flags &= ~I2C_M_BUSY;
    1e98:	886b      	ldrh	r3, [r5, #2]
    1e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1e9e:	041b      	lsls	r3, r3, #16
    1ea0:	0c1b      	lsrs	r3, r3, #16
    1ea2:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    1ea4:	4602      	mov	r2, r0
    1ea6:	e03f      	b.n	1f28 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1ea8:	6863      	ldr	r3, [r4, #4]
    1eaa:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1eae:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1eb0:	69e3      	ldr	r3, [r4, #28]
    1eb2:	f013 0f04 	tst.w	r3, #4
    1eb6:	d1fb      	bne.n	1eb0 <_i2c_m_sync_transfer+0x394>
    1eb8:	e7ee      	b.n	1e98 <_i2c_m_sync_transfer+0x37c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1eba:	68ab      	ldr	r3, [r5, #8]
    1ebc:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1ebe:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ec0:	69e3      	ldr	r3, [r4, #28]
    1ec2:	f013 0f04 	tst.w	r3, #4
    1ec6:	d1fb      	bne.n	1ec0 <_i2c_m_sync_transfer+0x3a4>
				msg->buffer++;
    1ec8:	68ab      	ldr	r3, [r5, #8]
    1eca:	3301      	adds	r3, #1
    1ecc:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1ece:	686b      	ldr	r3, [r5, #4]
    1ed0:	3b01      	subs	r3, #1
    1ed2:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1ed4:	4602      	mov	r2, r0
    1ed6:	e027      	b.n	1f28 <_i2c_m_sync_transfer+0x40c>
	} else if (flags & SB_FLAG) {
    1ed8:	f013 0f02 	tst.w	r3, #2
    1edc:	d057      	beq.n	1f8e <_i2c_m_sync_transfer+0x472>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1ede:	686b      	ldr	r3, [r5, #4]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d051      	beq.n	1f88 <_i2c_m_sync_transfer+0x46c>
    1ee4:	f012 0f04 	tst.w	r2, #4
    1ee8:	d14e      	bne.n	1f88 <_i2c_m_sync_transfer+0x46c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1eea:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    1eee:	3b01      	subs	r3, #1
    1ef0:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	f040 808c 	bne.w	2010 <_i2c_m_sync_transfer+0x4f4>
    1ef8:	2900      	cmp	r1, #0
    1efa:	f000 808f 	beq.w	201c <_i2c_m_sync_transfer+0x500>
				if (msg->flags & I2C_M_STOP) {
    1efe:	886b      	ldrh	r3, [r5, #2]
    1f00:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1f04:	d12f      	bne.n	1f66 <_i2c_m_sync_transfer+0x44a>
				msg->flags &= ~I2C_M_BUSY;
    1f06:	886b      	ldrh	r3, [r5, #2]
    1f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f0c:	041b      	lsls	r3, r3, #16
    1f0e:	0c1b      	lsrs	r3, r3, #16
    1f10:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1f12:	68aa      	ldr	r2, [r5, #8]
    1f14:	1c53      	adds	r3, r2, #1
    1f16:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f18:	69e3      	ldr	r3, [r4, #28]
    1f1a:	f013 0f04 	tst.w	r3, #4
    1f1e:	d1fb      	bne.n	1f18 <_i2c_m_sync_transfer+0x3fc>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1f20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f22:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f24:	7627      	strb	r7, [r4, #24]
	return I2C_OK;
    1f26:	4602      	mov	r2, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1f28:	886b      	ldrh	r3, [r5, #2]
    1f2a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1f2e:	d030      	beq.n	1f92 <_i2c_m_sync_transfer+0x476>
	void *   hw      = i2c_dev->hw;
    1f30:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1f32:	7e0b      	ldrb	r3, [r1, #24]
    1f34:	b2db      	uxtb	r3, r3
    1f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1f3a:	f013 0f03 	tst.w	r3, #3
    1f3e:	d142      	bne.n	1fc6 <_i2c_m_sync_transfer+0x4aa>
    1f40:	7e0b      	ldrb	r3, [r1, #24]
    1f42:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    1f44:	3a01      	subs	r2, #1
    1f46:	d1f8      	bne.n	1f3a <_i2c_m_sync_transfer+0x41e>
			if (msg->flags & I2C_M_STOP) {
    1f48:	8873      	ldrh	r3, [r6, #2]
    1f4a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1f4e:	f47f af55 	bne.w	1dfc <_i2c_m_sync_transfer+0x2e0>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1f52:	886b      	ldrh	r3, [r5, #2]
    1f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f58:	041b      	lsls	r3, r3, #16
    1f5a:	0c1b      	lsrs	r3, r3, #16
    1f5c:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    1f5e:	f06f 0004 	mvn.w	r0, #4
			return ret;
    1f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1f66:	6863      	ldr	r3, [r4, #4]
    1f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f6c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f6e:	69e3      	ldr	r3, [r4, #28]
    1f70:	f013 0f04 	tst.w	r3, #4
    1f74:	d1fb      	bne.n	1f6e <_i2c_m_sync_transfer+0x452>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1f76:	6863      	ldr	r3, [r4, #4]
    1f78:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1f7c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f7e:	69e3      	ldr	r3, [r4, #28]
    1f80:	f013 0f04 	tst.w	r3, #4
    1f84:	d1fb      	bne.n	1f7e <_i2c_m_sync_transfer+0x462>
    1f86:	e7be      	b.n	1f06 <_i2c_m_sync_transfer+0x3ea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f88:	7627      	strb	r7, [r4, #24]
			return I2C_NACK;
    1f8a:	4662      	mov	r2, ip
    1f8c:	e7cc      	b.n	1f28 <_i2c_m_sync_transfer+0x40c>
	return I2C_OK;
    1f8e:	4602      	mov	r2, r0
    1f90:	e7ca      	b.n	1f28 <_i2c_m_sync_transfer+0x40c>
    1f92:	4610      	mov	r0, r2
    1f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return I2C_ERR_BUSY;
    1f98:	f06f 0005 	mvn.w	r0, #5
    1f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1fa0:	2b01      	cmp	r3, #1
    1fa2:	f47f aefd 	bne.w	1da0 <_i2c_m_sync_transfer+0x284>
    1fa6:	2900      	cmp	r1, #0
    1fa8:	f43f aefa 	beq.w	1da0 <_i2c_m_sync_transfer+0x284>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1fb2:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fb4:	69fb      	ldr	r3, [r7, #28]
    1fb6:	f013 0f04 	tst.w	r3, #4
    1fba:	d1fb      	bne.n	1fb4 <_i2c_m_sync_transfer+0x498>
			if (msg->len == 0) {
    1fbc:	686b      	ldr	r3, [r5, #4]
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	f43f aee4 	beq.w	1d8c <_i2c_m_sync_transfer+0x270>
    1fc4:	e6ec      	b.n	1da0 <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1fc6:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fc8:	69e2      	ldr	r2, [r4, #28]
    1fca:	f012 0f04 	tst.w	r2, #4
    1fce:	d1fb      	bne.n	1fc8 <_i2c_m_sync_transfer+0x4ac>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1fd0:	8b62      	ldrh	r2, [r4, #26]
    1fd2:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1fd4:	f013 0f01 	tst.w	r3, #1
    1fd8:	f43f af7e 	beq.w	1ed8 <_i2c_m_sync_transfer+0x3bc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1fdc:	f012 0f02 	tst.w	r2, #2
    1fe0:	f43f af15 	beq.w	1e0e <_i2c_m_sync_transfer+0x2f2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1fe4:	f884 e018 	strb.w	lr, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1fe8:	886b      	ldrh	r3, [r5, #2]
    1fea:	b29b      	uxth	r3, r3
    1fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1ff0:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1ff2:	886b      	ldrh	r3, [r5, #2]
    1ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1ff8:	041b      	lsls	r3, r3, #16
    1ffa:	0c1b      	lsrs	r3, r3, #16
    1ffc:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1ffe:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    2002:	2a00      	cmp	r2, #0
    2004:	bf14      	ite	ne
    2006:	f06f 0204 	mvnne.w	r2, #4
    200a:	f06f 0203 	mvneq.w	r2, #3
    200e:	e78b      	b.n	1f28 <_i2c_m_sync_transfer+0x40c>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2010:	2b01      	cmp	r3, #1
    2012:	f47f af7e 	bne.w	1f12 <_i2c_m_sync_transfer+0x3f6>
    2016:	2900      	cmp	r1, #0
    2018:	f43f af7b 	beq.w	1f12 <_i2c_m_sync_transfer+0x3f6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    201c:	6863      	ldr	r3, [r4, #4]
    201e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2022:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2024:	69e3      	ldr	r3, [r4, #28]
    2026:	f013 0f04 	tst.w	r3, #4
    202a:	d1fb      	bne.n	2024 <_i2c_m_sync_transfer+0x508>
			if (msg->len == 0) {
    202c:	686b      	ldr	r3, [r5, #4]
    202e:	2b00      	cmp	r3, #0
    2030:	f43f af65 	beq.w	1efe <_i2c_m_sync_transfer+0x3e2>
    2034:	e76d      	b.n	1f12 <_i2c_m_sync_transfer+0x3f6>
    2036:	bf00      	nop

00002038 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2038:	b570      	push	{r4, r5, r6, lr}
    203a:	4606      	mov	r6, r0
    203c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    203e:	4608      	mov	r0, r1
    2040:	4b5f      	ldr	r3, [pc, #380]	; (21c0 <_spi_m_sync_init+0x188>)
    2042:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2044:	2800      	cmp	r0, #0
    2046:	d072      	beq.n	212e <_spi_m_sync_init+0xf6>
    2048:	2801      	cmp	r0, #1
    204a:	d06e      	beq.n	212a <_spi_m_sync_init+0xf2>
    204c:	2804      	cmp	r0, #4
    204e:	bf08      	it	eq
    2050:	2502      	moveq	r5, #2
    2052:	d06d      	beq.n	2130 <_spi_m_sync_init+0xf8>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2054:	2e00      	cmp	r6, #0
    2056:	f000 80a1 	beq.w	219c <_spi_m_sync_init+0x164>
    205a:	2c00      	cmp	r4, #0
    205c:	f040 80a7 	bne.w	21ae <_spi_m_sync_init+0x176>
	return NULL;
    2060:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    2062:	2000      	movs	r0, #0
    2064:	f640 123c 	movw	r2, #2364	; 0x93c
    2068:	4956      	ldr	r1, [pc, #344]	; (21c4 <_spi_m_sync_init+0x18c>)
    206a:	4b57      	ldr	r3, [pc, #348]	; (21c8 <_spi_m_sync_init+0x190>)
    206c:	4798      	blx	r3

	if (regs == NULL) {
    206e:	2d00      	cmp	r5, #0
    2070:	f000 8091 	beq.w	2196 <_spi_m_sync_init+0x15e>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2074:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2076:	f013 0f01 	tst.w	r3, #1
    207a:	d11d      	bne.n	20b8 <_spi_m_sync_init+0x80>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    207c:	682b      	ldr	r3, [r5, #0]
    207e:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2082:	69e3      	ldr	r3, [r4, #28]
    2084:	f013 0f03 	tst.w	r3, #3
    2088:	d1fb      	bne.n	2082 <_spi_m_sync_init+0x4a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    208a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    208c:	f013 0f02 	tst.w	r3, #2
    2090:	d00b      	beq.n	20aa <_spi_m_sync_init+0x72>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2092:	6823      	ldr	r3, [r4, #0]
    2094:	f023 0302 	bic.w	r3, r3, #2
    2098:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    209a:	69e3      	ldr	r3, [r4, #28]
    209c:	f013 0f03 	tst.w	r3, #3
    20a0:	d1fb      	bne.n	209a <_spi_m_sync_init+0x62>
    20a2:	69e3      	ldr	r3, [r4, #28]
    20a4:	f013 0f02 	tst.w	r3, #2
    20a8:	d1fb      	bne.n	20a2 <_spi_m_sync_init+0x6a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    20aa:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    20ae:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    20b0:	69e3      	ldr	r3, [r4, #28]
    20b2:	f013 0f03 	tst.w	r3, #3
    20b6:	d1fb      	bne.n	20b0 <_spi_m_sync_init+0x78>
    20b8:	69e3      	ldr	r3, [r4, #28]
    20ba:	f013 0f01 	tst.w	r3, #1
    20be:	d1fb      	bne.n	20b8 <_spi_m_sync_init+0x80>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    20c0:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    20c2:	682b      	ldr	r3, [r5, #0]
    20c4:	f003 031c 	and.w	r3, r3, #28
    20c8:	2b08      	cmp	r3, #8
    20ca:	d03b      	beq.n	2144 <_spi_m_sync_init+0x10c>
	ASSERT(hw && regs);
    20cc:	f640 1206 	movw	r2, #2310	; 0x906
    20d0:	493c      	ldr	r1, [pc, #240]	; (21c4 <_spi_m_sync_init+0x18c>)
    20d2:	1c20      	adds	r0, r4, #0
    20d4:	bf18      	it	ne
    20d6:	2001      	movne	r0, #1
    20d8:	4b3b      	ldr	r3, [pc, #236]	; (21c8 <_spi_m_sync_init+0x190>)
    20da:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    20dc:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    20de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    20e2:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    20e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    20e8:	69e3      	ldr	r3, [r4, #28]
    20ea:	f013 0f03 	tst.w	r3, #3
    20ee:	d1fb      	bne.n	20e8 <_spi_m_sync_init+0xb0>
	    (regs->ctrlb
    20f0:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    20f2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    20f6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    20fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    20fe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2100:	69e3      	ldr	r3, [r4, #28]
    2102:	f013 0f17 	tst.w	r3, #23
    2106:	d1fb      	bne.n	2100 <_spi_m_sync_init+0xc8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2108:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    210a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    210c:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    210e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2112:	686b      	ldr	r3, [r5, #4]
    2114:	f003 0307 	and.w	r3, r3, #7
    2118:	2b00      	cmp	r3, #0
    211a:	bf0c      	ite	eq
    211c:	2301      	moveq	r3, #1
    211e:	2302      	movne	r3, #2
    2120:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2122:	89eb      	ldrh	r3, [r5, #14]
    2124:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2126:	2000      	movs	r0, #0
    2128:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    212a:	2501      	movs	r5, #1
    212c:	e000      	b.n	2130 <_spi_m_sync_init+0xf8>
    212e:	2500      	movs	r5, #0
			return &sercomspi_regs[i];
    2130:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    2134:	4b25      	ldr	r3, [pc, #148]	; (21cc <_spi_m_sync_init+0x194>)
    2136:	441d      	add	r5, r3
	ASSERT(dev && hw);
    2138:	2e00      	cmp	r6, #0
    213a:	d092      	beq.n	2062 <_spi_m_sync_init+0x2a>
    213c:	2001      	movs	r0, #1
    213e:	2c00      	cmp	r4, #0
    2140:	d190      	bne.n	2064 <_spi_m_sync_init+0x2c>
    2142:	e78e      	b.n	2062 <_spi_m_sync_init+0x2a>
	ASSERT(hw && regs);
    2144:	f640 121a 	movw	r2, #2330	; 0x91a
    2148:	491e      	ldr	r1, [pc, #120]	; (21c4 <_spi_m_sync_init+0x18c>)
    214a:	1c20      	adds	r0, r4, #0
    214c:	bf18      	it	ne
    214e:	2001      	movne	r0, #1
    2150:	4b1d      	ldr	r3, [pc, #116]	; (21c8 <_spi_m_sync_init+0x190>)
    2152:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2154:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2156:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    215a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    215e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2160:	69e3      	ldr	r3, [r4, #28]
    2162:	f013 0f03 	tst.w	r3, #3
    2166:	d1fb      	bne.n	2160 <_spi_m_sync_init+0x128>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2168:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    216a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    216e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    2172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2176:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    217a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    217c:	69e3      	ldr	r3, [r4, #28]
    217e:	f013 0f17 	tst.w	r3, #23
    2182:	d1fb      	bne.n	217c <_spi_m_sync_init+0x144>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2184:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2186:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2188:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    218a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    218e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2190:	2b00      	cmp	r3, #0
    2192:	d1fc      	bne.n	218e <_spi_m_sync_init+0x156>
    2194:	e7bd      	b.n	2112 <_spi_m_sync_init+0xda>
		return ERR_INVALID_ARG;
    2196:	f06f 000c 	mvn.w	r0, #12
    219a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    219c:	f640 123c 	movw	r2, #2364	; 0x93c
    21a0:	4908      	ldr	r1, [pc, #32]	; (21c4 <_spi_m_sync_init+0x18c>)
    21a2:	2000      	movs	r0, #0
    21a4:	4b08      	ldr	r3, [pc, #32]	; (21c8 <_spi_m_sync_init+0x190>)
    21a6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    21a8:	f06f 000c 	mvn.w	r0, #12
    21ac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    21ae:	f640 123c 	movw	r2, #2364	; 0x93c
    21b2:	4904      	ldr	r1, [pc, #16]	; (21c4 <_spi_m_sync_init+0x18c>)
    21b4:	2001      	movs	r0, #1
    21b6:	4b04      	ldr	r3, [pc, #16]	; (21c8 <_spi_m_sync_init+0x190>)
    21b8:	4798      	blx	r3
		return ERR_INVALID_ARG;
    21ba:	f06f 000c 	mvn.w	r0, #12
    21be:	bd70      	pop	{r4, r5, r6, pc}
    21c0:	000019a1 	.word	0x000019a1
    21c4:	00004670 	.word	0x00004670
    21c8:	00001291 	.word	0x00001291
    21cc:	0000463c 	.word	0x0000463c

000021d0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    21d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21d4:	4681      	mov	r9, r0
    21d6:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    21d8:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    21da:	f8d1 8000 	ldr.w	r8, [r1]
    21de:	684d      	ldr	r5, [r1, #4]
    21e0:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    21e2:	b1a8      	cbz	r0, 2210 <_spi_m_sync_trans+0x40>
    21e4:	1c20      	adds	r0, r4, #0
    21e6:	bf18      	it	ne
    21e8:	2001      	movne	r0, #1
    21ea:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    21ee:	492e      	ldr	r1, [pc, #184]	; (22a8 <_spi_m_sync_trans+0xd8>)
    21f0:	4b2e      	ldr	r3, [pc, #184]	; (22ac <_spi_m_sync_trans+0xdc>)
    21f2:	4798      	blx	r3
    21f4:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    21f6:	f013 0f07 	tst.w	r3, #7
    21fa:	d134      	bne.n	2266 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    21fc:	69e0      	ldr	r0, [r4, #28]
    21fe:	f010 0003 	ands.w	r0, r0, #3
    2202:	d1fb      	bne.n	21fc <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2204:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2206:	f013 0f02 	tst.w	r3, #2
    220a:	d030      	beq.n	226e <_spi_m_sync_trans+0x9e>
    220c:	4602      	mov	r2, r0
    220e:	e008      	b.n	2222 <_spi_m_sync_trans+0x52>
    2210:	2000      	movs	r0, #0
    2212:	e7ea      	b.n	21ea <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    2214:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2216:	f013 0f80 	tst.w	r3, #128	; 0x80
    221a:	d112      	bne.n	2242 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    221c:	68b3      	ldr	r3, [r6, #8]
    221e:	4283      	cmp	r3, r0
    2220:	d91e      	bls.n	2260 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2222:	7e23      	ldrb	r3, [r4, #24]
    2224:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2226:	f013 0f04 	tst.w	r3, #4
    222a:	d024      	beq.n	2276 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    222c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    222e:	2d00      	cmp	r5, #0
    2230:	d0f0      	beq.n	2214 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    2232:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    2234:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    2236:	bf91      	iteee	ls
    2238:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    223a:	0a09      	lsrhi	r1, r1, #8
    223c:	7069      	strbhi	r1, [r5, #1]
    223e:	3502      	addhi	r5, #2
    2240:	e7e8      	b.n	2214 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2242:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2246:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2248:	2380      	movs	r3, #128	; 0x80
    224a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    224c:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2250:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2252:	f013 0f03 	tst.w	r3, #3
    2256:	d0fb      	beq.n	2250 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2258:	2303      	movs	r3, #3
    225a:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    225c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2260:	4293      	cmp	r3, r2
    2262:	d8de      	bhi.n	2222 <_spi_m_sync_trans+0x52>
    2264:	e7f4      	b.n	2250 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    2266:	f06f 0003 	mvn.w	r0, #3
    226a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    226e:	f06f 0013 	mvn.w	r0, #19
    2272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2276:	4290      	cmp	r0, r2
    2278:	d8cd      	bhi.n	2216 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    227a:	f013 0f01 	tst.w	r3, #1
    227e:	d0ca      	beq.n	2216 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2280:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    2284:	f1b8 0f00 	cmp.w	r8, #0
    2288:	d00b      	beq.n	22a2 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    228a:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    228e:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    2290:	bf91      	iteee	ls
    2292:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    2296:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    229a:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    229e:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    22a2:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    22a4:	62a1      	str	r1, [r4, #40]	; 0x28
    22a6:	e7b6      	b.n	2216 <_spi_m_sync_trans+0x46>
    22a8:	00004670 	.word	0x00004670
    22ac:	00001291 	.word	0x00001291

000022b0 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    22b0:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    22b2:	6813      	ldr	r3, [r2, #0]
    22b4:	f043 0302 	orr.w	r3, r3, #2
    22b8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22ba:	6913      	ldr	r3, [r2, #16]
    22bc:	f013 0f03 	tst.w	r3, #3
    22c0:	d1fb      	bne.n	22ba <_tc_timer_start+0xa>
}
    22c2:	4770      	bx	lr

000022c4 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    22c4:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    22c6:	6813      	ldr	r3, [r2, #0]
    22c8:	f023 0302 	bic.w	r3, r3, #2
    22cc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22ce:	6913      	ldr	r3, [r2, #16]
    22d0:	f013 0f03 	tst.w	r3, #3
    22d4:	d1fb      	bne.n	22ce <_tc_timer_stop+0xa>
}
    22d6:	4770      	bx	lr

000022d8 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    22d8:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    22da:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    22dc:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22e0:	2a02      	cmp	r2, #2
    22e2:	d00a      	beq.n	22fa <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    22e4:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22e6:	f012 0f0c 	tst.w	r2, #12
    22ea:	d10c      	bne.n	2306 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    22ec:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    22ee:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22f0:	691a      	ldr	r2, [r3, #16]
    22f2:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    22f6:	d1fb      	bne.n	22f0 <_tc_timer_set_period+0x18>
    22f8:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    22fa:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22fc:	691a      	ldr	r2, [r3, #16]
    22fe:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    2302:	d1fb      	bne.n	22fc <_tc_timer_set_period+0x24>
    2304:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2306:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2308:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    230c:	2a01      	cmp	r2, #1
    230e:	d000      	beq.n	2312 <_tc_timer_set_period+0x3a>
    2310:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    2312:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    2314:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2316:	691a      	ldr	r2, [r3, #16]
    2318:	f012 0f20 	tst.w	r2, #32
    231c:	d1fb      	bne.n	2316 <_tc_timer_set_period+0x3e>
    231e:	e7f7      	b.n	2310 <_tc_timer_set_period+0x38>

00002320 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2320:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2322:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2324:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2328:	2a02      	cmp	r2, #2
    232a:	d00a      	beq.n	2342 <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    232c:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    232e:	f012 0f0c 	tst.w	r2, #12
    2332:	d10c      	bne.n	234e <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2334:	691a      	ldr	r2, [r3, #16]
    2336:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    233a:	d1fb      	bne.n	2334 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    233c:	8b98      	ldrh	r0, [r3, #28]
    233e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2340:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2342:	691a      	ldr	r2, [r3, #16]
    2344:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    2348:	d1fb      	bne.n	2342 <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    234a:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    234c:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    234e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2350:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2354:	2a01      	cmp	r2, #1
    2356:	d001      	beq.n	235c <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    2358:	2000      	movs	r0, #0
}
    235a:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    235c:	691a      	ldr	r2, [r3, #16]
    235e:	f012 0f20 	tst.w	r2, #32
    2362:	d1fb      	bne.n	235c <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    2364:	7ed8      	ldrb	r0, [r3, #27]
    2366:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    2368:	4770      	bx	lr

0000236a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    236a:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    236c:	6913      	ldr	r3, [r2, #16]
    236e:	f013 0f03 	tst.w	r3, #3
    2372:	d1fb      	bne.n	236c <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2374:	6810      	ldr	r0, [r2, #0]
}
    2376:	f3c0 0040 	ubfx	r0, r0, #1, #1
    237a:	4770      	bx	lr

0000237c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    237c:	b570      	push	{r4, r5, r6, lr}
    237e:	b088      	sub	sp, #32
    2380:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2382:	466c      	mov	r4, sp
    2384:	4d12      	ldr	r5, [pc, #72]	; (23d0 <get_tc_index+0x54>)
    2386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    238a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    238e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2392:	9b00      	ldr	r3, [sp, #0]
    2394:	42b3      	cmp	r3, r6
    2396:	d00b      	beq.n	23b0 <get_tc_index+0x34>
    2398:	4630      	mov	r0, r6
    239a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    239c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    239e:	f852 1b04 	ldr.w	r1, [r2], #4
    23a2:	4281      	cmp	r1, r0
    23a4:	d005      	beq.n	23b2 <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23a6:	3301      	adds	r3, #1
    23a8:	2b08      	cmp	r3, #8
    23aa:	d1f8      	bne.n	239e <get_tc_index+0x22>
			return i;
    23ac:	2000      	movs	r0, #0
    23ae:	e00b      	b.n	23c8 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23b0:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    23b2:	f013 0fff 	tst.w	r3, #255	; 0xff
    23b6:	d009      	beq.n	23cc <get_tc_index+0x50>
	ASSERT(false);
    23b8:	f240 1249 	movw	r2, #329	; 0x149
    23bc:	4905      	ldr	r1, [pc, #20]	; (23d4 <get_tc_index+0x58>)
    23be:	2000      	movs	r0, #0
    23c0:	4b05      	ldr	r3, [pc, #20]	; (23d8 <get_tc_index+0x5c>)
    23c2:	4798      	blx	r3
	return -1;
    23c4:	f04f 30ff 	mov.w	r0, #4294967295
}
    23c8:	b008      	add	sp, #32
    23ca:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    23cc:	2000      	movs	r0, #0
    23ce:	e7fb      	b.n	23c8 <get_tc_index+0x4c>
    23d0:	0000468c 	.word	0x0000468c
    23d4:	000046c0 	.word	0x000046c0
    23d8:	00001291 	.word	0x00001291

000023dc <_tc_timer_init>:
{
    23dc:	b570      	push	{r4, r5, r6, lr}
    23de:	4606      	mov	r6, r0
    23e0:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    23e2:	4608      	mov	r0, r1
    23e4:	4b60      	ldr	r3, [pc, #384]	; (2568 <_tc_timer_init+0x18c>)
    23e6:	4798      	blx	r3
    23e8:	4605      	mov	r5, r0
	device->hw = hw;
    23ea:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    23ec:	229a      	movs	r2, #154	; 0x9a
    23ee:	495f      	ldr	r1, [pc, #380]	; (256c <_tc_timer_init+0x190>)
    23f0:	2001      	movs	r0, #1
    23f2:	4b5f      	ldr	r3, [pc, #380]	; (2570 <_tc_timer_init+0x194>)
    23f4:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    23f6:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    23f8:	f013 0f01 	tst.w	r3, #1
    23fc:	d119      	bne.n	2432 <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    23fe:	6923      	ldr	r3, [r4, #16]
    2400:	f013 0f03 	tst.w	r3, #3
    2404:	d1fb      	bne.n	23fe <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2406:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2408:	f013 0f02 	tst.w	r3, #2
    240c:	d00b      	beq.n	2426 <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    240e:	6823      	ldr	r3, [r4, #0]
    2410:	f023 0302 	bic.w	r3, r3, #2
    2414:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2416:	6923      	ldr	r3, [r4, #16]
    2418:	f013 0f03 	tst.w	r3, #3
    241c:	d1fb      	bne.n	2416 <_tc_timer_init+0x3a>
    241e:	6923      	ldr	r3, [r4, #16]
    2420:	f013 0f02 	tst.w	r3, #2
    2424:	d1fb      	bne.n	241e <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2426:	2301      	movs	r3, #1
    2428:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    242a:	6923      	ldr	r3, [r4, #16]
    242c:	f013 0f03 	tst.w	r3, #3
    2430:	d1fb      	bne.n	242a <_tc_timer_init+0x4e>
    2432:	6923      	ldr	r3, [r4, #16]
    2434:	f013 0f01 	tst.w	r3, #1
    2438:	d1fb      	bne.n	2432 <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    243a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    243e:	4a4d      	ldr	r2, [pc, #308]	; (2574 <_tc_timer_init+0x198>)
    2440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2446:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2448:	6923      	ldr	r3, [r4, #16]
    244a:	f013 0f03 	tst.w	r3, #3
    244e:	d1fb      	bne.n	2448 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2450:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2454:	4947      	ldr	r1, [pc, #284]	; (2574 <_tc_timer_init+0x198>)
    2456:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    245a:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    245e:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2462:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2464:	2301      	movs	r3, #1
    2466:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2468:	f002 020c 	and.w	r2, r2, #12
    246c:	2a08      	cmp	r2, #8
    246e:	d048      	beq.n	2502 <_tc_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2470:	2a00      	cmp	r2, #0
    2472:	d158      	bne.n	2526 <_tc_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2474:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2478:	4a3e      	ldr	r2, [pc, #248]	; (2574 <_tc_timer_init+0x198>)
    247a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    247e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2480:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2482:	6923      	ldr	r3, [r4, #16]
    2484:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2488:	d1fb      	bne.n	2482 <_tc_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    248a:	2300      	movs	r3, #0
    248c:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    248e:	6923      	ldr	r3, [r4, #16]
    2490:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2494:	d1fb      	bne.n	248e <_tc_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2496:	2301      	movs	r3, #1
    2498:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    249a:	4b37      	ldr	r3, [pc, #220]	; (2578 <_tc_timer_init+0x19c>)
    249c:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    249e:	bf04      	itt	eq
    24a0:	4b36      	ldreq	r3, [pc, #216]	; (257c <_tc_timer_init+0x1a0>)
    24a2:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    24a4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    24a8:	4a32      	ldr	r2, [pc, #200]	; (2574 <_tc_timer_init+0x198>)
    24aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24ae:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    24b2:	2b00      	cmp	r3, #0
    24b4:	db23      	blt.n	24fe <_tc_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24b6:	095a      	lsrs	r2, r3, #5
    24b8:	f003 031f 	and.w	r3, r3, #31
    24bc:	2101      	movs	r1, #1
    24be:	fa01 f303 	lsl.w	r3, r1, r3
    24c2:	3220      	adds	r2, #32
    24c4:	492e      	ldr	r1, [pc, #184]	; (2580 <_tc_timer_init+0x1a4>)
    24c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    24ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24ce:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    24d2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    24d6:	4b27      	ldr	r3, [pc, #156]	; (2574 <_tc_timer_init+0x198>)
    24d8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    24dc:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    24e0:	2b00      	cmp	r3, #0
    24e2:	db0c      	blt.n	24fe <_tc_timer_init+0x122>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24e4:	0959      	lsrs	r1, r3, #5
    24e6:	f003 031f 	and.w	r3, r3, #31
    24ea:	2201      	movs	r2, #1
    24ec:	fa02 f303 	lsl.w	r3, r2, r3
    24f0:	4a23      	ldr	r2, [pc, #140]	; (2580 <_tc_timer_init+0x1a4>)
    24f2:	f101 0060 	add.w	r0, r1, #96	; 0x60
    24f6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    24fe:	2000      	movs	r0, #0
    2500:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2502:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2506:	4a1b      	ldr	r2, [pc, #108]	; (2574 <_tc_timer_init+0x198>)
    2508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    250e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2510:	6923      	ldr	r3, [r4, #16]
    2512:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2516:	d1fb      	bne.n	2510 <_tc_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2518:	2300      	movs	r3, #0
    251a:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    251c:	6923      	ldr	r3, [r4, #16]
    251e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2522:	d1fb      	bne.n	251c <_tc_timer_init+0x140>
    2524:	e7b7      	b.n	2496 <_tc_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2526:	2a04      	cmp	r2, #4
    2528:	d1b5      	bne.n	2496 <_tc_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    252a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    252e:	4a11      	ldr	r2, [pc, #68]	; (2574 <_tc_timer_init+0x198>)
    2530:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2534:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2538:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    253a:	6923      	ldr	r3, [r4, #16]
    253c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2540:	d1fb      	bne.n	253a <_tc_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2542:	2300      	movs	r3, #0
    2544:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2546:	6923      	ldr	r3, [r4, #16]
    2548:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    254c:	d1fb      	bne.n	2546 <_tc_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    254e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2552:	4a08      	ldr	r2, [pc, #32]	; (2574 <_tc_timer_init+0x198>)
    2554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2558:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    255c:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    255e:	6923      	ldr	r3, [r4, #16]
    2560:	f013 0f20 	tst.w	r3, #32
    2564:	d1fb      	bne.n	255e <_tc_timer_init+0x182>
    2566:	e796      	b.n	2496 <_tc_timer_init+0xba>
    2568:	0000237d 	.word	0x0000237d
    256c:	000046c0 	.word	0x000046c0
    2570:	00001291 	.word	0x00001291
    2574:	0000468c 	.word	0x0000468c
    2578:	40003800 	.word	0x40003800
    257c:	20000188 	.word	0x20000188
    2580:	e000e100 	.word	0xe000e100

00002584 <_tc_timer_deinit>:
{
    2584:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2586:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2588:	4620      	mov	r0, r4
    258a:	4b18      	ldr	r3, [pc, #96]	; (25ec <_tc_timer_deinit+0x68>)
    258c:	4798      	blx	r3
    258e:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2590:	22c7      	movs	r2, #199	; 0xc7
    2592:	4917      	ldr	r1, [pc, #92]	; (25f0 <_tc_timer_deinit+0x6c>)
    2594:	2001      	movs	r0, #1
    2596:	4b17      	ldr	r3, [pc, #92]	; (25f4 <_tc_timer_deinit+0x70>)
    2598:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    259a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    259e:	4b16      	ldr	r3, [pc, #88]	; (25f8 <_tc_timer_deinit+0x74>)
    25a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    25a4:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    25a8:	2b00      	cmp	r3, #0
    25aa:	db0d      	blt.n	25c8 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25ac:	095a      	lsrs	r2, r3, #5
    25ae:	f003 031f 	and.w	r3, r3, #31
    25b2:	2101      	movs	r1, #1
    25b4:	fa01 f303 	lsl.w	r3, r1, r3
    25b8:	3220      	adds	r2, #32
    25ba:	4910      	ldr	r1, [pc, #64]	; (25fc <_tc_timer_deinit+0x78>)
    25bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    25c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25c4:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    25c8:	6823      	ldr	r3, [r4, #0]
    25ca:	f023 0302 	bic.w	r3, r3, #2
    25ce:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25d0:	6923      	ldr	r3, [r4, #16]
    25d2:	f013 0f03 	tst.w	r3, #3
    25d6:	d1fb      	bne.n	25d0 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    25d8:	6823      	ldr	r3, [r4, #0]
    25da:	f043 0301 	orr.w	r3, r3, #1
    25de:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25e0:	6923      	ldr	r3, [r4, #16]
    25e2:	f013 0f01 	tst.w	r3, #1
    25e6:	d1fb      	bne.n	25e0 <_tc_timer_deinit+0x5c>
}
    25e8:	bd38      	pop	{r3, r4, r5, pc}
    25ea:	bf00      	nop
    25ec:	0000237d 	.word	0x0000237d
    25f0:	000046c0 	.word	0x000046c0
    25f4:	00001291 	.word	0x00001291
    25f8:	0000468c 	.word	0x0000468c
    25fc:	e000e100 	.word	0xe000e100

00002600 <_tc_timer_set_irq>:
{
    2600:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2602:	68c0      	ldr	r0, [r0, #12]
    2604:	4b09      	ldr	r3, [pc, #36]	; (262c <_tc_timer_set_irq+0x2c>)
    2606:	4798      	blx	r3
    2608:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    260a:	f44f 728e 	mov.w	r2, #284	; 0x11c
    260e:	4908      	ldr	r1, [pc, #32]	; (2630 <_tc_timer_set_irq+0x30>)
    2610:	2001      	movs	r0, #1
    2612:	4b08      	ldr	r3, [pc, #32]	; (2634 <_tc_timer_set_irq+0x34>)
    2614:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2616:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    261a:	4b07      	ldr	r3, [pc, #28]	; (2638 <_tc_timer_set_irq+0x38>)
    261c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2620:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    2624:	4b05      	ldr	r3, [pc, #20]	; (263c <_tc_timer_set_irq+0x3c>)
    2626:	4798      	blx	r3
    2628:	bd10      	pop	{r4, pc}
    262a:	bf00      	nop
    262c:	0000237d 	.word	0x0000237d
    2630:	000046c0 	.word	0x000046c0
    2634:	00001291 	.word	0x00001291
    2638:	0000468c 	.word	0x0000468c
    263c:	000014c1 	.word	0x000014c1

00002640 <_tc_get_timer>:
}
    2640:	4800      	ldr	r0, [pc, #0]	; (2644 <_tc_get_timer+0x4>)
    2642:	4770      	bx	lr
    2644:	20000034 	.word	0x20000034

00002648 <TC0_Handler>:
{
    2648:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    264a:	4b06      	ldr	r3, [pc, #24]	; (2664 <TC0_Handler+0x1c>)
    264c:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    264e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2650:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2652:	f012 0f01 	tst.w	r2, #1
    2656:	d100      	bne.n	265a <TC0_Handler+0x12>
    2658:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    265a:	2201      	movs	r2, #1
    265c:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    265e:	6803      	ldr	r3, [r0, #0]
    2660:	4798      	blx	r3
}
    2662:	e7f9      	b.n	2658 <TC0_Handler+0x10>
    2664:	20000188 	.word	0x20000188

00002668 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2668:	2000      	movs	r0, #0
    266a:	4770      	bx	lr

0000266c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    266c:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    266e:	7c83      	ldrb	r3, [r0, #18]
    2670:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2674:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    2676:	f002 0107 	and.w	r1, r2, #7
    267a:	2901      	cmp	r1, #1
    267c:	d00b      	beq.n	2696 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    267e:	015a      	lsls	r2, r3, #5
    2680:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2684:	2110      	movs	r1, #16
    2686:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    268a:	015b      	lsls	r3, r3, #5
    268c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2690:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    2694:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    2696:	f012 0f40 	tst.w	r2, #64	; 0x40
    269a:	d00c      	beq.n	26b6 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    269c:	7cc2      	ldrb	r2, [r0, #19]
    269e:	f36f 1286 	bfc	r2, #6, #1
    26a2:	74c2      	strb	r2, [r0, #19]
    26a4:	015a      	lsls	r2, r3, #5
    26a6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    26aa:	2180      	movs	r1, #128	; 0x80
    26ac:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    26b0:	2140      	movs	r1, #64	; 0x40
    26b2:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    26b6:	7cc2      	ldrb	r2, [r0, #19]
    26b8:	f36f 02c3 	bfc	r2, #3, #1
    26bc:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    26be:	4909      	ldr	r1, [pc, #36]	; (26e4 <_usb_d_dev_handle_setup+0x78>)
    26c0:	015a      	lsls	r2, r3, #5
    26c2:	188c      	adds	r4, r1, r2
    26c4:	2500      	movs	r5, #0
    26c6:	72a5      	strb	r5, [r4, #10]
    26c8:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    26ca:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    26ce:	246f      	movs	r4, #111	; 0x6f
    26d0:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    26d4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    26d8:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    26dc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    26de:	7c80      	ldrb	r0, [r0, #18]
    26e0:	4798      	blx	r3
    26e2:	bd38      	pop	{r3, r4, r5, pc}
    26e4:	2000018c 	.word	0x2000018c

000026e8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    26e8:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    26ea:	2320      	movs	r3, #32
    26ec:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    26f0:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    26f2:	7c83      	ldrb	r3, [r0, #18]
    26f4:	f003 030f 	and.w	r3, r3, #15
    26f8:	015b      	lsls	r3, r3, #5
    26fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    26fe:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2702:	4b03      	ldr	r3, [pc, #12]	; (2710 <_usb_d_dev_handle_stall+0x28>)
    2704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2706:	6882      	ldr	r2, [r0, #8]
    2708:	2101      	movs	r1, #1
    270a:	7c80      	ldrb	r0, [r0, #18]
    270c:	4798      	blx	r3
    270e:	bd08      	pop	{r3, pc}
    2710:	2000018c 	.word	0x2000018c

00002714 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2714:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2716:	7c84      	ldrb	r4, [r0, #18]
    2718:	2cff      	cmp	r4, #255	; 0xff
    271a:	d003      	beq.n	2724 <_usb_d_dev_trans_done+0x10>
    271c:	7cc3      	ldrb	r3, [r0, #19]
    271e:	f013 0f40 	tst.w	r3, #64	; 0x40
    2722:	d100      	bne.n	2726 <_usb_d_dev_trans_done+0x12>
    2724:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    2726:	7cc2      	ldrb	r2, [r0, #19]
    2728:	f36f 1286 	bfc	r2, #6, #1
    272c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    272e:	4a03      	ldr	r2, [pc, #12]	; (273c <_usb_d_dev_trans_done+0x28>)
    2730:	6f15      	ldr	r5, [r2, #112]	; 0x70
    2732:	6882      	ldr	r2, [r0, #8]
    2734:	4620      	mov	r0, r4
    2736:	47a8      	blx	r5
    2738:	e7f4      	b.n	2724 <_usb_d_dev_trans_done+0x10>
    273a:	bf00      	nop
    273c:	2000018c 	.word	0x2000018c

00002740 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2740:	b530      	push	{r4, r5, lr}
    2742:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2744:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2746:	2425      	movs	r4, #37	; 0x25
    2748:	f88d 4004 	strb.w	r4, [sp, #4]
    274c:	244a      	movs	r4, #74	; 0x4a
    274e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2752:	2bff      	cmp	r3, #255	; 0xff
    2754:	d01e      	beq.n	2794 <_usb_d_dev_trans_stop+0x54>
    2756:	7cc4      	ldrb	r4, [r0, #19]
    2758:	f014 0f40 	tst.w	r4, #64	; 0x40
    275c:	d01a      	beq.n	2794 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    275e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    2762:	b1c9      	cbz	r1, 2798 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2764:	0163      	lsls	r3, r4, #5
    2766:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    276a:	2580      	movs	r5, #128	; 0x80
    276c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2770:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2772:	a902      	add	r1, sp, #8
    2774:	440b      	add	r3, r1
    2776:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    277a:	0163      	lsls	r3, r4, #5
    277c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2780:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2784:	0163      	lsls	r3, r4, #5
    2786:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    278a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    278e:	4611      	mov	r1, r2
    2790:	4b05      	ldr	r3, [pc, #20]	; (27a8 <_usb_d_dev_trans_stop+0x68>)
    2792:	4798      	blx	r3
}
    2794:	b003      	add	sp, #12
    2796:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2798:	0163      	lsls	r3, r4, #5
    279a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    279e:	2540      	movs	r5, #64	; 0x40
    27a0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    27a4:	e7e4      	b.n	2770 <_usb_d_dev_trans_stop+0x30>
    27a6:	bf00      	nop
    27a8:	00002715 	.word	0x00002715

000027ac <_usb_d_dev_handle_trfail>:
{
    27ac:	b530      	push	{r4, r5, lr}
    27ae:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    27b0:	7c83      	ldrb	r3, [r0, #18]
    27b2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    27b6:	2204      	movs	r2, #4
    27b8:	f88d 2004 	strb.w	r2, [sp, #4]
    27bc:	2208      	movs	r2, #8
    27be:	f88d 2005 	strb.w	r2, [sp, #5]
    27c2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    27c4:	460c      	mov	r4, r1
    27c6:	b391      	cbz	r1, 282e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    27c8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    27cc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    27d0:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    27d4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    27d8:	4a32      	ldr	r2, [pc, #200]	; (28a4 <_usb_d_dev_handle_trfail+0xf8>)
    27da:	440a      	add	r2, r1
    27dc:	7a91      	ldrb	r1, [r2, #10]
    27de:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    27e0:	2d02      	cmp	r5, #2
    27e2:	d02c      	beq.n	283e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    27e4:	f011 0f02 	tst.w	r1, #2
    27e8:	d045      	beq.n	2876 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    27ea:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    27ec:	7a91      	ldrb	r1, [r2, #10]
    27ee:	f36f 0141 	bfc	r1, #1, #1
    27f2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    27f4:	aa02      	add	r2, sp, #8
    27f6:	4422      	add	r2, r4
    27f8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    27fc:	015a      	lsls	r2, r3, #5
    27fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2802:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2806:	015b      	lsls	r3, r3, #5
    2808:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    280c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2810:	f005 0307 	and.w	r3, r5, #7
    2814:	2b01      	cmp	r3, #1
    2816:	d143      	bne.n	28a0 <_usb_d_dev_handle_trfail+0xf4>
    2818:	7cc3      	ldrb	r3, [r0, #19]
    281a:	f013 0f40 	tst.w	r3, #64	; 0x40
    281e:	d03f      	beq.n	28a0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2820:	09d9      	lsrs	r1, r3, #7
    2822:	428c      	cmp	r4, r1
    2824:	d03c      	beq.n	28a0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2826:	2200      	movs	r2, #0
    2828:	4b1f      	ldr	r3, [pc, #124]	; (28a8 <_usb_d_dev_handle_trfail+0xfc>)
    282a:	4798      	blx	r3
    282c:	e038      	b.n	28a0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    282e:	0159      	lsls	r1, r3, #5
    2830:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2834:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2838:	f005 0507 	and.w	r5, r5, #7
    283c:	e7ca      	b.n	27d4 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    283e:	f011 0f01 	tst.w	r1, #1
    2842:	d0cf      	beq.n	27e4 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2844:	7a91      	ldrb	r1, [r2, #10]
    2846:	f36f 0100 	bfc	r1, #0, #1
    284a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    284c:	aa02      	add	r2, sp, #8
    284e:	4422      	add	r2, r4
    2850:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2854:	015a      	lsls	r2, r3, #5
    2856:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    285a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    285e:	015b      	lsls	r3, r3, #5
    2860:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2864:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2868:	2204      	movs	r2, #4
    286a:	1c21      	adds	r1, r4, #0
    286c:	bf18      	it	ne
    286e:	2101      	movne	r1, #1
    2870:	4b0d      	ldr	r3, [pc, #52]	; (28a8 <_usb_d_dev_handle_trfail+0xfc>)
    2872:	4798      	blx	r3
    2874:	e014      	b.n	28a0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    2876:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    287a:	4a0a      	ldr	r2, [pc, #40]	; (28a4 <_usb_d_dev_handle_trfail+0xf8>)
    287c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2880:	2100      	movs	r1, #0
    2882:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2884:	aa02      	add	r2, sp, #8
    2886:	4414      	add	r4, r2
    2888:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    288c:	015a      	lsls	r2, r3, #5
    288e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2892:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2896:	015b      	lsls	r3, r3, #5
    2898:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    289c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    28a0:	b003      	add	sp, #12
    28a2:	bd30      	pop	{r4, r5, pc}
    28a4:	2000018c 	.word	0x2000018c
    28a8:	00002741 	.word	0x00002741

000028ac <_usb_d_dev_reset_epts>:
{
    28ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28b0:	4d0c      	ldr	r5, [pc, #48]	; (28e4 <_usb_d_dev_reset_epts+0x38>)
    28b2:	f105 0474 	add.w	r4, r5, #116	; 0x74
    28b6:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    28ba:	f04f 0803 	mov.w	r8, #3
    28be:	4f0a      	ldr	r7, [pc, #40]	; (28e8 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    28c0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    28c2:	4641      	mov	r1, r8
    28c4:	4620      	mov	r0, r4
    28c6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    28c8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    28ca:	2300      	movs	r3, #0
    28cc:	74e3      	strb	r3, [r4, #19]
    28ce:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    28d0:	42ac      	cmp	r4, r5
    28d2:	d1f6      	bne.n	28c2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    28d4:	2260      	movs	r2, #96	; 0x60
    28d6:	4619      	mov	r1, r3
    28d8:	4802      	ldr	r0, [pc, #8]	; (28e4 <_usb_d_dev_reset_epts+0x38>)
    28da:	4b04      	ldr	r3, [pc, #16]	; (28ec <_usb_d_dev_reset_epts+0x40>)
    28dc:	4798      	blx	r3
    28de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28e2:	bf00      	nop
    28e4:	2000018c 	.word	0x2000018c
    28e8:	00002715 	.word	0x00002715
    28ec:	0000444b 	.word	0x0000444b

000028f0 <_usb_d_dev_in_next>:
{
    28f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28f4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    28f6:	7c84      	ldrb	r4, [r0, #18]
    28f8:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    28fc:	4688      	mov	r8, r1
    28fe:	2900      	cmp	r1, #0
    2900:	f000 809f 	beq.w	2a42 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2904:	4b58      	ldr	r3, [pc, #352]	; (2a68 <_usb_d_dev_in_next+0x178>)
    2906:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    290a:	6958      	ldr	r0, [r3, #20]
    290c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2910:	8a2b      	ldrh	r3, [r5, #16]
    2912:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2916:	4293      	cmp	r3, r2
    2918:	f000 808d 	beq.w	2a36 <_usb_d_dev_in_next+0x146>
    291c:	3b01      	subs	r3, #1
    291e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2920:	7cef      	ldrb	r7, [r5, #19]
    2922:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2926:	f1b8 0f00 	cmp.w	r8, #0
    292a:	d005      	beq.n	2938 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    292c:	0162      	lsls	r2, r4, #5
    292e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2932:	2302      	movs	r3, #2
    2934:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2938:	68a9      	ldr	r1, [r5, #8]
    293a:	eb0e 0301 	add.w	r3, lr, r1
    293e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2940:	686e      	ldr	r6, [r5, #4]
    2942:	42b3      	cmp	r3, r6
    2944:	d23f      	bcs.n	29c6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    2946:	1af6      	subs	r6, r6, r3
    2948:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    294a:	7cea      	ldrb	r2, [r5, #19]
    294c:	f012 0f20 	tst.w	r2, #32
    2950:	d02d      	beq.n	29ae <_usb_d_dev_in_next+0xbe>
    2952:	8a2a      	ldrh	r2, [r5, #16]
    2954:	4296      	cmp	r6, r2
    2956:	bf28      	it	cs
    2958:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    295a:	6829      	ldr	r1, [r5, #0]
    295c:	4632      	mov	r2, r6
    295e:	4419      	add	r1, r3
    2960:	68e8      	ldr	r0, [r5, #12]
    2962:	4b42      	ldr	r3, [pc, #264]	; (2a6c <_usb_d_dev_in_next+0x17c>)
    2964:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2966:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2968:	4b3f      	ldr	r3, [pc, #252]	; (2a68 <_usb_d_dev_in_next+0x178>)
    296a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    296e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2970:	4b3d      	ldr	r3, [pc, #244]	; (2a68 <_usb_d_dev_in_next+0x178>)
    2972:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2976:	695a      	ldr	r2, [r3, #20]
    2978:	f366 020d 	bfi	r2, r6, #0, #14
    297c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    297e:	695a      	ldr	r2, [r3, #20]
    2980:	f36f 329b 	bfc	r2, #14, #14
    2984:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2986:	f1b8 0f00 	cmp.w	r8, #0
    298a:	d108      	bne.n	299e <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    298c:	2f01      	cmp	r7, #1
    298e:	bf0c      	ite	eq
    2990:	224e      	moveq	r2, #78	; 0x4e
    2992:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2994:	0163      	lsls	r3, r4, #5
    2996:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    299a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    299e:	0164      	lsls	r4, r4, #5
    29a0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    29a4:	2380      	movs	r3, #128	; 0x80
    29a6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    29aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29ae:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    29b2:	bf28      	it	cs
    29b4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    29b8:	6829      	ldr	r1, [r5, #0]
    29ba:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    29bc:	4a2a      	ldr	r2, [pc, #168]	; (2a68 <_usb_d_dev_in_next+0x178>)
    29be:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    29c2:	6113      	str	r3, [r2, #16]
    29c4:	e7d4      	b.n	2970 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    29c6:	7ceb      	ldrb	r3, [r5, #19]
    29c8:	f013 0f10 	tst.w	r3, #16
    29cc:	d00f      	beq.n	29ee <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    29ce:	7ceb      	ldrb	r3, [r5, #19]
    29d0:	f36f 1304 	bfc	r3, #4, #1
    29d4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    29d6:	4b24      	ldr	r3, [pc, #144]	; (2a68 <_usb_d_dev_in_next+0x178>)
    29d8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    29dc:	695a      	ldr	r2, [r3, #20]
    29de:	f36f 020d 	bfc	r2, #0, #14
    29e2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    29e4:	695a      	ldr	r2, [r3, #20]
    29e6:	f36f 329b 	bfc	r2, #14, #14
    29ea:	615a      	str	r2, [r3, #20]
    29ec:	e7cb      	b.n	2986 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    29ee:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    29f0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    29f4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    29f8:	bf0c      	ite	eq
    29fa:	234b      	moveq	r3, #75	; 0x4b
    29fc:	234a      	movne	r3, #74	; 0x4a
    29fe:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2a02:	8a2a      	ldrh	r2, [r5, #16]
    2a04:	ea00 030e 	and.w	r3, r0, lr
    2a08:	429a      	cmp	r2, r3
    2a0a:	d005      	beq.n	2a18 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2a0c:	2100      	movs	r1, #0
    2a0e:	4628      	mov	r0, r5
    2a10:	4b17      	ldr	r3, [pc, #92]	; (2a70 <_usb_d_dev_in_next+0x180>)
    2a12:	4798      	blx	r3
	return;
    2a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2a18:	7ceb      	ldrb	r3, [r5, #19]
    2a1a:	f36f 1386 	bfc	r3, #6, #1
    2a1e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2a20:	4b11      	ldr	r3, [pc, #68]	; (2a68 <_usb_d_dev_in_next+0x178>)
    2a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2a24:	68a9      	ldr	r1, [r5, #8]
    2a26:	7ca8      	ldrb	r0, [r5, #18]
    2a28:	4798      	blx	r3
    2a2a:	b9d0      	cbnz	r0, 2a62 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2a2c:	7ceb      	ldrb	r3, [r5, #19]
    2a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a32:	74eb      	strb	r3, [r5, #19]
    2a34:	e7ea      	b.n	2a0c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2a36:	7cef      	ldrb	r7, [r5, #19]
    2a38:	f007 0707 	and.w	r7, r7, #7
    2a3c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2a40:	e774      	b.n	292c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2a42:	8a03      	ldrh	r3, [r0, #16]
    2a44:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2a48:	4293      	cmp	r3, r2
    2a4a:	d107      	bne.n	2a5c <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2a4c:	7cef      	ldrb	r7, [r5, #19]
    2a4e:	f007 0707 	and.w	r7, r7, #7
    2a52:	f04f 0e00 	mov.w	lr, #0
    2a56:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2a5a:	e76d      	b.n	2938 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2a5c:	f04f 0e00 	mov.w	lr, #0
    2a60:	e75c      	b.n	291c <_usb_d_dev_in_next+0x2c>
    2a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a66:	bf00      	nop
    2a68:	2000018c 	.word	0x2000018c
    2a6c:	00004435 	.word	0x00004435
    2a70:	00002715 	.word	0x00002715

00002a74 <_usb_d_dev_out_next>:
{
    2a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a78:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2a7a:	7c85      	ldrb	r5, [r0, #18]
    2a7c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2a80:	4689      	mov	r9, r1
    2a82:	2900      	cmp	r1, #0
    2a84:	d056      	beq.n	2b34 <_usb_d_dev_out_next+0xc0>
    2a86:	4b74      	ldr	r3, [pc, #464]	; (2c58 <_usb_d_dev_out_next+0x1e4>)
    2a88:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2a8c:	685a      	ldr	r2, [r3, #4]
    2a8e:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2a92:	685f      	ldr	r7, [r3, #4]
    2a94:	f3c7 070d 	ubfx	r7, r7, #0, #14
    2a98:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a9a:	8a06      	ldrh	r6, [r0, #16]
    2a9c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2aa0:	429e      	cmp	r6, r3
    2aa2:	f000 80ba 	beq.w	2c1a <_usb_d_dev_out_next+0x1a6>
    2aa6:	3e01      	subs	r6, #1
    2aa8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2aaa:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2aae:	f894 8013 	ldrb.w	r8, [r4, #19]
    2ab2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    2ab6:	f1b9 0f00 	cmp.w	r9, #0
    2aba:	d005      	beq.n	2ac8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2abc:	016b      	lsls	r3, r5, #5
    2abe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ac2:	2201      	movs	r2, #1
    2ac4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2ac8:	7ce3      	ldrb	r3, [r4, #19]
    2aca:	f013 0f20 	tst.w	r3, #32
    2ace:	d00d      	beq.n	2aec <_usb_d_dev_out_next+0x78>
    2ad0:	6862      	ldr	r2, [r4, #4]
    2ad2:	2a00      	cmp	r2, #0
    2ad4:	d037      	beq.n	2b46 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2ad6:	68a0      	ldr	r0, [r4, #8]
    2ad8:	1a12      	subs	r2, r2, r0
    2ada:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2adc:	6823      	ldr	r3, [r4, #0]
    2ade:	42ba      	cmp	r2, r7
    2ae0:	bf28      	it	cs
    2ae2:	463a      	movcs	r2, r7
    2ae4:	68e1      	ldr	r1, [r4, #12]
    2ae6:	4418      	add	r0, r3
    2ae8:	4b5c      	ldr	r3, [pc, #368]	; (2c5c <_usb_d_dev_out_next+0x1e8>)
    2aea:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2aec:	6863      	ldr	r3, [r4, #4]
    2aee:	b353      	cbz	r3, 2b46 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2af0:	f1b9 0f00 	cmp.w	r9, #0
    2af4:	d040      	beq.n	2b78 <_usb_d_dev_out_next+0x104>
    2af6:	8a22      	ldrh	r2, [r4, #16]
    2af8:	42ba      	cmp	r2, r7
    2afa:	d93d      	bls.n	2b78 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2afc:	7ce3      	ldrb	r3, [r4, #19]
    2afe:	f36f 1304 	bfc	r3, #4, #1
    2b02:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2b04:	68a3      	ldr	r3, [r4, #8]
    2b06:	445b      	add	r3, fp
    2b08:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2b0a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b0e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2b12:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b16:	bf0c      	ite	eq
    2b18:	222d      	moveq	r2, #45	; 0x2d
    2b1a:	2225      	movne	r2, #37	; 0x25
    2b1c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2b20:	b915      	cbnz	r5, 2b28 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2b22:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2b24:	4b4c      	ldr	r3, [pc, #304]	; (2c58 <_usb_d_dev_out_next+0x1e4>)
    2b26:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2b28:	2100      	movs	r1, #0
    2b2a:	4620      	mov	r0, r4
    2b2c:	4b4c      	ldr	r3, [pc, #304]	; (2c60 <_usb_d_dev_out_next+0x1ec>)
    2b2e:	4798      	blx	r3
	return;
    2b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2b34:	8a06      	ldrh	r6, [r0, #16]
    2b36:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2b3a:	429e      	cmp	r6, r3
    2b3c:	d07b      	beq.n	2c36 <_usb_d_dev_out_next+0x1c2>
    2b3e:	f04f 0b00 	mov.w	fp, #0
    2b42:	46da      	mov	sl, fp
    2b44:	e7af      	b.n	2aa6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2b46:	7ce3      	ldrb	r3, [r4, #19]
    2b48:	f013 0f10 	tst.w	r3, #16
    2b4c:	d06c      	beq.n	2c28 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2b4e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2b50:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2b54:	f043 0320 	orr.w	r3, r3, #32
    2b58:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2b5a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2b5c:	493e      	ldr	r1, [pc, #248]	; (2c58 <_usb_d_dev_out_next+0x1e4>)
    2b5e:	016a      	lsls	r2, r5, #5
    2b60:	188b      	adds	r3, r1, r2
    2b62:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2b64:	8a21      	ldrh	r1, [r4, #16]
    2b66:	685a      	ldr	r2, [r3, #4]
    2b68:	f361 329b 	bfi	r2, r1, #14, #14
    2b6c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2b6e:	685a      	ldr	r2, [r3, #4]
    2b70:	f36f 020d 	bfc	r2, #0, #14
    2b74:	605a      	str	r2, [r3, #4]
    2b76:	e01d      	b.n	2bb4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2b78:	68a2      	ldr	r2, [r4, #8]
    2b7a:	4452      	add	r2, sl
    2b7c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2b7e:	4293      	cmp	r3, r2
    2b80:	d9c3      	bls.n	2b0a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2b82:	1a9b      	subs	r3, r3, r2
    2b84:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2b86:	7ce1      	ldrb	r1, [r4, #19]
    2b88:	f011 0f20 	tst.w	r1, #32
    2b8c:	d026      	beq.n	2bdc <_usb_d_dev_out_next+0x168>
    2b8e:	8a22      	ldrh	r2, [r4, #16]
    2b90:	4293      	cmp	r3, r2
    2b92:	bf28      	it	cs
    2b94:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2b96:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2b98:	016a      	lsls	r2, r5, #5
    2b9a:	492f      	ldr	r1, [pc, #188]	; (2c58 <_usb_d_dev_out_next+0x1e4>)
    2b9c:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2b9e:	4a2e      	ldr	r2, [pc, #184]	; (2c58 <_usb_d_dev_out_next+0x1e4>)
    2ba0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2ba4:	6851      	ldr	r1, [r2, #4]
    2ba6:	f363 319b 	bfi	r1, r3, #14, #14
    2baa:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2bac:	6853      	ldr	r3, [r2, #4]
    2bae:	f36f 030d 	bfc	r3, #0, #14
    2bb2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2bb4:	f1b9 0f00 	cmp.w	r9, #0
    2bb8:	d108      	bne.n	2bcc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2bba:	f1b8 0f01 	cmp.w	r8, #1
    2bbe:	d025      	beq.n	2c0c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2bc0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2bc2:	016b      	lsls	r3, r5, #5
    2bc4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2bc8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2bcc:	016d      	lsls	r5, r5, #5
    2bce:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    2bd2:	2340      	movs	r3, #64	; 0x40
    2bd4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2bdc:	8a21      	ldrh	r1, [r4, #16]
    2bde:	428b      	cmp	r3, r1
    2be0:	d90a      	bls.n	2bf8 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2be6:	d80e      	bhi.n	2c06 <_usb_d_dev_out_next+0x192>
    2be8:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2bec:	6821      	ldr	r1, [r4, #0]
    2bee:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2bf0:	0169      	lsls	r1, r5, #5
    2bf2:	4819      	ldr	r0, [pc, #100]	; (2c58 <_usb_d_dev_out_next+0x1e4>)
    2bf4:	5042      	str	r2, [r0, r1]
    2bf6:	e7d2      	b.n	2b9e <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2bf8:	428b      	cmp	r3, r1
    2bfa:	d2f7      	bcs.n	2bec <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2bfc:	7ce1      	ldrb	r1, [r4, #19]
    2bfe:	f041 0120 	orr.w	r1, r1, #32
    2c02:	74e1      	strb	r1, [r4, #19]
    2c04:	e7f2      	b.n	2bec <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2c0a:	e7ef      	b.n	2bec <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2c0c:	4b12      	ldr	r3, [pc, #72]	; (2c58 <_usb_d_dev_out_next+0x1e4>)
    2c0e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2c12:	2200      	movs	r2, #0
    2c14:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2c16:	222d      	movs	r2, #45	; 0x2d
    2c18:	e7d3      	b.n	2bc2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2c1a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2c1e:	f890 8013 	ldrb.w	r8, [r0, #19]
    2c22:	f008 0807 	and.w	r8, r8, #7
    2c26:	e749      	b.n	2abc <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2c28:	f1b9 0f00 	cmp.w	r9, #0
    2c2c:	d10b      	bne.n	2c46 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2c2e:	68a3      	ldr	r3, [r4, #8]
    2c30:	4453      	add	r3, sl
    2c32:	60a3      	str	r3, [r4, #8]
    2c34:	e769      	b.n	2b0a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2c36:	f890 8013 	ldrb.w	r8, [r0, #19]
    2c3a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    2c3e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2c40:	46bb      	mov	fp, r7
    2c42:	46ba      	mov	sl, r7
    2c44:	e740      	b.n	2ac8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    2c46:	8a23      	ldrh	r3, [r4, #16]
    2c48:	42bb      	cmp	r3, r7
    2c4a:	f63f af57 	bhi.w	2afc <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    2c4e:	68a3      	ldr	r3, [r4, #8]
    2c50:	4453      	add	r3, sl
    2c52:	60a3      	str	r3, [r4, #8]
    2c54:	e759      	b.n	2b0a <_usb_d_dev_out_next+0x96>
    2c56:	bf00      	nop
    2c58:	2000018c 	.word	0x2000018c
    2c5c:	00004435 	.word	0x00004435
    2c60:	00002715 	.word	0x00002715

00002c64 <_usb_d_dev_handler>:
{
    2c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2c68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2c6c:	8c1e      	ldrh	r6, [r3, #32]
    2c6e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2c70:	b146      	cbz	r6, 2c84 <_usb_d_dev_handler+0x20>
    2c72:	4d91      	ldr	r5, [pc, #580]	; (2eb8 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    2c74:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2c76:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    2c7a:	f8df 9258 	ldr.w	r9, [pc, #600]	; 2ed4 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    2c7e:	f8df 8258 	ldr.w	r8, [pc, #600]	; 2ed8 <_usb_d_dev_handler+0x274>
    2c82:	e0d3      	b.n	2e2c <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2c84:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2c86:	8b1b      	ldrh	r3, [r3, #24]
    2c88:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2c8a:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2c8c:	f013 0f04 	tst.w	r3, #4
    2c90:	d11d      	bne.n	2cce <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2c92:	f413 7f00 	tst.w	r3, #512	; 0x200
    2c96:	d123      	bne.n	2ce0 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2c98:	f013 0f80 	tst.w	r3, #128	; 0x80
    2c9c:	d147      	bne.n	2d2e <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2c9e:	f013 0f70 	tst.w	r3, #112	; 0x70
    2ca2:	d14f      	bne.n	2d44 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2ca4:	f013 0f08 	tst.w	r3, #8
    2ca8:	d16e      	bne.n	2d88 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2caa:	f013 0f01 	tst.w	r3, #1
    2cae:	d0e0      	beq.n	2c72 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2cb0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2cb4:	f240 2201 	movw	r2, #513	; 0x201
    2cb8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2cba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2cbc:	2270      	movs	r2, #112	; 0x70
    2cbe:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2cc0:	4b7e      	ldr	r3, [pc, #504]	; (2ebc <_usb_d_dev_handler+0x258>)
    2cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2cc4:	2100      	movs	r1, #0
    2cc6:	2004      	movs	r0, #4
    2cc8:	4798      	blx	r3
    2cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2cce:	2204      	movs	r2, #4
    2cd0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2cd4:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2cd6:	4b79      	ldr	r3, [pc, #484]	; (2ebc <_usb_d_dev_handler+0x258>)
    2cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2cda:	4798      	blx	r3
    2cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ce0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ce4:	f240 2201 	movw	r2, #513	; 0x201
    2ce8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2cea:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2cec:	2270      	movs	r2, #112	; 0x70
    2cee:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2cf0:	4b72      	ldr	r3, [pc, #456]	; (2ebc <_usb_d_dev_handler+0x258>)
    2cf2:	891b      	ldrh	r3, [r3, #8]
    2cf4:	f003 030f 	and.w	r3, r3, #15
    2cf8:	2b03      	cmp	r3, #3
    2cfa:	d00e      	beq.n	2d1a <_usb_d_dev_handler+0xb6>
    2cfc:	4b6f      	ldr	r3, [pc, #444]	; (2ebc <_usb_d_dev_handler+0x258>)
    2cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2d00:	f003 030f 	and.w	r3, r3, #15
    2d04:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2d06:	bf08      	it	eq
    2d08:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2d0a:	d007      	beq.n	2d1c <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    2d0c:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2d0e:	4b6b      	ldr	r3, [pc, #428]	; (2ebc <_usb_d_dev_handler+0x258>)
    2d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d12:	2003      	movs	r0, #3
    2d14:	4798      	blx	r3
    2d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2d1a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2d1c:	4b67      	ldr	r3, [pc, #412]	; (2ebc <_usb_d_dev_handler+0x258>)
    2d1e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    2d22:	8919      	ldrh	r1, [r3, #8]
    2d24:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2d28:	2200      	movs	r2, #0
    2d2a:	811a      	strh	r2, [r3, #8]
    2d2c:	e7ef      	b.n	2d0e <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d2e:	2280      	movs	r2, #128	; 0x80
    2d30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2d34:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2d36:	4b61      	ldr	r3, [pc, #388]	; (2ebc <_usb_d_dev_handler+0x258>)
    2d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d3a:	2100      	movs	r1, #0
    2d3c:	2005      	movs	r0, #5
    2d3e:	4798      	blx	r3
    2d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2d48:	2270      	movs	r2, #112	; 0x70
    2d4a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2d4c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d4e:	f240 2201 	movw	r2, #513	; 0x201
    2d52:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2d54:	4b5a      	ldr	r3, [pc, #360]	; (2ec0 <_usb_d_dev_handler+0x25c>)
    2d56:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    2d5a:	f013 0f01 	tst.w	r3, #1
    2d5e:	d00d      	beq.n	2d7c <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2d60:	4a57      	ldr	r2, [pc, #348]	; (2ec0 <_usb_d_dev_handler+0x25c>)
    2d62:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2d64:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    2d68:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2d6c:	d1f9      	bne.n	2d62 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2d6e:	4b53      	ldr	r3, [pc, #332]	; (2ebc <_usb_d_dev_handler+0x258>)
    2d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d72:	2100      	movs	r1, #0
    2d74:	2002      	movs	r0, #2
    2d76:	4798      	blx	r3
    2d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2d7c:	4a50      	ldr	r2, [pc, #320]	; (2ec0 <_usb_d_dev_handler+0x25c>)
    2d7e:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    2d80:	f413 7f80 	tst.w	r3, #256	; 0x100
    2d84:	d0fb      	beq.n	2d7e <_usb_d_dev_handler+0x11a>
    2d86:	e7f2      	b.n	2d6e <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2d88:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2d8c:	2400      	movs	r4, #0
    2d8e:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d92:	2208      	movs	r2, #8
    2d94:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2d96:	2270      	movs	r2, #112	; 0x70
    2d98:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d9a:	f240 2201 	movw	r2, #513	; 0x201
    2d9e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2da0:	4b48      	ldr	r3, [pc, #288]	; (2ec4 <_usb_d_dev_handler+0x260>)
    2da2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2da4:	4b45      	ldr	r3, [pc, #276]	; (2ebc <_usb_d_dev_handler+0x258>)
    2da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2da8:	4621      	mov	r1, r4
    2daa:	2001      	movs	r0, #1
    2dac:	4798      	blx	r3
    2dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2db2:	f011 0f10 	tst.w	r1, #16
    2db6:	d109      	bne.n	2dcc <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2db8:	f011 0f40 	tst.w	r1, #64	; 0x40
    2dbc:	d108      	bne.n	2dd0 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2dbe:	f011 0f20 	tst.w	r1, #32
    2dc2:	d02f      	beq.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2dc4:	2100      	movs	r1, #0
    2dc6:	4b40      	ldr	r3, [pc, #256]	; (2ec8 <_usb_d_dev_handler+0x264>)
    2dc8:	4798      	blx	r3
    2dca:	e02b      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    2dcc:	47c8      	blx	r9
    2dce:	e029      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2dd0:	2101      	movs	r1, #1
    2dd2:	4b3d      	ldr	r3, [pc, #244]	; (2ec8 <_usb_d_dev_handler+0x264>)
    2dd4:	4798      	blx	r3
    2dd6:	e025      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2dd8:	f011 0f40 	tst.w	r1, #64	; 0x40
    2ddc:	d111      	bne.n	2e02 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2dde:	f011 0f08 	tst.w	r1, #8
    2de2:	d112      	bne.n	2e0a <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2de4:	f011 0f02 	tst.w	r1, #2
    2de8:	d112      	bne.n	2e10 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2dea:	f003 0307 	and.w	r3, r3, #7
    2dee:	2b01      	cmp	r3, #1
    2df0:	d118      	bne.n	2e24 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2df2:	f011 0f04 	tst.w	r1, #4
    2df6:	d10f      	bne.n	2e18 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2df8:	f011 0f10 	tst.w	r1, #16
    2dfc:	d012      	beq.n	2e24 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2dfe:	47c8      	blx	r9
    2e00:	e010      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    2e02:	2101      	movs	r1, #1
    2e04:	4b30      	ldr	r3, [pc, #192]	; (2ec8 <_usb_d_dev_handler+0x264>)
    2e06:	4798      	blx	r3
    2e08:	e00c      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    2e0a:	2101      	movs	r1, #1
    2e0c:	47c0      	blx	r8
    2e0e:	e009      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    2e10:	2101      	movs	r1, #1
    2e12:	4b2e      	ldr	r3, [pc, #184]	; (2ecc <_usb_d_dev_handler+0x268>)
    2e14:	4798      	blx	r3
    2e16:	e005      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    2e18:	2100      	movs	r1, #0
    2e1a:	47c0      	blx	r8
    2e1c:	e002      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    2e1e:	2100      	movs	r1, #0
    2e20:	4b29      	ldr	r3, [pc, #164]	; (2ec8 <_usb_d_dev_handler+0x264>)
    2e22:	4798      	blx	r3
    2e24:	3401      	adds	r4, #1
    2e26:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2e28:	2c09      	cmp	r4, #9
    2e2a:	d042      	beq.n	2eb2 <_usb_d_dev_handler+0x24e>
    2e2c:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    2e2e:	7cab      	ldrb	r3, [r5, #18]
    2e30:	2bff      	cmp	r3, #255	; 0xff
    2e32:	d0f7      	beq.n	2e24 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    2e34:	f003 030f 	and.w	r3, r3, #15
    2e38:	2101      	movs	r1, #1
    2e3a:	4099      	lsls	r1, r3
    2e3c:	4231      	tst	r1, r6
    2e3e:	d0f1      	beq.n	2e24 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2e40:	0159      	lsls	r1, r3, #5
    2e42:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2e46:	f501 7180 	add.w	r1, r1, #256	; 0x100
    2e4a:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2e4c:	015b      	lsls	r3, r3, #5
    2e4e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e52:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    2e56:	4019      	ands	r1, r3
    2e58:	d0e4      	beq.n	2e24 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2e5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2e5e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2e62:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    2e66:	f003 0247 	and.w	r2, r3, #71	; 0x47
    2e6a:	2a01      	cmp	r2, #1
    2e6c:	d0a1      	beq.n	2db2 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2e6e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2e72:	d1b1      	bne.n	2dd8 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2e74:	f011 0f20 	tst.w	r1, #32
    2e78:	d1d1      	bne.n	2e1e <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2e7a:	f011 0f04 	tst.w	r1, #4
    2e7e:	d10e      	bne.n	2e9e <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2e80:	f011 0f01 	tst.w	r1, #1
    2e84:	d10e      	bne.n	2ea4 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2e86:	f003 0307 	and.w	r3, r3, #7
    2e8a:	2b01      	cmp	r3, #1
    2e8c:	d1ca      	bne.n	2e24 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2e8e:	f011 0f08 	tst.w	r1, #8
    2e92:	d10b      	bne.n	2eac <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2e94:	f011 0f10 	tst.w	r1, #16
    2e98:	d0c4      	beq.n	2e24 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    2e9a:	47c8      	blx	r9
    2e9c:	e7c2      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    2e9e:	2100      	movs	r1, #0
    2ea0:	47c0      	blx	r8
    2ea2:	e7bf      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    2ea4:	2101      	movs	r1, #1
    2ea6:	4b0a      	ldr	r3, [pc, #40]	; (2ed0 <_usb_d_dev_handler+0x26c>)
    2ea8:	4798      	blx	r3
    2eaa:	e7bb      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    2eac:	2101      	movs	r1, #1
    2eae:	47c0      	blx	r8
    2eb0:	e7b8      	b.n	2e24 <_usb_d_dev_handler+0x1c0>
    2eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eb6:	bf00      	nop
    2eb8:	20000200 	.word	0x20000200
    2ebc:	2000018c 	.word	0x2000018c
    2ec0:	40001000 	.word	0x40001000
    2ec4:	000028ad 	.word	0x000028ad
    2ec8:	000026e9 	.word	0x000026e9
    2ecc:	000028f1 	.word	0x000028f1
    2ed0:	00002a75 	.word	0x00002a75
    2ed4:	0000266d 	.word	0x0000266d
    2ed8:	000027ad 	.word	0x000027ad

00002edc <_usb_d_dev_init>:
{
    2edc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2ede:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ee2:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2ee4:	f013 0f01 	tst.w	r3, #1
    2ee8:	d124      	bne.n	2f34 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2eea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2eee:	7893      	ldrb	r3, [r2, #2]
    2ef0:	f013 0f03 	tst.w	r3, #3
    2ef4:	d1fb      	bne.n	2eee <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2ef6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2efa:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2efc:	f013 0f02 	tst.w	r3, #2
    2f00:	d00f      	beq.n	2f22 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2f02:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f06:	7813      	ldrb	r3, [r2, #0]
    2f08:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2f0c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2f0e:	7893      	ldrb	r3, [r2, #2]
    2f10:	f013 0f03 	tst.w	r3, #3
    2f14:	d1fb      	bne.n	2f0e <_usb_d_dev_init+0x32>
    2f16:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f1a:	7893      	ldrb	r3, [r2, #2]
    2f1c:	f013 0f02 	tst.w	r3, #2
    2f20:	d1fb      	bne.n	2f1a <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2f22:	2201      	movs	r2, #1
    2f24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2f28:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2f2a:	461a      	mov	r2, r3
    2f2c:	7893      	ldrb	r3, [r2, #2]
    2f2e:	f013 0f03 	tst.w	r3, #3
    2f32:	d1fb      	bne.n	2f2c <_usb_d_dev_init+0x50>
    2f34:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f38:	7893      	ldrb	r3, [r2, #2]
    2f3a:	f013 0f01 	tst.w	r3, #1
    2f3e:	d1fb      	bne.n	2f38 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    2f40:	4b21      	ldr	r3, [pc, #132]	; (2fc8 <_usb_d_dev_init+0xec>)
    2f42:	4a22      	ldr	r2, [pc, #136]	; (2fcc <_usb_d_dev_init+0xf0>)
    2f44:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2f46:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2f48:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2f4a:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2f4c:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    2f4e:	4b20      	ldr	r3, [pc, #128]	; (2fd0 <_usb_d_dev_init+0xf4>)
    2f50:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2f52:	4b20      	ldr	r3, [pc, #128]	; (2fd4 <_usb_d_dev_init+0xf8>)
    2f54:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    2f56:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2f5a:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    2f5e:	f011 011f 	ands.w	r1, r1, #31
    2f62:	d02b      	beq.n	2fbc <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    2f64:	291f      	cmp	r1, #31
    2f66:	bf08      	it	eq
    2f68:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    2f6a:	b34b      	cbz	r3, 2fc0 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    2f6c:	2b1f      	cmp	r3, #31
    2f6e:	bf08      	it	eq
    2f70:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    2f72:	b33a      	cbz	r2, 2fc4 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    2f74:	2a07      	cmp	r2, #7
    2f76:	bf08      	it	eq
    2f78:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2f7a:	f003 031f 	and.w	r3, r3, #31
    2f7e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    2f82:	0312      	lsls	r2, r2, #12
    2f84:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    2f88:	4313      	orrs	r3, r2
    2f8a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2f8e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2f90:	78d3      	ldrb	r3, [r2, #3]
    2f92:	f043 0303 	orr.w	r3, r3, #3
    2f96:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2f98:	78d3      	ldrb	r3, [r2, #3]
    2f9a:	f043 030c 	orr.w	r3, r3, #12
    2f9e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2fa0:	2304      	movs	r3, #4
    2fa2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2fa4:	7893      	ldrb	r3, [r2, #2]
    2fa6:	f013 0f03 	tst.w	r3, #3
    2faa:	d1fb      	bne.n	2fa4 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2fac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2fb0:	4a05      	ldr	r2, [pc, #20]	; (2fc8 <_usb_d_dev_init+0xec>)
    2fb2:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2fb4:	2201      	movs	r2, #1
    2fb6:	811a      	strh	r2, [r3, #8]
}
    2fb8:	2000      	movs	r0, #0
    2fba:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    2fbc:	2109      	movs	r1, #9
    2fbe:	e7d4      	b.n	2f6a <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    2fc0:	2319      	movs	r3, #25
    2fc2:	e7d6      	b.n	2f72 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    2fc4:	2206      	movs	r2, #6
    2fc6:	e7d8      	b.n	2f7a <_usb_d_dev_init+0x9e>
    2fc8:	2000018c 	.word	0x2000018c
    2fcc:	00002669 	.word	0x00002669
    2fd0:	000028ad 	.word	0x000028ad
    2fd4:	00800084 	.word	0x00800084

00002fd8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    2fd8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2fdc:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2fde:	f013 0f03 	tst.w	r3, #3
    2fe2:	d129      	bne.n	3038 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2fe4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2fe8:	7893      	ldrb	r3, [r2, #2]
    2fea:	f013 0f03 	tst.w	r3, #3
    2fee:	d1fb      	bne.n	2fe8 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    2ff0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2ff4:	781b      	ldrb	r3, [r3, #0]
    2ff6:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    2ff8:	f013 0f02 	tst.w	r3, #2
    2ffc:	d108      	bne.n	3010 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2ffe:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3002:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3006:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3008:	7893      	ldrb	r3, [r2, #2]
    300a:	f013 0f03 	tst.w	r3, #3
    300e:	d1fb      	bne.n	3008 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3010:	4b0b      	ldr	r3, [pc, #44]	; (3040 <_usb_d_dev_enable+0x68>)
    3012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3016:	609a      	str	r2, [r3, #8]
    3018:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    301c:	609a      	str	r2, [r3, #8]
    301e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3022:	609a      	str	r2, [r3, #8]
    3024:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3028:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    302a:	f240 228d 	movw	r2, #653	; 0x28d
    302e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3032:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3034:	2000      	movs	r0, #0
    3036:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3038:	f06f 0010 	mvn.w	r0, #16
}
    303c:	4770      	bx	lr
    303e:	bf00      	nop
    3040:	e000e100 	.word	0xe000e100

00003044 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3044:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3048:	8913      	ldrh	r3, [r2, #8]
    304a:	f023 0301 	bic.w	r3, r3, #1
    304e:	041b      	lsls	r3, r3, #16
    3050:	0c1b      	lsrs	r3, r3, #16
    3052:	8113      	strh	r3, [r2, #8]
    3054:	4770      	bx	lr

00003056 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3056:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    305a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    305e:	7298      	strb	r0, [r3, #10]
    3060:	4770      	bx	lr
	...

00003064 <_usb_d_dev_ep_init>:
{
    3064:	b5f0      	push	{r4, r5, r6, r7, lr}
    3066:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    306a:	f010 050f 	ands.w	r5, r0, #15
    306e:	d04d      	beq.n	310c <_usb_d_dev_ep_init+0xa8>
    3070:	f1be 0f00 	cmp.w	lr, #0
    3074:	bfb4      	ite	lt
    3076:	1cac      	addlt	r4, r5, #2
    3078:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    307a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    307e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    3080:	2d02      	cmp	r5, #2
    3082:	d947      	bls.n	3114 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    3084:	f06f 0011 	mvn.w	r0, #17
    3088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    308a:	f1be 0f00 	cmp.w	lr, #0
    308e:	db1b      	blt.n	30c8 <_usb_d_dev_ep_init+0x64>
    3090:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3094:	4e37      	ldr	r6, [pc, #220]	; (3174 <_usb_d_dev_ep_init+0x110>)
    3096:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    309a:	2d00      	cmp	r5, #0
    309c:	d15e      	bne.n	315c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    309e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30a2:	4d34      	ldr	r5, [pc, #208]	; (3174 <_usb_d_dev_ep_init+0x110>)
    30a4:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    30a8:	4d33      	ldr	r5, [pc, #204]	; (3178 <_usb_d_dev_ep_init+0x114>)
    30aa:	00a6      	lsls	r6, r4, #2
    30ac:	1933      	adds	r3, r6, r4
    30ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    30b2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    30b6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    30ba:	3101      	adds	r1, #1
    30bc:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    30c0:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    30c4:	2000      	movs	r0, #0
    30c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    30c8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    30cc:	4e29      	ldr	r6, [pc, #164]	; (3174 <_usb_d_dev_ep_init+0x110>)
    30ce:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    30d2:	686d      	ldr	r5, [r5, #4]
    30d4:	b935      	cbnz	r5, 30e4 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    30d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30da:	4d26      	ldr	r5, [pc, #152]	; (3174 <_usb_d_dev_ep_init+0x110>)
    30dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    30e0:	685f      	ldr	r7, [r3, #4]
    30e2:	e7e1      	b.n	30a8 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    30e4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    30e8:	4e22      	ldr	r6, [pc, #136]	; (3174 <_usb_d_dev_ep_init+0x110>)
    30ea:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    30ee:	896d      	ldrh	r5, [r5, #10]
    30f0:	4295      	cmp	r5, r2
    30f2:	daf0      	bge.n	30d6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    30f4:	f06f 0012 	mvn.w	r0, #18
    30f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    30fa:	f06f 0013 	mvn.w	r0, #19
    30fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3100:	f06f 0013 	mvn.w	r0, #19
    3104:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    3106:	f06f 0012 	mvn.w	r0, #18
    310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    310c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    3110:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3112:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    3114:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    3118:	4f17      	ldr	r7, [pc, #92]	; (3178 <_usb_d_dev_ep_init+0x114>)
    311a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    311e:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    3122:	2eff      	cmp	r6, #255	; 0xff
    3124:	d1e9      	bne.n	30fa <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3126:	2900      	cmp	r1, #0
    3128:	d1af      	bne.n	308a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    312a:	b125      	cbz	r5, 3136 <_usb_d_dev_ep_init+0xd2>
    312c:	f1be 0f00 	cmp.w	lr, #0
    3130:	bfa4      	itt	ge
    3132:	3502      	addge	r5, #2
    3134:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    3136:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    313a:	4e0f      	ldr	r6, [pc, #60]	; (3178 <_usb_d_dev_ep_init+0x114>)
    313c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3140:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    3144:	2dff      	cmp	r5, #255	; 0xff
    3146:	d1db      	bne.n	3100 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    3148:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    314c:	4e09      	ldr	r6, [pc, #36]	; (3174 <_usb_d_dev_ep_init+0x110>)
    314e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3152:	2d00      	cmp	r5, #0
    3154:	d0d7      	beq.n	3106 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3156:	f1be 0f00 	cmp.w	lr, #0
    315a:	dbb5      	blt.n	30c8 <_usb_d_dev_ep_init+0x64>
    315c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3160:	4e04      	ldr	r6, [pc, #16]	; (3174 <_usb_d_dev_ep_init+0x110>)
    3162:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3166:	892d      	ldrh	r5, [r5, #8]
    3168:	4295      	cmp	r5, r2
    316a:	da98      	bge.n	309e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    316c:	f06f 0012 	mvn.w	r0, #18
    3170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3172:	bf00      	nop
    3174:	000046d4 	.word	0x000046d4
    3178:	2000018c 	.word	0x2000018c

0000317c <_usb_d_dev_ep_deinit>:
{
    317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    317e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3180:	f010 060f 	ands.w	r6, r0, #15
    3184:	d00e      	beq.n	31a4 <_usb_d_dev_ep_deinit+0x28>
    3186:	2f00      	cmp	r7, #0
    3188:	bfb4      	ite	lt
    318a:	1cb3      	addlt	r3, r6, #2
    318c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    318e:	2e02      	cmp	r6, #2
    3190:	d900      	bls.n	3194 <_usb_d_dev_ep_deinit+0x18>
    3192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    3194:	461d      	mov	r5, r3
    3196:	3301      	adds	r3, #1
    3198:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    319c:	4a24      	ldr	r2, [pc, #144]	; (3230 <_usb_d_dev_ep_deinit+0xb4>)
    319e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    31a2:	e002      	b.n	31aa <_usb_d_dev_ep_deinit+0x2e>
    31a4:	f8df e094 	ldr.w	lr, [pc, #148]	; 323c <_usb_d_dev_ep_deinit+0xc0>
    31a8:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    31aa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    31ae:	4a21      	ldr	r2, [pc, #132]	; (3234 <_usb_d_dev_ep_deinit+0xb8>)
    31b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    31b4:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    31b8:	2aff      	cmp	r2, #255	; 0xff
    31ba:	d0ea      	beq.n	3192 <_usb_d_dev_ep_deinit+0x16>
    31bc:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    31be:	2203      	movs	r2, #3
    31c0:	0ff9      	lsrs	r1, r7, #31
    31c2:	4670      	mov	r0, lr
    31c4:	4b1c      	ldr	r3, [pc, #112]	; (3238 <_usb_d_dev_ep_deinit+0xbc>)
    31c6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    31c8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    31cc:	4a19      	ldr	r2, [pc, #100]	; (3234 <_usb_d_dev_ep_deinit+0xb8>)
    31ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    31d2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    31d6:	f003 0307 	and.w	r3, r3, #7
    31da:	2b01      	cmp	r3, #1
    31dc:	d016      	beq.n	320c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    31de:	2f00      	cmp	r7, #0
    31e0:	db1b      	blt.n	321a <_usb_d_dev_ep_deinit+0x9e>
    31e2:	0160      	lsls	r0, r4, #5
    31e4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    31e8:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    31ec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    31f0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    31f4:	4b0f      	ldr	r3, [pc, #60]	; (3234 <_usb_d_dev_ep_deinit+0xb8>)
    31f6:	00aa      	lsls	r2, r5, #2
    31f8:	1951      	adds	r1, r2, r5
    31fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    31fe:	2000      	movs	r0, #0
    3200:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    3204:	22ff      	movs	r2, #255	; 0xff
    3206:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    320a:	e7c2      	b.n	3192 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    320c:	0160      	lsls	r0, r4, #5
    320e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3212:	2300      	movs	r3, #0
    3214:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    3218:	e7ec      	b.n	31f4 <_usb_d_dev_ep_deinit+0x78>
    321a:	0176      	lsls	r6, r6, #5
    321c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3220:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    3224:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    3228:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    322c:	e7e2      	b.n	31f4 <_usb_d_dev_ep_deinit+0x78>
    322e:	bf00      	nop
    3230:	200001ec 	.word	0x200001ec
    3234:	2000018c 	.word	0x2000018c
    3238:	00002741 	.word	0x00002741
    323c:	20000200 	.word	0x20000200

00003240 <_usb_d_dev_ep_enable>:
{
    3240:	b5f0      	push	{r4, r5, r6, r7, lr}
    3242:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3244:	f010 000f 	ands.w	r0, r0, #15
    3248:	f000 80a6 	beq.w	3398 <_usb_d_dev_ep_enable+0x158>
    324c:	2f00      	cmp	r7, #0
    324e:	bfb4      	ite	lt
    3250:	1c83      	addlt	r3, r0, #2
    3252:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3254:	4606      	mov	r6, r0
    3256:	0142      	lsls	r2, r0, #5
    3258:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    325c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    3260:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3262:	2802      	cmp	r0, #2
    3264:	f240 809f 	bls.w	33a6 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    3268:	f06f 0011 	mvn.w	r0, #17
    326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    326e:	f014 0f77 	tst.w	r4, #119	; 0x77
    3272:	f040 8088 	bne.w	3386 <_usb_d_dev_ep_enable+0x146>
    3276:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    327a:	2111      	movs	r1, #17
    327c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3280:	4c97      	ldr	r4, [pc, #604]	; (34e0 <_usb_d_dev_ep_enable+0x2a0>)
    3282:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    3286:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    328a:	4996      	ldr	r1, [pc, #600]	; (34e4 <_usb_d_dev_ep_enable+0x2a4>)
    328c:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3290:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    3294:	f200 80cc 	bhi.w	3430 <_usb_d_dev_ep_enable+0x1f0>
    3298:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    329c:	f200 810a 	bhi.w	34b4 <_usb_d_dev_ep_enable+0x274>
    32a0:	2c80      	cmp	r4, #128	; 0x80
    32a2:	f200 80f9 	bhi.w	3498 <_usb_d_dev_ep_enable+0x258>
    32a6:	2c40      	cmp	r4, #64	; 0x40
    32a8:	f200 810b 	bhi.w	34c2 <_usb_d_dev_ep_enable+0x282>
    32ac:	2c20      	cmp	r4, #32
    32ae:	f200 80fa 	bhi.w	34a6 <_usb_d_dev_ep_enable+0x266>
    32b2:	2c10      	cmp	r4, #16
    32b4:	f200 810c 	bhi.w	34d0 <_usb_d_dev_ep_enable+0x290>
    32b8:	2c08      	cmp	r4, #8
    32ba:	bf94      	ite	ls
    32bc:	2700      	movls	r7, #0
    32be:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    32c0:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    32c4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    32c6:	f3c4 010d 	ubfx	r1, r4, #0, #14
    32ca:	e0b7      	b.n	343c <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    32cc:	f014 0f70 	tst.w	r4, #112	; 0x70
    32d0:	d15c      	bne.n	338c <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    32d2:	4d83      	ldr	r5, [pc, #524]	; (34e0 <_usb_d_dev_ep_enable+0x2a0>)
    32d4:	009f      	lsls	r7, r3, #2
    32d6:	18f9      	adds	r1, r7, r3
    32d8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    32dc:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    32e0:	0109      	lsls	r1, r1, #4
    32e2:	f001 0170 	and.w	r1, r1, #112	; 0x70
    32e6:	430c      	orrs	r4, r1
    32e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    32ec:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    32f0:	443b      	add	r3, r7
    32f2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    32f6:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    32fa:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    32fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3302:	d80f      	bhi.n	3324 <_usb_d_dev_ep_enable+0xe4>
    3304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3308:	d819      	bhi.n	333e <_usb_d_dev_ep_enable+0xfe>
    330a:	2b80      	cmp	r3, #128	; 0x80
    330c:	d819      	bhi.n	3342 <_usb_d_dev_ep_enable+0x102>
    330e:	2b40      	cmp	r3, #64	; 0x40
    3310:	d819      	bhi.n	3346 <_usb_d_dev_ep_enable+0x106>
    3312:	2b20      	cmp	r3, #32
    3314:	d819      	bhi.n	334a <_usb_d_dev_ep_enable+0x10a>
    3316:	2b10      	cmp	r3, #16
    3318:	d819      	bhi.n	334e <_usb_d_dev_ep_enable+0x10e>
    331a:	2b08      	cmp	r3, #8
    331c:	bf94      	ite	ls
    331e:	2300      	movls	r3, #0
    3320:	2301      	movhi	r3, #1
    3322:	e000      	b.n	3326 <_usb_d_dev_ep_enable+0xe6>
    3324:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3326:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    332a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    332c:	2380      	movs	r3, #128	; 0x80
    332e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3332:	4b6b      	ldr	r3, [pc, #428]	; (34e0 <_usb_d_dev_ep_enable+0x2a0>)
    3334:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3338:	2000      	movs	r0, #0
    333a:	76b0      	strb	r0, [r6, #26]
    333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    333e:	2306      	movs	r3, #6
    3340:	e7f1      	b.n	3326 <_usb_d_dev_ep_enable+0xe6>
    3342:	2305      	movs	r3, #5
    3344:	e7ef      	b.n	3326 <_usb_d_dev_ep_enable+0xe6>
    3346:	2304      	movs	r3, #4
    3348:	e7ed      	b.n	3326 <_usb_d_dev_ep_enable+0xe6>
    334a:	2303      	movs	r3, #3
    334c:	e7eb      	b.n	3326 <_usb_d_dev_ep_enable+0xe6>
    334e:	2302      	movs	r3, #2
    3350:	e7e9      	b.n	3326 <_usb_d_dev_ep_enable+0xe6>
    3352:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3354:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3358:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    335a:	2340      	movs	r3, #64	; 0x40
    335c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3360:	4b5f      	ldr	r3, [pc, #380]	; (34e0 <_usb_d_dev_ep_enable+0x2a0>)
    3362:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3366:	2000      	movs	r0, #0
    3368:	72b0      	strb	r0, [r6, #10]
    336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    336c:	2106      	movs	r1, #6
    336e:	e7f1      	b.n	3354 <_usb_d_dev_ep_enable+0x114>
    3370:	2105      	movs	r1, #5
    3372:	e7ef      	b.n	3354 <_usb_d_dev_ep_enable+0x114>
    3374:	2104      	movs	r1, #4
    3376:	e7ed      	b.n	3354 <_usb_d_dev_ep_enable+0x114>
    3378:	2103      	movs	r1, #3
    337a:	e7eb      	b.n	3354 <_usb_d_dev_ep_enable+0x114>
    337c:	2102      	movs	r1, #2
    337e:	e7e9      	b.n	3354 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3380:	f06f 0011 	mvn.w	r0, #17
    3384:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3386:	f06f 0013 	mvn.w	r0, #19
    338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    338c:	f06f 0013 	mvn.w	r0, #19
    3390:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3392:	f06f 0013 	mvn.w	r0, #19
    3396:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3398:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    339c:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    33a0:	b2e4      	uxtb	r4, r4
    33a2:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    33a4:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    33a6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    33aa:	494d      	ldr	r1, [pc, #308]	; (34e0 <_usb_d_dev_ep_enable+0x2a0>)
    33ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    33b0:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    33b4:	2dff      	cmp	r5, #255	; 0xff
    33b6:	d0e3      	beq.n	3380 <_usb_d_dev_ep_enable+0x140>
    33b8:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    33ba:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    33bc:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    33c0:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    33c4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    33c8:	f001 0107 	and.w	r1, r1, #7
    33cc:	2901      	cmp	r1, #1
    33ce:	f43f af4e 	beq.w	326e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    33d2:	2f00      	cmp	r7, #0
    33d4:	f6ff af7a 	blt.w	32cc <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    33d8:	f014 0f07 	tst.w	r4, #7
    33dc:	d1d9      	bne.n	3392 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    33de:	4d40      	ldr	r5, [pc, #256]	; (34e0 <_usb_d_dev_ep_enable+0x2a0>)
    33e0:	009f      	lsls	r7, r3, #2
    33e2:	18f9      	adds	r1, r7, r3
    33e4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    33e8:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    33ec:	f001 0107 	and.w	r1, r1, #7
    33f0:	430c      	orrs	r4, r1
    33f2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    33f6:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    33fa:	443b      	add	r3, r7
    33fc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3400:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    3404:	4b37      	ldr	r3, [pc, #220]	; (34e4 <_usb_d_dev_ep_enable+0x2a4>)
    3406:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    340a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    340e:	d8a0      	bhi.n	3352 <_usb_d_dev_ep_enable+0x112>
    3410:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3414:	d8aa      	bhi.n	336c <_usb_d_dev_ep_enable+0x12c>
    3416:	2980      	cmp	r1, #128	; 0x80
    3418:	d8aa      	bhi.n	3370 <_usb_d_dev_ep_enable+0x130>
    341a:	2940      	cmp	r1, #64	; 0x40
    341c:	d8aa      	bhi.n	3374 <_usb_d_dev_ep_enable+0x134>
    341e:	2920      	cmp	r1, #32
    3420:	d8aa      	bhi.n	3378 <_usb_d_dev_ep_enable+0x138>
    3422:	2910      	cmp	r1, #16
    3424:	d8aa      	bhi.n	337c <_usb_d_dev_ep_enable+0x13c>
    3426:	2908      	cmp	r1, #8
    3428:	bf94      	ite	ls
    342a:	2100      	movls	r1, #0
    342c:	2101      	movhi	r1, #1
    342e:	e791      	b.n	3354 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3430:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3434:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3436:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    343a:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    343c:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    3440:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3442:	2140      	movs	r1, #64	; 0x40
    3444:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3448:	2080      	movs	r0, #128	; 0x80
    344a:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    344e:	4a24      	ldr	r2, [pc, #144]	; (34e0 <_usb_d_dev_ep_enable+0x2a0>)
    3450:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    3454:	2000      	movs	r0, #0
    3456:	72b0      	strb	r0, [r6, #10]
    3458:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    345a:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    345e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3462:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3466:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    346a:	016d      	lsls	r5, r5, #5
    346c:	1953      	adds	r3, r2, r5
    346e:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3470:	685a      	ldr	r2, [r3, #4]
    3472:	f364 329b 	bfi	r2, r4, #14, #14
    3476:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3478:	685a      	ldr	r2, [r3, #4]
    347a:	f360 020d 	bfi	r2, r0, #0, #14
    347e:	605a      	str	r2, [r3, #4]
    3480:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    3484:	22b0      	movs	r2, #176	; 0xb0
    3486:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    348a:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    348e:	461d      	mov	r5, r3
    3490:	2310      	movs	r3, #16
    3492:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    3496:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3498:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    349c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    349e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    34a2:	2705      	movs	r7, #5
    34a4:	e7ca      	b.n	343c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34a6:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    34aa:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34ac:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    34b0:	2703      	movs	r7, #3
    34b2:	e7c3      	b.n	343c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34b4:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    34b8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34ba:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    34be:	2706      	movs	r7, #6
    34c0:	e7bc      	b.n	343c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34c2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    34c6:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34c8:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    34cc:	2704      	movs	r7, #4
    34ce:	e7b5      	b.n	343c <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34d0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    34d4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34d6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    34da:	2702      	movs	r7, #2
    34dc:	e7ae      	b.n	343c <_usb_d_dev_ep_enable+0x1fc>
    34de:	bf00      	nop
    34e0:	2000018c 	.word	0x2000018c
    34e4:	0fffc000 	.word	0x0fffc000

000034e8 <_usb_d_dev_ep_stall>:
{
    34e8:	b470      	push	{r4, r5, r6}
    34ea:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    34ec:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    34ee:	f010 000f 	ands.w	r0, r0, #15
    34f2:	d008      	beq.n	3506 <_usb_d_dev_ep_stall+0x1e>
    34f4:	2b00      	cmp	r3, #0
    34f6:	bfb4      	ite	lt
    34f8:	1c83      	addlt	r3, r0, #2
    34fa:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    34fc:	2802      	cmp	r0, #2
    34fe:	d903      	bls.n	3508 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    3500:	f06f 0011 	mvn.w	r0, #17
    3504:	e018      	b.n	3538 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    3506:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    3508:	2901      	cmp	r1, #1
    350a:	d017      	beq.n	353c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    350c:	2900      	cmp	r1, #0
    350e:	d03a      	beq.n	3586 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3510:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3514:	4a45      	ldr	r2, [pc, #276]	; (362c <_usb_d_dev_ep_stall+0x144>)
    3516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    351a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    351e:	f003 030f 	and.w	r3, r3, #15
    3522:	015b      	lsls	r3, r3, #5
    3524:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3528:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    352c:	2310      	movs	r3, #16
    352e:	40a3      	lsls	r3, r4
    3530:	421a      	tst	r2, r3
    3532:	bf14      	ite	ne
    3534:	2001      	movne	r0, #1
    3536:	2000      	moveq	r0, #0
}
    3538:	bc70      	pop	{r4, r5, r6}
    353a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    353c:	2510      	movs	r5, #16
    353e:	40a5      	lsls	r5, r4
    3540:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3542:	493a      	ldr	r1, [pc, #232]	; (362c <_usb_d_dev_ep_stall+0x144>)
    3544:	009e      	lsls	r6, r3, #2
    3546:	18f2      	adds	r2, r6, r3
    3548:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    354c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3550:	f002 020f 	and.w	r2, r2, #15
    3554:	0150      	lsls	r0, r2, #5
    3556:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    355a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    355e:	2020      	movs	r0, #32
    3560:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3564:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3566:	0152      	lsls	r2, r2, #5
    3568:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    356c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3570:	4433      	add	r3, r6
    3572:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    3576:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    357a:	f042 0208 	orr.w	r2, r2, #8
    357e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3582:	2000      	movs	r0, #0
    3584:	e7d8      	b.n	3538 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3586:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    358a:	4928      	ldr	r1, [pc, #160]	; (362c <_usb_d_dev_ep_stall+0x144>)
    358c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3590:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    3594:	f002 020f 	and.w	r2, r2, #15
    3598:	0151      	lsls	r1, r2, #5
    359a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    359e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    35a2:	2010      	movs	r0, #16
    35a4:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    35a6:	4205      	tst	r5, r0
    35a8:	d03c      	beq.n	3624 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    35aa:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    35ac:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    35b0:	2020      	movs	r0, #32
    35b2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    35b4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    35b6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    35ba:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    35be:	4202      	tst	r2, r0
    35c0:	d007      	beq.n	35d2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35c2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    35c6:	2201      	movs	r2, #1
    35c8:	fa02 f404 	lsl.w	r4, r2, r4
    35cc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    35ce:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    35d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    35d6:	4815      	ldr	r0, [pc, #84]	; (362c <_usb_d_dev_ep_stall+0x144>)
    35d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    35dc:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    35e0:	f002 0207 	and.w	r2, r2, #7
    35e4:	2a01      	cmp	r2, #1
    35e6:	d00c      	beq.n	3602 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    35e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    35ec:	4a0f      	ldr	r2, [pc, #60]	; (362c <_usb_d_dev_ep_stall+0x144>)
    35ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    35f2:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    35f6:	f36f 02c3 	bfc	r2, #3, #1
    35fa:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    35fe:	2000      	movs	r0, #0
    3600:	e79a      	b.n	3538 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3602:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3606:	f012 0f30 	tst.w	r2, #48	; 0x30
    360a:	d10d      	bne.n	3628 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    360c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3610:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    3614:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3618:	f36f 02c3 	bfc	r2, #3, #1
    361c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3620:	2000      	movs	r0, #0
    3622:	e789      	b.n	3538 <_usb_d_dev_ep_stall+0x50>
    3624:	2000      	movs	r0, #0
    3626:	e787      	b.n	3538 <_usb_d_dev_ep_stall+0x50>
    3628:	2000      	movs	r0, #0
    362a:	e785      	b.n	3538 <_usb_d_dev_ep_stall+0x50>
    362c:	2000018c 	.word	0x2000018c

00003630 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3630:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    3632:	f000 040f 	and.w	r4, r0, #15
    3636:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3638:	4a14      	ldr	r2, [pc, #80]	; (368c <_usb_d_dev_ep_read_req+0x5c>)
    363a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    363c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    363e:	6840      	ldr	r0, [r0, #4]
    3640:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3644:	2c02      	cmp	r4, #2
    3646:	d817      	bhi.n	3678 <_usb_d_dev_ep_read_req+0x48>
    3648:	b1c9      	cbz	r1, 367e <_usb_d_dev_ep_read_req+0x4e>
    364a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    364e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    3652:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3654:	2a11      	cmp	r2, #17
    3656:	d115      	bne.n	3684 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3658:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    365c:	f012 0f10 	tst.w	r2, #16
    3660:	d102      	bne.n	3668 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    3662:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3664:	bc30      	pop	{r4, r5}
    3666:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3668:	682c      	ldr	r4, [r5, #0]
    366a:	686a      	ldr	r2, [r5, #4]
    366c:	600c      	str	r4, [r1, #0]
    366e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3670:	2210      	movs	r2, #16
    3672:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    3676:	e7f5      	b.n	3664 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3678:	f06f 0011 	mvn.w	r0, #17
    367c:	e7f2      	b.n	3664 <_usb_d_dev_ep_read_req+0x34>
    367e:	f06f 0011 	mvn.w	r0, #17
    3682:	e7ef      	b.n	3664 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    3684:	f06f 0012 	mvn.w	r0, #18
    3688:	e7ec      	b.n	3664 <_usb_d_dev_ep_read_req+0x34>
    368a:	bf00      	nop
    368c:	2000018c 	.word	0x2000018c

00003690 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3694:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3696:	7a03      	ldrb	r3, [r0, #8]
    3698:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    369a:	f013 030f 	ands.w	r3, r3, #15
    369e:	f000 80c2 	beq.w	3826 <_usb_d_dev_ep_trans+0x196>
    36a2:	2e00      	cmp	r6, #0
    36a4:	bfb4      	ite	lt
    36a6:	1c9a      	addlt	r2, r3, #2
    36a8:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    36aa:	4614      	mov	r4, r2
    36ac:	4969      	ldr	r1, [pc, #420]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    36ae:	f101 0760 	add.w	r7, r1, #96	; 0x60
    36b2:	1c55      	adds	r5, r2, #1
    36b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    36b8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    36bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    36c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    36c4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    36c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    36cc:	428a      	cmp	r2, r1
    36ce:	d025      	beq.n	371c <_usb_d_dev_ep_trans+0x8c>
    36d0:	1e55      	subs	r5, r2, #1
    36d2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    36d4:	6841      	ldr	r1, [r0, #4]
    36d6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    36d8:	2b02      	cmp	r3, #2
    36da:	f200 8092 	bhi.w	3802 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    36de:	6803      	ldr	r3, [r0, #0]
    36e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    36e4:	d31c      	bcc.n	3720 <_usb_d_dev_ep_trans+0x90>
    36e6:	eb03 0c01 	add.w	ip, r3, r1
    36ea:	f8df e180 	ldr.w	lr, [pc, #384]	; 386c <_usb_d_dev_ep_trans+0x1dc>
    36ee:	45f4      	cmp	ip, lr
    36f0:	d816      	bhi.n	3720 <_usb_d_dev_ep_trans+0x90>
    36f2:	f013 0f03 	tst.w	r3, #3
    36f6:	d113      	bne.n	3720 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    36f8:	2e00      	cmp	r6, #0
    36fa:	db2a      	blt.n	3752 <_usb_d_dev_ep_trans+0xc2>
    36fc:	428a      	cmp	r2, r1
    36fe:	f200 809c 	bhi.w	383a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    3702:	b34d      	cbz	r5, 3758 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    3704:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3708:	4a52      	ldr	r2, [pc, #328]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    370a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3712:	2b00      	cmp	r3, #0
    3714:	d07b      	beq.n	380e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    3716:	f04f 0800 	mov.w	r8, #0
    371a:	e00c      	b.n	3736 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    371c:	4615      	mov	r5, r2
    371e:	e7d9      	b.n	36d4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3720:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3724:	4a4b      	ldr	r2, [pc, #300]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    3726:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    372a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    372e:	2b00      	cmp	r3, #0
    3730:	d06a      	beq.n	3808 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    3732:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3736:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    373a:	4a46      	ldr	r2, [pc, #280]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    373c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3740:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3744:	f013 0f08 	tst.w	r3, #8
    3748:	d009      	beq.n	375e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    374a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    374c:	b003      	add	sp, #12
    374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    3752:	f04f 0800 	mov.w	r8, #0
    3756:	e7ee      	b.n	3736 <_usb_d_dev_ep_trans+0xa6>
    3758:	f04f 0800 	mov.w	r8, #0
    375c:	e7eb      	b.n	3736 <_usb_d_dev_ep_trans+0xa6>
    375e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    3760:	a801      	add	r0, sp, #4
    3762:	4b3d      	ldr	r3, [pc, #244]	; (3858 <_usb_d_dev_ep_trans+0x1c8>)
    3764:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3766:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    376a:	4a3a      	ldr	r2, [pc, #232]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    376c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3770:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3774:	f013 0f40 	tst.w	r3, #64	; 0x40
    3778:	d13c      	bne.n	37f4 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    377a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    377e:	4b35      	ldr	r3, [pc, #212]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    3780:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    3784:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    378c:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    3790:	a801      	add	r0, sp, #4
    3792:	4b32      	ldr	r3, [pc, #200]	; (385c <_usb_d_dev_ep_trans+0x1cc>)
    3794:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3796:	f8da 3000 	ldr.w	r3, [sl]
    379a:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    379e:	f8da 3004 	ldr.w	r3, [sl, #4]
    37a2:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    37a6:	2300      	movs	r3, #0
    37a8:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    37ac:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    37ae:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    37b2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    37b6:	f368 1345 	bfi	r3, r8, #5, #1
    37ba:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    37be:	f89a 3009 	ldrb.w	r3, [sl, #9]
    37c2:	b1e3      	cbz	r3, 37fe <_usb_d_dev_ep_trans+0x16e>
    37c4:	fab5 f585 	clz	r5, r5
    37c8:	096d      	lsrs	r5, r5, #5
    37ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    37ce:	4b21      	ldr	r3, [pc, #132]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    37d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    37d4:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    37d8:	f365 1304 	bfi	r3, r5, #4, #1
    37dc:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    37e0:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    37e2:	f04f 0100 	mov.w	r1, #0
    37e6:	4638      	mov	r0, r7
    37e8:	bfb4      	ite	lt
    37ea:	4b1d      	ldrlt	r3, [pc, #116]	; (3860 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    37ec:	4b1d      	ldrge	r3, [pc, #116]	; (3864 <_usb_d_dev_ep_trans+0x1d4>)
    37ee:	4798      	blx	r3
	return ERR_NONE;
    37f0:	2000      	movs	r0, #0
    37f2:	e7ab      	b.n	374c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    37f4:	a801      	add	r0, sp, #4
    37f6:	4b19      	ldr	r3, [pc, #100]	; (385c <_usb_d_dev_ep_trans+0x1cc>)
    37f8:	4798      	blx	r3
		return USB_BUSY;
    37fa:	2001      	movs	r0, #1
    37fc:	e7a6      	b.n	374c <_usb_d_dev_ep_trans+0xbc>
    37fe:	2500      	movs	r5, #0
    3800:	e7e3      	b.n	37ca <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    3802:	f06f 0011 	mvn.w	r0, #17
    3806:	e7a1      	b.n	374c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3808:	f06f 0012 	mvn.w	r0, #18
    380c:	e79e      	b.n	374c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    380e:	f06f 0011 	mvn.w	r0, #17
    3812:	e79b      	b.n	374c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3814:	f06f 0012 	mvn.w	r0, #18
    3818:	e798      	b.n	374c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    381a:	6841      	ldr	r1, [r0, #4]
    381c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3820:	4f11      	ldr	r7, [pc, #68]	; (3868 <_usb_d_dev_ep_trans+0x1d8>)
    3822:	2400      	movs	r4, #0
    3824:	e75b      	b.n	36de <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3826:	4a0b      	ldr	r2, [pc, #44]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    3828:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    382c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3830:	428a      	cmp	r2, r1
    3832:	d0f2      	beq.n	381a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    3834:	4f0c      	ldr	r7, [pc, #48]	; (3868 <_usb_d_dev_ep_trans+0x1d8>)
    3836:	2400      	movs	r4, #0
    3838:	e74a      	b.n	36d0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    383a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    383e:	4a05      	ldr	r2, [pc, #20]	; (3854 <_usb_d_dev_ep_trans+0x1c4>)
    3840:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3848:	2b00      	cmp	r3, #0
    384a:	d0e3      	beq.n	3814 <_usb_d_dev_ep_trans+0x184>
    384c:	f04f 0801 	mov.w	r8, #1
    3850:	e771      	b.n	3736 <_usb_d_dev_ep_trans+0xa6>
    3852:	bf00      	nop
    3854:	2000018c 	.word	0x2000018c
    3858:	00000999 	.word	0x00000999
    385c:	000009a7 	.word	0x000009a7
    3860:	000028f1 	.word	0x000028f1
    3864:	00002a75 	.word	0x00002a75
    3868:	20000200 	.word	0x20000200
    386c:	20041fff 	.word	0x20041fff

00003870 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3870:	4b06      	ldr	r3, [pc, #24]	; (388c <_usb_d_dev_register_callback+0x1c>)
    3872:	2900      	cmp	r1, #0
    3874:	bf08      	it	eq
    3876:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    3878:	2801      	cmp	r0, #1
    387a:	d003      	beq.n	3884 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    387c:	b908      	cbnz	r0, 3882 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    387e:	4b04      	ldr	r3, [pc, #16]	; (3890 <_usb_d_dev_register_callback+0x20>)
    3880:	6619      	str	r1, [r3, #96]	; 0x60
    3882:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3884:	4b02      	ldr	r3, [pc, #8]	; (3890 <_usb_d_dev_register_callback+0x20>)
    3886:	6659      	str	r1, [r3, #100]	; 0x64
    3888:	4770      	bx	lr
    388a:	bf00      	nop
    388c:	00002669 	.word	0x00002669
    3890:	2000018c 	.word	0x2000018c

00003894 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3894:	4b09      	ldr	r3, [pc, #36]	; (38bc <_usb_d_dev_register_ep_callback+0x28>)
    3896:	2900      	cmp	r1, #0
    3898:	bf08      	it	eq
    389a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    389c:	4603      	mov	r3, r0
    389e:	b130      	cbz	r0, 38ae <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    38a0:	2801      	cmp	r0, #1
    38a2:	d007      	beq.n	38b4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    38a4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    38a6:	bf04      	itt	eq
    38a8:	4b05      	ldreq	r3, [pc, #20]	; (38c0 <_usb_d_dev_register_ep_callback+0x2c>)
    38aa:	6719      	streq	r1, [r3, #112]	; 0x70
    38ac:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    38ae:	4b04      	ldr	r3, [pc, #16]	; (38c0 <_usb_d_dev_register_ep_callback+0x2c>)
    38b0:	6699      	str	r1, [r3, #104]	; 0x68
    38b2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    38b4:	4b02      	ldr	r3, [pc, #8]	; (38c0 <_usb_d_dev_register_ep_callback+0x2c>)
    38b6:	66d9      	str	r1, [r3, #108]	; 0x6c
    38b8:	4770      	bx	lr
    38ba:	bf00      	nop
    38bc:	00002669 	.word	0x00002669
    38c0:	2000018c 	.word	0x2000018c

000038c4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    38c4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    38c6:	4b01      	ldr	r3, [pc, #4]	; (38cc <USB_0_Handler+0x8>)
    38c8:	4798      	blx	r3
    38ca:	bd08      	pop	{r3, pc}
    38cc:	00002c65 	.word	0x00002c65

000038d0 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    38d0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    38d2:	4b01      	ldr	r3, [pc, #4]	; (38d8 <USB_1_Handler+0x8>)
    38d4:	4798      	blx	r3
    38d6:	bd08      	pop	{r3, pc}
    38d8:	00002c65 	.word	0x00002c65

000038dc <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    38dc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    38de:	4b01      	ldr	r3, [pc, #4]	; (38e4 <USB_2_Handler+0x8>)
    38e0:	4798      	blx	r3
    38e2:	bd08      	pop	{r3, pc}
    38e4:	00002c65 	.word	0x00002c65

000038e8 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    38e8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    38ea:	4b01      	ldr	r3, [pc, #4]	; (38f0 <USB_3_Handler+0x8>)
    38ec:	4798      	blx	r3
    38ee:	bd08      	pop	{r3, pc}
    38f0:	00002c65 	.word	0x00002c65

000038f4 <main>:
#include <atmel_start.h>

int main(void)
{
    38f4:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    38f6:	4b01      	ldr	r3, [pc, #4]	; (38fc <main+0x8>)
    38f8:	4798      	blx	r3
    38fa:	e7fe      	b.n	38fa <main+0x6>
    38fc:	000002d1 	.word	0x000002d1

00003900 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3900:	b5f0      	push	{r4, r5, r6, r7, lr}
    3902:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3904:	780b      	ldrb	r3, [r1, #0]
    3906:	f3c3 1441 	ubfx	r4, r3, #5, #2
    390a:	2c01      	cmp	r4, #1
    390c:	d15e      	bne.n	39cc <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    390e:	888c      	ldrh	r4, [r1, #4]
    3910:	4d35      	ldr	r5, [pc, #212]	; (39e8 <cdcdf_acm_req+0xe8>)
    3912:	782d      	ldrb	r5, [r5, #0]
    3914:	42a5      	cmp	r5, r4
    3916:	d003      	beq.n	3920 <cdcdf_acm_req+0x20>
    3918:	4d33      	ldr	r5, [pc, #204]	; (39e8 <cdcdf_acm_req+0xe8>)
    391a:	786d      	ldrb	r5, [r5, #1]
    391c:	42a5      	cmp	r5, r4
    391e:	d158      	bne.n	39d2 <cdcdf_acm_req+0xd2>
    3920:	4616      	mov	r6, r2
    3922:	460c      	mov	r4, r1
    3924:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3926:	f013 0f80 	tst.w	r3, #128	; 0x80
    392a:	d10c      	bne.n	3946 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    392c:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    392e:	4b2f      	ldr	r3, [pc, #188]	; (39ec <cdcdf_acm_req+0xec>)
    3930:	4798      	blx	r3
    3932:	4601      	mov	r1, r0
	switch (req->bRequest) {
    3934:	7863      	ldrb	r3, [r4, #1]
    3936:	2b20      	cmp	r3, #32
    3938:	d013      	beq.n	3962 <cdcdf_acm_req+0x62>
    393a:	2b22      	cmp	r3, #34	; 0x22
    393c:	d032      	beq.n	39a4 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    393e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3942:	b003      	add	sp, #12
    3944:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3946:	2a01      	cmp	r2, #1
    3948:	d046      	beq.n	39d8 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    394a:	784b      	ldrb	r3, [r1, #1]
    394c:	2b21      	cmp	r3, #33	; 0x21
    394e:	d145      	bne.n	39dc <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3950:	88cb      	ldrh	r3, [r1, #6]
    3952:	2b07      	cmp	r3, #7
    3954:	d145      	bne.n	39e2 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3956:	2300      	movs	r3, #0
    3958:	2207      	movs	r2, #7
    395a:	4925      	ldr	r1, [pc, #148]	; (39f0 <cdcdf_acm_req+0xf0>)
    395c:	4c25      	ldr	r4, [pc, #148]	; (39f4 <cdcdf_acm_req+0xf4>)
    395e:	47a0      	blx	r4
    3960:	e7ef      	b.n	3942 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3962:	2f07      	cmp	r7, #7
    3964:	d12b      	bne.n	39be <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    3966:	b1be      	cbz	r6, 3998 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3968:	6800      	ldr	r0, [r0, #0]
    396a:	9000      	str	r0, [sp, #0]
    396c:	888a      	ldrh	r2, [r1, #4]
    396e:	798b      	ldrb	r3, [r1, #6]
    3970:	f8ad 2004 	strh.w	r2, [sp, #4]
    3974:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3978:	4b1b      	ldr	r3, [pc, #108]	; (39e8 <cdcdf_acm_req+0xe8>)
    397a:	691b      	ldr	r3, [r3, #16]
    397c:	b113      	cbz	r3, 3984 <cdcdf_acm_req+0x84>
    397e:	4668      	mov	r0, sp
    3980:	4798      	blx	r3
    3982:	b1f8      	cbz	r0, 39c4 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    3984:	4b18      	ldr	r3, [pc, #96]	; (39e8 <cdcdf_acm_req+0xe8>)
    3986:	aa02      	add	r2, sp, #8
    3988:	e912 0003 	ldmdb	r2, {r0, r1}
    398c:	6098      	str	r0, [r3, #8]
    398e:	8199      	strh	r1, [r3, #12]
    3990:	0c09      	lsrs	r1, r1, #16
    3992:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    3994:	2000      	movs	r0, #0
    3996:	e7d4      	b.n	3942 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3998:	2300      	movs	r3, #0
    399a:	2207      	movs	r2, #7
    399c:	4628      	mov	r0, r5
    399e:	4c15      	ldr	r4, [pc, #84]	; (39f4 <cdcdf_acm_req+0xf4>)
    39a0:	47a0      	blx	r4
    39a2:	e7ce      	b.n	3942 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    39a4:	2300      	movs	r3, #0
    39a6:	461a      	mov	r2, r3
    39a8:	4619      	mov	r1, r3
    39aa:	4618      	mov	r0, r3
    39ac:	4d11      	ldr	r5, [pc, #68]	; (39f4 <cdcdf_acm_req+0xf4>)
    39ae:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    39b0:	4b0d      	ldr	r3, [pc, #52]	; (39e8 <cdcdf_acm_req+0xe8>)
    39b2:	695b      	ldr	r3, [r3, #20]
    39b4:	b143      	cbz	r3, 39c8 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    39b6:	8860      	ldrh	r0, [r4, #2]
    39b8:	4798      	blx	r3
		return ERR_NONE;
    39ba:	2000      	movs	r0, #0
    39bc:	e7c1      	b.n	3942 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    39be:	f04f 30ff 	mov.w	r0, #4294967295
    39c2:	e7be      	b.n	3942 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    39c4:	2000      	movs	r0, #0
    39c6:	e7bc      	b.n	3942 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    39c8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    39ca:	e7ba      	b.n	3942 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    39cc:	f06f 0009 	mvn.w	r0, #9
    39d0:	e7b7      	b.n	3942 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    39d2:	f06f 0009 	mvn.w	r0, #9
    39d6:	e7b4      	b.n	3942 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    39d8:	2000      	movs	r0, #0
    39da:	e7b2      	b.n	3942 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    39dc:	f06f 000c 	mvn.w	r0, #12
    39e0:	e7af      	b.n	3942 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    39e2:	f04f 30ff 	mov.w	r0, #4294967295
    39e6:	e7ac      	b.n	3942 <cdcdf_acm_req+0x42>
    39e8:	20000374 	.word	0x20000374
    39ec:	00004261 	.word	0x00004261
    39f0:	2000037c 	.word	0x2000037c
    39f4:	00003d3d 	.word	0x00003d3d

000039f8 <cdcdf_acm_ctrl>:
{
    39f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39fc:	b083      	sub	sp, #12
    39fe:	4616      	mov	r6, r2
	switch (ctrl) {
    3a00:	2901      	cmp	r1, #1
    3a02:	d066      	beq.n	3ad2 <cdcdf_acm_ctrl+0xda>
    3a04:	b141      	cbz	r1, 3a18 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3a06:	2902      	cmp	r1, #2
    3a08:	bf0c      	ite	eq
    3a0a:	f06f 001a 	mvneq.w	r0, #26
    3a0e:	f06f 000c 	mvnne.w	r0, #12
}
    3a12:	b003      	add	sp, #12
    3a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3a18:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3a1c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3a1e:	2800      	cmp	r0, #0
    3a20:	f000 8085 	beq.w	3b2e <cdcdf_acm_ctrl+0x136>
    3a24:	f10a 3bff 	add.w	fp, sl, #4294967295
    3a28:	f10a 0301 	add.w	r3, sl, #1
    3a2c:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3a2e:	4f46      	ldr	r7, [pc, #280]	; (3b48 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    3a30:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3b58 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3a34:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3b5c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    3a38:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3a3a:	7943      	ldrb	r3, [r0, #5]
    3a3c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3a40:	2b02      	cmp	r3, #2
    3a42:	d002      	beq.n	3a4a <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    3a44:	f06f 0009 	mvn.w	r0, #9
    3a48:	e7e3      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
    3a4a:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3a4e:	f89b 3000 	ldrb.w	r3, [fp]
    3a52:	429a      	cmp	r2, r3
    3a54:	d06e      	beq.n	3b34 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3a56:	2bff      	cmp	r3, #255	; 0xff
    3a58:	d16f      	bne.n	3b3a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3a5a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3a5e:	2205      	movs	r2, #5
    3a60:	6871      	ldr	r1, [r6, #4]
    3a62:	4b3a      	ldr	r3, [pc, #232]	; (3b4c <cdcdf_acm_ctrl+0x154>)
    3a64:	4798      	blx	r3
		while (NULL != ep) {
    3a66:	4604      	mov	r4, r0
    3a68:	b1f8      	cbz	r0, 3aaa <cdcdf_acm_ctrl+0xb2>
    3a6a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    3a6e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    3a70:	7963      	ldrb	r3, [r4, #5]
    3a72:	7922      	ldrb	r2, [r4, #4]
    3a74:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3a78:	b292      	uxth	r2, r2
    3a7a:	78e1      	ldrb	r1, [r4, #3]
    3a7c:	4628      	mov	r0, r5
    3a7e:	47b8      	blx	r7
    3a80:	2800      	cmp	r0, #0
    3a82:	d15d      	bne.n	3b40 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3a84:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3a88:	bf14      	ite	ne
    3a8a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3a8e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3a92:	4628      	mov	r0, r5
    3a94:	47c8      	blx	r9
			desc->sod = ep;
    3a96:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3a98:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3a9a:	6871      	ldr	r1, [r6, #4]
    3a9c:	4420      	add	r0, r4
    3a9e:	47c0      	blx	r8
		while (NULL != ep) {
    3aa0:	4604      	mov	r4, r0
    3aa2:	2800      	cmp	r0, #0
    3aa4:	d1e3      	bne.n	3a6e <cdcdf_acm_ctrl+0x76>
    3aa6:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3aaa:	6833      	ldr	r3, [r6, #0]
    3aac:	7818      	ldrb	r0, [r3, #0]
    3aae:	2204      	movs	r2, #4
    3ab0:	6871      	ldr	r1, [r6, #4]
    3ab2:	4418      	add	r0, r3
    3ab4:	4b25      	ldr	r3, [pc, #148]	; (3b4c <cdcdf_acm_ctrl+0x154>)
    3ab6:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3ab8:	9b00      	ldr	r3, [sp, #0]
    3aba:	459b      	cmp	fp, r3
    3abc:	d004      	beq.n	3ac8 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    3abe:	2800      	cmp	r0, #0
    3ac0:	d1ba      	bne.n	3a38 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    3ac2:	f06f 0009 	mvn.w	r0, #9
    3ac6:	e7a4      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    3ac8:	2201      	movs	r2, #1
    3aca:	4b21      	ldr	r3, [pc, #132]	; (3b50 <cdcdf_acm_ctrl+0x158>)
    3acc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3ace:	2000      	movs	r0, #0
    3ad0:	e79f      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3ad2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3ad4:	b142      	cbz	r2, 3ae8 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3ad6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3ad8:	795b      	ldrb	r3, [r3, #5]
    3ada:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3ade:	2b02      	cmp	r3, #2
    3ae0:	d002      	beq.n	3ae8 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    3ae2:	f06f 0009 	mvn.w	r0, #9
    3ae6:	e794      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3ae8:	7823      	ldrb	r3, [r4, #0]
    3aea:	2bff      	cmp	r3, #255	; 0xff
    3aec:	d008      	beq.n	3b00 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    3aee:	23ff      	movs	r3, #255	; 0xff
    3af0:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3af2:	78a0      	ldrb	r0, [r4, #2]
    3af4:	4298      	cmp	r0, r3
    3af6:	d003      	beq.n	3b00 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3af8:	4b16      	ldr	r3, [pc, #88]	; (3b54 <cdcdf_acm_ctrl+0x15c>)
    3afa:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3afc:	23ff      	movs	r3, #255	; 0xff
    3afe:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3b00:	7863      	ldrb	r3, [r4, #1]
    3b02:	2bff      	cmp	r3, #255	; 0xff
    3b04:	d008      	beq.n	3b18 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    3b06:	23ff      	movs	r3, #255	; 0xff
    3b08:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3b0a:	78e0      	ldrb	r0, [r4, #3]
    3b0c:	4298      	cmp	r0, r3
    3b0e:	d003      	beq.n	3b18 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3b10:	4b10      	ldr	r3, [pc, #64]	; (3b54 <cdcdf_acm_ctrl+0x15c>)
    3b12:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3b14:	23ff      	movs	r3, #255	; 0xff
    3b16:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3b18:	7920      	ldrb	r0, [r4, #4]
    3b1a:	28ff      	cmp	r0, #255	; 0xff
    3b1c:	d003      	beq.n	3b26 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    3b1e:	4b0d      	ldr	r3, [pc, #52]	; (3b54 <cdcdf_acm_ctrl+0x15c>)
    3b20:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3b22:	23ff      	movs	r3, #255	; 0xff
    3b24:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3b26:	2000      	movs	r0, #0
    3b28:	4b09      	ldr	r3, [pc, #36]	; (3b50 <cdcdf_acm_ctrl+0x158>)
    3b2a:	7158      	strb	r0, [r3, #5]
    3b2c:	e771      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    3b2e:	f06f 0009 	mvn.w	r0, #9
    3b32:	e76e      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    3b34:	f06f 0011 	mvn.w	r0, #17
    3b38:	e76b      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    3b3a:	f06f 001b 	mvn.w	r0, #27
    3b3e:	e768      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    3b40:	f06f 0013 	mvn.w	r0, #19
    3b44:	e765      	b.n	3a12 <cdcdf_acm_ctrl+0x1a>
    3b46:	bf00      	nop
    3b48:	00000fdd 	.word	0x00000fdd
    3b4c:	00004281 	.word	0x00004281
    3b50:	20000374 	.word	0x20000374
    3b54:	00001045 	.word	0x00001045
    3b58:	00001071 	.word	0x00001071
    3b5c:	000042bb 	.word	0x000042bb

00003b60 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3b60:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3b62:	4b0a      	ldr	r3, [pc, #40]	; (3b8c <cdcdf_acm_init+0x2c>)
    3b64:	4798      	blx	r3
    3b66:	2801      	cmp	r0, #1
    3b68:	d80c      	bhi.n	3b84 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3b6a:	4809      	ldr	r0, [pc, #36]	; (3b90 <cdcdf_acm_init+0x30>)
    3b6c:	4b09      	ldr	r3, [pc, #36]	; (3b94 <cdcdf_acm_init+0x34>)
    3b6e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3b70:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3b72:	3018      	adds	r0, #24
    3b74:	4b08      	ldr	r3, [pc, #32]	; (3b98 <cdcdf_acm_init+0x38>)
    3b76:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3b78:	4908      	ldr	r1, [pc, #32]	; (3b9c <cdcdf_acm_init+0x3c>)
    3b7a:	2001      	movs	r0, #1
    3b7c:	4b08      	ldr	r3, [pc, #32]	; (3ba0 <cdcdf_acm_init+0x40>)
    3b7e:	4798      	blx	r3
	return ERR_NONE;
    3b80:	2000      	movs	r0, #0
    3b82:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    3b84:	f06f 0010 	mvn.w	r0, #16
}
    3b88:	bd08      	pop	{r3, pc}
    3b8a:	bf00      	nop
    3b8c:	0000426d 	.word	0x0000426d
    3b90:	20000374 	.word	0x20000374
    3b94:	000039f9 	.word	0x000039f9
    3b98:	0000420d 	.word	0x0000420d
    3b9c:	20000054 	.word	0x20000054
    3ba0:	00004179 	.word	0x00004179

00003ba4 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3ba4:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3ba6:	4b07      	ldr	r3, [pc, #28]	; (3bc4 <usbdc_unconfig+0x20>)
    3ba8:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    3baa:	b14c      	cbz	r4, 3bc0 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3bac:	2600      	movs	r6, #0
    3bae:	2501      	movs	r5, #1
    3bb0:	6863      	ldr	r3, [r4, #4]
    3bb2:	4632      	mov	r2, r6
    3bb4:	4629      	mov	r1, r5
    3bb6:	4620      	mov	r0, r4
    3bb8:	4798      	blx	r3
		func = func->next;
    3bba:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    3bbc:	2c00      	cmp	r4, #0
    3bbe:	d1f7      	bne.n	3bb0 <usbdc_unconfig+0xc>
    3bc0:	bd70      	pop	{r4, r5, r6, pc}
    3bc2:	bf00      	nop
    3bc4:	20000398 	.word	0x20000398

00003bc8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3bc8:	b570      	push	{r4, r5, r6, lr}
    3bca:	4606      	mov	r6, r0
    3bcc:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    3bce:	4b07      	ldr	r3, [pc, #28]	; (3bec <usbdc_change_notify+0x24>)
    3bd0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3bd2:	b91c      	cbnz	r4, 3bdc <usbdc_change_notify+0x14>
    3bd4:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    3bd6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    3bd8:	2c00      	cmp	r4, #0
    3bda:	d0fb      	beq.n	3bd4 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    3bdc:	6863      	ldr	r3, [r4, #4]
    3bde:	2b00      	cmp	r3, #0
    3be0:	d0f9      	beq.n	3bd6 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    3be2:	4629      	mov	r1, r5
    3be4:	4630      	mov	r0, r6
    3be6:	4798      	blx	r3
    3be8:	e7f5      	b.n	3bd6 <usbdc_change_notify+0xe>
    3bea:	bf00      	nop
    3bec:	20000398 	.word	0x20000398

00003bf0 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bf2:	4607      	mov	r7, r0
    3bf4:	460e      	mov	r6, r1
    3bf6:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3bf8:	4b0c      	ldr	r3, [pc, #48]	; (3c2c <usbdc_request_handler+0x3c>)
    3bfa:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    3bfc:	b91c      	cbnz	r4, 3c06 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3bfe:	2000      	movs	r0, #0
    3c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    3c02:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3c04:	b16c      	cbz	r4, 3c22 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    3c06:	6863      	ldr	r3, [r4, #4]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d0fa      	beq.n	3c02 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    3c0c:	462a      	mov	r2, r5
    3c0e:	4631      	mov	r1, r6
    3c10:	4638      	mov	r0, r7
    3c12:	4798      	blx	r3
			if (0 == rc) {
    3c14:	b138      	cbz	r0, 3c26 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    3c16:	f110 0f0a 	cmn.w	r0, #10
    3c1a:	d0f2      	beq.n	3c02 <usbdc_request_handler+0x12>
				return -1;
    3c1c:	f04f 30ff 	mov.w	r0, #4294967295
}
    3c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3c22:	2000      	movs	r0, #0
    3c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    3c26:	2001      	movs	r0, #1
    3c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c2a:	bf00      	nop
    3c2c:	20000398 	.word	0x20000398

00003c30 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    3c30:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    3c32:	4b06      	ldr	r3, [pc, #24]	; (3c4c <usbd_sof_cb+0x1c>)
    3c34:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    3c36:	b91c      	cbnz	r4, 3c40 <usbd_sof_cb+0x10>
    3c38:	bd10      	pop	{r4, pc}
		sof = sof->next;
    3c3a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    3c3c:	2c00      	cmp	r4, #0
    3c3e:	d0fb      	beq.n	3c38 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    3c40:	6863      	ldr	r3, [r4, #4]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d0f9      	beq.n	3c3a <usbd_sof_cb+0xa>
			sof->cb();
    3c46:	4798      	blx	r3
    3c48:	e7f7      	b.n	3c3a <usbd_sof_cb+0xa>
    3c4a:	bf00      	nop
    3c4c:	20000398 	.word	0x20000398

00003c50 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    3c50:	b510      	push	{r4, lr}
    3c52:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    3c54:	b119      	cbz	r1, 3c5e <usbdc_cb_ctl_done+0xe>
    3c56:	2901      	cmp	r1, #1
    3c58:	d026      	beq.n	3ca8 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    3c5a:	2000      	movs	r0, #0
    3c5c:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    3c5e:	7813      	ldrb	r3, [r2, #0]
    3c60:	2b00      	cmp	r3, #0
    3c62:	d1fa      	bne.n	3c5a <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    3c64:	7853      	ldrb	r3, [r2, #1]
    3c66:	2b05      	cmp	r3, #5
    3c68:	d00f      	beq.n	3c8a <usbdc_cb_ctl_done+0x3a>
    3c6a:	2b09      	cmp	r3, #9
    3c6c:	d1f5      	bne.n	3c5a <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    3c6e:	8852      	ldrh	r2, [r2, #2]
    3c70:	4b10      	ldr	r3, [pc, #64]	; (3cb4 <usbdc_cb_ctl_done+0x64>)
    3c72:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    3c74:	8863      	ldrh	r3, [r4, #2]
    3c76:	2b00      	cmp	r3, #0
    3c78:	bf14      	ite	ne
    3c7a:	2104      	movne	r1, #4
    3c7c:	2103      	moveq	r1, #3
    3c7e:	4b0d      	ldr	r3, [pc, #52]	; (3cb4 <usbdc_cb_ctl_done+0x64>)
    3c80:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3c82:	2001      	movs	r0, #1
    3c84:	4b0c      	ldr	r3, [pc, #48]	; (3cb8 <usbdc_cb_ctl_done+0x68>)
    3c86:	4798      	blx	r3
    3c88:	e7e7      	b.n	3c5a <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    3c8a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    3c8c:	b2c0      	uxtb	r0, r0
    3c8e:	4b0b      	ldr	r3, [pc, #44]	; (3cbc <usbdc_cb_ctl_done+0x6c>)
    3c90:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    3c92:	8863      	ldrh	r3, [r4, #2]
    3c94:	2b00      	cmp	r3, #0
    3c96:	bf14      	ite	ne
    3c98:	2103      	movne	r1, #3
    3c9a:	2102      	moveq	r1, #2
    3c9c:	4b05      	ldr	r3, [pc, #20]	; (3cb4 <usbdc_cb_ctl_done+0x64>)
    3c9e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    3ca0:	2001      	movs	r0, #1
    3ca2:	4b05      	ldr	r3, [pc, #20]	; (3cb8 <usbdc_cb_ctl_done+0x68>)
    3ca4:	4798      	blx	r3
    3ca6:	e7d8      	b.n	3c5a <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3ca8:	2201      	movs	r2, #1
    3caa:	4621      	mov	r1, r4
    3cac:	2000      	movs	r0, #0
    3cae:	4b04      	ldr	r3, [pc, #16]	; (3cc0 <usbdc_cb_ctl_done+0x70>)
    3cb0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    3cb2:	e7d2      	b.n	3c5a <usbdc_cb_ctl_done+0xa>
    3cb4:	20000398 	.word	0x20000398
    3cb8:	00003bc9 	.word	0x00003bc9
    3cbc:	00000fd1 	.word	0x00000fd1
    3cc0:	00003bf1 	.word	0x00003bf1

00003cc4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3cc4:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    3cc6:	4b0d      	ldr	r3, [pc, #52]	; (3cfc <usbdc_reset+0x38>)
    3cc8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3cca:	4d0d      	ldr	r5, [pc, #52]	; (3d00 <usbdc_reset+0x3c>)
    3ccc:	2602      	movs	r6, #2
    3cce:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    3cd0:	2400      	movs	r4, #0
    3cd2:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    3cd4:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3cd6:	4620      	mov	r0, r4
    3cd8:	4b0a      	ldr	r3, [pc, #40]	; (3d04 <usbdc_reset+0x40>)
    3cda:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3cdc:	7f28      	ldrb	r0, [r5, #28]
    3cde:	4b0a      	ldr	r3, [pc, #40]	; (3d08 <usbdc_reset+0x44>)
    3ce0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    3ce2:	4a0a      	ldr	r2, [pc, #40]	; (3d0c <usbdc_reset+0x48>)
    3ce4:	4621      	mov	r1, r4
    3ce6:	4620      	mov	r0, r4
    3ce8:	4d09      	ldr	r5, [pc, #36]	; (3d10 <usbdc_reset+0x4c>)
    3cea:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3cec:	4a09      	ldr	r2, [pc, #36]	; (3d14 <usbdc_reset+0x50>)
    3cee:	4631      	mov	r1, r6
    3cf0:	4620      	mov	r0, r4
    3cf2:	47a8      	blx	r5
	usb_d_ep_enable(0);
    3cf4:	4620      	mov	r0, r4
    3cf6:	4b08      	ldr	r3, [pc, #32]	; (3d18 <usbdc_reset+0x54>)
    3cf8:	4798      	blx	r3
    3cfa:	bd70      	pop	{r4, r5, r6, pc}
    3cfc:	00003ba5 	.word	0x00003ba5
    3d00:	20000398 	.word	0x20000398
    3d04:	00001045 	.word	0x00001045
    3d08:	00001031 	.word	0x00001031
    3d0c:	00003d5d 	.word	0x00003d5d
    3d10:	00001245 	.word	0x00001245
    3d14:	00003c51 	.word	0x00003c51
    3d18:	00001071 	.word	0x00001071

00003d1c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    3d1c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    3d1e:	b110      	cbz	r0, 3d26 <usbd_event_cb+0xa>
    3d20:	2801      	cmp	r0, #1
    3d22:	d004      	beq.n	3d2e <usbd_event_cb+0x12>
    3d24:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    3d26:	2000      	movs	r0, #0
    3d28:	4b02      	ldr	r3, [pc, #8]	; (3d34 <usbd_event_cb+0x18>)
    3d2a:	4798      	blx	r3
		break;
    3d2c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    3d2e:	4b02      	ldr	r3, [pc, #8]	; (3d38 <usbd_event_cb+0x1c>)
    3d30:	4798      	blx	r3
    3d32:	bd08      	pop	{r3, pc}
    3d34:	00003bc9 	.word	0x00003bc9
    3d38:	00003cc5 	.word	0x00003cc5

00003d3c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    3d3c:	b500      	push	{lr}
    3d3e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    3d40:	9101      	str	r1, [sp, #4]
    3d42:	9202      	str	r2, [sp, #8]
    3d44:	f88d 000c 	strb.w	r0, [sp, #12]
    3d48:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    3d4c:	a801      	add	r0, sp, #4
    3d4e:	4b02      	ldr	r3, [pc, #8]	; (3d58 <usbdc_xfer+0x1c>)
    3d50:	4798      	blx	r3
}
    3d52:	b005      	add	sp, #20
    3d54:	f85d fb04 	ldr.w	pc, [sp], #4
    3d58:	000010bd 	.word	0x000010bd

00003d5c <usbdc_cb_ctl_req>:
{
    3d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d60:	b083      	sub	sp, #12
    3d62:	4605      	mov	r5, r0
    3d64:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3d66:	2200      	movs	r2, #0
    3d68:	4b9b      	ldr	r3, [pc, #620]	; (3fd8 <usbdc_cb_ctl_req+0x27c>)
    3d6a:	4798      	blx	r3
    3d6c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3d70:	d00b      	beq.n	3d8a <usbdc_cb_ctl_req+0x2e>
    3d72:	2801      	cmp	r0, #1
    3d74:	f000 81e3 	beq.w	413e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3d78:	7823      	ldrb	r3, [r4, #0]
    3d7a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    3d7e:	d008      	beq.n	3d92 <usbdc_cb_ctl_req+0x36>
    3d80:	2a80      	cmp	r2, #128	; 0x80
    3d82:	f000 80f4 	beq.w	3f6e <usbdc_cb_ctl_req+0x212>
		return false;
    3d86:	2000      	movs	r0, #0
    3d88:	e000      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    3d8a:	2000      	movs	r0, #0
}
    3d8c:	b003      	add	sp, #12
    3d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    3d92:	7862      	ldrb	r2, [r4, #1]
    3d94:	3a01      	subs	r2, #1
    3d96:	2a0a      	cmp	r2, #10
    3d98:	f200 81d3 	bhi.w	4142 <usbdc_cb_ctl_req+0x3e6>
    3d9c:	e8df f012 	tbh	[pc, r2, lsl #1]
    3da0:	01d10060 	.word	0x01d10060
    3da4:	01d10076 	.word	0x01d10076
    3da8:	01d1000b 	.word	0x01d1000b
    3dac:	01d101d1 	.word	0x01d101d1
    3db0:	01d10015 	.word	0x01d10015
    3db4:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3db6:	2301      	movs	r3, #1
    3db8:	2200      	movs	r2, #0
    3dba:	4611      	mov	r1, r2
    3dbc:	4628      	mov	r0, r5
    3dbe:	4c87      	ldr	r4, [pc, #540]	; (3fdc <usbdc_cb_ctl_req+0x280>)
    3dc0:	47a0      	blx	r4
    3dc2:	fab0 f080 	clz	r0, r0
    3dc6:	0940      	lsrs	r0, r0, #5
    3dc8:	e7e0      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    3dca:	8862      	ldrh	r2, [r4, #2]
    3dcc:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    3dce:	b1ca      	cbz	r2, 3e04 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3dd0:	4b83      	ldr	r3, [pc, #524]	; (3fe0 <usbdc_cb_ctl_req+0x284>)
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	6859      	ldr	r1, [r3, #4]
    3dd6:	6818      	ldr	r0, [r3, #0]
    3dd8:	4b82      	ldr	r3, [pc, #520]	; (3fe4 <usbdc_cb_ctl_req+0x288>)
    3dda:	4798      	blx	r3
	if (NULL == cfg_desc) {
    3ddc:	2800      	cmp	r0, #0
    3dde:	f000 81be 	beq.w	415e <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    3de2:	78c2      	ldrb	r2, [r0, #3]
    3de4:	7881      	ldrb	r1, [r0, #2]
    3de6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    3dea:	fa10 f181 	uxtah	r1, r0, r1
    3dee:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3df0:	2204      	movs	r2, #4
    3df2:	4b7d      	ldr	r3, [pc, #500]	; (3fe8 <usbdc_cb_ctl_req+0x28c>)
    3df4:	4798      	blx	r3
    3df6:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3df8:	b130      	cbz	r0, 3e08 <usbdc_cb_ctl_req+0xac>
    3dfa:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3dfc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3fe0 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3e00:	4f79      	ldr	r7, [pc, #484]	; (3fe8 <usbdc_cb_ctl_req+0x28c>)
    3e02:	e018      	b.n	3e36 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    3e04:	4b79      	ldr	r3, [pc, #484]	; (3fec <usbdc_cb_ctl_req+0x290>)
    3e06:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3e08:	2301      	movs	r3, #1
    3e0a:	2200      	movs	r2, #0
    3e0c:	4611      	mov	r1, r2
    3e0e:	4628      	mov	r0, r5
    3e10:	4c72      	ldr	r4, [pc, #456]	; (3fdc <usbdc_cb_ctl_req+0x280>)
    3e12:	47a0      	blx	r4
    3e14:	fab0 f080 	clz	r0, r0
    3e18:	0940      	lsrs	r0, r0, #5
    3e1a:	e7b7      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    3e1c:	464c      	mov	r4, r9
    3e1e:	e000      	b.n	3e22 <usbdc_cb_ctl_req+0xc6>
    3e20:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    3e22:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3e24:	7803      	ldrb	r3, [r0, #0]
    3e26:	4418      	add	r0, r3
    3e28:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3e2a:	2204      	movs	r2, #4
    3e2c:	9901      	ldr	r1, [sp, #4]
    3e2e:	47b8      	blx	r7
    3e30:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    3e32:	2800      	cmp	r0, #0
    3e34:	d0e8      	beq.n	3e08 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    3e36:	f890 9002 	ldrb.w	r9, [r0, #2]
    3e3a:	45a1      	cmp	r9, r4
    3e3c:	d0f1      	beq.n	3e22 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    3e3e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    3e42:	2c00      	cmp	r4, #0
    3e44:	d0ea      	beq.n	3e1c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    3e46:	2600      	movs	r6, #0
    3e48:	6863      	ldr	r3, [r4, #4]
    3e4a:	466a      	mov	r2, sp
    3e4c:	4631      	mov	r1, r6
    3e4e:	4620      	mov	r0, r4
    3e50:	4798      	blx	r3
    3e52:	2800      	cmp	r0, #0
    3e54:	d0e4      	beq.n	3e20 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    3e56:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    3e58:	2c00      	cmp	r4, #0
    3e5a:	d1f5      	bne.n	3e48 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    3e5c:	464c      	mov	r4, r9
    3e5e:	e7e0      	b.n	3e22 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3e60:	f003 031f 	and.w	r3, r3, #31
    3e64:	2b02      	cmp	r3, #2
    3e66:	f040 816e 	bne.w	4146 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    3e6a:	88e3      	ldrh	r3, [r4, #6]
    3e6c:	b10b      	cbz	r3, 3e72 <usbdc_cb_ctl_req+0x116>
			return false;
    3e6e:	2000      	movs	r0, #0
    3e70:	e78c      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    3e72:	88a0      	ldrh	r0, [r4, #4]
    3e74:	2100      	movs	r1, #0
    3e76:	b2c0      	uxtb	r0, r0
    3e78:	4b5d      	ldr	r3, [pc, #372]	; (3ff0 <usbdc_cb_ctl_req+0x294>)
    3e7a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3e7c:	2301      	movs	r3, #1
    3e7e:	2200      	movs	r2, #0
    3e80:	4611      	mov	r1, r2
    3e82:	4628      	mov	r0, r5
    3e84:	4c55      	ldr	r4, [pc, #340]	; (3fdc <usbdc_cb_ctl_req+0x280>)
    3e86:	47a0      	blx	r4
		return true;
    3e88:	2001      	movs	r0, #1
    3e8a:	e77f      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3e8c:	f003 031f 	and.w	r3, r3, #31
    3e90:	2b02      	cmp	r3, #2
    3e92:	f040 815a 	bne.w	414a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    3e96:	88e3      	ldrh	r3, [r4, #6]
    3e98:	b10b      	cbz	r3, 3e9e <usbdc_cb_ctl_req+0x142>
			return false;
    3e9a:	2000      	movs	r0, #0
    3e9c:	e776      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    3e9e:	88a0      	ldrh	r0, [r4, #4]
    3ea0:	2101      	movs	r1, #1
    3ea2:	b2c0      	uxtb	r0, r0
    3ea4:	4b52      	ldr	r3, [pc, #328]	; (3ff0 <usbdc_cb_ctl_req+0x294>)
    3ea6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3ea8:	2301      	movs	r3, #1
    3eaa:	2200      	movs	r2, #0
    3eac:	4611      	mov	r1, r2
    3eae:	4628      	mov	r0, r5
    3eb0:	4c4a      	ldr	r4, [pc, #296]	; (3fdc <usbdc_cb_ctl_req+0x280>)
    3eb2:	47a0      	blx	r4
		return true;
    3eb4:	2001      	movs	r0, #1
    3eb6:	e769      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3eb8:	8866      	ldrh	r6, [r4, #2]
    3eba:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3ebc:	4a48      	ldr	r2, [pc, #288]	; (3fe0 <usbdc_cb_ctl_req+0x284>)
    3ebe:	6813      	ldr	r3, [r2, #0]
    3ec0:	7ed2      	ldrb	r2, [r2, #27]
    3ec2:	6859      	ldr	r1, [r3, #4]
    3ec4:	6818      	ldr	r0, [r3, #0]
    3ec6:	4b47      	ldr	r3, [pc, #284]	; (3fe4 <usbdc_cb_ctl_req+0x288>)
    3ec8:	4798      	blx	r3
	if (NULL == ifc) {
    3eca:	2800      	cmp	r0, #0
    3ecc:	d045      	beq.n	3f5a <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    3ece:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    3ed0:	78c2      	ldrb	r2, [r0, #3]
    3ed2:	7881      	ldrb	r1, [r0, #2]
    3ed4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3ed8:	fa10 f181 	uxtah	r1, r0, r1
    3edc:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3ede:	2204      	movs	r2, #4
    3ee0:	4b41      	ldr	r3, [pc, #260]	; (3fe8 <usbdc_cb_ctl_req+0x28c>)
    3ee2:	4798      	blx	r3
    3ee4:	4603      	mov	r3, r0
    3ee6:	2800      	cmp	r0, #0
    3ee8:	d039      	beq.n	3f5e <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3eea:	2704      	movs	r7, #4
    3eec:	4d3e      	ldr	r5, [pc, #248]	; (3fe8 <usbdc_cb_ctl_req+0x28c>)
    3eee:	e008      	b.n	3f02 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    3ef0:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    3ef2:	7803      	ldrb	r3, [r0, #0]
    3ef4:	4418      	add	r0, r3
    3ef6:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3ef8:	463a      	mov	r2, r7
    3efa:	9901      	ldr	r1, [sp, #4]
    3efc:	47a8      	blx	r5
		if (NULL == ifc) {
    3efe:	4603      	mov	r3, r0
    3f00:	b378      	cbz	r0, 3f62 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3f02:	789a      	ldrb	r2, [r3, #2]
    3f04:	42a2      	cmp	r2, r4
    3f06:	d1f3      	bne.n	3ef0 <usbdc_cb_ctl_req+0x194>
    3f08:	78da      	ldrb	r2, [r3, #3]
    3f0a:	42b2      	cmp	r2, r6
    3f0c:	d1f0      	bne.n	3ef0 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    3f0e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    3f10:	4b33      	ldr	r3, [pc, #204]	; (3fe0 <usbdc_cb_ctl_req+0x284>)
    3f12:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    3f14:	b33d      	cbz	r5, 3f66 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    3f16:	2701      	movs	r7, #1
    3f18:	686b      	ldr	r3, [r5, #4]
    3f1a:	466a      	mov	r2, sp
    3f1c:	4639      	mov	r1, r7
    3f1e:	4628      	mov	r0, r5
    3f20:	4798      	blx	r3
    3f22:	b120      	cbz	r0, 3f2e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    3f24:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3f26:	2d00      	cmp	r5, #0
    3f28:	d1f6      	bne.n	3f18 <usbdc_cb_ctl_req+0x1bc>
	return false;
    3f2a:	2000      	movs	r0, #0
    3f2c:	e72e      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    3f2e:	686b      	ldr	r3, [r5, #4]
    3f30:	466a      	mov	r2, sp
    3f32:	2100      	movs	r1, #0
    3f34:	4628      	mov	r0, r5
    3f36:	4798      	blx	r3
    3f38:	b9b8      	cbnz	r0, 3f6a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    3f3a:	b136      	cbz	r6, 3f4a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    3f3c:	4a28      	ldr	r2, [pc, #160]	; (3fe0 <usbdc_cb_ctl_req+0x284>)
    3f3e:	2301      	movs	r3, #1
    3f40:	fa03 f404 	lsl.w	r4, r3, r4
    3f44:	7f53      	ldrb	r3, [r2, #29]
    3f46:	4323      	orrs	r3, r4
    3f48:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    3f4a:	2300      	movs	r3, #0
    3f4c:	461a      	mov	r2, r3
    3f4e:	4619      	mov	r1, r3
    3f50:	4618      	mov	r0, r3
    3f52:	4c22      	ldr	r4, [pc, #136]	; (3fdc <usbdc_cb_ctl_req+0x280>)
    3f54:	47a0      	blx	r4
			return true;
    3f56:	2001      	movs	r0, #1
    3f58:	e718      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    3f5a:	2000      	movs	r0, #0
    3f5c:	e716      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    3f5e:	2000      	movs	r0, #0
    3f60:	e714      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
			return false;
    3f62:	2000      	movs	r0, #0
    3f64:	e712      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
	return false;
    3f66:	2000      	movs	r0, #0
    3f68:	e710      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
			return false;
    3f6a:	2000      	movs	r0, #0
    3f6c:	e70e      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    3f6e:	7862      	ldrb	r2, [r4, #1]
    3f70:	2a0a      	cmp	r2, #10
    3f72:	f200 80ec 	bhi.w	414e <usbdc_cb_ctl_req+0x3f2>
    3f76:	e8df f012 	tbh	[pc, r2, lsl #1]
    3f7a:	008e      	.short	0x008e
    3f7c:	00ea00ea 	.word	0x00ea00ea
    3f80:	00ea00ea 	.word	0x00ea00ea
    3f84:	000b00ea 	.word	0x000b00ea
    3f88:	008200ea 	.word	0x008200ea
    3f8c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3f90:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    3f92:	0a13      	lsrs	r3, r2, #8
    3f94:	2b02      	cmp	r3, #2
    3f96:	d02d      	beq.n	3ff4 <usbdc_cb_ctl_req+0x298>
    3f98:	2b03      	cmp	r3, #3
    3f9a:	d050      	beq.n	403e <usbdc_cb_ctl_req+0x2e2>
    3f9c:	2b01      	cmp	r3, #1
    3f9e:	d001      	beq.n	3fa4 <usbdc_cb_ctl_req+0x248>
	return false;
    3fa0:	2000      	movs	r0, #0
    3fa2:	e6f3      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    3fa4:	88e2      	ldrh	r2, [r4, #6]
    3fa6:	2a12      	cmp	r2, #18
    3fa8:	bf28      	it	cs
    3faa:	2212      	movcs	r2, #18
    3fac:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    3fae:	4b0c      	ldr	r3, [pc, #48]	; (3fe0 <usbdc_cb_ctl_req+0x284>)
    3fb0:	681b      	ldr	r3, [r3, #0]
    3fb2:	2201      	movs	r2, #1
    3fb4:	6859      	ldr	r1, [r3, #4]
    3fb6:	6818      	ldr	r0, [r3, #0]
    3fb8:	4b0b      	ldr	r3, [pc, #44]	; (3fe8 <usbdc_cb_ctl_req+0x28c>)
    3fba:	4798      	blx	r3
	if (!dev_desc) {
    3fbc:	4601      	mov	r1, r0
    3fbe:	2800      	cmp	r0, #0
    3fc0:	f000 80c7 	beq.w	4152 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    3fc4:	2300      	movs	r3, #0
    3fc6:	4622      	mov	r2, r4
    3fc8:	4628      	mov	r0, r5
    3fca:	4c04      	ldr	r4, [pc, #16]	; (3fdc <usbdc_cb_ctl_req+0x280>)
    3fcc:	47a0      	blx	r4
    3fce:	fab0 f080 	clz	r0, r0
    3fd2:	0940      	lsrs	r0, r0, #5
    3fd4:	e6da      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
    3fd6:	bf00      	nop
    3fd8:	00003bf1 	.word	0x00003bf1
    3fdc:	00003d3d 	.word	0x00003d3d
    3fe0:	20000398 	.word	0x20000398
    3fe4:	00004301 	.word	0x00004301
    3fe8:	00004281 	.word	0x00004281
    3fec:	00003ba5 	.word	0x00003ba5
    3ff0:	000011dd 	.word	0x000011dd
	uint16_t length   = req->wLength;
    3ff4:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3ff6:	4b5b      	ldr	r3, [pc, #364]	; (4164 <usbdc_cb_ctl_req+0x408>)
    3ff8:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	3201      	adds	r2, #1
    3ffe:	b2d2      	uxtb	r2, r2
    4000:	6859      	ldr	r1, [r3, #4]
    4002:	6818      	ldr	r0, [r3, #0]
    4004:	4b58      	ldr	r3, [pc, #352]	; (4168 <usbdc_cb_ctl_req+0x40c>)
    4006:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4008:	4601      	mov	r1, r0
    400a:	2800      	cmp	r0, #0
    400c:	f000 80a3 	beq.w	4156 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    4010:	78c3      	ldrb	r3, [r0, #3]
    4012:	7882      	ldrb	r2, [r0, #2]
    4014:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    4018:	b292      	uxth	r2, r2
	if (length <= total_len) {
    401a:	4294      	cmp	r4, r2
    401c:	d90d      	bls.n	403a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    401e:	3e01      	subs	r6, #1
    4020:	4226      	tst	r6, r4
    4022:	bf0c      	ite	eq
    4024:	2301      	moveq	r3, #1
    4026:	2300      	movne	r3, #0
		length = total_len;
    4028:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    402a:	4622      	mov	r2, r4
    402c:	4628      	mov	r0, r5
    402e:	4c4f      	ldr	r4, [pc, #316]	; (416c <usbdc_cb_ctl_req+0x410>)
    4030:	47a0      	blx	r4
    4032:	fab0 f080 	clz	r0, r0
    4036:	0940      	lsrs	r0, r0, #5
    4038:	e6a8      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    403a:	2300      	movs	r3, #0
    403c:	e7f5      	b.n	402a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    403e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4040:	4b48      	ldr	r3, [pc, #288]	; (4164 <usbdc_cb_ctl_req+0x408>)
    4042:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    4044:	681b      	ldr	r3, [r3, #0]
    4046:	b2d2      	uxtb	r2, r2
    4048:	6859      	ldr	r1, [r3, #4]
    404a:	6818      	ldr	r0, [r3, #0]
    404c:	4b48      	ldr	r3, [pc, #288]	; (4170 <usbdc_cb_ctl_req+0x414>)
    404e:	4798      	blx	r3
	if (NULL == str_desc) {
    4050:	4601      	mov	r1, r0
    4052:	2800      	cmp	r0, #0
    4054:	f000 8081 	beq.w	415a <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    4058:	7802      	ldrb	r2, [r0, #0]
    405a:	4294      	cmp	r4, r2
    405c:	d90d      	bls.n	407a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    405e:	3e01      	subs	r6, #1
    4060:	4226      	tst	r6, r4
    4062:	bf0c      	ite	eq
    4064:	2301      	moveq	r3, #1
    4066:	2300      	movne	r3, #0
		length = str_desc[0];
    4068:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    406a:	4622      	mov	r2, r4
    406c:	4628      	mov	r0, r5
    406e:	4c3f      	ldr	r4, [pc, #252]	; (416c <usbdc_cb_ctl_req+0x410>)
    4070:	47a0      	blx	r4
    4072:	fab0 f080 	clz	r0, r0
    4076:	0940      	lsrs	r0, r0, #5
    4078:	e688      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    407a:	2300      	movs	r3, #0
    407c:	e7f5      	b.n	406a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    407e:	4939      	ldr	r1, [pc, #228]	; (4164 <usbdc_cb_ctl_req+0x408>)
    4080:	694b      	ldr	r3, [r1, #20]
    4082:	7eca      	ldrb	r2, [r1, #27]
    4084:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4086:	2300      	movs	r3, #0
    4088:	2201      	movs	r2, #1
    408a:	6949      	ldr	r1, [r1, #20]
    408c:	4628      	mov	r0, r5
    408e:	4c37      	ldr	r4, [pc, #220]	; (416c <usbdc_cb_ctl_req+0x410>)
    4090:	47a0      	blx	r4
		return true;
    4092:	2001      	movs	r0, #1
    4094:	e67a      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4096:	f003 031f 	and.w	r3, r3, #31
    409a:	2b01      	cmp	r3, #1
    409c:	d903      	bls.n	40a6 <usbdc_cb_ctl_req+0x34a>
    409e:	2b02      	cmp	r3, #2
    40a0:	d010      	beq.n	40c4 <usbdc_cb_ctl_req+0x368>
		return false;
    40a2:	2000      	movs	r0, #0
    40a4:	e672      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		st = 0;
    40a6:	2300      	movs	r3, #0
    40a8:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    40aa:	492e      	ldr	r1, [pc, #184]	; (4164 <usbdc_cb_ctl_req+0x408>)
    40ac:	694b      	ldr	r3, [r1, #20]
    40ae:	f8bd 2000 	ldrh.w	r2, [sp]
    40b2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    40b4:	2300      	movs	r3, #0
    40b6:	2202      	movs	r2, #2
    40b8:	6949      	ldr	r1, [r1, #20]
    40ba:	4628      	mov	r0, r5
    40bc:	4c2b      	ldr	r4, [pc, #172]	; (416c <usbdc_cb_ctl_req+0x410>)
    40be:	47a0      	blx	r4
	return true;
    40c0:	2001      	movs	r0, #1
    40c2:	e663      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    40c4:	88a0      	ldrh	r0, [r4, #4]
    40c6:	2102      	movs	r1, #2
    40c8:	b2c0      	uxtb	r0, r0
    40ca:	4b2a      	ldr	r3, [pc, #168]	; (4174 <usbdc_cb_ctl_req+0x418>)
    40cc:	4798      	blx	r3
		if (st < 0) {
    40ce:	2800      	cmp	r0, #0
    40d0:	db03      	blt.n	40da <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    40d2:	f000 0001 	and.w	r0, r0, #1
    40d6:	9000      	str	r0, [sp, #0]
    40d8:	e7e7      	b.n	40aa <usbdc_cb_ctl_req+0x34e>
			return false;
    40da:	2000      	movs	r0, #0
    40dc:	e656      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    40de:	4b21      	ldr	r3, [pc, #132]	; (4164 <usbdc_cb_ctl_req+0x408>)
    40e0:	7f5b      	ldrb	r3, [r3, #29]
    40e2:	88a2      	ldrh	r2, [r4, #4]
    40e4:	4113      	asrs	r3, r2
    40e6:	f013 0f01 	tst.w	r3, #1
    40ea:	d012      	beq.n	4112 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    40ec:	4b1d      	ldr	r3, [pc, #116]	; (4164 <usbdc_cb_ctl_req+0x408>)
    40ee:	691d      	ldr	r5, [r3, #16]
	return false;
    40f0:	2000      	movs	r0, #0
	while (NULL != func) {
    40f2:	2d00      	cmp	r5, #0
    40f4:	f43f ae4a 	beq.w	3d8c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    40f8:	2602      	movs	r6, #2
    40fa:	686b      	ldr	r3, [r5, #4]
    40fc:	4622      	mov	r2, r4
    40fe:	4631      	mov	r1, r6
    4100:	4628      	mov	r0, r5
    4102:	4798      	blx	r3
    4104:	2800      	cmp	r0, #0
    4106:	da0f      	bge.n	4128 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    4108:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    410a:	2d00      	cmp	r5, #0
    410c:	d1f5      	bne.n	40fa <usbdc_cb_ctl_req+0x39e>
	return false;
    410e:	2000      	movs	r0, #0
    4110:	e63c      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    4112:	4914      	ldr	r1, [pc, #80]	; (4164 <usbdc_cb_ctl_req+0x408>)
    4114:	694b      	ldr	r3, [r1, #20]
    4116:	2000      	movs	r0, #0
    4118:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    411a:	4603      	mov	r3, r0
    411c:	2201      	movs	r2, #1
    411e:	6949      	ldr	r1, [r1, #20]
    4120:	4c12      	ldr	r4, [pc, #72]	; (416c <usbdc_cb_ctl_req+0x410>)
    4122:	47a0      	blx	r4
		return true;
    4124:	2001      	movs	r0, #1
    4126:	e631      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    4128:	490e      	ldr	r1, [pc, #56]	; (4164 <usbdc_cb_ctl_req+0x408>)
    412a:	694b      	ldr	r3, [r1, #20]
    412c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    412e:	2300      	movs	r3, #0
    4130:	2201      	movs	r2, #1
    4132:	6949      	ldr	r1, [r1, #20]
    4134:	4618      	mov	r0, r3
    4136:	4c0d      	ldr	r4, [pc, #52]	; (416c <usbdc_cb_ctl_req+0x410>)
    4138:	47a0      	blx	r4
			return true;
    413a:	2001      	movs	r0, #1
    413c:	e626      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return true;
    413e:	2001      	movs	r0, #1
    4140:	e624      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    4142:	2000      	movs	r0, #0
    4144:	e622      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    4146:	2000      	movs	r0, #0
    4148:	e620      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    414a:	2000      	movs	r0, #0
    414c:	e61e      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    414e:	2000      	movs	r0, #0
    4150:	e61c      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    4152:	2000      	movs	r0, #0
    4154:	e61a      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    4156:	2000      	movs	r0, #0
    4158:	e618      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
		return false;
    415a:	2000      	movs	r0, #0
    415c:	e616      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
			return false;
    415e:	2000      	movs	r0, #0
    4160:	e614      	b.n	3d8c <usbdc_cb_ctl_req+0x30>
    4162:	bf00      	nop
    4164:	20000398 	.word	0x20000398
    4168:	00004301 	.word	0x00004301
    416c:	00003d3d 	.word	0x00003d3d
    4170:	00004369 	.word	0x00004369
    4174:	000011dd 	.word	0x000011dd

00004178 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4178:	b508      	push	{r3, lr}
	switch (type) {
    417a:	2801      	cmp	r0, #1
    417c:	d007      	beq.n	418e <usbdc_register_handler+0x16>
    417e:	b110      	cbz	r0, 4186 <usbdc_register_handler+0xe>
    4180:	2802      	cmp	r0, #2
    4182:	d008      	beq.n	4196 <usbdc_register_handler+0x1e>
    4184:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4186:	4806      	ldr	r0, [pc, #24]	; (41a0 <usbdc_register_handler+0x28>)
    4188:	4b06      	ldr	r3, [pc, #24]	; (41a4 <usbdc_register_handler+0x2c>)
    418a:	4798      	blx	r3
		break;
    418c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    418e:	4806      	ldr	r0, [pc, #24]	; (41a8 <usbdc_register_handler+0x30>)
    4190:	4b04      	ldr	r3, [pc, #16]	; (41a4 <usbdc_register_handler+0x2c>)
    4192:	4798      	blx	r3
		break;
    4194:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4196:	4805      	ldr	r0, [pc, #20]	; (41ac <usbdc_register_handler+0x34>)
    4198:	4b02      	ldr	r3, [pc, #8]	; (41a4 <usbdc_register_handler+0x2c>)
    419a:	4798      	blx	r3
    419c:	bd08      	pop	{r3, pc}
    419e:	bf00      	nop
    41a0:	2000039c 	.word	0x2000039c
    41a4:	000012ed 	.word	0x000012ed
    41a8:	200003a0 	.word	0x200003a0
    41ac:	200003a4 	.word	0x200003a4

000041b0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    41b0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    41b2:	4605      	mov	r5, r0
    41b4:	f240 3255 	movw	r2, #853	; 0x355
    41b8:	490c      	ldr	r1, [pc, #48]	; (41ec <usbdc_init+0x3c>)
    41ba:	3000      	adds	r0, #0
    41bc:	bf18      	it	ne
    41be:	2001      	movne	r0, #1
    41c0:	4b0b      	ldr	r3, [pc, #44]	; (41f0 <usbdc_init+0x40>)
    41c2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    41c4:	4b0b      	ldr	r3, [pc, #44]	; (41f4 <usbdc_init+0x44>)
    41c6:	4798      	blx	r3
	if (rc < 0) {
    41c8:	2800      	cmp	r0, #0
    41ca:	db0e      	blt.n	41ea <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    41cc:	4c0a      	ldr	r4, [pc, #40]	; (41f8 <usbdc_init+0x48>)
    41ce:	2220      	movs	r2, #32
    41d0:	2100      	movs	r1, #0
    41d2:	4620      	mov	r0, r4
    41d4:	4b09      	ldr	r3, [pc, #36]	; (41fc <usbdc_init+0x4c>)
    41d6:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    41d8:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    41da:	4909      	ldr	r1, [pc, #36]	; (4200 <usbdc_init+0x50>)
    41dc:	2000      	movs	r0, #0
    41de:	4c09      	ldr	r4, [pc, #36]	; (4204 <usbdc_init+0x54>)
    41e0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    41e2:	4909      	ldr	r1, [pc, #36]	; (4208 <usbdc_init+0x58>)
    41e4:	2001      	movs	r0, #1
    41e6:	47a0      	blx	r4

	return 0;
    41e8:	2000      	movs	r0, #0
}
    41ea:	bd38      	pop	{r3, r4, r5, pc}
    41ec:	000046f8 	.word	0x000046f8
    41f0:	00001291 	.word	0x00001291
    41f4:	00000f45 	.word	0x00000f45
    41f8:	20000398 	.word	0x20000398
    41fc:	0000444b 	.word	0x0000444b
    4200:	00003c31 	.word	0x00003c31
    4204:	00000fad 	.word	0x00000fad
    4208:	00003d1d 	.word	0x00003d1d

0000420c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    420c:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    420e:	4601      	mov	r1, r0
    4210:	4801      	ldr	r0, [pc, #4]	; (4218 <usbdc_register_function+0xc>)
    4212:	4b02      	ldr	r3, [pc, #8]	; (421c <usbdc_register_function+0x10>)
    4214:	4798      	blx	r3
    4216:	bd08      	pop	{r3, pc}
    4218:	200003a8 	.word	0x200003a8
    421c:	000012ed 	.word	0x000012ed

00004220 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    4220:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    4222:	4b0a      	ldr	r3, [pc, #40]	; (424c <usbdc_start+0x2c>)
    4224:	7e9b      	ldrb	r3, [r3, #26]
    4226:	b95b      	cbnz	r3, 4240 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    4228:	b168      	cbz	r0, 4246 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    422a:	4b08      	ldr	r3, [pc, #32]	; (424c <usbdc_start+0x2c>)
    422c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    422e:	6802      	ldr	r2, [r0, #0]
    4230:	79d2      	ldrb	r2, [r2, #7]
    4232:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    4234:	2201      	movs	r2, #1
    4236:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    4238:	4b05      	ldr	r3, [pc, #20]	; (4250 <usbdc_start+0x30>)
    423a:	4798      	blx	r3
	return ERR_NONE;
    423c:	2000      	movs	r0, #0
    423e:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    4240:	f06f 0003 	mvn.w	r0, #3
    4244:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    4246:	f06f 0008 	mvn.w	r0, #8
}
    424a:	bd08      	pop	{r3, pc}
    424c:	20000398 	.word	0x20000398
    4250:	00000fb9 	.word	0x00000fb9

00004254 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4254:	b508      	push	{r3, lr}
	usb_d_attach();
    4256:	4b01      	ldr	r3, [pc, #4]	; (425c <usbdc_attach+0x8>)
    4258:	4798      	blx	r3
    425a:	bd08      	pop	{r3, pc}
    425c:	00000fc5 	.word	0x00000fc5

00004260 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    4260:	4b01      	ldr	r3, [pc, #4]	; (4268 <usbdc_get_ctrl_buffer+0x8>)
    4262:	6958      	ldr	r0, [r3, #20]
    4264:	4770      	bx	lr
    4266:	bf00      	nop
    4268:	20000398 	.word	0x20000398

0000426c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <usbdc_get_state+0x10>)
    426e:	7e98      	ldrb	r0, [r3, #26]
    4270:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    4274:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    4276:	bf18      	it	ne
    4278:	2010      	movne	r0, #16
    427a:	4770      	bx	lr
    427c:	20000398 	.word	0x20000398

00004280 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4280:	4288      	cmp	r0, r1
    4282:	d214      	bcs.n	42ae <usb_find_desc+0x2e>
	return desc[0];
    4284:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4286:	2b01      	cmp	r3, #1
    4288:	d913      	bls.n	42b2 <usb_find_desc+0x32>
{
    428a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    428c:	7844      	ldrb	r4, [r0, #1]
    428e:	4294      	cmp	r4, r2
    4290:	d00a      	beq.n	42a8 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    4292:	4418      	add	r0, r3
	while (desc < eof) {
    4294:	4281      	cmp	r1, r0
    4296:	d906      	bls.n	42a6 <usb_find_desc+0x26>
	return desc[0];
    4298:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    429a:	2b01      	cmp	r3, #1
    429c:	d90b      	bls.n	42b6 <usb_find_desc+0x36>
	return desc[1];
    429e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    42a0:	4294      	cmp	r4, r2
    42a2:	d1f6      	bne.n	4292 <usb_find_desc+0x12>
    42a4:	e000      	b.n	42a8 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    42a6:	2000      	movs	r0, #0
}
    42a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    42ac:	4770      	bx	lr
	return NULL;
    42ae:	2000      	movs	r0, #0
    42b0:	4770      	bx	lr
		_desc_len_check();
    42b2:	2000      	movs	r0, #0
    42b4:	4770      	bx	lr
    42b6:	2000      	movs	r0, #0
    42b8:	e7f6      	b.n	42a8 <usb_find_desc+0x28>

000042ba <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    42ba:	4288      	cmp	r0, r1
    42bc:	d216      	bcs.n	42ec <usb_find_ep_desc+0x32>
	return desc[0];
    42be:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    42c0:	2b01      	cmp	r3, #1
    42c2:	d915      	bls.n	42f0 <usb_find_ep_desc+0x36>
	return desc[1];
    42c4:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    42c6:	2a04      	cmp	r2, #4
    42c8:	d014      	beq.n	42f4 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    42ca:	2a05      	cmp	r2, #5
    42cc:	d00b      	beq.n	42e6 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    42ce:	4418      	add	r0, r3
	while (desc < eof) {
    42d0:	4281      	cmp	r1, r0
    42d2:	d909      	bls.n	42e8 <usb_find_ep_desc+0x2e>
	return desc[0];
    42d4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    42d6:	2b01      	cmp	r3, #1
    42d8:	d90e      	bls.n	42f8 <usb_find_ep_desc+0x3e>
	return desc[1];
    42da:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    42dc:	2a04      	cmp	r2, #4
    42de:	d00d      	beq.n	42fc <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    42e0:	2a05      	cmp	r2, #5
    42e2:	d1f4      	bne.n	42ce <usb_find_ep_desc+0x14>
    42e4:	e00b      	b.n	42fe <usb_find_ep_desc+0x44>
    42e6:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    42e8:	2000      	movs	r0, #0
    42ea:	4770      	bx	lr
    42ec:	2000      	movs	r0, #0
    42ee:	4770      	bx	lr
		_desc_len_check();
    42f0:	2000      	movs	r0, #0
    42f2:	4770      	bx	lr
	return NULL;
    42f4:	2000      	movs	r0, #0
    42f6:	4770      	bx	lr
		_desc_len_check();
    42f8:	2000      	movs	r0, #0
    42fa:	4770      	bx	lr
	return NULL;
    42fc:	2000      	movs	r0, #0
}
    42fe:	4770      	bx	lr

00004300 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4300:	b538      	push	{r3, r4, r5, lr}
    4302:	460c      	mov	r4, r1
    4304:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4306:	2202      	movs	r2, #2
    4308:	4b16      	ldr	r3, [pc, #88]	; (4364 <usb_find_cfg_desc+0x64>)
    430a:	4798      	blx	r3
	if (!desc) {
    430c:	4603      	mov	r3, r0
    430e:	b1e8      	cbz	r0, 434c <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    4310:	4284      	cmp	r4, r0
    4312:	d91d      	bls.n	4350 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    4314:	7802      	ldrb	r2, [r0, #0]
    4316:	2a01      	cmp	r2, #1
    4318:	d91c      	bls.n	4354 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    431a:	7842      	ldrb	r2, [r0, #1]
    431c:	2a02      	cmp	r2, #2
    431e:	d11b      	bne.n	4358 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    4320:	7942      	ldrb	r2, [r0, #5]
    4322:	42aa      	cmp	r2, r5
    4324:	d012      	beq.n	434c <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    4326:	78d9      	ldrb	r1, [r3, #3]
    4328:	789a      	ldrb	r2, [r3, #2]
    432a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    432e:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    4332:	429c      	cmp	r4, r3
    4334:	d909      	bls.n	434a <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    4336:	781a      	ldrb	r2, [r3, #0]
    4338:	2a01      	cmp	r2, #1
    433a:	d90f      	bls.n	435c <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    433c:	785a      	ldrb	r2, [r3, #1]
    433e:	2a02      	cmp	r2, #2
    4340:	d10e      	bne.n	4360 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    4342:	795a      	ldrb	r2, [r3, #5]
    4344:	42aa      	cmp	r2, r5
    4346:	d1ee      	bne.n	4326 <usb_find_cfg_desc+0x26>
    4348:	e000      	b.n	434c <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    434a:	2300      	movs	r3, #0
}
    434c:	4618      	mov	r0, r3
    434e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    4350:	2300      	movs	r3, #0
    4352:	e7fb      	b.n	434c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4354:	2300      	movs	r3, #0
    4356:	e7f9      	b.n	434c <usb_find_cfg_desc+0x4c>
	return NULL;
    4358:	2300      	movs	r3, #0
    435a:	e7f7      	b.n	434c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    435c:	2300      	movs	r3, #0
    435e:	e7f5      	b.n	434c <usb_find_cfg_desc+0x4c>
	return NULL;
    4360:	2300      	movs	r3, #0
    4362:	e7f3      	b.n	434c <usb_find_cfg_desc+0x4c>
    4364:	00004281 	.word	0x00004281

00004368 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4368:	4288      	cmp	r0, r1
    436a:	d217      	bcs.n	439c <usb_find_str_desc+0x34>
{
    436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4370:	460d      	mov	r5, r1
    4372:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    4374:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4376:	f04f 0803 	mov.w	r8, #3
    437a:	4f0c      	ldr	r7, [pc, #48]	; (43ac <usb_find_str_desc+0x44>)
    437c:	4642      	mov	r2, r8
    437e:	4629      	mov	r1, r5
    4380:	47b8      	blx	r7
		if (desc) {
    4382:	4603      	mov	r3, r0
    4384:	b170      	cbz	r0, 43a4 <usb_find_str_desc+0x3c>
	return desc[0];
    4386:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    4388:	2801      	cmp	r0, #1
    438a:	d90a      	bls.n	43a2 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    438c:	42a6      	cmp	r6, r4
    438e:	d009      	beq.n	43a4 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    4390:	4418      	add	r0, r3
    4392:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    4394:	4285      	cmp	r5, r0
    4396:	d8f1      	bhi.n	437c <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4398:	2300      	movs	r3, #0
    439a:	e003      	b.n	43a4 <usb_find_str_desc+0x3c>
    439c:	2300      	movs	r3, #0
}
    439e:	4618      	mov	r0, r3
    43a0:	4770      	bx	lr
			_desc_len_check();
    43a2:	2300      	movs	r3, #0
}
    43a4:	4618      	mov	r0, r3
    43a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43aa:	bf00      	nop
    43ac:	00004281 	.word	0x00004281

000043b0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    43b0:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    43b2:	4805      	ldr	r0, [pc, #20]	; (43c8 <cdc_device_acm_init+0x18>)
    43b4:	4b05      	ldr	r3, [pc, #20]	; (43cc <cdc_device_acm_init+0x1c>)
    43b6:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    43b8:	4b05      	ldr	r3, [pc, #20]	; (43d0 <cdc_device_acm_init+0x20>)
    43ba:	4798      	blx	r3

	usbdc_start(single_desc);
    43bc:	4805      	ldr	r0, [pc, #20]	; (43d4 <cdc_device_acm_init+0x24>)
    43be:	4b06      	ldr	r3, [pc, #24]	; (43d8 <cdc_device_acm_init+0x28>)
    43c0:	4798      	blx	r3
	usbdc_attach();
    43c2:	4b06      	ldr	r3, [pc, #24]	; (43dc <cdc_device_acm_init+0x2c>)
    43c4:	4798      	blx	r3
    43c6:	bd08      	pop	{r3, pc}
    43c8:	200003f8 	.word	0x200003f8
    43cc:	000041b1 	.word	0x000041b1
    43d0:	00003b61 	.word	0x00003b61
    43d4:	2000005c 	.word	0x2000005c
    43d8:	00004221 	.word	0x00004221
    43dc:	00004255 	.word	0x00004255

000043e0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    43e0:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    43e2:	4b01      	ldr	r3, [pc, #4]	; (43e8 <usb_init+0x8>)
    43e4:	4798      	blx	r3
    43e6:	bd08      	pop	{r3, pc}
    43e8:	000043b1 	.word	0x000043b1

000043ec <__libc_init_array>:
    43ec:	b570      	push	{r4, r5, r6, lr}
    43ee:	4e0d      	ldr	r6, [pc, #52]	; (4424 <__libc_init_array+0x38>)
    43f0:	4c0d      	ldr	r4, [pc, #52]	; (4428 <__libc_init_array+0x3c>)
    43f2:	1ba4      	subs	r4, r4, r6
    43f4:	10a4      	asrs	r4, r4, #2
    43f6:	2500      	movs	r5, #0
    43f8:	42a5      	cmp	r5, r4
    43fa:	d109      	bne.n	4410 <__libc_init_array+0x24>
    43fc:	4e0b      	ldr	r6, [pc, #44]	; (442c <__libc_init_array+0x40>)
    43fe:	4c0c      	ldr	r4, [pc, #48]	; (4430 <__libc_init_array+0x44>)
    4400:	f000 f986 	bl	4710 <_init>
    4404:	1ba4      	subs	r4, r4, r6
    4406:	10a4      	asrs	r4, r4, #2
    4408:	2500      	movs	r5, #0
    440a:	42a5      	cmp	r5, r4
    440c:	d105      	bne.n	441a <__libc_init_array+0x2e>
    440e:	bd70      	pop	{r4, r5, r6, pc}
    4410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4414:	4798      	blx	r3
    4416:	3501      	adds	r5, #1
    4418:	e7ee      	b.n	43f8 <__libc_init_array+0xc>
    441a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    441e:	4798      	blx	r3
    4420:	3501      	adds	r5, #1
    4422:	e7f2      	b.n	440a <__libc_init_array+0x1e>
    4424:	0000471c 	.word	0x0000471c
    4428:	0000471c 	.word	0x0000471c
    442c:	0000471c 	.word	0x0000471c
    4430:	00004720 	.word	0x00004720

00004434 <memcpy>:
    4434:	b510      	push	{r4, lr}
    4436:	1e43      	subs	r3, r0, #1
    4438:	440a      	add	r2, r1
    443a:	4291      	cmp	r1, r2
    443c:	d100      	bne.n	4440 <memcpy+0xc>
    443e:	bd10      	pop	{r4, pc}
    4440:	f811 4b01 	ldrb.w	r4, [r1], #1
    4444:	f803 4f01 	strb.w	r4, [r3, #1]!
    4448:	e7f7      	b.n	443a <memcpy+0x6>

0000444a <memset>:
    444a:	4402      	add	r2, r0
    444c:	4603      	mov	r3, r0
    444e:	4293      	cmp	r3, r2
    4450:	d100      	bne.n	4454 <memset+0xa>
    4452:	4770      	bx	lr
    4454:	f803 1b01 	strb.w	r1, [r3], #1
    4458:	e7f9      	b.n	444e <memset+0x4>
    445a:	0000      	movs	r0, r0
    445c:	682f2e2e 	.word	0x682f2e2e
    4460:	732f6c61 	.word	0x732f6c61
    4464:	682f6372 	.word	0x682f6372
    4468:	635f6c61 	.word	0x635f6c61
    446c:	615f6e61 	.word	0x615f6e61
    4470:	636e7973 	.word	0x636e7973
    4474:	0000632e 	.word	0x0000632e
    4478:	682f2e2e 	.word	0x682f2e2e
    447c:	732f6c61 	.word	0x732f6c61
    4480:	682f6372 	.word	0x682f6372
    4484:	695f6c61 	.word	0x695f6c61
    4488:	6d5f6332 	.word	0x6d5f6332
    448c:	6e79735f 	.word	0x6e79735f
    4490:	00632e63 	.word	0x00632e63
    4494:	682f2e2e 	.word	0x682f2e2e
    4498:	732f6c61 	.word	0x732f6c61
    449c:	682f6372 	.word	0x682f6372
    44a0:	735f6c61 	.word	0x735f6c61
    44a4:	6d5f6970 	.word	0x6d5f6970
    44a8:	6e79735f 	.word	0x6e79735f
    44ac:	00632e63 	.word	0x00632e63
    44b0:	682f2e2e 	.word	0x682f2e2e
    44b4:	732f6c61 	.word	0x732f6c61
    44b8:	682f6372 	.word	0x682f6372
    44bc:	745f6c61 	.word	0x745f6c61
    44c0:	72656d69 	.word	0x72656d69
    44c4:	0000632e 	.word	0x0000632e
    44c8:	682f2e2e 	.word	0x682f2e2e
    44cc:	752f6c61 	.word	0x752f6c61
    44d0:	736c6974 	.word	0x736c6974
    44d4:	6372732f 	.word	0x6372732f
    44d8:	6974752f 	.word	0x6974752f
    44dc:	6c5f736c 	.word	0x6c5f736c
    44e0:	2e747369 	.word	0x2e747369
    44e4:	00000063 	.word	0x00000063

000044e8 <user_mux_confs>:
    44e8:	00000100 00000000 00000000 00000000     ................
	...

0000452c <channel_confs>:
    452c:	0000060c 00000000 00000000 00000000     ................
	...

0000456c <interrupt_cfg>:
	...
    45ec:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    45fc:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    460c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    461c:	43000800 43000c00                       ...C...C

00004624 <_i2cms>:
    4624:	00000003 00200014 00000100 00003635     ...... .....56..
    4634:	00d70000 00b71b00                       ........

0000463c <sercomspi_regs>:
    463c:	0020000c 00020000 00000000 01ff0077     .. .........w...
    464c:	20000c00 02000000 00000000 ff007700     ... .........w..
    465c:	000c0101 00000020 00000002 00770000     .... .........w.
    466c:	000401ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    467c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    468c:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    469c:	42001400 42001800 43001400 43001800     ...B...B...C...C

000046ac <_tcs>:
    46ac:	006b0000 00000308 00000000 00000004     ..k.............
    46bc:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    46cc:	63745f6c 0000632e                       l_tc.c..

000046d4 <_usb_ep_cfgs>:
    46d4:	20000334 00000000 00000040 200002f4     4.. ....@...... 
    46e4:	00000000 00000040 200002b4 00000000     ....@...... ....
    46f4:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    4704:	73752f65 2e636462 00000063              e/usbdc.c...

00004710 <_init>:
    4710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4712:	bf00      	nop
    4714:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4716:	bc08      	pop	{r3}
    4718:	469e      	mov	lr, r3
    471a:	4770      	bx	lr

0000471c <__init_array_start>:
    471c:	00000289 	.word	0x00000289

00004720 <_fini>:
    4720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4722:	bf00      	nop
    4724:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4726:	bc08      	pop	{r3}
    4728:	469e      	mov	lr, r3
    472a:	4770      	bx	lr

0000472c <__fini_array_start>:
    472c:	00000265 	.word	0x00000265
