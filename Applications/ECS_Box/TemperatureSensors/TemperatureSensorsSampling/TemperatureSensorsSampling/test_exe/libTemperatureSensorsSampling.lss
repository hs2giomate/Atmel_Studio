
libTemperatureSensorsSampling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010d18  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010d18  00010d18  00020d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000064c  20000000  00010d20  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003064c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003064c  2**0
                  CONTENTS
  5 .bss          0000a548  20000650  00011370  0003064c  2**3
                  ALLOC
  6 .stack        00010000  2000ab98  0001b8b8  0003064c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003064c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003067a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0008104f  00000000  00000000  000306d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b7f0  00000000  00000000  000b1722  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001da8f  00000000  00000000  000bcf12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003450  00000000  00000000  000da9a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000030a8  00000000  00000000  000dddf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00052a77  00000000  00000000  000e0e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00040d78  00000000  00000000  00133910  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00142f3f  00000000  00000000  00174688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d7d4  00000000  00000000  002b75c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 ab 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	ed 5a 00 00 85 48 00 00 95 48 00 00 d1 02 00 00     .Z...H...H......
      7c:	a5 48 00 00 b5 48 00 00 c5 48 00 00 d5 48 00 00     .H...H...H...H..
      8c:	e5 48 00 00 f5 48 00 00 05 49 00 00 d1 02 00 00     .H...H...I......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 25 40 00 00 b5 a9 00 00     ........%@......
     184:	c5 a9 00 00 d5 a9 00 00 e5 a9 00 00 d1 02 00 00     ................
     194:	f5 73 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .s..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 11 74 00 00     .............t..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	2d 74 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     -t..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 b1 80 00 00 d1 02 00 00     ................
     1f4:	cd 80 00 00 d1 02 00 00 e9 80 00 00 05 81 00 00     ................
     204:	21 81 00 00 3d 81 00 00 d1 02 00 00 d1 02 00 00     !...=...........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000650 	.word	0x20000650
     280:	00000000 	.word	0x00000000
     284:	00010d20 	.word	0x00010d20

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00010d20 	.word	0x00010d20
     2c4:	20000654 	.word	0x20000654
     2c8:	00010d20 	.word	0x00010d20
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("nop");
     2d0:	bf00      	nop
     2d2:	e7fd      	b.n	2d0 <Dummy_Handler>

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00010d20 	.word	0x00010d20
     33c:	2000064c 	.word	0x2000064c
     340:	2000ab98 	.word	0x2000ab98
     344:	20000650 	.word	0x20000650
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00010245 	.word	0x00010245
     354:	00000359 	.word	0x00000359

00000358 <main>:
static float currentTemperature,lastTemperature;
uint32_t error_counter=0;
uint8_t sensor_counter=0;

int main(void)
{
     358:	b570      	push	{r4, r5, r6, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     35a:	4b24      	ldr	r3, [pc, #144]	; (3ec <main+0x94>)
     35c:	4798      	blx	r3
	usb.Init();
     35e:	4824      	ldr	r0, [pc, #144]	; (3f0 <main+0x98>)
     360:	4b24      	ldr	r3, [pc, #144]	; (3f4 <main+0x9c>)
     362:	4798      	blx	r3
	bool isOK=temperatures.Init();
     364:	4824      	ldr	r0, [pc, #144]	; (3f8 <main+0xa0>)
     366:	4b25      	ldr	r3, [pc, #148]	; (3fc <main+0xa4>)
     368:	4798      	blx	r3
	if (isOK)
     36a:	b918      	cbnz	r0, 374 <main+0x1c>
	{
		temperatures.StartOneConversion();
	}
	while(1){
		if (temperatures.IsConversionFinished())
     36c:	4c22      	ldr	r4, [pc, #136]	; (3f8 <main+0xa0>)
     36e:	4e24      	ldr	r6, [pc, #144]	; (400 <main+0xa8>)
				temperatures.StartNextConversion();
				error_counter=0;
			} 
			else
			{
				error_counter++;
     370:	4d24      	ldr	r5, [pc, #144]	; (404 <main+0xac>)
     372:	e016      	b.n	3a2 <main+0x4a>
		temperatures.StartOneConversion();
     374:	4820      	ldr	r0, [pc, #128]	; (3f8 <main+0xa0>)
     376:	4b24      	ldr	r3, [pc, #144]	; (408 <main+0xb0>)
     378:	4798      	blx	r3
     37a:	e7f7      	b.n	36c <main+0x14>
			error_counter=0;
     37c:	2300      	movs	r3, #0
     37e:	602b      	str	r3, [r5, #0]
			temperatures.GetConversionResult();
     380:	4620      	mov	r0, r4
     382:	4b22      	ldr	r3, [pc, #136]	; (40c <main+0xb4>)
     384:	4798      	blx	r3
			if (temperatures.faultData==VALID_TEMPERATURE)
     386:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     38a:	2b01      	cmp	r3, #1
				currentTemperature=temperatures.lastValue;
     38c:	bf04      	itt	eq
     38e:	f8d4 30a0 	ldreq.w	r3, [r4, #160]	; 0xa0
     392:	606b      	streq	r3, [r5, #4]
			sensor_counter++;
     394:	7a2b      	ldrb	r3, [r5, #8]
     396:	3301      	adds	r3, #1
     398:	722b      	strb	r3, [r5, #8]
			temperatures.StartOneConversion();
     39a:	4620      	mov	r0, r4
     39c:	4b1a      	ldr	r3, [pc, #104]	; (408 <main+0xb0>)
     39e:	4798      	blx	r3
			asm("nop");
     3a0:	bf00      	nop
		if (temperatures.IsConversionFinished())
     3a2:	4620      	mov	r0, r4
     3a4:	47b0      	blx	r6
     3a6:	2800      	cmp	r0, #0
     3a8:	d1e8      	bne.n	37c <main+0x24>
			if (temperatures.converterTimeout)
     3aa:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
     3ae:	b99b      	cbnz	r3, 3d8 <main+0x80>
				error_counter++;
     3b0:	682a      	ldr	r2, [r5, #0]
     3b2:	3201      	adds	r2, #1
     3b4:	602a      	str	r2, [r5, #0]
				if (error_counter%0xffff==0)
     3b6:	4b16      	ldr	r3, [pc, #88]	; (410 <main+0xb8>)
     3b8:	fba3 1302 	umull	r1, r3, r3, r2
     3bc:	0bdb      	lsrs	r3, r3, #15
     3be:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
     3c2:	429a      	cmp	r2, r3
     3c4:	d1ed      	bne.n	3a2 <main+0x4a>
				{
					if (error_counter>0xffffff)
     3c6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
     3ca:	d3ea      	bcc.n	3a2 <main+0x4a>
					{
										
						temperatures.Init();
     3cc:	4620      	mov	r0, r4
     3ce:	4b0b      	ldr	r3, [pc, #44]	; (3fc <main+0xa4>)
     3d0:	4798      	blx	r3
						error_counter=0;
     3d2:	2300      	movs	r3, #0
     3d4:	602b      	str	r3, [r5, #0]
     3d6:	e7e4      	b.n	3a2 <main+0x4a>
				sensor_counter++;
     3d8:	7a2b      	ldrb	r3, [r5, #8]
     3da:	3301      	adds	r3, #1
     3dc:	722b      	strb	r3, [r5, #8]
				temperatures.StartNextConversion();
     3de:	4620      	mov	r0, r4
     3e0:	4b0c      	ldr	r3, [pc, #48]	; (414 <main+0xbc>)
     3e2:	4798      	blx	r3
				error_counter=0;
     3e4:	2300      	movs	r3, #0
     3e6:	602b      	str	r3, [r5, #0]
     3e8:	e7db      	b.n	3a2 <main+0x4a>
     3ea:	bf00      	nop
     3ec:	00000951 	.word	0x00000951
     3f0:	20001720 	.word	0x20001720
     3f4:	0000e6b9 	.word	0x0000e6b9
     3f8:	20000778 	.word	0x20000778
     3fc:	0000062d 	.word	0x0000062d
     400:	0000082d 	.word	0x0000082d
     404:	2000066c 	.word	0x2000066c
     408:	000006e1 	.word	0x000006e1
     40c:	00000729 	.word	0x00000729
     410:	80008001 	.word	0x80008001
     414:	000007bd 	.word	0x000007bd

00000418 <_GLOBAL__sub_I_error_counter>:
// 			
// 		}
		
		
	}
}
     418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     41c:	4c27      	ldr	r4, [pc, #156]	; (4bc <_GLOBAL__sub_I_error_counter+0xa4>)
     41e:	f104 050c 	add.w	r5, r4, #12
     422:	4927      	ldr	r1, [pc, #156]	; (4c0 <_GLOBAL__sub_I_error_counter+0xa8>)
     424:	4628      	mov	r0, r5
     426:	4e27      	ldr	r6, [pc, #156]	; (4c4 <_GLOBAL__sub_I_error_counter+0xac>)
     428:	47b0      	blx	r6
     42a:	4f27      	ldr	r7, [pc, #156]	; (4c8 <_GLOBAL__sub_I_error_counter+0xb0>)
     42c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4ec <_GLOBAL__sub_I_error_counter+0xd4>
     430:	463a      	mov	r2, r7
     432:	4641      	mov	r1, r8
     434:	4628      	mov	r0, r5
     436:	4d25      	ldr	r5, [pc, #148]	; (4cc <_GLOBAL__sub_I_error_counter+0xb4>)
     438:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     43a:	f104 092c 	add.w	r9, r4, #44	; 0x2c
     43e:	4924      	ldr	r1, [pc, #144]	; (4d0 <_GLOBAL__sub_I_error_counter+0xb8>)
     440:	4648      	mov	r0, r9
     442:	47b0      	blx	r6
     444:	463a      	mov	r2, r7
     446:	4641      	mov	r1, r8
     448:	4648      	mov	r0, r9
     44a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     44c:	f104 094c 	add.w	r9, r4, #76	; 0x4c
     450:	4920      	ldr	r1, [pc, #128]	; (4d4 <_GLOBAL__sub_I_error_counter+0xbc>)
     452:	4648      	mov	r0, r9
     454:	47b0      	blx	r6
     456:	463a      	mov	r2, r7
     458:	4641      	mov	r1, r8
     45a:	4648      	mov	r0, r9
     45c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     45e:	f104 096c 	add.w	r9, r4, #108	; 0x6c
     462:	491d      	ldr	r1, [pc, #116]	; (4d8 <_GLOBAL__sub_I_error_counter+0xc0>)
     464:	4648      	mov	r0, r9
     466:	47b0      	blx	r6
     468:	463a      	mov	r2, r7
     46a:	4641      	mov	r1, r8
     46c:	4648      	mov	r0, r9
     46e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     470:	f104 098c 	add.w	r9, r4, #140	; 0x8c
     474:	4919      	ldr	r1, [pc, #100]	; (4dc <_GLOBAL__sub_I_error_counter+0xc4>)
     476:	4648      	mov	r0, r9
     478:	47b0      	blx	r6
     47a:	463a      	mov	r2, r7
     47c:	4641      	mov	r1, r8
     47e:	4648      	mov	r0, r9
     480:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     482:	f104 09ac 	add.w	r9, r4, #172	; 0xac
     486:	4916      	ldr	r1, [pc, #88]	; (4e0 <_GLOBAL__sub_I_error_counter+0xc8>)
     488:	4648      	mov	r0, r9
     48a:	47b0      	blx	r6
     48c:	463a      	mov	r2, r7
     48e:	4641      	mov	r1, r8
     490:	4648      	mov	r0, r9
     492:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     494:	f104 09cc 	add.w	r9, r4, #204	; 0xcc
     498:	4912      	ldr	r1, [pc, #72]	; (4e4 <_GLOBAL__sub_I_error_counter+0xcc>)
     49a:	4648      	mov	r0, r9
     49c:	47b0      	blx	r6
     49e:	463a      	mov	r2, r7
     4a0:	4641      	mov	r1, r8
     4a2:	4648      	mov	r0, r9
     4a4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     4a6:	34ec      	adds	r4, #236	; 0xec
     4a8:	490f      	ldr	r1, [pc, #60]	; (4e8 <_GLOBAL__sub_I_error_counter+0xd0>)
     4aa:	4620      	mov	r0, r4
     4ac:	47b0      	blx	r6
     4ae:	463a      	mov	r2, r7
     4b0:	4641      	mov	r1, r8
     4b2:	4620      	mov	r0, r4
     4b4:	47a8      	blx	r5
     4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     4ba:	bf00      	nop
     4bc:	2000066c 	.word	0x2000066c
     4c0:	2000a8e0 	.word	0x2000a8e0
     4c4:	0000dff9 	.word	0x0000dff9
     4c8:	20000000 	.word	0x20000000
     4cc:	0000fd55 	.word	0x0000fd55
     4d0:	2000a974 	.word	0x2000a974
     4d4:	2000aa98 	.word	0x2000aa98
     4d8:	2000a994 	.word	0x2000a994
     4dc:	2000aa58 	.word	0x2000aa58
     4e0:	2000aa78 	.word	0x2000aa78
     4e4:	2000a950 	.word	0x2000a950
     4e8:	2000a9f0 	.word	0x2000a9f0
     4ec:	0000e031 	.word	0x0000e031

000004f0 <_ZL17ConversionTimeoutPK10timer_task>:
	temperatures.converterReady[2]=true;
	temperatures.SetModuleReady(2);
	temperatures.converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	temperatures.converterTimeout=true;
     4f0:	2201      	movs	r2, #1
     4f2:	4b02      	ldr	r3, [pc, #8]	; (4fc <_ZL17ConversionTimeoutPK10timer_task+0xc>)
     4f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
     4f8:	bf00      	nop
     4fa:	4770      	bx	lr
     4fc:	20000778 	.word	0x20000778

00000500 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
     500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     502:	4607      	mov	r7, r0
     504:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
     508:	d007      	beq.n	51a <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
     50a:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
     50e:	4e05      	ldr	r6, [pc, #20]	; (524 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
     510:	3c68      	subs	r4, #104	; 0x68
     512:	4620      	mov	r0, r4
     514:	47b0      	blx	r6
     516:	42a5      	cmp	r5, r4
     518:	d1fa      	bne.n	510 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
     51a:	4638      	mov	r0, r7
     51c:	4b02      	ldr	r3, [pc, #8]	; (528 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
     51e:	4798      	blx	r3
{
} //~TemperatureSensors_Class
     520:	4638      	mov	r0, r7
     522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     524:	0000d385 	.word	0x0000d385
     528:	0000d385 	.word	0x0000d385

0000052c <_ZL15Converter1Readyv>:
	temperatures.converterReady[0]=true;
     52c:	4b05      	ldr	r3, [pc, #20]	; (544 <_ZL15Converter1Readyv+0x18>)
     52e:	2201      	movs	r2, #1
     530:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsOneConversionFinished(){
	return converterReady[0]|converterReady[1]|converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
     534:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
     538:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	temperatures.converterTimeout=false;
     53c:	2200      	movs	r2, #0
     53e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     542:	4770      	bx	lr
     544:	20000778 	.word	0x20000778

00000548 <_ZL15Converter2Readyv>:
	temperatures.converterReady[1]=true;
     548:	4b05      	ldr	r3, [pc, #20]	; (560 <_ZL15Converter2Readyv+0x18>)
     54a:	2201      	movs	r2, #1
     54c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
     550:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
     554:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	temperatures.converterTimeout=false;
     558:	2200      	movs	r2, #0
     55a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     55e:	4770      	bx	lr
     560:	20000778 	.word	0x20000778

00000564 <_ZL15Converter3Readyv>:
	temperatures.converterReady[2]=true;
     564:	4b05      	ldr	r3, [pc, #20]	; (57c <_ZL15Converter3Readyv+0x18>)
     566:	2201      	movs	r2, #1
     568:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
     56c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
     570:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	temperatures.converterTimeout=false;
     574:	2200      	movs	r2, #0
     576:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     57a:	4770      	bx	lr
     57c:	20000778 	.word	0x20000778

00000580 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
     580:	b570      	push	{r4, r5, r6, lr}
     582:	4604      	mov	r4, r0
     584:	460e      	mov	r6, r1
     586:	4b0b      	ldr	r3, [pc, #44]	; (5b4 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
     588:	4798      	blx	r3
     58a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
     58e:	4d0a      	ldr	r5, [pc, #40]	; (5b8 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
     590:	47a8      	blx	r5
     592:	f504 7088 	add.w	r0, r4, #272	; 0x110
     596:	47a8      	blx	r5
     598:	f504 70bc 	add.w	r0, r4, #376	; 0x178
     59c:	47a8      	blx	r5
		spiLite=&ltSPI;
     59e:	4b07      	ldr	r3, [pc, #28]	; (5bc <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x3c>)
     5a0:	f503 7201 	add.w	r2, r3, #516	; 0x204
     5a4:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
     5a8:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
		SPIA=SPI_LTC;
     5ac:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
     5b0:	4620      	mov	r0, r4
     5b2:	bd70      	pop	{r4, r5, r6, pc}
     5b4:	0000d371 	.word	0x0000d371
     5b8:	0000d371 	.word	0x0000d371
     5bc:	20000778 	.word	0x20000778

000005c0 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
     5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5c4:	4605      	mov	r5, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
     5c6:	233d      	movs	r3, #61	; 0x3d
     5c8:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
     5cc:	231b      	movs	r3, #27
     5ce:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
     5d2:	2327      	movs	r3, #39	; 0x27
     5d4:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
     5d8:	f500 77f0 	add.w	r7, r0, #480	; 0x1e0
     5dc:	f100 06a8 	add.w	r6, r0, #168	; 0xa8
     5e0:	2400      	movs	r4, #0
		module[ii].Init(csPins[ii],spiLite);
     5e2:	f8df b038 	ldr.w	fp, [pc, #56]	; 61c <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
     5e6:	f8df a038 	ldr.w	sl, [pc, #56]	; 620 <_ZN24TemperatureSensors_Class11InitModulesEv+0x60>
     5ea:	f8df 9038 	ldr.w	r9, [pc, #56]	; 624 <_ZN24TemperatureSensors_Class11InitModulesEv+0x64>
		module[ii].Init(csPins[ii],spiLite);
     5ee:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
     5f2:	f857 1b04 	ldr.w	r1, [r7], #4
     5f6:	4630      	mov	r0, r6
     5f8:	47d8      	blx	fp
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
     5fa:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
     5fe:	f083 0301 	eor.w	r3, r3, #1
     602:	b2e2      	uxtb	r2, r4
     604:	4651      	mov	r1, sl
     606:	4648      	mov	r0, r9
     608:	f8df 801c 	ldr.w	r8, [pc, #28]	; 628 <_ZN24TemperatureSensors_Class11InitModulesEv+0x68>
     60c:	47c0      	blx	r8
     60e:	3401      	adds	r4, #1
     610:	3668      	adds	r6, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
     612:	2c03      	cmp	r4, #3
     614:	d1eb      	bne.n	5ee <_ZN24TemperatureSensors_Class11InitModulesEv+0x2e>
}
     616:	2001      	movs	r0, #1
     618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     61c:	0000d399 	.word	0x0000d399
     620:	0001077c 	.word	0x0001077c
     624:	20001aa0 	.word	0x20001aa0
     628:	0000f0ed 	.word	0x0000f0ed

0000062c <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
     62c:	b538      	push	{r3, r4, r5, lr}
     62e:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
     630:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
     634:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
     638:	4b1d      	ldr	r3, [pc, #116]	; (6b0 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
     63a:	4798      	blx	r3
	spiLite->init();
     63c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
     640:	4b1c      	ldr	r3, [pc, #112]	; (6b4 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
     642:	4798      	blx	r3
	if (spiLite->ready)
     644:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
     648:	781b      	ldrb	r3, [r3, #0]
     64a:	bb63      	cbnz	r3, 6a6 <_ZN24TemperatureSensors_Class4InitEv+0x7a>
		logger.SaveEvent("SPI Temperatures Failed");
     64c:	491a      	ldr	r1, [pc, #104]	; (6b8 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
     64e:	481b      	ldr	r0, [pc, #108]	; (6bc <_ZN24TemperatureSensors_Class4InitEv+0x90>)
     650:	4b1b      	ldr	r3, [pc, #108]	; (6c0 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
     652:	4798      	blx	r3
	ptrTemperaturesClass=this;
     654:	4b1b      	ldr	r3, [pc, #108]	; (6c4 <_ZN24TemperatureSensors_Class4InitEv+0x98>)
     656:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	ext_irq_register(PIN_PB08, Converter1Ready);
     65a:	491b      	ldr	r1, [pc, #108]	; (6c8 <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
     65c:	2028      	movs	r0, #40	; 0x28
     65e:	4d1b      	ldr	r5, [pc, #108]	; (6cc <_ZN24TemperatureSensors_Class4InitEv+0xa0>)
     660:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
     662:	491b      	ldr	r1, [pc, #108]	; (6d0 <_ZN24TemperatureSensors_Class4InitEv+0xa4>)
     664:	2029      	movs	r0, #41	; 0x29
     666:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
     668:	491a      	ldr	r1, [pc, #104]	; (6d4 <_ZN24TemperatureSensors_Class4InitEv+0xa8>)
     66a:	2021      	movs	r0, #33	; 0x21
     66c:	47a8      	blx	r5
	InitModules();
     66e:	4620      	mov	r0, r4
     670:	4b19      	ldr	r3, [pc, #100]	; (6d8 <_ZN24TemperatureSensors_Class4InitEv+0xac>)
     672:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
     674:	2301      	movs	r3, #1
     676:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     67a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
     67e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
     682:	2300      	movs	r3, #0
     684:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
     688:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
     68c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
     690:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
     694:	4013      	ands	r3, r2
     696:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
     69a:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
     69c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
     6a0:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
     6a4:	bd38      	pop	{r3, r4, r5, pc}
		logger.SaveEvent("SPI Temperatures Started");
     6a6:	490d      	ldr	r1, [pc, #52]	; (6dc <_ZN24TemperatureSensors_Class4InitEv+0xb0>)
     6a8:	4804      	ldr	r0, [pc, #16]	; (6bc <_ZN24TemperatureSensors_Class4InitEv+0x90>)
     6aa:	4b05      	ldr	r3, [pc, #20]	; (6c0 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
     6ac:	4798      	blx	r3
     6ae:	e7d1      	b.n	654 <_ZN24TemperatureSensors_Class4InitEv+0x28>
     6b0:	0000dca5 	.word	0x0000dca5
     6b4:	0000dc49 	.word	0x0000dc49
     6b8:	000107a0 	.word	0x000107a0
     6bc:	20001aa0 	.word	0x20001aa0
     6c0:	0000f1a1 	.word	0x0000f1a1
     6c4:	20000778 	.word	0x20000778
     6c8:	0000052d 	.word	0x0000052d
     6cc:	000023b5 	.word	0x000023b5
     6d0:	00000549 	.word	0x00000549
     6d4:	00000565 	.word	0x00000565
     6d8:	000005c1 	.word	0x000005c1
     6dc:	00010784 	.word	0x00010784

000006e0 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
     6e0:	b510      	push	{r4, lr}
     6e2:	4604      	mov	r4, r0
	converterTimeout=false;
     6e4:	2200      	movs	r2, #0
     6e6:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
     6ea:	f890 31ff 	ldrb.w	r3, [r0, #511]	; 0x1ff
     6ee:	4403      	add	r3, r0
     6f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
     6f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     6f8:	4907      	ldr	r1, [pc, #28]	; (718 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
     6fa:	4808      	ldr	r0, [pc, #32]	; (71c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
     6fc:	4b08      	ldr	r3, [pc, #32]	; (720 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
     6fe:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
     700:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
     704:	2368      	movs	r3, #104	; 0x68
     706:	fb03 4000 	mla	r0, r3, r0, r4
     70a:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
     70e:	30a8      	adds	r0, #168	; 0xa8
     710:	4b04      	ldr	r3, [pc, #16]	; (724 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
     712:	4798      	blx	r3
     714:	bd10      	pop	{r4, pc}
     716:	bf00      	nop
     718:	000004f1 	.word	0x000004f1
     71c:	20000994 	.word	0x20000994
     720:	0000e22d 	.word	0x0000e22d
     724:	0000d48d 	.word	0x0000d48d

00000728 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
     728:	b538      	push	{r3, r4, r5, lr}
     72a:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
     72c:	491e      	ldr	r1, [pc, #120]	; (7a8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
     72e:	481f      	ldr	r0, [pc, #124]	; (7ac <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
     730:	4b1f      	ldr	r3, [pc, #124]	; (7b0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
     732:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
     734:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
     738:	2568      	movs	r5, #104	; 0x68
     73a:	fb05 4000 	mla	r0, r5, r0, r4
     73e:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
     742:	30a8      	adds	r0, #168	; 0xa8
     744:	4b1b      	ldr	r3, [pc, #108]	; (7b4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
     746:	4798      	blx	r3
     748:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
     74c:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
     750:	fb05 4502 	mla	r5, r5, r2, r4
     754:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
     758:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
     75c:	2b01      	cmp	r3, #1
     75e:	d00d      	beq.n	77c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
     760:	4b15      	ldr	r3, [pc, #84]	; (7b8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
     762:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
     766:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
     76a:	3301      	adds	r3, #1
     76c:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
     76e:	2b04      	cmp	r3, #4
     770:	d00c      	beq.n	78c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
     772:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
     776:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
     77a:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
     77c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
     780:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     788:	66d8      	str	r0, [r3, #108]	; 0x6c
     78a:	e7ec      	b.n	766 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
     78c:	2300      	movs	r3, #0
     78e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
		currentModule++;
     792:	3201      	adds	r2, #1
     794:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
     796:	2a03      	cmp	r2, #3
		currentModule++;
     798:	bf12      	itee	ne
     79a:	f884 21ff 	strbne.w	r2, [r4, #511]	; 0x1ff
			currentModule=0;
     79e:	2300      	moveq	r3, #0
     7a0:	f884 31ff 	strbeq.w	r3, [r4, #511]	; 0x1ff
     7a4:	e7e7      	b.n	776 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
     7a6:	bf00      	nop
     7a8:	000004f1 	.word	0x000004f1
     7ac:	20000994 	.word	0x20000994
     7b0:	0000e1d5 	.word	0x0000e1d5
     7b4:	0000d595 	.word	0x0000d595
     7b8:	c479c000 	.word	0xc479c000

000007bc <_ZN24TemperatureSensors_Class19StartNextConversionEv>:
void TemperatureSensors_Class::StartNextConversion(void){
     7bc:	b510      	push	{r4, lr}
     7be:	4604      	mov	r4, r0
	currentChannelIndex++;
     7c0:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
     7c4:	3301      	adds	r3, #1
     7c6:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
     7c8:	2b04      	cmp	r3, #4
     7ca:	d01a      	beq.n	802 <_ZN24TemperatureSensors_Class19StartNextConversionEv+0x46>
	currentChannelIndex++;
     7cc:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
	converterTimeout=false;
     7d0:	2200      	movs	r2, #0
     7d2:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
	converterReady[currentModule]=false;
     7d6:	f894 31ff 	ldrb.w	r3, [r4, #511]	; 0x1ff
     7da:	4423      	add	r3, r4
     7dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
     7e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     7e4:	490d      	ldr	r1, [pc, #52]	; (81c <_ZN24TemperatureSensors_Class19StartNextConversionEv+0x60>)
     7e6:	480e      	ldr	r0, [pc, #56]	; (820 <_ZN24TemperatureSensors_Class19StartNextConversionEv+0x64>)
     7e8:	4b0e      	ldr	r3, [pc, #56]	; (824 <_ZN24TemperatureSensors_Class19StartNextConversionEv+0x68>)
     7ea:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
     7ec:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
     7f0:	2368      	movs	r3, #104	; 0x68
     7f2:	fb03 4000 	mla	r0, r3, r0, r4
     7f6:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
     7fa:	30a8      	adds	r0, #168	; 0xa8
     7fc:	4b0a      	ldr	r3, [pc, #40]	; (828 <_ZN24TemperatureSensors_Class19StartNextConversionEv+0x6c>)
     7fe:	4798      	blx	r3
     800:	bd10      	pop	{r4, pc}
		currentChannelIndex=0;
     802:	2300      	movs	r3, #0
     804:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
		currentModule++;
     808:	f890 31ff 	ldrb.w	r3, [r0, #511]	; 0x1ff
     80c:	3301      	adds	r3, #1
     80e:	b2db      	uxtb	r3, r3
		if (currentModule==NUMBER_LTC2983_MODULES)
     810:	2b03      	cmp	r3, #3
			currentModule=0;
     812:	bf08      	it	eq
     814:	2300      	moveq	r3, #0
     816:	f880 31ff 	strb.w	r3, [r0, #511]	; 0x1ff
     81a:	e7d9      	b.n	7d0 <_ZN24TemperatureSensors_Class19StartNextConversionEv+0x14>
     81c:	000004f1 	.word	0x000004f1
     820:	20000994 	.word	0x20000994
     824:	0000e22d 	.word	0x0000e22d
     828:	0000d48d 	.word	0x0000d48d

0000082c <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
     82c:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
     830:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
     834:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
     838:	4013      	ands	r3, r2
}
     83a:	4018      	ands	r0, r3
     83c:	4770      	bx	lr
	...

00000840 <_GLOBAL__sub_I_ptrTemperaturesClass>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
     840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     844:	4c30      	ldr	r4, [pc, #192]	; (908 <_GLOBAL__sub_I_ptrTemperaturesClass+0xc8>)
     846:	f504 7507 	add.w	r5, r4, #540	; 0x21c
     84a:	4930      	ldr	r1, [pc, #192]	; (90c <_GLOBAL__sub_I_ptrTemperaturesClass+0xcc>)
     84c:	4628      	mov	r0, r5
     84e:	4f30      	ldr	r7, [pc, #192]	; (910 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd0>)
     850:	47b8      	blx	r7
     852:	4e30      	ldr	r6, [pc, #192]	; (914 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd4>)
     854:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 94c <_GLOBAL__sub_I_ptrTemperaturesClass+0x10c>
     858:	4632      	mov	r2, r6
     85a:	4641      	mov	r1, r8
     85c:	4628      	mov	r0, r5
     85e:	4d2e      	ldr	r5, [pc, #184]	; (918 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd8>)
     860:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     862:	f504 790f 	add.w	r9, r4, #572	; 0x23c
     866:	492d      	ldr	r1, [pc, #180]	; (91c <_GLOBAL__sub_I_ptrTemperaturesClass+0xdc>)
     868:	4648      	mov	r0, r9
     86a:	47b8      	blx	r7
     86c:	4632      	mov	r2, r6
     86e:	4641      	mov	r1, r8
     870:	4648      	mov	r0, r9
     872:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     874:	f504 7917 	add.w	r9, r4, #604	; 0x25c
     878:	4929      	ldr	r1, [pc, #164]	; (920 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe0>)
     87a:	4648      	mov	r0, r9
     87c:	47b8      	blx	r7
     87e:	4632      	mov	r2, r6
     880:	4641      	mov	r1, r8
     882:	4648      	mov	r0, r9
     884:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     886:	f504 791f 	add.w	r9, r4, #636	; 0x27c
     88a:	4926      	ldr	r1, [pc, #152]	; (924 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe4>)
     88c:	4648      	mov	r0, r9
     88e:	47b8      	blx	r7
     890:	4632      	mov	r2, r6
     892:	4641      	mov	r1, r8
     894:	4648      	mov	r0, r9
     896:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     898:	f504 7927 	add.w	r9, r4, #668	; 0x29c
     89c:	4922      	ldr	r1, [pc, #136]	; (928 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe8>)
     89e:	4648      	mov	r0, r9
     8a0:	47b8      	blx	r7
     8a2:	4632      	mov	r2, r6
     8a4:	4641      	mov	r1, r8
     8a6:	4648      	mov	r0, r9
     8a8:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     8aa:	f504 792f 	add.w	r9, r4, #700	; 0x2bc
     8ae:	491f      	ldr	r1, [pc, #124]	; (92c <_GLOBAL__sub_I_ptrTemperaturesClass+0xec>)
     8b0:	4648      	mov	r0, r9
     8b2:	47b8      	blx	r7
     8b4:	4632      	mov	r2, r6
     8b6:	4641      	mov	r1, r8
     8b8:	4648      	mov	r0, r9
     8ba:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     8bc:	f504 7937 	add.w	r9, r4, #732	; 0x2dc
     8c0:	491b      	ldr	r1, [pc, #108]	; (930 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf0>)
     8c2:	4648      	mov	r0, r9
     8c4:	47b8      	blx	r7
     8c6:	4632      	mov	r2, r6
     8c8:	4641      	mov	r1, r8
     8ca:	4648      	mov	r0, r9
     8cc:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     8ce:	f504 793f 	add.w	r9, r4, #764	; 0x2fc
     8d2:	4918      	ldr	r1, [pc, #96]	; (934 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf4>)
     8d4:	4648      	mov	r0, r9
     8d6:	47b8      	blx	r7
     8d8:	4632      	mov	r2, r6
     8da:	4641      	mov	r1, r8
     8dc:	4648      	mov	r0, r9
     8de:	47a8      	blx	r5
static LT_SPI	ltSPI;
     8e0:	f504 7701 	add.w	r7, r4, #516	; 0x204
     8e4:	4638      	mov	r0, r7
     8e6:	4b14      	ldr	r3, [pc, #80]	; (938 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf8>)
     8e8:	4798      	blx	r3
     8ea:	4632      	mov	r2, r6
     8ec:	4913      	ldr	r1, [pc, #76]	; (93c <_GLOBAL__sub_I_ptrTemperaturesClass+0xfc>)
     8ee:	4638      	mov	r0, r7
     8f0:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
     8f2:	4913      	ldr	r1, [pc, #76]	; (940 <_GLOBAL__sub_I_ptrTemperaturesClass+0x100>)
     8f4:	4620      	mov	r0, r4
     8f6:	4b13      	ldr	r3, [pc, #76]	; (944 <_GLOBAL__sub_I_ptrTemperaturesClass+0x104>)
     8f8:	4798      	blx	r3
     8fa:	4632      	mov	r2, r6
     8fc:	4912      	ldr	r1, [pc, #72]	; (948 <_GLOBAL__sub_I_ptrTemperaturesClass+0x108>)
     8fe:	4620      	mov	r0, r4
     900:	47a8      	blx	r5
     902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     906:	bf00      	nop
     908:	20000778 	.word	0x20000778
     90c:	2000a8e0 	.word	0x2000a8e0
     910:	0000dff9 	.word	0x0000dff9
     914:	20000000 	.word	0x20000000
     918:	0000fd55 	.word	0x0000fd55
     91c:	2000a974 	.word	0x2000a974
     920:	2000aa98 	.word	0x2000aa98
     924:	2000a994 	.word	0x2000a994
     928:	2000aa58 	.word	0x2000aa58
     92c:	2000aa78 	.word	0x2000aa78
     930:	2000a950 	.word	0x2000a950
     934:	2000a9f0 	.word	0x2000a9f0
     938:	0000dc0d 	.word	0x0000dc0d
     93c:	0000dc35 	.word	0x0000dc35
     940:	2000a918 	.word	0x2000a918
     944:	00000581 	.word	0x00000581
     948:	00000501 	.word	0x00000501
     94c:	0000e031 	.word	0x0000e031

00000950 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     950:	b580      	push	{r7, lr}
     952:	af00      	add	r7, sp, #0
	system_init();
     954:	4b03      	ldr	r3, [pc, #12]	; (964 <atmel_start_init+0x14>)
     956:	4798      	blx	r3
	usb_init();
     958:	4b03      	ldr	r3, [pc, #12]	; (968 <atmel_start_init+0x18>)
     95a:	4798      	blx	r3
	spi_nor_flash_init();
     95c:	4b03      	ldr	r3, [pc, #12]	; (96c <atmel_start_init+0x1c>)
     95e:	4798      	blx	r3
}
     960:	bf00      	nop
     962:	bd80      	pop	{r7, pc}
     964:	00001d51 	.word	0x00001d51
     968:	0000b0b9 	.word	0x0000b0b9
     96c:	0000b04d 	.word	0x0000b04d

00000970 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     970:	b480      	push	{r7}
     972:	b085      	sub	sp, #20
     974:	af00      	add	r7, sp, #0
     976:	60f8      	str	r0, [r7, #12]
     978:	460b      	mov	r3, r1
     97a:	607a      	str	r2, [r7, #4]
     97c:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     97e:	7afa      	ldrb	r2, [r7, #11]
     980:	68fb      	ldr	r3, [r7, #12]
     982:	3220      	adds	r2, #32
     984:	6879      	ldr	r1, [r7, #4]
     986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     98a:	bf00      	nop
     98c:	3714      	adds	r7, #20
     98e:	46bd      	mov	sp, r7
     990:	f85d 7b04 	ldr.w	r7, [sp], #4
     994:	4770      	bx	lr

00000996 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     996:	b480      	push	{r7}
     998:	b083      	sub	sp, #12
     99a:	af00      	add	r7, sp, #0
     99c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	691b      	ldr	r3, [r3, #16]
     9a2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9aa:	bf00      	nop
     9ac:	370c      	adds	r7, #12
     9ae:	46bd      	mov	sp, r7
     9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b4:	4770      	bx	lr

000009b6 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     9b6:	b480      	push	{r7}
     9b8:	b083      	sub	sp, #12
     9ba:	af00      	add	r7, sp, #0
     9bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     9be:	687b      	ldr	r3, [r7, #4]
     9c0:	691b      	ldr	r3, [r3, #16]
     9c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ca:	bf00      	nop
     9cc:	370c      	adds	r7, #12
     9ce:	46bd      	mov	sp, r7
     9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d4:	4770      	bx	lr

000009d6 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     9d6:	b480      	push	{r7}
     9d8:	b083      	sub	sp, #12
     9da:	af00      	add	r7, sp, #0
     9dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	691b      	ldr	r3, [r3, #16]
     9e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ea:	bf00      	nop
     9ec:	370c      	adds	r7, #12
     9ee:	46bd      	mov	sp, r7
     9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f4:	4770      	bx	lr

000009f6 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     9f6:	b480      	push	{r7}
     9f8:	b083      	sub	sp, #12
     9fa:	af00      	add	r7, sp, #0
     9fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	691b      	ldr	r3, [r3, #16]
     a02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a0a:	bf00      	nop
     a0c:	370c      	adds	r7, #12
     a0e:	46bd      	mov	sp, r7
     a10:	f85d 7b04 	ldr.w	r7, [sp], #4
     a14:	4770      	bx	lr

00000a16 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     a16:	b480      	push	{r7}
     a18:	b083      	sub	sp, #12
     a1a:	af00      	add	r7, sp, #0
     a1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	695b      	ldr	r3, [r3, #20]
     a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a2a:	bf00      	nop
     a2c:	370c      	adds	r7, #12
     a2e:	46bd      	mov	sp, r7
     a30:	f85d 7b04 	ldr.w	r7, [sp], #4
     a34:	4770      	bx	lr

00000a36 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     a36:	b480      	push	{r7}
     a38:	b083      	sub	sp, #12
     a3a:	af00      	add	r7, sp, #0
     a3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	695b      	ldr	r3, [r3, #20]
     a42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a4a:	bf00      	nop
     a4c:	370c      	adds	r7, #12
     a4e:	46bd      	mov	sp, r7
     a50:	f85d 7b04 	ldr.w	r7, [sp], #4
     a54:	4770      	bx	lr

00000a56 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     a56:	b480      	push	{r7}
     a58:	b083      	sub	sp, #12
     a5a:	af00      	add	r7, sp, #0
     a5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	695b      	ldr	r3, [r3, #20]
     a62:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a6a:	bf00      	nop
     a6c:	370c      	adds	r7, #12
     a6e:	46bd      	mov	sp, r7
     a70:	f85d 7b04 	ldr.w	r7, [sp], #4
     a74:	4770      	bx	lr

00000a76 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     a76:	b480      	push	{r7}
     a78:	b083      	sub	sp, #12
     a7a:	af00      	add	r7, sp, #0
     a7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	695b      	ldr	r3, [r3, #20]
     a82:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a8a:	bf00      	nop
     a8c:	370c      	adds	r7, #12
     a8e:	46bd      	mov	sp, r7
     a90:	f85d 7b04 	ldr.w	r7, [sp], #4
     a94:	4770      	bx	lr

00000a96 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     a96:	b480      	push	{r7}
     a98:	b083      	sub	sp, #12
     a9a:	af00      	add	r7, sp, #0
     a9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	695b      	ldr	r3, [r3, #20]
     aa2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aaa:	bf00      	nop
     aac:	370c      	adds	r7, #12
     aae:	46bd      	mov	sp, r7
     ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab4:	4770      	bx	lr

00000ab6 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     ab6:	b480      	push	{r7}
     ab8:	b083      	sub	sp, #12
     aba:	af00      	add	r7, sp, #0
     abc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	699b      	ldr	r3, [r3, #24]
     ac2:	f043 0201 	orr.w	r2, r3, #1
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aca:	bf00      	nop
     acc:	370c      	adds	r7, #12
     ace:	46bd      	mov	sp, r7
     ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ad4:	4770      	bx	lr

00000ad6 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     ad6:	b480      	push	{r7}
     ad8:	b083      	sub	sp, #12
     ada:	af00      	add	r7, sp, #0
     adc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	699b      	ldr	r3, [r3, #24]
     ae2:	f043 0202 	orr.w	r2, r3, #2
     ae6:	687b      	ldr	r3, [r7, #4]
     ae8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aea:	bf00      	nop
     aec:	370c      	adds	r7, #12
     aee:	46bd      	mov	sp, r7
     af0:	f85d 7b04 	ldr.w	r7, [sp], #4
     af4:	4770      	bx	lr

00000af6 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     af6:	b480      	push	{r7}
     af8:	b083      	sub	sp, #12
     afa:	af00      	add	r7, sp, #0
     afc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	699b      	ldr	r3, [r3, #24]
     b02:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b0a:	bf00      	nop
     b0c:	370c      	adds	r7, #12
     b0e:	46bd      	mov	sp, r7
     b10:	f85d 7b04 	ldr.w	r7, [sp], #4
     b14:	4770      	bx	lr

00000b16 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     b16:	b480      	push	{r7}
     b18:	b083      	sub	sp, #12
     b1a:	af00      	add	r7, sp, #0
     b1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	699b      	ldr	r3, [r3, #24]
     b22:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b2a:	bf00      	nop
     b2c:	370c      	adds	r7, #12
     b2e:	46bd      	mov	sp, r7
     b30:	f85d 7b04 	ldr.w	r7, [sp], #4
     b34:	4770      	bx	lr

00000b36 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     b36:	b480      	push	{r7}
     b38:	b083      	sub	sp, #12
     b3a:	af00      	add	r7, sp, #0
     b3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	699b      	ldr	r3, [r3, #24]
     b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b4a:	bf00      	nop
     b4c:	370c      	adds	r7, #12
     b4e:	46bd      	mov	sp, r7
     b50:	f85d 7b04 	ldr.w	r7, [sp], #4
     b54:	4770      	bx	lr

00000b56 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     b56:	b480      	push	{r7}
     b58:	b083      	sub	sp, #12
     b5a:	af00      	add	r7, sp, #0
     b5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	699b      	ldr	r3, [r3, #24]
     b62:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b6a:	bf00      	nop
     b6c:	370c      	adds	r7, #12
     b6e:	46bd      	mov	sp, r7
     b70:	f85d 7b04 	ldr.w	r7, [sp], #4
     b74:	4770      	bx	lr

00000b76 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     b76:	b480      	push	{r7}
     b78:	b083      	sub	sp, #12
     b7a:	af00      	add	r7, sp, #0
     b7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	69db      	ldr	r3, [r3, #28]
     b82:	f043 0208 	orr.w	r2, r3, #8
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b8a:	bf00      	nop
     b8c:	370c      	adds	r7, #12
     b8e:	46bd      	mov	sp, r7
     b90:	f85d 7b04 	ldr.w	r7, [sp], #4
     b94:	4770      	bx	lr

00000b96 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     b96:	b480      	push	{r7}
     b98:	b083      	sub	sp, #12
     b9a:	af00      	add	r7, sp, #0
     b9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	69db      	ldr	r3, [r3, #28]
     ba2:	f043 0220 	orr.w	r2, r3, #32
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     baa:	bf00      	nop
     bac:	370c      	adds	r7, #12
     bae:	46bd      	mov	sp, r7
     bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb4:	4770      	bx	lr

00000bb6 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     bb6:	b480      	push	{r7}
     bb8:	b083      	sub	sp, #12
     bba:	af00      	add	r7, sp, #0
     bbc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	69db      	ldr	r3, [r3, #28]
     bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     bc6:	687b      	ldr	r3, [r7, #4]
     bc8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bca:	bf00      	nop
     bcc:	370c      	adds	r7, #12
     bce:	46bd      	mov	sp, r7
     bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bd4:	4770      	bx	lr

00000bd6 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     bd6:	b480      	push	{r7}
     bd8:	b083      	sub	sp, #12
     bda:	af00      	add	r7, sp, #0
     bdc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	69db      	ldr	r3, [r3, #28]
     be2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bea:	bf00      	nop
     bec:	370c      	adds	r7, #12
     bee:	46bd      	mov	sp, r7
     bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf4:	4770      	bx	lr

00000bf6 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     bf6:	b480      	push	{r7}
     bf8:	b083      	sub	sp, #12
     bfa:	af00      	add	r7, sp, #0
     bfc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	6a1b      	ldr	r3, [r3, #32]
     c02:	f043 0201 	orr.w	r2, r3, #1
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c0a:	bf00      	nop
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	f85d 7b04 	ldr.w	r7, [sp], #4
     c14:	4770      	bx	lr

00000c16 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     c16:	b480      	push	{r7}
     c18:	b083      	sub	sp, #12
     c1a:	af00      	add	r7, sp, #0
     c1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	6a1b      	ldr	r3, [r3, #32]
     c22:	f043 0202 	orr.w	r2, r3, #2
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c2a:	bf00      	nop
     c2c:	370c      	adds	r7, #12
     c2e:	46bd      	mov	sp, r7
     c30:	f85d 7b04 	ldr.w	r7, [sp], #4
     c34:	4770      	bx	lr

00000c36 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     c36:	b480      	push	{r7}
     c38:	b083      	sub	sp, #12
     c3a:	af00      	add	r7, sp, #0
     c3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     c3e:	687b      	ldr	r3, [r7, #4]
     c40:	6a1b      	ldr	r3, [r3, #32]
     c42:	f043 0204 	orr.w	r2, r3, #4
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c4a:	bf00      	nop
     c4c:	370c      	adds	r7, #12
     c4e:	46bd      	mov	sp, r7
     c50:	f85d 7b04 	ldr.w	r7, [sp], #4
     c54:	4770      	bx	lr

00000c56 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     c56:	b480      	push	{r7}
     c58:	b083      	sub	sp, #12
     c5a:	af00      	add	r7, sp, #0
     c5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	6a1b      	ldr	r3, [r3, #32]
     c62:	f043 0208 	orr.w	r2, r3, #8
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c6a:	bf00      	nop
     c6c:	370c      	adds	r7, #12
     c6e:	46bd      	mov	sp, r7
     c70:	f85d 7b04 	ldr.w	r7, [sp], #4
     c74:	4770      	bx	lr

00000c76 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     c76:	b480      	push	{r7}
     c78:	b083      	sub	sp, #12
     c7a:	af00      	add	r7, sp, #0
     c7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	6a1b      	ldr	r3, [r3, #32]
     c82:	f043 0220 	orr.w	r2, r3, #32
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c8a:	bf00      	nop
     c8c:	370c      	adds	r7, #12
     c8e:	46bd      	mov	sp, r7
     c90:	f85d 7b04 	ldr.w	r7, [sp], #4
     c94:	4770      	bx	lr

00000c96 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     c96:	b480      	push	{r7}
     c98:	b083      	sub	sp, #12
     c9a:	af00      	add	r7, sp, #0
     c9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	6a1b      	ldr	r3, [r3, #32]
     ca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     caa:	bf00      	nop
     cac:	370c      	adds	r7, #12
     cae:	46bd      	mov	sp, r7
     cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cb4:	4770      	bx	lr

00000cb6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     cb6:	b480      	push	{r7}
     cb8:	b085      	sub	sp, #20
     cba:	af00      	add	r7, sp, #0
     cbc:	60f8      	str	r0, [r7, #12]
     cbe:	460b      	mov	r3, r1
     cc0:	607a      	str	r2, [r7, #4]
     cc2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cc4:	7afb      	ldrb	r3, [r7, #11]
     cc6:	68fa      	ldr	r2, [r7, #12]
     cc8:	01db      	lsls	r3, r3, #7
     cca:	4413      	add	r3, r2
     ccc:	3308      	adds	r3, #8
     cce:	687a      	ldr	r2, [r7, #4]
     cd0:	601a      	str	r2, [r3, #0]
}
     cd2:	bf00      	nop
     cd4:	3714      	adds	r7, #20
     cd6:	46bd      	mov	sp, r7
     cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cdc:	4770      	bx	lr

00000cde <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     cde:	b480      	push	{r7}
     ce0:	b085      	sub	sp, #20
     ce2:	af00      	add	r7, sp, #0
     ce4:	60f8      	str	r0, [r7, #12]
     ce6:	460b      	mov	r3, r1
     ce8:	607a      	str	r2, [r7, #4]
     cea:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     cec:	7afb      	ldrb	r3, [r7, #11]
     cee:	68fa      	ldr	r2, [r7, #12]
     cf0:	01db      	lsls	r3, r3, #7
     cf2:	4413      	add	r3, r2
     cf4:	3304      	adds	r3, #4
     cf6:	687a      	ldr	r2, [r7, #4]
     cf8:	601a      	str	r2, [r3, #0]
}
     cfa:	bf00      	nop
     cfc:	3714      	adds	r7, #20
     cfe:	46bd      	mov	sp, r7
     d00:	f85d 7b04 	ldr.w	r7, [sp], #4
     d04:	4770      	bx	lr

00000d06 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d06:	b480      	push	{r7}
     d08:	b085      	sub	sp, #20
     d0a:	af00      	add	r7, sp, #0
     d0c:	60f8      	str	r0, [r7, #12]
     d0e:	460b      	mov	r3, r1
     d10:	607a      	str	r2, [r7, #4]
     d12:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d14:	7afb      	ldrb	r3, [r7, #11]
     d16:	68fa      	ldr	r2, [r7, #12]
     d18:	01db      	lsls	r3, r3, #7
     d1a:	4413      	add	r3, r2
     d1c:	3318      	adds	r3, #24
     d1e:	687a      	ldr	r2, [r7, #4]
     d20:	601a      	str	r2, [r3, #0]
}
     d22:	bf00      	nop
     d24:	3714      	adds	r7, #20
     d26:	46bd      	mov	sp, r7
     d28:	f85d 7b04 	ldr.w	r7, [sp], #4
     d2c:	4770      	bx	lr

00000d2e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d2e:	b480      	push	{r7}
     d30:	b085      	sub	sp, #20
     d32:	af00      	add	r7, sp, #0
     d34:	60f8      	str	r0, [r7, #12]
     d36:	460b      	mov	r3, r1
     d38:	607a      	str	r2, [r7, #4]
     d3a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d3c:	7afb      	ldrb	r3, [r7, #11]
     d3e:	68fa      	ldr	r2, [r7, #12]
     d40:	01db      	lsls	r3, r3, #7
     d42:	4413      	add	r3, r2
     d44:	3314      	adds	r3, #20
     d46:	687a      	ldr	r2, [r7, #4]
     d48:	601a      	str	r2, [r3, #0]
}
     d4a:	bf00      	nop
     d4c:	3714      	adds	r7, #20
     d4e:	46bd      	mov	sp, r7
     d50:	f85d 7b04 	ldr.w	r7, [sp], #4
     d54:	4770      	bx	lr

00000d56 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     d56:	b480      	push	{r7}
     d58:	b085      	sub	sp, #20
     d5a:	af00      	add	r7, sp, #0
     d5c:	6078      	str	r0, [r7, #4]
     d5e:	4608      	mov	r0, r1
     d60:	4611      	mov	r1, r2
     d62:	461a      	mov	r2, r3
     d64:	4603      	mov	r3, r0
     d66:	70fb      	strb	r3, [r7, #3]
     d68:	460b      	mov	r3, r1
     d6a:	70bb      	strb	r3, [r7, #2]
     d6c:	4613      	mov	r3, r2
     d6e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d70:	78fa      	ldrb	r2, [r7, #3]
     d72:	78bb      	ldrb	r3, [r7, #2]
     d74:	6879      	ldr	r1, [r7, #4]
     d76:	01d2      	lsls	r2, r2, #7
     d78:	440a      	add	r2, r1
     d7a:	4413      	add	r3, r2
     d7c:	3330      	adds	r3, #48	; 0x30
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d82:	7bfb      	ldrb	r3, [r7, #15]
     d84:	f023 030f 	bic.w	r3, r3, #15
     d88:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     d8a:	787b      	ldrb	r3, [r7, #1]
     d8c:	f003 030f 	and.w	r3, r3, #15
     d90:	b2da      	uxtb	r2, r3
     d92:	7bfb      	ldrb	r3, [r7, #15]
     d94:	4313      	orrs	r3, r2
     d96:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d98:	78fa      	ldrb	r2, [r7, #3]
     d9a:	78bb      	ldrb	r3, [r7, #2]
     d9c:	6879      	ldr	r1, [r7, #4]
     d9e:	01d2      	lsls	r2, r2, #7
     da0:	440a      	add	r2, r1
     da2:	4413      	add	r3, r2
     da4:	3330      	adds	r3, #48	; 0x30
     da6:	7bfa      	ldrb	r2, [r7, #15]
     da8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     daa:	bf00      	nop
     dac:	3714      	adds	r7, #20
     dae:	46bd      	mov	sp, r7
     db0:	f85d 7b04 	ldr.w	r7, [sp], #4
     db4:	4770      	bx	lr

00000db6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     db6:	b480      	push	{r7}
     db8:	b085      	sub	sp, #20
     dba:	af00      	add	r7, sp, #0
     dbc:	6078      	str	r0, [r7, #4]
     dbe:	4608      	mov	r0, r1
     dc0:	4611      	mov	r1, r2
     dc2:	461a      	mov	r2, r3
     dc4:	4603      	mov	r3, r0
     dc6:	70fb      	strb	r3, [r7, #3]
     dc8:	460b      	mov	r3, r1
     dca:	70bb      	strb	r3, [r7, #2]
     dcc:	4613      	mov	r3, r2
     dce:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dd0:	78fa      	ldrb	r2, [r7, #3]
     dd2:	78bb      	ldrb	r3, [r7, #2]
     dd4:	6879      	ldr	r1, [r7, #4]
     dd6:	01d2      	lsls	r2, r2, #7
     dd8:	440a      	add	r2, r1
     dda:	4413      	add	r3, r2
     ddc:	3330      	adds	r3, #48	; 0x30
     dde:	781b      	ldrb	r3, [r3, #0]
     de0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     de2:	7bfb      	ldrb	r3, [r7, #15]
     de4:	f003 030f 	and.w	r3, r3, #15
     de8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     dea:	787b      	ldrb	r3, [r7, #1]
     dec:	011b      	lsls	r3, r3, #4
     dee:	b2da      	uxtb	r2, r3
     df0:	7bfb      	ldrb	r3, [r7, #15]
     df2:	4313      	orrs	r3, r2
     df4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     df6:	78fa      	ldrb	r2, [r7, #3]
     df8:	78bb      	ldrb	r3, [r7, #2]
     dfa:	6879      	ldr	r1, [r7, #4]
     dfc:	01d2      	lsls	r2, r2, #7
     dfe:	440a      	add	r2, r1
     e00:	4413      	add	r3, r2
     e02:	3330      	adds	r3, #48	; 0x30
     e04:	7bfa      	ldrb	r2, [r7, #15]
     e06:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e08:	bf00      	nop
     e0a:	3714      	adds	r7, #20
     e0c:	46bd      	mov	sp, r7
     e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
     e12:	4770      	bx	lr

00000e14 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     e14:	b480      	push	{r7}
     e16:	b085      	sub	sp, #20
     e18:	af00      	add	r7, sp, #0
     e1a:	6078      	str	r0, [r7, #4]
     e1c:	4608      	mov	r0, r1
     e1e:	4611      	mov	r1, r2
     e20:	461a      	mov	r2, r3
     e22:	4603      	mov	r3, r0
     e24:	70fb      	strb	r3, [r7, #3]
     e26:	460b      	mov	r3, r1
     e28:	70bb      	strb	r3, [r7, #2]
     e2a:	4613      	mov	r3, r2
     e2c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e2e:	78fa      	ldrb	r2, [r7, #3]
     e30:	78bb      	ldrb	r3, [r7, #2]
     e32:	6879      	ldr	r1, [r7, #4]
     e34:	01d2      	lsls	r2, r2, #7
     e36:	440a      	add	r2, r1
     e38:	4413      	add	r3, r2
     e3a:	3340      	adds	r3, #64	; 0x40
     e3c:	781b      	ldrb	r3, [r3, #0]
     e3e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e40:	7bfb      	ldrb	r3, [r7, #15]
     e42:	f023 0301 	bic.w	r3, r3, #1
     e46:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e48:	787a      	ldrb	r2, [r7, #1]
     e4a:	7bfb      	ldrb	r3, [r7, #15]
     e4c:	4313      	orrs	r3, r2
     e4e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e50:	78fa      	ldrb	r2, [r7, #3]
     e52:	78bb      	ldrb	r3, [r7, #2]
     e54:	6879      	ldr	r1, [r7, #4]
     e56:	01d2      	lsls	r2, r2, #7
     e58:	440a      	add	r2, r1
     e5a:	4413      	add	r3, r2
     e5c:	3340      	adds	r3, #64	; 0x40
     e5e:	7bfa      	ldrb	r2, [r7, #15]
     e60:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e62:	bf00      	nop
     e64:	3714      	adds	r7, #20
     e66:	46bd      	mov	sp, r7
     e68:	f85d 7b04 	ldr.w	r7, [sp], #4
     e6c:	4770      	bx	lr

00000e6e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     e6e:	b490      	push	{r4, r7}
     e70:	b082      	sub	sp, #8
     e72:	af00      	add	r7, sp, #0
     e74:	6078      	str	r0, [r7, #4]
     e76:	460b      	mov	r3, r1
     e78:	70fb      	strb	r3, [r7, #3]
     e7a:	4613      	mov	r3, r2
     e7c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e7e:	78fa      	ldrb	r2, [r7, #3]
     e80:	78bb      	ldrb	r3, [r7, #2]
     e82:	78f8      	ldrb	r0, [r7, #3]
     e84:	78b9      	ldrb	r1, [r7, #2]
     e86:	687c      	ldr	r4, [r7, #4]
     e88:	01c0      	lsls	r0, r0, #7
     e8a:	4420      	add	r0, r4
     e8c:	4401      	add	r1, r0
     e8e:	3140      	adds	r1, #64	; 0x40
     e90:	7809      	ldrb	r1, [r1, #0]
     e92:	b2c9      	uxtb	r1, r1
     e94:	f041 0104 	orr.w	r1, r1, #4
     e98:	b2c8      	uxtb	r0, r1
     e9a:	6879      	ldr	r1, [r7, #4]
     e9c:	01d2      	lsls	r2, r2, #7
     e9e:	440a      	add	r2, r1
     ea0:	4413      	add	r3, r2
     ea2:	3340      	adds	r3, #64	; 0x40
     ea4:	4602      	mov	r2, r0
     ea6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ea8:	bf00      	nop
     eaa:	3708      	adds	r7, #8
     eac:	46bd      	mov	sp, r7
     eae:	bc90      	pop	{r4, r7}
     eb0:	4770      	bx	lr

00000eb2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     eb2:	b490      	push	{r4, r7}
     eb4:	b082      	sub	sp, #8
     eb6:	af00      	add	r7, sp, #0
     eb8:	6078      	str	r0, [r7, #4]
     eba:	460b      	mov	r3, r1
     ebc:	70fb      	strb	r3, [r7, #3]
     ebe:	4613      	mov	r3, r2
     ec0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ec2:	78fa      	ldrb	r2, [r7, #3]
     ec4:	78bb      	ldrb	r3, [r7, #2]
     ec6:	78f8      	ldrb	r0, [r7, #3]
     ec8:	78b9      	ldrb	r1, [r7, #2]
     eca:	687c      	ldr	r4, [r7, #4]
     ecc:	01c0      	lsls	r0, r0, #7
     ece:	4420      	add	r0, r4
     ed0:	4401      	add	r1, r0
     ed2:	3140      	adds	r1, #64	; 0x40
     ed4:	7809      	ldrb	r1, [r1, #0]
     ed6:	b2c9      	uxtb	r1, r1
     ed8:	f021 0104 	bic.w	r1, r1, #4
     edc:	b2c8      	uxtb	r0, r1
     ede:	6879      	ldr	r1, [r7, #4]
     ee0:	01d2      	lsls	r2, r2, #7
     ee2:	440a      	add	r2, r1
     ee4:	4413      	add	r3, r2
     ee6:	3340      	adds	r3, #64	; 0x40
     ee8:	4602      	mov	r2, r0
     eea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     eec:	bf00      	nop
     eee:	3708      	adds	r7, #8
     ef0:	46bd      	mov	sp, r7
     ef2:	bc90      	pop	{r4, r7}
     ef4:	4770      	bx	lr

00000ef6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     ef6:	b480      	push	{r7}
     ef8:	b085      	sub	sp, #20
     efa:	af00      	add	r7, sp, #0
     efc:	60f8      	str	r0, [r7, #12]
     efe:	460b      	mov	r3, r1
     f00:	607a      	str	r2, [r7, #4]
     f02:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f04:	7afb      	ldrb	r3, [r7, #11]
     f06:	68fa      	ldr	r2, [r7, #12]
     f08:	01db      	lsls	r3, r3, #7
     f0a:	4413      	add	r3, r2
     f0c:	3328      	adds	r3, #40	; 0x28
     f0e:	687a      	ldr	r2, [r7, #4]
     f10:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f12:	bf00      	nop
     f14:	3714      	adds	r7, #20
     f16:	46bd      	mov	sp, r7
     f18:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1c:	4770      	bx	lr
	...

00000f20 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     f20:	b580      	push	{r7, lr}
     f22:	b082      	sub	sp, #8
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	6039      	str	r1, [r7, #0]
     f2a:	71fb      	strb	r3, [r7, #7]
     f2c:	4613      	mov	r3, r2
     f2e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     f30:	79bb      	ldrb	r3, [r7, #6]
     f32:	2b01      	cmp	r3, #1
     f34:	d01c      	beq.n	f70 <_gpio_set_direction+0x50>
     f36:	2b02      	cmp	r3, #2
     f38:	d037      	beq.n	faa <_gpio_set_direction+0x8a>
     f3a:	2b00      	cmp	r3, #0
     f3c:	d14e      	bne.n	fdc <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     f3e:	79fb      	ldrb	r3, [r7, #7]
     f40:	683a      	ldr	r2, [r7, #0]
     f42:	4619      	mov	r1, r3
     f44:	482a      	ldr	r0, [pc, #168]	; (ff0 <_gpio_set_direction+0xd0>)
     f46:	4b2b      	ldr	r3, [pc, #172]	; (ff4 <_gpio_set_direction+0xd4>)
     f48:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     f4a:	683b      	ldr	r3, [r7, #0]
     f4c:	b29b      	uxth	r3, r3
     f4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     f52:	79fb      	ldrb	r3, [r7, #7]
     f54:	4619      	mov	r1, r3
     f56:	4826      	ldr	r0, [pc, #152]	; (ff0 <_gpio_set_direction+0xd0>)
     f58:	4b27      	ldr	r3, [pc, #156]	; (ff8 <_gpio_set_direction+0xd8>)
     f5a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     f5c:	683b      	ldr	r3, [r7, #0]
     f5e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     f60:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     f64:	79fb      	ldrb	r3, [r7, #7]
     f66:	4619      	mov	r1, r3
     f68:	4821      	ldr	r0, [pc, #132]	; (ff0 <_gpio_set_direction+0xd0>)
     f6a:	4b23      	ldr	r3, [pc, #140]	; (ff8 <_gpio_set_direction+0xd8>)
     f6c:	4798      	blx	r3
		break;
     f6e:	e03a      	b.n	fe6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     f70:	79fb      	ldrb	r3, [r7, #7]
     f72:	683a      	ldr	r2, [r7, #0]
     f74:	4619      	mov	r1, r3
     f76:	481e      	ldr	r0, [pc, #120]	; (ff0 <_gpio_set_direction+0xd0>)
     f78:	4b1e      	ldr	r3, [pc, #120]	; (ff4 <_gpio_set_direction+0xd4>)
     f7a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     f7c:	683b      	ldr	r3, [r7, #0]
     f7e:	b29b      	uxth	r3, r3
     f80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     f88:	79f9      	ldrb	r1, [r7, #7]
     f8a:	461a      	mov	r2, r3
     f8c:	4818      	ldr	r0, [pc, #96]	; (ff0 <_gpio_set_direction+0xd0>)
     f8e:	4b1a      	ldr	r3, [pc, #104]	; (ff8 <_gpio_set_direction+0xd8>)
     f90:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     f92:	683b      	ldr	r3, [r7, #0]
     f94:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     f9e:	79f9      	ldrb	r1, [r7, #7]
     fa0:	461a      	mov	r2, r3
     fa2:	4813      	ldr	r0, [pc, #76]	; (ff0 <_gpio_set_direction+0xd0>)
     fa4:	4b14      	ldr	r3, [pc, #80]	; (ff8 <_gpio_set_direction+0xd8>)
     fa6:	4798      	blx	r3
		break;
     fa8:	e01d      	b.n	fe6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     faa:	79fb      	ldrb	r3, [r7, #7]
     fac:	683a      	ldr	r2, [r7, #0]
     fae:	4619      	mov	r1, r3
     fb0:	480f      	ldr	r0, [pc, #60]	; (ff0 <_gpio_set_direction+0xd0>)
     fb2:	4b12      	ldr	r3, [pc, #72]	; (ffc <_gpio_set_direction+0xdc>)
     fb4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     fb6:	683b      	ldr	r3, [r7, #0]
     fb8:	b29b      	uxth	r3, r3
     fba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     fbe:	79fb      	ldrb	r3, [r7, #7]
     fc0:	4619      	mov	r1, r3
     fc2:	480b      	ldr	r0, [pc, #44]	; (ff0 <_gpio_set_direction+0xd0>)
     fc4:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <_gpio_set_direction+0xd8>)
     fc6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     fc8:	683b      	ldr	r3, [r7, #0]
     fca:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     fcc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     fd0:	79fb      	ldrb	r3, [r7, #7]
     fd2:	4619      	mov	r1, r3
     fd4:	4806      	ldr	r0, [pc, #24]	; (ff0 <_gpio_set_direction+0xd0>)
     fd6:	4b08      	ldr	r3, [pc, #32]	; (ff8 <_gpio_set_direction+0xd8>)
     fd8:	4798      	blx	r3
		break;
     fda:	e004      	b.n	fe6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     fdc:	2246      	movs	r2, #70	; 0x46
     fde:	4908      	ldr	r1, [pc, #32]	; (1000 <_gpio_set_direction+0xe0>)
     fe0:	2000      	movs	r0, #0
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <_gpio_set_direction+0xe4>)
     fe4:	4798      	blx	r3
	}
}
     fe6:	bf00      	nop
     fe8:	3708      	adds	r7, #8
     fea:	46bd      	mov	sp, r7
     fec:	bd80      	pop	{r7, pc}
     fee:	bf00      	nop
     ff0:	41008000 	.word	0x41008000
     ff4:	00000cdf 	.word	0x00000cdf
     ff8:	00000ef7 	.word	0x00000ef7
     ffc:	00000cb7 	.word	0x00000cb7
    1000:	000107b8 	.word	0x000107b8
    1004:	000038e1 	.word	0x000038e1

00001008 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1008:	b580      	push	{r7, lr}
    100a:	b082      	sub	sp, #8
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	6039      	str	r1, [r7, #0]
    1012:	71fb      	strb	r3, [r7, #7]
    1014:	4613      	mov	r3, r2
    1016:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1018:	79bb      	ldrb	r3, [r7, #6]
    101a:	2b00      	cmp	r3, #0
    101c:	d006      	beq.n	102c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    101e:	79fb      	ldrb	r3, [r7, #7]
    1020:	683a      	ldr	r2, [r7, #0]
    1022:	4619      	mov	r1, r3
    1024:	4806      	ldr	r0, [pc, #24]	; (1040 <_gpio_set_level+0x38>)
    1026:	4b07      	ldr	r3, [pc, #28]	; (1044 <_gpio_set_level+0x3c>)
    1028:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    102a:	e005      	b.n	1038 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    102c:	79fb      	ldrb	r3, [r7, #7]
    102e:	683a      	ldr	r2, [r7, #0]
    1030:	4619      	mov	r1, r3
    1032:	4803      	ldr	r0, [pc, #12]	; (1040 <_gpio_set_level+0x38>)
    1034:	4b04      	ldr	r3, [pc, #16]	; (1048 <_gpio_set_level+0x40>)
    1036:	4798      	blx	r3
}
    1038:	bf00      	nop
    103a:	3708      	adds	r7, #8
    103c:	46bd      	mov	sp, r7
    103e:	bd80      	pop	{r7, pc}
    1040:	41008000 	.word	0x41008000
    1044:	00000d07 	.word	0x00000d07
    1048:	00000d2f 	.word	0x00000d2f

0000104c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    104c:	b580      	push	{r7, lr}
    104e:	b082      	sub	sp, #8
    1050:	af00      	add	r7, sp, #0
    1052:	4603      	mov	r3, r0
    1054:	71fb      	strb	r3, [r7, #7]
    1056:	460b      	mov	r3, r1
    1058:	71bb      	strb	r3, [r7, #6]
    105a:	4613      	mov	r3, r2
    105c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    105e:	797b      	ldrb	r3, [r7, #5]
    1060:	2b01      	cmp	r3, #1
    1062:	d00a      	beq.n	107a <_gpio_set_pin_pull_mode+0x2e>
    1064:	2b02      	cmp	r3, #2
    1066:	d01f      	beq.n	10a8 <_gpio_set_pin_pull_mode+0x5c>
    1068:	2b00      	cmp	r3, #0
    106a:	d134      	bne.n	10d6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    106c:	79ba      	ldrb	r2, [r7, #6]
    106e:	79fb      	ldrb	r3, [r7, #7]
    1070:	4619      	mov	r1, r3
    1072:	481e      	ldr	r0, [pc, #120]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    1074:	4b1e      	ldr	r3, [pc, #120]	; (10f0 <_gpio_set_pin_pull_mode+0xa4>)
    1076:	4798      	blx	r3
		break;
    1078:	e033      	b.n	10e2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    107a:	79bb      	ldrb	r3, [r7, #6]
    107c:	2201      	movs	r2, #1
    107e:	409a      	lsls	r2, r3
    1080:	79fb      	ldrb	r3, [r7, #7]
    1082:	4619      	mov	r1, r3
    1084:	4819      	ldr	r0, [pc, #100]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    1086:	4b1b      	ldr	r3, [pc, #108]	; (10f4 <_gpio_set_pin_pull_mode+0xa8>)
    1088:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    108a:	79ba      	ldrb	r2, [r7, #6]
    108c:	79fb      	ldrb	r3, [r7, #7]
    108e:	4619      	mov	r1, r3
    1090:	4816      	ldr	r0, [pc, #88]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    1092:	4b19      	ldr	r3, [pc, #100]	; (10f8 <_gpio_set_pin_pull_mode+0xac>)
    1094:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1096:	79bb      	ldrb	r3, [r7, #6]
    1098:	2201      	movs	r2, #1
    109a:	409a      	lsls	r2, r3
    109c:	79fb      	ldrb	r3, [r7, #7]
    109e:	4619      	mov	r1, r3
    10a0:	4812      	ldr	r0, [pc, #72]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    10a2:	4b16      	ldr	r3, [pc, #88]	; (10fc <_gpio_set_pin_pull_mode+0xb0>)
    10a4:	4798      	blx	r3
		break;
    10a6:	e01c      	b.n	10e2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    10a8:	79bb      	ldrb	r3, [r7, #6]
    10aa:	2201      	movs	r2, #1
    10ac:	409a      	lsls	r2, r3
    10ae:	79fb      	ldrb	r3, [r7, #7]
    10b0:	4619      	mov	r1, r3
    10b2:	480e      	ldr	r0, [pc, #56]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    10b4:	4b0f      	ldr	r3, [pc, #60]	; (10f4 <_gpio_set_pin_pull_mode+0xa8>)
    10b6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    10b8:	79ba      	ldrb	r2, [r7, #6]
    10ba:	79fb      	ldrb	r3, [r7, #7]
    10bc:	4619      	mov	r1, r3
    10be:	480b      	ldr	r0, [pc, #44]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    10c0:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <_gpio_set_pin_pull_mode+0xac>)
    10c2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    10c4:	79bb      	ldrb	r3, [r7, #6]
    10c6:	2201      	movs	r2, #1
    10c8:	409a      	lsls	r2, r3
    10ca:	79fb      	ldrb	r3, [r7, #7]
    10cc:	4619      	mov	r1, r3
    10ce:	4807      	ldr	r0, [pc, #28]	; (10ec <_gpio_set_pin_pull_mode+0xa0>)
    10d0:	4b0b      	ldr	r3, [pc, #44]	; (1100 <_gpio_set_pin_pull_mode+0xb4>)
    10d2:	4798      	blx	r3
		break;
    10d4:	e005      	b.n	10e2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    10d6:	2289      	movs	r2, #137	; 0x89
    10d8:	490a      	ldr	r1, [pc, #40]	; (1104 <_gpio_set_pin_pull_mode+0xb8>)
    10da:	2000      	movs	r0, #0
    10dc:	4b0a      	ldr	r3, [pc, #40]	; (1108 <_gpio_set_pin_pull_mode+0xbc>)
    10de:	4798      	blx	r3
		break;
    10e0:	bf00      	nop
	}
}
    10e2:	bf00      	nop
    10e4:	3708      	adds	r7, #8
    10e6:	46bd      	mov	sp, r7
    10e8:	bd80      	pop	{r7, pc}
    10ea:	bf00      	nop
    10ec:	41008000 	.word	0x41008000
    10f0:	00000eb3 	.word	0x00000eb3
    10f4:	00000cdf 	.word	0x00000cdf
    10f8:	00000e6f 	.word	0x00000e6f
    10fc:	00000d07 	.word	0x00000d07
    1100:	00000d2f 	.word	0x00000d2f
    1104:	000107b8 	.word	0x000107b8
    1108:	000038e1 	.word	0x000038e1

0000110c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    110c:	b590      	push	{r4, r7, lr}
    110e:	b085      	sub	sp, #20
    1110:	af00      	add	r7, sp, #0
    1112:	6078      	str	r0, [r7, #4]
    1114:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	095b      	lsrs	r3, r3, #5
    111a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	b2db      	uxtb	r3, r3
    1120:	f003 031f 	and.w	r3, r3, #31
    1124:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	f1b3 3fff 	cmp.w	r3, #4294967295
    112c:	d106      	bne.n	113c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    112e:	7bba      	ldrb	r2, [r7, #14]
    1130:	7bf9      	ldrb	r1, [r7, #15]
    1132:	2300      	movs	r3, #0
    1134:	4812      	ldr	r0, [pc, #72]	; (1180 <_gpio_set_pin_function+0x74>)
    1136:	4c13      	ldr	r4, [pc, #76]	; (1184 <_gpio_set_pin_function+0x78>)
    1138:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    113a:	e01d      	b.n	1178 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    113c:	7bba      	ldrb	r2, [r7, #14]
    113e:	7bf9      	ldrb	r1, [r7, #15]
    1140:	2301      	movs	r3, #1
    1142:	480f      	ldr	r0, [pc, #60]	; (1180 <_gpio_set_pin_function+0x74>)
    1144:	4c0f      	ldr	r4, [pc, #60]	; (1184 <_gpio_set_pin_function+0x78>)
    1146:	47a0      	blx	r4
		if (pin & 1) {
    1148:	7bbb      	ldrb	r3, [r7, #14]
    114a:	f003 0301 	and.w	r3, r3, #1
    114e:	2b00      	cmp	r3, #0
    1150:	d009      	beq.n	1166 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1152:	7bbb      	ldrb	r3, [r7, #14]
    1154:	085b      	lsrs	r3, r3, #1
    1156:	b2da      	uxtb	r2, r3
    1158:	683b      	ldr	r3, [r7, #0]
    115a:	b2db      	uxtb	r3, r3
    115c:	7bf9      	ldrb	r1, [r7, #15]
    115e:	4808      	ldr	r0, [pc, #32]	; (1180 <_gpio_set_pin_function+0x74>)
    1160:	4c09      	ldr	r4, [pc, #36]	; (1188 <_gpio_set_pin_function+0x7c>)
    1162:	47a0      	blx	r4
}
    1164:	e008      	b.n	1178 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1166:	7bbb      	ldrb	r3, [r7, #14]
    1168:	085b      	lsrs	r3, r3, #1
    116a:	b2da      	uxtb	r2, r3
    116c:	683b      	ldr	r3, [r7, #0]
    116e:	b2db      	uxtb	r3, r3
    1170:	7bf9      	ldrb	r1, [r7, #15]
    1172:	4803      	ldr	r0, [pc, #12]	; (1180 <_gpio_set_pin_function+0x74>)
    1174:	4c05      	ldr	r4, [pc, #20]	; (118c <_gpio_set_pin_function+0x80>)
    1176:	47a0      	blx	r4
}
    1178:	bf00      	nop
    117a:	3714      	adds	r7, #20
    117c:	46bd      	mov	sp, r7
    117e:	bd90      	pop	{r4, r7, pc}
    1180:	41008000 	.word	0x41008000
    1184:	00000e15 	.word	0x00000e15
    1188:	00000db7 	.word	0x00000db7
    118c:	00000d57 	.word	0x00000d57

00001190 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1190:	b580      	push	{r7, lr}
    1192:	b082      	sub	sp, #8
    1194:	af00      	add	r7, sp, #0
    1196:	4603      	mov	r3, r0
    1198:	460a      	mov	r2, r1
    119a:	71fb      	strb	r3, [r7, #7]
    119c:	4613      	mov	r3, r2
    119e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    11a0:	79fb      	ldrb	r3, [r7, #7]
    11a2:	095b      	lsrs	r3, r3, #5
    11a4:	b2d8      	uxtb	r0, r3
    11a6:	79fb      	ldrb	r3, [r7, #7]
    11a8:	f003 031f 	and.w	r3, r3, #31
    11ac:	b2db      	uxtb	r3, r3
    11ae:	79ba      	ldrb	r2, [r7, #6]
    11b0:	4619      	mov	r1, r3
    11b2:	4b03      	ldr	r3, [pc, #12]	; (11c0 <gpio_set_pin_pull_mode+0x30>)
    11b4:	4798      	blx	r3
}
    11b6:	bf00      	nop
    11b8:	3708      	adds	r7, #8
    11ba:	46bd      	mov	sp, r7
    11bc:	bd80      	pop	{r7, pc}
    11be:	bf00      	nop
    11c0:	0000104d 	.word	0x0000104d

000011c4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b082      	sub	sp, #8
    11c8:	af00      	add	r7, sp, #0
    11ca:	6078      	str	r0, [r7, #4]
    11cc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    11ce:	6839      	ldr	r1, [r7, #0]
    11d0:	6878      	ldr	r0, [r7, #4]
    11d2:	4b03      	ldr	r3, [pc, #12]	; (11e0 <gpio_set_pin_function+0x1c>)
    11d4:	4798      	blx	r3
}
    11d6:	bf00      	nop
    11d8:	3708      	adds	r7, #8
    11da:	46bd      	mov	sp, r7
    11dc:	bd80      	pop	{r7, pc}
    11de:	bf00      	nop
    11e0:	0000110d 	.word	0x0000110d

000011e4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    11e4:	b580      	push	{r7, lr}
    11e6:	b082      	sub	sp, #8
    11e8:	af00      	add	r7, sp, #0
    11ea:	4603      	mov	r3, r0
    11ec:	460a      	mov	r2, r1
    11ee:	71fb      	strb	r3, [r7, #7]
    11f0:	4613      	mov	r3, r2
    11f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    11f4:	79fb      	ldrb	r3, [r7, #7]
    11f6:	095b      	lsrs	r3, r3, #5
    11f8:	b2d8      	uxtb	r0, r3
    11fa:	79fb      	ldrb	r3, [r7, #7]
    11fc:	f003 031f 	and.w	r3, r3, #31
    1200:	2201      	movs	r2, #1
    1202:	fa02 f303 	lsl.w	r3, r2, r3
    1206:	79ba      	ldrb	r2, [r7, #6]
    1208:	4619      	mov	r1, r3
    120a:	4b03      	ldr	r3, [pc, #12]	; (1218 <gpio_set_pin_direction+0x34>)
    120c:	4798      	blx	r3
}
    120e:	bf00      	nop
    1210:	3708      	adds	r7, #8
    1212:	46bd      	mov	sp, r7
    1214:	bd80      	pop	{r7, pc}
    1216:	bf00      	nop
    1218:	00000f21 	.word	0x00000f21

0000121c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    121c:	b580      	push	{r7, lr}
    121e:	b082      	sub	sp, #8
    1220:	af00      	add	r7, sp, #0
    1222:	4603      	mov	r3, r0
    1224:	460a      	mov	r2, r1
    1226:	71fb      	strb	r3, [r7, #7]
    1228:	4613      	mov	r3, r2
    122a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    122c:	79fb      	ldrb	r3, [r7, #7]
    122e:	095b      	lsrs	r3, r3, #5
    1230:	b2d8      	uxtb	r0, r3
    1232:	79fb      	ldrb	r3, [r7, #7]
    1234:	f003 031f 	and.w	r3, r3, #31
    1238:	2201      	movs	r2, #1
    123a:	fa02 f303 	lsl.w	r3, r2, r3
    123e:	79ba      	ldrb	r2, [r7, #6]
    1240:	4619      	mov	r1, r3
    1242:	4b03      	ldr	r3, [pc, #12]	; (1250 <gpio_set_pin_level+0x34>)
    1244:	4798      	blx	r3
}
    1246:	bf00      	nop
    1248:	3708      	adds	r7, #8
    124a:	46bd      	mov	sp, r7
    124c:	bd80      	pop	{r7, pc}
    124e:	bf00      	nop
    1250:	00001009 	.word	0x00001009

00001254 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1254:	b580      	push	{r7, lr}
    1256:	af00      	add	r7, sp, #0
	_init_chip();
    1258:	4b01      	ldr	r3, [pc, #4]	; (1260 <init_mcu+0xc>)
    125a:	4798      	blx	r3
}
    125c:	bf00      	nop
    125e:	bd80      	pop	{r7, pc}
    1260:	00004191 	.word	0x00004191

00001264 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1264:	b580      	push	{r7, lr}
    1266:	b082      	sub	sp, #8
    1268:	af00      	add	r7, sp, #0
    126a:	6078      	str	r0, [r7, #4]
    126c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    126e:	687b      	ldr	r3, [r7, #4]
    1270:	2b00      	cmp	r3, #0
    1272:	d004      	beq.n	127e <wdt_init+0x1a>
    1274:	683b      	ldr	r3, [r7, #0]
    1276:	2b00      	cmp	r3, #0
    1278:	d001      	beq.n	127e <wdt_init+0x1a>
    127a:	2301      	movs	r3, #1
    127c:	e000      	b.n	1280 <wdt_init+0x1c>
    127e:	2300      	movs	r3, #0
    1280:	f003 0301 	and.w	r3, r3, #1
    1284:	b2db      	uxtb	r3, r3
    1286:	2248      	movs	r2, #72	; 0x48
    1288:	4907      	ldr	r1, [pc, #28]	; (12a8 <wdt_init+0x44>)
    128a:	4618      	mov	r0, r3
    128c:	4b07      	ldr	r3, [pc, #28]	; (12ac <wdt_init+0x48>)
    128e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	683a      	ldr	r2, [r7, #0]
    1294:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	4618      	mov	r0, r3
    129a:	4b05      	ldr	r3, [pc, #20]	; (12b0 <wdt_init+0x4c>)
    129c:	4798      	blx	r3
    129e:	4603      	mov	r3, r0
}
    12a0:	4618      	mov	r0, r3
    12a2:	3708      	adds	r7, #8
    12a4:	46bd      	mov	sp, r7
    12a6:	bd80      	pop	{r7, pc}
    12a8:	000107d4 	.word	0x000107d4
    12ac:	000038e1 	.word	0x000038e1
    12b0:	0000aaf1 	.word	0x0000aaf1

000012b4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    12b4:	b580      	push	{r7, lr}
    12b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    12b8:	4804      	ldr	r0, [pc, #16]	; (12cc <CRC_CALC_init+0x18>)
    12ba:	4b05      	ldr	r3, [pc, #20]	; (12d0 <CRC_CALC_init+0x1c>)
    12bc:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    12be:	4905      	ldr	r1, [pc, #20]	; (12d4 <CRC_CALC_init+0x20>)
    12c0:	4805      	ldr	r0, [pc, #20]	; (12d8 <CRC_CALC_init+0x24>)
    12c2:	4b06      	ldr	r3, [pc, #24]	; (12dc <CRC_CALC_init+0x28>)
    12c4:	4798      	blx	r3
}
    12c6:	bf00      	nop
    12c8:	bd80      	pop	{r7, pc}
    12ca:	bf00      	nop
    12cc:	40000800 	.word	0x40000800
    12d0:	00000ad7 	.word	0x00000ad7
    12d4:	41002000 	.word	0x41002000
    12d8:	2000aadc 	.word	0x2000aadc
    12dc:	00002309 	.word	0x00002309

000012e0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    12e0:	b580      	push	{r7, lr}
    12e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12e4:	2244      	movs	r2, #68	; 0x44
    12e6:	2104      	movs	r1, #4
    12e8:	483f      	ldr	r0, [pc, #252]	; (13e8 <EXTERNAL_IRQ_0_init+0x108>)
    12ea:	4b40      	ldr	r3, [pc, #256]	; (13ec <EXTERNAL_IRQ_0_init+0x10c>)
    12ec:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    12ee:	4840      	ldr	r0, [pc, #256]	; (13f0 <EXTERNAL_IRQ_0_init+0x110>)
    12f0:	4b40      	ldr	r3, [pc, #256]	; (13f4 <EXTERNAL_IRQ_0_init+0x114>)
    12f2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    12f4:	2101      	movs	r1, #1
    12f6:	2040      	movs	r0, #64	; 0x40
    12f8:	4b3f      	ldr	r3, [pc, #252]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    12fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    12fc:	2100      	movs	r1, #0
    12fe:	2040      	movs	r0, #64	; 0x40
    1300:	4b3e      	ldr	r3, [pc, #248]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    1302:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1304:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1308:	2040      	movs	r0, #64	; 0x40
    130a:	4b3d      	ldr	r3, [pc, #244]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    130c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    130e:	2101      	movs	r1, #1
    1310:	2021      	movs	r0, #33	; 0x21
    1312:	4b39      	ldr	r3, [pc, #228]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    1314:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1316:	2100      	movs	r1, #0
    1318:	2021      	movs	r0, #33	; 0x21
    131a:	4b38      	ldr	r3, [pc, #224]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    131c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    131e:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1322:	2021      	movs	r0, #33	; 0x21
    1324:	4b36      	ldr	r3, [pc, #216]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    1326:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1328:	2101      	movs	r1, #1
    132a:	2003      	movs	r0, #3
    132c:	4b32      	ldr	r3, [pc, #200]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    132e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1330:	2102      	movs	r1, #2
    1332:	2003      	movs	r0, #3
    1334:	4b31      	ldr	r3, [pc, #196]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    1336:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1338:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    133c:	2003      	movs	r0, #3
    133e:	4b30      	ldr	r3, [pc, #192]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    1340:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1342:	2101      	movs	r1, #1
    1344:	2004      	movs	r0, #4
    1346:	4b2c      	ldr	r3, [pc, #176]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    1348:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    134a:	2102      	movs	r1, #2
    134c:	2004      	movs	r0, #4
    134e:	4b2b      	ldr	r3, [pc, #172]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    1350:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1352:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1356:	2004      	movs	r0, #4
    1358:	4b29      	ldr	r3, [pc, #164]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    135a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    135c:	2101      	movs	r1, #1
    135e:	2005      	movs	r0, #5
    1360:	4b25      	ldr	r3, [pc, #148]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    1362:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1364:	2102      	movs	r1, #2
    1366:	2005      	movs	r0, #5
    1368:	4b24      	ldr	r3, [pc, #144]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    136a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    136c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1370:	2005      	movs	r0, #5
    1372:	4b23      	ldr	r3, [pc, #140]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    1374:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1376:	2101      	movs	r1, #1
    1378:	2056      	movs	r0, #86	; 0x56
    137a:	4b1f      	ldr	r3, [pc, #124]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    137c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    137e:	2102      	movs	r1, #2
    1380:	2056      	movs	r0, #86	; 0x56
    1382:	4b1e      	ldr	r3, [pc, #120]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    1384:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1386:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    138a:	2056      	movs	r0, #86	; 0x56
    138c:	4b1c      	ldr	r3, [pc, #112]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    138e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1390:	2101      	movs	r1, #1
    1392:	2057      	movs	r0, #87	; 0x57
    1394:	4b18      	ldr	r3, [pc, #96]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    1396:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1398:	2102      	movs	r1, #2
    139a:	2057      	movs	r0, #87	; 0x57
    139c:	4b17      	ldr	r3, [pc, #92]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    139e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    13a0:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    13a4:	2057      	movs	r0, #87	; 0x57
    13a6:	4b16      	ldr	r3, [pc, #88]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    13a8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    13aa:	2101      	movs	r1, #1
    13ac:	2028      	movs	r0, #40	; 0x28
    13ae:	4b12      	ldr	r3, [pc, #72]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    13b0:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    13b2:	2100      	movs	r1, #0
    13b4:	2028      	movs	r0, #40	; 0x28
    13b6:	4b11      	ldr	r3, [pc, #68]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    13b8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    13ba:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    13be:	2028      	movs	r0, #40	; 0x28
    13c0:	4b0f      	ldr	r3, [pc, #60]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    13c2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    13c4:	2101      	movs	r1, #1
    13c6:	2029      	movs	r0, #41	; 0x29
    13c8:	4b0b      	ldr	r3, [pc, #44]	; (13f8 <EXTERNAL_IRQ_0_init+0x118>)
    13ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    13cc:	2100      	movs	r1, #0
    13ce:	2029      	movs	r0, #41	; 0x29
    13d0:	4b0a      	ldr	r3, [pc, #40]	; (13fc <EXTERNAL_IRQ_0_init+0x11c>)
    13d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    13d4:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    13d8:	2029      	movs	r0, #41	; 0x29
    13da:	4b09      	ldr	r3, [pc, #36]	; (1400 <EXTERNAL_IRQ_0_init+0x120>)
    13dc:	4798      	blx	r3

	ext_irq_init();
    13de:	4b09      	ldr	r3, [pc, #36]	; (1404 <EXTERNAL_IRQ_0_init+0x124>)
    13e0:	4798      	blx	r3
}
    13e2:	bf00      	nop
    13e4:	bd80      	pop	{r7, pc}
    13e6:	bf00      	nop
    13e8:	40001c00 	.word	0x40001c00
    13ec:	00000971 	.word	0x00000971
    13f0:	40000800 	.word	0x40000800
    13f4:	00000a57 	.word	0x00000a57
    13f8:	000011e5 	.word	0x000011e5
    13fc:	00001191 	.word	0x00001191
    1400:	000011c5 	.word	0x000011c5
    1404:	00002369 	.word	0x00002369

00001408 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1408:	b580      	push	{r7, lr}
    140a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    140c:	2244      	movs	r2, #68	; 0x44
    140e:	210b      	movs	r1, #11
    1410:	4807      	ldr	r0, [pc, #28]	; (1430 <EVENT_SYSTEM_0_init+0x28>)
    1412:	4b08      	ldr	r3, [pc, #32]	; (1434 <EVENT_SYSTEM_0_init+0x2c>)
    1414:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1416:	2244      	movs	r2, #68	; 0x44
    1418:	210c      	movs	r1, #12
    141a:	4805      	ldr	r0, [pc, #20]	; (1430 <EVENT_SYSTEM_0_init+0x28>)
    141c:	4b05      	ldr	r3, [pc, #20]	; (1434 <EVENT_SYSTEM_0_init+0x2c>)
    141e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1420:	4805      	ldr	r0, [pc, #20]	; (1438 <EVENT_SYSTEM_0_init+0x30>)
    1422:	4b06      	ldr	r3, [pc, #24]	; (143c <EVENT_SYSTEM_0_init+0x34>)
    1424:	4798      	blx	r3

	event_system_init();
    1426:	4b06      	ldr	r3, [pc, #24]	; (1440 <EVENT_SYSTEM_0_init+0x38>)
    1428:	4798      	blx	r3
}
    142a:	bf00      	nop
    142c:	bd80      	pop	{r7, pc}
    142e:	bf00      	nop
    1430:	40001c00 	.word	0x40001c00
    1434:	00000971 	.word	0x00000971
    1438:	40000800 	.word	0x40000800
    143c:	00000af7 	.word	0x00000af7
    1440:	00002355 	.word	0x00002355

00001444 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1444:	b580      	push	{r7, lr}
    1446:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1448:	2101      	movs	r1, #1
    144a:	202b      	movs	r0, #43	; 0x2b
    144c:	4b2b      	ldr	r3, [pc, #172]	; (14fc <QSPI_N25Q256_PORT_init+0xb8>)
    144e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1450:	2100      	movs	r1, #0
    1452:	202b      	movs	r0, #43	; 0x2b
    1454:	4b2a      	ldr	r3, [pc, #168]	; (1500 <QSPI_N25Q256_PORT_init+0xbc>)
    1456:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1458:	492a      	ldr	r1, [pc, #168]	; (1504 <QSPI_N25Q256_PORT_init+0xc0>)
    145a:	202b      	movs	r0, #43	; 0x2b
    145c:	4b2a      	ldr	r3, [pc, #168]	; (1508 <QSPI_N25Q256_PORT_init+0xc4>)
    145e:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1460:	2102      	movs	r1, #2
    1462:	2008      	movs	r0, #8
    1464:	4b25      	ldr	r3, [pc, #148]	; (14fc <QSPI_N25Q256_PORT_init+0xb8>)
    1466:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1468:	2100      	movs	r1, #0
    146a:	2008      	movs	r0, #8
    146c:	4b27      	ldr	r3, [pc, #156]	; (150c <QSPI_N25Q256_PORT_init+0xc8>)
    146e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1470:	2100      	movs	r1, #0
    1472:	2008      	movs	r0, #8
    1474:	4b22      	ldr	r3, [pc, #136]	; (1500 <QSPI_N25Q256_PORT_init+0xbc>)
    1476:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1478:	4925      	ldr	r1, [pc, #148]	; (1510 <QSPI_N25Q256_PORT_init+0xcc>)
    147a:	2008      	movs	r0, #8
    147c:	4b22      	ldr	r3, [pc, #136]	; (1508 <QSPI_N25Q256_PORT_init+0xc4>)
    147e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1480:	2102      	movs	r1, #2
    1482:	2009      	movs	r0, #9
    1484:	4b1d      	ldr	r3, [pc, #116]	; (14fc <QSPI_N25Q256_PORT_init+0xb8>)
    1486:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1488:	2100      	movs	r1, #0
    148a:	2009      	movs	r0, #9
    148c:	4b1f      	ldr	r3, [pc, #124]	; (150c <QSPI_N25Q256_PORT_init+0xc8>)
    148e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1490:	2100      	movs	r1, #0
    1492:	2009      	movs	r0, #9
    1494:	4b1a      	ldr	r3, [pc, #104]	; (1500 <QSPI_N25Q256_PORT_init+0xbc>)
    1496:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1498:	491e      	ldr	r1, [pc, #120]	; (1514 <QSPI_N25Q256_PORT_init+0xd0>)
    149a:	2009      	movs	r0, #9
    149c:	4b1a      	ldr	r3, [pc, #104]	; (1508 <QSPI_N25Q256_PORT_init+0xc4>)
    149e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    14a0:	2102      	movs	r1, #2
    14a2:	200a      	movs	r0, #10
    14a4:	4b15      	ldr	r3, [pc, #84]	; (14fc <QSPI_N25Q256_PORT_init+0xb8>)
    14a6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    14a8:	2100      	movs	r1, #0
    14aa:	200a      	movs	r0, #10
    14ac:	4b17      	ldr	r3, [pc, #92]	; (150c <QSPI_N25Q256_PORT_init+0xc8>)
    14ae:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    14b0:	2100      	movs	r1, #0
    14b2:	200a      	movs	r0, #10
    14b4:	4b12      	ldr	r3, [pc, #72]	; (1500 <QSPI_N25Q256_PORT_init+0xbc>)
    14b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    14b8:	4917      	ldr	r1, [pc, #92]	; (1518 <QSPI_N25Q256_PORT_init+0xd4>)
    14ba:	200a      	movs	r0, #10
    14bc:	4b12      	ldr	r3, [pc, #72]	; (1508 <QSPI_N25Q256_PORT_init+0xc4>)
    14be:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    14c0:	2102      	movs	r1, #2
    14c2:	200b      	movs	r0, #11
    14c4:	4b0d      	ldr	r3, [pc, #52]	; (14fc <QSPI_N25Q256_PORT_init+0xb8>)
    14c6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    14c8:	2100      	movs	r1, #0
    14ca:	200b      	movs	r0, #11
    14cc:	4b0f      	ldr	r3, [pc, #60]	; (150c <QSPI_N25Q256_PORT_init+0xc8>)
    14ce:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    14d0:	2100      	movs	r1, #0
    14d2:	200b      	movs	r0, #11
    14d4:	4b0a      	ldr	r3, [pc, #40]	; (1500 <QSPI_N25Q256_PORT_init+0xbc>)
    14d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    14d8:	4910      	ldr	r1, [pc, #64]	; (151c <QSPI_N25Q256_PORT_init+0xd8>)
    14da:	200b      	movs	r0, #11
    14dc:	4b0a      	ldr	r3, [pc, #40]	; (1508 <QSPI_N25Q256_PORT_init+0xc4>)
    14de:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    14e0:	2101      	movs	r1, #1
    14e2:	202a      	movs	r0, #42	; 0x2a
    14e4:	4b05      	ldr	r3, [pc, #20]	; (14fc <QSPI_N25Q256_PORT_init+0xb8>)
    14e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    14e8:	2100      	movs	r1, #0
    14ea:	202a      	movs	r0, #42	; 0x2a
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <QSPI_N25Q256_PORT_init+0xbc>)
    14ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    14f0:	490b      	ldr	r1, [pc, #44]	; (1520 <QSPI_N25Q256_PORT_init+0xdc>)
    14f2:	202a      	movs	r0, #42	; 0x2a
    14f4:	4b04      	ldr	r3, [pc, #16]	; (1508 <QSPI_N25Q256_PORT_init+0xc4>)
    14f6:	4798      	blx	r3
}
    14f8:	bf00      	nop
    14fa:	bd80      	pop	{r7, pc}
    14fc:	000011e5 	.word	0x000011e5
    1500:	00001191 	.word	0x00001191
    1504:	002b0007 	.word	0x002b0007
    1508:	000011c5 	.word	0x000011c5
    150c:	0000121d 	.word	0x0000121d
    1510:	00080007 	.word	0x00080007
    1514:	00090007 	.word	0x00090007
    1518:	000a0007 	.word	0x000a0007
    151c:	000b0007 	.word	0x000b0007
    1520:	002a0007 	.word	0x002a0007

00001524 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1524:	b580      	push	{r7, lr}
    1526:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1528:	4805      	ldr	r0, [pc, #20]	; (1540 <QSPI_N25Q256_CLOCK_init+0x1c>)
    152a:	4b06      	ldr	r3, [pc, #24]	; (1544 <QSPI_N25Q256_CLOCK_init+0x20>)
    152c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    152e:	4804      	ldr	r0, [pc, #16]	; (1540 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1530:	4b05      	ldr	r3, [pc, #20]	; (1548 <QSPI_N25Q256_CLOCK_init+0x24>)
    1532:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1534:	4802      	ldr	r0, [pc, #8]	; (1540 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1536:	4b05      	ldr	r3, [pc, #20]	; (154c <QSPI_N25Q256_CLOCK_init+0x28>)
    1538:	4798      	blx	r3
}
    153a:	bf00      	nop
    153c:	bd80      	pop	{r7, pc}
    153e:	bf00      	nop
    1540:	40000800 	.word	0x40000800
    1544:	000009b7 	.word	0x000009b7
    1548:	000009f7 	.word	0x000009f7
    154c:	00000bd7 	.word	0x00000bd7

00001550 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1550:	b580      	push	{r7, lr}
    1552:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1554:	4b04      	ldr	r3, [pc, #16]	; (1568 <QSPI_N25Q256_init+0x18>)
    1556:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1558:	4904      	ldr	r1, [pc, #16]	; (156c <QSPI_N25Q256_init+0x1c>)
    155a:	4805      	ldr	r0, [pc, #20]	; (1570 <QSPI_N25Q256_init+0x20>)
    155c:	4b05      	ldr	r3, [pc, #20]	; (1574 <QSPI_N25Q256_init+0x24>)
    155e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1560:	4b05      	ldr	r3, [pc, #20]	; (1578 <QSPI_N25Q256_init+0x28>)
    1562:	4798      	blx	r3
}
    1564:	bf00      	nop
    1566:	bd80      	pop	{r7, pc}
    1568:	00001525 	.word	0x00001525
    156c:	42003400 	.word	0x42003400
    1570:	2000a970 	.word	0x2000a970
    1574:	0000273d 	.word	0x0000273d
    1578:	00001445 	.word	0x00001445

0000157c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    157c:	b580      	push	{r7, lr}
    157e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1580:	4802      	ldr	r0, [pc, #8]	; (158c <DATETIME_CLOCK_CLOCK_init+0x10>)
    1582:	4b03      	ldr	r3, [pc, #12]	; (1590 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1584:	4798      	blx	r3
}
    1586:	bf00      	nop
    1588:	bd80      	pop	{r7, pc}
    158a:	bf00      	nop
    158c:	40000800 	.word	0x40000800
    1590:	00000a37 	.word	0x00000a37

00001594 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1594:	b580      	push	{r7, lr}
    1596:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1598:	4b03      	ldr	r3, [pc, #12]	; (15a8 <DATETIME_CLOCK_init+0x14>)
    159a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    159c:	4903      	ldr	r1, [pc, #12]	; (15ac <DATETIME_CLOCK_init+0x18>)
    159e:	4804      	ldr	r0, [pc, #16]	; (15b0 <DATETIME_CLOCK_init+0x1c>)
    15a0:	4b04      	ldr	r3, [pc, #16]	; (15b4 <DATETIME_CLOCK_init+0x20>)
    15a2:	4798      	blx	r3
}
    15a4:	bf00      	nop
    15a6:	bd80      	pop	{r7, pc}
    15a8:	0000157d 	.word	0x0000157d
    15ac:	40002400 	.word	0x40002400
    15b0:	2000aab8 	.word	0x2000aab8
    15b4:	0000215d 	.word	0x0000215d

000015b8 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    15b8:	b580      	push	{r7, lr}
    15ba:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    15bc:	2101      	movs	r1, #1
    15be:	2010      	movs	r0, #16
    15c0:	4b07      	ldr	r3, [pc, #28]	; (15e0 <I2C_HEATERS_PORT_init+0x28>)
    15c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    15c4:	4907      	ldr	r1, [pc, #28]	; (15e4 <I2C_HEATERS_PORT_init+0x2c>)
    15c6:	2010      	movs	r0, #16
    15c8:	4b07      	ldr	r3, [pc, #28]	; (15e8 <I2C_HEATERS_PORT_init+0x30>)
    15ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    15cc:	2101      	movs	r1, #1
    15ce:	2011      	movs	r0, #17
    15d0:	4b03      	ldr	r3, [pc, #12]	; (15e0 <I2C_HEATERS_PORT_init+0x28>)
    15d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    15d4:	4905      	ldr	r1, [pc, #20]	; (15ec <I2C_HEATERS_PORT_init+0x34>)
    15d6:	2011      	movs	r0, #17
    15d8:	4b03      	ldr	r3, [pc, #12]	; (15e8 <I2C_HEATERS_PORT_init+0x30>)
    15da:	4798      	blx	r3
}
    15dc:	bf00      	nop
    15de:	bd80      	pop	{r7, pc}
    15e0:	00001191 	.word	0x00001191
    15e4:	00100002 	.word	0x00100002
    15e8:	000011c5 	.word	0x000011c5
    15ec:	00110002 	.word	0x00110002

000015f0 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    15f0:	b580      	push	{r7, lr}
    15f2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15f4:	2242      	movs	r2, #66	; 0x42
    15f6:	2108      	movs	r1, #8
    15f8:	4806      	ldr	r0, [pc, #24]	; (1614 <I2C_HEATERS_CLOCK_init+0x24>)
    15fa:	4b07      	ldr	r3, [pc, #28]	; (1618 <I2C_HEATERS_CLOCK_init+0x28>)
    15fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15fe:	224a      	movs	r2, #74	; 0x4a
    1600:	2103      	movs	r1, #3
    1602:	4804      	ldr	r0, [pc, #16]	; (1614 <I2C_HEATERS_CLOCK_init+0x24>)
    1604:	4b04      	ldr	r3, [pc, #16]	; (1618 <I2C_HEATERS_CLOCK_init+0x28>)
    1606:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1608:	4804      	ldr	r0, [pc, #16]	; (161c <I2C_HEATERS_CLOCK_init+0x2c>)
    160a:	4b05      	ldr	r3, [pc, #20]	; (1620 <I2C_HEATERS_CLOCK_init+0x30>)
    160c:	4798      	blx	r3
}
    160e:	bf00      	nop
    1610:	bd80      	pop	{r7, pc}
    1612:	bf00      	nop
    1614:	40001c00 	.word	0x40001c00
    1618:	00000971 	.word	0x00000971
    161c:	40000800 	.word	0x40000800
    1620:	00000a77 	.word	0x00000a77

00001624 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1624:	b580      	push	{r7, lr}
    1626:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1628:	4b04      	ldr	r3, [pc, #16]	; (163c <I2C_HEATERS_init+0x18>)
    162a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    162c:	4904      	ldr	r1, [pc, #16]	; (1640 <I2C_HEATERS_init+0x1c>)
    162e:	4805      	ldr	r0, [pc, #20]	; (1644 <I2C_HEATERS_init+0x20>)
    1630:	4b05      	ldr	r3, [pc, #20]	; (1648 <I2C_HEATERS_init+0x24>)
    1632:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1634:	4b05      	ldr	r3, [pc, #20]	; (164c <I2C_HEATERS_init+0x28>)
    1636:	4798      	blx	r3
}
    1638:	bf00      	nop
    163a:	bd80      	pop	{r7, pc}
    163c:	000015f1 	.word	0x000015f1
    1640:	40003400 	.word	0x40003400
    1644:	2000aa10 	.word	0x2000aa10
    1648:	00002631 	.word	0x00002631
    164c:	000015b9 	.word	0x000015b9

00001650 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1650:	b580      	push	{r7, lr}
    1652:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1654:	2100      	movs	r1, #0
    1656:	203b      	movs	r0, #59	; 0x3b
    1658:	4b11      	ldr	r3, [pc, #68]	; (16a0 <SPI_TEMP_PORT_init+0x50>)
    165a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    165c:	2102      	movs	r1, #2
    165e:	203b      	movs	r0, #59	; 0x3b
    1660:	4b10      	ldr	r3, [pc, #64]	; (16a4 <SPI_TEMP_PORT_init+0x54>)
    1662:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1664:	4910      	ldr	r1, [pc, #64]	; (16a8 <SPI_TEMP_PORT_init+0x58>)
    1666:	203b      	movs	r0, #59	; 0x3b
    1668:	4b10      	ldr	r3, [pc, #64]	; (16ac <SPI_TEMP_PORT_init+0x5c>)
    166a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    166c:	2100      	movs	r1, #0
    166e:	203a      	movs	r0, #58	; 0x3a
    1670:	4b0b      	ldr	r3, [pc, #44]	; (16a0 <SPI_TEMP_PORT_init+0x50>)
    1672:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1674:	2102      	movs	r1, #2
    1676:	203a      	movs	r0, #58	; 0x3a
    1678:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <SPI_TEMP_PORT_init+0x54>)
    167a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    167c:	490c      	ldr	r1, [pc, #48]	; (16b0 <SPI_TEMP_PORT_init+0x60>)
    167e:	203a      	movs	r0, #58	; 0x3a
    1680:	4b0a      	ldr	r3, [pc, #40]	; (16ac <SPI_TEMP_PORT_init+0x5c>)
    1682:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1684:	2101      	movs	r1, #1
    1686:	203c      	movs	r0, #60	; 0x3c
    1688:	4b06      	ldr	r3, [pc, #24]	; (16a4 <SPI_TEMP_PORT_init+0x54>)
    168a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    168c:	2100      	movs	r1, #0
    168e:	203c      	movs	r0, #60	; 0x3c
    1690:	4b08      	ldr	r3, [pc, #32]	; (16b4 <SPI_TEMP_PORT_init+0x64>)
    1692:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1694:	4908      	ldr	r1, [pc, #32]	; (16b8 <SPI_TEMP_PORT_init+0x68>)
    1696:	203c      	movs	r0, #60	; 0x3c
    1698:	4b04      	ldr	r3, [pc, #16]	; (16ac <SPI_TEMP_PORT_init+0x5c>)
    169a:	4798      	blx	r3
}
    169c:	bf00      	nop
    169e:	bd80      	pop	{r7, pc}
    16a0:	0000121d 	.word	0x0000121d
    16a4:	000011e5 	.word	0x000011e5
    16a8:	003b0003 	.word	0x003b0003
    16ac:	000011c5 	.word	0x000011c5
    16b0:	003a0003 	.word	0x003a0003
    16b4:	00001191 	.word	0x00001191
    16b8:	003c0003 	.word	0x003c0003

000016bc <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    16bc:	b580      	push	{r7, lr}
    16be:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16c0:	2245      	movs	r2, #69	; 0x45
    16c2:	2122      	movs	r1, #34	; 0x22
    16c4:	4806      	ldr	r0, [pc, #24]	; (16e0 <SPI_TEMP_CLOCK_init+0x24>)
    16c6:	4b07      	ldr	r3, [pc, #28]	; (16e4 <SPI_TEMP_CLOCK_init+0x28>)
    16c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16ca:	224a      	movs	r2, #74	; 0x4a
    16cc:	2103      	movs	r1, #3
    16ce:	4804      	ldr	r0, [pc, #16]	; (16e0 <SPI_TEMP_CLOCK_init+0x24>)
    16d0:	4b04      	ldr	r3, [pc, #16]	; (16e4 <SPI_TEMP_CLOCK_init+0x28>)
    16d2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    16d4:	4804      	ldr	r0, [pc, #16]	; (16e8 <SPI_TEMP_CLOCK_init+0x2c>)
    16d6:	4b05      	ldr	r3, [pc, #20]	; (16ec <SPI_TEMP_CLOCK_init+0x30>)
    16d8:	4798      	blx	r3
}
    16da:	bf00      	nop
    16dc:	bd80      	pop	{r7, pc}
    16de:	bf00      	nop
    16e0:	40001c00 	.word	0x40001c00
    16e4:	00000971 	.word	0x00000971
    16e8:	40000800 	.word	0x40000800
    16ec:	00000bf7 	.word	0x00000bf7

000016f0 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    16f4:	4b05      	ldr	r3, [pc, #20]	; (170c <SPI_TEMP_init+0x1c>)
    16f6:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    16f8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    16fc:	4804      	ldr	r0, [pc, #16]	; (1710 <SPI_TEMP_init+0x20>)
    16fe:	4b05      	ldr	r3, [pc, #20]	; (1714 <SPI_TEMP_init+0x24>)
    1700:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1702:	4b05      	ldr	r3, [pc, #20]	; (1718 <SPI_TEMP_init+0x28>)
    1704:	4798      	blx	r3
}
    1706:	bf00      	nop
    1708:	bd80      	pop	{r7, pc}
    170a:	bf00      	nop
    170c:	000016bd 	.word	0x000016bd
    1710:	2000a918 	.word	0x2000a918
    1714:	0000284d 	.word	0x0000284d
    1718:	00001651 	.word	0x00001651

0000171c <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    171c:	b580      	push	{r7, lr}
    171e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1720:	2100      	movs	r1, #0
    1722:	2017      	movs	r0, #23
    1724:	4b07      	ldr	r3, [pc, #28]	; (1744 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1726:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1728:	4907      	ldr	r1, [pc, #28]	; (1748 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    172a:	2017      	movs	r0, #23
    172c:	4b07      	ldr	r3, [pc, #28]	; (174c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    172e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1730:	2100      	movs	r1, #0
    1732:	2016      	movs	r0, #22
    1734:	4b03      	ldr	r3, [pc, #12]	; (1744 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1736:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1738:	4905      	ldr	r1, [pc, #20]	; (1750 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    173a:	2016      	movs	r0, #22
    173c:	4b03      	ldr	r3, [pc, #12]	; (174c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    173e:	4798      	blx	r3
}
    1740:	bf00      	nop
    1742:	bd80      	pop	{r7, pc}
    1744:	00001191 	.word	0x00001191
    1748:	00170003 	.word	0x00170003
    174c:	000011c5 	.word	0x000011c5
    1750:	00160003 	.word	0x00160003

00001754 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1754:	b580      	push	{r7, lr}
    1756:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1758:	2244      	movs	r2, #68	; 0x44
    175a:	2123      	movs	r1, #35	; 0x23
    175c:	4806      	ldr	r0, [pc, #24]	; (1778 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    175e:	4b07      	ldr	r3, [pc, #28]	; (177c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1760:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1762:	224a      	movs	r2, #74	; 0x4a
    1764:	2103      	movs	r1, #3
    1766:	4804      	ldr	r0, [pc, #16]	; (1778 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1768:	4b04      	ldr	r3, [pc, #16]	; (177c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    176a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    176c:	4804      	ldr	r0, [pc, #16]	; (1780 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    176e:	4b05      	ldr	r3, [pc, #20]	; (1784 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1770:	4798      	blx	r3
}
    1772:	bf00      	nop
    1774:	bd80      	pop	{r7, pc}
    1776:	bf00      	nop
    1778:	40001c00 	.word	0x40001c00
    177c:	00000971 	.word	0x00000971
    1780:	40000800 	.word	0x40000800
    1784:	00000c17 	.word	0x00000c17

00001788 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1788:	b580      	push	{r7, lr}
    178a:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    178c:	4b04      	ldr	r3, [pc, #16]	; (17a0 <I2C_FLAPPER_VALVE_init+0x18>)
    178e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1790:	4904      	ldr	r1, [pc, #16]	; (17a4 <I2C_FLAPPER_VALVE_init+0x1c>)
    1792:	4805      	ldr	r0, [pc, #20]	; (17a8 <I2C_FLAPPER_VALVE_init+0x20>)
    1794:	4b05      	ldr	r3, [pc, #20]	; (17ac <I2C_FLAPPER_VALVE_init+0x24>)
    1796:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1798:	4b05      	ldr	r3, [pc, #20]	; (17b0 <I2C_FLAPPER_VALVE_init+0x28>)
    179a:	4798      	blx	r3
}
    179c:	bf00      	nop
    179e:	bd80      	pop	{r7, pc}
    17a0:	00001755 	.word	0x00001755
    17a4:	43000400 	.word	0x43000400
    17a8:	2000a9b4 	.word	0x2000a9b4
    17ac:	00002631 	.word	0x00002631
    17b0:	0000171d 	.word	0x0000171d

000017b4 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    17b8:	2100      	movs	r1, #0
    17ba:	2044      	movs	r0, #68	; 0x44
    17bc:	4b11      	ldr	r3, [pc, #68]	; (1804 <SPI_HI3593_PORT_init+0x50>)
    17be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    17c0:	2102      	movs	r1, #2
    17c2:	2044      	movs	r0, #68	; 0x44
    17c4:	4b10      	ldr	r3, [pc, #64]	; (1808 <SPI_HI3593_PORT_init+0x54>)
    17c6:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    17c8:	4910      	ldr	r1, [pc, #64]	; (180c <SPI_HI3593_PORT_init+0x58>)
    17ca:	2044      	movs	r0, #68	; 0x44
    17cc:	4b10      	ldr	r3, [pc, #64]	; (1810 <SPI_HI3593_PORT_init+0x5c>)
    17ce:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    17d0:	2100      	movs	r1, #0
    17d2:	2045      	movs	r0, #69	; 0x45
    17d4:	4b0b      	ldr	r3, [pc, #44]	; (1804 <SPI_HI3593_PORT_init+0x50>)
    17d6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    17d8:	2102      	movs	r1, #2
    17da:	2045      	movs	r0, #69	; 0x45
    17dc:	4b0a      	ldr	r3, [pc, #40]	; (1808 <SPI_HI3593_PORT_init+0x54>)
    17de:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    17e0:	490c      	ldr	r1, [pc, #48]	; (1814 <SPI_HI3593_PORT_init+0x60>)
    17e2:	2045      	movs	r0, #69	; 0x45
    17e4:	4b0a      	ldr	r3, [pc, #40]	; (1810 <SPI_HI3593_PORT_init+0x5c>)
    17e6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    17e8:	2101      	movs	r1, #1
    17ea:	2047      	movs	r0, #71	; 0x47
    17ec:	4b06      	ldr	r3, [pc, #24]	; (1808 <SPI_HI3593_PORT_init+0x54>)
    17ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    17f0:	2100      	movs	r1, #0
    17f2:	2047      	movs	r0, #71	; 0x47
    17f4:	4b08      	ldr	r3, [pc, #32]	; (1818 <SPI_HI3593_PORT_init+0x64>)
    17f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    17f8:	4908      	ldr	r1, [pc, #32]	; (181c <SPI_HI3593_PORT_init+0x68>)
    17fa:	2047      	movs	r0, #71	; 0x47
    17fc:	4b04      	ldr	r3, [pc, #16]	; (1810 <SPI_HI3593_PORT_init+0x5c>)
    17fe:	4798      	blx	r3
}
    1800:	bf00      	nop
    1802:	bd80      	pop	{r7, pc}
    1804:	0000121d 	.word	0x0000121d
    1808:	000011e5 	.word	0x000011e5
    180c:	00440002 	.word	0x00440002
    1810:	000011c5 	.word	0x000011c5
    1814:	00450002 	.word	0x00450002
    1818:	00001191 	.word	0x00001191
    181c:	00470002 	.word	0x00470002

00001820 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1820:	b580      	push	{r7, lr}
    1822:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1824:	2242      	movs	r2, #66	; 0x42
    1826:	2124      	movs	r1, #36	; 0x24
    1828:	4806      	ldr	r0, [pc, #24]	; (1844 <SPI_HI3593_CLOCK_init+0x24>)
    182a:	4b07      	ldr	r3, [pc, #28]	; (1848 <SPI_HI3593_CLOCK_init+0x28>)
    182c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    182e:	224a      	movs	r2, #74	; 0x4a
    1830:	2103      	movs	r1, #3
    1832:	4804      	ldr	r0, [pc, #16]	; (1844 <SPI_HI3593_CLOCK_init+0x24>)
    1834:	4b04      	ldr	r3, [pc, #16]	; (1848 <SPI_HI3593_CLOCK_init+0x28>)
    1836:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1838:	4804      	ldr	r0, [pc, #16]	; (184c <SPI_HI3593_CLOCK_init+0x2c>)
    183a:	4b05      	ldr	r3, [pc, #20]	; (1850 <SPI_HI3593_CLOCK_init+0x30>)
    183c:	4798      	blx	r3
}
    183e:	bf00      	nop
    1840:	bd80      	pop	{r7, pc}
    1842:	bf00      	nop
    1844:	40001c00 	.word	0x40001c00
    1848:	00000971 	.word	0x00000971
    184c:	40000800 	.word	0x40000800
    1850:	00000c37 	.word	0x00000c37

00001854 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1858:	4b04      	ldr	r3, [pc, #16]	; (186c <SPI_HI3593_init+0x18>)
    185a:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    185c:	4904      	ldr	r1, [pc, #16]	; (1870 <SPI_HI3593_init+0x1c>)
    185e:	4805      	ldr	r0, [pc, #20]	; (1874 <SPI_HI3593_init+0x20>)
    1860:	4b05      	ldr	r3, [pc, #20]	; (1878 <SPI_HI3593_init+0x24>)
    1862:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1864:	4b05      	ldr	r3, [pc, #20]	; (187c <SPI_HI3593_init+0x28>)
    1866:	4798      	blx	r3
}
    1868:	bf00      	nop
    186a:	bd80      	pop	{r7, pc}
    186c:	00001821 	.word	0x00001821
    1870:	43000800 	.word	0x43000800
    1874:	2000a900 	.word	0x2000a900
    1878:	0000284d 	.word	0x0000284d
    187c:	000017b5 	.word	0x000017b5

00001880 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1880:	b580      	push	{r7, lr}
    1882:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1884:	2100      	movs	r1, #0
    1886:	2068      	movs	r0, #104	; 0x68
    1888:	4b07      	ldr	r3, [pc, #28]	; (18a8 <I2C_FANS_PORT_init+0x28>)
    188a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    188c:	4907      	ldr	r1, [pc, #28]	; (18ac <I2C_FANS_PORT_init+0x2c>)
    188e:	2068      	movs	r0, #104	; 0x68
    1890:	4b07      	ldr	r3, [pc, #28]	; (18b0 <I2C_FANS_PORT_init+0x30>)
    1892:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1894:	2100      	movs	r1, #0
    1896:	2069      	movs	r0, #105	; 0x69
    1898:	4b03      	ldr	r3, [pc, #12]	; (18a8 <I2C_FANS_PORT_init+0x28>)
    189a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    189c:	4905      	ldr	r1, [pc, #20]	; (18b4 <I2C_FANS_PORT_init+0x34>)
    189e:	2069      	movs	r0, #105	; 0x69
    18a0:	4b03      	ldr	r3, [pc, #12]	; (18b0 <I2C_FANS_PORT_init+0x30>)
    18a2:	4798      	blx	r3
}
    18a4:	bf00      	nop
    18a6:	bd80      	pop	{r7, pc}
    18a8:	00001191 	.word	0x00001191
    18ac:	00680002 	.word	0x00680002
    18b0:	000011c5 	.word	0x000011c5
    18b4:	00690002 	.word	0x00690002

000018b8 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18bc:	2244      	movs	r2, #68	; 0x44
    18be:	2125      	movs	r1, #37	; 0x25
    18c0:	4806      	ldr	r0, [pc, #24]	; (18dc <I2C_FANS_CLOCK_init+0x24>)
    18c2:	4b07      	ldr	r3, [pc, #28]	; (18e0 <I2C_FANS_CLOCK_init+0x28>)
    18c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18c6:	224a      	movs	r2, #74	; 0x4a
    18c8:	2103      	movs	r1, #3
    18ca:	4804      	ldr	r0, [pc, #16]	; (18dc <I2C_FANS_CLOCK_init+0x24>)
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <I2C_FANS_CLOCK_init+0x28>)
    18ce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    18d0:	4804      	ldr	r0, [pc, #16]	; (18e4 <I2C_FANS_CLOCK_init+0x2c>)
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <I2C_FANS_CLOCK_init+0x30>)
    18d4:	4798      	blx	r3
}
    18d6:	bf00      	nop
    18d8:	bd80      	pop	{r7, pc}
    18da:	bf00      	nop
    18dc:	40001c00 	.word	0x40001c00
    18e0:	00000971 	.word	0x00000971
    18e4:	40000800 	.word	0x40000800
    18e8:	00000c57 	.word	0x00000c57

000018ec <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    18f0:	4b04      	ldr	r3, [pc, #16]	; (1904 <I2C_FANS_init+0x18>)
    18f2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    18f4:	4904      	ldr	r1, [pc, #16]	; (1908 <I2C_FANS_init+0x1c>)
    18f6:	4805      	ldr	r0, [pc, #20]	; (190c <I2C_FANS_init+0x20>)
    18f8:	4b05      	ldr	r3, [pc, #20]	; (1910 <I2C_FANS_init+0x24>)
    18fa:	4798      	blx	r3
	I2C_FANS_PORT_init();
    18fc:	4b05      	ldr	r3, [pc, #20]	; (1914 <I2C_FANS_init+0x28>)
    18fe:	4798      	blx	r3
}
    1900:	bf00      	nop
    1902:	bd80      	pop	{r7, pc}
    1904:	000018b9 	.word	0x000018b9
    1908:	43000c00 	.word	0x43000c00
    190c:	2000a930 	.word	0x2000a930
    1910:	00002631 	.word	0x00002631
    1914:	00001881 	.word	0x00001881

00001918 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1918:	b580      	push	{r7, lr}
    191a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    191c:	4808      	ldr	r0, [pc, #32]	; (1940 <TIMER_USB_init+0x28>)
    191e:	4b09      	ldr	r3, [pc, #36]	; (1944 <TIMER_USB_init+0x2c>)
    1920:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1922:	2243      	movs	r2, #67	; 0x43
    1924:	2109      	movs	r1, #9
    1926:	4808      	ldr	r0, [pc, #32]	; (1948 <TIMER_USB_init+0x30>)
    1928:	4b08      	ldr	r3, [pc, #32]	; (194c <TIMER_USB_init+0x34>)
    192a:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    192c:	4b08      	ldr	r3, [pc, #32]	; (1950 <TIMER_USB_init+0x38>)
    192e:	4798      	blx	r3
    1930:	4603      	mov	r3, r0
    1932:	461a      	mov	r2, r3
    1934:	4907      	ldr	r1, [pc, #28]	; (1954 <TIMER_USB_init+0x3c>)
    1936:	4808      	ldr	r0, [pc, #32]	; (1958 <TIMER_USB_init+0x40>)
    1938:	4b08      	ldr	r3, [pc, #32]	; (195c <TIMER_USB_init+0x44>)
    193a:	4798      	blx	r3
}
    193c:	bf00      	nop
    193e:	bd80      	pop	{r7, pc}
    1940:	40000800 	.word	0x40000800
    1944:	00000a97 	.word	0x00000a97
    1948:	40001c00 	.word	0x40001c00
    194c:	00000971 	.word	0x00000971
    1950:	00007f89 	.word	0x00007f89
    1954:	40003800 	.word	0x40003800
    1958:	2000aa78 	.word	0x2000aa78
    195c:	00002add 	.word	0x00002add

00001960 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1960:	b580      	push	{r7, lr}
    1962:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1964:	4808      	ldr	r0, [pc, #32]	; (1988 <TIMER_ARINC_init+0x28>)
    1966:	4b09      	ldr	r3, [pc, #36]	; (198c <TIMER_ARINC_init+0x2c>)
    1968:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    196a:	2244      	movs	r2, #68	; 0x44
    196c:	211a      	movs	r1, #26
    196e:	4808      	ldr	r0, [pc, #32]	; (1990 <TIMER_ARINC_init+0x30>)
    1970:	4b08      	ldr	r3, [pc, #32]	; (1994 <TIMER_ARINC_init+0x34>)
    1972:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1974:	4b08      	ldr	r3, [pc, #32]	; (1998 <TIMER_ARINC_init+0x38>)
    1976:	4798      	blx	r3
    1978:	4603      	mov	r3, r0
    197a:	461a      	mov	r2, r3
    197c:	4907      	ldr	r1, [pc, #28]	; (199c <TIMER_ARINC_init+0x3c>)
    197e:	4808      	ldr	r0, [pc, #32]	; (19a0 <TIMER_ARINC_init+0x40>)
    1980:	4b08      	ldr	r3, [pc, #32]	; (19a4 <TIMER_ARINC_init+0x44>)
    1982:	4798      	blx	r3
}
    1984:	bf00      	nop
    1986:	bd80      	pop	{r7, pc}
    1988:	40000800 	.word	0x40000800
    198c:	00000b57 	.word	0x00000b57
    1990:	40001c00 	.word	0x40001c00
    1994:	00000971 	.word	0x00000971
    1998:	00007f89 	.word	0x00007f89
    199c:	4101a000 	.word	0x4101a000
    19a0:	2000aa58 	.word	0x2000aa58
    19a4:	00002add 	.word	0x00002add

000019a8 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    19ac:	4808      	ldr	r0, [pc, #32]	; (19d0 <TIMER_MAINTENANCE_init+0x28>)
    19ae:	4b09      	ldr	r3, [pc, #36]	; (19d4 <TIMER_MAINTENANCE_init+0x2c>)
    19b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19b2:	2246      	movs	r2, #70	; 0x46
    19b4:	211e      	movs	r1, #30
    19b6:	4808      	ldr	r0, [pc, #32]	; (19d8 <TIMER_MAINTENANCE_init+0x30>)
    19b8:	4b08      	ldr	r3, [pc, #32]	; (19dc <TIMER_MAINTENANCE_init+0x34>)
    19ba:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    19bc:	4b08      	ldr	r3, [pc, #32]	; (19e0 <TIMER_MAINTENANCE_init+0x38>)
    19be:	4798      	blx	r3
    19c0:	4603      	mov	r3, r0
    19c2:	461a      	mov	r2, r3
    19c4:	4907      	ldr	r1, [pc, #28]	; (19e4 <TIMER_MAINTENANCE_init+0x3c>)
    19c6:	4808      	ldr	r0, [pc, #32]	; (19e8 <TIMER_MAINTENANCE_init+0x40>)
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <TIMER_MAINTENANCE_init+0x44>)
    19ca:	4798      	blx	r3
}
    19cc:	bf00      	nop
    19ce:	bd80      	pop	{r7, pc}
    19d0:	40000800 	.word	0x40000800
    19d4:	00000b97 	.word	0x00000b97
    19d8:	40001c00 	.word	0x40001c00
    19dc:	00000971 	.word	0x00000971
    19e0:	00007f89 	.word	0x00007f89
    19e4:	42001400 	.word	0x42001400
    19e8:	2000a950 	.word	0x2000a950
    19ec:	00002add 	.word	0x00002add

000019f0 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    19f0:	b580      	push	{r7, lr}
    19f2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    19f4:	4808      	ldr	r0, [pc, #32]	; (1a18 <TIMER_INTERFACE_init+0x28>)
    19f6:	4b09      	ldr	r3, [pc, #36]	; (1a1c <TIMER_INTERFACE_init+0x2c>)
    19f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19fa:	2246      	movs	r2, #70	; 0x46
    19fc:	211e      	movs	r1, #30
    19fe:	4808      	ldr	r0, [pc, #32]	; (1a20 <TIMER_INTERFACE_init+0x30>)
    1a00:	4b08      	ldr	r3, [pc, #32]	; (1a24 <TIMER_INTERFACE_init+0x34>)
    1a02:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1a04:	4b08      	ldr	r3, [pc, #32]	; (1a28 <TIMER_INTERFACE_init+0x38>)
    1a06:	4798      	blx	r3
    1a08:	4603      	mov	r3, r0
    1a0a:	461a      	mov	r2, r3
    1a0c:	4907      	ldr	r1, [pc, #28]	; (1a2c <TIMER_INTERFACE_init+0x3c>)
    1a0e:	4808      	ldr	r0, [pc, #32]	; (1a30 <TIMER_INTERFACE_init+0x40>)
    1a10:	4b08      	ldr	r3, [pc, #32]	; (1a34 <TIMER_INTERFACE_init+0x44>)
    1a12:	4798      	blx	r3
}
    1a14:	bf00      	nop
    1a16:	bd80      	pop	{r7, pc}
    1a18:	40000800 	.word	0x40000800
    1a1c:	00000bb7 	.word	0x00000bb7
    1a20:	40001c00 	.word	0x40001c00
    1a24:	00000971 	.word	0x00000971
    1a28:	00007f89 	.word	0x00007f89
    1a2c:	42001800 	.word	0x42001800
    1a30:	2000a994 	.word	0x2000a994
    1a34:	00002add 	.word	0x00002add

00001a38 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1a3c:	4808      	ldr	r0, [pc, #32]	; (1a60 <TIMER_EVENT_init+0x28>)
    1a3e:	4b09      	ldr	r3, [pc, #36]	; (1a64 <TIMER_EVENT_init+0x2c>)
    1a40:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a42:	2246      	movs	r2, #70	; 0x46
    1a44:	2127      	movs	r1, #39	; 0x27
    1a46:	4808      	ldr	r0, [pc, #32]	; (1a68 <TIMER_EVENT_init+0x30>)
    1a48:	4b08      	ldr	r3, [pc, #32]	; (1a6c <TIMER_EVENT_init+0x34>)
    1a4a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1a4c:	4b08      	ldr	r3, [pc, #32]	; (1a70 <TIMER_EVENT_init+0x38>)
    1a4e:	4798      	blx	r3
    1a50:	4603      	mov	r3, r0
    1a52:	461a      	mov	r2, r3
    1a54:	4907      	ldr	r1, [pc, #28]	; (1a74 <TIMER_EVENT_init+0x3c>)
    1a56:	4808      	ldr	r0, [pc, #32]	; (1a78 <TIMER_EVENT_init+0x40>)
    1a58:	4b08      	ldr	r3, [pc, #32]	; (1a7c <TIMER_EVENT_init+0x44>)
    1a5a:	4798      	blx	r3
}
    1a5c:	bf00      	nop
    1a5e:	bd80      	pop	{r7, pc}
    1a60:	40000800 	.word	0x40000800
    1a64:	00000c77 	.word	0x00000c77
    1a68:	40001c00 	.word	0x40001c00
    1a6c:	00000971 	.word	0x00000971
    1a70:	00007f89 	.word	0x00007f89
    1a74:	43001400 	.word	0x43001400
    1a78:	2000a974 	.word	0x2000a974
    1a7c:	00002add 	.word	0x00002add

00001a80 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1a80:	b480      	push	{r7}
    1a82:	af00      	add	r7, sp, #0
}
    1a84:	bf00      	nop
    1a86:	46bd      	mov	sp, r7
    1a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a8c:	4770      	bx	lr
	...

00001a90 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1a94:	4804      	ldr	r0, [pc, #16]	; (1aa8 <LIVE_PULSE_CLOCK_init+0x18>)
    1a96:	4b05      	ldr	r3, [pc, #20]	; (1aac <LIVE_PULSE_CLOCK_init+0x1c>)
    1a98:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a9a:	2240      	movs	r2, #64	; 0x40
    1a9c:	2127      	movs	r1, #39	; 0x27
    1a9e:	4804      	ldr	r0, [pc, #16]	; (1ab0 <LIVE_PULSE_CLOCK_init+0x20>)
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <LIVE_PULSE_CLOCK_init+0x24>)
    1aa2:	4798      	blx	r3
}
    1aa4:	bf00      	nop
    1aa6:	bd80      	pop	{r7, pc}
    1aa8:	40000800 	.word	0x40000800
    1aac:	00000c97 	.word	0x00000c97
    1ab0:	40001c00 	.word	0x40001c00
    1ab4:	00000971 	.word	0x00000971

00001ab8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1abc:	4b06      	ldr	r3, [pc, #24]	; (1ad8 <LIVE_PULSE_init+0x20>)
    1abe:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1ac0:	4b06      	ldr	r3, [pc, #24]	; (1adc <LIVE_PULSE_init+0x24>)
    1ac2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1ac4:	4b06      	ldr	r3, [pc, #24]	; (1ae0 <LIVE_PULSE_init+0x28>)
    1ac6:	4798      	blx	r3
    1ac8:	4603      	mov	r3, r0
    1aca:	461a      	mov	r2, r3
    1acc:	4905      	ldr	r1, [pc, #20]	; (1ae4 <LIVE_PULSE_init+0x2c>)
    1ace:	4806      	ldr	r0, [pc, #24]	; (1ae8 <LIVE_PULSE_init+0x30>)
    1ad0:	4b06      	ldr	r3, [pc, #24]	; (1aec <LIVE_PULSE_init+0x34>)
    1ad2:	4798      	blx	r3
}
    1ad4:	bf00      	nop
    1ad6:	bd80      	pop	{r7, pc}
    1ad8:	00001a91 	.word	0x00001a91
    1adc:	00001a81 	.word	0x00001a81
    1ae0:	00007f9d 	.word	0x00007f9d
    1ae4:	43001800 	.word	0x43001800
    1ae8:	2000a9d4 	.word	0x2000a9d4
    1aec:	00002691 	.word	0x00002691

00001af0 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1af4:	4804      	ldr	r0, [pc, #16]	; (1b08 <TIMER_HVAC_CLOCK_init+0x18>)
    1af6:	4b05      	ldr	r3, [pc, #20]	; (1b0c <TIMER_HVAC_CLOCK_init+0x1c>)
    1af8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1afa:	2244      	movs	r2, #68	; 0x44
    1afc:	2119      	movs	r1, #25
    1afe:	4804      	ldr	r0, [pc, #16]	; (1b10 <TIMER_HVAC_CLOCK_init+0x20>)
    1b00:	4b04      	ldr	r3, [pc, #16]	; (1b14 <TIMER_HVAC_CLOCK_init+0x24>)
    1b02:	4798      	blx	r3
}
    1b04:	bf00      	nop
    1b06:	bd80      	pop	{r7, pc}
    1b08:	40000800 	.word	0x40000800
    1b0c:	00000b17 	.word	0x00000b17
    1b10:	40001c00 	.word	0x40001c00
    1b14:	00000971 	.word	0x00000971

00001b18 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1b1c:	4b05      	ldr	r3, [pc, #20]	; (1b34 <TIMER_HVAC_init+0x1c>)
    1b1e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1b20:	4b05      	ldr	r3, [pc, #20]	; (1b38 <TIMER_HVAC_init+0x20>)
    1b22:	4798      	blx	r3
    1b24:	4603      	mov	r3, r0
    1b26:	461a      	mov	r2, r3
    1b28:	4904      	ldr	r1, [pc, #16]	; (1b3c <TIMER_HVAC_init+0x24>)
    1b2a:	4805      	ldr	r0, [pc, #20]	; (1b40 <TIMER_HVAC_init+0x28>)
    1b2c:	4b05      	ldr	r3, [pc, #20]	; (1b44 <TIMER_HVAC_init+0x2c>)
    1b2e:	4798      	blx	r3
}
    1b30:	bf00      	nop
    1b32:	bd80      	pop	{r7, pc}
    1b34:	00001af1 	.word	0x00001af1
    1b38:	0000736d 	.word	0x0000736d
    1b3c:	41016000 	.word	0x41016000
    1b40:	2000aa98 	.word	0x2000aa98
    1b44:	00002add 	.word	0x00002add

00001b48 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1b48:	b580      	push	{r7, lr}
    1b4a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1b4c:	4804      	ldr	r0, [pc, #16]	; (1b60 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1b50:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b52:	2244      	movs	r2, #68	; 0x44
    1b54:	2119      	movs	r1, #25
    1b56:	4804      	ldr	r0, [pc, #16]	; (1b68 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1b58:	4b04      	ldr	r3, [pc, #16]	; (1b6c <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1b5a:	4798      	blx	r3
}
    1b5c:	bf00      	nop
    1b5e:	bd80      	pop	{r7, pc}
    1b60:	40000800 	.word	0x40000800
    1b64:	00000b37 	.word	0x00000b37
    1b68:	40001c00 	.word	0x40001c00
    1b6c:	00000971 	.word	0x00000971

00001b70 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1b70:	b580      	push	{r7, lr}
    1b72:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1b74:	4b05      	ldr	r3, [pc, #20]	; (1b8c <TIMER_TEMPERATURES_init+0x1c>)
    1b76:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1b78:	4b05      	ldr	r3, [pc, #20]	; (1b90 <TIMER_TEMPERATURES_init+0x20>)
    1b7a:	4798      	blx	r3
    1b7c:	4603      	mov	r3, r0
    1b7e:	461a      	mov	r2, r3
    1b80:	4904      	ldr	r1, [pc, #16]	; (1b94 <TIMER_TEMPERATURES_init+0x24>)
    1b82:	4805      	ldr	r0, [pc, #20]	; (1b98 <TIMER_TEMPERATURES_init+0x28>)
    1b84:	4b05      	ldr	r3, [pc, #20]	; (1b9c <TIMER_TEMPERATURES_init+0x2c>)
    1b86:	4798      	blx	r3
}
    1b88:	bf00      	nop
    1b8a:	bd80      	pop	{r7, pc}
    1b8c:	00001b49 	.word	0x00001b49
    1b90:	0000736d 	.word	0x0000736d
    1b94:	41018000 	.word	0x41018000
    1b98:	2000a8e0 	.word	0x2000a8e0
    1b9c:	00002add 	.word	0x00002add

00001ba0 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1ba4:	4804      	ldr	r0, [pc, #16]	; (1bb8 <TIMER_CCU_CLOCK_init+0x18>)
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <TIMER_CCU_CLOCK_init+0x1c>)
    1ba8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1baa:	2240      	movs	r2, #64	; 0x40
    1bac:	211d      	movs	r1, #29
    1bae:	4804      	ldr	r0, [pc, #16]	; (1bc0 <TIMER_CCU_CLOCK_init+0x20>)
    1bb0:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <TIMER_CCU_CLOCK_init+0x24>)
    1bb2:	4798      	blx	r3
}
    1bb4:	bf00      	nop
    1bb6:	bd80      	pop	{r7, pc}
    1bb8:	40000800 	.word	0x40000800
    1bbc:	00000b77 	.word	0x00000b77
    1bc0:	40001c00 	.word	0x40001c00
    1bc4:	00000971 	.word	0x00000971

00001bc8 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1bcc:	4b05      	ldr	r3, [pc, #20]	; (1be4 <TIMER_CCU_init+0x1c>)
    1bce:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1bd0:	4b05      	ldr	r3, [pc, #20]	; (1be8 <TIMER_CCU_init+0x20>)
    1bd2:	4798      	blx	r3
    1bd4:	4603      	mov	r3, r0
    1bd6:	461a      	mov	r2, r3
    1bd8:	4904      	ldr	r1, [pc, #16]	; (1bec <TIMER_CCU_init+0x24>)
    1bda:	4805      	ldr	r0, [pc, #20]	; (1bf0 <TIMER_CCU_init+0x28>)
    1bdc:	4b05      	ldr	r3, [pc, #20]	; (1bf4 <TIMER_CCU_init+0x2c>)
    1bde:	4798      	blx	r3
}
    1be0:	bf00      	nop
    1be2:	bd80      	pop	{r7, pc}
    1be4:	00001ba1 	.word	0x00001ba1
    1be8:	0000736d 	.word	0x0000736d
    1bec:	42000c00 	.word	0x42000c00
    1bf0:	2000a9f0 	.word	0x2000a9f0
    1bf4:	00002add 	.word	0x00002add

00001bf8 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1bf8:	b580      	push	{r7, lr}
    1bfa:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1bfc:	2102      	movs	r1, #2
    1bfe:	2018      	movs	r0, #24
    1c00:	4b0f      	ldr	r3, [pc, #60]	; (1c40 <CDCUSB_PORT_init+0x48>)
    1c02:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1c04:	2100      	movs	r1, #0
    1c06:	2018      	movs	r0, #24
    1c08:	4b0e      	ldr	r3, [pc, #56]	; (1c44 <CDCUSB_PORT_init+0x4c>)
    1c0a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1c0c:	2100      	movs	r1, #0
    1c0e:	2018      	movs	r0, #24
    1c10:	4b0d      	ldr	r3, [pc, #52]	; (1c48 <CDCUSB_PORT_init+0x50>)
    1c12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1c14:	490d      	ldr	r1, [pc, #52]	; (1c4c <CDCUSB_PORT_init+0x54>)
    1c16:	2018      	movs	r0, #24
    1c18:	4b0d      	ldr	r3, [pc, #52]	; (1c50 <CDCUSB_PORT_init+0x58>)
    1c1a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1c1c:	2102      	movs	r1, #2
    1c1e:	2019      	movs	r0, #25
    1c20:	4b07      	ldr	r3, [pc, #28]	; (1c40 <CDCUSB_PORT_init+0x48>)
    1c22:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1c24:	2100      	movs	r1, #0
    1c26:	2019      	movs	r0, #25
    1c28:	4b06      	ldr	r3, [pc, #24]	; (1c44 <CDCUSB_PORT_init+0x4c>)
    1c2a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1c2c:	2100      	movs	r1, #0
    1c2e:	2019      	movs	r0, #25
    1c30:	4b05      	ldr	r3, [pc, #20]	; (1c48 <CDCUSB_PORT_init+0x50>)
    1c32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1c34:	4907      	ldr	r1, [pc, #28]	; (1c54 <CDCUSB_PORT_init+0x5c>)
    1c36:	2019      	movs	r0, #25
    1c38:	4b05      	ldr	r3, [pc, #20]	; (1c50 <CDCUSB_PORT_init+0x58>)
    1c3a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1c3c:	bf00      	nop
    1c3e:	bd80      	pop	{r7, pc}
    1c40:	000011e5 	.word	0x000011e5
    1c44:	0000121d 	.word	0x0000121d
    1c48:	00001191 	.word	0x00001191
    1c4c:	00180007 	.word	0x00180007
    1c50:	000011c5 	.word	0x000011c5
    1c54:	00190007 	.word	0x00190007

00001c58 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1c58:	b580      	push	{r7, lr}
    1c5a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1c5c:	2242      	movs	r2, #66	; 0x42
    1c5e:	210a      	movs	r1, #10
    1c60:	4805      	ldr	r0, [pc, #20]	; (1c78 <CDCUSB_CLOCK_init+0x20>)
    1c62:	4b06      	ldr	r3, [pc, #24]	; (1c7c <CDCUSB_CLOCK_init+0x24>)
    1c64:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1c66:	4806      	ldr	r0, [pc, #24]	; (1c80 <CDCUSB_CLOCK_init+0x28>)
    1c68:	4b06      	ldr	r3, [pc, #24]	; (1c84 <CDCUSB_CLOCK_init+0x2c>)
    1c6a:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1c6c:	4804      	ldr	r0, [pc, #16]	; (1c80 <CDCUSB_CLOCK_init+0x28>)
    1c6e:	4b06      	ldr	r3, [pc, #24]	; (1c88 <CDCUSB_CLOCK_init+0x30>)
    1c70:	4798      	blx	r3
}
    1c72:	bf00      	nop
    1c74:	bd80      	pop	{r7, pc}
    1c76:	bf00      	nop
    1c78:	40001c00 	.word	0x40001c00
    1c7c:	00000971 	.word	0x00000971
    1c80:	40000800 	.word	0x40000800
    1c84:	00000997 	.word	0x00000997
    1c88:	00000ab7 	.word	0x00000ab7

00001c8c <CDCUSB_init>:

void CDCUSB_init(void)
{
    1c8c:	b580      	push	{r7, lr}
    1c8e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1c90:	4b03      	ldr	r3, [pc, #12]	; (1ca0 <CDCUSB_init+0x14>)
    1c92:	4798      	blx	r3
	usb_d_init();
    1c94:	4b03      	ldr	r3, [pc, #12]	; (1ca4 <CDCUSB_init+0x18>)
    1c96:	4798      	blx	r3
	CDCUSB_PORT_init();
    1c98:	4b03      	ldr	r3, [pc, #12]	; (1ca8 <CDCUSB_init+0x1c>)
    1c9a:	4798      	blx	r3
}
    1c9c:	bf00      	nop
    1c9e:	bd80      	pop	{r7, pc}
    1ca0:	00001c59 	.word	0x00001c59
    1ca4:	00003339 	.word	0x00003339
    1ca8:	00001bf9 	.word	0x00001bf9

00001cac <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1cac:	b580      	push	{r7, lr}
    1cae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1cb0:	4802      	ldr	r0, [pc, #8]	; (1cbc <WATCHDOG_CLOCK_init+0x10>)
    1cb2:	4b03      	ldr	r3, [pc, #12]	; (1cc0 <WATCHDOG_CLOCK_init+0x14>)
    1cb4:	4798      	blx	r3
}
    1cb6:	bf00      	nop
    1cb8:	bd80      	pop	{r7, pc}
    1cba:	bf00      	nop
    1cbc:	40000800 	.word	0x40000800
    1cc0:	00000a17 	.word	0x00000a17

00001cc4 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1cc8:	4b03      	ldr	r3, [pc, #12]	; (1cd8 <WATCHDOG_init+0x14>)
    1cca:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1ccc:	4903      	ldr	r1, [pc, #12]	; (1cdc <WATCHDOG_init+0x18>)
    1cce:	4804      	ldr	r0, [pc, #16]	; (1ce0 <WATCHDOG_init+0x1c>)
    1cd0:	4b04      	ldr	r3, [pc, #16]	; (1ce4 <WATCHDOG_init+0x20>)
    1cd2:	4798      	blx	r3
}
    1cd4:	bf00      	nop
    1cd6:	bd80      	pop	{r7, pc}
    1cd8:	00001cad 	.word	0x00001cad
    1cdc:	40002000 	.word	0x40002000
    1ce0:	2000aad8 	.word	0x2000aad8
    1ce4:	00001265 	.word	0x00001265

00001ce8 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1ce8:	b580      	push	{r7, lr}
    1cea:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1cec:	4904      	ldr	r1, [pc, #16]	; (1d00 <CAN_CCU_PORT_init+0x18>)
    1cee:	202d      	movs	r0, #45	; 0x2d
    1cf0:	4b04      	ldr	r3, [pc, #16]	; (1d04 <CAN_CCU_PORT_init+0x1c>)
    1cf2:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1cf4:	4904      	ldr	r1, [pc, #16]	; (1d08 <CAN_CCU_PORT_init+0x20>)
    1cf6:	202c      	movs	r0, #44	; 0x2c
    1cf8:	4b02      	ldr	r3, [pc, #8]	; (1d04 <CAN_CCU_PORT_init+0x1c>)
    1cfa:	4798      	blx	r3
}
    1cfc:	bf00      	nop
    1cfe:	bd80      	pop	{r7, pc}
    1d00:	002d0007 	.word	0x002d0007
    1d04:	000011c5 	.word	0x000011c5
    1d08:	002c0007 	.word	0x002c0007

00001d0c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1d10:	4807      	ldr	r0, [pc, #28]	; (1d30 <CAN_CCU_init+0x24>)
    1d12:	4b08      	ldr	r3, [pc, #32]	; (1d34 <CAN_CCU_init+0x28>)
    1d14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d16:	2249      	movs	r2, #73	; 0x49
    1d18:	211c      	movs	r1, #28
    1d1a:	4807      	ldr	r0, [pc, #28]	; (1d38 <CAN_CCU_init+0x2c>)
    1d1c:	4b07      	ldr	r3, [pc, #28]	; (1d3c <CAN_CCU_init+0x30>)
    1d1e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1d20:	4907      	ldr	r1, [pc, #28]	; (1d40 <CAN_CCU_init+0x34>)
    1d22:	4808      	ldr	r0, [pc, #32]	; (1d44 <CAN_CCU_init+0x38>)
    1d24:	4b08      	ldr	r3, [pc, #32]	; (1d48 <CAN_CCU_init+0x3c>)
    1d26:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1d28:	4b08      	ldr	r3, [pc, #32]	; (1d4c <CAN_CCU_init+0x40>)
    1d2a:	4798      	blx	r3
}
    1d2c:	bf00      	nop
    1d2e:	bd80      	pop	{r7, pc}
    1d30:	40000800 	.word	0x40000800
    1d34:	000009d7 	.word	0x000009d7
    1d38:	40001c00 	.word	0x40001c00
    1d3c:	00000971 	.word	0x00000971
    1d40:	42000400 	.word	0x42000400
    1d44:	2000aa30 	.word	0x2000aa30
    1d48:	0000221d 	.word	0x0000221d
    1d4c:	00001ce9 	.word	0x00001ce9

00001d50 <system_init>:

void system_init(void)
{
    1d50:	b580      	push	{r7, lr}
    1d52:	af00      	add	r7, sp, #0
	init_mcu();
    1d54:	4b5f      	ldr	r3, [pc, #380]	; (1ed4 <system_init+0x184>)
    1d56:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1d58:	2100      	movs	r1, #0
    1d5a:	2007      	movs	r0, #7
    1d5c:	4b5e      	ldr	r3, [pc, #376]	; (1ed8 <system_init+0x188>)
    1d5e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1d60:	2102      	movs	r1, #2
    1d62:	2007      	movs	r0, #7
    1d64:	4b5d      	ldr	r3, [pc, #372]	; (1edc <system_init+0x18c>)
    1d66:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1d68:	f04f 31ff 	mov.w	r1, #4294967295
    1d6c:	2007      	movs	r0, #7
    1d6e:	4b5c      	ldr	r3, [pc, #368]	; (1ee0 <system_init+0x190>)
    1d70:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1d72:	2101      	movs	r1, #1
    1d74:	200f      	movs	r0, #15
    1d76:	4b58      	ldr	r3, [pc, #352]	; (1ed8 <system_init+0x188>)
    1d78:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1d7a:	2102      	movs	r1, #2
    1d7c:	200f      	movs	r0, #15
    1d7e:	4b57      	ldr	r3, [pc, #348]	; (1edc <system_init+0x18c>)
    1d80:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1d82:	f04f 31ff 	mov.w	r1, #4294967295
    1d86:	200f      	movs	r0, #15
    1d88:	4b55      	ldr	r3, [pc, #340]	; (1ee0 <system_init+0x190>)
    1d8a:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1d8c:	2101      	movs	r1, #1
    1d8e:	2013      	movs	r0, #19
    1d90:	4b51      	ldr	r3, [pc, #324]	; (1ed8 <system_init+0x188>)
    1d92:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1d94:	2102      	movs	r1, #2
    1d96:	2013      	movs	r0, #19
    1d98:	4b50      	ldr	r3, [pc, #320]	; (1edc <system_init+0x18c>)
    1d9a:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1d9c:	f04f 31ff 	mov.w	r1, #4294967295
    1da0:	2013      	movs	r0, #19
    1da2:	4b4f      	ldr	r3, [pc, #316]	; (1ee0 <system_init+0x190>)
    1da4:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1da6:	2101      	movs	r1, #1
    1da8:	201b      	movs	r0, #27
    1daa:	4b4b      	ldr	r3, [pc, #300]	; (1ed8 <system_init+0x188>)
    1dac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1dae:	2102      	movs	r1, #2
    1db0:	201b      	movs	r0, #27
    1db2:	4b4a      	ldr	r3, [pc, #296]	; (1edc <system_init+0x18c>)
    1db4:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1db6:	f04f 31ff 	mov.w	r1, #4294967295
    1dba:	201b      	movs	r0, #27
    1dbc:	4b48      	ldr	r3, [pc, #288]	; (1ee0 <system_init+0x190>)
    1dbe:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1dc0:	2101      	movs	r1, #1
    1dc2:	2027      	movs	r0, #39	; 0x27
    1dc4:	4b44      	ldr	r3, [pc, #272]	; (1ed8 <system_init+0x188>)
    1dc6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1dc8:	2102      	movs	r1, #2
    1dca:	2027      	movs	r0, #39	; 0x27
    1dcc:	4b43      	ldr	r3, [pc, #268]	; (1edc <system_init+0x18c>)
    1dce:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1dd0:	f04f 31ff 	mov.w	r1, #4294967295
    1dd4:	2027      	movs	r0, #39	; 0x27
    1dd6:	4b42      	ldr	r3, [pc, #264]	; (1ee0 <system_init+0x190>)
    1dd8:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1dda:	2101      	movs	r1, #1
    1ddc:	203d      	movs	r0, #61	; 0x3d
    1dde:	4b3e      	ldr	r3, [pc, #248]	; (1ed8 <system_init+0x188>)
    1de0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1de2:	2102      	movs	r1, #2
    1de4:	203d      	movs	r0, #61	; 0x3d
    1de6:	4b3d      	ldr	r3, [pc, #244]	; (1edc <system_init+0x18c>)
    1de8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1dea:	f04f 31ff 	mov.w	r1, #4294967295
    1dee:	203d      	movs	r0, #61	; 0x3d
    1df0:	4b3b      	ldr	r3, [pc, #236]	; (1ee0 <system_init+0x190>)
    1df2:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1df4:	2101      	movs	r1, #1
    1df6:	203f      	movs	r0, #63	; 0x3f
    1df8:	4b38      	ldr	r3, [pc, #224]	; (1edc <system_init+0x18c>)
    1dfa:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1dfc:	2101      	movs	r1, #1
    1dfe:	203f      	movs	r0, #63	; 0x3f
    1e00:	4b38      	ldr	r3, [pc, #224]	; (1ee4 <system_init+0x194>)
    1e02:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1e04:	f04f 31ff 	mov.w	r1, #4294967295
    1e08:	203f      	movs	r0, #63	; 0x3f
    1e0a:	4b35      	ldr	r3, [pc, #212]	; (1ee0 <system_init+0x190>)
    1e0c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1e0e:	2100      	movs	r1, #0
    1e10:	204d      	movs	r0, #77	; 0x4d
    1e12:	4b31      	ldr	r3, [pc, #196]	; (1ed8 <system_init+0x188>)
    1e14:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1e16:	2102      	movs	r1, #2
    1e18:	204d      	movs	r0, #77	; 0x4d
    1e1a:	4b30      	ldr	r3, [pc, #192]	; (1edc <system_init+0x18c>)
    1e1c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1e1e:	f04f 31ff 	mov.w	r1, #4294967295
    1e22:	204d      	movs	r0, #77	; 0x4d
    1e24:	4b2e      	ldr	r3, [pc, #184]	; (1ee0 <system_init+0x190>)
    1e26:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1e28:	2101      	movs	r1, #1
    1e2a:	204e      	movs	r0, #78	; 0x4e
    1e2c:	4b2a      	ldr	r3, [pc, #168]	; (1ed8 <system_init+0x188>)
    1e2e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1e30:	2102      	movs	r1, #2
    1e32:	204e      	movs	r0, #78	; 0x4e
    1e34:	4b29      	ldr	r3, [pc, #164]	; (1edc <system_init+0x18c>)
    1e36:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1e38:	f04f 31ff 	mov.w	r1, #4294967295
    1e3c:	204e      	movs	r0, #78	; 0x4e
    1e3e:	4b28      	ldr	r3, [pc, #160]	; (1ee0 <system_init+0x190>)
    1e40:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1e42:	2100      	movs	r1, #0
    1e44:	204f      	movs	r0, #79	; 0x4f
    1e46:	4b24      	ldr	r3, [pc, #144]	; (1ed8 <system_init+0x188>)
    1e48:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1e4a:	2102      	movs	r1, #2
    1e4c:	204f      	movs	r0, #79	; 0x4f
    1e4e:	4b23      	ldr	r3, [pc, #140]	; (1edc <system_init+0x18c>)
    1e50:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1e52:	f04f 31ff 	mov.w	r1, #4294967295
    1e56:	204f      	movs	r0, #79	; 0x4f
    1e58:	4b21      	ldr	r3, [pc, #132]	; (1ee0 <system_init+0x190>)
    1e5a:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1e5c:	2100      	movs	r1, #0
    1e5e:	2052      	movs	r0, #82	; 0x52
    1e60:	4b1d      	ldr	r3, [pc, #116]	; (1ed8 <system_init+0x188>)
    1e62:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1e64:	2102      	movs	r1, #2
    1e66:	2052      	movs	r0, #82	; 0x52
    1e68:	4b1c      	ldr	r3, [pc, #112]	; (1edc <system_init+0x18c>)
    1e6a:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1e6c:	f04f 31ff 	mov.w	r1, #4294967295
    1e70:	2052      	movs	r0, #82	; 0x52
    1e72:	4b1b      	ldr	r3, [pc, #108]	; (1ee0 <system_init+0x190>)
    1e74:	4798      	blx	r3

	CRC_CALC_init();
    1e76:	4b1c      	ldr	r3, [pc, #112]	; (1ee8 <system_init+0x198>)
    1e78:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1e7a:	4b1c      	ldr	r3, [pc, #112]	; (1eec <system_init+0x19c>)
    1e7c:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1e7e:	4b1c      	ldr	r3, [pc, #112]	; (1ef0 <system_init+0x1a0>)
    1e80:	4798      	blx	r3

	QSPI_N25Q256_init();
    1e82:	4b1c      	ldr	r3, [pc, #112]	; (1ef4 <system_init+0x1a4>)
    1e84:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1e86:	4b1c      	ldr	r3, [pc, #112]	; (1ef8 <system_init+0x1a8>)
    1e88:	4798      	blx	r3

	I2C_HEATERS_init();
    1e8a:	4b1c      	ldr	r3, [pc, #112]	; (1efc <system_init+0x1ac>)
    1e8c:	4798      	blx	r3

	SPI_TEMP_init();
    1e8e:	4b1c      	ldr	r3, [pc, #112]	; (1f00 <system_init+0x1b0>)
    1e90:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1e92:	4b1c      	ldr	r3, [pc, #112]	; (1f04 <system_init+0x1b4>)
    1e94:	4798      	blx	r3

	SPI_HI3593_init();
    1e96:	4b1c      	ldr	r3, [pc, #112]	; (1f08 <system_init+0x1b8>)
    1e98:	4798      	blx	r3

	I2C_FANS_init();
    1e9a:	4b1c      	ldr	r3, [pc, #112]	; (1f0c <system_init+0x1bc>)
    1e9c:	4798      	blx	r3

	TIMER_USB_init();
    1e9e:	4b1c      	ldr	r3, [pc, #112]	; (1f10 <system_init+0x1c0>)
    1ea0:	4798      	blx	r3
	TIMER_ARINC_init();
    1ea2:	4b1c      	ldr	r3, [pc, #112]	; (1f14 <system_init+0x1c4>)
    1ea4:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1ea6:	4b1c      	ldr	r3, [pc, #112]	; (1f18 <system_init+0x1c8>)
    1ea8:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1eaa:	4b1c      	ldr	r3, [pc, #112]	; (1f1c <system_init+0x1cc>)
    1eac:	4798      	blx	r3
	TIMER_EVENT_init();
    1eae:	4b1c      	ldr	r3, [pc, #112]	; (1f20 <system_init+0x1d0>)
    1eb0:	4798      	blx	r3
	LIVE_PULSE_init();
    1eb2:	4b1c      	ldr	r3, [pc, #112]	; (1f24 <system_init+0x1d4>)
    1eb4:	4798      	blx	r3

	TIMER_HVAC_init();
    1eb6:	4b1c      	ldr	r3, [pc, #112]	; (1f28 <system_init+0x1d8>)
    1eb8:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1eba:	4b1c      	ldr	r3, [pc, #112]	; (1f2c <system_init+0x1dc>)
    1ebc:	4798      	blx	r3

	TIMER_CCU_init();
    1ebe:	4b1c      	ldr	r3, [pc, #112]	; (1f30 <system_init+0x1e0>)
    1ec0:	4798      	blx	r3

	CDCUSB_init();
    1ec2:	4b1c      	ldr	r3, [pc, #112]	; (1f34 <system_init+0x1e4>)
    1ec4:	4798      	blx	r3

	WATCHDOG_init();
    1ec6:	4b1c      	ldr	r3, [pc, #112]	; (1f38 <system_init+0x1e8>)
    1ec8:	4798      	blx	r3
	CAN_CCU_init();
    1eca:	4b1c      	ldr	r3, [pc, #112]	; (1f3c <system_init+0x1ec>)
    1ecc:	4798      	blx	r3
}
    1ece:	bf00      	nop
    1ed0:	bd80      	pop	{r7, pc}
    1ed2:	bf00      	nop
    1ed4:	00001255 	.word	0x00001255
    1ed8:	0000121d 	.word	0x0000121d
    1edc:	000011e5 	.word	0x000011e5
    1ee0:	000011c5 	.word	0x000011c5
    1ee4:	00001191 	.word	0x00001191
    1ee8:	000012b5 	.word	0x000012b5
    1eec:	000012e1 	.word	0x000012e1
    1ef0:	00001409 	.word	0x00001409
    1ef4:	00001551 	.word	0x00001551
    1ef8:	00001595 	.word	0x00001595
    1efc:	00001625 	.word	0x00001625
    1f00:	000016f1 	.word	0x000016f1
    1f04:	00001789 	.word	0x00001789
    1f08:	00001855 	.word	0x00001855
    1f0c:	000018ed 	.word	0x000018ed
    1f10:	00001919 	.word	0x00001919
    1f14:	00001961 	.word	0x00001961
    1f18:	000019a9 	.word	0x000019a9
    1f1c:	000019f1 	.word	0x000019f1
    1f20:	00001a39 	.word	0x00001a39
    1f24:	00001ab9 	.word	0x00001ab9
    1f28:	00001b19 	.word	0x00001b19
    1f2c:	00001b71 	.word	0x00001b71
    1f30:	00001bc9 	.word	0x00001bc9
    1f34:	00001c8d 	.word	0x00001c8d
    1f38:	00001cc5 	.word	0x00001cc5
    1f3c:	00001d0d 	.word	0x00001d0d

00001f40 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    1f40:	b480      	push	{r7}
    1f42:	b083      	sub	sp, #12
    1f44:	af00      	add	r7, sp, #0
    1f46:	4603      	mov	r3, r0
    1f48:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    1f4a:	88fb      	ldrh	r3, [r7, #6]
    1f4c:	f003 0303 	and.w	r3, r3, #3
    1f50:	2b00      	cmp	r3, #0
    1f52:	d001      	beq.n	1f58 <leap_year+0x18>
		return false;
    1f54:	2300      	movs	r3, #0
    1f56:	e000      	b.n	1f5a <leap_year+0x1a>
	} else {
		return true;
    1f58:	2301      	movs	r3, #1
	}
}
    1f5a:	4618      	mov	r0, r3
    1f5c:	370c      	adds	r7, #12
    1f5e:	46bd      	mov	sp, r7
    1f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f64:	4770      	bx	lr
	...

00001f68 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b084      	sub	sp, #16
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	6078      	str	r0, [r7, #4]
    1f70:	460b      	mov	r3, r1
    1f72:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    1f74:	2300      	movs	r3, #0
    1f76:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	b29b      	uxth	r3, r3
    1f7c:	4618      	mov	r0, r3
    1f7e:	4b2f      	ldr	r3, [pc, #188]	; (203c <get_secs_in_month+0xd4>)
    1f80:	4798      	blx	r3
    1f82:	4603      	mov	r3, r0
    1f84:	2b00      	cmp	r3, #0
    1f86:	d028      	beq.n	1fda <get_secs_in_month+0x72>
		switch (month) {
    1f88:	78fb      	ldrb	r3, [r7, #3]
    1f8a:	3b01      	subs	r3, #1
    1f8c:	2b0b      	cmp	r3, #11
    1f8e:	d84c      	bhi.n	202a <get_secs_in_month+0xc2>
    1f90:	a201      	add	r2, pc, #4	; (adr r2, 1f98 <get_secs_in_month+0x30>)
    1f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f96:	bf00      	nop
    1f98:	00001fc9 	.word	0x00001fc9
    1f9c:	00001fcf 	.word	0x00001fcf
    1fa0:	00001fc9 	.word	0x00001fc9
    1fa4:	00001fd5 	.word	0x00001fd5
    1fa8:	00001fc9 	.word	0x00001fc9
    1fac:	00001fd5 	.word	0x00001fd5
    1fb0:	00001fc9 	.word	0x00001fc9
    1fb4:	00001fc9 	.word	0x00001fc9
    1fb8:	00001fd5 	.word	0x00001fd5
    1fbc:	00001fc9 	.word	0x00001fc9
    1fc0:	00001fd5 	.word	0x00001fd5
    1fc4:	00001fc9 	.word	0x00001fc9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1fc8:	4b1d      	ldr	r3, [pc, #116]	; (2040 <get_secs_in_month+0xd8>)
    1fca:	60fb      	str	r3, [r7, #12]
			break;
    1fcc:	e030      	b.n	2030 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    1fce:	4b1d      	ldr	r3, [pc, #116]	; (2044 <get_secs_in_month+0xdc>)
    1fd0:	60fb      	str	r3, [r7, #12]
			break;
    1fd2:	e02d      	b.n	2030 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1fd4:	4b1c      	ldr	r3, [pc, #112]	; (2048 <get_secs_in_month+0xe0>)
    1fd6:	60fb      	str	r3, [r7, #12]
			break;
    1fd8:	e02a      	b.n	2030 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    1fda:	78fb      	ldrb	r3, [r7, #3]
    1fdc:	3b01      	subs	r3, #1
    1fde:	2b0b      	cmp	r3, #11
    1fe0:	d825      	bhi.n	202e <get_secs_in_month+0xc6>
    1fe2:	a201      	add	r2, pc, #4	; (adr r2, 1fe8 <get_secs_in_month+0x80>)
    1fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1fe8:	00002019 	.word	0x00002019
    1fec:	0000201f 	.word	0x0000201f
    1ff0:	00002019 	.word	0x00002019
    1ff4:	00002025 	.word	0x00002025
    1ff8:	00002019 	.word	0x00002019
    1ffc:	00002025 	.word	0x00002025
    2000:	00002019 	.word	0x00002019
    2004:	00002019 	.word	0x00002019
    2008:	00002025 	.word	0x00002025
    200c:	00002019 	.word	0x00002019
    2010:	00002025 	.word	0x00002025
    2014:	00002019 	.word	0x00002019
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2018:	4b09      	ldr	r3, [pc, #36]	; (2040 <get_secs_in_month+0xd8>)
    201a:	60fb      	str	r3, [r7, #12]
			break;
    201c:	e008      	b.n	2030 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    201e:	4b0b      	ldr	r3, [pc, #44]	; (204c <get_secs_in_month+0xe4>)
    2020:	60fb      	str	r3, [r7, #12]
			break;
    2022:	e005      	b.n	2030 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2024:	4b08      	ldr	r3, [pc, #32]	; (2048 <get_secs_in_month+0xe0>)
    2026:	60fb      	str	r3, [r7, #12]
			break;
    2028:	e002      	b.n	2030 <get_secs_in_month+0xc8>
			break;
    202a:	bf00      	nop
    202c:	e000      	b.n	2030 <get_secs_in_month+0xc8>
		default:
			break;
    202e:	bf00      	nop
		}
	}

	return sec_in_month;
    2030:	68fb      	ldr	r3, [r7, #12]
}
    2032:	4618      	mov	r0, r3
    2034:	3710      	adds	r7, #16
    2036:	46bd      	mov	sp, r7
    2038:	bd80      	pop	{r7, pc}
    203a:	bf00      	nop
    203c:	00001f41 	.word	0x00001f41
    2040:	0028de80 	.word	0x0028de80
    2044:	00263b80 	.word	0x00263b80
    2048:	00278d00 	.word	0x00278d00
    204c:	0024ea00 	.word	0x0024ea00

00002050 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2050:	b580      	push	{r7, lr}
    2052:	b08a      	sub	sp, #40	; 0x28
    2054:	af00      	add	r7, sp, #0
    2056:	60f8      	str	r0, [r7, #12]
    2058:	60b9      	str	r1, [r7, #8]
    205a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    205c:	68fb      	ldr	r3, [r7, #12]
    205e:	699b      	ldr	r3, [r3, #24]
    2060:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    2062:	2301      	movs	r3, #1
    2064:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    2066:	2301      	movs	r3, #1
    2068:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    206a:	2300      	movs	r3, #0
    206c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    206e:	2300      	movs	r3, #0
    2070:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    2072:	68bb      	ldr	r3, [r7, #8]
    2074:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2076:	6a3b      	ldr	r3, [r7, #32]
    2078:	b29b      	uxth	r3, r3
    207a:	4618      	mov	r0, r3
    207c:	4b32      	ldr	r3, [pc, #200]	; (2148 <convert_timestamp_to_datetime+0xf8>)
    207e:	4798      	blx	r3
    2080:	4603      	mov	r3, r0
    2082:	2b00      	cmp	r3, #0
    2084:	d001      	beq.n	208a <convert_timestamp_to_datetime+0x3a>
    2086:	4b31      	ldr	r3, [pc, #196]	; (214c <convert_timestamp_to_datetime+0xfc>)
    2088:	e000      	b.n	208c <convert_timestamp_to_datetime+0x3c>
    208a:	4b31      	ldr	r3, [pc, #196]	; (2150 <convert_timestamp_to_datetime+0x100>)
    208c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    208e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2090:	69bb      	ldr	r3, [r7, #24]
    2092:	429a      	cmp	r2, r3
    2094:	d307      	bcc.n	20a6 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2098:	69bb      	ldr	r3, [r7, #24]
    209a:	1ad3      	subs	r3, r2, r3
    209c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    209e:	6a3b      	ldr	r3, [r7, #32]
    20a0:	3301      	adds	r3, #1
    20a2:	623b      	str	r3, [r7, #32]
    20a4:	e7e7      	b.n	2076 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    20a6:	7ffb      	ldrb	r3, [r7, #31]
    20a8:	4619      	mov	r1, r3
    20aa:	6a38      	ldr	r0, [r7, #32]
    20ac:	4b29      	ldr	r3, [pc, #164]	; (2154 <convert_timestamp_to_datetime+0x104>)
    20ae:	4798      	blx	r3
    20b0:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    20b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    20b4:	697b      	ldr	r3, [r7, #20]
    20b6:	429a      	cmp	r2, r3
    20b8:	d307      	bcc.n	20ca <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    20ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    20bc:	697b      	ldr	r3, [r7, #20]
    20be:	1ad3      	subs	r3, r2, r3
    20c0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    20c2:	7ffb      	ldrb	r3, [r7, #31]
    20c4:	3301      	adds	r3, #1
    20c6:	77fb      	strb	r3, [r7, #31]
    20c8:	e7ed      	b.n	20a6 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    20ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20cc:	4a22      	ldr	r2, [pc, #136]	; (2158 <convert_timestamp_to_datetime+0x108>)
    20ce:	4293      	cmp	r3, r2
    20d0:	d909      	bls.n	20e6 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    20d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20d4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    20d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    20dc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    20de:	7fbb      	ldrb	r3, [r7, #30]
    20e0:	3301      	adds	r3, #1
    20e2:	77bb      	strb	r3, [r7, #30]
    20e4:	e7f1      	b.n	20ca <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    20e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20e8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    20ec:	d307      	bcc.n	20fe <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    20ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20f0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    20f4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    20f6:	7f7b      	ldrb	r3, [r7, #29]
    20f8:	3301      	adds	r3, #1
    20fa:	777b      	strb	r3, [r7, #29]
    20fc:	e7f3      	b.n	20e6 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    20fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2100:	2b3b      	cmp	r3, #59	; 0x3b
    2102:	d906      	bls.n	2112 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    2104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2106:	3b3c      	subs	r3, #60	; 0x3c
    2108:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    210a:	7f3b      	ldrb	r3, [r7, #28]
    210c:	3301      	adds	r3, #1
    210e:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    2110:	e7f5      	b.n	20fe <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    2112:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    2114:	6a3b      	ldr	r3, [r7, #32]
    2116:	b29a      	uxth	r2, r3
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	7ffa      	ldrb	r2, [r7, #31]
    2120:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	7fba      	ldrb	r2, [r7, #30]
    2126:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	7f7a      	ldrb	r2, [r7, #29]
    212c:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    212e:	687b      	ldr	r3, [r7, #4]
    2130:	7f3a      	ldrb	r2, [r7, #28]
    2132:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    2134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2136:	b2da      	uxtb	r2, r3
    2138:	687b      	ldr	r3, [r7, #4]
    213a:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    213c:	2300      	movs	r3, #0
}
    213e:	4618      	mov	r0, r3
    2140:	3728      	adds	r7, #40	; 0x28
    2142:	46bd      	mov	sp, r7
    2144:	bd80      	pop	{r7, pc}
    2146:	bf00      	nop
    2148:	00001f41 	.word	0x00001f41
    214c:	01e28500 	.word	0x01e28500
    2150:	01e13380 	.word	0x01e13380
    2154:	00001f69 	.word	0x00001f69
    2158:	0001517f 	.word	0x0001517f

0000215c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    215c:	b580      	push	{r7, lr}
    215e:	b084      	sub	sp, #16
    2160:	af00      	add	r7, sp, #0
    2162:	6078      	str	r0, [r7, #4]
    2164:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    2166:	2300      	movs	r3, #0
    2168:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	2b00      	cmp	r3, #0
    216e:	bf14      	ite	ne
    2170:	2301      	movne	r3, #1
    2172:	2300      	moveq	r3, #0
    2174:	b2db      	uxtb	r3, r3
    2176:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    217a:	4911      	ldr	r1, [pc, #68]	; (21c0 <calendar_init+0x64>)
    217c:	4618      	mov	r0, r3
    217e:	4b11      	ldr	r3, [pc, #68]	; (21c4 <calendar_init+0x68>)
    2180:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	681a      	ldr	r2, [r3, #0]
    2186:	683b      	ldr	r3, [r7, #0]
    2188:	429a      	cmp	r2, r3
    218a:	d101      	bne.n	2190 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    218c:	2300      	movs	r3, #0
    218e:	e013      	b.n	21b8 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	2b00      	cmp	r3, #0
    2196:	d002      	beq.n	219e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2198:	f06f 0311 	mvn.w	r3, #17
    219c:	e00c      	b.n	21b8 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	683a      	ldr	r2, [r7, #0]
    21a2:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	4618      	mov	r0, r3
    21a8:	4b07      	ldr	r3, [pc, #28]	; (21c8 <calendar_init+0x6c>)
    21aa:	4798      	blx	r3
    21ac:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	f240 72b2 	movw	r2, #1970	; 0x7b2
    21b4:	619a      	str	r2, [r3, #24]

	return ret;
    21b6:	68fb      	ldr	r3, [r7, #12]
}
    21b8:	4618      	mov	r0, r3
    21ba:	3710      	adds	r7, #16
    21bc:	46bd      	mov	sp, r7
    21be:	bd80      	pop	{r7, pc}
    21c0:	000107f0 	.word	0x000107f0
    21c4:	000038e1 	.word	0x000038e1
    21c8:	00005965 	.word	0x00005965

000021cc <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b084      	sub	sp, #16
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
    21d4:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	2b00      	cmp	r3, #0
    21da:	bf14      	ite	ne
    21dc:	2301      	movne	r3, #1
    21de:	2300      	moveq	r3, #0
    21e0:	b2db      	uxtb	r3, r3
    21e2:	f240 223b 	movw	r2, #571	; 0x23b
    21e6:	4909      	ldr	r1, [pc, #36]	; (220c <calendar_get_date_time+0x40>)
    21e8:	4618      	mov	r0, r3
    21ea:	4b09      	ldr	r3, [pc, #36]	; (2210 <calendar_get_date_time+0x44>)
    21ec:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	4618      	mov	r0, r3
    21f2:	4b08      	ldr	r3, [pc, #32]	; (2214 <calendar_get_date_time+0x48>)
    21f4:	4798      	blx	r3
    21f6:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    21f8:	683a      	ldr	r2, [r7, #0]
    21fa:	68f9      	ldr	r1, [r7, #12]
    21fc:	6878      	ldr	r0, [r7, #4]
    21fe:	4b06      	ldr	r3, [pc, #24]	; (2218 <calendar_get_date_time+0x4c>)
    2200:	4798      	blx	r3

	return ERR_NONE;
    2202:	2300      	movs	r3, #0
}
    2204:	4618      	mov	r0, r3
    2206:	3710      	adds	r7, #16
    2208:	46bd      	mov	sp, r7
    220a:	bd80      	pop	{r7, pc}
    220c:	000107f0 	.word	0x000107f0
    2210:	000038e1 	.word	0x000038e1
    2214:	00005a1d 	.word	0x00005a1d
    2218:	00002051 	.word	0x00002051

0000221c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    221c:	b580      	push	{r7, lr}
    221e:	b084      	sub	sp, #16
    2220:	af00      	add	r7, sp, #0
    2222:	6078      	str	r0, [r7, #4]
    2224:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	2b00      	cmp	r3, #0
    222a:	d004      	beq.n	2236 <can_async_init+0x1a>
    222c:	683b      	ldr	r3, [r7, #0]
    222e:	2b00      	cmp	r3, #0
    2230:	d001      	beq.n	2236 <can_async_init+0x1a>
    2232:	2301      	movs	r3, #1
    2234:	e000      	b.n	2238 <can_async_init+0x1c>
    2236:	2300      	movs	r3, #0
    2238:	f003 0301 	and.w	r3, r3, #1
    223c:	b2db      	uxtb	r3, r3
    223e:	2241      	movs	r2, #65	; 0x41
    2240:	490e      	ldr	r1, [pc, #56]	; (227c <can_async_init+0x60>)
    2242:	4618      	mov	r0, r3
    2244:	4b0e      	ldr	r3, [pc, #56]	; (2280 <can_async_init+0x64>)
    2246:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	6839      	ldr	r1, [r7, #0]
    224c:	4618      	mov	r0, r3
    224e:	4b0d      	ldr	r3, [pc, #52]	; (2284 <can_async_init+0x68>)
    2250:	4798      	blx	r3
    2252:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2254:	68fb      	ldr	r3, [r7, #12]
    2256:	2b00      	cmp	r3, #0
    2258:	d001      	beq.n	225e <can_async_init+0x42>
		return rc;
    225a:	68fb      	ldr	r3, [r7, #12]
    225c:	e009      	b.n	2272 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	4a09      	ldr	r2, [pc, #36]	; (2288 <can_async_init+0x6c>)
    2262:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	4a09      	ldr	r2, [pc, #36]	; (228c <can_async_init+0x70>)
    2268:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	4a08      	ldr	r2, [pc, #32]	; (2290 <can_async_init+0x74>)
    226e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2270:	2300      	movs	r3, #0
}
    2272:	4618      	mov	r0, r3
    2274:	3710      	adds	r7, #16
    2276:	46bd      	mov	sp, r7
    2278:	bd80      	pop	{r7, pc}
    227a:	bf00      	nop
    227c:	0001080c 	.word	0x0001080c
    2280:	000038e1 	.word	0x000038e1
    2284:	00003e3d 	.word	0x00003e3d
    2288:	00002295 	.word	0x00002295
    228c:	000022b9 	.word	0x000022b9
    2290:	000022dd 	.word	0x000022dd

00002294 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2294:	b580      	push	{r7, lr}
    2296:	b084      	sub	sp, #16
    2298:	af00      	add	r7, sp, #0
    229a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    22a0:	68fb      	ldr	r3, [r7, #12]
    22a2:	69db      	ldr	r3, [r3, #28]
    22a4:	2b00      	cmp	r3, #0
    22a6:	d003      	beq.n	22b0 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    22a8:	68fb      	ldr	r3, [r7, #12]
    22aa:	69db      	ldr	r3, [r3, #28]
    22ac:	68f8      	ldr	r0, [r7, #12]
    22ae:	4798      	blx	r3
	}
}
    22b0:	bf00      	nop
    22b2:	3710      	adds	r7, #16
    22b4:	46bd      	mov	sp, r7
    22b6:	bd80      	pop	{r7, pc}

000022b8 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	b084      	sub	sp, #16
    22bc:	af00      	add	r7, sp, #0
    22be:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    22c4:	68fb      	ldr	r3, [r7, #12]
    22c6:	6a1b      	ldr	r3, [r3, #32]
    22c8:	2b00      	cmp	r3, #0
    22ca:	d003      	beq.n	22d4 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    22cc:	68fb      	ldr	r3, [r7, #12]
    22ce:	6a1b      	ldr	r3, [r3, #32]
    22d0:	68f8      	ldr	r0, [r7, #12]
    22d2:	4798      	blx	r3
	}
}
    22d4:	bf00      	nop
    22d6:	3710      	adds	r7, #16
    22d8:	46bd      	mov	sp, r7
    22da:	bd80      	pop	{r7, pc}

000022dc <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    22dc:	b580      	push	{r7, lr}
    22de:	b084      	sub	sp, #16
    22e0:	af00      	add	r7, sp, #0
    22e2:	6078      	str	r0, [r7, #4]
    22e4:	460b      	mov	r3, r1
    22e6:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    22ec:	68fb      	ldr	r3, [r7, #12]
    22ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22f0:	2b00      	cmp	r3, #0
    22f2:	d005      	beq.n	2300 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    22f4:	68fb      	ldr	r3, [r7, #12]
    22f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22f8:	78fa      	ldrb	r2, [r7, #3]
    22fa:	4611      	mov	r1, r2
    22fc:	68f8      	ldr	r0, [r7, #12]
    22fe:	4798      	blx	r3
	}
}
    2300:	bf00      	nop
    2302:	3710      	adds	r7, #16
    2304:	46bd      	mov	sp, r7
    2306:	bd80      	pop	{r7, pc}

00002308 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2308:	b580      	push	{r7, lr}
    230a:	b082      	sub	sp, #8
    230c:	af00      	add	r7, sp, #0
    230e:	6078      	str	r0, [r7, #4]
    2310:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	2b00      	cmp	r3, #0
    2316:	d004      	beq.n	2322 <crc_sync_init+0x1a>
    2318:	683b      	ldr	r3, [r7, #0]
    231a:	2b00      	cmp	r3, #0
    231c:	d001      	beq.n	2322 <crc_sync_init+0x1a>
    231e:	2301      	movs	r3, #1
    2320:	e000      	b.n	2324 <crc_sync_init+0x1c>
    2322:	2300      	movs	r3, #0
    2324:	f003 0301 	and.w	r3, r3, #1
    2328:	b2db      	uxtb	r3, r3
    232a:	222b      	movs	r2, #43	; 0x2b
    232c:	4906      	ldr	r1, [pc, #24]	; (2348 <crc_sync_init+0x40>)
    232e:	4618      	mov	r0, r3
    2330:	4b06      	ldr	r3, [pc, #24]	; (234c <crc_sync_init+0x44>)
    2332:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	6839      	ldr	r1, [r7, #0]
    2338:	4618      	mov	r0, r3
    233a:	4b05      	ldr	r3, [pc, #20]	; (2350 <crc_sync_init+0x48>)
    233c:	4798      	blx	r3
    233e:	4603      	mov	r3, r0
}
    2340:	4618      	mov	r0, r3
    2342:	3708      	adds	r7, #8
    2344:	46bd      	mov	sp, r7
    2346:	bd80      	pop	{r7, pc}
    2348:	00010828 	.word	0x00010828
    234c:	000038e1 	.word	0x000038e1
    2350:	000041e5 	.word	0x000041e5

00002354 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2354:	b580      	push	{r7, lr}
    2356:	af00      	add	r7, sp, #0
	return _event_system_init();
    2358:	4b02      	ldr	r3, [pc, #8]	; (2364 <event_system_init+0x10>)
    235a:	4798      	blx	r3
    235c:	4603      	mov	r3, r0
}
    235e:	4618      	mov	r0, r3
    2360:	bd80      	pop	{r7, pc}
    2362:	bf00      	nop
    2364:	000049a1 	.word	0x000049a1

00002368 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2368:	b580      	push	{r7, lr}
    236a:	b082      	sub	sp, #8
    236c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    236e:	2300      	movs	r3, #0
    2370:	80fb      	strh	r3, [r7, #6]
    2372:	e00e      	b.n	2392 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2374:	88fb      	ldrh	r3, [r7, #6]
    2376:	4a0c      	ldr	r2, [pc, #48]	; (23a8 <ext_irq_init+0x40>)
    2378:	00db      	lsls	r3, r3, #3
    237a:	4413      	add	r3, r2
    237c:	f04f 32ff 	mov.w	r2, #4294967295
    2380:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2382:	88fb      	ldrh	r3, [r7, #6]
    2384:	4a08      	ldr	r2, [pc, #32]	; (23a8 <ext_irq_init+0x40>)
    2386:	2100      	movs	r1, #0
    2388:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    238c:	88fb      	ldrh	r3, [r7, #6]
    238e:	3301      	adds	r3, #1
    2390:	80fb      	strh	r3, [r7, #6]
    2392:	88fb      	ldrh	r3, [r7, #6]
    2394:	2b08      	cmp	r3, #8
    2396:	d9ed      	bls.n	2374 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2398:	4804      	ldr	r0, [pc, #16]	; (23ac <ext_irq_init+0x44>)
    239a:	4b05      	ldr	r3, [pc, #20]	; (23b0 <ext_irq_init+0x48>)
    239c:	4798      	blx	r3
    239e:	4603      	mov	r3, r0
}
    23a0:	4618      	mov	r0, r3
    23a2:	3708      	adds	r7, #8
    23a4:	46bd      	mov	sp, r7
    23a6:	bd80      	pop	{r7, pc}
    23a8:	20000a94 	.word	0x20000a94
    23ac:	0000250d 	.word	0x0000250d
    23b0:	00004525 	.word	0x00004525

000023b4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	b086      	sub	sp, #24
    23b8:	af00      	add	r7, sp, #0
    23ba:	6078      	str	r0, [r7, #4]
    23bc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    23be:	2300      	movs	r3, #0
    23c0:	75fb      	strb	r3, [r7, #23]
    23c2:	2300      	movs	r3, #0
    23c4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    23c6:	2300      	movs	r3, #0
    23c8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    23ca:	e012      	b.n	23f2 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    23cc:	7dfb      	ldrb	r3, [r7, #23]
    23ce:	4a4d      	ldr	r2, [pc, #308]	; (2504 <ext_irq_register+0x150>)
    23d0:	00db      	lsls	r3, r3, #3
    23d2:	4413      	add	r3, r2
    23d4:	685a      	ldr	r2, [r3, #4]
    23d6:	687b      	ldr	r3, [r7, #4]
    23d8:	429a      	cmp	r2, r3
    23da:	d107      	bne.n	23ec <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    23dc:	7dfb      	ldrb	r3, [r7, #23]
    23de:	4949      	ldr	r1, [pc, #292]	; (2504 <ext_irq_register+0x150>)
    23e0:	683a      	ldr	r2, [r7, #0]
    23e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    23e6:	2301      	movs	r3, #1
    23e8:	757b      	strb	r3, [r7, #21]
			break;
    23ea:	e005      	b.n	23f8 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    23ec:	7dfb      	ldrb	r3, [r7, #23]
    23ee:	3301      	adds	r3, #1
    23f0:	75fb      	strb	r3, [r7, #23]
    23f2:	7dfb      	ldrb	r3, [r7, #23]
    23f4:	2b08      	cmp	r3, #8
    23f6:	d9e9      	bls.n	23cc <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    23f8:	683b      	ldr	r3, [r7, #0]
    23fa:	2b00      	cmp	r3, #0
    23fc:	d10e      	bne.n	241c <ext_irq_register+0x68>
		if (!found) {
    23fe:	7d7b      	ldrb	r3, [r7, #21]
    2400:	f083 0301 	eor.w	r3, r3, #1
    2404:	b2db      	uxtb	r3, r3
    2406:	2b00      	cmp	r3, #0
    2408:	d002      	beq.n	2410 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    240a:	f06f 030c 	mvn.w	r3, #12
    240e:	e074      	b.n	24fa <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2410:	2100      	movs	r1, #0
    2412:	6878      	ldr	r0, [r7, #4]
    2414:	4b3c      	ldr	r3, [pc, #240]	; (2508 <ext_irq_register+0x154>)
    2416:	4798      	blx	r3
    2418:	4603      	mov	r3, r0
    241a:	e06e      	b.n	24fa <ext_irq_register+0x146>
	}

	if (!found) {
    241c:	7d7b      	ldrb	r3, [r7, #21]
    241e:	f083 0301 	eor.w	r3, r3, #1
    2422:	b2db      	uxtb	r3, r3
    2424:	2b00      	cmp	r3, #0
    2426:	d05a      	beq.n	24de <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2428:	2300      	movs	r3, #0
    242a:	75fb      	strb	r3, [r7, #23]
    242c:	e016      	b.n	245c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    242e:	7dfb      	ldrb	r3, [r7, #23]
    2430:	4a34      	ldr	r2, [pc, #208]	; (2504 <ext_irq_register+0x150>)
    2432:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2436:	2b00      	cmp	r3, #0
    2438:	d10d      	bne.n	2456 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    243a:	7dfb      	ldrb	r3, [r7, #23]
    243c:	4931      	ldr	r1, [pc, #196]	; (2504 <ext_irq_register+0x150>)
    243e:	683a      	ldr	r2, [r7, #0]
    2440:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2444:	7dfb      	ldrb	r3, [r7, #23]
    2446:	4a2f      	ldr	r2, [pc, #188]	; (2504 <ext_irq_register+0x150>)
    2448:	00db      	lsls	r3, r3, #3
    244a:	4413      	add	r3, r2
    244c:	687a      	ldr	r2, [r7, #4]
    244e:	605a      	str	r2, [r3, #4]
				found           = true;
    2450:	2301      	movs	r3, #1
    2452:	757b      	strb	r3, [r7, #21]
				break;
    2454:	e005      	b.n	2462 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2456:	7dfb      	ldrb	r3, [r7, #23]
    2458:	3301      	adds	r3, #1
    245a:	75fb      	strb	r3, [r7, #23]
    245c:	7dfb      	ldrb	r3, [r7, #23]
    245e:	2b08      	cmp	r3, #8
    2460:	d9e5      	bls.n	242e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2462:	e036      	b.n	24d2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2464:	7dfb      	ldrb	r3, [r7, #23]
    2466:	4a27      	ldr	r2, [pc, #156]	; (2504 <ext_irq_register+0x150>)
    2468:	00db      	lsls	r3, r3, #3
    246a:	4413      	add	r3, r2
    246c:	685a      	ldr	r2, [r3, #4]
    246e:	7dbb      	ldrb	r3, [r7, #22]
    2470:	4924      	ldr	r1, [pc, #144]	; (2504 <ext_irq_register+0x150>)
    2472:	00db      	lsls	r3, r3, #3
    2474:	440b      	add	r3, r1
    2476:	685b      	ldr	r3, [r3, #4]
    2478:	429a      	cmp	r2, r3
    247a:	d227      	bcs.n	24cc <ext_irq_register+0x118>
    247c:	7dbb      	ldrb	r3, [r7, #22]
    247e:	4a21      	ldr	r2, [pc, #132]	; (2504 <ext_irq_register+0x150>)
    2480:	00db      	lsls	r3, r3, #3
    2482:	4413      	add	r3, r2
    2484:	685b      	ldr	r3, [r3, #4]
    2486:	f1b3 3fff 	cmp.w	r3, #4294967295
    248a:	d01f      	beq.n	24cc <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    248c:	7dbb      	ldrb	r3, [r7, #22]
    248e:	491d      	ldr	r1, [pc, #116]	; (2504 <ext_irq_register+0x150>)
    2490:	f107 020c 	add.w	r2, r7, #12
    2494:	00db      	lsls	r3, r3, #3
    2496:	440b      	add	r3, r1
    2498:	e893 0003 	ldmia.w	r3, {r0, r1}
    249c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    24a0:	7dbb      	ldrb	r3, [r7, #22]
    24a2:	7dfa      	ldrb	r2, [r7, #23]
    24a4:	4817      	ldr	r0, [pc, #92]	; (2504 <ext_irq_register+0x150>)
    24a6:	4917      	ldr	r1, [pc, #92]	; (2504 <ext_irq_register+0x150>)
    24a8:	00db      	lsls	r3, r3, #3
    24aa:	4403      	add	r3, r0
    24ac:	00d2      	lsls	r2, r2, #3
    24ae:	440a      	add	r2, r1
    24b0:	e892 0003 	ldmia.w	r2, {r0, r1}
    24b4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    24b8:	7dfb      	ldrb	r3, [r7, #23]
    24ba:	4a12      	ldr	r2, [pc, #72]	; (2504 <ext_irq_register+0x150>)
    24bc:	00db      	lsls	r3, r3, #3
    24be:	4413      	add	r3, r2
    24c0:	f107 020c 	add.w	r2, r7, #12
    24c4:	e892 0003 	ldmia.w	r2, {r0, r1}
    24c8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    24cc:	7dbb      	ldrb	r3, [r7, #22]
    24ce:	3301      	adds	r3, #1
    24d0:	75bb      	strb	r3, [r7, #22]
    24d2:	7dbb      	ldrb	r3, [r7, #22]
    24d4:	2b08      	cmp	r3, #8
    24d6:	d802      	bhi.n	24de <ext_irq_register+0x12a>
    24d8:	7dfb      	ldrb	r3, [r7, #23]
    24da:	2b08      	cmp	r3, #8
    24dc:	d9c2      	bls.n	2464 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    24de:	7d7b      	ldrb	r3, [r7, #21]
    24e0:	f083 0301 	eor.w	r3, r3, #1
    24e4:	b2db      	uxtb	r3, r3
    24e6:	2b00      	cmp	r3, #0
    24e8:	d002      	beq.n	24f0 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    24ea:	f06f 030c 	mvn.w	r3, #12
    24ee:	e004      	b.n	24fa <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    24f0:	2101      	movs	r1, #1
    24f2:	6878      	ldr	r0, [r7, #4]
    24f4:	4b04      	ldr	r3, [pc, #16]	; (2508 <ext_irq_register+0x154>)
    24f6:	4798      	blx	r3
    24f8:	4603      	mov	r3, r0
}
    24fa:	4618      	mov	r0, r3
    24fc:	3718      	adds	r7, #24
    24fe:	46bd      	mov	sp, r7
    2500:	bd80      	pop	{r7, pc}
    2502:	bf00      	nop
    2504:	20000a94 	.word	0x20000a94
    2508:	000046b9 	.word	0x000046b9

0000250c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    250c:	b580      	push	{r7, lr}
    250e:	b084      	sub	sp, #16
    2510:	af00      	add	r7, sp, #0
    2512:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2514:	2300      	movs	r3, #0
    2516:	73fb      	strb	r3, [r7, #15]
    2518:	2309      	movs	r3, #9
    251a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    251c:	e02a      	b.n	2574 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    251e:	7bba      	ldrb	r2, [r7, #14]
    2520:	7bfb      	ldrb	r3, [r7, #15]
    2522:	4413      	add	r3, r2
    2524:	105b      	asrs	r3, r3, #1
    2526:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2528:	7b7b      	ldrb	r3, [r7, #13]
    252a:	2b08      	cmp	r3, #8
    252c:	d827      	bhi.n	257e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    252e:	7b7b      	ldrb	r3, [r7, #13]
    2530:	4a16      	ldr	r2, [pc, #88]	; (258c <process_ext_irq+0x80>)
    2532:	00db      	lsls	r3, r3, #3
    2534:	4413      	add	r3, r2
    2536:	685a      	ldr	r2, [r3, #4]
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	429a      	cmp	r2, r3
    253c:	d10b      	bne.n	2556 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    253e:	7b7b      	ldrb	r3, [r7, #13]
    2540:	4a12      	ldr	r2, [pc, #72]	; (258c <process_ext_irq+0x80>)
    2542:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2546:	2b00      	cmp	r3, #0
    2548:	d01b      	beq.n	2582 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    254a:	7b7b      	ldrb	r3, [r7, #13]
    254c:	4a0f      	ldr	r2, [pc, #60]	; (258c <process_ext_irq+0x80>)
    254e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2552:	4798      	blx	r3
			}
			return;
    2554:	e015      	b.n	2582 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2556:	7b7b      	ldrb	r3, [r7, #13]
    2558:	4a0c      	ldr	r2, [pc, #48]	; (258c <process_ext_irq+0x80>)
    255a:	00db      	lsls	r3, r3, #3
    255c:	4413      	add	r3, r2
    255e:	685a      	ldr	r2, [r3, #4]
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	429a      	cmp	r2, r3
    2564:	d203      	bcs.n	256e <process_ext_irq+0x62>
			lower = middle + 1;
    2566:	7b7b      	ldrb	r3, [r7, #13]
    2568:	3301      	adds	r3, #1
    256a:	73fb      	strb	r3, [r7, #15]
    256c:	e002      	b.n	2574 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    256e:	7b7b      	ldrb	r3, [r7, #13]
    2570:	3b01      	subs	r3, #1
    2572:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2574:	7bba      	ldrb	r2, [r7, #14]
    2576:	7bfb      	ldrb	r3, [r7, #15]
    2578:	429a      	cmp	r2, r3
    257a:	d2d0      	bcs.n	251e <process_ext_irq+0x12>
    257c:	e002      	b.n	2584 <process_ext_irq+0x78>
			return;
    257e:	bf00      	nop
    2580:	e000      	b.n	2584 <process_ext_irq+0x78>
			return;
    2582:	bf00      	nop
		}
	}
}
    2584:	3710      	adds	r7, #16
    2586:	46bd      	mov	sp, r7
    2588:	bd80      	pop	{r7, pc}
    258a:	bf00      	nop
    258c:	20000a94 	.word	0x20000a94

00002590 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2590:	b580      	push	{r7, lr}
    2592:	b08a      	sub	sp, #40	; 0x28
    2594:	af00      	add	r7, sp, #0
    2596:	60f8      	str	r0, [r7, #12]
    2598:	60b9      	str	r1, [r7, #8]
    259a:	4613      	mov	r3, r2
    259c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    259e:	68fb      	ldr	r3, [r7, #12]
    25a0:	3b14      	subs	r3, #20
    25a2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    25a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25a6:	8b9b      	ldrh	r3, [r3, #28]
    25a8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    25aa:	88fb      	ldrh	r3, [r7, #6]
    25ac:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    25ae:	f248 0301 	movw	r3, #32769	; 0x8001
    25b2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    25b4:	68bb      	ldr	r3, [r7, #8]
    25b6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    25b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25ba:	f107 0214 	add.w	r2, r7, #20
    25be:	4611      	mov	r1, r2
    25c0:	4618      	mov	r0, r3
    25c2:	4b06      	ldr	r3, [pc, #24]	; (25dc <i2c_m_sync_read+0x4c>)
    25c4:	4798      	blx	r3
    25c6:	6238      	str	r0, [r7, #32]

	if (ret) {
    25c8:	6a3b      	ldr	r3, [r7, #32]
    25ca:	2b00      	cmp	r3, #0
    25cc:	d001      	beq.n	25d2 <i2c_m_sync_read+0x42>
		return ret;
    25ce:	6a3b      	ldr	r3, [r7, #32]
    25d0:	e000      	b.n	25d4 <i2c_m_sync_read+0x44>
	}

	return n;
    25d2:	88fb      	ldrh	r3, [r7, #6]
}
    25d4:	4618      	mov	r0, r3
    25d6:	3728      	adds	r7, #40	; 0x28
    25d8:	46bd      	mov	sp, r7
    25da:	bd80      	pop	{r7, pc}
    25dc:	0000657d 	.word	0x0000657d

000025e0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	b08a      	sub	sp, #40	; 0x28
    25e4:	af00      	add	r7, sp, #0
    25e6:	60f8      	str	r0, [r7, #12]
    25e8:	60b9      	str	r1, [r7, #8]
    25ea:	4613      	mov	r3, r2
    25ec:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    25ee:	68fb      	ldr	r3, [r7, #12]
    25f0:	3b14      	subs	r3, #20
    25f2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    25f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25f6:	8b9b      	ldrh	r3, [r3, #28]
    25f8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    25fa:	88fb      	ldrh	r3, [r7, #6]
    25fc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    25fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2602:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2604:	68bb      	ldr	r3, [r7, #8]
    2606:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    260a:	f107 0214 	add.w	r2, r7, #20
    260e:	4611      	mov	r1, r2
    2610:	4618      	mov	r0, r3
    2612:	4b06      	ldr	r3, [pc, #24]	; (262c <i2c_m_sync_write+0x4c>)
    2614:	4798      	blx	r3
    2616:	6238      	str	r0, [r7, #32]

	if (ret) {
    2618:	6a3b      	ldr	r3, [r7, #32]
    261a:	2b00      	cmp	r3, #0
    261c:	d001      	beq.n	2622 <i2c_m_sync_write+0x42>
		return ret;
    261e:	6a3b      	ldr	r3, [r7, #32]
    2620:	e000      	b.n	2624 <i2c_m_sync_write+0x44>
	}

	return n;
    2622:	88fb      	ldrh	r3, [r7, #6]
}
    2624:	4618      	mov	r0, r3
    2626:	3728      	adds	r7, #40	; 0x28
    2628:	46bd      	mov	sp, r7
    262a:	bd80      	pop	{r7, pc}
    262c:	0000657d 	.word	0x0000657d

00002630 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2630:	b580      	push	{r7, lr}
    2632:	b084      	sub	sp, #16
    2634:	af00      	add	r7, sp, #0
    2636:	6078      	str	r0, [r7, #4]
    2638:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	2b00      	cmp	r3, #0
    263e:	bf14      	ite	ne
    2640:	2301      	movne	r3, #1
    2642:	2300      	moveq	r3, #0
    2644:	b2db      	uxtb	r3, r3
    2646:	225e      	movs	r2, #94	; 0x5e
    2648:	490c      	ldr	r1, [pc, #48]	; (267c <i2c_m_sync_init+0x4c>)
    264a:	4618      	mov	r0, r3
    264c:	4b0c      	ldr	r3, [pc, #48]	; (2680 <i2c_m_sync_init+0x50>)
    264e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2650:	687b      	ldr	r3, [r7, #4]
    2652:	6839      	ldr	r1, [r7, #0]
    2654:	4618      	mov	r0, r3
    2656:	4b0b      	ldr	r3, [pc, #44]	; (2684 <i2c_m_sync_init+0x54>)
    2658:	4798      	blx	r3
    265a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    265c:	68fb      	ldr	r3, [r7, #12]
    265e:	2b00      	cmp	r3, #0
    2660:	d001      	beq.n	2666 <i2c_m_sync_init+0x36>
		return init_status;
    2662:	68fb      	ldr	r3, [r7, #12]
    2664:	e006      	b.n	2674 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	4a07      	ldr	r2, [pc, #28]	; (2688 <i2c_m_sync_init+0x58>)
    266a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	4a07      	ldr	r2, [pc, #28]	; (268c <i2c_m_sync_init+0x5c>)
    2670:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2672:	2300      	movs	r3, #0
}
    2674:	4618      	mov	r0, r3
    2676:	3710      	adds	r7, #16
    2678:	46bd      	mov	sp, r7
    267a:	bd80      	pop	{r7, pc}
    267c:	00010844 	.word	0x00010844
    2680:	000038e1 	.word	0x000038e1
    2684:	000063b9 	.word	0x000063b9
    2688:	00002591 	.word	0x00002591
    268c:	000025e1 	.word	0x000025e1

00002690 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2690:	b580      	push	{r7, lr}
    2692:	b084      	sub	sp, #16
    2694:	af00      	add	r7, sp, #0
    2696:	60f8      	str	r0, [r7, #12]
    2698:	60b9      	str	r1, [r7, #8]
    269a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    269c:	68fb      	ldr	r3, [r7, #12]
    269e:	2b00      	cmp	r3, #0
    26a0:	d004      	beq.n	26ac <pwm_init+0x1c>
    26a2:	68bb      	ldr	r3, [r7, #8]
    26a4:	2b00      	cmp	r3, #0
    26a6:	d001      	beq.n	26ac <pwm_init+0x1c>
    26a8:	2301      	movs	r3, #1
    26aa:	e000      	b.n	26ae <pwm_init+0x1e>
    26ac:	2300      	movs	r3, #0
    26ae:	f003 0301 	and.w	r3, r3, #1
    26b2:	b2db      	uxtb	r3, r3
    26b4:	2233      	movs	r2, #51	; 0x33
    26b6:	490a      	ldr	r1, [pc, #40]	; (26e0 <pwm_init+0x50>)
    26b8:	4618      	mov	r0, r3
    26ba:	4b0a      	ldr	r3, [pc, #40]	; (26e4 <pwm_init+0x54>)
    26bc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    26be:	68fb      	ldr	r3, [r7, #12]
    26c0:	68b9      	ldr	r1, [r7, #8]
    26c2:	4618      	mov	r0, r3
    26c4:	4b08      	ldr	r3, [pc, #32]	; (26e8 <pwm_init+0x58>)
    26c6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    26c8:	68fb      	ldr	r3, [r7, #12]
    26ca:	4a08      	ldr	r2, [pc, #32]	; (26ec <pwm_init+0x5c>)
    26cc:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    26ce:	68fb      	ldr	r3, [r7, #12]
    26d0:	4a07      	ldr	r2, [pc, #28]	; (26f0 <pwm_init+0x60>)
    26d2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    26d4:	2300      	movs	r3, #0
}
    26d6:	4618      	mov	r0, r3
    26d8:	3710      	adds	r7, #16
    26da:	46bd      	mov	sp, r7
    26dc:	bd80      	pop	{r7, pc}
    26de:	bf00      	nop
    26e0:	00010860 	.word	0x00010860
    26e4:	000038e1 	.word	0x000038e1
    26e8:	00007bb9 	.word	0x00007bb9
    26ec:	000026f5 	.word	0x000026f5
    26f0:	00002719 	.word	0x00002719

000026f4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b084      	sub	sp, #16
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2700:	68fb      	ldr	r3, [r7, #12]
    2702:	695b      	ldr	r3, [r3, #20]
    2704:	2b00      	cmp	r3, #0
    2706:	d003      	beq.n	2710 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2708:	68fb      	ldr	r3, [r7, #12]
    270a:	695b      	ldr	r3, [r3, #20]
    270c:	68f8      	ldr	r0, [r7, #12]
    270e:	4798      	blx	r3
	}
}
    2710:	bf00      	nop
    2712:	3710      	adds	r7, #16
    2714:	46bd      	mov	sp, r7
    2716:	bd80      	pop	{r7, pc}

00002718 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2718:	b580      	push	{r7, lr}
    271a:	b084      	sub	sp, #16
    271c:	af00      	add	r7, sp, #0
    271e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2724:	68fb      	ldr	r3, [r7, #12]
    2726:	699b      	ldr	r3, [r3, #24]
    2728:	2b00      	cmp	r3, #0
    272a:	d003      	beq.n	2734 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    272c:	68fb      	ldr	r3, [r7, #12]
    272e:	699b      	ldr	r3, [r3, #24]
    2730:	68f8      	ldr	r0, [r7, #12]
    2732:	4798      	blx	r3
	}
}
    2734:	bf00      	nop
    2736:	3710      	adds	r7, #16
    2738:	46bd      	mov	sp, r7
    273a:	bd80      	pop	{r7, pc}

0000273c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    273c:	b580      	push	{r7, lr}
    273e:	b082      	sub	sp, #8
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	2b00      	cmp	r3, #0
    274a:	d004      	beq.n	2756 <qspi_sync_init+0x1a>
    274c:	683b      	ldr	r3, [r7, #0]
    274e:	2b00      	cmp	r3, #0
    2750:	d001      	beq.n	2756 <qspi_sync_init+0x1a>
    2752:	2301      	movs	r3, #1
    2754:	e000      	b.n	2758 <qspi_sync_init+0x1c>
    2756:	2300      	movs	r3, #0
    2758:	f003 0301 	and.w	r3, r3, #1
    275c:	b2db      	uxtb	r3, r3
    275e:	2231      	movs	r2, #49	; 0x31
    2760:	4906      	ldr	r1, [pc, #24]	; (277c <qspi_sync_init+0x40>)
    2762:	4618      	mov	r0, r3
    2764:	4b06      	ldr	r3, [pc, #24]	; (2780 <qspi_sync_init+0x44>)
    2766:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	6839      	ldr	r1, [r7, #0]
    276c:	4618      	mov	r0, r3
    276e:	4b05      	ldr	r3, [pc, #20]	; (2784 <qspi_sync_init+0x48>)
    2770:	4798      	blx	r3
    2772:	4603      	mov	r3, r0
}
    2774:	4618      	mov	r0, r3
    2776:	3708      	adds	r7, #8
    2778:	46bd      	mov	sp, r7
    277a:	bd80      	pop	{r7, pc}
    277c:	00010878 	.word	0x00010878
    2780:	000038e1 	.word	0x000038e1
    2784:	00005581 	.word	0x00005581

00002788 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2788:	b580      	push	{r7, lr}
    278a:	b082      	sub	sp, #8
    278c:	af00      	add	r7, sp, #0
    278e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	2b00      	cmp	r3, #0
    2794:	bf14      	ite	ne
    2796:	2301      	movne	r3, #1
    2798:	2300      	moveq	r3, #0
    279a:	b2db      	uxtb	r3, r3
    279c:	223f      	movs	r2, #63	; 0x3f
    279e:	4906      	ldr	r1, [pc, #24]	; (27b8 <qspi_sync_enable+0x30>)
    27a0:	4618      	mov	r0, r3
    27a2:	4b06      	ldr	r3, [pc, #24]	; (27bc <qspi_sync_enable+0x34>)
    27a4:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    27a6:	687b      	ldr	r3, [r7, #4]
    27a8:	4618      	mov	r0, r3
    27aa:	4b05      	ldr	r3, [pc, #20]	; (27c0 <qspi_sync_enable+0x38>)
    27ac:	4798      	blx	r3
    27ae:	4603      	mov	r3, r0
}
    27b0:	4618      	mov	r0, r3
    27b2:	3708      	adds	r7, #8
    27b4:	46bd      	mov	sp, r7
    27b6:	bd80      	pop	{r7, pc}
    27b8:	00010878 	.word	0x00010878
    27bc:	000038e1 	.word	0x000038e1
    27c0:	000055f5 	.word	0x000055f5

000027c4 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    27c4:	b580      	push	{r7, lr}
    27c6:	b082      	sub	sp, #8
    27c8:	af00      	add	r7, sp, #0
    27ca:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	2b00      	cmp	r3, #0
    27d0:	bf14      	ite	ne
    27d2:	2301      	movne	r3, #1
    27d4:	2300      	moveq	r3, #0
    27d6:	b2db      	uxtb	r3, r3
    27d8:	2246      	movs	r2, #70	; 0x46
    27da:	4906      	ldr	r1, [pc, #24]	; (27f4 <qspi_sync_disable+0x30>)
    27dc:	4618      	mov	r0, r3
    27de:	4b06      	ldr	r3, [pc, #24]	; (27f8 <qspi_sync_disable+0x34>)
    27e0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	4618      	mov	r0, r3
    27e6:	4b05      	ldr	r3, [pc, #20]	; (27fc <qspi_sync_disable+0x38>)
    27e8:	4798      	blx	r3
    27ea:	4603      	mov	r3, r0
}
    27ec:	4618      	mov	r0, r3
    27ee:	3708      	adds	r7, #8
    27f0:	46bd      	mov	sp, r7
    27f2:	bd80      	pop	{r7, pc}
    27f4:	00010878 	.word	0x00010878
    27f8:	000038e1 	.word	0x000038e1
    27fc:	00005619 	.word	0x00005619

00002800 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2800:	b580      	push	{r7, lr}
    2802:	b082      	sub	sp, #8
    2804:	af00      	add	r7, sp, #0
    2806:	6078      	str	r0, [r7, #4]
    2808:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	2b00      	cmp	r3, #0
    280e:	d004      	beq.n	281a <qspi_sync_serial_run_command+0x1a>
    2810:	683b      	ldr	r3, [r7, #0]
    2812:	2b00      	cmp	r3, #0
    2814:	d001      	beq.n	281a <qspi_sync_serial_run_command+0x1a>
    2816:	2301      	movs	r3, #1
    2818:	e000      	b.n	281c <qspi_sync_serial_run_command+0x1c>
    281a:	2300      	movs	r3, #0
    281c:	f003 0301 	and.w	r3, r3, #1
    2820:	b2db      	uxtb	r3, r3
    2822:	224d      	movs	r2, #77	; 0x4d
    2824:	4906      	ldr	r1, [pc, #24]	; (2840 <qspi_sync_serial_run_command+0x40>)
    2826:	4618      	mov	r0, r3
    2828:	4b06      	ldr	r3, [pc, #24]	; (2844 <qspi_sync_serial_run_command+0x44>)
    282a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	6839      	ldr	r1, [r7, #0]
    2830:	4618      	mov	r0, r3
    2832:	4b05      	ldr	r3, [pc, #20]	; (2848 <qspi_sync_serial_run_command+0x48>)
    2834:	4798      	blx	r3
    2836:	4603      	mov	r3, r0
}
    2838:	4618      	mov	r0, r3
    283a:	3708      	adds	r7, #8
    283c:	46bd      	mov	sp, r7
    283e:	bd80      	pop	{r7, pc}
    2840:	00010878 	.word	0x00010878
    2844:	000038e1 	.word	0x000038e1
    2848:	00005765 	.word	0x00005765

0000284c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    284c:	b580      	push	{r7, lr}
    284e:	b084      	sub	sp, #16
    2850:	af00      	add	r7, sp, #0
    2852:	6078      	str	r0, [r7, #4]
    2854:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2856:	2300      	movs	r3, #0
    2858:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	2b00      	cmp	r3, #0
    285e:	d004      	beq.n	286a <spi_m_sync_init+0x1e>
    2860:	683b      	ldr	r3, [r7, #0]
    2862:	2b00      	cmp	r3, #0
    2864:	d001      	beq.n	286a <spi_m_sync_init+0x1e>
    2866:	2301      	movs	r3, #1
    2868:	e000      	b.n	286c <spi_m_sync_init+0x20>
    286a:	2300      	movs	r3, #0
    286c:	f003 0301 	and.w	r3, r3, #1
    2870:	b2db      	uxtb	r3, r3
    2872:	2240      	movs	r2, #64	; 0x40
    2874:	4910      	ldr	r1, [pc, #64]	; (28b8 <spi_m_sync_init+0x6c>)
    2876:	4618      	mov	r0, r3
    2878:	4b10      	ldr	r3, [pc, #64]	; (28bc <spi_m_sync_init+0x70>)
    287a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	683a      	ldr	r2, [r7, #0]
    2880:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2882:	687b      	ldr	r3, [r7, #4]
    2884:	3304      	adds	r3, #4
    2886:	6839      	ldr	r1, [r7, #0]
    2888:	4618      	mov	r0, r3
    288a:	4b0d      	ldr	r3, [pc, #52]	; (28c0 <spi_m_sync_init+0x74>)
    288c:	4798      	blx	r3
    288e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2890:	68fb      	ldr	r3, [r7, #12]
    2892:	2b00      	cmp	r3, #0
    2894:	da01      	bge.n	289a <spi_m_sync_init+0x4e>
		return rc;
    2896:	68fb      	ldr	r3, [r7, #12]
    2898:	e00a      	b.n	28b0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    289a:	687b      	ldr	r3, [r7, #4]
    289c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    28a0:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	4a07      	ldr	r2, [pc, #28]	; (28c4 <spi_m_sync_init+0x78>)
    28a6:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	4a07      	ldr	r2, [pc, #28]	; (28c8 <spi_m_sync_init+0x7c>)
    28ac:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    28ae:	2300      	movs	r3, #0
}
    28b0:	4618      	mov	r0, r3
    28b2:	3710      	adds	r7, #16
    28b4:	46bd      	mov	sp, r7
    28b6:	bd80      	pop	{r7, pc}
    28b8:	00010894 	.word	0x00010894
    28bc:	000038e1 	.word	0x000038e1
    28c0:	000069ed 	.word	0x000069ed
    28c4:	00002945 	.word	0x00002945
    28c8:	0000299d 	.word	0x0000299d

000028cc <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	2b00      	cmp	r3, #0
    28d8:	bf14      	ite	ne
    28da:	2301      	movne	r3, #1
    28dc:	2300      	moveq	r3, #0
    28de:	b2db      	uxtb	r3, r3
    28e0:	2257      	movs	r2, #87	; 0x57
    28e2:	4906      	ldr	r1, [pc, #24]	; (28fc <spi_m_sync_enable+0x30>)
    28e4:	4618      	mov	r0, r3
    28e6:	4b06      	ldr	r3, [pc, #24]	; (2900 <spi_m_sync_enable+0x34>)
    28e8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	3304      	adds	r3, #4
    28ee:	4618      	mov	r0, r3
    28f0:	4b04      	ldr	r3, [pc, #16]	; (2904 <spi_m_sync_enable+0x38>)
    28f2:	4798      	blx	r3
}
    28f4:	bf00      	nop
    28f6:	3708      	adds	r7, #8
    28f8:	46bd      	mov	sp, r7
    28fa:	bd80      	pop	{r7, pc}
    28fc:	00010894 	.word	0x00010894
    2900:	000038e1 	.word	0x000038e1
    2904:	00006af9 	.word	0x00006af9

00002908 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	2b00      	cmp	r3, #0
    2914:	bf14      	ite	ne
    2916:	2301      	movne	r3, #1
    2918:	2300      	moveq	r3, #0
    291a:	b2db      	uxtb	r3, r3
    291c:	225d      	movs	r2, #93	; 0x5d
    291e:	4906      	ldr	r1, [pc, #24]	; (2938 <spi_m_sync_disable+0x30>)
    2920:	4618      	mov	r0, r3
    2922:	4b06      	ldr	r3, [pc, #24]	; (293c <spi_m_sync_disable+0x34>)
    2924:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	3304      	adds	r3, #4
    292a:	4618      	mov	r0, r3
    292c:	4b04      	ldr	r3, [pc, #16]	; (2940 <spi_m_sync_disable+0x38>)
    292e:	4798      	blx	r3
}
    2930:	bf00      	nop
    2932:	3708      	adds	r7, #8
    2934:	46bd      	mov	sp, r7
    2936:	bd80      	pop	{r7, pc}
    2938:	00010894 	.word	0x00010894
    293c:	000038e1 	.word	0x000038e1
    2940:	00006b49 	.word	0x00006b49

00002944 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2944:	b580      	push	{r7, lr}
    2946:	b088      	sub	sp, #32
    2948:	af00      	add	r7, sp, #0
    294a:	60f8      	str	r0, [r7, #12]
    294c:	60b9      	str	r1, [r7, #8]
    294e:	4613      	mov	r3, r2
    2950:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2952:	68fb      	ldr	r3, [r7, #12]
    2954:	2b00      	cmp	r3, #0
    2956:	bf14      	ite	ne
    2958:	2301      	movne	r3, #1
    295a:	2300      	moveq	r3, #0
    295c:	b2db      	uxtb	r3, r3
    295e:	2287      	movs	r2, #135	; 0x87
    2960:	490b      	ldr	r1, [pc, #44]	; (2990 <_spi_m_sync_io_read+0x4c>)
    2962:	4618      	mov	r0, r3
    2964:	4b0b      	ldr	r3, [pc, #44]	; (2994 <_spi_m_sync_io_read+0x50>)
    2966:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2968:	68fb      	ldr	r3, [r7, #12]
    296a:	3b0c      	subs	r3, #12
    296c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    296e:	68bb      	ldr	r3, [r7, #8]
    2970:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2972:	2300      	movs	r3, #0
    2974:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2976:	88fb      	ldrh	r3, [r7, #6]
    2978:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    297a:	f107 0310 	add.w	r3, r7, #16
    297e:	4619      	mov	r1, r3
    2980:	69f8      	ldr	r0, [r7, #28]
    2982:	4b05      	ldr	r3, [pc, #20]	; (2998 <_spi_m_sync_io_read+0x54>)
    2984:	4798      	blx	r3
    2986:	4603      	mov	r3, r0
}
    2988:	4618      	mov	r0, r3
    298a:	3720      	adds	r7, #32
    298c:	46bd      	mov	sp, r7
    298e:	bd80      	pop	{r7, pc}
    2990:	00010894 	.word	0x00010894
    2994:	000038e1 	.word	0x000038e1
    2998:	000029f5 	.word	0x000029f5

0000299c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    299c:	b580      	push	{r7, lr}
    299e:	b088      	sub	sp, #32
    29a0:	af00      	add	r7, sp, #0
    29a2:	60f8      	str	r0, [r7, #12]
    29a4:	60b9      	str	r1, [r7, #8]
    29a6:	4613      	mov	r3, r2
    29a8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    29aa:	68fb      	ldr	r3, [r7, #12]
    29ac:	2b00      	cmp	r3, #0
    29ae:	bf14      	ite	ne
    29b0:	2301      	movne	r3, #1
    29b2:	2300      	moveq	r3, #0
    29b4:	b2db      	uxtb	r3, r3
    29b6:	22a3      	movs	r2, #163	; 0xa3
    29b8:	490b      	ldr	r1, [pc, #44]	; (29e8 <_spi_m_sync_io_write+0x4c>)
    29ba:	4618      	mov	r0, r3
    29bc:	4b0b      	ldr	r3, [pc, #44]	; (29ec <_spi_m_sync_io_write+0x50>)
    29be:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    29c0:	68fb      	ldr	r3, [r7, #12]
    29c2:	3b0c      	subs	r3, #12
    29c4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    29c6:	2300      	movs	r3, #0
    29c8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    29ca:	68bb      	ldr	r3, [r7, #8]
    29cc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    29ce:	88fb      	ldrh	r3, [r7, #6]
    29d0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    29d2:	f107 0310 	add.w	r3, r7, #16
    29d6:	4619      	mov	r1, r3
    29d8:	69f8      	ldr	r0, [r7, #28]
    29da:	4b05      	ldr	r3, [pc, #20]	; (29f0 <_spi_m_sync_io_write+0x54>)
    29dc:	4798      	blx	r3
    29de:	4603      	mov	r3, r0
}
    29e0:	4618      	mov	r0, r3
    29e2:	3720      	adds	r7, #32
    29e4:	46bd      	mov	sp, r7
    29e6:	bd80      	pop	{r7, pc}
    29e8:	00010894 	.word	0x00010894
    29ec:	000038e1 	.word	0x000038e1
    29f0:	000029f5 	.word	0x000029f5

000029f4 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b086      	sub	sp, #24
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	2b00      	cmp	r3, #0
    2a02:	d004      	beq.n	2a0e <spi_m_sync_transfer+0x1a>
    2a04:	683b      	ldr	r3, [r7, #0]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d001      	beq.n	2a0e <spi_m_sync_transfer+0x1a>
    2a0a:	2301      	movs	r3, #1
    2a0c:	e000      	b.n	2a10 <spi_m_sync_transfer+0x1c>
    2a0e:	2300      	movs	r3, #0
    2a10:	f003 0301 	and.w	r3, r3, #1
    2a14:	b2db      	uxtb	r3, r3
    2a16:	22b3      	movs	r2, #179	; 0xb3
    2a18:	490c      	ldr	r1, [pc, #48]	; (2a4c <spi_m_sync_transfer+0x58>)
    2a1a:	4618      	mov	r0, r3
    2a1c:	4b0c      	ldr	r3, [pc, #48]	; (2a50 <spi_m_sync_transfer+0x5c>)
    2a1e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2a20:	683b      	ldr	r3, [r7, #0]
    2a22:	681b      	ldr	r3, [r3, #0]
    2a24:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2a26:	683b      	ldr	r3, [r7, #0]
    2a28:	685b      	ldr	r3, [r3, #4]
    2a2a:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2a2c:	683b      	ldr	r3, [r7, #0]
    2a2e:	689b      	ldr	r3, [r3, #8]
    2a30:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	3304      	adds	r3, #4
    2a36:	f107 020c 	add.w	r2, r7, #12
    2a3a:	4611      	mov	r1, r2
    2a3c:	4618      	mov	r0, r3
    2a3e:	4b05      	ldr	r3, [pc, #20]	; (2a54 <spi_m_sync_transfer+0x60>)
    2a40:	4798      	blx	r3
    2a42:	4603      	mov	r3, r0
}
    2a44:	4618      	mov	r0, r3
    2a46:	3718      	adds	r7, #24
    2a48:	46bd      	mov	sp, r7
    2a4a:	bd80      	pop	{r7, pc}
    2a4c:	00010894 	.word	0x00010894
    2a50:	000038e1 	.word	0x000038e1
    2a54:	00006ced 	.word	0x00006ced

00002a58 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2a58:	b580      	push	{r7, lr}
    2a5a:	b082      	sub	sp, #8
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	6078      	str	r0, [r7, #4]
    2a60:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2a62:	687b      	ldr	r3, [r7, #4]
    2a64:	2b00      	cmp	r3, #0
    2a66:	d004      	beq.n	2a72 <spi_m_sync_get_io_descriptor+0x1a>
    2a68:	683b      	ldr	r3, [r7, #0]
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d001      	beq.n	2a72 <spi_m_sync_get_io_descriptor+0x1a>
    2a6e:	2301      	movs	r3, #1
    2a70:	e000      	b.n	2a74 <spi_m_sync_get_io_descriptor+0x1c>
    2a72:	2300      	movs	r3, #0
    2a74:	f003 0301 	and.w	r3, r3, #1
    2a78:	b2db      	uxtb	r3, r3
    2a7a:	22bd      	movs	r2, #189	; 0xbd
    2a7c:	4906      	ldr	r1, [pc, #24]	; (2a98 <spi_m_sync_get_io_descriptor+0x40>)
    2a7e:	4618      	mov	r0, r3
    2a80:	4b06      	ldr	r3, [pc, #24]	; (2a9c <spi_m_sync_get_io_descriptor+0x44>)
    2a82:	4798      	blx	r3
	*io = &spi->io;
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	f103 020c 	add.w	r2, r3, #12
    2a8a:	683b      	ldr	r3, [r7, #0]
    2a8c:	601a      	str	r2, [r3, #0]
	return 0;
    2a8e:	2300      	movs	r3, #0
}
    2a90:	4618      	mov	r0, r3
    2a92:	3708      	adds	r7, #8
    2a94:	46bd      	mov	sp, r7
    2a96:	bd80      	pop	{r7, pc}
    2a98:	00010894 	.word	0x00010894
    2a9c:	000038e1 	.word	0x000038e1

00002aa0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2aa0:	b480      	push	{r7}
    2aa2:	b083      	sub	sp, #12
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	681b      	ldr	r3, [r3, #0]
}
    2aac:	4618      	mov	r0, r3
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab6:	4770      	bx	lr

00002ab8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2ab8:	b480      	push	{r7}
    2aba:	b083      	sub	sp, #12
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2ac0:	687b      	ldr	r3, [r7, #4]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d002      	beq.n	2acc <list_get_next_element+0x14>
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	e000      	b.n	2ace <list_get_next_element+0x16>
    2acc:	2300      	movs	r3, #0
}
    2ace:	4618      	mov	r0, r3
    2ad0:	370c      	adds	r7, #12
    2ad2:	46bd      	mov	sp, r7
    2ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ad8:	4770      	bx	lr
	...

00002adc <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2adc:	b580      	push	{r7, lr}
    2ade:	b084      	sub	sp, #16
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	60f8      	str	r0, [r7, #12]
    2ae4:	60b9      	str	r1, [r7, #8]
    2ae6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d007      	beq.n	2afe <timer_init+0x22>
    2aee:	68bb      	ldr	r3, [r7, #8]
    2af0:	2b00      	cmp	r3, #0
    2af2:	d004      	beq.n	2afe <timer_init+0x22>
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	2b00      	cmp	r3, #0
    2af8:	d001      	beq.n	2afe <timer_init+0x22>
    2afa:	2301      	movs	r3, #1
    2afc:	e000      	b.n	2b00 <timer_init+0x24>
    2afe:	2300      	movs	r3, #0
    2b00:	f003 0301 	and.w	r3, r3, #1
    2b04:	b2db      	uxtb	r3, r3
    2b06:	223b      	movs	r2, #59	; 0x3b
    2b08:	490c      	ldr	r1, [pc, #48]	; (2b3c <timer_init+0x60>)
    2b0a:	4618      	mov	r0, r3
    2b0c:	4b0c      	ldr	r3, [pc, #48]	; (2b40 <timer_init+0x64>)
    2b0e:	4798      	blx	r3
	descr->func = func;
    2b10:	68fb      	ldr	r3, [r7, #12]
    2b12:	687a      	ldr	r2, [r7, #4]
    2b14:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2b16:	68fb      	ldr	r3, [r7, #12]
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	68fa      	ldr	r2, [r7, #12]
    2b1e:	3204      	adds	r2, #4
    2b20:	68b9      	ldr	r1, [r7, #8]
    2b22:	4610      	mov	r0, r2
    2b24:	4798      	blx	r3
	descr->time                           = 0;
    2b26:	68fb      	ldr	r3, [r7, #12]
    2b28:	2200      	movs	r2, #0
    2b2a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	4a05      	ldr	r2, [pc, #20]	; (2b44 <timer_init+0x68>)
    2b30:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2b32:	2300      	movs	r3, #0
}
    2b34:	4618      	mov	r0, r3
    2b36:	3710      	adds	r7, #16
    2b38:	46bd      	mov	sp, r7
    2b3a:	bd80      	pop	{r7, pc}
    2b3c:	000108b0 	.word	0x000108b0
    2b40:	000038e1 	.word	0x000038e1
    2b44:	00002ecd 	.word	0x00002ecd

00002b48 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	b082      	sub	sp, #8
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2b50:	687b      	ldr	r3, [r7, #4]
    2b52:	2b00      	cmp	r3, #0
    2b54:	d005      	beq.n	2b62 <timer_start+0x1a>
    2b56:	687b      	ldr	r3, [r7, #4]
    2b58:	681b      	ldr	r3, [r3, #0]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d001      	beq.n	2b62 <timer_start+0x1a>
    2b5e:	2301      	movs	r3, #1
    2b60:	e000      	b.n	2b64 <timer_start+0x1c>
    2b62:	2300      	movs	r3, #0
    2b64:	f003 0301 	and.w	r3, r3, #1
    2b68:	b2db      	uxtb	r3, r3
    2b6a:	2254      	movs	r2, #84	; 0x54
    2b6c:	490e      	ldr	r1, [pc, #56]	; (2ba8 <timer_start+0x60>)
    2b6e:	4618      	mov	r0, r3
    2b70:	4b0e      	ldr	r3, [pc, #56]	; (2bac <timer_start+0x64>)
    2b72:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	681b      	ldr	r3, [r3, #0]
    2b78:	699b      	ldr	r3, [r3, #24]
    2b7a:	687a      	ldr	r2, [r7, #4]
    2b7c:	3204      	adds	r2, #4
    2b7e:	4610      	mov	r0, r2
    2b80:	4798      	blx	r3
    2b82:	4603      	mov	r3, r0
    2b84:	2b00      	cmp	r3, #0
    2b86:	d002      	beq.n	2b8e <timer_start+0x46>
		return ERR_DENIED;
    2b88:	f06f 0310 	mvn.w	r3, #16
    2b8c:	e007      	b.n	2b9e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	681b      	ldr	r3, [r3, #0]
    2b92:	689b      	ldr	r3, [r3, #8]
    2b94:	687a      	ldr	r2, [r7, #4]
    2b96:	3204      	adds	r2, #4
    2b98:	4610      	mov	r0, r2
    2b9a:	4798      	blx	r3

	return ERR_NONE;
    2b9c:	2300      	movs	r3, #0
}
    2b9e:	4618      	mov	r0, r3
    2ba0:	3708      	adds	r7, #8
    2ba2:	46bd      	mov	sp, r7
    2ba4:	bd80      	pop	{r7, pc}
    2ba6:	bf00      	nop
    2ba8:	000108b0 	.word	0x000108b0
    2bac:	000038e1 	.word	0x000038e1

00002bb0 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	b082      	sub	sp, #8
    2bb4:	af00      	add	r7, sp, #0
    2bb6:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d005      	beq.n	2bca <timer_stop+0x1a>
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	681b      	ldr	r3, [r3, #0]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d001      	beq.n	2bca <timer_stop+0x1a>
    2bc6:	2301      	movs	r3, #1
    2bc8:	e000      	b.n	2bcc <timer_stop+0x1c>
    2bca:	2300      	movs	r3, #0
    2bcc:	f003 0301 	and.w	r3, r3, #1
    2bd0:	b2db      	uxtb	r3, r3
    2bd2:	2262      	movs	r2, #98	; 0x62
    2bd4:	490f      	ldr	r1, [pc, #60]	; (2c14 <timer_stop+0x64>)
    2bd6:	4618      	mov	r0, r3
    2bd8:	4b0f      	ldr	r3, [pc, #60]	; (2c18 <timer_stop+0x68>)
    2bda:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	681b      	ldr	r3, [r3, #0]
    2be0:	699b      	ldr	r3, [r3, #24]
    2be2:	687a      	ldr	r2, [r7, #4]
    2be4:	3204      	adds	r2, #4
    2be6:	4610      	mov	r0, r2
    2be8:	4798      	blx	r3
    2bea:	4603      	mov	r3, r0
    2bec:	f083 0301 	eor.w	r3, r3, #1
    2bf0:	b2db      	uxtb	r3, r3
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d002      	beq.n	2bfc <timer_stop+0x4c>
		return ERR_DENIED;
    2bf6:	f06f 0310 	mvn.w	r3, #16
    2bfa:	e007      	b.n	2c0c <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	681b      	ldr	r3, [r3, #0]
    2c00:	68db      	ldr	r3, [r3, #12]
    2c02:	687a      	ldr	r2, [r7, #4]
    2c04:	3204      	adds	r2, #4
    2c06:	4610      	mov	r0, r2
    2c08:	4798      	blx	r3

	return ERR_NONE;
    2c0a:	2300      	movs	r3, #0
}
    2c0c:	4618      	mov	r0, r3
    2c0e:	3708      	adds	r7, #8
    2c10:	46bd      	mov	sp, r7
    2c12:	bd80      	pop	{r7, pc}
    2c14:	000108b0 	.word	0x000108b0
    2c18:	000038e1 	.word	0x000038e1

00002c1c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2c1c:	b580      	push	{r7, lr}
    2c1e:	b084      	sub	sp, #16
    2c20:	af00      	add	r7, sp, #0
    2c22:	6078      	str	r0, [r7, #4]
    2c24:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d008      	beq.n	2c3e <timer_add_task+0x22>
    2c2c:	683b      	ldr	r3, [r7, #0]
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d005      	beq.n	2c3e <timer_add_task+0x22>
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	681b      	ldr	r3, [r3, #0]
    2c36:	2b00      	cmp	r3, #0
    2c38:	d001      	beq.n	2c3e <timer_add_task+0x22>
    2c3a:	2301      	movs	r3, #1
    2c3c:	e000      	b.n	2c40 <timer_add_task+0x24>
    2c3e:	2300      	movs	r3, #0
    2c40:	f003 0301 	and.w	r3, r3, #1
    2c44:	b2db      	uxtb	r3, r3
    2c46:	227b      	movs	r2, #123	; 0x7b
    2c48:	492f      	ldr	r1, [pc, #188]	; (2d08 <timer_add_task+0xec>)
    2c4a:	4618      	mov	r0, r3
    2c4c:	4b2f      	ldr	r3, [pc, #188]	; (2d0c <timer_add_task+0xf0>)
    2c4e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	7f1b      	ldrb	r3, [r3, #28]
    2c54:	b2db      	uxtb	r3, r3
    2c56:	f043 0301 	orr.w	r3, r3, #1
    2c5a:	b2da      	uxtb	r2, r3
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2c60:	687b      	ldr	r3, [r7, #4]
    2c62:	3318      	adds	r3, #24
    2c64:	6839      	ldr	r1, [r7, #0]
    2c66:	4618      	mov	r0, r3
    2c68:	4b29      	ldr	r3, [pc, #164]	; (2d10 <timer_add_task+0xf4>)
    2c6a:	4798      	blx	r3
    2c6c:	4603      	mov	r3, r0
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d00f      	beq.n	2c92 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	7f1b      	ldrb	r3, [r3, #28]
    2c76:	b2db      	uxtb	r3, r3
    2c78:	f023 0301 	bic.w	r3, r3, #1
    2c7c:	b2da      	uxtb	r2, r3
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2c82:	2280      	movs	r2, #128	; 0x80
    2c84:	4920      	ldr	r1, [pc, #128]	; (2d08 <timer_add_task+0xec>)
    2c86:	2000      	movs	r0, #0
    2c88:	4b20      	ldr	r3, [pc, #128]	; (2d0c <timer_add_task+0xf0>)
    2c8a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2c8c:	f06f 0311 	mvn.w	r3, #17
    2c90:	e035      	b.n	2cfe <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	695a      	ldr	r2, [r3, #20]
    2c96:	683b      	ldr	r3, [r7, #0]
    2c98:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2c9a:	687b      	ldr	r3, [r7, #4]
    2c9c:	f103 0018 	add.w	r0, r3, #24
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	695b      	ldr	r3, [r3, #20]
    2ca4:	461a      	mov	r2, r3
    2ca6:	6839      	ldr	r1, [r7, #0]
    2ca8:	4b1a      	ldr	r3, [pc, #104]	; (2d14 <timer_add_task+0xf8>)
    2caa:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	7f1b      	ldrb	r3, [r3, #28]
    2cb0:	b2db      	uxtb	r3, r3
    2cb2:	f023 0301 	bic.w	r3, r3, #1
    2cb6:	b2da      	uxtb	r2, r3
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	7f1b      	ldrb	r3, [r3, #28]
    2cc0:	b2db      	uxtb	r3, r3
    2cc2:	f003 0302 	and.w	r3, r3, #2
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d018      	beq.n	2cfc <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2cca:	f107 030c 	add.w	r3, r7, #12
    2cce:	4618      	mov	r0, r3
    2cd0:	4b11      	ldr	r3, [pc, #68]	; (2d18 <timer_add_task+0xfc>)
    2cd2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	7f1b      	ldrb	r3, [r3, #28]
    2cd8:	b2db      	uxtb	r3, r3
    2cda:	f023 0302 	bic.w	r3, r3, #2
    2cde:	b2da      	uxtb	r2, r3
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	69db      	ldr	r3, [r3, #28]
    2cea:	687a      	ldr	r2, [r7, #4]
    2cec:	3204      	adds	r2, #4
    2cee:	4610      	mov	r0, r2
    2cf0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2cf2:	f107 030c 	add.w	r3, r7, #12
    2cf6:	4618      	mov	r0, r3
    2cf8:	4b08      	ldr	r3, [pc, #32]	; (2d1c <timer_add_task+0x100>)
    2cfa:	4798      	blx	r3
	}

	return ERR_NONE;
    2cfc:	2300      	movs	r3, #0
}
    2cfe:	4618      	mov	r0, r3
    2d00:	3710      	adds	r7, #16
    2d02:	46bd      	mov	sp, r7
    2d04:	bd80      	pop	{r7, pc}
    2d06:	bf00      	nop
    2d08:	000108b0 	.word	0x000108b0
    2d0c:	000038e1 	.word	0x000038e1
    2d10:	00003909 	.word	0x00003909
    2d14:	00002e1d 	.word	0x00002e1d
    2d18:	0000b0c9 	.word	0x0000b0c9
    2d1c:	0000b0ef 	.word	0x0000b0ef

00002d20 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b084      	sub	sp, #16
    2d24:	af00      	add	r7, sp, #0
    2d26:	6078      	str	r0, [r7, #4]
    2d28:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2d2a:	687b      	ldr	r3, [r7, #4]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d008      	beq.n	2d42 <timer_remove_task+0x22>
    2d30:	683b      	ldr	r3, [r7, #0]
    2d32:	2b00      	cmp	r3, #0
    2d34:	d005      	beq.n	2d42 <timer_remove_task+0x22>
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	681b      	ldr	r3, [r3, #0]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d001      	beq.n	2d42 <timer_remove_task+0x22>
    2d3e:	2301      	movs	r3, #1
    2d40:	e000      	b.n	2d44 <timer_remove_task+0x24>
    2d42:	2300      	movs	r3, #0
    2d44:	f003 0301 	and.w	r3, r3, #1
    2d48:	b2db      	uxtb	r3, r3
    2d4a:	2296      	movs	r2, #150	; 0x96
    2d4c:	492d      	ldr	r1, [pc, #180]	; (2e04 <timer_remove_task+0xe4>)
    2d4e:	4618      	mov	r0, r3
    2d50:	4b2d      	ldr	r3, [pc, #180]	; (2e08 <timer_remove_task+0xe8>)
    2d52:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	7f1b      	ldrb	r3, [r3, #28]
    2d58:	b2db      	uxtb	r3, r3
    2d5a:	f043 0301 	orr.w	r3, r3, #1
    2d5e:	b2da      	uxtb	r2, r3
    2d60:	687b      	ldr	r3, [r7, #4]
    2d62:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	3318      	adds	r3, #24
    2d68:	6839      	ldr	r1, [r7, #0]
    2d6a:	4618      	mov	r0, r3
    2d6c:	4b27      	ldr	r3, [pc, #156]	; (2e0c <timer_remove_task+0xec>)
    2d6e:	4798      	blx	r3
    2d70:	4603      	mov	r3, r0
    2d72:	f083 0301 	eor.w	r3, r3, #1
    2d76:	b2db      	uxtb	r3, r3
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d00f      	beq.n	2d9c <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	7f1b      	ldrb	r3, [r3, #28]
    2d80:	b2db      	uxtb	r3, r3
    2d82:	f023 0301 	bic.w	r3, r3, #1
    2d86:	b2da      	uxtb	r2, r3
    2d88:	687b      	ldr	r3, [r7, #4]
    2d8a:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2d8c:	229b      	movs	r2, #155	; 0x9b
    2d8e:	491d      	ldr	r1, [pc, #116]	; (2e04 <timer_remove_task+0xe4>)
    2d90:	2000      	movs	r0, #0
    2d92:	4b1d      	ldr	r3, [pc, #116]	; (2e08 <timer_remove_task+0xe8>)
    2d94:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2d96:	f06f 0309 	mvn.w	r3, #9
    2d9a:	e02e      	b.n	2dfa <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	3318      	adds	r3, #24
    2da0:	6839      	ldr	r1, [r7, #0]
    2da2:	4618      	mov	r0, r3
    2da4:	4b1a      	ldr	r3, [pc, #104]	; (2e10 <timer_remove_task+0xf0>)
    2da6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	7f1b      	ldrb	r3, [r3, #28]
    2dac:	b2db      	uxtb	r3, r3
    2dae:	f023 0301 	bic.w	r3, r3, #1
    2db2:	b2da      	uxtb	r2, r3
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	7f1b      	ldrb	r3, [r3, #28]
    2dbc:	b2db      	uxtb	r3, r3
    2dbe:	f003 0302 	and.w	r3, r3, #2
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d018      	beq.n	2df8 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2dc6:	f107 030c 	add.w	r3, r7, #12
    2dca:	4618      	mov	r0, r3
    2dcc:	4b11      	ldr	r3, [pc, #68]	; (2e14 <timer_remove_task+0xf4>)
    2dce:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	7f1b      	ldrb	r3, [r3, #28]
    2dd4:	b2db      	uxtb	r3, r3
    2dd6:	f023 0302 	bic.w	r3, r3, #2
    2dda:	b2da      	uxtb	r2, r3
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2de0:	687b      	ldr	r3, [r7, #4]
    2de2:	681b      	ldr	r3, [r3, #0]
    2de4:	69db      	ldr	r3, [r3, #28]
    2de6:	687a      	ldr	r2, [r7, #4]
    2de8:	3204      	adds	r2, #4
    2dea:	4610      	mov	r0, r2
    2dec:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2dee:	f107 030c 	add.w	r3, r7, #12
    2df2:	4618      	mov	r0, r3
    2df4:	4b08      	ldr	r3, [pc, #32]	; (2e18 <timer_remove_task+0xf8>)
    2df6:	4798      	blx	r3
	}

	return ERR_NONE;
    2df8:	2300      	movs	r3, #0
}
    2dfa:	4618      	mov	r0, r3
    2dfc:	3710      	adds	r7, #16
    2dfe:	46bd      	mov	sp, r7
    2e00:	bd80      	pop	{r7, pc}
    2e02:	bf00      	nop
    2e04:	000108b0 	.word	0x000108b0
    2e08:	000038e1 	.word	0x000038e1
    2e0c:	00003909 	.word	0x00003909
    2e10:	00003a6b 	.word	0x00003a6b
    2e14:	0000b0c9 	.word	0x0000b0c9
    2e18:	0000b0ef 	.word	0x0000b0ef

00002e1c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b088      	sub	sp, #32
    2e20:	af00      	add	r7, sp, #0
    2e22:	60f8      	str	r0, [r7, #12]
    2e24:	60b9      	str	r1, [r7, #8]
    2e26:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2e28:	2300      	movs	r3, #0
    2e2a:	61bb      	str	r3, [r7, #24]
    2e2c:	68f8      	ldr	r0, [r7, #12]
    2e2e:	4b23      	ldr	r3, [pc, #140]	; (2ebc <timer_add_timer_task+0xa0>)
    2e30:	4798      	blx	r3
    2e32:	6138      	str	r0, [r7, #16]

	if (!head) {
    2e34:	693b      	ldr	r3, [r7, #16]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d104      	bne.n	2e44 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2e3a:	68b9      	ldr	r1, [r7, #8]
    2e3c:	68f8      	ldr	r0, [r7, #12]
    2e3e:	4b20      	ldr	r3, [pc, #128]	; (2ec0 <timer_add_timer_task+0xa4>)
    2e40:	4798      	blx	r3
		return;
    2e42:	e037      	b.n	2eb4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e44:	693b      	ldr	r3, [r7, #16]
    2e46:	61fb      	str	r3, [r7, #28]
    2e48:	e022      	b.n	2e90 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2e4a:	69fb      	ldr	r3, [r7, #28]
    2e4c:	685a      	ldr	r2, [r3, #4]
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	429a      	cmp	r2, r3
    2e52:	d808      	bhi.n	2e66 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2e54:	69fb      	ldr	r3, [r7, #28]
    2e56:	689a      	ldr	r2, [r3, #8]
    2e58:	69fb      	ldr	r3, [r7, #28]
    2e5a:	6859      	ldr	r1, [r3, #4]
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	1acb      	subs	r3, r1, r3
    2e60:	4413      	add	r3, r2
    2e62:	617b      	str	r3, [r7, #20]
    2e64:	e009      	b.n	2e7a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2e66:	69fb      	ldr	r3, [r7, #28]
    2e68:	689a      	ldr	r2, [r3, #8]
    2e6a:	69fb      	ldr	r3, [r7, #28]
    2e6c:	685b      	ldr	r3, [r3, #4]
    2e6e:	441a      	add	r2, r3
    2e70:	687b      	ldr	r3, [r7, #4]
    2e72:	425b      	negs	r3, r3
    2e74:	4413      	add	r3, r2
    2e76:	3301      	adds	r3, #1
    2e78:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2e7a:	68bb      	ldr	r3, [r7, #8]
    2e7c:	689a      	ldr	r2, [r3, #8]
    2e7e:	697b      	ldr	r3, [r7, #20]
    2e80:	429a      	cmp	r2, r3
    2e82:	d909      	bls.n	2e98 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2e84:	69fb      	ldr	r3, [r7, #28]
    2e86:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e88:	69f8      	ldr	r0, [r7, #28]
    2e8a:	4b0e      	ldr	r3, [pc, #56]	; (2ec4 <timer_add_timer_task+0xa8>)
    2e8c:	4798      	blx	r3
    2e8e:	61f8      	str	r0, [r7, #28]
    2e90:	69fb      	ldr	r3, [r7, #28]
    2e92:	2b00      	cmp	r3, #0
    2e94:	d1d9      	bne.n	2e4a <timer_add_timer_task+0x2e>
    2e96:	e000      	b.n	2e9a <timer_add_timer_task+0x7e>
			break;
    2e98:	bf00      	nop
	}

	if (it == head) {
    2e9a:	69fa      	ldr	r2, [r7, #28]
    2e9c:	693b      	ldr	r3, [r7, #16]
    2e9e:	429a      	cmp	r2, r3
    2ea0:	d104      	bne.n	2eac <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2ea2:	68b9      	ldr	r1, [r7, #8]
    2ea4:	68f8      	ldr	r0, [r7, #12]
    2ea6:	4b06      	ldr	r3, [pc, #24]	; (2ec0 <timer_add_timer_task+0xa4>)
    2ea8:	4798      	blx	r3
    2eaa:	e003      	b.n	2eb4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2eac:	68b9      	ldr	r1, [r7, #8]
    2eae:	69b8      	ldr	r0, [r7, #24]
    2eb0:	4b05      	ldr	r3, [pc, #20]	; (2ec8 <timer_add_timer_task+0xac>)
    2eb2:	4798      	blx	r3
	}
}
    2eb4:	3720      	adds	r7, #32
    2eb6:	46bd      	mov	sp, r7
    2eb8:	bd80      	pop	{r7, pc}
    2eba:	bf00      	nop
    2ebc:	00002aa1 	.word	0x00002aa1
    2ec0:	00003941 	.word	0x00003941
    2ec4:	00002ab9 	.word	0x00002ab9
    2ec8:	00003999 	.word	0x00003999

00002ecc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	b086      	sub	sp, #24
    2ed0:	af00      	add	r7, sp, #0
    2ed2:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	3b04      	subs	r3, #4
    2ed8:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2eda:	693b      	ldr	r3, [r7, #16]
    2edc:	3318      	adds	r3, #24
    2ede:	4618      	mov	r0, r3
    2ee0:	4b27      	ldr	r3, [pc, #156]	; (2f80 <timer_process_counted+0xb4>)
    2ee2:	4798      	blx	r3
    2ee4:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2ee6:	693b      	ldr	r3, [r7, #16]
    2ee8:	695b      	ldr	r3, [r3, #20]
    2eea:	1c5a      	adds	r2, r3, #1
    2eec:	693b      	ldr	r3, [r7, #16]
    2eee:	615a      	str	r2, [r3, #20]
    2ef0:	693b      	ldr	r3, [r7, #16]
    2ef2:	695b      	ldr	r3, [r3, #20]
    2ef4:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2ef6:	693b      	ldr	r3, [r7, #16]
    2ef8:	7f1b      	ldrb	r3, [r3, #28]
    2efa:	b2db      	uxtb	r3, r3
    2efc:	f003 0301 	and.w	r3, r3, #1
    2f00:	2b00      	cmp	r3, #0
    2f02:	d106      	bne.n	2f12 <timer_process_counted+0x46>
    2f04:	693b      	ldr	r3, [r7, #16]
    2f06:	7f1b      	ldrb	r3, [r3, #28]
    2f08:	b2db      	uxtb	r3, r3
    2f0a:	f003 0302 	and.w	r3, r3, #2
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d027      	beq.n	2f62 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2f12:	693b      	ldr	r3, [r7, #16]
    2f14:	7f1b      	ldrb	r3, [r3, #28]
    2f16:	b2db      	uxtb	r3, r3
    2f18:	f043 0302 	orr.w	r3, r3, #2
    2f1c:	b2da      	uxtb	r2, r3
    2f1e:	693b      	ldr	r3, [r7, #16]
    2f20:	771a      	strb	r2, [r3, #28]
		return;
    2f22:	e029      	b.n	2f78 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2f24:	697b      	ldr	r3, [r7, #20]
    2f26:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2f28:	693b      	ldr	r3, [r7, #16]
    2f2a:	3318      	adds	r3, #24
    2f2c:	4618      	mov	r0, r3
    2f2e:	4b15      	ldr	r3, [pc, #84]	; (2f84 <timer_process_counted+0xb8>)
    2f30:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2f32:	68bb      	ldr	r3, [r7, #8]
    2f34:	7c1b      	ldrb	r3, [r3, #16]
    2f36:	2b01      	cmp	r3, #1
    2f38:	d109      	bne.n	2f4e <timer_process_counted+0x82>
			tmp->time_label = time;
    2f3a:	68bb      	ldr	r3, [r7, #8]
    2f3c:	68fa      	ldr	r2, [r7, #12]
    2f3e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2f40:	693b      	ldr	r3, [r7, #16]
    2f42:	3318      	adds	r3, #24
    2f44:	68fa      	ldr	r2, [r7, #12]
    2f46:	68b9      	ldr	r1, [r7, #8]
    2f48:	4618      	mov	r0, r3
    2f4a:	4b0f      	ldr	r3, [pc, #60]	; (2f88 <timer_process_counted+0xbc>)
    2f4c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2f4e:	693b      	ldr	r3, [r7, #16]
    2f50:	3318      	adds	r3, #24
    2f52:	4618      	mov	r0, r3
    2f54:	4b0a      	ldr	r3, [pc, #40]	; (2f80 <timer_process_counted+0xb4>)
    2f56:	4798      	blx	r3
    2f58:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2f5a:	68bb      	ldr	r3, [r7, #8]
    2f5c:	68db      	ldr	r3, [r3, #12]
    2f5e:	68b8      	ldr	r0, [r7, #8]
    2f60:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2f62:	697b      	ldr	r3, [r7, #20]
    2f64:	2b00      	cmp	r3, #0
    2f66:	d007      	beq.n	2f78 <timer_process_counted+0xac>
    2f68:	697b      	ldr	r3, [r7, #20]
    2f6a:	685b      	ldr	r3, [r3, #4]
    2f6c:	68fa      	ldr	r2, [r7, #12]
    2f6e:	1ad2      	subs	r2, r2, r3
    2f70:	697b      	ldr	r3, [r7, #20]
    2f72:	689b      	ldr	r3, [r3, #8]
    2f74:	429a      	cmp	r2, r3
    2f76:	d2d5      	bcs.n	2f24 <timer_process_counted+0x58>
	}
}
    2f78:	3718      	adds	r7, #24
    2f7a:	46bd      	mov	sp, r7
    2f7c:	bd80      	pop	{r7, pc}
    2f7e:	bf00      	nop
    2f80:	00002aa1 	.word	0x00002aa1
    2f84:	00003a39 	.word	0x00003a39
    2f88:	00002e1d 	.word	0x00002e1d

00002f8c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2f8c:	b480      	push	{r7}
    2f8e:	b085      	sub	sp, #20
    2f90:	af00      	add	r7, sp, #0
    2f92:	4603      	mov	r3, r0
    2f94:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f96:	2300      	movs	r3, #0
    2f98:	73fb      	strb	r3, [r7, #15]
    2f9a:	e029      	b.n	2ff0 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fa0:	4a19      	ldr	r2, [pc, #100]	; (3008 <_usb_d_find_ep+0x7c>)
    2fa2:	015b      	lsls	r3, r3, #5
    2fa4:	4413      	add	r3, r2
    2fa6:	3301      	adds	r3, #1
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	79fa      	ldrb	r2, [r7, #7]
    2fac:	429a      	cmp	r2, r3
    2fae:	d102      	bne.n	2fb6 <_usb_d_find_ep+0x2a>
			return i;
    2fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fb4:	e022      	b.n	2ffc <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fba:	4a13      	ldr	r2, [pc, #76]	; (3008 <_usb_d_find_ep+0x7c>)
    2fbc:	015b      	lsls	r3, r3, #5
    2fbe:	4413      	add	r3, r2
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d10e      	bne.n	2fe4 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2fc6:	79fb      	ldrb	r3, [r7, #7]
    2fc8:	f003 030f 	and.w	r3, r3, #15
    2fcc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2fd0:	490d      	ldr	r1, [pc, #52]	; (3008 <_usb_d_find_ep+0x7c>)
    2fd2:	0152      	lsls	r2, r2, #5
    2fd4:	440a      	add	r2, r1
    2fd6:	3201      	adds	r2, #1
    2fd8:	7812      	ldrb	r2, [r2, #0]
    2fda:	4293      	cmp	r3, r2
    2fdc:	d102      	bne.n	2fe4 <_usb_d_find_ep+0x58>
			return i;
    2fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fe2:	e00b      	b.n	2ffc <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fe8:	b2db      	uxtb	r3, r3
    2fea:	3301      	adds	r3, #1
    2fec:	b2db      	uxtb	r3, r3
    2fee:	73fb      	strb	r3, [r7, #15]
    2ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ff4:	2b03      	cmp	r3, #3
    2ff6:	ddd1      	ble.n	2f9c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
    2ffc:	4618      	mov	r0, r3
    2ffe:	3714      	adds	r7, #20
    3000:	46bd      	mov	sp, r7
    3002:	f85d 7b04 	ldr.w	r7, [sp], #4
    3006:	4770      	bx	lr
    3008:	20000adc 	.word	0x20000adc

0000300c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    300c:	b580      	push	{r7, lr}
    300e:	b088      	sub	sp, #32
    3010:	af00      	add	r7, sp, #0
    3012:	60ba      	str	r2, [r7, #8]
    3014:	607b      	str	r3, [r7, #4]
    3016:	4603      	mov	r3, r0
    3018:	73fb      	strb	r3, [r7, #15]
    301a:	460b      	mov	r3, r1
    301c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    301e:	68bb      	ldr	r3, [r7, #8]
    3020:	617b      	str	r3, [r7, #20]
    3022:	687b      	ldr	r3, [r7, #4]
    3024:	61bb      	str	r3, [r7, #24]
    3026:	7bbb      	ldrb	r3, [r7, #14]
    3028:	2b00      	cmp	r3, #0
    302a:	d004      	beq.n	3036 <_usb_d_trans+0x2a>
    302c:	7bfb      	ldrb	r3, [r7, #15]
    302e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3032:	b2db      	uxtb	r3, r3
    3034:	e003      	b.n	303e <_usb_d_trans+0x32>
    3036:	7bfb      	ldrb	r3, [r7, #15]
    3038:	f003 030f 	and.w	r3, r3, #15
    303c:	b2db      	uxtb	r3, r3
    303e:	773b      	strb	r3, [r7, #28]
    3040:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3044:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3046:	f107 0314 	add.w	r3, r7, #20
    304a:	4618      	mov	r0, r3
    304c:	4b03      	ldr	r3, [pc, #12]	; (305c <_usb_d_trans+0x50>)
    304e:	4798      	blx	r3
    3050:	4603      	mov	r3, r0
}
    3052:	4618      	mov	r0, r3
    3054:	3720      	adds	r7, #32
    3056:	46bd      	mov	sp, r7
    3058:	bd80      	pop	{r7, pc}
    305a:	bf00      	nop
    305c:	0000a6fd 	.word	0x0000a6fd

00003060 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3060:	b480      	push	{r7}
    3062:	b085      	sub	sp, #20
    3064:	af00      	add	r7, sp, #0
    3066:	60f8      	str	r0, [r7, #12]
    3068:	60b9      	str	r1, [r7, #8]
    306a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    306c:	2300      	movs	r3, #0
}
    306e:	4618      	mov	r0, r3
    3070:	3714      	adds	r7, #20
    3072:	46bd      	mov	sp, r7
    3074:	f85d 7b04 	ldr.w	r7, [sp], #4
    3078:	4770      	bx	lr
	...

0000307c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    307c:	b580      	push	{r7, lr}
    307e:	b086      	sub	sp, #24
    3080:	af00      	add	r7, sp, #0
    3082:	4603      	mov	r3, r0
    3084:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3086:	79fb      	ldrb	r3, [r7, #7]
    3088:	4618      	mov	r0, r3
    308a:	4b2a      	ldr	r3, [pc, #168]	; (3134 <usb_d_cb_trans_setup+0xb8>)
    308c:	4798      	blx	r3
    308e:	4603      	mov	r3, r0
    3090:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3092:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3096:	015b      	lsls	r3, r3, #5
    3098:	4a27      	ldr	r2, [pc, #156]	; (3138 <usb_d_cb_trans_setup+0xbc>)
    309a:	4413      	add	r3, r2
    309c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    309e:	693b      	ldr	r3, [r7, #16]
    30a0:	330c      	adds	r3, #12
    30a2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    30a4:	79fb      	ldrb	r3, [r7, #7]
    30a6:	68f9      	ldr	r1, [r7, #12]
    30a8:	4618      	mov	r0, r3
    30aa:	4b24      	ldr	r3, [pc, #144]	; (313c <usb_d_cb_trans_setup+0xc0>)
    30ac:	4798      	blx	r3
    30ae:	4603      	mov	r3, r0
    30b0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    30b2:	7afb      	ldrb	r3, [r7, #11]
    30b4:	2b08      	cmp	r3, #8
    30b6:	d00d      	beq.n	30d4 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    30b8:	79fb      	ldrb	r3, [r7, #7]
    30ba:	2101      	movs	r1, #1
    30bc:	4618      	mov	r0, r3
    30be:	4b20      	ldr	r3, [pc, #128]	; (3140 <usb_d_cb_trans_setup+0xc4>)
    30c0:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    30c2:	79fb      	ldrb	r3, [r7, #7]
    30c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30c8:	b2db      	uxtb	r3, r3
    30ca:	2101      	movs	r1, #1
    30cc:	4618      	mov	r0, r3
    30ce:	4b1c      	ldr	r3, [pc, #112]	; (3140 <usb_d_cb_trans_setup+0xc4>)
    30d0:	4798      	blx	r3
		return;
    30d2:	e02b      	b.n	312c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    30d4:	79fb      	ldrb	r3, [r7, #7]
    30d6:	2100      	movs	r1, #0
    30d8:	4618      	mov	r0, r3
    30da:	4b19      	ldr	r3, [pc, #100]	; (3140 <usb_d_cb_trans_setup+0xc4>)
    30dc:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    30de:	79fb      	ldrb	r3, [r7, #7]
    30e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30e4:	b2db      	uxtb	r3, r3
    30e6:	2100      	movs	r1, #0
    30e8:	4618      	mov	r0, r3
    30ea:	4b15      	ldr	r3, [pc, #84]	; (3140 <usb_d_cb_trans_setup+0xc4>)
    30ec:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    30ee:	693b      	ldr	r3, [r7, #16]
    30f0:	2201      	movs	r2, #1
    30f2:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    30f4:	693b      	ldr	r3, [r7, #16]
    30f6:	695b      	ldr	r3, [r3, #20]
    30f8:	79fa      	ldrb	r2, [r7, #7]
    30fa:	68f9      	ldr	r1, [r7, #12]
    30fc:	4610      	mov	r0, r2
    30fe:	4798      	blx	r3
    3100:	4603      	mov	r3, r0
    3102:	f083 0301 	eor.w	r3, r3, #1
    3106:	b2db      	uxtb	r3, r3
    3108:	2b00      	cmp	r3, #0
    310a:	d00f      	beq.n	312c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    310c:	693b      	ldr	r3, [r7, #16]
    310e:	2205      	movs	r2, #5
    3110:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3112:	79fb      	ldrb	r3, [r7, #7]
    3114:	2101      	movs	r1, #1
    3116:	4618      	mov	r0, r3
    3118:	4b09      	ldr	r3, [pc, #36]	; (3140 <usb_d_cb_trans_setup+0xc4>)
    311a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    311c:	79fb      	ldrb	r3, [r7, #7]
    311e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3122:	b2db      	uxtb	r3, r3
    3124:	2101      	movs	r1, #1
    3126:	4618      	mov	r0, r3
    3128:	4b05      	ldr	r3, [pc, #20]	; (3140 <usb_d_cb_trans_setup+0xc4>)
    312a:	4798      	blx	r3
	}
}
    312c:	3718      	adds	r7, #24
    312e:	46bd      	mov	sp, r7
    3130:	bd80      	pop	{r7, pc}
    3132:	bf00      	nop
    3134:	00002f8d 	.word	0x00002f8d
    3138:	20000adc 	.word	0x20000adc
    313c:	0000a655 	.word	0x0000a655
    3140:	0000a4cd 	.word	0x0000a4cd

00003144 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3144:	b580      	push	{r7, lr}
    3146:	b084      	sub	sp, #16
    3148:	af00      	add	r7, sp, #0
    314a:	4603      	mov	r3, r0
    314c:	6039      	str	r1, [r7, #0]
    314e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3150:	79fb      	ldrb	r3, [r7, #7]
    3152:	4618      	mov	r0, r3
    3154:	4b0d      	ldr	r3, [pc, #52]	; (318c <usb_d_cb_trans_more+0x48>)
    3156:	4798      	blx	r3
    3158:	4603      	mov	r3, r0
    315a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    315c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3160:	015b      	lsls	r3, r3, #5
    3162:	4a0b      	ldr	r2, [pc, #44]	; (3190 <usb_d_cb_trans_more+0x4c>)
    3164:	4413      	add	r3, r2
    3166:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3168:	68bb      	ldr	r3, [r7, #8]
    316a:	789b      	ldrb	r3, [r3, #2]
    316c:	2b03      	cmp	r3, #3
    316e:	d107      	bne.n	3180 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3170:	68bb      	ldr	r3, [r7, #8]
    3172:	699b      	ldr	r3, [r3, #24]
    3174:	79fa      	ldrb	r2, [r7, #7]
    3176:	6839      	ldr	r1, [r7, #0]
    3178:	4610      	mov	r0, r2
    317a:	4798      	blx	r3
    317c:	4603      	mov	r3, r0
    317e:	e000      	b.n	3182 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3180:	2300      	movs	r3, #0
}
    3182:	4618      	mov	r0, r3
    3184:	3710      	adds	r7, #16
    3186:	46bd      	mov	sp, r7
    3188:	bd80      	pop	{r7, pc}
    318a:	bf00      	nop
    318c:	00002f8d 	.word	0x00002f8d
    3190:	20000adc 	.word	0x20000adc

00003194 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3194:	b590      	push	{r4, r7, lr}
    3196:	b087      	sub	sp, #28
    3198:	af02      	add	r7, sp, #8
    319a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	789b      	ldrb	r3, [r3, #2]
    31a0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	7b1b      	ldrb	r3, [r3, #12]
    31a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    31aa:	2b00      	cmp	r3, #0
    31ac:	bf14      	ite	ne
    31ae:	2301      	movne	r3, #1
    31b0:	2300      	moveq	r3, #0
    31b2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    31b4:	7bfb      	ldrb	r3, [r7, #15]
    31b6:	2b03      	cmp	r3, #3
    31b8:	d13a      	bne.n	3230 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	69db      	ldr	r3, [r3, #28]
    31be:	687a      	ldr	r2, [r7, #4]
    31c0:	7850      	ldrb	r0, [r2, #1]
    31c2:	687a      	ldr	r2, [r7, #4]
    31c4:	320c      	adds	r2, #12
    31c6:	2101      	movs	r1, #1
    31c8:	4798      	blx	r3
    31ca:	4603      	mov	r3, r0
    31cc:	737b      	strb	r3, [r7, #13]
		if (err) {
    31ce:	7b7b      	ldrb	r3, [r7, #13]
    31d0:	2b00      	cmp	r3, #0
    31d2:	d015      	beq.n	3200 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	2205      	movs	r2, #5
    31d8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	2202      	movs	r2, #2
    31de:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    31e0:	7bbb      	ldrb	r3, [r7, #14]
    31e2:	2b00      	cmp	r3, #0
    31e4:	d002      	beq.n	31ec <usb_d_ctrl_trans_done+0x58>
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	785b      	ldrb	r3, [r3, #1]
    31ea:	e004      	b.n	31f6 <usb_d_ctrl_trans_done+0x62>
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	785b      	ldrb	r3, [r3, #1]
    31f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    31f4:	b2db      	uxtb	r3, r3
    31f6:	2101      	movs	r1, #1
    31f8:	4618      	mov	r0, r3
    31fa:	4b15      	ldr	r3, [pc, #84]	; (3250 <usb_d_ctrl_trans_done+0xbc>)
    31fc:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    31fe:	e022      	b.n	3246 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	2204      	movs	r2, #4
    3204:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3206:	687b      	ldr	r3, [r7, #4]
    3208:	7858      	ldrb	r0, [r3, #1]
    320a:	7bbb      	ldrb	r3, [r7, #14]
    320c:	2b00      	cmp	r3, #0
    320e:	bf14      	ite	ne
    3210:	2301      	movne	r3, #1
    3212:	2300      	moveq	r3, #0
    3214:	b2db      	uxtb	r3, r3
    3216:	f083 0301 	eor.w	r3, r3, #1
    321a:	b2db      	uxtb	r3, r3
    321c:	f003 0301 	and.w	r3, r3, #1
    3220:	b2d9      	uxtb	r1, r3
    3222:	2301      	movs	r3, #1
    3224:	9300      	str	r3, [sp, #0]
    3226:	2300      	movs	r3, #0
    3228:	2200      	movs	r2, #0
    322a:	4c0a      	ldr	r4, [pc, #40]	; (3254 <usb_d_ctrl_trans_done+0xc0>)
    322c:	47a0      	blx	r4
}
    322e:	e00a      	b.n	3246 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	69db      	ldr	r3, [r3, #28]
    3234:	687a      	ldr	r2, [r7, #4]
    3236:	7850      	ldrb	r0, [r2, #1]
    3238:	687a      	ldr	r2, [r7, #4]
    323a:	320c      	adds	r2, #12
    323c:	2100      	movs	r1, #0
    323e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	2202      	movs	r2, #2
    3244:	709a      	strb	r2, [r3, #2]
}
    3246:	bf00      	nop
    3248:	3714      	adds	r7, #20
    324a:	46bd      	mov	sp, r7
    324c:	bd90      	pop	{r4, r7, pc}
    324e:	bf00      	nop
    3250:	0000a4cd 	.word	0x0000a4cd
    3254:	0000300d 	.word	0x0000300d

00003258 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3258:	b580      	push	{r7, lr}
    325a:	b086      	sub	sp, #24
    325c:	af00      	add	r7, sp, #0
    325e:	4603      	mov	r3, r0
    3260:	60b9      	str	r1, [r7, #8]
    3262:	607a      	str	r2, [r7, #4]
    3264:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3266:	7bfb      	ldrb	r3, [r7, #15]
    3268:	4618      	mov	r0, r3
    326a:	4b2f      	ldr	r3, [pc, #188]	; (3328 <_usb_d_cb_trans_done+0xd0>)
    326c:	4798      	blx	r3
    326e:	4603      	mov	r3, r0
    3270:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3272:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3276:	015b      	lsls	r3, r3, #5
    3278:	4a2c      	ldr	r2, [pc, #176]	; (332c <_usb_d_cb_trans_done+0xd4>)
    327a:	4413      	add	r3, r2
    327c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    327e:	68bb      	ldr	r3, [r7, #8]
    3280:	2b00      	cmp	r3, #0
    3282:	d10e      	bne.n	32a2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3284:	693b      	ldr	r3, [r7, #16]
    3286:	2200      	movs	r2, #0
    3288:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    328a:	693b      	ldr	r3, [r7, #16]
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	2b00      	cmp	r3, #0
    3290:	d103      	bne.n	329a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3292:	6938      	ldr	r0, [r7, #16]
    3294:	4b26      	ldr	r3, [pc, #152]	; (3330 <_usb_d_cb_trans_done+0xd8>)
    3296:	4798      	blx	r3
			return;
    3298:	e043      	b.n	3322 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    329a:	693b      	ldr	r3, [r7, #16]
    329c:	2201      	movs	r2, #1
    329e:	709a      	strb	r2, [r3, #2]
    32a0:	e038      	b.n	3314 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    32a2:	68bb      	ldr	r3, [r7, #8]
    32a4:	2b01      	cmp	r3, #1
    32a6:	d113      	bne.n	32d0 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    32a8:	693b      	ldr	r3, [r7, #16]
    32aa:	2202      	movs	r2, #2
    32ac:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32ae:	693b      	ldr	r3, [r7, #16]
    32b0:	781b      	ldrb	r3, [r3, #0]
    32b2:	2b00      	cmp	r3, #0
    32b4:	d108      	bne.n	32c8 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    32b6:	693b      	ldr	r3, [r7, #16]
    32b8:	2202      	movs	r2, #2
    32ba:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    32bc:	7bfb      	ldrb	r3, [r7, #15]
    32be:	2100      	movs	r1, #0
    32c0:	4618      	mov	r0, r3
    32c2:	4b1c      	ldr	r3, [pc, #112]	; (3334 <_usb_d_cb_trans_done+0xdc>)
    32c4:	4798      	blx	r3
    32c6:	e025      	b.n	3314 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    32c8:	693b      	ldr	r3, [r7, #16]
    32ca:	2205      	movs	r2, #5
    32cc:	709a      	strb	r2, [r3, #2]
    32ce:	e021      	b.n	3314 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    32d0:	68bb      	ldr	r3, [r7, #8]
    32d2:	2b02      	cmp	r3, #2
    32d4:	d10e      	bne.n	32f4 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    32d6:	693b      	ldr	r3, [r7, #16]
    32d8:	2204      	movs	r2, #4
    32da:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32dc:	693b      	ldr	r3, [r7, #16]
    32de:	781b      	ldrb	r3, [r3, #0]
    32e0:	2b00      	cmp	r3, #0
    32e2:	d103      	bne.n	32ec <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    32e4:	693b      	ldr	r3, [r7, #16]
    32e6:	2202      	movs	r2, #2
    32e8:	709a      	strb	r2, [r3, #2]
			return;
    32ea:	e01a      	b.n	3322 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    32ec:	693b      	ldr	r3, [r7, #16]
    32ee:	2201      	movs	r2, #1
    32f0:	709a      	strb	r2, [r3, #2]
    32f2:	e00f      	b.n	3314 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    32f4:	68bb      	ldr	r3, [r7, #8]
    32f6:	2b03      	cmp	r3, #3
    32f8:	d106      	bne.n	3308 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    32fa:	693b      	ldr	r3, [r7, #16]
    32fc:	2200      	movs	r2, #0
    32fe:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3300:	693b      	ldr	r3, [r7, #16]
    3302:	2205      	movs	r2, #5
    3304:	70da      	strb	r2, [r3, #3]
    3306:	e005      	b.n	3314 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3308:	693b      	ldr	r3, [r7, #16]
    330a:	2206      	movs	r2, #6
    330c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    330e:	693b      	ldr	r3, [r7, #16]
    3310:	2206      	movs	r2, #6
    3312:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3314:	693b      	ldr	r3, [r7, #16]
    3316:	69db      	ldr	r3, [r3, #28]
    3318:	693a      	ldr	r2, [r7, #16]
    331a:	78d1      	ldrb	r1, [r2, #3]
    331c:	687a      	ldr	r2, [r7, #4]
    331e:	7bf8      	ldrb	r0, [r7, #15]
    3320:	4798      	blx	r3
}
    3322:	3718      	adds	r7, #24
    3324:	46bd      	mov	sp, r7
    3326:	bd80      	pop	{r7, pc}
    3328:	00002f8d 	.word	0x00002f8d
    332c:	20000adc 	.word	0x20000adc
    3330:	00003195 	.word	0x00003195
    3334:	0000a4cd 	.word	0x0000a4cd

00003338 <usb_d_init>:

int32_t usb_d_init(void)
{
    3338:	b580      	push	{r7, lr}
    333a:	b082      	sub	sp, #8
    333c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    333e:	4b21      	ldr	r3, [pc, #132]	; (33c4 <usb_d_init+0x8c>)
    3340:	4798      	blx	r3
    3342:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3344:	683b      	ldr	r3, [r7, #0]
    3346:	2b00      	cmp	r3, #0
    3348:	da01      	bge.n	334e <usb_d_init+0x16>
		return rc;
    334a:	683b      	ldr	r3, [r7, #0]
    334c:	e036      	b.n	33bc <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    334e:	2280      	movs	r2, #128	; 0x80
    3350:	2100      	movs	r1, #0
    3352:	481d      	ldr	r0, [pc, #116]	; (33c8 <usb_d_init+0x90>)
    3354:	4b1d      	ldr	r3, [pc, #116]	; (33cc <usb_d_init+0x94>)
    3356:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3358:	2300      	movs	r3, #0
    335a:	71fb      	strb	r3, [r7, #7]
    335c:	e01e      	b.n	339c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    335e:	79fb      	ldrb	r3, [r7, #7]
    3360:	4a19      	ldr	r2, [pc, #100]	; (33c8 <usb_d_init+0x90>)
    3362:	015b      	lsls	r3, r3, #5
    3364:	4413      	add	r3, r2
    3366:	3301      	adds	r3, #1
    3368:	22ff      	movs	r2, #255	; 0xff
    336a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    336c:	79fb      	ldrb	r3, [r7, #7]
    336e:	4a16      	ldr	r2, [pc, #88]	; (33c8 <usb_d_init+0x90>)
    3370:	015b      	lsls	r3, r3, #5
    3372:	4413      	add	r3, r2
    3374:	3314      	adds	r3, #20
    3376:	4a16      	ldr	r2, [pc, #88]	; (33d0 <usb_d_init+0x98>)
    3378:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    337a:	79fb      	ldrb	r3, [r7, #7]
    337c:	4a12      	ldr	r2, [pc, #72]	; (33c8 <usb_d_init+0x90>)
    337e:	015b      	lsls	r3, r3, #5
    3380:	4413      	add	r3, r2
    3382:	3318      	adds	r3, #24
    3384:	4a12      	ldr	r2, [pc, #72]	; (33d0 <usb_d_init+0x98>)
    3386:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3388:	79fb      	ldrb	r3, [r7, #7]
    338a:	4a0f      	ldr	r2, [pc, #60]	; (33c8 <usb_d_init+0x90>)
    338c:	015b      	lsls	r3, r3, #5
    338e:	4413      	add	r3, r2
    3390:	331c      	adds	r3, #28
    3392:	4a0f      	ldr	r2, [pc, #60]	; (33d0 <usb_d_init+0x98>)
    3394:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3396:	79fb      	ldrb	r3, [r7, #7]
    3398:	3301      	adds	r3, #1
    339a:	71fb      	strb	r3, [r7, #7]
    339c:	79fb      	ldrb	r3, [r7, #7]
    339e:	2b03      	cmp	r3, #3
    33a0:	d9dd      	bls.n	335e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    33a2:	490c      	ldr	r1, [pc, #48]	; (33d4 <usb_d_init+0x9c>)
    33a4:	2000      	movs	r0, #0
    33a6:	4b0c      	ldr	r3, [pc, #48]	; (33d8 <usb_d_init+0xa0>)
    33a8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    33aa:	490c      	ldr	r1, [pc, #48]	; (33dc <usb_d_init+0xa4>)
    33ac:	2001      	movs	r0, #1
    33ae:	4b0a      	ldr	r3, [pc, #40]	; (33d8 <usb_d_init+0xa0>)
    33b0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    33b2:	490b      	ldr	r1, [pc, #44]	; (33e0 <usb_d_init+0xa8>)
    33b4:	2002      	movs	r0, #2
    33b6:	4b08      	ldr	r3, [pc, #32]	; (33d8 <usb_d_init+0xa0>)
    33b8:	4798      	blx	r3
	return ERR_NONE;
    33ba:	2300      	movs	r3, #0
}
    33bc:	4618      	mov	r0, r3
    33be:	3708      	adds	r7, #8
    33c0:	46bd      	mov	sp, r7
    33c2:	bd80      	pop	{r7, pc}
    33c4:	00009d15 	.word	0x00009d15
    33c8:	20000adc 	.word	0x20000adc
    33cc:	000103c9 	.word	0x000103c9
    33d0:	00003061 	.word	0x00003061
    33d4:	0000307d 	.word	0x0000307d
    33d8:	0000a95d 	.word	0x0000a95d
    33dc:	00003145 	.word	0x00003145
    33e0:	00003259 	.word	0x00003259

000033e4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	b082      	sub	sp, #8
    33e8:	af00      	add	r7, sp, #0
    33ea:	4603      	mov	r3, r0
    33ec:	6039      	str	r1, [r7, #0]
    33ee:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    33f0:	79fb      	ldrb	r3, [r7, #7]
    33f2:	6839      	ldr	r1, [r7, #0]
    33f4:	4618      	mov	r0, r3
    33f6:	4b03      	ldr	r3, [pc, #12]	; (3404 <usb_d_register_callback+0x20>)
    33f8:	4798      	blx	r3
}
    33fa:	bf00      	nop
    33fc:	3708      	adds	r7, #8
    33fe:	46bd      	mov	sp, r7
    3400:	bd80      	pop	{r7, pc}
    3402:	bf00      	nop
    3404:	0000a915 	.word	0x0000a915

00003408 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3408:	b580      	push	{r7, lr}
    340a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    340c:	4b02      	ldr	r3, [pc, #8]	; (3418 <usb_d_enable+0x10>)
    340e:	4798      	blx	r3
    3410:	4603      	mov	r3, r0
}
    3412:	4618      	mov	r0, r3
    3414:	bd80      	pop	{r7, pc}
    3416:	bf00      	nop
    3418:	00009e05 	.word	0x00009e05

0000341c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    341c:	b580      	push	{r7, lr}
    341e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3420:	4b01      	ldr	r3, [pc, #4]	; (3428 <usb_d_attach+0xc>)
    3422:	4798      	blx	r3
}
    3424:	bf00      	nop
    3426:	bd80      	pop	{r7, pc}
    3428:	00009e89 	.word	0x00009e89

0000342c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    342c:	b580      	push	{r7, lr}
    342e:	b082      	sub	sp, #8
    3430:	af00      	add	r7, sp, #0
    3432:	4603      	mov	r3, r0
    3434:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3436:	79fb      	ldrb	r3, [r7, #7]
    3438:	4618      	mov	r0, r3
    343a:	4b03      	ldr	r3, [pc, #12]	; (3448 <usb_d_set_address+0x1c>)
    343c:	4798      	blx	r3
}
    343e:	bf00      	nop
    3440:	3708      	adds	r7, #8
    3442:	46bd      	mov	sp, r7
    3444:	bd80      	pop	{r7, pc}
    3446:	bf00      	nop
    3448:	00009e9d 	.word	0x00009e9d

0000344c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    344c:	b580      	push	{r7, lr}
    344e:	b082      	sub	sp, #8
    3450:	af00      	add	r7, sp, #0
    3452:	4603      	mov	r3, r0
    3454:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3456:	79fb      	ldrb	r3, [r7, #7]
    3458:	b29b      	uxth	r3, r3
    345a:	461a      	mov	r2, r3
    345c:	2100      	movs	r1, #0
    345e:	2000      	movs	r0, #0
    3460:	4b03      	ldr	r3, [pc, #12]	; (3470 <usb_d_ep0_init+0x24>)
    3462:	4798      	blx	r3
    3464:	4603      	mov	r3, r0
}
    3466:	4618      	mov	r0, r3
    3468:	3708      	adds	r7, #8
    346a:	46bd      	mov	sp, r7
    346c:	bd80      	pop	{r7, pc}
    346e:	bf00      	nop
    3470:	00003475 	.word	0x00003475

00003474 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3474:	b580      	push	{r7, lr}
    3476:	b086      	sub	sp, #24
    3478:	af00      	add	r7, sp, #0
    347a:	4603      	mov	r3, r0
    347c:	71fb      	strb	r3, [r7, #7]
    347e:	460b      	mov	r3, r1
    3480:	71bb      	strb	r3, [r7, #6]
    3482:	4613      	mov	r3, r2
    3484:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3486:	79fb      	ldrb	r3, [r7, #7]
    3488:	4618      	mov	r0, r3
    348a:	4b1e      	ldr	r3, [pc, #120]	; (3504 <usb_d_ep_init+0x90>)
    348c:	4798      	blx	r3
    348e:	4603      	mov	r3, r0
    3490:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3492:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3496:	015b      	lsls	r3, r3, #5
    3498:	4a1b      	ldr	r2, [pc, #108]	; (3508 <usb_d_ep_init+0x94>)
    349a:	4413      	add	r3, r2
    349c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34a2:	2b00      	cmp	r3, #0
    34a4:	db02      	blt.n	34ac <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    34a6:	f06f 0313 	mvn.w	r3, #19
    34aa:	e027      	b.n	34fc <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    34ac:	20ff      	movs	r0, #255	; 0xff
    34ae:	4b15      	ldr	r3, [pc, #84]	; (3504 <usb_d_ep_init+0x90>)
    34b0:	4798      	blx	r3
    34b2:	4603      	mov	r3, r0
    34b4:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    34b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34ba:	2b00      	cmp	r3, #0
    34bc:	da02      	bge.n	34c4 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    34be:	f06f 0314 	mvn.w	r3, #20
    34c2:	e01b      	b.n	34fc <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    34c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34c8:	015b      	lsls	r3, r3, #5
    34ca:	4a0f      	ldr	r2, [pc, #60]	; (3508 <usb_d_ep_init+0x94>)
    34cc:	4413      	add	r3, r2
    34ce:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    34d0:	88ba      	ldrh	r2, [r7, #4]
    34d2:	79b9      	ldrb	r1, [r7, #6]
    34d4:	79fb      	ldrb	r3, [r7, #7]
    34d6:	4618      	mov	r0, r3
    34d8:	4b0c      	ldr	r3, [pc, #48]	; (350c <usb_d_ep_init+0x98>)
    34da:	4798      	blx	r3
    34dc:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    34de:	68fb      	ldr	r3, [r7, #12]
    34e0:	2b00      	cmp	r3, #0
    34e2:	da01      	bge.n	34e8 <usb_d_ep_init+0x74>
		return rc;
    34e4:	68fb      	ldr	r3, [r7, #12]
    34e6:	e009      	b.n	34fc <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    34e8:	693b      	ldr	r3, [r7, #16]
    34ea:	79fa      	ldrb	r2, [r7, #7]
    34ec:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    34ee:	79bb      	ldrb	r3, [r7, #6]
    34f0:	f003 0303 	and.w	r3, r3, #3
    34f4:	b2da      	uxtb	r2, r3
    34f6:	693b      	ldr	r3, [r7, #16]
    34f8:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    34fa:	2300      	movs	r3, #0
}
    34fc:	4618      	mov	r0, r3
    34fe:	3718      	adds	r7, #24
    3500:	46bd      	mov	sp, r7
    3502:	bd80      	pop	{r7, pc}
    3504:	00002f8d 	.word	0x00002f8d
    3508:	20000adc 	.word	0x20000adc
    350c:	00009f3d 	.word	0x00009f3d

00003510 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3510:	b580      	push	{r7, lr}
    3512:	b084      	sub	sp, #16
    3514:	af00      	add	r7, sp, #0
    3516:	4603      	mov	r3, r0
    3518:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    351a:	79fb      	ldrb	r3, [r7, #7]
    351c:	4618      	mov	r0, r3
    351e:	4b0d      	ldr	r3, [pc, #52]	; (3554 <usb_d_ep_deinit+0x44>)
    3520:	4798      	blx	r3
    3522:	4603      	mov	r3, r0
    3524:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3526:	f997 300f 	ldrsb.w	r3, [r7, #15]
    352a:	015b      	lsls	r3, r3, #5
    352c:	4a0a      	ldr	r2, [pc, #40]	; (3558 <usb_d_ep_deinit+0x48>)
    352e:	4413      	add	r3, r2
    3530:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3532:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3536:	2b00      	cmp	r3, #0
    3538:	db07      	blt.n	354a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    353a:	79fb      	ldrb	r3, [r7, #7]
    353c:	4618      	mov	r0, r3
    353e:	4b07      	ldr	r3, [pc, #28]	; (355c <usb_d_ep_deinit+0x4c>)
    3540:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3542:	68bb      	ldr	r3, [r7, #8]
    3544:	22ff      	movs	r2, #255	; 0xff
    3546:	705a      	strb	r2, [r3, #1]
    3548:	e000      	b.n	354c <usb_d_ep_deinit+0x3c>
		return;
    354a:	bf00      	nop
}
    354c:	3710      	adds	r7, #16
    354e:	46bd      	mov	sp, r7
    3550:	bd80      	pop	{r7, pc}
    3552:	bf00      	nop
    3554:	00002f8d 	.word	0x00002f8d
    3558:	20000adc 	.word	0x20000adc
    355c:	0000a071 	.word	0x0000a071

00003560 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3560:	b580      	push	{r7, lr}
    3562:	b086      	sub	sp, #24
    3564:	af00      	add	r7, sp, #0
    3566:	4603      	mov	r3, r0
    3568:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    356a:	79fb      	ldrb	r3, [r7, #7]
    356c:	4618      	mov	r0, r3
    356e:	4b15      	ldr	r3, [pc, #84]	; (35c4 <usb_d_ep_enable+0x64>)
    3570:	4798      	blx	r3
    3572:	4603      	mov	r3, r0
    3574:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3576:	f997 3017 	ldrsb.w	r3, [r7, #23]
    357a:	015b      	lsls	r3, r3, #5
    357c:	4a12      	ldr	r2, [pc, #72]	; (35c8 <usb_d_ep_enable+0x68>)
    357e:	4413      	add	r3, r2
    3580:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3582:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3586:	2b00      	cmp	r3, #0
    3588:	da02      	bge.n	3590 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    358a:	f06f 0311 	mvn.w	r3, #17
    358e:	e014      	b.n	35ba <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3590:	693b      	ldr	r3, [r7, #16]
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	2b00      	cmp	r3, #0
    3596:	d101      	bne.n	359c <usb_d_ep_enable+0x3c>
    3598:	2202      	movs	r2, #2
    359a:	e000      	b.n	359e <usb_d_ep_enable+0x3e>
    359c:	2201      	movs	r2, #1
    359e:	693b      	ldr	r3, [r7, #16]
    35a0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    35a2:	79fb      	ldrb	r3, [r7, #7]
    35a4:	4618      	mov	r0, r3
    35a6:	4b09      	ldr	r3, [pc, #36]	; (35cc <usb_d_ep_enable+0x6c>)
    35a8:	4798      	blx	r3
    35aa:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    35ac:	68fb      	ldr	r3, [r7, #12]
    35ae:	2b00      	cmp	r3, #0
    35b0:	da02      	bge.n	35b8 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    35b2:	693b      	ldr	r3, [r7, #16]
    35b4:	2200      	movs	r2, #0
    35b6:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    35b8:	68fb      	ldr	r3, [r7, #12]
}
    35ba:	4618      	mov	r0, r3
    35bc:	3718      	adds	r7, #24
    35be:	46bd      	mov	sp, r7
    35c0:	bd80      	pop	{r7, pc}
    35c2:	bf00      	nop
    35c4:	00002f8d 	.word	0x00002f8d
    35c8:	20000adc 	.word	0x20000adc
    35cc:	0000a155 	.word	0x0000a155

000035d0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    35d0:	b590      	push	{r4, r7, lr}
    35d2:	b08d      	sub	sp, #52	; 0x34
    35d4:	af02      	add	r7, sp, #8
    35d6:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	7a1b      	ldrb	r3, [r3, #8]
    35dc:	4618      	mov	r0, r3
    35de:	4b51      	ldr	r3, [pc, #324]	; (3724 <usb_d_ep_transfer+0x154>)
    35e0:	4798      	blx	r3
    35e2:	4603      	mov	r3, r0
    35e4:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    35e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
    35ea:	015b      	lsls	r3, r3, #5
    35ec:	4a4e      	ldr	r2, [pc, #312]	; (3728 <usb_d_ep_transfer+0x158>)
    35ee:	4413      	add	r3, r2
    35f0:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	7a1b      	ldrb	r3, [r3, #8]
    35f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    35fa:	2b00      	cmp	r3, #0
    35fc:	bf14      	ite	ne
    35fe:	2301      	movne	r3, #1
    3600:	2300      	moveq	r3, #0
    3602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	7a5b      	ldrb	r3, [r3, #9]
    360a:	2b00      	cmp	r3, #0
    360c:	bf14      	ite	ne
    360e:	2301      	movne	r3, #1
    3610:	2300      	moveq	r3, #0
    3612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3616:	687b      	ldr	r3, [r7, #4]
    3618:	685b      	ldr	r3, [r3, #4]
    361a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    361c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3620:	2b00      	cmp	r3, #0
    3622:	da02      	bge.n	362a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3624:	f06f 0311 	mvn.w	r3, #17
    3628:	e077      	b.n	371a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    362a:	f107 0308 	add.w	r3, r7, #8
    362e:	4618      	mov	r0, r3
    3630:	4b3e      	ldr	r3, [pc, #248]	; (372c <usb_d_ep_transfer+0x15c>)
    3632:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3634:	69bb      	ldr	r3, [r7, #24]
    3636:	789b      	ldrb	r3, [r3, #2]
    3638:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    363a:	7bfb      	ldrb	r3, [r7, #15]
    363c:	b2db      	uxtb	r3, r3
    363e:	2b01      	cmp	r3, #1
    3640:	d10c      	bne.n	365c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3642:	69bb      	ldr	r3, [r7, #24]
    3644:	2203      	movs	r2, #3
    3646:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3648:	f107 0308 	add.w	r3, r7, #8
    364c:	4618      	mov	r0, r3
    364e:	4b38      	ldr	r3, [pc, #224]	; (3730 <usb_d_ep_transfer+0x160>)
    3650:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3652:	69bb      	ldr	r3, [r7, #24]
    3654:	781b      	ldrb	r3, [r3, #0]
    3656:	2b00      	cmp	r3, #0
    3658:	d151      	bne.n	36fe <usb_d_ep_transfer+0x12e>
    365a:	e017      	b.n	368c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    365c:	f107 0308 	add.w	r3, r7, #8
    3660:	4618      	mov	r0, r3
    3662:	4b33      	ldr	r3, [pc, #204]	; (3730 <usb_d_ep_transfer+0x160>)
    3664:	4798      	blx	r3
		switch (state) {
    3666:	7bfb      	ldrb	r3, [r7, #15]
    3668:	b2db      	uxtb	r3, r3
    366a:	2b05      	cmp	r3, #5
    366c:	d004      	beq.n	3678 <usb_d_ep_transfer+0xa8>
    366e:	2b06      	cmp	r3, #6
    3670:	d004      	beq.n	367c <usb_d_ep_transfer+0xac>
    3672:	2b00      	cmp	r3, #0
    3674:	d005      	beq.n	3682 <usb_d_ep_transfer+0xb2>
    3676:	e007      	b.n	3688 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3678:	2302      	movs	r3, #2
    367a:	e04e      	b.n	371a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    367c:	f06f 030f 	mvn.w	r3, #15
    3680:	e04b      	b.n	371a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3682:	f06f 0312 	mvn.w	r3, #18
    3686:	e048      	b.n	371a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3688:	2301      	movs	r3, #1
    368a:	e046      	b.n	371a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    368c:	69bb      	ldr	r3, [r7, #24]
    368e:	7c9b      	ldrb	r3, [r3, #18]
    3690:	b29a      	uxth	r2, r3
    3692:	69bb      	ldr	r3, [r7, #24]
    3694:	7cdb      	ldrb	r3, [r3, #19]
    3696:	b29b      	uxth	r3, r3
    3698:	021b      	lsls	r3, r3, #8
    369a:	b29b      	uxth	r3, r3
    369c:	4413      	add	r3, r2
    369e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    36a0:	8afb      	ldrh	r3, [r7, #22]
    36a2:	2b00      	cmp	r3, #0
    36a4:	d10b      	bne.n	36be <usb_d_ep_transfer+0xee>
			dir                 = true;
    36a6:	2301      	movs	r3, #1
    36a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    36ac:	2300      	movs	r3, #0
    36ae:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    36b0:	2301      	movs	r3, #1
    36b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    36b6:	69bb      	ldr	r3, [r7, #24]
    36b8:	2204      	movs	r2, #4
    36ba:	709a      	strb	r2, [r3, #2]
    36bc:	e01f      	b.n	36fe <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    36be:	69bb      	ldr	r3, [r7, #24]
    36c0:	7b1b      	ldrb	r3, [r3, #12]
    36c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    36c6:	2b00      	cmp	r3, #0
    36c8:	bf14      	ite	ne
    36ca:	2301      	movne	r3, #1
    36cc:	2300      	moveq	r3, #0
    36ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    36d2:	8afa      	ldrh	r2, [r7, #22]
    36d4:	6a3b      	ldr	r3, [r7, #32]
    36d6:	429a      	cmp	r2, r3
    36d8:	d201      	bcs.n	36de <usb_d_ep_transfer+0x10e>
				len = req_len;
    36da:	8afb      	ldrh	r3, [r7, #22]
    36dc:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    36de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    36e2:	2b00      	cmp	r3, #0
    36e4:	d008      	beq.n	36f8 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    36e6:	8afa      	ldrh	r2, [r7, #22]
    36e8:	6a3b      	ldr	r3, [r7, #32]
    36ea:	429a      	cmp	r2, r3
    36ec:	bf8c      	ite	hi
    36ee:	2301      	movhi	r3, #1
    36f0:	2300      	movls	r3, #0
    36f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    36f6:	e002      	b.n	36fe <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    36f8:	2300      	movs	r3, #0
    36fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	7a18      	ldrb	r0, [r3, #8]
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	681a      	ldr	r2, [r3, #0]
    3706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    370a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    370e:	9300      	str	r3, [sp, #0]
    3710:	6a3b      	ldr	r3, [r7, #32]
    3712:	4c08      	ldr	r4, [pc, #32]	; (3734 <usb_d_ep_transfer+0x164>)
    3714:	47a0      	blx	r4
    3716:	6138      	str	r0, [r7, #16]
	return rc;
    3718:	693b      	ldr	r3, [r7, #16]
}
    371a:	4618      	mov	r0, r3
    371c:	372c      	adds	r7, #44	; 0x2c
    371e:	46bd      	mov	sp, r7
    3720:	bd90      	pop	{r4, r7, pc}
    3722:	bf00      	nop
    3724:	00002f8d 	.word	0x00002f8d
    3728:	20000adc 	.word	0x20000adc
    372c:	0000b0c9 	.word	0x0000b0c9
    3730:	0000b0ef 	.word	0x0000b0ef
    3734:	0000300d 	.word	0x0000300d

00003738 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3738:	b580      	push	{r7, lr}
    373a:	b084      	sub	sp, #16
    373c:	af00      	add	r7, sp, #0
    373e:	4603      	mov	r3, r0
    3740:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3742:	79fb      	ldrb	r3, [r7, #7]
    3744:	4618      	mov	r0, r3
    3746:	4b0e      	ldr	r3, [pc, #56]	; (3780 <usb_d_ep_abort+0x48>)
    3748:	4798      	blx	r3
    374a:	4603      	mov	r3, r0
    374c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    374e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3752:	015b      	lsls	r3, r3, #5
    3754:	4a0b      	ldr	r2, [pc, #44]	; (3784 <usb_d_ep_abort+0x4c>)
    3756:	4413      	add	r3, r2
    3758:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    375e:	2b00      	cmp	r3, #0
    3760:	db0a      	blt.n	3778 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3762:	79fb      	ldrb	r3, [r7, #7]
    3764:	4618      	mov	r0, r3
    3766:	4b08      	ldr	r3, [pc, #32]	; (3788 <usb_d_ep_abort+0x50>)
    3768:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    376a:	68bb      	ldr	r3, [r7, #8]
    376c:	2201      	movs	r2, #1
    376e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3770:	68bb      	ldr	r3, [r7, #8]
    3772:	2204      	movs	r2, #4
    3774:	70da      	strb	r2, [r3, #3]
    3776:	e000      	b.n	377a <usb_d_ep_abort+0x42>
		return;
    3778:	bf00      	nop
}
    377a:	3710      	adds	r7, #16
    377c:	46bd      	mov	sp, r7
    377e:	bd80      	pop	{r7, pc}
    3780:	00002f8d 	.word	0x00002f8d
    3784:	20000adc 	.word	0x20000adc
    3788:	0000a8c1 	.word	0x0000a8c1

0000378c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    378c:	b580      	push	{r7, lr}
    378e:	b086      	sub	sp, #24
    3790:	af00      	add	r7, sp, #0
    3792:	4603      	mov	r3, r0
    3794:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3796:	79fb      	ldrb	r3, [r7, #7]
    3798:	4618      	mov	r0, r3
    379a:	4b1a      	ldr	r3, [pc, #104]	; (3804 <_usb_d_ep_halt_clr+0x78>)
    379c:	4798      	blx	r3
    379e:	4603      	mov	r3, r0
    37a0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37a6:	015b      	lsls	r3, r3, #5
    37a8:	4a17      	ldr	r2, [pc, #92]	; (3808 <_usb_d_ep_halt_clr+0x7c>)
    37aa:	4413      	add	r3, r2
    37ac:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    37ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37b2:	2b00      	cmp	r3, #0
    37b4:	da02      	bge.n	37bc <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    37b6:	f06f 0311 	mvn.w	r3, #17
    37ba:	e01f      	b.n	37fc <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    37bc:	79fb      	ldrb	r3, [r7, #7]
    37be:	2102      	movs	r1, #2
    37c0:	4618      	mov	r0, r3
    37c2:	4b12      	ldr	r3, [pc, #72]	; (380c <_usb_d_ep_halt_clr+0x80>)
    37c4:	4798      	blx	r3
    37c6:	4603      	mov	r3, r0
    37c8:	2b00      	cmp	r3, #0
    37ca:	d016      	beq.n	37fa <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    37cc:	79fb      	ldrb	r3, [r7, #7]
    37ce:	2100      	movs	r1, #0
    37d0:	4618      	mov	r0, r3
    37d2:	4b0e      	ldr	r3, [pc, #56]	; (380c <_usb_d_ep_halt_clr+0x80>)
    37d4:	4798      	blx	r3
    37d6:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    37d8:	68fb      	ldr	r3, [r7, #12]
    37da:	2b00      	cmp	r3, #0
    37dc:	da01      	bge.n	37e2 <_usb_d_ep_halt_clr+0x56>
			return rc;
    37de:	68fb      	ldr	r3, [r7, #12]
    37e0:	e00c      	b.n	37fc <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    37e2:	693b      	ldr	r3, [r7, #16]
    37e4:	2201      	movs	r2, #1
    37e6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    37e8:	693b      	ldr	r3, [r7, #16]
    37ea:	2203      	movs	r2, #3
    37ec:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    37ee:	693b      	ldr	r3, [r7, #16]
    37f0:	69db      	ldr	r3, [r3, #28]
    37f2:	79f8      	ldrb	r0, [r7, #7]
    37f4:	2200      	movs	r2, #0
    37f6:	2103      	movs	r1, #3
    37f8:	4798      	blx	r3
	}
	return ERR_NONE;
    37fa:	2300      	movs	r3, #0
}
    37fc:	4618      	mov	r0, r3
    37fe:	3718      	adds	r7, #24
    3800:	46bd      	mov	sp, r7
    3802:	bd80      	pop	{r7, pc}
    3804:	00002f8d 	.word	0x00002f8d
    3808:	20000adc 	.word	0x20000adc
    380c:	0000a4cd 	.word	0x0000a4cd

00003810 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3810:	b580      	push	{r7, lr}
    3812:	b082      	sub	sp, #8
    3814:	af00      	add	r7, sp, #0
    3816:	4603      	mov	r3, r0
    3818:	460a      	mov	r2, r1
    381a:	71fb      	strb	r3, [r7, #7]
    381c:	4613      	mov	r3, r2
    381e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3820:	79bb      	ldrb	r3, [r7, #6]
    3822:	2b00      	cmp	r3, #0
    3824:	d105      	bne.n	3832 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3826:	79fb      	ldrb	r3, [r7, #7]
    3828:	4618      	mov	r0, r3
    382a:	4b0c      	ldr	r3, [pc, #48]	; (385c <usb_d_ep_halt+0x4c>)
    382c:	4798      	blx	r3
    382e:	4603      	mov	r3, r0
    3830:	e00f      	b.n	3852 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3832:	79bb      	ldrb	r3, [r7, #6]
    3834:	2b01      	cmp	r3, #1
    3836:	d106      	bne.n	3846 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3838:	79fb      	ldrb	r3, [r7, #7]
    383a:	2101      	movs	r1, #1
    383c:	4618      	mov	r0, r3
    383e:	4b08      	ldr	r3, [pc, #32]	; (3860 <usb_d_ep_halt+0x50>)
    3840:	4798      	blx	r3
    3842:	4603      	mov	r3, r0
    3844:	e005      	b.n	3852 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3846:	79fb      	ldrb	r3, [r7, #7]
    3848:	2102      	movs	r1, #2
    384a:	4618      	mov	r0, r3
    384c:	4b04      	ldr	r3, [pc, #16]	; (3860 <usb_d_ep_halt+0x50>)
    384e:	4798      	blx	r3
    3850:	4603      	mov	r3, r0
	}
}
    3852:	4618      	mov	r0, r3
    3854:	3708      	adds	r7, #8
    3856:	46bd      	mov	sp, r7
    3858:	bd80      	pop	{r7, pc}
    385a:	bf00      	nop
    385c:	0000378d 	.word	0x0000378d
    3860:	0000a4cd 	.word	0x0000a4cd

00003864 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3864:	b580      	push	{r7, lr}
    3866:	b086      	sub	sp, #24
    3868:	af00      	add	r7, sp, #0
    386a:	4603      	mov	r3, r0
    386c:	603a      	str	r2, [r7, #0]
    386e:	71fb      	strb	r3, [r7, #7]
    3870:	460b      	mov	r3, r1
    3872:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3874:	79fb      	ldrb	r3, [r7, #7]
    3876:	4618      	mov	r0, r3
    3878:	4b16      	ldr	r3, [pc, #88]	; (38d4 <usb_d_ep_register_callback+0x70>)
    387a:	4798      	blx	r3
    387c:	4603      	mov	r3, r0
    387e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3880:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3884:	015b      	lsls	r3, r3, #5
    3886:	4a14      	ldr	r2, [pc, #80]	; (38d8 <usb_d_ep_register_callback+0x74>)
    3888:	4413      	add	r3, r2
    388a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    388c:	683b      	ldr	r3, [r7, #0]
    388e:	2b00      	cmp	r3, #0
    3890:	d001      	beq.n	3896 <usb_d_ep_register_callback+0x32>
    3892:	683b      	ldr	r3, [r7, #0]
    3894:	e000      	b.n	3898 <usb_d_ep_register_callback+0x34>
    3896:	4b11      	ldr	r3, [pc, #68]	; (38dc <usb_d_ep_register_callback+0x78>)
    3898:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    389a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    389e:	2b00      	cmp	r3, #0
    38a0:	db13      	blt.n	38ca <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    38a2:	79bb      	ldrb	r3, [r7, #6]
    38a4:	2b01      	cmp	r3, #1
    38a6:	d008      	beq.n	38ba <usb_d_ep_register_callback+0x56>
    38a8:	2b02      	cmp	r3, #2
    38aa:	d00a      	beq.n	38c2 <usb_d_ep_register_callback+0x5e>
    38ac:	2b00      	cmp	r3, #0
    38ae:	d000      	beq.n	38b2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    38b0:	e00c      	b.n	38cc <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    38b2:	693b      	ldr	r3, [r7, #16]
    38b4:	68fa      	ldr	r2, [r7, #12]
    38b6:	615a      	str	r2, [r3, #20]
		break;
    38b8:	e008      	b.n	38cc <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    38ba:	693b      	ldr	r3, [r7, #16]
    38bc:	68fa      	ldr	r2, [r7, #12]
    38be:	619a      	str	r2, [r3, #24]
		break;
    38c0:	e004      	b.n	38cc <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    38c2:	693b      	ldr	r3, [r7, #16]
    38c4:	68fa      	ldr	r2, [r7, #12]
    38c6:	61da      	str	r2, [r3, #28]
		break;
    38c8:	e000      	b.n	38cc <usb_d_ep_register_callback+0x68>
		return;
    38ca:	bf00      	nop
	}
}
    38cc:	3718      	adds	r7, #24
    38ce:	46bd      	mov	sp, r7
    38d0:	bd80      	pop	{r7, pc}
    38d2:	bf00      	nop
    38d4:	00002f8d 	.word	0x00002f8d
    38d8:	20000adc 	.word	0x20000adc
    38dc:	00003061 	.word	0x00003061

000038e0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    38e0:	b480      	push	{r7}
    38e2:	b085      	sub	sp, #20
    38e4:	af00      	add	r7, sp, #0
    38e6:	4603      	mov	r3, r0
    38e8:	60b9      	str	r1, [r7, #8]
    38ea:	607a      	str	r2, [r7, #4]
    38ec:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    38ee:	7bfb      	ldrb	r3, [r7, #15]
    38f0:	f083 0301 	eor.w	r3, r3, #1
    38f4:	b2db      	uxtb	r3, r3
    38f6:	2b00      	cmp	r3, #0
    38f8:	d000      	beq.n	38fc <assert+0x1c>
		__asm("BKPT #0");
    38fa:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    38fc:	bf00      	nop
    38fe:	3714      	adds	r7, #20
    3900:	46bd      	mov	sp, r7
    3902:	f85d 7b04 	ldr.w	r7, [sp], #4
    3906:	4770      	bx	lr

00003908 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3908:	b480      	push	{r7}
    390a:	b085      	sub	sp, #20
    390c:	af00      	add	r7, sp, #0
    390e:	6078      	str	r0, [r7, #4]
    3910:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	681b      	ldr	r3, [r3, #0]
    3916:	60fb      	str	r3, [r7, #12]
    3918:	e008      	b.n	392c <is_list_element+0x24>
		if (it == element) {
    391a:	68fa      	ldr	r2, [r7, #12]
    391c:	683b      	ldr	r3, [r7, #0]
    391e:	429a      	cmp	r2, r3
    3920:	d101      	bne.n	3926 <is_list_element+0x1e>
			return true;
    3922:	2301      	movs	r3, #1
    3924:	e006      	b.n	3934 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	681b      	ldr	r3, [r3, #0]
    392a:	60fb      	str	r3, [r7, #12]
    392c:	68fb      	ldr	r3, [r7, #12]
    392e:	2b00      	cmp	r3, #0
    3930:	d1f3      	bne.n	391a <is_list_element+0x12>
		}
	}

	return false;
    3932:	2300      	movs	r3, #0
}
    3934:	4618      	mov	r0, r3
    3936:	3714      	adds	r7, #20
    3938:	46bd      	mov	sp, r7
    393a:	f85d 7b04 	ldr.w	r7, [sp], #4
    393e:	4770      	bx	lr

00003940 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3940:	b580      	push	{r7, lr}
    3942:	b082      	sub	sp, #8
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
    3948:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    394a:	6839      	ldr	r1, [r7, #0]
    394c:	6878      	ldr	r0, [r7, #4]
    394e:	4b0f      	ldr	r3, [pc, #60]	; (398c <list_insert_as_head+0x4c>)
    3950:	4798      	blx	r3
    3952:	4603      	mov	r3, r0
    3954:	2b00      	cmp	r3, #0
    3956:	bf14      	ite	ne
    3958:	2301      	movne	r3, #1
    395a:	2300      	moveq	r3, #0
    395c:	b2db      	uxtb	r3, r3
    395e:	f083 0301 	eor.w	r3, r3, #1
    3962:	b2db      	uxtb	r3, r3
    3964:	f003 0301 	and.w	r3, r3, #1
    3968:	b2db      	uxtb	r3, r3
    396a:	2239      	movs	r2, #57	; 0x39
    396c:	4908      	ldr	r1, [pc, #32]	; (3990 <list_insert_as_head+0x50>)
    396e:	4618      	mov	r0, r3
    3970:	4b08      	ldr	r3, [pc, #32]	; (3994 <list_insert_as_head+0x54>)
    3972:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	681a      	ldr	r2, [r3, #0]
    3978:	683b      	ldr	r3, [r7, #0]
    397a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	683a      	ldr	r2, [r7, #0]
    3980:	601a      	str	r2, [r3, #0]
}
    3982:	bf00      	nop
    3984:	3708      	adds	r7, #8
    3986:	46bd      	mov	sp, r7
    3988:	bd80      	pop	{r7, pc}
    398a:	bf00      	nop
    398c:	00003909 	.word	0x00003909
    3990:	000108c8 	.word	0x000108c8
    3994:	000038e1 	.word	0x000038e1

00003998 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3998:	b480      	push	{r7}
    399a:	b083      	sub	sp, #12
    399c:	af00      	add	r7, sp, #0
    399e:	6078      	str	r0, [r7, #4]
    39a0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	681a      	ldr	r2, [r3, #0]
    39a6:	683b      	ldr	r3, [r7, #0]
    39a8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    39aa:	687b      	ldr	r3, [r7, #4]
    39ac:	683a      	ldr	r2, [r7, #0]
    39ae:	601a      	str	r2, [r3, #0]
}
    39b0:	bf00      	nop
    39b2:	370c      	adds	r7, #12
    39b4:	46bd      	mov	sp, r7
    39b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ba:	4770      	bx	lr

000039bc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    39bc:	b580      	push	{r7, lr}
    39be:	b084      	sub	sp, #16
    39c0:	af00      	add	r7, sp, #0
    39c2:	6078      	str	r0, [r7, #4]
    39c4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    39c6:	687b      	ldr	r3, [r7, #4]
    39c8:	681b      	ldr	r3, [r3, #0]
    39ca:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    39cc:	6839      	ldr	r1, [r7, #0]
    39ce:	6878      	ldr	r0, [r7, #4]
    39d0:	4b16      	ldr	r3, [pc, #88]	; (3a2c <list_insert_at_end+0x70>)
    39d2:	4798      	blx	r3
    39d4:	4603      	mov	r3, r0
    39d6:	2b00      	cmp	r3, #0
    39d8:	bf14      	ite	ne
    39da:	2301      	movne	r3, #1
    39dc:	2300      	moveq	r3, #0
    39de:	b2db      	uxtb	r3, r3
    39e0:	f083 0301 	eor.w	r3, r3, #1
    39e4:	b2db      	uxtb	r3, r3
    39e6:	f003 0301 	and.w	r3, r3, #1
    39ea:	b2db      	uxtb	r3, r3
    39ec:	224f      	movs	r2, #79	; 0x4f
    39ee:	4910      	ldr	r1, [pc, #64]	; (3a30 <list_insert_at_end+0x74>)
    39f0:	4618      	mov	r0, r3
    39f2:	4b10      	ldr	r3, [pc, #64]	; (3a34 <list_insert_at_end+0x78>)
    39f4:	4798      	blx	r3

	if (!list->head) {
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	681b      	ldr	r3, [r3, #0]
    39fa:	2b00      	cmp	r3, #0
    39fc:	d109      	bne.n	3a12 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    39fe:	687b      	ldr	r3, [r7, #4]
    3a00:	683a      	ldr	r2, [r7, #0]
    3a02:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3a04:	683b      	ldr	r3, [r7, #0]
    3a06:	2200      	movs	r2, #0
    3a08:	601a      	str	r2, [r3, #0]
		return;
    3a0a:	e00c      	b.n	3a26 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3a0c:	68fb      	ldr	r3, [r7, #12]
    3a0e:	681b      	ldr	r3, [r3, #0]
    3a10:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3a12:	68fb      	ldr	r3, [r7, #12]
    3a14:	681b      	ldr	r3, [r3, #0]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d1f8      	bne.n	3a0c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3a1a:	68fb      	ldr	r3, [r7, #12]
    3a1c:	683a      	ldr	r2, [r7, #0]
    3a1e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3a20:	683b      	ldr	r3, [r7, #0]
    3a22:	2200      	movs	r2, #0
    3a24:	601a      	str	r2, [r3, #0]
}
    3a26:	3710      	adds	r7, #16
    3a28:	46bd      	mov	sp, r7
    3a2a:	bd80      	pop	{r7, pc}
    3a2c:	00003909 	.word	0x00003909
    3a30:	000108c8 	.word	0x000108c8
    3a34:	000038e1 	.word	0x000038e1

00003a38 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3a38:	b480      	push	{r7}
    3a3a:	b085      	sub	sp, #20
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3a40:	687b      	ldr	r3, [r7, #4]
    3a42:	681b      	ldr	r3, [r3, #0]
    3a44:	2b00      	cmp	r3, #0
    3a46:	d009      	beq.n	3a5c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3a4e:	687b      	ldr	r3, [r7, #4]
    3a50:	681b      	ldr	r3, [r3, #0]
    3a52:	681a      	ldr	r2, [r3, #0]
    3a54:	687b      	ldr	r3, [r7, #4]
    3a56:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3a58:	68fb      	ldr	r3, [r7, #12]
    3a5a:	e000      	b.n	3a5e <list_remove_head+0x26>
	}

	return NULL;
    3a5c:	2300      	movs	r3, #0
}
    3a5e:	4618      	mov	r0, r3
    3a60:	3714      	adds	r7, #20
    3a62:	46bd      	mov	sp, r7
    3a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a68:	4770      	bx	lr

00003a6a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3a6a:	b480      	push	{r7}
    3a6c:	b085      	sub	sp, #20
    3a6e:	af00      	add	r7, sp, #0
    3a70:	6078      	str	r0, [r7, #4]
    3a72:	6039      	str	r1, [r7, #0]
	if (!element) {
    3a74:	683b      	ldr	r3, [r7, #0]
    3a76:	2b00      	cmp	r3, #0
    3a78:	d101      	bne.n	3a7e <list_delete_element+0x14>
		return false;
    3a7a:	2300      	movs	r3, #0
    3a7c:	e024      	b.n	3ac8 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	681a      	ldr	r2, [r3, #0]
    3a82:	683b      	ldr	r3, [r7, #0]
    3a84:	429a      	cmp	r2, r3
    3a86:	d106      	bne.n	3a96 <list_delete_element+0x2c>
		list->head = list->head->next;
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	681b      	ldr	r3, [r3, #0]
    3a8c:	681a      	ldr	r2, [r3, #0]
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	601a      	str	r2, [r3, #0]
		return true;
    3a92:	2301      	movs	r3, #1
    3a94:	e018      	b.n	3ac8 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	681b      	ldr	r3, [r3, #0]
    3a9a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3a9c:	e002      	b.n	3aa4 <list_delete_element+0x3a>
			it = it->next;
    3a9e:	68fb      	ldr	r3, [r7, #12]
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3aa4:	68fb      	ldr	r3, [r7, #12]
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d004      	beq.n	3ab4 <list_delete_element+0x4a>
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	681a      	ldr	r2, [r3, #0]
    3aae:	683b      	ldr	r3, [r7, #0]
    3ab0:	429a      	cmp	r2, r3
    3ab2:	d1f4      	bne.n	3a9e <list_delete_element+0x34>
		}
		if (it) {
    3ab4:	68fb      	ldr	r3, [r7, #12]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d005      	beq.n	3ac6 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3aba:	683b      	ldr	r3, [r7, #0]
    3abc:	681a      	ldr	r2, [r3, #0]
    3abe:	68fb      	ldr	r3, [r7, #12]
    3ac0:	601a      	str	r2, [r3, #0]
			return true;
    3ac2:	2301      	movs	r3, #1
    3ac4:	e000      	b.n	3ac8 <list_delete_element+0x5e>
		}
	}

	return false;
    3ac6:	2300      	movs	r3, #0
}
    3ac8:	4618      	mov	r0, r3
    3aca:	3714      	adds	r7, #20
    3acc:	46bd      	mov	sp, r7
    3ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad2:	4770      	bx	lr

00003ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3ad4:	b480      	push	{r7}
    3ad6:	b083      	sub	sp, #12
    3ad8:	af00      	add	r7, sp, #0
    3ada:	4603      	mov	r3, r0
    3adc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	db0b      	blt.n	3afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ae6:	4909      	ldr	r1, [pc, #36]	; (3b0c <__NVIC_EnableIRQ+0x38>)
    3ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3aec:	095b      	lsrs	r3, r3, #5
    3aee:	88fa      	ldrh	r2, [r7, #6]
    3af0:	f002 021f 	and.w	r2, r2, #31
    3af4:	2001      	movs	r0, #1
    3af6:	fa00 f202 	lsl.w	r2, r0, r2
    3afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3afe:	bf00      	nop
    3b00:	370c      	adds	r7, #12
    3b02:	46bd      	mov	sp, r7
    3b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b08:	4770      	bx	lr
    3b0a:	bf00      	nop
    3b0c:	e000e100 	.word	0xe000e100

00003b10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3b10:	b480      	push	{r7}
    3b12:	b083      	sub	sp, #12
    3b14:	af00      	add	r7, sp, #0
    3b16:	4603      	mov	r3, r0
    3b18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	db10      	blt.n	3b44 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b22:	490b      	ldr	r1, [pc, #44]	; (3b50 <__NVIC_DisableIRQ+0x40>)
    3b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b28:	095b      	lsrs	r3, r3, #5
    3b2a:	88fa      	ldrh	r2, [r7, #6]
    3b2c:	f002 021f 	and.w	r2, r2, #31
    3b30:	2001      	movs	r0, #1
    3b32:	fa00 f202 	lsl.w	r2, r0, r2
    3b36:	3320      	adds	r3, #32
    3b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3b3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b40:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3b44:	bf00      	nop
    3b46:	370c      	adds	r7, #12
    3b48:	46bd      	mov	sp, r7
    3b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b4e:	4770      	bx	lr
    3b50:	e000e100 	.word	0xe000e100

00003b54 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3b54:	b480      	push	{r7}
    3b56:	b083      	sub	sp, #12
    3b58:	af00      	add	r7, sp, #0
    3b5a:	4603      	mov	r3, r0
    3b5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b62:	2b00      	cmp	r3, #0
    3b64:	db0c      	blt.n	3b80 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b66:	4909      	ldr	r1, [pc, #36]	; (3b8c <__NVIC_ClearPendingIRQ+0x38>)
    3b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b6c:	095b      	lsrs	r3, r3, #5
    3b6e:	88fa      	ldrh	r2, [r7, #6]
    3b70:	f002 021f 	and.w	r2, r2, #31
    3b74:	2001      	movs	r0, #1
    3b76:	fa00 f202 	lsl.w	r2, r0, r2
    3b7a:	3360      	adds	r3, #96	; 0x60
    3b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b80:	bf00      	nop
    3b82:	370c      	adds	r7, #12
    3b84:	46bd      	mov	sp, r7
    3b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b8a:	4770      	bx	lr
    3b8c:	e000e100 	.word	0xe000e100

00003b90 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3b90:	b480      	push	{r7}
    3b92:	b083      	sub	sp, #12
    3b94:	af00      	add	r7, sp, #0
    3b96:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3b98:	687b      	ldr	r3, [r7, #4]
    3b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3b9c:	095b      	lsrs	r3, r3, #5
    3b9e:	f003 0301 	and.w	r3, r3, #1
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	bf14      	ite	ne
    3ba6:	2301      	movne	r3, #1
    3ba8:	2300      	moveq	r3, #0
    3baa:	b2db      	uxtb	r3, r3
}
    3bac:	4618      	mov	r0, r3
    3bae:	370c      	adds	r7, #12
    3bb0:	46bd      	mov	sp, r7
    3bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bb6:	4770      	bx	lr

00003bb8 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3bb8:	b480      	push	{r7}
    3bba:	b083      	sub	sp, #12
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	683a      	ldr	r2, [r7, #0]
    3bc6:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bc8:	bf00      	nop
    3bca:	370c      	adds	r7, #12
    3bcc:	46bd      	mov	sp, r7
    3bce:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd2:	4770      	bx	lr

00003bd4 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3bd4:	b480      	push	{r7}
    3bd6:	b083      	sub	sp, #12
    3bd8:	af00      	add	r7, sp, #0
    3bda:	6078      	str	r0, [r7, #4]
    3bdc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	683a      	ldr	r2, [r7, #0]
    3be2:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3be4:	bf00      	nop
    3be6:	370c      	adds	r7, #12
    3be8:	46bd      	mov	sp, r7
    3bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bee:	4770      	bx	lr

00003bf0 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3bf0:	b480      	push	{r7}
    3bf2:	b083      	sub	sp, #12
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	699b      	ldr	r3, [r3, #24]
    3bfc:	f043 0201 	orr.w	r2, r3, #1
    3c00:	687b      	ldr	r3, [r7, #4]
    3c02:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c04:	bf00      	nop
    3c06:	370c      	adds	r7, #12
    3c08:	46bd      	mov	sp, r7
    3c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c0e:	4770      	bx	lr

00003c10 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3c10:	b480      	push	{r7}
    3c12:	b085      	sub	sp, #20
    3c14:	af00      	add	r7, sp, #0
    3c16:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3c18:	687b      	ldr	r3, [r7, #4]
    3c1a:	699b      	ldr	r3, [r3, #24]
    3c1c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3c1e:	68fb      	ldr	r3, [r7, #12]
    3c20:	f003 0301 	and.w	r3, r3, #1
    3c24:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3c26:	68fb      	ldr	r3, [r7, #12]
    3c28:	2b00      	cmp	r3, #0
    3c2a:	bf14      	ite	ne
    3c2c:	2301      	movne	r3, #1
    3c2e:	2300      	moveq	r3, #0
    3c30:	b2db      	uxtb	r3, r3
}
    3c32:	4618      	mov	r0, r3
    3c34:	3714      	adds	r7, #20
    3c36:	46bd      	mov	sp, r7
    3c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c3c:	4770      	bx	lr

00003c3e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3c3e:	b480      	push	{r7}
    3c40:	b083      	sub	sp, #12
    3c42:	af00      	add	r7, sp, #0
    3c44:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	699b      	ldr	r3, [r3, #24]
    3c4a:	f023 0201 	bic.w	r2, r3, #1
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c52:	bf00      	nop
    3c54:	370c      	adds	r7, #12
    3c56:	46bd      	mov	sp, r7
    3c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c5c:	4770      	bx	lr

00003c5e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3c5e:	b480      	push	{r7}
    3c60:	b083      	sub	sp, #12
    3c62:	af00      	add	r7, sp, #0
    3c64:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	699b      	ldr	r3, [r3, #24]
    3c6a:	f043 0202 	orr.w	r2, r3, #2
    3c6e:	687b      	ldr	r3, [r7, #4]
    3c70:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c72:	bf00      	nop
    3c74:	370c      	adds	r7, #12
    3c76:	46bd      	mov	sp, r7
    3c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7c:	4770      	bx	lr

00003c7e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3c7e:	b480      	push	{r7}
    3c80:	b083      	sub	sp, #12
    3c82:	af00      	add	r7, sp, #0
    3c84:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	699b      	ldr	r3, [r3, #24]
    3c8a:	f023 0202 	bic.w	r2, r3, #2
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c92:	bf00      	nop
    3c94:	370c      	adds	r7, #12
    3c96:	46bd      	mov	sp, r7
    3c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c9c:	4770      	bx	lr

00003c9e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3c9e:	b480      	push	{r7}
    3ca0:	b083      	sub	sp, #12
    3ca2:	af00      	add	r7, sp, #0
    3ca4:	6078      	str	r0, [r7, #4]
    3ca6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	699a      	ldr	r2, [r3, #24]
    3cac:	683b      	ldr	r3, [r7, #0]
    3cae:	431a      	orrs	r2, r3
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cb4:	bf00      	nop
    3cb6:	370c      	adds	r7, #12
    3cb8:	46bd      	mov	sp, r7
    3cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cbe:	4770      	bx	lr

00003cc0 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3cc0:	b480      	push	{r7}
    3cc2:	b083      	sub	sp, #12
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	6078      	str	r0, [r7, #4]
    3cc8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	683a      	ldr	r2, [r7, #0]
    3cce:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cd0:	bf00      	nop
    3cd2:	370c      	adds	r7, #12
    3cd4:	46bd      	mov	sp, r7
    3cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cda:	4770      	bx	lr

00003cdc <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3cdc:	b480      	push	{r7}
    3cde:	b083      	sub	sp, #12
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	6078      	str	r0, [r7, #4]
    3ce4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	683a      	ldr	r2, [r7, #0]
    3cea:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cec:	bf00      	nop
    3cee:	370c      	adds	r7, #12
    3cf0:	46bd      	mov	sp, r7
    3cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf6:	4770      	bx	lr

00003cf8 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3cf8:	b480      	push	{r7}
    3cfa:	b083      	sub	sp, #12
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3d04:	4618      	mov	r0, r3
    3d06:	370c      	adds	r7, #12
    3d08:	46bd      	mov	sp, r7
    3d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d0e:	4770      	bx	lr

00003d10 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3d10:	b480      	push	{r7}
    3d12:	b083      	sub	sp, #12
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    3d18:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	683a      	ldr	r2, [r7, #0]
    3d1e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d20:	bf00      	nop
    3d22:	370c      	adds	r7, #12
    3d24:	46bd      	mov	sp, r7
    3d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d2a:	4770      	bx	lr

00003d2c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3d2c:	b480      	push	{r7}
    3d2e:	b083      	sub	sp, #12
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
    3d34:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3d36:	687b      	ldr	r3, [r7, #4]
    3d38:	683a      	ldr	r2, [r7, #0]
    3d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d3e:	bf00      	nop
    3d40:	370c      	adds	r7, #12
    3d42:	46bd      	mov	sp, r7
    3d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d48:	4770      	bx	lr

00003d4a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3d4a:	b480      	push	{r7}
    3d4c:	b083      	sub	sp, #12
    3d4e:	af00      	add	r7, sp, #0
    3d50:	6078      	str	r0, [r7, #4]
    3d52:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	683a      	ldr	r2, [r7, #0]
    3d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d5c:	bf00      	nop
    3d5e:	370c      	adds	r7, #12
    3d60:	46bd      	mov	sp, r7
    3d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d66:	4770      	bx	lr

00003d68 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3d68:	b480      	push	{r7}
    3d6a:	b083      	sub	sp, #12
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
    3d70:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	683a      	ldr	r2, [r7, #0]
    3d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d7a:	bf00      	nop
    3d7c:	370c      	adds	r7, #12
    3d7e:	46bd      	mov	sp, r7
    3d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d84:	4770      	bx	lr

00003d86 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3d86:	b480      	push	{r7}
    3d88:	b083      	sub	sp, #12
    3d8a:	af00      	add	r7, sp, #0
    3d8c:	6078      	str	r0, [r7, #4]
    3d8e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	683a      	ldr	r2, [r7, #0]
    3d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d98:	bf00      	nop
    3d9a:	370c      	adds	r7, #12
    3d9c:	46bd      	mov	sp, r7
    3d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3da2:	4770      	bx	lr

00003da4 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3da4:	b480      	push	{r7}
    3da6:	b083      	sub	sp, #12
    3da8:	af00      	add	r7, sp, #0
    3daa:	6078      	str	r0, [r7, #4]
    3dac:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	683a      	ldr	r2, [r7, #0]
    3db2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3db6:	bf00      	nop
    3db8:	370c      	adds	r7, #12
    3dba:	46bd      	mov	sp, r7
    3dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc0:	4770      	bx	lr

00003dc2 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3dc2:	b480      	push	{r7}
    3dc4:	b083      	sub	sp, #12
    3dc6:	af00      	add	r7, sp, #0
    3dc8:	6078      	str	r0, [r7, #4]
    3dca:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3dcc:	687b      	ldr	r3, [r7, #4]
    3dce:	683a      	ldr	r2, [r7, #0]
    3dd0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dd4:	bf00      	nop
    3dd6:	370c      	adds	r7, #12
    3dd8:	46bd      	mov	sp, r7
    3dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dde:	4770      	bx	lr

00003de0 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3de0:	b480      	push	{r7}
    3de2:	b083      	sub	sp, #12
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
    3de8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	683a      	ldr	r2, [r7, #0]
    3dee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3df2:	bf00      	nop
    3df4:	370c      	adds	r7, #12
    3df6:	46bd      	mov	sp, r7
    3df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfc:	4770      	bx	lr

00003dfe <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3dfe:	b480      	push	{r7}
    3e00:	b083      	sub	sp, #12
    3e02:	af00      	add	r7, sp, #0
    3e04:	6078      	str	r0, [r7, #4]
    3e06:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3e08:	687b      	ldr	r3, [r7, #4]
    3e0a:	683a      	ldr	r2, [r7, #0]
    3e0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e10:	bf00      	nop
    3e12:	370c      	adds	r7, #12
    3e14:	46bd      	mov	sp, r7
    3e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e1a:	4770      	bx	lr

00003e1c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3e1c:	b480      	push	{r7}
    3e1e:	b083      	sub	sp, #12
    3e20:	af00      	add	r7, sp, #0
    3e22:	6078      	str	r0, [r7, #4]
    3e24:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	683a      	ldr	r2, [r7, #0]
    3e2a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e2e:	bf00      	nop
    3e30:	370c      	adds	r7, #12
    3e32:	46bd      	mov	sp, r7
    3e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e38:	4770      	bx	lr
	...

00003e3c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b082      	sub	sp, #8
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
    3e44:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	683a      	ldr	r2, [r7, #0]
    3e4a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3e4c:	687b      	ldr	r3, [r7, #4]
    3e4e:	681b      	ldr	r3, [r3, #0]
    3e50:	4618      	mov	r0, r3
    3e52:	4b56      	ldr	r3, [pc, #344]	; (3fac <_can_async_init+0x170>)
    3e54:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3e56:	bf00      	nop
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	681b      	ldr	r3, [r3, #0]
    3e5c:	4618      	mov	r0, r3
    3e5e:	4b54      	ldr	r3, [pc, #336]	; (3fb0 <_can_async_init+0x174>)
    3e60:	4798      	blx	r3
    3e62:	4603      	mov	r3, r0
    3e64:	f083 0301 	eor.w	r3, r3, #1
    3e68:	b2db      	uxtb	r3, r3
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d1f4      	bne.n	3e58 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3e6e:	687b      	ldr	r3, [r7, #4]
    3e70:	681b      	ldr	r3, [r3, #0]
    3e72:	4618      	mov	r0, r3
    3e74:	4b4f      	ldr	r3, [pc, #316]	; (3fb4 <_can_async_init+0x178>)
    3e76:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3e78:	683b      	ldr	r3, [r7, #0]
    3e7a:	4a4f      	ldr	r2, [pc, #316]	; (3fb8 <_can_async_init+0x17c>)
    3e7c:	4293      	cmp	r3, r2
    3e7e:	d17c      	bne.n	3f7a <_can_async_init+0x13e>
		_can1_dev    = dev;
    3e80:	4a4e      	ldr	r2, [pc, #312]	; (3fbc <_can_async_init+0x180>)
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3e86:	687b      	ldr	r3, [r7, #4]
    3e88:	4a4d      	ldr	r2, [pc, #308]	; (3fc0 <_can_async_init+0x184>)
    3e8a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	f44f 7100 	mov.w	r1, #512	; 0x200
    3e94:	4618      	mov	r0, r3
    3e96:	4b4b      	ldr	r3, [pc, #300]	; (3fc4 <_can_async_init+0x188>)
    3e98:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	2102      	movs	r1, #2
    3ea0:	4618      	mov	r0, r3
    3ea2:	4b49      	ldr	r3, [pc, #292]	; (3fc8 <_can_async_init+0x18c>)
    3ea4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	f640 2103 	movw	r1, #2563	; 0xa03
    3eae:	4618      	mov	r0, r3
    3eb0:	4b46      	ldr	r3, [pc, #280]	; (3fcc <_can_async_init+0x190>)
    3eb2:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	681b      	ldr	r3, [r3, #0]
    3eb8:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3ebc:	4618      	mov	r0, r3
    3ebe:	4b44      	ldr	r3, [pc, #272]	; (3fd0 <_can_async_init+0x194>)
    3ec0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3ec2:	687b      	ldr	r3, [r7, #4]
    3ec4:	681a      	ldr	r2, [r3, #0]
    3ec6:	4b43      	ldr	r3, [pc, #268]	; (3fd4 <_can_async_init+0x198>)
    3ec8:	b29b      	uxth	r3, r3
    3eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3ed2:	4619      	mov	r1, r3
    3ed4:	4610      	mov	r0, r2
    3ed6:	4b40      	ldr	r3, [pc, #256]	; (3fd8 <_can_async_init+0x19c>)
    3ed8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3eda:	687b      	ldr	r3, [r7, #4]
    3edc:	681b      	ldr	r3, [r3, #0]
    3ede:	2107      	movs	r1, #7
    3ee0:	4618      	mov	r0, r3
    3ee2:	4b3e      	ldr	r3, [pc, #248]	; (3fdc <_can_async_init+0x1a0>)
    3ee4:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3ee6:	687b      	ldr	r3, [r7, #4]
    3ee8:	681b      	ldr	r3, [r3, #0]
    3eea:	2107      	movs	r1, #7
    3eec:	4618      	mov	r0, r3
    3eee:	4b3c      	ldr	r3, [pc, #240]	; (3fe0 <_can_async_init+0x1a4>)
    3ef0:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	681a      	ldr	r2, [r3, #0]
    3ef6:	4b3b      	ldr	r3, [pc, #236]	; (3fe4 <_can_async_init+0x1a8>)
    3ef8:	b29b      	uxth	r3, r3
    3efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3efe:	4619      	mov	r1, r3
    3f00:	4610      	mov	r0, r2
    3f02:	4b39      	ldr	r3, [pc, #228]	; (3fe8 <_can_async_init+0x1ac>)
    3f04:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	681a      	ldr	r2, [r3, #0]
    3f0a:	4b38      	ldr	r3, [pc, #224]	; (3fec <_can_async_init+0x1b0>)
    3f0c:	b29b      	uxth	r3, r3
    3f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f12:	4619      	mov	r1, r3
    3f14:	4610      	mov	r0, r2
    3f16:	4b36      	ldr	r3, [pc, #216]	; (3ff0 <_can_async_init+0x1b4>)
    3f18:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	681b      	ldr	r3, [r3, #0]
    3f1e:	2108      	movs	r1, #8
    3f20:	4618      	mov	r0, r3
    3f22:	4b34      	ldr	r3, [pc, #208]	; (3ff4 <_can_async_init+0x1b8>)
    3f24:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	681a      	ldr	r2, [r3, #0]
    3f2a:	4b33      	ldr	r3, [pc, #204]	; (3ff8 <_can_async_init+0x1bc>)
    3f2c:	b29b      	uxth	r3, r3
    3f2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3f32:	4619      	mov	r1, r3
    3f34:	4610      	mov	r0, r2
    3f36:	4b31      	ldr	r3, [pc, #196]	; (3ffc <_can_async_init+0x1c0>)
    3f38:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	681a      	ldr	r2, [r3, #0]
    3f3e:	4b30      	ldr	r3, [pc, #192]	; (4000 <_can_async_init+0x1c4>)
    3f40:	b29b      	uxth	r3, r3
    3f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f46:	4619      	mov	r1, r3
    3f48:	4610      	mov	r0, r2
    3f4a:	4b2e      	ldr	r3, [pc, #184]	; (4004 <_can_async_init+0x1c8>)
    3f4c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	681b      	ldr	r3, [r3, #0]
    3f52:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3f56:	4618      	mov	r0, r3
    3f58:	4b2b      	ldr	r3, [pc, #172]	; (4008 <_can_async_init+0x1cc>)
    3f5a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3f5c:	204f      	movs	r0, #79	; 0x4f
    3f5e:	4b2b      	ldr	r3, [pc, #172]	; (400c <_can_async_init+0x1d0>)
    3f60:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3f62:	204f      	movs	r0, #79	; 0x4f
    3f64:	4b2a      	ldr	r3, [pc, #168]	; (4010 <_can_async_init+0x1d4>)
    3f66:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3f68:	204f      	movs	r0, #79	; 0x4f
    3f6a:	4b2a      	ldr	r3, [pc, #168]	; (4014 <_can_async_init+0x1d8>)
    3f6c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3f6e:	687b      	ldr	r3, [r7, #4]
    3f70:	681b      	ldr	r3, [r3, #0]
    3f72:	2101      	movs	r1, #1
    3f74:	4618      	mov	r0, r3
    3f76:	4b28      	ldr	r3, [pc, #160]	; (4018 <_can_async_init+0x1dc>)
    3f78:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	681b      	ldr	r3, [r3, #0]
    3f7e:	4618      	mov	r0, r3
    3f80:	4b26      	ldr	r3, [pc, #152]	; (401c <_can_async_init+0x1e0>)
    3f82:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	681b      	ldr	r3, [r3, #0]
    3f88:	4618      	mov	r0, r3
    3f8a:	4b25      	ldr	r3, [pc, #148]	; (4020 <_can_async_init+0x1e4>)
    3f8c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3f8e:	bf00      	nop
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	681b      	ldr	r3, [r3, #0]
    3f94:	4618      	mov	r0, r3
    3f96:	4b06      	ldr	r3, [pc, #24]	; (3fb0 <_can_async_init+0x174>)
    3f98:	4798      	blx	r3
    3f9a:	4603      	mov	r3, r0
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d1f7      	bne.n	3f90 <_can_async_init+0x154>
	};

	return ERR_NONE;
    3fa0:	2300      	movs	r3, #0
}
    3fa2:	4618      	mov	r0, r3
    3fa4:	3708      	adds	r7, #8
    3fa6:	46bd      	mov	sp, r7
    3fa8:	bd80      	pop	{r7, pc}
    3faa:	bf00      	nop
    3fac:	00003bf1 	.word	0x00003bf1
    3fb0:	00003c11 	.word	0x00003c11
    3fb4:	00003c5f 	.word	0x00003c5f
    3fb8:	42000400 	.word	0x42000400
    3fbc:	20000bfc 	.word	0x20000bfc
    3fc0:	20000004 	.word	0x20000004
    3fc4:	00003c9f 	.word	0x00003c9f
    3fc8:	00003bb9 	.word	0x00003bb9
    3fcc:	00003cc1 	.word	0x00003cc1
    3fd0:	00003bd5 	.word	0x00003bd5
    3fd4:	2000ab28 	.word	0x2000ab28
    3fd8:	00003da5 	.word	0x00003da5
    3fdc:	00003dc3 	.word	0x00003dc3
    3fe0:	00003dff 	.word	0x00003dff
    3fe4:	2000aae0 	.word	0x2000aae0
    3fe8:	00003de1 	.word	0x00003de1
    3fec:	20000b5c 	.word	0x20000b5c
    3ff0:	00003e1d 	.word	0x00003e1d
    3ff4:	00003d2d 	.word	0x00003d2d
    3ff8:	20000b6c 	.word	0x20000b6c
    3ffc:	00003d4b 	.word	0x00003d4b
    4000:	20000bec 	.word	0x20000bec
    4004:	00003d69 	.word	0x00003d69
    4008:	00003d87 	.word	0x00003d87
    400c:	00003b11 	.word	0x00003b11
    4010:	00003b55 	.word	0x00003b55
    4014:	00003ad5 	.word	0x00003ad5
    4018:	00003d11 	.word	0x00003d11
    401c:	00003c7f 	.word	0x00003c7f
    4020:	00003c3f 	.word	0x00003c3f

00004024 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4024:	b590      	push	{r4, r7, lr}
    4026:	b083      	sub	sp, #12
    4028:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    402a:	4b2c      	ldr	r3, [pc, #176]	; (40dc <CAN1_Handler+0xb8>)
    402c:	681b      	ldr	r3, [r3, #0]
    402e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4030:	687b      	ldr	r3, [r7, #4]
    4032:	681b      	ldr	r3, [r3, #0]
    4034:	4618      	mov	r0, r3
    4036:	4b2a      	ldr	r3, [pc, #168]	; (40e0 <CAN1_Handler+0xbc>)
    4038:	4798      	blx	r3
    403a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    403c:	683b      	ldr	r3, [r7, #0]
    403e:	f003 0301 	and.w	r3, r3, #1
    4042:	2b00      	cmp	r3, #0
    4044:	d003      	beq.n	404e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4046:	687b      	ldr	r3, [r7, #4]
    4048:	689b      	ldr	r3, [r3, #8]
    404a:	6878      	ldr	r0, [r7, #4]
    404c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    404e:	683b      	ldr	r3, [r7, #0]
    4050:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4054:	2b00      	cmp	r3, #0
    4056:	d003      	beq.n	4060 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4058:	687b      	ldr	r3, [r7, #4]
    405a:	685b      	ldr	r3, [r3, #4]
    405c:	6878      	ldr	r0, [r7, #4]
    405e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4060:	683b      	ldr	r3, [r7, #0]
    4062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4066:	2b00      	cmp	r3, #0
    4068:	d004      	beq.n	4074 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	68db      	ldr	r3, [r3, #12]
    406e:	2103      	movs	r1, #3
    4070:	6878      	ldr	r0, [r7, #4]
    4072:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4074:	683b      	ldr	r3, [r7, #0]
    4076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    407a:	2b00      	cmp	r3, #0
    407c:	d004      	beq.n	4088 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    407e:	687b      	ldr	r3, [r7, #4]
    4080:	68db      	ldr	r3, [r3, #12]
    4082:	2100      	movs	r1, #0
    4084:	6878      	ldr	r0, [r7, #4]
    4086:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4088:	683b      	ldr	r3, [r7, #0]
    408a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    408e:	2b00      	cmp	r3, #0
    4090:	d00f      	beq.n	40b2 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4092:	687b      	ldr	r3, [r7, #4]
    4094:	68dc      	ldr	r4, [r3, #12]
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	4618      	mov	r0, r3
    409c:	4b11      	ldr	r3, [pc, #68]	; (40e4 <CAN1_Handler+0xc0>)
    409e:	4798      	blx	r3
    40a0:	4603      	mov	r3, r0
    40a2:	2b00      	cmp	r3, #0
    40a4:	d001      	beq.n	40aa <CAN1_Handler+0x86>
    40a6:	2302      	movs	r3, #2
    40a8:	e000      	b.n	40ac <CAN1_Handler+0x88>
    40aa:	2301      	movs	r3, #1
    40ac:	4619      	mov	r1, r3
    40ae:	6878      	ldr	r0, [r7, #4]
    40b0:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    40b2:	683b      	ldr	r3, [r7, #0]
    40b4:	f003 0308 	and.w	r3, r3, #8
    40b8:	2b00      	cmp	r3, #0
    40ba:	d004      	beq.n	40c6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	68db      	ldr	r3, [r3, #12]
    40c0:	2104      	movs	r1, #4
    40c2:	6878      	ldr	r0, [r7, #4]
    40c4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	6839      	ldr	r1, [r7, #0]
    40cc:	4618      	mov	r0, r3
    40ce:	4b06      	ldr	r3, [pc, #24]	; (40e8 <CAN1_Handler+0xc4>)
    40d0:	4798      	blx	r3
}
    40d2:	bf00      	nop
    40d4:	370c      	adds	r7, #12
    40d6:	46bd      	mov	sp, r7
    40d8:	bd90      	pop	{r4, r7, pc}
    40da:	bf00      	nop
    40dc:	20000bfc 	.word	0x20000bfc
    40e0:	00003cf9 	.word	0x00003cf9
    40e4:	00003b91 	.word	0x00003b91
    40e8:	00003cdd 	.word	0x00003cdd

000040ec <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    40ec:	b480      	push	{r7}
    40ee:	b083      	sub	sp, #12
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
    40f4:	460b      	mov	r3, r1
    40f6:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    40f8:	687b      	ldr	r3, [r7, #4]
    40fa:	881b      	ldrh	r3, [r3, #0]
    40fc:	b29a      	uxth	r2, r3
    40fe:	887b      	ldrh	r3, [r7, #2]
    4100:	021b      	lsls	r3, r3, #8
    4102:	b29b      	uxth	r3, r3
    4104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4108:	b29b      	uxth	r3, r3
    410a:	4313      	orrs	r3, r2
    410c:	b29a      	uxth	r2, r3
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4112:	bf00      	nop
    4114:	370c      	adds	r7, #12
    4116:	46bd      	mov	sp, r7
    4118:	f85d 7b04 	ldr.w	r7, [sp], #4
    411c:	4770      	bx	lr

0000411e <hri_port_set_EVCTRL_reg>:
{
    411e:	b480      	push	{r7}
    4120:	b085      	sub	sp, #20
    4122:	af00      	add	r7, sp, #0
    4124:	60f8      	str	r0, [r7, #12]
    4126:	460b      	mov	r3, r1
    4128:	607a      	str	r2, [r7, #4]
    412a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    412c:	7afb      	ldrb	r3, [r7, #11]
    412e:	7afa      	ldrb	r2, [r7, #11]
    4130:	68f9      	ldr	r1, [r7, #12]
    4132:	01d2      	lsls	r2, r2, #7
    4134:	440a      	add	r2, r1
    4136:	322c      	adds	r2, #44	; 0x2c
    4138:	6811      	ldr	r1, [r2, #0]
    413a:	687a      	ldr	r2, [r7, #4]
    413c:	430a      	orrs	r2, r1
    413e:	68f9      	ldr	r1, [r7, #12]
    4140:	01db      	lsls	r3, r3, #7
    4142:	440b      	add	r3, r1
    4144:	332c      	adds	r3, #44	; 0x2c
    4146:	601a      	str	r2, [r3, #0]
}
    4148:	bf00      	nop
    414a:	3714      	adds	r7, #20
    414c:	46bd      	mov	sp, r7
    414e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4152:	4770      	bx	lr

00004154 <_port_event_init>:

static inline void _port_event_init()
{
    4154:	b580      	push	{r7, lr}
    4156:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4158:	2200      	movs	r2, #0
    415a:	2100      	movs	r1, #0
    415c:	480a      	ldr	r0, [pc, #40]	; (4188 <_port_event_init+0x34>)
    415e:	4b0b      	ldr	r3, [pc, #44]	; (418c <_port_event_init+0x38>)
    4160:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4162:	2200      	movs	r2, #0
    4164:	2101      	movs	r1, #1
    4166:	4808      	ldr	r0, [pc, #32]	; (4188 <_port_event_init+0x34>)
    4168:	4b08      	ldr	r3, [pc, #32]	; (418c <_port_event_init+0x38>)
    416a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    416c:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4170:	2102      	movs	r1, #2
    4172:	4805      	ldr	r0, [pc, #20]	; (4188 <_port_event_init+0x34>)
    4174:	4b05      	ldr	r3, [pc, #20]	; (418c <_port_event_init+0x38>)
    4176:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4178:	2200      	movs	r2, #0
    417a:	2103      	movs	r1, #3
    417c:	4802      	ldr	r0, [pc, #8]	; (4188 <_port_event_init+0x34>)
    417e:	4b03      	ldr	r3, [pc, #12]	; (418c <_port_event_init+0x38>)
    4180:	4798      	blx	r3
}
    4182:	bf00      	nop
    4184:	bd80      	pop	{r7, pc}
    4186:	bf00      	nop
    4188:	41008000 	.word	0x41008000
    418c:	0000411f 	.word	0x0000411f

00004190 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4190:	b580      	push	{r7, lr}
    4192:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4194:	2104      	movs	r1, #4
    4196:	480b      	ldr	r0, [pc, #44]	; (41c4 <_init_chip+0x34>)
    4198:	4b0b      	ldr	r3, [pc, #44]	; (41c8 <_init_chip+0x38>)
    419a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    419c:	4b0b      	ldr	r3, [pc, #44]	; (41cc <_init_chip+0x3c>)
    419e:	4798      	blx	r3
	_oscctrl_init_sources();
    41a0:	4b0b      	ldr	r3, [pc, #44]	; (41d0 <_init_chip+0x40>)
    41a2:	4798      	blx	r3
	_mclk_init();
    41a4:	4b0b      	ldr	r3, [pc, #44]	; (41d4 <_init_chip+0x44>)
    41a6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    41a8:	f44f 6084 	mov.w	r0, #1056	; 0x420
    41ac:	4b0a      	ldr	r3, [pc, #40]	; (41d8 <_init_chip+0x48>)
    41ae:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    41b0:	4b0a      	ldr	r3, [pc, #40]	; (41dc <_init_chip+0x4c>)
    41b2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    41b4:	f640 30df 	movw	r0, #3039	; 0xbdf
    41b8:	4b07      	ldr	r3, [pc, #28]	; (41d8 <_init_chip+0x48>)
    41ba:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    41bc:	4b08      	ldr	r3, [pc, #32]	; (41e0 <_init_chip+0x50>)
    41be:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    41c0:	bf00      	nop
    41c2:	bd80      	pop	{r7, pc}
    41c4:	41004000 	.word	0x41004000
    41c8:	000040ed 	.word	0x000040ed
    41cc:	00004cb9 	.word	0x00004cb9
    41d0:	00005181 	.word	0x00005181
    41d4:	00004bd9 	.word	0x00004bd9
    41d8:	00004a81 	.word	0x00004a81
    41dc:	000051c1 	.word	0x000051c1
    41e0:	00004155 	.word	0x00004155

000041e4 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    41e4:	b480      	push	{r7}
    41e6:	b083      	sub	sp, #12
    41e8:	af00      	add	r7, sp, #0
    41ea:	6078      	str	r0, [r7, #4]
    41ec:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	683a      	ldr	r2, [r7, #0]
    41f2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    41f4:	2300      	movs	r3, #0
}
    41f6:	4618      	mov	r0, r3
    41f8:	370c      	adds	r7, #12
    41fa:	46bd      	mov	sp, r7
    41fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4200:	4770      	bx	lr
	...

00004204 <__NVIC_EnableIRQ>:
{
    4204:	b480      	push	{r7}
    4206:	b083      	sub	sp, #12
    4208:	af00      	add	r7, sp, #0
    420a:	4603      	mov	r3, r0
    420c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4212:	2b00      	cmp	r3, #0
    4214:	db0b      	blt.n	422e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4216:	4909      	ldr	r1, [pc, #36]	; (423c <__NVIC_EnableIRQ+0x38>)
    4218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    421c:	095b      	lsrs	r3, r3, #5
    421e:	88fa      	ldrh	r2, [r7, #6]
    4220:	f002 021f 	and.w	r2, r2, #31
    4224:	2001      	movs	r0, #1
    4226:	fa00 f202 	lsl.w	r2, r0, r2
    422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    422e:	bf00      	nop
    4230:	370c      	adds	r7, #12
    4232:	46bd      	mov	sp, r7
    4234:	f85d 7b04 	ldr.w	r7, [sp], #4
    4238:	4770      	bx	lr
    423a:	bf00      	nop
    423c:	e000e100 	.word	0xe000e100

00004240 <__NVIC_DisableIRQ>:
{
    4240:	b480      	push	{r7}
    4242:	b083      	sub	sp, #12
    4244:	af00      	add	r7, sp, #0
    4246:	4603      	mov	r3, r0
    4248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    424a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    424e:	2b00      	cmp	r3, #0
    4250:	db10      	blt.n	4274 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4252:	490b      	ldr	r1, [pc, #44]	; (4280 <__NVIC_DisableIRQ+0x40>)
    4254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4258:	095b      	lsrs	r3, r3, #5
    425a:	88fa      	ldrh	r2, [r7, #6]
    425c:	f002 021f 	and.w	r2, r2, #31
    4260:	2001      	movs	r0, #1
    4262:	fa00 f202 	lsl.w	r2, r0, r2
    4266:	3320      	adds	r3, #32
    4268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    426c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4270:	f3bf 8f6f 	isb	sy
}
    4274:	bf00      	nop
    4276:	370c      	adds	r7, #12
    4278:	46bd      	mov	sp, r7
    427a:	f85d 7b04 	ldr.w	r7, [sp], #4
    427e:	4770      	bx	lr
    4280:	e000e100 	.word	0xe000e100

00004284 <__NVIC_ClearPendingIRQ>:
{
    4284:	b480      	push	{r7}
    4286:	b083      	sub	sp, #12
    4288:	af00      	add	r7, sp, #0
    428a:	4603      	mov	r3, r0
    428c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    428e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4292:	2b00      	cmp	r3, #0
    4294:	db0c      	blt.n	42b0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4296:	4909      	ldr	r1, [pc, #36]	; (42bc <__NVIC_ClearPendingIRQ+0x38>)
    4298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    429c:	095b      	lsrs	r3, r3, #5
    429e:	88fa      	ldrh	r2, [r7, #6]
    42a0:	f002 021f 	and.w	r2, r2, #31
    42a4:	2001      	movs	r0, #1
    42a6:	fa00 f202 	lsl.w	r2, r0, r2
    42aa:	3360      	adds	r3, #96	; 0x60
    42ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    42b0:	bf00      	nop
    42b2:	370c      	adds	r7, #12
    42b4:	46bd      	mov	sp, r7
    42b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ba:	4770      	bx	lr
    42bc:	e000e100 	.word	0xe000e100

000042c0 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    42c0:	b480      	push	{r7}
    42c2:	b083      	sub	sp, #12
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
    42c8:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    42ca:	bf00      	nop
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	685a      	ldr	r2, [r3, #4]
    42d0:	683b      	ldr	r3, [r7, #0]
    42d2:	4013      	ands	r3, r2
    42d4:	2b00      	cmp	r3, #0
    42d6:	d1f9      	bne.n	42cc <hri_eic_wait_for_sync+0xc>
	};
}
    42d8:	bf00      	nop
    42da:	370c      	adds	r7, #12
    42dc:	46bd      	mov	sp, r7
    42de:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e2:	4770      	bx	lr

000042e4 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    42e4:	b480      	push	{r7}
    42e6:	b083      	sub	sp, #12
    42e8:	af00      	add	r7, sp, #0
    42ea:	6078      	str	r0, [r7, #4]
    42ec:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	685a      	ldr	r2, [r3, #4]
    42f2:	683b      	ldr	r3, [r7, #0]
    42f4:	4013      	ands	r3, r2
    42f6:	2b00      	cmp	r3, #0
    42f8:	bf14      	ite	ne
    42fa:	2301      	movne	r3, #1
    42fc:	2300      	moveq	r3, #0
    42fe:	b2db      	uxtb	r3, r3
}
    4300:	4618      	mov	r0, r3
    4302:	370c      	adds	r7, #12
    4304:	46bd      	mov	sp, r7
    4306:	f85d 7b04 	ldr.w	r7, [sp], #4
    430a:	4770      	bx	lr

0000430c <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    430c:	b480      	push	{r7}
    430e:	b083      	sub	sp, #12
    4310:	af00      	add	r7, sp, #0
    4312:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	695b      	ldr	r3, [r3, #20]
}
    4318:	4618      	mov	r0, r3
    431a:	370c      	adds	r7, #12
    431c:	46bd      	mov	sp, r7
    431e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4322:	4770      	bx	lr

00004324 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4324:	b480      	push	{r7}
    4326:	b083      	sub	sp, #12
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
    432c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	683a      	ldr	r2, [r7, #0]
    4332:	615a      	str	r2, [r3, #20]
}
    4334:	bf00      	nop
    4336:	370c      	adds	r7, #12
    4338:	46bd      	mov	sp, r7
    433a:	f85d 7b04 	ldr.w	r7, [sp], #4
    433e:	4770      	bx	lr

00004340 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4340:	b480      	push	{r7}
    4342:	b083      	sub	sp, #12
    4344:	af00      	add	r7, sp, #0
    4346:	6078      	str	r0, [r7, #4]
    4348:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    434a:	687b      	ldr	r3, [r7, #4]
    434c:	683a      	ldr	r2, [r7, #0]
    434e:	611a      	str	r2, [r3, #16]
}
    4350:	bf00      	nop
    4352:	370c      	adds	r7, #12
    4354:	46bd      	mov	sp, r7
    4356:	f85d 7b04 	ldr.w	r7, [sp], #4
    435a:	4770      	bx	lr

0000435c <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    435c:	b480      	push	{r7}
    435e:	b083      	sub	sp, #12
    4360:	af00      	add	r7, sp, #0
    4362:	6078      	str	r0, [r7, #4]
    4364:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	683a      	ldr	r2, [r7, #0]
    436a:	60da      	str	r2, [r3, #12]
}
    436c:	bf00      	nop
    436e:	370c      	adds	r7, #12
    4370:	46bd      	mov	sp, r7
    4372:	f85d 7b04 	ldr.w	r7, [sp], #4
    4376:	4770      	bx	lr

00004378 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4378:	b580      	push	{r7, lr}
    437a:	b082      	sub	sp, #8
    437c:	af00      	add	r7, sp, #0
    437e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	781b      	ldrb	r3, [r3, #0]
    4384:	b2db      	uxtb	r3, r3
    4386:	f043 0302 	orr.w	r3, r3, #2
    438a:	b2da      	uxtb	r2, r3
    438c:	687b      	ldr	r3, [r7, #4]
    438e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4390:	2103      	movs	r1, #3
    4392:	6878      	ldr	r0, [r7, #4]
    4394:	4b02      	ldr	r3, [pc, #8]	; (43a0 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4396:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4398:	bf00      	nop
    439a:	3708      	adds	r7, #8
    439c:	46bd      	mov	sp, r7
    439e:	bd80      	pop	{r7, pc}
    43a0:	000042c1 	.word	0x000042c1

000043a4 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    43a4:	b580      	push	{r7, lr}
    43a6:	b082      	sub	sp, #8
    43a8:	af00      	add	r7, sp, #0
    43aa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	781b      	ldrb	r3, [r3, #0]
    43b0:	b2db      	uxtb	r3, r3
    43b2:	f023 0302 	bic.w	r3, r3, #2
    43b6:	b2da      	uxtb	r2, r3
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    43bc:	2103      	movs	r1, #3
    43be:	6878      	ldr	r0, [r7, #4]
    43c0:	4b02      	ldr	r3, [pc, #8]	; (43cc <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    43c2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    43c4:	bf00      	nop
    43c6:	3708      	adds	r7, #8
    43c8:	46bd      	mov	sp, r7
    43ca:	bd80      	pop	{r7, pc}
    43cc:	000042c1 	.word	0x000042c1

000043d0 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b084      	sub	sp, #16
    43d4:	af00      	add	r7, sp, #0
    43d6:	6078      	str	r0, [r7, #4]
    43d8:	460b      	mov	r3, r1
    43da:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	781b      	ldrb	r3, [r3, #0]
    43e0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    43e2:	7bfb      	ldrb	r3, [r7, #15]
    43e4:	f023 0310 	bic.w	r3, r3, #16
    43e8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    43ea:	78fb      	ldrb	r3, [r7, #3]
    43ec:	011b      	lsls	r3, r3, #4
    43ee:	b25a      	sxtb	r2, r3
    43f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43f4:	4313      	orrs	r3, r2
    43f6:	b25b      	sxtb	r3, r3
    43f8:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	7bfa      	ldrb	r2, [r7, #15]
    43fe:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4400:	2103      	movs	r1, #3
    4402:	6878      	ldr	r0, [r7, #4]
    4404:	4b02      	ldr	r3, [pc, #8]	; (4410 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4406:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4408:	bf00      	nop
    440a:	3710      	adds	r7, #16
    440c:	46bd      	mov	sp, r7
    440e:	bd80      	pop	{r7, pc}
    4410:	000042c1 	.word	0x000042c1

00004414 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4414:	b580      	push	{r7, lr}
    4416:	b084      	sub	sp, #16
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
    441c:	460b      	mov	r3, r1
    441e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4420:	2103      	movs	r1, #3
    4422:	6878      	ldr	r0, [r7, #4]
    4424:	4b06      	ldr	r3, [pc, #24]	; (4440 <hri_eic_get_CTRLA_reg+0x2c>)
    4426:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	781b      	ldrb	r3, [r3, #0]
    442c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    442e:	7bfa      	ldrb	r2, [r7, #15]
    4430:	78fb      	ldrb	r3, [r7, #3]
    4432:	4013      	ands	r3, r2
    4434:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4436:	7bfb      	ldrb	r3, [r7, #15]
}
    4438:	4618      	mov	r0, r3
    443a:	3710      	adds	r7, #16
    443c:	46bd      	mov	sp, r7
    443e:	bd80      	pop	{r7, pc}
    4440:	000042c1 	.word	0x000042c1

00004444 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4444:	b580      	push	{r7, lr}
    4446:	b082      	sub	sp, #8
    4448:	af00      	add	r7, sp, #0
    444a:	6078      	str	r0, [r7, #4]
    444c:	460b      	mov	r3, r1
    444e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	78fa      	ldrb	r2, [r7, #3]
    4454:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4456:	2103      	movs	r1, #3
    4458:	6878      	ldr	r0, [r7, #4]
    445a:	4b03      	ldr	r3, [pc, #12]	; (4468 <hri_eic_write_CTRLA_reg+0x24>)
    445c:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    445e:	bf00      	nop
    4460:	3708      	adds	r7, #8
    4462:	46bd      	mov	sp, r7
    4464:	bd80      	pop	{r7, pc}
    4466:	bf00      	nop
    4468:	000042c1 	.word	0x000042c1

0000446c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    446c:	b480      	push	{r7}
    446e:	b083      	sub	sp, #12
    4470:	af00      	add	r7, sp, #0
    4472:	6078      	str	r0, [r7, #4]
    4474:	460b      	mov	r3, r1
    4476:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	78fa      	ldrb	r2, [r7, #3]
    447c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    447e:	bf00      	nop
    4480:	370c      	adds	r7, #12
    4482:	46bd      	mov	sp, r7
    4484:	f85d 7b04 	ldr.w	r7, [sp], #4
    4488:	4770      	bx	lr

0000448a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    448a:	b480      	push	{r7}
    448c:	b083      	sub	sp, #12
    448e:	af00      	add	r7, sp, #0
    4490:	6078      	str	r0, [r7, #4]
    4492:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	683a      	ldr	r2, [r7, #0]
    4498:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    449a:	bf00      	nop
    449c:	370c      	adds	r7, #12
    449e:	46bd      	mov	sp, r7
    44a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    44a4:	4770      	bx	lr

000044a6 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    44a6:	b480      	push	{r7}
    44a8:	b083      	sub	sp, #12
    44aa:	af00      	add	r7, sp, #0
    44ac:	6078      	str	r0, [r7, #4]
    44ae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	683a      	ldr	r2, [r7, #0]
    44b4:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    44b6:	bf00      	nop
    44b8:	370c      	adds	r7, #12
    44ba:	46bd      	mov	sp, r7
    44bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c0:	4770      	bx	lr

000044c2 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    44c2:	b480      	push	{r7}
    44c4:	b085      	sub	sp, #20
    44c6:	af00      	add	r7, sp, #0
    44c8:	60f8      	str	r0, [r7, #12]
    44ca:	460b      	mov	r3, r1
    44cc:	607a      	str	r2, [r7, #4]
    44ce:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    44d0:	7afb      	ldrb	r3, [r7, #11]
    44d2:	68fa      	ldr	r2, [r7, #12]
    44d4:	3306      	adds	r3, #6
    44d6:	009b      	lsls	r3, r3, #2
    44d8:	4413      	add	r3, r2
    44da:	687a      	ldr	r2, [r7, #4]
    44dc:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    44de:	bf00      	nop
    44e0:	3714      	adds	r7, #20
    44e2:	46bd      	mov	sp, r7
    44e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e8:	4770      	bx	lr

000044ea <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    44ea:	b480      	push	{r7}
    44ec:	b083      	sub	sp, #12
    44ee:	af00      	add	r7, sp, #0
    44f0:	6078      	str	r0, [r7, #4]
    44f2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	683a      	ldr	r2, [r7, #0]
    44f8:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    44fa:	bf00      	nop
    44fc:	370c      	adds	r7, #12
    44fe:	46bd      	mov	sp, r7
    4500:	f85d 7b04 	ldr.w	r7, [sp], #4
    4504:	4770      	bx	lr

00004506 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4506:	b480      	push	{r7}
    4508:	b083      	sub	sp, #12
    450a:	af00      	add	r7, sp, #0
    450c:	6078      	str	r0, [r7, #4]
    450e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4510:	687b      	ldr	r3, [r7, #4]
    4512:	683a      	ldr	r2, [r7, #0]
    4514:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4516:	bf00      	nop
    4518:	370c      	adds	r7, #12
    451a:	46bd      	mov	sp, r7
    451c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4520:	4770      	bx	lr
	...

00004524 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4524:	b580      	push	{r7, lr}
    4526:	b082      	sub	sp, #8
    4528:	af00      	add	r7, sp, #0
    452a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    452c:	2101      	movs	r1, #1
    452e:	484f      	ldr	r0, [pc, #316]	; (466c <_ext_irq_init+0x148>)
    4530:	4b4f      	ldr	r3, [pc, #316]	; (4670 <_ext_irq_init+0x14c>)
    4532:	4798      	blx	r3
    4534:	4603      	mov	r3, r0
    4536:	f083 0301 	eor.w	r3, r3, #1
    453a:	b2db      	uxtb	r3, r3
    453c:	2b00      	cmp	r3, #0
    453e:	d011      	beq.n	4564 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4540:	2102      	movs	r1, #2
    4542:	484a      	ldr	r0, [pc, #296]	; (466c <_ext_irq_init+0x148>)
    4544:	4b4b      	ldr	r3, [pc, #300]	; (4674 <_ext_irq_init+0x150>)
    4546:	4798      	blx	r3
    4548:	4603      	mov	r3, r0
    454a:	2b00      	cmp	r3, #0
    454c:	d006      	beq.n	455c <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    454e:	4847      	ldr	r0, [pc, #284]	; (466c <_ext_irq_init+0x148>)
    4550:	4b49      	ldr	r3, [pc, #292]	; (4678 <_ext_irq_init+0x154>)
    4552:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4554:	2102      	movs	r1, #2
    4556:	4845      	ldr	r0, [pc, #276]	; (466c <_ext_irq_init+0x148>)
    4558:	4b48      	ldr	r3, [pc, #288]	; (467c <_ext_irq_init+0x158>)
    455a:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    455c:	2101      	movs	r1, #1
    455e:	4843      	ldr	r0, [pc, #268]	; (466c <_ext_irq_init+0x148>)
    4560:	4b47      	ldr	r3, [pc, #284]	; (4680 <_ext_irq_init+0x15c>)
    4562:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4564:	2101      	movs	r1, #1
    4566:	4841      	ldr	r0, [pc, #260]	; (466c <_ext_irq_init+0x148>)
    4568:	4b44      	ldr	r3, [pc, #272]	; (467c <_ext_irq_init+0x158>)
    456a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    456c:	2100      	movs	r1, #0
    456e:	483f      	ldr	r0, [pc, #252]	; (466c <_ext_irq_init+0x148>)
    4570:	4b44      	ldr	r3, [pc, #272]	; (4684 <_ext_irq_init+0x160>)
    4572:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4574:	2100      	movs	r1, #0
    4576:	483d      	ldr	r0, [pc, #244]	; (466c <_ext_irq_init+0x148>)
    4578:	4b43      	ldr	r3, [pc, #268]	; (4688 <_ext_irq_init+0x164>)
    457a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    457c:	2100      	movs	r1, #0
    457e:	483b      	ldr	r0, [pc, #236]	; (466c <_ext_irq_init+0x148>)
    4580:	4b42      	ldr	r3, [pc, #264]	; (468c <_ext_irq_init+0x168>)
    4582:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4584:	f240 31bb 	movw	r1, #955	; 0x3bb
    4588:	4838      	ldr	r0, [pc, #224]	; (466c <_ext_irq_init+0x148>)
    458a:	4b41      	ldr	r3, [pc, #260]	; (4690 <_ext_irq_init+0x16c>)
    458c:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    458e:	f240 313b 	movw	r1, #827	; 0x33b
    4592:	4836      	ldr	r0, [pc, #216]	; (466c <_ext_irq_init+0x148>)
    4594:	4b3f      	ldr	r3, [pc, #252]	; (4694 <_ext_irq_init+0x170>)
    4596:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4598:	2100      	movs	r1, #0
    459a:	4834      	ldr	r0, [pc, #208]	; (466c <_ext_irq_init+0x148>)
    459c:	4b3e      	ldr	r3, [pc, #248]	; (4698 <_ext_irq_init+0x174>)
    459e:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    45a0:	4a3e      	ldr	r2, [pc, #248]	; (469c <_ext_irq_init+0x178>)
    45a2:	2100      	movs	r1, #0
    45a4:	4831      	ldr	r0, [pc, #196]	; (466c <_ext_irq_init+0x148>)
    45a6:	4b3e      	ldr	r3, [pc, #248]	; (46a0 <_ext_irq_init+0x17c>)
    45a8:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    45aa:	2211      	movs	r2, #17
    45ac:	2101      	movs	r1, #1
    45ae:	482f      	ldr	r0, [pc, #188]	; (466c <_ext_irq_init+0x148>)
    45b0:	4b3b      	ldr	r3, [pc, #236]	; (46a0 <_ext_irq_init+0x17c>)
    45b2:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    45b4:	482d      	ldr	r0, [pc, #180]	; (466c <_ext_irq_init+0x148>)
    45b6:	4b3b      	ldr	r3, [pc, #236]	; (46a4 <_ext_irq_init+0x180>)
    45b8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    45ba:	200c      	movs	r0, #12
    45bc:	4b3a      	ldr	r3, [pc, #232]	; (46a8 <_ext_irq_init+0x184>)
    45be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    45c0:	200c      	movs	r0, #12
    45c2:	4b3a      	ldr	r3, [pc, #232]	; (46ac <_ext_irq_init+0x188>)
    45c4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    45c6:	200c      	movs	r0, #12
    45c8:	4b39      	ldr	r3, [pc, #228]	; (46b0 <_ext_irq_init+0x18c>)
    45ca:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    45cc:	200d      	movs	r0, #13
    45ce:	4b36      	ldr	r3, [pc, #216]	; (46a8 <_ext_irq_init+0x184>)
    45d0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    45d2:	200d      	movs	r0, #13
    45d4:	4b35      	ldr	r3, [pc, #212]	; (46ac <_ext_irq_init+0x188>)
    45d6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    45d8:	200d      	movs	r0, #13
    45da:	4b35      	ldr	r3, [pc, #212]	; (46b0 <_ext_irq_init+0x18c>)
    45dc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    45de:	200f      	movs	r0, #15
    45e0:	4b31      	ldr	r3, [pc, #196]	; (46a8 <_ext_irq_init+0x184>)
    45e2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    45e4:	200f      	movs	r0, #15
    45e6:	4b31      	ldr	r3, [pc, #196]	; (46ac <_ext_irq_init+0x188>)
    45e8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    45ea:	200f      	movs	r0, #15
    45ec:	4b30      	ldr	r3, [pc, #192]	; (46b0 <_ext_irq_init+0x18c>)
    45ee:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    45f0:	2010      	movs	r0, #16
    45f2:	4b2d      	ldr	r3, [pc, #180]	; (46a8 <_ext_irq_init+0x184>)
    45f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    45f6:	2010      	movs	r0, #16
    45f8:	4b2c      	ldr	r3, [pc, #176]	; (46ac <_ext_irq_init+0x188>)
    45fa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    45fc:	2010      	movs	r0, #16
    45fe:	4b2c      	ldr	r3, [pc, #176]	; (46b0 <_ext_irq_init+0x18c>)
    4600:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4602:	2011      	movs	r0, #17
    4604:	4b28      	ldr	r3, [pc, #160]	; (46a8 <_ext_irq_init+0x184>)
    4606:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4608:	2011      	movs	r0, #17
    460a:	4b28      	ldr	r3, [pc, #160]	; (46ac <_ext_irq_init+0x188>)
    460c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    460e:	2011      	movs	r0, #17
    4610:	4b27      	ldr	r3, [pc, #156]	; (46b0 <_ext_irq_init+0x18c>)
    4612:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4614:	2012      	movs	r0, #18
    4616:	4b24      	ldr	r3, [pc, #144]	; (46a8 <_ext_irq_init+0x184>)
    4618:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    461a:	2012      	movs	r0, #18
    461c:	4b23      	ldr	r3, [pc, #140]	; (46ac <_ext_irq_init+0x188>)
    461e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4620:	2012      	movs	r0, #18
    4622:	4b23      	ldr	r3, [pc, #140]	; (46b0 <_ext_irq_init+0x18c>)
    4624:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4626:	2013      	movs	r0, #19
    4628:	4b1f      	ldr	r3, [pc, #124]	; (46a8 <_ext_irq_init+0x184>)
    462a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    462c:	2013      	movs	r0, #19
    462e:	4b1f      	ldr	r3, [pc, #124]	; (46ac <_ext_irq_init+0x188>)
    4630:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4632:	2013      	movs	r0, #19
    4634:	4b1e      	ldr	r3, [pc, #120]	; (46b0 <_ext_irq_init+0x18c>)
    4636:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4638:	2014      	movs	r0, #20
    463a:	4b1b      	ldr	r3, [pc, #108]	; (46a8 <_ext_irq_init+0x184>)
    463c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    463e:	2014      	movs	r0, #20
    4640:	4b1a      	ldr	r3, [pc, #104]	; (46ac <_ext_irq_init+0x188>)
    4642:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4644:	2014      	movs	r0, #20
    4646:	4b1a      	ldr	r3, [pc, #104]	; (46b0 <_ext_irq_init+0x18c>)
    4648:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    464a:	2015      	movs	r0, #21
    464c:	4b16      	ldr	r3, [pc, #88]	; (46a8 <_ext_irq_init+0x184>)
    464e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4650:	2015      	movs	r0, #21
    4652:	4b16      	ldr	r3, [pc, #88]	; (46ac <_ext_irq_init+0x188>)
    4654:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4656:	2015      	movs	r0, #21
    4658:	4b15      	ldr	r3, [pc, #84]	; (46b0 <_ext_irq_init+0x18c>)
    465a:	4798      	blx	r3

	callback = cb;
    465c:	4a15      	ldr	r2, [pc, #84]	; (46b4 <_ext_irq_init+0x190>)
    465e:	687b      	ldr	r3, [r7, #4]
    4660:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4662:	2300      	movs	r3, #0
}
    4664:	4618      	mov	r0, r3
    4666:	3708      	adds	r7, #8
    4668:	46bd      	mov	sp, r7
    466a:	bd80      	pop	{r7, pc}
    466c:	40002800 	.word	0x40002800
    4670:	000042e5 	.word	0x000042e5
    4674:	00004415 	.word	0x00004415
    4678:	000043a5 	.word	0x000043a5
    467c:	000042c1 	.word	0x000042c1
    4680:	00004445 	.word	0x00004445
    4684:	000043d1 	.word	0x000043d1
    4688:	0000446d 	.word	0x0000446d
    468c:	0000448b 	.word	0x0000448b
    4690:	000044a7 	.word	0x000044a7
    4694:	000044eb 	.word	0x000044eb
    4698:	00004507 	.word	0x00004507
    469c:	90999013 	.word	0x90999013
    46a0:	000044c3 	.word	0x000044c3
    46a4:	00004379 	.word	0x00004379
    46a8:	00004241 	.word	0x00004241
    46ac:	00004285 	.word	0x00004285
    46b0:	00004205 	.word	0x00004205
    46b4:	20000c00 	.word	0x20000c00

000046b8 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    46b8:	b580      	push	{r7, lr}
    46ba:	b084      	sub	sp, #16
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
    46c0:	460b      	mov	r3, r1
    46c2:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    46c4:	23ff      	movs	r3, #255	; 0xff
    46c6:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    46c8:	2300      	movs	r3, #0
    46ca:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    46cc:	e010      	b.n	46f0 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    46ce:	7bbb      	ldrb	r3, [r7, #14]
    46d0:	4a1c      	ldr	r2, [pc, #112]	; (4744 <_ext_irq_enable+0x8c>)
    46d2:	00db      	lsls	r3, r3, #3
    46d4:	4413      	add	r3, r2
    46d6:	685a      	ldr	r2, [r3, #4]
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	429a      	cmp	r2, r3
    46dc:	d105      	bne.n	46ea <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    46de:	7bbb      	ldrb	r3, [r7, #14]
    46e0:	4a18      	ldr	r2, [pc, #96]	; (4744 <_ext_irq_enable+0x8c>)
    46e2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    46e6:	73fb      	strb	r3, [r7, #15]
			break;
    46e8:	e005      	b.n	46f6 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    46ea:	7bbb      	ldrb	r3, [r7, #14]
    46ec:	3301      	adds	r3, #1
    46ee:	73bb      	strb	r3, [r7, #14]
    46f0:	7bbb      	ldrb	r3, [r7, #14]
    46f2:	2b08      	cmp	r3, #8
    46f4:	d9eb      	bls.n	46ce <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    46f6:	7bfb      	ldrb	r3, [r7, #15]
    46f8:	2bff      	cmp	r3, #255	; 0xff
    46fa:	d102      	bne.n	4702 <_ext_irq_enable+0x4a>
		return -1;
    46fc:	f04f 33ff 	mov.w	r3, #4294967295
    4700:	e01c      	b.n	473c <_ext_irq_enable+0x84>
	}

	if (enable) {
    4702:	78fb      	ldrb	r3, [r7, #3]
    4704:	2b00      	cmp	r3, #0
    4706:	d008      	beq.n	471a <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4708:	7bfb      	ldrb	r3, [r7, #15]
    470a:	2201      	movs	r2, #1
    470c:	fa02 f303 	lsl.w	r3, r2, r3
    4710:	4619      	mov	r1, r3
    4712:	480d      	ldr	r0, [pc, #52]	; (4748 <_ext_irq_enable+0x90>)
    4714:	4b0d      	ldr	r3, [pc, #52]	; (474c <_ext_irq_enable+0x94>)
    4716:	4798      	blx	r3
    4718:	e00f      	b.n	473a <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    471a:	7bfb      	ldrb	r3, [r7, #15]
    471c:	2201      	movs	r2, #1
    471e:	fa02 f303 	lsl.w	r3, r2, r3
    4722:	4619      	mov	r1, r3
    4724:	4808      	ldr	r0, [pc, #32]	; (4748 <_ext_irq_enable+0x90>)
    4726:	4b0a      	ldr	r3, [pc, #40]	; (4750 <_ext_irq_enable+0x98>)
    4728:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    472a:	7bfb      	ldrb	r3, [r7, #15]
    472c:	2201      	movs	r2, #1
    472e:	fa02 f303 	lsl.w	r3, r2, r3
    4732:	4619      	mov	r1, r3
    4734:	4804      	ldr	r0, [pc, #16]	; (4748 <_ext_irq_enable+0x90>)
    4736:	4b07      	ldr	r3, [pc, #28]	; (4754 <_ext_irq_enable+0x9c>)
    4738:	4798      	blx	r3
	}

	return ERR_NONE;
    473a:	2300      	movs	r3, #0
}
    473c:	4618      	mov	r0, r3
    473e:	3710      	adds	r7, #16
    4740:	46bd      	mov	sp, r7
    4742:	bd80      	pop	{r7, pc}
    4744:	000108e8 	.word	0x000108e8
    4748:	40002800 	.word	0x40002800
    474c:	00004341 	.word	0x00004341
    4750:	0000435d 	.word	0x0000435d
    4754:	00004325 	.word	0x00004325

00004758 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4758:	b580      	push	{r7, lr}
    475a:	b084      	sub	sp, #16
    475c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    475e:	4841      	ldr	r0, [pc, #260]	; (4864 <_ext_irq_handler+0x10c>)
    4760:	4b41      	ldr	r3, [pc, #260]	; (4868 <_ext_irq_handler+0x110>)
    4762:	4798      	blx	r3
    4764:	4603      	mov	r3, r0
    4766:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4768:	f04f 33ff 	mov.w	r3, #4294967295
    476c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    476e:	683b      	ldr	r3, [r7, #0]
    4770:	4619      	mov	r1, r3
    4772:	483c      	ldr	r0, [pc, #240]	; (4864 <_ext_irq_handler+0x10c>)
    4774:	4b3d      	ldr	r3, [pc, #244]	; (486c <_ext_irq_handler+0x114>)
    4776:	4798      	blx	r3

	ASSERT(callback);
    4778:	4b3d      	ldr	r3, [pc, #244]	; (4870 <_ext_irq_handler+0x118>)
    477a:	681b      	ldr	r3, [r3, #0]
    477c:	2b00      	cmp	r3, #0
    477e:	bf14      	ite	ne
    4780:	2301      	movne	r3, #1
    4782:	2300      	moveq	r3, #0
    4784:	b2db      	uxtb	r3, r3
    4786:	f44f 7284 	mov.w	r2, #264	; 0x108
    478a:	493a      	ldr	r1, [pc, #232]	; (4874 <_ext_irq_handler+0x11c>)
    478c:	4618      	mov	r0, r3
    478e:	4b3a      	ldr	r3, [pc, #232]	; (4878 <_ext_irq_handler+0x120>)
    4790:	4798      	blx	r3

	while (flags) {
    4792:	e060      	b.n	4856 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4794:	683b      	ldr	r3, [r7, #0]
    4796:	4618      	mov	r0, r3
    4798:	4b38      	ldr	r3, [pc, #224]	; (487c <_ext_irq_handler+0x124>)
    479a:	4798      	blx	r3
    479c:	4603      	mov	r3, r0
    479e:	b2db      	uxtb	r3, r3
    47a0:	3b01      	subs	r3, #1
    47a2:	b2db      	uxtb	r3, r3
    47a4:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    47a6:	e047      	b.n	4838 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    47a8:	2300      	movs	r3, #0
    47aa:	71fb      	strb	r3, [r7, #7]
    47ac:	2309      	movs	r3, #9
    47ae:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    47b0:	e024      	b.n	47fc <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    47b2:	79ba      	ldrb	r2, [r7, #6]
    47b4:	79fb      	ldrb	r3, [r7, #7]
    47b6:	4413      	add	r3, r2
    47b8:	105b      	asrs	r3, r3, #1
    47ba:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    47bc:	797b      	ldrb	r3, [r7, #5]
    47be:	4a30      	ldr	r2, [pc, #192]	; (4880 <_ext_irq_handler+0x128>)
    47c0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    47c4:	461a      	mov	r2, r3
    47c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    47ca:	429a      	cmp	r2, r3
    47cc:	d106      	bne.n	47dc <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    47ce:	797b      	ldrb	r3, [r7, #5]
    47d0:	4a2b      	ldr	r2, [pc, #172]	; (4880 <_ext_irq_handler+0x128>)
    47d2:	00db      	lsls	r3, r3, #3
    47d4:	4413      	add	r3, r2
    47d6:	685b      	ldr	r3, [r3, #4]
    47d8:	60bb      	str	r3, [r7, #8]
					break;
    47da:	e013      	b.n	4804 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    47dc:	797b      	ldrb	r3, [r7, #5]
    47de:	4a28      	ldr	r2, [pc, #160]	; (4880 <_ext_irq_handler+0x128>)
    47e0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    47e4:	461a      	mov	r2, r3
    47e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    47ea:	429a      	cmp	r2, r3
    47ec:	da03      	bge.n	47f6 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    47ee:	797b      	ldrb	r3, [r7, #5]
    47f0:	3301      	adds	r3, #1
    47f2:	71fb      	strb	r3, [r7, #7]
    47f4:	e002      	b.n	47fc <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    47f6:	797b      	ldrb	r3, [r7, #5]
    47f8:	3b01      	subs	r3, #1
    47fa:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    47fc:	79ba      	ldrb	r2, [r7, #6]
    47fe:	79fb      	ldrb	r3, [r7, #7]
    4800:	429a      	cmp	r2, r3
    4802:	d2d6      	bcs.n	47b2 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4804:	68bb      	ldr	r3, [r7, #8]
    4806:	f1b3 3fff 	cmp.w	r3, #4294967295
    480a:	d003      	beq.n	4814 <_ext_irq_handler+0xbc>
				callback(pin);
    480c:	4b18      	ldr	r3, [pc, #96]	; (4870 <_ext_irq_handler+0x118>)
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	68b8      	ldr	r0, [r7, #8]
    4812:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4814:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4818:	2201      	movs	r2, #1
    481a:	fa02 f303 	lsl.w	r3, r2, r3
    481e:	43da      	mvns	r2, r3
    4820:	683b      	ldr	r3, [r7, #0]
    4822:	4013      	ands	r3, r2
    4824:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4826:	683b      	ldr	r3, [r7, #0]
    4828:	4618      	mov	r0, r3
    482a:	4b14      	ldr	r3, [pc, #80]	; (487c <_ext_irq_handler+0x124>)
    482c:	4798      	blx	r3
    482e:	4603      	mov	r3, r0
    4830:	b2db      	uxtb	r3, r3
    4832:	3b01      	subs	r3, #1
    4834:	b2db      	uxtb	r3, r3
    4836:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4838:	f997 300f 	ldrsb.w	r3, [r7, #15]
    483c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4840:	d1b2      	bne.n	47a8 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4842:	4808      	ldr	r0, [pc, #32]	; (4864 <_ext_irq_handler+0x10c>)
    4844:	4b08      	ldr	r3, [pc, #32]	; (4868 <_ext_irq_handler+0x110>)
    4846:	4798      	blx	r3
    4848:	4603      	mov	r3, r0
    484a:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    484c:	683b      	ldr	r3, [r7, #0]
    484e:	4619      	mov	r1, r3
    4850:	4804      	ldr	r0, [pc, #16]	; (4864 <_ext_irq_handler+0x10c>)
    4852:	4b06      	ldr	r3, [pc, #24]	; (486c <_ext_irq_handler+0x114>)
    4854:	4798      	blx	r3
	while (flags) {
    4856:	683b      	ldr	r3, [r7, #0]
    4858:	2b00      	cmp	r3, #0
    485a:	d19b      	bne.n	4794 <_ext_irq_handler+0x3c>
	}
}
    485c:	bf00      	nop
    485e:	3710      	adds	r7, #16
    4860:	46bd      	mov	sp, r7
    4862:	bd80      	pop	{r7, pc}
    4864:	40002800 	.word	0x40002800
    4868:	0000430d 	.word	0x0000430d
    486c:	00004325 	.word	0x00004325
    4870:	20000c00 	.word	0x20000c00
    4874:	00010930 	.word	0x00010930
    4878:	000038e1 	.word	0x000038e1
    487c:	00010229 	.word	0x00010229
    4880:	000108e8 	.word	0x000108e8

00004884 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4884:	b580      	push	{r7, lr}
    4886:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4888:	4b01      	ldr	r3, [pc, #4]	; (4890 <EIC_0_Handler+0xc>)
    488a:	4798      	blx	r3
} /**
    488c:	bf00      	nop
    488e:	bd80      	pop	{r7, pc}
    4890:	00004759 	.word	0x00004759

00004894 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4894:	b580      	push	{r7, lr}
    4896:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4898:	4b01      	ldr	r3, [pc, #4]	; (48a0 <EIC_1_Handler+0xc>)
    489a:	4798      	blx	r3
} /**
    489c:	bf00      	nop
    489e:	bd80      	pop	{r7, pc}
    48a0:	00004759 	.word	0x00004759

000048a4 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    48a4:	b580      	push	{r7, lr}
    48a6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    48a8:	4b01      	ldr	r3, [pc, #4]	; (48b0 <EIC_3_Handler+0xc>)
    48aa:	4798      	blx	r3
} /**
    48ac:	bf00      	nop
    48ae:	bd80      	pop	{r7, pc}
    48b0:	00004759 	.word	0x00004759

000048b4 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    48b4:	b580      	push	{r7, lr}
    48b6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    48b8:	4b01      	ldr	r3, [pc, #4]	; (48c0 <EIC_4_Handler+0xc>)
    48ba:	4798      	blx	r3
} /**
    48bc:	bf00      	nop
    48be:	bd80      	pop	{r7, pc}
    48c0:	00004759 	.word	0x00004759

000048c4 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    48c4:	b580      	push	{r7, lr}
    48c6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    48c8:	4b01      	ldr	r3, [pc, #4]	; (48d0 <EIC_5_Handler+0xc>)
    48ca:	4798      	blx	r3
} /**
    48cc:	bf00      	nop
    48ce:	bd80      	pop	{r7, pc}
    48d0:	00004759 	.word	0x00004759

000048d4 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    48d4:	b580      	push	{r7, lr}
    48d6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    48d8:	4b01      	ldr	r3, [pc, #4]	; (48e0 <EIC_6_Handler+0xc>)
    48da:	4798      	blx	r3
} /**
    48dc:	bf00      	nop
    48de:	bd80      	pop	{r7, pc}
    48e0:	00004759 	.word	0x00004759

000048e4 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    48e4:	b580      	push	{r7, lr}
    48e6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    48e8:	4b01      	ldr	r3, [pc, #4]	; (48f0 <EIC_7_Handler+0xc>)
    48ea:	4798      	blx	r3
} /**
    48ec:	bf00      	nop
    48ee:	bd80      	pop	{r7, pc}
    48f0:	00004759 	.word	0x00004759

000048f4 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    48f4:	b580      	push	{r7, lr}
    48f6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    48f8:	4b01      	ldr	r3, [pc, #4]	; (4900 <EIC_8_Handler+0xc>)
    48fa:	4798      	blx	r3
} /**
    48fc:	bf00      	nop
    48fe:	bd80      	pop	{r7, pc}
    4900:	00004759 	.word	0x00004759

00004904 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4904:	b580      	push	{r7, lr}
    4906:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4908:	4b01      	ldr	r3, [pc, #4]	; (4910 <EIC_9_Handler+0xc>)
    490a:	4798      	blx	r3
}
    490c:	bf00      	nop
    490e:	bd80      	pop	{r7, pc}
    4910:	00004759 	.word	0x00004759

00004914 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4914:	b480      	push	{r7}
    4916:	b085      	sub	sp, #20
    4918:	af00      	add	r7, sp, #0
    491a:	60f8      	str	r0, [r7, #12]
    491c:	460b      	mov	r3, r1
    491e:	607a      	str	r2, [r7, #4]
    4920:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4922:	7afa      	ldrb	r2, [r7, #11]
    4924:	68fb      	ldr	r3, [r7, #12]
    4926:	3248      	adds	r2, #72	; 0x48
    4928:	6879      	ldr	r1, [r7, #4]
    492a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    492e:	bf00      	nop
    4930:	3714      	adds	r7, #20
    4932:	46bd      	mov	sp, r7
    4934:	f85d 7b04 	ldr.w	r7, [sp], #4
    4938:	4770      	bx	lr

0000493a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    493a:	b480      	push	{r7}
    493c:	b083      	sub	sp, #12
    493e:	af00      	add	r7, sp, #0
    4940:	6078      	str	r0, [r7, #4]
    4942:	460b      	mov	r3, r1
    4944:	70fb      	strb	r3, [r7, #3]
    4946:	4613      	mov	r3, r2
    4948:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    494a:	78fb      	ldrb	r3, [r7, #3]
    494c:	687a      	ldr	r2, [r7, #4]
    494e:	3304      	adds	r3, #4
    4950:	00db      	lsls	r3, r3, #3
    4952:	4413      	add	r3, r2
    4954:	78ba      	ldrb	r2, [r7, #2]
    4956:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4958:	78fb      	ldrb	r3, [r7, #3]
    495a:	78ba      	ldrb	r2, [r7, #2]
    495c:	43d2      	mvns	r2, r2
    495e:	b2d1      	uxtb	r1, r2
    4960:	687a      	ldr	r2, [r7, #4]
    4962:	3304      	adds	r3, #4
    4964:	00db      	lsls	r3, r3, #3
    4966:	4413      	add	r3, r2
    4968:	460a      	mov	r2, r1
    496a:	711a      	strb	r2, [r3, #4]
}
    496c:	bf00      	nop
    496e:	370c      	adds	r7, #12
    4970:	46bd      	mov	sp, r7
    4972:	f85d 7b04 	ldr.w	r7, [sp], #4
    4976:	4770      	bx	lr

00004978 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4978:	b480      	push	{r7}
    497a:	b085      	sub	sp, #20
    497c:	af00      	add	r7, sp, #0
    497e:	60f8      	str	r0, [r7, #12]
    4980:	460b      	mov	r3, r1
    4982:	607a      	str	r2, [r7, #4]
    4984:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4986:	7afa      	ldrb	r2, [r7, #11]
    4988:	68fb      	ldr	r3, [r7, #12]
    498a:	3204      	adds	r2, #4
    498c:	6879      	ldr	r1, [r7, #4]
    498e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4992:	bf00      	nop
    4994:	3714      	adds	r7, #20
    4996:	46bd      	mov	sp, r7
    4998:	f85d 7b04 	ldr.w	r7, [sp], #4
    499c:	4770      	bx	lr
	...

000049a0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    49a0:	b580      	push	{r7, lr}
    49a2:	b082      	sub	sp, #8
    49a4:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    49a6:	2300      	movs	r3, #0
    49a8:	71fb      	strb	r3, [r7, #7]
    49aa:	e00b      	b.n	49c4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    49ac:	79fb      	ldrb	r3, [r7, #7]
    49ae:	4a18      	ldr	r2, [pc, #96]	; (4a10 <_event_system_init+0x70>)
    49b0:	5cd3      	ldrb	r3, [r2, r3]
    49b2:	461a      	mov	r2, r3
    49b4:	79fb      	ldrb	r3, [r7, #7]
    49b6:	4619      	mov	r1, r3
    49b8:	4816      	ldr	r0, [pc, #88]	; (4a14 <_event_system_init+0x74>)
    49ba:	4b17      	ldr	r3, [pc, #92]	; (4a18 <_event_system_init+0x78>)
    49bc:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    49be:	79fb      	ldrb	r3, [r7, #7]
    49c0:	3301      	adds	r3, #1
    49c2:	71fb      	strb	r3, [r7, #7]
    49c4:	79fb      	ldrb	r3, [r7, #7]
    49c6:	2b42      	cmp	r3, #66	; 0x42
    49c8:	d9f0      	bls.n	49ac <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    49ca:	2300      	movs	r3, #0
    49cc:	71fb      	strb	r3, [r7, #7]
    49ce:	e016      	b.n	49fe <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    49d0:	79fb      	ldrb	r3, [r7, #7]
    49d2:	4a12      	ldr	r2, [pc, #72]	; (4a1c <_event_system_init+0x7c>)
    49d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    49d8:	461a      	mov	r2, r3
    49da:	79fb      	ldrb	r3, [r7, #7]
    49dc:	4619      	mov	r1, r3
    49de:	480d      	ldr	r0, [pc, #52]	; (4a14 <_event_system_init+0x74>)
    49e0:	4b0f      	ldr	r3, [pc, #60]	; (4a20 <_event_system_init+0x80>)
    49e2:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    49e4:	79fb      	ldrb	r3, [r7, #7]
    49e6:	4a0f      	ldr	r2, [pc, #60]	; (4a24 <_event_system_init+0x84>)
    49e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    49ec:	b2da      	uxtb	r2, r3
    49ee:	79fb      	ldrb	r3, [r7, #7]
    49f0:	4619      	mov	r1, r3
    49f2:	4808      	ldr	r0, [pc, #32]	; (4a14 <_event_system_init+0x74>)
    49f4:	4b0c      	ldr	r3, [pc, #48]	; (4a28 <_event_system_init+0x88>)
    49f6:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    49f8:	79fb      	ldrb	r3, [r7, #7]
    49fa:	3301      	adds	r3, #1
    49fc:	71fb      	strb	r3, [r7, #7]
    49fe:	79fb      	ldrb	r3, [r7, #7]
    4a00:	2b1f      	cmp	r3, #31
    4a02:	d9e5      	bls.n	49d0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4a04:	2300      	movs	r3, #0
}
    4a06:	4618      	mov	r0, r3
    4a08:	3708      	adds	r7, #8
    4a0a:	46bd      	mov	sp, r7
    4a0c:	bd80      	pop	{r7, pc}
    4a0e:	bf00      	nop
    4a10:	00010948 	.word	0x00010948
    4a14:	4100e000 	.word	0x4100e000
    4a18:	00004915 	.word	0x00004915
    4a1c:	0001098c 	.word	0x0001098c
    4a20:	00004979 	.word	0x00004979
    4a24:	000109cc 	.word	0x000109cc
    4a28:	0000493b 	.word	0x0000493b

00004a2c <hri_gclk_wait_for_sync>:
{
    4a2c:	b480      	push	{r7}
    4a2e:	b083      	sub	sp, #12
    4a30:	af00      	add	r7, sp, #0
    4a32:	6078      	str	r0, [r7, #4]
    4a34:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4a36:	bf00      	nop
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	685a      	ldr	r2, [r3, #4]
    4a3c:	683b      	ldr	r3, [r7, #0]
    4a3e:	4013      	ands	r3, r2
    4a40:	2b00      	cmp	r3, #0
    4a42:	d1f9      	bne.n	4a38 <hri_gclk_wait_for_sync+0xc>
}
    4a44:	bf00      	nop
    4a46:	370c      	adds	r7, #12
    4a48:	46bd      	mov	sp, r7
    4a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a4e:	4770      	bx	lr

00004a50 <hri_gclk_write_GENCTRL_reg>:
{
    4a50:	b580      	push	{r7, lr}
    4a52:	b084      	sub	sp, #16
    4a54:	af00      	add	r7, sp, #0
    4a56:	60f8      	str	r0, [r7, #12]
    4a58:	460b      	mov	r3, r1
    4a5a:	607a      	str	r2, [r7, #4]
    4a5c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4a5e:	7afa      	ldrb	r2, [r7, #11]
    4a60:	68fb      	ldr	r3, [r7, #12]
    4a62:	3208      	adds	r2, #8
    4a64:	6879      	ldr	r1, [r7, #4]
    4a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4a6a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4a6e:	68f8      	ldr	r0, [r7, #12]
    4a70:	4b02      	ldr	r3, [pc, #8]	; (4a7c <hri_gclk_write_GENCTRL_reg+0x2c>)
    4a72:	4798      	blx	r3
}
    4a74:	bf00      	nop
    4a76:	3710      	adds	r7, #16
    4a78:	46bd      	mov	sp, r7
    4a7a:	bd80      	pop	{r7, pc}
    4a7c:	00004a2d 	.word	0x00004a2d

00004a80 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4a80:	b580      	push	{r7, lr}
    4a82:	b082      	sub	sp, #8
    4a84:	af00      	add	r7, sp, #0
    4a86:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	f003 0301 	and.w	r3, r3, #1
    4a8e:	2b00      	cmp	r3, #0
    4a90:	d004      	beq.n	4a9c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4a92:	4a3b      	ldr	r2, [pc, #236]	; (4b80 <_gclk_init_generators_by_fref+0x100>)
    4a94:	2100      	movs	r1, #0
    4a96:	483b      	ldr	r0, [pc, #236]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4a98:	4b3b      	ldr	r3, [pc, #236]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4a9a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	f003 0302 	and.w	r3, r3, #2
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d004      	beq.n	4ab0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4aa6:	4a39      	ldr	r2, [pc, #228]	; (4b8c <_gclk_init_generators_by_fref+0x10c>)
    4aa8:	2101      	movs	r1, #1
    4aaa:	4836      	ldr	r0, [pc, #216]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4aac:	4b36      	ldr	r3, [pc, #216]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4aae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4ab0:	687b      	ldr	r3, [r7, #4]
    4ab2:	f003 0304 	and.w	r3, r3, #4
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d004      	beq.n	4ac4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4aba:	4a35      	ldr	r2, [pc, #212]	; (4b90 <_gclk_init_generators_by_fref+0x110>)
    4abc:	2102      	movs	r1, #2
    4abe:	4831      	ldr	r0, [pc, #196]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4ac0:	4b31      	ldr	r3, [pc, #196]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4ac2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	f003 0308 	and.w	r3, r3, #8
    4aca:	2b00      	cmp	r3, #0
    4acc:	d004      	beq.n	4ad8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4ace:	4a31      	ldr	r2, [pc, #196]	; (4b94 <_gclk_init_generators_by_fref+0x114>)
    4ad0:	2103      	movs	r1, #3
    4ad2:	482c      	ldr	r0, [pc, #176]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4ad4:	4b2c      	ldr	r3, [pc, #176]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4ad6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	f003 0310 	and.w	r3, r3, #16
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d004      	beq.n	4aec <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4ae2:	4a2d      	ldr	r2, [pc, #180]	; (4b98 <_gclk_init_generators_by_fref+0x118>)
    4ae4:	2104      	movs	r1, #4
    4ae6:	4827      	ldr	r0, [pc, #156]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4ae8:	4b27      	ldr	r3, [pc, #156]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4aea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	f003 0320 	and.w	r3, r3, #32
    4af2:	2b00      	cmp	r3, #0
    4af4:	d004      	beq.n	4b00 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4af6:	4a29      	ldr	r2, [pc, #164]	; (4b9c <_gclk_init_generators_by_fref+0x11c>)
    4af8:	2105      	movs	r1, #5
    4afa:	4822      	ldr	r0, [pc, #136]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4afc:	4b22      	ldr	r3, [pc, #136]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4afe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4b06:	2b00      	cmp	r3, #0
    4b08:	d004      	beq.n	4b14 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4b0a:	4a25      	ldr	r2, [pc, #148]	; (4ba0 <_gclk_init_generators_by_fref+0x120>)
    4b0c:	2106      	movs	r1, #6
    4b0e:	481d      	ldr	r0, [pc, #116]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4b10:	4b1d      	ldr	r3, [pc, #116]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4b12:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d004      	beq.n	4b28 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4b1e:	4a21      	ldr	r2, [pc, #132]	; (4ba4 <_gclk_init_generators_by_fref+0x124>)
    4b20:	2107      	movs	r1, #7
    4b22:	4818      	ldr	r0, [pc, #96]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4b24:	4b18      	ldr	r3, [pc, #96]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4b26:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d004      	beq.n	4b3c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4b32:	4a1d      	ldr	r2, [pc, #116]	; (4ba8 <_gclk_init_generators_by_fref+0x128>)
    4b34:	2108      	movs	r1, #8
    4b36:	4813      	ldr	r0, [pc, #76]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4b38:	4b13      	ldr	r3, [pc, #76]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4b3a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4b42:	2b00      	cmp	r3, #0
    4b44:	d004      	beq.n	4b50 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4b46:	4a19      	ldr	r2, [pc, #100]	; (4bac <_gclk_init_generators_by_fref+0x12c>)
    4b48:	2109      	movs	r1, #9
    4b4a:	480e      	ldr	r0, [pc, #56]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4b4c:	4b0e      	ldr	r3, [pc, #56]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4b4e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4b50:	687b      	ldr	r3, [r7, #4]
    4b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4b56:	2b00      	cmp	r3, #0
    4b58:	d004      	beq.n	4b64 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4b5a:	4a15      	ldr	r2, [pc, #84]	; (4bb0 <_gclk_init_generators_by_fref+0x130>)
    4b5c:	210a      	movs	r1, #10
    4b5e:	4809      	ldr	r0, [pc, #36]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4b60:	4b09      	ldr	r3, [pc, #36]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4b62:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d004      	beq.n	4b78 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4b6e:	4a11      	ldr	r2, [pc, #68]	; (4bb4 <_gclk_init_generators_by_fref+0x134>)
    4b70:	210b      	movs	r1, #11
    4b72:	4804      	ldr	r0, [pc, #16]	; (4b84 <_gclk_init_generators_by_fref+0x104>)
    4b74:	4b04      	ldr	r3, [pc, #16]	; (4b88 <_gclk_init_generators_by_fref+0x108>)
    4b76:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4b78:	bf00      	nop
    4b7a:	3708      	adds	r7, #8
    4b7c:	46bd      	mov	sp, r7
    4b7e:	bd80      	pop	{r7, pc}
    4b80:	00010107 	.word	0x00010107
    4b84:	40001c00 	.word	0x40001c00
    4b88:	00004a51 	.word	0x00004a51
    4b8c:	00010907 	.word	0x00010907
    4b90:	00010906 	.word	0x00010906
    4b94:	00020908 	.word	0x00020908
    4b98:	00010901 	.word	0x00010901
    4b9c:	00062901 	.word	0x00062901
    4ba0:	000c2901 	.word	0x000c2901
    4ba4:	00082908 	.word	0x00082908
    4ba8:	00032901 	.word	0x00032901
    4bac:	00011908 	.word	0x00011908
    4bb0:	00010905 	.word	0x00010905
    4bb4:	00041905 	.word	0x00041905

00004bb8 <hri_mclk_write_CPUDIV_reg>:
{
    4bb8:	b480      	push	{r7}
    4bba:	b083      	sub	sp, #12
    4bbc:	af00      	add	r7, sp, #0
    4bbe:	6078      	str	r0, [r7, #4]
    4bc0:	460b      	mov	r3, r1
    4bc2:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	78fa      	ldrb	r2, [r7, #3]
    4bc8:	715a      	strb	r2, [r3, #5]
}
    4bca:	bf00      	nop
    4bcc:	370c      	adds	r7, #12
    4bce:	46bd      	mov	sp, r7
    4bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bd4:	4770      	bx	lr
	...

00004bd8 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4bd8:	b580      	push	{r7, lr}
    4bda:	b082      	sub	sp, #8
    4bdc:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4bde:	4b05      	ldr	r3, [pc, #20]	; (4bf4 <_mclk_init+0x1c>)
    4be0:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4be2:	2101      	movs	r1, #1
    4be4:	6878      	ldr	r0, [r7, #4]
    4be6:	4b04      	ldr	r3, [pc, #16]	; (4bf8 <_mclk_init+0x20>)
    4be8:	4798      	blx	r3
}
    4bea:	bf00      	nop
    4bec:	3708      	adds	r7, #8
    4bee:	46bd      	mov	sp, r7
    4bf0:	bd80      	pop	{r7, pc}
    4bf2:	bf00      	nop
    4bf4:	40000800 	.word	0x40000800
    4bf8:	00004bb9 	.word	0x00004bb9

00004bfc <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4bfc:	b480      	push	{r7}
    4bfe:	b083      	sub	sp, #12
    4c00:	af00      	add	r7, sp, #0
    4c02:	6078      	str	r0, [r7, #4]
    4c04:	460b      	mov	r3, r1
    4c06:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	78fa      	ldrb	r2, [r7, #3]
    4c0c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4c0e:	bf00      	nop
    4c10:	370c      	adds	r7, #12
    4c12:	46bd      	mov	sp, r7
    4c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c18:	4770      	bx	lr

00004c1a <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4c1a:	b480      	push	{r7}
    4c1c:	b083      	sub	sp, #12
    4c1e:	af00      	add	r7, sp, #0
    4c20:	6078      	str	r0, [r7, #4]
    4c22:	460b      	mov	r3, r1
    4c24:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4c26:	687b      	ldr	r3, [r7, #4]
    4c28:	887a      	ldrh	r2, [r7, #2]
    4c2a:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4c2c:	bf00      	nop
    4c2e:	370c      	adds	r7, #12
    4c30:	46bd      	mov	sp, r7
    4c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c36:	4770      	bx	lr

00004c38 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4c38:	b480      	push	{r7}
    4c3a:	b083      	sub	sp, #12
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
    4c40:	460b      	mov	r3, r1
    4c42:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	78fa      	ldrb	r2, [r7, #3]
    4c48:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4c4a:	bf00      	nop
    4c4c:	370c      	adds	r7, #12
    4c4e:	46bd      	mov	sp, r7
    4c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c54:	4770      	bx	lr

00004c56 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4c56:	b480      	push	{r7}
    4c58:	b083      	sub	sp, #12
    4c5a:	af00      	add	r7, sp, #0
    4c5c:	6078      	str	r0, [r7, #4]
    4c5e:	460b      	mov	r3, r1
    4c60:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4c62:	687b      	ldr	r3, [r7, #4]
    4c64:	78fa      	ldrb	r2, [r7, #3]
    4c66:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4c68:	bf00      	nop
    4c6a:	370c      	adds	r7, #12
    4c6c:	46bd      	mov	sp, r7
    4c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c72:	4770      	bx	lr

00004c74 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4c74:	b480      	push	{r7}
    4c76:	b085      	sub	sp, #20
    4c78:	af00      	add	r7, sp, #0
    4c7a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	69db      	ldr	r3, [r3, #28]
    4c80:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4c82:	68fb      	ldr	r3, [r7, #12]
    4c84:	0a1b      	lsrs	r3, r3, #8
    4c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c8a:	60fb      	str	r3, [r7, #12]
	return tmp;
    4c8c:	68fb      	ldr	r3, [r7, #12]
}
    4c8e:	4618      	mov	r0, r3
    4c90:	3714      	adds	r7, #20
    4c92:	46bd      	mov	sp, r7
    4c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c98:	4770      	bx	lr

00004c9a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4c9a:	b480      	push	{r7}
    4c9c:	b083      	sub	sp, #12
    4c9e:	af00      	add	r7, sp, #0
    4ca0:	6078      	str	r0, [r7, #4]
    4ca2:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	683a      	ldr	r2, [r7, #0]
    4ca8:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4caa:	bf00      	nop
    4cac:	370c      	adds	r7, #12
    4cae:	46bd      	mov	sp, r7
    4cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cb4:	4770      	bx	lr
	...

00004cb8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	b082      	sub	sp, #8
    4cbc:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4cbe:	4b13      	ldr	r3, [pc, #76]	; (4d0c <_osc32kctrl_init_sources+0x54>)
    4cc0:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4cc2:	2300      	movs	r3, #0
    4cc4:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4cc6:	f242 018e 	movw	r1, #8334	; 0x208e
    4cca:	6878      	ldr	r0, [r7, #4]
    4ccc:	4b10      	ldr	r3, [pc, #64]	; (4d10 <_osc32kctrl_init_sources+0x58>)
    4cce:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4cd0:	2100      	movs	r1, #0
    4cd2:	6878      	ldr	r0, [r7, #4]
    4cd4:	4b0f      	ldr	r3, [pc, #60]	; (4d14 <_osc32kctrl_init_sources+0x5c>)
    4cd6:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4cd8:	2100      	movs	r1, #0
    4cda:	6878      	ldr	r0, [r7, #4]
    4cdc:	4b0e      	ldr	r3, [pc, #56]	; (4d18 <_osc32kctrl_init_sources+0x60>)
    4cde:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4ce0:	6878      	ldr	r0, [r7, #4]
    4ce2:	4b0e      	ldr	r3, [pc, #56]	; (4d1c <_osc32kctrl_init_sources+0x64>)
    4ce4:	4798      	blx	r3
    4ce6:	4603      	mov	r3, r0
    4ce8:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4cea:	887b      	ldrh	r3, [r7, #2]
    4cec:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4cee:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4cf2:	4619      	mov	r1, r3
    4cf4:	6878      	ldr	r0, [r7, #4]
    4cf6:	4b0a      	ldr	r3, [pc, #40]	; (4d20 <_osc32kctrl_init_sources+0x68>)
    4cf8:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4cfa:	2100      	movs	r1, #0
    4cfc:	6878      	ldr	r0, [r7, #4]
    4cfe:	4b09      	ldr	r3, [pc, #36]	; (4d24 <_osc32kctrl_init_sources+0x6c>)
    4d00:	4798      	blx	r3
	(void)calib;
}
    4d02:	bf00      	nop
    4d04:	3708      	adds	r7, #8
    4d06:	46bd      	mov	sp, r7
    4d08:	bd80      	pop	{r7, pc}
    4d0a:	bf00      	nop
    4d0c:	40001400 	.word	0x40001400
    4d10:	00004c1b 	.word	0x00004c1b
    4d14:	00004c39 	.word	0x00004c39
    4d18:	00004c57 	.word	0x00004c57
    4d1c:	00004c75 	.word	0x00004c75
    4d20:	00004c9b 	.word	0x00004c9b
    4d24:	00004bfd 	.word	0x00004bfd

00004d28 <hri_gclk_wait_for_sync>:
{
    4d28:	b480      	push	{r7}
    4d2a:	b083      	sub	sp, #12
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
    4d30:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4d32:	bf00      	nop
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	685a      	ldr	r2, [r3, #4]
    4d38:	683b      	ldr	r3, [r7, #0]
    4d3a:	4013      	ands	r3, r2
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d1f9      	bne.n	4d34 <hri_gclk_wait_for_sync+0xc>
}
    4d40:	bf00      	nop
    4d42:	370c      	adds	r7, #12
    4d44:	46bd      	mov	sp, r7
    4d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4a:	4770      	bx	lr

00004d4c <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4d4c:	b480      	push	{r7}
    4d4e:	b083      	sub	sp, #12
    4d50:	af00      	add	r7, sp, #0
    4d52:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4d54:	687b      	ldr	r3, [r7, #4]
    4d56:	685b      	ldr	r3, [r3, #4]
    4d58:	089b      	lsrs	r3, r3, #2
    4d5a:	f003 0301 	and.w	r3, r3, #1
    4d5e:	2b00      	cmp	r3, #0
    4d60:	bf14      	ite	ne
    4d62:	2301      	movne	r3, #1
    4d64:	2300      	moveq	r3, #0
    4d66:	b2db      	uxtb	r3, r3
}
    4d68:	4618      	mov	r0, r3
    4d6a:	370c      	adds	r7, #12
    4d6c:	46bd      	mov	sp, r7
    4d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d72:	4770      	bx	lr

00004d74 <hri_gclk_read_SYNCBUSY_reg>:
{
    4d74:	b480      	push	{r7}
    4d76:	b083      	sub	sp, #12
    4d78:	af00      	add	r7, sp, #0
    4d7a:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4d7c:	687b      	ldr	r3, [r7, #4]
    4d7e:	685b      	ldr	r3, [r3, #4]
}
    4d80:	4618      	mov	r0, r3
    4d82:	370c      	adds	r7, #12
    4d84:	46bd      	mov	sp, r7
    4d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d8a:	4770      	bx	lr

00004d8c <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4d8c:	b580      	push	{r7, lr}
    4d8e:	b086      	sub	sp, #24
    4d90:	af00      	add	r7, sp, #0
    4d92:	60f8      	str	r0, [r7, #12]
    4d94:	460b      	mov	r3, r1
    4d96:	607a      	str	r2, [r7, #4]
    4d98:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4d9a:	7afa      	ldrb	r2, [r7, #11]
    4d9c:	68fb      	ldr	r3, [r7, #12]
    4d9e:	3208      	adds	r2, #8
    4da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4da4:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4da6:	697b      	ldr	r3, [r7, #20]
    4da8:	f023 030f 	bic.w	r3, r3, #15
    4dac:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	f003 030f 	and.w	r3, r3, #15
    4db4:	697a      	ldr	r2, [r7, #20]
    4db6:	4313      	orrs	r3, r2
    4db8:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4dba:	7afa      	ldrb	r2, [r7, #11]
    4dbc:	68fb      	ldr	r3, [r7, #12]
    4dbe:	3208      	adds	r2, #8
    4dc0:	6979      	ldr	r1, [r7, #20]
    4dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4dc6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4dca:	68f8      	ldr	r0, [r7, #12]
    4dcc:	4b02      	ldr	r3, [pc, #8]	; (4dd8 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4dce:	4798      	blx	r3
}
    4dd0:	bf00      	nop
    4dd2:	3718      	adds	r7, #24
    4dd4:	46bd      	mov	sp, r7
    4dd6:	bd80      	pop	{r7, pc}
    4dd8:	00004d29 	.word	0x00004d29

00004ddc <hri_gclk_write_PCHCTRL_reg>:
{
    4ddc:	b480      	push	{r7}
    4dde:	b085      	sub	sp, #20
    4de0:	af00      	add	r7, sp, #0
    4de2:	60f8      	str	r0, [r7, #12]
    4de4:	460b      	mov	r3, r1
    4de6:	607a      	str	r2, [r7, #4]
    4de8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4dea:	7afa      	ldrb	r2, [r7, #11]
    4dec:	68fb      	ldr	r3, [r7, #12]
    4dee:	3220      	adds	r2, #32
    4df0:	6879      	ldr	r1, [r7, #4]
    4df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4df6:	bf00      	nop
    4df8:	3714      	adds	r7, #20
    4dfa:	46bd      	mov	sp, r7
    4dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e00:	4770      	bx	lr

00004e02 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4e02:	b480      	push	{r7}
    4e04:	b085      	sub	sp, #20
    4e06:	af00      	add	r7, sp, #0
    4e08:	60f8      	str	r0, [r7, #12]
    4e0a:	460b      	mov	r3, r1
    4e0c:	607a      	str	r2, [r7, #4]
    4e0e:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4e10:	bf00      	nop
    4e12:	7afa      	ldrb	r2, [r7, #11]
    4e14:	68f9      	ldr	r1, [r7, #12]
    4e16:	4613      	mov	r3, r2
    4e18:	009b      	lsls	r3, r3, #2
    4e1a:	4413      	add	r3, r2
    4e1c:	009b      	lsls	r3, r3, #2
    4e1e:	440b      	add	r3, r1
    4e20:	333c      	adds	r3, #60	; 0x3c
    4e22:	681a      	ldr	r2, [r3, #0]
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	4013      	ands	r3, r2
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d1f2      	bne.n	4e12 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4e2c:	bf00      	nop
    4e2e:	3714      	adds	r7, #20
    4e30:	46bd      	mov	sp, r7
    4e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e36:	4770      	bx	lr

00004e38 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4e38:	b480      	push	{r7}
    4e3a:	b083      	sub	sp, #12
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
    4e40:	460b      	mov	r3, r1
    4e42:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4e44:	78fa      	ldrb	r2, [r7, #3]
    4e46:	6879      	ldr	r1, [r7, #4]
    4e48:	4613      	mov	r3, r2
    4e4a:	009b      	lsls	r3, r3, #2
    4e4c:	4413      	add	r3, r2
    4e4e:	009b      	lsls	r3, r3, #2
    4e50:	440b      	add	r3, r1
    4e52:	3340      	adds	r3, #64	; 0x40
    4e54:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4e56:	f003 0301 	and.w	r3, r3, #1
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	bf14      	ite	ne
    4e5e:	2301      	movne	r3, #1
    4e60:	2300      	moveq	r3, #0
    4e62:	b2db      	uxtb	r3, r3
}
    4e64:	4618      	mov	r0, r3
    4e66:	370c      	adds	r7, #12
    4e68:	46bd      	mov	sp, r7
    4e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e6e:	4770      	bx	lr

00004e70 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4e70:	b480      	push	{r7}
    4e72:	b083      	sub	sp, #12
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
    4e78:	460b      	mov	r3, r1
    4e7a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4e7c:	78fa      	ldrb	r2, [r7, #3]
    4e7e:	6879      	ldr	r1, [r7, #4]
    4e80:	4613      	mov	r3, r2
    4e82:	009b      	lsls	r3, r3, #2
    4e84:	4413      	add	r3, r2
    4e86:	009b      	lsls	r3, r3, #2
    4e88:	440b      	add	r3, r1
    4e8a:	3340      	adds	r3, #64	; 0x40
    4e8c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4e8e:	085b      	lsrs	r3, r3, #1
    4e90:	f003 0301 	and.w	r3, r3, #1
    4e94:	2b00      	cmp	r3, #0
    4e96:	bf14      	ite	ne
    4e98:	2301      	movne	r3, #1
    4e9a:	2300      	moveq	r3, #0
    4e9c:	b2db      	uxtb	r3, r3
}
    4e9e:	4618      	mov	r0, r3
    4ea0:	370c      	adds	r7, #12
    4ea2:	46bd      	mov	sp, r7
    4ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea8:	4770      	bx	lr
	...

00004eac <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4eac:	b580      	push	{r7, lr}
    4eae:	b082      	sub	sp, #8
    4eb0:	af00      	add	r7, sp, #0
    4eb2:	6078      	str	r0, [r7, #4]
    4eb4:	460b      	mov	r3, r1
    4eb6:	70fb      	strb	r3, [r7, #3]
    4eb8:	4613      	mov	r3, r2
    4eba:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4ebc:	78fa      	ldrb	r2, [r7, #3]
    4ebe:	6879      	ldr	r1, [r7, #4]
    4ec0:	4613      	mov	r3, r2
    4ec2:	009b      	lsls	r3, r3, #2
    4ec4:	4413      	add	r3, r2
    4ec6:	009b      	lsls	r3, r3, #2
    4ec8:	440b      	add	r3, r1
    4eca:	3330      	adds	r3, #48	; 0x30
    4ecc:	78ba      	ldrb	r2, [r7, #2]
    4ece:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4ed0:	78fb      	ldrb	r3, [r7, #3]
    4ed2:	2202      	movs	r2, #2
    4ed4:	4619      	mov	r1, r3
    4ed6:	6878      	ldr	r0, [r7, #4]
    4ed8:	4b02      	ldr	r3, [pc, #8]	; (4ee4 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4eda:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4edc:	bf00      	nop
    4ede:	3708      	adds	r7, #8
    4ee0:	46bd      	mov	sp, r7
    4ee2:	bd80      	pop	{r7, pc}
    4ee4:	00004e03 	.word	0x00004e03

00004ee8 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4ee8:	b580      	push	{r7, lr}
    4eea:	b084      	sub	sp, #16
    4eec:	af00      	add	r7, sp, #0
    4eee:	60f8      	str	r0, [r7, #12]
    4ef0:	460b      	mov	r3, r1
    4ef2:	607a      	str	r2, [r7, #4]
    4ef4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4ef6:	7afa      	ldrb	r2, [r7, #11]
    4ef8:	68f9      	ldr	r1, [r7, #12]
    4efa:	4613      	mov	r3, r2
    4efc:	009b      	lsls	r3, r3, #2
    4efe:	4413      	add	r3, r2
    4f00:	009b      	lsls	r3, r3, #2
    4f02:	440b      	add	r3, r1
    4f04:	3334      	adds	r3, #52	; 0x34
    4f06:	687a      	ldr	r2, [r7, #4]
    4f08:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4f0a:	7afb      	ldrb	r3, [r7, #11]
    4f0c:	2206      	movs	r2, #6
    4f0e:	4619      	mov	r1, r3
    4f10:	68f8      	ldr	r0, [r7, #12]
    4f12:	4b03      	ldr	r3, [pc, #12]	; (4f20 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4f14:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f16:	bf00      	nop
    4f18:	3710      	adds	r7, #16
    4f1a:	46bd      	mov	sp, r7
    4f1c:	bd80      	pop	{r7, pc}
    4f1e:	bf00      	nop
    4f20:	00004e03 	.word	0x00004e03

00004f24 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4f24:	b480      	push	{r7}
    4f26:	b085      	sub	sp, #20
    4f28:	af00      	add	r7, sp, #0
    4f2a:	60f8      	str	r0, [r7, #12]
    4f2c:	460b      	mov	r3, r1
    4f2e:	607a      	str	r2, [r7, #4]
    4f30:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4f32:	7afa      	ldrb	r2, [r7, #11]
    4f34:	68f9      	ldr	r1, [r7, #12]
    4f36:	4613      	mov	r3, r2
    4f38:	009b      	lsls	r3, r3, #2
    4f3a:	4413      	add	r3, r2
    4f3c:	009b      	lsls	r3, r3, #2
    4f3e:	440b      	add	r3, r1
    4f40:	3338      	adds	r3, #56	; 0x38
    4f42:	687a      	ldr	r2, [r7, #4]
    4f44:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f46:	bf00      	nop
    4f48:	3714      	adds	r7, #20
    4f4a:	46bd      	mov	sp, r7
    4f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f50:	4770      	bx	lr

00004f52 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4f52:	b480      	push	{r7}
    4f54:	b083      	sub	sp, #12
    4f56:	af00      	add	r7, sp, #0
    4f58:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	691b      	ldr	r3, [r3, #16]
    4f5e:	085b      	lsrs	r3, r3, #1
    4f60:	f003 0301 	and.w	r3, r3, #1
    4f64:	2b00      	cmp	r3, #0
    4f66:	bf14      	ite	ne
    4f68:	2301      	movne	r3, #1
    4f6a:	2300      	moveq	r3, #0
    4f6c:	b2db      	uxtb	r3, r3
}
    4f6e:	4618      	mov	r0, r3
    4f70:	370c      	adds	r7, #12
    4f72:	46bd      	mov	sp, r7
    4f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f78:	4770      	bx	lr

00004f7a <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4f7a:	b480      	push	{r7}
    4f7c:	b083      	sub	sp, #12
    4f7e:	af00      	add	r7, sp, #0
    4f80:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	691b      	ldr	r3, [r3, #16]
    4f86:	0a1b      	lsrs	r3, r3, #8
    4f88:	f003 0301 	and.w	r3, r3, #1
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	bf14      	ite	ne
    4f90:	2301      	movne	r3, #1
    4f92:	2300      	moveq	r3, #0
    4f94:	b2db      	uxtb	r3, r3
}
    4f96:	4618      	mov	r0, r3
    4f98:	370c      	adds	r7, #12
    4f9a:	46bd      	mov	sp, r7
    4f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa0:	4770      	bx	lr

00004fa2 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4fa2:	b480      	push	{r7}
    4fa4:	b085      	sub	sp, #20
    4fa6:	af00      	add	r7, sp, #0
    4fa8:	6078      	str	r0, [r7, #4]
    4faa:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4fac:	687b      	ldr	r3, [r7, #4]
    4fae:	691b      	ldr	r3, [r3, #16]
    4fb0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4fb2:	68fa      	ldr	r2, [r7, #12]
    4fb4:	683b      	ldr	r3, [r7, #0]
    4fb6:	4013      	ands	r3, r2
    4fb8:	60fb      	str	r3, [r7, #12]
	return tmp;
    4fba:	68fb      	ldr	r3, [r7, #12]
}
    4fbc:	4618      	mov	r0, r3
    4fbe:	3714      	adds	r7, #20
    4fc0:	46bd      	mov	sp, r7
    4fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fc6:	4770      	bx	lr

00004fc8 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4fc8:	b480      	push	{r7}
    4fca:	b085      	sub	sp, #20
    4fcc:	af00      	add	r7, sp, #0
    4fce:	60f8      	str	r0, [r7, #12]
    4fd0:	460b      	mov	r3, r1
    4fd2:	607a      	str	r2, [r7, #4]
    4fd4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4fd6:	7afb      	ldrb	r3, [r7, #11]
    4fd8:	68fa      	ldr	r2, [r7, #12]
    4fda:	3304      	adds	r3, #4
    4fdc:	009b      	lsls	r3, r3, #2
    4fde:	4413      	add	r3, r2
    4fe0:	687a      	ldr	r2, [r7, #4]
    4fe2:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4fe4:	bf00      	nop
    4fe6:	3714      	adds	r7, #20
    4fe8:	46bd      	mov	sp, r7
    4fea:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fee:	4770      	bx	lr

00004ff0 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4ff0:	b480      	push	{r7}
    4ff2:	b083      	sub	sp, #12
    4ff4:	af00      	add	r7, sp, #0
    4ff6:	6078      	str	r0, [r7, #4]
    4ff8:	460b      	mov	r3, r1
    4ffa:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	78fa      	ldrb	r2, [r7, #3]
    5000:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5002:	bf00      	nop
    5004:	370c      	adds	r7, #12
    5006:	46bd      	mov	sp, r7
    5008:	f85d 7b04 	ldr.w	r7, [sp], #4
    500c:	4770      	bx	lr

0000500e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    500e:	b480      	push	{r7}
    5010:	b085      	sub	sp, #20
    5012:	af00      	add	r7, sp, #0
    5014:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5016:	687b      	ldr	r3, [r7, #4]
    5018:	f893 3020 	ldrb.w	r3, [r3, #32]
    501c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    501e:	7bfb      	ldrb	r3, [r7, #15]
    5020:	f003 0301 	and.w	r3, r3, #1
    5024:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5026:	7bfb      	ldrb	r3, [r7, #15]
    5028:	2b00      	cmp	r3, #0
    502a:	bf14      	ite	ne
    502c:	2301      	movne	r3, #1
    502e:	2300      	moveq	r3, #0
    5030:	b2db      	uxtb	r3, r3
}
    5032:	4618      	mov	r0, r3
    5034:	3714      	adds	r7, #20
    5036:	46bd      	mov	sp, r7
    5038:	f85d 7b04 	ldr.w	r7, [sp], #4
    503c:	4770      	bx	lr

0000503e <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    503e:	b480      	push	{r7}
    5040:	b083      	sub	sp, #12
    5042:	af00      	add	r7, sp, #0
    5044:	6078      	str	r0, [r7, #4]
    5046:	460b      	mov	r3, r1
    5048:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    504a:	687b      	ldr	r3, [r7, #4]
    504c:	78fa      	ldrb	r2, [r7, #3]
    504e:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5052:	bf00      	nop
    5054:	370c      	adds	r7, #12
    5056:	46bd      	mov	sp, r7
    5058:	f85d 7b04 	ldr.w	r7, [sp], #4
    505c:	4770      	bx	lr

0000505e <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    505e:	b480      	push	{r7}
    5060:	b083      	sub	sp, #12
    5062:	af00      	add	r7, sp, #0
    5064:	6078      	str	r0, [r7, #4]
    5066:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	683a      	ldr	r2, [r7, #0]
    506c:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    506e:	bf00      	nop
    5070:	370c      	adds	r7, #12
    5072:	46bd      	mov	sp, r7
    5074:	f85d 7b04 	ldr.w	r7, [sp], #4
    5078:	4770      	bx	lr

0000507a <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    507a:	b480      	push	{r7}
    507c:	b083      	sub	sp, #12
    507e:	af00      	add	r7, sp, #0
    5080:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5082:	687b      	ldr	r3, [r7, #4]
    5084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5086:	4618      	mov	r0, r3
    5088:	370c      	adds	r7, #12
    508a:	46bd      	mov	sp, r7
    508c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5090:	4770      	bx	lr

00005092 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5092:	b480      	push	{r7}
    5094:	b083      	sub	sp, #12
    5096:	af00      	add	r7, sp, #0
    5098:	6078      	str	r0, [r7, #4]
    509a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	683a      	ldr	r2, [r7, #0]
    50a0:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50a2:	bf00      	nop
    50a4:	370c      	adds	r7, #12
    50a6:	46bd      	mov	sp, r7
    50a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    50ac:	4770      	bx	lr

000050ae <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    50ae:	b480      	push	{r7}
    50b0:	b085      	sub	sp, #20
    50b2:	af00      	add	r7, sp, #0
    50b4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    50b6:	687b      	ldr	r3, [r7, #4]
    50b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    50bc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    50be:	7bfb      	ldrb	r3, [r7, #15]
    50c0:	085b      	lsrs	r3, r3, #1
    50c2:	b2db      	uxtb	r3, r3
    50c4:	f003 0301 	and.w	r3, r3, #1
    50c8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    50ca:	7bfb      	ldrb	r3, [r7, #15]
    50cc:	2b00      	cmp	r3, #0
    50ce:	bf14      	ite	ne
    50d0:	2301      	movne	r3, #1
    50d2:	2300      	moveq	r3, #0
    50d4:	b2db      	uxtb	r3, r3
}
    50d6:	4618      	mov	r0, r3
    50d8:	3714      	adds	r7, #20
    50da:	46bd      	mov	sp, r7
    50dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    50e0:	4770      	bx	lr

000050e2 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    50e2:	b480      	push	{r7}
    50e4:	b085      	sub	sp, #20
    50e6:	af00      	add	r7, sp, #0
    50e8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    50ea:	687b      	ldr	r3, [r7, #4]
    50ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    50f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    50f2:	7bfb      	ldrb	r3, [r7, #15]
    50f4:	089b      	lsrs	r3, r3, #2
    50f6:	b2db      	uxtb	r3, r3
    50f8:	f003 0301 	and.w	r3, r3, #1
    50fc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    50fe:	7bfb      	ldrb	r3, [r7, #15]
    5100:	2b00      	cmp	r3, #0
    5102:	bf14      	ite	ne
    5104:	2301      	movne	r3, #1
    5106:	2300      	moveq	r3, #0
    5108:	b2db      	uxtb	r3, r3
}
    510a:	4618      	mov	r0, r3
    510c:	3714      	adds	r7, #20
    510e:	46bd      	mov	sp, r7
    5110:	f85d 7b04 	ldr.w	r7, [sp], #4
    5114:	4770      	bx	lr

00005116 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5116:	b480      	push	{r7}
    5118:	b085      	sub	sp, #20
    511a:	af00      	add	r7, sp, #0
    511c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5124:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5126:	7bfb      	ldrb	r3, [r7, #15]
    5128:	08db      	lsrs	r3, r3, #3
    512a:	b2db      	uxtb	r3, r3
    512c:	f003 0301 	and.w	r3, r3, #1
    5130:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5132:	7bfb      	ldrb	r3, [r7, #15]
    5134:	2b00      	cmp	r3, #0
    5136:	bf14      	ite	ne
    5138:	2301      	movne	r3, #1
    513a:	2300      	moveq	r3, #0
    513c:	b2db      	uxtb	r3, r3
}
    513e:	4618      	mov	r0, r3
    5140:	3714      	adds	r7, #20
    5142:	46bd      	mov	sp, r7
    5144:	f85d 7b04 	ldr.w	r7, [sp], #4
    5148:	4770      	bx	lr

0000514a <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    514a:	b480      	push	{r7}
    514c:	b085      	sub	sp, #20
    514e:	af00      	add	r7, sp, #0
    5150:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5158:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    515a:	7bfb      	ldrb	r3, [r7, #15]
    515c:	091b      	lsrs	r3, r3, #4
    515e:	b2db      	uxtb	r3, r3
    5160:	f003 0301 	and.w	r3, r3, #1
    5164:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5166:	7bfb      	ldrb	r3, [r7, #15]
    5168:	2b00      	cmp	r3, #0
    516a:	bf14      	ite	ne
    516c:	2301      	movne	r3, #1
    516e:	2300      	moveq	r3, #0
    5170:	b2db      	uxtb	r3, r3
}
    5172:	4618      	mov	r0, r3
    5174:	3714      	adds	r7, #20
    5176:	46bd      	mov	sp, r7
    5178:	f85d 7b04 	ldr.w	r7, [sp], #4
    517c:	4770      	bx	lr
	...

00005180 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5180:	b580      	push	{r7, lr}
    5182:	b082      	sub	sp, #8
    5184:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5186:	4b0a      	ldr	r3, [pc, #40]	; (51b0 <_oscctrl_init_sources+0x30>)
    5188:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    518a:	4a0a      	ldr	r2, [pc, #40]	; (51b4 <_oscctrl_init_sources+0x34>)
    518c:	2101      	movs	r1, #1
    518e:	6878      	ldr	r0, [r7, #4]
    5190:	4b09      	ldr	r3, [pc, #36]	; (51b8 <_oscctrl_init_sources+0x38>)
    5192:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5194:	bf00      	nop
    5196:	6878      	ldr	r0, [r7, #4]
    5198:	4b08      	ldr	r3, [pc, #32]	; (51bc <_oscctrl_init_sources+0x3c>)
    519a:	4798      	blx	r3
    519c:	4603      	mov	r3, r0
    519e:	f083 0301 	eor.w	r3, r3, #1
    51a2:	b2db      	uxtb	r3, r3
    51a4:	2b00      	cmp	r3, #0
    51a6:	d1f6      	bne.n	5196 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    51a8:	bf00      	nop
    51aa:	3708      	adds	r7, #8
    51ac:	46bd      	mov	sp, r7
    51ae:	bd80      	pop	{r7, pc}
    51b0:	40001000 	.word	0x40001000
    51b4:	03002646 	.word	0x03002646
    51b8:	00004fc9 	.word	0x00004fc9
    51bc:	00004f53 	.word	0x00004f53

000051c0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    51c0:	b580      	push	{r7, lr}
    51c2:	b084      	sub	sp, #16
    51c4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    51c6:	4b6b      	ldr	r3, [pc, #428]	; (5374 <_oscctrl_init_referenced_generators+0x1b4>)
    51c8:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    51ca:	2204      	movs	r2, #4
    51cc:	2100      	movs	r1, #0
    51ce:	486a      	ldr	r0, [pc, #424]	; (5378 <_oscctrl_init_referenced_generators+0x1b8>)
    51d0:	4b6a      	ldr	r3, [pc, #424]	; (537c <_oscctrl_init_referenced_generators+0x1bc>)
    51d2:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    51d4:	bf00      	nop
    51d6:	4868      	ldr	r0, [pc, #416]	; (5378 <_oscctrl_init_referenced_generators+0x1b8>)
    51d8:	4b69      	ldr	r3, [pc, #420]	; (5380 <_oscctrl_init_referenced_generators+0x1c0>)
    51da:	4798      	blx	r3
    51dc:	4603      	mov	r3, r0
    51de:	2b00      	cmp	r3, #0
    51e0:	d1f9      	bne.n	51d6 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    51e2:	2100      	movs	r1, #0
    51e4:	68f8      	ldr	r0, [r7, #12]
    51e6:	4b67      	ldr	r3, [pc, #412]	; (5384 <_oscctrl_init_referenced_generators+0x1c4>)
    51e8:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    51ea:	4967      	ldr	r1, [pc, #412]	; (5388 <_oscctrl_init_referenced_generators+0x1c8>)
    51ec:	68f8      	ldr	r0, [r7, #12]
    51ee:	4b67      	ldr	r3, [pc, #412]	; (538c <_oscctrl_init_referenced_generators+0x1cc>)
    51f0:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    51f2:	bf00      	nop
    51f4:	68f8      	ldr	r0, [r7, #12]
    51f6:	4b66      	ldr	r3, [pc, #408]	; (5390 <_oscctrl_init_referenced_generators+0x1d0>)
    51f8:	4798      	blx	r3
    51fa:	4603      	mov	r3, r0
    51fc:	2b00      	cmp	r3, #0
    51fe:	d1f9      	bne.n	51f4 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5200:	2100      	movs	r1, #0
    5202:	68f8      	ldr	r0, [r7, #12]
    5204:	4b63      	ldr	r3, [pc, #396]	; (5394 <_oscctrl_init_referenced_generators+0x1d4>)
    5206:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5208:	bf00      	nop
    520a:	68f8      	ldr	r0, [r7, #12]
    520c:	4b62      	ldr	r3, [pc, #392]	; (5398 <_oscctrl_init_referenced_generators+0x1d8>)
    520e:	4798      	blx	r3
    5210:	4603      	mov	r3, r0
    5212:	2b00      	cmp	r3, #0
    5214:	d1f9      	bne.n	520a <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5216:	2302      	movs	r3, #2
    5218:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    521a:	7afb      	ldrb	r3, [r7, #11]
    521c:	4619      	mov	r1, r3
    521e:	68f8      	ldr	r0, [r7, #12]
    5220:	4b58      	ldr	r3, [pc, #352]	; (5384 <_oscctrl_init_referenced_generators+0x1c4>)
    5222:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5224:	bf00      	nop
    5226:	68f8      	ldr	r0, [r7, #12]
    5228:	4b5c      	ldr	r3, [pc, #368]	; (539c <_oscctrl_init_referenced_generators+0x1dc>)
    522a:	4798      	blx	r3
    522c:	4603      	mov	r3, r0
    522e:	2b00      	cmp	r3, #0
    5230:	d1f9      	bne.n	5226 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5232:	68f8      	ldr	r0, [r7, #12]
    5234:	4b5a      	ldr	r3, [pc, #360]	; (53a0 <_oscctrl_init_referenced_generators+0x1e0>)
    5236:	4798      	blx	r3
    5238:	4603      	mov	r3, r0
    523a:	4619      	mov	r1, r3
    523c:	68f8      	ldr	r0, [r7, #12]
    523e:	4b59      	ldr	r3, [pc, #356]	; (53a4 <_oscctrl_init_referenced_generators+0x1e4>)
    5240:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5242:	bf00      	nop
    5244:	68f8      	ldr	r0, [r7, #12]
    5246:	4b58      	ldr	r3, [pc, #352]	; (53a8 <_oscctrl_init_referenced_generators+0x1e8>)
    5248:	4798      	blx	r3
    524a:	4603      	mov	r3, r0
    524c:	2b00      	cmp	r3, #0
    524e:	d1f9      	bne.n	5244 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5250:	2319      	movs	r3, #25
    5252:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5254:	7afb      	ldrb	r3, [r7, #11]
    5256:	4619      	mov	r1, r3
    5258:	68f8      	ldr	r0, [r7, #12]
    525a:	4b4e      	ldr	r3, [pc, #312]	; (5394 <_oscctrl_init_referenced_generators+0x1d4>)
    525c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    525e:	bf00      	nop
    5260:	68f8      	ldr	r0, [r7, #12]
    5262:	4b4d      	ldr	r3, [pc, #308]	; (5398 <_oscctrl_init_referenced_generators+0x1d8>)
    5264:	4798      	blx	r3
    5266:	4603      	mov	r3, r0
    5268:	2b00      	cmp	r3, #0
    526a:	d1f9      	bne.n	5260 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    526c:	2245      	movs	r2, #69	; 0x45
    526e:	2101      	movs	r1, #1
    5270:	4841      	ldr	r0, [pc, #260]	; (5378 <_oscctrl_init_referenced_generators+0x1b8>)
    5272:	4b4e      	ldr	r3, [pc, #312]	; (53ac <_oscctrl_init_referenced_generators+0x1ec>)
    5274:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5276:	223b      	movs	r2, #59	; 0x3b
    5278:	2100      	movs	r1, #0
    527a:	68f8      	ldr	r0, [r7, #12]
    527c:	4b4c      	ldr	r3, [pc, #304]	; (53b0 <_oscctrl_init_referenced_generators+0x1f0>)
    527e:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5280:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5284:	2100      	movs	r1, #0
    5286:	68f8      	ldr	r0, [r7, #12]
    5288:	4b4a      	ldr	r3, [pc, #296]	; (53b4 <_oscctrl_init_referenced_generators+0x1f4>)
    528a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    528c:	2242      	movs	r2, #66	; 0x42
    528e:	2100      	movs	r1, #0
    5290:	68f8      	ldr	r0, [r7, #12]
    5292:	4b49      	ldr	r3, [pc, #292]	; (53b8 <_oscctrl_init_referenced_generators+0x1f8>)
    5294:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5296:	4a49      	ldr	r2, [pc, #292]	; (53bc <_oscctrl_init_referenced_generators+0x1fc>)
    5298:	2101      	movs	r1, #1
    529a:	68f8      	ldr	r0, [r7, #12]
    529c:	4b44      	ldr	r3, [pc, #272]	; (53b0 <_oscctrl_init_referenced_generators+0x1f0>)
    529e:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    52a0:	f44f 6203 	mov.w	r2, #2096	; 0x830
    52a4:	2101      	movs	r1, #1
    52a6:	68f8      	ldr	r0, [r7, #12]
    52a8:	4b42      	ldr	r3, [pc, #264]	; (53b4 <_oscctrl_init_referenced_generators+0x1f4>)
    52aa:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    52ac:	2202      	movs	r2, #2
    52ae:	2101      	movs	r1, #1
    52b0:	68f8      	ldr	r0, [r7, #12]
    52b2:	4b41      	ldr	r3, [pc, #260]	; (53b8 <_oscctrl_init_referenced_generators+0x1f8>)
    52b4:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    52b6:	68f8      	ldr	r0, [r7, #12]
    52b8:	4b41      	ldr	r3, [pc, #260]	; (53c0 <_oscctrl_init_referenced_generators+0x200>)
    52ba:	4798      	blx	r3
    52bc:	4603      	mov	r3, r0
    52be:	2b00      	cmp	r3, #0
    52c0:	d00c      	beq.n	52dc <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    52c2:	f44f 6310 	mov.w	r3, #2304	; 0x900
    52c6:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    52c8:	bf00      	nop
    52ca:	6879      	ldr	r1, [r7, #4]
    52cc:	68f8      	ldr	r0, [r7, #12]
    52ce:	4b3d      	ldr	r3, [pc, #244]	; (53c4 <_oscctrl_init_referenced_generators+0x204>)
    52d0:	4798      	blx	r3
    52d2:	4602      	mov	r2, r0
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	429a      	cmp	r2, r3
    52d8:	d1f7      	bne.n	52ca <_oscctrl_init_referenced_generators+0x10a>
    52da:	e009      	b.n	52f0 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    52dc:	bf00      	nop
    52de:	68f8      	ldr	r0, [r7, #12]
    52e0:	4b39      	ldr	r3, [pc, #228]	; (53c8 <_oscctrl_init_referenced_generators+0x208>)
    52e2:	4798      	blx	r3
    52e4:	4603      	mov	r3, r0
    52e6:	f083 0301 	eor.w	r3, r3, #1
    52ea:	b2db      	uxtb	r3, r3
    52ec:	2b00      	cmp	r3, #0
    52ee:	d1f6      	bne.n	52de <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    52f0:	bf00      	nop
    52f2:	2100      	movs	r1, #0
    52f4:	68f8      	ldr	r0, [r7, #12]
    52f6:	4b35      	ldr	r3, [pc, #212]	; (53cc <_oscctrl_init_referenced_generators+0x20c>)
    52f8:	4798      	blx	r3
    52fa:	4603      	mov	r3, r0
    52fc:	f083 0301 	eor.w	r3, r3, #1
    5300:	b2db      	uxtb	r3, r3
    5302:	2b00      	cmp	r3, #0
    5304:	d009      	beq.n	531a <_oscctrl_init_referenced_generators+0x15a>
    5306:	2100      	movs	r1, #0
    5308:	68f8      	ldr	r0, [r7, #12]
    530a:	4b31      	ldr	r3, [pc, #196]	; (53d0 <_oscctrl_init_referenced_generators+0x210>)
    530c:	4798      	blx	r3
    530e:	4603      	mov	r3, r0
    5310:	f083 0301 	eor.w	r3, r3, #1
    5314:	b2db      	uxtb	r3, r3
    5316:	2b00      	cmp	r3, #0
    5318:	d1eb      	bne.n	52f2 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    531a:	bf00      	nop
    531c:	2101      	movs	r1, #1
    531e:	68f8      	ldr	r0, [r7, #12]
    5320:	4b2a      	ldr	r3, [pc, #168]	; (53cc <_oscctrl_init_referenced_generators+0x20c>)
    5322:	4798      	blx	r3
    5324:	4603      	mov	r3, r0
    5326:	f083 0301 	eor.w	r3, r3, #1
    532a:	b2db      	uxtb	r3, r3
    532c:	2b00      	cmp	r3, #0
    532e:	d009      	beq.n	5344 <_oscctrl_init_referenced_generators+0x184>
    5330:	2101      	movs	r1, #1
    5332:	68f8      	ldr	r0, [r7, #12]
    5334:	4b26      	ldr	r3, [pc, #152]	; (53d0 <_oscctrl_init_referenced_generators+0x210>)
    5336:	4798      	blx	r3
    5338:	4603      	mov	r3, r0
    533a:	f083 0301 	eor.w	r3, r3, #1
    533e:	b2db      	uxtb	r3, r3
    5340:	2b00      	cmp	r3, #0
    5342:	d1eb      	bne.n	531c <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5344:	bf00      	nop
    5346:	480c      	ldr	r0, [pc, #48]	; (5378 <_oscctrl_init_referenced_generators+0x1b8>)
    5348:	4b22      	ldr	r3, [pc, #136]	; (53d4 <_oscctrl_init_referenced_generators+0x214>)
    534a:	4798      	blx	r3
    534c:	4603      	mov	r3, r0
    534e:	2b00      	cmp	r3, #0
    5350:	d1f9      	bne.n	5346 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5352:	2207      	movs	r2, #7
    5354:	2100      	movs	r1, #0
    5356:	4808      	ldr	r0, [pc, #32]	; (5378 <_oscctrl_init_referenced_generators+0x1b8>)
    5358:	4b08      	ldr	r3, [pc, #32]	; (537c <_oscctrl_init_referenced_generators+0x1bc>)
    535a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    535c:	bf00      	nop
    535e:	4806      	ldr	r0, [pc, #24]	; (5378 <_oscctrl_init_referenced_generators+0x1b8>)
    5360:	4b07      	ldr	r3, [pc, #28]	; (5380 <_oscctrl_init_referenced_generators+0x1c0>)
    5362:	4798      	blx	r3
    5364:	4603      	mov	r3, r0
    5366:	2b00      	cmp	r3, #0
    5368:	d1f9      	bne.n	535e <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    536a:	bf00      	nop
    536c:	3710      	adds	r7, #16
    536e:	46bd      	mov	sp, r7
    5370:	bd80      	pop	{r7, pc}
    5372:	bf00      	nop
    5374:	40001000 	.word	0x40001000
    5378:	40001c00 	.word	0x40001c00
    537c:	00004d8d 	.word	0x00004d8d
    5380:	00004d4d 	.word	0x00004d4d
    5384:	00004ff1 	.word	0x00004ff1
    5388:	0401bb80 	.word	0x0401bb80
    538c:	00005093 	.word	0x00005093
    5390:	0000514b 	.word	0x0000514b
    5394:	0000503f 	.word	0x0000503f
    5398:	000050e3 	.word	0x000050e3
    539c:	000050af 	.word	0x000050af
    53a0:	0000507b 	.word	0x0000507b
    53a4:	0000505f 	.word	0x0000505f
    53a8:	00005117 	.word	0x00005117
    53ac:	00004ddd 	.word	0x00004ddd
    53b0:	00004ee9 	.word	0x00004ee9
    53b4:	00004f25 	.word	0x00004f25
    53b8:	00004ead 	.word	0x00004ead
    53bc:	000407a0 	.word	0x000407a0
    53c0:	0000500f 	.word	0x0000500f
    53c4:	00004fa3 	.word	0x00004fa3
    53c8:	00004f7b 	.word	0x00004f7b
    53cc:	00004e39 	.word	0x00004e39
    53d0:	00004e71 	.word	0x00004e71
    53d4:	00004d75 	.word	0x00004d75

000053d8 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    53d8:	b480      	push	{r7}
    53da:	b083      	sub	sp, #12
    53dc:	af00      	add	r7, sp, #0
    53de:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	69db      	ldr	r3, [r3, #28]
    53e4:	0a9b      	lsrs	r3, r3, #10
    53e6:	f003 0301 	and.w	r3, r3, #1
    53ea:	2b00      	cmp	r3, #0
    53ec:	bf14      	ite	ne
    53ee:	2301      	movne	r3, #1
    53f0:	2300      	moveq	r3, #0
    53f2:	b2db      	uxtb	r3, r3
}
    53f4:	4618      	mov	r0, r3
    53f6:	370c      	adds	r7, #12
    53f8:	46bd      	mov	sp, r7
    53fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    53fe:	4770      	bx	lr

00005400 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5400:	b480      	push	{r7}
    5402:	b083      	sub	sp, #12
    5404:	af00      	add	r7, sp, #0
    5406:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5408:	687b      	ldr	r3, [r7, #4]
    540a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    540e:	61da      	str	r2, [r3, #28]
}
    5410:	bf00      	nop
    5412:	370c      	adds	r7, #12
    5414:	46bd      	mov	sp, r7
    5416:	f85d 7b04 	ldr.w	r7, [sp], #4
    541a:	4770      	bx	lr

0000541c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    541c:	b480      	push	{r7}
    541e:	b083      	sub	sp, #12
    5420:	af00      	add	r7, sp, #0
    5422:	6078      	str	r0, [r7, #4]
    5424:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5426:	687b      	ldr	r3, [r7, #4]
    5428:	683a      	ldr	r2, [r7, #0]
    542a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    542c:	bf00      	nop
    542e:	370c      	adds	r7, #12
    5430:	46bd      	mov	sp, r7
    5432:	f85d 7b04 	ldr.w	r7, [sp], #4
    5436:	4770      	bx	lr

00005438 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5438:	b480      	push	{r7}
    543a:	b083      	sub	sp, #12
    543c:	af00      	add	r7, sp, #0
    543e:	6078      	str	r0, [r7, #4]
    5440:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5442:	687b      	ldr	r3, [r7, #4]
    5444:	683a      	ldr	r2, [r7, #0]
    5446:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5448:	bf00      	nop
    544a:	370c      	adds	r7, #12
    544c:	46bd      	mov	sp, r7
    544e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5452:	4770      	bx	lr

00005454 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5454:	b480      	push	{r7}
    5456:	b083      	sub	sp, #12
    5458:	af00      	add	r7, sp, #0
    545a:	6078      	str	r0, [r7, #4]
    545c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	683a      	ldr	r2, [r7, #0]
    5462:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5464:	bf00      	nop
    5466:	370c      	adds	r7, #12
    5468:	46bd      	mov	sp, r7
    546a:	f85d 7b04 	ldr.w	r7, [sp], #4
    546e:	4770      	bx	lr

00005470 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5470:	b480      	push	{r7}
    5472:	b083      	sub	sp, #12
    5474:	af00      	add	r7, sp, #0
    5476:	6078      	str	r0, [r7, #4]
    5478:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    547a:	687b      	ldr	r3, [r7, #4]
    547c:	683a      	ldr	r2, [r7, #0]
    547e:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5480:	bf00      	nop
    5482:	370c      	adds	r7, #12
    5484:	46bd      	mov	sp, r7
    5486:	f85d 7b04 	ldr.w	r7, [sp], #4
    548a:	4770      	bx	lr

0000548c <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    548c:	b480      	push	{r7}
    548e:	b085      	sub	sp, #20
    5490:	af00      	add	r7, sp, #0
    5492:	6078      	str	r0, [r7, #4]
    5494:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5496:	687b      	ldr	r3, [r7, #4]
    5498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    549a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    549c:	68fb      	ldr	r3, [r7, #12]
    549e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    54a2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    54a4:	683b      	ldr	r3, [r7, #0]
    54a6:	b2db      	uxtb	r3, r3
    54a8:	68fa      	ldr	r2, [r7, #12]
    54aa:	4313      	orrs	r3, r2
    54ac:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    54ae:	687b      	ldr	r3, [r7, #4]
    54b0:	68fa      	ldr	r2, [r7, #12]
    54b2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    54b4:	bf00      	nop
    54b6:	3714      	adds	r7, #20
    54b8:	46bd      	mov	sp, r7
    54ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    54be:	4770      	bx	lr

000054c0 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    54c0:	b480      	push	{r7}
    54c2:	b085      	sub	sp, #20
    54c4:	af00      	add	r7, sp, #0
    54c6:	6078      	str	r0, [r7, #4]
    54c8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    54ca:	687b      	ldr	r3, [r7, #4]
    54cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    54ce:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    54d0:	68fb      	ldr	r3, [r7, #12]
    54d2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    54d6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    54d8:	683b      	ldr	r3, [r7, #0]
    54da:	041b      	lsls	r3, r3, #16
    54dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    54e0:	68fa      	ldr	r2, [r7, #12]
    54e2:	4313      	orrs	r3, r2
    54e4:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    54e6:	687b      	ldr	r3, [r7, #4]
    54e8:	68fa      	ldr	r2, [r7, #12]
    54ea:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    54ec:	bf00      	nop
    54ee:	3714      	adds	r7, #20
    54f0:	46bd      	mov	sp, r7
    54f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    54f6:	4770      	bx	lr

000054f8 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    54f8:	b480      	push	{r7}
    54fa:	b083      	sub	sp, #12
    54fc:	af00      	add	r7, sp, #0
    54fe:	6078      	str	r0, [r7, #4]
    5500:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5502:	687b      	ldr	r3, [r7, #4]
    5504:	683a      	ldr	r2, [r7, #0]
    5506:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5508:	bf00      	nop
    550a:	370c      	adds	r7, #12
    550c:	46bd      	mov	sp, r7
    550e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5512:	4770      	bx	lr

00005514 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5514:	b480      	push	{r7}
    5516:	b083      	sub	sp, #12
    5518:	af00      	add	r7, sp, #0
    551a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    551c:	687b      	ldr	r3, [r7, #4]
    551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5520:	4618      	mov	r0, r3
    5522:	370c      	adds	r7, #12
    5524:	46bd      	mov	sp, r7
    5526:	f85d 7b04 	ldr.w	r7, [sp], #4
    552a:	4770      	bx	lr

0000552c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    552c:	b480      	push	{r7}
    552e:	b085      	sub	sp, #20
    5530:	af00      	add	r7, sp, #0
    5532:	60f8      	str	r0, [r7, #12]
    5534:	60b9      	str	r1, [r7, #8]
    5536:	607a      	str	r2, [r7, #4]
	while (count--) {
    5538:	e007      	b.n	554a <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    553a:	68fb      	ldr	r3, [r7, #12]
    553c:	1c5a      	adds	r2, r3, #1
    553e:	60fa      	str	r2, [r7, #12]
    5540:	68ba      	ldr	r2, [r7, #8]
    5542:	1c51      	adds	r1, r2, #1
    5544:	60b9      	str	r1, [r7, #8]
    5546:	7812      	ldrb	r2, [r2, #0]
    5548:	701a      	strb	r2, [r3, #0]
	while (count--) {
    554a:	687b      	ldr	r3, [r7, #4]
    554c:	1e5a      	subs	r2, r3, #1
    554e:	607a      	str	r2, [r7, #4]
    5550:	2b00      	cmp	r3, #0
    5552:	d1f2      	bne.n	553a <_qspi_memcpy+0xe>
	}
}
    5554:	bf00      	nop
    5556:	3714      	adds	r7, #20
    5558:	46bd      	mov	sp, r7
    555a:	f85d 7b04 	ldr.w	r7, [sp], #4
    555e:	4770      	bx	lr

00005560 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5560:	b580      	push	{r7, lr}
    5562:	b082      	sub	sp, #8
    5564:	af00      	add	r7, sp, #0
    5566:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5568:	4903      	ldr	r1, [pc, #12]	; (5578 <_qspi_end_transfer+0x18>)
    556a:	6878      	ldr	r0, [r7, #4]
    556c:	4b03      	ldr	r3, [pc, #12]	; (557c <_qspi_end_transfer+0x1c>)
    556e:	4798      	blx	r3
}
    5570:	bf00      	nop
    5572:	3708      	adds	r7, #8
    5574:	46bd      	mov	sp, r7
    5576:	bd80      	pop	{r7, pc}
    5578:	01000002 	.word	0x01000002
    557c:	0000541d 	.word	0x0000541d

00005580 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5580:	b580      	push	{r7, lr}
    5582:	b082      	sub	sp, #8
    5584:	af00      	add	r7, sp, #0
    5586:	6078      	str	r0, [r7, #4]
    5588:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	2b00      	cmp	r3, #0
    558e:	d004      	beq.n	559a <_qspi_sync_init+0x1a>
    5590:	683b      	ldr	r3, [r7, #0]
    5592:	2b00      	cmp	r3, #0
    5594:	d001      	beq.n	559a <_qspi_sync_init+0x1a>
    5596:	2301      	movs	r3, #1
    5598:	e000      	b.n	559c <_qspi_sync_init+0x1c>
    559a:	2300      	movs	r3, #0
    559c:	f003 0301 	and.w	r3, r3, #1
    55a0:	b2db      	uxtb	r3, r3
    55a2:	2240      	movs	r2, #64	; 0x40
    55a4:	490c      	ldr	r1, [pc, #48]	; (55d8 <_qspi_sync_init+0x58>)
    55a6:	4618      	mov	r0, r3
    55a8:	4b0c      	ldr	r3, [pc, #48]	; (55dc <_qspi_sync_init+0x5c>)
    55aa:	4798      	blx	r3
	dev->prvt = hw;
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	683a      	ldr	r2, [r7, #0]
    55b0:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    55b2:	687b      	ldr	r3, [r7, #4]
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	2101      	movs	r1, #1
    55b8:	4618      	mov	r0, r3
    55ba:	4b09      	ldr	r3, [pc, #36]	; (55e0 <_qspi_sync_init+0x60>)
    55bc:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    55be:	4909      	ldr	r1, [pc, #36]	; (55e4 <_qspi_sync_init+0x64>)
    55c0:	6838      	ldr	r0, [r7, #0]
    55c2:	4b09      	ldr	r3, [pc, #36]	; (55e8 <_qspi_sync_init+0x68>)
    55c4:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    55c6:	4909      	ldr	r1, [pc, #36]	; (55ec <_qspi_sync_init+0x6c>)
    55c8:	6838      	ldr	r0, [r7, #0]
    55ca:	4b09      	ldr	r3, [pc, #36]	; (55f0 <_qspi_sync_init+0x70>)
    55cc:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    55ce:	2300      	movs	r3, #0
}
    55d0:	4618      	mov	r0, r3
    55d2:	3708      	adds	r7, #8
    55d4:	46bd      	mov	sp, r7
    55d6:	bd80      	pop	{r7, pc}
    55d8:	00010a4c 	.word	0x00010a4c
    55dc:	000038e1 	.word	0x000038e1
    55e0:	0000541d 	.word	0x0000541d
    55e4:	06000011 	.word	0x06000011
    55e8:	00005439 	.word	0x00005439
    55ec:	00241300 	.word	0x00241300
    55f0:	00005455 	.word	0x00005455

000055f4 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    55f4:	b580      	push	{r7, lr}
    55f6:	b082      	sub	sp, #8
    55f8:	af00      	add	r7, sp, #0
    55fa:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	681b      	ldr	r3, [r3, #0]
    5600:	2102      	movs	r1, #2
    5602:	4618      	mov	r0, r3
    5604:	4b03      	ldr	r3, [pc, #12]	; (5614 <_qspi_sync_enable+0x20>)
    5606:	4798      	blx	r3
	return ERR_NONE;
    5608:	2300      	movs	r3, #0
}
    560a:	4618      	mov	r0, r3
    560c:	3708      	adds	r7, #8
    560e:	46bd      	mov	sp, r7
    5610:	bd80      	pop	{r7, pc}
    5612:	bf00      	nop
    5614:	0000541d 	.word	0x0000541d

00005618 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5618:	b580      	push	{r7, lr}
    561a:	b082      	sub	sp, #8
    561c:	af00      	add	r7, sp, #0
    561e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5620:	687b      	ldr	r3, [r7, #4]
    5622:	681b      	ldr	r3, [r3, #0]
    5624:	2100      	movs	r1, #0
    5626:	4618      	mov	r0, r3
    5628:	4b03      	ldr	r3, [pc, #12]	; (5638 <_qspi_sync_disable+0x20>)
    562a:	4798      	blx	r3
	return ERR_NONE;
    562c:	2300      	movs	r3, #0
}
    562e:	4618      	mov	r0, r3
    5630:	3708      	adds	r7, #8
    5632:	46bd      	mov	sp, r7
    5634:	bd80      	pop	{r7, pc}
    5636:	bf00      	nop
    5638:	0000541d 	.word	0x0000541d

0000563c <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    563c:	b580      	push	{r7, lr}
    563e:	b084      	sub	sp, #16
    5640:	af00      	add	r7, sp, #0
    5642:	6078      	str	r0, [r7, #4]
    5644:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	681b      	ldr	r3, [r3, #0]
    564a:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    564c:	683b      	ldr	r3, [r7, #0]
    564e:	781b      	ldrb	r3, [r3, #0]
    5650:	f003 0320 	and.w	r3, r3, #32
    5654:	b2db      	uxtb	r3, r3
    5656:	2b00      	cmp	r3, #0
    5658:	d005      	beq.n	5666 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    565a:	683b      	ldr	r3, [r7, #0]
    565c:	689b      	ldr	r3, [r3, #8]
    565e:	4619      	mov	r1, r3
    5660:	68f8      	ldr	r0, [r7, #12]
    5662:	4b13      	ldr	r3, [pc, #76]	; (56b0 <_qspi_sync_command_set_ifr+0x74>)
    5664:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5666:	683b      	ldr	r3, [r7, #0]
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	f003 0310 	and.w	r3, r3, #16
    566e:	b2db      	uxtb	r3, r3
    5670:	2b00      	cmp	r3, #0
    5672:	d005      	beq.n	5680 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5674:	683b      	ldr	r3, [r7, #0]
    5676:	791b      	ldrb	r3, [r3, #4]
    5678:	4619      	mov	r1, r3
    567a:	68f8      	ldr	r0, [r7, #12]
    567c:	4b0d      	ldr	r3, [pc, #52]	; (56b4 <_qspi_sync_command_set_ifr+0x78>)
    567e:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5680:	683b      	ldr	r3, [r7, #0]
    5682:	781b      	ldrb	r3, [r3, #0]
    5684:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5688:	b2db      	uxtb	r3, r3
    568a:	2b00      	cmp	r3, #0
    568c:	d005      	beq.n	569a <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    568e:	683b      	ldr	r3, [r7, #0]
    5690:	795b      	ldrb	r3, [r3, #5]
    5692:	4619      	mov	r1, r3
    5694:	68f8      	ldr	r0, [r7, #12]
    5696:	4b08      	ldr	r3, [pc, #32]	; (56b8 <_qspi_sync_command_set_ifr+0x7c>)
    5698:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    569a:	683b      	ldr	r3, [r7, #0]
    569c:	681b      	ldr	r3, [r3, #0]
    569e:	4619      	mov	r1, r3
    56a0:	68f8      	ldr	r0, [r7, #12]
    56a2:	4b06      	ldr	r3, [pc, #24]	; (56bc <_qspi_sync_command_set_ifr+0x80>)
    56a4:	4798      	blx	r3
}
    56a6:	bf00      	nop
    56a8:	3710      	adds	r7, #16
    56aa:	46bd      	mov	sp, r7
    56ac:	bd80      	pop	{r7, pc}
    56ae:	bf00      	nop
    56b0:	00005471 	.word	0x00005471
    56b4:	0000548d 	.word	0x0000548d
    56b8:	000054c1 	.word	0x000054c1
    56bc:	000054f9 	.word	0x000054f9

000056c0 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    56c0:	b580      	push	{r7, lr}
    56c2:	b084      	sub	sp, #16
    56c4:	af00      	add	r7, sp, #0
    56c6:	6078      	str	r0, [r7, #4]
    56c8:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    56d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    56d4:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    56d6:	683b      	ldr	r3, [r7, #0]
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	f003 0320 	and.w	r3, r3, #32
    56de:	b2db      	uxtb	r3, r3
    56e0:	2b00      	cmp	r3, #0
    56e2:	d004      	beq.n	56ee <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    56e4:	683b      	ldr	r3, [r7, #0]
    56e6:	689b      	ldr	r3, [r3, #8]
    56e8:	68fa      	ldr	r2, [r7, #12]
    56ea:	4413      	add	r3, r2
    56ec:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    56ee:	68b8      	ldr	r0, [r7, #8]
    56f0:	4b18      	ldr	r3, [pc, #96]	; (5754 <_qspi_sync_run_transfer+0x94>)
    56f2:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    56f4:	683b      	ldr	r3, [r7, #0]
    56f6:	691b      	ldr	r3, [r3, #16]
    56f8:	2b00      	cmp	r3, #0
    56fa:	d103      	bne.n	5704 <_qspi_sync_run_transfer+0x44>
    56fc:	683b      	ldr	r3, [r7, #0]
    56fe:	695b      	ldr	r3, [r3, #20]
    5700:	2b00      	cmp	r3, #0
    5702:	d001      	beq.n	5708 <_qspi_sync_run_transfer+0x48>
    5704:	2301      	movs	r3, #1
    5706:	e000      	b.n	570a <_qspi_sync_run_transfer+0x4a>
    5708:	2300      	movs	r3, #0
    570a:	f003 0301 	and.w	r3, r3, #1
    570e:	b2db      	uxtb	r3, r3
    5710:	2282      	movs	r2, #130	; 0x82
    5712:	4911      	ldr	r1, [pc, #68]	; (5758 <_qspi_sync_run_transfer+0x98>)
    5714:	4618      	mov	r0, r3
    5716:	4b11      	ldr	r3, [pc, #68]	; (575c <_qspi_sync_run_transfer+0x9c>)
    5718:	4798      	blx	r3

	if (cmd->tx_buf) {
    571a:	683b      	ldr	r3, [r7, #0]
    571c:	691b      	ldr	r3, [r3, #16]
    571e:	2b00      	cmp	r3, #0
    5720:	d008      	beq.n	5734 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5722:	683b      	ldr	r3, [r7, #0]
    5724:	6919      	ldr	r1, [r3, #16]
    5726:	683b      	ldr	r3, [r7, #0]
    5728:	68db      	ldr	r3, [r3, #12]
    572a:	461a      	mov	r2, r3
    572c:	68f8      	ldr	r0, [r7, #12]
    572e:	4b0c      	ldr	r3, [pc, #48]	; (5760 <_qspi_sync_run_transfer+0xa0>)
    5730:	4798      	blx	r3
    5732:	e007      	b.n	5744 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5734:	683b      	ldr	r3, [r7, #0]
    5736:	6958      	ldr	r0, [r3, #20]
    5738:	683b      	ldr	r3, [r7, #0]
    573a:	68db      	ldr	r3, [r3, #12]
    573c:	461a      	mov	r2, r3
    573e:	68f9      	ldr	r1, [r7, #12]
    5740:	4b07      	ldr	r3, [pc, #28]	; (5760 <_qspi_sync_run_transfer+0xa0>)
    5742:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5748:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    574c:	bf00      	nop
    574e:	3710      	adds	r7, #16
    5750:	46bd      	mov	sp, r7
    5752:	bd80      	pop	{r7, pc}
    5754:	00005515 	.word	0x00005515
    5758:	00010a4c 	.word	0x00010a4c
    575c:	000038e1 	.word	0x000038e1
    5760:	0000552d 	.word	0x0000552d

00005764 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
    576c:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    576e:	6839      	ldr	r1, [r7, #0]
    5770:	6878      	ldr	r0, [r7, #4]
    5772:	4b14      	ldr	r3, [pc, #80]	; (57c4 <_qspi_sync_serial_run_command+0x60>)
    5774:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5776:	683b      	ldr	r3, [r7, #0]
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    577e:	b2db      	uxtb	r3, r3
    5780:	2b00      	cmp	r3, #0
    5782:	d003      	beq.n	578c <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5784:	6839      	ldr	r1, [r7, #0]
    5786:	6878      	ldr	r0, [r7, #4]
    5788:	4b0f      	ldr	r3, [pc, #60]	; (57c8 <_qspi_sync_serial_run_command+0x64>)
    578a:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    578c:	687b      	ldr	r3, [r7, #4]
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	4618      	mov	r0, r3
    5792:	4b0e      	ldr	r3, [pc, #56]	; (57cc <_qspi_sync_serial_run_command+0x68>)
    5794:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5796:	bf00      	nop
    5798:	687b      	ldr	r3, [r7, #4]
    579a:	681b      	ldr	r3, [r3, #0]
    579c:	4618      	mov	r0, r3
    579e:	4b0c      	ldr	r3, [pc, #48]	; (57d0 <_qspi_sync_serial_run_command+0x6c>)
    57a0:	4798      	blx	r3
    57a2:	4603      	mov	r3, r0
    57a4:	f083 0301 	eor.w	r3, r3, #1
    57a8:	b2db      	uxtb	r3, r3
    57aa:	2b00      	cmp	r3, #0
    57ac:	d1f4      	bne.n	5798 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	681b      	ldr	r3, [r3, #0]
    57b2:	4618      	mov	r0, r3
    57b4:	4b07      	ldr	r3, [pc, #28]	; (57d4 <_qspi_sync_serial_run_command+0x70>)
    57b6:	4798      	blx	r3
	return ERR_NONE;
    57b8:	2300      	movs	r3, #0
}
    57ba:	4618      	mov	r0, r3
    57bc:	3708      	adds	r7, #8
    57be:	46bd      	mov	sp, r7
    57c0:	bd80      	pop	{r7, pc}
    57c2:	bf00      	nop
    57c4:	0000563d 	.word	0x0000563d
    57c8:	000056c1 	.word	0x000056c1
    57cc:	00005561 	.word	0x00005561
    57d0:	000053d9 	.word	0x000053d9
    57d4:	00005401 	.word	0x00005401

000057d8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    57d8:	b480      	push	{r7}
    57da:	b083      	sub	sp, #12
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
    57e0:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    57e2:	bf00      	nop
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	691a      	ldr	r2, [r3, #16]
    57e8:	683b      	ldr	r3, [r7, #0]
    57ea:	4013      	ands	r3, r2
    57ec:	2b00      	cmp	r3, #0
    57ee:	d1f9      	bne.n	57e4 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    57f0:	bf00      	nop
    57f2:	370c      	adds	r7, #12
    57f4:	46bd      	mov	sp, r7
    57f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fa:	4770      	bx	lr

000057fc <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    57fc:	b480      	push	{r7}
    57fe:	b083      	sub	sp, #12
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5804:	687b      	ldr	r3, [r7, #4]
    5806:	f44f 7280 	mov.w	r2, #256	; 0x100
    580a:	819a      	strh	r2, [r3, #12]
}
    580c:	bf00      	nop
    580e:	370c      	adds	r7, #12
    5810:	46bd      	mov	sp, r7
    5812:	f85d 7b04 	ldr.w	r7, [sp], #4
    5816:	4770      	bx	lr

00005818 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5818:	b480      	push	{r7}
    581a:	b083      	sub	sp, #12
    581c:	af00      	add	r7, sp, #0
    581e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5826:	819a      	strh	r2, [r3, #12]
}
    5828:	bf00      	nop
    582a:	370c      	adds	r7, #12
    582c:	46bd      	mov	sp, r7
    582e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5832:	4770      	bx	lr

00005834 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5834:	b480      	push	{r7}
    5836:	b083      	sub	sp, #12
    5838:	af00      	add	r7, sp, #0
    583a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    583c:	687b      	ldr	r3, [r7, #4]
    583e:	899b      	ldrh	r3, [r3, #12]
    5840:	b29b      	uxth	r3, r3
}
    5842:	4618      	mov	r0, r3
    5844:	370c      	adds	r7, #12
    5846:	46bd      	mov	sp, r7
    5848:	f85d 7b04 	ldr.w	r7, [sp], #4
    584c:	4770      	bx	lr

0000584e <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    584e:	b480      	push	{r7}
    5850:	b083      	sub	sp, #12
    5852:	af00      	add	r7, sp, #0
    5854:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5856:	687b      	ldr	r3, [r7, #4]
    5858:	895b      	ldrh	r3, [r3, #10]
    585a:	b29b      	uxth	r3, r3
}
    585c:	4618      	mov	r0, r3
    585e:	370c      	adds	r7, #12
    5860:	46bd      	mov	sp, r7
    5862:	f85d 7b04 	ldr.w	r7, [sp], #4
    5866:	4770      	bx	lr

00005868 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5868:	b580      	push	{r7, lr}
    586a:	b082      	sub	sp, #8
    586c:	af00      	add	r7, sp, #0
    586e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5870:	687b      	ldr	r3, [r7, #4]
    5872:	881b      	ldrh	r3, [r3, #0]
    5874:	b29b      	uxth	r3, r3
    5876:	f043 0301 	orr.w	r3, r3, #1
    587a:	b29a      	uxth	r2, r3
    587c:	687b      	ldr	r3, [r7, #4]
    587e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5880:	2101      	movs	r1, #1
    5882:	6878      	ldr	r0, [r7, #4]
    5884:	4b02      	ldr	r3, [pc, #8]	; (5890 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5886:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5888:	bf00      	nop
    588a:	3708      	adds	r7, #8
    588c:	46bd      	mov	sp, r7
    588e:	bd80      	pop	{r7, pc}
    5890:	000057d9 	.word	0x000057d9

00005894 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5894:	b580      	push	{r7, lr}
    5896:	b084      	sub	sp, #16
    5898:	af00      	add	r7, sp, #0
    589a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    589c:	f248 0103 	movw	r1, #32771	; 0x8003
    58a0:	6878      	ldr	r0, [r7, #4]
    58a2:	4b0a      	ldr	r3, [pc, #40]	; (58cc <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    58a4:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	881b      	ldrh	r3, [r3, #0]
    58aa:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    58ac:	89fb      	ldrh	r3, [r7, #14]
    58ae:	085b      	lsrs	r3, r3, #1
    58b0:	b29b      	uxth	r3, r3
    58b2:	f003 0301 	and.w	r3, r3, #1
    58b6:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    58b8:	89fb      	ldrh	r3, [r7, #14]
    58ba:	2b00      	cmp	r3, #0
    58bc:	bf14      	ite	ne
    58be:	2301      	movne	r3, #1
    58c0:	2300      	moveq	r3, #0
    58c2:	b2db      	uxtb	r3, r3
}
    58c4:	4618      	mov	r0, r3
    58c6:	3710      	adds	r7, #16
    58c8:	46bd      	mov	sp, r7
    58ca:	bd80      	pop	{r7, pc}
    58cc:	000057d9 	.word	0x000057d9

000058d0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    58d0:	b580      	push	{r7, lr}
    58d2:	b082      	sub	sp, #8
    58d4:	af00      	add	r7, sp, #0
    58d6:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    58d8:	687b      	ldr	r3, [r7, #4]
    58da:	881b      	ldrh	r3, [r3, #0]
    58dc:	b29b      	uxth	r3, r3
    58de:	f023 0302 	bic.w	r3, r3, #2
    58e2:	b29a      	uxth	r2, r3
    58e4:	687b      	ldr	r3, [r7, #4]
    58e6:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    58e8:	f248 0103 	movw	r1, #32771	; 0x8003
    58ec:	6878      	ldr	r0, [r7, #4]
    58ee:	4b03      	ldr	r3, [pc, #12]	; (58fc <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    58f0:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    58f2:	bf00      	nop
    58f4:	3708      	adds	r7, #8
    58f6:	46bd      	mov	sp, r7
    58f8:	bd80      	pop	{r7, pc}
    58fa:	bf00      	nop
    58fc:	000057d9 	.word	0x000057d9

00005900 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5900:	b580      	push	{r7, lr}
    5902:	b082      	sub	sp, #8
    5904:	af00      	add	r7, sp, #0
    5906:	6078      	str	r0, [r7, #4]
    5908:	460b      	mov	r3, r1
    590a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	887a      	ldrh	r2, [r7, #2]
    5910:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5912:	f248 0103 	movw	r1, #32771	; 0x8003
    5916:	6878      	ldr	r0, [r7, #4]
    5918:	4b02      	ldr	r3, [pc, #8]	; (5924 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    591a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    591c:	bf00      	nop
    591e:	3708      	adds	r7, #8
    5920:	46bd      	mov	sp, r7
    5922:	bd80      	pop	{r7, pc}
    5924:	000057d9 	.word	0x000057d9

00005928 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    5928:	b580      	push	{r7, lr}
    592a:	b082      	sub	sp, #8
    592c:	af00      	add	r7, sp, #0
    592e:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    5930:	2108      	movs	r1, #8
    5932:	6878      	ldr	r0, [r7, #4]
    5934:	4b03      	ldr	r3, [pc, #12]	; (5944 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    5936:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	699b      	ldr	r3, [r3, #24]
}
    593c:	4618      	mov	r0, r3
    593e:	3708      	adds	r7, #8
    5940:	46bd      	mov	sp, r7
    5942:	bd80      	pop	{r7, pc}
    5944:	000057d9 	.word	0x000057d9

00005948 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5948:	b480      	push	{r7}
    594a:	b083      	sub	sp, #12
    594c:	af00      	add	r7, sp, #0
    594e:	6078      	str	r0, [r7, #4]
    5950:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	683a      	ldr	r2, [r7, #0]
    5956:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5958:	bf00      	nop
    595a:	370c      	adds	r7, #12
    595c:	46bd      	mov	sp, r7
    595e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5962:	4770      	bx	lr

00005964 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5964:	b580      	push	{r7, lr}
    5966:	b082      	sub	sp, #8
    5968:	af00      	add	r7, sp, #0
    596a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	2b00      	cmp	r3, #0
    5970:	d005      	beq.n	597e <_calendar_init+0x1a>
    5972:	687b      	ldr	r3, [r7, #4]
    5974:	681b      	ldr	r3, [r3, #0]
    5976:	2b00      	cmp	r3, #0
    5978:	d001      	beq.n	597e <_calendar_init+0x1a>
    597a:	2301      	movs	r3, #1
    597c:	e000      	b.n	5980 <_calendar_init+0x1c>
    597e:	2300      	movs	r3, #0
    5980:	f003 0301 	and.w	r3, r3, #1
    5984:	b2db      	uxtb	r3, r3
    5986:	222f      	movs	r2, #47	; 0x2f
    5988:	491b      	ldr	r1, [pc, #108]	; (59f8 <_calendar_init+0x94>)
    598a:	4618      	mov	r0, r3
    598c:	4b1b      	ldr	r3, [pc, #108]	; (59fc <_calendar_init+0x98>)
    598e:	4798      	blx	r3

	_rtc_dev = dev;
    5990:	4a1b      	ldr	r2, [pc, #108]	; (5a00 <_calendar_init+0x9c>)
    5992:	687b      	ldr	r3, [r7, #4]
    5994:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	4618      	mov	r0, r3
    599c:	4b19      	ldr	r3, [pc, #100]	; (5a04 <_calendar_init+0xa0>)
    599e:	4798      	blx	r3
    59a0:	4603      	mov	r3, r0
    59a2:	2b00      	cmp	r3, #0
    59a4:	d00a      	beq.n	59bc <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	681b      	ldr	r3, [r3, #0]
    59aa:	4618      	mov	r0, r3
    59ac:	4b16      	ldr	r3, [pc, #88]	; (5a08 <_calendar_init+0xa4>)
    59ae:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	681b      	ldr	r3, [r3, #0]
    59b4:	2102      	movs	r1, #2
    59b6:	4618      	mov	r0, r3
    59b8:	4b14      	ldr	r3, [pc, #80]	; (5a0c <_calendar_init+0xa8>)
    59ba:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    59bc:	687b      	ldr	r3, [r7, #4]
    59be:	681b      	ldr	r3, [r3, #0]
    59c0:	4618      	mov	r0, r3
    59c2:	4b13      	ldr	r3, [pc, #76]	; (5a10 <_calendar_init+0xac>)
    59c4:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    59c6:	687b      	ldr	r3, [r7, #4]
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	2101      	movs	r1, #1
    59cc:	4618      	mov	r0, r3
    59ce:	4b0f      	ldr	r3, [pc, #60]	; (5a0c <_calendar_init+0xa8>)
    59d0:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    59d2:	687b      	ldr	r3, [r7, #4]
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    59da:	4618      	mov	r0, r3
    59dc:	4b0d      	ldr	r3, [pc, #52]	; (5a14 <_calendar_init+0xb0>)
    59de:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    59e4:	2100      	movs	r1, #0
    59e6:	4618      	mov	r0, r3
    59e8:	4b0b      	ldr	r3, [pc, #44]	; (5a18 <_calendar_init+0xb4>)
    59ea:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    59ec:	2300      	movs	r3, #0
}
    59ee:	4618      	mov	r0, r3
    59f0:	3708      	adds	r7, #8
    59f2:	46bd      	mov	sp, r7
    59f4:	bd80      	pop	{r7, pc}
    59f6:	bf00      	nop
    59f8:	00010a64 	.word	0x00010a64
    59fc:	000038e1 	.word	0x000038e1
    5a00:	20000c04 	.word	0x20000c04
    5a04:	00005895 	.word	0x00005895
    5a08:	000058d1 	.word	0x000058d1
    5a0c:	000057d9 	.word	0x000057d9
    5a10:	00005869 	.word	0x00005869
    5a14:	00005901 	.word	0x00005901
    5a18:	00005949 	.word	0x00005949

00005a1c <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    5a1c:	b580      	push	{r7, lr}
    5a1e:	b082      	sub	sp, #8
    5a20:	af00      	add	r7, sp, #0
    5a22:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	2b00      	cmp	r3, #0
    5a28:	d005      	beq.n	5a36 <_calendar_get_counter+0x1a>
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d001      	beq.n	5a36 <_calendar_get_counter+0x1a>
    5a32:	2301      	movs	r3, #1
    5a34:	e000      	b.n	5a38 <_calendar_get_counter+0x1c>
    5a36:	2300      	movs	r3, #0
    5a38:	f003 0301 	and.w	r3, r3, #1
    5a3c:	b2db      	uxtb	r3, r3
    5a3e:	2299      	movs	r2, #153	; 0x99
    5a40:	4906      	ldr	r1, [pc, #24]	; (5a5c <_calendar_get_counter+0x40>)
    5a42:	4618      	mov	r0, r3
    5a44:	4b06      	ldr	r3, [pc, #24]	; (5a60 <_calendar_get_counter+0x44>)
    5a46:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	681b      	ldr	r3, [r3, #0]
    5a4c:	4618      	mov	r0, r3
    5a4e:	4b05      	ldr	r3, [pc, #20]	; (5a64 <_calendar_get_counter+0x48>)
    5a50:	4798      	blx	r3
    5a52:	4603      	mov	r3, r0
}
    5a54:	4618      	mov	r0, r3
    5a56:	3708      	adds	r7, #8
    5a58:	46bd      	mov	sp, r7
    5a5a:	bd80      	pop	{r7, pc}
    5a5c:	00010a64 	.word	0x00010a64
    5a60:	000038e1 	.word	0x000038e1
    5a64:	00005929 	.word	0x00005929

00005a68 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5a68:	b580      	push	{r7, lr}
    5a6a:	b084      	sub	sp, #16
    5a6c:	af00      	add	r7, sp, #0
    5a6e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	681b      	ldr	r3, [r3, #0]
    5a74:	4618      	mov	r0, r3
    5a76:	4b19      	ldr	r3, [pc, #100]	; (5adc <_rtc_interrupt_handler+0x74>)
    5a78:	4798      	blx	r3
    5a7a:	4603      	mov	r3, r0
    5a7c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	681b      	ldr	r3, [r3, #0]
    5a82:	4618      	mov	r0, r3
    5a84:	4b16      	ldr	r3, [pc, #88]	; (5ae0 <_rtc_interrupt_handler+0x78>)
    5a86:	4798      	blx	r3
    5a88:	4603      	mov	r3, r0
    5a8a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5a8c:	89fa      	ldrh	r2, [r7, #14]
    5a8e:	89bb      	ldrh	r3, [r7, #12]
    5a90:	4013      	ands	r3, r2
    5a92:	b29b      	uxth	r3, r3
    5a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d009      	beq.n	5ab0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5a9c:	687b      	ldr	r3, [r7, #4]
    5a9e:	685b      	ldr	r3, [r3, #4]
    5aa0:	6878      	ldr	r0, [r7, #4]
    5aa2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	681b      	ldr	r3, [r3, #0]
    5aa8:	4618      	mov	r0, r3
    5aaa:	4b0e      	ldr	r3, [pc, #56]	; (5ae4 <_rtc_interrupt_handler+0x7c>)
    5aac:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5aae:	e010      	b.n	5ad2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5ab0:	89fa      	ldrh	r2, [r7, #14]
    5ab2:	89bb      	ldrh	r3, [r7, #12]
    5ab4:	4013      	ands	r3, r2
    5ab6:	b29b      	uxth	r3, r3
    5ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5abc:	2b00      	cmp	r3, #0
    5abe:	d008      	beq.n	5ad2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5ac0:	687b      	ldr	r3, [r7, #4]
    5ac2:	689b      	ldr	r3, [r3, #8]
    5ac4:	6878      	ldr	r0, [r7, #4]
    5ac6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	681b      	ldr	r3, [r3, #0]
    5acc:	4618      	mov	r0, r3
    5ace:	4b06      	ldr	r3, [pc, #24]	; (5ae8 <_rtc_interrupt_handler+0x80>)
    5ad0:	4798      	blx	r3
}
    5ad2:	bf00      	nop
    5ad4:	3710      	adds	r7, #16
    5ad6:	46bd      	mov	sp, r7
    5ad8:	bd80      	pop	{r7, pc}
    5ada:	bf00      	nop
    5adc:	00005835 	.word	0x00005835
    5ae0:	0000584f 	.word	0x0000584f
    5ae4:	000057fd 	.word	0x000057fd
    5ae8:	00005819 	.word	0x00005819

00005aec <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5aec:	b580      	push	{r7, lr}
    5aee:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5af0:	4b03      	ldr	r3, [pc, #12]	; (5b00 <RTC_Handler+0x14>)
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	4618      	mov	r0, r3
    5af6:	4b03      	ldr	r3, [pc, #12]	; (5b04 <RTC_Handler+0x18>)
    5af8:	4798      	blx	r3
}
    5afa:	bf00      	nop
    5afc:	bd80      	pop	{r7, pc}
    5afe:	bf00      	nop
    5b00:	20000c04 	.word	0x20000c04
    5b04:	00005a69 	.word	0x00005a69

00005b08 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5b08:	b480      	push	{r7}
    5b0a:	b083      	sub	sp, #12
    5b0c:	af00      	add	r7, sp, #0
    5b0e:	6078      	str	r0, [r7, #4]
    5b10:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5b12:	bf00      	nop
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	69da      	ldr	r2, [r3, #28]
    5b18:	683b      	ldr	r3, [r7, #0]
    5b1a:	4013      	ands	r3, r2
    5b1c:	2b00      	cmp	r3, #0
    5b1e:	d1f9      	bne.n	5b14 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5b20:	bf00      	nop
    5b22:	370c      	adds	r7, #12
    5b24:	46bd      	mov	sp, r7
    5b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b2a:	4770      	bx	lr

00005b2c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5b2c:	b480      	push	{r7}
    5b2e:	b083      	sub	sp, #12
    5b30:	af00      	add	r7, sp, #0
    5b32:	6078      	str	r0, [r7, #4]
    5b34:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5b36:	687b      	ldr	r3, [r7, #4]
    5b38:	69da      	ldr	r2, [r3, #28]
    5b3a:	683b      	ldr	r3, [r7, #0]
    5b3c:	4013      	ands	r3, r2
    5b3e:	2b00      	cmp	r3, #0
    5b40:	bf14      	ite	ne
    5b42:	2301      	movne	r3, #1
    5b44:	2300      	moveq	r3, #0
    5b46:	b2db      	uxtb	r3, r3
}
    5b48:	4618      	mov	r0, r3
    5b4a:	370c      	adds	r7, #12
    5b4c:	46bd      	mov	sp, r7
    5b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b52:	4770      	bx	lr

00005b54 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5b54:	b480      	push	{r7}
    5b56:	b083      	sub	sp, #12
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
    5b5c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5b5e:	bf00      	nop
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	69da      	ldr	r2, [r3, #28]
    5b64:	683b      	ldr	r3, [r7, #0]
    5b66:	4013      	ands	r3, r2
    5b68:	2b00      	cmp	r3, #0
    5b6a:	d1f9      	bne.n	5b60 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5b6c:	bf00      	nop
    5b6e:	370c      	adds	r7, #12
    5b70:	46bd      	mov	sp, r7
    5b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b76:	4770      	bx	lr

00005b78 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5b78:	b480      	push	{r7}
    5b7a:	b083      	sub	sp, #12
    5b7c:	af00      	add	r7, sp, #0
    5b7e:	6078      	str	r0, [r7, #4]
    5b80:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	69da      	ldr	r2, [r3, #28]
    5b86:	683b      	ldr	r3, [r7, #0]
    5b88:	4013      	ands	r3, r2
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	bf14      	ite	ne
    5b8e:	2301      	movne	r3, #1
    5b90:	2300      	moveq	r3, #0
    5b92:	b2db      	uxtb	r3, r3
}
    5b94:	4618      	mov	r0, r3
    5b96:	370c      	adds	r7, #12
    5b98:	46bd      	mov	sp, r7
    5b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b9e:	4770      	bx	lr

00005ba0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5ba0:	b480      	push	{r7}
    5ba2:	b083      	sub	sp, #12
    5ba4:	af00      	add	r7, sp, #0
    5ba6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5ba8:	687b      	ldr	r3, [r7, #4]
    5baa:	2201      	movs	r2, #1
    5bac:	761a      	strb	r2, [r3, #24]
}
    5bae:	bf00      	nop
    5bb0:	370c      	adds	r7, #12
    5bb2:	46bd      	mov	sp, r7
    5bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb8:	4770      	bx	lr

00005bba <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5bba:	b480      	push	{r7}
    5bbc:	b083      	sub	sp, #12
    5bbe:	af00      	add	r7, sp, #0
    5bc0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5bc2:	687b      	ldr	r3, [r7, #4]
    5bc4:	2202      	movs	r2, #2
    5bc6:	761a      	strb	r2, [r3, #24]
}
    5bc8:	bf00      	nop
    5bca:	370c      	adds	r7, #12
    5bcc:	46bd      	mov	sp, r7
    5bce:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bd2:	4770      	bx	lr

00005bd4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5bd4:	b480      	push	{r7}
    5bd6:	b083      	sub	sp, #12
    5bd8:	af00      	add	r7, sp, #0
    5bda:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5bdc:	687b      	ldr	r3, [r7, #4]
    5bde:	7e1b      	ldrb	r3, [r3, #24]
    5be0:	b2db      	uxtb	r3, r3
}
    5be2:	4618      	mov	r0, r3
    5be4:	370c      	adds	r7, #12
    5be6:	46bd      	mov	sp, r7
    5be8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bec:	4770      	bx	lr

00005bee <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5bee:	b480      	push	{r7}
    5bf0:	b085      	sub	sp, #20
    5bf2:	af00      	add	r7, sp, #0
    5bf4:	6078      	str	r0, [r7, #4]
    5bf6:	460b      	mov	r3, r1
    5bf8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	7e1b      	ldrb	r3, [r3, #24]
    5bfe:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5c00:	7bfa      	ldrb	r2, [r7, #15]
    5c02:	78fb      	ldrb	r3, [r7, #3]
    5c04:	4013      	ands	r3, r2
    5c06:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5c08:	7bfb      	ldrb	r3, [r7, #15]
}
    5c0a:	4618      	mov	r0, r3
    5c0c:	3714      	adds	r7, #20
    5c0e:	46bd      	mov	sp, r7
    5c10:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c14:	4770      	bx	lr

00005c16 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5c16:	b480      	push	{r7}
    5c18:	b083      	sub	sp, #12
    5c1a:	af00      	add	r7, sp, #0
    5c1c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5c1e:	687b      	ldr	r3, [r7, #4]
    5c20:	7e1b      	ldrb	r3, [r3, #24]
    5c22:	b2db      	uxtb	r3, r3
}
    5c24:	4618      	mov	r0, r3
    5c26:	370c      	adds	r7, #12
    5c28:	46bd      	mov	sp, r7
    5c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2e:	4770      	bx	lr

00005c30 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5c30:	b480      	push	{r7}
    5c32:	b083      	sub	sp, #12
    5c34:	af00      	add	r7, sp, #0
    5c36:	6078      	str	r0, [r7, #4]
    5c38:	460b      	mov	r3, r1
    5c3a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	78fa      	ldrb	r2, [r7, #3]
    5c40:	761a      	strb	r2, [r3, #24]
}
    5c42:	bf00      	nop
    5c44:	370c      	adds	r7, #12
    5c46:	46bd      	mov	sp, r7
    5c48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c4c:	4770      	bx	lr
	...

00005c50 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5c50:	b580      	push	{r7, lr}
    5c52:	b082      	sub	sp, #8
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	681b      	ldr	r3, [r3, #0]
    5c5c:	f023 0202 	bic.w	r2, r3, #2
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5c64:	2103      	movs	r1, #3
    5c66:	6878      	ldr	r0, [r7, #4]
    5c68:	4b02      	ldr	r3, [pc, #8]	; (5c74 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5c6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c6c:	bf00      	nop
    5c6e:	3708      	adds	r7, #8
    5c70:	46bd      	mov	sp, r7
    5c72:	bd80      	pop	{r7, pc}
    5c74:	00005b09 	.word	0x00005b09

00005c78 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5c78:	b480      	push	{r7}
    5c7a:	b085      	sub	sp, #20
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5c86:	68fb      	ldr	r3, [r7, #12]
    5c88:	0edb      	lsrs	r3, r3, #27
    5c8a:	f003 0301 	and.w	r3, r3, #1
    5c8e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	2b00      	cmp	r3, #0
    5c94:	bf14      	ite	ne
    5c96:	2301      	movne	r3, #1
    5c98:	2300      	moveq	r3, #0
    5c9a:	b2db      	uxtb	r3, r3
}
    5c9c:	4618      	mov	r0, r3
    5c9e:	3714      	adds	r7, #20
    5ca0:	46bd      	mov	sp, r7
    5ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ca6:	4770      	bx	lr

00005ca8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b084      	sub	sp, #16
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    5cb0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5cb2:	2103      	movs	r1, #3
    5cb4:	6878      	ldr	r0, [r7, #4]
    5cb6:	4b07      	ldr	r3, [pc, #28]	; (5cd4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5cb8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5cba:	687b      	ldr	r3, [r7, #4]
    5cbc:	681b      	ldr	r3, [r3, #0]
    5cbe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5cc0:	68fa      	ldr	r2, [r7, #12]
    5cc2:	683b      	ldr	r3, [r7, #0]
    5cc4:	4013      	ands	r3, r2
    5cc6:	60fb      	str	r3, [r7, #12]
	return tmp;
    5cc8:	68fb      	ldr	r3, [r7, #12]
}
    5cca:	4618      	mov	r0, r3
    5ccc:	3710      	adds	r7, #16
    5cce:	46bd      	mov	sp, r7
    5cd0:	bd80      	pop	{r7, pc}
    5cd2:	bf00      	nop
    5cd4:	00005b09 	.word	0x00005b09

00005cd8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5cd8:	b580      	push	{r7, lr}
    5cda:	b082      	sub	sp, #8
    5cdc:	af00      	add	r7, sp, #0
    5cde:	6078      	str	r0, [r7, #4]
    5ce0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	683a      	ldr	r2, [r7, #0]
    5ce6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ce8:	2103      	movs	r1, #3
    5cea:	6878      	ldr	r0, [r7, #4]
    5cec:	4b02      	ldr	r3, [pc, #8]	; (5cf8 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5cee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cf0:	bf00      	nop
    5cf2:	3708      	adds	r7, #8
    5cf4:	46bd      	mov	sp, r7
    5cf6:	bd80      	pop	{r7, pc}
    5cf8:	00005b09 	.word	0x00005b09

00005cfc <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	b082      	sub	sp, #8
    5d00:	af00      	add	r7, sp, #0
    5d02:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5d04:	687b      	ldr	r3, [r7, #4]
    5d06:	681b      	ldr	r3, [r3, #0]
    5d08:	f043 0202 	orr.w	r2, r3, #2
    5d0c:	687b      	ldr	r3, [r7, #4]
    5d0e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d10:	2103      	movs	r1, #3
    5d12:	6878      	ldr	r0, [r7, #4]
    5d14:	4b02      	ldr	r3, [pc, #8]	; (5d20 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    5d16:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d18:	bf00      	nop
    5d1a:	3708      	adds	r7, #8
    5d1c:	46bd      	mov	sp, r7
    5d1e:	bd80      	pop	{r7, pc}
    5d20:	00005b55 	.word	0x00005b55

00005d24 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b084      	sub	sp, #16
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d2c:	2103      	movs	r1, #3
    5d2e:	6878      	ldr	r0, [r7, #4]
    5d30:	4b09      	ldr	r3, [pc, #36]	; (5d58 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5d32:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	681b      	ldr	r3, [r3, #0]
    5d38:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5d3a:	68fb      	ldr	r3, [r7, #12]
    5d3c:	085b      	lsrs	r3, r3, #1
    5d3e:	f003 0301 	and.w	r3, r3, #1
    5d42:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	2b00      	cmp	r3, #0
    5d48:	bf14      	ite	ne
    5d4a:	2301      	movne	r3, #1
    5d4c:	2300      	moveq	r3, #0
    5d4e:	b2db      	uxtb	r3, r3
}
    5d50:	4618      	mov	r0, r3
    5d52:	3710      	adds	r7, #16
    5d54:	46bd      	mov	sp, r7
    5d56:	bd80      	pop	{r7, pc}
    5d58:	00005b55 	.word	0x00005b55

00005d5c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5d5c:	b580      	push	{r7, lr}
    5d5e:	b082      	sub	sp, #8
    5d60:	af00      	add	r7, sp, #0
    5d62:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	681b      	ldr	r3, [r3, #0]
    5d68:	f023 0202 	bic.w	r2, r3, #2
    5d6c:	687b      	ldr	r3, [r7, #4]
    5d6e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d70:	2103      	movs	r1, #3
    5d72:	6878      	ldr	r0, [r7, #4]
    5d74:	4b02      	ldr	r3, [pc, #8]	; (5d80 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5d76:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d78:	bf00      	nop
    5d7a:	3708      	adds	r7, #8
    5d7c:	46bd      	mov	sp, r7
    5d7e:	bd80      	pop	{r7, pc}
    5d80:	00005b55 	.word	0x00005b55

00005d84 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5d84:	b580      	push	{r7, lr}
    5d86:	b084      	sub	sp, #16
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
    5d8c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d8e:	2103      	movs	r1, #3
    5d90:	6878      	ldr	r0, [r7, #4]
    5d92:	4b07      	ldr	r3, [pc, #28]	; (5db0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5d94:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5d9c:	68fa      	ldr	r2, [r7, #12]
    5d9e:	683b      	ldr	r3, [r7, #0]
    5da0:	4013      	ands	r3, r2
    5da2:	60fb      	str	r3, [r7, #12]
	return tmp;
    5da4:	68fb      	ldr	r3, [r7, #12]
}
    5da6:	4618      	mov	r0, r3
    5da8:	3710      	adds	r7, #16
    5daa:	46bd      	mov	sp, r7
    5dac:	bd80      	pop	{r7, pc}
    5dae:	bf00      	nop
    5db0:	00005b55 	.word	0x00005b55

00005db4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5db4:	b580      	push	{r7, lr}
    5db6:	b082      	sub	sp, #8
    5db8:	af00      	add	r7, sp, #0
    5dba:	6078      	str	r0, [r7, #4]
    5dbc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5dbe:	687b      	ldr	r3, [r7, #4]
    5dc0:	683a      	ldr	r2, [r7, #0]
    5dc2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5dc4:	2103      	movs	r1, #3
    5dc6:	6878      	ldr	r0, [r7, #4]
    5dc8:	4b02      	ldr	r3, [pc, #8]	; (5dd4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5dca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5dcc:	bf00      	nop
    5dce:	3708      	adds	r7, #8
    5dd0:	46bd      	mov	sp, r7
    5dd2:	bd80      	pop	{r7, pc}
    5dd4:	00005b55 	.word	0x00005b55

00005dd8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5dd8:	b580      	push	{r7, lr}
    5dda:	b082      	sub	sp, #8
    5ddc:	af00      	add	r7, sp, #0
    5dde:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5de0:	687b      	ldr	r3, [r7, #4]
    5de2:	685b      	ldr	r3, [r3, #4]
    5de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dec:	2104      	movs	r1, #4
    5dee:	6878      	ldr	r0, [r7, #4]
    5df0:	4b02      	ldr	r3, [pc, #8]	; (5dfc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5df2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5df4:	bf00      	nop
    5df6:	3708      	adds	r7, #8
    5df8:	46bd      	mov	sp, r7
    5dfa:	bd80      	pop	{r7, pc}
    5dfc:	00005b09 	.word	0x00005b09

00005e00 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5e00:	b580      	push	{r7, lr}
    5e02:	b082      	sub	sp, #8
    5e04:	af00      	add	r7, sp, #0
    5e06:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	685b      	ldr	r3, [r3, #4]
    5e0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5e10:	687b      	ldr	r3, [r7, #4]
    5e12:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e14:	2104      	movs	r1, #4
    5e16:	6878      	ldr	r0, [r7, #4]
    5e18:	4b02      	ldr	r3, [pc, #8]	; (5e24 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5e1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e1c:	bf00      	nop
    5e1e:	3708      	adds	r7, #8
    5e20:	46bd      	mov	sp, r7
    5e22:	bd80      	pop	{r7, pc}
    5e24:	00005b09 	.word	0x00005b09

00005e28 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5e28:	b580      	push	{r7, lr}
    5e2a:	b082      	sub	sp, #8
    5e2c:	af00      	add	r7, sp, #0
    5e2e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5e30:	687b      	ldr	r3, [r7, #4]
    5e32:	685b      	ldr	r3, [r3, #4]
    5e34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e3c:	2104      	movs	r1, #4
    5e3e:	6878      	ldr	r0, [r7, #4]
    5e40:	4b02      	ldr	r3, [pc, #8]	; (5e4c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5e42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e44:	bf00      	nop
    5e46:	3708      	adds	r7, #8
    5e48:	46bd      	mov	sp, r7
    5e4a:	bd80      	pop	{r7, pc}
    5e4c:	00005b09 	.word	0x00005b09

00005e50 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5e50:	b580      	push	{r7, lr}
    5e52:	b082      	sub	sp, #8
    5e54:	af00      	add	r7, sp, #0
    5e56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	685b      	ldr	r3, [r3, #4]
    5e5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e64:	2104      	movs	r1, #4
    5e66:	6878      	ldr	r0, [r7, #4]
    5e68:	4b02      	ldr	r3, [pc, #8]	; (5e74 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5e6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e6c:	bf00      	nop
    5e6e:	3708      	adds	r7, #8
    5e70:	46bd      	mov	sp, r7
    5e72:	bd80      	pop	{r7, pc}
    5e74:	00005b09 	.word	0x00005b09

00005e78 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5e78:	b580      	push	{r7, lr}
    5e7a:	b082      	sub	sp, #8
    5e7c:	af00      	add	r7, sp, #0
    5e7e:	6078      	str	r0, [r7, #4]
    5e80:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5e82:	687b      	ldr	r3, [r7, #4]
    5e84:	685a      	ldr	r2, [r3, #4]
    5e86:	683b      	ldr	r3, [r7, #0]
    5e88:	041b      	lsls	r3, r3, #16
    5e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5e8e:	431a      	orrs	r2, r3
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e94:	2104      	movs	r1, #4
    5e96:	6878      	ldr	r0, [r7, #4]
    5e98:	4b02      	ldr	r3, [pc, #8]	; (5ea4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5e9a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e9c:	bf00      	nop
    5e9e:	3708      	adds	r7, #8
    5ea0:	46bd      	mov	sp, r7
    5ea2:	bd80      	pop	{r7, pc}
    5ea4:	00005b09 	.word	0x00005b09

00005ea8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b082      	sub	sp, #8
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
    5eb0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	683a      	ldr	r2, [r7, #0]
    5eb6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5eb8:	2104      	movs	r1, #4
    5eba:	6878      	ldr	r0, [r7, #4]
    5ebc:	4b02      	ldr	r3, [pc, #8]	; (5ec8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5ebe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ec0:	bf00      	nop
    5ec2:	3708      	adds	r7, #8
    5ec4:	46bd      	mov	sp, r7
    5ec6:	bd80      	pop	{r7, pc}
    5ec8:	00005b09 	.word	0x00005b09

00005ecc <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	b082      	sub	sp, #8
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	6078      	str	r0, [r7, #4]
    5ed4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5ed6:	687b      	ldr	r3, [r7, #4]
    5ed8:	683a      	ldr	r2, [r7, #0]
    5eda:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5edc:	2117      	movs	r1, #23
    5ede:	6878      	ldr	r0, [r7, #4]
    5ee0:	4b02      	ldr	r3, [pc, #8]	; (5eec <hri_sercomspi_write_CTRLB_reg+0x20>)
    5ee2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ee4:	bf00      	nop
    5ee6:	3708      	adds	r7, #8
    5ee8:	46bd      	mov	sp, r7
    5eea:	bd80      	pop	{r7, pc}
    5eec:	00005b55 	.word	0x00005b55

00005ef0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5ef0:	b480      	push	{r7}
    5ef2:	b083      	sub	sp, #12
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	6078      	str	r0, [r7, #4]
    5ef8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	683a      	ldr	r2, [r7, #0]
    5efe:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f00:	bf00      	nop
    5f02:	370c      	adds	r7, #12
    5f04:	46bd      	mov	sp, r7
    5f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f0a:	4770      	bx	lr

00005f0c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5f0c:	b480      	push	{r7}
    5f0e:	b083      	sub	sp, #12
    5f10:	af00      	add	r7, sp, #0
    5f12:	6078      	str	r0, [r7, #4]
    5f14:	460b      	mov	r3, r1
    5f16:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	78fa      	ldrb	r2, [r7, #3]
    5f1c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f1e:	bf00      	nop
    5f20:	370c      	adds	r7, #12
    5f22:	46bd      	mov	sp, r7
    5f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f28:	4770      	bx	lr
	...

00005f2c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b084      	sub	sp, #16
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
    5f34:	460b      	mov	r3, r1
    5f36:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f3c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5f3e:	68fb      	ldr	r3, [r7, #12]
    5f40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5f44:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5f46:	78fb      	ldrb	r3, [r7, #3]
    5f48:	039b      	lsls	r3, r3, #14
    5f4a:	461a      	mov	r2, r3
    5f4c:	68fb      	ldr	r3, [r7, #12]
    5f4e:	4313      	orrs	r3, r2
    5f50:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	68fa      	ldr	r2, [r7, #12]
    5f56:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f58:	2104      	movs	r1, #4
    5f5a:	6878      	ldr	r0, [r7, #4]
    5f5c:	4b02      	ldr	r3, [pc, #8]	; (5f68 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5f5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f60:	bf00      	nop
    5f62:	3710      	adds	r7, #16
    5f64:	46bd      	mov	sp, r7
    5f66:	bd80      	pop	{r7, pc}
    5f68:	00005b09 	.word	0x00005b09

00005f6c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5f6c:	b580      	push	{r7, lr}
    5f6e:	b082      	sub	sp, #8
    5f70:	af00      	add	r7, sp, #0
    5f72:	6078      	str	r0, [r7, #4]
    5f74:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5f76:	687b      	ldr	r3, [r7, #4]
    5f78:	683a      	ldr	r2, [r7, #0]
    5f7a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f7c:	2104      	movs	r1, #4
    5f7e:	6878      	ldr	r0, [r7, #4]
    5f80:	4b02      	ldr	r3, [pc, #8]	; (5f8c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5f82:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f84:	bf00      	nop
    5f86:	3708      	adds	r7, #8
    5f88:	46bd      	mov	sp, r7
    5f8a:	bd80      	pop	{r7, pc}
    5f8c:	00005b09 	.word	0x00005b09

00005f90 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5f90:	b580      	push	{r7, lr}
    5f92:	b082      	sub	sp, #8
    5f94:	af00      	add	r7, sp, #0
    5f96:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f98:	2104      	movs	r1, #4
    5f9a:	6878      	ldr	r0, [r7, #4]
    5f9c:	4b03      	ldr	r3, [pc, #12]	; (5fac <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5f9e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5fa4:	4618      	mov	r0, r3
    5fa6:	3708      	adds	r7, #8
    5fa8:	46bd      	mov	sp, r7
    5faa:	bd80      	pop	{r7, pc}
    5fac:	00005b09 	.word	0x00005b09

00005fb0 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5fb0:	b480      	push	{r7}
    5fb2:	b083      	sub	sp, #12
    5fb4:	af00      	add	r7, sp, #0
    5fb6:	6078      	str	r0, [r7, #4]
    5fb8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	683a      	ldr	r2, [r7, #0]
    5fbe:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fc0:	bf00      	nop
    5fc2:	370c      	adds	r7, #12
    5fc4:	46bd      	mov	sp, r7
    5fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fca:	4770      	bx	lr

00005fcc <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5fcc:	b580      	push	{r7, lr}
    5fce:	b082      	sub	sp, #8
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	6078      	str	r0, [r7, #4]
    5fd4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	683a      	ldr	r2, [r7, #0]
    5fda:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fdc:	2104      	movs	r1, #4
    5fde:	6878      	ldr	r0, [r7, #4]
    5fe0:	4b02      	ldr	r3, [pc, #8]	; (5fec <hri_sercomi2cm_write_DATA_reg+0x20>)
    5fe2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fe4:	bf00      	nop
    5fe6:	3708      	adds	r7, #8
    5fe8:	46bd      	mov	sp, r7
    5fea:	bd80      	pop	{r7, pc}
    5fec:	00005b09 	.word	0x00005b09

00005ff0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5ff0:	b580      	push	{r7, lr}
    5ff2:	b082      	sub	sp, #8
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ff8:	2104      	movs	r1, #4
    5ffa:	6878      	ldr	r0, [r7, #4]
    5ffc:	4b03      	ldr	r3, [pc, #12]	; (600c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5ffe:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6004:	4618      	mov	r0, r3
    6006:	3708      	adds	r7, #8
    6008:	46bd      	mov	sp, r7
    600a:	bd80      	pop	{r7, pc}
    600c:	00005b09 	.word	0x00005b09

00006010 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6010:	b480      	push	{r7}
    6012:	b083      	sub	sp, #12
    6014:	af00      	add	r7, sp, #0
    6016:	6078      	str	r0, [r7, #4]
    6018:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	683a      	ldr	r2, [r7, #0]
    601e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6020:	bf00      	nop
    6022:	370c      	adds	r7, #12
    6024:	46bd      	mov	sp, r7
    6026:	f85d 7b04 	ldr.w	r7, [sp], #4
    602a:	4770      	bx	lr

0000602c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    602c:	b480      	push	{r7}
    602e:	b083      	sub	sp, #12
    6030:	af00      	add	r7, sp, #0
    6032:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6038:	4618      	mov	r0, r3
    603a:	370c      	adds	r7, #12
    603c:	46bd      	mov	sp, r7
    603e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6042:	4770      	bx	lr

00006044 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6044:	b480      	push	{r7}
    6046:	b083      	sub	sp, #12
    6048:	af00      	add	r7, sp, #0
    604a:	6078      	str	r0, [r7, #4]
    604c:	460b      	mov	r3, r1
    604e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	78fa      	ldrb	r2, [r7, #3]
    6054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6058:	bf00      	nop
    605a:	370c      	adds	r7, #12
    605c:	46bd      	mov	sp, r7
    605e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6062:	4770      	bx	lr

00006064 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6064:	b480      	push	{r7}
    6066:	b083      	sub	sp, #12
    6068:	af00      	add	r7, sp, #0
    606a:	6078      	str	r0, [r7, #4]
    606c:	460b      	mov	r3, r1
    606e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	887a      	ldrh	r2, [r7, #2]
    6074:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6076:	bf00      	nop
    6078:	370c      	adds	r7, #12
    607a:	46bd      	mov	sp, r7
    607c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6080:	4770      	bx	lr
	...

00006084 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6084:	b580      	push	{r7, lr}
    6086:	b082      	sub	sp, #8
    6088:	af00      	add	r7, sp, #0
    608a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    608c:	2104      	movs	r1, #4
    608e:	6878      	ldr	r0, [r7, #4]
    6090:	4b04      	ldr	r3, [pc, #16]	; (60a4 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6092:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	8b5b      	ldrh	r3, [r3, #26]
    6098:	b29b      	uxth	r3, r3
}
    609a:	4618      	mov	r0, r3
    609c:	3708      	adds	r7, #8
    609e:	46bd      	mov	sp, r7
    60a0:	bd80      	pop	{r7, pc}
    60a2:	bf00      	nop
    60a4:	00005b09 	.word	0x00005b09

000060a8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    60a8:	b4b0      	push	{r4, r5, r7}
    60aa:	b08d      	sub	sp, #52	; 0x34
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    60b0:	4b13      	ldr	r3, [pc, #76]	; (6100 <_sercom_get_hardware_index+0x58>)
    60b2:	f107 040c 	add.w	r4, r7, #12
    60b6:	461d      	mov	r5, r3
    60b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    60ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    60bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    60c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    60c4:	2300      	movs	r3, #0
    60c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    60c8:	e010      	b.n	60ec <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    60ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60cc:	009b      	lsls	r3, r3, #2
    60ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
    60d2:	4413      	add	r3, r2
    60d4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    60d8:	461a      	mov	r2, r3
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	429a      	cmp	r2, r3
    60de:	d102      	bne.n	60e6 <_sercom_get_hardware_index+0x3e>
			return i;
    60e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60e2:	b2db      	uxtb	r3, r3
    60e4:	e006      	b.n	60f4 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    60e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60e8:	3301      	adds	r3, #1
    60ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    60ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60ee:	2b07      	cmp	r3, #7
    60f0:	d9eb      	bls.n	60ca <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    60f2:	2300      	movs	r3, #0
}
    60f4:	4618      	mov	r0, r3
    60f6:	3734      	adds	r7, #52	; 0x34
    60f8:	46bd      	mov	sp, r7
    60fa:	bcb0      	pop	{r4, r5, r7}
    60fc:	4770      	bx	lr
    60fe:	bf00      	nop
    6100:	00010a98 	.word	0x00010a98

00006104 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6104:	b580      	push	{r7, lr}
    6106:	b084      	sub	sp, #16
    6108:	af00      	add	r7, sp, #0
    610a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    610c:	6878      	ldr	r0, [r7, #4]
    610e:	4b13      	ldr	r3, [pc, #76]	; (615c <_get_i2cm_index+0x58>)
    6110:	4798      	blx	r3
    6112:	4603      	mov	r3, r0
    6114:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6116:	2300      	movs	r3, #0
    6118:	73fb      	strb	r3, [r7, #15]
    611a:	e010      	b.n	613e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    611c:	7bfa      	ldrb	r2, [r7, #15]
    611e:	4910      	ldr	r1, [pc, #64]	; (6160 <_get_i2cm_index+0x5c>)
    6120:	4613      	mov	r3, r2
    6122:	005b      	lsls	r3, r3, #1
    6124:	4413      	add	r3, r2
    6126:	00db      	lsls	r3, r3, #3
    6128:	440b      	add	r3, r1
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	7bba      	ldrb	r2, [r7, #14]
    612e:	429a      	cmp	r2, r3
    6130:	d102      	bne.n	6138 <_get_i2cm_index+0x34>
			return i;
    6132:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6136:	e00d      	b.n	6154 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6138:	7bfb      	ldrb	r3, [r7, #15]
    613a:	3301      	adds	r3, #1
    613c:	73fb      	strb	r3, [r7, #15]
    613e:	7bfb      	ldrb	r3, [r7, #15]
    6140:	2b02      	cmp	r3, #2
    6142:	d9eb      	bls.n	611c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6144:	f240 32a6 	movw	r2, #934	; 0x3a6
    6148:	4906      	ldr	r1, [pc, #24]	; (6164 <_get_i2cm_index+0x60>)
    614a:	2000      	movs	r0, #0
    614c:	4b06      	ldr	r3, [pc, #24]	; (6168 <_get_i2cm_index+0x64>)
    614e:	4798      	blx	r3
	return -1;
    6150:	f04f 33ff 	mov.w	r3, #4294967295
}
    6154:	4618      	mov	r0, r3
    6156:	3710      	adds	r7, #16
    6158:	46bd      	mov	sp, r7
    615a:	bd80      	pop	{r7, pc}
    615c:	000060a9 	.word	0x000060a9
    6160:	20000018 	.word	0x20000018
    6164:	00010a7c 	.word	0x00010a7c
    6168:	000038e1 	.word	0x000038e1

0000616c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    616c:	b580      	push	{r7, lr}
    616e:	b082      	sub	sp, #8
    6170:	af00      	add	r7, sp, #0
    6172:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6174:	2103      	movs	r1, #3
    6176:	6878      	ldr	r0, [r7, #4]
    6178:	4b02      	ldr	r3, [pc, #8]	; (6184 <_sercom_i2c_send_stop+0x18>)
    617a:	4798      	blx	r3
}
    617c:	bf00      	nop
    617e:	3708      	adds	r7, #8
    6180:	46bd      	mov	sp, r7
    6182:	bd80      	pop	{r7, pc}
    6184:	00005e79 	.word	0x00005e79

00006188 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6188:	b590      	push	{r4, r7, lr}
    618a:	b087      	sub	sp, #28
    618c:	af00      	add	r7, sp, #0
    618e:	60f8      	str	r0, [r7, #12]
    6190:	60b9      	str	r1, [r7, #8]
    6192:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6194:	68f8      	ldr	r0, [r7, #12]
    6196:	4b7d      	ldr	r3, [pc, #500]	; (638c <_sercom_i2c_sync_analyse_flags+0x204>)
    6198:	4798      	blx	r3
    619a:	4603      	mov	r3, r0
    619c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    619e:	68f8      	ldr	r0, [r7, #12]
    61a0:	4b7b      	ldr	r3, [pc, #492]	; (6390 <_sercom_i2c_sync_analyse_flags+0x208>)
    61a2:	4798      	blx	r3
    61a4:	4603      	mov	r3, r0
    61a6:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    61a8:	68bb      	ldr	r3, [r7, #8]
    61aa:	f003 0301 	and.w	r3, r3, #1
    61ae:	2b00      	cmp	r3, #0
    61b0:	f000 8095 	beq.w	62de <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    61b4:	8a7b      	ldrh	r3, [r7, #18]
    61b6:	f003 0302 	and.w	r3, r3, #2
    61ba:	2b00      	cmp	r3, #0
    61bc:	d01d      	beq.n	61fa <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    61be:	68f8      	ldr	r0, [r7, #12]
    61c0:	4b74      	ldr	r3, [pc, #464]	; (6394 <_sercom_i2c_sync_analyse_flags+0x20c>)
    61c2:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	885b      	ldrh	r3, [r3, #2]
    61c8:	b29b      	uxth	r3, r3
    61ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    61ce:	b29a      	uxth	r2, r3
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    61d4:	687b      	ldr	r3, [r7, #4]
    61d6:	885b      	ldrh	r3, [r3, #2]
    61d8:	b29b      	uxth	r3, r3
    61da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    61de:	b29a      	uxth	r2, r3
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    61e4:	8a7b      	ldrh	r3, [r7, #18]
    61e6:	f003 0301 	and.w	r3, r3, #1
    61ea:	2b00      	cmp	r3, #0
    61ec:	d002      	beq.n	61f4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    61ee:	f06f 0304 	mvn.w	r3, #4
    61f2:	e0c6      	b.n	6382 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    61f4:	f06f 0303 	mvn.w	r3, #3
    61f8:	e0c3      	b.n	6382 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    61fa:	8a7b      	ldrh	r3, [r7, #18]
    61fc:	f003 0304 	and.w	r3, r3, #4
    6200:	2b00      	cmp	r3, #0
    6202:	d01f      	beq.n	6244 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6204:	687b      	ldr	r3, [r7, #4]
    6206:	685b      	ldr	r3, [r3, #4]
    6208:	2b00      	cmp	r3, #0
    620a:	dd07      	ble.n	621c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	885b      	ldrh	r3, [r3, #2]
    6210:	b29b      	uxth	r3, r3
    6212:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6216:	b29a      	uxth	r2, r3
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	885b      	ldrh	r3, [r3, #2]
    6220:	b29b      	uxth	r3, r3
    6222:	b21b      	sxth	r3, r3
    6224:	2b00      	cmp	r3, #0
    6226:	da02      	bge.n	622e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6228:	68f8      	ldr	r0, [r7, #12]
    622a:	4b5b      	ldr	r3, [pc, #364]	; (6398 <_sercom_i2c_sync_analyse_flags+0x210>)
    622c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	885b      	ldrh	r3, [r3, #2]
    6232:	b29b      	uxth	r3, r3
    6234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6238:	b29a      	uxth	r2, r3
    623a:	687b      	ldr	r3, [r7, #4]
    623c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    623e:	f06f 0301 	mvn.w	r3, #1
    6242:	e09e      	b.n	6382 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	885b      	ldrh	r3, [r3, #2]
    6248:	b29b      	uxth	r3, r3
    624a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    624e:	2b00      	cmp	r3, #0
    6250:	d01c      	beq.n	628c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	881b      	ldrh	r3, [r3, #0]
    6256:	121b      	asrs	r3, r3, #8
    6258:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    625a:	f003 0406 	and.w	r4, r3, #6
    625e:	68f8      	ldr	r0, [r7, #12]
    6260:	4b4e      	ldr	r3, [pc, #312]	; (639c <_sercom_i2c_sync_analyse_flags+0x214>)
    6262:	4798      	blx	r3
    6264:	4603      	mov	r3, r0
    6266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    626a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    626c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6270:	4619      	mov	r1, r3
    6272:	68f8      	ldr	r0, [r7, #12]
    6274:	4b4a      	ldr	r3, [pc, #296]	; (63a0 <_sercom_i2c_sync_analyse_flags+0x218>)
    6276:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	885b      	ldrh	r3, [r3, #2]
    627c:	b29b      	uxth	r3, r3
    627e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6282:	b29a      	uxth	r2, r3
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6288:	2300      	movs	r3, #0
    628a:	e07a      	b.n	6382 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    628c:	687b      	ldr	r3, [r7, #4]
    628e:	685b      	ldr	r3, [r3, #4]
    6290:	2b00      	cmp	r3, #0
    6292:	d111      	bne.n	62b8 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	885b      	ldrh	r3, [r3, #2]
    6298:	b29b      	uxth	r3, r3
    629a:	b21b      	sxth	r3, r3
    629c:	2b00      	cmp	r3, #0
    629e:	da02      	bge.n	62a6 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    62a0:	68f8      	ldr	r0, [r7, #12]
    62a2:	4b3d      	ldr	r3, [pc, #244]	; (6398 <_sercom_i2c_sync_analyse_flags+0x210>)
    62a4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    62a6:	687b      	ldr	r3, [r7, #4]
    62a8:	885b      	ldrh	r3, [r3, #2]
    62aa:	b29b      	uxth	r3, r3
    62ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    62b0:	b29a      	uxth	r2, r3
    62b2:	687b      	ldr	r3, [r7, #4]
    62b4:	805a      	strh	r2, [r3, #2]
    62b6:	e010      	b.n	62da <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	689b      	ldr	r3, [r3, #8]
    62bc:	781b      	ldrb	r3, [r3, #0]
    62be:	4619      	mov	r1, r3
    62c0:	68f8      	ldr	r0, [r7, #12]
    62c2:	4b38      	ldr	r3, [pc, #224]	; (63a4 <_sercom_i2c_sync_analyse_flags+0x21c>)
    62c4:	4798      	blx	r3
				msg->buffer++;
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	689b      	ldr	r3, [r3, #8]
    62ca:	1c5a      	adds	r2, r3, #1
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	609a      	str	r2, [r3, #8]
				msg->len--;
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	685b      	ldr	r3, [r3, #4]
    62d4:	1e5a      	subs	r2, r3, #1
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    62da:	2300      	movs	r3, #0
    62dc:	e051      	b.n	6382 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    62de:	68bb      	ldr	r3, [r7, #8]
    62e0:	f003 0302 	and.w	r3, r3, #2
    62e4:	2b00      	cmp	r3, #0
    62e6:	d04b      	beq.n	6380 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	685b      	ldr	r3, [r3, #4]
    62ec:	2b00      	cmp	r3, #0
    62ee:	d041      	beq.n	6374 <_sercom_i2c_sync_analyse_flags+0x1ec>
    62f0:	8a7b      	ldrh	r3, [r7, #18]
    62f2:	f003 0304 	and.w	r3, r3, #4
    62f6:	2b00      	cmp	r3, #0
    62f8:	d13c      	bne.n	6374 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	685b      	ldr	r3, [r3, #4]
    62fe:	1e5a      	subs	r2, r3, #1
    6300:	687b      	ldr	r3, [r7, #4]
    6302:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6304:	687b      	ldr	r3, [r7, #4]
    6306:	685b      	ldr	r3, [r3, #4]
    6308:	2b00      	cmp	r3, #0
    630a:	d102      	bne.n	6312 <_sercom_i2c_sync_analyse_flags+0x18a>
    630c:	697b      	ldr	r3, [r7, #20]
    630e:	2b00      	cmp	r3, #0
    6310:	d006      	beq.n	6320 <_sercom_i2c_sync_analyse_flags+0x198>
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	685b      	ldr	r3, [r3, #4]
    6316:	2b01      	cmp	r3, #1
    6318:	d105      	bne.n	6326 <_sercom_i2c_sync_analyse_flags+0x19e>
    631a:	697b      	ldr	r3, [r7, #20]
    631c:	2b00      	cmp	r3, #0
    631e:	d002      	beq.n	6326 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6320:	68f8      	ldr	r0, [r7, #12]
    6322:	4b21      	ldr	r3, [pc, #132]	; (63a8 <_sercom_i2c_sync_analyse_flags+0x220>)
    6324:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	685b      	ldr	r3, [r3, #4]
    632a:	2b00      	cmp	r3, #0
    632c:	d113      	bne.n	6356 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    632e:	687b      	ldr	r3, [r7, #4]
    6330:	885b      	ldrh	r3, [r3, #2]
    6332:	b29b      	uxth	r3, r3
    6334:	b21b      	sxth	r3, r3
    6336:	2b00      	cmp	r3, #0
    6338:	da05      	bge.n	6346 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    633a:	68f8      	ldr	r0, [r7, #12]
    633c:	4b1b      	ldr	r3, [pc, #108]	; (63ac <_sercom_i2c_sync_analyse_flags+0x224>)
    633e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6340:	68f8      	ldr	r0, [r7, #12]
    6342:	4b15      	ldr	r3, [pc, #84]	; (6398 <_sercom_i2c_sync_analyse_flags+0x210>)
    6344:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	885b      	ldrh	r3, [r3, #2]
    634a:	b29b      	uxth	r3, r3
    634c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6350:	b29a      	uxth	r2, r3
    6352:	687b      	ldr	r3, [r7, #4]
    6354:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	689c      	ldr	r4, [r3, #8]
    635a:	1c62      	adds	r2, r4, #1
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	609a      	str	r2, [r3, #8]
    6360:	68f8      	ldr	r0, [r7, #12]
    6362:	4b13      	ldr	r3, [pc, #76]	; (63b0 <_sercom_i2c_sync_analyse_flags+0x228>)
    6364:	4798      	blx	r3
    6366:	4603      	mov	r3, r0
    6368:	b2db      	uxtb	r3, r3
    636a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    636c:	68f8      	ldr	r0, [r7, #12]
    636e:	4b11      	ldr	r3, [pc, #68]	; (63b4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6370:	4798      	blx	r3
    6372:	e005      	b.n	6380 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6374:	68f8      	ldr	r0, [r7, #12]
    6376:	4b0f      	ldr	r3, [pc, #60]	; (63b4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6378:	4798      	blx	r3
			return I2C_NACK;
    637a:	f06f 0301 	mvn.w	r3, #1
    637e:	e000      	b.n	6382 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6380:	2300      	movs	r3, #0
}
    6382:	4618      	mov	r0, r3
    6384:	371c      	adds	r7, #28
    6386:	46bd      	mov	sp, r7
    6388:	bd90      	pop	{r4, r7, pc}
    638a:	bf00      	nop
    638c:	00005c79 	.word	0x00005c79
    6390:	00006085 	.word	0x00006085
    6394:	00005ba1 	.word	0x00005ba1
    6398:	0000616d 	.word	0x0000616d
    639c:	00005f91 	.word	0x00005f91
    63a0:	00005f6d 	.word	0x00005f6d
    63a4:	00005fcd 	.word	0x00005fcd
    63a8:	00005e29 	.word	0x00005e29
    63ac:	00005e01 	.word	0x00005e01
    63b0:	00005ff1 	.word	0x00005ff1
    63b4:	00005bbb 	.word	0x00005bbb

000063b8 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    63b8:	b580      	push	{r7, lr}
    63ba:	b082      	sub	sp, #8
    63bc:	af00      	add	r7, sp, #0
    63be:	6078      	str	r0, [r7, #4]
    63c0:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	2b00      	cmp	r3, #0
    63c6:	bf14      	ite	ne
    63c8:	2301      	movne	r3, #1
    63ca:	2300      	moveq	r3, #0
    63cc:	b2db      	uxtb	r3, r3
    63ce:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    63d2:	4908      	ldr	r1, [pc, #32]	; (63f4 <_i2c_m_sync_init+0x3c>)
    63d4:	4618      	mov	r0, r3
    63d6:	4b08      	ldr	r3, [pc, #32]	; (63f8 <_i2c_m_sync_init+0x40>)
    63d8:	4798      	blx	r3

	i2c_dev->hw = hw;
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	683a      	ldr	r2, [r7, #0]
    63de:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    63e0:	687b      	ldr	r3, [r7, #4]
    63e2:	6839      	ldr	r1, [r7, #0]
    63e4:	4618      	mov	r0, r3
    63e6:	4b05      	ldr	r3, [pc, #20]	; (63fc <_i2c_m_sync_init+0x44>)
    63e8:	4798      	blx	r3
    63ea:	4603      	mov	r3, r0
}
    63ec:	4618      	mov	r0, r3
    63ee:	3708      	adds	r7, #8
    63f0:	46bd      	mov	sp, r7
    63f2:	bd80      	pop	{r7, pc}
    63f4:	00010a7c 	.word	0x00010a7c
    63f8:	000038e1 	.word	0x000038e1
    63fc:	000066a9 	.word	0x000066a9

00006400 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6400:	b580      	push	{r7, lr}
    6402:	b084      	sub	sp, #16
    6404:	af00      	add	r7, sp, #0
    6406:	6078      	str	r0, [r7, #4]
    6408:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    640a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    640e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6410:	687b      	ldr	r3, [r7, #4]
    6412:	691b      	ldr	r3, [r3, #16]
    6414:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6416:	68b8      	ldr	r0, [r7, #8]
    6418:	4b0f      	ldr	r3, [pc, #60]	; (6458 <_sercom_i2c_sync_wait_bus+0x58>)
    641a:	4798      	blx	r3
    641c:	4603      	mov	r3, r0
    641e:	461a      	mov	r2, r3
    6420:	683b      	ldr	r3, [r7, #0]
    6422:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6424:	68fb      	ldr	r3, [r7, #12]
    6426:	1e5a      	subs	r2, r3, #1
    6428:	60fa      	str	r2, [r7, #12]
    642a:	2b00      	cmp	r3, #0
    642c:	d102      	bne.n	6434 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    642e:	f06f 0304 	mvn.w	r3, #4
    6432:	e00c      	b.n	644e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6434:	683b      	ldr	r3, [r7, #0]
    6436:	681b      	ldr	r3, [r3, #0]
    6438:	f003 0301 	and.w	r3, r3, #1
    643c:	2b00      	cmp	r3, #0
    643e:	d105      	bne.n	644c <_sercom_i2c_sync_wait_bus+0x4c>
    6440:	683b      	ldr	r3, [r7, #0]
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	f003 0302 	and.w	r3, r3, #2
    6448:	2b00      	cmp	r3, #0
    644a:	d0e4      	beq.n	6416 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    644c:	2300      	movs	r3, #0
}
    644e:	4618      	mov	r0, r3
    6450:	3710      	adds	r7, #16
    6452:	46bd      	mov	sp, r7
    6454:	bd80      	pop	{r7, pc}
    6456:	bf00      	nop
    6458:	00005bd5 	.word	0x00005bd5

0000645c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    645c:	b590      	push	{r4, r7, lr}
    645e:	b087      	sub	sp, #28
    6460:	af00      	add	r7, sp, #0
    6462:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6464:	687b      	ldr	r3, [r7, #4]
    6466:	691b      	ldr	r3, [r3, #16]
    6468:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    646a:	687b      	ldr	r3, [r7, #4]
    646c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    646e:	6978      	ldr	r0, [r7, #20]
    6470:	4b39      	ldr	r3, [pc, #228]	; (6558 <_sercom_i2c_sync_send_address+0xfc>)
    6472:	4798      	blx	r3
    6474:	4603      	mov	r3, r0
    6476:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6478:	687b      	ldr	r3, [r7, #4]
    647a:	2b00      	cmp	r3, #0
    647c:	bf14      	ite	ne
    647e:	2301      	movne	r3, #1
    6480:	2300      	moveq	r3, #0
    6482:	b2db      	uxtb	r3, r3
    6484:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6488:	4934      	ldr	r1, [pc, #208]	; (655c <_sercom_i2c_sync_send_address+0x100>)
    648a:	4618      	mov	r0, r3
    648c:	4b34      	ldr	r3, [pc, #208]	; (6560 <_sercom_i2c_sync_send_address+0x104>)
    648e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6490:	693b      	ldr	r3, [r7, #16]
    6492:	685b      	ldr	r3, [r3, #4]
    6494:	2b01      	cmp	r3, #1
    6496:	d106      	bne.n	64a6 <_sercom_i2c_sync_send_address+0x4a>
    6498:	68fb      	ldr	r3, [r7, #12]
    649a:	2b00      	cmp	r3, #0
    649c:	d003      	beq.n	64a6 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    649e:	6978      	ldr	r0, [r7, #20]
    64a0:	4b30      	ldr	r3, [pc, #192]	; (6564 <_sercom_i2c_sync_send_address+0x108>)
    64a2:	4798      	blx	r3
    64a4:	e002      	b.n	64ac <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    64a6:	6978      	ldr	r0, [r7, #20]
    64a8:	4b2f      	ldr	r3, [pc, #188]	; (6568 <_sercom_i2c_sync_send_address+0x10c>)
    64aa:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    64ac:	693b      	ldr	r3, [r7, #16]
    64ae:	881b      	ldrh	r3, [r3, #0]
    64b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    64b4:	2b00      	cmp	r3, #0
    64b6:	d022      	beq.n	64fe <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    64b8:	693b      	ldr	r3, [r7, #16]
    64ba:	885b      	ldrh	r3, [r3, #2]
    64bc:	b29b      	uxth	r3, r3
    64be:	f003 0301 	and.w	r3, r3, #1
    64c2:	2b00      	cmp	r3, #0
    64c4:	d007      	beq.n	64d6 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    64c6:	693b      	ldr	r3, [r7, #16]
    64c8:	885b      	ldrh	r3, [r3, #2]
    64ca:	b29b      	uxth	r3, r3
    64cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    64d0:	b29a      	uxth	r2, r3
    64d2:	693b      	ldr	r3, [r7, #16]
    64d4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    64d6:	693b      	ldr	r3, [r7, #16]
    64d8:	881b      	ldrh	r3, [r3, #0]
    64da:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    64dc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    64e0:	401c      	ands	r4, r3
    64e2:	6978      	ldr	r0, [r7, #20]
    64e4:	4b21      	ldr	r3, [pc, #132]	; (656c <_sercom_i2c_sync_send_address+0x110>)
    64e6:	4798      	blx	r3
    64e8:	4603      	mov	r3, r0
    64ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    64ee:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    64f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    64f4:	4619      	mov	r1, r3
    64f6:	6978      	ldr	r0, [r7, #20]
    64f8:	4b1d      	ldr	r3, [pc, #116]	; (6570 <_sercom_i2c_sync_send_address+0x114>)
    64fa:	4798      	blx	r3
    64fc:	e01a      	b.n	6534 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    64fe:	693b      	ldr	r3, [r7, #16]
    6500:	881b      	ldrh	r3, [r3, #0]
    6502:	005b      	lsls	r3, r3, #1
    6504:	b2db      	uxtb	r3, r3
    6506:	693a      	ldr	r2, [r7, #16]
    6508:	8852      	ldrh	r2, [r2, #2]
    650a:	b292      	uxth	r2, r2
    650c:	f002 0201 	and.w	r2, r2, #1
    6510:	2a00      	cmp	r2, #0
    6512:	bf14      	ite	ne
    6514:	2201      	movne	r2, #1
    6516:	2200      	moveq	r2, #0
    6518:	b2d2      	uxtb	r2, r2
    651a:	4313      	orrs	r3, r2
    651c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    651e:	6978      	ldr	r0, [r7, #20]
    6520:	4b12      	ldr	r3, [pc, #72]	; (656c <_sercom_i2c_sync_send_address+0x110>)
    6522:	4798      	blx	r3
    6524:	4603      	mov	r3, r0
    6526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    652a:	4323      	orrs	r3, r4
    652c:	4619      	mov	r1, r3
    652e:	6978      	ldr	r0, [r7, #20]
    6530:	4b0f      	ldr	r3, [pc, #60]	; (6570 <_sercom_i2c_sync_send_address+0x114>)
    6532:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6534:	f107 0308 	add.w	r3, r7, #8
    6538:	4619      	mov	r1, r3
    653a:	6878      	ldr	r0, [r7, #4]
    653c:	4b0d      	ldr	r3, [pc, #52]	; (6574 <_sercom_i2c_sync_send_address+0x118>)
    653e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6540:	68bb      	ldr	r3, [r7, #8]
    6542:	693a      	ldr	r2, [r7, #16]
    6544:	4619      	mov	r1, r3
    6546:	6978      	ldr	r0, [r7, #20]
    6548:	4b0b      	ldr	r3, [pc, #44]	; (6578 <_sercom_i2c_sync_send_address+0x11c>)
    654a:	4798      	blx	r3
    654c:	4603      	mov	r3, r0
}
    654e:	4618      	mov	r0, r3
    6550:	371c      	adds	r7, #28
    6552:	46bd      	mov	sp, r7
    6554:	bd90      	pop	{r4, r7, pc}
    6556:	bf00      	nop
    6558:	00005c79 	.word	0x00005c79
    655c:	00010a7c 	.word	0x00010a7c
    6560:	000038e1 	.word	0x000038e1
    6564:	00005e29 	.word	0x00005e29
    6568:	00005e51 	.word	0x00005e51
    656c:	00005f91 	.word	0x00005f91
    6570:	00005f6d 	.word	0x00005f6d
    6574:	00006401 	.word	0x00006401
    6578:	00006189 	.word	0x00006189

0000657c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    657c:	b580      	push	{r7, lr}
    657e:	b086      	sub	sp, #24
    6580:	af00      	add	r7, sp, #0
    6582:	6078      	str	r0, [r7, #4]
    6584:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	691b      	ldr	r3, [r3, #16]
    658a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	2b00      	cmp	r3, #0
    6590:	bf14      	ite	ne
    6592:	2301      	movne	r3, #1
    6594:	2300      	moveq	r3, #0
    6596:	b2db      	uxtb	r3, r3
    6598:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    659c:	493b      	ldr	r1, [pc, #236]	; (668c <_i2c_m_sync_transfer+0x110>)
    659e:	4618      	mov	r0, r3
    65a0:	4b3b      	ldr	r3, [pc, #236]	; (6690 <_i2c_m_sync_transfer+0x114>)
    65a2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	691b      	ldr	r3, [r3, #16]
    65a8:	2b00      	cmp	r3, #0
    65aa:	bf14      	ite	ne
    65ac:	2301      	movne	r3, #1
    65ae:	2300      	moveq	r3, #0
    65b0:	b2db      	uxtb	r3, r3
    65b2:	f240 52d1 	movw	r2, #1489	; 0x5d1
    65b6:	4935      	ldr	r1, [pc, #212]	; (668c <_i2c_m_sync_transfer+0x110>)
    65b8:	4618      	mov	r0, r3
    65ba:	4b35      	ldr	r3, [pc, #212]	; (6690 <_i2c_m_sync_transfer+0x114>)
    65bc:	4798      	blx	r3
	ASSERT(msg);
    65be:	683b      	ldr	r3, [r7, #0]
    65c0:	2b00      	cmp	r3, #0
    65c2:	bf14      	ite	ne
    65c4:	2301      	movne	r3, #1
    65c6:	2300      	moveq	r3, #0
    65c8:	b2db      	uxtb	r3, r3
    65ca:	f240 52d2 	movw	r2, #1490	; 0x5d2
    65ce:	492f      	ldr	r1, [pc, #188]	; (668c <_i2c_m_sync_transfer+0x110>)
    65d0:	4618      	mov	r0, r3
    65d2:	4b2f      	ldr	r3, [pc, #188]	; (6690 <_i2c_m_sync_transfer+0x114>)
    65d4:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    65d6:	687b      	ldr	r3, [r7, #4]
    65d8:	885b      	ldrh	r3, [r3, #2]
    65da:	b29b      	uxth	r3, r3
    65dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    65e0:	2b00      	cmp	r3, #0
    65e2:	d002      	beq.n	65ea <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    65e4:	f06f 0305 	mvn.w	r3, #5
    65e8:	e04c      	b.n	6684 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    65ea:	683b      	ldr	r3, [r7, #0]
    65ec:	885b      	ldrh	r3, [r3, #2]
    65ee:	b29b      	uxth	r3, r3
    65f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    65f4:	b29a      	uxth	r2, r3
    65f6:	683b      	ldr	r3, [r7, #0]
    65f8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    65fa:	687b      	ldr	r3, [r7, #4]
    65fc:	683a      	ldr	r2, [r7, #0]
    65fe:	ca07      	ldmia	r2, {r0, r1, r2}
    6600:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6604:	6938      	ldr	r0, [r7, #16]
    6606:	4b23      	ldr	r3, [pc, #140]	; (6694 <_i2c_m_sync_transfer+0x118>)
    6608:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    660a:	6878      	ldr	r0, [r7, #4]
    660c:	4b22      	ldr	r3, [pc, #136]	; (6698 <_i2c_m_sync_transfer+0x11c>)
    660e:	4798      	blx	r3
    6610:	6178      	str	r0, [r7, #20]

	if (ret) {
    6612:	697b      	ldr	r3, [r7, #20]
    6614:	2b00      	cmp	r3, #0
    6616:	d02d      	beq.n	6674 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	885b      	ldrh	r3, [r3, #2]
    661c:	b29b      	uxth	r3, r3
    661e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6622:	b29a      	uxth	r2, r3
    6624:	687b      	ldr	r3, [r7, #4]
    6626:	805a      	strh	r2, [r3, #2]

		return ret;
    6628:	697b      	ldr	r3, [r7, #20]
    662a:	e02b      	b.n	6684 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    662c:	f107 030c 	add.w	r3, r7, #12
    6630:	4619      	mov	r1, r3
    6632:	6878      	ldr	r0, [r7, #4]
    6634:	4b19      	ldr	r3, [pc, #100]	; (669c <_i2c_m_sync_transfer+0x120>)
    6636:	4798      	blx	r3
    6638:	6178      	str	r0, [r7, #20]

		if (ret) {
    663a:	697b      	ldr	r3, [r7, #20]
    663c:	2b00      	cmp	r3, #0
    663e:	d012      	beq.n	6666 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6640:	683b      	ldr	r3, [r7, #0]
    6642:	885b      	ldrh	r3, [r3, #2]
    6644:	b29b      	uxth	r3, r3
    6646:	b21b      	sxth	r3, r3
    6648:	2b00      	cmp	r3, #0
    664a:	da02      	bge.n	6652 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    664c:	6938      	ldr	r0, [r7, #16]
    664e:	4b14      	ldr	r3, [pc, #80]	; (66a0 <_i2c_m_sync_transfer+0x124>)
    6650:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6652:	687b      	ldr	r3, [r7, #4]
    6654:	885b      	ldrh	r3, [r3, #2]
    6656:	b29b      	uxth	r3, r3
    6658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    665c:	b29a      	uxth	r2, r3
    665e:	687b      	ldr	r3, [r7, #4]
    6660:	805a      	strh	r2, [r3, #2]

			return ret;
    6662:	697b      	ldr	r3, [r7, #20]
    6664:	e00e      	b.n	6684 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6666:	68fb      	ldr	r3, [r7, #12]
    6668:	687a      	ldr	r2, [r7, #4]
    666a:	4619      	mov	r1, r3
    666c:	6938      	ldr	r0, [r7, #16]
    666e:	4b0d      	ldr	r3, [pc, #52]	; (66a4 <_i2c_m_sync_transfer+0x128>)
    6670:	4798      	blx	r3
    6672:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6674:	687b      	ldr	r3, [r7, #4]
    6676:	885b      	ldrh	r3, [r3, #2]
    6678:	b29b      	uxth	r3, r3
    667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    667e:	2b00      	cmp	r3, #0
    6680:	d1d4      	bne.n	662c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6682:	697b      	ldr	r3, [r7, #20]
}
    6684:	4618      	mov	r0, r3
    6686:	3718      	adds	r7, #24
    6688:	46bd      	mov	sp, r7
    668a:	bd80      	pop	{r7, pc}
    668c:	00010a7c 	.word	0x00010a7c
    6690:	000038e1 	.word	0x000038e1
    6694:	00005dd9 	.word	0x00005dd9
    6698:	0000645d 	.word	0x0000645d
    669c:	00006401 	.word	0x00006401
    66a0:	0000616d 	.word	0x0000616d
    66a4:	00006189 	.word	0x00006189

000066a8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    66a8:	b580      	push	{r7, lr}
    66aa:	b084      	sub	sp, #16
    66ac:	af00      	add	r7, sp, #0
    66ae:	6078      	str	r0, [r7, #4]
    66b0:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    66b2:	6838      	ldr	r0, [r7, #0]
    66b4:	4b42      	ldr	r3, [pc, #264]	; (67c0 <_i2c_m_sync_init_impl+0x118>)
    66b6:	4798      	blx	r3
    66b8:	4603      	mov	r3, r0
    66ba:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    66bc:	2101      	movs	r1, #1
    66be:	6838      	ldr	r0, [r7, #0]
    66c0:	4b40      	ldr	r3, [pc, #256]	; (67c4 <_i2c_m_sync_init_impl+0x11c>)
    66c2:	4798      	blx	r3
    66c4:	4603      	mov	r3, r0
    66c6:	f083 0301 	eor.w	r3, r3, #1
    66ca:	b2db      	uxtb	r3, r3
    66cc:	2b00      	cmp	r3, #0
    66ce:	d020      	beq.n	6712 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    66d0:	7bfa      	ldrb	r2, [r7, #15]
    66d2:	493d      	ldr	r1, [pc, #244]	; (67c8 <_i2c_m_sync_init_impl+0x120>)
    66d4:	4613      	mov	r3, r2
    66d6:	005b      	lsls	r3, r3, #1
    66d8:	4413      	add	r3, r2
    66da:	00db      	lsls	r3, r3, #3
    66dc:	440b      	add	r3, r1
    66de:	3304      	adds	r3, #4
    66e0:	681b      	ldr	r3, [r3, #0]
    66e2:	f003 031c 	and.w	r3, r3, #28
    66e6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    66e8:	2102      	movs	r1, #2
    66ea:	6838      	ldr	r0, [r7, #0]
    66ec:	4b37      	ldr	r3, [pc, #220]	; (67cc <_i2c_m_sync_init_impl+0x124>)
    66ee:	4798      	blx	r3
    66f0:	4603      	mov	r3, r0
    66f2:	2b00      	cmp	r3, #0
    66f4:	d006      	beq.n	6704 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    66f6:	6838      	ldr	r0, [r7, #0]
    66f8:	4b35      	ldr	r3, [pc, #212]	; (67d0 <_i2c_m_sync_init_impl+0x128>)
    66fa:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    66fc:	2102      	movs	r1, #2
    66fe:	6838      	ldr	r0, [r7, #0]
    6700:	4b34      	ldr	r3, [pc, #208]	; (67d4 <_i2c_m_sync_init_impl+0x12c>)
    6702:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6704:	68bb      	ldr	r3, [r7, #8]
    6706:	f043 0301 	orr.w	r3, r3, #1
    670a:	4619      	mov	r1, r3
    670c:	6838      	ldr	r0, [r7, #0]
    670e:	4b32      	ldr	r3, [pc, #200]	; (67d8 <_i2c_m_sync_init_impl+0x130>)
    6710:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6712:	2101      	movs	r1, #1
    6714:	6838      	ldr	r0, [r7, #0]
    6716:	4b2f      	ldr	r3, [pc, #188]	; (67d4 <_i2c_m_sync_init_impl+0x12c>)
    6718:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    671a:	7bfa      	ldrb	r2, [r7, #15]
    671c:	492a      	ldr	r1, [pc, #168]	; (67c8 <_i2c_m_sync_init_impl+0x120>)
    671e:	4613      	mov	r3, r2
    6720:	005b      	lsls	r3, r3, #1
    6722:	4413      	add	r3, r2
    6724:	00db      	lsls	r3, r3, #3
    6726:	440b      	add	r3, r1
    6728:	3304      	adds	r3, #4
    672a:	681b      	ldr	r3, [r3, #0]
    672c:	4619      	mov	r1, r3
    672e:	6838      	ldr	r0, [r7, #0]
    6730:	4b29      	ldr	r3, [pc, #164]	; (67d8 <_i2c_m_sync_init_impl+0x130>)
    6732:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6734:	7bfa      	ldrb	r2, [r7, #15]
    6736:	4924      	ldr	r1, [pc, #144]	; (67c8 <_i2c_m_sync_init_impl+0x120>)
    6738:	4613      	mov	r3, r2
    673a:	005b      	lsls	r3, r3, #1
    673c:	4413      	add	r3, r2
    673e:	00db      	lsls	r3, r3, #3
    6740:	440b      	add	r3, r1
    6742:	3308      	adds	r3, #8
    6744:	681b      	ldr	r3, [r3, #0]
    6746:	4619      	mov	r1, r3
    6748:	6838      	ldr	r0, [r7, #0]
    674a:	4b24      	ldr	r3, [pc, #144]	; (67dc <_i2c_m_sync_init_impl+0x134>)
    674c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    674e:	7bfa      	ldrb	r2, [r7, #15]
    6750:	491d      	ldr	r1, [pc, #116]	; (67c8 <_i2c_m_sync_init_impl+0x120>)
    6752:	4613      	mov	r3, r2
    6754:	005b      	lsls	r3, r3, #1
    6756:	4413      	add	r3, r2
    6758:	00db      	lsls	r3, r3, #3
    675a:	440b      	add	r3, r1
    675c:	330c      	adds	r3, #12
    675e:	681b      	ldr	r3, [r3, #0]
    6760:	4619      	mov	r1, r3
    6762:	6838      	ldr	r0, [r7, #0]
    6764:	4b1e      	ldr	r3, [pc, #120]	; (67e0 <_i2c_m_sync_init_impl+0x138>)
    6766:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6768:	7bfa      	ldrb	r2, [r7, #15]
    676a:	4917      	ldr	r1, [pc, #92]	; (67c8 <_i2c_m_sync_init_impl+0x120>)
    676c:	4613      	mov	r3, r2
    676e:	005b      	lsls	r3, r3, #1
    6770:	4413      	add	r3, r2
    6772:	00db      	lsls	r3, r3, #3
    6774:	440b      	add	r3, r1
    6776:	3304      	adds	r3, #4
    6778:	681b      	ldr	r3, [r3, #0]
    677a:	0e1b      	lsrs	r3, r3, #24
    677c:	b29b      	uxth	r3, r3
    677e:	f003 0303 	and.w	r3, r3, #3
    6782:	b29a      	uxth	r2, r3
    6784:	687b      	ldr	r3, [r7, #4]
    6786:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	899b      	ldrh	r3, [r3, #12]
    678c:	2b01      	cmp	r3, #1
    678e:	bf8c      	ite	hi
    6790:	2301      	movhi	r3, #1
    6792:	2300      	movls	r3, #0
    6794:	b2db      	uxtb	r3, r3
    6796:	4619      	mov	r1, r3
    6798:	6838      	ldr	r0, [r7, #0]
    679a:	4b12      	ldr	r3, [pc, #72]	; (67e4 <_i2c_m_sync_init_impl+0x13c>)
    679c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    679e:	7bfa      	ldrb	r2, [r7, #15]
    67a0:	4909      	ldr	r1, [pc, #36]	; (67c8 <_i2c_m_sync_init_impl+0x120>)
    67a2:	4613      	mov	r3, r2
    67a4:	005b      	lsls	r3, r3, #1
    67a6:	4413      	add	r3, r2
    67a8:	00db      	lsls	r3, r3, #3
    67aa:	440b      	add	r3, r1
    67ac:	3312      	adds	r3, #18
    67ae:	881a      	ldrh	r2, [r3, #0]
    67b0:	687b      	ldr	r3, [r7, #4]
    67b2:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    67b4:	2300      	movs	r3, #0
}
    67b6:	4618      	mov	r0, r3
    67b8:	3710      	adds	r7, #16
    67ba:	46bd      	mov	sp, r7
    67bc:	bd80      	pop	{r7, pc}
    67be:	bf00      	nop
    67c0:	00006105 	.word	0x00006105
    67c4:	00005b2d 	.word	0x00005b2d
    67c8:	20000018 	.word	0x20000018
    67cc:	00005ca9 	.word	0x00005ca9
    67d0:	00005c51 	.word	0x00005c51
    67d4:	00005b09 	.word	0x00005b09
    67d8:	00005cd9 	.word	0x00005cd9
    67dc:	00005ea9 	.word	0x00005ea9
    67e0:	00005ef1 	.word	0x00005ef1
    67e4:	00005f2d 	.word	0x00005f2d

000067e8 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    67e8:	b580      	push	{r7, lr}
    67ea:	b082      	sub	sp, #8
    67ec:	af00      	add	r7, sp, #0
    67ee:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    67f0:	2101      	movs	r1, #1
    67f2:	6878      	ldr	r0, [r7, #4]
    67f4:	4b07      	ldr	r3, [pc, #28]	; (6814 <_spi_sync_enable+0x2c>)
    67f6:	4798      	blx	r3
    67f8:	4603      	mov	r3, r0
    67fa:	2b00      	cmp	r3, #0
    67fc:	d002      	beq.n	6804 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    67fe:	f06f 0303 	mvn.w	r3, #3
    6802:	e003      	b.n	680c <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    6804:	6878      	ldr	r0, [r7, #4]
    6806:	4b04      	ldr	r3, [pc, #16]	; (6818 <_spi_sync_enable+0x30>)
    6808:	4798      	blx	r3

	return ERR_NONE;
    680a:	2300      	movs	r3, #0
}
    680c:	4618      	mov	r0, r3
    680e:	3708      	adds	r7, #8
    6810:	46bd      	mov	sp, r7
    6812:	bd80      	pop	{r7, pc}
    6814:	00005b79 	.word	0x00005b79
    6818:	00005cfd 	.word	0x00005cfd

0000681c <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    681c:	b580      	push	{r7, lr}
    681e:	b082      	sub	sp, #8
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6824:	2101      	movs	r1, #1
    6826:	6878      	ldr	r0, [r7, #4]
    6828:	4b07      	ldr	r3, [pc, #28]	; (6848 <_spi_sync_disable+0x2c>)
    682a:	4798      	blx	r3
    682c:	4603      	mov	r3, r0
    682e:	2b00      	cmp	r3, #0
    6830:	d002      	beq.n	6838 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    6832:	f06f 0303 	mvn.w	r3, #3
    6836:	e003      	b.n	6840 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6838:	6878      	ldr	r0, [r7, #4]
    683a:	4b04      	ldr	r3, [pc, #16]	; (684c <_spi_sync_disable+0x30>)
    683c:	4798      	blx	r3

	return ERR_NONE;
    683e:	2300      	movs	r3, #0
}
    6840:	4618      	mov	r0, r3
    6842:	3708      	adds	r7, #8
    6844:	46bd      	mov	sp, r7
    6846:	bd80      	pop	{r7, pc}
    6848:	00005b79 	.word	0x00005b79
    684c:	00005d5d 	.word	0x00005d5d

00006850 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6850:	b580      	push	{r7, lr}
    6852:	b082      	sub	sp, #8
    6854:	af00      	add	r7, sp, #0
    6856:	6078      	str	r0, [r7, #4]
    6858:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	2b00      	cmp	r3, #0
    685e:	d004      	beq.n	686a <_spi_load_regs_master+0x1a>
    6860:	683b      	ldr	r3, [r7, #0]
    6862:	2b00      	cmp	r3, #0
    6864:	d001      	beq.n	686a <_spi_load_regs_master+0x1a>
    6866:	2301      	movs	r3, #1
    6868:	e000      	b.n	686c <_spi_load_regs_master+0x1c>
    686a:	2300      	movs	r3, #0
    686c:	f003 0301 	and.w	r3, r3, #1
    6870:	b2db      	uxtb	r3, r3
    6872:	f640 1209 	movw	r2, #2313	; 0x909
    6876:	4915      	ldr	r1, [pc, #84]	; (68cc <_spi_load_regs_master+0x7c>)
    6878:	4618      	mov	r0, r3
    687a:	4b15      	ldr	r3, [pc, #84]	; (68d0 <_spi_load_regs_master+0x80>)
    687c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    687e:	683b      	ldr	r3, [r7, #0]
    6880:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6882:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6886:	f023 0301 	bic.w	r3, r3, #1
    688a:	4619      	mov	r1, r3
    688c:	6878      	ldr	r0, [r7, #4]
    688e:	4b11      	ldr	r3, [pc, #68]	; (68d4 <_spi_load_regs_master+0x84>)
    6890:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6892:	683b      	ldr	r3, [r7, #0]
    6894:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6896:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    689a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    689e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    68a2:	4619      	mov	r1, r3
    68a4:	6878      	ldr	r0, [r7, #4]
    68a6:	4b0c      	ldr	r3, [pc, #48]	; (68d8 <_spi_load_regs_master+0x88>)
    68a8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    68aa:	683b      	ldr	r3, [r7, #0]
    68ac:	7b1b      	ldrb	r3, [r3, #12]
    68ae:	4619      	mov	r1, r3
    68b0:	6878      	ldr	r0, [r7, #4]
    68b2:	4b0a      	ldr	r3, [pc, #40]	; (68dc <_spi_load_regs_master+0x8c>)
    68b4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    68b6:	683b      	ldr	r3, [r7, #0]
    68b8:	7b5b      	ldrb	r3, [r3, #13]
    68ba:	4619      	mov	r1, r3
    68bc:	6878      	ldr	r0, [r7, #4]
    68be:	4b08      	ldr	r3, [pc, #32]	; (68e0 <_spi_load_regs_master+0x90>)
    68c0:	4798      	blx	r3
}
    68c2:	bf00      	nop
    68c4:	3708      	adds	r7, #8
    68c6:	46bd      	mov	sp, r7
    68c8:	bd80      	pop	{r7, pc}
    68ca:	bf00      	nop
    68cc:	00010a7c 	.word	0x00010a7c
    68d0:	000038e1 	.word	0x000038e1
    68d4:	00005db5 	.word	0x00005db5
    68d8:	00005ecd 	.word	0x00005ecd
    68dc:	00005f0d 	.word	0x00005f0d
    68e0:	00006045 	.word	0x00006045

000068e4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    68e4:	b580      	push	{r7, lr}
    68e6:	b082      	sub	sp, #8
    68e8:	af00      	add	r7, sp, #0
    68ea:	6078      	str	r0, [r7, #4]
    68ec:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    68ee:	687b      	ldr	r3, [r7, #4]
    68f0:	2b00      	cmp	r3, #0
    68f2:	d004      	beq.n	68fe <_spi_load_regs_slave+0x1a>
    68f4:	683b      	ldr	r3, [r7, #0]
    68f6:	2b00      	cmp	r3, #0
    68f8:	d001      	beq.n	68fe <_spi_load_regs_slave+0x1a>
    68fa:	2301      	movs	r3, #1
    68fc:	e000      	b.n	6900 <_spi_load_regs_slave+0x1c>
    68fe:	2300      	movs	r3, #0
    6900:	f003 0301 	and.w	r3, r3, #1
    6904:	b2db      	uxtb	r3, r3
    6906:	f640 121d 	movw	r2, #2333	; 0x91d
    690a:	491a      	ldr	r1, [pc, #104]	; (6974 <_spi_load_regs_slave+0x90>)
    690c:	4618      	mov	r0, r3
    690e:	4b1a      	ldr	r3, [pc, #104]	; (6978 <_spi_load_regs_slave+0x94>)
    6910:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6912:	683b      	ldr	r3, [r7, #0]
    6914:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6916:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    691a:	f023 0301 	bic.w	r3, r3, #1
    691e:	4619      	mov	r1, r3
    6920:	6878      	ldr	r0, [r7, #4]
    6922:	4b16      	ldr	r3, [pc, #88]	; (697c <_spi_load_regs_slave+0x98>)
    6924:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6926:	683b      	ldr	r3, [r7, #0]
    6928:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    692a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    692e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6936:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    693a:	4619      	mov	r1, r3
    693c:	6878      	ldr	r0, [r7, #4]
    693e:	4b10      	ldr	r3, [pc, #64]	; (6980 <_spi_load_regs_slave+0x9c>)
    6940:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6942:	683b      	ldr	r3, [r7, #0]
    6944:	689b      	ldr	r3, [r3, #8]
    6946:	4619      	mov	r1, r3
    6948:	6878      	ldr	r0, [r7, #4]
    694a:	4b0e      	ldr	r3, [pc, #56]	; (6984 <_spi_load_regs_slave+0xa0>)
    694c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    694e:	683b      	ldr	r3, [r7, #0]
    6950:	7b5b      	ldrb	r3, [r3, #13]
    6952:	4619      	mov	r1, r3
    6954:	6878      	ldr	r0, [r7, #4]
    6956:	4b0c      	ldr	r3, [pc, #48]	; (6988 <_spi_load_regs_slave+0xa4>)
    6958:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    695a:	bf00      	nop
    695c:	f04f 31ff 	mov.w	r1, #4294967295
    6960:	6878      	ldr	r0, [r7, #4]
    6962:	4b0a      	ldr	r3, [pc, #40]	; (698c <_spi_load_regs_slave+0xa8>)
    6964:	4798      	blx	r3
    6966:	4603      	mov	r3, r0
    6968:	2b00      	cmp	r3, #0
    696a:	d1f7      	bne.n	695c <_spi_load_regs_slave+0x78>
		;
}
    696c:	bf00      	nop
    696e:	3708      	adds	r7, #8
    6970:	46bd      	mov	sp, r7
    6972:	bd80      	pop	{r7, pc}
    6974:	00010a7c 	.word	0x00010a7c
    6978:	000038e1 	.word	0x000038e1
    697c:	00005db5 	.word	0x00005db5
    6980:	00005ecd 	.word	0x00005ecd
    6984:	00005fb1 	.word	0x00005fb1
    6988:	00006045 	.word	0x00006045
    698c:	00005b79 	.word	0x00005b79

00006990 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6990:	b580      	push	{r7, lr}
    6992:	b084      	sub	sp, #16
    6994:	af00      	add	r7, sp, #0
    6996:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6998:	687b      	ldr	r3, [r7, #4]
    699a:	4618      	mov	r0, r3
    699c:	4b11      	ldr	r3, [pc, #68]	; (69e4 <_spi_get_regs+0x54>)
    699e:	4798      	blx	r3
    69a0:	4603      	mov	r3, r0
    69a2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    69a4:	2300      	movs	r3, #0
    69a6:	73fb      	strb	r3, [r7, #15]
    69a8:	e014      	b.n	69d4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    69aa:	7bfa      	ldrb	r2, [r7, #15]
    69ac:	490e      	ldr	r1, [pc, #56]	; (69e8 <_spi_get_regs+0x58>)
    69ae:	4613      	mov	r3, r2
    69b0:	011b      	lsls	r3, r3, #4
    69b2:	4413      	add	r3, r2
    69b4:	440b      	add	r3, r1
    69b6:	3310      	adds	r3, #16
    69b8:	781b      	ldrb	r3, [r3, #0]
    69ba:	7bba      	ldrb	r2, [r7, #14]
    69bc:	429a      	cmp	r2, r3
    69be:	d106      	bne.n	69ce <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    69c0:	7bfa      	ldrb	r2, [r7, #15]
    69c2:	4613      	mov	r3, r2
    69c4:	011b      	lsls	r3, r3, #4
    69c6:	4413      	add	r3, r2
    69c8:	4a07      	ldr	r2, [pc, #28]	; (69e8 <_spi_get_regs+0x58>)
    69ca:	4413      	add	r3, r2
    69cc:	e006      	b.n	69dc <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    69ce:	7bfb      	ldrb	r3, [r7, #15]
    69d0:	3301      	adds	r3, #1
    69d2:	73fb      	strb	r3, [r7, #15]
    69d4:	7bfb      	ldrb	r3, [r7, #15]
    69d6:	2b01      	cmp	r3, #1
    69d8:	d9e7      	bls.n	69aa <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    69da:	2300      	movs	r3, #0
}
    69dc:	4618      	mov	r0, r3
    69de:	3710      	adds	r7, #16
    69e0:	46bd      	mov	sp, r7
    69e2:	bd80      	pop	{r7, pc}
    69e4:	000060a9 	.word	0x000060a9
    69e8:	00010ab8 	.word	0x00010ab8

000069ec <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    69ec:	b580      	push	{r7, lr}
    69ee:	b084      	sub	sp, #16
    69f0:	af00      	add	r7, sp, #0
    69f2:	6078      	str	r0, [r7, #4]
    69f4:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    69f6:	683b      	ldr	r3, [r7, #0]
    69f8:	4618      	mov	r0, r3
    69fa:	4b35      	ldr	r3, [pc, #212]	; (6ad0 <_spi_m_sync_init+0xe4>)
    69fc:	4798      	blx	r3
    69fe:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6a00:	687b      	ldr	r3, [r7, #4]
    6a02:	2b00      	cmp	r3, #0
    6a04:	d004      	beq.n	6a10 <_spi_m_sync_init+0x24>
    6a06:	683b      	ldr	r3, [r7, #0]
    6a08:	2b00      	cmp	r3, #0
    6a0a:	d001      	beq.n	6a10 <_spi_m_sync_init+0x24>
    6a0c:	2301      	movs	r3, #1
    6a0e:	e000      	b.n	6a12 <_spi_m_sync_init+0x26>
    6a10:	2300      	movs	r3, #0
    6a12:	f003 0301 	and.w	r3, r3, #1
    6a16:	b2db      	uxtb	r3, r3
    6a18:	f640 123f 	movw	r2, #2367	; 0x93f
    6a1c:	492d      	ldr	r1, [pc, #180]	; (6ad4 <_spi_m_sync_init+0xe8>)
    6a1e:	4618      	mov	r0, r3
    6a20:	4b2d      	ldr	r3, [pc, #180]	; (6ad8 <_spi_m_sync_init+0xec>)
    6a22:	4798      	blx	r3

	if (regs == NULL) {
    6a24:	68fb      	ldr	r3, [r7, #12]
    6a26:	2b00      	cmp	r3, #0
    6a28:	d102      	bne.n	6a30 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6a2a:	f06f 030c 	mvn.w	r3, #12
    6a2e:	e04a      	b.n	6ac6 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6a30:	2101      	movs	r1, #1
    6a32:	6838      	ldr	r0, [r7, #0]
    6a34:	4b29      	ldr	r3, [pc, #164]	; (6adc <_spi_m_sync_init+0xf0>)
    6a36:	4798      	blx	r3
    6a38:	4603      	mov	r3, r0
    6a3a:	f083 0301 	eor.w	r3, r3, #1
    6a3e:	b2db      	uxtb	r3, r3
    6a40:	2b00      	cmp	r3, #0
    6a42:	d019      	beq.n	6a78 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6a44:	68fb      	ldr	r3, [r7, #12]
    6a46:	681b      	ldr	r3, [r3, #0]
    6a48:	f003 031c 	and.w	r3, r3, #28
    6a4c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6a4e:	2102      	movs	r1, #2
    6a50:	6838      	ldr	r0, [r7, #0]
    6a52:	4b23      	ldr	r3, [pc, #140]	; (6ae0 <_spi_m_sync_init+0xf4>)
    6a54:	4798      	blx	r3
    6a56:	4603      	mov	r3, r0
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d006      	beq.n	6a6a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6a5c:	6838      	ldr	r0, [r7, #0]
    6a5e:	4b21      	ldr	r3, [pc, #132]	; (6ae4 <_spi_m_sync_init+0xf8>)
    6a60:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6a62:	2102      	movs	r1, #2
    6a64:	6838      	ldr	r0, [r7, #0]
    6a66:	4b20      	ldr	r3, [pc, #128]	; (6ae8 <_spi_m_sync_init+0xfc>)
    6a68:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6a6a:	68bb      	ldr	r3, [r7, #8]
    6a6c:	f043 0301 	orr.w	r3, r3, #1
    6a70:	4619      	mov	r1, r3
    6a72:	6838      	ldr	r0, [r7, #0]
    6a74:	4b1d      	ldr	r3, [pc, #116]	; (6aec <_spi_m_sync_init+0x100>)
    6a76:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6a78:	2101      	movs	r1, #1
    6a7a:	6838      	ldr	r0, [r7, #0]
    6a7c:	4b1a      	ldr	r3, [pc, #104]	; (6ae8 <_spi_m_sync_init+0xfc>)
    6a7e:	4798      	blx	r3

	dev->prvt = hw;
    6a80:	687b      	ldr	r3, [r7, #4]
    6a82:	683a      	ldr	r2, [r7, #0]
    6a84:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6a86:	68fb      	ldr	r3, [r7, #12]
    6a88:	681b      	ldr	r3, [r3, #0]
    6a8a:	f003 031c 	and.w	r3, r3, #28
    6a8e:	2b08      	cmp	r3, #8
    6a90:	d104      	bne.n	6a9c <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6a92:	68f9      	ldr	r1, [r7, #12]
    6a94:	6838      	ldr	r0, [r7, #0]
    6a96:	4b16      	ldr	r3, [pc, #88]	; (6af0 <_spi_m_sync_init+0x104>)
    6a98:	4798      	blx	r3
    6a9a:	e003      	b.n	6aa4 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6a9c:	68f9      	ldr	r1, [r7, #12]
    6a9e:	6838      	ldr	r0, [r7, #0]
    6aa0:	4b14      	ldr	r3, [pc, #80]	; (6af4 <_spi_m_sync_init+0x108>)
    6aa2:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6aa4:	68fb      	ldr	r3, [r7, #12]
    6aa6:	685b      	ldr	r3, [r3, #4]
    6aa8:	f003 0307 	and.w	r3, r3, #7
    6aac:	2b00      	cmp	r3, #0
    6aae:	d101      	bne.n	6ab4 <_spi_m_sync_init+0xc8>
    6ab0:	2201      	movs	r2, #1
    6ab2:	e000      	b.n	6ab6 <_spi_m_sync_init+0xca>
    6ab4:	2202      	movs	r2, #2
    6ab6:	687b      	ldr	r3, [r7, #4]
    6ab8:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6aba:	68fb      	ldr	r3, [r7, #12]
    6abc:	89db      	ldrh	r3, [r3, #14]
    6abe:	b29a      	uxth	r2, r3
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6ac4:	2300      	movs	r3, #0
}
    6ac6:	4618      	mov	r0, r3
    6ac8:	3710      	adds	r7, #16
    6aca:	46bd      	mov	sp, r7
    6acc:	bd80      	pop	{r7, pc}
    6ace:	bf00      	nop
    6ad0:	00006991 	.word	0x00006991
    6ad4:	00010a7c 	.word	0x00010a7c
    6ad8:	000038e1 	.word	0x000038e1
    6adc:	00005b79 	.word	0x00005b79
    6ae0:	00005d85 	.word	0x00005d85
    6ae4:	00005d5d 	.word	0x00005d5d
    6ae8:	00005b55 	.word	0x00005b55
    6aec:	00005db5 	.word	0x00005db5
    6af0:	000068e5 	.word	0x000068e5
    6af4:	00006851 	.word	0x00006851

00006af8 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    6af8:	b580      	push	{r7, lr}
    6afa:	b082      	sub	sp, #8
    6afc:	af00      	add	r7, sp, #0
    6afe:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d005      	beq.n	6b12 <_spi_m_sync_enable+0x1a>
    6b06:	687b      	ldr	r3, [r7, #4]
    6b08:	681b      	ldr	r3, [r3, #0]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d001      	beq.n	6b12 <_spi_m_sync_enable+0x1a>
    6b0e:	2301      	movs	r3, #1
    6b10:	e000      	b.n	6b14 <_spi_m_sync_enable+0x1c>
    6b12:	2300      	movs	r3, #0
    6b14:	f003 0301 	and.w	r3, r3, #1
    6b18:	b2db      	uxtb	r3, r3
    6b1a:	f640 129e 	movw	r2, #2462	; 0x99e
    6b1e:	4907      	ldr	r1, [pc, #28]	; (6b3c <_spi_m_sync_enable+0x44>)
    6b20:	4618      	mov	r0, r3
    6b22:	4b07      	ldr	r3, [pc, #28]	; (6b40 <_spi_m_sync_enable+0x48>)
    6b24:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	681b      	ldr	r3, [r3, #0]
    6b2a:	4618      	mov	r0, r3
    6b2c:	4b05      	ldr	r3, [pc, #20]	; (6b44 <_spi_m_sync_enable+0x4c>)
    6b2e:	4798      	blx	r3
    6b30:	4603      	mov	r3, r0
}
    6b32:	4618      	mov	r0, r3
    6b34:	3708      	adds	r7, #8
    6b36:	46bd      	mov	sp, r7
    6b38:	bd80      	pop	{r7, pc}
    6b3a:	bf00      	nop
    6b3c:	00010a7c 	.word	0x00010a7c
    6b40:	000038e1 	.word	0x000038e1
    6b44:	000067e9 	.word	0x000067e9

00006b48 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    6b48:	b580      	push	{r7, lr}
    6b4a:	b082      	sub	sp, #8
    6b4c:	af00      	add	r7, sp, #0
    6b4e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6b50:	687b      	ldr	r3, [r7, #4]
    6b52:	2b00      	cmp	r3, #0
    6b54:	d005      	beq.n	6b62 <_spi_m_sync_disable+0x1a>
    6b56:	687b      	ldr	r3, [r7, #4]
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d001      	beq.n	6b62 <_spi_m_sync_disable+0x1a>
    6b5e:	2301      	movs	r3, #1
    6b60:	e000      	b.n	6b64 <_spi_m_sync_disable+0x1c>
    6b62:	2300      	movs	r3, #0
    6b64:	f003 0301 	and.w	r3, r3, #1
    6b68:	b2db      	uxtb	r3, r3
    6b6a:	f640 12ba 	movw	r2, #2490	; 0x9ba
    6b6e:	4907      	ldr	r1, [pc, #28]	; (6b8c <_spi_m_sync_disable+0x44>)
    6b70:	4618      	mov	r0, r3
    6b72:	4b07      	ldr	r3, [pc, #28]	; (6b90 <_spi_m_sync_disable+0x48>)
    6b74:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	681b      	ldr	r3, [r3, #0]
    6b7a:	4618      	mov	r0, r3
    6b7c:	4b05      	ldr	r3, [pc, #20]	; (6b94 <_spi_m_sync_disable+0x4c>)
    6b7e:	4798      	blx	r3
    6b80:	4603      	mov	r3, r0
}
    6b82:	4618      	mov	r0, r3
    6b84:	3708      	adds	r7, #8
    6b86:	46bd      	mov	sp, r7
    6b88:	bd80      	pop	{r7, pc}
    6b8a:	bf00      	nop
    6b8c:	00010a7c 	.word	0x00010a7c
    6b90:	000038e1 	.word	0x000038e1
    6b94:	0000681d 	.word	0x0000681d

00006b98 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6b98:	b580      	push	{r7, lr}
    6b9a:	b082      	sub	sp, #8
    6b9c:	af00      	add	r7, sp, #0
    6b9e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6ba0:	bf00      	nop
    6ba2:	2103      	movs	r1, #3
    6ba4:	6878      	ldr	r0, [r7, #4]
    6ba6:	4b06      	ldr	r3, [pc, #24]	; (6bc0 <_spi_wait_bus_idle+0x28>)
    6ba8:	4798      	blx	r3
    6baa:	4603      	mov	r3, r0
    6bac:	2b00      	cmp	r3, #0
    6bae:	d0f8      	beq.n	6ba2 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6bb0:	2103      	movs	r1, #3
    6bb2:	6878      	ldr	r0, [r7, #4]
    6bb4:	4b03      	ldr	r3, [pc, #12]	; (6bc4 <_spi_wait_bus_idle+0x2c>)
    6bb6:	4798      	blx	r3
}
    6bb8:	bf00      	nop
    6bba:	3708      	adds	r7, #8
    6bbc:	46bd      	mov	sp, r7
    6bbe:	bd80      	pop	{r7, pc}
    6bc0:	00005bef 	.word	0x00005bef
    6bc4:	00005c31 	.word	0x00005c31

00006bc8 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6bc8:	b580      	push	{r7, lr}
    6bca:	b086      	sub	sp, #24
    6bcc:	af00      	add	r7, sp, #0
    6bce:	60f8      	str	r0, [r7, #12]
    6bd0:	60b9      	str	r1, [r7, #8]
    6bd2:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6bd4:	68bb      	ldr	r3, [r7, #8]
    6bd6:	f003 0304 	and.w	r3, r3, #4
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d101      	bne.n	6be2 <_spi_rx_check_and_receive+0x1a>
		return false;
    6bde:	2300      	movs	r3, #0
    6be0:	e022      	b.n	6c28 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6be2:	68f8      	ldr	r0, [r7, #12]
    6be4:	4b12      	ldr	r3, [pc, #72]	; (6c30 <_spi_rx_check_and_receive+0x68>)
    6be6:	4798      	blx	r3
    6be8:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6bea:	687b      	ldr	r3, [r7, #4]
    6bec:	685b      	ldr	r3, [r3, #4]
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d014      	beq.n	6c1c <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	685b      	ldr	r3, [r3, #4]
    6bf6:	1c59      	adds	r1, r3, #1
    6bf8:	687a      	ldr	r2, [r7, #4]
    6bfa:	6051      	str	r1, [r2, #4]
    6bfc:	697a      	ldr	r2, [r7, #20]
    6bfe:	b2d2      	uxtb	r2, r2
    6c00:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6c02:	687b      	ldr	r3, [r7, #4]
    6c04:	7c1b      	ldrb	r3, [r3, #16]
    6c06:	2b01      	cmp	r3, #1
    6c08:	d908      	bls.n	6c1c <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	685b      	ldr	r3, [r3, #4]
    6c0e:	1c59      	adds	r1, r3, #1
    6c10:	687a      	ldr	r2, [r7, #4]
    6c12:	6051      	str	r1, [r2, #4]
    6c14:	697a      	ldr	r2, [r7, #20]
    6c16:	0a12      	lsrs	r2, r2, #8
    6c18:	b2d2      	uxtb	r2, r2
    6c1a:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	68db      	ldr	r3, [r3, #12]
    6c20:	1c5a      	adds	r2, r3, #1
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	60da      	str	r2, [r3, #12]

	return true;
    6c26:	2301      	movs	r3, #1
}
    6c28:	4618      	mov	r0, r3
    6c2a:	3718      	adds	r7, #24
    6c2c:	46bd      	mov	sp, r7
    6c2e:	bd80      	pop	{r7, pc}
    6c30:	0000602d 	.word	0x0000602d

00006c34 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6c34:	b580      	push	{r7, lr}
    6c36:	b086      	sub	sp, #24
    6c38:	af00      	add	r7, sp, #0
    6c3a:	60f8      	str	r0, [r7, #12]
    6c3c:	60b9      	str	r1, [r7, #8]
    6c3e:	607a      	str	r2, [r7, #4]
    6c40:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6c42:	68bb      	ldr	r3, [r7, #8]
    6c44:	f003 0301 	and.w	r3, r3, #1
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d028      	beq.n	6c9e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	681b      	ldr	r3, [r3, #0]
    6c50:	2b00      	cmp	r3, #0
    6c52:	d018      	beq.n	6c86 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6c54:	687b      	ldr	r3, [r7, #4]
    6c56:	681b      	ldr	r3, [r3, #0]
    6c58:	1c59      	adds	r1, r3, #1
    6c5a:	687a      	ldr	r2, [r7, #4]
    6c5c:	6011      	str	r1, [r2, #0]
    6c5e:	781b      	ldrb	r3, [r3, #0]
    6c60:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6c62:	687b      	ldr	r3, [r7, #4]
    6c64:	7c1b      	ldrb	r3, [r3, #16]
    6c66:	2b01      	cmp	r3, #1
    6c68:	d90f      	bls.n	6c8a <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	781b      	ldrb	r3, [r3, #0]
    6c70:	021b      	lsls	r3, r3, #8
    6c72:	461a      	mov	r2, r3
    6c74:	697b      	ldr	r3, [r7, #20]
    6c76:	4313      	orrs	r3, r2
    6c78:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	681b      	ldr	r3, [r3, #0]
    6c7e:	1c5a      	adds	r2, r3, #1
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	601a      	str	r2, [r3, #0]
    6c84:	e001      	b.n	6c8a <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6c86:	887b      	ldrh	r3, [r7, #2]
    6c88:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6c8a:	687b      	ldr	r3, [r7, #4]
    6c8c:	689b      	ldr	r3, [r3, #8]
    6c8e:	1c5a      	adds	r2, r3, #1
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6c94:	6979      	ldr	r1, [r7, #20]
    6c96:	68f8      	ldr	r0, [r7, #12]
    6c98:	4b03      	ldr	r3, [pc, #12]	; (6ca8 <_spi_tx_check_and_send+0x74>)
    6c9a:	4798      	blx	r3
    6c9c:	e000      	b.n	6ca0 <_spi_tx_check_and_send+0x6c>
		return;
    6c9e:	bf00      	nop
}
    6ca0:	3718      	adds	r7, #24
    6ca2:	46bd      	mov	sp, r7
    6ca4:	bd80      	pop	{r7, pc}
    6ca6:	bf00      	nop
    6ca8:	00006011 	.word	0x00006011

00006cac <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6cac:	b580      	push	{r7, lr}
    6cae:	b082      	sub	sp, #8
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	6078      	str	r0, [r7, #4]
    6cb4:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6cb6:	687b      	ldr	r3, [r7, #4]
    6cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6cbc:	2b00      	cmp	r3, #0
    6cbe:	d00b      	beq.n	6cd8 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6cc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6cc4:	6838      	ldr	r0, [r7, #0]
    6cc6:	4b07      	ldr	r3, [pc, #28]	; (6ce4 <_spi_err_check+0x38>)
    6cc8:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6cca:	2180      	movs	r1, #128	; 0x80
    6ccc:	6838      	ldr	r0, [r7, #0]
    6cce:	4b06      	ldr	r3, [pc, #24]	; (6ce8 <_spi_err_check+0x3c>)
    6cd0:	4798      	blx	r3
		return ERR_OVERFLOW;
    6cd2:	f06f 0312 	mvn.w	r3, #18
    6cd6:	e000      	b.n	6cda <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6cd8:	2300      	movs	r3, #0
}
    6cda:	4618      	mov	r0, r3
    6cdc:	3708      	adds	r7, #8
    6cde:	46bd      	mov	sp, r7
    6ce0:	bd80      	pop	{r7, pc}
    6ce2:	bf00      	nop
    6ce4:	00006065 	.word	0x00006065
    6ce8:	00005c31 	.word	0x00005c31

00006cec <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6cec:	b590      	push	{r4, r7, lr}
    6cee:	b08b      	sub	sp, #44	; 0x2c
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	6078      	str	r0, [r7, #4]
    6cf4:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6cf6:	687b      	ldr	r3, [r7, #4]
    6cf8:	681b      	ldr	r3, [r3, #0]
    6cfa:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6cfc:	2300      	movs	r3, #0
    6cfe:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6d00:	683b      	ldr	r3, [r7, #0]
    6d02:	681b      	ldr	r3, [r3, #0]
    6d04:	60bb      	str	r3, [r7, #8]
    6d06:	683b      	ldr	r3, [r7, #0]
    6d08:	685b      	ldr	r3, [r3, #4]
    6d0a:	60fb      	str	r3, [r7, #12]
    6d0c:	2300      	movs	r3, #0
    6d0e:	613b      	str	r3, [r7, #16]
    6d10:	2300      	movs	r3, #0
    6d12:	617b      	str	r3, [r7, #20]
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	791b      	ldrb	r3, [r3, #4]
    6d18:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6d1a:	687b      	ldr	r3, [r7, #4]
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d004      	beq.n	6d2a <_spi_m_sync_trans+0x3e>
    6d20:	6a3b      	ldr	r3, [r7, #32]
    6d22:	2b00      	cmp	r3, #0
    6d24:	d001      	beq.n	6d2a <_spi_m_sync_trans+0x3e>
    6d26:	2301      	movs	r3, #1
    6d28:	e000      	b.n	6d2c <_spi_m_sync_trans+0x40>
    6d2a:	2300      	movs	r3, #0
    6d2c:	f003 0301 	and.w	r3, r3, #1
    6d30:	b2db      	uxtb	r3, r3
    6d32:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6d36:	492b      	ldr	r1, [pc, #172]	; (6de4 <_spi_m_sync_trans+0xf8>)
    6d38:	4618      	mov	r0, r3
    6d3a:	4b2b      	ldr	r3, [pc, #172]	; (6de8 <_spi_m_sync_trans+0xfc>)
    6d3c:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6d3e:	2107      	movs	r1, #7
    6d40:	6a38      	ldr	r0, [r7, #32]
    6d42:	4b2a      	ldr	r3, [pc, #168]	; (6dec <_spi_m_sync_trans+0x100>)
    6d44:	4798      	blx	r3
    6d46:	4603      	mov	r3, r0
    6d48:	2b00      	cmp	r3, #0
    6d4a:	d002      	beq.n	6d52 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6d4c:	f06f 0303 	mvn.w	r3, #3
    6d50:	e043      	b.n	6dda <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6d52:	6a38      	ldr	r0, [r7, #32]
    6d54:	4b26      	ldr	r3, [pc, #152]	; (6df0 <_spi_m_sync_trans+0x104>)
    6d56:	4798      	blx	r3
    6d58:	4603      	mov	r3, r0
    6d5a:	f083 0301 	eor.w	r3, r3, #1
    6d5e:	b2db      	uxtb	r3, r3
    6d60:	2b00      	cmp	r3, #0
    6d62:	d002      	beq.n	6d6a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6d64:	f06f 0313 	mvn.w	r3, #19
    6d68:	e037      	b.n	6dda <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6d6a:	6a38      	ldr	r0, [r7, #32]
    6d6c:	4b21      	ldr	r3, [pc, #132]	; (6df4 <_spi_m_sync_trans+0x108>)
    6d6e:	4798      	blx	r3
    6d70:	4603      	mov	r3, r0
    6d72:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6d74:	f107 0308 	add.w	r3, r7, #8
    6d78:	461a      	mov	r2, r3
    6d7a:	69f9      	ldr	r1, [r7, #28]
    6d7c:	6a38      	ldr	r0, [r7, #32]
    6d7e:	4b1e      	ldr	r3, [pc, #120]	; (6df8 <_spi_m_sync_trans+0x10c>)
    6d80:	4798      	blx	r3
    6d82:	4603      	mov	r3, r0
    6d84:	f083 0301 	eor.w	r3, r3, #1
    6d88:	b2db      	uxtb	r3, r3
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d00b      	beq.n	6da6 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6d8e:	697a      	ldr	r2, [r7, #20]
    6d90:	693b      	ldr	r3, [r7, #16]
    6d92:	429a      	cmp	r2, r3
    6d94:	d307      	bcc.n	6da6 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	88db      	ldrh	r3, [r3, #6]
    6d9a:	f107 0208 	add.w	r2, r7, #8
    6d9e:	69f9      	ldr	r1, [r7, #28]
    6da0:	6a38      	ldr	r0, [r7, #32]
    6da2:	4c16      	ldr	r4, [pc, #88]	; (6dfc <_spi_m_sync_trans+0x110>)
    6da4:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6da6:	6a39      	ldr	r1, [r7, #32]
    6da8:	69f8      	ldr	r0, [r7, #28]
    6daa:	4b15      	ldr	r3, [pc, #84]	; (6e00 <_spi_m_sync_trans+0x114>)
    6dac:	4798      	blx	r3
    6dae:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6db2:	2b00      	cmp	r3, #0
    6db4:	db0c      	blt.n	6dd0 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6db6:	693a      	ldr	r2, [r7, #16]
    6db8:	683b      	ldr	r3, [r7, #0]
    6dba:	689b      	ldr	r3, [r3, #8]
    6dbc:	429a      	cmp	r2, r3
    6dbe:	d3d4      	bcc.n	6d6a <_spi_m_sync_trans+0x7e>
    6dc0:	697a      	ldr	r2, [r7, #20]
    6dc2:	683b      	ldr	r3, [r7, #0]
    6dc4:	689b      	ldr	r3, [r3, #8]
    6dc6:	429a      	cmp	r2, r3
    6dc8:	d3cf      	bcc.n	6d6a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6dca:	693b      	ldr	r3, [r7, #16]
    6dcc:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6dce:	e000      	b.n	6dd2 <_spi_m_sync_trans+0xe6>
			break;
    6dd0:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6dd2:	6a38      	ldr	r0, [r7, #32]
    6dd4:	4b0b      	ldr	r3, [pc, #44]	; (6e04 <_spi_m_sync_trans+0x118>)
    6dd6:	4798      	blx	r3

	return rc;
    6dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6dda:	4618      	mov	r0, r3
    6ddc:	372c      	adds	r7, #44	; 0x2c
    6dde:	46bd      	mov	sp, r7
    6de0:	bd90      	pop	{r4, r7, pc}
    6de2:	bf00      	nop
    6de4:	00010a7c 	.word	0x00010a7c
    6de8:	000038e1 	.word	0x000038e1
    6dec:	00005b79 	.word	0x00005b79
    6df0:	00005d25 	.word	0x00005d25
    6df4:	00005c17 	.word	0x00005c17
    6df8:	00006bc9 	.word	0x00006bc9
    6dfc:	00006c35 	.word	0x00006c35
    6e00:	00006cad 	.word	0x00006cad
    6e04:	00006b99 	.word	0x00006b99

00006e08 <__NVIC_EnableIRQ>:
{
    6e08:	b480      	push	{r7}
    6e0a:	b083      	sub	sp, #12
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	4603      	mov	r3, r0
    6e10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e16:	2b00      	cmp	r3, #0
    6e18:	db0b      	blt.n	6e32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e1a:	4909      	ldr	r1, [pc, #36]	; (6e40 <__NVIC_EnableIRQ+0x38>)
    6e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e20:	095b      	lsrs	r3, r3, #5
    6e22:	88fa      	ldrh	r2, [r7, #6]
    6e24:	f002 021f 	and.w	r2, r2, #31
    6e28:	2001      	movs	r0, #1
    6e2a:	fa00 f202 	lsl.w	r2, r0, r2
    6e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e32:	bf00      	nop
    6e34:	370c      	adds	r7, #12
    6e36:	46bd      	mov	sp, r7
    6e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e3c:	4770      	bx	lr
    6e3e:	bf00      	nop
    6e40:	e000e100 	.word	0xe000e100

00006e44 <__NVIC_DisableIRQ>:
{
    6e44:	b480      	push	{r7}
    6e46:	b083      	sub	sp, #12
    6e48:	af00      	add	r7, sp, #0
    6e4a:	4603      	mov	r3, r0
    6e4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e52:	2b00      	cmp	r3, #0
    6e54:	db10      	blt.n	6e78 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e56:	490b      	ldr	r1, [pc, #44]	; (6e84 <__NVIC_DisableIRQ+0x40>)
    6e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e5c:	095b      	lsrs	r3, r3, #5
    6e5e:	88fa      	ldrh	r2, [r7, #6]
    6e60:	f002 021f 	and.w	r2, r2, #31
    6e64:	2001      	movs	r0, #1
    6e66:	fa00 f202 	lsl.w	r2, r0, r2
    6e6a:	3320      	adds	r3, #32
    6e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6e70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e74:	f3bf 8f6f 	isb	sy
}
    6e78:	bf00      	nop
    6e7a:	370c      	adds	r7, #12
    6e7c:	46bd      	mov	sp, r7
    6e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e82:	4770      	bx	lr
    6e84:	e000e100 	.word	0xe000e100

00006e88 <__NVIC_ClearPendingIRQ>:
{
    6e88:	b480      	push	{r7}
    6e8a:	b083      	sub	sp, #12
    6e8c:	af00      	add	r7, sp, #0
    6e8e:	4603      	mov	r3, r0
    6e90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e96:	2b00      	cmp	r3, #0
    6e98:	db0c      	blt.n	6eb4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e9a:	4909      	ldr	r1, [pc, #36]	; (6ec0 <__NVIC_ClearPendingIRQ+0x38>)
    6e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6ea0:	095b      	lsrs	r3, r3, #5
    6ea2:	88fa      	ldrh	r2, [r7, #6]
    6ea4:	f002 021f 	and.w	r2, r2, #31
    6ea8:	2001      	movs	r0, #1
    6eaa:	fa00 f202 	lsl.w	r2, r0, r2
    6eae:	3360      	adds	r3, #96	; 0x60
    6eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6eb4:	bf00      	nop
    6eb6:	370c      	adds	r7, #12
    6eb8:	46bd      	mov	sp, r7
    6eba:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ebe:	4770      	bx	lr
    6ec0:	e000e100 	.word	0xe000e100

00006ec4 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6ec4:	b480      	push	{r7}
    6ec6:	b083      	sub	sp, #12
    6ec8:	af00      	add	r7, sp, #0
    6eca:	6078      	str	r0, [r7, #4]
    6ecc:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    6ece:	bf00      	nop
    6ed0:	687b      	ldr	r3, [r7, #4]
    6ed2:	689a      	ldr	r2, [r3, #8]
    6ed4:	683b      	ldr	r3, [r7, #0]
    6ed6:	4013      	ands	r3, r2
    6ed8:	2b00      	cmp	r3, #0
    6eda:	d1f9      	bne.n	6ed0 <hri_tcc_wait_for_sync+0xc>
	};
}
    6edc:	bf00      	nop
    6ede:	370c      	adds	r7, #12
    6ee0:	46bd      	mov	sp, r7
    6ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ee6:	4770      	bx	lr

00006ee8 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6ee8:	b480      	push	{r7}
    6eea:	b083      	sub	sp, #12
    6eec:	af00      	add	r7, sp, #0
    6eee:	6078      	str	r0, [r7, #4]
    6ef0:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	689a      	ldr	r2, [r3, #8]
    6ef6:	683b      	ldr	r3, [r7, #0]
    6ef8:	4013      	ands	r3, r2
    6efa:	2b00      	cmp	r3, #0
    6efc:	bf14      	ite	ne
    6efe:	2301      	movne	r3, #1
    6f00:	2300      	moveq	r3, #0
    6f02:	b2db      	uxtb	r3, r3
}
    6f04:	4618      	mov	r0, r3
    6f06:	370c      	adds	r7, #12
    6f08:	46bd      	mov	sp, r7
    6f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f0e:	4770      	bx	lr

00006f10 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6f10:	b480      	push	{r7}
    6f12:	b083      	sub	sp, #12
    6f14:	af00      	add	r7, sp, #0
    6f16:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    6f18:	687b      	ldr	r3, [r7, #4]
    6f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6f1c:	f003 0301 	and.w	r3, r3, #1
    6f20:	2b00      	cmp	r3, #0
    6f22:	bf14      	ite	ne
    6f24:	2301      	movne	r3, #1
    6f26:	2300      	moveq	r3, #0
    6f28:	b2db      	uxtb	r3, r3
}
    6f2a:	4618      	mov	r0, r3
    6f2c:	370c      	adds	r7, #12
    6f2e:	46bd      	mov	sp, r7
    6f30:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f34:	4770      	bx	lr

00006f36 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6f36:	b480      	push	{r7}
    6f38:	b083      	sub	sp, #12
    6f3a:	af00      	add	r7, sp, #0
    6f3c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	2201      	movs	r2, #1
    6f42:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6f44:	bf00      	nop
    6f46:	370c      	adds	r7, #12
    6f48:	46bd      	mov	sp, r7
    6f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f4e:	4770      	bx	lr

00006f50 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6f50:	b480      	push	{r7}
    6f52:	b083      	sub	sp, #12
    6f54:	af00      	add	r7, sp, #0
    6f56:	6078      	str	r0, [r7, #4]
    6f58:	460b      	mov	r3, r1
    6f5a:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	78fa      	ldrb	r2, [r7, #3]
    6f60:	715a      	strb	r2, [r3, #5]
}
    6f62:	bf00      	nop
    6f64:	370c      	adds	r7, #12
    6f66:	46bd      	mov	sp, r7
    6f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f6c:	4770      	bx	lr

00006f6e <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6f6e:	b480      	push	{r7}
    6f70:	b083      	sub	sp, #12
    6f72:	af00      	add	r7, sp, #0
    6f74:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    6f76:	687b      	ldr	r3, [r7, #4]
    6f78:	2201      	movs	r2, #1
    6f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
    6f7c:	bf00      	nop
    6f7e:	370c      	adds	r7, #12
    6f80:	46bd      	mov	sp, r7
    6f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f86:	4770      	bx	lr

00006f88 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b082      	sub	sp, #8
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	681b      	ldr	r3, [r3, #0]
    6f94:	f043 0201 	orr.w	r2, r3, #1
    6f98:	687b      	ldr	r3, [r7, #4]
    6f9a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6f9c:	2101      	movs	r1, #1
    6f9e:	6878      	ldr	r0, [r7, #4]
    6fa0:	4b02      	ldr	r3, [pc, #8]	; (6fac <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    6fa2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6fa4:	bf00      	nop
    6fa6:	3708      	adds	r7, #8
    6fa8:	46bd      	mov	sp, r7
    6faa:	bd80      	pop	{r7, pc}
    6fac:	00006ec5 	.word	0x00006ec5

00006fb0 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	b082      	sub	sp, #8
    6fb4:	af00      	add	r7, sp, #0
    6fb6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6fb8:	687b      	ldr	r3, [r7, #4]
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	f043 0202 	orr.w	r2, r3, #2
    6fc0:	687b      	ldr	r3, [r7, #4]
    6fc2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6fc4:	2103      	movs	r1, #3
    6fc6:	6878      	ldr	r0, [r7, #4]
    6fc8:	4b02      	ldr	r3, [pc, #8]	; (6fd4 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    6fca:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6fcc:	bf00      	nop
    6fce:	3708      	adds	r7, #8
    6fd0:	46bd      	mov	sp, r7
    6fd2:	bd80      	pop	{r7, pc}
    6fd4:	00006ec5 	.word	0x00006ec5

00006fd8 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	b084      	sub	sp, #16
    6fdc:	af00      	add	r7, sp, #0
    6fde:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6fe0:	2103      	movs	r1, #3
    6fe2:	6878      	ldr	r0, [r7, #4]
    6fe4:	4b09      	ldr	r3, [pc, #36]	; (700c <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    6fe6:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6fe8:	687b      	ldr	r3, [r7, #4]
    6fea:	681b      	ldr	r3, [r3, #0]
    6fec:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6fee:	68fb      	ldr	r3, [r7, #12]
    6ff0:	085b      	lsrs	r3, r3, #1
    6ff2:	f003 0301 	and.w	r3, r3, #1
    6ff6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6ff8:	68fb      	ldr	r3, [r7, #12]
    6ffa:	2b00      	cmp	r3, #0
    6ffc:	bf14      	ite	ne
    6ffe:	2301      	movne	r3, #1
    7000:	2300      	moveq	r3, #0
    7002:	b2db      	uxtb	r3, r3
}
    7004:	4618      	mov	r0, r3
    7006:	3710      	adds	r7, #16
    7008:	46bd      	mov	sp, r7
    700a:	bd80      	pop	{r7, pc}
    700c:	00006ec5 	.word	0x00006ec5

00007010 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7010:	b580      	push	{r7, lr}
    7012:	b082      	sub	sp, #8
    7014:	af00      	add	r7, sp, #0
    7016:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	681b      	ldr	r3, [r3, #0]
    701c:	f023 0202 	bic.w	r2, r3, #2
    7020:	687b      	ldr	r3, [r7, #4]
    7022:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7024:	2103      	movs	r1, #3
    7026:	6878      	ldr	r0, [r7, #4]
    7028:	4b02      	ldr	r3, [pc, #8]	; (7034 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    702a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    702c:	bf00      	nop
    702e:	3708      	adds	r7, #8
    7030:	46bd      	mov	sp, r7
    7032:	bd80      	pop	{r7, pc}
    7034:	00006ec5 	.word	0x00006ec5

00007038 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7038:	b580      	push	{r7, lr}
    703a:	b084      	sub	sp, #16
    703c:	af00      	add	r7, sp, #0
    703e:	6078      	str	r0, [r7, #4]
    7040:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7042:	2103      	movs	r1, #3
    7044:	6878      	ldr	r0, [r7, #4]
    7046:	4b07      	ldr	r3, [pc, #28]	; (7064 <hri_tcc_get_CTRLA_reg+0x2c>)
    7048:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	681b      	ldr	r3, [r3, #0]
    704e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7050:	68fa      	ldr	r2, [r7, #12]
    7052:	683b      	ldr	r3, [r7, #0]
    7054:	4013      	ands	r3, r2
    7056:	60fb      	str	r3, [r7, #12]
	return tmp;
    7058:	68fb      	ldr	r3, [r7, #12]
}
    705a:	4618      	mov	r0, r3
    705c:	3710      	adds	r7, #16
    705e:	46bd      	mov	sp, r7
    7060:	bd80      	pop	{r7, pc}
    7062:	bf00      	nop
    7064:	00006ec5 	.word	0x00006ec5

00007068 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7068:	b580      	push	{r7, lr}
    706a:	b082      	sub	sp, #8
    706c:	af00      	add	r7, sp, #0
    706e:	6078      	str	r0, [r7, #4]
    7070:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7072:	687b      	ldr	r3, [r7, #4]
    7074:	683a      	ldr	r2, [r7, #0]
    7076:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7078:	2103      	movs	r1, #3
    707a:	6878      	ldr	r0, [r7, #4]
    707c:	4b02      	ldr	r3, [pc, #8]	; (7088 <hri_tcc_write_CTRLA_reg+0x20>)
    707e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7080:	bf00      	nop
    7082:	3708      	adds	r7, #8
    7084:	46bd      	mov	sp, r7
    7086:	bd80      	pop	{r7, pc}
    7088:	00006ec5 	.word	0x00006ec5

0000708c <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    708c:	b480      	push	{r7}
    708e:	b083      	sub	sp, #12
    7090:	af00      	add	r7, sp, #0
    7092:	6078      	str	r0, [r7, #4]
    7094:	460b      	mov	r3, r1
    7096:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7098:	687b      	ldr	r3, [r7, #4]
    709a:	78fa      	ldrb	r2, [r7, #3]
    709c:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    709e:	bf00      	nop
    70a0:	370c      	adds	r7, #12
    70a2:	46bd      	mov	sp, r7
    70a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    70a8:	4770      	bx	lr

000070aa <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    70aa:	b480      	push	{r7}
    70ac:	b083      	sub	sp, #12
    70ae:	af00      	add	r7, sp, #0
    70b0:	6078      	str	r0, [r7, #4]
    70b2:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    70b4:	687b      	ldr	r3, [r7, #4]
    70b6:	683a      	ldr	r2, [r7, #0]
    70b8:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    70ba:	bf00      	nop
    70bc:	370c      	adds	r7, #12
    70be:	46bd      	mov	sp, r7
    70c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    70c4:	4770      	bx	lr
	...

000070c8 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    70c8:	b580      	push	{r7, lr}
    70ca:	b082      	sub	sp, #8
    70cc:	af00      	add	r7, sp, #0
    70ce:	6078      	str	r0, [r7, #4]
    70d0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    70d2:	687b      	ldr	r3, [r7, #4]
    70d4:	683a      	ldr	r2, [r7, #0]
    70d6:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    70d8:	2180      	movs	r1, #128	; 0x80
    70da:	6878      	ldr	r0, [r7, #4]
    70dc:	4b02      	ldr	r3, [pc, #8]	; (70e8 <hri_tcc_write_PER_reg+0x20>)
    70de:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    70e0:	bf00      	nop
    70e2:	3708      	adds	r7, #8
    70e4:	46bd      	mov	sp, r7
    70e6:	bd80      	pop	{r7, pc}
    70e8:	00006ec5 	.word	0x00006ec5

000070ec <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    70ec:	b580      	push	{r7, lr}
    70ee:	b082      	sub	sp, #8
    70f0:	af00      	add	r7, sp, #0
    70f2:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    70f4:	2180      	movs	r1, #128	; 0x80
    70f6:	6878      	ldr	r0, [r7, #4]
    70f8:	4b03      	ldr	r3, [pc, #12]	; (7108 <hri_tcc_read_PER_reg+0x1c>)
    70fa:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7100:	4618      	mov	r0, r3
    7102:	3708      	adds	r7, #8
    7104:	46bd      	mov	sp, r7
    7106:	bd80      	pop	{r7, pc}
    7108:	00006ec5 	.word	0x00006ec5

0000710c <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    710c:	b480      	push	{r7}
    710e:	b083      	sub	sp, #12
    7110:	af00      	add	r7, sp, #0
    7112:	6078      	str	r0, [r7, #4]
    7114:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7116:	687b      	ldr	r3, [r7, #4]
    7118:	4a0c      	ldr	r2, [pc, #48]	; (714c <_tcc_init_irq_param+0x40>)
    711a:	4293      	cmp	r3, r2
    711c:	d102      	bne.n	7124 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    711e:	4a0c      	ldr	r2, [pc, #48]	; (7150 <_tcc_init_irq_param+0x44>)
    7120:	683b      	ldr	r3, [r7, #0]
    7122:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	4a0b      	ldr	r2, [pc, #44]	; (7154 <_tcc_init_irq_param+0x48>)
    7128:	4293      	cmp	r3, r2
    712a:	d102      	bne.n	7132 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    712c:	4a0a      	ldr	r2, [pc, #40]	; (7158 <_tcc_init_irq_param+0x4c>)
    712e:	683b      	ldr	r3, [r7, #0]
    7130:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    7132:	687b      	ldr	r3, [r7, #4]
    7134:	4a09      	ldr	r2, [pc, #36]	; (715c <_tcc_init_irq_param+0x50>)
    7136:	4293      	cmp	r3, r2
    7138:	d102      	bne.n	7140 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    713a:	4a09      	ldr	r2, [pc, #36]	; (7160 <_tcc_init_irq_param+0x54>)
    713c:	683b      	ldr	r3, [r7, #0]
    713e:	6013      	str	r3, [r2, #0]
	}
}
    7140:	bf00      	nop
    7142:	370c      	adds	r7, #12
    7144:	46bd      	mov	sp, r7
    7146:	f85d 7b04 	ldr.w	r7, [sp], #4
    714a:	4770      	bx	lr
    714c:	41016000 	.word	0x41016000
    7150:	20000c08 	.word	0x20000c08
    7154:	41018000 	.word	0x41018000
    7158:	20000c0c 	.word	0x20000c0c
    715c:	42000c00 	.word	0x42000c00
    7160:	20000c10 	.word	0x20000c10

00007164 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7164:	b580      	push	{r7, lr}
    7166:	b084      	sub	sp, #16
    7168:	af00      	add	r7, sp, #0
    716a:	6078      	str	r0, [r7, #4]
    716c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    716e:	6838      	ldr	r0, [r7, #0]
    7170:	4b33      	ldr	r3, [pc, #204]	; (7240 <_tcc_timer_init+0xdc>)
    7172:	4798      	blx	r3
    7174:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7176:	68fb      	ldr	r3, [r7, #12]
    7178:	2b00      	cmp	r3, #0
    717a:	d102      	bne.n	7182 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    717c:	f06f 0309 	mvn.w	r3, #9
    7180:	e05a      	b.n	7238 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	683a      	ldr	r2, [r7, #0]
    7186:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7188:	2101      	movs	r1, #1
    718a:	6838      	ldr	r0, [r7, #0]
    718c:	4b2d      	ldr	r3, [pc, #180]	; (7244 <_tcc_timer_init+0xe0>)
    718e:	4798      	blx	r3
    7190:	4603      	mov	r3, r0
    7192:	f083 0301 	eor.w	r3, r3, #1
    7196:	b2db      	uxtb	r3, r3
    7198:	2b00      	cmp	r3, #0
    719a:	d011      	beq.n	71c0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    719c:	2102      	movs	r1, #2
    719e:	6838      	ldr	r0, [r7, #0]
    71a0:	4b29      	ldr	r3, [pc, #164]	; (7248 <_tcc_timer_init+0xe4>)
    71a2:	4798      	blx	r3
    71a4:	4603      	mov	r3, r0
    71a6:	2b00      	cmp	r3, #0
    71a8:	d006      	beq.n	71b8 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    71aa:	6838      	ldr	r0, [r7, #0]
    71ac:	4b27      	ldr	r3, [pc, #156]	; (724c <_tcc_timer_init+0xe8>)
    71ae:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    71b0:	2102      	movs	r1, #2
    71b2:	6838      	ldr	r0, [r7, #0]
    71b4:	4b26      	ldr	r3, [pc, #152]	; (7250 <_tcc_timer_init+0xec>)
    71b6:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    71b8:	2101      	movs	r1, #1
    71ba:	6838      	ldr	r0, [r7, #0]
    71bc:	4b25      	ldr	r3, [pc, #148]	; (7254 <_tcc_timer_init+0xf0>)
    71be:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    71c0:	2101      	movs	r1, #1
    71c2:	6838      	ldr	r0, [r7, #0]
    71c4:	4b22      	ldr	r3, [pc, #136]	; (7250 <_tcc_timer_init+0xec>)
    71c6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    71c8:	68fb      	ldr	r3, [r7, #12]
    71ca:	689b      	ldr	r3, [r3, #8]
    71cc:	4619      	mov	r1, r3
    71ce:	6838      	ldr	r0, [r7, #0]
    71d0:	4b20      	ldr	r3, [pc, #128]	; (7254 <_tcc_timer_init+0xf0>)
    71d2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    71d4:	68fb      	ldr	r3, [r7, #12]
    71d6:	7b1b      	ldrb	r3, [r3, #12]
    71d8:	4619      	mov	r1, r3
    71da:	6838      	ldr	r0, [r7, #0]
    71dc:	4b1e      	ldr	r3, [pc, #120]	; (7258 <_tcc_timer_init+0xf4>)
    71de:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    71e0:	68fb      	ldr	r3, [r7, #12]
    71e2:	7b5b      	ldrb	r3, [r3, #13]
    71e4:	4619      	mov	r1, r3
    71e6:	6838      	ldr	r0, [r7, #0]
    71e8:	4b1c      	ldr	r3, [pc, #112]	; (725c <_tcc_timer_init+0xf8>)
    71ea:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    71ec:	68fb      	ldr	r3, [r7, #12]
    71ee:	691b      	ldr	r3, [r3, #16]
    71f0:	4619      	mov	r1, r3
    71f2:	6838      	ldr	r0, [r7, #0]
    71f4:	4b1a      	ldr	r3, [pc, #104]	; (7260 <_tcc_timer_init+0xfc>)
    71f6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    71f8:	68fb      	ldr	r3, [r7, #12]
    71fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    71fc:	4619      	mov	r1, r3
    71fe:	6838      	ldr	r0, [r7, #0]
    7200:	4b18      	ldr	r3, [pc, #96]	; (7264 <_tcc_timer_init+0x100>)
    7202:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7204:	6838      	ldr	r0, [r7, #0]
    7206:	4b18      	ldr	r3, [pc, #96]	; (7268 <_tcc_timer_init+0x104>)
    7208:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    720a:	6879      	ldr	r1, [r7, #4]
    720c:	6838      	ldr	r0, [r7, #0]
    720e:	4b17      	ldr	r3, [pc, #92]	; (726c <_tcc_timer_init+0x108>)
    7210:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7212:	68fb      	ldr	r3, [r7, #12]
    7214:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7218:	4618      	mov	r0, r3
    721a:	4b15      	ldr	r3, [pc, #84]	; (7270 <_tcc_timer_init+0x10c>)
    721c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    721e:	68fb      	ldr	r3, [r7, #12]
    7220:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7224:	4618      	mov	r0, r3
    7226:	4b13      	ldr	r3, [pc, #76]	; (7274 <_tcc_timer_init+0x110>)
    7228:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    722a:	68fb      	ldr	r3, [r7, #12]
    722c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7230:	4618      	mov	r0, r3
    7232:	4b11      	ldr	r3, [pc, #68]	; (7278 <_tcc_timer_init+0x114>)
    7234:	4798      	blx	r3

	return ERR_NONE;
    7236:	2300      	movs	r3, #0
}
    7238:	4618      	mov	r0, r3
    723a:	3710      	adds	r7, #16
    723c:	46bd      	mov	sp, r7
    723e:	bd80      	pop	{r7, pc}
    7240:	00007449 	.word	0x00007449
    7244:	00006ee9 	.word	0x00006ee9
    7248:	00007039 	.word	0x00007039
    724c:	00007011 	.word	0x00007011
    7250:	00006ec5 	.word	0x00006ec5
    7254:	00007069 	.word	0x00007069
    7258:	00006f51 	.word	0x00006f51
    725c:	0000708d 	.word	0x0000708d
    7260:	000070ab 	.word	0x000070ab
    7264:	000070c9 	.word	0x000070c9
    7268:	00006f6f 	.word	0x00006f6f
    726c:	0000710d 	.word	0x0000710d
    7270:	00006e45 	.word	0x00006e45
    7274:	00006e89 	.word	0x00006e89
    7278:	00006e09 	.word	0x00006e09

0000727c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    727c:	b580      	push	{r7, lr}
    727e:	b084      	sub	sp, #16
    7280:	af00      	add	r7, sp, #0
    7282:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	68db      	ldr	r3, [r3, #12]
    7288:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    728a:	68f8      	ldr	r0, [r7, #12]
    728c:	4b0a      	ldr	r3, [pc, #40]	; (72b8 <_tcc_timer_deinit+0x3c>)
    728e:	4798      	blx	r3
    7290:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7292:	68bb      	ldr	r3, [r7, #8]
    7294:	2b00      	cmp	r3, #0
    7296:	d00b      	beq.n	72b0 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7298:	68bb      	ldr	r3, [r7, #8]
    729a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    729e:	4618      	mov	r0, r3
    72a0:	4b06      	ldr	r3, [pc, #24]	; (72bc <_tcc_timer_deinit+0x40>)
    72a2:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    72a4:	68f8      	ldr	r0, [r7, #12]
    72a6:	4b06      	ldr	r3, [pc, #24]	; (72c0 <_tcc_timer_deinit+0x44>)
    72a8:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    72aa:	68f8      	ldr	r0, [r7, #12]
    72ac:	4b05      	ldr	r3, [pc, #20]	; (72c4 <_tcc_timer_deinit+0x48>)
    72ae:	4798      	blx	r3
	}
}
    72b0:	bf00      	nop
    72b2:	3710      	adds	r7, #16
    72b4:	46bd      	mov	sp, r7
    72b6:	bd80      	pop	{r7, pc}
    72b8:	00007449 	.word	0x00007449
    72bc:	00006e45 	.word	0x00006e45
    72c0:	00007011 	.word	0x00007011
    72c4:	00006f89 	.word	0x00006f89

000072c8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    72c8:	b580      	push	{r7, lr}
    72ca:	b082      	sub	sp, #8
    72cc:	af00      	add	r7, sp, #0
    72ce:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    72d0:	687b      	ldr	r3, [r7, #4]
    72d2:	68db      	ldr	r3, [r3, #12]
    72d4:	4618      	mov	r0, r3
    72d6:	4b03      	ldr	r3, [pc, #12]	; (72e4 <_tcc_timer_start+0x1c>)
    72d8:	4798      	blx	r3
}
    72da:	bf00      	nop
    72dc:	3708      	adds	r7, #8
    72de:	46bd      	mov	sp, r7
    72e0:	bd80      	pop	{r7, pc}
    72e2:	bf00      	nop
    72e4:	00006fb1 	.word	0x00006fb1

000072e8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    72e8:	b580      	push	{r7, lr}
    72ea:	b082      	sub	sp, #8
    72ec:	af00      	add	r7, sp, #0
    72ee:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	68db      	ldr	r3, [r3, #12]
    72f4:	4618      	mov	r0, r3
    72f6:	4b03      	ldr	r3, [pc, #12]	; (7304 <_tcc_timer_stop+0x1c>)
    72f8:	4798      	blx	r3
}
    72fa:	bf00      	nop
    72fc:	3708      	adds	r7, #8
    72fe:	46bd      	mov	sp, r7
    7300:	bd80      	pop	{r7, pc}
    7302:	bf00      	nop
    7304:	00007011 	.word	0x00007011

00007308 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7308:	b580      	push	{r7, lr}
    730a:	b082      	sub	sp, #8
    730c:	af00      	add	r7, sp, #0
    730e:	6078      	str	r0, [r7, #4]
    7310:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	68db      	ldr	r3, [r3, #12]
    7316:	6839      	ldr	r1, [r7, #0]
    7318:	4618      	mov	r0, r3
    731a:	4b03      	ldr	r3, [pc, #12]	; (7328 <_tcc_timer_set_period+0x20>)
    731c:	4798      	blx	r3
}
    731e:	bf00      	nop
    7320:	3708      	adds	r7, #8
    7322:	46bd      	mov	sp, r7
    7324:	bd80      	pop	{r7, pc}
    7326:	bf00      	nop
    7328:	000070c9 	.word	0x000070c9

0000732c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    732c:	b580      	push	{r7, lr}
    732e:	b082      	sub	sp, #8
    7330:	af00      	add	r7, sp, #0
    7332:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	68db      	ldr	r3, [r3, #12]
    7338:	4618      	mov	r0, r3
    733a:	4b03      	ldr	r3, [pc, #12]	; (7348 <_tcc_timer_get_period+0x1c>)
    733c:	4798      	blx	r3
    733e:	4603      	mov	r3, r0
}
    7340:	4618      	mov	r0, r3
    7342:	3708      	adds	r7, #8
    7344:	46bd      	mov	sp, r7
    7346:	bd80      	pop	{r7, pc}
    7348:	000070ed 	.word	0x000070ed

0000734c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    734c:	b580      	push	{r7, lr}
    734e:	b082      	sub	sp, #8
    7350:	af00      	add	r7, sp, #0
    7352:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7354:	687b      	ldr	r3, [r7, #4]
    7356:	68db      	ldr	r3, [r3, #12]
    7358:	4618      	mov	r0, r3
    735a:	4b03      	ldr	r3, [pc, #12]	; (7368 <_tcc_timer_is_started+0x1c>)
    735c:	4798      	blx	r3
    735e:	4603      	mov	r3, r0
}
    7360:	4618      	mov	r0, r3
    7362:	3708      	adds	r7, #8
    7364:	46bd      	mov	sp, r7
    7366:	bd80      	pop	{r7, pc}
    7368:	00006fd9 	.word	0x00006fd9

0000736c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    736c:	b480      	push	{r7}
    736e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7370:	4b02      	ldr	r3, [pc, #8]	; (737c <_tcc_get_timer+0x10>)
}
    7372:	4618      	mov	r0, r3
    7374:	46bd      	mov	sp, r7
    7376:	f85d 7b04 	ldr.w	r7, [sp], #4
    737a:	4770      	bx	lr
    737c:	200000f0 	.word	0x200000f0

00007380 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7380:	b580      	push	{r7, lr}
    7382:	b084      	sub	sp, #16
    7384:	af00      	add	r7, sp, #0
    7386:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7388:	687b      	ldr	r3, [r7, #4]
    738a:	68db      	ldr	r3, [r3, #12]
    738c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    738e:	68f8      	ldr	r0, [r7, #12]
    7390:	4b08      	ldr	r3, [pc, #32]	; (73b4 <_tcc_timer_set_irq+0x34>)
    7392:	4798      	blx	r3
    7394:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7396:	68bb      	ldr	r3, [r7, #8]
    7398:	2b00      	cmp	r3, #0
    739a:	d006      	beq.n	73aa <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    739c:	68bb      	ldr	r3, [r7, #8]
    739e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    73a2:	b2db      	uxtb	r3, r3
    73a4:	4618      	mov	r0, r3
    73a6:	4b04      	ldr	r3, [pc, #16]	; (73b8 <_tcc_timer_set_irq+0x38>)
    73a8:	4798      	blx	r3
	}
}
    73aa:	bf00      	nop
    73ac:	3710      	adds	r7, #16
    73ae:	46bd      	mov	sp, r7
    73b0:	bd80      	pop	{r7, pc}
    73b2:	bf00      	nop
    73b4:	00007449 	.word	0x00007449
    73b8:	0000b1b9 	.word	0x0000b1b9

000073bc <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    73bc:	b580      	push	{r7, lr}
    73be:	b084      	sub	sp, #16
    73c0:	af00      	add	r7, sp, #0
    73c2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    73c4:	687b      	ldr	r3, [r7, #4]
    73c6:	68db      	ldr	r3, [r3, #12]
    73c8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    73ca:	68f8      	ldr	r0, [r7, #12]
    73cc:	4b07      	ldr	r3, [pc, #28]	; (73ec <tcc_interrupt_handler+0x30>)
    73ce:	4798      	blx	r3
    73d0:	4603      	mov	r3, r0
    73d2:	2b00      	cmp	r3, #0
    73d4:	d006      	beq.n	73e4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    73d6:	68f8      	ldr	r0, [r7, #12]
    73d8:	4b05      	ldr	r3, [pc, #20]	; (73f0 <tcc_interrupt_handler+0x34>)
    73da:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    73dc:	687b      	ldr	r3, [r7, #4]
    73de:	681b      	ldr	r3, [r3, #0]
    73e0:	6878      	ldr	r0, [r7, #4]
    73e2:	4798      	blx	r3
	}
}
    73e4:	bf00      	nop
    73e6:	3710      	adds	r7, #16
    73e8:	46bd      	mov	sp, r7
    73ea:	bd80      	pop	{r7, pc}
    73ec:	00006f11 	.word	0x00006f11
    73f0:	00006f37 	.word	0x00006f37

000073f4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    73f4:	b580      	push	{r7, lr}
    73f6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    73f8:	4b03      	ldr	r3, [pc, #12]	; (7408 <TCC0_0_Handler+0x14>)
    73fa:	681b      	ldr	r3, [r3, #0]
    73fc:	4618      	mov	r0, r3
    73fe:	4b03      	ldr	r3, [pc, #12]	; (740c <TCC0_0_Handler+0x18>)
    7400:	4798      	blx	r3
}
    7402:	bf00      	nop
    7404:	bd80      	pop	{r7, pc}
    7406:	bf00      	nop
    7408:	20000c08 	.word	0x20000c08
    740c:	000073bd 	.word	0x000073bd

00007410 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7410:	b580      	push	{r7, lr}
    7412:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7414:	4b03      	ldr	r3, [pc, #12]	; (7424 <TCC1_0_Handler+0x14>)
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	4618      	mov	r0, r3
    741a:	4b03      	ldr	r3, [pc, #12]	; (7428 <TCC1_0_Handler+0x18>)
    741c:	4798      	blx	r3
}
    741e:	bf00      	nop
    7420:	bd80      	pop	{r7, pc}
    7422:	bf00      	nop
    7424:	20000c0c 	.word	0x20000c0c
    7428:	000073bd 	.word	0x000073bd

0000742c <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    742c:	b580      	push	{r7, lr}
    742e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    7430:	4b03      	ldr	r3, [pc, #12]	; (7440 <TCC2_0_Handler+0x14>)
    7432:	681b      	ldr	r3, [r3, #0]
    7434:	4618      	mov	r0, r3
    7436:	4b03      	ldr	r3, [pc, #12]	; (7444 <TCC2_0_Handler+0x18>)
    7438:	4798      	blx	r3
}
    743a:	bf00      	nop
    743c:	bd80      	pop	{r7, pc}
    743e:	bf00      	nop
    7440:	20000c10 	.word	0x20000c10
    7444:	000073bd 	.word	0x000073bd

00007448 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7448:	b480      	push	{r7}
    744a:	b085      	sub	sp, #20
    744c:	af00      	add	r7, sp, #0
    744e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7450:	2300      	movs	r3, #0
    7452:	73fb      	strb	r3, [r7, #15]
    7454:	e015      	b.n	7482 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7456:	7bfa      	ldrb	r2, [r7, #15]
    7458:	490f      	ldr	r1, [pc, #60]	; (7498 <_get_tcc_cfg+0x50>)
    745a:	4613      	mov	r3, r2
    745c:	005b      	lsls	r3, r3, #1
    745e:	4413      	add	r3, r2
    7460:	011b      	lsls	r3, r3, #4
    7462:	440b      	add	r3, r1
    7464:	681a      	ldr	r2, [r3, #0]
    7466:	687b      	ldr	r3, [r7, #4]
    7468:	429a      	cmp	r2, r3
    746a:	d107      	bne.n	747c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    746c:	7bfa      	ldrb	r2, [r7, #15]
    746e:	4613      	mov	r3, r2
    7470:	005b      	lsls	r3, r3, #1
    7472:	4413      	add	r3, r2
    7474:	011b      	lsls	r3, r3, #4
    7476:	4a08      	ldr	r2, [pc, #32]	; (7498 <_get_tcc_cfg+0x50>)
    7478:	4413      	add	r3, r2
    747a:	e006      	b.n	748a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    747c:	7bfb      	ldrb	r3, [r7, #15]
    747e:	3301      	adds	r3, #1
    7480:	73fb      	strb	r3, [r7, #15]
    7482:	7bfb      	ldrb	r3, [r7, #15]
    7484:	2b02      	cmp	r3, #2
    7486:	d9e6      	bls.n	7456 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7488:	2300      	movs	r3, #0
}
    748a:	4618      	mov	r0, r3
    748c:	3714      	adds	r7, #20
    748e:	46bd      	mov	sp, r7
    7490:	f85d 7b04 	ldr.w	r7, [sp], #4
    7494:	4770      	bx	lr
    7496:	bf00      	nop
    7498:	20000060 	.word	0x20000060

0000749c <__NVIC_EnableIRQ>:
{
    749c:	b480      	push	{r7}
    749e:	b083      	sub	sp, #12
    74a0:	af00      	add	r7, sp, #0
    74a2:	4603      	mov	r3, r0
    74a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74aa:	2b00      	cmp	r3, #0
    74ac:	db0b      	blt.n	74c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74ae:	4909      	ldr	r1, [pc, #36]	; (74d4 <__NVIC_EnableIRQ+0x38>)
    74b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74b4:	095b      	lsrs	r3, r3, #5
    74b6:	88fa      	ldrh	r2, [r7, #6]
    74b8:	f002 021f 	and.w	r2, r2, #31
    74bc:	2001      	movs	r0, #1
    74be:	fa00 f202 	lsl.w	r2, r0, r2
    74c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74c6:	bf00      	nop
    74c8:	370c      	adds	r7, #12
    74ca:	46bd      	mov	sp, r7
    74cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    74d0:	4770      	bx	lr
    74d2:	bf00      	nop
    74d4:	e000e100 	.word	0xe000e100

000074d8 <__NVIC_DisableIRQ>:
{
    74d8:	b480      	push	{r7}
    74da:	b083      	sub	sp, #12
    74dc:	af00      	add	r7, sp, #0
    74de:	4603      	mov	r3, r0
    74e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74e6:	2b00      	cmp	r3, #0
    74e8:	db10      	blt.n	750c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74ea:	490b      	ldr	r1, [pc, #44]	; (7518 <__NVIC_DisableIRQ+0x40>)
    74ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74f0:	095b      	lsrs	r3, r3, #5
    74f2:	88fa      	ldrh	r2, [r7, #6]
    74f4:	f002 021f 	and.w	r2, r2, #31
    74f8:	2001      	movs	r0, #1
    74fa:	fa00 f202 	lsl.w	r2, r0, r2
    74fe:	3320      	adds	r3, #32
    7500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7504:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7508:	f3bf 8f6f 	isb	sy
}
    750c:	bf00      	nop
    750e:	370c      	adds	r7, #12
    7510:	46bd      	mov	sp, r7
    7512:	f85d 7b04 	ldr.w	r7, [sp], #4
    7516:	4770      	bx	lr
    7518:	e000e100 	.word	0xe000e100

0000751c <__NVIC_ClearPendingIRQ>:
{
    751c:	b480      	push	{r7}
    751e:	b083      	sub	sp, #12
    7520:	af00      	add	r7, sp, #0
    7522:	4603      	mov	r3, r0
    7524:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    752a:	2b00      	cmp	r3, #0
    752c:	db0c      	blt.n	7548 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    752e:	4909      	ldr	r1, [pc, #36]	; (7554 <__NVIC_ClearPendingIRQ+0x38>)
    7530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7534:	095b      	lsrs	r3, r3, #5
    7536:	88fa      	ldrh	r2, [r7, #6]
    7538:	f002 021f 	and.w	r2, r2, #31
    753c:	2001      	movs	r0, #1
    753e:	fa00 f202 	lsl.w	r2, r0, r2
    7542:	3360      	adds	r3, #96	; 0x60
    7544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7548:	bf00      	nop
    754a:	370c      	adds	r7, #12
    754c:	46bd      	mov	sp, r7
    754e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7552:	4770      	bx	lr
    7554:	e000e100 	.word	0xe000e100

00007558 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7558:	b480      	push	{r7}
    755a:	b083      	sub	sp, #12
    755c:	af00      	add	r7, sp, #0
    755e:	6078      	str	r0, [r7, #4]
    7560:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7562:	bf00      	nop
    7564:	687b      	ldr	r3, [r7, #4]
    7566:	691a      	ldr	r2, [r3, #16]
    7568:	683b      	ldr	r3, [r7, #0]
    756a:	4013      	ands	r3, r2
    756c:	2b00      	cmp	r3, #0
    756e:	d1f9      	bne.n	7564 <hri_tc_wait_for_sync+0xc>
	};
}
    7570:	bf00      	nop
    7572:	370c      	adds	r7, #12
    7574:	46bd      	mov	sp, r7
    7576:	f85d 7b04 	ldr.w	r7, [sp], #4
    757a:	4770      	bx	lr

0000757c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    757c:	b480      	push	{r7}
    757e:	b083      	sub	sp, #12
    7580:	af00      	add	r7, sp, #0
    7582:	6078      	str	r0, [r7, #4]
    7584:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7586:	687b      	ldr	r3, [r7, #4]
    7588:	691a      	ldr	r2, [r3, #16]
    758a:	683b      	ldr	r3, [r7, #0]
    758c:	4013      	ands	r3, r2
    758e:	2b00      	cmp	r3, #0
    7590:	bf14      	ite	ne
    7592:	2301      	movne	r3, #1
    7594:	2300      	moveq	r3, #0
    7596:	b2db      	uxtb	r3, r3
}
    7598:	4618      	mov	r0, r3
    759a:	370c      	adds	r7, #12
    759c:	46bd      	mov	sp, r7
    759e:	f85d 7b04 	ldr.w	r7, [sp], #4
    75a2:	4770      	bx	lr

000075a4 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    75a4:	b480      	push	{r7}
    75a6:	b083      	sub	sp, #12
    75a8:	af00      	add	r7, sp, #0
    75aa:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    75ac:	687b      	ldr	r3, [r7, #4]
    75ae:	7a9b      	ldrb	r3, [r3, #10]
    75b0:	b2db      	uxtb	r3, r3
    75b2:	f003 0301 	and.w	r3, r3, #1
    75b6:	2b00      	cmp	r3, #0
    75b8:	bf14      	ite	ne
    75ba:	2301      	movne	r3, #1
    75bc:	2300      	moveq	r3, #0
    75be:	b2db      	uxtb	r3, r3
}
    75c0:	4618      	mov	r0, r3
    75c2:	370c      	adds	r7, #12
    75c4:	46bd      	mov	sp, r7
    75c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ca:	4770      	bx	lr

000075cc <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    75cc:	b480      	push	{r7}
    75ce:	b083      	sub	sp, #12
    75d0:	af00      	add	r7, sp, #0
    75d2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    75d4:	687b      	ldr	r3, [r7, #4]
    75d6:	2201      	movs	r2, #1
    75d8:	729a      	strb	r2, [r3, #10]
}
    75da:	bf00      	nop
    75dc:	370c      	adds	r7, #12
    75de:	46bd      	mov	sp, r7
    75e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    75e4:	4770      	bx	lr

000075e6 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    75e6:	b480      	push	{r7}
    75e8:	b083      	sub	sp, #12
    75ea:	af00      	add	r7, sp, #0
    75ec:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    75ee:	687b      	ldr	r3, [r7, #4]
    75f0:	2202      	movs	r2, #2
    75f2:	729a      	strb	r2, [r3, #10]
}
    75f4:	bf00      	nop
    75f6:	370c      	adds	r7, #12
    75f8:	46bd      	mov	sp, r7
    75fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    75fe:	4770      	bx	lr

00007600 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7600:	b480      	push	{r7}
    7602:	b083      	sub	sp, #12
    7604:	af00      	add	r7, sp, #0
    7606:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7608:	687b      	ldr	r3, [r7, #4]
    760a:	2201      	movs	r2, #1
    760c:	725a      	strb	r2, [r3, #9]
}
    760e:	bf00      	nop
    7610:	370c      	adds	r7, #12
    7612:	46bd      	mov	sp, r7
    7614:	f85d 7b04 	ldr.w	r7, [sp], #4
    7618:	4770      	bx	lr

0000761a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    761a:	b480      	push	{r7}
    761c:	b083      	sub	sp, #12
    761e:	af00      	add	r7, sp, #0
    7620:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7622:	687b      	ldr	r3, [r7, #4]
    7624:	7a5b      	ldrb	r3, [r3, #9]
    7626:	b2db      	uxtb	r3, r3
    7628:	085b      	lsrs	r3, r3, #1
    762a:	f003 0301 	and.w	r3, r3, #1
    762e:	2b00      	cmp	r3, #0
    7630:	bf14      	ite	ne
    7632:	2301      	movne	r3, #1
    7634:	2300      	moveq	r3, #0
    7636:	b2db      	uxtb	r3, r3
}
    7638:	4618      	mov	r0, r3
    763a:	370c      	adds	r7, #12
    763c:	46bd      	mov	sp, r7
    763e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7642:	4770      	bx	lr

00007644 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7644:	b580      	push	{r7, lr}
    7646:	b082      	sub	sp, #8
    7648:	af00      	add	r7, sp, #0
    764a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	681b      	ldr	r3, [r3, #0]
    7650:	f043 0201 	orr.w	r2, r3, #1
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7658:	2101      	movs	r1, #1
    765a:	6878      	ldr	r0, [r7, #4]
    765c:	4b02      	ldr	r3, [pc, #8]	; (7668 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    765e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7660:	bf00      	nop
    7662:	3708      	adds	r7, #8
    7664:	46bd      	mov	sp, r7
    7666:	bd80      	pop	{r7, pc}
    7668:	00007559 	.word	0x00007559

0000766c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    766c:	b580      	push	{r7, lr}
    766e:	b082      	sub	sp, #8
    7670:	af00      	add	r7, sp, #0
    7672:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7674:	687b      	ldr	r3, [r7, #4]
    7676:	681b      	ldr	r3, [r3, #0]
    7678:	f043 0202 	orr.w	r2, r3, #2
    767c:	687b      	ldr	r3, [r7, #4]
    767e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7680:	2103      	movs	r1, #3
    7682:	6878      	ldr	r0, [r7, #4]
    7684:	4b02      	ldr	r3, [pc, #8]	; (7690 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7686:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7688:	bf00      	nop
    768a:	3708      	adds	r7, #8
    768c:	46bd      	mov	sp, r7
    768e:	bd80      	pop	{r7, pc}
    7690:	00007559 	.word	0x00007559

00007694 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7694:	b580      	push	{r7, lr}
    7696:	b084      	sub	sp, #16
    7698:	af00      	add	r7, sp, #0
    769a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    769c:	2103      	movs	r1, #3
    769e:	6878      	ldr	r0, [r7, #4]
    76a0:	4b09      	ldr	r3, [pc, #36]	; (76c8 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    76a2:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	681b      	ldr	r3, [r3, #0]
    76a8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    76aa:	68fb      	ldr	r3, [r7, #12]
    76ac:	085b      	lsrs	r3, r3, #1
    76ae:	f003 0301 	and.w	r3, r3, #1
    76b2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    76b4:	68fb      	ldr	r3, [r7, #12]
    76b6:	2b00      	cmp	r3, #0
    76b8:	bf14      	ite	ne
    76ba:	2301      	movne	r3, #1
    76bc:	2300      	moveq	r3, #0
    76be:	b2db      	uxtb	r3, r3
}
    76c0:	4618      	mov	r0, r3
    76c2:	3710      	adds	r7, #16
    76c4:	46bd      	mov	sp, r7
    76c6:	bd80      	pop	{r7, pc}
    76c8:	00007559 	.word	0x00007559

000076cc <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    76cc:	b580      	push	{r7, lr}
    76ce:	b082      	sub	sp, #8
    76d0:	af00      	add	r7, sp, #0
    76d2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	681b      	ldr	r3, [r3, #0]
    76d8:	f023 0202 	bic.w	r2, r3, #2
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    76e0:	2103      	movs	r1, #3
    76e2:	6878      	ldr	r0, [r7, #4]
    76e4:	4b02      	ldr	r3, [pc, #8]	; (76f0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    76e6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    76e8:	bf00      	nop
    76ea:	3708      	adds	r7, #8
    76ec:	46bd      	mov	sp, r7
    76ee:	bd80      	pop	{r7, pc}
    76f0:	00007559 	.word	0x00007559

000076f4 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    76f4:	b480      	push	{r7}
    76f6:	b085      	sub	sp, #20
    76f8:	af00      	add	r7, sp, #0
    76fa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    76fc:	687b      	ldr	r3, [r7, #4]
    76fe:	681b      	ldr	r3, [r3, #0]
    7700:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7702:	68fb      	ldr	r3, [r7, #12]
    7704:	089b      	lsrs	r3, r3, #2
    7706:	f003 0303 	and.w	r3, r3, #3
    770a:	60fb      	str	r3, [r7, #12]
	return tmp;
    770c:	68fb      	ldr	r3, [r7, #12]
}
    770e:	4618      	mov	r0, r3
    7710:	3714      	adds	r7, #20
    7712:	46bd      	mov	sp, r7
    7714:	f85d 7b04 	ldr.w	r7, [sp], #4
    7718:	4770      	bx	lr
	...

0000771c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    771c:	b580      	push	{r7, lr}
    771e:	b084      	sub	sp, #16
    7720:	af00      	add	r7, sp, #0
    7722:	6078      	str	r0, [r7, #4]
    7724:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7726:	2103      	movs	r1, #3
    7728:	6878      	ldr	r0, [r7, #4]
    772a:	4b07      	ldr	r3, [pc, #28]	; (7748 <hri_tc_get_CTRLA_reg+0x2c>)
    772c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    772e:	687b      	ldr	r3, [r7, #4]
    7730:	681b      	ldr	r3, [r3, #0]
    7732:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7734:	68fa      	ldr	r2, [r7, #12]
    7736:	683b      	ldr	r3, [r7, #0]
    7738:	4013      	ands	r3, r2
    773a:	60fb      	str	r3, [r7, #12]
	return tmp;
    773c:	68fb      	ldr	r3, [r7, #12]
}
    773e:	4618      	mov	r0, r3
    7740:	3710      	adds	r7, #16
    7742:	46bd      	mov	sp, r7
    7744:	bd80      	pop	{r7, pc}
    7746:	bf00      	nop
    7748:	00007559 	.word	0x00007559

0000774c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    774c:	b580      	push	{r7, lr}
    774e:	b082      	sub	sp, #8
    7750:	af00      	add	r7, sp, #0
    7752:	6078      	str	r0, [r7, #4]
    7754:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7756:	687b      	ldr	r3, [r7, #4]
    7758:	683a      	ldr	r2, [r7, #0]
    775a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    775c:	2103      	movs	r1, #3
    775e:	6878      	ldr	r0, [r7, #4]
    7760:	4b02      	ldr	r3, [pc, #8]	; (776c <hri_tc_write_CTRLA_reg+0x20>)
    7762:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7764:	bf00      	nop
    7766:	3708      	adds	r7, #8
    7768:	46bd      	mov	sp, r7
    776a:	bd80      	pop	{r7, pc}
    776c:	00007559 	.word	0x00007559

00007770 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7770:	b480      	push	{r7}
    7772:	b083      	sub	sp, #12
    7774:	af00      	add	r7, sp, #0
    7776:	6078      	str	r0, [r7, #4]
    7778:	460b      	mov	r3, r1
    777a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    777c:	687b      	ldr	r3, [r7, #4]
    777e:	887a      	ldrh	r2, [r7, #2]
    7780:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7782:	bf00      	nop
    7784:	370c      	adds	r7, #12
    7786:	46bd      	mov	sp, r7
    7788:	f85d 7b04 	ldr.w	r7, [sp], #4
    778c:	4770      	bx	lr

0000778e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    778e:	b480      	push	{r7}
    7790:	b083      	sub	sp, #12
    7792:	af00      	add	r7, sp, #0
    7794:	6078      	str	r0, [r7, #4]
    7796:	460b      	mov	r3, r1
    7798:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	78fa      	ldrb	r2, [r7, #3]
    779e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    77a0:	bf00      	nop
    77a2:	370c      	adds	r7, #12
    77a4:	46bd      	mov	sp, r7
    77a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    77aa:	4770      	bx	lr

000077ac <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    77ac:	b480      	push	{r7}
    77ae:	b083      	sub	sp, #12
    77b0:	af00      	add	r7, sp, #0
    77b2:	6078      	str	r0, [r7, #4]
    77b4:	460b      	mov	r3, r1
    77b6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	78fa      	ldrb	r2, [r7, #3]
    77bc:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    77be:	bf00      	nop
    77c0:	370c      	adds	r7, #12
    77c2:	46bd      	mov	sp, r7
    77c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    77c8:	4770      	bx	lr
	...

000077cc <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    77cc:	b580      	push	{r7, lr}
    77ce:	b082      	sub	sp, #8
    77d0:	af00      	add	r7, sp, #0
    77d2:	6078      	str	r0, [r7, #4]
    77d4:	460b      	mov	r3, r1
    77d6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	78fa      	ldrb	r2, [r7, #3]
    77dc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    77de:	2120      	movs	r1, #32
    77e0:	6878      	ldr	r0, [r7, #4]
    77e2:	4b03      	ldr	r3, [pc, #12]	; (77f0 <hri_tccount8_write_PER_reg+0x24>)
    77e4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    77e6:	bf00      	nop
    77e8:	3708      	adds	r7, #8
    77ea:	46bd      	mov	sp, r7
    77ec:	bd80      	pop	{r7, pc}
    77ee:	bf00      	nop
    77f0:	00007559 	.word	0x00007559

000077f4 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    77f4:	b580      	push	{r7, lr}
    77f6:	b082      	sub	sp, #8
    77f8:	af00      	add	r7, sp, #0
    77fa:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    77fc:	2120      	movs	r1, #32
    77fe:	6878      	ldr	r0, [r7, #4]
    7800:	4b04      	ldr	r3, [pc, #16]	; (7814 <hri_tccount8_read_PER_reg+0x20>)
    7802:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	7edb      	ldrb	r3, [r3, #27]
    7808:	b2db      	uxtb	r3, r3
}
    780a:	4618      	mov	r0, r3
    780c:	3708      	adds	r7, #8
    780e:	46bd      	mov	sp, r7
    7810:	bd80      	pop	{r7, pc}
    7812:	bf00      	nop
    7814:	00007559 	.word	0x00007559

00007818 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7818:	b580      	push	{r7, lr}
    781a:	b082      	sub	sp, #8
    781c:	af00      	add	r7, sp, #0
    781e:	6078      	str	r0, [r7, #4]
    7820:	460b      	mov	r3, r1
    7822:	70fb      	strb	r3, [r7, #3]
    7824:	4613      	mov	r3, r2
    7826:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7828:	78fb      	ldrb	r3, [r7, #3]
    782a:	687a      	ldr	r2, [r7, #4]
    782c:	4413      	add	r3, r2
    782e:	78ba      	ldrb	r2, [r7, #2]
    7830:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7832:	21c0      	movs	r1, #192	; 0xc0
    7834:	6878      	ldr	r0, [r7, #4]
    7836:	4b03      	ldr	r3, [pc, #12]	; (7844 <hri_tccount8_write_CC_reg+0x2c>)
    7838:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    783a:	bf00      	nop
    783c:	3708      	adds	r7, #8
    783e:	46bd      	mov	sp, r7
    7840:	bd80      	pop	{r7, pc}
    7842:	bf00      	nop
    7844:	00007559 	.word	0x00007559

00007848 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7848:	b580      	push	{r7, lr}
    784a:	b082      	sub	sp, #8
    784c:	af00      	add	r7, sp, #0
    784e:	6078      	str	r0, [r7, #4]
    7850:	460b      	mov	r3, r1
    7852:	70fb      	strb	r3, [r7, #3]
    7854:	4613      	mov	r3, r2
    7856:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7858:	78fb      	ldrb	r3, [r7, #3]
    785a:	687a      	ldr	r2, [r7, #4]
    785c:	330c      	adds	r3, #12
    785e:	005b      	lsls	r3, r3, #1
    7860:	4413      	add	r3, r2
    7862:	883a      	ldrh	r2, [r7, #0]
    7864:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7866:	21c0      	movs	r1, #192	; 0xc0
    7868:	6878      	ldr	r0, [r7, #4]
    786a:	4b03      	ldr	r3, [pc, #12]	; (7878 <hri_tccount16_write_CC_reg+0x30>)
    786c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    786e:	bf00      	nop
    7870:	3708      	adds	r7, #8
    7872:	46bd      	mov	sp, r7
    7874:	bd80      	pop	{r7, pc}
    7876:	bf00      	nop
    7878:	00007559 	.word	0x00007559

0000787c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    787c:	b580      	push	{r7, lr}
    787e:	b082      	sub	sp, #8
    7880:	af00      	add	r7, sp, #0
    7882:	6078      	str	r0, [r7, #4]
    7884:	460b      	mov	r3, r1
    7886:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7888:	21c0      	movs	r1, #192	; 0xc0
    788a:	6878      	ldr	r0, [r7, #4]
    788c:	4b06      	ldr	r3, [pc, #24]	; (78a8 <hri_tccount16_read_CC_reg+0x2c>)
    788e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7890:	78fb      	ldrb	r3, [r7, #3]
    7892:	687a      	ldr	r2, [r7, #4]
    7894:	330c      	adds	r3, #12
    7896:	005b      	lsls	r3, r3, #1
    7898:	4413      	add	r3, r2
    789a:	889b      	ldrh	r3, [r3, #4]
    789c:	b29b      	uxth	r3, r3
}
    789e:	4618      	mov	r0, r3
    78a0:	3708      	adds	r7, #8
    78a2:	46bd      	mov	sp, r7
    78a4:	bd80      	pop	{r7, pc}
    78a6:	bf00      	nop
    78a8:	00007559 	.word	0x00007559

000078ac <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    78ac:	b580      	push	{r7, lr}
    78ae:	b084      	sub	sp, #16
    78b0:	af00      	add	r7, sp, #0
    78b2:	60f8      	str	r0, [r7, #12]
    78b4:	460b      	mov	r3, r1
    78b6:	607a      	str	r2, [r7, #4]
    78b8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    78ba:	7afb      	ldrb	r3, [r7, #11]
    78bc:	68fa      	ldr	r2, [r7, #12]
    78be:	3306      	adds	r3, #6
    78c0:	009b      	lsls	r3, r3, #2
    78c2:	4413      	add	r3, r2
    78c4:	687a      	ldr	r2, [r7, #4]
    78c6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    78c8:	21c0      	movs	r1, #192	; 0xc0
    78ca:	68f8      	ldr	r0, [r7, #12]
    78cc:	4b02      	ldr	r3, [pc, #8]	; (78d8 <hri_tccount32_write_CC_reg+0x2c>)
    78ce:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    78d0:	bf00      	nop
    78d2:	3710      	adds	r7, #16
    78d4:	46bd      	mov	sp, r7
    78d6:	bd80      	pop	{r7, pc}
    78d8:	00007559 	.word	0x00007559

000078dc <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    78dc:	b580      	push	{r7, lr}
    78de:	b082      	sub	sp, #8
    78e0:	af00      	add	r7, sp, #0
    78e2:	6078      	str	r0, [r7, #4]
    78e4:	460b      	mov	r3, r1
    78e6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    78e8:	21c0      	movs	r1, #192	; 0xc0
    78ea:	6878      	ldr	r0, [r7, #4]
    78ec:	4b05      	ldr	r3, [pc, #20]	; (7904 <hri_tccount32_read_CC_reg+0x28>)
    78ee:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    78f0:	78fb      	ldrb	r3, [r7, #3]
    78f2:	687a      	ldr	r2, [r7, #4]
    78f4:	3306      	adds	r3, #6
    78f6:	009b      	lsls	r3, r3, #2
    78f8:	4413      	add	r3, r2
    78fa:	685b      	ldr	r3, [r3, #4]
}
    78fc:	4618      	mov	r0, r3
    78fe:	3708      	adds	r7, #8
    7900:	46bd      	mov	sp, r7
    7902:	bd80      	pop	{r7, pc}
    7904:	00007559 	.word	0x00007559

00007908 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7908:	b580      	push	{r7, lr}
    790a:	b084      	sub	sp, #16
    790c:	af00      	add	r7, sp, #0
    790e:	6078      	str	r0, [r7, #4]
    7910:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7912:	6838      	ldr	r0, [r7, #0]
    7914:	4b93      	ldr	r3, [pc, #588]	; (7b64 <_tc_timer_init+0x25c>)
    7916:	4798      	blx	r3
    7918:	4603      	mov	r3, r0
    791a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	683a      	ldr	r2, [r7, #0]
    7920:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7922:	22a4      	movs	r2, #164	; 0xa4
    7924:	4990      	ldr	r1, [pc, #576]	; (7b68 <_tc_timer_init+0x260>)
    7926:	2001      	movs	r0, #1
    7928:	4b90      	ldr	r3, [pc, #576]	; (7b6c <_tc_timer_init+0x264>)
    792a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    792c:	2101      	movs	r1, #1
    792e:	6838      	ldr	r0, [r7, #0]
    7930:	4b8f      	ldr	r3, [pc, #572]	; (7b70 <_tc_timer_init+0x268>)
    7932:	4798      	blx	r3
    7934:	4603      	mov	r3, r0
    7936:	f083 0301 	eor.w	r3, r3, #1
    793a:	b2db      	uxtb	r3, r3
    793c:	2b00      	cmp	r3, #0
    793e:	d011      	beq.n	7964 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7940:	2102      	movs	r1, #2
    7942:	6838      	ldr	r0, [r7, #0]
    7944:	4b8b      	ldr	r3, [pc, #556]	; (7b74 <_tc_timer_init+0x26c>)
    7946:	4798      	blx	r3
    7948:	4603      	mov	r3, r0
    794a:	2b00      	cmp	r3, #0
    794c:	d006      	beq.n	795c <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    794e:	6838      	ldr	r0, [r7, #0]
    7950:	4b89      	ldr	r3, [pc, #548]	; (7b78 <_tc_timer_init+0x270>)
    7952:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7954:	2102      	movs	r1, #2
    7956:	6838      	ldr	r0, [r7, #0]
    7958:	4b88      	ldr	r3, [pc, #544]	; (7b7c <_tc_timer_init+0x274>)
    795a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    795c:	2101      	movs	r1, #1
    795e:	6838      	ldr	r0, [r7, #0]
    7960:	4b87      	ldr	r3, [pc, #540]	; (7b80 <_tc_timer_init+0x278>)
    7962:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7964:	2101      	movs	r1, #1
    7966:	6838      	ldr	r0, [r7, #0]
    7968:	4b84      	ldr	r3, [pc, #528]	; (7b7c <_tc_timer_init+0x274>)
    796a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    796c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7970:	4984      	ldr	r1, [pc, #528]	; (7b84 <_tc_timer_init+0x27c>)
    7972:	4613      	mov	r3, r2
    7974:	009b      	lsls	r3, r3, #2
    7976:	4413      	add	r3, r2
    7978:	009b      	lsls	r3, r3, #2
    797a:	440b      	add	r3, r1
    797c:	3304      	adds	r3, #4
    797e:	681b      	ldr	r3, [r3, #0]
    7980:	4619      	mov	r1, r3
    7982:	6838      	ldr	r0, [r7, #0]
    7984:	4b7e      	ldr	r3, [pc, #504]	; (7b80 <_tc_timer_init+0x278>)
    7986:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7988:	f997 200f 	ldrsb.w	r2, [r7, #15]
    798c:	497d      	ldr	r1, [pc, #500]	; (7b84 <_tc_timer_init+0x27c>)
    798e:	4613      	mov	r3, r2
    7990:	009b      	lsls	r3, r3, #2
    7992:	4413      	add	r3, r2
    7994:	009b      	lsls	r3, r3, #2
    7996:	440b      	add	r3, r1
    7998:	330a      	adds	r3, #10
    799a:	781b      	ldrb	r3, [r3, #0]
    799c:	4619      	mov	r1, r3
    799e:	6838      	ldr	r0, [r7, #0]
    79a0:	4b79      	ldr	r3, [pc, #484]	; (7b88 <_tc_timer_init+0x280>)
    79a2:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    79a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79a8:	4976      	ldr	r1, [pc, #472]	; (7b84 <_tc_timer_init+0x27c>)
    79aa:	4613      	mov	r3, r2
    79ac:	009b      	lsls	r3, r3, #2
    79ae:	4413      	add	r3, r2
    79b0:	009b      	lsls	r3, r3, #2
    79b2:	440b      	add	r3, r1
    79b4:	3308      	adds	r3, #8
    79b6:	881b      	ldrh	r3, [r3, #0]
    79b8:	4619      	mov	r1, r3
    79ba:	6838      	ldr	r0, [r7, #0]
    79bc:	4b73      	ldr	r3, [pc, #460]	; (7b8c <_tc_timer_init+0x284>)
    79be:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    79c0:	2101      	movs	r1, #1
    79c2:	6838      	ldr	r0, [r7, #0]
    79c4:	4b72      	ldr	r3, [pc, #456]	; (7b90 <_tc_timer_init+0x288>)
    79c6:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    79c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79cc:	496d      	ldr	r1, [pc, #436]	; (7b84 <_tc_timer_init+0x27c>)
    79ce:	4613      	mov	r3, r2
    79d0:	009b      	lsls	r3, r3, #2
    79d2:	4413      	add	r3, r2
    79d4:	009b      	lsls	r3, r3, #2
    79d6:	440b      	add	r3, r1
    79d8:	3304      	adds	r3, #4
    79da:	681b      	ldr	r3, [r3, #0]
    79dc:	f003 030c 	and.w	r3, r3, #12
    79e0:	2b08      	cmp	r3, #8
    79e2:	d11e      	bne.n	7a22 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    79e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79e8:	4966      	ldr	r1, [pc, #408]	; (7b84 <_tc_timer_init+0x27c>)
    79ea:	4613      	mov	r3, r2
    79ec:	009b      	lsls	r3, r3, #2
    79ee:	4413      	add	r3, r2
    79f0:	009b      	lsls	r3, r3, #2
    79f2:	440b      	add	r3, r1
    79f4:	330c      	adds	r3, #12
    79f6:	681b      	ldr	r3, [r3, #0]
    79f8:	461a      	mov	r2, r3
    79fa:	2100      	movs	r1, #0
    79fc:	6838      	ldr	r0, [r7, #0]
    79fe:	4b65      	ldr	r3, [pc, #404]	; (7b94 <_tc_timer_init+0x28c>)
    7a00:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7a02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a06:	495f      	ldr	r1, [pc, #380]	; (7b84 <_tc_timer_init+0x27c>)
    7a08:	4613      	mov	r3, r2
    7a0a:	009b      	lsls	r3, r3, #2
    7a0c:	4413      	add	r3, r2
    7a0e:	009b      	lsls	r3, r3, #2
    7a10:	440b      	add	r3, r1
    7a12:	3310      	adds	r3, #16
    7a14:	681b      	ldr	r3, [r3, #0]
    7a16:	461a      	mov	r2, r3
    7a18:	2101      	movs	r1, #1
    7a1a:	6838      	ldr	r0, [r7, #0]
    7a1c:	4b5d      	ldr	r3, [pc, #372]	; (7b94 <_tc_timer_init+0x28c>)
    7a1e:	4798      	blx	r3
    7a20:	e06a      	b.n	7af8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7a22:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a26:	4957      	ldr	r1, [pc, #348]	; (7b84 <_tc_timer_init+0x27c>)
    7a28:	4613      	mov	r3, r2
    7a2a:	009b      	lsls	r3, r3, #2
    7a2c:	4413      	add	r3, r2
    7a2e:	009b      	lsls	r3, r3, #2
    7a30:	440b      	add	r3, r1
    7a32:	3304      	adds	r3, #4
    7a34:	681b      	ldr	r3, [r3, #0]
    7a36:	f003 030c 	and.w	r3, r3, #12
    7a3a:	2b00      	cmp	r3, #0
    7a3c:	d120      	bne.n	7a80 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7a3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a42:	4950      	ldr	r1, [pc, #320]	; (7b84 <_tc_timer_init+0x27c>)
    7a44:	4613      	mov	r3, r2
    7a46:	009b      	lsls	r3, r3, #2
    7a48:	4413      	add	r3, r2
    7a4a:	009b      	lsls	r3, r3, #2
    7a4c:	440b      	add	r3, r1
    7a4e:	330c      	adds	r3, #12
    7a50:	681b      	ldr	r3, [r3, #0]
    7a52:	b29b      	uxth	r3, r3
    7a54:	461a      	mov	r2, r3
    7a56:	2100      	movs	r1, #0
    7a58:	6838      	ldr	r0, [r7, #0]
    7a5a:	4b4f      	ldr	r3, [pc, #316]	; (7b98 <_tc_timer_init+0x290>)
    7a5c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7a5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a62:	4948      	ldr	r1, [pc, #288]	; (7b84 <_tc_timer_init+0x27c>)
    7a64:	4613      	mov	r3, r2
    7a66:	009b      	lsls	r3, r3, #2
    7a68:	4413      	add	r3, r2
    7a6a:	009b      	lsls	r3, r3, #2
    7a6c:	440b      	add	r3, r1
    7a6e:	3310      	adds	r3, #16
    7a70:	681b      	ldr	r3, [r3, #0]
    7a72:	b29b      	uxth	r3, r3
    7a74:	461a      	mov	r2, r3
    7a76:	2101      	movs	r1, #1
    7a78:	6838      	ldr	r0, [r7, #0]
    7a7a:	4b47      	ldr	r3, [pc, #284]	; (7b98 <_tc_timer_init+0x290>)
    7a7c:	4798      	blx	r3
    7a7e:	e03b      	b.n	7af8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7a80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a84:	493f      	ldr	r1, [pc, #252]	; (7b84 <_tc_timer_init+0x27c>)
    7a86:	4613      	mov	r3, r2
    7a88:	009b      	lsls	r3, r3, #2
    7a8a:	4413      	add	r3, r2
    7a8c:	009b      	lsls	r3, r3, #2
    7a8e:	440b      	add	r3, r1
    7a90:	3304      	adds	r3, #4
    7a92:	681b      	ldr	r3, [r3, #0]
    7a94:	f003 030c 	and.w	r3, r3, #12
    7a98:	2b04      	cmp	r3, #4
    7a9a:	d12d      	bne.n	7af8 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7a9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7aa0:	4938      	ldr	r1, [pc, #224]	; (7b84 <_tc_timer_init+0x27c>)
    7aa2:	4613      	mov	r3, r2
    7aa4:	009b      	lsls	r3, r3, #2
    7aa6:	4413      	add	r3, r2
    7aa8:	009b      	lsls	r3, r3, #2
    7aaa:	440b      	add	r3, r1
    7aac:	330c      	adds	r3, #12
    7aae:	681b      	ldr	r3, [r3, #0]
    7ab0:	b2db      	uxtb	r3, r3
    7ab2:	461a      	mov	r2, r3
    7ab4:	2100      	movs	r1, #0
    7ab6:	6838      	ldr	r0, [r7, #0]
    7ab8:	4b38      	ldr	r3, [pc, #224]	; (7b9c <_tc_timer_init+0x294>)
    7aba:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7abc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ac0:	4930      	ldr	r1, [pc, #192]	; (7b84 <_tc_timer_init+0x27c>)
    7ac2:	4613      	mov	r3, r2
    7ac4:	009b      	lsls	r3, r3, #2
    7ac6:	4413      	add	r3, r2
    7ac8:	009b      	lsls	r3, r3, #2
    7aca:	440b      	add	r3, r1
    7acc:	3310      	adds	r3, #16
    7ace:	681b      	ldr	r3, [r3, #0]
    7ad0:	b2db      	uxtb	r3, r3
    7ad2:	461a      	mov	r2, r3
    7ad4:	2101      	movs	r1, #1
    7ad6:	6838      	ldr	r0, [r7, #0]
    7ad8:	4b30      	ldr	r3, [pc, #192]	; (7b9c <_tc_timer_init+0x294>)
    7ada:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7adc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ae0:	4928      	ldr	r1, [pc, #160]	; (7b84 <_tc_timer_init+0x27c>)
    7ae2:	4613      	mov	r3, r2
    7ae4:	009b      	lsls	r3, r3, #2
    7ae6:	4413      	add	r3, r2
    7ae8:	009b      	lsls	r3, r3, #2
    7aea:	440b      	add	r3, r1
    7aec:	330b      	adds	r3, #11
    7aee:	781b      	ldrb	r3, [r3, #0]
    7af0:	4619      	mov	r1, r3
    7af2:	6838      	ldr	r0, [r7, #0]
    7af4:	4b2a      	ldr	r3, [pc, #168]	; (7ba0 <_tc_timer_init+0x298>)
    7af6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7af8:	6838      	ldr	r0, [r7, #0]
    7afa:	4b2a      	ldr	r3, [pc, #168]	; (7ba4 <_tc_timer_init+0x29c>)
    7afc:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7afe:	6879      	ldr	r1, [r7, #4]
    7b00:	6838      	ldr	r0, [r7, #0]
    7b02:	4b29      	ldr	r3, [pc, #164]	; (7ba8 <_tc_timer_init+0x2a0>)
    7b04:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7b06:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b0a:	491e      	ldr	r1, [pc, #120]	; (7b84 <_tc_timer_init+0x27c>)
    7b0c:	4613      	mov	r3, r2
    7b0e:	009b      	lsls	r3, r3, #2
    7b10:	4413      	add	r3, r2
    7b12:	009b      	lsls	r3, r3, #2
    7b14:	440b      	add	r3, r1
    7b16:	3302      	adds	r3, #2
    7b18:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b1c:	4618      	mov	r0, r3
    7b1e:	4b23      	ldr	r3, [pc, #140]	; (7bac <_tc_timer_init+0x2a4>)
    7b20:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7b22:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b26:	4917      	ldr	r1, [pc, #92]	; (7b84 <_tc_timer_init+0x27c>)
    7b28:	4613      	mov	r3, r2
    7b2a:	009b      	lsls	r3, r3, #2
    7b2c:	4413      	add	r3, r2
    7b2e:	009b      	lsls	r3, r3, #2
    7b30:	440b      	add	r3, r1
    7b32:	3302      	adds	r3, #2
    7b34:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b38:	4618      	mov	r0, r3
    7b3a:	4b1d      	ldr	r3, [pc, #116]	; (7bb0 <_tc_timer_init+0x2a8>)
    7b3c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7b3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b42:	4910      	ldr	r1, [pc, #64]	; (7b84 <_tc_timer_init+0x27c>)
    7b44:	4613      	mov	r3, r2
    7b46:	009b      	lsls	r3, r3, #2
    7b48:	4413      	add	r3, r2
    7b4a:	009b      	lsls	r3, r3, #2
    7b4c:	440b      	add	r3, r1
    7b4e:	3302      	adds	r3, #2
    7b50:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b54:	4618      	mov	r0, r3
    7b56:	4b17      	ldr	r3, [pc, #92]	; (7bb4 <_tc_timer_init+0x2ac>)
    7b58:	4798      	blx	r3

	return ERR_NONE;
    7b5a:	2300      	movs	r3, #0
}
    7b5c:	4618      	mov	r0, r3
    7b5e:	3710      	adds	r7, #16
    7b60:	46bd      	mov	sp, r7
    7b62:	bd80      	pop	{r7, pc}
    7b64:	00008159 	.word	0x00008159
    7b68:	00010adc 	.word	0x00010adc
    7b6c:	000038e1 	.word	0x000038e1
    7b70:	0000757d 	.word	0x0000757d
    7b74:	0000771d 	.word	0x0000771d
    7b78:	000076cd 	.word	0x000076cd
    7b7c:	00007559 	.word	0x00007559
    7b80:	0000774d 	.word	0x0000774d
    7b84:	20000110 	.word	0x20000110
    7b88:	000077ad 	.word	0x000077ad
    7b8c:	00007771 	.word	0x00007771
    7b90:	0000778f 	.word	0x0000778f
    7b94:	000078ad 	.word	0x000078ad
    7b98:	00007849 	.word	0x00007849
    7b9c:	00007819 	.word	0x00007819
    7ba0:	000077cd 	.word	0x000077cd
    7ba4:	00007601 	.word	0x00007601
    7ba8:	000081c1 	.word	0x000081c1
    7bac:	000074d9 	.word	0x000074d9
    7bb0:	0000751d 	.word	0x0000751d
    7bb4:	0000749d 	.word	0x0000749d

00007bb8 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7bb8:	b580      	push	{r7, lr}
    7bba:	b084      	sub	sp, #16
    7bbc:	af00      	add	r7, sp, #0
    7bbe:	6078      	str	r0, [r7, #4]
    7bc0:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7bc2:	6838      	ldr	r0, [r7, #0]
    7bc4:	4b73      	ldr	r3, [pc, #460]	; (7d94 <_pwm_init+0x1dc>)
    7bc6:	4798      	blx	r3
    7bc8:	4603      	mov	r3, r0
    7bca:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	683a      	ldr	r2, [r7, #0]
    7bd0:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7bd2:	2101      	movs	r1, #1
    7bd4:	6838      	ldr	r0, [r7, #0]
    7bd6:	4b70      	ldr	r3, [pc, #448]	; (7d98 <_pwm_init+0x1e0>)
    7bd8:	4798      	blx	r3
    7bda:	4603      	mov	r3, r0
    7bdc:	f083 0301 	eor.w	r3, r3, #1
    7be0:	b2db      	uxtb	r3, r3
    7be2:	2b00      	cmp	r3, #0
    7be4:	d011      	beq.n	7c0a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7be6:	2102      	movs	r1, #2
    7be8:	6838      	ldr	r0, [r7, #0]
    7bea:	4b6c      	ldr	r3, [pc, #432]	; (7d9c <_pwm_init+0x1e4>)
    7bec:	4798      	blx	r3
    7bee:	4603      	mov	r3, r0
    7bf0:	2b00      	cmp	r3, #0
    7bf2:	d006      	beq.n	7c02 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7bf4:	6838      	ldr	r0, [r7, #0]
    7bf6:	4b6a      	ldr	r3, [pc, #424]	; (7da0 <_pwm_init+0x1e8>)
    7bf8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7bfa:	2102      	movs	r1, #2
    7bfc:	6838      	ldr	r0, [r7, #0]
    7bfe:	4b69      	ldr	r3, [pc, #420]	; (7da4 <_pwm_init+0x1ec>)
    7c00:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7c02:	2101      	movs	r1, #1
    7c04:	6838      	ldr	r0, [r7, #0]
    7c06:	4b68      	ldr	r3, [pc, #416]	; (7da8 <_pwm_init+0x1f0>)
    7c08:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7c0a:	2101      	movs	r1, #1
    7c0c:	6838      	ldr	r0, [r7, #0]
    7c0e:	4b65      	ldr	r3, [pc, #404]	; (7da4 <_pwm_init+0x1ec>)
    7c10:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7c12:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c16:	4965      	ldr	r1, [pc, #404]	; (7dac <_pwm_init+0x1f4>)
    7c18:	4613      	mov	r3, r2
    7c1a:	009b      	lsls	r3, r3, #2
    7c1c:	4413      	add	r3, r2
    7c1e:	009b      	lsls	r3, r3, #2
    7c20:	440b      	add	r3, r1
    7c22:	3304      	adds	r3, #4
    7c24:	681b      	ldr	r3, [r3, #0]
    7c26:	4619      	mov	r1, r3
    7c28:	6838      	ldr	r0, [r7, #0]
    7c2a:	4b5f      	ldr	r3, [pc, #380]	; (7da8 <_pwm_init+0x1f0>)
    7c2c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7c2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c32:	495e      	ldr	r1, [pc, #376]	; (7dac <_pwm_init+0x1f4>)
    7c34:	4613      	mov	r3, r2
    7c36:	009b      	lsls	r3, r3, #2
    7c38:	4413      	add	r3, r2
    7c3a:	009b      	lsls	r3, r3, #2
    7c3c:	440b      	add	r3, r1
    7c3e:	330a      	adds	r3, #10
    7c40:	781b      	ldrb	r3, [r3, #0]
    7c42:	4619      	mov	r1, r3
    7c44:	6838      	ldr	r0, [r7, #0]
    7c46:	4b5a      	ldr	r3, [pc, #360]	; (7db0 <_pwm_init+0x1f8>)
    7c48:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7c4a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c4e:	4957      	ldr	r1, [pc, #348]	; (7dac <_pwm_init+0x1f4>)
    7c50:	4613      	mov	r3, r2
    7c52:	009b      	lsls	r3, r3, #2
    7c54:	4413      	add	r3, r2
    7c56:	009b      	lsls	r3, r3, #2
    7c58:	440b      	add	r3, r1
    7c5a:	3308      	adds	r3, #8
    7c5c:	881b      	ldrh	r3, [r3, #0]
    7c5e:	4619      	mov	r1, r3
    7c60:	6838      	ldr	r0, [r7, #0]
    7c62:	4b54      	ldr	r3, [pc, #336]	; (7db4 <_pwm_init+0x1fc>)
    7c64:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7c66:	2103      	movs	r1, #3
    7c68:	6838      	ldr	r0, [r7, #0]
    7c6a:	4b53      	ldr	r3, [pc, #332]	; (7db8 <_pwm_init+0x200>)
    7c6c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7c6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c72:	494e      	ldr	r1, [pc, #312]	; (7dac <_pwm_init+0x1f4>)
    7c74:	4613      	mov	r3, r2
    7c76:	009b      	lsls	r3, r3, #2
    7c78:	4413      	add	r3, r2
    7c7a:	009b      	lsls	r3, r3, #2
    7c7c:	440b      	add	r3, r1
    7c7e:	3304      	adds	r3, #4
    7c80:	681b      	ldr	r3, [r3, #0]
    7c82:	f003 030c 	and.w	r3, r3, #12
    7c86:	2b08      	cmp	r3, #8
    7c88:	d11e      	bne.n	7cc8 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7c8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c8e:	4947      	ldr	r1, [pc, #284]	; (7dac <_pwm_init+0x1f4>)
    7c90:	4613      	mov	r3, r2
    7c92:	009b      	lsls	r3, r3, #2
    7c94:	4413      	add	r3, r2
    7c96:	009b      	lsls	r3, r3, #2
    7c98:	440b      	add	r3, r1
    7c9a:	330c      	adds	r3, #12
    7c9c:	681b      	ldr	r3, [r3, #0]
    7c9e:	461a      	mov	r2, r3
    7ca0:	2100      	movs	r1, #0
    7ca2:	6838      	ldr	r0, [r7, #0]
    7ca4:	4b45      	ldr	r3, [pc, #276]	; (7dbc <_pwm_init+0x204>)
    7ca6:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7ca8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cac:	493f      	ldr	r1, [pc, #252]	; (7dac <_pwm_init+0x1f4>)
    7cae:	4613      	mov	r3, r2
    7cb0:	009b      	lsls	r3, r3, #2
    7cb2:	4413      	add	r3, r2
    7cb4:	009b      	lsls	r3, r3, #2
    7cb6:	440b      	add	r3, r1
    7cb8:	3310      	adds	r3, #16
    7cba:	681b      	ldr	r3, [r3, #0]
    7cbc:	461a      	mov	r2, r3
    7cbe:	2101      	movs	r1, #1
    7cc0:	6838      	ldr	r0, [r7, #0]
    7cc2:	4b3e      	ldr	r3, [pc, #248]	; (7dbc <_pwm_init+0x204>)
    7cc4:	4798      	blx	r3
    7cc6:	e031      	b.n	7d2c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7cc8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ccc:	4937      	ldr	r1, [pc, #220]	; (7dac <_pwm_init+0x1f4>)
    7cce:	4613      	mov	r3, r2
    7cd0:	009b      	lsls	r3, r3, #2
    7cd2:	4413      	add	r3, r2
    7cd4:	009b      	lsls	r3, r3, #2
    7cd6:	440b      	add	r3, r1
    7cd8:	3304      	adds	r3, #4
    7cda:	681b      	ldr	r3, [r3, #0]
    7cdc:	f003 030c 	and.w	r3, r3, #12
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d120      	bne.n	7d26 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7ce4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ce8:	4930      	ldr	r1, [pc, #192]	; (7dac <_pwm_init+0x1f4>)
    7cea:	4613      	mov	r3, r2
    7cec:	009b      	lsls	r3, r3, #2
    7cee:	4413      	add	r3, r2
    7cf0:	009b      	lsls	r3, r3, #2
    7cf2:	440b      	add	r3, r1
    7cf4:	330c      	adds	r3, #12
    7cf6:	681b      	ldr	r3, [r3, #0]
    7cf8:	b29b      	uxth	r3, r3
    7cfa:	461a      	mov	r2, r3
    7cfc:	2100      	movs	r1, #0
    7cfe:	6838      	ldr	r0, [r7, #0]
    7d00:	4b2f      	ldr	r3, [pc, #188]	; (7dc0 <_pwm_init+0x208>)
    7d02:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7d04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d08:	4928      	ldr	r1, [pc, #160]	; (7dac <_pwm_init+0x1f4>)
    7d0a:	4613      	mov	r3, r2
    7d0c:	009b      	lsls	r3, r3, #2
    7d0e:	4413      	add	r3, r2
    7d10:	009b      	lsls	r3, r3, #2
    7d12:	440b      	add	r3, r1
    7d14:	3310      	adds	r3, #16
    7d16:	681b      	ldr	r3, [r3, #0]
    7d18:	b29b      	uxth	r3, r3
    7d1a:	461a      	mov	r2, r3
    7d1c:	2101      	movs	r1, #1
    7d1e:	6838      	ldr	r0, [r7, #0]
    7d20:	4b27      	ldr	r3, [pc, #156]	; (7dc0 <_pwm_init+0x208>)
    7d22:	4798      	blx	r3
    7d24:	e002      	b.n	7d2c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7d26:	f04f 33ff 	mov.w	r3, #4294967295
    7d2a:	e02e      	b.n	7d8a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7d2c:	6879      	ldr	r1, [r7, #4]
    7d2e:	6838      	ldr	r0, [r7, #0]
    7d30:	4b24      	ldr	r3, [pc, #144]	; (7dc4 <_pwm_init+0x20c>)
    7d32:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7d34:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d38:	491c      	ldr	r1, [pc, #112]	; (7dac <_pwm_init+0x1f4>)
    7d3a:	4613      	mov	r3, r2
    7d3c:	009b      	lsls	r3, r3, #2
    7d3e:	4413      	add	r3, r2
    7d40:	009b      	lsls	r3, r3, #2
    7d42:	440b      	add	r3, r1
    7d44:	3302      	adds	r3, #2
    7d46:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d4a:	4618      	mov	r0, r3
    7d4c:	4b1e      	ldr	r3, [pc, #120]	; (7dc8 <_pwm_init+0x210>)
    7d4e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7d50:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d54:	4915      	ldr	r1, [pc, #84]	; (7dac <_pwm_init+0x1f4>)
    7d56:	4613      	mov	r3, r2
    7d58:	009b      	lsls	r3, r3, #2
    7d5a:	4413      	add	r3, r2
    7d5c:	009b      	lsls	r3, r3, #2
    7d5e:	440b      	add	r3, r1
    7d60:	3302      	adds	r3, #2
    7d62:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d66:	4618      	mov	r0, r3
    7d68:	4b18      	ldr	r3, [pc, #96]	; (7dcc <_pwm_init+0x214>)
    7d6a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7d6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d70:	490e      	ldr	r1, [pc, #56]	; (7dac <_pwm_init+0x1f4>)
    7d72:	4613      	mov	r3, r2
    7d74:	009b      	lsls	r3, r3, #2
    7d76:	4413      	add	r3, r2
    7d78:	009b      	lsls	r3, r3, #2
    7d7a:	440b      	add	r3, r1
    7d7c:	3302      	adds	r3, #2
    7d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d82:	4618      	mov	r0, r3
    7d84:	4b12      	ldr	r3, [pc, #72]	; (7dd0 <_pwm_init+0x218>)
    7d86:	4798      	blx	r3

	return 0;
    7d88:	2300      	movs	r3, #0
}
    7d8a:	4618      	mov	r0, r3
    7d8c:	3710      	adds	r7, #16
    7d8e:	46bd      	mov	sp, r7
    7d90:	bd80      	pop	{r7, pc}
    7d92:	bf00      	nop
    7d94:	00008159 	.word	0x00008159
    7d98:	0000757d 	.word	0x0000757d
    7d9c:	0000771d 	.word	0x0000771d
    7da0:	000076cd 	.word	0x000076cd
    7da4:	00007559 	.word	0x00007559
    7da8:	0000774d 	.word	0x0000774d
    7dac:	20000110 	.word	0x20000110
    7db0:	000077ad 	.word	0x000077ad
    7db4:	00007771 	.word	0x00007771
    7db8:	0000778f 	.word	0x0000778f
    7dbc:	000078ad 	.word	0x000078ad
    7dc0:	00007849 	.word	0x00007849
    7dc4:	000081c1 	.word	0x000081c1
    7dc8:	000074d9 	.word	0x000074d9
    7dcc:	0000751d 	.word	0x0000751d
    7dd0:	0000749d 	.word	0x0000749d

00007dd4 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    7dd4:	b580      	push	{r7, lr}
    7dd6:	b084      	sub	sp, #16
    7dd8:	af00      	add	r7, sp, #0
    7dda:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ddc:	687b      	ldr	r3, [r7, #4]
    7dde:	68db      	ldr	r3, [r3, #12]
    7de0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7de2:	68f8      	ldr	r0, [r7, #12]
    7de4:	4b10      	ldr	r3, [pc, #64]	; (7e28 <_tc_timer_deinit+0x54>)
    7de6:	4798      	blx	r3
    7de8:	4603      	mov	r3, r0
    7dea:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7dec:	22f9      	movs	r2, #249	; 0xf9
    7dee:	490f      	ldr	r1, [pc, #60]	; (7e2c <_tc_timer_deinit+0x58>)
    7df0:	2001      	movs	r0, #1
    7df2:	4b0f      	ldr	r3, [pc, #60]	; (7e30 <_tc_timer_deinit+0x5c>)
    7df4:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    7df6:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7dfa:	490e      	ldr	r1, [pc, #56]	; (7e34 <_tc_timer_deinit+0x60>)
    7dfc:	4613      	mov	r3, r2
    7dfe:	009b      	lsls	r3, r3, #2
    7e00:	4413      	add	r3, r2
    7e02:	009b      	lsls	r3, r3, #2
    7e04:	440b      	add	r3, r1
    7e06:	3302      	adds	r3, #2
    7e08:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e0c:	4618      	mov	r0, r3
    7e0e:	4b0a      	ldr	r3, [pc, #40]	; (7e38 <_tc_timer_deinit+0x64>)
    7e10:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7e12:	68f8      	ldr	r0, [r7, #12]
    7e14:	4b09      	ldr	r3, [pc, #36]	; (7e3c <_tc_timer_deinit+0x68>)
    7e16:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7e18:	68f8      	ldr	r0, [r7, #12]
    7e1a:	4b09      	ldr	r3, [pc, #36]	; (7e40 <_tc_timer_deinit+0x6c>)
    7e1c:	4798      	blx	r3
}
    7e1e:	bf00      	nop
    7e20:	3710      	adds	r7, #16
    7e22:	46bd      	mov	sp, r7
    7e24:	bd80      	pop	{r7, pc}
    7e26:	bf00      	nop
    7e28:	00008159 	.word	0x00008159
    7e2c:	00010adc 	.word	0x00010adc
    7e30:	000038e1 	.word	0x000038e1
    7e34:	20000110 	.word	0x20000110
    7e38:	000074d9 	.word	0x000074d9
    7e3c:	000076cd 	.word	0x000076cd
    7e40:	00007645 	.word	0x00007645

00007e44 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7e44:	b580      	push	{r7, lr}
    7e46:	b082      	sub	sp, #8
    7e48:	af00      	add	r7, sp, #0
    7e4a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7e4c:	687b      	ldr	r3, [r7, #4]
    7e4e:	68db      	ldr	r3, [r3, #12]
    7e50:	4618      	mov	r0, r3
    7e52:	4b03      	ldr	r3, [pc, #12]	; (7e60 <_tc_timer_start+0x1c>)
    7e54:	4798      	blx	r3
}
    7e56:	bf00      	nop
    7e58:	3708      	adds	r7, #8
    7e5a:	46bd      	mov	sp, r7
    7e5c:	bd80      	pop	{r7, pc}
    7e5e:	bf00      	nop
    7e60:	0000766d 	.word	0x0000766d

00007e64 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7e64:	b580      	push	{r7, lr}
    7e66:	b082      	sub	sp, #8
    7e68:	af00      	add	r7, sp, #0
    7e6a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7e6c:	687b      	ldr	r3, [r7, #4]
    7e6e:	68db      	ldr	r3, [r3, #12]
    7e70:	4618      	mov	r0, r3
    7e72:	4b03      	ldr	r3, [pc, #12]	; (7e80 <_tc_timer_stop+0x1c>)
    7e74:	4798      	blx	r3
}
    7e76:	bf00      	nop
    7e78:	3708      	adds	r7, #8
    7e7a:	46bd      	mov	sp, r7
    7e7c:	bd80      	pop	{r7, pc}
    7e7e:	bf00      	nop
    7e80:	000076cd 	.word	0x000076cd

00007e84 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7e84:	b580      	push	{r7, lr}
    7e86:	b084      	sub	sp, #16
    7e88:	af00      	add	r7, sp, #0
    7e8a:	6078      	str	r0, [r7, #4]
    7e8c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	68db      	ldr	r3, [r3, #12]
    7e92:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7e94:	68f8      	ldr	r0, [r7, #12]
    7e96:	4b14      	ldr	r3, [pc, #80]	; (7ee8 <_tc_timer_set_period+0x64>)
    7e98:	4798      	blx	r3
    7e9a:	4603      	mov	r3, r0
    7e9c:	2b02      	cmp	r3, #2
    7e9e:	d105      	bne.n	7eac <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7ea0:	683a      	ldr	r2, [r7, #0]
    7ea2:	2100      	movs	r1, #0
    7ea4:	68f8      	ldr	r0, [r7, #12]
    7ea6:	4b11      	ldr	r3, [pc, #68]	; (7eec <_tc_timer_set_period+0x68>)
    7ea8:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    7eaa:	e019      	b.n	7ee0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7eac:	68f8      	ldr	r0, [r7, #12]
    7eae:	4b0e      	ldr	r3, [pc, #56]	; (7ee8 <_tc_timer_set_period+0x64>)
    7eb0:	4798      	blx	r3
    7eb2:	4603      	mov	r3, r0
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d107      	bne.n	7ec8 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7eb8:	683b      	ldr	r3, [r7, #0]
    7eba:	b29b      	uxth	r3, r3
    7ebc:	461a      	mov	r2, r3
    7ebe:	2100      	movs	r1, #0
    7ec0:	68f8      	ldr	r0, [r7, #12]
    7ec2:	4b0b      	ldr	r3, [pc, #44]	; (7ef0 <_tc_timer_set_period+0x6c>)
    7ec4:	4798      	blx	r3
}
    7ec6:	e00b      	b.n	7ee0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7ec8:	68f8      	ldr	r0, [r7, #12]
    7eca:	4b07      	ldr	r3, [pc, #28]	; (7ee8 <_tc_timer_set_period+0x64>)
    7ecc:	4798      	blx	r3
    7ece:	4603      	mov	r3, r0
    7ed0:	2b01      	cmp	r3, #1
    7ed2:	d105      	bne.n	7ee0 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7ed4:	683b      	ldr	r3, [r7, #0]
    7ed6:	b2db      	uxtb	r3, r3
    7ed8:	4619      	mov	r1, r3
    7eda:	68f8      	ldr	r0, [r7, #12]
    7edc:	4b05      	ldr	r3, [pc, #20]	; (7ef4 <_tc_timer_set_period+0x70>)
    7ede:	4798      	blx	r3
}
    7ee0:	bf00      	nop
    7ee2:	3710      	adds	r7, #16
    7ee4:	46bd      	mov	sp, r7
    7ee6:	bd80      	pop	{r7, pc}
    7ee8:	000076f5 	.word	0x000076f5
    7eec:	000078ad 	.word	0x000078ad
    7ef0:	00007849 	.word	0x00007849
    7ef4:	000077cd 	.word	0x000077cd

00007ef8 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b084      	sub	sp, #16
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	68db      	ldr	r3, [r3, #12]
    7f04:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f06:	68f8      	ldr	r0, [r7, #12]
    7f08:	4b13      	ldr	r3, [pc, #76]	; (7f58 <_tc_timer_get_period+0x60>)
    7f0a:	4798      	blx	r3
    7f0c:	4603      	mov	r3, r0
    7f0e:	2b02      	cmp	r3, #2
    7f10:	d105      	bne.n	7f1e <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7f12:	2100      	movs	r1, #0
    7f14:	68f8      	ldr	r0, [r7, #12]
    7f16:	4b11      	ldr	r3, [pc, #68]	; (7f5c <_tc_timer_get_period+0x64>)
    7f18:	4798      	blx	r3
    7f1a:	4603      	mov	r3, r0
    7f1c:	e017      	b.n	7f4e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f1e:	68f8      	ldr	r0, [r7, #12]
    7f20:	4b0d      	ldr	r3, [pc, #52]	; (7f58 <_tc_timer_get_period+0x60>)
    7f22:	4798      	blx	r3
    7f24:	4603      	mov	r3, r0
    7f26:	2b00      	cmp	r3, #0
    7f28:	d105      	bne.n	7f36 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    7f2a:	2100      	movs	r1, #0
    7f2c:	68f8      	ldr	r0, [r7, #12]
    7f2e:	4b0c      	ldr	r3, [pc, #48]	; (7f60 <_tc_timer_get_period+0x68>)
    7f30:	4798      	blx	r3
    7f32:	4603      	mov	r3, r0
    7f34:	e00b      	b.n	7f4e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f36:	68f8      	ldr	r0, [r7, #12]
    7f38:	4b07      	ldr	r3, [pc, #28]	; (7f58 <_tc_timer_get_period+0x60>)
    7f3a:	4798      	blx	r3
    7f3c:	4603      	mov	r3, r0
    7f3e:	2b01      	cmp	r3, #1
    7f40:	d104      	bne.n	7f4c <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7f42:	68f8      	ldr	r0, [r7, #12]
    7f44:	4b07      	ldr	r3, [pc, #28]	; (7f64 <_tc_timer_get_period+0x6c>)
    7f46:	4798      	blx	r3
    7f48:	4603      	mov	r3, r0
    7f4a:	e000      	b.n	7f4e <_tc_timer_get_period+0x56>
	}

	return 0;
    7f4c:	2300      	movs	r3, #0
}
    7f4e:	4618      	mov	r0, r3
    7f50:	3710      	adds	r7, #16
    7f52:	46bd      	mov	sp, r7
    7f54:	bd80      	pop	{r7, pc}
    7f56:	bf00      	nop
    7f58:	000076f5 	.word	0x000076f5
    7f5c:	000078dd 	.word	0x000078dd
    7f60:	0000787d 	.word	0x0000787d
    7f64:	000077f5 	.word	0x000077f5

00007f68 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    7f68:	b580      	push	{r7, lr}
    7f6a:	b082      	sub	sp, #8
    7f6c:	af00      	add	r7, sp, #0
    7f6e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7f70:	687b      	ldr	r3, [r7, #4]
    7f72:	68db      	ldr	r3, [r3, #12]
    7f74:	4618      	mov	r0, r3
    7f76:	4b03      	ldr	r3, [pc, #12]	; (7f84 <_tc_timer_is_started+0x1c>)
    7f78:	4798      	blx	r3
    7f7a:	4603      	mov	r3, r0
}
    7f7c:	4618      	mov	r0, r3
    7f7e:	3708      	adds	r7, #8
    7f80:	46bd      	mov	sp, r7
    7f82:	bd80      	pop	{r7, pc}
    7f84:	00007695 	.word	0x00007695

00007f88 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7f88:	b480      	push	{r7}
    7f8a:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    7f8c:	4b02      	ldr	r3, [pc, #8]	; (7f98 <_tc_get_timer+0x10>)
}
    7f8e:	4618      	mov	r0, r3
    7f90:	46bd      	mov	sp, r7
    7f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f96:	4770      	bx	lr
    7f98:	20000188 	.word	0x20000188

00007f9c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7f9c:	b480      	push	{r7}
    7f9e:	af00      	add	r7, sp, #0
	return NULL;
    7fa0:	2300      	movs	r3, #0
}
    7fa2:	4618      	mov	r0, r3
    7fa4:	46bd      	mov	sp, r7
    7fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7faa:	4770      	bx	lr

00007fac <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    7fac:	b580      	push	{r7, lr}
    7fae:	b084      	sub	sp, #16
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7fb4:	687b      	ldr	r3, [r7, #4]
    7fb6:	68db      	ldr	r3, [r3, #12]
    7fb8:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7fba:	68f8      	ldr	r0, [r7, #12]
    7fbc:	4b0e      	ldr	r3, [pc, #56]	; (7ff8 <_tc_timer_set_irq+0x4c>)
    7fbe:	4798      	blx	r3
    7fc0:	4603      	mov	r3, r0
    7fc2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7fc4:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    7fc8:	490c      	ldr	r1, [pc, #48]	; (7ffc <_tc_timer_set_irq+0x50>)
    7fca:	2001      	movs	r0, #1
    7fcc:	4b0c      	ldr	r3, [pc, #48]	; (8000 <_tc_timer_set_irq+0x54>)
    7fce:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7fd0:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7fd4:	490b      	ldr	r1, [pc, #44]	; (8004 <_tc_timer_set_irq+0x58>)
    7fd6:	4613      	mov	r3, r2
    7fd8:	009b      	lsls	r3, r3, #2
    7fda:	4413      	add	r3, r2
    7fdc:	009b      	lsls	r3, r3, #2
    7fde:	440b      	add	r3, r1
    7fe0:	3302      	adds	r3, #2
    7fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
    7fe6:	b2db      	uxtb	r3, r3
    7fe8:	4618      	mov	r0, r3
    7fea:	4b07      	ldr	r3, [pc, #28]	; (8008 <_tc_timer_set_irq+0x5c>)
    7fec:	4798      	blx	r3
}
    7fee:	bf00      	nop
    7ff0:	3710      	adds	r7, #16
    7ff2:	46bd      	mov	sp, r7
    7ff4:	bd80      	pop	{r7, pc}
    7ff6:	bf00      	nop
    7ff8:	00008159 	.word	0x00008159
    7ffc:	00010adc 	.word	0x00010adc
    8000:	000038e1 	.word	0x000038e1
    8004:	20000110 	.word	0x20000110
    8008:	0000b1b9 	.word	0x0000b1b9

0000800c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    800c:	b580      	push	{r7, lr}
    800e:	b084      	sub	sp, #16
    8010:	af00      	add	r7, sp, #0
    8012:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8014:	687b      	ldr	r3, [r7, #4]
    8016:	68db      	ldr	r3, [r3, #12]
    8018:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    801a:	68f8      	ldr	r0, [r7, #12]
    801c:	4b07      	ldr	r3, [pc, #28]	; (803c <tc_interrupt_handler+0x30>)
    801e:	4798      	blx	r3
    8020:	4603      	mov	r3, r0
    8022:	2b00      	cmp	r3, #0
    8024:	d006      	beq.n	8034 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8026:	68f8      	ldr	r0, [r7, #12]
    8028:	4b05      	ldr	r3, [pc, #20]	; (8040 <tc_interrupt_handler+0x34>)
    802a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    802c:	687b      	ldr	r3, [r7, #4]
    802e:	681b      	ldr	r3, [r3, #0]
    8030:	6878      	ldr	r0, [r7, #4]
    8032:	4798      	blx	r3
	}
}
    8034:	bf00      	nop
    8036:	3710      	adds	r7, #16
    8038:	46bd      	mov	sp, r7
    803a:	bd80      	pop	{r7, pc}
    803c:	000075a5 	.word	0x000075a5
    8040:	000075cd 	.word	0x000075cd

00008044 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8044:	b580      	push	{r7, lr}
    8046:	b084      	sub	sp, #16
    8048:	af00      	add	r7, sp, #0
    804a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    804c:	687b      	ldr	r3, [r7, #4]
    804e:	691b      	ldr	r3, [r3, #16]
    8050:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8052:	68f8      	ldr	r0, [r7, #12]
    8054:	4b12      	ldr	r3, [pc, #72]	; (80a0 <tc_pwm_interrupt_handler+0x5c>)
    8056:	4798      	blx	r3
    8058:	4603      	mov	r3, r0
    805a:	2b00      	cmp	r3, #0
    805c:	d00a      	beq.n	8074 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    805e:	68f8      	ldr	r0, [r7, #12]
    8060:	4b10      	ldr	r3, [pc, #64]	; (80a4 <tc_pwm_interrupt_handler+0x60>)
    8062:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8064:	687b      	ldr	r3, [r7, #4]
    8066:	681b      	ldr	r3, [r3, #0]
    8068:	2b00      	cmp	r3, #0
    806a:	d003      	beq.n	8074 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    806c:	687b      	ldr	r3, [r7, #4]
    806e:	681b      	ldr	r3, [r3, #0]
    8070:	6878      	ldr	r0, [r7, #4]
    8072:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8074:	68f8      	ldr	r0, [r7, #12]
    8076:	4b0c      	ldr	r3, [pc, #48]	; (80a8 <tc_pwm_interrupt_handler+0x64>)
    8078:	4798      	blx	r3
    807a:	4603      	mov	r3, r0
    807c:	2b00      	cmp	r3, #0
    807e:	d00a      	beq.n	8096 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8080:	68f8      	ldr	r0, [r7, #12]
    8082:	4b0a      	ldr	r3, [pc, #40]	; (80ac <tc_pwm_interrupt_handler+0x68>)
    8084:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8086:	687b      	ldr	r3, [r7, #4]
    8088:	685b      	ldr	r3, [r3, #4]
    808a:	2b00      	cmp	r3, #0
    808c:	d003      	beq.n	8096 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    808e:	687b      	ldr	r3, [r7, #4]
    8090:	685b      	ldr	r3, [r3, #4]
    8092:	6878      	ldr	r0, [r7, #4]
    8094:	4798      	blx	r3
		}
	}
}
    8096:	bf00      	nop
    8098:	3710      	adds	r7, #16
    809a:	46bd      	mov	sp, r7
    809c:	bd80      	pop	{r7, pc}
    809e:	bf00      	nop
    80a0:	000075a5 	.word	0x000075a5
    80a4:	000075cd 	.word	0x000075cd
    80a8:	0000761b 	.word	0x0000761b
    80ac:	000075e7 	.word	0x000075e7

000080b0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    80b0:	b580      	push	{r7, lr}
    80b2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    80b4:	4b03      	ldr	r3, [pc, #12]	; (80c4 <TC0_Handler+0x14>)
    80b6:	681b      	ldr	r3, [r3, #0]
    80b8:	4618      	mov	r0, r3
    80ba:	4b03      	ldr	r3, [pc, #12]	; (80c8 <TC0_Handler+0x18>)
    80bc:	4798      	blx	r3
}
    80be:	bf00      	nop
    80c0:	bd80      	pop	{r7, pc}
    80c2:	bf00      	nop
    80c4:	20000c14 	.word	0x20000c14
    80c8:	0000800d 	.word	0x0000800d

000080cc <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    80cc:	b580      	push	{r7, lr}
    80ce:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    80d0:	4b03      	ldr	r3, [pc, #12]	; (80e0 <TC2_Handler+0x14>)
    80d2:	681b      	ldr	r3, [r3, #0]
    80d4:	4618      	mov	r0, r3
    80d6:	4b03      	ldr	r3, [pc, #12]	; (80e4 <TC2_Handler+0x18>)
    80d8:	4798      	blx	r3
}
    80da:	bf00      	nop
    80dc:	bd80      	pop	{r7, pc}
    80de:	bf00      	nop
    80e0:	20000c18 	.word	0x20000c18
    80e4:	0000800d 	.word	0x0000800d

000080e8 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    80e8:	b580      	push	{r7, lr}
    80ea:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    80ec:	4b03      	ldr	r3, [pc, #12]	; (80fc <TC4_Handler+0x14>)
    80ee:	681b      	ldr	r3, [r3, #0]
    80f0:	4618      	mov	r0, r3
    80f2:	4b03      	ldr	r3, [pc, #12]	; (8100 <TC4_Handler+0x18>)
    80f4:	4798      	blx	r3
}
    80f6:	bf00      	nop
    80f8:	bd80      	pop	{r7, pc}
    80fa:	bf00      	nop
    80fc:	20000c1c 	.word	0x20000c1c
    8100:	0000800d 	.word	0x0000800d

00008104 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8104:	b580      	push	{r7, lr}
    8106:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8108:	4b03      	ldr	r3, [pc, #12]	; (8118 <TC5_Handler+0x14>)
    810a:	681b      	ldr	r3, [r3, #0]
    810c:	4618      	mov	r0, r3
    810e:	4b03      	ldr	r3, [pc, #12]	; (811c <TC5_Handler+0x18>)
    8110:	4798      	blx	r3
}
    8112:	bf00      	nop
    8114:	bd80      	pop	{r7, pc}
    8116:	bf00      	nop
    8118:	20000c20 	.word	0x20000c20
    811c:	0000800d 	.word	0x0000800d

00008120 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8120:	b580      	push	{r7, lr}
    8122:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8124:	4b03      	ldr	r3, [pc, #12]	; (8134 <TC6_Handler+0x14>)
    8126:	681b      	ldr	r3, [r3, #0]
    8128:	4618      	mov	r0, r3
    812a:	4b03      	ldr	r3, [pc, #12]	; (8138 <TC6_Handler+0x18>)
    812c:	4798      	blx	r3
}
    812e:	bf00      	nop
    8130:	bd80      	pop	{r7, pc}
    8132:	bf00      	nop
    8134:	20000c24 	.word	0x20000c24
    8138:	0000800d 	.word	0x0000800d

0000813c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    813c:	b580      	push	{r7, lr}
    813e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8140:	4b03      	ldr	r3, [pc, #12]	; (8150 <TC7_Handler+0x14>)
    8142:	681b      	ldr	r3, [r3, #0]
    8144:	4618      	mov	r0, r3
    8146:	4b03      	ldr	r3, [pc, #12]	; (8154 <TC7_Handler+0x18>)
    8148:	4798      	blx	r3
}
    814a:	bf00      	nop
    814c:	bd80      	pop	{r7, pc}
    814e:	bf00      	nop
    8150:	20000c28 	.word	0x20000c28
    8154:	00008045 	.word	0x00008045

00008158 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8158:	b580      	push	{r7, lr}
    815a:	b084      	sub	sp, #16
    815c:	af00      	add	r7, sp, #0
    815e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8160:	6878      	ldr	r0, [r7, #4]
    8162:	4b13      	ldr	r3, [pc, #76]	; (81b0 <get_tc_index+0x58>)
    8164:	4798      	blx	r3
    8166:	4603      	mov	r3, r0
    8168:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    816a:	2300      	movs	r3, #0
    816c:	73fb      	strb	r3, [r7, #15]
    816e:	e010      	b.n	8192 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8170:	7bfa      	ldrb	r2, [r7, #15]
    8172:	4910      	ldr	r1, [pc, #64]	; (81b4 <get_tc_index+0x5c>)
    8174:	4613      	mov	r3, r2
    8176:	009b      	lsls	r3, r3, #2
    8178:	4413      	add	r3, r2
    817a:	009b      	lsls	r3, r3, #2
    817c:	440b      	add	r3, r1
    817e:	781b      	ldrb	r3, [r3, #0]
    8180:	7bba      	ldrb	r2, [r7, #14]
    8182:	429a      	cmp	r2, r3
    8184:	d102      	bne.n	818c <get_tc_index+0x34>
			return i;
    8186:	f997 300f 	ldrsb.w	r3, [r7, #15]
    818a:	e00d      	b.n	81a8 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    818c:	7bfb      	ldrb	r3, [r7, #15]
    818e:	3301      	adds	r3, #1
    8190:	73fb      	strb	r3, [r7, #15]
    8192:	7bfb      	ldrb	r3, [r7, #15]
    8194:	2b05      	cmp	r3, #5
    8196:	d9eb      	bls.n	8170 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8198:	f240 221d 	movw	r2, #541	; 0x21d
    819c:	4906      	ldr	r1, [pc, #24]	; (81b8 <get_tc_index+0x60>)
    819e:	2000      	movs	r0, #0
    81a0:	4b06      	ldr	r3, [pc, #24]	; (81bc <get_tc_index+0x64>)
    81a2:	4798      	blx	r3
	return -1;
    81a4:	f04f 33ff 	mov.w	r3, #4294967295
}
    81a8:	4618      	mov	r0, r3
    81aa:	3710      	adds	r7, #16
    81ac:	46bd      	mov	sp, r7
    81ae:	bd80      	pop	{r7, pc}
    81b0:	0000825d 	.word	0x0000825d
    81b4:	20000110 	.word	0x20000110
    81b8:	00010adc 	.word	0x00010adc
    81bc:	000038e1 	.word	0x000038e1

000081c0 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    81c0:	b480      	push	{r7}
    81c2:	b083      	sub	sp, #12
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
    81c8:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	4a17      	ldr	r2, [pc, #92]	; (822c <_tc_init_irq_param+0x6c>)
    81ce:	4293      	cmp	r3, r2
    81d0:	d102      	bne.n	81d8 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    81d2:	4a17      	ldr	r2, [pc, #92]	; (8230 <_tc_init_irq_param+0x70>)
    81d4:	683b      	ldr	r3, [r7, #0]
    81d6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	4a16      	ldr	r2, [pc, #88]	; (8234 <_tc_init_irq_param+0x74>)
    81dc:	4293      	cmp	r3, r2
    81de:	d102      	bne.n	81e6 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    81e0:	4a15      	ldr	r2, [pc, #84]	; (8238 <_tc_init_irq_param+0x78>)
    81e2:	683b      	ldr	r3, [r7, #0]
    81e4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    81e6:	687b      	ldr	r3, [r7, #4]
    81e8:	4a14      	ldr	r2, [pc, #80]	; (823c <_tc_init_irq_param+0x7c>)
    81ea:	4293      	cmp	r3, r2
    81ec:	d102      	bne.n	81f4 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    81ee:	4a14      	ldr	r2, [pc, #80]	; (8240 <_tc_init_irq_param+0x80>)
    81f0:	683b      	ldr	r3, [r7, #0]
    81f2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    81f4:	687b      	ldr	r3, [r7, #4]
    81f6:	4a13      	ldr	r2, [pc, #76]	; (8244 <_tc_init_irq_param+0x84>)
    81f8:	4293      	cmp	r3, r2
    81fa:	d102      	bne.n	8202 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    81fc:	4a12      	ldr	r2, [pc, #72]	; (8248 <_tc_init_irq_param+0x88>)
    81fe:	683b      	ldr	r3, [r7, #0]
    8200:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8202:	687b      	ldr	r3, [r7, #4]
    8204:	4a11      	ldr	r2, [pc, #68]	; (824c <_tc_init_irq_param+0x8c>)
    8206:	4293      	cmp	r3, r2
    8208:	d102      	bne.n	8210 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    820a:	4a11      	ldr	r2, [pc, #68]	; (8250 <_tc_init_irq_param+0x90>)
    820c:	683b      	ldr	r3, [r7, #0]
    820e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8210:	687b      	ldr	r3, [r7, #4]
    8212:	4a10      	ldr	r2, [pc, #64]	; (8254 <_tc_init_irq_param+0x94>)
    8214:	4293      	cmp	r3, r2
    8216:	d102      	bne.n	821e <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8218:	4a0f      	ldr	r2, [pc, #60]	; (8258 <_tc_init_irq_param+0x98>)
    821a:	683b      	ldr	r3, [r7, #0]
    821c:	6013      	str	r3, [r2, #0]
	}
}
    821e:	bf00      	nop
    8220:	370c      	adds	r7, #12
    8222:	46bd      	mov	sp, r7
    8224:	f85d 7b04 	ldr.w	r7, [sp], #4
    8228:	4770      	bx	lr
    822a:	bf00      	nop
    822c:	40003800 	.word	0x40003800
    8230:	20000c14 	.word	0x20000c14
    8234:	4101a000 	.word	0x4101a000
    8238:	20000c18 	.word	0x20000c18
    823c:	42001400 	.word	0x42001400
    8240:	20000c1c 	.word	0x20000c1c
    8244:	42001800 	.word	0x42001800
    8248:	20000c20 	.word	0x20000c20
    824c:	43001400 	.word	0x43001400
    8250:	20000c24 	.word	0x20000c24
    8254:	43001800 	.word	0x43001800
    8258:	20000c28 	.word	0x20000c28

0000825c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    825c:	b4b0      	push	{r4, r5, r7}
    825e:	b08d      	sub	sp, #52	; 0x34
    8260:	af00      	add	r7, sp, #0
    8262:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8264:	4b13      	ldr	r3, [pc, #76]	; (82b4 <_get_hardware_offset+0x58>)
    8266:	f107 040c 	add.w	r4, r7, #12
    826a:	461d      	mov	r5, r3
    826c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    826e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8270:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8278:	2300      	movs	r3, #0
    827a:	62fb      	str	r3, [r7, #44]	; 0x2c
    827c:	e010      	b.n	82a0 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8280:	009b      	lsls	r3, r3, #2
    8282:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8286:	4413      	add	r3, r2
    8288:	f853 3c24 	ldr.w	r3, [r3, #-36]
    828c:	461a      	mov	r2, r3
    828e:	687b      	ldr	r3, [r7, #4]
    8290:	429a      	cmp	r2, r3
    8292:	d102      	bne.n	829a <_get_hardware_offset+0x3e>
			return i;
    8294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8296:	b2db      	uxtb	r3, r3
    8298:	e006      	b.n	82a8 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    829c:	3301      	adds	r3, #1
    829e:	62fb      	str	r3, [r7, #44]	; 0x2c
    82a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82a2:	2b07      	cmp	r3, #7
    82a4:	d9eb      	bls.n	827e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    82a6:	2300      	movs	r3, #0
}
    82a8:	4618      	mov	r0, r3
    82aa:	3734      	adds	r7, #52	; 0x34
    82ac:	46bd      	mov	sp, r7
    82ae:	bcb0      	pop	{r4, r5, r7}
    82b0:	4770      	bx	lr
    82b2:	bf00      	nop
    82b4:	00010af0 	.word	0x00010af0

000082b8 <__NVIC_EnableIRQ>:
{
    82b8:	b480      	push	{r7}
    82ba:	b083      	sub	sp, #12
    82bc:	af00      	add	r7, sp, #0
    82be:	4603      	mov	r3, r0
    82c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    82c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82c6:	2b00      	cmp	r3, #0
    82c8:	db0b      	blt.n	82e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82ca:	4909      	ldr	r1, [pc, #36]	; (82f0 <__NVIC_EnableIRQ+0x38>)
    82cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82d0:	095b      	lsrs	r3, r3, #5
    82d2:	88fa      	ldrh	r2, [r7, #6]
    82d4:	f002 021f 	and.w	r2, r2, #31
    82d8:	2001      	movs	r0, #1
    82da:	fa00 f202 	lsl.w	r2, r0, r2
    82de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82e2:	bf00      	nop
    82e4:	370c      	adds	r7, #12
    82e6:	46bd      	mov	sp, r7
    82e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    82ec:	4770      	bx	lr
    82ee:	bf00      	nop
    82f0:	e000e100 	.word	0xe000e100

000082f4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    82f4:	b480      	push	{r7}
    82f6:	b087      	sub	sp, #28
    82f8:	af00      	add	r7, sp, #0
    82fa:	60f8      	str	r0, [r7, #12]
    82fc:	460b      	mov	r3, r1
    82fe:	607a      	str	r2, [r7, #4]
    8300:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8302:	7afa      	ldrb	r2, [r7, #11]
    8304:	68f9      	ldr	r1, [r7, #12]
    8306:	4613      	mov	r3, r2
    8308:	009b      	lsls	r3, r3, #2
    830a:	4413      	add	r3, r2
    830c:	009b      	lsls	r3, r3, #2
    830e:	440b      	add	r3, r1
    8310:	3340      	adds	r3, #64	; 0x40
    8312:	681b      	ldr	r3, [r3, #0]
    8314:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8316:	697a      	ldr	r2, [r7, #20]
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	4013      	ands	r3, r2
    831c:	617b      	str	r3, [r7, #20]
	return tmp;
    831e:	697b      	ldr	r3, [r7, #20]
}
    8320:	4618      	mov	r0, r3
    8322:	371c      	adds	r7, #28
    8324:	46bd      	mov	sp, r7
    8326:	f85d 7b04 	ldr.w	r7, [sp], #4
    832a:	4770      	bx	lr

0000832c <hri_oscctrl_get_STATUS_reg>:
{
    832c:	b480      	push	{r7}
    832e:	b085      	sub	sp, #20
    8330:	af00      	add	r7, sp, #0
    8332:	6078      	str	r0, [r7, #4]
    8334:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8336:	687b      	ldr	r3, [r7, #4]
    8338:	691b      	ldr	r3, [r3, #16]
    833a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    833c:	68fa      	ldr	r2, [r7, #12]
    833e:	683b      	ldr	r3, [r7, #0]
    8340:	4013      	ands	r3, r2
    8342:	60fb      	str	r3, [r7, #12]
	return tmp;
    8344:	68fb      	ldr	r3, [r7, #12]
}
    8346:	4618      	mov	r0, r3
    8348:	3714      	adds	r7, #20
    834a:	46bd      	mov	sp, r7
    834c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8350:	4770      	bx	lr

00008352 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8352:	b480      	push	{r7}
    8354:	b085      	sub	sp, #20
    8356:	af00      	add	r7, sp, #0
    8358:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	f893 3020 	ldrb.w	r3, [r3, #32]
    8360:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8362:	7bfb      	ldrb	r3, [r7, #15]
    8364:	f003 0301 	and.w	r3, r3, #1
    8368:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    836a:	7bfb      	ldrb	r3, [r7, #15]
    836c:	2b00      	cmp	r3, #0
    836e:	bf14      	ite	ne
    8370:	2301      	movne	r3, #1
    8372:	2300      	moveq	r3, #0
    8374:	b2db      	uxtb	r3, r3
}
    8376:	4618      	mov	r0, r3
    8378:	3714      	adds	r7, #20
    837a:	46bd      	mov	sp, r7
    837c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8380:	4770      	bx	lr

00008382 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8382:	b480      	push	{r7}
    8384:	b083      	sub	sp, #12
    8386:	af00      	add	r7, sp, #0
    8388:	6078      	str	r0, [r7, #4]
    838a:	460b      	mov	r3, r1
    838c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    838e:	bf00      	nop
    8390:	687b      	ldr	r3, [r7, #4]
    8392:	789b      	ldrb	r3, [r3, #2]
    8394:	b2da      	uxtb	r2, r3
    8396:	78fb      	ldrb	r3, [r7, #3]
    8398:	4013      	ands	r3, r2
    839a:	b2db      	uxtb	r3, r3
    839c:	2b00      	cmp	r3, #0
    839e:	d1f7      	bne.n	8390 <hri_usb_wait_for_sync+0xe>
	};
}
    83a0:	bf00      	nop
    83a2:	370c      	adds	r7, #12
    83a4:	46bd      	mov	sp, r7
    83a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    83aa:	4770      	bx	lr

000083ac <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    83ac:	b480      	push	{r7}
    83ae:	b083      	sub	sp, #12
    83b0:	af00      	add	r7, sp, #0
    83b2:	6078      	str	r0, [r7, #4]
    83b4:	460b      	mov	r3, r1
    83b6:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    83b8:	687b      	ldr	r3, [r7, #4]
    83ba:	789b      	ldrb	r3, [r3, #2]
    83bc:	b2da      	uxtb	r2, r3
    83be:	78fb      	ldrb	r3, [r7, #3]
    83c0:	4013      	ands	r3, r2
    83c2:	b2db      	uxtb	r3, r3
    83c4:	2b00      	cmp	r3, #0
    83c6:	bf14      	ite	ne
    83c8:	2301      	movne	r3, #1
    83ca:	2300      	moveq	r3, #0
    83cc:	b2db      	uxtb	r3, r3
}
    83ce:	4618      	mov	r0, r3
    83d0:	370c      	adds	r7, #12
    83d2:	46bd      	mov	sp, r7
    83d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    83d8:	4770      	bx	lr

000083da <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    83da:	b480      	push	{r7}
    83dc:	b085      	sub	sp, #20
    83de:	af00      	add	r7, sp, #0
    83e0:	6078      	str	r0, [r7, #4]
    83e2:	460b      	mov	r3, r1
    83e4:	70fb      	strb	r3, [r7, #3]
    83e6:	4613      	mov	r3, r2
    83e8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    83ea:	78fb      	ldrb	r3, [r7, #3]
    83ec:	687a      	ldr	r2, [r7, #4]
    83ee:	3308      	adds	r3, #8
    83f0:	015b      	lsls	r3, r3, #5
    83f2:	4413      	add	r3, r2
    83f4:	3307      	adds	r3, #7
    83f6:	781b      	ldrb	r3, [r3, #0]
    83f8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    83fa:	7bfa      	ldrb	r2, [r7, #15]
    83fc:	78bb      	ldrb	r3, [r7, #2]
    83fe:	4013      	ands	r3, r2
    8400:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8402:	7bfb      	ldrb	r3, [r7, #15]
}
    8404:	4618      	mov	r0, r3
    8406:	3714      	adds	r7, #20
    8408:	46bd      	mov	sp, r7
    840a:	f85d 7b04 	ldr.w	r7, [sp], #4
    840e:	4770      	bx	lr

00008410 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8410:	b480      	push	{r7}
    8412:	b083      	sub	sp, #12
    8414:	af00      	add	r7, sp, #0
    8416:	6078      	str	r0, [r7, #4]
    8418:	460b      	mov	r3, r1
    841a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    841c:	78fb      	ldrb	r3, [r7, #3]
    841e:	687a      	ldr	r2, [r7, #4]
    8420:	3308      	adds	r3, #8
    8422:	015b      	lsls	r3, r3, #5
    8424:	4413      	add	r3, r2
    8426:	3307      	adds	r3, #7
    8428:	781b      	ldrb	r3, [r3, #0]
    842a:	b2db      	uxtb	r3, r3
}
    842c:	4618      	mov	r0, r3
    842e:	370c      	adds	r7, #12
    8430:	46bd      	mov	sp, r7
    8432:	f85d 7b04 	ldr.w	r7, [sp], #4
    8436:	4770      	bx	lr

00008438 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8438:	b480      	push	{r7}
    843a:	b083      	sub	sp, #12
    843c:	af00      	add	r7, sp, #0
    843e:	6078      	str	r0, [r7, #4]
    8440:	460b      	mov	r3, r1
    8442:	70fb      	strb	r3, [r7, #3]
    8444:	4613      	mov	r3, r2
    8446:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8448:	78fb      	ldrb	r3, [r7, #3]
    844a:	687a      	ldr	r2, [r7, #4]
    844c:	3308      	adds	r3, #8
    844e:	015b      	lsls	r3, r3, #5
    8450:	4413      	add	r3, r2
    8452:	3307      	adds	r3, #7
    8454:	78ba      	ldrb	r2, [r7, #2]
    8456:	701a      	strb	r2, [r3, #0]
}
    8458:	bf00      	nop
    845a:	370c      	adds	r7, #12
    845c:	46bd      	mov	sp, r7
    845e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8462:	4770      	bx	lr

00008464 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8464:	b480      	push	{r7}
    8466:	b083      	sub	sp, #12
    8468:	af00      	add	r7, sp, #0
    846a:	6078      	str	r0, [r7, #4]
    846c:	460b      	mov	r3, r1
    846e:	70fb      	strb	r3, [r7, #3]
    8470:	4613      	mov	r3, r2
    8472:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8474:	78fb      	ldrb	r3, [r7, #3]
    8476:	687a      	ldr	r2, [r7, #4]
    8478:	3308      	adds	r3, #8
    847a:	015b      	lsls	r3, r3, #5
    847c:	4413      	add	r3, r2
    847e:	3305      	adds	r3, #5
    8480:	78ba      	ldrb	r2, [r7, #2]
    8482:	701a      	strb	r2, [r3, #0]
}
    8484:	bf00      	nop
    8486:	370c      	adds	r7, #12
    8488:	46bd      	mov	sp, r7
    848a:	f85d 7b04 	ldr.w	r7, [sp], #4
    848e:	4770      	bx	lr

00008490 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8490:	b480      	push	{r7}
    8492:	b083      	sub	sp, #12
    8494:	af00      	add	r7, sp, #0
    8496:	6078      	str	r0, [r7, #4]
    8498:	460b      	mov	r3, r1
    849a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    849c:	78fb      	ldrb	r3, [r7, #3]
    849e:	687a      	ldr	r2, [r7, #4]
    84a0:	3308      	adds	r3, #8
    84a2:	015b      	lsls	r3, r3, #5
    84a4:	4413      	add	r3, r2
    84a6:	3306      	adds	r3, #6
    84a8:	781b      	ldrb	r3, [r3, #0]
    84aa:	b2db      	uxtb	r3, r3
}
    84ac:	4618      	mov	r0, r3
    84ae:	370c      	adds	r7, #12
    84b0:	46bd      	mov	sp, r7
    84b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    84b6:	4770      	bx	lr

000084b8 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    84b8:	b480      	push	{r7}
    84ba:	b083      	sub	sp, #12
    84bc:	af00      	add	r7, sp, #0
    84be:	6078      	str	r0, [r7, #4]
    84c0:	460b      	mov	r3, r1
    84c2:	70fb      	strb	r3, [r7, #3]
    84c4:	4613      	mov	r3, r2
    84c6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    84c8:	78fb      	ldrb	r3, [r7, #3]
    84ca:	687a      	ldr	r2, [r7, #4]
    84cc:	3308      	adds	r3, #8
    84ce:	015b      	lsls	r3, r3, #5
    84d0:	4413      	add	r3, r2
    84d2:	3304      	adds	r3, #4
    84d4:	78ba      	ldrb	r2, [r7, #2]
    84d6:	701a      	strb	r2, [r3, #0]
}
    84d8:	bf00      	nop
    84da:	370c      	adds	r7, #12
    84dc:	46bd      	mov	sp, r7
    84de:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e2:	4770      	bx	lr

000084e4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    84e4:	b480      	push	{r7}
    84e6:	b083      	sub	sp, #12
    84e8:	af00      	add	r7, sp, #0
    84ea:	6078      	str	r0, [r7, #4]
    84ec:	460b      	mov	r3, r1
    84ee:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    84f0:	78fb      	ldrb	r3, [r7, #3]
    84f2:	687a      	ldr	r2, [r7, #4]
    84f4:	015b      	lsls	r3, r3, #5
    84f6:	4413      	add	r3, r2
    84f8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    84fc:	2210      	movs	r2, #16
    84fe:	701a      	strb	r2, [r3, #0]
}
    8500:	bf00      	nop
    8502:	370c      	adds	r7, #12
    8504:	46bd      	mov	sp, r7
    8506:	f85d 7b04 	ldr.w	r7, [sp], #4
    850a:	4770      	bx	lr

0000850c <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    850c:	b480      	push	{r7}
    850e:	b083      	sub	sp, #12
    8510:	af00      	add	r7, sp, #0
    8512:	6078      	str	r0, [r7, #4]
    8514:	460b      	mov	r3, r1
    8516:	70fb      	strb	r3, [r7, #3]
    8518:	4613      	mov	r3, r2
    851a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    851c:	78fb      	ldrb	r3, [r7, #3]
    851e:	687a      	ldr	r2, [r7, #4]
    8520:	015b      	lsls	r3, r3, #5
    8522:	4413      	add	r3, r2
    8524:	f203 1309 	addw	r3, r3, #265	; 0x109
    8528:	78ba      	ldrb	r2, [r7, #2]
    852a:	701a      	strb	r2, [r3, #0]
}
    852c:	bf00      	nop
    852e:	370c      	adds	r7, #12
    8530:	46bd      	mov	sp, r7
    8532:	f85d 7b04 	ldr.w	r7, [sp], #4
    8536:	4770      	bx	lr

00008538 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8538:	b480      	push	{r7}
    853a:	b083      	sub	sp, #12
    853c:	af00      	add	r7, sp, #0
    853e:	6078      	str	r0, [r7, #4]
    8540:	460b      	mov	r3, r1
    8542:	70fb      	strb	r3, [r7, #3]
    8544:	4613      	mov	r3, r2
    8546:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8548:	78fb      	ldrb	r3, [r7, #3]
    854a:	687a      	ldr	r2, [r7, #4]
    854c:	015b      	lsls	r3, r3, #5
    854e:	4413      	add	r3, r2
    8550:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8554:	78ba      	ldrb	r2, [r7, #2]
    8556:	701a      	strb	r2, [r3, #0]
}
    8558:	bf00      	nop
    855a:	370c      	adds	r7, #12
    855c:	46bd      	mov	sp, r7
    855e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8562:	4770      	bx	lr

00008564 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8564:	b480      	push	{r7}
    8566:	b085      	sub	sp, #20
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
    856c:	460b      	mov	r3, r1
    856e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8570:	78fb      	ldrb	r3, [r7, #3]
    8572:	687a      	ldr	r2, [r7, #4]
    8574:	3308      	adds	r3, #8
    8576:	015b      	lsls	r3, r3, #5
    8578:	4413      	add	r3, r2
    857a:	781b      	ldrb	r3, [r3, #0]
    857c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    857e:	7bfb      	ldrb	r3, [r7, #15]
    8580:	f003 0307 	and.w	r3, r3, #7
    8584:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8586:	7bfb      	ldrb	r3, [r7, #15]
}
    8588:	4618      	mov	r0, r3
    858a:	3714      	adds	r7, #20
    858c:	46bd      	mov	sp, r7
    858e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8592:	4770      	bx	lr

00008594 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8594:	b480      	push	{r7}
    8596:	b085      	sub	sp, #20
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	460b      	mov	r3, r1
    859e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    85a0:	78fb      	ldrb	r3, [r7, #3]
    85a2:	687a      	ldr	r2, [r7, #4]
    85a4:	3308      	adds	r3, #8
    85a6:	015b      	lsls	r3, r3, #5
    85a8:	4413      	add	r3, r2
    85aa:	781b      	ldrb	r3, [r3, #0]
    85ac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    85ae:	7bfb      	ldrb	r3, [r7, #15]
    85b0:	091b      	lsrs	r3, r3, #4
    85b2:	b2db      	uxtb	r3, r3
    85b4:	f003 0307 	and.w	r3, r3, #7
    85b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    85ba:	7bfb      	ldrb	r3, [r7, #15]
}
    85bc:	4618      	mov	r0, r3
    85be:	3714      	adds	r7, #20
    85c0:	46bd      	mov	sp, r7
    85c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85c6:	4770      	bx	lr

000085c8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    85c8:	b480      	push	{r7}
    85ca:	b083      	sub	sp, #12
    85cc:	af00      	add	r7, sp, #0
    85ce:	6078      	str	r0, [r7, #4]
    85d0:	460b      	mov	r3, r1
    85d2:	70fb      	strb	r3, [r7, #3]
    85d4:	4613      	mov	r3, r2
    85d6:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    85d8:	78fb      	ldrb	r3, [r7, #3]
    85da:	687a      	ldr	r2, [r7, #4]
    85dc:	3308      	adds	r3, #8
    85de:	015b      	lsls	r3, r3, #5
    85e0:	4413      	add	r3, r2
    85e2:	78ba      	ldrb	r2, [r7, #2]
    85e4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    85e6:	bf00      	nop
    85e8:	370c      	adds	r7, #12
    85ea:	46bd      	mov	sp, r7
    85ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    85f0:	4770      	bx	lr

000085f2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    85f2:	b480      	push	{r7}
    85f4:	b083      	sub	sp, #12
    85f6:	af00      	add	r7, sp, #0
    85f8:	6078      	str	r0, [r7, #4]
    85fa:	460b      	mov	r3, r1
    85fc:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    85fe:	78fb      	ldrb	r3, [r7, #3]
    8600:	687a      	ldr	r2, [r7, #4]
    8602:	3308      	adds	r3, #8
    8604:	015b      	lsls	r3, r3, #5
    8606:	4413      	add	r3, r2
    8608:	781b      	ldrb	r3, [r3, #0]
    860a:	b2db      	uxtb	r3, r3
}
    860c:	4618      	mov	r0, r3
    860e:	370c      	adds	r7, #12
    8610:	46bd      	mov	sp, r7
    8612:	f85d 7b04 	ldr.w	r7, [sp], #4
    8616:	4770      	bx	lr

00008618 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8618:	b480      	push	{r7}
    861a:	b083      	sub	sp, #12
    861c:	af00      	add	r7, sp, #0
    861e:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8620:	687b      	ldr	r3, [r7, #4]
    8622:	8b9b      	ldrh	r3, [r3, #28]
    8624:	b29b      	uxth	r3, r3
}
    8626:	4618      	mov	r0, r3
    8628:	370c      	adds	r7, #12
    862a:	46bd      	mov	sp, r7
    862c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8630:	4770      	bx	lr

00008632 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8632:	b480      	push	{r7}
    8634:	b083      	sub	sp, #12
    8636:	af00      	add	r7, sp, #0
    8638:	6078      	str	r0, [r7, #4]
    863a:	460b      	mov	r3, r1
    863c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    863e:	687b      	ldr	r3, [r7, #4]
    8640:	887a      	ldrh	r2, [r7, #2]
    8642:	839a      	strh	r2, [r3, #28]
}
    8644:	bf00      	nop
    8646:	370c      	adds	r7, #12
    8648:	46bd      	mov	sp, r7
    864a:	f85d 7b04 	ldr.w	r7, [sp], #4
    864e:	4770      	bx	lr

00008650 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8650:	b480      	push	{r7}
    8652:	b083      	sub	sp, #12
    8654:	af00      	add	r7, sp, #0
    8656:	6078      	str	r0, [r7, #4]
    8658:	460b      	mov	r3, r1
    865a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	887a      	ldrh	r2, [r7, #2]
    8660:	831a      	strh	r2, [r3, #24]
}
    8662:	bf00      	nop
    8664:	370c      	adds	r7, #12
    8666:	46bd      	mov	sp, r7
    8668:	f85d 7b04 	ldr.w	r7, [sp], #4
    866c:	4770      	bx	lr

0000866e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    866e:	b480      	push	{r7}
    8670:	b083      	sub	sp, #12
    8672:	af00      	add	r7, sp, #0
    8674:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8676:	687b      	ldr	r3, [r7, #4]
    8678:	8b1b      	ldrh	r3, [r3, #24]
    867a:	b29b      	uxth	r3, r3
}
    867c:	4618      	mov	r0, r3
    867e:	370c      	adds	r7, #12
    8680:	46bd      	mov	sp, r7
    8682:	f85d 7b04 	ldr.w	r7, [sp], #4
    8686:	4770      	bx	lr

00008688 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8688:	b480      	push	{r7}
    868a:	b083      	sub	sp, #12
    868c:	af00      	add	r7, sp, #0
    868e:	6078      	str	r0, [r7, #4]
    8690:	460b      	mov	r3, r1
    8692:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8694:	687b      	ldr	r3, [r7, #4]
    8696:	887a      	ldrh	r2, [r7, #2]
    8698:	829a      	strh	r2, [r3, #20]
}
    869a:	bf00      	nop
    869c:	370c      	adds	r7, #12
    869e:	46bd      	mov	sp, r7
    86a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a4:	4770      	bx	lr

000086a6 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    86a6:	b480      	push	{r7}
    86a8:	b085      	sub	sp, #20
    86aa:	af00      	add	r7, sp, #0
    86ac:	6078      	str	r0, [r7, #4]
    86ae:	460b      	mov	r3, r1
    86b0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	789b      	ldrb	r3, [r3, #2]
    86b6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    86b8:	7bfa      	ldrb	r2, [r7, #15]
    86ba:	78fb      	ldrb	r3, [r7, #3]
    86bc:	4013      	ands	r3, r2
    86be:	73fb      	strb	r3, [r7, #15]
	return tmp;
    86c0:	7bfb      	ldrb	r3, [r7, #15]
}
    86c2:	4618      	mov	r0, r3
    86c4:	3714      	adds	r7, #20
    86c6:	46bd      	mov	sp, r7
    86c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    86cc:	4770      	bx	lr
	...

000086d0 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    86d0:	b580      	push	{r7, lr}
    86d2:	b082      	sub	sp, #8
    86d4:	af00      	add	r7, sp, #0
    86d6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    86d8:	687b      	ldr	r3, [r7, #4]
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	b2db      	uxtb	r3, r3
    86de:	f023 0302 	bic.w	r3, r3, #2
    86e2:	b2da      	uxtb	r2, r3
    86e4:	687b      	ldr	r3, [r7, #4]
    86e6:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    86e8:	2103      	movs	r1, #3
    86ea:	6878      	ldr	r0, [r7, #4]
    86ec:	4b02      	ldr	r3, [pc, #8]	; (86f8 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    86ee:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    86f0:	bf00      	nop
    86f2:	3708      	adds	r7, #8
    86f4:	46bd      	mov	sp, r7
    86f6:	bd80      	pop	{r7, pc}
    86f8:	00008383 	.word	0x00008383

000086fc <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    86fc:	b580      	push	{r7, lr}
    86fe:	b084      	sub	sp, #16
    8700:	af00      	add	r7, sp, #0
    8702:	6078      	str	r0, [r7, #4]
    8704:	460b      	mov	r3, r1
    8706:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8708:	2103      	movs	r1, #3
    870a:	6878      	ldr	r0, [r7, #4]
    870c:	4b06      	ldr	r3, [pc, #24]	; (8728 <hri_usb_get_CTRLA_reg+0x2c>)
    870e:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8710:	687b      	ldr	r3, [r7, #4]
    8712:	781b      	ldrb	r3, [r3, #0]
    8714:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8716:	7bfa      	ldrb	r2, [r7, #15]
    8718:	78fb      	ldrb	r3, [r7, #3]
    871a:	4013      	ands	r3, r2
    871c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    871e:	7bfb      	ldrb	r3, [r7, #15]
}
    8720:	4618      	mov	r0, r3
    8722:	3710      	adds	r7, #16
    8724:	46bd      	mov	sp, r7
    8726:	bd80      	pop	{r7, pc}
    8728:	00008383 	.word	0x00008383

0000872c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    872c:	b580      	push	{r7, lr}
    872e:	b082      	sub	sp, #8
    8730:	af00      	add	r7, sp, #0
    8732:	6078      	str	r0, [r7, #4]
    8734:	460b      	mov	r3, r1
    8736:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8738:	687b      	ldr	r3, [r7, #4]
    873a:	78fa      	ldrb	r2, [r7, #3]
    873c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    873e:	2103      	movs	r1, #3
    8740:	6878      	ldr	r0, [r7, #4]
    8742:	4b03      	ldr	r3, [pc, #12]	; (8750 <hri_usb_write_CTRLA_reg+0x24>)
    8744:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8746:	bf00      	nop
    8748:	3708      	adds	r7, #8
    874a:	46bd      	mov	sp, r7
    874c:	bd80      	pop	{r7, pc}
    874e:	bf00      	nop
    8750:	00008383 	.word	0x00008383

00008754 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8754:	b580      	push	{r7, lr}
    8756:	b082      	sub	sp, #8
    8758:	af00      	add	r7, sp, #0
    875a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    875c:	2103      	movs	r1, #3
    875e:	6878      	ldr	r0, [r7, #4]
    8760:	4b04      	ldr	r3, [pc, #16]	; (8774 <hri_usb_read_CTRLA_reg+0x20>)
    8762:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	b2db      	uxtb	r3, r3
}
    876a:	4618      	mov	r0, r3
    876c:	3708      	adds	r7, #8
    876e:	46bd      	mov	sp, r7
    8770:	bd80      	pop	{r7, pc}
    8772:	bf00      	nop
    8774:	00008383 	.word	0x00008383

00008778 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8778:	b480      	push	{r7}
    877a:	b083      	sub	sp, #12
    877c:	af00      	add	r7, sp, #0
    877e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	891b      	ldrh	r3, [r3, #8]
    8784:	b29b      	uxth	r3, r3
    8786:	f023 0301 	bic.w	r3, r3, #1
    878a:	b29a      	uxth	r2, r3
    878c:	687b      	ldr	r3, [r7, #4]
    878e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8790:	bf00      	nop
    8792:	370c      	adds	r7, #12
    8794:	46bd      	mov	sp, r7
    8796:	f85d 7b04 	ldr.w	r7, [sp], #4
    879a:	4770      	bx	lr

0000879c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    879c:	b480      	push	{r7}
    879e:	b083      	sub	sp, #12
    87a0:	af00      	add	r7, sp, #0
    87a2:	6078      	str	r0, [r7, #4]
    87a4:	460b      	mov	r3, r1
    87a6:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    87a8:	687b      	ldr	r3, [r7, #4]
    87aa:	887a      	ldrh	r2, [r7, #2]
    87ac:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    87ae:	bf00      	nop
    87b0:	370c      	adds	r7, #12
    87b2:	46bd      	mov	sp, r7
    87b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    87b8:	4770      	bx	lr

000087ba <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    87ba:	b480      	push	{r7}
    87bc:	b083      	sub	sp, #12
    87be:	af00      	add	r7, sp, #0
    87c0:	6078      	str	r0, [r7, #4]
    87c2:	460b      	mov	r3, r1
    87c4:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    87c6:	687b      	ldr	r3, [r7, #4]
    87c8:	78fa      	ldrb	r2, [r7, #3]
    87ca:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    87cc:	bf00      	nop
    87ce:	370c      	adds	r7, #12
    87d0:	46bd      	mov	sp, r7
    87d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d6:	4770      	bx	lr

000087d8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    87d8:	b480      	push	{r7}
    87da:	b083      	sub	sp, #12
    87dc:	af00      	add	r7, sp, #0
    87de:	6078      	str	r0, [r7, #4]
    87e0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    87e2:	687b      	ldr	r3, [r7, #4]
    87e4:	683a      	ldr	r2, [r7, #0]
    87e6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    87e8:	bf00      	nop
    87ea:	370c      	adds	r7, #12
    87ec:	46bd      	mov	sp, r7
    87ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    87f2:	4770      	bx	lr

000087f4 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    87f4:	b480      	push	{r7}
    87f6:	b083      	sub	sp, #12
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
    87fc:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    87fe:	2300      	movs	r3, #0
}
    8800:	4618      	mov	r0, r3
    8802:	370c      	adds	r7, #12
    8804:	46bd      	mov	sp, r7
    8806:	f85d 7b04 	ldr.w	r7, [sp], #4
    880a:	4770      	bx	lr

0000880c <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    880c:	b480      	push	{r7}
    880e:	b085      	sub	sp, #20
    8810:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8812:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8816:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8818:	4b28      	ldr	r3, [pc, #160]	; (88bc <_usb_load_calib+0xb0>)
    881a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    881c:	f003 031f 	and.w	r3, r3, #31
    8820:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8822:	4b26      	ldr	r3, [pc, #152]	; (88bc <_usb_load_calib+0xb0>)
    8824:	681b      	ldr	r3, [r3, #0]
    8826:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8828:	f003 031f 	and.w	r3, r3, #31
    882c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    882e:	4b23      	ldr	r3, [pc, #140]	; (88bc <_usb_load_calib+0xb0>)
    8830:	681b      	ldr	r3, [r3, #0]
    8832:	0a9b      	lsrs	r3, r3, #10
    8834:	f003 0307 	and.w	r3, r3, #7
    8838:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    883a:	68fb      	ldr	r3, [r7, #12]
    883c:	2b00      	cmp	r3, #0
    883e:	d002      	beq.n	8846 <_usb_load_calib+0x3a>
    8840:	68fb      	ldr	r3, [r7, #12]
    8842:	2b1f      	cmp	r3, #31
    8844:	d101      	bne.n	884a <_usb_load_calib+0x3e>
		pad_transn = 9;
    8846:	2309      	movs	r3, #9
    8848:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    884a:	68bb      	ldr	r3, [r7, #8]
    884c:	2b00      	cmp	r3, #0
    884e:	d002      	beq.n	8856 <_usb_load_calib+0x4a>
    8850:	68bb      	ldr	r3, [r7, #8]
    8852:	2b1f      	cmp	r3, #31
    8854:	d101      	bne.n	885a <_usb_load_calib+0x4e>
		pad_transp = 25;
    8856:	2319      	movs	r3, #25
    8858:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    885a:	687b      	ldr	r3, [r7, #4]
    885c:	2b00      	cmp	r3, #0
    885e:	d002      	beq.n	8866 <_usb_load_calib+0x5a>
    8860:	687b      	ldr	r3, [r7, #4]
    8862:	2b07      	cmp	r3, #7
    8864:	d101      	bne.n	886a <_usb_load_calib+0x5e>
		pad_trim = 6;
    8866:	2306      	movs	r3, #6
    8868:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    886a:	68fb      	ldr	r3, [r7, #12]
    886c:	b29b      	uxth	r3, r3
    886e:	019b      	lsls	r3, r3, #6
    8870:	b29b      	uxth	r3, r3
    8872:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8876:	b29a      	uxth	r2, r3
    8878:	68bb      	ldr	r3, [r7, #8]
    887a:	b29b      	uxth	r3, r3
    887c:	f003 031f 	and.w	r3, r3, #31
    8880:	b29b      	uxth	r3, r3
    8882:	4313      	orrs	r3, r2
    8884:	b29a      	uxth	r2, r3
    8886:	687b      	ldr	r3, [r7, #4]
    8888:	b29b      	uxth	r3, r3
    888a:	031b      	lsls	r3, r3, #12
    888c:	b29b      	uxth	r3, r3
    888e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8892:	b29b      	uxth	r3, r3
    8894:	4313      	orrs	r3, r2
    8896:	b29a      	uxth	r2, r3
    8898:	683b      	ldr	r3, [r7, #0]
    889a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    889c:	683a      	ldr	r2, [r7, #0]
    889e:	78d3      	ldrb	r3, [r2, #3]
    88a0:	f043 0303 	orr.w	r3, r3, #3
    88a4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    88a6:	683a      	ldr	r2, [r7, #0]
    88a8:	78d3      	ldrb	r3, [r2, #3]
    88aa:	f043 030c 	orr.w	r3, r3, #12
    88ae:	70d3      	strb	r3, [r2, #3]
}
    88b0:	bf00      	nop
    88b2:	3714      	adds	r7, #20
    88b4:	46bd      	mov	sp, r7
    88b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ba:	4770      	bx	lr
    88bc:	00800084 	.word	0x00800084

000088c0 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    88c0:	b580      	push	{r7, lr}
    88c2:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    88c4:	bf00      	nop
    88c6:	2203      	movs	r2, #3
    88c8:	2100      	movs	r1, #0
    88ca:	4804      	ldr	r0, [pc, #16]	; (88dc <_usb_d_dev_wait_dpll_rdy+0x1c>)
    88cc:	4b04      	ldr	r3, [pc, #16]	; (88e0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    88ce:	4798      	blx	r3
    88d0:	4603      	mov	r3, r0
    88d2:	2b03      	cmp	r3, #3
    88d4:	d1f7      	bne.n	88c6 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    88d6:	bf00      	nop
    88d8:	bd80      	pop	{r7, pc}
    88da:	bf00      	nop
    88dc:	40001000 	.word	0x40001000
    88e0:	000082f5 	.word	0x000082f5

000088e4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    88e4:	b580      	push	{r7, lr}
    88e6:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    88e8:	480e      	ldr	r0, [pc, #56]	; (8924 <_usb_d_dev_wait_dfll_rdy+0x40>)
    88ea:	4b0f      	ldr	r3, [pc, #60]	; (8928 <_usb_d_dev_wait_dfll_rdy+0x44>)
    88ec:	4798      	blx	r3
    88ee:	4603      	mov	r3, r0
    88f0:	2b00      	cmp	r3, #0
    88f2:	d00a      	beq.n	890a <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    88f4:	bf00      	nop
    88f6:	f44f 6110 	mov.w	r1, #2304	; 0x900
    88fa:	480a      	ldr	r0, [pc, #40]	; (8924 <_usb_d_dev_wait_dfll_rdy+0x40>)
    88fc:	4b0b      	ldr	r3, [pc, #44]	; (892c <_usb_d_dev_wait_dfll_rdy+0x48>)
    88fe:	4798      	blx	r3
    8900:	4603      	mov	r3, r0
    8902:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8906:	d1f6      	bne.n	88f6 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8908:	e009      	b.n	891e <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    890a:	bf00      	nop
    890c:	f44f 7180 	mov.w	r1, #256	; 0x100
    8910:	4804      	ldr	r0, [pc, #16]	; (8924 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8912:	4b06      	ldr	r3, [pc, #24]	; (892c <_usb_d_dev_wait_dfll_rdy+0x48>)
    8914:	4798      	blx	r3
    8916:	4603      	mov	r3, r0
    8918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    891c:	d1f6      	bne.n	890c <_usb_d_dev_wait_dfll_rdy+0x28>
}
    891e:	bf00      	nop
    8920:	bd80      	pop	{r7, pc}
    8922:	bf00      	nop
    8924:	40001000 	.word	0x40001000
    8928:	00008353 	.word	0x00008353
    892c:	0000832d 	.word	0x0000832d

00008930 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8930:	b580      	push	{r7, lr}
    8932:	b082      	sub	sp, #8
    8934:	af00      	add	r7, sp, #0
    8936:	4603      	mov	r3, r0
    8938:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    893a:	79fb      	ldrb	r3, [r7, #7]
    893c:	2b00      	cmp	r3, #0
    893e:	d102      	bne.n	8946 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8940:	4b05      	ldr	r3, [pc, #20]	; (8958 <_usb_d_dev_wait_clk_rdy+0x28>)
    8942:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8944:	e004      	b.n	8950 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8946:	79fb      	ldrb	r3, [r7, #7]
    8948:	2b01      	cmp	r3, #1
    894a:	d101      	bne.n	8950 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    894c:	4b03      	ldr	r3, [pc, #12]	; (895c <_usb_d_dev_wait_clk_rdy+0x2c>)
    894e:	4798      	blx	r3
}
    8950:	bf00      	nop
    8952:	3708      	adds	r7, #8
    8954:	46bd      	mov	sp, r7
    8956:	bd80      	pop	{r7, pc}
    8958:	000088e5 	.word	0x000088e5
    895c:	000088c1 	.word	0x000088c1

00008960 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8960:	b580      	push	{r7, lr}
    8962:	b082      	sub	sp, #8
    8964:	af00      	add	r7, sp, #0
    8966:	4603      	mov	r3, r0
    8968:	6039      	str	r1, [r7, #0]
    896a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    896c:	683b      	ldr	r3, [r7, #0]
    896e:	b2da      	uxtb	r2, r3
    8970:	79fb      	ldrb	r3, [r7, #7]
    8972:	4619      	mov	r1, r3
    8974:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8978:	4b02      	ldr	r3, [pc, #8]	; (8984 <_usbd_ep_int_ack+0x24>)
    897a:	4798      	blx	r3
}
    897c:	bf00      	nop
    897e:	3708      	adds	r7, #8
    8980:	46bd      	mov	sp, r7
    8982:	bd80      	pop	{r7, pc}
    8984:	00008439 	.word	0x00008439

00008988 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8988:	b580      	push	{r7, lr}
    898a:	b082      	sub	sp, #8
    898c:	af00      	add	r7, sp, #0
    898e:	4603      	mov	r3, r0
    8990:	6039      	str	r1, [r7, #0]
    8992:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8994:	683b      	ldr	r3, [r7, #0]
    8996:	b2da      	uxtb	r2, r3
    8998:	79fb      	ldrb	r3, [r7, #7]
    899a:	4619      	mov	r1, r3
    899c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89a0:	4b02      	ldr	r3, [pc, #8]	; (89ac <_usbd_ep_int_en+0x24>)
    89a2:	4798      	blx	r3
}
    89a4:	bf00      	nop
    89a6:	3708      	adds	r7, #8
    89a8:	46bd      	mov	sp, r7
    89aa:	bd80      	pop	{r7, pc}
    89ac:	0000850d 	.word	0x0000850d

000089b0 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    89b0:	b580      	push	{r7, lr}
    89b2:	b082      	sub	sp, #8
    89b4:	af00      	add	r7, sp, #0
    89b6:	4603      	mov	r3, r0
    89b8:	6039      	str	r1, [r7, #0]
    89ba:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    89bc:	683b      	ldr	r3, [r7, #0]
    89be:	b2da      	uxtb	r2, r3
    89c0:	79fb      	ldrb	r3, [r7, #7]
    89c2:	4619      	mov	r1, r3
    89c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89c8:	4b02      	ldr	r3, [pc, #8]	; (89d4 <_usbd_ep_int_dis+0x24>)
    89ca:	4798      	blx	r3
}
    89cc:	bf00      	nop
    89ce:	3708      	adds	r7, #8
    89d0:	46bd      	mov	sp, r7
    89d2:	bd80      	pop	{r7, pc}
    89d4:	00008539 	.word	0x00008539

000089d8 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    89d8:	b580      	push	{r7, lr}
    89da:	b082      	sub	sp, #8
    89dc:	af00      	add	r7, sp, #0
    89de:	4603      	mov	r3, r0
    89e0:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    89e2:	79fb      	ldrb	r3, [r7, #7]
    89e4:	4619      	mov	r1, r3
    89e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89ea:	4b06      	ldr	r3, [pc, #24]	; (8a04 <_usbd_ep_is_ctrl+0x2c>)
    89ec:	4798      	blx	r3
    89ee:	4603      	mov	r3, r0
    89f0:	2b11      	cmp	r3, #17
    89f2:	bf0c      	ite	eq
    89f4:	2301      	moveq	r3, #1
    89f6:	2300      	movne	r3, #0
    89f8:	b2db      	uxtb	r3, r3
}
    89fa:	4618      	mov	r0, r3
    89fc:	3708      	adds	r7, #8
    89fe:	46bd      	mov	sp, r7
    8a00:	bd80      	pop	{r7, pc}
    8a02:	bf00      	nop
    8a04:	000085f3 	.word	0x000085f3

00008a08 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8a08:	b580      	push	{r7, lr}
    8a0a:	b082      	sub	sp, #8
    8a0c:	af00      	add	r7, sp, #0
    8a0e:	4603      	mov	r3, r0
    8a10:	71fb      	strb	r3, [r7, #7]
    8a12:	460b      	mov	r3, r1
    8a14:	71bb      	strb	r3, [r7, #6]
    8a16:	4613      	mov	r3, r2
    8a18:	717b      	strb	r3, [r7, #5]
	if (st) {
    8a1a:	797b      	ldrb	r3, [r7, #5]
    8a1c:	2b00      	cmp	r3, #0
    8a1e:	d00b      	beq.n	8a38 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8a20:	79bb      	ldrb	r3, [r7, #6]
    8a22:	2210      	movs	r2, #16
    8a24:	fa02 f303 	lsl.w	r3, r2, r3
    8a28:	b2da      	uxtb	r2, r3
    8a2a:	79fb      	ldrb	r3, [r7, #7]
    8a2c:	4619      	mov	r1, r3
    8a2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a32:	4b09      	ldr	r3, [pc, #36]	; (8a58 <_usbd_ep_set_stall+0x50>)
    8a34:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8a36:	e00a      	b.n	8a4e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8a38:	79bb      	ldrb	r3, [r7, #6]
    8a3a:	2210      	movs	r2, #16
    8a3c:	fa02 f303 	lsl.w	r3, r2, r3
    8a40:	b2da      	uxtb	r2, r3
    8a42:	79fb      	ldrb	r3, [r7, #7]
    8a44:	4619      	mov	r1, r3
    8a46:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a4a:	4b04      	ldr	r3, [pc, #16]	; (8a5c <_usbd_ep_set_stall+0x54>)
    8a4c:	4798      	blx	r3
}
    8a4e:	bf00      	nop
    8a50:	3708      	adds	r7, #8
    8a52:	46bd      	mov	sp, r7
    8a54:	bd80      	pop	{r7, pc}
    8a56:	bf00      	nop
    8a58:	00008465 	.word	0x00008465
    8a5c:	000084b9 	.word	0x000084b9

00008a60 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8a60:	b580      	push	{r7, lr}
    8a62:	b084      	sub	sp, #16
    8a64:	af00      	add	r7, sp, #0
    8a66:	4603      	mov	r3, r0
    8a68:	460a      	mov	r2, r1
    8a6a:	71fb      	strb	r3, [r7, #7]
    8a6c:	4613      	mov	r3, r2
    8a6e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8a70:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a74:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8a76:	79fb      	ldrb	r3, [r7, #7]
    8a78:	4619      	mov	r1, r3
    8a7a:	68f8      	ldr	r0, [r7, #12]
    8a7c:	4b08      	ldr	r3, [pc, #32]	; (8aa0 <_usbd_ep_is_stalled+0x40>)
    8a7e:	4798      	blx	r3
    8a80:	4603      	mov	r3, r0
    8a82:	4619      	mov	r1, r3
    8a84:	79bb      	ldrb	r3, [r7, #6]
    8a86:	2210      	movs	r2, #16
    8a88:	fa02 f303 	lsl.w	r3, r2, r3
    8a8c:	400b      	ands	r3, r1
    8a8e:	2b00      	cmp	r3, #0
    8a90:	bf14      	ite	ne
    8a92:	2301      	movne	r3, #1
    8a94:	2300      	moveq	r3, #0
    8a96:	b2db      	uxtb	r3, r3
}
    8a98:	4618      	mov	r0, r3
    8a9a:	3710      	adds	r7, #16
    8a9c:	46bd      	mov	sp, r7
    8a9e:	bd80      	pop	{r7, pc}
    8aa0:	00008491 	.word	0x00008491

00008aa4 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8aa4:	b580      	push	{r7, lr}
    8aa6:	b084      	sub	sp, #16
    8aa8:	af00      	add	r7, sp, #0
    8aaa:	4603      	mov	r3, r0
    8aac:	460a      	mov	r2, r1
    8aae:	71fb      	strb	r3, [r7, #7]
    8ab0:	4613      	mov	r3, r2
    8ab2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8ab4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ab8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8aba:	79fb      	ldrb	r3, [r7, #7]
    8abc:	4619      	mov	r1, r3
    8abe:	68f8      	ldr	r0, [r7, #12]
    8ac0:	4b08      	ldr	r3, [pc, #32]	; (8ae4 <_usbd_ep_is_stall_sent+0x40>)
    8ac2:	4798      	blx	r3
    8ac4:	4603      	mov	r3, r0
    8ac6:	4619      	mov	r1, r3
    8ac8:	79bb      	ldrb	r3, [r7, #6]
    8aca:	2220      	movs	r2, #32
    8acc:	fa02 f303 	lsl.w	r3, r2, r3
    8ad0:	400b      	ands	r3, r1
    8ad2:	2b00      	cmp	r3, #0
    8ad4:	bf14      	ite	ne
    8ad6:	2301      	movne	r3, #1
    8ad8:	2300      	moveq	r3, #0
    8ada:	b2db      	uxtb	r3, r3
}
    8adc:	4618      	mov	r0, r3
    8ade:	3710      	adds	r7, #16
    8ae0:	46bd      	mov	sp, r7
    8ae2:	bd80      	pop	{r7, pc}
    8ae4:	00008411 	.word	0x00008411

00008ae8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8ae8:	b580      	push	{r7, lr}
    8aea:	b082      	sub	sp, #8
    8aec:	af00      	add	r7, sp, #0
    8aee:	4603      	mov	r3, r0
    8af0:	460a      	mov	r2, r1
    8af2:	71fb      	strb	r3, [r7, #7]
    8af4:	4613      	mov	r3, r2
    8af6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8af8:	79bb      	ldrb	r3, [r7, #6]
    8afa:	2220      	movs	r2, #32
    8afc:	409a      	lsls	r2, r3
    8afe:	79fb      	ldrb	r3, [r7, #7]
    8b00:	4611      	mov	r1, r2
    8b02:	4618      	mov	r0, r3
    8b04:	4b02      	ldr	r3, [pc, #8]	; (8b10 <_usbd_ep_ack_stall+0x28>)
    8b06:	4798      	blx	r3
}
    8b08:	bf00      	nop
    8b0a:	3708      	adds	r7, #8
    8b0c:	46bd      	mov	sp, r7
    8b0e:	bd80      	pop	{r7, pc}
    8b10:	00008961 	.word	0x00008961

00008b14 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8b14:	b580      	push	{r7, lr}
    8b16:	b082      	sub	sp, #8
    8b18:	af00      	add	r7, sp, #0
    8b1a:	4603      	mov	r3, r0
    8b1c:	71fb      	strb	r3, [r7, #7]
    8b1e:	460b      	mov	r3, r1
    8b20:	71bb      	strb	r3, [r7, #6]
    8b22:	4613      	mov	r3, r2
    8b24:	717b      	strb	r3, [r7, #5]
	if (en) {
    8b26:	797b      	ldrb	r3, [r7, #5]
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d008      	beq.n	8b3e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8b2c:	79bb      	ldrb	r3, [r7, #6]
    8b2e:	2220      	movs	r2, #32
    8b30:	409a      	lsls	r2, r3
    8b32:	79fb      	ldrb	r3, [r7, #7]
    8b34:	4611      	mov	r1, r2
    8b36:	4618      	mov	r0, r3
    8b38:	4b07      	ldr	r3, [pc, #28]	; (8b58 <_usbd_ep_int_stall_en+0x44>)
    8b3a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8b3c:	e007      	b.n	8b4e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8b3e:	79bb      	ldrb	r3, [r7, #6]
    8b40:	2220      	movs	r2, #32
    8b42:	409a      	lsls	r2, r3
    8b44:	79fb      	ldrb	r3, [r7, #7]
    8b46:	4611      	mov	r1, r2
    8b48:	4618      	mov	r0, r3
    8b4a:	4b04      	ldr	r3, [pc, #16]	; (8b5c <_usbd_ep_int_stall_en+0x48>)
    8b4c:	4798      	blx	r3
}
    8b4e:	bf00      	nop
    8b50:	3708      	adds	r7, #8
    8b52:	46bd      	mov	sp, r7
    8b54:	bd80      	pop	{r7, pc}
    8b56:	bf00      	nop
    8b58:	00008989 	.word	0x00008989
    8b5c:	000089b1 	.word	0x000089b1

00008b60 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8b60:	b580      	push	{r7, lr}
    8b62:	b082      	sub	sp, #8
    8b64:	af00      	add	r7, sp, #0
    8b66:	4603      	mov	r3, r0
    8b68:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8b6a:	79fb      	ldrb	r3, [r7, #7]
    8b6c:	4619      	mov	r1, r3
    8b6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b72:	4b03      	ldr	r3, [pc, #12]	; (8b80 <_usbd_ep_stop_setup+0x20>)
    8b74:	4798      	blx	r3
}
    8b76:	bf00      	nop
    8b78:	3708      	adds	r7, #8
    8b7a:	46bd      	mov	sp, r7
    8b7c:	bd80      	pop	{r7, pc}
    8b7e:	bf00      	nop
    8b80:	000084e5 	.word	0x000084e5

00008b84 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8b84:	b580      	push	{r7, lr}
    8b86:	b082      	sub	sp, #8
    8b88:	af00      	add	r7, sp, #0
    8b8a:	4603      	mov	r3, r0
    8b8c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8b8e:	79fb      	ldrb	r3, [r7, #7]
    8b90:	2210      	movs	r2, #16
    8b92:	4619      	mov	r1, r3
    8b94:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b98:	4b05      	ldr	r3, [pc, #20]	; (8bb0 <_usbd_ep_is_setup+0x2c>)
    8b9a:	4798      	blx	r3
    8b9c:	4603      	mov	r3, r0
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	bf14      	ite	ne
    8ba2:	2301      	movne	r3, #1
    8ba4:	2300      	moveq	r3, #0
    8ba6:	b2db      	uxtb	r3, r3
}
    8ba8:	4618      	mov	r0, r3
    8baa:	3708      	adds	r7, #8
    8bac:	46bd      	mov	sp, r7
    8bae:	bd80      	pop	{r7, pc}
    8bb0:	000083db 	.word	0x000083db

00008bb4 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8bb4:	b580      	push	{r7, lr}
    8bb6:	b082      	sub	sp, #8
    8bb8:	af00      	add	r7, sp, #0
    8bba:	4603      	mov	r3, r0
    8bbc:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8bbe:	79fb      	ldrb	r3, [r7, #7]
    8bc0:	2110      	movs	r1, #16
    8bc2:	4618      	mov	r0, r3
    8bc4:	4b02      	ldr	r3, [pc, #8]	; (8bd0 <_usbd_ep_ack_setup+0x1c>)
    8bc6:	4798      	blx	r3
}
    8bc8:	bf00      	nop
    8bca:	3708      	adds	r7, #8
    8bcc:	46bd      	mov	sp, r7
    8bce:	bd80      	pop	{r7, pc}
    8bd0:	00008961 	.word	0x00008961

00008bd4 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8bd4:	b580      	push	{r7, lr}
    8bd6:	b082      	sub	sp, #8
    8bd8:	af00      	add	r7, sp, #0
    8bda:	4603      	mov	r3, r0
    8bdc:	71fb      	strb	r3, [r7, #7]
    8bde:	460b      	mov	r3, r1
    8be0:	71bb      	strb	r3, [r7, #6]
    8be2:	4613      	mov	r3, r2
    8be4:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8be6:	797b      	ldrb	r3, [r7, #5]
    8be8:	2b00      	cmp	r3, #0
    8bea:	d00b      	beq.n	8c04 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8bec:	79bb      	ldrb	r3, [r7, #6]
    8bee:	2201      	movs	r2, #1
    8bf0:	fa02 f303 	lsl.w	r3, r2, r3
    8bf4:	b2da      	uxtb	r2, r3
    8bf6:	79fb      	ldrb	r3, [r7, #7]
    8bf8:	4619      	mov	r1, r3
    8bfa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bfe:	4b09      	ldr	r3, [pc, #36]	; (8c24 <_usbd_ep_set_toggle+0x50>)
    8c00:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8c02:	e00a      	b.n	8c1a <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8c04:	79bb      	ldrb	r3, [r7, #6]
    8c06:	2201      	movs	r2, #1
    8c08:	fa02 f303 	lsl.w	r3, r2, r3
    8c0c:	b2da      	uxtb	r2, r3
    8c0e:	79fb      	ldrb	r3, [r7, #7]
    8c10:	4619      	mov	r1, r3
    8c12:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c16:	4b04      	ldr	r3, [pc, #16]	; (8c28 <_usbd_ep_set_toggle+0x54>)
    8c18:	4798      	blx	r3
}
    8c1a:	bf00      	nop
    8c1c:	3708      	adds	r7, #8
    8c1e:	46bd      	mov	sp, r7
    8c20:	bd80      	pop	{r7, pc}
    8c22:	bf00      	nop
    8c24:	00008465 	.word	0x00008465
    8c28:	000084b9 	.word	0x000084b9

00008c2c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8c2c:	b580      	push	{r7, lr}
    8c2e:	b082      	sub	sp, #8
    8c30:	af00      	add	r7, sp, #0
    8c32:	4603      	mov	r3, r0
    8c34:	460a      	mov	r2, r1
    8c36:	71fb      	strb	r3, [r7, #7]
    8c38:	4613      	mov	r3, r2
    8c3a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8c3c:	79bb      	ldrb	r3, [r7, #6]
    8c3e:	2201      	movs	r2, #1
    8c40:	409a      	lsls	r2, r3
    8c42:	79fb      	ldrb	r3, [r7, #7]
    8c44:	4611      	mov	r1, r2
    8c46:	4618      	mov	r0, r3
    8c48:	4b02      	ldr	r3, [pc, #8]	; (8c54 <_usbd_ep_ack_io_cpt+0x28>)
    8c4a:	4798      	blx	r3
}
    8c4c:	bf00      	nop
    8c4e:	3708      	adds	r7, #8
    8c50:	46bd      	mov	sp, r7
    8c52:	bd80      	pop	{r7, pc}
    8c54:	00008961 	.word	0x00008961

00008c58 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8c58:	b480      	push	{r7}
    8c5a:	b085      	sub	sp, #20
    8c5c:	af00      	add	r7, sp, #0
    8c5e:	4603      	mov	r3, r0
    8c60:	603a      	str	r2, [r7, #0]
    8c62:	71fb      	strb	r3, [r7, #7]
    8c64:	460b      	mov	r3, r1
    8c66:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8c68:	79fa      	ldrb	r2, [r7, #7]
    8c6a:	79bb      	ldrb	r3, [r7, #6]
    8c6c:	0052      	lsls	r2, r2, #1
    8c6e:	4413      	add	r3, r2
    8c70:	011b      	lsls	r3, r3, #4
    8c72:	4a06      	ldr	r2, [pc, #24]	; (8c8c <_usbd_ep_set_buf+0x34>)
    8c74:	4413      	add	r3, r2
    8c76:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8c78:	68fb      	ldr	r3, [r7, #12]
    8c7a:	683a      	ldr	r2, [r7, #0]
    8c7c:	601a      	str	r2, [r3, #0]
}
    8c7e:	bf00      	nop
    8c80:	3714      	adds	r7, #20
    8c82:	46bd      	mov	sp, r7
    8c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c88:	4770      	bx	lr
    8c8a:	bf00      	nop
    8c8c:	20000f34 	.word	0x20000f34

00008c90 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8c90:	b480      	push	{r7}
    8c92:	b085      	sub	sp, #20
    8c94:	af00      	add	r7, sp, #0
    8c96:	4603      	mov	r3, r0
    8c98:	71fb      	strb	r3, [r7, #7]
    8c9a:	460b      	mov	r3, r1
    8c9c:	71bb      	strb	r3, [r7, #6]
    8c9e:	4613      	mov	r3, r2
    8ca0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8ca2:	79fa      	ldrb	r2, [r7, #7]
    8ca4:	79bb      	ldrb	r3, [r7, #6]
    8ca6:	0052      	lsls	r2, r2, #1
    8ca8:	4413      	add	r3, r2
    8caa:	011b      	lsls	r3, r3, #4
    8cac:	4a08      	ldr	r2, [pc, #32]	; (8cd0 <_usbd_ep_set_in_count+0x40>)
    8cae:	4413      	add	r3, r2
    8cb0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8cb2:	88bb      	ldrh	r3, [r7, #4]
    8cb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8cb8:	b299      	uxth	r1, r3
    8cba:	68fa      	ldr	r2, [r7, #12]
    8cbc:	6853      	ldr	r3, [r2, #4]
    8cbe:	f361 339b 	bfi	r3, r1, #14, #14
    8cc2:	6053      	str	r3, [r2, #4]
}
    8cc4:	bf00      	nop
    8cc6:	3714      	adds	r7, #20
    8cc8:	46bd      	mov	sp, r7
    8cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cce:	4770      	bx	lr
    8cd0:	20000f34 	.word	0x20000f34

00008cd4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8cd4:	b480      	push	{r7}
    8cd6:	b085      	sub	sp, #20
    8cd8:	af00      	add	r7, sp, #0
    8cda:	4603      	mov	r3, r0
    8cdc:	71fb      	strb	r3, [r7, #7]
    8cde:	460b      	mov	r3, r1
    8ce0:	71bb      	strb	r3, [r7, #6]
    8ce2:	4613      	mov	r3, r2
    8ce4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8ce6:	79fa      	ldrb	r2, [r7, #7]
    8ce8:	79bb      	ldrb	r3, [r7, #6]
    8cea:	0052      	lsls	r2, r2, #1
    8cec:	4413      	add	r3, r2
    8cee:	011b      	lsls	r3, r3, #4
    8cf0:	4a08      	ldr	r2, [pc, #32]	; (8d14 <_usbd_ep_set_in_size+0x40>)
    8cf2:	4413      	add	r3, r2
    8cf4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8cf6:	88bb      	ldrh	r3, [r7, #4]
    8cf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8cfc:	b299      	uxth	r1, r3
    8cfe:	68fa      	ldr	r2, [r7, #12]
    8d00:	6853      	ldr	r3, [r2, #4]
    8d02:	f361 030d 	bfi	r3, r1, #0, #14
    8d06:	6053      	str	r3, [r2, #4]
}
    8d08:	bf00      	nop
    8d0a:	3714      	adds	r7, #20
    8d0c:	46bd      	mov	sp, r7
    8d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d12:	4770      	bx	lr
    8d14:	20000f34 	.word	0x20000f34

00008d18 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8d18:	b480      	push	{r7}
    8d1a:	b085      	sub	sp, #20
    8d1c:	af00      	add	r7, sp, #0
    8d1e:	4603      	mov	r3, r0
    8d20:	71fb      	strb	r3, [r7, #7]
    8d22:	460b      	mov	r3, r1
    8d24:	71bb      	strb	r3, [r7, #6]
    8d26:	4613      	mov	r3, r2
    8d28:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d2a:	79fa      	ldrb	r2, [r7, #7]
    8d2c:	79bb      	ldrb	r3, [r7, #6]
    8d2e:	0052      	lsls	r2, r2, #1
    8d30:	4413      	add	r3, r2
    8d32:	011b      	lsls	r3, r3, #4
    8d34:	4a08      	ldr	r2, [pc, #32]	; (8d58 <_usbd_ep_set_out_count+0x40>)
    8d36:	4413      	add	r3, r2
    8d38:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8d3a:	88bb      	ldrh	r3, [r7, #4]
    8d3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d40:	b299      	uxth	r1, r3
    8d42:	68fa      	ldr	r2, [r7, #12]
    8d44:	6853      	ldr	r3, [r2, #4]
    8d46:	f361 030d 	bfi	r3, r1, #0, #14
    8d4a:	6053      	str	r3, [r2, #4]
}
    8d4c:	bf00      	nop
    8d4e:	3714      	adds	r7, #20
    8d50:	46bd      	mov	sp, r7
    8d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d56:	4770      	bx	lr
    8d58:	20000f34 	.word	0x20000f34

00008d5c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8d5c:	b480      	push	{r7}
    8d5e:	b085      	sub	sp, #20
    8d60:	af00      	add	r7, sp, #0
    8d62:	4603      	mov	r3, r0
    8d64:	71fb      	strb	r3, [r7, #7]
    8d66:	460b      	mov	r3, r1
    8d68:	71bb      	strb	r3, [r7, #6]
    8d6a:	4613      	mov	r3, r2
    8d6c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d6e:	79fa      	ldrb	r2, [r7, #7]
    8d70:	79bb      	ldrb	r3, [r7, #6]
    8d72:	0052      	lsls	r2, r2, #1
    8d74:	4413      	add	r3, r2
    8d76:	011b      	lsls	r3, r3, #4
    8d78:	4a08      	ldr	r2, [pc, #32]	; (8d9c <_usbd_ep_set_out_size+0x40>)
    8d7a:	4413      	add	r3, r2
    8d7c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8d7e:	88bb      	ldrh	r3, [r7, #4]
    8d80:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d84:	b299      	uxth	r1, r3
    8d86:	68fa      	ldr	r2, [r7, #12]
    8d88:	6853      	ldr	r3, [r2, #4]
    8d8a:	f361 339b 	bfi	r3, r1, #14, #14
    8d8e:	6053      	str	r3, [r2, #4]
}
    8d90:	bf00      	nop
    8d92:	3714      	adds	r7, #20
    8d94:	46bd      	mov	sp, r7
    8d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d9a:	4770      	bx	lr
    8d9c:	20000f34 	.word	0x20000f34

00008da0 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8da0:	b580      	push	{r7, lr}
    8da2:	b084      	sub	sp, #16
    8da4:	af00      	add	r7, sp, #0
    8da6:	60ba      	str	r2, [r7, #8]
    8da8:	607b      	str	r3, [r7, #4]
    8daa:	4603      	mov	r3, r0
    8dac:	73fb      	strb	r3, [r7, #15]
    8dae:	460b      	mov	r3, r1
    8db0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8db2:	68bb      	ldr	r3, [r7, #8]
    8db4:	b29a      	uxth	r2, r3
    8db6:	7bb9      	ldrb	r1, [r7, #14]
    8db8:	7bfb      	ldrb	r3, [r7, #15]
    8dba:	4618      	mov	r0, r3
    8dbc:	4b06      	ldr	r3, [pc, #24]	; (8dd8 <_usbd_ep_set_in_trans+0x38>)
    8dbe:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	b29a      	uxth	r2, r3
    8dc4:	7bb9      	ldrb	r1, [r7, #14]
    8dc6:	7bfb      	ldrb	r3, [r7, #15]
    8dc8:	4618      	mov	r0, r3
    8dca:	4b04      	ldr	r3, [pc, #16]	; (8ddc <_usbd_ep_set_in_trans+0x3c>)
    8dcc:	4798      	blx	r3
}
    8dce:	bf00      	nop
    8dd0:	3710      	adds	r7, #16
    8dd2:	46bd      	mov	sp, r7
    8dd4:	bd80      	pop	{r7, pc}
    8dd6:	bf00      	nop
    8dd8:	00008cd5 	.word	0x00008cd5
    8ddc:	00008c91 	.word	0x00008c91

00008de0 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8de0:	b580      	push	{r7, lr}
    8de2:	b084      	sub	sp, #16
    8de4:	af00      	add	r7, sp, #0
    8de6:	60ba      	str	r2, [r7, #8]
    8de8:	607b      	str	r3, [r7, #4]
    8dea:	4603      	mov	r3, r0
    8dec:	73fb      	strb	r3, [r7, #15]
    8dee:	460b      	mov	r3, r1
    8df0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8df2:	68bb      	ldr	r3, [r7, #8]
    8df4:	b29a      	uxth	r2, r3
    8df6:	7bb9      	ldrb	r1, [r7, #14]
    8df8:	7bfb      	ldrb	r3, [r7, #15]
    8dfa:	4618      	mov	r0, r3
    8dfc:	4b06      	ldr	r3, [pc, #24]	; (8e18 <_usbd_ep_set_out_trans+0x38>)
    8dfe:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	b29a      	uxth	r2, r3
    8e04:	7bb9      	ldrb	r1, [r7, #14]
    8e06:	7bfb      	ldrb	r3, [r7, #15]
    8e08:	4618      	mov	r0, r3
    8e0a:	4b04      	ldr	r3, [pc, #16]	; (8e1c <_usbd_ep_set_out_trans+0x3c>)
    8e0c:	4798      	blx	r3
}
    8e0e:	bf00      	nop
    8e10:	3710      	adds	r7, #16
    8e12:	46bd      	mov	sp, r7
    8e14:	bd80      	pop	{r7, pc}
    8e16:	bf00      	nop
    8e18:	00008d5d 	.word	0x00008d5d
    8e1c:	00008d19 	.word	0x00008d19

00008e20 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8e20:	b480      	push	{r7}
    8e22:	b085      	sub	sp, #20
    8e24:	af00      	add	r7, sp, #0
    8e26:	4603      	mov	r3, r0
    8e28:	460a      	mov	r2, r1
    8e2a:	71fb      	strb	r3, [r7, #7]
    8e2c:	4613      	mov	r3, r2
    8e2e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e30:	79fa      	ldrb	r2, [r7, #7]
    8e32:	79bb      	ldrb	r3, [r7, #6]
    8e34:	0052      	lsls	r2, r2, #1
    8e36:	4413      	add	r3, r2
    8e38:	011b      	lsls	r3, r3, #4
    8e3a:	4a06      	ldr	r2, [pc, #24]	; (8e54 <_usbd_ep_clear_bank_status+0x34>)
    8e3c:	4413      	add	r3, r2
    8e3e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8e40:	68fb      	ldr	r3, [r7, #12]
    8e42:	2200      	movs	r2, #0
    8e44:	729a      	strb	r2, [r3, #10]
}
    8e46:	bf00      	nop
    8e48:	3714      	adds	r7, #20
    8e4a:	46bd      	mov	sp, r7
    8e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e50:	4770      	bx	lr
    8e52:	bf00      	nop
    8e54:	20000f34 	.word	0x20000f34

00008e58 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8e58:	b580      	push	{r7, lr}
    8e5a:	b082      	sub	sp, #8
    8e5c:	af00      	add	r7, sp, #0
    8e5e:	4603      	mov	r3, r0
    8e60:	71fb      	strb	r3, [r7, #7]
    8e62:	460b      	mov	r3, r1
    8e64:	71bb      	strb	r3, [r7, #6]
    8e66:	4613      	mov	r3, r2
    8e68:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8e6a:	797b      	ldrb	r3, [r7, #5]
    8e6c:	2b00      	cmp	r3, #0
    8e6e:	d00b      	beq.n	8e88 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8e70:	79bb      	ldrb	r3, [r7, #6]
    8e72:	2240      	movs	r2, #64	; 0x40
    8e74:	fa02 f303 	lsl.w	r3, r2, r3
    8e78:	b2da      	uxtb	r2, r3
    8e7a:	79fb      	ldrb	r3, [r7, #7]
    8e7c:	4619      	mov	r1, r3
    8e7e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e82:	4b09      	ldr	r3, [pc, #36]	; (8ea8 <_usbd_ep_set_in_rdy+0x50>)
    8e84:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8e86:	e00a      	b.n	8e9e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8e88:	79bb      	ldrb	r3, [r7, #6]
    8e8a:	2240      	movs	r2, #64	; 0x40
    8e8c:	fa02 f303 	lsl.w	r3, r2, r3
    8e90:	b2da      	uxtb	r2, r3
    8e92:	79fb      	ldrb	r3, [r7, #7]
    8e94:	4619      	mov	r1, r3
    8e96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e9a:	4b04      	ldr	r3, [pc, #16]	; (8eac <_usbd_ep_set_in_rdy+0x54>)
    8e9c:	4798      	blx	r3
}
    8e9e:	bf00      	nop
    8ea0:	3708      	adds	r7, #8
    8ea2:	46bd      	mov	sp, r7
    8ea4:	bd80      	pop	{r7, pc}
    8ea6:	bf00      	nop
    8ea8:	00008465 	.word	0x00008465
    8eac:	000084b9 	.word	0x000084b9

00008eb0 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8eb0:	b580      	push	{r7, lr}
    8eb2:	b082      	sub	sp, #8
    8eb4:	af00      	add	r7, sp, #0
    8eb6:	4603      	mov	r3, r0
    8eb8:	71fb      	strb	r3, [r7, #7]
    8eba:	460b      	mov	r3, r1
    8ebc:	71bb      	strb	r3, [r7, #6]
    8ebe:	4613      	mov	r3, r2
    8ec0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8ec2:	797b      	ldrb	r3, [r7, #5]
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d00b      	beq.n	8ee0 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8ec8:	79bb      	ldrb	r3, [r7, #6]
    8eca:	2240      	movs	r2, #64	; 0x40
    8ecc:	fa02 f303 	lsl.w	r3, r2, r3
    8ed0:	b2da      	uxtb	r2, r3
    8ed2:	79fb      	ldrb	r3, [r7, #7]
    8ed4:	4619      	mov	r1, r3
    8ed6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8eda:	4b09      	ldr	r3, [pc, #36]	; (8f00 <_usbd_ep_set_out_rdy+0x50>)
    8edc:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8ede:	e00a      	b.n	8ef6 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8ee0:	79bb      	ldrb	r3, [r7, #6]
    8ee2:	2240      	movs	r2, #64	; 0x40
    8ee4:	fa02 f303 	lsl.w	r3, r2, r3
    8ee8:	b2da      	uxtb	r2, r3
    8eea:	79fb      	ldrb	r3, [r7, #7]
    8eec:	4619      	mov	r1, r3
    8eee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ef2:	4b04      	ldr	r3, [pc, #16]	; (8f04 <_usbd_ep_set_out_rdy+0x54>)
    8ef4:	4798      	blx	r3
}
    8ef6:	bf00      	nop
    8ef8:	3708      	adds	r7, #8
    8efa:	46bd      	mov	sp, r7
    8efc:	bd80      	pop	{r7, pc}
    8efe:	bf00      	nop
    8f00:	000084b9 	.word	0x000084b9
    8f04:	00008465 	.word	0x00008465

00008f08 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8f08:	b480      	push	{r7}
    8f0a:	b083      	sub	sp, #12
    8f0c:	af00      	add	r7, sp, #0
    8f0e:	4603      	mov	r3, r0
    8f10:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8f12:	88fb      	ldrh	r3, [r7, #6]
    8f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8f18:	d820      	bhi.n	8f5c <_usbd_ep_pcksize_size+0x54>
    8f1a:	88fb      	ldrh	r3, [r7, #6]
    8f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8f20:	d81a      	bhi.n	8f58 <_usbd_ep_pcksize_size+0x50>
    8f22:	88fb      	ldrh	r3, [r7, #6]
    8f24:	2b80      	cmp	r3, #128	; 0x80
    8f26:	d815      	bhi.n	8f54 <_usbd_ep_pcksize_size+0x4c>
    8f28:	88fb      	ldrh	r3, [r7, #6]
    8f2a:	2b40      	cmp	r3, #64	; 0x40
    8f2c:	d810      	bhi.n	8f50 <_usbd_ep_pcksize_size+0x48>
    8f2e:	88fb      	ldrh	r3, [r7, #6]
    8f30:	2b20      	cmp	r3, #32
    8f32:	d80b      	bhi.n	8f4c <_usbd_ep_pcksize_size+0x44>
    8f34:	88fb      	ldrh	r3, [r7, #6]
    8f36:	2b10      	cmp	r3, #16
    8f38:	d806      	bhi.n	8f48 <_usbd_ep_pcksize_size+0x40>
    8f3a:	88fb      	ldrh	r3, [r7, #6]
    8f3c:	2b08      	cmp	r3, #8
    8f3e:	bf8c      	ite	hi
    8f40:	2301      	movhi	r3, #1
    8f42:	2300      	movls	r3, #0
    8f44:	b2db      	uxtb	r3, r3
    8f46:	e00a      	b.n	8f5e <_usbd_ep_pcksize_size+0x56>
    8f48:	2302      	movs	r3, #2
    8f4a:	e008      	b.n	8f5e <_usbd_ep_pcksize_size+0x56>
    8f4c:	2303      	movs	r3, #3
    8f4e:	e006      	b.n	8f5e <_usbd_ep_pcksize_size+0x56>
    8f50:	2304      	movs	r3, #4
    8f52:	e004      	b.n	8f5e <_usbd_ep_pcksize_size+0x56>
    8f54:	2305      	movs	r3, #5
    8f56:	e002      	b.n	8f5e <_usbd_ep_pcksize_size+0x56>
    8f58:	2306      	movs	r3, #6
    8f5a:	e000      	b.n	8f5e <_usbd_ep_pcksize_size+0x56>
    8f5c:	2307      	movs	r3, #7
}
    8f5e:	4618      	mov	r0, r3
    8f60:	370c      	adds	r7, #12
    8f62:	46bd      	mov	sp, r7
    8f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f68:	4770      	bx	lr
	...

00008f6c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8f6c:	b480      	push	{r7}
    8f6e:	b085      	sub	sp, #20
    8f70:	af00      	add	r7, sp, #0
    8f72:	4603      	mov	r3, r0
    8f74:	460a      	mov	r2, r1
    8f76:	71fb      	strb	r3, [r7, #7]
    8f78:	4613      	mov	r3, r2
    8f7a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8f7c:	79fb      	ldrb	r3, [r7, #7]
    8f7e:	2b00      	cmp	r3, #0
    8f80:	d008      	beq.n	8f94 <_usb_d_dev_ept+0x28>
    8f82:	79bb      	ldrb	r3, [r7, #6]
    8f84:	2b00      	cmp	r3, #0
    8f86:	d003      	beq.n	8f90 <_usb_d_dev_ept+0x24>
    8f88:	79fb      	ldrb	r3, [r7, #7]
    8f8a:	3304      	adds	r3, #4
    8f8c:	b2db      	uxtb	r3, r3
    8f8e:	e002      	b.n	8f96 <_usb_d_dev_ept+0x2a>
    8f90:	79fb      	ldrb	r3, [r7, #7]
    8f92:	e000      	b.n	8f96 <_usb_d_dev_ept+0x2a>
    8f94:	2300      	movs	r3, #0
    8f96:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8f98:	7bfa      	ldrb	r2, [r7, #15]
    8f9a:	4613      	mov	r3, r2
    8f9c:	009b      	lsls	r3, r3, #2
    8f9e:	4413      	add	r3, r2
    8fa0:	009b      	lsls	r3, r3, #2
    8fa2:	3310      	adds	r3, #16
    8fa4:	4a04      	ldr	r2, [pc, #16]	; (8fb8 <_usb_d_dev_ept+0x4c>)
    8fa6:	4413      	add	r3, r2
    8fa8:	3304      	adds	r3, #4
}
    8faa:	4618      	mov	r0, r3
    8fac:	3714      	adds	r7, #20
    8fae:	46bd      	mov	sp, r7
    8fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fb4:	4770      	bx	lr
    8fb6:	bf00      	nop
    8fb8:	20000e6c 	.word	0x20000e6c

00008fbc <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8fbc:	b580      	push	{r7, lr}
    8fbe:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8fc0:	2104      	movs	r1, #4
    8fc2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fc6:	4b03      	ldr	r3, [pc, #12]	; (8fd4 <_usb_d_dev_sof+0x18>)
    8fc8:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8fca:	4b03      	ldr	r3, [pc, #12]	; (8fd8 <_usb_d_dev_sof+0x1c>)
    8fcc:	681b      	ldr	r3, [r3, #0]
    8fce:	4798      	blx	r3
}
    8fd0:	bf00      	nop
    8fd2:	bd80      	pop	{r7, pc}
    8fd4:	00008633 	.word	0x00008633
    8fd8:	20000e6c 	.word	0x20000e6c

00008fdc <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8fdc:	b580      	push	{r7, lr}
    8fde:	b084      	sub	sp, #16
    8fe0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8fe2:	2300      	movs	r3, #0
    8fe4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8fe6:	f240 2101 	movw	r1, #513	; 0x201
    8fea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fee:	4b1a      	ldr	r3, [pc, #104]	; (9058 <_usb_d_dev_lpmsusp+0x7c>)
    8ff0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8ff2:	f240 2101 	movw	r1, #513	; 0x201
    8ff6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ffa:	4b18      	ldr	r3, [pc, #96]	; (905c <_usb_d_dev_lpmsusp+0x80>)
    8ffc:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8ffe:	2170      	movs	r1, #112	; 0x70
    9000:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9004:	4b16      	ldr	r3, [pc, #88]	; (9060 <_usb_d_dev_lpmsusp+0x84>)
    9006:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9008:	2300      	movs	r3, #0
    900a:	73fb      	strb	r3, [r7, #15]
    900c:	e018      	b.n	9040 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    900e:	7bfb      	ldrb	r3, [r7, #15]
    9010:	015b      	lsls	r3, r3, #5
    9012:	4a14      	ldr	r2, [pc, #80]	; (9064 <_usb_d_dev_lpmsusp+0x88>)
    9014:	4413      	add	r3, r2
    9016:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9018:	687b      	ldr	r3, [r7, #4]
    901a:	891b      	ldrh	r3, [r3, #8]
    901c:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9020:	b2db      	uxtb	r3, r3
    9022:	2b03      	cmp	r3, #3
    9024:	d109      	bne.n	903a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9026:	687b      	ldr	r3, [r7, #4]
    9028:	891b      	ldrh	r3, [r3, #8]
    902a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    902e:	b29b      	uxth	r3, r3
    9030:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9032:	687b      	ldr	r3, [r7, #4]
    9034:	2200      	movs	r2, #0
    9036:	811a      	strh	r2, [r3, #8]
			break;
    9038:	e005      	b.n	9046 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    903a:	7bfb      	ldrb	r3, [r7, #15]
    903c:	3301      	adds	r3, #1
    903e:	73fb      	strb	r3, [r7, #15]
    9040:	7bfb      	ldrb	r3, [r7, #15]
    9042:	2b03      	cmp	r3, #3
    9044:	d9e3      	bls.n	900e <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9046:	4b08      	ldr	r3, [pc, #32]	; (9068 <_usb_d_dev_lpmsusp+0x8c>)
    9048:	685b      	ldr	r3, [r3, #4]
    904a:	68b9      	ldr	r1, [r7, #8]
    904c:	2003      	movs	r0, #3
    904e:	4798      	blx	r3
}
    9050:	bf00      	nop
    9052:	3710      	adds	r7, #16
    9054:	46bd      	mov	sp, r7
    9056:	bd80      	pop	{r7, pc}
    9058:	00008633 	.word	0x00008633
    905c:	00008689 	.word	0x00008689
    9060:	00008651 	.word	0x00008651
    9064:	20000f34 	.word	0x20000f34
    9068:	20000e6c 	.word	0x20000e6c

0000906c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    906c:	b580      	push	{r7, lr}
    906e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9070:	2180      	movs	r1, #128	; 0x80
    9072:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9076:	4b04      	ldr	r3, [pc, #16]	; (9088 <_usb_d_dev_ramerr+0x1c>)
    9078:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    907a:	4b04      	ldr	r3, [pc, #16]	; (908c <_usb_d_dev_ramerr+0x20>)
    907c:	685b      	ldr	r3, [r3, #4]
    907e:	2100      	movs	r1, #0
    9080:	2005      	movs	r0, #5
    9082:	4798      	blx	r3
}
    9084:	bf00      	nop
    9086:	bd80      	pop	{r7, pc}
    9088:	00008633 	.word	0x00008633
    908c:	20000e6c 	.word	0x20000e6c

00009090 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9090:	b580      	push	{r7, lr}
    9092:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9094:	2170      	movs	r1, #112	; 0x70
    9096:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    909a:	4b0b      	ldr	r3, [pc, #44]	; (90c8 <_usb_d_dev_wakeup+0x38>)
    909c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    909e:	2170      	movs	r1, #112	; 0x70
    90a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90a4:	4b09      	ldr	r3, [pc, #36]	; (90cc <_usb_d_dev_wakeup+0x3c>)
    90a6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    90a8:	f240 2101 	movw	r1, #513	; 0x201
    90ac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90b0:	4b07      	ldr	r3, [pc, #28]	; (90d0 <_usb_d_dev_wakeup+0x40>)
    90b2:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    90b4:	2000      	movs	r0, #0
    90b6:	4b07      	ldr	r3, [pc, #28]	; (90d4 <_usb_d_dev_wakeup+0x44>)
    90b8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    90ba:	4b07      	ldr	r3, [pc, #28]	; (90d8 <_usb_d_dev_wakeup+0x48>)
    90bc:	685b      	ldr	r3, [r3, #4]
    90be:	2100      	movs	r1, #0
    90c0:	2002      	movs	r0, #2
    90c2:	4798      	blx	r3
}
    90c4:	bf00      	nop
    90c6:	bd80      	pop	{r7, pc}
    90c8:	00008633 	.word	0x00008633
    90cc:	00008689 	.word	0x00008689
    90d0:	00008651 	.word	0x00008651
    90d4:	00008931 	.word	0x00008931
    90d8:	20000e6c 	.word	0x20000e6c

000090dc <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    90dc:	b580      	push	{r7, lr}
    90de:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    90e0:	2200      	movs	r2, #0
    90e2:	2100      	movs	r1, #0
    90e4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90e8:	4b0d      	ldr	r3, [pc, #52]	; (9120 <_usb_d_dev_reset+0x44>)
    90ea:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    90ec:	2108      	movs	r1, #8
    90ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90f2:	4b0c      	ldr	r3, [pc, #48]	; (9124 <_usb_d_dev_reset+0x48>)
    90f4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    90f6:	2170      	movs	r1, #112	; 0x70
    90f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90fc:	4b0a      	ldr	r3, [pc, #40]	; (9128 <_usb_d_dev_reset+0x4c>)
    90fe:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9100:	f240 2101 	movw	r1, #513	; 0x201
    9104:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9108:	4b08      	ldr	r3, [pc, #32]	; (912c <_usb_d_dev_reset+0x50>)
    910a:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    910c:	4b08      	ldr	r3, [pc, #32]	; (9130 <_usb_d_dev_reset+0x54>)
    910e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9110:	4b08      	ldr	r3, [pc, #32]	; (9134 <_usb_d_dev_reset+0x58>)
    9112:	685b      	ldr	r3, [r3, #4]
    9114:	2100      	movs	r1, #0
    9116:	2001      	movs	r0, #1
    9118:	4798      	blx	r3
}
    911a:	bf00      	nop
    911c:	bd80      	pop	{r7, pc}
    911e:	bf00      	nop
    9120:	000085c9 	.word	0x000085c9
    9124:	00008633 	.word	0x00008633
    9128:	00008689 	.word	0x00008689
    912c:	00008651 	.word	0x00008651
    9130:	00009c99 	.word	0x00009c99
    9134:	20000e6c 	.word	0x20000e6c

00009138 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9138:	b580      	push	{r7, lr}
    913a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    913c:	f240 2101 	movw	r1, #513	; 0x201
    9140:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9144:	4b09      	ldr	r3, [pc, #36]	; (916c <_usb_d_dev_suspend+0x34>)
    9146:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9148:	f240 2101 	movw	r1, #513	; 0x201
    914c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9150:	4b07      	ldr	r3, [pc, #28]	; (9170 <_usb_d_dev_suspend+0x38>)
    9152:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9154:	2170      	movs	r1, #112	; 0x70
    9156:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    915a:	4b06      	ldr	r3, [pc, #24]	; (9174 <_usb_d_dev_suspend+0x3c>)
    915c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    915e:	4b06      	ldr	r3, [pc, #24]	; (9178 <_usb_d_dev_suspend+0x40>)
    9160:	685b      	ldr	r3, [r3, #4]
    9162:	2100      	movs	r1, #0
    9164:	2004      	movs	r0, #4
    9166:	4798      	blx	r3
}
    9168:	bf00      	nop
    916a:	bd80      	pop	{r7, pc}
    916c:	00008633 	.word	0x00008633
    9170:	00008689 	.word	0x00008689
    9174:	00008651 	.word	0x00008651
    9178:	20000e6c 	.word	0x20000e6c

0000917c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    917c:	b580      	push	{r7, lr}
    917e:	b082      	sub	sp, #8
    9180:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9182:	2301      	movs	r3, #1
    9184:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9186:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    918a:	4b22      	ldr	r3, [pc, #136]	; (9214 <_usb_d_dev_handle_nep+0x98>)
    918c:	4798      	blx	r3
    918e:	4603      	mov	r3, r0
    9190:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9192:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9196:	4b20      	ldr	r3, [pc, #128]	; (9218 <_usb_d_dev_handle_nep+0x9c>)
    9198:	4798      	blx	r3
    919a:	4603      	mov	r3, r0
    919c:	461a      	mov	r2, r3
    919e:	88bb      	ldrh	r3, [r7, #4]
    91a0:	4013      	ands	r3, r2
    91a2:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    91a4:	88bb      	ldrh	r3, [r7, #4]
    91a6:	f003 0304 	and.w	r3, r3, #4
    91aa:	2b00      	cmp	r3, #0
    91ac:	d003      	beq.n	91b6 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    91ae:	4b1b      	ldr	r3, [pc, #108]	; (921c <_usb_d_dev_handle_nep+0xa0>)
    91b0:	4798      	blx	r3
		return true;
    91b2:	2301      	movs	r3, #1
    91b4:	e02a      	b.n	920c <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    91b6:	88bb      	ldrh	r3, [r7, #4]
    91b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    91bc:	2b00      	cmp	r3, #0
    91be:	d002      	beq.n	91c6 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    91c0:	4b17      	ldr	r3, [pc, #92]	; (9220 <_usb_d_dev_handle_nep+0xa4>)
    91c2:	4798      	blx	r3
    91c4:	e021      	b.n	920a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    91c6:	88bb      	ldrh	r3, [r7, #4]
    91c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    91cc:	2b00      	cmp	r3, #0
    91ce:	d002      	beq.n	91d6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    91d0:	4b14      	ldr	r3, [pc, #80]	; (9224 <_usb_d_dev_handle_nep+0xa8>)
    91d2:	4798      	blx	r3
    91d4:	e019      	b.n	920a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    91d6:	88bb      	ldrh	r3, [r7, #4]
    91d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    91dc:	2b00      	cmp	r3, #0
    91de:	d002      	beq.n	91e6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    91e0:	4b11      	ldr	r3, [pc, #68]	; (9228 <_usb_d_dev_handle_nep+0xac>)
    91e2:	4798      	blx	r3
    91e4:	e011      	b.n	920a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    91e6:	88bb      	ldrh	r3, [r7, #4]
    91e8:	f003 0308 	and.w	r3, r3, #8
    91ec:	2b00      	cmp	r3, #0
    91ee:	d002      	beq.n	91f6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    91f0:	4b0e      	ldr	r3, [pc, #56]	; (922c <_usb_d_dev_handle_nep+0xb0>)
    91f2:	4798      	blx	r3
    91f4:	e009      	b.n	920a <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    91f6:	88bb      	ldrh	r3, [r7, #4]
    91f8:	f003 0301 	and.w	r3, r3, #1
    91fc:	2b00      	cmp	r3, #0
    91fe:	d002      	beq.n	9206 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9200:	4b0b      	ldr	r3, [pc, #44]	; (9230 <_usb_d_dev_handle_nep+0xb4>)
    9202:	4798      	blx	r3
    9204:	e001      	b.n	920a <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9206:	2300      	movs	r3, #0
    9208:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    920a:	79fb      	ldrb	r3, [r7, #7]
}
    920c:	4618      	mov	r0, r3
    920e:	3708      	adds	r7, #8
    9210:	46bd      	mov	sp, r7
    9212:	bd80      	pop	{r7, pc}
    9214:	00008619 	.word	0x00008619
    9218:	0000866f 	.word	0x0000866f
    921c:	00008fbd 	.word	0x00008fbd
    9220:	00008fdd 	.word	0x00008fdd
    9224:	0000906d 	.word	0x0000906d
    9228:	00009091 	.word	0x00009091
    922c:	000090dd 	.word	0x000090dd
    9230:	00009139 	.word	0x00009139

00009234 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9234:	b590      	push	{r4, r7, lr}
    9236:	b089      	sub	sp, #36	; 0x24
    9238:	af00      	add	r7, sp, #0
    923a:	6078      	str	r0, [r7, #4]
    923c:	460b      	mov	r3, r1
    923e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9240:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9244:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	7c9b      	ldrb	r3, [r3, #18]
    924a:	f003 030f 	and.w	r3, r3, #15
    924e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9250:	7dfb      	ldrb	r3, [r7, #23]
    9252:	015b      	lsls	r3, r3, #5
    9254:	4a73      	ldr	r2, [pc, #460]	; (9424 <_usb_d_dev_in_next+0x1f0>)
    9256:	4413      	add	r3, r2
    9258:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    925a:	78fb      	ldrb	r3, [r7, #3]
    925c:	2b00      	cmp	r3, #0
    925e:	d006      	beq.n	926e <_usb_d_dev_in_next+0x3a>
    9260:	693b      	ldr	r3, [r7, #16]
    9262:	3310      	adds	r3, #16
    9264:	685b      	ldr	r3, [r3, #4]
    9266:	f3c3 030d 	ubfx	r3, r3, #0, #14
    926a:	b29b      	uxth	r3, r3
    926c:	e000      	b.n	9270 <_usb_d_dev_in_next+0x3c>
    926e:	2300      	movs	r3, #0
    9270:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9272:	687b      	ldr	r3, [r7, #4]
    9274:	8a1b      	ldrh	r3, [r3, #16]
    9276:	f240 32ff 	movw	r2, #1023	; 0x3ff
    927a:	4293      	cmp	r3, r2
    927c:	d103      	bne.n	9286 <_usb_d_dev_in_next+0x52>
    927e:	687b      	ldr	r3, [r7, #4]
    9280:	8a1b      	ldrh	r3, [r3, #16]
    9282:	b21b      	sxth	r3, r3
    9284:	e004      	b.n	9290 <_usb_d_dev_in_next+0x5c>
    9286:	687b      	ldr	r3, [r7, #4]
    9288:	8a1b      	ldrh	r3, [r3, #16]
    928a:	3b01      	subs	r3, #1
    928c:	b29b      	uxth	r3, r3
    928e:	b21b      	sxth	r3, r3
    9290:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9294:	4013      	ands	r3, r2
    9296:	b21b      	sxth	r3, r3
    9298:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    929a:	2300      	movs	r3, #0
    929c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    929e:	687b      	ldr	r3, [r7, #4]
    92a0:	7cdb      	ldrb	r3, [r3, #19]
    92a2:	f003 0307 	and.w	r3, r3, #7
    92a6:	b2db      	uxtb	r3, r3
    92a8:	2b01      	cmp	r3, #1
    92aa:	bf0c      	ite	eq
    92ac:	2301      	moveq	r3, #1
    92ae:	2300      	movne	r3, #0
    92b0:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    92b2:	78fb      	ldrb	r3, [r7, #3]
    92b4:	2b00      	cmp	r3, #0
    92b6:	d004      	beq.n	92c2 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    92b8:	7dfb      	ldrb	r3, [r7, #23]
    92ba:	2101      	movs	r1, #1
    92bc:	4618      	mov	r0, r3
    92be:	4b5a      	ldr	r3, [pc, #360]	; (9428 <_usb_d_dev_in_next+0x1f4>)
    92c0:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    92c2:	687b      	ldr	r3, [r7, #4]
    92c4:	689a      	ldr	r2, [r3, #8]
    92c6:	89fb      	ldrh	r3, [r7, #14]
    92c8:	441a      	add	r2, r3
    92ca:	687b      	ldr	r3, [r7, #4]
    92cc:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    92ce:	687b      	ldr	r3, [r7, #4]
    92d0:	689a      	ldr	r2, [r3, #8]
    92d2:	687b      	ldr	r3, [r7, #4]
    92d4:	685b      	ldr	r3, [r3, #4]
    92d6:	429a      	cmp	r2, r3
    92d8:	d243      	bcs.n	9362 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    92da:	687b      	ldr	r3, [r7, #4]
    92dc:	685b      	ldr	r3, [r3, #4]
    92de:	b29a      	uxth	r2, r3
    92e0:	687b      	ldr	r3, [r7, #4]
    92e2:	689b      	ldr	r3, [r3, #8]
    92e4:	b29b      	uxth	r3, r3
    92e6:	1ad3      	subs	r3, r2, r3
    92e8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	7cdb      	ldrb	r3, [r3, #19]
    92ee:	f003 0320 	and.w	r3, r3, #32
    92f2:	b2db      	uxtb	r3, r3
    92f4:	2b00      	cmp	r3, #0
    92f6:	d01b      	beq.n	9330 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    92f8:	687b      	ldr	r3, [r7, #4]
    92fa:	8a1b      	ldrh	r3, [r3, #16]
    92fc:	8bfa      	ldrh	r2, [r7, #30]
    92fe:	429a      	cmp	r2, r3
    9300:	d902      	bls.n	9308 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	8a1b      	ldrh	r3, [r3, #16]
    9306:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9308:	687b      	ldr	r3, [r7, #4]
    930a:	68d8      	ldr	r0, [r3, #12]
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	681a      	ldr	r2, [r3, #0]
    9310:	687b      	ldr	r3, [r7, #4]
    9312:	689b      	ldr	r3, [r3, #8]
    9314:	4413      	add	r3, r2
    9316:	8bfa      	ldrh	r2, [r7, #30]
    9318:	4619      	mov	r1, r3
    931a:	4b44      	ldr	r3, [pc, #272]	; (942c <_usb_d_dev_in_next+0x1f8>)
    931c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	68db      	ldr	r3, [r3, #12]
    9322:	461a      	mov	r2, r3
    9324:	7dfb      	ldrb	r3, [r7, #23]
    9326:	2101      	movs	r1, #1
    9328:	4618      	mov	r0, r3
    932a:	4b41      	ldr	r3, [pc, #260]	; (9430 <_usb_d_dev_in_next+0x1fc>)
    932c:	4798      	blx	r3
    932e:	e011      	b.n	9354 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9330:	8bfb      	ldrh	r3, [r7, #30]
    9332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9336:	d902      	bls.n	933e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    933c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    933e:	687b      	ldr	r3, [r7, #4]
    9340:	681a      	ldr	r2, [r3, #0]
    9342:	687b      	ldr	r3, [r7, #4]
    9344:	689b      	ldr	r3, [r3, #8]
    9346:	4413      	add	r3, r2
    9348:	461a      	mov	r2, r3
    934a:	7dfb      	ldrb	r3, [r7, #23]
    934c:	2101      	movs	r1, #1
    934e:	4618      	mov	r0, r3
    9350:	4b37      	ldr	r3, [pc, #220]	; (9430 <_usb_d_dev_in_next+0x1fc>)
    9352:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9354:	8bfa      	ldrh	r2, [r7, #30]
    9356:	7df8      	ldrb	r0, [r7, #23]
    9358:	2300      	movs	r3, #0
    935a:	2101      	movs	r1, #1
    935c:	4c35      	ldr	r4, [pc, #212]	; (9434 <_usb_d_dev_in_next+0x200>)
    935e:	47a0      	blx	r4
		goto _in_tx_exec;
    9360:	e041      	b.n	93e6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9362:	687b      	ldr	r3, [r7, #4]
    9364:	7cdb      	ldrb	r3, [r3, #19]
    9366:	f003 0310 	and.w	r3, r3, #16
    936a:	b2db      	uxtb	r3, r3
    936c:	2b00      	cmp	r3, #0
    936e:	d00b      	beq.n	9388 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9370:	687a      	ldr	r2, [r7, #4]
    9372:	7cd3      	ldrb	r3, [r2, #19]
    9374:	f36f 1304 	bfc	r3, #4, #1
    9378:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    937a:	7df8      	ldrb	r0, [r7, #23]
    937c:	2300      	movs	r3, #0
    937e:	2200      	movs	r2, #0
    9380:	2101      	movs	r1, #1
    9382:	4c2c      	ldr	r4, [pc, #176]	; (9434 <_usb_d_dev_in_next+0x200>)
    9384:	47a0      	blx	r4
		goto _in_tx_exec;
    9386:	e02e      	b.n	93e6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9388:	7afb      	ldrb	r3, [r7, #11]
    938a:	2b00      	cmp	r3, #0
    938c:	d006      	beq.n	939c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    938e:	7dfb      	ldrb	r3, [r7, #23]
    9390:	224b      	movs	r2, #75	; 0x4b
    9392:	4619      	mov	r1, r3
    9394:	69b8      	ldr	r0, [r7, #24]
    9396:	4b28      	ldr	r3, [pc, #160]	; (9438 <_usb_d_dev_in_next+0x204>)
    9398:	4798      	blx	r3
    939a:	e005      	b.n	93a8 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    939c:	7dfb      	ldrb	r3, [r7, #23]
    939e:	224a      	movs	r2, #74	; 0x4a
    93a0:	4619      	mov	r1, r3
    93a2:	69b8      	ldr	r0, [r7, #24]
    93a4:	4b24      	ldr	r3, [pc, #144]	; (9438 <_usb_d_dev_in_next+0x204>)
    93a6:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    93a8:	687b      	ldr	r3, [r7, #4]
    93aa:	8a1b      	ldrh	r3, [r3, #16]
    93ac:	89ba      	ldrh	r2, [r7, #12]
    93ae:	429a      	cmp	r2, r3
    93b0:	d114      	bne.n	93dc <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    93b2:	687a      	ldr	r2, [r7, #4]
    93b4:	7cd3      	ldrb	r3, [r2, #19]
    93b6:	f36f 1386 	bfc	r3, #6, #1
    93ba:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    93bc:	4b1f      	ldr	r3, [pc, #124]	; (943c <_usb_d_dev_in_next+0x208>)
    93be:	68db      	ldr	r3, [r3, #12]
    93c0:	687a      	ldr	r2, [r7, #4]
    93c2:	7c90      	ldrb	r0, [r2, #18]
    93c4:	687a      	ldr	r2, [r7, #4]
    93c6:	6892      	ldr	r2, [r2, #8]
    93c8:	4611      	mov	r1, r2
    93ca:	4798      	blx	r3
    93cc:	4603      	mov	r3, r0
    93ce:	2b00      	cmp	r3, #0
    93d0:	d124      	bne.n	941c <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    93d2:	687a      	ldr	r2, [r7, #4]
    93d4:	7cd3      	ldrb	r3, [r2, #19]
    93d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    93da:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    93dc:	2100      	movs	r1, #0
    93de:	6878      	ldr	r0, [r7, #4]
    93e0:	4b17      	ldr	r3, [pc, #92]	; (9440 <_usb_d_dev_in_next+0x20c>)
    93e2:	4798      	blx	r3
	return;
    93e4:	e01b      	b.n	941e <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    93e6:	78fb      	ldrb	r3, [r7, #3]
    93e8:	f083 0301 	eor.w	r3, r3, #1
    93ec:	b2db      	uxtb	r3, r3
    93ee:	2b00      	cmp	r3, #0
    93f0:	d00d      	beq.n	940e <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    93f2:	7afb      	ldrb	r3, [r7, #11]
    93f4:	2b00      	cmp	r3, #0
    93f6:	d002      	beq.n	93fe <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    93f8:	234e      	movs	r3, #78	; 0x4e
    93fa:	777b      	strb	r3, [r7, #29]
    93fc:	e001      	b.n	9402 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    93fe:	234a      	movs	r3, #74	; 0x4a
    9400:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9402:	7f7a      	ldrb	r2, [r7, #29]
    9404:	7dfb      	ldrb	r3, [r7, #23]
    9406:	4619      	mov	r1, r3
    9408:	69b8      	ldr	r0, [r7, #24]
    940a:	4b0e      	ldr	r3, [pc, #56]	; (9444 <_usb_d_dev_in_next+0x210>)
    940c:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    940e:	7dfb      	ldrb	r3, [r7, #23]
    9410:	2201      	movs	r2, #1
    9412:	2101      	movs	r1, #1
    9414:	4618      	mov	r0, r3
    9416:	4b0c      	ldr	r3, [pc, #48]	; (9448 <_usb_d_dev_in_next+0x214>)
    9418:	4798      	blx	r3
    941a:	e000      	b.n	941e <_usb_d_dev_in_next+0x1ea>
			return;
    941c:	bf00      	nop
}
    941e:	3724      	adds	r7, #36	; 0x24
    9420:	46bd      	mov	sp, r7
    9422:	bd90      	pop	{r4, r7, pc}
    9424:	20000f34 	.word	0x20000f34
    9428:	00008c2d 	.word	0x00008c2d
    942c:	00010295 	.word	0x00010295
    9430:	00008c59 	.word	0x00008c59
    9434:	00008da1 	.word	0x00008da1
    9438:	00008539 	.word	0x00008539
    943c:	20000e6c 	.word	0x20000e6c
    9440:	0000a55d 	.word	0x0000a55d
    9444:	0000850d 	.word	0x0000850d
    9448:	00008e59 	.word	0x00008e59

0000944c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    944c:	b590      	push	{r4, r7, lr}
    944e:	b08b      	sub	sp, #44	; 0x2c
    9450:	af00      	add	r7, sp, #0
    9452:	6078      	str	r0, [r7, #4]
    9454:	460b      	mov	r3, r1
    9456:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9458:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    945c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    945e:	687b      	ldr	r3, [r7, #4]
    9460:	7c9b      	ldrb	r3, [r3, #18]
    9462:	f003 030f 	and.w	r3, r3, #15
    9466:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9468:	7ffb      	ldrb	r3, [r7, #31]
    946a:	015b      	lsls	r3, r3, #5
    946c:	4a94      	ldr	r2, [pc, #592]	; (96c0 <_usb_d_dev_out_next+0x274>)
    946e:	4413      	add	r3, r2
    9470:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9472:	78fb      	ldrb	r3, [r7, #3]
    9474:	2b00      	cmp	r3, #0
    9476:	d005      	beq.n	9484 <_usb_d_dev_out_next+0x38>
    9478:	69bb      	ldr	r3, [r7, #24]
    947a:	685b      	ldr	r3, [r3, #4]
    947c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9480:	b29b      	uxth	r3, r3
    9482:	e000      	b.n	9486 <_usb_d_dev_out_next+0x3a>
    9484:	2300      	movs	r3, #0
    9486:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9488:	78fb      	ldrb	r3, [r7, #3]
    948a:	2b00      	cmp	r3, #0
    948c:	d005      	beq.n	949a <_usb_d_dev_out_next+0x4e>
    948e:	69bb      	ldr	r3, [r7, #24]
    9490:	685b      	ldr	r3, [r3, #4]
    9492:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9496:	b29b      	uxth	r3, r3
    9498:	e000      	b.n	949c <_usb_d_dev_out_next+0x50>
    949a:	2300      	movs	r3, #0
    949c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    949e:	687b      	ldr	r3, [r7, #4]
    94a0:	8a1b      	ldrh	r3, [r3, #16]
    94a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    94a6:	4293      	cmp	r3, r2
    94a8:	d004      	beq.n	94b4 <_usb_d_dev_out_next+0x68>
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	8a1b      	ldrh	r3, [r3, #16]
    94ae:	3b01      	subs	r3, #1
    94b0:	b29b      	uxth	r3, r3
    94b2:	e001      	b.n	94b8 <_usb_d_dev_out_next+0x6c>
    94b4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    94b8:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    94ba:	8aba      	ldrh	r2, [r7, #20]
    94bc:	8a7b      	ldrh	r3, [r7, #18]
    94be:	4013      	ands	r3, r2
    94c0:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    94c2:	687b      	ldr	r3, [r7, #4]
    94c4:	7cdb      	ldrb	r3, [r3, #19]
    94c6:	f003 0307 	and.w	r3, r3, #7
    94ca:	b2db      	uxtb	r3, r3
    94cc:	2b01      	cmp	r3, #1
    94ce:	bf0c      	ite	eq
    94d0:	2301      	moveq	r3, #1
    94d2:	2300      	movne	r3, #0
    94d4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    94d6:	78fb      	ldrb	r3, [r7, #3]
    94d8:	2b00      	cmp	r3, #0
    94da:	d004      	beq.n	94e6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    94dc:	7ffb      	ldrb	r3, [r7, #31]
    94de:	2100      	movs	r1, #0
    94e0:	4618      	mov	r0, r3
    94e2:	4b78      	ldr	r3, [pc, #480]	; (96c4 <_usb_d_dev_out_next+0x278>)
    94e4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    94e6:	687b      	ldr	r3, [r7, #4]
    94e8:	7cdb      	ldrb	r3, [r3, #19]
    94ea:	f003 0320 	and.w	r3, r3, #32
    94ee:	b2db      	uxtb	r3, r3
    94f0:	2b00      	cmp	r3, #0
    94f2:	d01c      	beq.n	952e <_usb_d_dev_out_next+0xe2>
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	685b      	ldr	r3, [r3, #4]
    94f8:	2b00      	cmp	r3, #0
    94fa:	d018      	beq.n	952e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    94fc:	687b      	ldr	r3, [r7, #4]
    94fe:	685b      	ldr	r3, [r3, #4]
    9500:	b29a      	uxth	r2, r3
    9502:	687b      	ldr	r3, [r7, #4]
    9504:	689b      	ldr	r3, [r3, #8]
    9506:	b29b      	uxth	r3, r3
    9508:	1ad3      	subs	r3, r2, r3
    950a:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    950c:	687b      	ldr	r3, [r7, #4]
    950e:	681a      	ldr	r2, [r3, #0]
    9510:	687b      	ldr	r3, [r7, #4]
    9512:	689b      	ldr	r3, [r3, #8]
    9514:	18d0      	adds	r0, r2, r3
    9516:	687b      	ldr	r3, [r7, #4]
    9518:	68d9      	ldr	r1, [r3, #12]
    951a:	89ba      	ldrh	r2, [r7, #12]
    951c:	8a3b      	ldrh	r3, [r7, #16]
    951e:	429a      	cmp	r2, r3
    9520:	d901      	bls.n	9526 <_usb_d_dev_out_next+0xda>
    9522:	8a3b      	ldrh	r3, [r7, #16]
    9524:	e000      	b.n	9528 <_usb_d_dev_out_next+0xdc>
    9526:	89bb      	ldrh	r3, [r7, #12]
    9528:	461a      	mov	r2, r3
    952a:	4b67      	ldr	r3, [pc, #412]	; (96c8 <_usb_d_dev_out_next+0x27c>)
    952c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    952e:	687b      	ldr	r3, [r7, #4]
    9530:	685b      	ldr	r3, [r3, #4]
    9532:	2b00      	cmp	r3, #0
    9534:	d121      	bne.n	957a <_usb_d_dev_out_next+0x12e>
    9536:	687b      	ldr	r3, [r7, #4]
    9538:	7cdb      	ldrb	r3, [r3, #19]
    953a:	f003 0310 	and.w	r3, r3, #16
    953e:	b2db      	uxtb	r3, r3
    9540:	2b00      	cmp	r3, #0
    9542:	d01a      	beq.n	957a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9544:	687a      	ldr	r2, [r7, #4]
    9546:	7cd3      	ldrb	r3, [r2, #19]
    9548:	f36f 1304 	bfc	r3, #4, #1
    954c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    954e:	687a      	ldr	r2, [r7, #4]
    9550:	7cd3      	ldrb	r3, [r2, #19]
    9552:	f043 0320 	orr.w	r3, r3, #32
    9556:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9558:	687b      	ldr	r3, [r7, #4]
    955a:	68db      	ldr	r3, [r3, #12]
    955c:	461a      	mov	r2, r3
    955e:	7ffb      	ldrb	r3, [r7, #31]
    9560:	2100      	movs	r1, #0
    9562:	4618      	mov	r0, r3
    9564:	4b59      	ldr	r3, [pc, #356]	; (96cc <_usb_d_dev_out_next+0x280>)
    9566:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9568:	687b      	ldr	r3, [r7, #4]
    956a:	8a1b      	ldrh	r3, [r3, #16]
    956c:	461a      	mov	r2, r3
    956e:	7ff8      	ldrb	r0, [r7, #31]
    9570:	2300      	movs	r3, #0
    9572:	2100      	movs	r1, #0
    9574:	4c56      	ldr	r4, [pc, #344]	; (96d0 <_usb_d_dev_out_next+0x284>)
    9576:	47a0      	blx	r4
		goto _out_rx_exec;
    9578:	e090      	b.n	969c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    957a:	78fb      	ldrb	r3, [r7, #3]
    957c:	2b00      	cmp	r3, #0
    957e:	d010      	beq.n	95a2 <_usb_d_dev_out_next+0x156>
    9580:	687b      	ldr	r3, [r7, #4]
    9582:	8a1b      	ldrh	r3, [r3, #16]
    9584:	8a3a      	ldrh	r2, [r7, #16]
    9586:	429a      	cmp	r2, r3
    9588:	d20b      	bcs.n	95a2 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    958a:	687a      	ldr	r2, [r7, #4]
    958c:	7cd3      	ldrb	r3, [r2, #19]
    958e:	f36f 1304 	bfc	r3, #4, #1
    9592:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	689a      	ldr	r2, [r3, #8]
    9598:	8abb      	ldrh	r3, [r7, #20]
    959a:	441a      	add	r2, r3
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	609a      	str	r2, [r3, #8]
    95a0:	e05c      	b.n	965c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    95a2:	687b      	ldr	r3, [r7, #4]
    95a4:	689a      	ldr	r2, [r3, #8]
    95a6:	8afb      	ldrh	r3, [r7, #22]
    95a8:	441a      	add	r2, r3
    95aa:	687b      	ldr	r3, [r7, #4]
    95ac:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	689a      	ldr	r2, [r3, #8]
    95b2:	687b      	ldr	r3, [r7, #4]
    95b4:	685b      	ldr	r3, [r3, #4]
    95b6:	429a      	cmp	r2, r3
    95b8:	d250      	bcs.n	965c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    95ba:	687b      	ldr	r3, [r7, #4]
    95bc:	685b      	ldr	r3, [r3, #4]
    95be:	b29a      	uxth	r2, r3
    95c0:	687b      	ldr	r3, [r7, #4]
    95c2:	689b      	ldr	r3, [r3, #8]
    95c4:	b29b      	uxth	r3, r3
    95c6:	1ad3      	subs	r3, r2, r3
    95c8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    95ca:	687b      	ldr	r3, [r7, #4]
    95cc:	7cdb      	ldrb	r3, [r3, #19]
    95ce:	f003 0320 	and.w	r3, r3, #32
    95d2:	b2db      	uxtb	r3, r3
    95d4:	2b00      	cmp	r3, #0
    95d6:	d010      	beq.n	95fa <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    95d8:	687b      	ldr	r3, [r7, #4]
    95da:	8a1b      	ldrh	r3, [r3, #16]
    95dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    95de:	429a      	cmp	r2, r3
    95e0:	d902      	bls.n	95e8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    95e2:	687b      	ldr	r3, [r7, #4]
    95e4:	8a1b      	ldrh	r3, [r3, #16]
    95e6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    95e8:	687b      	ldr	r3, [r7, #4]
    95ea:	68db      	ldr	r3, [r3, #12]
    95ec:	461a      	mov	r2, r3
    95ee:	7ffb      	ldrb	r3, [r7, #31]
    95f0:	2100      	movs	r1, #0
    95f2:	4618      	mov	r0, r3
    95f4:	4b35      	ldr	r3, [pc, #212]	; (96cc <_usb_d_dev_out_next+0x280>)
    95f6:	4798      	blx	r3
    95f8:	e029      	b.n	964e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    95fa:	687b      	ldr	r3, [r7, #4]
    95fc:	8a1b      	ldrh	r3, [r3, #16]
    95fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9600:	429a      	cmp	r2, r3
    9602:	d90f      	bls.n	9624 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9604:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    960a:	d903      	bls.n	9614 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    960c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9610:	84fb      	strh	r3, [r7, #38]	; 0x26
    9612:	e011      	b.n	9638 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9614:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9616:	8a7b      	ldrh	r3, [r7, #18]
    9618:	4013      	ands	r3, r2
    961a:	b29b      	uxth	r3, r3
    961c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    961e:	1ad3      	subs	r3, r2, r3
    9620:	84fb      	strh	r3, [r7, #38]	; 0x26
    9622:	e009      	b.n	9638 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9624:	687b      	ldr	r3, [r7, #4]
    9626:	8a1b      	ldrh	r3, [r3, #16]
    9628:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    962a:	429a      	cmp	r2, r3
    962c:	d204      	bcs.n	9638 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    962e:	687a      	ldr	r2, [r7, #4]
    9630:	7cd3      	ldrb	r3, [r2, #19]
    9632:	f043 0320 	orr.w	r3, r3, #32
    9636:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9638:	687b      	ldr	r3, [r7, #4]
    963a:	681a      	ldr	r2, [r3, #0]
    963c:	687b      	ldr	r3, [r7, #4]
    963e:	689b      	ldr	r3, [r3, #8]
    9640:	4413      	add	r3, r2
    9642:	461a      	mov	r2, r3
    9644:	7ffb      	ldrb	r3, [r7, #31]
    9646:	2100      	movs	r1, #0
    9648:	4618      	mov	r0, r3
    964a:	4b20      	ldr	r3, [pc, #128]	; (96cc <_usb_d_dev_out_next+0x280>)
    964c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    964e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9650:	7ff8      	ldrb	r0, [r7, #31]
    9652:	2300      	movs	r3, #0
    9654:	2100      	movs	r1, #0
    9656:	4c1e      	ldr	r4, [pc, #120]	; (96d0 <_usb_d_dev_out_next+0x284>)
    9658:	47a0      	blx	r4
			goto _out_rx_exec;
    965a:	e01f      	b.n	969c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    965c:	7bfb      	ldrb	r3, [r7, #15]
    965e:	2b00      	cmp	r3, #0
    9660:	d006      	beq.n	9670 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9662:	7ffb      	ldrb	r3, [r7, #31]
    9664:	222d      	movs	r2, #45	; 0x2d
    9666:	4619      	mov	r1, r3
    9668:	6a38      	ldr	r0, [r7, #32]
    966a:	4b1a      	ldr	r3, [pc, #104]	; (96d4 <_usb_d_dev_out_next+0x288>)
    966c:	4798      	blx	r3
    966e:	e005      	b.n	967c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9670:	7ffb      	ldrb	r3, [r7, #31]
    9672:	2225      	movs	r2, #37	; 0x25
    9674:	4619      	mov	r1, r3
    9676:	6a38      	ldr	r0, [r7, #32]
    9678:	4b16      	ldr	r3, [pc, #88]	; (96d4 <_usb_d_dev_out_next+0x288>)
    967a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    967c:	7ffb      	ldrb	r3, [r7, #31]
    967e:	2b00      	cmp	r3, #0
    9680:	d107      	bne.n	9692 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9682:	687b      	ldr	r3, [r7, #4]
    9684:	68db      	ldr	r3, [r3, #12]
    9686:	461a      	mov	r2, r3
    9688:	7ffb      	ldrb	r3, [r7, #31]
    968a:	2100      	movs	r1, #0
    968c:	4618      	mov	r0, r3
    968e:	4b0f      	ldr	r3, [pc, #60]	; (96cc <_usb_d_dev_out_next+0x280>)
    9690:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9692:	2100      	movs	r1, #0
    9694:	6878      	ldr	r0, [r7, #4]
    9696:	4b10      	ldr	r3, [pc, #64]	; (96d8 <_usb_d_dev_out_next+0x28c>)
    9698:	4798      	blx	r3
	return;
    969a:	e031      	b.n	9700 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    969c:	78fb      	ldrb	r3, [r7, #3]
    969e:	f083 0301 	eor.w	r3, r3, #1
    96a2:	b2db      	uxtb	r3, r3
    96a4:	2b00      	cmp	r3, #0
    96a6:	d025      	beq.n	96f4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    96a8:	7bfb      	ldrb	r3, [r7, #15]
    96aa:	2b00      	cmp	r3, #0
    96ac:	d018      	beq.n	96e0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    96ae:	7ffb      	ldrb	r3, [r7, #31]
    96b0:	2101      	movs	r1, #1
    96b2:	4618      	mov	r0, r3
    96b4:	4b09      	ldr	r3, [pc, #36]	; (96dc <_usb_d_dev_out_next+0x290>)
    96b6:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    96b8:	232d      	movs	r3, #45	; 0x2d
    96ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    96be:	e012      	b.n	96e6 <_usb_d_dev_out_next+0x29a>
    96c0:	20000f34 	.word	0x20000f34
    96c4:	00008c2d 	.word	0x00008c2d
    96c8:	00010295 	.word	0x00010295
    96cc:	00008c59 	.word	0x00008c59
    96d0:	00008de1 	.word	0x00008de1
    96d4:	00008539 	.word	0x00008539
    96d8:	0000a55d 	.word	0x0000a55d
    96dc:	00008e21 	.word	0x00008e21
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    96e0:	2325      	movs	r3, #37	; 0x25
    96e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    96e6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    96ea:	7ffb      	ldrb	r3, [r7, #31]
    96ec:	4619      	mov	r1, r3
    96ee:	6a38      	ldr	r0, [r7, #32]
    96f0:	4b05      	ldr	r3, [pc, #20]	; (9708 <_usb_d_dev_out_next+0x2bc>)
    96f2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    96f4:	7ffb      	ldrb	r3, [r7, #31]
    96f6:	2201      	movs	r2, #1
    96f8:	2100      	movs	r1, #0
    96fa:	4618      	mov	r0, r3
    96fc:	4b03      	ldr	r3, [pc, #12]	; (970c <_usb_d_dev_out_next+0x2c0>)
    96fe:	4798      	blx	r3
}
    9700:	372c      	adds	r7, #44	; 0x2c
    9702:	46bd      	mov	sp, r7
    9704:	bd90      	pop	{r4, r7, pc}
    9706:	bf00      	nop
    9708:	0000850d 	.word	0x0000850d
    970c:	00008eb1 	.word	0x00008eb1

00009710 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9710:	b580      	push	{r7, lr}
    9712:	b084      	sub	sp, #16
    9714:	af00      	add	r7, sp, #0
    9716:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9718:	687b      	ldr	r3, [r7, #4]
    971a:	7c9b      	ldrb	r3, [r3, #18]
    971c:	f003 030f 	and.w	r3, r3, #15
    9720:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9722:	687b      	ldr	r3, [r7, #4]
    9724:	7cdb      	ldrb	r3, [r3, #19]
    9726:	f003 0307 	and.w	r3, r3, #7
    972a:	b2db      	uxtb	r3, r3
    972c:	2b01      	cmp	r3, #1
    972e:	bf0c      	ite	eq
    9730:	2301      	moveq	r3, #1
    9732:	2300      	movne	r3, #0
    9734:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9736:	7bbb      	ldrb	r3, [r7, #14]
    9738:	f083 0301 	eor.w	r3, r3, #1
    973c:	b2db      	uxtb	r3, r3
    973e:	2b00      	cmp	r3, #0
    9740:	d008      	beq.n	9754 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9742:	7bfb      	ldrb	r3, [r7, #15]
    9744:	4618      	mov	r0, r3
    9746:	4b20      	ldr	r3, [pc, #128]	; (97c8 <_usb_d_dev_handle_setup+0xb8>)
    9748:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    974a:	7bfb      	ldrb	r3, [r7, #15]
    974c:	4618      	mov	r0, r3
    974e:	4b1f      	ldr	r3, [pc, #124]	; (97cc <_usb_d_dev_handle_setup+0xbc>)
    9750:	4798      	blx	r3
		return;
    9752:	e036      	b.n	97c2 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9754:	687b      	ldr	r3, [r7, #4]
    9756:	7cdb      	ldrb	r3, [r3, #19]
    9758:	f003 0340 	and.w	r3, r3, #64	; 0x40
    975c:	b2db      	uxtb	r3, r3
    975e:	2b00      	cmp	r3, #0
    9760:	d010      	beq.n	9784 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9762:	687a      	ldr	r2, [r7, #4]
    9764:	7cd3      	ldrb	r3, [r2, #19]
    9766:	f36f 1386 	bfc	r3, #6, #1
    976a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    976c:	7bfb      	ldrb	r3, [r7, #15]
    976e:	2200      	movs	r2, #0
    9770:	2101      	movs	r1, #1
    9772:	4618      	mov	r0, r3
    9774:	4b16      	ldr	r3, [pc, #88]	; (97d0 <_usb_d_dev_handle_setup+0xc0>)
    9776:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9778:	7bfb      	ldrb	r3, [r7, #15]
    977a:	2200      	movs	r2, #0
    977c:	2100      	movs	r1, #0
    977e:	4618      	mov	r0, r3
    9780:	4b14      	ldr	r3, [pc, #80]	; (97d4 <_usb_d_dev_handle_setup+0xc4>)
    9782:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9784:	687a      	ldr	r2, [r7, #4]
    9786:	7cd3      	ldrb	r3, [r2, #19]
    9788:	f36f 03c3 	bfc	r3, #3, #1
    978c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    978e:	7bfb      	ldrb	r3, [r7, #15]
    9790:	2100      	movs	r1, #0
    9792:	4618      	mov	r0, r3
    9794:	4b10      	ldr	r3, [pc, #64]	; (97d8 <_usb_d_dev_handle_setup+0xc8>)
    9796:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9798:	7bfb      	ldrb	r3, [r7, #15]
    979a:	2101      	movs	r1, #1
    979c:	4618      	mov	r0, r3
    979e:	4b0e      	ldr	r3, [pc, #56]	; (97d8 <_usb_d_dev_handle_setup+0xc8>)
    97a0:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    97a2:	7bfb      	ldrb	r3, [r7, #15]
    97a4:	216f      	movs	r1, #111	; 0x6f
    97a6:	4618      	mov	r0, r3
    97a8:	4b0c      	ldr	r3, [pc, #48]	; (97dc <_usb_d_dev_handle_setup+0xcc>)
    97aa:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    97ac:	7bfb      	ldrb	r3, [r7, #15]
    97ae:	216f      	movs	r1, #111	; 0x6f
    97b0:	4618      	mov	r0, r3
    97b2:	4b0b      	ldr	r3, [pc, #44]	; (97e0 <_usb_d_dev_handle_setup+0xd0>)
    97b4:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    97b6:	4b0b      	ldr	r3, [pc, #44]	; (97e4 <_usb_d_dev_handle_setup+0xd4>)
    97b8:	689b      	ldr	r3, [r3, #8]
    97ba:	687a      	ldr	r2, [r7, #4]
    97bc:	7c92      	ldrb	r2, [r2, #18]
    97be:	4610      	mov	r0, r2
    97c0:	4798      	blx	r3
}
    97c2:	3710      	adds	r7, #16
    97c4:	46bd      	mov	sp, r7
    97c6:	bd80      	pop	{r7, pc}
    97c8:	00008bb5 	.word	0x00008bb5
    97cc:	00008b61 	.word	0x00008b61
    97d0:	00008e59 	.word	0x00008e59
    97d4:	00008eb1 	.word	0x00008eb1
    97d8:	00008e21 	.word	0x00008e21
    97dc:	00008961 	.word	0x00008961
    97e0:	000089b1 	.word	0x000089b1
    97e4:	20000e6c 	.word	0x20000e6c

000097e8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    97e8:	b580      	push	{r7, lr}
    97ea:	b084      	sub	sp, #16
    97ec:	af00      	add	r7, sp, #0
    97ee:	6078      	str	r0, [r7, #4]
    97f0:	460b      	mov	r3, r1
    97f2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	7c9b      	ldrb	r3, [r3, #18]
    97f8:	f003 030f 	and.w	r3, r3, #15
    97fc:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    97fe:	78f9      	ldrb	r1, [r7, #3]
    9800:	7bfb      	ldrb	r3, [r7, #15]
    9802:	2200      	movs	r2, #0
    9804:	4618      	mov	r0, r3
    9806:	4b07      	ldr	r3, [pc, #28]	; (9824 <_usb_d_dev_handle_stall+0x3c>)
    9808:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    980a:	4b07      	ldr	r3, [pc, #28]	; (9828 <_usb_d_dev_handle_stall+0x40>)
    980c:	691b      	ldr	r3, [r3, #16]
    980e:	687a      	ldr	r2, [r7, #4]
    9810:	7c90      	ldrb	r0, [r2, #18]
    9812:	687a      	ldr	r2, [r7, #4]
    9814:	6892      	ldr	r2, [r2, #8]
    9816:	2101      	movs	r1, #1
    9818:	4798      	blx	r3
}
    981a:	bf00      	nop
    981c:	3710      	adds	r7, #16
    981e:	46bd      	mov	sp, r7
    9820:	bd80      	pop	{r7, pc}
    9822:	bf00      	nop
    9824:	00008b15 	.word	0x00008b15
    9828:	20000e6c 	.word	0x20000e6c

0000982c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    982c:	b580      	push	{r7, lr}
    982e:	b088      	sub	sp, #32
    9830:	af00      	add	r7, sp, #0
    9832:	6078      	str	r0, [r7, #4]
    9834:	460b      	mov	r3, r1
    9836:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9838:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    983c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    983e:	687b      	ldr	r3, [r7, #4]
    9840:	7c9b      	ldrb	r3, [r3, #18]
    9842:	f003 030f 	and.w	r3, r3, #15
    9846:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9848:	4b61      	ldr	r3, [pc, #388]	; (99d0 <_usb_d_dev_handle_trfail+0x1a4>)
    984a:	881b      	ldrh	r3, [r3, #0]
    984c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    984e:	7efb      	ldrb	r3, [r7, #27]
    9850:	015b      	lsls	r3, r3, #5
    9852:	4a60      	ldr	r2, [pc, #384]	; (99d4 <_usb_d_dev_handle_trfail+0x1a8>)
    9854:	4413      	add	r3, r2
    9856:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9858:	78fb      	ldrb	r3, [r7, #3]
    985a:	2b00      	cmp	r3, #0
    985c:	d006      	beq.n	986c <_usb_d_dev_handle_trfail+0x40>
    985e:	7efb      	ldrb	r3, [r7, #27]
    9860:	4619      	mov	r1, r3
    9862:	69f8      	ldr	r0, [r7, #28]
    9864:	4b5c      	ldr	r3, [pc, #368]	; (99d8 <_usb_d_dev_handle_trfail+0x1ac>)
    9866:	4798      	blx	r3
    9868:	4603      	mov	r3, r0
    986a:	e005      	b.n	9878 <_usb_d_dev_handle_trfail+0x4c>
    986c:	7efb      	ldrb	r3, [r7, #27]
    986e:	4619      	mov	r1, r3
    9870:	69f8      	ldr	r0, [r7, #28]
    9872:	4b5a      	ldr	r3, [pc, #360]	; (99dc <_usb_d_dev_handle_trfail+0x1b0>)
    9874:	4798      	blx	r3
    9876:	4603      	mov	r3, r0
    9878:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    987a:	687b      	ldr	r3, [r7, #4]
    987c:	7cdb      	ldrb	r3, [r3, #19]
    987e:	f003 0307 	and.w	r3, r3, #7
    9882:	b2db      	uxtb	r3, r3
    9884:	2b01      	cmp	r3, #1
    9886:	bf0c      	ite	eq
    9888:	2301      	moveq	r3, #1
    988a:	2300      	movne	r3, #0
    988c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    988e:	78fb      	ldrb	r3, [r7, #3]
    9890:	011b      	lsls	r3, r3, #4
    9892:	697a      	ldr	r2, [r7, #20]
    9894:	4413      	add	r3, r2
    9896:	7a9b      	ldrb	r3, [r3, #10]
    9898:	b2db      	uxtb	r3, r3
    989a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    989c:	7cfb      	ldrb	r3, [r7, #19]
    989e:	2b02      	cmp	r3, #2
    98a0:	d12f      	bne.n	9902 <_usb_d_dev_handle_trfail+0xd6>
    98a2:	7b3b      	ldrb	r3, [r7, #12]
    98a4:	f003 0301 	and.w	r3, r3, #1
    98a8:	b2db      	uxtb	r3, r3
    98aa:	2b00      	cmp	r3, #0
    98ac:	d029      	beq.n	9902 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    98ae:	78fb      	ldrb	r3, [r7, #3]
    98b0:	011b      	lsls	r3, r3, #4
    98b2:	697a      	ldr	r2, [r7, #20]
    98b4:	441a      	add	r2, r3
    98b6:	7a93      	ldrb	r3, [r2, #10]
    98b8:	f36f 0300 	bfc	r3, #0, #1
    98bc:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    98be:	78fb      	ldrb	r3, [r7, #3]
    98c0:	f107 0220 	add.w	r2, r7, #32
    98c4:	4413      	add	r3, r2
    98c6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    98ca:	7efb      	ldrb	r3, [r7, #27]
    98cc:	4619      	mov	r1, r3
    98ce:	69f8      	ldr	r0, [r7, #28]
    98d0:	4b43      	ldr	r3, [pc, #268]	; (99e0 <_usb_d_dev_handle_trfail+0x1b4>)
    98d2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    98d4:	78fb      	ldrb	r3, [r7, #3]
    98d6:	f107 0220 	add.w	r2, r7, #32
    98da:	4413      	add	r3, r2
    98dc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    98e0:	7efb      	ldrb	r3, [r7, #27]
    98e2:	4619      	mov	r1, r3
    98e4:	69f8      	ldr	r0, [r7, #28]
    98e6:	4b3f      	ldr	r3, [pc, #252]	; (99e4 <_usb_d_dev_handle_trfail+0x1b8>)
    98e8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    98ea:	78fb      	ldrb	r3, [r7, #3]
    98ec:	2b00      	cmp	r3, #0
    98ee:	bf14      	ite	ne
    98f0:	2301      	movne	r3, #1
    98f2:	2300      	moveq	r3, #0
    98f4:	b2db      	uxtb	r3, r3
    98f6:	2204      	movs	r2, #4
    98f8:	4619      	mov	r1, r3
    98fa:	6878      	ldr	r0, [r7, #4]
    98fc:	4b3a      	ldr	r3, [pc, #232]	; (99e8 <_usb_d_dev_handle_trfail+0x1bc>)
    98fe:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9900:	e062      	b.n	99c8 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9902:	7b3b      	ldrb	r3, [r7, #12]
    9904:	f003 0302 	and.w	r3, r3, #2
    9908:	b2db      	uxtb	r3, r3
    990a:	2b00      	cmp	r3, #0
    990c:	d040      	beq.n	9990 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    990e:	78fb      	ldrb	r3, [r7, #3]
    9910:	011b      	lsls	r3, r3, #4
    9912:	697a      	ldr	r2, [r7, #20]
    9914:	441a      	add	r2, r3
    9916:	7a93      	ldrb	r3, [r2, #10]
    9918:	f36f 0341 	bfc	r3, #1, #1
    991c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    991e:	78fb      	ldrb	r3, [r7, #3]
    9920:	f107 0220 	add.w	r2, r7, #32
    9924:	4413      	add	r3, r2
    9926:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    992a:	7efb      	ldrb	r3, [r7, #27]
    992c:	4619      	mov	r1, r3
    992e:	69f8      	ldr	r0, [r7, #28]
    9930:	4b2b      	ldr	r3, [pc, #172]	; (99e0 <_usb_d_dev_handle_trfail+0x1b4>)
    9932:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9934:	78fb      	ldrb	r3, [r7, #3]
    9936:	f107 0220 	add.w	r2, r7, #32
    993a:	4413      	add	r3, r2
    993c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9940:	7efb      	ldrb	r3, [r7, #27]
    9942:	4619      	mov	r1, r3
    9944:	69f8      	ldr	r0, [r7, #28]
    9946:	4b27      	ldr	r3, [pc, #156]	; (99e4 <_usb_d_dev_handle_trfail+0x1b8>)
    9948:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    994a:	7cbb      	ldrb	r3, [r7, #18]
    994c:	2b00      	cmp	r3, #0
    994e:	d03b      	beq.n	99c8 <_usb_d_dev_handle_trfail+0x19c>
    9950:	687b      	ldr	r3, [r7, #4]
    9952:	7cdb      	ldrb	r3, [r3, #19]
    9954:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9958:	b2db      	uxtb	r3, r3
    995a:	2b00      	cmp	r3, #0
    995c:	d034      	beq.n	99c8 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    995e:	687b      	ldr	r3, [r7, #4]
    9960:	7cdb      	ldrb	r3, [r3, #19]
    9962:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9966:	b2db      	uxtb	r3, r3
    9968:	461a      	mov	r2, r3
    996a:	78fb      	ldrb	r3, [r7, #3]
    996c:	4293      	cmp	r3, r2
    996e:	d02b      	beq.n	99c8 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9970:	687b      	ldr	r3, [r7, #4]
    9972:	7cdb      	ldrb	r3, [r3, #19]
    9974:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9978:	b2db      	uxtb	r3, r3
    997a:	2b00      	cmp	r3, #0
    997c:	bf14      	ite	ne
    997e:	2301      	movne	r3, #1
    9980:	2300      	moveq	r3, #0
    9982:	b2db      	uxtb	r3, r3
    9984:	2200      	movs	r2, #0
    9986:	4619      	mov	r1, r3
    9988:	6878      	ldr	r0, [r7, #4]
    998a:	4b17      	ldr	r3, [pc, #92]	; (99e8 <_usb_d_dev_handle_trfail+0x1bc>)
    998c:	4798      	blx	r3
}
    998e:	e01b      	b.n	99c8 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9990:	78fa      	ldrb	r2, [r7, #3]
    9992:	7efb      	ldrb	r3, [r7, #27]
    9994:	4611      	mov	r1, r2
    9996:	4618      	mov	r0, r3
    9998:	4b14      	ldr	r3, [pc, #80]	; (99ec <_usb_d_dev_handle_trfail+0x1c0>)
    999a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    999c:	78fb      	ldrb	r3, [r7, #3]
    999e:	f107 0220 	add.w	r2, r7, #32
    99a2:	4413      	add	r3, r2
    99a4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99a8:	7efb      	ldrb	r3, [r7, #27]
    99aa:	4619      	mov	r1, r3
    99ac:	69f8      	ldr	r0, [r7, #28]
    99ae:	4b0c      	ldr	r3, [pc, #48]	; (99e0 <_usb_d_dev_handle_trfail+0x1b4>)
    99b0:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    99b2:	78fb      	ldrb	r3, [r7, #3]
    99b4:	f107 0220 	add.w	r2, r7, #32
    99b8:	4413      	add	r3, r2
    99ba:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99be:	7efb      	ldrb	r3, [r7, #27]
    99c0:	4619      	mov	r1, r3
    99c2:	69f8      	ldr	r0, [r7, #28]
    99c4:	4b07      	ldr	r3, [pc, #28]	; (99e4 <_usb_d_dev_handle_trfail+0x1b8>)
    99c6:	4798      	blx	r3
}
    99c8:	bf00      	nop
    99ca:	3720      	adds	r7, #32
    99cc:	46bd      	mov	sp, r7
    99ce:	bd80      	pop	{r7, pc}
    99d0:	00010b4c 	.word	0x00010b4c
    99d4:	20000f34 	.word	0x20000f34
    99d8:	00008595 	.word	0x00008595
    99dc:	00008565 	.word	0x00008565
    99e0:	00008439 	.word	0x00008439
    99e4:	00008539 	.word	0x00008539
    99e8:	0000a5a5 	.word	0x0000a5a5
    99ec:	00008e21 	.word	0x00008e21

000099f0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    99f0:	b580      	push	{r7, lr}
    99f2:	b082      	sub	sp, #8
    99f4:	af00      	add	r7, sp, #0
    99f6:	6078      	str	r0, [r7, #4]
    99f8:	460b      	mov	r3, r1
    99fa:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    99fc:	78fb      	ldrb	r3, [r7, #3]
    99fe:	f003 0310 	and.w	r3, r3, #16
    9a02:	2b00      	cmp	r3, #0
    9a04:	d003      	beq.n	9a0e <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9a06:	6878      	ldr	r0, [r7, #4]
    9a08:	4b0c      	ldr	r3, [pc, #48]	; (9a3c <_usb_d_dev_trans_setup_isr+0x4c>)
    9a0a:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9a0c:	e012      	b.n	9a34 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9a0e:	78fb      	ldrb	r3, [r7, #3]
    9a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a14:	2b00      	cmp	r3, #0
    9a16:	d004      	beq.n	9a22 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9a18:	2101      	movs	r1, #1
    9a1a:	6878      	ldr	r0, [r7, #4]
    9a1c:	4b08      	ldr	r3, [pc, #32]	; (9a40 <_usb_d_dev_trans_setup_isr+0x50>)
    9a1e:	4798      	blx	r3
}
    9a20:	e008      	b.n	9a34 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9a22:	78fb      	ldrb	r3, [r7, #3]
    9a24:	f003 0320 	and.w	r3, r3, #32
    9a28:	2b00      	cmp	r3, #0
    9a2a:	d003      	beq.n	9a34 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9a2c:	2100      	movs	r1, #0
    9a2e:	6878      	ldr	r0, [r7, #4]
    9a30:	4b03      	ldr	r3, [pc, #12]	; (9a40 <_usb_d_dev_trans_setup_isr+0x50>)
    9a32:	4798      	blx	r3
}
    9a34:	bf00      	nop
    9a36:	3708      	adds	r7, #8
    9a38:	46bd      	mov	sp, r7
    9a3a:	bd80      	pop	{r7, pc}
    9a3c:	00009711 	.word	0x00009711
    9a40:	000097e9 	.word	0x000097e9

00009a44 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9a44:	b580      	push	{r7, lr}
    9a46:	b082      	sub	sp, #8
    9a48:	af00      	add	r7, sp, #0
    9a4a:	6078      	str	r0, [r7, #4]
    9a4c:	460b      	mov	r3, r1
    9a4e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9a50:	78fb      	ldrb	r3, [r7, #3]
    9a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a56:	2b00      	cmp	r3, #0
    9a58:	d004      	beq.n	9a64 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9a5a:	2101      	movs	r1, #1
    9a5c:	6878      	ldr	r0, [r7, #4]
    9a5e:	4b1a      	ldr	r3, [pc, #104]	; (9ac8 <_usb_d_dev_trans_in_isr+0x84>)
    9a60:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9a62:	e02c      	b.n	9abe <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9a64:	78fb      	ldrb	r3, [r7, #3]
    9a66:	f003 0308 	and.w	r3, r3, #8
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d004      	beq.n	9a78 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9a6e:	2101      	movs	r1, #1
    9a70:	6878      	ldr	r0, [r7, #4]
    9a72:	4b16      	ldr	r3, [pc, #88]	; (9acc <_usb_d_dev_trans_in_isr+0x88>)
    9a74:	4798      	blx	r3
}
    9a76:	e022      	b.n	9abe <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9a78:	78fb      	ldrb	r3, [r7, #3]
    9a7a:	f003 0302 	and.w	r3, r3, #2
    9a7e:	2b00      	cmp	r3, #0
    9a80:	d004      	beq.n	9a8c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9a82:	2101      	movs	r1, #1
    9a84:	6878      	ldr	r0, [r7, #4]
    9a86:	4b12      	ldr	r3, [pc, #72]	; (9ad0 <_usb_d_dev_trans_in_isr+0x8c>)
    9a88:	4798      	blx	r3
}
    9a8a:	e018      	b.n	9abe <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	7cdb      	ldrb	r3, [r3, #19]
    9a90:	f003 0307 	and.w	r3, r3, #7
    9a94:	b2db      	uxtb	r3, r3
    9a96:	2b01      	cmp	r3, #1
    9a98:	d111      	bne.n	9abe <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9a9a:	78fb      	ldrb	r3, [r7, #3]
    9a9c:	f003 0304 	and.w	r3, r3, #4
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d004      	beq.n	9aae <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9aa4:	2100      	movs	r1, #0
    9aa6:	6878      	ldr	r0, [r7, #4]
    9aa8:	4b08      	ldr	r3, [pc, #32]	; (9acc <_usb_d_dev_trans_in_isr+0x88>)
    9aaa:	4798      	blx	r3
}
    9aac:	e007      	b.n	9abe <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9aae:	78fb      	ldrb	r3, [r7, #3]
    9ab0:	f003 0310 	and.w	r3, r3, #16
    9ab4:	2b00      	cmp	r3, #0
    9ab6:	d002      	beq.n	9abe <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9ab8:	6878      	ldr	r0, [r7, #4]
    9aba:	4b06      	ldr	r3, [pc, #24]	; (9ad4 <_usb_d_dev_trans_in_isr+0x90>)
    9abc:	4798      	blx	r3
}
    9abe:	bf00      	nop
    9ac0:	3708      	adds	r7, #8
    9ac2:	46bd      	mov	sp, r7
    9ac4:	bd80      	pop	{r7, pc}
    9ac6:	bf00      	nop
    9ac8:	000097e9 	.word	0x000097e9
    9acc:	0000982d 	.word	0x0000982d
    9ad0:	00009235 	.word	0x00009235
    9ad4:	00009711 	.word	0x00009711

00009ad8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9ad8:	b580      	push	{r7, lr}
    9ada:	b082      	sub	sp, #8
    9adc:	af00      	add	r7, sp, #0
    9ade:	6078      	str	r0, [r7, #4]
    9ae0:	460b      	mov	r3, r1
    9ae2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9ae4:	78fb      	ldrb	r3, [r7, #3]
    9ae6:	f003 0320 	and.w	r3, r3, #32
    9aea:	2b00      	cmp	r3, #0
    9aec:	d004      	beq.n	9af8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9aee:	2100      	movs	r1, #0
    9af0:	6878      	ldr	r0, [r7, #4]
    9af2:	4b1a      	ldr	r3, [pc, #104]	; (9b5c <_usb_d_dev_trans_out_isr+0x84>)
    9af4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9af6:	e02c      	b.n	9b52 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9af8:	78fb      	ldrb	r3, [r7, #3]
    9afa:	f003 0304 	and.w	r3, r3, #4
    9afe:	2b00      	cmp	r3, #0
    9b00:	d004      	beq.n	9b0c <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9b02:	2100      	movs	r1, #0
    9b04:	6878      	ldr	r0, [r7, #4]
    9b06:	4b16      	ldr	r3, [pc, #88]	; (9b60 <_usb_d_dev_trans_out_isr+0x88>)
    9b08:	4798      	blx	r3
}
    9b0a:	e022      	b.n	9b52 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9b0c:	78fb      	ldrb	r3, [r7, #3]
    9b0e:	f003 0301 	and.w	r3, r3, #1
    9b12:	2b00      	cmp	r3, #0
    9b14:	d004      	beq.n	9b20 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9b16:	2101      	movs	r1, #1
    9b18:	6878      	ldr	r0, [r7, #4]
    9b1a:	4b12      	ldr	r3, [pc, #72]	; (9b64 <_usb_d_dev_trans_out_isr+0x8c>)
    9b1c:	4798      	blx	r3
}
    9b1e:	e018      	b.n	9b52 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9b20:	687b      	ldr	r3, [r7, #4]
    9b22:	7cdb      	ldrb	r3, [r3, #19]
    9b24:	f003 0307 	and.w	r3, r3, #7
    9b28:	b2db      	uxtb	r3, r3
    9b2a:	2b01      	cmp	r3, #1
    9b2c:	d111      	bne.n	9b52 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9b2e:	78fb      	ldrb	r3, [r7, #3]
    9b30:	f003 0308 	and.w	r3, r3, #8
    9b34:	2b00      	cmp	r3, #0
    9b36:	d004      	beq.n	9b42 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9b38:	2101      	movs	r1, #1
    9b3a:	6878      	ldr	r0, [r7, #4]
    9b3c:	4b08      	ldr	r3, [pc, #32]	; (9b60 <_usb_d_dev_trans_out_isr+0x88>)
    9b3e:	4798      	blx	r3
}
    9b40:	e007      	b.n	9b52 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9b42:	78fb      	ldrb	r3, [r7, #3]
    9b44:	f003 0310 	and.w	r3, r3, #16
    9b48:	2b00      	cmp	r3, #0
    9b4a:	d002      	beq.n	9b52 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9b4c:	6878      	ldr	r0, [r7, #4]
    9b4e:	4b06      	ldr	r3, [pc, #24]	; (9b68 <_usb_d_dev_trans_out_isr+0x90>)
    9b50:	4798      	blx	r3
}
    9b52:	bf00      	nop
    9b54:	3708      	adds	r7, #8
    9b56:	46bd      	mov	sp, r7
    9b58:	bd80      	pop	{r7, pc}
    9b5a:	bf00      	nop
    9b5c:	000097e9 	.word	0x000097e9
    9b60:	0000982d 	.word	0x0000982d
    9b64:	0000944d 	.word	0x0000944d
    9b68:	00009711 	.word	0x00009711

00009b6c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9b6c:	b580      	push	{r7, lr}
    9b6e:	b084      	sub	sp, #16
    9b70:	af00      	add	r7, sp, #0
    9b72:	6078      	str	r0, [r7, #4]
    9b74:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9b76:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b7a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9b7c:	683b      	ldr	r3, [r7, #0]
    9b7e:	7c9b      	ldrb	r3, [r3, #18]
    9b80:	f003 030f 	and.w	r3, r3, #15
    9b84:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9b86:	7afb      	ldrb	r3, [r7, #11]
    9b88:	2201      	movs	r2, #1
    9b8a:	409a      	lsls	r2, r3
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	4013      	ands	r3, r2
    9b90:	2b00      	cmp	r3, #0
    9b92:	d03d      	beq.n	9c10 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9b94:	7afb      	ldrb	r3, [r7, #11]
    9b96:	68fa      	ldr	r2, [r7, #12]
    9b98:	3308      	adds	r3, #8
    9b9a:	015b      	lsls	r3, r3, #5
    9b9c:	4413      	add	r3, r2
    9b9e:	3307      	adds	r3, #7
    9ba0:	781b      	ldrb	r3, [r3, #0]
    9ba2:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9ba4:	7afb      	ldrb	r3, [r7, #11]
    9ba6:	68fa      	ldr	r2, [r7, #12]
    9ba8:	015b      	lsls	r3, r3, #5
    9baa:	4413      	add	r3, r2
    9bac:	f203 1309 	addw	r3, r3, #265	; 0x109
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9bb4:	7aba      	ldrb	r2, [r7, #10]
    9bb6:	7a7b      	ldrb	r3, [r7, #9]
    9bb8:	4013      	ands	r3, r2
    9bba:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9bbc:	7abb      	ldrb	r3, [r7, #10]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	d027      	beq.n	9c12 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9bc2:	683b      	ldr	r3, [r7, #0]
    9bc4:	7cdb      	ldrb	r3, [r3, #19]
    9bc6:	f003 0307 	and.w	r3, r3, #7
    9bca:	b2db      	uxtb	r3, r3
    9bcc:	2b01      	cmp	r3, #1
    9bce:	d10c      	bne.n	9bea <_usb_d_dev_handle_eps+0x7e>
    9bd0:	683b      	ldr	r3, [r7, #0]
    9bd2:	7cdb      	ldrb	r3, [r3, #19]
    9bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9bd8:	b2db      	uxtb	r3, r3
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d105      	bne.n	9bea <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9bde:	7abb      	ldrb	r3, [r7, #10]
    9be0:	4619      	mov	r1, r3
    9be2:	6838      	ldr	r0, [r7, #0]
    9be4:	4b0c      	ldr	r3, [pc, #48]	; (9c18 <_usb_d_dev_handle_eps+0xac>)
    9be6:	4798      	blx	r3
    9be8:	e013      	b.n	9c12 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9bea:	683b      	ldr	r3, [r7, #0]
    9bec:	7cdb      	ldrb	r3, [r3, #19]
    9bee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9bf2:	b2db      	uxtb	r3, r3
    9bf4:	2b00      	cmp	r3, #0
    9bf6:	d005      	beq.n	9c04 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9bf8:	7abb      	ldrb	r3, [r7, #10]
    9bfa:	4619      	mov	r1, r3
    9bfc:	6838      	ldr	r0, [r7, #0]
    9bfe:	4b07      	ldr	r3, [pc, #28]	; (9c1c <_usb_d_dev_handle_eps+0xb0>)
    9c00:	4798      	blx	r3
    9c02:	e006      	b.n	9c12 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9c04:	7abb      	ldrb	r3, [r7, #10]
    9c06:	4619      	mov	r1, r3
    9c08:	6838      	ldr	r0, [r7, #0]
    9c0a:	4b05      	ldr	r3, [pc, #20]	; (9c20 <_usb_d_dev_handle_eps+0xb4>)
    9c0c:	4798      	blx	r3
    9c0e:	e000      	b.n	9c12 <_usb_d_dev_handle_eps+0xa6>
		return;
    9c10:	bf00      	nop
		}
	}
}
    9c12:	3710      	adds	r7, #16
    9c14:	46bd      	mov	sp, r7
    9c16:	bd80      	pop	{r7, pc}
    9c18:	000099f1 	.word	0x000099f1
    9c1c:	00009a45 	.word	0x00009a45
    9c20:	00009ad9 	.word	0x00009ad9

00009c24 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9c24:	b580      	push	{r7, lr}
    9c26:	b084      	sub	sp, #16
    9c28:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9c2a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c2e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9c30:	68bb      	ldr	r3, [r7, #8]
    9c32:	8c1b      	ldrh	r3, [r3, #32]
    9c34:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9c36:	88fb      	ldrh	r3, [r7, #6]
    9c38:	2b00      	cmp	r3, #0
    9c3a:	d104      	bne.n	9c46 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9c3c:	4b13      	ldr	r3, [pc, #76]	; (9c8c <_usb_d_dev_handler+0x68>)
    9c3e:	4798      	blx	r3
    9c40:	4603      	mov	r3, r0
    9c42:	2b00      	cmp	r3, #0
    9c44:	d11e      	bne.n	9c84 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9c46:	2300      	movs	r3, #0
    9c48:	73fb      	strb	r3, [r7, #15]
    9c4a:	e017      	b.n	9c7c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9c4c:	7bfa      	ldrb	r2, [r7, #15]
    9c4e:	4613      	mov	r3, r2
    9c50:	009b      	lsls	r3, r3, #2
    9c52:	4413      	add	r3, r2
    9c54:	009b      	lsls	r3, r3, #2
    9c56:	3310      	adds	r3, #16
    9c58:	4a0d      	ldr	r2, [pc, #52]	; (9c90 <_usb_d_dev_handler+0x6c>)
    9c5a:	4413      	add	r3, r2
    9c5c:	3304      	adds	r3, #4
    9c5e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9c60:	683b      	ldr	r3, [r7, #0]
    9c62:	7c9b      	ldrb	r3, [r3, #18]
    9c64:	2bff      	cmp	r3, #255	; 0xff
    9c66:	d005      	beq.n	9c74 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9c68:	88fb      	ldrh	r3, [r7, #6]
    9c6a:	6839      	ldr	r1, [r7, #0]
    9c6c:	4618      	mov	r0, r3
    9c6e:	4b09      	ldr	r3, [pc, #36]	; (9c94 <_usb_d_dev_handler+0x70>)
    9c70:	4798      	blx	r3
    9c72:	e000      	b.n	9c76 <_usb_d_dev_handler+0x52>
			continue;
    9c74:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9c76:	7bfb      	ldrb	r3, [r7, #15]
    9c78:	3301      	adds	r3, #1
    9c7a:	73fb      	strb	r3, [r7, #15]
    9c7c:	7bfb      	ldrb	r3, [r7, #15]
    9c7e:	2b08      	cmp	r3, #8
    9c80:	d9e4      	bls.n	9c4c <_usb_d_dev_handler+0x28>
    9c82:	e000      	b.n	9c86 <_usb_d_dev_handler+0x62>
			return;
    9c84:	bf00      	nop
	}
}
    9c86:	3710      	adds	r7, #16
    9c88:	46bd      	mov	sp, r7
    9c8a:	bd80      	pop	{r7, pc}
    9c8c:	0000917d 	.word	0x0000917d
    9c90:	20000e6c 	.word	0x20000e6c
    9c94:	00009b6d 	.word	0x00009b6d

00009c98 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9c98:	b580      	push	{r7, lr}
    9c9a:	b082      	sub	sp, #8
    9c9c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9c9e:	2300      	movs	r3, #0
    9ca0:	71fb      	strb	r3, [r7, #7]
    9ca2:	e023      	b.n	9cec <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9ca4:	79fa      	ldrb	r2, [r7, #7]
    9ca6:	4613      	mov	r3, r2
    9ca8:	009b      	lsls	r3, r3, #2
    9caa:	4413      	add	r3, r2
    9cac:	009b      	lsls	r3, r3, #2
    9cae:	3310      	adds	r3, #16
    9cb0:	4a14      	ldr	r2, [pc, #80]	; (9d04 <_usb_d_dev_reset_epts+0x6c>)
    9cb2:	4413      	add	r3, r2
    9cb4:	3304      	adds	r3, #4
    9cb6:	2103      	movs	r1, #3
    9cb8:	4618      	mov	r0, r3
    9cba:	4b13      	ldr	r3, [pc, #76]	; (9d08 <_usb_d_dev_reset_epts+0x70>)
    9cbc:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9cbe:	79fa      	ldrb	r2, [r7, #7]
    9cc0:	4910      	ldr	r1, [pc, #64]	; (9d04 <_usb_d_dev_reset_epts+0x6c>)
    9cc2:	4613      	mov	r3, r2
    9cc4:	009b      	lsls	r3, r3, #2
    9cc6:	4413      	add	r3, r2
    9cc8:	009b      	lsls	r3, r3, #2
    9cca:	440b      	add	r3, r1
    9ccc:	3326      	adds	r3, #38	; 0x26
    9cce:	22ff      	movs	r2, #255	; 0xff
    9cd0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9cd2:	79fa      	ldrb	r2, [r7, #7]
    9cd4:	490b      	ldr	r1, [pc, #44]	; (9d04 <_usb_d_dev_reset_epts+0x6c>)
    9cd6:	4613      	mov	r3, r2
    9cd8:	009b      	lsls	r3, r3, #2
    9cda:	4413      	add	r3, r2
    9cdc:	009b      	lsls	r3, r3, #2
    9cde:	440b      	add	r3, r1
    9ce0:	3327      	adds	r3, #39	; 0x27
    9ce2:	2200      	movs	r2, #0
    9ce4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9ce6:	79fb      	ldrb	r3, [r7, #7]
    9ce8:	3301      	adds	r3, #1
    9cea:	71fb      	strb	r3, [r7, #7]
    9cec:	79fb      	ldrb	r3, [r7, #7]
    9cee:	2b08      	cmp	r3, #8
    9cf0:	d9d8      	bls.n	9ca4 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9cf2:	22a0      	movs	r2, #160	; 0xa0
    9cf4:	2100      	movs	r1, #0
    9cf6:	4805      	ldr	r0, [pc, #20]	; (9d0c <_usb_d_dev_reset_epts+0x74>)
    9cf8:	4b05      	ldr	r3, [pc, #20]	; (9d10 <_usb_d_dev_reset_epts+0x78>)
    9cfa:	4798      	blx	r3
}
    9cfc:	bf00      	nop
    9cfe:	3708      	adds	r7, #8
    9d00:	46bd      	mov	sp, r7
    9d02:	bd80      	pop	{r7, pc}
    9d04:	20000e6c 	.word	0x20000e6c
    9d08:	0000a55d 	.word	0x0000a55d
    9d0c:	20000f34 	.word	0x20000f34
    9d10:	000103c9 	.word	0x000103c9

00009d14 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9d14:	b580      	push	{r7, lr}
    9d16:	b084      	sub	sp, #16
    9d18:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9d1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d1e:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9d20:	2301      	movs	r3, #1
    9d22:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9d24:	2304      	movs	r3, #4
    9d26:	713b      	strb	r3, [r7, #4]
    9d28:	2300      	movs	r3, #0
    9d2a:	717b      	strb	r3, [r7, #5]
    9d2c:	2300      	movs	r3, #0
    9d2e:	71bb      	strb	r3, [r7, #6]
    9d30:	2300      	movs	r3, #0
    9d32:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9d34:	2101      	movs	r1, #1
    9d36:	68f8      	ldr	r0, [r7, #12]
    9d38:	4b26      	ldr	r3, [pc, #152]	; (9dd4 <_usb_d_dev_init+0xc0>)
    9d3a:	4798      	blx	r3
    9d3c:	4603      	mov	r3, r0
    9d3e:	f083 0301 	eor.w	r3, r3, #1
    9d42:	b2db      	uxtb	r3, r3
    9d44:	2b00      	cmp	r3, #0
    9d46:	d011      	beq.n	9d6c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9d48:	2102      	movs	r1, #2
    9d4a:	68f8      	ldr	r0, [r7, #12]
    9d4c:	4b22      	ldr	r3, [pc, #136]	; (9dd8 <_usb_d_dev_init+0xc4>)
    9d4e:	4798      	blx	r3
    9d50:	4603      	mov	r3, r0
    9d52:	2b00      	cmp	r3, #0
    9d54:	d006      	beq.n	9d64 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9d56:	68f8      	ldr	r0, [r7, #12]
    9d58:	4b20      	ldr	r3, [pc, #128]	; (9ddc <_usb_d_dev_init+0xc8>)
    9d5a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9d5c:	2102      	movs	r1, #2
    9d5e:	68f8      	ldr	r0, [r7, #12]
    9d60:	4b1f      	ldr	r3, [pc, #124]	; (9de0 <_usb_d_dev_init+0xcc>)
    9d62:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9d64:	2101      	movs	r1, #1
    9d66:	68f8      	ldr	r0, [r7, #12]
    9d68:	4b1e      	ldr	r3, [pc, #120]	; (9de4 <_usb_d_dev_init+0xd0>)
    9d6a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9d6c:	2101      	movs	r1, #1
    9d6e:	68f8      	ldr	r0, [r7, #12]
    9d70:	4b1b      	ldr	r3, [pc, #108]	; (9de0 <_usb_d_dev_init+0xcc>)
    9d72:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9d74:	4b1c      	ldr	r3, [pc, #112]	; (9de8 <_usb_d_dev_init+0xd4>)
    9d76:	4a1d      	ldr	r2, [pc, #116]	; (9dec <_usb_d_dev_init+0xd8>)
    9d78:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9d7a:	4b1b      	ldr	r3, [pc, #108]	; (9de8 <_usb_d_dev_init+0xd4>)
    9d7c:	4a1b      	ldr	r2, [pc, #108]	; (9dec <_usb_d_dev_init+0xd8>)
    9d7e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9d80:	4b19      	ldr	r3, [pc, #100]	; (9de8 <_usb_d_dev_init+0xd4>)
    9d82:	4a1a      	ldr	r2, [pc, #104]	; (9dec <_usb_d_dev_init+0xd8>)
    9d84:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9d86:	4b18      	ldr	r3, [pc, #96]	; (9de8 <_usb_d_dev_init+0xd4>)
    9d88:	4a18      	ldr	r2, [pc, #96]	; (9dec <_usb_d_dev_init+0xd8>)
    9d8a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9d8c:	4b16      	ldr	r3, [pc, #88]	; (9de8 <_usb_d_dev_init+0xd4>)
    9d8e:	4a17      	ldr	r2, [pc, #92]	; (9dec <_usb_d_dev_init+0xd8>)
    9d90:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9d92:	4b17      	ldr	r3, [pc, #92]	; (9df0 <_usb_d_dev_init+0xdc>)
    9d94:	4798      	blx	r3

	_usb_load_calib();
    9d96:	4b17      	ldr	r3, [pc, #92]	; (9df4 <_usb_d_dev_init+0xe0>)
    9d98:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9d9a:	2104      	movs	r1, #4
    9d9c:	68f8      	ldr	r0, [r7, #12]
    9d9e:	4b11      	ldr	r3, [pc, #68]	; (9de4 <_usb_d_dev_init+0xd0>)
    9da0:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9da2:	4b15      	ldr	r3, [pc, #84]	; (9df8 <_usb_d_dev_init+0xe4>)
    9da4:	4619      	mov	r1, r3
    9da6:	68f8      	ldr	r0, [r7, #12]
    9da8:	4b14      	ldr	r3, [pc, #80]	; (9dfc <_usb_d_dev_init+0xe8>)
    9daa:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9dac:	7afb      	ldrb	r3, [r7, #11]
    9dae:	f107 0210 	add.w	r2, r7, #16
    9db2:	4413      	add	r3, r2
    9db4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9db8:	f043 0301 	orr.w	r3, r3, #1
    9dbc:	b2db      	uxtb	r3, r3
    9dbe:	b29b      	uxth	r3, r3
    9dc0:	4619      	mov	r1, r3
    9dc2:	68f8      	ldr	r0, [r7, #12]
    9dc4:	4b0e      	ldr	r3, [pc, #56]	; (9e00 <_usb_d_dev_init+0xec>)
    9dc6:	4798      	blx	r3

	return ERR_NONE;
    9dc8:	2300      	movs	r3, #0
}
    9dca:	4618      	mov	r0, r3
    9dcc:	3710      	adds	r7, #16
    9dce:	46bd      	mov	sp, r7
    9dd0:	bd80      	pop	{r7, pc}
    9dd2:	bf00      	nop
    9dd4:	000083ad 	.word	0x000083ad
    9dd8:	000086fd 	.word	0x000086fd
    9ddc:	000086d1 	.word	0x000086d1
    9de0:	00008383 	.word	0x00008383
    9de4:	0000872d 	.word	0x0000872d
    9de8:	20000e6c 	.word	0x20000e6c
    9dec:	000087f5 	.word	0x000087f5
    9df0:	00009c99 	.word	0x00009c99
    9df4:	0000880d 	.word	0x0000880d
    9df8:	20000f34 	.word	0x20000f34
    9dfc:	000087d9 	.word	0x000087d9
    9e00:	0000879d 	.word	0x0000879d

00009e04 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9e04:	b580      	push	{r7, lr}
    9e06:	b082      	sub	sp, #8
    9e08:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9e0a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e0e:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9e10:	2103      	movs	r1, #3
    9e12:	6878      	ldr	r0, [r7, #4]
    9e14:	4b17      	ldr	r3, [pc, #92]	; (9e74 <_usb_d_dev_enable+0x70>)
    9e16:	4798      	blx	r3
    9e18:	4603      	mov	r3, r0
    9e1a:	2b00      	cmp	r3, #0
    9e1c:	d002      	beq.n	9e24 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9e1e:	f06f 0310 	mvn.w	r3, #16
    9e22:	e023      	b.n	9e6c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9e24:	6878      	ldr	r0, [r7, #4]
    9e26:	4b14      	ldr	r3, [pc, #80]	; (9e78 <_usb_d_dev_enable+0x74>)
    9e28:	4798      	blx	r3
    9e2a:	4603      	mov	r3, r0
    9e2c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9e2e:	78fb      	ldrb	r3, [r7, #3]
    9e30:	f003 0302 	and.w	r3, r3, #2
    9e34:	2b00      	cmp	r3, #0
    9e36:	d107      	bne.n	9e48 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9e38:	78fb      	ldrb	r3, [r7, #3]
    9e3a:	f043 0302 	orr.w	r3, r3, #2
    9e3e:	b2db      	uxtb	r3, r3
    9e40:	4619      	mov	r1, r3
    9e42:	6878      	ldr	r0, [r7, #4]
    9e44:	4b0d      	ldr	r3, [pc, #52]	; (9e7c <_usb_d_dev_enable+0x78>)
    9e46:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9e48:	2050      	movs	r0, #80	; 0x50
    9e4a:	4b0d      	ldr	r3, [pc, #52]	; (9e80 <_usb_d_dev_enable+0x7c>)
    9e4c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9e4e:	2051      	movs	r0, #81	; 0x51
    9e50:	4b0b      	ldr	r3, [pc, #44]	; (9e80 <_usb_d_dev_enable+0x7c>)
    9e52:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9e54:	2052      	movs	r0, #82	; 0x52
    9e56:	4b0a      	ldr	r3, [pc, #40]	; (9e80 <_usb_d_dev_enable+0x7c>)
    9e58:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9e5a:	2053      	movs	r0, #83	; 0x53
    9e5c:	4b08      	ldr	r3, [pc, #32]	; (9e80 <_usb_d_dev_enable+0x7c>)
    9e5e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9e60:	f240 218d 	movw	r1, #653	; 0x28d
    9e64:	6878      	ldr	r0, [r7, #4]
    9e66:	4b07      	ldr	r3, [pc, #28]	; (9e84 <_usb_d_dev_enable+0x80>)
    9e68:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9e6a:	2300      	movs	r3, #0
}
    9e6c:	4618      	mov	r0, r3
    9e6e:	3708      	adds	r7, #8
    9e70:	46bd      	mov	sp, r7
    9e72:	bd80      	pop	{r7, pc}
    9e74:	000086a7 	.word	0x000086a7
    9e78:	00008755 	.word	0x00008755
    9e7c:	0000872d 	.word	0x0000872d
    9e80:	000082b9 	.word	0x000082b9
    9e84:	00008651 	.word	0x00008651

00009e88 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9e88:	b580      	push	{r7, lr}
    9e8a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9e8c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9e90:	4b01      	ldr	r3, [pc, #4]	; (9e98 <_usb_d_dev_attach+0x10>)
    9e92:	4798      	blx	r3
}
    9e94:	bf00      	nop
    9e96:	bd80      	pop	{r7, pc}
    9e98:	00008779 	.word	0x00008779

00009e9c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9e9c:	b580      	push	{r7, lr}
    9e9e:	b082      	sub	sp, #8
    9ea0:	af00      	add	r7, sp, #0
    9ea2:	4603      	mov	r3, r0
    9ea4:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9ea6:	79fb      	ldrb	r3, [r7, #7]
    9ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9eac:	b2db      	uxtb	r3, r3
    9eae:	4619      	mov	r1, r3
    9eb0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9eb4:	4b02      	ldr	r3, [pc, #8]	; (9ec0 <_usb_d_dev_set_address+0x24>)
    9eb6:	4798      	blx	r3
}
    9eb8:	bf00      	nop
    9eba:	3708      	adds	r7, #8
    9ebc:	46bd      	mov	sp, r7
    9ebe:	bd80      	pop	{r7, pc}
    9ec0:	000087bb 	.word	0x000087bb

00009ec4 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9ec4:	b590      	push	{r4, r7, lr}
    9ec6:	b085      	sub	sp, #20
    9ec8:	af00      	add	r7, sp, #0
    9eca:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9ecc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9ed0:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	7c9b      	ldrb	r3, [r3, #18]
    9ed6:	f003 030f 	and.w	r3, r3, #15
    9eda:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9edc:	687b      	ldr	r3, [r7, #4]
    9ede:	68db      	ldr	r3, [r3, #12]
    9ee0:	461a      	mov	r2, r3
    9ee2:	7afb      	ldrb	r3, [r7, #11]
    9ee4:	2100      	movs	r1, #0
    9ee6:	4618      	mov	r0, r3
    9ee8:	4b0f      	ldr	r3, [pc, #60]	; (9f28 <_usb_d_dev_trans_setup+0x64>)
    9eea:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	8a1b      	ldrh	r3, [r3, #16]
    9ef0:	461a      	mov	r2, r3
    9ef2:	7af8      	ldrb	r0, [r7, #11]
    9ef4:	2300      	movs	r3, #0
    9ef6:	2100      	movs	r1, #0
    9ef8:	4c0c      	ldr	r4, [pc, #48]	; (9f2c <_usb_d_dev_trans_setup+0x68>)
    9efa:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9efc:	7afb      	ldrb	r3, [r7, #11]
    9efe:	22b0      	movs	r2, #176	; 0xb0
    9f00:	4619      	mov	r1, r3
    9f02:	68f8      	ldr	r0, [r7, #12]
    9f04:	4b0a      	ldr	r3, [pc, #40]	; (9f30 <_usb_d_dev_trans_setup+0x6c>)
    9f06:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9f08:	7afb      	ldrb	r3, [r7, #11]
    9f0a:	2200      	movs	r2, #0
    9f0c:	2100      	movs	r1, #0
    9f0e:	4618      	mov	r0, r3
    9f10:	4b08      	ldr	r3, [pc, #32]	; (9f34 <_usb_d_dev_trans_setup+0x70>)
    9f12:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9f14:	7afb      	ldrb	r3, [r7, #11]
    9f16:	2210      	movs	r2, #16
    9f18:	4619      	mov	r1, r3
    9f1a:	68f8      	ldr	r0, [r7, #12]
    9f1c:	4b06      	ldr	r3, [pc, #24]	; (9f38 <_usb_d_dev_trans_setup+0x74>)
    9f1e:	4798      	blx	r3
}
    9f20:	bf00      	nop
    9f22:	3714      	adds	r7, #20
    9f24:	46bd      	mov	sp, r7
    9f26:	bd90      	pop	{r4, r7, pc}
    9f28:	00008c59 	.word	0x00008c59
    9f2c:	00008de1 	.word	0x00008de1
    9f30:	000084b9 	.word	0x000084b9
    9f34:	00008eb1 	.word	0x00008eb1
    9f38:	0000850d 	.word	0x0000850d

00009f3c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9f3c:	b580      	push	{r7, lr}
    9f3e:	b088      	sub	sp, #32
    9f40:	af00      	add	r7, sp, #0
    9f42:	4603      	mov	r3, r0
    9f44:	71fb      	strb	r3, [r7, #7]
    9f46:	460b      	mov	r3, r1
    9f48:	71bb      	strb	r3, [r7, #6]
    9f4a:	4613      	mov	r3, r2
    9f4c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9f4e:	79fb      	ldrb	r3, [r7, #7]
    9f50:	f003 030f 	and.w	r3, r3, #15
    9f54:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9f56:	79fb      	ldrb	r3, [r7, #7]
    9f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9f5c:	2b00      	cmp	r3, #0
    9f5e:	bf14      	ite	ne
    9f60:	2301      	movne	r3, #1
    9f62:	2300      	moveq	r3, #0
    9f64:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9f66:	7fba      	ldrb	r2, [r7, #30]
    9f68:	7ffb      	ldrb	r3, [r7, #31]
    9f6a:	4611      	mov	r1, r2
    9f6c:	4618      	mov	r0, r3
    9f6e:	4b3e      	ldr	r3, [pc, #248]	; (a068 <_usb_d_dev_ep_init+0x12c>)
    9f70:	4798      	blx	r3
    9f72:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9f74:	79bb      	ldrb	r3, [r7, #6]
    9f76:	f003 0303 	and.w	r3, r3, #3
    9f7a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9f7c:	7ffa      	ldrb	r2, [r7, #31]
    9f7e:	4613      	mov	r3, r2
    9f80:	005b      	lsls	r3, r3, #1
    9f82:	4413      	add	r3, r2
    9f84:	009b      	lsls	r3, r3, #2
    9f86:	4a39      	ldr	r2, [pc, #228]	; (a06c <_usb_d_dev_ep_init+0x130>)
    9f88:	4413      	add	r3, r2
    9f8a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9f8c:	7ffb      	ldrb	r3, [r7, #31]
    9f8e:	2b04      	cmp	r3, #4
    9f90:	d902      	bls.n	9f98 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9f92:	f06f 0311 	mvn.w	r3, #17
    9f96:	e063      	b.n	a060 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9f98:	69bb      	ldr	r3, [r7, #24]
    9f9a:	7c9b      	ldrb	r3, [r3, #18]
    9f9c:	2bff      	cmp	r3, #255	; 0xff
    9f9e:	d002      	beq.n	9fa6 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9fa0:	f06f 0313 	mvn.w	r3, #19
    9fa4:	e05c      	b.n	a060 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9fa6:	7dfb      	ldrb	r3, [r7, #23]
    9fa8:	2b00      	cmp	r3, #0
    9faa:	d11f      	bne.n	9fec <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9fac:	7fbb      	ldrb	r3, [r7, #30]
    9fae:	2b00      	cmp	r3, #0
    9fb0:	bf14      	ite	ne
    9fb2:	2301      	movne	r3, #1
    9fb4:	2300      	moveq	r3, #0
    9fb6:	b2db      	uxtb	r3, r3
    9fb8:	f083 0301 	eor.w	r3, r3, #1
    9fbc:	b2db      	uxtb	r3, r3
    9fbe:	f003 0301 	and.w	r3, r3, #1
    9fc2:	b2da      	uxtb	r2, r3
    9fc4:	7ffb      	ldrb	r3, [r7, #31]
    9fc6:	4611      	mov	r1, r2
    9fc8:	4618      	mov	r0, r3
    9fca:	4b27      	ldr	r3, [pc, #156]	; (a068 <_usb_d_dev_ep_init+0x12c>)
    9fcc:	4798      	blx	r3
    9fce:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9fd0:	68fb      	ldr	r3, [r7, #12]
    9fd2:	7c9b      	ldrb	r3, [r3, #18]
    9fd4:	2bff      	cmp	r3, #255	; 0xff
    9fd6:	d002      	beq.n	9fde <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9fd8:	f06f 0313 	mvn.w	r3, #19
    9fdc:	e040      	b.n	a060 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9fde:	693b      	ldr	r3, [r7, #16]
    9fe0:	681b      	ldr	r3, [r3, #0]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d102      	bne.n	9fec <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9fe6:	f06f 0312 	mvn.w	r3, #18
    9fea:	e039      	b.n	a060 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9fec:	7fbb      	ldrb	r3, [r7, #30]
    9fee:	2b00      	cmp	r3, #0
    9ff0:	d007      	beq.n	a002 <_usb_d_dev_ep_init+0xc6>
    9ff2:	693b      	ldr	r3, [r7, #16]
    9ff4:	685b      	ldr	r3, [r3, #4]
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	bf14      	ite	ne
    9ffa:	2301      	movne	r3, #1
    9ffc:	2300      	moveq	r3, #0
    9ffe:	b2db      	uxtb	r3, r3
    a000:	e006      	b.n	a010 <_usb_d_dev_ep_init+0xd4>
    a002:	693b      	ldr	r3, [r7, #16]
    a004:	681b      	ldr	r3, [r3, #0]
    a006:	2b00      	cmp	r3, #0
    a008:	bf14      	ite	ne
    a00a:	2301      	movne	r3, #1
    a00c:	2300      	moveq	r3, #0
    a00e:	b2db      	uxtb	r3, r3
    a010:	2b00      	cmp	r3, #0
    a012:	d00f      	beq.n	a034 <_usb_d_dev_ep_init+0xf8>
    a014:	7fbb      	ldrb	r3, [r7, #30]
    a016:	2b00      	cmp	r3, #0
    a018:	d003      	beq.n	a022 <_usb_d_dev_ep_init+0xe6>
    a01a:	693b      	ldr	r3, [r7, #16]
    a01c:	895b      	ldrh	r3, [r3, #10]
    a01e:	461a      	mov	r2, r3
    a020:	e002      	b.n	a028 <_usb_d_dev_ep_init+0xec>
    a022:	693b      	ldr	r3, [r7, #16]
    a024:	891b      	ldrh	r3, [r3, #8]
    a026:	461a      	mov	r2, r3
    a028:	88bb      	ldrh	r3, [r7, #4]
    a02a:	429a      	cmp	r2, r3
    a02c:	da02      	bge.n	a034 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a02e:	f06f 0312 	mvn.w	r3, #18
    a032:	e015      	b.n	a060 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a034:	7fbb      	ldrb	r3, [r7, #30]
    a036:	2b00      	cmp	r3, #0
    a038:	d002      	beq.n	a040 <_usb_d_dev_ep_init+0x104>
    a03a:	693b      	ldr	r3, [r7, #16]
    a03c:	685b      	ldr	r3, [r3, #4]
    a03e:	e001      	b.n	a044 <_usb_d_dev_ep_init+0x108>
    a040:	693b      	ldr	r3, [r7, #16]
    a042:	681b      	ldr	r3, [r3, #0]
    a044:	69ba      	ldr	r2, [r7, #24]
    a046:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a048:	69bb      	ldr	r3, [r7, #24]
    a04a:	88ba      	ldrh	r2, [r7, #4]
    a04c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a04e:	7dfb      	ldrb	r3, [r7, #23]
    a050:	3301      	adds	r3, #1
    a052:	b2da      	uxtb	r2, r3
    a054:	69bb      	ldr	r3, [r7, #24]
    a056:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a058:	69bb      	ldr	r3, [r7, #24]
    a05a:	79fa      	ldrb	r2, [r7, #7]
    a05c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a05e:	2300      	movs	r3, #0
}
    a060:	4618      	mov	r0, r3
    a062:	3720      	adds	r7, #32
    a064:	46bd      	mov	sp, r7
    a066:	bd80      	pop	{r7, pc}
    a068:	00008f6d 	.word	0x00008f6d
    a06c:	00010b10 	.word	0x00010b10

0000a070 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a070:	b580      	push	{r7, lr}
    a072:	b086      	sub	sp, #24
    a074:	af00      	add	r7, sp, #0
    a076:	4603      	mov	r3, r0
    a078:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a07a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a07e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a080:	79fb      	ldrb	r3, [r7, #7]
    a082:	f003 030f 	and.w	r3, r3, #15
    a086:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a088:	79fb      	ldrb	r3, [r7, #7]
    a08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a08e:	2b00      	cmp	r3, #0
    a090:	bf14      	ite	ne
    a092:	2301      	movne	r3, #1
    a094:	2300      	moveq	r3, #0
    a096:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a098:	7cba      	ldrb	r2, [r7, #18]
    a09a:	7cfb      	ldrb	r3, [r7, #19]
    a09c:	4611      	mov	r1, r2
    a09e:	4618      	mov	r0, r3
    a0a0:	4b2a      	ldr	r3, [pc, #168]	; (a14c <_usb_d_dev_ep_deinit+0xdc>)
    a0a2:	4798      	blx	r3
    a0a4:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a0a6:	7cfb      	ldrb	r3, [r7, #19]
    a0a8:	2b04      	cmp	r3, #4
    a0aa:	d84a      	bhi.n	a142 <_usb_d_dev_ep_deinit+0xd2>
    a0ac:	68fb      	ldr	r3, [r7, #12]
    a0ae:	7c9b      	ldrb	r3, [r3, #18]
    a0b0:	2bff      	cmp	r3, #255	; 0xff
    a0b2:	d046      	beq.n	a142 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a0b4:	7cbb      	ldrb	r3, [r7, #18]
    a0b6:	2203      	movs	r2, #3
    a0b8:	4619      	mov	r1, r3
    a0ba:	68f8      	ldr	r0, [r7, #12]
    a0bc:	4b24      	ldr	r3, [pc, #144]	; (a150 <_usb_d_dev_ep_deinit+0xe0>)
    a0be:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a0c0:	68fb      	ldr	r3, [r7, #12]
    a0c2:	7cdb      	ldrb	r3, [r3, #19]
    a0c4:	f003 0307 	and.w	r3, r3, #7
    a0c8:	b2db      	uxtb	r3, r3
    a0ca:	2b01      	cmp	r3, #1
    a0cc:	d107      	bne.n	a0de <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a0ce:	79fb      	ldrb	r3, [r7, #7]
    a0d0:	697a      	ldr	r2, [r7, #20]
    a0d2:	3308      	adds	r3, #8
    a0d4:	015b      	lsls	r3, r3, #5
    a0d6:	4413      	add	r3, r2
    a0d8:	2200      	movs	r2, #0
    a0da:	701a      	strb	r2, [r3, #0]
    a0dc:	e02a      	b.n	a134 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a0e2:	2b00      	cmp	r3, #0
    a0e4:	da15      	bge.n	a112 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a0e6:	79fb      	ldrb	r3, [r7, #7]
    a0e8:	f003 030f 	and.w	r3, r3, #15
    a0ec:	79fa      	ldrb	r2, [r7, #7]
    a0ee:	f002 020f 	and.w	r2, r2, #15
    a0f2:	6979      	ldr	r1, [r7, #20]
    a0f4:	3208      	adds	r2, #8
    a0f6:	0152      	lsls	r2, r2, #5
    a0f8:	440a      	add	r2, r1
    a0fa:	7812      	ldrb	r2, [r2, #0]
    a0fc:	b2d2      	uxtb	r2, r2
    a0fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a102:	b2d1      	uxtb	r1, r2
    a104:	697a      	ldr	r2, [r7, #20]
    a106:	3308      	adds	r3, #8
    a108:	015b      	lsls	r3, r3, #5
    a10a:	4413      	add	r3, r2
    a10c:	460a      	mov	r2, r1
    a10e:	701a      	strb	r2, [r3, #0]
    a110:	e010      	b.n	a134 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a112:	79fb      	ldrb	r3, [r7, #7]
    a114:	79fa      	ldrb	r2, [r7, #7]
    a116:	6979      	ldr	r1, [r7, #20]
    a118:	3208      	adds	r2, #8
    a11a:	0152      	lsls	r2, r2, #5
    a11c:	440a      	add	r2, r1
    a11e:	7812      	ldrb	r2, [r2, #0]
    a120:	b2d2      	uxtb	r2, r2
    a122:	f022 0207 	bic.w	r2, r2, #7
    a126:	b2d1      	uxtb	r1, r2
    a128:	697a      	ldr	r2, [r7, #20]
    a12a:	3308      	adds	r3, #8
    a12c:	015b      	lsls	r3, r3, #5
    a12e:	4413      	add	r3, r2
    a130:	460a      	mov	r2, r1
    a132:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a134:	68fb      	ldr	r3, [r7, #12]
    a136:	2200      	movs	r2, #0
    a138:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a13a:	68fb      	ldr	r3, [r7, #12]
    a13c:	22ff      	movs	r2, #255	; 0xff
    a13e:	749a      	strb	r2, [r3, #18]
    a140:	e000      	b.n	a144 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a142:	bf00      	nop
}
    a144:	3718      	adds	r7, #24
    a146:	46bd      	mov	sp, r7
    a148:	bd80      	pop	{r7, pc}
    a14a:	bf00      	nop
    a14c:	00008f6d 	.word	0x00008f6d
    a150:	0000a5a5 	.word	0x0000a5a5

0000a154 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a154:	b5b0      	push	{r4, r5, r7, lr}
    a156:	b088      	sub	sp, #32
    a158:	af00      	add	r7, sp, #0
    a15a:	4603      	mov	r3, r0
    a15c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a15e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a162:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a164:	79fb      	ldrb	r3, [r7, #7]
    a166:	f003 030f 	and.w	r3, r3, #15
    a16a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a16c:	79fb      	ldrb	r3, [r7, #7]
    a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a172:	2b00      	cmp	r3, #0
    a174:	bf14      	ite	ne
    a176:	2301      	movne	r3, #1
    a178:	2300      	moveq	r3, #0
    a17a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a17c:	7eba      	ldrb	r2, [r7, #26]
    a17e:	7efb      	ldrb	r3, [r7, #27]
    a180:	4611      	mov	r1, r2
    a182:	4618      	mov	r0, r3
    a184:	4b70      	ldr	r3, [pc, #448]	; (a348 <_usb_d_dev_ep_enable+0x1f4>)
    a186:	4798      	blx	r3
    a188:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a18a:	7efb      	ldrb	r3, [r7, #27]
    a18c:	4619      	mov	r1, r3
    a18e:	69f8      	ldr	r0, [r7, #28]
    a190:	4b6e      	ldr	r3, [pc, #440]	; (a34c <_usb_d_dev_ep_enable+0x1f8>)
    a192:	4798      	blx	r3
    a194:	4603      	mov	r3, r0
    a196:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a198:	7efb      	ldrb	r3, [r7, #27]
    a19a:	2b04      	cmp	r3, #4
    a19c:	d803      	bhi.n	a1a6 <_usb_d_dev_ep_enable+0x52>
    a19e:	697b      	ldr	r3, [r7, #20]
    a1a0:	7c9b      	ldrb	r3, [r3, #18]
    a1a2:	2bff      	cmp	r3, #255	; 0xff
    a1a4:	d102      	bne.n	a1ac <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a1a6:	f06f 0311 	mvn.w	r3, #17
    a1aa:	e0c8      	b.n	a33e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a1ac:	7efb      	ldrb	r3, [r7, #27]
    a1ae:	015b      	lsls	r3, r3, #5
    a1b0:	4a67      	ldr	r2, [pc, #412]	; (a350 <_usb_d_dev_ep_enable+0x1fc>)
    a1b2:	4413      	add	r3, r2
    a1b4:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a1b6:	697b      	ldr	r3, [r7, #20]
    a1b8:	7cdb      	ldrb	r3, [r3, #19]
    a1ba:	f003 0307 	and.w	r3, r3, #7
    a1be:	b2db      	uxtb	r3, r3
    a1c0:	2b01      	cmp	r3, #1
    a1c2:	d14b      	bne.n	a25c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a1c4:	7cfb      	ldrb	r3, [r7, #19]
    a1c6:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d002      	beq.n	a1d4 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a1ce:	f06f 0313 	mvn.w	r3, #19
    a1d2:	e0b4      	b.n	a33e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a1d4:	7efb      	ldrb	r3, [r7, #27]
    a1d6:	2211      	movs	r2, #17
    a1d8:	4619      	mov	r1, r3
    a1da:	69f8      	ldr	r0, [r7, #28]
    a1dc:	4b5d      	ldr	r3, [pc, #372]	; (a354 <_usb_d_dev_ep_enable+0x200>)
    a1de:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a1e0:	697b      	ldr	r3, [r7, #20]
    a1e2:	8a1b      	ldrh	r3, [r3, #16]
    a1e4:	039b      	lsls	r3, r3, #14
    a1e6:	4c5c      	ldr	r4, [pc, #368]	; (a358 <_usb_d_dev_ep_enable+0x204>)
    a1e8:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a1ea:	697b      	ldr	r3, [r7, #20]
    a1ec:	8a1b      	ldrh	r3, [r3, #16]
    a1ee:	4618      	mov	r0, r3
    a1f0:	4b5a      	ldr	r3, [pc, #360]	; (a35c <_usb_d_dev_ep_enable+0x208>)
    a1f2:	4798      	blx	r3
    a1f4:	4603      	mov	r3, r0
    a1f6:	071b      	lsls	r3, r3, #28
    a1f8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a1fc:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a200:	68fb      	ldr	r3, [r7, #12]
    a202:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a204:	68fb      	ldr	r3, [r7, #12]
    a206:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a20a:	697b      	ldr	r3, [r7, #20]
    a20c:	8a1b      	ldrh	r3, [r3, #16]
    a20e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a212:	697b      	ldr	r3, [r7, #20]
    a214:	8a1b      	ldrh	r3, [r3, #16]
    a216:	4618      	mov	r0, r3
    a218:	4b50      	ldr	r3, [pc, #320]	; (a35c <_usb_d_dev_ep_enable+0x208>)
    a21a:	4798      	blx	r3
    a21c:	4603      	mov	r3, r0
    a21e:	071b      	lsls	r3, r3, #28
    a220:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a224:	432b      	orrs	r3, r5
    a226:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a228:	7efb      	ldrb	r3, [r7, #27]
    a22a:	2200      	movs	r2, #0
    a22c:	2100      	movs	r1, #0
    a22e:	4618      	mov	r0, r3
    a230:	4b4b      	ldr	r3, [pc, #300]	; (a360 <_usb_d_dev_ep_enable+0x20c>)
    a232:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a234:	7efb      	ldrb	r3, [r7, #27]
    a236:	2200      	movs	r2, #0
    a238:	2101      	movs	r1, #1
    a23a:	4618      	mov	r0, r3
    a23c:	4b49      	ldr	r3, [pc, #292]	; (a364 <_usb_d_dev_ep_enable+0x210>)
    a23e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a240:	7efb      	ldrb	r3, [r7, #27]
    a242:	2100      	movs	r1, #0
    a244:	4618      	mov	r0, r3
    a246:	4b48      	ldr	r3, [pc, #288]	; (a368 <_usb_d_dev_ep_enable+0x214>)
    a248:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a24a:	7efb      	ldrb	r3, [r7, #27]
    a24c:	2101      	movs	r1, #1
    a24e:	4618      	mov	r0, r3
    a250:	4b45      	ldr	r3, [pc, #276]	; (a368 <_usb_d_dev_ep_enable+0x214>)
    a252:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a254:	6978      	ldr	r0, [r7, #20]
    a256:	4b45      	ldr	r3, [pc, #276]	; (a36c <_usb_d_dev_ep_enable+0x218>)
    a258:	4798      	blx	r3
    a25a:	e06f      	b.n	a33c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a25c:	7ebb      	ldrb	r3, [r7, #26]
    a25e:	2b00      	cmp	r3, #0
    a260:	d038      	beq.n	a2d4 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a262:	7cfb      	ldrb	r3, [r7, #19]
    a264:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a268:	2b00      	cmp	r3, #0
    a26a:	d002      	beq.n	a272 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a26c:	f06f 0313 	mvn.w	r3, #19
    a270:	e065      	b.n	a33e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a272:	697b      	ldr	r3, [r7, #20]
    a274:	7cdb      	ldrb	r3, [r3, #19]
    a276:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a27a:	b2db      	uxtb	r3, r3
    a27c:	011b      	lsls	r3, r3, #4
    a27e:	b2db      	uxtb	r3, r3
    a280:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a284:	b2da      	uxtb	r2, r3
    a286:	7cfb      	ldrb	r3, [r7, #19]
    a288:	4313      	orrs	r3, r2
    a28a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a28c:	7cfa      	ldrb	r2, [r7, #19]
    a28e:	7efb      	ldrb	r3, [r7, #27]
    a290:	4619      	mov	r1, r3
    a292:	69f8      	ldr	r0, [r7, #28]
    a294:	4b2f      	ldr	r3, [pc, #188]	; (a354 <_usb_d_dev_ep_enable+0x200>)
    a296:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a298:	68fb      	ldr	r3, [r7, #12]
    a29a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a29e:	697b      	ldr	r3, [r7, #20]
    a2a0:	8a1b      	ldrh	r3, [r3, #16]
    a2a2:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a2a6:	697b      	ldr	r3, [r7, #20]
    a2a8:	8a1b      	ldrh	r3, [r3, #16]
    a2aa:	4618      	mov	r0, r3
    a2ac:	4b2b      	ldr	r3, [pc, #172]	; (a35c <_usb_d_dev_ep_enable+0x208>)
    a2ae:	4798      	blx	r3
    a2b0:	4603      	mov	r3, r0
    a2b2:	071b      	lsls	r3, r3, #28
    a2b4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a2b8:	432b      	orrs	r3, r5
    a2ba:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a2bc:	7efb      	ldrb	r3, [r7, #27]
    a2be:	2200      	movs	r2, #0
    a2c0:	2101      	movs	r1, #1
    a2c2:	4618      	mov	r0, r3
    a2c4:	4b27      	ldr	r3, [pc, #156]	; (a364 <_usb_d_dev_ep_enable+0x210>)
    a2c6:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a2c8:	7efb      	ldrb	r3, [r7, #27]
    a2ca:	2101      	movs	r1, #1
    a2cc:	4618      	mov	r0, r3
    a2ce:	4b26      	ldr	r3, [pc, #152]	; (a368 <_usb_d_dev_ep_enable+0x214>)
    a2d0:	4798      	blx	r3
    a2d2:	e033      	b.n	a33c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a2d4:	7cfb      	ldrb	r3, [r7, #19]
    a2d6:	f003 0307 	and.w	r3, r3, #7
    a2da:	2b00      	cmp	r3, #0
    a2dc:	d002      	beq.n	a2e4 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a2de:	f06f 0313 	mvn.w	r3, #19
    a2e2:	e02c      	b.n	a33e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a2e4:	697b      	ldr	r3, [r7, #20]
    a2e6:	7cdb      	ldrb	r3, [r3, #19]
    a2e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a2ec:	b2db      	uxtb	r3, r3
    a2ee:	461a      	mov	r2, r3
    a2f0:	7cfb      	ldrb	r3, [r7, #19]
    a2f2:	4313      	orrs	r3, r2
    a2f4:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a2f6:	7cfa      	ldrb	r2, [r7, #19]
    a2f8:	7efb      	ldrb	r3, [r7, #27]
    a2fa:	4619      	mov	r1, r3
    a2fc:	69f8      	ldr	r0, [r7, #28]
    a2fe:	4b15      	ldr	r3, [pc, #84]	; (a354 <_usb_d_dev_ep_enable+0x200>)
    a300:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a302:	697b      	ldr	r3, [r7, #20]
    a304:	8a1b      	ldrh	r3, [r3, #16]
    a306:	039b      	lsls	r3, r3, #14
    a308:	4c13      	ldr	r4, [pc, #76]	; (a358 <_usb_d_dev_ep_enable+0x204>)
    a30a:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a30c:	697b      	ldr	r3, [r7, #20]
    a30e:	8a1b      	ldrh	r3, [r3, #16]
    a310:	4618      	mov	r0, r3
    a312:	4b12      	ldr	r3, [pc, #72]	; (a35c <_usb_d_dev_ep_enable+0x208>)
    a314:	4798      	blx	r3
    a316:	4603      	mov	r3, r0
    a318:	071b      	lsls	r3, r3, #28
    a31a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a31e:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a322:	68fb      	ldr	r3, [r7, #12]
    a324:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a326:	7efb      	ldrb	r3, [r7, #27]
    a328:	2200      	movs	r2, #0
    a32a:	2100      	movs	r1, #0
    a32c:	4618      	mov	r0, r3
    a32e:	4b0c      	ldr	r3, [pc, #48]	; (a360 <_usb_d_dev_ep_enable+0x20c>)
    a330:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a332:	7efb      	ldrb	r3, [r7, #27]
    a334:	2100      	movs	r1, #0
    a336:	4618      	mov	r0, r3
    a338:	4b0b      	ldr	r3, [pc, #44]	; (a368 <_usb_d_dev_ep_enable+0x214>)
    a33a:	4798      	blx	r3
	}

	return USB_OK;
    a33c:	2300      	movs	r3, #0
}
    a33e:	4618      	mov	r0, r3
    a340:	3720      	adds	r7, #32
    a342:	46bd      	mov	sp, r7
    a344:	bdb0      	pop	{r4, r5, r7, pc}
    a346:	bf00      	nop
    a348:	00008f6d 	.word	0x00008f6d
    a34c:	000085f3 	.word	0x000085f3
    a350:	20000f34 	.word	0x20000f34
    a354:	000085c9 	.word	0x000085c9
    a358:	0fffc000 	.word	0x0fffc000
    a35c:	00008f09 	.word	0x00008f09
    a360:	00008eb1 	.word	0x00008eb1
    a364:	00008e59 	.word	0x00008e59
    a368:	00008e21 	.word	0x00008e21
    a36c:	00009ec5 	.word	0x00009ec5

0000a370 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a370:	b580      	push	{r7, lr}
    a372:	b084      	sub	sp, #16
    a374:	af00      	add	r7, sp, #0
    a376:	6078      	str	r0, [r7, #4]
    a378:	460b      	mov	r3, r1
    a37a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a37c:	687b      	ldr	r3, [r7, #4]
    a37e:	7c9b      	ldrb	r3, [r3, #18]
    a380:	f003 030f 	and.w	r3, r3, #15
    a384:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a386:	78fa      	ldrb	r2, [r7, #3]
    a388:	7bfb      	ldrb	r3, [r7, #15]
    a38a:	4611      	mov	r1, r2
    a38c:	4618      	mov	r0, r3
    a38e:	4b03      	ldr	r3, [pc, #12]	; (a39c <_usb_d_dev_ep_stall_get+0x2c>)
    a390:	4798      	blx	r3
    a392:	4603      	mov	r3, r0
}
    a394:	4618      	mov	r0, r3
    a396:	3710      	adds	r7, #16
    a398:	46bd      	mov	sp, r7
    a39a:	bd80      	pop	{r7, pc}
    a39c:	00008a61 	.word	0x00008a61

0000a3a0 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a3a0:	b580      	push	{r7, lr}
    a3a2:	b084      	sub	sp, #16
    a3a4:	af00      	add	r7, sp, #0
    a3a6:	6078      	str	r0, [r7, #4]
    a3a8:	460b      	mov	r3, r1
    a3aa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	7c9b      	ldrb	r3, [r3, #18]
    a3b0:	f003 030f 	and.w	r3, r3, #15
    a3b4:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a3b6:	78f9      	ldrb	r1, [r7, #3]
    a3b8:	7bfb      	ldrb	r3, [r7, #15]
    a3ba:	2201      	movs	r2, #1
    a3bc:	4618      	mov	r0, r3
    a3be:	4b0a      	ldr	r3, [pc, #40]	; (a3e8 <_usb_d_dev_ep_stall_set+0x48>)
    a3c0:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a3c2:	78fb      	ldrb	r3, [r7, #3]
    a3c4:	2220      	movs	r2, #32
    a3c6:	409a      	lsls	r2, r3
    a3c8:	7bfb      	ldrb	r3, [r7, #15]
    a3ca:	4611      	mov	r1, r2
    a3cc:	4618      	mov	r0, r3
    a3ce:	4b07      	ldr	r3, [pc, #28]	; (a3ec <_usb_d_dev_ep_stall_set+0x4c>)
    a3d0:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a3d2:	687a      	ldr	r2, [r7, #4]
    a3d4:	7cd3      	ldrb	r3, [r2, #19]
    a3d6:	f043 0308 	orr.w	r3, r3, #8
    a3da:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a3dc:	2300      	movs	r3, #0
}
    a3de:	4618      	mov	r0, r3
    a3e0:	3710      	adds	r7, #16
    a3e2:	46bd      	mov	sp, r7
    a3e4:	bd80      	pop	{r7, pc}
    a3e6:	bf00      	nop
    a3e8:	00008a09 	.word	0x00008a09
    a3ec:	00008989 	.word	0x00008989

0000a3f0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a3f0:	b580      	push	{r7, lr}
    a3f2:	b084      	sub	sp, #16
    a3f4:	af00      	add	r7, sp, #0
    a3f6:	6078      	str	r0, [r7, #4]
    a3f8:	460b      	mov	r3, r1
    a3fa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	7c9b      	ldrb	r3, [r3, #18]
    a400:	f003 030f 	and.w	r3, r3, #15
    a404:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a406:	78fa      	ldrb	r2, [r7, #3]
    a408:	7bfb      	ldrb	r3, [r7, #15]
    a40a:	4611      	mov	r1, r2
    a40c:	4618      	mov	r0, r3
    a40e:	4b28      	ldr	r3, [pc, #160]	; (a4b0 <_usb_d_dev_ep_stall_clr+0xc0>)
    a410:	4798      	blx	r3
    a412:	4603      	mov	r3, r0
    a414:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a416:	7bbb      	ldrb	r3, [r7, #14]
    a418:	f083 0301 	eor.w	r3, r3, #1
    a41c:	b2db      	uxtb	r3, r3
    a41e:	2b00      	cmp	r3, #0
    a420:	d001      	beq.n	a426 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a422:	2300      	movs	r3, #0
    a424:	e040      	b.n	a4a8 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a426:	78f9      	ldrb	r1, [r7, #3]
    a428:	7bfb      	ldrb	r3, [r7, #15]
    a42a:	2200      	movs	r2, #0
    a42c:	4618      	mov	r0, r3
    a42e:	4b21      	ldr	r3, [pc, #132]	; (a4b4 <_usb_d_dev_ep_stall_clr+0xc4>)
    a430:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a432:	78fb      	ldrb	r3, [r7, #3]
    a434:	2220      	movs	r2, #32
    a436:	409a      	lsls	r2, r3
    a438:	7bfb      	ldrb	r3, [r7, #15]
    a43a:	4611      	mov	r1, r2
    a43c:	4618      	mov	r0, r3
    a43e:	4b1e      	ldr	r3, [pc, #120]	; (a4b8 <_usb_d_dev_ep_stall_clr+0xc8>)
    a440:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a442:	78fa      	ldrb	r2, [r7, #3]
    a444:	7bfb      	ldrb	r3, [r7, #15]
    a446:	4611      	mov	r1, r2
    a448:	4618      	mov	r0, r3
    a44a:	4b1c      	ldr	r3, [pc, #112]	; (a4bc <_usb_d_dev_ep_stall_clr+0xcc>)
    a44c:	4798      	blx	r3
    a44e:	4603      	mov	r3, r0
    a450:	2b00      	cmp	r3, #0
    a452:	d00b      	beq.n	a46c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a454:	78fa      	ldrb	r2, [r7, #3]
    a456:	7bfb      	ldrb	r3, [r7, #15]
    a458:	4611      	mov	r1, r2
    a45a:	4618      	mov	r0, r3
    a45c:	4b18      	ldr	r3, [pc, #96]	; (a4c0 <_usb_d_dev_ep_stall_clr+0xd0>)
    a45e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a460:	78f9      	ldrb	r1, [r7, #3]
    a462:	7bfb      	ldrb	r3, [r7, #15]
    a464:	2200      	movs	r2, #0
    a466:	4618      	mov	r0, r3
    a468:	4b16      	ldr	r3, [pc, #88]	; (a4c4 <_usb_d_dev_ep_stall_clr+0xd4>)
    a46a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a46c:	687b      	ldr	r3, [r7, #4]
    a46e:	7cdb      	ldrb	r3, [r3, #19]
    a470:	f003 0307 	and.w	r3, r3, #7
    a474:	b2db      	uxtb	r3, r3
    a476:	2b01      	cmp	r3, #1
    a478:	d110      	bne.n	a49c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a47a:	7bfb      	ldrb	r3, [r7, #15]
    a47c:	4619      	mov	r1, r3
    a47e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a482:	4b11      	ldr	r3, [pc, #68]	; (a4c8 <_usb_d_dev_ep_stall_clr+0xd8>)
    a484:	4798      	blx	r3
    a486:	4603      	mov	r3, r0
    a488:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a48c:	2b00      	cmp	r3, #0
    a48e:	d10a      	bne.n	a4a6 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a490:	687a      	ldr	r2, [r7, #4]
    a492:	7cd3      	ldrb	r3, [r2, #19]
    a494:	f36f 03c3 	bfc	r3, #3, #1
    a498:	74d3      	strb	r3, [r2, #19]
    a49a:	e004      	b.n	a4a6 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a49c:	687a      	ldr	r2, [r7, #4]
    a49e:	7cd3      	ldrb	r3, [r2, #19]
    a4a0:	f36f 03c3 	bfc	r3, #3, #1
    a4a4:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a4a6:	2300      	movs	r3, #0
}
    a4a8:	4618      	mov	r0, r3
    a4aa:	3710      	adds	r7, #16
    a4ac:	46bd      	mov	sp, r7
    a4ae:	bd80      	pop	{r7, pc}
    a4b0:	00008a61 	.word	0x00008a61
    a4b4:	00008a09 	.word	0x00008a09
    a4b8:	000089b1 	.word	0x000089b1
    a4bc:	00008aa5 	.word	0x00008aa5
    a4c0:	00008ae9 	.word	0x00008ae9
    a4c4:	00008bd5 	.word	0x00008bd5
    a4c8:	00008491 	.word	0x00008491

0000a4cc <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a4cc:	b580      	push	{r7, lr}
    a4ce:	b086      	sub	sp, #24
    a4d0:	af00      	add	r7, sp, #0
    a4d2:	4603      	mov	r3, r0
    a4d4:	460a      	mov	r2, r1
    a4d6:	71fb      	strb	r3, [r7, #7]
    a4d8:	4613      	mov	r3, r2
    a4da:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a4dc:	79fb      	ldrb	r3, [r7, #7]
    a4de:	f003 030f 	and.w	r3, r3, #15
    a4e2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a4e4:	79fb      	ldrb	r3, [r7, #7]
    a4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	bf14      	ite	ne
    a4ee:	2301      	movne	r3, #1
    a4f0:	2300      	moveq	r3, #0
    a4f2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a4f4:	7cba      	ldrb	r2, [r7, #18]
    a4f6:	7cfb      	ldrb	r3, [r7, #19]
    a4f8:	4611      	mov	r1, r2
    a4fa:	4618      	mov	r0, r3
    a4fc:	4b13      	ldr	r3, [pc, #76]	; (a54c <_usb_d_dev_ep_stall+0x80>)
    a4fe:	4798      	blx	r3
    a500:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a502:	7cfb      	ldrb	r3, [r7, #19]
    a504:	2b04      	cmp	r3, #4
    a506:	d902      	bls.n	a50e <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a508:	f06f 0311 	mvn.w	r3, #17
    a50c:	e01a      	b.n	a544 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a50e:	79bb      	ldrb	r3, [r7, #6]
    a510:	2b01      	cmp	r3, #1
    a512:	d106      	bne.n	a522 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a514:	7cbb      	ldrb	r3, [r7, #18]
    a516:	4619      	mov	r1, r3
    a518:	68f8      	ldr	r0, [r7, #12]
    a51a:	4b0d      	ldr	r3, [pc, #52]	; (a550 <_usb_d_dev_ep_stall+0x84>)
    a51c:	4798      	blx	r3
    a51e:	6178      	str	r0, [r7, #20]
    a520:	e00f      	b.n	a542 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a522:	79bb      	ldrb	r3, [r7, #6]
    a524:	2b00      	cmp	r3, #0
    a526:	d106      	bne.n	a536 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a528:	7cbb      	ldrb	r3, [r7, #18]
    a52a:	4619      	mov	r1, r3
    a52c:	68f8      	ldr	r0, [r7, #12]
    a52e:	4b09      	ldr	r3, [pc, #36]	; (a554 <_usb_d_dev_ep_stall+0x88>)
    a530:	4798      	blx	r3
    a532:	6178      	str	r0, [r7, #20]
    a534:	e005      	b.n	a542 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a536:	7cbb      	ldrb	r3, [r7, #18]
    a538:	4619      	mov	r1, r3
    a53a:	68f8      	ldr	r0, [r7, #12]
    a53c:	4b06      	ldr	r3, [pc, #24]	; (a558 <_usb_d_dev_ep_stall+0x8c>)
    a53e:	4798      	blx	r3
    a540:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a542:	697b      	ldr	r3, [r7, #20]
}
    a544:	4618      	mov	r0, r3
    a546:	3718      	adds	r7, #24
    a548:	46bd      	mov	sp, r7
    a54a:	bd80      	pop	{r7, pc}
    a54c:	00008f6d 	.word	0x00008f6d
    a550:	0000a3a1 	.word	0x0000a3a1
    a554:	0000a3f1 	.word	0x0000a3f1
    a558:	0000a371 	.word	0x0000a371

0000a55c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a55c:	b580      	push	{r7, lr}
    a55e:	b082      	sub	sp, #8
    a560:	af00      	add	r7, sp, #0
    a562:	6078      	str	r0, [r7, #4]
    a564:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a566:	687b      	ldr	r3, [r7, #4]
    a568:	7c9b      	ldrb	r3, [r3, #18]
    a56a:	2bff      	cmp	r3, #255	; 0xff
    a56c:	d014      	beq.n	a598 <_usb_d_dev_trans_done+0x3c>
    a56e:	687b      	ldr	r3, [r7, #4]
    a570:	7cdb      	ldrb	r3, [r3, #19]
    a572:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a576:	b2db      	uxtb	r3, r3
    a578:	2b00      	cmp	r3, #0
    a57a:	d00d      	beq.n	a598 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a57c:	687a      	ldr	r2, [r7, #4]
    a57e:	7cd3      	ldrb	r3, [r2, #19]
    a580:	f36f 1386 	bfc	r3, #6, #1
    a584:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a586:	4b06      	ldr	r3, [pc, #24]	; (a5a0 <_usb_d_dev_trans_done+0x44>)
    a588:	691b      	ldr	r3, [r3, #16]
    a58a:	687a      	ldr	r2, [r7, #4]
    a58c:	7c90      	ldrb	r0, [r2, #18]
    a58e:	687a      	ldr	r2, [r7, #4]
    a590:	6892      	ldr	r2, [r2, #8]
    a592:	6839      	ldr	r1, [r7, #0]
    a594:	4798      	blx	r3
    a596:	e000      	b.n	a59a <_usb_d_dev_trans_done+0x3e>
		return;
    a598:	bf00      	nop
}
    a59a:	3708      	adds	r7, #8
    a59c:	46bd      	mov	sp, r7
    a59e:	bd80      	pop	{r7, pc}
    a5a0:	20000e6c 	.word	0x20000e6c

0000a5a4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a5a4:	b580      	push	{r7, lr}
    a5a6:	b086      	sub	sp, #24
    a5a8:	af00      	add	r7, sp, #0
    a5aa:	60f8      	str	r0, [r7, #12]
    a5ac:	460b      	mov	r3, r1
    a5ae:	607a      	str	r2, [r7, #4]
    a5b0:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a5b2:	68fb      	ldr	r3, [r7, #12]
    a5b4:	7c9b      	ldrb	r3, [r3, #18]
    a5b6:	f003 030f 	and.w	r3, r3, #15
    a5ba:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a5bc:	4b1f      	ldr	r3, [pc, #124]	; (a63c <_usb_d_dev_trans_stop+0x98>)
    a5be:	881b      	ldrh	r3, [r3, #0]
    a5c0:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a5c2:	68fb      	ldr	r3, [r7, #12]
    a5c4:	7c9b      	ldrb	r3, [r3, #18]
    a5c6:	2bff      	cmp	r3, #255	; 0xff
    a5c8:	d033      	beq.n	a632 <_usb_d_dev_trans_stop+0x8e>
    a5ca:	68fb      	ldr	r3, [r7, #12]
    a5cc:	7cdb      	ldrb	r3, [r3, #19]
    a5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a5d2:	b2db      	uxtb	r3, r3
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d02c      	beq.n	a632 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a5d8:	7afb      	ldrb	r3, [r7, #11]
    a5da:	2b00      	cmp	r3, #0
    a5dc:	d006      	beq.n	a5ec <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a5de:	7dfb      	ldrb	r3, [r7, #23]
    a5e0:	2200      	movs	r2, #0
    a5e2:	2101      	movs	r1, #1
    a5e4:	4618      	mov	r0, r3
    a5e6:	4b16      	ldr	r3, [pc, #88]	; (a640 <_usb_d_dev_trans_stop+0x9c>)
    a5e8:	4798      	blx	r3
    a5ea:	e005      	b.n	a5f8 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a5ec:	7dfb      	ldrb	r3, [r7, #23]
    a5ee:	2200      	movs	r2, #0
    a5f0:	2100      	movs	r1, #0
    a5f2:	4618      	mov	r0, r3
    a5f4:	4b13      	ldr	r3, [pc, #76]	; (a644 <_usb_d_dev_trans_stop+0xa0>)
    a5f6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a5f8:	7afb      	ldrb	r3, [r7, #11]
    a5fa:	f107 0218 	add.w	r2, r7, #24
    a5fe:	4413      	add	r3, r2
    a600:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a604:	461a      	mov	r2, r3
    a606:	7dfb      	ldrb	r3, [r7, #23]
    a608:	4611      	mov	r1, r2
    a60a:	4618      	mov	r0, r3
    a60c:	4b0e      	ldr	r3, [pc, #56]	; (a648 <_usb_d_dev_trans_stop+0xa4>)
    a60e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a610:	7afb      	ldrb	r3, [r7, #11]
    a612:	f107 0218 	add.w	r2, r7, #24
    a616:	4413      	add	r3, r2
    a618:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a61c:	461a      	mov	r2, r3
    a61e:	7dfb      	ldrb	r3, [r7, #23]
    a620:	4611      	mov	r1, r2
    a622:	4618      	mov	r0, r3
    a624:	4b09      	ldr	r3, [pc, #36]	; (a64c <_usb_d_dev_trans_stop+0xa8>)
    a626:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a628:	6879      	ldr	r1, [r7, #4]
    a62a:	68f8      	ldr	r0, [r7, #12]
    a62c:	4b08      	ldr	r3, [pc, #32]	; (a650 <_usb_d_dev_trans_stop+0xac>)
    a62e:	4798      	blx	r3
    a630:	e000      	b.n	a634 <_usb_d_dev_trans_stop+0x90>
		return;
    a632:	bf00      	nop
}
    a634:	3718      	adds	r7, #24
    a636:	46bd      	mov	sp, r7
    a638:	bd80      	pop	{r7, pc}
    a63a:	bf00      	nop
    a63c:	00010b50 	.word	0x00010b50
    a640:	00008e59 	.word	0x00008e59
    a644:	00008eb1 	.word	0x00008eb1
    a648:	00008961 	.word	0x00008961
    a64c:	000089b1 	.word	0x000089b1
    a650:	0000a55d 	.word	0x0000a55d

0000a654 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a654:	b580      	push	{r7, lr}
    a656:	b086      	sub	sp, #24
    a658:	af00      	add	r7, sp, #0
    a65a:	4603      	mov	r3, r0
    a65c:	6039      	str	r1, [r7, #0]
    a65e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a660:	79fb      	ldrb	r3, [r7, #7]
    a662:	f003 030f 	and.w	r3, r3, #15
    a666:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a668:	7dfb      	ldrb	r3, [r7, #23]
    a66a:	015b      	lsls	r3, r3, #5
    a66c:	4a1e      	ldr	r2, [pc, #120]	; (a6e8 <_usb_d_dev_ep_read_req+0x94>)
    a66e:	4413      	add	r3, r2
    a670:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a672:	693b      	ldr	r3, [r7, #16]
    a674:	681b      	ldr	r3, [r3, #0]
    a676:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a678:	693b      	ldr	r3, [r7, #16]
    a67a:	685b      	ldr	r3, [r3, #4]
    a67c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a680:	b29b      	uxth	r3, r3
    a682:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a684:	7dfb      	ldrb	r3, [r7, #23]
    a686:	2b04      	cmp	r3, #4
    a688:	d802      	bhi.n	a690 <_usb_d_dev_ep_read_req+0x3c>
    a68a:	683b      	ldr	r3, [r7, #0]
    a68c:	2b00      	cmp	r3, #0
    a68e:	d102      	bne.n	a696 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a690:	f06f 0311 	mvn.w	r3, #17
    a694:	e023      	b.n	a6de <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a696:	7dfb      	ldrb	r3, [r7, #23]
    a698:	4618      	mov	r0, r3
    a69a:	4b14      	ldr	r3, [pc, #80]	; (a6ec <_usb_d_dev_ep_read_req+0x98>)
    a69c:	4798      	blx	r3
    a69e:	4603      	mov	r3, r0
    a6a0:	f083 0301 	eor.w	r3, r3, #1
    a6a4:	b2db      	uxtb	r3, r3
    a6a6:	2b00      	cmp	r3, #0
    a6a8:	d002      	beq.n	a6b0 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a6aa:	f06f 0312 	mvn.w	r3, #18
    a6ae:	e016      	b.n	a6de <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a6b0:	7dfb      	ldrb	r3, [r7, #23]
    a6b2:	4618      	mov	r0, r3
    a6b4:	4b0e      	ldr	r3, [pc, #56]	; (a6f0 <_usb_d_dev_ep_read_req+0x9c>)
    a6b6:	4798      	blx	r3
    a6b8:	4603      	mov	r3, r0
    a6ba:	f083 0301 	eor.w	r3, r3, #1
    a6be:	b2db      	uxtb	r3, r3
    a6c0:	2b00      	cmp	r3, #0
    a6c2:	d001      	beq.n	a6c8 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a6c4:	2300      	movs	r3, #0
    a6c6:	e00a      	b.n	a6de <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a6c8:	68fb      	ldr	r3, [r7, #12]
    a6ca:	2208      	movs	r2, #8
    a6cc:	4619      	mov	r1, r3
    a6ce:	6838      	ldr	r0, [r7, #0]
    a6d0:	4b08      	ldr	r3, [pc, #32]	; (a6f4 <_usb_d_dev_ep_read_req+0xa0>)
    a6d2:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a6d4:	7dfb      	ldrb	r3, [r7, #23]
    a6d6:	4618      	mov	r0, r3
    a6d8:	4b07      	ldr	r3, [pc, #28]	; (a6f8 <_usb_d_dev_ep_read_req+0xa4>)
    a6da:	4798      	blx	r3

	return bytes;
    a6dc:	897b      	ldrh	r3, [r7, #10]
}
    a6de:	4618      	mov	r0, r3
    a6e0:	3718      	adds	r7, #24
    a6e2:	46bd      	mov	sp, r7
    a6e4:	bd80      	pop	{r7, pc}
    a6e6:	bf00      	nop
    a6e8:	20000f34 	.word	0x20000f34
    a6ec:	000089d9 	.word	0x000089d9
    a6f0:	00008b85 	.word	0x00008b85
    a6f4:	00010295 	.word	0x00010295
    a6f8:	00008bb5 	.word	0x00008bb5

0000a6fc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a6fc:	b580      	push	{r7, lr}
    a6fe:	b086      	sub	sp, #24
    a700:	af00      	add	r7, sp, #0
    a702:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a704:	687b      	ldr	r3, [r7, #4]
    a706:	7a1b      	ldrb	r3, [r3, #8]
    a708:	f003 030f 	and.w	r3, r3, #15
    a70c:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	7a1b      	ldrb	r3, [r3, #8]
    a712:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a716:	2b00      	cmp	r3, #0
    a718:	bf14      	ite	ne
    a71a:	2301      	movne	r3, #1
    a71c:	2300      	moveq	r3, #0
    a71e:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a720:	7d7a      	ldrb	r2, [r7, #21]
    a722:	7dbb      	ldrb	r3, [r7, #22]
    a724:	4611      	mov	r1, r2
    a726:	4618      	mov	r0, r3
    a728:	4b5f      	ldr	r3, [pc, #380]	; (a8a8 <_usb_d_dev_ep_trans+0x1ac>)
    a72a:	4798      	blx	r3
    a72c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a72e:	693b      	ldr	r3, [r7, #16]
    a730:	8a1b      	ldrh	r3, [r3, #16]
    a732:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a736:	4293      	cmp	r3, r2
    a738:	d004      	beq.n	a744 <_usb_d_dev_ep_trans+0x48>
    a73a:	693b      	ldr	r3, [r7, #16]
    a73c:	8a1b      	ldrh	r3, [r3, #16]
    a73e:	3b01      	subs	r3, #1
    a740:	b29b      	uxth	r3, r3
    a742:	e001      	b.n	a748 <_usb_d_dev_ep_trans+0x4c>
    a744:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a748:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a74a:	687b      	ldr	r3, [r7, #4]
    a74c:	685a      	ldr	r2, [r3, #4]
    a74e:	89fb      	ldrh	r3, [r7, #14]
    a750:	4013      	ands	r3, r2
    a752:	2b00      	cmp	r3, #0
    a754:	bf14      	ite	ne
    a756:	2301      	movne	r3, #1
    a758:	2300      	moveq	r3, #0
    a75a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a75c:	2300      	movs	r3, #0
    a75e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a760:	7dbb      	ldrb	r3, [r7, #22]
    a762:	2b04      	cmp	r3, #4
    a764:	d902      	bls.n	a76c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a766:	f06f 0311 	mvn.w	r3, #17
    a76a:	e098      	b.n	a89e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a76c:	687b      	ldr	r3, [r7, #4]
    a76e:	681b      	ldr	r3, [r3, #0]
    a770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a774:	d31a      	bcc.n	a7ac <_usb_d_dev_ep_trans+0xb0>
    a776:	687b      	ldr	r3, [r7, #4]
    a778:	681b      	ldr	r3, [r3, #0]
    a77a:	461a      	mov	r2, r3
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	685b      	ldr	r3, [r3, #4]
    a780:	4413      	add	r3, r2
    a782:	4a4a      	ldr	r2, [pc, #296]	; (a8ac <_usb_d_dev_ep_trans+0x1b0>)
    a784:	4293      	cmp	r3, r2
    a786:	d811      	bhi.n	a7ac <_usb_d_dev_ep_trans+0xb0>
    a788:	687b      	ldr	r3, [r7, #4]
    a78a:	681b      	ldr	r3, [r3, #0]
    a78c:	f003 0303 	and.w	r3, r3, #3
    a790:	2b00      	cmp	r3, #0
    a792:	d10b      	bne.n	a7ac <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a794:	7d7b      	ldrb	r3, [r7, #21]
    a796:	f083 0301 	eor.w	r3, r3, #1
    a79a:	b2db      	uxtb	r3, r3
    a79c:	2b00      	cmp	r3, #0
    a79e:	d00e      	beq.n	a7be <_usb_d_dev_ep_trans+0xc2>
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	685b      	ldr	r3, [r3, #4]
    a7a4:	693a      	ldr	r2, [r7, #16]
    a7a6:	8a12      	ldrh	r2, [r2, #16]
    a7a8:	4293      	cmp	r3, r2
    a7aa:	d208      	bcs.n	a7be <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a7ac:	693b      	ldr	r3, [r7, #16]
    a7ae:	68db      	ldr	r3, [r3, #12]
    a7b0:	2b00      	cmp	r3, #0
    a7b2:	d102      	bne.n	a7ba <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a7b4:	f06f 0312 	mvn.w	r3, #18
    a7b8:	e071      	b.n	a89e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a7ba:	2301      	movs	r3, #1
    a7bc:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a7be:	7d7b      	ldrb	r3, [r7, #21]
    a7c0:	f083 0301 	eor.w	r3, r3, #1
    a7c4:	b2db      	uxtb	r3, r3
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	d009      	beq.n	a7de <_usb_d_dev_ep_trans+0xe2>
    a7ca:	7b7b      	ldrb	r3, [r7, #13]
    a7cc:	2b00      	cmp	r3, #0
    a7ce:	d006      	beq.n	a7de <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a7d0:	693b      	ldr	r3, [r7, #16]
    a7d2:	68db      	ldr	r3, [r3, #12]
    a7d4:	2b00      	cmp	r3, #0
    a7d6:	d102      	bne.n	a7de <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a7d8:	f06f 0311 	mvn.w	r3, #17
    a7dc:	e05f      	b.n	a89e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a7de:	693b      	ldr	r3, [r7, #16]
    a7e0:	7cdb      	ldrb	r3, [r3, #19]
    a7e2:	f003 0308 	and.w	r3, r3, #8
    a7e6:	b2db      	uxtb	r3, r3
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	d001      	beq.n	a7f0 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a7ec:	2302      	movs	r3, #2
    a7ee:	e056      	b.n	a89e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a7f0:	f107 0308 	add.w	r3, r7, #8
    a7f4:	4618      	mov	r0, r3
    a7f6:	4b2e      	ldr	r3, [pc, #184]	; (a8b0 <_usb_d_dev_ep_trans+0x1b4>)
    a7f8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a7fa:	693b      	ldr	r3, [r7, #16]
    a7fc:	7cdb      	ldrb	r3, [r3, #19]
    a7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a802:	b2db      	uxtb	r3, r3
    a804:	2b00      	cmp	r3, #0
    a806:	d006      	beq.n	a816 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a808:	f107 0308 	add.w	r3, r7, #8
    a80c:	4618      	mov	r0, r3
    a80e:	4b29      	ldr	r3, [pc, #164]	; (a8b4 <_usb_d_dev_ep_trans+0x1b8>)
    a810:	4798      	blx	r3
		return USB_BUSY;
    a812:	2301      	movs	r3, #1
    a814:	e043      	b.n	a89e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a816:	693a      	ldr	r2, [r7, #16]
    a818:	7cd3      	ldrb	r3, [r2, #19]
    a81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a81e:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a820:	f107 0308 	add.w	r3, r7, #8
    a824:	4618      	mov	r0, r3
    a826:	4b23      	ldr	r3, [pc, #140]	; (a8b4 <_usb_d_dev_ep_trans+0x1b8>)
    a828:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a82a:	687b      	ldr	r3, [r7, #4]
    a82c:	681a      	ldr	r2, [r3, #0]
    a82e:	693b      	ldr	r3, [r7, #16]
    a830:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a832:	687b      	ldr	r3, [r7, #4]
    a834:	685a      	ldr	r2, [r3, #4]
    a836:	693b      	ldr	r3, [r7, #16]
    a838:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a83a:	693b      	ldr	r3, [r7, #16]
    a83c:	2200      	movs	r2, #0
    a83e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a840:	693a      	ldr	r2, [r7, #16]
    a842:	7cd3      	ldrb	r3, [r2, #19]
    a844:	7d79      	ldrb	r1, [r7, #21]
    a846:	f361 13c7 	bfi	r3, r1, #7, #1
    a84a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a84c:	693a      	ldr	r2, [r7, #16]
    a84e:	7cd3      	ldrb	r3, [r2, #19]
    a850:	7df9      	ldrb	r1, [r7, #23]
    a852:	f361 1345 	bfi	r3, r1, #5, #1
    a856:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a858:	687b      	ldr	r3, [r7, #4]
    a85a:	7a5b      	ldrb	r3, [r3, #9]
    a85c:	2b00      	cmp	r3, #0
    a85e:	d007      	beq.n	a870 <_usb_d_dev_ep_trans+0x174>
    a860:	7b7b      	ldrb	r3, [r7, #13]
    a862:	f083 0301 	eor.w	r3, r3, #1
    a866:	b2db      	uxtb	r3, r3
    a868:	2b00      	cmp	r3, #0
    a86a:	d001      	beq.n	a870 <_usb_d_dev_ep_trans+0x174>
    a86c:	2301      	movs	r3, #1
    a86e:	e000      	b.n	a872 <_usb_d_dev_ep_trans+0x176>
    a870:	2300      	movs	r3, #0
    a872:	b2db      	uxtb	r3, r3
    a874:	f003 0301 	and.w	r3, r3, #1
    a878:	b2d9      	uxtb	r1, r3
    a87a:	693a      	ldr	r2, [r7, #16]
    a87c:	7cd3      	ldrb	r3, [r2, #19]
    a87e:	f361 1304 	bfi	r3, r1, #4, #1
    a882:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a884:	7d7b      	ldrb	r3, [r7, #21]
    a886:	2b00      	cmp	r3, #0
    a888:	d004      	beq.n	a894 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a88a:	2100      	movs	r1, #0
    a88c:	6938      	ldr	r0, [r7, #16]
    a88e:	4b0a      	ldr	r3, [pc, #40]	; (a8b8 <_usb_d_dev_ep_trans+0x1bc>)
    a890:	4798      	blx	r3
    a892:	e003      	b.n	a89c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a894:	2100      	movs	r1, #0
    a896:	6938      	ldr	r0, [r7, #16]
    a898:	4b08      	ldr	r3, [pc, #32]	; (a8bc <_usb_d_dev_ep_trans+0x1c0>)
    a89a:	4798      	blx	r3
	}

	return ERR_NONE;
    a89c:	2300      	movs	r3, #0
}
    a89e:	4618      	mov	r0, r3
    a8a0:	3718      	adds	r7, #24
    a8a2:	46bd      	mov	sp, r7
    a8a4:	bd80      	pop	{r7, pc}
    a8a6:	bf00      	nop
    a8a8:	00008f6d 	.word	0x00008f6d
    a8ac:	20041fff 	.word	0x20041fff
    a8b0:	0000b0c9 	.word	0x0000b0c9
    a8b4:	0000b0ef 	.word	0x0000b0ef
    a8b8:	00009235 	.word	0x00009235
    a8bc:	0000944d 	.word	0x0000944d

0000a8c0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a8c0:	b580      	push	{r7, lr}
    a8c2:	b084      	sub	sp, #16
    a8c4:	af00      	add	r7, sp, #0
    a8c6:	4603      	mov	r3, r0
    a8c8:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a8ca:	79fb      	ldrb	r3, [r7, #7]
    a8cc:	f003 030f 	and.w	r3, r3, #15
    a8d0:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a8d2:	79fb      	ldrb	r3, [r7, #7]
    a8d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a8d8:	2b00      	cmp	r3, #0
    a8da:	bf14      	ite	ne
    a8dc:	2301      	movne	r3, #1
    a8de:	2300      	moveq	r3, #0
    a8e0:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a8e2:	7bba      	ldrb	r2, [r7, #14]
    a8e4:	7bfb      	ldrb	r3, [r7, #15]
    a8e6:	4611      	mov	r1, r2
    a8e8:	4618      	mov	r0, r3
    a8ea:	4b08      	ldr	r3, [pc, #32]	; (a90c <_usb_d_dev_ep_abort+0x4c>)
    a8ec:	4798      	blx	r3
    a8ee:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a8f0:	7bfb      	ldrb	r3, [r7, #15]
    a8f2:	2b04      	cmp	r3, #4
    a8f4:	d806      	bhi.n	a904 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a8f6:	7bbb      	ldrb	r3, [r7, #14]
    a8f8:	2202      	movs	r2, #2
    a8fa:	4619      	mov	r1, r3
    a8fc:	68b8      	ldr	r0, [r7, #8]
    a8fe:	4b04      	ldr	r3, [pc, #16]	; (a910 <_usb_d_dev_ep_abort+0x50>)
    a900:	4798      	blx	r3
    a902:	e000      	b.n	a906 <_usb_d_dev_ep_abort+0x46>
		return;
    a904:	bf00      	nop
}
    a906:	3710      	adds	r7, #16
    a908:	46bd      	mov	sp, r7
    a90a:	bd80      	pop	{r7, pc}
    a90c:	00008f6d 	.word	0x00008f6d
    a910:	0000a5a5 	.word	0x0000a5a5

0000a914 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a914:	b480      	push	{r7}
    a916:	b085      	sub	sp, #20
    a918:	af00      	add	r7, sp, #0
    a91a:	4603      	mov	r3, r0
    a91c:	6039      	str	r1, [r7, #0]
    a91e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a920:	683b      	ldr	r3, [r7, #0]
    a922:	2b00      	cmp	r3, #0
    a924:	d001      	beq.n	a92a <_usb_d_dev_register_callback+0x16>
    a926:	683b      	ldr	r3, [r7, #0]
    a928:	e000      	b.n	a92c <_usb_d_dev_register_callback+0x18>
    a92a:	4b0a      	ldr	r3, [pc, #40]	; (a954 <_usb_d_dev_register_callback+0x40>)
    a92c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a92e:	79fb      	ldrb	r3, [r7, #7]
    a930:	2b01      	cmp	r3, #1
    a932:	d103      	bne.n	a93c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a934:	4a08      	ldr	r2, [pc, #32]	; (a958 <_usb_d_dev_register_callback+0x44>)
    a936:	68fb      	ldr	r3, [r7, #12]
    a938:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a93a:	e005      	b.n	a948 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a93c:	79fb      	ldrb	r3, [r7, #7]
    a93e:	2b00      	cmp	r3, #0
    a940:	d102      	bne.n	a948 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a942:	4a05      	ldr	r2, [pc, #20]	; (a958 <_usb_d_dev_register_callback+0x44>)
    a944:	68fb      	ldr	r3, [r7, #12]
    a946:	6013      	str	r3, [r2, #0]
}
    a948:	bf00      	nop
    a94a:	3714      	adds	r7, #20
    a94c:	46bd      	mov	sp, r7
    a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a952:	4770      	bx	lr
    a954:	000087f5 	.word	0x000087f5
    a958:	20000e6c 	.word	0x20000e6c

0000a95c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a95c:	b480      	push	{r7}
    a95e:	b085      	sub	sp, #20
    a960:	af00      	add	r7, sp, #0
    a962:	4603      	mov	r3, r0
    a964:	6039      	str	r1, [r7, #0]
    a966:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a968:	683b      	ldr	r3, [r7, #0]
    a96a:	2b00      	cmp	r3, #0
    a96c:	d001      	beq.n	a972 <_usb_d_dev_register_ep_callback+0x16>
    a96e:	683b      	ldr	r3, [r7, #0]
    a970:	e000      	b.n	a974 <_usb_d_dev_register_ep_callback+0x18>
    a972:	4b0e      	ldr	r3, [pc, #56]	; (a9ac <_usb_d_dev_register_ep_callback+0x50>)
    a974:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a976:	79fb      	ldrb	r3, [r7, #7]
    a978:	2b00      	cmp	r3, #0
    a97a:	d103      	bne.n	a984 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a97c:	4a0c      	ldr	r2, [pc, #48]	; (a9b0 <_usb_d_dev_register_ep_callback+0x54>)
    a97e:	68fb      	ldr	r3, [r7, #12]
    a980:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a982:	e00c      	b.n	a99e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a984:	79fb      	ldrb	r3, [r7, #7]
    a986:	2b01      	cmp	r3, #1
    a988:	d103      	bne.n	a992 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a98a:	4a09      	ldr	r2, [pc, #36]	; (a9b0 <_usb_d_dev_register_ep_callback+0x54>)
    a98c:	68fb      	ldr	r3, [r7, #12]
    a98e:	60d3      	str	r3, [r2, #12]
}
    a990:	e005      	b.n	a99e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a992:	79fb      	ldrb	r3, [r7, #7]
    a994:	2b02      	cmp	r3, #2
    a996:	d102      	bne.n	a99e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a998:	4a05      	ldr	r2, [pc, #20]	; (a9b0 <_usb_d_dev_register_ep_callback+0x54>)
    a99a:	68fb      	ldr	r3, [r7, #12]
    a99c:	6113      	str	r3, [r2, #16]
}
    a99e:	bf00      	nop
    a9a0:	3714      	adds	r7, #20
    a9a2:	46bd      	mov	sp, r7
    a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9a8:	4770      	bx	lr
    a9aa:	bf00      	nop
    a9ac:	000087f5 	.word	0x000087f5
    a9b0:	20000e6c 	.word	0x20000e6c

0000a9b4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a9b4:	b580      	push	{r7, lr}
    a9b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a9b8:	4b01      	ldr	r3, [pc, #4]	; (a9c0 <USB_0_Handler+0xc>)
    a9ba:	4798      	blx	r3
}
    a9bc:	bf00      	nop
    a9be:	bd80      	pop	{r7, pc}
    a9c0:	00009c25 	.word	0x00009c25

0000a9c4 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a9c4:	b580      	push	{r7, lr}
    a9c6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a9c8:	4b01      	ldr	r3, [pc, #4]	; (a9d0 <USB_1_Handler+0xc>)
    a9ca:	4798      	blx	r3
}
    a9cc:	bf00      	nop
    a9ce:	bd80      	pop	{r7, pc}
    a9d0:	00009c25 	.word	0x00009c25

0000a9d4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a9d4:	b580      	push	{r7, lr}
    a9d6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a9d8:	4b01      	ldr	r3, [pc, #4]	; (a9e0 <USB_2_Handler+0xc>)
    a9da:	4798      	blx	r3
}
    a9dc:	bf00      	nop
    a9de:	bd80      	pop	{r7, pc}
    a9e0:	00009c25 	.word	0x00009c25

0000a9e4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a9e8:	4b01      	ldr	r3, [pc, #4]	; (a9f0 <USB_3_Handler+0xc>)
    a9ea:	4798      	blx	r3
}
    a9ec:	bf00      	nop
    a9ee:	bd80      	pop	{r7, pc}
    a9f0:	00009c25 	.word	0x00009c25

0000a9f4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a9f4:	b480      	push	{r7}
    a9f6:	b083      	sub	sp, #12
    a9f8:	af00      	add	r7, sp, #0
    a9fa:	6078      	str	r0, [r7, #4]
    a9fc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a9fe:	bf00      	nop
    aa00:	687b      	ldr	r3, [r7, #4]
    aa02:	689a      	ldr	r2, [r3, #8]
    aa04:	683b      	ldr	r3, [r7, #0]
    aa06:	4013      	ands	r3, r2
    aa08:	2b00      	cmp	r3, #0
    aa0a:	d1f9      	bne.n	aa00 <hri_wdt_wait_for_sync+0xc>
	};
}
    aa0c:	bf00      	nop
    aa0e:	370c      	adds	r7, #12
    aa10:	46bd      	mov	sp, r7
    aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa16:	4770      	bx	lr

0000aa18 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    aa18:	b580      	push	{r7, lr}
    aa1a:	b084      	sub	sp, #16
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aa20:	210e      	movs	r1, #14
    aa22:	6878      	ldr	r0, [r7, #4]
    aa24:	4b0a      	ldr	r3, [pc, #40]	; (aa50 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    aa26:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    aa28:	687b      	ldr	r3, [r7, #4]
    aa2a:	781b      	ldrb	r3, [r3, #0]
    aa2c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    aa2e:	7bfb      	ldrb	r3, [r7, #15]
    aa30:	085b      	lsrs	r3, r3, #1
    aa32:	b2db      	uxtb	r3, r3
    aa34:	f003 0301 	and.w	r3, r3, #1
    aa38:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aa3a:	7bfb      	ldrb	r3, [r7, #15]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	bf14      	ite	ne
    aa40:	2301      	movne	r3, #1
    aa42:	2300      	moveq	r3, #0
    aa44:	b2db      	uxtb	r3, r3
}
    aa46:	4618      	mov	r0, r3
    aa48:	3710      	adds	r7, #16
    aa4a:	46bd      	mov	sp, r7
    aa4c:	bd80      	pop	{r7, pc}
    aa4e:	bf00      	nop
    aa50:	0000a9f5 	.word	0x0000a9f5

0000aa54 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    aa54:	b580      	push	{r7, lr}
    aa56:	b082      	sub	sp, #8
    aa58:	af00      	add	r7, sp, #0
    aa5a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    aa5c:	687b      	ldr	r3, [r7, #4]
    aa5e:	781b      	ldrb	r3, [r3, #0]
    aa60:	b2db      	uxtb	r3, r3
    aa62:	f023 0304 	bic.w	r3, r3, #4
    aa66:	b2da      	uxtb	r2, r3
    aa68:	687b      	ldr	r3, [r7, #4]
    aa6a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aa6c:	210e      	movs	r1, #14
    aa6e:	6878      	ldr	r0, [r7, #4]
    aa70:	4b02      	ldr	r3, [pc, #8]	; (aa7c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    aa72:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    aa74:	bf00      	nop
    aa76:	3708      	adds	r7, #8
    aa78:	46bd      	mov	sp, r7
    aa7a:	bd80      	pop	{r7, pc}
    aa7c:	0000a9f5 	.word	0x0000a9f5

0000aa80 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	b084      	sub	sp, #16
    aa84:	af00      	add	r7, sp, #0
    aa86:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aa88:	210e      	movs	r1, #14
    aa8a:	6878      	ldr	r0, [r7, #4]
    aa8c:	4b08      	ldr	r3, [pc, #32]	; (aab0 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    aa8e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	781b      	ldrb	r3, [r3, #0]
    aa94:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    aa96:	7bfb      	ldrb	r3, [r7, #15]
    aa98:	09db      	lsrs	r3, r3, #7
    aa9a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aa9c:	7bfb      	ldrb	r3, [r7, #15]
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	bf14      	ite	ne
    aaa2:	2301      	movne	r3, #1
    aaa4:	2300      	moveq	r3, #0
    aaa6:	b2db      	uxtb	r3, r3
}
    aaa8:	4618      	mov	r0, r3
    aaaa:	3710      	adds	r7, #16
    aaac:	46bd      	mov	sp, r7
    aaae:	bd80      	pop	{r7, pc}
    aab0:	0000a9f5 	.word	0x0000a9f5

0000aab4 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    aab4:	b480      	push	{r7}
    aab6:	b085      	sub	sp, #20
    aab8:	af00      	add	r7, sp, #0
    aaba:	6078      	str	r0, [r7, #4]
    aabc:	460b      	mov	r3, r1
    aabe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    aac0:	687b      	ldr	r3, [r7, #4]
    aac2:	785b      	ldrb	r3, [r3, #1]
    aac4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    aac6:	7bfb      	ldrb	r3, [r7, #15]
    aac8:	f023 030f 	bic.w	r3, r3, #15
    aacc:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    aace:	78fb      	ldrb	r3, [r7, #3]
    aad0:	f003 030f 	and.w	r3, r3, #15
    aad4:	b2da      	uxtb	r2, r3
    aad6:	7bfb      	ldrb	r3, [r7, #15]
    aad8:	4313      	orrs	r3, r2
    aada:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    aadc:	687b      	ldr	r3, [r7, #4]
    aade:	7bfa      	ldrb	r2, [r7, #15]
    aae0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    aae2:	bf00      	nop
    aae4:	3714      	adds	r7, #20
    aae6:	46bd      	mov	sp, r7
    aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaec:	4770      	bx	lr
	...

0000aaf0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    aaf0:	b580      	push	{r7, lr}
    aaf2:	b082      	sub	sp, #8
    aaf4:	af00      	add	r7, sp, #0
    aaf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    aaf8:	687b      	ldr	r3, [r7, #4]
    aafa:	2b00      	cmp	r3, #0
    aafc:	d005      	beq.n	ab0a <_wdt_init+0x1a>
    aafe:	687b      	ldr	r3, [r7, #4]
    ab00:	681b      	ldr	r3, [r3, #0]
    ab02:	2b00      	cmp	r3, #0
    ab04:	d001      	beq.n	ab0a <_wdt_init+0x1a>
    ab06:	2301      	movs	r3, #1
    ab08:	e000      	b.n	ab0c <_wdt_init+0x1c>
    ab0a:	2300      	movs	r3, #0
    ab0c:	f003 0301 	and.w	r3, r3, #1
    ab10:	b2db      	uxtb	r3, r3
    ab12:	2250      	movs	r2, #80	; 0x50
    ab14:	4913      	ldr	r1, [pc, #76]	; (ab64 <_wdt_init+0x74>)
    ab16:	4618      	mov	r0, r3
    ab18:	4b13      	ldr	r3, [pc, #76]	; (ab68 <_wdt_init+0x78>)
    ab1a:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ab1c:	687b      	ldr	r3, [r7, #4]
    ab1e:	681b      	ldr	r3, [r3, #0]
    ab20:	4618      	mov	r0, r3
    ab22:	4b12      	ldr	r3, [pc, #72]	; (ab6c <_wdt_init+0x7c>)
    ab24:	4798      	blx	r3
    ab26:	4603      	mov	r3, r0
    ab28:	2b00      	cmp	r3, #0
    ab2a:	d107      	bne.n	ab3c <_wdt_init+0x4c>
    ab2c:	687b      	ldr	r3, [r7, #4]
    ab2e:	681b      	ldr	r3, [r3, #0]
    ab30:	4618      	mov	r0, r3
    ab32:	4b0f      	ldr	r3, [pc, #60]	; (ab70 <_wdt_init+0x80>)
    ab34:	4798      	blx	r3
    ab36:	4603      	mov	r3, r0
    ab38:	2b00      	cmp	r3, #0
    ab3a:	d002      	beq.n	ab42 <_wdt_init+0x52>
		return ERR_DENIED;
    ab3c:	f06f 0310 	mvn.w	r3, #16
    ab40:	e00b      	b.n	ab5a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ab42:	687b      	ldr	r3, [r7, #4]
    ab44:	681b      	ldr	r3, [r3, #0]
    ab46:	4618      	mov	r0, r3
    ab48:	4b0a      	ldr	r3, [pc, #40]	; (ab74 <_wdt_init+0x84>)
    ab4a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ab4c:	687b      	ldr	r3, [r7, #4]
    ab4e:	681b      	ldr	r3, [r3, #0]
    ab50:	210b      	movs	r1, #11
    ab52:	4618      	mov	r0, r3
    ab54:	4b08      	ldr	r3, [pc, #32]	; (ab78 <_wdt_init+0x88>)
    ab56:	4798      	blx	r3
	}

	return ERR_NONE;
    ab58:	2300      	movs	r3, #0
}
    ab5a:	4618      	mov	r0, r3
    ab5c:	3708      	adds	r7, #8
    ab5e:	46bd      	mov	sp, r7
    ab60:	bd80      	pop	{r7, pc}
    ab62:	bf00      	nop
    ab64:	00010b54 	.word	0x00010b54
    ab68:	000038e1 	.word	0x000038e1
    ab6c:	0000aa81 	.word	0x0000aa81
    ab70:	0000aa19 	.word	0x0000aa19
    ab74:	0000aa55 	.word	0x0000aa55
    ab78:	0000aab5 	.word	0x0000aab5

0000ab7c <hri_port_set_DIR_reg>:
{
    ab7c:	b480      	push	{r7}
    ab7e:	b085      	sub	sp, #20
    ab80:	af00      	add	r7, sp, #0
    ab82:	60f8      	str	r0, [r7, #12]
    ab84:	460b      	mov	r3, r1
    ab86:	607a      	str	r2, [r7, #4]
    ab88:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ab8a:	7afb      	ldrb	r3, [r7, #11]
    ab8c:	68fa      	ldr	r2, [r7, #12]
    ab8e:	01db      	lsls	r3, r3, #7
    ab90:	4413      	add	r3, r2
    ab92:	3308      	adds	r3, #8
    ab94:	687a      	ldr	r2, [r7, #4]
    ab96:	601a      	str	r2, [r3, #0]
}
    ab98:	bf00      	nop
    ab9a:	3714      	adds	r7, #20
    ab9c:	46bd      	mov	sp, r7
    ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aba2:	4770      	bx	lr

0000aba4 <hri_port_clear_DIR_reg>:
{
    aba4:	b480      	push	{r7}
    aba6:	b085      	sub	sp, #20
    aba8:	af00      	add	r7, sp, #0
    abaa:	60f8      	str	r0, [r7, #12]
    abac:	460b      	mov	r3, r1
    abae:	607a      	str	r2, [r7, #4]
    abb0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    abb2:	7afb      	ldrb	r3, [r7, #11]
    abb4:	68fa      	ldr	r2, [r7, #12]
    abb6:	01db      	lsls	r3, r3, #7
    abb8:	4413      	add	r3, r2
    abba:	3304      	adds	r3, #4
    abbc:	687a      	ldr	r2, [r7, #4]
    abbe:	601a      	str	r2, [r3, #0]
}
    abc0:	bf00      	nop
    abc2:	3714      	adds	r7, #20
    abc4:	46bd      	mov	sp, r7
    abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    abca:	4770      	bx	lr

0000abcc <hri_port_set_OUT_reg>:
{
    abcc:	b480      	push	{r7}
    abce:	b085      	sub	sp, #20
    abd0:	af00      	add	r7, sp, #0
    abd2:	60f8      	str	r0, [r7, #12]
    abd4:	460b      	mov	r3, r1
    abd6:	607a      	str	r2, [r7, #4]
    abd8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    abda:	7afb      	ldrb	r3, [r7, #11]
    abdc:	68fa      	ldr	r2, [r7, #12]
    abde:	01db      	lsls	r3, r3, #7
    abe0:	4413      	add	r3, r2
    abe2:	3318      	adds	r3, #24
    abe4:	687a      	ldr	r2, [r7, #4]
    abe6:	601a      	str	r2, [r3, #0]
}
    abe8:	bf00      	nop
    abea:	3714      	adds	r7, #20
    abec:	46bd      	mov	sp, r7
    abee:	f85d 7b04 	ldr.w	r7, [sp], #4
    abf2:	4770      	bx	lr

0000abf4 <hri_port_clear_OUT_reg>:
{
    abf4:	b480      	push	{r7}
    abf6:	b085      	sub	sp, #20
    abf8:	af00      	add	r7, sp, #0
    abfa:	60f8      	str	r0, [r7, #12]
    abfc:	460b      	mov	r3, r1
    abfe:	607a      	str	r2, [r7, #4]
    ac00:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ac02:	7afb      	ldrb	r3, [r7, #11]
    ac04:	68fa      	ldr	r2, [r7, #12]
    ac06:	01db      	lsls	r3, r3, #7
    ac08:	4413      	add	r3, r2
    ac0a:	3314      	adds	r3, #20
    ac0c:	687a      	ldr	r2, [r7, #4]
    ac0e:	601a      	str	r2, [r3, #0]
}
    ac10:	bf00      	nop
    ac12:	3714      	adds	r7, #20
    ac14:	46bd      	mov	sp, r7
    ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac1a:	4770      	bx	lr

0000ac1c <hri_port_write_PMUX_PMUXE_bf>:
{
    ac1c:	b480      	push	{r7}
    ac1e:	b085      	sub	sp, #20
    ac20:	af00      	add	r7, sp, #0
    ac22:	6078      	str	r0, [r7, #4]
    ac24:	4608      	mov	r0, r1
    ac26:	4611      	mov	r1, r2
    ac28:	461a      	mov	r2, r3
    ac2a:	4603      	mov	r3, r0
    ac2c:	70fb      	strb	r3, [r7, #3]
    ac2e:	460b      	mov	r3, r1
    ac30:	70bb      	strb	r3, [r7, #2]
    ac32:	4613      	mov	r3, r2
    ac34:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ac36:	78fa      	ldrb	r2, [r7, #3]
    ac38:	78bb      	ldrb	r3, [r7, #2]
    ac3a:	6879      	ldr	r1, [r7, #4]
    ac3c:	01d2      	lsls	r2, r2, #7
    ac3e:	440a      	add	r2, r1
    ac40:	4413      	add	r3, r2
    ac42:	3330      	adds	r3, #48	; 0x30
    ac44:	781b      	ldrb	r3, [r3, #0]
    ac46:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ac48:	7bfb      	ldrb	r3, [r7, #15]
    ac4a:	f023 030f 	bic.w	r3, r3, #15
    ac4e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ac50:	787b      	ldrb	r3, [r7, #1]
    ac52:	f003 030f 	and.w	r3, r3, #15
    ac56:	b2da      	uxtb	r2, r3
    ac58:	7bfb      	ldrb	r3, [r7, #15]
    ac5a:	4313      	orrs	r3, r2
    ac5c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ac5e:	78fa      	ldrb	r2, [r7, #3]
    ac60:	78bb      	ldrb	r3, [r7, #2]
    ac62:	6879      	ldr	r1, [r7, #4]
    ac64:	01d2      	lsls	r2, r2, #7
    ac66:	440a      	add	r2, r1
    ac68:	4413      	add	r3, r2
    ac6a:	3330      	adds	r3, #48	; 0x30
    ac6c:	7bfa      	ldrb	r2, [r7, #15]
    ac6e:	701a      	strb	r2, [r3, #0]
}
    ac70:	bf00      	nop
    ac72:	3714      	adds	r7, #20
    ac74:	46bd      	mov	sp, r7
    ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac7a:	4770      	bx	lr

0000ac7c <hri_port_write_PMUX_PMUXO_bf>:
{
    ac7c:	b480      	push	{r7}
    ac7e:	b085      	sub	sp, #20
    ac80:	af00      	add	r7, sp, #0
    ac82:	6078      	str	r0, [r7, #4]
    ac84:	4608      	mov	r0, r1
    ac86:	4611      	mov	r1, r2
    ac88:	461a      	mov	r2, r3
    ac8a:	4603      	mov	r3, r0
    ac8c:	70fb      	strb	r3, [r7, #3]
    ac8e:	460b      	mov	r3, r1
    ac90:	70bb      	strb	r3, [r7, #2]
    ac92:	4613      	mov	r3, r2
    ac94:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ac96:	78fa      	ldrb	r2, [r7, #3]
    ac98:	78bb      	ldrb	r3, [r7, #2]
    ac9a:	6879      	ldr	r1, [r7, #4]
    ac9c:	01d2      	lsls	r2, r2, #7
    ac9e:	440a      	add	r2, r1
    aca0:	4413      	add	r3, r2
    aca2:	3330      	adds	r3, #48	; 0x30
    aca4:	781b      	ldrb	r3, [r3, #0]
    aca6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    aca8:	7bfb      	ldrb	r3, [r7, #15]
    acaa:	f003 030f 	and.w	r3, r3, #15
    acae:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    acb0:	787b      	ldrb	r3, [r7, #1]
    acb2:	011b      	lsls	r3, r3, #4
    acb4:	b2da      	uxtb	r2, r3
    acb6:	7bfb      	ldrb	r3, [r7, #15]
    acb8:	4313      	orrs	r3, r2
    acba:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    acbc:	78fa      	ldrb	r2, [r7, #3]
    acbe:	78bb      	ldrb	r3, [r7, #2]
    acc0:	6879      	ldr	r1, [r7, #4]
    acc2:	01d2      	lsls	r2, r2, #7
    acc4:	440a      	add	r2, r1
    acc6:	4413      	add	r3, r2
    acc8:	3330      	adds	r3, #48	; 0x30
    acca:	7bfa      	ldrb	r2, [r7, #15]
    accc:	701a      	strb	r2, [r3, #0]
}
    acce:	bf00      	nop
    acd0:	3714      	adds	r7, #20
    acd2:	46bd      	mov	sp, r7
    acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    acd8:	4770      	bx	lr

0000acda <hri_port_write_PINCFG_PMUXEN_bit>:
{
    acda:	b480      	push	{r7}
    acdc:	b085      	sub	sp, #20
    acde:	af00      	add	r7, sp, #0
    ace0:	6078      	str	r0, [r7, #4]
    ace2:	4608      	mov	r0, r1
    ace4:	4611      	mov	r1, r2
    ace6:	461a      	mov	r2, r3
    ace8:	4603      	mov	r3, r0
    acea:	70fb      	strb	r3, [r7, #3]
    acec:	460b      	mov	r3, r1
    acee:	70bb      	strb	r3, [r7, #2]
    acf0:	4613      	mov	r3, r2
    acf2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    acf4:	78fa      	ldrb	r2, [r7, #3]
    acf6:	78bb      	ldrb	r3, [r7, #2]
    acf8:	6879      	ldr	r1, [r7, #4]
    acfa:	01d2      	lsls	r2, r2, #7
    acfc:	440a      	add	r2, r1
    acfe:	4413      	add	r3, r2
    ad00:	3340      	adds	r3, #64	; 0x40
    ad02:	781b      	ldrb	r3, [r3, #0]
    ad04:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ad06:	7bfb      	ldrb	r3, [r7, #15]
    ad08:	f023 0301 	bic.w	r3, r3, #1
    ad0c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ad0e:	787a      	ldrb	r2, [r7, #1]
    ad10:	7bfb      	ldrb	r3, [r7, #15]
    ad12:	4313      	orrs	r3, r2
    ad14:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ad16:	78fa      	ldrb	r2, [r7, #3]
    ad18:	78bb      	ldrb	r3, [r7, #2]
    ad1a:	6879      	ldr	r1, [r7, #4]
    ad1c:	01d2      	lsls	r2, r2, #7
    ad1e:	440a      	add	r2, r1
    ad20:	4413      	add	r3, r2
    ad22:	3340      	adds	r3, #64	; 0x40
    ad24:	7bfa      	ldrb	r2, [r7, #15]
    ad26:	701a      	strb	r2, [r3, #0]
}
    ad28:	bf00      	nop
    ad2a:	3714      	adds	r7, #20
    ad2c:	46bd      	mov	sp, r7
    ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad32:	4770      	bx	lr

0000ad34 <hri_port_write_WRCONFIG_reg>:
{
    ad34:	b480      	push	{r7}
    ad36:	b085      	sub	sp, #20
    ad38:	af00      	add	r7, sp, #0
    ad3a:	60f8      	str	r0, [r7, #12]
    ad3c:	460b      	mov	r3, r1
    ad3e:	607a      	str	r2, [r7, #4]
    ad40:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ad42:	7afb      	ldrb	r3, [r7, #11]
    ad44:	68fa      	ldr	r2, [r7, #12]
    ad46:	01db      	lsls	r3, r3, #7
    ad48:	4413      	add	r3, r2
    ad4a:	3328      	adds	r3, #40	; 0x28
    ad4c:	687a      	ldr	r2, [r7, #4]
    ad4e:	601a      	str	r2, [r3, #0]
}
    ad50:	bf00      	nop
    ad52:	3714      	adds	r7, #20
    ad54:	46bd      	mov	sp, r7
    ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad5a:	4770      	bx	lr

0000ad5c <_gpio_set_direction>:
{
    ad5c:	b580      	push	{r7, lr}
    ad5e:	b082      	sub	sp, #8
    ad60:	af00      	add	r7, sp, #0
    ad62:	4603      	mov	r3, r0
    ad64:	6039      	str	r1, [r7, #0]
    ad66:	71fb      	strb	r3, [r7, #7]
    ad68:	4613      	mov	r3, r2
    ad6a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ad6c:	79bb      	ldrb	r3, [r7, #6]
    ad6e:	2b01      	cmp	r3, #1
    ad70:	d01c      	beq.n	adac <_gpio_set_direction+0x50>
    ad72:	2b02      	cmp	r3, #2
    ad74:	d037      	beq.n	ade6 <_gpio_set_direction+0x8a>
    ad76:	2b00      	cmp	r3, #0
    ad78:	d14e      	bne.n	ae18 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ad7a:	79fb      	ldrb	r3, [r7, #7]
    ad7c:	683a      	ldr	r2, [r7, #0]
    ad7e:	4619      	mov	r1, r3
    ad80:	482a      	ldr	r0, [pc, #168]	; (ae2c <_gpio_set_direction+0xd0>)
    ad82:	4b2b      	ldr	r3, [pc, #172]	; (ae30 <_gpio_set_direction+0xd4>)
    ad84:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ad86:	683b      	ldr	r3, [r7, #0]
    ad88:	b29b      	uxth	r3, r3
    ad8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ad8e:	79fb      	ldrb	r3, [r7, #7]
    ad90:	4619      	mov	r1, r3
    ad92:	4826      	ldr	r0, [pc, #152]	; (ae2c <_gpio_set_direction+0xd0>)
    ad94:	4b27      	ldr	r3, [pc, #156]	; (ae34 <_gpio_set_direction+0xd8>)
    ad96:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ad98:	683b      	ldr	r3, [r7, #0]
    ad9a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ad9c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ada0:	79fb      	ldrb	r3, [r7, #7]
    ada2:	4619      	mov	r1, r3
    ada4:	4821      	ldr	r0, [pc, #132]	; (ae2c <_gpio_set_direction+0xd0>)
    ada6:	4b23      	ldr	r3, [pc, #140]	; (ae34 <_gpio_set_direction+0xd8>)
    ada8:	4798      	blx	r3
		break;
    adaa:	e03a      	b.n	ae22 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    adac:	79fb      	ldrb	r3, [r7, #7]
    adae:	683a      	ldr	r2, [r7, #0]
    adb0:	4619      	mov	r1, r3
    adb2:	481e      	ldr	r0, [pc, #120]	; (ae2c <_gpio_set_direction+0xd0>)
    adb4:	4b1e      	ldr	r3, [pc, #120]	; (ae30 <_gpio_set_direction+0xd4>)
    adb6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    adb8:	683b      	ldr	r3, [r7, #0]
    adba:	b29b      	uxth	r3, r3
    adbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    adc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    adc4:	79f9      	ldrb	r1, [r7, #7]
    adc6:	461a      	mov	r2, r3
    adc8:	4818      	ldr	r0, [pc, #96]	; (ae2c <_gpio_set_direction+0xd0>)
    adca:	4b1a      	ldr	r3, [pc, #104]	; (ae34 <_gpio_set_direction+0xd8>)
    adcc:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    adce:	683b      	ldr	r3, [r7, #0]
    add0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    add2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    add6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    adda:	79f9      	ldrb	r1, [r7, #7]
    addc:	461a      	mov	r2, r3
    adde:	4813      	ldr	r0, [pc, #76]	; (ae2c <_gpio_set_direction+0xd0>)
    ade0:	4b14      	ldr	r3, [pc, #80]	; (ae34 <_gpio_set_direction+0xd8>)
    ade2:	4798      	blx	r3
		break;
    ade4:	e01d      	b.n	ae22 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ade6:	79fb      	ldrb	r3, [r7, #7]
    ade8:	683a      	ldr	r2, [r7, #0]
    adea:	4619      	mov	r1, r3
    adec:	480f      	ldr	r0, [pc, #60]	; (ae2c <_gpio_set_direction+0xd0>)
    adee:	4b12      	ldr	r3, [pc, #72]	; (ae38 <_gpio_set_direction+0xdc>)
    adf0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    adf2:	683b      	ldr	r3, [r7, #0]
    adf4:	b29b      	uxth	r3, r3
    adf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    adfa:	79fb      	ldrb	r3, [r7, #7]
    adfc:	4619      	mov	r1, r3
    adfe:	480b      	ldr	r0, [pc, #44]	; (ae2c <_gpio_set_direction+0xd0>)
    ae00:	4b0c      	ldr	r3, [pc, #48]	; (ae34 <_gpio_set_direction+0xd8>)
    ae02:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ae04:	683b      	ldr	r3, [r7, #0]
    ae06:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ae08:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ae0c:	79fb      	ldrb	r3, [r7, #7]
    ae0e:	4619      	mov	r1, r3
    ae10:	4806      	ldr	r0, [pc, #24]	; (ae2c <_gpio_set_direction+0xd0>)
    ae12:	4b08      	ldr	r3, [pc, #32]	; (ae34 <_gpio_set_direction+0xd8>)
    ae14:	4798      	blx	r3
		break;
    ae16:	e004      	b.n	ae22 <_gpio_set_direction+0xc6>
		ASSERT(false);
    ae18:	2246      	movs	r2, #70	; 0x46
    ae1a:	4908      	ldr	r1, [pc, #32]	; (ae3c <_gpio_set_direction+0xe0>)
    ae1c:	2000      	movs	r0, #0
    ae1e:	4b08      	ldr	r3, [pc, #32]	; (ae40 <_gpio_set_direction+0xe4>)
    ae20:	4798      	blx	r3
}
    ae22:	bf00      	nop
    ae24:	3708      	adds	r7, #8
    ae26:	46bd      	mov	sp, r7
    ae28:	bd80      	pop	{r7, pc}
    ae2a:	bf00      	nop
    ae2c:	41008000 	.word	0x41008000
    ae30:	0000aba5 	.word	0x0000aba5
    ae34:	0000ad35 	.word	0x0000ad35
    ae38:	0000ab7d 	.word	0x0000ab7d
    ae3c:	00010b6c 	.word	0x00010b6c
    ae40:	000038e1 	.word	0x000038e1

0000ae44 <_gpio_set_level>:
{
    ae44:	b580      	push	{r7, lr}
    ae46:	b082      	sub	sp, #8
    ae48:	af00      	add	r7, sp, #0
    ae4a:	4603      	mov	r3, r0
    ae4c:	6039      	str	r1, [r7, #0]
    ae4e:	71fb      	strb	r3, [r7, #7]
    ae50:	4613      	mov	r3, r2
    ae52:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ae54:	79bb      	ldrb	r3, [r7, #6]
    ae56:	2b00      	cmp	r3, #0
    ae58:	d006      	beq.n	ae68 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ae5a:	79fb      	ldrb	r3, [r7, #7]
    ae5c:	683a      	ldr	r2, [r7, #0]
    ae5e:	4619      	mov	r1, r3
    ae60:	4806      	ldr	r0, [pc, #24]	; (ae7c <_gpio_set_level+0x38>)
    ae62:	4b07      	ldr	r3, [pc, #28]	; (ae80 <_gpio_set_level+0x3c>)
    ae64:	4798      	blx	r3
}
    ae66:	e005      	b.n	ae74 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ae68:	79fb      	ldrb	r3, [r7, #7]
    ae6a:	683a      	ldr	r2, [r7, #0]
    ae6c:	4619      	mov	r1, r3
    ae6e:	4803      	ldr	r0, [pc, #12]	; (ae7c <_gpio_set_level+0x38>)
    ae70:	4b04      	ldr	r3, [pc, #16]	; (ae84 <_gpio_set_level+0x40>)
    ae72:	4798      	blx	r3
}
    ae74:	bf00      	nop
    ae76:	3708      	adds	r7, #8
    ae78:	46bd      	mov	sp, r7
    ae7a:	bd80      	pop	{r7, pc}
    ae7c:	41008000 	.word	0x41008000
    ae80:	0000abcd 	.word	0x0000abcd
    ae84:	0000abf5 	.word	0x0000abf5

0000ae88 <_gpio_set_pin_function>:
{
    ae88:	b590      	push	{r4, r7, lr}
    ae8a:	b085      	sub	sp, #20
    ae8c:	af00      	add	r7, sp, #0
    ae8e:	6078      	str	r0, [r7, #4]
    ae90:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ae92:	687b      	ldr	r3, [r7, #4]
    ae94:	095b      	lsrs	r3, r3, #5
    ae96:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ae98:	687b      	ldr	r3, [r7, #4]
    ae9a:	b2db      	uxtb	r3, r3
    ae9c:	f003 031f 	and.w	r3, r3, #31
    aea0:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    aea2:	683b      	ldr	r3, [r7, #0]
    aea4:	f1b3 3fff 	cmp.w	r3, #4294967295
    aea8:	d106      	bne.n	aeb8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    aeaa:	7bba      	ldrb	r2, [r7, #14]
    aeac:	7bf9      	ldrb	r1, [r7, #15]
    aeae:	2300      	movs	r3, #0
    aeb0:	4812      	ldr	r0, [pc, #72]	; (aefc <_gpio_set_pin_function+0x74>)
    aeb2:	4c13      	ldr	r4, [pc, #76]	; (af00 <_gpio_set_pin_function+0x78>)
    aeb4:	47a0      	blx	r4
}
    aeb6:	e01d      	b.n	aef4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    aeb8:	7bba      	ldrb	r2, [r7, #14]
    aeba:	7bf9      	ldrb	r1, [r7, #15]
    aebc:	2301      	movs	r3, #1
    aebe:	480f      	ldr	r0, [pc, #60]	; (aefc <_gpio_set_pin_function+0x74>)
    aec0:	4c0f      	ldr	r4, [pc, #60]	; (af00 <_gpio_set_pin_function+0x78>)
    aec2:	47a0      	blx	r4
		if (pin & 1) {
    aec4:	7bbb      	ldrb	r3, [r7, #14]
    aec6:	f003 0301 	and.w	r3, r3, #1
    aeca:	2b00      	cmp	r3, #0
    aecc:	d009      	beq.n	aee2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    aece:	7bbb      	ldrb	r3, [r7, #14]
    aed0:	085b      	lsrs	r3, r3, #1
    aed2:	b2da      	uxtb	r2, r3
    aed4:	683b      	ldr	r3, [r7, #0]
    aed6:	b2db      	uxtb	r3, r3
    aed8:	7bf9      	ldrb	r1, [r7, #15]
    aeda:	4808      	ldr	r0, [pc, #32]	; (aefc <_gpio_set_pin_function+0x74>)
    aedc:	4c09      	ldr	r4, [pc, #36]	; (af04 <_gpio_set_pin_function+0x7c>)
    aede:	47a0      	blx	r4
}
    aee0:	e008      	b.n	aef4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    aee2:	7bbb      	ldrb	r3, [r7, #14]
    aee4:	085b      	lsrs	r3, r3, #1
    aee6:	b2da      	uxtb	r2, r3
    aee8:	683b      	ldr	r3, [r7, #0]
    aeea:	b2db      	uxtb	r3, r3
    aeec:	7bf9      	ldrb	r1, [r7, #15]
    aeee:	4803      	ldr	r0, [pc, #12]	; (aefc <_gpio_set_pin_function+0x74>)
    aef0:	4c05      	ldr	r4, [pc, #20]	; (af08 <_gpio_set_pin_function+0x80>)
    aef2:	47a0      	blx	r4
}
    aef4:	bf00      	nop
    aef6:	3714      	adds	r7, #20
    aef8:	46bd      	mov	sp, r7
    aefa:	bd90      	pop	{r4, r7, pc}
    aefc:	41008000 	.word	0x41008000
    af00:	0000acdb 	.word	0x0000acdb
    af04:	0000ac7d 	.word	0x0000ac7d
    af08:	0000ac1d 	.word	0x0000ac1d

0000af0c <gpio_set_pin_function>:
{
    af0c:	b580      	push	{r7, lr}
    af0e:	b082      	sub	sp, #8
    af10:	af00      	add	r7, sp, #0
    af12:	6078      	str	r0, [r7, #4]
    af14:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    af16:	6839      	ldr	r1, [r7, #0]
    af18:	6878      	ldr	r0, [r7, #4]
    af1a:	4b03      	ldr	r3, [pc, #12]	; (af28 <gpio_set_pin_function+0x1c>)
    af1c:	4798      	blx	r3
}
    af1e:	bf00      	nop
    af20:	3708      	adds	r7, #8
    af22:	46bd      	mov	sp, r7
    af24:	bd80      	pop	{r7, pc}
    af26:	bf00      	nop
    af28:	0000ae89 	.word	0x0000ae89

0000af2c <gpio_set_pin_direction>:
{
    af2c:	b580      	push	{r7, lr}
    af2e:	b082      	sub	sp, #8
    af30:	af00      	add	r7, sp, #0
    af32:	4603      	mov	r3, r0
    af34:	460a      	mov	r2, r1
    af36:	71fb      	strb	r3, [r7, #7]
    af38:	4613      	mov	r3, r2
    af3a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    af3c:	79fb      	ldrb	r3, [r7, #7]
    af3e:	095b      	lsrs	r3, r3, #5
    af40:	b2d8      	uxtb	r0, r3
    af42:	79fb      	ldrb	r3, [r7, #7]
    af44:	f003 031f 	and.w	r3, r3, #31
    af48:	2201      	movs	r2, #1
    af4a:	fa02 f303 	lsl.w	r3, r2, r3
    af4e:	79ba      	ldrb	r2, [r7, #6]
    af50:	4619      	mov	r1, r3
    af52:	4b03      	ldr	r3, [pc, #12]	; (af60 <gpio_set_pin_direction+0x34>)
    af54:	4798      	blx	r3
}
    af56:	bf00      	nop
    af58:	3708      	adds	r7, #8
    af5a:	46bd      	mov	sp, r7
    af5c:	bd80      	pop	{r7, pc}
    af5e:	bf00      	nop
    af60:	0000ad5d 	.word	0x0000ad5d

0000af64 <gpio_set_pin_level>:
{
    af64:	b580      	push	{r7, lr}
    af66:	b082      	sub	sp, #8
    af68:	af00      	add	r7, sp, #0
    af6a:	4603      	mov	r3, r0
    af6c:	460a      	mov	r2, r1
    af6e:	71fb      	strb	r3, [r7, #7]
    af70:	4613      	mov	r3, r2
    af72:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    af74:	79fb      	ldrb	r3, [r7, #7]
    af76:	095b      	lsrs	r3, r3, #5
    af78:	b2d8      	uxtb	r0, r3
    af7a:	79fb      	ldrb	r3, [r7, #7]
    af7c:	f003 031f 	and.w	r3, r3, #31
    af80:	2201      	movs	r2, #1
    af82:	fa02 f303 	lsl.w	r3, r2, r3
    af86:	79ba      	ldrb	r2, [r7, #6]
    af88:	4619      	mov	r1, r3
    af8a:	4b03      	ldr	r3, [pc, #12]	; (af98 <gpio_set_pin_level+0x34>)
    af8c:	4798      	blx	r3
}
    af8e:	bf00      	nop
    af90:	3708      	adds	r7, #8
    af92:	46bd      	mov	sp, r7
    af94:	bd80      	pop	{r7, pc}
    af96:	bf00      	nop
    af98:	0000ae45 	.word	0x0000ae45

0000af9c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    af9c:	b580      	push	{r7, lr}
    af9e:	b082      	sub	sp, #8
    afa0:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    afa2:	2100      	movs	r1, #0
    afa4:	2008      	movs	r0, #8
    afa6:	4b24      	ldr	r3, [pc, #144]	; (b038 <QSPI_N25Q256_exit_xip+0x9c>)
    afa8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    afaa:	2100      	movs	r1, #0
    afac:	202b      	movs	r0, #43	; 0x2b
    afae:	4b22      	ldr	r3, [pc, #136]	; (b038 <QSPI_N25Q256_exit_xip+0x9c>)
    afb0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    afb2:	2100      	movs	r1, #0
    afb4:	202a      	movs	r0, #42	; 0x2a
    afb6:	4b20      	ldr	r3, [pc, #128]	; (b038 <QSPI_N25Q256_exit_xip+0x9c>)
    afb8:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    afba:	2102      	movs	r1, #2
    afbc:	2008      	movs	r0, #8
    afbe:	4b1f      	ldr	r3, [pc, #124]	; (b03c <QSPI_N25Q256_exit_xip+0xa0>)
    afc0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    afc2:	2102      	movs	r1, #2
    afc4:	202b      	movs	r0, #43	; 0x2b
    afc6:	4b1d      	ldr	r3, [pc, #116]	; (b03c <QSPI_N25Q256_exit_xip+0xa0>)
    afc8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    afca:	2102      	movs	r1, #2
    afcc:	202a      	movs	r0, #42	; 0x2a
    afce:	4b1b      	ldr	r3, [pc, #108]	; (b03c <QSPI_N25Q256_exit_xip+0xa0>)
    afd0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    afd2:	2101      	movs	r1, #1
    afd4:	2008      	movs	r0, #8
    afd6:	4b1a      	ldr	r3, [pc, #104]	; (b040 <QSPI_N25Q256_exit_xip+0xa4>)
    afd8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    afda:	2100      	movs	r1, #0
    afdc:	202b      	movs	r0, #43	; 0x2b
    afde:	4b18      	ldr	r3, [pc, #96]	; (b040 <QSPI_N25Q256_exit_xip+0xa4>)
    afe0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    afe2:	2100      	movs	r1, #0
    afe4:	202a      	movs	r0, #42	; 0x2a
    afe6:	4b16      	ldr	r3, [pc, #88]	; (b040 <QSPI_N25Q256_exit_xip+0xa4>)
    afe8:	4798      	blx	r3

	delay_us(1);
    afea:	2001      	movs	r0, #1
    afec:	4b15      	ldr	r3, [pc, #84]	; (b044 <QSPI_N25Q256_exit_xip+0xa8>)
    afee:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    aff0:	2300      	movs	r3, #0
    aff2:	607b      	str	r3, [r7, #4]
    aff4:	e010      	b.n	b018 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    aff6:	2101      	movs	r1, #1
    aff8:	202a      	movs	r0, #42	; 0x2a
    affa:	4b11      	ldr	r3, [pc, #68]	; (b040 <QSPI_N25Q256_exit_xip+0xa4>)
    affc:	4798      	blx	r3
		delay_us(1);
    affe:	2001      	movs	r0, #1
    b000:	4b10      	ldr	r3, [pc, #64]	; (b044 <QSPI_N25Q256_exit_xip+0xa8>)
    b002:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b004:	2100      	movs	r1, #0
    b006:	202a      	movs	r0, #42	; 0x2a
    b008:	4b0d      	ldr	r3, [pc, #52]	; (b040 <QSPI_N25Q256_exit_xip+0xa4>)
    b00a:	4798      	blx	r3
		delay_us(1);
    b00c:	2001      	movs	r0, #1
    b00e:	4b0d      	ldr	r3, [pc, #52]	; (b044 <QSPI_N25Q256_exit_xip+0xa8>)
    b010:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b012:	687b      	ldr	r3, [r7, #4]
    b014:	3301      	adds	r3, #1
    b016:	607b      	str	r3, [r7, #4]
    b018:	687b      	ldr	r3, [r7, #4]
    b01a:	2b06      	cmp	r3, #6
    b01c:	ddeb      	ble.n	aff6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b01e:	2101      	movs	r1, #1
    b020:	202b      	movs	r0, #43	; 0x2b
    b022:	4b07      	ldr	r3, [pc, #28]	; (b040 <QSPI_N25Q256_exit_xip+0xa4>)
    b024:	4798      	blx	r3
	delay_us(1);
    b026:	2001      	movs	r0, #1
    b028:	4b06      	ldr	r3, [pc, #24]	; (b044 <QSPI_N25Q256_exit_xip+0xa8>)
    b02a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b02c:	4b06      	ldr	r3, [pc, #24]	; (b048 <QSPI_N25Q256_exit_xip+0xac>)
    b02e:	4798      	blx	r3
}
    b030:	bf00      	nop
    b032:	3708      	adds	r7, #8
    b034:	46bd      	mov	sp, r7
    b036:	bd80      	pop	{r7, pc}
    b038:	0000af0d 	.word	0x0000af0d
    b03c:	0000af2d 	.word	0x0000af2d
    b040:	0000af65 	.word	0x0000af65
    b044:	0000b115 	.word	0x0000b115
    b048:	00001445 	.word	0x00001445

0000b04c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b04c:	b598      	push	{r3, r4, r7, lr}
    b04e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b050:	4806      	ldr	r0, [pc, #24]	; (b06c <spi_nor_flash_init+0x20>)
    b052:	4b07      	ldr	r3, [pc, #28]	; (b070 <spi_nor_flash_init+0x24>)
    b054:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b056:	2300      	movs	r3, #0
    b058:	4a06      	ldr	r2, [pc, #24]	; (b074 <spi_nor_flash_init+0x28>)
    b05a:	4904      	ldr	r1, [pc, #16]	; (b06c <spi_nor_flash_init+0x20>)
    b05c:	4806      	ldr	r0, [pc, #24]	; (b078 <spi_nor_flash_init+0x2c>)
    b05e:	4c07      	ldr	r4, [pc, #28]	; (b07c <spi_nor_flash_init+0x30>)
    b060:	47a0      	blx	r4
    b062:	4602      	mov	r2, r0
    b064:	4b06      	ldr	r3, [pc, #24]	; (b080 <spi_nor_flash_init+0x34>)
    b066:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b068:	bf00      	nop
    b06a:	bd98      	pop	{r3, r4, r7, pc}
    b06c:	2000a970 	.word	0x2000a970
    b070:	00002789 	.word	0x00002789
    b074:	0000af9d 	.word	0x0000af9d
    b078:	20000fd4 	.word	0x20000fd4
    b07c:	0000b87d 	.word	0x0000b87d
    b080:	2000ab70 	.word	0x2000ab70

0000b084 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b084:	b580      	push	{r7, lr}
    b086:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b088:	4805      	ldr	r0, [pc, #20]	; (b0a0 <cdc_device_acm_init+0x1c>)
    b08a:	4b06      	ldr	r3, [pc, #24]	; (b0a4 <cdc_device_acm_init+0x20>)
    b08c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b08e:	4b06      	ldr	r3, [pc, #24]	; (b0a8 <cdc_device_acm_init+0x24>)
    b090:	4798      	blx	r3

	usbdc_start(single_desc);
    b092:	4806      	ldr	r0, [pc, #24]	; (b0ac <cdc_device_acm_init+0x28>)
    b094:	4b06      	ldr	r3, [pc, #24]	; (b0b0 <cdc_device_acm_init+0x2c>)
    b096:	4798      	blx	r3
	usbdc_attach();
    b098:	4b06      	ldr	r3, [pc, #24]	; (b0b4 <cdc_device_acm_init+0x30>)
    b09a:	4798      	blx	r3
}
    b09c:	bf00      	nop
    b09e:	bd80      	pop	{r7, pc}
    b0a0:	20001024 	.word	0x20001024
    b0a4:	0000cfa5 	.word	0x0000cfa5
    b0a8:	0000c21d 	.word	0x0000c21d
    b0ac:	20000200 	.word	0x20000200
    b0b0:	0000d041 	.word	0x0000d041
    b0b4:	0000d091 	.word	0x0000d091

0000b0b8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b0b8:	b580      	push	{r7, lr}
    b0ba:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b0bc:	4b01      	ldr	r3, [pc, #4]	; (b0c4 <usb_init+0xc>)
    b0be:	4798      	blx	r3
}
    b0c0:	bf00      	nop
    b0c2:	bd80      	pop	{r7, pc}
    b0c4:	0000b085 	.word	0x0000b085

0000b0c8 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b0c8:	b480      	push	{r7}
    b0ca:	b085      	sub	sp, #20
    b0cc:	af00      	add	r7, sp, #0
    b0ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b0d0:	f3ef 8310 	mrs	r3, PRIMASK
    b0d4:	60fb      	str	r3, [r7, #12]
  return(result);
    b0d6:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b0dc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b0de:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b0e2:	bf00      	nop
    b0e4:	3714      	adds	r7, #20
    b0e6:	46bd      	mov	sp, r7
    b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ec:	4770      	bx	lr

0000b0ee <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b0ee:	b480      	push	{r7}
    b0f0:	b085      	sub	sp, #20
    b0f2:	af00      	add	r7, sp, #0
    b0f4:	6078      	str	r0, [r7, #4]
    b0f6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	681b      	ldr	r3, [r3, #0]
    b0fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b100:	68fb      	ldr	r3, [r7, #12]
    b102:	f383 8810 	msr	PRIMASK, r3
}
    b106:	bf00      	nop
    b108:	3714      	adds	r7, #20
    b10a:	46bd      	mov	sp, r7
    b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b110:	4770      	bx	lr
	...

0000b114 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    b114:	b590      	push	{r4, r7, lr}
    b116:	b083      	sub	sp, #12
    b118:	af00      	add	r7, sp, #0
    b11a:	4603      	mov	r3, r0
    b11c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    b11e:	4b07      	ldr	r3, [pc, #28]	; (b13c <delay_us+0x28>)
    b120:	681c      	ldr	r4, [r3, #0]
    b122:	88fb      	ldrh	r3, [r7, #6]
    b124:	4618      	mov	r0, r3
    b126:	4b06      	ldr	r3, [pc, #24]	; (b140 <delay_us+0x2c>)
    b128:	4798      	blx	r3
    b12a:	4603      	mov	r3, r0
    b12c:	4619      	mov	r1, r3
    b12e:	4620      	mov	r0, r4
    b130:	4b04      	ldr	r3, [pc, #16]	; (b144 <delay_us+0x30>)
    b132:	4798      	blx	r3
}
    b134:	bf00      	nop
    b136:	370c      	adds	r7, #12
    b138:	46bd      	mov	sp, r7
    b13a:	bd90      	pop	{r4, r7, pc}
    b13c:	20001064 	.word	0x20001064
    b140:	0000b321 	.word	0x0000b321
    b144:	0000b4b9 	.word	0x0000b4b9

0000b148 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    b148:	b590      	push	{r4, r7, lr}
    b14a:	b083      	sub	sp, #12
    b14c:	af00      	add	r7, sp, #0
    b14e:	4603      	mov	r3, r0
    b150:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    b152:	4b07      	ldr	r3, [pc, #28]	; (b170 <delay_ms+0x28>)
    b154:	681c      	ldr	r4, [r3, #0]
    b156:	88fb      	ldrh	r3, [r7, #6]
    b158:	4618      	mov	r0, r3
    b15a:	4b06      	ldr	r3, [pc, #24]	; (b174 <delay_ms+0x2c>)
    b15c:	4798      	blx	r3
    b15e:	4603      	mov	r3, r0
    b160:	4619      	mov	r1, r3
    b162:	4620      	mov	r0, r4
    b164:	4b04      	ldr	r3, [pc, #16]	; (b178 <delay_ms+0x30>)
    b166:	4798      	blx	r3
}
    b168:	bf00      	nop
    b16a:	370c      	adds	r7, #12
    b16c:	46bd      	mov	sp, r7
    b16e:	bd90      	pop	{r4, r7, pc}
    b170:	20001064 	.word	0x20001064
    b174:	0000b48d 	.word	0x0000b48d
    b178:	0000b4b9 	.word	0x0000b4b9

0000b17c <__NVIC_SetPendingIRQ>:
{
    b17c:	b480      	push	{r7}
    b17e:	b083      	sub	sp, #12
    b180:	af00      	add	r7, sp, #0
    b182:	4603      	mov	r3, r0
    b184:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b18a:	2b00      	cmp	r3, #0
    b18c:	db0c      	blt.n	b1a8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b18e:	4909      	ldr	r1, [pc, #36]	; (b1b4 <__NVIC_SetPendingIRQ+0x38>)
    b190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b194:	095b      	lsrs	r3, r3, #5
    b196:	88fa      	ldrh	r2, [r7, #6]
    b198:	f002 021f 	and.w	r2, r2, #31
    b19c:	2001      	movs	r0, #1
    b19e:	fa00 f202 	lsl.w	r2, r0, r2
    b1a2:	3340      	adds	r3, #64	; 0x40
    b1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1a8:	bf00      	nop
    b1aa:	370c      	adds	r7, #12
    b1ac:	46bd      	mov	sp, r7
    b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1b2:	4770      	bx	lr
    b1b4:	e000e100 	.word	0xe000e100

0000b1b8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    b1b8:	b580      	push	{r7, lr}
    b1ba:	b082      	sub	sp, #8
    b1bc:	af00      	add	r7, sp, #0
    b1be:	4603      	mov	r3, r0
    b1c0:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    b1c2:	79fb      	ldrb	r3, [r7, #7]
    b1c4:	b21b      	sxth	r3, r3
    b1c6:	4618      	mov	r0, r3
    b1c8:	4b02      	ldr	r3, [pc, #8]	; (b1d4 <_irq_set+0x1c>)
    b1ca:	4798      	blx	r3
}
    b1cc:	bf00      	nop
    b1ce:	3708      	adds	r7, #8
    b1d0:	46bd      	mov	sp, r7
    b1d2:	bd80      	pop	{r7, pc}
    b1d4:	0000b17d 	.word	0x0000b17d

0000b1d8 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    b1d8:	b480      	push	{r7}
    b1da:	b083      	sub	sp, #12
    b1dc:	af00      	add	r7, sp, #0
    b1de:	4603      	mov	r3, r0
    b1e0:	6039      	str	r1, [r7, #0]
    b1e2:	80fb      	strh	r3, [r7, #6]
    b1e4:	4613      	mov	r3, r2
    b1e6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    b1e8:	797b      	ldrb	r3, [r7, #5]
    b1ea:	3b04      	subs	r3, #4
    b1ec:	2b05      	cmp	r3, #5
    b1ee:	d86b      	bhi.n	b2c8 <_get_cycles_for_us_internal+0xf0>
    b1f0:	a201      	add	r2, pc, #4	; (adr r2, b1f8 <_get_cycles_for_us_internal+0x20>)
    b1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b1f6:	bf00      	nop
    b1f8:	0000b2a7 	.word	0x0000b2a7
    b1fc:	0000b287 	.word	0x0000b287
    b200:	0000b269 	.word	0x0000b269
    b204:	0000b24b 	.word	0x0000b24b
    b208:	0000b22d 	.word	0x0000b22d
    b20c:	0000b211 	.word	0x0000b211
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    b210:	88fb      	ldrh	r3, [r7, #6]
    b212:	683a      	ldr	r2, [r7, #0]
    b214:	4935      	ldr	r1, [pc, #212]	; (b2ec <_get_cycles_for_us_internal+0x114>)
    b216:	fba1 1202 	umull	r1, r2, r1, r2
    b21a:	0c92      	lsrs	r2, r2, #18
    b21c:	fb02 f303 	mul.w	r3, r2, r3
    b220:	3302      	adds	r3, #2
    b222:	4a33      	ldr	r2, [pc, #204]	; (b2f0 <_get_cycles_for_us_internal+0x118>)
    b224:	fba2 2303 	umull	r2, r3, r2, r3
    b228:	085b      	lsrs	r3, r3, #1
    b22a:	e059      	b.n	b2e0 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    b22c:	88fb      	ldrh	r3, [r7, #6]
    b22e:	683a      	ldr	r2, [r7, #0]
    b230:	0952      	lsrs	r2, r2, #5
    b232:	4930      	ldr	r1, [pc, #192]	; (b2f4 <_get_cycles_for_us_internal+0x11c>)
    b234:	fba1 1202 	umull	r1, r2, r1, r2
    b238:	09d2      	lsrs	r2, r2, #7
    b23a:	fb02 f303 	mul.w	r3, r2, r3
    b23e:	331d      	adds	r3, #29
    b240:	4a2d      	ldr	r2, [pc, #180]	; (b2f8 <_get_cycles_for_us_internal+0x120>)
    b242:	fba2 2303 	umull	r2, r3, r2, r3
    b246:	091b      	lsrs	r3, r3, #4
    b248:	e04a      	b.n	b2e0 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    b24a:	88fb      	ldrh	r3, [r7, #6]
    b24c:	683a      	ldr	r2, [r7, #0]
    b24e:	492b      	ldr	r1, [pc, #172]	; (b2fc <_get_cycles_for_us_internal+0x124>)
    b250:	fba1 1202 	umull	r1, r2, r1, r2
    b254:	0b52      	lsrs	r2, r2, #13
    b256:	fb02 f303 	mul.w	r3, r2, r3
    b25a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    b25e:	4a28      	ldr	r2, [pc, #160]	; (b300 <_get_cycles_for_us_internal+0x128>)
    b260:	fba2 2303 	umull	r2, r3, r2, r3
    b264:	095b      	lsrs	r3, r3, #5
    b266:	e03b      	b.n	b2e0 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    b268:	88fb      	ldrh	r3, [r7, #6]
    b26a:	683a      	ldr	r2, [r7, #0]
    b26c:	4925      	ldr	r1, [pc, #148]	; (b304 <_get_cycles_for_us_internal+0x12c>)
    b26e:	fba1 1202 	umull	r1, r2, r1, r2
    b272:	0992      	lsrs	r2, r2, #6
    b274:	fb02 f303 	mul.w	r3, r2, r3
    b278:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    b27c:	4a22      	ldr	r2, [pc, #136]	; (b308 <_get_cycles_for_us_internal+0x130>)
    b27e:	fba2 2303 	umull	r2, r3, r2, r3
    b282:	099b      	lsrs	r3, r3, #6
    b284:	e02c      	b.n	b2e0 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    b286:	88fb      	ldrh	r3, [r7, #6]
    b288:	683a      	ldr	r2, [r7, #0]
    b28a:	4920      	ldr	r1, [pc, #128]	; (b30c <_get_cycles_for_us_internal+0x134>)
    b28c:	fba1 1202 	umull	r1, r2, r1, r2
    b290:	0952      	lsrs	r2, r2, #5
    b292:	fb02 f303 	mul.w	r3, r2, r3
    b296:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    b29a:	332f      	adds	r3, #47	; 0x2f
    b29c:	4a1c      	ldr	r2, [pc, #112]	; (b310 <_get_cycles_for_us_internal+0x138>)
    b29e:	fba2 2303 	umull	r2, r3, r2, r3
    b2a2:	0b5b      	lsrs	r3, r3, #13
    b2a4:	e01c      	b.n	b2e0 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    b2a6:	88fb      	ldrh	r3, [r7, #6]
    b2a8:	683a      	ldr	r2, [r7, #0]
    b2aa:	491a      	ldr	r1, [pc, #104]	; (b314 <_get_cycles_for_us_internal+0x13c>)
    b2ac:	fba1 1202 	umull	r1, r2, r1, r2
    b2b0:	08d2      	lsrs	r2, r2, #3
    b2b2:	fb02 f303 	mul.w	r3, r2, r3
    b2b6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    b2ba:	f203 33df 	addw	r3, r3, #991	; 0x3df
    b2be:	4a16      	ldr	r2, [pc, #88]	; (b318 <_get_cycles_for_us_internal+0x140>)
    b2c0:	fba2 2303 	umull	r2, r3, r2, r3
    b2c4:	0c5b      	lsrs	r3, r3, #17
    b2c6:	e00b      	b.n	b2e0 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    b2c8:	88fb      	ldrh	r3, [r7, #6]
    b2ca:	683a      	ldr	r2, [r7, #0]
    b2cc:	fb02 f303 	mul.w	r3, r2, r3
    b2d0:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    b2d4:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    b2d8:	4a10      	ldr	r2, [pc, #64]	; (b31c <_get_cycles_for_us_internal+0x144>)
    b2da:	fba2 2303 	umull	r2, r3, r2, r3
    b2de:	0c9b      	lsrs	r3, r3, #18
	}
}
    b2e0:	4618      	mov	r0, r3
    b2e2:	370c      	adds	r7, #12
    b2e4:	46bd      	mov	sp, r7
    b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2ea:	4770      	bx	lr
    b2ec:	431bde83 	.word	0x431bde83
    b2f0:	aaaaaaab 	.word	0xaaaaaaab
    b2f4:	0a7c5ac5 	.word	0x0a7c5ac5
    b2f8:	88888889 	.word	0x88888889
    b2fc:	d1b71759 	.word	0xd1b71759
    b300:	1b4e81b5 	.word	0x1b4e81b5
    b304:	10624dd3 	.word	0x10624dd3
    b308:	057619f1 	.word	0x057619f1
    b30c:	51eb851f 	.word	0x51eb851f
    b310:	45e7b273 	.word	0x45e7b273
    b314:	cccccccd 	.word	0xcccccccd
    b318:	6fd91d85 	.word	0x6fd91d85
    b31c:	165e9f81 	.word	0x165e9f81

0000b320 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    b320:	b580      	push	{r7, lr}
    b322:	b082      	sub	sp, #8
    b324:	af00      	add	r7, sp, #0
    b326:	4603      	mov	r3, r0
    b328:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    b32a:	88fb      	ldrh	r3, [r7, #6]
    b32c:	2209      	movs	r2, #9
    b32e:	4904      	ldr	r1, [pc, #16]	; (b340 <_get_cycles_for_us+0x20>)
    b330:	4618      	mov	r0, r3
    b332:	4b04      	ldr	r3, [pc, #16]	; (b344 <_get_cycles_for_us+0x24>)
    b334:	4798      	blx	r3
    b336:	4603      	mov	r3, r0
}
    b338:	4618      	mov	r0, r3
    b33a:	3708      	adds	r7, #8
    b33c:	46bd      	mov	sp, r7
    b33e:	bd80      	pop	{r7, pc}
    b340:	07270e00 	.word	0x07270e00
    b344:	0000b1d9 	.word	0x0000b1d9

0000b348 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    b348:	b480      	push	{r7}
    b34a:	b083      	sub	sp, #12
    b34c:	af00      	add	r7, sp, #0
    b34e:	4603      	mov	r3, r0
    b350:	6039      	str	r1, [r7, #0]
    b352:	80fb      	strh	r3, [r7, #6]
    b354:	4613      	mov	r3, r2
    b356:	717b      	strb	r3, [r7, #5]
	switch (power) {
    b358:	797b      	ldrb	r3, [r7, #5]
    b35a:	3b04      	subs	r3, #4
    b35c:	2b05      	cmp	r3, #5
    b35e:	d870      	bhi.n	b442 <_get_cycles_for_ms_internal+0xfa>
    b360:	a201      	add	r2, pc, #4	; (adr r2, b368 <_get_cycles_for_ms_internal+0x20>)
    b362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b366:	bf00      	nop
    b368:	0000b425 	.word	0x0000b425
    b36c:	0000b409 	.word	0x0000b409
    b370:	0000b3ed 	.word	0x0000b3ed
    b374:	0000b3c9 	.word	0x0000b3c9
    b378:	0000b3a5 	.word	0x0000b3a5
    b37c:	0000b381 	.word	0x0000b381
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    b380:	88fb      	ldrh	r3, [r7, #6]
    b382:	683a      	ldr	r2, [r7, #0]
    b384:	4937      	ldr	r1, [pc, #220]	; (b464 <_get_cycles_for_ms_internal+0x11c>)
    b386:	fba1 1202 	umull	r1, r2, r1, r2
    b38a:	0c92      	lsrs	r2, r2, #18
    b38c:	fb02 f303 	mul.w	r3, r2, r3
    b390:	3302      	adds	r3, #2
    b392:	4a35      	ldr	r2, [pc, #212]	; (b468 <_get_cycles_for_ms_internal+0x120>)
    b394:	fba2 2303 	umull	r2, r3, r2, r3
    b398:	085b      	lsrs	r3, r3, #1
    b39a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b39e:	fb02 f303 	mul.w	r3, r2, r3
    b3a2:	e058      	b.n	b456 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    b3a4:	88fb      	ldrh	r3, [r7, #6]
    b3a6:	683a      	ldr	r2, [r7, #0]
    b3a8:	0952      	lsrs	r2, r2, #5
    b3aa:	4930      	ldr	r1, [pc, #192]	; (b46c <_get_cycles_for_ms_internal+0x124>)
    b3ac:	fba1 1202 	umull	r1, r2, r1, r2
    b3b0:	09d2      	lsrs	r2, r2, #7
    b3b2:	fb02 f303 	mul.w	r3, r2, r3
    b3b6:	3302      	adds	r3, #2
    b3b8:	4a2b      	ldr	r2, [pc, #172]	; (b468 <_get_cycles_for_ms_internal+0x120>)
    b3ba:	fba2 2303 	umull	r2, r3, r2, r3
    b3be:	085b      	lsrs	r3, r3, #1
    b3c0:	2264      	movs	r2, #100	; 0x64
    b3c2:	fb02 f303 	mul.w	r3, r2, r3
    b3c6:	e046      	b.n	b456 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    b3c8:	88fb      	ldrh	r3, [r7, #6]
    b3ca:	683a      	ldr	r2, [r7, #0]
    b3cc:	4928      	ldr	r1, [pc, #160]	; (b470 <_get_cycles_for_ms_internal+0x128>)
    b3ce:	fba1 1202 	umull	r1, r2, r1, r2
    b3d2:	0b52      	lsrs	r2, r2, #13
    b3d4:	fb02 f303 	mul.w	r3, r2, r3
    b3d8:	3302      	adds	r3, #2
    b3da:	4a23      	ldr	r2, [pc, #140]	; (b468 <_get_cycles_for_ms_internal+0x120>)
    b3dc:	fba2 2303 	umull	r2, r3, r2, r3
    b3e0:	085a      	lsrs	r2, r3, #1
    b3e2:	4613      	mov	r3, r2
    b3e4:	009b      	lsls	r3, r3, #2
    b3e6:	4413      	add	r3, r2
    b3e8:	005b      	lsls	r3, r3, #1
    b3ea:	e034      	b.n	b456 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    b3ec:	88fb      	ldrh	r3, [r7, #6]
    b3ee:	683a      	ldr	r2, [r7, #0]
    b3f0:	4920      	ldr	r1, [pc, #128]	; (b474 <_get_cycles_for_ms_internal+0x12c>)
    b3f2:	fba1 1202 	umull	r1, r2, r1, r2
    b3f6:	0992      	lsrs	r2, r2, #6
    b3f8:	fb02 f303 	mul.w	r3, r2, r3
    b3fc:	3302      	adds	r3, #2
    b3fe:	4a1a      	ldr	r2, [pc, #104]	; (b468 <_get_cycles_for_ms_internal+0x120>)
    b400:	fba2 2303 	umull	r2, r3, r2, r3
    b404:	085b      	lsrs	r3, r3, #1
    b406:	e026      	b.n	b456 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    b408:	88fb      	ldrh	r3, [r7, #6]
    b40a:	683a      	ldr	r2, [r7, #0]
    b40c:	491a      	ldr	r1, [pc, #104]	; (b478 <_get_cycles_for_ms_internal+0x130>)
    b40e:	fba1 1202 	umull	r1, r2, r1, r2
    b412:	0952      	lsrs	r2, r2, #5
    b414:	fb02 f303 	mul.w	r3, r2, r3
    b418:	331d      	adds	r3, #29
    b41a:	4a18      	ldr	r2, [pc, #96]	; (b47c <_get_cycles_for_ms_internal+0x134>)
    b41c:	fba2 2303 	umull	r2, r3, r2, r3
    b420:	091b      	lsrs	r3, r3, #4
    b422:	e018      	b.n	b456 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    b424:	88fb      	ldrh	r3, [r7, #6]
    b426:	683a      	ldr	r2, [r7, #0]
    b428:	4915      	ldr	r1, [pc, #84]	; (b480 <_get_cycles_for_ms_internal+0x138>)
    b42a:	fba1 1202 	umull	r1, r2, r1, r2
    b42e:	08d2      	lsrs	r2, r2, #3
    b430:	fb02 f303 	mul.w	r3, r2, r3
    b434:	f203 132b 	addw	r3, r3, #299	; 0x12b
    b438:	4a12      	ldr	r2, [pc, #72]	; (b484 <_get_cycles_for_ms_internal+0x13c>)
    b43a:	fba2 2303 	umull	r2, r3, r2, r3
    b43e:	095b      	lsrs	r3, r3, #5
    b440:	e009      	b.n	b456 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    b442:	88fb      	ldrh	r3, [r7, #6]
    b444:	683a      	ldr	r2, [r7, #0]
    b446:	fb02 f303 	mul.w	r3, r2, r3
    b44a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    b44e:	4a0e      	ldr	r2, [pc, #56]	; (b488 <_get_cycles_for_ms_internal+0x140>)
    b450:	fba2 2303 	umull	r2, r3, r2, r3
    b454:	099b      	lsrs	r3, r3, #6
	}
}
    b456:	4618      	mov	r0, r3
    b458:	370c      	adds	r7, #12
    b45a:	46bd      	mov	sp, r7
    b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b460:	4770      	bx	lr
    b462:	bf00      	nop
    b464:	431bde83 	.word	0x431bde83
    b468:	aaaaaaab 	.word	0xaaaaaaab
    b46c:	0a7c5ac5 	.word	0x0a7c5ac5
    b470:	d1b71759 	.word	0xd1b71759
    b474:	10624dd3 	.word	0x10624dd3
    b478:	51eb851f 	.word	0x51eb851f
    b47c:	88888889 	.word	0x88888889
    b480:	cccccccd 	.word	0xcccccccd
    b484:	1b4e81b5 	.word	0x1b4e81b5
    b488:	057619f1 	.word	0x057619f1

0000b48c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    b48c:	b580      	push	{r7, lr}
    b48e:	b082      	sub	sp, #8
    b490:	af00      	add	r7, sp, #0
    b492:	4603      	mov	r3, r0
    b494:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    b496:	88fb      	ldrh	r3, [r7, #6]
    b498:	2209      	movs	r2, #9
    b49a:	4904      	ldr	r1, [pc, #16]	; (b4ac <_get_cycles_for_ms+0x20>)
    b49c:	4618      	mov	r0, r3
    b49e:	4b04      	ldr	r3, [pc, #16]	; (b4b0 <_get_cycles_for_ms+0x24>)
    b4a0:	4798      	blx	r3
    b4a2:	4603      	mov	r3, r0
}
    b4a4:	4618      	mov	r0, r3
    b4a6:	3708      	adds	r7, #8
    b4a8:	46bd      	mov	sp, r7
    b4aa:	bd80      	pop	{r7, pc}
    b4ac:	07270e00 	.word	0x07270e00
    b4b0:	0000b349 	.word	0x0000b349
    b4b4:	00000000 	.word	0x00000000

0000b4b8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    b4b8:	b480      	push	{r7}
    b4ba:	b083      	sub	sp, #12
    b4bc:	af00      	add	r7, sp, #0
    b4be:	6078      	str	r0, [r7, #4]
    b4c0:	6039      	str	r1, [r7, #0]
    b4c2:	bf00      	nop
    b4c4:	f3af 8000 	nop.w

0000b4c8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    b4c8:	3901      	subs	r1, #1
    b4ca:	d8fd      	bhi.n	b4c8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    b4cc:	bf00      	nop
    b4ce:	370c      	adds	r7, #12
    b4d0:	46bd      	mov	sp, r7
    b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4d6:	4770      	bx	lr

0000b4d8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b4d8:	b580      	push	{r7, lr}
    b4da:	b08c      	sub	sp, #48	; 0x30
    b4dc:	af00      	add	r7, sp, #0
    b4de:	6078      	str	r0, [r7, #4]
    b4e0:	460b      	mov	r3, r1
    b4e2:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b4e4:	687b      	ldr	r3, [r7, #4]
    b4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b4e8:	687b      	ldr	r3, [r7, #4]
    b4ea:	681b      	ldr	r3, [r3, #0]
    b4ec:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b4ee:	f107 030c 	add.w	r3, r7, #12
    b4f2:	2200      	movs	r2, #0
    b4f4:	601a      	str	r2, [r3, #0]
    b4f6:	605a      	str	r2, [r3, #4]
    b4f8:	609a      	str	r2, [r3, #8]
    b4fa:	60da      	str	r2, [r3, #12]
    b4fc:	611a      	str	r2, [r3, #16]
    b4fe:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b502:	7b1b      	ldrb	r3, [r3, #12]
    b504:	2b00      	cmp	r3, #0
    b506:	d001      	beq.n	b50c <n25q256a_xip_confirm+0x34>
    b508:	2206      	movs	r2, #6
    b50a:	e000      	b.n	b50e <n25q256a_xip_confirm+0x36>
    b50c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b50e:	7b3b      	ldrb	r3, [r7, #12]
    b510:	f362 0302 	bfi	r3, r2, #0, #3
    b514:	733b      	strb	r3, [r7, #12]
    b516:	7b3b      	ldrb	r3, [r7, #12]
    b518:	f043 0310 	orr.w	r3, r3, #16
    b51c:	733b      	strb	r3, [r7, #12]
    b51e:	7b3b      	ldrb	r3, [r7, #12]
    b520:	f043 0320 	orr.w	r3, r3, #32
    b524:	733b      	strb	r3, [r7, #12]
    b526:	7b3b      	ldrb	r3, [r7, #12]
    b528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b52c:	733b      	strb	r3, [r7, #12]
    b52e:	7b3b      	ldrb	r3, [r7, #12]
    b530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b534:	733b      	strb	r3, [r7, #12]
    b536:	7b7b      	ldrb	r3, [r7, #13]
    b538:	f043 0303 	orr.w	r3, r3, #3
    b53c:	737b      	strb	r3, [r7, #13]
    b53e:	7b7b      	ldrb	r3, [r7, #13]
    b540:	2201      	movs	r2, #1
    b542:	f362 1305 	bfi	r3, r2, #4, #2
    b546:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b54a:	7b1b      	ldrb	r3, [r3, #12]
    b54c:	2b00      	cmp	r3, #0
    b54e:	d001      	beq.n	b554 <n25q256a_xip_confirm+0x7c>
    b550:	2208      	movs	r2, #8
    b552:	e000      	b.n	b556 <n25q256a_xip_confirm+0x7e>
    b554:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b556:	7bbb      	ldrb	r3, [r7, #14]
    b558:	f362 0304 	bfi	r3, r2, #0, #5
    b55c:	73bb      	strb	r3, [r7, #14]
    b55e:	230b      	movs	r3, #11
    b560:	743b      	strb	r3, [r7, #16]
    b562:	78fb      	ldrb	r3, [r7, #3]
    b564:	2b00      	cmp	r3, #0
    b566:	d001      	beq.n	b56c <n25q256a_xip_confirm+0x94>
    b568:	2300      	movs	r3, #0
    b56a:	e000      	b.n	b56e <n25q256a_xip_confirm+0x96>
    b56c:	23ff      	movs	r3, #255	; 0xff
    b56e:	747b      	strb	r3, [r7, #17]
    b570:	2301      	movs	r3, #1
    b572:	61bb      	str	r3, [r7, #24]
    b574:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b578:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b57a:	f107 030c 	add.w	r3, r7, #12
    b57e:	4619      	mov	r1, r3
    b580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b582:	4b07      	ldr	r3, [pc, #28]	; (b5a0 <n25q256a_xip_confirm+0xc8>)
    b584:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b586:	78fb      	ldrb	r3, [r7, #3]
    b588:	2b00      	cmp	r3, #0
    b58a:	d001      	beq.n	b590 <n25q256a_xip_confirm+0xb8>
    b58c:	2202      	movs	r2, #2
    b58e:	e000      	b.n	b592 <n25q256a_xip_confirm+0xba>
    b590:	2201      	movs	r2, #1
    b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b594:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b596:	2300      	movs	r3, #0
}
    b598:	4618      	mov	r0, r3
    b59a:	3730      	adds	r7, #48	; 0x30
    b59c:	46bd      	mov	sp, r7
    b59e:	bd80      	pop	{r7, pc}
    b5a0:	00002801 	.word	0x00002801

0000b5a4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b5a4:	b580      	push	{r7, lr}
    b5a6:	b08c      	sub	sp, #48	; 0x30
    b5a8:	af00      	add	r7, sp, #0
    b5aa:	6078      	str	r0, [r7, #4]
    b5ac:	460b      	mov	r3, r1
    b5ae:	70fb      	strb	r3, [r7, #3]
    b5b0:	4613      	mov	r3, r2
    b5b2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b5b4:	2300      	movs	r3, #0
    b5b6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b5b8:	687b      	ldr	r3, [r7, #4]
    b5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b5bc:	687b      	ldr	r3, [r7, #4]
    b5be:	681b      	ldr	r3, [r3, #0]
    b5c0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b5c2:	f107 030c 	add.w	r3, r7, #12
    b5c6:	2200      	movs	r2, #0
    b5c8:	601a      	str	r2, [r3, #0]
    b5ca:	605a      	str	r2, [r3, #4]
    b5cc:	609a      	str	r2, [r3, #8]
    b5ce:	60da      	str	r2, [r3, #12]
    b5d0:	611a      	str	r2, [r3, #16]
    b5d2:	615a      	str	r2, [r3, #20]
    b5d4:	78fb      	ldrb	r3, [r7, #3]
    b5d6:	f003 0307 	and.w	r3, r3, #7
    b5da:	b2da      	uxtb	r2, r3
    b5dc:	7b3b      	ldrb	r3, [r7, #12]
    b5de:	f362 0302 	bfi	r3, r2, #0, #3
    b5e2:	733b      	strb	r3, [r7, #12]
    b5e4:	7b3b      	ldrb	r3, [r7, #12]
    b5e6:	f043 0310 	orr.w	r3, r3, #16
    b5ea:	733b      	strb	r3, [r7, #12]
    b5ec:	7b3b      	ldrb	r3, [r7, #12]
    b5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b5f2:	733b      	strb	r3, [r7, #12]
    b5f4:	78bb      	ldrb	r3, [r7, #2]
    b5f6:	743b      	strb	r3, [r7, #16]
    b5f8:	2301      	movs	r3, #1
    b5fa:	61bb      	str	r3, [r7, #24]
    b5fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b600:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b604:	7b5b      	ldrb	r3, [r3, #13]
    b606:	2b00      	cmp	r3, #0
    b608:	d003      	beq.n	b612 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b60a:	2100      	movs	r1, #0
    b60c:	6878      	ldr	r0, [r7, #4]
    b60e:	4b0a      	ldr	r3, [pc, #40]	; (b638 <n25q256a_read_reg+0x94>)
    b610:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b612:	f107 030c 	add.w	r3, r7, #12
    b616:	4619      	mov	r1, r3
    b618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b61a:	4b08      	ldr	r3, [pc, #32]	; (b63c <n25q256a_read_reg+0x98>)
    b61c:	4798      	blx	r3
	if (n25q->xip_mode) {
    b61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b620:	7b5b      	ldrb	r3, [r3, #13]
    b622:	2b00      	cmp	r3, #0
    b624:	d003      	beq.n	b62e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b626:	2101      	movs	r1, #1
    b628:	6878      	ldr	r0, [r7, #4]
    b62a:	4b03      	ldr	r3, [pc, #12]	; (b638 <n25q256a_read_reg+0x94>)
    b62c:	4798      	blx	r3
	}
	return status;
    b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b630:	4618      	mov	r0, r3
    b632:	3730      	adds	r7, #48	; 0x30
    b634:	46bd      	mov	sp, r7
    b636:	bd80      	pop	{r7, pc}
    b638:	0000b4d9 	.word	0x0000b4d9
    b63c:	00002801 	.word	0x00002801

0000b640 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b640:	b580      	push	{r7, lr}
    b642:	b08c      	sub	sp, #48	; 0x30
    b644:	af00      	add	r7, sp, #0
    b646:	60f8      	str	r0, [r7, #12]
    b648:	607b      	str	r3, [r7, #4]
    b64a:	460b      	mov	r3, r1
    b64c:	72fb      	strb	r3, [r7, #11]
    b64e:	4613      	mov	r3, r2
    b650:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b652:	68fb      	ldr	r3, [r7, #12]
    b654:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b656:	68fb      	ldr	r3, [r7, #12]
    b658:	681b      	ldr	r3, [r3, #0]
    b65a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b65c:	f107 0310 	add.w	r3, r7, #16
    b660:	2200      	movs	r2, #0
    b662:	601a      	str	r2, [r3, #0]
    b664:	605a      	str	r2, [r3, #4]
    b666:	609a      	str	r2, [r3, #8]
    b668:	60da      	str	r2, [r3, #12]
    b66a:	611a      	str	r2, [r3, #16]
    b66c:	615a      	str	r2, [r3, #20]
    b66e:	7afb      	ldrb	r3, [r7, #11]
    b670:	f003 0307 	and.w	r3, r3, #7
    b674:	b2da      	uxtb	r2, r3
    b676:	7c3b      	ldrb	r3, [r7, #16]
    b678:	f362 0302 	bfi	r3, r2, #0, #3
    b67c:	743b      	strb	r3, [r7, #16]
    b67e:	7c3b      	ldrb	r3, [r7, #16]
    b680:	f043 0310 	orr.w	r3, r3, #16
    b684:	743b      	strb	r3, [r7, #16]
    b686:	7c3b      	ldrb	r3, [r7, #16]
    b688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b68c:	743b      	strb	r3, [r7, #16]
    b68e:	7c7b      	ldrb	r3, [r7, #17]
    b690:	2202      	movs	r2, #2
    b692:	f362 1305 	bfi	r3, r2, #4, #2
    b696:	747b      	strb	r3, [r7, #17]
    b698:	7abb      	ldrb	r3, [r7, #10]
    b69a:	753b      	strb	r3, [r7, #20]
    b69c:	2301      	movs	r3, #1
    b69e:	61fb      	str	r3, [r7, #28]
    b6a0:	1d3b      	adds	r3, r7, #4
    b6a2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6a6:	7b5b      	ldrb	r3, [r3, #13]
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d003      	beq.n	b6b4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b6ac:	2100      	movs	r1, #0
    b6ae:	68f8      	ldr	r0, [r7, #12]
    b6b0:	4b09      	ldr	r3, [pc, #36]	; (b6d8 <n25q256a_write_reg+0x98>)
    b6b2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b6b4:	f107 0310 	add.w	r3, r7, #16
    b6b8:	4619      	mov	r1, r3
    b6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b6bc:	4b07      	ldr	r3, [pc, #28]	; (b6dc <n25q256a_write_reg+0x9c>)
    b6be:	4798      	blx	r3
	if (n25q->xip_mode) {
    b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6c2:	7b5b      	ldrb	r3, [r3, #13]
    b6c4:	2b00      	cmp	r3, #0
    b6c6:	d003      	beq.n	b6d0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b6c8:	2101      	movs	r1, #1
    b6ca:	68f8      	ldr	r0, [r7, #12]
    b6cc:	4b02      	ldr	r3, [pc, #8]	; (b6d8 <n25q256a_write_reg+0x98>)
    b6ce:	4798      	blx	r3
	}
}
    b6d0:	bf00      	nop
    b6d2:	3730      	adds	r7, #48	; 0x30
    b6d4:	46bd      	mov	sp, r7
    b6d6:	bd80      	pop	{r7, pc}
    b6d8:	0000b4d9 	.word	0x0000b4d9
    b6dc:	00002801 	.word	0x00002801

0000b6e0 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b6e0:	b580      	push	{r7, lr}
    b6e2:	b090      	sub	sp, #64	; 0x40
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	6078      	str	r0, [r7, #4]
    b6e8:	460b      	mov	r3, r1
    b6ea:	70fb      	strb	r3, [r7, #3]
    b6ec:	4613      	mov	r3, r2
    b6ee:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b6f0:	687b      	ldr	r3, [r7, #4]
    b6f2:	681b      	ldr	r3, [r3, #0]
    b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b6f6:	78bb      	ldrb	r3, [r7, #2]
    b6f8:	2b00      	cmp	r3, #0
    b6fa:	d001      	beq.n	b700 <n25q256a_write_enable+0x20>
    b6fc:	2306      	movs	r3, #6
    b6fe:	e000      	b.n	b702 <n25q256a_write_enable+0x22>
    b700:	2304      	movs	r3, #4
    b702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b706:	f107 0320 	add.w	r3, r7, #32
    b70a:	2200      	movs	r2, #0
    b70c:	601a      	str	r2, [r3, #0]
    b70e:	605a      	str	r2, [r3, #4]
    b710:	609a      	str	r2, [r3, #8]
    b712:	60da      	str	r2, [r3, #12]
    b714:	611a      	str	r2, [r3, #16]
    b716:	615a      	str	r2, [r3, #20]
    b718:	78fb      	ldrb	r3, [r7, #3]
    b71a:	f003 0307 	and.w	r3, r3, #7
    b71e:	b2da      	uxtb	r2, r3
    b720:	f897 3020 	ldrb.w	r3, [r7, #32]
    b724:	f362 0302 	bfi	r3, r2, #0, #3
    b728:	f887 3020 	strb.w	r3, [r7, #32]
    b72c:	f897 3020 	ldrb.w	r3, [r7, #32]
    b730:	f043 0310 	orr.w	r3, r3, #16
    b734:	f887 3020 	strb.w	r3, [r7, #32]
    b738:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b73c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b740:	f107 0308 	add.w	r3, r7, #8
    b744:	2200      	movs	r2, #0
    b746:	601a      	str	r2, [r3, #0]
    b748:	605a      	str	r2, [r3, #4]
    b74a:	609a      	str	r2, [r3, #8]
    b74c:	60da      	str	r2, [r3, #12]
    b74e:	611a      	str	r2, [r3, #16]
    b750:	615a      	str	r2, [r3, #20]
    b752:	78fb      	ldrb	r3, [r7, #3]
    b754:	f003 0307 	and.w	r3, r3, #7
    b758:	b2da      	uxtb	r2, r3
    b75a:	7a3b      	ldrb	r3, [r7, #8]
    b75c:	f362 0302 	bfi	r3, r2, #0, #3
    b760:	723b      	strb	r3, [r7, #8]
    b762:	7a3b      	ldrb	r3, [r7, #8]
    b764:	f043 0310 	orr.w	r3, r3, #16
    b768:	723b      	strb	r3, [r7, #8]
    b76a:	7a3b      	ldrb	r3, [r7, #8]
    b76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b770:	723b      	strb	r3, [r7, #8]
    b772:	2305      	movs	r3, #5
    b774:	733b      	strb	r3, [r7, #12]
    b776:	2301      	movs	r3, #1
    b778:	617b      	str	r3, [r7, #20]
    b77a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b77e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b780:	f107 0320 	add.w	r3, r7, #32
    b784:	4619      	mov	r1, r3
    b786:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b788:	4b08      	ldr	r3, [pc, #32]	; (b7ac <n25q256a_write_enable+0xcc>)
    b78a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b78c:	f107 0308 	add.w	r3, r7, #8
    b790:	4619      	mov	r1, r3
    b792:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b794:	4b05      	ldr	r3, [pc, #20]	; (b7ac <n25q256a_write_enable+0xcc>)
    b796:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b798:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b79c:	f003 0302 	and.w	r3, r3, #2
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d0ed      	beq.n	b780 <n25q256a_write_enable+0xa0>
}
    b7a4:	bf00      	nop
    b7a6:	3740      	adds	r7, #64	; 0x40
    b7a8:	46bd      	mov	sp, r7
    b7aa:	bd80      	pop	{r7, pc}
    b7ac:	00002801 	.word	0x00002801

0000b7b0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b7b0:	b590      	push	{r4, r7, lr}
    b7b2:	b087      	sub	sp, #28
    b7b4:	af00      	add	r7, sp, #0
    b7b6:	6078      	str	r0, [r7, #4]
    b7b8:	460b      	mov	r3, r1
    b7ba:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b7bc:	687b      	ldr	r3, [r7, #4]
    b7be:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b7c0:	68fb      	ldr	r3, [r7, #12]
    b7c2:	7b1b      	ldrb	r3, [r3, #12]
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	d001      	beq.n	b7cc <n25q256a_switch_mode+0x1c>
    b7c8:	2306      	movs	r3, #6
    b7ca:	e000      	b.n	b7ce <n25q256a_switch_mode+0x1e>
    b7cc:	2300      	movs	r3, #0
    b7ce:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b7d0:	7afb      	ldrb	r3, [r7, #11]
    b7d2:	2265      	movs	r2, #101	; 0x65
    b7d4:	4619      	mov	r1, r3
    b7d6:	6878      	ldr	r0, [r7, #4]
    b7d8:	4b25      	ldr	r3, [pc, #148]	; (b870 <n25q256a_switch_mode+0xc0>)
    b7da:	4798      	blx	r3
    b7dc:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b7de:	2300      	movs	r3, #0
    b7e0:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b7e2:	68fb      	ldr	r3, [r7, #12]
    b7e4:	7b1b      	ldrb	r3, [r3, #12]
    b7e6:	78fa      	ldrb	r2, [r7, #3]
    b7e8:	429a      	cmp	r2, r3
    b7ea:	d03d      	beq.n	b868 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b7ec:	78fb      	ldrb	r3, [r7, #3]
    b7ee:	2b00      	cmp	r3, #0
    b7f0:	d00b      	beq.n	b80a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b7f2:	697b      	ldr	r3, [r7, #20]
    b7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	d011      	beq.n	b820 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b7fc:	697b      	ldr	r3, [r7, #20]
    b7fe:	f003 031f 	and.w	r3, r3, #31
    b802:	617b      	str	r3, [r7, #20]
			modify = 1;
    b804:	2301      	movs	r3, #1
    b806:	74fb      	strb	r3, [r7, #19]
    b808:	e00a      	b.n	b820 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b80a:	697b      	ldr	r3, [r7, #20]
    b80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b810:	2b00      	cmp	r3, #0
    b812:	d105      	bne.n	b820 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b814:	697b      	ldr	r3, [r7, #20]
    b816:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b81a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b81c:	2301      	movs	r3, #1
    b81e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b820:	7cfb      	ldrb	r3, [r7, #19]
    b822:	2b00      	cmp	r3, #0
    b824:	d021      	beq.n	b86a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b826:	68fb      	ldr	r3, [r7, #12]
    b828:	78fa      	ldrb	r2, [r7, #3]
    b82a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b82c:	7afb      	ldrb	r3, [r7, #11]
    b82e:	2201      	movs	r2, #1
    b830:	4619      	mov	r1, r3
    b832:	6878      	ldr	r0, [r7, #4]
    b834:	4b0f      	ldr	r3, [pc, #60]	; (b874 <n25q256a_switch_mode+0xc4>)
    b836:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b838:	7af9      	ldrb	r1, [r7, #11]
    b83a:	697b      	ldr	r3, [r7, #20]
    b83c:	2261      	movs	r2, #97	; 0x61
    b83e:	6878      	ldr	r0, [r7, #4]
    b840:	4c0d      	ldr	r4, [pc, #52]	; (b878 <n25q256a_switch_mode+0xc8>)
    b842:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b844:	78fb      	ldrb	r3, [r7, #3]
    b846:	2b00      	cmp	r3, #0
    b848:	d001      	beq.n	b84e <n25q256a_switch_mode+0x9e>
    b84a:	2306      	movs	r3, #6
    b84c:	e000      	b.n	b850 <n25q256a_switch_mode+0xa0>
    b84e:	2300      	movs	r3, #0
    b850:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b852:	7afb      	ldrb	r3, [r7, #11]
    b854:	2265      	movs	r2, #101	; 0x65
    b856:	4619      	mov	r1, r3
    b858:	6878      	ldr	r0, [r7, #4]
    b85a:	4b05      	ldr	r3, [pc, #20]	; (b870 <n25q256a_switch_mode+0xc0>)
    b85c:	4798      	blx	r3
    b85e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b860:	68fb      	ldr	r3, [r7, #12]
    b862:	78fa      	ldrb	r2, [r7, #3]
    b864:	731a      	strb	r2, [r3, #12]
    b866:	e000      	b.n	b86a <n25q256a_switch_mode+0xba>
		return;
    b868:	bf00      	nop
	}
}
    b86a:	371c      	adds	r7, #28
    b86c:	46bd      	mov	sp, r7
    b86e:	bd90      	pop	{r4, r7, pc}
    b870:	0000b5a5 	.word	0x0000b5a5
    b874:	0000b6e1 	.word	0x0000b6e1
    b878:	0000b641 	.word	0x0000b641

0000b87c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b87c:	b580      	push	{r7, lr}
    b87e:	b086      	sub	sp, #24
    b880:	af00      	add	r7, sp, #0
    b882:	60f8      	str	r0, [r7, #12]
    b884:	60b9      	str	r1, [r7, #8]
    b886:	607a      	str	r2, [r7, #4]
    b888:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b88a:	68fb      	ldr	r3, [r7, #12]
    b88c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b88e:	4a0c      	ldr	r2, [pc, #48]	; (b8c0 <n25q256a_construct+0x44>)
    b890:	68b9      	ldr	r1, [r7, #8]
    b892:	68f8      	ldr	r0, [r7, #12]
    b894:	4b0b      	ldr	r3, [pc, #44]	; (b8c4 <n25q256a_construct+0x48>)
    b896:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b898:	697b      	ldr	r3, [r7, #20]
    b89a:	2200      	movs	r2, #0
    b89c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b89e:	697b      	ldr	r3, [r7, #20]
    b8a0:	2200      	movs	r2, #0
    b8a2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b8a4:	697b      	ldr	r3, [r7, #20]
    b8a6:	687a      	ldr	r2, [r7, #4]
    b8a8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b8aa:	78fb      	ldrb	r3, [r7, #3]
    b8ac:	4619      	mov	r1, r3
    b8ae:	68f8      	ldr	r0, [r7, #12]
    b8b0:	4b05      	ldr	r3, [pc, #20]	; (b8c8 <n25q256a_construct+0x4c>)
    b8b2:	4798      	blx	r3
	return me;
    b8b4:	68fb      	ldr	r3, [r7, #12]
}
    b8b6:	4618      	mov	r0, r3
    b8b8:	3718      	adds	r7, #24
    b8ba:	46bd      	mov	sp, r7
    b8bc:	bd80      	pop	{r7, pc}
    b8be:	bf00      	nop
    b8c0:	00010b88 	.word	0x00010b88
    b8c4:	0000bd59 	.word	0x0000bd59
    b8c8:	0000b7b1 	.word	0x0000b7b1

0000b8cc <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b8cc:	b580      	push	{r7, lr}
    b8ce:	b08c      	sub	sp, #48	; 0x30
    b8d0:	af00      	add	r7, sp, #0
    b8d2:	60f8      	str	r0, [r7, #12]
    b8d4:	60b9      	str	r1, [r7, #8]
    b8d6:	607a      	str	r2, [r7, #4]
    b8d8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b8da:	68fb      	ldr	r3, [r7, #12]
    b8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b8de:	68fb      	ldr	r3, [r7, #12]
    b8e0:	681b      	ldr	r3, [r3, #0]
    b8e2:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b8e4:	f107 0310 	add.w	r3, r7, #16
    b8e8:	2200      	movs	r2, #0
    b8ea:	601a      	str	r2, [r3, #0]
    b8ec:	605a      	str	r2, [r3, #4]
    b8ee:	609a      	str	r2, [r3, #8]
    b8f0:	60da      	str	r2, [r3, #12]
    b8f2:	611a      	str	r2, [r3, #16]
    b8f4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8f8:	7b1b      	ldrb	r3, [r3, #12]
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d001      	beq.n	b902 <n25q256a_read+0x36>
    b8fe:	2206      	movs	r2, #6
    b900:	e000      	b.n	b904 <n25q256a_read+0x38>
    b902:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b904:	7c3b      	ldrb	r3, [r7, #16]
    b906:	f362 0302 	bfi	r3, r2, #0, #3
    b90a:	743b      	strb	r3, [r7, #16]
    b90c:	7c3b      	ldrb	r3, [r7, #16]
    b90e:	f043 0310 	orr.w	r3, r3, #16
    b912:	743b      	strb	r3, [r7, #16]
    b914:	7c3b      	ldrb	r3, [r7, #16]
    b916:	f043 0320 	orr.w	r3, r3, #32
    b91a:	743b      	strb	r3, [r7, #16]
    b91c:	7c3b      	ldrb	r3, [r7, #16]
    b91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b922:	743b      	strb	r3, [r7, #16]
    b924:	7c7b      	ldrb	r3, [r7, #17]
    b926:	2201      	movs	r2, #1
    b928:	f362 1305 	bfi	r3, r2, #4, #2
    b92c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b930:	7b1b      	ldrb	r3, [r3, #12]
    b932:	2b00      	cmp	r3, #0
    b934:	d001      	beq.n	b93a <n25q256a_read+0x6e>
    b936:	220a      	movs	r2, #10
    b938:	e000      	b.n	b93c <n25q256a_read+0x70>
    b93a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b93c:	7cbb      	ldrb	r3, [r7, #18]
    b93e:	f362 0304 	bfi	r3, r2, #0, #5
    b942:	74bb      	strb	r3, [r7, #18]
    b944:	230b      	movs	r3, #11
    b946:	753b      	strb	r3, [r7, #20]
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	61bb      	str	r3, [r7, #24]
    b94c:	683b      	ldr	r3, [r7, #0]
    b94e:	61fb      	str	r3, [r7, #28]
    b950:	68bb      	ldr	r3, [r7, #8]
    b952:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b954:	f107 0310 	add.w	r3, r7, #16
    b958:	4619      	mov	r1, r3
    b95a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b95c:	4b03      	ldr	r3, [pc, #12]	; (b96c <n25q256a_read+0xa0>)
    b95e:	4798      	blx	r3
	return ERR_NONE;
    b960:	2300      	movs	r3, #0
}
    b962:	4618      	mov	r0, r3
    b964:	3730      	adds	r7, #48	; 0x30
    b966:	46bd      	mov	sp, r7
    b968:	bd80      	pop	{r7, pc}
    b96a:	bf00      	nop
    b96c:	00002801 	.word	0x00002801

0000b970 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b970:	b580      	push	{r7, lr}
    b972:	b08c      	sub	sp, #48	; 0x30
    b974:	af00      	add	r7, sp, #0
    b976:	60f8      	str	r0, [r7, #12]
    b978:	60b9      	str	r1, [r7, #8]
    b97a:	607a      	str	r2, [r7, #4]
    b97c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b97e:	68fb      	ldr	r3, [r7, #12]
    b980:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b982:	68fb      	ldr	r3, [r7, #12]
    b984:	681b      	ldr	r3, [r3, #0]
    b986:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b988:	f107 0310 	add.w	r3, r7, #16
    b98c:	2200      	movs	r2, #0
    b98e:	601a      	str	r2, [r3, #0]
    b990:	605a      	str	r2, [r3, #4]
    b992:	609a      	str	r2, [r3, #8]
    b994:	60da      	str	r2, [r3, #12]
    b996:	611a      	str	r2, [r3, #16]
    b998:	615a      	str	r2, [r3, #20]
    b99a:	7c3b      	ldrb	r3, [r7, #16]
    b99c:	f043 0310 	orr.w	r3, r3, #16
    b9a0:	743b      	strb	r3, [r7, #16]
    b9a2:	7c3b      	ldrb	r3, [r7, #16]
    b9a4:	f043 0320 	orr.w	r3, r3, #32
    b9a8:	743b      	strb	r3, [r7, #16]
    b9aa:	7c3b      	ldrb	r3, [r7, #16]
    b9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b9b0:	743b      	strb	r3, [r7, #16]
    b9b2:	7c7b      	ldrb	r3, [r7, #17]
    b9b4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b9b8:	747b      	strb	r3, [r7, #17]
    b9ba:	2302      	movs	r3, #2
    b9bc:	753b      	strb	r3, [r7, #20]
    b9be:	687b      	ldr	r3, [r7, #4]
    b9c0:	61bb      	str	r3, [r7, #24]
    b9c2:	683b      	ldr	r3, [r7, #0]
    b9c4:	61fb      	str	r3, [r7, #28]
    b9c6:	68bb      	ldr	r3, [r7, #8]
    b9c8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b9cc:	7b1b      	ldrb	r3, [r3, #12]
    b9ce:	2b00      	cmp	r3, #0
    b9d0:	d001      	beq.n	b9d6 <n25q256a_write+0x66>
    b9d2:	2206      	movs	r2, #6
    b9d4:	e000      	b.n	b9d8 <n25q256a_write+0x68>
    b9d6:	2200      	movs	r2, #0
    b9d8:	7c3b      	ldrb	r3, [r7, #16]
    b9da:	f362 0302 	bfi	r3, r2, #0, #3
    b9de:	743b      	strb	r3, [r7, #16]
	while (length) {
    b9e0:	e035      	b.n	ba4e <n25q256a_write+0xde>
		cmd.address = address;
    b9e2:	687b      	ldr	r3, [r7, #4]
    b9e4:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b9e6:	683b      	ldr	r3, [r7, #0]
    b9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b9ec:	d802      	bhi.n	b9f4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b9ee:	683b      	ldr	r3, [r7, #0]
    b9f0:	61fb      	str	r3, [r7, #28]
    b9f2:	e002      	b.n	b9fa <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b9f4:	f44f 7380 	mov.w	r3, #256	; 0x100
    b9f8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b9fa:	7c3b      	ldrb	r3, [r7, #16]
    b9fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba00:	b2db      	uxtb	r3, r3
    ba02:	2201      	movs	r2, #1
    ba04:	4619      	mov	r1, r3
    ba06:	68f8      	ldr	r0, [r7, #12]
    ba08:	4b19      	ldr	r3, [pc, #100]	; (ba70 <n25q256a_write+0x100>)
    ba0a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ba0c:	f107 0310 	add.w	r3, r7, #16
    ba10:	4619      	mov	r1, r3
    ba12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba14:	4b17      	ldr	r3, [pc, #92]	; (ba74 <n25q256a_write+0x104>)
    ba16:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ba18:	bf00      	nop
    ba1a:	7c3b      	ldrb	r3, [r7, #16]
    ba1c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba20:	b2db      	uxtb	r3, r3
    ba22:	2270      	movs	r2, #112	; 0x70
    ba24:	4619      	mov	r1, r3
    ba26:	68f8      	ldr	r0, [r7, #12]
    ba28:	4b13      	ldr	r3, [pc, #76]	; (ba78 <n25q256a_write+0x108>)
    ba2a:	4798      	blx	r3
    ba2c:	4603      	mov	r3, r0
    ba2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba32:	2b00      	cmp	r3, #0
    ba34:	d0f1      	beq.n	ba1a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ba36:	6a3a      	ldr	r2, [r7, #32]
    ba38:	69fb      	ldr	r3, [r7, #28]
    ba3a:	4413      	add	r3, r2
    ba3c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    ba3e:	69fb      	ldr	r3, [r7, #28]
    ba40:	683a      	ldr	r2, [r7, #0]
    ba42:	1ad3      	subs	r3, r2, r3
    ba44:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    ba46:	69fb      	ldr	r3, [r7, #28]
    ba48:	687a      	ldr	r2, [r7, #4]
    ba4a:	4413      	add	r3, r2
    ba4c:	607b      	str	r3, [r7, #4]
	while (length) {
    ba4e:	683b      	ldr	r3, [r7, #0]
    ba50:	2b00      	cmp	r3, #0
    ba52:	d1c6      	bne.n	b9e2 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba56:	7b5b      	ldrb	r3, [r3, #13]
    ba58:	2b00      	cmp	r3, #0
    ba5a:	d003      	beq.n	ba64 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    ba5c:	2101      	movs	r1, #1
    ba5e:	68f8      	ldr	r0, [r7, #12]
    ba60:	4b06      	ldr	r3, [pc, #24]	; (ba7c <n25q256a_write+0x10c>)
    ba62:	4798      	blx	r3
	}
	return ERR_NONE;
    ba64:	2300      	movs	r3, #0
}
    ba66:	4618      	mov	r0, r3
    ba68:	3730      	adds	r7, #48	; 0x30
    ba6a:	46bd      	mov	sp, r7
    ba6c:	bd80      	pop	{r7, pc}
    ba6e:	bf00      	nop
    ba70:	0000b6e1 	.word	0x0000b6e1
    ba74:	00002801 	.word	0x00002801
    ba78:	0000b5a5 	.word	0x0000b5a5
    ba7c:	0000b4d9 	.word	0x0000b4d9

0000ba80 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    ba80:	b580      	push	{r7, lr}
    ba82:	b090      	sub	sp, #64	; 0x40
    ba84:	af00      	add	r7, sp, #0
    ba86:	60f8      	str	r0, [r7, #12]
    ba88:	60b9      	str	r1, [r7, #8]
    ba8a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba8c:	68fb      	ldr	r3, [r7, #12]
    ba8e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba90:	68fb      	ldr	r3, [r7, #12]
    ba92:	681b      	ldr	r3, [r3, #0]
    ba94:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    ba96:	f107 0314 	add.w	r3, r7, #20
    ba9a:	2200      	movs	r2, #0
    ba9c:	601a      	str	r2, [r3, #0]
    ba9e:	605a      	str	r2, [r3, #4]
    baa0:	609a      	str	r2, [r3, #8]
    baa2:	60da      	str	r2, [r3, #12]
    baa4:	611a      	str	r2, [r3, #16]
    baa6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    baa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    baaa:	7b1b      	ldrb	r3, [r3, #12]
    baac:	2b00      	cmp	r3, #0
    baae:	d001      	beq.n	bab4 <n25q256a_erase+0x34>
    bab0:	2206      	movs	r2, #6
    bab2:	e000      	b.n	bab6 <n25q256a_erase+0x36>
    bab4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    bab6:	7d3b      	ldrb	r3, [r7, #20]
    bab8:	f362 0302 	bfi	r3, r2, #0, #3
    babc:	753b      	strb	r3, [r7, #20]
    babe:	7d3b      	ldrb	r3, [r7, #20]
    bac0:	f043 0310 	orr.w	r3, r3, #16
    bac4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    bac6:	687b      	ldr	r3, [r7, #4]
    bac8:	4a56      	ldr	r2, [pc, #344]	; (bc24 <n25q256a_erase+0x1a4>)
    baca:	4293      	cmp	r3, r2
    bacc:	bf94      	ite	ls
    bace:	2301      	movls	r3, #1
    bad0:	2300      	movhi	r3, #0
    bad2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    bad4:	7d3b      	ldrb	r3, [r7, #20]
    bad6:	f362 1345 	bfi	r3, r2, #5, #1
    bada:	753b      	strb	r3, [r7, #20]
    badc:	7d7b      	ldrb	r3, [r7, #21]
    bade:	2202      	movs	r2, #2
    bae0:	f362 1305 	bfi	r3, r2, #4, #2
    bae4:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    bae6:	68bb      	ldr	r3, [r7, #8]
    bae8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    baea:	687b      	ldr	r3, [r7, #4]
    baec:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    baee:	2300      	movs	r3, #0
    baf0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    baf2:	687b      	ldr	r3, [r7, #4]
    baf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    baf8:	2b00      	cmp	r3, #0
    bafa:	d104      	bne.n	bb06 <n25q256a_erase+0x86>
    bafc:	68bb      	ldr	r3, [r7, #8]
    bafe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bb02:	2b00      	cmp	r3, #0
    bb04:	d002      	beq.n	bb0c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    bb06:	f06f 030c 	mvn.w	r3, #12
    bb0a:	e087      	b.n	bc1c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    bb0c:	687b      	ldr	r3, [r7, #4]
    bb0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    bb12:	d368      	bcc.n	bbe6 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    bb14:	23c7      	movs	r3, #199	; 0xc7
    bb16:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb18:	7d3b      	ldrb	r3, [r7, #20]
    bb1a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb1e:	b2db      	uxtb	r3, r3
    bb20:	2201      	movs	r2, #1
    bb22:	4619      	mov	r1, r3
    bb24:	68f8      	ldr	r0, [r7, #12]
    bb26:	4b40      	ldr	r3, [pc, #256]	; (bc28 <n25q256a_erase+0x1a8>)
    bb28:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bb2a:	f107 0314 	add.w	r3, r7, #20
    bb2e:	4619      	mov	r1, r3
    bb30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bb32:	4b3e      	ldr	r3, [pc, #248]	; (bc2c <n25q256a_erase+0x1ac>)
    bb34:	4798      	blx	r3
    bb36:	e059      	b.n	bbec <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    bb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb3a:	b29b      	uxth	r3, r3
    bb3c:	2b00      	cmp	r3, #0
    bb3e:	d11f      	bne.n	bb80 <n25q256a_erase+0x100>
    bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bb46:	d31b      	bcc.n	bb80 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    bb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb4a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bb4c:	23d8      	movs	r3, #216	; 0xd8
    bb4e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb50:	7d3b      	ldrb	r3, [r7, #20]
    bb52:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb56:	b2db      	uxtb	r3, r3
    bb58:	2201      	movs	r2, #1
    bb5a:	4619      	mov	r1, r3
    bb5c:	68f8      	ldr	r0, [r7, #12]
    bb5e:	4b32      	ldr	r3, [pc, #200]	; (bc28 <n25q256a_erase+0x1a8>)
    bb60:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bb62:	f107 0314 	add.w	r3, r7, #20
    bb66:	4619      	mov	r1, r3
    bb68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bb6a:	4b30      	ldr	r3, [pc, #192]	; (bc2c <n25q256a_erase+0x1ac>)
    bb6c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb70:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bb74:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb78:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bb7c:	63bb      	str	r3, [r7, #56]	; 0x38
    bb7e:	e023      	b.n	bbc8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bb86:	d31b      	bcc.n	bbc0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb8a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bb8c:	2320      	movs	r3, #32
    bb8e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb90:	7d3b      	ldrb	r3, [r7, #20]
    bb92:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb96:	b2db      	uxtb	r3, r3
    bb98:	2201      	movs	r2, #1
    bb9a:	4619      	mov	r1, r3
    bb9c:	68f8      	ldr	r0, [r7, #12]
    bb9e:	4b22      	ldr	r3, [pc, #136]	; (bc28 <n25q256a_erase+0x1a8>)
    bba0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bba2:	f107 0314 	add.w	r3, r7, #20
    bba6:	4619      	mov	r1, r3
    bba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bbaa:	4b20      	ldr	r3, [pc, #128]	; (bc2c <n25q256a_erase+0x1ac>)
    bbac:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbb8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bbbc:	63bb      	str	r3, [r7, #56]	; 0x38
    bbbe:	e003      	b.n	bbc8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bbc0:	f06f 030c 	mvn.w	r3, #12
    bbc4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bbc6:	e011      	b.n	bbec <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bbc8:	bf00      	nop
    bbca:	7d3b      	ldrb	r3, [r7, #20]
    bbcc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bbd0:	b2db      	uxtb	r3, r3
    bbd2:	2270      	movs	r2, #112	; 0x70
    bbd4:	4619      	mov	r1, r3
    bbd6:	68f8      	ldr	r0, [r7, #12]
    bbd8:	4b15      	ldr	r3, [pc, #84]	; (bc30 <n25q256a_erase+0x1b0>)
    bbda:	4798      	blx	r3
    bbdc:	4603      	mov	r3, r0
    bbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	d0f1      	beq.n	bbca <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbe8:	2b00      	cmp	r3, #0
    bbea:	d1a5      	bne.n	bb38 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bbec:	bf00      	nop
    bbee:	7d3b      	ldrb	r3, [r7, #20]
    bbf0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bbf4:	b2db      	uxtb	r3, r3
    bbf6:	2270      	movs	r2, #112	; 0x70
    bbf8:	4619      	mov	r1, r3
    bbfa:	68f8      	ldr	r0, [r7, #12]
    bbfc:	4b0c      	ldr	r3, [pc, #48]	; (bc30 <n25q256a_erase+0x1b0>)
    bbfe:	4798      	blx	r3
    bc00:	4603      	mov	r3, r0
    bc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc06:	2b00      	cmp	r3, #0
    bc08:	d0f1      	beq.n	bbee <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc0c:	7b5b      	ldrb	r3, [r3, #13]
    bc0e:	2b00      	cmp	r3, #0
    bc10:	d003      	beq.n	bc1a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bc12:	2101      	movs	r1, #1
    bc14:	68f8      	ldr	r0, [r7, #12]
    bc16:	4b07      	ldr	r3, [pc, #28]	; (bc34 <n25q256a_erase+0x1b4>)
    bc18:	4798      	blx	r3
	}
	return rc;
    bc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bc1c:	4618      	mov	r0, r3
    bc1e:	3740      	adds	r7, #64	; 0x40
    bc20:	46bd      	mov	sp, r7
    bc22:	bd80      	pop	{r7, pc}
    bc24:	001fffff 	.word	0x001fffff
    bc28:	0000b6e1 	.word	0x0000b6e1
    bc2c:	00002801 	.word	0x00002801
    bc30:	0000b5a5 	.word	0x0000b5a5
    bc34:	0000b4d9 	.word	0x0000b4d9

0000bc38 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bc38:	b590      	push	{r4, r7, lr}
    bc3a:	b085      	sub	sp, #20
    bc3c:	af00      	add	r7, sp, #0
    bc3e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bc40:	687b      	ldr	r3, [r7, #4]
    bc42:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bc44:	68fb      	ldr	r3, [r7, #12]
    bc46:	7b1b      	ldrb	r3, [r3, #12]
    bc48:	2b00      	cmp	r3, #0
    bc4a:	d001      	beq.n	bc50 <n25q256a_enable_xip+0x18>
    bc4c:	2306      	movs	r3, #6
    bc4e:	e000      	b.n	bc52 <n25q256a_enable_xip+0x1a>
    bc50:	2300      	movs	r3, #0
    bc52:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bc54:	68fb      	ldr	r3, [r7, #12]
    bc56:	7b5b      	ldrb	r3, [r3, #13]
    bc58:	2b00      	cmp	r3, #0
    bc5a:	d129      	bne.n	bcb0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bc5c:	7afb      	ldrb	r3, [r7, #11]
    bc5e:	2285      	movs	r2, #133	; 0x85
    bc60:	4619      	mov	r1, r3
    bc62:	6878      	ldr	r0, [r7, #4]
    bc64:	4b15      	ldr	r3, [pc, #84]	; (bcbc <n25q256a_enable_xip+0x84>)
    bc66:	4798      	blx	r3
    bc68:	4603      	mov	r3, r0
    bc6a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bc6c:	7abb      	ldrb	r3, [r7, #10]
    bc6e:	f003 0308 	and.w	r3, r3, #8
    bc72:	2b00      	cmp	r3, #0
    bc74:	d015      	beq.n	bca2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bc76:	7abb      	ldrb	r3, [r7, #10]
    bc78:	f023 0308 	bic.w	r3, r3, #8
    bc7c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bc7e:	7abb      	ldrb	r3, [r7, #10]
    bc80:	7af9      	ldrb	r1, [r7, #11]
    bc82:	2281      	movs	r2, #129	; 0x81
    bc84:	6878      	ldr	r0, [r7, #4]
    bc86:	4c0e      	ldr	r4, [pc, #56]	; (bcc0 <n25q256a_enable_xip+0x88>)
    bc88:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc8a:	bf00      	nop
    bc8c:	7afb      	ldrb	r3, [r7, #11]
    bc8e:	2270      	movs	r2, #112	; 0x70
    bc90:	4619      	mov	r1, r3
    bc92:	6878      	ldr	r0, [r7, #4]
    bc94:	4b09      	ldr	r3, [pc, #36]	; (bcbc <n25q256a_enable_xip+0x84>)
    bc96:	4798      	blx	r3
    bc98:	4603      	mov	r3, r0
    bc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc9e:	2b00      	cmp	r3, #0
    bca0:	d0f4      	beq.n	bc8c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bca2:	68fb      	ldr	r3, [r7, #12]
    bca4:	2201      	movs	r2, #1
    bca6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bca8:	2101      	movs	r1, #1
    bcaa:	6878      	ldr	r0, [r7, #4]
    bcac:	4b05      	ldr	r3, [pc, #20]	; (bcc4 <n25q256a_enable_xip+0x8c>)
    bcae:	4798      	blx	r3
	}
	return ERR_NONE;
    bcb0:	2300      	movs	r3, #0
}
    bcb2:	4618      	mov	r0, r3
    bcb4:	3714      	adds	r7, #20
    bcb6:	46bd      	mov	sp, r7
    bcb8:	bd90      	pop	{r4, r7, pc}
    bcba:	bf00      	nop
    bcbc:	0000b5a5 	.word	0x0000b5a5
    bcc0:	0000b641 	.word	0x0000b641
    bcc4:	0000b4d9 	.word	0x0000b4d9

0000bcc8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bcc8:	b580      	push	{r7, lr}
    bcca:	b086      	sub	sp, #24
    bccc:	af00      	add	r7, sp, #0
    bcce:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bcd0:	687b      	ldr	r3, [r7, #4]
    bcd2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bcd4:	687b      	ldr	r3, [r7, #4]
    bcd6:	681b      	ldr	r3, [r3, #0]
    bcd8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bcda:	697b      	ldr	r3, [r7, #20]
    bcdc:	7b1b      	ldrb	r3, [r3, #12]
    bcde:	2b00      	cmp	r3, #0
    bce0:	d001      	beq.n	bce6 <n25q256a_disable_xip+0x1e>
    bce2:	2306      	movs	r3, #6
    bce4:	e000      	b.n	bce8 <n25q256a_disable_xip+0x20>
    bce6:	2300      	movs	r3, #0
    bce8:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bcea:	2100      	movs	r1, #0
    bcec:	6878      	ldr	r0, [r7, #4]
    bcee:	4b15      	ldr	r3, [pc, #84]	; (bd44 <n25q256a_disable_xip+0x7c>)
    bcf0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bcf2:	7bfb      	ldrb	r3, [r7, #15]
    bcf4:	2285      	movs	r2, #133	; 0x85
    bcf6:	4619      	mov	r1, r3
    bcf8:	6878      	ldr	r0, [r7, #4]
    bcfa:	4b13      	ldr	r3, [pc, #76]	; (bd48 <n25q256a_disable_xip+0x80>)
    bcfc:	4798      	blx	r3
    bcfe:	4603      	mov	r3, r0
    bd00:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bd02:	7bbb      	ldrb	r3, [r7, #14]
    bd04:	f003 0308 	and.w	r3, r3, #8
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d113      	bne.n	bd34 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bd0c:	697b      	ldr	r3, [r7, #20]
    bd0e:	689b      	ldr	r3, [r3, #8]
    bd10:	2b00      	cmp	r3, #0
    bd12:	d00f      	beq.n	bd34 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bd14:	693b      	ldr	r3, [r7, #16]
    bd16:	681b      	ldr	r3, [r3, #0]
    bd18:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bd1a:	6938      	ldr	r0, [r7, #16]
    bd1c:	4b0b      	ldr	r3, [pc, #44]	; (bd4c <n25q256a_disable_xip+0x84>)
    bd1e:	4798      	blx	r3
			n25q->pin_exit_xip();
    bd20:	697b      	ldr	r3, [r7, #20]
    bd22:	689b      	ldr	r3, [r3, #8]
    bd24:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bd26:	68b9      	ldr	r1, [r7, #8]
    bd28:	6938      	ldr	r0, [r7, #16]
    bd2a:	4b09      	ldr	r3, [pc, #36]	; (bd50 <n25q256a_disable_xip+0x88>)
    bd2c:	4798      	blx	r3
			qspi_sync_enable(descr);
    bd2e:	6938      	ldr	r0, [r7, #16]
    bd30:	4b08      	ldr	r3, [pc, #32]	; (bd54 <n25q256a_disable_xip+0x8c>)
    bd32:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bd34:	697b      	ldr	r3, [r7, #20]
    bd36:	2200      	movs	r2, #0
    bd38:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bd3a:	2300      	movs	r3, #0
}
    bd3c:	4618      	mov	r0, r3
    bd3e:	3718      	adds	r7, #24
    bd40:	46bd      	mov	sp, r7
    bd42:	bd80      	pop	{r7, pc}
    bd44:	0000b4d9 	.word	0x0000b4d9
    bd48:	0000b5a5 	.word	0x0000b5a5
    bd4c:	000027c5 	.word	0x000027c5
    bd50:	0000273d 	.word	0x0000273d
    bd54:	00002789 	.word	0x00002789

0000bd58 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bd58:	b480      	push	{r7}
    bd5a:	b085      	sub	sp, #20
    bd5c:	af00      	add	r7, sp, #0
    bd5e:	60f8      	str	r0, [r7, #12]
    bd60:	60b9      	str	r1, [r7, #8]
    bd62:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bd64:	68fb      	ldr	r3, [r7, #12]
    bd66:	68ba      	ldr	r2, [r7, #8]
    bd68:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bd6a:	68fb      	ldr	r3, [r7, #12]
    bd6c:	687a      	ldr	r2, [r7, #4]
    bd6e:	605a      	str	r2, [r3, #4]

	return me;
    bd70:	68fb      	ldr	r3, [r7, #12]
}
    bd72:	4618      	mov	r0, r3
    bd74:	3714      	adds	r7, #20
    bd76:	46bd      	mov	sp, r7
    bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd7c:	4770      	bx	lr

0000bd7e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bd7e:	b480      	push	{r7}
    bd80:	b083      	sub	sp, #12
    bd82:	af00      	add	r7, sp, #0
    bd84:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bd86:	687b      	ldr	r3, [r7, #4]
    bd88:	781b      	ldrb	r3, [r3, #0]
    bd8a:	b29a      	uxth	r2, r3
    bd8c:	687b      	ldr	r3, [r7, #4]
    bd8e:	3301      	adds	r3, #1
    bd90:	781b      	ldrb	r3, [r3, #0]
    bd92:	b29b      	uxth	r3, r3
    bd94:	021b      	lsls	r3, r3, #8
    bd96:	b29b      	uxth	r3, r3
    bd98:	4413      	add	r3, r2
    bd9a:	b29b      	uxth	r3, r3
}
    bd9c:	4618      	mov	r0, r3
    bd9e:	370c      	adds	r7, #12
    bda0:	46bd      	mov	sp, r7
    bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bda6:	4770      	bx	lr

0000bda8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bda8:	b480      	push	{r7}
    bdaa:	b083      	sub	sp, #12
    bdac:	af00      	add	r7, sp, #0
    bdae:	6078      	str	r0, [r7, #4]
	return desc[0];
    bdb0:	687b      	ldr	r3, [r7, #4]
    bdb2:	781b      	ldrb	r3, [r3, #0]
}
    bdb4:	4618      	mov	r0, r3
    bdb6:	370c      	adds	r7, #12
    bdb8:	46bd      	mov	sp, r7
    bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdbe:	4770      	bx	lr

0000bdc0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bdc0:	b580      	push	{r7, lr}
    bdc2:	b082      	sub	sp, #8
    bdc4:	af00      	add	r7, sp, #0
    bdc6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bdc8:	6878      	ldr	r0, [r7, #4]
    bdca:	4b05      	ldr	r3, [pc, #20]	; (bde0 <usb_desc_next+0x20>)
    bdcc:	4798      	blx	r3
    bdce:	4603      	mov	r3, r0
    bdd0:	461a      	mov	r2, r3
    bdd2:	687b      	ldr	r3, [r7, #4]
    bdd4:	4413      	add	r3, r2
}
    bdd6:	4618      	mov	r0, r3
    bdd8:	3708      	adds	r7, #8
    bdda:	46bd      	mov	sp, r7
    bddc:	bd80      	pop	{r7, pc}
    bdde:	bf00      	nop
    bde0:	0000bda9 	.word	0x0000bda9

0000bde4 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bde4:	b580      	push	{r7, lr}
    bde6:	b08c      	sub	sp, #48	; 0x30
    bde8:	af00      	add	r7, sp, #0
    bdea:	6078      	str	r0, [r7, #4]
    bdec:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bdee:	687b      	ldr	r3, [r7, #4]
    bdf0:	689b      	ldr	r3, [r3, #8]
    bdf2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bdf4:	683b      	ldr	r3, [r7, #0]
    bdf6:	681b      	ldr	r3, [r3, #0]
    bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bdfa:	2300      	movs	r3, #0
    bdfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    be00:	e08f      	b.n	bf22 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be04:	2b00      	cmp	r3, #0
    be06:	d102      	bne.n	be0e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    be08:	f06f 0309 	mvn.w	r3, #9
    be0c:	e092      	b.n	bf34 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    be0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be10:	789b      	ldrb	r3, [r3, #2]
    be12:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be16:	795b      	ldrb	r3, [r3, #5]
    be18:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    be1a:	7c7b      	ldrb	r3, [r7, #17]
    be1c:	2b02      	cmp	r3, #2
    be1e:	d002      	beq.n	be26 <cdcdf_acm_enable+0x42>
    be20:	7c7b      	ldrb	r3, [r7, #17]
    be22:	2b0a      	cmp	r3, #10
    be24:	d121      	bne.n	be6a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    be26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be2a:	6a3a      	ldr	r2, [r7, #32]
    be2c:	5cd2      	ldrb	r2, [r2, r3]
    be2e:	7bbb      	ldrb	r3, [r7, #14]
    be30:	429a      	cmp	r2, r3
    be32:	d102      	bne.n	be3a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    be34:	f06f 0311 	mvn.w	r3, #17
    be38:	e07c      	b.n	bf34 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    be3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be3e:	6a3a      	ldr	r2, [r7, #32]
    be40:	5cd3      	ldrb	r3, [r2, r3]
    be42:	2bff      	cmp	r3, #255	; 0xff
    be44:	d002      	beq.n	be4c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    be46:	f06f 031b 	mvn.w	r3, #27
    be4a:	e073      	b.n	bf34 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    be4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be50:	7bb9      	ldrb	r1, [r7, #14]
    be52:	6a3a      	ldr	r2, [r7, #32]
    be54:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    be56:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    be58:	683b      	ldr	r3, [r7, #0]
    be5a:	685b      	ldr	r3, [r3, #4]
    be5c:	2205      	movs	r2, #5
    be5e:	4619      	mov	r1, r3
    be60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    be62:	4b36      	ldr	r3, [pc, #216]	; (bf3c <cdcdf_acm_enable+0x158>)
    be64:	4798      	blx	r3
    be66:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    be68:	e047      	b.n	befa <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    be6a:	f06f 0309 	mvn.w	r3, #9
    be6e:	e061      	b.n	bf34 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    be70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    be72:	789b      	ldrb	r3, [r3, #2]
    be74:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    be78:	78db      	ldrb	r3, [r3, #3]
    be7a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    be7e:	3304      	adds	r3, #4
    be80:	4618      	mov	r0, r3
    be82:	4b2f      	ldr	r3, [pc, #188]	; (bf40 <cdcdf_acm_enable+0x15c>)
    be84:	4798      	blx	r3
    be86:	4603      	mov	r3, r0
    be88:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    be8a:	7ebb      	ldrb	r3, [r7, #26]
    be8c:	7ef9      	ldrb	r1, [r7, #27]
    be8e:	8bba      	ldrh	r2, [r7, #28]
    be90:	4618      	mov	r0, r3
    be92:	4b2c      	ldr	r3, [pc, #176]	; (bf44 <cdcdf_acm_enable+0x160>)
    be94:	4798      	blx	r3
    be96:	4603      	mov	r3, r0
    be98:	2b00      	cmp	r3, #0
    be9a:	d002      	beq.n	bea2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    be9c:	f06f 0313 	mvn.w	r3, #19
    bea0:	e048      	b.n	bf34 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bea2:	7ebb      	ldrb	r3, [r7, #26]
    bea4:	b25b      	sxtb	r3, r3
    bea6:	2b00      	cmp	r3, #0
    bea8:	da0f      	bge.n	beca <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    beaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    beae:	7eb9      	ldrb	r1, [r7, #26]
    beb0:	6a3a      	ldr	r2, [r7, #32]
    beb2:	4413      	add	r3, r2
    beb4:	460a      	mov	r2, r1
    beb6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    beb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bebc:	6a3a      	ldr	r2, [r7, #32]
    bebe:	4413      	add	r3, r2
    bec0:	789b      	ldrb	r3, [r3, #2]
    bec2:	4618      	mov	r0, r3
    bec4:	4b20      	ldr	r3, [pc, #128]	; (bf48 <cdcdf_acm_enable+0x164>)
    bec6:	4798      	blx	r3
    bec8:	e007      	b.n	beda <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    beca:	7eba      	ldrb	r2, [r7, #26]
    becc:	6a3b      	ldr	r3, [r7, #32]
    bece:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bed0:	6a3b      	ldr	r3, [r7, #32]
    bed2:	791b      	ldrb	r3, [r3, #4]
    bed4:	4618      	mov	r0, r3
    bed6:	4b1c      	ldr	r3, [pc, #112]	; (bf48 <cdcdf_acm_enable+0x164>)
    bed8:	4798      	blx	r3
			}
			desc->sod = ep;
    beda:	683b      	ldr	r3, [r7, #0]
    bedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bede:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bee0:	683b      	ldr	r3, [r7, #0]
    bee2:	681b      	ldr	r3, [r3, #0]
    bee4:	4618      	mov	r0, r3
    bee6:	4b19      	ldr	r3, [pc, #100]	; (bf4c <cdcdf_acm_enable+0x168>)
    bee8:	4798      	blx	r3
    beea:	4602      	mov	r2, r0
    beec:	683b      	ldr	r3, [r7, #0]
    beee:	685b      	ldr	r3, [r3, #4]
    bef0:	4619      	mov	r1, r3
    bef2:	4610      	mov	r0, r2
    bef4:	4b16      	ldr	r3, [pc, #88]	; (bf50 <cdcdf_acm_enable+0x16c>)
    bef6:	4798      	blx	r3
    bef8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    befc:	2b00      	cmp	r3, #0
    befe:	d1b7      	bne.n	be70 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bf00:	683b      	ldr	r3, [r7, #0]
    bf02:	681b      	ldr	r3, [r3, #0]
    bf04:	4618      	mov	r0, r3
    bf06:	4b11      	ldr	r3, [pc, #68]	; (bf4c <cdcdf_acm_enable+0x168>)
    bf08:	4798      	blx	r3
    bf0a:	683b      	ldr	r3, [r7, #0]
    bf0c:	685b      	ldr	r3, [r3, #4]
    bf0e:	2204      	movs	r2, #4
    bf10:	4619      	mov	r1, r3
    bf12:	4b0a      	ldr	r3, [pc, #40]	; (bf3c <cdcdf_acm_enable+0x158>)
    bf14:	4798      	blx	r3
    bf16:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bf18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf1c:	3301      	adds	r3, #1
    bf1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bf22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf26:	2b01      	cmp	r3, #1
    bf28:	f67f af6b 	bls.w	be02 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bf2c:	4b09      	ldr	r3, [pc, #36]	; (bf54 <cdcdf_acm_enable+0x170>)
    bf2e:	2201      	movs	r2, #1
    bf30:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bf32:	2300      	movs	r3, #0
}
    bf34:	4618      	mov	r0, r3
    bf36:	3730      	adds	r7, #48	; 0x30
    bf38:	46bd      	mov	sp, r7
    bf3a:	bd80      	pop	{r7, pc}
    bf3c:	0000d1a5 	.word	0x0000d1a5
    bf40:	0000bd7f 	.word	0x0000bd7f
    bf44:	00003475 	.word	0x00003475
    bf48:	00003561 	.word	0x00003561
    bf4c:	0000bdc1 	.word	0x0000bdc1
    bf50:	0000d201 	.word	0x0000d201
    bf54:	20001074 	.word	0x20001074

0000bf58 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bf58:	b580      	push	{r7, lr}
    bf5a:	b088      	sub	sp, #32
    bf5c:	af00      	add	r7, sp, #0
    bf5e:	6078      	str	r0, [r7, #4]
    bf60:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bf62:	687b      	ldr	r3, [r7, #4]
    bf64:	689b      	ldr	r3, [r3, #8]
    bf66:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bf68:	683b      	ldr	r3, [r7, #0]
    bf6a:	2b00      	cmp	r3, #0
    bf6c:	d00c      	beq.n	bf88 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bf6e:	683b      	ldr	r3, [r7, #0]
    bf70:	681b      	ldr	r3, [r3, #0]
    bf72:	795b      	ldrb	r3, [r3, #5]
    bf74:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bf76:	7c7b      	ldrb	r3, [r7, #17]
    bf78:	2b02      	cmp	r3, #2
    bf7a:	d005      	beq.n	bf88 <cdcdf_acm_disable+0x30>
    bf7c:	7c7b      	ldrb	r3, [r7, #17]
    bf7e:	2b0a      	cmp	r3, #10
    bf80:	d002      	beq.n	bf88 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bf82:	f06f 0309 	mvn.w	r3, #9
    bf86:	e035      	b.n	bff4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bf88:	2300      	movs	r3, #0
    bf8a:	77fb      	strb	r3, [r7, #31]
    bf8c:	e01f      	b.n	bfce <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bf8e:	7ffb      	ldrb	r3, [r7, #31]
    bf90:	69ba      	ldr	r2, [r7, #24]
    bf92:	5cd3      	ldrb	r3, [r2, r3]
    bf94:	2bff      	cmp	r3, #255	; 0xff
    bf96:	d016      	beq.n	bfc6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bf98:	7ffb      	ldrb	r3, [r7, #31]
    bf9a:	69ba      	ldr	r2, [r7, #24]
    bf9c:	21ff      	movs	r1, #255	; 0xff
    bf9e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bfa0:	7ffb      	ldrb	r3, [r7, #31]
    bfa2:	69ba      	ldr	r2, [r7, #24]
    bfa4:	4413      	add	r3, r2
    bfa6:	789b      	ldrb	r3, [r3, #2]
    bfa8:	2bff      	cmp	r3, #255	; 0xff
    bfaa:	d00d      	beq.n	bfc8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bfac:	7ffb      	ldrb	r3, [r7, #31]
    bfae:	69ba      	ldr	r2, [r7, #24]
    bfb0:	4413      	add	r3, r2
    bfb2:	789b      	ldrb	r3, [r3, #2]
    bfb4:	4618      	mov	r0, r3
    bfb6:	4b11      	ldr	r3, [pc, #68]	; (bffc <cdcdf_acm_disable+0xa4>)
    bfb8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bfba:	7ffb      	ldrb	r3, [r7, #31]
    bfbc:	69ba      	ldr	r2, [r7, #24]
    bfbe:	4413      	add	r3, r2
    bfc0:	22ff      	movs	r2, #255	; 0xff
    bfc2:	709a      	strb	r2, [r3, #2]
    bfc4:	e000      	b.n	bfc8 <cdcdf_acm_disable+0x70>
			continue;
    bfc6:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bfc8:	7ffb      	ldrb	r3, [r7, #31]
    bfca:	3301      	adds	r3, #1
    bfcc:	77fb      	strb	r3, [r7, #31]
    bfce:	7ffb      	ldrb	r3, [r7, #31]
    bfd0:	2b01      	cmp	r3, #1
    bfd2:	d9dc      	bls.n	bf8e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bfd4:	69bb      	ldr	r3, [r7, #24]
    bfd6:	791b      	ldrb	r3, [r3, #4]
    bfd8:	2bff      	cmp	r3, #255	; 0xff
    bfda:	d007      	beq.n	bfec <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bfdc:	69bb      	ldr	r3, [r7, #24]
    bfde:	791b      	ldrb	r3, [r3, #4]
    bfe0:	4618      	mov	r0, r3
    bfe2:	4b06      	ldr	r3, [pc, #24]	; (bffc <cdcdf_acm_disable+0xa4>)
    bfe4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bfe6:	69bb      	ldr	r3, [r7, #24]
    bfe8:	22ff      	movs	r2, #255	; 0xff
    bfea:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bfec:	4b04      	ldr	r3, [pc, #16]	; (c000 <cdcdf_acm_disable+0xa8>)
    bfee:	2200      	movs	r2, #0
    bff0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bff2:	2300      	movs	r3, #0
}
    bff4:	4618      	mov	r0, r3
    bff6:	3720      	adds	r7, #32
    bff8:	46bd      	mov	sp, r7
    bffa:	bd80      	pop	{r7, pc}
    bffc:	00003511 	.word	0x00003511
    c000:	20001074 	.word	0x20001074

0000c004 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c004:	b580      	push	{r7, lr}
    c006:	b084      	sub	sp, #16
    c008:	af00      	add	r7, sp, #0
    c00a:	60f8      	str	r0, [r7, #12]
    c00c:	460b      	mov	r3, r1
    c00e:	607a      	str	r2, [r7, #4]
    c010:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c012:	7afb      	ldrb	r3, [r7, #11]
    c014:	2b01      	cmp	r3, #1
    c016:	d009      	beq.n	c02c <cdcdf_acm_ctrl+0x28>
    c018:	2b02      	cmp	r3, #2
    c01a:	d00d      	beq.n	c038 <cdcdf_acm_ctrl+0x34>
    c01c:	2b00      	cmp	r3, #0
    c01e:	d10e      	bne.n	c03e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c020:	6879      	ldr	r1, [r7, #4]
    c022:	68f8      	ldr	r0, [r7, #12]
    c024:	4b09      	ldr	r3, [pc, #36]	; (c04c <cdcdf_acm_ctrl+0x48>)
    c026:	4798      	blx	r3
    c028:	4603      	mov	r3, r0
    c02a:	e00a      	b.n	c042 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c02c:	6879      	ldr	r1, [r7, #4]
    c02e:	68f8      	ldr	r0, [r7, #12]
    c030:	4b07      	ldr	r3, [pc, #28]	; (c050 <cdcdf_acm_ctrl+0x4c>)
    c032:	4798      	blx	r3
    c034:	4603      	mov	r3, r0
    c036:	e004      	b.n	c042 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c038:	f06f 031a 	mvn.w	r3, #26
    c03c:	e001      	b.n	c042 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c03e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c042:	4618      	mov	r0, r3
    c044:	3710      	adds	r7, #16
    c046:	46bd      	mov	sp, r7
    c048:	bd80      	pop	{r7, pc}
    c04a:	bf00      	nop
    c04c:	0000bde5 	.word	0x0000bde5
    c050:	0000bf59 	.word	0x0000bf59

0000c054 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c054:	b590      	push	{r4, r7, lr}
    c056:	b087      	sub	sp, #28
    c058:	af00      	add	r7, sp, #0
    c05a:	4603      	mov	r3, r0
    c05c:	6039      	str	r1, [r7, #0]
    c05e:	71fb      	strb	r3, [r7, #7]
    c060:	4613      	mov	r3, r2
    c062:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c064:	683b      	ldr	r3, [r7, #0]
    c066:	799a      	ldrb	r2, [r3, #6]
    c068:	79db      	ldrb	r3, [r3, #7]
    c06a:	021b      	lsls	r3, r3, #8
    c06c:	4313      	orrs	r3, r2
    c06e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c070:	4b2b      	ldr	r3, [pc, #172]	; (c120 <cdcdf_acm_set_req+0xcc>)
    c072:	4798      	blx	r3
    c074:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c076:	683b      	ldr	r3, [r7, #0]
    c078:	785b      	ldrb	r3, [r3, #1]
    c07a:	2b20      	cmp	r3, #32
    c07c:	d002      	beq.n	c084 <cdcdf_acm_set_req+0x30>
    c07e:	2b22      	cmp	r3, #34	; 0x22
    c080:	d034      	beq.n	c0ec <cdcdf_acm_set_req+0x98>
    c082:	e046      	b.n	c112 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c084:	8afb      	ldrh	r3, [r7, #22]
    c086:	2b07      	cmp	r3, #7
    c088:	d002      	beq.n	c090 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c08a:	f04f 33ff 	mov.w	r3, #4294967295
    c08e:	e042      	b.n	c116 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c090:	79bb      	ldrb	r3, [r7, #6]
    c092:	2b00      	cmp	r3, #0
    c094:	d107      	bne.n	c0a6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c096:	8afa      	ldrh	r2, [r7, #22]
    c098:	79f8      	ldrb	r0, [r7, #7]
    c09a:	2300      	movs	r3, #0
    c09c:	6939      	ldr	r1, [r7, #16]
    c09e:	4c21      	ldr	r4, [pc, #132]	; (c124 <cdcdf_acm_set_req+0xd0>)
    c0a0:	47a0      	blx	r4
    c0a2:	4603      	mov	r3, r0
    c0a4:	e037      	b.n	c116 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c0a6:	693a      	ldr	r2, [r7, #16]
    c0a8:	f107 0308 	add.w	r3, r7, #8
    c0ac:	6810      	ldr	r0, [r2, #0]
    c0ae:	6018      	str	r0, [r3, #0]
    c0b0:	8891      	ldrh	r1, [r2, #4]
    c0b2:	7992      	ldrb	r2, [r2, #6]
    c0b4:	8099      	strh	r1, [r3, #4]
    c0b6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c0b8:	4b1b      	ldr	r3, [pc, #108]	; (c128 <cdcdf_acm_set_req+0xd4>)
    c0ba:	681b      	ldr	r3, [r3, #0]
    c0bc:	2b00      	cmp	r3, #0
    c0be:	d008      	beq.n	c0d2 <cdcdf_acm_set_req+0x7e>
    c0c0:	4b19      	ldr	r3, [pc, #100]	; (c128 <cdcdf_acm_set_req+0xd4>)
    c0c2:	681b      	ldr	r3, [r3, #0]
    c0c4:	f107 0208 	add.w	r2, r7, #8
    c0c8:	4610      	mov	r0, r2
    c0ca:	4798      	blx	r3
    c0cc:	4603      	mov	r3, r0
    c0ce:	2b00      	cmp	r3, #0
    c0d0:	d00a      	beq.n	c0e8 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c0d2:	4b16      	ldr	r3, [pc, #88]	; (c12c <cdcdf_acm_set_req+0xd8>)
    c0d4:	f107 0208 	add.w	r2, r7, #8
    c0d8:	e892 0003 	ldmia.w	r2, {r0, r1}
    c0dc:	6018      	str	r0, [r3, #0]
    c0de:	3304      	adds	r3, #4
    c0e0:	8019      	strh	r1, [r3, #0]
    c0e2:	3302      	adds	r3, #2
    c0e4:	0c0a      	lsrs	r2, r1, #16
    c0e6:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c0e8:	2300      	movs	r3, #0
    c0ea:	e014      	b.n	c116 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c0ec:	2300      	movs	r3, #0
    c0ee:	2200      	movs	r2, #0
    c0f0:	2100      	movs	r1, #0
    c0f2:	2000      	movs	r0, #0
    c0f4:	4c0b      	ldr	r4, [pc, #44]	; (c124 <cdcdf_acm_set_req+0xd0>)
    c0f6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c0f8:	4b0d      	ldr	r3, [pc, #52]	; (c130 <cdcdf_acm_set_req+0xdc>)
    c0fa:	681b      	ldr	r3, [r3, #0]
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	d006      	beq.n	c10e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c100:	4b0b      	ldr	r3, [pc, #44]	; (c130 <cdcdf_acm_set_req+0xdc>)
    c102:	681b      	ldr	r3, [r3, #0]
    c104:	683a      	ldr	r2, [r7, #0]
    c106:	8852      	ldrh	r2, [r2, #2]
    c108:	b292      	uxth	r2, r2
    c10a:	4610      	mov	r0, r2
    c10c:	4798      	blx	r3
		}
		return ERR_NONE;
    c10e:	2300      	movs	r3, #0
    c110:	e001      	b.n	c116 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c112:	f06f 030c 	mvn.w	r3, #12
	}
}
    c116:	4618      	mov	r0, r3
    c118:	371c      	adds	r7, #28
    c11a:	46bd      	mov	sp, r7
    c11c:	bd90      	pop	{r4, r7, pc}
    c11e:	bf00      	nop
    c120:	0000d0a1 	.word	0x0000d0a1
    c124:	0000cf15 	.word	0x0000cf15
    c128:	20001088 	.word	0x20001088
    c12c:	2000107c 	.word	0x2000107c
    c130:	20001084 	.word	0x20001084

0000c134 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c134:	b590      	push	{r4, r7, lr}
    c136:	b085      	sub	sp, #20
    c138:	af00      	add	r7, sp, #0
    c13a:	4603      	mov	r3, r0
    c13c:	6039      	str	r1, [r7, #0]
    c13e:	71fb      	strb	r3, [r7, #7]
    c140:	4613      	mov	r3, r2
    c142:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c144:	683b      	ldr	r3, [r7, #0]
    c146:	799a      	ldrb	r2, [r3, #6]
    c148:	79db      	ldrb	r3, [r3, #7]
    c14a:	021b      	lsls	r3, r3, #8
    c14c:	4313      	orrs	r3, r2
    c14e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c150:	79bb      	ldrb	r3, [r7, #6]
    c152:	2b01      	cmp	r3, #1
    c154:	d101      	bne.n	c15a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c156:	2300      	movs	r3, #0
    c158:	e013      	b.n	c182 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c15a:	683b      	ldr	r3, [r7, #0]
    c15c:	785b      	ldrb	r3, [r3, #1]
    c15e:	2b21      	cmp	r3, #33	; 0x21
    c160:	d10d      	bne.n	c17e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c162:	89fb      	ldrh	r3, [r7, #14]
    c164:	2b07      	cmp	r3, #7
    c166:	d002      	beq.n	c16e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c168:	f04f 33ff 	mov.w	r3, #4294967295
    c16c:	e009      	b.n	c182 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c16e:	89fa      	ldrh	r2, [r7, #14]
    c170:	79f8      	ldrb	r0, [r7, #7]
    c172:	2300      	movs	r3, #0
    c174:	4905      	ldr	r1, [pc, #20]	; (c18c <cdcdf_acm_get_req+0x58>)
    c176:	4c06      	ldr	r4, [pc, #24]	; (c190 <cdcdf_acm_get_req+0x5c>)
    c178:	47a0      	blx	r4
    c17a:	4603      	mov	r3, r0
    c17c:	e001      	b.n	c182 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c17e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c182:	4618      	mov	r0, r3
    c184:	3714      	adds	r7, #20
    c186:	46bd      	mov	sp, r7
    c188:	bd90      	pop	{r4, r7, pc}
    c18a:	bf00      	nop
    c18c:	2000107c 	.word	0x2000107c
    c190:	0000cf15 	.word	0x0000cf15

0000c194 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c194:	b580      	push	{r7, lr}
    c196:	b082      	sub	sp, #8
    c198:	af00      	add	r7, sp, #0
    c19a:	4603      	mov	r3, r0
    c19c:	6039      	str	r1, [r7, #0]
    c19e:	71fb      	strb	r3, [r7, #7]
    c1a0:	4613      	mov	r3, r2
    c1a2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c1a4:	683b      	ldr	r3, [r7, #0]
    c1a6:	781b      	ldrb	r3, [r3, #0]
    c1a8:	095b      	lsrs	r3, r3, #5
    c1aa:	b2db      	uxtb	r3, r3
    c1ac:	f003 0303 	and.w	r3, r3, #3
    c1b0:	2b01      	cmp	r3, #1
    c1b2:	d002      	beq.n	c1ba <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c1b4:	f06f 0309 	mvn.w	r3, #9
    c1b8:	e026      	b.n	c208 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c1ba:	683b      	ldr	r3, [r7, #0]
    c1bc:	889b      	ldrh	r3, [r3, #4]
    c1be:	b29a      	uxth	r2, r3
    c1c0:	4b13      	ldr	r3, [pc, #76]	; (c210 <cdcdf_acm_req+0x7c>)
    c1c2:	781b      	ldrb	r3, [r3, #0]
    c1c4:	b29b      	uxth	r3, r3
    c1c6:	429a      	cmp	r2, r3
    c1c8:	d007      	beq.n	c1da <cdcdf_acm_req+0x46>
    c1ca:	683b      	ldr	r3, [r7, #0]
    c1cc:	889b      	ldrh	r3, [r3, #4]
    c1ce:	b29a      	uxth	r2, r3
    c1d0:	4b0f      	ldr	r3, [pc, #60]	; (c210 <cdcdf_acm_req+0x7c>)
    c1d2:	785b      	ldrb	r3, [r3, #1]
    c1d4:	b29b      	uxth	r3, r3
    c1d6:	429a      	cmp	r2, r3
    c1d8:	d114      	bne.n	c204 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c1da:	683b      	ldr	r3, [r7, #0]
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	b25b      	sxtb	r3, r3
    c1e0:	2b00      	cmp	r3, #0
    c1e2:	da07      	bge.n	c1f4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c1e4:	79ba      	ldrb	r2, [r7, #6]
    c1e6:	79fb      	ldrb	r3, [r7, #7]
    c1e8:	6839      	ldr	r1, [r7, #0]
    c1ea:	4618      	mov	r0, r3
    c1ec:	4b09      	ldr	r3, [pc, #36]	; (c214 <cdcdf_acm_req+0x80>)
    c1ee:	4798      	blx	r3
    c1f0:	4603      	mov	r3, r0
    c1f2:	e009      	b.n	c208 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c1f4:	79ba      	ldrb	r2, [r7, #6]
    c1f6:	79fb      	ldrb	r3, [r7, #7]
    c1f8:	6839      	ldr	r1, [r7, #0]
    c1fa:	4618      	mov	r0, r3
    c1fc:	4b06      	ldr	r3, [pc, #24]	; (c218 <cdcdf_acm_req+0x84>)
    c1fe:	4798      	blx	r3
    c200:	4603      	mov	r3, r0
    c202:	e001      	b.n	c208 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c204:	f06f 0309 	mvn.w	r3, #9
	}
}
    c208:	4618      	mov	r0, r3
    c20a:	3708      	adds	r7, #8
    c20c:	46bd      	mov	sp, r7
    c20e:	bd80      	pop	{r7, pc}
    c210:	20001074 	.word	0x20001074
    c214:	0000c135 	.word	0x0000c135
    c218:	0000c055 	.word	0x0000c055

0000c21c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c21c:	b580      	push	{r7, lr}
    c21e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c220:	4b0b      	ldr	r3, [pc, #44]	; (c250 <cdcdf_acm_init+0x34>)
    c222:	4798      	blx	r3
    c224:	4603      	mov	r3, r0
    c226:	2b01      	cmp	r3, #1
    c228:	d902      	bls.n	c230 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c22a:	f06f 0310 	mvn.w	r3, #16
    c22e:	e00d      	b.n	c24c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c230:	4b08      	ldr	r3, [pc, #32]	; (c254 <cdcdf_acm_init+0x38>)
    c232:	4a09      	ldr	r2, [pc, #36]	; (c258 <cdcdf_acm_init+0x3c>)
    c234:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c236:	4b07      	ldr	r3, [pc, #28]	; (c254 <cdcdf_acm_init+0x38>)
    c238:	4a08      	ldr	r2, [pc, #32]	; (c25c <cdcdf_acm_init+0x40>)
    c23a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c23c:	4805      	ldr	r0, [pc, #20]	; (c254 <cdcdf_acm_init+0x38>)
    c23e:	4b08      	ldr	r3, [pc, #32]	; (c260 <cdcdf_acm_init+0x44>)
    c240:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c242:	4908      	ldr	r1, [pc, #32]	; (c264 <cdcdf_acm_init+0x48>)
    c244:	2001      	movs	r0, #1
    c246:	4b08      	ldr	r3, [pc, #32]	; (c268 <cdcdf_acm_init+0x4c>)
    c248:	4798      	blx	r3
	return ERR_NONE;
    c24a:	2300      	movs	r3, #0
}
    c24c:	4618      	mov	r0, r3
    c24e:	bd80      	pop	{r7, pc}
    c250:	0000d0b9 	.word	0x0000d0b9
    c254:	20001068 	.word	0x20001068
    c258:	0000c005 	.word	0x0000c005
    c25c:	20001074 	.word	0x20001074
    c260:	0000d021 	.word	0x0000d021
    c264:	20000208 	.word	0x20000208
    c268:	0000cf51 	.word	0x0000cf51

0000c26c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c26c:	b590      	push	{r4, r7, lr}
    c26e:	b083      	sub	sp, #12
    c270:	af00      	add	r7, sp, #0
    c272:	6078      	str	r0, [r7, #4]
    c274:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c276:	4b0b      	ldr	r3, [pc, #44]	; (c2a4 <cdcdf_acm_read+0x38>)
    c278:	4798      	blx	r3
    c27a:	4603      	mov	r3, r0
    c27c:	f083 0301 	eor.w	r3, r3, #1
    c280:	b2db      	uxtb	r3, r3
    c282:	2b00      	cmp	r3, #0
    c284:	d002      	beq.n	c28c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c286:	f06f 0310 	mvn.w	r3, #16
    c28a:	e007      	b.n	c29c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c28c:	4b06      	ldr	r3, [pc, #24]	; (c2a8 <cdcdf_acm_read+0x3c>)
    c28e:	7918      	ldrb	r0, [r3, #4]
    c290:	2300      	movs	r3, #0
    c292:	683a      	ldr	r2, [r7, #0]
    c294:	6879      	ldr	r1, [r7, #4]
    c296:	4c05      	ldr	r4, [pc, #20]	; (c2ac <cdcdf_acm_read+0x40>)
    c298:	47a0      	blx	r4
    c29a:	4603      	mov	r3, r0
}
    c29c:	4618      	mov	r0, r3
    c29e:	370c      	adds	r7, #12
    c2a0:	46bd      	mov	sp, r7
    c2a2:	bd90      	pop	{r4, r7, pc}
    c2a4:	0000c391 	.word	0x0000c391
    c2a8:	20001074 	.word	0x20001074
    c2ac:	0000cf15 	.word	0x0000cf15

0000c2b0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c2b0:	b590      	push	{r4, r7, lr}
    c2b2:	b083      	sub	sp, #12
    c2b4:	af00      	add	r7, sp, #0
    c2b6:	6078      	str	r0, [r7, #4]
    c2b8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c2ba:	4b0b      	ldr	r3, [pc, #44]	; (c2e8 <cdcdf_acm_write+0x38>)
    c2bc:	4798      	blx	r3
    c2be:	4603      	mov	r3, r0
    c2c0:	f083 0301 	eor.w	r3, r3, #1
    c2c4:	b2db      	uxtb	r3, r3
    c2c6:	2b00      	cmp	r3, #0
    c2c8:	d002      	beq.n	c2d0 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c2ca:	f06f 0310 	mvn.w	r3, #16
    c2ce:	e007      	b.n	c2e0 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c2d0:	4b06      	ldr	r3, [pc, #24]	; (c2ec <cdcdf_acm_write+0x3c>)
    c2d2:	78d8      	ldrb	r0, [r3, #3]
    c2d4:	2301      	movs	r3, #1
    c2d6:	683a      	ldr	r2, [r7, #0]
    c2d8:	6879      	ldr	r1, [r7, #4]
    c2da:	4c05      	ldr	r4, [pc, #20]	; (c2f0 <cdcdf_acm_write+0x40>)
    c2dc:	47a0      	blx	r4
    c2de:	4603      	mov	r3, r0
}
    c2e0:	4618      	mov	r0, r3
    c2e2:	370c      	adds	r7, #12
    c2e4:	46bd      	mov	sp, r7
    c2e6:	bd90      	pop	{r4, r7, pc}
    c2e8:	0000c391 	.word	0x0000c391
    c2ec:	20001074 	.word	0x20001074
    c2f0:	0000cf15 	.word	0x0000cf15

0000c2f4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c2f4:	b580      	push	{r7, lr}
    c2f6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c2f8:	4b05      	ldr	r3, [pc, #20]	; (c310 <cdcdf_acm_stop_xfer+0x1c>)
    c2fa:	78db      	ldrb	r3, [r3, #3]
    c2fc:	4618      	mov	r0, r3
    c2fe:	4b05      	ldr	r3, [pc, #20]	; (c314 <cdcdf_acm_stop_xfer+0x20>)
    c300:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c302:	4b03      	ldr	r3, [pc, #12]	; (c310 <cdcdf_acm_stop_xfer+0x1c>)
    c304:	791b      	ldrb	r3, [r3, #4]
    c306:	4618      	mov	r0, r3
    c308:	4b02      	ldr	r3, [pc, #8]	; (c314 <cdcdf_acm_stop_xfer+0x20>)
    c30a:	4798      	blx	r3
}
    c30c:	bf00      	nop
    c30e:	bd80      	pop	{r7, pc}
    c310:	20001074 	.word	0x20001074
    c314:	00003739 	.word	0x00003739

0000c318 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c318:	b580      	push	{r7, lr}
    c31a:	b082      	sub	sp, #8
    c31c:	af00      	add	r7, sp, #0
    c31e:	4603      	mov	r3, r0
    c320:	6039      	str	r1, [r7, #0]
    c322:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c324:	79fb      	ldrb	r3, [r7, #7]
    c326:	2b03      	cmp	r3, #3
    c328:	d822      	bhi.n	c370 <cdcdf_acm_register_callback+0x58>
    c32a:	a201      	add	r2, pc, #4	; (adr r2, c330 <cdcdf_acm_register_callback+0x18>)
    c32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c330:	0000c341 	.word	0x0000c341
    c334:	0000c351 	.word	0x0000c351
    c338:	0000c361 	.word	0x0000c361
    c33c:	0000c369 	.word	0x0000c369
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c340:	4b0f      	ldr	r3, [pc, #60]	; (c380 <cdcdf_acm_register_callback+0x68>)
    c342:	791b      	ldrb	r3, [r3, #4]
    c344:	683a      	ldr	r2, [r7, #0]
    c346:	2102      	movs	r1, #2
    c348:	4618      	mov	r0, r3
    c34a:	4b0e      	ldr	r3, [pc, #56]	; (c384 <cdcdf_acm_register_callback+0x6c>)
    c34c:	4798      	blx	r3
		break;
    c34e:	e012      	b.n	c376 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c350:	4b0b      	ldr	r3, [pc, #44]	; (c380 <cdcdf_acm_register_callback+0x68>)
    c352:	78db      	ldrb	r3, [r3, #3]
    c354:	683a      	ldr	r2, [r7, #0]
    c356:	2102      	movs	r1, #2
    c358:	4618      	mov	r0, r3
    c35a:	4b0a      	ldr	r3, [pc, #40]	; (c384 <cdcdf_acm_register_callback+0x6c>)
    c35c:	4798      	blx	r3
		break;
    c35e:	e00a      	b.n	c376 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c360:	4a09      	ldr	r2, [pc, #36]	; (c388 <cdcdf_acm_register_callback+0x70>)
    c362:	683b      	ldr	r3, [r7, #0]
    c364:	6013      	str	r3, [r2, #0]
		break;
    c366:	e006      	b.n	c376 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c368:	4a08      	ldr	r2, [pc, #32]	; (c38c <cdcdf_acm_register_callback+0x74>)
    c36a:	683b      	ldr	r3, [r7, #0]
    c36c:	6013      	str	r3, [r2, #0]
		break;
    c36e:	e002      	b.n	c376 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c370:	f06f 030c 	mvn.w	r3, #12
    c374:	e000      	b.n	c378 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c376:	2300      	movs	r3, #0
}
    c378:	4618      	mov	r0, r3
    c37a:	3708      	adds	r7, #8
    c37c:	46bd      	mov	sp, r7
    c37e:	bd80      	pop	{r7, pc}
    c380:	20001074 	.word	0x20001074
    c384:	00003865 	.word	0x00003865
    c388:	20001088 	.word	0x20001088
    c38c:	20001084 	.word	0x20001084

0000c390 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c390:	b480      	push	{r7}
    c392:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c394:	4b03      	ldr	r3, [pc, #12]	; (c3a4 <cdcdf_acm_is_enabled+0x14>)
    c396:	795b      	ldrb	r3, [r3, #5]
}
    c398:	4618      	mov	r0, r3
    c39a:	46bd      	mov	sp, r7
    c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3a0:	4770      	bx	lr
    c3a2:	bf00      	nop
    c3a4:	20001074 	.word	0x20001074

0000c3a8 <usb_get_u16>:
{
    c3a8:	b480      	push	{r7}
    c3aa:	b083      	sub	sp, #12
    c3ac:	af00      	add	r7, sp, #0
    c3ae:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c3b0:	687b      	ldr	r3, [r7, #4]
    c3b2:	781b      	ldrb	r3, [r3, #0]
    c3b4:	b29a      	uxth	r2, r3
    c3b6:	687b      	ldr	r3, [r7, #4]
    c3b8:	3301      	adds	r3, #1
    c3ba:	781b      	ldrb	r3, [r3, #0]
    c3bc:	b29b      	uxth	r3, r3
    c3be:	021b      	lsls	r3, r3, #8
    c3c0:	b29b      	uxth	r3, r3
    c3c2:	4413      	add	r3, r2
    c3c4:	b29b      	uxth	r3, r3
}
    c3c6:	4618      	mov	r0, r3
    c3c8:	370c      	adds	r7, #12
    c3ca:	46bd      	mov	sp, r7
    c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3d0:	4770      	bx	lr

0000c3d2 <usb_desc_len>:
{
    c3d2:	b480      	push	{r7}
    c3d4:	b083      	sub	sp, #12
    c3d6:	af00      	add	r7, sp, #0
    c3d8:	6078      	str	r0, [r7, #4]
	return desc[0];
    c3da:	687b      	ldr	r3, [r7, #4]
    c3dc:	781b      	ldrb	r3, [r3, #0]
}
    c3de:	4618      	mov	r0, r3
    c3e0:	370c      	adds	r7, #12
    c3e2:	46bd      	mov	sp, r7
    c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3e8:	4770      	bx	lr
	...

0000c3ec <usb_desc_next>:
{
    c3ec:	b580      	push	{r7, lr}
    c3ee:	b082      	sub	sp, #8
    c3f0:	af00      	add	r7, sp, #0
    c3f2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c3f4:	6878      	ldr	r0, [r7, #4]
    c3f6:	4b05      	ldr	r3, [pc, #20]	; (c40c <usb_desc_next+0x20>)
    c3f8:	4798      	blx	r3
    c3fa:	4603      	mov	r3, r0
    c3fc:	461a      	mov	r2, r3
    c3fe:	687b      	ldr	r3, [r7, #4]
    c400:	4413      	add	r3, r2
}
    c402:	4618      	mov	r0, r3
    c404:	3708      	adds	r7, #8
    c406:	46bd      	mov	sp, r7
    c408:	bd80      	pop	{r7, pc}
    c40a:	bf00      	nop
    c40c:	0000c3d3 	.word	0x0000c3d3

0000c410 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c410:	b580      	push	{r7, lr}
    c412:	b082      	sub	sp, #8
    c414:	af00      	add	r7, sp, #0
    c416:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c418:	687b      	ldr	r3, [r7, #4]
    c41a:	3302      	adds	r3, #2
    c41c:	4618      	mov	r0, r3
    c41e:	4b03      	ldr	r3, [pc, #12]	; (c42c <usb_cfg_desc_total_len+0x1c>)
    c420:	4798      	blx	r3
    c422:	4603      	mov	r3, r0
}
    c424:	4618      	mov	r0, r3
    c426:	3708      	adds	r7, #8
    c428:	46bd      	mov	sp, r7
    c42a:	bd80      	pop	{r7, pc}
    c42c:	0000c3a9 	.word	0x0000c3a9

0000c430 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c430:	b590      	push	{r4, r7, lr}
    c432:	b085      	sub	sp, #20
    c434:	af00      	add	r7, sp, #0
    c436:	4603      	mov	r3, r0
    c438:	6039      	str	r1, [r7, #0]
    c43a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c43c:	2300      	movs	r3, #0
    c43e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c440:	683b      	ldr	r3, [r7, #0]
    c442:	799a      	ldrb	r2, [r3, #6]
    c444:	79db      	ldrb	r3, [r3, #7]
    c446:	021b      	lsls	r3, r3, #8
    c448:	4313      	orrs	r3, r2
    c44a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c44c:	897b      	ldrh	r3, [r7, #10]
    c44e:	2b12      	cmp	r3, #18
    c450:	d901      	bls.n	c456 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c452:	2312      	movs	r3, #18
    c454:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c456:	68fb      	ldr	r3, [r7, #12]
    c458:	2b00      	cmp	r3, #0
    c45a:	d10a      	bne.n	c472 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c45c:	4b0f      	ldr	r3, [pc, #60]	; (c49c <usbdc_get_dev_desc+0x6c>)
    c45e:	681b      	ldr	r3, [r3, #0]
    c460:	6818      	ldr	r0, [r3, #0]
    c462:	4b0e      	ldr	r3, [pc, #56]	; (c49c <usbdc_get_dev_desc+0x6c>)
    c464:	681b      	ldr	r3, [r3, #0]
    c466:	685b      	ldr	r3, [r3, #4]
    c468:	2201      	movs	r2, #1
    c46a:	4619      	mov	r1, r3
    c46c:	4b0c      	ldr	r3, [pc, #48]	; (c4a0 <usbdc_get_dev_desc+0x70>)
    c46e:	4798      	blx	r3
    c470:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c472:	68fb      	ldr	r3, [r7, #12]
    c474:	2b00      	cmp	r3, #0
    c476:	d101      	bne.n	c47c <usbdc_get_dev_desc+0x4c>
		return false;
    c478:	2300      	movs	r3, #0
    c47a:	e00b      	b.n	c494 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c47c:	897a      	ldrh	r2, [r7, #10]
    c47e:	79f8      	ldrb	r0, [r7, #7]
    c480:	2300      	movs	r3, #0
    c482:	68f9      	ldr	r1, [r7, #12]
    c484:	4c07      	ldr	r4, [pc, #28]	; (c4a4 <usbdc_get_dev_desc+0x74>)
    c486:	47a0      	blx	r4
    c488:	4603      	mov	r3, r0
    c48a:	2b00      	cmp	r3, #0
    c48c:	d001      	beq.n	c492 <usbdc_get_dev_desc+0x62>
		return false;
    c48e:	2300      	movs	r3, #0
    c490:	e000      	b.n	c494 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c492:	2301      	movs	r3, #1
}
    c494:	4618      	mov	r0, r3
    c496:	3714      	adds	r7, #20
    c498:	46bd      	mov	sp, r7
    c49a:	bd90      	pop	{r4, r7, pc}
    c49c:	2000108c 	.word	0x2000108c
    c4a0:	0000d1a5 	.word	0x0000d1a5
    c4a4:	0000cf15 	.word	0x0000cf15

0000c4a8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c4a8:	b590      	push	{r4, r7, lr}
    c4aa:	b087      	sub	sp, #28
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	4603      	mov	r3, r0
    c4b0:	6039      	str	r1, [r7, #0]
    c4b2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c4b4:	2300      	movs	r3, #0
    c4b6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c4b8:	683b      	ldr	r3, [r7, #0]
    c4ba:	799a      	ldrb	r2, [r3, #6]
    c4bc:	79db      	ldrb	r3, [r3, #7]
    c4be:	021b      	lsls	r3, r3, #8
    c4c0:	4313      	orrs	r3, r2
    c4c2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c4c4:	683b      	ldr	r3, [r7, #0]
    c4c6:	885b      	ldrh	r3, [r3, #2]
    c4c8:	b29b      	uxth	r3, r3
    c4ca:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c4cc:	8a7a      	ldrh	r2, [r7, #18]
    c4ce:	4b1e      	ldr	r3, [pc, #120]	; (c548 <usbdc_get_cfg_desc+0xa0>)
    c4d0:	7f1b      	ldrb	r3, [r3, #28]
    c4d2:	3b01      	subs	r3, #1
    c4d4:	4013      	ands	r3, r2
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	bf0c      	ite	eq
    c4da:	2301      	moveq	r3, #1
    c4dc:	2300      	movne	r3, #0
    c4de:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c4e0:	697b      	ldr	r3, [r7, #20]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d10c      	bne.n	c500 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c4e6:	4b18      	ldr	r3, [pc, #96]	; (c548 <usbdc_get_cfg_desc+0xa0>)
    c4e8:	681b      	ldr	r3, [r3, #0]
    c4ea:	6818      	ldr	r0, [r3, #0]
    c4ec:	4b16      	ldr	r3, [pc, #88]	; (c548 <usbdc_get_cfg_desc+0xa0>)
    c4ee:	681b      	ldr	r3, [r3, #0]
    c4f0:	6859      	ldr	r1, [r3, #4]
    c4f2:	7c3b      	ldrb	r3, [r7, #16]
    c4f4:	3301      	adds	r3, #1
    c4f6:	b2db      	uxtb	r3, r3
    c4f8:	461a      	mov	r2, r3
    c4fa:	4b14      	ldr	r3, [pc, #80]	; (c54c <usbdc_get_cfg_desc+0xa4>)
    c4fc:	4798      	blx	r3
    c4fe:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c500:	697b      	ldr	r3, [r7, #20]
    c502:	2b00      	cmp	r3, #0
    c504:	d101      	bne.n	c50a <usbdc_get_cfg_desc+0x62>
		return false;
    c506:	2300      	movs	r3, #0
    c508:	e019      	b.n	c53e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c50a:	6978      	ldr	r0, [r7, #20]
    c50c:	4b10      	ldr	r3, [pc, #64]	; (c550 <usbdc_get_cfg_desc+0xa8>)
    c50e:	4798      	blx	r3
    c510:	4603      	mov	r3, r0
    c512:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c514:	8a7a      	ldrh	r2, [r7, #18]
    c516:	89fb      	ldrh	r3, [r7, #14]
    c518:	429a      	cmp	r2, r3
    c51a:	d802      	bhi.n	c522 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c51c:	2300      	movs	r3, #0
    c51e:	747b      	strb	r3, [r7, #17]
    c520:	e001      	b.n	c526 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c522:	89fb      	ldrh	r3, [r7, #14]
    c524:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c526:	8a7a      	ldrh	r2, [r7, #18]
    c528:	7c7b      	ldrb	r3, [r7, #17]
    c52a:	79f8      	ldrb	r0, [r7, #7]
    c52c:	6979      	ldr	r1, [r7, #20]
    c52e:	4c09      	ldr	r4, [pc, #36]	; (c554 <usbdc_get_cfg_desc+0xac>)
    c530:	47a0      	blx	r4
    c532:	4603      	mov	r3, r0
    c534:	2b00      	cmp	r3, #0
    c536:	d001      	beq.n	c53c <usbdc_get_cfg_desc+0x94>
		return false;
    c538:	2300      	movs	r3, #0
    c53a:	e000      	b.n	c53e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c53c:	2301      	movs	r3, #1
}
    c53e:	4618      	mov	r0, r3
    c540:	371c      	adds	r7, #28
    c542:	46bd      	mov	sp, r7
    c544:	bd90      	pop	{r4, r7, pc}
    c546:	bf00      	nop
    c548:	2000108c 	.word	0x2000108c
    c54c:	0000d265 	.word	0x0000d265
    c550:	0000c411 	.word	0x0000c411
    c554:	0000cf15 	.word	0x0000cf15

0000c558 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c558:	b590      	push	{r4, r7, lr}
    c55a:	b085      	sub	sp, #20
    c55c:	af00      	add	r7, sp, #0
    c55e:	4603      	mov	r3, r0
    c560:	6039      	str	r1, [r7, #0]
    c562:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c564:	683b      	ldr	r3, [r7, #0]
    c566:	799a      	ldrb	r2, [r3, #6]
    c568:	79db      	ldrb	r3, [r3, #7]
    c56a:	021b      	lsls	r3, r3, #8
    c56c:	4313      	orrs	r3, r2
    c56e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c570:	683b      	ldr	r3, [r7, #0]
    c572:	885b      	ldrh	r3, [r3, #2]
    c574:	b29b      	uxth	r3, r3
    c576:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c578:	89fa      	ldrh	r2, [r7, #14]
    c57a:	4b1a      	ldr	r3, [pc, #104]	; (c5e4 <usbdc_get_str_desc+0x8c>)
    c57c:	7f1b      	ldrb	r3, [r3, #28]
    c57e:	3b01      	subs	r3, #1
    c580:	4013      	ands	r3, r2
    c582:	2b00      	cmp	r3, #0
    c584:	bf0c      	ite	eq
    c586:	2301      	moveq	r3, #1
    c588:	2300      	movne	r3, #0
    c58a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c58c:	4b15      	ldr	r3, [pc, #84]	; (c5e4 <usbdc_get_str_desc+0x8c>)
    c58e:	681b      	ldr	r3, [r3, #0]
    c590:	6818      	ldr	r0, [r3, #0]
    c592:	4b14      	ldr	r3, [pc, #80]	; (c5e4 <usbdc_get_str_desc+0x8c>)
    c594:	681b      	ldr	r3, [r3, #0]
    c596:	685b      	ldr	r3, [r3, #4]
    c598:	7b3a      	ldrb	r2, [r7, #12]
    c59a:	4619      	mov	r1, r3
    c59c:	4b12      	ldr	r3, [pc, #72]	; (c5e8 <usbdc_get_str_desc+0x90>)
    c59e:	4798      	blx	r3
    c5a0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c5a2:	68bb      	ldr	r3, [r7, #8]
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d101      	bne.n	c5ac <usbdc_get_str_desc+0x54>
		return false;
    c5a8:	2300      	movs	r3, #0
    c5aa:	e017      	b.n	c5dc <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c5ac:	68bb      	ldr	r3, [r7, #8]
    c5ae:	781b      	ldrb	r3, [r3, #0]
    c5b0:	b29b      	uxth	r3, r3
    c5b2:	89fa      	ldrh	r2, [r7, #14]
    c5b4:	429a      	cmp	r2, r3
    c5b6:	d802      	bhi.n	c5be <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c5b8:	2300      	movs	r3, #0
    c5ba:	737b      	strb	r3, [r7, #13]
    c5bc:	e002      	b.n	c5c4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c5be:	68bb      	ldr	r3, [r7, #8]
    c5c0:	781b      	ldrb	r3, [r3, #0]
    c5c2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c5c4:	89fa      	ldrh	r2, [r7, #14]
    c5c6:	7b7b      	ldrb	r3, [r7, #13]
    c5c8:	79f8      	ldrb	r0, [r7, #7]
    c5ca:	68b9      	ldr	r1, [r7, #8]
    c5cc:	4c07      	ldr	r4, [pc, #28]	; (c5ec <usbdc_get_str_desc+0x94>)
    c5ce:	47a0      	blx	r4
    c5d0:	4603      	mov	r3, r0
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d001      	beq.n	c5da <usbdc_get_str_desc+0x82>
		return false;
    c5d6:	2300      	movs	r3, #0
    c5d8:	e000      	b.n	c5dc <usbdc_get_str_desc+0x84>
	}
	return true;
    c5da:	2301      	movs	r3, #1
}
    c5dc:	4618      	mov	r0, r3
    c5de:	3714      	adds	r7, #20
    c5e0:	46bd      	mov	sp, r7
    c5e2:	bd90      	pop	{r4, r7, pc}
    c5e4:	2000108c 	.word	0x2000108c
    c5e8:	0000d2dd 	.word	0x0000d2dd
    c5ec:	0000cf15 	.word	0x0000cf15

0000c5f0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b084      	sub	sp, #16
    c5f4:	af00      	add	r7, sp, #0
    c5f6:	4603      	mov	r3, r0
    c5f8:	6039      	str	r1, [r7, #0]
    c5fa:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c5fc:	683b      	ldr	r3, [r7, #0]
    c5fe:	885b      	ldrh	r3, [r3, #2]
    c600:	b29b      	uxth	r3, r3
    c602:	0a1b      	lsrs	r3, r3, #8
    c604:	b29b      	uxth	r3, r3
    c606:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c608:	7bfb      	ldrb	r3, [r7, #15]
    c60a:	2b02      	cmp	r3, #2
    c60c:	d00d      	beq.n	c62a <usbdc_get_desc_req+0x3a>
    c60e:	2b03      	cmp	r3, #3
    c610:	d012      	beq.n	c638 <usbdc_get_desc_req+0x48>
    c612:	2b01      	cmp	r3, #1
    c614:	d002      	beq.n	c61c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c616:	bf00      	nop
	}
	return false;
    c618:	2300      	movs	r3, #0
    c61a:	e013      	b.n	c644 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c61c:	79fb      	ldrb	r3, [r7, #7]
    c61e:	6839      	ldr	r1, [r7, #0]
    c620:	4618      	mov	r0, r3
    c622:	4b0a      	ldr	r3, [pc, #40]	; (c64c <usbdc_get_desc_req+0x5c>)
    c624:	4798      	blx	r3
    c626:	4603      	mov	r3, r0
    c628:	e00c      	b.n	c644 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c62a:	79fb      	ldrb	r3, [r7, #7]
    c62c:	6839      	ldr	r1, [r7, #0]
    c62e:	4618      	mov	r0, r3
    c630:	4b07      	ldr	r3, [pc, #28]	; (c650 <usbdc_get_desc_req+0x60>)
    c632:	4798      	blx	r3
    c634:	4603      	mov	r3, r0
    c636:	e005      	b.n	c644 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c638:	79fb      	ldrb	r3, [r7, #7]
    c63a:	6839      	ldr	r1, [r7, #0]
    c63c:	4618      	mov	r0, r3
    c63e:	4b05      	ldr	r3, [pc, #20]	; (c654 <usbdc_get_desc_req+0x64>)
    c640:	4798      	blx	r3
    c642:	4603      	mov	r3, r0
}
    c644:	4618      	mov	r0, r3
    c646:	3710      	adds	r7, #16
    c648:	46bd      	mov	sp, r7
    c64a:	bd80      	pop	{r7, pc}
    c64c:	0000c431 	.word	0x0000c431
    c650:	0000c4a9 	.word	0x0000c4a9
    c654:	0000c559 	.word	0x0000c559

0000c658 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c658:	b590      	push	{r4, r7, lr}
    c65a:	b085      	sub	sp, #20
    c65c:	af00      	add	r7, sp, #0
    c65e:	4603      	mov	r3, r0
    c660:	6039      	str	r1, [r7, #0]
    c662:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c664:	683b      	ldr	r3, [r7, #0]
    c666:	781b      	ldrb	r3, [r3, #0]
    c668:	f003 031f 	and.w	r3, r3, #31
    c66c:	2b00      	cmp	r3, #0
    c66e:	db1b      	blt.n	c6a8 <usbdc_get_status_req+0x50>
    c670:	2b01      	cmp	r3, #1
    c672:	dd02      	ble.n	c67a <usbdc_get_status_req+0x22>
    c674:	2b02      	cmp	r3, #2
    c676:	d003      	beq.n	c680 <usbdc_get_status_req+0x28>
    c678:	e016      	b.n	c6a8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c67a:	2300      	movs	r3, #0
    c67c:	60fb      	str	r3, [r7, #12]
		break;
    c67e:	e015      	b.n	c6ac <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c680:	683b      	ldr	r3, [r7, #0]
    c682:	889b      	ldrh	r3, [r3, #4]
    c684:	b29b      	uxth	r3, r3
    c686:	b2db      	uxtb	r3, r3
    c688:	2102      	movs	r1, #2
    c68a:	4618      	mov	r0, r3
    c68c:	4b0f      	ldr	r3, [pc, #60]	; (c6cc <usbdc_get_status_req+0x74>)
    c68e:	4798      	blx	r3
    c690:	4603      	mov	r3, r0
    c692:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c694:	68fb      	ldr	r3, [r7, #12]
    c696:	2b00      	cmp	r3, #0
    c698:	da01      	bge.n	c69e <usbdc_get_status_req+0x46>
			return false;
    c69a:	2300      	movs	r3, #0
    c69c:	e012      	b.n	c6c4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c69e:	68fb      	ldr	r3, [r7, #12]
    c6a0:	f003 0301 	and.w	r3, r3, #1
    c6a4:	60fb      	str	r3, [r7, #12]
		break;
    c6a6:	e001      	b.n	c6ac <usbdc_get_status_req+0x54>
	default:
		return false;
    c6a8:	2300      	movs	r3, #0
    c6aa:	e00b      	b.n	c6c4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c6ac:	4b08      	ldr	r3, [pc, #32]	; (c6d0 <usbdc_get_status_req+0x78>)
    c6ae:	695b      	ldr	r3, [r3, #20]
    c6b0:	89ba      	ldrh	r2, [r7, #12]
    c6b2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c6b4:	4b06      	ldr	r3, [pc, #24]	; (c6d0 <usbdc_get_status_req+0x78>)
    c6b6:	6959      	ldr	r1, [r3, #20]
    c6b8:	79f8      	ldrb	r0, [r7, #7]
    c6ba:	2300      	movs	r3, #0
    c6bc:	2202      	movs	r2, #2
    c6be:	4c05      	ldr	r4, [pc, #20]	; (c6d4 <usbdc_get_status_req+0x7c>)
    c6c0:	47a0      	blx	r4
	return true;
    c6c2:	2301      	movs	r3, #1
}
    c6c4:	4618      	mov	r0, r3
    c6c6:	3714      	adds	r7, #20
    c6c8:	46bd      	mov	sp, r7
    c6ca:	bd90      	pop	{r4, r7, pc}
    c6cc:	00003811 	.word	0x00003811
    c6d0:	2000108c 	.word	0x2000108c
    c6d4:	0000cf15 	.word	0x0000cf15

0000c6d8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c6d8:	b590      	push	{r4, r7, lr}
    c6da:	b085      	sub	sp, #20
    c6dc:	af00      	add	r7, sp, #0
    c6de:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c6e0:	4b1f      	ldr	r3, [pc, #124]	; (c760 <usbdc_get_interface+0x88>)
    c6e2:	691b      	ldr	r3, [r3, #16]
    c6e4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c6e6:	4b1e      	ldr	r3, [pc, #120]	; (c760 <usbdc_get_interface+0x88>)
    c6e8:	7f5b      	ldrb	r3, [r3, #29]
    c6ea:	461a      	mov	r2, r3
    c6ec:	687b      	ldr	r3, [r7, #4]
    c6ee:	889b      	ldrh	r3, [r3, #4]
    c6f0:	b29b      	uxth	r3, r3
    c6f2:	fa42 f303 	asr.w	r3, r2, r3
    c6f6:	f003 0301 	and.w	r3, r3, #1
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	d128      	bne.n	c750 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c6fe:	4b18      	ldr	r3, [pc, #96]	; (c760 <usbdc_get_interface+0x88>)
    c700:	695b      	ldr	r3, [r3, #20]
    c702:	2200      	movs	r2, #0
    c704:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c706:	4b16      	ldr	r3, [pc, #88]	; (c760 <usbdc_get_interface+0x88>)
    c708:	6959      	ldr	r1, [r3, #20]
    c70a:	2300      	movs	r3, #0
    c70c:	2201      	movs	r2, #1
    c70e:	2000      	movs	r0, #0
    c710:	4c14      	ldr	r4, [pc, #80]	; (c764 <usbdc_get_interface+0x8c>)
    c712:	47a0      	blx	r4
		return true;
    c714:	2301      	movs	r3, #1
    c716:	e01f      	b.n	c758 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c718:	68fb      	ldr	r3, [r7, #12]
    c71a:	685b      	ldr	r3, [r3, #4]
    c71c:	687a      	ldr	r2, [r7, #4]
    c71e:	2102      	movs	r1, #2
    c720:	68f8      	ldr	r0, [r7, #12]
    c722:	4798      	blx	r3
    c724:	60b8      	str	r0, [r7, #8]
    c726:	68bb      	ldr	r3, [r7, #8]
    c728:	2b00      	cmp	r3, #0
    c72a:	da03      	bge.n	c734 <usbdc_get_interface+0x5c>
			func = func->next;
    c72c:	68fb      	ldr	r3, [r7, #12]
    c72e:	681b      	ldr	r3, [r3, #0]
    c730:	60fb      	str	r3, [r7, #12]
    c732:	e00d      	b.n	c750 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c734:	4b0a      	ldr	r3, [pc, #40]	; (c760 <usbdc_get_interface+0x88>)
    c736:	695b      	ldr	r3, [r3, #20]
    c738:	68ba      	ldr	r2, [r7, #8]
    c73a:	b2d2      	uxtb	r2, r2
    c73c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c73e:	4b08      	ldr	r3, [pc, #32]	; (c760 <usbdc_get_interface+0x88>)
    c740:	6959      	ldr	r1, [r3, #20]
    c742:	2300      	movs	r3, #0
    c744:	2201      	movs	r2, #1
    c746:	2000      	movs	r0, #0
    c748:	4c06      	ldr	r4, [pc, #24]	; (c764 <usbdc_get_interface+0x8c>)
    c74a:	47a0      	blx	r4
			return true;
    c74c:	2301      	movs	r3, #1
    c74e:	e003      	b.n	c758 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c750:	68fb      	ldr	r3, [r7, #12]
    c752:	2b00      	cmp	r3, #0
    c754:	d1e0      	bne.n	c718 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c756:	2300      	movs	r3, #0
}
    c758:	4618      	mov	r0, r3
    c75a:	3714      	adds	r7, #20
    c75c:	46bd      	mov	sp, r7
    c75e:	bd90      	pop	{r4, r7, pc}
    c760:	2000108c 	.word	0x2000108c
    c764:	0000cf15 	.word	0x0000cf15

0000c768 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c768:	b590      	push	{r4, r7, lr}
    c76a:	b083      	sub	sp, #12
    c76c:	af00      	add	r7, sp, #0
    c76e:	4603      	mov	r3, r0
    c770:	6039      	str	r1, [r7, #0]
    c772:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c774:	683b      	ldr	r3, [r7, #0]
    c776:	785b      	ldrb	r3, [r3, #1]
    c778:	2b0a      	cmp	r3, #10
    c77a:	d83a      	bhi.n	c7f2 <usbdc_get_req+0x8a>
    c77c:	a201      	add	r2, pc, #4	; (adr r2, c784 <usbdc_get_req+0x1c>)
    c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c782:	bf00      	nop
    c784:	0000c7db 	.word	0x0000c7db
    c788:	0000c7f3 	.word	0x0000c7f3
    c78c:	0000c7f3 	.word	0x0000c7f3
    c790:	0000c7f3 	.word	0x0000c7f3
    c794:	0000c7f3 	.word	0x0000c7f3
    c798:	0000c7f3 	.word	0x0000c7f3
    c79c:	0000c7b1 	.word	0x0000c7b1
    c7a0:	0000c7f3 	.word	0x0000c7f3
    c7a4:	0000c7bf 	.word	0x0000c7bf
    c7a8:	0000c7f3 	.word	0x0000c7f3
    c7ac:	0000c7e9 	.word	0x0000c7e9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c7b0:	79fb      	ldrb	r3, [r7, #7]
    c7b2:	6839      	ldr	r1, [r7, #0]
    c7b4:	4618      	mov	r0, r3
    c7b6:	4b11      	ldr	r3, [pc, #68]	; (c7fc <usbdc_get_req+0x94>)
    c7b8:	4798      	blx	r3
    c7ba:	4603      	mov	r3, r0
    c7bc:	e01a      	b.n	c7f4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c7be:	4b10      	ldr	r3, [pc, #64]	; (c800 <usbdc_get_req+0x98>)
    c7c0:	695b      	ldr	r3, [r3, #20]
    c7c2:	4a0f      	ldr	r2, [pc, #60]	; (c800 <usbdc_get_req+0x98>)
    c7c4:	7ed2      	ldrb	r2, [r2, #27]
    c7c6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c7c8:	4b0d      	ldr	r3, [pc, #52]	; (c800 <usbdc_get_req+0x98>)
    c7ca:	6959      	ldr	r1, [r3, #20]
    c7cc:	79f8      	ldrb	r0, [r7, #7]
    c7ce:	2300      	movs	r3, #0
    c7d0:	2201      	movs	r2, #1
    c7d2:	4c0c      	ldr	r4, [pc, #48]	; (c804 <usbdc_get_req+0x9c>)
    c7d4:	47a0      	blx	r4
		return true;
    c7d6:	2301      	movs	r3, #1
    c7d8:	e00c      	b.n	c7f4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c7da:	79fb      	ldrb	r3, [r7, #7]
    c7dc:	6839      	ldr	r1, [r7, #0]
    c7de:	4618      	mov	r0, r3
    c7e0:	4b09      	ldr	r3, [pc, #36]	; (c808 <usbdc_get_req+0xa0>)
    c7e2:	4798      	blx	r3
    c7e4:	4603      	mov	r3, r0
    c7e6:	e005      	b.n	c7f4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c7e8:	6838      	ldr	r0, [r7, #0]
    c7ea:	4b08      	ldr	r3, [pc, #32]	; (c80c <usbdc_get_req+0xa4>)
    c7ec:	4798      	blx	r3
    c7ee:	4603      	mov	r3, r0
    c7f0:	e000      	b.n	c7f4 <usbdc_get_req+0x8c>
	default:
		return false;
    c7f2:	2300      	movs	r3, #0
	}
}
    c7f4:	4618      	mov	r0, r3
    c7f6:	370c      	adds	r7, #12
    c7f8:	46bd      	mov	sp, r7
    c7fa:	bd90      	pop	{r4, r7, pc}
    c7fc:	0000c5f1 	.word	0x0000c5f1
    c800:	2000108c 	.word	0x2000108c
    c804:	0000cf15 	.word	0x0000cf15
    c808:	0000c659 	.word	0x0000c659
    c80c:	0000c6d9 	.word	0x0000c6d9

0000c810 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c810:	b590      	push	{r4, r7, lr}
    c812:	b083      	sub	sp, #12
    c814:	af00      	add	r7, sp, #0
    c816:	4603      	mov	r3, r0
    c818:	6039      	str	r1, [r7, #0]
    c81a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c81c:	683b      	ldr	r3, [r7, #0]
    c81e:	781b      	ldrb	r3, [r3, #0]
    c820:	f003 031f 	and.w	r3, r3, #31
    c824:	2b02      	cmp	r3, #2
    c826:	d116      	bne.n	c856 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c828:	683b      	ldr	r3, [r7, #0]
    c82a:	88db      	ldrh	r3, [r3, #6]
    c82c:	b29b      	uxth	r3, r3
    c82e:	2b00      	cmp	r3, #0
    c830:	d001      	beq.n	c836 <usbdc_clear_ftr_req+0x26>
			return false;
    c832:	2300      	movs	r3, #0
    c834:	e010      	b.n	c858 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c836:	683b      	ldr	r3, [r7, #0]
    c838:	889b      	ldrh	r3, [r3, #4]
    c83a:	b29b      	uxth	r3, r3
    c83c:	b2db      	uxtb	r3, r3
    c83e:	2100      	movs	r1, #0
    c840:	4618      	mov	r0, r3
    c842:	4b07      	ldr	r3, [pc, #28]	; (c860 <usbdc_clear_ftr_req+0x50>)
    c844:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c846:	79f8      	ldrb	r0, [r7, #7]
    c848:	2301      	movs	r3, #1
    c84a:	2200      	movs	r2, #0
    c84c:	2100      	movs	r1, #0
    c84e:	4c05      	ldr	r4, [pc, #20]	; (c864 <usbdc_clear_ftr_req+0x54>)
    c850:	47a0      	blx	r4
		return true;
    c852:	2301      	movs	r3, #1
    c854:	e000      	b.n	c858 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c856:	2300      	movs	r3, #0
	}
}
    c858:	4618      	mov	r0, r3
    c85a:	370c      	adds	r7, #12
    c85c:	46bd      	mov	sp, r7
    c85e:	bd90      	pop	{r4, r7, pc}
    c860:	00003811 	.word	0x00003811
    c864:	0000cf15 	.word	0x0000cf15

0000c868 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c868:	b590      	push	{r4, r7, lr}
    c86a:	b083      	sub	sp, #12
    c86c:	af00      	add	r7, sp, #0
    c86e:	4603      	mov	r3, r0
    c870:	6039      	str	r1, [r7, #0]
    c872:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c874:	683b      	ldr	r3, [r7, #0]
    c876:	781b      	ldrb	r3, [r3, #0]
    c878:	f003 031f 	and.w	r3, r3, #31
    c87c:	2b02      	cmp	r3, #2
    c87e:	d116      	bne.n	c8ae <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c880:	683b      	ldr	r3, [r7, #0]
    c882:	88db      	ldrh	r3, [r3, #6]
    c884:	b29b      	uxth	r3, r3
    c886:	2b00      	cmp	r3, #0
    c888:	d001      	beq.n	c88e <usbdc_set_ftr_req+0x26>
			return false;
    c88a:	2300      	movs	r3, #0
    c88c:	e010      	b.n	c8b0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c88e:	683b      	ldr	r3, [r7, #0]
    c890:	889b      	ldrh	r3, [r3, #4]
    c892:	b29b      	uxth	r3, r3
    c894:	b2db      	uxtb	r3, r3
    c896:	2101      	movs	r1, #1
    c898:	4618      	mov	r0, r3
    c89a:	4b07      	ldr	r3, [pc, #28]	; (c8b8 <usbdc_set_ftr_req+0x50>)
    c89c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c89e:	79f8      	ldrb	r0, [r7, #7]
    c8a0:	2301      	movs	r3, #1
    c8a2:	2200      	movs	r2, #0
    c8a4:	2100      	movs	r1, #0
    c8a6:	4c05      	ldr	r4, [pc, #20]	; (c8bc <usbdc_set_ftr_req+0x54>)
    c8a8:	47a0      	blx	r4
		return true;
    c8aa:	2301      	movs	r3, #1
    c8ac:	e000      	b.n	c8b0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c8ae:	2300      	movs	r3, #0
	}
}
    c8b0:	4618      	mov	r0, r3
    c8b2:	370c      	adds	r7, #12
    c8b4:	46bd      	mov	sp, r7
    c8b6:	bd90      	pop	{r4, r7, pc}
    c8b8:	00003811 	.word	0x00003811
    c8bc:	0000cf15 	.word	0x0000cf15

0000c8c0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c8c0:	b580      	push	{r7, lr}
    c8c2:	b082      	sub	sp, #8
    c8c4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c8c6:	4b0a      	ldr	r3, [pc, #40]	; (c8f0 <usbdc_unconfig+0x30>)
    c8c8:	691b      	ldr	r3, [r3, #16]
    c8ca:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c8cc:	e008      	b.n	c8e0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c8ce:	687b      	ldr	r3, [r7, #4]
    c8d0:	685b      	ldr	r3, [r3, #4]
    c8d2:	2200      	movs	r2, #0
    c8d4:	2101      	movs	r1, #1
    c8d6:	6878      	ldr	r0, [r7, #4]
    c8d8:	4798      	blx	r3
		func = func->next;
    c8da:	687b      	ldr	r3, [r7, #4]
    c8dc:	681b      	ldr	r3, [r3, #0]
    c8de:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c8e0:	687b      	ldr	r3, [r7, #4]
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d1f3      	bne.n	c8ce <usbdc_unconfig+0xe>
	}
}
    c8e6:	bf00      	nop
    c8e8:	3708      	adds	r7, #8
    c8ea:	46bd      	mov	sp, r7
    c8ec:	bd80      	pop	{r7, pc}
    c8ee:	bf00      	nop
    c8f0:	2000108c 	.word	0x2000108c

0000c8f4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c8f4:	b580      	push	{r7, lr}
    c8f6:	b088      	sub	sp, #32
    c8f8:	af00      	add	r7, sp, #0
    c8fa:	4603      	mov	r3, r0
    c8fc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c8fe:	2300      	movs	r3, #0
    c900:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c902:	23ff      	movs	r3, #255	; 0xff
    c904:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c906:	79fb      	ldrb	r3, [r7, #7]
    c908:	2b00      	cmp	r3, #0
    c90a:	d103      	bne.n	c914 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c90c:	4b2e      	ldr	r3, [pc, #184]	; (c9c8 <usbdc_set_config+0xd4>)
    c90e:	4798      	blx	r3
		return true;
    c910:	2301      	movs	r3, #1
    c912:	e055      	b.n	c9c0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c914:	69bb      	ldr	r3, [r7, #24]
    c916:	2b00      	cmp	r3, #0
    c918:	d10a      	bne.n	c930 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c91a:	4b2c      	ldr	r3, [pc, #176]	; (c9cc <usbdc_set_config+0xd8>)
    c91c:	681b      	ldr	r3, [r3, #0]
    c91e:	6818      	ldr	r0, [r3, #0]
    c920:	4b2a      	ldr	r3, [pc, #168]	; (c9cc <usbdc_set_config+0xd8>)
    c922:	681b      	ldr	r3, [r3, #0]
    c924:	685b      	ldr	r3, [r3, #4]
    c926:	79fa      	ldrb	r2, [r7, #7]
    c928:	4619      	mov	r1, r3
    c92a:	4b29      	ldr	r3, [pc, #164]	; (c9d0 <usbdc_set_config+0xdc>)
    c92c:	4798      	blx	r3
    c92e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c930:	69bb      	ldr	r3, [r7, #24]
    c932:	2b00      	cmp	r3, #0
    c934:	d101      	bne.n	c93a <usbdc_set_config+0x46>
		return false;
    c936:	2300      	movs	r3, #0
    c938:	e042      	b.n	c9c0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c93a:	69b8      	ldr	r0, [r7, #24]
    c93c:	4b25      	ldr	r3, [pc, #148]	; (c9d4 <usbdc_set_config+0xe0>)
    c93e:	4798      	blx	r3
    c940:	4603      	mov	r3, r0
    c942:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c944:	8abb      	ldrh	r3, [r7, #20]
    c946:	69ba      	ldr	r2, [r7, #24]
    c948:	4413      	add	r3, r2
    c94a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c94c:	693b      	ldr	r3, [r7, #16]
    c94e:	2204      	movs	r2, #4
    c950:	4619      	mov	r1, r3
    c952:	69b8      	ldr	r0, [r7, #24]
    c954:	4b20      	ldr	r3, [pc, #128]	; (c9d8 <usbdc_set_config+0xe4>)
    c956:	4798      	blx	r3
    c958:	4603      	mov	r3, r0
    c95a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c95c:	e02c      	b.n	c9b8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c95e:	68fb      	ldr	r3, [r7, #12]
    c960:	3302      	adds	r3, #2
    c962:	781b      	ldrb	r3, [r3, #0]
    c964:	7dfa      	ldrb	r2, [r7, #23]
    c966:	429a      	cmp	r2, r3
    c968:	d018      	beq.n	c99c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c96a:	68fb      	ldr	r3, [r7, #12]
    c96c:	789b      	ldrb	r3, [r3, #2]
    c96e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c970:	4b16      	ldr	r3, [pc, #88]	; (c9cc <usbdc_set_config+0xd8>)
    c972:	691b      	ldr	r3, [r3, #16]
    c974:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c976:	e00c      	b.n	c992 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c978:	69fb      	ldr	r3, [r7, #28]
    c97a:	685b      	ldr	r3, [r3, #4]
    c97c:	f107 020c 	add.w	r2, r7, #12
    c980:	2100      	movs	r1, #0
    c982:	69f8      	ldr	r0, [r7, #28]
    c984:	4798      	blx	r3
    c986:	4603      	mov	r3, r0
    c988:	2b00      	cmp	r3, #0
    c98a:	d006      	beq.n	c99a <usbdc_set_config+0xa6>
					func = func->next;
    c98c:	69fb      	ldr	r3, [r7, #28]
    c98e:	681b      	ldr	r3, [r3, #0]
    c990:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c992:	69fb      	ldr	r3, [r7, #28]
    c994:	2b00      	cmp	r3, #0
    c996:	d1ef      	bne.n	c978 <usbdc_set_config+0x84>
    c998:	e000      	b.n	c99c <usbdc_set_config+0xa8>
				} else {
					break;
    c99a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c99c:	68fb      	ldr	r3, [r7, #12]
    c99e:	4618      	mov	r0, r3
    c9a0:	4b0e      	ldr	r3, [pc, #56]	; (c9dc <usbdc_set_config+0xe8>)
    c9a2:	4798      	blx	r3
    c9a4:	4603      	mov	r3, r0
    c9a6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c9a8:	68fb      	ldr	r3, [r7, #12]
    c9aa:	6939      	ldr	r1, [r7, #16]
    c9ac:	2204      	movs	r2, #4
    c9ae:	4618      	mov	r0, r3
    c9b0:	4b09      	ldr	r3, [pc, #36]	; (c9d8 <usbdc_set_config+0xe4>)
    c9b2:	4798      	blx	r3
    c9b4:	4603      	mov	r3, r0
    c9b6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c9b8:	68fb      	ldr	r3, [r7, #12]
    c9ba:	2b00      	cmp	r3, #0
    c9bc:	d1cf      	bne.n	c95e <usbdc_set_config+0x6a>
	}
	return true;
    c9be:	2301      	movs	r3, #1
}
    c9c0:	4618      	mov	r0, r3
    c9c2:	3720      	adds	r7, #32
    c9c4:	46bd      	mov	sp, r7
    c9c6:	bd80      	pop	{r7, pc}
    c9c8:	0000c8c1 	.word	0x0000c8c1
    c9cc:	2000108c 	.word	0x2000108c
    c9d0:	0000d265 	.word	0x0000d265
    c9d4:	0000c411 	.word	0x0000c411
    c9d8:	0000d1a5 	.word	0x0000d1a5
    c9dc:	0000c3ed 	.word	0x0000c3ed

0000c9e0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c9e0:	b580      	push	{r7, lr}
    c9e2:	b082      	sub	sp, #8
    c9e4:	af00      	add	r7, sp, #0
    c9e6:	4603      	mov	r3, r0
    c9e8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c9ea:	79fb      	ldrb	r3, [r7, #7]
    c9ec:	4618      	mov	r0, r3
    c9ee:	4b03      	ldr	r3, [pc, #12]	; (c9fc <usbdc_set_address+0x1c>)
    c9f0:	4798      	blx	r3
}
    c9f2:	bf00      	nop
    c9f4:	3708      	adds	r7, #8
    c9f6:	46bd      	mov	sp, r7
    c9f8:	bd80      	pop	{r7, pc}
    c9fa:	bf00      	nop
    c9fc:	0000342d 	.word	0x0000342d

0000ca00 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    ca00:	b590      	push	{r4, r7, lr}
    ca02:	b087      	sub	sp, #28
    ca04:	af00      	add	r7, sp, #0
    ca06:	4603      	mov	r3, r0
    ca08:	460a      	mov	r2, r1
    ca0a:	80fb      	strh	r3, [r7, #6]
    ca0c:	4613      	mov	r3, r2
    ca0e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    ca10:	2300      	movs	r3, #0
    ca12:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    ca14:	693b      	ldr	r3, [r7, #16]
    ca16:	2b00      	cmp	r3, #0
    ca18:	d10b      	bne.n	ca32 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ca1a:	4b43      	ldr	r3, [pc, #268]	; (cb28 <usbdc_set_interface+0x128>)
    ca1c:	681b      	ldr	r3, [r3, #0]
    ca1e:	6818      	ldr	r0, [r3, #0]
    ca20:	4b41      	ldr	r3, [pc, #260]	; (cb28 <usbdc_set_interface+0x128>)
    ca22:	681b      	ldr	r3, [r3, #0]
    ca24:	6859      	ldr	r1, [r3, #4]
    ca26:	4b40      	ldr	r3, [pc, #256]	; (cb28 <usbdc_set_interface+0x128>)
    ca28:	7edb      	ldrb	r3, [r3, #27]
    ca2a:	461a      	mov	r2, r3
    ca2c:	4b3f      	ldr	r3, [pc, #252]	; (cb2c <usbdc_set_interface+0x12c>)
    ca2e:	4798      	blx	r3
    ca30:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    ca32:	693b      	ldr	r3, [r7, #16]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d101      	bne.n	ca3c <usbdc_set_interface+0x3c>
		return false;
    ca38:	2300      	movs	r3, #0
    ca3a:	e071      	b.n	cb20 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    ca3c:	693b      	ldr	r3, [r7, #16]
    ca3e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ca40:	6938      	ldr	r0, [r7, #16]
    ca42:	4b3b      	ldr	r3, [pc, #236]	; (cb30 <usbdc_set_interface+0x130>)
    ca44:	4798      	blx	r3
    ca46:	4603      	mov	r3, r0
    ca48:	461a      	mov	r2, r3
    ca4a:	693b      	ldr	r3, [r7, #16]
    ca4c:	4413      	add	r3, r2
    ca4e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ca50:	68bb      	ldr	r3, [r7, #8]
    ca52:	68f9      	ldr	r1, [r7, #12]
    ca54:	2204      	movs	r2, #4
    ca56:	4618      	mov	r0, r3
    ca58:	4b36      	ldr	r3, [pc, #216]	; (cb34 <usbdc_set_interface+0x134>)
    ca5a:	4798      	blx	r3
    ca5c:	6138      	str	r0, [r7, #16]
    ca5e:	693b      	ldr	r3, [r7, #16]
    ca60:	2b00      	cmp	r3, #0
    ca62:	d113      	bne.n	ca8c <usbdc_set_interface+0x8c>
		return false;
    ca64:	2300      	movs	r3, #0
    ca66:	e05b      	b.n	cb20 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    ca68:	68bb      	ldr	r3, [r7, #8]
    ca6a:	4618      	mov	r0, r3
    ca6c:	4b32      	ldr	r3, [pc, #200]	; (cb38 <usbdc_set_interface+0x138>)
    ca6e:	4798      	blx	r3
    ca70:	4603      	mov	r3, r0
    ca72:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ca74:	68bb      	ldr	r3, [r7, #8]
    ca76:	68f9      	ldr	r1, [r7, #12]
    ca78:	2204      	movs	r2, #4
    ca7a:	4618      	mov	r0, r3
    ca7c:	4b2d      	ldr	r3, [pc, #180]	; (cb34 <usbdc_set_interface+0x134>)
    ca7e:	4798      	blx	r3
    ca80:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    ca82:	693b      	ldr	r3, [r7, #16]
    ca84:	2b00      	cmp	r3, #0
    ca86:	d101      	bne.n	ca8c <usbdc_set_interface+0x8c>
			return false;
    ca88:	2300      	movs	r3, #0
    ca8a:	e049      	b.n	cb20 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    ca8c:	693b      	ldr	r3, [r7, #16]
    ca8e:	3302      	adds	r3, #2
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	b29b      	uxth	r3, r3
    ca94:	88ba      	ldrh	r2, [r7, #4]
    ca96:	429a      	cmp	r2, r3
    ca98:	d1e6      	bne.n	ca68 <usbdc_set_interface+0x68>
    ca9a:	693b      	ldr	r3, [r7, #16]
    ca9c:	3303      	adds	r3, #3
    ca9e:	781b      	ldrb	r3, [r3, #0]
    caa0:	b29b      	uxth	r3, r3
    caa2:	88fa      	ldrh	r2, [r7, #6]
    caa4:	429a      	cmp	r2, r3
    caa6:	d1df      	bne.n	ca68 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    caa8:	693b      	ldr	r3, [r7, #16]
    caaa:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    caac:	4b1e      	ldr	r3, [pc, #120]	; (cb28 <usbdc_set_interface+0x128>)
    caae:	691b      	ldr	r3, [r3, #16]
    cab0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    cab2:	e031      	b.n	cb18 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cab4:	697b      	ldr	r3, [r7, #20]
    cab6:	685b      	ldr	r3, [r3, #4]
    cab8:	f107 0208 	add.w	r2, r7, #8
    cabc:	2101      	movs	r1, #1
    cabe:	6978      	ldr	r0, [r7, #20]
    cac0:	4798      	blx	r3
    cac2:	4603      	mov	r3, r0
    cac4:	2b00      	cmp	r3, #0
    cac6:	d003      	beq.n	cad0 <usbdc_set_interface+0xd0>
			func = func->next;
    cac8:	697b      	ldr	r3, [r7, #20]
    caca:	681b      	ldr	r3, [r3, #0]
    cacc:	617b      	str	r3, [r7, #20]
    cace:	e023      	b.n	cb18 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cad0:	697b      	ldr	r3, [r7, #20]
    cad2:	685b      	ldr	r3, [r3, #4]
    cad4:	f107 0208 	add.w	r2, r7, #8
    cad8:	2100      	movs	r1, #0
    cada:	6978      	ldr	r0, [r7, #20]
    cadc:	4798      	blx	r3
    cade:	4603      	mov	r3, r0
    cae0:	2b00      	cmp	r3, #0
    cae2:	d117      	bne.n	cb14 <usbdc_set_interface+0x114>
			if (alt_set) {
    cae4:	88fb      	ldrh	r3, [r7, #6]
    cae6:	2b00      	cmp	r3, #0
    cae8:	d00c      	beq.n	cb04 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    caea:	4b0f      	ldr	r3, [pc, #60]	; (cb28 <usbdc_set_interface+0x128>)
    caec:	7f5b      	ldrb	r3, [r3, #29]
    caee:	b25a      	sxtb	r2, r3
    caf0:	88bb      	ldrh	r3, [r7, #4]
    caf2:	2101      	movs	r1, #1
    caf4:	fa01 f303 	lsl.w	r3, r1, r3
    caf8:	b25b      	sxtb	r3, r3
    cafa:	4313      	orrs	r3, r2
    cafc:	b25b      	sxtb	r3, r3
    cafe:	b2da      	uxtb	r2, r3
    cb00:	4b09      	ldr	r3, [pc, #36]	; (cb28 <usbdc_set_interface+0x128>)
    cb02:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    cb04:	2300      	movs	r3, #0
    cb06:	2200      	movs	r2, #0
    cb08:	2100      	movs	r1, #0
    cb0a:	2000      	movs	r0, #0
    cb0c:	4c0b      	ldr	r4, [pc, #44]	; (cb3c <usbdc_set_interface+0x13c>)
    cb0e:	47a0      	blx	r4
			return true;
    cb10:	2301      	movs	r3, #1
    cb12:	e005      	b.n	cb20 <usbdc_set_interface+0x120>
		} else {
			return false;
    cb14:	2300      	movs	r3, #0
    cb16:	e003      	b.n	cb20 <usbdc_set_interface+0x120>
	while (NULL != func) {
    cb18:	697b      	ldr	r3, [r7, #20]
    cb1a:	2b00      	cmp	r3, #0
    cb1c:	d1ca      	bne.n	cab4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    cb1e:	2300      	movs	r3, #0
}
    cb20:	4618      	mov	r0, r3
    cb22:	371c      	adds	r7, #28
    cb24:	46bd      	mov	sp, r7
    cb26:	bd90      	pop	{r4, r7, pc}
    cb28:	2000108c 	.word	0x2000108c
    cb2c:	0000d265 	.word	0x0000d265
    cb30:	0000c411 	.word	0x0000c411
    cb34:	0000d1a5 	.word	0x0000d1a5
    cb38:	0000c3ed 	.word	0x0000c3ed
    cb3c:	0000cf15 	.word	0x0000cf15

0000cb40 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    cb40:	b590      	push	{r4, r7, lr}
    cb42:	b083      	sub	sp, #12
    cb44:	af00      	add	r7, sp, #0
    cb46:	4603      	mov	r3, r0
    cb48:	6039      	str	r1, [r7, #0]
    cb4a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cb4c:	683b      	ldr	r3, [r7, #0]
    cb4e:	785b      	ldrb	r3, [r3, #1]
    cb50:	3b01      	subs	r3, #1
    cb52:	2b0a      	cmp	r3, #10
    cb54:	d85b      	bhi.n	cc0e <usbdc_set_req+0xce>
    cb56:	a201      	add	r2, pc, #4	; (adr r2, cb5c <usbdc_set_req+0x1c>)
    cb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb5c:	0000cbdb 	.word	0x0000cbdb
    cb60:	0000cc0f 	.word	0x0000cc0f
    cb64:	0000cbe9 	.word	0x0000cbe9
    cb68:	0000cc0f 	.word	0x0000cc0f
    cb6c:	0000cb89 	.word	0x0000cb89
    cb70:	0000cc0f 	.word	0x0000cc0f
    cb74:	0000cc0f 	.word	0x0000cc0f
    cb78:	0000cc0f 	.word	0x0000cc0f
    cb7c:	0000cba3 	.word	0x0000cba3
    cb80:	0000cc0f 	.word	0x0000cc0f
    cb84:	0000cbf7 	.word	0x0000cbf7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cb88:	79f8      	ldrb	r0, [r7, #7]
    cb8a:	2301      	movs	r3, #1
    cb8c:	2200      	movs	r2, #0
    cb8e:	2100      	movs	r1, #0
    cb90:	4c21      	ldr	r4, [pc, #132]	; (cc18 <usbdc_set_req+0xd8>)
    cb92:	47a0      	blx	r4
    cb94:	4603      	mov	r3, r0
    cb96:	2b00      	cmp	r3, #0
    cb98:	bf0c      	ite	eq
    cb9a:	2301      	moveq	r3, #1
    cb9c:	2300      	movne	r3, #0
    cb9e:	b2db      	uxtb	r3, r3
    cba0:	e036      	b.n	cc10 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cba2:	683b      	ldr	r3, [r7, #0]
    cba4:	885b      	ldrh	r3, [r3, #2]
    cba6:	b29b      	uxth	r3, r3
    cba8:	b2db      	uxtb	r3, r3
    cbaa:	4618      	mov	r0, r3
    cbac:	4b1b      	ldr	r3, [pc, #108]	; (cc1c <usbdc_set_req+0xdc>)
    cbae:	4798      	blx	r3
    cbb0:	4603      	mov	r3, r0
    cbb2:	f083 0301 	eor.w	r3, r3, #1
    cbb6:	b2db      	uxtb	r3, r3
    cbb8:	2b00      	cmp	r3, #0
    cbba:	d001      	beq.n	cbc0 <usbdc_set_req+0x80>
			return false;
    cbbc:	2300      	movs	r3, #0
    cbbe:	e027      	b.n	cc10 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cbc0:	79f8      	ldrb	r0, [r7, #7]
    cbc2:	2301      	movs	r3, #1
    cbc4:	2200      	movs	r2, #0
    cbc6:	2100      	movs	r1, #0
    cbc8:	4c13      	ldr	r4, [pc, #76]	; (cc18 <usbdc_set_req+0xd8>)
    cbca:	47a0      	blx	r4
    cbcc:	4603      	mov	r3, r0
    cbce:	2b00      	cmp	r3, #0
    cbd0:	bf0c      	ite	eq
    cbd2:	2301      	moveq	r3, #1
    cbd4:	2300      	movne	r3, #0
    cbd6:	b2db      	uxtb	r3, r3
    cbd8:	e01a      	b.n	cc10 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cbda:	79fb      	ldrb	r3, [r7, #7]
    cbdc:	6839      	ldr	r1, [r7, #0]
    cbde:	4618      	mov	r0, r3
    cbe0:	4b0f      	ldr	r3, [pc, #60]	; (cc20 <usbdc_set_req+0xe0>)
    cbe2:	4798      	blx	r3
    cbe4:	4603      	mov	r3, r0
    cbe6:	e013      	b.n	cc10 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cbe8:	79fb      	ldrb	r3, [r7, #7]
    cbea:	6839      	ldr	r1, [r7, #0]
    cbec:	4618      	mov	r0, r3
    cbee:	4b0d      	ldr	r3, [pc, #52]	; (cc24 <usbdc_set_req+0xe4>)
    cbf0:	4798      	blx	r3
    cbf2:	4603      	mov	r3, r0
    cbf4:	e00c      	b.n	cc10 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cbf6:	683b      	ldr	r3, [r7, #0]
    cbf8:	885b      	ldrh	r3, [r3, #2]
    cbfa:	b29a      	uxth	r2, r3
    cbfc:	683b      	ldr	r3, [r7, #0]
    cbfe:	889b      	ldrh	r3, [r3, #4]
    cc00:	b29b      	uxth	r3, r3
    cc02:	4619      	mov	r1, r3
    cc04:	4610      	mov	r0, r2
    cc06:	4b08      	ldr	r3, [pc, #32]	; (cc28 <usbdc_set_req+0xe8>)
    cc08:	4798      	blx	r3
    cc0a:	4603      	mov	r3, r0
    cc0c:	e000      	b.n	cc10 <usbdc_set_req+0xd0>
	default:
		return false;
    cc0e:	2300      	movs	r3, #0
	}
}
    cc10:	4618      	mov	r0, r3
    cc12:	370c      	adds	r7, #12
    cc14:	46bd      	mov	sp, r7
    cc16:	bd90      	pop	{r4, r7, pc}
    cc18:	0000cf15 	.word	0x0000cf15
    cc1c:	0000c8f5 	.word	0x0000c8f5
    cc20:	0000c811 	.word	0x0000c811
    cc24:	0000c869 	.word	0x0000c869
    cc28:	0000ca01 	.word	0x0000ca01

0000cc2c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b082      	sub	sp, #8
    cc30:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cc32:	4b0a      	ldr	r3, [pc, #40]	; (cc5c <usbdc_sof_notify+0x30>)
    cc34:	685b      	ldr	r3, [r3, #4]
    cc36:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cc38:	e009      	b.n	cc4e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cc3a:	687b      	ldr	r3, [r7, #4]
    cc3c:	685b      	ldr	r3, [r3, #4]
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d002      	beq.n	cc48 <usbdc_sof_notify+0x1c>
			sof->cb();
    cc42:	687b      	ldr	r3, [r7, #4]
    cc44:	685b      	ldr	r3, [r3, #4]
    cc46:	4798      	blx	r3
		}
		sof = sof->next;
    cc48:	687b      	ldr	r3, [r7, #4]
    cc4a:	681b      	ldr	r3, [r3, #0]
    cc4c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    cc4e:	687b      	ldr	r3, [r7, #4]
    cc50:	2b00      	cmp	r3, #0
    cc52:	d1f2      	bne.n	cc3a <usbdc_sof_notify+0xe>
	}
}
    cc54:	bf00      	nop
    cc56:	3708      	adds	r7, #8
    cc58:	46bd      	mov	sp, r7
    cc5a:	bd80      	pop	{r7, pc}
    cc5c:	2000108c 	.word	0x2000108c

0000cc60 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    cc60:	b580      	push	{r7, lr}
    cc62:	b084      	sub	sp, #16
    cc64:	af00      	add	r7, sp, #0
    cc66:	4603      	mov	r3, r0
    cc68:	6039      	str	r1, [r7, #0]
    cc6a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cc6c:	4b0b      	ldr	r3, [pc, #44]	; (cc9c <usbdc_change_notify+0x3c>)
    cc6e:	68db      	ldr	r3, [r3, #12]
    cc70:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    cc72:	e00c      	b.n	cc8e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    cc74:	68fb      	ldr	r3, [r7, #12]
    cc76:	685b      	ldr	r3, [r3, #4]
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d005      	beq.n	cc88 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cc7c:	68fb      	ldr	r3, [r7, #12]
    cc7e:	685b      	ldr	r3, [r3, #4]
    cc80:	79fa      	ldrb	r2, [r7, #7]
    cc82:	6839      	ldr	r1, [r7, #0]
    cc84:	4610      	mov	r0, r2
    cc86:	4798      	blx	r3
		}
		cg = cg->next;
    cc88:	68fb      	ldr	r3, [r7, #12]
    cc8a:	681b      	ldr	r3, [r3, #0]
    cc8c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    cc8e:	68fb      	ldr	r3, [r7, #12]
    cc90:	2b00      	cmp	r3, #0
    cc92:	d1ef      	bne.n	cc74 <usbdc_change_notify+0x14>
	}
}
    cc94:	bf00      	nop
    cc96:	3710      	adds	r7, #16
    cc98:	46bd      	mov	sp, r7
    cc9a:	bd80      	pop	{r7, pc}
    cc9c:	2000108c 	.word	0x2000108c

0000cca0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cca0:	b580      	push	{r7, lr}
    cca2:	b084      	sub	sp, #16
    cca4:	af00      	add	r7, sp, #0
    cca6:	4603      	mov	r3, r0
    cca8:	6039      	str	r1, [r7, #0]
    ccaa:	71fb      	strb	r3, [r7, #7]
    ccac:	4613      	mov	r3, r2
    ccae:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ccb0:	4b12      	ldr	r3, [pc, #72]	; (ccfc <usbdc_request_handler+0x5c>)
    ccb2:	689b      	ldr	r3, [r3, #8]
    ccb4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    ccb6:	e019      	b.n	ccec <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    ccb8:	68fb      	ldr	r3, [r7, #12]
    ccba:	685b      	ldr	r3, [r3, #4]
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	d012      	beq.n	cce6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    ccc0:	68fb      	ldr	r3, [r7, #12]
    ccc2:	685b      	ldr	r3, [r3, #4]
    ccc4:	79ba      	ldrb	r2, [r7, #6]
    ccc6:	79f8      	ldrb	r0, [r7, #7]
    ccc8:	6839      	ldr	r1, [r7, #0]
    ccca:	4798      	blx	r3
    cccc:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    ccce:	68bb      	ldr	r3, [r7, #8]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	d101      	bne.n	ccd8 <usbdc_request_handler+0x38>
				return true;
    ccd4:	2301      	movs	r3, #1
    ccd6:	e00d      	b.n	ccf4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    ccd8:	68bb      	ldr	r3, [r7, #8]
    ccda:	f113 0f0a 	cmn.w	r3, #10
    ccde:	d002      	beq.n	cce6 <usbdc_request_handler+0x46>
				return -1;
    cce0:	f04f 33ff 	mov.w	r3, #4294967295
    cce4:	e006      	b.n	ccf4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cce6:	68fb      	ldr	r3, [r7, #12]
    cce8:	681b      	ldr	r3, [r3, #0]
    ccea:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    ccec:	68fb      	ldr	r3, [r7, #12]
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d1e2      	bne.n	ccb8 <usbdc_request_handler+0x18>
	}
	return false;
    ccf2:	2300      	movs	r3, #0
}
    ccf4:	4618      	mov	r0, r3
    ccf6:	3710      	adds	r7, #16
    ccf8:	46bd      	mov	sp, r7
    ccfa:	bd80      	pop	{r7, pc}
    ccfc:	2000108c 	.word	0x2000108c

0000cd00 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cd00:	b580      	push	{r7, lr}
    cd02:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cd04:	4b01      	ldr	r3, [pc, #4]	; (cd0c <usbd_sof_cb+0xc>)
    cd06:	4798      	blx	r3
}
    cd08:	bf00      	nop
    cd0a:	bd80      	pop	{r7, pc}
    cd0c:	0000cc2d 	.word	0x0000cc2d

0000cd10 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cd10:	b580      	push	{r7, lr}
    cd12:	b082      	sub	sp, #8
    cd14:	af00      	add	r7, sp, #0
    cd16:	4603      	mov	r3, r0
    cd18:	6039      	str	r1, [r7, #0]
    cd1a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cd1c:	79fb      	ldrb	r3, [r7, #7]
    cd1e:	2200      	movs	r2, #0
    cd20:	6839      	ldr	r1, [r7, #0]
    cd22:	4618      	mov	r0, r3
    cd24:	4b14      	ldr	r3, [pc, #80]	; (cd78 <usbdc_cb_ctl_req+0x68>)
    cd26:	4798      	blx	r3
    cd28:	4603      	mov	r3, r0
    cd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
    cd2e:	d00b      	beq.n	cd48 <usbdc_cb_ctl_req+0x38>
    cd30:	2b01      	cmp	r3, #1
    cd32:	d007      	beq.n	cd44 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cd34:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cd36:	683b      	ldr	r3, [r7, #0]
    cd38:	781b      	ldrb	r3, [r3, #0]
    cd3a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cd3e:	2b00      	cmp	r3, #0
    cd40:	d007      	beq.n	cd52 <usbdc_cb_ctl_req+0x42>
    cd42:	e003      	b.n	cd4c <usbdc_cb_ctl_req+0x3c>
		return true;
    cd44:	2301      	movs	r3, #1
    cd46:	e013      	b.n	cd70 <usbdc_cb_ctl_req+0x60>
		return false;
    cd48:	2300      	movs	r3, #0
    cd4a:	e011      	b.n	cd70 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cd4c:	2b80      	cmp	r3, #128	; 0x80
    cd4e:	d007      	beq.n	cd60 <usbdc_cb_ctl_req+0x50>
    cd50:	e00d      	b.n	cd6e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cd52:	79fb      	ldrb	r3, [r7, #7]
    cd54:	6839      	ldr	r1, [r7, #0]
    cd56:	4618      	mov	r0, r3
    cd58:	4b08      	ldr	r3, [pc, #32]	; (cd7c <usbdc_cb_ctl_req+0x6c>)
    cd5a:	4798      	blx	r3
    cd5c:	4603      	mov	r3, r0
    cd5e:	e007      	b.n	cd70 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cd60:	79fb      	ldrb	r3, [r7, #7]
    cd62:	6839      	ldr	r1, [r7, #0]
    cd64:	4618      	mov	r0, r3
    cd66:	4b06      	ldr	r3, [pc, #24]	; (cd80 <usbdc_cb_ctl_req+0x70>)
    cd68:	4798      	blx	r3
    cd6a:	4603      	mov	r3, r0
    cd6c:	e000      	b.n	cd70 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cd6e:	2300      	movs	r3, #0
	}
}
    cd70:	4618      	mov	r0, r3
    cd72:	3708      	adds	r7, #8
    cd74:	46bd      	mov	sp, r7
    cd76:	bd80      	pop	{r7, pc}
    cd78:	0000cca1 	.word	0x0000cca1
    cd7c:	0000cb41 	.word	0x0000cb41
    cd80:	0000c769 	.word	0x0000c769

0000cd84 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cd84:	b580      	push	{r7, lr}
    cd86:	b082      	sub	sp, #8
    cd88:	af00      	add	r7, sp, #0
    cd8a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cd8c:	687b      	ldr	r3, [r7, #4]
    cd8e:	781b      	ldrb	r3, [r3, #0]
    cd90:	2b00      	cmp	r3, #0
    cd92:	d135      	bne.n	ce00 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cd94:	687b      	ldr	r3, [r7, #4]
    cd96:	785b      	ldrb	r3, [r3, #1]
    cd98:	2b05      	cmp	r3, #5
    cd9a:	d019      	beq.n	cdd0 <usbdc_ctrl_status_end+0x4c>
    cd9c:	2b09      	cmp	r3, #9
    cd9e:	d000      	beq.n	cda2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cda0:	e02f      	b.n	ce02 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cda2:	687b      	ldr	r3, [r7, #4]
    cda4:	885b      	ldrh	r3, [r3, #2]
    cda6:	b29b      	uxth	r3, r3
    cda8:	b2da      	uxtb	r2, r3
    cdaa:	4b17      	ldr	r3, [pc, #92]	; (ce08 <usbdc_ctrl_status_end+0x84>)
    cdac:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cdae:	687b      	ldr	r3, [r7, #4]
    cdb0:	885b      	ldrh	r3, [r3, #2]
    cdb2:	b29b      	uxth	r3, r3
    cdb4:	2b00      	cmp	r3, #0
    cdb6:	d001      	beq.n	cdbc <usbdc_ctrl_status_end+0x38>
    cdb8:	2204      	movs	r2, #4
    cdba:	e000      	b.n	cdbe <usbdc_ctrl_status_end+0x3a>
    cdbc:	2203      	movs	r2, #3
    cdbe:	4b12      	ldr	r3, [pc, #72]	; (ce08 <usbdc_ctrl_status_end+0x84>)
    cdc0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cdc2:	4b11      	ldr	r3, [pc, #68]	; (ce08 <usbdc_ctrl_status_end+0x84>)
    cdc4:	7e9b      	ldrb	r3, [r3, #26]
    cdc6:	4619      	mov	r1, r3
    cdc8:	2001      	movs	r0, #1
    cdca:	4b10      	ldr	r3, [pc, #64]	; (ce0c <usbdc_ctrl_status_end+0x88>)
    cdcc:	4798      	blx	r3
		break;
    cdce:	e018      	b.n	ce02 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cdd0:	687b      	ldr	r3, [r7, #4]
    cdd2:	885b      	ldrh	r3, [r3, #2]
    cdd4:	b29b      	uxth	r3, r3
    cdd6:	b2db      	uxtb	r3, r3
    cdd8:	4618      	mov	r0, r3
    cdda:	4b0d      	ldr	r3, [pc, #52]	; (ce10 <usbdc_ctrl_status_end+0x8c>)
    cddc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cdde:	687b      	ldr	r3, [r7, #4]
    cde0:	885b      	ldrh	r3, [r3, #2]
    cde2:	b29b      	uxth	r3, r3
    cde4:	2b00      	cmp	r3, #0
    cde6:	d001      	beq.n	cdec <usbdc_ctrl_status_end+0x68>
    cde8:	2203      	movs	r2, #3
    cdea:	e000      	b.n	cdee <usbdc_ctrl_status_end+0x6a>
    cdec:	2202      	movs	r2, #2
    cdee:	4b06      	ldr	r3, [pc, #24]	; (ce08 <usbdc_ctrl_status_end+0x84>)
    cdf0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cdf2:	4b05      	ldr	r3, [pc, #20]	; (ce08 <usbdc_ctrl_status_end+0x84>)
    cdf4:	7e9b      	ldrb	r3, [r3, #26]
    cdf6:	4619      	mov	r1, r3
    cdf8:	2001      	movs	r0, #1
    cdfa:	4b04      	ldr	r3, [pc, #16]	; (ce0c <usbdc_ctrl_status_end+0x88>)
    cdfc:	4798      	blx	r3
		break;
    cdfe:	e000      	b.n	ce02 <usbdc_ctrl_status_end+0x7e>
		return;
    ce00:	bf00      	nop
	}
}
    ce02:	3708      	adds	r7, #8
    ce04:	46bd      	mov	sp, r7
    ce06:	bd80      	pop	{r7, pc}
    ce08:	2000108c 	.word	0x2000108c
    ce0c:	0000cc61 	.word	0x0000cc61
    ce10:	0000c9e1 	.word	0x0000c9e1

0000ce14 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    ce14:	b580      	push	{r7, lr}
    ce16:	b082      	sub	sp, #8
    ce18:	af00      	add	r7, sp, #0
    ce1a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ce1c:	2201      	movs	r2, #1
    ce1e:	6879      	ldr	r1, [r7, #4]
    ce20:	2000      	movs	r0, #0
    ce22:	4b03      	ldr	r3, [pc, #12]	; (ce30 <usbdc_ctrl_data_end+0x1c>)
    ce24:	4798      	blx	r3
	return false;
    ce26:	2300      	movs	r3, #0
}
    ce28:	4618      	mov	r0, r3
    ce2a:	3708      	adds	r7, #8
    ce2c:	46bd      	mov	sp, r7
    ce2e:	bd80      	pop	{r7, pc}
    ce30:	0000cca1 	.word	0x0000cca1

0000ce34 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    ce34:	b580      	push	{r7, lr}
    ce36:	b082      	sub	sp, #8
    ce38:	af00      	add	r7, sp, #0
    ce3a:	4603      	mov	r3, r0
    ce3c:	603a      	str	r2, [r7, #0]
    ce3e:	71fb      	strb	r3, [r7, #7]
    ce40:	460b      	mov	r3, r1
    ce42:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    ce44:	79bb      	ldrb	r3, [r7, #6]
    ce46:	2b00      	cmp	r3, #0
    ce48:	d002      	beq.n	ce50 <usbdc_cb_ctl_done+0x1c>
    ce4a:	2b01      	cmp	r3, #1
    ce4c:	d004      	beq.n	ce58 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    ce4e:	e008      	b.n	ce62 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    ce50:	6838      	ldr	r0, [r7, #0]
    ce52:	4b06      	ldr	r3, [pc, #24]	; (ce6c <usbdc_cb_ctl_done+0x38>)
    ce54:	4798      	blx	r3
		break;
    ce56:	e004      	b.n	ce62 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    ce58:	6838      	ldr	r0, [r7, #0]
    ce5a:	4b05      	ldr	r3, [pc, #20]	; (ce70 <usbdc_cb_ctl_done+0x3c>)
    ce5c:	4798      	blx	r3
    ce5e:	4603      	mov	r3, r0
    ce60:	e000      	b.n	ce64 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ce62:	2300      	movs	r3, #0
}
    ce64:	4618      	mov	r0, r3
    ce66:	3708      	adds	r7, #8
    ce68:	46bd      	mov	sp, r7
    ce6a:	bd80      	pop	{r7, pc}
    ce6c:	0000cd85 	.word	0x0000cd85
    ce70:	0000ce15 	.word	0x0000ce15

0000ce74 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ce74:	b580      	push	{r7, lr}
    ce76:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ce78:	4b10      	ldr	r3, [pc, #64]	; (cebc <usbdc_reset+0x48>)
    ce7a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ce7c:	4b10      	ldr	r3, [pc, #64]	; (cec0 <usbdc_reset+0x4c>)
    ce7e:	2202      	movs	r2, #2
    ce80:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ce82:	4b0f      	ldr	r3, [pc, #60]	; (cec0 <usbdc_reset+0x4c>)
    ce84:	2200      	movs	r2, #0
    ce86:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    ce88:	4b0d      	ldr	r3, [pc, #52]	; (cec0 <usbdc_reset+0x4c>)
    ce8a:	2200      	movs	r2, #0
    ce8c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    ce8e:	2000      	movs	r0, #0
    ce90:	4b0c      	ldr	r3, [pc, #48]	; (cec4 <usbdc_reset+0x50>)
    ce92:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ce94:	4b0a      	ldr	r3, [pc, #40]	; (cec0 <usbdc_reset+0x4c>)
    ce96:	7f1b      	ldrb	r3, [r3, #28]
    ce98:	4618      	mov	r0, r3
    ce9a:	4b0b      	ldr	r3, [pc, #44]	; (cec8 <usbdc_reset+0x54>)
    ce9c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ce9e:	4a0b      	ldr	r2, [pc, #44]	; (cecc <usbdc_reset+0x58>)
    cea0:	2100      	movs	r1, #0
    cea2:	2000      	movs	r0, #0
    cea4:	4b0a      	ldr	r3, [pc, #40]	; (ced0 <usbdc_reset+0x5c>)
    cea6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cea8:	4a0a      	ldr	r2, [pc, #40]	; (ced4 <usbdc_reset+0x60>)
    ceaa:	2102      	movs	r1, #2
    ceac:	2000      	movs	r0, #0
    ceae:	4b08      	ldr	r3, [pc, #32]	; (ced0 <usbdc_reset+0x5c>)
    ceb0:	4798      	blx	r3
	usb_d_ep_enable(0);
    ceb2:	2000      	movs	r0, #0
    ceb4:	4b08      	ldr	r3, [pc, #32]	; (ced8 <usbdc_reset+0x64>)
    ceb6:	4798      	blx	r3
}
    ceb8:	bf00      	nop
    ceba:	bd80      	pop	{r7, pc}
    cebc:	0000c8c1 	.word	0x0000c8c1
    cec0:	2000108c 	.word	0x2000108c
    cec4:	00003511 	.word	0x00003511
    cec8:	0000344d 	.word	0x0000344d
    cecc:	0000cd11 	.word	0x0000cd11
    ced0:	00003865 	.word	0x00003865
    ced4:	0000ce35 	.word	0x0000ce35
    ced8:	00003561 	.word	0x00003561

0000cedc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cedc:	b580      	push	{r7, lr}
    cede:	b082      	sub	sp, #8
    cee0:	af00      	add	r7, sp, #0
    cee2:	4603      	mov	r3, r0
    cee4:	6039      	str	r1, [r7, #0]
    cee6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cee8:	79fb      	ldrb	r3, [r7, #7]
    ceea:	2b00      	cmp	r3, #0
    ceec:	d002      	beq.n	cef4 <usbd_event_cb+0x18>
    ceee:	2b01      	cmp	r3, #1
    cef0:	d005      	beq.n	cefe <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cef2:	e007      	b.n	cf04 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cef4:	6839      	ldr	r1, [r7, #0]
    cef6:	2000      	movs	r0, #0
    cef8:	4b04      	ldr	r3, [pc, #16]	; (cf0c <usbd_event_cb+0x30>)
    cefa:	4798      	blx	r3
		break;
    cefc:	e002      	b.n	cf04 <usbd_event_cb+0x28>
		usbdc_reset();
    cefe:	4b04      	ldr	r3, [pc, #16]	; (cf10 <usbd_event_cb+0x34>)
    cf00:	4798      	blx	r3
		break;
    cf02:	bf00      	nop
	}
}
    cf04:	bf00      	nop
    cf06:	3708      	adds	r7, #8
    cf08:	46bd      	mov	sp, r7
    cf0a:	bd80      	pop	{r7, pc}
    cf0c:	0000cc61 	.word	0x0000cc61
    cf10:	0000ce75 	.word	0x0000ce75

0000cf14 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cf14:	b580      	push	{r7, lr}
    cf16:	b088      	sub	sp, #32
    cf18:	af00      	add	r7, sp, #0
    cf1a:	60b9      	str	r1, [r7, #8]
    cf1c:	607a      	str	r2, [r7, #4]
    cf1e:	461a      	mov	r2, r3
    cf20:	4603      	mov	r3, r0
    cf22:	73fb      	strb	r3, [r7, #15]
    cf24:	4613      	mov	r3, r2
    cf26:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf28:	68bb      	ldr	r3, [r7, #8]
    cf2a:	617b      	str	r3, [r7, #20]
    cf2c:	687b      	ldr	r3, [r7, #4]
    cf2e:	61bb      	str	r3, [r7, #24]
    cf30:	7bfb      	ldrb	r3, [r7, #15]
    cf32:	773b      	strb	r3, [r7, #28]
    cf34:	7bbb      	ldrb	r3, [r7, #14]
    cf36:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cf38:	f107 0314 	add.w	r3, r7, #20
    cf3c:	4618      	mov	r0, r3
    cf3e:	4b03      	ldr	r3, [pc, #12]	; (cf4c <usbdc_xfer+0x38>)
    cf40:	4798      	blx	r3
    cf42:	4603      	mov	r3, r0
}
    cf44:	4618      	mov	r0, r3
    cf46:	3720      	adds	r7, #32
    cf48:	46bd      	mov	sp, r7
    cf4a:	bd80      	pop	{r7, pc}
    cf4c:	000035d1 	.word	0x000035d1

0000cf50 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cf50:	b580      	push	{r7, lr}
    cf52:	b082      	sub	sp, #8
    cf54:	af00      	add	r7, sp, #0
    cf56:	4603      	mov	r3, r0
    cf58:	6039      	str	r1, [r7, #0]
    cf5a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cf5c:	79fb      	ldrb	r3, [r7, #7]
    cf5e:	2b01      	cmp	r3, #1
    cf60:	d009      	beq.n	cf76 <usbdc_register_handler+0x26>
    cf62:	2b02      	cmp	r3, #2
    cf64:	d00c      	beq.n	cf80 <usbdc_register_handler+0x30>
    cf66:	2b00      	cmp	r3, #0
    cf68:	d000      	beq.n	cf6c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cf6a:	e00e      	b.n	cf8a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cf6c:	6839      	ldr	r1, [r7, #0]
    cf6e:	4809      	ldr	r0, [pc, #36]	; (cf94 <usbdc_register_handler+0x44>)
    cf70:	4b09      	ldr	r3, [pc, #36]	; (cf98 <usbdc_register_handler+0x48>)
    cf72:	4798      	blx	r3
		break;
    cf74:	e009      	b.n	cf8a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cf76:	6839      	ldr	r1, [r7, #0]
    cf78:	4808      	ldr	r0, [pc, #32]	; (cf9c <usbdc_register_handler+0x4c>)
    cf7a:	4b07      	ldr	r3, [pc, #28]	; (cf98 <usbdc_register_handler+0x48>)
    cf7c:	4798      	blx	r3
		break;
    cf7e:	e004      	b.n	cf8a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cf80:	6839      	ldr	r1, [r7, #0]
    cf82:	4807      	ldr	r0, [pc, #28]	; (cfa0 <usbdc_register_handler+0x50>)
    cf84:	4b04      	ldr	r3, [pc, #16]	; (cf98 <usbdc_register_handler+0x48>)
    cf86:	4798      	blx	r3
		break;
    cf88:	bf00      	nop
	}
}
    cf8a:	bf00      	nop
    cf8c:	3708      	adds	r7, #8
    cf8e:	46bd      	mov	sp, r7
    cf90:	bd80      	pop	{r7, pc}
    cf92:	bf00      	nop
    cf94:	20001090 	.word	0x20001090
    cf98:	000039bd 	.word	0x000039bd
    cf9c:	20001094 	.word	0x20001094
    cfa0:	20001098 	.word	0x20001098

0000cfa4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cfa4:	b580      	push	{r7, lr}
    cfa6:	b084      	sub	sp, #16
    cfa8:	af00      	add	r7, sp, #0
    cfaa:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cfac:	687b      	ldr	r3, [r7, #4]
    cfae:	2b00      	cmp	r3, #0
    cfb0:	bf14      	ite	ne
    cfb2:	2301      	movne	r3, #1
    cfb4:	2300      	moveq	r3, #0
    cfb6:	b2db      	uxtb	r3, r3
    cfb8:	f240 3255 	movw	r2, #853	; 0x355
    cfbc:	4910      	ldr	r1, [pc, #64]	; (d000 <usbdc_init+0x5c>)
    cfbe:	4618      	mov	r0, r3
    cfc0:	4b10      	ldr	r3, [pc, #64]	; (d004 <usbdc_init+0x60>)
    cfc2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cfc4:	4b10      	ldr	r3, [pc, #64]	; (d008 <usbdc_init+0x64>)
    cfc6:	4798      	blx	r3
    cfc8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cfca:	68fb      	ldr	r3, [r7, #12]
    cfcc:	2b00      	cmp	r3, #0
    cfce:	da01      	bge.n	cfd4 <usbdc_init+0x30>
		return rc;
    cfd0:	68fb      	ldr	r3, [r7, #12]
    cfd2:	e010      	b.n	cff6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cfd4:	2220      	movs	r2, #32
    cfd6:	2100      	movs	r1, #0
    cfd8:	480c      	ldr	r0, [pc, #48]	; (d00c <usbdc_init+0x68>)
    cfda:	4b0d      	ldr	r3, [pc, #52]	; (d010 <usbdc_init+0x6c>)
    cfdc:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cfde:	4a0b      	ldr	r2, [pc, #44]	; (d00c <usbdc_init+0x68>)
    cfe0:	687b      	ldr	r3, [r7, #4]
    cfe2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cfe4:	490b      	ldr	r1, [pc, #44]	; (d014 <usbdc_init+0x70>)
    cfe6:	2000      	movs	r0, #0
    cfe8:	4b0b      	ldr	r3, [pc, #44]	; (d018 <usbdc_init+0x74>)
    cfea:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cfec:	490b      	ldr	r1, [pc, #44]	; (d01c <usbdc_init+0x78>)
    cfee:	2001      	movs	r0, #1
    cff0:	4b09      	ldr	r3, [pc, #36]	; (d018 <usbdc_init+0x74>)
    cff2:	4798      	blx	r3

	return 0;
    cff4:	2300      	movs	r3, #0
}
    cff6:	4618      	mov	r0, r3
    cff8:	3710      	adds	r7, #16
    cffa:	46bd      	mov	sp, r7
    cffc:	bd80      	pop	{r7, pc}
    cffe:	bf00      	nop
    d000:	00010b9c 	.word	0x00010b9c
    d004:	000038e1 	.word	0x000038e1
    d008:	00003339 	.word	0x00003339
    d00c:	2000108c 	.word	0x2000108c
    d010:	000103c9 	.word	0x000103c9
    d014:	0000cd01 	.word	0x0000cd01
    d018:	000033e5 	.word	0x000033e5
    d01c:	0000cedd 	.word	0x0000cedd

0000d020 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d020:	b580      	push	{r7, lr}
    d022:	b082      	sub	sp, #8
    d024:	af00      	add	r7, sp, #0
    d026:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d028:	6879      	ldr	r1, [r7, #4]
    d02a:	4803      	ldr	r0, [pc, #12]	; (d038 <usbdc_register_function+0x18>)
    d02c:	4b03      	ldr	r3, [pc, #12]	; (d03c <usbdc_register_function+0x1c>)
    d02e:	4798      	blx	r3
}
    d030:	bf00      	nop
    d032:	3708      	adds	r7, #8
    d034:	46bd      	mov	sp, r7
    d036:	bd80      	pop	{r7, pc}
    d038:	2000109c 	.word	0x2000109c
    d03c:	000039bd 	.word	0x000039bd

0000d040 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d040:	b580      	push	{r7, lr}
    d042:	b082      	sub	sp, #8
    d044:	af00      	add	r7, sp, #0
    d046:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d048:	4b0f      	ldr	r3, [pc, #60]	; (d088 <usbdc_start+0x48>)
    d04a:	7e9b      	ldrb	r3, [r3, #26]
    d04c:	2b00      	cmp	r3, #0
    d04e:	d002      	beq.n	d056 <usbdc_start+0x16>
		return ERR_BUSY;
    d050:	f06f 0303 	mvn.w	r3, #3
    d054:	e013      	b.n	d07e <usbdc_start+0x3e>
	}

	if (desces) {
    d056:	687b      	ldr	r3, [r7, #4]
    d058:	2b00      	cmp	r3, #0
    d05a:	d00e      	beq.n	d07a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d05c:	4a0a      	ldr	r2, [pc, #40]	; (d088 <usbdc_start+0x48>)
    d05e:	687b      	ldr	r3, [r7, #4]
    d060:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d062:	687b      	ldr	r3, [r7, #4]
    d064:	681b      	ldr	r3, [r3, #0]
    d066:	79da      	ldrb	r2, [r3, #7]
    d068:	4b07      	ldr	r3, [pc, #28]	; (d088 <usbdc_start+0x48>)
    d06a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d06c:	4b06      	ldr	r3, [pc, #24]	; (d088 <usbdc_start+0x48>)
    d06e:	2201      	movs	r2, #1
    d070:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d072:	4b06      	ldr	r3, [pc, #24]	; (d08c <usbdc_start+0x4c>)
    d074:	4798      	blx	r3
	return ERR_NONE;
    d076:	2300      	movs	r3, #0
    d078:	e001      	b.n	d07e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d07a:	f06f 0308 	mvn.w	r3, #8
}
    d07e:	4618      	mov	r0, r3
    d080:	3708      	adds	r7, #8
    d082:	46bd      	mov	sp, r7
    d084:	bd80      	pop	{r7, pc}
    d086:	bf00      	nop
    d088:	2000108c 	.word	0x2000108c
    d08c:	00003409 	.word	0x00003409

0000d090 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d090:	b580      	push	{r7, lr}
    d092:	af00      	add	r7, sp, #0
	usb_d_attach();
    d094:	4b01      	ldr	r3, [pc, #4]	; (d09c <usbdc_attach+0xc>)
    d096:	4798      	blx	r3
}
    d098:	bf00      	nop
    d09a:	bd80      	pop	{r7, pc}
    d09c:	0000341d 	.word	0x0000341d

0000d0a0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d0a0:	b480      	push	{r7}
    d0a2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d0a4:	4b03      	ldr	r3, [pc, #12]	; (d0b4 <usbdc_get_ctrl_buffer+0x14>)
    d0a6:	695b      	ldr	r3, [r3, #20]
}
    d0a8:	4618      	mov	r0, r3
    d0aa:	46bd      	mov	sp, r7
    d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0b0:	4770      	bx	lr
    d0b2:	bf00      	nop
    d0b4:	2000108c 	.word	0x2000108c

0000d0b8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d0b8:	b480      	push	{r7}
    d0ba:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d0bc:	4b07      	ldr	r3, [pc, #28]	; (d0dc <usbdc_get_state+0x24>)
    d0be:	7e9b      	ldrb	r3, [r3, #26]
    d0c0:	f003 0310 	and.w	r3, r3, #16
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	d001      	beq.n	d0cc <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d0c8:	2310      	movs	r3, #16
    d0ca:	e001      	b.n	d0d0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d0cc:	4b03      	ldr	r3, [pc, #12]	; (d0dc <usbdc_get_state+0x24>)
    d0ce:	7e9b      	ldrb	r3, [r3, #26]
}
    d0d0:	4618      	mov	r0, r3
    d0d2:	46bd      	mov	sp, r7
    d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0d8:	4770      	bx	lr
    d0da:	bf00      	nop
    d0dc:	2000108c 	.word	0x2000108c

0000d0e0 <usb_get_u16>:
{
    d0e0:	b480      	push	{r7}
    d0e2:	b083      	sub	sp, #12
    d0e4:	af00      	add	r7, sp, #0
    d0e6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d0e8:	687b      	ldr	r3, [r7, #4]
    d0ea:	781b      	ldrb	r3, [r3, #0]
    d0ec:	b29a      	uxth	r2, r3
    d0ee:	687b      	ldr	r3, [r7, #4]
    d0f0:	3301      	adds	r3, #1
    d0f2:	781b      	ldrb	r3, [r3, #0]
    d0f4:	b29b      	uxth	r3, r3
    d0f6:	021b      	lsls	r3, r3, #8
    d0f8:	b29b      	uxth	r3, r3
    d0fa:	4413      	add	r3, r2
    d0fc:	b29b      	uxth	r3, r3
}
    d0fe:	4618      	mov	r0, r3
    d100:	370c      	adds	r7, #12
    d102:	46bd      	mov	sp, r7
    d104:	f85d 7b04 	ldr.w	r7, [sp], #4
    d108:	4770      	bx	lr

0000d10a <usb_desc_len>:
{
    d10a:	b480      	push	{r7}
    d10c:	b083      	sub	sp, #12
    d10e:	af00      	add	r7, sp, #0
    d110:	6078      	str	r0, [r7, #4]
	return desc[0];
    d112:	687b      	ldr	r3, [r7, #4]
    d114:	781b      	ldrb	r3, [r3, #0]
}
    d116:	4618      	mov	r0, r3
    d118:	370c      	adds	r7, #12
    d11a:	46bd      	mov	sp, r7
    d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d120:	4770      	bx	lr

0000d122 <usb_desc_type>:
{
    d122:	b480      	push	{r7}
    d124:	b083      	sub	sp, #12
    d126:	af00      	add	r7, sp, #0
    d128:	6078      	str	r0, [r7, #4]
	return desc[1];
    d12a:	687b      	ldr	r3, [r7, #4]
    d12c:	3301      	adds	r3, #1
    d12e:	781b      	ldrb	r3, [r3, #0]
}
    d130:	4618      	mov	r0, r3
    d132:	370c      	adds	r7, #12
    d134:	46bd      	mov	sp, r7
    d136:	f85d 7b04 	ldr.w	r7, [sp], #4
    d13a:	4770      	bx	lr

0000d13c <usb_desc_next>:
{
    d13c:	b580      	push	{r7, lr}
    d13e:	b082      	sub	sp, #8
    d140:	af00      	add	r7, sp, #0
    d142:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d144:	6878      	ldr	r0, [r7, #4]
    d146:	4b05      	ldr	r3, [pc, #20]	; (d15c <usb_desc_next+0x20>)
    d148:	4798      	blx	r3
    d14a:	4603      	mov	r3, r0
    d14c:	461a      	mov	r2, r3
    d14e:	687b      	ldr	r3, [r7, #4]
    d150:	4413      	add	r3, r2
}
    d152:	4618      	mov	r0, r3
    d154:	3708      	adds	r7, #8
    d156:	46bd      	mov	sp, r7
    d158:	bd80      	pop	{r7, pc}
    d15a:	bf00      	nop
    d15c:	0000d10b 	.word	0x0000d10b

0000d160 <usb_cfg_desc_total_len>:
{
    d160:	b580      	push	{r7, lr}
    d162:	b082      	sub	sp, #8
    d164:	af00      	add	r7, sp, #0
    d166:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d168:	687b      	ldr	r3, [r7, #4]
    d16a:	3302      	adds	r3, #2
    d16c:	4618      	mov	r0, r3
    d16e:	4b03      	ldr	r3, [pc, #12]	; (d17c <usb_cfg_desc_total_len+0x1c>)
    d170:	4798      	blx	r3
    d172:	4603      	mov	r3, r0
}
    d174:	4618      	mov	r0, r3
    d176:	3708      	adds	r7, #8
    d178:	46bd      	mov	sp, r7
    d17a:	bd80      	pop	{r7, pc}
    d17c:	0000d0e1 	.word	0x0000d0e1

0000d180 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d180:	b580      	push	{r7, lr}
    d182:	b082      	sub	sp, #8
    d184:	af00      	add	r7, sp, #0
    d186:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d188:	6878      	ldr	r0, [r7, #4]
    d18a:	4b05      	ldr	r3, [pc, #20]	; (d1a0 <usb_cfg_desc_next+0x20>)
    d18c:	4798      	blx	r3
    d18e:	4603      	mov	r3, r0
    d190:	461a      	mov	r2, r3
    d192:	687b      	ldr	r3, [r7, #4]
    d194:	4413      	add	r3, r2
}
    d196:	4618      	mov	r0, r3
    d198:	3708      	adds	r7, #8
    d19a:	46bd      	mov	sp, r7
    d19c:	bd80      	pop	{r7, pc}
    d19e:	bf00      	nop
    d1a0:	0000d161 	.word	0x0000d161

0000d1a4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d1a4:	b580      	push	{r7, lr}
    d1a6:	b084      	sub	sp, #16
    d1a8:	af00      	add	r7, sp, #0
    d1aa:	60f8      	str	r0, [r7, #12]
    d1ac:	60b9      	str	r1, [r7, #8]
    d1ae:	4613      	mov	r3, r2
    d1b0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d1b2:	e015      	b.n	d1e0 <usb_find_desc+0x3c>
		_desc_len_check();
    d1b4:	68f8      	ldr	r0, [r7, #12]
    d1b6:	4b0f      	ldr	r3, [pc, #60]	; (d1f4 <usb_find_desc+0x50>)
    d1b8:	4798      	blx	r3
    d1ba:	4603      	mov	r3, r0
    d1bc:	2b01      	cmp	r3, #1
    d1be:	d801      	bhi.n	d1c4 <usb_find_desc+0x20>
    d1c0:	2300      	movs	r3, #0
    d1c2:	e012      	b.n	d1ea <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d1c4:	68f8      	ldr	r0, [r7, #12]
    d1c6:	4b0c      	ldr	r3, [pc, #48]	; (d1f8 <usb_find_desc+0x54>)
    d1c8:	4798      	blx	r3
    d1ca:	4603      	mov	r3, r0
    d1cc:	461a      	mov	r2, r3
    d1ce:	79fb      	ldrb	r3, [r7, #7]
    d1d0:	4293      	cmp	r3, r2
    d1d2:	d101      	bne.n	d1d8 <usb_find_desc+0x34>
			return desc;
    d1d4:	68fb      	ldr	r3, [r7, #12]
    d1d6:	e008      	b.n	d1ea <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d1d8:	68f8      	ldr	r0, [r7, #12]
    d1da:	4b08      	ldr	r3, [pc, #32]	; (d1fc <usb_find_desc+0x58>)
    d1dc:	4798      	blx	r3
    d1de:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d1e0:	68fa      	ldr	r2, [r7, #12]
    d1e2:	68bb      	ldr	r3, [r7, #8]
    d1e4:	429a      	cmp	r2, r3
    d1e6:	d3e5      	bcc.n	d1b4 <usb_find_desc+0x10>
	}
	return NULL;
    d1e8:	2300      	movs	r3, #0
}
    d1ea:	4618      	mov	r0, r3
    d1ec:	3710      	adds	r7, #16
    d1ee:	46bd      	mov	sp, r7
    d1f0:	bd80      	pop	{r7, pc}
    d1f2:	bf00      	nop
    d1f4:	0000d10b 	.word	0x0000d10b
    d1f8:	0000d123 	.word	0x0000d123
    d1fc:	0000d13d 	.word	0x0000d13d

0000d200 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d200:	b580      	push	{r7, lr}
    d202:	b082      	sub	sp, #8
    d204:	af00      	add	r7, sp, #0
    d206:	6078      	str	r0, [r7, #4]
    d208:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d20a:	e019      	b.n	d240 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d20c:	6878      	ldr	r0, [r7, #4]
    d20e:	4b12      	ldr	r3, [pc, #72]	; (d258 <usb_find_ep_desc+0x58>)
    d210:	4798      	blx	r3
    d212:	4603      	mov	r3, r0
    d214:	2b01      	cmp	r3, #1
    d216:	d801      	bhi.n	d21c <usb_find_ep_desc+0x1c>
    d218:	2300      	movs	r3, #0
    d21a:	e018      	b.n	d24e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d21c:	6878      	ldr	r0, [r7, #4]
    d21e:	4b0f      	ldr	r3, [pc, #60]	; (d25c <usb_find_ep_desc+0x5c>)
    d220:	4798      	blx	r3
    d222:	4603      	mov	r3, r0
    d224:	2b04      	cmp	r3, #4
    d226:	d010      	beq.n	d24a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d228:	6878      	ldr	r0, [r7, #4]
    d22a:	4b0c      	ldr	r3, [pc, #48]	; (d25c <usb_find_ep_desc+0x5c>)
    d22c:	4798      	blx	r3
    d22e:	4603      	mov	r3, r0
    d230:	2b05      	cmp	r3, #5
    d232:	d101      	bne.n	d238 <usb_find_ep_desc+0x38>
			return desc;
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	e00a      	b.n	d24e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d238:	6878      	ldr	r0, [r7, #4]
    d23a:	4b09      	ldr	r3, [pc, #36]	; (d260 <usb_find_ep_desc+0x60>)
    d23c:	4798      	blx	r3
    d23e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d240:	687a      	ldr	r2, [r7, #4]
    d242:	683b      	ldr	r3, [r7, #0]
    d244:	429a      	cmp	r2, r3
    d246:	d3e1      	bcc.n	d20c <usb_find_ep_desc+0xc>
    d248:	e000      	b.n	d24c <usb_find_ep_desc+0x4c>
			break;
    d24a:	bf00      	nop
	}
	return NULL;
    d24c:	2300      	movs	r3, #0
}
    d24e:	4618      	mov	r0, r3
    d250:	3708      	adds	r7, #8
    d252:	46bd      	mov	sp, r7
    d254:	bd80      	pop	{r7, pc}
    d256:	bf00      	nop
    d258:	0000d10b 	.word	0x0000d10b
    d25c:	0000d123 	.word	0x0000d123
    d260:	0000d13d 	.word	0x0000d13d

0000d264 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d264:	b580      	push	{r7, lr}
    d266:	b084      	sub	sp, #16
    d268:	af00      	add	r7, sp, #0
    d26a:	60f8      	str	r0, [r7, #12]
    d26c:	60b9      	str	r1, [r7, #8]
    d26e:	4613      	mov	r3, r2
    d270:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d272:	2202      	movs	r2, #2
    d274:	68b9      	ldr	r1, [r7, #8]
    d276:	68f8      	ldr	r0, [r7, #12]
    d278:	4b15      	ldr	r3, [pc, #84]	; (d2d0 <usb_find_cfg_desc+0x6c>)
    d27a:	4798      	blx	r3
    d27c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d27e:	68fb      	ldr	r3, [r7, #12]
    d280:	2b00      	cmp	r3, #0
    d282:	d11a      	bne.n	d2ba <usb_find_cfg_desc+0x56>
		return NULL;
    d284:	2300      	movs	r3, #0
    d286:	e01f      	b.n	d2c8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d288:	68f8      	ldr	r0, [r7, #12]
    d28a:	4b12      	ldr	r3, [pc, #72]	; (d2d4 <usb_find_cfg_desc+0x70>)
    d28c:	4798      	blx	r3
    d28e:	4603      	mov	r3, r0
    d290:	2b01      	cmp	r3, #1
    d292:	d801      	bhi.n	d298 <usb_find_cfg_desc+0x34>
    d294:	2300      	movs	r3, #0
    d296:	e017      	b.n	d2c8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d298:	68fb      	ldr	r3, [r7, #12]
    d29a:	3301      	adds	r3, #1
    d29c:	781b      	ldrb	r3, [r3, #0]
    d29e:	2b02      	cmp	r3, #2
    d2a0:	d110      	bne.n	d2c4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d2a2:	68fb      	ldr	r3, [r7, #12]
    d2a4:	3305      	adds	r3, #5
    d2a6:	781b      	ldrb	r3, [r3, #0]
    d2a8:	79fa      	ldrb	r2, [r7, #7]
    d2aa:	429a      	cmp	r2, r3
    d2ac:	d101      	bne.n	d2b2 <usb_find_cfg_desc+0x4e>
			return desc;
    d2ae:	68fb      	ldr	r3, [r7, #12]
    d2b0:	e00a      	b.n	d2c8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d2b2:	68f8      	ldr	r0, [r7, #12]
    d2b4:	4b08      	ldr	r3, [pc, #32]	; (d2d8 <usb_find_cfg_desc+0x74>)
    d2b6:	4798      	blx	r3
    d2b8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d2ba:	68fa      	ldr	r2, [r7, #12]
    d2bc:	68bb      	ldr	r3, [r7, #8]
    d2be:	429a      	cmp	r2, r3
    d2c0:	d3e2      	bcc.n	d288 <usb_find_cfg_desc+0x24>
    d2c2:	e000      	b.n	d2c6 <usb_find_cfg_desc+0x62>
			break;
    d2c4:	bf00      	nop
	}
	return NULL;
    d2c6:	2300      	movs	r3, #0
}
    d2c8:	4618      	mov	r0, r3
    d2ca:	3710      	adds	r7, #16
    d2cc:	46bd      	mov	sp, r7
    d2ce:	bd80      	pop	{r7, pc}
    d2d0:	0000d1a5 	.word	0x0000d1a5
    d2d4:	0000d10b 	.word	0x0000d10b
    d2d8:	0000d181 	.word	0x0000d181

0000d2dc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d2dc:	b580      	push	{r7, lr}
    d2de:	b086      	sub	sp, #24
    d2e0:	af00      	add	r7, sp, #0
    d2e2:	60f8      	str	r0, [r7, #12]
    d2e4:	60b9      	str	r1, [r7, #8]
    d2e6:	4613      	mov	r3, r2
    d2e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d2ea:	2300      	movs	r3, #0
    d2ec:	75fb      	strb	r3, [r7, #23]
    d2ee:	e020      	b.n	d332 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d2f0:	2203      	movs	r2, #3
    d2f2:	68b9      	ldr	r1, [r7, #8]
    d2f4:	68f8      	ldr	r0, [r7, #12]
    d2f6:	4b13      	ldr	r3, [pc, #76]	; (d344 <usb_find_str_desc+0x68>)
    d2f8:	4798      	blx	r3
    d2fa:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d2fc:	68fb      	ldr	r3, [r7, #12]
    d2fe:	2b00      	cmp	r3, #0
    d300:	d015      	beq.n	d32e <usb_find_str_desc+0x52>
			_desc_len_check();
    d302:	68f8      	ldr	r0, [r7, #12]
    d304:	4b10      	ldr	r3, [pc, #64]	; (d348 <usb_find_str_desc+0x6c>)
    d306:	4798      	blx	r3
    d308:	4603      	mov	r3, r0
    d30a:	2b01      	cmp	r3, #1
    d30c:	d801      	bhi.n	d312 <usb_find_str_desc+0x36>
    d30e:	2300      	movs	r3, #0
    d310:	e014      	b.n	d33c <usb_find_str_desc+0x60>
			if (i == str_index) {
    d312:	7dfa      	ldrb	r2, [r7, #23]
    d314:	79fb      	ldrb	r3, [r7, #7]
    d316:	429a      	cmp	r2, r3
    d318:	d101      	bne.n	d31e <usb_find_str_desc+0x42>
				return desc;
    d31a:	68fb      	ldr	r3, [r7, #12]
    d31c:	e00e      	b.n	d33c <usb_find_str_desc+0x60>
			}
			i++;
    d31e:	7dfb      	ldrb	r3, [r7, #23]
    d320:	3301      	adds	r3, #1
    d322:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d324:	68f8      	ldr	r0, [r7, #12]
    d326:	4b09      	ldr	r3, [pc, #36]	; (d34c <usb_find_str_desc+0x70>)
    d328:	4798      	blx	r3
    d32a:	60f8      	str	r0, [r7, #12]
    d32c:	e001      	b.n	d332 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d32e:	2300      	movs	r3, #0
    d330:	e004      	b.n	d33c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d332:	68fa      	ldr	r2, [r7, #12]
    d334:	68bb      	ldr	r3, [r7, #8]
    d336:	429a      	cmp	r2, r3
    d338:	d3da      	bcc.n	d2f0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d33a:	2300      	movs	r3, #0
}
    d33c:	4618      	mov	r0, r3
    d33e:	3718      	adds	r7, #24
    d340:	46bd      	mov	sp, r7
    d342:	bd80      	pop	{r7, pc}
    d344:	0000d1a5 	.word	0x0000d1a5
    d348:	0000d10b 	.word	0x0000d10b
    d34c:	0000d13d 	.word	0x0000d13d

0000d350 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
    d350:	b480      	push	{r7}
    d352:	b083      	sub	sp, #12
    d354:	af00      	add	r7, sp, #0
    d356:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
    d358:	4b04      	ldr	r3, [pc, #16]	; (d36c <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
    d35a:	681b      	ldr	r3, [r3, #0]
    d35c:	2201      	movs	r2, #1
    d35e:	709a      	strb	r2, [r3, #2]
	asm("nop");
    d360:	bf00      	nop
}
    d362:	bf00      	nop
    d364:	370c      	adds	r7, #12
    d366:	46bd      	mov	sp, r7
    d368:	bc80      	pop	{r7}
    d36a:	4770      	bx	lr
    d36c:	200011ac 	.word	0x200011ac

0000d370 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
    d370:	b480      	push	{r7}
    d372:	b083      	sub	sp, #12
    d374:	af00      	add	r7, sp, #0
    d376:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
    d378:	687b      	ldr	r3, [r7, #4]
    d37a:	4618      	mov	r0, r3
    d37c:	370c      	adds	r7, #12
    d37e:	46bd      	mov	sp, r7
    d380:	bc80      	pop	{r7}
    d382:	4770      	bx	lr

0000d384 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
    d384:	b480      	push	{r7}
    d386:	b083      	sub	sp, #12
    d388:	af00      	add	r7, sp, #0
    d38a:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
    d38c:	687b      	ldr	r3, [r7, #4]
    d38e:	4618      	mov	r0, r3
    d390:	370c      	adds	r7, #12
    d392:	46bd      	mov	sp, r7
    d394:	bc80      	pop	{r7}
    d396:	4770      	bx	lr

0000d398 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
    d398:	b580      	push	{r7, lr}
    d39a:	b084      	sub	sp, #16
    d39c:	af00      	add	r7, sp, #0
    d39e:	60f8      	str	r0, [r7, #12]
    d3a0:	60b9      	str	r1, [r7, #8]
    d3a2:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
    d3a4:	4a1c      	ldr	r2, [pc, #112]	; (d418 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
    d3a6:	68fb      	ldr	r3, [r7, #12]
    d3a8:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
    d3aa:	68fb      	ldr	r3, [r7, #12]
    d3ac:	68ba      	ldr	r2, [r7, #8]
    d3ae:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
    d3b0:	68fb      	ldr	r3, [r7, #12]
    d3b2:	687a      	ldr	r2, [r7, #4]
    d3b4:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
    d3b6:	68fb      	ldr	r3, [r7, #12]
    d3b8:	6a1b      	ldr	r3, [r3, #32]
    d3ba:	68da      	ldr	r2, [r3, #12]
    d3bc:	68fb      	ldr	r3, [r7, #12]
    d3be:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
    d3c0:	68fb      	ldr	r3, [r7, #12]
    d3c2:	6a1b      	ldr	r3, [r3, #32]
    d3c4:	689a      	ldr	r2, [r3, #8]
    d3c6:	68fb      	ldr	r3, [r7, #12]
    d3c8:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
    d3ca:	68fb      	ldr	r3, [r7, #12]
    d3cc:	4a13      	ldr	r2, [pc, #76]	; (d41c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
    d3ce:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
    d3d0:	68fb      	ldr	r3, [r7, #12]
    d3d2:	2204      	movs	r2, #4
    d3d4:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
    d3d6:	68fb      	ldr	r3, [r7, #12]
    d3d8:	2209      	movs	r2, #9
    d3da:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
    d3dc:	68fb      	ldr	r3, [r7, #12]
    d3de:	220e      	movs	r2, #14
    d3e0:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
    d3e2:	68fb      	ldr	r3, [r7, #12]
    d3e4:	2213      	movs	r2, #19
    d3e6:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
    d3e8:	20c8      	movs	r0, #200	; 0xc8
    d3ea:	4b0d      	ldr	r3, [pc, #52]	; (d420 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
    d3ec:	4798      	blx	r3
	temperatureTimer.Init();
    d3ee:	480d      	ldr	r0, [pc, #52]	; (d424 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
    d3f0:	4b0d      	ldr	r3, [pc, #52]	; (d428 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
    d3f2:	4798      	blx	r3
	configure_channels();
    d3f4:	68f8      	ldr	r0, [r7, #12]
    d3f6:	4b0d      	ldr	r3, [pc, #52]	; (d42c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
    d3f8:	4798      	blx	r3
	configure_global_parameters();
    d3fa:	68f8      	ldr	r0, [r7, #12]
    d3fc:	4b0c      	ldr	r3, [pc, #48]	; (d430 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
    d3fe:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
    d400:	68fb      	ldr	r3, [r7, #12]
    d402:	2201      	movs	r2, #1
    d404:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
    d406:	68f8      	ldr	r0, [r7, #12]
    d408:	4b0a      	ldr	r3, [pc, #40]	; (d434 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
    d40a:	4798      	blx	r3
    d40c:	4603      	mov	r3, r0
}
    d40e:	4618      	mov	r0, r3
    d410:	3710      	adds	r7, #16
    d412:	46bd      	mov	sp, r7
    d414:	bd80      	pop	{r7, pc}
    d416:	bf00      	nop
    d418:	200011ac 	.word	0x200011ac
    d41c:	200010ec 	.word	0x200010ec
    d420:	0000b149 	.word	0x0000b149
    d424:	200010ac 	.word	0x200010ac
    d428:	0000e0e5 	.word	0x0000e0e5
    d42c:	0000d841 	.word	0x0000d841
    d430:	0000d8f9 	.word	0x0000d8f9
    d434:	0000d931 	.word	0x0000d931

0000d438 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
    d438:	b590      	push	{r4, r7, lr}
    d43a:	b089      	sub	sp, #36	; 0x24
    d43c:	af02      	add	r7, sp, #8
    d43e:	60f8      	str	r0, [r7, #12]
    d440:	60b9      	str	r1, [r7, #8]
    d442:	603b      	str	r3, [r7, #0]
    d444:	4613      	mov	r3, r2
    d446:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
    d448:	79fb      	ldrb	r3, [r7, #7]
    d44a:	461a      	mov	r2, r3
    d44c:	f44f 7100 	mov.w	r1, #512	; 0x200
    d450:	68f8      	ldr	r0, [r7, #12]
    d452:	4b0b      	ldr	r3, [pc, #44]	; (d480 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
    d454:	4798      	blx	r3
    d456:	4603      	mov	r3, r0
    d458:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
    d45a:	8afa      	ldrh	r2, [r7, #22]
    d45c:	683b      	ldr	r3, [r7, #0]
    d45e:	9300      	str	r3, [sp, #0]
    d460:	4613      	mov	r3, r2
    d462:	2202      	movs	r2, #2
    d464:	68b9      	ldr	r1, [r7, #8]
    d466:	68f8      	ldr	r0, [r7, #12]
    d468:	4c06      	ldr	r4, [pc, #24]	; (d484 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
    d46a:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
    d46c:	8afb      	ldrh	r3, [r7, #22]
    d46e:	79fa      	ldrb	r2, [r7, #7]
    d470:	68b9      	ldr	r1, [r7, #8]
    d472:	68f8      	ldr	r0, [r7, #12]
    d474:	4c04      	ldr	r4, [pc, #16]	; (d488 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
    d476:	47a0      	blx	r4
}
    d478:	bf00      	nop
    d47a:	371c      	adds	r7, #28
    d47c:	46bd      	mov	sp, r7
    d47e:	bd90      	pop	{r4, r7, pc}
    d480:	0000d815 	.word	0x0000d815
    d484:	0000d6d5 	.word	0x0000d6d5
    d488:	0000d4d9 	.word	0x0000d4d9

0000d48c <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
    d48c:	b590      	push	{r4, r7, lr}
    d48e:	b087      	sub	sp, #28
    d490:	af02      	add	r7, sp, #8
    d492:	6078      	str	r0, [r7, #4]
    d494:	460b      	mov	r3, r1
    d496:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
    d498:	78fb      	ldrb	r3, [r7, #3]
    d49a:	687a      	ldr	r2, [r7, #4]
    d49c:	4413      	add	r3, r2
    d49e:	78db      	ldrb	r3, [r3, #3]
    d4a0:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
    d4a2:	687b      	ldr	r3, [r7, #4]
    d4a4:	2200      	movs	r2, #0
    d4a6:	705a      	strb	r2, [r3, #1]
	ready=false;
    d4a8:	687b      	ldr	r3, [r7, #4]
    d4aa:	2200      	movs	r2, #0
    d4ac:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d4b2:	7bfb      	ldrb	r3, [r7, #15]
    d4b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d4b8:	b2db      	uxtb	r3, r3
    d4ba:	9300      	str	r3, [sp, #0]
    d4bc:	2300      	movs	r3, #0
    d4be:	2202      	movs	r2, #2
    d4c0:	6878      	ldr	r0, [r7, #4]
    d4c2:	4c04      	ldr	r4, [pc, #16]	; (d4d4 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
    d4c4:	47a0      	blx	r4
	channelOnProcess=channel_number;
    d4c6:	687b      	ldr	r3, [r7, #4]
    d4c8:	7bfa      	ldrb	r2, [r7, #15]
    d4ca:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
    d4cc:	bf00      	nop
    d4ce:	3714      	adds	r7, #20
    d4d0:	46bd      	mov	sp, r7
    d4d2:	bd90      	pop	{r4, r7, pc}
    d4d4:	0000d7a5 	.word	0x0000d7a5

0000d4d8 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
    d4d8:	b590      	push	{r4, r7, lr}
    d4da:	b089      	sub	sp, #36	; 0x24
    d4dc:	af02      	add	r7, sp, #8
    d4de:	60f8      	str	r0, [r7, #12]
    d4e0:	60b9      	str	r1, [r7, #8]
    d4e2:	4611      	mov	r1, r2
    d4e4:	461a      	mov	r2, r3
    d4e6:	460b      	mov	r3, r1
    d4e8:	71fb      	strb	r3, [r7, #7]
    d4ea:	4613      	mov	r3, r2
    d4ec:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
    d4ee:	88ba      	ldrh	r2, [r7, #4]
    d4f0:	2300      	movs	r3, #0
    d4f2:	9300      	str	r3, [sp, #0]
    d4f4:	4613      	mov	r3, r2
    d4f6:	2203      	movs	r2, #3
    d4f8:	68b9      	ldr	r1, [r7, #8]
    d4fa:	68f8      	ldr	r0, [r7, #12]
    d4fc:	4c03      	ldr	r4, [pc, #12]	; (d50c <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
    d4fe:	47a0      	blx	r4
    d500:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
    d502:	bf00      	nop
    d504:	371c      	adds	r7, #28
    d506:	46bd      	mov	sp, r7
    d508:	bd90      	pop	{r4, r7, pc}
    d50a:	bf00      	nop
    d50c:	0000d6d5 	.word	0x0000d6d5

0000d510 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
    d510:	b590      	push	{r4, r7, lr}
    d512:	b085      	sub	sp, #20
    d514:	af02      	add	r7, sp, #8
    d516:	6078      	str	r0, [r7, #4]
    d518:	460b      	mov	r3, r1
    d51a:	70fb      	strb	r3, [r7, #3]
    d51c:	4613      	mov	r3, r2
    d51e:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
    d520:	78fb      	ldrb	r3, [r7, #3]
    d522:	461a      	mov	r2, r3
    d524:	2110      	movs	r1, #16
    d526:	6878      	ldr	r0, [r7, #4]
    d528:	4b17      	ldr	r3, [pc, #92]	; (d588 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
    d52a:	4798      	blx	r3
    d52c:	4603      	mov	r3, r0
    d52e:	461a      	mov	r2, r3
    d530:	687b      	ldr	r3, [r7, #4]
    d532:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
    d536:	687b      	ldr	r3, [r7, #4]
    d538:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d53a:	687b      	ldr	r3, [r7, #4]
    d53c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
    d540:	2300      	movs	r3, #0
    d542:	9300      	str	r3, [sp, #0]
    d544:	4613      	mov	r3, r2
    d546:	2203      	movs	r2, #3
    d548:	6878      	ldr	r0, [r7, #4]
    d54a:	4c10      	ldr	r4, [pc, #64]	; (d58c <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
    d54c:	47a0      	blx	r4
    d54e:	4602      	mov	r2, r0
    d550:	687b      	ldr	r3, [r7, #4]
    d552:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
    d554:	687b      	ldr	r3, [r7, #4]
    d556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d558:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d55c:	687b      	ldr	r3, [r7, #4]
    d55e:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
    d560:	687b      	ldr	r3, [r7, #4]
    d562:	6d19      	ldr	r1, [r3, #80]	; 0x50
    d564:	78bb      	ldrb	r3, [r7, #2]
    d566:	78fa      	ldrb	r2, [r7, #3]
    d568:	6878      	ldr	r0, [r7, #4]
    d56a:	4c09      	ldr	r4, [pc, #36]	; (d590 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
    d56c:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
    d56e:	687b      	ldr	r3, [r7, #4]
    d570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d572:	0e1b      	lsrs	r3, r3, #24
    d574:	b2da      	uxtb	r2, r3
    d576:	687b      	ldr	r3, [r7, #4]
    d578:	71da      	strb	r2, [r3, #7]
	return scaled_result;
    d57a:	687b      	ldr	r3, [r7, #4]
    d57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
    d57e:	4618      	mov	r0, r3
    d580:	370c      	adds	r7, #12
    d582:	46bd      	mov	sp, r7
    d584:	bd90      	pop	{r4, r7, pc}
    d586:	bf00      	nop
    d588:	0000d815 	.word	0x0000d815
    d58c:	0000d6d5 	.word	0x0000d6d5
    d590:	0000d5e9 	.word	0x0000d5e9

0000d594 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
    d594:	b580      	push	{r7, lr}
    d596:	b082      	sub	sp, #8
    d598:	af00      	add	r7, sp, #0
    d59a:	6078      	str	r0, [r7, #4]
    d59c:	460b      	mov	r3, r1
    d59e:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
    d5a0:	78fb      	ldrb	r3, [r7, #3]
    d5a2:	687a      	ldr	r2, [r7, #4]
    d5a4:	4413      	add	r3, r2
    d5a6:	78db      	ldrb	r3, [r3, #3]
    d5a8:	4619      	mov	r1, r3
    d5aa:	6878      	ldr	r0, [r7, #4]
    d5ac:	4b03      	ldr	r3, [pc, #12]	; (d5bc <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
    d5ae:	4798      	blx	r3
    d5b0:	4603      	mov	r3, r0
}
    d5b2:	4618      	mov	r0, r3
    d5b4:	3708      	adds	r7, #8
    d5b6:	46bd      	mov	sp, r7
    d5b8:	bd80      	pop	{r7, pc}
    d5ba:	bf00      	nop
    d5bc:	0000d5c1 	.word	0x0000d5c1

0000d5c0 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
    d5c0:	b580      	push	{r7, lr}
    d5c2:	b082      	sub	sp, #8
    d5c4:	af00      	add	r7, sp, #0
    d5c6:	6078      	str	r0, [r7, #4]
    d5c8:	460b      	mov	r3, r1
    d5ca:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
    d5cc:	78fb      	ldrb	r3, [r7, #3]
    d5ce:	2202      	movs	r2, #2
    d5d0:	4619      	mov	r1, r3
    d5d2:	6878      	ldr	r0, [r7, #4]
    d5d4:	4b03      	ldr	r3, [pc, #12]	; (d5e4 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
    d5d6:	4798      	blx	r3
    d5d8:	4603      	mov	r3, r0
}
    d5da:	4618      	mov	r0, r3
    d5dc:	3708      	adds	r7, #8
    d5de:	46bd      	mov	sp, r7
    d5e0:	bd80      	pop	{r7, pc}
    d5e2:	bf00      	nop
    d5e4:	0000d511 	.word	0x0000d511

0000d5e8 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
    d5e8:	b580      	push	{r7, lr}
    d5ea:	b084      	sub	sp, #16
    d5ec:	af00      	add	r7, sp, #0
    d5ee:	60f8      	str	r0, [r7, #12]
    d5f0:	60b9      	str	r1, [r7, #8]
    d5f2:	4611      	mov	r1, r2
    d5f4:	461a      	mov	r2, r3
    d5f6:	460b      	mov	r3, r1
    d5f8:	71fb      	strb	r3, [r7, #7]
    d5fa:	4613      	mov	r3, r2
    d5fc:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
    d5fe:	68ba      	ldr	r2, [r7, #8]
    d600:	68fb      	ldr	r3, [r7, #12]
    d602:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
    d604:	68fb      	ldr	r3, [r7, #12]
    d606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    d60c:	2b00      	cmp	r3, #0
    d60e:	d006      	beq.n	d61e <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
    d610:	68fb      	ldr	r3, [r7, #12]
    d612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d618:	461a      	mov	r2, r3
    d61a:	68fb      	ldr	r3, [r7, #12]
    d61c:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
    d61e:	79bb      	ldrb	r3, [r7, #6]
    d620:	2b02      	cmp	r3, #2
    d622:	d11d      	bne.n	d660 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
    d624:	68fb      	ldr	r3, [r7, #12]
    d626:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d628:	4b18      	ldr	r3, [pc, #96]	; (d68c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
    d62a:	4610      	mov	r0, r2
    d62c:	4798      	blx	r3
    d62e:	4602      	mov	r2, r0
    d630:	4b17      	ldr	r3, [pc, #92]	; (d690 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
    d632:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
    d636:	4610      	mov	r0, r2
    d638:	4798      	blx	r3
    d63a:	4603      	mov	r3, r0
    d63c:	461a      	mov	r2, r3
    d63e:	68fb      	ldr	r3, [r7, #12]
    d640:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
    d642:	79fb      	ldrb	r3, [r7, #7]
    d644:	4619      	mov	r1, r3
    d646:	68f8      	ldr	r0, [r7, #12]
    d648:	4b12      	ldr	r3, [pc, #72]	; (d694 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
    d64a:	4798      	blx	r3
    d64c:	4603      	mov	r3, r0
    d64e:	4618      	mov	r0, r3
    d650:	68fb      	ldr	r3, [r7, #12]
    d652:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    d654:	68f9      	ldr	r1, [r7, #12]
    d656:	1c83      	adds	r3, r0, #2
    d658:	009b      	lsls	r3, r3, #2
    d65a:	440b      	add	r3, r1
    d65c:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
    d65e:	e011      	b.n	d684 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
    d660:	79bb      	ldrb	r3, [r7, #6]
    d662:	2b01      	cmp	r3, #1
    d664:	d10e      	bne.n	d684 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
    d666:	68fb      	ldr	r3, [r7, #12]
    d668:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d66a:	4b08      	ldr	r3, [pc, #32]	; (d68c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
    d66c:	4610      	mov	r0, r2
    d66e:	4798      	blx	r3
    d670:	4602      	mov	r2, r0
    d672:	4b07      	ldr	r3, [pc, #28]	; (d690 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
    d674:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
    d678:	4610      	mov	r0, r2
    d67a:	4798      	blx	r3
    d67c:	4603      	mov	r3, r0
    d67e:	461a      	mov	r2, r3
    d680:	68fb      	ldr	r3, [r7, #12]
    d682:	65da      	str	r2, [r3, #92]	; 0x5c
}
    d684:	bf00      	nop
    d686:	3710      	adds	r7, #16
    d688:	46bd      	mov	sp, r7
    d68a:	bd80      	pop	{r7, pc}
    d68c:	0000fed5 	.word	0x0000fed5
    d690:	000100e5 	.word	0x000100e5
    d694:	0000d699 	.word	0x0000d699

0000d698 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
    d698:	b480      	push	{r7}
    d69a:	b085      	sub	sp, #20
    d69c:	af00      	add	r7, sp, #0
    d69e:	6078      	str	r0, [r7, #4]
    d6a0:	460b      	mov	r3, r1
    d6a2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
    d6a4:	2300      	movs	r3, #0
    d6a6:	73fb      	strb	r3, [r7, #15]
    d6a8:	7bfb      	ldrb	r3, [r7, #15]
    d6aa:	2b03      	cmp	r3, #3
    d6ac:	dc0c      	bgt.n	d6c8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
    d6ae:	7bfb      	ldrb	r3, [r7, #15]
    d6b0:	687a      	ldr	r2, [r7, #4]
    d6b2:	4413      	add	r3, r2
    d6b4:	78db      	ldrb	r3, [r3, #3]
    d6b6:	78fa      	ldrb	r2, [r7, #3]
    d6b8:	429a      	cmp	r2, r3
    d6ba:	d101      	bne.n	d6c0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
    d6bc:	7bfb      	ldrb	r3, [r7, #15]
    d6be:	e004      	b.n	d6ca <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
    d6c0:	7bfb      	ldrb	r3, [r7, #15]
    d6c2:	3301      	adds	r3, #1
    d6c4:	73fb      	strb	r3, [r7, #15]
    d6c6:	e7ef      	b.n	d6a8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
    d6c8:	2300      	movs	r3, #0
}
    d6ca:	4618      	mov	r0, r3
    d6cc:	3714      	adds	r7, #20
    d6ce:	46bd      	mov	sp, r7
    d6d0:	bc80      	pop	{r7}
    d6d2:	4770      	bx	lr

0000d6d4 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
    d6d4:	b590      	push	{r4, r7, lr}
    d6d6:	b089      	sub	sp, #36	; 0x24
    d6d8:	af02      	add	r7, sp, #8
    d6da:	60f8      	str	r0, [r7, #12]
    d6dc:	60b9      	str	r1, [r7, #8]
    d6de:	4611      	mov	r1, r2
    d6e0:	461a      	mov	r2, r3
    d6e2:	460b      	mov	r3, r1
    d6e4:	71fb      	strb	r3, [r7, #7]
    d6e6:	4613      	mov	r3, r2
    d6e8:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
    d6ea:	2300      	movs	r3, #0
    d6ec:	75fb      	strb	r3, [r7, #23]
    d6ee:	7dfb      	ldrb	r3, [r7, #23]
    d6f0:	2b06      	cmp	r3, #6
    d6f2:	dc09      	bgt.n	d708 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
    d6f4:	68fb      	ldr	r3, [r7, #12]
    d6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d6f8:	7dfb      	ldrb	r3, [r7, #23]
    d6fa:	4413      	add	r3, r2
    d6fc:	2200      	movs	r2, #0
    d6fe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
    d700:	7dfb      	ldrb	r3, [r7, #23]
    d702:	3301      	adds	r3, #1
    d704:	75fb      	strb	r3, [r7, #23]
    d706:	e7f2      	b.n	d6ee <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
    d708:	68fb      	ldr	r3, [r7, #12]
    d70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d70c:	79fa      	ldrb	r2, [r7, #7]
    d70e:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
    d710:	68fb      	ldr	r3, [r7, #12]
    d712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d714:	3301      	adds	r3, #1
    d716:	88ba      	ldrh	r2, [r7, #4]
    d718:	1212      	asrs	r2, r2, #8
    d71a:	b2d2      	uxtb	r2, r2
    d71c:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
    d71e:	68fb      	ldr	r3, [r7, #12]
    d720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d722:	3302      	adds	r3, #2
    d724:	88ba      	ldrh	r2, [r7, #4]
    d726:	b2d2      	uxtb	r2, r2
    d728:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
    d72a:	68fb      	ldr	r3, [r7, #12]
    d72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d72e:	3303      	adds	r3, #3
    d730:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d732:	0e12      	lsrs	r2, r2, #24
    d734:	b2d2      	uxtb	r2, r2
    d736:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
    d738:	68fb      	ldr	r3, [r7, #12]
    d73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d73c:	3304      	adds	r3, #4
    d73e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d740:	0c12      	lsrs	r2, r2, #16
    d742:	b2d2      	uxtb	r2, r2
    d744:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
    d746:	68fb      	ldr	r3, [r7, #12]
    d748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d74a:	3305      	adds	r3, #5
    d74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d74e:	0a12      	lsrs	r2, r2, #8
    d750:	b2d2      	uxtb	r2, r2
    d752:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
    d754:	68fb      	ldr	r3, [r7, #12]
    d756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d758:	3306      	adds	r3, #6
    d75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d75c:	b2d2      	uxtb	r2, r2
    d75e:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
    d760:	68fb      	ldr	r3, [r7, #12]
    d762:	6a18      	ldr	r0, [r3, #32]
    d764:	68fb      	ldr	r3, [r7, #12]
    d766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d768:	f107 0110 	add.w	r1, r7, #16
    d76c:	2307      	movs	r3, #7
    d76e:	9300      	str	r3, [sp, #0]
    d770:	460b      	mov	r3, r1
    d772:	68b9      	ldr	r1, [r7, #8]
    d774:	4c0a      	ldr	r4, [pc, #40]	; (d7a0 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
    d776:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
    d778:	7c3b      	ldrb	r3, [r7, #16]
    d77a:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
    d77c:	7c7b      	ldrb	r3, [r7, #17]
    d77e:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
    d780:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
    d782:	7cbb      	ldrb	r3, [r7, #18]
    d784:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
    d786:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
    d788:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
    d78a:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
    d78c:	68fb      	ldr	r3, [r7, #12]
    d78e:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
    d790:	bf00      	nop
	return output_data;
    d792:	68fb      	ldr	r3, [r7, #12]
    d794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    d796:	4618      	mov	r0, r3
    d798:	371c      	adds	r7, #28
    d79a:	46bd      	mov	sp, r7
    d79c:	bd90      	pop	{r4, r7, pc}
    d79e:	bf00      	nop
    d7a0:	0000dcc9 	.word	0x0000dcc9

0000d7a4 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
    d7a4:	b590      	push	{r4, r7, lr}
    d7a6:	b087      	sub	sp, #28
    d7a8:	af02      	add	r7, sp, #8
    d7aa:	60f8      	str	r0, [r7, #12]
    d7ac:	60b9      	str	r1, [r7, #8]
    d7ae:	4611      	mov	r1, r2
    d7b0:	461a      	mov	r2, r3
    d7b2:	460b      	mov	r3, r1
    d7b4:	71fb      	strb	r3, [r7, #7]
    d7b6:	4613      	mov	r3, r2
    d7b8:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
    d7ba:	68fb      	ldr	r3, [r7, #12]
    d7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7be:	79fa      	ldrb	r2, [r7, #7]
    d7c0:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
    d7c2:	68fb      	ldr	r3, [r7, #12]
    d7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7c6:	3301      	adds	r3, #1
    d7c8:	88ba      	ldrh	r2, [r7, #4]
    d7ca:	1212      	asrs	r2, r2, #8
    d7cc:	b2d2      	uxtb	r2, r2
    d7ce:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
    d7d0:	68fb      	ldr	r3, [r7, #12]
    d7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7d4:	3302      	adds	r3, #2
    d7d6:	88ba      	ldrh	r2, [r7, #4]
    d7d8:	b2d2      	uxtb	r2, r2
    d7da:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
    d7dc:	68fb      	ldr	r3, [r7, #12]
    d7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7e0:	3303      	adds	r3, #3
    d7e2:	f897 2020 	ldrb.w	r2, [r7, #32]
    d7e6:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
    d7e8:	68fb      	ldr	r3, [r7, #12]
    d7ea:	6a18      	ldr	r0, [r3, #32]
    d7ec:	68fb      	ldr	r3, [r7, #12]
    d7ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7f0:	68fb      	ldr	r3, [r7, #12]
    d7f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    d7f4:	2304      	movs	r3, #4
    d7f6:	9300      	str	r3, [sp, #0]
    d7f8:	460b      	mov	r3, r1
    d7fa:	68b9      	ldr	r1, [r7, #8]
    d7fc:	4c04      	ldr	r4, [pc, #16]	; (d810 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
    d7fe:	47a0      	blx	r4
	return rx[0];
    d800:	68fb      	ldr	r3, [r7, #12]
    d802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d804:	781b      	ldrb	r3, [r3, #0]
}
    d806:	4618      	mov	r0, r3
    d808:	3714      	adds	r7, #20
    d80a:	46bd      	mov	sp, r7
    d80c:	bd90      	pop	{r4, r7, pc}
    d80e:	bf00      	nop
    d810:	0000dcc9 	.word	0x0000dcc9

0000d814 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
    d814:	b480      	push	{r7}
    d816:	b083      	sub	sp, #12
    d818:	af00      	add	r7, sp, #0
    d81a:	6078      	str	r0, [r7, #4]
    d81c:	460b      	mov	r3, r1
    d81e:	807b      	strh	r3, [r7, #2]
    d820:	4613      	mov	r3, r2
    d822:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
    d824:	787b      	ldrb	r3, [r7, #1]
    d826:	3b01      	subs	r3, #1
    d828:	b29b      	uxth	r3, r3
    d82a:	009b      	lsls	r3, r3, #2
    d82c:	b29a      	uxth	r2, r3
    d82e:	887b      	ldrh	r3, [r7, #2]
    d830:	4413      	add	r3, r2
    d832:	b29b      	uxth	r3, r3
}
    d834:	4618      	mov	r0, r3
    d836:	370c      	adds	r7, #12
    d838:	46bd      	mov	sp, r7
    d83a:	bc80      	pop	{r7}
    d83c:	4770      	bx	lr
	...

0000d840 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
    d840:	b590      	push	{r4, r7, lr}
    d842:	b085      	sub	sp, #20
    d844:	af00      	add	r7, sp, #0
    d846:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
    d848:	4b25      	ldr	r3, [pc, #148]	; (d8e0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    d84a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
    d84c:	687b      	ldr	r3, [r7, #4]
    d84e:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d850:	68fb      	ldr	r3, [r7, #12]
    d852:	2202      	movs	r2, #2
    d854:	6878      	ldr	r0, [r7, #4]
    d856:	4c23      	ldr	r4, [pc, #140]	; (d8e4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d858:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
    d85a:	4b23      	ldr	r3, [pc, #140]	; (d8e8 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
    d85c:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
    d85e:	687b      	ldr	r3, [r7, #4]
    d860:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d862:	68fb      	ldr	r3, [r7, #12]
    d864:	2204      	movs	r2, #4
    d866:	6878      	ldr	r0, [r7, #4]
    d868:	4c1e      	ldr	r4, [pc, #120]	; (d8e4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d86a:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
    d86c:	4b1c      	ldr	r3, [pc, #112]	; (d8e0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    d86e:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
    d870:	687b      	ldr	r3, [r7, #4]
    d872:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d874:	68fb      	ldr	r3, [r7, #12]
    d876:	2207      	movs	r2, #7
    d878:	6878      	ldr	r0, [r7, #4]
    d87a:	4c1a      	ldr	r4, [pc, #104]	; (d8e4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d87c:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
    d87e:	4b1b      	ldr	r3, [pc, #108]	; (d8ec <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
    d880:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
    d882:	687b      	ldr	r3, [r7, #4]
    d884:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d886:	68fb      	ldr	r3, [r7, #12]
    d888:	2209      	movs	r2, #9
    d88a:	6878      	ldr	r0, [r7, #4]
    d88c:	4c15      	ldr	r4, [pc, #84]	; (d8e4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d88e:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
    d890:	4b13      	ldr	r3, [pc, #76]	; (d8e0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    d892:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
    d894:	687b      	ldr	r3, [r7, #4]
    d896:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d898:	68fb      	ldr	r3, [r7, #12]
    d89a:	220c      	movs	r2, #12
    d89c:	6878      	ldr	r0, [r7, #4]
    d89e:	4c11      	ldr	r4, [pc, #68]	; (d8e4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d8a0:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
    d8a2:	4b13      	ldr	r3, [pc, #76]	; (d8f0 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
    d8a4:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
    d8a6:	687b      	ldr	r3, [r7, #4]
    d8a8:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d8aa:	68fb      	ldr	r3, [r7, #12]
    d8ac:	220e      	movs	r2, #14
    d8ae:	6878      	ldr	r0, [r7, #4]
    d8b0:	4c0c      	ldr	r4, [pc, #48]	; (d8e4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d8b2:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
    d8b4:	4b0a      	ldr	r3, [pc, #40]	; (d8e0 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    d8b6:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
    d8b8:	687b      	ldr	r3, [r7, #4]
    d8ba:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d8bc:	68fb      	ldr	r3, [r7, #12]
    d8be:	2211      	movs	r2, #17
    d8c0:	6878      	ldr	r0, [r7, #4]
    d8c2:	4c08      	ldr	r4, [pc, #32]	; (d8e4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d8c4:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
    d8c6:	4b0b      	ldr	r3, [pc, #44]	; (d8f4 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
    d8c8:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
    d8ca:	687b      	ldr	r3, [r7, #4]
    d8cc:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d8ce:	68fb      	ldr	r3, [r7, #12]
    d8d0:	2213      	movs	r2, #19
    d8d2:	6878      	ldr	r0, [r7, #4]
    d8d4:	4c03      	ldr	r4, [pc, #12]	; (d8e4 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d8d6:	47a0      	blx	r4

}
    d8d8:	bf00      	nop
    d8da:	3714      	adds	r7, #20
    d8dc:	46bd      	mov	sp, r7
    d8de:	bd90      	pop	{r4, r7, pc}
    d8e0:	e89c4000 	.word	0xe89c4000
    d8e4:	0000d439 	.word	0x0000d439
    d8e8:	60a91000 	.word	0x60a91000
    d8ec:	61e91000 	.word	0x61e91000
    d8f0:	63291000 	.word	0x63291000
    d8f4:	64691000 	.word	0x64691000

0000d8f8 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
    d8f8:	b590      	push	{r4, r7, lr}
    d8fa:	b085      	sub	sp, #20
    d8fc:	af02      	add	r7, sp, #8
    d8fe:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
    d900:	687b      	ldr	r3, [r7, #4]
    d902:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
    d904:	2300      	movs	r3, #0
    d906:	9300      	str	r3, [sp, #0]
    d908:	23f0      	movs	r3, #240	; 0xf0
    d90a:	2202      	movs	r2, #2
    d90c:	6878      	ldr	r0, [r7, #4]
    d90e:	4c07      	ldr	r4, [pc, #28]	; (d92c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
    d910:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
    d912:	687b      	ldr	r3, [r7, #4]
    d914:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d916:	2300      	movs	r3, #0
    d918:	9300      	str	r3, [sp, #0]
    d91a:	23ff      	movs	r3, #255	; 0xff
    d91c:	2202      	movs	r2, #2
    d91e:	6878      	ldr	r0, [r7, #4]
    d920:	4c02      	ldr	r4, [pc, #8]	; (d92c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
    d922:	47a0      	blx	r4
}
    d924:	bf00      	nop
    d926:	370c      	adds	r7, #12
    d928:	46bd      	mov	sp, r7
    d92a:	bd90      	pop	{r4, r7, pc}
    d92c:	0000d7a5 	.word	0x0000d7a5

0000d930 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
    d930:	b580      	push	{r7, lr}
    d932:	b082      	sub	sp, #8
    d934:	af00      	add	r7, sp, #0
    d936:	6078      	str	r0, [r7, #4]
	process_finished = 0;
    d938:	687b      	ldr	r3, [r7, #4]
    d93a:	2200      	movs	r2, #0
    d93c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
    d940:	687b      	ldr	r3, [r7, #4]
    d942:	2200      	movs	r2, #0
    d944:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
    d946:	4a31      	ldr	r2, [pc, #196]	; (da0c <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
    d948:	687b      	ldr	r3, [r7, #4]
    d94a:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
    d94c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d950:	492f      	ldr	r1, [pc, #188]	; (da10 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
    d952:	4830      	ldr	r0, [pc, #192]	; (da14 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
    d954:	4b30      	ldr	r3, [pc, #192]	; (da18 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
    d956:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
    d958:	687b      	ldr	r3, [r7, #4]
    d95a:	79db      	ldrb	r3, [r3, #7]
    d95c:	2b01      	cmp	r3, #1
    d95e:	d009      	beq.n	d974 <_ZN13LTC2983_Class8SelfTestEv+0x44>
    d960:	687b      	ldr	r3, [r7, #4]
    d962:	789b      	ldrb	r3, [r3, #2]
    d964:	b2db      	uxtb	r3, r3
    d966:	f083 0301 	eor.w	r3, r3, #1
    d96a:	b2db      	uxtb	r3, r3
    d96c:	2b00      	cmp	r3, #0
    d96e:	d001      	beq.n	d974 <_ZN13LTC2983_Class8SelfTestEv+0x44>
    d970:	2301      	movs	r3, #1
    d972:	e000      	b.n	d976 <_ZN13LTC2983_Class8SelfTestEv+0x46>
    d974:	2300      	movs	r3, #0
    d976:	2b00      	cmp	r3, #0
    d978:	d034      	beq.n	d9e4 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
    d97a:	2100      	movs	r1, #0
    d97c:	6878      	ldr	r0, [r7, #4]
    d97e:	4b27      	ldr	r3, [pc, #156]	; (da1c <_ZN13LTC2983_Class8SelfTestEv+0xec>)
    d980:	4798      	blx	r3
		delay_ms(1);
    d982:	2001      	movs	r0, #1
    d984:	4b26      	ldr	r3, [pc, #152]	; (da20 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
    d986:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
    d988:	687b      	ldr	r3, [r7, #4]
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	b2db      	uxtb	r3, r3
    d98e:	f083 0301 	eor.w	r3, r3, #1
    d992:	b2db      	uxtb	r3, r3
    d994:	2b00      	cmp	r3, #0
    d996:	d009      	beq.n	d9ac <_ZN13LTC2983_Class8SelfTestEv+0x7c>
    d998:	687b      	ldr	r3, [r7, #4]
    d99a:	789b      	ldrb	r3, [r3, #2]
    d99c:	b2db      	uxtb	r3, r3
    d99e:	f083 0301 	eor.w	r3, r3, #1
    d9a2:	b2db      	uxtb	r3, r3
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d001      	beq.n	d9ac <_ZN13LTC2983_Class8SelfTestEv+0x7c>
    d9a8:	2301      	movs	r3, #1
    d9aa:	e000      	b.n	d9ae <_ZN13LTC2983_Class8SelfTestEv+0x7e>
    d9ac:	2300      	movs	r3, #0
    d9ae:	2b00      	cmp	r3, #0
    d9b0:	d000      	beq.n	d9b4 <_ZN13LTC2983_Class8SelfTestEv+0x84>
    d9b2:	e7e9      	b.n	d988 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
    d9b4:	687b      	ldr	r3, [r7, #4]
    d9b6:	789b      	ldrb	r3, [r3, #2]
    d9b8:	b2db      	uxtb	r3, r3
    d9ba:	f083 0301 	eor.w	r3, r3, #1
    d9be:	b2db      	uxtb	r3, r3
    d9c0:	2b00      	cmp	r3, #0
    d9c2:	d0c9      	beq.n	d958 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
    d9c4:	687b      	ldr	r3, [r7, #4]
    d9c6:	781b      	ldrb	r3, [r3, #0]
    d9c8:	b2db      	uxtb	r3, r3
    d9ca:	2b00      	cmp	r3, #0
    d9cc:	d006      	beq.n	d9dc <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
    d9ce:	687b      	ldr	r3, [r7, #4]
    d9d0:	78db      	ldrb	r3, [r3, #3]
    d9d2:	4619      	mov	r1, r3
    d9d4:	6878      	ldr	r0, [r7, #4]
    d9d6:	4b13      	ldr	r3, [pc, #76]	; (da24 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
    d9d8:	4798      	blx	r3
    d9da:	e7bd      	b.n	d958 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
    d9dc:	2001      	movs	r0, #1
    d9de:	4b10      	ldr	r3, [pc, #64]	; (da20 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
    d9e0:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
    d9e2:	e7b9      	b.n	d958 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
    d9e4:	490a      	ldr	r1, [pc, #40]	; (da10 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
    d9e6:	480b      	ldr	r0, [pc, #44]	; (da14 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
    d9e8:	4b0f      	ldr	r3, [pc, #60]	; (da28 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
    d9ea:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
    d9ec:	687b      	ldr	r3, [r7, #4]
    d9ee:	79db      	ldrb	r3, [r3, #7]
    d9f0:	2b01      	cmp	r3, #1
    d9f2:	bf0c      	ite	eq
    d9f4:	2301      	moveq	r3, #1
    d9f6:	2300      	movne	r3, #0
    d9f8:	b2da      	uxtb	r2, r3
    d9fa:	687b      	ldr	r3, [r7, #4]
    d9fc:	771a      	strb	r2, [r3, #28]
	return	isOK;
    d9fe:	687b      	ldr	r3, [r7, #4]
    da00:	7f1b      	ldrb	r3, [r3, #28]
	}
    da02:	4618      	mov	r0, r3
    da04:	3708      	adds	r7, #8
    da06:	46bd      	mov	sp, r7
    da08:	bd80      	pop	{r7, pc}
    da0a:	bf00      	nop
    da0c:	200011ac 	.word	0x200011ac
    da10:	0000d351 	.word	0x0000d351
    da14:	200010ac 	.word	0x200010ac
    da18:	0000e22d 	.word	0x0000e22d
    da1c:	0000d48d 	.word	0x0000d48d
    da20:	0000b149 	.word	0x0000b149
    da24:	0000d5c1 	.word	0x0000d5c1
    da28:	0000e1d5 	.word	0x0000e1d5

0000da2c <_Z41__static_initialization_and_destruction_0ii>:
    da2c:	b580      	push	{r7, lr}
    da2e:	b082      	sub	sp, #8
    da30:	af00      	add	r7, sp, #0
    da32:	6078      	str	r0, [r7, #4]
    da34:	6039      	str	r1, [r7, #0]
    da36:	687b      	ldr	r3, [r7, #4]
    da38:	2b01      	cmp	r3, #1
    da3a:	d14c      	bne.n	dad6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    da3c:	683b      	ldr	r3, [r7, #0]
    da3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    da42:	4293      	cmp	r3, r2
    da44:	d147      	bne.n	dad6 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    da46:	4926      	ldr	r1, [pc, #152]	; (dae0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    da48:	4826      	ldr	r0, [pc, #152]	; (dae4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    da4a:	4b27      	ldr	r3, [pc, #156]	; (dae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    da4c:	4798      	blx	r3
    da4e:	4a27      	ldr	r2, [pc, #156]	; (daec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    da50:	4927      	ldr	r1, [pc, #156]	; (daf0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    da52:	4824      	ldr	r0, [pc, #144]	; (dae4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    da54:	4b27      	ldr	r3, [pc, #156]	; (daf4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    da56:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    da58:	4927      	ldr	r1, [pc, #156]	; (daf8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    da5a:	4828      	ldr	r0, [pc, #160]	; (dafc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    da5c:	4b22      	ldr	r3, [pc, #136]	; (dae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    da5e:	4798      	blx	r3
    da60:	4a22      	ldr	r2, [pc, #136]	; (daec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    da62:	4923      	ldr	r1, [pc, #140]	; (daf0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    da64:	4825      	ldr	r0, [pc, #148]	; (dafc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    da66:	4b23      	ldr	r3, [pc, #140]	; (daf4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    da68:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    da6a:	4925      	ldr	r1, [pc, #148]	; (db00 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    da6c:	4825      	ldr	r0, [pc, #148]	; (db04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    da6e:	4b1e      	ldr	r3, [pc, #120]	; (dae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    da70:	4798      	blx	r3
    da72:	4a1e      	ldr	r2, [pc, #120]	; (daec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    da74:	491e      	ldr	r1, [pc, #120]	; (daf0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    da76:	4823      	ldr	r0, [pc, #140]	; (db04 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    da78:	4b1e      	ldr	r3, [pc, #120]	; (daf4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    da7a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    da7c:	4922      	ldr	r1, [pc, #136]	; (db08 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    da7e:	4823      	ldr	r0, [pc, #140]	; (db0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    da80:	4b19      	ldr	r3, [pc, #100]	; (dae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    da82:	4798      	blx	r3
    da84:	4a19      	ldr	r2, [pc, #100]	; (daec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    da86:	491a      	ldr	r1, [pc, #104]	; (daf0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    da88:	4820      	ldr	r0, [pc, #128]	; (db0c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    da8a:	4b1a      	ldr	r3, [pc, #104]	; (daf4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    da8c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    da8e:	4920      	ldr	r1, [pc, #128]	; (db10 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    da90:	4820      	ldr	r0, [pc, #128]	; (db14 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    da92:	4b15      	ldr	r3, [pc, #84]	; (dae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    da94:	4798      	blx	r3
    da96:	4a15      	ldr	r2, [pc, #84]	; (daec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    da98:	4915      	ldr	r1, [pc, #84]	; (daf0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    da9a:	481e      	ldr	r0, [pc, #120]	; (db14 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    da9c:	4b15      	ldr	r3, [pc, #84]	; (daf4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    da9e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    daa0:	491d      	ldr	r1, [pc, #116]	; (db18 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    daa2:	481e      	ldr	r0, [pc, #120]	; (db1c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    daa4:	4b10      	ldr	r3, [pc, #64]	; (dae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    daa6:	4798      	blx	r3
    daa8:	4a10      	ldr	r2, [pc, #64]	; (daec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    daaa:	4911      	ldr	r1, [pc, #68]	; (daf0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    daac:	481b      	ldr	r0, [pc, #108]	; (db1c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    daae:	4b11      	ldr	r3, [pc, #68]	; (daf4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dab0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    dab2:	491b      	ldr	r1, [pc, #108]	; (db20 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    dab4:	481b      	ldr	r0, [pc, #108]	; (db24 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dab6:	4b0c      	ldr	r3, [pc, #48]	; (dae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dab8:	4798      	blx	r3
    daba:	4a0c      	ldr	r2, [pc, #48]	; (daec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dabc:	490c      	ldr	r1, [pc, #48]	; (daf0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dabe:	4819      	ldr	r0, [pc, #100]	; (db24 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dac0:	4b0c      	ldr	r3, [pc, #48]	; (daf4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dac2:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    dac4:	4918      	ldr	r1, [pc, #96]	; (db28 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    dac6:	4819      	ldr	r0, [pc, #100]	; (db2c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dac8:	4b07      	ldr	r3, [pc, #28]	; (dae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    daca:	4798      	blx	r3
    dacc:	4a07      	ldr	r2, [pc, #28]	; (daec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dace:	4908      	ldr	r1, [pc, #32]	; (daf0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dad0:	4816      	ldr	r0, [pc, #88]	; (db2c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dad2:	4b08      	ldr	r3, [pc, #32]	; (daf4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dad4:	4798      	blx	r3
    dad6:	bf00      	nop
    dad8:	3708      	adds	r7, #8
    dada:	46bd      	mov	sp, r7
    dadc:	bd80      	pop	{r7, pc}
    dade:	bf00      	nop
    dae0:	2000a8e0 	.word	0x2000a8e0
    dae4:	200010ac 	.word	0x200010ac
    dae8:	0000dff9 	.word	0x0000dff9
    daec:	20000000 	.word	0x20000000
    daf0:	0000e031 	.word	0x0000e031
    daf4:	0000fd55 	.word	0x0000fd55
    daf8:	2000a974 	.word	0x2000a974
    dafc:	200010cc 	.word	0x200010cc
    db00:	2000aa98 	.word	0x2000aa98
    db04:	200010ec 	.word	0x200010ec
    db08:	2000a994 	.word	0x2000a994
    db0c:	2000110c 	.word	0x2000110c
    db10:	2000aa58 	.word	0x2000aa58
    db14:	2000112c 	.word	0x2000112c
    db18:	2000aa78 	.word	0x2000aa78
    db1c:	2000114c 	.word	0x2000114c
    db20:	2000a950 	.word	0x2000a950
    db24:	2000116c 	.word	0x2000116c
    db28:	2000a9f0 	.word	0x2000a9f0
    db2c:	2000118c 	.word	0x2000118c

0000db30 <_GLOBAL__sub_I_ptrLTCClass>:
    db30:	b580      	push	{r7, lr}
    db32:	af00      	add	r7, sp, #0
    db34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    db38:	2001      	movs	r0, #1
    db3a:	4b01      	ldr	r3, [pc, #4]	; (db40 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
    db3c:	4798      	blx	r3
    db3e:	bd80      	pop	{r7, pc}
    db40:	0000da2d 	.word	0x0000da2d

0000db44 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    db44:	b480      	push	{r7}
    db46:	b085      	sub	sp, #20
    db48:	af00      	add	r7, sp, #0
    db4a:	60f8      	str	r0, [r7, #12]
    db4c:	460b      	mov	r3, r1
    db4e:	607a      	str	r2, [r7, #4]
    db50:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    db52:	7afb      	ldrb	r3, [r7, #11]
    db54:	68fa      	ldr	r2, [r7, #12]
    db56:	01db      	lsls	r3, r3, #7
    db58:	4413      	add	r3, r2
    db5a:	3318      	adds	r3, #24
    db5c:	687a      	ldr	r2, [r7, #4]
    db5e:	601a      	str	r2, [r3, #0]
}
    db60:	bf00      	nop
    db62:	3714      	adds	r7, #20
    db64:	46bd      	mov	sp, r7
    db66:	bc80      	pop	{r7}
    db68:	4770      	bx	lr

0000db6a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    db6a:	b480      	push	{r7}
    db6c:	b085      	sub	sp, #20
    db6e:	af00      	add	r7, sp, #0
    db70:	60f8      	str	r0, [r7, #12]
    db72:	460b      	mov	r3, r1
    db74:	607a      	str	r2, [r7, #4]
    db76:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    db78:	7afb      	ldrb	r3, [r7, #11]
    db7a:	68fa      	ldr	r2, [r7, #12]
    db7c:	01db      	lsls	r3, r3, #7
    db7e:	4413      	add	r3, r2
    db80:	3314      	adds	r3, #20
    db82:	687a      	ldr	r2, [r7, #4]
    db84:	601a      	str	r2, [r3, #0]
}
    db86:	bf00      	nop
    db88:	3714      	adds	r7, #20
    db8a:	46bd      	mov	sp, r7
    db8c:	bc80      	pop	{r7}
    db8e:	4770      	bx	lr

0000db90 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    db90:	b580      	push	{r7, lr}
    db92:	b082      	sub	sp, #8
    db94:	af00      	add	r7, sp, #0
    db96:	4603      	mov	r3, r0
    db98:	6039      	str	r1, [r7, #0]
    db9a:	71fb      	strb	r3, [r7, #7]
    db9c:	4613      	mov	r3, r2
    db9e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    dba0:	79bb      	ldrb	r3, [r7, #6]
    dba2:	2b00      	cmp	r3, #0
    dba4:	d006      	beq.n	dbb4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    dba6:	79fb      	ldrb	r3, [r7, #7]
    dba8:	683a      	ldr	r2, [r7, #0]
    dbaa:	4619      	mov	r1, r3
    dbac:	4806      	ldr	r0, [pc, #24]	; (dbc8 <_gpio_set_level+0x38>)
    dbae:	4b07      	ldr	r3, [pc, #28]	; (dbcc <_gpio_set_level+0x3c>)
    dbb0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    dbb2:	e005      	b.n	dbc0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    dbb4:	79fb      	ldrb	r3, [r7, #7]
    dbb6:	683a      	ldr	r2, [r7, #0]
    dbb8:	4619      	mov	r1, r3
    dbba:	4803      	ldr	r0, [pc, #12]	; (dbc8 <_gpio_set_level+0x38>)
    dbbc:	4b04      	ldr	r3, [pc, #16]	; (dbd0 <_gpio_set_level+0x40>)
    dbbe:	4798      	blx	r3
}
    dbc0:	bf00      	nop
    dbc2:	3708      	adds	r7, #8
    dbc4:	46bd      	mov	sp, r7
    dbc6:	bd80      	pop	{r7, pc}
    dbc8:	41008000 	.word	0x41008000
    dbcc:	0000db45 	.word	0x0000db45
    dbd0:	0000db6b 	.word	0x0000db6b

0000dbd4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    dbd4:	b580      	push	{r7, lr}
    dbd6:	b082      	sub	sp, #8
    dbd8:	af00      	add	r7, sp, #0
    dbda:	4603      	mov	r3, r0
    dbdc:	460a      	mov	r2, r1
    dbde:	71fb      	strb	r3, [r7, #7]
    dbe0:	4613      	mov	r3, r2
    dbe2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    dbe4:	79fb      	ldrb	r3, [r7, #7]
    dbe6:	115b      	asrs	r3, r3, #5
    dbe8:	b2d8      	uxtb	r0, r3
    dbea:	79fb      	ldrb	r3, [r7, #7]
    dbec:	f003 031f 	and.w	r3, r3, #31
    dbf0:	2201      	movs	r2, #1
    dbf2:	fa02 f303 	lsl.w	r3, r2, r3
    dbf6:	79ba      	ldrb	r2, [r7, #6]
    dbf8:	4619      	mov	r1, r3
    dbfa:	4b03      	ldr	r3, [pc, #12]	; (dc08 <gpio_set_pin_level+0x34>)
    dbfc:	4798      	blx	r3
}
    dbfe:	bf00      	nop
    dc00:	3708      	adds	r7, #8
    dc02:	46bd      	mov	sp, r7
    dc04:	bd80      	pop	{r7, pc}
    dc06:	bf00      	nop
    dc08:	0000db91 	.word	0x0000db91

0000dc0c <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
    dc0c:	b480      	push	{r7}
    dc0e:	b083      	sub	sp, #12
    dc10:	af00      	add	r7, sp, #0
    dc12:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
    dc14:	4a05      	ldr	r2, [pc, #20]	; (dc2c <_ZN6LT_SPIC1Ev+0x20>)
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
    dc1a:	687b      	ldr	r3, [r7, #4]
    dc1c:	4a04      	ldr	r2, [pc, #16]	; (dc30 <_ZN6LT_SPIC1Ev+0x24>)
    dc1e:	605a      	str	r2, [r3, #4]
} //LT_SPI
    dc20:	687b      	ldr	r3, [r7, #4]
    dc22:	4618      	mov	r0, r3
    dc24:	370c      	adds	r7, #12
    dc26:	46bd      	mov	sp, r7
    dc28:	bc80      	pop	{r7}
    dc2a:	4770      	bx	lr
    dc2c:	200011b0 	.word	0x200011b0
    dc30:	200011b4 	.word	0x200011b4

0000dc34 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
    dc34:	b480      	push	{r7}
    dc36:	b083      	sub	sp, #12
    dc38:	af00      	add	r7, sp, #0
    dc3a:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	4618      	mov	r0, r3
    dc40:	370c      	adds	r7, #12
    dc42:	46bd      	mov	sp, r7
    dc44:	bc80      	pop	{r7}
    dc46:	4770      	bx	lr

0000dc48 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
    dc48:	b580      	push	{r7, lr}
    dc4a:	b082      	sub	sp, #8
    dc4c:	af00      	add	r7, sp, #0
    dc4e:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
    dc50:	687b      	ldr	r3, [r7, #4]
    dc52:	685a      	ldr	r2, [r3, #4]
    dc54:	687b      	ldr	r3, [r7, #4]
    dc56:	691b      	ldr	r3, [r3, #16]
    dc58:	4619      	mov	r1, r3
    dc5a:	4610      	mov	r0, r2
    dc5c:	4b0e      	ldr	r3, [pc, #56]	; (dc98 <_ZN6LT_SPI4initEv+0x50>)
    dc5e:	4798      	blx	r3
	spiTemp->init();
    dc60:	687b      	ldr	r3, [r7, #4]
    dc62:	685b      	ldr	r3, [r3, #4]
    dc64:	4618      	mov	r0, r3
    dc66:	4b0d      	ldr	r3, [pc, #52]	; (dc9c <_ZN6LT_SPI4initEv+0x54>)
    dc68:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
    dc6a:	687b      	ldr	r3, [r7, #4]
    dc6c:	685b      	ldr	r3, [r3, #4]
    dc6e:	685a      	ldr	r2, [r3, #4]
    dc70:	687b      	ldr	r3, [r7, #4]
    dc72:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	685b      	ldr	r3, [r3, #4]
    dc78:	689a      	ldr	r2, [r3, #8]
    dc7a:	687b      	ldr	r3, [r7, #4]
    dc7c:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
    dc7e:	687b      	ldr	r3, [r7, #4]
    dc80:	685b      	ldr	r3, [r3, #4]
    dc82:	4618      	mov	r0, r3
    dc84:	4b06      	ldr	r3, [pc, #24]	; (dca0 <_ZN6LT_SPI4initEv+0x58>)
    dc86:	4798      	blx	r3
	ready=true;
    dc88:	687b      	ldr	r3, [r7, #4]
    dc8a:	2201      	movs	r2, #1
    dc8c:	701a      	strb	r2, [r3, #0]
}
    dc8e:	bf00      	nop
    dc90:	3708      	adds	r7, #8
    dc92:	46bd      	mov	sp, r7
    dc94:	bd80      	pop	{r7, pc}
    dc96:	bf00      	nop
    dc98:	0000def1 	.word	0x0000def1
    dc9c:	0000dea9 	.word	0x0000dea9
    dca0:	0000df15 	.word	0x0000df15

0000dca4 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
    dca4:	b480      	push	{r7}
    dca6:	b083      	sub	sp, #12
    dca8:	af00      	add	r7, sp, #0
    dcaa:	6078      	str	r0, [r7, #4]
    dcac:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
    dcae:	687b      	ldr	r3, [r7, #4]
    dcb0:	683a      	ldr	r2, [r7, #0]
    dcb2:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
    dcb4:	4a03      	ldr	r2, [pc, #12]	; (dcc4 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
    dcb6:	687b      	ldr	r3, [r7, #4]
    dcb8:	6013      	str	r3, [r2, #0]
}
    dcba:	bf00      	nop
    dcbc:	370c      	adds	r7, #12
    dcbe:	46bd      	mov	sp, r7
    dcc0:	bc80      	pop	{r7}
    dcc2:	4770      	bx	lr
    dcc4:	200011b0 	.word	0x200011b0

0000dcc8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
    dcc8:	b580      	push	{r7, lr}
    dcca:	b086      	sub	sp, #24
    dccc:	af00      	add	r7, sp, #0
    dcce:	60f8      	str	r0, [r7, #12]
    dcd0:	60b9      	str	r1, [r7, #8]
    dcd2:	607a      	str	r2, [r7, #4]
    dcd4:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
    dcd6:	687b      	ldr	r3, [r7, #4]
    dcd8:	781b      	ldrb	r3, [r3, #0]
    dcda:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
    dcdc:	68b9      	ldr	r1, [r7, #8]
    dcde:	68f8      	ldr	r0, [r7, #12]
    dce0:	4b25      	ldr	r3, [pc, #148]	; (dd78 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
    dce2:	4798      	blx	r3
	
	switch(rOrw){
    dce4:	7dfb      	ldrb	r3, [r7, #23]
    dce6:	2b02      	cmp	r3, #2
    dce8:	d002      	beq.n	dcf0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
    dcea:	2b03      	cmp	r3, #3
    dcec:	d009      	beq.n	dd02 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
    dcee:	e028      	b.n	dd42 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
    dcf0:	68fb      	ldr	r3, [r7, #12]
    dcf2:	685b      	ldr	r3, [r3, #4]
    dcf4:	f897 2020 	ldrb.w	r2, [r7, #32]
    dcf8:	6879      	ldr	r1, [r7, #4]
    dcfa:	4618      	mov	r0, r3
    dcfc:	4b1f      	ldr	r3, [pc, #124]	; (dd7c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    dcfe:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
    dd00:	e031      	b.n	dd66 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
    dd02:	68fb      	ldr	r3, [r7, #12]
    dd04:	685b      	ldr	r3, [r3, #4]
    dd06:	2203      	movs	r2, #3
    dd08:	6879      	ldr	r1, [r7, #4]
    dd0a:	4618      	mov	r0, r3
    dd0c:	4b1b      	ldr	r3, [pc, #108]	; (dd7c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    dd0e:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
    dd10:	f897 3020 	ldrb.w	r3, [r7, #32]
    dd14:	2b04      	cmp	r3, #4
    dd16:	dd0b      	ble.n	dd30 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
    dd18:	68fb      	ldr	r3, [r7, #12]
    dd1a:	6858      	ldr	r0, [r3, #4]
    dd1c:	f897 3020 	ldrb.w	r3, [r7, #32]
    dd20:	3b03      	subs	r3, #3
    dd22:	461a      	mov	r2, r3
    dd24:	6839      	ldr	r1, [r7, #0]
    dd26:	4b16      	ldr	r3, [pc, #88]	; (dd80 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    dd28:	4798      	blx	r3
					asm("nop");
    dd2a:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
    dd2c:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
    dd2e:	e01a      	b.n	dd66 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
    dd30:	68fb      	ldr	r3, [r7, #12]
    dd32:	685b      	ldr	r3, [r3, #4]
    dd34:	2201      	movs	r2, #1
    dd36:	6839      	ldr	r1, [r7, #0]
    dd38:	4618      	mov	r0, r3
    dd3a:	4b11      	ldr	r3, [pc, #68]	; (dd80 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    dd3c:	4798      	blx	r3
				asm("nop");
    dd3e:	bf00      	nop
			break;
    dd40:	e011      	b.n	dd66 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
    dd42:	68fb      	ldr	r3, [r7, #12]
    dd44:	685b      	ldr	r3, [r3, #4]
    dd46:	f897 2020 	ldrb.w	r2, [r7, #32]
    dd4a:	6879      	ldr	r1, [r7, #4]
    dd4c:	4618      	mov	r0, r3
    dd4e:	4b0b      	ldr	r3, [pc, #44]	; (dd7c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    dd50:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
    dd52:	68fb      	ldr	r3, [r7, #12]
    dd54:	6858      	ldr	r0, [r3, #4]
    dd56:	f897 3020 	ldrb.w	r3, [r7, #32]
    dd5a:	3b03      	subs	r3, #3
    dd5c:	461a      	mov	r2, r3
    dd5e:	6839      	ldr	r1, [r7, #0]
    dd60:	4b07      	ldr	r3, [pc, #28]	; (dd80 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    dd62:	4798      	blx	r3
			break;
    dd64:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
    dd66:	68b9      	ldr	r1, [r7, #8]
    dd68:	68f8      	ldr	r0, [r7, #12]
    dd6a:	4b06      	ldr	r3, [pc, #24]	; (dd84 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
    dd6c:	4798      	blx	r3
	asm("nop");
    dd6e:	bf00      	nop
	
}
    dd70:	bf00      	nop
    dd72:	3718      	adds	r7, #24
    dd74:	46bd      	mov	sp, r7
    dd76:	bd80      	pop	{r7, pc}
    dd78:	0000dd89 	.word	0x0000dd89
    dd7c:	0000df51 	.word	0x0000df51
    dd80:	0000df95 	.word	0x0000df95
    dd84:	0000ddd1 	.word	0x0000ddd1

0000dd88 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
    dd88:	b580      	push	{r7, lr}
    dd8a:	b082      	sub	sp, #8
    dd8c:	af00      	add	r7, sp, #0
    dd8e:	6078      	str	r0, [r7, #4]
    dd90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    dd92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    dd96:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
    dd98:	683b      	ldr	r3, [r7, #0]
    dd9a:	b2db      	uxtb	r3, r3
    dd9c:	2100      	movs	r1, #0
    dd9e:	4618      	mov	r0, r3
    dda0:	4b08      	ldr	r3, [pc, #32]	; (ddc4 <_ZN6LT_SPI4OpenEm+0x3c>)
    dda2:	4798      	blx	r3
	 delay_us(10);
    dda4:	200a      	movs	r0, #10
    dda6:	4b08      	ldr	r3, [pc, #32]	; (ddc8 <_ZN6LT_SPI4OpenEm+0x40>)
    dda8:	4798      	blx	r3
	spiTemp->Enable();
    ddaa:	687b      	ldr	r3, [r7, #4]
    ddac:	685b      	ldr	r3, [r3, #4]
    ddae:	4618      	mov	r0, r3
    ddb0:	4b06      	ldr	r3, [pc, #24]	; (ddcc <_ZN6LT_SPI4OpenEm+0x44>)
    ddb2:	4798      	blx	r3
	 delay_us(10);
    ddb4:	200a      	movs	r0, #10
    ddb6:	4b04      	ldr	r3, [pc, #16]	; (ddc8 <_ZN6LT_SPI4OpenEm+0x40>)
    ddb8:	4798      	blx	r3
 }
    ddba:	bf00      	nop
    ddbc:	3708      	adds	r7, #8
    ddbe:	46bd      	mov	sp, r7
    ddc0:	bd80      	pop	{r7, pc}
    ddc2:	bf00      	nop
    ddc4:	0000dbd5 	.word	0x0000dbd5
    ddc8:	0000b115 	.word	0x0000b115
    ddcc:	0000df15 	.word	0x0000df15

0000ddd0 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
    ddd0:	b580      	push	{r7, lr}
    ddd2:	b082      	sub	sp, #8
    ddd4:	af00      	add	r7, sp, #0
    ddd6:	6078      	str	r0, [r7, #4]
    ddd8:	6039      	str	r1, [r7, #0]

	  delay_us(10);
    ddda:	200a      	movs	r0, #10
    dddc:	4b0b      	ldr	r3, [pc, #44]	; (de0c <_ZN6LT_SPI5CloseEm+0x3c>)
    ddde:	4798      	blx	r3
	 spiTemp->Disable();
    dde0:	687b      	ldr	r3, [r7, #4]
    dde2:	685b      	ldr	r3, [r3, #4]
    dde4:	4618      	mov	r0, r3
    dde6:	4b0a      	ldr	r3, [pc, #40]	; (de10 <_ZN6LT_SPI5CloseEm+0x40>)
    dde8:	4798      	blx	r3
	delay_us(10);
    ddea:	200a      	movs	r0, #10
    ddec:	4b07      	ldr	r3, [pc, #28]	; (de0c <_ZN6LT_SPI5CloseEm+0x3c>)
    ddee:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
    ddf0:	683b      	ldr	r3, [r7, #0]
    ddf2:	b2db      	uxtb	r3, r3
    ddf4:	2101      	movs	r1, #1
    ddf6:	4618      	mov	r0, r3
    ddf8:	4b06      	ldr	r3, [pc, #24]	; (de14 <_ZN6LT_SPI5CloseEm+0x44>)
    ddfa:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
    ddfc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    de00:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
    de02:	bf00      	nop
    de04:	3708      	adds	r7, #8
    de06:	46bd      	mov	sp, r7
    de08:	bd80      	pop	{r7, pc}
    de0a:	bf00      	nop
    de0c:	0000b115 	.word	0x0000b115
    de10:	0000dfd9 	.word	0x0000dfd9
    de14:	0000dbd5 	.word	0x0000dbd5

0000de18 <_Z41__static_initialization_and_destruction_0ii>:
    de18:	b580      	push	{r7, lr}
    de1a:	b082      	sub	sp, #8
    de1c:	af00      	add	r7, sp, #0
    de1e:	6078      	str	r0, [r7, #4]
    de20:	6039      	str	r1, [r7, #0]
    de22:	687b      	ldr	r3, [r7, #4]
    de24:	2b01      	cmp	r3, #1
    de26:	d10c      	bne.n	de42 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    de28:	683b      	ldr	r3, [r7, #0]
    de2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de2e:	4293      	cmp	r3, r2
    de30:	d107      	bne.n	de42 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
    de32:	4806      	ldr	r0, [pc, #24]	; (de4c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    de34:	4b06      	ldr	r3, [pc, #24]	; (de50 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    de36:	4798      	blx	r3
    de38:	4a06      	ldr	r2, [pc, #24]	; (de54 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    de3a:	4907      	ldr	r1, [pc, #28]	; (de58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    de3c:	4803      	ldr	r0, [pc, #12]	; (de4c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    de3e:	4b07      	ldr	r3, [pc, #28]	; (de5c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    de40:	4798      	blx	r3
    de42:	bf00      	nop
    de44:	3708      	adds	r7, #8
    de46:	46bd      	mov	sp, r7
    de48:	bd80      	pop	{r7, pc}
    de4a:	bf00      	nop
    de4c:	200011b4 	.word	0x200011b4
    de50:	0000de75 	.word	0x0000de75
    de54:	20000000 	.word	0x20000000
    de58:	0000de95 	.word	0x0000de95
    de5c:	0000fd55 	.word	0x0000fd55

0000de60 <_GLOBAL__sub_I_ptrLTSPIClass>:
    de60:	b580      	push	{r7, lr}
    de62:	af00      	add	r7, sp, #0
    de64:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de68:	2001      	movs	r0, #1
    de6a:	4b01      	ldr	r3, [pc, #4]	; (de70 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
    de6c:	4798      	blx	r3
    de6e:	bd80      	pop	{r7, pc}
    de70:	0000de19 	.word	0x0000de19

0000de74 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    de74:	b480      	push	{r7}
    de76:	b083      	sub	sp, #12
    de78:	af00      	add	r7, sp, #0
    de7a:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    de7c:	4a04      	ldr	r2, [pc, #16]	; (de90 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    de7e:	687b      	ldr	r3, [r7, #4]
    de80:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    de82:	687b      	ldr	r3, [r7, #4]
    de84:	4618      	mov	r0, r3
    de86:	370c      	adds	r7, #12
    de88:	46bd      	mov	sp, r7
    de8a:	bc80      	pop	{r7}
    de8c:	4770      	bx	lr
    de8e:	bf00      	nop
    de90:	200011d0 	.word	0x200011d0

0000de94 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    de94:	b480      	push	{r7}
    de96:	b083      	sub	sp, #12
    de98:	af00      	add	r7, sp, #0
    de9a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    de9c:	687b      	ldr	r3, [r7, #4]
    de9e:	4618      	mov	r0, r3
    dea0:	370c      	adds	r7, #12
    dea2:	46bd      	mov	sp, r7
    dea4:	bc80      	pop	{r7}
    dea6:	4770      	bx	lr

0000dea8 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    dea8:	b580      	push	{r7, lr}
    deaa:	b082      	sub	sp, #8
    deac:	af00      	add	r7, sp, #0
    deae:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    deb0:	687b      	ldr	r3, [r7, #4]
    deb2:	68da      	ldr	r2, [r3, #12]
    deb4:	687b      	ldr	r3, [r7, #4]
    deb6:	3310      	adds	r3, #16
    deb8:	4619      	mov	r1, r3
    deba:	4610      	mov	r0, r2
    debc:	4b09      	ldr	r3, [pc, #36]	; (dee4 <_ZN13SPI_Syn_Class4initEv+0x3c>)
    debe:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    dec0:	687b      	ldr	r3, [r7, #4]
    dec2:	68db      	ldr	r3, [r3, #12]
    dec4:	4618      	mov	r0, r3
    dec6:	4b08      	ldr	r3, [pc, #32]	; (dee8 <_ZN13SPI_Syn_Class4initEv+0x40>)
    dec8:	4798      	blx	r3
		txBuffer=txStaticBuffer;
    deca:	687b      	ldr	r3, [r7, #4]
    decc:	4a07      	ldr	r2, [pc, #28]	; (deec <_ZN13SPI_Syn_Class4initEv+0x44>)
    dece:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
    ded0:	687b      	ldr	r3, [r7, #4]
    ded2:	4a06      	ldr	r2, [pc, #24]	; (deec <_ZN13SPI_Syn_Class4initEv+0x44>)
    ded4:	609a      	str	r2, [r3, #8]
	ready=true;
    ded6:	687b      	ldr	r3, [r7, #4]
    ded8:	2201      	movs	r2, #1
    deda:	701a      	strb	r2, [r3, #0]
	
}
    dedc:	bf00      	nop
    dede:	3708      	adds	r7, #8
    dee0:	46bd      	mov	sp, r7
    dee2:	bd80      	pop	{r7, pc}
    dee4:	00002a59 	.word	0x00002a59
    dee8:	000028cd 	.word	0x000028cd
    deec:	200011d4 	.word	0x200011d4

0000def0 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
    def0:	b480      	push	{r7}
    def2:	b083      	sub	sp, #12
    def4:	af00      	add	r7, sp, #0
    def6:	6078      	str	r0, [r7, #4]
    def8:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    defa:	4a05      	ldr	r2, [pc, #20]	; (df10 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
    defc:	687b      	ldr	r3, [r7, #4]
    defe:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	683a      	ldr	r2, [r7, #0]
    df04:	60da      	str	r2, [r3, #12]
}
    df06:	bf00      	nop
    df08:	370c      	adds	r7, #12
    df0a:	46bd      	mov	sp, r7
    df0c:	bc80      	pop	{r7}
    df0e:	4770      	bx	lr
    df10:	200011d0 	.word	0x200011d0

0000df14 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
    df14:	b580      	push	{r7, lr}
    df16:	b082      	sub	sp, #8
    df18:	af00      	add	r7, sp, #0
    df1a:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    df1c:	687b      	ldr	r3, [r7, #4]
    df1e:	68da      	ldr	r2, [r3, #12]
    df20:	687b      	ldr	r3, [r7, #4]
    df22:	3310      	adds	r3, #16
    df24:	4619      	mov	r1, r3
    df26:	4610      	mov	r0, r2
    df28:	4b07      	ldr	r3, [pc, #28]	; (df48 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    df2a:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    df2c:	687b      	ldr	r3, [r7, #4]
    df2e:	68db      	ldr	r3, [r3, #12]
    df30:	4618      	mov	r0, r3
    df32:	4b06      	ldr	r3, [pc, #24]	; (df4c <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    df34:	4798      	blx	r3
	ready=true;
    df36:	687b      	ldr	r3, [r7, #4]
    df38:	2201      	movs	r2, #1
    df3a:	701a      	strb	r2, [r3, #0]
	return 0;
    df3c:	2300      	movs	r3, #0
}
    df3e:	4618      	mov	r0, r3
    df40:	3708      	adds	r7, #8
    df42:	46bd      	mov	sp, r7
    df44:	bd80      	pop	{r7, pc}
    df46:	bf00      	nop
    df48:	00002a59 	.word	0x00002a59
    df4c:	000028cd 	.word	0x000028cd

0000df50 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    df50:	b580      	push	{r7, lr}
    df52:	b086      	sub	sp, #24
    df54:	af00      	add	r7, sp, #0
    df56:	60f8      	str	r0, [r7, #12]
    df58:	60b9      	str	r1, [r7, #8]
    df5a:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    df5c:	68fb      	ldr	r3, [r7, #12]
    df5e:	2201      	movs	r2, #1
    df60:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    df62:	68fb      	ldr	r3, [r7, #12]
    df64:	691b      	ldr	r3, [r3, #16]
    df66:	687a      	ldr	r2, [r7, #4]
    df68:	b292      	uxth	r2, r2
    df6a:	68b9      	ldr	r1, [r7, #8]
    df6c:	4618      	mov	r0, r3
    df6e:	4b08      	ldr	r3, [pc, #32]	; (df90 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    df70:	4798      	blx	r3
    df72:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    df74:	697b      	ldr	r3, [r7, #20]
    df76:	2b00      	cmp	r3, #0
    df78:	bf14      	ite	ne
    df7a:	2301      	movne	r3, #1
    df7c:	2300      	moveq	r3, #0
    df7e:	b2da      	uxtb	r2, r3
    df80:	68fb      	ldr	r3, [r7, #12]
    df82:	761a      	strb	r2, [r3, #24]
	 return w;
    df84:	697b      	ldr	r3, [r7, #20]
	
}
    df86:	4618      	mov	r0, r3
    df88:	3718      	adds	r7, #24
    df8a:	46bd      	mov	sp, r7
    df8c:	bd80      	pop	{r7, pc}
    df8e:	bf00      	nop
    df90:	0000f64d 	.word	0x0000f64d

0000df94 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    df94:	b580      	push	{r7, lr}
    df96:	b086      	sub	sp, #24
    df98:	af00      	add	r7, sp, #0
    df9a:	60f8      	str	r0, [r7, #12]
    df9c:	60b9      	str	r1, [r7, #8]
    df9e:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    dfa0:	68fb      	ldr	r3, [r7, #12]
    dfa2:	2201      	movs	r2, #1
    dfa4:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    dfa6:	68fb      	ldr	r3, [r7, #12]
    dfa8:	691b      	ldr	r3, [r3, #16]
    dfaa:	687a      	ldr	r2, [r7, #4]
    dfac:	b292      	uxth	r2, r2
    dfae:	68b9      	ldr	r1, [r7, #8]
    dfb0:	4618      	mov	r0, r3
    dfb2:	4b08      	ldr	r3, [pc, #32]	; (dfd4 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    dfb4:	4798      	blx	r3
    dfb6:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    dfb8:	697b      	ldr	r3, [r7, #20]
    dfba:	2b00      	cmp	r3, #0
    dfbc:	bf14      	ite	ne
    dfbe:	2301      	movne	r3, #1
    dfc0:	2300      	moveq	r3, #0
    dfc2:	b2da      	uxtb	r2, r3
    dfc4:	68fb      	ldr	r3, [r7, #12]
    dfc6:	765a      	strb	r2, [r3, #25]
	return  r;
    dfc8:	697b      	ldr	r3, [r7, #20]
}
    dfca:	4618      	mov	r0, r3
    dfcc:	3718      	adds	r7, #24
    dfce:	46bd      	mov	sp, r7
    dfd0:	bd80      	pop	{r7, pc}
    dfd2:	bf00      	nop
    dfd4:	0000f69d 	.word	0x0000f69d

0000dfd8 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    dfd8:	b580      	push	{r7, lr}
    dfda:	b082      	sub	sp, #8
    dfdc:	af00      	add	r7, sp, #0
    dfde:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    dfe0:	687b      	ldr	r3, [r7, #4]
    dfe2:	68db      	ldr	r3, [r3, #12]
    dfe4:	4618      	mov	r0, r3
    dfe6:	4b03      	ldr	r3, [pc, #12]	; (dff4 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    dfe8:	4798      	blx	r3
	
}
    dfea:	bf00      	nop
    dfec:	3708      	adds	r7, #8
    dfee:	46bd      	mov	sp, r7
    dff0:	bd80      	pop	{r7, pc}
    dff2:	bf00      	nop
    dff4:	00002909 	.word	0x00002909

0000dff8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    dff8:	b480      	push	{r7}
    dffa:	b083      	sub	sp, #12
    dffc:	af00      	add	r7, sp, #0
    dffe:	6078      	str	r0, [r7, #4]
    e000:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e002:	687b      	ldr	r3, [r7, #4]
    e004:	683a      	ldr	r2, [r7, #0]
    e006:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    e008:	687b      	ldr	r3, [r7, #4]
    e00a:	68db      	ldr	r3, [r3, #12]
    e00c:	2200      	movs	r2, #0
    e00e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    e010:	4a06      	ldr	r2, [pc, #24]	; (e02c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    e012:	687b      	ldr	r3, [r7, #4]
    e014:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e016:	687b      	ldr	r3, [r7, #4]
    e018:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e01c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    e01e:	687b      	ldr	r3, [r7, #4]
    e020:	4618      	mov	r0, r3
    e022:	370c      	adds	r7, #12
    e024:	46bd      	mov	sp, r7
    e026:	bc80      	pop	{r7}
    e028:	4770      	bx	lr
    e02a:	bf00      	nop
    e02c:	20001314 	.word	0x20001314

0000e030 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    e030:	b480      	push	{r7}
    e032:	b083      	sub	sp, #12
    e034:	af00      	add	r7, sp, #0
    e036:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e038:	687b      	ldr	r3, [r7, #4]
    e03a:	2200      	movs	r2, #0
    e03c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e03e:	687b      	ldr	r3, [r7, #4]
    e040:	4618      	mov	r0, r3
    e042:	370c      	adds	r7, #12
    e044:	46bd      	mov	sp, r7
    e046:	bc80      	pop	{r7}
    e048:	4770      	bx	lr
	...

0000e04c <_ZL9InitArrayv>:


static void InitArray(){
    e04c:	b480      	push	{r7}
    e04e:	b083      	sub	sp, #12
    e050:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    e052:	2301      	movs	r3, #1
    e054:	607b      	str	r3, [r7, #4]
    e056:	687b      	ldr	r3, [r7, #4]
    e058:	2b1f      	cmp	r3, #31
    e05a:	dc34      	bgt.n	e0c6 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    e05c:	491e      	ldr	r1, [pc, #120]	; (e0d8 <_ZL9InitArrayv+0x8c>)
    e05e:	687a      	ldr	r2, [r7, #4]
    e060:	4613      	mov	r3, r2
    e062:	009b      	lsls	r3, r3, #2
    e064:	4413      	add	r3, r2
    e066:	009b      	lsls	r3, r3, #2
    e068:	440b      	add	r3, r1
    e06a:	2200      	movs	r2, #0
    e06c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    e06e:	491a      	ldr	r1, [pc, #104]	; (e0d8 <_ZL9InitArrayv+0x8c>)
    e070:	687a      	ldr	r2, [r7, #4]
    e072:	4613      	mov	r3, r2
    e074:	009b      	lsls	r3, r3, #2
    e076:	4413      	add	r3, r2
    e078:	009b      	lsls	r3, r3, #2
    e07a:	440b      	add	r3, r1
    e07c:	330c      	adds	r3, #12
    e07e:	2200      	movs	r2, #0
    e080:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    e082:	687b      	ldr	r3, [r7, #4]
    e084:	1e5a      	subs	r2, r3, #1
    e086:	6879      	ldr	r1, [r7, #4]
    e088:	460b      	mov	r3, r1
    e08a:	009b      	lsls	r3, r3, #2
    e08c:	440b      	add	r3, r1
    e08e:	009b      	lsls	r3, r3, #2
    e090:	4911      	ldr	r1, [pc, #68]	; (e0d8 <_ZL9InitArrayv+0x8c>)
    e092:	4419      	add	r1, r3
    e094:	4810      	ldr	r0, [pc, #64]	; (e0d8 <_ZL9InitArrayv+0x8c>)
    e096:	4613      	mov	r3, r2
    e098:	009b      	lsls	r3, r3, #2
    e09a:	4413      	add	r3, r2
    e09c:	009b      	lsls	r3, r3, #2
    e09e:	4403      	add	r3, r0
    e0a0:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    e0a2:	4a0e      	ldr	r2, [pc, #56]	; (e0dc <_ZL9InitArrayv+0x90>)
    e0a4:	687b      	ldr	r3, [r7, #4]
    e0a6:	2100      	movs	r1, #0
    e0a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    e0ac:	687b      	ldr	r3, [r7, #4]
    e0ae:	3b01      	subs	r3, #1
    e0b0:	687a      	ldr	r2, [r7, #4]
    e0b2:	0092      	lsls	r2, r2, #2
    e0b4:	4909      	ldr	r1, [pc, #36]	; (e0dc <_ZL9InitArrayv+0x90>)
    e0b6:	440a      	add	r2, r1
    e0b8:	4908      	ldr	r1, [pc, #32]	; (e0dc <_ZL9InitArrayv+0x90>)
    e0ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    e0be:	687b      	ldr	r3, [r7, #4]
    e0c0:	3301      	adds	r3, #1
    e0c2:	607b      	str	r3, [r7, #4]
    e0c4:	e7c7      	b.n	e056 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    e0c6:	4b06      	ldr	r3, [pc, #24]	; (e0e0 <_ZL9InitArrayv+0x94>)
    e0c8:	2201      	movs	r2, #1
    e0ca:	701a      	strb	r2, [r3, #0]
		
}
    e0cc:	bf00      	nop
    e0ce:	370c      	adds	r7, #12
    e0d0:	46bd      	mov	sp, r7
    e0d2:	bc80      	pop	{r7}
    e0d4:	4770      	bx	lr
    e0d6:	bf00      	nop
    e0d8:	20001318 	.word	0x20001318
    e0dc:	20001598 	.word	0x20001598
    e0e0:	20001618 	.word	0x20001618

0000e0e4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    e0e4:	b580      	push	{r7, lr}
    e0e6:	b082      	sub	sp, #8
    e0e8:	af00      	add	r7, sp, #0
    e0ea:	6078      	str	r0, [r7, #4]
	ticks=0;
    e0ec:	687b      	ldr	r3, [r7, #4]
    e0ee:	2200      	movs	r2, #0
    e0f0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    e0f2:	4b0d      	ldr	r3, [pc, #52]	; (e128 <_ZN11Timer_Class4InitEv+0x44>)
    e0f4:	781b      	ldrb	r3, [r3, #0]
    e0f6:	f083 0301 	eor.w	r3, r3, #1
    e0fa:	b2db      	uxtb	r3, r3
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d001      	beq.n	e104 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    e100:	4b0a      	ldr	r3, [pc, #40]	; (e12c <_ZN11Timer_Class4InitEv+0x48>)
    e102:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    e104:	6878      	ldr	r0, [r7, #4]
    e106:	4b0a      	ldr	r3, [pc, #40]	; (e130 <_ZN11Timer_Class4InitEv+0x4c>)
    e108:	4798      	blx	r3
    e10a:	4603      	mov	r3, r0
    e10c:	2b00      	cmp	r3, #0
    e10e:	bf0c      	ite	eq
    e110:	2301      	moveq	r3, #1
    e112:	2300      	movne	r3, #0
    e114:	b2da      	uxtb	r2, r3
    e116:	687b      	ldr	r3, [r7, #4]
    e118:	709a      	strb	r2, [r3, #2]
	return isOK;
    e11a:	687b      	ldr	r3, [r7, #4]
    e11c:	789b      	ldrb	r3, [r3, #2]
    e11e:	b2db      	uxtb	r3, r3
}
    e120:	4618      	mov	r0, r3
    e122:	3708      	adds	r7, #8
    e124:	46bd      	mov	sp, r7
    e126:	bd80      	pop	{r7, pc}
    e128:	20001618 	.word	0x20001618
    e12c:	0000e04d 	.word	0x0000e04d
    e130:	0000e135 	.word	0x0000e135

0000e134 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    e134:	b580      	push	{r7, lr}
    e136:	b084      	sub	sp, #16
    e138:	af00      	add	r7, sp, #0
    e13a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e13c:	687b      	ldr	r3, [r7, #4]
    e13e:	68db      	ldr	r3, [r3, #12]
    e140:	4618      	mov	r0, r3
    e142:	4b04      	ldr	r3, [pc, #16]	; (e154 <_ZN11Timer_Class5StartEv+0x20>)
    e144:	4798      	blx	r3
    e146:	60f8      	str	r0, [r7, #12]
	return status;
    e148:	68fb      	ldr	r3, [r7, #12]
	
}
    e14a:	4618      	mov	r0, r3
    e14c:	3710      	adds	r7, #16
    e14e:	46bd      	mov	sp, r7
    e150:	bd80      	pop	{r7, pc}
    e152:	bf00      	nop
    e154:	00002b49 	.word	0x00002b49

0000e158 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    e158:	b580      	push	{r7, lr}
    e15a:	b084      	sub	sp, #16
    e15c:	af00      	add	r7, sp, #0
    e15e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e160:	687b      	ldr	r3, [r7, #4]
    e162:	68db      	ldr	r3, [r3, #12]
    e164:	4618      	mov	r0, r3
    e166:	4b05      	ldr	r3, [pc, #20]	; (e17c <_ZN11Timer_Class4StopEv+0x24>)
    e168:	4798      	blx	r3
    e16a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e16c:	687b      	ldr	r3, [r7, #4]
    e16e:	2200      	movs	r2, #0
    e170:	705a      	strb	r2, [r3, #1]
	return status;
    e172:	68fb      	ldr	r3, [r7, #12]
}
    e174:	4618      	mov	r0, r3
    e176:	3710      	adds	r7, #16
    e178:	46bd      	mov	sp, r7
    e17a:	bd80      	pop	{r7, pc}
    e17c:	00002bb1 	.word	0x00002bb1

0000e180 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e180:	b580      	push	{r7, lr}
    e182:	b086      	sub	sp, #24
    e184:	af00      	add	r7, sp, #0
    e186:	60f8      	str	r0, [r7, #12]
    e188:	60b9      	str	r1, [r7, #8]
    e18a:	607a      	str	r2, [r7, #4]
    e18c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    e18e:	68b9      	ldr	r1, [r7, #8]
    e190:	68f8      	ldr	r0, [r7, #12]
    e192:	4b0e      	ldr	r3, [pc, #56]	; (e1cc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e194:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    e196:	68fb      	ldr	r3, [r7, #12]
    e198:	699b      	ldr	r3, [r3, #24]
    e19a:	687a      	ldr	r2, [r7, #4]
    e19c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e19e:	68fb      	ldr	r3, [r7, #12]
    e1a0:	699b      	ldr	r3, [r3, #24]
    e1a2:	68ba      	ldr	r2, [r7, #8]
    e1a4:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e1a6:	68fb      	ldr	r3, [r7, #12]
    e1a8:	699b      	ldr	r3, [r3, #24]
    e1aa:	78fa      	ldrb	r2, [r7, #3]
    e1ac:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e1ae:	68fb      	ldr	r3, [r7, #12]
    e1b0:	68da      	ldr	r2, [r3, #12]
    e1b2:	68fb      	ldr	r3, [r7, #12]
    e1b4:	699b      	ldr	r3, [r3, #24]
    e1b6:	4619      	mov	r1, r3
    e1b8:	4610      	mov	r0, r2
    e1ba:	4b05      	ldr	r3, [pc, #20]	; (e1d0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    e1bc:	4798      	blx	r3
    e1be:	6178      	str	r0, [r7, #20]
	
	return status;
    e1c0:	697b      	ldr	r3, [r7, #20]
}
    e1c2:	4618      	mov	r0, r3
    e1c4:	3718      	adds	r7, #24
    e1c6:	46bd      	mov	sp, r7
    e1c8:	bd80      	pop	{r7, pc}
    e1ca:	bf00      	nop
    e1cc:	0000e2e9 	.word	0x0000e2e9
    e1d0:	00002c1d 	.word	0x00002c1d

0000e1d4 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    e1d4:	b580      	push	{r7, lr}
    e1d6:	b082      	sub	sp, #8
    e1d8:	af00      	add	r7, sp, #0
    e1da:	6078      	str	r0, [r7, #4]
    e1dc:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e1de:	6839      	ldr	r1, [r7, #0]
    e1e0:	6878      	ldr	r0, [r7, #4]
    e1e2:	4b0f      	ldr	r3, [pc, #60]	; (e220 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    e1e4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e1e6:	687b      	ldr	r3, [r7, #4]
    e1e8:	68db      	ldr	r3, [r3, #12]
    e1ea:	f103 0218 	add.w	r2, r3, #24
    e1ee:	687b      	ldr	r3, [r7, #4]
    e1f0:	699b      	ldr	r3, [r3, #24]
    e1f2:	4619      	mov	r1, r3
    e1f4:	4610      	mov	r0, r2
    e1f6:	4b0b      	ldr	r3, [pc, #44]	; (e224 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    e1f8:	4798      	blx	r3
    e1fa:	4603      	mov	r3, r0
    e1fc:	2b00      	cmp	r3, #0
    e1fe:	d007      	beq.n	e210 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e200:	687b      	ldr	r3, [r7, #4]
    e202:	68da      	ldr	r2, [r3, #12]
    e204:	687b      	ldr	r3, [r7, #4]
    e206:	699b      	ldr	r3, [r3, #24]
    e208:	4619      	mov	r1, r3
    e20a:	4610      	mov	r0, r2
    e20c:	4b06      	ldr	r3, [pc, #24]	; (e228 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    e20e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e210:	687b      	ldr	r3, [r7, #4]
    e212:	699b      	ldr	r3, [r3, #24]
    e214:	2200      	movs	r2, #0
    e216:	60da      	str	r2, [r3, #12]
}
    e218:	bf00      	nop
    e21a:	3708      	adds	r7, #8
    e21c:	46bd      	mov	sp, r7
    e21e:	bd80      	pop	{r7, pc}
    e220:	0000e369 	.word	0x0000e369
    e224:	00003909 	.word	0x00003909
    e228:	00002d21 	.word	0x00002d21

0000e22c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e22c:	b590      	push	{r4, r7, lr}
    e22e:	b087      	sub	sp, #28
    e230:	af00      	add	r7, sp, #0
    e232:	60f8      	str	r0, [r7, #12]
    e234:	60b9      	str	r1, [r7, #8]
    e236:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e238:	2300      	movs	r3, #0
    e23a:	687a      	ldr	r2, [r7, #4]
    e23c:	68b9      	ldr	r1, [r7, #8]
    e23e:	68f8      	ldr	r0, [r7, #12]
    e240:	4c0c      	ldr	r4, [pc, #48]	; (e274 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    e242:	47a0      	blx	r4
    e244:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e246:	68fb      	ldr	r3, [r7, #12]
    e248:	68db      	ldr	r3, [r3, #12]
    e24a:	681b      	ldr	r3, [r3, #0]
    e24c:	699b      	ldr	r3, [r3, #24]
    e24e:	68fa      	ldr	r2, [r7, #12]
    e250:	68d2      	ldr	r2, [r2, #12]
    e252:	3204      	adds	r2, #4
    e254:	4610      	mov	r0, r2
    e256:	4798      	blx	r3
    e258:	4603      	mov	r3, r0
    e25a:	2b00      	cmp	r3, #0
    e25c:	d105      	bne.n	e26a <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    e25e:	68fb      	ldr	r3, [r7, #12]
    e260:	68db      	ldr	r3, [r3, #12]
    e262:	4618      	mov	r0, r3
    e264:	4b04      	ldr	r3, [pc, #16]	; (e278 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    e266:	4798      	blx	r3
    e268:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    e26a:	697b      	ldr	r3, [r7, #20]
}
    e26c:	4618      	mov	r0, r3
    e26e:	371c      	adds	r7, #28
    e270:	46bd      	mov	sp, r7
    e272:	bd90      	pop	{r4, r7, pc}
    e274:	0000e181 	.word	0x0000e181
    e278:	00002b49 	.word	0x00002b49

0000e27c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    e27c:	b480      	push	{r7}
    e27e:	b085      	sub	sp, #20
    e280:	af00      	add	r7, sp, #0
    e282:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e284:	2300      	movs	r3, #0
    e286:	73fb      	strb	r3, [r7, #15]
    e288:	7bfb      	ldrb	r3, [r7, #15]
    e28a:	2b1f      	cmp	r3, #31
    e28c:	dc23      	bgt.n	e2d6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e28e:	687b      	ldr	r3, [r7, #4]
    e290:	7f1a      	ldrb	r2, [r3, #28]
    e292:	7bfb      	ldrb	r3, [r7, #15]
    e294:	4413      	add	r3, r2
    e296:	b2db      	uxtb	r3, r3
    e298:	f003 031f 	and.w	r3, r3, #31
    e29c:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e29e:	7bba      	ldrb	r2, [r7, #14]
    e2a0:	4910      	ldr	r1, [pc, #64]	; (e2e4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e2a2:	4613      	mov	r3, r2
    e2a4:	009b      	lsls	r3, r3, #2
    e2a6:	4413      	add	r3, r2
    e2a8:	009b      	lsls	r3, r3, #2
    e2aa:	440b      	add	r3, r1
    e2ac:	330c      	adds	r3, #12
    e2ae:	681b      	ldr	r3, [r3, #0]
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d10c      	bne.n	e2ce <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    e2b4:	7bba      	ldrb	r2, [r7, #14]
    e2b6:	4613      	mov	r3, r2
    e2b8:	009b      	lsls	r3, r3, #2
    e2ba:	4413      	add	r3, r2
    e2bc:	009b      	lsls	r3, r3, #2
    e2be:	4a09      	ldr	r2, [pc, #36]	; (e2e4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e2c0:	441a      	add	r2, r3
    e2c2:	687b      	ldr	r3, [r7, #4]
    e2c4:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e2c6:	687b      	ldr	r3, [r7, #4]
    e2c8:	7bba      	ldrb	r2, [r7, #14]
    e2ca:	771a      	strb	r2, [r3, #28]
			return;
    e2cc:	e006      	b.n	e2dc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e2ce:	7bfb      	ldrb	r3, [r7, #15]
    e2d0:	3301      	adds	r3, #1
    e2d2:	73fb      	strb	r3, [r7, #15]
    e2d4:	e7d8      	b.n	e288 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e2d6:	687b      	ldr	r3, [r7, #4]
    e2d8:	4a02      	ldr	r2, [pc, #8]	; (e2e4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e2da:	619a      	str	r2, [r3, #24]

}
    e2dc:	3714      	adds	r7, #20
    e2de:	46bd      	mov	sp, r7
    e2e0:	bc80      	pop	{r7}
    e2e2:	4770      	bx	lr
    e2e4:	20001318 	.word	0x20001318

0000e2e8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    e2e8:	b580      	push	{r7, lr}
    e2ea:	b084      	sub	sp, #16
    e2ec:	af00      	add	r7, sp, #0
    e2ee:	6078      	str	r0, [r7, #4]
    e2f0:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e2f2:	2300      	movs	r3, #0
    e2f4:	73fb      	strb	r3, [r7, #15]
    e2f6:	7bfb      	ldrb	r3, [r7, #15]
    e2f8:	2b1f      	cmp	r3, #31
    e2fa:	dc28      	bgt.n	e34e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e2fc:	687b      	ldr	r3, [r7, #4]
    e2fe:	7f1a      	ldrb	r2, [r3, #28]
    e300:	7bfb      	ldrb	r3, [r7, #15]
    e302:	4413      	add	r3, r2
    e304:	b2db      	uxtb	r3, r3
    e306:	f003 031f 	and.w	r3, r3, #31
    e30a:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    e30c:	7bba      	ldrb	r2, [r7, #14]
    e30e:	4913      	ldr	r1, [pc, #76]	; (e35c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e310:	4613      	mov	r3, r2
    e312:	009b      	lsls	r3, r3, #2
    e314:	4413      	add	r3, r2
    e316:	009b      	lsls	r3, r3, #2
    e318:	440b      	add	r3, r1
    e31a:	330c      	adds	r3, #12
    e31c:	681a      	ldr	r2, [r3, #0]
    e31e:	683b      	ldr	r3, [r7, #0]
    e320:	429a      	cmp	r2, r3
    e322:	d110      	bne.n	e346 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    e324:	6839      	ldr	r1, [r7, #0]
    e326:	6878      	ldr	r0, [r7, #4]
    e328:	4b0d      	ldr	r3, [pc, #52]	; (e360 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    e32a:	4798      	blx	r3
			task=&taskArray[j];
    e32c:	7bba      	ldrb	r2, [r7, #14]
    e32e:	4613      	mov	r3, r2
    e330:	009b      	lsls	r3, r3, #2
    e332:	4413      	add	r3, r2
    e334:	009b      	lsls	r3, r3, #2
    e336:	4a09      	ldr	r2, [pc, #36]	; (e35c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e338:	441a      	add	r2, r3
    e33a:	687b      	ldr	r3, [r7, #4]
    e33c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e33e:	687b      	ldr	r3, [r7, #4]
    e340:	7bba      	ldrb	r2, [r7, #14]
    e342:	771a      	strb	r2, [r3, #28]
			return;
    e344:	e006      	b.n	e354 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e346:	7bfb      	ldrb	r3, [r7, #15]
    e348:	3301      	adds	r3, #1
    e34a:	73fb      	strb	r3, [r7, #15]
    e34c:	e7d3      	b.n	e2f6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    e34e:	6878      	ldr	r0, [r7, #4]
    e350:	4b04      	ldr	r3, [pc, #16]	; (e364 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    e352:	4798      	blx	r3
	//task=&taskArray[0];

}
    e354:	3710      	adds	r7, #16
    e356:	46bd      	mov	sp, r7
    e358:	bd80      	pop	{r7, pc}
    e35a:	bf00      	nop
    e35c:	20001318 	.word	0x20001318
    e360:	0000e1d5 	.word	0x0000e1d5
    e364:	0000e27d 	.word	0x0000e27d

0000e368 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    e368:	b480      	push	{r7}
    e36a:	b085      	sub	sp, #20
    e36c:	af00      	add	r7, sp, #0
    e36e:	6078      	str	r0, [r7, #4]
    e370:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e372:	2300      	movs	r3, #0
    e374:	73fb      	strb	r3, [r7, #15]
    e376:	7bfb      	ldrb	r3, [r7, #15]
    e378:	2b1f      	cmp	r3, #31
    e37a:	dc19      	bgt.n	e3b0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e37c:	7bfa      	ldrb	r2, [r7, #15]
    e37e:	490f      	ldr	r1, [pc, #60]	; (e3bc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e380:	4613      	mov	r3, r2
    e382:	009b      	lsls	r3, r3, #2
    e384:	4413      	add	r3, r2
    e386:	009b      	lsls	r3, r3, #2
    e388:	440b      	add	r3, r1
    e38a:	330c      	adds	r3, #12
    e38c:	681a      	ldr	r2, [r3, #0]
    e38e:	683b      	ldr	r3, [r7, #0]
    e390:	429a      	cmp	r2, r3
    e392:	d109      	bne.n	e3a8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e394:	7bfa      	ldrb	r2, [r7, #15]
    e396:	4613      	mov	r3, r2
    e398:	009b      	lsls	r3, r3, #2
    e39a:	4413      	add	r3, r2
    e39c:	009b      	lsls	r3, r3, #2
    e39e:	4a07      	ldr	r2, [pc, #28]	; (e3bc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e3a0:	441a      	add	r2, r3
    e3a2:	687b      	ldr	r3, [r7, #4]
    e3a4:	619a      	str	r2, [r3, #24]
			return;
    e3a6:	e004      	b.n	e3b2 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e3a8:	7bfb      	ldrb	r3, [r7, #15]
    e3aa:	3301      	adds	r3, #1
    e3ac:	73fb      	strb	r3, [r7, #15]
    e3ae:	e7e2      	b.n	e376 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    e3b0:	bf00      	nop
}
    e3b2:	3714      	adds	r7, #20
    e3b4:	46bd      	mov	sp, r7
    e3b6:	bc80      	pop	{r7}
    e3b8:	4770      	bx	lr
    e3ba:	bf00      	nop
    e3bc:	20001318 	.word	0x20001318

0000e3c0 <_Z41__static_initialization_and_destruction_0ii>:
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b082      	sub	sp, #8
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	6078      	str	r0, [r7, #4]
    e3c8:	6039      	str	r1, [r7, #0]
    e3ca:	687b      	ldr	r3, [r7, #4]
    e3cc:	2b01      	cmp	r3, #1
    e3ce:	d14c      	bne.n	e46a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e3d0:	683b      	ldr	r3, [r7, #0]
    e3d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e3d6:	4293      	cmp	r3, r2
    e3d8:	d147      	bne.n	e46a <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e3da:	4926      	ldr	r1, [pc, #152]	; (e474 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e3dc:	4826      	ldr	r0, [pc, #152]	; (e478 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e3de:	4b27      	ldr	r3, [pc, #156]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e3e0:	4798      	blx	r3
    e3e2:	4a27      	ldr	r2, [pc, #156]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3e4:	4927      	ldr	r1, [pc, #156]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e3e6:	4824      	ldr	r0, [pc, #144]	; (e478 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e3e8:	4b27      	ldr	r3, [pc, #156]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e3ea:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e3ec:	4927      	ldr	r1, [pc, #156]	; (e48c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3ee:	4828      	ldr	r0, [pc, #160]	; (e490 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3f0:	4b22      	ldr	r3, [pc, #136]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e3f2:	4798      	blx	r3
    e3f4:	4a22      	ldr	r2, [pc, #136]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3f6:	4923      	ldr	r1, [pc, #140]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e3f8:	4825      	ldr	r0, [pc, #148]	; (e490 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3fa:	4b23      	ldr	r3, [pc, #140]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e3fc:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e3fe:	4925      	ldr	r1, [pc, #148]	; (e494 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e400:	4825      	ldr	r0, [pc, #148]	; (e498 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e402:	4b1e      	ldr	r3, [pc, #120]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e404:	4798      	blx	r3
    e406:	4a1e      	ldr	r2, [pc, #120]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e408:	491e      	ldr	r1, [pc, #120]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e40a:	4823      	ldr	r0, [pc, #140]	; (e498 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e40c:	4b1e      	ldr	r3, [pc, #120]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e40e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e410:	4922      	ldr	r1, [pc, #136]	; (e49c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e412:	4823      	ldr	r0, [pc, #140]	; (e4a0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e414:	4b19      	ldr	r3, [pc, #100]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e416:	4798      	blx	r3
    e418:	4a19      	ldr	r2, [pc, #100]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e41a:	491a      	ldr	r1, [pc, #104]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e41c:	4820      	ldr	r0, [pc, #128]	; (e4a0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e41e:	4b1a      	ldr	r3, [pc, #104]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e420:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e422:	4920      	ldr	r1, [pc, #128]	; (e4a4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e424:	4820      	ldr	r0, [pc, #128]	; (e4a8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e426:	4b15      	ldr	r3, [pc, #84]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e428:	4798      	blx	r3
    e42a:	4a15      	ldr	r2, [pc, #84]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e42c:	4915      	ldr	r1, [pc, #84]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e42e:	481e      	ldr	r0, [pc, #120]	; (e4a8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e430:	4b15      	ldr	r3, [pc, #84]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e432:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e434:	491d      	ldr	r1, [pc, #116]	; (e4ac <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e436:	481e      	ldr	r0, [pc, #120]	; (e4b0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e438:	4b10      	ldr	r3, [pc, #64]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e43a:	4798      	blx	r3
    e43c:	4a10      	ldr	r2, [pc, #64]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e43e:	4911      	ldr	r1, [pc, #68]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e440:	481b      	ldr	r0, [pc, #108]	; (e4b0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e442:	4b11      	ldr	r3, [pc, #68]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e444:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e446:	491b      	ldr	r1, [pc, #108]	; (e4b4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e448:	481b      	ldr	r0, [pc, #108]	; (e4b8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e44a:	4b0c      	ldr	r3, [pc, #48]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e44c:	4798      	blx	r3
    e44e:	4a0c      	ldr	r2, [pc, #48]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e450:	490c      	ldr	r1, [pc, #48]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e452:	4819      	ldr	r0, [pc, #100]	; (e4b8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e454:	4b0c      	ldr	r3, [pc, #48]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e456:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e458:	4918      	ldr	r1, [pc, #96]	; (e4bc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e45a:	4819      	ldr	r0, [pc, #100]	; (e4c0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e45c:	4b07      	ldr	r3, [pc, #28]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e45e:	4798      	blx	r3
    e460:	4a07      	ldr	r2, [pc, #28]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e462:	4908      	ldr	r1, [pc, #32]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e464:	4816      	ldr	r0, [pc, #88]	; (e4c0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e466:	4b08      	ldr	r3, [pc, #32]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e468:	4798      	blx	r3
    e46a:	bf00      	nop
    e46c:	3708      	adds	r7, #8
    e46e:	46bd      	mov	sp, r7
    e470:	bd80      	pop	{r7, pc}
    e472:	bf00      	nop
    e474:	2000a8e0 	.word	0x2000a8e0
    e478:	20001214 	.word	0x20001214
    e47c:	0000dff9 	.word	0x0000dff9
    e480:	20000000 	.word	0x20000000
    e484:	0000e031 	.word	0x0000e031
    e488:	0000fd55 	.word	0x0000fd55
    e48c:	2000a974 	.word	0x2000a974
    e490:	20001234 	.word	0x20001234
    e494:	2000aa98 	.word	0x2000aa98
    e498:	20001254 	.word	0x20001254
    e49c:	2000a994 	.word	0x2000a994
    e4a0:	20001274 	.word	0x20001274
    e4a4:	2000aa58 	.word	0x2000aa58
    e4a8:	20001294 	.word	0x20001294
    e4ac:	2000aa78 	.word	0x2000aa78
    e4b0:	200012b4 	.word	0x200012b4
    e4b4:	2000a950 	.word	0x2000a950
    e4b8:	200012d4 	.word	0x200012d4
    e4bc:	2000a9f0 	.word	0x2000a9f0
    e4c0:	200012f4 	.word	0x200012f4

0000e4c4 <_GLOBAL__sub_I_ptrTimerClass>:
    e4c4:	b580      	push	{r7, lr}
    e4c6:	af00      	add	r7, sp, #0
    e4c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e4cc:	2001      	movs	r0, #1
    e4ce:	4b01      	ldr	r3, [pc, #4]	; (e4d4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e4d0:	4798      	blx	r3
    e4d2:	bd80      	pop	{r7, pc}
    e4d4:	0000e3c1 	.word	0x0000e3c1

0000e4d8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e4d8:	b480      	push	{r7}
    e4da:	b083      	sub	sp, #12
    e4dc:	af00      	add	r7, sp, #0
    e4de:	6078      	str	r0, [r7, #4]
    e4e0:	4a05      	ldr	r2, [pc, #20]	; (e4f8 <_ZN5PrintC1Ev+0x20>)
    e4e2:	687b      	ldr	r3, [r7, #4]
    e4e4:	601a      	str	r2, [r3, #0]
    e4e6:	687b      	ldr	r3, [r7, #4]
    e4e8:	2200      	movs	r2, #0
    e4ea:	605a      	str	r2, [r3, #4]
    e4ec:	687b      	ldr	r3, [r7, #4]
    e4ee:	4618      	mov	r0, r3
    e4f0:	370c      	adds	r7, #12
    e4f2:	46bd      	mov	sp, r7
    e4f4:	bc80      	pop	{r7}
    e4f6:	4770      	bx	lr
    e4f8:	00010c28 	.word	0x00010c28

0000e4fc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e4fc:	b480      	push	{r7}
    e4fe:	b083      	sub	sp, #12
    e500:	af00      	add	r7, sp, #0
    e502:	6078      	str	r0, [r7, #4]
    e504:	2300      	movs	r3, #0
    e506:	4618      	mov	r0, r3
    e508:	370c      	adds	r7, #12
    e50a:	46bd      	mov	sp, r7
    e50c:	bc80      	pop	{r7}
    e50e:	4770      	bx	lr

0000e510 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    e510:	b480      	push	{r7}
    e512:	b083      	sub	sp, #12
    e514:	af00      	add	r7, sp, #0
    e516:	6078      	str	r0, [r7, #4]
    e518:	bf00      	nop
    e51a:	370c      	adds	r7, #12
    e51c:	46bd      	mov	sp, r7
    e51e:	bc80      	pop	{r7}
    e520:	4770      	bx	lr
	...

0000e524 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    e524:	b580      	push	{r7, lr}
    e526:	b082      	sub	sp, #8
    e528:	af00      	add	r7, sp, #0
    e52a:	6078      	str	r0, [r7, #4]
    e52c:	687b      	ldr	r3, [r7, #4]
    e52e:	4618      	mov	r0, r3
    e530:	4b06      	ldr	r3, [pc, #24]	; (e54c <_ZN6StreamC1Ev+0x28>)
    e532:	4798      	blx	r3
    e534:	4a06      	ldr	r2, [pc, #24]	; (e550 <_ZN6StreamC1Ev+0x2c>)
    e536:	687b      	ldr	r3, [r7, #4]
    e538:	601a      	str	r2, [r3, #0]
    e53a:	687b      	ldr	r3, [r7, #4]
    e53c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e540:	609a      	str	r2, [r3, #8]
    e542:	687b      	ldr	r3, [r7, #4]
    e544:	4618      	mov	r0, r3
    e546:	3708      	adds	r7, #8
    e548:	46bd      	mov	sp, r7
    e54a:	bd80      	pop	{r7, pc}
    e54c:	0000e4d9 	.word	0x0000e4d9
    e550:	00010bec 	.word	0x00010bec

0000e554 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    e554:	b480      	push	{r7}
    e556:	b083      	sub	sp, #12
    e558:	af00      	add	r7, sp, #0
    e55a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    e55c:	4b06      	ldr	r3, [pc, #24]	; (e578 <_ZL10USBTimeoutPK10timer_task+0x24>)
    e55e:	681b      	ldr	r3, [r3, #0]
    e560:	2201      	movs	r2, #1
    e562:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    e564:	4b04      	ldr	r3, [pc, #16]	; (e578 <_ZL10USBTimeoutPK10timer_task+0x24>)
    e566:	681b      	ldr	r3, [r3, #0]
    e568:	2200      	movs	r2, #0
    e56a:	741a      	strb	r2, [r3, #16]
	
}
    e56c:	bf00      	nop
    e56e:	370c      	adds	r7, #12
    e570:	46bd      	mov	sp, r7
    e572:	bc80      	pop	{r7}
    e574:	4770      	bx	lr
    e576:	bf00      	nop
    e578:	2000171c 	.word	0x2000171c

0000e57c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e57c:	b480      	push	{r7}
    e57e:	b083      	sub	sp, #12
    e580:	af00      	add	r7, sp, #0
    e582:	4603      	mov	r3, r0
    e584:	603a      	str	r2, [r7, #0]
    e586:	71fb      	strb	r3, [r7, #7]
    e588:	460b      	mov	r3, r1
    e58a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    e58c:	4b08      	ldr	r3, [pc, #32]	; (e5b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e58e:	681b      	ldr	r3, [r3, #0]
    e590:	2201      	movs	r2, #1
    e592:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    e594:	4b06      	ldr	r3, [pc, #24]	; (e5b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e596:	681b      	ldr	r3, [r3, #0]
    e598:	2201      	movs	r2, #1
    e59a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e59c:	4b04      	ldr	r3, [pc, #16]	; (e5b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	2201      	movs	r2, #1
    e5a2:	741a      	strb	r2, [r3, #16]


	return false;
    e5a4:	2300      	movs	r3, #0
}
    e5a6:	4618      	mov	r0, r3
    e5a8:	370c      	adds	r7, #12
    e5aa:	46bd      	mov	sp, r7
    e5ac:	bc80      	pop	{r7}
    e5ae:	4770      	bx	lr
    e5b0:	2000171c 	.word	0x2000171c

0000e5b4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e5b4:	b480      	push	{r7}
    e5b6:	b083      	sub	sp, #12
    e5b8:	af00      	add	r7, sp, #0
    e5ba:	4603      	mov	r3, r0
    e5bc:	603a      	str	r2, [r7, #0]
    e5be:	71fb      	strb	r3, [r7, #7]
    e5c0:	460b      	mov	r3, r1
    e5c2:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e5c4:	4b08      	ldr	r3, [pc, #32]	; (e5e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e5c6:	681b      	ldr	r3, [r3, #0]
    e5c8:	2201      	movs	r2, #1
    e5ca:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e5cc:	4b06      	ldr	r3, [pc, #24]	; (e5e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e5ce:	681b      	ldr	r3, [r3, #0]
    e5d0:	2201      	movs	r2, #1
    e5d2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e5d4:	4b04      	ldr	r3, [pc, #16]	; (e5e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e5d6:	681b      	ldr	r3, [r3, #0]
    e5d8:	2201      	movs	r2, #1
    e5da:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e5dc:	2300      	movs	r3, #0
}
    e5de:	4618      	mov	r0, r3
    e5e0:	370c      	adds	r7, #12
    e5e2:	46bd      	mov	sp, r7
    e5e4:	bc80      	pop	{r7}
    e5e6:	4770      	bx	lr
    e5e8:	2000171c 	.word	0x2000171c

0000e5ec <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e5ec:	b580      	push	{r7, lr}
    e5ee:	b082      	sub	sp, #8
    e5f0:	af00      	add	r7, sp, #0
    e5f2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e5f4:	793b      	ldrb	r3, [r7, #4]
    e5f6:	f003 0301 	and.w	r3, r3, #1
    e5fa:	b2db      	uxtb	r3, r3
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	d013      	beq.n	e628 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e600:	490c      	ldr	r1, [pc, #48]	; (e634 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e602:	2000      	movs	r0, #0
    e604:	4b0c      	ldr	r3, [pc, #48]	; (e638 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e606:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e608:	490c      	ldr	r1, [pc, #48]	; (e63c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e60a:	2001      	movs	r0, #1
    e60c:	4b0a      	ldr	r3, [pc, #40]	; (e638 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e60e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e610:	4b0b      	ldr	r3, [pc, #44]	; (e640 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e612:	681b      	ldr	r3, [r3, #0]
    e614:	2201      	movs	r2, #1
    e616:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e618:	4b09      	ldr	r3, [pc, #36]	; (e640 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e61a:	681b      	ldr	r3, [r3, #0]
    e61c:	2201      	movs	r2, #1
    e61e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e620:	4b07      	ldr	r3, [pc, #28]	; (e640 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e622:	681b      	ldr	r3, [r3, #0]
    e624:	2201      	movs	r2, #1
    e626:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e628:	2300      	movs	r3, #0
}
    e62a:	4618      	mov	r0, r3
    e62c:	3708      	adds	r7, #8
    e62e:	46bd      	mov	sp, r7
    e630:	bd80      	pop	{r7, pc}
    e632:	bf00      	nop
    e634:	0000e57d 	.word	0x0000e57d
    e638:	0000c319 	.word	0x0000c319
    e63c:	0000e5b5 	.word	0x0000e5b5
    e640:	2000171c 	.word	0x2000171c

0000e644 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e644:	b580      	push	{r7, lr}
    e646:	b082      	sub	sp, #8
    e648:	af00      	add	r7, sp, #0
    e64a:	6078      	str	r0, [r7, #4]
    e64c:	687b      	ldr	r3, [r7, #4]
    e64e:	4618      	mov	r0, r3
    e650:	4b0a      	ldr	r3, [pc, #40]	; (e67c <_ZN9CDC_ClassC1Ev+0x38>)
    e652:	4798      	blx	r3
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	3310      	adds	r3, #16
    e658:	4618      	mov	r0, r3
    e65a:	4b09      	ldr	r3, [pc, #36]	; (e680 <_ZN9CDC_ClassC1Ev+0x3c>)
    e65c:	4798      	blx	r3
    e65e:	4a09      	ldr	r2, [pc, #36]	; (e684 <_ZN9CDC_ClassC1Ev+0x40>)
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e664:	687b      	ldr	r3, [r7, #4]
    e666:	f04f 32ff 	mov.w	r2, #4294967295
    e66a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e66c:	4a06      	ldr	r2, [pc, #24]	; (e688 <_ZN9CDC_ClassC1Ev+0x44>)
    e66e:	687b      	ldr	r3, [r7, #4]
    e670:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e672:	687b      	ldr	r3, [r7, #4]
    e674:	4618      	mov	r0, r3
    e676:	3708      	adds	r7, #8
    e678:	46bd      	mov	sp, r7
    e67a:	bd80      	pop	{r7, pc}
    e67c:	0000e525 	.word	0x0000e525
    e680:	0000ed31 	.word	0x0000ed31
    e684:	00010bbc 	.word	0x00010bbc
    e688:	2000171c 	.word	0x2000171c

0000e68c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e68c:	b580      	push	{r7, lr}
    e68e:	b082      	sub	sp, #8
    e690:	af00      	add	r7, sp, #0
    e692:	6078      	str	r0, [r7, #4]
    e694:	4a06      	ldr	r2, [pc, #24]	; (e6b0 <_ZN9CDC_ClassD1Ev+0x24>)
    e696:	687b      	ldr	r3, [r7, #4]
    e698:	601a      	str	r2, [r3, #0]
    e69a:	687b      	ldr	r3, [r7, #4]
    e69c:	3310      	adds	r3, #16
    e69e:	4618      	mov	r0, r3
    e6a0:	4b04      	ldr	r3, [pc, #16]	; (e6b4 <_ZN9CDC_ClassD1Ev+0x28>)
    e6a2:	4798      	blx	r3
{
} //~CDC_Class
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	4618      	mov	r0, r3
    e6a8:	3708      	adds	r7, #8
    e6aa:	46bd      	mov	sp, r7
    e6ac:	bd80      	pop	{r7, pc}
    e6ae:	bf00      	nop
    e6b0:	00010bbc 	.word	0x00010bbc
    e6b4:	0000ed51 	.word	0x0000ed51

0000e6b8 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e6b8:	b580      	push	{r7, lr}
    e6ba:	b082      	sub	sp, #8
    e6bc:	af00      	add	r7, sp, #0
    e6be:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	3310      	adds	r3, #16
    e6c4:	4618      	mov	r0, r3
    e6c6:	4b09      	ldr	r3, [pc, #36]	; (e6ec <_ZN9CDC_Class4InitEv+0x34>)
    e6c8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e6ca:	4909      	ldr	r1, [pc, #36]	; (e6f0 <_ZN9CDC_Class4InitEv+0x38>)
    e6cc:	2003      	movs	r0, #3
    e6ce:	4b09      	ldr	r3, [pc, #36]	; (e6f4 <_ZN9CDC_Class4InitEv+0x3c>)
    e6d0:	4798      	blx	r3
	delay_ms(100);
    e6d2:	2064      	movs	r0, #100	; 0x64
    e6d4:	4b08      	ldr	r3, [pc, #32]	; (e6f8 <_ZN9CDC_Class4InitEv+0x40>)
    e6d6:	4798      	blx	r3
		
	if (connected)
    e6d8:	687b      	ldr	r3, [r7, #4]
    e6da:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e6dc:	2064      	movs	r0, #100	; 0x64
    e6de:	4b06      	ldr	r3, [pc, #24]	; (e6f8 <_ZN9CDC_Class4InitEv+0x40>)
    e6e0:	4798      	blx	r3

	

}
    e6e2:	bf00      	nop
    e6e4:	3708      	adds	r7, #8
    e6e6:	46bd      	mov	sp, r7
    e6e8:	bd80      	pop	{r7, pc}
    e6ea:	bf00      	nop
    e6ec:	0000ed65 	.word	0x0000ed65
    e6f0:	0000e5ed 	.word	0x0000e5ed
    e6f4:	0000c319 	.word	0x0000c319
    e6f8:	0000b149 	.word	0x0000b149

0000e6fc <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e6fc:	b580      	push	{r7, lr}
    e6fe:	b082      	sub	sp, #8
    e700:	af00      	add	r7, sp, #0
    e702:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e704:	4b03      	ldr	r3, [pc, #12]	; (e714 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e706:	4798      	blx	r3
    e708:	4603      	mov	r3, r0
	
}
    e70a:	4618      	mov	r0, r3
    e70c:	3708      	adds	r7, #8
    e70e:	46bd      	mov	sp, r7
    e710:	bd80      	pop	{r7, pc}
    e712:	bf00      	nop
    e714:	0000c391 	.word	0x0000c391

0000e718 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e718:	b580      	push	{r7, lr}
    e71a:	b084      	sub	sp, #16
    e71c:	af00      	add	r7, sp, #0
    e71e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e720:	687b      	ldr	r3, [r7, #4]
    e722:	699b      	ldr	r3, [r3, #24]
    e724:	f1b3 3fff 	cmp.w	r3, #4294967295
    e728:	bf14      	ite	ne
    e72a:	2301      	movne	r3, #1
    e72c:	2300      	moveq	r3, #0
    e72e:	b2db      	uxtb	r3, r3
    e730:	2b00      	cmp	r3, #0
    e732:	d002      	beq.n	e73a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e734:	687b      	ldr	r3, [r7, #4]
    e736:	699b      	ldr	r3, [r3, #24]
    e738:	e011      	b.n	e75e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e73a:	687b      	ldr	r3, [r7, #4]
    e73c:	681b      	ldr	r3, [r3, #0]
    e73e:	331c      	adds	r3, #28
    e740:	681b      	ldr	r3, [r3, #0]
    e742:	f107 010f 	add.w	r1, r7, #15
    e746:	2201      	movs	r2, #1
    e748:	6878      	ldr	r0, [r7, #4]
    e74a:	4798      	blx	r3
    e74c:	4602      	mov	r2, r0
    e74e:	687b      	ldr	r3, [r7, #4]
    e750:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e752:	7bfb      	ldrb	r3, [r7, #15]
    e754:	461a      	mov	r2, r3
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e75a:	687b      	ldr	r3, [r7, #4]
    e75c:	699b      	ldr	r3, [r3, #24]
}
    e75e:	4618      	mov	r0, r3
    e760:	3710      	adds	r7, #16
    e762:	46bd      	mov	sp, r7
    e764:	bd80      	pop	{r7, pc}
	...

0000e768 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e768:	b580      	push	{r7, lr}
    e76a:	b086      	sub	sp, #24
    e76c:	af00      	add	r7, sp, #0
    e76e:	60f8      	str	r0, [r7, #12]
    e770:	60b9      	str	r1, [r7, #8]
    e772:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e774:	68fb      	ldr	r3, [r7, #12]
    e776:	7c1b      	ldrb	r3, [r3, #16]
    e778:	b2db      	uxtb	r3, r3
    e77a:	2b00      	cmp	r3, #0
    e77c:	d02e      	beq.n	e7dc <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e77e:	687a      	ldr	r2, [r7, #4]
    e780:	4613      	mov	r3, r2
    e782:	009b      	lsls	r3, r3, #2
    e784:	4413      	add	r3, r2
    e786:	005b      	lsls	r3, r3, #1
    e788:	461a      	mov	r2, r3
    e78a:	4918      	ldr	r1, [pc, #96]	; (e7ec <_ZN9CDC_Class8readDataEPvl+0x84>)
    e78c:	4818      	ldr	r0, [pc, #96]	; (e7f0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e78e:	4b19      	ldr	r3, [pc, #100]	; (e7f4 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e790:	4798      	blx	r3
		rxReady=false;
    e792:	68fb      	ldr	r3, [r7, #12]
    e794:	2200      	movs	r2, #0
    e796:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e798:	687b      	ldr	r3, [r7, #4]
    e79a:	4619      	mov	r1, r3
    e79c:	68b8      	ldr	r0, [r7, #8]
    e79e:	4b16      	ldr	r3, [pc, #88]	; (e7f8 <_ZN9CDC_Class8readDataEPvl+0x90>)
    e7a0:	4798      	blx	r3
    e7a2:	4603      	mov	r3, r0
    e7a4:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e7a6:	68fb      	ldr	r3, [r7, #12]
    e7a8:	7d5b      	ldrb	r3, [r3, #21]
    e7aa:	b2db      	uxtb	r3, r3
    e7ac:	f083 0301 	eor.w	r3, r3, #1
    e7b0:	b2db      	uxtb	r3, r3
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d006      	beq.n	e7c4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e7b6:	68fb      	ldr	r3, [r7, #12]
    e7b8:	7c1b      	ldrb	r3, [r3, #16]
    e7ba:	b2db      	uxtb	r3, r3
    e7bc:	2b00      	cmp	r3, #0
    e7be:	d001      	beq.n	e7c4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e7c0:	2301      	movs	r3, #1
    e7c2:	e000      	b.n	e7c6 <_ZN9CDC_Class8readDataEPvl+0x5e>
    e7c4:	2300      	movs	r3, #0
    e7c6:	2b00      	cmp	r3, #0
    e7c8:	d000      	beq.n	e7cc <_ZN9CDC_Class8readDataEPvl+0x64>
    e7ca:	e7ec      	b.n	e7a6 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e7cc:	4808      	ldr	r0, [pc, #32]	; (e7f0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e7ce:	4b0b      	ldr	r3, [pc, #44]	; (e7fc <_ZN9CDC_Class8readDataEPvl+0x94>)
    e7d0:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e7d2:	4906      	ldr	r1, [pc, #24]	; (e7ec <_ZN9CDC_Class8readDataEPvl+0x84>)
    e7d4:	4806      	ldr	r0, [pc, #24]	; (e7f0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e7d6:	4b0a      	ldr	r3, [pc, #40]	; (e800 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e7d8:	4798      	blx	r3
    e7da:	e001      	b.n	e7e0 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e7dc:	2300      	movs	r3, #0
    e7de:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e7e0:	7dfb      	ldrb	r3, [r7, #23]
}
    e7e2:	4618      	mov	r0, r3
    e7e4:	3718      	adds	r7, #24
    e7e6:	46bd      	mov	sp, r7
    e7e8:	bd80      	pop	{r7, pc}
    e7ea:	bf00      	nop
    e7ec:	0000e555 	.word	0x0000e555
    e7f0:	200016bc 	.word	0x200016bc
    e7f4:	0000e22d 	.word	0x0000e22d
    e7f8:	0000c26d 	.word	0x0000c26d
    e7fc:	0000e159 	.word	0x0000e159
    e800:	0000e1d5 	.word	0x0000e1d5

0000e804 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e804:	b580      	push	{r7, lr}
    e806:	b084      	sub	sp, #16
    e808:	af00      	add	r7, sp, #0
    e80a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e80c:	687b      	ldr	r3, [r7, #4]
    e80e:	2200      	movs	r2, #0
    e810:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e812:	f107 030f 	add.w	r3, r7, #15
    e816:	2101      	movs	r1, #1
    e818:	4618      	mov	r0, r3
    e81a:	4b08      	ldr	r3, [pc, #32]	; (e83c <_ZN9CDC_Class4readEv+0x38>)
    e81c:	4798      	blx	r3
	while(!rxReady);
    e81e:	687b      	ldr	r3, [r7, #4]
    e820:	7d5b      	ldrb	r3, [r3, #21]
    e822:	b2db      	uxtb	r3, r3
    e824:	f083 0301 	eor.w	r3, r3, #1
    e828:	b2db      	uxtb	r3, r3
    e82a:	2b00      	cmp	r3, #0
    e82c:	d000      	beq.n	e830 <_ZN9CDC_Class4readEv+0x2c>
    e82e:	e7f6      	b.n	e81e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e830:	7bfb      	ldrb	r3, [r7, #15]
}
    e832:	4618      	mov	r0, r3
    e834:	3710      	adds	r7, #16
    e836:	46bd      	mov	sp, r7
    e838:	bd80      	pop	{r7, pc}
    e83a:	bf00      	nop
    e83c:	0000c26d 	.word	0x0000c26d

0000e840 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e840:	b580      	push	{r7, lr}
    e842:	b082      	sub	sp, #8
    e844:	af00      	add	r7, sp, #0
    e846:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e848:	687b      	ldr	r3, [r7, #4]
    e84a:	331c      	adds	r3, #28
    e84c:	2140      	movs	r1, #64	; 0x40
    e84e:	4618      	mov	r0, r3
    e850:	4b02      	ldr	r3, [pc, #8]	; (e85c <_ZN9CDC_Class5flushEv+0x1c>)
    e852:	4798      	blx	r3
}
    e854:	bf00      	nop
    e856:	3708      	adds	r7, #8
    e858:	46bd      	mov	sp, r7
    e85a:	bd80      	pop	{r7, pc}
    e85c:	0000c2b1 	.word	0x0000c2b1

0000e860 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e860:	b580      	push	{r7, lr}
    e862:	b082      	sub	sp, #8
    e864:	af00      	add	r7, sp, #0
    e866:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e868:	4b02      	ldr	r3, [pc, #8]	; (e874 <_ZN9CDC_Class5clearEv+0x14>)
    e86a:	4798      	blx	r3
}
    e86c:	bf00      	nop
    e86e:	3708      	adds	r7, #8
    e870:	46bd      	mov	sp, r7
    e872:	bd80      	pop	{r7, pc}
    e874:	0000c2f5 	.word	0x0000c2f5

0000e878 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e878:	b580      	push	{r7, lr}
    e87a:	b082      	sub	sp, #8
    e87c:	af00      	add	r7, sp, #0
    e87e:	6078      	str	r0, [r7, #4]
    e880:	460b      	mov	r3, r1
    e882:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e884:	687b      	ldr	r3, [r7, #4]
    e886:	7c1b      	ldrb	r3, [r3, #16]
    e888:	b2db      	uxtb	r3, r3
    e88a:	2b00      	cmp	r3, #0
    e88c:	d012      	beq.n	e8b4 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e88e:	687b      	ldr	r3, [r7, #4]
    e890:	7d1b      	ldrb	r3, [r3, #20]
    e892:	b2db      	uxtb	r3, r3
    e894:	f083 0301 	eor.w	r3, r3, #1
    e898:	b2db      	uxtb	r3, r3
    e89a:	2b00      	cmp	r3, #0
    e89c:	d000      	beq.n	e8a0 <_ZN9CDC_Class5writeEh+0x28>
    e89e:	e7f6      	b.n	e88e <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e8a0:	687b      	ldr	r3, [r7, #4]
    e8a2:	681b      	ldr	r3, [r3, #0]
    e8a4:	3324      	adds	r3, #36	; 0x24
    e8a6:	681b      	ldr	r3, [r3, #0]
    e8a8:	1cf9      	adds	r1, r7, #3
    e8aa:	2201      	movs	r2, #1
    e8ac:	6878      	ldr	r0, [r7, #4]
    e8ae:	4798      	blx	r3
    e8b0:	4603      	mov	r3, r0
    e8b2:	e000      	b.n	e8b6 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e8b4:	2300      	movs	r3, #0
	}
		
}
    e8b6:	4618      	mov	r0, r3
    e8b8:	3708      	adds	r7, #8
    e8ba:	46bd      	mov	sp, r7
    e8bc:	bd80      	pop	{r7, pc}
	...

0000e8c0 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e8c0:	b580      	push	{r7, lr}
    e8c2:	b086      	sub	sp, #24
    e8c4:	af00      	add	r7, sp, #0
    e8c6:	60f8      	str	r0, [r7, #12]
    e8c8:	60b9      	str	r1, [r7, #8]
    e8ca:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e8cc:	68fb      	ldr	r3, [r7, #12]
    e8ce:	7c1b      	ldrb	r3, [r3, #16]
    e8d0:	b2db      	uxtb	r3, r3
    e8d2:	2b00      	cmp	r3, #0
    e8d4:	d02f      	beq.n	e936 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e8d6:	687a      	ldr	r2, [r7, #4]
    e8d8:	4613      	mov	r3, r2
    e8da:	009b      	lsls	r3, r3, #2
    e8dc:	4413      	add	r3, r2
    e8de:	005b      	lsls	r3, r3, #1
    e8e0:	461a      	mov	r2, r3
    e8e2:	4917      	ldr	r1, [pc, #92]	; (e940 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e8e4:	4817      	ldr	r0, [pc, #92]	; (e944 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e8e6:	4b18      	ldr	r3, [pc, #96]	; (e948 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e8e8:	4798      	blx	r3
		txReady=false;
    e8ea:	68fb      	ldr	r3, [r7, #12]
    e8ec:	2200      	movs	r2, #0
    e8ee:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e8f0:	687b      	ldr	r3, [r7, #4]
    e8f2:	4619      	mov	r1, r3
    e8f4:	68b8      	ldr	r0, [r7, #8]
    e8f6:	4b15      	ldr	r3, [pc, #84]	; (e94c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e8f8:	4798      	blx	r3
    e8fa:	4603      	mov	r3, r0
    e8fc:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e8fe:	68fb      	ldr	r3, [r7, #12]
    e900:	7d1b      	ldrb	r3, [r3, #20]
    e902:	b2db      	uxtb	r3, r3
    e904:	f083 0301 	eor.w	r3, r3, #1
    e908:	b2db      	uxtb	r3, r3
    e90a:	2b00      	cmp	r3, #0
    e90c:	d006      	beq.n	e91c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e90e:	68fb      	ldr	r3, [r7, #12]
    e910:	7c1b      	ldrb	r3, [r3, #16]
    e912:	b2db      	uxtb	r3, r3
    e914:	2b00      	cmp	r3, #0
    e916:	d001      	beq.n	e91c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e918:	2301      	movs	r3, #1
    e91a:	e000      	b.n	e91e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e91c:	2300      	movs	r3, #0
    e91e:	2b00      	cmp	r3, #0
    e920:	d000      	beq.n	e924 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e922:	e7ec      	b.n	e8fe <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e924:	4807      	ldr	r0, [pc, #28]	; (e944 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e926:	4b0a      	ldr	r3, [pc, #40]	; (e950 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e928:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e92a:	4905      	ldr	r1, [pc, #20]	; (e940 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e92c:	4805      	ldr	r0, [pc, #20]	; (e944 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e92e:	4b09      	ldr	r3, [pc, #36]	; (e954 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e930:	4798      	blx	r3
		return r;
    e932:	697b      	ldr	r3, [r7, #20]
    e934:	e000      	b.n	e938 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e936:	2300      	movs	r3, #0
	}
	

}
    e938:	4618      	mov	r0, r3
    e93a:	3718      	adds	r7, #24
    e93c:	46bd      	mov	sp, r7
    e93e:	bd80      	pop	{r7, pc}
    e940:	0000e555 	.word	0x0000e555
    e944:	200016bc 	.word	0x200016bc
    e948:	0000e22d 	.word	0x0000e22d
    e94c:	0000c2b1 	.word	0x0000c2b1
    e950:	0000e159 	.word	0x0000e159
    e954:	0000e1d5 	.word	0x0000e1d5

0000e958 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e958:	b580      	push	{r7, lr}
    e95a:	b086      	sub	sp, #24
    e95c:	af00      	add	r7, sp, #0
    e95e:	60f8      	str	r0, [r7, #12]
    e960:	60b9      	str	r1, [r7, #8]
    e962:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e964:	68fb      	ldr	r3, [r7, #12]
    e966:	2200      	movs	r2, #0
    e968:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e96a:	68fb      	ldr	r3, [r7, #12]
    e96c:	7c1b      	ldrb	r3, [r3, #16]
    e96e:	b2db      	uxtb	r3, r3
    e970:	2b00      	cmp	r3, #0
    e972:	d02a      	beq.n	e9ca <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e974:	687a      	ldr	r2, [r7, #4]
    e976:	4613      	mov	r3, r2
    e978:	009b      	lsls	r3, r3, #2
    e97a:	4413      	add	r3, r2
    e97c:	005b      	lsls	r3, r3, #1
    e97e:	461a      	mov	r2, r3
    e980:	4915      	ldr	r1, [pc, #84]	; (e9d8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e982:	4816      	ldr	r0, [pc, #88]	; (e9dc <_ZN9CDC_Class5writeEPKhj+0x84>)
    e984:	4b16      	ldr	r3, [pc, #88]	; (e9e0 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e986:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e988:	6879      	ldr	r1, [r7, #4]
    e98a:	68b8      	ldr	r0, [r7, #8]
    e98c:	4b15      	ldr	r3, [pc, #84]	; (e9e4 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e98e:	4798      	blx	r3
    e990:	4603      	mov	r3, r0
    e992:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e994:	68fb      	ldr	r3, [r7, #12]
    e996:	7d1b      	ldrb	r3, [r3, #20]
    e998:	b2db      	uxtb	r3, r3
    e99a:	f083 0301 	eor.w	r3, r3, #1
    e99e:	b2db      	uxtb	r3, r3
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d006      	beq.n	e9b2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e9a4:	68fb      	ldr	r3, [r7, #12]
    e9a6:	7c1b      	ldrb	r3, [r3, #16]
    e9a8:	b2db      	uxtb	r3, r3
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	d001      	beq.n	e9b2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e9ae:	2301      	movs	r3, #1
    e9b0:	e000      	b.n	e9b4 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e9b2:	2300      	movs	r3, #0
    e9b4:	2b00      	cmp	r3, #0
    e9b6:	d000      	beq.n	e9ba <_ZN9CDC_Class5writeEPKhj+0x62>
    e9b8:	e7ec      	b.n	e994 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e9ba:	4808      	ldr	r0, [pc, #32]	; (e9dc <_ZN9CDC_Class5writeEPKhj+0x84>)
    e9bc:	4b0a      	ldr	r3, [pc, #40]	; (e9e8 <_ZN9CDC_Class5writeEPKhj+0x90>)
    e9be:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e9c0:	4905      	ldr	r1, [pc, #20]	; (e9d8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e9c2:	4806      	ldr	r0, [pc, #24]	; (e9dc <_ZN9CDC_Class5writeEPKhj+0x84>)
    e9c4:	4b09      	ldr	r3, [pc, #36]	; (e9ec <_ZN9CDC_Class5writeEPKhj+0x94>)
    e9c6:	4798      	blx	r3
    e9c8:	e001      	b.n	e9ce <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e9ca:	2300      	movs	r3, #0
    e9cc:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e9ce:	697b      	ldr	r3, [r7, #20]
}
    e9d0:	4618      	mov	r0, r3
    e9d2:	3718      	adds	r7, #24
    e9d4:	46bd      	mov	sp, r7
    e9d6:	bd80      	pop	{r7, pc}
    e9d8:	0000e555 	.word	0x0000e555
    e9dc:	200016bc 	.word	0x200016bc
    e9e0:	0000e22d 	.word	0x0000e22d
    e9e4:	0000c2b1 	.word	0x0000c2b1
    e9e8:	0000e159 	.word	0x0000e159
    e9ec:	0000e1d5 	.word	0x0000e1d5

0000e9f0 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e9f0:	b480      	push	{r7}
    e9f2:	b083      	sub	sp, #12
    e9f4:	af00      	add	r7, sp, #0
    e9f6:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e9f8:	687b      	ldr	r3, [r7, #4]
    e9fa:	7d5b      	ldrb	r3, [r3, #21]
    e9fc:	b2db      	uxtb	r3, r3
    e9fe:	2b00      	cmp	r3, #0
    ea00:	d006      	beq.n	ea10 <_ZN9CDC_Class9availableEv+0x20>
    ea02:	687b      	ldr	r3, [r7, #4]
    ea04:	7d1b      	ldrb	r3, [r3, #20]
    ea06:	b2db      	uxtb	r3, r3
    ea08:	2b00      	cmp	r3, #0
    ea0a:	d001      	beq.n	ea10 <_ZN9CDC_Class9availableEv+0x20>
    ea0c:	2301      	movs	r3, #1
    ea0e:	e000      	b.n	ea12 <_ZN9CDC_Class9availableEv+0x22>
    ea10:	2300      	movs	r3, #0
    ea12:	2b00      	cmp	r3, #0
    ea14:	d001      	beq.n	ea1a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    ea16:	2301      	movs	r3, #1
    ea18:	e000      	b.n	ea1c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    ea1a:	2300      	movs	r3, #0
	}
	
}
    ea1c:	4618      	mov	r0, r3
    ea1e:	370c      	adds	r7, #12
    ea20:	46bd      	mov	sp, r7
    ea22:	bc80      	pop	{r7}
    ea24:	4770      	bx	lr
	...

0000ea28 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    ea28:	b580      	push	{r7, lr}
    ea2a:	b082      	sub	sp, #8
    ea2c:	af00      	add	r7, sp, #0
    ea2e:	6078      	str	r0, [r7, #4]
    ea30:	6039      	str	r1, [r7, #0]
    ea32:	687b      	ldr	r3, [r7, #4]
    ea34:	2b01      	cmp	r3, #1
    ea36:	d154      	bne.n	eae2 <_Z41__static_initialization_and_destruction_0ii+0xba>
    ea38:	683b      	ldr	r3, [r7, #0]
    ea3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ea3e:	4293      	cmp	r3, r2
    ea40:	d14f      	bne.n	eae2 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ea42:	492a      	ldr	r1, [pc, #168]	; (eaec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea44:	482a      	ldr	r0, [pc, #168]	; (eaf0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea46:	4b2b      	ldr	r3, [pc, #172]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ea48:	4798      	blx	r3
    ea4a:	4a2b      	ldr	r2, [pc, #172]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea4c:	492b      	ldr	r1, [pc, #172]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ea4e:	4828      	ldr	r0, [pc, #160]	; (eaf0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea50:	4b2b      	ldr	r3, [pc, #172]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea52:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ea54:	492b      	ldr	r1, [pc, #172]	; (eb04 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ea56:	482c      	ldr	r0, [pc, #176]	; (eb08 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ea58:	4b26      	ldr	r3, [pc, #152]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ea5a:	4798      	blx	r3
    ea5c:	4a26      	ldr	r2, [pc, #152]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea5e:	4927      	ldr	r1, [pc, #156]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ea60:	4829      	ldr	r0, [pc, #164]	; (eb08 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ea62:	4b27      	ldr	r3, [pc, #156]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea64:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ea66:	4929      	ldr	r1, [pc, #164]	; (eb0c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ea68:	4829      	ldr	r0, [pc, #164]	; (eb10 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ea6a:	4b22      	ldr	r3, [pc, #136]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ea6c:	4798      	blx	r3
    ea6e:	4a22      	ldr	r2, [pc, #136]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea70:	4922      	ldr	r1, [pc, #136]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ea72:	4827      	ldr	r0, [pc, #156]	; (eb10 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ea74:	4b22      	ldr	r3, [pc, #136]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea76:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ea78:	4926      	ldr	r1, [pc, #152]	; (eb14 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ea7a:	4827      	ldr	r0, [pc, #156]	; (eb18 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ea7c:	4b1d      	ldr	r3, [pc, #116]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ea7e:	4798      	blx	r3
    ea80:	4a1d      	ldr	r2, [pc, #116]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea82:	491e      	ldr	r1, [pc, #120]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ea84:	4824      	ldr	r0, [pc, #144]	; (eb18 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ea86:	4b1e      	ldr	r3, [pc, #120]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea88:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ea8a:	4924      	ldr	r1, [pc, #144]	; (eb1c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    ea8c:	4824      	ldr	r0, [pc, #144]	; (eb20 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ea8e:	4b19      	ldr	r3, [pc, #100]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ea90:	4798      	blx	r3
    ea92:	4a19      	ldr	r2, [pc, #100]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea94:	4919      	ldr	r1, [pc, #100]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ea96:	4822      	ldr	r0, [pc, #136]	; (eb20 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ea98:	4b19      	ldr	r3, [pc, #100]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea9a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ea9c:	4921      	ldr	r1, [pc, #132]	; (eb24 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    ea9e:	4822      	ldr	r0, [pc, #136]	; (eb28 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    eaa0:	4b14      	ldr	r3, [pc, #80]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    eaa2:	4798      	blx	r3
    eaa4:	4a14      	ldr	r2, [pc, #80]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eaa6:	4915      	ldr	r1, [pc, #84]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    eaa8:	481f      	ldr	r0, [pc, #124]	; (eb28 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    eaaa:	4b15      	ldr	r3, [pc, #84]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    eaac:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    eaae:	491f      	ldr	r1, [pc, #124]	; (eb2c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    eab0:	481f      	ldr	r0, [pc, #124]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    eab2:	4b10      	ldr	r3, [pc, #64]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    eab4:	4798      	blx	r3
    eab6:	4a10      	ldr	r2, [pc, #64]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eab8:	4910      	ldr	r1, [pc, #64]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    eaba:	481d      	ldr	r0, [pc, #116]	; (eb30 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    eabc:	4b10      	ldr	r3, [pc, #64]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    eabe:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    eac0:	491c      	ldr	r1, [pc, #112]	; (eb34 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    eac2:	481d      	ldr	r0, [pc, #116]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    eac4:	4b0b      	ldr	r3, [pc, #44]	; (eaf4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    eac6:	4798      	blx	r3
    eac8:	4a0b      	ldr	r2, [pc, #44]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eaca:	490c      	ldr	r1, [pc, #48]	; (eafc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    eacc:	481a      	ldr	r0, [pc, #104]	; (eb38 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    eace:	4b0c      	ldr	r3, [pc, #48]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ead0:	4798      	blx	r3
    ead2:	481a      	ldr	r0, [pc, #104]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    ead4:	4b1a      	ldr	r3, [pc, #104]	; (eb40 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    ead6:	4798      	blx	r3
    ead8:	4a07      	ldr	r2, [pc, #28]	; (eaf8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eada:	491a      	ldr	r1, [pc, #104]	; (eb44 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    eadc:	4817      	ldr	r0, [pc, #92]	; (eb3c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    eade:	4b08      	ldr	r3, [pc, #32]	; (eb00 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    eae0:	4798      	blx	r3
    eae2:	bf00      	nop
    eae4:	3708      	adds	r7, #8
    eae6:	46bd      	mov	sp, r7
    eae8:	bd80      	pop	{r7, pc}
    eaea:	bf00      	nop
    eaec:	2000a8e0 	.word	0x2000a8e0
    eaf0:	2000161c 	.word	0x2000161c
    eaf4:	0000dff9 	.word	0x0000dff9
    eaf8:	20000000 	.word	0x20000000
    eafc:	0000e031 	.word	0x0000e031
    eb00:	0000fd55 	.word	0x0000fd55
    eb04:	2000a974 	.word	0x2000a974
    eb08:	2000163c 	.word	0x2000163c
    eb0c:	2000aa98 	.word	0x2000aa98
    eb10:	2000165c 	.word	0x2000165c
    eb14:	2000a994 	.word	0x2000a994
    eb18:	2000167c 	.word	0x2000167c
    eb1c:	2000aa58 	.word	0x2000aa58
    eb20:	2000169c 	.word	0x2000169c
    eb24:	2000aa78 	.word	0x2000aa78
    eb28:	200016bc 	.word	0x200016bc
    eb2c:	2000a950 	.word	0x2000a950
    eb30:	200016dc 	.word	0x200016dc
    eb34:	2000a9f0 	.word	0x2000a9f0
    eb38:	200016fc 	.word	0x200016fc
    eb3c:	20001720 	.word	0x20001720
    eb40:	0000e645 	.word	0x0000e645
    eb44:	0000e68d 	.word	0x0000e68d

0000eb48 <_GLOBAL__sub_I_ptrCDCClass>:
    eb48:	b580      	push	{r7, lr}
    eb4a:	af00      	add	r7, sp, #0
    eb4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eb50:	2001      	movs	r0, #1
    eb52:	4b01      	ldr	r3, [pc, #4]	; (eb58 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    eb54:	4798      	blx	r3
    eb56:	bd80      	pop	{r7, pc}
    eb58:	0000ea29 	.word	0x0000ea29

0000eb5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    eb5c:	b580      	push	{r7, lr}
    eb5e:	b086      	sub	sp, #24
    eb60:	af00      	add	r7, sp, #0
    eb62:	60f8      	str	r0, [r7, #12]
    eb64:	60b9      	str	r1, [r7, #8]
    eb66:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    eb68:	2300      	movs	r3, #0
    eb6a:	617b      	str	r3, [r7, #20]
  while (size--) {
    eb6c:	687b      	ldr	r3, [r7, #4]
    eb6e:	1e5a      	subs	r2, r3, #1
    eb70:	607a      	str	r2, [r7, #4]
    eb72:	2b00      	cmp	r3, #0
    eb74:	bf14      	ite	ne
    eb76:	2301      	movne	r3, #1
    eb78:	2300      	moveq	r3, #0
    eb7a:	b2db      	uxtb	r3, r3
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d016      	beq.n	ebae <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    eb80:	68fb      	ldr	r3, [r7, #12]
    eb82:	681b      	ldr	r3, [r3, #0]
    eb84:	681a      	ldr	r2, [r3, #0]
    eb86:	68bb      	ldr	r3, [r7, #8]
    eb88:	1c59      	adds	r1, r3, #1
    eb8a:	60b9      	str	r1, [r7, #8]
    eb8c:	781b      	ldrb	r3, [r3, #0]
    eb8e:	4619      	mov	r1, r3
    eb90:	68f8      	ldr	r0, [r7, #12]
    eb92:	4790      	blx	r2
    eb94:	4603      	mov	r3, r0
    eb96:	2b00      	cmp	r3, #0
    eb98:	bf14      	ite	ne
    eb9a:	2301      	movne	r3, #1
    eb9c:	2300      	moveq	r3, #0
    eb9e:	b2db      	uxtb	r3, r3
    eba0:	2b00      	cmp	r3, #0
    eba2:	d003      	beq.n	ebac <_ZN5Print5writeEPKhj+0x50>
    eba4:	697b      	ldr	r3, [r7, #20]
    eba6:	3301      	adds	r3, #1
    eba8:	617b      	str	r3, [r7, #20]
  while (size--) {
    ebaa:	e7df      	b.n	eb6c <_ZN5Print5writeEPKhj+0x10>
    else break;
    ebac:	bf00      	nop
  }
  return n;
    ebae:	697b      	ldr	r3, [r7, #20]
}
    ebb0:	4618      	mov	r0, r3
    ebb2:	3718      	adds	r7, #24
    ebb4:	46bd      	mov	sp, r7
    ebb6:	bd80      	pop	{r7, pc}

0000ebb8 <hri_port_read_DIR_reg>:
{
    ebb8:	b480      	push	{r7}
    ebba:	b083      	sub	sp, #12
    ebbc:	af00      	add	r7, sp, #0
    ebbe:	6078      	str	r0, [r7, #4]
    ebc0:	460b      	mov	r3, r1
    ebc2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ebc4:	78fb      	ldrb	r3, [r7, #3]
    ebc6:	687a      	ldr	r2, [r7, #4]
    ebc8:	01db      	lsls	r3, r3, #7
    ebca:	4413      	add	r3, r2
    ebcc:	681b      	ldr	r3, [r3, #0]
}
    ebce:	4618      	mov	r0, r3
    ebd0:	370c      	adds	r7, #12
    ebd2:	46bd      	mov	sp, r7
    ebd4:	bc80      	pop	{r7}
    ebd6:	4770      	bx	lr

0000ebd8 <hri_port_read_OUT_reg>:
{
    ebd8:	b480      	push	{r7}
    ebda:	b083      	sub	sp, #12
    ebdc:	af00      	add	r7, sp, #0
    ebde:	6078      	str	r0, [r7, #4]
    ebe0:	460b      	mov	r3, r1
    ebe2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ebe4:	78fb      	ldrb	r3, [r7, #3]
    ebe6:	687a      	ldr	r2, [r7, #4]
    ebe8:	01db      	lsls	r3, r3, #7
    ebea:	4413      	add	r3, r2
    ebec:	3310      	adds	r3, #16
    ebee:	681b      	ldr	r3, [r3, #0]
}
    ebf0:	4618      	mov	r0, r3
    ebf2:	370c      	adds	r7, #12
    ebf4:	46bd      	mov	sp, r7
    ebf6:	bc80      	pop	{r7}
    ebf8:	4770      	bx	lr

0000ebfa <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    ebfa:	b480      	push	{r7}
    ebfc:	b083      	sub	sp, #12
    ebfe:	af00      	add	r7, sp, #0
    ec00:	6078      	str	r0, [r7, #4]
    ec02:	460b      	mov	r3, r1
    ec04:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ec06:	78fb      	ldrb	r3, [r7, #3]
    ec08:	687a      	ldr	r2, [r7, #4]
    ec0a:	01db      	lsls	r3, r3, #7
    ec0c:	4413      	add	r3, r2
    ec0e:	3320      	adds	r3, #32
    ec10:	681b      	ldr	r3, [r3, #0]
}
    ec12:	4618      	mov	r0, r3
    ec14:	370c      	adds	r7, #12
    ec16:	46bd      	mov	sp, r7
    ec18:	bc80      	pop	{r7}
    ec1a:	4770      	bx	lr

0000ec1c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    ec1c:	b580      	push	{r7, lr}
    ec1e:	b086      	sub	sp, #24
    ec20:	af00      	add	r7, sp, #0
    ec22:	4603      	mov	r3, r0
    ec24:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    ec26:	f107 030c 	add.w	r3, r7, #12
    ec2a:	4618      	mov	r0, r3
    ec2c:	4b13      	ldr	r3, [pc, #76]	; (ec7c <_gpio_get_level+0x60>)
    ec2e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    ec30:	79fb      	ldrb	r3, [r7, #7]
    ec32:	4619      	mov	r1, r3
    ec34:	4812      	ldr	r0, [pc, #72]	; (ec80 <_gpio_get_level+0x64>)
    ec36:	4b13      	ldr	r3, [pc, #76]	; (ec84 <_gpio_get_level+0x68>)
    ec38:	4798      	blx	r3
    ec3a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    ec3c:	79fb      	ldrb	r3, [r7, #7]
    ec3e:	4619      	mov	r1, r3
    ec40:	480f      	ldr	r0, [pc, #60]	; (ec80 <_gpio_get_level+0x64>)
    ec42:	4b11      	ldr	r3, [pc, #68]	; (ec88 <_gpio_get_level+0x6c>)
    ec44:	4798      	blx	r3
    ec46:	4602      	mov	r2, r0
    ec48:	697b      	ldr	r3, [r7, #20]
    ec4a:	43db      	mvns	r3, r3
    ec4c:	4013      	ands	r3, r2
    ec4e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    ec50:	79fb      	ldrb	r3, [r7, #7]
    ec52:	4619      	mov	r1, r3
    ec54:	480a      	ldr	r0, [pc, #40]	; (ec80 <_gpio_get_level+0x64>)
    ec56:	4b0d      	ldr	r3, [pc, #52]	; (ec8c <_gpio_get_level+0x70>)
    ec58:	4798      	blx	r3
    ec5a:	4602      	mov	r2, r0
    ec5c:	697b      	ldr	r3, [r7, #20]
    ec5e:	4013      	ands	r3, r2
    ec60:	693a      	ldr	r2, [r7, #16]
    ec62:	4313      	orrs	r3, r2
    ec64:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    ec66:	f107 030c 	add.w	r3, r7, #12
    ec6a:	4618      	mov	r0, r3
    ec6c:	4b08      	ldr	r3, [pc, #32]	; (ec90 <_gpio_get_level+0x74>)
    ec6e:	4798      	blx	r3

	return tmp;
    ec70:	693b      	ldr	r3, [r7, #16]
}
    ec72:	4618      	mov	r0, r3
    ec74:	3718      	adds	r7, #24
    ec76:	46bd      	mov	sp, r7
    ec78:	bd80      	pop	{r7, pc}
    ec7a:	bf00      	nop
    ec7c:	0000b0c9 	.word	0x0000b0c9
    ec80:	41008000 	.word	0x41008000
    ec84:	0000ebb9 	.word	0x0000ebb9
    ec88:	0000ebfb 	.word	0x0000ebfb
    ec8c:	0000ebd9 	.word	0x0000ebd9
    ec90:	0000b0ef 	.word	0x0000b0ef

0000ec94 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    ec94:	b580      	push	{r7, lr}
    ec96:	b082      	sub	sp, #8
    ec98:	af00      	add	r7, sp, #0
    ec9a:	4603      	mov	r3, r0
    ec9c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    ec9e:	79fb      	ldrb	r3, [r7, #7]
    eca0:	115b      	asrs	r3, r3, #5
    eca2:	b2db      	uxtb	r3, r3
    eca4:	4618      	mov	r0, r3
    eca6:	4b09      	ldr	r3, [pc, #36]	; (eccc <gpio_get_pin_level+0x38>)
    eca8:	4798      	blx	r3
    ecaa:	4601      	mov	r1, r0
    ecac:	79fb      	ldrb	r3, [r7, #7]
    ecae:	f003 031f 	and.w	r3, r3, #31
    ecb2:	2201      	movs	r2, #1
    ecb4:	fa02 f303 	lsl.w	r3, r2, r3
    ecb8:	400b      	ands	r3, r1
    ecba:	2b00      	cmp	r3, #0
    ecbc:	bf14      	ite	ne
    ecbe:	2301      	movne	r3, #1
    ecc0:	2300      	moveq	r3, #0
    ecc2:	b2db      	uxtb	r3, r3
}
    ecc4:	4618      	mov	r0, r3
    ecc6:	3708      	adds	r7, #8
    ecc8:	46bd      	mov	sp, r7
    ecca:	bd80      	pop	{r7, pc}
    eccc:	0000ec1d 	.word	0x0000ec1d

0000ecd0 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    ecd0:	b480      	push	{r7}
    ecd2:	b083      	sub	sp, #12
    ecd4:	af00      	add	r7, sp, #0
    ecd6:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    ecd8:	4b06      	ldr	r3, [pc, #24]	; (ecf4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ecda:	681b      	ldr	r3, [r3, #0]
    ecdc:	2201      	movs	r2, #1
    ecde:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    ece0:	4b04      	ldr	r3, [pc, #16]	; (ecf4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ece2:	681b      	ldr	r3, [r3, #0]
    ece4:	2200      	movs	r2, #0
    ece6:	705a      	strb	r2, [r3, #1]
}
    ece8:	bf00      	nop
    ecea:	370c      	adds	r7, #12
    ecec:	46bd      	mov	sp, r7
    ecee:	bc80      	pop	{r7}
    ecf0:	4770      	bx	lr
    ecf2:	bf00      	nop
    ecf4:	20001880 	.word	0x20001880

0000ecf8 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    ecf8:	b580      	push	{r7, lr}
    ecfa:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    ecfc:	2040      	movs	r0, #64	; 0x40
    ecfe:	4b0a      	ldr	r3, [pc, #40]	; (ed28 <_ZL10USBPluggedv+0x30>)
    ed00:	4798      	blx	r3
    ed02:	4603      	mov	r3, r0
    ed04:	2b00      	cmp	r3, #0
    ed06:	d004      	beq.n	ed12 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    ed08:	4b08      	ldr	r3, [pc, #32]	; (ed2c <_ZL10USBPluggedv+0x34>)
    ed0a:	681b      	ldr	r3, [r3, #0]
    ed0c:	2201      	movs	r2, #1
    ed0e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    ed10:	e007      	b.n	ed22 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    ed12:	4b06      	ldr	r3, [pc, #24]	; (ed2c <_ZL10USBPluggedv+0x34>)
    ed14:	681b      	ldr	r3, [r3, #0]
    ed16:	2200      	movs	r2, #0
    ed18:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    ed1a:	4b04      	ldr	r3, [pc, #16]	; (ed2c <_ZL10USBPluggedv+0x34>)
    ed1c:	681b      	ldr	r3, [r3, #0]
    ed1e:	2200      	movs	r2, #0
    ed20:	701a      	strb	r2, [r3, #0]
}
    ed22:	bf00      	nop
    ed24:	bd80      	pop	{r7, pc}
    ed26:	bf00      	nop
    ed28:	0000ec95 	.word	0x0000ec95
    ed2c:	20001880 	.word	0x20001880

0000ed30 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    ed30:	b480      	push	{r7}
    ed32:	b083      	sub	sp, #12
    ed34:	af00      	add	r7, sp, #0
    ed36:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    ed38:	4a04      	ldr	r2, [pc, #16]	; (ed4c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    ed3a:	687b      	ldr	r3, [r7, #4]
    ed3c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    ed3e:	687b      	ldr	r3, [r7, #4]
    ed40:	4618      	mov	r0, r3
    ed42:	370c      	adds	r7, #12
    ed44:	46bd      	mov	sp, r7
    ed46:	bc80      	pop	{r7}
    ed48:	4770      	bx	lr
    ed4a:	bf00      	nop
    ed4c:	20001880 	.word	0x20001880

0000ed50 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    ed50:	b480      	push	{r7}
    ed52:	b083      	sub	sp, #12
    ed54:	af00      	add	r7, sp, #0
    ed56:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    ed58:	687b      	ldr	r3, [r7, #4]
    ed5a:	4618      	mov	r0, r3
    ed5c:	370c      	adds	r7, #12
    ed5e:	46bd      	mov	sp, r7
    ed60:	bc80      	pop	{r7}
    ed62:	4770      	bx	lr

0000ed64 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    ed64:	b580      	push	{r7, lr}
    ed66:	b082      	sub	sp, #8
    ed68:	af00      	add	r7, sp, #0
    ed6a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    ed6c:	491e      	ldr	r1, [pc, #120]	; (ede8 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    ed6e:	2040      	movs	r0, #64	; 0x40
    ed70:	4b1e      	ldr	r3, [pc, #120]	; (edec <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    ed72:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    ed74:	481e      	ldr	r0, [pc, #120]	; (edf0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ed76:	4b1f      	ldr	r3, [pc, #124]	; (edf4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    ed78:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    ed7a:	2040      	movs	r0, #64	; 0x40
    ed7c:	4b1e      	ldr	r3, [pc, #120]	; (edf8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    ed7e:	4798      	blx	r3
    ed80:	4603      	mov	r3, r0
    ed82:	461a      	mov	r2, r3
    ed84:	687b      	ldr	r3, [r7, #4]
    ed86:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    ed88:	687b      	ldr	r3, [r7, #4]
    ed8a:	78db      	ldrb	r3, [r3, #3]
    ed8c:	2b00      	cmp	r3, #0
    ed8e:	d021      	beq.n	edd4 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    ed90:	687b      	ldr	r3, [r7, #4]
    ed92:	2200      	movs	r2, #0
    ed94:	709a      	strb	r2, [r3, #2]
			plugged=true;
    ed96:	687b      	ldr	r3, [r7, #4]
    ed98:	2201      	movs	r2, #1
    ed9a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    ed9c:	f44f 7216 	mov.w	r2, #600	; 0x258
    eda0:	4916      	ldr	r1, [pc, #88]	; (edfc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    eda2:	4813      	ldr	r0, [pc, #76]	; (edf0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    eda4:	4b16      	ldr	r3, [pc, #88]	; (ee00 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    eda6:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    eda8:	4816      	ldr	r0, [pc, #88]	; (ee04 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    edaa:	4b17      	ldr	r3, [pc, #92]	; (ee08 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    edac:	4798      	blx	r3
    edae:	4603      	mov	r3, r0
    edb0:	f083 0301 	eor.w	r3, r3, #1
    edb4:	b2db      	uxtb	r3, r3
    edb6:	2b00      	cmp	r3, #0
    edb8:	d008      	beq.n	edcc <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    edba:	687b      	ldr	r3, [r7, #4]
    edbc:	789b      	ldrb	r3, [r3, #2]
    edbe:	b2db      	uxtb	r3, r3
    edc0:	2b00      	cmp	r3, #0
    edc2:	d0f1      	beq.n	eda8 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    edc4:	687b      	ldr	r3, [r7, #4]
    edc6:	2200      	movs	r2, #0
    edc8:	701a      	strb	r2, [r3, #0]
					return;
    edca:	e009      	b.n	ede0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    edcc:	4808      	ldr	r0, [pc, #32]	; (edf0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    edce:	4b0f      	ldr	r3, [pc, #60]	; (ee0c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    edd0:	4798      	blx	r3
    edd2:	e005      	b.n	ede0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    edd4:	687b      	ldr	r3, [r7, #4]
    edd6:	2200      	movs	r2, #0
    edd8:	701a      	strb	r2, [r3, #0]
			plugged=false;
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	2200      	movs	r2, #0
    edde:	705a      	strb	r2, [r3, #1]
		}
		
}
    ede0:	3708      	adds	r7, #8
    ede2:	46bd      	mov	sp, r7
    ede4:	bd80      	pop	{r7, pc}
    ede6:	bf00      	nop
    ede8:	0000ecf9 	.word	0x0000ecf9
    edec:	000023b5 	.word	0x000023b5
    edf0:	20001820 	.word	0x20001820
    edf4:	0000e0e5 	.word	0x0000e0e5
    edf8:	0000ec95 	.word	0x0000ec95
    edfc:	0000ecd1 	.word	0x0000ecd1
    ee00:	0000e22d 	.word	0x0000e22d
    ee04:	20001720 	.word	0x20001720
    ee08:	0000e6fd 	.word	0x0000e6fd
    ee0c:	0000e159 	.word	0x0000e159

0000ee10 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    ee10:	b580      	push	{r7, lr}
    ee12:	b082      	sub	sp, #8
    ee14:	af00      	add	r7, sp, #0
    ee16:	6078      	str	r0, [r7, #4]
    ee18:	6039      	str	r1, [r7, #0]
    ee1a:	687b      	ldr	r3, [r7, #4]
    ee1c:	2b01      	cmp	r3, #1
    ee1e:	d14c      	bne.n	eeba <_Z41__static_initialization_and_destruction_0ii+0xaa>
    ee20:	683b      	ldr	r3, [r7, #0]
    ee22:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ee26:	4293      	cmp	r3, r2
    ee28:	d147      	bne.n	eeba <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ee2a:	4926      	ldr	r1, [pc, #152]	; (eec4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ee2c:	4826      	ldr	r0, [pc, #152]	; (eec8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ee2e:	4b27      	ldr	r3, [pc, #156]	; (eecc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ee30:	4798      	blx	r3
    ee32:	4a27      	ldr	r2, [pc, #156]	; (eed0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ee34:	4927      	ldr	r1, [pc, #156]	; (eed4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ee36:	4824      	ldr	r0, [pc, #144]	; (eec8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ee38:	4b27      	ldr	r3, [pc, #156]	; (eed8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ee3a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ee3c:	4927      	ldr	r1, [pc, #156]	; (eedc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ee3e:	4828      	ldr	r0, [pc, #160]	; (eee0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ee40:	4b22      	ldr	r3, [pc, #136]	; (eecc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ee42:	4798      	blx	r3
    ee44:	4a22      	ldr	r2, [pc, #136]	; (eed0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ee46:	4923      	ldr	r1, [pc, #140]	; (eed4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ee48:	4825      	ldr	r0, [pc, #148]	; (eee0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ee4a:	4b23      	ldr	r3, [pc, #140]	; (eed8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ee4c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ee4e:	4925      	ldr	r1, [pc, #148]	; (eee4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ee50:	4825      	ldr	r0, [pc, #148]	; (eee8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ee52:	4b1e      	ldr	r3, [pc, #120]	; (eecc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ee54:	4798      	blx	r3
    ee56:	4a1e      	ldr	r2, [pc, #120]	; (eed0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ee58:	491e      	ldr	r1, [pc, #120]	; (eed4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ee5a:	4823      	ldr	r0, [pc, #140]	; (eee8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ee5c:	4b1e      	ldr	r3, [pc, #120]	; (eed8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ee5e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ee60:	4922      	ldr	r1, [pc, #136]	; (eeec <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ee62:	4823      	ldr	r0, [pc, #140]	; (eef0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ee64:	4b19      	ldr	r3, [pc, #100]	; (eecc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ee66:	4798      	blx	r3
    ee68:	4a19      	ldr	r2, [pc, #100]	; (eed0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ee6a:	491a      	ldr	r1, [pc, #104]	; (eed4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ee6c:	4820      	ldr	r0, [pc, #128]	; (eef0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ee6e:	4b1a      	ldr	r3, [pc, #104]	; (eed8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ee70:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ee72:	4920      	ldr	r1, [pc, #128]	; (eef4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ee74:	4820      	ldr	r0, [pc, #128]	; (eef8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ee76:	4b15      	ldr	r3, [pc, #84]	; (eecc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ee78:	4798      	blx	r3
    ee7a:	4a15      	ldr	r2, [pc, #84]	; (eed0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ee7c:	4915      	ldr	r1, [pc, #84]	; (eed4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ee7e:	481e      	ldr	r0, [pc, #120]	; (eef8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ee80:	4b15      	ldr	r3, [pc, #84]	; (eed8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ee82:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ee84:	491d      	ldr	r1, [pc, #116]	; (eefc <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ee86:	481e      	ldr	r0, [pc, #120]	; (ef00 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ee88:	4b10      	ldr	r3, [pc, #64]	; (eecc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ee8a:	4798      	blx	r3
    ee8c:	4a10      	ldr	r2, [pc, #64]	; (eed0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ee8e:	4911      	ldr	r1, [pc, #68]	; (eed4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ee90:	481b      	ldr	r0, [pc, #108]	; (ef00 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ee92:	4b11      	ldr	r3, [pc, #68]	; (eed8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ee94:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ee96:	491b      	ldr	r1, [pc, #108]	; (ef04 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    ee98:	481b      	ldr	r0, [pc, #108]	; (ef08 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ee9a:	4b0c      	ldr	r3, [pc, #48]	; (eecc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ee9c:	4798      	blx	r3
    ee9e:	4a0c      	ldr	r2, [pc, #48]	; (eed0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eea0:	490c      	ldr	r1, [pc, #48]	; (eed4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eea2:	4819      	ldr	r0, [pc, #100]	; (ef08 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    eea4:	4b0c      	ldr	r3, [pc, #48]	; (eed8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eea6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    eea8:	4918      	ldr	r1, [pc, #96]	; (ef0c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    eeaa:	4819      	ldr	r0, [pc, #100]	; (ef10 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    eeac:	4b07      	ldr	r3, [pc, #28]	; (eecc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eeae:	4798      	blx	r3
    eeb0:	4a07      	ldr	r2, [pc, #28]	; (eed0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eeb2:	4908      	ldr	r1, [pc, #32]	; (eed4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eeb4:	4816      	ldr	r0, [pc, #88]	; (ef10 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    eeb6:	4b08      	ldr	r3, [pc, #32]	; (eed8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eeb8:	4798      	blx	r3
    eeba:	bf00      	nop
    eebc:	3708      	adds	r7, #8
    eebe:	46bd      	mov	sp, r7
    eec0:	bd80      	pop	{r7, pc}
    eec2:	bf00      	nop
    eec4:	2000a8e0 	.word	0x2000a8e0
    eec8:	20001780 	.word	0x20001780
    eecc:	0000dff9 	.word	0x0000dff9
    eed0:	20000000 	.word	0x20000000
    eed4:	0000e031 	.word	0x0000e031
    eed8:	0000fd55 	.word	0x0000fd55
    eedc:	2000a974 	.word	0x2000a974
    eee0:	200017a0 	.word	0x200017a0
    eee4:	2000aa98 	.word	0x2000aa98
    eee8:	200017c0 	.word	0x200017c0
    eeec:	2000a994 	.word	0x2000a994
    eef0:	200017e0 	.word	0x200017e0
    eef4:	2000aa58 	.word	0x2000aa58
    eef8:	20001800 	.word	0x20001800
    eefc:	2000aa78 	.word	0x2000aa78
    ef00:	20001820 	.word	0x20001820
    ef04:	2000a950 	.word	0x2000a950
    ef08:	20001840 	.word	0x20001840
    ef0c:	2000a9f0 	.word	0x2000a9f0
    ef10:	20001860 	.word	0x20001860

0000ef14 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    ef14:	b580      	push	{r7, lr}
    ef16:	af00      	add	r7, sp, #0
    ef18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ef1c:	2001      	movs	r0, #1
    ef1e:	4b01      	ldr	r3, [pc, #4]	; (ef24 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    ef20:	4798      	blx	r3
    ef22:	bd80      	pop	{r7, pc}
    ef24:	0000ee11 	.word	0x0000ee11

0000ef28 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ef28:	b480      	push	{r7}
    ef2a:	b083      	sub	sp, #12
    ef2c:	af00      	add	r7, sp, #0
    ef2e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ef30:	2300      	movs	r3, #0
	}
    ef32:	4618      	mov	r0, r3
    ef34:	370c      	adds	r7, #12
    ef36:	46bd      	mov	sp, r7
    ef38:	bc80      	pop	{r7}
    ef3a:	4770      	bx	lr

0000ef3c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ef3c:	b480      	push	{r7}
    ef3e:	af00      	add	r7, sp, #0
		}
    ef40:	bf00      	nop
    ef42:	46bd      	mov	sp, r7
    ef44:	bc80      	pop	{r7}
    ef46:	4770      	bx	lr

0000ef48 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
    ef48:	b510      	push	{r4, lr}
    ef4a:	4604      	mov	r4, r0
    ef4c:	4b06      	ldr	r3, [pc, #24]	; (ef68 <_ZN18Event_Logger_ClassD1Ev+0x20>)
    ef4e:	f840 3bb4 	str.w	r3, [r0], #180
    ef52:	4b06      	ldr	r3, [pc, #24]	; (ef6c <_ZN18Event_Logger_ClassD1Ev+0x24>)
    ef54:	4798      	blx	r3
    ef56:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    ef5a:	4b05      	ldr	r3, [pc, #20]	; (ef70 <_ZN18Event_Logger_ClassD1Ev+0x28>)
    ef5c:	4798      	blx	r3
    ef5e:	4620      	mov	r0, r4
    ef60:	4b04      	ldr	r3, [pc, #16]	; (ef74 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
    ef62:	4798      	blx	r3
{
} //~Event_Logger_Class
    ef64:	4620      	mov	r0, r4
    ef66:	bd10      	pop	{r4, pc}
    ef68:	00010c40 	.word	0x00010c40
    ef6c:	0000f351 	.word	0x0000f351
    ef70:	0000f2bf 	.word	0x0000f2bf
    ef74:	0000fa3d 	.word	0x0000fa3d

0000ef78 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
    ef78:	b510      	push	{r4, lr}
    ef7a:	4604      	mov	r4, r0
    ef7c:	4b11      	ldr	r3, [pc, #68]	; (efc4 <_ZN18Event_Logger_ClassC1Ev+0x4c>)
    ef7e:	4798      	blx	r3
    ef80:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    ef84:	4b10      	ldr	r3, [pc, #64]	; (efc8 <_ZN18Event_Logger_ClassC1Ev+0x50>)
    ef86:	4798      	blx	r3
    ef88:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    ef8c:	4b0f      	ldr	r3, [pc, #60]	; (efcc <_ZN18Event_Logger_ClassC1Ev+0x54>)
    ef8e:	4798      	blx	r3
    ef90:	4b0f      	ldr	r3, [pc, #60]	; (efd0 <_ZN18Event_Logger_ClassC1Ev+0x58>)
    ef92:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
    ef94:	230a      	movs	r3, #10
    ef96:	f884 36f7 	strb.w	r3, [r4, #1783]	; 0x6f7
	cal=&staticClock;
    ef9a:	4b0e      	ldr	r3, [pc, #56]	; (efd4 <_ZN18Event_Logger_ClassC1Ev+0x5c>)
    ef9c:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
	logger_text=(char*)text_buffer_local;
    efa0:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
    efa4:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
	logger_module=(char*)module_buffer_local;
    efa8:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    efac:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_number=(char*)number_buffer_local;
    efb0:	f503 7388 	add.w	r3, r3, #272	; 0x110
    efb4:	f8c4 3710 	str.w	r3, [r4, #1808]	; 0x710
	info_text=local_info_text;
    efb8:	4b07      	ldr	r3, [pc, #28]	; (efd8 <_ZN18Event_Logger_ClassC1Ev+0x60>)
    efba:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
} //Event_Logger_Class
    efbe:	4620      	mov	r0, r4
    efc0:	bd10      	pop	{r4, pc}
    efc2:	bf00      	nop
    efc4:	0000f9cd 	.word	0x0000f9cd
    efc8:	0000f2bd 	.word	0x0000f2bd
    efcc:	0000f301 	.word	0x0000f301
    efd0:	00010c40 	.word	0x00010c40
    efd4:	20001888 	.word	0x20001888
    efd8:	20000210 	.word	0x20000210

0000efdc <_ZN18Event_Logger_Class9SaveEventEPh>:
	nullDateTime.time.hour = 0x0;
	nullDateTime.time.min  = 0x0;
	nullDateTime.time.sec  = 0x0;
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
    efdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efe0:	4604      	mov	r4, r0
    efe2:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
    efe4:	f8d0 05f4 	ldr.w	r0, [r0, #1524]	; 0x5f4
    efe8:	f504 66c0 	add.w	r6, r4, #1536	; 0x600
    efec:	6803      	ldr	r3, [r0, #0]
    efee:	681b      	ldr	r3, [r3, #0]
    eff0:	4631      	mov	r1, r6
    eff2:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
    eff4:	f204 67bc 	addw	r7, r4, #1724	; 0x6bc
    eff8:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
    effc:	681a      	ldr	r2, [r3, #0]
    effe:	685b      	ldr	r3, [r3, #4]
    f000:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
    f004:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
    f006:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
    f00a:	4629      	mov	r1, r5
    f00c:	4640      	mov	r0, r8
    f00e:	4b32      	ldr	r3, [pc, #200]	; (f0d8 <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
    f010:	4798      	blx	r3
    f012:	f884 06f8 	strb.w	r0, [r4, #1784]	; 0x6f8
	if (semiColonPosition>0)
    f016:	b130      	cbz	r0, f026 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
    f018:	2807      	cmp	r0, #7
    f01a:	dc2d      	bgt.n	f078 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
    f01c:	4602      	mov	r2, r0
    f01e:	4629      	mov	r1, r5
    f020:	4638      	mov	r0, r7
    f022:	4b2e      	ldr	r3, [pc, #184]	; (f0dc <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
    f024:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
    f026:	4628      	mov	r0, r5
    f028:	4b2d      	ldr	r3, [pc, #180]	; (f0e0 <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
    f02a:	4798      	blx	r3
    f02c:	f884 0718 	strb.w	r0, [r4, #1816]	; 0x718
    f030:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
    f032:	2a33      	cmp	r2, #51	; 0x33
    f034:	dd26      	ble.n	f084 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
    f036:	4629      	mov	r1, r5
    f038:	4640      	mov	r0, r8
    f03a:	4b2a      	ldr	r3, [pc, #168]	; (f0e4 <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
    f03c:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
    f03e:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
    f042:	4429      	add	r1, r5
    f044:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
    f048:	f101 0230 	add.w	r2, r1, #48	; 0x30
    f04c:	f8d1 e000 	ldr.w	lr, [r1]
    f050:	684f      	ldr	r7, [r1, #4]
    f052:	688d      	ldr	r5, [r1, #8]
    f054:	68c8      	ldr	r0, [r1, #12]
    f056:	f8c3 e000 	str.w	lr, [r3]
    f05a:	605f      	str	r7, [r3, #4]
    f05c:	609d      	str	r5, [r3, #8]
    f05e:	60d8      	str	r0, [r3, #12]
    f060:	3110      	adds	r1, #16
    f062:	3310      	adds	r3, #16
    f064:	4291      	cmp	r1, r2
    f066:	d1f1      	bne.n	f04c <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
    f068:	8808      	ldrh	r0, [r1, #0]
    f06a:	788a      	ldrb	r2, [r1, #2]
    f06c:	8018      	strh	r0, [r3, #0]
    f06e:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
    f070:	2333      	movs	r3, #51	; 0x33
    f072:	f884 3718 	strb.w	r3, [r4, #1816]	; 0x718
    f076:	e012      	b.n	f09e <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
    f078:	682a      	ldr	r2, [r5, #0]
    f07a:	686b      	ldr	r3, [r5, #4]
    f07c:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
    f080:	607b      	str	r3, [r7, #4]
    f082:	e7d0      	b.n	f026 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
    f084:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
    f088:	4429      	add	r1, r5
    f08a:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
    f08e:	4b13      	ldr	r3, [pc, #76]	; (f0dc <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
    f090:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
    f092:	f894 3718 	ldrb.w	r3, [r4, #1816]	; 0x718
    f096:	4423      	add	r3, r4
    f098:	220a      	movs	r2, #10
    f09a:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
    f09e:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
    f0a2:	6803      	ldr	r3, [r0, #0]
    f0a4:	685b      	ldr	r3, [r3, #4]
    f0a6:	4631      	mov	r1, r6
    f0a8:	4798      	blx	r3
    f0aa:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if (currentTimestamp>0)
    f0ae:	b978      	cbnz	r0, f0d0 <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
    f0b0:	f04f 33ff 	mov.w	r3, #4294967295
    f0b4:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
	}
	
	StackEventEntry(&entry,text_length+1);
    f0b8:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    f0bc:	3201      	adds	r2, #1
    f0be:	b2d2      	uxtb	r2, r2
    f0c0:	f504 61d7 	add.w	r1, r4, #1720	; 0x6b8
    f0c4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    f0c8:	4b07      	ldr	r3, [pc, #28]	; (f0e8 <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
    f0ca:	4798      	blx	r3
    f0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
    f0d0:	f8c4 06b8 	str.w	r0, [r4, #1720]	; 0x6b8
    f0d4:	e7f0      	b.n	f0b8 <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
    f0d6:	bf00      	nop
    f0d8:	0000f2e1 	.word	0x0000f2e1
    f0dc:	00010295 	.word	0x00010295
    f0e0:	00010581 	.word	0x00010581
    f0e4:	0000f2c1 	.word	0x0000f2c1
    f0e8:	0000f375 	.word	0x0000f375

0000f0ec <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh>:
	cal->GetDateTime(&currentDateTime);
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
	return currentTimestamp;
}

void Event_Logger_Class::SaveEventIndexResult(char *text,uint8_t index, uint8_t result){
    f0ec:	b570      	push	{r4, r5, r6, lr}
    f0ee:	4604      	mov	r4, r0
    f0f0:	460d      	mov	r5, r1
    f0f2:	4610      	mov	r0, r2
	task_result	=(TaskResult)result;
    f0f4:	f884 3704 	strb.w	r3, [r4, #1796]	; 0x704

	itoa(index,logger_number,10);
    f0f8:	220a      	movs	r2, #10
    f0fa:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
    f0fe:	4b20      	ldr	r3, [pc, #128]	; (f180 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x94>)
    f100:	4798      	blx	r3
	strcpy(logger_text,text);
    f102:	4629      	mov	r1, r5
    f104:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
    f108:	4b1e      	ldr	r3, [pc, #120]	; (f184 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x98>)
    f10a:	4798      	blx	r3
	logger_module=strcat(logger_text,logger_number);
    f10c:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
    f110:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
    f114:	4b1c      	ldr	r3, [pc, #112]	; (f188 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x9c>)
    f116:	4798      	blx	r3
    f118:	4605      	mov	r5, r0
    f11a:	f8c4 070c 	str.w	r0, [r4, #1804]	; 0x70c
	switch (task_result)
    f11e:	f894 3704 	ldrb.w	r3, [r4, #1796]	; 0x704
    f122:	b173      	cbz	r3, f142 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x56>
    f124:	2b01      	cmp	r3, #1
    f126:	d01e      	beq.n	f166 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x7a>
		case FAILLED :
			logger_module=strcat(logger_module," FAILLED");
		
		break;
		default:
			logger_module=strcat(logger_module," UNKNOWN");
    f128:	4b18      	ldr	r3, [pc, #96]	; (f18c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
    f12a:	4798      	blx	r3
    f12c:	4606      	mov	r6, r0
    f12e:	182a      	adds	r2, r5, r0
    f130:	4b17      	ldr	r3, [pc, #92]	; (f190 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa4>)
    f132:	cb03      	ldmia	r3!, {r0, r1}
    f134:	51a8      	str	r0, [r5, r6]
    f136:	6051      	str	r1, [r2, #4]
    f138:	781b      	ldrb	r3, [r3, #0]
    f13a:	7213      	strb	r3, [r2, #8]
    f13c:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
		/* Your code here */
		break;
    f140:	e00b      	b.n	f15a <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
			logger_module=strcat(logger_module," SUCCESS");
    f142:	4b12      	ldr	r3, [pc, #72]	; (f18c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
    f144:	4798      	blx	r3
    f146:	4606      	mov	r6, r0
    f148:	182a      	adds	r2, r5, r0
    f14a:	4b12      	ldr	r3, [pc, #72]	; (f194 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa8>)
    f14c:	cb03      	ldmia	r3!, {r0, r1}
    f14e:	51a8      	str	r0, [r5, r6]
    f150:	6051      	str	r1, [r2, #4]
    f152:	781b      	ldrb	r3, [r3, #0]
    f154:	7213      	strb	r3, [r2, #8]
    f156:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
	
}

void Event_Logger_Class::SaveEvent(char const * text){
	
	SaveEvent((uint8_t*)text);
    f15a:	f8d4 170c 	ldr.w	r1, [r4, #1804]	; 0x70c
    f15e:	4620      	mov	r0, r4
    f160:	4b0d      	ldr	r3, [pc, #52]	; (f198 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xac>)
    f162:	4798      	blx	r3
    f164:	bd70      	pop	{r4, r5, r6, pc}
			logger_module=strcat(logger_module," FAILLED");
    f166:	4b09      	ldr	r3, [pc, #36]	; (f18c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
    f168:	4798      	blx	r3
    f16a:	4606      	mov	r6, r0
    f16c:	182a      	adds	r2, r5, r0
    f16e:	4b0b      	ldr	r3, [pc, #44]	; (f19c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xb0>)
    f170:	cb03      	ldmia	r3!, {r0, r1}
    f172:	51a8      	str	r0, [r5, r6]
    f174:	6051      	str	r1, [r2, #4]
    f176:	781b      	ldrb	r3, [r3, #0]
    f178:	7213      	strb	r3, [r2, #8]
    f17a:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
		break;
    f17e:	e7ec      	b.n	f15a <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
    f180:	0000f6ed 	.word	0x0000f6ed
    f184:	000104a5 	.word	0x000104a5
    f188:	00010465 	.word	0x00010465
    f18c:	00010581 	.word	0x00010581
    f190:	00010c78 	.word	0x00010c78
    f194:	00010c60 	.word	0x00010c60
    f198:	0000efdd 	.word	0x0000efdd
    f19c:	00010c6c 	.word	0x00010c6c

0000f1a0 <_ZN18Event_Logger_Class9SaveEventEPKc>:
void Event_Logger_Class::SaveEvent(char const * text){
    f1a0:	b508      	push	{r3, lr}
	SaveEvent((uint8_t*)text);
    f1a2:	4b01      	ldr	r3, [pc, #4]	; (f1a8 <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
    f1a4:	4798      	blx	r3
    f1a6:	bd08      	pop	{r3, pc}
    f1a8:	0000efdd 	.word	0x0000efdd

0000f1ac <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
    f1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f1b0:	4c30      	ldr	r4, [pc, #192]	; (f274 <_GLOBAL__sub_I_local_info_text+0xc8>)
    f1b2:	f504 758c 	add.w	r5, r4, #280	; 0x118
    f1b6:	4930      	ldr	r1, [pc, #192]	; (f278 <_GLOBAL__sub_I_local_info_text+0xcc>)
    f1b8:	4628      	mov	r0, r5
    f1ba:	4f30      	ldr	r7, [pc, #192]	; (f27c <_GLOBAL__sub_I_local_info_text+0xd0>)
    f1bc:	47b8      	blx	r7
    f1be:	4e30      	ldr	r6, [pc, #192]	; (f280 <_GLOBAL__sub_I_local_info_text+0xd4>)
    f1c0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; f2b8 <_GLOBAL__sub_I_local_info_text+0x10c>
    f1c4:	4632      	mov	r2, r6
    f1c6:	4641      	mov	r1, r8
    f1c8:	4628      	mov	r0, r5
    f1ca:	4d2e      	ldr	r5, [pc, #184]	; (f284 <_GLOBAL__sub_I_local_info_text+0xd8>)
    f1cc:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    f1ce:	f504 799c 	add.w	r9, r4, #312	; 0x138
    f1d2:	492d      	ldr	r1, [pc, #180]	; (f288 <_GLOBAL__sub_I_local_info_text+0xdc>)
    f1d4:	4648      	mov	r0, r9
    f1d6:	47b8      	blx	r7
    f1d8:	4632      	mov	r2, r6
    f1da:	4641      	mov	r1, r8
    f1dc:	4648      	mov	r0, r9
    f1de:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    f1e0:	f504 79ac 	add.w	r9, r4, #344	; 0x158
    f1e4:	4929      	ldr	r1, [pc, #164]	; (f28c <_GLOBAL__sub_I_local_info_text+0xe0>)
    f1e6:	4648      	mov	r0, r9
    f1e8:	47b8      	blx	r7
    f1ea:	4632      	mov	r2, r6
    f1ec:	4641      	mov	r1, r8
    f1ee:	4648      	mov	r0, r9
    f1f0:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f1f2:	f504 79bc 	add.w	r9, r4, #376	; 0x178
    f1f6:	4926      	ldr	r1, [pc, #152]	; (f290 <_GLOBAL__sub_I_local_info_text+0xe4>)
    f1f8:	4648      	mov	r0, r9
    f1fa:	47b8      	blx	r7
    f1fc:	4632      	mov	r2, r6
    f1fe:	4641      	mov	r1, r8
    f200:	4648      	mov	r0, r9
    f202:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    f204:	f504 79cc 	add.w	r9, r4, #408	; 0x198
    f208:	4922      	ldr	r1, [pc, #136]	; (f294 <_GLOBAL__sub_I_local_info_text+0xe8>)
    f20a:	4648      	mov	r0, r9
    f20c:	47b8      	blx	r7
    f20e:	4632      	mov	r2, r6
    f210:	4641      	mov	r1, r8
    f212:	4648      	mov	r0, r9
    f214:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f216:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
    f21a:	491f      	ldr	r1, [pc, #124]	; (f298 <_GLOBAL__sub_I_local_info_text+0xec>)
    f21c:	4648      	mov	r0, r9
    f21e:	47b8      	blx	r7
    f220:	4632      	mov	r2, r6
    f222:	4641      	mov	r1, r8
    f224:	4648      	mov	r0, r9
    f226:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f228:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
    f22c:	491b      	ldr	r1, [pc, #108]	; (f29c <_GLOBAL__sub_I_local_info_text+0xf0>)
    f22e:	4648      	mov	r0, r9
    f230:	47b8      	blx	r7
    f232:	4632      	mov	r2, r6
    f234:	4641      	mov	r1, r8
    f236:	4648      	mov	r0, r9
    f238:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    f23a:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
    f23e:	4918      	ldr	r1, [pc, #96]	; (f2a0 <_GLOBAL__sub_I_local_info_text+0xf4>)
    f240:	4648      	mov	r0, r9
    f242:	47b8      	blx	r7
    f244:	4632      	mov	r2, r6
    f246:	4641      	mov	r1, r8
    f248:	4648      	mov	r0, r9
    f24a:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
    f24c:	4915      	ldr	r1, [pc, #84]	; (f2a4 <_GLOBAL__sub_I_local_info_text+0xf8>)
    f24e:	4620      	mov	r0, r4
    f250:	4b15      	ldr	r3, [pc, #84]	; (f2a8 <_GLOBAL__sub_I_local_info_text+0xfc>)
    f252:	4798      	blx	r3
    f254:	4632      	mov	r2, r6
    f256:	4915      	ldr	r1, [pc, #84]	; (f2ac <_GLOBAL__sub_I_local_info_text+0x100>)
    f258:	4620      	mov	r0, r4
    f25a:	47a8      	blx	r5
 Event_Logger_Class	logger;
    f25c:	f504 7406 	add.w	r4, r4, #536	; 0x218
    f260:	4620      	mov	r0, r4
    f262:	4b13      	ldr	r3, [pc, #76]	; (f2b0 <_GLOBAL__sub_I_local_info_text+0x104>)
    f264:	4798      	blx	r3
    f266:	4632      	mov	r2, r6
    f268:	4912      	ldr	r1, [pc, #72]	; (f2b4 <_GLOBAL__sub_I_local_info_text+0x108>)
    f26a:	4620      	mov	r0, r4
    f26c:	47a8      	blx	r5
    f26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f272:	bf00      	nop
    f274:	20001888 	.word	0x20001888
    f278:	2000a8e0 	.word	0x2000a8e0
    f27c:	0000dff9 	.word	0x0000dff9
    f280:	20000000 	.word	0x20000000
    f284:	0000fd55 	.word	0x0000fd55
    f288:	2000a974 	.word	0x2000a974
    f28c:	2000aa98 	.word	0x2000aa98
    f290:	2000a994 	.word	0x2000a994
    f294:	2000aa58 	.word	0x2000aa58
    f298:	2000aa78 	.word	0x2000aa78
    f29c:	2000a950 	.word	0x2000a950
    f2a0:	2000a9f0 	.word	0x2000a9f0
    f2a4:	2000aab8 	.word	0x2000aab8
    f2a8:	0000fa01 	.word	0x0000fa01
    f2ac:	0000fa3d 	.word	0x0000fa3d
    f2b0:	0000ef79 	.word	0x0000ef79
    f2b4:	0000ef49 	.word	0x0000ef49
    f2b8:	0000e031 	.word	0x0000e031

0000f2bc <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
    f2bc:	4770      	bx	lr

0000f2be <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
    f2be:	4770      	bx	lr

0000f2c0 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
    f2c0:	b538      	push	{r3, r4, r5, lr}
    f2c2:	4605      	mov	r5, r0
    f2c4:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
    f2c6:	4608      	mov	r0, r1
    f2c8:	4b04      	ldr	r3, [pc, #16]	; (f2dc <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
    f2ca:	4798      	blx	r3
    f2cc:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
    f2ce:	b2c0      	uxtb	r0, r0
    f2d0:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
    f2d2:	bfc4      	itt	gt
    f2d4:	230a      	movgt	r3, #10
    f2d6:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
    f2da:	bd38      	pop	{r3, r4, r5, pc}
    f2dc:	00010581 	.word	0x00010581

0000f2e0 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
    f2e0:	7808      	ldrb	r0, [r1, #0]
    f2e2:	b148      	cbz	r0, f2f8 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
    f2e4:	283a      	cmp	r0, #58	; 0x3a
    f2e6:	d009      	beq.n	f2fc <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
    f2e8:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
    f2ea:	3301      	adds	r3, #1
    f2ec:	b2db      	uxtb	r3, r3
    f2ee:	5cc8      	ldrb	r0, [r1, r3]
    f2f0:	b118      	cbz	r0, f2fa <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
    f2f2:	283a      	cmp	r0, #58	; 0x3a
    f2f4:	d1f9      	bne.n	f2ea <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
    f2f6:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
    f2f8:	4770      	bx	lr
    f2fa:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
    f2fc:	2000      	movs	r0, #0
    f2fe:	4770      	bx	lr

0000f300 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
    f300:	b510      	push	{r4, lr}
    f302:	4604      	mov	r4, r0
    f304:	4b0d      	ldr	r3, [pc, #52]	; (f33c <_ZN15DataLoger_ClassC1Ev+0x3c>)
    f306:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    f308:	f44f 7200 	mov.w	r2, #512	; 0x200
    f30c:	2100      	movs	r1, #0
    f30e:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
    f312:	4b0b      	ldr	r3, [pc, #44]	; (f340 <_ZN15DataLoger_ClassC1Ev+0x40>)
    f314:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    f316:	2300      	movs	r3, #0
    f318:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
    f31c:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
    f320:	230a      	movs	r3, #10
    f322:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
    f326:	4a07      	ldr	r2, [pc, #28]	; (f344 <_ZN15DataLoger_ClassC1Ev+0x44>)
    f328:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
    f32c:	4b06      	ldr	r3, [pc, #24]	; (f348 <_ZN15DataLoger_ClassC1Ev+0x48>)
    f32e:	4907      	ldr	r1, [pc, #28]	; (f34c <_ZN15DataLoger_ClassC1Ev+0x4c>)
    f330:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
    f334:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	
} //DataLoger_Class
    f338:	4620      	mov	r0, r4
    f33a:	bd10      	pop	{r4, pc}
    f33c:	0000f7fb 	.word	0x0000f7fb
    f340:	000103c9 	.word	0x000103c9
    f344:	200021c0 	.word	0x200021c0
    f348:	20001aa0 	.word	0x20001aa0
    f34c:	200031c0 	.word	0x200031c0

0000f350 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
    f350:	b510      	push	{r4, lr}
    f352:	4604      	mov	r4, r0
    f354:	4b01      	ldr	r3, [pc, #4]	; (f35c <_ZN15DataLoger_ClassD1Ev+0xc>)
    f356:	4798      	blx	r3
{
} //~DataLoger_Class
    f358:	4620      	mov	r0, r4
    f35a:	bd10      	pop	{r4, pc}
    f35c:	0000f839 	.word	0x0000f839

0000f360 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
    f360:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
    f364:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
    f366:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f36a:	bf94      	ite	ls
    f36c:	2000      	movls	r0, #0
    f36e:	2001      	movhi	r0, #1
    f370:	4770      	bx	lr
	...

0000f374 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
    f374:	b5f0      	push	{r4, r5, r6, r7, lr}
    f376:	b087      	sub	sp, #28
    f378:	4604      	mov	r4, r0
    f37a:	460e      	mov	r6, r1
	if (len==0xff)
    f37c:	2aff      	cmp	r2, #255	; 0xff
    f37e:	d018      	beq.n	f3b2 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
    f380:	4615      	mov	r5, r2
		if (IsStackFull())
    f382:	4b29      	ldr	r3, [pc, #164]	; (f428 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
    f384:	4798      	blx	r3
    f386:	2800      	cmp	r0, #0
    f388:	d13b      	bne.n	f402 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
    f38a:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
    f38e:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
    f392:	f105 020c 	add.w	r2, r5, #12
    f396:	4631      	mov	r1, r6
    f398:	4418      	add	r0, r3
    f39a:	4b24      	ldr	r3, [pc, #144]	; (f42c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
    f39c:	4798      	blx	r3
		stackValue+=12+len;
    f39e:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
    f3a2:	320c      	adds	r2, #12
    f3a4:	442a      	add	r2, r5
    f3a6:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
    f3aa:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
    f3ae:	b007      	add	sp, #28
    f3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
    f3b2:	466d      	mov	r5, sp
    f3b4:	4f1e      	ldr	r7, [pc, #120]	; (f430 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
    f3b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    f3b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    f3ba:	e897 0003 	ldmia.w	r7, {r0, r1}
    f3be:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
    f3c2:	4668      	mov	r0, sp
    f3c4:	4b1b      	ldr	r3, [pc, #108]	; (f434 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
    f3c6:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
    f3c8:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
    f3cc:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
    f3d0:	b2c2      	uxtb	r2, r0
    f3d2:	320d      	adds	r2, #13
    f3d4:	4631      	mov	r1, r6
    f3d6:	18e8      	adds	r0, r5, r3
    f3d8:	4b14      	ldr	r3, [pc, #80]	; (f42c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
    f3da:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
    f3dc:	4d16      	ldr	r5, [pc, #88]	; (f438 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
    f3de:	4629      	mov	r1, r5
    f3e0:	4816      	ldr	r0, [pc, #88]	; (f43c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
    f3e2:	4b17      	ldr	r3, [pc, #92]	; (f440 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
    f3e4:	4798      	blx	r3
    f3e6:	4b17      	ldr	r3, [pc, #92]	; (f444 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
    f3e8:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
    f3ec:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
    f3f0:	2100      	movs	r1, #0
    f3f2:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
    f3f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f3fa:	4628      	mov	r0, r5
    f3fc:	4b12      	ldr	r3, [pc, #72]	; (f448 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
    f3fe:	4798      	blx	r3
    f400:	e7d3      	b.n	f3aa <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
    f402:	4f0d      	ldr	r7, [pc, #52]	; (f438 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
    f404:	4639      	mov	r1, r7
    f406:	480d      	ldr	r0, [pc, #52]	; (f43c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
    f408:	4b0d      	ldr	r3, [pc, #52]	; (f440 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
    f40a:	4798      	blx	r3
    f40c:	4b0d      	ldr	r3, [pc, #52]	; (f444 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
    f40e:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
    f412:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
    f416:	2100      	movs	r1, #0
    f418:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
    f41c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f420:	4638      	mov	r0, r7
    f422:	4b09      	ldr	r3, [pc, #36]	; (f448 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
    f424:	4798      	blx	r3
    f426:	e7b0      	b.n	f38a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
    f428:	0000f361 	.word	0x0000f361
    f42c:	00010295 	.word	0x00010295
    f430:	00010c48 	.word	0x00010c48
    f434:	00010581 	.word	0x00010581
    f438:	200021c0 	.word	0x200021c0
    f43c:	200042c8 	.word	0x200042c8
    f440:	0000f4d9 	.word	0x0000f4d9
    f444:	200032b8 	.word	0x200032b8
    f448:	000103c9 	.word	0x000103c9

0000f44c <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    f44c:	4770      	bx	lr

0000f44e <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    f44e:	4770      	bx	lr

0000f450 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    f450:	b510      	push	{r4, lr}
    f452:	4604      	mov	r4, r0
    f454:	30c0      	adds	r0, #192	; 0xc0
    f456:	4b03      	ldr	r3, [pc, #12]	; (f464 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    f458:	4798      	blx	r3
    f45a:	4620      	mov	r0, r4
    f45c:	4b02      	ldr	r3, [pc, #8]	; (f468 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    f45e:	4798      	blx	r3
{
} //~MemoryManagment_Class
    f460:	4620      	mov	r0, r4
    f462:	bd10      	pop	{r4, pc}
    f464:	0000f64b 	.word	0x0000f64b
    f468:	0000f44f 	.word	0x0000f44f

0000f46c <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    f46c:	b538      	push	{r3, r4, r5, lr}
    f46e:	4604      	mov	r4, r0
    f470:	4b14      	ldr	r3, [pc, #80]	; (f4c4 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
    f472:	4798      	blx	r3
    f474:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f478:	4b13      	ldr	r3, [pc, #76]	; (f4c8 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    f47a:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    f47c:	f44f 7500 	mov.w	r5, #512	; 0x200
    f480:	462a      	mov	r2, r5
    f482:	2100      	movs	r1, #0
    f484:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    f488:	4b10      	ldr	r3, [pc, #64]	; (f4cc <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    f48a:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    f48c:	2300      	movs	r3, #0
    f48e:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
    f492:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
    f496:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
    f49a:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
    f49e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
    f4a2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
    f4a6:	490a      	ldr	r1, [pc, #40]	; (f4d0 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    f4a8:	f246 3214 	movw	r2, #25364	; 0x6314
    f4ac:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
    f4ae:	4a09      	ldr	r2, [pc, #36]	; (f4d4 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    f4b0:	6812      	ldr	r2, [r2, #0]
    f4b2:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
    f4b6:	f246 3118 	movw	r1, #25368	; 0x6318
    f4ba:	5062      	str	r2, [r4, r1]
	initiated=false;
    f4bc:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
    f4c0:	4620      	mov	r0, r4
    f4c2:	bd38      	pop	{r3, r4, r5, pc}
    f4c4:	0000f44d 	.word	0x0000f44d
    f4c8:	0000f649 	.word	0x0000f649
    f4cc:	000103c9 	.word	0x000103c9
    f4d0:	200031c8 	.word	0x200031c8
    f4d4:	200031c4 	.word	0x200031c4

0000f4d8 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
		  return	w;
	  }

	  return	r;
  }
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
    f4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4dc:	4604      	mov	r4, r0
    f4de:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
    f4e0:	f246 3318 	movw	r3, #25368	; 0x6318
    f4e4:	58c3      	ldr	r3, [r0, r3]
    f4e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f4ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    f4ee:	d906      	bls.n	f4fe <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
    f4f0:	4b14      	ldr	r3, [pc, #80]	; (f544 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f4f2:	681b      	ldr	r3, [r3, #0]
    f4f4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
    f4f8:	f246 3218 	movw	r2, #25368	; 0x6318
    f4fc:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
    f4fe:	f246 3618 	movw	r6, #25368	; 0x6318
    f502:	59a1      	ldr	r1, [r4, r6]
    f504:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    f508:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
    f50a:	4d0f      	ldr	r5, [pc, #60]	; (f548 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
    f50c:	4628      	mov	r0, r5
    f50e:	4b0f      	ldr	r3, [pc, #60]	; (f54c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
    f510:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
    f512:	4628      	mov	r0, r5
    f514:	4f0e      	ldr	r7, [pc, #56]	; (f550 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
    f516:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
    f518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f51c:	59a2      	ldr	r2, [r4, r6]
    f51e:	4641      	mov	r1, r8
    f520:	4628      	mov	r0, r5
    f522:	4e0c      	ldr	r6, [pc, #48]	; (f554 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
    f524:	47b0      	blx	r6
    f526:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
    f528:	4628      	mov	r0, r5
    f52a:	47b8      	blx	r7
		   if (w==0)
    f52c:	b12e      	cbz	r6, f53a <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
    f52e:	4b05      	ldr	r3, [pc, #20]	; (f544 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f530:	6818      	ldr	r0, [r3, #0]
    f532:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
    f536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
    f53a:	f246 3318 	movw	r3, #25368	; 0x6318
    f53e:	58e0      	ldr	r0, [r4, r3]
    f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f544:	200031c4 	.word	0x200031c4
    f548:	2000a5f8 	.word	0x2000a5f8
    f54c:	0000f84d 	.word	0x0000f84d
    f550:	0000f925 	.word	0x0000f925
    f554:	0000f87d 	.word	0x0000f87d

0000f558 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    f558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f55c:	4c2b      	ldr	r4, [pc, #172]	; (f60c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    f55e:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    f562:	492b      	ldr	r1, [pc, #172]	; (f610 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    f564:	4628      	mov	r0, r5
    f566:	4f2b      	ldr	r7, [pc, #172]	; (f614 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    f568:	47b8      	blx	r7
    f56a:	4e2b      	ldr	r6, [pc, #172]	; (f618 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    f56c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; f644 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
    f570:	4632      	mov	r2, r6
    f572:	4641      	mov	r1, r8
    f574:	4628      	mov	r0, r5
    f576:	4d29      	ldr	r5, [pc, #164]	; (f61c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    f578:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    f57a:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    f57e:	4928      	ldr	r1, [pc, #160]	; (f620 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    f580:	4648      	mov	r0, r9
    f582:	47b8      	blx	r7
    f584:	4632      	mov	r2, r6
    f586:	4641      	mov	r1, r8
    f588:	4648      	mov	r0, r9
    f58a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    f58c:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    f590:	4924      	ldr	r1, [pc, #144]	; (f624 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    f592:	4648      	mov	r0, r9
    f594:	47b8      	blx	r7
    f596:	4632      	mov	r2, r6
    f598:	4641      	mov	r1, r8
    f59a:	4648      	mov	r0, r9
    f59c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f59e:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    f5a2:	4921      	ldr	r1, [pc, #132]	; (f628 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    f5a4:	4648      	mov	r0, r9
    f5a6:	47b8      	blx	r7
    f5a8:	4632      	mov	r2, r6
    f5aa:	4641      	mov	r1, r8
    f5ac:	4648      	mov	r0, r9
    f5ae:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    f5b0:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    f5b4:	491d      	ldr	r1, [pc, #116]	; (f62c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    f5b6:	4648      	mov	r0, r9
    f5b8:	47b8      	blx	r7
    f5ba:	4632      	mov	r2, r6
    f5bc:	4641      	mov	r1, r8
    f5be:	4648      	mov	r0, r9
    f5c0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f5c2:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    f5c6:	491a      	ldr	r1, [pc, #104]	; (f630 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
    f5c8:	4648      	mov	r0, r9
    f5ca:	47b8      	blx	r7
    f5cc:	4632      	mov	r2, r6
    f5ce:	4641      	mov	r1, r8
    f5d0:	4648      	mov	r0, r9
    f5d2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f5d4:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    f5d8:	4916      	ldr	r1, [pc, #88]	; (f634 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
    f5da:	4648      	mov	r0, r9
    f5dc:	47b8      	blx	r7
    f5de:	4632      	mov	r2, r6
    f5e0:	4641      	mov	r1, r8
    f5e2:	4648      	mov	r0, r9
    f5e4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    f5e6:	f1a4 0918 	sub.w	r9, r4, #24
    f5ea:	4913      	ldr	r1, [pc, #76]	; (f638 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
    f5ec:	4648      	mov	r0, r9
    f5ee:	47b8      	blx	r7
    f5f0:	4632      	mov	r2, r6
    f5f2:	4641      	mov	r1, r8
    f5f4:	4648      	mov	r0, r9
    f5f6:	47a8      	blx	r5
    f5f8:	3408      	adds	r4, #8
    f5fa:	4620      	mov	r0, r4
    f5fc:	4b0f      	ldr	r3, [pc, #60]	; (f63c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
    f5fe:	4798      	blx	r3
    f600:	4632      	mov	r2, r6
    f602:	490f      	ldr	r1, [pc, #60]	; (f640 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
    f604:	4620      	mov	r0, r4
    f606:	47a8      	blx	r5
    f608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f60c:	200042c0 	.word	0x200042c0
    f610:	2000a8e0 	.word	0x2000a8e0
    f614:	0000dff9 	.word	0x0000dff9
    f618:	20000000 	.word	0x20000000
    f61c:	0000fd55 	.word	0x0000fd55
    f620:	2000a974 	.word	0x2000a974
    f624:	2000aa98 	.word	0x2000aa98
    f628:	2000a994 	.word	0x2000a994
    f62c:	2000aa58 	.word	0x2000aa58
    f630:	2000aa78 	.word	0x2000aa78
    f634:	2000a950 	.word	0x2000a950
    f638:	2000a9f0 	.word	0x2000a9f0
    f63c:	0000f46d 	.word	0x0000f46d
    f640:	0000f451 	.word	0x0000f451
    f644:	0000e031 	.word	0x0000e031

0000f648 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    f648:	4770      	bx	lr

0000f64a <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    f64a:	4770      	bx	lr

0000f64c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    f64c:	b580      	push	{r7, lr}
    f64e:	b084      	sub	sp, #16
    f650:	af00      	add	r7, sp, #0
    f652:	60f8      	str	r0, [r7, #12]
    f654:	60b9      	str	r1, [r7, #8]
    f656:	4613      	mov	r3, r2
    f658:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f65a:	68fb      	ldr	r3, [r7, #12]
    f65c:	2b00      	cmp	r3, #0
    f65e:	d004      	beq.n	f66a <io_write+0x1e>
    f660:	68bb      	ldr	r3, [r7, #8]
    f662:	2b00      	cmp	r3, #0
    f664:	d001      	beq.n	f66a <io_write+0x1e>
    f666:	2301      	movs	r3, #1
    f668:	e000      	b.n	f66c <io_write+0x20>
    f66a:	2300      	movs	r3, #0
    f66c:	f003 0301 	and.w	r3, r3, #1
    f670:	b2db      	uxtb	r3, r3
    f672:	2234      	movs	r2, #52	; 0x34
    f674:	4907      	ldr	r1, [pc, #28]	; (f694 <io_write+0x48>)
    f676:	4618      	mov	r0, r3
    f678:	4b07      	ldr	r3, [pc, #28]	; (f698 <io_write+0x4c>)
    f67a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    f67c:	68fb      	ldr	r3, [r7, #12]
    f67e:	681b      	ldr	r3, [r3, #0]
    f680:	88fa      	ldrh	r2, [r7, #6]
    f682:	68b9      	ldr	r1, [r7, #8]
    f684:	68f8      	ldr	r0, [r7, #12]
    f686:	4798      	blx	r3
    f688:	4603      	mov	r3, r0
}
    f68a:	4618      	mov	r0, r3
    f68c:	3710      	adds	r7, #16
    f68e:	46bd      	mov	sp, r7
    f690:	bd80      	pop	{r7, pc}
    f692:	bf00      	nop
    f694:	00010c84 	.word	0x00010c84
    f698:	000038e1 	.word	0x000038e1

0000f69c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    f69c:	b580      	push	{r7, lr}
    f69e:	b084      	sub	sp, #16
    f6a0:	af00      	add	r7, sp, #0
    f6a2:	60f8      	str	r0, [r7, #12]
    f6a4:	60b9      	str	r1, [r7, #8]
    f6a6:	4613      	mov	r3, r2
    f6a8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f6aa:	68fb      	ldr	r3, [r7, #12]
    f6ac:	2b00      	cmp	r3, #0
    f6ae:	d004      	beq.n	f6ba <io_read+0x1e>
    f6b0:	68bb      	ldr	r3, [r7, #8]
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	d001      	beq.n	f6ba <io_read+0x1e>
    f6b6:	2301      	movs	r3, #1
    f6b8:	e000      	b.n	f6bc <io_read+0x20>
    f6ba:	2300      	movs	r3, #0
    f6bc:	f003 0301 	and.w	r3, r3, #1
    f6c0:	b2db      	uxtb	r3, r3
    f6c2:	223d      	movs	r2, #61	; 0x3d
    f6c4:	4907      	ldr	r1, [pc, #28]	; (f6e4 <io_read+0x48>)
    f6c6:	4618      	mov	r0, r3
    f6c8:	4b07      	ldr	r3, [pc, #28]	; (f6e8 <io_read+0x4c>)
    f6ca:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    f6cc:	68fb      	ldr	r3, [r7, #12]
    f6ce:	685b      	ldr	r3, [r3, #4]
    f6d0:	88fa      	ldrh	r2, [r7, #6]
    f6d2:	68b9      	ldr	r1, [r7, #8]
    f6d4:	68f8      	ldr	r0, [r7, #12]
    f6d6:	4798      	blx	r3
    f6d8:	4603      	mov	r3, r0
}
    f6da:	4618      	mov	r0, r3
    f6dc:	3710      	adds	r7, #16
    f6de:	46bd      	mov	sp, r7
    f6e0:	bd80      	pop	{r7, pc}
    f6e2:	bf00      	nop
    f6e4:	00010c84 	.word	0x00010c84
    f6e8:	000038e1 	.word	0x000038e1

0000f6ec <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    f6ec:	b580      	push	{r7, lr}
    f6ee:	b084      	sub	sp, #16
    f6f0:	af00      	add	r7, sp, #0
    f6f2:	60f8      	str	r0, [r7, #12]
    f6f4:	60b9      	str	r1, [r7, #8]
    f6f6:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
    f6f8:	687a      	ldr	r2, [r7, #4]
    f6fa:	68b9      	ldr	r1, [r7, #8]
    f6fc:	68f8      	ldr	r0, [r7, #12]
    f6fe:	4b03      	ldr	r3, [pc, #12]	; (f70c <itoa+0x20>)
    f700:	4798      	blx	r3
    f702:	4603      	mov	r3, r0
        }
    f704:	4618      	mov	r0, r3
    f706:	3710      	adds	r7, #16
    f708:	46bd      	mov	sp, r7
    f70a:	bd80      	pop	{r7, pc}
    f70c:	0000f711 	.word	0x0000f711

0000f710 <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
    f710:	b480      	push	{r7}
    f712:	b093      	sub	sp, #76	; 0x4c
    f714:	af00      	add	r7, sp, #0
    f716:	60f8      	str	r0, [r7, #12]
    f718:	60b9      	str	r1, [r7, #8]
    f71a:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    f71c:	f107 0310 	add.w	r3, r7, #16
    f720:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    f722:	68bb      	ldr	r3, [r7, #8]
    f724:	2b00      	cmp	r3, #0
    f726:	d101      	bne.n	f72c <ltoa+0x1c>
            {
                return 0;
    f728:	2300      	movs	r3, #0
    f72a:	e061      	b.n	f7f0 <ltoa+0xe0>
            }

            if (radix > 36 || radix <= 1)
    f72c:	687b      	ldr	r3, [r7, #4]
    f72e:	2b24      	cmp	r3, #36	; 0x24
    f730:	dc02      	bgt.n	f738 <ltoa+0x28>
    f732:	687b      	ldr	r3, [r7, #4]
    f734:	2b01      	cmp	r3, #1
    f736:	dc01      	bgt.n	f73c <ltoa+0x2c>
            {
                return 0;
    f738:	2300      	movs	r3, #0
    f73a:	e059      	b.n	f7f0 <ltoa+0xe0>
            }

            sign = (radix == 10 && value < 0);
    f73c:	687b      	ldr	r3, [r7, #4]
    f73e:	2b0a      	cmp	r3, #10
    f740:	d104      	bne.n	f74c <ltoa+0x3c>
    f742:	68fb      	ldr	r3, [r7, #12]
    f744:	2b00      	cmp	r3, #0
    f746:	da01      	bge.n	f74c <ltoa+0x3c>
    f748:	2301      	movs	r3, #1
    f74a:	e000      	b.n	f74e <ltoa+0x3e>
    f74c:	2300      	movs	r3, #0
    f74e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
    f750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f752:	2b00      	cmp	r3, #0
    f754:	d003      	beq.n	f75e <ltoa+0x4e>
            {
                v = -value;
    f756:	68fb      	ldr	r3, [r7, #12]
    f758:	425b      	negs	r3, r3
    f75a:	643b      	str	r3, [r7, #64]	; 0x40
    f75c:	e023      	b.n	f7a6 <ltoa+0x96>
            }
            else
            {
                v = (unsigned long)value;
    f75e:	68fb      	ldr	r3, [r7, #12]
    f760:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
    f762:	e020      	b.n	f7a6 <ltoa+0x96>
            {
                i = v % radix;
    f764:	687a      	ldr	r2, [r7, #4]
    f766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f768:	fbb3 f1f2 	udiv	r1, r3, r2
    f76c:	fb02 f201 	mul.w	r2, r2, r1
    f770:	1a9b      	subs	r3, r3, r2
    f772:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
    f774:	687b      	ldr	r3, [r7, #4]
    f776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f778:	fbb2 f3f3 	udiv	r3, r2, r3
    f77c:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    f77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f780:	2b09      	cmp	r3, #9
    f782:	dc08      	bgt.n	f796 <ltoa+0x86>
                    *tp++ = i + '0';
    f784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f786:	1c5a      	adds	r2, r3, #1
    f788:	647a      	str	r2, [r7, #68]	; 0x44
    f78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f78c:	b2d2      	uxtb	r2, r2
    f78e:	3230      	adds	r2, #48	; 0x30
    f790:	b2d2      	uxtb	r2, r2
    f792:	701a      	strb	r2, [r3, #0]
    f794:	e007      	b.n	f7a6 <ltoa+0x96>
                else
                    *tp++ = i + 'a' - 10;
    f796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f798:	1c5a      	adds	r2, r3, #1
    f79a:	647a      	str	r2, [r7, #68]	; 0x44
    f79c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f79e:	b2d2      	uxtb	r2, r2
    f7a0:	3257      	adds	r2, #87	; 0x57
    f7a2:	b2d2      	uxtb	r2, r2
    f7a4:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    f7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f7a8:	2b00      	cmp	r3, #0
    f7aa:	d1db      	bne.n	f764 <ltoa+0x54>
    f7ac:	f107 0310 	add.w	r3, r7, #16
    f7b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f7b2:	429a      	cmp	r2, r3
    f7b4:	d0d6      	beq.n	f764 <ltoa+0x54>
            }

            sp = string;
    f7b6:	68bb      	ldr	r3, [r7, #8]
    f7b8:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
    f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f7bc:	2b00      	cmp	r3, #0
    f7be:	d00e      	beq.n	f7de <ltoa+0xce>
                *sp++ = '-';
    f7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f7c2:	1c5a      	adds	r2, r3, #1
    f7c4:	63fa      	str	r2, [r7, #60]	; 0x3c
    f7c6:	222d      	movs	r2, #45	; 0x2d
    f7c8:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    f7ca:	e008      	b.n	f7de <ltoa+0xce>
                *sp++ = *--tp;
    f7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f7ce:	1c5a      	adds	r2, r3, #1
    f7d0:	63fa      	str	r2, [r7, #60]	; 0x3c
    f7d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f7d4:	3a01      	subs	r2, #1
    f7d6:	647a      	str	r2, [r7, #68]	; 0x44
    f7d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f7da:	7812      	ldrb	r2, [r2, #0]
    f7dc:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    f7de:	f107 0310 	add.w	r3, r7, #16
    f7e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f7e4:	429a      	cmp	r2, r3
    f7e6:	d8f1      	bhi.n	f7cc <ltoa+0xbc>
            *sp = 0;
    f7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f7ea:	2200      	movs	r2, #0
    f7ec:	701a      	strb	r2, [r3, #0]

            return string;
    f7ee:	68bb      	ldr	r3, [r7, #8]
        }
    f7f0:	4618      	mov	r0, r3
    f7f2:	374c      	adds	r7, #76	; 0x4c
    f7f4:	46bd      	mov	sp, r7
    f7f6:	bc80      	pop	{r7}
    f7f8:	4770      	bx	lr

0000f7fa <_ZN13N25Q256_ClassC1Ev>:
	delay_us(1);
	QSPI_N25Q256_PORT_init();
}

// default constructor
N25Q256_Class::N25Q256_Class()
    f7fa:	b480      	push	{r7}
    f7fc:	b083      	sub	sp, #12
    f7fe:	af00      	add	r7, sp, #0
    f800:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    f802:	687b      	ldr	r3, [r7, #4]
    f804:	4618      	mov	r0, r3
    f806:	370c      	adds	r7, #12
    f808:	46bd      	mov	sp, r7
    f80a:	bc80      	pop	{r7}
    f80c:	4770      	bx	lr
	...

0000f810 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    f810:	b480      	push	{r7}
    f812:	b083      	sub	sp, #12
    f814:	af00      	add	r7, sp, #0
    f816:	6078      	str	r0, [r7, #4]
    f818:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    f81a:	687b      	ldr	r3, [r7, #4]
    f81c:	683a      	ldr	r2, [r7, #0]
    f81e:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    f820:	687b      	ldr	r3, [r7, #4]
    f822:	4a04      	ldr	r2, [pc, #16]	; (f834 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    f824:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    f828:	687b      	ldr	r3, [r7, #4]
    f82a:	4618      	mov	r0, r3
    f82c:	370c      	adds	r7, #12
    f82e:	46bd      	mov	sp, r7
    f830:	bc80      	pop	{r7}
    f832:	4770      	bx	lr
    f834:	001fff00 	.word	0x001fff00

0000f838 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    f838:	b480      	push	{r7}
    f83a:	b083      	sub	sp, #12
    f83c:	af00      	add	r7, sp, #0
    f83e:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    f840:	687b      	ldr	r3, [r7, #4]
    f842:	4618      	mov	r0, r3
    f844:	370c      	adds	r7, #12
    f846:	46bd      	mov	sp, r7
    f848:	bc80      	pop	{r7}
    f84a:	4770      	bx	lr

0000f84c <_ZN13N25Q256_Class5EraseEm>:
	qspi_sync_enable(ptrQSPIDescriptor);
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}

uint32_t	N25Q256_Class::Erase(uint32_t add){
    f84c:	b580      	push	{r7, lr}
    f84e:	b084      	sub	sp, #16
    f850:	af00      	add	r7, sp, #0
    f852:	6078      	str	r0, [r7, #4]
    f854:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
    f856:	687b      	ldr	r3, [r7, #4]
    f858:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    f85c:	685b      	ldr	r3, [r3, #4]
    f85e:	689b      	ldr	r3, [r3, #8]
    f860:	687a      	ldr	r2, [r7, #4]
    f862:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
    f866:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f86a:	6839      	ldr	r1, [r7, #0]
    f86c:	4798      	blx	r3
    f86e:	4603      	mov	r3, r0
    f870:	60fb      	str	r3, [r7, #12]
	return	e;
    f872:	68fb      	ldr	r3, [r7, #12]
}
    f874:	4618      	mov	r0, r3
    f876:	3710      	adds	r7, #16
    f878:	46bd      	mov	sp, r7
    f87a:	bd80      	pop	{r7, pc}

0000f87c <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    f87c:	b590      	push	{r4, r7, lr}
    f87e:	b087      	sub	sp, #28
    f880:	af00      	add	r7, sp, #0
    f882:	60f8      	str	r0, [r7, #12]
    f884:	60b9      	str	r1, [r7, #8]
    f886:	607a      	str	r2, [r7, #4]
    f888:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    f88a:	68fb      	ldr	r3, [r7, #12]
    f88c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    f890:	685b      	ldr	r3, [r3, #4]
    f892:	685c      	ldr	r4, [r3, #4]
    f894:	68fb      	ldr	r3, [r7, #12]
    f896:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    f89a:	683b      	ldr	r3, [r7, #0]
    f89c:	687a      	ldr	r2, [r7, #4]
    f89e:	68b9      	ldr	r1, [r7, #8]
    f8a0:	47a0      	blx	r4
    f8a2:	4603      	mov	r3, r0
    f8a4:	617b      	str	r3, [r7, #20]
	return	w;
    f8a6:	697b      	ldr	r3, [r7, #20]
}
    f8a8:	4618      	mov	r0, r3
    f8aa:	371c      	adds	r7, #28
    f8ac:	46bd      	mov	sp, r7
    f8ae:	bd90      	pop	{r4, r7, pc}

0000f8b0 <_ZN13N25Q256_Class9GetStatusEv>:
	xferDone=false;
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
	return	r;
}

uint8_t	N25Q256_Class::GetStatus(void){
    f8b0:	b580      	push	{r7, lr}
    f8b2:	b082      	sub	sp, #8
    f8b4:	af00      	add	r7, sp, #0
    f8b6:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
    f8b8:	687a      	ldr	r2, [r7, #4]
    f8ba:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    f8be:	f043 0310 	orr.w	r3, r3, #16
    f8c2:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
    f8c6:	687a      	ldr	r2, [r7, #4]
    f8c8:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    f8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f8d0:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
    f8d4:	687a      	ldr	r2, [r7, #4]
    f8d6:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
    f8da:	f36f 1305 	bfc	r3, #4, #2
    f8de:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
    f8e2:	687b      	ldr	r3, [r7, #4]
    f8e4:	2205      	movs	r2, #5
    f8e6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
    f8ea:	687b      	ldr	r3, [r7, #4]
    f8ec:	2201      	movs	r2, #1
    f8ee:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
    f8f2:	687b      	ldr	r3, [r7, #4]
    f8f4:	f203 2212 	addw	r2, r3, #530	; 0x212
    f8f8:	687b      	ldr	r3, [r7, #4]
    f8fa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
    f8fe:	687b      	ldr	r3, [r7, #4]
    f900:	685a      	ldr	r2, [r3, #4]
    f902:	687b      	ldr	r3, [r7, #4]
    f904:	f503 7305 	add.w	r3, r3, #532	; 0x214
    f908:	4619      	mov	r1, r3
    f90a:	4610      	mov	r0, r2
    f90c:	4b04      	ldr	r3, [pc, #16]	; (f920 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
    f90e:	4798      	blx	r3
		return status;
    f910:	687b      	ldr	r3, [r7, #4]
    f912:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
    f916:	4618      	mov	r0, r3
    f918:	3708      	adds	r7, #8
    f91a:	46bd      	mov	sp, r7
    f91c:	bd80      	pop	{r7, pc}
    f91e:	bf00      	nop
    f920:	00002801 	.word	0x00002801

0000f924 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
    f924:	b580      	push	{r7, lr}
    f926:	b082      	sub	sp, #8
    f928:	af00      	add	r7, sp, #0
    f92a:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
    f92c:	6878      	ldr	r0, [r7, #4]
    f92e:	4b0e      	ldr	r3, [pc, #56]	; (f968 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
    f930:	4798      	blx	r3
    f932:	4603      	mov	r3, r0
    f934:	461a      	mov	r2, r3
    f936:	687b      	ldr	r3, [r7, #4]
    f938:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
    f93c:	687b      	ldr	r3, [r7, #4]
    f93e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    f942:	f003 0301 	and.w	r3, r3, #1
    f946:	2b00      	cmp	r3, #0
    f948:	d000      	beq.n	f94c <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
    f94a:	e7ef      	b.n	f92c <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
    f94c:	687b      	ldr	r3, [r7, #4]
    f94e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    f952:	f003 0301 	and.w	r3, r3, #1
    f956:	2b00      	cmp	r3, #0
    f958:	bf0c      	ite	eq
    f95a:	2301      	moveq	r3, #1
    f95c:	2300      	movne	r3, #0
    f95e:	b2db      	uxtb	r3, r3
}
    f960:	4618      	mov	r0, r3
    f962:	3708      	adds	r7, #8
    f964:	46bd      	mov	sp, r7
    f966:	bd80      	pop	{r7, pc}
    f968:	0000f8b1 	.word	0x0000f8b1

0000f96c <_Z41__static_initialization_and_destruction_0ii>:
		}
					
	}
	return	isOK;
}
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
    f96c:	b580      	push	{r7, lr}
    f96e:	b082      	sub	sp, #8
    f970:	af00      	add	r7, sp, #0
    f972:	6078      	str	r0, [r7, #4]
    f974:	6039      	str	r1, [r7, #0]
    f976:	687b      	ldr	r3, [r7, #4]
    f978:	2b01      	cmp	r3, #1
    f97a:	d10d      	bne.n	f998 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    f97c:	683b      	ldr	r3, [r7, #0]
    f97e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f982:	4293      	cmp	r3, r2
    f984:	d108      	bne.n	f998 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    f986:	4906      	ldr	r1, [pc, #24]	; (f9a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f988:	4806      	ldr	r0, [pc, #24]	; (f9a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f98a:	4b07      	ldr	r3, [pc, #28]	; (f9a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    f98c:	4798      	blx	r3
    f98e:	4a07      	ldr	r2, [pc, #28]	; (f9ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
    f990:	4907      	ldr	r1, [pc, #28]	; (f9b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f992:	4804      	ldr	r0, [pc, #16]	; (f9a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f994:	4b07      	ldr	r3, [pc, #28]	; (f9b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f996:	4798      	blx	r3
    f998:	bf00      	nop
    f99a:	3708      	adds	r7, #8
    f99c:	46bd      	mov	sp, r7
    f99e:	bd80      	pop	{r7, pc}
    f9a0:	2000a970 	.word	0x2000a970
    f9a4:	2000a5f8 	.word	0x2000a5f8
    f9a8:	0000f811 	.word	0x0000f811
    f9ac:	20000000 	.word	0x20000000
    f9b0:	0000f839 	.word	0x0000f839
    f9b4:	0000fd55 	.word	0x0000fd55

0000f9b8 <_GLOBAL__sub_I_ptrN25Q256Class>:
    f9b8:	b580      	push	{r7, lr}
    f9ba:	af00      	add	r7, sp, #0
    f9bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f9c0:	2001      	movs	r0, #1
    f9c2:	4b01      	ldr	r3, [pc, #4]	; (f9c8 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    f9c4:	4798      	blx	r3
    f9c6:	bd80      	pop	{r7, pc}
    f9c8:	0000f96d 	.word	0x0000f96d

0000f9cc <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
    f9cc:	b580      	push	{r7, lr}
    f9ce:	b082      	sub	sp, #8
    f9d0:	af00      	add	r7, sp, #0
    f9d2:	6078      	str	r0, [r7, #4]
    f9d4:	687b      	ldr	r3, [r7, #4]
    f9d6:	4618      	mov	r0, r3
    f9d8:	4b06      	ldr	r3, [pc, #24]	; (f9f4 <_ZN14Calendar_ClassC1Ev+0x28>)
    f9da:	4798      	blx	r3
    f9dc:	4a06      	ldr	r2, [pc, #24]	; (f9f8 <_ZN14Calendar_ClassC1Ev+0x2c>)
    f9de:	687b      	ldr	r3, [r7, #4]
    f9e0:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
    f9e2:	4a06      	ldr	r2, [pc, #24]	; (f9fc <_ZN14Calendar_ClassC1Ev+0x30>)
    f9e4:	687b      	ldr	r3, [r7, #4]
    f9e6:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    f9e8:	687b      	ldr	r3, [r7, #4]
    f9ea:	4618      	mov	r0, r3
    f9ec:	3708      	adds	r7, #8
    f9ee:	46bd      	mov	sp, r7
    f9f0:	bd80      	pop	{r7, pc}
    f9f2:	bf00      	nop
    f9f4:	0000fd15 	.word	0x0000fd15
    f9f8:	00010cac 	.word	0x00010cac
    f9fc:	2000a828 	.word	0x2000a828

0000fa00 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    fa00:	b580      	push	{r7, lr}
    fa02:	b082      	sub	sp, #8
    fa04:	af00      	add	r7, sp, #0
    fa06:	6078      	str	r0, [r7, #4]
    fa08:	6039      	str	r1, [r7, #0]
    fa0a:	687b      	ldr	r3, [r7, #4]
    fa0c:	4618      	mov	r0, r3
    fa0e:	4b08      	ldr	r3, [pc, #32]	; (fa30 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    fa10:	4798      	blx	r3
    fa12:	4a08      	ldr	r2, [pc, #32]	; (fa34 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    fa14:	687b      	ldr	r3, [r7, #4]
    fa16:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    fa18:	687b      	ldr	r3, [r7, #4]
    fa1a:	683a      	ldr	r2, [r7, #0]
    fa1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
    fa20:	4a05      	ldr	r2, [pc, #20]	; (fa38 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    fa22:	687b      	ldr	r3, [r7, #4]
    fa24:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    fa26:	687b      	ldr	r3, [r7, #4]
    fa28:	4618      	mov	r0, r3
    fa2a:	3708      	adds	r7, #8
    fa2c:	46bd      	mov	sp, r7
    fa2e:	bd80      	pop	{r7, pc}
    fa30:	0000fd15 	.word	0x0000fd15
    fa34:	00010cac 	.word	0x00010cac
    fa38:	2000a828 	.word	0x2000a828

0000fa3c <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    fa3c:	b580      	push	{r7, lr}
    fa3e:	b082      	sub	sp, #8
    fa40:	af00      	add	r7, sp, #0
    fa42:	6078      	str	r0, [r7, #4]
    fa44:	4a05      	ldr	r2, [pc, #20]	; (fa5c <_ZN14Calendar_ClassD1Ev+0x20>)
    fa46:	687b      	ldr	r3, [r7, #4]
    fa48:	601a      	str	r2, [r3, #0]
    fa4a:	687b      	ldr	r3, [r7, #4]
    fa4c:	4618      	mov	r0, r3
    fa4e:	4b04      	ldr	r3, [pc, #16]	; (fa60 <_ZN14Calendar_ClassD1Ev+0x24>)
    fa50:	4798      	blx	r3
{
} //~Calendar_Class
    fa52:	687b      	ldr	r3, [r7, #4]
    fa54:	4618      	mov	r0, r3
    fa56:	3708      	adds	r7, #8
    fa58:	46bd      	mov	sp, r7
    fa5a:	bd80      	pop	{r7, pc}
    fa5c:	00010cac 	.word	0x00010cac
    fa60:	0000fd35 	.word	0x0000fd35

0000fa64 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    fa64:	b580      	push	{r7, lr}
    fa66:	b082      	sub	sp, #8
    fa68:	af00      	add	r7, sp, #0
    fa6a:	6078      	str	r0, [r7, #4]
    fa6c:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    fa6e:	687b      	ldr	r3, [r7, #4]
    fa70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    fa74:	6839      	ldr	r1, [r7, #0]
    fa76:	4618      	mov	r0, r3
    fa78:	4b03      	ldr	r3, [pc, #12]	; (fa88 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    fa7a:	4798      	blx	r3
    fa7c:	4603      	mov	r3, r0
}
    fa7e:	4618      	mov	r0, r3
    fa80:	3708      	adds	r7, #8
    fa82:	46bd      	mov	sp, r7
    fa84:	bd80      	pop	{r7, pc}
    fa86:	bf00      	nop
    fa88:	000021cd 	.word	0x000021cd

0000fa8c <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    fa8c:	b480      	push	{r7}
    fa8e:	b083      	sub	sp, #12
    fa90:	af00      	add	r7, sp, #0
    fa92:	6078      	str	r0, [r7, #4]
    fa94:	460b      	mov	r3, r1
    fa96:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    fa98:	887b      	ldrh	r3, [r7, #2]
    fa9a:	f003 0303 	and.w	r3, r3, #3
    fa9e:	2b00      	cmp	r3, #0
    faa0:	d001      	beq.n	faa6 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    faa2:	2300      	movs	r3, #0
    faa4:	e000      	b.n	faa8 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    faa6:	2301      	movs	r3, #1
	}
}
    faa8:	4618      	mov	r0, r3
    faaa:	370c      	adds	r7, #12
    faac:	46bd      	mov	sp, r7
    faae:	bc80      	pop	{r7}
    fab0:	4770      	bx	lr
	...

0000fab4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    fab4:	b580      	push	{r7, lr}
    fab6:	b086      	sub	sp, #24
    fab8:	af00      	add	r7, sp, #0
    faba:	6078      	str	r0, [r7, #4]
    fabc:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    fabe:	2300      	movs	r3, #0
    fac0:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    fac2:	2300      	movs	r3, #0
    fac4:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    fac6:	683b      	ldr	r3, [r7, #0]
    fac8:	88db      	ldrh	r3, [r3, #6]
    faca:	b2da      	uxtb	r2, r3
    facc:	687b      	ldr	r3, [r7, #4]
    face:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    fad2:	699b      	ldr	r3, [r3, #24]
    fad4:	b2db      	uxtb	r3, r3
    fad6:	1ad3      	subs	r3, r2, r3
    fad8:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    fada:	683b      	ldr	r3, [r7, #0]
    fadc:	795b      	ldrb	r3, [r3, #5]
    fade:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    fae0:	683b      	ldr	r3, [r7, #0]
    fae2:	791b      	ldrb	r3, [r3, #4]
    fae4:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    fae6:	683b      	ldr	r3, [r7, #0]
    fae8:	789b      	ldrb	r3, [r3, #2]
    faea:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    faec:	683b      	ldr	r3, [r7, #0]
    faee:	785b      	ldrb	r3, [r3, #1]
    faf0:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    faf2:	683b      	ldr	r3, [r7, #0]
    faf4:	781b      	ldrb	r3, [r3, #0]
    faf6:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    faf8:	2300      	movs	r3, #0
    fafa:	613b      	str	r3, [r7, #16]
    fafc:	7bfa      	ldrb	r2, [r7, #15]
    fafe:	693b      	ldr	r3, [r7, #16]
    fb00:	429a      	cmp	r2, r3
    fb02:	d91e      	bls.n	fb42 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    fb04:	687b      	ldr	r3, [r7, #4]
    fb06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    fb0a:	699b      	ldr	r3, [r3, #24]
    fb0c:	b29a      	uxth	r2, r3
    fb0e:	693b      	ldr	r3, [r7, #16]
    fb10:	b29b      	uxth	r3, r3
    fb12:	4413      	add	r3, r2
    fb14:	b29b      	uxth	r3, r3
    fb16:	4619      	mov	r1, r3
    fb18:	6878      	ldr	r0, [r7, #4]
    fb1a:	4b27      	ldr	r3, [pc, #156]	; (fbb8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    fb1c:	4798      	blx	r3
    fb1e:	4603      	mov	r3, r0
    fb20:	2b00      	cmp	r3, #0
    fb22:	d006      	beq.n	fb32 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    fb24:	697b      	ldr	r3, [r7, #20]
    fb26:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    fb2a:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    fb2e:	617b      	str	r3, [r7, #20]
    fb30:	e003      	b.n	fb3a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    fb32:	697a      	ldr	r2, [r7, #20]
    fb34:	4b21      	ldr	r3, [pc, #132]	; (fbbc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    fb36:	4413      	add	r3, r2
    fb38:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    fb3a:	693b      	ldr	r3, [r7, #16]
    fb3c:	3301      	adds	r3, #1
    fb3e:	613b      	str	r3, [r7, #16]
    fb40:	e7dc      	b.n	fafc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    fb42:	2301      	movs	r3, #1
    fb44:	613b      	str	r3, [r7, #16]
    fb46:	7bba      	ldrb	r2, [r7, #14]
    fb48:	693b      	ldr	r3, [r7, #16]
    fb4a:	429a      	cmp	r2, r3
    fb4c:	d910      	bls.n	fb70 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    fb4e:	683b      	ldr	r3, [r7, #0]
    fb50:	88db      	ldrh	r3, [r3, #6]
    fb52:	4619      	mov	r1, r3
    fb54:	693b      	ldr	r3, [r7, #16]
    fb56:	b2db      	uxtb	r3, r3
    fb58:	461a      	mov	r2, r3
    fb5a:	6878      	ldr	r0, [r7, #4]
    fb5c:	4b18      	ldr	r3, [pc, #96]	; (fbc0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    fb5e:	4798      	blx	r3
    fb60:	4602      	mov	r2, r0
    fb62:	697b      	ldr	r3, [r7, #20]
    fb64:	4413      	add	r3, r2
    fb66:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    fb68:	693b      	ldr	r3, [r7, #16]
    fb6a:	3301      	adds	r3, #1
    fb6c:	613b      	str	r3, [r7, #16]
    fb6e:	e7ea      	b.n	fb46 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    fb70:	7b7b      	ldrb	r3, [r7, #13]
    fb72:	3b01      	subs	r3, #1
    fb74:	4a13      	ldr	r2, [pc, #76]	; (fbc4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    fb76:	fb02 f303 	mul.w	r3, r2, r3
    fb7a:	461a      	mov	r2, r3
    fb7c:	697b      	ldr	r3, [r7, #20]
    fb7e:	4413      	add	r3, r2
    fb80:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    fb82:	7b3b      	ldrb	r3, [r7, #12]
    fb84:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    fb88:	fb02 f303 	mul.w	r3, r2, r3
    fb8c:	461a      	mov	r2, r3
    fb8e:	697b      	ldr	r3, [r7, #20]
    fb90:	4413      	add	r3, r2
    fb92:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    fb94:	7afa      	ldrb	r2, [r7, #11]
    fb96:	4613      	mov	r3, r2
    fb98:	011b      	lsls	r3, r3, #4
    fb9a:	1a9b      	subs	r3, r3, r2
    fb9c:	009b      	lsls	r3, r3, #2
    fb9e:	461a      	mov	r2, r3
    fba0:	697b      	ldr	r3, [r7, #20]
    fba2:	4413      	add	r3, r2
    fba4:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    fba6:	7abb      	ldrb	r3, [r7, #10]
    fba8:	697a      	ldr	r2, [r7, #20]
    fbaa:	4413      	add	r3, r2
    fbac:	617b      	str	r3, [r7, #20]

	return tmp;
    fbae:	697b      	ldr	r3, [r7, #20]
}
    fbb0:	4618      	mov	r0, r3
    fbb2:	3718      	adds	r7, #24
    fbb4:	46bd      	mov	sp, r7
    fbb6:	bd80      	pop	{r7, pc}
    fbb8:	0000fa8d 	.word	0x0000fa8d
    fbbc:	01e13380 	.word	0x01e13380
    fbc0:	0000fbc9 	.word	0x0000fbc9
    fbc4:	00015180 	.word	0x00015180

0000fbc8 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    fbc8:	b580      	push	{r7, lr}
    fbca:	b086      	sub	sp, #24
    fbcc:	af00      	add	r7, sp, #0
    fbce:	60f8      	str	r0, [r7, #12]
    fbd0:	60b9      	str	r1, [r7, #8]
    fbd2:	4613      	mov	r3, r2
    fbd4:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    fbd6:	2300      	movs	r3, #0
    fbd8:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    fbda:	68bb      	ldr	r3, [r7, #8]
    fbdc:	b29b      	uxth	r3, r3
    fbde:	4619      	mov	r1, r3
    fbe0:	68f8      	ldr	r0, [r7, #12]
    fbe2:	4b2f      	ldr	r3, [pc, #188]	; (fca0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    fbe4:	4798      	blx	r3
    fbe6:	4603      	mov	r3, r0
    fbe8:	2b00      	cmp	r3, #0
    fbea:	d028      	beq.n	fc3e <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    fbec:	79fb      	ldrb	r3, [r7, #7]
    fbee:	3b01      	subs	r3, #1
    fbf0:	2b0b      	cmp	r3, #11
    fbf2:	d84c      	bhi.n	fc8e <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    fbf4:	a201      	add	r2, pc, #4	; (adr r2, fbfc <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    fbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fbfa:	bf00      	nop
    fbfc:	0000fc2d 	.word	0x0000fc2d
    fc00:	0000fc33 	.word	0x0000fc33
    fc04:	0000fc2d 	.word	0x0000fc2d
    fc08:	0000fc39 	.word	0x0000fc39
    fc0c:	0000fc2d 	.word	0x0000fc2d
    fc10:	0000fc39 	.word	0x0000fc39
    fc14:	0000fc2d 	.word	0x0000fc2d
    fc18:	0000fc2d 	.word	0x0000fc2d
    fc1c:	0000fc39 	.word	0x0000fc39
    fc20:	0000fc2d 	.word	0x0000fc2d
    fc24:	0000fc39 	.word	0x0000fc39
    fc28:	0000fc2d 	.word	0x0000fc2d
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    fc2c:	4b1d      	ldr	r3, [pc, #116]	; (fca4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    fc2e:	617b      	str	r3, [r7, #20]
			break;
    fc30:	e030      	b.n	fc94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    fc32:	4b1d      	ldr	r3, [pc, #116]	; (fca8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    fc34:	617b      	str	r3, [r7, #20]
			break;
    fc36:	e02d      	b.n	fc94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    fc38:	4b1c      	ldr	r3, [pc, #112]	; (fcac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    fc3a:	617b      	str	r3, [r7, #20]
			break;
    fc3c:	e02a      	b.n	fc94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    fc3e:	79fb      	ldrb	r3, [r7, #7]
    fc40:	3b01      	subs	r3, #1
    fc42:	2b0b      	cmp	r3, #11
    fc44:	d825      	bhi.n	fc92 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    fc46:	a201      	add	r2, pc, #4	; (adr r2, fc4c <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    fc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fc4c:	0000fc7d 	.word	0x0000fc7d
    fc50:	0000fc83 	.word	0x0000fc83
    fc54:	0000fc7d 	.word	0x0000fc7d
    fc58:	0000fc89 	.word	0x0000fc89
    fc5c:	0000fc7d 	.word	0x0000fc7d
    fc60:	0000fc89 	.word	0x0000fc89
    fc64:	0000fc7d 	.word	0x0000fc7d
    fc68:	0000fc7d 	.word	0x0000fc7d
    fc6c:	0000fc89 	.word	0x0000fc89
    fc70:	0000fc7d 	.word	0x0000fc7d
    fc74:	0000fc89 	.word	0x0000fc89
    fc78:	0000fc7d 	.word	0x0000fc7d
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    fc7c:	4b09      	ldr	r3, [pc, #36]	; (fca4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    fc7e:	617b      	str	r3, [r7, #20]
			break;
    fc80:	e008      	b.n	fc94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    fc82:	4b0b      	ldr	r3, [pc, #44]	; (fcb0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    fc84:	617b      	str	r3, [r7, #20]
			break;
    fc86:	e005      	b.n	fc94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    fc88:	4b08      	ldr	r3, [pc, #32]	; (fcac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    fc8a:	617b      	str	r3, [r7, #20]
			break;
    fc8c:	e002      	b.n	fc94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    fc8e:	bf00      	nop
    fc90:	e000      	b.n	fc94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    fc92:	bf00      	nop
		}
	}

	return sec_in_month;
    fc94:	697b      	ldr	r3, [r7, #20]
}
    fc96:	4618      	mov	r0, r3
    fc98:	3718      	adds	r7, #24
    fc9a:	46bd      	mov	sp, r7
    fc9c:	bd80      	pop	{r7, pc}
    fc9e:	bf00      	nop
    fca0:	0000fa8d 	.word	0x0000fa8d
    fca4:	0028de80 	.word	0x0028de80
    fca8:	00263b80 	.word	0x00263b80
    fcac:	00278d00 	.word	0x00278d00
    fcb0:	0024ea00 	.word	0x0024ea00

0000fcb4 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

    fcb4:	b580      	push	{r7, lr}
    fcb6:	b082      	sub	sp, #8
    fcb8:	af00      	add	r7, sp, #0
    fcba:	6078      	str	r0, [r7, #4]
    fcbc:	6039      	str	r1, [r7, #0]
    fcbe:	687b      	ldr	r3, [r7, #4]
    fcc0:	2b01      	cmp	r3, #1
    fcc2:	d10d      	bne.n	fce0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    fcc4:	683b      	ldr	r3, [r7, #0]
    fcc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fcca:	4293      	cmp	r3, r2
    fccc:	d108      	bne.n	fce0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    fcce:	4906      	ldr	r1, [pc, #24]	; (fce8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    fcd0:	4806      	ldr	r0, [pc, #24]	; (fcec <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fcd2:	4b07      	ldr	r3, [pc, #28]	; (fcf0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    fcd4:	4798      	blx	r3
    fcd6:	4a07      	ldr	r2, [pc, #28]	; (fcf4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    fcd8:	4907      	ldr	r1, [pc, #28]	; (fcf8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    fcda:	4804      	ldr	r0, [pc, #16]	; (fcec <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fcdc:	4b07      	ldr	r3, [pc, #28]	; (fcfc <_Z41__static_initialization_and_destruction_0ii+0x48>)
    fcde:	4798      	blx	r3
    fce0:	bf00      	nop
    fce2:	3708      	adds	r7, #8
    fce4:	46bd      	mov	sp, r7
    fce6:	bd80      	pop	{r7, pc}
    fce8:	2000aab8 	.word	0x2000aab8
    fcec:	2000a830 	.word	0x2000a830
    fcf0:	0000fa01 	.word	0x0000fa01
    fcf4:	20000000 	.word	0x20000000
    fcf8:	0000fa3d 	.word	0x0000fa3d
    fcfc:	0000fd55 	.word	0x0000fd55

0000fd00 <_GLOBAL__sub_I_ptrCalendarClass>:
    fd00:	b580      	push	{r7, lr}
    fd02:	af00      	add	r7, sp, #0
    fd04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fd08:	2001      	movs	r0, #1
    fd0a:	4b01      	ldr	r3, [pc, #4]	; (fd10 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    fd0c:	4798      	blx	r3
    fd0e:	bd80      	pop	{r7, pc}
    fd10:	0000fcb5 	.word	0x0000fcb5

0000fd14 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    fd14:	b480      	push	{r7}
    fd16:	b083      	sub	sp, #12
    fd18:	af00      	add	r7, sp, #0
    fd1a:	6078      	str	r0, [r7, #4]
    fd1c:	4a04      	ldr	r2, [pc, #16]	; (fd30 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    fd1e:	687b      	ldr	r3, [r7, #4]
    fd20:	601a      	str	r2, [r3, #0]
{
} //~D
    fd22:	687b      	ldr	r3, [r7, #4]
    fd24:	4618      	mov	r0, r3
    fd26:	370c      	adds	r7, #12
    fd28:	46bd      	mov	sp, r7
    fd2a:	bc80      	pop	{r7}
    fd2c:	4770      	bx	lr
    fd2e:	bf00      	nop
    fd30:	00010cbc 	.word	0x00010cbc

0000fd34 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    fd34:	b480      	push	{r7}
    fd36:	b083      	sub	sp, #12
    fd38:	af00      	add	r7, sp, #0
    fd3a:	6078      	str	r0, [r7, #4]
    fd3c:	4a04      	ldr	r2, [pc, #16]	; (fd50 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    fd3e:	687b      	ldr	r3, [r7, #4]
    fd40:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    fd42:	687b      	ldr	r3, [r7, #4]
    fd44:	4618      	mov	r0, r3
    fd46:	370c      	adds	r7, #12
    fd48:	46bd      	mov	sp, r7
    fd4a:	bc80      	pop	{r7}
    fd4c:	4770      	bx	lr
    fd4e:	bf00      	nop
    fd50:	00010cbc 	.word	0x00010cbc

0000fd54 <__aeabi_atexit>:
    fd54:	460b      	mov	r3, r1
    fd56:	4601      	mov	r1, r0
    fd58:	4618      	mov	r0, r3
    fd5a:	f000 ba5f 	b.w	1021c <__cxa_atexit>
    fd5e:	bf00      	nop

0000fd60 <__aeabi_frsub>:
    fd60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    fd64:	e002      	b.n	fd6c <__addsf3>
    fd66:	bf00      	nop

0000fd68 <__aeabi_fsub>:
    fd68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000fd6c <__addsf3>:
    fd6c:	0042      	lsls	r2, r0, #1
    fd6e:	bf1f      	itttt	ne
    fd70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    fd74:	ea92 0f03 	teqne	r2, r3
    fd78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    fd7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    fd80:	d06a      	beq.n	fe58 <__addsf3+0xec>
    fd82:	ea4f 6212 	mov.w	r2, r2, lsr #24
    fd86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    fd8a:	bfc1      	itttt	gt
    fd8c:	18d2      	addgt	r2, r2, r3
    fd8e:	4041      	eorgt	r1, r0
    fd90:	4048      	eorgt	r0, r1
    fd92:	4041      	eorgt	r1, r0
    fd94:	bfb8      	it	lt
    fd96:	425b      	neglt	r3, r3
    fd98:	2b19      	cmp	r3, #25
    fd9a:	bf88      	it	hi
    fd9c:	4770      	bxhi	lr
    fd9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    fda2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    fda6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fdaa:	bf18      	it	ne
    fdac:	4240      	negne	r0, r0
    fdae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    fdb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    fdb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    fdba:	bf18      	it	ne
    fdbc:	4249      	negne	r1, r1
    fdbe:	ea92 0f03 	teq	r2, r3
    fdc2:	d03f      	beq.n	fe44 <__addsf3+0xd8>
    fdc4:	f1a2 0201 	sub.w	r2, r2, #1
    fdc8:	fa41 fc03 	asr.w	ip, r1, r3
    fdcc:	eb10 000c 	adds.w	r0, r0, ip
    fdd0:	f1c3 0320 	rsb	r3, r3, #32
    fdd4:	fa01 f103 	lsl.w	r1, r1, r3
    fdd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    fddc:	d502      	bpl.n	fde4 <__addsf3+0x78>
    fdde:	4249      	negs	r1, r1
    fde0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    fde4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    fde8:	d313      	bcc.n	fe12 <__addsf3+0xa6>
    fdea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    fdee:	d306      	bcc.n	fdfe <__addsf3+0x92>
    fdf0:	0840      	lsrs	r0, r0, #1
    fdf2:	ea4f 0131 	mov.w	r1, r1, rrx
    fdf6:	f102 0201 	add.w	r2, r2, #1
    fdfa:	2afe      	cmp	r2, #254	; 0xfe
    fdfc:	d251      	bcs.n	fea2 <__addsf3+0x136>
    fdfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    fe02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    fe06:	bf08      	it	eq
    fe08:	f020 0001 	biceq.w	r0, r0, #1
    fe0c:	ea40 0003 	orr.w	r0, r0, r3
    fe10:	4770      	bx	lr
    fe12:	0049      	lsls	r1, r1, #1
    fe14:	eb40 0000 	adc.w	r0, r0, r0
    fe18:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    fe1c:	f1a2 0201 	sub.w	r2, r2, #1
    fe20:	d1ed      	bne.n	fdfe <__addsf3+0x92>
    fe22:	fab0 fc80 	clz	ip, r0
    fe26:	f1ac 0c08 	sub.w	ip, ip, #8
    fe2a:	ebb2 020c 	subs.w	r2, r2, ip
    fe2e:	fa00 f00c 	lsl.w	r0, r0, ip
    fe32:	bfaa      	itet	ge
    fe34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    fe38:	4252      	neglt	r2, r2
    fe3a:	4318      	orrge	r0, r3
    fe3c:	bfbc      	itt	lt
    fe3e:	40d0      	lsrlt	r0, r2
    fe40:	4318      	orrlt	r0, r3
    fe42:	4770      	bx	lr
    fe44:	f092 0f00 	teq	r2, #0
    fe48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    fe4c:	bf06      	itte	eq
    fe4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    fe52:	3201      	addeq	r2, #1
    fe54:	3b01      	subne	r3, #1
    fe56:	e7b5      	b.n	fdc4 <__addsf3+0x58>
    fe58:	ea4f 0341 	mov.w	r3, r1, lsl #1
    fe5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    fe60:	bf18      	it	ne
    fe62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    fe66:	d021      	beq.n	feac <__addsf3+0x140>
    fe68:	ea92 0f03 	teq	r2, r3
    fe6c:	d004      	beq.n	fe78 <__addsf3+0x10c>
    fe6e:	f092 0f00 	teq	r2, #0
    fe72:	bf08      	it	eq
    fe74:	4608      	moveq	r0, r1
    fe76:	4770      	bx	lr
    fe78:	ea90 0f01 	teq	r0, r1
    fe7c:	bf1c      	itt	ne
    fe7e:	2000      	movne	r0, #0
    fe80:	4770      	bxne	lr
    fe82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    fe86:	d104      	bne.n	fe92 <__addsf3+0x126>
    fe88:	0040      	lsls	r0, r0, #1
    fe8a:	bf28      	it	cs
    fe8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    fe90:	4770      	bx	lr
    fe92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    fe96:	bf3c      	itt	cc
    fe98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    fe9c:	4770      	bxcc	lr
    fe9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    fea2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    fea6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    feaa:	4770      	bx	lr
    feac:	ea7f 6222 	mvns.w	r2, r2, asr #24
    feb0:	bf16      	itet	ne
    feb2:	4608      	movne	r0, r1
    feb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    feb8:	4601      	movne	r1, r0
    feba:	0242      	lsls	r2, r0, #9
    febc:	bf06      	itte	eq
    febe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    fec2:	ea90 0f01 	teqeq	r0, r1
    fec6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    feca:	4770      	bx	lr

0000fecc <__aeabi_ui2f>:
    fecc:	f04f 0300 	mov.w	r3, #0
    fed0:	e004      	b.n	fedc <__aeabi_i2f+0x8>
    fed2:	bf00      	nop

0000fed4 <__aeabi_i2f>:
    fed4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    fed8:	bf48      	it	mi
    feda:	4240      	negmi	r0, r0
    fedc:	ea5f 0c00 	movs.w	ip, r0
    fee0:	bf08      	it	eq
    fee2:	4770      	bxeq	lr
    fee4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    fee8:	4601      	mov	r1, r0
    feea:	f04f 0000 	mov.w	r0, #0
    feee:	e01c      	b.n	ff2a <__aeabi_l2f+0x2a>

0000fef0 <__aeabi_ul2f>:
    fef0:	ea50 0201 	orrs.w	r2, r0, r1
    fef4:	bf08      	it	eq
    fef6:	4770      	bxeq	lr
    fef8:	f04f 0300 	mov.w	r3, #0
    fefc:	e00a      	b.n	ff14 <__aeabi_l2f+0x14>
    fefe:	bf00      	nop

0000ff00 <__aeabi_l2f>:
    ff00:	ea50 0201 	orrs.w	r2, r0, r1
    ff04:	bf08      	it	eq
    ff06:	4770      	bxeq	lr
    ff08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    ff0c:	d502      	bpl.n	ff14 <__aeabi_l2f+0x14>
    ff0e:	4240      	negs	r0, r0
    ff10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ff14:	ea5f 0c01 	movs.w	ip, r1
    ff18:	bf02      	ittt	eq
    ff1a:	4684      	moveq	ip, r0
    ff1c:	4601      	moveq	r1, r0
    ff1e:	2000      	moveq	r0, #0
    ff20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    ff24:	bf08      	it	eq
    ff26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    ff2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    ff2e:	fabc f28c 	clz	r2, ip
    ff32:	3a08      	subs	r2, #8
    ff34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    ff38:	db10      	blt.n	ff5c <__aeabi_l2f+0x5c>
    ff3a:	fa01 fc02 	lsl.w	ip, r1, r2
    ff3e:	4463      	add	r3, ip
    ff40:	fa00 fc02 	lsl.w	ip, r0, r2
    ff44:	f1c2 0220 	rsb	r2, r2, #32
    ff48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ff4c:	fa20 f202 	lsr.w	r2, r0, r2
    ff50:	eb43 0002 	adc.w	r0, r3, r2
    ff54:	bf08      	it	eq
    ff56:	f020 0001 	biceq.w	r0, r0, #1
    ff5a:	4770      	bx	lr
    ff5c:	f102 0220 	add.w	r2, r2, #32
    ff60:	fa01 fc02 	lsl.w	ip, r1, r2
    ff64:	f1c2 0220 	rsb	r2, r2, #32
    ff68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    ff6c:	fa21 f202 	lsr.w	r2, r1, r2
    ff70:	eb43 0002 	adc.w	r0, r3, r2
    ff74:	bf08      	it	eq
    ff76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    ff7a:	4770      	bx	lr

0000ff7c <__aeabi_fmul>:
    ff7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ff80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    ff84:	bf1e      	ittt	ne
    ff86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    ff8a:	ea92 0f0c 	teqne	r2, ip
    ff8e:	ea93 0f0c 	teqne	r3, ip
    ff92:	d06f      	beq.n	10074 <STACK_SIZE+0x74>
    ff94:	441a      	add	r2, r3
    ff96:	ea80 0c01 	eor.w	ip, r0, r1
    ff9a:	0240      	lsls	r0, r0, #9
    ff9c:	bf18      	it	ne
    ff9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    ffa2:	d01e      	beq.n	ffe2 <__aeabi_fmul+0x66>
    ffa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ffa8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    ffac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    ffb0:	fba0 3101 	umull	r3, r1, r0, r1
    ffb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    ffb8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    ffbc:	bf3e      	ittt	cc
    ffbe:	0049      	lslcc	r1, r1, #1
    ffc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    ffc4:	005b      	lslcc	r3, r3, #1
    ffc6:	ea40 0001 	orr.w	r0, r0, r1
    ffca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    ffce:	2afd      	cmp	r2, #253	; 0xfd
    ffd0:	d81d      	bhi.n	1000e <STACK_SIZE+0xe>
    ffd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ffd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ffda:	bf08      	it	eq
    ffdc:	f020 0001 	biceq.w	r0, r0, #1
    ffe0:	4770      	bx	lr
    ffe2:	f090 0f00 	teq	r0, #0
    ffe6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    ffea:	bf08      	it	eq
    ffec:	0249      	lsleq	r1, r1, #9
    ffee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    fff2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    fff6:	3a7f      	subs	r2, #127	; 0x7f
    fff8:	bfc2      	ittt	gt
    fffa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    fffe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   10002:	4770      	bxgt	lr
   10004:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10008:	f04f 0300 	mov.w	r3, #0
   1000c:	3a01      	subs	r2, #1
   1000e:	dc5d      	bgt.n	100cc <STACK_SIZE+0xcc>
   10010:	f112 0f19 	cmn.w	r2, #25
   10014:	bfdc      	itt	le
   10016:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1001a:	4770      	bxle	lr
   1001c:	f1c2 0200 	rsb	r2, r2, #0
   10020:	0041      	lsls	r1, r0, #1
   10022:	fa21 f102 	lsr.w	r1, r1, r2
   10026:	f1c2 0220 	rsb	r2, r2, #32
   1002a:	fa00 fc02 	lsl.w	ip, r0, r2
   1002e:	ea5f 0031 	movs.w	r0, r1, rrx
   10032:	f140 0000 	adc.w	r0, r0, #0
   10036:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1003a:	bf08      	it	eq
   1003c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10040:	4770      	bx	lr
   10042:	f092 0f00 	teq	r2, #0
   10046:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1004a:	bf02      	ittt	eq
   1004c:	0040      	lsleq	r0, r0, #1
   1004e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   10052:	3a01      	subeq	r2, #1
   10054:	d0f9      	beq.n	1004a <STACK_SIZE+0x4a>
   10056:	ea40 000c 	orr.w	r0, r0, ip
   1005a:	f093 0f00 	teq	r3, #0
   1005e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10062:	bf02      	ittt	eq
   10064:	0049      	lsleq	r1, r1, #1
   10066:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1006a:	3b01      	subeq	r3, #1
   1006c:	d0f9      	beq.n	10062 <STACK_SIZE+0x62>
   1006e:	ea41 010c 	orr.w	r1, r1, ip
   10072:	e78f      	b.n	ff94 <__aeabi_fmul+0x18>
   10074:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   10078:	ea92 0f0c 	teq	r2, ip
   1007c:	bf18      	it	ne
   1007e:	ea93 0f0c 	teqne	r3, ip
   10082:	d00a      	beq.n	1009a <STACK_SIZE+0x9a>
   10084:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   10088:	bf18      	it	ne
   1008a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1008e:	d1d8      	bne.n	10042 <STACK_SIZE+0x42>
   10090:	ea80 0001 	eor.w	r0, r0, r1
   10094:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10098:	4770      	bx	lr
   1009a:	f090 0f00 	teq	r0, #0
   1009e:	bf17      	itett	ne
   100a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   100a4:	4608      	moveq	r0, r1
   100a6:	f091 0f00 	teqne	r1, #0
   100aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   100ae:	d014      	beq.n	100da <STACK_SIZE+0xda>
   100b0:	ea92 0f0c 	teq	r2, ip
   100b4:	d101      	bne.n	100ba <STACK_SIZE+0xba>
   100b6:	0242      	lsls	r2, r0, #9
   100b8:	d10f      	bne.n	100da <STACK_SIZE+0xda>
   100ba:	ea93 0f0c 	teq	r3, ip
   100be:	d103      	bne.n	100c8 <STACK_SIZE+0xc8>
   100c0:	024b      	lsls	r3, r1, #9
   100c2:	bf18      	it	ne
   100c4:	4608      	movne	r0, r1
   100c6:	d108      	bne.n	100da <STACK_SIZE+0xda>
   100c8:	ea80 0001 	eor.w	r0, r0, r1
   100cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   100d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   100d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   100d8:	4770      	bx	lr
   100da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   100de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   100e2:	4770      	bx	lr

000100e4 <__aeabi_fdiv>:
   100e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   100e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   100ec:	bf1e      	ittt	ne
   100ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   100f2:	ea92 0f0c 	teqne	r2, ip
   100f6:	ea93 0f0c 	teqne	r3, ip
   100fa:	d069      	beq.n	101d0 <__aeabi_fdiv+0xec>
   100fc:	eba2 0203 	sub.w	r2, r2, r3
   10100:	ea80 0c01 	eor.w	ip, r0, r1
   10104:	0249      	lsls	r1, r1, #9
   10106:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1010a:	d037      	beq.n	1017c <__aeabi_fdiv+0x98>
   1010c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10110:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   10114:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   10118:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1011c:	428b      	cmp	r3, r1
   1011e:	bf38      	it	cc
   10120:	005b      	lslcc	r3, r3, #1
   10122:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   10126:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1012a:	428b      	cmp	r3, r1
   1012c:	bf24      	itt	cs
   1012e:	1a5b      	subcs	r3, r3, r1
   10130:	ea40 000c 	orrcs.w	r0, r0, ip
   10134:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   10138:	bf24      	itt	cs
   1013a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1013e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10142:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   10146:	bf24      	itt	cs
   10148:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1014c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10150:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   10154:	bf24      	itt	cs
   10156:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1015a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1015e:	011b      	lsls	r3, r3, #4
   10160:	bf18      	it	ne
   10162:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   10166:	d1e0      	bne.n	1012a <__aeabi_fdiv+0x46>
   10168:	2afd      	cmp	r2, #253	; 0xfd
   1016a:	f63f af50 	bhi.w	1000e <STACK_SIZE+0xe>
   1016e:	428b      	cmp	r3, r1
   10170:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10174:	bf08      	it	eq
   10176:	f020 0001 	biceq.w	r0, r0, #1
   1017a:	4770      	bx	lr
   1017c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   10180:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   10184:	327f      	adds	r2, #127	; 0x7f
   10186:	bfc2      	ittt	gt
   10188:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1018c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   10190:	4770      	bxgt	lr
   10192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10196:	f04f 0300 	mov.w	r3, #0
   1019a:	3a01      	subs	r2, #1
   1019c:	e737      	b.n	1000e <STACK_SIZE+0xe>
   1019e:	f092 0f00 	teq	r2, #0
   101a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   101a6:	bf02      	ittt	eq
   101a8:	0040      	lsleq	r0, r0, #1
   101aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   101ae:	3a01      	subeq	r2, #1
   101b0:	d0f9      	beq.n	101a6 <__aeabi_fdiv+0xc2>
   101b2:	ea40 000c 	orr.w	r0, r0, ip
   101b6:	f093 0f00 	teq	r3, #0
   101ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   101be:	bf02      	ittt	eq
   101c0:	0049      	lsleq	r1, r1, #1
   101c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   101c6:	3b01      	subeq	r3, #1
   101c8:	d0f9      	beq.n	101be <__aeabi_fdiv+0xda>
   101ca:	ea41 010c 	orr.w	r1, r1, ip
   101ce:	e795      	b.n	100fc <__aeabi_fdiv+0x18>
   101d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   101d4:	ea92 0f0c 	teq	r2, ip
   101d8:	d108      	bne.n	101ec <__aeabi_fdiv+0x108>
   101da:	0242      	lsls	r2, r0, #9
   101dc:	f47f af7d 	bne.w	100da <STACK_SIZE+0xda>
   101e0:	ea93 0f0c 	teq	r3, ip
   101e4:	f47f af70 	bne.w	100c8 <STACK_SIZE+0xc8>
   101e8:	4608      	mov	r0, r1
   101ea:	e776      	b.n	100da <STACK_SIZE+0xda>
   101ec:	ea93 0f0c 	teq	r3, ip
   101f0:	d104      	bne.n	101fc <__aeabi_fdiv+0x118>
   101f2:	024b      	lsls	r3, r1, #9
   101f4:	f43f af4c 	beq.w	10090 <STACK_SIZE+0x90>
   101f8:	4608      	mov	r0, r1
   101fa:	e76e      	b.n	100da <STACK_SIZE+0xda>
   101fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   10200:	bf18      	it	ne
   10202:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   10206:	d1ca      	bne.n	1019e <__aeabi_fdiv+0xba>
   10208:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1020c:	f47f af5c 	bne.w	100c8 <STACK_SIZE+0xc8>
   10210:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   10214:	f47f af3c 	bne.w	10090 <STACK_SIZE+0x90>
   10218:	e75f      	b.n	100da <STACK_SIZE+0xda>
   1021a:	bf00      	nop

0001021c <__cxa_atexit>:
   1021c:	4613      	mov	r3, r2
   1021e:	460a      	mov	r2, r1
   10220:	4601      	mov	r1, r0
   10222:	2002      	movs	r0, #2
   10224:	f000 ba1a 	b.w	1065c <__register_exitproc>

00010228 <ffs>:
   10228:	b140      	cbz	r0, 1023c <ffs+0x14>
   1022a:	2300      	movs	r3, #0
   1022c:	fa40 f103 	asr.w	r1, r0, r3
   10230:	1c5a      	adds	r2, r3, #1
   10232:	07c9      	lsls	r1, r1, #31
   10234:	4613      	mov	r3, r2
   10236:	d5f9      	bpl.n	1022c <ffs+0x4>
   10238:	4610      	mov	r0, r2
   1023a:	4770      	bx	lr
   1023c:	4602      	mov	r2, r0
   1023e:	4610      	mov	r0, r2
   10240:	4770      	bx	lr
   10242:	bf00      	nop

00010244 <__libc_init_array>:
   10244:	b570      	push	{r4, r5, r6, lr}
   10246:	4e0f      	ldr	r6, [pc, #60]	; (10284 <__libc_init_array+0x40>)
   10248:	4d0f      	ldr	r5, [pc, #60]	; (10288 <__libc_init_array+0x44>)
   1024a:	1b76      	subs	r6, r6, r5
   1024c:	10b6      	asrs	r6, r6, #2
   1024e:	bf18      	it	ne
   10250:	2400      	movne	r4, #0
   10252:	d005      	beq.n	10260 <__libc_init_array+0x1c>
   10254:	3401      	adds	r4, #1
   10256:	f855 3b04 	ldr.w	r3, [r5], #4
   1025a:	4798      	blx	r3
   1025c:	42a6      	cmp	r6, r4
   1025e:	d1f9      	bne.n	10254 <__libc_init_array+0x10>
   10260:	4e0a      	ldr	r6, [pc, #40]	; (1028c <__libc_init_array+0x48>)
   10262:	4d0b      	ldr	r5, [pc, #44]	; (10290 <__libc_init_array+0x4c>)
   10264:	1b76      	subs	r6, r6, r5
   10266:	f000 fd2f 	bl	10cc8 <_init>
   1026a:	10b6      	asrs	r6, r6, #2
   1026c:	bf18      	it	ne
   1026e:	2400      	movne	r4, #0
   10270:	d006      	beq.n	10280 <__libc_init_array+0x3c>
   10272:	3401      	adds	r4, #1
   10274:	f855 3b04 	ldr.w	r3, [r5], #4
   10278:	4798      	blx	r3
   1027a:	42a6      	cmp	r6, r4
   1027c:	d1f9      	bne.n	10272 <__libc_init_array+0x2e>
   1027e:	bd70      	pop	{r4, r5, r6, pc}
   10280:	bd70      	pop	{r4, r5, r6, pc}
   10282:	bf00      	nop
   10284:	00010cd4 	.word	0x00010cd4
   10288:	00010cd4 	.word	0x00010cd4
   1028c:	00010d08 	.word	0x00010d08
   10290:	00010cd4 	.word	0x00010cd4

00010294 <memcpy>:
   10294:	4684      	mov	ip, r0
   10296:	ea41 0300 	orr.w	r3, r1, r0
   1029a:	f013 0303 	ands.w	r3, r3, #3
   1029e:	d16d      	bne.n	1037c <memcpy+0xe8>
   102a0:	3a40      	subs	r2, #64	; 0x40
   102a2:	d341      	bcc.n	10328 <memcpy+0x94>
   102a4:	f851 3b04 	ldr.w	r3, [r1], #4
   102a8:	f840 3b04 	str.w	r3, [r0], #4
   102ac:	f851 3b04 	ldr.w	r3, [r1], #4
   102b0:	f840 3b04 	str.w	r3, [r0], #4
   102b4:	f851 3b04 	ldr.w	r3, [r1], #4
   102b8:	f840 3b04 	str.w	r3, [r0], #4
   102bc:	f851 3b04 	ldr.w	r3, [r1], #4
   102c0:	f840 3b04 	str.w	r3, [r0], #4
   102c4:	f851 3b04 	ldr.w	r3, [r1], #4
   102c8:	f840 3b04 	str.w	r3, [r0], #4
   102cc:	f851 3b04 	ldr.w	r3, [r1], #4
   102d0:	f840 3b04 	str.w	r3, [r0], #4
   102d4:	f851 3b04 	ldr.w	r3, [r1], #4
   102d8:	f840 3b04 	str.w	r3, [r0], #4
   102dc:	f851 3b04 	ldr.w	r3, [r1], #4
   102e0:	f840 3b04 	str.w	r3, [r0], #4
   102e4:	f851 3b04 	ldr.w	r3, [r1], #4
   102e8:	f840 3b04 	str.w	r3, [r0], #4
   102ec:	f851 3b04 	ldr.w	r3, [r1], #4
   102f0:	f840 3b04 	str.w	r3, [r0], #4
   102f4:	f851 3b04 	ldr.w	r3, [r1], #4
   102f8:	f840 3b04 	str.w	r3, [r0], #4
   102fc:	f851 3b04 	ldr.w	r3, [r1], #4
   10300:	f840 3b04 	str.w	r3, [r0], #4
   10304:	f851 3b04 	ldr.w	r3, [r1], #4
   10308:	f840 3b04 	str.w	r3, [r0], #4
   1030c:	f851 3b04 	ldr.w	r3, [r1], #4
   10310:	f840 3b04 	str.w	r3, [r0], #4
   10314:	f851 3b04 	ldr.w	r3, [r1], #4
   10318:	f840 3b04 	str.w	r3, [r0], #4
   1031c:	f851 3b04 	ldr.w	r3, [r1], #4
   10320:	f840 3b04 	str.w	r3, [r0], #4
   10324:	3a40      	subs	r2, #64	; 0x40
   10326:	d2bd      	bcs.n	102a4 <memcpy+0x10>
   10328:	3230      	adds	r2, #48	; 0x30
   1032a:	d311      	bcc.n	10350 <memcpy+0xbc>
   1032c:	f851 3b04 	ldr.w	r3, [r1], #4
   10330:	f840 3b04 	str.w	r3, [r0], #4
   10334:	f851 3b04 	ldr.w	r3, [r1], #4
   10338:	f840 3b04 	str.w	r3, [r0], #4
   1033c:	f851 3b04 	ldr.w	r3, [r1], #4
   10340:	f840 3b04 	str.w	r3, [r0], #4
   10344:	f851 3b04 	ldr.w	r3, [r1], #4
   10348:	f840 3b04 	str.w	r3, [r0], #4
   1034c:	3a10      	subs	r2, #16
   1034e:	d2ed      	bcs.n	1032c <memcpy+0x98>
   10350:	320c      	adds	r2, #12
   10352:	d305      	bcc.n	10360 <memcpy+0xcc>
   10354:	f851 3b04 	ldr.w	r3, [r1], #4
   10358:	f840 3b04 	str.w	r3, [r0], #4
   1035c:	3a04      	subs	r2, #4
   1035e:	d2f9      	bcs.n	10354 <memcpy+0xc0>
   10360:	3204      	adds	r2, #4
   10362:	d008      	beq.n	10376 <memcpy+0xe2>
   10364:	07d2      	lsls	r2, r2, #31
   10366:	bf1c      	itt	ne
   10368:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1036c:	f800 3b01 	strbne.w	r3, [r0], #1
   10370:	d301      	bcc.n	10376 <memcpy+0xe2>
   10372:	880b      	ldrh	r3, [r1, #0]
   10374:	8003      	strh	r3, [r0, #0]
   10376:	4660      	mov	r0, ip
   10378:	4770      	bx	lr
   1037a:	bf00      	nop
   1037c:	2a08      	cmp	r2, #8
   1037e:	d313      	bcc.n	103a8 <memcpy+0x114>
   10380:	078b      	lsls	r3, r1, #30
   10382:	d08d      	beq.n	102a0 <memcpy+0xc>
   10384:	f010 0303 	ands.w	r3, r0, #3
   10388:	d08a      	beq.n	102a0 <memcpy+0xc>
   1038a:	f1c3 0304 	rsb	r3, r3, #4
   1038e:	1ad2      	subs	r2, r2, r3
   10390:	07db      	lsls	r3, r3, #31
   10392:	bf1c      	itt	ne
   10394:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10398:	f800 3b01 	strbne.w	r3, [r0], #1
   1039c:	d380      	bcc.n	102a0 <memcpy+0xc>
   1039e:	f831 3b02 	ldrh.w	r3, [r1], #2
   103a2:	f820 3b02 	strh.w	r3, [r0], #2
   103a6:	e77b      	b.n	102a0 <memcpy+0xc>
   103a8:	3a04      	subs	r2, #4
   103aa:	d3d9      	bcc.n	10360 <memcpy+0xcc>
   103ac:	3a01      	subs	r2, #1
   103ae:	f811 3b01 	ldrb.w	r3, [r1], #1
   103b2:	f800 3b01 	strb.w	r3, [r0], #1
   103b6:	d2f9      	bcs.n	103ac <memcpy+0x118>
   103b8:	780b      	ldrb	r3, [r1, #0]
   103ba:	7003      	strb	r3, [r0, #0]
   103bc:	784b      	ldrb	r3, [r1, #1]
   103be:	7043      	strb	r3, [r0, #1]
   103c0:	788b      	ldrb	r3, [r1, #2]
   103c2:	7083      	strb	r3, [r0, #2]
   103c4:	4660      	mov	r0, ip
   103c6:	4770      	bx	lr

000103c8 <memset>:
   103c8:	b470      	push	{r4, r5, r6}
   103ca:	0786      	lsls	r6, r0, #30
   103cc:	d046      	beq.n	1045c <memset+0x94>
   103ce:	1e54      	subs	r4, r2, #1
   103d0:	2a00      	cmp	r2, #0
   103d2:	d041      	beq.n	10458 <memset+0x90>
   103d4:	b2ca      	uxtb	r2, r1
   103d6:	4603      	mov	r3, r0
   103d8:	e002      	b.n	103e0 <memset+0x18>
   103da:	f114 34ff 	adds.w	r4, r4, #4294967295
   103de:	d33b      	bcc.n	10458 <memset+0x90>
   103e0:	f803 2b01 	strb.w	r2, [r3], #1
   103e4:	079d      	lsls	r5, r3, #30
   103e6:	d1f8      	bne.n	103da <memset+0x12>
   103e8:	2c03      	cmp	r4, #3
   103ea:	d92e      	bls.n	1044a <memset+0x82>
   103ec:	b2cd      	uxtb	r5, r1
   103ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   103f2:	2c0f      	cmp	r4, #15
   103f4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   103f8:	d919      	bls.n	1042e <memset+0x66>
   103fa:	f103 0210 	add.w	r2, r3, #16
   103fe:	4626      	mov	r6, r4
   10400:	3e10      	subs	r6, #16
   10402:	2e0f      	cmp	r6, #15
   10404:	f842 5c10 	str.w	r5, [r2, #-16]
   10408:	f842 5c0c 	str.w	r5, [r2, #-12]
   1040c:	f842 5c08 	str.w	r5, [r2, #-8]
   10410:	f842 5c04 	str.w	r5, [r2, #-4]
   10414:	f102 0210 	add.w	r2, r2, #16
   10418:	d8f2      	bhi.n	10400 <memset+0x38>
   1041a:	f1a4 0210 	sub.w	r2, r4, #16
   1041e:	f022 020f 	bic.w	r2, r2, #15
   10422:	f004 040f 	and.w	r4, r4, #15
   10426:	3210      	adds	r2, #16
   10428:	2c03      	cmp	r4, #3
   1042a:	4413      	add	r3, r2
   1042c:	d90d      	bls.n	1044a <memset+0x82>
   1042e:	461e      	mov	r6, r3
   10430:	4622      	mov	r2, r4
   10432:	3a04      	subs	r2, #4
   10434:	2a03      	cmp	r2, #3
   10436:	f846 5b04 	str.w	r5, [r6], #4
   1043a:	d8fa      	bhi.n	10432 <memset+0x6a>
   1043c:	1f22      	subs	r2, r4, #4
   1043e:	f022 0203 	bic.w	r2, r2, #3
   10442:	3204      	adds	r2, #4
   10444:	4413      	add	r3, r2
   10446:	f004 0403 	and.w	r4, r4, #3
   1044a:	b12c      	cbz	r4, 10458 <memset+0x90>
   1044c:	b2c9      	uxtb	r1, r1
   1044e:	441c      	add	r4, r3
   10450:	f803 1b01 	strb.w	r1, [r3], #1
   10454:	429c      	cmp	r4, r3
   10456:	d1fb      	bne.n	10450 <memset+0x88>
   10458:	bc70      	pop	{r4, r5, r6}
   1045a:	4770      	bx	lr
   1045c:	4614      	mov	r4, r2
   1045e:	4603      	mov	r3, r0
   10460:	e7c2      	b.n	103e8 <memset+0x20>
   10462:	bf00      	nop

00010464 <strcat>:
   10464:	0783      	lsls	r3, r0, #30
   10466:	b510      	push	{r4, lr}
   10468:	4604      	mov	r4, r0
   1046a:	d110      	bne.n	1048e <strcat+0x2a>
   1046c:	6802      	ldr	r2, [r0, #0]
   1046e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   10472:	ea23 0302 	bic.w	r3, r3, r2
   10476:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1047a:	d108      	bne.n	1048e <strcat+0x2a>
   1047c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   10480:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   10484:	ea23 0302 	bic.w	r3, r3, r2
   10488:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1048c:	d0f6      	beq.n	1047c <strcat+0x18>
   1048e:	7803      	ldrb	r3, [r0, #0]
   10490:	b11b      	cbz	r3, 1049a <strcat+0x36>
   10492:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   10496:	2b00      	cmp	r3, #0
   10498:	d1fb      	bne.n	10492 <strcat+0x2e>
   1049a:	f000 f803 	bl	104a4 <strcpy>
   1049e:	4620      	mov	r0, r4
   104a0:	bd10      	pop	{r4, pc}
   104a2:	bf00      	nop

000104a4 <strcpy>:
   104a4:	ea80 0201 	eor.w	r2, r0, r1
   104a8:	4684      	mov	ip, r0
   104aa:	f012 0f03 	tst.w	r2, #3
   104ae:	d14f      	bne.n	10550 <strcpy+0xac>
   104b0:	f011 0f03 	tst.w	r1, #3
   104b4:	d132      	bne.n	1051c <strcpy+0x78>
   104b6:	f84d 4d04 	str.w	r4, [sp, #-4]!
   104ba:	f011 0f04 	tst.w	r1, #4
   104be:	f851 3b04 	ldr.w	r3, [r1], #4
   104c2:	d00b      	beq.n	104dc <strcpy+0x38>
   104c4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   104c8:	439a      	bics	r2, r3
   104ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   104ce:	bf04      	itt	eq
   104d0:	f84c 3b04 	streq.w	r3, [ip], #4
   104d4:	f851 3b04 	ldreq.w	r3, [r1], #4
   104d8:	d116      	bne.n	10508 <strcpy+0x64>
   104da:	bf00      	nop
   104dc:	f851 4b04 	ldr.w	r4, [r1], #4
   104e0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   104e4:	439a      	bics	r2, r3
   104e6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   104ea:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   104ee:	d10b      	bne.n	10508 <strcpy+0x64>
   104f0:	f84c 3b04 	str.w	r3, [ip], #4
   104f4:	43a2      	bics	r2, r4
   104f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   104fa:	bf04      	itt	eq
   104fc:	f851 3b04 	ldreq.w	r3, [r1], #4
   10500:	f84c 4b04 	streq.w	r4, [ip], #4
   10504:	d0ea      	beq.n	104dc <strcpy+0x38>
   10506:	4623      	mov	r3, r4
   10508:	f80c 3b01 	strb.w	r3, [ip], #1
   1050c:	f013 0fff 	tst.w	r3, #255	; 0xff
   10510:	ea4f 2333 	mov.w	r3, r3, ror #8
   10514:	d1f8      	bne.n	10508 <strcpy+0x64>
   10516:	f85d 4b04 	ldr.w	r4, [sp], #4
   1051a:	4770      	bx	lr
   1051c:	f011 0f01 	tst.w	r1, #1
   10520:	d006      	beq.n	10530 <strcpy+0x8c>
   10522:	f811 2b01 	ldrb.w	r2, [r1], #1
   10526:	f80c 2b01 	strb.w	r2, [ip], #1
   1052a:	2a00      	cmp	r2, #0
   1052c:	bf08      	it	eq
   1052e:	4770      	bxeq	lr
   10530:	f011 0f02 	tst.w	r1, #2
   10534:	d0bf      	beq.n	104b6 <strcpy+0x12>
   10536:	f831 2b02 	ldrh.w	r2, [r1], #2
   1053a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1053e:	bf16      	itet	ne
   10540:	f82c 2b02 	strhne.w	r2, [ip], #2
   10544:	f88c 2000 	strbeq.w	r2, [ip]
   10548:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1054c:	d1b3      	bne.n	104b6 <strcpy+0x12>
   1054e:	4770      	bx	lr
   10550:	f811 2b01 	ldrb.w	r2, [r1], #1
   10554:	f80c 2b01 	strb.w	r2, [ip], #1
   10558:	2a00      	cmp	r2, #0
   1055a:	d1f9      	bne.n	10550 <strcpy+0xac>
   1055c:	4770      	bx	lr
   1055e:	bf00      	nop
	...

00010580 <strlen>:
   10580:	f890 f000 	pld	[r0]
   10584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10588:	f020 0107 	bic.w	r1, r0, #7
   1058c:	f06f 0c00 	mvn.w	ip, #0
   10590:	f010 0407 	ands.w	r4, r0, #7
   10594:	f891 f020 	pld	[r1, #32]
   10598:	f040 8049 	bne.w	1062e <strlen+0xae>
   1059c:	f04f 0400 	mov.w	r4, #0
   105a0:	f06f 0007 	mvn.w	r0, #7
   105a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   105a8:	f891 f040 	pld	[r1, #64]	; 0x40
   105ac:	f100 0008 	add.w	r0, r0, #8
   105b0:	fa82 f24c 	uadd8	r2, r2, ip
   105b4:	faa4 f28c 	sel	r2, r4, ip
   105b8:	fa83 f34c 	uadd8	r3, r3, ip
   105bc:	faa2 f38c 	sel	r3, r2, ip
   105c0:	bb4b      	cbnz	r3, 10616 <strlen+0x96>
   105c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   105c6:	fa82 f24c 	uadd8	r2, r2, ip
   105ca:	f100 0008 	add.w	r0, r0, #8
   105ce:	faa4 f28c 	sel	r2, r4, ip
   105d2:	fa83 f34c 	uadd8	r3, r3, ip
   105d6:	faa2 f38c 	sel	r3, r2, ip
   105da:	b9e3      	cbnz	r3, 10616 <strlen+0x96>
   105dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   105e0:	fa82 f24c 	uadd8	r2, r2, ip
   105e4:	f100 0008 	add.w	r0, r0, #8
   105e8:	faa4 f28c 	sel	r2, r4, ip
   105ec:	fa83 f34c 	uadd8	r3, r3, ip
   105f0:	faa2 f38c 	sel	r3, r2, ip
   105f4:	b97b      	cbnz	r3, 10616 <strlen+0x96>
   105f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   105fa:	f101 0120 	add.w	r1, r1, #32
   105fe:	fa82 f24c 	uadd8	r2, r2, ip
   10602:	f100 0008 	add.w	r0, r0, #8
   10606:	faa4 f28c 	sel	r2, r4, ip
   1060a:	fa83 f34c 	uadd8	r3, r3, ip
   1060e:	faa2 f38c 	sel	r3, r2, ip
   10612:	2b00      	cmp	r3, #0
   10614:	d0c6      	beq.n	105a4 <strlen+0x24>
   10616:	2a00      	cmp	r2, #0
   10618:	bf04      	itt	eq
   1061a:	3004      	addeq	r0, #4
   1061c:	461a      	moveq	r2, r3
   1061e:	ba12      	rev	r2, r2
   10620:	fab2 f282 	clz	r2, r2
   10624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1062c:	4770      	bx	lr
   1062e:	e9d1 2300 	ldrd	r2, r3, [r1]
   10632:	f004 0503 	and.w	r5, r4, #3
   10636:	f1c4 0000 	rsb	r0, r4, #0
   1063a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1063e:	f014 0f04 	tst.w	r4, #4
   10642:	f891 f040 	pld	[r1, #64]	; 0x40
   10646:	fa0c f505 	lsl.w	r5, ip, r5
   1064a:	ea62 0205 	orn	r2, r2, r5
   1064e:	bf1c      	itt	ne
   10650:	ea63 0305 	ornne	r3, r3, r5
   10654:	4662      	movne	r2, ip
   10656:	f04f 0400 	mov.w	r4, #0
   1065a:	e7a9      	b.n	105b0 <strlen+0x30>

0001065c <__register_exitproc>:
   1065c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10660:	4d2c      	ldr	r5, [pc, #176]	; (10714 <__register_exitproc+0xb8>)
   10662:	4606      	mov	r6, r0
   10664:	6828      	ldr	r0, [r5, #0]
   10666:	4698      	mov	r8, r3
   10668:	460f      	mov	r7, r1
   1066a:	4691      	mov	r9, r2
   1066c:	f000 f882 	bl	10774 <__retarget_lock_acquire_recursive>
   10670:	4b29      	ldr	r3, [pc, #164]	; (10718 <__register_exitproc+0xbc>)
   10672:	681c      	ldr	r4, [r3, #0]
   10674:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10678:	2b00      	cmp	r3, #0
   1067a:	d03e      	beq.n	106fa <__register_exitproc+0x9e>
   1067c:	685a      	ldr	r2, [r3, #4]
   1067e:	2a1f      	cmp	r2, #31
   10680:	dc1c      	bgt.n	106bc <__register_exitproc+0x60>
   10682:	f102 0e01 	add.w	lr, r2, #1
   10686:	b176      	cbz	r6, 106a6 <__register_exitproc+0x4a>
   10688:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1068c:	2401      	movs	r4, #1
   1068e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10692:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10696:	4094      	lsls	r4, r2
   10698:	4320      	orrs	r0, r4
   1069a:	2e02      	cmp	r6, #2
   1069c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   106a0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   106a4:	d023      	beq.n	106ee <__register_exitproc+0x92>
   106a6:	3202      	adds	r2, #2
   106a8:	f8c3 e004 	str.w	lr, [r3, #4]
   106ac:	6828      	ldr	r0, [r5, #0]
   106ae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   106b2:	f000 f861 	bl	10778 <__retarget_lock_release_recursive>
   106b6:	2000      	movs	r0, #0
   106b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   106bc:	4b17      	ldr	r3, [pc, #92]	; (1071c <__register_exitproc+0xc0>)
   106be:	b30b      	cbz	r3, 10704 <__register_exitproc+0xa8>
   106c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   106c4:	f7fe fc30 	bl	ef28 <malloc>
   106c8:	4603      	mov	r3, r0
   106ca:	b1d8      	cbz	r0, 10704 <__register_exitproc+0xa8>
   106cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   106d0:	6002      	str	r2, [r0, #0]
   106d2:	2100      	movs	r1, #0
   106d4:	6041      	str	r1, [r0, #4]
   106d6:	460a      	mov	r2, r1
   106d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   106dc:	f04f 0e01 	mov.w	lr, #1
   106e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   106e4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   106e8:	2e00      	cmp	r6, #0
   106ea:	d0dc      	beq.n	106a6 <__register_exitproc+0x4a>
   106ec:	e7cc      	b.n	10688 <__register_exitproc+0x2c>
   106ee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   106f2:	430c      	orrs	r4, r1
   106f4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   106f8:	e7d5      	b.n	106a6 <__register_exitproc+0x4a>
   106fa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   106fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10702:	e7bb      	b.n	1067c <__register_exitproc+0x20>
   10704:	6828      	ldr	r0, [r5, #0]
   10706:	f000 f837 	bl	10778 <__retarget_lock_release_recursive>
   1070a:	f04f 30ff 	mov.w	r0, #4294967295
   1070e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10712:	bf00      	nop
   10714:	20000648 	.word	0x20000648
   10718:	00010cc4 	.word	0x00010cc4
   1071c:	0000ef29 	.word	0x0000ef29

00010720 <register_fini>:
   10720:	4b02      	ldr	r3, [pc, #8]	; (1072c <register_fini+0xc>)
   10722:	b113      	cbz	r3, 1072a <register_fini+0xa>
   10724:	4802      	ldr	r0, [pc, #8]	; (10730 <register_fini+0x10>)
   10726:	f000 b805 	b.w	10734 <atexit>
   1072a:	4770      	bx	lr
   1072c:	00000000 	.word	0x00000000
   10730:	00010741 	.word	0x00010741

00010734 <atexit>:
   10734:	2300      	movs	r3, #0
   10736:	4601      	mov	r1, r0
   10738:	461a      	mov	r2, r3
   1073a:	4618      	mov	r0, r3
   1073c:	f7ff bf8e 	b.w	1065c <__register_exitproc>

00010740 <__libc_fini_array>:
   10740:	b538      	push	{r3, r4, r5, lr}
   10742:	4c0a      	ldr	r4, [pc, #40]	; (1076c <__libc_fini_array+0x2c>)
   10744:	4d0a      	ldr	r5, [pc, #40]	; (10770 <__libc_fini_array+0x30>)
   10746:	1b64      	subs	r4, r4, r5
   10748:	10a4      	asrs	r4, r4, #2
   1074a:	d00a      	beq.n	10762 <__libc_fini_array+0x22>
   1074c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10750:	3b01      	subs	r3, #1
   10752:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10756:	3c01      	subs	r4, #1
   10758:	f855 3904 	ldr.w	r3, [r5], #-4
   1075c:	4798      	blx	r3
   1075e:	2c00      	cmp	r4, #0
   10760:	d1f9      	bne.n	10756 <__libc_fini_array+0x16>
   10762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10766:	f000 bacf 	b.w	10d08 <_fini>
   1076a:	bf00      	nop
   1076c:	00010d18 	.word	0x00010d18
   10770:	00010d14 	.word	0x00010d14

00010774 <__retarget_lock_acquire_recursive>:
   10774:	4770      	bx	lr
   10776:	bf00      	nop

00010778 <__retarget_lock_release_recursive>:
   10778:	4770      	bx	lr
   1077a:	bf00      	nop
   1077c:	75646f4d 	.word	0x75646f4d
   10780:	0020656c 	.word	0x0020656c
   10784:	20495053 	.word	0x20495053
   10788:	706d6554 	.word	0x706d6554
   1078c:	74617265 	.word	0x74617265
   10790:	73657275 	.word	0x73657275
   10794:	61745320 	.word	0x61745320
   10798:	64657472 	.word	0x64657472
   1079c:	00000000 	.word	0x00000000
   107a0:	20495053 	.word	0x20495053
   107a4:	706d6554 	.word	0x706d6554
   107a8:	74617265 	.word	0x74617265
   107ac:	73657275 	.word	0x73657275
   107b0:	69614620 	.word	0x69614620
   107b4:	0064656c 	.word	0x0064656c
   107b8:	682f2e2e 	.word	0x682f2e2e
   107bc:	702f6c70 	.word	0x702f6c70
   107c0:	2f74726f 	.word	0x2f74726f
   107c4:	5f6c7068 	.word	0x5f6c7068
   107c8:	6f697067 	.word	0x6f697067
   107cc:	7361625f 	.word	0x7361625f
   107d0:	00682e65 	.word	0x00682e65
   107d4:	682f2e2e 	.word	0x682f2e2e
   107d8:	692f6c61 	.word	0x692f6c61
   107dc:	756c636e 	.word	0x756c636e
   107e0:	682f6564 	.word	0x682f6564
   107e4:	775f6c61 	.word	0x775f6c61
   107e8:	682e7464 	.word	0x682e7464
   107ec:	00000000 	.word	0x00000000
   107f0:	682f2e2e 	.word	0x682f2e2e
   107f4:	732f6c61 	.word	0x732f6c61
   107f8:	682f6372 	.word	0x682f6372
   107fc:	635f6c61 	.word	0x635f6c61
   10800:	6e656c61 	.word	0x6e656c61
   10804:	2e726164 	.word	0x2e726164
   10808:	00000063 	.word	0x00000063
   1080c:	682f2e2e 	.word	0x682f2e2e
   10810:	732f6c61 	.word	0x732f6c61
   10814:	682f6372 	.word	0x682f6372
   10818:	635f6c61 	.word	0x635f6c61
   1081c:	615f6e61 	.word	0x615f6e61
   10820:	636e7973 	.word	0x636e7973
   10824:	0000632e 	.word	0x0000632e
   10828:	682f2e2e 	.word	0x682f2e2e
   1082c:	732f6c61 	.word	0x732f6c61
   10830:	682f6372 	.word	0x682f6372
   10834:	635f6c61 	.word	0x635f6c61
   10838:	735f6372 	.word	0x735f6372
   1083c:	2e636e79 	.word	0x2e636e79
   10840:	00000063 	.word	0x00000063
   10844:	682f2e2e 	.word	0x682f2e2e
   10848:	732f6c61 	.word	0x732f6c61
   1084c:	682f6372 	.word	0x682f6372
   10850:	695f6c61 	.word	0x695f6c61
   10854:	6d5f6332 	.word	0x6d5f6332
   10858:	6e79735f 	.word	0x6e79735f
   1085c:	00632e63 	.word	0x00632e63
   10860:	682f2e2e 	.word	0x682f2e2e
   10864:	732f6c61 	.word	0x732f6c61
   10868:	682f6372 	.word	0x682f6372
   1086c:	705f6c61 	.word	0x705f6c61
   10870:	632e6d77 	.word	0x632e6d77
   10874:	00000000 	.word	0x00000000
   10878:	682f2e2e 	.word	0x682f2e2e
   1087c:	732f6c61 	.word	0x732f6c61
   10880:	682f6372 	.word	0x682f6372
   10884:	715f6c61 	.word	0x715f6c61
   10888:	5f697073 	.word	0x5f697073
   1088c:	636e7973 	.word	0x636e7973
   10890:	0000632e 	.word	0x0000632e
   10894:	682f2e2e 	.word	0x682f2e2e
   10898:	732f6c61 	.word	0x732f6c61
   1089c:	682f6372 	.word	0x682f6372
   108a0:	735f6c61 	.word	0x735f6c61
   108a4:	6d5f6970 	.word	0x6d5f6970
   108a8:	6e79735f 	.word	0x6e79735f
   108ac:	00632e63 	.word	0x00632e63
   108b0:	682f2e2e 	.word	0x682f2e2e
   108b4:	732f6c61 	.word	0x732f6c61
   108b8:	682f6372 	.word	0x682f6372
   108bc:	745f6c61 	.word	0x745f6c61
   108c0:	72656d69 	.word	0x72656d69
   108c4:	0000632e 	.word	0x0000632e
   108c8:	682f2e2e 	.word	0x682f2e2e
   108cc:	752f6c61 	.word	0x752f6c61
   108d0:	736c6974 	.word	0x736c6974
   108d4:	6372732f 	.word	0x6372732f
   108d8:	6974752f 	.word	0x6974752f
   108dc:	6c5f736c 	.word	0x6c5f736c
   108e0:	2e747369 	.word	0x2e747369
   108e4:	00000063 	.word	0x00000063

000108e8 <_map>:
   108e8:	00000000 00000040 00000001 00000021     ....@.......!...
   108f8:	00000003 00000003 00000004 00000004     ................
   10908:	00000005 00000005 00000006 00000056     ............V...
   10918:	00000007 00000057 00000008 00000028     ....W.......(...
   10928:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   10938:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00010948 <user_mux_confs>:
   10948:	00020100 00000000 00000000 00000000     ................
	...

0001098c <channel_confs>:
   1098c:	0660065f 00000000 00000000 00000000     _.`.............
	...

000109cc <interrupt_cfg>:
	...
   10a4c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   10a5c:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   10a6c:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   10a7c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   10a8c:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   10a9c:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   10aac:	43000400 43000800 43000c00              ...C...C...C

00010ab8 <sercomspi_regs>:
   10ab8:	0020000c 00020000 00000000 01ff0001     .. .............
   10ac8:	30000c04 02000000 00000000 ff001700     ...0............
   10ad8:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   10ae8:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   10af8:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   10b08:	43001400 43001800                       ...C...C

00010b10 <_usb_ep_cfgs>:
   10b10:	20000c2c 00000000 00000040 20000c6c     ,.. ....@...l.. 
   10b20:	20000cac 00400040 20000cec 20000d2c     ... @.@.... ,.. 
   10b30:	00400040 20000d6c 20000dac 00400040     @.@.l.. ... @.@.
   10b40:	20000dec 20000e2c 00400040 00000804     ... ,.. @.@.....
   10b50:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   10b60:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   10b70:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   10b80:	7361625f 00682e65                       _base.h.

00010b88 <n25q256a_interface>:
   10b88:	0000b8cd 0000b971 0000ba81 0000bc39     ....q.......9...
   10b98:	0000bcc9 752f2e2e 642f6273 63697665     ....../usb/devic
   10ba8:	73752f65 2e636462 00000063              e/usbdc.c...

00010bb4 <_ZTV9CDC_Class>:
	...
   10bbc:	0000e879 0000e959 0000e4fd 0000e841     y...Y.......A...
   10bcc:	0000e9f1 0000e805 0000e719 0000e769     ............i...
   10bdc:	0000e861 0000e8c1                       a.......

00010be4 <_ZTV6Stream>:
	...
   10bec:	0000ef3d 0000eb5d 0000e4fd 0000e511     =...]...........
   10bfc:	0000ef3d 0000ef3d 0000ef3d 2e257830     =...=...=...0x%.
   10c0c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   10c1c:	0066766f                                ovf.

00010c20 <_ZTV5Print>:
	...
   10c28:	0000ef3d 0000eb5d 0000e4fd 0000e511     =...]...........

00010c38 <_ZTV18Event_Logger_Class>:
	...
   10c40:	0000fa65 0000fab5 74696e49 696c6169     e.......Initiali
   10c50:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   10c60:	43555320 53534543 00000000 49414620      SUCCESS.... FAI
   10c70:	44454c4c 00000000 4b4e5520 4e574f4e     LLED.... UNKNOWN
   10c80:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   10c90:	695f6c61 00632e6f 323a3731 36323a33     al_io.c.17:23:26
   10ca0:	00000000                                ....

00010ca4 <_ZTV14Calendar_Class>:
	...
   10cac:	0000fa65 0000fab5                       e.......

00010cb4 <_ZTV17DateTimeLog_Class>:
	...
   10cbc:	0000ef3d 0000ef3d                       =...=...

00010cc4 <_global_impure_ptr>:
   10cc4:	20000220                                 .. 

00010cc8 <_init>:
   10cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cca:	bf00      	nop
   10ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10cce:	bc08      	pop	{r3}
   10cd0:	469e      	mov	lr, r3
   10cd2:	4770      	bx	lr

00010cd4 <__init_array_start>:
   10cd4:	00010721 	.word	0x00010721

00010cd8 <__frame_dummy_init_array_entry>:
   10cd8:	00000289 00000419 00000841 0000db31     ........A...1...
   10ce8:	0000de61 0000e4c5 0000eb49 0000ef15     a.......I.......
   10cf8:	0000f1ad 0000f559 0000f9b9 0000fd01     ....Y...........

00010d08 <_fini>:
   10d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d0a:	bf00      	nop
   10d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10d0e:	bc08      	pop	{r3}
   10d10:	469e      	mov	lr, r3
   10d12:	4770      	bx	lr

00010d14 <__fini_array_start>:
   10d14:	00000265 	.word	0x00000265
