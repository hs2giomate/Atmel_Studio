
TemperatureSensorsSampling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010c58  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010c58  00010c58  00020c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000064c  20000000  00010c60  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003064c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003064c  2**0
                  CONTENTS
  5 .bss          0000a540  20000650  000112b0  0003064c  2**3
                  ALLOC
  6 .stack        00010000  2000ab90  0001b7f0  0003064c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003064c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003067a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00080efc  00000000  00000000  000306d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b7ce  00000000  00000000  000b15cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001da0b  00000000  00000000  000bcd9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003440  00000000  00000000  000da7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003098  00000000  00000000  000ddbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00052a77  00000000  00000000  000e0c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00040d2d  00000000  00000000  001336f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00142e7e  00000000  00000000  00174424  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d7ac  00000000  00000000  002b72a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 ab 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	31 5a 00 00 c9 47 00 00 d9 47 00 00 d1 02 00 00     1Z...G...G......
      7c:	e9 47 00 00 f9 47 00 00 09 48 00 00 19 48 00 00     .G...G...H...H..
      8c:	29 48 00 00 39 48 00 00 49 48 00 00 d1 02 00 00     )H..9H..IH......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 69 3f 00 00 f9 a8 00 00     ........i?......
     184:	09 a9 00 00 19 a9 00 00 29 a9 00 00 d1 02 00 00     ........).......
     194:	39 73 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     9s..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 55 73 00 00     ............Us..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	71 73 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     qs..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 f5 7f 00 00 d1 02 00 00     ................
     1f4:	11 80 00 00 d1 02 00 00 2d 80 00 00 49 80 00 00     ........-...I...
     204:	65 80 00 00 81 80 00 00 d1 02 00 00 d1 02 00 00     e...............
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000650 	.word	0x20000650
     280:	00000000 	.word	0x00000000
     284:	00010c60 	.word	0x00010c60

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00010c60 	.word	0x00010c60
     2c4:	20000654 	.word	0x20000654
     2c8:	00010c60 	.word	0x00010c60
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00010c60 	.word	0x00010c60
     33c:	2000064c 	.word	0x2000064c
     340:	2000ab90 	.word	0x2000ab90
     344:	20000650 	.word	0x20000650
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00010185 	.word	0x00010185
     354:	00000359 	.word	0x00000359

00000358 <main>:
//static Maintenance_Tool	toolApp;

static float currentTemperature,lastTemperature;

int main(void)
{
     358:	b570      	push	{r4, r5, r6, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     35a:	4b11      	ldr	r3, [pc, #68]	; (3a0 <main+0x48>)
     35c:	4798      	blx	r3
	usb.Init();
     35e:	4811      	ldr	r0, [pc, #68]	; (3a4 <main+0x4c>)
     360:	4b11      	ldr	r3, [pc, #68]	; (3a8 <main+0x50>)
     362:	4798      	blx	r3
	bool isOK=temperatures.Init();
     364:	4811      	ldr	r0, [pc, #68]	; (3ac <main+0x54>)
     366:	4b12      	ldr	r3, [pc, #72]	; (3b0 <main+0x58>)
     368:	4798      	blx	r3
	if (isOK)
     36a:	b110      	cbz	r0, 372 <main+0x1a>
	{
		temperatures.StartOneConversion();
     36c:	480f      	ldr	r0, [pc, #60]	; (3ac <main+0x54>)
     36e:	4b11      	ldr	r3, [pc, #68]	; (3b4 <main+0x5c>)
     370:	4798      	blx	r3
	}
	while(1){
		if (temperatures.IsConversionFinished())
     372:	4c0e      	ldr	r4, [pc, #56]	; (3ac <main+0x54>)
     374:	4d10      	ldr	r5, [pc, #64]	; (3b8 <main+0x60>)
		{
			
			temperatures.GetConversionResult();
     376:	4e11      	ldr	r6, [pc, #68]	; (3bc <main+0x64>)
     378:	e003      	b.n	382 <main+0x2a>
					gotNewTemperature=true;
					
				}
				
			}
			temperatures.StartOneConversion();
     37a:	4620      	mov	r0, r4
     37c:	4b0d      	ldr	r3, [pc, #52]	; (3b4 <main+0x5c>)
     37e:	4798      	blx	r3
			asm("nop");
     380:	bf00      	nop
		if (temperatures.IsConversionFinished())
     382:	4620      	mov	r0, r4
     384:	47a8      	blx	r5
     386:	2800      	cmp	r0, #0
     388:	d0fb      	beq.n	382 <main+0x2a>
			temperatures.GetConversionResult();
     38a:	4620      	mov	r0, r4
     38c:	47b0      	blx	r6
			if (temperatures.faultData==VALID_TEMPERATURE)
     38e:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     392:	2b01      	cmp	r3, #1
     394:	d1f1      	bne.n	37a <main+0x22>
				currentTemperature=temperatures.lastValue;
     396:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
     39a:	4b09      	ldr	r3, [pc, #36]	; (3c0 <main+0x68>)
     39c:	601a      	str	r2, [r3, #0]
     39e:	e7ec      	b.n	37a <main+0x22>
     3a0:	00000895 	.word	0x00000895
     3a4:	20001718 	.word	0x20001718
     3a8:	0000e5f9 	.word	0x0000e5f9
     3ac:	20000888 	.word	0x20000888
     3b0:	000005e1 	.word	0x000005e1
     3b4:	00000695 	.word	0x00000695
     3b8:	00000771 	.word	0x00000771
     3bc:	000006dd 	.word	0x000006dd
     3c0:	2000066c 	.word	0x2000066c

000003c4 <_GLOBAL__sub_I_main>:
// 			
// 		}
		
		
	}
}
     3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     3c8:	4c26      	ldr	r4, [pc, #152]	; (464 <_GLOBAL__sub_I_main+0xa0>)
     3ca:	1d25      	adds	r5, r4, #4
     3cc:	4926      	ldr	r1, [pc, #152]	; (468 <_GLOBAL__sub_I_main+0xa4>)
     3ce:	4628      	mov	r0, r5
     3d0:	4e26      	ldr	r6, [pc, #152]	; (46c <_GLOBAL__sub_I_main+0xa8>)
     3d2:	47b0      	blx	r6
     3d4:	4f26      	ldr	r7, [pc, #152]	; (470 <_GLOBAL__sub_I_main+0xac>)
     3d6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 494 <_GLOBAL__sub_I_main+0xd0>
     3da:	463a      	mov	r2, r7
     3dc:	4641      	mov	r1, r8
     3de:	4628      	mov	r0, r5
     3e0:	4d24      	ldr	r5, [pc, #144]	; (474 <_GLOBAL__sub_I_main+0xb0>)
     3e2:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     3e4:	f104 0924 	add.w	r9, r4, #36	; 0x24
     3e8:	4923      	ldr	r1, [pc, #140]	; (478 <_GLOBAL__sub_I_main+0xb4>)
     3ea:	4648      	mov	r0, r9
     3ec:	47b0      	blx	r6
     3ee:	463a      	mov	r2, r7
     3f0:	4641      	mov	r1, r8
     3f2:	4648      	mov	r0, r9
     3f4:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     3f6:	f104 0944 	add.w	r9, r4, #68	; 0x44
     3fa:	4920      	ldr	r1, [pc, #128]	; (47c <_GLOBAL__sub_I_main+0xb8>)
     3fc:	4648      	mov	r0, r9
     3fe:	47b0      	blx	r6
     400:	463a      	mov	r2, r7
     402:	4641      	mov	r1, r8
     404:	4648      	mov	r0, r9
     406:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     408:	f104 0964 	add.w	r9, r4, #100	; 0x64
     40c:	491c      	ldr	r1, [pc, #112]	; (480 <_GLOBAL__sub_I_main+0xbc>)
     40e:	4648      	mov	r0, r9
     410:	47b0      	blx	r6
     412:	463a      	mov	r2, r7
     414:	4641      	mov	r1, r8
     416:	4648      	mov	r0, r9
     418:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     41a:	f104 0984 	add.w	r9, r4, #132	; 0x84
     41e:	4919      	ldr	r1, [pc, #100]	; (484 <_GLOBAL__sub_I_main+0xc0>)
     420:	4648      	mov	r0, r9
     422:	47b0      	blx	r6
     424:	463a      	mov	r2, r7
     426:	4641      	mov	r1, r8
     428:	4648      	mov	r0, r9
     42a:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     42c:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
     430:	4915      	ldr	r1, [pc, #84]	; (488 <_GLOBAL__sub_I_main+0xc4>)
     432:	4648      	mov	r0, r9
     434:	47b0      	blx	r6
     436:	463a      	mov	r2, r7
     438:	4641      	mov	r1, r8
     43a:	4648      	mov	r0, r9
     43c:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     43e:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
     442:	4912      	ldr	r1, [pc, #72]	; (48c <_GLOBAL__sub_I_main+0xc8>)
     444:	4648      	mov	r0, r9
     446:	47b0      	blx	r6
     448:	463a      	mov	r2, r7
     44a:	4641      	mov	r1, r8
     44c:	4648      	mov	r0, r9
     44e:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     450:	34e4      	adds	r4, #228	; 0xe4
     452:	490f      	ldr	r1, [pc, #60]	; (490 <_GLOBAL__sub_I_main+0xcc>)
     454:	4620      	mov	r0, r4
     456:	47b0      	blx	r6
     458:	463a      	mov	r2, r7
     45a:	4641      	mov	r1, r8
     45c:	4620      	mov	r0, r4
     45e:	47a8      	blx	r5
     460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     464:	2000066c 	.word	0x2000066c
     468:	2000a8d8 	.word	0x2000a8d8
     46c:	0000df39 	.word	0x0000df39
     470:	20000000 	.word	0x20000000
     474:	0000fc95 	.word	0x0000fc95
     478:	2000a96c 	.word	0x2000a96c
     47c:	2000aa90 	.word	0x2000aa90
     480:	2000a98c 	.word	0x2000a98c
     484:	2000aa50 	.word	0x2000aa50
     488:	2000aa70 	.word	0x2000aa70
     48c:	2000a948 	.word	0x2000a948
     490:	2000a9e8 	.word	0x2000a9e8
     494:	0000df71 	.word	0x0000df71

00000498 <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
     498:	4b03      	ldr	r3, [pc, #12]	; (4a8 <_ZL17ConversionTimeoutPK10timer_task+0x10>)
     49a:	681b      	ldr	r3, [r3, #0]
     49c:	2201      	movs	r2, #1
     49e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
     4a2:	bf00      	nop
     4a4:	4770      	bx	lr
     4a6:	bf00      	nop
     4a8:	20000770 	.word	0x20000770

000004ac <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
     4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ae:	4607      	mov	r7, r0
     4b0:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
     4b4:	d007      	beq.n	4c6 <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
     4b6:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
     4ba:	4e05      	ldr	r6, [pc, #20]	; (4d0 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
     4bc:	3c68      	subs	r4, #104	; 0x68
     4be:	4620      	mov	r0, r4
     4c0:	47b0      	blx	r6
     4c2:	42a5      	cmp	r5, r4
     4c4:	d1fa      	bne.n	4bc <_ZN24TemperatureSensors_ClassD1Ev+0x10>
     4c6:	4638      	mov	r0, r7
     4c8:	4b02      	ldr	r3, [pc, #8]	; (4d4 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
     4ca:	4798      	blx	r3
{
} //~TemperatureSensors_Class
     4cc:	4638      	mov	r0, r7
     4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4d0:	0000d2c5 	.word	0x0000d2c5
     4d4:	0000d2c5 	.word	0x0000d2c5

000004d8 <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <_ZL15Converter1Readyv+0x1c>)
     4da:	681b      	ldr	r3, [r3, #0]
     4dc:	2201      	movs	r2, #1
     4de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
     4e2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
     4e6:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
     4ea:	2200      	movs	r2, #0
     4ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	20000770 	.word	0x20000770

000004f8 <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
     4f8:	4b06      	ldr	r3, [pc, #24]	; (514 <_ZL15Converter2Readyv+0x1c>)
     4fa:	681b      	ldr	r3, [r3, #0]
     4fc:	2201      	movs	r2, #1
     4fe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
     502:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
     506:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
     50a:	2200      	movs	r2, #0
     50c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     510:	4770      	bx	lr
     512:	bf00      	nop
     514:	20000770 	.word	0x20000770

00000518 <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
     518:	4b06      	ldr	r3, [pc, #24]	; (534 <_ZL15Converter3Readyv+0x1c>)
     51a:	681b      	ldr	r3, [r3, #0]
     51c:	2201      	movs	r2, #1
     51e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
     522:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
     526:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
     52a:	2200      	movs	r2, #0
     52c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
     530:	4770      	bx	lr
     532:	bf00      	nop
     534:	20000770 	.word	0x20000770

00000538 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
     538:	b570      	push	{r4, r5, r6, lr}
     53a:	4604      	mov	r4, r0
     53c:	460e      	mov	r6, r1
     53e:	4b0a      	ldr	r3, [pc, #40]	; (568 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
     540:	4798      	blx	r3
     542:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
     546:	4d09      	ldr	r5, [pc, #36]	; (56c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
     548:	47a8      	blx	r5
     54a:	f504 7088 	add.w	r0, r4, #272	; 0x110
     54e:	47a8      	blx	r5
     550:	f504 70bc 	add.w	r0, r4, #376	; 0x178
     554:	47a8      	blx	r5
		spiLite=&ltSPI;
     556:	4b06      	ldr	r3, [pc, #24]	; (570 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
     558:	1d1a      	adds	r2, r3, #4
     55a:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
     55e:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
     560:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
     564:	4620      	mov	r0, r4
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	0000d2b1 	.word	0x0000d2b1
     56c:	0000d2b1 	.word	0x0000d2b1
     570:	20000770 	.word	0x20000770

00000574 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
     574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     578:	4605      	mov	r5, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
     57a:	233d      	movs	r3, #61	; 0x3d
     57c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
     580:	231b      	movs	r3, #27
     582:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
     586:	2327      	movs	r3, #39	; 0x27
     588:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
     58c:	f500 77f0 	add.w	r7, r0, #480	; 0x1e0
     590:	f100 06a8 	add.w	r6, r0, #168	; 0xa8
     594:	2400      	movs	r4, #0
		module[ii].Init(csPins[ii],spiLite);
     596:	f8df b038 	ldr.w	fp, [pc, #56]	; 5d0 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
     59a:	f8df a038 	ldr.w	sl, [pc, #56]	; 5d4 <_ZN24TemperatureSensors_Class11InitModulesEv+0x60>
     59e:	f8df 9038 	ldr.w	r9, [pc, #56]	; 5d8 <_ZN24TemperatureSensors_Class11InitModulesEv+0x64>
		module[ii].Init(csPins[ii],spiLite);
     5a2:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
     5a6:	f857 1b04 	ldr.w	r1, [r7], #4
     5aa:	4630      	mov	r0, r6
     5ac:	47d8      	blx	fp
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
     5ae:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
     5b2:	f083 0301 	eor.w	r3, r3, #1
     5b6:	b2e2      	uxtb	r2, r4
     5b8:	4651      	mov	r1, sl
     5ba:	4648      	mov	r0, r9
     5bc:	f8df 801c 	ldr.w	r8, [pc, #28]	; 5dc <_ZN24TemperatureSensors_Class11InitModulesEv+0x68>
     5c0:	47c0      	blx	r8
     5c2:	3401      	adds	r4, #1
     5c4:	3668      	adds	r6, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
     5c6:	2c03      	cmp	r4, #3
     5c8:	d1eb      	bne.n	5a2 <_ZN24TemperatureSensors_Class11InitModulesEv+0x2e>
}
     5ca:	2001      	movs	r0, #1
     5cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5d0:	0000d2d9 	.word	0x0000d2d9
     5d4:	000106bc 	.word	0x000106bc
     5d8:	20001a98 	.word	0x20001a98
     5dc:	0000f02d 	.word	0x0000f02d

000005e0 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
     5e0:	b538      	push	{r3, r4, r5, lr}
     5e2:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
     5e4:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
     5e8:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
     5ec:	4b1d      	ldr	r3, [pc, #116]	; (664 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
     5ee:	4798      	blx	r3
	spiLite->init();
     5f0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
     5f4:	4b1c      	ldr	r3, [pc, #112]	; (668 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
     5f6:	4798      	blx	r3
	if (spiLite->ready)
     5f8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	bb5b      	cbnz	r3, 658 <_ZN24TemperatureSensors_Class4InitEv+0x78>
		logger.SaveEvent("SPI Temperatures Failed");
     600:	491a      	ldr	r1, [pc, #104]	; (66c <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
     602:	481b      	ldr	r0, [pc, #108]	; (670 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
     604:	4b1b      	ldr	r3, [pc, #108]	; (674 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
     606:	4798      	blx	r3
	ptrTemperaturesClass=this;
     608:	4b1b      	ldr	r3, [pc, #108]	; (678 <_ZN24TemperatureSensors_Class4InitEv+0x98>)
     60a:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
     60c:	491b      	ldr	r1, [pc, #108]	; (67c <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
     60e:	2028      	movs	r0, #40	; 0x28
     610:	4d1b      	ldr	r5, [pc, #108]	; (680 <_ZN24TemperatureSensors_Class4InitEv+0xa0>)
     612:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
     614:	491b      	ldr	r1, [pc, #108]	; (684 <_ZN24TemperatureSensors_Class4InitEv+0xa4>)
     616:	2029      	movs	r0, #41	; 0x29
     618:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
     61a:	491b      	ldr	r1, [pc, #108]	; (688 <_ZN24TemperatureSensors_Class4InitEv+0xa8>)
     61c:	2021      	movs	r0, #33	; 0x21
     61e:	47a8      	blx	r5
	InitModules();
     620:	4620      	mov	r0, r4
     622:	4b1a      	ldr	r3, [pc, #104]	; (68c <_ZN24TemperatureSensors_Class4InitEv+0xac>)
     624:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
     626:	2301      	movs	r3, #1
     628:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     62c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
     630:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
     634:	2300      	movs	r3, #0
     636:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
     63a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
     63e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
     642:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
     646:	4013      	ands	r3, r2
     648:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
     64c:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
     64e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
     652:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
     656:	bd38      	pop	{r3, r4, r5, pc}
		logger.SaveEvent("SPI Temperatures Started");
     658:	490d      	ldr	r1, [pc, #52]	; (690 <_ZN24TemperatureSensors_Class4InitEv+0xb0>)
     65a:	4805      	ldr	r0, [pc, #20]	; (670 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
     65c:	4b05      	ldr	r3, [pc, #20]	; (674 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
     65e:	4798      	blx	r3
     660:	e7d2      	b.n	608 <_ZN24TemperatureSensors_Class4InitEv+0x28>
     662:	bf00      	nop
     664:	0000dbe5 	.word	0x0000dbe5
     668:	0000db89 	.word	0x0000db89
     66c:	000106e0 	.word	0x000106e0
     670:	20001a98 	.word	0x20001a98
     674:	0000f0e1 	.word	0x0000f0e1
     678:	20000770 	.word	0x20000770
     67c:	000004d9 	.word	0x000004d9
     680:	000022f9 	.word	0x000022f9
     684:	000004f9 	.word	0x000004f9
     688:	00000519 	.word	0x00000519
     68c:	00000575 	.word	0x00000575
     690:	000106c4 	.word	0x000106c4

00000694 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
     694:	b510      	push	{r4, lr}
     696:	4604      	mov	r4, r0
	converterTimeout=false;
     698:	2200      	movs	r2, #0
     69a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
     69e:	f890 31ff 	ldrb.w	r3, [r0, #511]	; 0x1ff
     6a2:	4403      	add	r3, r0
     6a4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
     6a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     6ac:	4907      	ldr	r1, [pc, #28]	; (6cc <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
     6ae:	4808      	ldr	r0, [pc, #32]	; (6d0 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
     6b0:	4b08      	ldr	r3, [pc, #32]	; (6d4 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
     6b2:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
     6b4:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
     6b8:	2368      	movs	r3, #104	; 0x68
     6ba:	fb03 4000 	mla	r0, r3, r0, r4
     6be:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
     6c2:	30a8      	adds	r0, #168	; 0xa8
     6c4:	4b04      	ldr	r3, [pc, #16]	; (6d8 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
     6c6:	4798      	blx	r3
     6c8:	bd10      	pop	{r4, pc}
     6ca:	bf00      	nop
     6cc:	00000499 	.word	0x00000499
     6d0:	20000788 	.word	0x20000788
     6d4:	0000e16d 	.word	0x0000e16d
     6d8:	0000d3cd 	.word	0x0000d3cd

000006dc <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
     6dc:	b538      	push	{r3, r4, r5, lr}
     6de:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
     6e0:	491e      	ldr	r1, [pc, #120]	; (75c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
     6e2:	481f      	ldr	r0, [pc, #124]	; (760 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
     6e4:	4b1f      	ldr	r3, [pc, #124]	; (764 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
     6e6:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
     6e8:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
     6ec:	2568      	movs	r5, #104	; 0x68
     6ee:	fb05 4000 	mla	r0, r5, r0, r4
     6f2:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
     6f6:	30a8      	adds	r0, #168	; 0xa8
     6f8:	4b1b      	ldr	r3, [pc, #108]	; (768 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
     6fa:	4798      	blx	r3
     6fc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
     700:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
     704:	fb05 4502 	mla	r5, r5, r2, r4
     708:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
     70c:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
     710:	2b01      	cmp	r3, #1
     712:	d00d      	beq.n	730 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
     714:	4b15      	ldr	r3, [pc, #84]	; (76c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
     716:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
     71a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
     71e:	3301      	adds	r3, #1
     720:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
     722:	2b04      	cmp	r3, #4
     724:	d00c      	beq.n	740 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
     726:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
     72a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
     72e:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
     730:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
     734:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     738:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     73c:	66d8      	str	r0, [r3, #108]	; 0x6c
     73e:	e7ec      	b.n	71a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
     740:	2300      	movs	r3, #0
     742:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
		currentModule++;
     746:	3201      	adds	r2, #1
     748:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
     74a:	2a03      	cmp	r2, #3
		currentModule++;
     74c:	bf12      	itee	ne
     74e:	f884 21ff 	strbne.w	r2, [r4, #511]	; 0x1ff
			currentModule=0;
     752:	2300      	moveq	r3, #0
     754:	f884 31ff 	strbeq.w	r3, [r4, #511]	; 0x1ff
     758:	e7e7      	b.n	72a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
     75a:	bf00      	nop
     75c:	00000499 	.word	0x00000499
     760:	20000788 	.word	0x20000788
     764:	0000e115 	.word	0x0000e115
     768:	0000d4d5 	.word	0x0000d4d5
     76c:	c479c000 	.word	0xc479c000

00000770 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
     770:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
     774:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
     778:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
     77c:	4013      	ands	r3, r2
}
     77e:	4018      	ands	r0, r3
     780:	4770      	bx	lr
	...

00000784 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
     784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     788:	4c30      	ldr	r4, [pc, #192]	; (84c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xc8>)
     78a:	f104 0518 	add.w	r5, r4, #24
     78e:	4930      	ldr	r1, [pc, #192]	; (850 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xcc>)
     790:	4628      	mov	r0, r5
     792:	4f30      	ldr	r7, [pc, #192]	; (854 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd0>)
     794:	47b8      	blx	r7
     796:	4e30      	ldr	r6, [pc, #192]	; (858 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd4>)
     798:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 890 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10c>
     79c:	4632      	mov	r2, r6
     79e:	4641      	mov	r1, r8
     7a0:	4628      	mov	r0, r5
     7a2:	4d2e      	ldr	r5, [pc, #184]	; (85c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd8>)
     7a4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     7a6:	f104 0938 	add.w	r9, r4, #56	; 0x38
     7aa:	492d      	ldr	r1, [pc, #180]	; (860 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xdc>)
     7ac:	4648      	mov	r0, r9
     7ae:	47b8      	blx	r7
     7b0:	4632      	mov	r2, r6
     7b2:	4641      	mov	r1, r8
     7b4:	4648      	mov	r0, r9
     7b6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     7b8:	f104 0958 	add.w	r9, r4, #88	; 0x58
     7bc:	4929      	ldr	r1, [pc, #164]	; (864 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe0>)
     7be:	4648      	mov	r0, r9
     7c0:	47b8      	blx	r7
     7c2:	4632      	mov	r2, r6
     7c4:	4641      	mov	r1, r8
     7c6:	4648      	mov	r0, r9
     7c8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     7ca:	f104 0978 	add.w	r9, r4, #120	; 0x78
     7ce:	4926      	ldr	r1, [pc, #152]	; (868 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe4>)
     7d0:	4648      	mov	r0, r9
     7d2:	47b8      	blx	r7
     7d4:	4632      	mov	r2, r6
     7d6:	4641      	mov	r1, r8
     7d8:	4648      	mov	r0, r9
     7da:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     7dc:	f104 0998 	add.w	r9, r4, #152	; 0x98
     7e0:	4922      	ldr	r1, [pc, #136]	; (86c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe8>)
     7e2:	4648      	mov	r0, r9
     7e4:	47b8      	blx	r7
     7e6:	4632      	mov	r2, r6
     7e8:	4641      	mov	r1, r8
     7ea:	4648      	mov	r0, r9
     7ec:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     7ee:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
     7f2:	491f      	ldr	r1, [pc, #124]	; (870 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xec>)
     7f4:	4648      	mov	r0, r9
     7f6:	47b8      	blx	r7
     7f8:	4632      	mov	r2, r6
     7fa:	4641      	mov	r1, r8
     7fc:	4648      	mov	r0, r9
     7fe:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     800:	f104 09d8 	add.w	r9, r4, #216	; 0xd8
     804:	491b      	ldr	r1, [pc, #108]	; (874 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf0>)
     806:	4648      	mov	r0, r9
     808:	47b8      	blx	r7
     80a:	4632      	mov	r2, r6
     80c:	4641      	mov	r1, r8
     80e:	4648      	mov	r0, r9
     810:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     812:	f104 09f8 	add.w	r9, r4, #248	; 0xf8
     816:	4918      	ldr	r1, [pc, #96]	; (878 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf4>)
     818:	4648      	mov	r0, r9
     81a:	47b8      	blx	r7
     81c:	4632      	mov	r2, r6
     81e:	4641      	mov	r1, r8
     820:	4648      	mov	r0, r9
     822:	47a8      	blx	r5
static LT_SPI	ltSPI;
     824:	1d27      	adds	r7, r4, #4
     826:	4638      	mov	r0, r7
     828:	4b14      	ldr	r3, [pc, #80]	; (87c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf8>)
     82a:	4798      	blx	r3
     82c:	4632      	mov	r2, r6
     82e:	4914      	ldr	r1, [pc, #80]	; (880 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xfc>)
     830:	4638      	mov	r0, r7
     832:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
     834:	f504 748c 	add.w	r4, r4, #280	; 0x118
     838:	4912      	ldr	r1, [pc, #72]	; (884 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x100>)
     83a:	4620      	mov	r0, r4
     83c:	4b12      	ldr	r3, [pc, #72]	; (888 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x104>)
     83e:	4798      	blx	r3
     840:	4632      	mov	r2, r6
     842:	4912      	ldr	r1, [pc, #72]	; (88c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x108>)
     844:	4620      	mov	r0, r4
     846:	47a8      	blx	r5
     848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     84c:	20000770 	.word	0x20000770
     850:	2000a8d8 	.word	0x2000a8d8
     854:	0000df39 	.word	0x0000df39
     858:	20000000 	.word	0x20000000
     85c:	0000fc95 	.word	0x0000fc95
     860:	2000a96c 	.word	0x2000a96c
     864:	2000aa90 	.word	0x2000aa90
     868:	2000a98c 	.word	0x2000a98c
     86c:	2000aa50 	.word	0x2000aa50
     870:	2000aa70 	.word	0x2000aa70
     874:	2000a948 	.word	0x2000a948
     878:	2000a9e8 	.word	0x2000a9e8
     87c:	0000db4d 	.word	0x0000db4d
     880:	0000db75 	.word	0x0000db75
     884:	2000a910 	.word	0x2000a910
     888:	00000539 	.word	0x00000539
     88c:	000004ad 	.word	0x000004ad
     890:	0000df71 	.word	0x0000df71

00000894 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     894:	b580      	push	{r7, lr}
     896:	af00      	add	r7, sp, #0
	system_init();
     898:	4b03      	ldr	r3, [pc, #12]	; (8a8 <atmel_start_init+0x14>)
     89a:	4798      	blx	r3
	usb_init();
     89c:	4b03      	ldr	r3, [pc, #12]	; (8ac <atmel_start_init+0x18>)
     89e:	4798      	blx	r3
	spi_nor_flash_init();
     8a0:	4b03      	ldr	r3, [pc, #12]	; (8b0 <atmel_start_init+0x1c>)
     8a2:	4798      	blx	r3
}
     8a4:	bf00      	nop
     8a6:	bd80      	pop	{r7, pc}
     8a8:	00001c95 	.word	0x00001c95
     8ac:	0000affd 	.word	0x0000affd
     8b0:	0000af91 	.word	0x0000af91

000008b4 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     8b4:	b480      	push	{r7}
     8b6:	b085      	sub	sp, #20
     8b8:	af00      	add	r7, sp, #0
     8ba:	60f8      	str	r0, [r7, #12]
     8bc:	460b      	mov	r3, r1
     8be:	607a      	str	r2, [r7, #4]
     8c0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     8c2:	7afa      	ldrb	r2, [r7, #11]
     8c4:	68fb      	ldr	r3, [r7, #12]
     8c6:	3220      	adds	r2, #32
     8c8:	6879      	ldr	r1, [r7, #4]
     8ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     8ce:	bf00      	nop
     8d0:	3714      	adds	r7, #20
     8d2:	46bd      	mov	sp, r7
     8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8d8:	4770      	bx	lr

000008da <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     8da:	b480      	push	{r7}
     8dc:	b083      	sub	sp, #12
     8de:	af00      	add	r7, sp, #0
     8e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	691b      	ldr	r3, [r3, #16]
     8e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8ee:	bf00      	nop
     8f0:	370c      	adds	r7, #12
     8f2:	46bd      	mov	sp, r7
     8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8f8:	4770      	bx	lr

000008fa <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     8fa:	b480      	push	{r7}
     8fc:	b083      	sub	sp, #12
     8fe:	af00      	add	r7, sp, #0
     900:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     902:	687b      	ldr	r3, [r7, #4]
     904:	691b      	ldr	r3, [r3, #16]
     906:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     90e:	bf00      	nop
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr

0000091a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     91a:	b480      	push	{r7}
     91c:	b083      	sub	sp, #12
     91e:	af00      	add	r7, sp, #0
     920:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     922:	687b      	ldr	r3, [r7, #4]
     924:	691b      	ldr	r3, [r3, #16]
     926:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     92a:	687b      	ldr	r3, [r7, #4]
     92c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     92e:	bf00      	nop
     930:	370c      	adds	r7, #12
     932:	46bd      	mov	sp, r7
     934:	f85d 7b04 	ldr.w	r7, [sp], #4
     938:	4770      	bx	lr

0000093a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     93a:	b480      	push	{r7}
     93c:	b083      	sub	sp, #12
     93e:	af00      	add	r7, sp, #0
     940:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     942:	687b      	ldr	r3, [r7, #4]
     944:	691b      	ldr	r3, [r3, #16]
     946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     94a:	687b      	ldr	r3, [r7, #4]
     94c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     94e:	bf00      	nop
     950:	370c      	adds	r7, #12
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr

0000095a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     95a:	b480      	push	{r7}
     95c:	b083      	sub	sp, #12
     95e:	af00      	add	r7, sp, #0
     960:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     962:	687b      	ldr	r3, [r7, #4]
     964:	695b      	ldr	r3, [r3, #20]
     966:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     96e:	bf00      	nop
     970:	370c      	adds	r7, #12
     972:	46bd      	mov	sp, r7
     974:	f85d 7b04 	ldr.w	r7, [sp], #4
     978:	4770      	bx	lr

0000097a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     97a:	b480      	push	{r7}
     97c:	b083      	sub	sp, #12
     97e:	af00      	add	r7, sp, #0
     980:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     982:	687b      	ldr	r3, [r7, #4]
     984:	695b      	ldr	r3, [r3, #20]
     986:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     98e:	bf00      	nop
     990:	370c      	adds	r7, #12
     992:	46bd      	mov	sp, r7
     994:	f85d 7b04 	ldr.w	r7, [sp], #4
     998:	4770      	bx	lr

0000099a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     99a:	b480      	push	{r7}
     99c:	b083      	sub	sp, #12
     99e:	af00      	add	r7, sp, #0
     9a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	695b      	ldr	r3, [r3, #20]
     9a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9aa:	687b      	ldr	r3, [r7, #4]
     9ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ae:	bf00      	nop
     9b0:	370c      	adds	r7, #12
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr

000009ba <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     9ba:	b480      	push	{r7}
     9bc:	b083      	sub	sp, #12
     9be:	af00      	add	r7, sp, #0
     9c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	695b      	ldr	r3, [r3, #20]
     9c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ce:	bf00      	nop
     9d0:	370c      	adds	r7, #12
     9d2:	46bd      	mov	sp, r7
     9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d8:	4770      	bx	lr

000009da <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     9da:	b480      	push	{r7}
     9dc:	b083      	sub	sp, #12
     9de:	af00      	add	r7, sp, #0
     9e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	695b      	ldr	r3, [r3, #20]
     9e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ee:	bf00      	nop
     9f0:	370c      	adds	r7, #12
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr

000009fa <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     9fa:	b480      	push	{r7}
     9fc:	b083      	sub	sp, #12
     9fe:	af00      	add	r7, sp, #0
     a00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	699b      	ldr	r3, [r3, #24]
     a06:	f043 0201 	orr.w	r2, r3, #1
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a0e:	bf00      	nop
     a10:	370c      	adds	r7, #12
     a12:	46bd      	mov	sp, r7
     a14:	f85d 7b04 	ldr.w	r7, [sp], #4
     a18:	4770      	bx	lr

00000a1a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     a1a:	b480      	push	{r7}
     a1c:	b083      	sub	sp, #12
     a1e:	af00      	add	r7, sp, #0
     a20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     a22:	687b      	ldr	r3, [r7, #4]
     a24:	699b      	ldr	r3, [r3, #24]
     a26:	f043 0202 	orr.w	r2, r3, #2
     a2a:	687b      	ldr	r3, [r7, #4]
     a2c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a2e:	bf00      	nop
     a30:	370c      	adds	r7, #12
     a32:	46bd      	mov	sp, r7
     a34:	f85d 7b04 	ldr.w	r7, [sp], #4
     a38:	4770      	bx	lr

00000a3a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     a3a:	b480      	push	{r7}
     a3c:	b083      	sub	sp, #12
     a3e:	af00      	add	r7, sp, #0
     a40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	699b      	ldr	r3, [r3, #24]
     a46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     a4a:	687b      	ldr	r3, [r7, #4]
     a4c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a4e:	bf00      	nop
     a50:	370c      	adds	r7, #12
     a52:	46bd      	mov	sp, r7
     a54:	f85d 7b04 	ldr.w	r7, [sp], #4
     a58:	4770      	bx	lr

00000a5a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     a5a:	b480      	push	{r7}
     a5c:	b083      	sub	sp, #12
     a5e:	af00      	add	r7, sp, #0
     a60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	699b      	ldr	r3, [r3, #24]
     a66:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a6e:	bf00      	nop
     a70:	370c      	adds	r7, #12
     a72:	46bd      	mov	sp, r7
     a74:	f85d 7b04 	ldr.w	r7, [sp], #4
     a78:	4770      	bx	lr

00000a7a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     a7a:	b480      	push	{r7}
     a7c:	b083      	sub	sp, #12
     a7e:	af00      	add	r7, sp, #0
     a80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	699b      	ldr	r3, [r3, #24]
     a86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a8e:	bf00      	nop
     a90:	370c      	adds	r7, #12
     a92:	46bd      	mov	sp, r7
     a94:	f85d 7b04 	ldr.w	r7, [sp], #4
     a98:	4770      	bx	lr

00000a9a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     a9a:	b480      	push	{r7}
     a9c:	b083      	sub	sp, #12
     a9e:	af00      	add	r7, sp, #0
     aa0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	699b      	ldr	r3, [r3, #24]
     aa6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aae:	bf00      	nop
     ab0:	370c      	adds	r7, #12
     ab2:	46bd      	mov	sp, r7
     ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab8:	4770      	bx	lr

00000aba <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     aba:	b480      	push	{r7}
     abc:	b083      	sub	sp, #12
     abe:	af00      	add	r7, sp, #0
     ac0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	69db      	ldr	r3, [r3, #28]
     ac6:	f043 0208 	orr.w	r2, r3, #8
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ace:	bf00      	nop
     ad0:	370c      	adds	r7, #12
     ad2:	46bd      	mov	sp, r7
     ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ad8:	4770      	bx	lr

00000ada <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     ada:	b480      	push	{r7}
     adc:	b083      	sub	sp, #12
     ade:	af00      	add	r7, sp, #0
     ae0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	69db      	ldr	r3, [r3, #28]
     ae6:	f043 0220 	orr.w	r2, r3, #32
     aea:	687b      	ldr	r3, [r7, #4]
     aec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aee:	bf00      	nop
     af0:	370c      	adds	r7, #12
     af2:	46bd      	mov	sp, r7
     af4:	f85d 7b04 	ldr.w	r7, [sp], #4
     af8:	4770      	bx	lr

00000afa <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     afa:	b480      	push	{r7}
     afc:	b083      	sub	sp, #12
     afe:	af00      	add	r7, sp, #0
     b00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	69db      	ldr	r3, [r3, #28]
     b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b0e:	bf00      	nop
     b10:	370c      	adds	r7, #12
     b12:	46bd      	mov	sp, r7
     b14:	f85d 7b04 	ldr.w	r7, [sp], #4
     b18:	4770      	bx	lr

00000b1a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     b1a:	b480      	push	{r7}
     b1c:	b083      	sub	sp, #12
     b1e:	af00      	add	r7, sp, #0
     b20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	69db      	ldr	r3, [r3, #28]
     b26:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b2e:	bf00      	nop
     b30:	370c      	adds	r7, #12
     b32:	46bd      	mov	sp, r7
     b34:	f85d 7b04 	ldr.w	r7, [sp], #4
     b38:	4770      	bx	lr

00000b3a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     b3a:	b480      	push	{r7}
     b3c:	b083      	sub	sp, #12
     b3e:	af00      	add	r7, sp, #0
     b40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	6a1b      	ldr	r3, [r3, #32]
     b46:	f043 0201 	orr.w	r2, r3, #1
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b4e:	bf00      	nop
     b50:	370c      	adds	r7, #12
     b52:	46bd      	mov	sp, r7
     b54:	f85d 7b04 	ldr.w	r7, [sp], #4
     b58:	4770      	bx	lr

00000b5a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     b5a:	b480      	push	{r7}
     b5c:	b083      	sub	sp, #12
     b5e:	af00      	add	r7, sp, #0
     b60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	6a1b      	ldr	r3, [r3, #32]
     b66:	f043 0202 	orr.w	r2, r3, #2
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b6e:	bf00      	nop
     b70:	370c      	adds	r7, #12
     b72:	46bd      	mov	sp, r7
     b74:	f85d 7b04 	ldr.w	r7, [sp], #4
     b78:	4770      	bx	lr

00000b7a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     b7a:	b480      	push	{r7}
     b7c:	b083      	sub	sp, #12
     b7e:	af00      	add	r7, sp, #0
     b80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	6a1b      	ldr	r3, [r3, #32]
     b86:	f043 0204 	orr.w	r2, r3, #4
     b8a:	687b      	ldr	r3, [r7, #4]
     b8c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b8e:	bf00      	nop
     b90:	370c      	adds	r7, #12
     b92:	46bd      	mov	sp, r7
     b94:	f85d 7b04 	ldr.w	r7, [sp], #4
     b98:	4770      	bx	lr

00000b9a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     b9a:	b480      	push	{r7}
     b9c:	b083      	sub	sp, #12
     b9e:	af00      	add	r7, sp, #0
     ba0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     ba2:	687b      	ldr	r3, [r7, #4]
     ba4:	6a1b      	ldr	r3, [r3, #32]
     ba6:	f043 0208 	orr.w	r2, r3, #8
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bae:	bf00      	nop
     bb0:	370c      	adds	r7, #12
     bb2:	46bd      	mov	sp, r7
     bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb8:	4770      	bx	lr

00000bba <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     bba:	b480      	push	{r7}
     bbc:	b083      	sub	sp, #12
     bbe:	af00      	add	r7, sp, #0
     bc0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	6a1b      	ldr	r3, [r3, #32]
     bc6:	f043 0220 	orr.w	r2, r3, #32
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bce:	bf00      	nop
     bd0:	370c      	adds	r7, #12
     bd2:	46bd      	mov	sp, r7
     bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
     bd8:	4770      	bx	lr

00000bda <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     bda:	b480      	push	{r7}
     bdc:	b083      	sub	sp, #12
     bde:	af00      	add	r7, sp, #0
     be0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     be2:	687b      	ldr	r3, [r7, #4]
     be4:	6a1b      	ldr	r3, [r3, #32]
     be6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     bea:	687b      	ldr	r3, [r7, #4]
     bec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bee:	bf00      	nop
     bf0:	370c      	adds	r7, #12
     bf2:	46bd      	mov	sp, r7
     bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf8:	4770      	bx	lr

00000bfa <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     bfa:	b480      	push	{r7}
     bfc:	b085      	sub	sp, #20
     bfe:	af00      	add	r7, sp, #0
     c00:	60f8      	str	r0, [r7, #12]
     c02:	460b      	mov	r3, r1
     c04:	607a      	str	r2, [r7, #4]
     c06:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c08:	7afb      	ldrb	r3, [r7, #11]
     c0a:	68fa      	ldr	r2, [r7, #12]
     c0c:	01db      	lsls	r3, r3, #7
     c0e:	4413      	add	r3, r2
     c10:	3308      	adds	r3, #8
     c12:	687a      	ldr	r2, [r7, #4]
     c14:	601a      	str	r2, [r3, #0]
}
     c16:	bf00      	nop
     c18:	3714      	adds	r7, #20
     c1a:	46bd      	mov	sp, r7
     c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c20:	4770      	bx	lr

00000c22 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     c22:	b480      	push	{r7}
     c24:	b085      	sub	sp, #20
     c26:	af00      	add	r7, sp, #0
     c28:	60f8      	str	r0, [r7, #12]
     c2a:	460b      	mov	r3, r1
     c2c:	607a      	str	r2, [r7, #4]
     c2e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c30:	7afb      	ldrb	r3, [r7, #11]
     c32:	68fa      	ldr	r2, [r7, #12]
     c34:	01db      	lsls	r3, r3, #7
     c36:	4413      	add	r3, r2
     c38:	3304      	adds	r3, #4
     c3a:	687a      	ldr	r2, [r7, #4]
     c3c:	601a      	str	r2, [r3, #0]
}
     c3e:	bf00      	nop
     c40:	3714      	adds	r7, #20
     c42:	46bd      	mov	sp, r7
     c44:	f85d 7b04 	ldr.w	r7, [sp], #4
     c48:	4770      	bx	lr

00000c4a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     c4a:	b480      	push	{r7}
     c4c:	b085      	sub	sp, #20
     c4e:	af00      	add	r7, sp, #0
     c50:	60f8      	str	r0, [r7, #12]
     c52:	460b      	mov	r3, r1
     c54:	607a      	str	r2, [r7, #4]
     c56:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c58:	7afb      	ldrb	r3, [r7, #11]
     c5a:	68fa      	ldr	r2, [r7, #12]
     c5c:	01db      	lsls	r3, r3, #7
     c5e:	4413      	add	r3, r2
     c60:	3318      	adds	r3, #24
     c62:	687a      	ldr	r2, [r7, #4]
     c64:	601a      	str	r2, [r3, #0]
}
     c66:	bf00      	nop
     c68:	3714      	adds	r7, #20
     c6a:	46bd      	mov	sp, r7
     c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c70:	4770      	bx	lr

00000c72 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     c72:	b480      	push	{r7}
     c74:	b085      	sub	sp, #20
     c76:	af00      	add	r7, sp, #0
     c78:	60f8      	str	r0, [r7, #12]
     c7a:	460b      	mov	r3, r1
     c7c:	607a      	str	r2, [r7, #4]
     c7e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c80:	7afb      	ldrb	r3, [r7, #11]
     c82:	68fa      	ldr	r2, [r7, #12]
     c84:	01db      	lsls	r3, r3, #7
     c86:	4413      	add	r3, r2
     c88:	3314      	adds	r3, #20
     c8a:	687a      	ldr	r2, [r7, #4]
     c8c:	601a      	str	r2, [r3, #0]
}
     c8e:	bf00      	nop
     c90:	3714      	adds	r7, #20
     c92:	46bd      	mov	sp, r7
     c94:	f85d 7b04 	ldr.w	r7, [sp], #4
     c98:	4770      	bx	lr

00000c9a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     c9a:	b480      	push	{r7}
     c9c:	b085      	sub	sp, #20
     c9e:	af00      	add	r7, sp, #0
     ca0:	6078      	str	r0, [r7, #4]
     ca2:	4608      	mov	r0, r1
     ca4:	4611      	mov	r1, r2
     ca6:	461a      	mov	r2, r3
     ca8:	4603      	mov	r3, r0
     caa:	70fb      	strb	r3, [r7, #3]
     cac:	460b      	mov	r3, r1
     cae:	70bb      	strb	r3, [r7, #2]
     cb0:	4613      	mov	r3, r2
     cb2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cb4:	78fa      	ldrb	r2, [r7, #3]
     cb6:	78bb      	ldrb	r3, [r7, #2]
     cb8:	6879      	ldr	r1, [r7, #4]
     cba:	01d2      	lsls	r2, r2, #7
     cbc:	440a      	add	r2, r1
     cbe:	4413      	add	r3, r2
     cc0:	3330      	adds	r3, #48	; 0x30
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     cc6:	7bfb      	ldrb	r3, [r7, #15]
     cc8:	f023 030f 	bic.w	r3, r3, #15
     ccc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     cce:	787b      	ldrb	r3, [r7, #1]
     cd0:	f003 030f 	and.w	r3, r3, #15
     cd4:	b2da      	uxtb	r2, r3
     cd6:	7bfb      	ldrb	r3, [r7, #15]
     cd8:	4313      	orrs	r3, r2
     cda:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cdc:	78fa      	ldrb	r2, [r7, #3]
     cde:	78bb      	ldrb	r3, [r7, #2]
     ce0:	6879      	ldr	r1, [r7, #4]
     ce2:	01d2      	lsls	r2, r2, #7
     ce4:	440a      	add	r2, r1
     ce6:	4413      	add	r3, r2
     ce8:	3330      	adds	r3, #48	; 0x30
     cea:	7bfa      	ldrb	r2, [r7, #15]
     cec:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     cee:	bf00      	nop
     cf0:	3714      	adds	r7, #20
     cf2:	46bd      	mov	sp, r7
     cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
     cf8:	4770      	bx	lr

00000cfa <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     cfa:	b480      	push	{r7}
     cfc:	b085      	sub	sp, #20
     cfe:	af00      	add	r7, sp, #0
     d00:	6078      	str	r0, [r7, #4]
     d02:	4608      	mov	r0, r1
     d04:	4611      	mov	r1, r2
     d06:	461a      	mov	r2, r3
     d08:	4603      	mov	r3, r0
     d0a:	70fb      	strb	r3, [r7, #3]
     d0c:	460b      	mov	r3, r1
     d0e:	70bb      	strb	r3, [r7, #2]
     d10:	4613      	mov	r3, r2
     d12:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d14:	78fa      	ldrb	r2, [r7, #3]
     d16:	78bb      	ldrb	r3, [r7, #2]
     d18:	6879      	ldr	r1, [r7, #4]
     d1a:	01d2      	lsls	r2, r2, #7
     d1c:	440a      	add	r2, r1
     d1e:	4413      	add	r3, r2
     d20:	3330      	adds	r3, #48	; 0x30
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d26:	7bfb      	ldrb	r3, [r7, #15]
     d28:	f003 030f 	and.w	r3, r3, #15
     d2c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     d2e:	787b      	ldrb	r3, [r7, #1]
     d30:	011b      	lsls	r3, r3, #4
     d32:	b2da      	uxtb	r2, r3
     d34:	7bfb      	ldrb	r3, [r7, #15]
     d36:	4313      	orrs	r3, r2
     d38:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d3a:	78fa      	ldrb	r2, [r7, #3]
     d3c:	78bb      	ldrb	r3, [r7, #2]
     d3e:	6879      	ldr	r1, [r7, #4]
     d40:	01d2      	lsls	r2, r2, #7
     d42:	440a      	add	r2, r1
     d44:	4413      	add	r3, r2
     d46:	3330      	adds	r3, #48	; 0x30
     d48:	7bfa      	ldrb	r2, [r7, #15]
     d4a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d4c:	bf00      	nop
     d4e:	3714      	adds	r7, #20
     d50:	46bd      	mov	sp, r7
     d52:	f85d 7b04 	ldr.w	r7, [sp], #4
     d56:	4770      	bx	lr

00000d58 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     d58:	b480      	push	{r7}
     d5a:	b085      	sub	sp, #20
     d5c:	af00      	add	r7, sp, #0
     d5e:	6078      	str	r0, [r7, #4]
     d60:	4608      	mov	r0, r1
     d62:	4611      	mov	r1, r2
     d64:	461a      	mov	r2, r3
     d66:	4603      	mov	r3, r0
     d68:	70fb      	strb	r3, [r7, #3]
     d6a:	460b      	mov	r3, r1
     d6c:	70bb      	strb	r3, [r7, #2]
     d6e:	4613      	mov	r3, r2
     d70:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	78fa      	ldrb	r2, [r7, #3]
     d74:	78bb      	ldrb	r3, [r7, #2]
     d76:	6879      	ldr	r1, [r7, #4]
     d78:	01d2      	lsls	r2, r2, #7
     d7a:	440a      	add	r2, r1
     d7c:	4413      	add	r3, r2
     d7e:	3340      	adds	r3, #64	; 0x40
     d80:	781b      	ldrb	r3, [r3, #0]
     d82:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d84:	7bfb      	ldrb	r3, [r7, #15]
     d86:	f023 0301 	bic.w	r3, r3, #1
     d8a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d8c:	787a      	ldrb	r2, [r7, #1]
     d8e:	7bfb      	ldrb	r3, [r7, #15]
     d90:	4313      	orrs	r3, r2
     d92:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d94:	78fa      	ldrb	r2, [r7, #3]
     d96:	78bb      	ldrb	r3, [r7, #2]
     d98:	6879      	ldr	r1, [r7, #4]
     d9a:	01d2      	lsls	r2, r2, #7
     d9c:	440a      	add	r2, r1
     d9e:	4413      	add	r3, r2
     da0:	3340      	adds	r3, #64	; 0x40
     da2:	7bfa      	ldrb	r2, [r7, #15]
     da4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     da6:	bf00      	nop
     da8:	3714      	adds	r7, #20
     daa:	46bd      	mov	sp, r7
     dac:	f85d 7b04 	ldr.w	r7, [sp], #4
     db0:	4770      	bx	lr

00000db2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     db2:	b490      	push	{r4, r7}
     db4:	b082      	sub	sp, #8
     db6:	af00      	add	r7, sp, #0
     db8:	6078      	str	r0, [r7, #4]
     dba:	460b      	mov	r3, r1
     dbc:	70fb      	strb	r3, [r7, #3]
     dbe:	4613      	mov	r3, r2
     dc0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     dc2:	78fa      	ldrb	r2, [r7, #3]
     dc4:	78bb      	ldrb	r3, [r7, #2]
     dc6:	78f8      	ldrb	r0, [r7, #3]
     dc8:	78b9      	ldrb	r1, [r7, #2]
     dca:	687c      	ldr	r4, [r7, #4]
     dcc:	01c0      	lsls	r0, r0, #7
     dce:	4420      	add	r0, r4
     dd0:	4401      	add	r1, r0
     dd2:	3140      	adds	r1, #64	; 0x40
     dd4:	7809      	ldrb	r1, [r1, #0]
     dd6:	b2c9      	uxtb	r1, r1
     dd8:	f041 0104 	orr.w	r1, r1, #4
     ddc:	b2c8      	uxtb	r0, r1
     dde:	6879      	ldr	r1, [r7, #4]
     de0:	01d2      	lsls	r2, r2, #7
     de2:	440a      	add	r2, r1
     de4:	4413      	add	r3, r2
     de6:	3340      	adds	r3, #64	; 0x40
     de8:	4602      	mov	r2, r0
     dea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     dec:	bf00      	nop
     dee:	3708      	adds	r7, #8
     df0:	46bd      	mov	sp, r7
     df2:	bc90      	pop	{r4, r7}
     df4:	4770      	bx	lr

00000df6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     df6:	b490      	push	{r4, r7}
     df8:	b082      	sub	sp, #8
     dfa:	af00      	add	r7, sp, #0
     dfc:	6078      	str	r0, [r7, #4]
     dfe:	460b      	mov	r3, r1
     e00:	70fb      	strb	r3, [r7, #3]
     e02:	4613      	mov	r3, r2
     e04:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e06:	78fa      	ldrb	r2, [r7, #3]
     e08:	78bb      	ldrb	r3, [r7, #2]
     e0a:	78f8      	ldrb	r0, [r7, #3]
     e0c:	78b9      	ldrb	r1, [r7, #2]
     e0e:	687c      	ldr	r4, [r7, #4]
     e10:	01c0      	lsls	r0, r0, #7
     e12:	4420      	add	r0, r4
     e14:	4401      	add	r1, r0
     e16:	3140      	adds	r1, #64	; 0x40
     e18:	7809      	ldrb	r1, [r1, #0]
     e1a:	b2c9      	uxtb	r1, r1
     e1c:	f021 0104 	bic.w	r1, r1, #4
     e20:	b2c8      	uxtb	r0, r1
     e22:	6879      	ldr	r1, [r7, #4]
     e24:	01d2      	lsls	r2, r2, #7
     e26:	440a      	add	r2, r1
     e28:	4413      	add	r3, r2
     e2a:	3340      	adds	r3, #64	; 0x40
     e2c:	4602      	mov	r2, r0
     e2e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e30:	bf00      	nop
     e32:	3708      	adds	r7, #8
     e34:	46bd      	mov	sp, r7
     e36:	bc90      	pop	{r4, r7}
     e38:	4770      	bx	lr

00000e3a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     e3a:	b480      	push	{r7}
     e3c:	b085      	sub	sp, #20
     e3e:	af00      	add	r7, sp, #0
     e40:	60f8      	str	r0, [r7, #12]
     e42:	460b      	mov	r3, r1
     e44:	607a      	str	r2, [r7, #4]
     e46:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e48:	7afb      	ldrb	r3, [r7, #11]
     e4a:	68fa      	ldr	r2, [r7, #12]
     e4c:	01db      	lsls	r3, r3, #7
     e4e:	4413      	add	r3, r2
     e50:	3328      	adds	r3, #40	; 0x28
     e52:	687a      	ldr	r2, [r7, #4]
     e54:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e56:	bf00      	nop
     e58:	3714      	adds	r7, #20
     e5a:	46bd      	mov	sp, r7
     e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e60:	4770      	bx	lr
	...

00000e64 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     e64:	b580      	push	{r7, lr}
     e66:	b082      	sub	sp, #8
     e68:	af00      	add	r7, sp, #0
     e6a:	4603      	mov	r3, r0
     e6c:	6039      	str	r1, [r7, #0]
     e6e:	71fb      	strb	r3, [r7, #7]
     e70:	4613      	mov	r3, r2
     e72:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     e74:	79bb      	ldrb	r3, [r7, #6]
     e76:	2b01      	cmp	r3, #1
     e78:	d01c      	beq.n	eb4 <_gpio_set_direction+0x50>
     e7a:	2b02      	cmp	r3, #2
     e7c:	d037      	beq.n	eee <_gpio_set_direction+0x8a>
     e7e:	2b00      	cmp	r3, #0
     e80:	d14e      	bne.n	f20 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     e82:	79fb      	ldrb	r3, [r7, #7]
     e84:	683a      	ldr	r2, [r7, #0]
     e86:	4619      	mov	r1, r3
     e88:	482a      	ldr	r0, [pc, #168]	; (f34 <_gpio_set_direction+0xd0>)
     e8a:	4b2b      	ldr	r3, [pc, #172]	; (f38 <_gpio_set_direction+0xd4>)
     e8c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     e8e:	683b      	ldr	r3, [r7, #0]
     e90:	b29b      	uxth	r3, r3
     e92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     e96:	79fb      	ldrb	r3, [r7, #7]
     e98:	4619      	mov	r1, r3
     e9a:	4826      	ldr	r0, [pc, #152]	; (f34 <_gpio_set_direction+0xd0>)
     e9c:	4b27      	ldr	r3, [pc, #156]	; (f3c <_gpio_set_direction+0xd8>)
     e9e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     ea0:	683b      	ldr	r3, [r7, #0]
     ea2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     ea4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     ea8:	79fb      	ldrb	r3, [r7, #7]
     eaa:	4619      	mov	r1, r3
     eac:	4821      	ldr	r0, [pc, #132]	; (f34 <_gpio_set_direction+0xd0>)
     eae:	4b23      	ldr	r3, [pc, #140]	; (f3c <_gpio_set_direction+0xd8>)
     eb0:	4798      	blx	r3
		break;
     eb2:	e03a      	b.n	f2a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     eb4:	79fb      	ldrb	r3, [r7, #7]
     eb6:	683a      	ldr	r2, [r7, #0]
     eb8:	4619      	mov	r1, r3
     eba:	481e      	ldr	r0, [pc, #120]	; (f34 <_gpio_set_direction+0xd0>)
     ebc:	4b1e      	ldr	r3, [pc, #120]	; (f38 <_gpio_set_direction+0xd4>)
     ebe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     ec0:	683b      	ldr	r3, [r7, #0]
     ec2:	b29b      	uxth	r3, r3
     ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     ecc:	79f9      	ldrb	r1, [r7, #7]
     ece:	461a      	mov	r2, r3
     ed0:	4818      	ldr	r0, [pc, #96]	; (f34 <_gpio_set_direction+0xd0>)
     ed2:	4b1a      	ldr	r3, [pc, #104]	; (f3c <_gpio_set_direction+0xd8>)
     ed4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     ed6:	683b      	ldr	r3, [r7, #0]
     ed8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     eda:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     ee2:	79f9      	ldrb	r1, [r7, #7]
     ee4:	461a      	mov	r2, r3
     ee6:	4813      	ldr	r0, [pc, #76]	; (f34 <_gpio_set_direction+0xd0>)
     ee8:	4b14      	ldr	r3, [pc, #80]	; (f3c <_gpio_set_direction+0xd8>)
     eea:	4798      	blx	r3
		break;
     eec:	e01d      	b.n	f2a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     eee:	79fb      	ldrb	r3, [r7, #7]
     ef0:	683a      	ldr	r2, [r7, #0]
     ef2:	4619      	mov	r1, r3
     ef4:	480f      	ldr	r0, [pc, #60]	; (f34 <_gpio_set_direction+0xd0>)
     ef6:	4b12      	ldr	r3, [pc, #72]	; (f40 <_gpio_set_direction+0xdc>)
     ef8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     efa:	683b      	ldr	r3, [r7, #0]
     efc:	b29b      	uxth	r3, r3
     efe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     f02:	79fb      	ldrb	r3, [r7, #7]
     f04:	4619      	mov	r1, r3
     f06:	480b      	ldr	r0, [pc, #44]	; (f34 <_gpio_set_direction+0xd0>)
     f08:	4b0c      	ldr	r3, [pc, #48]	; (f3c <_gpio_set_direction+0xd8>)
     f0a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     f0c:	683b      	ldr	r3, [r7, #0]
     f0e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     f10:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     f14:	79fb      	ldrb	r3, [r7, #7]
     f16:	4619      	mov	r1, r3
     f18:	4806      	ldr	r0, [pc, #24]	; (f34 <_gpio_set_direction+0xd0>)
     f1a:	4b08      	ldr	r3, [pc, #32]	; (f3c <_gpio_set_direction+0xd8>)
     f1c:	4798      	blx	r3
		break;
     f1e:	e004      	b.n	f2a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     f20:	2246      	movs	r2, #70	; 0x46
     f22:	4908      	ldr	r1, [pc, #32]	; (f44 <_gpio_set_direction+0xe0>)
     f24:	2000      	movs	r0, #0
     f26:	4b08      	ldr	r3, [pc, #32]	; (f48 <_gpio_set_direction+0xe4>)
     f28:	4798      	blx	r3
	}
}
     f2a:	bf00      	nop
     f2c:	3708      	adds	r7, #8
     f2e:	46bd      	mov	sp, r7
     f30:	bd80      	pop	{r7, pc}
     f32:	bf00      	nop
     f34:	41008000 	.word	0x41008000
     f38:	00000c23 	.word	0x00000c23
     f3c:	00000e3b 	.word	0x00000e3b
     f40:	00000bfb 	.word	0x00000bfb
     f44:	000106f8 	.word	0x000106f8
     f48:	00003825 	.word	0x00003825

00000f4c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     f4c:	b580      	push	{r7, lr}
     f4e:	b082      	sub	sp, #8
     f50:	af00      	add	r7, sp, #0
     f52:	4603      	mov	r3, r0
     f54:	6039      	str	r1, [r7, #0]
     f56:	71fb      	strb	r3, [r7, #7]
     f58:	4613      	mov	r3, r2
     f5a:	71bb      	strb	r3, [r7, #6]
	if (level) {
     f5c:	79bb      	ldrb	r3, [r7, #6]
     f5e:	2b00      	cmp	r3, #0
     f60:	d006      	beq.n	f70 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     f62:	79fb      	ldrb	r3, [r7, #7]
     f64:	683a      	ldr	r2, [r7, #0]
     f66:	4619      	mov	r1, r3
     f68:	4806      	ldr	r0, [pc, #24]	; (f84 <_gpio_set_level+0x38>)
     f6a:	4b07      	ldr	r3, [pc, #28]	; (f88 <_gpio_set_level+0x3c>)
     f6c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     f6e:	e005      	b.n	f7c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     f70:	79fb      	ldrb	r3, [r7, #7]
     f72:	683a      	ldr	r2, [r7, #0]
     f74:	4619      	mov	r1, r3
     f76:	4803      	ldr	r0, [pc, #12]	; (f84 <_gpio_set_level+0x38>)
     f78:	4b04      	ldr	r3, [pc, #16]	; (f8c <_gpio_set_level+0x40>)
     f7a:	4798      	blx	r3
}
     f7c:	bf00      	nop
     f7e:	3708      	adds	r7, #8
     f80:	46bd      	mov	sp, r7
     f82:	bd80      	pop	{r7, pc}
     f84:	41008000 	.word	0x41008000
     f88:	00000c4b 	.word	0x00000c4b
     f8c:	00000c73 	.word	0x00000c73

00000f90 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     f90:	b580      	push	{r7, lr}
     f92:	b082      	sub	sp, #8
     f94:	af00      	add	r7, sp, #0
     f96:	4603      	mov	r3, r0
     f98:	71fb      	strb	r3, [r7, #7]
     f9a:	460b      	mov	r3, r1
     f9c:	71bb      	strb	r3, [r7, #6]
     f9e:	4613      	mov	r3, r2
     fa0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     fa2:	797b      	ldrb	r3, [r7, #5]
     fa4:	2b01      	cmp	r3, #1
     fa6:	d00a      	beq.n	fbe <_gpio_set_pin_pull_mode+0x2e>
     fa8:	2b02      	cmp	r3, #2
     faa:	d01f      	beq.n	fec <_gpio_set_pin_pull_mode+0x5c>
     fac:	2b00      	cmp	r3, #0
     fae:	d134      	bne.n	101a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     fb0:	79ba      	ldrb	r2, [r7, #6]
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	4619      	mov	r1, r3
     fb6:	481e      	ldr	r0, [pc, #120]	; (1030 <_gpio_set_pin_pull_mode+0xa0>)
     fb8:	4b1e      	ldr	r3, [pc, #120]	; (1034 <_gpio_set_pin_pull_mode+0xa4>)
     fba:	4798      	blx	r3
		break;
     fbc:	e033      	b.n	1026 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     fbe:	79bb      	ldrb	r3, [r7, #6]
     fc0:	2201      	movs	r2, #1
     fc2:	409a      	lsls	r2, r3
     fc4:	79fb      	ldrb	r3, [r7, #7]
     fc6:	4619      	mov	r1, r3
     fc8:	4819      	ldr	r0, [pc, #100]	; (1030 <_gpio_set_pin_pull_mode+0xa0>)
     fca:	4b1b      	ldr	r3, [pc, #108]	; (1038 <_gpio_set_pin_pull_mode+0xa8>)
     fcc:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     fce:	79ba      	ldrb	r2, [r7, #6]
     fd0:	79fb      	ldrb	r3, [r7, #7]
     fd2:	4619      	mov	r1, r3
     fd4:	4816      	ldr	r0, [pc, #88]	; (1030 <_gpio_set_pin_pull_mode+0xa0>)
     fd6:	4b19      	ldr	r3, [pc, #100]	; (103c <_gpio_set_pin_pull_mode+0xac>)
     fd8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     fda:	79bb      	ldrb	r3, [r7, #6]
     fdc:	2201      	movs	r2, #1
     fde:	409a      	lsls	r2, r3
     fe0:	79fb      	ldrb	r3, [r7, #7]
     fe2:	4619      	mov	r1, r3
     fe4:	4812      	ldr	r0, [pc, #72]	; (1030 <_gpio_set_pin_pull_mode+0xa0>)
     fe6:	4b16      	ldr	r3, [pc, #88]	; (1040 <_gpio_set_pin_pull_mode+0xb0>)
     fe8:	4798      	blx	r3
		break;
     fea:	e01c      	b.n	1026 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     fec:	79bb      	ldrb	r3, [r7, #6]
     fee:	2201      	movs	r2, #1
     ff0:	409a      	lsls	r2, r3
     ff2:	79fb      	ldrb	r3, [r7, #7]
     ff4:	4619      	mov	r1, r3
     ff6:	480e      	ldr	r0, [pc, #56]	; (1030 <_gpio_set_pin_pull_mode+0xa0>)
     ff8:	4b0f      	ldr	r3, [pc, #60]	; (1038 <_gpio_set_pin_pull_mode+0xa8>)
     ffa:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     ffc:	79ba      	ldrb	r2, [r7, #6]
     ffe:	79fb      	ldrb	r3, [r7, #7]
    1000:	4619      	mov	r1, r3
    1002:	480b      	ldr	r0, [pc, #44]	; (1030 <_gpio_set_pin_pull_mode+0xa0>)
    1004:	4b0d      	ldr	r3, [pc, #52]	; (103c <_gpio_set_pin_pull_mode+0xac>)
    1006:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1008:	79bb      	ldrb	r3, [r7, #6]
    100a:	2201      	movs	r2, #1
    100c:	409a      	lsls	r2, r3
    100e:	79fb      	ldrb	r3, [r7, #7]
    1010:	4619      	mov	r1, r3
    1012:	4807      	ldr	r0, [pc, #28]	; (1030 <_gpio_set_pin_pull_mode+0xa0>)
    1014:	4b0b      	ldr	r3, [pc, #44]	; (1044 <_gpio_set_pin_pull_mode+0xb4>)
    1016:	4798      	blx	r3
		break;
    1018:	e005      	b.n	1026 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    101a:	2289      	movs	r2, #137	; 0x89
    101c:	490a      	ldr	r1, [pc, #40]	; (1048 <_gpio_set_pin_pull_mode+0xb8>)
    101e:	2000      	movs	r0, #0
    1020:	4b0a      	ldr	r3, [pc, #40]	; (104c <_gpio_set_pin_pull_mode+0xbc>)
    1022:	4798      	blx	r3
		break;
    1024:	bf00      	nop
	}
}
    1026:	bf00      	nop
    1028:	3708      	adds	r7, #8
    102a:	46bd      	mov	sp, r7
    102c:	bd80      	pop	{r7, pc}
    102e:	bf00      	nop
    1030:	41008000 	.word	0x41008000
    1034:	00000df7 	.word	0x00000df7
    1038:	00000c23 	.word	0x00000c23
    103c:	00000db3 	.word	0x00000db3
    1040:	00000c4b 	.word	0x00000c4b
    1044:	00000c73 	.word	0x00000c73
    1048:	000106f8 	.word	0x000106f8
    104c:	00003825 	.word	0x00003825

00001050 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1050:	b590      	push	{r4, r7, lr}
    1052:	b085      	sub	sp, #20
    1054:	af00      	add	r7, sp, #0
    1056:	6078      	str	r0, [r7, #4]
    1058:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	095b      	lsrs	r3, r3, #5
    105e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	b2db      	uxtb	r3, r3
    1064:	f003 031f 	and.w	r3, r3, #31
    1068:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    106a:	683b      	ldr	r3, [r7, #0]
    106c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1070:	d106      	bne.n	1080 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1072:	7bba      	ldrb	r2, [r7, #14]
    1074:	7bf9      	ldrb	r1, [r7, #15]
    1076:	2300      	movs	r3, #0
    1078:	4812      	ldr	r0, [pc, #72]	; (10c4 <_gpio_set_pin_function+0x74>)
    107a:	4c13      	ldr	r4, [pc, #76]	; (10c8 <_gpio_set_pin_function+0x78>)
    107c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    107e:	e01d      	b.n	10bc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1080:	7bba      	ldrb	r2, [r7, #14]
    1082:	7bf9      	ldrb	r1, [r7, #15]
    1084:	2301      	movs	r3, #1
    1086:	480f      	ldr	r0, [pc, #60]	; (10c4 <_gpio_set_pin_function+0x74>)
    1088:	4c0f      	ldr	r4, [pc, #60]	; (10c8 <_gpio_set_pin_function+0x78>)
    108a:	47a0      	blx	r4
		if (pin & 1) {
    108c:	7bbb      	ldrb	r3, [r7, #14]
    108e:	f003 0301 	and.w	r3, r3, #1
    1092:	2b00      	cmp	r3, #0
    1094:	d009      	beq.n	10aa <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1096:	7bbb      	ldrb	r3, [r7, #14]
    1098:	085b      	lsrs	r3, r3, #1
    109a:	b2da      	uxtb	r2, r3
    109c:	683b      	ldr	r3, [r7, #0]
    109e:	b2db      	uxtb	r3, r3
    10a0:	7bf9      	ldrb	r1, [r7, #15]
    10a2:	4808      	ldr	r0, [pc, #32]	; (10c4 <_gpio_set_pin_function+0x74>)
    10a4:	4c09      	ldr	r4, [pc, #36]	; (10cc <_gpio_set_pin_function+0x7c>)
    10a6:	47a0      	blx	r4
}
    10a8:	e008      	b.n	10bc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    10aa:	7bbb      	ldrb	r3, [r7, #14]
    10ac:	085b      	lsrs	r3, r3, #1
    10ae:	b2da      	uxtb	r2, r3
    10b0:	683b      	ldr	r3, [r7, #0]
    10b2:	b2db      	uxtb	r3, r3
    10b4:	7bf9      	ldrb	r1, [r7, #15]
    10b6:	4803      	ldr	r0, [pc, #12]	; (10c4 <_gpio_set_pin_function+0x74>)
    10b8:	4c05      	ldr	r4, [pc, #20]	; (10d0 <_gpio_set_pin_function+0x80>)
    10ba:	47a0      	blx	r4
}
    10bc:	bf00      	nop
    10be:	3714      	adds	r7, #20
    10c0:	46bd      	mov	sp, r7
    10c2:	bd90      	pop	{r4, r7, pc}
    10c4:	41008000 	.word	0x41008000
    10c8:	00000d59 	.word	0x00000d59
    10cc:	00000cfb 	.word	0x00000cfb
    10d0:	00000c9b 	.word	0x00000c9b

000010d4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    10d4:	b580      	push	{r7, lr}
    10d6:	b082      	sub	sp, #8
    10d8:	af00      	add	r7, sp, #0
    10da:	4603      	mov	r3, r0
    10dc:	460a      	mov	r2, r1
    10de:	71fb      	strb	r3, [r7, #7]
    10e0:	4613      	mov	r3, r2
    10e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    10e4:	79fb      	ldrb	r3, [r7, #7]
    10e6:	095b      	lsrs	r3, r3, #5
    10e8:	b2d8      	uxtb	r0, r3
    10ea:	79fb      	ldrb	r3, [r7, #7]
    10ec:	f003 031f 	and.w	r3, r3, #31
    10f0:	b2db      	uxtb	r3, r3
    10f2:	79ba      	ldrb	r2, [r7, #6]
    10f4:	4619      	mov	r1, r3
    10f6:	4b03      	ldr	r3, [pc, #12]	; (1104 <gpio_set_pin_pull_mode+0x30>)
    10f8:	4798      	blx	r3
}
    10fa:	bf00      	nop
    10fc:	3708      	adds	r7, #8
    10fe:	46bd      	mov	sp, r7
    1100:	bd80      	pop	{r7, pc}
    1102:	bf00      	nop
    1104:	00000f91 	.word	0x00000f91

00001108 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1108:	b580      	push	{r7, lr}
    110a:	b082      	sub	sp, #8
    110c:	af00      	add	r7, sp, #0
    110e:	6078      	str	r0, [r7, #4]
    1110:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1112:	6839      	ldr	r1, [r7, #0]
    1114:	6878      	ldr	r0, [r7, #4]
    1116:	4b03      	ldr	r3, [pc, #12]	; (1124 <gpio_set_pin_function+0x1c>)
    1118:	4798      	blx	r3
}
    111a:	bf00      	nop
    111c:	3708      	adds	r7, #8
    111e:	46bd      	mov	sp, r7
    1120:	bd80      	pop	{r7, pc}
    1122:	bf00      	nop
    1124:	00001051 	.word	0x00001051

00001128 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1128:	b580      	push	{r7, lr}
    112a:	b082      	sub	sp, #8
    112c:	af00      	add	r7, sp, #0
    112e:	4603      	mov	r3, r0
    1130:	460a      	mov	r2, r1
    1132:	71fb      	strb	r3, [r7, #7]
    1134:	4613      	mov	r3, r2
    1136:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1138:	79fb      	ldrb	r3, [r7, #7]
    113a:	095b      	lsrs	r3, r3, #5
    113c:	b2d8      	uxtb	r0, r3
    113e:	79fb      	ldrb	r3, [r7, #7]
    1140:	f003 031f 	and.w	r3, r3, #31
    1144:	2201      	movs	r2, #1
    1146:	fa02 f303 	lsl.w	r3, r2, r3
    114a:	79ba      	ldrb	r2, [r7, #6]
    114c:	4619      	mov	r1, r3
    114e:	4b03      	ldr	r3, [pc, #12]	; (115c <gpio_set_pin_direction+0x34>)
    1150:	4798      	blx	r3
}
    1152:	bf00      	nop
    1154:	3708      	adds	r7, #8
    1156:	46bd      	mov	sp, r7
    1158:	bd80      	pop	{r7, pc}
    115a:	bf00      	nop
    115c:	00000e65 	.word	0x00000e65

00001160 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1160:	b580      	push	{r7, lr}
    1162:	b082      	sub	sp, #8
    1164:	af00      	add	r7, sp, #0
    1166:	4603      	mov	r3, r0
    1168:	460a      	mov	r2, r1
    116a:	71fb      	strb	r3, [r7, #7]
    116c:	4613      	mov	r3, r2
    116e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1170:	79fb      	ldrb	r3, [r7, #7]
    1172:	095b      	lsrs	r3, r3, #5
    1174:	b2d8      	uxtb	r0, r3
    1176:	79fb      	ldrb	r3, [r7, #7]
    1178:	f003 031f 	and.w	r3, r3, #31
    117c:	2201      	movs	r2, #1
    117e:	fa02 f303 	lsl.w	r3, r2, r3
    1182:	79ba      	ldrb	r2, [r7, #6]
    1184:	4619      	mov	r1, r3
    1186:	4b03      	ldr	r3, [pc, #12]	; (1194 <gpio_set_pin_level+0x34>)
    1188:	4798      	blx	r3
}
    118a:	bf00      	nop
    118c:	3708      	adds	r7, #8
    118e:	46bd      	mov	sp, r7
    1190:	bd80      	pop	{r7, pc}
    1192:	bf00      	nop
    1194:	00000f4d 	.word	0x00000f4d

00001198 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1198:	b580      	push	{r7, lr}
    119a:	af00      	add	r7, sp, #0
	_init_chip();
    119c:	4b01      	ldr	r3, [pc, #4]	; (11a4 <init_mcu+0xc>)
    119e:	4798      	blx	r3
}
    11a0:	bf00      	nop
    11a2:	bd80      	pop	{r7, pc}
    11a4:	000040d5 	.word	0x000040d5

000011a8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    11a8:	b580      	push	{r7, lr}
    11aa:	b082      	sub	sp, #8
    11ac:	af00      	add	r7, sp, #0
    11ae:	6078      	str	r0, [r7, #4]
    11b0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    11b2:	687b      	ldr	r3, [r7, #4]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d004      	beq.n	11c2 <wdt_init+0x1a>
    11b8:	683b      	ldr	r3, [r7, #0]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d001      	beq.n	11c2 <wdt_init+0x1a>
    11be:	2301      	movs	r3, #1
    11c0:	e000      	b.n	11c4 <wdt_init+0x1c>
    11c2:	2300      	movs	r3, #0
    11c4:	f003 0301 	and.w	r3, r3, #1
    11c8:	b2db      	uxtb	r3, r3
    11ca:	2248      	movs	r2, #72	; 0x48
    11cc:	4907      	ldr	r1, [pc, #28]	; (11ec <wdt_init+0x44>)
    11ce:	4618      	mov	r0, r3
    11d0:	4b07      	ldr	r3, [pc, #28]	; (11f0 <wdt_init+0x48>)
    11d2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    11d4:	687b      	ldr	r3, [r7, #4]
    11d6:	683a      	ldr	r2, [r7, #0]
    11d8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	4618      	mov	r0, r3
    11de:	4b05      	ldr	r3, [pc, #20]	; (11f4 <wdt_init+0x4c>)
    11e0:	4798      	blx	r3
    11e2:	4603      	mov	r3, r0
}
    11e4:	4618      	mov	r0, r3
    11e6:	3708      	adds	r7, #8
    11e8:	46bd      	mov	sp, r7
    11ea:	bd80      	pop	{r7, pc}
    11ec:	00010714 	.word	0x00010714
    11f0:	00003825 	.word	0x00003825
    11f4:	0000aa35 	.word	0x0000aa35

000011f8 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    11fc:	4804      	ldr	r0, [pc, #16]	; (1210 <CRC_CALC_init+0x18>)
    11fe:	4b05      	ldr	r3, [pc, #20]	; (1214 <CRC_CALC_init+0x1c>)
    1200:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1202:	4905      	ldr	r1, [pc, #20]	; (1218 <CRC_CALC_init+0x20>)
    1204:	4805      	ldr	r0, [pc, #20]	; (121c <CRC_CALC_init+0x24>)
    1206:	4b06      	ldr	r3, [pc, #24]	; (1220 <CRC_CALC_init+0x28>)
    1208:	4798      	blx	r3
}
    120a:	bf00      	nop
    120c:	bd80      	pop	{r7, pc}
    120e:	bf00      	nop
    1210:	40000800 	.word	0x40000800
    1214:	00000a1b 	.word	0x00000a1b
    1218:	41002000 	.word	0x41002000
    121c:	2000aad4 	.word	0x2000aad4
    1220:	0000224d 	.word	0x0000224d

00001224 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1224:	b580      	push	{r7, lr}
    1226:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1228:	2244      	movs	r2, #68	; 0x44
    122a:	2104      	movs	r1, #4
    122c:	483f      	ldr	r0, [pc, #252]	; (132c <EXTERNAL_IRQ_0_init+0x108>)
    122e:	4b40      	ldr	r3, [pc, #256]	; (1330 <EXTERNAL_IRQ_0_init+0x10c>)
    1230:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1232:	4840      	ldr	r0, [pc, #256]	; (1334 <EXTERNAL_IRQ_0_init+0x110>)
    1234:	4b40      	ldr	r3, [pc, #256]	; (1338 <EXTERNAL_IRQ_0_init+0x114>)
    1236:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1238:	2101      	movs	r1, #1
    123a:	2040      	movs	r0, #64	; 0x40
    123c:	4b3f      	ldr	r3, [pc, #252]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    123e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1240:	2100      	movs	r1, #0
    1242:	2040      	movs	r0, #64	; 0x40
    1244:	4b3e      	ldr	r3, [pc, #248]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    1246:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    124c:	2040      	movs	r0, #64	; 0x40
    124e:	4b3d      	ldr	r3, [pc, #244]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    1250:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1252:	2101      	movs	r1, #1
    1254:	2021      	movs	r0, #33	; 0x21
    1256:	4b39      	ldr	r3, [pc, #228]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    1258:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    125a:	2100      	movs	r1, #0
    125c:	2021      	movs	r0, #33	; 0x21
    125e:	4b38      	ldr	r3, [pc, #224]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    1260:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1262:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1266:	2021      	movs	r0, #33	; 0x21
    1268:	4b36      	ldr	r3, [pc, #216]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    126a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    126c:	2101      	movs	r1, #1
    126e:	2003      	movs	r0, #3
    1270:	4b32      	ldr	r3, [pc, #200]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    1272:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1274:	2102      	movs	r1, #2
    1276:	2003      	movs	r0, #3
    1278:	4b31      	ldr	r3, [pc, #196]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    127a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    127c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1280:	2003      	movs	r0, #3
    1282:	4b30      	ldr	r3, [pc, #192]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    1284:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1286:	2101      	movs	r1, #1
    1288:	2004      	movs	r0, #4
    128a:	4b2c      	ldr	r3, [pc, #176]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    128c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    128e:	2102      	movs	r1, #2
    1290:	2004      	movs	r0, #4
    1292:	4b2b      	ldr	r3, [pc, #172]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    1294:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1296:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    129a:	2004      	movs	r0, #4
    129c:	4b29      	ldr	r3, [pc, #164]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    129e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    12a0:	2101      	movs	r1, #1
    12a2:	2005      	movs	r0, #5
    12a4:	4b25      	ldr	r3, [pc, #148]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    12a6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    12a8:	2102      	movs	r1, #2
    12aa:	2005      	movs	r0, #5
    12ac:	4b24      	ldr	r3, [pc, #144]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    12ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    12b0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    12b4:	2005      	movs	r0, #5
    12b6:	4b23      	ldr	r3, [pc, #140]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    12b8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    12ba:	2101      	movs	r1, #1
    12bc:	2056      	movs	r0, #86	; 0x56
    12be:	4b1f      	ldr	r3, [pc, #124]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    12c0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    12c2:	2102      	movs	r1, #2
    12c4:	2056      	movs	r0, #86	; 0x56
    12c6:	4b1e      	ldr	r3, [pc, #120]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    12c8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    12ca:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    12ce:	2056      	movs	r0, #86	; 0x56
    12d0:	4b1c      	ldr	r3, [pc, #112]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    12d2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    12d4:	2101      	movs	r1, #1
    12d6:	2057      	movs	r0, #87	; 0x57
    12d8:	4b18      	ldr	r3, [pc, #96]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    12da:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    12dc:	2102      	movs	r1, #2
    12de:	2057      	movs	r0, #87	; 0x57
    12e0:	4b17      	ldr	r3, [pc, #92]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    12e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    12e4:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    12e8:	2057      	movs	r0, #87	; 0x57
    12ea:	4b16      	ldr	r3, [pc, #88]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    12ec:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    12ee:	2101      	movs	r1, #1
    12f0:	2028      	movs	r0, #40	; 0x28
    12f2:	4b12      	ldr	r3, [pc, #72]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    12f4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    12f6:	2100      	movs	r1, #0
    12f8:	2028      	movs	r0, #40	; 0x28
    12fa:	4b11      	ldr	r3, [pc, #68]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    12fc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    12fe:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1302:	2028      	movs	r0, #40	; 0x28
    1304:	4b0f      	ldr	r3, [pc, #60]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    1306:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1308:	2101      	movs	r1, #1
    130a:	2029      	movs	r0, #41	; 0x29
    130c:	4b0b      	ldr	r3, [pc, #44]	; (133c <EXTERNAL_IRQ_0_init+0x118>)
    130e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1310:	2100      	movs	r1, #0
    1312:	2029      	movs	r0, #41	; 0x29
    1314:	4b0a      	ldr	r3, [pc, #40]	; (1340 <EXTERNAL_IRQ_0_init+0x11c>)
    1316:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1318:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    131c:	2029      	movs	r0, #41	; 0x29
    131e:	4b09      	ldr	r3, [pc, #36]	; (1344 <EXTERNAL_IRQ_0_init+0x120>)
    1320:	4798      	blx	r3

	ext_irq_init();
    1322:	4b09      	ldr	r3, [pc, #36]	; (1348 <EXTERNAL_IRQ_0_init+0x124>)
    1324:	4798      	blx	r3
}
    1326:	bf00      	nop
    1328:	bd80      	pop	{r7, pc}
    132a:	bf00      	nop
    132c:	40001c00 	.word	0x40001c00
    1330:	000008b5 	.word	0x000008b5
    1334:	40000800 	.word	0x40000800
    1338:	0000099b 	.word	0x0000099b
    133c:	00001129 	.word	0x00001129
    1340:	000010d5 	.word	0x000010d5
    1344:	00001109 	.word	0x00001109
    1348:	000022ad 	.word	0x000022ad

0000134c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    134c:	b580      	push	{r7, lr}
    134e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1350:	2244      	movs	r2, #68	; 0x44
    1352:	210b      	movs	r1, #11
    1354:	4807      	ldr	r0, [pc, #28]	; (1374 <EVENT_SYSTEM_0_init+0x28>)
    1356:	4b08      	ldr	r3, [pc, #32]	; (1378 <EVENT_SYSTEM_0_init+0x2c>)
    1358:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    135a:	2244      	movs	r2, #68	; 0x44
    135c:	210c      	movs	r1, #12
    135e:	4805      	ldr	r0, [pc, #20]	; (1374 <EVENT_SYSTEM_0_init+0x28>)
    1360:	4b05      	ldr	r3, [pc, #20]	; (1378 <EVENT_SYSTEM_0_init+0x2c>)
    1362:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1364:	4805      	ldr	r0, [pc, #20]	; (137c <EVENT_SYSTEM_0_init+0x30>)
    1366:	4b06      	ldr	r3, [pc, #24]	; (1380 <EVENT_SYSTEM_0_init+0x34>)
    1368:	4798      	blx	r3

	event_system_init();
    136a:	4b06      	ldr	r3, [pc, #24]	; (1384 <EVENT_SYSTEM_0_init+0x38>)
    136c:	4798      	blx	r3
}
    136e:	bf00      	nop
    1370:	bd80      	pop	{r7, pc}
    1372:	bf00      	nop
    1374:	40001c00 	.word	0x40001c00
    1378:	000008b5 	.word	0x000008b5
    137c:	40000800 	.word	0x40000800
    1380:	00000a3b 	.word	0x00000a3b
    1384:	00002299 	.word	0x00002299

00001388 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1388:	b580      	push	{r7, lr}
    138a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    138c:	2101      	movs	r1, #1
    138e:	202b      	movs	r0, #43	; 0x2b
    1390:	4b2b      	ldr	r3, [pc, #172]	; (1440 <QSPI_N25Q256_PORT_init+0xb8>)
    1392:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1394:	2100      	movs	r1, #0
    1396:	202b      	movs	r0, #43	; 0x2b
    1398:	4b2a      	ldr	r3, [pc, #168]	; (1444 <QSPI_N25Q256_PORT_init+0xbc>)
    139a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    139c:	492a      	ldr	r1, [pc, #168]	; (1448 <QSPI_N25Q256_PORT_init+0xc0>)
    139e:	202b      	movs	r0, #43	; 0x2b
    13a0:	4b2a      	ldr	r3, [pc, #168]	; (144c <QSPI_N25Q256_PORT_init+0xc4>)
    13a2:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    13a4:	2102      	movs	r1, #2
    13a6:	2008      	movs	r0, #8
    13a8:	4b25      	ldr	r3, [pc, #148]	; (1440 <QSPI_N25Q256_PORT_init+0xb8>)
    13aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    13ac:	2100      	movs	r1, #0
    13ae:	2008      	movs	r0, #8
    13b0:	4b27      	ldr	r3, [pc, #156]	; (1450 <QSPI_N25Q256_PORT_init+0xc8>)
    13b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    13b4:	2100      	movs	r1, #0
    13b6:	2008      	movs	r0, #8
    13b8:	4b22      	ldr	r3, [pc, #136]	; (1444 <QSPI_N25Q256_PORT_init+0xbc>)
    13ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    13bc:	4925      	ldr	r1, [pc, #148]	; (1454 <QSPI_N25Q256_PORT_init+0xcc>)
    13be:	2008      	movs	r0, #8
    13c0:	4b22      	ldr	r3, [pc, #136]	; (144c <QSPI_N25Q256_PORT_init+0xc4>)
    13c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    13c4:	2102      	movs	r1, #2
    13c6:	2009      	movs	r0, #9
    13c8:	4b1d      	ldr	r3, [pc, #116]	; (1440 <QSPI_N25Q256_PORT_init+0xb8>)
    13ca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    13cc:	2100      	movs	r1, #0
    13ce:	2009      	movs	r0, #9
    13d0:	4b1f      	ldr	r3, [pc, #124]	; (1450 <QSPI_N25Q256_PORT_init+0xc8>)
    13d2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    13d4:	2100      	movs	r1, #0
    13d6:	2009      	movs	r0, #9
    13d8:	4b1a      	ldr	r3, [pc, #104]	; (1444 <QSPI_N25Q256_PORT_init+0xbc>)
    13da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    13dc:	491e      	ldr	r1, [pc, #120]	; (1458 <QSPI_N25Q256_PORT_init+0xd0>)
    13de:	2009      	movs	r0, #9
    13e0:	4b1a      	ldr	r3, [pc, #104]	; (144c <QSPI_N25Q256_PORT_init+0xc4>)
    13e2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    13e4:	2102      	movs	r1, #2
    13e6:	200a      	movs	r0, #10
    13e8:	4b15      	ldr	r3, [pc, #84]	; (1440 <QSPI_N25Q256_PORT_init+0xb8>)
    13ea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    13ec:	2100      	movs	r1, #0
    13ee:	200a      	movs	r0, #10
    13f0:	4b17      	ldr	r3, [pc, #92]	; (1450 <QSPI_N25Q256_PORT_init+0xc8>)
    13f2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    13f4:	2100      	movs	r1, #0
    13f6:	200a      	movs	r0, #10
    13f8:	4b12      	ldr	r3, [pc, #72]	; (1444 <QSPI_N25Q256_PORT_init+0xbc>)
    13fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    13fc:	4917      	ldr	r1, [pc, #92]	; (145c <QSPI_N25Q256_PORT_init+0xd4>)
    13fe:	200a      	movs	r0, #10
    1400:	4b12      	ldr	r3, [pc, #72]	; (144c <QSPI_N25Q256_PORT_init+0xc4>)
    1402:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1404:	2102      	movs	r1, #2
    1406:	200b      	movs	r0, #11
    1408:	4b0d      	ldr	r3, [pc, #52]	; (1440 <QSPI_N25Q256_PORT_init+0xb8>)
    140a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    140c:	2100      	movs	r1, #0
    140e:	200b      	movs	r0, #11
    1410:	4b0f      	ldr	r3, [pc, #60]	; (1450 <QSPI_N25Q256_PORT_init+0xc8>)
    1412:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1414:	2100      	movs	r1, #0
    1416:	200b      	movs	r0, #11
    1418:	4b0a      	ldr	r3, [pc, #40]	; (1444 <QSPI_N25Q256_PORT_init+0xbc>)
    141a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    141c:	4910      	ldr	r1, [pc, #64]	; (1460 <QSPI_N25Q256_PORT_init+0xd8>)
    141e:	200b      	movs	r0, #11
    1420:	4b0a      	ldr	r3, [pc, #40]	; (144c <QSPI_N25Q256_PORT_init+0xc4>)
    1422:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1424:	2101      	movs	r1, #1
    1426:	202a      	movs	r0, #42	; 0x2a
    1428:	4b05      	ldr	r3, [pc, #20]	; (1440 <QSPI_N25Q256_PORT_init+0xb8>)
    142a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    142c:	2100      	movs	r1, #0
    142e:	202a      	movs	r0, #42	; 0x2a
    1430:	4b04      	ldr	r3, [pc, #16]	; (1444 <QSPI_N25Q256_PORT_init+0xbc>)
    1432:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1434:	490b      	ldr	r1, [pc, #44]	; (1464 <QSPI_N25Q256_PORT_init+0xdc>)
    1436:	202a      	movs	r0, #42	; 0x2a
    1438:	4b04      	ldr	r3, [pc, #16]	; (144c <QSPI_N25Q256_PORT_init+0xc4>)
    143a:	4798      	blx	r3
}
    143c:	bf00      	nop
    143e:	bd80      	pop	{r7, pc}
    1440:	00001129 	.word	0x00001129
    1444:	000010d5 	.word	0x000010d5
    1448:	002b0007 	.word	0x002b0007
    144c:	00001109 	.word	0x00001109
    1450:	00001161 	.word	0x00001161
    1454:	00080007 	.word	0x00080007
    1458:	00090007 	.word	0x00090007
    145c:	000a0007 	.word	0x000a0007
    1460:	000b0007 	.word	0x000b0007
    1464:	002a0007 	.word	0x002a0007

00001468 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1468:	b580      	push	{r7, lr}
    146a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    146c:	4805      	ldr	r0, [pc, #20]	; (1484 <QSPI_N25Q256_CLOCK_init+0x1c>)
    146e:	4b06      	ldr	r3, [pc, #24]	; (1488 <QSPI_N25Q256_CLOCK_init+0x20>)
    1470:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1472:	4804      	ldr	r0, [pc, #16]	; (1484 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1474:	4b05      	ldr	r3, [pc, #20]	; (148c <QSPI_N25Q256_CLOCK_init+0x24>)
    1476:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1478:	4802      	ldr	r0, [pc, #8]	; (1484 <QSPI_N25Q256_CLOCK_init+0x1c>)
    147a:	4b05      	ldr	r3, [pc, #20]	; (1490 <QSPI_N25Q256_CLOCK_init+0x28>)
    147c:	4798      	blx	r3
}
    147e:	bf00      	nop
    1480:	bd80      	pop	{r7, pc}
    1482:	bf00      	nop
    1484:	40000800 	.word	0x40000800
    1488:	000008fb 	.word	0x000008fb
    148c:	0000093b 	.word	0x0000093b
    1490:	00000b1b 	.word	0x00000b1b

00001494 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1494:	b580      	push	{r7, lr}
    1496:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1498:	4b04      	ldr	r3, [pc, #16]	; (14ac <QSPI_N25Q256_init+0x18>)
    149a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    149c:	4904      	ldr	r1, [pc, #16]	; (14b0 <QSPI_N25Q256_init+0x1c>)
    149e:	4805      	ldr	r0, [pc, #20]	; (14b4 <QSPI_N25Q256_init+0x20>)
    14a0:	4b05      	ldr	r3, [pc, #20]	; (14b8 <QSPI_N25Q256_init+0x24>)
    14a2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    14a4:	4b05      	ldr	r3, [pc, #20]	; (14bc <QSPI_N25Q256_init+0x28>)
    14a6:	4798      	blx	r3
}
    14a8:	bf00      	nop
    14aa:	bd80      	pop	{r7, pc}
    14ac:	00001469 	.word	0x00001469
    14b0:	42003400 	.word	0x42003400
    14b4:	2000a968 	.word	0x2000a968
    14b8:	00002681 	.word	0x00002681
    14bc:	00001389 	.word	0x00001389

000014c0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    14c0:	b580      	push	{r7, lr}
    14c2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    14c4:	4802      	ldr	r0, [pc, #8]	; (14d0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    14c6:	4b03      	ldr	r3, [pc, #12]	; (14d4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    14c8:	4798      	blx	r3
}
    14ca:	bf00      	nop
    14cc:	bd80      	pop	{r7, pc}
    14ce:	bf00      	nop
    14d0:	40000800 	.word	0x40000800
    14d4:	0000097b 	.word	0x0000097b

000014d8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    14d8:	b580      	push	{r7, lr}
    14da:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    14dc:	4b03      	ldr	r3, [pc, #12]	; (14ec <DATETIME_CLOCK_init+0x14>)
    14de:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    14e0:	4903      	ldr	r1, [pc, #12]	; (14f0 <DATETIME_CLOCK_init+0x18>)
    14e2:	4804      	ldr	r0, [pc, #16]	; (14f4 <DATETIME_CLOCK_init+0x1c>)
    14e4:	4b04      	ldr	r3, [pc, #16]	; (14f8 <DATETIME_CLOCK_init+0x20>)
    14e6:	4798      	blx	r3
}
    14e8:	bf00      	nop
    14ea:	bd80      	pop	{r7, pc}
    14ec:	000014c1 	.word	0x000014c1
    14f0:	40002400 	.word	0x40002400
    14f4:	2000aab0 	.word	0x2000aab0
    14f8:	000020a1 	.word	0x000020a1

000014fc <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    14fc:	b580      	push	{r7, lr}
    14fe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1500:	2101      	movs	r1, #1
    1502:	2010      	movs	r0, #16
    1504:	4b07      	ldr	r3, [pc, #28]	; (1524 <I2C_HEATERS_PORT_init+0x28>)
    1506:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1508:	4907      	ldr	r1, [pc, #28]	; (1528 <I2C_HEATERS_PORT_init+0x2c>)
    150a:	2010      	movs	r0, #16
    150c:	4b07      	ldr	r3, [pc, #28]	; (152c <I2C_HEATERS_PORT_init+0x30>)
    150e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1510:	2101      	movs	r1, #1
    1512:	2011      	movs	r0, #17
    1514:	4b03      	ldr	r3, [pc, #12]	; (1524 <I2C_HEATERS_PORT_init+0x28>)
    1516:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1518:	4905      	ldr	r1, [pc, #20]	; (1530 <I2C_HEATERS_PORT_init+0x34>)
    151a:	2011      	movs	r0, #17
    151c:	4b03      	ldr	r3, [pc, #12]	; (152c <I2C_HEATERS_PORT_init+0x30>)
    151e:	4798      	blx	r3
}
    1520:	bf00      	nop
    1522:	bd80      	pop	{r7, pc}
    1524:	000010d5 	.word	0x000010d5
    1528:	00100002 	.word	0x00100002
    152c:	00001109 	.word	0x00001109
    1530:	00110002 	.word	0x00110002

00001534 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1534:	b580      	push	{r7, lr}
    1536:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1538:	2242      	movs	r2, #66	; 0x42
    153a:	2108      	movs	r1, #8
    153c:	4806      	ldr	r0, [pc, #24]	; (1558 <I2C_HEATERS_CLOCK_init+0x24>)
    153e:	4b07      	ldr	r3, [pc, #28]	; (155c <I2C_HEATERS_CLOCK_init+0x28>)
    1540:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1542:	224a      	movs	r2, #74	; 0x4a
    1544:	2103      	movs	r1, #3
    1546:	4804      	ldr	r0, [pc, #16]	; (1558 <I2C_HEATERS_CLOCK_init+0x24>)
    1548:	4b04      	ldr	r3, [pc, #16]	; (155c <I2C_HEATERS_CLOCK_init+0x28>)
    154a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    154c:	4804      	ldr	r0, [pc, #16]	; (1560 <I2C_HEATERS_CLOCK_init+0x2c>)
    154e:	4b05      	ldr	r3, [pc, #20]	; (1564 <I2C_HEATERS_CLOCK_init+0x30>)
    1550:	4798      	blx	r3
}
    1552:	bf00      	nop
    1554:	bd80      	pop	{r7, pc}
    1556:	bf00      	nop
    1558:	40001c00 	.word	0x40001c00
    155c:	000008b5 	.word	0x000008b5
    1560:	40000800 	.word	0x40000800
    1564:	000009bb 	.word	0x000009bb

00001568 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1568:	b580      	push	{r7, lr}
    156a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <I2C_HEATERS_init+0x18>)
    156e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1570:	4904      	ldr	r1, [pc, #16]	; (1584 <I2C_HEATERS_init+0x1c>)
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <I2C_HEATERS_init+0x20>)
    1574:	4b05      	ldr	r3, [pc, #20]	; (158c <I2C_HEATERS_init+0x24>)
    1576:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <I2C_HEATERS_init+0x28>)
    157a:	4798      	blx	r3
}
    157c:	bf00      	nop
    157e:	bd80      	pop	{r7, pc}
    1580:	00001535 	.word	0x00001535
    1584:	40003400 	.word	0x40003400
    1588:	2000aa08 	.word	0x2000aa08
    158c:	00002575 	.word	0x00002575
    1590:	000014fd 	.word	0x000014fd

00001594 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1594:	b580      	push	{r7, lr}
    1596:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1598:	2100      	movs	r1, #0
    159a:	203b      	movs	r0, #59	; 0x3b
    159c:	4b11      	ldr	r3, [pc, #68]	; (15e4 <SPI_TEMP_PORT_init+0x50>)
    159e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    15a0:	2102      	movs	r1, #2
    15a2:	203b      	movs	r0, #59	; 0x3b
    15a4:	4b10      	ldr	r3, [pc, #64]	; (15e8 <SPI_TEMP_PORT_init+0x54>)
    15a6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    15a8:	4910      	ldr	r1, [pc, #64]	; (15ec <SPI_TEMP_PORT_init+0x58>)
    15aa:	203b      	movs	r0, #59	; 0x3b
    15ac:	4b10      	ldr	r3, [pc, #64]	; (15f0 <SPI_TEMP_PORT_init+0x5c>)
    15ae:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    15b0:	2100      	movs	r1, #0
    15b2:	203a      	movs	r0, #58	; 0x3a
    15b4:	4b0b      	ldr	r3, [pc, #44]	; (15e4 <SPI_TEMP_PORT_init+0x50>)
    15b6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    15b8:	2102      	movs	r1, #2
    15ba:	203a      	movs	r0, #58	; 0x3a
    15bc:	4b0a      	ldr	r3, [pc, #40]	; (15e8 <SPI_TEMP_PORT_init+0x54>)
    15be:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    15c0:	490c      	ldr	r1, [pc, #48]	; (15f4 <SPI_TEMP_PORT_init+0x60>)
    15c2:	203a      	movs	r0, #58	; 0x3a
    15c4:	4b0a      	ldr	r3, [pc, #40]	; (15f0 <SPI_TEMP_PORT_init+0x5c>)
    15c6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    15c8:	2101      	movs	r1, #1
    15ca:	203c      	movs	r0, #60	; 0x3c
    15cc:	4b06      	ldr	r3, [pc, #24]	; (15e8 <SPI_TEMP_PORT_init+0x54>)
    15ce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    15d0:	2100      	movs	r1, #0
    15d2:	203c      	movs	r0, #60	; 0x3c
    15d4:	4b08      	ldr	r3, [pc, #32]	; (15f8 <SPI_TEMP_PORT_init+0x64>)
    15d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    15d8:	4908      	ldr	r1, [pc, #32]	; (15fc <SPI_TEMP_PORT_init+0x68>)
    15da:	203c      	movs	r0, #60	; 0x3c
    15dc:	4b04      	ldr	r3, [pc, #16]	; (15f0 <SPI_TEMP_PORT_init+0x5c>)
    15de:	4798      	blx	r3
}
    15e0:	bf00      	nop
    15e2:	bd80      	pop	{r7, pc}
    15e4:	00001161 	.word	0x00001161
    15e8:	00001129 	.word	0x00001129
    15ec:	003b0003 	.word	0x003b0003
    15f0:	00001109 	.word	0x00001109
    15f4:	003a0003 	.word	0x003a0003
    15f8:	000010d5 	.word	0x000010d5
    15fc:	003c0003 	.word	0x003c0003

00001600 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1600:	b580      	push	{r7, lr}
    1602:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1604:	2245      	movs	r2, #69	; 0x45
    1606:	2122      	movs	r1, #34	; 0x22
    1608:	4806      	ldr	r0, [pc, #24]	; (1624 <SPI_TEMP_CLOCK_init+0x24>)
    160a:	4b07      	ldr	r3, [pc, #28]	; (1628 <SPI_TEMP_CLOCK_init+0x28>)
    160c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    160e:	224a      	movs	r2, #74	; 0x4a
    1610:	2103      	movs	r1, #3
    1612:	4804      	ldr	r0, [pc, #16]	; (1624 <SPI_TEMP_CLOCK_init+0x24>)
    1614:	4b04      	ldr	r3, [pc, #16]	; (1628 <SPI_TEMP_CLOCK_init+0x28>)
    1616:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1618:	4804      	ldr	r0, [pc, #16]	; (162c <SPI_TEMP_CLOCK_init+0x2c>)
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <SPI_TEMP_CLOCK_init+0x30>)
    161c:	4798      	blx	r3
}
    161e:	bf00      	nop
    1620:	bd80      	pop	{r7, pc}
    1622:	bf00      	nop
    1624:	40001c00 	.word	0x40001c00
    1628:	000008b5 	.word	0x000008b5
    162c:	40000800 	.word	0x40000800
    1630:	00000b3b 	.word	0x00000b3b

00001634 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1634:	b580      	push	{r7, lr}
    1636:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1638:	4b05      	ldr	r3, [pc, #20]	; (1650 <SPI_TEMP_init+0x1c>)
    163a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    163c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1640:	4804      	ldr	r0, [pc, #16]	; (1654 <SPI_TEMP_init+0x20>)
    1642:	4b05      	ldr	r3, [pc, #20]	; (1658 <SPI_TEMP_init+0x24>)
    1644:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1646:	4b05      	ldr	r3, [pc, #20]	; (165c <SPI_TEMP_init+0x28>)
    1648:	4798      	blx	r3
}
    164a:	bf00      	nop
    164c:	bd80      	pop	{r7, pc}
    164e:	bf00      	nop
    1650:	00001601 	.word	0x00001601
    1654:	2000a910 	.word	0x2000a910
    1658:	00002791 	.word	0x00002791
    165c:	00001595 	.word	0x00001595

00001660 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1660:	b580      	push	{r7, lr}
    1662:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1664:	2100      	movs	r1, #0
    1666:	2017      	movs	r0, #23
    1668:	4b07      	ldr	r3, [pc, #28]	; (1688 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    166a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    166c:	4907      	ldr	r1, [pc, #28]	; (168c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    166e:	2017      	movs	r0, #23
    1670:	4b07      	ldr	r3, [pc, #28]	; (1690 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1672:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1674:	2100      	movs	r1, #0
    1676:	2016      	movs	r0, #22
    1678:	4b03      	ldr	r3, [pc, #12]	; (1688 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    167a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    167c:	4905      	ldr	r1, [pc, #20]	; (1694 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    167e:	2016      	movs	r0, #22
    1680:	4b03      	ldr	r3, [pc, #12]	; (1690 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1682:	4798      	blx	r3
}
    1684:	bf00      	nop
    1686:	bd80      	pop	{r7, pc}
    1688:	000010d5 	.word	0x000010d5
    168c:	00170003 	.word	0x00170003
    1690:	00001109 	.word	0x00001109
    1694:	00160003 	.word	0x00160003

00001698 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1698:	b580      	push	{r7, lr}
    169a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    169c:	2244      	movs	r2, #68	; 0x44
    169e:	2123      	movs	r1, #35	; 0x23
    16a0:	4806      	ldr	r0, [pc, #24]	; (16bc <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    16a2:	4b07      	ldr	r3, [pc, #28]	; (16c0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    16a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16a6:	224a      	movs	r2, #74	; 0x4a
    16a8:	2103      	movs	r1, #3
    16aa:	4804      	ldr	r0, [pc, #16]	; (16bc <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    16ac:	4b04      	ldr	r3, [pc, #16]	; (16c0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    16ae:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    16b0:	4804      	ldr	r0, [pc, #16]	; (16c4 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    16b2:	4b05      	ldr	r3, [pc, #20]	; (16c8 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    16b4:	4798      	blx	r3
}
    16b6:	bf00      	nop
    16b8:	bd80      	pop	{r7, pc}
    16ba:	bf00      	nop
    16bc:	40001c00 	.word	0x40001c00
    16c0:	000008b5 	.word	0x000008b5
    16c4:	40000800 	.word	0x40000800
    16c8:	00000b5b 	.word	0x00000b5b

000016cc <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    16d0:	4b04      	ldr	r3, [pc, #16]	; (16e4 <I2C_FLAPPER_VALVE_init+0x18>)
    16d2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    16d4:	4904      	ldr	r1, [pc, #16]	; (16e8 <I2C_FLAPPER_VALVE_init+0x1c>)
    16d6:	4805      	ldr	r0, [pc, #20]	; (16ec <I2C_FLAPPER_VALVE_init+0x20>)
    16d8:	4b05      	ldr	r3, [pc, #20]	; (16f0 <I2C_FLAPPER_VALVE_init+0x24>)
    16da:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    16dc:	4b05      	ldr	r3, [pc, #20]	; (16f4 <I2C_FLAPPER_VALVE_init+0x28>)
    16de:	4798      	blx	r3
}
    16e0:	bf00      	nop
    16e2:	bd80      	pop	{r7, pc}
    16e4:	00001699 	.word	0x00001699
    16e8:	43000400 	.word	0x43000400
    16ec:	2000a9ac 	.word	0x2000a9ac
    16f0:	00002575 	.word	0x00002575
    16f4:	00001661 	.word	0x00001661

000016f8 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    16f8:	b580      	push	{r7, lr}
    16fa:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    16fc:	2100      	movs	r1, #0
    16fe:	2044      	movs	r0, #68	; 0x44
    1700:	4b11      	ldr	r3, [pc, #68]	; (1748 <SPI_HI3593_PORT_init+0x50>)
    1702:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1704:	2102      	movs	r1, #2
    1706:	2044      	movs	r0, #68	; 0x44
    1708:	4b10      	ldr	r3, [pc, #64]	; (174c <SPI_HI3593_PORT_init+0x54>)
    170a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    170c:	4910      	ldr	r1, [pc, #64]	; (1750 <SPI_HI3593_PORT_init+0x58>)
    170e:	2044      	movs	r0, #68	; 0x44
    1710:	4b10      	ldr	r3, [pc, #64]	; (1754 <SPI_HI3593_PORT_init+0x5c>)
    1712:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1714:	2100      	movs	r1, #0
    1716:	2045      	movs	r0, #69	; 0x45
    1718:	4b0b      	ldr	r3, [pc, #44]	; (1748 <SPI_HI3593_PORT_init+0x50>)
    171a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    171c:	2102      	movs	r1, #2
    171e:	2045      	movs	r0, #69	; 0x45
    1720:	4b0a      	ldr	r3, [pc, #40]	; (174c <SPI_HI3593_PORT_init+0x54>)
    1722:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1724:	490c      	ldr	r1, [pc, #48]	; (1758 <SPI_HI3593_PORT_init+0x60>)
    1726:	2045      	movs	r0, #69	; 0x45
    1728:	4b0a      	ldr	r3, [pc, #40]	; (1754 <SPI_HI3593_PORT_init+0x5c>)
    172a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    172c:	2101      	movs	r1, #1
    172e:	2047      	movs	r0, #71	; 0x47
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <SPI_HI3593_PORT_init+0x54>)
    1732:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1734:	2100      	movs	r1, #0
    1736:	2047      	movs	r0, #71	; 0x47
    1738:	4b08      	ldr	r3, [pc, #32]	; (175c <SPI_HI3593_PORT_init+0x64>)
    173a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    173c:	4908      	ldr	r1, [pc, #32]	; (1760 <SPI_HI3593_PORT_init+0x68>)
    173e:	2047      	movs	r0, #71	; 0x47
    1740:	4b04      	ldr	r3, [pc, #16]	; (1754 <SPI_HI3593_PORT_init+0x5c>)
    1742:	4798      	blx	r3
}
    1744:	bf00      	nop
    1746:	bd80      	pop	{r7, pc}
    1748:	00001161 	.word	0x00001161
    174c:	00001129 	.word	0x00001129
    1750:	00440002 	.word	0x00440002
    1754:	00001109 	.word	0x00001109
    1758:	00450002 	.word	0x00450002
    175c:	000010d5 	.word	0x000010d5
    1760:	00470002 	.word	0x00470002

00001764 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1764:	b580      	push	{r7, lr}
    1766:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1768:	2242      	movs	r2, #66	; 0x42
    176a:	2124      	movs	r1, #36	; 0x24
    176c:	4806      	ldr	r0, [pc, #24]	; (1788 <SPI_HI3593_CLOCK_init+0x24>)
    176e:	4b07      	ldr	r3, [pc, #28]	; (178c <SPI_HI3593_CLOCK_init+0x28>)
    1770:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1772:	224a      	movs	r2, #74	; 0x4a
    1774:	2103      	movs	r1, #3
    1776:	4804      	ldr	r0, [pc, #16]	; (1788 <SPI_HI3593_CLOCK_init+0x24>)
    1778:	4b04      	ldr	r3, [pc, #16]	; (178c <SPI_HI3593_CLOCK_init+0x28>)
    177a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    177c:	4804      	ldr	r0, [pc, #16]	; (1790 <SPI_HI3593_CLOCK_init+0x2c>)
    177e:	4b05      	ldr	r3, [pc, #20]	; (1794 <SPI_HI3593_CLOCK_init+0x30>)
    1780:	4798      	blx	r3
}
    1782:	bf00      	nop
    1784:	bd80      	pop	{r7, pc}
    1786:	bf00      	nop
    1788:	40001c00 	.word	0x40001c00
    178c:	000008b5 	.word	0x000008b5
    1790:	40000800 	.word	0x40000800
    1794:	00000b7b 	.word	0x00000b7b

00001798 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1798:	b580      	push	{r7, lr}
    179a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    179c:	4b04      	ldr	r3, [pc, #16]	; (17b0 <SPI_HI3593_init+0x18>)
    179e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    17a0:	4904      	ldr	r1, [pc, #16]	; (17b4 <SPI_HI3593_init+0x1c>)
    17a2:	4805      	ldr	r0, [pc, #20]	; (17b8 <SPI_HI3593_init+0x20>)
    17a4:	4b05      	ldr	r3, [pc, #20]	; (17bc <SPI_HI3593_init+0x24>)
    17a6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    17a8:	4b05      	ldr	r3, [pc, #20]	; (17c0 <SPI_HI3593_init+0x28>)
    17aa:	4798      	blx	r3
}
    17ac:	bf00      	nop
    17ae:	bd80      	pop	{r7, pc}
    17b0:	00001765 	.word	0x00001765
    17b4:	43000800 	.word	0x43000800
    17b8:	2000a8f8 	.word	0x2000a8f8
    17bc:	00002791 	.word	0x00002791
    17c0:	000016f9 	.word	0x000016f9

000017c4 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    17c4:	b580      	push	{r7, lr}
    17c6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    17c8:	2100      	movs	r1, #0
    17ca:	2068      	movs	r0, #104	; 0x68
    17cc:	4b07      	ldr	r3, [pc, #28]	; (17ec <I2C_FANS_PORT_init+0x28>)
    17ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    17d0:	4907      	ldr	r1, [pc, #28]	; (17f0 <I2C_FANS_PORT_init+0x2c>)
    17d2:	2068      	movs	r0, #104	; 0x68
    17d4:	4b07      	ldr	r3, [pc, #28]	; (17f4 <I2C_FANS_PORT_init+0x30>)
    17d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    17d8:	2100      	movs	r1, #0
    17da:	2069      	movs	r0, #105	; 0x69
    17dc:	4b03      	ldr	r3, [pc, #12]	; (17ec <I2C_FANS_PORT_init+0x28>)
    17de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    17e0:	4905      	ldr	r1, [pc, #20]	; (17f8 <I2C_FANS_PORT_init+0x34>)
    17e2:	2069      	movs	r0, #105	; 0x69
    17e4:	4b03      	ldr	r3, [pc, #12]	; (17f4 <I2C_FANS_PORT_init+0x30>)
    17e6:	4798      	blx	r3
}
    17e8:	bf00      	nop
    17ea:	bd80      	pop	{r7, pc}
    17ec:	000010d5 	.word	0x000010d5
    17f0:	00680002 	.word	0x00680002
    17f4:	00001109 	.word	0x00001109
    17f8:	00690002 	.word	0x00690002

000017fc <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1800:	2244      	movs	r2, #68	; 0x44
    1802:	2125      	movs	r1, #37	; 0x25
    1804:	4806      	ldr	r0, [pc, #24]	; (1820 <I2C_FANS_CLOCK_init+0x24>)
    1806:	4b07      	ldr	r3, [pc, #28]	; (1824 <I2C_FANS_CLOCK_init+0x28>)
    1808:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    180a:	224a      	movs	r2, #74	; 0x4a
    180c:	2103      	movs	r1, #3
    180e:	4804      	ldr	r0, [pc, #16]	; (1820 <I2C_FANS_CLOCK_init+0x24>)
    1810:	4b04      	ldr	r3, [pc, #16]	; (1824 <I2C_FANS_CLOCK_init+0x28>)
    1812:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1814:	4804      	ldr	r0, [pc, #16]	; (1828 <I2C_FANS_CLOCK_init+0x2c>)
    1816:	4b05      	ldr	r3, [pc, #20]	; (182c <I2C_FANS_CLOCK_init+0x30>)
    1818:	4798      	blx	r3
}
    181a:	bf00      	nop
    181c:	bd80      	pop	{r7, pc}
    181e:	bf00      	nop
    1820:	40001c00 	.word	0x40001c00
    1824:	000008b5 	.word	0x000008b5
    1828:	40000800 	.word	0x40000800
    182c:	00000b9b 	.word	0x00000b9b

00001830 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1830:	b580      	push	{r7, lr}
    1832:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1834:	4b04      	ldr	r3, [pc, #16]	; (1848 <I2C_FANS_init+0x18>)
    1836:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1838:	4904      	ldr	r1, [pc, #16]	; (184c <I2C_FANS_init+0x1c>)
    183a:	4805      	ldr	r0, [pc, #20]	; (1850 <I2C_FANS_init+0x20>)
    183c:	4b05      	ldr	r3, [pc, #20]	; (1854 <I2C_FANS_init+0x24>)
    183e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1840:	4b05      	ldr	r3, [pc, #20]	; (1858 <I2C_FANS_init+0x28>)
    1842:	4798      	blx	r3
}
    1844:	bf00      	nop
    1846:	bd80      	pop	{r7, pc}
    1848:	000017fd 	.word	0x000017fd
    184c:	43000c00 	.word	0x43000c00
    1850:	2000a928 	.word	0x2000a928
    1854:	00002575 	.word	0x00002575
    1858:	000017c5 	.word	0x000017c5

0000185c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1860:	4808      	ldr	r0, [pc, #32]	; (1884 <TIMER_USB_init+0x28>)
    1862:	4b09      	ldr	r3, [pc, #36]	; (1888 <TIMER_USB_init+0x2c>)
    1864:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1866:	2243      	movs	r2, #67	; 0x43
    1868:	2109      	movs	r1, #9
    186a:	4808      	ldr	r0, [pc, #32]	; (188c <TIMER_USB_init+0x30>)
    186c:	4b08      	ldr	r3, [pc, #32]	; (1890 <TIMER_USB_init+0x34>)
    186e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1870:	4b08      	ldr	r3, [pc, #32]	; (1894 <TIMER_USB_init+0x38>)
    1872:	4798      	blx	r3
    1874:	4603      	mov	r3, r0
    1876:	461a      	mov	r2, r3
    1878:	4907      	ldr	r1, [pc, #28]	; (1898 <TIMER_USB_init+0x3c>)
    187a:	4808      	ldr	r0, [pc, #32]	; (189c <TIMER_USB_init+0x40>)
    187c:	4b08      	ldr	r3, [pc, #32]	; (18a0 <TIMER_USB_init+0x44>)
    187e:	4798      	blx	r3
}
    1880:	bf00      	nop
    1882:	bd80      	pop	{r7, pc}
    1884:	40000800 	.word	0x40000800
    1888:	000009db 	.word	0x000009db
    188c:	40001c00 	.word	0x40001c00
    1890:	000008b5 	.word	0x000008b5
    1894:	00007ecd 	.word	0x00007ecd
    1898:	40003800 	.word	0x40003800
    189c:	2000aa70 	.word	0x2000aa70
    18a0:	00002a21 	.word	0x00002a21

000018a4 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    18a4:	b580      	push	{r7, lr}
    18a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    18a8:	4808      	ldr	r0, [pc, #32]	; (18cc <TIMER_ARINC_init+0x28>)
    18aa:	4b09      	ldr	r3, [pc, #36]	; (18d0 <TIMER_ARINC_init+0x2c>)
    18ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18ae:	2244      	movs	r2, #68	; 0x44
    18b0:	211a      	movs	r1, #26
    18b2:	4808      	ldr	r0, [pc, #32]	; (18d4 <TIMER_ARINC_init+0x30>)
    18b4:	4b08      	ldr	r3, [pc, #32]	; (18d8 <TIMER_ARINC_init+0x34>)
    18b6:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    18b8:	4b08      	ldr	r3, [pc, #32]	; (18dc <TIMER_ARINC_init+0x38>)
    18ba:	4798      	blx	r3
    18bc:	4603      	mov	r3, r0
    18be:	461a      	mov	r2, r3
    18c0:	4907      	ldr	r1, [pc, #28]	; (18e0 <TIMER_ARINC_init+0x3c>)
    18c2:	4808      	ldr	r0, [pc, #32]	; (18e4 <TIMER_ARINC_init+0x40>)
    18c4:	4b08      	ldr	r3, [pc, #32]	; (18e8 <TIMER_ARINC_init+0x44>)
    18c6:	4798      	blx	r3
}
    18c8:	bf00      	nop
    18ca:	bd80      	pop	{r7, pc}
    18cc:	40000800 	.word	0x40000800
    18d0:	00000a9b 	.word	0x00000a9b
    18d4:	40001c00 	.word	0x40001c00
    18d8:	000008b5 	.word	0x000008b5
    18dc:	00007ecd 	.word	0x00007ecd
    18e0:	4101a000 	.word	0x4101a000
    18e4:	2000aa50 	.word	0x2000aa50
    18e8:	00002a21 	.word	0x00002a21

000018ec <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    18f0:	4808      	ldr	r0, [pc, #32]	; (1914 <TIMER_MAINTENANCE_init+0x28>)
    18f2:	4b09      	ldr	r3, [pc, #36]	; (1918 <TIMER_MAINTENANCE_init+0x2c>)
    18f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18f6:	2246      	movs	r2, #70	; 0x46
    18f8:	211e      	movs	r1, #30
    18fa:	4808      	ldr	r0, [pc, #32]	; (191c <TIMER_MAINTENANCE_init+0x30>)
    18fc:	4b08      	ldr	r3, [pc, #32]	; (1920 <TIMER_MAINTENANCE_init+0x34>)
    18fe:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <TIMER_MAINTENANCE_init+0x38>)
    1902:	4798      	blx	r3
    1904:	4603      	mov	r3, r0
    1906:	461a      	mov	r2, r3
    1908:	4907      	ldr	r1, [pc, #28]	; (1928 <TIMER_MAINTENANCE_init+0x3c>)
    190a:	4808      	ldr	r0, [pc, #32]	; (192c <TIMER_MAINTENANCE_init+0x40>)
    190c:	4b08      	ldr	r3, [pc, #32]	; (1930 <TIMER_MAINTENANCE_init+0x44>)
    190e:	4798      	blx	r3
}
    1910:	bf00      	nop
    1912:	bd80      	pop	{r7, pc}
    1914:	40000800 	.word	0x40000800
    1918:	00000adb 	.word	0x00000adb
    191c:	40001c00 	.word	0x40001c00
    1920:	000008b5 	.word	0x000008b5
    1924:	00007ecd 	.word	0x00007ecd
    1928:	42001400 	.word	0x42001400
    192c:	2000a948 	.word	0x2000a948
    1930:	00002a21 	.word	0x00002a21

00001934 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1934:	b580      	push	{r7, lr}
    1936:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1938:	4808      	ldr	r0, [pc, #32]	; (195c <TIMER_INTERFACE_init+0x28>)
    193a:	4b09      	ldr	r3, [pc, #36]	; (1960 <TIMER_INTERFACE_init+0x2c>)
    193c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    193e:	2246      	movs	r2, #70	; 0x46
    1940:	211e      	movs	r1, #30
    1942:	4808      	ldr	r0, [pc, #32]	; (1964 <TIMER_INTERFACE_init+0x30>)
    1944:	4b08      	ldr	r3, [pc, #32]	; (1968 <TIMER_INTERFACE_init+0x34>)
    1946:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <TIMER_INTERFACE_init+0x38>)
    194a:	4798      	blx	r3
    194c:	4603      	mov	r3, r0
    194e:	461a      	mov	r2, r3
    1950:	4907      	ldr	r1, [pc, #28]	; (1970 <TIMER_INTERFACE_init+0x3c>)
    1952:	4808      	ldr	r0, [pc, #32]	; (1974 <TIMER_INTERFACE_init+0x40>)
    1954:	4b08      	ldr	r3, [pc, #32]	; (1978 <TIMER_INTERFACE_init+0x44>)
    1956:	4798      	blx	r3
}
    1958:	bf00      	nop
    195a:	bd80      	pop	{r7, pc}
    195c:	40000800 	.word	0x40000800
    1960:	00000afb 	.word	0x00000afb
    1964:	40001c00 	.word	0x40001c00
    1968:	000008b5 	.word	0x000008b5
    196c:	00007ecd 	.word	0x00007ecd
    1970:	42001800 	.word	0x42001800
    1974:	2000a98c 	.word	0x2000a98c
    1978:	00002a21 	.word	0x00002a21

0000197c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    197c:	b580      	push	{r7, lr}
    197e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1980:	4808      	ldr	r0, [pc, #32]	; (19a4 <TIMER_EVENT_init+0x28>)
    1982:	4b09      	ldr	r3, [pc, #36]	; (19a8 <TIMER_EVENT_init+0x2c>)
    1984:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1986:	2246      	movs	r2, #70	; 0x46
    1988:	2127      	movs	r1, #39	; 0x27
    198a:	4808      	ldr	r0, [pc, #32]	; (19ac <TIMER_EVENT_init+0x30>)
    198c:	4b08      	ldr	r3, [pc, #32]	; (19b0 <TIMER_EVENT_init+0x34>)
    198e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1990:	4b08      	ldr	r3, [pc, #32]	; (19b4 <TIMER_EVENT_init+0x38>)
    1992:	4798      	blx	r3
    1994:	4603      	mov	r3, r0
    1996:	461a      	mov	r2, r3
    1998:	4907      	ldr	r1, [pc, #28]	; (19b8 <TIMER_EVENT_init+0x3c>)
    199a:	4808      	ldr	r0, [pc, #32]	; (19bc <TIMER_EVENT_init+0x40>)
    199c:	4b08      	ldr	r3, [pc, #32]	; (19c0 <TIMER_EVENT_init+0x44>)
    199e:	4798      	blx	r3
}
    19a0:	bf00      	nop
    19a2:	bd80      	pop	{r7, pc}
    19a4:	40000800 	.word	0x40000800
    19a8:	00000bbb 	.word	0x00000bbb
    19ac:	40001c00 	.word	0x40001c00
    19b0:	000008b5 	.word	0x000008b5
    19b4:	00007ecd 	.word	0x00007ecd
    19b8:	43001400 	.word	0x43001400
    19bc:	2000a96c 	.word	0x2000a96c
    19c0:	00002a21 	.word	0x00002a21

000019c4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    19c4:	b480      	push	{r7}
    19c6:	af00      	add	r7, sp, #0
}
    19c8:	bf00      	nop
    19ca:	46bd      	mov	sp, r7
    19cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    19d0:	4770      	bx	lr
	...

000019d4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    19d4:	b580      	push	{r7, lr}
    19d6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    19d8:	4804      	ldr	r0, [pc, #16]	; (19ec <LIVE_PULSE_CLOCK_init+0x18>)
    19da:	4b05      	ldr	r3, [pc, #20]	; (19f0 <LIVE_PULSE_CLOCK_init+0x1c>)
    19dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19de:	2240      	movs	r2, #64	; 0x40
    19e0:	2127      	movs	r1, #39	; 0x27
    19e2:	4804      	ldr	r0, [pc, #16]	; (19f4 <LIVE_PULSE_CLOCK_init+0x20>)
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <LIVE_PULSE_CLOCK_init+0x24>)
    19e6:	4798      	blx	r3
}
    19e8:	bf00      	nop
    19ea:	bd80      	pop	{r7, pc}
    19ec:	40000800 	.word	0x40000800
    19f0:	00000bdb 	.word	0x00000bdb
    19f4:	40001c00 	.word	0x40001c00
    19f8:	000008b5 	.word	0x000008b5

000019fc <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    19fc:	b580      	push	{r7, lr}
    19fe:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1a00:	4b06      	ldr	r3, [pc, #24]	; (1a1c <LIVE_PULSE_init+0x20>)
    1a02:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1a04:	4b06      	ldr	r3, [pc, #24]	; (1a20 <LIVE_PULSE_init+0x24>)
    1a06:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1a08:	4b06      	ldr	r3, [pc, #24]	; (1a24 <LIVE_PULSE_init+0x28>)
    1a0a:	4798      	blx	r3
    1a0c:	4603      	mov	r3, r0
    1a0e:	461a      	mov	r2, r3
    1a10:	4905      	ldr	r1, [pc, #20]	; (1a28 <LIVE_PULSE_init+0x2c>)
    1a12:	4806      	ldr	r0, [pc, #24]	; (1a2c <LIVE_PULSE_init+0x30>)
    1a14:	4b06      	ldr	r3, [pc, #24]	; (1a30 <LIVE_PULSE_init+0x34>)
    1a16:	4798      	blx	r3
}
    1a18:	bf00      	nop
    1a1a:	bd80      	pop	{r7, pc}
    1a1c:	000019d5 	.word	0x000019d5
    1a20:	000019c5 	.word	0x000019c5
    1a24:	00007ee1 	.word	0x00007ee1
    1a28:	43001800 	.word	0x43001800
    1a2c:	2000a9cc 	.word	0x2000a9cc
    1a30:	000025d5 	.word	0x000025d5

00001a34 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1a34:	b580      	push	{r7, lr}
    1a36:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1a38:	4804      	ldr	r0, [pc, #16]	; (1a4c <TIMER_HVAC_CLOCK_init+0x18>)
    1a3a:	4b05      	ldr	r3, [pc, #20]	; (1a50 <TIMER_HVAC_CLOCK_init+0x1c>)
    1a3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a3e:	2244      	movs	r2, #68	; 0x44
    1a40:	2119      	movs	r1, #25
    1a42:	4804      	ldr	r0, [pc, #16]	; (1a54 <TIMER_HVAC_CLOCK_init+0x20>)
    1a44:	4b04      	ldr	r3, [pc, #16]	; (1a58 <TIMER_HVAC_CLOCK_init+0x24>)
    1a46:	4798      	blx	r3
}
    1a48:	bf00      	nop
    1a4a:	bd80      	pop	{r7, pc}
    1a4c:	40000800 	.word	0x40000800
    1a50:	00000a5b 	.word	0x00000a5b
    1a54:	40001c00 	.word	0x40001c00
    1a58:	000008b5 	.word	0x000008b5

00001a5c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1a60:	4b05      	ldr	r3, [pc, #20]	; (1a78 <TIMER_HVAC_init+0x1c>)
    1a62:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1a64:	4b05      	ldr	r3, [pc, #20]	; (1a7c <TIMER_HVAC_init+0x20>)
    1a66:	4798      	blx	r3
    1a68:	4603      	mov	r3, r0
    1a6a:	461a      	mov	r2, r3
    1a6c:	4904      	ldr	r1, [pc, #16]	; (1a80 <TIMER_HVAC_init+0x24>)
    1a6e:	4805      	ldr	r0, [pc, #20]	; (1a84 <TIMER_HVAC_init+0x28>)
    1a70:	4b05      	ldr	r3, [pc, #20]	; (1a88 <TIMER_HVAC_init+0x2c>)
    1a72:	4798      	blx	r3
}
    1a74:	bf00      	nop
    1a76:	bd80      	pop	{r7, pc}
    1a78:	00001a35 	.word	0x00001a35
    1a7c:	000072b1 	.word	0x000072b1
    1a80:	41016000 	.word	0x41016000
    1a84:	2000aa90 	.word	0x2000aa90
    1a88:	00002a21 	.word	0x00002a21

00001a8c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1a90:	4804      	ldr	r0, [pc, #16]	; (1aa4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1a92:	4b05      	ldr	r3, [pc, #20]	; (1aa8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1a94:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a96:	2244      	movs	r2, #68	; 0x44
    1a98:	2119      	movs	r1, #25
    1a9a:	4804      	ldr	r0, [pc, #16]	; (1aac <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1a9c:	4b04      	ldr	r3, [pc, #16]	; (1ab0 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1a9e:	4798      	blx	r3
}
    1aa0:	bf00      	nop
    1aa2:	bd80      	pop	{r7, pc}
    1aa4:	40000800 	.word	0x40000800
    1aa8:	00000a7b 	.word	0x00000a7b
    1aac:	40001c00 	.word	0x40001c00
    1ab0:	000008b5 	.word	0x000008b5

00001ab4 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1ab8:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <TIMER_TEMPERATURES_init+0x1c>)
    1aba:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1abc:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <TIMER_TEMPERATURES_init+0x20>)
    1abe:	4798      	blx	r3
    1ac0:	4603      	mov	r3, r0
    1ac2:	461a      	mov	r2, r3
    1ac4:	4904      	ldr	r1, [pc, #16]	; (1ad8 <TIMER_TEMPERATURES_init+0x24>)
    1ac6:	4805      	ldr	r0, [pc, #20]	; (1adc <TIMER_TEMPERATURES_init+0x28>)
    1ac8:	4b05      	ldr	r3, [pc, #20]	; (1ae0 <TIMER_TEMPERATURES_init+0x2c>)
    1aca:	4798      	blx	r3
}
    1acc:	bf00      	nop
    1ace:	bd80      	pop	{r7, pc}
    1ad0:	00001a8d 	.word	0x00001a8d
    1ad4:	000072b1 	.word	0x000072b1
    1ad8:	41018000 	.word	0x41018000
    1adc:	2000a8d8 	.word	0x2000a8d8
    1ae0:	00002a21 	.word	0x00002a21

00001ae4 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1ae4:	b580      	push	{r7, lr}
    1ae6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1ae8:	4804      	ldr	r0, [pc, #16]	; (1afc <TIMER_CCU_CLOCK_init+0x18>)
    1aea:	4b05      	ldr	r3, [pc, #20]	; (1b00 <TIMER_CCU_CLOCK_init+0x1c>)
    1aec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aee:	2240      	movs	r2, #64	; 0x40
    1af0:	211d      	movs	r1, #29
    1af2:	4804      	ldr	r0, [pc, #16]	; (1b04 <TIMER_CCU_CLOCK_init+0x20>)
    1af4:	4b04      	ldr	r3, [pc, #16]	; (1b08 <TIMER_CCU_CLOCK_init+0x24>)
    1af6:	4798      	blx	r3
}
    1af8:	bf00      	nop
    1afa:	bd80      	pop	{r7, pc}
    1afc:	40000800 	.word	0x40000800
    1b00:	00000abb 	.word	0x00000abb
    1b04:	40001c00 	.word	0x40001c00
    1b08:	000008b5 	.word	0x000008b5

00001b0c <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1b10:	4b05      	ldr	r3, [pc, #20]	; (1b28 <TIMER_CCU_init+0x1c>)
    1b12:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1b14:	4b05      	ldr	r3, [pc, #20]	; (1b2c <TIMER_CCU_init+0x20>)
    1b16:	4798      	blx	r3
    1b18:	4603      	mov	r3, r0
    1b1a:	461a      	mov	r2, r3
    1b1c:	4904      	ldr	r1, [pc, #16]	; (1b30 <TIMER_CCU_init+0x24>)
    1b1e:	4805      	ldr	r0, [pc, #20]	; (1b34 <TIMER_CCU_init+0x28>)
    1b20:	4b05      	ldr	r3, [pc, #20]	; (1b38 <TIMER_CCU_init+0x2c>)
    1b22:	4798      	blx	r3
}
    1b24:	bf00      	nop
    1b26:	bd80      	pop	{r7, pc}
    1b28:	00001ae5 	.word	0x00001ae5
    1b2c:	000072b1 	.word	0x000072b1
    1b30:	42000c00 	.word	0x42000c00
    1b34:	2000a9e8 	.word	0x2000a9e8
    1b38:	00002a21 	.word	0x00002a21

00001b3c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1b40:	2102      	movs	r1, #2
    1b42:	2018      	movs	r0, #24
    1b44:	4b0f      	ldr	r3, [pc, #60]	; (1b84 <CDCUSB_PORT_init+0x48>)
    1b46:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1b48:	2100      	movs	r1, #0
    1b4a:	2018      	movs	r0, #24
    1b4c:	4b0e      	ldr	r3, [pc, #56]	; (1b88 <CDCUSB_PORT_init+0x4c>)
    1b4e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1b50:	2100      	movs	r1, #0
    1b52:	2018      	movs	r0, #24
    1b54:	4b0d      	ldr	r3, [pc, #52]	; (1b8c <CDCUSB_PORT_init+0x50>)
    1b56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1b58:	490d      	ldr	r1, [pc, #52]	; (1b90 <CDCUSB_PORT_init+0x54>)
    1b5a:	2018      	movs	r0, #24
    1b5c:	4b0d      	ldr	r3, [pc, #52]	; (1b94 <CDCUSB_PORT_init+0x58>)
    1b5e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1b60:	2102      	movs	r1, #2
    1b62:	2019      	movs	r0, #25
    1b64:	4b07      	ldr	r3, [pc, #28]	; (1b84 <CDCUSB_PORT_init+0x48>)
    1b66:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1b68:	2100      	movs	r1, #0
    1b6a:	2019      	movs	r0, #25
    1b6c:	4b06      	ldr	r3, [pc, #24]	; (1b88 <CDCUSB_PORT_init+0x4c>)
    1b6e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1b70:	2100      	movs	r1, #0
    1b72:	2019      	movs	r0, #25
    1b74:	4b05      	ldr	r3, [pc, #20]	; (1b8c <CDCUSB_PORT_init+0x50>)
    1b76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1b78:	4907      	ldr	r1, [pc, #28]	; (1b98 <CDCUSB_PORT_init+0x5c>)
    1b7a:	2019      	movs	r0, #25
    1b7c:	4b05      	ldr	r3, [pc, #20]	; (1b94 <CDCUSB_PORT_init+0x58>)
    1b7e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1b80:	bf00      	nop
    1b82:	bd80      	pop	{r7, pc}
    1b84:	00001129 	.word	0x00001129
    1b88:	00001161 	.word	0x00001161
    1b8c:	000010d5 	.word	0x000010d5
    1b90:	00180007 	.word	0x00180007
    1b94:	00001109 	.word	0x00001109
    1b98:	00190007 	.word	0x00190007

00001b9c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1ba0:	2242      	movs	r2, #66	; 0x42
    1ba2:	210a      	movs	r1, #10
    1ba4:	4805      	ldr	r0, [pc, #20]	; (1bbc <CDCUSB_CLOCK_init+0x20>)
    1ba6:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <CDCUSB_CLOCK_init+0x24>)
    1ba8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1baa:	4806      	ldr	r0, [pc, #24]	; (1bc4 <CDCUSB_CLOCK_init+0x28>)
    1bac:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <CDCUSB_CLOCK_init+0x2c>)
    1bae:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1bb0:	4804      	ldr	r0, [pc, #16]	; (1bc4 <CDCUSB_CLOCK_init+0x28>)
    1bb2:	4b06      	ldr	r3, [pc, #24]	; (1bcc <CDCUSB_CLOCK_init+0x30>)
    1bb4:	4798      	blx	r3
}
    1bb6:	bf00      	nop
    1bb8:	bd80      	pop	{r7, pc}
    1bba:	bf00      	nop
    1bbc:	40001c00 	.word	0x40001c00
    1bc0:	000008b5 	.word	0x000008b5
    1bc4:	40000800 	.word	0x40000800
    1bc8:	000008db 	.word	0x000008db
    1bcc:	000009fb 	.word	0x000009fb

00001bd0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1bd4:	4b03      	ldr	r3, [pc, #12]	; (1be4 <CDCUSB_init+0x14>)
    1bd6:	4798      	blx	r3
	usb_d_init();
    1bd8:	4b03      	ldr	r3, [pc, #12]	; (1be8 <CDCUSB_init+0x18>)
    1bda:	4798      	blx	r3
	CDCUSB_PORT_init();
    1bdc:	4b03      	ldr	r3, [pc, #12]	; (1bec <CDCUSB_init+0x1c>)
    1bde:	4798      	blx	r3
}
    1be0:	bf00      	nop
    1be2:	bd80      	pop	{r7, pc}
    1be4:	00001b9d 	.word	0x00001b9d
    1be8:	0000327d 	.word	0x0000327d
    1bec:	00001b3d 	.word	0x00001b3d

00001bf0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1bf4:	4802      	ldr	r0, [pc, #8]	; (1c00 <WATCHDOG_CLOCK_init+0x10>)
    1bf6:	4b03      	ldr	r3, [pc, #12]	; (1c04 <WATCHDOG_CLOCK_init+0x14>)
    1bf8:	4798      	blx	r3
}
    1bfa:	bf00      	nop
    1bfc:	bd80      	pop	{r7, pc}
    1bfe:	bf00      	nop
    1c00:	40000800 	.word	0x40000800
    1c04:	0000095b 	.word	0x0000095b

00001c08 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1c0c:	4b03      	ldr	r3, [pc, #12]	; (1c1c <WATCHDOG_init+0x14>)
    1c0e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1c10:	4903      	ldr	r1, [pc, #12]	; (1c20 <WATCHDOG_init+0x18>)
    1c12:	4804      	ldr	r0, [pc, #16]	; (1c24 <WATCHDOG_init+0x1c>)
    1c14:	4b04      	ldr	r3, [pc, #16]	; (1c28 <WATCHDOG_init+0x20>)
    1c16:	4798      	blx	r3
}
    1c18:	bf00      	nop
    1c1a:	bd80      	pop	{r7, pc}
    1c1c:	00001bf1 	.word	0x00001bf1
    1c20:	40002000 	.word	0x40002000
    1c24:	2000aad0 	.word	0x2000aad0
    1c28:	000011a9 	.word	0x000011a9

00001c2c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1c30:	4904      	ldr	r1, [pc, #16]	; (1c44 <CAN_CCU_PORT_init+0x18>)
    1c32:	202d      	movs	r0, #45	; 0x2d
    1c34:	4b04      	ldr	r3, [pc, #16]	; (1c48 <CAN_CCU_PORT_init+0x1c>)
    1c36:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1c38:	4904      	ldr	r1, [pc, #16]	; (1c4c <CAN_CCU_PORT_init+0x20>)
    1c3a:	202c      	movs	r0, #44	; 0x2c
    1c3c:	4b02      	ldr	r3, [pc, #8]	; (1c48 <CAN_CCU_PORT_init+0x1c>)
    1c3e:	4798      	blx	r3
}
    1c40:	bf00      	nop
    1c42:	bd80      	pop	{r7, pc}
    1c44:	002d0007 	.word	0x002d0007
    1c48:	00001109 	.word	0x00001109
    1c4c:	002c0007 	.word	0x002c0007

00001c50 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1c54:	4807      	ldr	r0, [pc, #28]	; (1c74 <CAN_CCU_init+0x24>)
    1c56:	4b08      	ldr	r3, [pc, #32]	; (1c78 <CAN_CCU_init+0x28>)
    1c58:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c5a:	2249      	movs	r2, #73	; 0x49
    1c5c:	211c      	movs	r1, #28
    1c5e:	4807      	ldr	r0, [pc, #28]	; (1c7c <CAN_CCU_init+0x2c>)
    1c60:	4b07      	ldr	r3, [pc, #28]	; (1c80 <CAN_CCU_init+0x30>)
    1c62:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1c64:	4907      	ldr	r1, [pc, #28]	; (1c84 <CAN_CCU_init+0x34>)
    1c66:	4808      	ldr	r0, [pc, #32]	; (1c88 <CAN_CCU_init+0x38>)
    1c68:	4b08      	ldr	r3, [pc, #32]	; (1c8c <CAN_CCU_init+0x3c>)
    1c6a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1c6c:	4b08      	ldr	r3, [pc, #32]	; (1c90 <CAN_CCU_init+0x40>)
    1c6e:	4798      	blx	r3
}
    1c70:	bf00      	nop
    1c72:	bd80      	pop	{r7, pc}
    1c74:	40000800 	.word	0x40000800
    1c78:	0000091b 	.word	0x0000091b
    1c7c:	40001c00 	.word	0x40001c00
    1c80:	000008b5 	.word	0x000008b5
    1c84:	42000400 	.word	0x42000400
    1c88:	2000aa28 	.word	0x2000aa28
    1c8c:	00002161 	.word	0x00002161
    1c90:	00001c2d 	.word	0x00001c2d

00001c94 <system_init>:

void system_init(void)
{
    1c94:	b580      	push	{r7, lr}
    1c96:	af00      	add	r7, sp, #0
	init_mcu();
    1c98:	4b5f      	ldr	r3, [pc, #380]	; (1e18 <system_init+0x184>)
    1c9a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1c9c:	2100      	movs	r1, #0
    1c9e:	2007      	movs	r0, #7
    1ca0:	4b5e      	ldr	r3, [pc, #376]	; (1e1c <system_init+0x188>)
    1ca2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1ca4:	2102      	movs	r1, #2
    1ca6:	2007      	movs	r0, #7
    1ca8:	4b5d      	ldr	r3, [pc, #372]	; (1e20 <system_init+0x18c>)
    1caa:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1cac:	f04f 31ff 	mov.w	r1, #4294967295
    1cb0:	2007      	movs	r0, #7
    1cb2:	4b5c      	ldr	r3, [pc, #368]	; (1e24 <system_init+0x190>)
    1cb4:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1cb6:	2101      	movs	r1, #1
    1cb8:	200f      	movs	r0, #15
    1cba:	4b58      	ldr	r3, [pc, #352]	; (1e1c <system_init+0x188>)
    1cbc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1cbe:	2102      	movs	r1, #2
    1cc0:	200f      	movs	r0, #15
    1cc2:	4b57      	ldr	r3, [pc, #348]	; (1e20 <system_init+0x18c>)
    1cc4:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1cc6:	f04f 31ff 	mov.w	r1, #4294967295
    1cca:	200f      	movs	r0, #15
    1ccc:	4b55      	ldr	r3, [pc, #340]	; (1e24 <system_init+0x190>)
    1cce:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1cd0:	2101      	movs	r1, #1
    1cd2:	2013      	movs	r0, #19
    1cd4:	4b51      	ldr	r3, [pc, #324]	; (1e1c <system_init+0x188>)
    1cd6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1cd8:	2102      	movs	r1, #2
    1cda:	2013      	movs	r0, #19
    1cdc:	4b50      	ldr	r3, [pc, #320]	; (1e20 <system_init+0x18c>)
    1cde:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1ce0:	f04f 31ff 	mov.w	r1, #4294967295
    1ce4:	2013      	movs	r0, #19
    1ce6:	4b4f      	ldr	r3, [pc, #316]	; (1e24 <system_init+0x190>)
    1ce8:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1cea:	2101      	movs	r1, #1
    1cec:	201b      	movs	r0, #27
    1cee:	4b4b      	ldr	r3, [pc, #300]	; (1e1c <system_init+0x188>)
    1cf0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1cf2:	2102      	movs	r1, #2
    1cf4:	201b      	movs	r0, #27
    1cf6:	4b4a      	ldr	r3, [pc, #296]	; (1e20 <system_init+0x18c>)
    1cf8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1cfa:	f04f 31ff 	mov.w	r1, #4294967295
    1cfe:	201b      	movs	r0, #27
    1d00:	4b48      	ldr	r3, [pc, #288]	; (1e24 <system_init+0x190>)
    1d02:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1d04:	2101      	movs	r1, #1
    1d06:	2027      	movs	r0, #39	; 0x27
    1d08:	4b44      	ldr	r3, [pc, #272]	; (1e1c <system_init+0x188>)
    1d0a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1d0c:	2102      	movs	r1, #2
    1d0e:	2027      	movs	r0, #39	; 0x27
    1d10:	4b43      	ldr	r3, [pc, #268]	; (1e20 <system_init+0x18c>)
    1d12:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1d14:	f04f 31ff 	mov.w	r1, #4294967295
    1d18:	2027      	movs	r0, #39	; 0x27
    1d1a:	4b42      	ldr	r3, [pc, #264]	; (1e24 <system_init+0x190>)
    1d1c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1d1e:	2101      	movs	r1, #1
    1d20:	203d      	movs	r0, #61	; 0x3d
    1d22:	4b3e      	ldr	r3, [pc, #248]	; (1e1c <system_init+0x188>)
    1d24:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1d26:	2102      	movs	r1, #2
    1d28:	203d      	movs	r0, #61	; 0x3d
    1d2a:	4b3d      	ldr	r3, [pc, #244]	; (1e20 <system_init+0x18c>)
    1d2c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1d2e:	f04f 31ff 	mov.w	r1, #4294967295
    1d32:	203d      	movs	r0, #61	; 0x3d
    1d34:	4b3b      	ldr	r3, [pc, #236]	; (1e24 <system_init+0x190>)
    1d36:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1d38:	2101      	movs	r1, #1
    1d3a:	203f      	movs	r0, #63	; 0x3f
    1d3c:	4b38      	ldr	r3, [pc, #224]	; (1e20 <system_init+0x18c>)
    1d3e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1d40:	2101      	movs	r1, #1
    1d42:	203f      	movs	r0, #63	; 0x3f
    1d44:	4b38      	ldr	r3, [pc, #224]	; (1e28 <system_init+0x194>)
    1d46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1d48:	f04f 31ff 	mov.w	r1, #4294967295
    1d4c:	203f      	movs	r0, #63	; 0x3f
    1d4e:	4b35      	ldr	r3, [pc, #212]	; (1e24 <system_init+0x190>)
    1d50:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1d52:	2100      	movs	r1, #0
    1d54:	204d      	movs	r0, #77	; 0x4d
    1d56:	4b31      	ldr	r3, [pc, #196]	; (1e1c <system_init+0x188>)
    1d58:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1d5a:	2102      	movs	r1, #2
    1d5c:	204d      	movs	r0, #77	; 0x4d
    1d5e:	4b30      	ldr	r3, [pc, #192]	; (1e20 <system_init+0x18c>)
    1d60:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1d62:	f04f 31ff 	mov.w	r1, #4294967295
    1d66:	204d      	movs	r0, #77	; 0x4d
    1d68:	4b2e      	ldr	r3, [pc, #184]	; (1e24 <system_init+0x190>)
    1d6a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1d6c:	2101      	movs	r1, #1
    1d6e:	204e      	movs	r0, #78	; 0x4e
    1d70:	4b2a      	ldr	r3, [pc, #168]	; (1e1c <system_init+0x188>)
    1d72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1d74:	2102      	movs	r1, #2
    1d76:	204e      	movs	r0, #78	; 0x4e
    1d78:	4b29      	ldr	r3, [pc, #164]	; (1e20 <system_init+0x18c>)
    1d7a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1d7c:	f04f 31ff 	mov.w	r1, #4294967295
    1d80:	204e      	movs	r0, #78	; 0x4e
    1d82:	4b28      	ldr	r3, [pc, #160]	; (1e24 <system_init+0x190>)
    1d84:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1d86:	2100      	movs	r1, #0
    1d88:	204f      	movs	r0, #79	; 0x4f
    1d8a:	4b24      	ldr	r3, [pc, #144]	; (1e1c <system_init+0x188>)
    1d8c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1d8e:	2102      	movs	r1, #2
    1d90:	204f      	movs	r0, #79	; 0x4f
    1d92:	4b23      	ldr	r3, [pc, #140]	; (1e20 <system_init+0x18c>)
    1d94:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1d96:	f04f 31ff 	mov.w	r1, #4294967295
    1d9a:	204f      	movs	r0, #79	; 0x4f
    1d9c:	4b21      	ldr	r3, [pc, #132]	; (1e24 <system_init+0x190>)
    1d9e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1da0:	2100      	movs	r1, #0
    1da2:	2052      	movs	r0, #82	; 0x52
    1da4:	4b1d      	ldr	r3, [pc, #116]	; (1e1c <system_init+0x188>)
    1da6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1da8:	2102      	movs	r1, #2
    1daa:	2052      	movs	r0, #82	; 0x52
    1dac:	4b1c      	ldr	r3, [pc, #112]	; (1e20 <system_init+0x18c>)
    1dae:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1db0:	f04f 31ff 	mov.w	r1, #4294967295
    1db4:	2052      	movs	r0, #82	; 0x52
    1db6:	4b1b      	ldr	r3, [pc, #108]	; (1e24 <system_init+0x190>)
    1db8:	4798      	blx	r3

	CRC_CALC_init();
    1dba:	4b1c      	ldr	r3, [pc, #112]	; (1e2c <system_init+0x198>)
    1dbc:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1dbe:	4b1c      	ldr	r3, [pc, #112]	; (1e30 <system_init+0x19c>)
    1dc0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1dc2:	4b1c      	ldr	r3, [pc, #112]	; (1e34 <system_init+0x1a0>)
    1dc4:	4798      	blx	r3

	QSPI_N25Q256_init();
    1dc6:	4b1c      	ldr	r3, [pc, #112]	; (1e38 <system_init+0x1a4>)
    1dc8:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1dca:	4b1c      	ldr	r3, [pc, #112]	; (1e3c <system_init+0x1a8>)
    1dcc:	4798      	blx	r3

	I2C_HEATERS_init();
    1dce:	4b1c      	ldr	r3, [pc, #112]	; (1e40 <system_init+0x1ac>)
    1dd0:	4798      	blx	r3

	SPI_TEMP_init();
    1dd2:	4b1c      	ldr	r3, [pc, #112]	; (1e44 <system_init+0x1b0>)
    1dd4:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1dd6:	4b1c      	ldr	r3, [pc, #112]	; (1e48 <system_init+0x1b4>)
    1dd8:	4798      	blx	r3

	SPI_HI3593_init();
    1dda:	4b1c      	ldr	r3, [pc, #112]	; (1e4c <system_init+0x1b8>)
    1ddc:	4798      	blx	r3

	I2C_FANS_init();
    1dde:	4b1c      	ldr	r3, [pc, #112]	; (1e50 <system_init+0x1bc>)
    1de0:	4798      	blx	r3

	TIMER_USB_init();
    1de2:	4b1c      	ldr	r3, [pc, #112]	; (1e54 <system_init+0x1c0>)
    1de4:	4798      	blx	r3
	TIMER_ARINC_init();
    1de6:	4b1c      	ldr	r3, [pc, #112]	; (1e58 <system_init+0x1c4>)
    1de8:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1dea:	4b1c      	ldr	r3, [pc, #112]	; (1e5c <system_init+0x1c8>)
    1dec:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1dee:	4b1c      	ldr	r3, [pc, #112]	; (1e60 <system_init+0x1cc>)
    1df0:	4798      	blx	r3
	TIMER_EVENT_init();
    1df2:	4b1c      	ldr	r3, [pc, #112]	; (1e64 <system_init+0x1d0>)
    1df4:	4798      	blx	r3
	LIVE_PULSE_init();
    1df6:	4b1c      	ldr	r3, [pc, #112]	; (1e68 <system_init+0x1d4>)
    1df8:	4798      	blx	r3

	TIMER_HVAC_init();
    1dfa:	4b1c      	ldr	r3, [pc, #112]	; (1e6c <system_init+0x1d8>)
    1dfc:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1dfe:	4b1c      	ldr	r3, [pc, #112]	; (1e70 <system_init+0x1dc>)
    1e00:	4798      	blx	r3

	TIMER_CCU_init();
    1e02:	4b1c      	ldr	r3, [pc, #112]	; (1e74 <system_init+0x1e0>)
    1e04:	4798      	blx	r3

	CDCUSB_init();
    1e06:	4b1c      	ldr	r3, [pc, #112]	; (1e78 <system_init+0x1e4>)
    1e08:	4798      	blx	r3

	WATCHDOG_init();
    1e0a:	4b1c      	ldr	r3, [pc, #112]	; (1e7c <system_init+0x1e8>)
    1e0c:	4798      	blx	r3
	CAN_CCU_init();
    1e0e:	4b1c      	ldr	r3, [pc, #112]	; (1e80 <system_init+0x1ec>)
    1e10:	4798      	blx	r3
}
    1e12:	bf00      	nop
    1e14:	bd80      	pop	{r7, pc}
    1e16:	bf00      	nop
    1e18:	00001199 	.word	0x00001199
    1e1c:	00001161 	.word	0x00001161
    1e20:	00001129 	.word	0x00001129
    1e24:	00001109 	.word	0x00001109
    1e28:	000010d5 	.word	0x000010d5
    1e2c:	000011f9 	.word	0x000011f9
    1e30:	00001225 	.word	0x00001225
    1e34:	0000134d 	.word	0x0000134d
    1e38:	00001495 	.word	0x00001495
    1e3c:	000014d9 	.word	0x000014d9
    1e40:	00001569 	.word	0x00001569
    1e44:	00001635 	.word	0x00001635
    1e48:	000016cd 	.word	0x000016cd
    1e4c:	00001799 	.word	0x00001799
    1e50:	00001831 	.word	0x00001831
    1e54:	0000185d 	.word	0x0000185d
    1e58:	000018a5 	.word	0x000018a5
    1e5c:	000018ed 	.word	0x000018ed
    1e60:	00001935 	.word	0x00001935
    1e64:	0000197d 	.word	0x0000197d
    1e68:	000019fd 	.word	0x000019fd
    1e6c:	00001a5d 	.word	0x00001a5d
    1e70:	00001ab5 	.word	0x00001ab5
    1e74:	00001b0d 	.word	0x00001b0d
    1e78:	00001bd1 	.word	0x00001bd1
    1e7c:	00001c09 	.word	0x00001c09
    1e80:	00001c51 	.word	0x00001c51

00001e84 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	4603      	mov	r3, r0
    1e8c:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    1e8e:	88fb      	ldrh	r3, [r7, #6]
    1e90:	f003 0303 	and.w	r3, r3, #3
    1e94:	2b00      	cmp	r3, #0
    1e96:	d001      	beq.n	1e9c <leap_year+0x18>
		return false;
    1e98:	2300      	movs	r3, #0
    1e9a:	e000      	b.n	1e9e <leap_year+0x1a>
	} else {
		return true;
    1e9c:	2301      	movs	r3, #1
	}
}
    1e9e:	4618      	mov	r0, r3
    1ea0:	370c      	adds	r7, #12
    1ea2:	46bd      	mov	sp, r7
    1ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea8:	4770      	bx	lr
	...

00001eac <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b084      	sub	sp, #16
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]
    1eb4:	460b      	mov	r3, r1
    1eb6:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    1eb8:	2300      	movs	r3, #0
    1eba:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	b29b      	uxth	r3, r3
    1ec0:	4618      	mov	r0, r3
    1ec2:	4b2f      	ldr	r3, [pc, #188]	; (1f80 <get_secs_in_month+0xd4>)
    1ec4:	4798      	blx	r3
    1ec6:	4603      	mov	r3, r0
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d028      	beq.n	1f1e <get_secs_in_month+0x72>
		switch (month) {
    1ecc:	78fb      	ldrb	r3, [r7, #3]
    1ece:	3b01      	subs	r3, #1
    1ed0:	2b0b      	cmp	r3, #11
    1ed2:	d84c      	bhi.n	1f6e <get_secs_in_month+0xc2>
    1ed4:	a201      	add	r2, pc, #4	; (adr r2, 1edc <get_secs_in_month+0x30>)
    1ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1eda:	bf00      	nop
    1edc:	00001f0d 	.word	0x00001f0d
    1ee0:	00001f13 	.word	0x00001f13
    1ee4:	00001f0d 	.word	0x00001f0d
    1ee8:	00001f19 	.word	0x00001f19
    1eec:	00001f0d 	.word	0x00001f0d
    1ef0:	00001f19 	.word	0x00001f19
    1ef4:	00001f0d 	.word	0x00001f0d
    1ef8:	00001f0d 	.word	0x00001f0d
    1efc:	00001f19 	.word	0x00001f19
    1f00:	00001f0d 	.word	0x00001f0d
    1f04:	00001f19 	.word	0x00001f19
    1f08:	00001f0d 	.word	0x00001f0d
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1f0c:	4b1d      	ldr	r3, [pc, #116]	; (1f84 <get_secs_in_month+0xd8>)
    1f0e:	60fb      	str	r3, [r7, #12]
			break;
    1f10:	e030      	b.n	1f74 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    1f12:	4b1d      	ldr	r3, [pc, #116]	; (1f88 <get_secs_in_month+0xdc>)
    1f14:	60fb      	str	r3, [r7, #12]
			break;
    1f16:	e02d      	b.n	1f74 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1f18:	4b1c      	ldr	r3, [pc, #112]	; (1f8c <get_secs_in_month+0xe0>)
    1f1a:	60fb      	str	r3, [r7, #12]
			break;
    1f1c:	e02a      	b.n	1f74 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    1f1e:	78fb      	ldrb	r3, [r7, #3]
    1f20:	3b01      	subs	r3, #1
    1f22:	2b0b      	cmp	r3, #11
    1f24:	d825      	bhi.n	1f72 <get_secs_in_month+0xc6>
    1f26:	a201      	add	r2, pc, #4	; (adr r2, 1f2c <get_secs_in_month+0x80>)
    1f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f2c:	00001f5d 	.word	0x00001f5d
    1f30:	00001f63 	.word	0x00001f63
    1f34:	00001f5d 	.word	0x00001f5d
    1f38:	00001f69 	.word	0x00001f69
    1f3c:	00001f5d 	.word	0x00001f5d
    1f40:	00001f69 	.word	0x00001f69
    1f44:	00001f5d 	.word	0x00001f5d
    1f48:	00001f5d 	.word	0x00001f5d
    1f4c:	00001f69 	.word	0x00001f69
    1f50:	00001f5d 	.word	0x00001f5d
    1f54:	00001f69 	.word	0x00001f69
    1f58:	00001f5d 	.word	0x00001f5d
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1f5c:	4b09      	ldr	r3, [pc, #36]	; (1f84 <get_secs_in_month+0xd8>)
    1f5e:	60fb      	str	r3, [r7, #12]
			break;
    1f60:	e008      	b.n	1f74 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    1f62:	4b0b      	ldr	r3, [pc, #44]	; (1f90 <get_secs_in_month+0xe4>)
    1f64:	60fb      	str	r3, [r7, #12]
			break;
    1f66:	e005      	b.n	1f74 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1f68:	4b08      	ldr	r3, [pc, #32]	; (1f8c <get_secs_in_month+0xe0>)
    1f6a:	60fb      	str	r3, [r7, #12]
			break;
    1f6c:	e002      	b.n	1f74 <get_secs_in_month+0xc8>
			break;
    1f6e:	bf00      	nop
    1f70:	e000      	b.n	1f74 <get_secs_in_month+0xc8>
		default:
			break;
    1f72:	bf00      	nop
		}
	}

	return sec_in_month;
    1f74:	68fb      	ldr	r3, [r7, #12]
}
    1f76:	4618      	mov	r0, r3
    1f78:	3710      	adds	r7, #16
    1f7a:	46bd      	mov	sp, r7
    1f7c:	bd80      	pop	{r7, pc}
    1f7e:	bf00      	nop
    1f80:	00001e85 	.word	0x00001e85
    1f84:	0028de80 	.word	0x0028de80
    1f88:	00263b80 	.word	0x00263b80
    1f8c:	00278d00 	.word	0x00278d00
    1f90:	0024ea00 	.word	0x0024ea00

00001f94 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    1f94:	b580      	push	{r7, lr}
    1f96:	b08a      	sub	sp, #40	; 0x28
    1f98:	af00      	add	r7, sp, #0
    1f9a:	60f8      	str	r0, [r7, #12]
    1f9c:	60b9      	str	r1, [r7, #8]
    1f9e:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    1fa0:	68fb      	ldr	r3, [r7, #12]
    1fa2:	699b      	ldr	r3, [r3, #24]
    1fa4:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    1fa6:	2301      	movs	r3, #1
    1fa8:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    1faa:	2301      	movs	r3, #1
    1fac:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    1fae:	2300      	movs	r3, #0
    1fb0:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    1fb2:	2300      	movs	r3, #0
    1fb4:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    1fb6:	68bb      	ldr	r3, [r7, #8]
    1fb8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    1fba:	6a3b      	ldr	r3, [r7, #32]
    1fbc:	b29b      	uxth	r3, r3
    1fbe:	4618      	mov	r0, r3
    1fc0:	4b32      	ldr	r3, [pc, #200]	; (208c <convert_timestamp_to_datetime+0xf8>)
    1fc2:	4798      	blx	r3
    1fc4:	4603      	mov	r3, r0
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d001      	beq.n	1fce <convert_timestamp_to_datetime+0x3a>
    1fca:	4b31      	ldr	r3, [pc, #196]	; (2090 <convert_timestamp_to_datetime+0xfc>)
    1fcc:	e000      	b.n	1fd0 <convert_timestamp_to_datetime+0x3c>
    1fce:	4b31      	ldr	r3, [pc, #196]	; (2094 <convert_timestamp_to_datetime+0x100>)
    1fd0:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    1fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1fd4:	69bb      	ldr	r3, [r7, #24]
    1fd6:	429a      	cmp	r2, r3
    1fd8:	d307      	bcc.n	1fea <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    1fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1fdc:	69bb      	ldr	r3, [r7, #24]
    1fde:	1ad3      	subs	r3, r2, r3
    1fe0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    1fe2:	6a3b      	ldr	r3, [r7, #32]
    1fe4:	3301      	adds	r3, #1
    1fe6:	623b      	str	r3, [r7, #32]
    1fe8:	e7e7      	b.n	1fba <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    1fea:	7ffb      	ldrb	r3, [r7, #31]
    1fec:	4619      	mov	r1, r3
    1fee:	6a38      	ldr	r0, [r7, #32]
    1ff0:	4b29      	ldr	r3, [pc, #164]	; (2098 <convert_timestamp_to_datetime+0x104>)
    1ff2:	4798      	blx	r3
    1ff4:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    1ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1ff8:	697b      	ldr	r3, [r7, #20]
    1ffa:	429a      	cmp	r2, r3
    1ffc:	d307      	bcc.n	200e <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    1ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2000:	697b      	ldr	r3, [r7, #20]
    2002:	1ad3      	subs	r3, r2, r3
    2004:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    2006:	7ffb      	ldrb	r3, [r7, #31]
    2008:	3301      	adds	r3, #1
    200a:	77fb      	strb	r3, [r7, #31]
    200c:	e7ed      	b.n	1fea <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2010:	4a22      	ldr	r2, [pc, #136]	; (209c <convert_timestamp_to_datetime+0x108>)
    2012:	4293      	cmp	r3, r2
    2014:	d909      	bls.n	202a <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    2016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2018:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    201c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    2020:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    2022:	7fbb      	ldrb	r3, [r7, #30]
    2024:	3301      	adds	r3, #1
    2026:	77bb      	strb	r3, [r7, #30]
    2028:	e7f1      	b.n	200e <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    202c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    2030:	d307      	bcc.n	2042 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    2032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2034:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    2038:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    203a:	7f7b      	ldrb	r3, [r7, #29]
    203c:	3301      	adds	r3, #1
    203e:	777b      	strb	r3, [r7, #29]
    2040:	e7f3      	b.n	202a <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    2042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2044:	2b3b      	cmp	r3, #59	; 0x3b
    2046:	d906      	bls.n	2056 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    2048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    204a:	3b3c      	subs	r3, #60	; 0x3c
    204c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    204e:	7f3b      	ldrb	r3, [r7, #28]
    2050:	3301      	adds	r3, #1
    2052:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    2054:	e7f5      	b.n	2042 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    2056:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    2058:	6a3b      	ldr	r3, [r7, #32]
    205a:	b29a      	uxth	r2, r3
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    2060:	687b      	ldr	r3, [r7, #4]
    2062:	7ffa      	ldrb	r2, [r7, #31]
    2064:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	7fba      	ldrb	r2, [r7, #30]
    206a:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    206c:	687b      	ldr	r3, [r7, #4]
    206e:	7f7a      	ldrb	r2, [r7, #29]
    2070:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	7f3a      	ldrb	r2, [r7, #28]
    2076:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    2078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    207a:	b2da      	uxtb	r2, r3
    207c:	687b      	ldr	r3, [r7, #4]
    207e:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    2080:	2300      	movs	r3, #0
}
    2082:	4618      	mov	r0, r3
    2084:	3728      	adds	r7, #40	; 0x28
    2086:	46bd      	mov	sp, r7
    2088:	bd80      	pop	{r7, pc}
    208a:	bf00      	nop
    208c:	00001e85 	.word	0x00001e85
    2090:	01e28500 	.word	0x01e28500
    2094:	01e13380 	.word	0x01e13380
    2098:	00001ead 	.word	0x00001ead
    209c:	0001517f 	.word	0x0001517f

000020a0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b084      	sub	sp, #16
    20a4:	af00      	add	r7, sp, #0
    20a6:	6078      	str	r0, [r7, #4]
    20a8:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    20aa:	2300      	movs	r3, #0
    20ac:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	2b00      	cmp	r3, #0
    20b2:	bf14      	ite	ne
    20b4:	2301      	movne	r3, #1
    20b6:	2300      	moveq	r3, #0
    20b8:	b2db      	uxtb	r3, r3
    20ba:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    20be:	4911      	ldr	r1, [pc, #68]	; (2104 <calendar_init+0x64>)
    20c0:	4618      	mov	r0, r3
    20c2:	4b11      	ldr	r3, [pc, #68]	; (2108 <calendar_init+0x68>)
    20c4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    20c6:	687b      	ldr	r3, [r7, #4]
    20c8:	681a      	ldr	r2, [r3, #0]
    20ca:	683b      	ldr	r3, [r7, #0]
    20cc:	429a      	cmp	r2, r3
    20ce:	d101      	bne.n	20d4 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    20d0:	2300      	movs	r3, #0
    20d2:	e013      	b.n	20fc <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    20d4:	687b      	ldr	r3, [r7, #4]
    20d6:	681b      	ldr	r3, [r3, #0]
    20d8:	2b00      	cmp	r3, #0
    20da:	d002      	beq.n	20e2 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    20dc:	f06f 0311 	mvn.w	r3, #17
    20e0:	e00c      	b.n	20fc <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	683a      	ldr	r2, [r7, #0]
    20e6:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	4618      	mov	r0, r3
    20ec:	4b07      	ldr	r3, [pc, #28]	; (210c <calendar_init+0x6c>)
    20ee:	4798      	blx	r3
    20f0:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	f240 72b2 	movw	r2, #1970	; 0x7b2
    20f8:	619a      	str	r2, [r3, #24]

	return ret;
    20fa:	68fb      	ldr	r3, [r7, #12]
}
    20fc:	4618      	mov	r0, r3
    20fe:	3710      	adds	r7, #16
    2100:	46bd      	mov	sp, r7
    2102:	bd80      	pop	{r7, pc}
    2104:	00010730 	.word	0x00010730
    2108:	00003825 	.word	0x00003825
    210c:	000058a9 	.word	0x000058a9

00002110 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    2110:	b580      	push	{r7, lr}
    2112:	b084      	sub	sp, #16
    2114:	af00      	add	r7, sp, #0
    2116:	6078      	str	r0, [r7, #4]
    2118:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    211a:	687b      	ldr	r3, [r7, #4]
    211c:	2b00      	cmp	r3, #0
    211e:	bf14      	ite	ne
    2120:	2301      	movne	r3, #1
    2122:	2300      	moveq	r3, #0
    2124:	b2db      	uxtb	r3, r3
    2126:	f240 223b 	movw	r2, #571	; 0x23b
    212a:	4909      	ldr	r1, [pc, #36]	; (2150 <calendar_get_date_time+0x40>)
    212c:	4618      	mov	r0, r3
    212e:	4b09      	ldr	r3, [pc, #36]	; (2154 <calendar_get_date_time+0x44>)
    2130:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	4618      	mov	r0, r3
    2136:	4b08      	ldr	r3, [pc, #32]	; (2158 <calendar_get_date_time+0x48>)
    2138:	4798      	blx	r3
    213a:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    213c:	683a      	ldr	r2, [r7, #0]
    213e:	68f9      	ldr	r1, [r7, #12]
    2140:	6878      	ldr	r0, [r7, #4]
    2142:	4b06      	ldr	r3, [pc, #24]	; (215c <calendar_get_date_time+0x4c>)
    2144:	4798      	blx	r3

	return ERR_NONE;
    2146:	2300      	movs	r3, #0
}
    2148:	4618      	mov	r0, r3
    214a:	3710      	adds	r7, #16
    214c:	46bd      	mov	sp, r7
    214e:	bd80      	pop	{r7, pc}
    2150:	00010730 	.word	0x00010730
    2154:	00003825 	.word	0x00003825
    2158:	00005961 	.word	0x00005961
    215c:	00001f95 	.word	0x00001f95

00002160 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2160:	b580      	push	{r7, lr}
    2162:	b084      	sub	sp, #16
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
    2168:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	2b00      	cmp	r3, #0
    216e:	d004      	beq.n	217a <can_async_init+0x1a>
    2170:	683b      	ldr	r3, [r7, #0]
    2172:	2b00      	cmp	r3, #0
    2174:	d001      	beq.n	217a <can_async_init+0x1a>
    2176:	2301      	movs	r3, #1
    2178:	e000      	b.n	217c <can_async_init+0x1c>
    217a:	2300      	movs	r3, #0
    217c:	f003 0301 	and.w	r3, r3, #1
    2180:	b2db      	uxtb	r3, r3
    2182:	2241      	movs	r2, #65	; 0x41
    2184:	490e      	ldr	r1, [pc, #56]	; (21c0 <can_async_init+0x60>)
    2186:	4618      	mov	r0, r3
    2188:	4b0e      	ldr	r3, [pc, #56]	; (21c4 <can_async_init+0x64>)
    218a:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	6839      	ldr	r1, [r7, #0]
    2190:	4618      	mov	r0, r3
    2192:	4b0d      	ldr	r3, [pc, #52]	; (21c8 <can_async_init+0x68>)
    2194:	4798      	blx	r3
    2196:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2198:	68fb      	ldr	r3, [r7, #12]
    219a:	2b00      	cmp	r3, #0
    219c:	d001      	beq.n	21a2 <can_async_init+0x42>
		return rc;
    219e:	68fb      	ldr	r3, [r7, #12]
    21a0:	e009      	b.n	21b6 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	4a09      	ldr	r2, [pc, #36]	; (21cc <can_async_init+0x6c>)
    21a6:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    21a8:	687b      	ldr	r3, [r7, #4]
    21aa:	4a09      	ldr	r2, [pc, #36]	; (21d0 <can_async_init+0x70>)
    21ac:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	4a08      	ldr	r2, [pc, #32]	; (21d4 <can_async_init+0x74>)
    21b2:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    21b4:	2300      	movs	r3, #0
}
    21b6:	4618      	mov	r0, r3
    21b8:	3710      	adds	r7, #16
    21ba:	46bd      	mov	sp, r7
    21bc:	bd80      	pop	{r7, pc}
    21be:	bf00      	nop
    21c0:	0001074c 	.word	0x0001074c
    21c4:	00003825 	.word	0x00003825
    21c8:	00003d81 	.word	0x00003d81
    21cc:	000021d9 	.word	0x000021d9
    21d0:	000021fd 	.word	0x000021fd
    21d4:	00002221 	.word	0x00002221

000021d8 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    21d8:	b580      	push	{r7, lr}
    21da:	b084      	sub	sp, #16
    21dc:	af00      	add	r7, sp, #0
    21de:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    21e4:	68fb      	ldr	r3, [r7, #12]
    21e6:	69db      	ldr	r3, [r3, #28]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d003      	beq.n	21f4 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    21ec:	68fb      	ldr	r3, [r7, #12]
    21ee:	69db      	ldr	r3, [r3, #28]
    21f0:	68f8      	ldr	r0, [r7, #12]
    21f2:	4798      	blx	r3
	}
}
    21f4:	bf00      	nop
    21f6:	3710      	adds	r7, #16
    21f8:	46bd      	mov	sp, r7
    21fa:	bd80      	pop	{r7, pc}

000021fc <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b084      	sub	sp, #16
    2200:	af00      	add	r7, sp, #0
    2202:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2208:	68fb      	ldr	r3, [r7, #12]
    220a:	6a1b      	ldr	r3, [r3, #32]
    220c:	2b00      	cmp	r3, #0
    220e:	d003      	beq.n	2218 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2210:	68fb      	ldr	r3, [r7, #12]
    2212:	6a1b      	ldr	r3, [r3, #32]
    2214:	68f8      	ldr	r0, [r7, #12]
    2216:	4798      	blx	r3
	}
}
    2218:	bf00      	nop
    221a:	3710      	adds	r7, #16
    221c:	46bd      	mov	sp, r7
    221e:	bd80      	pop	{r7, pc}

00002220 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2220:	b580      	push	{r7, lr}
    2222:	b084      	sub	sp, #16
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	460b      	mov	r3, r1
    222a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2230:	68fb      	ldr	r3, [r7, #12]
    2232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2234:	2b00      	cmp	r3, #0
    2236:	d005      	beq.n	2244 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2238:	68fb      	ldr	r3, [r7, #12]
    223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    223c:	78fa      	ldrb	r2, [r7, #3]
    223e:	4611      	mov	r1, r2
    2240:	68f8      	ldr	r0, [r7, #12]
    2242:	4798      	blx	r3
	}
}
    2244:	bf00      	nop
    2246:	3710      	adds	r7, #16
    2248:	46bd      	mov	sp, r7
    224a:	bd80      	pop	{r7, pc}

0000224c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    224c:	b580      	push	{r7, lr}
    224e:	b082      	sub	sp, #8
    2250:	af00      	add	r7, sp, #0
    2252:	6078      	str	r0, [r7, #4]
    2254:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	2b00      	cmp	r3, #0
    225a:	d004      	beq.n	2266 <crc_sync_init+0x1a>
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	2b00      	cmp	r3, #0
    2260:	d001      	beq.n	2266 <crc_sync_init+0x1a>
    2262:	2301      	movs	r3, #1
    2264:	e000      	b.n	2268 <crc_sync_init+0x1c>
    2266:	2300      	movs	r3, #0
    2268:	f003 0301 	and.w	r3, r3, #1
    226c:	b2db      	uxtb	r3, r3
    226e:	222b      	movs	r2, #43	; 0x2b
    2270:	4906      	ldr	r1, [pc, #24]	; (228c <crc_sync_init+0x40>)
    2272:	4618      	mov	r0, r3
    2274:	4b06      	ldr	r3, [pc, #24]	; (2290 <crc_sync_init+0x44>)
    2276:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	6839      	ldr	r1, [r7, #0]
    227c:	4618      	mov	r0, r3
    227e:	4b05      	ldr	r3, [pc, #20]	; (2294 <crc_sync_init+0x48>)
    2280:	4798      	blx	r3
    2282:	4603      	mov	r3, r0
}
    2284:	4618      	mov	r0, r3
    2286:	3708      	adds	r7, #8
    2288:	46bd      	mov	sp, r7
    228a:	bd80      	pop	{r7, pc}
    228c:	00010768 	.word	0x00010768
    2290:	00003825 	.word	0x00003825
    2294:	00004129 	.word	0x00004129

00002298 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2298:	b580      	push	{r7, lr}
    229a:	af00      	add	r7, sp, #0
	return _event_system_init();
    229c:	4b02      	ldr	r3, [pc, #8]	; (22a8 <event_system_init+0x10>)
    229e:	4798      	blx	r3
    22a0:	4603      	mov	r3, r0
}
    22a2:	4618      	mov	r0, r3
    22a4:	bd80      	pop	{r7, pc}
    22a6:	bf00      	nop
    22a8:	000048e5 	.word	0x000048e5

000022ac <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	b082      	sub	sp, #8
    22b0:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    22b2:	2300      	movs	r3, #0
    22b4:	80fb      	strh	r3, [r7, #6]
    22b6:	e00e      	b.n	22d6 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    22b8:	88fb      	ldrh	r3, [r7, #6]
    22ba:	4a0c      	ldr	r2, [pc, #48]	; (22ec <ext_irq_init+0x40>)
    22bc:	00db      	lsls	r3, r3, #3
    22be:	4413      	add	r3, r2
    22c0:	f04f 32ff 	mov.w	r2, #4294967295
    22c4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    22c6:	88fb      	ldrh	r3, [r7, #6]
    22c8:	4a08      	ldr	r2, [pc, #32]	; (22ec <ext_irq_init+0x40>)
    22ca:	2100      	movs	r1, #0
    22cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    22d0:	88fb      	ldrh	r3, [r7, #6]
    22d2:	3301      	adds	r3, #1
    22d4:	80fb      	strh	r3, [r7, #6]
    22d6:	88fb      	ldrh	r3, [r7, #6]
    22d8:	2b08      	cmp	r3, #8
    22da:	d9ed      	bls.n	22b8 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    22dc:	4804      	ldr	r0, [pc, #16]	; (22f0 <ext_irq_init+0x44>)
    22de:	4b05      	ldr	r3, [pc, #20]	; (22f4 <ext_irq_init+0x48>)
    22e0:	4798      	blx	r3
    22e2:	4603      	mov	r3, r0
}
    22e4:	4618      	mov	r0, r3
    22e6:	3708      	adds	r7, #8
    22e8:	46bd      	mov	sp, r7
    22ea:	bd80      	pop	{r7, pc}
    22ec:	20000a8c 	.word	0x20000a8c
    22f0:	00002451 	.word	0x00002451
    22f4:	00004469 	.word	0x00004469

000022f8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    22f8:	b580      	push	{r7, lr}
    22fa:	b086      	sub	sp, #24
    22fc:	af00      	add	r7, sp, #0
    22fe:	6078      	str	r0, [r7, #4]
    2300:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2302:	2300      	movs	r3, #0
    2304:	75fb      	strb	r3, [r7, #23]
    2306:	2300      	movs	r3, #0
    2308:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    230a:	2300      	movs	r3, #0
    230c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    230e:	e012      	b.n	2336 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2310:	7dfb      	ldrb	r3, [r7, #23]
    2312:	4a4d      	ldr	r2, [pc, #308]	; (2448 <ext_irq_register+0x150>)
    2314:	00db      	lsls	r3, r3, #3
    2316:	4413      	add	r3, r2
    2318:	685a      	ldr	r2, [r3, #4]
    231a:	687b      	ldr	r3, [r7, #4]
    231c:	429a      	cmp	r2, r3
    231e:	d107      	bne.n	2330 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2320:	7dfb      	ldrb	r3, [r7, #23]
    2322:	4949      	ldr	r1, [pc, #292]	; (2448 <ext_irq_register+0x150>)
    2324:	683a      	ldr	r2, [r7, #0]
    2326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    232a:	2301      	movs	r3, #1
    232c:	757b      	strb	r3, [r7, #21]
			break;
    232e:	e005      	b.n	233c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2330:	7dfb      	ldrb	r3, [r7, #23]
    2332:	3301      	adds	r3, #1
    2334:	75fb      	strb	r3, [r7, #23]
    2336:	7dfb      	ldrb	r3, [r7, #23]
    2338:	2b08      	cmp	r3, #8
    233a:	d9e9      	bls.n	2310 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    233c:	683b      	ldr	r3, [r7, #0]
    233e:	2b00      	cmp	r3, #0
    2340:	d10e      	bne.n	2360 <ext_irq_register+0x68>
		if (!found) {
    2342:	7d7b      	ldrb	r3, [r7, #21]
    2344:	f083 0301 	eor.w	r3, r3, #1
    2348:	b2db      	uxtb	r3, r3
    234a:	2b00      	cmp	r3, #0
    234c:	d002      	beq.n	2354 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    234e:	f06f 030c 	mvn.w	r3, #12
    2352:	e074      	b.n	243e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2354:	2100      	movs	r1, #0
    2356:	6878      	ldr	r0, [r7, #4]
    2358:	4b3c      	ldr	r3, [pc, #240]	; (244c <ext_irq_register+0x154>)
    235a:	4798      	blx	r3
    235c:	4603      	mov	r3, r0
    235e:	e06e      	b.n	243e <ext_irq_register+0x146>
	}

	if (!found) {
    2360:	7d7b      	ldrb	r3, [r7, #21]
    2362:	f083 0301 	eor.w	r3, r3, #1
    2366:	b2db      	uxtb	r3, r3
    2368:	2b00      	cmp	r3, #0
    236a:	d05a      	beq.n	2422 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    236c:	2300      	movs	r3, #0
    236e:	75fb      	strb	r3, [r7, #23]
    2370:	e016      	b.n	23a0 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2372:	7dfb      	ldrb	r3, [r7, #23]
    2374:	4a34      	ldr	r2, [pc, #208]	; (2448 <ext_irq_register+0x150>)
    2376:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    237a:	2b00      	cmp	r3, #0
    237c:	d10d      	bne.n	239a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    237e:	7dfb      	ldrb	r3, [r7, #23]
    2380:	4931      	ldr	r1, [pc, #196]	; (2448 <ext_irq_register+0x150>)
    2382:	683a      	ldr	r2, [r7, #0]
    2384:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2388:	7dfb      	ldrb	r3, [r7, #23]
    238a:	4a2f      	ldr	r2, [pc, #188]	; (2448 <ext_irq_register+0x150>)
    238c:	00db      	lsls	r3, r3, #3
    238e:	4413      	add	r3, r2
    2390:	687a      	ldr	r2, [r7, #4]
    2392:	605a      	str	r2, [r3, #4]
				found           = true;
    2394:	2301      	movs	r3, #1
    2396:	757b      	strb	r3, [r7, #21]
				break;
    2398:	e005      	b.n	23a6 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    239a:	7dfb      	ldrb	r3, [r7, #23]
    239c:	3301      	adds	r3, #1
    239e:	75fb      	strb	r3, [r7, #23]
    23a0:	7dfb      	ldrb	r3, [r7, #23]
    23a2:	2b08      	cmp	r3, #8
    23a4:	d9e5      	bls.n	2372 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    23a6:	e036      	b.n	2416 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    23a8:	7dfb      	ldrb	r3, [r7, #23]
    23aa:	4a27      	ldr	r2, [pc, #156]	; (2448 <ext_irq_register+0x150>)
    23ac:	00db      	lsls	r3, r3, #3
    23ae:	4413      	add	r3, r2
    23b0:	685a      	ldr	r2, [r3, #4]
    23b2:	7dbb      	ldrb	r3, [r7, #22]
    23b4:	4924      	ldr	r1, [pc, #144]	; (2448 <ext_irq_register+0x150>)
    23b6:	00db      	lsls	r3, r3, #3
    23b8:	440b      	add	r3, r1
    23ba:	685b      	ldr	r3, [r3, #4]
    23bc:	429a      	cmp	r2, r3
    23be:	d227      	bcs.n	2410 <ext_irq_register+0x118>
    23c0:	7dbb      	ldrb	r3, [r7, #22]
    23c2:	4a21      	ldr	r2, [pc, #132]	; (2448 <ext_irq_register+0x150>)
    23c4:	00db      	lsls	r3, r3, #3
    23c6:	4413      	add	r3, r2
    23c8:	685b      	ldr	r3, [r3, #4]
    23ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    23ce:	d01f      	beq.n	2410 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    23d0:	7dbb      	ldrb	r3, [r7, #22]
    23d2:	491d      	ldr	r1, [pc, #116]	; (2448 <ext_irq_register+0x150>)
    23d4:	f107 020c 	add.w	r2, r7, #12
    23d8:	00db      	lsls	r3, r3, #3
    23da:	440b      	add	r3, r1
    23dc:	e893 0003 	ldmia.w	r3, {r0, r1}
    23e0:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    23e4:	7dbb      	ldrb	r3, [r7, #22]
    23e6:	7dfa      	ldrb	r2, [r7, #23]
    23e8:	4817      	ldr	r0, [pc, #92]	; (2448 <ext_irq_register+0x150>)
    23ea:	4917      	ldr	r1, [pc, #92]	; (2448 <ext_irq_register+0x150>)
    23ec:	00db      	lsls	r3, r3, #3
    23ee:	4403      	add	r3, r0
    23f0:	00d2      	lsls	r2, r2, #3
    23f2:	440a      	add	r2, r1
    23f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    23f8:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    23fc:	7dfb      	ldrb	r3, [r7, #23]
    23fe:	4a12      	ldr	r2, [pc, #72]	; (2448 <ext_irq_register+0x150>)
    2400:	00db      	lsls	r3, r3, #3
    2402:	4413      	add	r3, r2
    2404:	f107 020c 	add.w	r2, r7, #12
    2408:	e892 0003 	ldmia.w	r2, {r0, r1}
    240c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2410:	7dbb      	ldrb	r3, [r7, #22]
    2412:	3301      	adds	r3, #1
    2414:	75bb      	strb	r3, [r7, #22]
    2416:	7dbb      	ldrb	r3, [r7, #22]
    2418:	2b08      	cmp	r3, #8
    241a:	d802      	bhi.n	2422 <ext_irq_register+0x12a>
    241c:	7dfb      	ldrb	r3, [r7, #23]
    241e:	2b08      	cmp	r3, #8
    2420:	d9c2      	bls.n	23a8 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2422:	7d7b      	ldrb	r3, [r7, #21]
    2424:	f083 0301 	eor.w	r3, r3, #1
    2428:	b2db      	uxtb	r3, r3
    242a:	2b00      	cmp	r3, #0
    242c:	d002      	beq.n	2434 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    242e:	f06f 030c 	mvn.w	r3, #12
    2432:	e004      	b.n	243e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2434:	2101      	movs	r1, #1
    2436:	6878      	ldr	r0, [r7, #4]
    2438:	4b04      	ldr	r3, [pc, #16]	; (244c <ext_irq_register+0x154>)
    243a:	4798      	blx	r3
    243c:	4603      	mov	r3, r0
}
    243e:	4618      	mov	r0, r3
    2440:	3718      	adds	r7, #24
    2442:	46bd      	mov	sp, r7
    2444:	bd80      	pop	{r7, pc}
    2446:	bf00      	nop
    2448:	20000a8c 	.word	0x20000a8c
    244c:	000045fd 	.word	0x000045fd

00002450 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2450:	b580      	push	{r7, lr}
    2452:	b084      	sub	sp, #16
    2454:	af00      	add	r7, sp, #0
    2456:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2458:	2300      	movs	r3, #0
    245a:	73fb      	strb	r3, [r7, #15]
    245c:	2309      	movs	r3, #9
    245e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2460:	e02a      	b.n	24b8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2462:	7bba      	ldrb	r2, [r7, #14]
    2464:	7bfb      	ldrb	r3, [r7, #15]
    2466:	4413      	add	r3, r2
    2468:	105b      	asrs	r3, r3, #1
    246a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    246c:	7b7b      	ldrb	r3, [r7, #13]
    246e:	2b08      	cmp	r3, #8
    2470:	d827      	bhi.n	24c2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2472:	7b7b      	ldrb	r3, [r7, #13]
    2474:	4a16      	ldr	r2, [pc, #88]	; (24d0 <process_ext_irq+0x80>)
    2476:	00db      	lsls	r3, r3, #3
    2478:	4413      	add	r3, r2
    247a:	685a      	ldr	r2, [r3, #4]
    247c:	687b      	ldr	r3, [r7, #4]
    247e:	429a      	cmp	r2, r3
    2480:	d10b      	bne.n	249a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2482:	7b7b      	ldrb	r3, [r7, #13]
    2484:	4a12      	ldr	r2, [pc, #72]	; (24d0 <process_ext_irq+0x80>)
    2486:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    248a:	2b00      	cmp	r3, #0
    248c:	d01b      	beq.n	24c6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    248e:	7b7b      	ldrb	r3, [r7, #13]
    2490:	4a0f      	ldr	r2, [pc, #60]	; (24d0 <process_ext_irq+0x80>)
    2492:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2496:	4798      	blx	r3
			}
			return;
    2498:	e015      	b.n	24c6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    249a:	7b7b      	ldrb	r3, [r7, #13]
    249c:	4a0c      	ldr	r2, [pc, #48]	; (24d0 <process_ext_irq+0x80>)
    249e:	00db      	lsls	r3, r3, #3
    24a0:	4413      	add	r3, r2
    24a2:	685a      	ldr	r2, [r3, #4]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	429a      	cmp	r2, r3
    24a8:	d203      	bcs.n	24b2 <process_ext_irq+0x62>
			lower = middle + 1;
    24aa:	7b7b      	ldrb	r3, [r7, #13]
    24ac:	3301      	adds	r3, #1
    24ae:	73fb      	strb	r3, [r7, #15]
    24b0:	e002      	b.n	24b8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    24b2:	7b7b      	ldrb	r3, [r7, #13]
    24b4:	3b01      	subs	r3, #1
    24b6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    24b8:	7bba      	ldrb	r2, [r7, #14]
    24ba:	7bfb      	ldrb	r3, [r7, #15]
    24bc:	429a      	cmp	r2, r3
    24be:	d2d0      	bcs.n	2462 <process_ext_irq+0x12>
    24c0:	e002      	b.n	24c8 <process_ext_irq+0x78>
			return;
    24c2:	bf00      	nop
    24c4:	e000      	b.n	24c8 <process_ext_irq+0x78>
			return;
    24c6:	bf00      	nop
		}
	}
}
    24c8:	3710      	adds	r7, #16
    24ca:	46bd      	mov	sp, r7
    24cc:	bd80      	pop	{r7, pc}
    24ce:	bf00      	nop
    24d0:	20000a8c 	.word	0x20000a8c

000024d4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    24d4:	b580      	push	{r7, lr}
    24d6:	b08a      	sub	sp, #40	; 0x28
    24d8:	af00      	add	r7, sp, #0
    24da:	60f8      	str	r0, [r7, #12]
    24dc:	60b9      	str	r1, [r7, #8]
    24de:	4613      	mov	r3, r2
    24e0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    24e2:	68fb      	ldr	r3, [r7, #12]
    24e4:	3b14      	subs	r3, #20
    24e6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    24e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24ea:	8b9b      	ldrh	r3, [r3, #28]
    24ec:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    24ee:	88fb      	ldrh	r3, [r7, #6]
    24f0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    24f2:	f248 0301 	movw	r3, #32769	; 0x8001
    24f6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    24f8:	68bb      	ldr	r3, [r7, #8]
    24fa:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    24fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24fe:	f107 0214 	add.w	r2, r7, #20
    2502:	4611      	mov	r1, r2
    2504:	4618      	mov	r0, r3
    2506:	4b06      	ldr	r3, [pc, #24]	; (2520 <i2c_m_sync_read+0x4c>)
    2508:	4798      	blx	r3
    250a:	6238      	str	r0, [r7, #32]

	if (ret) {
    250c:	6a3b      	ldr	r3, [r7, #32]
    250e:	2b00      	cmp	r3, #0
    2510:	d001      	beq.n	2516 <i2c_m_sync_read+0x42>
		return ret;
    2512:	6a3b      	ldr	r3, [r7, #32]
    2514:	e000      	b.n	2518 <i2c_m_sync_read+0x44>
	}

	return n;
    2516:	88fb      	ldrh	r3, [r7, #6]
}
    2518:	4618      	mov	r0, r3
    251a:	3728      	adds	r7, #40	; 0x28
    251c:	46bd      	mov	sp, r7
    251e:	bd80      	pop	{r7, pc}
    2520:	000064c1 	.word	0x000064c1

00002524 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2524:	b580      	push	{r7, lr}
    2526:	b08a      	sub	sp, #40	; 0x28
    2528:	af00      	add	r7, sp, #0
    252a:	60f8      	str	r0, [r7, #12]
    252c:	60b9      	str	r1, [r7, #8]
    252e:	4613      	mov	r3, r2
    2530:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2532:	68fb      	ldr	r3, [r7, #12]
    2534:	3b14      	subs	r3, #20
    2536:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    253a:	8b9b      	ldrh	r3, [r3, #28]
    253c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    253e:	88fb      	ldrh	r3, [r7, #6]
    2540:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2546:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2548:	68bb      	ldr	r3, [r7, #8]
    254a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    254e:	f107 0214 	add.w	r2, r7, #20
    2552:	4611      	mov	r1, r2
    2554:	4618      	mov	r0, r3
    2556:	4b06      	ldr	r3, [pc, #24]	; (2570 <i2c_m_sync_write+0x4c>)
    2558:	4798      	blx	r3
    255a:	6238      	str	r0, [r7, #32]

	if (ret) {
    255c:	6a3b      	ldr	r3, [r7, #32]
    255e:	2b00      	cmp	r3, #0
    2560:	d001      	beq.n	2566 <i2c_m_sync_write+0x42>
		return ret;
    2562:	6a3b      	ldr	r3, [r7, #32]
    2564:	e000      	b.n	2568 <i2c_m_sync_write+0x44>
	}

	return n;
    2566:	88fb      	ldrh	r3, [r7, #6]
}
    2568:	4618      	mov	r0, r3
    256a:	3728      	adds	r7, #40	; 0x28
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}
    2570:	000064c1 	.word	0x000064c1

00002574 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2574:	b580      	push	{r7, lr}
    2576:	b084      	sub	sp, #16
    2578:	af00      	add	r7, sp, #0
    257a:	6078      	str	r0, [r7, #4]
    257c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    257e:	687b      	ldr	r3, [r7, #4]
    2580:	2b00      	cmp	r3, #0
    2582:	bf14      	ite	ne
    2584:	2301      	movne	r3, #1
    2586:	2300      	moveq	r3, #0
    2588:	b2db      	uxtb	r3, r3
    258a:	225e      	movs	r2, #94	; 0x5e
    258c:	490c      	ldr	r1, [pc, #48]	; (25c0 <i2c_m_sync_init+0x4c>)
    258e:	4618      	mov	r0, r3
    2590:	4b0c      	ldr	r3, [pc, #48]	; (25c4 <i2c_m_sync_init+0x50>)
    2592:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	6839      	ldr	r1, [r7, #0]
    2598:	4618      	mov	r0, r3
    259a:	4b0b      	ldr	r3, [pc, #44]	; (25c8 <i2c_m_sync_init+0x54>)
    259c:	4798      	blx	r3
    259e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    25a0:	68fb      	ldr	r3, [r7, #12]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d001      	beq.n	25aa <i2c_m_sync_init+0x36>
		return init_status;
    25a6:	68fb      	ldr	r3, [r7, #12]
    25a8:	e006      	b.n	25b8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	4a07      	ldr	r2, [pc, #28]	; (25cc <i2c_m_sync_init+0x58>)
    25ae:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	4a07      	ldr	r2, [pc, #28]	; (25d0 <i2c_m_sync_init+0x5c>)
    25b4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    25b6:	2300      	movs	r3, #0
}
    25b8:	4618      	mov	r0, r3
    25ba:	3710      	adds	r7, #16
    25bc:	46bd      	mov	sp, r7
    25be:	bd80      	pop	{r7, pc}
    25c0:	00010784 	.word	0x00010784
    25c4:	00003825 	.word	0x00003825
    25c8:	000062fd 	.word	0x000062fd
    25cc:	000024d5 	.word	0x000024d5
    25d0:	00002525 	.word	0x00002525

000025d4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    25d4:	b580      	push	{r7, lr}
    25d6:	b084      	sub	sp, #16
    25d8:	af00      	add	r7, sp, #0
    25da:	60f8      	str	r0, [r7, #12]
    25dc:	60b9      	str	r1, [r7, #8]
    25de:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    25e0:	68fb      	ldr	r3, [r7, #12]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d004      	beq.n	25f0 <pwm_init+0x1c>
    25e6:	68bb      	ldr	r3, [r7, #8]
    25e8:	2b00      	cmp	r3, #0
    25ea:	d001      	beq.n	25f0 <pwm_init+0x1c>
    25ec:	2301      	movs	r3, #1
    25ee:	e000      	b.n	25f2 <pwm_init+0x1e>
    25f0:	2300      	movs	r3, #0
    25f2:	f003 0301 	and.w	r3, r3, #1
    25f6:	b2db      	uxtb	r3, r3
    25f8:	2233      	movs	r2, #51	; 0x33
    25fa:	490a      	ldr	r1, [pc, #40]	; (2624 <pwm_init+0x50>)
    25fc:	4618      	mov	r0, r3
    25fe:	4b0a      	ldr	r3, [pc, #40]	; (2628 <pwm_init+0x54>)
    2600:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2602:	68fb      	ldr	r3, [r7, #12]
    2604:	68b9      	ldr	r1, [r7, #8]
    2606:	4618      	mov	r0, r3
    2608:	4b08      	ldr	r3, [pc, #32]	; (262c <pwm_init+0x58>)
    260a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    260c:	68fb      	ldr	r3, [r7, #12]
    260e:	4a08      	ldr	r2, [pc, #32]	; (2630 <pwm_init+0x5c>)
    2610:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2612:	68fb      	ldr	r3, [r7, #12]
    2614:	4a07      	ldr	r2, [pc, #28]	; (2634 <pwm_init+0x60>)
    2616:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2618:	2300      	movs	r3, #0
}
    261a:	4618      	mov	r0, r3
    261c:	3710      	adds	r7, #16
    261e:	46bd      	mov	sp, r7
    2620:	bd80      	pop	{r7, pc}
    2622:	bf00      	nop
    2624:	000107a0 	.word	0x000107a0
    2628:	00003825 	.word	0x00003825
    262c:	00007afd 	.word	0x00007afd
    2630:	00002639 	.word	0x00002639
    2634:	0000265d 	.word	0x0000265d

00002638 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2638:	b580      	push	{r7, lr}
    263a:	b084      	sub	sp, #16
    263c:	af00      	add	r7, sp, #0
    263e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2640:	687b      	ldr	r3, [r7, #4]
    2642:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2644:	68fb      	ldr	r3, [r7, #12]
    2646:	695b      	ldr	r3, [r3, #20]
    2648:	2b00      	cmp	r3, #0
    264a:	d003      	beq.n	2654 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    264c:	68fb      	ldr	r3, [r7, #12]
    264e:	695b      	ldr	r3, [r3, #20]
    2650:	68f8      	ldr	r0, [r7, #12]
    2652:	4798      	blx	r3
	}
}
    2654:	bf00      	nop
    2656:	3710      	adds	r7, #16
    2658:	46bd      	mov	sp, r7
    265a:	bd80      	pop	{r7, pc}

0000265c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    265c:	b580      	push	{r7, lr}
    265e:	b084      	sub	sp, #16
    2660:	af00      	add	r7, sp, #0
    2662:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2668:	68fb      	ldr	r3, [r7, #12]
    266a:	699b      	ldr	r3, [r3, #24]
    266c:	2b00      	cmp	r3, #0
    266e:	d003      	beq.n	2678 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2670:	68fb      	ldr	r3, [r7, #12]
    2672:	699b      	ldr	r3, [r3, #24]
    2674:	68f8      	ldr	r0, [r7, #12]
    2676:	4798      	blx	r3
	}
}
    2678:	bf00      	nop
    267a:	3710      	adds	r7, #16
    267c:	46bd      	mov	sp, r7
    267e:	bd80      	pop	{r7, pc}

00002680 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2680:	b580      	push	{r7, lr}
    2682:	b082      	sub	sp, #8
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
    2688:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	2b00      	cmp	r3, #0
    268e:	d004      	beq.n	269a <qspi_sync_init+0x1a>
    2690:	683b      	ldr	r3, [r7, #0]
    2692:	2b00      	cmp	r3, #0
    2694:	d001      	beq.n	269a <qspi_sync_init+0x1a>
    2696:	2301      	movs	r3, #1
    2698:	e000      	b.n	269c <qspi_sync_init+0x1c>
    269a:	2300      	movs	r3, #0
    269c:	f003 0301 	and.w	r3, r3, #1
    26a0:	b2db      	uxtb	r3, r3
    26a2:	2231      	movs	r2, #49	; 0x31
    26a4:	4906      	ldr	r1, [pc, #24]	; (26c0 <qspi_sync_init+0x40>)
    26a6:	4618      	mov	r0, r3
    26a8:	4b06      	ldr	r3, [pc, #24]	; (26c4 <qspi_sync_init+0x44>)
    26aa:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    26ac:	687b      	ldr	r3, [r7, #4]
    26ae:	6839      	ldr	r1, [r7, #0]
    26b0:	4618      	mov	r0, r3
    26b2:	4b05      	ldr	r3, [pc, #20]	; (26c8 <qspi_sync_init+0x48>)
    26b4:	4798      	blx	r3
    26b6:	4603      	mov	r3, r0
}
    26b8:	4618      	mov	r0, r3
    26ba:	3708      	adds	r7, #8
    26bc:	46bd      	mov	sp, r7
    26be:	bd80      	pop	{r7, pc}
    26c0:	000107b8 	.word	0x000107b8
    26c4:	00003825 	.word	0x00003825
    26c8:	000054c5 	.word	0x000054c5

000026cc <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	b082      	sub	sp, #8
    26d0:	af00      	add	r7, sp, #0
    26d2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	2b00      	cmp	r3, #0
    26d8:	bf14      	ite	ne
    26da:	2301      	movne	r3, #1
    26dc:	2300      	moveq	r3, #0
    26de:	b2db      	uxtb	r3, r3
    26e0:	223f      	movs	r2, #63	; 0x3f
    26e2:	4906      	ldr	r1, [pc, #24]	; (26fc <qspi_sync_enable+0x30>)
    26e4:	4618      	mov	r0, r3
    26e6:	4b06      	ldr	r3, [pc, #24]	; (2700 <qspi_sync_enable+0x34>)
    26e8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	4618      	mov	r0, r3
    26ee:	4b05      	ldr	r3, [pc, #20]	; (2704 <qspi_sync_enable+0x38>)
    26f0:	4798      	blx	r3
    26f2:	4603      	mov	r3, r0
}
    26f4:	4618      	mov	r0, r3
    26f6:	3708      	adds	r7, #8
    26f8:	46bd      	mov	sp, r7
    26fa:	bd80      	pop	{r7, pc}
    26fc:	000107b8 	.word	0x000107b8
    2700:	00003825 	.word	0x00003825
    2704:	00005539 	.word	0x00005539

00002708 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2708:	b580      	push	{r7, lr}
    270a:	b082      	sub	sp, #8
    270c:	af00      	add	r7, sp, #0
    270e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	2b00      	cmp	r3, #0
    2714:	bf14      	ite	ne
    2716:	2301      	movne	r3, #1
    2718:	2300      	moveq	r3, #0
    271a:	b2db      	uxtb	r3, r3
    271c:	2246      	movs	r2, #70	; 0x46
    271e:	4906      	ldr	r1, [pc, #24]	; (2738 <qspi_sync_disable+0x30>)
    2720:	4618      	mov	r0, r3
    2722:	4b06      	ldr	r3, [pc, #24]	; (273c <qspi_sync_disable+0x34>)
    2724:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	4618      	mov	r0, r3
    272a:	4b05      	ldr	r3, [pc, #20]	; (2740 <qspi_sync_disable+0x38>)
    272c:	4798      	blx	r3
    272e:	4603      	mov	r3, r0
}
    2730:	4618      	mov	r0, r3
    2732:	3708      	adds	r7, #8
    2734:	46bd      	mov	sp, r7
    2736:	bd80      	pop	{r7, pc}
    2738:	000107b8 	.word	0x000107b8
    273c:	00003825 	.word	0x00003825
    2740:	0000555d 	.word	0x0000555d

00002744 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2744:	b580      	push	{r7, lr}
    2746:	b082      	sub	sp, #8
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
    274c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	2b00      	cmp	r3, #0
    2752:	d004      	beq.n	275e <qspi_sync_serial_run_command+0x1a>
    2754:	683b      	ldr	r3, [r7, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d001      	beq.n	275e <qspi_sync_serial_run_command+0x1a>
    275a:	2301      	movs	r3, #1
    275c:	e000      	b.n	2760 <qspi_sync_serial_run_command+0x1c>
    275e:	2300      	movs	r3, #0
    2760:	f003 0301 	and.w	r3, r3, #1
    2764:	b2db      	uxtb	r3, r3
    2766:	224d      	movs	r2, #77	; 0x4d
    2768:	4906      	ldr	r1, [pc, #24]	; (2784 <qspi_sync_serial_run_command+0x40>)
    276a:	4618      	mov	r0, r3
    276c:	4b06      	ldr	r3, [pc, #24]	; (2788 <qspi_sync_serial_run_command+0x44>)
    276e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	6839      	ldr	r1, [r7, #0]
    2774:	4618      	mov	r0, r3
    2776:	4b05      	ldr	r3, [pc, #20]	; (278c <qspi_sync_serial_run_command+0x48>)
    2778:	4798      	blx	r3
    277a:	4603      	mov	r3, r0
}
    277c:	4618      	mov	r0, r3
    277e:	3708      	adds	r7, #8
    2780:	46bd      	mov	sp, r7
    2782:	bd80      	pop	{r7, pc}
    2784:	000107b8 	.word	0x000107b8
    2788:	00003825 	.word	0x00003825
    278c:	000056a9 	.word	0x000056a9

00002790 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2790:	b580      	push	{r7, lr}
    2792:	b084      	sub	sp, #16
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    279a:	2300      	movs	r3, #0
    279c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	2b00      	cmp	r3, #0
    27a2:	d004      	beq.n	27ae <spi_m_sync_init+0x1e>
    27a4:	683b      	ldr	r3, [r7, #0]
    27a6:	2b00      	cmp	r3, #0
    27a8:	d001      	beq.n	27ae <spi_m_sync_init+0x1e>
    27aa:	2301      	movs	r3, #1
    27ac:	e000      	b.n	27b0 <spi_m_sync_init+0x20>
    27ae:	2300      	movs	r3, #0
    27b0:	f003 0301 	and.w	r3, r3, #1
    27b4:	b2db      	uxtb	r3, r3
    27b6:	2240      	movs	r2, #64	; 0x40
    27b8:	4910      	ldr	r1, [pc, #64]	; (27fc <spi_m_sync_init+0x6c>)
    27ba:	4618      	mov	r0, r3
    27bc:	4b10      	ldr	r3, [pc, #64]	; (2800 <spi_m_sync_init+0x70>)
    27be:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	683a      	ldr	r2, [r7, #0]
    27c4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    27c6:	687b      	ldr	r3, [r7, #4]
    27c8:	3304      	adds	r3, #4
    27ca:	6839      	ldr	r1, [r7, #0]
    27cc:	4618      	mov	r0, r3
    27ce:	4b0d      	ldr	r3, [pc, #52]	; (2804 <spi_m_sync_init+0x74>)
    27d0:	4798      	blx	r3
    27d2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    27d4:	68fb      	ldr	r3, [r7, #12]
    27d6:	2b00      	cmp	r3, #0
    27d8:	da01      	bge.n	27de <spi_m_sync_init+0x4e>
		return rc;
    27da:	68fb      	ldr	r3, [r7, #12]
    27dc:	e00a      	b.n	27f4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    27e4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	4a07      	ldr	r2, [pc, #28]	; (2808 <spi_m_sync_init+0x78>)
    27ea:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	4a07      	ldr	r2, [pc, #28]	; (280c <spi_m_sync_init+0x7c>)
    27f0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    27f2:	2300      	movs	r3, #0
}
    27f4:	4618      	mov	r0, r3
    27f6:	3710      	adds	r7, #16
    27f8:	46bd      	mov	sp, r7
    27fa:	bd80      	pop	{r7, pc}
    27fc:	000107d4 	.word	0x000107d4
    2800:	00003825 	.word	0x00003825
    2804:	00006931 	.word	0x00006931
    2808:	00002889 	.word	0x00002889
    280c:	000028e1 	.word	0x000028e1

00002810 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2810:	b580      	push	{r7, lr}
    2812:	b082      	sub	sp, #8
    2814:	af00      	add	r7, sp, #0
    2816:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	2b00      	cmp	r3, #0
    281c:	bf14      	ite	ne
    281e:	2301      	movne	r3, #1
    2820:	2300      	moveq	r3, #0
    2822:	b2db      	uxtb	r3, r3
    2824:	2257      	movs	r2, #87	; 0x57
    2826:	4906      	ldr	r1, [pc, #24]	; (2840 <spi_m_sync_enable+0x30>)
    2828:	4618      	mov	r0, r3
    282a:	4b06      	ldr	r3, [pc, #24]	; (2844 <spi_m_sync_enable+0x34>)
    282c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	3304      	adds	r3, #4
    2832:	4618      	mov	r0, r3
    2834:	4b04      	ldr	r3, [pc, #16]	; (2848 <spi_m_sync_enable+0x38>)
    2836:	4798      	blx	r3
}
    2838:	bf00      	nop
    283a:	3708      	adds	r7, #8
    283c:	46bd      	mov	sp, r7
    283e:	bd80      	pop	{r7, pc}
    2840:	000107d4 	.word	0x000107d4
    2844:	00003825 	.word	0x00003825
    2848:	00006a3d 	.word	0x00006a3d

0000284c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    284c:	b580      	push	{r7, lr}
    284e:	b082      	sub	sp, #8
    2850:	af00      	add	r7, sp, #0
    2852:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	2b00      	cmp	r3, #0
    2858:	bf14      	ite	ne
    285a:	2301      	movne	r3, #1
    285c:	2300      	moveq	r3, #0
    285e:	b2db      	uxtb	r3, r3
    2860:	225d      	movs	r2, #93	; 0x5d
    2862:	4906      	ldr	r1, [pc, #24]	; (287c <spi_m_sync_disable+0x30>)
    2864:	4618      	mov	r0, r3
    2866:	4b06      	ldr	r3, [pc, #24]	; (2880 <spi_m_sync_disable+0x34>)
    2868:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	3304      	adds	r3, #4
    286e:	4618      	mov	r0, r3
    2870:	4b04      	ldr	r3, [pc, #16]	; (2884 <spi_m_sync_disable+0x38>)
    2872:	4798      	blx	r3
}
    2874:	bf00      	nop
    2876:	3708      	adds	r7, #8
    2878:	46bd      	mov	sp, r7
    287a:	bd80      	pop	{r7, pc}
    287c:	000107d4 	.word	0x000107d4
    2880:	00003825 	.word	0x00003825
    2884:	00006a8d 	.word	0x00006a8d

00002888 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2888:	b580      	push	{r7, lr}
    288a:	b088      	sub	sp, #32
    288c:	af00      	add	r7, sp, #0
    288e:	60f8      	str	r0, [r7, #12]
    2890:	60b9      	str	r1, [r7, #8]
    2892:	4613      	mov	r3, r2
    2894:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2896:	68fb      	ldr	r3, [r7, #12]
    2898:	2b00      	cmp	r3, #0
    289a:	bf14      	ite	ne
    289c:	2301      	movne	r3, #1
    289e:	2300      	moveq	r3, #0
    28a0:	b2db      	uxtb	r3, r3
    28a2:	2287      	movs	r2, #135	; 0x87
    28a4:	490b      	ldr	r1, [pc, #44]	; (28d4 <_spi_m_sync_io_read+0x4c>)
    28a6:	4618      	mov	r0, r3
    28a8:	4b0b      	ldr	r3, [pc, #44]	; (28d8 <_spi_m_sync_io_read+0x50>)
    28aa:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    28ac:	68fb      	ldr	r3, [r7, #12]
    28ae:	3b0c      	subs	r3, #12
    28b0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    28b2:	68bb      	ldr	r3, [r7, #8]
    28b4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    28b6:	2300      	movs	r3, #0
    28b8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    28ba:	88fb      	ldrh	r3, [r7, #6]
    28bc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    28be:	f107 0310 	add.w	r3, r7, #16
    28c2:	4619      	mov	r1, r3
    28c4:	69f8      	ldr	r0, [r7, #28]
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <_spi_m_sync_io_read+0x54>)
    28c8:	4798      	blx	r3
    28ca:	4603      	mov	r3, r0
}
    28cc:	4618      	mov	r0, r3
    28ce:	3720      	adds	r7, #32
    28d0:	46bd      	mov	sp, r7
    28d2:	bd80      	pop	{r7, pc}
    28d4:	000107d4 	.word	0x000107d4
    28d8:	00003825 	.word	0x00003825
    28dc:	00002939 	.word	0x00002939

000028e0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    28e0:	b580      	push	{r7, lr}
    28e2:	b088      	sub	sp, #32
    28e4:	af00      	add	r7, sp, #0
    28e6:	60f8      	str	r0, [r7, #12]
    28e8:	60b9      	str	r1, [r7, #8]
    28ea:	4613      	mov	r3, r2
    28ec:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	2b00      	cmp	r3, #0
    28f2:	bf14      	ite	ne
    28f4:	2301      	movne	r3, #1
    28f6:	2300      	moveq	r3, #0
    28f8:	b2db      	uxtb	r3, r3
    28fa:	22a3      	movs	r2, #163	; 0xa3
    28fc:	490b      	ldr	r1, [pc, #44]	; (292c <_spi_m_sync_io_write+0x4c>)
    28fe:	4618      	mov	r0, r3
    2900:	4b0b      	ldr	r3, [pc, #44]	; (2930 <_spi_m_sync_io_write+0x50>)
    2902:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2904:	68fb      	ldr	r3, [r7, #12]
    2906:	3b0c      	subs	r3, #12
    2908:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    290a:	2300      	movs	r3, #0
    290c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    290e:	68bb      	ldr	r3, [r7, #8]
    2910:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2912:	88fb      	ldrh	r3, [r7, #6]
    2914:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2916:	f107 0310 	add.w	r3, r7, #16
    291a:	4619      	mov	r1, r3
    291c:	69f8      	ldr	r0, [r7, #28]
    291e:	4b05      	ldr	r3, [pc, #20]	; (2934 <_spi_m_sync_io_write+0x54>)
    2920:	4798      	blx	r3
    2922:	4603      	mov	r3, r0
}
    2924:	4618      	mov	r0, r3
    2926:	3720      	adds	r7, #32
    2928:	46bd      	mov	sp, r7
    292a:	bd80      	pop	{r7, pc}
    292c:	000107d4 	.word	0x000107d4
    2930:	00003825 	.word	0x00003825
    2934:	00002939 	.word	0x00002939

00002938 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2938:	b580      	push	{r7, lr}
    293a:	b086      	sub	sp, #24
    293c:	af00      	add	r7, sp, #0
    293e:	6078      	str	r0, [r7, #4]
    2940:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2942:	687b      	ldr	r3, [r7, #4]
    2944:	2b00      	cmp	r3, #0
    2946:	d004      	beq.n	2952 <spi_m_sync_transfer+0x1a>
    2948:	683b      	ldr	r3, [r7, #0]
    294a:	2b00      	cmp	r3, #0
    294c:	d001      	beq.n	2952 <spi_m_sync_transfer+0x1a>
    294e:	2301      	movs	r3, #1
    2950:	e000      	b.n	2954 <spi_m_sync_transfer+0x1c>
    2952:	2300      	movs	r3, #0
    2954:	f003 0301 	and.w	r3, r3, #1
    2958:	b2db      	uxtb	r3, r3
    295a:	22b3      	movs	r2, #179	; 0xb3
    295c:	490c      	ldr	r1, [pc, #48]	; (2990 <spi_m_sync_transfer+0x58>)
    295e:	4618      	mov	r0, r3
    2960:	4b0c      	ldr	r3, [pc, #48]	; (2994 <spi_m_sync_transfer+0x5c>)
    2962:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2964:	683b      	ldr	r3, [r7, #0]
    2966:	681b      	ldr	r3, [r3, #0]
    2968:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    296a:	683b      	ldr	r3, [r7, #0]
    296c:	685b      	ldr	r3, [r3, #4]
    296e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2970:	683b      	ldr	r3, [r7, #0]
    2972:	689b      	ldr	r3, [r3, #8]
    2974:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	3304      	adds	r3, #4
    297a:	f107 020c 	add.w	r2, r7, #12
    297e:	4611      	mov	r1, r2
    2980:	4618      	mov	r0, r3
    2982:	4b05      	ldr	r3, [pc, #20]	; (2998 <spi_m_sync_transfer+0x60>)
    2984:	4798      	blx	r3
    2986:	4603      	mov	r3, r0
}
    2988:	4618      	mov	r0, r3
    298a:	3718      	adds	r7, #24
    298c:	46bd      	mov	sp, r7
    298e:	bd80      	pop	{r7, pc}
    2990:	000107d4 	.word	0x000107d4
    2994:	00003825 	.word	0x00003825
    2998:	00006c31 	.word	0x00006c31

0000299c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    299c:	b580      	push	{r7, lr}
    299e:	b082      	sub	sp, #8
    29a0:	af00      	add	r7, sp, #0
    29a2:	6078      	str	r0, [r7, #4]
    29a4:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	2b00      	cmp	r3, #0
    29aa:	d004      	beq.n	29b6 <spi_m_sync_get_io_descriptor+0x1a>
    29ac:	683b      	ldr	r3, [r7, #0]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d001      	beq.n	29b6 <spi_m_sync_get_io_descriptor+0x1a>
    29b2:	2301      	movs	r3, #1
    29b4:	e000      	b.n	29b8 <spi_m_sync_get_io_descriptor+0x1c>
    29b6:	2300      	movs	r3, #0
    29b8:	f003 0301 	and.w	r3, r3, #1
    29bc:	b2db      	uxtb	r3, r3
    29be:	22bd      	movs	r2, #189	; 0xbd
    29c0:	4906      	ldr	r1, [pc, #24]	; (29dc <spi_m_sync_get_io_descriptor+0x40>)
    29c2:	4618      	mov	r0, r3
    29c4:	4b06      	ldr	r3, [pc, #24]	; (29e0 <spi_m_sync_get_io_descriptor+0x44>)
    29c6:	4798      	blx	r3
	*io = &spi->io;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	f103 020c 	add.w	r2, r3, #12
    29ce:	683b      	ldr	r3, [r7, #0]
    29d0:	601a      	str	r2, [r3, #0]
	return 0;
    29d2:	2300      	movs	r3, #0
}
    29d4:	4618      	mov	r0, r3
    29d6:	3708      	adds	r7, #8
    29d8:	46bd      	mov	sp, r7
    29da:	bd80      	pop	{r7, pc}
    29dc:	000107d4 	.word	0x000107d4
    29e0:	00003825 	.word	0x00003825

000029e4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    29e4:	b480      	push	{r7}
    29e6:	b083      	sub	sp, #12
    29e8:	af00      	add	r7, sp, #0
    29ea:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    29ec:	687b      	ldr	r3, [r7, #4]
    29ee:	681b      	ldr	r3, [r3, #0]
}
    29f0:	4618      	mov	r0, r3
    29f2:	370c      	adds	r7, #12
    29f4:	46bd      	mov	sp, r7
    29f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29fa:	4770      	bx	lr

000029fc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    29fc:	b480      	push	{r7}
    29fe:	b083      	sub	sp, #12
    2a00:	af00      	add	r7, sp, #0
    2a02:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d002      	beq.n	2a10 <list_get_next_element+0x14>
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	e000      	b.n	2a12 <list_get_next_element+0x16>
    2a10:	2300      	movs	r3, #0
}
    2a12:	4618      	mov	r0, r3
    2a14:	370c      	adds	r7, #12
    2a16:	46bd      	mov	sp, r7
    2a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a1c:	4770      	bx	lr
	...

00002a20 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b084      	sub	sp, #16
    2a24:	af00      	add	r7, sp, #0
    2a26:	60f8      	str	r0, [r7, #12]
    2a28:	60b9      	str	r1, [r7, #8]
    2a2a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2a2c:	68fb      	ldr	r3, [r7, #12]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d007      	beq.n	2a42 <timer_init+0x22>
    2a32:	68bb      	ldr	r3, [r7, #8]
    2a34:	2b00      	cmp	r3, #0
    2a36:	d004      	beq.n	2a42 <timer_init+0x22>
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d001      	beq.n	2a42 <timer_init+0x22>
    2a3e:	2301      	movs	r3, #1
    2a40:	e000      	b.n	2a44 <timer_init+0x24>
    2a42:	2300      	movs	r3, #0
    2a44:	f003 0301 	and.w	r3, r3, #1
    2a48:	b2db      	uxtb	r3, r3
    2a4a:	223b      	movs	r2, #59	; 0x3b
    2a4c:	490c      	ldr	r1, [pc, #48]	; (2a80 <timer_init+0x60>)
    2a4e:	4618      	mov	r0, r3
    2a50:	4b0c      	ldr	r3, [pc, #48]	; (2a84 <timer_init+0x64>)
    2a52:	4798      	blx	r3
	descr->func = func;
    2a54:	68fb      	ldr	r3, [r7, #12]
    2a56:	687a      	ldr	r2, [r7, #4]
    2a58:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	68fa      	ldr	r2, [r7, #12]
    2a62:	3204      	adds	r2, #4
    2a64:	68b9      	ldr	r1, [r7, #8]
    2a66:	4610      	mov	r0, r2
    2a68:	4798      	blx	r3
	descr->time                           = 0;
    2a6a:	68fb      	ldr	r3, [r7, #12]
    2a6c:	2200      	movs	r2, #0
    2a6e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2a70:	68fb      	ldr	r3, [r7, #12]
    2a72:	4a05      	ldr	r2, [pc, #20]	; (2a88 <timer_init+0x68>)
    2a74:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2a76:	2300      	movs	r3, #0
}
    2a78:	4618      	mov	r0, r3
    2a7a:	3710      	adds	r7, #16
    2a7c:	46bd      	mov	sp, r7
    2a7e:	bd80      	pop	{r7, pc}
    2a80:	000107f0 	.word	0x000107f0
    2a84:	00003825 	.word	0x00003825
    2a88:	00002e11 	.word	0x00002e11

00002a8c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	b082      	sub	sp, #8
    2a90:	af00      	add	r7, sp, #0
    2a92:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	2b00      	cmp	r3, #0
    2a98:	d005      	beq.n	2aa6 <timer_start+0x1a>
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	681b      	ldr	r3, [r3, #0]
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d001      	beq.n	2aa6 <timer_start+0x1a>
    2aa2:	2301      	movs	r3, #1
    2aa4:	e000      	b.n	2aa8 <timer_start+0x1c>
    2aa6:	2300      	movs	r3, #0
    2aa8:	f003 0301 	and.w	r3, r3, #1
    2aac:	b2db      	uxtb	r3, r3
    2aae:	2254      	movs	r2, #84	; 0x54
    2ab0:	490e      	ldr	r1, [pc, #56]	; (2aec <timer_start+0x60>)
    2ab2:	4618      	mov	r0, r3
    2ab4:	4b0e      	ldr	r3, [pc, #56]	; (2af0 <timer_start+0x64>)
    2ab6:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	681b      	ldr	r3, [r3, #0]
    2abc:	699b      	ldr	r3, [r3, #24]
    2abe:	687a      	ldr	r2, [r7, #4]
    2ac0:	3204      	adds	r2, #4
    2ac2:	4610      	mov	r0, r2
    2ac4:	4798      	blx	r3
    2ac6:	4603      	mov	r3, r0
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d002      	beq.n	2ad2 <timer_start+0x46>
		return ERR_DENIED;
    2acc:	f06f 0310 	mvn.w	r3, #16
    2ad0:	e007      	b.n	2ae2 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	681b      	ldr	r3, [r3, #0]
    2ad6:	689b      	ldr	r3, [r3, #8]
    2ad8:	687a      	ldr	r2, [r7, #4]
    2ada:	3204      	adds	r2, #4
    2adc:	4610      	mov	r0, r2
    2ade:	4798      	blx	r3

	return ERR_NONE;
    2ae0:	2300      	movs	r3, #0
}
    2ae2:	4618      	mov	r0, r3
    2ae4:	3708      	adds	r7, #8
    2ae6:	46bd      	mov	sp, r7
    2ae8:	bd80      	pop	{r7, pc}
    2aea:	bf00      	nop
    2aec:	000107f0 	.word	0x000107f0
    2af0:	00003825 	.word	0x00003825

00002af4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2af4:	b580      	push	{r7, lr}
    2af6:	b082      	sub	sp, #8
    2af8:	af00      	add	r7, sp, #0
    2afa:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d005      	beq.n	2b0e <timer_stop+0x1a>
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	681b      	ldr	r3, [r3, #0]
    2b06:	2b00      	cmp	r3, #0
    2b08:	d001      	beq.n	2b0e <timer_stop+0x1a>
    2b0a:	2301      	movs	r3, #1
    2b0c:	e000      	b.n	2b10 <timer_stop+0x1c>
    2b0e:	2300      	movs	r3, #0
    2b10:	f003 0301 	and.w	r3, r3, #1
    2b14:	b2db      	uxtb	r3, r3
    2b16:	2262      	movs	r2, #98	; 0x62
    2b18:	490f      	ldr	r1, [pc, #60]	; (2b58 <timer_stop+0x64>)
    2b1a:	4618      	mov	r0, r3
    2b1c:	4b0f      	ldr	r3, [pc, #60]	; (2b5c <timer_stop+0x68>)
    2b1e:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	699b      	ldr	r3, [r3, #24]
    2b26:	687a      	ldr	r2, [r7, #4]
    2b28:	3204      	adds	r2, #4
    2b2a:	4610      	mov	r0, r2
    2b2c:	4798      	blx	r3
    2b2e:	4603      	mov	r3, r0
    2b30:	f083 0301 	eor.w	r3, r3, #1
    2b34:	b2db      	uxtb	r3, r3
    2b36:	2b00      	cmp	r3, #0
    2b38:	d002      	beq.n	2b40 <timer_stop+0x4c>
		return ERR_DENIED;
    2b3a:	f06f 0310 	mvn.w	r3, #16
    2b3e:	e007      	b.n	2b50 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	681b      	ldr	r3, [r3, #0]
    2b44:	68db      	ldr	r3, [r3, #12]
    2b46:	687a      	ldr	r2, [r7, #4]
    2b48:	3204      	adds	r2, #4
    2b4a:	4610      	mov	r0, r2
    2b4c:	4798      	blx	r3

	return ERR_NONE;
    2b4e:	2300      	movs	r3, #0
}
    2b50:	4618      	mov	r0, r3
    2b52:	3708      	adds	r7, #8
    2b54:	46bd      	mov	sp, r7
    2b56:	bd80      	pop	{r7, pc}
    2b58:	000107f0 	.word	0x000107f0
    2b5c:	00003825 	.word	0x00003825

00002b60 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2b60:	b580      	push	{r7, lr}
    2b62:	b084      	sub	sp, #16
    2b64:	af00      	add	r7, sp, #0
    2b66:	6078      	str	r0, [r7, #4]
    2b68:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d008      	beq.n	2b82 <timer_add_task+0x22>
    2b70:	683b      	ldr	r3, [r7, #0]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d005      	beq.n	2b82 <timer_add_task+0x22>
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	681b      	ldr	r3, [r3, #0]
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d001      	beq.n	2b82 <timer_add_task+0x22>
    2b7e:	2301      	movs	r3, #1
    2b80:	e000      	b.n	2b84 <timer_add_task+0x24>
    2b82:	2300      	movs	r3, #0
    2b84:	f003 0301 	and.w	r3, r3, #1
    2b88:	b2db      	uxtb	r3, r3
    2b8a:	227b      	movs	r2, #123	; 0x7b
    2b8c:	492f      	ldr	r1, [pc, #188]	; (2c4c <timer_add_task+0xec>)
    2b8e:	4618      	mov	r0, r3
    2b90:	4b2f      	ldr	r3, [pc, #188]	; (2c50 <timer_add_task+0xf0>)
    2b92:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	7f1b      	ldrb	r3, [r3, #28]
    2b98:	b2db      	uxtb	r3, r3
    2b9a:	f043 0301 	orr.w	r3, r3, #1
    2b9e:	b2da      	uxtb	r2, r3
    2ba0:	687b      	ldr	r3, [r7, #4]
    2ba2:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	3318      	adds	r3, #24
    2ba8:	6839      	ldr	r1, [r7, #0]
    2baa:	4618      	mov	r0, r3
    2bac:	4b29      	ldr	r3, [pc, #164]	; (2c54 <timer_add_task+0xf4>)
    2bae:	4798      	blx	r3
    2bb0:	4603      	mov	r3, r0
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d00f      	beq.n	2bd6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2bb6:	687b      	ldr	r3, [r7, #4]
    2bb8:	7f1b      	ldrb	r3, [r3, #28]
    2bba:	b2db      	uxtb	r3, r3
    2bbc:	f023 0301 	bic.w	r3, r3, #1
    2bc0:	b2da      	uxtb	r2, r3
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2bc6:	2280      	movs	r2, #128	; 0x80
    2bc8:	4920      	ldr	r1, [pc, #128]	; (2c4c <timer_add_task+0xec>)
    2bca:	2000      	movs	r0, #0
    2bcc:	4b20      	ldr	r3, [pc, #128]	; (2c50 <timer_add_task+0xf0>)
    2bce:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2bd0:	f06f 0311 	mvn.w	r3, #17
    2bd4:	e035      	b.n	2c42 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	695a      	ldr	r2, [r3, #20]
    2bda:	683b      	ldr	r3, [r7, #0]
    2bdc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	f103 0018 	add.w	r0, r3, #24
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	695b      	ldr	r3, [r3, #20]
    2be8:	461a      	mov	r2, r3
    2bea:	6839      	ldr	r1, [r7, #0]
    2bec:	4b1a      	ldr	r3, [pc, #104]	; (2c58 <timer_add_task+0xf8>)
    2bee:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	7f1b      	ldrb	r3, [r3, #28]
    2bf4:	b2db      	uxtb	r3, r3
    2bf6:	f023 0301 	bic.w	r3, r3, #1
    2bfa:	b2da      	uxtb	r2, r3
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	7f1b      	ldrb	r3, [r3, #28]
    2c04:	b2db      	uxtb	r3, r3
    2c06:	f003 0302 	and.w	r3, r3, #2
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d018      	beq.n	2c40 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2c0e:	f107 030c 	add.w	r3, r7, #12
    2c12:	4618      	mov	r0, r3
    2c14:	4b11      	ldr	r3, [pc, #68]	; (2c5c <timer_add_task+0xfc>)
    2c16:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	7f1b      	ldrb	r3, [r3, #28]
    2c1c:	b2db      	uxtb	r3, r3
    2c1e:	f023 0302 	bic.w	r3, r3, #2
    2c22:	b2da      	uxtb	r2, r3
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	681b      	ldr	r3, [r3, #0]
    2c2c:	69db      	ldr	r3, [r3, #28]
    2c2e:	687a      	ldr	r2, [r7, #4]
    2c30:	3204      	adds	r2, #4
    2c32:	4610      	mov	r0, r2
    2c34:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2c36:	f107 030c 	add.w	r3, r7, #12
    2c3a:	4618      	mov	r0, r3
    2c3c:	4b08      	ldr	r3, [pc, #32]	; (2c60 <timer_add_task+0x100>)
    2c3e:	4798      	blx	r3
	}

	return ERR_NONE;
    2c40:	2300      	movs	r3, #0
}
    2c42:	4618      	mov	r0, r3
    2c44:	3710      	adds	r7, #16
    2c46:	46bd      	mov	sp, r7
    2c48:	bd80      	pop	{r7, pc}
    2c4a:	bf00      	nop
    2c4c:	000107f0 	.word	0x000107f0
    2c50:	00003825 	.word	0x00003825
    2c54:	0000384d 	.word	0x0000384d
    2c58:	00002d61 	.word	0x00002d61
    2c5c:	0000b00d 	.word	0x0000b00d
    2c60:	0000b033 	.word	0x0000b033

00002c64 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2c64:	b580      	push	{r7, lr}
    2c66:	b084      	sub	sp, #16
    2c68:	af00      	add	r7, sp, #0
    2c6a:	6078      	str	r0, [r7, #4]
    2c6c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	2b00      	cmp	r3, #0
    2c72:	d008      	beq.n	2c86 <timer_remove_task+0x22>
    2c74:	683b      	ldr	r3, [r7, #0]
    2c76:	2b00      	cmp	r3, #0
    2c78:	d005      	beq.n	2c86 <timer_remove_task+0x22>
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	2b00      	cmp	r3, #0
    2c80:	d001      	beq.n	2c86 <timer_remove_task+0x22>
    2c82:	2301      	movs	r3, #1
    2c84:	e000      	b.n	2c88 <timer_remove_task+0x24>
    2c86:	2300      	movs	r3, #0
    2c88:	f003 0301 	and.w	r3, r3, #1
    2c8c:	b2db      	uxtb	r3, r3
    2c8e:	2296      	movs	r2, #150	; 0x96
    2c90:	492d      	ldr	r1, [pc, #180]	; (2d48 <timer_remove_task+0xe4>)
    2c92:	4618      	mov	r0, r3
    2c94:	4b2d      	ldr	r3, [pc, #180]	; (2d4c <timer_remove_task+0xe8>)
    2c96:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	7f1b      	ldrb	r3, [r3, #28]
    2c9c:	b2db      	uxtb	r3, r3
    2c9e:	f043 0301 	orr.w	r3, r3, #1
    2ca2:	b2da      	uxtb	r2, r3
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	3318      	adds	r3, #24
    2cac:	6839      	ldr	r1, [r7, #0]
    2cae:	4618      	mov	r0, r3
    2cb0:	4b27      	ldr	r3, [pc, #156]	; (2d50 <timer_remove_task+0xec>)
    2cb2:	4798      	blx	r3
    2cb4:	4603      	mov	r3, r0
    2cb6:	f083 0301 	eor.w	r3, r3, #1
    2cba:	b2db      	uxtb	r3, r3
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d00f      	beq.n	2ce0 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	7f1b      	ldrb	r3, [r3, #28]
    2cc4:	b2db      	uxtb	r3, r3
    2cc6:	f023 0301 	bic.w	r3, r3, #1
    2cca:	b2da      	uxtb	r2, r3
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2cd0:	229b      	movs	r2, #155	; 0x9b
    2cd2:	491d      	ldr	r1, [pc, #116]	; (2d48 <timer_remove_task+0xe4>)
    2cd4:	2000      	movs	r0, #0
    2cd6:	4b1d      	ldr	r3, [pc, #116]	; (2d4c <timer_remove_task+0xe8>)
    2cd8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2cda:	f06f 0309 	mvn.w	r3, #9
    2cde:	e02e      	b.n	2d3e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	3318      	adds	r3, #24
    2ce4:	6839      	ldr	r1, [r7, #0]
    2ce6:	4618      	mov	r0, r3
    2ce8:	4b1a      	ldr	r3, [pc, #104]	; (2d54 <timer_remove_task+0xf0>)
    2cea:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	7f1b      	ldrb	r3, [r3, #28]
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	f023 0301 	bic.w	r3, r3, #1
    2cf6:	b2da      	uxtb	r2, r3
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	7f1b      	ldrb	r3, [r3, #28]
    2d00:	b2db      	uxtb	r3, r3
    2d02:	f003 0302 	and.w	r3, r3, #2
    2d06:	2b00      	cmp	r3, #0
    2d08:	d018      	beq.n	2d3c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2d0a:	f107 030c 	add.w	r3, r7, #12
    2d0e:	4618      	mov	r0, r3
    2d10:	4b11      	ldr	r3, [pc, #68]	; (2d58 <timer_remove_task+0xf4>)
    2d12:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d14:	687b      	ldr	r3, [r7, #4]
    2d16:	7f1b      	ldrb	r3, [r3, #28]
    2d18:	b2db      	uxtb	r3, r3
    2d1a:	f023 0302 	bic.w	r3, r3, #2
    2d1e:	b2da      	uxtb	r2, r3
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	681b      	ldr	r3, [r3, #0]
    2d28:	69db      	ldr	r3, [r3, #28]
    2d2a:	687a      	ldr	r2, [r7, #4]
    2d2c:	3204      	adds	r2, #4
    2d2e:	4610      	mov	r0, r2
    2d30:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2d32:	f107 030c 	add.w	r3, r7, #12
    2d36:	4618      	mov	r0, r3
    2d38:	4b08      	ldr	r3, [pc, #32]	; (2d5c <timer_remove_task+0xf8>)
    2d3a:	4798      	blx	r3
	}

	return ERR_NONE;
    2d3c:	2300      	movs	r3, #0
}
    2d3e:	4618      	mov	r0, r3
    2d40:	3710      	adds	r7, #16
    2d42:	46bd      	mov	sp, r7
    2d44:	bd80      	pop	{r7, pc}
    2d46:	bf00      	nop
    2d48:	000107f0 	.word	0x000107f0
    2d4c:	00003825 	.word	0x00003825
    2d50:	0000384d 	.word	0x0000384d
    2d54:	000039af 	.word	0x000039af
    2d58:	0000b00d 	.word	0x0000b00d
    2d5c:	0000b033 	.word	0x0000b033

00002d60 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b088      	sub	sp, #32
    2d64:	af00      	add	r7, sp, #0
    2d66:	60f8      	str	r0, [r7, #12]
    2d68:	60b9      	str	r1, [r7, #8]
    2d6a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2d6c:	2300      	movs	r3, #0
    2d6e:	61bb      	str	r3, [r7, #24]
    2d70:	68f8      	ldr	r0, [r7, #12]
    2d72:	4b23      	ldr	r3, [pc, #140]	; (2e00 <timer_add_timer_task+0xa0>)
    2d74:	4798      	blx	r3
    2d76:	6138      	str	r0, [r7, #16]

	if (!head) {
    2d78:	693b      	ldr	r3, [r7, #16]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d104      	bne.n	2d88 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2d7e:	68b9      	ldr	r1, [r7, #8]
    2d80:	68f8      	ldr	r0, [r7, #12]
    2d82:	4b20      	ldr	r3, [pc, #128]	; (2e04 <timer_add_timer_task+0xa4>)
    2d84:	4798      	blx	r3
		return;
    2d86:	e037      	b.n	2df8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2d88:	693b      	ldr	r3, [r7, #16]
    2d8a:	61fb      	str	r3, [r7, #28]
    2d8c:	e022      	b.n	2dd4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2d8e:	69fb      	ldr	r3, [r7, #28]
    2d90:	685a      	ldr	r2, [r3, #4]
    2d92:	687b      	ldr	r3, [r7, #4]
    2d94:	429a      	cmp	r2, r3
    2d96:	d808      	bhi.n	2daa <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2d98:	69fb      	ldr	r3, [r7, #28]
    2d9a:	689a      	ldr	r2, [r3, #8]
    2d9c:	69fb      	ldr	r3, [r7, #28]
    2d9e:	6859      	ldr	r1, [r3, #4]
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	1acb      	subs	r3, r1, r3
    2da4:	4413      	add	r3, r2
    2da6:	617b      	str	r3, [r7, #20]
    2da8:	e009      	b.n	2dbe <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2daa:	69fb      	ldr	r3, [r7, #28]
    2dac:	689a      	ldr	r2, [r3, #8]
    2dae:	69fb      	ldr	r3, [r7, #28]
    2db0:	685b      	ldr	r3, [r3, #4]
    2db2:	441a      	add	r2, r3
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	425b      	negs	r3, r3
    2db8:	4413      	add	r3, r2
    2dba:	3301      	adds	r3, #1
    2dbc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2dbe:	68bb      	ldr	r3, [r7, #8]
    2dc0:	689a      	ldr	r2, [r3, #8]
    2dc2:	697b      	ldr	r3, [r7, #20]
    2dc4:	429a      	cmp	r2, r3
    2dc6:	d909      	bls.n	2ddc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2dc8:	69fb      	ldr	r3, [r7, #28]
    2dca:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2dcc:	69f8      	ldr	r0, [r7, #28]
    2dce:	4b0e      	ldr	r3, [pc, #56]	; (2e08 <timer_add_timer_task+0xa8>)
    2dd0:	4798      	blx	r3
    2dd2:	61f8      	str	r0, [r7, #28]
    2dd4:	69fb      	ldr	r3, [r7, #28]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d1d9      	bne.n	2d8e <timer_add_timer_task+0x2e>
    2dda:	e000      	b.n	2dde <timer_add_timer_task+0x7e>
			break;
    2ddc:	bf00      	nop
	}

	if (it == head) {
    2dde:	69fa      	ldr	r2, [r7, #28]
    2de0:	693b      	ldr	r3, [r7, #16]
    2de2:	429a      	cmp	r2, r3
    2de4:	d104      	bne.n	2df0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2de6:	68b9      	ldr	r1, [r7, #8]
    2de8:	68f8      	ldr	r0, [r7, #12]
    2dea:	4b06      	ldr	r3, [pc, #24]	; (2e04 <timer_add_timer_task+0xa4>)
    2dec:	4798      	blx	r3
    2dee:	e003      	b.n	2df8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2df0:	68b9      	ldr	r1, [r7, #8]
    2df2:	69b8      	ldr	r0, [r7, #24]
    2df4:	4b05      	ldr	r3, [pc, #20]	; (2e0c <timer_add_timer_task+0xac>)
    2df6:	4798      	blx	r3
	}
}
    2df8:	3720      	adds	r7, #32
    2dfa:	46bd      	mov	sp, r7
    2dfc:	bd80      	pop	{r7, pc}
    2dfe:	bf00      	nop
    2e00:	000029e5 	.word	0x000029e5
    2e04:	00003885 	.word	0x00003885
    2e08:	000029fd 	.word	0x000029fd
    2e0c:	000038dd 	.word	0x000038dd

00002e10 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b086      	sub	sp, #24
    2e14:	af00      	add	r7, sp, #0
    2e16:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	3b04      	subs	r3, #4
    2e1c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2e1e:	693b      	ldr	r3, [r7, #16]
    2e20:	3318      	adds	r3, #24
    2e22:	4618      	mov	r0, r3
    2e24:	4b27      	ldr	r3, [pc, #156]	; (2ec4 <timer_process_counted+0xb4>)
    2e26:	4798      	blx	r3
    2e28:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2e2a:	693b      	ldr	r3, [r7, #16]
    2e2c:	695b      	ldr	r3, [r3, #20]
    2e2e:	1c5a      	adds	r2, r3, #1
    2e30:	693b      	ldr	r3, [r7, #16]
    2e32:	615a      	str	r2, [r3, #20]
    2e34:	693b      	ldr	r3, [r7, #16]
    2e36:	695b      	ldr	r3, [r3, #20]
    2e38:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2e3a:	693b      	ldr	r3, [r7, #16]
    2e3c:	7f1b      	ldrb	r3, [r3, #28]
    2e3e:	b2db      	uxtb	r3, r3
    2e40:	f003 0301 	and.w	r3, r3, #1
    2e44:	2b00      	cmp	r3, #0
    2e46:	d106      	bne.n	2e56 <timer_process_counted+0x46>
    2e48:	693b      	ldr	r3, [r7, #16]
    2e4a:	7f1b      	ldrb	r3, [r3, #28]
    2e4c:	b2db      	uxtb	r3, r3
    2e4e:	f003 0302 	and.w	r3, r3, #2
    2e52:	2b00      	cmp	r3, #0
    2e54:	d027      	beq.n	2ea6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2e56:	693b      	ldr	r3, [r7, #16]
    2e58:	7f1b      	ldrb	r3, [r3, #28]
    2e5a:	b2db      	uxtb	r3, r3
    2e5c:	f043 0302 	orr.w	r3, r3, #2
    2e60:	b2da      	uxtb	r2, r3
    2e62:	693b      	ldr	r3, [r7, #16]
    2e64:	771a      	strb	r2, [r3, #28]
		return;
    2e66:	e029      	b.n	2ebc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2e68:	697b      	ldr	r3, [r7, #20]
    2e6a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2e6c:	693b      	ldr	r3, [r7, #16]
    2e6e:	3318      	adds	r3, #24
    2e70:	4618      	mov	r0, r3
    2e72:	4b15      	ldr	r3, [pc, #84]	; (2ec8 <timer_process_counted+0xb8>)
    2e74:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2e76:	68bb      	ldr	r3, [r7, #8]
    2e78:	7c1b      	ldrb	r3, [r3, #16]
    2e7a:	2b01      	cmp	r3, #1
    2e7c:	d109      	bne.n	2e92 <timer_process_counted+0x82>
			tmp->time_label = time;
    2e7e:	68bb      	ldr	r3, [r7, #8]
    2e80:	68fa      	ldr	r2, [r7, #12]
    2e82:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2e84:	693b      	ldr	r3, [r7, #16]
    2e86:	3318      	adds	r3, #24
    2e88:	68fa      	ldr	r2, [r7, #12]
    2e8a:	68b9      	ldr	r1, [r7, #8]
    2e8c:	4618      	mov	r0, r3
    2e8e:	4b0f      	ldr	r3, [pc, #60]	; (2ecc <timer_process_counted+0xbc>)
    2e90:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2e92:	693b      	ldr	r3, [r7, #16]
    2e94:	3318      	adds	r3, #24
    2e96:	4618      	mov	r0, r3
    2e98:	4b0a      	ldr	r3, [pc, #40]	; (2ec4 <timer_process_counted+0xb4>)
    2e9a:	4798      	blx	r3
    2e9c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2e9e:	68bb      	ldr	r3, [r7, #8]
    2ea0:	68db      	ldr	r3, [r3, #12]
    2ea2:	68b8      	ldr	r0, [r7, #8]
    2ea4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2ea6:	697b      	ldr	r3, [r7, #20]
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d007      	beq.n	2ebc <timer_process_counted+0xac>
    2eac:	697b      	ldr	r3, [r7, #20]
    2eae:	685b      	ldr	r3, [r3, #4]
    2eb0:	68fa      	ldr	r2, [r7, #12]
    2eb2:	1ad2      	subs	r2, r2, r3
    2eb4:	697b      	ldr	r3, [r7, #20]
    2eb6:	689b      	ldr	r3, [r3, #8]
    2eb8:	429a      	cmp	r2, r3
    2eba:	d2d5      	bcs.n	2e68 <timer_process_counted+0x58>
	}
}
    2ebc:	3718      	adds	r7, #24
    2ebe:	46bd      	mov	sp, r7
    2ec0:	bd80      	pop	{r7, pc}
    2ec2:	bf00      	nop
    2ec4:	000029e5 	.word	0x000029e5
    2ec8:	0000397d 	.word	0x0000397d
    2ecc:	00002d61 	.word	0x00002d61

00002ed0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2ed0:	b480      	push	{r7}
    2ed2:	b085      	sub	sp, #20
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	4603      	mov	r3, r0
    2ed8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2eda:	2300      	movs	r3, #0
    2edc:	73fb      	strb	r3, [r7, #15]
    2ede:	e029      	b.n	2f34 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ee4:	4a19      	ldr	r2, [pc, #100]	; (2f4c <_usb_d_find_ep+0x7c>)
    2ee6:	015b      	lsls	r3, r3, #5
    2ee8:	4413      	add	r3, r2
    2eea:	3301      	adds	r3, #1
    2eec:	781b      	ldrb	r3, [r3, #0]
    2eee:	79fa      	ldrb	r2, [r7, #7]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d102      	bne.n	2efa <_usb_d_find_ep+0x2a>
			return i;
    2ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ef8:	e022      	b.n	2f40 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2efe:	4a13      	ldr	r2, [pc, #76]	; (2f4c <_usb_d_find_ep+0x7c>)
    2f00:	015b      	lsls	r3, r3, #5
    2f02:	4413      	add	r3, r2
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d10e      	bne.n	2f28 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2f0a:	79fb      	ldrb	r3, [r7, #7]
    2f0c:	f003 030f 	and.w	r3, r3, #15
    2f10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2f14:	490d      	ldr	r1, [pc, #52]	; (2f4c <_usb_d_find_ep+0x7c>)
    2f16:	0152      	lsls	r2, r2, #5
    2f18:	440a      	add	r2, r1
    2f1a:	3201      	adds	r2, #1
    2f1c:	7812      	ldrb	r2, [r2, #0]
    2f1e:	4293      	cmp	r3, r2
    2f20:	d102      	bne.n	2f28 <_usb_d_find_ep+0x58>
			return i;
    2f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f26:	e00b      	b.n	2f40 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f2c:	b2db      	uxtb	r3, r3
    2f2e:	3301      	adds	r3, #1
    2f30:	b2db      	uxtb	r3, r3
    2f32:	73fb      	strb	r3, [r7, #15]
    2f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f38:	2b03      	cmp	r3, #3
    2f3a:	ddd1      	ble.n	2ee0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
    2f40:	4618      	mov	r0, r3
    2f42:	3714      	adds	r7, #20
    2f44:	46bd      	mov	sp, r7
    2f46:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f4a:	4770      	bx	lr
    2f4c:	20000ad4 	.word	0x20000ad4

00002f50 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b088      	sub	sp, #32
    2f54:	af00      	add	r7, sp, #0
    2f56:	60ba      	str	r2, [r7, #8]
    2f58:	607b      	str	r3, [r7, #4]
    2f5a:	4603      	mov	r3, r0
    2f5c:	73fb      	strb	r3, [r7, #15]
    2f5e:	460b      	mov	r3, r1
    2f60:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2f62:	68bb      	ldr	r3, [r7, #8]
    2f64:	617b      	str	r3, [r7, #20]
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	61bb      	str	r3, [r7, #24]
    2f6a:	7bbb      	ldrb	r3, [r7, #14]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d004      	beq.n	2f7a <_usb_d_trans+0x2a>
    2f70:	7bfb      	ldrb	r3, [r7, #15]
    2f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f76:	b2db      	uxtb	r3, r3
    2f78:	e003      	b.n	2f82 <_usb_d_trans+0x32>
    2f7a:	7bfb      	ldrb	r3, [r7, #15]
    2f7c:	f003 030f 	and.w	r3, r3, #15
    2f80:	b2db      	uxtb	r3, r3
    2f82:	773b      	strb	r3, [r7, #28]
    2f84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2f88:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2f8a:	f107 0314 	add.w	r3, r7, #20
    2f8e:	4618      	mov	r0, r3
    2f90:	4b03      	ldr	r3, [pc, #12]	; (2fa0 <_usb_d_trans+0x50>)
    2f92:	4798      	blx	r3
    2f94:	4603      	mov	r3, r0
}
    2f96:	4618      	mov	r0, r3
    2f98:	3720      	adds	r7, #32
    2f9a:	46bd      	mov	sp, r7
    2f9c:	bd80      	pop	{r7, pc}
    2f9e:	bf00      	nop
    2fa0:	0000a641 	.word	0x0000a641

00002fa4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2fa4:	b480      	push	{r7}
    2fa6:	b085      	sub	sp, #20
    2fa8:	af00      	add	r7, sp, #0
    2faa:	60f8      	str	r0, [r7, #12]
    2fac:	60b9      	str	r1, [r7, #8]
    2fae:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2fb0:	2300      	movs	r3, #0
}
    2fb2:	4618      	mov	r0, r3
    2fb4:	3714      	adds	r7, #20
    2fb6:	46bd      	mov	sp, r7
    2fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fbc:	4770      	bx	lr
	...

00002fc0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b086      	sub	sp, #24
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	4603      	mov	r3, r0
    2fc8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2fca:	79fb      	ldrb	r3, [r7, #7]
    2fcc:	4618      	mov	r0, r3
    2fce:	4b2a      	ldr	r3, [pc, #168]	; (3078 <usb_d_cb_trans_setup+0xb8>)
    2fd0:	4798      	blx	r3
    2fd2:	4603      	mov	r3, r0
    2fd4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2fda:	015b      	lsls	r3, r3, #5
    2fdc:	4a27      	ldr	r2, [pc, #156]	; (307c <usb_d_cb_trans_setup+0xbc>)
    2fde:	4413      	add	r3, r2
    2fe0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2fe2:	693b      	ldr	r3, [r7, #16]
    2fe4:	330c      	adds	r3, #12
    2fe6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2fe8:	79fb      	ldrb	r3, [r7, #7]
    2fea:	68f9      	ldr	r1, [r7, #12]
    2fec:	4618      	mov	r0, r3
    2fee:	4b24      	ldr	r3, [pc, #144]	; (3080 <usb_d_cb_trans_setup+0xc0>)
    2ff0:	4798      	blx	r3
    2ff2:	4603      	mov	r3, r0
    2ff4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2ff6:	7afb      	ldrb	r3, [r7, #11]
    2ff8:	2b08      	cmp	r3, #8
    2ffa:	d00d      	beq.n	3018 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2ffc:	79fb      	ldrb	r3, [r7, #7]
    2ffe:	2101      	movs	r1, #1
    3000:	4618      	mov	r0, r3
    3002:	4b20      	ldr	r3, [pc, #128]	; (3084 <usb_d_cb_trans_setup+0xc4>)
    3004:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3006:	79fb      	ldrb	r3, [r7, #7]
    3008:	f063 037f 	orn	r3, r3, #127	; 0x7f
    300c:	b2db      	uxtb	r3, r3
    300e:	2101      	movs	r1, #1
    3010:	4618      	mov	r0, r3
    3012:	4b1c      	ldr	r3, [pc, #112]	; (3084 <usb_d_cb_trans_setup+0xc4>)
    3014:	4798      	blx	r3
		return;
    3016:	e02b      	b.n	3070 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3018:	79fb      	ldrb	r3, [r7, #7]
    301a:	2100      	movs	r1, #0
    301c:	4618      	mov	r0, r3
    301e:	4b19      	ldr	r3, [pc, #100]	; (3084 <usb_d_cb_trans_setup+0xc4>)
    3020:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    3022:	79fb      	ldrb	r3, [r7, #7]
    3024:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3028:	b2db      	uxtb	r3, r3
    302a:	2100      	movs	r1, #0
    302c:	4618      	mov	r0, r3
    302e:	4b15      	ldr	r3, [pc, #84]	; (3084 <usb_d_cb_trans_setup+0xc4>)
    3030:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3032:	693b      	ldr	r3, [r7, #16]
    3034:	2201      	movs	r2, #1
    3036:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3038:	693b      	ldr	r3, [r7, #16]
    303a:	695b      	ldr	r3, [r3, #20]
    303c:	79fa      	ldrb	r2, [r7, #7]
    303e:	68f9      	ldr	r1, [r7, #12]
    3040:	4610      	mov	r0, r2
    3042:	4798      	blx	r3
    3044:	4603      	mov	r3, r0
    3046:	f083 0301 	eor.w	r3, r3, #1
    304a:	b2db      	uxtb	r3, r3
    304c:	2b00      	cmp	r3, #0
    304e:	d00f      	beq.n	3070 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3050:	693b      	ldr	r3, [r7, #16]
    3052:	2205      	movs	r2, #5
    3054:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3056:	79fb      	ldrb	r3, [r7, #7]
    3058:	2101      	movs	r1, #1
    305a:	4618      	mov	r0, r3
    305c:	4b09      	ldr	r3, [pc, #36]	; (3084 <usb_d_cb_trans_setup+0xc4>)
    305e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3060:	79fb      	ldrb	r3, [r7, #7]
    3062:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3066:	b2db      	uxtb	r3, r3
    3068:	2101      	movs	r1, #1
    306a:	4618      	mov	r0, r3
    306c:	4b05      	ldr	r3, [pc, #20]	; (3084 <usb_d_cb_trans_setup+0xc4>)
    306e:	4798      	blx	r3
	}
}
    3070:	3718      	adds	r7, #24
    3072:	46bd      	mov	sp, r7
    3074:	bd80      	pop	{r7, pc}
    3076:	bf00      	nop
    3078:	00002ed1 	.word	0x00002ed1
    307c:	20000ad4 	.word	0x20000ad4
    3080:	0000a599 	.word	0x0000a599
    3084:	0000a411 	.word	0x0000a411

00003088 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	4603      	mov	r3, r0
    3090:	6039      	str	r1, [r7, #0]
    3092:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3094:	79fb      	ldrb	r3, [r7, #7]
    3096:	4618      	mov	r0, r3
    3098:	4b0d      	ldr	r3, [pc, #52]	; (30d0 <usb_d_cb_trans_more+0x48>)
    309a:	4798      	blx	r3
    309c:	4603      	mov	r3, r0
    309e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    30a4:	015b      	lsls	r3, r3, #5
    30a6:	4a0b      	ldr	r2, [pc, #44]	; (30d4 <usb_d_cb_trans_more+0x4c>)
    30a8:	4413      	add	r3, r2
    30aa:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    30ac:	68bb      	ldr	r3, [r7, #8]
    30ae:	789b      	ldrb	r3, [r3, #2]
    30b0:	2b03      	cmp	r3, #3
    30b2:	d107      	bne.n	30c4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    30b4:	68bb      	ldr	r3, [r7, #8]
    30b6:	699b      	ldr	r3, [r3, #24]
    30b8:	79fa      	ldrb	r2, [r7, #7]
    30ba:	6839      	ldr	r1, [r7, #0]
    30bc:	4610      	mov	r0, r2
    30be:	4798      	blx	r3
    30c0:	4603      	mov	r3, r0
    30c2:	e000      	b.n	30c6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    30c4:	2300      	movs	r3, #0
}
    30c6:	4618      	mov	r0, r3
    30c8:	3710      	adds	r7, #16
    30ca:	46bd      	mov	sp, r7
    30cc:	bd80      	pop	{r7, pc}
    30ce:	bf00      	nop
    30d0:	00002ed1 	.word	0x00002ed1
    30d4:	20000ad4 	.word	0x20000ad4

000030d8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    30d8:	b590      	push	{r4, r7, lr}
    30da:	b087      	sub	sp, #28
    30dc:	af02      	add	r7, sp, #8
    30de:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    30e0:	687b      	ldr	r3, [r7, #4]
    30e2:	789b      	ldrb	r3, [r3, #2]
    30e4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	7b1b      	ldrb	r3, [r3, #12]
    30ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    30ee:	2b00      	cmp	r3, #0
    30f0:	bf14      	ite	ne
    30f2:	2301      	movne	r3, #1
    30f4:	2300      	moveq	r3, #0
    30f6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    30f8:	7bfb      	ldrb	r3, [r7, #15]
    30fa:	2b03      	cmp	r3, #3
    30fc:	d13a      	bne.n	3174 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	69db      	ldr	r3, [r3, #28]
    3102:	687a      	ldr	r2, [r7, #4]
    3104:	7850      	ldrb	r0, [r2, #1]
    3106:	687a      	ldr	r2, [r7, #4]
    3108:	320c      	adds	r2, #12
    310a:	2101      	movs	r1, #1
    310c:	4798      	blx	r3
    310e:	4603      	mov	r3, r0
    3110:	737b      	strb	r3, [r7, #13]
		if (err) {
    3112:	7b7b      	ldrb	r3, [r7, #13]
    3114:	2b00      	cmp	r3, #0
    3116:	d015      	beq.n	3144 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3118:	687b      	ldr	r3, [r7, #4]
    311a:	2205      	movs	r2, #5
    311c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	2202      	movs	r2, #2
    3122:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3124:	7bbb      	ldrb	r3, [r7, #14]
    3126:	2b00      	cmp	r3, #0
    3128:	d002      	beq.n	3130 <usb_d_ctrl_trans_done+0x58>
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	785b      	ldrb	r3, [r3, #1]
    312e:	e004      	b.n	313a <usb_d_ctrl_trans_done+0x62>
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	785b      	ldrb	r3, [r3, #1]
    3134:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3138:	b2db      	uxtb	r3, r3
    313a:	2101      	movs	r1, #1
    313c:	4618      	mov	r0, r3
    313e:	4b15      	ldr	r3, [pc, #84]	; (3194 <usb_d_ctrl_trans_done+0xbc>)
    3140:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3142:	e022      	b.n	318a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	2204      	movs	r2, #4
    3148:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	7858      	ldrb	r0, [r3, #1]
    314e:	7bbb      	ldrb	r3, [r7, #14]
    3150:	2b00      	cmp	r3, #0
    3152:	bf14      	ite	ne
    3154:	2301      	movne	r3, #1
    3156:	2300      	moveq	r3, #0
    3158:	b2db      	uxtb	r3, r3
    315a:	f083 0301 	eor.w	r3, r3, #1
    315e:	b2db      	uxtb	r3, r3
    3160:	f003 0301 	and.w	r3, r3, #1
    3164:	b2d9      	uxtb	r1, r3
    3166:	2301      	movs	r3, #1
    3168:	9300      	str	r3, [sp, #0]
    316a:	2300      	movs	r3, #0
    316c:	2200      	movs	r2, #0
    316e:	4c0a      	ldr	r4, [pc, #40]	; (3198 <usb_d_ctrl_trans_done+0xc0>)
    3170:	47a0      	blx	r4
}
    3172:	e00a      	b.n	318a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	69db      	ldr	r3, [r3, #28]
    3178:	687a      	ldr	r2, [r7, #4]
    317a:	7850      	ldrb	r0, [r2, #1]
    317c:	687a      	ldr	r2, [r7, #4]
    317e:	320c      	adds	r2, #12
    3180:	2100      	movs	r1, #0
    3182:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	2202      	movs	r2, #2
    3188:	709a      	strb	r2, [r3, #2]
}
    318a:	bf00      	nop
    318c:	3714      	adds	r7, #20
    318e:	46bd      	mov	sp, r7
    3190:	bd90      	pop	{r4, r7, pc}
    3192:	bf00      	nop
    3194:	0000a411 	.word	0x0000a411
    3198:	00002f51 	.word	0x00002f51

0000319c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    319c:	b580      	push	{r7, lr}
    319e:	b086      	sub	sp, #24
    31a0:	af00      	add	r7, sp, #0
    31a2:	4603      	mov	r3, r0
    31a4:	60b9      	str	r1, [r7, #8]
    31a6:	607a      	str	r2, [r7, #4]
    31a8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    31aa:	7bfb      	ldrb	r3, [r7, #15]
    31ac:	4618      	mov	r0, r3
    31ae:	4b2f      	ldr	r3, [pc, #188]	; (326c <_usb_d_cb_trans_done+0xd0>)
    31b0:	4798      	blx	r3
    31b2:	4603      	mov	r3, r0
    31b4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    31b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    31ba:	015b      	lsls	r3, r3, #5
    31bc:	4a2c      	ldr	r2, [pc, #176]	; (3270 <_usb_d_cb_trans_done+0xd4>)
    31be:	4413      	add	r3, r2
    31c0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    31c2:	68bb      	ldr	r3, [r7, #8]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d10e      	bne.n	31e6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    31c8:	693b      	ldr	r3, [r7, #16]
    31ca:	2200      	movs	r2, #0
    31cc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    31ce:	693b      	ldr	r3, [r7, #16]
    31d0:	781b      	ldrb	r3, [r3, #0]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d103      	bne.n	31de <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    31d6:	6938      	ldr	r0, [r7, #16]
    31d8:	4b26      	ldr	r3, [pc, #152]	; (3274 <_usb_d_cb_trans_done+0xd8>)
    31da:	4798      	blx	r3
			return;
    31dc:	e043      	b.n	3266 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    31de:	693b      	ldr	r3, [r7, #16]
    31e0:	2201      	movs	r2, #1
    31e2:	709a      	strb	r2, [r3, #2]
    31e4:	e038      	b.n	3258 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    31e6:	68bb      	ldr	r3, [r7, #8]
    31e8:	2b01      	cmp	r3, #1
    31ea:	d113      	bne.n	3214 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    31ec:	693b      	ldr	r3, [r7, #16]
    31ee:	2202      	movs	r2, #2
    31f0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    31f2:	693b      	ldr	r3, [r7, #16]
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	2b00      	cmp	r3, #0
    31f8:	d108      	bne.n	320c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    31fa:	693b      	ldr	r3, [r7, #16]
    31fc:	2202      	movs	r2, #2
    31fe:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3200:	7bfb      	ldrb	r3, [r7, #15]
    3202:	2100      	movs	r1, #0
    3204:	4618      	mov	r0, r3
    3206:	4b1c      	ldr	r3, [pc, #112]	; (3278 <_usb_d_cb_trans_done+0xdc>)
    3208:	4798      	blx	r3
    320a:	e025      	b.n	3258 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    320c:	693b      	ldr	r3, [r7, #16]
    320e:	2205      	movs	r2, #5
    3210:	709a      	strb	r2, [r3, #2]
    3212:	e021      	b.n	3258 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3214:	68bb      	ldr	r3, [r7, #8]
    3216:	2b02      	cmp	r3, #2
    3218:	d10e      	bne.n	3238 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    321a:	693b      	ldr	r3, [r7, #16]
    321c:	2204      	movs	r2, #4
    321e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3220:	693b      	ldr	r3, [r7, #16]
    3222:	781b      	ldrb	r3, [r3, #0]
    3224:	2b00      	cmp	r3, #0
    3226:	d103      	bne.n	3230 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3228:	693b      	ldr	r3, [r7, #16]
    322a:	2202      	movs	r2, #2
    322c:	709a      	strb	r2, [r3, #2]
			return;
    322e:	e01a      	b.n	3266 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3230:	693b      	ldr	r3, [r7, #16]
    3232:	2201      	movs	r2, #1
    3234:	709a      	strb	r2, [r3, #2]
    3236:	e00f      	b.n	3258 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3238:	68bb      	ldr	r3, [r7, #8]
    323a:	2b03      	cmp	r3, #3
    323c:	d106      	bne.n	324c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    323e:	693b      	ldr	r3, [r7, #16]
    3240:	2200      	movs	r2, #0
    3242:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3244:	693b      	ldr	r3, [r7, #16]
    3246:	2205      	movs	r2, #5
    3248:	70da      	strb	r2, [r3, #3]
    324a:	e005      	b.n	3258 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    324c:	693b      	ldr	r3, [r7, #16]
    324e:	2206      	movs	r2, #6
    3250:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3252:	693b      	ldr	r3, [r7, #16]
    3254:	2206      	movs	r2, #6
    3256:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3258:	693b      	ldr	r3, [r7, #16]
    325a:	69db      	ldr	r3, [r3, #28]
    325c:	693a      	ldr	r2, [r7, #16]
    325e:	78d1      	ldrb	r1, [r2, #3]
    3260:	687a      	ldr	r2, [r7, #4]
    3262:	7bf8      	ldrb	r0, [r7, #15]
    3264:	4798      	blx	r3
}
    3266:	3718      	adds	r7, #24
    3268:	46bd      	mov	sp, r7
    326a:	bd80      	pop	{r7, pc}
    326c:	00002ed1 	.word	0x00002ed1
    3270:	20000ad4 	.word	0x20000ad4
    3274:	000030d9 	.word	0x000030d9
    3278:	0000a411 	.word	0x0000a411

0000327c <usb_d_init>:

int32_t usb_d_init(void)
{
    327c:	b580      	push	{r7, lr}
    327e:	b082      	sub	sp, #8
    3280:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3282:	4b21      	ldr	r3, [pc, #132]	; (3308 <usb_d_init+0x8c>)
    3284:	4798      	blx	r3
    3286:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3288:	683b      	ldr	r3, [r7, #0]
    328a:	2b00      	cmp	r3, #0
    328c:	da01      	bge.n	3292 <usb_d_init+0x16>
		return rc;
    328e:	683b      	ldr	r3, [r7, #0]
    3290:	e036      	b.n	3300 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3292:	2280      	movs	r2, #128	; 0x80
    3294:	2100      	movs	r1, #0
    3296:	481d      	ldr	r0, [pc, #116]	; (330c <usb_d_init+0x90>)
    3298:	4b1d      	ldr	r3, [pc, #116]	; (3310 <usb_d_init+0x94>)
    329a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    329c:	2300      	movs	r3, #0
    329e:	71fb      	strb	r3, [r7, #7]
    32a0:	e01e      	b.n	32e0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    32a2:	79fb      	ldrb	r3, [r7, #7]
    32a4:	4a19      	ldr	r2, [pc, #100]	; (330c <usb_d_init+0x90>)
    32a6:	015b      	lsls	r3, r3, #5
    32a8:	4413      	add	r3, r2
    32aa:	3301      	adds	r3, #1
    32ac:	22ff      	movs	r2, #255	; 0xff
    32ae:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    32b0:	79fb      	ldrb	r3, [r7, #7]
    32b2:	4a16      	ldr	r2, [pc, #88]	; (330c <usb_d_init+0x90>)
    32b4:	015b      	lsls	r3, r3, #5
    32b6:	4413      	add	r3, r2
    32b8:	3314      	adds	r3, #20
    32ba:	4a16      	ldr	r2, [pc, #88]	; (3314 <usb_d_init+0x98>)
    32bc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    32be:	79fb      	ldrb	r3, [r7, #7]
    32c0:	4a12      	ldr	r2, [pc, #72]	; (330c <usb_d_init+0x90>)
    32c2:	015b      	lsls	r3, r3, #5
    32c4:	4413      	add	r3, r2
    32c6:	3318      	adds	r3, #24
    32c8:	4a12      	ldr	r2, [pc, #72]	; (3314 <usb_d_init+0x98>)
    32ca:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    32cc:	79fb      	ldrb	r3, [r7, #7]
    32ce:	4a0f      	ldr	r2, [pc, #60]	; (330c <usb_d_init+0x90>)
    32d0:	015b      	lsls	r3, r3, #5
    32d2:	4413      	add	r3, r2
    32d4:	331c      	adds	r3, #28
    32d6:	4a0f      	ldr	r2, [pc, #60]	; (3314 <usb_d_init+0x98>)
    32d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    32da:	79fb      	ldrb	r3, [r7, #7]
    32dc:	3301      	adds	r3, #1
    32de:	71fb      	strb	r3, [r7, #7]
    32e0:	79fb      	ldrb	r3, [r7, #7]
    32e2:	2b03      	cmp	r3, #3
    32e4:	d9dd      	bls.n	32a2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    32e6:	490c      	ldr	r1, [pc, #48]	; (3318 <usb_d_init+0x9c>)
    32e8:	2000      	movs	r0, #0
    32ea:	4b0c      	ldr	r3, [pc, #48]	; (331c <usb_d_init+0xa0>)
    32ec:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    32ee:	490c      	ldr	r1, [pc, #48]	; (3320 <usb_d_init+0xa4>)
    32f0:	2001      	movs	r0, #1
    32f2:	4b0a      	ldr	r3, [pc, #40]	; (331c <usb_d_init+0xa0>)
    32f4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    32f6:	490b      	ldr	r1, [pc, #44]	; (3324 <usb_d_init+0xa8>)
    32f8:	2002      	movs	r0, #2
    32fa:	4b08      	ldr	r3, [pc, #32]	; (331c <usb_d_init+0xa0>)
    32fc:	4798      	blx	r3
	return ERR_NONE;
    32fe:	2300      	movs	r3, #0
}
    3300:	4618      	mov	r0, r3
    3302:	3708      	adds	r7, #8
    3304:	46bd      	mov	sp, r7
    3306:	bd80      	pop	{r7, pc}
    3308:	00009c59 	.word	0x00009c59
    330c:	20000ad4 	.word	0x20000ad4
    3310:	00010309 	.word	0x00010309
    3314:	00002fa5 	.word	0x00002fa5
    3318:	00002fc1 	.word	0x00002fc1
    331c:	0000a8a1 	.word	0x0000a8a1
    3320:	00003089 	.word	0x00003089
    3324:	0000319d 	.word	0x0000319d

00003328 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3328:	b580      	push	{r7, lr}
    332a:	b082      	sub	sp, #8
    332c:	af00      	add	r7, sp, #0
    332e:	4603      	mov	r3, r0
    3330:	6039      	str	r1, [r7, #0]
    3332:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3334:	79fb      	ldrb	r3, [r7, #7]
    3336:	6839      	ldr	r1, [r7, #0]
    3338:	4618      	mov	r0, r3
    333a:	4b03      	ldr	r3, [pc, #12]	; (3348 <usb_d_register_callback+0x20>)
    333c:	4798      	blx	r3
}
    333e:	bf00      	nop
    3340:	3708      	adds	r7, #8
    3342:	46bd      	mov	sp, r7
    3344:	bd80      	pop	{r7, pc}
    3346:	bf00      	nop
    3348:	0000a859 	.word	0x0000a859

0000334c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    334c:	b580      	push	{r7, lr}
    334e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3350:	4b02      	ldr	r3, [pc, #8]	; (335c <usb_d_enable+0x10>)
    3352:	4798      	blx	r3
    3354:	4603      	mov	r3, r0
}
    3356:	4618      	mov	r0, r3
    3358:	bd80      	pop	{r7, pc}
    335a:	bf00      	nop
    335c:	00009d49 	.word	0x00009d49

00003360 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3360:	b580      	push	{r7, lr}
    3362:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3364:	4b01      	ldr	r3, [pc, #4]	; (336c <usb_d_attach+0xc>)
    3366:	4798      	blx	r3
}
    3368:	bf00      	nop
    336a:	bd80      	pop	{r7, pc}
    336c:	00009dcd 	.word	0x00009dcd

00003370 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3370:	b580      	push	{r7, lr}
    3372:	b082      	sub	sp, #8
    3374:	af00      	add	r7, sp, #0
    3376:	4603      	mov	r3, r0
    3378:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    337a:	79fb      	ldrb	r3, [r7, #7]
    337c:	4618      	mov	r0, r3
    337e:	4b03      	ldr	r3, [pc, #12]	; (338c <usb_d_set_address+0x1c>)
    3380:	4798      	blx	r3
}
    3382:	bf00      	nop
    3384:	3708      	adds	r7, #8
    3386:	46bd      	mov	sp, r7
    3388:	bd80      	pop	{r7, pc}
    338a:	bf00      	nop
    338c:	00009de1 	.word	0x00009de1

00003390 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3390:	b580      	push	{r7, lr}
    3392:	b082      	sub	sp, #8
    3394:	af00      	add	r7, sp, #0
    3396:	4603      	mov	r3, r0
    3398:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    339a:	79fb      	ldrb	r3, [r7, #7]
    339c:	b29b      	uxth	r3, r3
    339e:	461a      	mov	r2, r3
    33a0:	2100      	movs	r1, #0
    33a2:	2000      	movs	r0, #0
    33a4:	4b03      	ldr	r3, [pc, #12]	; (33b4 <usb_d_ep0_init+0x24>)
    33a6:	4798      	blx	r3
    33a8:	4603      	mov	r3, r0
}
    33aa:	4618      	mov	r0, r3
    33ac:	3708      	adds	r7, #8
    33ae:	46bd      	mov	sp, r7
    33b0:	bd80      	pop	{r7, pc}
    33b2:	bf00      	nop
    33b4:	000033b9 	.word	0x000033b9

000033b8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    33b8:	b580      	push	{r7, lr}
    33ba:	b086      	sub	sp, #24
    33bc:	af00      	add	r7, sp, #0
    33be:	4603      	mov	r3, r0
    33c0:	71fb      	strb	r3, [r7, #7]
    33c2:	460b      	mov	r3, r1
    33c4:	71bb      	strb	r3, [r7, #6]
    33c6:	4613      	mov	r3, r2
    33c8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    33ca:	79fb      	ldrb	r3, [r7, #7]
    33cc:	4618      	mov	r0, r3
    33ce:	4b1e      	ldr	r3, [pc, #120]	; (3448 <usb_d_ep_init+0x90>)
    33d0:	4798      	blx	r3
    33d2:	4603      	mov	r3, r0
    33d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    33d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33da:	015b      	lsls	r3, r3, #5
    33dc:	4a1b      	ldr	r2, [pc, #108]	; (344c <usb_d_ep_init+0x94>)
    33de:	4413      	add	r3, r2
    33e0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    33e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33e6:	2b00      	cmp	r3, #0
    33e8:	db02      	blt.n	33f0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    33ea:	f06f 0313 	mvn.w	r3, #19
    33ee:	e027      	b.n	3440 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    33f0:	20ff      	movs	r0, #255	; 0xff
    33f2:	4b15      	ldr	r3, [pc, #84]	; (3448 <usb_d_ep_init+0x90>)
    33f4:	4798      	blx	r3
    33f6:	4603      	mov	r3, r0
    33f8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    33fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33fe:	2b00      	cmp	r3, #0
    3400:	da02      	bge.n	3408 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3402:	f06f 0314 	mvn.w	r3, #20
    3406:	e01b      	b.n	3440 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3408:	f997 3017 	ldrsb.w	r3, [r7, #23]
    340c:	015b      	lsls	r3, r3, #5
    340e:	4a0f      	ldr	r2, [pc, #60]	; (344c <usb_d_ep_init+0x94>)
    3410:	4413      	add	r3, r2
    3412:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3414:	88ba      	ldrh	r2, [r7, #4]
    3416:	79b9      	ldrb	r1, [r7, #6]
    3418:	79fb      	ldrb	r3, [r7, #7]
    341a:	4618      	mov	r0, r3
    341c:	4b0c      	ldr	r3, [pc, #48]	; (3450 <usb_d_ep_init+0x98>)
    341e:	4798      	blx	r3
    3420:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3422:	68fb      	ldr	r3, [r7, #12]
    3424:	2b00      	cmp	r3, #0
    3426:	da01      	bge.n	342c <usb_d_ep_init+0x74>
		return rc;
    3428:	68fb      	ldr	r3, [r7, #12]
    342a:	e009      	b.n	3440 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    342c:	693b      	ldr	r3, [r7, #16]
    342e:	79fa      	ldrb	r2, [r7, #7]
    3430:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3432:	79bb      	ldrb	r3, [r7, #6]
    3434:	f003 0303 	and.w	r3, r3, #3
    3438:	b2da      	uxtb	r2, r3
    343a:	693b      	ldr	r3, [r7, #16]
    343c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    343e:	2300      	movs	r3, #0
}
    3440:	4618      	mov	r0, r3
    3442:	3718      	adds	r7, #24
    3444:	46bd      	mov	sp, r7
    3446:	bd80      	pop	{r7, pc}
    3448:	00002ed1 	.word	0x00002ed1
    344c:	20000ad4 	.word	0x20000ad4
    3450:	00009e81 	.word	0x00009e81

00003454 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3454:	b580      	push	{r7, lr}
    3456:	b084      	sub	sp, #16
    3458:	af00      	add	r7, sp, #0
    345a:	4603      	mov	r3, r0
    345c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    345e:	79fb      	ldrb	r3, [r7, #7]
    3460:	4618      	mov	r0, r3
    3462:	4b0d      	ldr	r3, [pc, #52]	; (3498 <usb_d_ep_deinit+0x44>)
    3464:	4798      	blx	r3
    3466:	4603      	mov	r3, r0
    3468:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    346e:	015b      	lsls	r3, r3, #5
    3470:	4a0a      	ldr	r2, [pc, #40]	; (349c <usb_d_ep_deinit+0x48>)
    3472:	4413      	add	r3, r2
    3474:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3476:	f997 300f 	ldrsb.w	r3, [r7, #15]
    347a:	2b00      	cmp	r3, #0
    347c:	db07      	blt.n	348e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    347e:	79fb      	ldrb	r3, [r7, #7]
    3480:	4618      	mov	r0, r3
    3482:	4b07      	ldr	r3, [pc, #28]	; (34a0 <usb_d_ep_deinit+0x4c>)
    3484:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3486:	68bb      	ldr	r3, [r7, #8]
    3488:	22ff      	movs	r2, #255	; 0xff
    348a:	705a      	strb	r2, [r3, #1]
    348c:	e000      	b.n	3490 <usb_d_ep_deinit+0x3c>
		return;
    348e:	bf00      	nop
}
    3490:	3710      	adds	r7, #16
    3492:	46bd      	mov	sp, r7
    3494:	bd80      	pop	{r7, pc}
    3496:	bf00      	nop
    3498:	00002ed1 	.word	0x00002ed1
    349c:	20000ad4 	.word	0x20000ad4
    34a0:	00009fb5 	.word	0x00009fb5

000034a4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    34a4:	b580      	push	{r7, lr}
    34a6:	b086      	sub	sp, #24
    34a8:	af00      	add	r7, sp, #0
    34aa:	4603      	mov	r3, r0
    34ac:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    34ae:	79fb      	ldrb	r3, [r7, #7]
    34b0:	4618      	mov	r0, r3
    34b2:	4b15      	ldr	r3, [pc, #84]	; (3508 <usb_d_ep_enable+0x64>)
    34b4:	4798      	blx	r3
    34b6:	4603      	mov	r3, r0
    34b8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34be:	015b      	lsls	r3, r3, #5
    34c0:	4a12      	ldr	r2, [pc, #72]	; (350c <usb_d_ep_enable+0x68>)
    34c2:	4413      	add	r3, r2
    34c4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    34c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34ca:	2b00      	cmp	r3, #0
    34cc:	da02      	bge.n	34d4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    34ce:	f06f 0311 	mvn.w	r3, #17
    34d2:	e014      	b.n	34fe <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    34d4:	693b      	ldr	r3, [r7, #16]
    34d6:	781b      	ldrb	r3, [r3, #0]
    34d8:	2b00      	cmp	r3, #0
    34da:	d101      	bne.n	34e0 <usb_d_ep_enable+0x3c>
    34dc:	2202      	movs	r2, #2
    34de:	e000      	b.n	34e2 <usb_d_ep_enable+0x3e>
    34e0:	2201      	movs	r2, #1
    34e2:	693b      	ldr	r3, [r7, #16]
    34e4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    34e6:	79fb      	ldrb	r3, [r7, #7]
    34e8:	4618      	mov	r0, r3
    34ea:	4b09      	ldr	r3, [pc, #36]	; (3510 <usb_d_ep_enable+0x6c>)
    34ec:	4798      	blx	r3
    34ee:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    34f0:	68fb      	ldr	r3, [r7, #12]
    34f2:	2b00      	cmp	r3, #0
    34f4:	da02      	bge.n	34fc <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    34f6:	693b      	ldr	r3, [r7, #16]
    34f8:	2200      	movs	r2, #0
    34fa:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    34fc:	68fb      	ldr	r3, [r7, #12]
}
    34fe:	4618      	mov	r0, r3
    3500:	3718      	adds	r7, #24
    3502:	46bd      	mov	sp, r7
    3504:	bd80      	pop	{r7, pc}
    3506:	bf00      	nop
    3508:	00002ed1 	.word	0x00002ed1
    350c:	20000ad4 	.word	0x20000ad4
    3510:	0000a099 	.word	0x0000a099

00003514 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3514:	b590      	push	{r4, r7, lr}
    3516:	b08d      	sub	sp, #52	; 0x34
    3518:	af02      	add	r7, sp, #8
    351a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	7a1b      	ldrb	r3, [r3, #8]
    3520:	4618      	mov	r0, r3
    3522:	4b51      	ldr	r3, [pc, #324]	; (3668 <usb_d_ep_transfer+0x154>)
    3524:	4798      	blx	r3
    3526:	4603      	mov	r3, r0
    3528:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    352a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    352e:	015b      	lsls	r3, r3, #5
    3530:	4a4e      	ldr	r2, [pc, #312]	; (366c <usb_d_ep_transfer+0x158>)
    3532:	4413      	add	r3, r2
    3534:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3536:	687b      	ldr	r3, [r7, #4]
    3538:	7a1b      	ldrb	r3, [r3, #8]
    353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    353e:	2b00      	cmp	r3, #0
    3540:	bf14      	ite	ne
    3542:	2301      	movne	r3, #1
    3544:	2300      	moveq	r3, #0
    3546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	7a5b      	ldrb	r3, [r3, #9]
    354e:	2b00      	cmp	r3, #0
    3550:	bf14      	ite	ne
    3552:	2301      	movne	r3, #1
    3554:	2300      	moveq	r3, #0
    3556:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    355a:	687b      	ldr	r3, [r7, #4]
    355c:	685b      	ldr	r3, [r3, #4]
    355e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3560:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3564:	2b00      	cmp	r3, #0
    3566:	da02      	bge.n	356e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3568:	f06f 0311 	mvn.w	r3, #17
    356c:	e077      	b.n	365e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    356e:	f107 0308 	add.w	r3, r7, #8
    3572:	4618      	mov	r0, r3
    3574:	4b3e      	ldr	r3, [pc, #248]	; (3670 <usb_d_ep_transfer+0x15c>)
    3576:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3578:	69bb      	ldr	r3, [r7, #24]
    357a:	789b      	ldrb	r3, [r3, #2]
    357c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    357e:	7bfb      	ldrb	r3, [r7, #15]
    3580:	b2db      	uxtb	r3, r3
    3582:	2b01      	cmp	r3, #1
    3584:	d10c      	bne.n	35a0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3586:	69bb      	ldr	r3, [r7, #24]
    3588:	2203      	movs	r2, #3
    358a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    358c:	f107 0308 	add.w	r3, r7, #8
    3590:	4618      	mov	r0, r3
    3592:	4b38      	ldr	r3, [pc, #224]	; (3674 <usb_d_ep_transfer+0x160>)
    3594:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3596:	69bb      	ldr	r3, [r7, #24]
    3598:	781b      	ldrb	r3, [r3, #0]
    359a:	2b00      	cmp	r3, #0
    359c:	d151      	bne.n	3642 <usb_d_ep_transfer+0x12e>
    359e:	e017      	b.n	35d0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    35a0:	f107 0308 	add.w	r3, r7, #8
    35a4:	4618      	mov	r0, r3
    35a6:	4b33      	ldr	r3, [pc, #204]	; (3674 <usb_d_ep_transfer+0x160>)
    35a8:	4798      	blx	r3
		switch (state) {
    35aa:	7bfb      	ldrb	r3, [r7, #15]
    35ac:	b2db      	uxtb	r3, r3
    35ae:	2b05      	cmp	r3, #5
    35b0:	d004      	beq.n	35bc <usb_d_ep_transfer+0xa8>
    35b2:	2b06      	cmp	r3, #6
    35b4:	d004      	beq.n	35c0 <usb_d_ep_transfer+0xac>
    35b6:	2b00      	cmp	r3, #0
    35b8:	d005      	beq.n	35c6 <usb_d_ep_transfer+0xb2>
    35ba:	e007      	b.n	35cc <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    35bc:	2302      	movs	r3, #2
    35be:	e04e      	b.n	365e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    35c0:	f06f 030f 	mvn.w	r3, #15
    35c4:	e04b      	b.n	365e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    35c6:	f06f 0312 	mvn.w	r3, #18
    35ca:	e048      	b.n	365e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    35cc:	2301      	movs	r3, #1
    35ce:	e046      	b.n	365e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    35d0:	69bb      	ldr	r3, [r7, #24]
    35d2:	7c9b      	ldrb	r3, [r3, #18]
    35d4:	b29a      	uxth	r2, r3
    35d6:	69bb      	ldr	r3, [r7, #24]
    35d8:	7cdb      	ldrb	r3, [r3, #19]
    35da:	b29b      	uxth	r3, r3
    35dc:	021b      	lsls	r3, r3, #8
    35de:	b29b      	uxth	r3, r3
    35e0:	4413      	add	r3, r2
    35e2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    35e4:	8afb      	ldrh	r3, [r7, #22]
    35e6:	2b00      	cmp	r3, #0
    35e8:	d10b      	bne.n	3602 <usb_d_ep_transfer+0xee>
			dir                 = true;
    35ea:	2301      	movs	r3, #1
    35ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    35f0:	2300      	movs	r3, #0
    35f2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    35f4:	2301      	movs	r3, #1
    35f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    35fa:	69bb      	ldr	r3, [r7, #24]
    35fc:	2204      	movs	r2, #4
    35fe:	709a      	strb	r2, [r3, #2]
    3600:	e01f      	b.n	3642 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3602:	69bb      	ldr	r3, [r7, #24]
    3604:	7b1b      	ldrb	r3, [r3, #12]
    3606:	f003 0380 	and.w	r3, r3, #128	; 0x80
    360a:	2b00      	cmp	r3, #0
    360c:	bf14      	ite	ne
    360e:	2301      	movne	r3, #1
    3610:	2300      	moveq	r3, #0
    3612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3616:	8afa      	ldrh	r2, [r7, #22]
    3618:	6a3b      	ldr	r3, [r7, #32]
    361a:	429a      	cmp	r2, r3
    361c:	d201      	bcs.n	3622 <usb_d_ep_transfer+0x10e>
				len = req_len;
    361e:	8afb      	ldrh	r3, [r7, #22]
    3620:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3626:	2b00      	cmp	r3, #0
    3628:	d008      	beq.n	363c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    362a:	8afa      	ldrh	r2, [r7, #22]
    362c:	6a3b      	ldr	r3, [r7, #32]
    362e:	429a      	cmp	r2, r3
    3630:	bf8c      	ite	hi
    3632:	2301      	movhi	r3, #1
    3634:	2300      	movls	r3, #0
    3636:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    363a:	e002      	b.n	3642 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    363c:	2300      	movs	r3, #0
    363e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3642:	687b      	ldr	r3, [r7, #4]
    3644:	7a18      	ldrb	r0, [r3, #8]
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	681a      	ldr	r2, [r3, #0]
    364a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    364e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3652:	9300      	str	r3, [sp, #0]
    3654:	6a3b      	ldr	r3, [r7, #32]
    3656:	4c08      	ldr	r4, [pc, #32]	; (3678 <usb_d_ep_transfer+0x164>)
    3658:	47a0      	blx	r4
    365a:	6138      	str	r0, [r7, #16]
	return rc;
    365c:	693b      	ldr	r3, [r7, #16]
}
    365e:	4618      	mov	r0, r3
    3660:	372c      	adds	r7, #44	; 0x2c
    3662:	46bd      	mov	sp, r7
    3664:	bd90      	pop	{r4, r7, pc}
    3666:	bf00      	nop
    3668:	00002ed1 	.word	0x00002ed1
    366c:	20000ad4 	.word	0x20000ad4
    3670:	0000b00d 	.word	0x0000b00d
    3674:	0000b033 	.word	0x0000b033
    3678:	00002f51 	.word	0x00002f51

0000367c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    367c:	b580      	push	{r7, lr}
    367e:	b084      	sub	sp, #16
    3680:	af00      	add	r7, sp, #0
    3682:	4603      	mov	r3, r0
    3684:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3686:	79fb      	ldrb	r3, [r7, #7]
    3688:	4618      	mov	r0, r3
    368a:	4b0e      	ldr	r3, [pc, #56]	; (36c4 <usb_d_ep_abort+0x48>)
    368c:	4798      	blx	r3
    368e:	4603      	mov	r3, r0
    3690:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3692:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3696:	015b      	lsls	r3, r3, #5
    3698:	4a0b      	ldr	r2, [pc, #44]	; (36c8 <usb_d_ep_abort+0x4c>)
    369a:	4413      	add	r3, r2
    369c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    369e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    36a2:	2b00      	cmp	r3, #0
    36a4:	db0a      	blt.n	36bc <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    36a6:	79fb      	ldrb	r3, [r7, #7]
    36a8:	4618      	mov	r0, r3
    36aa:	4b08      	ldr	r3, [pc, #32]	; (36cc <usb_d_ep_abort+0x50>)
    36ac:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    36ae:	68bb      	ldr	r3, [r7, #8]
    36b0:	2201      	movs	r2, #1
    36b2:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    36b4:	68bb      	ldr	r3, [r7, #8]
    36b6:	2204      	movs	r2, #4
    36b8:	70da      	strb	r2, [r3, #3]
    36ba:	e000      	b.n	36be <usb_d_ep_abort+0x42>
		return;
    36bc:	bf00      	nop
}
    36be:	3710      	adds	r7, #16
    36c0:	46bd      	mov	sp, r7
    36c2:	bd80      	pop	{r7, pc}
    36c4:	00002ed1 	.word	0x00002ed1
    36c8:	20000ad4 	.word	0x20000ad4
    36cc:	0000a805 	.word	0x0000a805

000036d0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    36d0:	b580      	push	{r7, lr}
    36d2:	b086      	sub	sp, #24
    36d4:	af00      	add	r7, sp, #0
    36d6:	4603      	mov	r3, r0
    36d8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    36da:	79fb      	ldrb	r3, [r7, #7]
    36dc:	4618      	mov	r0, r3
    36de:	4b1a      	ldr	r3, [pc, #104]	; (3748 <_usb_d_ep_halt_clr+0x78>)
    36e0:	4798      	blx	r3
    36e2:	4603      	mov	r3, r0
    36e4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    36e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36ea:	015b      	lsls	r3, r3, #5
    36ec:	4a17      	ldr	r2, [pc, #92]	; (374c <_usb_d_ep_halt_clr+0x7c>)
    36ee:	4413      	add	r3, r2
    36f0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    36f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36f6:	2b00      	cmp	r3, #0
    36f8:	da02      	bge.n	3700 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    36fa:	f06f 0311 	mvn.w	r3, #17
    36fe:	e01f      	b.n	3740 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3700:	79fb      	ldrb	r3, [r7, #7]
    3702:	2102      	movs	r1, #2
    3704:	4618      	mov	r0, r3
    3706:	4b12      	ldr	r3, [pc, #72]	; (3750 <_usb_d_ep_halt_clr+0x80>)
    3708:	4798      	blx	r3
    370a:	4603      	mov	r3, r0
    370c:	2b00      	cmp	r3, #0
    370e:	d016      	beq.n	373e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3710:	79fb      	ldrb	r3, [r7, #7]
    3712:	2100      	movs	r1, #0
    3714:	4618      	mov	r0, r3
    3716:	4b0e      	ldr	r3, [pc, #56]	; (3750 <_usb_d_ep_halt_clr+0x80>)
    3718:	4798      	blx	r3
    371a:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    371c:	68fb      	ldr	r3, [r7, #12]
    371e:	2b00      	cmp	r3, #0
    3720:	da01      	bge.n	3726 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3722:	68fb      	ldr	r3, [r7, #12]
    3724:	e00c      	b.n	3740 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3726:	693b      	ldr	r3, [r7, #16]
    3728:	2201      	movs	r2, #1
    372a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    372c:	693b      	ldr	r3, [r7, #16]
    372e:	2203      	movs	r2, #3
    3730:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3732:	693b      	ldr	r3, [r7, #16]
    3734:	69db      	ldr	r3, [r3, #28]
    3736:	79f8      	ldrb	r0, [r7, #7]
    3738:	2200      	movs	r2, #0
    373a:	2103      	movs	r1, #3
    373c:	4798      	blx	r3
	}
	return ERR_NONE;
    373e:	2300      	movs	r3, #0
}
    3740:	4618      	mov	r0, r3
    3742:	3718      	adds	r7, #24
    3744:	46bd      	mov	sp, r7
    3746:	bd80      	pop	{r7, pc}
    3748:	00002ed1 	.word	0x00002ed1
    374c:	20000ad4 	.word	0x20000ad4
    3750:	0000a411 	.word	0x0000a411

00003754 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3754:	b580      	push	{r7, lr}
    3756:	b082      	sub	sp, #8
    3758:	af00      	add	r7, sp, #0
    375a:	4603      	mov	r3, r0
    375c:	460a      	mov	r2, r1
    375e:	71fb      	strb	r3, [r7, #7]
    3760:	4613      	mov	r3, r2
    3762:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3764:	79bb      	ldrb	r3, [r7, #6]
    3766:	2b00      	cmp	r3, #0
    3768:	d105      	bne.n	3776 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    376a:	79fb      	ldrb	r3, [r7, #7]
    376c:	4618      	mov	r0, r3
    376e:	4b0c      	ldr	r3, [pc, #48]	; (37a0 <usb_d_ep_halt+0x4c>)
    3770:	4798      	blx	r3
    3772:	4603      	mov	r3, r0
    3774:	e00f      	b.n	3796 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3776:	79bb      	ldrb	r3, [r7, #6]
    3778:	2b01      	cmp	r3, #1
    377a:	d106      	bne.n	378a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    377c:	79fb      	ldrb	r3, [r7, #7]
    377e:	2101      	movs	r1, #1
    3780:	4618      	mov	r0, r3
    3782:	4b08      	ldr	r3, [pc, #32]	; (37a4 <usb_d_ep_halt+0x50>)
    3784:	4798      	blx	r3
    3786:	4603      	mov	r3, r0
    3788:	e005      	b.n	3796 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    378a:	79fb      	ldrb	r3, [r7, #7]
    378c:	2102      	movs	r1, #2
    378e:	4618      	mov	r0, r3
    3790:	4b04      	ldr	r3, [pc, #16]	; (37a4 <usb_d_ep_halt+0x50>)
    3792:	4798      	blx	r3
    3794:	4603      	mov	r3, r0
	}
}
    3796:	4618      	mov	r0, r3
    3798:	3708      	adds	r7, #8
    379a:	46bd      	mov	sp, r7
    379c:	bd80      	pop	{r7, pc}
    379e:	bf00      	nop
    37a0:	000036d1 	.word	0x000036d1
    37a4:	0000a411 	.word	0x0000a411

000037a8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	b086      	sub	sp, #24
    37ac:	af00      	add	r7, sp, #0
    37ae:	4603      	mov	r3, r0
    37b0:	603a      	str	r2, [r7, #0]
    37b2:	71fb      	strb	r3, [r7, #7]
    37b4:	460b      	mov	r3, r1
    37b6:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37b8:	79fb      	ldrb	r3, [r7, #7]
    37ba:	4618      	mov	r0, r3
    37bc:	4b16      	ldr	r3, [pc, #88]	; (3818 <usb_d_ep_register_callback+0x70>)
    37be:	4798      	blx	r3
    37c0:	4603      	mov	r3, r0
    37c2:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37c8:	015b      	lsls	r3, r3, #5
    37ca:	4a14      	ldr	r2, [pc, #80]	; (381c <usb_d_ep_register_callback+0x74>)
    37cc:	4413      	add	r3, r2
    37ce:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    37d0:	683b      	ldr	r3, [r7, #0]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d001      	beq.n	37da <usb_d_ep_register_callback+0x32>
    37d6:	683b      	ldr	r3, [r7, #0]
    37d8:	e000      	b.n	37dc <usb_d_ep_register_callback+0x34>
    37da:	4b11      	ldr	r3, [pc, #68]	; (3820 <usb_d_ep_register_callback+0x78>)
    37dc:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    37de:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37e2:	2b00      	cmp	r3, #0
    37e4:	db13      	blt.n	380e <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    37e6:	79bb      	ldrb	r3, [r7, #6]
    37e8:	2b01      	cmp	r3, #1
    37ea:	d008      	beq.n	37fe <usb_d_ep_register_callback+0x56>
    37ec:	2b02      	cmp	r3, #2
    37ee:	d00a      	beq.n	3806 <usb_d_ep_register_callback+0x5e>
    37f0:	2b00      	cmp	r3, #0
    37f2:	d000      	beq.n	37f6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    37f4:	e00c      	b.n	3810 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    37f6:	693b      	ldr	r3, [r7, #16]
    37f8:	68fa      	ldr	r2, [r7, #12]
    37fa:	615a      	str	r2, [r3, #20]
		break;
    37fc:	e008      	b.n	3810 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    37fe:	693b      	ldr	r3, [r7, #16]
    3800:	68fa      	ldr	r2, [r7, #12]
    3802:	619a      	str	r2, [r3, #24]
		break;
    3804:	e004      	b.n	3810 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3806:	693b      	ldr	r3, [r7, #16]
    3808:	68fa      	ldr	r2, [r7, #12]
    380a:	61da      	str	r2, [r3, #28]
		break;
    380c:	e000      	b.n	3810 <usb_d_ep_register_callback+0x68>
		return;
    380e:	bf00      	nop
	}
}
    3810:	3718      	adds	r7, #24
    3812:	46bd      	mov	sp, r7
    3814:	bd80      	pop	{r7, pc}
    3816:	bf00      	nop
    3818:	00002ed1 	.word	0x00002ed1
    381c:	20000ad4 	.word	0x20000ad4
    3820:	00002fa5 	.word	0x00002fa5

00003824 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3824:	b480      	push	{r7}
    3826:	b085      	sub	sp, #20
    3828:	af00      	add	r7, sp, #0
    382a:	4603      	mov	r3, r0
    382c:	60b9      	str	r1, [r7, #8]
    382e:	607a      	str	r2, [r7, #4]
    3830:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3832:	7bfb      	ldrb	r3, [r7, #15]
    3834:	f083 0301 	eor.w	r3, r3, #1
    3838:	b2db      	uxtb	r3, r3
    383a:	2b00      	cmp	r3, #0
    383c:	d000      	beq.n	3840 <assert+0x1c>
		__asm("BKPT #0");
    383e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3840:	bf00      	nop
    3842:	3714      	adds	r7, #20
    3844:	46bd      	mov	sp, r7
    3846:	f85d 7b04 	ldr.w	r7, [sp], #4
    384a:	4770      	bx	lr

0000384c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    384c:	b480      	push	{r7}
    384e:	b085      	sub	sp, #20
    3850:	af00      	add	r7, sp, #0
    3852:	6078      	str	r0, [r7, #4]
    3854:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3856:	687b      	ldr	r3, [r7, #4]
    3858:	681b      	ldr	r3, [r3, #0]
    385a:	60fb      	str	r3, [r7, #12]
    385c:	e008      	b.n	3870 <is_list_element+0x24>
		if (it == element) {
    385e:	68fa      	ldr	r2, [r7, #12]
    3860:	683b      	ldr	r3, [r7, #0]
    3862:	429a      	cmp	r2, r3
    3864:	d101      	bne.n	386a <is_list_element+0x1e>
			return true;
    3866:	2301      	movs	r3, #1
    3868:	e006      	b.n	3878 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    386a:	68fb      	ldr	r3, [r7, #12]
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	60fb      	str	r3, [r7, #12]
    3870:	68fb      	ldr	r3, [r7, #12]
    3872:	2b00      	cmp	r3, #0
    3874:	d1f3      	bne.n	385e <is_list_element+0x12>
		}
	}

	return false;
    3876:	2300      	movs	r3, #0
}
    3878:	4618      	mov	r0, r3
    387a:	3714      	adds	r7, #20
    387c:	46bd      	mov	sp, r7
    387e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3882:	4770      	bx	lr

00003884 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3884:	b580      	push	{r7, lr}
    3886:	b082      	sub	sp, #8
    3888:	af00      	add	r7, sp, #0
    388a:	6078      	str	r0, [r7, #4]
    388c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    388e:	6839      	ldr	r1, [r7, #0]
    3890:	6878      	ldr	r0, [r7, #4]
    3892:	4b0f      	ldr	r3, [pc, #60]	; (38d0 <list_insert_as_head+0x4c>)
    3894:	4798      	blx	r3
    3896:	4603      	mov	r3, r0
    3898:	2b00      	cmp	r3, #0
    389a:	bf14      	ite	ne
    389c:	2301      	movne	r3, #1
    389e:	2300      	moveq	r3, #0
    38a0:	b2db      	uxtb	r3, r3
    38a2:	f083 0301 	eor.w	r3, r3, #1
    38a6:	b2db      	uxtb	r3, r3
    38a8:	f003 0301 	and.w	r3, r3, #1
    38ac:	b2db      	uxtb	r3, r3
    38ae:	2239      	movs	r2, #57	; 0x39
    38b0:	4908      	ldr	r1, [pc, #32]	; (38d4 <list_insert_as_head+0x50>)
    38b2:	4618      	mov	r0, r3
    38b4:	4b08      	ldr	r3, [pc, #32]	; (38d8 <list_insert_as_head+0x54>)
    38b6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	681a      	ldr	r2, [r3, #0]
    38bc:	683b      	ldr	r3, [r7, #0]
    38be:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	683a      	ldr	r2, [r7, #0]
    38c4:	601a      	str	r2, [r3, #0]
}
    38c6:	bf00      	nop
    38c8:	3708      	adds	r7, #8
    38ca:	46bd      	mov	sp, r7
    38cc:	bd80      	pop	{r7, pc}
    38ce:	bf00      	nop
    38d0:	0000384d 	.word	0x0000384d
    38d4:	00010808 	.word	0x00010808
    38d8:	00003825 	.word	0x00003825

000038dc <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    38dc:	b480      	push	{r7}
    38de:	b083      	sub	sp, #12
    38e0:	af00      	add	r7, sp, #0
    38e2:	6078      	str	r0, [r7, #4]
    38e4:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	681a      	ldr	r2, [r3, #0]
    38ea:	683b      	ldr	r3, [r7, #0]
    38ec:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	683a      	ldr	r2, [r7, #0]
    38f2:	601a      	str	r2, [r3, #0]
}
    38f4:	bf00      	nop
    38f6:	370c      	adds	r7, #12
    38f8:	46bd      	mov	sp, r7
    38fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    38fe:	4770      	bx	lr

00003900 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3900:	b580      	push	{r7, lr}
    3902:	b084      	sub	sp, #16
    3904:	af00      	add	r7, sp, #0
    3906:	6078      	str	r0, [r7, #4]
    3908:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    390a:	687b      	ldr	r3, [r7, #4]
    390c:	681b      	ldr	r3, [r3, #0]
    390e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3910:	6839      	ldr	r1, [r7, #0]
    3912:	6878      	ldr	r0, [r7, #4]
    3914:	4b16      	ldr	r3, [pc, #88]	; (3970 <list_insert_at_end+0x70>)
    3916:	4798      	blx	r3
    3918:	4603      	mov	r3, r0
    391a:	2b00      	cmp	r3, #0
    391c:	bf14      	ite	ne
    391e:	2301      	movne	r3, #1
    3920:	2300      	moveq	r3, #0
    3922:	b2db      	uxtb	r3, r3
    3924:	f083 0301 	eor.w	r3, r3, #1
    3928:	b2db      	uxtb	r3, r3
    392a:	f003 0301 	and.w	r3, r3, #1
    392e:	b2db      	uxtb	r3, r3
    3930:	224f      	movs	r2, #79	; 0x4f
    3932:	4910      	ldr	r1, [pc, #64]	; (3974 <list_insert_at_end+0x74>)
    3934:	4618      	mov	r0, r3
    3936:	4b10      	ldr	r3, [pc, #64]	; (3978 <list_insert_at_end+0x78>)
    3938:	4798      	blx	r3

	if (!list->head) {
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	681b      	ldr	r3, [r3, #0]
    393e:	2b00      	cmp	r3, #0
    3940:	d109      	bne.n	3956 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3942:	687b      	ldr	r3, [r7, #4]
    3944:	683a      	ldr	r2, [r7, #0]
    3946:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3948:	683b      	ldr	r3, [r7, #0]
    394a:	2200      	movs	r2, #0
    394c:	601a      	str	r2, [r3, #0]
		return;
    394e:	e00c      	b.n	396a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3950:	68fb      	ldr	r3, [r7, #12]
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3956:	68fb      	ldr	r3, [r7, #12]
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	2b00      	cmp	r3, #0
    395c:	d1f8      	bne.n	3950 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	683a      	ldr	r2, [r7, #0]
    3962:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3964:	683b      	ldr	r3, [r7, #0]
    3966:	2200      	movs	r2, #0
    3968:	601a      	str	r2, [r3, #0]
}
    396a:	3710      	adds	r7, #16
    396c:	46bd      	mov	sp, r7
    396e:	bd80      	pop	{r7, pc}
    3970:	0000384d 	.word	0x0000384d
    3974:	00010808 	.word	0x00010808
    3978:	00003825 	.word	0x00003825

0000397c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    397c:	b480      	push	{r7}
    397e:	b085      	sub	sp, #20
    3980:	af00      	add	r7, sp, #0
    3982:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3984:	687b      	ldr	r3, [r7, #4]
    3986:	681b      	ldr	r3, [r3, #0]
    3988:	2b00      	cmp	r3, #0
    398a:	d009      	beq.n	39a0 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    398c:	687b      	ldr	r3, [r7, #4]
    398e:	681b      	ldr	r3, [r3, #0]
    3990:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	681b      	ldr	r3, [r3, #0]
    3996:	681a      	ldr	r2, [r3, #0]
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    399c:	68fb      	ldr	r3, [r7, #12]
    399e:	e000      	b.n	39a2 <list_remove_head+0x26>
	}

	return NULL;
    39a0:	2300      	movs	r3, #0
}
    39a2:	4618      	mov	r0, r3
    39a4:	3714      	adds	r7, #20
    39a6:	46bd      	mov	sp, r7
    39a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ac:	4770      	bx	lr

000039ae <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    39ae:	b480      	push	{r7}
    39b0:	b085      	sub	sp, #20
    39b2:	af00      	add	r7, sp, #0
    39b4:	6078      	str	r0, [r7, #4]
    39b6:	6039      	str	r1, [r7, #0]
	if (!element) {
    39b8:	683b      	ldr	r3, [r7, #0]
    39ba:	2b00      	cmp	r3, #0
    39bc:	d101      	bne.n	39c2 <list_delete_element+0x14>
		return false;
    39be:	2300      	movs	r3, #0
    39c0:	e024      	b.n	3a0c <list_delete_element+0x5e>
	}

	if (list->head == element) {
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	681a      	ldr	r2, [r3, #0]
    39c6:	683b      	ldr	r3, [r7, #0]
    39c8:	429a      	cmp	r2, r3
    39ca:	d106      	bne.n	39da <list_delete_element+0x2c>
		list->head = list->head->next;
    39cc:	687b      	ldr	r3, [r7, #4]
    39ce:	681b      	ldr	r3, [r3, #0]
    39d0:	681a      	ldr	r2, [r3, #0]
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	601a      	str	r2, [r3, #0]
		return true;
    39d6:	2301      	movs	r3, #1
    39d8:	e018      	b.n	3a0c <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    39da:	687b      	ldr	r3, [r7, #4]
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    39e0:	e002      	b.n	39e8 <list_delete_element+0x3a>
			it = it->next;
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	681b      	ldr	r3, [r3, #0]
    39e6:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    39e8:	68fb      	ldr	r3, [r7, #12]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d004      	beq.n	39f8 <list_delete_element+0x4a>
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	681a      	ldr	r2, [r3, #0]
    39f2:	683b      	ldr	r3, [r7, #0]
    39f4:	429a      	cmp	r2, r3
    39f6:	d1f4      	bne.n	39e2 <list_delete_element+0x34>
		}
		if (it) {
    39f8:	68fb      	ldr	r3, [r7, #12]
    39fa:	2b00      	cmp	r3, #0
    39fc:	d005      	beq.n	3a0a <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    39fe:	683b      	ldr	r3, [r7, #0]
    3a00:	681a      	ldr	r2, [r3, #0]
    3a02:	68fb      	ldr	r3, [r7, #12]
    3a04:	601a      	str	r2, [r3, #0]
			return true;
    3a06:	2301      	movs	r3, #1
    3a08:	e000      	b.n	3a0c <list_delete_element+0x5e>
		}
	}

	return false;
    3a0a:	2300      	movs	r3, #0
}
    3a0c:	4618      	mov	r0, r3
    3a0e:	3714      	adds	r7, #20
    3a10:	46bd      	mov	sp, r7
    3a12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a16:	4770      	bx	lr

00003a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3a18:	b480      	push	{r7}
    3a1a:	b083      	sub	sp, #12
    3a1c:	af00      	add	r7, sp, #0
    3a1e:	4603      	mov	r3, r0
    3a20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a26:	2b00      	cmp	r3, #0
    3a28:	db0b      	blt.n	3a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a2a:	4909      	ldr	r1, [pc, #36]	; (3a50 <__NVIC_EnableIRQ+0x38>)
    3a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a30:	095b      	lsrs	r3, r3, #5
    3a32:	88fa      	ldrh	r2, [r7, #6]
    3a34:	f002 021f 	and.w	r2, r2, #31
    3a38:	2001      	movs	r0, #1
    3a3a:	fa00 f202 	lsl.w	r2, r0, r2
    3a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3a42:	bf00      	nop
    3a44:	370c      	adds	r7, #12
    3a46:	46bd      	mov	sp, r7
    3a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop
    3a50:	e000e100 	.word	0xe000e100

00003a54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3a54:	b480      	push	{r7}
    3a56:	b083      	sub	sp, #12
    3a58:	af00      	add	r7, sp, #0
    3a5a:	4603      	mov	r3, r0
    3a5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a62:	2b00      	cmp	r3, #0
    3a64:	db10      	blt.n	3a88 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a66:	490b      	ldr	r1, [pc, #44]	; (3a94 <__NVIC_DisableIRQ+0x40>)
    3a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3a6c:	095b      	lsrs	r3, r3, #5
    3a6e:	88fa      	ldrh	r2, [r7, #6]
    3a70:	f002 021f 	and.w	r2, r2, #31
    3a74:	2001      	movs	r0, #1
    3a76:	fa00 f202 	lsl.w	r2, r0, r2
    3a7a:	3320      	adds	r3, #32
    3a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3a80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a84:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3a88:	bf00      	nop
    3a8a:	370c      	adds	r7, #12
    3a8c:	46bd      	mov	sp, r7
    3a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a92:	4770      	bx	lr
    3a94:	e000e100 	.word	0xe000e100

00003a98 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3a98:	b480      	push	{r7}
    3a9a:	b083      	sub	sp, #12
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	4603      	mov	r3, r0
    3aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	db0c      	blt.n	3ac4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3aaa:	4909      	ldr	r1, [pc, #36]	; (3ad0 <__NVIC_ClearPendingIRQ+0x38>)
    3aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ab0:	095b      	lsrs	r3, r3, #5
    3ab2:	88fa      	ldrh	r2, [r7, #6]
    3ab4:	f002 021f 	and.w	r2, r2, #31
    3ab8:	2001      	movs	r0, #1
    3aba:	fa00 f202 	lsl.w	r2, r0, r2
    3abe:	3360      	adds	r3, #96	; 0x60
    3ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3ac4:	bf00      	nop
    3ac6:	370c      	adds	r7, #12
    3ac8:	46bd      	mov	sp, r7
    3aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ace:	4770      	bx	lr
    3ad0:	e000e100 	.word	0xe000e100

00003ad4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3ad4:	b480      	push	{r7}
    3ad6:	b083      	sub	sp, #12
    3ad8:	af00      	add	r7, sp, #0
    3ada:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3adc:	687b      	ldr	r3, [r7, #4]
    3ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3ae0:	095b      	lsrs	r3, r3, #5
    3ae2:	f003 0301 	and.w	r3, r3, #1
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	bf14      	ite	ne
    3aea:	2301      	movne	r3, #1
    3aec:	2300      	moveq	r3, #0
    3aee:	b2db      	uxtb	r3, r3
}
    3af0:	4618      	mov	r0, r3
    3af2:	370c      	adds	r7, #12
    3af4:	46bd      	mov	sp, r7
    3af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3afa:	4770      	bx	lr

00003afc <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3afc:	b480      	push	{r7}
    3afe:	b083      	sub	sp, #12
    3b00:	af00      	add	r7, sp, #0
    3b02:	6078      	str	r0, [r7, #4]
    3b04:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	683a      	ldr	r2, [r7, #0]
    3b0a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b0c:	bf00      	nop
    3b0e:	370c      	adds	r7, #12
    3b10:	46bd      	mov	sp, r7
    3b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b16:	4770      	bx	lr

00003b18 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3b18:	b480      	push	{r7}
    3b1a:	b083      	sub	sp, #12
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	6078      	str	r0, [r7, #4]
    3b20:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3b22:	687b      	ldr	r3, [r7, #4]
    3b24:	683a      	ldr	r2, [r7, #0]
    3b26:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b28:	bf00      	nop
    3b2a:	370c      	adds	r7, #12
    3b2c:	46bd      	mov	sp, r7
    3b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b32:	4770      	bx	lr

00003b34 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3b34:	b480      	push	{r7}
    3b36:	b083      	sub	sp, #12
    3b38:	af00      	add	r7, sp, #0
    3b3a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	699b      	ldr	r3, [r3, #24]
    3b40:	f043 0201 	orr.w	r2, r3, #1
    3b44:	687b      	ldr	r3, [r7, #4]
    3b46:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b48:	bf00      	nop
    3b4a:	370c      	adds	r7, #12
    3b4c:	46bd      	mov	sp, r7
    3b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b52:	4770      	bx	lr

00003b54 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3b54:	b480      	push	{r7}
    3b56:	b085      	sub	sp, #20
    3b58:	af00      	add	r7, sp, #0
    3b5a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3b5c:	687b      	ldr	r3, [r7, #4]
    3b5e:	699b      	ldr	r3, [r3, #24]
    3b60:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3b62:	68fb      	ldr	r3, [r7, #12]
    3b64:	f003 0301 	and.w	r3, r3, #1
    3b68:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3b6a:	68fb      	ldr	r3, [r7, #12]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	bf14      	ite	ne
    3b70:	2301      	movne	r3, #1
    3b72:	2300      	moveq	r3, #0
    3b74:	b2db      	uxtb	r3, r3
}
    3b76:	4618      	mov	r0, r3
    3b78:	3714      	adds	r7, #20
    3b7a:	46bd      	mov	sp, r7
    3b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b80:	4770      	bx	lr

00003b82 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3b82:	b480      	push	{r7}
    3b84:	b083      	sub	sp, #12
    3b86:	af00      	add	r7, sp, #0
    3b88:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	699b      	ldr	r3, [r3, #24]
    3b8e:	f023 0201 	bic.w	r2, r3, #1
    3b92:	687b      	ldr	r3, [r7, #4]
    3b94:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b96:	bf00      	nop
    3b98:	370c      	adds	r7, #12
    3b9a:	46bd      	mov	sp, r7
    3b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ba0:	4770      	bx	lr

00003ba2 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3ba2:	b480      	push	{r7}
    3ba4:	b083      	sub	sp, #12
    3ba6:	af00      	add	r7, sp, #0
    3ba8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	699b      	ldr	r3, [r3, #24]
    3bae:	f043 0202 	orr.w	r2, r3, #2
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bb6:	bf00      	nop
    3bb8:	370c      	adds	r7, #12
    3bba:	46bd      	mov	sp, r7
    3bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bc0:	4770      	bx	lr

00003bc2 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3bc2:	b480      	push	{r7}
    3bc4:	b083      	sub	sp, #12
    3bc6:	af00      	add	r7, sp, #0
    3bc8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3bca:	687b      	ldr	r3, [r7, #4]
    3bcc:	699b      	ldr	r3, [r3, #24]
    3bce:	f023 0202 	bic.w	r2, r3, #2
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bd6:	bf00      	nop
    3bd8:	370c      	adds	r7, #12
    3bda:	46bd      	mov	sp, r7
    3bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be0:	4770      	bx	lr

00003be2 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3be2:	b480      	push	{r7}
    3be4:	b083      	sub	sp, #12
    3be6:	af00      	add	r7, sp, #0
    3be8:	6078      	str	r0, [r7, #4]
    3bea:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	699a      	ldr	r2, [r3, #24]
    3bf0:	683b      	ldr	r3, [r7, #0]
    3bf2:	431a      	orrs	r2, r3
    3bf4:	687b      	ldr	r3, [r7, #4]
    3bf6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bf8:	bf00      	nop
    3bfa:	370c      	adds	r7, #12
    3bfc:	46bd      	mov	sp, r7
    3bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c02:	4770      	bx	lr

00003c04 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3c04:	b480      	push	{r7}
    3c06:	b083      	sub	sp, #12
    3c08:	af00      	add	r7, sp, #0
    3c0a:	6078      	str	r0, [r7, #4]
    3c0c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	683a      	ldr	r2, [r7, #0]
    3c12:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c14:	bf00      	nop
    3c16:	370c      	adds	r7, #12
    3c18:	46bd      	mov	sp, r7
    3c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c1e:	4770      	bx	lr

00003c20 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3c20:	b480      	push	{r7}
    3c22:	b083      	sub	sp, #12
    3c24:	af00      	add	r7, sp, #0
    3c26:	6078      	str	r0, [r7, #4]
    3c28:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3c2a:	687b      	ldr	r3, [r7, #4]
    3c2c:	683a      	ldr	r2, [r7, #0]
    3c2e:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c30:	bf00      	nop
    3c32:	370c      	adds	r7, #12
    3c34:	46bd      	mov	sp, r7
    3c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c3a:	4770      	bx	lr

00003c3c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3c3c:	b480      	push	{r7}
    3c3e:	b083      	sub	sp, #12
    3c40:	af00      	add	r7, sp, #0
    3c42:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3c48:	4618      	mov	r0, r3
    3c4a:	370c      	adds	r7, #12
    3c4c:	46bd      	mov	sp, r7
    3c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c52:	4770      	bx	lr

00003c54 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3c54:	b480      	push	{r7}
    3c56:	b083      	sub	sp, #12
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
    3c5c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	683a      	ldr	r2, [r7, #0]
    3c62:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c64:	bf00      	nop
    3c66:	370c      	adds	r7, #12
    3c68:	46bd      	mov	sp, r7
    3c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c6e:	4770      	bx	lr

00003c70 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3c70:	b480      	push	{r7}
    3c72:	b083      	sub	sp, #12
    3c74:	af00      	add	r7, sp, #0
    3c76:	6078      	str	r0, [r7, #4]
    3c78:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	683a      	ldr	r2, [r7, #0]
    3c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c82:	bf00      	nop
    3c84:	370c      	adds	r7, #12
    3c86:	46bd      	mov	sp, r7
    3c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c8c:	4770      	bx	lr

00003c8e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3c8e:	b480      	push	{r7}
    3c90:	b083      	sub	sp, #12
    3c92:	af00      	add	r7, sp, #0
    3c94:	6078      	str	r0, [r7, #4]
    3c96:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	683a      	ldr	r2, [r7, #0]
    3c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ca0:	bf00      	nop
    3ca2:	370c      	adds	r7, #12
    3ca4:	46bd      	mov	sp, r7
    3ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3caa:	4770      	bx	lr

00003cac <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3cac:	b480      	push	{r7}
    3cae:	b083      	sub	sp, #12
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	6078      	str	r0, [r7, #4]
    3cb4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	683a      	ldr	r2, [r7, #0]
    3cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cbe:	bf00      	nop
    3cc0:	370c      	adds	r7, #12
    3cc2:	46bd      	mov	sp, r7
    3cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cc8:	4770      	bx	lr

00003cca <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3cca:	b480      	push	{r7}
    3ccc:	b083      	sub	sp, #12
    3cce:	af00      	add	r7, sp, #0
    3cd0:	6078      	str	r0, [r7, #4]
    3cd2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	683a      	ldr	r2, [r7, #0]
    3cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cdc:	bf00      	nop
    3cde:	370c      	adds	r7, #12
    3ce0:	46bd      	mov	sp, r7
    3ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce6:	4770      	bx	lr

00003ce8 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3ce8:	b480      	push	{r7}
    3cea:	b083      	sub	sp, #12
    3cec:	af00      	add	r7, sp, #0
    3cee:	6078      	str	r0, [r7, #4]
    3cf0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	683a      	ldr	r2, [r7, #0]
    3cf6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cfa:	bf00      	nop
    3cfc:	370c      	adds	r7, #12
    3cfe:	46bd      	mov	sp, r7
    3d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d04:	4770      	bx	lr

00003d06 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3d06:	b480      	push	{r7}
    3d08:	b083      	sub	sp, #12
    3d0a:	af00      	add	r7, sp, #0
    3d0c:	6078      	str	r0, [r7, #4]
    3d0e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3d10:	687b      	ldr	r3, [r7, #4]
    3d12:	683a      	ldr	r2, [r7, #0]
    3d14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d18:	bf00      	nop
    3d1a:	370c      	adds	r7, #12
    3d1c:	46bd      	mov	sp, r7
    3d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d22:	4770      	bx	lr

00003d24 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3d24:	b480      	push	{r7}
    3d26:	b083      	sub	sp, #12
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    3d2c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	683a      	ldr	r2, [r7, #0]
    3d32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d36:	bf00      	nop
    3d38:	370c      	adds	r7, #12
    3d3a:	46bd      	mov	sp, r7
    3d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d40:	4770      	bx	lr

00003d42 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3d42:	b480      	push	{r7}
    3d44:	b083      	sub	sp, #12
    3d46:	af00      	add	r7, sp, #0
    3d48:	6078      	str	r0, [r7, #4]
    3d4a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	683a      	ldr	r2, [r7, #0]
    3d50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d54:	bf00      	nop
    3d56:	370c      	adds	r7, #12
    3d58:	46bd      	mov	sp, r7
    3d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5e:	4770      	bx	lr

00003d60 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    3d68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3d6a:	687b      	ldr	r3, [r7, #4]
    3d6c:	683a      	ldr	r2, [r7, #0]
    3d6e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d72:	bf00      	nop
    3d74:	370c      	adds	r7, #12
    3d76:	46bd      	mov	sp, r7
    3d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d7c:	4770      	bx	lr
	...

00003d80 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3d80:	b580      	push	{r7, lr}
    3d82:	b082      	sub	sp, #8
    3d84:	af00      	add	r7, sp, #0
    3d86:	6078      	str	r0, [r7, #4]
    3d88:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3d8a:	687b      	ldr	r3, [r7, #4]
    3d8c:	683a      	ldr	r2, [r7, #0]
    3d8e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	681b      	ldr	r3, [r3, #0]
    3d94:	4618      	mov	r0, r3
    3d96:	4b56      	ldr	r3, [pc, #344]	; (3ef0 <_can_async_init+0x170>)
    3d98:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3d9a:	bf00      	nop
    3d9c:	687b      	ldr	r3, [r7, #4]
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	4618      	mov	r0, r3
    3da2:	4b54      	ldr	r3, [pc, #336]	; (3ef4 <_can_async_init+0x174>)
    3da4:	4798      	blx	r3
    3da6:	4603      	mov	r3, r0
    3da8:	f083 0301 	eor.w	r3, r3, #1
    3dac:	b2db      	uxtb	r3, r3
    3dae:	2b00      	cmp	r3, #0
    3db0:	d1f4      	bne.n	3d9c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3db2:	687b      	ldr	r3, [r7, #4]
    3db4:	681b      	ldr	r3, [r3, #0]
    3db6:	4618      	mov	r0, r3
    3db8:	4b4f      	ldr	r3, [pc, #316]	; (3ef8 <_can_async_init+0x178>)
    3dba:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3dbc:	683b      	ldr	r3, [r7, #0]
    3dbe:	4a4f      	ldr	r2, [pc, #316]	; (3efc <_can_async_init+0x17c>)
    3dc0:	4293      	cmp	r3, r2
    3dc2:	d17c      	bne.n	3ebe <_can_async_init+0x13e>
		_can1_dev    = dev;
    3dc4:	4a4e      	ldr	r2, [pc, #312]	; (3f00 <_can_async_init+0x180>)
    3dc6:	687b      	ldr	r3, [r7, #4]
    3dc8:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	4a4d      	ldr	r2, [pc, #308]	; (3f04 <_can_async_init+0x184>)
    3dce:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
    3dd8:	4618      	mov	r0, r3
    3dda:	4b4b      	ldr	r3, [pc, #300]	; (3f08 <_can_async_init+0x188>)
    3ddc:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	2102      	movs	r1, #2
    3de4:	4618      	mov	r0, r3
    3de6:	4b49      	ldr	r3, [pc, #292]	; (3f0c <_can_async_init+0x18c>)
    3de8:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	681b      	ldr	r3, [r3, #0]
    3dee:	f640 2103 	movw	r1, #2563	; 0xa03
    3df2:	4618      	mov	r0, r3
    3df4:	4b46      	ldr	r3, [pc, #280]	; (3f10 <_can_async_init+0x190>)
    3df6:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	681b      	ldr	r3, [r3, #0]
    3dfc:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3e00:	4618      	mov	r0, r3
    3e02:	4b44      	ldr	r3, [pc, #272]	; (3f14 <_can_async_init+0x194>)
    3e04:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	681a      	ldr	r2, [r3, #0]
    3e0a:	4b43      	ldr	r3, [pc, #268]	; (3f18 <_can_async_init+0x198>)
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3e16:	4619      	mov	r1, r3
    3e18:	4610      	mov	r0, r2
    3e1a:	4b40      	ldr	r3, [pc, #256]	; (3f1c <_can_async_init+0x19c>)
    3e1c:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	2107      	movs	r1, #7
    3e24:	4618      	mov	r0, r3
    3e26:	4b3e      	ldr	r3, [pc, #248]	; (3f20 <_can_async_init+0x1a0>)
    3e28:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	681b      	ldr	r3, [r3, #0]
    3e2e:	2107      	movs	r1, #7
    3e30:	4618      	mov	r0, r3
    3e32:	4b3c      	ldr	r3, [pc, #240]	; (3f24 <_can_async_init+0x1a4>)
    3e34:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	681a      	ldr	r2, [r3, #0]
    3e3a:	4b3b      	ldr	r3, [pc, #236]	; (3f28 <_can_async_init+0x1a8>)
    3e3c:	b29b      	uxth	r3, r3
    3e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3e42:	4619      	mov	r1, r3
    3e44:	4610      	mov	r0, r2
    3e46:	4b39      	ldr	r3, [pc, #228]	; (3f2c <_can_async_init+0x1ac>)
    3e48:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3e4a:	687b      	ldr	r3, [r7, #4]
    3e4c:	681a      	ldr	r2, [r3, #0]
    3e4e:	4b38      	ldr	r3, [pc, #224]	; (3f30 <_can_async_init+0x1b0>)
    3e50:	b29b      	uxth	r3, r3
    3e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3e56:	4619      	mov	r1, r3
    3e58:	4610      	mov	r0, r2
    3e5a:	4b36      	ldr	r3, [pc, #216]	; (3f34 <_can_async_init+0x1b4>)
    3e5c:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	681b      	ldr	r3, [r3, #0]
    3e62:	2108      	movs	r1, #8
    3e64:	4618      	mov	r0, r3
    3e66:	4b34      	ldr	r3, [pc, #208]	; (3f38 <_can_async_init+0x1b8>)
    3e68:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	681a      	ldr	r2, [r3, #0]
    3e6e:	4b33      	ldr	r3, [pc, #204]	; (3f3c <_can_async_init+0x1bc>)
    3e70:	b29b      	uxth	r3, r3
    3e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3e76:	4619      	mov	r1, r3
    3e78:	4610      	mov	r0, r2
    3e7a:	4b31      	ldr	r3, [pc, #196]	; (3f40 <_can_async_init+0x1c0>)
    3e7c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3e7e:	687b      	ldr	r3, [r7, #4]
    3e80:	681a      	ldr	r2, [r3, #0]
    3e82:	4b30      	ldr	r3, [pc, #192]	; (3f44 <_can_async_init+0x1c4>)
    3e84:	b29b      	uxth	r3, r3
    3e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3e8a:	4619      	mov	r1, r3
    3e8c:	4610      	mov	r0, r2
    3e8e:	4b2e      	ldr	r3, [pc, #184]	; (3f48 <_can_async_init+0x1c8>)
    3e90:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3e92:	687b      	ldr	r3, [r7, #4]
    3e94:	681b      	ldr	r3, [r3, #0]
    3e96:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3e9a:	4618      	mov	r0, r3
    3e9c:	4b2b      	ldr	r3, [pc, #172]	; (3f4c <_can_async_init+0x1cc>)
    3e9e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3ea0:	204f      	movs	r0, #79	; 0x4f
    3ea2:	4b2b      	ldr	r3, [pc, #172]	; (3f50 <_can_async_init+0x1d0>)
    3ea4:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3ea6:	204f      	movs	r0, #79	; 0x4f
    3ea8:	4b2a      	ldr	r3, [pc, #168]	; (3f54 <_can_async_init+0x1d4>)
    3eaa:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3eac:	204f      	movs	r0, #79	; 0x4f
    3eae:	4b2a      	ldr	r3, [pc, #168]	; (3f58 <_can_async_init+0x1d8>)
    3eb0:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	681b      	ldr	r3, [r3, #0]
    3eb6:	2101      	movs	r1, #1
    3eb8:	4618      	mov	r0, r3
    3eba:	4b28      	ldr	r3, [pc, #160]	; (3f5c <_can_async_init+0x1dc>)
    3ebc:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3ebe:	687b      	ldr	r3, [r7, #4]
    3ec0:	681b      	ldr	r3, [r3, #0]
    3ec2:	4618      	mov	r0, r3
    3ec4:	4b26      	ldr	r3, [pc, #152]	; (3f60 <_can_async_init+0x1e0>)
    3ec6:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	681b      	ldr	r3, [r3, #0]
    3ecc:	4618      	mov	r0, r3
    3ece:	4b25      	ldr	r3, [pc, #148]	; (3f64 <_can_async_init+0x1e4>)
    3ed0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3ed2:	bf00      	nop
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	681b      	ldr	r3, [r3, #0]
    3ed8:	4618      	mov	r0, r3
    3eda:	4b06      	ldr	r3, [pc, #24]	; (3ef4 <_can_async_init+0x174>)
    3edc:	4798      	blx	r3
    3ede:	4603      	mov	r3, r0
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d1f7      	bne.n	3ed4 <_can_async_init+0x154>
	};

	return ERR_NONE;
    3ee4:	2300      	movs	r3, #0
}
    3ee6:	4618      	mov	r0, r3
    3ee8:	3708      	adds	r7, #8
    3eea:	46bd      	mov	sp, r7
    3eec:	bd80      	pop	{r7, pc}
    3eee:	bf00      	nop
    3ef0:	00003b35 	.word	0x00003b35
    3ef4:	00003b55 	.word	0x00003b55
    3ef8:	00003ba3 	.word	0x00003ba3
    3efc:	42000400 	.word	0x42000400
    3f00:	20000bf4 	.word	0x20000bf4
    3f04:	20000004 	.word	0x20000004
    3f08:	00003be3 	.word	0x00003be3
    3f0c:	00003afd 	.word	0x00003afd
    3f10:	00003c05 	.word	0x00003c05
    3f14:	00003b19 	.word	0x00003b19
    3f18:	2000ab20 	.word	0x2000ab20
    3f1c:	00003ce9 	.word	0x00003ce9
    3f20:	00003d07 	.word	0x00003d07
    3f24:	00003d43 	.word	0x00003d43
    3f28:	2000aad8 	.word	0x2000aad8
    3f2c:	00003d25 	.word	0x00003d25
    3f30:	20000b54 	.word	0x20000b54
    3f34:	00003d61 	.word	0x00003d61
    3f38:	00003c71 	.word	0x00003c71
    3f3c:	20000b64 	.word	0x20000b64
    3f40:	00003c8f 	.word	0x00003c8f
    3f44:	20000be4 	.word	0x20000be4
    3f48:	00003cad 	.word	0x00003cad
    3f4c:	00003ccb 	.word	0x00003ccb
    3f50:	00003a55 	.word	0x00003a55
    3f54:	00003a99 	.word	0x00003a99
    3f58:	00003a19 	.word	0x00003a19
    3f5c:	00003c55 	.word	0x00003c55
    3f60:	00003bc3 	.word	0x00003bc3
    3f64:	00003b83 	.word	0x00003b83

00003f68 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3f68:	b590      	push	{r4, r7, lr}
    3f6a:	b083      	sub	sp, #12
    3f6c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3f6e:	4b2c      	ldr	r3, [pc, #176]	; (4020 <CAN1_Handler+0xb8>)
    3f70:	681b      	ldr	r3, [r3, #0]
    3f72:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	681b      	ldr	r3, [r3, #0]
    3f78:	4618      	mov	r0, r3
    3f7a:	4b2a      	ldr	r3, [pc, #168]	; (4024 <CAN1_Handler+0xbc>)
    3f7c:	4798      	blx	r3
    3f7e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3f80:	683b      	ldr	r3, [r7, #0]
    3f82:	f003 0301 	and.w	r3, r3, #1
    3f86:	2b00      	cmp	r3, #0
    3f88:	d003      	beq.n	3f92 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	689b      	ldr	r3, [r3, #8]
    3f8e:	6878      	ldr	r0, [r7, #4]
    3f90:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3f92:	683b      	ldr	r3, [r7, #0]
    3f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3f98:	2b00      	cmp	r3, #0
    3f9a:	d003      	beq.n	3fa4 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	685b      	ldr	r3, [r3, #4]
    3fa0:	6878      	ldr	r0, [r7, #4]
    3fa2:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3fa4:	683b      	ldr	r3, [r7, #0]
    3fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3faa:	2b00      	cmp	r3, #0
    3fac:	d004      	beq.n	3fb8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	68db      	ldr	r3, [r3, #12]
    3fb2:	2103      	movs	r1, #3
    3fb4:	6878      	ldr	r0, [r7, #4]
    3fb6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3fb8:	683b      	ldr	r3, [r7, #0]
    3fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d004      	beq.n	3fcc <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	68db      	ldr	r3, [r3, #12]
    3fc6:	2100      	movs	r1, #0
    3fc8:	6878      	ldr	r0, [r7, #4]
    3fca:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3fcc:	683b      	ldr	r3, [r7, #0]
    3fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d00f      	beq.n	3ff6 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	68dc      	ldr	r4, [r3, #12]
    3fda:	687b      	ldr	r3, [r7, #4]
    3fdc:	681b      	ldr	r3, [r3, #0]
    3fde:	4618      	mov	r0, r3
    3fe0:	4b11      	ldr	r3, [pc, #68]	; (4028 <CAN1_Handler+0xc0>)
    3fe2:	4798      	blx	r3
    3fe4:	4603      	mov	r3, r0
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d001      	beq.n	3fee <CAN1_Handler+0x86>
    3fea:	2302      	movs	r3, #2
    3fec:	e000      	b.n	3ff0 <CAN1_Handler+0x88>
    3fee:	2301      	movs	r3, #1
    3ff0:	4619      	mov	r1, r3
    3ff2:	6878      	ldr	r0, [r7, #4]
    3ff4:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3ff6:	683b      	ldr	r3, [r7, #0]
    3ff8:	f003 0308 	and.w	r3, r3, #8
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d004      	beq.n	400a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	68db      	ldr	r3, [r3, #12]
    4004:	2104      	movs	r1, #4
    4006:	6878      	ldr	r0, [r7, #4]
    4008:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    400a:	687b      	ldr	r3, [r7, #4]
    400c:	681b      	ldr	r3, [r3, #0]
    400e:	6839      	ldr	r1, [r7, #0]
    4010:	4618      	mov	r0, r3
    4012:	4b06      	ldr	r3, [pc, #24]	; (402c <CAN1_Handler+0xc4>)
    4014:	4798      	blx	r3
}
    4016:	bf00      	nop
    4018:	370c      	adds	r7, #12
    401a:	46bd      	mov	sp, r7
    401c:	bd90      	pop	{r4, r7, pc}
    401e:	bf00      	nop
    4020:	20000bf4 	.word	0x20000bf4
    4024:	00003c3d 	.word	0x00003c3d
    4028:	00003ad5 	.word	0x00003ad5
    402c:	00003c21 	.word	0x00003c21

00004030 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4030:	b480      	push	{r7}
    4032:	b083      	sub	sp, #12
    4034:	af00      	add	r7, sp, #0
    4036:	6078      	str	r0, [r7, #4]
    4038:	460b      	mov	r3, r1
    403a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    403c:	687b      	ldr	r3, [r7, #4]
    403e:	881b      	ldrh	r3, [r3, #0]
    4040:	b29a      	uxth	r2, r3
    4042:	887b      	ldrh	r3, [r7, #2]
    4044:	021b      	lsls	r3, r3, #8
    4046:	b29b      	uxth	r3, r3
    4048:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    404c:	b29b      	uxth	r3, r3
    404e:	4313      	orrs	r3, r2
    4050:	b29a      	uxth	r2, r3
    4052:	687b      	ldr	r3, [r7, #4]
    4054:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4056:	bf00      	nop
    4058:	370c      	adds	r7, #12
    405a:	46bd      	mov	sp, r7
    405c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4060:	4770      	bx	lr

00004062 <hri_port_set_EVCTRL_reg>:
{
    4062:	b480      	push	{r7}
    4064:	b085      	sub	sp, #20
    4066:	af00      	add	r7, sp, #0
    4068:	60f8      	str	r0, [r7, #12]
    406a:	460b      	mov	r3, r1
    406c:	607a      	str	r2, [r7, #4]
    406e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4070:	7afb      	ldrb	r3, [r7, #11]
    4072:	7afa      	ldrb	r2, [r7, #11]
    4074:	68f9      	ldr	r1, [r7, #12]
    4076:	01d2      	lsls	r2, r2, #7
    4078:	440a      	add	r2, r1
    407a:	322c      	adds	r2, #44	; 0x2c
    407c:	6811      	ldr	r1, [r2, #0]
    407e:	687a      	ldr	r2, [r7, #4]
    4080:	430a      	orrs	r2, r1
    4082:	68f9      	ldr	r1, [r7, #12]
    4084:	01db      	lsls	r3, r3, #7
    4086:	440b      	add	r3, r1
    4088:	332c      	adds	r3, #44	; 0x2c
    408a:	601a      	str	r2, [r3, #0]
}
    408c:	bf00      	nop
    408e:	3714      	adds	r7, #20
    4090:	46bd      	mov	sp, r7
    4092:	f85d 7b04 	ldr.w	r7, [sp], #4
    4096:	4770      	bx	lr

00004098 <_port_event_init>:

static inline void _port_event_init()
{
    4098:	b580      	push	{r7, lr}
    409a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    409c:	2200      	movs	r2, #0
    409e:	2100      	movs	r1, #0
    40a0:	480a      	ldr	r0, [pc, #40]	; (40cc <_port_event_init+0x34>)
    40a2:	4b0b      	ldr	r3, [pc, #44]	; (40d0 <_port_event_init+0x38>)
    40a4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    40a6:	2200      	movs	r2, #0
    40a8:	2101      	movs	r1, #1
    40aa:	4808      	ldr	r0, [pc, #32]	; (40cc <_port_event_init+0x34>)
    40ac:	4b08      	ldr	r3, [pc, #32]	; (40d0 <_port_event_init+0x38>)
    40ae:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    40b0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    40b4:	2102      	movs	r1, #2
    40b6:	4805      	ldr	r0, [pc, #20]	; (40cc <_port_event_init+0x34>)
    40b8:	4b05      	ldr	r3, [pc, #20]	; (40d0 <_port_event_init+0x38>)
    40ba:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    40bc:	2200      	movs	r2, #0
    40be:	2103      	movs	r1, #3
    40c0:	4802      	ldr	r0, [pc, #8]	; (40cc <_port_event_init+0x34>)
    40c2:	4b03      	ldr	r3, [pc, #12]	; (40d0 <_port_event_init+0x38>)
    40c4:	4798      	blx	r3
}
    40c6:	bf00      	nop
    40c8:	bd80      	pop	{r7, pc}
    40ca:	bf00      	nop
    40cc:	41008000 	.word	0x41008000
    40d0:	00004063 	.word	0x00004063

000040d4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    40d4:	b580      	push	{r7, lr}
    40d6:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    40d8:	2104      	movs	r1, #4
    40da:	480b      	ldr	r0, [pc, #44]	; (4108 <_init_chip+0x34>)
    40dc:	4b0b      	ldr	r3, [pc, #44]	; (410c <_init_chip+0x38>)
    40de:	4798      	blx	r3

	_osc32kctrl_init_sources();
    40e0:	4b0b      	ldr	r3, [pc, #44]	; (4110 <_init_chip+0x3c>)
    40e2:	4798      	blx	r3
	_oscctrl_init_sources();
    40e4:	4b0b      	ldr	r3, [pc, #44]	; (4114 <_init_chip+0x40>)
    40e6:	4798      	blx	r3
	_mclk_init();
    40e8:	4b0b      	ldr	r3, [pc, #44]	; (4118 <_init_chip+0x44>)
    40ea:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    40ec:	f44f 6084 	mov.w	r0, #1056	; 0x420
    40f0:	4b0a      	ldr	r3, [pc, #40]	; (411c <_init_chip+0x48>)
    40f2:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    40f4:	4b0a      	ldr	r3, [pc, #40]	; (4120 <_init_chip+0x4c>)
    40f6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    40f8:	f640 30df 	movw	r0, #3039	; 0xbdf
    40fc:	4b07      	ldr	r3, [pc, #28]	; (411c <_init_chip+0x48>)
    40fe:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4100:	4b08      	ldr	r3, [pc, #32]	; (4124 <_init_chip+0x50>)
    4102:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4104:	bf00      	nop
    4106:	bd80      	pop	{r7, pc}
    4108:	41004000 	.word	0x41004000
    410c:	00004031 	.word	0x00004031
    4110:	00004bfd 	.word	0x00004bfd
    4114:	000050c5 	.word	0x000050c5
    4118:	00004b1d 	.word	0x00004b1d
    411c:	000049c5 	.word	0x000049c5
    4120:	00005105 	.word	0x00005105
    4124:	00004099 	.word	0x00004099

00004128 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4128:	b480      	push	{r7}
    412a:	b083      	sub	sp, #12
    412c:	af00      	add	r7, sp, #0
    412e:	6078      	str	r0, [r7, #4]
    4130:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4132:	687b      	ldr	r3, [r7, #4]
    4134:	683a      	ldr	r2, [r7, #0]
    4136:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4138:	2300      	movs	r3, #0
}
    413a:	4618      	mov	r0, r3
    413c:	370c      	adds	r7, #12
    413e:	46bd      	mov	sp, r7
    4140:	f85d 7b04 	ldr.w	r7, [sp], #4
    4144:	4770      	bx	lr
	...

00004148 <__NVIC_EnableIRQ>:
{
    4148:	b480      	push	{r7}
    414a:	b083      	sub	sp, #12
    414c:	af00      	add	r7, sp, #0
    414e:	4603      	mov	r3, r0
    4150:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4156:	2b00      	cmp	r3, #0
    4158:	db0b      	blt.n	4172 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    415a:	4909      	ldr	r1, [pc, #36]	; (4180 <__NVIC_EnableIRQ+0x38>)
    415c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4160:	095b      	lsrs	r3, r3, #5
    4162:	88fa      	ldrh	r2, [r7, #6]
    4164:	f002 021f 	and.w	r2, r2, #31
    4168:	2001      	movs	r0, #1
    416a:	fa00 f202 	lsl.w	r2, r0, r2
    416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4172:	bf00      	nop
    4174:	370c      	adds	r7, #12
    4176:	46bd      	mov	sp, r7
    4178:	f85d 7b04 	ldr.w	r7, [sp], #4
    417c:	4770      	bx	lr
    417e:	bf00      	nop
    4180:	e000e100 	.word	0xe000e100

00004184 <__NVIC_DisableIRQ>:
{
    4184:	b480      	push	{r7}
    4186:	b083      	sub	sp, #12
    4188:	af00      	add	r7, sp, #0
    418a:	4603      	mov	r3, r0
    418c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    418e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4192:	2b00      	cmp	r3, #0
    4194:	db10      	blt.n	41b8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4196:	490b      	ldr	r1, [pc, #44]	; (41c4 <__NVIC_DisableIRQ+0x40>)
    4198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    419c:	095b      	lsrs	r3, r3, #5
    419e:	88fa      	ldrh	r2, [r7, #6]
    41a0:	f002 021f 	and.w	r2, r2, #31
    41a4:	2001      	movs	r0, #1
    41a6:	fa00 f202 	lsl.w	r2, r0, r2
    41aa:	3320      	adds	r3, #32
    41ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    41b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41b4:	f3bf 8f6f 	isb	sy
}
    41b8:	bf00      	nop
    41ba:	370c      	adds	r7, #12
    41bc:	46bd      	mov	sp, r7
    41be:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c2:	4770      	bx	lr
    41c4:	e000e100 	.word	0xe000e100

000041c8 <__NVIC_ClearPendingIRQ>:
{
    41c8:	b480      	push	{r7}
    41ca:	b083      	sub	sp, #12
    41cc:	af00      	add	r7, sp, #0
    41ce:	4603      	mov	r3, r0
    41d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    41d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41d6:	2b00      	cmp	r3, #0
    41d8:	db0c      	blt.n	41f4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41da:	4909      	ldr	r1, [pc, #36]	; (4200 <__NVIC_ClearPendingIRQ+0x38>)
    41dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41e0:	095b      	lsrs	r3, r3, #5
    41e2:	88fa      	ldrh	r2, [r7, #6]
    41e4:	f002 021f 	and.w	r2, r2, #31
    41e8:	2001      	movs	r0, #1
    41ea:	fa00 f202 	lsl.w	r2, r0, r2
    41ee:	3360      	adds	r3, #96	; 0x60
    41f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    41f4:	bf00      	nop
    41f6:	370c      	adds	r7, #12
    41f8:	46bd      	mov	sp, r7
    41fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fe:	4770      	bx	lr
    4200:	e000e100 	.word	0xe000e100

00004204 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4204:	b480      	push	{r7}
    4206:	b083      	sub	sp, #12
    4208:	af00      	add	r7, sp, #0
    420a:	6078      	str	r0, [r7, #4]
    420c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    420e:	bf00      	nop
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	685a      	ldr	r2, [r3, #4]
    4214:	683b      	ldr	r3, [r7, #0]
    4216:	4013      	ands	r3, r2
    4218:	2b00      	cmp	r3, #0
    421a:	d1f9      	bne.n	4210 <hri_eic_wait_for_sync+0xc>
	};
}
    421c:	bf00      	nop
    421e:	370c      	adds	r7, #12
    4220:	46bd      	mov	sp, r7
    4222:	f85d 7b04 	ldr.w	r7, [sp], #4
    4226:	4770      	bx	lr

00004228 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4228:	b480      	push	{r7}
    422a:	b083      	sub	sp, #12
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
    4230:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	685a      	ldr	r2, [r3, #4]
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	4013      	ands	r3, r2
    423a:	2b00      	cmp	r3, #0
    423c:	bf14      	ite	ne
    423e:	2301      	movne	r3, #1
    4240:	2300      	moveq	r3, #0
    4242:	b2db      	uxtb	r3, r3
}
    4244:	4618      	mov	r0, r3
    4246:	370c      	adds	r7, #12
    4248:	46bd      	mov	sp, r7
    424a:	f85d 7b04 	ldr.w	r7, [sp], #4
    424e:	4770      	bx	lr

00004250 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4250:	b480      	push	{r7}
    4252:	b083      	sub	sp, #12
    4254:	af00      	add	r7, sp, #0
    4256:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	695b      	ldr	r3, [r3, #20]
}
    425c:	4618      	mov	r0, r3
    425e:	370c      	adds	r7, #12
    4260:	46bd      	mov	sp, r7
    4262:	f85d 7b04 	ldr.w	r7, [sp], #4
    4266:	4770      	bx	lr

00004268 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4268:	b480      	push	{r7}
    426a:	b083      	sub	sp, #12
    426c:	af00      	add	r7, sp, #0
    426e:	6078      	str	r0, [r7, #4]
    4270:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	683a      	ldr	r2, [r7, #0]
    4276:	615a      	str	r2, [r3, #20]
}
    4278:	bf00      	nop
    427a:	370c      	adds	r7, #12
    427c:	46bd      	mov	sp, r7
    427e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4282:	4770      	bx	lr

00004284 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4284:	b480      	push	{r7}
    4286:	b083      	sub	sp, #12
    4288:	af00      	add	r7, sp, #0
    428a:	6078      	str	r0, [r7, #4]
    428c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	683a      	ldr	r2, [r7, #0]
    4292:	611a      	str	r2, [r3, #16]
}
    4294:	bf00      	nop
    4296:	370c      	adds	r7, #12
    4298:	46bd      	mov	sp, r7
    429a:	f85d 7b04 	ldr.w	r7, [sp], #4
    429e:	4770      	bx	lr

000042a0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    42a0:	b480      	push	{r7}
    42a2:	b083      	sub	sp, #12
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
    42a8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    42aa:	687b      	ldr	r3, [r7, #4]
    42ac:	683a      	ldr	r2, [r7, #0]
    42ae:	60da      	str	r2, [r3, #12]
}
    42b0:	bf00      	nop
    42b2:	370c      	adds	r7, #12
    42b4:	46bd      	mov	sp, r7
    42b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ba:	4770      	bx	lr

000042bc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    42bc:	b580      	push	{r7, lr}
    42be:	b082      	sub	sp, #8
    42c0:	af00      	add	r7, sp, #0
    42c2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    42c4:	687b      	ldr	r3, [r7, #4]
    42c6:	781b      	ldrb	r3, [r3, #0]
    42c8:	b2db      	uxtb	r3, r3
    42ca:	f043 0302 	orr.w	r3, r3, #2
    42ce:	b2da      	uxtb	r2, r3
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    42d4:	2103      	movs	r1, #3
    42d6:	6878      	ldr	r0, [r7, #4]
    42d8:	4b02      	ldr	r3, [pc, #8]	; (42e4 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    42da:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42dc:	bf00      	nop
    42de:	3708      	adds	r7, #8
    42e0:	46bd      	mov	sp, r7
    42e2:	bd80      	pop	{r7, pc}
    42e4:	00004205 	.word	0x00004205

000042e8 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    42e8:	b580      	push	{r7, lr}
    42ea:	b082      	sub	sp, #8
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	781b      	ldrb	r3, [r3, #0]
    42f4:	b2db      	uxtb	r3, r3
    42f6:	f023 0302 	bic.w	r3, r3, #2
    42fa:	b2da      	uxtb	r2, r3
    42fc:	687b      	ldr	r3, [r7, #4]
    42fe:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4300:	2103      	movs	r1, #3
    4302:	6878      	ldr	r0, [r7, #4]
    4304:	4b02      	ldr	r3, [pc, #8]	; (4310 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4306:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4308:	bf00      	nop
    430a:	3708      	adds	r7, #8
    430c:	46bd      	mov	sp, r7
    430e:	bd80      	pop	{r7, pc}
    4310:	00004205 	.word	0x00004205

00004314 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4314:	b580      	push	{r7, lr}
    4316:	b084      	sub	sp, #16
    4318:	af00      	add	r7, sp, #0
    431a:	6078      	str	r0, [r7, #4]
    431c:	460b      	mov	r3, r1
    431e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4320:	687b      	ldr	r3, [r7, #4]
    4322:	781b      	ldrb	r3, [r3, #0]
    4324:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4326:	7bfb      	ldrb	r3, [r7, #15]
    4328:	f023 0310 	bic.w	r3, r3, #16
    432c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    432e:	78fb      	ldrb	r3, [r7, #3]
    4330:	011b      	lsls	r3, r3, #4
    4332:	b25a      	sxtb	r2, r3
    4334:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4338:	4313      	orrs	r3, r2
    433a:	b25b      	sxtb	r3, r3
    433c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    433e:	687b      	ldr	r3, [r7, #4]
    4340:	7bfa      	ldrb	r2, [r7, #15]
    4342:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4344:	2103      	movs	r1, #3
    4346:	6878      	ldr	r0, [r7, #4]
    4348:	4b02      	ldr	r3, [pc, #8]	; (4354 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    434a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    434c:	bf00      	nop
    434e:	3710      	adds	r7, #16
    4350:	46bd      	mov	sp, r7
    4352:	bd80      	pop	{r7, pc}
    4354:	00004205 	.word	0x00004205

00004358 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4358:	b580      	push	{r7, lr}
    435a:	b084      	sub	sp, #16
    435c:	af00      	add	r7, sp, #0
    435e:	6078      	str	r0, [r7, #4]
    4360:	460b      	mov	r3, r1
    4362:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4364:	2103      	movs	r1, #3
    4366:	6878      	ldr	r0, [r7, #4]
    4368:	4b06      	ldr	r3, [pc, #24]	; (4384 <hri_eic_get_CTRLA_reg+0x2c>)
    436a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	781b      	ldrb	r3, [r3, #0]
    4370:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4372:	7bfa      	ldrb	r2, [r7, #15]
    4374:	78fb      	ldrb	r3, [r7, #3]
    4376:	4013      	ands	r3, r2
    4378:	73fb      	strb	r3, [r7, #15]
	return tmp;
    437a:	7bfb      	ldrb	r3, [r7, #15]
}
    437c:	4618      	mov	r0, r3
    437e:	3710      	adds	r7, #16
    4380:	46bd      	mov	sp, r7
    4382:	bd80      	pop	{r7, pc}
    4384:	00004205 	.word	0x00004205

00004388 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4388:	b580      	push	{r7, lr}
    438a:	b082      	sub	sp, #8
    438c:	af00      	add	r7, sp, #0
    438e:	6078      	str	r0, [r7, #4]
    4390:	460b      	mov	r3, r1
    4392:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	78fa      	ldrb	r2, [r7, #3]
    4398:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    439a:	2103      	movs	r1, #3
    439c:	6878      	ldr	r0, [r7, #4]
    439e:	4b03      	ldr	r3, [pc, #12]	; (43ac <hri_eic_write_CTRLA_reg+0x24>)
    43a0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    43a2:	bf00      	nop
    43a4:	3708      	adds	r7, #8
    43a6:	46bd      	mov	sp, r7
    43a8:	bd80      	pop	{r7, pc}
    43aa:	bf00      	nop
    43ac:	00004205 	.word	0x00004205

000043b0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    43b0:	b480      	push	{r7}
    43b2:	b083      	sub	sp, #12
    43b4:	af00      	add	r7, sp, #0
    43b6:	6078      	str	r0, [r7, #4]
    43b8:	460b      	mov	r3, r1
    43ba:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	78fa      	ldrb	r2, [r7, #3]
    43c0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    43c2:	bf00      	nop
    43c4:	370c      	adds	r7, #12
    43c6:	46bd      	mov	sp, r7
    43c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    43cc:	4770      	bx	lr

000043ce <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    43ce:	b480      	push	{r7}
    43d0:	b083      	sub	sp, #12
    43d2:	af00      	add	r7, sp, #0
    43d4:	6078      	str	r0, [r7, #4]
    43d6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    43d8:	687b      	ldr	r3, [r7, #4]
    43da:	683a      	ldr	r2, [r7, #0]
    43dc:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    43de:	bf00      	nop
    43e0:	370c      	adds	r7, #12
    43e2:	46bd      	mov	sp, r7
    43e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43e8:	4770      	bx	lr

000043ea <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    43ea:	b480      	push	{r7}
    43ec:	b083      	sub	sp, #12
    43ee:	af00      	add	r7, sp, #0
    43f0:	6078      	str	r0, [r7, #4]
    43f2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	683a      	ldr	r2, [r7, #0]
    43f8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    43fa:	bf00      	nop
    43fc:	370c      	adds	r7, #12
    43fe:	46bd      	mov	sp, r7
    4400:	f85d 7b04 	ldr.w	r7, [sp], #4
    4404:	4770      	bx	lr

00004406 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4406:	b480      	push	{r7}
    4408:	b085      	sub	sp, #20
    440a:	af00      	add	r7, sp, #0
    440c:	60f8      	str	r0, [r7, #12]
    440e:	460b      	mov	r3, r1
    4410:	607a      	str	r2, [r7, #4]
    4412:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4414:	7afb      	ldrb	r3, [r7, #11]
    4416:	68fa      	ldr	r2, [r7, #12]
    4418:	3306      	adds	r3, #6
    441a:	009b      	lsls	r3, r3, #2
    441c:	4413      	add	r3, r2
    441e:	687a      	ldr	r2, [r7, #4]
    4420:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4422:	bf00      	nop
    4424:	3714      	adds	r7, #20
    4426:	46bd      	mov	sp, r7
    4428:	f85d 7b04 	ldr.w	r7, [sp], #4
    442c:	4770      	bx	lr

0000442e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    442e:	b480      	push	{r7}
    4430:	b083      	sub	sp, #12
    4432:	af00      	add	r7, sp, #0
    4434:	6078      	str	r0, [r7, #4]
    4436:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	683a      	ldr	r2, [r7, #0]
    443c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    443e:	bf00      	nop
    4440:	370c      	adds	r7, #12
    4442:	46bd      	mov	sp, r7
    4444:	f85d 7b04 	ldr.w	r7, [sp], #4
    4448:	4770      	bx	lr

0000444a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    444a:	b480      	push	{r7}
    444c:	b083      	sub	sp, #12
    444e:	af00      	add	r7, sp, #0
    4450:	6078      	str	r0, [r7, #4]
    4452:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	683a      	ldr	r2, [r7, #0]
    4458:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    445a:	bf00      	nop
    445c:	370c      	adds	r7, #12
    445e:	46bd      	mov	sp, r7
    4460:	f85d 7b04 	ldr.w	r7, [sp], #4
    4464:	4770      	bx	lr
	...

00004468 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4468:	b580      	push	{r7, lr}
    446a:	b082      	sub	sp, #8
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4470:	2101      	movs	r1, #1
    4472:	484f      	ldr	r0, [pc, #316]	; (45b0 <_ext_irq_init+0x148>)
    4474:	4b4f      	ldr	r3, [pc, #316]	; (45b4 <_ext_irq_init+0x14c>)
    4476:	4798      	blx	r3
    4478:	4603      	mov	r3, r0
    447a:	f083 0301 	eor.w	r3, r3, #1
    447e:	b2db      	uxtb	r3, r3
    4480:	2b00      	cmp	r3, #0
    4482:	d011      	beq.n	44a8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4484:	2102      	movs	r1, #2
    4486:	484a      	ldr	r0, [pc, #296]	; (45b0 <_ext_irq_init+0x148>)
    4488:	4b4b      	ldr	r3, [pc, #300]	; (45b8 <_ext_irq_init+0x150>)
    448a:	4798      	blx	r3
    448c:	4603      	mov	r3, r0
    448e:	2b00      	cmp	r3, #0
    4490:	d006      	beq.n	44a0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4492:	4847      	ldr	r0, [pc, #284]	; (45b0 <_ext_irq_init+0x148>)
    4494:	4b49      	ldr	r3, [pc, #292]	; (45bc <_ext_irq_init+0x154>)
    4496:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4498:	2102      	movs	r1, #2
    449a:	4845      	ldr	r0, [pc, #276]	; (45b0 <_ext_irq_init+0x148>)
    449c:	4b48      	ldr	r3, [pc, #288]	; (45c0 <_ext_irq_init+0x158>)
    449e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    44a0:	2101      	movs	r1, #1
    44a2:	4843      	ldr	r0, [pc, #268]	; (45b0 <_ext_irq_init+0x148>)
    44a4:	4b47      	ldr	r3, [pc, #284]	; (45c4 <_ext_irq_init+0x15c>)
    44a6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    44a8:	2101      	movs	r1, #1
    44aa:	4841      	ldr	r0, [pc, #260]	; (45b0 <_ext_irq_init+0x148>)
    44ac:	4b44      	ldr	r3, [pc, #272]	; (45c0 <_ext_irq_init+0x158>)
    44ae:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    44b0:	2100      	movs	r1, #0
    44b2:	483f      	ldr	r0, [pc, #252]	; (45b0 <_ext_irq_init+0x148>)
    44b4:	4b44      	ldr	r3, [pc, #272]	; (45c8 <_ext_irq_init+0x160>)
    44b6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    44b8:	2100      	movs	r1, #0
    44ba:	483d      	ldr	r0, [pc, #244]	; (45b0 <_ext_irq_init+0x148>)
    44bc:	4b43      	ldr	r3, [pc, #268]	; (45cc <_ext_irq_init+0x164>)
    44be:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    44c0:	2100      	movs	r1, #0
    44c2:	483b      	ldr	r0, [pc, #236]	; (45b0 <_ext_irq_init+0x148>)
    44c4:	4b42      	ldr	r3, [pc, #264]	; (45d0 <_ext_irq_init+0x168>)
    44c6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    44c8:	f240 31bb 	movw	r1, #955	; 0x3bb
    44cc:	4838      	ldr	r0, [pc, #224]	; (45b0 <_ext_irq_init+0x148>)
    44ce:	4b41      	ldr	r3, [pc, #260]	; (45d4 <_ext_irq_init+0x16c>)
    44d0:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    44d2:	f240 313b 	movw	r1, #827	; 0x33b
    44d6:	4836      	ldr	r0, [pc, #216]	; (45b0 <_ext_irq_init+0x148>)
    44d8:	4b3f      	ldr	r3, [pc, #252]	; (45d8 <_ext_irq_init+0x170>)
    44da:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    44dc:	2100      	movs	r1, #0
    44de:	4834      	ldr	r0, [pc, #208]	; (45b0 <_ext_irq_init+0x148>)
    44e0:	4b3e      	ldr	r3, [pc, #248]	; (45dc <_ext_irq_init+0x174>)
    44e2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    44e4:	4a3e      	ldr	r2, [pc, #248]	; (45e0 <_ext_irq_init+0x178>)
    44e6:	2100      	movs	r1, #0
    44e8:	4831      	ldr	r0, [pc, #196]	; (45b0 <_ext_irq_init+0x148>)
    44ea:	4b3e      	ldr	r3, [pc, #248]	; (45e4 <_ext_irq_init+0x17c>)
    44ec:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    44ee:	2211      	movs	r2, #17
    44f0:	2101      	movs	r1, #1
    44f2:	482f      	ldr	r0, [pc, #188]	; (45b0 <_ext_irq_init+0x148>)
    44f4:	4b3b      	ldr	r3, [pc, #236]	; (45e4 <_ext_irq_init+0x17c>)
    44f6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    44f8:	482d      	ldr	r0, [pc, #180]	; (45b0 <_ext_irq_init+0x148>)
    44fa:	4b3b      	ldr	r3, [pc, #236]	; (45e8 <_ext_irq_init+0x180>)
    44fc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    44fe:	200c      	movs	r0, #12
    4500:	4b3a      	ldr	r3, [pc, #232]	; (45ec <_ext_irq_init+0x184>)
    4502:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4504:	200c      	movs	r0, #12
    4506:	4b3a      	ldr	r3, [pc, #232]	; (45f0 <_ext_irq_init+0x188>)
    4508:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    450a:	200c      	movs	r0, #12
    450c:	4b39      	ldr	r3, [pc, #228]	; (45f4 <_ext_irq_init+0x18c>)
    450e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4510:	200d      	movs	r0, #13
    4512:	4b36      	ldr	r3, [pc, #216]	; (45ec <_ext_irq_init+0x184>)
    4514:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4516:	200d      	movs	r0, #13
    4518:	4b35      	ldr	r3, [pc, #212]	; (45f0 <_ext_irq_init+0x188>)
    451a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    451c:	200d      	movs	r0, #13
    451e:	4b35      	ldr	r3, [pc, #212]	; (45f4 <_ext_irq_init+0x18c>)
    4520:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4522:	200f      	movs	r0, #15
    4524:	4b31      	ldr	r3, [pc, #196]	; (45ec <_ext_irq_init+0x184>)
    4526:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4528:	200f      	movs	r0, #15
    452a:	4b31      	ldr	r3, [pc, #196]	; (45f0 <_ext_irq_init+0x188>)
    452c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    452e:	200f      	movs	r0, #15
    4530:	4b30      	ldr	r3, [pc, #192]	; (45f4 <_ext_irq_init+0x18c>)
    4532:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4534:	2010      	movs	r0, #16
    4536:	4b2d      	ldr	r3, [pc, #180]	; (45ec <_ext_irq_init+0x184>)
    4538:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    453a:	2010      	movs	r0, #16
    453c:	4b2c      	ldr	r3, [pc, #176]	; (45f0 <_ext_irq_init+0x188>)
    453e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4540:	2010      	movs	r0, #16
    4542:	4b2c      	ldr	r3, [pc, #176]	; (45f4 <_ext_irq_init+0x18c>)
    4544:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4546:	2011      	movs	r0, #17
    4548:	4b28      	ldr	r3, [pc, #160]	; (45ec <_ext_irq_init+0x184>)
    454a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    454c:	2011      	movs	r0, #17
    454e:	4b28      	ldr	r3, [pc, #160]	; (45f0 <_ext_irq_init+0x188>)
    4550:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4552:	2011      	movs	r0, #17
    4554:	4b27      	ldr	r3, [pc, #156]	; (45f4 <_ext_irq_init+0x18c>)
    4556:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4558:	2012      	movs	r0, #18
    455a:	4b24      	ldr	r3, [pc, #144]	; (45ec <_ext_irq_init+0x184>)
    455c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    455e:	2012      	movs	r0, #18
    4560:	4b23      	ldr	r3, [pc, #140]	; (45f0 <_ext_irq_init+0x188>)
    4562:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4564:	2012      	movs	r0, #18
    4566:	4b23      	ldr	r3, [pc, #140]	; (45f4 <_ext_irq_init+0x18c>)
    4568:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    456a:	2013      	movs	r0, #19
    456c:	4b1f      	ldr	r3, [pc, #124]	; (45ec <_ext_irq_init+0x184>)
    456e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4570:	2013      	movs	r0, #19
    4572:	4b1f      	ldr	r3, [pc, #124]	; (45f0 <_ext_irq_init+0x188>)
    4574:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4576:	2013      	movs	r0, #19
    4578:	4b1e      	ldr	r3, [pc, #120]	; (45f4 <_ext_irq_init+0x18c>)
    457a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    457c:	2014      	movs	r0, #20
    457e:	4b1b      	ldr	r3, [pc, #108]	; (45ec <_ext_irq_init+0x184>)
    4580:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4582:	2014      	movs	r0, #20
    4584:	4b1a      	ldr	r3, [pc, #104]	; (45f0 <_ext_irq_init+0x188>)
    4586:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4588:	2014      	movs	r0, #20
    458a:	4b1a      	ldr	r3, [pc, #104]	; (45f4 <_ext_irq_init+0x18c>)
    458c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    458e:	2015      	movs	r0, #21
    4590:	4b16      	ldr	r3, [pc, #88]	; (45ec <_ext_irq_init+0x184>)
    4592:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4594:	2015      	movs	r0, #21
    4596:	4b16      	ldr	r3, [pc, #88]	; (45f0 <_ext_irq_init+0x188>)
    4598:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    459a:	2015      	movs	r0, #21
    459c:	4b15      	ldr	r3, [pc, #84]	; (45f4 <_ext_irq_init+0x18c>)
    459e:	4798      	blx	r3

	callback = cb;
    45a0:	4a15      	ldr	r2, [pc, #84]	; (45f8 <_ext_irq_init+0x190>)
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    45a6:	2300      	movs	r3, #0
}
    45a8:	4618      	mov	r0, r3
    45aa:	3708      	adds	r7, #8
    45ac:	46bd      	mov	sp, r7
    45ae:	bd80      	pop	{r7, pc}
    45b0:	40002800 	.word	0x40002800
    45b4:	00004229 	.word	0x00004229
    45b8:	00004359 	.word	0x00004359
    45bc:	000042e9 	.word	0x000042e9
    45c0:	00004205 	.word	0x00004205
    45c4:	00004389 	.word	0x00004389
    45c8:	00004315 	.word	0x00004315
    45cc:	000043b1 	.word	0x000043b1
    45d0:	000043cf 	.word	0x000043cf
    45d4:	000043eb 	.word	0x000043eb
    45d8:	0000442f 	.word	0x0000442f
    45dc:	0000444b 	.word	0x0000444b
    45e0:	90999013 	.word	0x90999013
    45e4:	00004407 	.word	0x00004407
    45e8:	000042bd 	.word	0x000042bd
    45ec:	00004185 	.word	0x00004185
    45f0:	000041c9 	.word	0x000041c9
    45f4:	00004149 	.word	0x00004149
    45f8:	20000bf8 	.word	0x20000bf8

000045fc <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    45fc:	b580      	push	{r7, lr}
    45fe:	b084      	sub	sp, #16
    4600:	af00      	add	r7, sp, #0
    4602:	6078      	str	r0, [r7, #4]
    4604:	460b      	mov	r3, r1
    4606:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4608:	23ff      	movs	r3, #255	; 0xff
    460a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    460c:	2300      	movs	r3, #0
    460e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4610:	e010      	b.n	4634 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4612:	7bbb      	ldrb	r3, [r7, #14]
    4614:	4a1c      	ldr	r2, [pc, #112]	; (4688 <_ext_irq_enable+0x8c>)
    4616:	00db      	lsls	r3, r3, #3
    4618:	4413      	add	r3, r2
    461a:	685a      	ldr	r2, [r3, #4]
    461c:	687b      	ldr	r3, [r7, #4]
    461e:	429a      	cmp	r2, r3
    4620:	d105      	bne.n	462e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4622:	7bbb      	ldrb	r3, [r7, #14]
    4624:	4a18      	ldr	r2, [pc, #96]	; (4688 <_ext_irq_enable+0x8c>)
    4626:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    462a:	73fb      	strb	r3, [r7, #15]
			break;
    462c:	e005      	b.n	463a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    462e:	7bbb      	ldrb	r3, [r7, #14]
    4630:	3301      	adds	r3, #1
    4632:	73bb      	strb	r3, [r7, #14]
    4634:	7bbb      	ldrb	r3, [r7, #14]
    4636:	2b08      	cmp	r3, #8
    4638:	d9eb      	bls.n	4612 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    463a:	7bfb      	ldrb	r3, [r7, #15]
    463c:	2bff      	cmp	r3, #255	; 0xff
    463e:	d102      	bne.n	4646 <_ext_irq_enable+0x4a>
		return -1;
    4640:	f04f 33ff 	mov.w	r3, #4294967295
    4644:	e01c      	b.n	4680 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4646:	78fb      	ldrb	r3, [r7, #3]
    4648:	2b00      	cmp	r3, #0
    464a:	d008      	beq.n	465e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    464c:	7bfb      	ldrb	r3, [r7, #15]
    464e:	2201      	movs	r2, #1
    4650:	fa02 f303 	lsl.w	r3, r2, r3
    4654:	4619      	mov	r1, r3
    4656:	480d      	ldr	r0, [pc, #52]	; (468c <_ext_irq_enable+0x90>)
    4658:	4b0d      	ldr	r3, [pc, #52]	; (4690 <_ext_irq_enable+0x94>)
    465a:	4798      	blx	r3
    465c:	e00f      	b.n	467e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    465e:	7bfb      	ldrb	r3, [r7, #15]
    4660:	2201      	movs	r2, #1
    4662:	fa02 f303 	lsl.w	r3, r2, r3
    4666:	4619      	mov	r1, r3
    4668:	4808      	ldr	r0, [pc, #32]	; (468c <_ext_irq_enable+0x90>)
    466a:	4b0a      	ldr	r3, [pc, #40]	; (4694 <_ext_irq_enable+0x98>)
    466c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    466e:	7bfb      	ldrb	r3, [r7, #15]
    4670:	2201      	movs	r2, #1
    4672:	fa02 f303 	lsl.w	r3, r2, r3
    4676:	4619      	mov	r1, r3
    4678:	4804      	ldr	r0, [pc, #16]	; (468c <_ext_irq_enable+0x90>)
    467a:	4b07      	ldr	r3, [pc, #28]	; (4698 <_ext_irq_enable+0x9c>)
    467c:	4798      	blx	r3
	}

	return ERR_NONE;
    467e:	2300      	movs	r3, #0
}
    4680:	4618      	mov	r0, r3
    4682:	3710      	adds	r7, #16
    4684:	46bd      	mov	sp, r7
    4686:	bd80      	pop	{r7, pc}
    4688:	00010828 	.word	0x00010828
    468c:	40002800 	.word	0x40002800
    4690:	00004285 	.word	0x00004285
    4694:	000042a1 	.word	0x000042a1
    4698:	00004269 	.word	0x00004269

0000469c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    469c:	b580      	push	{r7, lr}
    469e:	b084      	sub	sp, #16
    46a0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    46a2:	4841      	ldr	r0, [pc, #260]	; (47a8 <_ext_irq_handler+0x10c>)
    46a4:	4b41      	ldr	r3, [pc, #260]	; (47ac <_ext_irq_handler+0x110>)
    46a6:	4798      	blx	r3
    46a8:	4603      	mov	r3, r0
    46aa:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    46ac:	f04f 33ff 	mov.w	r3, #4294967295
    46b0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    46b2:	683b      	ldr	r3, [r7, #0]
    46b4:	4619      	mov	r1, r3
    46b6:	483c      	ldr	r0, [pc, #240]	; (47a8 <_ext_irq_handler+0x10c>)
    46b8:	4b3d      	ldr	r3, [pc, #244]	; (47b0 <_ext_irq_handler+0x114>)
    46ba:	4798      	blx	r3

	ASSERT(callback);
    46bc:	4b3d      	ldr	r3, [pc, #244]	; (47b4 <_ext_irq_handler+0x118>)
    46be:	681b      	ldr	r3, [r3, #0]
    46c0:	2b00      	cmp	r3, #0
    46c2:	bf14      	ite	ne
    46c4:	2301      	movne	r3, #1
    46c6:	2300      	moveq	r3, #0
    46c8:	b2db      	uxtb	r3, r3
    46ca:	f44f 7284 	mov.w	r2, #264	; 0x108
    46ce:	493a      	ldr	r1, [pc, #232]	; (47b8 <_ext_irq_handler+0x11c>)
    46d0:	4618      	mov	r0, r3
    46d2:	4b3a      	ldr	r3, [pc, #232]	; (47bc <_ext_irq_handler+0x120>)
    46d4:	4798      	blx	r3

	while (flags) {
    46d6:	e060      	b.n	479a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    46d8:	683b      	ldr	r3, [r7, #0]
    46da:	4618      	mov	r0, r3
    46dc:	4b38      	ldr	r3, [pc, #224]	; (47c0 <_ext_irq_handler+0x124>)
    46de:	4798      	blx	r3
    46e0:	4603      	mov	r3, r0
    46e2:	b2db      	uxtb	r3, r3
    46e4:	3b01      	subs	r3, #1
    46e6:	b2db      	uxtb	r3, r3
    46e8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    46ea:	e047      	b.n	477c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    46ec:	2300      	movs	r3, #0
    46ee:	71fb      	strb	r3, [r7, #7]
    46f0:	2309      	movs	r3, #9
    46f2:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    46f4:	e024      	b.n	4740 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    46f6:	79ba      	ldrb	r2, [r7, #6]
    46f8:	79fb      	ldrb	r3, [r7, #7]
    46fa:	4413      	add	r3, r2
    46fc:	105b      	asrs	r3, r3, #1
    46fe:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4700:	797b      	ldrb	r3, [r7, #5]
    4702:	4a30      	ldr	r2, [pc, #192]	; (47c4 <_ext_irq_handler+0x128>)
    4704:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4708:	461a      	mov	r2, r3
    470a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    470e:	429a      	cmp	r2, r3
    4710:	d106      	bne.n	4720 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4712:	797b      	ldrb	r3, [r7, #5]
    4714:	4a2b      	ldr	r2, [pc, #172]	; (47c4 <_ext_irq_handler+0x128>)
    4716:	00db      	lsls	r3, r3, #3
    4718:	4413      	add	r3, r2
    471a:	685b      	ldr	r3, [r3, #4]
    471c:	60bb      	str	r3, [r7, #8]
					break;
    471e:	e013      	b.n	4748 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4720:	797b      	ldrb	r3, [r7, #5]
    4722:	4a28      	ldr	r2, [pc, #160]	; (47c4 <_ext_irq_handler+0x128>)
    4724:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4728:	461a      	mov	r2, r3
    472a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    472e:	429a      	cmp	r2, r3
    4730:	da03      	bge.n	473a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4732:	797b      	ldrb	r3, [r7, #5]
    4734:	3301      	adds	r3, #1
    4736:	71fb      	strb	r3, [r7, #7]
    4738:	e002      	b.n	4740 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    473a:	797b      	ldrb	r3, [r7, #5]
    473c:	3b01      	subs	r3, #1
    473e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4740:	79ba      	ldrb	r2, [r7, #6]
    4742:	79fb      	ldrb	r3, [r7, #7]
    4744:	429a      	cmp	r2, r3
    4746:	d2d6      	bcs.n	46f6 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4748:	68bb      	ldr	r3, [r7, #8]
    474a:	f1b3 3fff 	cmp.w	r3, #4294967295
    474e:	d003      	beq.n	4758 <_ext_irq_handler+0xbc>
				callback(pin);
    4750:	4b18      	ldr	r3, [pc, #96]	; (47b4 <_ext_irq_handler+0x118>)
    4752:	681b      	ldr	r3, [r3, #0]
    4754:	68b8      	ldr	r0, [r7, #8]
    4756:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4758:	f997 300f 	ldrsb.w	r3, [r7, #15]
    475c:	2201      	movs	r2, #1
    475e:	fa02 f303 	lsl.w	r3, r2, r3
    4762:	43da      	mvns	r2, r3
    4764:	683b      	ldr	r3, [r7, #0]
    4766:	4013      	ands	r3, r2
    4768:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    476a:	683b      	ldr	r3, [r7, #0]
    476c:	4618      	mov	r0, r3
    476e:	4b14      	ldr	r3, [pc, #80]	; (47c0 <_ext_irq_handler+0x124>)
    4770:	4798      	blx	r3
    4772:	4603      	mov	r3, r0
    4774:	b2db      	uxtb	r3, r3
    4776:	3b01      	subs	r3, #1
    4778:	b2db      	uxtb	r3, r3
    477a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    477c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4780:	f1b3 3fff 	cmp.w	r3, #4294967295
    4784:	d1b2      	bne.n	46ec <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4786:	4808      	ldr	r0, [pc, #32]	; (47a8 <_ext_irq_handler+0x10c>)
    4788:	4b08      	ldr	r3, [pc, #32]	; (47ac <_ext_irq_handler+0x110>)
    478a:	4798      	blx	r3
    478c:	4603      	mov	r3, r0
    478e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4790:	683b      	ldr	r3, [r7, #0]
    4792:	4619      	mov	r1, r3
    4794:	4804      	ldr	r0, [pc, #16]	; (47a8 <_ext_irq_handler+0x10c>)
    4796:	4b06      	ldr	r3, [pc, #24]	; (47b0 <_ext_irq_handler+0x114>)
    4798:	4798      	blx	r3
	while (flags) {
    479a:	683b      	ldr	r3, [r7, #0]
    479c:	2b00      	cmp	r3, #0
    479e:	d19b      	bne.n	46d8 <_ext_irq_handler+0x3c>
	}
}
    47a0:	bf00      	nop
    47a2:	3710      	adds	r7, #16
    47a4:	46bd      	mov	sp, r7
    47a6:	bd80      	pop	{r7, pc}
    47a8:	40002800 	.word	0x40002800
    47ac:	00004251 	.word	0x00004251
    47b0:	00004269 	.word	0x00004269
    47b4:	20000bf8 	.word	0x20000bf8
    47b8:	00010870 	.word	0x00010870
    47bc:	00003825 	.word	0x00003825
    47c0:	00010169 	.word	0x00010169
    47c4:	00010828 	.word	0x00010828

000047c8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    47c8:	b580      	push	{r7, lr}
    47ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47cc:	4b01      	ldr	r3, [pc, #4]	; (47d4 <EIC_0_Handler+0xc>)
    47ce:	4798      	blx	r3
} /**
    47d0:	bf00      	nop
    47d2:	bd80      	pop	{r7, pc}
    47d4:	0000469d 	.word	0x0000469d

000047d8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    47d8:	b580      	push	{r7, lr}
    47da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47dc:	4b01      	ldr	r3, [pc, #4]	; (47e4 <EIC_1_Handler+0xc>)
    47de:	4798      	blx	r3
} /**
    47e0:	bf00      	nop
    47e2:	bd80      	pop	{r7, pc}
    47e4:	0000469d 	.word	0x0000469d

000047e8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    47e8:	b580      	push	{r7, lr}
    47ea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47ec:	4b01      	ldr	r3, [pc, #4]	; (47f4 <EIC_3_Handler+0xc>)
    47ee:	4798      	blx	r3
} /**
    47f0:	bf00      	nop
    47f2:	bd80      	pop	{r7, pc}
    47f4:	0000469d 	.word	0x0000469d

000047f8 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    47f8:	b580      	push	{r7, lr}
    47fa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47fc:	4b01      	ldr	r3, [pc, #4]	; (4804 <EIC_4_Handler+0xc>)
    47fe:	4798      	blx	r3
} /**
    4800:	bf00      	nop
    4802:	bd80      	pop	{r7, pc}
    4804:	0000469d 	.word	0x0000469d

00004808 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4808:	b580      	push	{r7, lr}
    480a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    480c:	4b01      	ldr	r3, [pc, #4]	; (4814 <EIC_5_Handler+0xc>)
    480e:	4798      	blx	r3
} /**
    4810:	bf00      	nop
    4812:	bd80      	pop	{r7, pc}
    4814:	0000469d 	.word	0x0000469d

00004818 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4818:	b580      	push	{r7, lr}
    481a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    481c:	4b01      	ldr	r3, [pc, #4]	; (4824 <EIC_6_Handler+0xc>)
    481e:	4798      	blx	r3
} /**
    4820:	bf00      	nop
    4822:	bd80      	pop	{r7, pc}
    4824:	0000469d 	.word	0x0000469d

00004828 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4828:	b580      	push	{r7, lr}
    482a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    482c:	4b01      	ldr	r3, [pc, #4]	; (4834 <EIC_7_Handler+0xc>)
    482e:	4798      	blx	r3
} /**
    4830:	bf00      	nop
    4832:	bd80      	pop	{r7, pc}
    4834:	0000469d 	.word	0x0000469d

00004838 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4838:	b580      	push	{r7, lr}
    483a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    483c:	4b01      	ldr	r3, [pc, #4]	; (4844 <EIC_8_Handler+0xc>)
    483e:	4798      	blx	r3
} /**
    4840:	bf00      	nop
    4842:	bd80      	pop	{r7, pc}
    4844:	0000469d 	.word	0x0000469d

00004848 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4848:	b580      	push	{r7, lr}
    484a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    484c:	4b01      	ldr	r3, [pc, #4]	; (4854 <EIC_9_Handler+0xc>)
    484e:	4798      	blx	r3
}
    4850:	bf00      	nop
    4852:	bd80      	pop	{r7, pc}
    4854:	0000469d 	.word	0x0000469d

00004858 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4858:	b480      	push	{r7}
    485a:	b085      	sub	sp, #20
    485c:	af00      	add	r7, sp, #0
    485e:	60f8      	str	r0, [r7, #12]
    4860:	460b      	mov	r3, r1
    4862:	607a      	str	r2, [r7, #4]
    4864:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4866:	7afa      	ldrb	r2, [r7, #11]
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	3248      	adds	r2, #72	; 0x48
    486c:	6879      	ldr	r1, [r7, #4]
    486e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4872:	bf00      	nop
    4874:	3714      	adds	r7, #20
    4876:	46bd      	mov	sp, r7
    4878:	f85d 7b04 	ldr.w	r7, [sp], #4
    487c:	4770      	bx	lr

0000487e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    487e:	b480      	push	{r7}
    4880:	b083      	sub	sp, #12
    4882:	af00      	add	r7, sp, #0
    4884:	6078      	str	r0, [r7, #4]
    4886:	460b      	mov	r3, r1
    4888:	70fb      	strb	r3, [r7, #3]
    488a:	4613      	mov	r3, r2
    488c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    488e:	78fb      	ldrb	r3, [r7, #3]
    4890:	687a      	ldr	r2, [r7, #4]
    4892:	3304      	adds	r3, #4
    4894:	00db      	lsls	r3, r3, #3
    4896:	4413      	add	r3, r2
    4898:	78ba      	ldrb	r2, [r7, #2]
    489a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    489c:	78fb      	ldrb	r3, [r7, #3]
    489e:	78ba      	ldrb	r2, [r7, #2]
    48a0:	43d2      	mvns	r2, r2
    48a2:	b2d1      	uxtb	r1, r2
    48a4:	687a      	ldr	r2, [r7, #4]
    48a6:	3304      	adds	r3, #4
    48a8:	00db      	lsls	r3, r3, #3
    48aa:	4413      	add	r3, r2
    48ac:	460a      	mov	r2, r1
    48ae:	711a      	strb	r2, [r3, #4]
}
    48b0:	bf00      	nop
    48b2:	370c      	adds	r7, #12
    48b4:	46bd      	mov	sp, r7
    48b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ba:	4770      	bx	lr

000048bc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    48bc:	b480      	push	{r7}
    48be:	b085      	sub	sp, #20
    48c0:	af00      	add	r7, sp, #0
    48c2:	60f8      	str	r0, [r7, #12]
    48c4:	460b      	mov	r3, r1
    48c6:	607a      	str	r2, [r7, #4]
    48c8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    48ca:	7afa      	ldrb	r2, [r7, #11]
    48cc:	68fb      	ldr	r3, [r7, #12]
    48ce:	3204      	adds	r2, #4
    48d0:	6879      	ldr	r1, [r7, #4]
    48d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    48d6:	bf00      	nop
    48d8:	3714      	adds	r7, #20
    48da:	46bd      	mov	sp, r7
    48dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e0:	4770      	bx	lr
	...

000048e4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    48e4:	b580      	push	{r7, lr}
    48e6:	b082      	sub	sp, #8
    48e8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    48ea:	2300      	movs	r3, #0
    48ec:	71fb      	strb	r3, [r7, #7]
    48ee:	e00b      	b.n	4908 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    48f0:	79fb      	ldrb	r3, [r7, #7]
    48f2:	4a18      	ldr	r2, [pc, #96]	; (4954 <_event_system_init+0x70>)
    48f4:	5cd3      	ldrb	r3, [r2, r3]
    48f6:	461a      	mov	r2, r3
    48f8:	79fb      	ldrb	r3, [r7, #7]
    48fa:	4619      	mov	r1, r3
    48fc:	4816      	ldr	r0, [pc, #88]	; (4958 <_event_system_init+0x74>)
    48fe:	4b17      	ldr	r3, [pc, #92]	; (495c <_event_system_init+0x78>)
    4900:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4902:	79fb      	ldrb	r3, [r7, #7]
    4904:	3301      	adds	r3, #1
    4906:	71fb      	strb	r3, [r7, #7]
    4908:	79fb      	ldrb	r3, [r7, #7]
    490a:	2b42      	cmp	r3, #66	; 0x42
    490c:	d9f0      	bls.n	48f0 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    490e:	2300      	movs	r3, #0
    4910:	71fb      	strb	r3, [r7, #7]
    4912:	e016      	b.n	4942 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4914:	79fb      	ldrb	r3, [r7, #7]
    4916:	4a12      	ldr	r2, [pc, #72]	; (4960 <_event_system_init+0x7c>)
    4918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    491c:	461a      	mov	r2, r3
    491e:	79fb      	ldrb	r3, [r7, #7]
    4920:	4619      	mov	r1, r3
    4922:	480d      	ldr	r0, [pc, #52]	; (4958 <_event_system_init+0x74>)
    4924:	4b0f      	ldr	r3, [pc, #60]	; (4964 <_event_system_init+0x80>)
    4926:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4928:	79fb      	ldrb	r3, [r7, #7]
    492a:	4a0f      	ldr	r2, [pc, #60]	; (4968 <_event_system_init+0x84>)
    492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4930:	b2da      	uxtb	r2, r3
    4932:	79fb      	ldrb	r3, [r7, #7]
    4934:	4619      	mov	r1, r3
    4936:	4808      	ldr	r0, [pc, #32]	; (4958 <_event_system_init+0x74>)
    4938:	4b0c      	ldr	r3, [pc, #48]	; (496c <_event_system_init+0x88>)
    493a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    493c:	79fb      	ldrb	r3, [r7, #7]
    493e:	3301      	adds	r3, #1
    4940:	71fb      	strb	r3, [r7, #7]
    4942:	79fb      	ldrb	r3, [r7, #7]
    4944:	2b1f      	cmp	r3, #31
    4946:	d9e5      	bls.n	4914 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4948:	2300      	movs	r3, #0
}
    494a:	4618      	mov	r0, r3
    494c:	3708      	adds	r7, #8
    494e:	46bd      	mov	sp, r7
    4950:	bd80      	pop	{r7, pc}
    4952:	bf00      	nop
    4954:	00010888 	.word	0x00010888
    4958:	4100e000 	.word	0x4100e000
    495c:	00004859 	.word	0x00004859
    4960:	000108cc 	.word	0x000108cc
    4964:	000048bd 	.word	0x000048bd
    4968:	0001090c 	.word	0x0001090c
    496c:	0000487f 	.word	0x0000487f

00004970 <hri_gclk_wait_for_sync>:
{
    4970:	b480      	push	{r7}
    4972:	b083      	sub	sp, #12
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
    4978:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    497a:	bf00      	nop
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	685a      	ldr	r2, [r3, #4]
    4980:	683b      	ldr	r3, [r7, #0]
    4982:	4013      	ands	r3, r2
    4984:	2b00      	cmp	r3, #0
    4986:	d1f9      	bne.n	497c <hri_gclk_wait_for_sync+0xc>
}
    4988:	bf00      	nop
    498a:	370c      	adds	r7, #12
    498c:	46bd      	mov	sp, r7
    498e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4992:	4770      	bx	lr

00004994 <hri_gclk_write_GENCTRL_reg>:
{
    4994:	b580      	push	{r7, lr}
    4996:	b084      	sub	sp, #16
    4998:	af00      	add	r7, sp, #0
    499a:	60f8      	str	r0, [r7, #12]
    499c:	460b      	mov	r3, r1
    499e:	607a      	str	r2, [r7, #4]
    49a0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    49a2:	7afa      	ldrb	r2, [r7, #11]
    49a4:	68fb      	ldr	r3, [r7, #12]
    49a6:	3208      	adds	r2, #8
    49a8:	6879      	ldr	r1, [r7, #4]
    49aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    49ae:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    49b2:	68f8      	ldr	r0, [r7, #12]
    49b4:	4b02      	ldr	r3, [pc, #8]	; (49c0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    49b6:	4798      	blx	r3
}
    49b8:	bf00      	nop
    49ba:	3710      	adds	r7, #16
    49bc:	46bd      	mov	sp, r7
    49be:	bd80      	pop	{r7, pc}
    49c0:	00004971 	.word	0x00004971

000049c4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    49c4:	b580      	push	{r7, lr}
    49c6:	b082      	sub	sp, #8
    49c8:	af00      	add	r7, sp, #0
    49ca:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	f003 0301 	and.w	r3, r3, #1
    49d2:	2b00      	cmp	r3, #0
    49d4:	d004      	beq.n	49e0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    49d6:	4a3b      	ldr	r2, [pc, #236]	; (4ac4 <_gclk_init_generators_by_fref+0x100>)
    49d8:	2100      	movs	r1, #0
    49da:	483b      	ldr	r0, [pc, #236]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    49dc:	4b3b      	ldr	r3, [pc, #236]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    49de:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	f003 0302 	and.w	r3, r3, #2
    49e6:	2b00      	cmp	r3, #0
    49e8:	d004      	beq.n	49f4 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    49ea:	4a39      	ldr	r2, [pc, #228]	; (4ad0 <_gclk_init_generators_by_fref+0x10c>)
    49ec:	2101      	movs	r1, #1
    49ee:	4836      	ldr	r0, [pc, #216]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    49f0:	4b36      	ldr	r3, [pc, #216]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    49f2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	f003 0304 	and.w	r3, r3, #4
    49fa:	2b00      	cmp	r3, #0
    49fc:	d004      	beq.n	4a08 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    49fe:	4a35      	ldr	r2, [pc, #212]	; (4ad4 <_gclk_init_generators_by_fref+0x110>)
    4a00:	2102      	movs	r1, #2
    4a02:	4831      	ldr	r0, [pc, #196]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4a04:	4b31      	ldr	r3, [pc, #196]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4a06:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	f003 0308 	and.w	r3, r3, #8
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d004      	beq.n	4a1c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4a12:	4a31      	ldr	r2, [pc, #196]	; (4ad8 <_gclk_init_generators_by_fref+0x114>)
    4a14:	2103      	movs	r1, #3
    4a16:	482c      	ldr	r0, [pc, #176]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4a18:	4b2c      	ldr	r3, [pc, #176]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4a1a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	f003 0310 	and.w	r3, r3, #16
    4a22:	2b00      	cmp	r3, #0
    4a24:	d004      	beq.n	4a30 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4a26:	4a2d      	ldr	r2, [pc, #180]	; (4adc <_gclk_init_generators_by_fref+0x118>)
    4a28:	2104      	movs	r1, #4
    4a2a:	4827      	ldr	r0, [pc, #156]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4a2c:	4b27      	ldr	r3, [pc, #156]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4a2e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	f003 0320 	and.w	r3, r3, #32
    4a36:	2b00      	cmp	r3, #0
    4a38:	d004      	beq.n	4a44 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4a3a:	4a29      	ldr	r2, [pc, #164]	; (4ae0 <_gclk_init_generators_by_fref+0x11c>)
    4a3c:	2105      	movs	r1, #5
    4a3e:	4822      	ldr	r0, [pc, #136]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4a40:	4b22      	ldr	r3, [pc, #136]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4a42:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4a44:	687b      	ldr	r3, [r7, #4]
    4a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d004      	beq.n	4a58 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4a4e:	4a25      	ldr	r2, [pc, #148]	; (4ae4 <_gclk_init_generators_by_fref+0x120>)
    4a50:	2106      	movs	r1, #6
    4a52:	481d      	ldr	r0, [pc, #116]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4a54:	4b1d      	ldr	r3, [pc, #116]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4a56:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4a58:	687b      	ldr	r3, [r7, #4]
    4a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d004      	beq.n	4a6c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4a62:	4a21      	ldr	r2, [pc, #132]	; (4ae8 <_gclk_init_generators_by_fref+0x124>)
    4a64:	2107      	movs	r1, #7
    4a66:	4818      	ldr	r0, [pc, #96]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4a68:	4b18      	ldr	r3, [pc, #96]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4a6a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4a6c:	687b      	ldr	r3, [r7, #4]
    4a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a72:	2b00      	cmp	r3, #0
    4a74:	d004      	beq.n	4a80 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4a76:	4a1d      	ldr	r2, [pc, #116]	; (4aec <_gclk_init_generators_by_fref+0x128>)
    4a78:	2108      	movs	r1, #8
    4a7a:	4813      	ldr	r0, [pc, #76]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4a7c:	4b13      	ldr	r3, [pc, #76]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4a7e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4a86:	2b00      	cmp	r3, #0
    4a88:	d004      	beq.n	4a94 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4a8a:	4a19      	ldr	r2, [pc, #100]	; (4af0 <_gclk_init_generators_by_fref+0x12c>)
    4a8c:	2109      	movs	r1, #9
    4a8e:	480e      	ldr	r0, [pc, #56]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4a90:	4b0e      	ldr	r3, [pc, #56]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4a92:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d004      	beq.n	4aa8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4a9e:	4a15      	ldr	r2, [pc, #84]	; (4af4 <_gclk_init_generators_by_fref+0x130>)
    4aa0:	210a      	movs	r1, #10
    4aa2:	4809      	ldr	r0, [pc, #36]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4aa4:	4b09      	ldr	r3, [pc, #36]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4aa6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d004      	beq.n	4abc <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4ab2:	4a11      	ldr	r2, [pc, #68]	; (4af8 <_gclk_init_generators_by_fref+0x134>)
    4ab4:	210b      	movs	r1, #11
    4ab6:	4804      	ldr	r0, [pc, #16]	; (4ac8 <_gclk_init_generators_by_fref+0x104>)
    4ab8:	4b04      	ldr	r3, [pc, #16]	; (4acc <_gclk_init_generators_by_fref+0x108>)
    4aba:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4abc:	bf00      	nop
    4abe:	3708      	adds	r7, #8
    4ac0:	46bd      	mov	sp, r7
    4ac2:	bd80      	pop	{r7, pc}
    4ac4:	00010107 	.word	0x00010107
    4ac8:	40001c00 	.word	0x40001c00
    4acc:	00004995 	.word	0x00004995
    4ad0:	00010907 	.word	0x00010907
    4ad4:	00010906 	.word	0x00010906
    4ad8:	00020908 	.word	0x00020908
    4adc:	00010901 	.word	0x00010901
    4ae0:	00062901 	.word	0x00062901
    4ae4:	000c2901 	.word	0x000c2901
    4ae8:	00082908 	.word	0x00082908
    4aec:	00032901 	.word	0x00032901
    4af0:	00011908 	.word	0x00011908
    4af4:	00010905 	.word	0x00010905
    4af8:	00041905 	.word	0x00041905

00004afc <hri_mclk_write_CPUDIV_reg>:
{
    4afc:	b480      	push	{r7}
    4afe:	b083      	sub	sp, #12
    4b00:	af00      	add	r7, sp, #0
    4b02:	6078      	str	r0, [r7, #4]
    4b04:	460b      	mov	r3, r1
    4b06:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	78fa      	ldrb	r2, [r7, #3]
    4b0c:	715a      	strb	r2, [r3, #5]
}
    4b0e:	bf00      	nop
    4b10:	370c      	adds	r7, #12
    4b12:	46bd      	mov	sp, r7
    4b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b18:	4770      	bx	lr
	...

00004b1c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4b1c:	b580      	push	{r7, lr}
    4b1e:	b082      	sub	sp, #8
    4b20:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4b22:	4b05      	ldr	r3, [pc, #20]	; (4b38 <_mclk_init+0x1c>)
    4b24:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4b26:	2101      	movs	r1, #1
    4b28:	6878      	ldr	r0, [r7, #4]
    4b2a:	4b04      	ldr	r3, [pc, #16]	; (4b3c <_mclk_init+0x20>)
    4b2c:	4798      	blx	r3
}
    4b2e:	bf00      	nop
    4b30:	3708      	adds	r7, #8
    4b32:	46bd      	mov	sp, r7
    4b34:	bd80      	pop	{r7, pc}
    4b36:	bf00      	nop
    4b38:	40000800 	.word	0x40000800
    4b3c:	00004afd 	.word	0x00004afd

00004b40 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4b40:	b480      	push	{r7}
    4b42:	b083      	sub	sp, #12
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
    4b48:	460b      	mov	r3, r1
    4b4a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4b4c:	687b      	ldr	r3, [r7, #4]
    4b4e:	78fa      	ldrb	r2, [r7, #3]
    4b50:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b52:	bf00      	nop
    4b54:	370c      	adds	r7, #12
    4b56:	46bd      	mov	sp, r7
    4b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b5c:	4770      	bx	lr

00004b5e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4b5e:	b480      	push	{r7}
    4b60:	b083      	sub	sp, #12
    4b62:	af00      	add	r7, sp, #0
    4b64:	6078      	str	r0, [r7, #4]
    4b66:	460b      	mov	r3, r1
    4b68:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	887a      	ldrh	r2, [r7, #2]
    4b6e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b70:	bf00      	nop
    4b72:	370c      	adds	r7, #12
    4b74:	46bd      	mov	sp, r7
    4b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b7a:	4770      	bx	lr

00004b7c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4b7c:	b480      	push	{r7}
    4b7e:	b083      	sub	sp, #12
    4b80:	af00      	add	r7, sp, #0
    4b82:	6078      	str	r0, [r7, #4]
    4b84:	460b      	mov	r3, r1
    4b86:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	78fa      	ldrb	r2, [r7, #3]
    4b8c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b8e:	bf00      	nop
    4b90:	370c      	adds	r7, #12
    4b92:	46bd      	mov	sp, r7
    4b94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b98:	4770      	bx	lr

00004b9a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4b9a:	b480      	push	{r7}
    4b9c:	b083      	sub	sp, #12
    4b9e:	af00      	add	r7, sp, #0
    4ba0:	6078      	str	r0, [r7, #4]
    4ba2:	460b      	mov	r3, r1
    4ba4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4ba6:	687b      	ldr	r3, [r7, #4]
    4ba8:	78fa      	ldrb	r2, [r7, #3]
    4baa:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4bac:	bf00      	nop
    4bae:	370c      	adds	r7, #12
    4bb0:	46bd      	mov	sp, r7
    4bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bb6:	4770      	bx	lr

00004bb8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4bb8:	b480      	push	{r7}
    4bba:	b085      	sub	sp, #20
    4bbc:	af00      	add	r7, sp, #0
    4bbe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	69db      	ldr	r3, [r3, #28]
    4bc4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4bc6:	68fb      	ldr	r3, [r7, #12]
    4bc8:	0a1b      	lsrs	r3, r3, #8
    4bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4bce:	60fb      	str	r3, [r7, #12]
	return tmp;
    4bd0:	68fb      	ldr	r3, [r7, #12]
}
    4bd2:	4618      	mov	r0, r3
    4bd4:	3714      	adds	r7, #20
    4bd6:	46bd      	mov	sp, r7
    4bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bdc:	4770      	bx	lr

00004bde <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4bde:	b480      	push	{r7}
    4be0:	b083      	sub	sp, #12
    4be2:	af00      	add	r7, sp, #0
    4be4:	6078      	str	r0, [r7, #4]
    4be6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4be8:	687b      	ldr	r3, [r7, #4]
    4bea:	683a      	ldr	r2, [r7, #0]
    4bec:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4bee:	bf00      	nop
    4bf0:	370c      	adds	r7, #12
    4bf2:	46bd      	mov	sp, r7
    4bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bf8:	4770      	bx	lr
	...

00004bfc <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4bfc:	b580      	push	{r7, lr}
    4bfe:	b082      	sub	sp, #8
    4c00:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4c02:	4b13      	ldr	r3, [pc, #76]	; (4c50 <_osc32kctrl_init_sources+0x54>)
    4c04:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4c06:	2300      	movs	r3, #0
    4c08:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4c0a:	f242 018e 	movw	r1, #8334	; 0x208e
    4c0e:	6878      	ldr	r0, [r7, #4]
    4c10:	4b10      	ldr	r3, [pc, #64]	; (4c54 <_osc32kctrl_init_sources+0x58>)
    4c12:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4c14:	2100      	movs	r1, #0
    4c16:	6878      	ldr	r0, [r7, #4]
    4c18:	4b0f      	ldr	r3, [pc, #60]	; (4c58 <_osc32kctrl_init_sources+0x5c>)
    4c1a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4c1c:	2100      	movs	r1, #0
    4c1e:	6878      	ldr	r0, [r7, #4]
    4c20:	4b0e      	ldr	r3, [pc, #56]	; (4c5c <_osc32kctrl_init_sources+0x60>)
    4c22:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4c24:	6878      	ldr	r0, [r7, #4]
    4c26:	4b0e      	ldr	r3, [pc, #56]	; (4c60 <_osc32kctrl_init_sources+0x64>)
    4c28:	4798      	blx	r3
    4c2a:	4603      	mov	r3, r0
    4c2c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4c2e:	887b      	ldrh	r3, [r7, #2]
    4c30:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4c32:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4c36:	4619      	mov	r1, r3
    4c38:	6878      	ldr	r0, [r7, #4]
    4c3a:	4b0a      	ldr	r3, [pc, #40]	; (4c64 <_osc32kctrl_init_sources+0x68>)
    4c3c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4c3e:	2100      	movs	r1, #0
    4c40:	6878      	ldr	r0, [r7, #4]
    4c42:	4b09      	ldr	r3, [pc, #36]	; (4c68 <_osc32kctrl_init_sources+0x6c>)
    4c44:	4798      	blx	r3
	(void)calib;
}
    4c46:	bf00      	nop
    4c48:	3708      	adds	r7, #8
    4c4a:	46bd      	mov	sp, r7
    4c4c:	bd80      	pop	{r7, pc}
    4c4e:	bf00      	nop
    4c50:	40001400 	.word	0x40001400
    4c54:	00004b5f 	.word	0x00004b5f
    4c58:	00004b7d 	.word	0x00004b7d
    4c5c:	00004b9b 	.word	0x00004b9b
    4c60:	00004bb9 	.word	0x00004bb9
    4c64:	00004bdf 	.word	0x00004bdf
    4c68:	00004b41 	.word	0x00004b41

00004c6c <hri_gclk_wait_for_sync>:
{
    4c6c:	b480      	push	{r7}
    4c6e:	b083      	sub	sp, #12
    4c70:	af00      	add	r7, sp, #0
    4c72:	6078      	str	r0, [r7, #4]
    4c74:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4c76:	bf00      	nop
    4c78:	687b      	ldr	r3, [r7, #4]
    4c7a:	685a      	ldr	r2, [r3, #4]
    4c7c:	683b      	ldr	r3, [r7, #0]
    4c7e:	4013      	ands	r3, r2
    4c80:	2b00      	cmp	r3, #0
    4c82:	d1f9      	bne.n	4c78 <hri_gclk_wait_for_sync+0xc>
}
    4c84:	bf00      	nop
    4c86:	370c      	adds	r7, #12
    4c88:	46bd      	mov	sp, r7
    4c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c8e:	4770      	bx	lr

00004c90 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4c90:	b480      	push	{r7}
    4c92:	b083      	sub	sp, #12
    4c94:	af00      	add	r7, sp, #0
    4c96:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	685b      	ldr	r3, [r3, #4]
    4c9c:	089b      	lsrs	r3, r3, #2
    4c9e:	f003 0301 	and.w	r3, r3, #1
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	bf14      	ite	ne
    4ca6:	2301      	movne	r3, #1
    4ca8:	2300      	moveq	r3, #0
    4caa:	b2db      	uxtb	r3, r3
}
    4cac:	4618      	mov	r0, r3
    4cae:	370c      	adds	r7, #12
    4cb0:	46bd      	mov	sp, r7
    4cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cb6:	4770      	bx	lr

00004cb8 <hri_gclk_read_SYNCBUSY_reg>:
{
    4cb8:	b480      	push	{r7}
    4cba:	b083      	sub	sp, #12
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	685b      	ldr	r3, [r3, #4]
}
    4cc4:	4618      	mov	r0, r3
    4cc6:	370c      	adds	r7, #12
    4cc8:	46bd      	mov	sp, r7
    4cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cce:	4770      	bx	lr

00004cd0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4cd0:	b580      	push	{r7, lr}
    4cd2:	b086      	sub	sp, #24
    4cd4:	af00      	add	r7, sp, #0
    4cd6:	60f8      	str	r0, [r7, #12]
    4cd8:	460b      	mov	r3, r1
    4cda:	607a      	str	r2, [r7, #4]
    4cdc:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4cde:	7afa      	ldrb	r2, [r7, #11]
    4ce0:	68fb      	ldr	r3, [r7, #12]
    4ce2:	3208      	adds	r2, #8
    4ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4ce8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4cea:	697b      	ldr	r3, [r7, #20]
    4cec:	f023 030f 	bic.w	r3, r3, #15
    4cf0:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	f003 030f 	and.w	r3, r3, #15
    4cf8:	697a      	ldr	r2, [r7, #20]
    4cfa:	4313      	orrs	r3, r2
    4cfc:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4cfe:	7afa      	ldrb	r2, [r7, #11]
    4d00:	68fb      	ldr	r3, [r7, #12]
    4d02:	3208      	adds	r2, #8
    4d04:	6979      	ldr	r1, [r7, #20]
    4d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4d0a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4d0e:	68f8      	ldr	r0, [r7, #12]
    4d10:	4b02      	ldr	r3, [pc, #8]	; (4d1c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4d12:	4798      	blx	r3
}
    4d14:	bf00      	nop
    4d16:	3718      	adds	r7, #24
    4d18:	46bd      	mov	sp, r7
    4d1a:	bd80      	pop	{r7, pc}
    4d1c:	00004c6d 	.word	0x00004c6d

00004d20 <hri_gclk_write_PCHCTRL_reg>:
{
    4d20:	b480      	push	{r7}
    4d22:	b085      	sub	sp, #20
    4d24:	af00      	add	r7, sp, #0
    4d26:	60f8      	str	r0, [r7, #12]
    4d28:	460b      	mov	r3, r1
    4d2a:	607a      	str	r2, [r7, #4]
    4d2c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4d2e:	7afa      	ldrb	r2, [r7, #11]
    4d30:	68fb      	ldr	r3, [r7, #12]
    4d32:	3220      	adds	r2, #32
    4d34:	6879      	ldr	r1, [r7, #4]
    4d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4d3a:	bf00      	nop
    4d3c:	3714      	adds	r7, #20
    4d3e:	46bd      	mov	sp, r7
    4d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d44:	4770      	bx	lr

00004d46 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4d46:	b480      	push	{r7}
    4d48:	b085      	sub	sp, #20
    4d4a:	af00      	add	r7, sp, #0
    4d4c:	60f8      	str	r0, [r7, #12]
    4d4e:	460b      	mov	r3, r1
    4d50:	607a      	str	r2, [r7, #4]
    4d52:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4d54:	bf00      	nop
    4d56:	7afa      	ldrb	r2, [r7, #11]
    4d58:	68f9      	ldr	r1, [r7, #12]
    4d5a:	4613      	mov	r3, r2
    4d5c:	009b      	lsls	r3, r3, #2
    4d5e:	4413      	add	r3, r2
    4d60:	009b      	lsls	r3, r3, #2
    4d62:	440b      	add	r3, r1
    4d64:	333c      	adds	r3, #60	; 0x3c
    4d66:	681a      	ldr	r2, [r3, #0]
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	4013      	ands	r3, r2
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d1f2      	bne.n	4d56 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4d70:	bf00      	nop
    4d72:	3714      	adds	r7, #20
    4d74:	46bd      	mov	sp, r7
    4d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d7a:	4770      	bx	lr

00004d7c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4d7c:	b480      	push	{r7}
    4d7e:	b083      	sub	sp, #12
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]
    4d84:	460b      	mov	r3, r1
    4d86:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4d88:	78fa      	ldrb	r2, [r7, #3]
    4d8a:	6879      	ldr	r1, [r7, #4]
    4d8c:	4613      	mov	r3, r2
    4d8e:	009b      	lsls	r3, r3, #2
    4d90:	4413      	add	r3, r2
    4d92:	009b      	lsls	r3, r3, #2
    4d94:	440b      	add	r3, r1
    4d96:	3340      	adds	r3, #64	; 0x40
    4d98:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4d9a:	f003 0301 	and.w	r3, r3, #1
    4d9e:	2b00      	cmp	r3, #0
    4da0:	bf14      	ite	ne
    4da2:	2301      	movne	r3, #1
    4da4:	2300      	moveq	r3, #0
    4da6:	b2db      	uxtb	r3, r3
}
    4da8:	4618      	mov	r0, r3
    4daa:	370c      	adds	r7, #12
    4dac:	46bd      	mov	sp, r7
    4dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db2:	4770      	bx	lr

00004db4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4db4:	b480      	push	{r7}
    4db6:	b083      	sub	sp, #12
    4db8:	af00      	add	r7, sp, #0
    4dba:	6078      	str	r0, [r7, #4]
    4dbc:	460b      	mov	r3, r1
    4dbe:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4dc0:	78fa      	ldrb	r2, [r7, #3]
    4dc2:	6879      	ldr	r1, [r7, #4]
    4dc4:	4613      	mov	r3, r2
    4dc6:	009b      	lsls	r3, r3, #2
    4dc8:	4413      	add	r3, r2
    4dca:	009b      	lsls	r3, r3, #2
    4dcc:	440b      	add	r3, r1
    4dce:	3340      	adds	r3, #64	; 0x40
    4dd0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4dd2:	085b      	lsrs	r3, r3, #1
    4dd4:	f003 0301 	and.w	r3, r3, #1
    4dd8:	2b00      	cmp	r3, #0
    4dda:	bf14      	ite	ne
    4ddc:	2301      	movne	r3, #1
    4dde:	2300      	moveq	r3, #0
    4de0:	b2db      	uxtb	r3, r3
}
    4de2:	4618      	mov	r0, r3
    4de4:	370c      	adds	r7, #12
    4de6:	46bd      	mov	sp, r7
    4de8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dec:	4770      	bx	lr
	...

00004df0 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4df0:	b580      	push	{r7, lr}
    4df2:	b082      	sub	sp, #8
    4df4:	af00      	add	r7, sp, #0
    4df6:	6078      	str	r0, [r7, #4]
    4df8:	460b      	mov	r3, r1
    4dfa:	70fb      	strb	r3, [r7, #3]
    4dfc:	4613      	mov	r3, r2
    4dfe:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4e00:	78fa      	ldrb	r2, [r7, #3]
    4e02:	6879      	ldr	r1, [r7, #4]
    4e04:	4613      	mov	r3, r2
    4e06:	009b      	lsls	r3, r3, #2
    4e08:	4413      	add	r3, r2
    4e0a:	009b      	lsls	r3, r3, #2
    4e0c:	440b      	add	r3, r1
    4e0e:	3330      	adds	r3, #48	; 0x30
    4e10:	78ba      	ldrb	r2, [r7, #2]
    4e12:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4e14:	78fb      	ldrb	r3, [r7, #3]
    4e16:	2202      	movs	r2, #2
    4e18:	4619      	mov	r1, r3
    4e1a:	6878      	ldr	r0, [r7, #4]
    4e1c:	4b02      	ldr	r3, [pc, #8]	; (4e28 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4e1e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e20:	bf00      	nop
    4e22:	3708      	adds	r7, #8
    4e24:	46bd      	mov	sp, r7
    4e26:	bd80      	pop	{r7, pc}
    4e28:	00004d47 	.word	0x00004d47

00004e2c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b084      	sub	sp, #16
    4e30:	af00      	add	r7, sp, #0
    4e32:	60f8      	str	r0, [r7, #12]
    4e34:	460b      	mov	r3, r1
    4e36:	607a      	str	r2, [r7, #4]
    4e38:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4e3a:	7afa      	ldrb	r2, [r7, #11]
    4e3c:	68f9      	ldr	r1, [r7, #12]
    4e3e:	4613      	mov	r3, r2
    4e40:	009b      	lsls	r3, r3, #2
    4e42:	4413      	add	r3, r2
    4e44:	009b      	lsls	r3, r3, #2
    4e46:	440b      	add	r3, r1
    4e48:	3334      	adds	r3, #52	; 0x34
    4e4a:	687a      	ldr	r2, [r7, #4]
    4e4c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4e4e:	7afb      	ldrb	r3, [r7, #11]
    4e50:	2206      	movs	r2, #6
    4e52:	4619      	mov	r1, r3
    4e54:	68f8      	ldr	r0, [r7, #12]
    4e56:	4b03      	ldr	r3, [pc, #12]	; (4e64 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4e58:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e5a:	bf00      	nop
    4e5c:	3710      	adds	r7, #16
    4e5e:	46bd      	mov	sp, r7
    4e60:	bd80      	pop	{r7, pc}
    4e62:	bf00      	nop
    4e64:	00004d47 	.word	0x00004d47

00004e68 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4e68:	b480      	push	{r7}
    4e6a:	b085      	sub	sp, #20
    4e6c:	af00      	add	r7, sp, #0
    4e6e:	60f8      	str	r0, [r7, #12]
    4e70:	460b      	mov	r3, r1
    4e72:	607a      	str	r2, [r7, #4]
    4e74:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4e76:	7afa      	ldrb	r2, [r7, #11]
    4e78:	68f9      	ldr	r1, [r7, #12]
    4e7a:	4613      	mov	r3, r2
    4e7c:	009b      	lsls	r3, r3, #2
    4e7e:	4413      	add	r3, r2
    4e80:	009b      	lsls	r3, r3, #2
    4e82:	440b      	add	r3, r1
    4e84:	3338      	adds	r3, #56	; 0x38
    4e86:	687a      	ldr	r2, [r7, #4]
    4e88:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e8a:	bf00      	nop
    4e8c:	3714      	adds	r7, #20
    4e8e:	46bd      	mov	sp, r7
    4e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e94:	4770      	bx	lr

00004e96 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4e96:	b480      	push	{r7}
    4e98:	b083      	sub	sp, #12
    4e9a:	af00      	add	r7, sp, #0
    4e9c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	691b      	ldr	r3, [r3, #16]
    4ea2:	085b      	lsrs	r3, r3, #1
    4ea4:	f003 0301 	and.w	r3, r3, #1
    4ea8:	2b00      	cmp	r3, #0
    4eaa:	bf14      	ite	ne
    4eac:	2301      	movne	r3, #1
    4eae:	2300      	moveq	r3, #0
    4eb0:	b2db      	uxtb	r3, r3
}
    4eb2:	4618      	mov	r0, r3
    4eb4:	370c      	adds	r7, #12
    4eb6:	46bd      	mov	sp, r7
    4eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ebc:	4770      	bx	lr

00004ebe <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4ebe:	b480      	push	{r7}
    4ec0:	b083      	sub	sp, #12
    4ec2:	af00      	add	r7, sp, #0
    4ec4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4ec6:	687b      	ldr	r3, [r7, #4]
    4ec8:	691b      	ldr	r3, [r3, #16]
    4eca:	0a1b      	lsrs	r3, r3, #8
    4ecc:	f003 0301 	and.w	r3, r3, #1
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	bf14      	ite	ne
    4ed4:	2301      	movne	r3, #1
    4ed6:	2300      	moveq	r3, #0
    4ed8:	b2db      	uxtb	r3, r3
}
    4eda:	4618      	mov	r0, r3
    4edc:	370c      	adds	r7, #12
    4ede:	46bd      	mov	sp, r7
    4ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ee4:	4770      	bx	lr

00004ee6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4ee6:	b480      	push	{r7}
    4ee8:	b085      	sub	sp, #20
    4eea:	af00      	add	r7, sp, #0
    4eec:	6078      	str	r0, [r7, #4]
    4eee:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	691b      	ldr	r3, [r3, #16]
    4ef4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4ef6:	68fa      	ldr	r2, [r7, #12]
    4ef8:	683b      	ldr	r3, [r7, #0]
    4efa:	4013      	ands	r3, r2
    4efc:	60fb      	str	r3, [r7, #12]
	return tmp;
    4efe:	68fb      	ldr	r3, [r7, #12]
}
    4f00:	4618      	mov	r0, r3
    4f02:	3714      	adds	r7, #20
    4f04:	46bd      	mov	sp, r7
    4f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f0a:	4770      	bx	lr

00004f0c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4f0c:	b480      	push	{r7}
    4f0e:	b085      	sub	sp, #20
    4f10:	af00      	add	r7, sp, #0
    4f12:	60f8      	str	r0, [r7, #12]
    4f14:	460b      	mov	r3, r1
    4f16:	607a      	str	r2, [r7, #4]
    4f18:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4f1a:	7afb      	ldrb	r3, [r7, #11]
    4f1c:	68fa      	ldr	r2, [r7, #12]
    4f1e:	3304      	adds	r3, #4
    4f20:	009b      	lsls	r3, r3, #2
    4f22:	4413      	add	r3, r2
    4f24:	687a      	ldr	r2, [r7, #4]
    4f26:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f28:	bf00      	nop
    4f2a:	3714      	adds	r7, #20
    4f2c:	46bd      	mov	sp, r7
    4f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f32:	4770      	bx	lr

00004f34 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4f34:	b480      	push	{r7}
    4f36:	b083      	sub	sp, #12
    4f38:	af00      	add	r7, sp, #0
    4f3a:	6078      	str	r0, [r7, #4]
    4f3c:	460b      	mov	r3, r1
    4f3e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	78fa      	ldrb	r2, [r7, #3]
    4f44:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f46:	bf00      	nop
    4f48:	370c      	adds	r7, #12
    4f4a:	46bd      	mov	sp, r7
    4f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f50:	4770      	bx	lr

00004f52 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4f52:	b480      	push	{r7}
    4f54:	b085      	sub	sp, #20
    4f56:	af00      	add	r7, sp, #0
    4f58:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
    4f60:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4f62:	7bfb      	ldrb	r3, [r7, #15]
    4f64:	f003 0301 	and.w	r3, r3, #1
    4f68:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f6a:	7bfb      	ldrb	r3, [r7, #15]
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	bf14      	ite	ne
    4f70:	2301      	movne	r3, #1
    4f72:	2300      	moveq	r3, #0
    4f74:	b2db      	uxtb	r3, r3
}
    4f76:	4618      	mov	r0, r3
    4f78:	3714      	adds	r7, #20
    4f7a:	46bd      	mov	sp, r7
    4f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f80:	4770      	bx	lr

00004f82 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4f82:	b480      	push	{r7}
    4f84:	b083      	sub	sp, #12
    4f86:	af00      	add	r7, sp, #0
    4f88:	6078      	str	r0, [r7, #4]
    4f8a:	460b      	mov	r3, r1
    4f8c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	78fa      	ldrb	r2, [r7, #3]
    4f92:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f96:	bf00      	nop
    4f98:	370c      	adds	r7, #12
    4f9a:	46bd      	mov	sp, r7
    4f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa0:	4770      	bx	lr

00004fa2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4fa2:	b480      	push	{r7}
    4fa4:	b083      	sub	sp, #12
    4fa6:	af00      	add	r7, sp, #0
    4fa8:	6078      	str	r0, [r7, #4]
    4faa:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4fac:	687b      	ldr	r3, [r7, #4]
    4fae:	683a      	ldr	r2, [r7, #0]
    4fb0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4fb2:	bf00      	nop
    4fb4:	370c      	adds	r7, #12
    4fb6:	46bd      	mov	sp, r7
    4fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fbc:	4770      	bx	lr

00004fbe <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4fbe:	b480      	push	{r7}
    4fc0:	b083      	sub	sp, #12
    4fc2:	af00      	add	r7, sp, #0
    4fc4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4fc6:	687b      	ldr	r3, [r7, #4]
    4fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4fca:	4618      	mov	r0, r3
    4fcc:	370c      	adds	r7, #12
    4fce:	46bd      	mov	sp, r7
    4fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fd4:	4770      	bx	lr

00004fd6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4fd6:	b480      	push	{r7}
    4fd8:	b083      	sub	sp, #12
    4fda:	af00      	add	r7, sp, #0
    4fdc:	6078      	str	r0, [r7, #4]
    4fde:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4fe0:	687b      	ldr	r3, [r7, #4]
    4fe2:	683a      	ldr	r2, [r7, #0]
    4fe4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4fe6:	bf00      	nop
    4fe8:	370c      	adds	r7, #12
    4fea:	46bd      	mov	sp, r7
    4fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff0:	4770      	bx	lr

00004ff2 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4ff2:	b480      	push	{r7}
    4ff4:	b085      	sub	sp, #20
    4ff6:	af00      	add	r7, sp, #0
    4ff8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4ffa:	687b      	ldr	r3, [r7, #4]
    4ffc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5000:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5002:	7bfb      	ldrb	r3, [r7, #15]
    5004:	085b      	lsrs	r3, r3, #1
    5006:	b2db      	uxtb	r3, r3
    5008:	f003 0301 	and.w	r3, r3, #1
    500c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    500e:	7bfb      	ldrb	r3, [r7, #15]
    5010:	2b00      	cmp	r3, #0
    5012:	bf14      	ite	ne
    5014:	2301      	movne	r3, #1
    5016:	2300      	moveq	r3, #0
    5018:	b2db      	uxtb	r3, r3
}
    501a:	4618      	mov	r0, r3
    501c:	3714      	adds	r7, #20
    501e:	46bd      	mov	sp, r7
    5020:	f85d 7b04 	ldr.w	r7, [sp], #4
    5024:	4770      	bx	lr

00005026 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5026:	b480      	push	{r7}
    5028:	b085      	sub	sp, #20
    502a:	af00      	add	r7, sp, #0
    502c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    502e:	687b      	ldr	r3, [r7, #4]
    5030:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5034:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5036:	7bfb      	ldrb	r3, [r7, #15]
    5038:	089b      	lsrs	r3, r3, #2
    503a:	b2db      	uxtb	r3, r3
    503c:	f003 0301 	and.w	r3, r3, #1
    5040:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5042:	7bfb      	ldrb	r3, [r7, #15]
    5044:	2b00      	cmp	r3, #0
    5046:	bf14      	ite	ne
    5048:	2301      	movne	r3, #1
    504a:	2300      	moveq	r3, #0
    504c:	b2db      	uxtb	r3, r3
}
    504e:	4618      	mov	r0, r3
    5050:	3714      	adds	r7, #20
    5052:	46bd      	mov	sp, r7
    5054:	f85d 7b04 	ldr.w	r7, [sp], #4
    5058:	4770      	bx	lr

0000505a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    505a:	b480      	push	{r7}
    505c:	b085      	sub	sp, #20
    505e:	af00      	add	r7, sp, #0
    5060:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5062:	687b      	ldr	r3, [r7, #4]
    5064:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5068:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    506a:	7bfb      	ldrb	r3, [r7, #15]
    506c:	08db      	lsrs	r3, r3, #3
    506e:	b2db      	uxtb	r3, r3
    5070:	f003 0301 	and.w	r3, r3, #1
    5074:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5076:	7bfb      	ldrb	r3, [r7, #15]
    5078:	2b00      	cmp	r3, #0
    507a:	bf14      	ite	ne
    507c:	2301      	movne	r3, #1
    507e:	2300      	moveq	r3, #0
    5080:	b2db      	uxtb	r3, r3
}
    5082:	4618      	mov	r0, r3
    5084:	3714      	adds	r7, #20
    5086:	46bd      	mov	sp, r7
    5088:	f85d 7b04 	ldr.w	r7, [sp], #4
    508c:	4770      	bx	lr

0000508e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    508e:	b480      	push	{r7}
    5090:	b085      	sub	sp, #20
    5092:	af00      	add	r7, sp, #0
    5094:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    509c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    509e:	7bfb      	ldrb	r3, [r7, #15]
    50a0:	091b      	lsrs	r3, r3, #4
    50a2:	b2db      	uxtb	r3, r3
    50a4:	f003 0301 	and.w	r3, r3, #1
    50a8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    50aa:	7bfb      	ldrb	r3, [r7, #15]
    50ac:	2b00      	cmp	r3, #0
    50ae:	bf14      	ite	ne
    50b0:	2301      	movne	r3, #1
    50b2:	2300      	moveq	r3, #0
    50b4:	b2db      	uxtb	r3, r3
}
    50b6:	4618      	mov	r0, r3
    50b8:	3714      	adds	r7, #20
    50ba:	46bd      	mov	sp, r7
    50bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c0:	4770      	bx	lr
	...

000050c4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    50c4:	b580      	push	{r7, lr}
    50c6:	b082      	sub	sp, #8
    50c8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    50ca:	4b0a      	ldr	r3, [pc, #40]	; (50f4 <_oscctrl_init_sources+0x30>)
    50cc:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    50ce:	4a0a      	ldr	r2, [pc, #40]	; (50f8 <_oscctrl_init_sources+0x34>)
    50d0:	2101      	movs	r1, #1
    50d2:	6878      	ldr	r0, [r7, #4]
    50d4:	4b09      	ldr	r3, [pc, #36]	; (50fc <_oscctrl_init_sources+0x38>)
    50d6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    50d8:	bf00      	nop
    50da:	6878      	ldr	r0, [r7, #4]
    50dc:	4b08      	ldr	r3, [pc, #32]	; (5100 <_oscctrl_init_sources+0x3c>)
    50de:	4798      	blx	r3
    50e0:	4603      	mov	r3, r0
    50e2:	f083 0301 	eor.w	r3, r3, #1
    50e6:	b2db      	uxtb	r3, r3
    50e8:	2b00      	cmp	r3, #0
    50ea:	d1f6      	bne.n	50da <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    50ec:	bf00      	nop
    50ee:	3708      	adds	r7, #8
    50f0:	46bd      	mov	sp, r7
    50f2:	bd80      	pop	{r7, pc}
    50f4:	40001000 	.word	0x40001000
    50f8:	03002646 	.word	0x03002646
    50fc:	00004f0d 	.word	0x00004f0d
    5100:	00004e97 	.word	0x00004e97

00005104 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5104:	b580      	push	{r7, lr}
    5106:	b084      	sub	sp, #16
    5108:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    510a:	4b6b      	ldr	r3, [pc, #428]	; (52b8 <_oscctrl_init_referenced_generators+0x1b4>)
    510c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    510e:	2204      	movs	r2, #4
    5110:	2100      	movs	r1, #0
    5112:	486a      	ldr	r0, [pc, #424]	; (52bc <_oscctrl_init_referenced_generators+0x1b8>)
    5114:	4b6a      	ldr	r3, [pc, #424]	; (52c0 <_oscctrl_init_referenced_generators+0x1bc>)
    5116:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5118:	bf00      	nop
    511a:	4868      	ldr	r0, [pc, #416]	; (52bc <_oscctrl_init_referenced_generators+0x1b8>)
    511c:	4b69      	ldr	r3, [pc, #420]	; (52c4 <_oscctrl_init_referenced_generators+0x1c0>)
    511e:	4798      	blx	r3
    5120:	4603      	mov	r3, r0
    5122:	2b00      	cmp	r3, #0
    5124:	d1f9      	bne.n	511a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5126:	2100      	movs	r1, #0
    5128:	68f8      	ldr	r0, [r7, #12]
    512a:	4b67      	ldr	r3, [pc, #412]	; (52c8 <_oscctrl_init_referenced_generators+0x1c4>)
    512c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    512e:	4967      	ldr	r1, [pc, #412]	; (52cc <_oscctrl_init_referenced_generators+0x1c8>)
    5130:	68f8      	ldr	r0, [r7, #12]
    5132:	4b67      	ldr	r3, [pc, #412]	; (52d0 <_oscctrl_init_referenced_generators+0x1cc>)
    5134:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5136:	bf00      	nop
    5138:	68f8      	ldr	r0, [r7, #12]
    513a:	4b66      	ldr	r3, [pc, #408]	; (52d4 <_oscctrl_init_referenced_generators+0x1d0>)
    513c:	4798      	blx	r3
    513e:	4603      	mov	r3, r0
    5140:	2b00      	cmp	r3, #0
    5142:	d1f9      	bne.n	5138 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5144:	2100      	movs	r1, #0
    5146:	68f8      	ldr	r0, [r7, #12]
    5148:	4b63      	ldr	r3, [pc, #396]	; (52d8 <_oscctrl_init_referenced_generators+0x1d4>)
    514a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    514c:	bf00      	nop
    514e:	68f8      	ldr	r0, [r7, #12]
    5150:	4b62      	ldr	r3, [pc, #392]	; (52dc <_oscctrl_init_referenced_generators+0x1d8>)
    5152:	4798      	blx	r3
    5154:	4603      	mov	r3, r0
    5156:	2b00      	cmp	r3, #0
    5158:	d1f9      	bne.n	514e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    515a:	2302      	movs	r3, #2
    515c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    515e:	7afb      	ldrb	r3, [r7, #11]
    5160:	4619      	mov	r1, r3
    5162:	68f8      	ldr	r0, [r7, #12]
    5164:	4b58      	ldr	r3, [pc, #352]	; (52c8 <_oscctrl_init_referenced_generators+0x1c4>)
    5166:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5168:	bf00      	nop
    516a:	68f8      	ldr	r0, [r7, #12]
    516c:	4b5c      	ldr	r3, [pc, #368]	; (52e0 <_oscctrl_init_referenced_generators+0x1dc>)
    516e:	4798      	blx	r3
    5170:	4603      	mov	r3, r0
    5172:	2b00      	cmp	r3, #0
    5174:	d1f9      	bne.n	516a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5176:	68f8      	ldr	r0, [r7, #12]
    5178:	4b5a      	ldr	r3, [pc, #360]	; (52e4 <_oscctrl_init_referenced_generators+0x1e0>)
    517a:	4798      	blx	r3
    517c:	4603      	mov	r3, r0
    517e:	4619      	mov	r1, r3
    5180:	68f8      	ldr	r0, [r7, #12]
    5182:	4b59      	ldr	r3, [pc, #356]	; (52e8 <_oscctrl_init_referenced_generators+0x1e4>)
    5184:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5186:	bf00      	nop
    5188:	68f8      	ldr	r0, [r7, #12]
    518a:	4b58      	ldr	r3, [pc, #352]	; (52ec <_oscctrl_init_referenced_generators+0x1e8>)
    518c:	4798      	blx	r3
    518e:	4603      	mov	r3, r0
    5190:	2b00      	cmp	r3, #0
    5192:	d1f9      	bne.n	5188 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5194:	2319      	movs	r3, #25
    5196:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5198:	7afb      	ldrb	r3, [r7, #11]
    519a:	4619      	mov	r1, r3
    519c:	68f8      	ldr	r0, [r7, #12]
    519e:	4b4e      	ldr	r3, [pc, #312]	; (52d8 <_oscctrl_init_referenced_generators+0x1d4>)
    51a0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    51a2:	bf00      	nop
    51a4:	68f8      	ldr	r0, [r7, #12]
    51a6:	4b4d      	ldr	r3, [pc, #308]	; (52dc <_oscctrl_init_referenced_generators+0x1d8>)
    51a8:	4798      	blx	r3
    51aa:	4603      	mov	r3, r0
    51ac:	2b00      	cmp	r3, #0
    51ae:	d1f9      	bne.n	51a4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    51b0:	2245      	movs	r2, #69	; 0x45
    51b2:	2101      	movs	r1, #1
    51b4:	4841      	ldr	r0, [pc, #260]	; (52bc <_oscctrl_init_referenced_generators+0x1b8>)
    51b6:	4b4e      	ldr	r3, [pc, #312]	; (52f0 <_oscctrl_init_referenced_generators+0x1ec>)
    51b8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    51ba:	223b      	movs	r2, #59	; 0x3b
    51bc:	2100      	movs	r1, #0
    51be:	68f8      	ldr	r0, [r7, #12]
    51c0:	4b4c      	ldr	r3, [pc, #304]	; (52f4 <_oscctrl_init_referenced_generators+0x1f0>)
    51c2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    51c4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    51c8:	2100      	movs	r1, #0
    51ca:	68f8      	ldr	r0, [r7, #12]
    51cc:	4b4a      	ldr	r3, [pc, #296]	; (52f8 <_oscctrl_init_referenced_generators+0x1f4>)
    51ce:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    51d0:	2242      	movs	r2, #66	; 0x42
    51d2:	2100      	movs	r1, #0
    51d4:	68f8      	ldr	r0, [r7, #12]
    51d6:	4b49      	ldr	r3, [pc, #292]	; (52fc <_oscctrl_init_referenced_generators+0x1f8>)
    51d8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    51da:	4a49      	ldr	r2, [pc, #292]	; (5300 <_oscctrl_init_referenced_generators+0x1fc>)
    51dc:	2101      	movs	r1, #1
    51de:	68f8      	ldr	r0, [r7, #12]
    51e0:	4b44      	ldr	r3, [pc, #272]	; (52f4 <_oscctrl_init_referenced_generators+0x1f0>)
    51e2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    51e4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    51e8:	2101      	movs	r1, #1
    51ea:	68f8      	ldr	r0, [r7, #12]
    51ec:	4b42      	ldr	r3, [pc, #264]	; (52f8 <_oscctrl_init_referenced_generators+0x1f4>)
    51ee:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    51f0:	2202      	movs	r2, #2
    51f2:	2101      	movs	r1, #1
    51f4:	68f8      	ldr	r0, [r7, #12]
    51f6:	4b41      	ldr	r3, [pc, #260]	; (52fc <_oscctrl_init_referenced_generators+0x1f8>)
    51f8:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    51fa:	68f8      	ldr	r0, [r7, #12]
    51fc:	4b41      	ldr	r3, [pc, #260]	; (5304 <_oscctrl_init_referenced_generators+0x200>)
    51fe:	4798      	blx	r3
    5200:	4603      	mov	r3, r0
    5202:	2b00      	cmp	r3, #0
    5204:	d00c      	beq.n	5220 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5206:	f44f 6310 	mov.w	r3, #2304	; 0x900
    520a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    520c:	bf00      	nop
    520e:	6879      	ldr	r1, [r7, #4]
    5210:	68f8      	ldr	r0, [r7, #12]
    5212:	4b3d      	ldr	r3, [pc, #244]	; (5308 <_oscctrl_init_referenced_generators+0x204>)
    5214:	4798      	blx	r3
    5216:	4602      	mov	r2, r0
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	429a      	cmp	r2, r3
    521c:	d1f7      	bne.n	520e <_oscctrl_init_referenced_generators+0x10a>
    521e:	e009      	b.n	5234 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5220:	bf00      	nop
    5222:	68f8      	ldr	r0, [r7, #12]
    5224:	4b39      	ldr	r3, [pc, #228]	; (530c <_oscctrl_init_referenced_generators+0x208>)
    5226:	4798      	blx	r3
    5228:	4603      	mov	r3, r0
    522a:	f083 0301 	eor.w	r3, r3, #1
    522e:	b2db      	uxtb	r3, r3
    5230:	2b00      	cmp	r3, #0
    5232:	d1f6      	bne.n	5222 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5234:	bf00      	nop
    5236:	2100      	movs	r1, #0
    5238:	68f8      	ldr	r0, [r7, #12]
    523a:	4b35      	ldr	r3, [pc, #212]	; (5310 <_oscctrl_init_referenced_generators+0x20c>)
    523c:	4798      	blx	r3
    523e:	4603      	mov	r3, r0
    5240:	f083 0301 	eor.w	r3, r3, #1
    5244:	b2db      	uxtb	r3, r3
    5246:	2b00      	cmp	r3, #0
    5248:	d009      	beq.n	525e <_oscctrl_init_referenced_generators+0x15a>
    524a:	2100      	movs	r1, #0
    524c:	68f8      	ldr	r0, [r7, #12]
    524e:	4b31      	ldr	r3, [pc, #196]	; (5314 <_oscctrl_init_referenced_generators+0x210>)
    5250:	4798      	blx	r3
    5252:	4603      	mov	r3, r0
    5254:	f083 0301 	eor.w	r3, r3, #1
    5258:	b2db      	uxtb	r3, r3
    525a:	2b00      	cmp	r3, #0
    525c:	d1eb      	bne.n	5236 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    525e:	bf00      	nop
    5260:	2101      	movs	r1, #1
    5262:	68f8      	ldr	r0, [r7, #12]
    5264:	4b2a      	ldr	r3, [pc, #168]	; (5310 <_oscctrl_init_referenced_generators+0x20c>)
    5266:	4798      	blx	r3
    5268:	4603      	mov	r3, r0
    526a:	f083 0301 	eor.w	r3, r3, #1
    526e:	b2db      	uxtb	r3, r3
    5270:	2b00      	cmp	r3, #0
    5272:	d009      	beq.n	5288 <_oscctrl_init_referenced_generators+0x184>
    5274:	2101      	movs	r1, #1
    5276:	68f8      	ldr	r0, [r7, #12]
    5278:	4b26      	ldr	r3, [pc, #152]	; (5314 <_oscctrl_init_referenced_generators+0x210>)
    527a:	4798      	blx	r3
    527c:	4603      	mov	r3, r0
    527e:	f083 0301 	eor.w	r3, r3, #1
    5282:	b2db      	uxtb	r3, r3
    5284:	2b00      	cmp	r3, #0
    5286:	d1eb      	bne.n	5260 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5288:	bf00      	nop
    528a:	480c      	ldr	r0, [pc, #48]	; (52bc <_oscctrl_init_referenced_generators+0x1b8>)
    528c:	4b22      	ldr	r3, [pc, #136]	; (5318 <_oscctrl_init_referenced_generators+0x214>)
    528e:	4798      	blx	r3
    5290:	4603      	mov	r3, r0
    5292:	2b00      	cmp	r3, #0
    5294:	d1f9      	bne.n	528a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5296:	2207      	movs	r2, #7
    5298:	2100      	movs	r1, #0
    529a:	4808      	ldr	r0, [pc, #32]	; (52bc <_oscctrl_init_referenced_generators+0x1b8>)
    529c:	4b08      	ldr	r3, [pc, #32]	; (52c0 <_oscctrl_init_referenced_generators+0x1bc>)
    529e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    52a0:	bf00      	nop
    52a2:	4806      	ldr	r0, [pc, #24]	; (52bc <_oscctrl_init_referenced_generators+0x1b8>)
    52a4:	4b07      	ldr	r3, [pc, #28]	; (52c4 <_oscctrl_init_referenced_generators+0x1c0>)
    52a6:	4798      	blx	r3
    52a8:	4603      	mov	r3, r0
    52aa:	2b00      	cmp	r3, #0
    52ac:	d1f9      	bne.n	52a2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    52ae:	bf00      	nop
    52b0:	3710      	adds	r7, #16
    52b2:	46bd      	mov	sp, r7
    52b4:	bd80      	pop	{r7, pc}
    52b6:	bf00      	nop
    52b8:	40001000 	.word	0x40001000
    52bc:	40001c00 	.word	0x40001c00
    52c0:	00004cd1 	.word	0x00004cd1
    52c4:	00004c91 	.word	0x00004c91
    52c8:	00004f35 	.word	0x00004f35
    52cc:	0401bb80 	.word	0x0401bb80
    52d0:	00004fd7 	.word	0x00004fd7
    52d4:	0000508f 	.word	0x0000508f
    52d8:	00004f83 	.word	0x00004f83
    52dc:	00005027 	.word	0x00005027
    52e0:	00004ff3 	.word	0x00004ff3
    52e4:	00004fbf 	.word	0x00004fbf
    52e8:	00004fa3 	.word	0x00004fa3
    52ec:	0000505b 	.word	0x0000505b
    52f0:	00004d21 	.word	0x00004d21
    52f4:	00004e2d 	.word	0x00004e2d
    52f8:	00004e69 	.word	0x00004e69
    52fc:	00004df1 	.word	0x00004df1
    5300:	000407a0 	.word	0x000407a0
    5304:	00004f53 	.word	0x00004f53
    5308:	00004ee7 	.word	0x00004ee7
    530c:	00004ebf 	.word	0x00004ebf
    5310:	00004d7d 	.word	0x00004d7d
    5314:	00004db5 	.word	0x00004db5
    5318:	00004cb9 	.word	0x00004cb9

0000531c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    531c:	b480      	push	{r7}
    531e:	b083      	sub	sp, #12
    5320:	af00      	add	r7, sp, #0
    5322:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5324:	687b      	ldr	r3, [r7, #4]
    5326:	69db      	ldr	r3, [r3, #28]
    5328:	0a9b      	lsrs	r3, r3, #10
    532a:	f003 0301 	and.w	r3, r3, #1
    532e:	2b00      	cmp	r3, #0
    5330:	bf14      	ite	ne
    5332:	2301      	movne	r3, #1
    5334:	2300      	moveq	r3, #0
    5336:	b2db      	uxtb	r3, r3
}
    5338:	4618      	mov	r0, r3
    533a:	370c      	adds	r7, #12
    533c:	46bd      	mov	sp, r7
    533e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5342:	4770      	bx	lr

00005344 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5344:	b480      	push	{r7}
    5346:	b083      	sub	sp, #12
    5348:	af00      	add	r7, sp, #0
    534a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5352:	61da      	str	r2, [r3, #28]
}
    5354:	bf00      	nop
    5356:	370c      	adds	r7, #12
    5358:	46bd      	mov	sp, r7
    535a:	f85d 7b04 	ldr.w	r7, [sp], #4
    535e:	4770      	bx	lr

00005360 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5360:	b480      	push	{r7}
    5362:	b083      	sub	sp, #12
    5364:	af00      	add	r7, sp, #0
    5366:	6078      	str	r0, [r7, #4]
    5368:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	683a      	ldr	r2, [r7, #0]
    536e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5370:	bf00      	nop
    5372:	370c      	adds	r7, #12
    5374:	46bd      	mov	sp, r7
    5376:	f85d 7b04 	ldr.w	r7, [sp], #4
    537a:	4770      	bx	lr

0000537c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    537c:	b480      	push	{r7}
    537e:	b083      	sub	sp, #12
    5380:	af00      	add	r7, sp, #0
    5382:	6078      	str	r0, [r7, #4]
    5384:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5386:	687b      	ldr	r3, [r7, #4]
    5388:	683a      	ldr	r2, [r7, #0]
    538a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    538c:	bf00      	nop
    538e:	370c      	adds	r7, #12
    5390:	46bd      	mov	sp, r7
    5392:	f85d 7b04 	ldr.w	r7, [sp], #4
    5396:	4770      	bx	lr

00005398 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5398:	b480      	push	{r7}
    539a:	b083      	sub	sp, #12
    539c:	af00      	add	r7, sp, #0
    539e:	6078      	str	r0, [r7, #4]
    53a0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    53a2:	687b      	ldr	r3, [r7, #4]
    53a4:	683a      	ldr	r2, [r7, #0]
    53a6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    53a8:	bf00      	nop
    53aa:	370c      	adds	r7, #12
    53ac:	46bd      	mov	sp, r7
    53ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    53b2:	4770      	bx	lr

000053b4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    53b4:	b480      	push	{r7}
    53b6:	b083      	sub	sp, #12
    53b8:	af00      	add	r7, sp, #0
    53ba:	6078      	str	r0, [r7, #4]
    53bc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    53be:	687b      	ldr	r3, [r7, #4]
    53c0:	683a      	ldr	r2, [r7, #0]
    53c2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    53c4:	bf00      	nop
    53c6:	370c      	adds	r7, #12
    53c8:	46bd      	mov	sp, r7
    53ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ce:	4770      	bx	lr

000053d0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    53d0:	b480      	push	{r7}
    53d2:	b085      	sub	sp, #20
    53d4:	af00      	add	r7, sp, #0
    53d6:	6078      	str	r0, [r7, #4]
    53d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    53da:	687b      	ldr	r3, [r7, #4]
    53dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    53de:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    53e0:	68fb      	ldr	r3, [r7, #12]
    53e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    53e6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    53e8:	683b      	ldr	r3, [r7, #0]
    53ea:	b2db      	uxtb	r3, r3
    53ec:	68fa      	ldr	r2, [r7, #12]
    53ee:	4313      	orrs	r3, r2
    53f0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	68fa      	ldr	r2, [r7, #12]
    53f6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    53f8:	bf00      	nop
    53fa:	3714      	adds	r7, #20
    53fc:	46bd      	mov	sp, r7
    53fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5402:	4770      	bx	lr

00005404 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5404:	b480      	push	{r7}
    5406:	b085      	sub	sp, #20
    5408:	af00      	add	r7, sp, #0
    540a:	6078      	str	r0, [r7, #4]
    540c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    540e:	687b      	ldr	r3, [r7, #4]
    5410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5412:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5414:	68fb      	ldr	r3, [r7, #12]
    5416:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    541a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    541c:	683b      	ldr	r3, [r7, #0]
    541e:	041b      	lsls	r3, r3, #16
    5420:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5424:	68fa      	ldr	r2, [r7, #12]
    5426:	4313      	orrs	r3, r2
    5428:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    542a:	687b      	ldr	r3, [r7, #4]
    542c:	68fa      	ldr	r2, [r7, #12]
    542e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5430:	bf00      	nop
    5432:	3714      	adds	r7, #20
    5434:	46bd      	mov	sp, r7
    5436:	f85d 7b04 	ldr.w	r7, [sp], #4
    543a:	4770      	bx	lr

0000543c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    543c:	b480      	push	{r7}
    543e:	b083      	sub	sp, #12
    5440:	af00      	add	r7, sp, #0
    5442:	6078      	str	r0, [r7, #4]
    5444:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5446:	687b      	ldr	r3, [r7, #4]
    5448:	683a      	ldr	r2, [r7, #0]
    544a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    544c:	bf00      	nop
    544e:	370c      	adds	r7, #12
    5450:	46bd      	mov	sp, r7
    5452:	f85d 7b04 	ldr.w	r7, [sp], #4
    5456:	4770      	bx	lr

00005458 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5458:	b480      	push	{r7}
    545a:	b083      	sub	sp, #12
    545c:	af00      	add	r7, sp, #0
    545e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5464:	4618      	mov	r0, r3
    5466:	370c      	adds	r7, #12
    5468:	46bd      	mov	sp, r7
    546a:	f85d 7b04 	ldr.w	r7, [sp], #4
    546e:	4770      	bx	lr

00005470 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5470:	b480      	push	{r7}
    5472:	b085      	sub	sp, #20
    5474:	af00      	add	r7, sp, #0
    5476:	60f8      	str	r0, [r7, #12]
    5478:	60b9      	str	r1, [r7, #8]
    547a:	607a      	str	r2, [r7, #4]
	while (count--) {
    547c:	e007      	b.n	548e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    547e:	68fb      	ldr	r3, [r7, #12]
    5480:	1c5a      	adds	r2, r3, #1
    5482:	60fa      	str	r2, [r7, #12]
    5484:	68ba      	ldr	r2, [r7, #8]
    5486:	1c51      	adds	r1, r2, #1
    5488:	60b9      	str	r1, [r7, #8]
    548a:	7812      	ldrb	r2, [r2, #0]
    548c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    548e:	687b      	ldr	r3, [r7, #4]
    5490:	1e5a      	subs	r2, r3, #1
    5492:	607a      	str	r2, [r7, #4]
    5494:	2b00      	cmp	r3, #0
    5496:	d1f2      	bne.n	547e <_qspi_memcpy+0xe>
	}
}
    5498:	bf00      	nop
    549a:	3714      	adds	r7, #20
    549c:	46bd      	mov	sp, r7
    549e:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a2:	4770      	bx	lr

000054a4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    54a4:	b580      	push	{r7, lr}
    54a6:	b082      	sub	sp, #8
    54a8:	af00      	add	r7, sp, #0
    54aa:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    54ac:	4903      	ldr	r1, [pc, #12]	; (54bc <_qspi_end_transfer+0x18>)
    54ae:	6878      	ldr	r0, [r7, #4]
    54b0:	4b03      	ldr	r3, [pc, #12]	; (54c0 <_qspi_end_transfer+0x1c>)
    54b2:	4798      	blx	r3
}
    54b4:	bf00      	nop
    54b6:	3708      	adds	r7, #8
    54b8:	46bd      	mov	sp, r7
    54ba:	bd80      	pop	{r7, pc}
    54bc:	01000002 	.word	0x01000002
    54c0:	00005361 	.word	0x00005361

000054c4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    54c4:	b580      	push	{r7, lr}
    54c6:	b082      	sub	sp, #8
    54c8:	af00      	add	r7, sp, #0
    54ca:	6078      	str	r0, [r7, #4]
    54cc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	2b00      	cmp	r3, #0
    54d2:	d004      	beq.n	54de <_qspi_sync_init+0x1a>
    54d4:	683b      	ldr	r3, [r7, #0]
    54d6:	2b00      	cmp	r3, #0
    54d8:	d001      	beq.n	54de <_qspi_sync_init+0x1a>
    54da:	2301      	movs	r3, #1
    54dc:	e000      	b.n	54e0 <_qspi_sync_init+0x1c>
    54de:	2300      	movs	r3, #0
    54e0:	f003 0301 	and.w	r3, r3, #1
    54e4:	b2db      	uxtb	r3, r3
    54e6:	2240      	movs	r2, #64	; 0x40
    54e8:	490c      	ldr	r1, [pc, #48]	; (551c <_qspi_sync_init+0x58>)
    54ea:	4618      	mov	r0, r3
    54ec:	4b0c      	ldr	r3, [pc, #48]	; (5520 <_qspi_sync_init+0x5c>)
    54ee:	4798      	blx	r3
	dev->prvt = hw;
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	683a      	ldr	r2, [r7, #0]
    54f4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    54f6:	687b      	ldr	r3, [r7, #4]
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	2101      	movs	r1, #1
    54fc:	4618      	mov	r0, r3
    54fe:	4b09      	ldr	r3, [pc, #36]	; (5524 <_qspi_sync_init+0x60>)
    5500:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5502:	4909      	ldr	r1, [pc, #36]	; (5528 <_qspi_sync_init+0x64>)
    5504:	6838      	ldr	r0, [r7, #0]
    5506:	4b09      	ldr	r3, [pc, #36]	; (552c <_qspi_sync_init+0x68>)
    5508:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    550a:	4909      	ldr	r1, [pc, #36]	; (5530 <_qspi_sync_init+0x6c>)
    550c:	6838      	ldr	r0, [r7, #0]
    550e:	4b09      	ldr	r3, [pc, #36]	; (5534 <_qspi_sync_init+0x70>)
    5510:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5512:	2300      	movs	r3, #0
}
    5514:	4618      	mov	r0, r3
    5516:	3708      	adds	r7, #8
    5518:	46bd      	mov	sp, r7
    551a:	bd80      	pop	{r7, pc}
    551c:	0001098c 	.word	0x0001098c
    5520:	00003825 	.word	0x00003825
    5524:	00005361 	.word	0x00005361
    5528:	06000011 	.word	0x06000011
    552c:	0000537d 	.word	0x0000537d
    5530:	00241300 	.word	0x00241300
    5534:	00005399 	.word	0x00005399

00005538 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5538:	b580      	push	{r7, lr}
    553a:	b082      	sub	sp, #8
    553c:	af00      	add	r7, sp, #0
    553e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	2102      	movs	r1, #2
    5546:	4618      	mov	r0, r3
    5548:	4b03      	ldr	r3, [pc, #12]	; (5558 <_qspi_sync_enable+0x20>)
    554a:	4798      	blx	r3
	return ERR_NONE;
    554c:	2300      	movs	r3, #0
}
    554e:	4618      	mov	r0, r3
    5550:	3708      	adds	r7, #8
    5552:	46bd      	mov	sp, r7
    5554:	bd80      	pop	{r7, pc}
    5556:	bf00      	nop
    5558:	00005361 	.word	0x00005361

0000555c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    555c:	b580      	push	{r7, lr}
    555e:	b082      	sub	sp, #8
    5560:	af00      	add	r7, sp, #0
    5562:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5564:	687b      	ldr	r3, [r7, #4]
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	2100      	movs	r1, #0
    556a:	4618      	mov	r0, r3
    556c:	4b03      	ldr	r3, [pc, #12]	; (557c <_qspi_sync_disable+0x20>)
    556e:	4798      	blx	r3
	return ERR_NONE;
    5570:	2300      	movs	r3, #0
}
    5572:	4618      	mov	r0, r3
    5574:	3708      	adds	r7, #8
    5576:	46bd      	mov	sp, r7
    5578:	bd80      	pop	{r7, pc}
    557a:	bf00      	nop
    557c:	00005361 	.word	0x00005361

00005580 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5580:	b580      	push	{r7, lr}
    5582:	b084      	sub	sp, #16
    5584:	af00      	add	r7, sp, #0
    5586:	6078      	str	r0, [r7, #4]
    5588:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5590:	683b      	ldr	r3, [r7, #0]
    5592:	781b      	ldrb	r3, [r3, #0]
    5594:	f003 0320 	and.w	r3, r3, #32
    5598:	b2db      	uxtb	r3, r3
    559a:	2b00      	cmp	r3, #0
    559c:	d005      	beq.n	55aa <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    559e:	683b      	ldr	r3, [r7, #0]
    55a0:	689b      	ldr	r3, [r3, #8]
    55a2:	4619      	mov	r1, r3
    55a4:	68f8      	ldr	r0, [r7, #12]
    55a6:	4b13      	ldr	r3, [pc, #76]	; (55f4 <_qspi_sync_command_set_ifr+0x74>)
    55a8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    55aa:	683b      	ldr	r3, [r7, #0]
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	f003 0310 	and.w	r3, r3, #16
    55b2:	b2db      	uxtb	r3, r3
    55b4:	2b00      	cmp	r3, #0
    55b6:	d005      	beq.n	55c4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    55b8:	683b      	ldr	r3, [r7, #0]
    55ba:	791b      	ldrb	r3, [r3, #4]
    55bc:	4619      	mov	r1, r3
    55be:	68f8      	ldr	r0, [r7, #12]
    55c0:	4b0d      	ldr	r3, [pc, #52]	; (55f8 <_qspi_sync_command_set_ifr+0x78>)
    55c2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    55c4:	683b      	ldr	r3, [r7, #0]
    55c6:	781b      	ldrb	r3, [r3, #0]
    55c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    55cc:	b2db      	uxtb	r3, r3
    55ce:	2b00      	cmp	r3, #0
    55d0:	d005      	beq.n	55de <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    55d2:	683b      	ldr	r3, [r7, #0]
    55d4:	795b      	ldrb	r3, [r3, #5]
    55d6:	4619      	mov	r1, r3
    55d8:	68f8      	ldr	r0, [r7, #12]
    55da:	4b08      	ldr	r3, [pc, #32]	; (55fc <_qspi_sync_command_set_ifr+0x7c>)
    55dc:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    55de:	683b      	ldr	r3, [r7, #0]
    55e0:	681b      	ldr	r3, [r3, #0]
    55e2:	4619      	mov	r1, r3
    55e4:	68f8      	ldr	r0, [r7, #12]
    55e6:	4b06      	ldr	r3, [pc, #24]	; (5600 <_qspi_sync_command_set_ifr+0x80>)
    55e8:	4798      	blx	r3
}
    55ea:	bf00      	nop
    55ec:	3710      	adds	r7, #16
    55ee:	46bd      	mov	sp, r7
    55f0:	bd80      	pop	{r7, pc}
    55f2:	bf00      	nop
    55f4:	000053b5 	.word	0x000053b5
    55f8:	000053d1 	.word	0x000053d1
    55fc:	00005405 	.word	0x00005405
    5600:	0000543d 	.word	0x0000543d

00005604 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5604:	b580      	push	{r7, lr}
    5606:	b084      	sub	sp, #16
    5608:	af00      	add	r7, sp, #0
    560a:	6078      	str	r0, [r7, #4]
    560c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    560e:	687b      	ldr	r3, [r7, #4]
    5610:	681b      	ldr	r3, [r3, #0]
    5612:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5618:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    561a:	683b      	ldr	r3, [r7, #0]
    561c:	781b      	ldrb	r3, [r3, #0]
    561e:	f003 0320 	and.w	r3, r3, #32
    5622:	b2db      	uxtb	r3, r3
    5624:	2b00      	cmp	r3, #0
    5626:	d004      	beq.n	5632 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5628:	683b      	ldr	r3, [r7, #0]
    562a:	689b      	ldr	r3, [r3, #8]
    562c:	68fa      	ldr	r2, [r7, #12]
    562e:	4413      	add	r3, r2
    5630:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5632:	68b8      	ldr	r0, [r7, #8]
    5634:	4b18      	ldr	r3, [pc, #96]	; (5698 <_qspi_sync_run_transfer+0x94>)
    5636:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5638:	683b      	ldr	r3, [r7, #0]
    563a:	691b      	ldr	r3, [r3, #16]
    563c:	2b00      	cmp	r3, #0
    563e:	d103      	bne.n	5648 <_qspi_sync_run_transfer+0x44>
    5640:	683b      	ldr	r3, [r7, #0]
    5642:	695b      	ldr	r3, [r3, #20]
    5644:	2b00      	cmp	r3, #0
    5646:	d001      	beq.n	564c <_qspi_sync_run_transfer+0x48>
    5648:	2301      	movs	r3, #1
    564a:	e000      	b.n	564e <_qspi_sync_run_transfer+0x4a>
    564c:	2300      	movs	r3, #0
    564e:	f003 0301 	and.w	r3, r3, #1
    5652:	b2db      	uxtb	r3, r3
    5654:	2282      	movs	r2, #130	; 0x82
    5656:	4911      	ldr	r1, [pc, #68]	; (569c <_qspi_sync_run_transfer+0x98>)
    5658:	4618      	mov	r0, r3
    565a:	4b11      	ldr	r3, [pc, #68]	; (56a0 <_qspi_sync_run_transfer+0x9c>)
    565c:	4798      	blx	r3

	if (cmd->tx_buf) {
    565e:	683b      	ldr	r3, [r7, #0]
    5660:	691b      	ldr	r3, [r3, #16]
    5662:	2b00      	cmp	r3, #0
    5664:	d008      	beq.n	5678 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5666:	683b      	ldr	r3, [r7, #0]
    5668:	6919      	ldr	r1, [r3, #16]
    566a:	683b      	ldr	r3, [r7, #0]
    566c:	68db      	ldr	r3, [r3, #12]
    566e:	461a      	mov	r2, r3
    5670:	68f8      	ldr	r0, [r7, #12]
    5672:	4b0c      	ldr	r3, [pc, #48]	; (56a4 <_qspi_sync_run_transfer+0xa0>)
    5674:	4798      	blx	r3
    5676:	e007      	b.n	5688 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5678:	683b      	ldr	r3, [r7, #0]
    567a:	6958      	ldr	r0, [r3, #20]
    567c:	683b      	ldr	r3, [r7, #0]
    567e:	68db      	ldr	r3, [r3, #12]
    5680:	461a      	mov	r2, r3
    5682:	68f9      	ldr	r1, [r7, #12]
    5684:	4b07      	ldr	r3, [pc, #28]	; (56a4 <_qspi_sync_run_transfer+0xa0>)
    5686:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    568c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5690:	bf00      	nop
    5692:	3710      	adds	r7, #16
    5694:	46bd      	mov	sp, r7
    5696:	bd80      	pop	{r7, pc}
    5698:	00005459 	.word	0x00005459
    569c:	0001098c 	.word	0x0001098c
    56a0:	00003825 	.word	0x00003825
    56a4:	00005471 	.word	0x00005471

000056a8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    56a8:	b580      	push	{r7, lr}
    56aa:	b082      	sub	sp, #8
    56ac:	af00      	add	r7, sp, #0
    56ae:	6078      	str	r0, [r7, #4]
    56b0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    56b2:	6839      	ldr	r1, [r7, #0]
    56b4:	6878      	ldr	r0, [r7, #4]
    56b6:	4b14      	ldr	r3, [pc, #80]	; (5708 <_qspi_sync_serial_run_command+0x60>)
    56b8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    56ba:	683b      	ldr	r3, [r7, #0]
    56bc:	781b      	ldrb	r3, [r3, #0]
    56be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    56c2:	b2db      	uxtb	r3, r3
    56c4:	2b00      	cmp	r3, #0
    56c6:	d003      	beq.n	56d0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    56c8:	6839      	ldr	r1, [r7, #0]
    56ca:	6878      	ldr	r0, [r7, #4]
    56cc:	4b0f      	ldr	r3, [pc, #60]	; (570c <_qspi_sync_serial_run_command+0x64>)
    56ce:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	681b      	ldr	r3, [r3, #0]
    56d4:	4618      	mov	r0, r3
    56d6:	4b0e      	ldr	r3, [pc, #56]	; (5710 <_qspi_sync_serial_run_command+0x68>)
    56d8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    56da:	bf00      	nop
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	4618      	mov	r0, r3
    56e2:	4b0c      	ldr	r3, [pc, #48]	; (5714 <_qspi_sync_serial_run_command+0x6c>)
    56e4:	4798      	blx	r3
    56e6:	4603      	mov	r3, r0
    56e8:	f083 0301 	eor.w	r3, r3, #1
    56ec:	b2db      	uxtb	r3, r3
    56ee:	2b00      	cmp	r3, #0
    56f0:	d1f4      	bne.n	56dc <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	4618      	mov	r0, r3
    56f8:	4b07      	ldr	r3, [pc, #28]	; (5718 <_qspi_sync_serial_run_command+0x70>)
    56fa:	4798      	blx	r3
	return ERR_NONE;
    56fc:	2300      	movs	r3, #0
}
    56fe:	4618      	mov	r0, r3
    5700:	3708      	adds	r7, #8
    5702:	46bd      	mov	sp, r7
    5704:	bd80      	pop	{r7, pc}
    5706:	bf00      	nop
    5708:	00005581 	.word	0x00005581
    570c:	00005605 	.word	0x00005605
    5710:	000054a5 	.word	0x000054a5
    5714:	0000531d 	.word	0x0000531d
    5718:	00005345 	.word	0x00005345

0000571c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    571c:	b480      	push	{r7}
    571e:	b083      	sub	sp, #12
    5720:	af00      	add	r7, sp, #0
    5722:	6078      	str	r0, [r7, #4]
    5724:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5726:	bf00      	nop
    5728:	687b      	ldr	r3, [r7, #4]
    572a:	691a      	ldr	r2, [r3, #16]
    572c:	683b      	ldr	r3, [r7, #0]
    572e:	4013      	ands	r3, r2
    5730:	2b00      	cmp	r3, #0
    5732:	d1f9      	bne.n	5728 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5734:	bf00      	nop
    5736:	370c      	adds	r7, #12
    5738:	46bd      	mov	sp, r7
    573a:	f85d 7b04 	ldr.w	r7, [sp], #4
    573e:	4770      	bx	lr

00005740 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5740:	b480      	push	{r7}
    5742:	b083      	sub	sp, #12
    5744:	af00      	add	r7, sp, #0
    5746:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5748:	687b      	ldr	r3, [r7, #4]
    574a:	f44f 7280 	mov.w	r2, #256	; 0x100
    574e:	819a      	strh	r2, [r3, #12]
}
    5750:	bf00      	nop
    5752:	370c      	adds	r7, #12
    5754:	46bd      	mov	sp, r7
    5756:	f85d 7b04 	ldr.w	r7, [sp], #4
    575a:	4770      	bx	lr

0000575c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    575c:	b480      	push	{r7}
    575e:	b083      	sub	sp, #12
    5760:	af00      	add	r7, sp, #0
    5762:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5764:	687b      	ldr	r3, [r7, #4]
    5766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    576a:	819a      	strh	r2, [r3, #12]
}
    576c:	bf00      	nop
    576e:	370c      	adds	r7, #12
    5770:	46bd      	mov	sp, r7
    5772:	f85d 7b04 	ldr.w	r7, [sp], #4
    5776:	4770      	bx	lr

00005778 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5778:	b480      	push	{r7}
    577a:	b083      	sub	sp, #12
    577c:	af00      	add	r7, sp, #0
    577e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5780:	687b      	ldr	r3, [r7, #4]
    5782:	899b      	ldrh	r3, [r3, #12]
    5784:	b29b      	uxth	r3, r3
}
    5786:	4618      	mov	r0, r3
    5788:	370c      	adds	r7, #12
    578a:	46bd      	mov	sp, r7
    578c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5790:	4770      	bx	lr

00005792 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5792:	b480      	push	{r7}
    5794:	b083      	sub	sp, #12
    5796:	af00      	add	r7, sp, #0
    5798:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    579a:	687b      	ldr	r3, [r7, #4]
    579c:	895b      	ldrh	r3, [r3, #10]
    579e:	b29b      	uxth	r3, r3
}
    57a0:	4618      	mov	r0, r3
    57a2:	370c      	adds	r7, #12
    57a4:	46bd      	mov	sp, r7
    57a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57aa:	4770      	bx	lr

000057ac <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    57ac:	b580      	push	{r7, lr}
    57ae:	b082      	sub	sp, #8
    57b0:	af00      	add	r7, sp, #0
    57b2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    57b4:	687b      	ldr	r3, [r7, #4]
    57b6:	881b      	ldrh	r3, [r3, #0]
    57b8:	b29b      	uxth	r3, r3
    57ba:	f043 0301 	orr.w	r3, r3, #1
    57be:	b29a      	uxth	r2, r3
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    57c4:	2101      	movs	r1, #1
    57c6:	6878      	ldr	r0, [r7, #4]
    57c8:	4b02      	ldr	r3, [pc, #8]	; (57d4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    57ca:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    57cc:	bf00      	nop
    57ce:	3708      	adds	r7, #8
    57d0:	46bd      	mov	sp, r7
    57d2:	bd80      	pop	{r7, pc}
    57d4:	0000571d 	.word	0x0000571d

000057d8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    57d8:	b580      	push	{r7, lr}
    57da:	b084      	sub	sp, #16
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    57e0:	f248 0103 	movw	r1, #32771	; 0x8003
    57e4:	6878      	ldr	r0, [r7, #4]
    57e6:	4b0a      	ldr	r3, [pc, #40]	; (5810 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    57e8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    57ea:	687b      	ldr	r3, [r7, #4]
    57ec:	881b      	ldrh	r3, [r3, #0]
    57ee:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    57f0:	89fb      	ldrh	r3, [r7, #14]
    57f2:	085b      	lsrs	r3, r3, #1
    57f4:	b29b      	uxth	r3, r3
    57f6:	f003 0301 	and.w	r3, r3, #1
    57fa:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    57fc:	89fb      	ldrh	r3, [r7, #14]
    57fe:	2b00      	cmp	r3, #0
    5800:	bf14      	ite	ne
    5802:	2301      	movne	r3, #1
    5804:	2300      	moveq	r3, #0
    5806:	b2db      	uxtb	r3, r3
}
    5808:	4618      	mov	r0, r3
    580a:	3710      	adds	r7, #16
    580c:	46bd      	mov	sp, r7
    580e:	bd80      	pop	{r7, pc}
    5810:	0000571d 	.word	0x0000571d

00005814 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5814:	b580      	push	{r7, lr}
    5816:	b082      	sub	sp, #8
    5818:	af00      	add	r7, sp, #0
    581a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    581c:	687b      	ldr	r3, [r7, #4]
    581e:	881b      	ldrh	r3, [r3, #0]
    5820:	b29b      	uxth	r3, r3
    5822:	f023 0302 	bic.w	r3, r3, #2
    5826:	b29a      	uxth	r2, r3
    5828:	687b      	ldr	r3, [r7, #4]
    582a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    582c:	f248 0103 	movw	r1, #32771	; 0x8003
    5830:	6878      	ldr	r0, [r7, #4]
    5832:	4b03      	ldr	r3, [pc, #12]	; (5840 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5834:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5836:	bf00      	nop
    5838:	3708      	adds	r7, #8
    583a:	46bd      	mov	sp, r7
    583c:	bd80      	pop	{r7, pc}
    583e:	bf00      	nop
    5840:	0000571d 	.word	0x0000571d

00005844 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5844:	b580      	push	{r7, lr}
    5846:	b082      	sub	sp, #8
    5848:	af00      	add	r7, sp, #0
    584a:	6078      	str	r0, [r7, #4]
    584c:	460b      	mov	r3, r1
    584e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	887a      	ldrh	r2, [r7, #2]
    5854:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5856:	f248 0103 	movw	r1, #32771	; 0x8003
    585a:	6878      	ldr	r0, [r7, #4]
    585c:	4b02      	ldr	r3, [pc, #8]	; (5868 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    585e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5860:	bf00      	nop
    5862:	3708      	adds	r7, #8
    5864:	46bd      	mov	sp, r7
    5866:	bd80      	pop	{r7, pc}
    5868:	0000571d 	.word	0x0000571d

0000586c <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    586c:	b580      	push	{r7, lr}
    586e:	b082      	sub	sp, #8
    5870:	af00      	add	r7, sp, #0
    5872:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    5874:	2108      	movs	r1, #8
    5876:	6878      	ldr	r0, [r7, #4]
    5878:	4b03      	ldr	r3, [pc, #12]	; (5888 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    587a:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    587c:	687b      	ldr	r3, [r7, #4]
    587e:	699b      	ldr	r3, [r3, #24]
}
    5880:	4618      	mov	r0, r3
    5882:	3708      	adds	r7, #8
    5884:	46bd      	mov	sp, r7
    5886:	bd80      	pop	{r7, pc}
    5888:	0000571d 	.word	0x0000571d

0000588c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    588c:	b480      	push	{r7}
    588e:	b083      	sub	sp, #12
    5890:	af00      	add	r7, sp, #0
    5892:	6078      	str	r0, [r7, #4]
    5894:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	683a      	ldr	r2, [r7, #0]
    589a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    589c:	bf00      	nop
    589e:	370c      	adds	r7, #12
    58a0:	46bd      	mov	sp, r7
    58a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58a6:	4770      	bx	lr

000058a8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    58a8:	b580      	push	{r7, lr}
    58aa:	b082      	sub	sp, #8
    58ac:	af00      	add	r7, sp, #0
    58ae:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	2b00      	cmp	r3, #0
    58b4:	d005      	beq.n	58c2 <_calendar_init+0x1a>
    58b6:	687b      	ldr	r3, [r7, #4]
    58b8:	681b      	ldr	r3, [r3, #0]
    58ba:	2b00      	cmp	r3, #0
    58bc:	d001      	beq.n	58c2 <_calendar_init+0x1a>
    58be:	2301      	movs	r3, #1
    58c0:	e000      	b.n	58c4 <_calendar_init+0x1c>
    58c2:	2300      	movs	r3, #0
    58c4:	f003 0301 	and.w	r3, r3, #1
    58c8:	b2db      	uxtb	r3, r3
    58ca:	222f      	movs	r2, #47	; 0x2f
    58cc:	491b      	ldr	r1, [pc, #108]	; (593c <_calendar_init+0x94>)
    58ce:	4618      	mov	r0, r3
    58d0:	4b1b      	ldr	r3, [pc, #108]	; (5940 <_calendar_init+0x98>)
    58d2:	4798      	blx	r3

	_rtc_dev = dev;
    58d4:	4a1b      	ldr	r2, [pc, #108]	; (5944 <_calendar_init+0x9c>)
    58d6:	687b      	ldr	r3, [r7, #4]
    58d8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    58da:	687b      	ldr	r3, [r7, #4]
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	4618      	mov	r0, r3
    58e0:	4b19      	ldr	r3, [pc, #100]	; (5948 <_calendar_init+0xa0>)
    58e2:	4798      	blx	r3
    58e4:	4603      	mov	r3, r0
    58e6:	2b00      	cmp	r3, #0
    58e8:	d00a      	beq.n	5900 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    58ea:	687b      	ldr	r3, [r7, #4]
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	4618      	mov	r0, r3
    58f0:	4b16      	ldr	r3, [pc, #88]	; (594c <_calendar_init+0xa4>)
    58f2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    58f4:	687b      	ldr	r3, [r7, #4]
    58f6:	681b      	ldr	r3, [r3, #0]
    58f8:	2102      	movs	r1, #2
    58fa:	4618      	mov	r0, r3
    58fc:	4b14      	ldr	r3, [pc, #80]	; (5950 <_calendar_init+0xa8>)
    58fe:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	681b      	ldr	r3, [r3, #0]
    5904:	4618      	mov	r0, r3
    5906:	4b13      	ldr	r3, [pc, #76]	; (5954 <_calendar_init+0xac>)
    5908:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	681b      	ldr	r3, [r3, #0]
    590e:	2101      	movs	r1, #1
    5910:	4618      	mov	r0, r3
    5912:	4b0f      	ldr	r3, [pc, #60]	; (5950 <_calendar_init+0xa8>)
    5914:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5916:	687b      	ldr	r3, [r7, #4]
    5918:	681b      	ldr	r3, [r3, #0]
    591a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    591e:	4618      	mov	r0, r3
    5920:	4b0d      	ldr	r3, [pc, #52]	; (5958 <_calendar_init+0xb0>)
    5922:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5928:	2100      	movs	r1, #0
    592a:	4618      	mov	r0, r3
    592c:	4b0b      	ldr	r3, [pc, #44]	; (595c <_calendar_init+0xb4>)
    592e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5930:	2300      	movs	r3, #0
}
    5932:	4618      	mov	r0, r3
    5934:	3708      	adds	r7, #8
    5936:	46bd      	mov	sp, r7
    5938:	bd80      	pop	{r7, pc}
    593a:	bf00      	nop
    593c:	000109a4 	.word	0x000109a4
    5940:	00003825 	.word	0x00003825
    5944:	20000bfc 	.word	0x20000bfc
    5948:	000057d9 	.word	0x000057d9
    594c:	00005815 	.word	0x00005815
    5950:	0000571d 	.word	0x0000571d
    5954:	000057ad 	.word	0x000057ad
    5958:	00005845 	.word	0x00005845
    595c:	0000588d 	.word	0x0000588d

00005960 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    5960:	b580      	push	{r7, lr}
    5962:	b082      	sub	sp, #8
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5968:	687b      	ldr	r3, [r7, #4]
    596a:	2b00      	cmp	r3, #0
    596c:	d005      	beq.n	597a <_calendar_get_counter+0x1a>
    596e:	687b      	ldr	r3, [r7, #4]
    5970:	681b      	ldr	r3, [r3, #0]
    5972:	2b00      	cmp	r3, #0
    5974:	d001      	beq.n	597a <_calendar_get_counter+0x1a>
    5976:	2301      	movs	r3, #1
    5978:	e000      	b.n	597c <_calendar_get_counter+0x1c>
    597a:	2300      	movs	r3, #0
    597c:	f003 0301 	and.w	r3, r3, #1
    5980:	b2db      	uxtb	r3, r3
    5982:	2299      	movs	r2, #153	; 0x99
    5984:	4906      	ldr	r1, [pc, #24]	; (59a0 <_calendar_get_counter+0x40>)
    5986:	4618      	mov	r0, r3
    5988:	4b06      	ldr	r3, [pc, #24]	; (59a4 <_calendar_get_counter+0x44>)
    598a:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	4618      	mov	r0, r3
    5992:	4b05      	ldr	r3, [pc, #20]	; (59a8 <_calendar_get_counter+0x48>)
    5994:	4798      	blx	r3
    5996:	4603      	mov	r3, r0
}
    5998:	4618      	mov	r0, r3
    599a:	3708      	adds	r7, #8
    599c:	46bd      	mov	sp, r7
    599e:	bd80      	pop	{r7, pc}
    59a0:	000109a4 	.word	0x000109a4
    59a4:	00003825 	.word	0x00003825
    59a8:	0000586d 	.word	0x0000586d

000059ac <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    59ac:	b580      	push	{r7, lr}
    59ae:	b084      	sub	sp, #16
    59b0:	af00      	add	r7, sp, #0
    59b2:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	681b      	ldr	r3, [r3, #0]
    59b8:	4618      	mov	r0, r3
    59ba:	4b19      	ldr	r3, [pc, #100]	; (5a20 <_rtc_interrupt_handler+0x74>)
    59bc:	4798      	blx	r3
    59be:	4603      	mov	r3, r0
    59c0:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    59c2:	687b      	ldr	r3, [r7, #4]
    59c4:	681b      	ldr	r3, [r3, #0]
    59c6:	4618      	mov	r0, r3
    59c8:	4b16      	ldr	r3, [pc, #88]	; (5a24 <_rtc_interrupt_handler+0x78>)
    59ca:	4798      	blx	r3
    59cc:	4603      	mov	r3, r0
    59ce:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    59d0:	89fa      	ldrh	r2, [r7, #14]
    59d2:	89bb      	ldrh	r3, [r7, #12]
    59d4:	4013      	ands	r3, r2
    59d6:	b29b      	uxth	r3, r3
    59d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    59dc:	2b00      	cmp	r3, #0
    59de:	d009      	beq.n	59f4 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	685b      	ldr	r3, [r3, #4]
    59e4:	6878      	ldr	r0, [r7, #4]
    59e6:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	681b      	ldr	r3, [r3, #0]
    59ec:	4618      	mov	r0, r3
    59ee:	4b0e      	ldr	r3, [pc, #56]	; (5a28 <_rtc_interrupt_handler+0x7c>)
    59f0:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    59f2:	e010      	b.n	5a16 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    59f4:	89fa      	ldrh	r2, [r7, #14]
    59f6:	89bb      	ldrh	r3, [r7, #12]
    59f8:	4013      	ands	r3, r2
    59fa:	b29b      	uxth	r3, r3
    59fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5a00:	2b00      	cmp	r3, #0
    5a02:	d008      	beq.n	5a16 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5a04:	687b      	ldr	r3, [r7, #4]
    5a06:	689b      	ldr	r3, [r3, #8]
    5a08:	6878      	ldr	r0, [r7, #4]
    5a0a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5a0c:	687b      	ldr	r3, [r7, #4]
    5a0e:	681b      	ldr	r3, [r3, #0]
    5a10:	4618      	mov	r0, r3
    5a12:	4b06      	ldr	r3, [pc, #24]	; (5a2c <_rtc_interrupt_handler+0x80>)
    5a14:	4798      	blx	r3
}
    5a16:	bf00      	nop
    5a18:	3710      	adds	r7, #16
    5a1a:	46bd      	mov	sp, r7
    5a1c:	bd80      	pop	{r7, pc}
    5a1e:	bf00      	nop
    5a20:	00005779 	.word	0x00005779
    5a24:	00005793 	.word	0x00005793
    5a28:	00005741 	.word	0x00005741
    5a2c:	0000575d 	.word	0x0000575d

00005a30 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5a30:	b580      	push	{r7, lr}
    5a32:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5a34:	4b03      	ldr	r3, [pc, #12]	; (5a44 <RTC_Handler+0x14>)
    5a36:	681b      	ldr	r3, [r3, #0]
    5a38:	4618      	mov	r0, r3
    5a3a:	4b03      	ldr	r3, [pc, #12]	; (5a48 <RTC_Handler+0x18>)
    5a3c:	4798      	blx	r3
}
    5a3e:	bf00      	nop
    5a40:	bd80      	pop	{r7, pc}
    5a42:	bf00      	nop
    5a44:	20000bfc 	.word	0x20000bfc
    5a48:	000059ad 	.word	0x000059ad

00005a4c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5a4c:	b480      	push	{r7}
    5a4e:	b083      	sub	sp, #12
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
    5a54:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5a56:	bf00      	nop
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	69da      	ldr	r2, [r3, #28]
    5a5c:	683b      	ldr	r3, [r7, #0]
    5a5e:	4013      	ands	r3, r2
    5a60:	2b00      	cmp	r3, #0
    5a62:	d1f9      	bne.n	5a58 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5a64:	bf00      	nop
    5a66:	370c      	adds	r7, #12
    5a68:	46bd      	mov	sp, r7
    5a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a6e:	4770      	bx	lr

00005a70 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5a70:	b480      	push	{r7}
    5a72:	b083      	sub	sp, #12
    5a74:	af00      	add	r7, sp, #0
    5a76:	6078      	str	r0, [r7, #4]
    5a78:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5a7a:	687b      	ldr	r3, [r7, #4]
    5a7c:	69da      	ldr	r2, [r3, #28]
    5a7e:	683b      	ldr	r3, [r7, #0]
    5a80:	4013      	ands	r3, r2
    5a82:	2b00      	cmp	r3, #0
    5a84:	bf14      	ite	ne
    5a86:	2301      	movne	r3, #1
    5a88:	2300      	moveq	r3, #0
    5a8a:	b2db      	uxtb	r3, r3
}
    5a8c:	4618      	mov	r0, r3
    5a8e:	370c      	adds	r7, #12
    5a90:	46bd      	mov	sp, r7
    5a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a96:	4770      	bx	lr

00005a98 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5a98:	b480      	push	{r7}
    5a9a:	b083      	sub	sp, #12
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	6078      	str	r0, [r7, #4]
    5aa0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5aa2:	bf00      	nop
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	69da      	ldr	r2, [r3, #28]
    5aa8:	683b      	ldr	r3, [r7, #0]
    5aaa:	4013      	ands	r3, r2
    5aac:	2b00      	cmp	r3, #0
    5aae:	d1f9      	bne.n	5aa4 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5ab0:	bf00      	nop
    5ab2:	370c      	adds	r7, #12
    5ab4:	46bd      	mov	sp, r7
    5ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aba:	4770      	bx	lr

00005abc <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5abc:	b480      	push	{r7}
    5abe:	b083      	sub	sp, #12
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	6078      	str	r0, [r7, #4]
    5ac4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	69da      	ldr	r2, [r3, #28]
    5aca:	683b      	ldr	r3, [r7, #0]
    5acc:	4013      	ands	r3, r2
    5ace:	2b00      	cmp	r3, #0
    5ad0:	bf14      	ite	ne
    5ad2:	2301      	movne	r3, #1
    5ad4:	2300      	moveq	r3, #0
    5ad6:	b2db      	uxtb	r3, r3
}
    5ad8:	4618      	mov	r0, r3
    5ada:	370c      	adds	r7, #12
    5adc:	46bd      	mov	sp, r7
    5ade:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ae2:	4770      	bx	lr

00005ae4 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5ae4:	b480      	push	{r7}
    5ae6:	b083      	sub	sp, #12
    5ae8:	af00      	add	r7, sp, #0
    5aea:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5aec:	687b      	ldr	r3, [r7, #4]
    5aee:	2201      	movs	r2, #1
    5af0:	761a      	strb	r2, [r3, #24]
}
    5af2:	bf00      	nop
    5af4:	370c      	adds	r7, #12
    5af6:	46bd      	mov	sp, r7
    5af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5afc:	4770      	bx	lr

00005afe <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5afe:	b480      	push	{r7}
    5b00:	b083      	sub	sp, #12
    5b02:	af00      	add	r7, sp, #0
    5b04:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	2202      	movs	r2, #2
    5b0a:	761a      	strb	r2, [r3, #24]
}
    5b0c:	bf00      	nop
    5b0e:	370c      	adds	r7, #12
    5b10:	46bd      	mov	sp, r7
    5b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b16:	4770      	bx	lr

00005b18 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5b18:	b480      	push	{r7}
    5b1a:	b083      	sub	sp, #12
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	7e1b      	ldrb	r3, [r3, #24]
    5b24:	b2db      	uxtb	r3, r3
}
    5b26:	4618      	mov	r0, r3
    5b28:	370c      	adds	r7, #12
    5b2a:	46bd      	mov	sp, r7
    5b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b30:	4770      	bx	lr

00005b32 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5b32:	b480      	push	{r7}
    5b34:	b085      	sub	sp, #20
    5b36:	af00      	add	r7, sp, #0
    5b38:	6078      	str	r0, [r7, #4]
    5b3a:	460b      	mov	r3, r1
    5b3c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5b3e:	687b      	ldr	r3, [r7, #4]
    5b40:	7e1b      	ldrb	r3, [r3, #24]
    5b42:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5b44:	7bfa      	ldrb	r2, [r7, #15]
    5b46:	78fb      	ldrb	r3, [r7, #3]
    5b48:	4013      	ands	r3, r2
    5b4a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5b4c:	7bfb      	ldrb	r3, [r7, #15]
}
    5b4e:	4618      	mov	r0, r3
    5b50:	3714      	adds	r7, #20
    5b52:	46bd      	mov	sp, r7
    5b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b58:	4770      	bx	lr

00005b5a <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5b5a:	b480      	push	{r7}
    5b5c:	b083      	sub	sp, #12
    5b5e:	af00      	add	r7, sp, #0
    5b60:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5b62:	687b      	ldr	r3, [r7, #4]
    5b64:	7e1b      	ldrb	r3, [r3, #24]
    5b66:	b2db      	uxtb	r3, r3
}
    5b68:	4618      	mov	r0, r3
    5b6a:	370c      	adds	r7, #12
    5b6c:	46bd      	mov	sp, r7
    5b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b72:	4770      	bx	lr

00005b74 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5b74:	b480      	push	{r7}
    5b76:	b083      	sub	sp, #12
    5b78:	af00      	add	r7, sp, #0
    5b7a:	6078      	str	r0, [r7, #4]
    5b7c:	460b      	mov	r3, r1
    5b7e:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	78fa      	ldrb	r2, [r7, #3]
    5b84:	761a      	strb	r2, [r3, #24]
}
    5b86:	bf00      	nop
    5b88:	370c      	adds	r7, #12
    5b8a:	46bd      	mov	sp, r7
    5b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b90:	4770      	bx	lr
	...

00005b94 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5b94:	b580      	push	{r7, lr}
    5b96:	b082      	sub	sp, #8
    5b98:	af00      	add	r7, sp, #0
    5b9a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5b9c:	687b      	ldr	r3, [r7, #4]
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	f023 0202 	bic.w	r2, r3, #2
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ba8:	2103      	movs	r1, #3
    5baa:	6878      	ldr	r0, [r7, #4]
    5bac:	4b02      	ldr	r3, [pc, #8]	; (5bb8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5bae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bb0:	bf00      	nop
    5bb2:	3708      	adds	r7, #8
    5bb4:	46bd      	mov	sp, r7
    5bb6:	bd80      	pop	{r7, pc}
    5bb8:	00005a4d 	.word	0x00005a4d

00005bbc <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5bbc:	b480      	push	{r7}
    5bbe:	b085      	sub	sp, #20
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5bca:	68fb      	ldr	r3, [r7, #12]
    5bcc:	0edb      	lsrs	r3, r3, #27
    5bce:	f003 0301 	and.w	r3, r3, #1
    5bd2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5bd4:	68fb      	ldr	r3, [r7, #12]
    5bd6:	2b00      	cmp	r3, #0
    5bd8:	bf14      	ite	ne
    5bda:	2301      	movne	r3, #1
    5bdc:	2300      	moveq	r3, #0
    5bde:	b2db      	uxtb	r3, r3
}
    5be0:	4618      	mov	r0, r3
    5be2:	3714      	adds	r7, #20
    5be4:	46bd      	mov	sp, r7
    5be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bea:	4770      	bx	lr

00005bec <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5bec:	b580      	push	{r7, lr}
    5bee:	b084      	sub	sp, #16
    5bf0:	af00      	add	r7, sp, #0
    5bf2:	6078      	str	r0, [r7, #4]
    5bf4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5bf6:	2103      	movs	r1, #3
    5bf8:	6878      	ldr	r0, [r7, #4]
    5bfa:	4b07      	ldr	r3, [pc, #28]	; (5c18 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5bfc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	681b      	ldr	r3, [r3, #0]
    5c02:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5c04:	68fa      	ldr	r2, [r7, #12]
    5c06:	683b      	ldr	r3, [r7, #0]
    5c08:	4013      	ands	r3, r2
    5c0a:	60fb      	str	r3, [r7, #12]
	return tmp;
    5c0c:	68fb      	ldr	r3, [r7, #12]
}
    5c0e:	4618      	mov	r0, r3
    5c10:	3710      	adds	r7, #16
    5c12:	46bd      	mov	sp, r7
    5c14:	bd80      	pop	{r7, pc}
    5c16:	bf00      	nop
    5c18:	00005a4d 	.word	0x00005a4d

00005c1c <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5c1c:	b580      	push	{r7, lr}
    5c1e:	b082      	sub	sp, #8
    5c20:	af00      	add	r7, sp, #0
    5c22:	6078      	str	r0, [r7, #4]
    5c24:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	683a      	ldr	r2, [r7, #0]
    5c2a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5c2c:	2103      	movs	r1, #3
    5c2e:	6878      	ldr	r0, [r7, #4]
    5c30:	4b02      	ldr	r3, [pc, #8]	; (5c3c <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5c32:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c34:	bf00      	nop
    5c36:	3708      	adds	r7, #8
    5c38:	46bd      	mov	sp, r7
    5c3a:	bd80      	pop	{r7, pc}
    5c3c:	00005a4d 	.word	0x00005a4d

00005c40 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	681b      	ldr	r3, [r3, #0]
    5c4c:	f043 0202 	orr.w	r2, r3, #2
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5c54:	2103      	movs	r1, #3
    5c56:	6878      	ldr	r0, [r7, #4]
    5c58:	4b02      	ldr	r3, [pc, #8]	; (5c64 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    5c5a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c5c:	bf00      	nop
    5c5e:	3708      	adds	r7, #8
    5c60:	46bd      	mov	sp, r7
    5c62:	bd80      	pop	{r7, pc}
    5c64:	00005a99 	.word	0x00005a99

00005c68 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5c68:	b580      	push	{r7, lr}
    5c6a:	b084      	sub	sp, #16
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5c70:	2103      	movs	r1, #3
    5c72:	6878      	ldr	r0, [r7, #4]
    5c74:	4b09      	ldr	r3, [pc, #36]	; (5c9c <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5c76:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	681b      	ldr	r3, [r3, #0]
    5c7c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5c7e:	68fb      	ldr	r3, [r7, #12]
    5c80:	085b      	lsrs	r3, r3, #1
    5c82:	f003 0301 	and.w	r3, r3, #1
    5c86:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5c88:	68fb      	ldr	r3, [r7, #12]
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	bf14      	ite	ne
    5c8e:	2301      	movne	r3, #1
    5c90:	2300      	moveq	r3, #0
    5c92:	b2db      	uxtb	r3, r3
}
    5c94:	4618      	mov	r0, r3
    5c96:	3710      	adds	r7, #16
    5c98:	46bd      	mov	sp, r7
    5c9a:	bd80      	pop	{r7, pc}
    5c9c:	00005a99 	.word	0x00005a99

00005ca0 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5ca0:	b580      	push	{r7, lr}
    5ca2:	b082      	sub	sp, #8
    5ca4:	af00      	add	r7, sp, #0
    5ca6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5ca8:	687b      	ldr	r3, [r7, #4]
    5caa:	681b      	ldr	r3, [r3, #0]
    5cac:	f023 0202 	bic.w	r2, r3, #2
    5cb0:	687b      	ldr	r3, [r7, #4]
    5cb2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5cb4:	2103      	movs	r1, #3
    5cb6:	6878      	ldr	r0, [r7, #4]
    5cb8:	4b02      	ldr	r3, [pc, #8]	; (5cc4 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5cba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cbc:	bf00      	nop
    5cbe:	3708      	adds	r7, #8
    5cc0:	46bd      	mov	sp, r7
    5cc2:	bd80      	pop	{r7, pc}
    5cc4:	00005a99 	.word	0x00005a99

00005cc8 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5cc8:	b580      	push	{r7, lr}
    5cca:	b084      	sub	sp, #16
    5ccc:	af00      	add	r7, sp, #0
    5cce:	6078      	str	r0, [r7, #4]
    5cd0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5cd2:	2103      	movs	r1, #3
    5cd4:	6878      	ldr	r0, [r7, #4]
    5cd6:	4b07      	ldr	r3, [pc, #28]	; (5cf4 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5cd8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	681b      	ldr	r3, [r3, #0]
    5cde:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5ce0:	68fa      	ldr	r2, [r7, #12]
    5ce2:	683b      	ldr	r3, [r7, #0]
    5ce4:	4013      	ands	r3, r2
    5ce6:	60fb      	str	r3, [r7, #12]
	return tmp;
    5ce8:	68fb      	ldr	r3, [r7, #12]
}
    5cea:	4618      	mov	r0, r3
    5cec:	3710      	adds	r7, #16
    5cee:	46bd      	mov	sp, r7
    5cf0:	bd80      	pop	{r7, pc}
    5cf2:	bf00      	nop
    5cf4:	00005a99 	.word	0x00005a99

00005cf8 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5cf8:	b580      	push	{r7, lr}
    5cfa:	b082      	sub	sp, #8
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	6078      	str	r0, [r7, #4]
    5d00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	683a      	ldr	r2, [r7, #0]
    5d06:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d08:	2103      	movs	r1, #3
    5d0a:	6878      	ldr	r0, [r7, #4]
    5d0c:	4b02      	ldr	r3, [pc, #8]	; (5d18 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5d0e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d10:	bf00      	nop
    5d12:	3708      	adds	r7, #8
    5d14:	46bd      	mov	sp, r7
    5d16:	bd80      	pop	{r7, pc}
    5d18:	00005a99 	.word	0x00005a99

00005d1c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5d1c:	b580      	push	{r7, lr}
    5d1e:	b082      	sub	sp, #8
    5d20:	af00      	add	r7, sp, #0
    5d22:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5d24:	687b      	ldr	r3, [r7, #4]
    5d26:	685b      	ldr	r3, [r3, #4]
    5d28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d30:	2104      	movs	r1, #4
    5d32:	6878      	ldr	r0, [r7, #4]
    5d34:	4b02      	ldr	r3, [pc, #8]	; (5d40 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5d36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d38:	bf00      	nop
    5d3a:	3708      	adds	r7, #8
    5d3c:	46bd      	mov	sp, r7
    5d3e:	bd80      	pop	{r7, pc}
    5d40:	00005a4d 	.word	0x00005a4d

00005d44 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5d44:	b580      	push	{r7, lr}
    5d46:	b082      	sub	sp, #8
    5d48:	af00      	add	r7, sp, #0
    5d4a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5d4c:	687b      	ldr	r3, [r7, #4]
    5d4e:	685b      	ldr	r3, [r3, #4]
    5d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d58:	2104      	movs	r1, #4
    5d5a:	6878      	ldr	r0, [r7, #4]
    5d5c:	4b02      	ldr	r3, [pc, #8]	; (5d68 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5d5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d60:	bf00      	nop
    5d62:	3708      	adds	r7, #8
    5d64:	46bd      	mov	sp, r7
    5d66:	bd80      	pop	{r7, pc}
    5d68:	00005a4d 	.word	0x00005a4d

00005d6c <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5d6c:	b580      	push	{r7, lr}
    5d6e:	b082      	sub	sp, #8
    5d70:	af00      	add	r7, sp, #0
    5d72:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	685b      	ldr	r3, [r3, #4]
    5d78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d80:	2104      	movs	r1, #4
    5d82:	6878      	ldr	r0, [r7, #4]
    5d84:	4b02      	ldr	r3, [pc, #8]	; (5d90 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5d86:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d88:	bf00      	nop
    5d8a:	3708      	adds	r7, #8
    5d8c:	46bd      	mov	sp, r7
    5d8e:	bd80      	pop	{r7, pc}
    5d90:	00005a4d 	.word	0x00005a4d

00005d94 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5d94:	b580      	push	{r7, lr}
    5d96:	b082      	sub	sp, #8
    5d98:	af00      	add	r7, sp, #0
    5d9a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	685b      	ldr	r3, [r3, #4]
    5da0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5da8:	2104      	movs	r1, #4
    5daa:	6878      	ldr	r0, [r7, #4]
    5dac:	4b02      	ldr	r3, [pc, #8]	; (5db8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5dae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5db0:	bf00      	nop
    5db2:	3708      	adds	r7, #8
    5db4:	46bd      	mov	sp, r7
    5db6:	bd80      	pop	{r7, pc}
    5db8:	00005a4d 	.word	0x00005a4d

00005dbc <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5dbc:	b580      	push	{r7, lr}
    5dbe:	b082      	sub	sp, #8
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	6078      	str	r0, [r7, #4]
    5dc4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5dc6:	687b      	ldr	r3, [r7, #4]
    5dc8:	685a      	ldr	r2, [r3, #4]
    5dca:	683b      	ldr	r3, [r7, #0]
    5dcc:	041b      	lsls	r3, r3, #16
    5dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5dd2:	431a      	orrs	r2, r3
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dd8:	2104      	movs	r1, #4
    5dda:	6878      	ldr	r0, [r7, #4]
    5ddc:	4b02      	ldr	r3, [pc, #8]	; (5de8 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5dde:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5de0:	bf00      	nop
    5de2:	3708      	adds	r7, #8
    5de4:	46bd      	mov	sp, r7
    5de6:	bd80      	pop	{r7, pc}
    5de8:	00005a4d 	.word	0x00005a4d

00005dec <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5dec:	b580      	push	{r7, lr}
    5dee:	b082      	sub	sp, #8
    5df0:	af00      	add	r7, sp, #0
    5df2:	6078      	str	r0, [r7, #4]
    5df4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	683a      	ldr	r2, [r7, #0]
    5dfa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dfc:	2104      	movs	r1, #4
    5dfe:	6878      	ldr	r0, [r7, #4]
    5e00:	4b02      	ldr	r3, [pc, #8]	; (5e0c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5e02:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e04:	bf00      	nop
    5e06:	3708      	adds	r7, #8
    5e08:	46bd      	mov	sp, r7
    5e0a:	bd80      	pop	{r7, pc}
    5e0c:	00005a4d 	.word	0x00005a4d

00005e10 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5e10:	b580      	push	{r7, lr}
    5e12:	b082      	sub	sp, #8
    5e14:	af00      	add	r7, sp, #0
    5e16:	6078      	str	r0, [r7, #4]
    5e18:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5e1a:	687b      	ldr	r3, [r7, #4]
    5e1c:	683a      	ldr	r2, [r7, #0]
    5e1e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5e20:	2117      	movs	r1, #23
    5e22:	6878      	ldr	r0, [r7, #4]
    5e24:	4b02      	ldr	r3, [pc, #8]	; (5e30 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5e26:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e28:	bf00      	nop
    5e2a:	3708      	adds	r7, #8
    5e2c:	46bd      	mov	sp, r7
    5e2e:	bd80      	pop	{r7, pc}
    5e30:	00005a99 	.word	0x00005a99

00005e34 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5e34:	b480      	push	{r7}
    5e36:	b083      	sub	sp, #12
    5e38:	af00      	add	r7, sp, #0
    5e3a:	6078      	str	r0, [r7, #4]
    5e3c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5e3e:	687b      	ldr	r3, [r7, #4]
    5e40:	683a      	ldr	r2, [r7, #0]
    5e42:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e44:	bf00      	nop
    5e46:	370c      	adds	r7, #12
    5e48:	46bd      	mov	sp, r7
    5e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e4e:	4770      	bx	lr

00005e50 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5e50:	b480      	push	{r7}
    5e52:	b083      	sub	sp, #12
    5e54:	af00      	add	r7, sp, #0
    5e56:	6078      	str	r0, [r7, #4]
    5e58:	460b      	mov	r3, r1
    5e5a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	78fa      	ldrb	r2, [r7, #3]
    5e60:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e62:	bf00      	nop
    5e64:	370c      	adds	r7, #12
    5e66:	46bd      	mov	sp, r7
    5e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e6c:	4770      	bx	lr
	...

00005e70 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5e70:	b580      	push	{r7, lr}
    5e72:	b084      	sub	sp, #16
    5e74:	af00      	add	r7, sp, #0
    5e76:	6078      	str	r0, [r7, #4]
    5e78:	460b      	mov	r3, r1
    5e7a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5e7c:	687b      	ldr	r3, [r7, #4]
    5e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e80:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5e82:	68fb      	ldr	r3, [r7, #12]
    5e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5e88:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5e8a:	78fb      	ldrb	r3, [r7, #3]
    5e8c:	039b      	lsls	r3, r3, #14
    5e8e:	461a      	mov	r2, r3
    5e90:	68fb      	ldr	r3, [r7, #12]
    5e92:	4313      	orrs	r3, r2
    5e94:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5e96:	687b      	ldr	r3, [r7, #4]
    5e98:	68fa      	ldr	r2, [r7, #12]
    5e9a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e9c:	2104      	movs	r1, #4
    5e9e:	6878      	ldr	r0, [r7, #4]
    5ea0:	4b02      	ldr	r3, [pc, #8]	; (5eac <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5ea2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ea4:	bf00      	nop
    5ea6:	3710      	adds	r7, #16
    5ea8:	46bd      	mov	sp, r7
    5eaa:	bd80      	pop	{r7, pc}
    5eac:	00005a4d 	.word	0x00005a4d

00005eb0 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5eb0:	b580      	push	{r7, lr}
    5eb2:	b082      	sub	sp, #8
    5eb4:	af00      	add	r7, sp, #0
    5eb6:	6078      	str	r0, [r7, #4]
    5eb8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	683a      	ldr	r2, [r7, #0]
    5ebe:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ec0:	2104      	movs	r1, #4
    5ec2:	6878      	ldr	r0, [r7, #4]
    5ec4:	4b02      	ldr	r3, [pc, #8]	; (5ed0 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5ec6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ec8:	bf00      	nop
    5eca:	3708      	adds	r7, #8
    5ecc:	46bd      	mov	sp, r7
    5ece:	bd80      	pop	{r7, pc}
    5ed0:	00005a4d 	.word	0x00005a4d

00005ed4 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b082      	sub	sp, #8
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5edc:	2104      	movs	r1, #4
    5ede:	6878      	ldr	r0, [r7, #4]
    5ee0:	4b03      	ldr	r3, [pc, #12]	; (5ef0 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5ee2:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5ee8:	4618      	mov	r0, r3
    5eea:	3708      	adds	r7, #8
    5eec:	46bd      	mov	sp, r7
    5eee:	bd80      	pop	{r7, pc}
    5ef0:	00005a4d 	.word	0x00005a4d

00005ef4 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5ef4:	b480      	push	{r7}
    5ef6:	b083      	sub	sp, #12
    5ef8:	af00      	add	r7, sp, #0
    5efa:	6078      	str	r0, [r7, #4]
    5efc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5efe:	687b      	ldr	r3, [r7, #4]
    5f00:	683a      	ldr	r2, [r7, #0]
    5f02:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f04:	bf00      	nop
    5f06:	370c      	adds	r7, #12
    5f08:	46bd      	mov	sp, r7
    5f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f0e:	4770      	bx	lr

00005f10 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5f10:	b580      	push	{r7, lr}
    5f12:	b082      	sub	sp, #8
    5f14:	af00      	add	r7, sp, #0
    5f16:	6078      	str	r0, [r7, #4]
    5f18:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5f1a:	687b      	ldr	r3, [r7, #4]
    5f1c:	683a      	ldr	r2, [r7, #0]
    5f1e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f20:	2104      	movs	r1, #4
    5f22:	6878      	ldr	r0, [r7, #4]
    5f24:	4b02      	ldr	r3, [pc, #8]	; (5f30 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5f26:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f28:	bf00      	nop
    5f2a:	3708      	adds	r7, #8
    5f2c:	46bd      	mov	sp, r7
    5f2e:	bd80      	pop	{r7, pc}
    5f30:	00005a4d 	.word	0x00005a4d

00005f34 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5f34:	b580      	push	{r7, lr}
    5f36:	b082      	sub	sp, #8
    5f38:	af00      	add	r7, sp, #0
    5f3a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f3c:	2104      	movs	r1, #4
    5f3e:	6878      	ldr	r0, [r7, #4]
    5f40:	4b03      	ldr	r3, [pc, #12]	; (5f50 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5f42:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5f48:	4618      	mov	r0, r3
    5f4a:	3708      	adds	r7, #8
    5f4c:	46bd      	mov	sp, r7
    5f4e:	bd80      	pop	{r7, pc}
    5f50:	00005a4d 	.word	0x00005a4d

00005f54 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5f54:	b480      	push	{r7}
    5f56:	b083      	sub	sp, #12
    5f58:	af00      	add	r7, sp, #0
    5f5a:	6078      	str	r0, [r7, #4]
    5f5c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5f5e:	687b      	ldr	r3, [r7, #4]
    5f60:	683a      	ldr	r2, [r7, #0]
    5f62:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f64:	bf00      	nop
    5f66:	370c      	adds	r7, #12
    5f68:	46bd      	mov	sp, r7
    5f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f6e:	4770      	bx	lr

00005f70 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5f70:	b480      	push	{r7}
    5f72:	b083      	sub	sp, #12
    5f74:	af00      	add	r7, sp, #0
    5f76:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5f78:	687b      	ldr	r3, [r7, #4]
    5f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5f7c:	4618      	mov	r0, r3
    5f7e:	370c      	adds	r7, #12
    5f80:	46bd      	mov	sp, r7
    5f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f86:	4770      	bx	lr

00005f88 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5f88:	b480      	push	{r7}
    5f8a:	b083      	sub	sp, #12
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
    5f90:	460b      	mov	r3, r1
    5f92:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5f94:	687b      	ldr	r3, [r7, #4]
    5f96:	78fa      	ldrb	r2, [r7, #3]
    5f98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f9c:	bf00      	nop
    5f9e:	370c      	adds	r7, #12
    5fa0:	46bd      	mov	sp, r7
    5fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fa6:	4770      	bx	lr

00005fa8 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5fa8:	b480      	push	{r7}
    5faa:	b083      	sub	sp, #12
    5fac:	af00      	add	r7, sp, #0
    5fae:	6078      	str	r0, [r7, #4]
    5fb0:	460b      	mov	r3, r1
    5fb2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	887a      	ldrh	r2, [r7, #2]
    5fb8:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fba:	bf00      	nop
    5fbc:	370c      	adds	r7, #12
    5fbe:	46bd      	mov	sp, r7
    5fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fc4:	4770      	bx	lr
	...

00005fc8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fd0:	2104      	movs	r1, #4
    5fd2:	6878      	ldr	r0, [r7, #4]
    5fd4:	4b04      	ldr	r3, [pc, #16]	; (5fe8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5fd6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	8b5b      	ldrh	r3, [r3, #26]
    5fdc:	b29b      	uxth	r3, r3
}
    5fde:	4618      	mov	r0, r3
    5fe0:	3708      	adds	r7, #8
    5fe2:	46bd      	mov	sp, r7
    5fe4:	bd80      	pop	{r7, pc}
    5fe6:	bf00      	nop
    5fe8:	00005a4d 	.word	0x00005a4d

00005fec <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5fec:	b4b0      	push	{r4, r5, r7}
    5fee:	b08d      	sub	sp, #52	; 0x34
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5ff4:	4b13      	ldr	r3, [pc, #76]	; (6044 <_sercom_get_hardware_index+0x58>)
    5ff6:	f107 040c 	add.w	r4, r7, #12
    5ffa:	461d      	mov	r5, r3
    5ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6000:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6008:	2300      	movs	r3, #0
    600a:	62fb      	str	r3, [r7, #44]	; 0x2c
    600c:	e010      	b.n	6030 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6010:	009b      	lsls	r3, r3, #2
    6012:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6016:	4413      	add	r3, r2
    6018:	f853 3c24 	ldr.w	r3, [r3, #-36]
    601c:	461a      	mov	r2, r3
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	429a      	cmp	r2, r3
    6022:	d102      	bne.n	602a <_sercom_get_hardware_index+0x3e>
			return i;
    6024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6026:	b2db      	uxtb	r3, r3
    6028:	e006      	b.n	6038 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    602c:	3301      	adds	r3, #1
    602e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6032:	2b07      	cmp	r3, #7
    6034:	d9eb      	bls.n	600e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6036:	2300      	movs	r3, #0
}
    6038:	4618      	mov	r0, r3
    603a:	3734      	adds	r7, #52	; 0x34
    603c:	46bd      	mov	sp, r7
    603e:	bcb0      	pop	{r4, r5, r7}
    6040:	4770      	bx	lr
    6042:	bf00      	nop
    6044:	000109d8 	.word	0x000109d8

00006048 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6048:	b580      	push	{r7, lr}
    604a:	b084      	sub	sp, #16
    604c:	af00      	add	r7, sp, #0
    604e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6050:	6878      	ldr	r0, [r7, #4]
    6052:	4b13      	ldr	r3, [pc, #76]	; (60a0 <_get_i2cm_index+0x58>)
    6054:	4798      	blx	r3
    6056:	4603      	mov	r3, r0
    6058:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    605a:	2300      	movs	r3, #0
    605c:	73fb      	strb	r3, [r7, #15]
    605e:	e010      	b.n	6082 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6060:	7bfa      	ldrb	r2, [r7, #15]
    6062:	4910      	ldr	r1, [pc, #64]	; (60a4 <_get_i2cm_index+0x5c>)
    6064:	4613      	mov	r3, r2
    6066:	005b      	lsls	r3, r3, #1
    6068:	4413      	add	r3, r2
    606a:	00db      	lsls	r3, r3, #3
    606c:	440b      	add	r3, r1
    606e:	781b      	ldrb	r3, [r3, #0]
    6070:	7bba      	ldrb	r2, [r7, #14]
    6072:	429a      	cmp	r2, r3
    6074:	d102      	bne.n	607c <_get_i2cm_index+0x34>
			return i;
    6076:	f997 300f 	ldrsb.w	r3, [r7, #15]
    607a:	e00d      	b.n	6098 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    607c:	7bfb      	ldrb	r3, [r7, #15]
    607e:	3301      	adds	r3, #1
    6080:	73fb      	strb	r3, [r7, #15]
    6082:	7bfb      	ldrb	r3, [r7, #15]
    6084:	2b02      	cmp	r3, #2
    6086:	d9eb      	bls.n	6060 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6088:	f240 32a6 	movw	r2, #934	; 0x3a6
    608c:	4906      	ldr	r1, [pc, #24]	; (60a8 <_get_i2cm_index+0x60>)
    608e:	2000      	movs	r0, #0
    6090:	4b06      	ldr	r3, [pc, #24]	; (60ac <_get_i2cm_index+0x64>)
    6092:	4798      	blx	r3
	return -1;
    6094:	f04f 33ff 	mov.w	r3, #4294967295
}
    6098:	4618      	mov	r0, r3
    609a:	3710      	adds	r7, #16
    609c:	46bd      	mov	sp, r7
    609e:	bd80      	pop	{r7, pc}
    60a0:	00005fed 	.word	0x00005fed
    60a4:	20000018 	.word	0x20000018
    60a8:	000109bc 	.word	0x000109bc
    60ac:	00003825 	.word	0x00003825

000060b0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	b082      	sub	sp, #8
    60b4:	af00      	add	r7, sp, #0
    60b6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    60b8:	2103      	movs	r1, #3
    60ba:	6878      	ldr	r0, [r7, #4]
    60bc:	4b02      	ldr	r3, [pc, #8]	; (60c8 <_sercom_i2c_send_stop+0x18>)
    60be:	4798      	blx	r3
}
    60c0:	bf00      	nop
    60c2:	3708      	adds	r7, #8
    60c4:	46bd      	mov	sp, r7
    60c6:	bd80      	pop	{r7, pc}
    60c8:	00005dbd 	.word	0x00005dbd

000060cc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    60cc:	b590      	push	{r4, r7, lr}
    60ce:	b087      	sub	sp, #28
    60d0:	af00      	add	r7, sp, #0
    60d2:	60f8      	str	r0, [r7, #12]
    60d4:	60b9      	str	r1, [r7, #8]
    60d6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    60d8:	68f8      	ldr	r0, [r7, #12]
    60da:	4b7d      	ldr	r3, [pc, #500]	; (62d0 <_sercom_i2c_sync_analyse_flags+0x204>)
    60dc:	4798      	blx	r3
    60de:	4603      	mov	r3, r0
    60e0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    60e2:	68f8      	ldr	r0, [r7, #12]
    60e4:	4b7b      	ldr	r3, [pc, #492]	; (62d4 <_sercom_i2c_sync_analyse_flags+0x208>)
    60e6:	4798      	blx	r3
    60e8:	4603      	mov	r3, r0
    60ea:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    60ec:	68bb      	ldr	r3, [r7, #8]
    60ee:	f003 0301 	and.w	r3, r3, #1
    60f2:	2b00      	cmp	r3, #0
    60f4:	f000 8095 	beq.w	6222 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    60f8:	8a7b      	ldrh	r3, [r7, #18]
    60fa:	f003 0302 	and.w	r3, r3, #2
    60fe:	2b00      	cmp	r3, #0
    6100:	d01d      	beq.n	613e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6102:	68f8      	ldr	r0, [r7, #12]
    6104:	4b74      	ldr	r3, [pc, #464]	; (62d8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6106:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6108:	687b      	ldr	r3, [r7, #4]
    610a:	885b      	ldrh	r3, [r3, #2]
    610c:	b29b      	uxth	r3, r3
    610e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6112:	b29a      	uxth	r2, r3
    6114:	687b      	ldr	r3, [r7, #4]
    6116:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	885b      	ldrh	r3, [r3, #2]
    611c:	b29b      	uxth	r3, r3
    611e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6122:	b29a      	uxth	r2, r3
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6128:	8a7b      	ldrh	r3, [r7, #18]
    612a:	f003 0301 	and.w	r3, r3, #1
    612e:	2b00      	cmp	r3, #0
    6130:	d002      	beq.n	6138 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6132:	f06f 0304 	mvn.w	r3, #4
    6136:	e0c6      	b.n	62c6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6138:	f06f 0303 	mvn.w	r3, #3
    613c:	e0c3      	b.n	62c6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    613e:	8a7b      	ldrh	r3, [r7, #18]
    6140:	f003 0304 	and.w	r3, r3, #4
    6144:	2b00      	cmp	r3, #0
    6146:	d01f      	beq.n	6188 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6148:	687b      	ldr	r3, [r7, #4]
    614a:	685b      	ldr	r3, [r3, #4]
    614c:	2b00      	cmp	r3, #0
    614e:	dd07      	ble.n	6160 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6150:	687b      	ldr	r3, [r7, #4]
    6152:	885b      	ldrh	r3, [r3, #2]
    6154:	b29b      	uxth	r3, r3
    6156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    615a:	b29a      	uxth	r2, r3
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	885b      	ldrh	r3, [r3, #2]
    6164:	b29b      	uxth	r3, r3
    6166:	b21b      	sxth	r3, r3
    6168:	2b00      	cmp	r3, #0
    616a:	da02      	bge.n	6172 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    616c:	68f8      	ldr	r0, [r7, #12]
    616e:	4b5b      	ldr	r3, [pc, #364]	; (62dc <_sercom_i2c_sync_analyse_flags+0x210>)
    6170:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	885b      	ldrh	r3, [r3, #2]
    6176:	b29b      	uxth	r3, r3
    6178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    617c:	b29a      	uxth	r2, r3
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6182:	f06f 0301 	mvn.w	r3, #1
    6186:	e09e      	b.n	62c6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	885b      	ldrh	r3, [r3, #2]
    618c:	b29b      	uxth	r3, r3
    618e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6192:	2b00      	cmp	r3, #0
    6194:	d01c      	beq.n	61d0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	881b      	ldrh	r3, [r3, #0]
    619a:	121b      	asrs	r3, r3, #8
    619c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    619e:	f003 0406 	and.w	r4, r3, #6
    61a2:	68f8      	ldr	r0, [r7, #12]
    61a4:	4b4e      	ldr	r3, [pc, #312]	; (62e0 <_sercom_i2c_sync_analyse_flags+0x214>)
    61a6:	4798      	blx	r3
    61a8:	4603      	mov	r3, r0
    61aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    61ae:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    61b0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    61b4:	4619      	mov	r1, r3
    61b6:	68f8      	ldr	r0, [r7, #12]
    61b8:	4b4a      	ldr	r3, [pc, #296]	; (62e4 <_sercom_i2c_sync_analyse_flags+0x218>)
    61ba:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    61bc:	687b      	ldr	r3, [r7, #4]
    61be:	885b      	ldrh	r3, [r3, #2]
    61c0:	b29b      	uxth	r3, r3
    61c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    61c6:	b29a      	uxth	r2, r3
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    61cc:	2300      	movs	r3, #0
    61ce:	e07a      	b.n	62c6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	685b      	ldr	r3, [r3, #4]
    61d4:	2b00      	cmp	r3, #0
    61d6:	d111      	bne.n	61fc <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    61d8:	687b      	ldr	r3, [r7, #4]
    61da:	885b      	ldrh	r3, [r3, #2]
    61dc:	b29b      	uxth	r3, r3
    61de:	b21b      	sxth	r3, r3
    61e0:	2b00      	cmp	r3, #0
    61e2:	da02      	bge.n	61ea <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    61e4:	68f8      	ldr	r0, [r7, #12]
    61e6:	4b3d      	ldr	r3, [pc, #244]	; (62dc <_sercom_i2c_sync_analyse_flags+0x210>)
    61e8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	885b      	ldrh	r3, [r3, #2]
    61ee:	b29b      	uxth	r3, r3
    61f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    61f4:	b29a      	uxth	r2, r3
    61f6:	687b      	ldr	r3, [r7, #4]
    61f8:	805a      	strh	r2, [r3, #2]
    61fa:	e010      	b.n	621e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	689b      	ldr	r3, [r3, #8]
    6200:	781b      	ldrb	r3, [r3, #0]
    6202:	4619      	mov	r1, r3
    6204:	68f8      	ldr	r0, [r7, #12]
    6206:	4b38      	ldr	r3, [pc, #224]	; (62e8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6208:	4798      	blx	r3
				msg->buffer++;
    620a:	687b      	ldr	r3, [r7, #4]
    620c:	689b      	ldr	r3, [r3, #8]
    620e:	1c5a      	adds	r2, r3, #1
    6210:	687b      	ldr	r3, [r7, #4]
    6212:	609a      	str	r2, [r3, #8]
				msg->len--;
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	685b      	ldr	r3, [r3, #4]
    6218:	1e5a      	subs	r2, r3, #1
    621a:	687b      	ldr	r3, [r7, #4]
    621c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    621e:	2300      	movs	r3, #0
    6220:	e051      	b.n	62c6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6222:	68bb      	ldr	r3, [r7, #8]
    6224:	f003 0302 	and.w	r3, r3, #2
    6228:	2b00      	cmp	r3, #0
    622a:	d04b      	beq.n	62c4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    622c:	687b      	ldr	r3, [r7, #4]
    622e:	685b      	ldr	r3, [r3, #4]
    6230:	2b00      	cmp	r3, #0
    6232:	d041      	beq.n	62b8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6234:	8a7b      	ldrh	r3, [r7, #18]
    6236:	f003 0304 	and.w	r3, r3, #4
    623a:	2b00      	cmp	r3, #0
    623c:	d13c      	bne.n	62b8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    623e:	687b      	ldr	r3, [r7, #4]
    6240:	685b      	ldr	r3, [r3, #4]
    6242:	1e5a      	subs	r2, r3, #1
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	685b      	ldr	r3, [r3, #4]
    624c:	2b00      	cmp	r3, #0
    624e:	d102      	bne.n	6256 <_sercom_i2c_sync_analyse_flags+0x18a>
    6250:	697b      	ldr	r3, [r7, #20]
    6252:	2b00      	cmp	r3, #0
    6254:	d006      	beq.n	6264 <_sercom_i2c_sync_analyse_flags+0x198>
    6256:	687b      	ldr	r3, [r7, #4]
    6258:	685b      	ldr	r3, [r3, #4]
    625a:	2b01      	cmp	r3, #1
    625c:	d105      	bne.n	626a <_sercom_i2c_sync_analyse_flags+0x19e>
    625e:	697b      	ldr	r3, [r7, #20]
    6260:	2b00      	cmp	r3, #0
    6262:	d002      	beq.n	626a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6264:	68f8      	ldr	r0, [r7, #12]
    6266:	4b21      	ldr	r3, [pc, #132]	; (62ec <_sercom_i2c_sync_analyse_flags+0x220>)
    6268:	4798      	blx	r3
			}

			if (msg->len == 0) {
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	685b      	ldr	r3, [r3, #4]
    626e:	2b00      	cmp	r3, #0
    6270:	d113      	bne.n	629a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6272:	687b      	ldr	r3, [r7, #4]
    6274:	885b      	ldrh	r3, [r3, #2]
    6276:	b29b      	uxth	r3, r3
    6278:	b21b      	sxth	r3, r3
    627a:	2b00      	cmp	r3, #0
    627c:	da05      	bge.n	628a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    627e:	68f8      	ldr	r0, [r7, #12]
    6280:	4b1b      	ldr	r3, [pc, #108]	; (62f0 <_sercom_i2c_sync_analyse_flags+0x224>)
    6282:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6284:	68f8      	ldr	r0, [r7, #12]
    6286:	4b15      	ldr	r3, [pc, #84]	; (62dc <_sercom_i2c_sync_analyse_flags+0x210>)
    6288:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	885b      	ldrh	r3, [r3, #2]
    628e:	b29b      	uxth	r3, r3
    6290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6294:	b29a      	uxth	r2, r3
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    629a:	687b      	ldr	r3, [r7, #4]
    629c:	689c      	ldr	r4, [r3, #8]
    629e:	1c62      	adds	r2, r4, #1
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	609a      	str	r2, [r3, #8]
    62a4:	68f8      	ldr	r0, [r7, #12]
    62a6:	4b13      	ldr	r3, [pc, #76]	; (62f4 <_sercom_i2c_sync_analyse_flags+0x228>)
    62a8:	4798      	blx	r3
    62aa:	4603      	mov	r3, r0
    62ac:	b2db      	uxtb	r3, r3
    62ae:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    62b0:	68f8      	ldr	r0, [r7, #12]
    62b2:	4b11      	ldr	r3, [pc, #68]	; (62f8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    62b4:	4798      	blx	r3
    62b6:	e005      	b.n	62c4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    62b8:	68f8      	ldr	r0, [r7, #12]
    62ba:	4b0f      	ldr	r3, [pc, #60]	; (62f8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    62bc:	4798      	blx	r3
			return I2C_NACK;
    62be:	f06f 0301 	mvn.w	r3, #1
    62c2:	e000      	b.n	62c6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    62c4:	2300      	movs	r3, #0
}
    62c6:	4618      	mov	r0, r3
    62c8:	371c      	adds	r7, #28
    62ca:	46bd      	mov	sp, r7
    62cc:	bd90      	pop	{r4, r7, pc}
    62ce:	bf00      	nop
    62d0:	00005bbd 	.word	0x00005bbd
    62d4:	00005fc9 	.word	0x00005fc9
    62d8:	00005ae5 	.word	0x00005ae5
    62dc:	000060b1 	.word	0x000060b1
    62e0:	00005ed5 	.word	0x00005ed5
    62e4:	00005eb1 	.word	0x00005eb1
    62e8:	00005f11 	.word	0x00005f11
    62ec:	00005d6d 	.word	0x00005d6d
    62f0:	00005d45 	.word	0x00005d45
    62f4:	00005f35 	.word	0x00005f35
    62f8:	00005aff 	.word	0x00005aff

000062fc <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    62fc:	b580      	push	{r7, lr}
    62fe:	b082      	sub	sp, #8
    6300:	af00      	add	r7, sp, #0
    6302:	6078      	str	r0, [r7, #4]
    6304:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6306:	687b      	ldr	r3, [r7, #4]
    6308:	2b00      	cmp	r3, #0
    630a:	bf14      	ite	ne
    630c:	2301      	movne	r3, #1
    630e:	2300      	moveq	r3, #0
    6310:	b2db      	uxtb	r3, r3
    6312:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6316:	4908      	ldr	r1, [pc, #32]	; (6338 <_i2c_m_sync_init+0x3c>)
    6318:	4618      	mov	r0, r3
    631a:	4b08      	ldr	r3, [pc, #32]	; (633c <_i2c_m_sync_init+0x40>)
    631c:	4798      	blx	r3

	i2c_dev->hw = hw;
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	683a      	ldr	r2, [r7, #0]
    6322:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	6839      	ldr	r1, [r7, #0]
    6328:	4618      	mov	r0, r3
    632a:	4b05      	ldr	r3, [pc, #20]	; (6340 <_i2c_m_sync_init+0x44>)
    632c:	4798      	blx	r3
    632e:	4603      	mov	r3, r0
}
    6330:	4618      	mov	r0, r3
    6332:	3708      	adds	r7, #8
    6334:	46bd      	mov	sp, r7
    6336:	bd80      	pop	{r7, pc}
    6338:	000109bc 	.word	0x000109bc
    633c:	00003825 	.word	0x00003825
    6340:	000065ed 	.word	0x000065ed

00006344 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6344:	b580      	push	{r7, lr}
    6346:	b084      	sub	sp, #16
    6348:	af00      	add	r7, sp, #0
    634a:	6078      	str	r0, [r7, #4]
    634c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    634e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6352:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	691b      	ldr	r3, [r3, #16]
    6358:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    635a:	68b8      	ldr	r0, [r7, #8]
    635c:	4b0f      	ldr	r3, [pc, #60]	; (639c <_sercom_i2c_sync_wait_bus+0x58>)
    635e:	4798      	blx	r3
    6360:	4603      	mov	r3, r0
    6362:	461a      	mov	r2, r3
    6364:	683b      	ldr	r3, [r7, #0]
    6366:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6368:	68fb      	ldr	r3, [r7, #12]
    636a:	1e5a      	subs	r2, r3, #1
    636c:	60fa      	str	r2, [r7, #12]
    636e:	2b00      	cmp	r3, #0
    6370:	d102      	bne.n	6378 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6372:	f06f 0304 	mvn.w	r3, #4
    6376:	e00c      	b.n	6392 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6378:	683b      	ldr	r3, [r7, #0]
    637a:	681b      	ldr	r3, [r3, #0]
    637c:	f003 0301 	and.w	r3, r3, #1
    6380:	2b00      	cmp	r3, #0
    6382:	d105      	bne.n	6390 <_sercom_i2c_sync_wait_bus+0x4c>
    6384:	683b      	ldr	r3, [r7, #0]
    6386:	681b      	ldr	r3, [r3, #0]
    6388:	f003 0302 	and.w	r3, r3, #2
    638c:	2b00      	cmp	r3, #0
    638e:	d0e4      	beq.n	635a <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6390:	2300      	movs	r3, #0
}
    6392:	4618      	mov	r0, r3
    6394:	3710      	adds	r7, #16
    6396:	46bd      	mov	sp, r7
    6398:	bd80      	pop	{r7, pc}
    639a:	bf00      	nop
    639c:	00005b19 	.word	0x00005b19

000063a0 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    63a0:	b590      	push	{r4, r7, lr}
    63a2:	b087      	sub	sp, #28
    63a4:	af00      	add	r7, sp, #0
    63a6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	691b      	ldr	r3, [r3, #16]
    63ac:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    63b2:	6978      	ldr	r0, [r7, #20]
    63b4:	4b39      	ldr	r3, [pc, #228]	; (649c <_sercom_i2c_sync_send_address+0xfc>)
    63b6:	4798      	blx	r3
    63b8:	4603      	mov	r3, r0
    63ba:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	2b00      	cmp	r3, #0
    63c0:	bf14      	ite	ne
    63c2:	2301      	movne	r3, #1
    63c4:	2300      	moveq	r3, #0
    63c6:	b2db      	uxtb	r3, r3
    63c8:	f240 52a5 	movw	r2, #1445	; 0x5a5
    63cc:	4934      	ldr	r1, [pc, #208]	; (64a0 <_sercom_i2c_sync_send_address+0x100>)
    63ce:	4618      	mov	r0, r3
    63d0:	4b34      	ldr	r3, [pc, #208]	; (64a4 <_sercom_i2c_sync_send_address+0x104>)
    63d2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    63d4:	693b      	ldr	r3, [r7, #16]
    63d6:	685b      	ldr	r3, [r3, #4]
    63d8:	2b01      	cmp	r3, #1
    63da:	d106      	bne.n	63ea <_sercom_i2c_sync_send_address+0x4a>
    63dc:	68fb      	ldr	r3, [r7, #12]
    63de:	2b00      	cmp	r3, #0
    63e0:	d003      	beq.n	63ea <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    63e2:	6978      	ldr	r0, [r7, #20]
    63e4:	4b30      	ldr	r3, [pc, #192]	; (64a8 <_sercom_i2c_sync_send_address+0x108>)
    63e6:	4798      	blx	r3
    63e8:	e002      	b.n	63f0 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    63ea:	6978      	ldr	r0, [r7, #20]
    63ec:	4b2f      	ldr	r3, [pc, #188]	; (64ac <_sercom_i2c_sync_send_address+0x10c>)
    63ee:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    63f0:	693b      	ldr	r3, [r7, #16]
    63f2:	881b      	ldrh	r3, [r3, #0]
    63f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    63f8:	2b00      	cmp	r3, #0
    63fa:	d022      	beq.n	6442 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    63fc:	693b      	ldr	r3, [r7, #16]
    63fe:	885b      	ldrh	r3, [r3, #2]
    6400:	b29b      	uxth	r3, r3
    6402:	f003 0301 	and.w	r3, r3, #1
    6406:	2b00      	cmp	r3, #0
    6408:	d007      	beq.n	641a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    640a:	693b      	ldr	r3, [r7, #16]
    640c:	885b      	ldrh	r3, [r3, #2]
    640e:	b29b      	uxth	r3, r3
    6410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6414:	b29a      	uxth	r2, r3
    6416:	693b      	ldr	r3, [r7, #16]
    6418:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    641a:	693b      	ldr	r3, [r7, #16]
    641c:	881b      	ldrh	r3, [r3, #0]
    641e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6420:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6424:	401c      	ands	r4, r3
    6426:	6978      	ldr	r0, [r7, #20]
    6428:	4b21      	ldr	r3, [pc, #132]	; (64b0 <_sercom_i2c_sync_send_address+0x110>)
    642a:	4798      	blx	r3
    642c:	4603      	mov	r3, r0
    642e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6432:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6438:	4619      	mov	r1, r3
    643a:	6978      	ldr	r0, [r7, #20]
    643c:	4b1d      	ldr	r3, [pc, #116]	; (64b4 <_sercom_i2c_sync_send_address+0x114>)
    643e:	4798      	blx	r3
    6440:	e01a      	b.n	6478 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6442:	693b      	ldr	r3, [r7, #16]
    6444:	881b      	ldrh	r3, [r3, #0]
    6446:	005b      	lsls	r3, r3, #1
    6448:	b2db      	uxtb	r3, r3
    644a:	693a      	ldr	r2, [r7, #16]
    644c:	8852      	ldrh	r2, [r2, #2]
    644e:	b292      	uxth	r2, r2
    6450:	f002 0201 	and.w	r2, r2, #1
    6454:	2a00      	cmp	r2, #0
    6456:	bf14      	ite	ne
    6458:	2201      	movne	r2, #1
    645a:	2200      	moveq	r2, #0
    645c:	b2d2      	uxtb	r2, r2
    645e:	4313      	orrs	r3, r2
    6460:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6462:	6978      	ldr	r0, [r7, #20]
    6464:	4b12      	ldr	r3, [pc, #72]	; (64b0 <_sercom_i2c_sync_send_address+0x110>)
    6466:	4798      	blx	r3
    6468:	4603      	mov	r3, r0
    646a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    646e:	4323      	orrs	r3, r4
    6470:	4619      	mov	r1, r3
    6472:	6978      	ldr	r0, [r7, #20]
    6474:	4b0f      	ldr	r3, [pc, #60]	; (64b4 <_sercom_i2c_sync_send_address+0x114>)
    6476:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6478:	f107 0308 	add.w	r3, r7, #8
    647c:	4619      	mov	r1, r3
    647e:	6878      	ldr	r0, [r7, #4]
    6480:	4b0d      	ldr	r3, [pc, #52]	; (64b8 <_sercom_i2c_sync_send_address+0x118>)
    6482:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6484:	68bb      	ldr	r3, [r7, #8]
    6486:	693a      	ldr	r2, [r7, #16]
    6488:	4619      	mov	r1, r3
    648a:	6978      	ldr	r0, [r7, #20]
    648c:	4b0b      	ldr	r3, [pc, #44]	; (64bc <_sercom_i2c_sync_send_address+0x11c>)
    648e:	4798      	blx	r3
    6490:	4603      	mov	r3, r0
}
    6492:	4618      	mov	r0, r3
    6494:	371c      	adds	r7, #28
    6496:	46bd      	mov	sp, r7
    6498:	bd90      	pop	{r4, r7, pc}
    649a:	bf00      	nop
    649c:	00005bbd 	.word	0x00005bbd
    64a0:	000109bc 	.word	0x000109bc
    64a4:	00003825 	.word	0x00003825
    64a8:	00005d6d 	.word	0x00005d6d
    64ac:	00005d95 	.word	0x00005d95
    64b0:	00005ed5 	.word	0x00005ed5
    64b4:	00005eb1 	.word	0x00005eb1
    64b8:	00006345 	.word	0x00006345
    64bc:	000060cd 	.word	0x000060cd

000064c0 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	b086      	sub	sp, #24
    64c4:	af00      	add	r7, sp, #0
    64c6:	6078      	str	r0, [r7, #4]
    64c8:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	691b      	ldr	r3, [r3, #16]
    64ce:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    64d0:	687b      	ldr	r3, [r7, #4]
    64d2:	2b00      	cmp	r3, #0
    64d4:	bf14      	ite	ne
    64d6:	2301      	movne	r3, #1
    64d8:	2300      	moveq	r3, #0
    64da:	b2db      	uxtb	r3, r3
    64dc:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    64e0:	493b      	ldr	r1, [pc, #236]	; (65d0 <_i2c_m_sync_transfer+0x110>)
    64e2:	4618      	mov	r0, r3
    64e4:	4b3b      	ldr	r3, [pc, #236]	; (65d4 <_i2c_m_sync_transfer+0x114>)
    64e6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	691b      	ldr	r3, [r3, #16]
    64ec:	2b00      	cmp	r3, #0
    64ee:	bf14      	ite	ne
    64f0:	2301      	movne	r3, #1
    64f2:	2300      	moveq	r3, #0
    64f4:	b2db      	uxtb	r3, r3
    64f6:	f240 52d1 	movw	r2, #1489	; 0x5d1
    64fa:	4935      	ldr	r1, [pc, #212]	; (65d0 <_i2c_m_sync_transfer+0x110>)
    64fc:	4618      	mov	r0, r3
    64fe:	4b35      	ldr	r3, [pc, #212]	; (65d4 <_i2c_m_sync_transfer+0x114>)
    6500:	4798      	blx	r3
	ASSERT(msg);
    6502:	683b      	ldr	r3, [r7, #0]
    6504:	2b00      	cmp	r3, #0
    6506:	bf14      	ite	ne
    6508:	2301      	movne	r3, #1
    650a:	2300      	moveq	r3, #0
    650c:	b2db      	uxtb	r3, r3
    650e:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6512:	492f      	ldr	r1, [pc, #188]	; (65d0 <_i2c_m_sync_transfer+0x110>)
    6514:	4618      	mov	r0, r3
    6516:	4b2f      	ldr	r3, [pc, #188]	; (65d4 <_i2c_m_sync_transfer+0x114>)
    6518:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    651a:	687b      	ldr	r3, [r7, #4]
    651c:	885b      	ldrh	r3, [r3, #2]
    651e:	b29b      	uxth	r3, r3
    6520:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6524:	2b00      	cmp	r3, #0
    6526:	d002      	beq.n	652e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6528:	f06f 0305 	mvn.w	r3, #5
    652c:	e04c      	b.n	65c8 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    652e:	683b      	ldr	r3, [r7, #0]
    6530:	885b      	ldrh	r3, [r3, #2]
    6532:	b29b      	uxth	r3, r3
    6534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6538:	b29a      	uxth	r2, r3
    653a:	683b      	ldr	r3, [r7, #0]
    653c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	683a      	ldr	r2, [r7, #0]
    6542:	ca07      	ldmia	r2, {r0, r1, r2}
    6544:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6548:	6938      	ldr	r0, [r7, #16]
    654a:	4b23      	ldr	r3, [pc, #140]	; (65d8 <_i2c_m_sync_transfer+0x118>)
    654c:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    654e:	6878      	ldr	r0, [r7, #4]
    6550:	4b22      	ldr	r3, [pc, #136]	; (65dc <_i2c_m_sync_transfer+0x11c>)
    6552:	4798      	blx	r3
    6554:	6178      	str	r0, [r7, #20]

	if (ret) {
    6556:	697b      	ldr	r3, [r7, #20]
    6558:	2b00      	cmp	r3, #0
    655a:	d02d      	beq.n	65b8 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	885b      	ldrh	r3, [r3, #2]
    6560:	b29b      	uxth	r3, r3
    6562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6566:	b29a      	uxth	r2, r3
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	805a      	strh	r2, [r3, #2]

		return ret;
    656c:	697b      	ldr	r3, [r7, #20]
    656e:	e02b      	b.n	65c8 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6570:	f107 030c 	add.w	r3, r7, #12
    6574:	4619      	mov	r1, r3
    6576:	6878      	ldr	r0, [r7, #4]
    6578:	4b19      	ldr	r3, [pc, #100]	; (65e0 <_i2c_m_sync_transfer+0x120>)
    657a:	4798      	blx	r3
    657c:	6178      	str	r0, [r7, #20]

		if (ret) {
    657e:	697b      	ldr	r3, [r7, #20]
    6580:	2b00      	cmp	r3, #0
    6582:	d012      	beq.n	65aa <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6584:	683b      	ldr	r3, [r7, #0]
    6586:	885b      	ldrh	r3, [r3, #2]
    6588:	b29b      	uxth	r3, r3
    658a:	b21b      	sxth	r3, r3
    658c:	2b00      	cmp	r3, #0
    658e:	da02      	bge.n	6596 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6590:	6938      	ldr	r0, [r7, #16]
    6592:	4b14      	ldr	r3, [pc, #80]	; (65e4 <_i2c_m_sync_transfer+0x124>)
    6594:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6596:	687b      	ldr	r3, [r7, #4]
    6598:	885b      	ldrh	r3, [r3, #2]
    659a:	b29b      	uxth	r3, r3
    659c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65a0:	b29a      	uxth	r2, r3
    65a2:	687b      	ldr	r3, [r7, #4]
    65a4:	805a      	strh	r2, [r3, #2]

			return ret;
    65a6:	697b      	ldr	r3, [r7, #20]
    65a8:	e00e      	b.n	65c8 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    65aa:	68fb      	ldr	r3, [r7, #12]
    65ac:	687a      	ldr	r2, [r7, #4]
    65ae:	4619      	mov	r1, r3
    65b0:	6938      	ldr	r0, [r7, #16]
    65b2:	4b0d      	ldr	r3, [pc, #52]	; (65e8 <_i2c_m_sync_transfer+0x128>)
    65b4:	4798      	blx	r3
    65b6:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	885b      	ldrh	r3, [r3, #2]
    65bc:	b29b      	uxth	r3, r3
    65be:	f403 7380 	and.w	r3, r3, #256	; 0x100
    65c2:	2b00      	cmp	r3, #0
    65c4:	d1d4      	bne.n	6570 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    65c6:	697b      	ldr	r3, [r7, #20]
}
    65c8:	4618      	mov	r0, r3
    65ca:	3718      	adds	r7, #24
    65cc:	46bd      	mov	sp, r7
    65ce:	bd80      	pop	{r7, pc}
    65d0:	000109bc 	.word	0x000109bc
    65d4:	00003825 	.word	0x00003825
    65d8:	00005d1d 	.word	0x00005d1d
    65dc:	000063a1 	.word	0x000063a1
    65e0:	00006345 	.word	0x00006345
    65e4:	000060b1 	.word	0x000060b1
    65e8:	000060cd 	.word	0x000060cd

000065ec <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    65ec:	b580      	push	{r7, lr}
    65ee:	b084      	sub	sp, #16
    65f0:	af00      	add	r7, sp, #0
    65f2:	6078      	str	r0, [r7, #4]
    65f4:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    65f6:	6838      	ldr	r0, [r7, #0]
    65f8:	4b42      	ldr	r3, [pc, #264]	; (6704 <_i2c_m_sync_init_impl+0x118>)
    65fa:	4798      	blx	r3
    65fc:	4603      	mov	r3, r0
    65fe:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6600:	2101      	movs	r1, #1
    6602:	6838      	ldr	r0, [r7, #0]
    6604:	4b40      	ldr	r3, [pc, #256]	; (6708 <_i2c_m_sync_init_impl+0x11c>)
    6606:	4798      	blx	r3
    6608:	4603      	mov	r3, r0
    660a:	f083 0301 	eor.w	r3, r3, #1
    660e:	b2db      	uxtb	r3, r3
    6610:	2b00      	cmp	r3, #0
    6612:	d020      	beq.n	6656 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6614:	7bfa      	ldrb	r2, [r7, #15]
    6616:	493d      	ldr	r1, [pc, #244]	; (670c <_i2c_m_sync_init_impl+0x120>)
    6618:	4613      	mov	r3, r2
    661a:	005b      	lsls	r3, r3, #1
    661c:	4413      	add	r3, r2
    661e:	00db      	lsls	r3, r3, #3
    6620:	440b      	add	r3, r1
    6622:	3304      	adds	r3, #4
    6624:	681b      	ldr	r3, [r3, #0]
    6626:	f003 031c 	and.w	r3, r3, #28
    662a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    662c:	2102      	movs	r1, #2
    662e:	6838      	ldr	r0, [r7, #0]
    6630:	4b37      	ldr	r3, [pc, #220]	; (6710 <_i2c_m_sync_init_impl+0x124>)
    6632:	4798      	blx	r3
    6634:	4603      	mov	r3, r0
    6636:	2b00      	cmp	r3, #0
    6638:	d006      	beq.n	6648 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    663a:	6838      	ldr	r0, [r7, #0]
    663c:	4b35      	ldr	r3, [pc, #212]	; (6714 <_i2c_m_sync_init_impl+0x128>)
    663e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6640:	2102      	movs	r1, #2
    6642:	6838      	ldr	r0, [r7, #0]
    6644:	4b34      	ldr	r3, [pc, #208]	; (6718 <_i2c_m_sync_init_impl+0x12c>)
    6646:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6648:	68bb      	ldr	r3, [r7, #8]
    664a:	f043 0301 	orr.w	r3, r3, #1
    664e:	4619      	mov	r1, r3
    6650:	6838      	ldr	r0, [r7, #0]
    6652:	4b32      	ldr	r3, [pc, #200]	; (671c <_i2c_m_sync_init_impl+0x130>)
    6654:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6656:	2101      	movs	r1, #1
    6658:	6838      	ldr	r0, [r7, #0]
    665a:	4b2f      	ldr	r3, [pc, #188]	; (6718 <_i2c_m_sync_init_impl+0x12c>)
    665c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    665e:	7bfa      	ldrb	r2, [r7, #15]
    6660:	492a      	ldr	r1, [pc, #168]	; (670c <_i2c_m_sync_init_impl+0x120>)
    6662:	4613      	mov	r3, r2
    6664:	005b      	lsls	r3, r3, #1
    6666:	4413      	add	r3, r2
    6668:	00db      	lsls	r3, r3, #3
    666a:	440b      	add	r3, r1
    666c:	3304      	adds	r3, #4
    666e:	681b      	ldr	r3, [r3, #0]
    6670:	4619      	mov	r1, r3
    6672:	6838      	ldr	r0, [r7, #0]
    6674:	4b29      	ldr	r3, [pc, #164]	; (671c <_i2c_m_sync_init_impl+0x130>)
    6676:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6678:	7bfa      	ldrb	r2, [r7, #15]
    667a:	4924      	ldr	r1, [pc, #144]	; (670c <_i2c_m_sync_init_impl+0x120>)
    667c:	4613      	mov	r3, r2
    667e:	005b      	lsls	r3, r3, #1
    6680:	4413      	add	r3, r2
    6682:	00db      	lsls	r3, r3, #3
    6684:	440b      	add	r3, r1
    6686:	3308      	adds	r3, #8
    6688:	681b      	ldr	r3, [r3, #0]
    668a:	4619      	mov	r1, r3
    668c:	6838      	ldr	r0, [r7, #0]
    668e:	4b24      	ldr	r3, [pc, #144]	; (6720 <_i2c_m_sync_init_impl+0x134>)
    6690:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6692:	7bfa      	ldrb	r2, [r7, #15]
    6694:	491d      	ldr	r1, [pc, #116]	; (670c <_i2c_m_sync_init_impl+0x120>)
    6696:	4613      	mov	r3, r2
    6698:	005b      	lsls	r3, r3, #1
    669a:	4413      	add	r3, r2
    669c:	00db      	lsls	r3, r3, #3
    669e:	440b      	add	r3, r1
    66a0:	330c      	adds	r3, #12
    66a2:	681b      	ldr	r3, [r3, #0]
    66a4:	4619      	mov	r1, r3
    66a6:	6838      	ldr	r0, [r7, #0]
    66a8:	4b1e      	ldr	r3, [pc, #120]	; (6724 <_i2c_m_sync_init_impl+0x138>)
    66aa:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    66ac:	7bfa      	ldrb	r2, [r7, #15]
    66ae:	4917      	ldr	r1, [pc, #92]	; (670c <_i2c_m_sync_init_impl+0x120>)
    66b0:	4613      	mov	r3, r2
    66b2:	005b      	lsls	r3, r3, #1
    66b4:	4413      	add	r3, r2
    66b6:	00db      	lsls	r3, r3, #3
    66b8:	440b      	add	r3, r1
    66ba:	3304      	adds	r3, #4
    66bc:	681b      	ldr	r3, [r3, #0]
    66be:	0e1b      	lsrs	r3, r3, #24
    66c0:	b29b      	uxth	r3, r3
    66c2:	f003 0303 	and.w	r3, r3, #3
    66c6:	b29a      	uxth	r2, r3
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    66cc:	687b      	ldr	r3, [r7, #4]
    66ce:	899b      	ldrh	r3, [r3, #12]
    66d0:	2b01      	cmp	r3, #1
    66d2:	bf8c      	ite	hi
    66d4:	2301      	movhi	r3, #1
    66d6:	2300      	movls	r3, #0
    66d8:	b2db      	uxtb	r3, r3
    66da:	4619      	mov	r1, r3
    66dc:	6838      	ldr	r0, [r7, #0]
    66de:	4b12      	ldr	r3, [pc, #72]	; (6728 <_i2c_m_sync_init_impl+0x13c>)
    66e0:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    66e2:	7bfa      	ldrb	r2, [r7, #15]
    66e4:	4909      	ldr	r1, [pc, #36]	; (670c <_i2c_m_sync_init_impl+0x120>)
    66e6:	4613      	mov	r3, r2
    66e8:	005b      	lsls	r3, r3, #1
    66ea:	4413      	add	r3, r2
    66ec:	00db      	lsls	r3, r3, #3
    66ee:	440b      	add	r3, r1
    66f0:	3312      	adds	r3, #18
    66f2:	881a      	ldrh	r2, [r3, #0]
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    66f8:	2300      	movs	r3, #0
}
    66fa:	4618      	mov	r0, r3
    66fc:	3710      	adds	r7, #16
    66fe:	46bd      	mov	sp, r7
    6700:	bd80      	pop	{r7, pc}
    6702:	bf00      	nop
    6704:	00006049 	.word	0x00006049
    6708:	00005a71 	.word	0x00005a71
    670c:	20000018 	.word	0x20000018
    6710:	00005bed 	.word	0x00005bed
    6714:	00005b95 	.word	0x00005b95
    6718:	00005a4d 	.word	0x00005a4d
    671c:	00005c1d 	.word	0x00005c1d
    6720:	00005ded 	.word	0x00005ded
    6724:	00005e35 	.word	0x00005e35
    6728:	00005e71 	.word	0x00005e71

0000672c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    672c:	b580      	push	{r7, lr}
    672e:	b082      	sub	sp, #8
    6730:	af00      	add	r7, sp, #0
    6732:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6734:	2101      	movs	r1, #1
    6736:	6878      	ldr	r0, [r7, #4]
    6738:	4b07      	ldr	r3, [pc, #28]	; (6758 <_spi_sync_enable+0x2c>)
    673a:	4798      	blx	r3
    673c:	4603      	mov	r3, r0
    673e:	2b00      	cmp	r3, #0
    6740:	d002      	beq.n	6748 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    6742:	f06f 0303 	mvn.w	r3, #3
    6746:	e003      	b.n	6750 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    6748:	6878      	ldr	r0, [r7, #4]
    674a:	4b04      	ldr	r3, [pc, #16]	; (675c <_spi_sync_enable+0x30>)
    674c:	4798      	blx	r3

	return ERR_NONE;
    674e:	2300      	movs	r3, #0
}
    6750:	4618      	mov	r0, r3
    6752:	3708      	adds	r7, #8
    6754:	46bd      	mov	sp, r7
    6756:	bd80      	pop	{r7, pc}
    6758:	00005abd 	.word	0x00005abd
    675c:	00005c41 	.word	0x00005c41

00006760 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    6760:	b580      	push	{r7, lr}
    6762:	b082      	sub	sp, #8
    6764:	af00      	add	r7, sp, #0
    6766:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6768:	2101      	movs	r1, #1
    676a:	6878      	ldr	r0, [r7, #4]
    676c:	4b07      	ldr	r3, [pc, #28]	; (678c <_spi_sync_disable+0x2c>)
    676e:	4798      	blx	r3
    6770:	4603      	mov	r3, r0
    6772:	2b00      	cmp	r3, #0
    6774:	d002      	beq.n	677c <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    6776:	f06f 0303 	mvn.w	r3, #3
    677a:	e003      	b.n	6784 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    677c:	6878      	ldr	r0, [r7, #4]
    677e:	4b04      	ldr	r3, [pc, #16]	; (6790 <_spi_sync_disable+0x30>)
    6780:	4798      	blx	r3

	return ERR_NONE;
    6782:	2300      	movs	r3, #0
}
    6784:	4618      	mov	r0, r3
    6786:	3708      	adds	r7, #8
    6788:	46bd      	mov	sp, r7
    678a:	bd80      	pop	{r7, pc}
    678c:	00005abd 	.word	0x00005abd
    6790:	00005ca1 	.word	0x00005ca1

00006794 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6794:	b580      	push	{r7, lr}
    6796:	b082      	sub	sp, #8
    6798:	af00      	add	r7, sp, #0
    679a:	6078      	str	r0, [r7, #4]
    679c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    679e:	687b      	ldr	r3, [r7, #4]
    67a0:	2b00      	cmp	r3, #0
    67a2:	d004      	beq.n	67ae <_spi_load_regs_master+0x1a>
    67a4:	683b      	ldr	r3, [r7, #0]
    67a6:	2b00      	cmp	r3, #0
    67a8:	d001      	beq.n	67ae <_spi_load_regs_master+0x1a>
    67aa:	2301      	movs	r3, #1
    67ac:	e000      	b.n	67b0 <_spi_load_regs_master+0x1c>
    67ae:	2300      	movs	r3, #0
    67b0:	f003 0301 	and.w	r3, r3, #1
    67b4:	b2db      	uxtb	r3, r3
    67b6:	f640 1209 	movw	r2, #2313	; 0x909
    67ba:	4915      	ldr	r1, [pc, #84]	; (6810 <_spi_load_regs_master+0x7c>)
    67bc:	4618      	mov	r0, r3
    67be:	4b15      	ldr	r3, [pc, #84]	; (6814 <_spi_load_regs_master+0x80>)
    67c0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    67c2:	683b      	ldr	r3, [r7, #0]
    67c4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    67c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    67ca:	f023 0301 	bic.w	r3, r3, #1
    67ce:	4619      	mov	r1, r3
    67d0:	6878      	ldr	r0, [r7, #4]
    67d2:	4b11      	ldr	r3, [pc, #68]	; (6818 <_spi_load_regs_master+0x84>)
    67d4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    67d6:	683b      	ldr	r3, [r7, #0]
    67d8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    67da:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    67de:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    67e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    67e6:	4619      	mov	r1, r3
    67e8:	6878      	ldr	r0, [r7, #4]
    67ea:	4b0c      	ldr	r3, [pc, #48]	; (681c <_spi_load_regs_master+0x88>)
    67ec:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    67ee:	683b      	ldr	r3, [r7, #0]
    67f0:	7b1b      	ldrb	r3, [r3, #12]
    67f2:	4619      	mov	r1, r3
    67f4:	6878      	ldr	r0, [r7, #4]
    67f6:	4b0a      	ldr	r3, [pc, #40]	; (6820 <_spi_load_regs_master+0x8c>)
    67f8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    67fa:	683b      	ldr	r3, [r7, #0]
    67fc:	7b5b      	ldrb	r3, [r3, #13]
    67fe:	4619      	mov	r1, r3
    6800:	6878      	ldr	r0, [r7, #4]
    6802:	4b08      	ldr	r3, [pc, #32]	; (6824 <_spi_load_regs_master+0x90>)
    6804:	4798      	blx	r3
}
    6806:	bf00      	nop
    6808:	3708      	adds	r7, #8
    680a:	46bd      	mov	sp, r7
    680c:	bd80      	pop	{r7, pc}
    680e:	bf00      	nop
    6810:	000109bc 	.word	0x000109bc
    6814:	00003825 	.word	0x00003825
    6818:	00005cf9 	.word	0x00005cf9
    681c:	00005e11 	.word	0x00005e11
    6820:	00005e51 	.word	0x00005e51
    6824:	00005f89 	.word	0x00005f89

00006828 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6828:	b580      	push	{r7, lr}
    682a:	b082      	sub	sp, #8
    682c:	af00      	add	r7, sp, #0
    682e:	6078      	str	r0, [r7, #4]
    6830:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	2b00      	cmp	r3, #0
    6836:	d004      	beq.n	6842 <_spi_load_regs_slave+0x1a>
    6838:	683b      	ldr	r3, [r7, #0]
    683a:	2b00      	cmp	r3, #0
    683c:	d001      	beq.n	6842 <_spi_load_regs_slave+0x1a>
    683e:	2301      	movs	r3, #1
    6840:	e000      	b.n	6844 <_spi_load_regs_slave+0x1c>
    6842:	2300      	movs	r3, #0
    6844:	f003 0301 	and.w	r3, r3, #1
    6848:	b2db      	uxtb	r3, r3
    684a:	f640 121d 	movw	r2, #2333	; 0x91d
    684e:	491a      	ldr	r1, [pc, #104]	; (68b8 <_spi_load_regs_slave+0x90>)
    6850:	4618      	mov	r0, r3
    6852:	4b1a      	ldr	r3, [pc, #104]	; (68bc <_spi_load_regs_slave+0x94>)
    6854:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6856:	683b      	ldr	r3, [r7, #0]
    6858:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    685a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    685e:	f023 0301 	bic.w	r3, r3, #1
    6862:	4619      	mov	r1, r3
    6864:	6878      	ldr	r0, [r7, #4]
    6866:	4b16      	ldr	r3, [pc, #88]	; (68c0 <_spi_load_regs_slave+0x98>)
    6868:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    686a:	683b      	ldr	r3, [r7, #0]
    686c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    686e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6872:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    687a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    687e:	4619      	mov	r1, r3
    6880:	6878      	ldr	r0, [r7, #4]
    6882:	4b10      	ldr	r3, [pc, #64]	; (68c4 <_spi_load_regs_slave+0x9c>)
    6884:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6886:	683b      	ldr	r3, [r7, #0]
    6888:	689b      	ldr	r3, [r3, #8]
    688a:	4619      	mov	r1, r3
    688c:	6878      	ldr	r0, [r7, #4]
    688e:	4b0e      	ldr	r3, [pc, #56]	; (68c8 <_spi_load_regs_slave+0xa0>)
    6890:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6892:	683b      	ldr	r3, [r7, #0]
    6894:	7b5b      	ldrb	r3, [r3, #13]
    6896:	4619      	mov	r1, r3
    6898:	6878      	ldr	r0, [r7, #4]
    689a:	4b0c      	ldr	r3, [pc, #48]	; (68cc <_spi_load_regs_slave+0xa4>)
    689c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    689e:	bf00      	nop
    68a0:	f04f 31ff 	mov.w	r1, #4294967295
    68a4:	6878      	ldr	r0, [r7, #4]
    68a6:	4b0a      	ldr	r3, [pc, #40]	; (68d0 <_spi_load_regs_slave+0xa8>)
    68a8:	4798      	blx	r3
    68aa:	4603      	mov	r3, r0
    68ac:	2b00      	cmp	r3, #0
    68ae:	d1f7      	bne.n	68a0 <_spi_load_regs_slave+0x78>
		;
}
    68b0:	bf00      	nop
    68b2:	3708      	adds	r7, #8
    68b4:	46bd      	mov	sp, r7
    68b6:	bd80      	pop	{r7, pc}
    68b8:	000109bc 	.word	0x000109bc
    68bc:	00003825 	.word	0x00003825
    68c0:	00005cf9 	.word	0x00005cf9
    68c4:	00005e11 	.word	0x00005e11
    68c8:	00005ef5 	.word	0x00005ef5
    68cc:	00005f89 	.word	0x00005f89
    68d0:	00005abd 	.word	0x00005abd

000068d4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    68d4:	b580      	push	{r7, lr}
    68d6:	b084      	sub	sp, #16
    68d8:	af00      	add	r7, sp, #0
    68da:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	4618      	mov	r0, r3
    68e0:	4b11      	ldr	r3, [pc, #68]	; (6928 <_spi_get_regs+0x54>)
    68e2:	4798      	blx	r3
    68e4:	4603      	mov	r3, r0
    68e6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    68e8:	2300      	movs	r3, #0
    68ea:	73fb      	strb	r3, [r7, #15]
    68ec:	e014      	b.n	6918 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    68ee:	7bfa      	ldrb	r2, [r7, #15]
    68f0:	490e      	ldr	r1, [pc, #56]	; (692c <_spi_get_regs+0x58>)
    68f2:	4613      	mov	r3, r2
    68f4:	011b      	lsls	r3, r3, #4
    68f6:	4413      	add	r3, r2
    68f8:	440b      	add	r3, r1
    68fa:	3310      	adds	r3, #16
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	7bba      	ldrb	r2, [r7, #14]
    6900:	429a      	cmp	r2, r3
    6902:	d106      	bne.n	6912 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6904:	7bfa      	ldrb	r2, [r7, #15]
    6906:	4613      	mov	r3, r2
    6908:	011b      	lsls	r3, r3, #4
    690a:	4413      	add	r3, r2
    690c:	4a07      	ldr	r2, [pc, #28]	; (692c <_spi_get_regs+0x58>)
    690e:	4413      	add	r3, r2
    6910:	e006      	b.n	6920 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6912:	7bfb      	ldrb	r3, [r7, #15]
    6914:	3301      	adds	r3, #1
    6916:	73fb      	strb	r3, [r7, #15]
    6918:	7bfb      	ldrb	r3, [r7, #15]
    691a:	2b01      	cmp	r3, #1
    691c:	d9e7      	bls.n	68ee <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    691e:	2300      	movs	r3, #0
}
    6920:	4618      	mov	r0, r3
    6922:	3710      	adds	r7, #16
    6924:	46bd      	mov	sp, r7
    6926:	bd80      	pop	{r7, pc}
    6928:	00005fed 	.word	0x00005fed
    692c:	000109f8 	.word	0x000109f8

00006930 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6930:	b580      	push	{r7, lr}
    6932:	b084      	sub	sp, #16
    6934:	af00      	add	r7, sp, #0
    6936:	6078      	str	r0, [r7, #4]
    6938:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    693a:	683b      	ldr	r3, [r7, #0]
    693c:	4618      	mov	r0, r3
    693e:	4b35      	ldr	r3, [pc, #212]	; (6a14 <_spi_m_sync_init+0xe4>)
    6940:	4798      	blx	r3
    6942:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	2b00      	cmp	r3, #0
    6948:	d004      	beq.n	6954 <_spi_m_sync_init+0x24>
    694a:	683b      	ldr	r3, [r7, #0]
    694c:	2b00      	cmp	r3, #0
    694e:	d001      	beq.n	6954 <_spi_m_sync_init+0x24>
    6950:	2301      	movs	r3, #1
    6952:	e000      	b.n	6956 <_spi_m_sync_init+0x26>
    6954:	2300      	movs	r3, #0
    6956:	f003 0301 	and.w	r3, r3, #1
    695a:	b2db      	uxtb	r3, r3
    695c:	f640 123f 	movw	r2, #2367	; 0x93f
    6960:	492d      	ldr	r1, [pc, #180]	; (6a18 <_spi_m_sync_init+0xe8>)
    6962:	4618      	mov	r0, r3
    6964:	4b2d      	ldr	r3, [pc, #180]	; (6a1c <_spi_m_sync_init+0xec>)
    6966:	4798      	blx	r3

	if (regs == NULL) {
    6968:	68fb      	ldr	r3, [r7, #12]
    696a:	2b00      	cmp	r3, #0
    696c:	d102      	bne.n	6974 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    696e:	f06f 030c 	mvn.w	r3, #12
    6972:	e04a      	b.n	6a0a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6974:	2101      	movs	r1, #1
    6976:	6838      	ldr	r0, [r7, #0]
    6978:	4b29      	ldr	r3, [pc, #164]	; (6a20 <_spi_m_sync_init+0xf0>)
    697a:	4798      	blx	r3
    697c:	4603      	mov	r3, r0
    697e:	f083 0301 	eor.w	r3, r3, #1
    6982:	b2db      	uxtb	r3, r3
    6984:	2b00      	cmp	r3, #0
    6986:	d019      	beq.n	69bc <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6988:	68fb      	ldr	r3, [r7, #12]
    698a:	681b      	ldr	r3, [r3, #0]
    698c:	f003 031c 	and.w	r3, r3, #28
    6990:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6992:	2102      	movs	r1, #2
    6994:	6838      	ldr	r0, [r7, #0]
    6996:	4b23      	ldr	r3, [pc, #140]	; (6a24 <_spi_m_sync_init+0xf4>)
    6998:	4798      	blx	r3
    699a:	4603      	mov	r3, r0
    699c:	2b00      	cmp	r3, #0
    699e:	d006      	beq.n	69ae <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    69a0:	6838      	ldr	r0, [r7, #0]
    69a2:	4b21      	ldr	r3, [pc, #132]	; (6a28 <_spi_m_sync_init+0xf8>)
    69a4:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    69a6:	2102      	movs	r1, #2
    69a8:	6838      	ldr	r0, [r7, #0]
    69aa:	4b20      	ldr	r3, [pc, #128]	; (6a2c <_spi_m_sync_init+0xfc>)
    69ac:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    69ae:	68bb      	ldr	r3, [r7, #8]
    69b0:	f043 0301 	orr.w	r3, r3, #1
    69b4:	4619      	mov	r1, r3
    69b6:	6838      	ldr	r0, [r7, #0]
    69b8:	4b1d      	ldr	r3, [pc, #116]	; (6a30 <_spi_m_sync_init+0x100>)
    69ba:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    69bc:	2101      	movs	r1, #1
    69be:	6838      	ldr	r0, [r7, #0]
    69c0:	4b1a      	ldr	r3, [pc, #104]	; (6a2c <_spi_m_sync_init+0xfc>)
    69c2:	4798      	blx	r3

	dev->prvt = hw;
    69c4:	687b      	ldr	r3, [r7, #4]
    69c6:	683a      	ldr	r2, [r7, #0]
    69c8:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    69ca:	68fb      	ldr	r3, [r7, #12]
    69cc:	681b      	ldr	r3, [r3, #0]
    69ce:	f003 031c 	and.w	r3, r3, #28
    69d2:	2b08      	cmp	r3, #8
    69d4:	d104      	bne.n	69e0 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    69d6:	68f9      	ldr	r1, [r7, #12]
    69d8:	6838      	ldr	r0, [r7, #0]
    69da:	4b16      	ldr	r3, [pc, #88]	; (6a34 <_spi_m_sync_init+0x104>)
    69dc:	4798      	blx	r3
    69de:	e003      	b.n	69e8 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    69e0:	68f9      	ldr	r1, [r7, #12]
    69e2:	6838      	ldr	r0, [r7, #0]
    69e4:	4b14      	ldr	r3, [pc, #80]	; (6a38 <_spi_m_sync_init+0x108>)
    69e6:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    69e8:	68fb      	ldr	r3, [r7, #12]
    69ea:	685b      	ldr	r3, [r3, #4]
    69ec:	f003 0307 	and.w	r3, r3, #7
    69f0:	2b00      	cmp	r3, #0
    69f2:	d101      	bne.n	69f8 <_spi_m_sync_init+0xc8>
    69f4:	2201      	movs	r2, #1
    69f6:	e000      	b.n	69fa <_spi_m_sync_init+0xca>
    69f8:	2202      	movs	r2, #2
    69fa:	687b      	ldr	r3, [r7, #4]
    69fc:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    69fe:	68fb      	ldr	r3, [r7, #12]
    6a00:	89db      	ldrh	r3, [r3, #14]
    6a02:	b29a      	uxth	r2, r3
    6a04:	687b      	ldr	r3, [r7, #4]
    6a06:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6a08:	2300      	movs	r3, #0
}
    6a0a:	4618      	mov	r0, r3
    6a0c:	3710      	adds	r7, #16
    6a0e:	46bd      	mov	sp, r7
    6a10:	bd80      	pop	{r7, pc}
    6a12:	bf00      	nop
    6a14:	000068d5 	.word	0x000068d5
    6a18:	000109bc 	.word	0x000109bc
    6a1c:	00003825 	.word	0x00003825
    6a20:	00005abd 	.word	0x00005abd
    6a24:	00005cc9 	.word	0x00005cc9
    6a28:	00005ca1 	.word	0x00005ca1
    6a2c:	00005a99 	.word	0x00005a99
    6a30:	00005cf9 	.word	0x00005cf9
    6a34:	00006829 	.word	0x00006829
    6a38:	00006795 	.word	0x00006795

00006a3c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    6a3c:	b580      	push	{r7, lr}
    6a3e:	b082      	sub	sp, #8
    6a40:	af00      	add	r7, sp, #0
    6a42:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6a44:	687b      	ldr	r3, [r7, #4]
    6a46:	2b00      	cmp	r3, #0
    6a48:	d005      	beq.n	6a56 <_spi_m_sync_enable+0x1a>
    6a4a:	687b      	ldr	r3, [r7, #4]
    6a4c:	681b      	ldr	r3, [r3, #0]
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d001      	beq.n	6a56 <_spi_m_sync_enable+0x1a>
    6a52:	2301      	movs	r3, #1
    6a54:	e000      	b.n	6a58 <_spi_m_sync_enable+0x1c>
    6a56:	2300      	movs	r3, #0
    6a58:	f003 0301 	and.w	r3, r3, #1
    6a5c:	b2db      	uxtb	r3, r3
    6a5e:	f640 129e 	movw	r2, #2462	; 0x99e
    6a62:	4907      	ldr	r1, [pc, #28]	; (6a80 <_spi_m_sync_enable+0x44>)
    6a64:	4618      	mov	r0, r3
    6a66:	4b07      	ldr	r3, [pc, #28]	; (6a84 <_spi_m_sync_enable+0x48>)
    6a68:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    6a6a:	687b      	ldr	r3, [r7, #4]
    6a6c:	681b      	ldr	r3, [r3, #0]
    6a6e:	4618      	mov	r0, r3
    6a70:	4b05      	ldr	r3, [pc, #20]	; (6a88 <_spi_m_sync_enable+0x4c>)
    6a72:	4798      	blx	r3
    6a74:	4603      	mov	r3, r0
}
    6a76:	4618      	mov	r0, r3
    6a78:	3708      	adds	r7, #8
    6a7a:	46bd      	mov	sp, r7
    6a7c:	bd80      	pop	{r7, pc}
    6a7e:	bf00      	nop
    6a80:	000109bc 	.word	0x000109bc
    6a84:	00003825 	.word	0x00003825
    6a88:	0000672d 	.word	0x0000672d

00006a8c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    6a8c:	b580      	push	{r7, lr}
    6a8e:	b082      	sub	sp, #8
    6a90:	af00      	add	r7, sp, #0
    6a92:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6a94:	687b      	ldr	r3, [r7, #4]
    6a96:	2b00      	cmp	r3, #0
    6a98:	d005      	beq.n	6aa6 <_spi_m_sync_disable+0x1a>
    6a9a:	687b      	ldr	r3, [r7, #4]
    6a9c:	681b      	ldr	r3, [r3, #0]
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d001      	beq.n	6aa6 <_spi_m_sync_disable+0x1a>
    6aa2:	2301      	movs	r3, #1
    6aa4:	e000      	b.n	6aa8 <_spi_m_sync_disable+0x1c>
    6aa6:	2300      	movs	r3, #0
    6aa8:	f003 0301 	and.w	r3, r3, #1
    6aac:	b2db      	uxtb	r3, r3
    6aae:	f640 12ba 	movw	r2, #2490	; 0x9ba
    6ab2:	4907      	ldr	r1, [pc, #28]	; (6ad0 <_spi_m_sync_disable+0x44>)
    6ab4:	4618      	mov	r0, r3
    6ab6:	4b07      	ldr	r3, [pc, #28]	; (6ad4 <_spi_m_sync_disable+0x48>)
    6ab8:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    6aba:	687b      	ldr	r3, [r7, #4]
    6abc:	681b      	ldr	r3, [r3, #0]
    6abe:	4618      	mov	r0, r3
    6ac0:	4b05      	ldr	r3, [pc, #20]	; (6ad8 <_spi_m_sync_disable+0x4c>)
    6ac2:	4798      	blx	r3
    6ac4:	4603      	mov	r3, r0
}
    6ac6:	4618      	mov	r0, r3
    6ac8:	3708      	adds	r7, #8
    6aca:	46bd      	mov	sp, r7
    6acc:	bd80      	pop	{r7, pc}
    6ace:	bf00      	nop
    6ad0:	000109bc 	.word	0x000109bc
    6ad4:	00003825 	.word	0x00003825
    6ad8:	00006761 	.word	0x00006761

00006adc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6adc:	b580      	push	{r7, lr}
    6ade:	b082      	sub	sp, #8
    6ae0:	af00      	add	r7, sp, #0
    6ae2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6ae4:	bf00      	nop
    6ae6:	2103      	movs	r1, #3
    6ae8:	6878      	ldr	r0, [r7, #4]
    6aea:	4b06      	ldr	r3, [pc, #24]	; (6b04 <_spi_wait_bus_idle+0x28>)
    6aec:	4798      	blx	r3
    6aee:	4603      	mov	r3, r0
    6af0:	2b00      	cmp	r3, #0
    6af2:	d0f8      	beq.n	6ae6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6af4:	2103      	movs	r1, #3
    6af6:	6878      	ldr	r0, [r7, #4]
    6af8:	4b03      	ldr	r3, [pc, #12]	; (6b08 <_spi_wait_bus_idle+0x2c>)
    6afa:	4798      	blx	r3
}
    6afc:	bf00      	nop
    6afe:	3708      	adds	r7, #8
    6b00:	46bd      	mov	sp, r7
    6b02:	bd80      	pop	{r7, pc}
    6b04:	00005b33 	.word	0x00005b33
    6b08:	00005b75 	.word	0x00005b75

00006b0c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6b0c:	b580      	push	{r7, lr}
    6b0e:	b086      	sub	sp, #24
    6b10:	af00      	add	r7, sp, #0
    6b12:	60f8      	str	r0, [r7, #12]
    6b14:	60b9      	str	r1, [r7, #8]
    6b16:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6b18:	68bb      	ldr	r3, [r7, #8]
    6b1a:	f003 0304 	and.w	r3, r3, #4
    6b1e:	2b00      	cmp	r3, #0
    6b20:	d101      	bne.n	6b26 <_spi_rx_check_and_receive+0x1a>
		return false;
    6b22:	2300      	movs	r3, #0
    6b24:	e022      	b.n	6b6c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6b26:	68f8      	ldr	r0, [r7, #12]
    6b28:	4b12      	ldr	r3, [pc, #72]	; (6b74 <_spi_rx_check_and_receive+0x68>)
    6b2a:	4798      	blx	r3
    6b2c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6b2e:	687b      	ldr	r3, [r7, #4]
    6b30:	685b      	ldr	r3, [r3, #4]
    6b32:	2b00      	cmp	r3, #0
    6b34:	d014      	beq.n	6b60 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6b36:	687b      	ldr	r3, [r7, #4]
    6b38:	685b      	ldr	r3, [r3, #4]
    6b3a:	1c59      	adds	r1, r3, #1
    6b3c:	687a      	ldr	r2, [r7, #4]
    6b3e:	6051      	str	r1, [r2, #4]
    6b40:	697a      	ldr	r2, [r7, #20]
    6b42:	b2d2      	uxtb	r2, r2
    6b44:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6b46:	687b      	ldr	r3, [r7, #4]
    6b48:	7c1b      	ldrb	r3, [r3, #16]
    6b4a:	2b01      	cmp	r3, #1
    6b4c:	d908      	bls.n	6b60 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6b4e:	687b      	ldr	r3, [r7, #4]
    6b50:	685b      	ldr	r3, [r3, #4]
    6b52:	1c59      	adds	r1, r3, #1
    6b54:	687a      	ldr	r2, [r7, #4]
    6b56:	6051      	str	r1, [r2, #4]
    6b58:	697a      	ldr	r2, [r7, #20]
    6b5a:	0a12      	lsrs	r2, r2, #8
    6b5c:	b2d2      	uxtb	r2, r2
    6b5e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6b60:	687b      	ldr	r3, [r7, #4]
    6b62:	68db      	ldr	r3, [r3, #12]
    6b64:	1c5a      	adds	r2, r3, #1
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	60da      	str	r2, [r3, #12]

	return true;
    6b6a:	2301      	movs	r3, #1
}
    6b6c:	4618      	mov	r0, r3
    6b6e:	3718      	adds	r7, #24
    6b70:	46bd      	mov	sp, r7
    6b72:	bd80      	pop	{r7, pc}
    6b74:	00005f71 	.word	0x00005f71

00006b78 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6b78:	b580      	push	{r7, lr}
    6b7a:	b086      	sub	sp, #24
    6b7c:	af00      	add	r7, sp, #0
    6b7e:	60f8      	str	r0, [r7, #12]
    6b80:	60b9      	str	r1, [r7, #8]
    6b82:	607a      	str	r2, [r7, #4]
    6b84:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6b86:	68bb      	ldr	r3, [r7, #8]
    6b88:	f003 0301 	and.w	r3, r3, #1
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	d028      	beq.n	6be2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6b90:	687b      	ldr	r3, [r7, #4]
    6b92:	681b      	ldr	r3, [r3, #0]
    6b94:	2b00      	cmp	r3, #0
    6b96:	d018      	beq.n	6bca <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6b98:	687b      	ldr	r3, [r7, #4]
    6b9a:	681b      	ldr	r3, [r3, #0]
    6b9c:	1c59      	adds	r1, r3, #1
    6b9e:	687a      	ldr	r2, [r7, #4]
    6ba0:	6011      	str	r1, [r2, #0]
    6ba2:	781b      	ldrb	r3, [r3, #0]
    6ba4:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6ba6:	687b      	ldr	r3, [r7, #4]
    6ba8:	7c1b      	ldrb	r3, [r3, #16]
    6baa:	2b01      	cmp	r3, #1
    6bac:	d90f      	bls.n	6bce <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6bae:	687b      	ldr	r3, [r7, #4]
    6bb0:	681b      	ldr	r3, [r3, #0]
    6bb2:	781b      	ldrb	r3, [r3, #0]
    6bb4:	021b      	lsls	r3, r3, #8
    6bb6:	461a      	mov	r2, r3
    6bb8:	697b      	ldr	r3, [r7, #20]
    6bba:	4313      	orrs	r3, r2
    6bbc:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	681b      	ldr	r3, [r3, #0]
    6bc2:	1c5a      	adds	r2, r3, #1
    6bc4:	687b      	ldr	r3, [r7, #4]
    6bc6:	601a      	str	r2, [r3, #0]
    6bc8:	e001      	b.n	6bce <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6bca:	887b      	ldrh	r3, [r7, #2]
    6bcc:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	689b      	ldr	r3, [r3, #8]
    6bd2:	1c5a      	adds	r2, r3, #1
    6bd4:	687b      	ldr	r3, [r7, #4]
    6bd6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6bd8:	6979      	ldr	r1, [r7, #20]
    6bda:	68f8      	ldr	r0, [r7, #12]
    6bdc:	4b03      	ldr	r3, [pc, #12]	; (6bec <_spi_tx_check_and_send+0x74>)
    6bde:	4798      	blx	r3
    6be0:	e000      	b.n	6be4 <_spi_tx_check_and_send+0x6c>
		return;
    6be2:	bf00      	nop
}
    6be4:	3718      	adds	r7, #24
    6be6:	46bd      	mov	sp, r7
    6be8:	bd80      	pop	{r7, pc}
    6bea:	bf00      	nop
    6bec:	00005f55 	.word	0x00005f55

00006bf0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6bf0:	b580      	push	{r7, lr}
    6bf2:	b082      	sub	sp, #8
    6bf4:	af00      	add	r7, sp, #0
    6bf6:	6078      	str	r0, [r7, #4]
    6bf8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6bfa:	687b      	ldr	r3, [r7, #4]
    6bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6c00:	2b00      	cmp	r3, #0
    6c02:	d00b      	beq.n	6c1c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6c08:	6838      	ldr	r0, [r7, #0]
    6c0a:	4b07      	ldr	r3, [pc, #28]	; (6c28 <_spi_err_check+0x38>)
    6c0c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6c0e:	2180      	movs	r1, #128	; 0x80
    6c10:	6838      	ldr	r0, [r7, #0]
    6c12:	4b06      	ldr	r3, [pc, #24]	; (6c2c <_spi_err_check+0x3c>)
    6c14:	4798      	blx	r3
		return ERR_OVERFLOW;
    6c16:	f06f 0312 	mvn.w	r3, #18
    6c1a:	e000      	b.n	6c1e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6c1c:	2300      	movs	r3, #0
}
    6c1e:	4618      	mov	r0, r3
    6c20:	3708      	adds	r7, #8
    6c22:	46bd      	mov	sp, r7
    6c24:	bd80      	pop	{r7, pc}
    6c26:	bf00      	nop
    6c28:	00005fa9 	.word	0x00005fa9
    6c2c:	00005b75 	.word	0x00005b75

00006c30 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6c30:	b590      	push	{r4, r7, lr}
    6c32:	b08b      	sub	sp, #44	; 0x2c
    6c34:	af00      	add	r7, sp, #0
    6c36:	6078      	str	r0, [r7, #4]
    6c38:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6c3a:	687b      	ldr	r3, [r7, #4]
    6c3c:	681b      	ldr	r3, [r3, #0]
    6c3e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6c40:	2300      	movs	r3, #0
    6c42:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6c44:	683b      	ldr	r3, [r7, #0]
    6c46:	681b      	ldr	r3, [r3, #0]
    6c48:	60bb      	str	r3, [r7, #8]
    6c4a:	683b      	ldr	r3, [r7, #0]
    6c4c:	685b      	ldr	r3, [r3, #4]
    6c4e:	60fb      	str	r3, [r7, #12]
    6c50:	2300      	movs	r3, #0
    6c52:	613b      	str	r3, [r7, #16]
    6c54:	2300      	movs	r3, #0
    6c56:	617b      	str	r3, [r7, #20]
    6c58:	687b      	ldr	r3, [r7, #4]
    6c5a:	791b      	ldrb	r3, [r3, #4]
    6c5c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6c5e:	687b      	ldr	r3, [r7, #4]
    6c60:	2b00      	cmp	r3, #0
    6c62:	d004      	beq.n	6c6e <_spi_m_sync_trans+0x3e>
    6c64:	6a3b      	ldr	r3, [r7, #32]
    6c66:	2b00      	cmp	r3, #0
    6c68:	d001      	beq.n	6c6e <_spi_m_sync_trans+0x3e>
    6c6a:	2301      	movs	r3, #1
    6c6c:	e000      	b.n	6c70 <_spi_m_sync_trans+0x40>
    6c6e:	2300      	movs	r3, #0
    6c70:	f003 0301 	and.w	r3, r3, #1
    6c74:	b2db      	uxtb	r3, r3
    6c76:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6c7a:	492b      	ldr	r1, [pc, #172]	; (6d28 <_spi_m_sync_trans+0xf8>)
    6c7c:	4618      	mov	r0, r3
    6c7e:	4b2b      	ldr	r3, [pc, #172]	; (6d2c <_spi_m_sync_trans+0xfc>)
    6c80:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6c82:	2107      	movs	r1, #7
    6c84:	6a38      	ldr	r0, [r7, #32]
    6c86:	4b2a      	ldr	r3, [pc, #168]	; (6d30 <_spi_m_sync_trans+0x100>)
    6c88:	4798      	blx	r3
    6c8a:	4603      	mov	r3, r0
    6c8c:	2b00      	cmp	r3, #0
    6c8e:	d002      	beq.n	6c96 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6c90:	f06f 0303 	mvn.w	r3, #3
    6c94:	e043      	b.n	6d1e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6c96:	6a38      	ldr	r0, [r7, #32]
    6c98:	4b26      	ldr	r3, [pc, #152]	; (6d34 <_spi_m_sync_trans+0x104>)
    6c9a:	4798      	blx	r3
    6c9c:	4603      	mov	r3, r0
    6c9e:	f083 0301 	eor.w	r3, r3, #1
    6ca2:	b2db      	uxtb	r3, r3
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	d002      	beq.n	6cae <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6ca8:	f06f 0313 	mvn.w	r3, #19
    6cac:	e037      	b.n	6d1e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6cae:	6a38      	ldr	r0, [r7, #32]
    6cb0:	4b21      	ldr	r3, [pc, #132]	; (6d38 <_spi_m_sync_trans+0x108>)
    6cb2:	4798      	blx	r3
    6cb4:	4603      	mov	r3, r0
    6cb6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6cb8:	f107 0308 	add.w	r3, r7, #8
    6cbc:	461a      	mov	r2, r3
    6cbe:	69f9      	ldr	r1, [r7, #28]
    6cc0:	6a38      	ldr	r0, [r7, #32]
    6cc2:	4b1e      	ldr	r3, [pc, #120]	; (6d3c <_spi_m_sync_trans+0x10c>)
    6cc4:	4798      	blx	r3
    6cc6:	4603      	mov	r3, r0
    6cc8:	f083 0301 	eor.w	r3, r3, #1
    6ccc:	b2db      	uxtb	r3, r3
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d00b      	beq.n	6cea <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6cd2:	697a      	ldr	r2, [r7, #20]
    6cd4:	693b      	ldr	r3, [r7, #16]
    6cd6:	429a      	cmp	r2, r3
    6cd8:	d307      	bcc.n	6cea <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6cda:	687b      	ldr	r3, [r7, #4]
    6cdc:	88db      	ldrh	r3, [r3, #6]
    6cde:	f107 0208 	add.w	r2, r7, #8
    6ce2:	69f9      	ldr	r1, [r7, #28]
    6ce4:	6a38      	ldr	r0, [r7, #32]
    6ce6:	4c16      	ldr	r4, [pc, #88]	; (6d40 <_spi_m_sync_trans+0x110>)
    6ce8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6cea:	6a39      	ldr	r1, [r7, #32]
    6cec:	69f8      	ldr	r0, [r7, #28]
    6cee:	4b15      	ldr	r3, [pc, #84]	; (6d44 <_spi_m_sync_trans+0x114>)
    6cf0:	4798      	blx	r3
    6cf2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	db0c      	blt.n	6d14 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6cfa:	693a      	ldr	r2, [r7, #16]
    6cfc:	683b      	ldr	r3, [r7, #0]
    6cfe:	689b      	ldr	r3, [r3, #8]
    6d00:	429a      	cmp	r2, r3
    6d02:	d3d4      	bcc.n	6cae <_spi_m_sync_trans+0x7e>
    6d04:	697a      	ldr	r2, [r7, #20]
    6d06:	683b      	ldr	r3, [r7, #0]
    6d08:	689b      	ldr	r3, [r3, #8]
    6d0a:	429a      	cmp	r2, r3
    6d0c:	d3cf      	bcc.n	6cae <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6d0e:	693b      	ldr	r3, [r7, #16]
    6d10:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6d12:	e000      	b.n	6d16 <_spi_m_sync_trans+0xe6>
			break;
    6d14:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6d16:	6a38      	ldr	r0, [r7, #32]
    6d18:	4b0b      	ldr	r3, [pc, #44]	; (6d48 <_spi_m_sync_trans+0x118>)
    6d1a:	4798      	blx	r3

	return rc;
    6d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6d1e:	4618      	mov	r0, r3
    6d20:	372c      	adds	r7, #44	; 0x2c
    6d22:	46bd      	mov	sp, r7
    6d24:	bd90      	pop	{r4, r7, pc}
    6d26:	bf00      	nop
    6d28:	000109bc 	.word	0x000109bc
    6d2c:	00003825 	.word	0x00003825
    6d30:	00005abd 	.word	0x00005abd
    6d34:	00005c69 	.word	0x00005c69
    6d38:	00005b5b 	.word	0x00005b5b
    6d3c:	00006b0d 	.word	0x00006b0d
    6d40:	00006b79 	.word	0x00006b79
    6d44:	00006bf1 	.word	0x00006bf1
    6d48:	00006add 	.word	0x00006add

00006d4c <__NVIC_EnableIRQ>:
{
    6d4c:	b480      	push	{r7}
    6d4e:	b083      	sub	sp, #12
    6d50:	af00      	add	r7, sp, #0
    6d52:	4603      	mov	r3, r0
    6d54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	db0b      	blt.n	6d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d5e:	4909      	ldr	r1, [pc, #36]	; (6d84 <__NVIC_EnableIRQ+0x38>)
    6d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d64:	095b      	lsrs	r3, r3, #5
    6d66:	88fa      	ldrh	r2, [r7, #6]
    6d68:	f002 021f 	and.w	r2, r2, #31
    6d6c:	2001      	movs	r0, #1
    6d6e:	fa00 f202 	lsl.w	r2, r0, r2
    6d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d76:	bf00      	nop
    6d78:	370c      	adds	r7, #12
    6d7a:	46bd      	mov	sp, r7
    6d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d80:	4770      	bx	lr
    6d82:	bf00      	nop
    6d84:	e000e100 	.word	0xe000e100

00006d88 <__NVIC_DisableIRQ>:
{
    6d88:	b480      	push	{r7}
    6d8a:	b083      	sub	sp, #12
    6d8c:	af00      	add	r7, sp, #0
    6d8e:	4603      	mov	r3, r0
    6d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d96:	2b00      	cmp	r3, #0
    6d98:	db10      	blt.n	6dbc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d9a:	490b      	ldr	r1, [pc, #44]	; (6dc8 <__NVIC_DisableIRQ+0x40>)
    6d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6da0:	095b      	lsrs	r3, r3, #5
    6da2:	88fa      	ldrh	r2, [r7, #6]
    6da4:	f002 021f 	and.w	r2, r2, #31
    6da8:	2001      	movs	r0, #1
    6daa:	fa00 f202 	lsl.w	r2, r0, r2
    6dae:	3320      	adds	r3, #32
    6db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6db4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6db8:	f3bf 8f6f 	isb	sy
}
    6dbc:	bf00      	nop
    6dbe:	370c      	adds	r7, #12
    6dc0:	46bd      	mov	sp, r7
    6dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dc6:	4770      	bx	lr
    6dc8:	e000e100 	.word	0xe000e100

00006dcc <__NVIC_ClearPendingIRQ>:
{
    6dcc:	b480      	push	{r7}
    6dce:	b083      	sub	sp, #12
    6dd0:	af00      	add	r7, sp, #0
    6dd2:	4603      	mov	r3, r0
    6dd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	db0c      	blt.n	6df8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dde:	4909      	ldr	r1, [pc, #36]	; (6e04 <__NVIC_ClearPendingIRQ+0x38>)
    6de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6de4:	095b      	lsrs	r3, r3, #5
    6de6:	88fa      	ldrh	r2, [r7, #6]
    6de8:	f002 021f 	and.w	r2, r2, #31
    6dec:	2001      	movs	r0, #1
    6dee:	fa00 f202 	lsl.w	r2, r0, r2
    6df2:	3360      	adds	r3, #96	; 0x60
    6df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6df8:	bf00      	nop
    6dfa:	370c      	adds	r7, #12
    6dfc:	46bd      	mov	sp, r7
    6dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e02:	4770      	bx	lr
    6e04:	e000e100 	.word	0xe000e100

00006e08 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6e08:	b480      	push	{r7}
    6e0a:	b083      	sub	sp, #12
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	6078      	str	r0, [r7, #4]
    6e10:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    6e12:	bf00      	nop
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	689a      	ldr	r2, [r3, #8]
    6e18:	683b      	ldr	r3, [r7, #0]
    6e1a:	4013      	ands	r3, r2
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	d1f9      	bne.n	6e14 <hri_tcc_wait_for_sync+0xc>
	};
}
    6e20:	bf00      	nop
    6e22:	370c      	adds	r7, #12
    6e24:	46bd      	mov	sp, r7
    6e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e2a:	4770      	bx	lr

00006e2c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6e2c:	b480      	push	{r7}
    6e2e:	b083      	sub	sp, #12
    6e30:	af00      	add	r7, sp, #0
    6e32:	6078      	str	r0, [r7, #4]
    6e34:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6e36:	687b      	ldr	r3, [r7, #4]
    6e38:	689a      	ldr	r2, [r3, #8]
    6e3a:	683b      	ldr	r3, [r7, #0]
    6e3c:	4013      	ands	r3, r2
    6e3e:	2b00      	cmp	r3, #0
    6e40:	bf14      	ite	ne
    6e42:	2301      	movne	r3, #1
    6e44:	2300      	moveq	r3, #0
    6e46:	b2db      	uxtb	r3, r3
}
    6e48:	4618      	mov	r0, r3
    6e4a:	370c      	adds	r7, #12
    6e4c:	46bd      	mov	sp, r7
    6e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e52:	4770      	bx	lr

00006e54 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6e54:	b480      	push	{r7}
    6e56:	b083      	sub	sp, #12
    6e58:	af00      	add	r7, sp, #0
    6e5a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    6e5c:	687b      	ldr	r3, [r7, #4]
    6e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6e60:	f003 0301 	and.w	r3, r3, #1
    6e64:	2b00      	cmp	r3, #0
    6e66:	bf14      	ite	ne
    6e68:	2301      	movne	r3, #1
    6e6a:	2300      	moveq	r3, #0
    6e6c:	b2db      	uxtb	r3, r3
}
    6e6e:	4618      	mov	r0, r3
    6e70:	370c      	adds	r7, #12
    6e72:	46bd      	mov	sp, r7
    6e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e78:	4770      	bx	lr

00006e7a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6e7a:	b480      	push	{r7}
    6e7c:	b083      	sub	sp, #12
    6e7e:	af00      	add	r7, sp, #0
    6e80:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	2201      	movs	r2, #1
    6e86:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6e88:	bf00      	nop
    6e8a:	370c      	adds	r7, #12
    6e8c:	46bd      	mov	sp, r7
    6e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e92:	4770      	bx	lr

00006e94 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6e94:	b480      	push	{r7}
    6e96:	b083      	sub	sp, #12
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
    6e9c:	460b      	mov	r3, r1
    6e9e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6ea0:	687b      	ldr	r3, [r7, #4]
    6ea2:	78fa      	ldrb	r2, [r7, #3]
    6ea4:	715a      	strb	r2, [r3, #5]
}
    6ea6:	bf00      	nop
    6ea8:	370c      	adds	r7, #12
    6eaa:	46bd      	mov	sp, r7
    6eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eb0:	4770      	bx	lr

00006eb2 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6eb2:	b480      	push	{r7}
    6eb4:	b083      	sub	sp, #12
    6eb6:	af00      	add	r7, sp, #0
    6eb8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	2201      	movs	r2, #1
    6ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
    6ec0:	bf00      	nop
    6ec2:	370c      	adds	r7, #12
    6ec4:	46bd      	mov	sp, r7
    6ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eca:	4770      	bx	lr

00006ecc <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6ecc:	b580      	push	{r7, lr}
    6ece:	b082      	sub	sp, #8
    6ed0:	af00      	add	r7, sp, #0
    6ed2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	681b      	ldr	r3, [r3, #0]
    6ed8:	f043 0201 	orr.w	r2, r3, #1
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6ee0:	2101      	movs	r1, #1
    6ee2:	6878      	ldr	r0, [r7, #4]
    6ee4:	4b02      	ldr	r3, [pc, #8]	; (6ef0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    6ee6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6ee8:	bf00      	nop
    6eea:	3708      	adds	r7, #8
    6eec:	46bd      	mov	sp, r7
    6eee:	bd80      	pop	{r7, pc}
    6ef0:	00006e09 	.word	0x00006e09

00006ef4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6ef4:	b580      	push	{r7, lr}
    6ef6:	b082      	sub	sp, #8
    6ef8:	af00      	add	r7, sp, #0
    6efa:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	f043 0202 	orr.w	r2, r3, #2
    6f04:	687b      	ldr	r3, [r7, #4]
    6f06:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6f08:	2103      	movs	r1, #3
    6f0a:	6878      	ldr	r0, [r7, #4]
    6f0c:	4b02      	ldr	r3, [pc, #8]	; (6f18 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    6f0e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6f10:	bf00      	nop
    6f12:	3708      	adds	r7, #8
    6f14:	46bd      	mov	sp, r7
    6f16:	bd80      	pop	{r7, pc}
    6f18:	00006e09 	.word	0x00006e09

00006f1c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6f1c:	b580      	push	{r7, lr}
    6f1e:	b084      	sub	sp, #16
    6f20:	af00      	add	r7, sp, #0
    6f22:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6f24:	2103      	movs	r1, #3
    6f26:	6878      	ldr	r0, [r7, #4]
    6f28:	4b09      	ldr	r3, [pc, #36]	; (6f50 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    6f2a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	681b      	ldr	r3, [r3, #0]
    6f30:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6f32:	68fb      	ldr	r3, [r7, #12]
    6f34:	085b      	lsrs	r3, r3, #1
    6f36:	f003 0301 	and.w	r3, r3, #1
    6f3a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6f3c:	68fb      	ldr	r3, [r7, #12]
    6f3e:	2b00      	cmp	r3, #0
    6f40:	bf14      	ite	ne
    6f42:	2301      	movne	r3, #1
    6f44:	2300      	moveq	r3, #0
    6f46:	b2db      	uxtb	r3, r3
}
    6f48:	4618      	mov	r0, r3
    6f4a:	3710      	adds	r7, #16
    6f4c:	46bd      	mov	sp, r7
    6f4e:	bd80      	pop	{r7, pc}
    6f50:	00006e09 	.word	0x00006e09

00006f54 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6f54:	b580      	push	{r7, lr}
    6f56:	b082      	sub	sp, #8
    6f58:	af00      	add	r7, sp, #0
    6f5a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	681b      	ldr	r3, [r3, #0]
    6f60:	f023 0202 	bic.w	r2, r3, #2
    6f64:	687b      	ldr	r3, [r7, #4]
    6f66:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6f68:	2103      	movs	r1, #3
    6f6a:	6878      	ldr	r0, [r7, #4]
    6f6c:	4b02      	ldr	r3, [pc, #8]	; (6f78 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    6f6e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6f70:	bf00      	nop
    6f72:	3708      	adds	r7, #8
    6f74:	46bd      	mov	sp, r7
    6f76:	bd80      	pop	{r7, pc}
    6f78:	00006e09 	.word	0x00006e09

00006f7c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b084      	sub	sp, #16
    6f80:	af00      	add	r7, sp, #0
    6f82:	6078      	str	r0, [r7, #4]
    6f84:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6f86:	2103      	movs	r1, #3
    6f88:	6878      	ldr	r0, [r7, #4]
    6f8a:	4b07      	ldr	r3, [pc, #28]	; (6fa8 <hri_tcc_get_CTRLA_reg+0x2c>)
    6f8c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6f8e:	687b      	ldr	r3, [r7, #4]
    6f90:	681b      	ldr	r3, [r3, #0]
    6f92:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6f94:	68fa      	ldr	r2, [r7, #12]
    6f96:	683b      	ldr	r3, [r7, #0]
    6f98:	4013      	ands	r3, r2
    6f9a:	60fb      	str	r3, [r7, #12]
	return tmp;
    6f9c:	68fb      	ldr	r3, [r7, #12]
}
    6f9e:	4618      	mov	r0, r3
    6fa0:	3710      	adds	r7, #16
    6fa2:	46bd      	mov	sp, r7
    6fa4:	bd80      	pop	{r7, pc}
    6fa6:	bf00      	nop
    6fa8:	00006e09 	.word	0x00006e09

00006fac <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    6fac:	b580      	push	{r7, lr}
    6fae:	b082      	sub	sp, #8
    6fb0:	af00      	add	r7, sp, #0
    6fb2:	6078      	str	r0, [r7, #4]
    6fb4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6fb6:	687b      	ldr	r3, [r7, #4]
    6fb8:	683a      	ldr	r2, [r7, #0]
    6fba:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6fbc:	2103      	movs	r1, #3
    6fbe:	6878      	ldr	r0, [r7, #4]
    6fc0:	4b02      	ldr	r3, [pc, #8]	; (6fcc <hri_tcc_write_CTRLA_reg+0x20>)
    6fc2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6fc4:	bf00      	nop
    6fc6:	3708      	adds	r7, #8
    6fc8:	46bd      	mov	sp, r7
    6fca:	bd80      	pop	{r7, pc}
    6fcc:	00006e09 	.word	0x00006e09

00006fd0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    6fd0:	b480      	push	{r7}
    6fd2:	b083      	sub	sp, #12
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	6078      	str	r0, [r7, #4]
    6fd8:	460b      	mov	r3, r1
    6fda:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    6fdc:	687b      	ldr	r3, [r7, #4]
    6fde:	78fa      	ldrb	r2, [r7, #3]
    6fe0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6fe2:	bf00      	nop
    6fe4:	370c      	adds	r7, #12
    6fe6:	46bd      	mov	sp, r7
    6fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fec:	4770      	bx	lr

00006fee <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    6fee:	b480      	push	{r7}
    6ff0:	b083      	sub	sp, #12
    6ff2:	af00      	add	r7, sp, #0
    6ff4:	6078      	str	r0, [r7, #4]
    6ff6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    6ff8:	687b      	ldr	r3, [r7, #4]
    6ffa:	683a      	ldr	r2, [r7, #0]
    6ffc:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6ffe:	bf00      	nop
    7000:	370c      	adds	r7, #12
    7002:	46bd      	mov	sp, r7
    7004:	f85d 7b04 	ldr.w	r7, [sp], #4
    7008:	4770      	bx	lr
	...

0000700c <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    700c:	b580      	push	{r7, lr}
    700e:	b082      	sub	sp, #8
    7010:	af00      	add	r7, sp, #0
    7012:	6078      	str	r0, [r7, #4]
    7014:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	683a      	ldr	r2, [r7, #0]
    701a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    701c:	2180      	movs	r1, #128	; 0x80
    701e:	6878      	ldr	r0, [r7, #4]
    7020:	4b02      	ldr	r3, [pc, #8]	; (702c <hri_tcc_write_PER_reg+0x20>)
    7022:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7024:	bf00      	nop
    7026:	3708      	adds	r7, #8
    7028:	46bd      	mov	sp, r7
    702a:	bd80      	pop	{r7, pc}
    702c:	00006e09 	.word	0x00006e09

00007030 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7030:	b580      	push	{r7, lr}
    7032:	b082      	sub	sp, #8
    7034:	af00      	add	r7, sp, #0
    7036:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7038:	2180      	movs	r1, #128	; 0x80
    703a:	6878      	ldr	r0, [r7, #4]
    703c:	4b03      	ldr	r3, [pc, #12]	; (704c <hri_tcc_read_PER_reg+0x1c>)
    703e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7044:	4618      	mov	r0, r3
    7046:	3708      	adds	r7, #8
    7048:	46bd      	mov	sp, r7
    704a:	bd80      	pop	{r7, pc}
    704c:	00006e09 	.word	0x00006e09

00007050 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7050:	b480      	push	{r7}
    7052:	b083      	sub	sp, #12
    7054:	af00      	add	r7, sp, #0
    7056:	6078      	str	r0, [r7, #4]
    7058:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    705a:	687b      	ldr	r3, [r7, #4]
    705c:	4a0c      	ldr	r2, [pc, #48]	; (7090 <_tcc_init_irq_param+0x40>)
    705e:	4293      	cmp	r3, r2
    7060:	d102      	bne.n	7068 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7062:	4a0c      	ldr	r2, [pc, #48]	; (7094 <_tcc_init_irq_param+0x44>)
    7064:	683b      	ldr	r3, [r7, #0]
    7066:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7068:	687b      	ldr	r3, [r7, #4]
    706a:	4a0b      	ldr	r2, [pc, #44]	; (7098 <_tcc_init_irq_param+0x48>)
    706c:	4293      	cmp	r3, r2
    706e:	d102      	bne.n	7076 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7070:	4a0a      	ldr	r2, [pc, #40]	; (709c <_tcc_init_irq_param+0x4c>)
    7072:	683b      	ldr	r3, [r7, #0]
    7074:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	4a09      	ldr	r2, [pc, #36]	; (70a0 <_tcc_init_irq_param+0x50>)
    707a:	4293      	cmp	r3, r2
    707c:	d102      	bne.n	7084 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    707e:	4a09      	ldr	r2, [pc, #36]	; (70a4 <_tcc_init_irq_param+0x54>)
    7080:	683b      	ldr	r3, [r7, #0]
    7082:	6013      	str	r3, [r2, #0]
	}
}
    7084:	bf00      	nop
    7086:	370c      	adds	r7, #12
    7088:	46bd      	mov	sp, r7
    708a:	f85d 7b04 	ldr.w	r7, [sp], #4
    708e:	4770      	bx	lr
    7090:	41016000 	.word	0x41016000
    7094:	20000c00 	.word	0x20000c00
    7098:	41018000 	.word	0x41018000
    709c:	20000c04 	.word	0x20000c04
    70a0:	42000c00 	.word	0x42000c00
    70a4:	20000c08 	.word	0x20000c08

000070a8 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    70a8:	b580      	push	{r7, lr}
    70aa:	b084      	sub	sp, #16
    70ac:	af00      	add	r7, sp, #0
    70ae:	6078      	str	r0, [r7, #4]
    70b0:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    70b2:	6838      	ldr	r0, [r7, #0]
    70b4:	4b33      	ldr	r3, [pc, #204]	; (7184 <_tcc_timer_init+0xdc>)
    70b6:	4798      	blx	r3
    70b8:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	2b00      	cmp	r3, #0
    70be:	d102      	bne.n	70c6 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    70c0:	f06f 0309 	mvn.w	r3, #9
    70c4:	e05a      	b.n	717c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	683a      	ldr	r2, [r7, #0]
    70ca:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    70cc:	2101      	movs	r1, #1
    70ce:	6838      	ldr	r0, [r7, #0]
    70d0:	4b2d      	ldr	r3, [pc, #180]	; (7188 <_tcc_timer_init+0xe0>)
    70d2:	4798      	blx	r3
    70d4:	4603      	mov	r3, r0
    70d6:	f083 0301 	eor.w	r3, r3, #1
    70da:	b2db      	uxtb	r3, r3
    70dc:	2b00      	cmp	r3, #0
    70de:	d011      	beq.n	7104 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    70e0:	2102      	movs	r1, #2
    70e2:	6838      	ldr	r0, [r7, #0]
    70e4:	4b29      	ldr	r3, [pc, #164]	; (718c <_tcc_timer_init+0xe4>)
    70e6:	4798      	blx	r3
    70e8:	4603      	mov	r3, r0
    70ea:	2b00      	cmp	r3, #0
    70ec:	d006      	beq.n	70fc <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    70ee:	6838      	ldr	r0, [r7, #0]
    70f0:	4b27      	ldr	r3, [pc, #156]	; (7190 <_tcc_timer_init+0xe8>)
    70f2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    70f4:	2102      	movs	r1, #2
    70f6:	6838      	ldr	r0, [r7, #0]
    70f8:	4b26      	ldr	r3, [pc, #152]	; (7194 <_tcc_timer_init+0xec>)
    70fa:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    70fc:	2101      	movs	r1, #1
    70fe:	6838      	ldr	r0, [r7, #0]
    7100:	4b25      	ldr	r3, [pc, #148]	; (7198 <_tcc_timer_init+0xf0>)
    7102:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7104:	2101      	movs	r1, #1
    7106:	6838      	ldr	r0, [r7, #0]
    7108:	4b22      	ldr	r3, [pc, #136]	; (7194 <_tcc_timer_init+0xec>)
    710a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    710c:	68fb      	ldr	r3, [r7, #12]
    710e:	689b      	ldr	r3, [r3, #8]
    7110:	4619      	mov	r1, r3
    7112:	6838      	ldr	r0, [r7, #0]
    7114:	4b20      	ldr	r3, [pc, #128]	; (7198 <_tcc_timer_init+0xf0>)
    7116:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7118:	68fb      	ldr	r3, [r7, #12]
    711a:	7b1b      	ldrb	r3, [r3, #12]
    711c:	4619      	mov	r1, r3
    711e:	6838      	ldr	r0, [r7, #0]
    7120:	4b1e      	ldr	r3, [pc, #120]	; (719c <_tcc_timer_init+0xf4>)
    7122:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7124:	68fb      	ldr	r3, [r7, #12]
    7126:	7b5b      	ldrb	r3, [r3, #13]
    7128:	4619      	mov	r1, r3
    712a:	6838      	ldr	r0, [r7, #0]
    712c:	4b1c      	ldr	r3, [pc, #112]	; (71a0 <_tcc_timer_init+0xf8>)
    712e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7130:	68fb      	ldr	r3, [r7, #12]
    7132:	691b      	ldr	r3, [r3, #16]
    7134:	4619      	mov	r1, r3
    7136:	6838      	ldr	r0, [r7, #0]
    7138:	4b1a      	ldr	r3, [pc, #104]	; (71a4 <_tcc_timer_init+0xfc>)
    713a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    713c:	68fb      	ldr	r3, [r7, #12]
    713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7140:	4619      	mov	r1, r3
    7142:	6838      	ldr	r0, [r7, #0]
    7144:	4b18      	ldr	r3, [pc, #96]	; (71a8 <_tcc_timer_init+0x100>)
    7146:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7148:	6838      	ldr	r0, [r7, #0]
    714a:	4b18      	ldr	r3, [pc, #96]	; (71ac <_tcc_timer_init+0x104>)
    714c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    714e:	6879      	ldr	r1, [r7, #4]
    7150:	6838      	ldr	r0, [r7, #0]
    7152:	4b17      	ldr	r3, [pc, #92]	; (71b0 <_tcc_timer_init+0x108>)
    7154:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7156:	68fb      	ldr	r3, [r7, #12]
    7158:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    715c:	4618      	mov	r0, r3
    715e:	4b15      	ldr	r3, [pc, #84]	; (71b4 <_tcc_timer_init+0x10c>)
    7160:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7162:	68fb      	ldr	r3, [r7, #12]
    7164:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7168:	4618      	mov	r0, r3
    716a:	4b13      	ldr	r3, [pc, #76]	; (71b8 <_tcc_timer_init+0x110>)
    716c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    716e:	68fb      	ldr	r3, [r7, #12]
    7170:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7174:	4618      	mov	r0, r3
    7176:	4b11      	ldr	r3, [pc, #68]	; (71bc <_tcc_timer_init+0x114>)
    7178:	4798      	blx	r3

	return ERR_NONE;
    717a:	2300      	movs	r3, #0
}
    717c:	4618      	mov	r0, r3
    717e:	3710      	adds	r7, #16
    7180:	46bd      	mov	sp, r7
    7182:	bd80      	pop	{r7, pc}
    7184:	0000738d 	.word	0x0000738d
    7188:	00006e2d 	.word	0x00006e2d
    718c:	00006f7d 	.word	0x00006f7d
    7190:	00006f55 	.word	0x00006f55
    7194:	00006e09 	.word	0x00006e09
    7198:	00006fad 	.word	0x00006fad
    719c:	00006e95 	.word	0x00006e95
    71a0:	00006fd1 	.word	0x00006fd1
    71a4:	00006fef 	.word	0x00006fef
    71a8:	0000700d 	.word	0x0000700d
    71ac:	00006eb3 	.word	0x00006eb3
    71b0:	00007051 	.word	0x00007051
    71b4:	00006d89 	.word	0x00006d89
    71b8:	00006dcd 	.word	0x00006dcd
    71bc:	00006d4d 	.word	0x00006d4d

000071c0 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    71c0:	b580      	push	{r7, lr}
    71c2:	b084      	sub	sp, #16
    71c4:	af00      	add	r7, sp, #0
    71c6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    71c8:	687b      	ldr	r3, [r7, #4]
    71ca:	68db      	ldr	r3, [r3, #12]
    71cc:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    71ce:	68f8      	ldr	r0, [r7, #12]
    71d0:	4b0a      	ldr	r3, [pc, #40]	; (71fc <_tcc_timer_deinit+0x3c>)
    71d2:	4798      	blx	r3
    71d4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    71d6:	68bb      	ldr	r3, [r7, #8]
    71d8:	2b00      	cmp	r3, #0
    71da:	d00b      	beq.n	71f4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    71dc:	68bb      	ldr	r3, [r7, #8]
    71de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    71e2:	4618      	mov	r0, r3
    71e4:	4b06      	ldr	r3, [pc, #24]	; (7200 <_tcc_timer_deinit+0x40>)
    71e6:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    71e8:	68f8      	ldr	r0, [r7, #12]
    71ea:	4b06      	ldr	r3, [pc, #24]	; (7204 <_tcc_timer_deinit+0x44>)
    71ec:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    71ee:	68f8      	ldr	r0, [r7, #12]
    71f0:	4b05      	ldr	r3, [pc, #20]	; (7208 <_tcc_timer_deinit+0x48>)
    71f2:	4798      	blx	r3
	}
}
    71f4:	bf00      	nop
    71f6:	3710      	adds	r7, #16
    71f8:	46bd      	mov	sp, r7
    71fa:	bd80      	pop	{r7, pc}
    71fc:	0000738d 	.word	0x0000738d
    7200:	00006d89 	.word	0x00006d89
    7204:	00006f55 	.word	0x00006f55
    7208:	00006ecd 	.word	0x00006ecd

0000720c <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    720c:	b580      	push	{r7, lr}
    720e:	b082      	sub	sp, #8
    7210:	af00      	add	r7, sp, #0
    7212:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7214:	687b      	ldr	r3, [r7, #4]
    7216:	68db      	ldr	r3, [r3, #12]
    7218:	4618      	mov	r0, r3
    721a:	4b03      	ldr	r3, [pc, #12]	; (7228 <_tcc_timer_start+0x1c>)
    721c:	4798      	blx	r3
}
    721e:	bf00      	nop
    7220:	3708      	adds	r7, #8
    7222:	46bd      	mov	sp, r7
    7224:	bd80      	pop	{r7, pc}
    7226:	bf00      	nop
    7228:	00006ef5 	.word	0x00006ef5

0000722c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    722c:	b580      	push	{r7, lr}
    722e:	b082      	sub	sp, #8
    7230:	af00      	add	r7, sp, #0
    7232:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	68db      	ldr	r3, [r3, #12]
    7238:	4618      	mov	r0, r3
    723a:	4b03      	ldr	r3, [pc, #12]	; (7248 <_tcc_timer_stop+0x1c>)
    723c:	4798      	blx	r3
}
    723e:	bf00      	nop
    7240:	3708      	adds	r7, #8
    7242:	46bd      	mov	sp, r7
    7244:	bd80      	pop	{r7, pc}
    7246:	bf00      	nop
    7248:	00006f55 	.word	0x00006f55

0000724c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    724c:	b580      	push	{r7, lr}
    724e:	b082      	sub	sp, #8
    7250:	af00      	add	r7, sp, #0
    7252:	6078      	str	r0, [r7, #4]
    7254:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7256:	687b      	ldr	r3, [r7, #4]
    7258:	68db      	ldr	r3, [r3, #12]
    725a:	6839      	ldr	r1, [r7, #0]
    725c:	4618      	mov	r0, r3
    725e:	4b03      	ldr	r3, [pc, #12]	; (726c <_tcc_timer_set_period+0x20>)
    7260:	4798      	blx	r3
}
    7262:	bf00      	nop
    7264:	3708      	adds	r7, #8
    7266:	46bd      	mov	sp, r7
    7268:	bd80      	pop	{r7, pc}
    726a:	bf00      	nop
    726c:	0000700d 	.word	0x0000700d

00007270 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7270:	b580      	push	{r7, lr}
    7272:	b082      	sub	sp, #8
    7274:	af00      	add	r7, sp, #0
    7276:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7278:	687b      	ldr	r3, [r7, #4]
    727a:	68db      	ldr	r3, [r3, #12]
    727c:	4618      	mov	r0, r3
    727e:	4b03      	ldr	r3, [pc, #12]	; (728c <_tcc_timer_get_period+0x1c>)
    7280:	4798      	blx	r3
    7282:	4603      	mov	r3, r0
}
    7284:	4618      	mov	r0, r3
    7286:	3708      	adds	r7, #8
    7288:	46bd      	mov	sp, r7
    728a:	bd80      	pop	{r7, pc}
    728c:	00007031 	.word	0x00007031

00007290 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7290:	b580      	push	{r7, lr}
    7292:	b082      	sub	sp, #8
    7294:	af00      	add	r7, sp, #0
    7296:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7298:	687b      	ldr	r3, [r7, #4]
    729a:	68db      	ldr	r3, [r3, #12]
    729c:	4618      	mov	r0, r3
    729e:	4b03      	ldr	r3, [pc, #12]	; (72ac <_tcc_timer_is_started+0x1c>)
    72a0:	4798      	blx	r3
    72a2:	4603      	mov	r3, r0
}
    72a4:	4618      	mov	r0, r3
    72a6:	3708      	adds	r7, #8
    72a8:	46bd      	mov	sp, r7
    72aa:	bd80      	pop	{r7, pc}
    72ac:	00006f1d 	.word	0x00006f1d

000072b0 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    72b0:	b480      	push	{r7}
    72b2:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    72b4:	4b02      	ldr	r3, [pc, #8]	; (72c0 <_tcc_get_timer+0x10>)
}
    72b6:	4618      	mov	r0, r3
    72b8:	46bd      	mov	sp, r7
    72ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    72be:	4770      	bx	lr
    72c0:	200000f0 	.word	0x200000f0

000072c4 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    72c4:	b580      	push	{r7, lr}
    72c6:	b084      	sub	sp, #16
    72c8:	af00      	add	r7, sp, #0
    72ca:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    72cc:	687b      	ldr	r3, [r7, #4]
    72ce:	68db      	ldr	r3, [r3, #12]
    72d0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    72d2:	68f8      	ldr	r0, [r7, #12]
    72d4:	4b08      	ldr	r3, [pc, #32]	; (72f8 <_tcc_timer_set_irq+0x34>)
    72d6:	4798      	blx	r3
    72d8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    72da:	68bb      	ldr	r3, [r7, #8]
    72dc:	2b00      	cmp	r3, #0
    72de:	d006      	beq.n	72ee <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    72e0:	68bb      	ldr	r3, [r7, #8]
    72e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    72e6:	b2db      	uxtb	r3, r3
    72e8:	4618      	mov	r0, r3
    72ea:	4b04      	ldr	r3, [pc, #16]	; (72fc <_tcc_timer_set_irq+0x38>)
    72ec:	4798      	blx	r3
	}
}
    72ee:	bf00      	nop
    72f0:	3710      	adds	r7, #16
    72f2:	46bd      	mov	sp, r7
    72f4:	bd80      	pop	{r7, pc}
    72f6:	bf00      	nop
    72f8:	0000738d 	.word	0x0000738d
    72fc:	0000b0fd 	.word	0x0000b0fd

00007300 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7300:	b580      	push	{r7, lr}
    7302:	b084      	sub	sp, #16
    7304:	af00      	add	r7, sp, #0
    7306:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	68db      	ldr	r3, [r3, #12]
    730c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    730e:	68f8      	ldr	r0, [r7, #12]
    7310:	4b07      	ldr	r3, [pc, #28]	; (7330 <tcc_interrupt_handler+0x30>)
    7312:	4798      	blx	r3
    7314:	4603      	mov	r3, r0
    7316:	2b00      	cmp	r3, #0
    7318:	d006      	beq.n	7328 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    731a:	68f8      	ldr	r0, [r7, #12]
    731c:	4b05      	ldr	r3, [pc, #20]	; (7334 <tcc_interrupt_handler+0x34>)
    731e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	681b      	ldr	r3, [r3, #0]
    7324:	6878      	ldr	r0, [r7, #4]
    7326:	4798      	blx	r3
	}
}
    7328:	bf00      	nop
    732a:	3710      	adds	r7, #16
    732c:	46bd      	mov	sp, r7
    732e:	bd80      	pop	{r7, pc}
    7330:	00006e55 	.word	0x00006e55
    7334:	00006e7b 	.word	0x00006e7b

00007338 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7338:	b580      	push	{r7, lr}
    733a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    733c:	4b03      	ldr	r3, [pc, #12]	; (734c <TCC0_0_Handler+0x14>)
    733e:	681b      	ldr	r3, [r3, #0]
    7340:	4618      	mov	r0, r3
    7342:	4b03      	ldr	r3, [pc, #12]	; (7350 <TCC0_0_Handler+0x18>)
    7344:	4798      	blx	r3
}
    7346:	bf00      	nop
    7348:	bd80      	pop	{r7, pc}
    734a:	bf00      	nop
    734c:	20000c00 	.word	0x20000c00
    7350:	00007301 	.word	0x00007301

00007354 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7354:	b580      	push	{r7, lr}
    7356:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7358:	4b03      	ldr	r3, [pc, #12]	; (7368 <TCC1_0_Handler+0x14>)
    735a:	681b      	ldr	r3, [r3, #0]
    735c:	4618      	mov	r0, r3
    735e:	4b03      	ldr	r3, [pc, #12]	; (736c <TCC1_0_Handler+0x18>)
    7360:	4798      	blx	r3
}
    7362:	bf00      	nop
    7364:	bd80      	pop	{r7, pc}
    7366:	bf00      	nop
    7368:	20000c04 	.word	0x20000c04
    736c:	00007301 	.word	0x00007301

00007370 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    7370:	b580      	push	{r7, lr}
    7372:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    7374:	4b03      	ldr	r3, [pc, #12]	; (7384 <TCC2_0_Handler+0x14>)
    7376:	681b      	ldr	r3, [r3, #0]
    7378:	4618      	mov	r0, r3
    737a:	4b03      	ldr	r3, [pc, #12]	; (7388 <TCC2_0_Handler+0x18>)
    737c:	4798      	blx	r3
}
    737e:	bf00      	nop
    7380:	bd80      	pop	{r7, pc}
    7382:	bf00      	nop
    7384:	20000c08 	.word	0x20000c08
    7388:	00007301 	.word	0x00007301

0000738c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    738c:	b480      	push	{r7}
    738e:	b085      	sub	sp, #20
    7390:	af00      	add	r7, sp, #0
    7392:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7394:	2300      	movs	r3, #0
    7396:	73fb      	strb	r3, [r7, #15]
    7398:	e015      	b.n	73c6 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    739a:	7bfa      	ldrb	r2, [r7, #15]
    739c:	490f      	ldr	r1, [pc, #60]	; (73dc <_get_tcc_cfg+0x50>)
    739e:	4613      	mov	r3, r2
    73a0:	005b      	lsls	r3, r3, #1
    73a2:	4413      	add	r3, r2
    73a4:	011b      	lsls	r3, r3, #4
    73a6:	440b      	add	r3, r1
    73a8:	681a      	ldr	r2, [r3, #0]
    73aa:	687b      	ldr	r3, [r7, #4]
    73ac:	429a      	cmp	r2, r3
    73ae:	d107      	bne.n	73c0 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    73b0:	7bfa      	ldrb	r2, [r7, #15]
    73b2:	4613      	mov	r3, r2
    73b4:	005b      	lsls	r3, r3, #1
    73b6:	4413      	add	r3, r2
    73b8:	011b      	lsls	r3, r3, #4
    73ba:	4a08      	ldr	r2, [pc, #32]	; (73dc <_get_tcc_cfg+0x50>)
    73bc:	4413      	add	r3, r2
    73be:	e006      	b.n	73ce <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    73c0:	7bfb      	ldrb	r3, [r7, #15]
    73c2:	3301      	adds	r3, #1
    73c4:	73fb      	strb	r3, [r7, #15]
    73c6:	7bfb      	ldrb	r3, [r7, #15]
    73c8:	2b02      	cmp	r3, #2
    73ca:	d9e6      	bls.n	739a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    73cc:	2300      	movs	r3, #0
}
    73ce:	4618      	mov	r0, r3
    73d0:	3714      	adds	r7, #20
    73d2:	46bd      	mov	sp, r7
    73d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73d8:	4770      	bx	lr
    73da:	bf00      	nop
    73dc:	20000060 	.word	0x20000060

000073e0 <__NVIC_EnableIRQ>:
{
    73e0:	b480      	push	{r7}
    73e2:	b083      	sub	sp, #12
    73e4:	af00      	add	r7, sp, #0
    73e6:	4603      	mov	r3, r0
    73e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    73ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    73ee:	2b00      	cmp	r3, #0
    73f0:	db0b      	blt.n	740a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    73f2:	4909      	ldr	r1, [pc, #36]	; (7418 <__NVIC_EnableIRQ+0x38>)
    73f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    73f8:	095b      	lsrs	r3, r3, #5
    73fa:	88fa      	ldrh	r2, [r7, #6]
    73fc:	f002 021f 	and.w	r2, r2, #31
    7400:	2001      	movs	r0, #1
    7402:	fa00 f202 	lsl.w	r2, r0, r2
    7406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    740a:	bf00      	nop
    740c:	370c      	adds	r7, #12
    740e:	46bd      	mov	sp, r7
    7410:	f85d 7b04 	ldr.w	r7, [sp], #4
    7414:	4770      	bx	lr
    7416:	bf00      	nop
    7418:	e000e100 	.word	0xe000e100

0000741c <__NVIC_DisableIRQ>:
{
    741c:	b480      	push	{r7}
    741e:	b083      	sub	sp, #12
    7420:	af00      	add	r7, sp, #0
    7422:	4603      	mov	r3, r0
    7424:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    742a:	2b00      	cmp	r3, #0
    742c:	db10      	blt.n	7450 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    742e:	490b      	ldr	r1, [pc, #44]	; (745c <__NVIC_DisableIRQ+0x40>)
    7430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7434:	095b      	lsrs	r3, r3, #5
    7436:	88fa      	ldrh	r2, [r7, #6]
    7438:	f002 021f 	and.w	r2, r2, #31
    743c:	2001      	movs	r0, #1
    743e:	fa00 f202 	lsl.w	r2, r0, r2
    7442:	3320      	adds	r3, #32
    7444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    744c:	f3bf 8f6f 	isb	sy
}
    7450:	bf00      	nop
    7452:	370c      	adds	r7, #12
    7454:	46bd      	mov	sp, r7
    7456:	f85d 7b04 	ldr.w	r7, [sp], #4
    745a:	4770      	bx	lr
    745c:	e000e100 	.word	0xe000e100

00007460 <__NVIC_ClearPendingIRQ>:
{
    7460:	b480      	push	{r7}
    7462:	b083      	sub	sp, #12
    7464:	af00      	add	r7, sp, #0
    7466:	4603      	mov	r3, r0
    7468:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    746a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    746e:	2b00      	cmp	r3, #0
    7470:	db0c      	blt.n	748c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7472:	4909      	ldr	r1, [pc, #36]	; (7498 <__NVIC_ClearPendingIRQ+0x38>)
    7474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7478:	095b      	lsrs	r3, r3, #5
    747a:	88fa      	ldrh	r2, [r7, #6]
    747c:	f002 021f 	and.w	r2, r2, #31
    7480:	2001      	movs	r0, #1
    7482:	fa00 f202 	lsl.w	r2, r0, r2
    7486:	3360      	adds	r3, #96	; 0x60
    7488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    748c:	bf00      	nop
    748e:	370c      	adds	r7, #12
    7490:	46bd      	mov	sp, r7
    7492:	f85d 7b04 	ldr.w	r7, [sp], #4
    7496:	4770      	bx	lr
    7498:	e000e100 	.word	0xe000e100

0000749c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    749c:	b480      	push	{r7}
    749e:	b083      	sub	sp, #12
    74a0:	af00      	add	r7, sp, #0
    74a2:	6078      	str	r0, [r7, #4]
    74a4:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    74a6:	bf00      	nop
    74a8:	687b      	ldr	r3, [r7, #4]
    74aa:	691a      	ldr	r2, [r3, #16]
    74ac:	683b      	ldr	r3, [r7, #0]
    74ae:	4013      	ands	r3, r2
    74b0:	2b00      	cmp	r3, #0
    74b2:	d1f9      	bne.n	74a8 <hri_tc_wait_for_sync+0xc>
	};
}
    74b4:	bf00      	nop
    74b6:	370c      	adds	r7, #12
    74b8:	46bd      	mov	sp, r7
    74ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    74be:	4770      	bx	lr

000074c0 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    74c0:	b480      	push	{r7}
    74c2:	b083      	sub	sp, #12
    74c4:	af00      	add	r7, sp, #0
    74c6:	6078      	str	r0, [r7, #4]
    74c8:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    74ca:	687b      	ldr	r3, [r7, #4]
    74cc:	691a      	ldr	r2, [r3, #16]
    74ce:	683b      	ldr	r3, [r7, #0]
    74d0:	4013      	ands	r3, r2
    74d2:	2b00      	cmp	r3, #0
    74d4:	bf14      	ite	ne
    74d6:	2301      	movne	r3, #1
    74d8:	2300      	moveq	r3, #0
    74da:	b2db      	uxtb	r3, r3
}
    74dc:	4618      	mov	r0, r3
    74de:	370c      	adds	r7, #12
    74e0:	46bd      	mov	sp, r7
    74e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    74e6:	4770      	bx	lr

000074e8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    74e8:	b480      	push	{r7}
    74ea:	b083      	sub	sp, #12
    74ec:	af00      	add	r7, sp, #0
    74ee:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	7a9b      	ldrb	r3, [r3, #10]
    74f4:	b2db      	uxtb	r3, r3
    74f6:	f003 0301 	and.w	r3, r3, #1
    74fa:	2b00      	cmp	r3, #0
    74fc:	bf14      	ite	ne
    74fe:	2301      	movne	r3, #1
    7500:	2300      	moveq	r3, #0
    7502:	b2db      	uxtb	r3, r3
}
    7504:	4618      	mov	r0, r3
    7506:	370c      	adds	r7, #12
    7508:	46bd      	mov	sp, r7
    750a:	f85d 7b04 	ldr.w	r7, [sp], #4
    750e:	4770      	bx	lr

00007510 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7510:	b480      	push	{r7}
    7512:	b083      	sub	sp, #12
    7514:	af00      	add	r7, sp, #0
    7516:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7518:	687b      	ldr	r3, [r7, #4]
    751a:	2201      	movs	r2, #1
    751c:	729a      	strb	r2, [r3, #10]
}
    751e:	bf00      	nop
    7520:	370c      	adds	r7, #12
    7522:	46bd      	mov	sp, r7
    7524:	f85d 7b04 	ldr.w	r7, [sp], #4
    7528:	4770      	bx	lr

0000752a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    752a:	b480      	push	{r7}
    752c:	b083      	sub	sp, #12
    752e:	af00      	add	r7, sp, #0
    7530:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	2202      	movs	r2, #2
    7536:	729a      	strb	r2, [r3, #10]
}
    7538:	bf00      	nop
    753a:	370c      	adds	r7, #12
    753c:	46bd      	mov	sp, r7
    753e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7542:	4770      	bx	lr

00007544 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7544:	b480      	push	{r7}
    7546:	b083      	sub	sp, #12
    7548:	af00      	add	r7, sp, #0
    754a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	2201      	movs	r2, #1
    7550:	725a      	strb	r2, [r3, #9]
}
    7552:	bf00      	nop
    7554:	370c      	adds	r7, #12
    7556:	46bd      	mov	sp, r7
    7558:	f85d 7b04 	ldr.w	r7, [sp], #4
    755c:	4770      	bx	lr

0000755e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    755e:	b480      	push	{r7}
    7560:	b083      	sub	sp, #12
    7562:	af00      	add	r7, sp, #0
    7564:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7566:	687b      	ldr	r3, [r7, #4]
    7568:	7a5b      	ldrb	r3, [r3, #9]
    756a:	b2db      	uxtb	r3, r3
    756c:	085b      	lsrs	r3, r3, #1
    756e:	f003 0301 	and.w	r3, r3, #1
    7572:	2b00      	cmp	r3, #0
    7574:	bf14      	ite	ne
    7576:	2301      	movne	r3, #1
    7578:	2300      	moveq	r3, #0
    757a:	b2db      	uxtb	r3, r3
}
    757c:	4618      	mov	r0, r3
    757e:	370c      	adds	r7, #12
    7580:	46bd      	mov	sp, r7
    7582:	f85d 7b04 	ldr.w	r7, [sp], #4
    7586:	4770      	bx	lr

00007588 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7588:	b580      	push	{r7, lr}
    758a:	b082      	sub	sp, #8
    758c:	af00      	add	r7, sp, #0
    758e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7590:	687b      	ldr	r3, [r7, #4]
    7592:	681b      	ldr	r3, [r3, #0]
    7594:	f043 0201 	orr.w	r2, r3, #1
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    759c:	2101      	movs	r1, #1
    759e:	6878      	ldr	r0, [r7, #4]
    75a0:	4b02      	ldr	r3, [pc, #8]	; (75ac <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    75a2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    75a4:	bf00      	nop
    75a6:	3708      	adds	r7, #8
    75a8:	46bd      	mov	sp, r7
    75aa:	bd80      	pop	{r7, pc}
    75ac:	0000749d 	.word	0x0000749d

000075b0 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    75b0:	b580      	push	{r7, lr}
    75b2:	b082      	sub	sp, #8
    75b4:	af00      	add	r7, sp, #0
    75b6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	681b      	ldr	r3, [r3, #0]
    75bc:	f043 0202 	orr.w	r2, r3, #2
    75c0:	687b      	ldr	r3, [r7, #4]
    75c2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    75c4:	2103      	movs	r1, #3
    75c6:	6878      	ldr	r0, [r7, #4]
    75c8:	4b02      	ldr	r3, [pc, #8]	; (75d4 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    75ca:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    75cc:	bf00      	nop
    75ce:	3708      	adds	r7, #8
    75d0:	46bd      	mov	sp, r7
    75d2:	bd80      	pop	{r7, pc}
    75d4:	0000749d 	.word	0x0000749d

000075d8 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    75d8:	b580      	push	{r7, lr}
    75da:	b084      	sub	sp, #16
    75dc:	af00      	add	r7, sp, #0
    75de:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    75e0:	2103      	movs	r1, #3
    75e2:	6878      	ldr	r0, [r7, #4]
    75e4:	4b09      	ldr	r3, [pc, #36]	; (760c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    75e6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	681b      	ldr	r3, [r3, #0]
    75ec:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    75ee:	68fb      	ldr	r3, [r7, #12]
    75f0:	085b      	lsrs	r3, r3, #1
    75f2:	f003 0301 	and.w	r3, r3, #1
    75f6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    75f8:	68fb      	ldr	r3, [r7, #12]
    75fa:	2b00      	cmp	r3, #0
    75fc:	bf14      	ite	ne
    75fe:	2301      	movne	r3, #1
    7600:	2300      	moveq	r3, #0
    7602:	b2db      	uxtb	r3, r3
}
    7604:	4618      	mov	r0, r3
    7606:	3710      	adds	r7, #16
    7608:	46bd      	mov	sp, r7
    760a:	bd80      	pop	{r7, pc}
    760c:	0000749d 	.word	0x0000749d

00007610 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7610:	b580      	push	{r7, lr}
    7612:	b082      	sub	sp, #8
    7614:	af00      	add	r7, sp, #0
    7616:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	681b      	ldr	r3, [r3, #0]
    761c:	f023 0202 	bic.w	r2, r3, #2
    7620:	687b      	ldr	r3, [r7, #4]
    7622:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7624:	2103      	movs	r1, #3
    7626:	6878      	ldr	r0, [r7, #4]
    7628:	4b02      	ldr	r3, [pc, #8]	; (7634 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    762a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    762c:	bf00      	nop
    762e:	3708      	adds	r7, #8
    7630:	46bd      	mov	sp, r7
    7632:	bd80      	pop	{r7, pc}
    7634:	0000749d 	.word	0x0000749d

00007638 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7638:	b480      	push	{r7}
    763a:	b085      	sub	sp, #20
    763c:	af00      	add	r7, sp, #0
    763e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	681b      	ldr	r3, [r3, #0]
    7644:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7646:	68fb      	ldr	r3, [r7, #12]
    7648:	089b      	lsrs	r3, r3, #2
    764a:	f003 0303 	and.w	r3, r3, #3
    764e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7650:	68fb      	ldr	r3, [r7, #12]
}
    7652:	4618      	mov	r0, r3
    7654:	3714      	adds	r7, #20
    7656:	46bd      	mov	sp, r7
    7658:	f85d 7b04 	ldr.w	r7, [sp], #4
    765c:	4770      	bx	lr
	...

00007660 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7660:	b580      	push	{r7, lr}
    7662:	b084      	sub	sp, #16
    7664:	af00      	add	r7, sp, #0
    7666:	6078      	str	r0, [r7, #4]
    7668:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    766a:	2103      	movs	r1, #3
    766c:	6878      	ldr	r0, [r7, #4]
    766e:	4b07      	ldr	r3, [pc, #28]	; (768c <hri_tc_get_CTRLA_reg+0x2c>)
    7670:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7672:	687b      	ldr	r3, [r7, #4]
    7674:	681b      	ldr	r3, [r3, #0]
    7676:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7678:	68fa      	ldr	r2, [r7, #12]
    767a:	683b      	ldr	r3, [r7, #0]
    767c:	4013      	ands	r3, r2
    767e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7680:	68fb      	ldr	r3, [r7, #12]
}
    7682:	4618      	mov	r0, r3
    7684:	3710      	adds	r7, #16
    7686:	46bd      	mov	sp, r7
    7688:	bd80      	pop	{r7, pc}
    768a:	bf00      	nop
    768c:	0000749d 	.word	0x0000749d

00007690 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7690:	b580      	push	{r7, lr}
    7692:	b082      	sub	sp, #8
    7694:	af00      	add	r7, sp, #0
    7696:	6078      	str	r0, [r7, #4]
    7698:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    769a:	687b      	ldr	r3, [r7, #4]
    769c:	683a      	ldr	r2, [r7, #0]
    769e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    76a0:	2103      	movs	r1, #3
    76a2:	6878      	ldr	r0, [r7, #4]
    76a4:	4b02      	ldr	r3, [pc, #8]	; (76b0 <hri_tc_write_CTRLA_reg+0x20>)
    76a6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    76a8:	bf00      	nop
    76aa:	3708      	adds	r7, #8
    76ac:	46bd      	mov	sp, r7
    76ae:	bd80      	pop	{r7, pc}
    76b0:	0000749d 	.word	0x0000749d

000076b4 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    76b4:	b480      	push	{r7}
    76b6:	b083      	sub	sp, #12
    76b8:	af00      	add	r7, sp, #0
    76ba:	6078      	str	r0, [r7, #4]
    76bc:	460b      	mov	r3, r1
    76be:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    76c0:	687b      	ldr	r3, [r7, #4]
    76c2:	887a      	ldrh	r2, [r7, #2]
    76c4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    76c6:	bf00      	nop
    76c8:	370c      	adds	r7, #12
    76ca:	46bd      	mov	sp, r7
    76cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    76d0:	4770      	bx	lr

000076d2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    76d2:	b480      	push	{r7}
    76d4:	b083      	sub	sp, #12
    76d6:	af00      	add	r7, sp, #0
    76d8:	6078      	str	r0, [r7, #4]
    76da:	460b      	mov	r3, r1
    76dc:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    76de:	687b      	ldr	r3, [r7, #4]
    76e0:	78fa      	ldrb	r2, [r7, #3]
    76e2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    76e4:	bf00      	nop
    76e6:	370c      	adds	r7, #12
    76e8:	46bd      	mov	sp, r7
    76ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ee:	4770      	bx	lr

000076f0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    76f0:	b480      	push	{r7}
    76f2:	b083      	sub	sp, #12
    76f4:	af00      	add	r7, sp, #0
    76f6:	6078      	str	r0, [r7, #4]
    76f8:	460b      	mov	r3, r1
    76fa:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    76fc:	687b      	ldr	r3, [r7, #4]
    76fe:	78fa      	ldrb	r2, [r7, #3]
    7700:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7702:	bf00      	nop
    7704:	370c      	adds	r7, #12
    7706:	46bd      	mov	sp, r7
    7708:	f85d 7b04 	ldr.w	r7, [sp], #4
    770c:	4770      	bx	lr
	...

00007710 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7710:	b580      	push	{r7, lr}
    7712:	b082      	sub	sp, #8
    7714:	af00      	add	r7, sp, #0
    7716:	6078      	str	r0, [r7, #4]
    7718:	460b      	mov	r3, r1
    771a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    771c:	687b      	ldr	r3, [r7, #4]
    771e:	78fa      	ldrb	r2, [r7, #3]
    7720:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7722:	2120      	movs	r1, #32
    7724:	6878      	ldr	r0, [r7, #4]
    7726:	4b03      	ldr	r3, [pc, #12]	; (7734 <hri_tccount8_write_PER_reg+0x24>)
    7728:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    772a:	bf00      	nop
    772c:	3708      	adds	r7, #8
    772e:	46bd      	mov	sp, r7
    7730:	bd80      	pop	{r7, pc}
    7732:	bf00      	nop
    7734:	0000749d 	.word	0x0000749d

00007738 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7738:	b580      	push	{r7, lr}
    773a:	b082      	sub	sp, #8
    773c:	af00      	add	r7, sp, #0
    773e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7740:	2120      	movs	r1, #32
    7742:	6878      	ldr	r0, [r7, #4]
    7744:	4b04      	ldr	r3, [pc, #16]	; (7758 <hri_tccount8_read_PER_reg+0x20>)
    7746:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7748:	687b      	ldr	r3, [r7, #4]
    774a:	7edb      	ldrb	r3, [r3, #27]
    774c:	b2db      	uxtb	r3, r3
}
    774e:	4618      	mov	r0, r3
    7750:	3708      	adds	r7, #8
    7752:	46bd      	mov	sp, r7
    7754:	bd80      	pop	{r7, pc}
    7756:	bf00      	nop
    7758:	0000749d 	.word	0x0000749d

0000775c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    775c:	b580      	push	{r7, lr}
    775e:	b082      	sub	sp, #8
    7760:	af00      	add	r7, sp, #0
    7762:	6078      	str	r0, [r7, #4]
    7764:	460b      	mov	r3, r1
    7766:	70fb      	strb	r3, [r7, #3]
    7768:	4613      	mov	r3, r2
    776a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    776c:	78fb      	ldrb	r3, [r7, #3]
    776e:	687a      	ldr	r2, [r7, #4]
    7770:	4413      	add	r3, r2
    7772:	78ba      	ldrb	r2, [r7, #2]
    7774:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7776:	21c0      	movs	r1, #192	; 0xc0
    7778:	6878      	ldr	r0, [r7, #4]
    777a:	4b03      	ldr	r3, [pc, #12]	; (7788 <hri_tccount8_write_CC_reg+0x2c>)
    777c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    777e:	bf00      	nop
    7780:	3708      	adds	r7, #8
    7782:	46bd      	mov	sp, r7
    7784:	bd80      	pop	{r7, pc}
    7786:	bf00      	nop
    7788:	0000749d 	.word	0x0000749d

0000778c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    778c:	b580      	push	{r7, lr}
    778e:	b082      	sub	sp, #8
    7790:	af00      	add	r7, sp, #0
    7792:	6078      	str	r0, [r7, #4]
    7794:	460b      	mov	r3, r1
    7796:	70fb      	strb	r3, [r7, #3]
    7798:	4613      	mov	r3, r2
    779a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    779c:	78fb      	ldrb	r3, [r7, #3]
    779e:	687a      	ldr	r2, [r7, #4]
    77a0:	330c      	adds	r3, #12
    77a2:	005b      	lsls	r3, r3, #1
    77a4:	4413      	add	r3, r2
    77a6:	883a      	ldrh	r2, [r7, #0]
    77a8:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    77aa:	21c0      	movs	r1, #192	; 0xc0
    77ac:	6878      	ldr	r0, [r7, #4]
    77ae:	4b03      	ldr	r3, [pc, #12]	; (77bc <hri_tccount16_write_CC_reg+0x30>)
    77b0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    77b2:	bf00      	nop
    77b4:	3708      	adds	r7, #8
    77b6:	46bd      	mov	sp, r7
    77b8:	bd80      	pop	{r7, pc}
    77ba:	bf00      	nop
    77bc:	0000749d 	.word	0x0000749d

000077c0 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    77c0:	b580      	push	{r7, lr}
    77c2:	b082      	sub	sp, #8
    77c4:	af00      	add	r7, sp, #0
    77c6:	6078      	str	r0, [r7, #4]
    77c8:	460b      	mov	r3, r1
    77ca:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    77cc:	21c0      	movs	r1, #192	; 0xc0
    77ce:	6878      	ldr	r0, [r7, #4]
    77d0:	4b06      	ldr	r3, [pc, #24]	; (77ec <hri_tccount16_read_CC_reg+0x2c>)
    77d2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    77d4:	78fb      	ldrb	r3, [r7, #3]
    77d6:	687a      	ldr	r2, [r7, #4]
    77d8:	330c      	adds	r3, #12
    77da:	005b      	lsls	r3, r3, #1
    77dc:	4413      	add	r3, r2
    77de:	889b      	ldrh	r3, [r3, #4]
    77e0:	b29b      	uxth	r3, r3
}
    77e2:	4618      	mov	r0, r3
    77e4:	3708      	adds	r7, #8
    77e6:	46bd      	mov	sp, r7
    77e8:	bd80      	pop	{r7, pc}
    77ea:	bf00      	nop
    77ec:	0000749d 	.word	0x0000749d

000077f0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    77f0:	b580      	push	{r7, lr}
    77f2:	b084      	sub	sp, #16
    77f4:	af00      	add	r7, sp, #0
    77f6:	60f8      	str	r0, [r7, #12]
    77f8:	460b      	mov	r3, r1
    77fa:	607a      	str	r2, [r7, #4]
    77fc:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    77fe:	7afb      	ldrb	r3, [r7, #11]
    7800:	68fa      	ldr	r2, [r7, #12]
    7802:	3306      	adds	r3, #6
    7804:	009b      	lsls	r3, r3, #2
    7806:	4413      	add	r3, r2
    7808:	687a      	ldr	r2, [r7, #4]
    780a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    780c:	21c0      	movs	r1, #192	; 0xc0
    780e:	68f8      	ldr	r0, [r7, #12]
    7810:	4b02      	ldr	r3, [pc, #8]	; (781c <hri_tccount32_write_CC_reg+0x2c>)
    7812:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7814:	bf00      	nop
    7816:	3710      	adds	r7, #16
    7818:	46bd      	mov	sp, r7
    781a:	bd80      	pop	{r7, pc}
    781c:	0000749d 	.word	0x0000749d

00007820 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7820:	b580      	push	{r7, lr}
    7822:	b082      	sub	sp, #8
    7824:	af00      	add	r7, sp, #0
    7826:	6078      	str	r0, [r7, #4]
    7828:	460b      	mov	r3, r1
    782a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    782c:	21c0      	movs	r1, #192	; 0xc0
    782e:	6878      	ldr	r0, [r7, #4]
    7830:	4b05      	ldr	r3, [pc, #20]	; (7848 <hri_tccount32_read_CC_reg+0x28>)
    7832:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7834:	78fb      	ldrb	r3, [r7, #3]
    7836:	687a      	ldr	r2, [r7, #4]
    7838:	3306      	adds	r3, #6
    783a:	009b      	lsls	r3, r3, #2
    783c:	4413      	add	r3, r2
    783e:	685b      	ldr	r3, [r3, #4]
}
    7840:	4618      	mov	r0, r3
    7842:	3708      	adds	r7, #8
    7844:	46bd      	mov	sp, r7
    7846:	bd80      	pop	{r7, pc}
    7848:	0000749d 	.word	0x0000749d

0000784c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    784c:	b580      	push	{r7, lr}
    784e:	b084      	sub	sp, #16
    7850:	af00      	add	r7, sp, #0
    7852:	6078      	str	r0, [r7, #4]
    7854:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7856:	6838      	ldr	r0, [r7, #0]
    7858:	4b93      	ldr	r3, [pc, #588]	; (7aa8 <_tc_timer_init+0x25c>)
    785a:	4798      	blx	r3
    785c:	4603      	mov	r3, r0
    785e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	683a      	ldr	r2, [r7, #0]
    7864:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7866:	22a4      	movs	r2, #164	; 0xa4
    7868:	4990      	ldr	r1, [pc, #576]	; (7aac <_tc_timer_init+0x260>)
    786a:	2001      	movs	r0, #1
    786c:	4b90      	ldr	r3, [pc, #576]	; (7ab0 <_tc_timer_init+0x264>)
    786e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7870:	2101      	movs	r1, #1
    7872:	6838      	ldr	r0, [r7, #0]
    7874:	4b8f      	ldr	r3, [pc, #572]	; (7ab4 <_tc_timer_init+0x268>)
    7876:	4798      	blx	r3
    7878:	4603      	mov	r3, r0
    787a:	f083 0301 	eor.w	r3, r3, #1
    787e:	b2db      	uxtb	r3, r3
    7880:	2b00      	cmp	r3, #0
    7882:	d011      	beq.n	78a8 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7884:	2102      	movs	r1, #2
    7886:	6838      	ldr	r0, [r7, #0]
    7888:	4b8b      	ldr	r3, [pc, #556]	; (7ab8 <_tc_timer_init+0x26c>)
    788a:	4798      	blx	r3
    788c:	4603      	mov	r3, r0
    788e:	2b00      	cmp	r3, #0
    7890:	d006      	beq.n	78a0 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7892:	6838      	ldr	r0, [r7, #0]
    7894:	4b89      	ldr	r3, [pc, #548]	; (7abc <_tc_timer_init+0x270>)
    7896:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7898:	2102      	movs	r1, #2
    789a:	6838      	ldr	r0, [r7, #0]
    789c:	4b88      	ldr	r3, [pc, #544]	; (7ac0 <_tc_timer_init+0x274>)
    789e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    78a0:	2101      	movs	r1, #1
    78a2:	6838      	ldr	r0, [r7, #0]
    78a4:	4b87      	ldr	r3, [pc, #540]	; (7ac4 <_tc_timer_init+0x278>)
    78a6:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    78a8:	2101      	movs	r1, #1
    78aa:	6838      	ldr	r0, [r7, #0]
    78ac:	4b84      	ldr	r3, [pc, #528]	; (7ac0 <_tc_timer_init+0x274>)
    78ae:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    78b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78b4:	4984      	ldr	r1, [pc, #528]	; (7ac8 <_tc_timer_init+0x27c>)
    78b6:	4613      	mov	r3, r2
    78b8:	009b      	lsls	r3, r3, #2
    78ba:	4413      	add	r3, r2
    78bc:	009b      	lsls	r3, r3, #2
    78be:	440b      	add	r3, r1
    78c0:	3304      	adds	r3, #4
    78c2:	681b      	ldr	r3, [r3, #0]
    78c4:	4619      	mov	r1, r3
    78c6:	6838      	ldr	r0, [r7, #0]
    78c8:	4b7e      	ldr	r3, [pc, #504]	; (7ac4 <_tc_timer_init+0x278>)
    78ca:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    78cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78d0:	497d      	ldr	r1, [pc, #500]	; (7ac8 <_tc_timer_init+0x27c>)
    78d2:	4613      	mov	r3, r2
    78d4:	009b      	lsls	r3, r3, #2
    78d6:	4413      	add	r3, r2
    78d8:	009b      	lsls	r3, r3, #2
    78da:	440b      	add	r3, r1
    78dc:	330a      	adds	r3, #10
    78de:	781b      	ldrb	r3, [r3, #0]
    78e0:	4619      	mov	r1, r3
    78e2:	6838      	ldr	r0, [r7, #0]
    78e4:	4b79      	ldr	r3, [pc, #484]	; (7acc <_tc_timer_init+0x280>)
    78e6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    78e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78ec:	4976      	ldr	r1, [pc, #472]	; (7ac8 <_tc_timer_init+0x27c>)
    78ee:	4613      	mov	r3, r2
    78f0:	009b      	lsls	r3, r3, #2
    78f2:	4413      	add	r3, r2
    78f4:	009b      	lsls	r3, r3, #2
    78f6:	440b      	add	r3, r1
    78f8:	3308      	adds	r3, #8
    78fa:	881b      	ldrh	r3, [r3, #0]
    78fc:	4619      	mov	r1, r3
    78fe:	6838      	ldr	r0, [r7, #0]
    7900:	4b73      	ldr	r3, [pc, #460]	; (7ad0 <_tc_timer_init+0x284>)
    7902:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7904:	2101      	movs	r1, #1
    7906:	6838      	ldr	r0, [r7, #0]
    7908:	4b72      	ldr	r3, [pc, #456]	; (7ad4 <_tc_timer_init+0x288>)
    790a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    790c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7910:	496d      	ldr	r1, [pc, #436]	; (7ac8 <_tc_timer_init+0x27c>)
    7912:	4613      	mov	r3, r2
    7914:	009b      	lsls	r3, r3, #2
    7916:	4413      	add	r3, r2
    7918:	009b      	lsls	r3, r3, #2
    791a:	440b      	add	r3, r1
    791c:	3304      	adds	r3, #4
    791e:	681b      	ldr	r3, [r3, #0]
    7920:	f003 030c 	and.w	r3, r3, #12
    7924:	2b08      	cmp	r3, #8
    7926:	d11e      	bne.n	7966 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7928:	f997 200f 	ldrsb.w	r2, [r7, #15]
    792c:	4966      	ldr	r1, [pc, #408]	; (7ac8 <_tc_timer_init+0x27c>)
    792e:	4613      	mov	r3, r2
    7930:	009b      	lsls	r3, r3, #2
    7932:	4413      	add	r3, r2
    7934:	009b      	lsls	r3, r3, #2
    7936:	440b      	add	r3, r1
    7938:	330c      	adds	r3, #12
    793a:	681b      	ldr	r3, [r3, #0]
    793c:	461a      	mov	r2, r3
    793e:	2100      	movs	r1, #0
    7940:	6838      	ldr	r0, [r7, #0]
    7942:	4b65      	ldr	r3, [pc, #404]	; (7ad8 <_tc_timer_init+0x28c>)
    7944:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7946:	f997 200f 	ldrsb.w	r2, [r7, #15]
    794a:	495f      	ldr	r1, [pc, #380]	; (7ac8 <_tc_timer_init+0x27c>)
    794c:	4613      	mov	r3, r2
    794e:	009b      	lsls	r3, r3, #2
    7950:	4413      	add	r3, r2
    7952:	009b      	lsls	r3, r3, #2
    7954:	440b      	add	r3, r1
    7956:	3310      	adds	r3, #16
    7958:	681b      	ldr	r3, [r3, #0]
    795a:	461a      	mov	r2, r3
    795c:	2101      	movs	r1, #1
    795e:	6838      	ldr	r0, [r7, #0]
    7960:	4b5d      	ldr	r3, [pc, #372]	; (7ad8 <_tc_timer_init+0x28c>)
    7962:	4798      	blx	r3
    7964:	e06a      	b.n	7a3c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7966:	f997 200f 	ldrsb.w	r2, [r7, #15]
    796a:	4957      	ldr	r1, [pc, #348]	; (7ac8 <_tc_timer_init+0x27c>)
    796c:	4613      	mov	r3, r2
    796e:	009b      	lsls	r3, r3, #2
    7970:	4413      	add	r3, r2
    7972:	009b      	lsls	r3, r3, #2
    7974:	440b      	add	r3, r1
    7976:	3304      	adds	r3, #4
    7978:	681b      	ldr	r3, [r3, #0]
    797a:	f003 030c 	and.w	r3, r3, #12
    797e:	2b00      	cmp	r3, #0
    7980:	d120      	bne.n	79c4 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7982:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7986:	4950      	ldr	r1, [pc, #320]	; (7ac8 <_tc_timer_init+0x27c>)
    7988:	4613      	mov	r3, r2
    798a:	009b      	lsls	r3, r3, #2
    798c:	4413      	add	r3, r2
    798e:	009b      	lsls	r3, r3, #2
    7990:	440b      	add	r3, r1
    7992:	330c      	adds	r3, #12
    7994:	681b      	ldr	r3, [r3, #0]
    7996:	b29b      	uxth	r3, r3
    7998:	461a      	mov	r2, r3
    799a:	2100      	movs	r1, #0
    799c:	6838      	ldr	r0, [r7, #0]
    799e:	4b4f      	ldr	r3, [pc, #316]	; (7adc <_tc_timer_init+0x290>)
    79a0:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    79a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79a6:	4948      	ldr	r1, [pc, #288]	; (7ac8 <_tc_timer_init+0x27c>)
    79a8:	4613      	mov	r3, r2
    79aa:	009b      	lsls	r3, r3, #2
    79ac:	4413      	add	r3, r2
    79ae:	009b      	lsls	r3, r3, #2
    79b0:	440b      	add	r3, r1
    79b2:	3310      	adds	r3, #16
    79b4:	681b      	ldr	r3, [r3, #0]
    79b6:	b29b      	uxth	r3, r3
    79b8:	461a      	mov	r2, r3
    79ba:	2101      	movs	r1, #1
    79bc:	6838      	ldr	r0, [r7, #0]
    79be:	4b47      	ldr	r3, [pc, #284]	; (7adc <_tc_timer_init+0x290>)
    79c0:	4798      	blx	r3
    79c2:	e03b      	b.n	7a3c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    79c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79c8:	493f      	ldr	r1, [pc, #252]	; (7ac8 <_tc_timer_init+0x27c>)
    79ca:	4613      	mov	r3, r2
    79cc:	009b      	lsls	r3, r3, #2
    79ce:	4413      	add	r3, r2
    79d0:	009b      	lsls	r3, r3, #2
    79d2:	440b      	add	r3, r1
    79d4:	3304      	adds	r3, #4
    79d6:	681b      	ldr	r3, [r3, #0]
    79d8:	f003 030c 	and.w	r3, r3, #12
    79dc:	2b04      	cmp	r3, #4
    79de:	d12d      	bne.n	7a3c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    79e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79e4:	4938      	ldr	r1, [pc, #224]	; (7ac8 <_tc_timer_init+0x27c>)
    79e6:	4613      	mov	r3, r2
    79e8:	009b      	lsls	r3, r3, #2
    79ea:	4413      	add	r3, r2
    79ec:	009b      	lsls	r3, r3, #2
    79ee:	440b      	add	r3, r1
    79f0:	330c      	adds	r3, #12
    79f2:	681b      	ldr	r3, [r3, #0]
    79f4:	b2db      	uxtb	r3, r3
    79f6:	461a      	mov	r2, r3
    79f8:	2100      	movs	r1, #0
    79fa:	6838      	ldr	r0, [r7, #0]
    79fc:	4b38      	ldr	r3, [pc, #224]	; (7ae0 <_tc_timer_init+0x294>)
    79fe:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7a00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a04:	4930      	ldr	r1, [pc, #192]	; (7ac8 <_tc_timer_init+0x27c>)
    7a06:	4613      	mov	r3, r2
    7a08:	009b      	lsls	r3, r3, #2
    7a0a:	4413      	add	r3, r2
    7a0c:	009b      	lsls	r3, r3, #2
    7a0e:	440b      	add	r3, r1
    7a10:	3310      	adds	r3, #16
    7a12:	681b      	ldr	r3, [r3, #0]
    7a14:	b2db      	uxtb	r3, r3
    7a16:	461a      	mov	r2, r3
    7a18:	2101      	movs	r1, #1
    7a1a:	6838      	ldr	r0, [r7, #0]
    7a1c:	4b30      	ldr	r3, [pc, #192]	; (7ae0 <_tc_timer_init+0x294>)
    7a1e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7a20:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a24:	4928      	ldr	r1, [pc, #160]	; (7ac8 <_tc_timer_init+0x27c>)
    7a26:	4613      	mov	r3, r2
    7a28:	009b      	lsls	r3, r3, #2
    7a2a:	4413      	add	r3, r2
    7a2c:	009b      	lsls	r3, r3, #2
    7a2e:	440b      	add	r3, r1
    7a30:	330b      	adds	r3, #11
    7a32:	781b      	ldrb	r3, [r3, #0]
    7a34:	4619      	mov	r1, r3
    7a36:	6838      	ldr	r0, [r7, #0]
    7a38:	4b2a      	ldr	r3, [pc, #168]	; (7ae4 <_tc_timer_init+0x298>)
    7a3a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7a3c:	6838      	ldr	r0, [r7, #0]
    7a3e:	4b2a      	ldr	r3, [pc, #168]	; (7ae8 <_tc_timer_init+0x29c>)
    7a40:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7a42:	6879      	ldr	r1, [r7, #4]
    7a44:	6838      	ldr	r0, [r7, #0]
    7a46:	4b29      	ldr	r3, [pc, #164]	; (7aec <_tc_timer_init+0x2a0>)
    7a48:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7a4a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a4e:	491e      	ldr	r1, [pc, #120]	; (7ac8 <_tc_timer_init+0x27c>)
    7a50:	4613      	mov	r3, r2
    7a52:	009b      	lsls	r3, r3, #2
    7a54:	4413      	add	r3, r2
    7a56:	009b      	lsls	r3, r3, #2
    7a58:	440b      	add	r3, r1
    7a5a:	3302      	adds	r3, #2
    7a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7a60:	4618      	mov	r0, r3
    7a62:	4b23      	ldr	r3, [pc, #140]	; (7af0 <_tc_timer_init+0x2a4>)
    7a64:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7a66:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a6a:	4917      	ldr	r1, [pc, #92]	; (7ac8 <_tc_timer_init+0x27c>)
    7a6c:	4613      	mov	r3, r2
    7a6e:	009b      	lsls	r3, r3, #2
    7a70:	4413      	add	r3, r2
    7a72:	009b      	lsls	r3, r3, #2
    7a74:	440b      	add	r3, r1
    7a76:	3302      	adds	r3, #2
    7a78:	f9b3 3000 	ldrsh.w	r3, [r3]
    7a7c:	4618      	mov	r0, r3
    7a7e:	4b1d      	ldr	r3, [pc, #116]	; (7af4 <_tc_timer_init+0x2a8>)
    7a80:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7a82:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a86:	4910      	ldr	r1, [pc, #64]	; (7ac8 <_tc_timer_init+0x27c>)
    7a88:	4613      	mov	r3, r2
    7a8a:	009b      	lsls	r3, r3, #2
    7a8c:	4413      	add	r3, r2
    7a8e:	009b      	lsls	r3, r3, #2
    7a90:	440b      	add	r3, r1
    7a92:	3302      	adds	r3, #2
    7a94:	f9b3 3000 	ldrsh.w	r3, [r3]
    7a98:	4618      	mov	r0, r3
    7a9a:	4b17      	ldr	r3, [pc, #92]	; (7af8 <_tc_timer_init+0x2ac>)
    7a9c:	4798      	blx	r3

	return ERR_NONE;
    7a9e:	2300      	movs	r3, #0
}
    7aa0:	4618      	mov	r0, r3
    7aa2:	3710      	adds	r7, #16
    7aa4:	46bd      	mov	sp, r7
    7aa6:	bd80      	pop	{r7, pc}
    7aa8:	0000809d 	.word	0x0000809d
    7aac:	00010a1c 	.word	0x00010a1c
    7ab0:	00003825 	.word	0x00003825
    7ab4:	000074c1 	.word	0x000074c1
    7ab8:	00007661 	.word	0x00007661
    7abc:	00007611 	.word	0x00007611
    7ac0:	0000749d 	.word	0x0000749d
    7ac4:	00007691 	.word	0x00007691
    7ac8:	20000110 	.word	0x20000110
    7acc:	000076f1 	.word	0x000076f1
    7ad0:	000076b5 	.word	0x000076b5
    7ad4:	000076d3 	.word	0x000076d3
    7ad8:	000077f1 	.word	0x000077f1
    7adc:	0000778d 	.word	0x0000778d
    7ae0:	0000775d 	.word	0x0000775d
    7ae4:	00007711 	.word	0x00007711
    7ae8:	00007545 	.word	0x00007545
    7aec:	00008105 	.word	0x00008105
    7af0:	0000741d 	.word	0x0000741d
    7af4:	00007461 	.word	0x00007461
    7af8:	000073e1 	.word	0x000073e1

00007afc <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7afc:	b580      	push	{r7, lr}
    7afe:	b084      	sub	sp, #16
    7b00:	af00      	add	r7, sp, #0
    7b02:	6078      	str	r0, [r7, #4]
    7b04:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7b06:	6838      	ldr	r0, [r7, #0]
    7b08:	4b73      	ldr	r3, [pc, #460]	; (7cd8 <_pwm_init+0x1dc>)
    7b0a:	4798      	blx	r3
    7b0c:	4603      	mov	r3, r0
    7b0e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	683a      	ldr	r2, [r7, #0]
    7b14:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7b16:	2101      	movs	r1, #1
    7b18:	6838      	ldr	r0, [r7, #0]
    7b1a:	4b70      	ldr	r3, [pc, #448]	; (7cdc <_pwm_init+0x1e0>)
    7b1c:	4798      	blx	r3
    7b1e:	4603      	mov	r3, r0
    7b20:	f083 0301 	eor.w	r3, r3, #1
    7b24:	b2db      	uxtb	r3, r3
    7b26:	2b00      	cmp	r3, #0
    7b28:	d011      	beq.n	7b4e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7b2a:	2102      	movs	r1, #2
    7b2c:	6838      	ldr	r0, [r7, #0]
    7b2e:	4b6c      	ldr	r3, [pc, #432]	; (7ce0 <_pwm_init+0x1e4>)
    7b30:	4798      	blx	r3
    7b32:	4603      	mov	r3, r0
    7b34:	2b00      	cmp	r3, #0
    7b36:	d006      	beq.n	7b46 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7b38:	6838      	ldr	r0, [r7, #0]
    7b3a:	4b6a      	ldr	r3, [pc, #424]	; (7ce4 <_pwm_init+0x1e8>)
    7b3c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7b3e:	2102      	movs	r1, #2
    7b40:	6838      	ldr	r0, [r7, #0]
    7b42:	4b69      	ldr	r3, [pc, #420]	; (7ce8 <_pwm_init+0x1ec>)
    7b44:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7b46:	2101      	movs	r1, #1
    7b48:	6838      	ldr	r0, [r7, #0]
    7b4a:	4b68      	ldr	r3, [pc, #416]	; (7cec <_pwm_init+0x1f0>)
    7b4c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7b4e:	2101      	movs	r1, #1
    7b50:	6838      	ldr	r0, [r7, #0]
    7b52:	4b65      	ldr	r3, [pc, #404]	; (7ce8 <_pwm_init+0x1ec>)
    7b54:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7b56:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b5a:	4965      	ldr	r1, [pc, #404]	; (7cf0 <_pwm_init+0x1f4>)
    7b5c:	4613      	mov	r3, r2
    7b5e:	009b      	lsls	r3, r3, #2
    7b60:	4413      	add	r3, r2
    7b62:	009b      	lsls	r3, r3, #2
    7b64:	440b      	add	r3, r1
    7b66:	3304      	adds	r3, #4
    7b68:	681b      	ldr	r3, [r3, #0]
    7b6a:	4619      	mov	r1, r3
    7b6c:	6838      	ldr	r0, [r7, #0]
    7b6e:	4b5f      	ldr	r3, [pc, #380]	; (7cec <_pwm_init+0x1f0>)
    7b70:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7b72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b76:	495e      	ldr	r1, [pc, #376]	; (7cf0 <_pwm_init+0x1f4>)
    7b78:	4613      	mov	r3, r2
    7b7a:	009b      	lsls	r3, r3, #2
    7b7c:	4413      	add	r3, r2
    7b7e:	009b      	lsls	r3, r3, #2
    7b80:	440b      	add	r3, r1
    7b82:	330a      	adds	r3, #10
    7b84:	781b      	ldrb	r3, [r3, #0]
    7b86:	4619      	mov	r1, r3
    7b88:	6838      	ldr	r0, [r7, #0]
    7b8a:	4b5a      	ldr	r3, [pc, #360]	; (7cf4 <_pwm_init+0x1f8>)
    7b8c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7b8e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b92:	4957      	ldr	r1, [pc, #348]	; (7cf0 <_pwm_init+0x1f4>)
    7b94:	4613      	mov	r3, r2
    7b96:	009b      	lsls	r3, r3, #2
    7b98:	4413      	add	r3, r2
    7b9a:	009b      	lsls	r3, r3, #2
    7b9c:	440b      	add	r3, r1
    7b9e:	3308      	adds	r3, #8
    7ba0:	881b      	ldrh	r3, [r3, #0]
    7ba2:	4619      	mov	r1, r3
    7ba4:	6838      	ldr	r0, [r7, #0]
    7ba6:	4b54      	ldr	r3, [pc, #336]	; (7cf8 <_pwm_init+0x1fc>)
    7ba8:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7baa:	2103      	movs	r1, #3
    7bac:	6838      	ldr	r0, [r7, #0]
    7bae:	4b53      	ldr	r3, [pc, #332]	; (7cfc <_pwm_init+0x200>)
    7bb0:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7bb2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bb6:	494e      	ldr	r1, [pc, #312]	; (7cf0 <_pwm_init+0x1f4>)
    7bb8:	4613      	mov	r3, r2
    7bba:	009b      	lsls	r3, r3, #2
    7bbc:	4413      	add	r3, r2
    7bbe:	009b      	lsls	r3, r3, #2
    7bc0:	440b      	add	r3, r1
    7bc2:	3304      	adds	r3, #4
    7bc4:	681b      	ldr	r3, [r3, #0]
    7bc6:	f003 030c 	and.w	r3, r3, #12
    7bca:	2b08      	cmp	r3, #8
    7bcc:	d11e      	bne.n	7c0c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7bce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bd2:	4947      	ldr	r1, [pc, #284]	; (7cf0 <_pwm_init+0x1f4>)
    7bd4:	4613      	mov	r3, r2
    7bd6:	009b      	lsls	r3, r3, #2
    7bd8:	4413      	add	r3, r2
    7bda:	009b      	lsls	r3, r3, #2
    7bdc:	440b      	add	r3, r1
    7bde:	330c      	adds	r3, #12
    7be0:	681b      	ldr	r3, [r3, #0]
    7be2:	461a      	mov	r2, r3
    7be4:	2100      	movs	r1, #0
    7be6:	6838      	ldr	r0, [r7, #0]
    7be8:	4b45      	ldr	r3, [pc, #276]	; (7d00 <_pwm_init+0x204>)
    7bea:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7bec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bf0:	493f      	ldr	r1, [pc, #252]	; (7cf0 <_pwm_init+0x1f4>)
    7bf2:	4613      	mov	r3, r2
    7bf4:	009b      	lsls	r3, r3, #2
    7bf6:	4413      	add	r3, r2
    7bf8:	009b      	lsls	r3, r3, #2
    7bfa:	440b      	add	r3, r1
    7bfc:	3310      	adds	r3, #16
    7bfe:	681b      	ldr	r3, [r3, #0]
    7c00:	461a      	mov	r2, r3
    7c02:	2101      	movs	r1, #1
    7c04:	6838      	ldr	r0, [r7, #0]
    7c06:	4b3e      	ldr	r3, [pc, #248]	; (7d00 <_pwm_init+0x204>)
    7c08:	4798      	blx	r3
    7c0a:	e031      	b.n	7c70 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7c0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c10:	4937      	ldr	r1, [pc, #220]	; (7cf0 <_pwm_init+0x1f4>)
    7c12:	4613      	mov	r3, r2
    7c14:	009b      	lsls	r3, r3, #2
    7c16:	4413      	add	r3, r2
    7c18:	009b      	lsls	r3, r3, #2
    7c1a:	440b      	add	r3, r1
    7c1c:	3304      	adds	r3, #4
    7c1e:	681b      	ldr	r3, [r3, #0]
    7c20:	f003 030c 	and.w	r3, r3, #12
    7c24:	2b00      	cmp	r3, #0
    7c26:	d120      	bne.n	7c6a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7c28:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c2c:	4930      	ldr	r1, [pc, #192]	; (7cf0 <_pwm_init+0x1f4>)
    7c2e:	4613      	mov	r3, r2
    7c30:	009b      	lsls	r3, r3, #2
    7c32:	4413      	add	r3, r2
    7c34:	009b      	lsls	r3, r3, #2
    7c36:	440b      	add	r3, r1
    7c38:	330c      	adds	r3, #12
    7c3a:	681b      	ldr	r3, [r3, #0]
    7c3c:	b29b      	uxth	r3, r3
    7c3e:	461a      	mov	r2, r3
    7c40:	2100      	movs	r1, #0
    7c42:	6838      	ldr	r0, [r7, #0]
    7c44:	4b2f      	ldr	r3, [pc, #188]	; (7d04 <_pwm_init+0x208>)
    7c46:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7c48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c4c:	4928      	ldr	r1, [pc, #160]	; (7cf0 <_pwm_init+0x1f4>)
    7c4e:	4613      	mov	r3, r2
    7c50:	009b      	lsls	r3, r3, #2
    7c52:	4413      	add	r3, r2
    7c54:	009b      	lsls	r3, r3, #2
    7c56:	440b      	add	r3, r1
    7c58:	3310      	adds	r3, #16
    7c5a:	681b      	ldr	r3, [r3, #0]
    7c5c:	b29b      	uxth	r3, r3
    7c5e:	461a      	mov	r2, r3
    7c60:	2101      	movs	r1, #1
    7c62:	6838      	ldr	r0, [r7, #0]
    7c64:	4b27      	ldr	r3, [pc, #156]	; (7d04 <_pwm_init+0x208>)
    7c66:	4798      	blx	r3
    7c68:	e002      	b.n	7c70 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7c6a:	f04f 33ff 	mov.w	r3, #4294967295
    7c6e:	e02e      	b.n	7cce <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7c70:	6879      	ldr	r1, [r7, #4]
    7c72:	6838      	ldr	r0, [r7, #0]
    7c74:	4b24      	ldr	r3, [pc, #144]	; (7d08 <_pwm_init+0x20c>)
    7c76:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7c78:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c7c:	491c      	ldr	r1, [pc, #112]	; (7cf0 <_pwm_init+0x1f4>)
    7c7e:	4613      	mov	r3, r2
    7c80:	009b      	lsls	r3, r3, #2
    7c82:	4413      	add	r3, r2
    7c84:	009b      	lsls	r3, r3, #2
    7c86:	440b      	add	r3, r1
    7c88:	3302      	adds	r3, #2
    7c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c8e:	4618      	mov	r0, r3
    7c90:	4b1e      	ldr	r3, [pc, #120]	; (7d0c <_pwm_init+0x210>)
    7c92:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7c94:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c98:	4915      	ldr	r1, [pc, #84]	; (7cf0 <_pwm_init+0x1f4>)
    7c9a:	4613      	mov	r3, r2
    7c9c:	009b      	lsls	r3, r3, #2
    7c9e:	4413      	add	r3, r2
    7ca0:	009b      	lsls	r3, r3, #2
    7ca2:	440b      	add	r3, r1
    7ca4:	3302      	adds	r3, #2
    7ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
    7caa:	4618      	mov	r0, r3
    7cac:	4b18      	ldr	r3, [pc, #96]	; (7d10 <_pwm_init+0x214>)
    7cae:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7cb0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cb4:	490e      	ldr	r1, [pc, #56]	; (7cf0 <_pwm_init+0x1f4>)
    7cb6:	4613      	mov	r3, r2
    7cb8:	009b      	lsls	r3, r3, #2
    7cba:	4413      	add	r3, r2
    7cbc:	009b      	lsls	r3, r3, #2
    7cbe:	440b      	add	r3, r1
    7cc0:	3302      	adds	r3, #2
    7cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
    7cc6:	4618      	mov	r0, r3
    7cc8:	4b12      	ldr	r3, [pc, #72]	; (7d14 <_pwm_init+0x218>)
    7cca:	4798      	blx	r3

	return 0;
    7ccc:	2300      	movs	r3, #0
}
    7cce:	4618      	mov	r0, r3
    7cd0:	3710      	adds	r7, #16
    7cd2:	46bd      	mov	sp, r7
    7cd4:	bd80      	pop	{r7, pc}
    7cd6:	bf00      	nop
    7cd8:	0000809d 	.word	0x0000809d
    7cdc:	000074c1 	.word	0x000074c1
    7ce0:	00007661 	.word	0x00007661
    7ce4:	00007611 	.word	0x00007611
    7ce8:	0000749d 	.word	0x0000749d
    7cec:	00007691 	.word	0x00007691
    7cf0:	20000110 	.word	0x20000110
    7cf4:	000076f1 	.word	0x000076f1
    7cf8:	000076b5 	.word	0x000076b5
    7cfc:	000076d3 	.word	0x000076d3
    7d00:	000077f1 	.word	0x000077f1
    7d04:	0000778d 	.word	0x0000778d
    7d08:	00008105 	.word	0x00008105
    7d0c:	0000741d 	.word	0x0000741d
    7d10:	00007461 	.word	0x00007461
    7d14:	000073e1 	.word	0x000073e1

00007d18 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    7d18:	b580      	push	{r7, lr}
    7d1a:	b084      	sub	sp, #16
    7d1c:	af00      	add	r7, sp, #0
    7d1e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	68db      	ldr	r3, [r3, #12]
    7d24:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7d26:	68f8      	ldr	r0, [r7, #12]
    7d28:	4b10      	ldr	r3, [pc, #64]	; (7d6c <_tc_timer_deinit+0x54>)
    7d2a:	4798      	blx	r3
    7d2c:	4603      	mov	r3, r0
    7d2e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7d30:	22f9      	movs	r2, #249	; 0xf9
    7d32:	490f      	ldr	r1, [pc, #60]	; (7d70 <_tc_timer_deinit+0x58>)
    7d34:	2001      	movs	r0, #1
    7d36:	4b0f      	ldr	r3, [pc, #60]	; (7d74 <_tc_timer_deinit+0x5c>)
    7d38:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    7d3a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7d3e:	490e      	ldr	r1, [pc, #56]	; (7d78 <_tc_timer_deinit+0x60>)
    7d40:	4613      	mov	r3, r2
    7d42:	009b      	lsls	r3, r3, #2
    7d44:	4413      	add	r3, r2
    7d46:	009b      	lsls	r3, r3, #2
    7d48:	440b      	add	r3, r1
    7d4a:	3302      	adds	r3, #2
    7d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d50:	4618      	mov	r0, r3
    7d52:	4b0a      	ldr	r3, [pc, #40]	; (7d7c <_tc_timer_deinit+0x64>)
    7d54:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7d56:	68f8      	ldr	r0, [r7, #12]
    7d58:	4b09      	ldr	r3, [pc, #36]	; (7d80 <_tc_timer_deinit+0x68>)
    7d5a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7d5c:	68f8      	ldr	r0, [r7, #12]
    7d5e:	4b09      	ldr	r3, [pc, #36]	; (7d84 <_tc_timer_deinit+0x6c>)
    7d60:	4798      	blx	r3
}
    7d62:	bf00      	nop
    7d64:	3710      	adds	r7, #16
    7d66:	46bd      	mov	sp, r7
    7d68:	bd80      	pop	{r7, pc}
    7d6a:	bf00      	nop
    7d6c:	0000809d 	.word	0x0000809d
    7d70:	00010a1c 	.word	0x00010a1c
    7d74:	00003825 	.word	0x00003825
    7d78:	20000110 	.word	0x20000110
    7d7c:	0000741d 	.word	0x0000741d
    7d80:	00007611 	.word	0x00007611
    7d84:	00007589 	.word	0x00007589

00007d88 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7d88:	b580      	push	{r7, lr}
    7d8a:	b082      	sub	sp, #8
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	68db      	ldr	r3, [r3, #12]
    7d94:	4618      	mov	r0, r3
    7d96:	4b03      	ldr	r3, [pc, #12]	; (7da4 <_tc_timer_start+0x1c>)
    7d98:	4798      	blx	r3
}
    7d9a:	bf00      	nop
    7d9c:	3708      	adds	r7, #8
    7d9e:	46bd      	mov	sp, r7
    7da0:	bd80      	pop	{r7, pc}
    7da2:	bf00      	nop
    7da4:	000075b1 	.word	0x000075b1

00007da8 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7da8:	b580      	push	{r7, lr}
    7daa:	b082      	sub	sp, #8
    7dac:	af00      	add	r7, sp, #0
    7dae:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7db0:	687b      	ldr	r3, [r7, #4]
    7db2:	68db      	ldr	r3, [r3, #12]
    7db4:	4618      	mov	r0, r3
    7db6:	4b03      	ldr	r3, [pc, #12]	; (7dc4 <_tc_timer_stop+0x1c>)
    7db8:	4798      	blx	r3
}
    7dba:	bf00      	nop
    7dbc:	3708      	adds	r7, #8
    7dbe:	46bd      	mov	sp, r7
    7dc0:	bd80      	pop	{r7, pc}
    7dc2:	bf00      	nop
    7dc4:	00007611 	.word	0x00007611

00007dc8 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7dc8:	b580      	push	{r7, lr}
    7dca:	b084      	sub	sp, #16
    7dcc:	af00      	add	r7, sp, #0
    7dce:	6078      	str	r0, [r7, #4]
    7dd0:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7dd2:	687b      	ldr	r3, [r7, #4]
    7dd4:	68db      	ldr	r3, [r3, #12]
    7dd6:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7dd8:	68f8      	ldr	r0, [r7, #12]
    7dda:	4b14      	ldr	r3, [pc, #80]	; (7e2c <_tc_timer_set_period+0x64>)
    7ddc:	4798      	blx	r3
    7dde:	4603      	mov	r3, r0
    7de0:	2b02      	cmp	r3, #2
    7de2:	d105      	bne.n	7df0 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7de4:	683a      	ldr	r2, [r7, #0]
    7de6:	2100      	movs	r1, #0
    7de8:	68f8      	ldr	r0, [r7, #12]
    7dea:	4b11      	ldr	r3, [pc, #68]	; (7e30 <_tc_timer_set_period+0x68>)
    7dec:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    7dee:	e019      	b.n	7e24 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7df0:	68f8      	ldr	r0, [r7, #12]
    7df2:	4b0e      	ldr	r3, [pc, #56]	; (7e2c <_tc_timer_set_period+0x64>)
    7df4:	4798      	blx	r3
    7df6:	4603      	mov	r3, r0
    7df8:	2b00      	cmp	r3, #0
    7dfa:	d107      	bne.n	7e0c <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7dfc:	683b      	ldr	r3, [r7, #0]
    7dfe:	b29b      	uxth	r3, r3
    7e00:	461a      	mov	r2, r3
    7e02:	2100      	movs	r1, #0
    7e04:	68f8      	ldr	r0, [r7, #12]
    7e06:	4b0b      	ldr	r3, [pc, #44]	; (7e34 <_tc_timer_set_period+0x6c>)
    7e08:	4798      	blx	r3
}
    7e0a:	e00b      	b.n	7e24 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7e0c:	68f8      	ldr	r0, [r7, #12]
    7e0e:	4b07      	ldr	r3, [pc, #28]	; (7e2c <_tc_timer_set_period+0x64>)
    7e10:	4798      	blx	r3
    7e12:	4603      	mov	r3, r0
    7e14:	2b01      	cmp	r3, #1
    7e16:	d105      	bne.n	7e24 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7e18:	683b      	ldr	r3, [r7, #0]
    7e1a:	b2db      	uxtb	r3, r3
    7e1c:	4619      	mov	r1, r3
    7e1e:	68f8      	ldr	r0, [r7, #12]
    7e20:	4b05      	ldr	r3, [pc, #20]	; (7e38 <_tc_timer_set_period+0x70>)
    7e22:	4798      	blx	r3
}
    7e24:	bf00      	nop
    7e26:	3710      	adds	r7, #16
    7e28:	46bd      	mov	sp, r7
    7e2a:	bd80      	pop	{r7, pc}
    7e2c:	00007639 	.word	0x00007639
    7e30:	000077f1 	.word	0x000077f1
    7e34:	0000778d 	.word	0x0000778d
    7e38:	00007711 	.word	0x00007711

00007e3c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    7e3c:	b580      	push	{r7, lr}
    7e3e:	b084      	sub	sp, #16
    7e40:	af00      	add	r7, sp, #0
    7e42:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7e44:	687b      	ldr	r3, [r7, #4]
    7e46:	68db      	ldr	r3, [r3, #12]
    7e48:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7e4a:	68f8      	ldr	r0, [r7, #12]
    7e4c:	4b13      	ldr	r3, [pc, #76]	; (7e9c <_tc_timer_get_period+0x60>)
    7e4e:	4798      	blx	r3
    7e50:	4603      	mov	r3, r0
    7e52:	2b02      	cmp	r3, #2
    7e54:	d105      	bne.n	7e62 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7e56:	2100      	movs	r1, #0
    7e58:	68f8      	ldr	r0, [r7, #12]
    7e5a:	4b11      	ldr	r3, [pc, #68]	; (7ea0 <_tc_timer_get_period+0x64>)
    7e5c:	4798      	blx	r3
    7e5e:	4603      	mov	r3, r0
    7e60:	e017      	b.n	7e92 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7e62:	68f8      	ldr	r0, [r7, #12]
    7e64:	4b0d      	ldr	r3, [pc, #52]	; (7e9c <_tc_timer_get_period+0x60>)
    7e66:	4798      	blx	r3
    7e68:	4603      	mov	r3, r0
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d105      	bne.n	7e7a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    7e6e:	2100      	movs	r1, #0
    7e70:	68f8      	ldr	r0, [r7, #12]
    7e72:	4b0c      	ldr	r3, [pc, #48]	; (7ea4 <_tc_timer_get_period+0x68>)
    7e74:	4798      	blx	r3
    7e76:	4603      	mov	r3, r0
    7e78:	e00b      	b.n	7e92 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7e7a:	68f8      	ldr	r0, [r7, #12]
    7e7c:	4b07      	ldr	r3, [pc, #28]	; (7e9c <_tc_timer_get_period+0x60>)
    7e7e:	4798      	blx	r3
    7e80:	4603      	mov	r3, r0
    7e82:	2b01      	cmp	r3, #1
    7e84:	d104      	bne.n	7e90 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7e86:	68f8      	ldr	r0, [r7, #12]
    7e88:	4b07      	ldr	r3, [pc, #28]	; (7ea8 <_tc_timer_get_period+0x6c>)
    7e8a:	4798      	blx	r3
    7e8c:	4603      	mov	r3, r0
    7e8e:	e000      	b.n	7e92 <_tc_timer_get_period+0x56>
	}

	return 0;
    7e90:	2300      	movs	r3, #0
}
    7e92:	4618      	mov	r0, r3
    7e94:	3710      	adds	r7, #16
    7e96:	46bd      	mov	sp, r7
    7e98:	bd80      	pop	{r7, pc}
    7e9a:	bf00      	nop
    7e9c:	00007639 	.word	0x00007639
    7ea0:	00007821 	.word	0x00007821
    7ea4:	000077c1 	.word	0x000077c1
    7ea8:	00007739 	.word	0x00007739

00007eac <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    7eac:	b580      	push	{r7, lr}
    7eae:	b082      	sub	sp, #8
    7eb0:	af00      	add	r7, sp, #0
    7eb2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7eb4:	687b      	ldr	r3, [r7, #4]
    7eb6:	68db      	ldr	r3, [r3, #12]
    7eb8:	4618      	mov	r0, r3
    7eba:	4b03      	ldr	r3, [pc, #12]	; (7ec8 <_tc_timer_is_started+0x1c>)
    7ebc:	4798      	blx	r3
    7ebe:	4603      	mov	r3, r0
}
    7ec0:	4618      	mov	r0, r3
    7ec2:	3708      	adds	r7, #8
    7ec4:	46bd      	mov	sp, r7
    7ec6:	bd80      	pop	{r7, pc}
    7ec8:	000075d9 	.word	0x000075d9

00007ecc <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7ecc:	b480      	push	{r7}
    7ece:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    7ed0:	4b02      	ldr	r3, [pc, #8]	; (7edc <_tc_get_timer+0x10>)
}
    7ed2:	4618      	mov	r0, r3
    7ed4:	46bd      	mov	sp, r7
    7ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eda:	4770      	bx	lr
    7edc:	20000188 	.word	0x20000188

00007ee0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7ee0:	b480      	push	{r7}
    7ee2:	af00      	add	r7, sp, #0
	return NULL;
    7ee4:	2300      	movs	r3, #0
}
    7ee6:	4618      	mov	r0, r3
    7ee8:	46bd      	mov	sp, r7
    7eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eee:	4770      	bx	lr

00007ef0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    7ef0:	b580      	push	{r7, lr}
    7ef2:	b084      	sub	sp, #16
    7ef4:	af00      	add	r7, sp, #0
    7ef6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ef8:	687b      	ldr	r3, [r7, #4]
    7efa:	68db      	ldr	r3, [r3, #12]
    7efc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7efe:	68f8      	ldr	r0, [r7, #12]
    7f00:	4b0e      	ldr	r3, [pc, #56]	; (7f3c <_tc_timer_set_irq+0x4c>)
    7f02:	4798      	blx	r3
    7f04:	4603      	mov	r3, r0
    7f06:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7f08:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    7f0c:	490c      	ldr	r1, [pc, #48]	; (7f40 <_tc_timer_set_irq+0x50>)
    7f0e:	2001      	movs	r0, #1
    7f10:	4b0c      	ldr	r3, [pc, #48]	; (7f44 <_tc_timer_set_irq+0x54>)
    7f12:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7f14:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7f18:	490b      	ldr	r1, [pc, #44]	; (7f48 <_tc_timer_set_irq+0x58>)
    7f1a:	4613      	mov	r3, r2
    7f1c:	009b      	lsls	r3, r3, #2
    7f1e:	4413      	add	r3, r2
    7f20:	009b      	lsls	r3, r3, #2
    7f22:	440b      	add	r3, r1
    7f24:	3302      	adds	r3, #2
    7f26:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f2a:	b2db      	uxtb	r3, r3
    7f2c:	4618      	mov	r0, r3
    7f2e:	4b07      	ldr	r3, [pc, #28]	; (7f4c <_tc_timer_set_irq+0x5c>)
    7f30:	4798      	blx	r3
}
    7f32:	bf00      	nop
    7f34:	3710      	adds	r7, #16
    7f36:	46bd      	mov	sp, r7
    7f38:	bd80      	pop	{r7, pc}
    7f3a:	bf00      	nop
    7f3c:	0000809d 	.word	0x0000809d
    7f40:	00010a1c 	.word	0x00010a1c
    7f44:	00003825 	.word	0x00003825
    7f48:	20000110 	.word	0x20000110
    7f4c:	0000b0fd 	.word	0x0000b0fd

00007f50 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7f50:	b580      	push	{r7, lr}
    7f52:	b084      	sub	sp, #16
    7f54:	af00      	add	r7, sp, #0
    7f56:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7f58:	687b      	ldr	r3, [r7, #4]
    7f5a:	68db      	ldr	r3, [r3, #12]
    7f5c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7f5e:	68f8      	ldr	r0, [r7, #12]
    7f60:	4b07      	ldr	r3, [pc, #28]	; (7f80 <tc_interrupt_handler+0x30>)
    7f62:	4798      	blx	r3
    7f64:	4603      	mov	r3, r0
    7f66:	2b00      	cmp	r3, #0
    7f68:	d006      	beq.n	7f78 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7f6a:	68f8      	ldr	r0, [r7, #12]
    7f6c:	4b05      	ldr	r3, [pc, #20]	; (7f84 <tc_interrupt_handler+0x34>)
    7f6e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7f70:	687b      	ldr	r3, [r7, #4]
    7f72:	681b      	ldr	r3, [r3, #0]
    7f74:	6878      	ldr	r0, [r7, #4]
    7f76:	4798      	blx	r3
	}
}
    7f78:	bf00      	nop
    7f7a:	3710      	adds	r7, #16
    7f7c:	46bd      	mov	sp, r7
    7f7e:	bd80      	pop	{r7, pc}
    7f80:	000074e9 	.word	0x000074e9
    7f84:	00007511 	.word	0x00007511

00007f88 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7f88:	b580      	push	{r7, lr}
    7f8a:	b084      	sub	sp, #16
    7f8c:	af00      	add	r7, sp, #0
    7f8e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7f90:	687b      	ldr	r3, [r7, #4]
    7f92:	691b      	ldr	r3, [r3, #16]
    7f94:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7f96:	68f8      	ldr	r0, [r7, #12]
    7f98:	4b12      	ldr	r3, [pc, #72]	; (7fe4 <tc_pwm_interrupt_handler+0x5c>)
    7f9a:	4798      	blx	r3
    7f9c:	4603      	mov	r3, r0
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d00a      	beq.n	7fb8 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7fa2:	68f8      	ldr	r0, [r7, #12]
    7fa4:	4b10      	ldr	r3, [pc, #64]	; (7fe8 <tc_pwm_interrupt_handler+0x60>)
    7fa6:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7fa8:	687b      	ldr	r3, [r7, #4]
    7faa:	681b      	ldr	r3, [r3, #0]
    7fac:	2b00      	cmp	r3, #0
    7fae:	d003      	beq.n	7fb8 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7fb0:	687b      	ldr	r3, [r7, #4]
    7fb2:	681b      	ldr	r3, [r3, #0]
    7fb4:	6878      	ldr	r0, [r7, #4]
    7fb6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7fb8:	68f8      	ldr	r0, [r7, #12]
    7fba:	4b0c      	ldr	r3, [pc, #48]	; (7fec <tc_pwm_interrupt_handler+0x64>)
    7fbc:	4798      	blx	r3
    7fbe:	4603      	mov	r3, r0
    7fc0:	2b00      	cmp	r3, #0
    7fc2:	d00a      	beq.n	7fda <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7fc4:	68f8      	ldr	r0, [r7, #12]
    7fc6:	4b0a      	ldr	r3, [pc, #40]	; (7ff0 <tc_pwm_interrupt_handler+0x68>)
    7fc8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7fca:	687b      	ldr	r3, [r7, #4]
    7fcc:	685b      	ldr	r3, [r3, #4]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d003      	beq.n	7fda <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	685b      	ldr	r3, [r3, #4]
    7fd6:	6878      	ldr	r0, [r7, #4]
    7fd8:	4798      	blx	r3
		}
	}
}
    7fda:	bf00      	nop
    7fdc:	3710      	adds	r7, #16
    7fde:	46bd      	mov	sp, r7
    7fe0:	bd80      	pop	{r7, pc}
    7fe2:	bf00      	nop
    7fe4:	000074e9 	.word	0x000074e9
    7fe8:	00007511 	.word	0x00007511
    7fec:	0000755f 	.word	0x0000755f
    7ff0:	0000752b 	.word	0x0000752b

00007ff4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7ff4:	b580      	push	{r7, lr}
    7ff6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7ff8:	4b03      	ldr	r3, [pc, #12]	; (8008 <TC0_Handler+0x14>)
    7ffa:	681b      	ldr	r3, [r3, #0]
    7ffc:	4618      	mov	r0, r3
    7ffe:	4b03      	ldr	r3, [pc, #12]	; (800c <TC0_Handler+0x18>)
    8000:	4798      	blx	r3
}
    8002:	bf00      	nop
    8004:	bd80      	pop	{r7, pc}
    8006:	bf00      	nop
    8008:	20000c0c 	.word	0x20000c0c
    800c:	00007f51 	.word	0x00007f51

00008010 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8010:	b580      	push	{r7, lr}
    8012:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8014:	4b03      	ldr	r3, [pc, #12]	; (8024 <TC2_Handler+0x14>)
    8016:	681b      	ldr	r3, [r3, #0]
    8018:	4618      	mov	r0, r3
    801a:	4b03      	ldr	r3, [pc, #12]	; (8028 <TC2_Handler+0x18>)
    801c:	4798      	blx	r3
}
    801e:	bf00      	nop
    8020:	bd80      	pop	{r7, pc}
    8022:	bf00      	nop
    8024:	20000c10 	.word	0x20000c10
    8028:	00007f51 	.word	0x00007f51

0000802c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    802c:	b580      	push	{r7, lr}
    802e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8030:	4b03      	ldr	r3, [pc, #12]	; (8040 <TC4_Handler+0x14>)
    8032:	681b      	ldr	r3, [r3, #0]
    8034:	4618      	mov	r0, r3
    8036:	4b03      	ldr	r3, [pc, #12]	; (8044 <TC4_Handler+0x18>)
    8038:	4798      	blx	r3
}
    803a:	bf00      	nop
    803c:	bd80      	pop	{r7, pc}
    803e:	bf00      	nop
    8040:	20000c14 	.word	0x20000c14
    8044:	00007f51 	.word	0x00007f51

00008048 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8048:	b580      	push	{r7, lr}
    804a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    804c:	4b03      	ldr	r3, [pc, #12]	; (805c <TC5_Handler+0x14>)
    804e:	681b      	ldr	r3, [r3, #0]
    8050:	4618      	mov	r0, r3
    8052:	4b03      	ldr	r3, [pc, #12]	; (8060 <TC5_Handler+0x18>)
    8054:	4798      	blx	r3
}
    8056:	bf00      	nop
    8058:	bd80      	pop	{r7, pc}
    805a:	bf00      	nop
    805c:	20000c18 	.word	0x20000c18
    8060:	00007f51 	.word	0x00007f51

00008064 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8064:	b580      	push	{r7, lr}
    8066:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8068:	4b03      	ldr	r3, [pc, #12]	; (8078 <TC6_Handler+0x14>)
    806a:	681b      	ldr	r3, [r3, #0]
    806c:	4618      	mov	r0, r3
    806e:	4b03      	ldr	r3, [pc, #12]	; (807c <TC6_Handler+0x18>)
    8070:	4798      	blx	r3
}
    8072:	bf00      	nop
    8074:	bd80      	pop	{r7, pc}
    8076:	bf00      	nop
    8078:	20000c1c 	.word	0x20000c1c
    807c:	00007f51 	.word	0x00007f51

00008080 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8080:	b580      	push	{r7, lr}
    8082:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8084:	4b03      	ldr	r3, [pc, #12]	; (8094 <TC7_Handler+0x14>)
    8086:	681b      	ldr	r3, [r3, #0]
    8088:	4618      	mov	r0, r3
    808a:	4b03      	ldr	r3, [pc, #12]	; (8098 <TC7_Handler+0x18>)
    808c:	4798      	blx	r3
}
    808e:	bf00      	nop
    8090:	bd80      	pop	{r7, pc}
    8092:	bf00      	nop
    8094:	20000c20 	.word	0x20000c20
    8098:	00007f89 	.word	0x00007f89

0000809c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    809c:	b580      	push	{r7, lr}
    809e:	b084      	sub	sp, #16
    80a0:	af00      	add	r7, sp, #0
    80a2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    80a4:	6878      	ldr	r0, [r7, #4]
    80a6:	4b13      	ldr	r3, [pc, #76]	; (80f4 <get_tc_index+0x58>)
    80a8:	4798      	blx	r3
    80aa:	4603      	mov	r3, r0
    80ac:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    80ae:	2300      	movs	r3, #0
    80b0:	73fb      	strb	r3, [r7, #15]
    80b2:	e010      	b.n	80d6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    80b4:	7bfa      	ldrb	r2, [r7, #15]
    80b6:	4910      	ldr	r1, [pc, #64]	; (80f8 <get_tc_index+0x5c>)
    80b8:	4613      	mov	r3, r2
    80ba:	009b      	lsls	r3, r3, #2
    80bc:	4413      	add	r3, r2
    80be:	009b      	lsls	r3, r3, #2
    80c0:	440b      	add	r3, r1
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	7bba      	ldrb	r2, [r7, #14]
    80c6:	429a      	cmp	r2, r3
    80c8:	d102      	bne.n	80d0 <get_tc_index+0x34>
			return i;
    80ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    80ce:	e00d      	b.n	80ec <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    80d0:	7bfb      	ldrb	r3, [r7, #15]
    80d2:	3301      	adds	r3, #1
    80d4:	73fb      	strb	r3, [r7, #15]
    80d6:	7bfb      	ldrb	r3, [r7, #15]
    80d8:	2b05      	cmp	r3, #5
    80da:	d9eb      	bls.n	80b4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    80dc:	f240 221d 	movw	r2, #541	; 0x21d
    80e0:	4906      	ldr	r1, [pc, #24]	; (80fc <get_tc_index+0x60>)
    80e2:	2000      	movs	r0, #0
    80e4:	4b06      	ldr	r3, [pc, #24]	; (8100 <get_tc_index+0x64>)
    80e6:	4798      	blx	r3
	return -1;
    80e8:	f04f 33ff 	mov.w	r3, #4294967295
}
    80ec:	4618      	mov	r0, r3
    80ee:	3710      	adds	r7, #16
    80f0:	46bd      	mov	sp, r7
    80f2:	bd80      	pop	{r7, pc}
    80f4:	000081a1 	.word	0x000081a1
    80f8:	20000110 	.word	0x20000110
    80fc:	00010a1c 	.word	0x00010a1c
    8100:	00003825 	.word	0x00003825

00008104 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8104:	b480      	push	{r7}
    8106:	b083      	sub	sp, #12
    8108:	af00      	add	r7, sp, #0
    810a:	6078      	str	r0, [r7, #4]
    810c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	4a17      	ldr	r2, [pc, #92]	; (8170 <_tc_init_irq_param+0x6c>)
    8112:	4293      	cmp	r3, r2
    8114:	d102      	bne.n	811c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8116:	4a17      	ldr	r2, [pc, #92]	; (8174 <_tc_init_irq_param+0x70>)
    8118:	683b      	ldr	r3, [r7, #0]
    811a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    811c:	687b      	ldr	r3, [r7, #4]
    811e:	4a16      	ldr	r2, [pc, #88]	; (8178 <_tc_init_irq_param+0x74>)
    8120:	4293      	cmp	r3, r2
    8122:	d102      	bne.n	812a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8124:	4a15      	ldr	r2, [pc, #84]	; (817c <_tc_init_irq_param+0x78>)
    8126:	683b      	ldr	r3, [r7, #0]
    8128:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    812a:	687b      	ldr	r3, [r7, #4]
    812c:	4a14      	ldr	r2, [pc, #80]	; (8180 <_tc_init_irq_param+0x7c>)
    812e:	4293      	cmp	r3, r2
    8130:	d102      	bne.n	8138 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8132:	4a14      	ldr	r2, [pc, #80]	; (8184 <_tc_init_irq_param+0x80>)
    8134:	683b      	ldr	r3, [r7, #0]
    8136:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8138:	687b      	ldr	r3, [r7, #4]
    813a:	4a13      	ldr	r2, [pc, #76]	; (8188 <_tc_init_irq_param+0x84>)
    813c:	4293      	cmp	r3, r2
    813e:	d102      	bne.n	8146 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8140:	4a12      	ldr	r2, [pc, #72]	; (818c <_tc_init_irq_param+0x88>)
    8142:	683b      	ldr	r3, [r7, #0]
    8144:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	4a11      	ldr	r2, [pc, #68]	; (8190 <_tc_init_irq_param+0x8c>)
    814a:	4293      	cmp	r3, r2
    814c:	d102      	bne.n	8154 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    814e:	4a11      	ldr	r2, [pc, #68]	; (8194 <_tc_init_irq_param+0x90>)
    8150:	683b      	ldr	r3, [r7, #0]
    8152:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8154:	687b      	ldr	r3, [r7, #4]
    8156:	4a10      	ldr	r2, [pc, #64]	; (8198 <_tc_init_irq_param+0x94>)
    8158:	4293      	cmp	r3, r2
    815a:	d102      	bne.n	8162 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    815c:	4a0f      	ldr	r2, [pc, #60]	; (819c <_tc_init_irq_param+0x98>)
    815e:	683b      	ldr	r3, [r7, #0]
    8160:	6013      	str	r3, [r2, #0]
	}
}
    8162:	bf00      	nop
    8164:	370c      	adds	r7, #12
    8166:	46bd      	mov	sp, r7
    8168:	f85d 7b04 	ldr.w	r7, [sp], #4
    816c:	4770      	bx	lr
    816e:	bf00      	nop
    8170:	40003800 	.word	0x40003800
    8174:	20000c0c 	.word	0x20000c0c
    8178:	4101a000 	.word	0x4101a000
    817c:	20000c10 	.word	0x20000c10
    8180:	42001400 	.word	0x42001400
    8184:	20000c14 	.word	0x20000c14
    8188:	42001800 	.word	0x42001800
    818c:	20000c18 	.word	0x20000c18
    8190:	43001400 	.word	0x43001400
    8194:	20000c1c 	.word	0x20000c1c
    8198:	43001800 	.word	0x43001800
    819c:	20000c20 	.word	0x20000c20

000081a0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    81a0:	b4b0      	push	{r4, r5, r7}
    81a2:	b08d      	sub	sp, #52	; 0x34
    81a4:	af00      	add	r7, sp, #0
    81a6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    81a8:	4b13      	ldr	r3, [pc, #76]	; (81f8 <_get_hardware_offset+0x58>)
    81aa:	f107 040c 	add.w	r4, r7, #12
    81ae:	461d      	mov	r5, r3
    81b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    81b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    81b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    81b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    81bc:	2300      	movs	r3, #0
    81be:	62fb      	str	r3, [r7, #44]	; 0x2c
    81c0:	e010      	b.n	81e4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    81c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81c4:	009b      	lsls	r3, r3, #2
    81c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    81ca:	4413      	add	r3, r2
    81cc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    81d0:	461a      	mov	r2, r3
    81d2:	687b      	ldr	r3, [r7, #4]
    81d4:	429a      	cmp	r2, r3
    81d6:	d102      	bne.n	81de <_get_hardware_offset+0x3e>
			return i;
    81d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81da:	b2db      	uxtb	r3, r3
    81dc:	e006      	b.n	81ec <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    81de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81e0:	3301      	adds	r3, #1
    81e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    81e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81e6:	2b07      	cmp	r3, #7
    81e8:	d9eb      	bls.n	81c2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    81ea:	2300      	movs	r3, #0
}
    81ec:	4618      	mov	r0, r3
    81ee:	3734      	adds	r7, #52	; 0x34
    81f0:	46bd      	mov	sp, r7
    81f2:	bcb0      	pop	{r4, r5, r7}
    81f4:	4770      	bx	lr
    81f6:	bf00      	nop
    81f8:	00010a30 	.word	0x00010a30

000081fc <__NVIC_EnableIRQ>:
{
    81fc:	b480      	push	{r7}
    81fe:	b083      	sub	sp, #12
    8200:	af00      	add	r7, sp, #0
    8202:	4603      	mov	r3, r0
    8204:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    820a:	2b00      	cmp	r3, #0
    820c:	db0b      	blt.n	8226 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    820e:	4909      	ldr	r1, [pc, #36]	; (8234 <__NVIC_EnableIRQ+0x38>)
    8210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8214:	095b      	lsrs	r3, r3, #5
    8216:	88fa      	ldrh	r2, [r7, #6]
    8218:	f002 021f 	and.w	r2, r2, #31
    821c:	2001      	movs	r0, #1
    821e:	fa00 f202 	lsl.w	r2, r0, r2
    8222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8226:	bf00      	nop
    8228:	370c      	adds	r7, #12
    822a:	46bd      	mov	sp, r7
    822c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8230:	4770      	bx	lr
    8232:	bf00      	nop
    8234:	e000e100 	.word	0xe000e100

00008238 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8238:	b480      	push	{r7}
    823a:	b087      	sub	sp, #28
    823c:	af00      	add	r7, sp, #0
    823e:	60f8      	str	r0, [r7, #12]
    8240:	460b      	mov	r3, r1
    8242:	607a      	str	r2, [r7, #4]
    8244:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8246:	7afa      	ldrb	r2, [r7, #11]
    8248:	68f9      	ldr	r1, [r7, #12]
    824a:	4613      	mov	r3, r2
    824c:	009b      	lsls	r3, r3, #2
    824e:	4413      	add	r3, r2
    8250:	009b      	lsls	r3, r3, #2
    8252:	440b      	add	r3, r1
    8254:	3340      	adds	r3, #64	; 0x40
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    825a:	697a      	ldr	r2, [r7, #20]
    825c:	687b      	ldr	r3, [r7, #4]
    825e:	4013      	ands	r3, r2
    8260:	617b      	str	r3, [r7, #20]
	return tmp;
    8262:	697b      	ldr	r3, [r7, #20]
}
    8264:	4618      	mov	r0, r3
    8266:	371c      	adds	r7, #28
    8268:	46bd      	mov	sp, r7
    826a:	f85d 7b04 	ldr.w	r7, [sp], #4
    826e:	4770      	bx	lr

00008270 <hri_oscctrl_get_STATUS_reg>:
{
    8270:	b480      	push	{r7}
    8272:	b085      	sub	sp, #20
    8274:	af00      	add	r7, sp, #0
    8276:	6078      	str	r0, [r7, #4]
    8278:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    827a:	687b      	ldr	r3, [r7, #4]
    827c:	691b      	ldr	r3, [r3, #16]
    827e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8280:	68fa      	ldr	r2, [r7, #12]
    8282:	683b      	ldr	r3, [r7, #0]
    8284:	4013      	ands	r3, r2
    8286:	60fb      	str	r3, [r7, #12]
	return tmp;
    8288:	68fb      	ldr	r3, [r7, #12]
}
    828a:	4618      	mov	r0, r3
    828c:	3714      	adds	r7, #20
    828e:	46bd      	mov	sp, r7
    8290:	f85d 7b04 	ldr.w	r7, [sp], #4
    8294:	4770      	bx	lr

00008296 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8296:	b480      	push	{r7}
    8298:	b085      	sub	sp, #20
    829a:	af00      	add	r7, sp, #0
    829c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    829e:	687b      	ldr	r3, [r7, #4]
    82a0:	f893 3020 	ldrb.w	r3, [r3, #32]
    82a4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    82a6:	7bfb      	ldrb	r3, [r7, #15]
    82a8:	f003 0301 	and.w	r3, r3, #1
    82ac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    82ae:	7bfb      	ldrb	r3, [r7, #15]
    82b0:	2b00      	cmp	r3, #0
    82b2:	bf14      	ite	ne
    82b4:	2301      	movne	r3, #1
    82b6:	2300      	moveq	r3, #0
    82b8:	b2db      	uxtb	r3, r3
}
    82ba:	4618      	mov	r0, r3
    82bc:	3714      	adds	r7, #20
    82be:	46bd      	mov	sp, r7
    82c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c4:	4770      	bx	lr

000082c6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    82c6:	b480      	push	{r7}
    82c8:	b083      	sub	sp, #12
    82ca:	af00      	add	r7, sp, #0
    82cc:	6078      	str	r0, [r7, #4]
    82ce:	460b      	mov	r3, r1
    82d0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    82d2:	bf00      	nop
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	789b      	ldrb	r3, [r3, #2]
    82d8:	b2da      	uxtb	r2, r3
    82da:	78fb      	ldrb	r3, [r7, #3]
    82dc:	4013      	ands	r3, r2
    82de:	b2db      	uxtb	r3, r3
    82e0:	2b00      	cmp	r3, #0
    82e2:	d1f7      	bne.n	82d4 <hri_usb_wait_for_sync+0xe>
	};
}
    82e4:	bf00      	nop
    82e6:	370c      	adds	r7, #12
    82e8:	46bd      	mov	sp, r7
    82ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    82ee:	4770      	bx	lr

000082f0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    82f0:	b480      	push	{r7}
    82f2:	b083      	sub	sp, #12
    82f4:	af00      	add	r7, sp, #0
    82f6:	6078      	str	r0, [r7, #4]
    82f8:	460b      	mov	r3, r1
    82fa:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    82fc:	687b      	ldr	r3, [r7, #4]
    82fe:	789b      	ldrb	r3, [r3, #2]
    8300:	b2da      	uxtb	r2, r3
    8302:	78fb      	ldrb	r3, [r7, #3]
    8304:	4013      	ands	r3, r2
    8306:	b2db      	uxtb	r3, r3
    8308:	2b00      	cmp	r3, #0
    830a:	bf14      	ite	ne
    830c:	2301      	movne	r3, #1
    830e:	2300      	moveq	r3, #0
    8310:	b2db      	uxtb	r3, r3
}
    8312:	4618      	mov	r0, r3
    8314:	370c      	adds	r7, #12
    8316:	46bd      	mov	sp, r7
    8318:	f85d 7b04 	ldr.w	r7, [sp], #4
    831c:	4770      	bx	lr

0000831e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    831e:	b480      	push	{r7}
    8320:	b085      	sub	sp, #20
    8322:	af00      	add	r7, sp, #0
    8324:	6078      	str	r0, [r7, #4]
    8326:	460b      	mov	r3, r1
    8328:	70fb      	strb	r3, [r7, #3]
    832a:	4613      	mov	r3, r2
    832c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    832e:	78fb      	ldrb	r3, [r7, #3]
    8330:	687a      	ldr	r2, [r7, #4]
    8332:	3308      	adds	r3, #8
    8334:	015b      	lsls	r3, r3, #5
    8336:	4413      	add	r3, r2
    8338:	3307      	adds	r3, #7
    833a:	781b      	ldrb	r3, [r3, #0]
    833c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    833e:	7bfa      	ldrb	r2, [r7, #15]
    8340:	78bb      	ldrb	r3, [r7, #2]
    8342:	4013      	ands	r3, r2
    8344:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8346:	7bfb      	ldrb	r3, [r7, #15]
}
    8348:	4618      	mov	r0, r3
    834a:	3714      	adds	r7, #20
    834c:	46bd      	mov	sp, r7
    834e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8352:	4770      	bx	lr

00008354 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8354:	b480      	push	{r7}
    8356:	b083      	sub	sp, #12
    8358:	af00      	add	r7, sp, #0
    835a:	6078      	str	r0, [r7, #4]
    835c:	460b      	mov	r3, r1
    835e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8360:	78fb      	ldrb	r3, [r7, #3]
    8362:	687a      	ldr	r2, [r7, #4]
    8364:	3308      	adds	r3, #8
    8366:	015b      	lsls	r3, r3, #5
    8368:	4413      	add	r3, r2
    836a:	3307      	adds	r3, #7
    836c:	781b      	ldrb	r3, [r3, #0]
    836e:	b2db      	uxtb	r3, r3
}
    8370:	4618      	mov	r0, r3
    8372:	370c      	adds	r7, #12
    8374:	46bd      	mov	sp, r7
    8376:	f85d 7b04 	ldr.w	r7, [sp], #4
    837a:	4770      	bx	lr

0000837c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    837c:	b480      	push	{r7}
    837e:	b083      	sub	sp, #12
    8380:	af00      	add	r7, sp, #0
    8382:	6078      	str	r0, [r7, #4]
    8384:	460b      	mov	r3, r1
    8386:	70fb      	strb	r3, [r7, #3]
    8388:	4613      	mov	r3, r2
    838a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    838c:	78fb      	ldrb	r3, [r7, #3]
    838e:	687a      	ldr	r2, [r7, #4]
    8390:	3308      	adds	r3, #8
    8392:	015b      	lsls	r3, r3, #5
    8394:	4413      	add	r3, r2
    8396:	3307      	adds	r3, #7
    8398:	78ba      	ldrb	r2, [r7, #2]
    839a:	701a      	strb	r2, [r3, #0]
}
    839c:	bf00      	nop
    839e:	370c      	adds	r7, #12
    83a0:	46bd      	mov	sp, r7
    83a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83a6:	4770      	bx	lr

000083a8 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    83a8:	b480      	push	{r7}
    83aa:	b083      	sub	sp, #12
    83ac:	af00      	add	r7, sp, #0
    83ae:	6078      	str	r0, [r7, #4]
    83b0:	460b      	mov	r3, r1
    83b2:	70fb      	strb	r3, [r7, #3]
    83b4:	4613      	mov	r3, r2
    83b6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    83b8:	78fb      	ldrb	r3, [r7, #3]
    83ba:	687a      	ldr	r2, [r7, #4]
    83bc:	3308      	adds	r3, #8
    83be:	015b      	lsls	r3, r3, #5
    83c0:	4413      	add	r3, r2
    83c2:	3305      	adds	r3, #5
    83c4:	78ba      	ldrb	r2, [r7, #2]
    83c6:	701a      	strb	r2, [r3, #0]
}
    83c8:	bf00      	nop
    83ca:	370c      	adds	r7, #12
    83cc:	46bd      	mov	sp, r7
    83ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    83d2:	4770      	bx	lr

000083d4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    83d4:	b480      	push	{r7}
    83d6:	b083      	sub	sp, #12
    83d8:	af00      	add	r7, sp, #0
    83da:	6078      	str	r0, [r7, #4]
    83dc:	460b      	mov	r3, r1
    83de:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    83e0:	78fb      	ldrb	r3, [r7, #3]
    83e2:	687a      	ldr	r2, [r7, #4]
    83e4:	3308      	adds	r3, #8
    83e6:	015b      	lsls	r3, r3, #5
    83e8:	4413      	add	r3, r2
    83ea:	3306      	adds	r3, #6
    83ec:	781b      	ldrb	r3, [r3, #0]
    83ee:	b2db      	uxtb	r3, r3
}
    83f0:	4618      	mov	r0, r3
    83f2:	370c      	adds	r7, #12
    83f4:	46bd      	mov	sp, r7
    83f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    83fa:	4770      	bx	lr

000083fc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    83fc:	b480      	push	{r7}
    83fe:	b083      	sub	sp, #12
    8400:	af00      	add	r7, sp, #0
    8402:	6078      	str	r0, [r7, #4]
    8404:	460b      	mov	r3, r1
    8406:	70fb      	strb	r3, [r7, #3]
    8408:	4613      	mov	r3, r2
    840a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    840c:	78fb      	ldrb	r3, [r7, #3]
    840e:	687a      	ldr	r2, [r7, #4]
    8410:	3308      	adds	r3, #8
    8412:	015b      	lsls	r3, r3, #5
    8414:	4413      	add	r3, r2
    8416:	3304      	adds	r3, #4
    8418:	78ba      	ldrb	r2, [r7, #2]
    841a:	701a      	strb	r2, [r3, #0]
}
    841c:	bf00      	nop
    841e:	370c      	adds	r7, #12
    8420:	46bd      	mov	sp, r7
    8422:	f85d 7b04 	ldr.w	r7, [sp], #4
    8426:	4770      	bx	lr

00008428 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8428:	b480      	push	{r7}
    842a:	b083      	sub	sp, #12
    842c:	af00      	add	r7, sp, #0
    842e:	6078      	str	r0, [r7, #4]
    8430:	460b      	mov	r3, r1
    8432:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8434:	78fb      	ldrb	r3, [r7, #3]
    8436:	687a      	ldr	r2, [r7, #4]
    8438:	015b      	lsls	r3, r3, #5
    843a:	4413      	add	r3, r2
    843c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8440:	2210      	movs	r2, #16
    8442:	701a      	strb	r2, [r3, #0]
}
    8444:	bf00      	nop
    8446:	370c      	adds	r7, #12
    8448:	46bd      	mov	sp, r7
    844a:	f85d 7b04 	ldr.w	r7, [sp], #4
    844e:	4770      	bx	lr

00008450 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8450:	b480      	push	{r7}
    8452:	b083      	sub	sp, #12
    8454:	af00      	add	r7, sp, #0
    8456:	6078      	str	r0, [r7, #4]
    8458:	460b      	mov	r3, r1
    845a:	70fb      	strb	r3, [r7, #3]
    845c:	4613      	mov	r3, r2
    845e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8460:	78fb      	ldrb	r3, [r7, #3]
    8462:	687a      	ldr	r2, [r7, #4]
    8464:	015b      	lsls	r3, r3, #5
    8466:	4413      	add	r3, r2
    8468:	f203 1309 	addw	r3, r3, #265	; 0x109
    846c:	78ba      	ldrb	r2, [r7, #2]
    846e:	701a      	strb	r2, [r3, #0]
}
    8470:	bf00      	nop
    8472:	370c      	adds	r7, #12
    8474:	46bd      	mov	sp, r7
    8476:	f85d 7b04 	ldr.w	r7, [sp], #4
    847a:	4770      	bx	lr

0000847c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    847c:	b480      	push	{r7}
    847e:	b083      	sub	sp, #12
    8480:	af00      	add	r7, sp, #0
    8482:	6078      	str	r0, [r7, #4]
    8484:	460b      	mov	r3, r1
    8486:	70fb      	strb	r3, [r7, #3]
    8488:	4613      	mov	r3, r2
    848a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    848c:	78fb      	ldrb	r3, [r7, #3]
    848e:	687a      	ldr	r2, [r7, #4]
    8490:	015b      	lsls	r3, r3, #5
    8492:	4413      	add	r3, r2
    8494:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8498:	78ba      	ldrb	r2, [r7, #2]
    849a:	701a      	strb	r2, [r3, #0]
}
    849c:	bf00      	nop
    849e:	370c      	adds	r7, #12
    84a0:	46bd      	mov	sp, r7
    84a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    84a6:	4770      	bx	lr

000084a8 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    84a8:	b480      	push	{r7}
    84aa:	b085      	sub	sp, #20
    84ac:	af00      	add	r7, sp, #0
    84ae:	6078      	str	r0, [r7, #4]
    84b0:	460b      	mov	r3, r1
    84b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    84b4:	78fb      	ldrb	r3, [r7, #3]
    84b6:	687a      	ldr	r2, [r7, #4]
    84b8:	3308      	adds	r3, #8
    84ba:	015b      	lsls	r3, r3, #5
    84bc:	4413      	add	r3, r2
    84be:	781b      	ldrb	r3, [r3, #0]
    84c0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    84c2:	7bfb      	ldrb	r3, [r7, #15]
    84c4:	f003 0307 	and.w	r3, r3, #7
    84c8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    84ca:	7bfb      	ldrb	r3, [r7, #15]
}
    84cc:	4618      	mov	r0, r3
    84ce:	3714      	adds	r7, #20
    84d0:	46bd      	mov	sp, r7
    84d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    84d6:	4770      	bx	lr

000084d8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    84d8:	b480      	push	{r7}
    84da:	b085      	sub	sp, #20
    84dc:	af00      	add	r7, sp, #0
    84de:	6078      	str	r0, [r7, #4]
    84e0:	460b      	mov	r3, r1
    84e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    84e4:	78fb      	ldrb	r3, [r7, #3]
    84e6:	687a      	ldr	r2, [r7, #4]
    84e8:	3308      	adds	r3, #8
    84ea:	015b      	lsls	r3, r3, #5
    84ec:	4413      	add	r3, r2
    84ee:	781b      	ldrb	r3, [r3, #0]
    84f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    84f2:	7bfb      	ldrb	r3, [r7, #15]
    84f4:	091b      	lsrs	r3, r3, #4
    84f6:	b2db      	uxtb	r3, r3
    84f8:	f003 0307 	and.w	r3, r3, #7
    84fc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    84fe:	7bfb      	ldrb	r3, [r7, #15]
}
    8500:	4618      	mov	r0, r3
    8502:	3714      	adds	r7, #20
    8504:	46bd      	mov	sp, r7
    8506:	f85d 7b04 	ldr.w	r7, [sp], #4
    850a:	4770      	bx	lr

0000850c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    850c:	b480      	push	{r7}
    850e:	b083      	sub	sp, #12
    8510:	af00      	add	r7, sp, #0
    8512:	6078      	str	r0, [r7, #4]
    8514:	460b      	mov	r3, r1
    8516:	70fb      	strb	r3, [r7, #3]
    8518:	4613      	mov	r3, r2
    851a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    851c:	78fb      	ldrb	r3, [r7, #3]
    851e:	687a      	ldr	r2, [r7, #4]
    8520:	3308      	adds	r3, #8
    8522:	015b      	lsls	r3, r3, #5
    8524:	4413      	add	r3, r2
    8526:	78ba      	ldrb	r2, [r7, #2]
    8528:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    852a:	bf00      	nop
    852c:	370c      	adds	r7, #12
    852e:	46bd      	mov	sp, r7
    8530:	f85d 7b04 	ldr.w	r7, [sp], #4
    8534:	4770      	bx	lr

00008536 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8536:	b480      	push	{r7}
    8538:	b083      	sub	sp, #12
    853a:	af00      	add	r7, sp, #0
    853c:	6078      	str	r0, [r7, #4]
    853e:	460b      	mov	r3, r1
    8540:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8542:	78fb      	ldrb	r3, [r7, #3]
    8544:	687a      	ldr	r2, [r7, #4]
    8546:	3308      	adds	r3, #8
    8548:	015b      	lsls	r3, r3, #5
    854a:	4413      	add	r3, r2
    854c:	781b      	ldrb	r3, [r3, #0]
    854e:	b2db      	uxtb	r3, r3
}
    8550:	4618      	mov	r0, r3
    8552:	370c      	adds	r7, #12
    8554:	46bd      	mov	sp, r7
    8556:	f85d 7b04 	ldr.w	r7, [sp], #4
    855a:	4770      	bx	lr

0000855c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    855c:	b480      	push	{r7}
    855e:	b083      	sub	sp, #12
    8560:	af00      	add	r7, sp, #0
    8562:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8564:	687b      	ldr	r3, [r7, #4]
    8566:	8b9b      	ldrh	r3, [r3, #28]
    8568:	b29b      	uxth	r3, r3
}
    856a:	4618      	mov	r0, r3
    856c:	370c      	adds	r7, #12
    856e:	46bd      	mov	sp, r7
    8570:	f85d 7b04 	ldr.w	r7, [sp], #4
    8574:	4770      	bx	lr

00008576 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8576:	b480      	push	{r7}
    8578:	b083      	sub	sp, #12
    857a:	af00      	add	r7, sp, #0
    857c:	6078      	str	r0, [r7, #4]
    857e:	460b      	mov	r3, r1
    8580:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8582:	687b      	ldr	r3, [r7, #4]
    8584:	887a      	ldrh	r2, [r7, #2]
    8586:	839a      	strh	r2, [r3, #28]
}
    8588:	bf00      	nop
    858a:	370c      	adds	r7, #12
    858c:	46bd      	mov	sp, r7
    858e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8592:	4770      	bx	lr

00008594 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8594:	b480      	push	{r7}
    8596:	b083      	sub	sp, #12
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	460b      	mov	r3, r1
    859e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	887a      	ldrh	r2, [r7, #2]
    85a4:	831a      	strh	r2, [r3, #24]
}
    85a6:	bf00      	nop
    85a8:	370c      	adds	r7, #12
    85aa:	46bd      	mov	sp, r7
    85ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    85b0:	4770      	bx	lr

000085b2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    85b2:	b480      	push	{r7}
    85b4:	b083      	sub	sp, #12
    85b6:	af00      	add	r7, sp, #0
    85b8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    85ba:	687b      	ldr	r3, [r7, #4]
    85bc:	8b1b      	ldrh	r3, [r3, #24]
    85be:	b29b      	uxth	r3, r3
}
    85c0:	4618      	mov	r0, r3
    85c2:	370c      	adds	r7, #12
    85c4:	46bd      	mov	sp, r7
    85c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ca:	4770      	bx	lr

000085cc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    85cc:	b480      	push	{r7}
    85ce:	b083      	sub	sp, #12
    85d0:	af00      	add	r7, sp, #0
    85d2:	6078      	str	r0, [r7, #4]
    85d4:	460b      	mov	r3, r1
    85d6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    85d8:	687b      	ldr	r3, [r7, #4]
    85da:	887a      	ldrh	r2, [r7, #2]
    85dc:	829a      	strh	r2, [r3, #20]
}
    85de:	bf00      	nop
    85e0:	370c      	adds	r7, #12
    85e2:	46bd      	mov	sp, r7
    85e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e8:	4770      	bx	lr

000085ea <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    85ea:	b480      	push	{r7}
    85ec:	b085      	sub	sp, #20
    85ee:	af00      	add	r7, sp, #0
    85f0:	6078      	str	r0, [r7, #4]
    85f2:	460b      	mov	r3, r1
    85f4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    85f6:	687b      	ldr	r3, [r7, #4]
    85f8:	789b      	ldrb	r3, [r3, #2]
    85fa:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    85fc:	7bfa      	ldrb	r2, [r7, #15]
    85fe:	78fb      	ldrb	r3, [r7, #3]
    8600:	4013      	ands	r3, r2
    8602:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8604:	7bfb      	ldrb	r3, [r7, #15]
}
    8606:	4618      	mov	r0, r3
    8608:	3714      	adds	r7, #20
    860a:	46bd      	mov	sp, r7
    860c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8610:	4770      	bx	lr
	...

00008614 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8614:	b580      	push	{r7, lr}
    8616:	b082      	sub	sp, #8
    8618:	af00      	add	r7, sp, #0
    861a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	b2db      	uxtb	r3, r3
    8622:	f023 0302 	bic.w	r3, r3, #2
    8626:	b2da      	uxtb	r2, r3
    8628:	687b      	ldr	r3, [r7, #4]
    862a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    862c:	2103      	movs	r1, #3
    862e:	6878      	ldr	r0, [r7, #4]
    8630:	4b02      	ldr	r3, [pc, #8]	; (863c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8632:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8634:	bf00      	nop
    8636:	3708      	adds	r7, #8
    8638:	46bd      	mov	sp, r7
    863a:	bd80      	pop	{r7, pc}
    863c:	000082c7 	.word	0x000082c7

00008640 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8640:	b580      	push	{r7, lr}
    8642:	b084      	sub	sp, #16
    8644:	af00      	add	r7, sp, #0
    8646:	6078      	str	r0, [r7, #4]
    8648:	460b      	mov	r3, r1
    864a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    864c:	2103      	movs	r1, #3
    864e:	6878      	ldr	r0, [r7, #4]
    8650:	4b06      	ldr	r3, [pc, #24]	; (866c <hri_usb_get_CTRLA_reg+0x2c>)
    8652:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	781b      	ldrb	r3, [r3, #0]
    8658:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    865a:	7bfa      	ldrb	r2, [r7, #15]
    865c:	78fb      	ldrb	r3, [r7, #3]
    865e:	4013      	ands	r3, r2
    8660:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8662:	7bfb      	ldrb	r3, [r7, #15]
}
    8664:	4618      	mov	r0, r3
    8666:	3710      	adds	r7, #16
    8668:	46bd      	mov	sp, r7
    866a:	bd80      	pop	{r7, pc}
    866c:	000082c7 	.word	0x000082c7

00008670 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8670:	b580      	push	{r7, lr}
    8672:	b082      	sub	sp, #8
    8674:	af00      	add	r7, sp, #0
    8676:	6078      	str	r0, [r7, #4]
    8678:	460b      	mov	r3, r1
    867a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    867c:	687b      	ldr	r3, [r7, #4]
    867e:	78fa      	ldrb	r2, [r7, #3]
    8680:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8682:	2103      	movs	r1, #3
    8684:	6878      	ldr	r0, [r7, #4]
    8686:	4b03      	ldr	r3, [pc, #12]	; (8694 <hri_usb_write_CTRLA_reg+0x24>)
    8688:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    868a:	bf00      	nop
    868c:	3708      	adds	r7, #8
    868e:	46bd      	mov	sp, r7
    8690:	bd80      	pop	{r7, pc}
    8692:	bf00      	nop
    8694:	000082c7 	.word	0x000082c7

00008698 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8698:	b580      	push	{r7, lr}
    869a:	b082      	sub	sp, #8
    869c:	af00      	add	r7, sp, #0
    869e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    86a0:	2103      	movs	r1, #3
    86a2:	6878      	ldr	r0, [r7, #4]
    86a4:	4b04      	ldr	r3, [pc, #16]	; (86b8 <hri_usb_read_CTRLA_reg+0x20>)
    86a6:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    86a8:	687b      	ldr	r3, [r7, #4]
    86aa:	781b      	ldrb	r3, [r3, #0]
    86ac:	b2db      	uxtb	r3, r3
}
    86ae:	4618      	mov	r0, r3
    86b0:	3708      	adds	r7, #8
    86b2:	46bd      	mov	sp, r7
    86b4:	bd80      	pop	{r7, pc}
    86b6:	bf00      	nop
    86b8:	000082c7 	.word	0x000082c7

000086bc <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    86bc:	b480      	push	{r7}
    86be:	b083      	sub	sp, #12
    86c0:	af00      	add	r7, sp, #0
    86c2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    86c4:	687b      	ldr	r3, [r7, #4]
    86c6:	891b      	ldrh	r3, [r3, #8]
    86c8:	b29b      	uxth	r3, r3
    86ca:	f023 0301 	bic.w	r3, r3, #1
    86ce:	b29a      	uxth	r2, r3
    86d0:	687b      	ldr	r3, [r7, #4]
    86d2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    86d4:	bf00      	nop
    86d6:	370c      	adds	r7, #12
    86d8:	46bd      	mov	sp, r7
    86da:	f85d 7b04 	ldr.w	r7, [sp], #4
    86de:	4770      	bx	lr

000086e0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    86e0:	b480      	push	{r7}
    86e2:	b083      	sub	sp, #12
    86e4:	af00      	add	r7, sp, #0
    86e6:	6078      	str	r0, [r7, #4]
    86e8:	460b      	mov	r3, r1
    86ea:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    86ec:	687b      	ldr	r3, [r7, #4]
    86ee:	887a      	ldrh	r2, [r7, #2]
    86f0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    86f2:	bf00      	nop
    86f4:	370c      	adds	r7, #12
    86f6:	46bd      	mov	sp, r7
    86f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    86fc:	4770      	bx	lr

000086fe <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    86fe:	b480      	push	{r7}
    8700:	b083      	sub	sp, #12
    8702:	af00      	add	r7, sp, #0
    8704:	6078      	str	r0, [r7, #4]
    8706:	460b      	mov	r3, r1
    8708:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    870a:	687b      	ldr	r3, [r7, #4]
    870c:	78fa      	ldrb	r2, [r7, #3]
    870e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8710:	bf00      	nop
    8712:	370c      	adds	r7, #12
    8714:	46bd      	mov	sp, r7
    8716:	f85d 7b04 	ldr.w	r7, [sp], #4
    871a:	4770      	bx	lr

0000871c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    871c:	b480      	push	{r7}
    871e:	b083      	sub	sp, #12
    8720:	af00      	add	r7, sp, #0
    8722:	6078      	str	r0, [r7, #4]
    8724:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8726:	687b      	ldr	r3, [r7, #4]
    8728:	683a      	ldr	r2, [r7, #0]
    872a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    872c:	bf00      	nop
    872e:	370c      	adds	r7, #12
    8730:	46bd      	mov	sp, r7
    8732:	f85d 7b04 	ldr.w	r7, [sp], #4
    8736:	4770      	bx	lr

00008738 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8738:	b480      	push	{r7}
    873a:	b083      	sub	sp, #12
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
    8740:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8742:	2300      	movs	r3, #0
}
    8744:	4618      	mov	r0, r3
    8746:	370c      	adds	r7, #12
    8748:	46bd      	mov	sp, r7
    874a:	f85d 7b04 	ldr.w	r7, [sp], #4
    874e:	4770      	bx	lr

00008750 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8750:	b480      	push	{r7}
    8752:	b085      	sub	sp, #20
    8754:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8756:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    875a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    875c:	4b28      	ldr	r3, [pc, #160]	; (8800 <_usb_load_calib+0xb0>)
    875e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8760:	f003 031f 	and.w	r3, r3, #31
    8764:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8766:	4b26      	ldr	r3, [pc, #152]	; (8800 <_usb_load_calib+0xb0>)
    8768:	681b      	ldr	r3, [r3, #0]
    876a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    876c:	f003 031f 	and.w	r3, r3, #31
    8770:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8772:	4b23      	ldr	r3, [pc, #140]	; (8800 <_usb_load_calib+0xb0>)
    8774:	681b      	ldr	r3, [r3, #0]
    8776:	0a9b      	lsrs	r3, r3, #10
    8778:	f003 0307 	and.w	r3, r3, #7
    877c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    877e:	68fb      	ldr	r3, [r7, #12]
    8780:	2b00      	cmp	r3, #0
    8782:	d002      	beq.n	878a <_usb_load_calib+0x3a>
    8784:	68fb      	ldr	r3, [r7, #12]
    8786:	2b1f      	cmp	r3, #31
    8788:	d101      	bne.n	878e <_usb_load_calib+0x3e>
		pad_transn = 9;
    878a:	2309      	movs	r3, #9
    878c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    878e:	68bb      	ldr	r3, [r7, #8]
    8790:	2b00      	cmp	r3, #0
    8792:	d002      	beq.n	879a <_usb_load_calib+0x4a>
    8794:	68bb      	ldr	r3, [r7, #8]
    8796:	2b1f      	cmp	r3, #31
    8798:	d101      	bne.n	879e <_usb_load_calib+0x4e>
		pad_transp = 25;
    879a:	2319      	movs	r3, #25
    879c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    879e:	687b      	ldr	r3, [r7, #4]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d002      	beq.n	87aa <_usb_load_calib+0x5a>
    87a4:	687b      	ldr	r3, [r7, #4]
    87a6:	2b07      	cmp	r3, #7
    87a8:	d101      	bne.n	87ae <_usb_load_calib+0x5e>
		pad_trim = 6;
    87aa:	2306      	movs	r3, #6
    87ac:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    87ae:	68fb      	ldr	r3, [r7, #12]
    87b0:	b29b      	uxth	r3, r3
    87b2:	019b      	lsls	r3, r3, #6
    87b4:	b29b      	uxth	r3, r3
    87b6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    87ba:	b29a      	uxth	r2, r3
    87bc:	68bb      	ldr	r3, [r7, #8]
    87be:	b29b      	uxth	r3, r3
    87c0:	f003 031f 	and.w	r3, r3, #31
    87c4:	b29b      	uxth	r3, r3
    87c6:	4313      	orrs	r3, r2
    87c8:	b29a      	uxth	r2, r3
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	b29b      	uxth	r3, r3
    87ce:	031b      	lsls	r3, r3, #12
    87d0:	b29b      	uxth	r3, r3
    87d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    87d6:	b29b      	uxth	r3, r3
    87d8:	4313      	orrs	r3, r2
    87da:	b29a      	uxth	r2, r3
    87dc:	683b      	ldr	r3, [r7, #0]
    87de:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    87e0:	683a      	ldr	r2, [r7, #0]
    87e2:	78d3      	ldrb	r3, [r2, #3]
    87e4:	f043 0303 	orr.w	r3, r3, #3
    87e8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    87ea:	683a      	ldr	r2, [r7, #0]
    87ec:	78d3      	ldrb	r3, [r2, #3]
    87ee:	f043 030c 	orr.w	r3, r3, #12
    87f2:	70d3      	strb	r3, [r2, #3]
}
    87f4:	bf00      	nop
    87f6:	3714      	adds	r7, #20
    87f8:	46bd      	mov	sp, r7
    87fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    87fe:	4770      	bx	lr
    8800:	00800084 	.word	0x00800084

00008804 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8804:	b580      	push	{r7, lr}
    8806:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8808:	bf00      	nop
    880a:	2203      	movs	r2, #3
    880c:	2100      	movs	r1, #0
    880e:	4804      	ldr	r0, [pc, #16]	; (8820 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8810:	4b04      	ldr	r3, [pc, #16]	; (8824 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8812:	4798      	blx	r3
    8814:	4603      	mov	r3, r0
    8816:	2b03      	cmp	r3, #3
    8818:	d1f7      	bne.n	880a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    881a:	bf00      	nop
    881c:	bd80      	pop	{r7, pc}
    881e:	bf00      	nop
    8820:	40001000 	.word	0x40001000
    8824:	00008239 	.word	0x00008239

00008828 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8828:	b580      	push	{r7, lr}
    882a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    882c:	480e      	ldr	r0, [pc, #56]	; (8868 <_usb_d_dev_wait_dfll_rdy+0x40>)
    882e:	4b0f      	ldr	r3, [pc, #60]	; (886c <_usb_d_dev_wait_dfll_rdy+0x44>)
    8830:	4798      	blx	r3
    8832:	4603      	mov	r3, r0
    8834:	2b00      	cmp	r3, #0
    8836:	d00a      	beq.n	884e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8838:	bf00      	nop
    883a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    883e:	480a      	ldr	r0, [pc, #40]	; (8868 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8840:	4b0b      	ldr	r3, [pc, #44]	; (8870 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8842:	4798      	blx	r3
    8844:	4603      	mov	r3, r0
    8846:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    884a:	d1f6      	bne.n	883a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    884c:	e009      	b.n	8862 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    884e:	bf00      	nop
    8850:	f44f 7180 	mov.w	r1, #256	; 0x100
    8854:	4804      	ldr	r0, [pc, #16]	; (8868 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8856:	4b06      	ldr	r3, [pc, #24]	; (8870 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8858:	4798      	blx	r3
    885a:	4603      	mov	r3, r0
    885c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8860:	d1f6      	bne.n	8850 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8862:	bf00      	nop
    8864:	bd80      	pop	{r7, pc}
    8866:	bf00      	nop
    8868:	40001000 	.word	0x40001000
    886c:	00008297 	.word	0x00008297
    8870:	00008271 	.word	0x00008271

00008874 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8874:	b580      	push	{r7, lr}
    8876:	b082      	sub	sp, #8
    8878:	af00      	add	r7, sp, #0
    887a:	4603      	mov	r3, r0
    887c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    887e:	79fb      	ldrb	r3, [r7, #7]
    8880:	2b00      	cmp	r3, #0
    8882:	d102      	bne.n	888a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8884:	4b05      	ldr	r3, [pc, #20]	; (889c <_usb_d_dev_wait_clk_rdy+0x28>)
    8886:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8888:	e004      	b.n	8894 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    888a:	79fb      	ldrb	r3, [r7, #7]
    888c:	2b01      	cmp	r3, #1
    888e:	d101      	bne.n	8894 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8890:	4b03      	ldr	r3, [pc, #12]	; (88a0 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8892:	4798      	blx	r3
}
    8894:	bf00      	nop
    8896:	3708      	adds	r7, #8
    8898:	46bd      	mov	sp, r7
    889a:	bd80      	pop	{r7, pc}
    889c:	00008829 	.word	0x00008829
    88a0:	00008805 	.word	0x00008805

000088a4 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    88a4:	b580      	push	{r7, lr}
    88a6:	b082      	sub	sp, #8
    88a8:	af00      	add	r7, sp, #0
    88aa:	4603      	mov	r3, r0
    88ac:	6039      	str	r1, [r7, #0]
    88ae:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    88b0:	683b      	ldr	r3, [r7, #0]
    88b2:	b2da      	uxtb	r2, r3
    88b4:	79fb      	ldrb	r3, [r7, #7]
    88b6:	4619      	mov	r1, r3
    88b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88bc:	4b02      	ldr	r3, [pc, #8]	; (88c8 <_usbd_ep_int_ack+0x24>)
    88be:	4798      	blx	r3
}
    88c0:	bf00      	nop
    88c2:	3708      	adds	r7, #8
    88c4:	46bd      	mov	sp, r7
    88c6:	bd80      	pop	{r7, pc}
    88c8:	0000837d 	.word	0x0000837d

000088cc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    88cc:	b580      	push	{r7, lr}
    88ce:	b082      	sub	sp, #8
    88d0:	af00      	add	r7, sp, #0
    88d2:	4603      	mov	r3, r0
    88d4:	6039      	str	r1, [r7, #0]
    88d6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    88d8:	683b      	ldr	r3, [r7, #0]
    88da:	b2da      	uxtb	r2, r3
    88dc:	79fb      	ldrb	r3, [r7, #7]
    88de:	4619      	mov	r1, r3
    88e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88e4:	4b02      	ldr	r3, [pc, #8]	; (88f0 <_usbd_ep_int_en+0x24>)
    88e6:	4798      	blx	r3
}
    88e8:	bf00      	nop
    88ea:	3708      	adds	r7, #8
    88ec:	46bd      	mov	sp, r7
    88ee:	bd80      	pop	{r7, pc}
    88f0:	00008451 	.word	0x00008451

000088f4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    88f4:	b580      	push	{r7, lr}
    88f6:	b082      	sub	sp, #8
    88f8:	af00      	add	r7, sp, #0
    88fa:	4603      	mov	r3, r0
    88fc:	6039      	str	r1, [r7, #0]
    88fe:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8900:	683b      	ldr	r3, [r7, #0]
    8902:	b2da      	uxtb	r2, r3
    8904:	79fb      	ldrb	r3, [r7, #7]
    8906:	4619      	mov	r1, r3
    8908:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    890c:	4b02      	ldr	r3, [pc, #8]	; (8918 <_usbd_ep_int_dis+0x24>)
    890e:	4798      	blx	r3
}
    8910:	bf00      	nop
    8912:	3708      	adds	r7, #8
    8914:	46bd      	mov	sp, r7
    8916:	bd80      	pop	{r7, pc}
    8918:	0000847d 	.word	0x0000847d

0000891c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    891c:	b580      	push	{r7, lr}
    891e:	b082      	sub	sp, #8
    8920:	af00      	add	r7, sp, #0
    8922:	4603      	mov	r3, r0
    8924:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8926:	79fb      	ldrb	r3, [r7, #7]
    8928:	4619      	mov	r1, r3
    892a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    892e:	4b06      	ldr	r3, [pc, #24]	; (8948 <_usbd_ep_is_ctrl+0x2c>)
    8930:	4798      	blx	r3
    8932:	4603      	mov	r3, r0
    8934:	2b11      	cmp	r3, #17
    8936:	bf0c      	ite	eq
    8938:	2301      	moveq	r3, #1
    893a:	2300      	movne	r3, #0
    893c:	b2db      	uxtb	r3, r3
}
    893e:	4618      	mov	r0, r3
    8940:	3708      	adds	r7, #8
    8942:	46bd      	mov	sp, r7
    8944:	bd80      	pop	{r7, pc}
    8946:	bf00      	nop
    8948:	00008537 	.word	0x00008537

0000894c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    894c:	b580      	push	{r7, lr}
    894e:	b082      	sub	sp, #8
    8950:	af00      	add	r7, sp, #0
    8952:	4603      	mov	r3, r0
    8954:	71fb      	strb	r3, [r7, #7]
    8956:	460b      	mov	r3, r1
    8958:	71bb      	strb	r3, [r7, #6]
    895a:	4613      	mov	r3, r2
    895c:	717b      	strb	r3, [r7, #5]
	if (st) {
    895e:	797b      	ldrb	r3, [r7, #5]
    8960:	2b00      	cmp	r3, #0
    8962:	d00b      	beq.n	897c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8964:	79bb      	ldrb	r3, [r7, #6]
    8966:	2210      	movs	r2, #16
    8968:	fa02 f303 	lsl.w	r3, r2, r3
    896c:	b2da      	uxtb	r2, r3
    896e:	79fb      	ldrb	r3, [r7, #7]
    8970:	4619      	mov	r1, r3
    8972:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8976:	4b09      	ldr	r3, [pc, #36]	; (899c <_usbd_ep_set_stall+0x50>)
    8978:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    897a:	e00a      	b.n	8992 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    897c:	79bb      	ldrb	r3, [r7, #6]
    897e:	2210      	movs	r2, #16
    8980:	fa02 f303 	lsl.w	r3, r2, r3
    8984:	b2da      	uxtb	r2, r3
    8986:	79fb      	ldrb	r3, [r7, #7]
    8988:	4619      	mov	r1, r3
    898a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    898e:	4b04      	ldr	r3, [pc, #16]	; (89a0 <_usbd_ep_set_stall+0x54>)
    8990:	4798      	blx	r3
}
    8992:	bf00      	nop
    8994:	3708      	adds	r7, #8
    8996:	46bd      	mov	sp, r7
    8998:	bd80      	pop	{r7, pc}
    899a:	bf00      	nop
    899c:	000083a9 	.word	0x000083a9
    89a0:	000083fd 	.word	0x000083fd

000089a4 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    89a4:	b580      	push	{r7, lr}
    89a6:	b084      	sub	sp, #16
    89a8:	af00      	add	r7, sp, #0
    89aa:	4603      	mov	r3, r0
    89ac:	460a      	mov	r2, r1
    89ae:	71fb      	strb	r3, [r7, #7]
    89b0:	4613      	mov	r3, r2
    89b2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    89b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89b8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    89ba:	79fb      	ldrb	r3, [r7, #7]
    89bc:	4619      	mov	r1, r3
    89be:	68f8      	ldr	r0, [r7, #12]
    89c0:	4b08      	ldr	r3, [pc, #32]	; (89e4 <_usbd_ep_is_stalled+0x40>)
    89c2:	4798      	blx	r3
    89c4:	4603      	mov	r3, r0
    89c6:	4619      	mov	r1, r3
    89c8:	79bb      	ldrb	r3, [r7, #6]
    89ca:	2210      	movs	r2, #16
    89cc:	fa02 f303 	lsl.w	r3, r2, r3
    89d0:	400b      	ands	r3, r1
    89d2:	2b00      	cmp	r3, #0
    89d4:	bf14      	ite	ne
    89d6:	2301      	movne	r3, #1
    89d8:	2300      	moveq	r3, #0
    89da:	b2db      	uxtb	r3, r3
}
    89dc:	4618      	mov	r0, r3
    89de:	3710      	adds	r7, #16
    89e0:	46bd      	mov	sp, r7
    89e2:	bd80      	pop	{r7, pc}
    89e4:	000083d5 	.word	0x000083d5

000089e8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    89e8:	b580      	push	{r7, lr}
    89ea:	b084      	sub	sp, #16
    89ec:	af00      	add	r7, sp, #0
    89ee:	4603      	mov	r3, r0
    89f0:	460a      	mov	r2, r1
    89f2:	71fb      	strb	r3, [r7, #7]
    89f4:	4613      	mov	r3, r2
    89f6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    89f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89fc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    89fe:	79fb      	ldrb	r3, [r7, #7]
    8a00:	4619      	mov	r1, r3
    8a02:	68f8      	ldr	r0, [r7, #12]
    8a04:	4b08      	ldr	r3, [pc, #32]	; (8a28 <_usbd_ep_is_stall_sent+0x40>)
    8a06:	4798      	blx	r3
    8a08:	4603      	mov	r3, r0
    8a0a:	4619      	mov	r1, r3
    8a0c:	79bb      	ldrb	r3, [r7, #6]
    8a0e:	2220      	movs	r2, #32
    8a10:	fa02 f303 	lsl.w	r3, r2, r3
    8a14:	400b      	ands	r3, r1
    8a16:	2b00      	cmp	r3, #0
    8a18:	bf14      	ite	ne
    8a1a:	2301      	movne	r3, #1
    8a1c:	2300      	moveq	r3, #0
    8a1e:	b2db      	uxtb	r3, r3
}
    8a20:	4618      	mov	r0, r3
    8a22:	3710      	adds	r7, #16
    8a24:	46bd      	mov	sp, r7
    8a26:	bd80      	pop	{r7, pc}
    8a28:	00008355 	.word	0x00008355

00008a2c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8a2c:	b580      	push	{r7, lr}
    8a2e:	b082      	sub	sp, #8
    8a30:	af00      	add	r7, sp, #0
    8a32:	4603      	mov	r3, r0
    8a34:	460a      	mov	r2, r1
    8a36:	71fb      	strb	r3, [r7, #7]
    8a38:	4613      	mov	r3, r2
    8a3a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8a3c:	79bb      	ldrb	r3, [r7, #6]
    8a3e:	2220      	movs	r2, #32
    8a40:	409a      	lsls	r2, r3
    8a42:	79fb      	ldrb	r3, [r7, #7]
    8a44:	4611      	mov	r1, r2
    8a46:	4618      	mov	r0, r3
    8a48:	4b02      	ldr	r3, [pc, #8]	; (8a54 <_usbd_ep_ack_stall+0x28>)
    8a4a:	4798      	blx	r3
}
    8a4c:	bf00      	nop
    8a4e:	3708      	adds	r7, #8
    8a50:	46bd      	mov	sp, r7
    8a52:	bd80      	pop	{r7, pc}
    8a54:	000088a5 	.word	0x000088a5

00008a58 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8a58:	b580      	push	{r7, lr}
    8a5a:	b082      	sub	sp, #8
    8a5c:	af00      	add	r7, sp, #0
    8a5e:	4603      	mov	r3, r0
    8a60:	71fb      	strb	r3, [r7, #7]
    8a62:	460b      	mov	r3, r1
    8a64:	71bb      	strb	r3, [r7, #6]
    8a66:	4613      	mov	r3, r2
    8a68:	717b      	strb	r3, [r7, #5]
	if (en) {
    8a6a:	797b      	ldrb	r3, [r7, #5]
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	d008      	beq.n	8a82 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8a70:	79bb      	ldrb	r3, [r7, #6]
    8a72:	2220      	movs	r2, #32
    8a74:	409a      	lsls	r2, r3
    8a76:	79fb      	ldrb	r3, [r7, #7]
    8a78:	4611      	mov	r1, r2
    8a7a:	4618      	mov	r0, r3
    8a7c:	4b07      	ldr	r3, [pc, #28]	; (8a9c <_usbd_ep_int_stall_en+0x44>)
    8a7e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8a80:	e007      	b.n	8a92 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8a82:	79bb      	ldrb	r3, [r7, #6]
    8a84:	2220      	movs	r2, #32
    8a86:	409a      	lsls	r2, r3
    8a88:	79fb      	ldrb	r3, [r7, #7]
    8a8a:	4611      	mov	r1, r2
    8a8c:	4618      	mov	r0, r3
    8a8e:	4b04      	ldr	r3, [pc, #16]	; (8aa0 <_usbd_ep_int_stall_en+0x48>)
    8a90:	4798      	blx	r3
}
    8a92:	bf00      	nop
    8a94:	3708      	adds	r7, #8
    8a96:	46bd      	mov	sp, r7
    8a98:	bd80      	pop	{r7, pc}
    8a9a:	bf00      	nop
    8a9c:	000088cd 	.word	0x000088cd
    8aa0:	000088f5 	.word	0x000088f5

00008aa4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8aa4:	b580      	push	{r7, lr}
    8aa6:	b082      	sub	sp, #8
    8aa8:	af00      	add	r7, sp, #0
    8aaa:	4603      	mov	r3, r0
    8aac:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8aae:	79fb      	ldrb	r3, [r7, #7]
    8ab0:	4619      	mov	r1, r3
    8ab2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ab6:	4b03      	ldr	r3, [pc, #12]	; (8ac4 <_usbd_ep_stop_setup+0x20>)
    8ab8:	4798      	blx	r3
}
    8aba:	bf00      	nop
    8abc:	3708      	adds	r7, #8
    8abe:	46bd      	mov	sp, r7
    8ac0:	bd80      	pop	{r7, pc}
    8ac2:	bf00      	nop
    8ac4:	00008429 	.word	0x00008429

00008ac8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8ac8:	b580      	push	{r7, lr}
    8aca:	b082      	sub	sp, #8
    8acc:	af00      	add	r7, sp, #0
    8ace:	4603      	mov	r3, r0
    8ad0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8ad2:	79fb      	ldrb	r3, [r7, #7]
    8ad4:	2210      	movs	r2, #16
    8ad6:	4619      	mov	r1, r3
    8ad8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8adc:	4b05      	ldr	r3, [pc, #20]	; (8af4 <_usbd_ep_is_setup+0x2c>)
    8ade:	4798      	blx	r3
    8ae0:	4603      	mov	r3, r0
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	bf14      	ite	ne
    8ae6:	2301      	movne	r3, #1
    8ae8:	2300      	moveq	r3, #0
    8aea:	b2db      	uxtb	r3, r3
}
    8aec:	4618      	mov	r0, r3
    8aee:	3708      	adds	r7, #8
    8af0:	46bd      	mov	sp, r7
    8af2:	bd80      	pop	{r7, pc}
    8af4:	0000831f 	.word	0x0000831f

00008af8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8af8:	b580      	push	{r7, lr}
    8afa:	b082      	sub	sp, #8
    8afc:	af00      	add	r7, sp, #0
    8afe:	4603      	mov	r3, r0
    8b00:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8b02:	79fb      	ldrb	r3, [r7, #7]
    8b04:	2110      	movs	r1, #16
    8b06:	4618      	mov	r0, r3
    8b08:	4b02      	ldr	r3, [pc, #8]	; (8b14 <_usbd_ep_ack_setup+0x1c>)
    8b0a:	4798      	blx	r3
}
    8b0c:	bf00      	nop
    8b0e:	3708      	adds	r7, #8
    8b10:	46bd      	mov	sp, r7
    8b12:	bd80      	pop	{r7, pc}
    8b14:	000088a5 	.word	0x000088a5

00008b18 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8b18:	b580      	push	{r7, lr}
    8b1a:	b082      	sub	sp, #8
    8b1c:	af00      	add	r7, sp, #0
    8b1e:	4603      	mov	r3, r0
    8b20:	71fb      	strb	r3, [r7, #7]
    8b22:	460b      	mov	r3, r1
    8b24:	71bb      	strb	r3, [r7, #6]
    8b26:	4613      	mov	r3, r2
    8b28:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8b2a:	797b      	ldrb	r3, [r7, #5]
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d00b      	beq.n	8b48 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8b30:	79bb      	ldrb	r3, [r7, #6]
    8b32:	2201      	movs	r2, #1
    8b34:	fa02 f303 	lsl.w	r3, r2, r3
    8b38:	b2da      	uxtb	r2, r3
    8b3a:	79fb      	ldrb	r3, [r7, #7]
    8b3c:	4619      	mov	r1, r3
    8b3e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b42:	4b09      	ldr	r3, [pc, #36]	; (8b68 <_usbd_ep_set_toggle+0x50>)
    8b44:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8b46:	e00a      	b.n	8b5e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8b48:	79bb      	ldrb	r3, [r7, #6]
    8b4a:	2201      	movs	r2, #1
    8b4c:	fa02 f303 	lsl.w	r3, r2, r3
    8b50:	b2da      	uxtb	r2, r3
    8b52:	79fb      	ldrb	r3, [r7, #7]
    8b54:	4619      	mov	r1, r3
    8b56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b5a:	4b04      	ldr	r3, [pc, #16]	; (8b6c <_usbd_ep_set_toggle+0x54>)
    8b5c:	4798      	blx	r3
}
    8b5e:	bf00      	nop
    8b60:	3708      	adds	r7, #8
    8b62:	46bd      	mov	sp, r7
    8b64:	bd80      	pop	{r7, pc}
    8b66:	bf00      	nop
    8b68:	000083a9 	.word	0x000083a9
    8b6c:	000083fd 	.word	0x000083fd

00008b70 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8b70:	b580      	push	{r7, lr}
    8b72:	b082      	sub	sp, #8
    8b74:	af00      	add	r7, sp, #0
    8b76:	4603      	mov	r3, r0
    8b78:	460a      	mov	r2, r1
    8b7a:	71fb      	strb	r3, [r7, #7]
    8b7c:	4613      	mov	r3, r2
    8b7e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8b80:	79bb      	ldrb	r3, [r7, #6]
    8b82:	2201      	movs	r2, #1
    8b84:	409a      	lsls	r2, r3
    8b86:	79fb      	ldrb	r3, [r7, #7]
    8b88:	4611      	mov	r1, r2
    8b8a:	4618      	mov	r0, r3
    8b8c:	4b02      	ldr	r3, [pc, #8]	; (8b98 <_usbd_ep_ack_io_cpt+0x28>)
    8b8e:	4798      	blx	r3
}
    8b90:	bf00      	nop
    8b92:	3708      	adds	r7, #8
    8b94:	46bd      	mov	sp, r7
    8b96:	bd80      	pop	{r7, pc}
    8b98:	000088a5 	.word	0x000088a5

00008b9c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8b9c:	b480      	push	{r7}
    8b9e:	b085      	sub	sp, #20
    8ba0:	af00      	add	r7, sp, #0
    8ba2:	4603      	mov	r3, r0
    8ba4:	603a      	str	r2, [r7, #0]
    8ba6:	71fb      	strb	r3, [r7, #7]
    8ba8:	460b      	mov	r3, r1
    8baa:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8bac:	79fa      	ldrb	r2, [r7, #7]
    8bae:	79bb      	ldrb	r3, [r7, #6]
    8bb0:	0052      	lsls	r2, r2, #1
    8bb2:	4413      	add	r3, r2
    8bb4:	011b      	lsls	r3, r3, #4
    8bb6:	4a06      	ldr	r2, [pc, #24]	; (8bd0 <_usbd_ep_set_buf+0x34>)
    8bb8:	4413      	add	r3, r2
    8bba:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8bbc:	68fb      	ldr	r3, [r7, #12]
    8bbe:	683a      	ldr	r2, [r7, #0]
    8bc0:	601a      	str	r2, [r3, #0]
}
    8bc2:	bf00      	nop
    8bc4:	3714      	adds	r7, #20
    8bc6:	46bd      	mov	sp, r7
    8bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bcc:	4770      	bx	lr
    8bce:	bf00      	nop
    8bd0:	20000f2c 	.word	0x20000f2c

00008bd4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8bd4:	b480      	push	{r7}
    8bd6:	b085      	sub	sp, #20
    8bd8:	af00      	add	r7, sp, #0
    8bda:	4603      	mov	r3, r0
    8bdc:	71fb      	strb	r3, [r7, #7]
    8bde:	460b      	mov	r3, r1
    8be0:	71bb      	strb	r3, [r7, #6]
    8be2:	4613      	mov	r3, r2
    8be4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8be6:	79fa      	ldrb	r2, [r7, #7]
    8be8:	79bb      	ldrb	r3, [r7, #6]
    8bea:	0052      	lsls	r2, r2, #1
    8bec:	4413      	add	r3, r2
    8bee:	011b      	lsls	r3, r3, #4
    8bf0:	4a08      	ldr	r2, [pc, #32]	; (8c14 <_usbd_ep_set_in_count+0x40>)
    8bf2:	4413      	add	r3, r2
    8bf4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8bf6:	88bb      	ldrh	r3, [r7, #4]
    8bf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8bfc:	b299      	uxth	r1, r3
    8bfe:	68fa      	ldr	r2, [r7, #12]
    8c00:	6853      	ldr	r3, [r2, #4]
    8c02:	f361 339b 	bfi	r3, r1, #14, #14
    8c06:	6053      	str	r3, [r2, #4]
}
    8c08:	bf00      	nop
    8c0a:	3714      	adds	r7, #20
    8c0c:	46bd      	mov	sp, r7
    8c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c12:	4770      	bx	lr
    8c14:	20000f2c 	.word	0x20000f2c

00008c18 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8c18:	b480      	push	{r7}
    8c1a:	b085      	sub	sp, #20
    8c1c:	af00      	add	r7, sp, #0
    8c1e:	4603      	mov	r3, r0
    8c20:	71fb      	strb	r3, [r7, #7]
    8c22:	460b      	mov	r3, r1
    8c24:	71bb      	strb	r3, [r7, #6]
    8c26:	4613      	mov	r3, r2
    8c28:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8c2a:	79fa      	ldrb	r2, [r7, #7]
    8c2c:	79bb      	ldrb	r3, [r7, #6]
    8c2e:	0052      	lsls	r2, r2, #1
    8c30:	4413      	add	r3, r2
    8c32:	011b      	lsls	r3, r3, #4
    8c34:	4a08      	ldr	r2, [pc, #32]	; (8c58 <_usbd_ep_set_in_size+0x40>)
    8c36:	4413      	add	r3, r2
    8c38:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8c3a:	88bb      	ldrh	r3, [r7, #4]
    8c3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8c40:	b299      	uxth	r1, r3
    8c42:	68fa      	ldr	r2, [r7, #12]
    8c44:	6853      	ldr	r3, [r2, #4]
    8c46:	f361 030d 	bfi	r3, r1, #0, #14
    8c4a:	6053      	str	r3, [r2, #4]
}
    8c4c:	bf00      	nop
    8c4e:	3714      	adds	r7, #20
    8c50:	46bd      	mov	sp, r7
    8c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c56:	4770      	bx	lr
    8c58:	20000f2c 	.word	0x20000f2c

00008c5c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8c5c:	b480      	push	{r7}
    8c5e:	b085      	sub	sp, #20
    8c60:	af00      	add	r7, sp, #0
    8c62:	4603      	mov	r3, r0
    8c64:	71fb      	strb	r3, [r7, #7]
    8c66:	460b      	mov	r3, r1
    8c68:	71bb      	strb	r3, [r7, #6]
    8c6a:	4613      	mov	r3, r2
    8c6c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8c6e:	79fa      	ldrb	r2, [r7, #7]
    8c70:	79bb      	ldrb	r3, [r7, #6]
    8c72:	0052      	lsls	r2, r2, #1
    8c74:	4413      	add	r3, r2
    8c76:	011b      	lsls	r3, r3, #4
    8c78:	4a08      	ldr	r2, [pc, #32]	; (8c9c <_usbd_ep_set_out_count+0x40>)
    8c7a:	4413      	add	r3, r2
    8c7c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8c7e:	88bb      	ldrh	r3, [r7, #4]
    8c80:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8c84:	b299      	uxth	r1, r3
    8c86:	68fa      	ldr	r2, [r7, #12]
    8c88:	6853      	ldr	r3, [r2, #4]
    8c8a:	f361 030d 	bfi	r3, r1, #0, #14
    8c8e:	6053      	str	r3, [r2, #4]
}
    8c90:	bf00      	nop
    8c92:	3714      	adds	r7, #20
    8c94:	46bd      	mov	sp, r7
    8c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c9a:	4770      	bx	lr
    8c9c:	20000f2c 	.word	0x20000f2c

00008ca0 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8ca0:	b480      	push	{r7}
    8ca2:	b085      	sub	sp, #20
    8ca4:	af00      	add	r7, sp, #0
    8ca6:	4603      	mov	r3, r0
    8ca8:	71fb      	strb	r3, [r7, #7]
    8caa:	460b      	mov	r3, r1
    8cac:	71bb      	strb	r3, [r7, #6]
    8cae:	4613      	mov	r3, r2
    8cb0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8cb2:	79fa      	ldrb	r2, [r7, #7]
    8cb4:	79bb      	ldrb	r3, [r7, #6]
    8cb6:	0052      	lsls	r2, r2, #1
    8cb8:	4413      	add	r3, r2
    8cba:	011b      	lsls	r3, r3, #4
    8cbc:	4a08      	ldr	r2, [pc, #32]	; (8ce0 <_usbd_ep_set_out_size+0x40>)
    8cbe:	4413      	add	r3, r2
    8cc0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8cc2:	88bb      	ldrh	r3, [r7, #4]
    8cc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8cc8:	b299      	uxth	r1, r3
    8cca:	68fa      	ldr	r2, [r7, #12]
    8ccc:	6853      	ldr	r3, [r2, #4]
    8cce:	f361 339b 	bfi	r3, r1, #14, #14
    8cd2:	6053      	str	r3, [r2, #4]
}
    8cd4:	bf00      	nop
    8cd6:	3714      	adds	r7, #20
    8cd8:	46bd      	mov	sp, r7
    8cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cde:	4770      	bx	lr
    8ce0:	20000f2c 	.word	0x20000f2c

00008ce4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8ce4:	b580      	push	{r7, lr}
    8ce6:	b084      	sub	sp, #16
    8ce8:	af00      	add	r7, sp, #0
    8cea:	60ba      	str	r2, [r7, #8]
    8cec:	607b      	str	r3, [r7, #4]
    8cee:	4603      	mov	r3, r0
    8cf0:	73fb      	strb	r3, [r7, #15]
    8cf2:	460b      	mov	r3, r1
    8cf4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8cf6:	68bb      	ldr	r3, [r7, #8]
    8cf8:	b29a      	uxth	r2, r3
    8cfa:	7bb9      	ldrb	r1, [r7, #14]
    8cfc:	7bfb      	ldrb	r3, [r7, #15]
    8cfe:	4618      	mov	r0, r3
    8d00:	4b06      	ldr	r3, [pc, #24]	; (8d1c <_usbd_ep_set_in_trans+0x38>)
    8d02:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8d04:	687b      	ldr	r3, [r7, #4]
    8d06:	b29a      	uxth	r2, r3
    8d08:	7bb9      	ldrb	r1, [r7, #14]
    8d0a:	7bfb      	ldrb	r3, [r7, #15]
    8d0c:	4618      	mov	r0, r3
    8d0e:	4b04      	ldr	r3, [pc, #16]	; (8d20 <_usbd_ep_set_in_trans+0x3c>)
    8d10:	4798      	blx	r3
}
    8d12:	bf00      	nop
    8d14:	3710      	adds	r7, #16
    8d16:	46bd      	mov	sp, r7
    8d18:	bd80      	pop	{r7, pc}
    8d1a:	bf00      	nop
    8d1c:	00008c19 	.word	0x00008c19
    8d20:	00008bd5 	.word	0x00008bd5

00008d24 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8d24:	b580      	push	{r7, lr}
    8d26:	b084      	sub	sp, #16
    8d28:	af00      	add	r7, sp, #0
    8d2a:	60ba      	str	r2, [r7, #8]
    8d2c:	607b      	str	r3, [r7, #4]
    8d2e:	4603      	mov	r3, r0
    8d30:	73fb      	strb	r3, [r7, #15]
    8d32:	460b      	mov	r3, r1
    8d34:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8d36:	68bb      	ldr	r3, [r7, #8]
    8d38:	b29a      	uxth	r2, r3
    8d3a:	7bb9      	ldrb	r1, [r7, #14]
    8d3c:	7bfb      	ldrb	r3, [r7, #15]
    8d3e:	4618      	mov	r0, r3
    8d40:	4b06      	ldr	r3, [pc, #24]	; (8d5c <_usbd_ep_set_out_trans+0x38>)
    8d42:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8d44:	687b      	ldr	r3, [r7, #4]
    8d46:	b29a      	uxth	r2, r3
    8d48:	7bb9      	ldrb	r1, [r7, #14]
    8d4a:	7bfb      	ldrb	r3, [r7, #15]
    8d4c:	4618      	mov	r0, r3
    8d4e:	4b04      	ldr	r3, [pc, #16]	; (8d60 <_usbd_ep_set_out_trans+0x3c>)
    8d50:	4798      	blx	r3
}
    8d52:	bf00      	nop
    8d54:	3710      	adds	r7, #16
    8d56:	46bd      	mov	sp, r7
    8d58:	bd80      	pop	{r7, pc}
    8d5a:	bf00      	nop
    8d5c:	00008ca1 	.word	0x00008ca1
    8d60:	00008c5d 	.word	0x00008c5d

00008d64 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8d64:	b480      	push	{r7}
    8d66:	b085      	sub	sp, #20
    8d68:	af00      	add	r7, sp, #0
    8d6a:	4603      	mov	r3, r0
    8d6c:	460a      	mov	r2, r1
    8d6e:	71fb      	strb	r3, [r7, #7]
    8d70:	4613      	mov	r3, r2
    8d72:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d74:	79fa      	ldrb	r2, [r7, #7]
    8d76:	79bb      	ldrb	r3, [r7, #6]
    8d78:	0052      	lsls	r2, r2, #1
    8d7a:	4413      	add	r3, r2
    8d7c:	011b      	lsls	r3, r3, #4
    8d7e:	4a06      	ldr	r2, [pc, #24]	; (8d98 <_usbd_ep_clear_bank_status+0x34>)
    8d80:	4413      	add	r3, r2
    8d82:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8d84:	68fb      	ldr	r3, [r7, #12]
    8d86:	2200      	movs	r2, #0
    8d88:	729a      	strb	r2, [r3, #10]
}
    8d8a:	bf00      	nop
    8d8c:	3714      	adds	r7, #20
    8d8e:	46bd      	mov	sp, r7
    8d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d94:	4770      	bx	lr
    8d96:	bf00      	nop
    8d98:	20000f2c 	.word	0x20000f2c

00008d9c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8d9c:	b580      	push	{r7, lr}
    8d9e:	b082      	sub	sp, #8
    8da0:	af00      	add	r7, sp, #0
    8da2:	4603      	mov	r3, r0
    8da4:	71fb      	strb	r3, [r7, #7]
    8da6:	460b      	mov	r3, r1
    8da8:	71bb      	strb	r3, [r7, #6]
    8daa:	4613      	mov	r3, r2
    8dac:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8dae:	797b      	ldrb	r3, [r7, #5]
    8db0:	2b00      	cmp	r3, #0
    8db2:	d00b      	beq.n	8dcc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8db4:	79bb      	ldrb	r3, [r7, #6]
    8db6:	2240      	movs	r2, #64	; 0x40
    8db8:	fa02 f303 	lsl.w	r3, r2, r3
    8dbc:	b2da      	uxtb	r2, r3
    8dbe:	79fb      	ldrb	r3, [r7, #7]
    8dc0:	4619      	mov	r1, r3
    8dc2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dc6:	4b09      	ldr	r3, [pc, #36]	; (8dec <_usbd_ep_set_in_rdy+0x50>)
    8dc8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8dca:	e00a      	b.n	8de2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8dcc:	79bb      	ldrb	r3, [r7, #6]
    8dce:	2240      	movs	r2, #64	; 0x40
    8dd0:	fa02 f303 	lsl.w	r3, r2, r3
    8dd4:	b2da      	uxtb	r2, r3
    8dd6:	79fb      	ldrb	r3, [r7, #7]
    8dd8:	4619      	mov	r1, r3
    8dda:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dde:	4b04      	ldr	r3, [pc, #16]	; (8df0 <_usbd_ep_set_in_rdy+0x54>)
    8de0:	4798      	blx	r3
}
    8de2:	bf00      	nop
    8de4:	3708      	adds	r7, #8
    8de6:	46bd      	mov	sp, r7
    8de8:	bd80      	pop	{r7, pc}
    8dea:	bf00      	nop
    8dec:	000083a9 	.word	0x000083a9
    8df0:	000083fd 	.word	0x000083fd

00008df4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8df4:	b580      	push	{r7, lr}
    8df6:	b082      	sub	sp, #8
    8df8:	af00      	add	r7, sp, #0
    8dfa:	4603      	mov	r3, r0
    8dfc:	71fb      	strb	r3, [r7, #7]
    8dfe:	460b      	mov	r3, r1
    8e00:	71bb      	strb	r3, [r7, #6]
    8e02:	4613      	mov	r3, r2
    8e04:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8e06:	797b      	ldrb	r3, [r7, #5]
    8e08:	2b00      	cmp	r3, #0
    8e0a:	d00b      	beq.n	8e24 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8e0c:	79bb      	ldrb	r3, [r7, #6]
    8e0e:	2240      	movs	r2, #64	; 0x40
    8e10:	fa02 f303 	lsl.w	r3, r2, r3
    8e14:	b2da      	uxtb	r2, r3
    8e16:	79fb      	ldrb	r3, [r7, #7]
    8e18:	4619      	mov	r1, r3
    8e1a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e1e:	4b09      	ldr	r3, [pc, #36]	; (8e44 <_usbd_ep_set_out_rdy+0x50>)
    8e20:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8e22:	e00a      	b.n	8e3a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8e24:	79bb      	ldrb	r3, [r7, #6]
    8e26:	2240      	movs	r2, #64	; 0x40
    8e28:	fa02 f303 	lsl.w	r3, r2, r3
    8e2c:	b2da      	uxtb	r2, r3
    8e2e:	79fb      	ldrb	r3, [r7, #7]
    8e30:	4619      	mov	r1, r3
    8e32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e36:	4b04      	ldr	r3, [pc, #16]	; (8e48 <_usbd_ep_set_out_rdy+0x54>)
    8e38:	4798      	blx	r3
}
    8e3a:	bf00      	nop
    8e3c:	3708      	adds	r7, #8
    8e3e:	46bd      	mov	sp, r7
    8e40:	bd80      	pop	{r7, pc}
    8e42:	bf00      	nop
    8e44:	000083fd 	.word	0x000083fd
    8e48:	000083a9 	.word	0x000083a9

00008e4c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8e4c:	b480      	push	{r7}
    8e4e:	b083      	sub	sp, #12
    8e50:	af00      	add	r7, sp, #0
    8e52:	4603      	mov	r3, r0
    8e54:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8e56:	88fb      	ldrh	r3, [r7, #6]
    8e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8e5c:	d820      	bhi.n	8ea0 <_usbd_ep_pcksize_size+0x54>
    8e5e:	88fb      	ldrh	r3, [r7, #6]
    8e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8e64:	d81a      	bhi.n	8e9c <_usbd_ep_pcksize_size+0x50>
    8e66:	88fb      	ldrh	r3, [r7, #6]
    8e68:	2b80      	cmp	r3, #128	; 0x80
    8e6a:	d815      	bhi.n	8e98 <_usbd_ep_pcksize_size+0x4c>
    8e6c:	88fb      	ldrh	r3, [r7, #6]
    8e6e:	2b40      	cmp	r3, #64	; 0x40
    8e70:	d810      	bhi.n	8e94 <_usbd_ep_pcksize_size+0x48>
    8e72:	88fb      	ldrh	r3, [r7, #6]
    8e74:	2b20      	cmp	r3, #32
    8e76:	d80b      	bhi.n	8e90 <_usbd_ep_pcksize_size+0x44>
    8e78:	88fb      	ldrh	r3, [r7, #6]
    8e7a:	2b10      	cmp	r3, #16
    8e7c:	d806      	bhi.n	8e8c <_usbd_ep_pcksize_size+0x40>
    8e7e:	88fb      	ldrh	r3, [r7, #6]
    8e80:	2b08      	cmp	r3, #8
    8e82:	bf8c      	ite	hi
    8e84:	2301      	movhi	r3, #1
    8e86:	2300      	movls	r3, #0
    8e88:	b2db      	uxtb	r3, r3
    8e8a:	e00a      	b.n	8ea2 <_usbd_ep_pcksize_size+0x56>
    8e8c:	2302      	movs	r3, #2
    8e8e:	e008      	b.n	8ea2 <_usbd_ep_pcksize_size+0x56>
    8e90:	2303      	movs	r3, #3
    8e92:	e006      	b.n	8ea2 <_usbd_ep_pcksize_size+0x56>
    8e94:	2304      	movs	r3, #4
    8e96:	e004      	b.n	8ea2 <_usbd_ep_pcksize_size+0x56>
    8e98:	2305      	movs	r3, #5
    8e9a:	e002      	b.n	8ea2 <_usbd_ep_pcksize_size+0x56>
    8e9c:	2306      	movs	r3, #6
    8e9e:	e000      	b.n	8ea2 <_usbd_ep_pcksize_size+0x56>
    8ea0:	2307      	movs	r3, #7
}
    8ea2:	4618      	mov	r0, r3
    8ea4:	370c      	adds	r7, #12
    8ea6:	46bd      	mov	sp, r7
    8ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eac:	4770      	bx	lr
	...

00008eb0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8eb0:	b480      	push	{r7}
    8eb2:	b085      	sub	sp, #20
    8eb4:	af00      	add	r7, sp, #0
    8eb6:	4603      	mov	r3, r0
    8eb8:	460a      	mov	r2, r1
    8eba:	71fb      	strb	r3, [r7, #7]
    8ebc:	4613      	mov	r3, r2
    8ebe:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8ec0:	79fb      	ldrb	r3, [r7, #7]
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d008      	beq.n	8ed8 <_usb_d_dev_ept+0x28>
    8ec6:	79bb      	ldrb	r3, [r7, #6]
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d003      	beq.n	8ed4 <_usb_d_dev_ept+0x24>
    8ecc:	79fb      	ldrb	r3, [r7, #7]
    8ece:	3304      	adds	r3, #4
    8ed0:	b2db      	uxtb	r3, r3
    8ed2:	e002      	b.n	8eda <_usb_d_dev_ept+0x2a>
    8ed4:	79fb      	ldrb	r3, [r7, #7]
    8ed6:	e000      	b.n	8eda <_usb_d_dev_ept+0x2a>
    8ed8:	2300      	movs	r3, #0
    8eda:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8edc:	7bfa      	ldrb	r2, [r7, #15]
    8ede:	4613      	mov	r3, r2
    8ee0:	009b      	lsls	r3, r3, #2
    8ee2:	4413      	add	r3, r2
    8ee4:	009b      	lsls	r3, r3, #2
    8ee6:	3310      	adds	r3, #16
    8ee8:	4a04      	ldr	r2, [pc, #16]	; (8efc <_usb_d_dev_ept+0x4c>)
    8eea:	4413      	add	r3, r2
    8eec:	3304      	adds	r3, #4
}
    8eee:	4618      	mov	r0, r3
    8ef0:	3714      	adds	r7, #20
    8ef2:	46bd      	mov	sp, r7
    8ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ef8:	4770      	bx	lr
    8efa:	bf00      	nop
    8efc:	20000e64 	.word	0x20000e64

00008f00 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8f00:	b580      	push	{r7, lr}
    8f02:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8f04:	2104      	movs	r1, #4
    8f06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f0a:	4b03      	ldr	r3, [pc, #12]	; (8f18 <_usb_d_dev_sof+0x18>)
    8f0c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8f0e:	4b03      	ldr	r3, [pc, #12]	; (8f1c <_usb_d_dev_sof+0x1c>)
    8f10:	681b      	ldr	r3, [r3, #0]
    8f12:	4798      	blx	r3
}
    8f14:	bf00      	nop
    8f16:	bd80      	pop	{r7, pc}
    8f18:	00008577 	.word	0x00008577
    8f1c:	20000e64 	.word	0x20000e64

00008f20 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8f20:	b580      	push	{r7, lr}
    8f22:	b084      	sub	sp, #16
    8f24:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8f26:	2300      	movs	r3, #0
    8f28:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8f2a:	f240 2101 	movw	r1, #513	; 0x201
    8f2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f32:	4b1a      	ldr	r3, [pc, #104]	; (8f9c <_usb_d_dev_lpmsusp+0x7c>)
    8f34:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8f36:	f240 2101 	movw	r1, #513	; 0x201
    8f3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f3e:	4b18      	ldr	r3, [pc, #96]	; (8fa0 <_usb_d_dev_lpmsusp+0x80>)
    8f40:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8f42:	2170      	movs	r1, #112	; 0x70
    8f44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f48:	4b16      	ldr	r3, [pc, #88]	; (8fa4 <_usb_d_dev_lpmsusp+0x84>)
    8f4a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8f4c:	2300      	movs	r3, #0
    8f4e:	73fb      	strb	r3, [r7, #15]
    8f50:	e018      	b.n	8f84 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8f52:	7bfb      	ldrb	r3, [r7, #15]
    8f54:	015b      	lsls	r3, r3, #5
    8f56:	4a14      	ldr	r2, [pc, #80]	; (8fa8 <_usb_d_dev_lpmsusp+0x88>)
    8f58:	4413      	add	r3, r2
    8f5a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	891b      	ldrh	r3, [r3, #8]
    8f60:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8f64:	b2db      	uxtb	r3, r3
    8f66:	2b03      	cmp	r3, #3
    8f68:	d109      	bne.n	8f7e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8f6a:	687b      	ldr	r3, [r7, #4]
    8f6c:	891b      	ldrh	r3, [r3, #8]
    8f6e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8f72:	b29b      	uxth	r3, r3
    8f74:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8f76:	687b      	ldr	r3, [r7, #4]
    8f78:	2200      	movs	r2, #0
    8f7a:	811a      	strh	r2, [r3, #8]
			break;
    8f7c:	e005      	b.n	8f8a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8f7e:	7bfb      	ldrb	r3, [r7, #15]
    8f80:	3301      	adds	r3, #1
    8f82:	73fb      	strb	r3, [r7, #15]
    8f84:	7bfb      	ldrb	r3, [r7, #15]
    8f86:	2b03      	cmp	r3, #3
    8f88:	d9e3      	bls.n	8f52 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8f8a:	4b08      	ldr	r3, [pc, #32]	; (8fac <_usb_d_dev_lpmsusp+0x8c>)
    8f8c:	685b      	ldr	r3, [r3, #4]
    8f8e:	68b9      	ldr	r1, [r7, #8]
    8f90:	2003      	movs	r0, #3
    8f92:	4798      	blx	r3
}
    8f94:	bf00      	nop
    8f96:	3710      	adds	r7, #16
    8f98:	46bd      	mov	sp, r7
    8f9a:	bd80      	pop	{r7, pc}
    8f9c:	00008577 	.word	0x00008577
    8fa0:	000085cd 	.word	0x000085cd
    8fa4:	00008595 	.word	0x00008595
    8fa8:	20000f2c 	.word	0x20000f2c
    8fac:	20000e64 	.word	0x20000e64

00008fb0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8fb0:	b580      	push	{r7, lr}
    8fb2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8fb4:	2180      	movs	r1, #128	; 0x80
    8fb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fba:	4b04      	ldr	r3, [pc, #16]	; (8fcc <_usb_d_dev_ramerr+0x1c>)
    8fbc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8fbe:	4b04      	ldr	r3, [pc, #16]	; (8fd0 <_usb_d_dev_ramerr+0x20>)
    8fc0:	685b      	ldr	r3, [r3, #4]
    8fc2:	2100      	movs	r1, #0
    8fc4:	2005      	movs	r0, #5
    8fc6:	4798      	blx	r3
}
    8fc8:	bf00      	nop
    8fca:	bd80      	pop	{r7, pc}
    8fcc:	00008577 	.word	0x00008577
    8fd0:	20000e64 	.word	0x20000e64

00008fd4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    8fd4:	b580      	push	{r7, lr}
    8fd6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8fd8:	2170      	movs	r1, #112	; 0x70
    8fda:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fde:	4b0b      	ldr	r3, [pc, #44]	; (900c <_usb_d_dev_wakeup+0x38>)
    8fe0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8fe2:	2170      	movs	r1, #112	; 0x70
    8fe4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fe8:	4b09      	ldr	r3, [pc, #36]	; (9010 <_usb_d_dev_wakeup+0x3c>)
    8fea:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8fec:	f240 2101 	movw	r1, #513	; 0x201
    8ff0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ff4:	4b07      	ldr	r3, [pc, #28]	; (9014 <_usb_d_dev_wakeup+0x40>)
    8ff6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8ff8:	2000      	movs	r0, #0
    8ffa:	4b07      	ldr	r3, [pc, #28]	; (9018 <_usb_d_dev_wakeup+0x44>)
    8ffc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8ffe:	4b07      	ldr	r3, [pc, #28]	; (901c <_usb_d_dev_wakeup+0x48>)
    9000:	685b      	ldr	r3, [r3, #4]
    9002:	2100      	movs	r1, #0
    9004:	2002      	movs	r0, #2
    9006:	4798      	blx	r3
}
    9008:	bf00      	nop
    900a:	bd80      	pop	{r7, pc}
    900c:	00008577 	.word	0x00008577
    9010:	000085cd 	.word	0x000085cd
    9014:	00008595 	.word	0x00008595
    9018:	00008875 	.word	0x00008875
    901c:	20000e64 	.word	0x20000e64

00009020 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9020:	b580      	push	{r7, lr}
    9022:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9024:	2200      	movs	r2, #0
    9026:	2100      	movs	r1, #0
    9028:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    902c:	4b0d      	ldr	r3, [pc, #52]	; (9064 <_usb_d_dev_reset+0x44>)
    902e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9030:	2108      	movs	r1, #8
    9032:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9036:	4b0c      	ldr	r3, [pc, #48]	; (9068 <_usb_d_dev_reset+0x48>)
    9038:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    903a:	2170      	movs	r1, #112	; 0x70
    903c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9040:	4b0a      	ldr	r3, [pc, #40]	; (906c <_usb_d_dev_reset+0x4c>)
    9042:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9044:	f240 2101 	movw	r1, #513	; 0x201
    9048:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    904c:	4b08      	ldr	r3, [pc, #32]	; (9070 <_usb_d_dev_reset+0x50>)
    904e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9050:	4b08      	ldr	r3, [pc, #32]	; (9074 <_usb_d_dev_reset+0x54>)
    9052:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9054:	4b08      	ldr	r3, [pc, #32]	; (9078 <_usb_d_dev_reset+0x58>)
    9056:	685b      	ldr	r3, [r3, #4]
    9058:	2100      	movs	r1, #0
    905a:	2001      	movs	r0, #1
    905c:	4798      	blx	r3
}
    905e:	bf00      	nop
    9060:	bd80      	pop	{r7, pc}
    9062:	bf00      	nop
    9064:	0000850d 	.word	0x0000850d
    9068:	00008577 	.word	0x00008577
    906c:	000085cd 	.word	0x000085cd
    9070:	00008595 	.word	0x00008595
    9074:	00009bdd 	.word	0x00009bdd
    9078:	20000e64 	.word	0x20000e64

0000907c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    907c:	b580      	push	{r7, lr}
    907e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9080:	f240 2101 	movw	r1, #513	; 0x201
    9084:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9088:	4b09      	ldr	r3, [pc, #36]	; (90b0 <_usb_d_dev_suspend+0x34>)
    908a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    908c:	f240 2101 	movw	r1, #513	; 0x201
    9090:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9094:	4b07      	ldr	r3, [pc, #28]	; (90b4 <_usb_d_dev_suspend+0x38>)
    9096:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9098:	2170      	movs	r1, #112	; 0x70
    909a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    909e:	4b06      	ldr	r3, [pc, #24]	; (90b8 <_usb_d_dev_suspend+0x3c>)
    90a0:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    90a2:	4b06      	ldr	r3, [pc, #24]	; (90bc <_usb_d_dev_suspend+0x40>)
    90a4:	685b      	ldr	r3, [r3, #4]
    90a6:	2100      	movs	r1, #0
    90a8:	2004      	movs	r0, #4
    90aa:	4798      	blx	r3
}
    90ac:	bf00      	nop
    90ae:	bd80      	pop	{r7, pc}
    90b0:	00008577 	.word	0x00008577
    90b4:	000085cd 	.word	0x000085cd
    90b8:	00008595 	.word	0x00008595
    90bc:	20000e64 	.word	0x20000e64

000090c0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    90c0:	b580      	push	{r7, lr}
    90c2:	b082      	sub	sp, #8
    90c4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    90c6:	2301      	movs	r3, #1
    90c8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    90ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90ce:	4b22      	ldr	r3, [pc, #136]	; (9158 <_usb_d_dev_handle_nep+0x98>)
    90d0:	4798      	blx	r3
    90d2:	4603      	mov	r3, r0
    90d4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    90d6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90da:	4b20      	ldr	r3, [pc, #128]	; (915c <_usb_d_dev_handle_nep+0x9c>)
    90dc:	4798      	blx	r3
    90de:	4603      	mov	r3, r0
    90e0:	461a      	mov	r2, r3
    90e2:	88bb      	ldrh	r3, [r7, #4]
    90e4:	4013      	ands	r3, r2
    90e6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    90e8:	88bb      	ldrh	r3, [r7, #4]
    90ea:	f003 0304 	and.w	r3, r3, #4
    90ee:	2b00      	cmp	r3, #0
    90f0:	d003      	beq.n	90fa <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    90f2:	4b1b      	ldr	r3, [pc, #108]	; (9160 <_usb_d_dev_handle_nep+0xa0>)
    90f4:	4798      	blx	r3
		return true;
    90f6:	2301      	movs	r3, #1
    90f8:	e02a      	b.n	9150 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    90fa:	88bb      	ldrh	r3, [r7, #4]
    90fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9100:	2b00      	cmp	r3, #0
    9102:	d002      	beq.n	910a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9104:	4b17      	ldr	r3, [pc, #92]	; (9164 <_usb_d_dev_handle_nep+0xa4>)
    9106:	4798      	blx	r3
    9108:	e021      	b.n	914e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    910a:	88bb      	ldrh	r3, [r7, #4]
    910c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9110:	2b00      	cmp	r3, #0
    9112:	d002      	beq.n	911a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9114:	4b14      	ldr	r3, [pc, #80]	; (9168 <_usb_d_dev_handle_nep+0xa8>)
    9116:	4798      	blx	r3
    9118:	e019      	b.n	914e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    911a:	88bb      	ldrh	r3, [r7, #4]
    911c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9120:	2b00      	cmp	r3, #0
    9122:	d002      	beq.n	912a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9124:	4b11      	ldr	r3, [pc, #68]	; (916c <_usb_d_dev_handle_nep+0xac>)
    9126:	4798      	blx	r3
    9128:	e011      	b.n	914e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    912a:	88bb      	ldrh	r3, [r7, #4]
    912c:	f003 0308 	and.w	r3, r3, #8
    9130:	2b00      	cmp	r3, #0
    9132:	d002      	beq.n	913a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9134:	4b0e      	ldr	r3, [pc, #56]	; (9170 <_usb_d_dev_handle_nep+0xb0>)
    9136:	4798      	blx	r3
    9138:	e009      	b.n	914e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    913a:	88bb      	ldrh	r3, [r7, #4]
    913c:	f003 0301 	and.w	r3, r3, #1
    9140:	2b00      	cmp	r3, #0
    9142:	d002      	beq.n	914a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9144:	4b0b      	ldr	r3, [pc, #44]	; (9174 <_usb_d_dev_handle_nep+0xb4>)
    9146:	4798      	blx	r3
    9148:	e001      	b.n	914e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    914a:	2300      	movs	r3, #0
    914c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    914e:	79fb      	ldrb	r3, [r7, #7]
}
    9150:	4618      	mov	r0, r3
    9152:	3708      	adds	r7, #8
    9154:	46bd      	mov	sp, r7
    9156:	bd80      	pop	{r7, pc}
    9158:	0000855d 	.word	0x0000855d
    915c:	000085b3 	.word	0x000085b3
    9160:	00008f01 	.word	0x00008f01
    9164:	00008f21 	.word	0x00008f21
    9168:	00008fb1 	.word	0x00008fb1
    916c:	00008fd5 	.word	0x00008fd5
    9170:	00009021 	.word	0x00009021
    9174:	0000907d 	.word	0x0000907d

00009178 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9178:	b590      	push	{r4, r7, lr}
    917a:	b089      	sub	sp, #36	; 0x24
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
    9180:	460b      	mov	r3, r1
    9182:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9184:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9188:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    918a:	687b      	ldr	r3, [r7, #4]
    918c:	7c9b      	ldrb	r3, [r3, #18]
    918e:	f003 030f 	and.w	r3, r3, #15
    9192:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9194:	7dfb      	ldrb	r3, [r7, #23]
    9196:	015b      	lsls	r3, r3, #5
    9198:	4a73      	ldr	r2, [pc, #460]	; (9368 <_usb_d_dev_in_next+0x1f0>)
    919a:	4413      	add	r3, r2
    919c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    919e:	78fb      	ldrb	r3, [r7, #3]
    91a0:	2b00      	cmp	r3, #0
    91a2:	d006      	beq.n	91b2 <_usb_d_dev_in_next+0x3a>
    91a4:	693b      	ldr	r3, [r7, #16]
    91a6:	3310      	adds	r3, #16
    91a8:	685b      	ldr	r3, [r3, #4]
    91aa:	f3c3 030d 	ubfx	r3, r3, #0, #14
    91ae:	b29b      	uxth	r3, r3
    91b0:	e000      	b.n	91b4 <_usb_d_dev_in_next+0x3c>
    91b2:	2300      	movs	r3, #0
    91b4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    91b6:	687b      	ldr	r3, [r7, #4]
    91b8:	8a1b      	ldrh	r3, [r3, #16]
    91ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
    91be:	4293      	cmp	r3, r2
    91c0:	d103      	bne.n	91ca <_usb_d_dev_in_next+0x52>
    91c2:	687b      	ldr	r3, [r7, #4]
    91c4:	8a1b      	ldrh	r3, [r3, #16]
    91c6:	b21b      	sxth	r3, r3
    91c8:	e004      	b.n	91d4 <_usb_d_dev_in_next+0x5c>
    91ca:	687b      	ldr	r3, [r7, #4]
    91cc:	8a1b      	ldrh	r3, [r3, #16]
    91ce:	3b01      	subs	r3, #1
    91d0:	b29b      	uxth	r3, r3
    91d2:	b21b      	sxth	r3, r3
    91d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    91d8:	4013      	ands	r3, r2
    91da:	b21b      	sxth	r3, r3
    91dc:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    91de:	2300      	movs	r3, #0
    91e0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    91e2:	687b      	ldr	r3, [r7, #4]
    91e4:	7cdb      	ldrb	r3, [r3, #19]
    91e6:	f003 0307 	and.w	r3, r3, #7
    91ea:	b2db      	uxtb	r3, r3
    91ec:	2b01      	cmp	r3, #1
    91ee:	bf0c      	ite	eq
    91f0:	2301      	moveq	r3, #1
    91f2:	2300      	movne	r3, #0
    91f4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    91f6:	78fb      	ldrb	r3, [r7, #3]
    91f8:	2b00      	cmp	r3, #0
    91fa:	d004      	beq.n	9206 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    91fc:	7dfb      	ldrb	r3, [r7, #23]
    91fe:	2101      	movs	r1, #1
    9200:	4618      	mov	r0, r3
    9202:	4b5a      	ldr	r3, [pc, #360]	; (936c <_usb_d_dev_in_next+0x1f4>)
    9204:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9206:	687b      	ldr	r3, [r7, #4]
    9208:	689a      	ldr	r2, [r3, #8]
    920a:	89fb      	ldrh	r3, [r7, #14]
    920c:	441a      	add	r2, r3
    920e:	687b      	ldr	r3, [r7, #4]
    9210:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9212:	687b      	ldr	r3, [r7, #4]
    9214:	689a      	ldr	r2, [r3, #8]
    9216:	687b      	ldr	r3, [r7, #4]
    9218:	685b      	ldr	r3, [r3, #4]
    921a:	429a      	cmp	r2, r3
    921c:	d243      	bcs.n	92a6 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    921e:	687b      	ldr	r3, [r7, #4]
    9220:	685b      	ldr	r3, [r3, #4]
    9222:	b29a      	uxth	r2, r3
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	689b      	ldr	r3, [r3, #8]
    9228:	b29b      	uxth	r3, r3
    922a:	1ad3      	subs	r3, r2, r3
    922c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    922e:	687b      	ldr	r3, [r7, #4]
    9230:	7cdb      	ldrb	r3, [r3, #19]
    9232:	f003 0320 	and.w	r3, r3, #32
    9236:	b2db      	uxtb	r3, r3
    9238:	2b00      	cmp	r3, #0
    923a:	d01b      	beq.n	9274 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    923c:	687b      	ldr	r3, [r7, #4]
    923e:	8a1b      	ldrh	r3, [r3, #16]
    9240:	8bfa      	ldrh	r2, [r7, #30]
    9242:	429a      	cmp	r2, r3
    9244:	d902      	bls.n	924c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	8a1b      	ldrh	r3, [r3, #16]
    924a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    924c:	687b      	ldr	r3, [r7, #4]
    924e:	68d8      	ldr	r0, [r3, #12]
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	681a      	ldr	r2, [r3, #0]
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	689b      	ldr	r3, [r3, #8]
    9258:	4413      	add	r3, r2
    925a:	8bfa      	ldrh	r2, [r7, #30]
    925c:	4619      	mov	r1, r3
    925e:	4b44      	ldr	r3, [pc, #272]	; (9370 <_usb_d_dev_in_next+0x1f8>)
    9260:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	68db      	ldr	r3, [r3, #12]
    9266:	461a      	mov	r2, r3
    9268:	7dfb      	ldrb	r3, [r7, #23]
    926a:	2101      	movs	r1, #1
    926c:	4618      	mov	r0, r3
    926e:	4b41      	ldr	r3, [pc, #260]	; (9374 <_usb_d_dev_in_next+0x1fc>)
    9270:	4798      	blx	r3
    9272:	e011      	b.n	9298 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9274:	8bfb      	ldrh	r3, [r7, #30]
    9276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    927a:	d902      	bls.n	9282 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    927c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9280:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	681a      	ldr	r2, [r3, #0]
    9286:	687b      	ldr	r3, [r7, #4]
    9288:	689b      	ldr	r3, [r3, #8]
    928a:	4413      	add	r3, r2
    928c:	461a      	mov	r2, r3
    928e:	7dfb      	ldrb	r3, [r7, #23]
    9290:	2101      	movs	r1, #1
    9292:	4618      	mov	r0, r3
    9294:	4b37      	ldr	r3, [pc, #220]	; (9374 <_usb_d_dev_in_next+0x1fc>)
    9296:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9298:	8bfa      	ldrh	r2, [r7, #30]
    929a:	7df8      	ldrb	r0, [r7, #23]
    929c:	2300      	movs	r3, #0
    929e:	2101      	movs	r1, #1
    92a0:	4c35      	ldr	r4, [pc, #212]	; (9378 <_usb_d_dev_in_next+0x200>)
    92a2:	47a0      	blx	r4
		goto _in_tx_exec;
    92a4:	e041      	b.n	932a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    92a6:	687b      	ldr	r3, [r7, #4]
    92a8:	7cdb      	ldrb	r3, [r3, #19]
    92aa:	f003 0310 	and.w	r3, r3, #16
    92ae:	b2db      	uxtb	r3, r3
    92b0:	2b00      	cmp	r3, #0
    92b2:	d00b      	beq.n	92cc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    92b4:	687a      	ldr	r2, [r7, #4]
    92b6:	7cd3      	ldrb	r3, [r2, #19]
    92b8:	f36f 1304 	bfc	r3, #4, #1
    92bc:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    92be:	7df8      	ldrb	r0, [r7, #23]
    92c0:	2300      	movs	r3, #0
    92c2:	2200      	movs	r2, #0
    92c4:	2101      	movs	r1, #1
    92c6:	4c2c      	ldr	r4, [pc, #176]	; (9378 <_usb_d_dev_in_next+0x200>)
    92c8:	47a0      	blx	r4
		goto _in_tx_exec;
    92ca:	e02e      	b.n	932a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    92cc:	7afb      	ldrb	r3, [r7, #11]
    92ce:	2b00      	cmp	r3, #0
    92d0:	d006      	beq.n	92e0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    92d2:	7dfb      	ldrb	r3, [r7, #23]
    92d4:	224b      	movs	r2, #75	; 0x4b
    92d6:	4619      	mov	r1, r3
    92d8:	69b8      	ldr	r0, [r7, #24]
    92da:	4b28      	ldr	r3, [pc, #160]	; (937c <_usb_d_dev_in_next+0x204>)
    92dc:	4798      	blx	r3
    92de:	e005      	b.n	92ec <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    92e0:	7dfb      	ldrb	r3, [r7, #23]
    92e2:	224a      	movs	r2, #74	; 0x4a
    92e4:	4619      	mov	r1, r3
    92e6:	69b8      	ldr	r0, [r7, #24]
    92e8:	4b24      	ldr	r3, [pc, #144]	; (937c <_usb_d_dev_in_next+0x204>)
    92ea:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    92ec:	687b      	ldr	r3, [r7, #4]
    92ee:	8a1b      	ldrh	r3, [r3, #16]
    92f0:	89ba      	ldrh	r2, [r7, #12]
    92f2:	429a      	cmp	r2, r3
    92f4:	d114      	bne.n	9320 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    92f6:	687a      	ldr	r2, [r7, #4]
    92f8:	7cd3      	ldrb	r3, [r2, #19]
    92fa:	f36f 1386 	bfc	r3, #6, #1
    92fe:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9300:	4b1f      	ldr	r3, [pc, #124]	; (9380 <_usb_d_dev_in_next+0x208>)
    9302:	68db      	ldr	r3, [r3, #12]
    9304:	687a      	ldr	r2, [r7, #4]
    9306:	7c90      	ldrb	r0, [r2, #18]
    9308:	687a      	ldr	r2, [r7, #4]
    930a:	6892      	ldr	r2, [r2, #8]
    930c:	4611      	mov	r1, r2
    930e:	4798      	blx	r3
    9310:	4603      	mov	r3, r0
    9312:	2b00      	cmp	r3, #0
    9314:	d124      	bne.n	9360 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9316:	687a      	ldr	r2, [r7, #4]
    9318:	7cd3      	ldrb	r3, [r2, #19]
    931a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    931e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9320:	2100      	movs	r1, #0
    9322:	6878      	ldr	r0, [r7, #4]
    9324:	4b17      	ldr	r3, [pc, #92]	; (9384 <_usb_d_dev_in_next+0x20c>)
    9326:	4798      	blx	r3
	return;
    9328:	e01b      	b.n	9362 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    932a:	78fb      	ldrb	r3, [r7, #3]
    932c:	f083 0301 	eor.w	r3, r3, #1
    9330:	b2db      	uxtb	r3, r3
    9332:	2b00      	cmp	r3, #0
    9334:	d00d      	beq.n	9352 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9336:	7afb      	ldrb	r3, [r7, #11]
    9338:	2b00      	cmp	r3, #0
    933a:	d002      	beq.n	9342 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    933c:	234e      	movs	r3, #78	; 0x4e
    933e:	777b      	strb	r3, [r7, #29]
    9340:	e001      	b.n	9346 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9342:	234a      	movs	r3, #74	; 0x4a
    9344:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9346:	7f7a      	ldrb	r2, [r7, #29]
    9348:	7dfb      	ldrb	r3, [r7, #23]
    934a:	4619      	mov	r1, r3
    934c:	69b8      	ldr	r0, [r7, #24]
    934e:	4b0e      	ldr	r3, [pc, #56]	; (9388 <_usb_d_dev_in_next+0x210>)
    9350:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9352:	7dfb      	ldrb	r3, [r7, #23]
    9354:	2201      	movs	r2, #1
    9356:	2101      	movs	r1, #1
    9358:	4618      	mov	r0, r3
    935a:	4b0c      	ldr	r3, [pc, #48]	; (938c <_usb_d_dev_in_next+0x214>)
    935c:	4798      	blx	r3
    935e:	e000      	b.n	9362 <_usb_d_dev_in_next+0x1ea>
			return;
    9360:	bf00      	nop
}
    9362:	3724      	adds	r7, #36	; 0x24
    9364:	46bd      	mov	sp, r7
    9366:	bd90      	pop	{r4, r7, pc}
    9368:	20000f2c 	.word	0x20000f2c
    936c:	00008b71 	.word	0x00008b71
    9370:	000101d5 	.word	0x000101d5
    9374:	00008b9d 	.word	0x00008b9d
    9378:	00008ce5 	.word	0x00008ce5
    937c:	0000847d 	.word	0x0000847d
    9380:	20000e64 	.word	0x20000e64
    9384:	0000a4a1 	.word	0x0000a4a1
    9388:	00008451 	.word	0x00008451
    938c:	00008d9d 	.word	0x00008d9d

00009390 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9390:	b590      	push	{r4, r7, lr}
    9392:	b08b      	sub	sp, #44	; 0x2c
    9394:	af00      	add	r7, sp, #0
    9396:	6078      	str	r0, [r7, #4]
    9398:	460b      	mov	r3, r1
    939a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    939c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    93a0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	7c9b      	ldrb	r3, [r3, #18]
    93a6:	f003 030f 	and.w	r3, r3, #15
    93aa:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    93ac:	7ffb      	ldrb	r3, [r7, #31]
    93ae:	015b      	lsls	r3, r3, #5
    93b0:	4a94      	ldr	r2, [pc, #592]	; (9604 <_usb_d_dev_out_next+0x274>)
    93b2:	4413      	add	r3, r2
    93b4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    93b6:	78fb      	ldrb	r3, [r7, #3]
    93b8:	2b00      	cmp	r3, #0
    93ba:	d005      	beq.n	93c8 <_usb_d_dev_out_next+0x38>
    93bc:	69bb      	ldr	r3, [r7, #24]
    93be:	685b      	ldr	r3, [r3, #4]
    93c0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    93c4:	b29b      	uxth	r3, r3
    93c6:	e000      	b.n	93ca <_usb_d_dev_out_next+0x3a>
    93c8:	2300      	movs	r3, #0
    93ca:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    93cc:	78fb      	ldrb	r3, [r7, #3]
    93ce:	2b00      	cmp	r3, #0
    93d0:	d005      	beq.n	93de <_usb_d_dev_out_next+0x4e>
    93d2:	69bb      	ldr	r3, [r7, #24]
    93d4:	685b      	ldr	r3, [r3, #4]
    93d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    93da:	b29b      	uxth	r3, r3
    93dc:	e000      	b.n	93e0 <_usb_d_dev_out_next+0x50>
    93de:	2300      	movs	r3, #0
    93e0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    93e2:	687b      	ldr	r3, [r7, #4]
    93e4:	8a1b      	ldrh	r3, [r3, #16]
    93e6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    93ea:	4293      	cmp	r3, r2
    93ec:	d004      	beq.n	93f8 <_usb_d_dev_out_next+0x68>
    93ee:	687b      	ldr	r3, [r7, #4]
    93f0:	8a1b      	ldrh	r3, [r3, #16]
    93f2:	3b01      	subs	r3, #1
    93f4:	b29b      	uxth	r3, r3
    93f6:	e001      	b.n	93fc <_usb_d_dev_out_next+0x6c>
    93f8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    93fc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    93fe:	8aba      	ldrh	r2, [r7, #20]
    9400:	8a7b      	ldrh	r3, [r7, #18]
    9402:	4013      	ands	r3, r2
    9404:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9406:	687b      	ldr	r3, [r7, #4]
    9408:	7cdb      	ldrb	r3, [r3, #19]
    940a:	f003 0307 	and.w	r3, r3, #7
    940e:	b2db      	uxtb	r3, r3
    9410:	2b01      	cmp	r3, #1
    9412:	bf0c      	ite	eq
    9414:	2301      	moveq	r3, #1
    9416:	2300      	movne	r3, #0
    9418:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    941a:	78fb      	ldrb	r3, [r7, #3]
    941c:	2b00      	cmp	r3, #0
    941e:	d004      	beq.n	942a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9420:	7ffb      	ldrb	r3, [r7, #31]
    9422:	2100      	movs	r1, #0
    9424:	4618      	mov	r0, r3
    9426:	4b78      	ldr	r3, [pc, #480]	; (9608 <_usb_d_dev_out_next+0x278>)
    9428:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    942a:	687b      	ldr	r3, [r7, #4]
    942c:	7cdb      	ldrb	r3, [r3, #19]
    942e:	f003 0320 	and.w	r3, r3, #32
    9432:	b2db      	uxtb	r3, r3
    9434:	2b00      	cmp	r3, #0
    9436:	d01c      	beq.n	9472 <_usb_d_dev_out_next+0xe2>
    9438:	687b      	ldr	r3, [r7, #4]
    943a:	685b      	ldr	r3, [r3, #4]
    943c:	2b00      	cmp	r3, #0
    943e:	d018      	beq.n	9472 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9440:	687b      	ldr	r3, [r7, #4]
    9442:	685b      	ldr	r3, [r3, #4]
    9444:	b29a      	uxth	r2, r3
    9446:	687b      	ldr	r3, [r7, #4]
    9448:	689b      	ldr	r3, [r3, #8]
    944a:	b29b      	uxth	r3, r3
    944c:	1ad3      	subs	r3, r2, r3
    944e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9450:	687b      	ldr	r3, [r7, #4]
    9452:	681a      	ldr	r2, [r3, #0]
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	689b      	ldr	r3, [r3, #8]
    9458:	18d0      	adds	r0, r2, r3
    945a:	687b      	ldr	r3, [r7, #4]
    945c:	68d9      	ldr	r1, [r3, #12]
    945e:	89ba      	ldrh	r2, [r7, #12]
    9460:	8a3b      	ldrh	r3, [r7, #16]
    9462:	429a      	cmp	r2, r3
    9464:	d901      	bls.n	946a <_usb_d_dev_out_next+0xda>
    9466:	8a3b      	ldrh	r3, [r7, #16]
    9468:	e000      	b.n	946c <_usb_d_dev_out_next+0xdc>
    946a:	89bb      	ldrh	r3, [r7, #12]
    946c:	461a      	mov	r2, r3
    946e:	4b67      	ldr	r3, [pc, #412]	; (960c <_usb_d_dev_out_next+0x27c>)
    9470:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9472:	687b      	ldr	r3, [r7, #4]
    9474:	685b      	ldr	r3, [r3, #4]
    9476:	2b00      	cmp	r3, #0
    9478:	d121      	bne.n	94be <_usb_d_dev_out_next+0x12e>
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	7cdb      	ldrb	r3, [r3, #19]
    947e:	f003 0310 	and.w	r3, r3, #16
    9482:	b2db      	uxtb	r3, r3
    9484:	2b00      	cmp	r3, #0
    9486:	d01a      	beq.n	94be <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9488:	687a      	ldr	r2, [r7, #4]
    948a:	7cd3      	ldrb	r3, [r2, #19]
    948c:	f36f 1304 	bfc	r3, #4, #1
    9490:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9492:	687a      	ldr	r2, [r7, #4]
    9494:	7cd3      	ldrb	r3, [r2, #19]
    9496:	f043 0320 	orr.w	r3, r3, #32
    949a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    949c:	687b      	ldr	r3, [r7, #4]
    949e:	68db      	ldr	r3, [r3, #12]
    94a0:	461a      	mov	r2, r3
    94a2:	7ffb      	ldrb	r3, [r7, #31]
    94a4:	2100      	movs	r1, #0
    94a6:	4618      	mov	r0, r3
    94a8:	4b59      	ldr	r3, [pc, #356]	; (9610 <_usb_d_dev_out_next+0x280>)
    94aa:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    94ac:	687b      	ldr	r3, [r7, #4]
    94ae:	8a1b      	ldrh	r3, [r3, #16]
    94b0:	461a      	mov	r2, r3
    94b2:	7ff8      	ldrb	r0, [r7, #31]
    94b4:	2300      	movs	r3, #0
    94b6:	2100      	movs	r1, #0
    94b8:	4c56      	ldr	r4, [pc, #344]	; (9614 <_usb_d_dev_out_next+0x284>)
    94ba:	47a0      	blx	r4
		goto _out_rx_exec;
    94bc:	e090      	b.n	95e0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    94be:	78fb      	ldrb	r3, [r7, #3]
    94c0:	2b00      	cmp	r3, #0
    94c2:	d010      	beq.n	94e6 <_usb_d_dev_out_next+0x156>
    94c4:	687b      	ldr	r3, [r7, #4]
    94c6:	8a1b      	ldrh	r3, [r3, #16]
    94c8:	8a3a      	ldrh	r2, [r7, #16]
    94ca:	429a      	cmp	r2, r3
    94cc:	d20b      	bcs.n	94e6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    94ce:	687a      	ldr	r2, [r7, #4]
    94d0:	7cd3      	ldrb	r3, [r2, #19]
    94d2:	f36f 1304 	bfc	r3, #4, #1
    94d6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    94d8:	687b      	ldr	r3, [r7, #4]
    94da:	689a      	ldr	r2, [r3, #8]
    94dc:	8abb      	ldrh	r3, [r7, #20]
    94de:	441a      	add	r2, r3
    94e0:	687b      	ldr	r3, [r7, #4]
    94e2:	609a      	str	r2, [r3, #8]
    94e4:	e05c      	b.n	95a0 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    94e6:	687b      	ldr	r3, [r7, #4]
    94e8:	689a      	ldr	r2, [r3, #8]
    94ea:	8afb      	ldrh	r3, [r7, #22]
    94ec:	441a      	add	r2, r3
    94ee:	687b      	ldr	r3, [r7, #4]
    94f0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    94f2:	687b      	ldr	r3, [r7, #4]
    94f4:	689a      	ldr	r2, [r3, #8]
    94f6:	687b      	ldr	r3, [r7, #4]
    94f8:	685b      	ldr	r3, [r3, #4]
    94fa:	429a      	cmp	r2, r3
    94fc:	d250      	bcs.n	95a0 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    94fe:	687b      	ldr	r3, [r7, #4]
    9500:	685b      	ldr	r3, [r3, #4]
    9502:	b29a      	uxth	r2, r3
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	689b      	ldr	r3, [r3, #8]
    9508:	b29b      	uxth	r3, r3
    950a:	1ad3      	subs	r3, r2, r3
    950c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    950e:	687b      	ldr	r3, [r7, #4]
    9510:	7cdb      	ldrb	r3, [r3, #19]
    9512:	f003 0320 	and.w	r3, r3, #32
    9516:	b2db      	uxtb	r3, r3
    9518:	2b00      	cmp	r3, #0
    951a:	d010      	beq.n	953e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	8a1b      	ldrh	r3, [r3, #16]
    9520:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9522:	429a      	cmp	r2, r3
    9524:	d902      	bls.n	952c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9526:	687b      	ldr	r3, [r7, #4]
    9528:	8a1b      	ldrh	r3, [r3, #16]
    952a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	68db      	ldr	r3, [r3, #12]
    9530:	461a      	mov	r2, r3
    9532:	7ffb      	ldrb	r3, [r7, #31]
    9534:	2100      	movs	r1, #0
    9536:	4618      	mov	r0, r3
    9538:	4b35      	ldr	r3, [pc, #212]	; (9610 <_usb_d_dev_out_next+0x280>)
    953a:	4798      	blx	r3
    953c:	e029      	b.n	9592 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    953e:	687b      	ldr	r3, [r7, #4]
    9540:	8a1b      	ldrh	r3, [r3, #16]
    9542:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9544:	429a      	cmp	r2, r3
    9546:	d90f      	bls.n	9568 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    954a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    954e:	d903      	bls.n	9558 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9554:	84fb      	strh	r3, [r7, #38]	; 0x26
    9556:	e011      	b.n	957c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9558:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    955a:	8a7b      	ldrh	r3, [r7, #18]
    955c:	4013      	ands	r3, r2
    955e:	b29b      	uxth	r3, r3
    9560:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9562:	1ad3      	subs	r3, r2, r3
    9564:	84fb      	strh	r3, [r7, #38]	; 0x26
    9566:	e009      	b.n	957c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9568:	687b      	ldr	r3, [r7, #4]
    956a:	8a1b      	ldrh	r3, [r3, #16]
    956c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    956e:	429a      	cmp	r2, r3
    9570:	d204      	bcs.n	957c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9572:	687a      	ldr	r2, [r7, #4]
    9574:	7cd3      	ldrb	r3, [r2, #19]
    9576:	f043 0320 	orr.w	r3, r3, #32
    957a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    957c:	687b      	ldr	r3, [r7, #4]
    957e:	681a      	ldr	r2, [r3, #0]
    9580:	687b      	ldr	r3, [r7, #4]
    9582:	689b      	ldr	r3, [r3, #8]
    9584:	4413      	add	r3, r2
    9586:	461a      	mov	r2, r3
    9588:	7ffb      	ldrb	r3, [r7, #31]
    958a:	2100      	movs	r1, #0
    958c:	4618      	mov	r0, r3
    958e:	4b20      	ldr	r3, [pc, #128]	; (9610 <_usb_d_dev_out_next+0x280>)
    9590:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9592:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9594:	7ff8      	ldrb	r0, [r7, #31]
    9596:	2300      	movs	r3, #0
    9598:	2100      	movs	r1, #0
    959a:	4c1e      	ldr	r4, [pc, #120]	; (9614 <_usb_d_dev_out_next+0x284>)
    959c:	47a0      	blx	r4
			goto _out_rx_exec;
    959e:	e01f      	b.n	95e0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    95a0:	7bfb      	ldrb	r3, [r7, #15]
    95a2:	2b00      	cmp	r3, #0
    95a4:	d006      	beq.n	95b4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    95a6:	7ffb      	ldrb	r3, [r7, #31]
    95a8:	222d      	movs	r2, #45	; 0x2d
    95aa:	4619      	mov	r1, r3
    95ac:	6a38      	ldr	r0, [r7, #32]
    95ae:	4b1a      	ldr	r3, [pc, #104]	; (9618 <_usb_d_dev_out_next+0x288>)
    95b0:	4798      	blx	r3
    95b2:	e005      	b.n	95c0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    95b4:	7ffb      	ldrb	r3, [r7, #31]
    95b6:	2225      	movs	r2, #37	; 0x25
    95b8:	4619      	mov	r1, r3
    95ba:	6a38      	ldr	r0, [r7, #32]
    95bc:	4b16      	ldr	r3, [pc, #88]	; (9618 <_usb_d_dev_out_next+0x288>)
    95be:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    95c0:	7ffb      	ldrb	r3, [r7, #31]
    95c2:	2b00      	cmp	r3, #0
    95c4:	d107      	bne.n	95d6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	68db      	ldr	r3, [r3, #12]
    95ca:	461a      	mov	r2, r3
    95cc:	7ffb      	ldrb	r3, [r7, #31]
    95ce:	2100      	movs	r1, #0
    95d0:	4618      	mov	r0, r3
    95d2:	4b0f      	ldr	r3, [pc, #60]	; (9610 <_usb_d_dev_out_next+0x280>)
    95d4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    95d6:	2100      	movs	r1, #0
    95d8:	6878      	ldr	r0, [r7, #4]
    95da:	4b10      	ldr	r3, [pc, #64]	; (961c <_usb_d_dev_out_next+0x28c>)
    95dc:	4798      	blx	r3
	return;
    95de:	e031      	b.n	9644 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    95e0:	78fb      	ldrb	r3, [r7, #3]
    95e2:	f083 0301 	eor.w	r3, r3, #1
    95e6:	b2db      	uxtb	r3, r3
    95e8:	2b00      	cmp	r3, #0
    95ea:	d025      	beq.n	9638 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    95ec:	7bfb      	ldrb	r3, [r7, #15]
    95ee:	2b00      	cmp	r3, #0
    95f0:	d018      	beq.n	9624 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    95f2:	7ffb      	ldrb	r3, [r7, #31]
    95f4:	2101      	movs	r1, #1
    95f6:	4618      	mov	r0, r3
    95f8:	4b09      	ldr	r3, [pc, #36]	; (9620 <_usb_d_dev_out_next+0x290>)
    95fa:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    95fc:	232d      	movs	r3, #45	; 0x2d
    95fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9602:	e012      	b.n	962a <_usb_d_dev_out_next+0x29a>
    9604:	20000f2c 	.word	0x20000f2c
    9608:	00008b71 	.word	0x00008b71
    960c:	000101d5 	.word	0x000101d5
    9610:	00008b9d 	.word	0x00008b9d
    9614:	00008d25 	.word	0x00008d25
    9618:	0000847d 	.word	0x0000847d
    961c:	0000a4a1 	.word	0x0000a4a1
    9620:	00008d65 	.word	0x00008d65
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9624:	2325      	movs	r3, #37	; 0x25
    9626:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    962a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    962e:	7ffb      	ldrb	r3, [r7, #31]
    9630:	4619      	mov	r1, r3
    9632:	6a38      	ldr	r0, [r7, #32]
    9634:	4b05      	ldr	r3, [pc, #20]	; (964c <_usb_d_dev_out_next+0x2bc>)
    9636:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9638:	7ffb      	ldrb	r3, [r7, #31]
    963a:	2201      	movs	r2, #1
    963c:	2100      	movs	r1, #0
    963e:	4618      	mov	r0, r3
    9640:	4b03      	ldr	r3, [pc, #12]	; (9650 <_usb_d_dev_out_next+0x2c0>)
    9642:	4798      	blx	r3
}
    9644:	372c      	adds	r7, #44	; 0x2c
    9646:	46bd      	mov	sp, r7
    9648:	bd90      	pop	{r4, r7, pc}
    964a:	bf00      	nop
    964c:	00008451 	.word	0x00008451
    9650:	00008df5 	.word	0x00008df5

00009654 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9654:	b580      	push	{r7, lr}
    9656:	b084      	sub	sp, #16
    9658:	af00      	add	r7, sp, #0
    965a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    965c:	687b      	ldr	r3, [r7, #4]
    965e:	7c9b      	ldrb	r3, [r3, #18]
    9660:	f003 030f 	and.w	r3, r3, #15
    9664:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9666:	687b      	ldr	r3, [r7, #4]
    9668:	7cdb      	ldrb	r3, [r3, #19]
    966a:	f003 0307 	and.w	r3, r3, #7
    966e:	b2db      	uxtb	r3, r3
    9670:	2b01      	cmp	r3, #1
    9672:	bf0c      	ite	eq
    9674:	2301      	moveq	r3, #1
    9676:	2300      	movne	r3, #0
    9678:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    967a:	7bbb      	ldrb	r3, [r7, #14]
    967c:	f083 0301 	eor.w	r3, r3, #1
    9680:	b2db      	uxtb	r3, r3
    9682:	2b00      	cmp	r3, #0
    9684:	d008      	beq.n	9698 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9686:	7bfb      	ldrb	r3, [r7, #15]
    9688:	4618      	mov	r0, r3
    968a:	4b20      	ldr	r3, [pc, #128]	; (970c <_usb_d_dev_handle_setup+0xb8>)
    968c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    968e:	7bfb      	ldrb	r3, [r7, #15]
    9690:	4618      	mov	r0, r3
    9692:	4b1f      	ldr	r3, [pc, #124]	; (9710 <_usb_d_dev_handle_setup+0xbc>)
    9694:	4798      	blx	r3
		return;
    9696:	e036      	b.n	9706 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	7cdb      	ldrb	r3, [r3, #19]
    969c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    96a0:	b2db      	uxtb	r3, r3
    96a2:	2b00      	cmp	r3, #0
    96a4:	d010      	beq.n	96c8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    96a6:	687a      	ldr	r2, [r7, #4]
    96a8:	7cd3      	ldrb	r3, [r2, #19]
    96aa:	f36f 1386 	bfc	r3, #6, #1
    96ae:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    96b0:	7bfb      	ldrb	r3, [r7, #15]
    96b2:	2200      	movs	r2, #0
    96b4:	2101      	movs	r1, #1
    96b6:	4618      	mov	r0, r3
    96b8:	4b16      	ldr	r3, [pc, #88]	; (9714 <_usb_d_dev_handle_setup+0xc0>)
    96ba:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    96bc:	7bfb      	ldrb	r3, [r7, #15]
    96be:	2200      	movs	r2, #0
    96c0:	2100      	movs	r1, #0
    96c2:	4618      	mov	r0, r3
    96c4:	4b14      	ldr	r3, [pc, #80]	; (9718 <_usb_d_dev_handle_setup+0xc4>)
    96c6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    96c8:	687a      	ldr	r2, [r7, #4]
    96ca:	7cd3      	ldrb	r3, [r2, #19]
    96cc:	f36f 03c3 	bfc	r3, #3, #1
    96d0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    96d2:	7bfb      	ldrb	r3, [r7, #15]
    96d4:	2100      	movs	r1, #0
    96d6:	4618      	mov	r0, r3
    96d8:	4b10      	ldr	r3, [pc, #64]	; (971c <_usb_d_dev_handle_setup+0xc8>)
    96da:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    96dc:	7bfb      	ldrb	r3, [r7, #15]
    96de:	2101      	movs	r1, #1
    96e0:	4618      	mov	r0, r3
    96e2:	4b0e      	ldr	r3, [pc, #56]	; (971c <_usb_d_dev_handle_setup+0xc8>)
    96e4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    96e6:	7bfb      	ldrb	r3, [r7, #15]
    96e8:	216f      	movs	r1, #111	; 0x6f
    96ea:	4618      	mov	r0, r3
    96ec:	4b0c      	ldr	r3, [pc, #48]	; (9720 <_usb_d_dev_handle_setup+0xcc>)
    96ee:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    96f0:	7bfb      	ldrb	r3, [r7, #15]
    96f2:	216f      	movs	r1, #111	; 0x6f
    96f4:	4618      	mov	r0, r3
    96f6:	4b0b      	ldr	r3, [pc, #44]	; (9724 <_usb_d_dev_handle_setup+0xd0>)
    96f8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    96fa:	4b0b      	ldr	r3, [pc, #44]	; (9728 <_usb_d_dev_handle_setup+0xd4>)
    96fc:	689b      	ldr	r3, [r3, #8]
    96fe:	687a      	ldr	r2, [r7, #4]
    9700:	7c92      	ldrb	r2, [r2, #18]
    9702:	4610      	mov	r0, r2
    9704:	4798      	blx	r3
}
    9706:	3710      	adds	r7, #16
    9708:	46bd      	mov	sp, r7
    970a:	bd80      	pop	{r7, pc}
    970c:	00008af9 	.word	0x00008af9
    9710:	00008aa5 	.word	0x00008aa5
    9714:	00008d9d 	.word	0x00008d9d
    9718:	00008df5 	.word	0x00008df5
    971c:	00008d65 	.word	0x00008d65
    9720:	000088a5 	.word	0x000088a5
    9724:	000088f5 	.word	0x000088f5
    9728:	20000e64 	.word	0x20000e64

0000972c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    972c:	b580      	push	{r7, lr}
    972e:	b084      	sub	sp, #16
    9730:	af00      	add	r7, sp, #0
    9732:	6078      	str	r0, [r7, #4]
    9734:	460b      	mov	r3, r1
    9736:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	7c9b      	ldrb	r3, [r3, #18]
    973c:	f003 030f 	and.w	r3, r3, #15
    9740:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9742:	78f9      	ldrb	r1, [r7, #3]
    9744:	7bfb      	ldrb	r3, [r7, #15]
    9746:	2200      	movs	r2, #0
    9748:	4618      	mov	r0, r3
    974a:	4b07      	ldr	r3, [pc, #28]	; (9768 <_usb_d_dev_handle_stall+0x3c>)
    974c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    974e:	4b07      	ldr	r3, [pc, #28]	; (976c <_usb_d_dev_handle_stall+0x40>)
    9750:	691b      	ldr	r3, [r3, #16]
    9752:	687a      	ldr	r2, [r7, #4]
    9754:	7c90      	ldrb	r0, [r2, #18]
    9756:	687a      	ldr	r2, [r7, #4]
    9758:	6892      	ldr	r2, [r2, #8]
    975a:	2101      	movs	r1, #1
    975c:	4798      	blx	r3
}
    975e:	bf00      	nop
    9760:	3710      	adds	r7, #16
    9762:	46bd      	mov	sp, r7
    9764:	bd80      	pop	{r7, pc}
    9766:	bf00      	nop
    9768:	00008a59 	.word	0x00008a59
    976c:	20000e64 	.word	0x20000e64

00009770 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9770:	b580      	push	{r7, lr}
    9772:	b088      	sub	sp, #32
    9774:	af00      	add	r7, sp, #0
    9776:	6078      	str	r0, [r7, #4]
    9778:	460b      	mov	r3, r1
    977a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    977c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9780:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9782:	687b      	ldr	r3, [r7, #4]
    9784:	7c9b      	ldrb	r3, [r3, #18]
    9786:	f003 030f 	and.w	r3, r3, #15
    978a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    978c:	4b61      	ldr	r3, [pc, #388]	; (9914 <_usb_d_dev_handle_trfail+0x1a4>)
    978e:	881b      	ldrh	r3, [r3, #0]
    9790:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9792:	7efb      	ldrb	r3, [r7, #27]
    9794:	015b      	lsls	r3, r3, #5
    9796:	4a60      	ldr	r2, [pc, #384]	; (9918 <_usb_d_dev_handle_trfail+0x1a8>)
    9798:	4413      	add	r3, r2
    979a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    979c:	78fb      	ldrb	r3, [r7, #3]
    979e:	2b00      	cmp	r3, #0
    97a0:	d006      	beq.n	97b0 <_usb_d_dev_handle_trfail+0x40>
    97a2:	7efb      	ldrb	r3, [r7, #27]
    97a4:	4619      	mov	r1, r3
    97a6:	69f8      	ldr	r0, [r7, #28]
    97a8:	4b5c      	ldr	r3, [pc, #368]	; (991c <_usb_d_dev_handle_trfail+0x1ac>)
    97aa:	4798      	blx	r3
    97ac:	4603      	mov	r3, r0
    97ae:	e005      	b.n	97bc <_usb_d_dev_handle_trfail+0x4c>
    97b0:	7efb      	ldrb	r3, [r7, #27]
    97b2:	4619      	mov	r1, r3
    97b4:	69f8      	ldr	r0, [r7, #28]
    97b6:	4b5a      	ldr	r3, [pc, #360]	; (9920 <_usb_d_dev_handle_trfail+0x1b0>)
    97b8:	4798      	blx	r3
    97ba:	4603      	mov	r3, r0
    97bc:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    97be:	687b      	ldr	r3, [r7, #4]
    97c0:	7cdb      	ldrb	r3, [r3, #19]
    97c2:	f003 0307 	and.w	r3, r3, #7
    97c6:	b2db      	uxtb	r3, r3
    97c8:	2b01      	cmp	r3, #1
    97ca:	bf0c      	ite	eq
    97cc:	2301      	moveq	r3, #1
    97ce:	2300      	movne	r3, #0
    97d0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    97d2:	78fb      	ldrb	r3, [r7, #3]
    97d4:	011b      	lsls	r3, r3, #4
    97d6:	697a      	ldr	r2, [r7, #20]
    97d8:	4413      	add	r3, r2
    97da:	7a9b      	ldrb	r3, [r3, #10]
    97dc:	b2db      	uxtb	r3, r3
    97de:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    97e0:	7cfb      	ldrb	r3, [r7, #19]
    97e2:	2b02      	cmp	r3, #2
    97e4:	d12f      	bne.n	9846 <_usb_d_dev_handle_trfail+0xd6>
    97e6:	7b3b      	ldrb	r3, [r7, #12]
    97e8:	f003 0301 	and.w	r3, r3, #1
    97ec:	b2db      	uxtb	r3, r3
    97ee:	2b00      	cmp	r3, #0
    97f0:	d029      	beq.n	9846 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    97f2:	78fb      	ldrb	r3, [r7, #3]
    97f4:	011b      	lsls	r3, r3, #4
    97f6:	697a      	ldr	r2, [r7, #20]
    97f8:	441a      	add	r2, r3
    97fa:	7a93      	ldrb	r3, [r2, #10]
    97fc:	f36f 0300 	bfc	r3, #0, #1
    9800:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9802:	78fb      	ldrb	r3, [r7, #3]
    9804:	f107 0220 	add.w	r2, r7, #32
    9808:	4413      	add	r3, r2
    980a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    980e:	7efb      	ldrb	r3, [r7, #27]
    9810:	4619      	mov	r1, r3
    9812:	69f8      	ldr	r0, [r7, #28]
    9814:	4b43      	ldr	r3, [pc, #268]	; (9924 <_usb_d_dev_handle_trfail+0x1b4>)
    9816:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9818:	78fb      	ldrb	r3, [r7, #3]
    981a:	f107 0220 	add.w	r2, r7, #32
    981e:	4413      	add	r3, r2
    9820:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9824:	7efb      	ldrb	r3, [r7, #27]
    9826:	4619      	mov	r1, r3
    9828:	69f8      	ldr	r0, [r7, #28]
    982a:	4b3f      	ldr	r3, [pc, #252]	; (9928 <_usb_d_dev_handle_trfail+0x1b8>)
    982c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    982e:	78fb      	ldrb	r3, [r7, #3]
    9830:	2b00      	cmp	r3, #0
    9832:	bf14      	ite	ne
    9834:	2301      	movne	r3, #1
    9836:	2300      	moveq	r3, #0
    9838:	b2db      	uxtb	r3, r3
    983a:	2204      	movs	r2, #4
    983c:	4619      	mov	r1, r3
    983e:	6878      	ldr	r0, [r7, #4]
    9840:	4b3a      	ldr	r3, [pc, #232]	; (992c <_usb_d_dev_handle_trfail+0x1bc>)
    9842:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9844:	e062      	b.n	990c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9846:	7b3b      	ldrb	r3, [r7, #12]
    9848:	f003 0302 	and.w	r3, r3, #2
    984c:	b2db      	uxtb	r3, r3
    984e:	2b00      	cmp	r3, #0
    9850:	d040      	beq.n	98d4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9852:	78fb      	ldrb	r3, [r7, #3]
    9854:	011b      	lsls	r3, r3, #4
    9856:	697a      	ldr	r2, [r7, #20]
    9858:	441a      	add	r2, r3
    985a:	7a93      	ldrb	r3, [r2, #10]
    985c:	f36f 0341 	bfc	r3, #1, #1
    9860:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9862:	78fb      	ldrb	r3, [r7, #3]
    9864:	f107 0220 	add.w	r2, r7, #32
    9868:	4413      	add	r3, r2
    986a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    986e:	7efb      	ldrb	r3, [r7, #27]
    9870:	4619      	mov	r1, r3
    9872:	69f8      	ldr	r0, [r7, #28]
    9874:	4b2b      	ldr	r3, [pc, #172]	; (9924 <_usb_d_dev_handle_trfail+0x1b4>)
    9876:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9878:	78fb      	ldrb	r3, [r7, #3]
    987a:	f107 0220 	add.w	r2, r7, #32
    987e:	4413      	add	r3, r2
    9880:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9884:	7efb      	ldrb	r3, [r7, #27]
    9886:	4619      	mov	r1, r3
    9888:	69f8      	ldr	r0, [r7, #28]
    988a:	4b27      	ldr	r3, [pc, #156]	; (9928 <_usb_d_dev_handle_trfail+0x1b8>)
    988c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    988e:	7cbb      	ldrb	r3, [r7, #18]
    9890:	2b00      	cmp	r3, #0
    9892:	d03b      	beq.n	990c <_usb_d_dev_handle_trfail+0x19c>
    9894:	687b      	ldr	r3, [r7, #4]
    9896:	7cdb      	ldrb	r3, [r3, #19]
    9898:	f003 0340 	and.w	r3, r3, #64	; 0x40
    989c:	b2db      	uxtb	r3, r3
    989e:	2b00      	cmp	r3, #0
    98a0:	d034      	beq.n	990c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    98a2:	687b      	ldr	r3, [r7, #4]
    98a4:	7cdb      	ldrb	r3, [r3, #19]
    98a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    98aa:	b2db      	uxtb	r3, r3
    98ac:	461a      	mov	r2, r3
    98ae:	78fb      	ldrb	r3, [r7, #3]
    98b0:	4293      	cmp	r3, r2
    98b2:	d02b      	beq.n	990c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    98b4:	687b      	ldr	r3, [r7, #4]
    98b6:	7cdb      	ldrb	r3, [r3, #19]
    98b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    98bc:	b2db      	uxtb	r3, r3
    98be:	2b00      	cmp	r3, #0
    98c0:	bf14      	ite	ne
    98c2:	2301      	movne	r3, #1
    98c4:	2300      	moveq	r3, #0
    98c6:	b2db      	uxtb	r3, r3
    98c8:	2200      	movs	r2, #0
    98ca:	4619      	mov	r1, r3
    98cc:	6878      	ldr	r0, [r7, #4]
    98ce:	4b17      	ldr	r3, [pc, #92]	; (992c <_usb_d_dev_handle_trfail+0x1bc>)
    98d0:	4798      	blx	r3
}
    98d2:	e01b      	b.n	990c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    98d4:	78fa      	ldrb	r2, [r7, #3]
    98d6:	7efb      	ldrb	r3, [r7, #27]
    98d8:	4611      	mov	r1, r2
    98da:	4618      	mov	r0, r3
    98dc:	4b14      	ldr	r3, [pc, #80]	; (9930 <_usb_d_dev_handle_trfail+0x1c0>)
    98de:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    98e0:	78fb      	ldrb	r3, [r7, #3]
    98e2:	f107 0220 	add.w	r2, r7, #32
    98e6:	4413      	add	r3, r2
    98e8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    98ec:	7efb      	ldrb	r3, [r7, #27]
    98ee:	4619      	mov	r1, r3
    98f0:	69f8      	ldr	r0, [r7, #28]
    98f2:	4b0c      	ldr	r3, [pc, #48]	; (9924 <_usb_d_dev_handle_trfail+0x1b4>)
    98f4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    98f6:	78fb      	ldrb	r3, [r7, #3]
    98f8:	f107 0220 	add.w	r2, r7, #32
    98fc:	4413      	add	r3, r2
    98fe:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9902:	7efb      	ldrb	r3, [r7, #27]
    9904:	4619      	mov	r1, r3
    9906:	69f8      	ldr	r0, [r7, #28]
    9908:	4b07      	ldr	r3, [pc, #28]	; (9928 <_usb_d_dev_handle_trfail+0x1b8>)
    990a:	4798      	blx	r3
}
    990c:	bf00      	nop
    990e:	3720      	adds	r7, #32
    9910:	46bd      	mov	sp, r7
    9912:	bd80      	pop	{r7, pc}
    9914:	00010a8c 	.word	0x00010a8c
    9918:	20000f2c 	.word	0x20000f2c
    991c:	000084d9 	.word	0x000084d9
    9920:	000084a9 	.word	0x000084a9
    9924:	0000837d 	.word	0x0000837d
    9928:	0000847d 	.word	0x0000847d
    992c:	0000a4e9 	.word	0x0000a4e9
    9930:	00008d65 	.word	0x00008d65

00009934 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9934:	b580      	push	{r7, lr}
    9936:	b082      	sub	sp, #8
    9938:	af00      	add	r7, sp, #0
    993a:	6078      	str	r0, [r7, #4]
    993c:	460b      	mov	r3, r1
    993e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9940:	78fb      	ldrb	r3, [r7, #3]
    9942:	f003 0310 	and.w	r3, r3, #16
    9946:	2b00      	cmp	r3, #0
    9948:	d003      	beq.n	9952 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    994a:	6878      	ldr	r0, [r7, #4]
    994c:	4b0c      	ldr	r3, [pc, #48]	; (9980 <_usb_d_dev_trans_setup_isr+0x4c>)
    994e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9950:	e012      	b.n	9978 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9952:	78fb      	ldrb	r3, [r7, #3]
    9954:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9958:	2b00      	cmp	r3, #0
    995a:	d004      	beq.n	9966 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    995c:	2101      	movs	r1, #1
    995e:	6878      	ldr	r0, [r7, #4]
    9960:	4b08      	ldr	r3, [pc, #32]	; (9984 <_usb_d_dev_trans_setup_isr+0x50>)
    9962:	4798      	blx	r3
}
    9964:	e008      	b.n	9978 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9966:	78fb      	ldrb	r3, [r7, #3]
    9968:	f003 0320 	and.w	r3, r3, #32
    996c:	2b00      	cmp	r3, #0
    996e:	d003      	beq.n	9978 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9970:	2100      	movs	r1, #0
    9972:	6878      	ldr	r0, [r7, #4]
    9974:	4b03      	ldr	r3, [pc, #12]	; (9984 <_usb_d_dev_trans_setup_isr+0x50>)
    9976:	4798      	blx	r3
}
    9978:	bf00      	nop
    997a:	3708      	adds	r7, #8
    997c:	46bd      	mov	sp, r7
    997e:	bd80      	pop	{r7, pc}
    9980:	00009655 	.word	0x00009655
    9984:	0000972d 	.word	0x0000972d

00009988 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9988:	b580      	push	{r7, lr}
    998a:	b082      	sub	sp, #8
    998c:	af00      	add	r7, sp, #0
    998e:	6078      	str	r0, [r7, #4]
    9990:	460b      	mov	r3, r1
    9992:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9994:	78fb      	ldrb	r3, [r7, #3]
    9996:	f003 0340 	and.w	r3, r3, #64	; 0x40
    999a:	2b00      	cmp	r3, #0
    999c:	d004      	beq.n	99a8 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    999e:	2101      	movs	r1, #1
    99a0:	6878      	ldr	r0, [r7, #4]
    99a2:	4b1a      	ldr	r3, [pc, #104]	; (9a0c <_usb_d_dev_trans_in_isr+0x84>)
    99a4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    99a6:	e02c      	b.n	9a02 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    99a8:	78fb      	ldrb	r3, [r7, #3]
    99aa:	f003 0308 	and.w	r3, r3, #8
    99ae:	2b00      	cmp	r3, #0
    99b0:	d004      	beq.n	99bc <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    99b2:	2101      	movs	r1, #1
    99b4:	6878      	ldr	r0, [r7, #4]
    99b6:	4b16      	ldr	r3, [pc, #88]	; (9a10 <_usb_d_dev_trans_in_isr+0x88>)
    99b8:	4798      	blx	r3
}
    99ba:	e022      	b.n	9a02 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    99bc:	78fb      	ldrb	r3, [r7, #3]
    99be:	f003 0302 	and.w	r3, r3, #2
    99c2:	2b00      	cmp	r3, #0
    99c4:	d004      	beq.n	99d0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    99c6:	2101      	movs	r1, #1
    99c8:	6878      	ldr	r0, [r7, #4]
    99ca:	4b12      	ldr	r3, [pc, #72]	; (9a14 <_usb_d_dev_trans_in_isr+0x8c>)
    99cc:	4798      	blx	r3
}
    99ce:	e018      	b.n	9a02 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    99d0:	687b      	ldr	r3, [r7, #4]
    99d2:	7cdb      	ldrb	r3, [r3, #19]
    99d4:	f003 0307 	and.w	r3, r3, #7
    99d8:	b2db      	uxtb	r3, r3
    99da:	2b01      	cmp	r3, #1
    99dc:	d111      	bne.n	9a02 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    99de:	78fb      	ldrb	r3, [r7, #3]
    99e0:	f003 0304 	and.w	r3, r3, #4
    99e4:	2b00      	cmp	r3, #0
    99e6:	d004      	beq.n	99f2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    99e8:	2100      	movs	r1, #0
    99ea:	6878      	ldr	r0, [r7, #4]
    99ec:	4b08      	ldr	r3, [pc, #32]	; (9a10 <_usb_d_dev_trans_in_isr+0x88>)
    99ee:	4798      	blx	r3
}
    99f0:	e007      	b.n	9a02 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    99f2:	78fb      	ldrb	r3, [r7, #3]
    99f4:	f003 0310 	and.w	r3, r3, #16
    99f8:	2b00      	cmp	r3, #0
    99fa:	d002      	beq.n	9a02 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    99fc:	6878      	ldr	r0, [r7, #4]
    99fe:	4b06      	ldr	r3, [pc, #24]	; (9a18 <_usb_d_dev_trans_in_isr+0x90>)
    9a00:	4798      	blx	r3
}
    9a02:	bf00      	nop
    9a04:	3708      	adds	r7, #8
    9a06:	46bd      	mov	sp, r7
    9a08:	bd80      	pop	{r7, pc}
    9a0a:	bf00      	nop
    9a0c:	0000972d 	.word	0x0000972d
    9a10:	00009771 	.word	0x00009771
    9a14:	00009179 	.word	0x00009179
    9a18:	00009655 	.word	0x00009655

00009a1c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9a1c:	b580      	push	{r7, lr}
    9a1e:	b082      	sub	sp, #8
    9a20:	af00      	add	r7, sp, #0
    9a22:	6078      	str	r0, [r7, #4]
    9a24:	460b      	mov	r3, r1
    9a26:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9a28:	78fb      	ldrb	r3, [r7, #3]
    9a2a:	f003 0320 	and.w	r3, r3, #32
    9a2e:	2b00      	cmp	r3, #0
    9a30:	d004      	beq.n	9a3c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9a32:	2100      	movs	r1, #0
    9a34:	6878      	ldr	r0, [r7, #4]
    9a36:	4b1a      	ldr	r3, [pc, #104]	; (9aa0 <_usb_d_dev_trans_out_isr+0x84>)
    9a38:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9a3a:	e02c      	b.n	9a96 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9a3c:	78fb      	ldrb	r3, [r7, #3]
    9a3e:	f003 0304 	and.w	r3, r3, #4
    9a42:	2b00      	cmp	r3, #0
    9a44:	d004      	beq.n	9a50 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9a46:	2100      	movs	r1, #0
    9a48:	6878      	ldr	r0, [r7, #4]
    9a4a:	4b16      	ldr	r3, [pc, #88]	; (9aa4 <_usb_d_dev_trans_out_isr+0x88>)
    9a4c:	4798      	blx	r3
}
    9a4e:	e022      	b.n	9a96 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9a50:	78fb      	ldrb	r3, [r7, #3]
    9a52:	f003 0301 	and.w	r3, r3, #1
    9a56:	2b00      	cmp	r3, #0
    9a58:	d004      	beq.n	9a64 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9a5a:	2101      	movs	r1, #1
    9a5c:	6878      	ldr	r0, [r7, #4]
    9a5e:	4b12      	ldr	r3, [pc, #72]	; (9aa8 <_usb_d_dev_trans_out_isr+0x8c>)
    9a60:	4798      	blx	r3
}
    9a62:	e018      	b.n	9a96 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9a64:	687b      	ldr	r3, [r7, #4]
    9a66:	7cdb      	ldrb	r3, [r3, #19]
    9a68:	f003 0307 	and.w	r3, r3, #7
    9a6c:	b2db      	uxtb	r3, r3
    9a6e:	2b01      	cmp	r3, #1
    9a70:	d111      	bne.n	9a96 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9a72:	78fb      	ldrb	r3, [r7, #3]
    9a74:	f003 0308 	and.w	r3, r3, #8
    9a78:	2b00      	cmp	r3, #0
    9a7a:	d004      	beq.n	9a86 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9a7c:	2101      	movs	r1, #1
    9a7e:	6878      	ldr	r0, [r7, #4]
    9a80:	4b08      	ldr	r3, [pc, #32]	; (9aa4 <_usb_d_dev_trans_out_isr+0x88>)
    9a82:	4798      	blx	r3
}
    9a84:	e007      	b.n	9a96 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9a86:	78fb      	ldrb	r3, [r7, #3]
    9a88:	f003 0310 	and.w	r3, r3, #16
    9a8c:	2b00      	cmp	r3, #0
    9a8e:	d002      	beq.n	9a96 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9a90:	6878      	ldr	r0, [r7, #4]
    9a92:	4b06      	ldr	r3, [pc, #24]	; (9aac <_usb_d_dev_trans_out_isr+0x90>)
    9a94:	4798      	blx	r3
}
    9a96:	bf00      	nop
    9a98:	3708      	adds	r7, #8
    9a9a:	46bd      	mov	sp, r7
    9a9c:	bd80      	pop	{r7, pc}
    9a9e:	bf00      	nop
    9aa0:	0000972d 	.word	0x0000972d
    9aa4:	00009771 	.word	0x00009771
    9aa8:	00009391 	.word	0x00009391
    9aac:	00009655 	.word	0x00009655

00009ab0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9ab0:	b580      	push	{r7, lr}
    9ab2:	b084      	sub	sp, #16
    9ab4:	af00      	add	r7, sp, #0
    9ab6:	6078      	str	r0, [r7, #4]
    9ab8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9aba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9abe:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ac0:	683b      	ldr	r3, [r7, #0]
    9ac2:	7c9b      	ldrb	r3, [r3, #18]
    9ac4:	f003 030f 	and.w	r3, r3, #15
    9ac8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9aca:	7afb      	ldrb	r3, [r7, #11]
    9acc:	2201      	movs	r2, #1
    9ace:	409a      	lsls	r2, r3
    9ad0:	687b      	ldr	r3, [r7, #4]
    9ad2:	4013      	ands	r3, r2
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d03d      	beq.n	9b54 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9ad8:	7afb      	ldrb	r3, [r7, #11]
    9ada:	68fa      	ldr	r2, [r7, #12]
    9adc:	3308      	adds	r3, #8
    9ade:	015b      	lsls	r3, r3, #5
    9ae0:	4413      	add	r3, r2
    9ae2:	3307      	adds	r3, #7
    9ae4:	781b      	ldrb	r3, [r3, #0]
    9ae6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9ae8:	7afb      	ldrb	r3, [r7, #11]
    9aea:	68fa      	ldr	r2, [r7, #12]
    9aec:	015b      	lsls	r3, r3, #5
    9aee:	4413      	add	r3, r2
    9af0:	f203 1309 	addw	r3, r3, #265	; 0x109
    9af4:	781b      	ldrb	r3, [r3, #0]
    9af6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9af8:	7aba      	ldrb	r2, [r7, #10]
    9afa:	7a7b      	ldrb	r3, [r7, #9]
    9afc:	4013      	ands	r3, r2
    9afe:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9b00:	7abb      	ldrb	r3, [r7, #10]
    9b02:	2b00      	cmp	r3, #0
    9b04:	d027      	beq.n	9b56 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9b06:	683b      	ldr	r3, [r7, #0]
    9b08:	7cdb      	ldrb	r3, [r3, #19]
    9b0a:	f003 0307 	and.w	r3, r3, #7
    9b0e:	b2db      	uxtb	r3, r3
    9b10:	2b01      	cmp	r3, #1
    9b12:	d10c      	bne.n	9b2e <_usb_d_dev_handle_eps+0x7e>
    9b14:	683b      	ldr	r3, [r7, #0]
    9b16:	7cdb      	ldrb	r3, [r3, #19]
    9b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b1c:	b2db      	uxtb	r3, r3
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d105      	bne.n	9b2e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9b22:	7abb      	ldrb	r3, [r7, #10]
    9b24:	4619      	mov	r1, r3
    9b26:	6838      	ldr	r0, [r7, #0]
    9b28:	4b0c      	ldr	r3, [pc, #48]	; (9b5c <_usb_d_dev_handle_eps+0xac>)
    9b2a:	4798      	blx	r3
    9b2c:	e013      	b.n	9b56 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9b2e:	683b      	ldr	r3, [r7, #0]
    9b30:	7cdb      	ldrb	r3, [r3, #19]
    9b32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9b36:	b2db      	uxtb	r3, r3
    9b38:	2b00      	cmp	r3, #0
    9b3a:	d005      	beq.n	9b48 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9b3c:	7abb      	ldrb	r3, [r7, #10]
    9b3e:	4619      	mov	r1, r3
    9b40:	6838      	ldr	r0, [r7, #0]
    9b42:	4b07      	ldr	r3, [pc, #28]	; (9b60 <_usb_d_dev_handle_eps+0xb0>)
    9b44:	4798      	blx	r3
    9b46:	e006      	b.n	9b56 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9b48:	7abb      	ldrb	r3, [r7, #10]
    9b4a:	4619      	mov	r1, r3
    9b4c:	6838      	ldr	r0, [r7, #0]
    9b4e:	4b05      	ldr	r3, [pc, #20]	; (9b64 <_usb_d_dev_handle_eps+0xb4>)
    9b50:	4798      	blx	r3
    9b52:	e000      	b.n	9b56 <_usb_d_dev_handle_eps+0xa6>
		return;
    9b54:	bf00      	nop
		}
	}
}
    9b56:	3710      	adds	r7, #16
    9b58:	46bd      	mov	sp, r7
    9b5a:	bd80      	pop	{r7, pc}
    9b5c:	00009935 	.word	0x00009935
    9b60:	00009989 	.word	0x00009989
    9b64:	00009a1d 	.word	0x00009a1d

00009b68 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9b68:	b580      	push	{r7, lr}
    9b6a:	b084      	sub	sp, #16
    9b6c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9b6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b72:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9b74:	68bb      	ldr	r3, [r7, #8]
    9b76:	8c1b      	ldrh	r3, [r3, #32]
    9b78:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9b7a:	88fb      	ldrh	r3, [r7, #6]
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d104      	bne.n	9b8a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9b80:	4b13      	ldr	r3, [pc, #76]	; (9bd0 <_usb_d_dev_handler+0x68>)
    9b82:	4798      	blx	r3
    9b84:	4603      	mov	r3, r0
    9b86:	2b00      	cmp	r3, #0
    9b88:	d11e      	bne.n	9bc8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9b8a:	2300      	movs	r3, #0
    9b8c:	73fb      	strb	r3, [r7, #15]
    9b8e:	e017      	b.n	9bc0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9b90:	7bfa      	ldrb	r2, [r7, #15]
    9b92:	4613      	mov	r3, r2
    9b94:	009b      	lsls	r3, r3, #2
    9b96:	4413      	add	r3, r2
    9b98:	009b      	lsls	r3, r3, #2
    9b9a:	3310      	adds	r3, #16
    9b9c:	4a0d      	ldr	r2, [pc, #52]	; (9bd4 <_usb_d_dev_handler+0x6c>)
    9b9e:	4413      	add	r3, r2
    9ba0:	3304      	adds	r3, #4
    9ba2:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9ba4:	683b      	ldr	r3, [r7, #0]
    9ba6:	7c9b      	ldrb	r3, [r3, #18]
    9ba8:	2bff      	cmp	r3, #255	; 0xff
    9baa:	d005      	beq.n	9bb8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9bac:	88fb      	ldrh	r3, [r7, #6]
    9bae:	6839      	ldr	r1, [r7, #0]
    9bb0:	4618      	mov	r0, r3
    9bb2:	4b09      	ldr	r3, [pc, #36]	; (9bd8 <_usb_d_dev_handler+0x70>)
    9bb4:	4798      	blx	r3
    9bb6:	e000      	b.n	9bba <_usb_d_dev_handler+0x52>
			continue;
    9bb8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9bba:	7bfb      	ldrb	r3, [r7, #15]
    9bbc:	3301      	adds	r3, #1
    9bbe:	73fb      	strb	r3, [r7, #15]
    9bc0:	7bfb      	ldrb	r3, [r7, #15]
    9bc2:	2b08      	cmp	r3, #8
    9bc4:	d9e4      	bls.n	9b90 <_usb_d_dev_handler+0x28>
    9bc6:	e000      	b.n	9bca <_usb_d_dev_handler+0x62>
			return;
    9bc8:	bf00      	nop
	}
}
    9bca:	3710      	adds	r7, #16
    9bcc:	46bd      	mov	sp, r7
    9bce:	bd80      	pop	{r7, pc}
    9bd0:	000090c1 	.word	0x000090c1
    9bd4:	20000e64 	.word	0x20000e64
    9bd8:	00009ab1 	.word	0x00009ab1

00009bdc <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9bdc:	b580      	push	{r7, lr}
    9bde:	b082      	sub	sp, #8
    9be0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9be2:	2300      	movs	r3, #0
    9be4:	71fb      	strb	r3, [r7, #7]
    9be6:	e023      	b.n	9c30 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9be8:	79fa      	ldrb	r2, [r7, #7]
    9bea:	4613      	mov	r3, r2
    9bec:	009b      	lsls	r3, r3, #2
    9bee:	4413      	add	r3, r2
    9bf0:	009b      	lsls	r3, r3, #2
    9bf2:	3310      	adds	r3, #16
    9bf4:	4a14      	ldr	r2, [pc, #80]	; (9c48 <_usb_d_dev_reset_epts+0x6c>)
    9bf6:	4413      	add	r3, r2
    9bf8:	3304      	adds	r3, #4
    9bfa:	2103      	movs	r1, #3
    9bfc:	4618      	mov	r0, r3
    9bfe:	4b13      	ldr	r3, [pc, #76]	; (9c4c <_usb_d_dev_reset_epts+0x70>)
    9c00:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9c02:	79fa      	ldrb	r2, [r7, #7]
    9c04:	4910      	ldr	r1, [pc, #64]	; (9c48 <_usb_d_dev_reset_epts+0x6c>)
    9c06:	4613      	mov	r3, r2
    9c08:	009b      	lsls	r3, r3, #2
    9c0a:	4413      	add	r3, r2
    9c0c:	009b      	lsls	r3, r3, #2
    9c0e:	440b      	add	r3, r1
    9c10:	3326      	adds	r3, #38	; 0x26
    9c12:	22ff      	movs	r2, #255	; 0xff
    9c14:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9c16:	79fa      	ldrb	r2, [r7, #7]
    9c18:	490b      	ldr	r1, [pc, #44]	; (9c48 <_usb_d_dev_reset_epts+0x6c>)
    9c1a:	4613      	mov	r3, r2
    9c1c:	009b      	lsls	r3, r3, #2
    9c1e:	4413      	add	r3, r2
    9c20:	009b      	lsls	r3, r3, #2
    9c22:	440b      	add	r3, r1
    9c24:	3327      	adds	r3, #39	; 0x27
    9c26:	2200      	movs	r2, #0
    9c28:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9c2a:	79fb      	ldrb	r3, [r7, #7]
    9c2c:	3301      	adds	r3, #1
    9c2e:	71fb      	strb	r3, [r7, #7]
    9c30:	79fb      	ldrb	r3, [r7, #7]
    9c32:	2b08      	cmp	r3, #8
    9c34:	d9d8      	bls.n	9be8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9c36:	22a0      	movs	r2, #160	; 0xa0
    9c38:	2100      	movs	r1, #0
    9c3a:	4805      	ldr	r0, [pc, #20]	; (9c50 <_usb_d_dev_reset_epts+0x74>)
    9c3c:	4b05      	ldr	r3, [pc, #20]	; (9c54 <_usb_d_dev_reset_epts+0x78>)
    9c3e:	4798      	blx	r3
}
    9c40:	bf00      	nop
    9c42:	3708      	adds	r7, #8
    9c44:	46bd      	mov	sp, r7
    9c46:	bd80      	pop	{r7, pc}
    9c48:	20000e64 	.word	0x20000e64
    9c4c:	0000a4a1 	.word	0x0000a4a1
    9c50:	20000f2c 	.word	0x20000f2c
    9c54:	00010309 	.word	0x00010309

00009c58 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9c58:	b580      	push	{r7, lr}
    9c5a:	b084      	sub	sp, #16
    9c5c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9c5e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c62:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9c64:	2301      	movs	r3, #1
    9c66:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9c68:	2304      	movs	r3, #4
    9c6a:	713b      	strb	r3, [r7, #4]
    9c6c:	2300      	movs	r3, #0
    9c6e:	717b      	strb	r3, [r7, #5]
    9c70:	2300      	movs	r3, #0
    9c72:	71bb      	strb	r3, [r7, #6]
    9c74:	2300      	movs	r3, #0
    9c76:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9c78:	2101      	movs	r1, #1
    9c7a:	68f8      	ldr	r0, [r7, #12]
    9c7c:	4b26      	ldr	r3, [pc, #152]	; (9d18 <_usb_d_dev_init+0xc0>)
    9c7e:	4798      	blx	r3
    9c80:	4603      	mov	r3, r0
    9c82:	f083 0301 	eor.w	r3, r3, #1
    9c86:	b2db      	uxtb	r3, r3
    9c88:	2b00      	cmp	r3, #0
    9c8a:	d011      	beq.n	9cb0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9c8c:	2102      	movs	r1, #2
    9c8e:	68f8      	ldr	r0, [r7, #12]
    9c90:	4b22      	ldr	r3, [pc, #136]	; (9d1c <_usb_d_dev_init+0xc4>)
    9c92:	4798      	blx	r3
    9c94:	4603      	mov	r3, r0
    9c96:	2b00      	cmp	r3, #0
    9c98:	d006      	beq.n	9ca8 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9c9a:	68f8      	ldr	r0, [r7, #12]
    9c9c:	4b20      	ldr	r3, [pc, #128]	; (9d20 <_usb_d_dev_init+0xc8>)
    9c9e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9ca0:	2102      	movs	r1, #2
    9ca2:	68f8      	ldr	r0, [r7, #12]
    9ca4:	4b1f      	ldr	r3, [pc, #124]	; (9d24 <_usb_d_dev_init+0xcc>)
    9ca6:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9ca8:	2101      	movs	r1, #1
    9caa:	68f8      	ldr	r0, [r7, #12]
    9cac:	4b1e      	ldr	r3, [pc, #120]	; (9d28 <_usb_d_dev_init+0xd0>)
    9cae:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9cb0:	2101      	movs	r1, #1
    9cb2:	68f8      	ldr	r0, [r7, #12]
    9cb4:	4b1b      	ldr	r3, [pc, #108]	; (9d24 <_usb_d_dev_init+0xcc>)
    9cb6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9cb8:	4b1c      	ldr	r3, [pc, #112]	; (9d2c <_usb_d_dev_init+0xd4>)
    9cba:	4a1d      	ldr	r2, [pc, #116]	; (9d30 <_usb_d_dev_init+0xd8>)
    9cbc:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9cbe:	4b1b      	ldr	r3, [pc, #108]	; (9d2c <_usb_d_dev_init+0xd4>)
    9cc0:	4a1b      	ldr	r2, [pc, #108]	; (9d30 <_usb_d_dev_init+0xd8>)
    9cc2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9cc4:	4b19      	ldr	r3, [pc, #100]	; (9d2c <_usb_d_dev_init+0xd4>)
    9cc6:	4a1a      	ldr	r2, [pc, #104]	; (9d30 <_usb_d_dev_init+0xd8>)
    9cc8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9cca:	4b18      	ldr	r3, [pc, #96]	; (9d2c <_usb_d_dev_init+0xd4>)
    9ccc:	4a18      	ldr	r2, [pc, #96]	; (9d30 <_usb_d_dev_init+0xd8>)
    9cce:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9cd0:	4b16      	ldr	r3, [pc, #88]	; (9d2c <_usb_d_dev_init+0xd4>)
    9cd2:	4a17      	ldr	r2, [pc, #92]	; (9d30 <_usb_d_dev_init+0xd8>)
    9cd4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9cd6:	4b17      	ldr	r3, [pc, #92]	; (9d34 <_usb_d_dev_init+0xdc>)
    9cd8:	4798      	blx	r3

	_usb_load_calib();
    9cda:	4b17      	ldr	r3, [pc, #92]	; (9d38 <_usb_d_dev_init+0xe0>)
    9cdc:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9cde:	2104      	movs	r1, #4
    9ce0:	68f8      	ldr	r0, [r7, #12]
    9ce2:	4b11      	ldr	r3, [pc, #68]	; (9d28 <_usb_d_dev_init+0xd0>)
    9ce4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9ce6:	4b15      	ldr	r3, [pc, #84]	; (9d3c <_usb_d_dev_init+0xe4>)
    9ce8:	4619      	mov	r1, r3
    9cea:	68f8      	ldr	r0, [r7, #12]
    9cec:	4b14      	ldr	r3, [pc, #80]	; (9d40 <_usb_d_dev_init+0xe8>)
    9cee:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9cf0:	7afb      	ldrb	r3, [r7, #11]
    9cf2:	f107 0210 	add.w	r2, r7, #16
    9cf6:	4413      	add	r3, r2
    9cf8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9cfc:	f043 0301 	orr.w	r3, r3, #1
    9d00:	b2db      	uxtb	r3, r3
    9d02:	b29b      	uxth	r3, r3
    9d04:	4619      	mov	r1, r3
    9d06:	68f8      	ldr	r0, [r7, #12]
    9d08:	4b0e      	ldr	r3, [pc, #56]	; (9d44 <_usb_d_dev_init+0xec>)
    9d0a:	4798      	blx	r3

	return ERR_NONE;
    9d0c:	2300      	movs	r3, #0
}
    9d0e:	4618      	mov	r0, r3
    9d10:	3710      	adds	r7, #16
    9d12:	46bd      	mov	sp, r7
    9d14:	bd80      	pop	{r7, pc}
    9d16:	bf00      	nop
    9d18:	000082f1 	.word	0x000082f1
    9d1c:	00008641 	.word	0x00008641
    9d20:	00008615 	.word	0x00008615
    9d24:	000082c7 	.word	0x000082c7
    9d28:	00008671 	.word	0x00008671
    9d2c:	20000e64 	.word	0x20000e64
    9d30:	00008739 	.word	0x00008739
    9d34:	00009bdd 	.word	0x00009bdd
    9d38:	00008751 	.word	0x00008751
    9d3c:	20000f2c 	.word	0x20000f2c
    9d40:	0000871d 	.word	0x0000871d
    9d44:	000086e1 	.word	0x000086e1

00009d48 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9d48:	b580      	push	{r7, lr}
    9d4a:	b082      	sub	sp, #8
    9d4c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9d4e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d52:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9d54:	2103      	movs	r1, #3
    9d56:	6878      	ldr	r0, [r7, #4]
    9d58:	4b17      	ldr	r3, [pc, #92]	; (9db8 <_usb_d_dev_enable+0x70>)
    9d5a:	4798      	blx	r3
    9d5c:	4603      	mov	r3, r0
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d002      	beq.n	9d68 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9d62:	f06f 0310 	mvn.w	r3, #16
    9d66:	e023      	b.n	9db0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9d68:	6878      	ldr	r0, [r7, #4]
    9d6a:	4b14      	ldr	r3, [pc, #80]	; (9dbc <_usb_d_dev_enable+0x74>)
    9d6c:	4798      	blx	r3
    9d6e:	4603      	mov	r3, r0
    9d70:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9d72:	78fb      	ldrb	r3, [r7, #3]
    9d74:	f003 0302 	and.w	r3, r3, #2
    9d78:	2b00      	cmp	r3, #0
    9d7a:	d107      	bne.n	9d8c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9d7c:	78fb      	ldrb	r3, [r7, #3]
    9d7e:	f043 0302 	orr.w	r3, r3, #2
    9d82:	b2db      	uxtb	r3, r3
    9d84:	4619      	mov	r1, r3
    9d86:	6878      	ldr	r0, [r7, #4]
    9d88:	4b0d      	ldr	r3, [pc, #52]	; (9dc0 <_usb_d_dev_enable+0x78>)
    9d8a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9d8c:	2050      	movs	r0, #80	; 0x50
    9d8e:	4b0d      	ldr	r3, [pc, #52]	; (9dc4 <_usb_d_dev_enable+0x7c>)
    9d90:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9d92:	2051      	movs	r0, #81	; 0x51
    9d94:	4b0b      	ldr	r3, [pc, #44]	; (9dc4 <_usb_d_dev_enable+0x7c>)
    9d96:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9d98:	2052      	movs	r0, #82	; 0x52
    9d9a:	4b0a      	ldr	r3, [pc, #40]	; (9dc4 <_usb_d_dev_enable+0x7c>)
    9d9c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9d9e:	2053      	movs	r0, #83	; 0x53
    9da0:	4b08      	ldr	r3, [pc, #32]	; (9dc4 <_usb_d_dev_enable+0x7c>)
    9da2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9da4:	f240 218d 	movw	r1, #653	; 0x28d
    9da8:	6878      	ldr	r0, [r7, #4]
    9daa:	4b07      	ldr	r3, [pc, #28]	; (9dc8 <_usb_d_dev_enable+0x80>)
    9dac:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9dae:	2300      	movs	r3, #0
}
    9db0:	4618      	mov	r0, r3
    9db2:	3708      	adds	r7, #8
    9db4:	46bd      	mov	sp, r7
    9db6:	bd80      	pop	{r7, pc}
    9db8:	000085eb 	.word	0x000085eb
    9dbc:	00008699 	.word	0x00008699
    9dc0:	00008671 	.word	0x00008671
    9dc4:	000081fd 	.word	0x000081fd
    9dc8:	00008595 	.word	0x00008595

00009dcc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9dcc:	b580      	push	{r7, lr}
    9dce:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9dd0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dd4:	4b01      	ldr	r3, [pc, #4]	; (9ddc <_usb_d_dev_attach+0x10>)
    9dd6:	4798      	blx	r3
}
    9dd8:	bf00      	nop
    9dda:	bd80      	pop	{r7, pc}
    9ddc:	000086bd 	.word	0x000086bd

00009de0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9de0:	b580      	push	{r7, lr}
    9de2:	b082      	sub	sp, #8
    9de4:	af00      	add	r7, sp, #0
    9de6:	4603      	mov	r3, r0
    9de8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9dea:	79fb      	ldrb	r3, [r7, #7]
    9dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9df0:	b2db      	uxtb	r3, r3
    9df2:	4619      	mov	r1, r3
    9df4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9df8:	4b02      	ldr	r3, [pc, #8]	; (9e04 <_usb_d_dev_set_address+0x24>)
    9dfa:	4798      	blx	r3
}
    9dfc:	bf00      	nop
    9dfe:	3708      	adds	r7, #8
    9e00:	46bd      	mov	sp, r7
    9e02:	bd80      	pop	{r7, pc}
    9e04:	000086ff 	.word	0x000086ff

00009e08 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9e08:	b590      	push	{r4, r7, lr}
    9e0a:	b085      	sub	sp, #20
    9e0c:	af00      	add	r7, sp, #0
    9e0e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9e10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e14:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9e16:	687b      	ldr	r3, [r7, #4]
    9e18:	7c9b      	ldrb	r3, [r3, #18]
    9e1a:	f003 030f 	and.w	r3, r3, #15
    9e1e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9e20:	687b      	ldr	r3, [r7, #4]
    9e22:	68db      	ldr	r3, [r3, #12]
    9e24:	461a      	mov	r2, r3
    9e26:	7afb      	ldrb	r3, [r7, #11]
    9e28:	2100      	movs	r1, #0
    9e2a:	4618      	mov	r0, r3
    9e2c:	4b0f      	ldr	r3, [pc, #60]	; (9e6c <_usb_d_dev_trans_setup+0x64>)
    9e2e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9e30:	687b      	ldr	r3, [r7, #4]
    9e32:	8a1b      	ldrh	r3, [r3, #16]
    9e34:	461a      	mov	r2, r3
    9e36:	7af8      	ldrb	r0, [r7, #11]
    9e38:	2300      	movs	r3, #0
    9e3a:	2100      	movs	r1, #0
    9e3c:	4c0c      	ldr	r4, [pc, #48]	; (9e70 <_usb_d_dev_trans_setup+0x68>)
    9e3e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9e40:	7afb      	ldrb	r3, [r7, #11]
    9e42:	22b0      	movs	r2, #176	; 0xb0
    9e44:	4619      	mov	r1, r3
    9e46:	68f8      	ldr	r0, [r7, #12]
    9e48:	4b0a      	ldr	r3, [pc, #40]	; (9e74 <_usb_d_dev_trans_setup+0x6c>)
    9e4a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9e4c:	7afb      	ldrb	r3, [r7, #11]
    9e4e:	2200      	movs	r2, #0
    9e50:	2100      	movs	r1, #0
    9e52:	4618      	mov	r0, r3
    9e54:	4b08      	ldr	r3, [pc, #32]	; (9e78 <_usb_d_dev_trans_setup+0x70>)
    9e56:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9e58:	7afb      	ldrb	r3, [r7, #11]
    9e5a:	2210      	movs	r2, #16
    9e5c:	4619      	mov	r1, r3
    9e5e:	68f8      	ldr	r0, [r7, #12]
    9e60:	4b06      	ldr	r3, [pc, #24]	; (9e7c <_usb_d_dev_trans_setup+0x74>)
    9e62:	4798      	blx	r3
}
    9e64:	bf00      	nop
    9e66:	3714      	adds	r7, #20
    9e68:	46bd      	mov	sp, r7
    9e6a:	bd90      	pop	{r4, r7, pc}
    9e6c:	00008b9d 	.word	0x00008b9d
    9e70:	00008d25 	.word	0x00008d25
    9e74:	000083fd 	.word	0x000083fd
    9e78:	00008df5 	.word	0x00008df5
    9e7c:	00008451 	.word	0x00008451

00009e80 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9e80:	b580      	push	{r7, lr}
    9e82:	b088      	sub	sp, #32
    9e84:	af00      	add	r7, sp, #0
    9e86:	4603      	mov	r3, r0
    9e88:	71fb      	strb	r3, [r7, #7]
    9e8a:	460b      	mov	r3, r1
    9e8c:	71bb      	strb	r3, [r7, #6]
    9e8e:	4613      	mov	r3, r2
    9e90:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9e92:	79fb      	ldrb	r3, [r7, #7]
    9e94:	f003 030f 	and.w	r3, r3, #15
    9e98:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9e9a:	79fb      	ldrb	r3, [r7, #7]
    9e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	bf14      	ite	ne
    9ea4:	2301      	movne	r3, #1
    9ea6:	2300      	moveq	r3, #0
    9ea8:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9eaa:	7fba      	ldrb	r2, [r7, #30]
    9eac:	7ffb      	ldrb	r3, [r7, #31]
    9eae:	4611      	mov	r1, r2
    9eb0:	4618      	mov	r0, r3
    9eb2:	4b3e      	ldr	r3, [pc, #248]	; (9fac <_usb_d_dev_ep_init+0x12c>)
    9eb4:	4798      	blx	r3
    9eb6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9eb8:	79bb      	ldrb	r3, [r7, #6]
    9eba:	f003 0303 	and.w	r3, r3, #3
    9ebe:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9ec0:	7ffa      	ldrb	r2, [r7, #31]
    9ec2:	4613      	mov	r3, r2
    9ec4:	005b      	lsls	r3, r3, #1
    9ec6:	4413      	add	r3, r2
    9ec8:	009b      	lsls	r3, r3, #2
    9eca:	4a39      	ldr	r2, [pc, #228]	; (9fb0 <_usb_d_dev_ep_init+0x130>)
    9ecc:	4413      	add	r3, r2
    9ece:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9ed0:	7ffb      	ldrb	r3, [r7, #31]
    9ed2:	2b04      	cmp	r3, #4
    9ed4:	d902      	bls.n	9edc <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9ed6:	f06f 0311 	mvn.w	r3, #17
    9eda:	e063      	b.n	9fa4 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9edc:	69bb      	ldr	r3, [r7, #24]
    9ede:	7c9b      	ldrb	r3, [r3, #18]
    9ee0:	2bff      	cmp	r3, #255	; 0xff
    9ee2:	d002      	beq.n	9eea <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9ee4:	f06f 0313 	mvn.w	r3, #19
    9ee8:	e05c      	b.n	9fa4 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9eea:	7dfb      	ldrb	r3, [r7, #23]
    9eec:	2b00      	cmp	r3, #0
    9eee:	d11f      	bne.n	9f30 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9ef0:	7fbb      	ldrb	r3, [r7, #30]
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	bf14      	ite	ne
    9ef6:	2301      	movne	r3, #1
    9ef8:	2300      	moveq	r3, #0
    9efa:	b2db      	uxtb	r3, r3
    9efc:	f083 0301 	eor.w	r3, r3, #1
    9f00:	b2db      	uxtb	r3, r3
    9f02:	f003 0301 	and.w	r3, r3, #1
    9f06:	b2da      	uxtb	r2, r3
    9f08:	7ffb      	ldrb	r3, [r7, #31]
    9f0a:	4611      	mov	r1, r2
    9f0c:	4618      	mov	r0, r3
    9f0e:	4b27      	ldr	r3, [pc, #156]	; (9fac <_usb_d_dev_ep_init+0x12c>)
    9f10:	4798      	blx	r3
    9f12:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9f14:	68fb      	ldr	r3, [r7, #12]
    9f16:	7c9b      	ldrb	r3, [r3, #18]
    9f18:	2bff      	cmp	r3, #255	; 0xff
    9f1a:	d002      	beq.n	9f22 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9f1c:	f06f 0313 	mvn.w	r3, #19
    9f20:	e040      	b.n	9fa4 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9f22:	693b      	ldr	r3, [r7, #16]
    9f24:	681b      	ldr	r3, [r3, #0]
    9f26:	2b00      	cmp	r3, #0
    9f28:	d102      	bne.n	9f30 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9f2a:	f06f 0312 	mvn.w	r3, #18
    9f2e:	e039      	b.n	9fa4 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9f30:	7fbb      	ldrb	r3, [r7, #30]
    9f32:	2b00      	cmp	r3, #0
    9f34:	d007      	beq.n	9f46 <_usb_d_dev_ep_init+0xc6>
    9f36:	693b      	ldr	r3, [r7, #16]
    9f38:	685b      	ldr	r3, [r3, #4]
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	bf14      	ite	ne
    9f3e:	2301      	movne	r3, #1
    9f40:	2300      	moveq	r3, #0
    9f42:	b2db      	uxtb	r3, r3
    9f44:	e006      	b.n	9f54 <_usb_d_dev_ep_init+0xd4>
    9f46:	693b      	ldr	r3, [r7, #16]
    9f48:	681b      	ldr	r3, [r3, #0]
    9f4a:	2b00      	cmp	r3, #0
    9f4c:	bf14      	ite	ne
    9f4e:	2301      	movne	r3, #1
    9f50:	2300      	moveq	r3, #0
    9f52:	b2db      	uxtb	r3, r3
    9f54:	2b00      	cmp	r3, #0
    9f56:	d00f      	beq.n	9f78 <_usb_d_dev_ep_init+0xf8>
    9f58:	7fbb      	ldrb	r3, [r7, #30]
    9f5a:	2b00      	cmp	r3, #0
    9f5c:	d003      	beq.n	9f66 <_usb_d_dev_ep_init+0xe6>
    9f5e:	693b      	ldr	r3, [r7, #16]
    9f60:	895b      	ldrh	r3, [r3, #10]
    9f62:	461a      	mov	r2, r3
    9f64:	e002      	b.n	9f6c <_usb_d_dev_ep_init+0xec>
    9f66:	693b      	ldr	r3, [r7, #16]
    9f68:	891b      	ldrh	r3, [r3, #8]
    9f6a:	461a      	mov	r2, r3
    9f6c:	88bb      	ldrh	r3, [r7, #4]
    9f6e:	429a      	cmp	r2, r3
    9f70:	da02      	bge.n	9f78 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9f72:	f06f 0312 	mvn.w	r3, #18
    9f76:	e015      	b.n	9fa4 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9f78:	7fbb      	ldrb	r3, [r7, #30]
    9f7a:	2b00      	cmp	r3, #0
    9f7c:	d002      	beq.n	9f84 <_usb_d_dev_ep_init+0x104>
    9f7e:	693b      	ldr	r3, [r7, #16]
    9f80:	685b      	ldr	r3, [r3, #4]
    9f82:	e001      	b.n	9f88 <_usb_d_dev_ep_init+0x108>
    9f84:	693b      	ldr	r3, [r7, #16]
    9f86:	681b      	ldr	r3, [r3, #0]
    9f88:	69ba      	ldr	r2, [r7, #24]
    9f8a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    9f8c:	69bb      	ldr	r3, [r7, #24]
    9f8e:	88ba      	ldrh	r2, [r7, #4]
    9f90:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9f92:	7dfb      	ldrb	r3, [r7, #23]
    9f94:	3301      	adds	r3, #1
    9f96:	b2da      	uxtb	r2, r3
    9f98:	69bb      	ldr	r3, [r7, #24]
    9f9a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    9f9c:	69bb      	ldr	r3, [r7, #24]
    9f9e:	79fa      	ldrb	r2, [r7, #7]
    9fa0:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9fa2:	2300      	movs	r3, #0
}
    9fa4:	4618      	mov	r0, r3
    9fa6:	3720      	adds	r7, #32
    9fa8:	46bd      	mov	sp, r7
    9faa:	bd80      	pop	{r7, pc}
    9fac:	00008eb1 	.word	0x00008eb1
    9fb0:	00010a50 	.word	0x00010a50

00009fb4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9fb4:	b580      	push	{r7, lr}
    9fb6:	b086      	sub	sp, #24
    9fb8:	af00      	add	r7, sp, #0
    9fba:	4603      	mov	r3, r0
    9fbc:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    9fbe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fc2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    9fc4:	79fb      	ldrb	r3, [r7, #7]
    9fc6:	f003 030f 	and.w	r3, r3, #15
    9fca:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9fcc:	79fb      	ldrb	r3, [r7, #7]
    9fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	bf14      	ite	ne
    9fd6:	2301      	movne	r3, #1
    9fd8:	2300      	moveq	r3, #0
    9fda:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9fdc:	7cba      	ldrb	r2, [r7, #18]
    9fde:	7cfb      	ldrb	r3, [r7, #19]
    9fe0:	4611      	mov	r1, r2
    9fe2:	4618      	mov	r0, r3
    9fe4:	4b2a      	ldr	r3, [pc, #168]	; (a090 <_usb_d_dev_ep_deinit+0xdc>)
    9fe6:	4798      	blx	r3
    9fe8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9fea:	7cfb      	ldrb	r3, [r7, #19]
    9fec:	2b04      	cmp	r3, #4
    9fee:	d84a      	bhi.n	a086 <_usb_d_dev_ep_deinit+0xd2>
    9ff0:	68fb      	ldr	r3, [r7, #12]
    9ff2:	7c9b      	ldrb	r3, [r3, #18]
    9ff4:	2bff      	cmp	r3, #255	; 0xff
    9ff6:	d046      	beq.n	a086 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9ff8:	7cbb      	ldrb	r3, [r7, #18]
    9ffa:	2203      	movs	r2, #3
    9ffc:	4619      	mov	r1, r3
    9ffe:	68f8      	ldr	r0, [r7, #12]
    a000:	4b24      	ldr	r3, [pc, #144]	; (a094 <_usb_d_dev_ep_deinit+0xe0>)
    a002:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a004:	68fb      	ldr	r3, [r7, #12]
    a006:	7cdb      	ldrb	r3, [r3, #19]
    a008:	f003 0307 	and.w	r3, r3, #7
    a00c:	b2db      	uxtb	r3, r3
    a00e:	2b01      	cmp	r3, #1
    a010:	d107      	bne.n	a022 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a012:	79fb      	ldrb	r3, [r7, #7]
    a014:	697a      	ldr	r2, [r7, #20]
    a016:	3308      	adds	r3, #8
    a018:	015b      	lsls	r3, r3, #5
    a01a:	4413      	add	r3, r2
    a01c:	2200      	movs	r2, #0
    a01e:	701a      	strb	r2, [r3, #0]
    a020:	e02a      	b.n	a078 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a022:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a026:	2b00      	cmp	r3, #0
    a028:	da15      	bge.n	a056 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a02a:	79fb      	ldrb	r3, [r7, #7]
    a02c:	f003 030f 	and.w	r3, r3, #15
    a030:	79fa      	ldrb	r2, [r7, #7]
    a032:	f002 020f 	and.w	r2, r2, #15
    a036:	6979      	ldr	r1, [r7, #20]
    a038:	3208      	adds	r2, #8
    a03a:	0152      	lsls	r2, r2, #5
    a03c:	440a      	add	r2, r1
    a03e:	7812      	ldrb	r2, [r2, #0]
    a040:	b2d2      	uxtb	r2, r2
    a042:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a046:	b2d1      	uxtb	r1, r2
    a048:	697a      	ldr	r2, [r7, #20]
    a04a:	3308      	adds	r3, #8
    a04c:	015b      	lsls	r3, r3, #5
    a04e:	4413      	add	r3, r2
    a050:	460a      	mov	r2, r1
    a052:	701a      	strb	r2, [r3, #0]
    a054:	e010      	b.n	a078 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a056:	79fb      	ldrb	r3, [r7, #7]
    a058:	79fa      	ldrb	r2, [r7, #7]
    a05a:	6979      	ldr	r1, [r7, #20]
    a05c:	3208      	adds	r2, #8
    a05e:	0152      	lsls	r2, r2, #5
    a060:	440a      	add	r2, r1
    a062:	7812      	ldrb	r2, [r2, #0]
    a064:	b2d2      	uxtb	r2, r2
    a066:	f022 0207 	bic.w	r2, r2, #7
    a06a:	b2d1      	uxtb	r1, r2
    a06c:	697a      	ldr	r2, [r7, #20]
    a06e:	3308      	adds	r3, #8
    a070:	015b      	lsls	r3, r3, #5
    a072:	4413      	add	r3, r2
    a074:	460a      	mov	r2, r1
    a076:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a078:	68fb      	ldr	r3, [r7, #12]
    a07a:	2200      	movs	r2, #0
    a07c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a07e:	68fb      	ldr	r3, [r7, #12]
    a080:	22ff      	movs	r2, #255	; 0xff
    a082:	749a      	strb	r2, [r3, #18]
    a084:	e000      	b.n	a088 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a086:	bf00      	nop
}
    a088:	3718      	adds	r7, #24
    a08a:	46bd      	mov	sp, r7
    a08c:	bd80      	pop	{r7, pc}
    a08e:	bf00      	nop
    a090:	00008eb1 	.word	0x00008eb1
    a094:	0000a4e9 	.word	0x0000a4e9

0000a098 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a098:	b5b0      	push	{r4, r5, r7, lr}
    a09a:	b088      	sub	sp, #32
    a09c:	af00      	add	r7, sp, #0
    a09e:	4603      	mov	r3, r0
    a0a0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a0a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a0a6:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a0a8:	79fb      	ldrb	r3, [r7, #7]
    a0aa:	f003 030f 	and.w	r3, r3, #15
    a0ae:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a0b0:	79fb      	ldrb	r3, [r7, #7]
    a0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	bf14      	ite	ne
    a0ba:	2301      	movne	r3, #1
    a0bc:	2300      	moveq	r3, #0
    a0be:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a0c0:	7eba      	ldrb	r2, [r7, #26]
    a0c2:	7efb      	ldrb	r3, [r7, #27]
    a0c4:	4611      	mov	r1, r2
    a0c6:	4618      	mov	r0, r3
    a0c8:	4b70      	ldr	r3, [pc, #448]	; (a28c <_usb_d_dev_ep_enable+0x1f4>)
    a0ca:	4798      	blx	r3
    a0cc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a0ce:	7efb      	ldrb	r3, [r7, #27]
    a0d0:	4619      	mov	r1, r3
    a0d2:	69f8      	ldr	r0, [r7, #28]
    a0d4:	4b6e      	ldr	r3, [pc, #440]	; (a290 <_usb_d_dev_ep_enable+0x1f8>)
    a0d6:	4798      	blx	r3
    a0d8:	4603      	mov	r3, r0
    a0da:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a0dc:	7efb      	ldrb	r3, [r7, #27]
    a0de:	2b04      	cmp	r3, #4
    a0e0:	d803      	bhi.n	a0ea <_usb_d_dev_ep_enable+0x52>
    a0e2:	697b      	ldr	r3, [r7, #20]
    a0e4:	7c9b      	ldrb	r3, [r3, #18]
    a0e6:	2bff      	cmp	r3, #255	; 0xff
    a0e8:	d102      	bne.n	a0f0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a0ea:	f06f 0311 	mvn.w	r3, #17
    a0ee:	e0c8      	b.n	a282 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a0f0:	7efb      	ldrb	r3, [r7, #27]
    a0f2:	015b      	lsls	r3, r3, #5
    a0f4:	4a67      	ldr	r2, [pc, #412]	; (a294 <_usb_d_dev_ep_enable+0x1fc>)
    a0f6:	4413      	add	r3, r2
    a0f8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a0fa:	697b      	ldr	r3, [r7, #20]
    a0fc:	7cdb      	ldrb	r3, [r3, #19]
    a0fe:	f003 0307 	and.w	r3, r3, #7
    a102:	b2db      	uxtb	r3, r3
    a104:	2b01      	cmp	r3, #1
    a106:	d14b      	bne.n	a1a0 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a108:	7cfb      	ldrb	r3, [r7, #19]
    a10a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a10e:	2b00      	cmp	r3, #0
    a110:	d002      	beq.n	a118 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a112:	f06f 0313 	mvn.w	r3, #19
    a116:	e0b4      	b.n	a282 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a118:	7efb      	ldrb	r3, [r7, #27]
    a11a:	2211      	movs	r2, #17
    a11c:	4619      	mov	r1, r3
    a11e:	69f8      	ldr	r0, [r7, #28]
    a120:	4b5d      	ldr	r3, [pc, #372]	; (a298 <_usb_d_dev_ep_enable+0x200>)
    a122:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a124:	697b      	ldr	r3, [r7, #20]
    a126:	8a1b      	ldrh	r3, [r3, #16]
    a128:	039b      	lsls	r3, r3, #14
    a12a:	4c5c      	ldr	r4, [pc, #368]	; (a29c <_usb_d_dev_ep_enable+0x204>)
    a12c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a12e:	697b      	ldr	r3, [r7, #20]
    a130:	8a1b      	ldrh	r3, [r3, #16]
    a132:	4618      	mov	r0, r3
    a134:	4b5a      	ldr	r3, [pc, #360]	; (a2a0 <_usb_d_dev_ep_enable+0x208>)
    a136:	4798      	blx	r3
    a138:	4603      	mov	r3, r0
    a13a:	071b      	lsls	r3, r3, #28
    a13c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a140:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a144:	68fb      	ldr	r3, [r7, #12]
    a146:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a148:	68fb      	ldr	r3, [r7, #12]
    a14a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a14e:	697b      	ldr	r3, [r7, #20]
    a150:	8a1b      	ldrh	r3, [r3, #16]
    a152:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a156:	697b      	ldr	r3, [r7, #20]
    a158:	8a1b      	ldrh	r3, [r3, #16]
    a15a:	4618      	mov	r0, r3
    a15c:	4b50      	ldr	r3, [pc, #320]	; (a2a0 <_usb_d_dev_ep_enable+0x208>)
    a15e:	4798      	blx	r3
    a160:	4603      	mov	r3, r0
    a162:	071b      	lsls	r3, r3, #28
    a164:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a168:	432b      	orrs	r3, r5
    a16a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a16c:	7efb      	ldrb	r3, [r7, #27]
    a16e:	2200      	movs	r2, #0
    a170:	2100      	movs	r1, #0
    a172:	4618      	mov	r0, r3
    a174:	4b4b      	ldr	r3, [pc, #300]	; (a2a4 <_usb_d_dev_ep_enable+0x20c>)
    a176:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a178:	7efb      	ldrb	r3, [r7, #27]
    a17a:	2200      	movs	r2, #0
    a17c:	2101      	movs	r1, #1
    a17e:	4618      	mov	r0, r3
    a180:	4b49      	ldr	r3, [pc, #292]	; (a2a8 <_usb_d_dev_ep_enable+0x210>)
    a182:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a184:	7efb      	ldrb	r3, [r7, #27]
    a186:	2100      	movs	r1, #0
    a188:	4618      	mov	r0, r3
    a18a:	4b48      	ldr	r3, [pc, #288]	; (a2ac <_usb_d_dev_ep_enable+0x214>)
    a18c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a18e:	7efb      	ldrb	r3, [r7, #27]
    a190:	2101      	movs	r1, #1
    a192:	4618      	mov	r0, r3
    a194:	4b45      	ldr	r3, [pc, #276]	; (a2ac <_usb_d_dev_ep_enable+0x214>)
    a196:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a198:	6978      	ldr	r0, [r7, #20]
    a19a:	4b45      	ldr	r3, [pc, #276]	; (a2b0 <_usb_d_dev_ep_enable+0x218>)
    a19c:	4798      	blx	r3
    a19e:	e06f      	b.n	a280 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a1a0:	7ebb      	ldrb	r3, [r7, #26]
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	d038      	beq.n	a218 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a1a6:	7cfb      	ldrb	r3, [r7, #19]
    a1a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	d002      	beq.n	a1b6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a1b0:	f06f 0313 	mvn.w	r3, #19
    a1b4:	e065      	b.n	a282 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a1b6:	697b      	ldr	r3, [r7, #20]
    a1b8:	7cdb      	ldrb	r3, [r3, #19]
    a1ba:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a1be:	b2db      	uxtb	r3, r3
    a1c0:	011b      	lsls	r3, r3, #4
    a1c2:	b2db      	uxtb	r3, r3
    a1c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a1c8:	b2da      	uxtb	r2, r3
    a1ca:	7cfb      	ldrb	r3, [r7, #19]
    a1cc:	4313      	orrs	r3, r2
    a1ce:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a1d0:	7cfa      	ldrb	r2, [r7, #19]
    a1d2:	7efb      	ldrb	r3, [r7, #27]
    a1d4:	4619      	mov	r1, r3
    a1d6:	69f8      	ldr	r0, [r7, #28]
    a1d8:	4b2f      	ldr	r3, [pc, #188]	; (a298 <_usb_d_dev_ep_enable+0x200>)
    a1da:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a1dc:	68fb      	ldr	r3, [r7, #12]
    a1de:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a1e2:	697b      	ldr	r3, [r7, #20]
    a1e4:	8a1b      	ldrh	r3, [r3, #16]
    a1e6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a1ea:	697b      	ldr	r3, [r7, #20]
    a1ec:	8a1b      	ldrh	r3, [r3, #16]
    a1ee:	4618      	mov	r0, r3
    a1f0:	4b2b      	ldr	r3, [pc, #172]	; (a2a0 <_usb_d_dev_ep_enable+0x208>)
    a1f2:	4798      	blx	r3
    a1f4:	4603      	mov	r3, r0
    a1f6:	071b      	lsls	r3, r3, #28
    a1f8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a1fc:	432b      	orrs	r3, r5
    a1fe:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a200:	7efb      	ldrb	r3, [r7, #27]
    a202:	2200      	movs	r2, #0
    a204:	2101      	movs	r1, #1
    a206:	4618      	mov	r0, r3
    a208:	4b27      	ldr	r3, [pc, #156]	; (a2a8 <_usb_d_dev_ep_enable+0x210>)
    a20a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a20c:	7efb      	ldrb	r3, [r7, #27]
    a20e:	2101      	movs	r1, #1
    a210:	4618      	mov	r0, r3
    a212:	4b26      	ldr	r3, [pc, #152]	; (a2ac <_usb_d_dev_ep_enable+0x214>)
    a214:	4798      	blx	r3
    a216:	e033      	b.n	a280 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a218:	7cfb      	ldrb	r3, [r7, #19]
    a21a:	f003 0307 	and.w	r3, r3, #7
    a21e:	2b00      	cmp	r3, #0
    a220:	d002      	beq.n	a228 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a222:	f06f 0313 	mvn.w	r3, #19
    a226:	e02c      	b.n	a282 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a228:	697b      	ldr	r3, [r7, #20]
    a22a:	7cdb      	ldrb	r3, [r3, #19]
    a22c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a230:	b2db      	uxtb	r3, r3
    a232:	461a      	mov	r2, r3
    a234:	7cfb      	ldrb	r3, [r7, #19]
    a236:	4313      	orrs	r3, r2
    a238:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a23a:	7cfa      	ldrb	r2, [r7, #19]
    a23c:	7efb      	ldrb	r3, [r7, #27]
    a23e:	4619      	mov	r1, r3
    a240:	69f8      	ldr	r0, [r7, #28]
    a242:	4b15      	ldr	r3, [pc, #84]	; (a298 <_usb_d_dev_ep_enable+0x200>)
    a244:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a246:	697b      	ldr	r3, [r7, #20]
    a248:	8a1b      	ldrh	r3, [r3, #16]
    a24a:	039b      	lsls	r3, r3, #14
    a24c:	4c13      	ldr	r4, [pc, #76]	; (a29c <_usb_d_dev_ep_enable+0x204>)
    a24e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a250:	697b      	ldr	r3, [r7, #20]
    a252:	8a1b      	ldrh	r3, [r3, #16]
    a254:	4618      	mov	r0, r3
    a256:	4b12      	ldr	r3, [pc, #72]	; (a2a0 <_usb_d_dev_ep_enable+0x208>)
    a258:	4798      	blx	r3
    a25a:	4603      	mov	r3, r0
    a25c:	071b      	lsls	r3, r3, #28
    a25e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a262:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a266:	68fb      	ldr	r3, [r7, #12]
    a268:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a26a:	7efb      	ldrb	r3, [r7, #27]
    a26c:	2200      	movs	r2, #0
    a26e:	2100      	movs	r1, #0
    a270:	4618      	mov	r0, r3
    a272:	4b0c      	ldr	r3, [pc, #48]	; (a2a4 <_usb_d_dev_ep_enable+0x20c>)
    a274:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a276:	7efb      	ldrb	r3, [r7, #27]
    a278:	2100      	movs	r1, #0
    a27a:	4618      	mov	r0, r3
    a27c:	4b0b      	ldr	r3, [pc, #44]	; (a2ac <_usb_d_dev_ep_enable+0x214>)
    a27e:	4798      	blx	r3
	}

	return USB_OK;
    a280:	2300      	movs	r3, #0
}
    a282:	4618      	mov	r0, r3
    a284:	3720      	adds	r7, #32
    a286:	46bd      	mov	sp, r7
    a288:	bdb0      	pop	{r4, r5, r7, pc}
    a28a:	bf00      	nop
    a28c:	00008eb1 	.word	0x00008eb1
    a290:	00008537 	.word	0x00008537
    a294:	20000f2c 	.word	0x20000f2c
    a298:	0000850d 	.word	0x0000850d
    a29c:	0fffc000 	.word	0x0fffc000
    a2a0:	00008e4d 	.word	0x00008e4d
    a2a4:	00008df5 	.word	0x00008df5
    a2a8:	00008d9d 	.word	0x00008d9d
    a2ac:	00008d65 	.word	0x00008d65
    a2b0:	00009e09 	.word	0x00009e09

0000a2b4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a2b4:	b580      	push	{r7, lr}
    a2b6:	b084      	sub	sp, #16
    a2b8:	af00      	add	r7, sp, #0
    a2ba:	6078      	str	r0, [r7, #4]
    a2bc:	460b      	mov	r3, r1
    a2be:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a2c0:	687b      	ldr	r3, [r7, #4]
    a2c2:	7c9b      	ldrb	r3, [r3, #18]
    a2c4:	f003 030f 	and.w	r3, r3, #15
    a2c8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a2ca:	78fa      	ldrb	r2, [r7, #3]
    a2cc:	7bfb      	ldrb	r3, [r7, #15]
    a2ce:	4611      	mov	r1, r2
    a2d0:	4618      	mov	r0, r3
    a2d2:	4b03      	ldr	r3, [pc, #12]	; (a2e0 <_usb_d_dev_ep_stall_get+0x2c>)
    a2d4:	4798      	blx	r3
    a2d6:	4603      	mov	r3, r0
}
    a2d8:	4618      	mov	r0, r3
    a2da:	3710      	adds	r7, #16
    a2dc:	46bd      	mov	sp, r7
    a2de:	bd80      	pop	{r7, pc}
    a2e0:	000089a5 	.word	0x000089a5

0000a2e4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a2e4:	b580      	push	{r7, lr}
    a2e6:	b084      	sub	sp, #16
    a2e8:	af00      	add	r7, sp, #0
    a2ea:	6078      	str	r0, [r7, #4]
    a2ec:	460b      	mov	r3, r1
    a2ee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a2f0:	687b      	ldr	r3, [r7, #4]
    a2f2:	7c9b      	ldrb	r3, [r3, #18]
    a2f4:	f003 030f 	and.w	r3, r3, #15
    a2f8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a2fa:	78f9      	ldrb	r1, [r7, #3]
    a2fc:	7bfb      	ldrb	r3, [r7, #15]
    a2fe:	2201      	movs	r2, #1
    a300:	4618      	mov	r0, r3
    a302:	4b0a      	ldr	r3, [pc, #40]	; (a32c <_usb_d_dev_ep_stall_set+0x48>)
    a304:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a306:	78fb      	ldrb	r3, [r7, #3]
    a308:	2220      	movs	r2, #32
    a30a:	409a      	lsls	r2, r3
    a30c:	7bfb      	ldrb	r3, [r7, #15]
    a30e:	4611      	mov	r1, r2
    a310:	4618      	mov	r0, r3
    a312:	4b07      	ldr	r3, [pc, #28]	; (a330 <_usb_d_dev_ep_stall_set+0x4c>)
    a314:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a316:	687a      	ldr	r2, [r7, #4]
    a318:	7cd3      	ldrb	r3, [r2, #19]
    a31a:	f043 0308 	orr.w	r3, r3, #8
    a31e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a320:	2300      	movs	r3, #0
}
    a322:	4618      	mov	r0, r3
    a324:	3710      	adds	r7, #16
    a326:	46bd      	mov	sp, r7
    a328:	bd80      	pop	{r7, pc}
    a32a:	bf00      	nop
    a32c:	0000894d 	.word	0x0000894d
    a330:	000088cd 	.word	0x000088cd

0000a334 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a334:	b580      	push	{r7, lr}
    a336:	b084      	sub	sp, #16
    a338:	af00      	add	r7, sp, #0
    a33a:	6078      	str	r0, [r7, #4]
    a33c:	460b      	mov	r3, r1
    a33e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a340:	687b      	ldr	r3, [r7, #4]
    a342:	7c9b      	ldrb	r3, [r3, #18]
    a344:	f003 030f 	and.w	r3, r3, #15
    a348:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a34a:	78fa      	ldrb	r2, [r7, #3]
    a34c:	7bfb      	ldrb	r3, [r7, #15]
    a34e:	4611      	mov	r1, r2
    a350:	4618      	mov	r0, r3
    a352:	4b28      	ldr	r3, [pc, #160]	; (a3f4 <_usb_d_dev_ep_stall_clr+0xc0>)
    a354:	4798      	blx	r3
    a356:	4603      	mov	r3, r0
    a358:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a35a:	7bbb      	ldrb	r3, [r7, #14]
    a35c:	f083 0301 	eor.w	r3, r3, #1
    a360:	b2db      	uxtb	r3, r3
    a362:	2b00      	cmp	r3, #0
    a364:	d001      	beq.n	a36a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a366:	2300      	movs	r3, #0
    a368:	e040      	b.n	a3ec <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a36a:	78f9      	ldrb	r1, [r7, #3]
    a36c:	7bfb      	ldrb	r3, [r7, #15]
    a36e:	2200      	movs	r2, #0
    a370:	4618      	mov	r0, r3
    a372:	4b21      	ldr	r3, [pc, #132]	; (a3f8 <_usb_d_dev_ep_stall_clr+0xc4>)
    a374:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a376:	78fb      	ldrb	r3, [r7, #3]
    a378:	2220      	movs	r2, #32
    a37a:	409a      	lsls	r2, r3
    a37c:	7bfb      	ldrb	r3, [r7, #15]
    a37e:	4611      	mov	r1, r2
    a380:	4618      	mov	r0, r3
    a382:	4b1e      	ldr	r3, [pc, #120]	; (a3fc <_usb_d_dev_ep_stall_clr+0xc8>)
    a384:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a386:	78fa      	ldrb	r2, [r7, #3]
    a388:	7bfb      	ldrb	r3, [r7, #15]
    a38a:	4611      	mov	r1, r2
    a38c:	4618      	mov	r0, r3
    a38e:	4b1c      	ldr	r3, [pc, #112]	; (a400 <_usb_d_dev_ep_stall_clr+0xcc>)
    a390:	4798      	blx	r3
    a392:	4603      	mov	r3, r0
    a394:	2b00      	cmp	r3, #0
    a396:	d00b      	beq.n	a3b0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a398:	78fa      	ldrb	r2, [r7, #3]
    a39a:	7bfb      	ldrb	r3, [r7, #15]
    a39c:	4611      	mov	r1, r2
    a39e:	4618      	mov	r0, r3
    a3a0:	4b18      	ldr	r3, [pc, #96]	; (a404 <_usb_d_dev_ep_stall_clr+0xd0>)
    a3a2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a3a4:	78f9      	ldrb	r1, [r7, #3]
    a3a6:	7bfb      	ldrb	r3, [r7, #15]
    a3a8:	2200      	movs	r2, #0
    a3aa:	4618      	mov	r0, r3
    a3ac:	4b16      	ldr	r3, [pc, #88]	; (a408 <_usb_d_dev_ep_stall_clr+0xd4>)
    a3ae:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a3b0:	687b      	ldr	r3, [r7, #4]
    a3b2:	7cdb      	ldrb	r3, [r3, #19]
    a3b4:	f003 0307 	and.w	r3, r3, #7
    a3b8:	b2db      	uxtb	r3, r3
    a3ba:	2b01      	cmp	r3, #1
    a3bc:	d110      	bne.n	a3e0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a3be:	7bfb      	ldrb	r3, [r7, #15]
    a3c0:	4619      	mov	r1, r3
    a3c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a3c6:	4b11      	ldr	r3, [pc, #68]	; (a40c <_usb_d_dev_ep_stall_clr+0xd8>)
    a3c8:	4798      	blx	r3
    a3ca:	4603      	mov	r3, r0
    a3cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	d10a      	bne.n	a3ea <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a3d4:	687a      	ldr	r2, [r7, #4]
    a3d6:	7cd3      	ldrb	r3, [r2, #19]
    a3d8:	f36f 03c3 	bfc	r3, #3, #1
    a3dc:	74d3      	strb	r3, [r2, #19]
    a3de:	e004      	b.n	a3ea <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a3e0:	687a      	ldr	r2, [r7, #4]
    a3e2:	7cd3      	ldrb	r3, [r2, #19]
    a3e4:	f36f 03c3 	bfc	r3, #3, #1
    a3e8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a3ea:	2300      	movs	r3, #0
}
    a3ec:	4618      	mov	r0, r3
    a3ee:	3710      	adds	r7, #16
    a3f0:	46bd      	mov	sp, r7
    a3f2:	bd80      	pop	{r7, pc}
    a3f4:	000089a5 	.word	0x000089a5
    a3f8:	0000894d 	.word	0x0000894d
    a3fc:	000088f5 	.word	0x000088f5
    a400:	000089e9 	.word	0x000089e9
    a404:	00008a2d 	.word	0x00008a2d
    a408:	00008b19 	.word	0x00008b19
    a40c:	000083d5 	.word	0x000083d5

0000a410 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a410:	b580      	push	{r7, lr}
    a412:	b086      	sub	sp, #24
    a414:	af00      	add	r7, sp, #0
    a416:	4603      	mov	r3, r0
    a418:	460a      	mov	r2, r1
    a41a:	71fb      	strb	r3, [r7, #7]
    a41c:	4613      	mov	r3, r2
    a41e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a420:	79fb      	ldrb	r3, [r7, #7]
    a422:	f003 030f 	and.w	r3, r3, #15
    a426:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a428:	79fb      	ldrb	r3, [r7, #7]
    a42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a42e:	2b00      	cmp	r3, #0
    a430:	bf14      	ite	ne
    a432:	2301      	movne	r3, #1
    a434:	2300      	moveq	r3, #0
    a436:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a438:	7cba      	ldrb	r2, [r7, #18]
    a43a:	7cfb      	ldrb	r3, [r7, #19]
    a43c:	4611      	mov	r1, r2
    a43e:	4618      	mov	r0, r3
    a440:	4b13      	ldr	r3, [pc, #76]	; (a490 <_usb_d_dev_ep_stall+0x80>)
    a442:	4798      	blx	r3
    a444:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a446:	7cfb      	ldrb	r3, [r7, #19]
    a448:	2b04      	cmp	r3, #4
    a44a:	d902      	bls.n	a452 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a44c:	f06f 0311 	mvn.w	r3, #17
    a450:	e01a      	b.n	a488 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a452:	79bb      	ldrb	r3, [r7, #6]
    a454:	2b01      	cmp	r3, #1
    a456:	d106      	bne.n	a466 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a458:	7cbb      	ldrb	r3, [r7, #18]
    a45a:	4619      	mov	r1, r3
    a45c:	68f8      	ldr	r0, [r7, #12]
    a45e:	4b0d      	ldr	r3, [pc, #52]	; (a494 <_usb_d_dev_ep_stall+0x84>)
    a460:	4798      	blx	r3
    a462:	6178      	str	r0, [r7, #20]
    a464:	e00f      	b.n	a486 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a466:	79bb      	ldrb	r3, [r7, #6]
    a468:	2b00      	cmp	r3, #0
    a46a:	d106      	bne.n	a47a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a46c:	7cbb      	ldrb	r3, [r7, #18]
    a46e:	4619      	mov	r1, r3
    a470:	68f8      	ldr	r0, [r7, #12]
    a472:	4b09      	ldr	r3, [pc, #36]	; (a498 <_usb_d_dev_ep_stall+0x88>)
    a474:	4798      	blx	r3
    a476:	6178      	str	r0, [r7, #20]
    a478:	e005      	b.n	a486 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a47a:	7cbb      	ldrb	r3, [r7, #18]
    a47c:	4619      	mov	r1, r3
    a47e:	68f8      	ldr	r0, [r7, #12]
    a480:	4b06      	ldr	r3, [pc, #24]	; (a49c <_usb_d_dev_ep_stall+0x8c>)
    a482:	4798      	blx	r3
    a484:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a486:	697b      	ldr	r3, [r7, #20]
}
    a488:	4618      	mov	r0, r3
    a48a:	3718      	adds	r7, #24
    a48c:	46bd      	mov	sp, r7
    a48e:	bd80      	pop	{r7, pc}
    a490:	00008eb1 	.word	0x00008eb1
    a494:	0000a2e5 	.word	0x0000a2e5
    a498:	0000a335 	.word	0x0000a335
    a49c:	0000a2b5 	.word	0x0000a2b5

0000a4a0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b082      	sub	sp, #8
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	6078      	str	r0, [r7, #4]
    a4a8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	7c9b      	ldrb	r3, [r3, #18]
    a4ae:	2bff      	cmp	r3, #255	; 0xff
    a4b0:	d014      	beq.n	a4dc <_usb_d_dev_trans_done+0x3c>
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	7cdb      	ldrb	r3, [r3, #19]
    a4b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a4ba:	b2db      	uxtb	r3, r3
    a4bc:	2b00      	cmp	r3, #0
    a4be:	d00d      	beq.n	a4dc <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a4c0:	687a      	ldr	r2, [r7, #4]
    a4c2:	7cd3      	ldrb	r3, [r2, #19]
    a4c4:	f36f 1386 	bfc	r3, #6, #1
    a4c8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a4ca:	4b06      	ldr	r3, [pc, #24]	; (a4e4 <_usb_d_dev_trans_done+0x44>)
    a4cc:	691b      	ldr	r3, [r3, #16]
    a4ce:	687a      	ldr	r2, [r7, #4]
    a4d0:	7c90      	ldrb	r0, [r2, #18]
    a4d2:	687a      	ldr	r2, [r7, #4]
    a4d4:	6892      	ldr	r2, [r2, #8]
    a4d6:	6839      	ldr	r1, [r7, #0]
    a4d8:	4798      	blx	r3
    a4da:	e000      	b.n	a4de <_usb_d_dev_trans_done+0x3e>
		return;
    a4dc:	bf00      	nop
}
    a4de:	3708      	adds	r7, #8
    a4e0:	46bd      	mov	sp, r7
    a4e2:	bd80      	pop	{r7, pc}
    a4e4:	20000e64 	.word	0x20000e64

0000a4e8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a4e8:	b580      	push	{r7, lr}
    a4ea:	b086      	sub	sp, #24
    a4ec:	af00      	add	r7, sp, #0
    a4ee:	60f8      	str	r0, [r7, #12]
    a4f0:	460b      	mov	r3, r1
    a4f2:	607a      	str	r2, [r7, #4]
    a4f4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a4f6:	68fb      	ldr	r3, [r7, #12]
    a4f8:	7c9b      	ldrb	r3, [r3, #18]
    a4fa:	f003 030f 	and.w	r3, r3, #15
    a4fe:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a500:	4b1f      	ldr	r3, [pc, #124]	; (a580 <_usb_d_dev_trans_stop+0x98>)
    a502:	881b      	ldrh	r3, [r3, #0]
    a504:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a506:	68fb      	ldr	r3, [r7, #12]
    a508:	7c9b      	ldrb	r3, [r3, #18]
    a50a:	2bff      	cmp	r3, #255	; 0xff
    a50c:	d033      	beq.n	a576 <_usb_d_dev_trans_stop+0x8e>
    a50e:	68fb      	ldr	r3, [r7, #12]
    a510:	7cdb      	ldrb	r3, [r3, #19]
    a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a516:	b2db      	uxtb	r3, r3
    a518:	2b00      	cmp	r3, #0
    a51a:	d02c      	beq.n	a576 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a51c:	7afb      	ldrb	r3, [r7, #11]
    a51e:	2b00      	cmp	r3, #0
    a520:	d006      	beq.n	a530 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a522:	7dfb      	ldrb	r3, [r7, #23]
    a524:	2200      	movs	r2, #0
    a526:	2101      	movs	r1, #1
    a528:	4618      	mov	r0, r3
    a52a:	4b16      	ldr	r3, [pc, #88]	; (a584 <_usb_d_dev_trans_stop+0x9c>)
    a52c:	4798      	blx	r3
    a52e:	e005      	b.n	a53c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a530:	7dfb      	ldrb	r3, [r7, #23]
    a532:	2200      	movs	r2, #0
    a534:	2100      	movs	r1, #0
    a536:	4618      	mov	r0, r3
    a538:	4b13      	ldr	r3, [pc, #76]	; (a588 <_usb_d_dev_trans_stop+0xa0>)
    a53a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a53c:	7afb      	ldrb	r3, [r7, #11]
    a53e:	f107 0218 	add.w	r2, r7, #24
    a542:	4413      	add	r3, r2
    a544:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a548:	461a      	mov	r2, r3
    a54a:	7dfb      	ldrb	r3, [r7, #23]
    a54c:	4611      	mov	r1, r2
    a54e:	4618      	mov	r0, r3
    a550:	4b0e      	ldr	r3, [pc, #56]	; (a58c <_usb_d_dev_trans_stop+0xa4>)
    a552:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a554:	7afb      	ldrb	r3, [r7, #11]
    a556:	f107 0218 	add.w	r2, r7, #24
    a55a:	4413      	add	r3, r2
    a55c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a560:	461a      	mov	r2, r3
    a562:	7dfb      	ldrb	r3, [r7, #23]
    a564:	4611      	mov	r1, r2
    a566:	4618      	mov	r0, r3
    a568:	4b09      	ldr	r3, [pc, #36]	; (a590 <_usb_d_dev_trans_stop+0xa8>)
    a56a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a56c:	6879      	ldr	r1, [r7, #4]
    a56e:	68f8      	ldr	r0, [r7, #12]
    a570:	4b08      	ldr	r3, [pc, #32]	; (a594 <_usb_d_dev_trans_stop+0xac>)
    a572:	4798      	blx	r3
    a574:	e000      	b.n	a578 <_usb_d_dev_trans_stop+0x90>
		return;
    a576:	bf00      	nop
}
    a578:	3718      	adds	r7, #24
    a57a:	46bd      	mov	sp, r7
    a57c:	bd80      	pop	{r7, pc}
    a57e:	bf00      	nop
    a580:	00010a90 	.word	0x00010a90
    a584:	00008d9d 	.word	0x00008d9d
    a588:	00008df5 	.word	0x00008df5
    a58c:	000088a5 	.word	0x000088a5
    a590:	000088f5 	.word	0x000088f5
    a594:	0000a4a1 	.word	0x0000a4a1

0000a598 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a598:	b580      	push	{r7, lr}
    a59a:	b086      	sub	sp, #24
    a59c:	af00      	add	r7, sp, #0
    a59e:	4603      	mov	r3, r0
    a5a0:	6039      	str	r1, [r7, #0]
    a5a2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a5a4:	79fb      	ldrb	r3, [r7, #7]
    a5a6:	f003 030f 	and.w	r3, r3, #15
    a5aa:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a5ac:	7dfb      	ldrb	r3, [r7, #23]
    a5ae:	015b      	lsls	r3, r3, #5
    a5b0:	4a1e      	ldr	r2, [pc, #120]	; (a62c <_usb_d_dev_ep_read_req+0x94>)
    a5b2:	4413      	add	r3, r2
    a5b4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a5b6:	693b      	ldr	r3, [r7, #16]
    a5b8:	681b      	ldr	r3, [r3, #0]
    a5ba:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a5bc:	693b      	ldr	r3, [r7, #16]
    a5be:	685b      	ldr	r3, [r3, #4]
    a5c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a5c4:	b29b      	uxth	r3, r3
    a5c6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a5c8:	7dfb      	ldrb	r3, [r7, #23]
    a5ca:	2b04      	cmp	r3, #4
    a5cc:	d802      	bhi.n	a5d4 <_usb_d_dev_ep_read_req+0x3c>
    a5ce:	683b      	ldr	r3, [r7, #0]
    a5d0:	2b00      	cmp	r3, #0
    a5d2:	d102      	bne.n	a5da <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a5d4:	f06f 0311 	mvn.w	r3, #17
    a5d8:	e023      	b.n	a622 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a5da:	7dfb      	ldrb	r3, [r7, #23]
    a5dc:	4618      	mov	r0, r3
    a5de:	4b14      	ldr	r3, [pc, #80]	; (a630 <_usb_d_dev_ep_read_req+0x98>)
    a5e0:	4798      	blx	r3
    a5e2:	4603      	mov	r3, r0
    a5e4:	f083 0301 	eor.w	r3, r3, #1
    a5e8:	b2db      	uxtb	r3, r3
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	d002      	beq.n	a5f4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a5ee:	f06f 0312 	mvn.w	r3, #18
    a5f2:	e016      	b.n	a622 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a5f4:	7dfb      	ldrb	r3, [r7, #23]
    a5f6:	4618      	mov	r0, r3
    a5f8:	4b0e      	ldr	r3, [pc, #56]	; (a634 <_usb_d_dev_ep_read_req+0x9c>)
    a5fa:	4798      	blx	r3
    a5fc:	4603      	mov	r3, r0
    a5fe:	f083 0301 	eor.w	r3, r3, #1
    a602:	b2db      	uxtb	r3, r3
    a604:	2b00      	cmp	r3, #0
    a606:	d001      	beq.n	a60c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a608:	2300      	movs	r3, #0
    a60a:	e00a      	b.n	a622 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a60c:	68fb      	ldr	r3, [r7, #12]
    a60e:	2208      	movs	r2, #8
    a610:	4619      	mov	r1, r3
    a612:	6838      	ldr	r0, [r7, #0]
    a614:	4b08      	ldr	r3, [pc, #32]	; (a638 <_usb_d_dev_ep_read_req+0xa0>)
    a616:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a618:	7dfb      	ldrb	r3, [r7, #23]
    a61a:	4618      	mov	r0, r3
    a61c:	4b07      	ldr	r3, [pc, #28]	; (a63c <_usb_d_dev_ep_read_req+0xa4>)
    a61e:	4798      	blx	r3

	return bytes;
    a620:	897b      	ldrh	r3, [r7, #10]
}
    a622:	4618      	mov	r0, r3
    a624:	3718      	adds	r7, #24
    a626:	46bd      	mov	sp, r7
    a628:	bd80      	pop	{r7, pc}
    a62a:	bf00      	nop
    a62c:	20000f2c 	.word	0x20000f2c
    a630:	0000891d 	.word	0x0000891d
    a634:	00008ac9 	.word	0x00008ac9
    a638:	000101d5 	.word	0x000101d5
    a63c:	00008af9 	.word	0x00008af9

0000a640 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a640:	b580      	push	{r7, lr}
    a642:	b086      	sub	sp, #24
    a644:	af00      	add	r7, sp, #0
    a646:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a648:	687b      	ldr	r3, [r7, #4]
    a64a:	7a1b      	ldrb	r3, [r3, #8]
    a64c:	f003 030f 	and.w	r3, r3, #15
    a650:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a652:	687b      	ldr	r3, [r7, #4]
    a654:	7a1b      	ldrb	r3, [r3, #8]
    a656:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a65a:	2b00      	cmp	r3, #0
    a65c:	bf14      	ite	ne
    a65e:	2301      	movne	r3, #1
    a660:	2300      	moveq	r3, #0
    a662:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a664:	7d7a      	ldrb	r2, [r7, #21]
    a666:	7dbb      	ldrb	r3, [r7, #22]
    a668:	4611      	mov	r1, r2
    a66a:	4618      	mov	r0, r3
    a66c:	4b5f      	ldr	r3, [pc, #380]	; (a7ec <_usb_d_dev_ep_trans+0x1ac>)
    a66e:	4798      	blx	r3
    a670:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a672:	693b      	ldr	r3, [r7, #16]
    a674:	8a1b      	ldrh	r3, [r3, #16]
    a676:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a67a:	4293      	cmp	r3, r2
    a67c:	d004      	beq.n	a688 <_usb_d_dev_ep_trans+0x48>
    a67e:	693b      	ldr	r3, [r7, #16]
    a680:	8a1b      	ldrh	r3, [r3, #16]
    a682:	3b01      	subs	r3, #1
    a684:	b29b      	uxth	r3, r3
    a686:	e001      	b.n	a68c <_usb_d_dev_ep_trans+0x4c>
    a688:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a68c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a68e:	687b      	ldr	r3, [r7, #4]
    a690:	685a      	ldr	r2, [r3, #4]
    a692:	89fb      	ldrh	r3, [r7, #14]
    a694:	4013      	ands	r3, r2
    a696:	2b00      	cmp	r3, #0
    a698:	bf14      	ite	ne
    a69a:	2301      	movne	r3, #1
    a69c:	2300      	moveq	r3, #0
    a69e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a6a0:	2300      	movs	r3, #0
    a6a2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a6a4:	7dbb      	ldrb	r3, [r7, #22]
    a6a6:	2b04      	cmp	r3, #4
    a6a8:	d902      	bls.n	a6b0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a6aa:	f06f 0311 	mvn.w	r3, #17
    a6ae:	e098      	b.n	a7e2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	681b      	ldr	r3, [r3, #0]
    a6b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a6b8:	d31a      	bcc.n	a6f0 <_usb_d_dev_ep_trans+0xb0>
    a6ba:	687b      	ldr	r3, [r7, #4]
    a6bc:	681b      	ldr	r3, [r3, #0]
    a6be:	461a      	mov	r2, r3
    a6c0:	687b      	ldr	r3, [r7, #4]
    a6c2:	685b      	ldr	r3, [r3, #4]
    a6c4:	4413      	add	r3, r2
    a6c6:	4a4a      	ldr	r2, [pc, #296]	; (a7f0 <_usb_d_dev_ep_trans+0x1b0>)
    a6c8:	4293      	cmp	r3, r2
    a6ca:	d811      	bhi.n	a6f0 <_usb_d_dev_ep_trans+0xb0>
    a6cc:	687b      	ldr	r3, [r7, #4]
    a6ce:	681b      	ldr	r3, [r3, #0]
    a6d0:	f003 0303 	and.w	r3, r3, #3
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	d10b      	bne.n	a6f0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a6d8:	7d7b      	ldrb	r3, [r7, #21]
    a6da:	f083 0301 	eor.w	r3, r3, #1
    a6de:	b2db      	uxtb	r3, r3
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	d00e      	beq.n	a702 <_usb_d_dev_ep_trans+0xc2>
    a6e4:	687b      	ldr	r3, [r7, #4]
    a6e6:	685b      	ldr	r3, [r3, #4]
    a6e8:	693a      	ldr	r2, [r7, #16]
    a6ea:	8a12      	ldrh	r2, [r2, #16]
    a6ec:	4293      	cmp	r3, r2
    a6ee:	d208      	bcs.n	a702 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a6f0:	693b      	ldr	r3, [r7, #16]
    a6f2:	68db      	ldr	r3, [r3, #12]
    a6f4:	2b00      	cmp	r3, #0
    a6f6:	d102      	bne.n	a6fe <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a6f8:	f06f 0312 	mvn.w	r3, #18
    a6fc:	e071      	b.n	a7e2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a6fe:	2301      	movs	r3, #1
    a700:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a702:	7d7b      	ldrb	r3, [r7, #21]
    a704:	f083 0301 	eor.w	r3, r3, #1
    a708:	b2db      	uxtb	r3, r3
    a70a:	2b00      	cmp	r3, #0
    a70c:	d009      	beq.n	a722 <_usb_d_dev_ep_trans+0xe2>
    a70e:	7b7b      	ldrb	r3, [r7, #13]
    a710:	2b00      	cmp	r3, #0
    a712:	d006      	beq.n	a722 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a714:	693b      	ldr	r3, [r7, #16]
    a716:	68db      	ldr	r3, [r3, #12]
    a718:	2b00      	cmp	r3, #0
    a71a:	d102      	bne.n	a722 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a71c:	f06f 0311 	mvn.w	r3, #17
    a720:	e05f      	b.n	a7e2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a722:	693b      	ldr	r3, [r7, #16]
    a724:	7cdb      	ldrb	r3, [r3, #19]
    a726:	f003 0308 	and.w	r3, r3, #8
    a72a:	b2db      	uxtb	r3, r3
    a72c:	2b00      	cmp	r3, #0
    a72e:	d001      	beq.n	a734 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a730:	2302      	movs	r3, #2
    a732:	e056      	b.n	a7e2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a734:	f107 0308 	add.w	r3, r7, #8
    a738:	4618      	mov	r0, r3
    a73a:	4b2e      	ldr	r3, [pc, #184]	; (a7f4 <_usb_d_dev_ep_trans+0x1b4>)
    a73c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a73e:	693b      	ldr	r3, [r7, #16]
    a740:	7cdb      	ldrb	r3, [r3, #19]
    a742:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a746:	b2db      	uxtb	r3, r3
    a748:	2b00      	cmp	r3, #0
    a74a:	d006      	beq.n	a75a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a74c:	f107 0308 	add.w	r3, r7, #8
    a750:	4618      	mov	r0, r3
    a752:	4b29      	ldr	r3, [pc, #164]	; (a7f8 <_usb_d_dev_ep_trans+0x1b8>)
    a754:	4798      	blx	r3
		return USB_BUSY;
    a756:	2301      	movs	r3, #1
    a758:	e043      	b.n	a7e2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a75a:	693a      	ldr	r2, [r7, #16]
    a75c:	7cd3      	ldrb	r3, [r2, #19]
    a75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a762:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a764:	f107 0308 	add.w	r3, r7, #8
    a768:	4618      	mov	r0, r3
    a76a:	4b23      	ldr	r3, [pc, #140]	; (a7f8 <_usb_d_dev_ep_trans+0x1b8>)
    a76c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a76e:	687b      	ldr	r3, [r7, #4]
    a770:	681a      	ldr	r2, [r3, #0]
    a772:	693b      	ldr	r3, [r7, #16]
    a774:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a776:	687b      	ldr	r3, [r7, #4]
    a778:	685a      	ldr	r2, [r3, #4]
    a77a:	693b      	ldr	r3, [r7, #16]
    a77c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a77e:	693b      	ldr	r3, [r7, #16]
    a780:	2200      	movs	r2, #0
    a782:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a784:	693a      	ldr	r2, [r7, #16]
    a786:	7cd3      	ldrb	r3, [r2, #19]
    a788:	7d79      	ldrb	r1, [r7, #21]
    a78a:	f361 13c7 	bfi	r3, r1, #7, #1
    a78e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a790:	693a      	ldr	r2, [r7, #16]
    a792:	7cd3      	ldrb	r3, [r2, #19]
    a794:	7df9      	ldrb	r1, [r7, #23]
    a796:	f361 1345 	bfi	r3, r1, #5, #1
    a79a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a79c:	687b      	ldr	r3, [r7, #4]
    a79e:	7a5b      	ldrb	r3, [r3, #9]
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d007      	beq.n	a7b4 <_usb_d_dev_ep_trans+0x174>
    a7a4:	7b7b      	ldrb	r3, [r7, #13]
    a7a6:	f083 0301 	eor.w	r3, r3, #1
    a7aa:	b2db      	uxtb	r3, r3
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d001      	beq.n	a7b4 <_usb_d_dev_ep_trans+0x174>
    a7b0:	2301      	movs	r3, #1
    a7b2:	e000      	b.n	a7b6 <_usb_d_dev_ep_trans+0x176>
    a7b4:	2300      	movs	r3, #0
    a7b6:	b2db      	uxtb	r3, r3
    a7b8:	f003 0301 	and.w	r3, r3, #1
    a7bc:	b2d9      	uxtb	r1, r3
    a7be:	693a      	ldr	r2, [r7, #16]
    a7c0:	7cd3      	ldrb	r3, [r2, #19]
    a7c2:	f361 1304 	bfi	r3, r1, #4, #1
    a7c6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a7c8:	7d7b      	ldrb	r3, [r7, #21]
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	d004      	beq.n	a7d8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a7ce:	2100      	movs	r1, #0
    a7d0:	6938      	ldr	r0, [r7, #16]
    a7d2:	4b0a      	ldr	r3, [pc, #40]	; (a7fc <_usb_d_dev_ep_trans+0x1bc>)
    a7d4:	4798      	blx	r3
    a7d6:	e003      	b.n	a7e0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a7d8:	2100      	movs	r1, #0
    a7da:	6938      	ldr	r0, [r7, #16]
    a7dc:	4b08      	ldr	r3, [pc, #32]	; (a800 <_usb_d_dev_ep_trans+0x1c0>)
    a7de:	4798      	blx	r3
	}

	return ERR_NONE;
    a7e0:	2300      	movs	r3, #0
}
    a7e2:	4618      	mov	r0, r3
    a7e4:	3718      	adds	r7, #24
    a7e6:	46bd      	mov	sp, r7
    a7e8:	bd80      	pop	{r7, pc}
    a7ea:	bf00      	nop
    a7ec:	00008eb1 	.word	0x00008eb1
    a7f0:	20041fff 	.word	0x20041fff
    a7f4:	0000b00d 	.word	0x0000b00d
    a7f8:	0000b033 	.word	0x0000b033
    a7fc:	00009179 	.word	0x00009179
    a800:	00009391 	.word	0x00009391

0000a804 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a804:	b580      	push	{r7, lr}
    a806:	b084      	sub	sp, #16
    a808:	af00      	add	r7, sp, #0
    a80a:	4603      	mov	r3, r0
    a80c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a80e:	79fb      	ldrb	r3, [r7, #7]
    a810:	f003 030f 	and.w	r3, r3, #15
    a814:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a816:	79fb      	ldrb	r3, [r7, #7]
    a818:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a81c:	2b00      	cmp	r3, #0
    a81e:	bf14      	ite	ne
    a820:	2301      	movne	r3, #1
    a822:	2300      	moveq	r3, #0
    a824:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a826:	7bba      	ldrb	r2, [r7, #14]
    a828:	7bfb      	ldrb	r3, [r7, #15]
    a82a:	4611      	mov	r1, r2
    a82c:	4618      	mov	r0, r3
    a82e:	4b08      	ldr	r3, [pc, #32]	; (a850 <_usb_d_dev_ep_abort+0x4c>)
    a830:	4798      	blx	r3
    a832:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a834:	7bfb      	ldrb	r3, [r7, #15]
    a836:	2b04      	cmp	r3, #4
    a838:	d806      	bhi.n	a848 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a83a:	7bbb      	ldrb	r3, [r7, #14]
    a83c:	2202      	movs	r2, #2
    a83e:	4619      	mov	r1, r3
    a840:	68b8      	ldr	r0, [r7, #8]
    a842:	4b04      	ldr	r3, [pc, #16]	; (a854 <_usb_d_dev_ep_abort+0x50>)
    a844:	4798      	blx	r3
    a846:	e000      	b.n	a84a <_usb_d_dev_ep_abort+0x46>
		return;
    a848:	bf00      	nop
}
    a84a:	3710      	adds	r7, #16
    a84c:	46bd      	mov	sp, r7
    a84e:	bd80      	pop	{r7, pc}
    a850:	00008eb1 	.word	0x00008eb1
    a854:	0000a4e9 	.word	0x0000a4e9

0000a858 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a858:	b480      	push	{r7}
    a85a:	b085      	sub	sp, #20
    a85c:	af00      	add	r7, sp, #0
    a85e:	4603      	mov	r3, r0
    a860:	6039      	str	r1, [r7, #0]
    a862:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a864:	683b      	ldr	r3, [r7, #0]
    a866:	2b00      	cmp	r3, #0
    a868:	d001      	beq.n	a86e <_usb_d_dev_register_callback+0x16>
    a86a:	683b      	ldr	r3, [r7, #0]
    a86c:	e000      	b.n	a870 <_usb_d_dev_register_callback+0x18>
    a86e:	4b0a      	ldr	r3, [pc, #40]	; (a898 <_usb_d_dev_register_callback+0x40>)
    a870:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a872:	79fb      	ldrb	r3, [r7, #7]
    a874:	2b01      	cmp	r3, #1
    a876:	d103      	bne.n	a880 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a878:	4a08      	ldr	r2, [pc, #32]	; (a89c <_usb_d_dev_register_callback+0x44>)
    a87a:	68fb      	ldr	r3, [r7, #12]
    a87c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a87e:	e005      	b.n	a88c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a880:	79fb      	ldrb	r3, [r7, #7]
    a882:	2b00      	cmp	r3, #0
    a884:	d102      	bne.n	a88c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a886:	4a05      	ldr	r2, [pc, #20]	; (a89c <_usb_d_dev_register_callback+0x44>)
    a888:	68fb      	ldr	r3, [r7, #12]
    a88a:	6013      	str	r3, [r2, #0]
}
    a88c:	bf00      	nop
    a88e:	3714      	adds	r7, #20
    a890:	46bd      	mov	sp, r7
    a892:	f85d 7b04 	ldr.w	r7, [sp], #4
    a896:	4770      	bx	lr
    a898:	00008739 	.word	0x00008739
    a89c:	20000e64 	.word	0x20000e64

0000a8a0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a8a0:	b480      	push	{r7}
    a8a2:	b085      	sub	sp, #20
    a8a4:	af00      	add	r7, sp, #0
    a8a6:	4603      	mov	r3, r0
    a8a8:	6039      	str	r1, [r7, #0]
    a8aa:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a8ac:	683b      	ldr	r3, [r7, #0]
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d001      	beq.n	a8b6 <_usb_d_dev_register_ep_callback+0x16>
    a8b2:	683b      	ldr	r3, [r7, #0]
    a8b4:	e000      	b.n	a8b8 <_usb_d_dev_register_ep_callback+0x18>
    a8b6:	4b0e      	ldr	r3, [pc, #56]	; (a8f0 <_usb_d_dev_register_ep_callback+0x50>)
    a8b8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a8ba:	79fb      	ldrb	r3, [r7, #7]
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d103      	bne.n	a8c8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a8c0:	4a0c      	ldr	r2, [pc, #48]	; (a8f4 <_usb_d_dev_register_ep_callback+0x54>)
    a8c2:	68fb      	ldr	r3, [r7, #12]
    a8c4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a8c6:	e00c      	b.n	a8e2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a8c8:	79fb      	ldrb	r3, [r7, #7]
    a8ca:	2b01      	cmp	r3, #1
    a8cc:	d103      	bne.n	a8d6 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a8ce:	4a09      	ldr	r2, [pc, #36]	; (a8f4 <_usb_d_dev_register_ep_callback+0x54>)
    a8d0:	68fb      	ldr	r3, [r7, #12]
    a8d2:	60d3      	str	r3, [r2, #12]
}
    a8d4:	e005      	b.n	a8e2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a8d6:	79fb      	ldrb	r3, [r7, #7]
    a8d8:	2b02      	cmp	r3, #2
    a8da:	d102      	bne.n	a8e2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a8dc:	4a05      	ldr	r2, [pc, #20]	; (a8f4 <_usb_d_dev_register_ep_callback+0x54>)
    a8de:	68fb      	ldr	r3, [r7, #12]
    a8e0:	6113      	str	r3, [r2, #16]
}
    a8e2:	bf00      	nop
    a8e4:	3714      	adds	r7, #20
    a8e6:	46bd      	mov	sp, r7
    a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8ec:	4770      	bx	lr
    a8ee:	bf00      	nop
    a8f0:	00008739 	.word	0x00008739
    a8f4:	20000e64 	.word	0x20000e64

0000a8f8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a8f8:	b580      	push	{r7, lr}
    a8fa:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a8fc:	4b01      	ldr	r3, [pc, #4]	; (a904 <USB_0_Handler+0xc>)
    a8fe:	4798      	blx	r3
}
    a900:	bf00      	nop
    a902:	bd80      	pop	{r7, pc}
    a904:	00009b69 	.word	0x00009b69

0000a908 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a908:	b580      	push	{r7, lr}
    a90a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a90c:	4b01      	ldr	r3, [pc, #4]	; (a914 <USB_1_Handler+0xc>)
    a90e:	4798      	blx	r3
}
    a910:	bf00      	nop
    a912:	bd80      	pop	{r7, pc}
    a914:	00009b69 	.word	0x00009b69

0000a918 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a918:	b580      	push	{r7, lr}
    a91a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a91c:	4b01      	ldr	r3, [pc, #4]	; (a924 <USB_2_Handler+0xc>)
    a91e:	4798      	blx	r3
}
    a920:	bf00      	nop
    a922:	bd80      	pop	{r7, pc}
    a924:	00009b69 	.word	0x00009b69

0000a928 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a928:	b580      	push	{r7, lr}
    a92a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a92c:	4b01      	ldr	r3, [pc, #4]	; (a934 <USB_3_Handler+0xc>)
    a92e:	4798      	blx	r3
}
    a930:	bf00      	nop
    a932:	bd80      	pop	{r7, pc}
    a934:	00009b69 	.word	0x00009b69

0000a938 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a938:	b480      	push	{r7}
    a93a:	b083      	sub	sp, #12
    a93c:	af00      	add	r7, sp, #0
    a93e:	6078      	str	r0, [r7, #4]
    a940:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a942:	bf00      	nop
    a944:	687b      	ldr	r3, [r7, #4]
    a946:	689a      	ldr	r2, [r3, #8]
    a948:	683b      	ldr	r3, [r7, #0]
    a94a:	4013      	ands	r3, r2
    a94c:	2b00      	cmp	r3, #0
    a94e:	d1f9      	bne.n	a944 <hri_wdt_wait_for_sync+0xc>
	};
}
    a950:	bf00      	nop
    a952:	370c      	adds	r7, #12
    a954:	46bd      	mov	sp, r7
    a956:	f85d 7b04 	ldr.w	r7, [sp], #4
    a95a:	4770      	bx	lr

0000a95c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a95c:	b580      	push	{r7, lr}
    a95e:	b084      	sub	sp, #16
    a960:	af00      	add	r7, sp, #0
    a962:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a964:	210e      	movs	r1, #14
    a966:	6878      	ldr	r0, [r7, #4]
    a968:	4b0a      	ldr	r3, [pc, #40]	; (a994 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a96a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a96c:	687b      	ldr	r3, [r7, #4]
    a96e:	781b      	ldrb	r3, [r3, #0]
    a970:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a972:	7bfb      	ldrb	r3, [r7, #15]
    a974:	085b      	lsrs	r3, r3, #1
    a976:	b2db      	uxtb	r3, r3
    a978:	f003 0301 	and.w	r3, r3, #1
    a97c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a97e:	7bfb      	ldrb	r3, [r7, #15]
    a980:	2b00      	cmp	r3, #0
    a982:	bf14      	ite	ne
    a984:	2301      	movne	r3, #1
    a986:	2300      	moveq	r3, #0
    a988:	b2db      	uxtb	r3, r3
}
    a98a:	4618      	mov	r0, r3
    a98c:	3710      	adds	r7, #16
    a98e:	46bd      	mov	sp, r7
    a990:	bd80      	pop	{r7, pc}
    a992:	bf00      	nop
    a994:	0000a939 	.word	0x0000a939

0000a998 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a998:	b580      	push	{r7, lr}
    a99a:	b082      	sub	sp, #8
    a99c:	af00      	add	r7, sp, #0
    a99e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a9a0:	687b      	ldr	r3, [r7, #4]
    a9a2:	781b      	ldrb	r3, [r3, #0]
    a9a4:	b2db      	uxtb	r3, r3
    a9a6:	f023 0304 	bic.w	r3, r3, #4
    a9aa:	b2da      	uxtb	r2, r3
    a9ac:	687b      	ldr	r3, [r7, #4]
    a9ae:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a9b0:	210e      	movs	r1, #14
    a9b2:	6878      	ldr	r0, [r7, #4]
    a9b4:	4b02      	ldr	r3, [pc, #8]	; (a9c0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a9b6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a9b8:	bf00      	nop
    a9ba:	3708      	adds	r7, #8
    a9bc:	46bd      	mov	sp, r7
    a9be:	bd80      	pop	{r7, pc}
    a9c0:	0000a939 	.word	0x0000a939

0000a9c4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a9c4:	b580      	push	{r7, lr}
    a9c6:	b084      	sub	sp, #16
    a9c8:	af00      	add	r7, sp, #0
    a9ca:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a9cc:	210e      	movs	r1, #14
    a9ce:	6878      	ldr	r0, [r7, #4]
    a9d0:	4b08      	ldr	r3, [pc, #32]	; (a9f4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a9d2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a9d4:	687b      	ldr	r3, [r7, #4]
    a9d6:	781b      	ldrb	r3, [r3, #0]
    a9d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a9da:	7bfb      	ldrb	r3, [r7, #15]
    a9dc:	09db      	lsrs	r3, r3, #7
    a9de:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a9e0:	7bfb      	ldrb	r3, [r7, #15]
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	bf14      	ite	ne
    a9e6:	2301      	movne	r3, #1
    a9e8:	2300      	moveq	r3, #0
    a9ea:	b2db      	uxtb	r3, r3
}
    a9ec:	4618      	mov	r0, r3
    a9ee:	3710      	adds	r7, #16
    a9f0:	46bd      	mov	sp, r7
    a9f2:	bd80      	pop	{r7, pc}
    a9f4:	0000a939 	.word	0x0000a939

0000a9f8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a9f8:	b480      	push	{r7}
    a9fa:	b085      	sub	sp, #20
    a9fc:	af00      	add	r7, sp, #0
    a9fe:	6078      	str	r0, [r7, #4]
    aa00:	460b      	mov	r3, r1
    aa02:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    aa04:	687b      	ldr	r3, [r7, #4]
    aa06:	785b      	ldrb	r3, [r3, #1]
    aa08:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    aa0a:	7bfb      	ldrb	r3, [r7, #15]
    aa0c:	f023 030f 	bic.w	r3, r3, #15
    aa10:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    aa12:	78fb      	ldrb	r3, [r7, #3]
    aa14:	f003 030f 	and.w	r3, r3, #15
    aa18:	b2da      	uxtb	r2, r3
    aa1a:	7bfb      	ldrb	r3, [r7, #15]
    aa1c:	4313      	orrs	r3, r2
    aa1e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    aa20:	687b      	ldr	r3, [r7, #4]
    aa22:	7bfa      	ldrb	r2, [r7, #15]
    aa24:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    aa26:	bf00      	nop
    aa28:	3714      	adds	r7, #20
    aa2a:	46bd      	mov	sp, r7
    aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa30:	4770      	bx	lr
	...

0000aa34 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    aa34:	b580      	push	{r7, lr}
    aa36:	b082      	sub	sp, #8
    aa38:	af00      	add	r7, sp, #0
    aa3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    aa3c:	687b      	ldr	r3, [r7, #4]
    aa3e:	2b00      	cmp	r3, #0
    aa40:	d005      	beq.n	aa4e <_wdt_init+0x1a>
    aa42:	687b      	ldr	r3, [r7, #4]
    aa44:	681b      	ldr	r3, [r3, #0]
    aa46:	2b00      	cmp	r3, #0
    aa48:	d001      	beq.n	aa4e <_wdt_init+0x1a>
    aa4a:	2301      	movs	r3, #1
    aa4c:	e000      	b.n	aa50 <_wdt_init+0x1c>
    aa4e:	2300      	movs	r3, #0
    aa50:	f003 0301 	and.w	r3, r3, #1
    aa54:	b2db      	uxtb	r3, r3
    aa56:	2250      	movs	r2, #80	; 0x50
    aa58:	4913      	ldr	r1, [pc, #76]	; (aaa8 <_wdt_init+0x74>)
    aa5a:	4618      	mov	r0, r3
    aa5c:	4b13      	ldr	r3, [pc, #76]	; (aaac <_wdt_init+0x78>)
    aa5e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    aa60:	687b      	ldr	r3, [r7, #4]
    aa62:	681b      	ldr	r3, [r3, #0]
    aa64:	4618      	mov	r0, r3
    aa66:	4b12      	ldr	r3, [pc, #72]	; (aab0 <_wdt_init+0x7c>)
    aa68:	4798      	blx	r3
    aa6a:	4603      	mov	r3, r0
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d107      	bne.n	aa80 <_wdt_init+0x4c>
    aa70:	687b      	ldr	r3, [r7, #4]
    aa72:	681b      	ldr	r3, [r3, #0]
    aa74:	4618      	mov	r0, r3
    aa76:	4b0f      	ldr	r3, [pc, #60]	; (aab4 <_wdt_init+0x80>)
    aa78:	4798      	blx	r3
    aa7a:	4603      	mov	r3, r0
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d002      	beq.n	aa86 <_wdt_init+0x52>
		return ERR_DENIED;
    aa80:	f06f 0310 	mvn.w	r3, #16
    aa84:	e00b      	b.n	aa9e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    aa86:	687b      	ldr	r3, [r7, #4]
    aa88:	681b      	ldr	r3, [r3, #0]
    aa8a:	4618      	mov	r0, r3
    aa8c:	4b0a      	ldr	r3, [pc, #40]	; (aab8 <_wdt_init+0x84>)
    aa8e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	681b      	ldr	r3, [r3, #0]
    aa94:	210b      	movs	r1, #11
    aa96:	4618      	mov	r0, r3
    aa98:	4b08      	ldr	r3, [pc, #32]	; (aabc <_wdt_init+0x88>)
    aa9a:	4798      	blx	r3
	}

	return ERR_NONE;
    aa9c:	2300      	movs	r3, #0
}
    aa9e:	4618      	mov	r0, r3
    aaa0:	3708      	adds	r7, #8
    aaa2:	46bd      	mov	sp, r7
    aaa4:	bd80      	pop	{r7, pc}
    aaa6:	bf00      	nop
    aaa8:	00010a94 	.word	0x00010a94
    aaac:	00003825 	.word	0x00003825
    aab0:	0000a9c5 	.word	0x0000a9c5
    aab4:	0000a95d 	.word	0x0000a95d
    aab8:	0000a999 	.word	0x0000a999
    aabc:	0000a9f9 	.word	0x0000a9f9

0000aac0 <hri_port_set_DIR_reg>:
{
    aac0:	b480      	push	{r7}
    aac2:	b085      	sub	sp, #20
    aac4:	af00      	add	r7, sp, #0
    aac6:	60f8      	str	r0, [r7, #12]
    aac8:	460b      	mov	r3, r1
    aaca:	607a      	str	r2, [r7, #4]
    aacc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    aace:	7afb      	ldrb	r3, [r7, #11]
    aad0:	68fa      	ldr	r2, [r7, #12]
    aad2:	01db      	lsls	r3, r3, #7
    aad4:	4413      	add	r3, r2
    aad6:	3308      	adds	r3, #8
    aad8:	687a      	ldr	r2, [r7, #4]
    aada:	601a      	str	r2, [r3, #0]
}
    aadc:	bf00      	nop
    aade:	3714      	adds	r7, #20
    aae0:	46bd      	mov	sp, r7
    aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aae6:	4770      	bx	lr

0000aae8 <hri_port_clear_DIR_reg>:
{
    aae8:	b480      	push	{r7}
    aaea:	b085      	sub	sp, #20
    aaec:	af00      	add	r7, sp, #0
    aaee:	60f8      	str	r0, [r7, #12]
    aaf0:	460b      	mov	r3, r1
    aaf2:	607a      	str	r2, [r7, #4]
    aaf4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    aaf6:	7afb      	ldrb	r3, [r7, #11]
    aaf8:	68fa      	ldr	r2, [r7, #12]
    aafa:	01db      	lsls	r3, r3, #7
    aafc:	4413      	add	r3, r2
    aafe:	3304      	adds	r3, #4
    ab00:	687a      	ldr	r2, [r7, #4]
    ab02:	601a      	str	r2, [r3, #0]
}
    ab04:	bf00      	nop
    ab06:	3714      	adds	r7, #20
    ab08:	46bd      	mov	sp, r7
    ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab0e:	4770      	bx	lr

0000ab10 <hri_port_set_OUT_reg>:
{
    ab10:	b480      	push	{r7}
    ab12:	b085      	sub	sp, #20
    ab14:	af00      	add	r7, sp, #0
    ab16:	60f8      	str	r0, [r7, #12]
    ab18:	460b      	mov	r3, r1
    ab1a:	607a      	str	r2, [r7, #4]
    ab1c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ab1e:	7afb      	ldrb	r3, [r7, #11]
    ab20:	68fa      	ldr	r2, [r7, #12]
    ab22:	01db      	lsls	r3, r3, #7
    ab24:	4413      	add	r3, r2
    ab26:	3318      	adds	r3, #24
    ab28:	687a      	ldr	r2, [r7, #4]
    ab2a:	601a      	str	r2, [r3, #0]
}
    ab2c:	bf00      	nop
    ab2e:	3714      	adds	r7, #20
    ab30:	46bd      	mov	sp, r7
    ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab36:	4770      	bx	lr

0000ab38 <hri_port_clear_OUT_reg>:
{
    ab38:	b480      	push	{r7}
    ab3a:	b085      	sub	sp, #20
    ab3c:	af00      	add	r7, sp, #0
    ab3e:	60f8      	str	r0, [r7, #12]
    ab40:	460b      	mov	r3, r1
    ab42:	607a      	str	r2, [r7, #4]
    ab44:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ab46:	7afb      	ldrb	r3, [r7, #11]
    ab48:	68fa      	ldr	r2, [r7, #12]
    ab4a:	01db      	lsls	r3, r3, #7
    ab4c:	4413      	add	r3, r2
    ab4e:	3314      	adds	r3, #20
    ab50:	687a      	ldr	r2, [r7, #4]
    ab52:	601a      	str	r2, [r3, #0]
}
    ab54:	bf00      	nop
    ab56:	3714      	adds	r7, #20
    ab58:	46bd      	mov	sp, r7
    ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab5e:	4770      	bx	lr

0000ab60 <hri_port_write_PMUX_PMUXE_bf>:
{
    ab60:	b480      	push	{r7}
    ab62:	b085      	sub	sp, #20
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
    ab68:	4608      	mov	r0, r1
    ab6a:	4611      	mov	r1, r2
    ab6c:	461a      	mov	r2, r3
    ab6e:	4603      	mov	r3, r0
    ab70:	70fb      	strb	r3, [r7, #3]
    ab72:	460b      	mov	r3, r1
    ab74:	70bb      	strb	r3, [r7, #2]
    ab76:	4613      	mov	r3, r2
    ab78:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ab7a:	78fa      	ldrb	r2, [r7, #3]
    ab7c:	78bb      	ldrb	r3, [r7, #2]
    ab7e:	6879      	ldr	r1, [r7, #4]
    ab80:	01d2      	lsls	r2, r2, #7
    ab82:	440a      	add	r2, r1
    ab84:	4413      	add	r3, r2
    ab86:	3330      	adds	r3, #48	; 0x30
    ab88:	781b      	ldrb	r3, [r3, #0]
    ab8a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ab8c:	7bfb      	ldrb	r3, [r7, #15]
    ab8e:	f023 030f 	bic.w	r3, r3, #15
    ab92:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ab94:	787b      	ldrb	r3, [r7, #1]
    ab96:	f003 030f 	and.w	r3, r3, #15
    ab9a:	b2da      	uxtb	r2, r3
    ab9c:	7bfb      	ldrb	r3, [r7, #15]
    ab9e:	4313      	orrs	r3, r2
    aba0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    aba2:	78fa      	ldrb	r2, [r7, #3]
    aba4:	78bb      	ldrb	r3, [r7, #2]
    aba6:	6879      	ldr	r1, [r7, #4]
    aba8:	01d2      	lsls	r2, r2, #7
    abaa:	440a      	add	r2, r1
    abac:	4413      	add	r3, r2
    abae:	3330      	adds	r3, #48	; 0x30
    abb0:	7bfa      	ldrb	r2, [r7, #15]
    abb2:	701a      	strb	r2, [r3, #0]
}
    abb4:	bf00      	nop
    abb6:	3714      	adds	r7, #20
    abb8:	46bd      	mov	sp, r7
    abba:	f85d 7b04 	ldr.w	r7, [sp], #4
    abbe:	4770      	bx	lr

0000abc0 <hri_port_write_PMUX_PMUXO_bf>:
{
    abc0:	b480      	push	{r7}
    abc2:	b085      	sub	sp, #20
    abc4:	af00      	add	r7, sp, #0
    abc6:	6078      	str	r0, [r7, #4]
    abc8:	4608      	mov	r0, r1
    abca:	4611      	mov	r1, r2
    abcc:	461a      	mov	r2, r3
    abce:	4603      	mov	r3, r0
    abd0:	70fb      	strb	r3, [r7, #3]
    abd2:	460b      	mov	r3, r1
    abd4:	70bb      	strb	r3, [r7, #2]
    abd6:	4613      	mov	r3, r2
    abd8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    abda:	78fa      	ldrb	r2, [r7, #3]
    abdc:	78bb      	ldrb	r3, [r7, #2]
    abde:	6879      	ldr	r1, [r7, #4]
    abe0:	01d2      	lsls	r2, r2, #7
    abe2:	440a      	add	r2, r1
    abe4:	4413      	add	r3, r2
    abe6:	3330      	adds	r3, #48	; 0x30
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    abec:	7bfb      	ldrb	r3, [r7, #15]
    abee:	f003 030f 	and.w	r3, r3, #15
    abf2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    abf4:	787b      	ldrb	r3, [r7, #1]
    abf6:	011b      	lsls	r3, r3, #4
    abf8:	b2da      	uxtb	r2, r3
    abfa:	7bfb      	ldrb	r3, [r7, #15]
    abfc:	4313      	orrs	r3, r2
    abfe:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ac00:	78fa      	ldrb	r2, [r7, #3]
    ac02:	78bb      	ldrb	r3, [r7, #2]
    ac04:	6879      	ldr	r1, [r7, #4]
    ac06:	01d2      	lsls	r2, r2, #7
    ac08:	440a      	add	r2, r1
    ac0a:	4413      	add	r3, r2
    ac0c:	3330      	adds	r3, #48	; 0x30
    ac0e:	7bfa      	ldrb	r2, [r7, #15]
    ac10:	701a      	strb	r2, [r3, #0]
}
    ac12:	bf00      	nop
    ac14:	3714      	adds	r7, #20
    ac16:	46bd      	mov	sp, r7
    ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac1c:	4770      	bx	lr

0000ac1e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    ac1e:	b480      	push	{r7}
    ac20:	b085      	sub	sp, #20
    ac22:	af00      	add	r7, sp, #0
    ac24:	6078      	str	r0, [r7, #4]
    ac26:	4608      	mov	r0, r1
    ac28:	4611      	mov	r1, r2
    ac2a:	461a      	mov	r2, r3
    ac2c:	4603      	mov	r3, r0
    ac2e:	70fb      	strb	r3, [r7, #3]
    ac30:	460b      	mov	r3, r1
    ac32:	70bb      	strb	r3, [r7, #2]
    ac34:	4613      	mov	r3, r2
    ac36:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ac38:	78fa      	ldrb	r2, [r7, #3]
    ac3a:	78bb      	ldrb	r3, [r7, #2]
    ac3c:	6879      	ldr	r1, [r7, #4]
    ac3e:	01d2      	lsls	r2, r2, #7
    ac40:	440a      	add	r2, r1
    ac42:	4413      	add	r3, r2
    ac44:	3340      	adds	r3, #64	; 0x40
    ac46:	781b      	ldrb	r3, [r3, #0]
    ac48:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ac4a:	7bfb      	ldrb	r3, [r7, #15]
    ac4c:	f023 0301 	bic.w	r3, r3, #1
    ac50:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ac52:	787a      	ldrb	r2, [r7, #1]
    ac54:	7bfb      	ldrb	r3, [r7, #15]
    ac56:	4313      	orrs	r3, r2
    ac58:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ac5a:	78fa      	ldrb	r2, [r7, #3]
    ac5c:	78bb      	ldrb	r3, [r7, #2]
    ac5e:	6879      	ldr	r1, [r7, #4]
    ac60:	01d2      	lsls	r2, r2, #7
    ac62:	440a      	add	r2, r1
    ac64:	4413      	add	r3, r2
    ac66:	3340      	adds	r3, #64	; 0x40
    ac68:	7bfa      	ldrb	r2, [r7, #15]
    ac6a:	701a      	strb	r2, [r3, #0]
}
    ac6c:	bf00      	nop
    ac6e:	3714      	adds	r7, #20
    ac70:	46bd      	mov	sp, r7
    ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac76:	4770      	bx	lr

0000ac78 <hri_port_write_WRCONFIG_reg>:
{
    ac78:	b480      	push	{r7}
    ac7a:	b085      	sub	sp, #20
    ac7c:	af00      	add	r7, sp, #0
    ac7e:	60f8      	str	r0, [r7, #12]
    ac80:	460b      	mov	r3, r1
    ac82:	607a      	str	r2, [r7, #4]
    ac84:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ac86:	7afb      	ldrb	r3, [r7, #11]
    ac88:	68fa      	ldr	r2, [r7, #12]
    ac8a:	01db      	lsls	r3, r3, #7
    ac8c:	4413      	add	r3, r2
    ac8e:	3328      	adds	r3, #40	; 0x28
    ac90:	687a      	ldr	r2, [r7, #4]
    ac92:	601a      	str	r2, [r3, #0]
}
    ac94:	bf00      	nop
    ac96:	3714      	adds	r7, #20
    ac98:	46bd      	mov	sp, r7
    ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac9e:	4770      	bx	lr

0000aca0 <_gpio_set_direction>:
{
    aca0:	b580      	push	{r7, lr}
    aca2:	b082      	sub	sp, #8
    aca4:	af00      	add	r7, sp, #0
    aca6:	4603      	mov	r3, r0
    aca8:	6039      	str	r1, [r7, #0]
    acaa:	71fb      	strb	r3, [r7, #7]
    acac:	4613      	mov	r3, r2
    acae:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    acb0:	79bb      	ldrb	r3, [r7, #6]
    acb2:	2b01      	cmp	r3, #1
    acb4:	d01c      	beq.n	acf0 <_gpio_set_direction+0x50>
    acb6:	2b02      	cmp	r3, #2
    acb8:	d037      	beq.n	ad2a <_gpio_set_direction+0x8a>
    acba:	2b00      	cmp	r3, #0
    acbc:	d14e      	bne.n	ad5c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    acbe:	79fb      	ldrb	r3, [r7, #7]
    acc0:	683a      	ldr	r2, [r7, #0]
    acc2:	4619      	mov	r1, r3
    acc4:	482a      	ldr	r0, [pc, #168]	; (ad70 <_gpio_set_direction+0xd0>)
    acc6:	4b2b      	ldr	r3, [pc, #172]	; (ad74 <_gpio_set_direction+0xd4>)
    acc8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    acca:	683b      	ldr	r3, [r7, #0]
    accc:	b29b      	uxth	r3, r3
    acce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    acd2:	79fb      	ldrb	r3, [r7, #7]
    acd4:	4619      	mov	r1, r3
    acd6:	4826      	ldr	r0, [pc, #152]	; (ad70 <_gpio_set_direction+0xd0>)
    acd8:	4b27      	ldr	r3, [pc, #156]	; (ad78 <_gpio_set_direction+0xd8>)
    acda:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    acdc:	683b      	ldr	r3, [r7, #0]
    acde:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ace0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ace4:	79fb      	ldrb	r3, [r7, #7]
    ace6:	4619      	mov	r1, r3
    ace8:	4821      	ldr	r0, [pc, #132]	; (ad70 <_gpio_set_direction+0xd0>)
    acea:	4b23      	ldr	r3, [pc, #140]	; (ad78 <_gpio_set_direction+0xd8>)
    acec:	4798      	blx	r3
		break;
    acee:	e03a      	b.n	ad66 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    acf0:	79fb      	ldrb	r3, [r7, #7]
    acf2:	683a      	ldr	r2, [r7, #0]
    acf4:	4619      	mov	r1, r3
    acf6:	481e      	ldr	r0, [pc, #120]	; (ad70 <_gpio_set_direction+0xd0>)
    acf8:	4b1e      	ldr	r3, [pc, #120]	; (ad74 <_gpio_set_direction+0xd4>)
    acfa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    acfc:	683b      	ldr	r3, [r7, #0]
    acfe:	b29b      	uxth	r3, r3
    ad00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ad04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ad08:	79f9      	ldrb	r1, [r7, #7]
    ad0a:	461a      	mov	r2, r3
    ad0c:	4818      	ldr	r0, [pc, #96]	; (ad70 <_gpio_set_direction+0xd0>)
    ad0e:	4b1a      	ldr	r3, [pc, #104]	; (ad78 <_gpio_set_direction+0xd8>)
    ad10:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ad12:	683b      	ldr	r3, [r7, #0]
    ad14:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ad16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ad1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ad1e:	79f9      	ldrb	r1, [r7, #7]
    ad20:	461a      	mov	r2, r3
    ad22:	4813      	ldr	r0, [pc, #76]	; (ad70 <_gpio_set_direction+0xd0>)
    ad24:	4b14      	ldr	r3, [pc, #80]	; (ad78 <_gpio_set_direction+0xd8>)
    ad26:	4798      	blx	r3
		break;
    ad28:	e01d      	b.n	ad66 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ad2a:	79fb      	ldrb	r3, [r7, #7]
    ad2c:	683a      	ldr	r2, [r7, #0]
    ad2e:	4619      	mov	r1, r3
    ad30:	480f      	ldr	r0, [pc, #60]	; (ad70 <_gpio_set_direction+0xd0>)
    ad32:	4b12      	ldr	r3, [pc, #72]	; (ad7c <_gpio_set_direction+0xdc>)
    ad34:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ad36:	683b      	ldr	r3, [r7, #0]
    ad38:	b29b      	uxth	r3, r3
    ad3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ad3e:	79fb      	ldrb	r3, [r7, #7]
    ad40:	4619      	mov	r1, r3
    ad42:	480b      	ldr	r0, [pc, #44]	; (ad70 <_gpio_set_direction+0xd0>)
    ad44:	4b0c      	ldr	r3, [pc, #48]	; (ad78 <_gpio_set_direction+0xd8>)
    ad46:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ad48:	683b      	ldr	r3, [r7, #0]
    ad4a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ad4c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ad50:	79fb      	ldrb	r3, [r7, #7]
    ad52:	4619      	mov	r1, r3
    ad54:	4806      	ldr	r0, [pc, #24]	; (ad70 <_gpio_set_direction+0xd0>)
    ad56:	4b08      	ldr	r3, [pc, #32]	; (ad78 <_gpio_set_direction+0xd8>)
    ad58:	4798      	blx	r3
		break;
    ad5a:	e004      	b.n	ad66 <_gpio_set_direction+0xc6>
		ASSERT(false);
    ad5c:	2246      	movs	r2, #70	; 0x46
    ad5e:	4908      	ldr	r1, [pc, #32]	; (ad80 <_gpio_set_direction+0xe0>)
    ad60:	2000      	movs	r0, #0
    ad62:	4b08      	ldr	r3, [pc, #32]	; (ad84 <_gpio_set_direction+0xe4>)
    ad64:	4798      	blx	r3
}
    ad66:	bf00      	nop
    ad68:	3708      	adds	r7, #8
    ad6a:	46bd      	mov	sp, r7
    ad6c:	bd80      	pop	{r7, pc}
    ad6e:	bf00      	nop
    ad70:	41008000 	.word	0x41008000
    ad74:	0000aae9 	.word	0x0000aae9
    ad78:	0000ac79 	.word	0x0000ac79
    ad7c:	0000aac1 	.word	0x0000aac1
    ad80:	00010aac 	.word	0x00010aac
    ad84:	00003825 	.word	0x00003825

0000ad88 <_gpio_set_level>:
{
    ad88:	b580      	push	{r7, lr}
    ad8a:	b082      	sub	sp, #8
    ad8c:	af00      	add	r7, sp, #0
    ad8e:	4603      	mov	r3, r0
    ad90:	6039      	str	r1, [r7, #0]
    ad92:	71fb      	strb	r3, [r7, #7]
    ad94:	4613      	mov	r3, r2
    ad96:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ad98:	79bb      	ldrb	r3, [r7, #6]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	d006      	beq.n	adac <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ad9e:	79fb      	ldrb	r3, [r7, #7]
    ada0:	683a      	ldr	r2, [r7, #0]
    ada2:	4619      	mov	r1, r3
    ada4:	4806      	ldr	r0, [pc, #24]	; (adc0 <_gpio_set_level+0x38>)
    ada6:	4b07      	ldr	r3, [pc, #28]	; (adc4 <_gpio_set_level+0x3c>)
    ada8:	4798      	blx	r3
}
    adaa:	e005      	b.n	adb8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    adac:	79fb      	ldrb	r3, [r7, #7]
    adae:	683a      	ldr	r2, [r7, #0]
    adb0:	4619      	mov	r1, r3
    adb2:	4803      	ldr	r0, [pc, #12]	; (adc0 <_gpio_set_level+0x38>)
    adb4:	4b04      	ldr	r3, [pc, #16]	; (adc8 <_gpio_set_level+0x40>)
    adb6:	4798      	blx	r3
}
    adb8:	bf00      	nop
    adba:	3708      	adds	r7, #8
    adbc:	46bd      	mov	sp, r7
    adbe:	bd80      	pop	{r7, pc}
    adc0:	41008000 	.word	0x41008000
    adc4:	0000ab11 	.word	0x0000ab11
    adc8:	0000ab39 	.word	0x0000ab39

0000adcc <_gpio_set_pin_function>:
{
    adcc:	b590      	push	{r4, r7, lr}
    adce:	b085      	sub	sp, #20
    add0:	af00      	add	r7, sp, #0
    add2:	6078      	str	r0, [r7, #4]
    add4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    add6:	687b      	ldr	r3, [r7, #4]
    add8:	095b      	lsrs	r3, r3, #5
    adda:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    addc:	687b      	ldr	r3, [r7, #4]
    adde:	b2db      	uxtb	r3, r3
    ade0:	f003 031f 	and.w	r3, r3, #31
    ade4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ade6:	683b      	ldr	r3, [r7, #0]
    ade8:	f1b3 3fff 	cmp.w	r3, #4294967295
    adec:	d106      	bne.n	adfc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    adee:	7bba      	ldrb	r2, [r7, #14]
    adf0:	7bf9      	ldrb	r1, [r7, #15]
    adf2:	2300      	movs	r3, #0
    adf4:	4812      	ldr	r0, [pc, #72]	; (ae40 <_gpio_set_pin_function+0x74>)
    adf6:	4c13      	ldr	r4, [pc, #76]	; (ae44 <_gpio_set_pin_function+0x78>)
    adf8:	47a0      	blx	r4
}
    adfa:	e01d      	b.n	ae38 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    adfc:	7bba      	ldrb	r2, [r7, #14]
    adfe:	7bf9      	ldrb	r1, [r7, #15]
    ae00:	2301      	movs	r3, #1
    ae02:	480f      	ldr	r0, [pc, #60]	; (ae40 <_gpio_set_pin_function+0x74>)
    ae04:	4c0f      	ldr	r4, [pc, #60]	; (ae44 <_gpio_set_pin_function+0x78>)
    ae06:	47a0      	blx	r4
		if (pin & 1) {
    ae08:	7bbb      	ldrb	r3, [r7, #14]
    ae0a:	f003 0301 	and.w	r3, r3, #1
    ae0e:	2b00      	cmp	r3, #0
    ae10:	d009      	beq.n	ae26 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ae12:	7bbb      	ldrb	r3, [r7, #14]
    ae14:	085b      	lsrs	r3, r3, #1
    ae16:	b2da      	uxtb	r2, r3
    ae18:	683b      	ldr	r3, [r7, #0]
    ae1a:	b2db      	uxtb	r3, r3
    ae1c:	7bf9      	ldrb	r1, [r7, #15]
    ae1e:	4808      	ldr	r0, [pc, #32]	; (ae40 <_gpio_set_pin_function+0x74>)
    ae20:	4c09      	ldr	r4, [pc, #36]	; (ae48 <_gpio_set_pin_function+0x7c>)
    ae22:	47a0      	blx	r4
}
    ae24:	e008      	b.n	ae38 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    ae26:	7bbb      	ldrb	r3, [r7, #14]
    ae28:	085b      	lsrs	r3, r3, #1
    ae2a:	b2da      	uxtb	r2, r3
    ae2c:	683b      	ldr	r3, [r7, #0]
    ae2e:	b2db      	uxtb	r3, r3
    ae30:	7bf9      	ldrb	r1, [r7, #15]
    ae32:	4803      	ldr	r0, [pc, #12]	; (ae40 <_gpio_set_pin_function+0x74>)
    ae34:	4c05      	ldr	r4, [pc, #20]	; (ae4c <_gpio_set_pin_function+0x80>)
    ae36:	47a0      	blx	r4
}
    ae38:	bf00      	nop
    ae3a:	3714      	adds	r7, #20
    ae3c:	46bd      	mov	sp, r7
    ae3e:	bd90      	pop	{r4, r7, pc}
    ae40:	41008000 	.word	0x41008000
    ae44:	0000ac1f 	.word	0x0000ac1f
    ae48:	0000abc1 	.word	0x0000abc1
    ae4c:	0000ab61 	.word	0x0000ab61

0000ae50 <gpio_set_pin_function>:
{
    ae50:	b580      	push	{r7, lr}
    ae52:	b082      	sub	sp, #8
    ae54:	af00      	add	r7, sp, #0
    ae56:	6078      	str	r0, [r7, #4]
    ae58:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    ae5a:	6839      	ldr	r1, [r7, #0]
    ae5c:	6878      	ldr	r0, [r7, #4]
    ae5e:	4b03      	ldr	r3, [pc, #12]	; (ae6c <gpio_set_pin_function+0x1c>)
    ae60:	4798      	blx	r3
}
    ae62:	bf00      	nop
    ae64:	3708      	adds	r7, #8
    ae66:	46bd      	mov	sp, r7
    ae68:	bd80      	pop	{r7, pc}
    ae6a:	bf00      	nop
    ae6c:	0000adcd 	.word	0x0000adcd

0000ae70 <gpio_set_pin_direction>:
{
    ae70:	b580      	push	{r7, lr}
    ae72:	b082      	sub	sp, #8
    ae74:	af00      	add	r7, sp, #0
    ae76:	4603      	mov	r3, r0
    ae78:	460a      	mov	r2, r1
    ae7a:	71fb      	strb	r3, [r7, #7]
    ae7c:	4613      	mov	r3, r2
    ae7e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    ae80:	79fb      	ldrb	r3, [r7, #7]
    ae82:	095b      	lsrs	r3, r3, #5
    ae84:	b2d8      	uxtb	r0, r3
    ae86:	79fb      	ldrb	r3, [r7, #7]
    ae88:	f003 031f 	and.w	r3, r3, #31
    ae8c:	2201      	movs	r2, #1
    ae8e:	fa02 f303 	lsl.w	r3, r2, r3
    ae92:	79ba      	ldrb	r2, [r7, #6]
    ae94:	4619      	mov	r1, r3
    ae96:	4b03      	ldr	r3, [pc, #12]	; (aea4 <gpio_set_pin_direction+0x34>)
    ae98:	4798      	blx	r3
}
    ae9a:	bf00      	nop
    ae9c:	3708      	adds	r7, #8
    ae9e:	46bd      	mov	sp, r7
    aea0:	bd80      	pop	{r7, pc}
    aea2:	bf00      	nop
    aea4:	0000aca1 	.word	0x0000aca1

0000aea8 <gpio_set_pin_level>:
{
    aea8:	b580      	push	{r7, lr}
    aeaa:	b082      	sub	sp, #8
    aeac:	af00      	add	r7, sp, #0
    aeae:	4603      	mov	r3, r0
    aeb0:	460a      	mov	r2, r1
    aeb2:	71fb      	strb	r3, [r7, #7]
    aeb4:	4613      	mov	r3, r2
    aeb6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    aeb8:	79fb      	ldrb	r3, [r7, #7]
    aeba:	095b      	lsrs	r3, r3, #5
    aebc:	b2d8      	uxtb	r0, r3
    aebe:	79fb      	ldrb	r3, [r7, #7]
    aec0:	f003 031f 	and.w	r3, r3, #31
    aec4:	2201      	movs	r2, #1
    aec6:	fa02 f303 	lsl.w	r3, r2, r3
    aeca:	79ba      	ldrb	r2, [r7, #6]
    aecc:	4619      	mov	r1, r3
    aece:	4b03      	ldr	r3, [pc, #12]	; (aedc <gpio_set_pin_level+0x34>)
    aed0:	4798      	blx	r3
}
    aed2:	bf00      	nop
    aed4:	3708      	adds	r7, #8
    aed6:	46bd      	mov	sp, r7
    aed8:	bd80      	pop	{r7, pc}
    aeda:	bf00      	nop
    aedc:	0000ad89 	.word	0x0000ad89

0000aee0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    aee0:	b580      	push	{r7, lr}
    aee2:	b082      	sub	sp, #8
    aee4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    aee6:	2100      	movs	r1, #0
    aee8:	2008      	movs	r0, #8
    aeea:	4b24      	ldr	r3, [pc, #144]	; (af7c <QSPI_N25Q256_exit_xip+0x9c>)
    aeec:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    aeee:	2100      	movs	r1, #0
    aef0:	202b      	movs	r0, #43	; 0x2b
    aef2:	4b22      	ldr	r3, [pc, #136]	; (af7c <QSPI_N25Q256_exit_xip+0x9c>)
    aef4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    aef6:	2100      	movs	r1, #0
    aef8:	202a      	movs	r0, #42	; 0x2a
    aefa:	4b20      	ldr	r3, [pc, #128]	; (af7c <QSPI_N25Q256_exit_xip+0x9c>)
    aefc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    aefe:	2102      	movs	r1, #2
    af00:	2008      	movs	r0, #8
    af02:	4b1f      	ldr	r3, [pc, #124]	; (af80 <QSPI_N25Q256_exit_xip+0xa0>)
    af04:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    af06:	2102      	movs	r1, #2
    af08:	202b      	movs	r0, #43	; 0x2b
    af0a:	4b1d      	ldr	r3, [pc, #116]	; (af80 <QSPI_N25Q256_exit_xip+0xa0>)
    af0c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    af0e:	2102      	movs	r1, #2
    af10:	202a      	movs	r0, #42	; 0x2a
    af12:	4b1b      	ldr	r3, [pc, #108]	; (af80 <QSPI_N25Q256_exit_xip+0xa0>)
    af14:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    af16:	2101      	movs	r1, #1
    af18:	2008      	movs	r0, #8
    af1a:	4b1a      	ldr	r3, [pc, #104]	; (af84 <QSPI_N25Q256_exit_xip+0xa4>)
    af1c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    af1e:	2100      	movs	r1, #0
    af20:	202b      	movs	r0, #43	; 0x2b
    af22:	4b18      	ldr	r3, [pc, #96]	; (af84 <QSPI_N25Q256_exit_xip+0xa4>)
    af24:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    af26:	2100      	movs	r1, #0
    af28:	202a      	movs	r0, #42	; 0x2a
    af2a:	4b16      	ldr	r3, [pc, #88]	; (af84 <QSPI_N25Q256_exit_xip+0xa4>)
    af2c:	4798      	blx	r3

	delay_us(1);
    af2e:	2001      	movs	r0, #1
    af30:	4b15      	ldr	r3, [pc, #84]	; (af88 <QSPI_N25Q256_exit_xip+0xa8>)
    af32:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    af34:	2300      	movs	r3, #0
    af36:	607b      	str	r3, [r7, #4]
    af38:	e010      	b.n	af5c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    af3a:	2101      	movs	r1, #1
    af3c:	202a      	movs	r0, #42	; 0x2a
    af3e:	4b11      	ldr	r3, [pc, #68]	; (af84 <QSPI_N25Q256_exit_xip+0xa4>)
    af40:	4798      	blx	r3
		delay_us(1);
    af42:	2001      	movs	r0, #1
    af44:	4b10      	ldr	r3, [pc, #64]	; (af88 <QSPI_N25Q256_exit_xip+0xa8>)
    af46:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    af48:	2100      	movs	r1, #0
    af4a:	202a      	movs	r0, #42	; 0x2a
    af4c:	4b0d      	ldr	r3, [pc, #52]	; (af84 <QSPI_N25Q256_exit_xip+0xa4>)
    af4e:	4798      	blx	r3
		delay_us(1);
    af50:	2001      	movs	r0, #1
    af52:	4b0d      	ldr	r3, [pc, #52]	; (af88 <QSPI_N25Q256_exit_xip+0xa8>)
    af54:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    af56:	687b      	ldr	r3, [r7, #4]
    af58:	3301      	adds	r3, #1
    af5a:	607b      	str	r3, [r7, #4]
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	2b06      	cmp	r3, #6
    af60:	ddeb      	ble.n	af3a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    af62:	2101      	movs	r1, #1
    af64:	202b      	movs	r0, #43	; 0x2b
    af66:	4b07      	ldr	r3, [pc, #28]	; (af84 <QSPI_N25Q256_exit_xip+0xa4>)
    af68:	4798      	blx	r3
	delay_us(1);
    af6a:	2001      	movs	r0, #1
    af6c:	4b06      	ldr	r3, [pc, #24]	; (af88 <QSPI_N25Q256_exit_xip+0xa8>)
    af6e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    af70:	4b06      	ldr	r3, [pc, #24]	; (af8c <QSPI_N25Q256_exit_xip+0xac>)
    af72:	4798      	blx	r3
}
    af74:	bf00      	nop
    af76:	3708      	adds	r7, #8
    af78:	46bd      	mov	sp, r7
    af7a:	bd80      	pop	{r7, pc}
    af7c:	0000ae51 	.word	0x0000ae51
    af80:	0000ae71 	.word	0x0000ae71
    af84:	0000aea9 	.word	0x0000aea9
    af88:	0000b059 	.word	0x0000b059
    af8c:	00001389 	.word	0x00001389

0000af90 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    af90:	b598      	push	{r3, r4, r7, lr}
    af92:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    af94:	4806      	ldr	r0, [pc, #24]	; (afb0 <spi_nor_flash_init+0x20>)
    af96:	4b07      	ldr	r3, [pc, #28]	; (afb4 <spi_nor_flash_init+0x24>)
    af98:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    af9a:	2300      	movs	r3, #0
    af9c:	4a06      	ldr	r2, [pc, #24]	; (afb8 <spi_nor_flash_init+0x28>)
    af9e:	4904      	ldr	r1, [pc, #16]	; (afb0 <spi_nor_flash_init+0x20>)
    afa0:	4806      	ldr	r0, [pc, #24]	; (afbc <spi_nor_flash_init+0x2c>)
    afa2:	4c07      	ldr	r4, [pc, #28]	; (afc0 <spi_nor_flash_init+0x30>)
    afa4:	47a0      	blx	r4
    afa6:	4602      	mov	r2, r0
    afa8:	4b06      	ldr	r3, [pc, #24]	; (afc4 <spi_nor_flash_init+0x34>)
    afaa:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    afac:	bf00      	nop
    afae:	bd98      	pop	{r3, r4, r7, pc}
    afb0:	2000a968 	.word	0x2000a968
    afb4:	000026cd 	.word	0x000026cd
    afb8:	0000aee1 	.word	0x0000aee1
    afbc:	20000fcc 	.word	0x20000fcc
    afc0:	0000b7bd 	.word	0x0000b7bd
    afc4:	2000ab68 	.word	0x2000ab68

0000afc8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    afc8:	b580      	push	{r7, lr}
    afca:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    afcc:	4805      	ldr	r0, [pc, #20]	; (afe4 <cdc_device_acm_init+0x1c>)
    afce:	4b06      	ldr	r3, [pc, #24]	; (afe8 <cdc_device_acm_init+0x20>)
    afd0:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    afd2:	4b06      	ldr	r3, [pc, #24]	; (afec <cdc_device_acm_init+0x24>)
    afd4:	4798      	blx	r3

	usbdc_start(single_desc);
    afd6:	4806      	ldr	r0, [pc, #24]	; (aff0 <cdc_device_acm_init+0x28>)
    afd8:	4b06      	ldr	r3, [pc, #24]	; (aff4 <cdc_device_acm_init+0x2c>)
    afda:	4798      	blx	r3
	usbdc_attach();
    afdc:	4b06      	ldr	r3, [pc, #24]	; (aff8 <cdc_device_acm_init+0x30>)
    afde:	4798      	blx	r3
}
    afe0:	bf00      	nop
    afe2:	bd80      	pop	{r7, pc}
    afe4:	2000101c 	.word	0x2000101c
    afe8:	0000cee5 	.word	0x0000cee5
    afec:	0000c15d 	.word	0x0000c15d
    aff0:	20000200 	.word	0x20000200
    aff4:	0000cf81 	.word	0x0000cf81
    aff8:	0000cfd1 	.word	0x0000cfd1

0000affc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    affc:	b580      	push	{r7, lr}
    affe:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b000:	4b01      	ldr	r3, [pc, #4]	; (b008 <usb_init+0xc>)
    b002:	4798      	blx	r3
}
    b004:	bf00      	nop
    b006:	bd80      	pop	{r7, pc}
    b008:	0000afc9 	.word	0x0000afc9

0000b00c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b00c:	b480      	push	{r7}
    b00e:	b085      	sub	sp, #20
    b010:	af00      	add	r7, sp, #0
    b012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b014:	f3ef 8310 	mrs	r3, PRIMASK
    b018:	60fb      	str	r3, [r7, #12]
  return(result);
    b01a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b01c:	687b      	ldr	r3, [r7, #4]
    b01e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b020:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b022:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b026:	bf00      	nop
    b028:	3714      	adds	r7, #20
    b02a:	46bd      	mov	sp, r7
    b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b030:	4770      	bx	lr

0000b032 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b032:	b480      	push	{r7}
    b034:	b085      	sub	sp, #20
    b036:	af00      	add	r7, sp, #0
    b038:	6078      	str	r0, [r7, #4]
    b03a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b03e:	687b      	ldr	r3, [r7, #4]
    b040:	681b      	ldr	r3, [r3, #0]
    b042:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b044:	68fb      	ldr	r3, [r7, #12]
    b046:	f383 8810 	msr	PRIMASK, r3
}
    b04a:	bf00      	nop
    b04c:	3714      	adds	r7, #20
    b04e:	46bd      	mov	sp, r7
    b050:	f85d 7b04 	ldr.w	r7, [sp], #4
    b054:	4770      	bx	lr
	...

0000b058 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    b058:	b590      	push	{r4, r7, lr}
    b05a:	b083      	sub	sp, #12
    b05c:	af00      	add	r7, sp, #0
    b05e:	4603      	mov	r3, r0
    b060:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    b062:	4b07      	ldr	r3, [pc, #28]	; (b080 <delay_us+0x28>)
    b064:	681c      	ldr	r4, [r3, #0]
    b066:	88fb      	ldrh	r3, [r7, #6]
    b068:	4618      	mov	r0, r3
    b06a:	4b06      	ldr	r3, [pc, #24]	; (b084 <delay_us+0x2c>)
    b06c:	4798      	blx	r3
    b06e:	4603      	mov	r3, r0
    b070:	4619      	mov	r1, r3
    b072:	4620      	mov	r0, r4
    b074:	4b04      	ldr	r3, [pc, #16]	; (b088 <delay_us+0x30>)
    b076:	4798      	blx	r3
}
    b078:	bf00      	nop
    b07a:	370c      	adds	r7, #12
    b07c:	46bd      	mov	sp, r7
    b07e:	bd90      	pop	{r4, r7, pc}
    b080:	2000105c 	.word	0x2000105c
    b084:	0000b265 	.word	0x0000b265
    b088:	0000b3f9 	.word	0x0000b3f9

0000b08c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    b08c:	b590      	push	{r4, r7, lr}
    b08e:	b083      	sub	sp, #12
    b090:	af00      	add	r7, sp, #0
    b092:	4603      	mov	r3, r0
    b094:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    b096:	4b07      	ldr	r3, [pc, #28]	; (b0b4 <delay_ms+0x28>)
    b098:	681c      	ldr	r4, [r3, #0]
    b09a:	88fb      	ldrh	r3, [r7, #6]
    b09c:	4618      	mov	r0, r3
    b09e:	4b06      	ldr	r3, [pc, #24]	; (b0b8 <delay_ms+0x2c>)
    b0a0:	4798      	blx	r3
    b0a2:	4603      	mov	r3, r0
    b0a4:	4619      	mov	r1, r3
    b0a6:	4620      	mov	r0, r4
    b0a8:	4b04      	ldr	r3, [pc, #16]	; (b0bc <delay_ms+0x30>)
    b0aa:	4798      	blx	r3
}
    b0ac:	bf00      	nop
    b0ae:	370c      	adds	r7, #12
    b0b0:	46bd      	mov	sp, r7
    b0b2:	bd90      	pop	{r4, r7, pc}
    b0b4:	2000105c 	.word	0x2000105c
    b0b8:	0000b3d1 	.word	0x0000b3d1
    b0bc:	0000b3f9 	.word	0x0000b3f9

0000b0c0 <__NVIC_SetPendingIRQ>:
{
    b0c0:	b480      	push	{r7}
    b0c2:	b083      	sub	sp, #12
    b0c4:	af00      	add	r7, sp, #0
    b0c6:	4603      	mov	r3, r0
    b0c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b0ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	db0c      	blt.n	b0ec <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b0d2:	4909      	ldr	r1, [pc, #36]	; (b0f8 <__NVIC_SetPendingIRQ+0x38>)
    b0d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b0d8:	095b      	lsrs	r3, r3, #5
    b0da:	88fa      	ldrh	r2, [r7, #6]
    b0dc:	f002 021f 	and.w	r2, r2, #31
    b0e0:	2001      	movs	r0, #1
    b0e2:	fa00 f202 	lsl.w	r2, r0, r2
    b0e6:	3340      	adds	r3, #64	; 0x40
    b0e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b0ec:	bf00      	nop
    b0ee:	370c      	adds	r7, #12
    b0f0:	46bd      	mov	sp, r7
    b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0f6:	4770      	bx	lr
    b0f8:	e000e100 	.word	0xe000e100

0000b0fc <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    b0fc:	b580      	push	{r7, lr}
    b0fe:	b082      	sub	sp, #8
    b100:	af00      	add	r7, sp, #0
    b102:	4603      	mov	r3, r0
    b104:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    b106:	79fb      	ldrb	r3, [r7, #7]
    b108:	b21b      	sxth	r3, r3
    b10a:	4618      	mov	r0, r3
    b10c:	4b02      	ldr	r3, [pc, #8]	; (b118 <_irq_set+0x1c>)
    b10e:	4798      	blx	r3
}
    b110:	bf00      	nop
    b112:	3708      	adds	r7, #8
    b114:	46bd      	mov	sp, r7
    b116:	bd80      	pop	{r7, pc}
    b118:	0000b0c1 	.word	0x0000b0c1

0000b11c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    b11c:	b480      	push	{r7}
    b11e:	b083      	sub	sp, #12
    b120:	af00      	add	r7, sp, #0
    b122:	4603      	mov	r3, r0
    b124:	6039      	str	r1, [r7, #0]
    b126:	80fb      	strh	r3, [r7, #6]
    b128:	4613      	mov	r3, r2
    b12a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    b12c:	797b      	ldrb	r3, [r7, #5]
    b12e:	3b04      	subs	r3, #4
    b130:	2b05      	cmp	r3, #5
    b132:	d86b      	bhi.n	b20c <_get_cycles_for_us_internal+0xf0>
    b134:	a201      	add	r2, pc, #4	; (adr r2, b13c <_get_cycles_for_us_internal+0x20>)
    b136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b13a:	bf00      	nop
    b13c:	0000b1eb 	.word	0x0000b1eb
    b140:	0000b1cb 	.word	0x0000b1cb
    b144:	0000b1ad 	.word	0x0000b1ad
    b148:	0000b18f 	.word	0x0000b18f
    b14c:	0000b171 	.word	0x0000b171
    b150:	0000b155 	.word	0x0000b155
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    b154:	88fb      	ldrh	r3, [r7, #6]
    b156:	683a      	ldr	r2, [r7, #0]
    b158:	4935      	ldr	r1, [pc, #212]	; (b230 <_get_cycles_for_us_internal+0x114>)
    b15a:	fba1 1202 	umull	r1, r2, r1, r2
    b15e:	0c92      	lsrs	r2, r2, #18
    b160:	fb02 f303 	mul.w	r3, r2, r3
    b164:	3302      	adds	r3, #2
    b166:	4a33      	ldr	r2, [pc, #204]	; (b234 <_get_cycles_for_us_internal+0x118>)
    b168:	fba2 2303 	umull	r2, r3, r2, r3
    b16c:	085b      	lsrs	r3, r3, #1
    b16e:	e059      	b.n	b224 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    b170:	88fb      	ldrh	r3, [r7, #6]
    b172:	683a      	ldr	r2, [r7, #0]
    b174:	0952      	lsrs	r2, r2, #5
    b176:	4930      	ldr	r1, [pc, #192]	; (b238 <_get_cycles_for_us_internal+0x11c>)
    b178:	fba1 1202 	umull	r1, r2, r1, r2
    b17c:	09d2      	lsrs	r2, r2, #7
    b17e:	fb02 f303 	mul.w	r3, r2, r3
    b182:	331d      	adds	r3, #29
    b184:	4a2d      	ldr	r2, [pc, #180]	; (b23c <_get_cycles_for_us_internal+0x120>)
    b186:	fba2 2303 	umull	r2, r3, r2, r3
    b18a:	091b      	lsrs	r3, r3, #4
    b18c:	e04a      	b.n	b224 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    b18e:	88fb      	ldrh	r3, [r7, #6]
    b190:	683a      	ldr	r2, [r7, #0]
    b192:	492b      	ldr	r1, [pc, #172]	; (b240 <_get_cycles_for_us_internal+0x124>)
    b194:	fba1 1202 	umull	r1, r2, r1, r2
    b198:	0b52      	lsrs	r2, r2, #13
    b19a:	fb02 f303 	mul.w	r3, r2, r3
    b19e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    b1a2:	4a28      	ldr	r2, [pc, #160]	; (b244 <_get_cycles_for_us_internal+0x128>)
    b1a4:	fba2 2303 	umull	r2, r3, r2, r3
    b1a8:	095b      	lsrs	r3, r3, #5
    b1aa:	e03b      	b.n	b224 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    b1ac:	88fb      	ldrh	r3, [r7, #6]
    b1ae:	683a      	ldr	r2, [r7, #0]
    b1b0:	4925      	ldr	r1, [pc, #148]	; (b248 <_get_cycles_for_us_internal+0x12c>)
    b1b2:	fba1 1202 	umull	r1, r2, r1, r2
    b1b6:	0992      	lsrs	r2, r2, #6
    b1b8:	fb02 f303 	mul.w	r3, r2, r3
    b1bc:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    b1c0:	4a22      	ldr	r2, [pc, #136]	; (b24c <_get_cycles_for_us_internal+0x130>)
    b1c2:	fba2 2303 	umull	r2, r3, r2, r3
    b1c6:	099b      	lsrs	r3, r3, #6
    b1c8:	e02c      	b.n	b224 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    b1ca:	88fb      	ldrh	r3, [r7, #6]
    b1cc:	683a      	ldr	r2, [r7, #0]
    b1ce:	4920      	ldr	r1, [pc, #128]	; (b250 <_get_cycles_for_us_internal+0x134>)
    b1d0:	fba1 1202 	umull	r1, r2, r1, r2
    b1d4:	0952      	lsrs	r2, r2, #5
    b1d6:	fb02 f303 	mul.w	r3, r2, r3
    b1da:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    b1de:	332f      	adds	r3, #47	; 0x2f
    b1e0:	4a1c      	ldr	r2, [pc, #112]	; (b254 <_get_cycles_for_us_internal+0x138>)
    b1e2:	fba2 2303 	umull	r2, r3, r2, r3
    b1e6:	0b5b      	lsrs	r3, r3, #13
    b1e8:	e01c      	b.n	b224 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    b1ea:	88fb      	ldrh	r3, [r7, #6]
    b1ec:	683a      	ldr	r2, [r7, #0]
    b1ee:	491a      	ldr	r1, [pc, #104]	; (b258 <_get_cycles_for_us_internal+0x13c>)
    b1f0:	fba1 1202 	umull	r1, r2, r1, r2
    b1f4:	08d2      	lsrs	r2, r2, #3
    b1f6:	fb02 f303 	mul.w	r3, r2, r3
    b1fa:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    b1fe:	f203 33df 	addw	r3, r3, #991	; 0x3df
    b202:	4a16      	ldr	r2, [pc, #88]	; (b25c <_get_cycles_for_us_internal+0x140>)
    b204:	fba2 2303 	umull	r2, r3, r2, r3
    b208:	0c5b      	lsrs	r3, r3, #17
    b20a:	e00b      	b.n	b224 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    b20c:	88fb      	ldrh	r3, [r7, #6]
    b20e:	683a      	ldr	r2, [r7, #0]
    b210:	fb02 f303 	mul.w	r3, r2, r3
    b214:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    b218:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    b21c:	4a10      	ldr	r2, [pc, #64]	; (b260 <_get_cycles_for_us_internal+0x144>)
    b21e:	fba2 2303 	umull	r2, r3, r2, r3
    b222:	0c9b      	lsrs	r3, r3, #18
	}
}
    b224:	4618      	mov	r0, r3
    b226:	370c      	adds	r7, #12
    b228:	46bd      	mov	sp, r7
    b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b22e:	4770      	bx	lr
    b230:	431bde83 	.word	0x431bde83
    b234:	aaaaaaab 	.word	0xaaaaaaab
    b238:	0a7c5ac5 	.word	0x0a7c5ac5
    b23c:	88888889 	.word	0x88888889
    b240:	d1b71759 	.word	0xd1b71759
    b244:	1b4e81b5 	.word	0x1b4e81b5
    b248:	10624dd3 	.word	0x10624dd3
    b24c:	057619f1 	.word	0x057619f1
    b250:	51eb851f 	.word	0x51eb851f
    b254:	45e7b273 	.word	0x45e7b273
    b258:	cccccccd 	.word	0xcccccccd
    b25c:	6fd91d85 	.word	0x6fd91d85
    b260:	165e9f81 	.word	0x165e9f81

0000b264 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    b264:	b580      	push	{r7, lr}
    b266:	b082      	sub	sp, #8
    b268:	af00      	add	r7, sp, #0
    b26a:	4603      	mov	r3, r0
    b26c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    b26e:	88fb      	ldrh	r3, [r7, #6]
    b270:	2209      	movs	r2, #9
    b272:	4904      	ldr	r1, [pc, #16]	; (b284 <_get_cycles_for_us+0x20>)
    b274:	4618      	mov	r0, r3
    b276:	4b04      	ldr	r3, [pc, #16]	; (b288 <_get_cycles_for_us+0x24>)
    b278:	4798      	blx	r3
    b27a:	4603      	mov	r3, r0
}
    b27c:	4618      	mov	r0, r3
    b27e:	3708      	adds	r7, #8
    b280:	46bd      	mov	sp, r7
    b282:	bd80      	pop	{r7, pc}
    b284:	07270e00 	.word	0x07270e00
    b288:	0000b11d 	.word	0x0000b11d

0000b28c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    b28c:	b480      	push	{r7}
    b28e:	b083      	sub	sp, #12
    b290:	af00      	add	r7, sp, #0
    b292:	4603      	mov	r3, r0
    b294:	6039      	str	r1, [r7, #0]
    b296:	80fb      	strh	r3, [r7, #6]
    b298:	4613      	mov	r3, r2
    b29a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    b29c:	797b      	ldrb	r3, [r7, #5]
    b29e:	3b04      	subs	r3, #4
    b2a0:	2b05      	cmp	r3, #5
    b2a2:	d870      	bhi.n	b386 <_get_cycles_for_ms_internal+0xfa>
    b2a4:	a201      	add	r2, pc, #4	; (adr r2, b2ac <_get_cycles_for_ms_internal+0x20>)
    b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b2aa:	bf00      	nop
    b2ac:	0000b369 	.word	0x0000b369
    b2b0:	0000b34d 	.word	0x0000b34d
    b2b4:	0000b331 	.word	0x0000b331
    b2b8:	0000b30d 	.word	0x0000b30d
    b2bc:	0000b2e9 	.word	0x0000b2e9
    b2c0:	0000b2c5 	.word	0x0000b2c5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    b2c4:	88fb      	ldrh	r3, [r7, #6]
    b2c6:	683a      	ldr	r2, [r7, #0]
    b2c8:	4937      	ldr	r1, [pc, #220]	; (b3a8 <_get_cycles_for_ms_internal+0x11c>)
    b2ca:	fba1 1202 	umull	r1, r2, r1, r2
    b2ce:	0c92      	lsrs	r2, r2, #18
    b2d0:	fb02 f303 	mul.w	r3, r2, r3
    b2d4:	3302      	adds	r3, #2
    b2d6:	4a35      	ldr	r2, [pc, #212]	; (b3ac <_get_cycles_for_ms_internal+0x120>)
    b2d8:	fba2 2303 	umull	r2, r3, r2, r3
    b2dc:	085b      	lsrs	r3, r3, #1
    b2de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2e2:	fb02 f303 	mul.w	r3, r2, r3
    b2e6:	e058      	b.n	b39a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    b2e8:	88fb      	ldrh	r3, [r7, #6]
    b2ea:	683a      	ldr	r2, [r7, #0]
    b2ec:	0952      	lsrs	r2, r2, #5
    b2ee:	4930      	ldr	r1, [pc, #192]	; (b3b0 <_get_cycles_for_ms_internal+0x124>)
    b2f0:	fba1 1202 	umull	r1, r2, r1, r2
    b2f4:	09d2      	lsrs	r2, r2, #7
    b2f6:	fb02 f303 	mul.w	r3, r2, r3
    b2fa:	3302      	adds	r3, #2
    b2fc:	4a2b      	ldr	r2, [pc, #172]	; (b3ac <_get_cycles_for_ms_internal+0x120>)
    b2fe:	fba2 2303 	umull	r2, r3, r2, r3
    b302:	085b      	lsrs	r3, r3, #1
    b304:	2264      	movs	r2, #100	; 0x64
    b306:	fb02 f303 	mul.w	r3, r2, r3
    b30a:	e046      	b.n	b39a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    b30c:	88fb      	ldrh	r3, [r7, #6]
    b30e:	683a      	ldr	r2, [r7, #0]
    b310:	4928      	ldr	r1, [pc, #160]	; (b3b4 <_get_cycles_for_ms_internal+0x128>)
    b312:	fba1 1202 	umull	r1, r2, r1, r2
    b316:	0b52      	lsrs	r2, r2, #13
    b318:	fb02 f303 	mul.w	r3, r2, r3
    b31c:	3302      	adds	r3, #2
    b31e:	4a23      	ldr	r2, [pc, #140]	; (b3ac <_get_cycles_for_ms_internal+0x120>)
    b320:	fba2 2303 	umull	r2, r3, r2, r3
    b324:	085a      	lsrs	r2, r3, #1
    b326:	4613      	mov	r3, r2
    b328:	009b      	lsls	r3, r3, #2
    b32a:	4413      	add	r3, r2
    b32c:	005b      	lsls	r3, r3, #1
    b32e:	e034      	b.n	b39a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    b330:	88fb      	ldrh	r3, [r7, #6]
    b332:	683a      	ldr	r2, [r7, #0]
    b334:	4920      	ldr	r1, [pc, #128]	; (b3b8 <_get_cycles_for_ms_internal+0x12c>)
    b336:	fba1 1202 	umull	r1, r2, r1, r2
    b33a:	0992      	lsrs	r2, r2, #6
    b33c:	fb02 f303 	mul.w	r3, r2, r3
    b340:	3302      	adds	r3, #2
    b342:	4a1a      	ldr	r2, [pc, #104]	; (b3ac <_get_cycles_for_ms_internal+0x120>)
    b344:	fba2 2303 	umull	r2, r3, r2, r3
    b348:	085b      	lsrs	r3, r3, #1
    b34a:	e026      	b.n	b39a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    b34c:	88fb      	ldrh	r3, [r7, #6]
    b34e:	683a      	ldr	r2, [r7, #0]
    b350:	491a      	ldr	r1, [pc, #104]	; (b3bc <_get_cycles_for_ms_internal+0x130>)
    b352:	fba1 1202 	umull	r1, r2, r1, r2
    b356:	0952      	lsrs	r2, r2, #5
    b358:	fb02 f303 	mul.w	r3, r2, r3
    b35c:	331d      	adds	r3, #29
    b35e:	4a18      	ldr	r2, [pc, #96]	; (b3c0 <_get_cycles_for_ms_internal+0x134>)
    b360:	fba2 2303 	umull	r2, r3, r2, r3
    b364:	091b      	lsrs	r3, r3, #4
    b366:	e018      	b.n	b39a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    b368:	88fb      	ldrh	r3, [r7, #6]
    b36a:	683a      	ldr	r2, [r7, #0]
    b36c:	4915      	ldr	r1, [pc, #84]	; (b3c4 <_get_cycles_for_ms_internal+0x138>)
    b36e:	fba1 1202 	umull	r1, r2, r1, r2
    b372:	08d2      	lsrs	r2, r2, #3
    b374:	fb02 f303 	mul.w	r3, r2, r3
    b378:	f203 132b 	addw	r3, r3, #299	; 0x12b
    b37c:	4a12      	ldr	r2, [pc, #72]	; (b3c8 <_get_cycles_for_ms_internal+0x13c>)
    b37e:	fba2 2303 	umull	r2, r3, r2, r3
    b382:	095b      	lsrs	r3, r3, #5
    b384:	e009      	b.n	b39a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    b386:	88fb      	ldrh	r3, [r7, #6]
    b388:	683a      	ldr	r2, [r7, #0]
    b38a:	fb02 f303 	mul.w	r3, r2, r3
    b38e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    b392:	4a0e      	ldr	r2, [pc, #56]	; (b3cc <_get_cycles_for_ms_internal+0x140>)
    b394:	fba2 2303 	umull	r2, r3, r2, r3
    b398:	099b      	lsrs	r3, r3, #6
	}
}
    b39a:	4618      	mov	r0, r3
    b39c:	370c      	adds	r7, #12
    b39e:	46bd      	mov	sp, r7
    b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3a4:	4770      	bx	lr
    b3a6:	bf00      	nop
    b3a8:	431bde83 	.word	0x431bde83
    b3ac:	aaaaaaab 	.word	0xaaaaaaab
    b3b0:	0a7c5ac5 	.word	0x0a7c5ac5
    b3b4:	d1b71759 	.word	0xd1b71759
    b3b8:	10624dd3 	.word	0x10624dd3
    b3bc:	51eb851f 	.word	0x51eb851f
    b3c0:	88888889 	.word	0x88888889
    b3c4:	cccccccd 	.word	0xcccccccd
    b3c8:	1b4e81b5 	.word	0x1b4e81b5
    b3cc:	057619f1 	.word	0x057619f1

0000b3d0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    b3d0:	b580      	push	{r7, lr}
    b3d2:	b082      	sub	sp, #8
    b3d4:	af00      	add	r7, sp, #0
    b3d6:	4603      	mov	r3, r0
    b3d8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    b3da:	88fb      	ldrh	r3, [r7, #6]
    b3dc:	2209      	movs	r2, #9
    b3de:	4904      	ldr	r1, [pc, #16]	; (b3f0 <_get_cycles_for_ms+0x20>)
    b3e0:	4618      	mov	r0, r3
    b3e2:	4b04      	ldr	r3, [pc, #16]	; (b3f4 <_get_cycles_for_ms+0x24>)
    b3e4:	4798      	blx	r3
    b3e6:	4603      	mov	r3, r0
}
    b3e8:	4618      	mov	r0, r3
    b3ea:	3708      	adds	r7, #8
    b3ec:	46bd      	mov	sp, r7
    b3ee:	bd80      	pop	{r7, pc}
    b3f0:	07270e00 	.word	0x07270e00
    b3f4:	0000b28d 	.word	0x0000b28d

0000b3f8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    b3f8:	b480      	push	{r7}
    b3fa:	b083      	sub	sp, #12
    b3fc:	af00      	add	r7, sp, #0
    b3fe:	6078      	str	r0, [r7, #4]
    b400:	6039      	str	r1, [r7, #0]
    b402:	bf00      	nop
    b404:	f3af 8000 	nop.w

0000b408 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    b408:	3901      	subs	r1, #1
    b40a:	d8fd      	bhi.n	b408 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    b40c:	bf00      	nop
    b40e:	370c      	adds	r7, #12
    b410:	46bd      	mov	sp, r7
    b412:	f85d 7b04 	ldr.w	r7, [sp], #4
    b416:	4770      	bx	lr

0000b418 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b418:	b580      	push	{r7, lr}
    b41a:	b08c      	sub	sp, #48	; 0x30
    b41c:	af00      	add	r7, sp, #0
    b41e:	6078      	str	r0, [r7, #4]
    b420:	460b      	mov	r3, r1
    b422:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b424:	687b      	ldr	r3, [r7, #4]
    b426:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b428:	687b      	ldr	r3, [r7, #4]
    b42a:	681b      	ldr	r3, [r3, #0]
    b42c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b42e:	f107 030c 	add.w	r3, r7, #12
    b432:	2200      	movs	r2, #0
    b434:	601a      	str	r2, [r3, #0]
    b436:	605a      	str	r2, [r3, #4]
    b438:	609a      	str	r2, [r3, #8]
    b43a:	60da      	str	r2, [r3, #12]
    b43c:	611a      	str	r2, [r3, #16]
    b43e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b442:	7b1b      	ldrb	r3, [r3, #12]
    b444:	2b00      	cmp	r3, #0
    b446:	d001      	beq.n	b44c <n25q256a_xip_confirm+0x34>
    b448:	2206      	movs	r2, #6
    b44a:	e000      	b.n	b44e <n25q256a_xip_confirm+0x36>
    b44c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b44e:	7b3b      	ldrb	r3, [r7, #12]
    b450:	f362 0302 	bfi	r3, r2, #0, #3
    b454:	733b      	strb	r3, [r7, #12]
    b456:	7b3b      	ldrb	r3, [r7, #12]
    b458:	f043 0310 	orr.w	r3, r3, #16
    b45c:	733b      	strb	r3, [r7, #12]
    b45e:	7b3b      	ldrb	r3, [r7, #12]
    b460:	f043 0320 	orr.w	r3, r3, #32
    b464:	733b      	strb	r3, [r7, #12]
    b466:	7b3b      	ldrb	r3, [r7, #12]
    b468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b46c:	733b      	strb	r3, [r7, #12]
    b46e:	7b3b      	ldrb	r3, [r7, #12]
    b470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b474:	733b      	strb	r3, [r7, #12]
    b476:	7b7b      	ldrb	r3, [r7, #13]
    b478:	f043 0303 	orr.w	r3, r3, #3
    b47c:	737b      	strb	r3, [r7, #13]
    b47e:	7b7b      	ldrb	r3, [r7, #13]
    b480:	2201      	movs	r2, #1
    b482:	f362 1305 	bfi	r3, r2, #4, #2
    b486:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b48a:	7b1b      	ldrb	r3, [r3, #12]
    b48c:	2b00      	cmp	r3, #0
    b48e:	d001      	beq.n	b494 <n25q256a_xip_confirm+0x7c>
    b490:	2208      	movs	r2, #8
    b492:	e000      	b.n	b496 <n25q256a_xip_confirm+0x7e>
    b494:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b496:	7bbb      	ldrb	r3, [r7, #14]
    b498:	f362 0304 	bfi	r3, r2, #0, #5
    b49c:	73bb      	strb	r3, [r7, #14]
    b49e:	230b      	movs	r3, #11
    b4a0:	743b      	strb	r3, [r7, #16]
    b4a2:	78fb      	ldrb	r3, [r7, #3]
    b4a4:	2b00      	cmp	r3, #0
    b4a6:	d001      	beq.n	b4ac <n25q256a_xip_confirm+0x94>
    b4a8:	2300      	movs	r3, #0
    b4aa:	e000      	b.n	b4ae <n25q256a_xip_confirm+0x96>
    b4ac:	23ff      	movs	r3, #255	; 0xff
    b4ae:	747b      	strb	r3, [r7, #17]
    b4b0:	2301      	movs	r3, #1
    b4b2:	61bb      	str	r3, [r7, #24]
    b4b4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b4b8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b4ba:	f107 030c 	add.w	r3, r7, #12
    b4be:	4619      	mov	r1, r3
    b4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b4c2:	4b07      	ldr	r3, [pc, #28]	; (b4e0 <n25q256a_xip_confirm+0xc8>)
    b4c4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b4c6:	78fb      	ldrb	r3, [r7, #3]
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d001      	beq.n	b4d0 <n25q256a_xip_confirm+0xb8>
    b4cc:	2202      	movs	r2, #2
    b4ce:	e000      	b.n	b4d2 <n25q256a_xip_confirm+0xba>
    b4d0:	2201      	movs	r2, #1
    b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4d4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b4d6:	2300      	movs	r3, #0
}
    b4d8:	4618      	mov	r0, r3
    b4da:	3730      	adds	r7, #48	; 0x30
    b4dc:	46bd      	mov	sp, r7
    b4de:	bd80      	pop	{r7, pc}
    b4e0:	00002745 	.word	0x00002745

0000b4e4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b4e4:	b580      	push	{r7, lr}
    b4e6:	b08c      	sub	sp, #48	; 0x30
    b4e8:	af00      	add	r7, sp, #0
    b4ea:	6078      	str	r0, [r7, #4]
    b4ec:	460b      	mov	r3, r1
    b4ee:	70fb      	strb	r3, [r7, #3]
    b4f0:	4613      	mov	r3, r2
    b4f2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b4f4:	2300      	movs	r3, #0
    b4f6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b4f8:	687b      	ldr	r3, [r7, #4]
    b4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b4fc:	687b      	ldr	r3, [r7, #4]
    b4fe:	681b      	ldr	r3, [r3, #0]
    b500:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b502:	f107 030c 	add.w	r3, r7, #12
    b506:	2200      	movs	r2, #0
    b508:	601a      	str	r2, [r3, #0]
    b50a:	605a      	str	r2, [r3, #4]
    b50c:	609a      	str	r2, [r3, #8]
    b50e:	60da      	str	r2, [r3, #12]
    b510:	611a      	str	r2, [r3, #16]
    b512:	615a      	str	r2, [r3, #20]
    b514:	78fb      	ldrb	r3, [r7, #3]
    b516:	f003 0307 	and.w	r3, r3, #7
    b51a:	b2da      	uxtb	r2, r3
    b51c:	7b3b      	ldrb	r3, [r7, #12]
    b51e:	f362 0302 	bfi	r3, r2, #0, #3
    b522:	733b      	strb	r3, [r7, #12]
    b524:	7b3b      	ldrb	r3, [r7, #12]
    b526:	f043 0310 	orr.w	r3, r3, #16
    b52a:	733b      	strb	r3, [r7, #12]
    b52c:	7b3b      	ldrb	r3, [r7, #12]
    b52e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b532:	733b      	strb	r3, [r7, #12]
    b534:	78bb      	ldrb	r3, [r7, #2]
    b536:	743b      	strb	r3, [r7, #16]
    b538:	2301      	movs	r3, #1
    b53a:	61bb      	str	r3, [r7, #24]
    b53c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b540:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b544:	7b5b      	ldrb	r3, [r3, #13]
    b546:	2b00      	cmp	r3, #0
    b548:	d003      	beq.n	b552 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b54a:	2100      	movs	r1, #0
    b54c:	6878      	ldr	r0, [r7, #4]
    b54e:	4b0a      	ldr	r3, [pc, #40]	; (b578 <n25q256a_read_reg+0x94>)
    b550:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b552:	f107 030c 	add.w	r3, r7, #12
    b556:	4619      	mov	r1, r3
    b558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b55a:	4b08      	ldr	r3, [pc, #32]	; (b57c <n25q256a_read_reg+0x98>)
    b55c:	4798      	blx	r3
	if (n25q->xip_mode) {
    b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b560:	7b5b      	ldrb	r3, [r3, #13]
    b562:	2b00      	cmp	r3, #0
    b564:	d003      	beq.n	b56e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b566:	2101      	movs	r1, #1
    b568:	6878      	ldr	r0, [r7, #4]
    b56a:	4b03      	ldr	r3, [pc, #12]	; (b578 <n25q256a_read_reg+0x94>)
    b56c:	4798      	blx	r3
	}
	return status;
    b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b570:	4618      	mov	r0, r3
    b572:	3730      	adds	r7, #48	; 0x30
    b574:	46bd      	mov	sp, r7
    b576:	bd80      	pop	{r7, pc}
    b578:	0000b419 	.word	0x0000b419
    b57c:	00002745 	.word	0x00002745

0000b580 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b580:	b580      	push	{r7, lr}
    b582:	b08c      	sub	sp, #48	; 0x30
    b584:	af00      	add	r7, sp, #0
    b586:	60f8      	str	r0, [r7, #12]
    b588:	607b      	str	r3, [r7, #4]
    b58a:	460b      	mov	r3, r1
    b58c:	72fb      	strb	r3, [r7, #11]
    b58e:	4613      	mov	r3, r2
    b590:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b592:	68fb      	ldr	r3, [r7, #12]
    b594:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b596:	68fb      	ldr	r3, [r7, #12]
    b598:	681b      	ldr	r3, [r3, #0]
    b59a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b59c:	f107 0310 	add.w	r3, r7, #16
    b5a0:	2200      	movs	r2, #0
    b5a2:	601a      	str	r2, [r3, #0]
    b5a4:	605a      	str	r2, [r3, #4]
    b5a6:	609a      	str	r2, [r3, #8]
    b5a8:	60da      	str	r2, [r3, #12]
    b5aa:	611a      	str	r2, [r3, #16]
    b5ac:	615a      	str	r2, [r3, #20]
    b5ae:	7afb      	ldrb	r3, [r7, #11]
    b5b0:	f003 0307 	and.w	r3, r3, #7
    b5b4:	b2da      	uxtb	r2, r3
    b5b6:	7c3b      	ldrb	r3, [r7, #16]
    b5b8:	f362 0302 	bfi	r3, r2, #0, #3
    b5bc:	743b      	strb	r3, [r7, #16]
    b5be:	7c3b      	ldrb	r3, [r7, #16]
    b5c0:	f043 0310 	orr.w	r3, r3, #16
    b5c4:	743b      	strb	r3, [r7, #16]
    b5c6:	7c3b      	ldrb	r3, [r7, #16]
    b5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b5cc:	743b      	strb	r3, [r7, #16]
    b5ce:	7c7b      	ldrb	r3, [r7, #17]
    b5d0:	2202      	movs	r2, #2
    b5d2:	f362 1305 	bfi	r3, r2, #4, #2
    b5d6:	747b      	strb	r3, [r7, #17]
    b5d8:	7abb      	ldrb	r3, [r7, #10]
    b5da:	753b      	strb	r3, [r7, #20]
    b5dc:	2301      	movs	r3, #1
    b5de:	61fb      	str	r3, [r7, #28]
    b5e0:	1d3b      	adds	r3, r7, #4
    b5e2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5e6:	7b5b      	ldrb	r3, [r3, #13]
    b5e8:	2b00      	cmp	r3, #0
    b5ea:	d003      	beq.n	b5f4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b5ec:	2100      	movs	r1, #0
    b5ee:	68f8      	ldr	r0, [r7, #12]
    b5f0:	4b09      	ldr	r3, [pc, #36]	; (b618 <n25q256a_write_reg+0x98>)
    b5f2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b5f4:	f107 0310 	add.w	r3, r7, #16
    b5f8:	4619      	mov	r1, r3
    b5fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b5fc:	4b07      	ldr	r3, [pc, #28]	; (b61c <n25q256a_write_reg+0x9c>)
    b5fe:	4798      	blx	r3
	if (n25q->xip_mode) {
    b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b602:	7b5b      	ldrb	r3, [r3, #13]
    b604:	2b00      	cmp	r3, #0
    b606:	d003      	beq.n	b610 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b608:	2101      	movs	r1, #1
    b60a:	68f8      	ldr	r0, [r7, #12]
    b60c:	4b02      	ldr	r3, [pc, #8]	; (b618 <n25q256a_write_reg+0x98>)
    b60e:	4798      	blx	r3
	}
}
    b610:	bf00      	nop
    b612:	3730      	adds	r7, #48	; 0x30
    b614:	46bd      	mov	sp, r7
    b616:	bd80      	pop	{r7, pc}
    b618:	0000b419 	.word	0x0000b419
    b61c:	00002745 	.word	0x00002745

0000b620 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b620:	b580      	push	{r7, lr}
    b622:	b090      	sub	sp, #64	; 0x40
    b624:	af00      	add	r7, sp, #0
    b626:	6078      	str	r0, [r7, #4]
    b628:	460b      	mov	r3, r1
    b62a:	70fb      	strb	r3, [r7, #3]
    b62c:	4613      	mov	r3, r2
    b62e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b630:	687b      	ldr	r3, [r7, #4]
    b632:	681b      	ldr	r3, [r3, #0]
    b634:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b636:	78bb      	ldrb	r3, [r7, #2]
    b638:	2b00      	cmp	r3, #0
    b63a:	d001      	beq.n	b640 <n25q256a_write_enable+0x20>
    b63c:	2306      	movs	r3, #6
    b63e:	e000      	b.n	b642 <n25q256a_write_enable+0x22>
    b640:	2304      	movs	r3, #4
    b642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b646:	f107 0320 	add.w	r3, r7, #32
    b64a:	2200      	movs	r2, #0
    b64c:	601a      	str	r2, [r3, #0]
    b64e:	605a      	str	r2, [r3, #4]
    b650:	609a      	str	r2, [r3, #8]
    b652:	60da      	str	r2, [r3, #12]
    b654:	611a      	str	r2, [r3, #16]
    b656:	615a      	str	r2, [r3, #20]
    b658:	78fb      	ldrb	r3, [r7, #3]
    b65a:	f003 0307 	and.w	r3, r3, #7
    b65e:	b2da      	uxtb	r2, r3
    b660:	f897 3020 	ldrb.w	r3, [r7, #32]
    b664:	f362 0302 	bfi	r3, r2, #0, #3
    b668:	f887 3020 	strb.w	r3, [r7, #32]
    b66c:	f897 3020 	ldrb.w	r3, [r7, #32]
    b670:	f043 0310 	orr.w	r3, r3, #16
    b674:	f887 3020 	strb.w	r3, [r7, #32]
    b678:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b67c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b680:	f107 0308 	add.w	r3, r7, #8
    b684:	2200      	movs	r2, #0
    b686:	601a      	str	r2, [r3, #0]
    b688:	605a      	str	r2, [r3, #4]
    b68a:	609a      	str	r2, [r3, #8]
    b68c:	60da      	str	r2, [r3, #12]
    b68e:	611a      	str	r2, [r3, #16]
    b690:	615a      	str	r2, [r3, #20]
    b692:	78fb      	ldrb	r3, [r7, #3]
    b694:	f003 0307 	and.w	r3, r3, #7
    b698:	b2da      	uxtb	r2, r3
    b69a:	7a3b      	ldrb	r3, [r7, #8]
    b69c:	f362 0302 	bfi	r3, r2, #0, #3
    b6a0:	723b      	strb	r3, [r7, #8]
    b6a2:	7a3b      	ldrb	r3, [r7, #8]
    b6a4:	f043 0310 	orr.w	r3, r3, #16
    b6a8:	723b      	strb	r3, [r7, #8]
    b6aa:	7a3b      	ldrb	r3, [r7, #8]
    b6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6b0:	723b      	strb	r3, [r7, #8]
    b6b2:	2305      	movs	r3, #5
    b6b4:	733b      	strb	r3, [r7, #12]
    b6b6:	2301      	movs	r3, #1
    b6b8:	617b      	str	r3, [r7, #20]
    b6ba:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b6be:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b6c0:	f107 0320 	add.w	r3, r7, #32
    b6c4:	4619      	mov	r1, r3
    b6c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b6c8:	4b08      	ldr	r3, [pc, #32]	; (b6ec <n25q256a_write_enable+0xcc>)
    b6ca:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b6cc:	f107 0308 	add.w	r3, r7, #8
    b6d0:	4619      	mov	r1, r3
    b6d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b6d4:	4b05      	ldr	r3, [pc, #20]	; (b6ec <n25q256a_write_enable+0xcc>)
    b6d6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b6d8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b6dc:	f003 0302 	and.w	r3, r3, #2
    b6e0:	2b00      	cmp	r3, #0
    b6e2:	d0ed      	beq.n	b6c0 <n25q256a_write_enable+0xa0>
}
    b6e4:	bf00      	nop
    b6e6:	3740      	adds	r7, #64	; 0x40
    b6e8:	46bd      	mov	sp, r7
    b6ea:	bd80      	pop	{r7, pc}
    b6ec:	00002745 	.word	0x00002745

0000b6f0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b6f0:	b590      	push	{r4, r7, lr}
    b6f2:	b087      	sub	sp, #28
    b6f4:	af00      	add	r7, sp, #0
    b6f6:	6078      	str	r0, [r7, #4]
    b6f8:	460b      	mov	r3, r1
    b6fa:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b700:	68fb      	ldr	r3, [r7, #12]
    b702:	7b1b      	ldrb	r3, [r3, #12]
    b704:	2b00      	cmp	r3, #0
    b706:	d001      	beq.n	b70c <n25q256a_switch_mode+0x1c>
    b708:	2306      	movs	r3, #6
    b70a:	e000      	b.n	b70e <n25q256a_switch_mode+0x1e>
    b70c:	2300      	movs	r3, #0
    b70e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b710:	7afb      	ldrb	r3, [r7, #11]
    b712:	2265      	movs	r2, #101	; 0x65
    b714:	4619      	mov	r1, r3
    b716:	6878      	ldr	r0, [r7, #4]
    b718:	4b25      	ldr	r3, [pc, #148]	; (b7b0 <n25q256a_switch_mode+0xc0>)
    b71a:	4798      	blx	r3
    b71c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b71e:	2300      	movs	r3, #0
    b720:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b722:	68fb      	ldr	r3, [r7, #12]
    b724:	7b1b      	ldrb	r3, [r3, #12]
    b726:	78fa      	ldrb	r2, [r7, #3]
    b728:	429a      	cmp	r2, r3
    b72a:	d03d      	beq.n	b7a8 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b72c:	78fb      	ldrb	r3, [r7, #3]
    b72e:	2b00      	cmp	r3, #0
    b730:	d00b      	beq.n	b74a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b732:	697b      	ldr	r3, [r7, #20]
    b734:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b738:	2b00      	cmp	r3, #0
    b73a:	d011      	beq.n	b760 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b73c:	697b      	ldr	r3, [r7, #20]
    b73e:	f003 031f 	and.w	r3, r3, #31
    b742:	617b      	str	r3, [r7, #20]
			modify = 1;
    b744:	2301      	movs	r3, #1
    b746:	74fb      	strb	r3, [r7, #19]
    b748:	e00a      	b.n	b760 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b74a:	697b      	ldr	r3, [r7, #20]
    b74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b750:	2b00      	cmp	r3, #0
    b752:	d105      	bne.n	b760 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b754:	697b      	ldr	r3, [r7, #20]
    b756:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b75a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b75c:	2301      	movs	r3, #1
    b75e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b760:	7cfb      	ldrb	r3, [r7, #19]
    b762:	2b00      	cmp	r3, #0
    b764:	d021      	beq.n	b7aa <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b766:	68fb      	ldr	r3, [r7, #12]
    b768:	78fa      	ldrb	r2, [r7, #3]
    b76a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b76c:	7afb      	ldrb	r3, [r7, #11]
    b76e:	2201      	movs	r2, #1
    b770:	4619      	mov	r1, r3
    b772:	6878      	ldr	r0, [r7, #4]
    b774:	4b0f      	ldr	r3, [pc, #60]	; (b7b4 <n25q256a_switch_mode+0xc4>)
    b776:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b778:	7af9      	ldrb	r1, [r7, #11]
    b77a:	697b      	ldr	r3, [r7, #20]
    b77c:	2261      	movs	r2, #97	; 0x61
    b77e:	6878      	ldr	r0, [r7, #4]
    b780:	4c0d      	ldr	r4, [pc, #52]	; (b7b8 <n25q256a_switch_mode+0xc8>)
    b782:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b784:	78fb      	ldrb	r3, [r7, #3]
    b786:	2b00      	cmp	r3, #0
    b788:	d001      	beq.n	b78e <n25q256a_switch_mode+0x9e>
    b78a:	2306      	movs	r3, #6
    b78c:	e000      	b.n	b790 <n25q256a_switch_mode+0xa0>
    b78e:	2300      	movs	r3, #0
    b790:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b792:	7afb      	ldrb	r3, [r7, #11]
    b794:	2265      	movs	r2, #101	; 0x65
    b796:	4619      	mov	r1, r3
    b798:	6878      	ldr	r0, [r7, #4]
    b79a:	4b05      	ldr	r3, [pc, #20]	; (b7b0 <n25q256a_switch_mode+0xc0>)
    b79c:	4798      	blx	r3
    b79e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b7a0:	68fb      	ldr	r3, [r7, #12]
    b7a2:	78fa      	ldrb	r2, [r7, #3]
    b7a4:	731a      	strb	r2, [r3, #12]
    b7a6:	e000      	b.n	b7aa <n25q256a_switch_mode+0xba>
		return;
    b7a8:	bf00      	nop
	}
}
    b7aa:	371c      	adds	r7, #28
    b7ac:	46bd      	mov	sp, r7
    b7ae:	bd90      	pop	{r4, r7, pc}
    b7b0:	0000b4e5 	.word	0x0000b4e5
    b7b4:	0000b621 	.word	0x0000b621
    b7b8:	0000b581 	.word	0x0000b581

0000b7bc <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b7bc:	b580      	push	{r7, lr}
    b7be:	b086      	sub	sp, #24
    b7c0:	af00      	add	r7, sp, #0
    b7c2:	60f8      	str	r0, [r7, #12]
    b7c4:	60b9      	str	r1, [r7, #8]
    b7c6:	607a      	str	r2, [r7, #4]
    b7c8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b7ca:	68fb      	ldr	r3, [r7, #12]
    b7cc:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b7ce:	4a0c      	ldr	r2, [pc, #48]	; (b800 <n25q256a_construct+0x44>)
    b7d0:	68b9      	ldr	r1, [r7, #8]
    b7d2:	68f8      	ldr	r0, [r7, #12]
    b7d4:	4b0b      	ldr	r3, [pc, #44]	; (b804 <n25q256a_construct+0x48>)
    b7d6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b7d8:	697b      	ldr	r3, [r7, #20]
    b7da:	2200      	movs	r2, #0
    b7dc:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b7de:	697b      	ldr	r3, [r7, #20]
    b7e0:	2200      	movs	r2, #0
    b7e2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b7e4:	697b      	ldr	r3, [r7, #20]
    b7e6:	687a      	ldr	r2, [r7, #4]
    b7e8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b7ea:	78fb      	ldrb	r3, [r7, #3]
    b7ec:	4619      	mov	r1, r3
    b7ee:	68f8      	ldr	r0, [r7, #12]
    b7f0:	4b05      	ldr	r3, [pc, #20]	; (b808 <n25q256a_construct+0x4c>)
    b7f2:	4798      	blx	r3
	return me;
    b7f4:	68fb      	ldr	r3, [r7, #12]
}
    b7f6:	4618      	mov	r0, r3
    b7f8:	3718      	adds	r7, #24
    b7fa:	46bd      	mov	sp, r7
    b7fc:	bd80      	pop	{r7, pc}
    b7fe:	bf00      	nop
    b800:	00010ac8 	.word	0x00010ac8
    b804:	0000bc99 	.word	0x0000bc99
    b808:	0000b6f1 	.word	0x0000b6f1

0000b80c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b80c:	b580      	push	{r7, lr}
    b80e:	b08c      	sub	sp, #48	; 0x30
    b810:	af00      	add	r7, sp, #0
    b812:	60f8      	str	r0, [r7, #12]
    b814:	60b9      	str	r1, [r7, #8]
    b816:	607a      	str	r2, [r7, #4]
    b818:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b81a:	68fb      	ldr	r3, [r7, #12]
    b81c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b81e:	68fb      	ldr	r3, [r7, #12]
    b820:	681b      	ldr	r3, [r3, #0]
    b822:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b824:	f107 0310 	add.w	r3, r7, #16
    b828:	2200      	movs	r2, #0
    b82a:	601a      	str	r2, [r3, #0]
    b82c:	605a      	str	r2, [r3, #4]
    b82e:	609a      	str	r2, [r3, #8]
    b830:	60da      	str	r2, [r3, #12]
    b832:	611a      	str	r2, [r3, #16]
    b834:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b838:	7b1b      	ldrb	r3, [r3, #12]
    b83a:	2b00      	cmp	r3, #0
    b83c:	d001      	beq.n	b842 <n25q256a_read+0x36>
    b83e:	2206      	movs	r2, #6
    b840:	e000      	b.n	b844 <n25q256a_read+0x38>
    b842:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b844:	7c3b      	ldrb	r3, [r7, #16]
    b846:	f362 0302 	bfi	r3, r2, #0, #3
    b84a:	743b      	strb	r3, [r7, #16]
    b84c:	7c3b      	ldrb	r3, [r7, #16]
    b84e:	f043 0310 	orr.w	r3, r3, #16
    b852:	743b      	strb	r3, [r7, #16]
    b854:	7c3b      	ldrb	r3, [r7, #16]
    b856:	f043 0320 	orr.w	r3, r3, #32
    b85a:	743b      	strb	r3, [r7, #16]
    b85c:	7c3b      	ldrb	r3, [r7, #16]
    b85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b862:	743b      	strb	r3, [r7, #16]
    b864:	7c7b      	ldrb	r3, [r7, #17]
    b866:	2201      	movs	r2, #1
    b868:	f362 1305 	bfi	r3, r2, #4, #2
    b86c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b870:	7b1b      	ldrb	r3, [r3, #12]
    b872:	2b00      	cmp	r3, #0
    b874:	d001      	beq.n	b87a <n25q256a_read+0x6e>
    b876:	220a      	movs	r2, #10
    b878:	e000      	b.n	b87c <n25q256a_read+0x70>
    b87a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b87c:	7cbb      	ldrb	r3, [r7, #18]
    b87e:	f362 0304 	bfi	r3, r2, #0, #5
    b882:	74bb      	strb	r3, [r7, #18]
    b884:	230b      	movs	r3, #11
    b886:	753b      	strb	r3, [r7, #20]
    b888:	687b      	ldr	r3, [r7, #4]
    b88a:	61bb      	str	r3, [r7, #24]
    b88c:	683b      	ldr	r3, [r7, #0]
    b88e:	61fb      	str	r3, [r7, #28]
    b890:	68bb      	ldr	r3, [r7, #8]
    b892:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b894:	f107 0310 	add.w	r3, r7, #16
    b898:	4619      	mov	r1, r3
    b89a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b89c:	4b03      	ldr	r3, [pc, #12]	; (b8ac <n25q256a_read+0xa0>)
    b89e:	4798      	blx	r3
	return ERR_NONE;
    b8a0:	2300      	movs	r3, #0
}
    b8a2:	4618      	mov	r0, r3
    b8a4:	3730      	adds	r7, #48	; 0x30
    b8a6:	46bd      	mov	sp, r7
    b8a8:	bd80      	pop	{r7, pc}
    b8aa:	bf00      	nop
    b8ac:	00002745 	.word	0x00002745

0000b8b0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b8b0:	b580      	push	{r7, lr}
    b8b2:	b08c      	sub	sp, #48	; 0x30
    b8b4:	af00      	add	r7, sp, #0
    b8b6:	60f8      	str	r0, [r7, #12]
    b8b8:	60b9      	str	r1, [r7, #8]
    b8ba:	607a      	str	r2, [r7, #4]
    b8bc:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b8be:	68fb      	ldr	r3, [r7, #12]
    b8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b8c2:	68fb      	ldr	r3, [r7, #12]
    b8c4:	681b      	ldr	r3, [r3, #0]
    b8c6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b8c8:	f107 0310 	add.w	r3, r7, #16
    b8cc:	2200      	movs	r2, #0
    b8ce:	601a      	str	r2, [r3, #0]
    b8d0:	605a      	str	r2, [r3, #4]
    b8d2:	609a      	str	r2, [r3, #8]
    b8d4:	60da      	str	r2, [r3, #12]
    b8d6:	611a      	str	r2, [r3, #16]
    b8d8:	615a      	str	r2, [r3, #20]
    b8da:	7c3b      	ldrb	r3, [r7, #16]
    b8dc:	f043 0310 	orr.w	r3, r3, #16
    b8e0:	743b      	strb	r3, [r7, #16]
    b8e2:	7c3b      	ldrb	r3, [r7, #16]
    b8e4:	f043 0320 	orr.w	r3, r3, #32
    b8e8:	743b      	strb	r3, [r7, #16]
    b8ea:	7c3b      	ldrb	r3, [r7, #16]
    b8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b8f0:	743b      	strb	r3, [r7, #16]
    b8f2:	7c7b      	ldrb	r3, [r7, #17]
    b8f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b8f8:	747b      	strb	r3, [r7, #17]
    b8fa:	2302      	movs	r3, #2
    b8fc:	753b      	strb	r3, [r7, #20]
    b8fe:	687b      	ldr	r3, [r7, #4]
    b900:	61bb      	str	r3, [r7, #24]
    b902:	683b      	ldr	r3, [r7, #0]
    b904:	61fb      	str	r3, [r7, #28]
    b906:	68bb      	ldr	r3, [r7, #8]
    b908:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b90c:	7b1b      	ldrb	r3, [r3, #12]
    b90e:	2b00      	cmp	r3, #0
    b910:	d001      	beq.n	b916 <n25q256a_write+0x66>
    b912:	2206      	movs	r2, #6
    b914:	e000      	b.n	b918 <n25q256a_write+0x68>
    b916:	2200      	movs	r2, #0
    b918:	7c3b      	ldrb	r3, [r7, #16]
    b91a:	f362 0302 	bfi	r3, r2, #0, #3
    b91e:	743b      	strb	r3, [r7, #16]
	while (length) {
    b920:	e035      	b.n	b98e <n25q256a_write+0xde>
		cmd.address = address;
    b922:	687b      	ldr	r3, [r7, #4]
    b924:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b926:	683b      	ldr	r3, [r7, #0]
    b928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b92c:	d802      	bhi.n	b934 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b92e:	683b      	ldr	r3, [r7, #0]
    b930:	61fb      	str	r3, [r7, #28]
    b932:	e002      	b.n	b93a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b934:	f44f 7380 	mov.w	r3, #256	; 0x100
    b938:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b93a:	7c3b      	ldrb	r3, [r7, #16]
    b93c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b940:	b2db      	uxtb	r3, r3
    b942:	2201      	movs	r2, #1
    b944:	4619      	mov	r1, r3
    b946:	68f8      	ldr	r0, [r7, #12]
    b948:	4b19      	ldr	r3, [pc, #100]	; (b9b0 <n25q256a_write+0x100>)
    b94a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b94c:	f107 0310 	add.w	r3, r7, #16
    b950:	4619      	mov	r1, r3
    b952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b954:	4b17      	ldr	r3, [pc, #92]	; (b9b4 <n25q256a_write+0x104>)
    b956:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b958:	bf00      	nop
    b95a:	7c3b      	ldrb	r3, [r7, #16]
    b95c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b960:	b2db      	uxtb	r3, r3
    b962:	2270      	movs	r2, #112	; 0x70
    b964:	4619      	mov	r1, r3
    b966:	68f8      	ldr	r0, [r7, #12]
    b968:	4b13      	ldr	r3, [pc, #76]	; (b9b8 <n25q256a_write+0x108>)
    b96a:	4798      	blx	r3
    b96c:	4603      	mov	r3, r0
    b96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b972:	2b00      	cmp	r3, #0
    b974:	d0f1      	beq.n	b95a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b976:	6a3a      	ldr	r2, [r7, #32]
    b978:	69fb      	ldr	r3, [r7, #28]
    b97a:	4413      	add	r3, r2
    b97c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b97e:	69fb      	ldr	r3, [r7, #28]
    b980:	683a      	ldr	r2, [r7, #0]
    b982:	1ad3      	subs	r3, r2, r3
    b984:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b986:	69fb      	ldr	r3, [r7, #28]
    b988:	687a      	ldr	r2, [r7, #4]
    b98a:	4413      	add	r3, r2
    b98c:	607b      	str	r3, [r7, #4]
	while (length) {
    b98e:	683b      	ldr	r3, [r7, #0]
    b990:	2b00      	cmp	r3, #0
    b992:	d1c6      	bne.n	b922 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b996:	7b5b      	ldrb	r3, [r3, #13]
    b998:	2b00      	cmp	r3, #0
    b99a:	d003      	beq.n	b9a4 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b99c:	2101      	movs	r1, #1
    b99e:	68f8      	ldr	r0, [r7, #12]
    b9a0:	4b06      	ldr	r3, [pc, #24]	; (b9bc <n25q256a_write+0x10c>)
    b9a2:	4798      	blx	r3
	}
	return ERR_NONE;
    b9a4:	2300      	movs	r3, #0
}
    b9a6:	4618      	mov	r0, r3
    b9a8:	3730      	adds	r7, #48	; 0x30
    b9aa:	46bd      	mov	sp, r7
    b9ac:	bd80      	pop	{r7, pc}
    b9ae:	bf00      	nop
    b9b0:	0000b621 	.word	0x0000b621
    b9b4:	00002745 	.word	0x00002745
    b9b8:	0000b4e5 	.word	0x0000b4e5
    b9bc:	0000b419 	.word	0x0000b419

0000b9c0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b9c0:	b580      	push	{r7, lr}
    b9c2:	b090      	sub	sp, #64	; 0x40
    b9c4:	af00      	add	r7, sp, #0
    b9c6:	60f8      	str	r0, [r7, #12]
    b9c8:	60b9      	str	r1, [r7, #8]
    b9ca:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b9cc:	68fb      	ldr	r3, [r7, #12]
    b9ce:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b9d0:	68fb      	ldr	r3, [r7, #12]
    b9d2:	681b      	ldr	r3, [r3, #0]
    b9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b9d6:	f107 0314 	add.w	r3, r7, #20
    b9da:	2200      	movs	r2, #0
    b9dc:	601a      	str	r2, [r3, #0]
    b9de:	605a      	str	r2, [r3, #4]
    b9e0:	609a      	str	r2, [r3, #8]
    b9e2:	60da      	str	r2, [r3, #12]
    b9e4:	611a      	str	r2, [r3, #16]
    b9e6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b9ea:	7b1b      	ldrb	r3, [r3, #12]
    b9ec:	2b00      	cmp	r3, #0
    b9ee:	d001      	beq.n	b9f4 <n25q256a_erase+0x34>
    b9f0:	2206      	movs	r2, #6
    b9f2:	e000      	b.n	b9f6 <n25q256a_erase+0x36>
    b9f4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b9f6:	7d3b      	ldrb	r3, [r7, #20]
    b9f8:	f362 0302 	bfi	r3, r2, #0, #3
    b9fc:	753b      	strb	r3, [r7, #20]
    b9fe:	7d3b      	ldrb	r3, [r7, #20]
    ba00:	f043 0310 	orr.w	r3, r3, #16
    ba04:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    ba06:	687b      	ldr	r3, [r7, #4]
    ba08:	4a56      	ldr	r2, [pc, #344]	; (bb64 <n25q256a_erase+0x1a4>)
    ba0a:	4293      	cmp	r3, r2
    ba0c:	bf94      	ite	ls
    ba0e:	2301      	movls	r3, #1
    ba10:	2300      	movhi	r3, #0
    ba12:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    ba14:	7d3b      	ldrb	r3, [r7, #20]
    ba16:	f362 1345 	bfi	r3, r2, #5, #1
    ba1a:	753b      	strb	r3, [r7, #20]
    ba1c:	7d7b      	ldrb	r3, [r7, #21]
    ba1e:	2202      	movs	r2, #2
    ba20:	f362 1305 	bfi	r3, r2, #4, #2
    ba24:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    ba26:	68bb      	ldr	r3, [r7, #8]
    ba28:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    ba2a:	687b      	ldr	r3, [r7, #4]
    ba2c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    ba2e:	2300      	movs	r3, #0
    ba30:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    ba32:	687b      	ldr	r3, [r7, #4]
    ba34:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ba38:	2b00      	cmp	r3, #0
    ba3a:	d104      	bne.n	ba46 <n25q256a_erase+0x86>
    ba3c:	68bb      	ldr	r3, [r7, #8]
    ba3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ba42:	2b00      	cmp	r3, #0
    ba44:	d002      	beq.n	ba4c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    ba46:	f06f 030c 	mvn.w	r3, #12
    ba4a:	e087      	b.n	bb5c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ba4c:	687b      	ldr	r3, [r7, #4]
    ba4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    ba52:	d368      	bcc.n	bb26 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    ba54:	23c7      	movs	r3, #199	; 0xc7
    ba56:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ba58:	7d3b      	ldrb	r3, [r7, #20]
    ba5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba5e:	b2db      	uxtb	r3, r3
    ba60:	2201      	movs	r2, #1
    ba62:	4619      	mov	r1, r3
    ba64:	68f8      	ldr	r0, [r7, #12]
    ba66:	4b40      	ldr	r3, [pc, #256]	; (bb68 <n25q256a_erase+0x1a8>)
    ba68:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ba6a:	f107 0314 	add.w	r3, r7, #20
    ba6e:	4619      	mov	r1, r3
    ba70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ba72:	4b3e      	ldr	r3, [pc, #248]	; (bb6c <n25q256a_erase+0x1ac>)
    ba74:	4798      	blx	r3
    ba76:	e059      	b.n	bb2c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ba78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba7a:	b29b      	uxth	r3, r3
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d11f      	bne.n	bac0 <n25q256a_erase+0x100>
    ba80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ba82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ba86:	d31b      	bcc.n	bac0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ba88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba8a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ba8c:	23d8      	movs	r3, #216	; 0xd8
    ba8e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ba90:	7d3b      	ldrb	r3, [r7, #20]
    ba92:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba96:	b2db      	uxtb	r3, r3
    ba98:	2201      	movs	r2, #1
    ba9a:	4619      	mov	r1, r3
    ba9c:	68f8      	ldr	r0, [r7, #12]
    ba9e:	4b32      	ldr	r3, [pc, #200]	; (bb68 <n25q256a_erase+0x1a8>)
    baa0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    baa2:	f107 0314 	add.w	r3, r7, #20
    baa6:	4619      	mov	r1, r3
    baa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    baaa:	4b30      	ldr	r3, [pc, #192]	; (bb6c <n25q256a_erase+0x1ac>)
    baac:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    baae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bab0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bab4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bab8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    babc:	63bb      	str	r3, [r7, #56]	; 0x38
    babe:	e023      	b.n	bb08 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bac6:	d31b      	bcc.n	bb00 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    baca:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bacc:	2320      	movs	r3, #32
    bace:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bad0:	7d3b      	ldrb	r3, [r7, #20]
    bad2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bad6:	b2db      	uxtb	r3, r3
    bad8:	2201      	movs	r2, #1
    bada:	4619      	mov	r1, r3
    badc:	68f8      	ldr	r0, [r7, #12]
    bade:	4b22      	ldr	r3, [pc, #136]	; (bb68 <n25q256a_erase+0x1a8>)
    bae0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bae2:	f107 0314 	add.w	r3, r7, #20
    bae6:	4619      	mov	r1, r3
    bae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    baea:	4b20      	ldr	r3, [pc, #128]	; (bb6c <n25q256a_erase+0x1ac>)
    baec:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    baee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    baf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    baf4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    baf8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bafc:	63bb      	str	r3, [r7, #56]	; 0x38
    bafe:	e003      	b.n	bb08 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bb00:	f06f 030c 	mvn.w	r3, #12
    bb04:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bb06:	e011      	b.n	bb2c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bb08:	bf00      	nop
    bb0a:	7d3b      	ldrb	r3, [r7, #20]
    bb0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb10:	b2db      	uxtb	r3, r3
    bb12:	2270      	movs	r2, #112	; 0x70
    bb14:	4619      	mov	r1, r3
    bb16:	68f8      	ldr	r0, [r7, #12]
    bb18:	4b15      	ldr	r3, [pc, #84]	; (bb70 <n25q256a_erase+0x1b0>)
    bb1a:	4798      	blx	r3
    bb1c:	4603      	mov	r3, r0
    bb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb22:	2b00      	cmp	r3, #0
    bb24:	d0f1      	beq.n	bb0a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb28:	2b00      	cmp	r3, #0
    bb2a:	d1a5      	bne.n	ba78 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bb2c:	bf00      	nop
    bb2e:	7d3b      	ldrb	r3, [r7, #20]
    bb30:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb34:	b2db      	uxtb	r3, r3
    bb36:	2270      	movs	r2, #112	; 0x70
    bb38:	4619      	mov	r1, r3
    bb3a:	68f8      	ldr	r0, [r7, #12]
    bb3c:	4b0c      	ldr	r3, [pc, #48]	; (bb70 <n25q256a_erase+0x1b0>)
    bb3e:	4798      	blx	r3
    bb40:	4603      	mov	r3, r0
    bb42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb46:	2b00      	cmp	r3, #0
    bb48:	d0f1      	beq.n	bb2e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb4c:	7b5b      	ldrb	r3, [r3, #13]
    bb4e:	2b00      	cmp	r3, #0
    bb50:	d003      	beq.n	bb5a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bb52:	2101      	movs	r1, #1
    bb54:	68f8      	ldr	r0, [r7, #12]
    bb56:	4b07      	ldr	r3, [pc, #28]	; (bb74 <n25q256a_erase+0x1b4>)
    bb58:	4798      	blx	r3
	}
	return rc;
    bb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bb5c:	4618      	mov	r0, r3
    bb5e:	3740      	adds	r7, #64	; 0x40
    bb60:	46bd      	mov	sp, r7
    bb62:	bd80      	pop	{r7, pc}
    bb64:	001fffff 	.word	0x001fffff
    bb68:	0000b621 	.word	0x0000b621
    bb6c:	00002745 	.word	0x00002745
    bb70:	0000b4e5 	.word	0x0000b4e5
    bb74:	0000b419 	.word	0x0000b419

0000bb78 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bb78:	b590      	push	{r4, r7, lr}
    bb7a:	b085      	sub	sp, #20
    bb7c:	af00      	add	r7, sp, #0
    bb7e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bb80:	687b      	ldr	r3, [r7, #4]
    bb82:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bb84:	68fb      	ldr	r3, [r7, #12]
    bb86:	7b1b      	ldrb	r3, [r3, #12]
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d001      	beq.n	bb90 <n25q256a_enable_xip+0x18>
    bb8c:	2306      	movs	r3, #6
    bb8e:	e000      	b.n	bb92 <n25q256a_enable_xip+0x1a>
    bb90:	2300      	movs	r3, #0
    bb92:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bb94:	68fb      	ldr	r3, [r7, #12]
    bb96:	7b5b      	ldrb	r3, [r3, #13]
    bb98:	2b00      	cmp	r3, #0
    bb9a:	d129      	bne.n	bbf0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bb9c:	7afb      	ldrb	r3, [r7, #11]
    bb9e:	2285      	movs	r2, #133	; 0x85
    bba0:	4619      	mov	r1, r3
    bba2:	6878      	ldr	r0, [r7, #4]
    bba4:	4b15      	ldr	r3, [pc, #84]	; (bbfc <n25q256a_enable_xip+0x84>)
    bba6:	4798      	blx	r3
    bba8:	4603      	mov	r3, r0
    bbaa:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bbac:	7abb      	ldrb	r3, [r7, #10]
    bbae:	f003 0308 	and.w	r3, r3, #8
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	d015      	beq.n	bbe2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bbb6:	7abb      	ldrb	r3, [r7, #10]
    bbb8:	f023 0308 	bic.w	r3, r3, #8
    bbbc:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bbbe:	7abb      	ldrb	r3, [r7, #10]
    bbc0:	7af9      	ldrb	r1, [r7, #11]
    bbc2:	2281      	movs	r2, #129	; 0x81
    bbc4:	6878      	ldr	r0, [r7, #4]
    bbc6:	4c0e      	ldr	r4, [pc, #56]	; (bc00 <n25q256a_enable_xip+0x88>)
    bbc8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bbca:	bf00      	nop
    bbcc:	7afb      	ldrb	r3, [r7, #11]
    bbce:	2270      	movs	r2, #112	; 0x70
    bbd0:	4619      	mov	r1, r3
    bbd2:	6878      	ldr	r0, [r7, #4]
    bbd4:	4b09      	ldr	r3, [pc, #36]	; (bbfc <n25q256a_enable_xip+0x84>)
    bbd6:	4798      	blx	r3
    bbd8:	4603      	mov	r3, r0
    bbda:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bbde:	2b00      	cmp	r3, #0
    bbe0:	d0f4      	beq.n	bbcc <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bbe2:	68fb      	ldr	r3, [r7, #12]
    bbe4:	2201      	movs	r2, #1
    bbe6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bbe8:	2101      	movs	r1, #1
    bbea:	6878      	ldr	r0, [r7, #4]
    bbec:	4b05      	ldr	r3, [pc, #20]	; (bc04 <n25q256a_enable_xip+0x8c>)
    bbee:	4798      	blx	r3
	}
	return ERR_NONE;
    bbf0:	2300      	movs	r3, #0
}
    bbf2:	4618      	mov	r0, r3
    bbf4:	3714      	adds	r7, #20
    bbf6:	46bd      	mov	sp, r7
    bbf8:	bd90      	pop	{r4, r7, pc}
    bbfa:	bf00      	nop
    bbfc:	0000b4e5 	.word	0x0000b4e5
    bc00:	0000b581 	.word	0x0000b581
    bc04:	0000b419 	.word	0x0000b419

0000bc08 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bc08:	b580      	push	{r7, lr}
    bc0a:	b086      	sub	sp, #24
    bc0c:	af00      	add	r7, sp, #0
    bc0e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bc10:	687b      	ldr	r3, [r7, #4]
    bc12:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bc14:	687b      	ldr	r3, [r7, #4]
    bc16:	681b      	ldr	r3, [r3, #0]
    bc18:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bc1a:	697b      	ldr	r3, [r7, #20]
    bc1c:	7b1b      	ldrb	r3, [r3, #12]
    bc1e:	2b00      	cmp	r3, #0
    bc20:	d001      	beq.n	bc26 <n25q256a_disable_xip+0x1e>
    bc22:	2306      	movs	r3, #6
    bc24:	e000      	b.n	bc28 <n25q256a_disable_xip+0x20>
    bc26:	2300      	movs	r3, #0
    bc28:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bc2a:	2100      	movs	r1, #0
    bc2c:	6878      	ldr	r0, [r7, #4]
    bc2e:	4b15      	ldr	r3, [pc, #84]	; (bc84 <n25q256a_disable_xip+0x7c>)
    bc30:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bc32:	7bfb      	ldrb	r3, [r7, #15]
    bc34:	2285      	movs	r2, #133	; 0x85
    bc36:	4619      	mov	r1, r3
    bc38:	6878      	ldr	r0, [r7, #4]
    bc3a:	4b13      	ldr	r3, [pc, #76]	; (bc88 <n25q256a_disable_xip+0x80>)
    bc3c:	4798      	blx	r3
    bc3e:	4603      	mov	r3, r0
    bc40:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bc42:	7bbb      	ldrb	r3, [r7, #14]
    bc44:	f003 0308 	and.w	r3, r3, #8
    bc48:	2b00      	cmp	r3, #0
    bc4a:	d113      	bne.n	bc74 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bc4c:	697b      	ldr	r3, [r7, #20]
    bc4e:	689b      	ldr	r3, [r3, #8]
    bc50:	2b00      	cmp	r3, #0
    bc52:	d00f      	beq.n	bc74 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bc54:	693b      	ldr	r3, [r7, #16]
    bc56:	681b      	ldr	r3, [r3, #0]
    bc58:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bc5a:	6938      	ldr	r0, [r7, #16]
    bc5c:	4b0b      	ldr	r3, [pc, #44]	; (bc8c <n25q256a_disable_xip+0x84>)
    bc5e:	4798      	blx	r3
			n25q->pin_exit_xip();
    bc60:	697b      	ldr	r3, [r7, #20]
    bc62:	689b      	ldr	r3, [r3, #8]
    bc64:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bc66:	68b9      	ldr	r1, [r7, #8]
    bc68:	6938      	ldr	r0, [r7, #16]
    bc6a:	4b09      	ldr	r3, [pc, #36]	; (bc90 <n25q256a_disable_xip+0x88>)
    bc6c:	4798      	blx	r3
			qspi_sync_enable(descr);
    bc6e:	6938      	ldr	r0, [r7, #16]
    bc70:	4b08      	ldr	r3, [pc, #32]	; (bc94 <n25q256a_disable_xip+0x8c>)
    bc72:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bc74:	697b      	ldr	r3, [r7, #20]
    bc76:	2200      	movs	r2, #0
    bc78:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bc7a:	2300      	movs	r3, #0
}
    bc7c:	4618      	mov	r0, r3
    bc7e:	3718      	adds	r7, #24
    bc80:	46bd      	mov	sp, r7
    bc82:	bd80      	pop	{r7, pc}
    bc84:	0000b419 	.word	0x0000b419
    bc88:	0000b4e5 	.word	0x0000b4e5
    bc8c:	00002709 	.word	0x00002709
    bc90:	00002681 	.word	0x00002681
    bc94:	000026cd 	.word	0x000026cd

0000bc98 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bc98:	b480      	push	{r7}
    bc9a:	b085      	sub	sp, #20
    bc9c:	af00      	add	r7, sp, #0
    bc9e:	60f8      	str	r0, [r7, #12]
    bca0:	60b9      	str	r1, [r7, #8]
    bca2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bca4:	68fb      	ldr	r3, [r7, #12]
    bca6:	68ba      	ldr	r2, [r7, #8]
    bca8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bcaa:	68fb      	ldr	r3, [r7, #12]
    bcac:	687a      	ldr	r2, [r7, #4]
    bcae:	605a      	str	r2, [r3, #4]

	return me;
    bcb0:	68fb      	ldr	r3, [r7, #12]
}
    bcb2:	4618      	mov	r0, r3
    bcb4:	3714      	adds	r7, #20
    bcb6:	46bd      	mov	sp, r7
    bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcbc:	4770      	bx	lr

0000bcbe <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bcbe:	b480      	push	{r7}
    bcc0:	b083      	sub	sp, #12
    bcc2:	af00      	add	r7, sp, #0
    bcc4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bcc6:	687b      	ldr	r3, [r7, #4]
    bcc8:	781b      	ldrb	r3, [r3, #0]
    bcca:	b29a      	uxth	r2, r3
    bccc:	687b      	ldr	r3, [r7, #4]
    bcce:	3301      	adds	r3, #1
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	b29b      	uxth	r3, r3
    bcd4:	021b      	lsls	r3, r3, #8
    bcd6:	b29b      	uxth	r3, r3
    bcd8:	4413      	add	r3, r2
    bcda:	b29b      	uxth	r3, r3
}
    bcdc:	4618      	mov	r0, r3
    bcde:	370c      	adds	r7, #12
    bce0:	46bd      	mov	sp, r7
    bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bce6:	4770      	bx	lr

0000bce8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bce8:	b480      	push	{r7}
    bcea:	b083      	sub	sp, #12
    bcec:	af00      	add	r7, sp, #0
    bcee:	6078      	str	r0, [r7, #4]
	return desc[0];
    bcf0:	687b      	ldr	r3, [r7, #4]
    bcf2:	781b      	ldrb	r3, [r3, #0]
}
    bcf4:	4618      	mov	r0, r3
    bcf6:	370c      	adds	r7, #12
    bcf8:	46bd      	mov	sp, r7
    bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcfe:	4770      	bx	lr

0000bd00 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bd00:	b580      	push	{r7, lr}
    bd02:	b082      	sub	sp, #8
    bd04:	af00      	add	r7, sp, #0
    bd06:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bd08:	6878      	ldr	r0, [r7, #4]
    bd0a:	4b05      	ldr	r3, [pc, #20]	; (bd20 <usb_desc_next+0x20>)
    bd0c:	4798      	blx	r3
    bd0e:	4603      	mov	r3, r0
    bd10:	461a      	mov	r2, r3
    bd12:	687b      	ldr	r3, [r7, #4]
    bd14:	4413      	add	r3, r2
}
    bd16:	4618      	mov	r0, r3
    bd18:	3708      	adds	r7, #8
    bd1a:	46bd      	mov	sp, r7
    bd1c:	bd80      	pop	{r7, pc}
    bd1e:	bf00      	nop
    bd20:	0000bce9 	.word	0x0000bce9

0000bd24 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bd24:	b580      	push	{r7, lr}
    bd26:	b08c      	sub	sp, #48	; 0x30
    bd28:	af00      	add	r7, sp, #0
    bd2a:	6078      	str	r0, [r7, #4]
    bd2c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bd2e:	687b      	ldr	r3, [r7, #4]
    bd30:	689b      	ldr	r3, [r3, #8]
    bd32:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bd34:	683b      	ldr	r3, [r7, #0]
    bd36:	681b      	ldr	r3, [r3, #0]
    bd38:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bd3a:	2300      	movs	r3, #0
    bd3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bd40:	e08f      	b.n	be62 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd44:	2b00      	cmp	r3, #0
    bd46:	d102      	bne.n	bd4e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bd48:	f06f 0309 	mvn.w	r3, #9
    bd4c:	e092      	b.n	be74 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd50:	789b      	ldrb	r3, [r3, #2]
    bd52:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd56:	795b      	ldrb	r3, [r3, #5]
    bd58:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bd5a:	7c7b      	ldrb	r3, [r7, #17]
    bd5c:	2b02      	cmp	r3, #2
    bd5e:	d002      	beq.n	bd66 <cdcdf_acm_enable+0x42>
    bd60:	7c7b      	ldrb	r3, [r7, #17]
    bd62:	2b0a      	cmp	r3, #10
    bd64:	d121      	bne.n	bdaa <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bd66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd6a:	6a3a      	ldr	r2, [r7, #32]
    bd6c:	5cd2      	ldrb	r2, [r2, r3]
    bd6e:	7bbb      	ldrb	r3, [r7, #14]
    bd70:	429a      	cmp	r2, r3
    bd72:	d102      	bne.n	bd7a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bd74:	f06f 0311 	mvn.w	r3, #17
    bd78:	e07c      	b.n	be74 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bd7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd7e:	6a3a      	ldr	r2, [r7, #32]
    bd80:	5cd3      	ldrb	r3, [r2, r3]
    bd82:	2bff      	cmp	r3, #255	; 0xff
    bd84:	d002      	beq.n	bd8c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bd86:	f06f 031b 	mvn.w	r3, #27
    bd8a:	e073      	b.n	be74 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bd8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bd90:	7bb9      	ldrb	r1, [r7, #14]
    bd92:	6a3a      	ldr	r2, [r7, #32]
    bd94:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bd96:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bd98:	683b      	ldr	r3, [r7, #0]
    bd9a:	685b      	ldr	r3, [r3, #4]
    bd9c:	2205      	movs	r2, #5
    bd9e:	4619      	mov	r1, r3
    bda0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bda2:	4b36      	ldr	r3, [pc, #216]	; (be7c <cdcdf_acm_enable+0x158>)
    bda4:	4798      	blx	r3
    bda6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bda8:	e047      	b.n	be3a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bdaa:	f06f 0309 	mvn.w	r3, #9
    bdae:	e061      	b.n	be74 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bdb2:	789b      	ldrb	r3, [r3, #2]
    bdb4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bdb8:	78db      	ldrb	r3, [r3, #3]
    bdba:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bdbe:	3304      	adds	r3, #4
    bdc0:	4618      	mov	r0, r3
    bdc2:	4b2f      	ldr	r3, [pc, #188]	; (be80 <cdcdf_acm_enable+0x15c>)
    bdc4:	4798      	blx	r3
    bdc6:	4603      	mov	r3, r0
    bdc8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bdca:	7ebb      	ldrb	r3, [r7, #26]
    bdcc:	7ef9      	ldrb	r1, [r7, #27]
    bdce:	8bba      	ldrh	r2, [r7, #28]
    bdd0:	4618      	mov	r0, r3
    bdd2:	4b2c      	ldr	r3, [pc, #176]	; (be84 <cdcdf_acm_enable+0x160>)
    bdd4:	4798      	blx	r3
    bdd6:	4603      	mov	r3, r0
    bdd8:	2b00      	cmp	r3, #0
    bdda:	d002      	beq.n	bde2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bddc:	f06f 0313 	mvn.w	r3, #19
    bde0:	e048      	b.n	be74 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bde2:	7ebb      	ldrb	r3, [r7, #26]
    bde4:	b25b      	sxtb	r3, r3
    bde6:	2b00      	cmp	r3, #0
    bde8:	da0f      	bge.n	be0a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bdea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bdee:	7eb9      	ldrb	r1, [r7, #26]
    bdf0:	6a3a      	ldr	r2, [r7, #32]
    bdf2:	4413      	add	r3, r2
    bdf4:	460a      	mov	r2, r1
    bdf6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bdf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bdfc:	6a3a      	ldr	r2, [r7, #32]
    bdfe:	4413      	add	r3, r2
    be00:	789b      	ldrb	r3, [r3, #2]
    be02:	4618      	mov	r0, r3
    be04:	4b20      	ldr	r3, [pc, #128]	; (be88 <cdcdf_acm_enable+0x164>)
    be06:	4798      	blx	r3
    be08:	e007      	b.n	be1a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    be0a:	7eba      	ldrb	r2, [r7, #26]
    be0c:	6a3b      	ldr	r3, [r7, #32]
    be0e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    be10:	6a3b      	ldr	r3, [r7, #32]
    be12:	791b      	ldrb	r3, [r3, #4]
    be14:	4618      	mov	r0, r3
    be16:	4b1c      	ldr	r3, [pc, #112]	; (be88 <cdcdf_acm_enable+0x164>)
    be18:	4798      	blx	r3
			}
			desc->sod = ep;
    be1a:	683b      	ldr	r3, [r7, #0]
    be1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    be1e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    be20:	683b      	ldr	r3, [r7, #0]
    be22:	681b      	ldr	r3, [r3, #0]
    be24:	4618      	mov	r0, r3
    be26:	4b19      	ldr	r3, [pc, #100]	; (be8c <cdcdf_acm_enable+0x168>)
    be28:	4798      	blx	r3
    be2a:	4602      	mov	r2, r0
    be2c:	683b      	ldr	r3, [r7, #0]
    be2e:	685b      	ldr	r3, [r3, #4]
    be30:	4619      	mov	r1, r3
    be32:	4610      	mov	r0, r2
    be34:	4b16      	ldr	r3, [pc, #88]	; (be90 <cdcdf_acm_enable+0x16c>)
    be36:	4798      	blx	r3
    be38:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    be3c:	2b00      	cmp	r3, #0
    be3e:	d1b7      	bne.n	bdb0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    be40:	683b      	ldr	r3, [r7, #0]
    be42:	681b      	ldr	r3, [r3, #0]
    be44:	4618      	mov	r0, r3
    be46:	4b11      	ldr	r3, [pc, #68]	; (be8c <cdcdf_acm_enable+0x168>)
    be48:	4798      	blx	r3
    be4a:	683b      	ldr	r3, [r7, #0]
    be4c:	685b      	ldr	r3, [r3, #4]
    be4e:	2204      	movs	r2, #4
    be50:	4619      	mov	r1, r3
    be52:	4b0a      	ldr	r3, [pc, #40]	; (be7c <cdcdf_acm_enable+0x158>)
    be54:	4798      	blx	r3
    be56:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    be58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be5c:	3301      	adds	r3, #1
    be5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    be62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be66:	2b01      	cmp	r3, #1
    be68:	f67f af6b 	bls.w	bd42 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    be6c:	4b09      	ldr	r3, [pc, #36]	; (be94 <cdcdf_acm_enable+0x170>)
    be6e:	2201      	movs	r2, #1
    be70:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    be72:	2300      	movs	r3, #0
}
    be74:	4618      	mov	r0, r3
    be76:	3730      	adds	r7, #48	; 0x30
    be78:	46bd      	mov	sp, r7
    be7a:	bd80      	pop	{r7, pc}
    be7c:	0000d0e5 	.word	0x0000d0e5
    be80:	0000bcbf 	.word	0x0000bcbf
    be84:	000033b9 	.word	0x000033b9
    be88:	000034a5 	.word	0x000034a5
    be8c:	0000bd01 	.word	0x0000bd01
    be90:	0000d141 	.word	0x0000d141
    be94:	2000106c 	.word	0x2000106c

0000be98 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    be98:	b580      	push	{r7, lr}
    be9a:	b088      	sub	sp, #32
    be9c:	af00      	add	r7, sp, #0
    be9e:	6078      	str	r0, [r7, #4]
    bea0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bea2:	687b      	ldr	r3, [r7, #4]
    bea4:	689b      	ldr	r3, [r3, #8]
    bea6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bea8:	683b      	ldr	r3, [r7, #0]
    beaa:	2b00      	cmp	r3, #0
    beac:	d00c      	beq.n	bec8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    beae:	683b      	ldr	r3, [r7, #0]
    beb0:	681b      	ldr	r3, [r3, #0]
    beb2:	795b      	ldrb	r3, [r3, #5]
    beb4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    beb6:	7c7b      	ldrb	r3, [r7, #17]
    beb8:	2b02      	cmp	r3, #2
    beba:	d005      	beq.n	bec8 <cdcdf_acm_disable+0x30>
    bebc:	7c7b      	ldrb	r3, [r7, #17]
    bebe:	2b0a      	cmp	r3, #10
    bec0:	d002      	beq.n	bec8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bec2:	f06f 0309 	mvn.w	r3, #9
    bec6:	e035      	b.n	bf34 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bec8:	2300      	movs	r3, #0
    beca:	77fb      	strb	r3, [r7, #31]
    becc:	e01f      	b.n	bf0e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bece:	7ffb      	ldrb	r3, [r7, #31]
    bed0:	69ba      	ldr	r2, [r7, #24]
    bed2:	5cd3      	ldrb	r3, [r2, r3]
    bed4:	2bff      	cmp	r3, #255	; 0xff
    bed6:	d016      	beq.n	bf06 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bed8:	7ffb      	ldrb	r3, [r7, #31]
    beda:	69ba      	ldr	r2, [r7, #24]
    bedc:	21ff      	movs	r1, #255	; 0xff
    bede:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bee0:	7ffb      	ldrb	r3, [r7, #31]
    bee2:	69ba      	ldr	r2, [r7, #24]
    bee4:	4413      	add	r3, r2
    bee6:	789b      	ldrb	r3, [r3, #2]
    bee8:	2bff      	cmp	r3, #255	; 0xff
    beea:	d00d      	beq.n	bf08 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    beec:	7ffb      	ldrb	r3, [r7, #31]
    beee:	69ba      	ldr	r2, [r7, #24]
    bef0:	4413      	add	r3, r2
    bef2:	789b      	ldrb	r3, [r3, #2]
    bef4:	4618      	mov	r0, r3
    bef6:	4b11      	ldr	r3, [pc, #68]	; (bf3c <cdcdf_acm_disable+0xa4>)
    bef8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    befa:	7ffb      	ldrb	r3, [r7, #31]
    befc:	69ba      	ldr	r2, [r7, #24]
    befe:	4413      	add	r3, r2
    bf00:	22ff      	movs	r2, #255	; 0xff
    bf02:	709a      	strb	r2, [r3, #2]
    bf04:	e000      	b.n	bf08 <cdcdf_acm_disable+0x70>
			continue;
    bf06:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bf08:	7ffb      	ldrb	r3, [r7, #31]
    bf0a:	3301      	adds	r3, #1
    bf0c:	77fb      	strb	r3, [r7, #31]
    bf0e:	7ffb      	ldrb	r3, [r7, #31]
    bf10:	2b01      	cmp	r3, #1
    bf12:	d9dc      	bls.n	bece <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bf14:	69bb      	ldr	r3, [r7, #24]
    bf16:	791b      	ldrb	r3, [r3, #4]
    bf18:	2bff      	cmp	r3, #255	; 0xff
    bf1a:	d007      	beq.n	bf2c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bf1c:	69bb      	ldr	r3, [r7, #24]
    bf1e:	791b      	ldrb	r3, [r3, #4]
    bf20:	4618      	mov	r0, r3
    bf22:	4b06      	ldr	r3, [pc, #24]	; (bf3c <cdcdf_acm_disable+0xa4>)
    bf24:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bf26:	69bb      	ldr	r3, [r7, #24]
    bf28:	22ff      	movs	r2, #255	; 0xff
    bf2a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bf2c:	4b04      	ldr	r3, [pc, #16]	; (bf40 <cdcdf_acm_disable+0xa8>)
    bf2e:	2200      	movs	r2, #0
    bf30:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bf32:	2300      	movs	r3, #0
}
    bf34:	4618      	mov	r0, r3
    bf36:	3720      	adds	r7, #32
    bf38:	46bd      	mov	sp, r7
    bf3a:	bd80      	pop	{r7, pc}
    bf3c:	00003455 	.word	0x00003455
    bf40:	2000106c 	.word	0x2000106c

0000bf44 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    bf44:	b580      	push	{r7, lr}
    bf46:	b084      	sub	sp, #16
    bf48:	af00      	add	r7, sp, #0
    bf4a:	60f8      	str	r0, [r7, #12]
    bf4c:	460b      	mov	r3, r1
    bf4e:	607a      	str	r2, [r7, #4]
    bf50:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bf52:	7afb      	ldrb	r3, [r7, #11]
    bf54:	2b01      	cmp	r3, #1
    bf56:	d009      	beq.n	bf6c <cdcdf_acm_ctrl+0x28>
    bf58:	2b02      	cmp	r3, #2
    bf5a:	d00d      	beq.n	bf78 <cdcdf_acm_ctrl+0x34>
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d10e      	bne.n	bf7e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bf60:	6879      	ldr	r1, [r7, #4]
    bf62:	68f8      	ldr	r0, [r7, #12]
    bf64:	4b09      	ldr	r3, [pc, #36]	; (bf8c <cdcdf_acm_ctrl+0x48>)
    bf66:	4798      	blx	r3
    bf68:	4603      	mov	r3, r0
    bf6a:	e00a      	b.n	bf82 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bf6c:	6879      	ldr	r1, [r7, #4]
    bf6e:	68f8      	ldr	r0, [r7, #12]
    bf70:	4b07      	ldr	r3, [pc, #28]	; (bf90 <cdcdf_acm_ctrl+0x4c>)
    bf72:	4798      	blx	r3
    bf74:	4603      	mov	r3, r0
    bf76:	e004      	b.n	bf82 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bf78:	f06f 031a 	mvn.w	r3, #26
    bf7c:	e001      	b.n	bf82 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bf7e:	f06f 030c 	mvn.w	r3, #12
	}
}
    bf82:	4618      	mov	r0, r3
    bf84:	3710      	adds	r7, #16
    bf86:	46bd      	mov	sp, r7
    bf88:	bd80      	pop	{r7, pc}
    bf8a:	bf00      	nop
    bf8c:	0000bd25 	.word	0x0000bd25
    bf90:	0000be99 	.word	0x0000be99

0000bf94 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf94:	b590      	push	{r4, r7, lr}
    bf96:	b087      	sub	sp, #28
    bf98:	af00      	add	r7, sp, #0
    bf9a:	4603      	mov	r3, r0
    bf9c:	6039      	str	r1, [r7, #0]
    bf9e:	71fb      	strb	r3, [r7, #7]
    bfa0:	4613      	mov	r3, r2
    bfa2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    bfa4:	683b      	ldr	r3, [r7, #0]
    bfa6:	799a      	ldrb	r2, [r3, #6]
    bfa8:	79db      	ldrb	r3, [r3, #7]
    bfaa:	021b      	lsls	r3, r3, #8
    bfac:	4313      	orrs	r3, r2
    bfae:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bfb0:	4b2b      	ldr	r3, [pc, #172]	; (c060 <cdcdf_acm_set_req+0xcc>)
    bfb2:	4798      	blx	r3
    bfb4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bfb6:	683b      	ldr	r3, [r7, #0]
    bfb8:	785b      	ldrb	r3, [r3, #1]
    bfba:	2b20      	cmp	r3, #32
    bfbc:	d002      	beq.n	bfc4 <cdcdf_acm_set_req+0x30>
    bfbe:	2b22      	cmp	r3, #34	; 0x22
    bfc0:	d034      	beq.n	c02c <cdcdf_acm_set_req+0x98>
    bfc2:	e046      	b.n	c052 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bfc4:	8afb      	ldrh	r3, [r7, #22]
    bfc6:	2b07      	cmp	r3, #7
    bfc8:	d002      	beq.n	bfd0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    bfca:	f04f 33ff 	mov.w	r3, #4294967295
    bfce:	e042      	b.n	c056 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    bfd0:	79bb      	ldrb	r3, [r7, #6]
    bfd2:	2b00      	cmp	r3, #0
    bfd4:	d107      	bne.n	bfe6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bfd6:	8afa      	ldrh	r2, [r7, #22]
    bfd8:	79f8      	ldrb	r0, [r7, #7]
    bfda:	2300      	movs	r3, #0
    bfdc:	6939      	ldr	r1, [r7, #16]
    bfde:	4c21      	ldr	r4, [pc, #132]	; (c064 <cdcdf_acm_set_req+0xd0>)
    bfe0:	47a0      	blx	r4
    bfe2:	4603      	mov	r3, r0
    bfe4:	e037      	b.n	c056 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bfe6:	693a      	ldr	r2, [r7, #16]
    bfe8:	f107 0308 	add.w	r3, r7, #8
    bfec:	6810      	ldr	r0, [r2, #0]
    bfee:	6018      	str	r0, [r3, #0]
    bff0:	8891      	ldrh	r1, [r2, #4]
    bff2:	7992      	ldrb	r2, [r2, #6]
    bff4:	8099      	strh	r1, [r3, #4]
    bff6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bff8:	4b1b      	ldr	r3, [pc, #108]	; (c068 <cdcdf_acm_set_req+0xd4>)
    bffa:	681b      	ldr	r3, [r3, #0]
    bffc:	2b00      	cmp	r3, #0
    bffe:	d008      	beq.n	c012 <cdcdf_acm_set_req+0x7e>
    c000:	4b19      	ldr	r3, [pc, #100]	; (c068 <cdcdf_acm_set_req+0xd4>)
    c002:	681b      	ldr	r3, [r3, #0]
    c004:	f107 0208 	add.w	r2, r7, #8
    c008:	4610      	mov	r0, r2
    c00a:	4798      	blx	r3
    c00c:	4603      	mov	r3, r0
    c00e:	2b00      	cmp	r3, #0
    c010:	d00a      	beq.n	c028 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c012:	4b16      	ldr	r3, [pc, #88]	; (c06c <cdcdf_acm_set_req+0xd8>)
    c014:	f107 0208 	add.w	r2, r7, #8
    c018:	e892 0003 	ldmia.w	r2, {r0, r1}
    c01c:	6018      	str	r0, [r3, #0]
    c01e:	3304      	adds	r3, #4
    c020:	8019      	strh	r1, [r3, #0]
    c022:	3302      	adds	r3, #2
    c024:	0c0a      	lsrs	r2, r1, #16
    c026:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c028:	2300      	movs	r3, #0
    c02a:	e014      	b.n	c056 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c02c:	2300      	movs	r3, #0
    c02e:	2200      	movs	r2, #0
    c030:	2100      	movs	r1, #0
    c032:	2000      	movs	r0, #0
    c034:	4c0b      	ldr	r4, [pc, #44]	; (c064 <cdcdf_acm_set_req+0xd0>)
    c036:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c038:	4b0d      	ldr	r3, [pc, #52]	; (c070 <cdcdf_acm_set_req+0xdc>)
    c03a:	681b      	ldr	r3, [r3, #0]
    c03c:	2b00      	cmp	r3, #0
    c03e:	d006      	beq.n	c04e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c040:	4b0b      	ldr	r3, [pc, #44]	; (c070 <cdcdf_acm_set_req+0xdc>)
    c042:	681b      	ldr	r3, [r3, #0]
    c044:	683a      	ldr	r2, [r7, #0]
    c046:	8852      	ldrh	r2, [r2, #2]
    c048:	b292      	uxth	r2, r2
    c04a:	4610      	mov	r0, r2
    c04c:	4798      	blx	r3
		}
		return ERR_NONE;
    c04e:	2300      	movs	r3, #0
    c050:	e001      	b.n	c056 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c052:	f06f 030c 	mvn.w	r3, #12
	}
}
    c056:	4618      	mov	r0, r3
    c058:	371c      	adds	r7, #28
    c05a:	46bd      	mov	sp, r7
    c05c:	bd90      	pop	{r4, r7, pc}
    c05e:	bf00      	nop
    c060:	0000cfe1 	.word	0x0000cfe1
    c064:	0000ce55 	.word	0x0000ce55
    c068:	20001080 	.word	0x20001080
    c06c:	20001074 	.word	0x20001074
    c070:	2000107c 	.word	0x2000107c

0000c074 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c074:	b590      	push	{r4, r7, lr}
    c076:	b085      	sub	sp, #20
    c078:	af00      	add	r7, sp, #0
    c07a:	4603      	mov	r3, r0
    c07c:	6039      	str	r1, [r7, #0]
    c07e:	71fb      	strb	r3, [r7, #7]
    c080:	4613      	mov	r3, r2
    c082:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c084:	683b      	ldr	r3, [r7, #0]
    c086:	799a      	ldrb	r2, [r3, #6]
    c088:	79db      	ldrb	r3, [r3, #7]
    c08a:	021b      	lsls	r3, r3, #8
    c08c:	4313      	orrs	r3, r2
    c08e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c090:	79bb      	ldrb	r3, [r7, #6]
    c092:	2b01      	cmp	r3, #1
    c094:	d101      	bne.n	c09a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c096:	2300      	movs	r3, #0
    c098:	e013      	b.n	c0c2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c09a:	683b      	ldr	r3, [r7, #0]
    c09c:	785b      	ldrb	r3, [r3, #1]
    c09e:	2b21      	cmp	r3, #33	; 0x21
    c0a0:	d10d      	bne.n	c0be <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c0a2:	89fb      	ldrh	r3, [r7, #14]
    c0a4:	2b07      	cmp	r3, #7
    c0a6:	d002      	beq.n	c0ae <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c0a8:	f04f 33ff 	mov.w	r3, #4294967295
    c0ac:	e009      	b.n	c0c2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c0ae:	89fa      	ldrh	r2, [r7, #14]
    c0b0:	79f8      	ldrb	r0, [r7, #7]
    c0b2:	2300      	movs	r3, #0
    c0b4:	4905      	ldr	r1, [pc, #20]	; (c0cc <cdcdf_acm_get_req+0x58>)
    c0b6:	4c06      	ldr	r4, [pc, #24]	; (c0d0 <cdcdf_acm_get_req+0x5c>)
    c0b8:	47a0      	blx	r4
    c0ba:	4603      	mov	r3, r0
    c0bc:	e001      	b.n	c0c2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c0be:	f06f 030c 	mvn.w	r3, #12
	}
}
    c0c2:	4618      	mov	r0, r3
    c0c4:	3714      	adds	r7, #20
    c0c6:	46bd      	mov	sp, r7
    c0c8:	bd90      	pop	{r4, r7, pc}
    c0ca:	bf00      	nop
    c0cc:	20001074 	.word	0x20001074
    c0d0:	0000ce55 	.word	0x0000ce55

0000c0d4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c0d4:	b580      	push	{r7, lr}
    c0d6:	b082      	sub	sp, #8
    c0d8:	af00      	add	r7, sp, #0
    c0da:	4603      	mov	r3, r0
    c0dc:	6039      	str	r1, [r7, #0]
    c0de:	71fb      	strb	r3, [r7, #7]
    c0e0:	4613      	mov	r3, r2
    c0e2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c0e4:	683b      	ldr	r3, [r7, #0]
    c0e6:	781b      	ldrb	r3, [r3, #0]
    c0e8:	095b      	lsrs	r3, r3, #5
    c0ea:	b2db      	uxtb	r3, r3
    c0ec:	f003 0303 	and.w	r3, r3, #3
    c0f0:	2b01      	cmp	r3, #1
    c0f2:	d002      	beq.n	c0fa <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c0f4:	f06f 0309 	mvn.w	r3, #9
    c0f8:	e026      	b.n	c148 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c0fa:	683b      	ldr	r3, [r7, #0]
    c0fc:	889b      	ldrh	r3, [r3, #4]
    c0fe:	b29a      	uxth	r2, r3
    c100:	4b13      	ldr	r3, [pc, #76]	; (c150 <cdcdf_acm_req+0x7c>)
    c102:	781b      	ldrb	r3, [r3, #0]
    c104:	b29b      	uxth	r3, r3
    c106:	429a      	cmp	r2, r3
    c108:	d007      	beq.n	c11a <cdcdf_acm_req+0x46>
    c10a:	683b      	ldr	r3, [r7, #0]
    c10c:	889b      	ldrh	r3, [r3, #4]
    c10e:	b29a      	uxth	r2, r3
    c110:	4b0f      	ldr	r3, [pc, #60]	; (c150 <cdcdf_acm_req+0x7c>)
    c112:	785b      	ldrb	r3, [r3, #1]
    c114:	b29b      	uxth	r3, r3
    c116:	429a      	cmp	r2, r3
    c118:	d114      	bne.n	c144 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c11a:	683b      	ldr	r3, [r7, #0]
    c11c:	781b      	ldrb	r3, [r3, #0]
    c11e:	b25b      	sxtb	r3, r3
    c120:	2b00      	cmp	r3, #0
    c122:	da07      	bge.n	c134 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c124:	79ba      	ldrb	r2, [r7, #6]
    c126:	79fb      	ldrb	r3, [r7, #7]
    c128:	6839      	ldr	r1, [r7, #0]
    c12a:	4618      	mov	r0, r3
    c12c:	4b09      	ldr	r3, [pc, #36]	; (c154 <cdcdf_acm_req+0x80>)
    c12e:	4798      	blx	r3
    c130:	4603      	mov	r3, r0
    c132:	e009      	b.n	c148 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c134:	79ba      	ldrb	r2, [r7, #6]
    c136:	79fb      	ldrb	r3, [r7, #7]
    c138:	6839      	ldr	r1, [r7, #0]
    c13a:	4618      	mov	r0, r3
    c13c:	4b06      	ldr	r3, [pc, #24]	; (c158 <cdcdf_acm_req+0x84>)
    c13e:	4798      	blx	r3
    c140:	4603      	mov	r3, r0
    c142:	e001      	b.n	c148 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c144:	f06f 0309 	mvn.w	r3, #9
	}
}
    c148:	4618      	mov	r0, r3
    c14a:	3708      	adds	r7, #8
    c14c:	46bd      	mov	sp, r7
    c14e:	bd80      	pop	{r7, pc}
    c150:	2000106c 	.word	0x2000106c
    c154:	0000c075 	.word	0x0000c075
    c158:	0000bf95 	.word	0x0000bf95

0000c15c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c15c:	b580      	push	{r7, lr}
    c15e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c160:	4b0b      	ldr	r3, [pc, #44]	; (c190 <cdcdf_acm_init+0x34>)
    c162:	4798      	blx	r3
    c164:	4603      	mov	r3, r0
    c166:	2b01      	cmp	r3, #1
    c168:	d902      	bls.n	c170 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c16a:	f06f 0310 	mvn.w	r3, #16
    c16e:	e00d      	b.n	c18c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c170:	4b08      	ldr	r3, [pc, #32]	; (c194 <cdcdf_acm_init+0x38>)
    c172:	4a09      	ldr	r2, [pc, #36]	; (c198 <cdcdf_acm_init+0x3c>)
    c174:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c176:	4b07      	ldr	r3, [pc, #28]	; (c194 <cdcdf_acm_init+0x38>)
    c178:	4a08      	ldr	r2, [pc, #32]	; (c19c <cdcdf_acm_init+0x40>)
    c17a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c17c:	4805      	ldr	r0, [pc, #20]	; (c194 <cdcdf_acm_init+0x38>)
    c17e:	4b08      	ldr	r3, [pc, #32]	; (c1a0 <cdcdf_acm_init+0x44>)
    c180:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c182:	4908      	ldr	r1, [pc, #32]	; (c1a4 <cdcdf_acm_init+0x48>)
    c184:	2001      	movs	r0, #1
    c186:	4b08      	ldr	r3, [pc, #32]	; (c1a8 <cdcdf_acm_init+0x4c>)
    c188:	4798      	blx	r3
	return ERR_NONE;
    c18a:	2300      	movs	r3, #0
}
    c18c:	4618      	mov	r0, r3
    c18e:	bd80      	pop	{r7, pc}
    c190:	0000cff9 	.word	0x0000cff9
    c194:	20001060 	.word	0x20001060
    c198:	0000bf45 	.word	0x0000bf45
    c19c:	2000106c 	.word	0x2000106c
    c1a0:	0000cf61 	.word	0x0000cf61
    c1a4:	20000208 	.word	0x20000208
    c1a8:	0000ce91 	.word	0x0000ce91

0000c1ac <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c1ac:	b590      	push	{r4, r7, lr}
    c1ae:	b083      	sub	sp, #12
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	6078      	str	r0, [r7, #4]
    c1b4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c1b6:	4b0b      	ldr	r3, [pc, #44]	; (c1e4 <cdcdf_acm_read+0x38>)
    c1b8:	4798      	blx	r3
    c1ba:	4603      	mov	r3, r0
    c1bc:	f083 0301 	eor.w	r3, r3, #1
    c1c0:	b2db      	uxtb	r3, r3
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	d002      	beq.n	c1cc <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c1c6:	f06f 0310 	mvn.w	r3, #16
    c1ca:	e007      	b.n	c1dc <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c1cc:	4b06      	ldr	r3, [pc, #24]	; (c1e8 <cdcdf_acm_read+0x3c>)
    c1ce:	7918      	ldrb	r0, [r3, #4]
    c1d0:	2300      	movs	r3, #0
    c1d2:	683a      	ldr	r2, [r7, #0]
    c1d4:	6879      	ldr	r1, [r7, #4]
    c1d6:	4c05      	ldr	r4, [pc, #20]	; (c1ec <cdcdf_acm_read+0x40>)
    c1d8:	47a0      	blx	r4
    c1da:	4603      	mov	r3, r0
}
    c1dc:	4618      	mov	r0, r3
    c1de:	370c      	adds	r7, #12
    c1e0:	46bd      	mov	sp, r7
    c1e2:	bd90      	pop	{r4, r7, pc}
    c1e4:	0000c2d1 	.word	0x0000c2d1
    c1e8:	2000106c 	.word	0x2000106c
    c1ec:	0000ce55 	.word	0x0000ce55

0000c1f0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c1f0:	b590      	push	{r4, r7, lr}
    c1f2:	b083      	sub	sp, #12
    c1f4:	af00      	add	r7, sp, #0
    c1f6:	6078      	str	r0, [r7, #4]
    c1f8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c1fa:	4b0b      	ldr	r3, [pc, #44]	; (c228 <cdcdf_acm_write+0x38>)
    c1fc:	4798      	blx	r3
    c1fe:	4603      	mov	r3, r0
    c200:	f083 0301 	eor.w	r3, r3, #1
    c204:	b2db      	uxtb	r3, r3
    c206:	2b00      	cmp	r3, #0
    c208:	d002      	beq.n	c210 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c20a:	f06f 0310 	mvn.w	r3, #16
    c20e:	e007      	b.n	c220 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c210:	4b06      	ldr	r3, [pc, #24]	; (c22c <cdcdf_acm_write+0x3c>)
    c212:	78d8      	ldrb	r0, [r3, #3]
    c214:	2301      	movs	r3, #1
    c216:	683a      	ldr	r2, [r7, #0]
    c218:	6879      	ldr	r1, [r7, #4]
    c21a:	4c05      	ldr	r4, [pc, #20]	; (c230 <cdcdf_acm_write+0x40>)
    c21c:	47a0      	blx	r4
    c21e:	4603      	mov	r3, r0
}
    c220:	4618      	mov	r0, r3
    c222:	370c      	adds	r7, #12
    c224:	46bd      	mov	sp, r7
    c226:	bd90      	pop	{r4, r7, pc}
    c228:	0000c2d1 	.word	0x0000c2d1
    c22c:	2000106c 	.word	0x2000106c
    c230:	0000ce55 	.word	0x0000ce55

0000c234 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c234:	b580      	push	{r7, lr}
    c236:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c238:	4b05      	ldr	r3, [pc, #20]	; (c250 <cdcdf_acm_stop_xfer+0x1c>)
    c23a:	78db      	ldrb	r3, [r3, #3]
    c23c:	4618      	mov	r0, r3
    c23e:	4b05      	ldr	r3, [pc, #20]	; (c254 <cdcdf_acm_stop_xfer+0x20>)
    c240:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c242:	4b03      	ldr	r3, [pc, #12]	; (c250 <cdcdf_acm_stop_xfer+0x1c>)
    c244:	791b      	ldrb	r3, [r3, #4]
    c246:	4618      	mov	r0, r3
    c248:	4b02      	ldr	r3, [pc, #8]	; (c254 <cdcdf_acm_stop_xfer+0x20>)
    c24a:	4798      	blx	r3
}
    c24c:	bf00      	nop
    c24e:	bd80      	pop	{r7, pc}
    c250:	2000106c 	.word	0x2000106c
    c254:	0000367d 	.word	0x0000367d

0000c258 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c258:	b580      	push	{r7, lr}
    c25a:	b082      	sub	sp, #8
    c25c:	af00      	add	r7, sp, #0
    c25e:	4603      	mov	r3, r0
    c260:	6039      	str	r1, [r7, #0]
    c262:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c264:	79fb      	ldrb	r3, [r7, #7]
    c266:	2b03      	cmp	r3, #3
    c268:	d822      	bhi.n	c2b0 <cdcdf_acm_register_callback+0x58>
    c26a:	a201      	add	r2, pc, #4	; (adr r2, c270 <cdcdf_acm_register_callback+0x18>)
    c26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c270:	0000c281 	.word	0x0000c281
    c274:	0000c291 	.word	0x0000c291
    c278:	0000c2a1 	.word	0x0000c2a1
    c27c:	0000c2a9 	.word	0x0000c2a9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c280:	4b0f      	ldr	r3, [pc, #60]	; (c2c0 <cdcdf_acm_register_callback+0x68>)
    c282:	791b      	ldrb	r3, [r3, #4]
    c284:	683a      	ldr	r2, [r7, #0]
    c286:	2102      	movs	r1, #2
    c288:	4618      	mov	r0, r3
    c28a:	4b0e      	ldr	r3, [pc, #56]	; (c2c4 <cdcdf_acm_register_callback+0x6c>)
    c28c:	4798      	blx	r3
		break;
    c28e:	e012      	b.n	c2b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c290:	4b0b      	ldr	r3, [pc, #44]	; (c2c0 <cdcdf_acm_register_callback+0x68>)
    c292:	78db      	ldrb	r3, [r3, #3]
    c294:	683a      	ldr	r2, [r7, #0]
    c296:	2102      	movs	r1, #2
    c298:	4618      	mov	r0, r3
    c29a:	4b0a      	ldr	r3, [pc, #40]	; (c2c4 <cdcdf_acm_register_callback+0x6c>)
    c29c:	4798      	blx	r3
		break;
    c29e:	e00a      	b.n	c2b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c2a0:	4a09      	ldr	r2, [pc, #36]	; (c2c8 <cdcdf_acm_register_callback+0x70>)
    c2a2:	683b      	ldr	r3, [r7, #0]
    c2a4:	6013      	str	r3, [r2, #0]
		break;
    c2a6:	e006      	b.n	c2b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c2a8:	4a08      	ldr	r2, [pc, #32]	; (c2cc <cdcdf_acm_register_callback+0x74>)
    c2aa:	683b      	ldr	r3, [r7, #0]
    c2ac:	6013      	str	r3, [r2, #0]
		break;
    c2ae:	e002      	b.n	c2b6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c2b0:	f06f 030c 	mvn.w	r3, #12
    c2b4:	e000      	b.n	c2b8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c2b6:	2300      	movs	r3, #0
}
    c2b8:	4618      	mov	r0, r3
    c2ba:	3708      	adds	r7, #8
    c2bc:	46bd      	mov	sp, r7
    c2be:	bd80      	pop	{r7, pc}
    c2c0:	2000106c 	.word	0x2000106c
    c2c4:	000037a9 	.word	0x000037a9
    c2c8:	20001080 	.word	0x20001080
    c2cc:	2000107c 	.word	0x2000107c

0000c2d0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c2d0:	b480      	push	{r7}
    c2d2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c2d4:	4b03      	ldr	r3, [pc, #12]	; (c2e4 <cdcdf_acm_is_enabled+0x14>)
    c2d6:	795b      	ldrb	r3, [r3, #5]
}
    c2d8:	4618      	mov	r0, r3
    c2da:	46bd      	mov	sp, r7
    c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2e0:	4770      	bx	lr
    c2e2:	bf00      	nop
    c2e4:	2000106c 	.word	0x2000106c

0000c2e8 <usb_get_u16>:
{
    c2e8:	b480      	push	{r7}
    c2ea:	b083      	sub	sp, #12
    c2ec:	af00      	add	r7, sp, #0
    c2ee:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c2f0:	687b      	ldr	r3, [r7, #4]
    c2f2:	781b      	ldrb	r3, [r3, #0]
    c2f4:	b29a      	uxth	r2, r3
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	3301      	adds	r3, #1
    c2fa:	781b      	ldrb	r3, [r3, #0]
    c2fc:	b29b      	uxth	r3, r3
    c2fe:	021b      	lsls	r3, r3, #8
    c300:	b29b      	uxth	r3, r3
    c302:	4413      	add	r3, r2
    c304:	b29b      	uxth	r3, r3
}
    c306:	4618      	mov	r0, r3
    c308:	370c      	adds	r7, #12
    c30a:	46bd      	mov	sp, r7
    c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c310:	4770      	bx	lr

0000c312 <usb_desc_len>:
{
    c312:	b480      	push	{r7}
    c314:	b083      	sub	sp, #12
    c316:	af00      	add	r7, sp, #0
    c318:	6078      	str	r0, [r7, #4]
	return desc[0];
    c31a:	687b      	ldr	r3, [r7, #4]
    c31c:	781b      	ldrb	r3, [r3, #0]
}
    c31e:	4618      	mov	r0, r3
    c320:	370c      	adds	r7, #12
    c322:	46bd      	mov	sp, r7
    c324:	f85d 7b04 	ldr.w	r7, [sp], #4
    c328:	4770      	bx	lr
	...

0000c32c <usb_desc_next>:
{
    c32c:	b580      	push	{r7, lr}
    c32e:	b082      	sub	sp, #8
    c330:	af00      	add	r7, sp, #0
    c332:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c334:	6878      	ldr	r0, [r7, #4]
    c336:	4b05      	ldr	r3, [pc, #20]	; (c34c <usb_desc_next+0x20>)
    c338:	4798      	blx	r3
    c33a:	4603      	mov	r3, r0
    c33c:	461a      	mov	r2, r3
    c33e:	687b      	ldr	r3, [r7, #4]
    c340:	4413      	add	r3, r2
}
    c342:	4618      	mov	r0, r3
    c344:	3708      	adds	r7, #8
    c346:	46bd      	mov	sp, r7
    c348:	bd80      	pop	{r7, pc}
    c34a:	bf00      	nop
    c34c:	0000c313 	.word	0x0000c313

0000c350 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c350:	b580      	push	{r7, lr}
    c352:	b082      	sub	sp, #8
    c354:	af00      	add	r7, sp, #0
    c356:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c358:	687b      	ldr	r3, [r7, #4]
    c35a:	3302      	adds	r3, #2
    c35c:	4618      	mov	r0, r3
    c35e:	4b03      	ldr	r3, [pc, #12]	; (c36c <usb_cfg_desc_total_len+0x1c>)
    c360:	4798      	blx	r3
    c362:	4603      	mov	r3, r0
}
    c364:	4618      	mov	r0, r3
    c366:	3708      	adds	r7, #8
    c368:	46bd      	mov	sp, r7
    c36a:	bd80      	pop	{r7, pc}
    c36c:	0000c2e9 	.word	0x0000c2e9

0000c370 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c370:	b590      	push	{r4, r7, lr}
    c372:	b085      	sub	sp, #20
    c374:	af00      	add	r7, sp, #0
    c376:	4603      	mov	r3, r0
    c378:	6039      	str	r1, [r7, #0]
    c37a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c37c:	2300      	movs	r3, #0
    c37e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c380:	683b      	ldr	r3, [r7, #0]
    c382:	799a      	ldrb	r2, [r3, #6]
    c384:	79db      	ldrb	r3, [r3, #7]
    c386:	021b      	lsls	r3, r3, #8
    c388:	4313      	orrs	r3, r2
    c38a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c38c:	897b      	ldrh	r3, [r7, #10]
    c38e:	2b12      	cmp	r3, #18
    c390:	d901      	bls.n	c396 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c392:	2312      	movs	r3, #18
    c394:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c396:	68fb      	ldr	r3, [r7, #12]
    c398:	2b00      	cmp	r3, #0
    c39a:	d10a      	bne.n	c3b2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c39c:	4b0f      	ldr	r3, [pc, #60]	; (c3dc <usbdc_get_dev_desc+0x6c>)
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	6818      	ldr	r0, [r3, #0]
    c3a2:	4b0e      	ldr	r3, [pc, #56]	; (c3dc <usbdc_get_dev_desc+0x6c>)
    c3a4:	681b      	ldr	r3, [r3, #0]
    c3a6:	685b      	ldr	r3, [r3, #4]
    c3a8:	2201      	movs	r2, #1
    c3aa:	4619      	mov	r1, r3
    c3ac:	4b0c      	ldr	r3, [pc, #48]	; (c3e0 <usbdc_get_dev_desc+0x70>)
    c3ae:	4798      	blx	r3
    c3b0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c3b2:	68fb      	ldr	r3, [r7, #12]
    c3b4:	2b00      	cmp	r3, #0
    c3b6:	d101      	bne.n	c3bc <usbdc_get_dev_desc+0x4c>
		return false;
    c3b8:	2300      	movs	r3, #0
    c3ba:	e00b      	b.n	c3d4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c3bc:	897a      	ldrh	r2, [r7, #10]
    c3be:	79f8      	ldrb	r0, [r7, #7]
    c3c0:	2300      	movs	r3, #0
    c3c2:	68f9      	ldr	r1, [r7, #12]
    c3c4:	4c07      	ldr	r4, [pc, #28]	; (c3e4 <usbdc_get_dev_desc+0x74>)
    c3c6:	47a0      	blx	r4
    c3c8:	4603      	mov	r3, r0
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d001      	beq.n	c3d2 <usbdc_get_dev_desc+0x62>
		return false;
    c3ce:	2300      	movs	r3, #0
    c3d0:	e000      	b.n	c3d4 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c3d2:	2301      	movs	r3, #1
}
    c3d4:	4618      	mov	r0, r3
    c3d6:	3714      	adds	r7, #20
    c3d8:	46bd      	mov	sp, r7
    c3da:	bd90      	pop	{r4, r7, pc}
    c3dc:	20001084 	.word	0x20001084
    c3e0:	0000d0e5 	.word	0x0000d0e5
    c3e4:	0000ce55 	.word	0x0000ce55

0000c3e8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c3e8:	b590      	push	{r4, r7, lr}
    c3ea:	b087      	sub	sp, #28
    c3ec:	af00      	add	r7, sp, #0
    c3ee:	4603      	mov	r3, r0
    c3f0:	6039      	str	r1, [r7, #0]
    c3f2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c3f4:	2300      	movs	r3, #0
    c3f6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c3f8:	683b      	ldr	r3, [r7, #0]
    c3fa:	799a      	ldrb	r2, [r3, #6]
    c3fc:	79db      	ldrb	r3, [r3, #7]
    c3fe:	021b      	lsls	r3, r3, #8
    c400:	4313      	orrs	r3, r2
    c402:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c404:	683b      	ldr	r3, [r7, #0]
    c406:	885b      	ldrh	r3, [r3, #2]
    c408:	b29b      	uxth	r3, r3
    c40a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c40c:	8a7a      	ldrh	r2, [r7, #18]
    c40e:	4b1e      	ldr	r3, [pc, #120]	; (c488 <usbdc_get_cfg_desc+0xa0>)
    c410:	7f1b      	ldrb	r3, [r3, #28]
    c412:	3b01      	subs	r3, #1
    c414:	4013      	ands	r3, r2
    c416:	2b00      	cmp	r3, #0
    c418:	bf0c      	ite	eq
    c41a:	2301      	moveq	r3, #1
    c41c:	2300      	movne	r3, #0
    c41e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c420:	697b      	ldr	r3, [r7, #20]
    c422:	2b00      	cmp	r3, #0
    c424:	d10c      	bne.n	c440 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c426:	4b18      	ldr	r3, [pc, #96]	; (c488 <usbdc_get_cfg_desc+0xa0>)
    c428:	681b      	ldr	r3, [r3, #0]
    c42a:	6818      	ldr	r0, [r3, #0]
    c42c:	4b16      	ldr	r3, [pc, #88]	; (c488 <usbdc_get_cfg_desc+0xa0>)
    c42e:	681b      	ldr	r3, [r3, #0]
    c430:	6859      	ldr	r1, [r3, #4]
    c432:	7c3b      	ldrb	r3, [r7, #16]
    c434:	3301      	adds	r3, #1
    c436:	b2db      	uxtb	r3, r3
    c438:	461a      	mov	r2, r3
    c43a:	4b14      	ldr	r3, [pc, #80]	; (c48c <usbdc_get_cfg_desc+0xa4>)
    c43c:	4798      	blx	r3
    c43e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c440:	697b      	ldr	r3, [r7, #20]
    c442:	2b00      	cmp	r3, #0
    c444:	d101      	bne.n	c44a <usbdc_get_cfg_desc+0x62>
		return false;
    c446:	2300      	movs	r3, #0
    c448:	e019      	b.n	c47e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c44a:	6978      	ldr	r0, [r7, #20]
    c44c:	4b10      	ldr	r3, [pc, #64]	; (c490 <usbdc_get_cfg_desc+0xa8>)
    c44e:	4798      	blx	r3
    c450:	4603      	mov	r3, r0
    c452:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c454:	8a7a      	ldrh	r2, [r7, #18]
    c456:	89fb      	ldrh	r3, [r7, #14]
    c458:	429a      	cmp	r2, r3
    c45a:	d802      	bhi.n	c462 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c45c:	2300      	movs	r3, #0
    c45e:	747b      	strb	r3, [r7, #17]
    c460:	e001      	b.n	c466 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c462:	89fb      	ldrh	r3, [r7, #14]
    c464:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c466:	8a7a      	ldrh	r2, [r7, #18]
    c468:	7c7b      	ldrb	r3, [r7, #17]
    c46a:	79f8      	ldrb	r0, [r7, #7]
    c46c:	6979      	ldr	r1, [r7, #20]
    c46e:	4c09      	ldr	r4, [pc, #36]	; (c494 <usbdc_get_cfg_desc+0xac>)
    c470:	47a0      	blx	r4
    c472:	4603      	mov	r3, r0
    c474:	2b00      	cmp	r3, #0
    c476:	d001      	beq.n	c47c <usbdc_get_cfg_desc+0x94>
		return false;
    c478:	2300      	movs	r3, #0
    c47a:	e000      	b.n	c47e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c47c:	2301      	movs	r3, #1
}
    c47e:	4618      	mov	r0, r3
    c480:	371c      	adds	r7, #28
    c482:	46bd      	mov	sp, r7
    c484:	bd90      	pop	{r4, r7, pc}
    c486:	bf00      	nop
    c488:	20001084 	.word	0x20001084
    c48c:	0000d1a5 	.word	0x0000d1a5
    c490:	0000c351 	.word	0x0000c351
    c494:	0000ce55 	.word	0x0000ce55

0000c498 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c498:	b590      	push	{r4, r7, lr}
    c49a:	b085      	sub	sp, #20
    c49c:	af00      	add	r7, sp, #0
    c49e:	4603      	mov	r3, r0
    c4a0:	6039      	str	r1, [r7, #0]
    c4a2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c4a4:	683b      	ldr	r3, [r7, #0]
    c4a6:	799a      	ldrb	r2, [r3, #6]
    c4a8:	79db      	ldrb	r3, [r3, #7]
    c4aa:	021b      	lsls	r3, r3, #8
    c4ac:	4313      	orrs	r3, r2
    c4ae:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c4b0:	683b      	ldr	r3, [r7, #0]
    c4b2:	885b      	ldrh	r3, [r3, #2]
    c4b4:	b29b      	uxth	r3, r3
    c4b6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c4b8:	89fa      	ldrh	r2, [r7, #14]
    c4ba:	4b1a      	ldr	r3, [pc, #104]	; (c524 <usbdc_get_str_desc+0x8c>)
    c4bc:	7f1b      	ldrb	r3, [r3, #28]
    c4be:	3b01      	subs	r3, #1
    c4c0:	4013      	ands	r3, r2
    c4c2:	2b00      	cmp	r3, #0
    c4c4:	bf0c      	ite	eq
    c4c6:	2301      	moveq	r3, #1
    c4c8:	2300      	movne	r3, #0
    c4ca:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c4cc:	4b15      	ldr	r3, [pc, #84]	; (c524 <usbdc_get_str_desc+0x8c>)
    c4ce:	681b      	ldr	r3, [r3, #0]
    c4d0:	6818      	ldr	r0, [r3, #0]
    c4d2:	4b14      	ldr	r3, [pc, #80]	; (c524 <usbdc_get_str_desc+0x8c>)
    c4d4:	681b      	ldr	r3, [r3, #0]
    c4d6:	685b      	ldr	r3, [r3, #4]
    c4d8:	7b3a      	ldrb	r2, [r7, #12]
    c4da:	4619      	mov	r1, r3
    c4dc:	4b12      	ldr	r3, [pc, #72]	; (c528 <usbdc_get_str_desc+0x90>)
    c4de:	4798      	blx	r3
    c4e0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c4e2:	68bb      	ldr	r3, [r7, #8]
    c4e4:	2b00      	cmp	r3, #0
    c4e6:	d101      	bne.n	c4ec <usbdc_get_str_desc+0x54>
		return false;
    c4e8:	2300      	movs	r3, #0
    c4ea:	e017      	b.n	c51c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c4ec:	68bb      	ldr	r3, [r7, #8]
    c4ee:	781b      	ldrb	r3, [r3, #0]
    c4f0:	b29b      	uxth	r3, r3
    c4f2:	89fa      	ldrh	r2, [r7, #14]
    c4f4:	429a      	cmp	r2, r3
    c4f6:	d802      	bhi.n	c4fe <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c4f8:	2300      	movs	r3, #0
    c4fa:	737b      	strb	r3, [r7, #13]
    c4fc:	e002      	b.n	c504 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c4fe:	68bb      	ldr	r3, [r7, #8]
    c500:	781b      	ldrb	r3, [r3, #0]
    c502:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c504:	89fa      	ldrh	r2, [r7, #14]
    c506:	7b7b      	ldrb	r3, [r7, #13]
    c508:	79f8      	ldrb	r0, [r7, #7]
    c50a:	68b9      	ldr	r1, [r7, #8]
    c50c:	4c07      	ldr	r4, [pc, #28]	; (c52c <usbdc_get_str_desc+0x94>)
    c50e:	47a0      	blx	r4
    c510:	4603      	mov	r3, r0
    c512:	2b00      	cmp	r3, #0
    c514:	d001      	beq.n	c51a <usbdc_get_str_desc+0x82>
		return false;
    c516:	2300      	movs	r3, #0
    c518:	e000      	b.n	c51c <usbdc_get_str_desc+0x84>
	}
	return true;
    c51a:	2301      	movs	r3, #1
}
    c51c:	4618      	mov	r0, r3
    c51e:	3714      	adds	r7, #20
    c520:	46bd      	mov	sp, r7
    c522:	bd90      	pop	{r4, r7, pc}
    c524:	20001084 	.word	0x20001084
    c528:	0000d21d 	.word	0x0000d21d
    c52c:	0000ce55 	.word	0x0000ce55

0000c530 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c530:	b580      	push	{r7, lr}
    c532:	b084      	sub	sp, #16
    c534:	af00      	add	r7, sp, #0
    c536:	4603      	mov	r3, r0
    c538:	6039      	str	r1, [r7, #0]
    c53a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c53c:	683b      	ldr	r3, [r7, #0]
    c53e:	885b      	ldrh	r3, [r3, #2]
    c540:	b29b      	uxth	r3, r3
    c542:	0a1b      	lsrs	r3, r3, #8
    c544:	b29b      	uxth	r3, r3
    c546:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c548:	7bfb      	ldrb	r3, [r7, #15]
    c54a:	2b02      	cmp	r3, #2
    c54c:	d00d      	beq.n	c56a <usbdc_get_desc_req+0x3a>
    c54e:	2b03      	cmp	r3, #3
    c550:	d012      	beq.n	c578 <usbdc_get_desc_req+0x48>
    c552:	2b01      	cmp	r3, #1
    c554:	d002      	beq.n	c55c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c556:	bf00      	nop
	}
	return false;
    c558:	2300      	movs	r3, #0
    c55a:	e013      	b.n	c584 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c55c:	79fb      	ldrb	r3, [r7, #7]
    c55e:	6839      	ldr	r1, [r7, #0]
    c560:	4618      	mov	r0, r3
    c562:	4b0a      	ldr	r3, [pc, #40]	; (c58c <usbdc_get_desc_req+0x5c>)
    c564:	4798      	blx	r3
    c566:	4603      	mov	r3, r0
    c568:	e00c      	b.n	c584 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c56a:	79fb      	ldrb	r3, [r7, #7]
    c56c:	6839      	ldr	r1, [r7, #0]
    c56e:	4618      	mov	r0, r3
    c570:	4b07      	ldr	r3, [pc, #28]	; (c590 <usbdc_get_desc_req+0x60>)
    c572:	4798      	blx	r3
    c574:	4603      	mov	r3, r0
    c576:	e005      	b.n	c584 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c578:	79fb      	ldrb	r3, [r7, #7]
    c57a:	6839      	ldr	r1, [r7, #0]
    c57c:	4618      	mov	r0, r3
    c57e:	4b05      	ldr	r3, [pc, #20]	; (c594 <usbdc_get_desc_req+0x64>)
    c580:	4798      	blx	r3
    c582:	4603      	mov	r3, r0
}
    c584:	4618      	mov	r0, r3
    c586:	3710      	adds	r7, #16
    c588:	46bd      	mov	sp, r7
    c58a:	bd80      	pop	{r7, pc}
    c58c:	0000c371 	.word	0x0000c371
    c590:	0000c3e9 	.word	0x0000c3e9
    c594:	0000c499 	.word	0x0000c499

0000c598 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c598:	b590      	push	{r4, r7, lr}
    c59a:	b085      	sub	sp, #20
    c59c:	af00      	add	r7, sp, #0
    c59e:	4603      	mov	r3, r0
    c5a0:	6039      	str	r1, [r7, #0]
    c5a2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c5a4:	683b      	ldr	r3, [r7, #0]
    c5a6:	781b      	ldrb	r3, [r3, #0]
    c5a8:	f003 031f 	and.w	r3, r3, #31
    c5ac:	2b00      	cmp	r3, #0
    c5ae:	db1b      	blt.n	c5e8 <usbdc_get_status_req+0x50>
    c5b0:	2b01      	cmp	r3, #1
    c5b2:	dd02      	ble.n	c5ba <usbdc_get_status_req+0x22>
    c5b4:	2b02      	cmp	r3, #2
    c5b6:	d003      	beq.n	c5c0 <usbdc_get_status_req+0x28>
    c5b8:	e016      	b.n	c5e8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c5ba:	2300      	movs	r3, #0
    c5bc:	60fb      	str	r3, [r7, #12]
		break;
    c5be:	e015      	b.n	c5ec <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c5c0:	683b      	ldr	r3, [r7, #0]
    c5c2:	889b      	ldrh	r3, [r3, #4]
    c5c4:	b29b      	uxth	r3, r3
    c5c6:	b2db      	uxtb	r3, r3
    c5c8:	2102      	movs	r1, #2
    c5ca:	4618      	mov	r0, r3
    c5cc:	4b0f      	ldr	r3, [pc, #60]	; (c60c <usbdc_get_status_req+0x74>)
    c5ce:	4798      	blx	r3
    c5d0:	4603      	mov	r3, r0
    c5d2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c5d4:	68fb      	ldr	r3, [r7, #12]
    c5d6:	2b00      	cmp	r3, #0
    c5d8:	da01      	bge.n	c5de <usbdc_get_status_req+0x46>
			return false;
    c5da:	2300      	movs	r3, #0
    c5dc:	e012      	b.n	c604 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c5de:	68fb      	ldr	r3, [r7, #12]
    c5e0:	f003 0301 	and.w	r3, r3, #1
    c5e4:	60fb      	str	r3, [r7, #12]
		break;
    c5e6:	e001      	b.n	c5ec <usbdc_get_status_req+0x54>
	default:
		return false;
    c5e8:	2300      	movs	r3, #0
    c5ea:	e00b      	b.n	c604 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c5ec:	4b08      	ldr	r3, [pc, #32]	; (c610 <usbdc_get_status_req+0x78>)
    c5ee:	695b      	ldr	r3, [r3, #20]
    c5f0:	89ba      	ldrh	r2, [r7, #12]
    c5f2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c5f4:	4b06      	ldr	r3, [pc, #24]	; (c610 <usbdc_get_status_req+0x78>)
    c5f6:	6959      	ldr	r1, [r3, #20]
    c5f8:	79f8      	ldrb	r0, [r7, #7]
    c5fa:	2300      	movs	r3, #0
    c5fc:	2202      	movs	r2, #2
    c5fe:	4c05      	ldr	r4, [pc, #20]	; (c614 <usbdc_get_status_req+0x7c>)
    c600:	47a0      	blx	r4
	return true;
    c602:	2301      	movs	r3, #1
}
    c604:	4618      	mov	r0, r3
    c606:	3714      	adds	r7, #20
    c608:	46bd      	mov	sp, r7
    c60a:	bd90      	pop	{r4, r7, pc}
    c60c:	00003755 	.word	0x00003755
    c610:	20001084 	.word	0x20001084
    c614:	0000ce55 	.word	0x0000ce55

0000c618 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c618:	b590      	push	{r4, r7, lr}
    c61a:	b085      	sub	sp, #20
    c61c:	af00      	add	r7, sp, #0
    c61e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c620:	4b1f      	ldr	r3, [pc, #124]	; (c6a0 <usbdc_get_interface+0x88>)
    c622:	691b      	ldr	r3, [r3, #16]
    c624:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c626:	4b1e      	ldr	r3, [pc, #120]	; (c6a0 <usbdc_get_interface+0x88>)
    c628:	7f5b      	ldrb	r3, [r3, #29]
    c62a:	461a      	mov	r2, r3
    c62c:	687b      	ldr	r3, [r7, #4]
    c62e:	889b      	ldrh	r3, [r3, #4]
    c630:	b29b      	uxth	r3, r3
    c632:	fa42 f303 	asr.w	r3, r2, r3
    c636:	f003 0301 	and.w	r3, r3, #1
    c63a:	2b00      	cmp	r3, #0
    c63c:	d128      	bne.n	c690 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c63e:	4b18      	ldr	r3, [pc, #96]	; (c6a0 <usbdc_get_interface+0x88>)
    c640:	695b      	ldr	r3, [r3, #20]
    c642:	2200      	movs	r2, #0
    c644:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c646:	4b16      	ldr	r3, [pc, #88]	; (c6a0 <usbdc_get_interface+0x88>)
    c648:	6959      	ldr	r1, [r3, #20]
    c64a:	2300      	movs	r3, #0
    c64c:	2201      	movs	r2, #1
    c64e:	2000      	movs	r0, #0
    c650:	4c14      	ldr	r4, [pc, #80]	; (c6a4 <usbdc_get_interface+0x8c>)
    c652:	47a0      	blx	r4
		return true;
    c654:	2301      	movs	r3, #1
    c656:	e01f      	b.n	c698 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c658:	68fb      	ldr	r3, [r7, #12]
    c65a:	685b      	ldr	r3, [r3, #4]
    c65c:	687a      	ldr	r2, [r7, #4]
    c65e:	2102      	movs	r1, #2
    c660:	68f8      	ldr	r0, [r7, #12]
    c662:	4798      	blx	r3
    c664:	60b8      	str	r0, [r7, #8]
    c666:	68bb      	ldr	r3, [r7, #8]
    c668:	2b00      	cmp	r3, #0
    c66a:	da03      	bge.n	c674 <usbdc_get_interface+0x5c>
			func = func->next;
    c66c:	68fb      	ldr	r3, [r7, #12]
    c66e:	681b      	ldr	r3, [r3, #0]
    c670:	60fb      	str	r3, [r7, #12]
    c672:	e00d      	b.n	c690 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c674:	4b0a      	ldr	r3, [pc, #40]	; (c6a0 <usbdc_get_interface+0x88>)
    c676:	695b      	ldr	r3, [r3, #20]
    c678:	68ba      	ldr	r2, [r7, #8]
    c67a:	b2d2      	uxtb	r2, r2
    c67c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c67e:	4b08      	ldr	r3, [pc, #32]	; (c6a0 <usbdc_get_interface+0x88>)
    c680:	6959      	ldr	r1, [r3, #20]
    c682:	2300      	movs	r3, #0
    c684:	2201      	movs	r2, #1
    c686:	2000      	movs	r0, #0
    c688:	4c06      	ldr	r4, [pc, #24]	; (c6a4 <usbdc_get_interface+0x8c>)
    c68a:	47a0      	blx	r4
			return true;
    c68c:	2301      	movs	r3, #1
    c68e:	e003      	b.n	c698 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c690:	68fb      	ldr	r3, [r7, #12]
    c692:	2b00      	cmp	r3, #0
    c694:	d1e0      	bne.n	c658 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c696:	2300      	movs	r3, #0
}
    c698:	4618      	mov	r0, r3
    c69a:	3714      	adds	r7, #20
    c69c:	46bd      	mov	sp, r7
    c69e:	bd90      	pop	{r4, r7, pc}
    c6a0:	20001084 	.word	0x20001084
    c6a4:	0000ce55 	.word	0x0000ce55

0000c6a8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c6a8:	b590      	push	{r4, r7, lr}
    c6aa:	b083      	sub	sp, #12
    c6ac:	af00      	add	r7, sp, #0
    c6ae:	4603      	mov	r3, r0
    c6b0:	6039      	str	r1, [r7, #0]
    c6b2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c6b4:	683b      	ldr	r3, [r7, #0]
    c6b6:	785b      	ldrb	r3, [r3, #1]
    c6b8:	2b0a      	cmp	r3, #10
    c6ba:	d83a      	bhi.n	c732 <usbdc_get_req+0x8a>
    c6bc:	a201      	add	r2, pc, #4	; (adr r2, c6c4 <usbdc_get_req+0x1c>)
    c6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c6c2:	bf00      	nop
    c6c4:	0000c71b 	.word	0x0000c71b
    c6c8:	0000c733 	.word	0x0000c733
    c6cc:	0000c733 	.word	0x0000c733
    c6d0:	0000c733 	.word	0x0000c733
    c6d4:	0000c733 	.word	0x0000c733
    c6d8:	0000c733 	.word	0x0000c733
    c6dc:	0000c6f1 	.word	0x0000c6f1
    c6e0:	0000c733 	.word	0x0000c733
    c6e4:	0000c6ff 	.word	0x0000c6ff
    c6e8:	0000c733 	.word	0x0000c733
    c6ec:	0000c729 	.word	0x0000c729
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c6f0:	79fb      	ldrb	r3, [r7, #7]
    c6f2:	6839      	ldr	r1, [r7, #0]
    c6f4:	4618      	mov	r0, r3
    c6f6:	4b11      	ldr	r3, [pc, #68]	; (c73c <usbdc_get_req+0x94>)
    c6f8:	4798      	blx	r3
    c6fa:	4603      	mov	r3, r0
    c6fc:	e01a      	b.n	c734 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c6fe:	4b10      	ldr	r3, [pc, #64]	; (c740 <usbdc_get_req+0x98>)
    c700:	695b      	ldr	r3, [r3, #20]
    c702:	4a0f      	ldr	r2, [pc, #60]	; (c740 <usbdc_get_req+0x98>)
    c704:	7ed2      	ldrb	r2, [r2, #27]
    c706:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c708:	4b0d      	ldr	r3, [pc, #52]	; (c740 <usbdc_get_req+0x98>)
    c70a:	6959      	ldr	r1, [r3, #20]
    c70c:	79f8      	ldrb	r0, [r7, #7]
    c70e:	2300      	movs	r3, #0
    c710:	2201      	movs	r2, #1
    c712:	4c0c      	ldr	r4, [pc, #48]	; (c744 <usbdc_get_req+0x9c>)
    c714:	47a0      	blx	r4
		return true;
    c716:	2301      	movs	r3, #1
    c718:	e00c      	b.n	c734 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c71a:	79fb      	ldrb	r3, [r7, #7]
    c71c:	6839      	ldr	r1, [r7, #0]
    c71e:	4618      	mov	r0, r3
    c720:	4b09      	ldr	r3, [pc, #36]	; (c748 <usbdc_get_req+0xa0>)
    c722:	4798      	blx	r3
    c724:	4603      	mov	r3, r0
    c726:	e005      	b.n	c734 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c728:	6838      	ldr	r0, [r7, #0]
    c72a:	4b08      	ldr	r3, [pc, #32]	; (c74c <usbdc_get_req+0xa4>)
    c72c:	4798      	blx	r3
    c72e:	4603      	mov	r3, r0
    c730:	e000      	b.n	c734 <usbdc_get_req+0x8c>
	default:
		return false;
    c732:	2300      	movs	r3, #0
	}
}
    c734:	4618      	mov	r0, r3
    c736:	370c      	adds	r7, #12
    c738:	46bd      	mov	sp, r7
    c73a:	bd90      	pop	{r4, r7, pc}
    c73c:	0000c531 	.word	0x0000c531
    c740:	20001084 	.word	0x20001084
    c744:	0000ce55 	.word	0x0000ce55
    c748:	0000c599 	.word	0x0000c599
    c74c:	0000c619 	.word	0x0000c619

0000c750 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c750:	b590      	push	{r4, r7, lr}
    c752:	b083      	sub	sp, #12
    c754:	af00      	add	r7, sp, #0
    c756:	4603      	mov	r3, r0
    c758:	6039      	str	r1, [r7, #0]
    c75a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c75c:	683b      	ldr	r3, [r7, #0]
    c75e:	781b      	ldrb	r3, [r3, #0]
    c760:	f003 031f 	and.w	r3, r3, #31
    c764:	2b02      	cmp	r3, #2
    c766:	d116      	bne.n	c796 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c768:	683b      	ldr	r3, [r7, #0]
    c76a:	88db      	ldrh	r3, [r3, #6]
    c76c:	b29b      	uxth	r3, r3
    c76e:	2b00      	cmp	r3, #0
    c770:	d001      	beq.n	c776 <usbdc_clear_ftr_req+0x26>
			return false;
    c772:	2300      	movs	r3, #0
    c774:	e010      	b.n	c798 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c776:	683b      	ldr	r3, [r7, #0]
    c778:	889b      	ldrh	r3, [r3, #4]
    c77a:	b29b      	uxth	r3, r3
    c77c:	b2db      	uxtb	r3, r3
    c77e:	2100      	movs	r1, #0
    c780:	4618      	mov	r0, r3
    c782:	4b07      	ldr	r3, [pc, #28]	; (c7a0 <usbdc_clear_ftr_req+0x50>)
    c784:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c786:	79f8      	ldrb	r0, [r7, #7]
    c788:	2301      	movs	r3, #1
    c78a:	2200      	movs	r2, #0
    c78c:	2100      	movs	r1, #0
    c78e:	4c05      	ldr	r4, [pc, #20]	; (c7a4 <usbdc_clear_ftr_req+0x54>)
    c790:	47a0      	blx	r4
		return true;
    c792:	2301      	movs	r3, #1
    c794:	e000      	b.n	c798 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c796:	2300      	movs	r3, #0
	}
}
    c798:	4618      	mov	r0, r3
    c79a:	370c      	adds	r7, #12
    c79c:	46bd      	mov	sp, r7
    c79e:	bd90      	pop	{r4, r7, pc}
    c7a0:	00003755 	.word	0x00003755
    c7a4:	0000ce55 	.word	0x0000ce55

0000c7a8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c7a8:	b590      	push	{r4, r7, lr}
    c7aa:	b083      	sub	sp, #12
    c7ac:	af00      	add	r7, sp, #0
    c7ae:	4603      	mov	r3, r0
    c7b0:	6039      	str	r1, [r7, #0]
    c7b2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c7b4:	683b      	ldr	r3, [r7, #0]
    c7b6:	781b      	ldrb	r3, [r3, #0]
    c7b8:	f003 031f 	and.w	r3, r3, #31
    c7bc:	2b02      	cmp	r3, #2
    c7be:	d116      	bne.n	c7ee <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c7c0:	683b      	ldr	r3, [r7, #0]
    c7c2:	88db      	ldrh	r3, [r3, #6]
    c7c4:	b29b      	uxth	r3, r3
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d001      	beq.n	c7ce <usbdc_set_ftr_req+0x26>
			return false;
    c7ca:	2300      	movs	r3, #0
    c7cc:	e010      	b.n	c7f0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c7ce:	683b      	ldr	r3, [r7, #0]
    c7d0:	889b      	ldrh	r3, [r3, #4]
    c7d2:	b29b      	uxth	r3, r3
    c7d4:	b2db      	uxtb	r3, r3
    c7d6:	2101      	movs	r1, #1
    c7d8:	4618      	mov	r0, r3
    c7da:	4b07      	ldr	r3, [pc, #28]	; (c7f8 <usbdc_set_ftr_req+0x50>)
    c7dc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c7de:	79f8      	ldrb	r0, [r7, #7]
    c7e0:	2301      	movs	r3, #1
    c7e2:	2200      	movs	r2, #0
    c7e4:	2100      	movs	r1, #0
    c7e6:	4c05      	ldr	r4, [pc, #20]	; (c7fc <usbdc_set_ftr_req+0x54>)
    c7e8:	47a0      	blx	r4
		return true;
    c7ea:	2301      	movs	r3, #1
    c7ec:	e000      	b.n	c7f0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c7ee:	2300      	movs	r3, #0
	}
}
    c7f0:	4618      	mov	r0, r3
    c7f2:	370c      	adds	r7, #12
    c7f4:	46bd      	mov	sp, r7
    c7f6:	bd90      	pop	{r4, r7, pc}
    c7f8:	00003755 	.word	0x00003755
    c7fc:	0000ce55 	.word	0x0000ce55

0000c800 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c800:	b580      	push	{r7, lr}
    c802:	b082      	sub	sp, #8
    c804:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c806:	4b0a      	ldr	r3, [pc, #40]	; (c830 <usbdc_unconfig+0x30>)
    c808:	691b      	ldr	r3, [r3, #16]
    c80a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c80c:	e008      	b.n	c820 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c80e:	687b      	ldr	r3, [r7, #4]
    c810:	685b      	ldr	r3, [r3, #4]
    c812:	2200      	movs	r2, #0
    c814:	2101      	movs	r1, #1
    c816:	6878      	ldr	r0, [r7, #4]
    c818:	4798      	blx	r3
		func = func->next;
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	681b      	ldr	r3, [r3, #0]
    c81e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c820:	687b      	ldr	r3, [r7, #4]
    c822:	2b00      	cmp	r3, #0
    c824:	d1f3      	bne.n	c80e <usbdc_unconfig+0xe>
	}
}
    c826:	bf00      	nop
    c828:	3708      	adds	r7, #8
    c82a:	46bd      	mov	sp, r7
    c82c:	bd80      	pop	{r7, pc}
    c82e:	bf00      	nop
    c830:	20001084 	.word	0x20001084

0000c834 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c834:	b580      	push	{r7, lr}
    c836:	b088      	sub	sp, #32
    c838:	af00      	add	r7, sp, #0
    c83a:	4603      	mov	r3, r0
    c83c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c83e:	2300      	movs	r3, #0
    c840:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c842:	23ff      	movs	r3, #255	; 0xff
    c844:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c846:	79fb      	ldrb	r3, [r7, #7]
    c848:	2b00      	cmp	r3, #0
    c84a:	d103      	bne.n	c854 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c84c:	4b2e      	ldr	r3, [pc, #184]	; (c908 <usbdc_set_config+0xd4>)
    c84e:	4798      	blx	r3
		return true;
    c850:	2301      	movs	r3, #1
    c852:	e055      	b.n	c900 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c854:	69bb      	ldr	r3, [r7, #24]
    c856:	2b00      	cmp	r3, #0
    c858:	d10a      	bne.n	c870 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c85a:	4b2c      	ldr	r3, [pc, #176]	; (c90c <usbdc_set_config+0xd8>)
    c85c:	681b      	ldr	r3, [r3, #0]
    c85e:	6818      	ldr	r0, [r3, #0]
    c860:	4b2a      	ldr	r3, [pc, #168]	; (c90c <usbdc_set_config+0xd8>)
    c862:	681b      	ldr	r3, [r3, #0]
    c864:	685b      	ldr	r3, [r3, #4]
    c866:	79fa      	ldrb	r2, [r7, #7]
    c868:	4619      	mov	r1, r3
    c86a:	4b29      	ldr	r3, [pc, #164]	; (c910 <usbdc_set_config+0xdc>)
    c86c:	4798      	blx	r3
    c86e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c870:	69bb      	ldr	r3, [r7, #24]
    c872:	2b00      	cmp	r3, #0
    c874:	d101      	bne.n	c87a <usbdc_set_config+0x46>
		return false;
    c876:	2300      	movs	r3, #0
    c878:	e042      	b.n	c900 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c87a:	69b8      	ldr	r0, [r7, #24]
    c87c:	4b25      	ldr	r3, [pc, #148]	; (c914 <usbdc_set_config+0xe0>)
    c87e:	4798      	blx	r3
    c880:	4603      	mov	r3, r0
    c882:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c884:	8abb      	ldrh	r3, [r7, #20]
    c886:	69ba      	ldr	r2, [r7, #24]
    c888:	4413      	add	r3, r2
    c88a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c88c:	693b      	ldr	r3, [r7, #16]
    c88e:	2204      	movs	r2, #4
    c890:	4619      	mov	r1, r3
    c892:	69b8      	ldr	r0, [r7, #24]
    c894:	4b20      	ldr	r3, [pc, #128]	; (c918 <usbdc_set_config+0xe4>)
    c896:	4798      	blx	r3
    c898:	4603      	mov	r3, r0
    c89a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c89c:	e02c      	b.n	c8f8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c89e:	68fb      	ldr	r3, [r7, #12]
    c8a0:	3302      	adds	r3, #2
    c8a2:	781b      	ldrb	r3, [r3, #0]
    c8a4:	7dfa      	ldrb	r2, [r7, #23]
    c8a6:	429a      	cmp	r2, r3
    c8a8:	d018      	beq.n	c8dc <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c8aa:	68fb      	ldr	r3, [r7, #12]
    c8ac:	789b      	ldrb	r3, [r3, #2]
    c8ae:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c8b0:	4b16      	ldr	r3, [pc, #88]	; (c90c <usbdc_set_config+0xd8>)
    c8b2:	691b      	ldr	r3, [r3, #16]
    c8b4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c8b6:	e00c      	b.n	c8d2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c8b8:	69fb      	ldr	r3, [r7, #28]
    c8ba:	685b      	ldr	r3, [r3, #4]
    c8bc:	f107 020c 	add.w	r2, r7, #12
    c8c0:	2100      	movs	r1, #0
    c8c2:	69f8      	ldr	r0, [r7, #28]
    c8c4:	4798      	blx	r3
    c8c6:	4603      	mov	r3, r0
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	d006      	beq.n	c8da <usbdc_set_config+0xa6>
					func = func->next;
    c8cc:	69fb      	ldr	r3, [r7, #28]
    c8ce:	681b      	ldr	r3, [r3, #0]
    c8d0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c8d2:	69fb      	ldr	r3, [r7, #28]
    c8d4:	2b00      	cmp	r3, #0
    c8d6:	d1ef      	bne.n	c8b8 <usbdc_set_config+0x84>
    c8d8:	e000      	b.n	c8dc <usbdc_set_config+0xa8>
				} else {
					break;
    c8da:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c8dc:	68fb      	ldr	r3, [r7, #12]
    c8de:	4618      	mov	r0, r3
    c8e0:	4b0e      	ldr	r3, [pc, #56]	; (c91c <usbdc_set_config+0xe8>)
    c8e2:	4798      	blx	r3
    c8e4:	4603      	mov	r3, r0
    c8e6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c8e8:	68fb      	ldr	r3, [r7, #12]
    c8ea:	6939      	ldr	r1, [r7, #16]
    c8ec:	2204      	movs	r2, #4
    c8ee:	4618      	mov	r0, r3
    c8f0:	4b09      	ldr	r3, [pc, #36]	; (c918 <usbdc_set_config+0xe4>)
    c8f2:	4798      	blx	r3
    c8f4:	4603      	mov	r3, r0
    c8f6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c8f8:	68fb      	ldr	r3, [r7, #12]
    c8fa:	2b00      	cmp	r3, #0
    c8fc:	d1cf      	bne.n	c89e <usbdc_set_config+0x6a>
	}
	return true;
    c8fe:	2301      	movs	r3, #1
}
    c900:	4618      	mov	r0, r3
    c902:	3720      	adds	r7, #32
    c904:	46bd      	mov	sp, r7
    c906:	bd80      	pop	{r7, pc}
    c908:	0000c801 	.word	0x0000c801
    c90c:	20001084 	.word	0x20001084
    c910:	0000d1a5 	.word	0x0000d1a5
    c914:	0000c351 	.word	0x0000c351
    c918:	0000d0e5 	.word	0x0000d0e5
    c91c:	0000c32d 	.word	0x0000c32d

0000c920 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c920:	b580      	push	{r7, lr}
    c922:	b082      	sub	sp, #8
    c924:	af00      	add	r7, sp, #0
    c926:	4603      	mov	r3, r0
    c928:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c92a:	79fb      	ldrb	r3, [r7, #7]
    c92c:	4618      	mov	r0, r3
    c92e:	4b03      	ldr	r3, [pc, #12]	; (c93c <usbdc_set_address+0x1c>)
    c930:	4798      	blx	r3
}
    c932:	bf00      	nop
    c934:	3708      	adds	r7, #8
    c936:	46bd      	mov	sp, r7
    c938:	bd80      	pop	{r7, pc}
    c93a:	bf00      	nop
    c93c:	00003371 	.word	0x00003371

0000c940 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c940:	b590      	push	{r4, r7, lr}
    c942:	b087      	sub	sp, #28
    c944:	af00      	add	r7, sp, #0
    c946:	4603      	mov	r3, r0
    c948:	460a      	mov	r2, r1
    c94a:	80fb      	strh	r3, [r7, #6]
    c94c:	4613      	mov	r3, r2
    c94e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c950:	2300      	movs	r3, #0
    c952:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c954:	693b      	ldr	r3, [r7, #16]
    c956:	2b00      	cmp	r3, #0
    c958:	d10b      	bne.n	c972 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c95a:	4b43      	ldr	r3, [pc, #268]	; (ca68 <usbdc_set_interface+0x128>)
    c95c:	681b      	ldr	r3, [r3, #0]
    c95e:	6818      	ldr	r0, [r3, #0]
    c960:	4b41      	ldr	r3, [pc, #260]	; (ca68 <usbdc_set_interface+0x128>)
    c962:	681b      	ldr	r3, [r3, #0]
    c964:	6859      	ldr	r1, [r3, #4]
    c966:	4b40      	ldr	r3, [pc, #256]	; (ca68 <usbdc_set_interface+0x128>)
    c968:	7edb      	ldrb	r3, [r3, #27]
    c96a:	461a      	mov	r2, r3
    c96c:	4b3f      	ldr	r3, [pc, #252]	; (ca6c <usbdc_set_interface+0x12c>)
    c96e:	4798      	blx	r3
    c970:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c972:	693b      	ldr	r3, [r7, #16]
    c974:	2b00      	cmp	r3, #0
    c976:	d101      	bne.n	c97c <usbdc_set_interface+0x3c>
		return false;
    c978:	2300      	movs	r3, #0
    c97a:	e071      	b.n	ca60 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c97c:	693b      	ldr	r3, [r7, #16]
    c97e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c980:	6938      	ldr	r0, [r7, #16]
    c982:	4b3b      	ldr	r3, [pc, #236]	; (ca70 <usbdc_set_interface+0x130>)
    c984:	4798      	blx	r3
    c986:	4603      	mov	r3, r0
    c988:	461a      	mov	r2, r3
    c98a:	693b      	ldr	r3, [r7, #16]
    c98c:	4413      	add	r3, r2
    c98e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c990:	68bb      	ldr	r3, [r7, #8]
    c992:	68f9      	ldr	r1, [r7, #12]
    c994:	2204      	movs	r2, #4
    c996:	4618      	mov	r0, r3
    c998:	4b36      	ldr	r3, [pc, #216]	; (ca74 <usbdc_set_interface+0x134>)
    c99a:	4798      	blx	r3
    c99c:	6138      	str	r0, [r7, #16]
    c99e:	693b      	ldr	r3, [r7, #16]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d113      	bne.n	c9cc <usbdc_set_interface+0x8c>
		return false;
    c9a4:	2300      	movs	r3, #0
    c9a6:	e05b      	b.n	ca60 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c9a8:	68bb      	ldr	r3, [r7, #8]
    c9aa:	4618      	mov	r0, r3
    c9ac:	4b32      	ldr	r3, [pc, #200]	; (ca78 <usbdc_set_interface+0x138>)
    c9ae:	4798      	blx	r3
    c9b0:	4603      	mov	r3, r0
    c9b2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c9b4:	68bb      	ldr	r3, [r7, #8]
    c9b6:	68f9      	ldr	r1, [r7, #12]
    c9b8:	2204      	movs	r2, #4
    c9ba:	4618      	mov	r0, r3
    c9bc:	4b2d      	ldr	r3, [pc, #180]	; (ca74 <usbdc_set_interface+0x134>)
    c9be:	4798      	blx	r3
    c9c0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c9c2:	693b      	ldr	r3, [r7, #16]
    c9c4:	2b00      	cmp	r3, #0
    c9c6:	d101      	bne.n	c9cc <usbdc_set_interface+0x8c>
			return false;
    c9c8:	2300      	movs	r3, #0
    c9ca:	e049      	b.n	ca60 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c9cc:	693b      	ldr	r3, [r7, #16]
    c9ce:	3302      	adds	r3, #2
    c9d0:	781b      	ldrb	r3, [r3, #0]
    c9d2:	b29b      	uxth	r3, r3
    c9d4:	88ba      	ldrh	r2, [r7, #4]
    c9d6:	429a      	cmp	r2, r3
    c9d8:	d1e6      	bne.n	c9a8 <usbdc_set_interface+0x68>
    c9da:	693b      	ldr	r3, [r7, #16]
    c9dc:	3303      	adds	r3, #3
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	b29b      	uxth	r3, r3
    c9e2:	88fa      	ldrh	r2, [r7, #6]
    c9e4:	429a      	cmp	r2, r3
    c9e6:	d1df      	bne.n	c9a8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c9e8:	693b      	ldr	r3, [r7, #16]
    c9ea:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c9ec:	4b1e      	ldr	r3, [pc, #120]	; (ca68 <usbdc_set_interface+0x128>)
    c9ee:	691b      	ldr	r3, [r3, #16]
    c9f0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c9f2:	e031      	b.n	ca58 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c9f4:	697b      	ldr	r3, [r7, #20]
    c9f6:	685b      	ldr	r3, [r3, #4]
    c9f8:	f107 0208 	add.w	r2, r7, #8
    c9fc:	2101      	movs	r1, #1
    c9fe:	6978      	ldr	r0, [r7, #20]
    ca00:	4798      	blx	r3
    ca02:	4603      	mov	r3, r0
    ca04:	2b00      	cmp	r3, #0
    ca06:	d003      	beq.n	ca10 <usbdc_set_interface+0xd0>
			func = func->next;
    ca08:	697b      	ldr	r3, [r7, #20]
    ca0a:	681b      	ldr	r3, [r3, #0]
    ca0c:	617b      	str	r3, [r7, #20]
    ca0e:	e023      	b.n	ca58 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    ca10:	697b      	ldr	r3, [r7, #20]
    ca12:	685b      	ldr	r3, [r3, #4]
    ca14:	f107 0208 	add.w	r2, r7, #8
    ca18:	2100      	movs	r1, #0
    ca1a:	6978      	ldr	r0, [r7, #20]
    ca1c:	4798      	blx	r3
    ca1e:	4603      	mov	r3, r0
    ca20:	2b00      	cmp	r3, #0
    ca22:	d117      	bne.n	ca54 <usbdc_set_interface+0x114>
			if (alt_set) {
    ca24:	88fb      	ldrh	r3, [r7, #6]
    ca26:	2b00      	cmp	r3, #0
    ca28:	d00c      	beq.n	ca44 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    ca2a:	4b0f      	ldr	r3, [pc, #60]	; (ca68 <usbdc_set_interface+0x128>)
    ca2c:	7f5b      	ldrb	r3, [r3, #29]
    ca2e:	b25a      	sxtb	r2, r3
    ca30:	88bb      	ldrh	r3, [r7, #4]
    ca32:	2101      	movs	r1, #1
    ca34:	fa01 f303 	lsl.w	r3, r1, r3
    ca38:	b25b      	sxtb	r3, r3
    ca3a:	4313      	orrs	r3, r2
    ca3c:	b25b      	sxtb	r3, r3
    ca3e:	b2da      	uxtb	r2, r3
    ca40:	4b09      	ldr	r3, [pc, #36]	; (ca68 <usbdc_set_interface+0x128>)
    ca42:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    ca44:	2300      	movs	r3, #0
    ca46:	2200      	movs	r2, #0
    ca48:	2100      	movs	r1, #0
    ca4a:	2000      	movs	r0, #0
    ca4c:	4c0b      	ldr	r4, [pc, #44]	; (ca7c <usbdc_set_interface+0x13c>)
    ca4e:	47a0      	blx	r4
			return true;
    ca50:	2301      	movs	r3, #1
    ca52:	e005      	b.n	ca60 <usbdc_set_interface+0x120>
		} else {
			return false;
    ca54:	2300      	movs	r3, #0
    ca56:	e003      	b.n	ca60 <usbdc_set_interface+0x120>
	while (NULL != func) {
    ca58:	697b      	ldr	r3, [r7, #20]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d1ca      	bne.n	c9f4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    ca5e:	2300      	movs	r3, #0
}
    ca60:	4618      	mov	r0, r3
    ca62:	371c      	adds	r7, #28
    ca64:	46bd      	mov	sp, r7
    ca66:	bd90      	pop	{r4, r7, pc}
    ca68:	20001084 	.word	0x20001084
    ca6c:	0000d1a5 	.word	0x0000d1a5
    ca70:	0000c351 	.word	0x0000c351
    ca74:	0000d0e5 	.word	0x0000d0e5
    ca78:	0000c32d 	.word	0x0000c32d
    ca7c:	0000ce55 	.word	0x0000ce55

0000ca80 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    ca80:	b590      	push	{r4, r7, lr}
    ca82:	b083      	sub	sp, #12
    ca84:	af00      	add	r7, sp, #0
    ca86:	4603      	mov	r3, r0
    ca88:	6039      	str	r1, [r7, #0]
    ca8a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ca8c:	683b      	ldr	r3, [r7, #0]
    ca8e:	785b      	ldrb	r3, [r3, #1]
    ca90:	3b01      	subs	r3, #1
    ca92:	2b0a      	cmp	r3, #10
    ca94:	d85b      	bhi.n	cb4e <usbdc_set_req+0xce>
    ca96:	a201      	add	r2, pc, #4	; (adr r2, ca9c <usbdc_set_req+0x1c>)
    ca98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ca9c:	0000cb1b 	.word	0x0000cb1b
    caa0:	0000cb4f 	.word	0x0000cb4f
    caa4:	0000cb29 	.word	0x0000cb29
    caa8:	0000cb4f 	.word	0x0000cb4f
    caac:	0000cac9 	.word	0x0000cac9
    cab0:	0000cb4f 	.word	0x0000cb4f
    cab4:	0000cb4f 	.word	0x0000cb4f
    cab8:	0000cb4f 	.word	0x0000cb4f
    cabc:	0000cae3 	.word	0x0000cae3
    cac0:	0000cb4f 	.word	0x0000cb4f
    cac4:	0000cb37 	.word	0x0000cb37
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cac8:	79f8      	ldrb	r0, [r7, #7]
    caca:	2301      	movs	r3, #1
    cacc:	2200      	movs	r2, #0
    cace:	2100      	movs	r1, #0
    cad0:	4c21      	ldr	r4, [pc, #132]	; (cb58 <usbdc_set_req+0xd8>)
    cad2:	47a0      	blx	r4
    cad4:	4603      	mov	r3, r0
    cad6:	2b00      	cmp	r3, #0
    cad8:	bf0c      	ite	eq
    cada:	2301      	moveq	r3, #1
    cadc:	2300      	movne	r3, #0
    cade:	b2db      	uxtb	r3, r3
    cae0:	e036      	b.n	cb50 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cae2:	683b      	ldr	r3, [r7, #0]
    cae4:	885b      	ldrh	r3, [r3, #2]
    cae6:	b29b      	uxth	r3, r3
    cae8:	b2db      	uxtb	r3, r3
    caea:	4618      	mov	r0, r3
    caec:	4b1b      	ldr	r3, [pc, #108]	; (cb5c <usbdc_set_req+0xdc>)
    caee:	4798      	blx	r3
    caf0:	4603      	mov	r3, r0
    caf2:	f083 0301 	eor.w	r3, r3, #1
    caf6:	b2db      	uxtb	r3, r3
    caf8:	2b00      	cmp	r3, #0
    cafa:	d001      	beq.n	cb00 <usbdc_set_req+0x80>
			return false;
    cafc:	2300      	movs	r3, #0
    cafe:	e027      	b.n	cb50 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cb00:	79f8      	ldrb	r0, [r7, #7]
    cb02:	2301      	movs	r3, #1
    cb04:	2200      	movs	r2, #0
    cb06:	2100      	movs	r1, #0
    cb08:	4c13      	ldr	r4, [pc, #76]	; (cb58 <usbdc_set_req+0xd8>)
    cb0a:	47a0      	blx	r4
    cb0c:	4603      	mov	r3, r0
    cb0e:	2b00      	cmp	r3, #0
    cb10:	bf0c      	ite	eq
    cb12:	2301      	moveq	r3, #1
    cb14:	2300      	movne	r3, #0
    cb16:	b2db      	uxtb	r3, r3
    cb18:	e01a      	b.n	cb50 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cb1a:	79fb      	ldrb	r3, [r7, #7]
    cb1c:	6839      	ldr	r1, [r7, #0]
    cb1e:	4618      	mov	r0, r3
    cb20:	4b0f      	ldr	r3, [pc, #60]	; (cb60 <usbdc_set_req+0xe0>)
    cb22:	4798      	blx	r3
    cb24:	4603      	mov	r3, r0
    cb26:	e013      	b.n	cb50 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cb28:	79fb      	ldrb	r3, [r7, #7]
    cb2a:	6839      	ldr	r1, [r7, #0]
    cb2c:	4618      	mov	r0, r3
    cb2e:	4b0d      	ldr	r3, [pc, #52]	; (cb64 <usbdc_set_req+0xe4>)
    cb30:	4798      	blx	r3
    cb32:	4603      	mov	r3, r0
    cb34:	e00c      	b.n	cb50 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cb36:	683b      	ldr	r3, [r7, #0]
    cb38:	885b      	ldrh	r3, [r3, #2]
    cb3a:	b29a      	uxth	r2, r3
    cb3c:	683b      	ldr	r3, [r7, #0]
    cb3e:	889b      	ldrh	r3, [r3, #4]
    cb40:	b29b      	uxth	r3, r3
    cb42:	4619      	mov	r1, r3
    cb44:	4610      	mov	r0, r2
    cb46:	4b08      	ldr	r3, [pc, #32]	; (cb68 <usbdc_set_req+0xe8>)
    cb48:	4798      	blx	r3
    cb4a:	4603      	mov	r3, r0
    cb4c:	e000      	b.n	cb50 <usbdc_set_req+0xd0>
	default:
		return false;
    cb4e:	2300      	movs	r3, #0
	}
}
    cb50:	4618      	mov	r0, r3
    cb52:	370c      	adds	r7, #12
    cb54:	46bd      	mov	sp, r7
    cb56:	bd90      	pop	{r4, r7, pc}
    cb58:	0000ce55 	.word	0x0000ce55
    cb5c:	0000c835 	.word	0x0000c835
    cb60:	0000c751 	.word	0x0000c751
    cb64:	0000c7a9 	.word	0x0000c7a9
    cb68:	0000c941 	.word	0x0000c941

0000cb6c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cb6c:	b580      	push	{r7, lr}
    cb6e:	b082      	sub	sp, #8
    cb70:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cb72:	4b0a      	ldr	r3, [pc, #40]	; (cb9c <usbdc_sof_notify+0x30>)
    cb74:	685b      	ldr	r3, [r3, #4]
    cb76:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cb78:	e009      	b.n	cb8e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cb7a:	687b      	ldr	r3, [r7, #4]
    cb7c:	685b      	ldr	r3, [r3, #4]
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d002      	beq.n	cb88 <usbdc_sof_notify+0x1c>
			sof->cb();
    cb82:	687b      	ldr	r3, [r7, #4]
    cb84:	685b      	ldr	r3, [r3, #4]
    cb86:	4798      	blx	r3
		}
		sof = sof->next;
    cb88:	687b      	ldr	r3, [r7, #4]
    cb8a:	681b      	ldr	r3, [r3, #0]
    cb8c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    cb8e:	687b      	ldr	r3, [r7, #4]
    cb90:	2b00      	cmp	r3, #0
    cb92:	d1f2      	bne.n	cb7a <usbdc_sof_notify+0xe>
	}
}
    cb94:	bf00      	nop
    cb96:	3708      	adds	r7, #8
    cb98:	46bd      	mov	sp, r7
    cb9a:	bd80      	pop	{r7, pc}
    cb9c:	20001084 	.word	0x20001084

0000cba0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    cba0:	b580      	push	{r7, lr}
    cba2:	b084      	sub	sp, #16
    cba4:	af00      	add	r7, sp, #0
    cba6:	4603      	mov	r3, r0
    cba8:	6039      	str	r1, [r7, #0]
    cbaa:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cbac:	4b0b      	ldr	r3, [pc, #44]	; (cbdc <usbdc_change_notify+0x3c>)
    cbae:	68db      	ldr	r3, [r3, #12]
    cbb0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    cbb2:	e00c      	b.n	cbce <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    cbb4:	68fb      	ldr	r3, [r7, #12]
    cbb6:	685b      	ldr	r3, [r3, #4]
    cbb8:	2b00      	cmp	r3, #0
    cbba:	d005      	beq.n	cbc8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cbbc:	68fb      	ldr	r3, [r7, #12]
    cbbe:	685b      	ldr	r3, [r3, #4]
    cbc0:	79fa      	ldrb	r2, [r7, #7]
    cbc2:	6839      	ldr	r1, [r7, #0]
    cbc4:	4610      	mov	r0, r2
    cbc6:	4798      	blx	r3
		}
		cg = cg->next;
    cbc8:	68fb      	ldr	r3, [r7, #12]
    cbca:	681b      	ldr	r3, [r3, #0]
    cbcc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    cbce:	68fb      	ldr	r3, [r7, #12]
    cbd0:	2b00      	cmp	r3, #0
    cbd2:	d1ef      	bne.n	cbb4 <usbdc_change_notify+0x14>
	}
}
    cbd4:	bf00      	nop
    cbd6:	3710      	adds	r7, #16
    cbd8:	46bd      	mov	sp, r7
    cbda:	bd80      	pop	{r7, pc}
    cbdc:	20001084 	.word	0x20001084

0000cbe0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cbe0:	b580      	push	{r7, lr}
    cbe2:	b084      	sub	sp, #16
    cbe4:	af00      	add	r7, sp, #0
    cbe6:	4603      	mov	r3, r0
    cbe8:	6039      	str	r1, [r7, #0]
    cbea:	71fb      	strb	r3, [r7, #7]
    cbec:	4613      	mov	r3, r2
    cbee:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cbf0:	4b12      	ldr	r3, [pc, #72]	; (cc3c <usbdc_request_handler+0x5c>)
    cbf2:	689b      	ldr	r3, [r3, #8]
    cbf4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    cbf6:	e019      	b.n	cc2c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    cbf8:	68fb      	ldr	r3, [r7, #12]
    cbfa:	685b      	ldr	r3, [r3, #4]
    cbfc:	2b00      	cmp	r3, #0
    cbfe:	d012      	beq.n	cc26 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cc00:	68fb      	ldr	r3, [r7, #12]
    cc02:	685b      	ldr	r3, [r3, #4]
    cc04:	79ba      	ldrb	r2, [r7, #6]
    cc06:	79f8      	ldrb	r0, [r7, #7]
    cc08:	6839      	ldr	r1, [r7, #0]
    cc0a:	4798      	blx	r3
    cc0c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cc0e:	68bb      	ldr	r3, [r7, #8]
    cc10:	2b00      	cmp	r3, #0
    cc12:	d101      	bne.n	cc18 <usbdc_request_handler+0x38>
				return true;
    cc14:	2301      	movs	r3, #1
    cc16:	e00d      	b.n	cc34 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cc18:	68bb      	ldr	r3, [r7, #8]
    cc1a:	f113 0f0a 	cmn.w	r3, #10
    cc1e:	d002      	beq.n	cc26 <usbdc_request_handler+0x46>
				return -1;
    cc20:	f04f 33ff 	mov.w	r3, #4294967295
    cc24:	e006      	b.n	cc34 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cc26:	68fb      	ldr	r3, [r7, #12]
    cc28:	681b      	ldr	r3, [r3, #0]
    cc2a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    cc2c:	68fb      	ldr	r3, [r7, #12]
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d1e2      	bne.n	cbf8 <usbdc_request_handler+0x18>
	}
	return false;
    cc32:	2300      	movs	r3, #0
}
    cc34:	4618      	mov	r0, r3
    cc36:	3710      	adds	r7, #16
    cc38:	46bd      	mov	sp, r7
    cc3a:	bd80      	pop	{r7, pc}
    cc3c:	20001084 	.word	0x20001084

0000cc40 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cc40:	b580      	push	{r7, lr}
    cc42:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cc44:	4b01      	ldr	r3, [pc, #4]	; (cc4c <usbd_sof_cb+0xc>)
    cc46:	4798      	blx	r3
}
    cc48:	bf00      	nop
    cc4a:	bd80      	pop	{r7, pc}
    cc4c:	0000cb6d 	.word	0x0000cb6d

0000cc50 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cc50:	b580      	push	{r7, lr}
    cc52:	b082      	sub	sp, #8
    cc54:	af00      	add	r7, sp, #0
    cc56:	4603      	mov	r3, r0
    cc58:	6039      	str	r1, [r7, #0]
    cc5a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cc5c:	79fb      	ldrb	r3, [r7, #7]
    cc5e:	2200      	movs	r2, #0
    cc60:	6839      	ldr	r1, [r7, #0]
    cc62:	4618      	mov	r0, r3
    cc64:	4b14      	ldr	r3, [pc, #80]	; (ccb8 <usbdc_cb_ctl_req+0x68>)
    cc66:	4798      	blx	r3
    cc68:	4603      	mov	r3, r0
    cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    cc6e:	d00b      	beq.n	cc88 <usbdc_cb_ctl_req+0x38>
    cc70:	2b01      	cmp	r3, #1
    cc72:	d007      	beq.n	cc84 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cc74:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cc76:	683b      	ldr	r3, [r7, #0]
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cc7e:	2b00      	cmp	r3, #0
    cc80:	d007      	beq.n	cc92 <usbdc_cb_ctl_req+0x42>
    cc82:	e003      	b.n	cc8c <usbdc_cb_ctl_req+0x3c>
		return true;
    cc84:	2301      	movs	r3, #1
    cc86:	e013      	b.n	ccb0 <usbdc_cb_ctl_req+0x60>
		return false;
    cc88:	2300      	movs	r3, #0
    cc8a:	e011      	b.n	ccb0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cc8c:	2b80      	cmp	r3, #128	; 0x80
    cc8e:	d007      	beq.n	cca0 <usbdc_cb_ctl_req+0x50>
    cc90:	e00d      	b.n	ccae <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cc92:	79fb      	ldrb	r3, [r7, #7]
    cc94:	6839      	ldr	r1, [r7, #0]
    cc96:	4618      	mov	r0, r3
    cc98:	4b08      	ldr	r3, [pc, #32]	; (ccbc <usbdc_cb_ctl_req+0x6c>)
    cc9a:	4798      	blx	r3
    cc9c:	4603      	mov	r3, r0
    cc9e:	e007      	b.n	ccb0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cca0:	79fb      	ldrb	r3, [r7, #7]
    cca2:	6839      	ldr	r1, [r7, #0]
    cca4:	4618      	mov	r0, r3
    cca6:	4b06      	ldr	r3, [pc, #24]	; (ccc0 <usbdc_cb_ctl_req+0x70>)
    cca8:	4798      	blx	r3
    ccaa:	4603      	mov	r3, r0
    ccac:	e000      	b.n	ccb0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    ccae:	2300      	movs	r3, #0
	}
}
    ccb0:	4618      	mov	r0, r3
    ccb2:	3708      	adds	r7, #8
    ccb4:	46bd      	mov	sp, r7
    ccb6:	bd80      	pop	{r7, pc}
    ccb8:	0000cbe1 	.word	0x0000cbe1
    ccbc:	0000ca81 	.word	0x0000ca81
    ccc0:	0000c6a9 	.word	0x0000c6a9

0000ccc4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    ccc4:	b580      	push	{r7, lr}
    ccc6:	b082      	sub	sp, #8
    ccc8:	af00      	add	r7, sp, #0
    ccca:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cccc:	687b      	ldr	r3, [r7, #4]
    ccce:	781b      	ldrb	r3, [r3, #0]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	d135      	bne.n	cd40 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    ccd4:	687b      	ldr	r3, [r7, #4]
    ccd6:	785b      	ldrb	r3, [r3, #1]
    ccd8:	2b05      	cmp	r3, #5
    ccda:	d019      	beq.n	cd10 <usbdc_ctrl_status_end+0x4c>
    ccdc:	2b09      	cmp	r3, #9
    ccde:	d000      	beq.n	cce2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cce0:	e02f      	b.n	cd42 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cce2:	687b      	ldr	r3, [r7, #4]
    cce4:	885b      	ldrh	r3, [r3, #2]
    cce6:	b29b      	uxth	r3, r3
    cce8:	b2da      	uxtb	r2, r3
    ccea:	4b17      	ldr	r3, [pc, #92]	; (cd48 <usbdc_ctrl_status_end+0x84>)
    ccec:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ccee:	687b      	ldr	r3, [r7, #4]
    ccf0:	885b      	ldrh	r3, [r3, #2]
    ccf2:	b29b      	uxth	r3, r3
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	d001      	beq.n	ccfc <usbdc_ctrl_status_end+0x38>
    ccf8:	2204      	movs	r2, #4
    ccfa:	e000      	b.n	ccfe <usbdc_ctrl_status_end+0x3a>
    ccfc:	2203      	movs	r2, #3
    ccfe:	4b12      	ldr	r3, [pc, #72]	; (cd48 <usbdc_ctrl_status_end+0x84>)
    cd00:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cd02:	4b11      	ldr	r3, [pc, #68]	; (cd48 <usbdc_ctrl_status_end+0x84>)
    cd04:	7e9b      	ldrb	r3, [r3, #26]
    cd06:	4619      	mov	r1, r3
    cd08:	2001      	movs	r0, #1
    cd0a:	4b10      	ldr	r3, [pc, #64]	; (cd4c <usbdc_ctrl_status_end+0x88>)
    cd0c:	4798      	blx	r3
		break;
    cd0e:	e018      	b.n	cd42 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cd10:	687b      	ldr	r3, [r7, #4]
    cd12:	885b      	ldrh	r3, [r3, #2]
    cd14:	b29b      	uxth	r3, r3
    cd16:	b2db      	uxtb	r3, r3
    cd18:	4618      	mov	r0, r3
    cd1a:	4b0d      	ldr	r3, [pc, #52]	; (cd50 <usbdc_ctrl_status_end+0x8c>)
    cd1c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cd1e:	687b      	ldr	r3, [r7, #4]
    cd20:	885b      	ldrh	r3, [r3, #2]
    cd22:	b29b      	uxth	r3, r3
    cd24:	2b00      	cmp	r3, #0
    cd26:	d001      	beq.n	cd2c <usbdc_ctrl_status_end+0x68>
    cd28:	2203      	movs	r2, #3
    cd2a:	e000      	b.n	cd2e <usbdc_ctrl_status_end+0x6a>
    cd2c:	2202      	movs	r2, #2
    cd2e:	4b06      	ldr	r3, [pc, #24]	; (cd48 <usbdc_ctrl_status_end+0x84>)
    cd30:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cd32:	4b05      	ldr	r3, [pc, #20]	; (cd48 <usbdc_ctrl_status_end+0x84>)
    cd34:	7e9b      	ldrb	r3, [r3, #26]
    cd36:	4619      	mov	r1, r3
    cd38:	2001      	movs	r0, #1
    cd3a:	4b04      	ldr	r3, [pc, #16]	; (cd4c <usbdc_ctrl_status_end+0x88>)
    cd3c:	4798      	blx	r3
		break;
    cd3e:	e000      	b.n	cd42 <usbdc_ctrl_status_end+0x7e>
		return;
    cd40:	bf00      	nop
	}
}
    cd42:	3708      	adds	r7, #8
    cd44:	46bd      	mov	sp, r7
    cd46:	bd80      	pop	{r7, pc}
    cd48:	20001084 	.word	0x20001084
    cd4c:	0000cba1 	.word	0x0000cba1
    cd50:	0000c921 	.word	0x0000c921

0000cd54 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cd54:	b580      	push	{r7, lr}
    cd56:	b082      	sub	sp, #8
    cd58:	af00      	add	r7, sp, #0
    cd5a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cd5c:	2201      	movs	r2, #1
    cd5e:	6879      	ldr	r1, [r7, #4]
    cd60:	2000      	movs	r0, #0
    cd62:	4b03      	ldr	r3, [pc, #12]	; (cd70 <usbdc_ctrl_data_end+0x1c>)
    cd64:	4798      	blx	r3
	return false;
    cd66:	2300      	movs	r3, #0
}
    cd68:	4618      	mov	r0, r3
    cd6a:	3708      	adds	r7, #8
    cd6c:	46bd      	mov	sp, r7
    cd6e:	bd80      	pop	{r7, pc}
    cd70:	0000cbe1 	.word	0x0000cbe1

0000cd74 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cd74:	b580      	push	{r7, lr}
    cd76:	b082      	sub	sp, #8
    cd78:	af00      	add	r7, sp, #0
    cd7a:	4603      	mov	r3, r0
    cd7c:	603a      	str	r2, [r7, #0]
    cd7e:	71fb      	strb	r3, [r7, #7]
    cd80:	460b      	mov	r3, r1
    cd82:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cd84:	79bb      	ldrb	r3, [r7, #6]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d002      	beq.n	cd90 <usbdc_cb_ctl_done+0x1c>
    cd8a:	2b01      	cmp	r3, #1
    cd8c:	d004      	beq.n	cd98 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cd8e:	e008      	b.n	cda2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cd90:	6838      	ldr	r0, [r7, #0]
    cd92:	4b06      	ldr	r3, [pc, #24]	; (cdac <usbdc_cb_ctl_done+0x38>)
    cd94:	4798      	blx	r3
		break;
    cd96:	e004      	b.n	cda2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cd98:	6838      	ldr	r0, [r7, #0]
    cd9a:	4b05      	ldr	r3, [pc, #20]	; (cdb0 <usbdc_cb_ctl_done+0x3c>)
    cd9c:	4798      	blx	r3
    cd9e:	4603      	mov	r3, r0
    cda0:	e000      	b.n	cda4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cda2:	2300      	movs	r3, #0
}
    cda4:	4618      	mov	r0, r3
    cda6:	3708      	adds	r7, #8
    cda8:	46bd      	mov	sp, r7
    cdaa:	bd80      	pop	{r7, pc}
    cdac:	0000ccc5 	.word	0x0000ccc5
    cdb0:	0000cd55 	.word	0x0000cd55

0000cdb4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cdb4:	b580      	push	{r7, lr}
    cdb6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cdb8:	4b10      	ldr	r3, [pc, #64]	; (cdfc <usbdc_reset+0x48>)
    cdba:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cdbc:	4b10      	ldr	r3, [pc, #64]	; (ce00 <usbdc_reset+0x4c>)
    cdbe:	2202      	movs	r2, #2
    cdc0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cdc2:	4b0f      	ldr	r3, [pc, #60]	; (ce00 <usbdc_reset+0x4c>)
    cdc4:	2200      	movs	r2, #0
    cdc6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cdc8:	4b0d      	ldr	r3, [pc, #52]	; (ce00 <usbdc_reset+0x4c>)
    cdca:	2200      	movs	r2, #0
    cdcc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cdce:	2000      	movs	r0, #0
    cdd0:	4b0c      	ldr	r3, [pc, #48]	; (ce04 <usbdc_reset+0x50>)
    cdd2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cdd4:	4b0a      	ldr	r3, [pc, #40]	; (ce00 <usbdc_reset+0x4c>)
    cdd6:	7f1b      	ldrb	r3, [r3, #28]
    cdd8:	4618      	mov	r0, r3
    cdda:	4b0b      	ldr	r3, [pc, #44]	; (ce08 <usbdc_reset+0x54>)
    cddc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cdde:	4a0b      	ldr	r2, [pc, #44]	; (ce0c <usbdc_reset+0x58>)
    cde0:	2100      	movs	r1, #0
    cde2:	2000      	movs	r0, #0
    cde4:	4b0a      	ldr	r3, [pc, #40]	; (ce10 <usbdc_reset+0x5c>)
    cde6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cde8:	4a0a      	ldr	r2, [pc, #40]	; (ce14 <usbdc_reset+0x60>)
    cdea:	2102      	movs	r1, #2
    cdec:	2000      	movs	r0, #0
    cdee:	4b08      	ldr	r3, [pc, #32]	; (ce10 <usbdc_reset+0x5c>)
    cdf0:	4798      	blx	r3
	usb_d_ep_enable(0);
    cdf2:	2000      	movs	r0, #0
    cdf4:	4b08      	ldr	r3, [pc, #32]	; (ce18 <usbdc_reset+0x64>)
    cdf6:	4798      	blx	r3
}
    cdf8:	bf00      	nop
    cdfa:	bd80      	pop	{r7, pc}
    cdfc:	0000c801 	.word	0x0000c801
    ce00:	20001084 	.word	0x20001084
    ce04:	00003455 	.word	0x00003455
    ce08:	00003391 	.word	0x00003391
    ce0c:	0000cc51 	.word	0x0000cc51
    ce10:	000037a9 	.word	0x000037a9
    ce14:	0000cd75 	.word	0x0000cd75
    ce18:	000034a5 	.word	0x000034a5

0000ce1c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    ce1c:	b580      	push	{r7, lr}
    ce1e:	b082      	sub	sp, #8
    ce20:	af00      	add	r7, sp, #0
    ce22:	4603      	mov	r3, r0
    ce24:	6039      	str	r1, [r7, #0]
    ce26:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    ce28:	79fb      	ldrb	r3, [r7, #7]
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	d002      	beq.n	ce34 <usbd_event_cb+0x18>
    ce2e:	2b01      	cmp	r3, #1
    ce30:	d005      	beq.n	ce3e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    ce32:	e007      	b.n	ce44 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    ce34:	6839      	ldr	r1, [r7, #0]
    ce36:	2000      	movs	r0, #0
    ce38:	4b04      	ldr	r3, [pc, #16]	; (ce4c <usbd_event_cb+0x30>)
    ce3a:	4798      	blx	r3
		break;
    ce3c:	e002      	b.n	ce44 <usbd_event_cb+0x28>
		usbdc_reset();
    ce3e:	4b04      	ldr	r3, [pc, #16]	; (ce50 <usbd_event_cb+0x34>)
    ce40:	4798      	blx	r3
		break;
    ce42:	bf00      	nop
	}
}
    ce44:	bf00      	nop
    ce46:	3708      	adds	r7, #8
    ce48:	46bd      	mov	sp, r7
    ce4a:	bd80      	pop	{r7, pc}
    ce4c:	0000cba1 	.word	0x0000cba1
    ce50:	0000cdb5 	.word	0x0000cdb5

0000ce54 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ce54:	b580      	push	{r7, lr}
    ce56:	b088      	sub	sp, #32
    ce58:	af00      	add	r7, sp, #0
    ce5a:	60b9      	str	r1, [r7, #8]
    ce5c:	607a      	str	r2, [r7, #4]
    ce5e:	461a      	mov	r2, r3
    ce60:	4603      	mov	r3, r0
    ce62:	73fb      	strb	r3, [r7, #15]
    ce64:	4613      	mov	r3, r2
    ce66:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ce68:	68bb      	ldr	r3, [r7, #8]
    ce6a:	617b      	str	r3, [r7, #20]
    ce6c:	687b      	ldr	r3, [r7, #4]
    ce6e:	61bb      	str	r3, [r7, #24]
    ce70:	7bfb      	ldrb	r3, [r7, #15]
    ce72:	773b      	strb	r3, [r7, #28]
    ce74:	7bbb      	ldrb	r3, [r7, #14]
    ce76:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ce78:	f107 0314 	add.w	r3, r7, #20
    ce7c:	4618      	mov	r0, r3
    ce7e:	4b03      	ldr	r3, [pc, #12]	; (ce8c <usbdc_xfer+0x38>)
    ce80:	4798      	blx	r3
    ce82:	4603      	mov	r3, r0
}
    ce84:	4618      	mov	r0, r3
    ce86:	3720      	adds	r7, #32
    ce88:	46bd      	mov	sp, r7
    ce8a:	bd80      	pop	{r7, pc}
    ce8c:	00003515 	.word	0x00003515

0000ce90 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ce90:	b580      	push	{r7, lr}
    ce92:	b082      	sub	sp, #8
    ce94:	af00      	add	r7, sp, #0
    ce96:	4603      	mov	r3, r0
    ce98:	6039      	str	r1, [r7, #0]
    ce9a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    ce9c:	79fb      	ldrb	r3, [r7, #7]
    ce9e:	2b01      	cmp	r3, #1
    cea0:	d009      	beq.n	ceb6 <usbdc_register_handler+0x26>
    cea2:	2b02      	cmp	r3, #2
    cea4:	d00c      	beq.n	cec0 <usbdc_register_handler+0x30>
    cea6:	2b00      	cmp	r3, #0
    cea8:	d000      	beq.n	ceac <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    ceaa:	e00e      	b.n	ceca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    ceac:	6839      	ldr	r1, [r7, #0]
    ceae:	4809      	ldr	r0, [pc, #36]	; (ced4 <usbdc_register_handler+0x44>)
    ceb0:	4b09      	ldr	r3, [pc, #36]	; (ced8 <usbdc_register_handler+0x48>)
    ceb2:	4798      	blx	r3
		break;
    ceb4:	e009      	b.n	ceca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    ceb6:	6839      	ldr	r1, [r7, #0]
    ceb8:	4808      	ldr	r0, [pc, #32]	; (cedc <usbdc_register_handler+0x4c>)
    ceba:	4b07      	ldr	r3, [pc, #28]	; (ced8 <usbdc_register_handler+0x48>)
    cebc:	4798      	blx	r3
		break;
    cebe:	e004      	b.n	ceca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cec0:	6839      	ldr	r1, [r7, #0]
    cec2:	4807      	ldr	r0, [pc, #28]	; (cee0 <usbdc_register_handler+0x50>)
    cec4:	4b04      	ldr	r3, [pc, #16]	; (ced8 <usbdc_register_handler+0x48>)
    cec6:	4798      	blx	r3
		break;
    cec8:	bf00      	nop
	}
}
    ceca:	bf00      	nop
    cecc:	3708      	adds	r7, #8
    cece:	46bd      	mov	sp, r7
    ced0:	bd80      	pop	{r7, pc}
    ced2:	bf00      	nop
    ced4:	20001088 	.word	0x20001088
    ced8:	00003901 	.word	0x00003901
    cedc:	2000108c 	.word	0x2000108c
    cee0:	20001090 	.word	0x20001090

0000cee4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cee4:	b580      	push	{r7, lr}
    cee6:	b084      	sub	sp, #16
    cee8:	af00      	add	r7, sp, #0
    ceea:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    ceec:	687b      	ldr	r3, [r7, #4]
    ceee:	2b00      	cmp	r3, #0
    cef0:	bf14      	ite	ne
    cef2:	2301      	movne	r3, #1
    cef4:	2300      	moveq	r3, #0
    cef6:	b2db      	uxtb	r3, r3
    cef8:	f240 3255 	movw	r2, #853	; 0x355
    cefc:	4910      	ldr	r1, [pc, #64]	; (cf40 <usbdc_init+0x5c>)
    cefe:	4618      	mov	r0, r3
    cf00:	4b10      	ldr	r3, [pc, #64]	; (cf44 <usbdc_init+0x60>)
    cf02:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cf04:	4b10      	ldr	r3, [pc, #64]	; (cf48 <usbdc_init+0x64>)
    cf06:	4798      	blx	r3
    cf08:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cf0a:	68fb      	ldr	r3, [r7, #12]
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	da01      	bge.n	cf14 <usbdc_init+0x30>
		return rc;
    cf10:	68fb      	ldr	r3, [r7, #12]
    cf12:	e010      	b.n	cf36 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cf14:	2220      	movs	r2, #32
    cf16:	2100      	movs	r1, #0
    cf18:	480c      	ldr	r0, [pc, #48]	; (cf4c <usbdc_init+0x68>)
    cf1a:	4b0d      	ldr	r3, [pc, #52]	; (cf50 <usbdc_init+0x6c>)
    cf1c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cf1e:	4a0b      	ldr	r2, [pc, #44]	; (cf4c <usbdc_init+0x68>)
    cf20:	687b      	ldr	r3, [r7, #4]
    cf22:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cf24:	490b      	ldr	r1, [pc, #44]	; (cf54 <usbdc_init+0x70>)
    cf26:	2000      	movs	r0, #0
    cf28:	4b0b      	ldr	r3, [pc, #44]	; (cf58 <usbdc_init+0x74>)
    cf2a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cf2c:	490b      	ldr	r1, [pc, #44]	; (cf5c <usbdc_init+0x78>)
    cf2e:	2001      	movs	r0, #1
    cf30:	4b09      	ldr	r3, [pc, #36]	; (cf58 <usbdc_init+0x74>)
    cf32:	4798      	blx	r3

	return 0;
    cf34:	2300      	movs	r3, #0
}
    cf36:	4618      	mov	r0, r3
    cf38:	3710      	adds	r7, #16
    cf3a:	46bd      	mov	sp, r7
    cf3c:	bd80      	pop	{r7, pc}
    cf3e:	bf00      	nop
    cf40:	00010adc 	.word	0x00010adc
    cf44:	00003825 	.word	0x00003825
    cf48:	0000327d 	.word	0x0000327d
    cf4c:	20001084 	.word	0x20001084
    cf50:	00010309 	.word	0x00010309
    cf54:	0000cc41 	.word	0x0000cc41
    cf58:	00003329 	.word	0x00003329
    cf5c:	0000ce1d 	.word	0x0000ce1d

0000cf60 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cf60:	b580      	push	{r7, lr}
    cf62:	b082      	sub	sp, #8
    cf64:	af00      	add	r7, sp, #0
    cf66:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cf68:	6879      	ldr	r1, [r7, #4]
    cf6a:	4803      	ldr	r0, [pc, #12]	; (cf78 <usbdc_register_function+0x18>)
    cf6c:	4b03      	ldr	r3, [pc, #12]	; (cf7c <usbdc_register_function+0x1c>)
    cf6e:	4798      	blx	r3
}
    cf70:	bf00      	nop
    cf72:	3708      	adds	r7, #8
    cf74:	46bd      	mov	sp, r7
    cf76:	bd80      	pop	{r7, pc}
    cf78:	20001094 	.word	0x20001094
    cf7c:	00003901 	.word	0x00003901

0000cf80 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cf80:	b580      	push	{r7, lr}
    cf82:	b082      	sub	sp, #8
    cf84:	af00      	add	r7, sp, #0
    cf86:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cf88:	4b0f      	ldr	r3, [pc, #60]	; (cfc8 <usbdc_start+0x48>)
    cf8a:	7e9b      	ldrb	r3, [r3, #26]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d002      	beq.n	cf96 <usbdc_start+0x16>
		return ERR_BUSY;
    cf90:	f06f 0303 	mvn.w	r3, #3
    cf94:	e013      	b.n	cfbe <usbdc_start+0x3e>
	}

	if (desces) {
    cf96:	687b      	ldr	r3, [r7, #4]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d00e      	beq.n	cfba <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    cf9c:	4a0a      	ldr	r2, [pc, #40]	; (cfc8 <usbdc_start+0x48>)
    cf9e:	687b      	ldr	r3, [r7, #4]
    cfa0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cfa2:	687b      	ldr	r3, [r7, #4]
    cfa4:	681b      	ldr	r3, [r3, #0]
    cfa6:	79da      	ldrb	r2, [r3, #7]
    cfa8:	4b07      	ldr	r3, [pc, #28]	; (cfc8 <usbdc_start+0x48>)
    cfaa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cfac:	4b06      	ldr	r3, [pc, #24]	; (cfc8 <usbdc_start+0x48>)
    cfae:	2201      	movs	r2, #1
    cfb0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cfb2:	4b06      	ldr	r3, [pc, #24]	; (cfcc <usbdc_start+0x4c>)
    cfb4:	4798      	blx	r3
	return ERR_NONE;
    cfb6:	2300      	movs	r3, #0
    cfb8:	e001      	b.n	cfbe <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    cfba:	f06f 0308 	mvn.w	r3, #8
}
    cfbe:	4618      	mov	r0, r3
    cfc0:	3708      	adds	r7, #8
    cfc2:	46bd      	mov	sp, r7
    cfc4:	bd80      	pop	{r7, pc}
    cfc6:	bf00      	nop
    cfc8:	20001084 	.word	0x20001084
    cfcc:	0000334d 	.word	0x0000334d

0000cfd0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    cfd0:	b580      	push	{r7, lr}
    cfd2:	af00      	add	r7, sp, #0
	usb_d_attach();
    cfd4:	4b01      	ldr	r3, [pc, #4]	; (cfdc <usbdc_attach+0xc>)
    cfd6:	4798      	blx	r3
}
    cfd8:	bf00      	nop
    cfda:	bd80      	pop	{r7, pc}
    cfdc:	00003361 	.word	0x00003361

0000cfe0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    cfe0:	b480      	push	{r7}
    cfe2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    cfe4:	4b03      	ldr	r3, [pc, #12]	; (cff4 <usbdc_get_ctrl_buffer+0x14>)
    cfe6:	695b      	ldr	r3, [r3, #20]
}
    cfe8:	4618      	mov	r0, r3
    cfea:	46bd      	mov	sp, r7
    cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
    cff0:	4770      	bx	lr
    cff2:	bf00      	nop
    cff4:	20001084 	.word	0x20001084

0000cff8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cff8:	b480      	push	{r7}
    cffa:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cffc:	4b07      	ldr	r3, [pc, #28]	; (d01c <usbdc_get_state+0x24>)
    cffe:	7e9b      	ldrb	r3, [r3, #26]
    d000:	f003 0310 	and.w	r3, r3, #16
    d004:	2b00      	cmp	r3, #0
    d006:	d001      	beq.n	d00c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d008:	2310      	movs	r3, #16
    d00a:	e001      	b.n	d010 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d00c:	4b03      	ldr	r3, [pc, #12]	; (d01c <usbdc_get_state+0x24>)
    d00e:	7e9b      	ldrb	r3, [r3, #26]
}
    d010:	4618      	mov	r0, r3
    d012:	46bd      	mov	sp, r7
    d014:	f85d 7b04 	ldr.w	r7, [sp], #4
    d018:	4770      	bx	lr
    d01a:	bf00      	nop
    d01c:	20001084 	.word	0x20001084

0000d020 <usb_get_u16>:
{
    d020:	b480      	push	{r7}
    d022:	b083      	sub	sp, #12
    d024:	af00      	add	r7, sp, #0
    d026:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d028:	687b      	ldr	r3, [r7, #4]
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	b29a      	uxth	r2, r3
    d02e:	687b      	ldr	r3, [r7, #4]
    d030:	3301      	adds	r3, #1
    d032:	781b      	ldrb	r3, [r3, #0]
    d034:	b29b      	uxth	r3, r3
    d036:	021b      	lsls	r3, r3, #8
    d038:	b29b      	uxth	r3, r3
    d03a:	4413      	add	r3, r2
    d03c:	b29b      	uxth	r3, r3
}
    d03e:	4618      	mov	r0, r3
    d040:	370c      	adds	r7, #12
    d042:	46bd      	mov	sp, r7
    d044:	f85d 7b04 	ldr.w	r7, [sp], #4
    d048:	4770      	bx	lr

0000d04a <usb_desc_len>:
{
    d04a:	b480      	push	{r7}
    d04c:	b083      	sub	sp, #12
    d04e:	af00      	add	r7, sp, #0
    d050:	6078      	str	r0, [r7, #4]
	return desc[0];
    d052:	687b      	ldr	r3, [r7, #4]
    d054:	781b      	ldrb	r3, [r3, #0]
}
    d056:	4618      	mov	r0, r3
    d058:	370c      	adds	r7, #12
    d05a:	46bd      	mov	sp, r7
    d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d060:	4770      	bx	lr

0000d062 <usb_desc_type>:
{
    d062:	b480      	push	{r7}
    d064:	b083      	sub	sp, #12
    d066:	af00      	add	r7, sp, #0
    d068:	6078      	str	r0, [r7, #4]
	return desc[1];
    d06a:	687b      	ldr	r3, [r7, #4]
    d06c:	3301      	adds	r3, #1
    d06e:	781b      	ldrb	r3, [r3, #0]
}
    d070:	4618      	mov	r0, r3
    d072:	370c      	adds	r7, #12
    d074:	46bd      	mov	sp, r7
    d076:	f85d 7b04 	ldr.w	r7, [sp], #4
    d07a:	4770      	bx	lr

0000d07c <usb_desc_next>:
{
    d07c:	b580      	push	{r7, lr}
    d07e:	b082      	sub	sp, #8
    d080:	af00      	add	r7, sp, #0
    d082:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d084:	6878      	ldr	r0, [r7, #4]
    d086:	4b05      	ldr	r3, [pc, #20]	; (d09c <usb_desc_next+0x20>)
    d088:	4798      	blx	r3
    d08a:	4603      	mov	r3, r0
    d08c:	461a      	mov	r2, r3
    d08e:	687b      	ldr	r3, [r7, #4]
    d090:	4413      	add	r3, r2
}
    d092:	4618      	mov	r0, r3
    d094:	3708      	adds	r7, #8
    d096:	46bd      	mov	sp, r7
    d098:	bd80      	pop	{r7, pc}
    d09a:	bf00      	nop
    d09c:	0000d04b 	.word	0x0000d04b

0000d0a0 <usb_cfg_desc_total_len>:
{
    d0a0:	b580      	push	{r7, lr}
    d0a2:	b082      	sub	sp, #8
    d0a4:	af00      	add	r7, sp, #0
    d0a6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d0a8:	687b      	ldr	r3, [r7, #4]
    d0aa:	3302      	adds	r3, #2
    d0ac:	4618      	mov	r0, r3
    d0ae:	4b03      	ldr	r3, [pc, #12]	; (d0bc <usb_cfg_desc_total_len+0x1c>)
    d0b0:	4798      	blx	r3
    d0b2:	4603      	mov	r3, r0
}
    d0b4:	4618      	mov	r0, r3
    d0b6:	3708      	adds	r7, #8
    d0b8:	46bd      	mov	sp, r7
    d0ba:	bd80      	pop	{r7, pc}
    d0bc:	0000d021 	.word	0x0000d021

0000d0c0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d0c0:	b580      	push	{r7, lr}
    d0c2:	b082      	sub	sp, #8
    d0c4:	af00      	add	r7, sp, #0
    d0c6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d0c8:	6878      	ldr	r0, [r7, #4]
    d0ca:	4b05      	ldr	r3, [pc, #20]	; (d0e0 <usb_cfg_desc_next+0x20>)
    d0cc:	4798      	blx	r3
    d0ce:	4603      	mov	r3, r0
    d0d0:	461a      	mov	r2, r3
    d0d2:	687b      	ldr	r3, [r7, #4]
    d0d4:	4413      	add	r3, r2
}
    d0d6:	4618      	mov	r0, r3
    d0d8:	3708      	adds	r7, #8
    d0da:	46bd      	mov	sp, r7
    d0dc:	bd80      	pop	{r7, pc}
    d0de:	bf00      	nop
    d0e0:	0000d0a1 	.word	0x0000d0a1

0000d0e4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d0e4:	b580      	push	{r7, lr}
    d0e6:	b084      	sub	sp, #16
    d0e8:	af00      	add	r7, sp, #0
    d0ea:	60f8      	str	r0, [r7, #12]
    d0ec:	60b9      	str	r1, [r7, #8]
    d0ee:	4613      	mov	r3, r2
    d0f0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d0f2:	e015      	b.n	d120 <usb_find_desc+0x3c>
		_desc_len_check();
    d0f4:	68f8      	ldr	r0, [r7, #12]
    d0f6:	4b0f      	ldr	r3, [pc, #60]	; (d134 <usb_find_desc+0x50>)
    d0f8:	4798      	blx	r3
    d0fa:	4603      	mov	r3, r0
    d0fc:	2b01      	cmp	r3, #1
    d0fe:	d801      	bhi.n	d104 <usb_find_desc+0x20>
    d100:	2300      	movs	r3, #0
    d102:	e012      	b.n	d12a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d104:	68f8      	ldr	r0, [r7, #12]
    d106:	4b0c      	ldr	r3, [pc, #48]	; (d138 <usb_find_desc+0x54>)
    d108:	4798      	blx	r3
    d10a:	4603      	mov	r3, r0
    d10c:	461a      	mov	r2, r3
    d10e:	79fb      	ldrb	r3, [r7, #7]
    d110:	4293      	cmp	r3, r2
    d112:	d101      	bne.n	d118 <usb_find_desc+0x34>
			return desc;
    d114:	68fb      	ldr	r3, [r7, #12]
    d116:	e008      	b.n	d12a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d118:	68f8      	ldr	r0, [r7, #12]
    d11a:	4b08      	ldr	r3, [pc, #32]	; (d13c <usb_find_desc+0x58>)
    d11c:	4798      	blx	r3
    d11e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d120:	68fa      	ldr	r2, [r7, #12]
    d122:	68bb      	ldr	r3, [r7, #8]
    d124:	429a      	cmp	r2, r3
    d126:	d3e5      	bcc.n	d0f4 <usb_find_desc+0x10>
	}
	return NULL;
    d128:	2300      	movs	r3, #0
}
    d12a:	4618      	mov	r0, r3
    d12c:	3710      	adds	r7, #16
    d12e:	46bd      	mov	sp, r7
    d130:	bd80      	pop	{r7, pc}
    d132:	bf00      	nop
    d134:	0000d04b 	.word	0x0000d04b
    d138:	0000d063 	.word	0x0000d063
    d13c:	0000d07d 	.word	0x0000d07d

0000d140 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d140:	b580      	push	{r7, lr}
    d142:	b082      	sub	sp, #8
    d144:	af00      	add	r7, sp, #0
    d146:	6078      	str	r0, [r7, #4]
    d148:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d14a:	e019      	b.n	d180 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d14c:	6878      	ldr	r0, [r7, #4]
    d14e:	4b12      	ldr	r3, [pc, #72]	; (d198 <usb_find_ep_desc+0x58>)
    d150:	4798      	blx	r3
    d152:	4603      	mov	r3, r0
    d154:	2b01      	cmp	r3, #1
    d156:	d801      	bhi.n	d15c <usb_find_ep_desc+0x1c>
    d158:	2300      	movs	r3, #0
    d15a:	e018      	b.n	d18e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d15c:	6878      	ldr	r0, [r7, #4]
    d15e:	4b0f      	ldr	r3, [pc, #60]	; (d19c <usb_find_ep_desc+0x5c>)
    d160:	4798      	blx	r3
    d162:	4603      	mov	r3, r0
    d164:	2b04      	cmp	r3, #4
    d166:	d010      	beq.n	d18a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d168:	6878      	ldr	r0, [r7, #4]
    d16a:	4b0c      	ldr	r3, [pc, #48]	; (d19c <usb_find_ep_desc+0x5c>)
    d16c:	4798      	blx	r3
    d16e:	4603      	mov	r3, r0
    d170:	2b05      	cmp	r3, #5
    d172:	d101      	bne.n	d178 <usb_find_ep_desc+0x38>
			return desc;
    d174:	687b      	ldr	r3, [r7, #4]
    d176:	e00a      	b.n	d18e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d178:	6878      	ldr	r0, [r7, #4]
    d17a:	4b09      	ldr	r3, [pc, #36]	; (d1a0 <usb_find_ep_desc+0x60>)
    d17c:	4798      	blx	r3
    d17e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d180:	687a      	ldr	r2, [r7, #4]
    d182:	683b      	ldr	r3, [r7, #0]
    d184:	429a      	cmp	r2, r3
    d186:	d3e1      	bcc.n	d14c <usb_find_ep_desc+0xc>
    d188:	e000      	b.n	d18c <usb_find_ep_desc+0x4c>
			break;
    d18a:	bf00      	nop
	}
	return NULL;
    d18c:	2300      	movs	r3, #0
}
    d18e:	4618      	mov	r0, r3
    d190:	3708      	adds	r7, #8
    d192:	46bd      	mov	sp, r7
    d194:	bd80      	pop	{r7, pc}
    d196:	bf00      	nop
    d198:	0000d04b 	.word	0x0000d04b
    d19c:	0000d063 	.word	0x0000d063
    d1a0:	0000d07d 	.word	0x0000d07d

0000d1a4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d1a4:	b580      	push	{r7, lr}
    d1a6:	b084      	sub	sp, #16
    d1a8:	af00      	add	r7, sp, #0
    d1aa:	60f8      	str	r0, [r7, #12]
    d1ac:	60b9      	str	r1, [r7, #8]
    d1ae:	4613      	mov	r3, r2
    d1b0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d1b2:	2202      	movs	r2, #2
    d1b4:	68b9      	ldr	r1, [r7, #8]
    d1b6:	68f8      	ldr	r0, [r7, #12]
    d1b8:	4b15      	ldr	r3, [pc, #84]	; (d210 <usb_find_cfg_desc+0x6c>)
    d1ba:	4798      	blx	r3
    d1bc:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d1be:	68fb      	ldr	r3, [r7, #12]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	d11a      	bne.n	d1fa <usb_find_cfg_desc+0x56>
		return NULL;
    d1c4:	2300      	movs	r3, #0
    d1c6:	e01f      	b.n	d208 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d1c8:	68f8      	ldr	r0, [r7, #12]
    d1ca:	4b12      	ldr	r3, [pc, #72]	; (d214 <usb_find_cfg_desc+0x70>)
    d1cc:	4798      	blx	r3
    d1ce:	4603      	mov	r3, r0
    d1d0:	2b01      	cmp	r3, #1
    d1d2:	d801      	bhi.n	d1d8 <usb_find_cfg_desc+0x34>
    d1d4:	2300      	movs	r3, #0
    d1d6:	e017      	b.n	d208 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d1d8:	68fb      	ldr	r3, [r7, #12]
    d1da:	3301      	adds	r3, #1
    d1dc:	781b      	ldrb	r3, [r3, #0]
    d1de:	2b02      	cmp	r3, #2
    d1e0:	d110      	bne.n	d204 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d1e2:	68fb      	ldr	r3, [r7, #12]
    d1e4:	3305      	adds	r3, #5
    d1e6:	781b      	ldrb	r3, [r3, #0]
    d1e8:	79fa      	ldrb	r2, [r7, #7]
    d1ea:	429a      	cmp	r2, r3
    d1ec:	d101      	bne.n	d1f2 <usb_find_cfg_desc+0x4e>
			return desc;
    d1ee:	68fb      	ldr	r3, [r7, #12]
    d1f0:	e00a      	b.n	d208 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d1f2:	68f8      	ldr	r0, [r7, #12]
    d1f4:	4b08      	ldr	r3, [pc, #32]	; (d218 <usb_find_cfg_desc+0x74>)
    d1f6:	4798      	blx	r3
    d1f8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d1fa:	68fa      	ldr	r2, [r7, #12]
    d1fc:	68bb      	ldr	r3, [r7, #8]
    d1fe:	429a      	cmp	r2, r3
    d200:	d3e2      	bcc.n	d1c8 <usb_find_cfg_desc+0x24>
    d202:	e000      	b.n	d206 <usb_find_cfg_desc+0x62>
			break;
    d204:	bf00      	nop
	}
	return NULL;
    d206:	2300      	movs	r3, #0
}
    d208:	4618      	mov	r0, r3
    d20a:	3710      	adds	r7, #16
    d20c:	46bd      	mov	sp, r7
    d20e:	bd80      	pop	{r7, pc}
    d210:	0000d0e5 	.word	0x0000d0e5
    d214:	0000d04b 	.word	0x0000d04b
    d218:	0000d0c1 	.word	0x0000d0c1

0000d21c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d21c:	b580      	push	{r7, lr}
    d21e:	b086      	sub	sp, #24
    d220:	af00      	add	r7, sp, #0
    d222:	60f8      	str	r0, [r7, #12]
    d224:	60b9      	str	r1, [r7, #8]
    d226:	4613      	mov	r3, r2
    d228:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d22a:	2300      	movs	r3, #0
    d22c:	75fb      	strb	r3, [r7, #23]
    d22e:	e020      	b.n	d272 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d230:	2203      	movs	r2, #3
    d232:	68b9      	ldr	r1, [r7, #8]
    d234:	68f8      	ldr	r0, [r7, #12]
    d236:	4b13      	ldr	r3, [pc, #76]	; (d284 <usb_find_str_desc+0x68>)
    d238:	4798      	blx	r3
    d23a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d23c:	68fb      	ldr	r3, [r7, #12]
    d23e:	2b00      	cmp	r3, #0
    d240:	d015      	beq.n	d26e <usb_find_str_desc+0x52>
			_desc_len_check();
    d242:	68f8      	ldr	r0, [r7, #12]
    d244:	4b10      	ldr	r3, [pc, #64]	; (d288 <usb_find_str_desc+0x6c>)
    d246:	4798      	blx	r3
    d248:	4603      	mov	r3, r0
    d24a:	2b01      	cmp	r3, #1
    d24c:	d801      	bhi.n	d252 <usb_find_str_desc+0x36>
    d24e:	2300      	movs	r3, #0
    d250:	e014      	b.n	d27c <usb_find_str_desc+0x60>
			if (i == str_index) {
    d252:	7dfa      	ldrb	r2, [r7, #23]
    d254:	79fb      	ldrb	r3, [r7, #7]
    d256:	429a      	cmp	r2, r3
    d258:	d101      	bne.n	d25e <usb_find_str_desc+0x42>
				return desc;
    d25a:	68fb      	ldr	r3, [r7, #12]
    d25c:	e00e      	b.n	d27c <usb_find_str_desc+0x60>
			}
			i++;
    d25e:	7dfb      	ldrb	r3, [r7, #23]
    d260:	3301      	adds	r3, #1
    d262:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d264:	68f8      	ldr	r0, [r7, #12]
    d266:	4b09      	ldr	r3, [pc, #36]	; (d28c <usb_find_str_desc+0x70>)
    d268:	4798      	blx	r3
    d26a:	60f8      	str	r0, [r7, #12]
    d26c:	e001      	b.n	d272 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d26e:	2300      	movs	r3, #0
    d270:	e004      	b.n	d27c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d272:	68fa      	ldr	r2, [r7, #12]
    d274:	68bb      	ldr	r3, [r7, #8]
    d276:	429a      	cmp	r2, r3
    d278:	d3da      	bcc.n	d230 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d27a:	2300      	movs	r3, #0
}
    d27c:	4618      	mov	r0, r3
    d27e:	3718      	adds	r7, #24
    d280:	46bd      	mov	sp, r7
    d282:	bd80      	pop	{r7, pc}
    d284:	0000d0e5 	.word	0x0000d0e5
    d288:	0000d04b 	.word	0x0000d04b
    d28c:	0000d07d 	.word	0x0000d07d

0000d290 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
    d290:	b480      	push	{r7}
    d292:	b083      	sub	sp, #12
    d294:	af00      	add	r7, sp, #0
    d296:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
    d298:	4b04      	ldr	r3, [pc, #16]	; (d2ac <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
    d29a:	681b      	ldr	r3, [r3, #0]
    d29c:	2201      	movs	r2, #1
    d29e:	709a      	strb	r2, [r3, #2]
	asm("nop");
    d2a0:	bf00      	nop
}
    d2a2:	bf00      	nop
    d2a4:	370c      	adds	r7, #12
    d2a6:	46bd      	mov	sp, r7
    d2a8:	bc80      	pop	{r7}
    d2aa:	4770      	bx	lr
    d2ac:	200011a4 	.word	0x200011a4

0000d2b0 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
    d2b0:	b480      	push	{r7}
    d2b2:	b083      	sub	sp, #12
    d2b4:	af00      	add	r7, sp, #0
    d2b6:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
    d2b8:	687b      	ldr	r3, [r7, #4]
    d2ba:	4618      	mov	r0, r3
    d2bc:	370c      	adds	r7, #12
    d2be:	46bd      	mov	sp, r7
    d2c0:	bc80      	pop	{r7}
    d2c2:	4770      	bx	lr

0000d2c4 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
    d2c4:	b480      	push	{r7}
    d2c6:	b083      	sub	sp, #12
    d2c8:	af00      	add	r7, sp, #0
    d2ca:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
    d2cc:	687b      	ldr	r3, [r7, #4]
    d2ce:	4618      	mov	r0, r3
    d2d0:	370c      	adds	r7, #12
    d2d2:	46bd      	mov	sp, r7
    d2d4:	bc80      	pop	{r7}
    d2d6:	4770      	bx	lr

0000d2d8 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
    d2d8:	b580      	push	{r7, lr}
    d2da:	b084      	sub	sp, #16
    d2dc:	af00      	add	r7, sp, #0
    d2de:	60f8      	str	r0, [r7, #12]
    d2e0:	60b9      	str	r1, [r7, #8]
    d2e2:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
    d2e4:	4a1c      	ldr	r2, [pc, #112]	; (d358 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
    d2e6:	68fb      	ldr	r3, [r7, #12]
    d2e8:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
    d2ea:	68fb      	ldr	r3, [r7, #12]
    d2ec:	68ba      	ldr	r2, [r7, #8]
    d2ee:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
    d2f0:	68fb      	ldr	r3, [r7, #12]
    d2f2:	687a      	ldr	r2, [r7, #4]
    d2f4:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
    d2f6:	68fb      	ldr	r3, [r7, #12]
    d2f8:	6a1b      	ldr	r3, [r3, #32]
    d2fa:	68da      	ldr	r2, [r3, #12]
    d2fc:	68fb      	ldr	r3, [r7, #12]
    d2fe:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
    d300:	68fb      	ldr	r3, [r7, #12]
    d302:	6a1b      	ldr	r3, [r3, #32]
    d304:	689a      	ldr	r2, [r3, #8]
    d306:	68fb      	ldr	r3, [r7, #12]
    d308:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
    d30a:	68fb      	ldr	r3, [r7, #12]
    d30c:	4a13      	ldr	r2, [pc, #76]	; (d35c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
    d30e:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
    d310:	68fb      	ldr	r3, [r7, #12]
    d312:	2204      	movs	r2, #4
    d314:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
    d316:	68fb      	ldr	r3, [r7, #12]
    d318:	2209      	movs	r2, #9
    d31a:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
    d31c:	68fb      	ldr	r3, [r7, #12]
    d31e:	220e      	movs	r2, #14
    d320:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
    d322:	68fb      	ldr	r3, [r7, #12]
    d324:	2213      	movs	r2, #19
    d326:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
    d328:	20c8      	movs	r0, #200	; 0xc8
    d32a:	4b0d      	ldr	r3, [pc, #52]	; (d360 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
    d32c:	4798      	blx	r3
	temperatureTimer.Init();
    d32e:	480d      	ldr	r0, [pc, #52]	; (d364 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
    d330:	4b0d      	ldr	r3, [pc, #52]	; (d368 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
    d332:	4798      	blx	r3
	configure_channels();
    d334:	68f8      	ldr	r0, [r7, #12]
    d336:	4b0d      	ldr	r3, [pc, #52]	; (d36c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
    d338:	4798      	blx	r3
	configure_global_parameters();
    d33a:	68f8      	ldr	r0, [r7, #12]
    d33c:	4b0c      	ldr	r3, [pc, #48]	; (d370 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
    d33e:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
    d340:	68fb      	ldr	r3, [r7, #12]
    d342:	2201      	movs	r2, #1
    d344:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
    d346:	68f8      	ldr	r0, [r7, #12]
    d348:	4b0a      	ldr	r3, [pc, #40]	; (d374 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
    d34a:	4798      	blx	r3
    d34c:	4603      	mov	r3, r0
}
    d34e:	4618      	mov	r0, r3
    d350:	3710      	adds	r7, #16
    d352:	46bd      	mov	sp, r7
    d354:	bd80      	pop	{r7, pc}
    d356:	bf00      	nop
    d358:	200011a4 	.word	0x200011a4
    d35c:	200010e4 	.word	0x200010e4
    d360:	0000b08d 	.word	0x0000b08d
    d364:	200010a4 	.word	0x200010a4
    d368:	0000e025 	.word	0x0000e025
    d36c:	0000d781 	.word	0x0000d781
    d370:	0000d839 	.word	0x0000d839
    d374:	0000d871 	.word	0x0000d871

0000d378 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
    d378:	b590      	push	{r4, r7, lr}
    d37a:	b089      	sub	sp, #36	; 0x24
    d37c:	af02      	add	r7, sp, #8
    d37e:	60f8      	str	r0, [r7, #12]
    d380:	60b9      	str	r1, [r7, #8]
    d382:	603b      	str	r3, [r7, #0]
    d384:	4613      	mov	r3, r2
    d386:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
    d388:	79fb      	ldrb	r3, [r7, #7]
    d38a:	461a      	mov	r2, r3
    d38c:	f44f 7100 	mov.w	r1, #512	; 0x200
    d390:	68f8      	ldr	r0, [r7, #12]
    d392:	4b0b      	ldr	r3, [pc, #44]	; (d3c0 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
    d394:	4798      	blx	r3
    d396:	4603      	mov	r3, r0
    d398:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
    d39a:	8afa      	ldrh	r2, [r7, #22]
    d39c:	683b      	ldr	r3, [r7, #0]
    d39e:	9300      	str	r3, [sp, #0]
    d3a0:	4613      	mov	r3, r2
    d3a2:	2202      	movs	r2, #2
    d3a4:	68b9      	ldr	r1, [r7, #8]
    d3a6:	68f8      	ldr	r0, [r7, #12]
    d3a8:	4c06      	ldr	r4, [pc, #24]	; (d3c4 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
    d3aa:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
    d3ac:	8afb      	ldrh	r3, [r7, #22]
    d3ae:	79fa      	ldrb	r2, [r7, #7]
    d3b0:	68b9      	ldr	r1, [r7, #8]
    d3b2:	68f8      	ldr	r0, [r7, #12]
    d3b4:	4c04      	ldr	r4, [pc, #16]	; (d3c8 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
    d3b6:	47a0      	blx	r4
}
    d3b8:	bf00      	nop
    d3ba:	371c      	adds	r7, #28
    d3bc:	46bd      	mov	sp, r7
    d3be:	bd90      	pop	{r4, r7, pc}
    d3c0:	0000d755 	.word	0x0000d755
    d3c4:	0000d615 	.word	0x0000d615
    d3c8:	0000d419 	.word	0x0000d419

0000d3cc <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
    d3cc:	b590      	push	{r4, r7, lr}
    d3ce:	b087      	sub	sp, #28
    d3d0:	af02      	add	r7, sp, #8
    d3d2:	6078      	str	r0, [r7, #4]
    d3d4:	460b      	mov	r3, r1
    d3d6:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
    d3d8:	78fb      	ldrb	r3, [r7, #3]
    d3da:	687a      	ldr	r2, [r7, #4]
    d3dc:	4413      	add	r3, r2
    d3de:	78db      	ldrb	r3, [r3, #3]
    d3e0:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
    d3e2:	687b      	ldr	r3, [r7, #4]
    d3e4:	2200      	movs	r2, #0
    d3e6:	705a      	strb	r2, [r3, #1]
	ready=false;
    d3e8:	687b      	ldr	r3, [r7, #4]
    d3ea:	2200      	movs	r2, #0
    d3ec:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
    d3ee:	687b      	ldr	r3, [r7, #4]
    d3f0:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d3f2:	7bfb      	ldrb	r3, [r7, #15]
    d3f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d3f8:	b2db      	uxtb	r3, r3
    d3fa:	9300      	str	r3, [sp, #0]
    d3fc:	2300      	movs	r3, #0
    d3fe:	2202      	movs	r2, #2
    d400:	6878      	ldr	r0, [r7, #4]
    d402:	4c04      	ldr	r4, [pc, #16]	; (d414 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
    d404:	47a0      	blx	r4
	channelOnProcess=channel_number;
    d406:	687b      	ldr	r3, [r7, #4]
    d408:	7bfa      	ldrb	r2, [r7, #15]
    d40a:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
    d40c:	bf00      	nop
    d40e:	3714      	adds	r7, #20
    d410:	46bd      	mov	sp, r7
    d412:	bd90      	pop	{r4, r7, pc}
    d414:	0000d6e5 	.word	0x0000d6e5

0000d418 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
    d418:	b590      	push	{r4, r7, lr}
    d41a:	b089      	sub	sp, #36	; 0x24
    d41c:	af02      	add	r7, sp, #8
    d41e:	60f8      	str	r0, [r7, #12]
    d420:	60b9      	str	r1, [r7, #8]
    d422:	4611      	mov	r1, r2
    d424:	461a      	mov	r2, r3
    d426:	460b      	mov	r3, r1
    d428:	71fb      	strb	r3, [r7, #7]
    d42a:	4613      	mov	r3, r2
    d42c:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
    d42e:	88ba      	ldrh	r2, [r7, #4]
    d430:	2300      	movs	r3, #0
    d432:	9300      	str	r3, [sp, #0]
    d434:	4613      	mov	r3, r2
    d436:	2203      	movs	r2, #3
    d438:	68b9      	ldr	r1, [r7, #8]
    d43a:	68f8      	ldr	r0, [r7, #12]
    d43c:	4c03      	ldr	r4, [pc, #12]	; (d44c <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
    d43e:	47a0      	blx	r4
    d440:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
    d442:	bf00      	nop
    d444:	371c      	adds	r7, #28
    d446:	46bd      	mov	sp, r7
    d448:	bd90      	pop	{r4, r7, pc}
    d44a:	bf00      	nop
    d44c:	0000d615 	.word	0x0000d615

0000d450 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
    d450:	b590      	push	{r4, r7, lr}
    d452:	b085      	sub	sp, #20
    d454:	af02      	add	r7, sp, #8
    d456:	6078      	str	r0, [r7, #4]
    d458:	460b      	mov	r3, r1
    d45a:	70fb      	strb	r3, [r7, #3]
    d45c:	4613      	mov	r3, r2
    d45e:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
    d460:	78fb      	ldrb	r3, [r7, #3]
    d462:	461a      	mov	r2, r3
    d464:	2110      	movs	r1, #16
    d466:	6878      	ldr	r0, [r7, #4]
    d468:	4b17      	ldr	r3, [pc, #92]	; (d4c8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
    d46a:	4798      	blx	r3
    d46c:	4603      	mov	r3, r0
    d46e:	461a      	mov	r2, r3
    d470:	687b      	ldr	r3, [r7, #4]
    d472:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
    d476:	687b      	ldr	r3, [r7, #4]
    d478:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d47a:	687b      	ldr	r3, [r7, #4]
    d47c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
    d480:	2300      	movs	r3, #0
    d482:	9300      	str	r3, [sp, #0]
    d484:	4613      	mov	r3, r2
    d486:	2203      	movs	r2, #3
    d488:	6878      	ldr	r0, [r7, #4]
    d48a:	4c10      	ldr	r4, [pc, #64]	; (d4cc <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
    d48c:	47a0      	blx	r4
    d48e:	4602      	mov	r2, r0
    d490:	687b      	ldr	r3, [r7, #4]
    d492:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
    d494:	687b      	ldr	r3, [r7, #4]
    d496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d498:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
    d4a0:	687b      	ldr	r3, [r7, #4]
    d4a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
    d4a4:	78bb      	ldrb	r3, [r7, #2]
    d4a6:	78fa      	ldrb	r2, [r7, #3]
    d4a8:	6878      	ldr	r0, [r7, #4]
    d4aa:	4c09      	ldr	r4, [pc, #36]	; (d4d0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
    d4ac:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d4b2:	0e1b      	lsrs	r3, r3, #24
    d4b4:	b2da      	uxtb	r2, r3
    d4b6:	687b      	ldr	r3, [r7, #4]
    d4b8:	71da      	strb	r2, [r3, #7]
	return scaled_result;
    d4ba:	687b      	ldr	r3, [r7, #4]
    d4bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
    d4be:	4618      	mov	r0, r3
    d4c0:	370c      	adds	r7, #12
    d4c2:	46bd      	mov	sp, r7
    d4c4:	bd90      	pop	{r4, r7, pc}
    d4c6:	bf00      	nop
    d4c8:	0000d755 	.word	0x0000d755
    d4cc:	0000d615 	.word	0x0000d615
    d4d0:	0000d529 	.word	0x0000d529

0000d4d4 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
    d4d4:	b580      	push	{r7, lr}
    d4d6:	b082      	sub	sp, #8
    d4d8:	af00      	add	r7, sp, #0
    d4da:	6078      	str	r0, [r7, #4]
    d4dc:	460b      	mov	r3, r1
    d4de:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
    d4e0:	78fb      	ldrb	r3, [r7, #3]
    d4e2:	687a      	ldr	r2, [r7, #4]
    d4e4:	4413      	add	r3, r2
    d4e6:	78db      	ldrb	r3, [r3, #3]
    d4e8:	4619      	mov	r1, r3
    d4ea:	6878      	ldr	r0, [r7, #4]
    d4ec:	4b03      	ldr	r3, [pc, #12]	; (d4fc <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
    d4ee:	4798      	blx	r3
    d4f0:	4603      	mov	r3, r0
}
    d4f2:	4618      	mov	r0, r3
    d4f4:	3708      	adds	r7, #8
    d4f6:	46bd      	mov	sp, r7
    d4f8:	bd80      	pop	{r7, pc}
    d4fa:	bf00      	nop
    d4fc:	0000d501 	.word	0x0000d501

0000d500 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
    d500:	b580      	push	{r7, lr}
    d502:	b082      	sub	sp, #8
    d504:	af00      	add	r7, sp, #0
    d506:	6078      	str	r0, [r7, #4]
    d508:	460b      	mov	r3, r1
    d50a:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
    d50c:	78fb      	ldrb	r3, [r7, #3]
    d50e:	2202      	movs	r2, #2
    d510:	4619      	mov	r1, r3
    d512:	6878      	ldr	r0, [r7, #4]
    d514:	4b03      	ldr	r3, [pc, #12]	; (d524 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
    d516:	4798      	blx	r3
    d518:	4603      	mov	r3, r0
}
    d51a:	4618      	mov	r0, r3
    d51c:	3708      	adds	r7, #8
    d51e:	46bd      	mov	sp, r7
    d520:	bd80      	pop	{r7, pc}
    d522:	bf00      	nop
    d524:	0000d451 	.word	0x0000d451

0000d528 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
    d528:	b580      	push	{r7, lr}
    d52a:	b084      	sub	sp, #16
    d52c:	af00      	add	r7, sp, #0
    d52e:	60f8      	str	r0, [r7, #12]
    d530:	60b9      	str	r1, [r7, #8]
    d532:	4611      	mov	r1, r2
    d534:	461a      	mov	r2, r3
    d536:	460b      	mov	r3, r1
    d538:	71fb      	strb	r3, [r7, #7]
    d53a:	4613      	mov	r3, r2
    d53c:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
    d53e:	68ba      	ldr	r2, [r7, #8]
    d540:	68fb      	ldr	r3, [r7, #12]
    d542:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
    d544:	68fb      	ldr	r3, [r7, #12]
    d546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    d54c:	2b00      	cmp	r3, #0
    d54e:	d006      	beq.n	d55e <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
    d550:	68fb      	ldr	r3, [r7, #12]
    d552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    d554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d558:	461a      	mov	r2, r3
    d55a:	68fb      	ldr	r3, [r7, #12]
    d55c:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
    d55e:	79bb      	ldrb	r3, [r7, #6]
    d560:	2b02      	cmp	r3, #2
    d562:	d11d      	bne.n	d5a0 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
    d564:	68fb      	ldr	r3, [r7, #12]
    d566:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d568:	4b18      	ldr	r3, [pc, #96]	; (d5cc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
    d56a:	4610      	mov	r0, r2
    d56c:	4798      	blx	r3
    d56e:	4602      	mov	r2, r0
    d570:	4b17      	ldr	r3, [pc, #92]	; (d5d0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
    d572:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
    d576:	4610      	mov	r0, r2
    d578:	4798      	blx	r3
    d57a:	4603      	mov	r3, r0
    d57c:	461a      	mov	r2, r3
    d57e:	68fb      	ldr	r3, [r7, #12]
    d580:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
    d582:	79fb      	ldrb	r3, [r7, #7]
    d584:	4619      	mov	r1, r3
    d586:	68f8      	ldr	r0, [r7, #12]
    d588:	4b12      	ldr	r3, [pc, #72]	; (d5d4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
    d58a:	4798      	blx	r3
    d58c:	4603      	mov	r3, r0
    d58e:	4618      	mov	r0, r3
    d590:	68fb      	ldr	r3, [r7, #12]
    d592:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    d594:	68f9      	ldr	r1, [r7, #12]
    d596:	1c83      	adds	r3, r0, #2
    d598:	009b      	lsls	r3, r3, #2
    d59a:	440b      	add	r3, r1
    d59c:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
    d59e:	e011      	b.n	d5c4 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
    d5a0:	79bb      	ldrb	r3, [r7, #6]
    d5a2:	2b01      	cmp	r3, #1
    d5a4:	d10e      	bne.n	d5c4 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
    d5a6:	68fb      	ldr	r3, [r7, #12]
    d5a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d5aa:	4b08      	ldr	r3, [pc, #32]	; (d5cc <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
    d5ac:	4610      	mov	r0, r2
    d5ae:	4798      	blx	r3
    d5b0:	4602      	mov	r2, r0
    d5b2:	4b07      	ldr	r3, [pc, #28]	; (d5d0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
    d5b4:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
    d5b8:	4610      	mov	r0, r2
    d5ba:	4798      	blx	r3
    d5bc:	4603      	mov	r3, r0
    d5be:	461a      	mov	r2, r3
    d5c0:	68fb      	ldr	r3, [r7, #12]
    d5c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
    d5c4:	bf00      	nop
    d5c6:	3710      	adds	r7, #16
    d5c8:	46bd      	mov	sp, r7
    d5ca:	bd80      	pop	{r7, pc}
    d5cc:	0000fe15 	.word	0x0000fe15
    d5d0:	00010025 	.word	0x00010025
    d5d4:	0000d5d9 	.word	0x0000d5d9

0000d5d8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
    d5d8:	b480      	push	{r7}
    d5da:	b085      	sub	sp, #20
    d5dc:	af00      	add	r7, sp, #0
    d5de:	6078      	str	r0, [r7, #4]
    d5e0:	460b      	mov	r3, r1
    d5e2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
    d5e4:	2300      	movs	r3, #0
    d5e6:	73fb      	strb	r3, [r7, #15]
    d5e8:	7bfb      	ldrb	r3, [r7, #15]
    d5ea:	2b03      	cmp	r3, #3
    d5ec:	dc0c      	bgt.n	d608 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
    d5ee:	7bfb      	ldrb	r3, [r7, #15]
    d5f0:	687a      	ldr	r2, [r7, #4]
    d5f2:	4413      	add	r3, r2
    d5f4:	78db      	ldrb	r3, [r3, #3]
    d5f6:	78fa      	ldrb	r2, [r7, #3]
    d5f8:	429a      	cmp	r2, r3
    d5fa:	d101      	bne.n	d600 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
    d5fc:	7bfb      	ldrb	r3, [r7, #15]
    d5fe:	e004      	b.n	d60a <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
    d600:	7bfb      	ldrb	r3, [r7, #15]
    d602:	3301      	adds	r3, #1
    d604:	73fb      	strb	r3, [r7, #15]
    d606:	e7ef      	b.n	d5e8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
    d608:	2300      	movs	r3, #0
}
    d60a:	4618      	mov	r0, r3
    d60c:	3714      	adds	r7, #20
    d60e:	46bd      	mov	sp, r7
    d610:	bc80      	pop	{r7}
    d612:	4770      	bx	lr

0000d614 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
    d614:	b590      	push	{r4, r7, lr}
    d616:	b089      	sub	sp, #36	; 0x24
    d618:	af02      	add	r7, sp, #8
    d61a:	60f8      	str	r0, [r7, #12]
    d61c:	60b9      	str	r1, [r7, #8]
    d61e:	4611      	mov	r1, r2
    d620:	461a      	mov	r2, r3
    d622:	460b      	mov	r3, r1
    d624:	71fb      	strb	r3, [r7, #7]
    d626:	4613      	mov	r3, r2
    d628:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
    d62a:	2300      	movs	r3, #0
    d62c:	75fb      	strb	r3, [r7, #23]
    d62e:	7dfb      	ldrb	r3, [r7, #23]
    d630:	2b06      	cmp	r3, #6
    d632:	dc09      	bgt.n	d648 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
    d634:	68fb      	ldr	r3, [r7, #12]
    d636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d638:	7dfb      	ldrb	r3, [r7, #23]
    d63a:	4413      	add	r3, r2
    d63c:	2200      	movs	r2, #0
    d63e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
    d640:	7dfb      	ldrb	r3, [r7, #23]
    d642:	3301      	adds	r3, #1
    d644:	75fb      	strb	r3, [r7, #23]
    d646:	e7f2      	b.n	d62e <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
    d648:	68fb      	ldr	r3, [r7, #12]
    d64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d64c:	79fa      	ldrb	r2, [r7, #7]
    d64e:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
    d650:	68fb      	ldr	r3, [r7, #12]
    d652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d654:	3301      	adds	r3, #1
    d656:	88ba      	ldrh	r2, [r7, #4]
    d658:	1212      	asrs	r2, r2, #8
    d65a:	b2d2      	uxtb	r2, r2
    d65c:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
    d65e:	68fb      	ldr	r3, [r7, #12]
    d660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d662:	3302      	adds	r3, #2
    d664:	88ba      	ldrh	r2, [r7, #4]
    d666:	b2d2      	uxtb	r2, r2
    d668:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
    d66a:	68fb      	ldr	r3, [r7, #12]
    d66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d66e:	3303      	adds	r3, #3
    d670:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d672:	0e12      	lsrs	r2, r2, #24
    d674:	b2d2      	uxtb	r2, r2
    d676:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
    d678:	68fb      	ldr	r3, [r7, #12]
    d67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d67c:	3304      	adds	r3, #4
    d67e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d680:	0c12      	lsrs	r2, r2, #16
    d682:	b2d2      	uxtb	r2, r2
    d684:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
    d686:	68fb      	ldr	r3, [r7, #12]
    d688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d68a:	3305      	adds	r3, #5
    d68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d68e:	0a12      	lsrs	r2, r2, #8
    d690:	b2d2      	uxtb	r2, r2
    d692:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
    d694:	68fb      	ldr	r3, [r7, #12]
    d696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d698:	3306      	adds	r3, #6
    d69a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d69c:	b2d2      	uxtb	r2, r2
    d69e:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
    d6a0:	68fb      	ldr	r3, [r7, #12]
    d6a2:	6a18      	ldr	r0, [r3, #32]
    d6a4:	68fb      	ldr	r3, [r7, #12]
    d6a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d6a8:	f107 0110 	add.w	r1, r7, #16
    d6ac:	2307      	movs	r3, #7
    d6ae:	9300      	str	r3, [sp, #0]
    d6b0:	460b      	mov	r3, r1
    d6b2:	68b9      	ldr	r1, [r7, #8]
    d6b4:	4c0a      	ldr	r4, [pc, #40]	; (d6e0 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
    d6b6:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
    d6b8:	7c3b      	ldrb	r3, [r7, #16]
    d6ba:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
    d6bc:	7c7b      	ldrb	r3, [r7, #17]
    d6be:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
    d6c0:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
    d6c2:	7cbb      	ldrb	r3, [r7, #18]
    d6c4:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
    d6c6:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
    d6c8:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
    d6ca:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
    d6cc:	68fb      	ldr	r3, [r7, #12]
    d6ce:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
    d6d0:	bf00      	nop
	return output_data;
    d6d2:	68fb      	ldr	r3, [r7, #12]
    d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    d6d6:	4618      	mov	r0, r3
    d6d8:	371c      	adds	r7, #28
    d6da:	46bd      	mov	sp, r7
    d6dc:	bd90      	pop	{r4, r7, pc}
    d6de:	bf00      	nop
    d6e0:	0000dc09 	.word	0x0000dc09

0000d6e4 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
    d6e4:	b590      	push	{r4, r7, lr}
    d6e6:	b087      	sub	sp, #28
    d6e8:	af02      	add	r7, sp, #8
    d6ea:	60f8      	str	r0, [r7, #12]
    d6ec:	60b9      	str	r1, [r7, #8]
    d6ee:	4611      	mov	r1, r2
    d6f0:	461a      	mov	r2, r3
    d6f2:	460b      	mov	r3, r1
    d6f4:	71fb      	strb	r3, [r7, #7]
    d6f6:	4613      	mov	r3, r2
    d6f8:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
    d6fa:	68fb      	ldr	r3, [r7, #12]
    d6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d6fe:	79fa      	ldrb	r2, [r7, #7]
    d700:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
    d702:	68fb      	ldr	r3, [r7, #12]
    d704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d706:	3301      	adds	r3, #1
    d708:	88ba      	ldrh	r2, [r7, #4]
    d70a:	1212      	asrs	r2, r2, #8
    d70c:	b2d2      	uxtb	r2, r2
    d70e:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
    d710:	68fb      	ldr	r3, [r7, #12]
    d712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d714:	3302      	adds	r3, #2
    d716:	88ba      	ldrh	r2, [r7, #4]
    d718:	b2d2      	uxtb	r2, r2
    d71a:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
    d71c:	68fb      	ldr	r3, [r7, #12]
    d71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d720:	3303      	adds	r3, #3
    d722:	f897 2020 	ldrb.w	r2, [r7, #32]
    d726:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
    d728:	68fb      	ldr	r3, [r7, #12]
    d72a:	6a18      	ldr	r0, [r3, #32]
    d72c:	68fb      	ldr	r3, [r7, #12]
    d72e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d730:	68fb      	ldr	r3, [r7, #12]
    d732:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    d734:	2304      	movs	r3, #4
    d736:	9300      	str	r3, [sp, #0]
    d738:	460b      	mov	r3, r1
    d73a:	68b9      	ldr	r1, [r7, #8]
    d73c:	4c04      	ldr	r4, [pc, #16]	; (d750 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
    d73e:	47a0      	blx	r4
	return rx[0];
    d740:	68fb      	ldr	r3, [r7, #12]
    d742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d744:	781b      	ldrb	r3, [r3, #0]
}
    d746:	4618      	mov	r0, r3
    d748:	3714      	adds	r7, #20
    d74a:	46bd      	mov	sp, r7
    d74c:	bd90      	pop	{r4, r7, pc}
    d74e:	bf00      	nop
    d750:	0000dc09 	.word	0x0000dc09

0000d754 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
    d754:	b480      	push	{r7}
    d756:	b083      	sub	sp, #12
    d758:	af00      	add	r7, sp, #0
    d75a:	6078      	str	r0, [r7, #4]
    d75c:	460b      	mov	r3, r1
    d75e:	807b      	strh	r3, [r7, #2]
    d760:	4613      	mov	r3, r2
    d762:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
    d764:	787b      	ldrb	r3, [r7, #1]
    d766:	3b01      	subs	r3, #1
    d768:	b29b      	uxth	r3, r3
    d76a:	009b      	lsls	r3, r3, #2
    d76c:	b29a      	uxth	r2, r3
    d76e:	887b      	ldrh	r3, [r7, #2]
    d770:	4413      	add	r3, r2
    d772:	b29b      	uxth	r3, r3
}
    d774:	4618      	mov	r0, r3
    d776:	370c      	adds	r7, #12
    d778:	46bd      	mov	sp, r7
    d77a:	bc80      	pop	{r7}
    d77c:	4770      	bx	lr
	...

0000d780 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
    d780:	b590      	push	{r4, r7, lr}
    d782:	b085      	sub	sp, #20
    d784:	af00      	add	r7, sp, #0
    d786:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
    d788:	4b25      	ldr	r3, [pc, #148]	; (d820 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    d78a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
    d78c:	687b      	ldr	r3, [r7, #4]
    d78e:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d790:	68fb      	ldr	r3, [r7, #12]
    d792:	2202      	movs	r2, #2
    d794:	6878      	ldr	r0, [r7, #4]
    d796:	4c23      	ldr	r4, [pc, #140]	; (d824 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d798:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
    d79a:	4b23      	ldr	r3, [pc, #140]	; (d828 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
    d79c:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
    d79e:	687b      	ldr	r3, [r7, #4]
    d7a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d7a2:	68fb      	ldr	r3, [r7, #12]
    d7a4:	2204      	movs	r2, #4
    d7a6:	6878      	ldr	r0, [r7, #4]
    d7a8:	4c1e      	ldr	r4, [pc, #120]	; (d824 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d7aa:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
    d7ac:	4b1c      	ldr	r3, [pc, #112]	; (d820 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    d7ae:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
    d7b0:	687b      	ldr	r3, [r7, #4]
    d7b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d7b4:	68fb      	ldr	r3, [r7, #12]
    d7b6:	2207      	movs	r2, #7
    d7b8:	6878      	ldr	r0, [r7, #4]
    d7ba:	4c1a      	ldr	r4, [pc, #104]	; (d824 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d7bc:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
    d7be:	4b1b      	ldr	r3, [pc, #108]	; (d82c <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
    d7c0:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
    d7c2:	687b      	ldr	r3, [r7, #4]
    d7c4:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d7c6:	68fb      	ldr	r3, [r7, #12]
    d7c8:	2209      	movs	r2, #9
    d7ca:	6878      	ldr	r0, [r7, #4]
    d7cc:	4c15      	ldr	r4, [pc, #84]	; (d824 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d7ce:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
    d7d0:	4b13      	ldr	r3, [pc, #76]	; (d820 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    d7d2:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
    d7d4:	687b      	ldr	r3, [r7, #4]
    d7d6:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d7d8:	68fb      	ldr	r3, [r7, #12]
    d7da:	220c      	movs	r2, #12
    d7dc:	6878      	ldr	r0, [r7, #4]
    d7de:	4c11      	ldr	r4, [pc, #68]	; (d824 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d7e0:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
    d7e2:	4b13      	ldr	r3, [pc, #76]	; (d830 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
    d7e4:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
    d7e6:	687b      	ldr	r3, [r7, #4]
    d7e8:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d7ea:	68fb      	ldr	r3, [r7, #12]
    d7ec:	220e      	movs	r2, #14
    d7ee:	6878      	ldr	r0, [r7, #4]
    d7f0:	4c0c      	ldr	r4, [pc, #48]	; (d824 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d7f2:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
    d7f4:	4b0a      	ldr	r3, [pc, #40]	; (d820 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
    d7f6:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
    d7f8:	687b      	ldr	r3, [r7, #4]
    d7fa:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d7fc:	68fb      	ldr	r3, [r7, #12]
    d7fe:	2211      	movs	r2, #17
    d800:	6878      	ldr	r0, [r7, #4]
    d802:	4c08      	ldr	r4, [pc, #32]	; (d824 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d804:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
    d806:	4b0b      	ldr	r3, [pc, #44]	; (d834 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
    d808:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
    d80a:	687b      	ldr	r3, [r7, #4]
    d80c:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d80e:	68fb      	ldr	r3, [r7, #12]
    d810:	2213      	movs	r2, #19
    d812:	6878      	ldr	r0, [r7, #4]
    d814:	4c03      	ldr	r4, [pc, #12]	; (d824 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
    d816:	47a0      	blx	r4

}
    d818:	bf00      	nop
    d81a:	3714      	adds	r7, #20
    d81c:	46bd      	mov	sp, r7
    d81e:	bd90      	pop	{r4, r7, pc}
    d820:	e89c4000 	.word	0xe89c4000
    d824:	0000d379 	.word	0x0000d379
    d828:	60a91000 	.word	0x60a91000
    d82c:	61e91000 	.word	0x61e91000
    d830:	63291000 	.word	0x63291000
    d834:	64691000 	.word	0x64691000

0000d838 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
    d838:	b590      	push	{r4, r7, lr}
    d83a:	b085      	sub	sp, #20
    d83c:	af02      	add	r7, sp, #8
    d83e:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
    d840:	687b      	ldr	r3, [r7, #4]
    d842:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
    d844:	2300      	movs	r3, #0
    d846:	9300      	str	r3, [sp, #0]
    d848:	23f0      	movs	r3, #240	; 0xf0
    d84a:	2202      	movs	r2, #2
    d84c:	6878      	ldr	r0, [r7, #4]
    d84e:	4c07      	ldr	r4, [pc, #28]	; (d86c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
    d850:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
    d852:	687b      	ldr	r3, [r7, #4]
    d854:	6d99      	ldr	r1, [r3, #88]	; 0x58
    d856:	2300      	movs	r3, #0
    d858:	9300      	str	r3, [sp, #0]
    d85a:	23ff      	movs	r3, #255	; 0xff
    d85c:	2202      	movs	r2, #2
    d85e:	6878      	ldr	r0, [r7, #4]
    d860:	4c02      	ldr	r4, [pc, #8]	; (d86c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
    d862:	47a0      	blx	r4
}
    d864:	bf00      	nop
    d866:	370c      	adds	r7, #12
    d868:	46bd      	mov	sp, r7
    d86a:	bd90      	pop	{r4, r7, pc}
    d86c:	0000d6e5 	.word	0x0000d6e5

0000d870 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
    d870:	b580      	push	{r7, lr}
    d872:	b082      	sub	sp, #8
    d874:	af00      	add	r7, sp, #0
    d876:	6078      	str	r0, [r7, #4]
	process_finished = 0;
    d878:	687b      	ldr	r3, [r7, #4]
    d87a:	2200      	movs	r2, #0
    d87c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
    d880:	687b      	ldr	r3, [r7, #4]
    d882:	2200      	movs	r2, #0
    d884:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
    d886:	4a31      	ldr	r2, [pc, #196]	; (d94c <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
    d888:	687b      	ldr	r3, [r7, #4]
    d88a:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
    d88c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d890:	492f      	ldr	r1, [pc, #188]	; (d950 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
    d892:	4830      	ldr	r0, [pc, #192]	; (d954 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
    d894:	4b30      	ldr	r3, [pc, #192]	; (d958 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
    d896:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
    d898:	687b      	ldr	r3, [r7, #4]
    d89a:	79db      	ldrb	r3, [r3, #7]
    d89c:	2b01      	cmp	r3, #1
    d89e:	d009      	beq.n	d8b4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
    d8a0:	687b      	ldr	r3, [r7, #4]
    d8a2:	789b      	ldrb	r3, [r3, #2]
    d8a4:	b2db      	uxtb	r3, r3
    d8a6:	f083 0301 	eor.w	r3, r3, #1
    d8aa:	b2db      	uxtb	r3, r3
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d001      	beq.n	d8b4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
    d8b0:	2301      	movs	r3, #1
    d8b2:	e000      	b.n	d8b6 <_ZN13LTC2983_Class8SelfTestEv+0x46>
    d8b4:	2300      	movs	r3, #0
    d8b6:	2b00      	cmp	r3, #0
    d8b8:	d034      	beq.n	d924 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
    d8ba:	2100      	movs	r1, #0
    d8bc:	6878      	ldr	r0, [r7, #4]
    d8be:	4b27      	ldr	r3, [pc, #156]	; (d95c <_ZN13LTC2983_Class8SelfTestEv+0xec>)
    d8c0:	4798      	blx	r3
		delay_ms(1);
    d8c2:	2001      	movs	r0, #1
    d8c4:	4b26      	ldr	r3, [pc, #152]	; (d960 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
    d8c6:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
    d8c8:	687b      	ldr	r3, [r7, #4]
    d8ca:	781b      	ldrb	r3, [r3, #0]
    d8cc:	b2db      	uxtb	r3, r3
    d8ce:	f083 0301 	eor.w	r3, r3, #1
    d8d2:	b2db      	uxtb	r3, r3
    d8d4:	2b00      	cmp	r3, #0
    d8d6:	d009      	beq.n	d8ec <_ZN13LTC2983_Class8SelfTestEv+0x7c>
    d8d8:	687b      	ldr	r3, [r7, #4]
    d8da:	789b      	ldrb	r3, [r3, #2]
    d8dc:	b2db      	uxtb	r3, r3
    d8de:	f083 0301 	eor.w	r3, r3, #1
    d8e2:	b2db      	uxtb	r3, r3
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	d001      	beq.n	d8ec <_ZN13LTC2983_Class8SelfTestEv+0x7c>
    d8e8:	2301      	movs	r3, #1
    d8ea:	e000      	b.n	d8ee <_ZN13LTC2983_Class8SelfTestEv+0x7e>
    d8ec:	2300      	movs	r3, #0
    d8ee:	2b00      	cmp	r3, #0
    d8f0:	d000      	beq.n	d8f4 <_ZN13LTC2983_Class8SelfTestEv+0x84>
    d8f2:	e7e9      	b.n	d8c8 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
    d8f4:	687b      	ldr	r3, [r7, #4]
    d8f6:	789b      	ldrb	r3, [r3, #2]
    d8f8:	b2db      	uxtb	r3, r3
    d8fa:	f083 0301 	eor.w	r3, r3, #1
    d8fe:	b2db      	uxtb	r3, r3
    d900:	2b00      	cmp	r3, #0
    d902:	d0c9      	beq.n	d898 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
    d904:	687b      	ldr	r3, [r7, #4]
    d906:	781b      	ldrb	r3, [r3, #0]
    d908:	b2db      	uxtb	r3, r3
    d90a:	2b00      	cmp	r3, #0
    d90c:	d006      	beq.n	d91c <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
    d90e:	687b      	ldr	r3, [r7, #4]
    d910:	78db      	ldrb	r3, [r3, #3]
    d912:	4619      	mov	r1, r3
    d914:	6878      	ldr	r0, [r7, #4]
    d916:	4b13      	ldr	r3, [pc, #76]	; (d964 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
    d918:	4798      	blx	r3
    d91a:	e7bd      	b.n	d898 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
    d91c:	2001      	movs	r0, #1
    d91e:	4b10      	ldr	r3, [pc, #64]	; (d960 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
    d920:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
    d922:	e7b9      	b.n	d898 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
    d924:	490a      	ldr	r1, [pc, #40]	; (d950 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
    d926:	480b      	ldr	r0, [pc, #44]	; (d954 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
    d928:	4b0f      	ldr	r3, [pc, #60]	; (d968 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
    d92a:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
    d92c:	687b      	ldr	r3, [r7, #4]
    d92e:	79db      	ldrb	r3, [r3, #7]
    d930:	2b01      	cmp	r3, #1
    d932:	bf0c      	ite	eq
    d934:	2301      	moveq	r3, #1
    d936:	2300      	movne	r3, #0
    d938:	b2da      	uxtb	r2, r3
    d93a:	687b      	ldr	r3, [r7, #4]
    d93c:	771a      	strb	r2, [r3, #28]
	return	isOK;
    d93e:	687b      	ldr	r3, [r7, #4]
    d940:	7f1b      	ldrb	r3, [r3, #28]
	}
    d942:	4618      	mov	r0, r3
    d944:	3708      	adds	r7, #8
    d946:	46bd      	mov	sp, r7
    d948:	bd80      	pop	{r7, pc}
    d94a:	bf00      	nop
    d94c:	200011a4 	.word	0x200011a4
    d950:	0000d291 	.word	0x0000d291
    d954:	200010a4 	.word	0x200010a4
    d958:	0000e16d 	.word	0x0000e16d
    d95c:	0000d3cd 	.word	0x0000d3cd
    d960:	0000b08d 	.word	0x0000b08d
    d964:	0000d501 	.word	0x0000d501
    d968:	0000e115 	.word	0x0000e115

0000d96c <_Z41__static_initialization_and_destruction_0ii>:
    d96c:	b580      	push	{r7, lr}
    d96e:	b082      	sub	sp, #8
    d970:	af00      	add	r7, sp, #0
    d972:	6078      	str	r0, [r7, #4]
    d974:	6039      	str	r1, [r7, #0]
    d976:	687b      	ldr	r3, [r7, #4]
    d978:	2b01      	cmp	r3, #1
    d97a:	d14c      	bne.n	da16 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    d97c:	683b      	ldr	r3, [r7, #0]
    d97e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d982:	4293      	cmp	r3, r2
    d984:	d147      	bne.n	da16 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d986:	4926      	ldr	r1, [pc, #152]	; (da20 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    d988:	4826      	ldr	r0, [pc, #152]	; (da24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d98a:	4b27      	ldr	r3, [pc, #156]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d98c:	4798      	blx	r3
    d98e:	4a27      	ldr	r2, [pc, #156]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d990:	4927      	ldr	r1, [pc, #156]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d992:	4824      	ldr	r0, [pc, #144]	; (da24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d994:	4b27      	ldr	r3, [pc, #156]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d996:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    d998:	4927      	ldr	r1, [pc, #156]	; (da38 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d99a:	4828      	ldr	r0, [pc, #160]	; (da3c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d99c:	4b22      	ldr	r3, [pc, #136]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d99e:	4798      	blx	r3
    d9a0:	4a22      	ldr	r2, [pc, #136]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d9a2:	4923      	ldr	r1, [pc, #140]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d9a4:	4825      	ldr	r0, [pc, #148]	; (da3c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d9a6:	4b23      	ldr	r3, [pc, #140]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d9a8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    d9aa:	4925      	ldr	r1, [pc, #148]	; (da40 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d9ac:	4825      	ldr	r0, [pc, #148]	; (da44 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d9ae:	4b1e      	ldr	r3, [pc, #120]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d9b0:	4798      	blx	r3
    d9b2:	4a1e      	ldr	r2, [pc, #120]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d9b4:	491e      	ldr	r1, [pc, #120]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d9b6:	4823      	ldr	r0, [pc, #140]	; (da44 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d9b8:	4b1e      	ldr	r3, [pc, #120]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d9ba:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    d9bc:	4922      	ldr	r1, [pc, #136]	; (da48 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    d9be:	4823      	ldr	r0, [pc, #140]	; (da4c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d9c0:	4b19      	ldr	r3, [pc, #100]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d9c2:	4798      	blx	r3
    d9c4:	4a19      	ldr	r2, [pc, #100]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d9c6:	491a      	ldr	r1, [pc, #104]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d9c8:	4820      	ldr	r0, [pc, #128]	; (da4c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d9ca:	4b1a      	ldr	r3, [pc, #104]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d9cc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    d9ce:	4920      	ldr	r1, [pc, #128]	; (da50 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    d9d0:	4820      	ldr	r0, [pc, #128]	; (da54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d9d2:	4b15      	ldr	r3, [pc, #84]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d9d4:	4798      	blx	r3
    d9d6:	4a15      	ldr	r2, [pc, #84]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d9d8:	4915      	ldr	r1, [pc, #84]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d9da:	481e      	ldr	r0, [pc, #120]	; (da54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d9dc:	4b15      	ldr	r3, [pc, #84]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d9de:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    d9e0:	491d      	ldr	r1, [pc, #116]	; (da58 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    d9e2:	481e      	ldr	r0, [pc, #120]	; (da5c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d9e4:	4b10      	ldr	r3, [pc, #64]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d9e6:	4798      	blx	r3
    d9e8:	4a10      	ldr	r2, [pc, #64]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d9ea:	4911      	ldr	r1, [pc, #68]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d9ec:	481b      	ldr	r0, [pc, #108]	; (da5c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d9ee:	4b11      	ldr	r3, [pc, #68]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d9f0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    d9f2:	491b      	ldr	r1, [pc, #108]	; (da60 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    d9f4:	481b      	ldr	r0, [pc, #108]	; (da64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d9f6:	4b0c      	ldr	r3, [pc, #48]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d9f8:	4798      	blx	r3
    d9fa:	4a0c      	ldr	r2, [pc, #48]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d9fc:	490c      	ldr	r1, [pc, #48]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d9fe:	4819      	ldr	r0, [pc, #100]	; (da64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    da00:	4b0c      	ldr	r3, [pc, #48]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    da02:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    da04:	4918      	ldr	r1, [pc, #96]	; (da68 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    da06:	4819      	ldr	r0, [pc, #100]	; (da6c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    da08:	4b07      	ldr	r3, [pc, #28]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    da0a:	4798      	blx	r3
    da0c:	4a07      	ldr	r2, [pc, #28]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    da0e:	4908      	ldr	r1, [pc, #32]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    da10:	4816      	ldr	r0, [pc, #88]	; (da6c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    da12:	4b08      	ldr	r3, [pc, #32]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    da14:	4798      	blx	r3
    da16:	bf00      	nop
    da18:	3708      	adds	r7, #8
    da1a:	46bd      	mov	sp, r7
    da1c:	bd80      	pop	{r7, pc}
    da1e:	bf00      	nop
    da20:	2000a8d8 	.word	0x2000a8d8
    da24:	200010a4 	.word	0x200010a4
    da28:	0000df39 	.word	0x0000df39
    da2c:	20000000 	.word	0x20000000
    da30:	0000df71 	.word	0x0000df71
    da34:	0000fc95 	.word	0x0000fc95
    da38:	2000a96c 	.word	0x2000a96c
    da3c:	200010c4 	.word	0x200010c4
    da40:	2000aa90 	.word	0x2000aa90
    da44:	200010e4 	.word	0x200010e4
    da48:	2000a98c 	.word	0x2000a98c
    da4c:	20001104 	.word	0x20001104
    da50:	2000aa50 	.word	0x2000aa50
    da54:	20001124 	.word	0x20001124
    da58:	2000aa70 	.word	0x2000aa70
    da5c:	20001144 	.word	0x20001144
    da60:	2000a948 	.word	0x2000a948
    da64:	20001164 	.word	0x20001164
    da68:	2000a9e8 	.word	0x2000a9e8
    da6c:	20001184 	.word	0x20001184

0000da70 <_GLOBAL__sub_I_ptrLTCClass>:
    da70:	b580      	push	{r7, lr}
    da72:	af00      	add	r7, sp, #0
    da74:	f64f 71ff 	movw	r1, #65535	; 0xffff
    da78:	2001      	movs	r0, #1
    da7a:	4b01      	ldr	r3, [pc, #4]	; (da80 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
    da7c:	4798      	blx	r3
    da7e:	bd80      	pop	{r7, pc}
    da80:	0000d96d 	.word	0x0000d96d

0000da84 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    da84:	b480      	push	{r7}
    da86:	b085      	sub	sp, #20
    da88:	af00      	add	r7, sp, #0
    da8a:	60f8      	str	r0, [r7, #12]
    da8c:	460b      	mov	r3, r1
    da8e:	607a      	str	r2, [r7, #4]
    da90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    da92:	7afb      	ldrb	r3, [r7, #11]
    da94:	68fa      	ldr	r2, [r7, #12]
    da96:	01db      	lsls	r3, r3, #7
    da98:	4413      	add	r3, r2
    da9a:	3318      	adds	r3, #24
    da9c:	687a      	ldr	r2, [r7, #4]
    da9e:	601a      	str	r2, [r3, #0]
}
    daa0:	bf00      	nop
    daa2:	3714      	adds	r7, #20
    daa4:	46bd      	mov	sp, r7
    daa6:	bc80      	pop	{r7}
    daa8:	4770      	bx	lr

0000daaa <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    daaa:	b480      	push	{r7}
    daac:	b085      	sub	sp, #20
    daae:	af00      	add	r7, sp, #0
    dab0:	60f8      	str	r0, [r7, #12]
    dab2:	460b      	mov	r3, r1
    dab4:	607a      	str	r2, [r7, #4]
    dab6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    dab8:	7afb      	ldrb	r3, [r7, #11]
    daba:	68fa      	ldr	r2, [r7, #12]
    dabc:	01db      	lsls	r3, r3, #7
    dabe:	4413      	add	r3, r2
    dac0:	3314      	adds	r3, #20
    dac2:	687a      	ldr	r2, [r7, #4]
    dac4:	601a      	str	r2, [r3, #0]
}
    dac6:	bf00      	nop
    dac8:	3714      	adds	r7, #20
    daca:	46bd      	mov	sp, r7
    dacc:	bc80      	pop	{r7}
    dace:	4770      	bx	lr

0000dad0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    dad0:	b580      	push	{r7, lr}
    dad2:	b082      	sub	sp, #8
    dad4:	af00      	add	r7, sp, #0
    dad6:	4603      	mov	r3, r0
    dad8:	6039      	str	r1, [r7, #0]
    dada:	71fb      	strb	r3, [r7, #7]
    dadc:	4613      	mov	r3, r2
    dade:	71bb      	strb	r3, [r7, #6]
	if (level) {
    dae0:	79bb      	ldrb	r3, [r7, #6]
    dae2:	2b00      	cmp	r3, #0
    dae4:	d006      	beq.n	daf4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    dae6:	79fb      	ldrb	r3, [r7, #7]
    dae8:	683a      	ldr	r2, [r7, #0]
    daea:	4619      	mov	r1, r3
    daec:	4806      	ldr	r0, [pc, #24]	; (db08 <_gpio_set_level+0x38>)
    daee:	4b07      	ldr	r3, [pc, #28]	; (db0c <_gpio_set_level+0x3c>)
    daf0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    daf2:	e005      	b.n	db00 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    daf4:	79fb      	ldrb	r3, [r7, #7]
    daf6:	683a      	ldr	r2, [r7, #0]
    daf8:	4619      	mov	r1, r3
    dafa:	4803      	ldr	r0, [pc, #12]	; (db08 <_gpio_set_level+0x38>)
    dafc:	4b04      	ldr	r3, [pc, #16]	; (db10 <_gpio_set_level+0x40>)
    dafe:	4798      	blx	r3
}
    db00:	bf00      	nop
    db02:	3708      	adds	r7, #8
    db04:	46bd      	mov	sp, r7
    db06:	bd80      	pop	{r7, pc}
    db08:	41008000 	.word	0x41008000
    db0c:	0000da85 	.word	0x0000da85
    db10:	0000daab 	.word	0x0000daab

0000db14 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    db14:	b580      	push	{r7, lr}
    db16:	b082      	sub	sp, #8
    db18:	af00      	add	r7, sp, #0
    db1a:	4603      	mov	r3, r0
    db1c:	460a      	mov	r2, r1
    db1e:	71fb      	strb	r3, [r7, #7]
    db20:	4613      	mov	r3, r2
    db22:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    db24:	79fb      	ldrb	r3, [r7, #7]
    db26:	115b      	asrs	r3, r3, #5
    db28:	b2d8      	uxtb	r0, r3
    db2a:	79fb      	ldrb	r3, [r7, #7]
    db2c:	f003 031f 	and.w	r3, r3, #31
    db30:	2201      	movs	r2, #1
    db32:	fa02 f303 	lsl.w	r3, r2, r3
    db36:	79ba      	ldrb	r2, [r7, #6]
    db38:	4619      	mov	r1, r3
    db3a:	4b03      	ldr	r3, [pc, #12]	; (db48 <gpio_set_pin_level+0x34>)
    db3c:	4798      	blx	r3
}
    db3e:	bf00      	nop
    db40:	3708      	adds	r7, #8
    db42:	46bd      	mov	sp, r7
    db44:	bd80      	pop	{r7, pc}
    db46:	bf00      	nop
    db48:	0000dad1 	.word	0x0000dad1

0000db4c <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
    db4c:	b480      	push	{r7}
    db4e:	b083      	sub	sp, #12
    db50:	af00      	add	r7, sp, #0
    db52:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
    db54:	4a05      	ldr	r2, [pc, #20]	; (db6c <_ZN6LT_SPIC1Ev+0x20>)
    db56:	687b      	ldr	r3, [r7, #4]
    db58:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
    db5a:	687b      	ldr	r3, [r7, #4]
    db5c:	4a04      	ldr	r2, [pc, #16]	; (db70 <_ZN6LT_SPIC1Ev+0x24>)
    db5e:	605a      	str	r2, [r3, #4]
} //LT_SPI
    db60:	687b      	ldr	r3, [r7, #4]
    db62:	4618      	mov	r0, r3
    db64:	370c      	adds	r7, #12
    db66:	46bd      	mov	sp, r7
    db68:	bc80      	pop	{r7}
    db6a:	4770      	bx	lr
    db6c:	200011a8 	.word	0x200011a8
    db70:	200011ac 	.word	0x200011ac

0000db74 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
    db74:	b480      	push	{r7}
    db76:	b083      	sub	sp, #12
    db78:	af00      	add	r7, sp, #0
    db7a:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
    db7c:	687b      	ldr	r3, [r7, #4]
    db7e:	4618      	mov	r0, r3
    db80:	370c      	adds	r7, #12
    db82:	46bd      	mov	sp, r7
    db84:	bc80      	pop	{r7}
    db86:	4770      	bx	lr

0000db88 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
    db88:	b580      	push	{r7, lr}
    db8a:	b082      	sub	sp, #8
    db8c:	af00      	add	r7, sp, #0
    db8e:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
    db90:	687b      	ldr	r3, [r7, #4]
    db92:	685a      	ldr	r2, [r3, #4]
    db94:	687b      	ldr	r3, [r7, #4]
    db96:	691b      	ldr	r3, [r3, #16]
    db98:	4619      	mov	r1, r3
    db9a:	4610      	mov	r0, r2
    db9c:	4b0e      	ldr	r3, [pc, #56]	; (dbd8 <_ZN6LT_SPI4initEv+0x50>)
    db9e:	4798      	blx	r3
	spiTemp->init();
    dba0:	687b      	ldr	r3, [r7, #4]
    dba2:	685b      	ldr	r3, [r3, #4]
    dba4:	4618      	mov	r0, r3
    dba6:	4b0d      	ldr	r3, [pc, #52]	; (dbdc <_ZN6LT_SPI4initEv+0x54>)
    dba8:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
    dbaa:	687b      	ldr	r3, [r7, #4]
    dbac:	685b      	ldr	r3, [r3, #4]
    dbae:	685a      	ldr	r2, [r3, #4]
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
    dbb4:	687b      	ldr	r3, [r7, #4]
    dbb6:	685b      	ldr	r3, [r3, #4]
    dbb8:	689a      	ldr	r2, [r3, #8]
    dbba:	687b      	ldr	r3, [r7, #4]
    dbbc:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
    dbbe:	687b      	ldr	r3, [r7, #4]
    dbc0:	685b      	ldr	r3, [r3, #4]
    dbc2:	4618      	mov	r0, r3
    dbc4:	4b06      	ldr	r3, [pc, #24]	; (dbe0 <_ZN6LT_SPI4initEv+0x58>)
    dbc6:	4798      	blx	r3
	ready=true;
    dbc8:	687b      	ldr	r3, [r7, #4]
    dbca:	2201      	movs	r2, #1
    dbcc:	701a      	strb	r2, [r3, #0]
}
    dbce:	bf00      	nop
    dbd0:	3708      	adds	r7, #8
    dbd2:	46bd      	mov	sp, r7
    dbd4:	bd80      	pop	{r7, pc}
    dbd6:	bf00      	nop
    dbd8:	0000de31 	.word	0x0000de31
    dbdc:	0000dde9 	.word	0x0000dde9
    dbe0:	0000de55 	.word	0x0000de55

0000dbe4 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
    dbe4:	b480      	push	{r7}
    dbe6:	b083      	sub	sp, #12
    dbe8:	af00      	add	r7, sp, #0
    dbea:	6078      	str	r0, [r7, #4]
    dbec:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
    dbee:	687b      	ldr	r3, [r7, #4]
    dbf0:	683a      	ldr	r2, [r7, #0]
    dbf2:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
    dbf4:	4a03      	ldr	r2, [pc, #12]	; (dc04 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
    dbf6:	687b      	ldr	r3, [r7, #4]
    dbf8:	6013      	str	r3, [r2, #0]
}
    dbfa:	bf00      	nop
    dbfc:	370c      	adds	r7, #12
    dbfe:	46bd      	mov	sp, r7
    dc00:	bc80      	pop	{r7}
    dc02:	4770      	bx	lr
    dc04:	200011a8 	.word	0x200011a8

0000dc08 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
    dc08:	b580      	push	{r7, lr}
    dc0a:	b086      	sub	sp, #24
    dc0c:	af00      	add	r7, sp, #0
    dc0e:	60f8      	str	r0, [r7, #12]
    dc10:	60b9      	str	r1, [r7, #8]
    dc12:	607a      	str	r2, [r7, #4]
    dc14:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
    dc1c:	68b9      	ldr	r1, [r7, #8]
    dc1e:	68f8      	ldr	r0, [r7, #12]
    dc20:	4b25      	ldr	r3, [pc, #148]	; (dcb8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
    dc22:	4798      	blx	r3
	
	switch(rOrw){
    dc24:	7dfb      	ldrb	r3, [r7, #23]
    dc26:	2b02      	cmp	r3, #2
    dc28:	d002      	beq.n	dc30 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
    dc2a:	2b03      	cmp	r3, #3
    dc2c:	d009      	beq.n	dc42 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
    dc2e:	e028      	b.n	dc82 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
    dc30:	68fb      	ldr	r3, [r7, #12]
    dc32:	685b      	ldr	r3, [r3, #4]
    dc34:	f897 2020 	ldrb.w	r2, [r7, #32]
    dc38:	6879      	ldr	r1, [r7, #4]
    dc3a:	4618      	mov	r0, r3
    dc3c:	4b1f      	ldr	r3, [pc, #124]	; (dcbc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    dc3e:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
    dc40:	e031      	b.n	dca6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
    dc42:	68fb      	ldr	r3, [r7, #12]
    dc44:	685b      	ldr	r3, [r3, #4]
    dc46:	2203      	movs	r2, #3
    dc48:	6879      	ldr	r1, [r7, #4]
    dc4a:	4618      	mov	r0, r3
    dc4c:	4b1b      	ldr	r3, [pc, #108]	; (dcbc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    dc4e:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
    dc50:	f897 3020 	ldrb.w	r3, [r7, #32]
    dc54:	2b04      	cmp	r3, #4
    dc56:	dd0b      	ble.n	dc70 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
    dc58:	68fb      	ldr	r3, [r7, #12]
    dc5a:	6858      	ldr	r0, [r3, #4]
    dc5c:	f897 3020 	ldrb.w	r3, [r7, #32]
    dc60:	3b03      	subs	r3, #3
    dc62:	461a      	mov	r2, r3
    dc64:	6839      	ldr	r1, [r7, #0]
    dc66:	4b16      	ldr	r3, [pc, #88]	; (dcc0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    dc68:	4798      	blx	r3
					asm("nop");
    dc6a:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
    dc6c:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
    dc6e:	e01a      	b.n	dca6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
    dc70:	68fb      	ldr	r3, [r7, #12]
    dc72:	685b      	ldr	r3, [r3, #4]
    dc74:	2201      	movs	r2, #1
    dc76:	6839      	ldr	r1, [r7, #0]
    dc78:	4618      	mov	r0, r3
    dc7a:	4b11      	ldr	r3, [pc, #68]	; (dcc0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    dc7c:	4798      	blx	r3
				asm("nop");
    dc7e:	bf00      	nop
			break;
    dc80:	e011      	b.n	dca6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
    dc82:	68fb      	ldr	r3, [r7, #12]
    dc84:	685b      	ldr	r3, [r3, #4]
    dc86:	f897 2020 	ldrb.w	r2, [r7, #32]
    dc8a:	6879      	ldr	r1, [r7, #4]
    dc8c:	4618      	mov	r0, r3
    dc8e:	4b0b      	ldr	r3, [pc, #44]	; (dcbc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
    dc90:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
    dc92:	68fb      	ldr	r3, [r7, #12]
    dc94:	6858      	ldr	r0, [r3, #4]
    dc96:	f897 3020 	ldrb.w	r3, [r7, #32]
    dc9a:	3b03      	subs	r3, #3
    dc9c:	461a      	mov	r2, r3
    dc9e:	6839      	ldr	r1, [r7, #0]
    dca0:	4b07      	ldr	r3, [pc, #28]	; (dcc0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
    dca2:	4798      	blx	r3
			break;
    dca4:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
    dca6:	68b9      	ldr	r1, [r7, #8]
    dca8:	68f8      	ldr	r0, [r7, #12]
    dcaa:	4b06      	ldr	r3, [pc, #24]	; (dcc4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
    dcac:	4798      	blx	r3
	asm("nop");
    dcae:	bf00      	nop
	
}
    dcb0:	bf00      	nop
    dcb2:	3718      	adds	r7, #24
    dcb4:	46bd      	mov	sp, r7
    dcb6:	bd80      	pop	{r7, pc}
    dcb8:	0000dcc9 	.word	0x0000dcc9
    dcbc:	0000de91 	.word	0x0000de91
    dcc0:	0000ded5 	.word	0x0000ded5
    dcc4:	0000dd11 	.word	0x0000dd11

0000dcc8 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
    dcc8:	b580      	push	{r7, lr}
    dcca:	b082      	sub	sp, #8
    dccc:	af00      	add	r7, sp, #0
    dcce:	6078      	str	r0, [r7, #4]
    dcd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    dcd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    dcd6:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
    dcd8:	683b      	ldr	r3, [r7, #0]
    dcda:	b2db      	uxtb	r3, r3
    dcdc:	2100      	movs	r1, #0
    dcde:	4618      	mov	r0, r3
    dce0:	4b08      	ldr	r3, [pc, #32]	; (dd04 <_ZN6LT_SPI4OpenEm+0x3c>)
    dce2:	4798      	blx	r3
	 delay_us(10);
    dce4:	200a      	movs	r0, #10
    dce6:	4b08      	ldr	r3, [pc, #32]	; (dd08 <_ZN6LT_SPI4OpenEm+0x40>)
    dce8:	4798      	blx	r3
	spiTemp->Enable();
    dcea:	687b      	ldr	r3, [r7, #4]
    dcec:	685b      	ldr	r3, [r3, #4]
    dcee:	4618      	mov	r0, r3
    dcf0:	4b06      	ldr	r3, [pc, #24]	; (dd0c <_ZN6LT_SPI4OpenEm+0x44>)
    dcf2:	4798      	blx	r3
	 delay_us(10);
    dcf4:	200a      	movs	r0, #10
    dcf6:	4b04      	ldr	r3, [pc, #16]	; (dd08 <_ZN6LT_SPI4OpenEm+0x40>)
    dcf8:	4798      	blx	r3
 }
    dcfa:	bf00      	nop
    dcfc:	3708      	adds	r7, #8
    dcfe:	46bd      	mov	sp, r7
    dd00:	bd80      	pop	{r7, pc}
    dd02:	bf00      	nop
    dd04:	0000db15 	.word	0x0000db15
    dd08:	0000b059 	.word	0x0000b059
    dd0c:	0000de55 	.word	0x0000de55

0000dd10 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
    dd10:	b580      	push	{r7, lr}
    dd12:	b082      	sub	sp, #8
    dd14:	af00      	add	r7, sp, #0
    dd16:	6078      	str	r0, [r7, #4]
    dd18:	6039      	str	r1, [r7, #0]

	  delay_us(10);
    dd1a:	200a      	movs	r0, #10
    dd1c:	4b0b      	ldr	r3, [pc, #44]	; (dd4c <_ZN6LT_SPI5CloseEm+0x3c>)
    dd1e:	4798      	blx	r3
	 spiTemp->Disable();
    dd20:	687b      	ldr	r3, [r7, #4]
    dd22:	685b      	ldr	r3, [r3, #4]
    dd24:	4618      	mov	r0, r3
    dd26:	4b0a      	ldr	r3, [pc, #40]	; (dd50 <_ZN6LT_SPI5CloseEm+0x40>)
    dd28:	4798      	blx	r3
	delay_us(10);
    dd2a:	200a      	movs	r0, #10
    dd2c:	4b07      	ldr	r3, [pc, #28]	; (dd4c <_ZN6LT_SPI5CloseEm+0x3c>)
    dd2e:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
    dd30:	683b      	ldr	r3, [r7, #0]
    dd32:	b2db      	uxtb	r3, r3
    dd34:	2101      	movs	r1, #1
    dd36:	4618      	mov	r0, r3
    dd38:	4b06      	ldr	r3, [pc, #24]	; (dd54 <_ZN6LT_SPI5CloseEm+0x44>)
    dd3a:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
    dd3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dd40:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
    dd42:	bf00      	nop
    dd44:	3708      	adds	r7, #8
    dd46:	46bd      	mov	sp, r7
    dd48:	bd80      	pop	{r7, pc}
    dd4a:	bf00      	nop
    dd4c:	0000b059 	.word	0x0000b059
    dd50:	0000df19 	.word	0x0000df19
    dd54:	0000db15 	.word	0x0000db15

0000dd58 <_Z41__static_initialization_and_destruction_0ii>:
    dd58:	b580      	push	{r7, lr}
    dd5a:	b082      	sub	sp, #8
    dd5c:	af00      	add	r7, sp, #0
    dd5e:	6078      	str	r0, [r7, #4]
    dd60:	6039      	str	r1, [r7, #0]
    dd62:	687b      	ldr	r3, [r7, #4]
    dd64:	2b01      	cmp	r3, #1
    dd66:	d10c      	bne.n	dd82 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dd68:	683b      	ldr	r3, [r7, #0]
    dd6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd6e:	4293      	cmp	r3, r2
    dd70:	d107      	bne.n	dd82 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
    dd72:	4806      	ldr	r0, [pc, #24]	; (dd8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dd74:	4b06      	ldr	r3, [pc, #24]	; (dd90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dd76:	4798      	blx	r3
    dd78:	4a06      	ldr	r2, [pc, #24]	; (dd94 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dd7a:	4907      	ldr	r1, [pc, #28]	; (dd98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dd7c:	4803      	ldr	r0, [pc, #12]	; (dd8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dd7e:	4b07      	ldr	r3, [pc, #28]	; (dd9c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dd80:	4798      	blx	r3
    dd82:	bf00      	nop
    dd84:	3708      	adds	r7, #8
    dd86:	46bd      	mov	sp, r7
    dd88:	bd80      	pop	{r7, pc}
    dd8a:	bf00      	nop
    dd8c:	200011ac 	.word	0x200011ac
    dd90:	0000ddb5 	.word	0x0000ddb5
    dd94:	20000000 	.word	0x20000000
    dd98:	0000ddd5 	.word	0x0000ddd5
    dd9c:	0000fc95 	.word	0x0000fc95

0000dda0 <_GLOBAL__sub_I_ptrLTSPIClass>:
    dda0:	b580      	push	{r7, lr}
    dda2:	af00      	add	r7, sp, #0
    dda4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dda8:	2001      	movs	r0, #1
    ddaa:	4b01      	ldr	r3, [pc, #4]	; (ddb0 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
    ddac:	4798      	blx	r3
    ddae:	bd80      	pop	{r7, pc}
    ddb0:	0000dd59 	.word	0x0000dd59

0000ddb4 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    ddb4:	b480      	push	{r7}
    ddb6:	b083      	sub	sp, #12
    ddb8:	af00      	add	r7, sp, #0
    ddba:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    ddbc:	4a04      	ldr	r2, [pc, #16]	; (ddd0 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    ddbe:	687b      	ldr	r3, [r7, #4]
    ddc0:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	4618      	mov	r0, r3
    ddc6:	370c      	adds	r7, #12
    ddc8:	46bd      	mov	sp, r7
    ddca:	bc80      	pop	{r7}
    ddcc:	4770      	bx	lr
    ddce:	bf00      	nop
    ddd0:	200011c8 	.word	0x200011c8

0000ddd4 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    ddd4:	b480      	push	{r7}
    ddd6:	b083      	sub	sp, #12
    ddd8:	af00      	add	r7, sp, #0
    ddda:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    dddc:	687b      	ldr	r3, [r7, #4]
    ddde:	4618      	mov	r0, r3
    dde0:	370c      	adds	r7, #12
    dde2:	46bd      	mov	sp, r7
    dde4:	bc80      	pop	{r7}
    dde6:	4770      	bx	lr

0000dde8 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    dde8:	b580      	push	{r7, lr}
    ddea:	b082      	sub	sp, #8
    ddec:	af00      	add	r7, sp, #0
    ddee:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    ddf0:	687b      	ldr	r3, [r7, #4]
    ddf2:	68da      	ldr	r2, [r3, #12]
    ddf4:	687b      	ldr	r3, [r7, #4]
    ddf6:	3310      	adds	r3, #16
    ddf8:	4619      	mov	r1, r3
    ddfa:	4610      	mov	r0, r2
    ddfc:	4b09      	ldr	r3, [pc, #36]	; (de24 <_ZN13SPI_Syn_Class4initEv+0x3c>)
    ddfe:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    de00:	687b      	ldr	r3, [r7, #4]
    de02:	68db      	ldr	r3, [r3, #12]
    de04:	4618      	mov	r0, r3
    de06:	4b08      	ldr	r3, [pc, #32]	; (de28 <_ZN13SPI_Syn_Class4initEv+0x40>)
    de08:	4798      	blx	r3
		txBuffer=txStaticBuffer;
    de0a:	687b      	ldr	r3, [r7, #4]
    de0c:	4a07      	ldr	r2, [pc, #28]	; (de2c <_ZN13SPI_Syn_Class4initEv+0x44>)
    de0e:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
    de10:	687b      	ldr	r3, [r7, #4]
    de12:	4a06      	ldr	r2, [pc, #24]	; (de2c <_ZN13SPI_Syn_Class4initEv+0x44>)
    de14:	609a      	str	r2, [r3, #8]
	ready=true;
    de16:	687b      	ldr	r3, [r7, #4]
    de18:	2201      	movs	r2, #1
    de1a:	701a      	strb	r2, [r3, #0]
	
}
    de1c:	bf00      	nop
    de1e:	3708      	adds	r7, #8
    de20:	46bd      	mov	sp, r7
    de22:	bd80      	pop	{r7, pc}
    de24:	0000299d 	.word	0x0000299d
    de28:	00002811 	.word	0x00002811
    de2c:	200011cc 	.word	0x200011cc

0000de30 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
    de30:	b480      	push	{r7}
    de32:	b083      	sub	sp, #12
    de34:	af00      	add	r7, sp, #0
    de36:	6078      	str	r0, [r7, #4]
    de38:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    de3a:	4a05      	ldr	r2, [pc, #20]	; (de50 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
    de3c:	687b      	ldr	r3, [r7, #4]
    de3e:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
    de40:	687b      	ldr	r3, [r7, #4]
    de42:	683a      	ldr	r2, [r7, #0]
    de44:	60da      	str	r2, [r3, #12]
}
    de46:	bf00      	nop
    de48:	370c      	adds	r7, #12
    de4a:	46bd      	mov	sp, r7
    de4c:	bc80      	pop	{r7}
    de4e:	4770      	bx	lr
    de50:	200011c8 	.word	0x200011c8

0000de54 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
    de54:	b580      	push	{r7, lr}
    de56:	b082      	sub	sp, #8
    de58:	af00      	add	r7, sp, #0
    de5a:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    de5c:	687b      	ldr	r3, [r7, #4]
    de5e:	68da      	ldr	r2, [r3, #12]
    de60:	687b      	ldr	r3, [r7, #4]
    de62:	3310      	adds	r3, #16
    de64:	4619      	mov	r1, r3
    de66:	4610      	mov	r0, r2
    de68:	4b07      	ldr	r3, [pc, #28]	; (de88 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    de6a:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    de6c:	687b      	ldr	r3, [r7, #4]
    de6e:	68db      	ldr	r3, [r3, #12]
    de70:	4618      	mov	r0, r3
    de72:	4b06      	ldr	r3, [pc, #24]	; (de8c <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    de74:	4798      	blx	r3
	ready=true;
    de76:	687b      	ldr	r3, [r7, #4]
    de78:	2201      	movs	r2, #1
    de7a:	701a      	strb	r2, [r3, #0]
	return 0;
    de7c:	2300      	movs	r3, #0
}
    de7e:	4618      	mov	r0, r3
    de80:	3708      	adds	r7, #8
    de82:	46bd      	mov	sp, r7
    de84:	bd80      	pop	{r7, pc}
    de86:	bf00      	nop
    de88:	0000299d 	.word	0x0000299d
    de8c:	00002811 	.word	0x00002811

0000de90 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    de90:	b580      	push	{r7, lr}
    de92:	b086      	sub	sp, #24
    de94:	af00      	add	r7, sp, #0
    de96:	60f8      	str	r0, [r7, #12]
    de98:	60b9      	str	r1, [r7, #8]
    de9a:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    de9c:	68fb      	ldr	r3, [r7, #12]
    de9e:	2201      	movs	r2, #1
    dea0:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    dea2:	68fb      	ldr	r3, [r7, #12]
    dea4:	691b      	ldr	r3, [r3, #16]
    dea6:	687a      	ldr	r2, [r7, #4]
    dea8:	b292      	uxth	r2, r2
    deaa:	68b9      	ldr	r1, [r7, #8]
    deac:	4618      	mov	r0, r3
    deae:	4b08      	ldr	r3, [pc, #32]	; (ded0 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    deb0:	4798      	blx	r3
    deb2:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    deb4:	697b      	ldr	r3, [r7, #20]
    deb6:	2b00      	cmp	r3, #0
    deb8:	bf14      	ite	ne
    deba:	2301      	movne	r3, #1
    debc:	2300      	moveq	r3, #0
    debe:	b2da      	uxtb	r2, r3
    dec0:	68fb      	ldr	r3, [r7, #12]
    dec2:	761a      	strb	r2, [r3, #24]
	 return w;
    dec4:	697b      	ldr	r3, [r7, #20]
	
}
    dec6:	4618      	mov	r0, r3
    dec8:	3718      	adds	r7, #24
    deca:	46bd      	mov	sp, r7
    decc:	bd80      	pop	{r7, pc}
    dece:	bf00      	nop
    ded0:	0000f58d 	.word	0x0000f58d

0000ded4 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    ded4:	b580      	push	{r7, lr}
    ded6:	b086      	sub	sp, #24
    ded8:	af00      	add	r7, sp, #0
    deda:	60f8      	str	r0, [r7, #12]
    dedc:	60b9      	str	r1, [r7, #8]
    dede:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    dee0:	68fb      	ldr	r3, [r7, #12]
    dee2:	2201      	movs	r2, #1
    dee4:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    dee6:	68fb      	ldr	r3, [r7, #12]
    dee8:	691b      	ldr	r3, [r3, #16]
    deea:	687a      	ldr	r2, [r7, #4]
    deec:	b292      	uxth	r2, r2
    deee:	68b9      	ldr	r1, [r7, #8]
    def0:	4618      	mov	r0, r3
    def2:	4b08      	ldr	r3, [pc, #32]	; (df14 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    def4:	4798      	blx	r3
    def6:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    def8:	697b      	ldr	r3, [r7, #20]
    defa:	2b00      	cmp	r3, #0
    defc:	bf14      	ite	ne
    defe:	2301      	movne	r3, #1
    df00:	2300      	moveq	r3, #0
    df02:	b2da      	uxtb	r2, r3
    df04:	68fb      	ldr	r3, [r7, #12]
    df06:	765a      	strb	r2, [r3, #25]
	return  r;
    df08:	697b      	ldr	r3, [r7, #20]
}
    df0a:	4618      	mov	r0, r3
    df0c:	3718      	adds	r7, #24
    df0e:	46bd      	mov	sp, r7
    df10:	bd80      	pop	{r7, pc}
    df12:	bf00      	nop
    df14:	0000f5dd 	.word	0x0000f5dd

0000df18 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    df18:	b580      	push	{r7, lr}
    df1a:	b082      	sub	sp, #8
    df1c:	af00      	add	r7, sp, #0
    df1e:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    df20:	687b      	ldr	r3, [r7, #4]
    df22:	68db      	ldr	r3, [r3, #12]
    df24:	4618      	mov	r0, r3
    df26:	4b03      	ldr	r3, [pc, #12]	; (df34 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    df28:	4798      	blx	r3
	
}
    df2a:	bf00      	nop
    df2c:	3708      	adds	r7, #8
    df2e:	46bd      	mov	sp, r7
    df30:	bd80      	pop	{r7, pc}
    df32:	bf00      	nop
    df34:	0000284d 	.word	0x0000284d

0000df38 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    df38:	b480      	push	{r7}
    df3a:	b083      	sub	sp, #12
    df3c:	af00      	add	r7, sp, #0
    df3e:	6078      	str	r0, [r7, #4]
    df40:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    df42:	687b      	ldr	r3, [r7, #4]
    df44:	683a      	ldr	r2, [r7, #0]
    df46:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    df48:	687b      	ldr	r3, [r7, #4]
    df4a:	68db      	ldr	r3, [r3, #12]
    df4c:	2200      	movs	r2, #0
    df4e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    df50:	4a06      	ldr	r2, [pc, #24]	; (df6c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    df52:	687b      	ldr	r3, [r7, #4]
    df54:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    df56:	687b      	ldr	r3, [r7, #4]
    df58:	f44f 6280 	mov.w	r2, #1024	; 0x400
    df5c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    df5e:	687b      	ldr	r3, [r7, #4]
    df60:	4618      	mov	r0, r3
    df62:	370c      	adds	r7, #12
    df64:	46bd      	mov	sp, r7
    df66:	bc80      	pop	{r7}
    df68:	4770      	bx	lr
    df6a:	bf00      	nop
    df6c:	2000130c 	.word	0x2000130c

0000df70 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    df70:	b480      	push	{r7}
    df72:	b083      	sub	sp, #12
    df74:	af00      	add	r7, sp, #0
    df76:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    df78:	687b      	ldr	r3, [r7, #4]
    df7a:	2200      	movs	r2, #0
    df7c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    df7e:	687b      	ldr	r3, [r7, #4]
    df80:	4618      	mov	r0, r3
    df82:	370c      	adds	r7, #12
    df84:	46bd      	mov	sp, r7
    df86:	bc80      	pop	{r7}
    df88:	4770      	bx	lr
	...

0000df8c <_ZL9InitArrayv>:


static void InitArray(){
    df8c:	b480      	push	{r7}
    df8e:	b083      	sub	sp, #12
    df90:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    df92:	2301      	movs	r3, #1
    df94:	607b      	str	r3, [r7, #4]
    df96:	687b      	ldr	r3, [r7, #4]
    df98:	2b1f      	cmp	r3, #31
    df9a:	dc34      	bgt.n	e006 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    df9c:	491e      	ldr	r1, [pc, #120]	; (e018 <_ZL9InitArrayv+0x8c>)
    df9e:	687a      	ldr	r2, [r7, #4]
    dfa0:	4613      	mov	r3, r2
    dfa2:	009b      	lsls	r3, r3, #2
    dfa4:	4413      	add	r3, r2
    dfa6:	009b      	lsls	r3, r3, #2
    dfa8:	440b      	add	r3, r1
    dfaa:	2200      	movs	r2, #0
    dfac:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    dfae:	491a      	ldr	r1, [pc, #104]	; (e018 <_ZL9InitArrayv+0x8c>)
    dfb0:	687a      	ldr	r2, [r7, #4]
    dfb2:	4613      	mov	r3, r2
    dfb4:	009b      	lsls	r3, r3, #2
    dfb6:	4413      	add	r3, r2
    dfb8:	009b      	lsls	r3, r3, #2
    dfba:	440b      	add	r3, r1
    dfbc:	330c      	adds	r3, #12
    dfbe:	2200      	movs	r2, #0
    dfc0:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    dfc2:	687b      	ldr	r3, [r7, #4]
    dfc4:	1e5a      	subs	r2, r3, #1
    dfc6:	6879      	ldr	r1, [r7, #4]
    dfc8:	460b      	mov	r3, r1
    dfca:	009b      	lsls	r3, r3, #2
    dfcc:	440b      	add	r3, r1
    dfce:	009b      	lsls	r3, r3, #2
    dfd0:	4911      	ldr	r1, [pc, #68]	; (e018 <_ZL9InitArrayv+0x8c>)
    dfd2:	4419      	add	r1, r3
    dfd4:	4810      	ldr	r0, [pc, #64]	; (e018 <_ZL9InitArrayv+0x8c>)
    dfd6:	4613      	mov	r3, r2
    dfd8:	009b      	lsls	r3, r3, #2
    dfda:	4413      	add	r3, r2
    dfdc:	009b      	lsls	r3, r3, #2
    dfde:	4403      	add	r3, r0
    dfe0:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    dfe2:	4a0e      	ldr	r2, [pc, #56]	; (e01c <_ZL9InitArrayv+0x90>)
    dfe4:	687b      	ldr	r3, [r7, #4]
    dfe6:	2100      	movs	r1, #0
    dfe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    dfec:	687b      	ldr	r3, [r7, #4]
    dfee:	3b01      	subs	r3, #1
    dff0:	687a      	ldr	r2, [r7, #4]
    dff2:	0092      	lsls	r2, r2, #2
    dff4:	4909      	ldr	r1, [pc, #36]	; (e01c <_ZL9InitArrayv+0x90>)
    dff6:	440a      	add	r2, r1
    dff8:	4908      	ldr	r1, [pc, #32]	; (e01c <_ZL9InitArrayv+0x90>)
    dffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    dffe:	687b      	ldr	r3, [r7, #4]
    e000:	3301      	adds	r3, #1
    e002:	607b      	str	r3, [r7, #4]
    e004:	e7c7      	b.n	df96 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    e006:	4b06      	ldr	r3, [pc, #24]	; (e020 <_ZL9InitArrayv+0x94>)
    e008:	2201      	movs	r2, #1
    e00a:	701a      	strb	r2, [r3, #0]
		
}
    e00c:	bf00      	nop
    e00e:	370c      	adds	r7, #12
    e010:	46bd      	mov	sp, r7
    e012:	bc80      	pop	{r7}
    e014:	4770      	bx	lr
    e016:	bf00      	nop
    e018:	20001310 	.word	0x20001310
    e01c:	20001590 	.word	0x20001590
    e020:	20001610 	.word	0x20001610

0000e024 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    e024:	b580      	push	{r7, lr}
    e026:	b082      	sub	sp, #8
    e028:	af00      	add	r7, sp, #0
    e02a:	6078      	str	r0, [r7, #4]
	ticks=0;
    e02c:	687b      	ldr	r3, [r7, #4]
    e02e:	2200      	movs	r2, #0
    e030:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    e032:	4b0d      	ldr	r3, [pc, #52]	; (e068 <_ZN11Timer_Class4InitEv+0x44>)
    e034:	781b      	ldrb	r3, [r3, #0]
    e036:	f083 0301 	eor.w	r3, r3, #1
    e03a:	b2db      	uxtb	r3, r3
    e03c:	2b00      	cmp	r3, #0
    e03e:	d001      	beq.n	e044 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    e040:	4b0a      	ldr	r3, [pc, #40]	; (e06c <_ZN11Timer_Class4InitEv+0x48>)
    e042:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    e044:	6878      	ldr	r0, [r7, #4]
    e046:	4b0a      	ldr	r3, [pc, #40]	; (e070 <_ZN11Timer_Class4InitEv+0x4c>)
    e048:	4798      	blx	r3
    e04a:	4603      	mov	r3, r0
    e04c:	2b00      	cmp	r3, #0
    e04e:	bf0c      	ite	eq
    e050:	2301      	moveq	r3, #1
    e052:	2300      	movne	r3, #0
    e054:	b2da      	uxtb	r2, r3
    e056:	687b      	ldr	r3, [r7, #4]
    e058:	709a      	strb	r2, [r3, #2]
	return isOK;
    e05a:	687b      	ldr	r3, [r7, #4]
    e05c:	789b      	ldrb	r3, [r3, #2]
    e05e:	b2db      	uxtb	r3, r3
}
    e060:	4618      	mov	r0, r3
    e062:	3708      	adds	r7, #8
    e064:	46bd      	mov	sp, r7
    e066:	bd80      	pop	{r7, pc}
    e068:	20001610 	.word	0x20001610
    e06c:	0000df8d 	.word	0x0000df8d
    e070:	0000e075 	.word	0x0000e075

0000e074 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    e074:	b580      	push	{r7, lr}
    e076:	b084      	sub	sp, #16
    e078:	af00      	add	r7, sp, #0
    e07a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e07c:	687b      	ldr	r3, [r7, #4]
    e07e:	68db      	ldr	r3, [r3, #12]
    e080:	4618      	mov	r0, r3
    e082:	4b04      	ldr	r3, [pc, #16]	; (e094 <_ZN11Timer_Class5StartEv+0x20>)
    e084:	4798      	blx	r3
    e086:	60f8      	str	r0, [r7, #12]
	return status;
    e088:	68fb      	ldr	r3, [r7, #12]
	
}
    e08a:	4618      	mov	r0, r3
    e08c:	3710      	adds	r7, #16
    e08e:	46bd      	mov	sp, r7
    e090:	bd80      	pop	{r7, pc}
    e092:	bf00      	nop
    e094:	00002a8d 	.word	0x00002a8d

0000e098 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    e098:	b580      	push	{r7, lr}
    e09a:	b084      	sub	sp, #16
    e09c:	af00      	add	r7, sp, #0
    e09e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	68db      	ldr	r3, [r3, #12]
    e0a4:	4618      	mov	r0, r3
    e0a6:	4b05      	ldr	r3, [pc, #20]	; (e0bc <_ZN11Timer_Class4StopEv+0x24>)
    e0a8:	4798      	blx	r3
    e0aa:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e0ac:	687b      	ldr	r3, [r7, #4]
    e0ae:	2200      	movs	r2, #0
    e0b0:	705a      	strb	r2, [r3, #1]
	return status;
    e0b2:	68fb      	ldr	r3, [r7, #12]
}
    e0b4:	4618      	mov	r0, r3
    e0b6:	3710      	adds	r7, #16
    e0b8:	46bd      	mov	sp, r7
    e0ba:	bd80      	pop	{r7, pc}
    e0bc:	00002af5 	.word	0x00002af5

0000e0c0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e0c0:	b580      	push	{r7, lr}
    e0c2:	b086      	sub	sp, #24
    e0c4:	af00      	add	r7, sp, #0
    e0c6:	60f8      	str	r0, [r7, #12]
    e0c8:	60b9      	str	r1, [r7, #8]
    e0ca:	607a      	str	r2, [r7, #4]
    e0cc:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    e0ce:	68b9      	ldr	r1, [r7, #8]
    e0d0:	68f8      	ldr	r0, [r7, #12]
    e0d2:	4b0e      	ldr	r3, [pc, #56]	; (e10c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e0d4:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    e0d6:	68fb      	ldr	r3, [r7, #12]
    e0d8:	699b      	ldr	r3, [r3, #24]
    e0da:	687a      	ldr	r2, [r7, #4]
    e0dc:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e0de:	68fb      	ldr	r3, [r7, #12]
    e0e0:	699b      	ldr	r3, [r3, #24]
    e0e2:	68ba      	ldr	r2, [r7, #8]
    e0e4:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e0e6:	68fb      	ldr	r3, [r7, #12]
    e0e8:	699b      	ldr	r3, [r3, #24]
    e0ea:	78fa      	ldrb	r2, [r7, #3]
    e0ec:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e0ee:	68fb      	ldr	r3, [r7, #12]
    e0f0:	68da      	ldr	r2, [r3, #12]
    e0f2:	68fb      	ldr	r3, [r7, #12]
    e0f4:	699b      	ldr	r3, [r3, #24]
    e0f6:	4619      	mov	r1, r3
    e0f8:	4610      	mov	r0, r2
    e0fa:	4b05      	ldr	r3, [pc, #20]	; (e110 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    e0fc:	4798      	blx	r3
    e0fe:	6178      	str	r0, [r7, #20]
	
	return status;
    e100:	697b      	ldr	r3, [r7, #20]
}
    e102:	4618      	mov	r0, r3
    e104:	3718      	adds	r7, #24
    e106:	46bd      	mov	sp, r7
    e108:	bd80      	pop	{r7, pc}
    e10a:	bf00      	nop
    e10c:	0000e229 	.word	0x0000e229
    e110:	00002b61 	.word	0x00002b61

0000e114 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    e114:	b580      	push	{r7, lr}
    e116:	b082      	sub	sp, #8
    e118:	af00      	add	r7, sp, #0
    e11a:	6078      	str	r0, [r7, #4]
    e11c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e11e:	6839      	ldr	r1, [r7, #0]
    e120:	6878      	ldr	r0, [r7, #4]
    e122:	4b0f      	ldr	r3, [pc, #60]	; (e160 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    e124:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e126:	687b      	ldr	r3, [r7, #4]
    e128:	68db      	ldr	r3, [r3, #12]
    e12a:	f103 0218 	add.w	r2, r3, #24
    e12e:	687b      	ldr	r3, [r7, #4]
    e130:	699b      	ldr	r3, [r3, #24]
    e132:	4619      	mov	r1, r3
    e134:	4610      	mov	r0, r2
    e136:	4b0b      	ldr	r3, [pc, #44]	; (e164 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    e138:	4798      	blx	r3
    e13a:	4603      	mov	r3, r0
    e13c:	2b00      	cmp	r3, #0
    e13e:	d007      	beq.n	e150 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	68da      	ldr	r2, [r3, #12]
    e144:	687b      	ldr	r3, [r7, #4]
    e146:	699b      	ldr	r3, [r3, #24]
    e148:	4619      	mov	r1, r3
    e14a:	4610      	mov	r0, r2
    e14c:	4b06      	ldr	r3, [pc, #24]	; (e168 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    e14e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	699b      	ldr	r3, [r3, #24]
    e154:	2200      	movs	r2, #0
    e156:	60da      	str	r2, [r3, #12]
}
    e158:	bf00      	nop
    e15a:	3708      	adds	r7, #8
    e15c:	46bd      	mov	sp, r7
    e15e:	bd80      	pop	{r7, pc}
    e160:	0000e2a9 	.word	0x0000e2a9
    e164:	0000384d 	.word	0x0000384d
    e168:	00002c65 	.word	0x00002c65

0000e16c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e16c:	b590      	push	{r4, r7, lr}
    e16e:	b087      	sub	sp, #28
    e170:	af00      	add	r7, sp, #0
    e172:	60f8      	str	r0, [r7, #12]
    e174:	60b9      	str	r1, [r7, #8]
    e176:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e178:	2300      	movs	r3, #0
    e17a:	687a      	ldr	r2, [r7, #4]
    e17c:	68b9      	ldr	r1, [r7, #8]
    e17e:	68f8      	ldr	r0, [r7, #12]
    e180:	4c0c      	ldr	r4, [pc, #48]	; (e1b4 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    e182:	47a0      	blx	r4
    e184:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e186:	68fb      	ldr	r3, [r7, #12]
    e188:	68db      	ldr	r3, [r3, #12]
    e18a:	681b      	ldr	r3, [r3, #0]
    e18c:	699b      	ldr	r3, [r3, #24]
    e18e:	68fa      	ldr	r2, [r7, #12]
    e190:	68d2      	ldr	r2, [r2, #12]
    e192:	3204      	adds	r2, #4
    e194:	4610      	mov	r0, r2
    e196:	4798      	blx	r3
    e198:	4603      	mov	r3, r0
    e19a:	2b00      	cmp	r3, #0
    e19c:	d105      	bne.n	e1aa <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    e19e:	68fb      	ldr	r3, [r7, #12]
    e1a0:	68db      	ldr	r3, [r3, #12]
    e1a2:	4618      	mov	r0, r3
    e1a4:	4b04      	ldr	r3, [pc, #16]	; (e1b8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    e1a6:	4798      	blx	r3
    e1a8:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    e1aa:	697b      	ldr	r3, [r7, #20]
}
    e1ac:	4618      	mov	r0, r3
    e1ae:	371c      	adds	r7, #28
    e1b0:	46bd      	mov	sp, r7
    e1b2:	bd90      	pop	{r4, r7, pc}
    e1b4:	0000e0c1 	.word	0x0000e0c1
    e1b8:	00002a8d 	.word	0x00002a8d

0000e1bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    e1bc:	b480      	push	{r7}
    e1be:	b085      	sub	sp, #20
    e1c0:	af00      	add	r7, sp, #0
    e1c2:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e1c4:	2300      	movs	r3, #0
    e1c6:	73fb      	strb	r3, [r7, #15]
    e1c8:	7bfb      	ldrb	r3, [r7, #15]
    e1ca:	2b1f      	cmp	r3, #31
    e1cc:	dc23      	bgt.n	e216 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e1ce:	687b      	ldr	r3, [r7, #4]
    e1d0:	7f1a      	ldrb	r2, [r3, #28]
    e1d2:	7bfb      	ldrb	r3, [r7, #15]
    e1d4:	4413      	add	r3, r2
    e1d6:	b2db      	uxtb	r3, r3
    e1d8:	f003 031f 	and.w	r3, r3, #31
    e1dc:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e1de:	7bba      	ldrb	r2, [r7, #14]
    e1e0:	4910      	ldr	r1, [pc, #64]	; (e224 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e1e2:	4613      	mov	r3, r2
    e1e4:	009b      	lsls	r3, r3, #2
    e1e6:	4413      	add	r3, r2
    e1e8:	009b      	lsls	r3, r3, #2
    e1ea:	440b      	add	r3, r1
    e1ec:	330c      	adds	r3, #12
    e1ee:	681b      	ldr	r3, [r3, #0]
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d10c      	bne.n	e20e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    e1f4:	7bba      	ldrb	r2, [r7, #14]
    e1f6:	4613      	mov	r3, r2
    e1f8:	009b      	lsls	r3, r3, #2
    e1fa:	4413      	add	r3, r2
    e1fc:	009b      	lsls	r3, r3, #2
    e1fe:	4a09      	ldr	r2, [pc, #36]	; (e224 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e200:	441a      	add	r2, r3
    e202:	687b      	ldr	r3, [r7, #4]
    e204:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e206:	687b      	ldr	r3, [r7, #4]
    e208:	7bba      	ldrb	r2, [r7, #14]
    e20a:	771a      	strb	r2, [r3, #28]
			return;
    e20c:	e006      	b.n	e21c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e20e:	7bfb      	ldrb	r3, [r7, #15]
    e210:	3301      	adds	r3, #1
    e212:	73fb      	strb	r3, [r7, #15]
    e214:	e7d8      	b.n	e1c8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e216:	687b      	ldr	r3, [r7, #4]
    e218:	4a02      	ldr	r2, [pc, #8]	; (e224 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    e21a:	619a      	str	r2, [r3, #24]

}
    e21c:	3714      	adds	r7, #20
    e21e:	46bd      	mov	sp, r7
    e220:	bc80      	pop	{r7}
    e222:	4770      	bx	lr
    e224:	20001310 	.word	0x20001310

0000e228 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    e228:	b580      	push	{r7, lr}
    e22a:	b084      	sub	sp, #16
    e22c:	af00      	add	r7, sp, #0
    e22e:	6078      	str	r0, [r7, #4]
    e230:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e232:	2300      	movs	r3, #0
    e234:	73fb      	strb	r3, [r7, #15]
    e236:	7bfb      	ldrb	r3, [r7, #15]
    e238:	2b1f      	cmp	r3, #31
    e23a:	dc28      	bgt.n	e28e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    e23c:	687b      	ldr	r3, [r7, #4]
    e23e:	7f1a      	ldrb	r2, [r3, #28]
    e240:	7bfb      	ldrb	r3, [r7, #15]
    e242:	4413      	add	r3, r2
    e244:	b2db      	uxtb	r3, r3
    e246:	f003 031f 	and.w	r3, r3, #31
    e24a:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    e24c:	7bba      	ldrb	r2, [r7, #14]
    e24e:	4913      	ldr	r1, [pc, #76]	; (e29c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e250:	4613      	mov	r3, r2
    e252:	009b      	lsls	r3, r3, #2
    e254:	4413      	add	r3, r2
    e256:	009b      	lsls	r3, r3, #2
    e258:	440b      	add	r3, r1
    e25a:	330c      	adds	r3, #12
    e25c:	681a      	ldr	r2, [r3, #0]
    e25e:	683b      	ldr	r3, [r7, #0]
    e260:	429a      	cmp	r2, r3
    e262:	d110      	bne.n	e286 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    e264:	6839      	ldr	r1, [r7, #0]
    e266:	6878      	ldr	r0, [r7, #4]
    e268:	4b0d      	ldr	r3, [pc, #52]	; (e2a0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    e26a:	4798      	blx	r3
			task=&taskArray[j];
    e26c:	7bba      	ldrb	r2, [r7, #14]
    e26e:	4613      	mov	r3, r2
    e270:	009b      	lsls	r3, r3, #2
    e272:	4413      	add	r3, r2
    e274:	009b      	lsls	r3, r3, #2
    e276:	4a09      	ldr	r2, [pc, #36]	; (e29c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e278:	441a      	add	r2, r3
    e27a:	687b      	ldr	r3, [r7, #4]
    e27c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e27e:	687b      	ldr	r3, [r7, #4]
    e280:	7bba      	ldrb	r2, [r7, #14]
    e282:	771a      	strb	r2, [r3, #28]
			return;
    e284:	e006      	b.n	e294 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e286:	7bfb      	ldrb	r3, [r7, #15]
    e288:	3301      	adds	r3, #1
    e28a:	73fb      	strb	r3, [r7, #15]
    e28c:	e7d3      	b.n	e236 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    e28e:	6878      	ldr	r0, [r7, #4]
    e290:	4b04      	ldr	r3, [pc, #16]	; (e2a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    e292:	4798      	blx	r3
	//task=&taskArray[0];

}
    e294:	3710      	adds	r7, #16
    e296:	46bd      	mov	sp, r7
    e298:	bd80      	pop	{r7, pc}
    e29a:	bf00      	nop
    e29c:	20001310 	.word	0x20001310
    e2a0:	0000e115 	.word	0x0000e115
    e2a4:	0000e1bd 	.word	0x0000e1bd

0000e2a8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    e2a8:	b480      	push	{r7}
    e2aa:	b085      	sub	sp, #20
    e2ac:	af00      	add	r7, sp, #0
    e2ae:	6078      	str	r0, [r7, #4]
    e2b0:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e2b2:	2300      	movs	r3, #0
    e2b4:	73fb      	strb	r3, [r7, #15]
    e2b6:	7bfb      	ldrb	r3, [r7, #15]
    e2b8:	2b1f      	cmp	r3, #31
    e2ba:	dc19      	bgt.n	e2f0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e2bc:	7bfa      	ldrb	r2, [r7, #15]
    e2be:	490f      	ldr	r1, [pc, #60]	; (e2fc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e2c0:	4613      	mov	r3, r2
    e2c2:	009b      	lsls	r3, r3, #2
    e2c4:	4413      	add	r3, r2
    e2c6:	009b      	lsls	r3, r3, #2
    e2c8:	440b      	add	r3, r1
    e2ca:	330c      	adds	r3, #12
    e2cc:	681a      	ldr	r2, [r3, #0]
    e2ce:	683b      	ldr	r3, [r7, #0]
    e2d0:	429a      	cmp	r2, r3
    e2d2:	d109      	bne.n	e2e8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e2d4:	7bfa      	ldrb	r2, [r7, #15]
    e2d6:	4613      	mov	r3, r2
    e2d8:	009b      	lsls	r3, r3, #2
    e2da:	4413      	add	r3, r2
    e2dc:	009b      	lsls	r3, r3, #2
    e2de:	4a07      	ldr	r2, [pc, #28]	; (e2fc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e2e0:	441a      	add	r2, r3
    e2e2:	687b      	ldr	r3, [r7, #4]
    e2e4:	619a      	str	r2, [r3, #24]
			return;
    e2e6:	e004      	b.n	e2f2 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e2e8:	7bfb      	ldrb	r3, [r7, #15]
    e2ea:	3301      	adds	r3, #1
    e2ec:	73fb      	strb	r3, [r7, #15]
    e2ee:	e7e2      	b.n	e2b6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    e2f0:	bf00      	nop
}
    e2f2:	3714      	adds	r7, #20
    e2f4:	46bd      	mov	sp, r7
    e2f6:	bc80      	pop	{r7}
    e2f8:	4770      	bx	lr
    e2fa:	bf00      	nop
    e2fc:	20001310 	.word	0x20001310

0000e300 <_Z41__static_initialization_and_destruction_0ii>:
    e300:	b580      	push	{r7, lr}
    e302:	b082      	sub	sp, #8
    e304:	af00      	add	r7, sp, #0
    e306:	6078      	str	r0, [r7, #4]
    e308:	6039      	str	r1, [r7, #0]
    e30a:	687b      	ldr	r3, [r7, #4]
    e30c:	2b01      	cmp	r3, #1
    e30e:	d14c      	bne.n	e3aa <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e310:	683b      	ldr	r3, [r7, #0]
    e312:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e316:	4293      	cmp	r3, r2
    e318:	d147      	bne.n	e3aa <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e31a:	4926      	ldr	r1, [pc, #152]	; (e3b4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e31c:	4826      	ldr	r0, [pc, #152]	; (e3b8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e31e:	4b27      	ldr	r3, [pc, #156]	; (e3bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e320:	4798      	blx	r3
    e322:	4a27      	ldr	r2, [pc, #156]	; (e3c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e324:	4927      	ldr	r1, [pc, #156]	; (e3c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e326:	4824      	ldr	r0, [pc, #144]	; (e3b8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e328:	4b27      	ldr	r3, [pc, #156]	; (e3c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e32a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e32c:	4927      	ldr	r1, [pc, #156]	; (e3cc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e32e:	4828      	ldr	r0, [pc, #160]	; (e3d0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e330:	4b22      	ldr	r3, [pc, #136]	; (e3bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e332:	4798      	blx	r3
    e334:	4a22      	ldr	r2, [pc, #136]	; (e3c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e336:	4923      	ldr	r1, [pc, #140]	; (e3c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e338:	4825      	ldr	r0, [pc, #148]	; (e3d0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e33a:	4b23      	ldr	r3, [pc, #140]	; (e3c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e33c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e33e:	4925      	ldr	r1, [pc, #148]	; (e3d4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e340:	4825      	ldr	r0, [pc, #148]	; (e3d8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e342:	4b1e      	ldr	r3, [pc, #120]	; (e3bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e344:	4798      	blx	r3
    e346:	4a1e      	ldr	r2, [pc, #120]	; (e3c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e348:	491e      	ldr	r1, [pc, #120]	; (e3c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e34a:	4823      	ldr	r0, [pc, #140]	; (e3d8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e34c:	4b1e      	ldr	r3, [pc, #120]	; (e3c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e34e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e350:	4922      	ldr	r1, [pc, #136]	; (e3dc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e352:	4823      	ldr	r0, [pc, #140]	; (e3e0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e354:	4b19      	ldr	r3, [pc, #100]	; (e3bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e356:	4798      	blx	r3
    e358:	4a19      	ldr	r2, [pc, #100]	; (e3c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e35a:	491a      	ldr	r1, [pc, #104]	; (e3c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e35c:	4820      	ldr	r0, [pc, #128]	; (e3e0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e35e:	4b1a      	ldr	r3, [pc, #104]	; (e3c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e360:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e362:	4920      	ldr	r1, [pc, #128]	; (e3e4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e364:	4820      	ldr	r0, [pc, #128]	; (e3e8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e366:	4b15      	ldr	r3, [pc, #84]	; (e3bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e368:	4798      	blx	r3
    e36a:	4a15      	ldr	r2, [pc, #84]	; (e3c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e36c:	4915      	ldr	r1, [pc, #84]	; (e3c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e36e:	481e      	ldr	r0, [pc, #120]	; (e3e8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e370:	4b15      	ldr	r3, [pc, #84]	; (e3c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e372:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e374:	491d      	ldr	r1, [pc, #116]	; (e3ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e376:	481e      	ldr	r0, [pc, #120]	; (e3f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e378:	4b10      	ldr	r3, [pc, #64]	; (e3bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e37a:	4798      	blx	r3
    e37c:	4a10      	ldr	r2, [pc, #64]	; (e3c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e37e:	4911      	ldr	r1, [pc, #68]	; (e3c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e380:	481b      	ldr	r0, [pc, #108]	; (e3f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e382:	4b11      	ldr	r3, [pc, #68]	; (e3c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e384:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e386:	491b      	ldr	r1, [pc, #108]	; (e3f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e388:	481b      	ldr	r0, [pc, #108]	; (e3f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e38a:	4b0c      	ldr	r3, [pc, #48]	; (e3bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e38c:	4798      	blx	r3
    e38e:	4a0c      	ldr	r2, [pc, #48]	; (e3c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e390:	490c      	ldr	r1, [pc, #48]	; (e3c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e392:	4819      	ldr	r0, [pc, #100]	; (e3f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e394:	4b0c      	ldr	r3, [pc, #48]	; (e3c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e396:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e398:	4918      	ldr	r1, [pc, #96]	; (e3fc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e39a:	4819      	ldr	r0, [pc, #100]	; (e400 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e39c:	4b07      	ldr	r3, [pc, #28]	; (e3bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e39e:	4798      	blx	r3
    e3a0:	4a07      	ldr	r2, [pc, #28]	; (e3c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3a2:	4908      	ldr	r1, [pc, #32]	; (e3c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e3a4:	4816      	ldr	r0, [pc, #88]	; (e400 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e3a6:	4b08      	ldr	r3, [pc, #32]	; (e3c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e3a8:	4798      	blx	r3
    e3aa:	bf00      	nop
    e3ac:	3708      	adds	r7, #8
    e3ae:	46bd      	mov	sp, r7
    e3b0:	bd80      	pop	{r7, pc}
    e3b2:	bf00      	nop
    e3b4:	2000a8d8 	.word	0x2000a8d8
    e3b8:	2000120c 	.word	0x2000120c
    e3bc:	0000df39 	.word	0x0000df39
    e3c0:	20000000 	.word	0x20000000
    e3c4:	0000df71 	.word	0x0000df71
    e3c8:	0000fc95 	.word	0x0000fc95
    e3cc:	2000a96c 	.word	0x2000a96c
    e3d0:	2000122c 	.word	0x2000122c
    e3d4:	2000aa90 	.word	0x2000aa90
    e3d8:	2000124c 	.word	0x2000124c
    e3dc:	2000a98c 	.word	0x2000a98c
    e3e0:	2000126c 	.word	0x2000126c
    e3e4:	2000aa50 	.word	0x2000aa50
    e3e8:	2000128c 	.word	0x2000128c
    e3ec:	2000aa70 	.word	0x2000aa70
    e3f0:	200012ac 	.word	0x200012ac
    e3f4:	2000a948 	.word	0x2000a948
    e3f8:	200012cc 	.word	0x200012cc
    e3fc:	2000a9e8 	.word	0x2000a9e8
    e400:	200012ec 	.word	0x200012ec

0000e404 <_GLOBAL__sub_I_ptrTimerClass>:
    e404:	b580      	push	{r7, lr}
    e406:	af00      	add	r7, sp, #0
    e408:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e40c:	2001      	movs	r0, #1
    e40e:	4b01      	ldr	r3, [pc, #4]	; (e414 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e410:	4798      	blx	r3
    e412:	bd80      	pop	{r7, pc}
    e414:	0000e301 	.word	0x0000e301

0000e418 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e418:	b480      	push	{r7}
    e41a:	b083      	sub	sp, #12
    e41c:	af00      	add	r7, sp, #0
    e41e:	6078      	str	r0, [r7, #4]
    e420:	4a05      	ldr	r2, [pc, #20]	; (e438 <_ZN5PrintC1Ev+0x20>)
    e422:	687b      	ldr	r3, [r7, #4]
    e424:	601a      	str	r2, [r3, #0]
    e426:	687b      	ldr	r3, [r7, #4]
    e428:	2200      	movs	r2, #0
    e42a:	605a      	str	r2, [r3, #4]
    e42c:	687b      	ldr	r3, [r7, #4]
    e42e:	4618      	mov	r0, r3
    e430:	370c      	adds	r7, #12
    e432:	46bd      	mov	sp, r7
    e434:	bc80      	pop	{r7}
    e436:	4770      	bx	lr
    e438:	00010b68 	.word	0x00010b68

0000e43c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e43c:	b480      	push	{r7}
    e43e:	b083      	sub	sp, #12
    e440:	af00      	add	r7, sp, #0
    e442:	6078      	str	r0, [r7, #4]
    e444:	2300      	movs	r3, #0
    e446:	4618      	mov	r0, r3
    e448:	370c      	adds	r7, #12
    e44a:	46bd      	mov	sp, r7
    e44c:	bc80      	pop	{r7}
    e44e:	4770      	bx	lr

0000e450 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    e450:	b480      	push	{r7}
    e452:	b083      	sub	sp, #12
    e454:	af00      	add	r7, sp, #0
    e456:	6078      	str	r0, [r7, #4]
    e458:	bf00      	nop
    e45a:	370c      	adds	r7, #12
    e45c:	46bd      	mov	sp, r7
    e45e:	bc80      	pop	{r7}
    e460:	4770      	bx	lr
	...

0000e464 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    e464:	b580      	push	{r7, lr}
    e466:	b082      	sub	sp, #8
    e468:	af00      	add	r7, sp, #0
    e46a:	6078      	str	r0, [r7, #4]
    e46c:	687b      	ldr	r3, [r7, #4]
    e46e:	4618      	mov	r0, r3
    e470:	4b06      	ldr	r3, [pc, #24]	; (e48c <_ZN6StreamC1Ev+0x28>)
    e472:	4798      	blx	r3
    e474:	4a06      	ldr	r2, [pc, #24]	; (e490 <_ZN6StreamC1Ev+0x2c>)
    e476:	687b      	ldr	r3, [r7, #4]
    e478:	601a      	str	r2, [r3, #0]
    e47a:	687b      	ldr	r3, [r7, #4]
    e47c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e480:	609a      	str	r2, [r3, #8]
    e482:	687b      	ldr	r3, [r7, #4]
    e484:	4618      	mov	r0, r3
    e486:	3708      	adds	r7, #8
    e488:	46bd      	mov	sp, r7
    e48a:	bd80      	pop	{r7, pc}
    e48c:	0000e419 	.word	0x0000e419
    e490:	00010b2c 	.word	0x00010b2c

0000e494 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    e494:	b480      	push	{r7}
    e496:	b083      	sub	sp, #12
    e498:	af00      	add	r7, sp, #0
    e49a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    e49c:	4b06      	ldr	r3, [pc, #24]	; (e4b8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    e49e:	681b      	ldr	r3, [r3, #0]
    e4a0:	2201      	movs	r2, #1
    e4a2:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    e4a4:	4b04      	ldr	r3, [pc, #16]	; (e4b8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    e4a6:	681b      	ldr	r3, [r3, #0]
    e4a8:	2200      	movs	r2, #0
    e4aa:	741a      	strb	r2, [r3, #16]
	
}
    e4ac:	bf00      	nop
    e4ae:	370c      	adds	r7, #12
    e4b0:	46bd      	mov	sp, r7
    e4b2:	bc80      	pop	{r7}
    e4b4:	4770      	bx	lr
    e4b6:	bf00      	nop
    e4b8:	20001714 	.word	0x20001714

0000e4bc <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e4bc:	b480      	push	{r7}
    e4be:	b083      	sub	sp, #12
    e4c0:	af00      	add	r7, sp, #0
    e4c2:	4603      	mov	r3, r0
    e4c4:	603a      	str	r2, [r7, #0]
    e4c6:	71fb      	strb	r3, [r7, #7]
    e4c8:	460b      	mov	r3, r1
    e4ca:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    e4cc:	4b08      	ldr	r3, [pc, #32]	; (e4f0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e4ce:	681b      	ldr	r3, [r3, #0]
    e4d0:	2201      	movs	r2, #1
    e4d2:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    e4d4:	4b06      	ldr	r3, [pc, #24]	; (e4f0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e4d6:	681b      	ldr	r3, [r3, #0]
    e4d8:	2201      	movs	r2, #1
    e4da:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e4dc:	4b04      	ldr	r3, [pc, #16]	; (e4f0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e4de:	681b      	ldr	r3, [r3, #0]
    e4e0:	2201      	movs	r2, #1
    e4e2:	741a      	strb	r2, [r3, #16]


	return false;
    e4e4:	2300      	movs	r3, #0
}
    e4e6:	4618      	mov	r0, r3
    e4e8:	370c      	adds	r7, #12
    e4ea:	46bd      	mov	sp, r7
    e4ec:	bc80      	pop	{r7}
    e4ee:	4770      	bx	lr
    e4f0:	20001714 	.word	0x20001714

0000e4f4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e4f4:	b480      	push	{r7}
    e4f6:	b083      	sub	sp, #12
    e4f8:	af00      	add	r7, sp, #0
    e4fa:	4603      	mov	r3, r0
    e4fc:	603a      	str	r2, [r7, #0]
    e4fe:	71fb      	strb	r3, [r7, #7]
    e500:	460b      	mov	r3, r1
    e502:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e504:	4b08      	ldr	r3, [pc, #32]	; (e528 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e506:	681b      	ldr	r3, [r3, #0]
    e508:	2201      	movs	r2, #1
    e50a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e50c:	4b06      	ldr	r3, [pc, #24]	; (e528 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e50e:	681b      	ldr	r3, [r3, #0]
    e510:	2201      	movs	r2, #1
    e512:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e514:	4b04      	ldr	r3, [pc, #16]	; (e528 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e516:	681b      	ldr	r3, [r3, #0]
    e518:	2201      	movs	r2, #1
    e51a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e51c:	2300      	movs	r3, #0
}
    e51e:	4618      	mov	r0, r3
    e520:	370c      	adds	r7, #12
    e522:	46bd      	mov	sp, r7
    e524:	bc80      	pop	{r7}
    e526:	4770      	bx	lr
    e528:	20001714 	.word	0x20001714

0000e52c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e52c:	b580      	push	{r7, lr}
    e52e:	b082      	sub	sp, #8
    e530:	af00      	add	r7, sp, #0
    e532:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e534:	793b      	ldrb	r3, [r7, #4]
    e536:	f003 0301 	and.w	r3, r3, #1
    e53a:	b2db      	uxtb	r3, r3
    e53c:	2b00      	cmp	r3, #0
    e53e:	d013      	beq.n	e568 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e540:	490c      	ldr	r1, [pc, #48]	; (e574 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e542:	2000      	movs	r0, #0
    e544:	4b0c      	ldr	r3, [pc, #48]	; (e578 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e546:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e548:	490c      	ldr	r1, [pc, #48]	; (e57c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e54a:	2001      	movs	r0, #1
    e54c:	4b0a      	ldr	r3, [pc, #40]	; (e578 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e54e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e550:	4b0b      	ldr	r3, [pc, #44]	; (e580 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e552:	681b      	ldr	r3, [r3, #0]
    e554:	2201      	movs	r2, #1
    e556:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e558:	4b09      	ldr	r3, [pc, #36]	; (e580 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e55a:	681b      	ldr	r3, [r3, #0]
    e55c:	2201      	movs	r2, #1
    e55e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e560:	4b07      	ldr	r3, [pc, #28]	; (e580 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e562:	681b      	ldr	r3, [r3, #0]
    e564:	2201      	movs	r2, #1
    e566:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e568:	2300      	movs	r3, #0
}
    e56a:	4618      	mov	r0, r3
    e56c:	3708      	adds	r7, #8
    e56e:	46bd      	mov	sp, r7
    e570:	bd80      	pop	{r7, pc}
    e572:	bf00      	nop
    e574:	0000e4bd 	.word	0x0000e4bd
    e578:	0000c259 	.word	0x0000c259
    e57c:	0000e4f5 	.word	0x0000e4f5
    e580:	20001714 	.word	0x20001714

0000e584 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e584:	b580      	push	{r7, lr}
    e586:	b082      	sub	sp, #8
    e588:	af00      	add	r7, sp, #0
    e58a:	6078      	str	r0, [r7, #4]
    e58c:	687b      	ldr	r3, [r7, #4]
    e58e:	4618      	mov	r0, r3
    e590:	4b0a      	ldr	r3, [pc, #40]	; (e5bc <_ZN9CDC_ClassC1Ev+0x38>)
    e592:	4798      	blx	r3
    e594:	687b      	ldr	r3, [r7, #4]
    e596:	3310      	adds	r3, #16
    e598:	4618      	mov	r0, r3
    e59a:	4b09      	ldr	r3, [pc, #36]	; (e5c0 <_ZN9CDC_ClassC1Ev+0x3c>)
    e59c:	4798      	blx	r3
    e59e:	4a09      	ldr	r2, [pc, #36]	; (e5c4 <_ZN9CDC_ClassC1Ev+0x40>)
    e5a0:	687b      	ldr	r3, [r7, #4]
    e5a2:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e5a4:	687b      	ldr	r3, [r7, #4]
    e5a6:	f04f 32ff 	mov.w	r2, #4294967295
    e5aa:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e5ac:	4a06      	ldr	r2, [pc, #24]	; (e5c8 <_ZN9CDC_ClassC1Ev+0x44>)
    e5ae:	687b      	ldr	r3, [r7, #4]
    e5b0:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e5b2:	687b      	ldr	r3, [r7, #4]
    e5b4:	4618      	mov	r0, r3
    e5b6:	3708      	adds	r7, #8
    e5b8:	46bd      	mov	sp, r7
    e5ba:	bd80      	pop	{r7, pc}
    e5bc:	0000e465 	.word	0x0000e465
    e5c0:	0000ec71 	.word	0x0000ec71
    e5c4:	00010afc 	.word	0x00010afc
    e5c8:	20001714 	.word	0x20001714

0000e5cc <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e5cc:	b580      	push	{r7, lr}
    e5ce:	b082      	sub	sp, #8
    e5d0:	af00      	add	r7, sp, #0
    e5d2:	6078      	str	r0, [r7, #4]
    e5d4:	4a06      	ldr	r2, [pc, #24]	; (e5f0 <_ZN9CDC_ClassD1Ev+0x24>)
    e5d6:	687b      	ldr	r3, [r7, #4]
    e5d8:	601a      	str	r2, [r3, #0]
    e5da:	687b      	ldr	r3, [r7, #4]
    e5dc:	3310      	adds	r3, #16
    e5de:	4618      	mov	r0, r3
    e5e0:	4b04      	ldr	r3, [pc, #16]	; (e5f4 <_ZN9CDC_ClassD1Ev+0x28>)
    e5e2:	4798      	blx	r3
{
} //~CDC_Class
    e5e4:	687b      	ldr	r3, [r7, #4]
    e5e6:	4618      	mov	r0, r3
    e5e8:	3708      	adds	r7, #8
    e5ea:	46bd      	mov	sp, r7
    e5ec:	bd80      	pop	{r7, pc}
    e5ee:	bf00      	nop
    e5f0:	00010afc 	.word	0x00010afc
    e5f4:	0000ec91 	.word	0x0000ec91

0000e5f8 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e5f8:	b580      	push	{r7, lr}
    e5fa:	b082      	sub	sp, #8
    e5fc:	af00      	add	r7, sp, #0
    e5fe:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e600:	687b      	ldr	r3, [r7, #4]
    e602:	3310      	adds	r3, #16
    e604:	4618      	mov	r0, r3
    e606:	4b09      	ldr	r3, [pc, #36]	; (e62c <_ZN9CDC_Class4InitEv+0x34>)
    e608:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e60a:	4909      	ldr	r1, [pc, #36]	; (e630 <_ZN9CDC_Class4InitEv+0x38>)
    e60c:	2003      	movs	r0, #3
    e60e:	4b09      	ldr	r3, [pc, #36]	; (e634 <_ZN9CDC_Class4InitEv+0x3c>)
    e610:	4798      	blx	r3
	delay_ms(100);
    e612:	2064      	movs	r0, #100	; 0x64
    e614:	4b08      	ldr	r3, [pc, #32]	; (e638 <_ZN9CDC_Class4InitEv+0x40>)
    e616:	4798      	blx	r3
		
	if (connected)
    e618:	687b      	ldr	r3, [r7, #4]
    e61a:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e61c:	2064      	movs	r0, #100	; 0x64
    e61e:	4b06      	ldr	r3, [pc, #24]	; (e638 <_ZN9CDC_Class4InitEv+0x40>)
    e620:	4798      	blx	r3

	

}
    e622:	bf00      	nop
    e624:	3708      	adds	r7, #8
    e626:	46bd      	mov	sp, r7
    e628:	bd80      	pop	{r7, pc}
    e62a:	bf00      	nop
    e62c:	0000eca5 	.word	0x0000eca5
    e630:	0000e52d 	.word	0x0000e52d
    e634:	0000c259 	.word	0x0000c259
    e638:	0000b08d 	.word	0x0000b08d

0000e63c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e63c:	b580      	push	{r7, lr}
    e63e:	b082      	sub	sp, #8
    e640:	af00      	add	r7, sp, #0
    e642:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e644:	4b03      	ldr	r3, [pc, #12]	; (e654 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e646:	4798      	blx	r3
    e648:	4603      	mov	r3, r0
	
}
    e64a:	4618      	mov	r0, r3
    e64c:	3708      	adds	r7, #8
    e64e:	46bd      	mov	sp, r7
    e650:	bd80      	pop	{r7, pc}
    e652:	bf00      	nop
    e654:	0000c2d1 	.word	0x0000c2d1

0000e658 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e658:	b580      	push	{r7, lr}
    e65a:	b084      	sub	sp, #16
    e65c:	af00      	add	r7, sp, #0
    e65e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	699b      	ldr	r3, [r3, #24]
    e664:	f1b3 3fff 	cmp.w	r3, #4294967295
    e668:	bf14      	ite	ne
    e66a:	2301      	movne	r3, #1
    e66c:	2300      	moveq	r3, #0
    e66e:	b2db      	uxtb	r3, r3
    e670:	2b00      	cmp	r3, #0
    e672:	d002      	beq.n	e67a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e674:	687b      	ldr	r3, [r7, #4]
    e676:	699b      	ldr	r3, [r3, #24]
    e678:	e011      	b.n	e69e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e67a:	687b      	ldr	r3, [r7, #4]
    e67c:	681b      	ldr	r3, [r3, #0]
    e67e:	331c      	adds	r3, #28
    e680:	681b      	ldr	r3, [r3, #0]
    e682:	f107 010f 	add.w	r1, r7, #15
    e686:	2201      	movs	r2, #1
    e688:	6878      	ldr	r0, [r7, #4]
    e68a:	4798      	blx	r3
    e68c:	4602      	mov	r2, r0
    e68e:	687b      	ldr	r3, [r7, #4]
    e690:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e692:	7bfb      	ldrb	r3, [r7, #15]
    e694:	461a      	mov	r2, r3
    e696:	687b      	ldr	r3, [r7, #4]
    e698:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e69a:	687b      	ldr	r3, [r7, #4]
    e69c:	699b      	ldr	r3, [r3, #24]
}
    e69e:	4618      	mov	r0, r3
    e6a0:	3710      	adds	r7, #16
    e6a2:	46bd      	mov	sp, r7
    e6a4:	bd80      	pop	{r7, pc}
	...

0000e6a8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e6a8:	b580      	push	{r7, lr}
    e6aa:	b086      	sub	sp, #24
    e6ac:	af00      	add	r7, sp, #0
    e6ae:	60f8      	str	r0, [r7, #12]
    e6b0:	60b9      	str	r1, [r7, #8]
    e6b2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e6b4:	68fb      	ldr	r3, [r7, #12]
    e6b6:	7c1b      	ldrb	r3, [r3, #16]
    e6b8:	b2db      	uxtb	r3, r3
    e6ba:	2b00      	cmp	r3, #0
    e6bc:	d02e      	beq.n	e71c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e6be:	687a      	ldr	r2, [r7, #4]
    e6c0:	4613      	mov	r3, r2
    e6c2:	009b      	lsls	r3, r3, #2
    e6c4:	4413      	add	r3, r2
    e6c6:	005b      	lsls	r3, r3, #1
    e6c8:	461a      	mov	r2, r3
    e6ca:	4918      	ldr	r1, [pc, #96]	; (e72c <_ZN9CDC_Class8readDataEPvl+0x84>)
    e6cc:	4818      	ldr	r0, [pc, #96]	; (e730 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e6ce:	4b19      	ldr	r3, [pc, #100]	; (e734 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e6d0:	4798      	blx	r3
		rxReady=false;
    e6d2:	68fb      	ldr	r3, [r7, #12]
    e6d4:	2200      	movs	r2, #0
    e6d6:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e6d8:	687b      	ldr	r3, [r7, #4]
    e6da:	4619      	mov	r1, r3
    e6dc:	68b8      	ldr	r0, [r7, #8]
    e6de:	4b16      	ldr	r3, [pc, #88]	; (e738 <_ZN9CDC_Class8readDataEPvl+0x90>)
    e6e0:	4798      	blx	r3
    e6e2:	4603      	mov	r3, r0
    e6e4:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e6e6:	68fb      	ldr	r3, [r7, #12]
    e6e8:	7d5b      	ldrb	r3, [r3, #21]
    e6ea:	b2db      	uxtb	r3, r3
    e6ec:	f083 0301 	eor.w	r3, r3, #1
    e6f0:	b2db      	uxtb	r3, r3
    e6f2:	2b00      	cmp	r3, #0
    e6f4:	d006      	beq.n	e704 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e6f6:	68fb      	ldr	r3, [r7, #12]
    e6f8:	7c1b      	ldrb	r3, [r3, #16]
    e6fa:	b2db      	uxtb	r3, r3
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	d001      	beq.n	e704 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e700:	2301      	movs	r3, #1
    e702:	e000      	b.n	e706 <_ZN9CDC_Class8readDataEPvl+0x5e>
    e704:	2300      	movs	r3, #0
    e706:	2b00      	cmp	r3, #0
    e708:	d000      	beq.n	e70c <_ZN9CDC_Class8readDataEPvl+0x64>
    e70a:	e7ec      	b.n	e6e6 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e70c:	4808      	ldr	r0, [pc, #32]	; (e730 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e70e:	4b0b      	ldr	r3, [pc, #44]	; (e73c <_ZN9CDC_Class8readDataEPvl+0x94>)
    e710:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e712:	4906      	ldr	r1, [pc, #24]	; (e72c <_ZN9CDC_Class8readDataEPvl+0x84>)
    e714:	4806      	ldr	r0, [pc, #24]	; (e730 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e716:	4b0a      	ldr	r3, [pc, #40]	; (e740 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e718:	4798      	blx	r3
    e71a:	e001      	b.n	e720 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e71c:	2300      	movs	r3, #0
    e71e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e720:	7dfb      	ldrb	r3, [r7, #23]
}
    e722:	4618      	mov	r0, r3
    e724:	3718      	adds	r7, #24
    e726:	46bd      	mov	sp, r7
    e728:	bd80      	pop	{r7, pc}
    e72a:	bf00      	nop
    e72c:	0000e495 	.word	0x0000e495
    e730:	200016b4 	.word	0x200016b4
    e734:	0000e16d 	.word	0x0000e16d
    e738:	0000c1ad 	.word	0x0000c1ad
    e73c:	0000e099 	.word	0x0000e099
    e740:	0000e115 	.word	0x0000e115

0000e744 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e744:	b580      	push	{r7, lr}
    e746:	b084      	sub	sp, #16
    e748:	af00      	add	r7, sp, #0
    e74a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e74c:	687b      	ldr	r3, [r7, #4]
    e74e:	2200      	movs	r2, #0
    e750:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e752:	f107 030f 	add.w	r3, r7, #15
    e756:	2101      	movs	r1, #1
    e758:	4618      	mov	r0, r3
    e75a:	4b08      	ldr	r3, [pc, #32]	; (e77c <_ZN9CDC_Class4readEv+0x38>)
    e75c:	4798      	blx	r3
	while(!rxReady);
    e75e:	687b      	ldr	r3, [r7, #4]
    e760:	7d5b      	ldrb	r3, [r3, #21]
    e762:	b2db      	uxtb	r3, r3
    e764:	f083 0301 	eor.w	r3, r3, #1
    e768:	b2db      	uxtb	r3, r3
    e76a:	2b00      	cmp	r3, #0
    e76c:	d000      	beq.n	e770 <_ZN9CDC_Class4readEv+0x2c>
    e76e:	e7f6      	b.n	e75e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e770:	7bfb      	ldrb	r3, [r7, #15]
}
    e772:	4618      	mov	r0, r3
    e774:	3710      	adds	r7, #16
    e776:	46bd      	mov	sp, r7
    e778:	bd80      	pop	{r7, pc}
    e77a:	bf00      	nop
    e77c:	0000c1ad 	.word	0x0000c1ad

0000e780 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e780:	b580      	push	{r7, lr}
    e782:	b082      	sub	sp, #8
    e784:	af00      	add	r7, sp, #0
    e786:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e788:	687b      	ldr	r3, [r7, #4]
    e78a:	331c      	adds	r3, #28
    e78c:	2140      	movs	r1, #64	; 0x40
    e78e:	4618      	mov	r0, r3
    e790:	4b02      	ldr	r3, [pc, #8]	; (e79c <_ZN9CDC_Class5flushEv+0x1c>)
    e792:	4798      	blx	r3
}
    e794:	bf00      	nop
    e796:	3708      	adds	r7, #8
    e798:	46bd      	mov	sp, r7
    e79a:	bd80      	pop	{r7, pc}
    e79c:	0000c1f1 	.word	0x0000c1f1

0000e7a0 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e7a0:	b580      	push	{r7, lr}
    e7a2:	b082      	sub	sp, #8
    e7a4:	af00      	add	r7, sp, #0
    e7a6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e7a8:	4b02      	ldr	r3, [pc, #8]	; (e7b4 <_ZN9CDC_Class5clearEv+0x14>)
    e7aa:	4798      	blx	r3
}
    e7ac:	bf00      	nop
    e7ae:	3708      	adds	r7, #8
    e7b0:	46bd      	mov	sp, r7
    e7b2:	bd80      	pop	{r7, pc}
    e7b4:	0000c235 	.word	0x0000c235

0000e7b8 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e7b8:	b580      	push	{r7, lr}
    e7ba:	b082      	sub	sp, #8
    e7bc:	af00      	add	r7, sp, #0
    e7be:	6078      	str	r0, [r7, #4]
    e7c0:	460b      	mov	r3, r1
    e7c2:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e7c4:	687b      	ldr	r3, [r7, #4]
    e7c6:	7c1b      	ldrb	r3, [r3, #16]
    e7c8:	b2db      	uxtb	r3, r3
    e7ca:	2b00      	cmp	r3, #0
    e7cc:	d012      	beq.n	e7f4 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e7ce:	687b      	ldr	r3, [r7, #4]
    e7d0:	7d1b      	ldrb	r3, [r3, #20]
    e7d2:	b2db      	uxtb	r3, r3
    e7d4:	f083 0301 	eor.w	r3, r3, #1
    e7d8:	b2db      	uxtb	r3, r3
    e7da:	2b00      	cmp	r3, #0
    e7dc:	d000      	beq.n	e7e0 <_ZN9CDC_Class5writeEh+0x28>
    e7de:	e7f6      	b.n	e7ce <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e7e0:	687b      	ldr	r3, [r7, #4]
    e7e2:	681b      	ldr	r3, [r3, #0]
    e7e4:	3324      	adds	r3, #36	; 0x24
    e7e6:	681b      	ldr	r3, [r3, #0]
    e7e8:	1cf9      	adds	r1, r7, #3
    e7ea:	2201      	movs	r2, #1
    e7ec:	6878      	ldr	r0, [r7, #4]
    e7ee:	4798      	blx	r3
    e7f0:	4603      	mov	r3, r0
    e7f2:	e000      	b.n	e7f6 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e7f4:	2300      	movs	r3, #0
	}
		
}
    e7f6:	4618      	mov	r0, r3
    e7f8:	3708      	adds	r7, #8
    e7fa:	46bd      	mov	sp, r7
    e7fc:	bd80      	pop	{r7, pc}
	...

0000e800 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e800:	b580      	push	{r7, lr}
    e802:	b086      	sub	sp, #24
    e804:	af00      	add	r7, sp, #0
    e806:	60f8      	str	r0, [r7, #12]
    e808:	60b9      	str	r1, [r7, #8]
    e80a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e80c:	68fb      	ldr	r3, [r7, #12]
    e80e:	7c1b      	ldrb	r3, [r3, #16]
    e810:	b2db      	uxtb	r3, r3
    e812:	2b00      	cmp	r3, #0
    e814:	d02f      	beq.n	e876 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e816:	687a      	ldr	r2, [r7, #4]
    e818:	4613      	mov	r3, r2
    e81a:	009b      	lsls	r3, r3, #2
    e81c:	4413      	add	r3, r2
    e81e:	005b      	lsls	r3, r3, #1
    e820:	461a      	mov	r2, r3
    e822:	4917      	ldr	r1, [pc, #92]	; (e880 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e824:	4817      	ldr	r0, [pc, #92]	; (e884 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e826:	4b18      	ldr	r3, [pc, #96]	; (e888 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e828:	4798      	blx	r3
		txReady=false;
    e82a:	68fb      	ldr	r3, [r7, #12]
    e82c:	2200      	movs	r2, #0
    e82e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e830:	687b      	ldr	r3, [r7, #4]
    e832:	4619      	mov	r1, r3
    e834:	68b8      	ldr	r0, [r7, #8]
    e836:	4b15      	ldr	r3, [pc, #84]	; (e88c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e838:	4798      	blx	r3
    e83a:	4603      	mov	r3, r0
    e83c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e83e:	68fb      	ldr	r3, [r7, #12]
    e840:	7d1b      	ldrb	r3, [r3, #20]
    e842:	b2db      	uxtb	r3, r3
    e844:	f083 0301 	eor.w	r3, r3, #1
    e848:	b2db      	uxtb	r3, r3
    e84a:	2b00      	cmp	r3, #0
    e84c:	d006      	beq.n	e85c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e84e:	68fb      	ldr	r3, [r7, #12]
    e850:	7c1b      	ldrb	r3, [r3, #16]
    e852:	b2db      	uxtb	r3, r3
    e854:	2b00      	cmp	r3, #0
    e856:	d001      	beq.n	e85c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e858:	2301      	movs	r3, #1
    e85a:	e000      	b.n	e85e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e85c:	2300      	movs	r3, #0
    e85e:	2b00      	cmp	r3, #0
    e860:	d000      	beq.n	e864 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e862:	e7ec      	b.n	e83e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e864:	4807      	ldr	r0, [pc, #28]	; (e884 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e866:	4b0a      	ldr	r3, [pc, #40]	; (e890 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e868:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e86a:	4905      	ldr	r1, [pc, #20]	; (e880 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e86c:	4805      	ldr	r0, [pc, #20]	; (e884 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e86e:	4b09      	ldr	r3, [pc, #36]	; (e894 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e870:	4798      	blx	r3
		return r;
    e872:	697b      	ldr	r3, [r7, #20]
    e874:	e000      	b.n	e878 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e876:	2300      	movs	r3, #0
	}
	

}
    e878:	4618      	mov	r0, r3
    e87a:	3718      	adds	r7, #24
    e87c:	46bd      	mov	sp, r7
    e87e:	bd80      	pop	{r7, pc}
    e880:	0000e495 	.word	0x0000e495
    e884:	200016b4 	.word	0x200016b4
    e888:	0000e16d 	.word	0x0000e16d
    e88c:	0000c1f1 	.word	0x0000c1f1
    e890:	0000e099 	.word	0x0000e099
    e894:	0000e115 	.word	0x0000e115

0000e898 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e898:	b580      	push	{r7, lr}
    e89a:	b086      	sub	sp, #24
    e89c:	af00      	add	r7, sp, #0
    e89e:	60f8      	str	r0, [r7, #12]
    e8a0:	60b9      	str	r1, [r7, #8]
    e8a2:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e8a4:	68fb      	ldr	r3, [r7, #12]
    e8a6:	2200      	movs	r2, #0
    e8a8:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e8aa:	68fb      	ldr	r3, [r7, #12]
    e8ac:	7c1b      	ldrb	r3, [r3, #16]
    e8ae:	b2db      	uxtb	r3, r3
    e8b0:	2b00      	cmp	r3, #0
    e8b2:	d02a      	beq.n	e90a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e8b4:	687a      	ldr	r2, [r7, #4]
    e8b6:	4613      	mov	r3, r2
    e8b8:	009b      	lsls	r3, r3, #2
    e8ba:	4413      	add	r3, r2
    e8bc:	005b      	lsls	r3, r3, #1
    e8be:	461a      	mov	r2, r3
    e8c0:	4915      	ldr	r1, [pc, #84]	; (e918 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e8c2:	4816      	ldr	r0, [pc, #88]	; (e91c <_ZN9CDC_Class5writeEPKhj+0x84>)
    e8c4:	4b16      	ldr	r3, [pc, #88]	; (e920 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e8c6:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e8c8:	6879      	ldr	r1, [r7, #4]
    e8ca:	68b8      	ldr	r0, [r7, #8]
    e8cc:	4b15      	ldr	r3, [pc, #84]	; (e924 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e8ce:	4798      	blx	r3
    e8d0:	4603      	mov	r3, r0
    e8d2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e8d4:	68fb      	ldr	r3, [r7, #12]
    e8d6:	7d1b      	ldrb	r3, [r3, #20]
    e8d8:	b2db      	uxtb	r3, r3
    e8da:	f083 0301 	eor.w	r3, r3, #1
    e8de:	b2db      	uxtb	r3, r3
    e8e0:	2b00      	cmp	r3, #0
    e8e2:	d006      	beq.n	e8f2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e8e4:	68fb      	ldr	r3, [r7, #12]
    e8e6:	7c1b      	ldrb	r3, [r3, #16]
    e8e8:	b2db      	uxtb	r3, r3
    e8ea:	2b00      	cmp	r3, #0
    e8ec:	d001      	beq.n	e8f2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e8ee:	2301      	movs	r3, #1
    e8f0:	e000      	b.n	e8f4 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e8f2:	2300      	movs	r3, #0
    e8f4:	2b00      	cmp	r3, #0
    e8f6:	d000      	beq.n	e8fa <_ZN9CDC_Class5writeEPKhj+0x62>
    e8f8:	e7ec      	b.n	e8d4 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e8fa:	4808      	ldr	r0, [pc, #32]	; (e91c <_ZN9CDC_Class5writeEPKhj+0x84>)
    e8fc:	4b0a      	ldr	r3, [pc, #40]	; (e928 <_ZN9CDC_Class5writeEPKhj+0x90>)
    e8fe:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e900:	4905      	ldr	r1, [pc, #20]	; (e918 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e902:	4806      	ldr	r0, [pc, #24]	; (e91c <_ZN9CDC_Class5writeEPKhj+0x84>)
    e904:	4b09      	ldr	r3, [pc, #36]	; (e92c <_ZN9CDC_Class5writeEPKhj+0x94>)
    e906:	4798      	blx	r3
    e908:	e001      	b.n	e90e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e90a:	2300      	movs	r3, #0
    e90c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e90e:	697b      	ldr	r3, [r7, #20]
}
    e910:	4618      	mov	r0, r3
    e912:	3718      	adds	r7, #24
    e914:	46bd      	mov	sp, r7
    e916:	bd80      	pop	{r7, pc}
    e918:	0000e495 	.word	0x0000e495
    e91c:	200016b4 	.word	0x200016b4
    e920:	0000e16d 	.word	0x0000e16d
    e924:	0000c1f1 	.word	0x0000c1f1
    e928:	0000e099 	.word	0x0000e099
    e92c:	0000e115 	.word	0x0000e115

0000e930 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e930:	b480      	push	{r7}
    e932:	b083      	sub	sp, #12
    e934:	af00      	add	r7, sp, #0
    e936:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e938:	687b      	ldr	r3, [r7, #4]
    e93a:	7d5b      	ldrb	r3, [r3, #21]
    e93c:	b2db      	uxtb	r3, r3
    e93e:	2b00      	cmp	r3, #0
    e940:	d006      	beq.n	e950 <_ZN9CDC_Class9availableEv+0x20>
    e942:	687b      	ldr	r3, [r7, #4]
    e944:	7d1b      	ldrb	r3, [r3, #20]
    e946:	b2db      	uxtb	r3, r3
    e948:	2b00      	cmp	r3, #0
    e94a:	d001      	beq.n	e950 <_ZN9CDC_Class9availableEv+0x20>
    e94c:	2301      	movs	r3, #1
    e94e:	e000      	b.n	e952 <_ZN9CDC_Class9availableEv+0x22>
    e950:	2300      	movs	r3, #0
    e952:	2b00      	cmp	r3, #0
    e954:	d001      	beq.n	e95a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e956:	2301      	movs	r3, #1
    e958:	e000      	b.n	e95c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e95a:	2300      	movs	r3, #0
	}
	
}
    e95c:	4618      	mov	r0, r3
    e95e:	370c      	adds	r7, #12
    e960:	46bd      	mov	sp, r7
    e962:	bc80      	pop	{r7}
    e964:	4770      	bx	lr
	...

0000e968 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e968:	b580      	push	{r7, lr}
    e96a:	b082      	sub	sp, #8
    e96c:	af00      	add	r7, sp, #0
    e96e:	6078      	str	r0, [r7, #4]
    e970:	6039      	str	r1, [r7, #0]
    e972:	687b      	ldr	r3, [r7, #4]
    e974:	2b01      	cmp	r3, #1
    e976:	d154      	bne.n	ea22 <_Z41__static_initialization_and_destruction_0ii+0xba>
    e978:	683b      	ldr	r3, [r7, #0]
    e97a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e97e:	4293      	cmp	r3, r2
    e980:	d14f      	bne.n	ea22 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e982:	492a      	ldr	r1, [pc, #168]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e984:	482a      	ldr	r0, [pc, #168]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e986:	4b2b      	ldr	r3, [pc, #172]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e988:	4798      	blx	r3
    e98a:	4a2b      	ldr	r2, [pc, #172]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e98c:	492b      	ldr	r1, [pc, #172]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e98e:	4828      	ldr	r0, [pc, #160]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e990:	4b2b      	ldr	r3, [pc, #172]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e992:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e994:	492b      	ldr	r1, [pc, #172]	; (ea44 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e996:	482c      	ldr	r0, [pc, #176]	; (ea48 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e998:	4b26      	ldr	r3, [pc, #152]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e99a:	4798      	blx	r3
    e99c:	4a26      	ldr	r2, [pc, #152]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e99e:	4927      	ldr	r1, [pc, #156]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e9a0:	4829      	ldr	r0, [pc, #164]	; (ea48 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e9a2:	4b27      	ldr	r3, [pc, #156]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9a4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e9a6:	4929      	ldr	r1, [pc, #164]	; (ea4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e9a8:	4829      	ldr	r0, [pc, #164]	; (ea50 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e9aa:	4b22      	ldr	r3, [pc, #136]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e9ac:	4798      	blx	r3
    e9ae:	4a22      	ldr	r2, [pc, #136]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e9b0:	4922      	ldr	r1, [pc, #136]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e9b2:	4827      	ldr	r0, [pc, #156]	; (ea50 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e9b4:	4b22      	ldr	r3, [pc, #136]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9b6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e9b8:	4926      	ldr	r1, [pc, #152]	; (ea54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e9ba:	4827      	ldr	r0, [pc, #156]	; (ea58 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e9bc:	4b1d      	ldr	r3, [pc, #116]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e9be:	4798      	blx	r3
    e9c0:	4a1d      	ldr	r2, [pc, #116]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e9c2:	491e      	ldr	r1, [pc, #120]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e9c4:	4824      	ldr	r0, [pc, #144]	; (ea58 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e9c6:	4b1e      	ldr	r3, [pc, #120]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9c8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e9ca:	4924      	ldr	r1, [pc, #144]	; (ea5c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e9cc:	4824      	ldr	r0, [pc, #144]	; (ea60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e9ce:	4b19      	ldr	r3, [pc, #100]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e9d0:	4798      	blx	r3
    e9d2:	4a19      	ldr	r2, [pc, #100]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e9d4:	4919      	ldr	r1, [pc, #100]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e9d6:	4822      	ldr	r0, [pc, #136]	; (ea60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e9d8:	4b19      	ldr	r3, [pc, #100]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9da:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e9dc:	4921      	ldr	r1, [pc, #132]	; (ea64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e9de:	4822      	ldr	r0, [pc, #136]	; (ea68 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e9e0:	4b14      	ldr	r3, [pc, #80]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e9e2:	4798      	blx	r3
    e9e4:	4a14      	ldr	r2, [pc, #80]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e9e6:	4915      	ldr	r1, [pc, #84]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e9e8:	481f      	ldr	r0, [pc, #124]	; (ea68 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e9ea:	4b15      	ldr	r3, [pc, #84]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9ec:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e9ee:	491f      	ldr	r1, [pc, #124]	; (ea6c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    e9f0:	481f      	ldr	r0, [pc, #124]	; (ea70 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e9f2:	4b10      	ldr	r3, [pc, #64]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e9f4:	4798      	blx	r3
    e9f6:	4a10      	ldr	r2, [pc, #64]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e9f8:	4910      	ldr	r1, [pc, #64]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e9fa:	481d      	ldr	r0, [pc, #116]	; (ea70 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e9fc:	4b10      	ldr	r3, [pc, #64]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9fe:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    ea00:	491c      	ldr	r1, [pc, #112]	; (ea74 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    ea02:	481d      	ldr	r0, [pc, #116]	; (ea78 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    ea04:	4b0b      	ldr	r3, [pc, #44]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ea06:	4798      	blx	r3
    ea08:	4a0b      	ldr	r2, [pc, #44]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea0a:	490c      	ldr	r1, [pc, #48]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ea0c:	481a      	ldr	r0, [pc, #104]	; (ea78 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    ea0e:	4b0c      	ldr	r3, [pc, #48]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea10:	4798      	blx	r3
    ea12:	481a      	ldr	r0, [pc, #104]	; (ea7c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    ea14:	4b1a      	ldr	r3, [pc, #104]	; (ea80 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    ea16:	4798      	blx	r3
    ea18:	4a07      	ldr	r2, [pc, #28]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ea1a:	491a      	ldr	r1, [pc, #104]	; (ea84 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    ea1c:	4817      	ldr	r0, [pc, #92]	; (ea7c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    ea1e:	4b08      	ldr	r3, [pc, #32]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ea20:	4798      	blx	r3
    ea22:	bf00      	nop
    ea24:	3708      	adds	r7, #8
    ea26:	46bd      	mov	sp, r7
    ea28:	bd80      	pop	{r7, pc}
    ea2a:	bf00      	nop
    ea2c:	2000a8d8 	.word	0x2000a8d8
    ea30:	20001614 	.word	0x20001614
    ea34:	0000df39 	.word	0x0000df39
    ea38:	20000000 	.word	0x20000000
    ea3c:	0000df71 	.word	0x0000df71
    ea40:	0000fc95 	.word	0x0000fc95
    ea44:	2000a96c 	.word	0x2000a96c
    ea48:	20001634 	.word	0x20001634
    ea4c:	2000aa90 	.word	0x2000aa90
    ea50:	20001654 	.word	0x20001654
    ea54:	2000a98c 	.word	0x2000a98c
    ea58:	20001674 	.word	0x20001674
    ea5c:	2000aa50 	.word	0x2000aa50
    ea60:	20001694 	.word	0x20001694
    ea64:	2000aa70 	.word	0x2000aa70
    ea68:	200016b4 	.word	0x200016b4
    ea6c:	2000a948 	.word	0x2000a948
    ea70:	200016d4 	.word	0x200016d4
    ea74:	2000a9e8 	.word	0x2000a9e8
    ea78:	200016f4 	.word	0x200016f4
    ea7c:	20001718 	.word	0x20001718
    ea80:	0000e585 	.word	0x0000e585
    ea84:	0000e5cd 	.word	0x0000e5cd

0000ea88 <_GLOBAL__sub_I_ptrCDCClass>:
    ea88:	b580      	push	{r7, lr}
    ea8a:	af00      	add	r7, sp, #0
    ea8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea90:	2001      	movs	r0, #1
    ea92:	4b01      	ldr	r3, [pc, #4]	; (ea98 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    ea94:	4798      	blx	r3
    ea96:	bd80      	pop	{r7, pc}
    ea98:	0000e969 	.word	0x0000e969

0000ea9c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    ea9c:	b580      	push	{r7, lr}
    ea9e:	b086      	sub	sp, #24
    eaa0:	af00      	add	r7, sp, #0
    eaa2:	60f8      	str	r0, [r7, #12]
    eaa4:	60b9      	str	r1, [r7, #8]
    eaa6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    eaa8:	2300      	movs	r3, #0
    eaaa:	617b      	str	r3, [r7, #20]
  while (size--) {
    eaac:	687b      	ldr	r3, [r7, #4]
    eaae:	1e5a      	subs	r2, r3, #1
    eab0:	607a      	str	r2, [r7, #4]
    eab2:	2b00      	cmp	r3, #0
    eab4:	bf14      	ite	ne
    eab6:	2301      	movne	r3, #1
    eab8:	2300      	moveq	r3, #0
    eaba:	b2db      	uxtb	r3, r3
    eabc:	2b00      	cmp	r3, #0
    eabe:	d016      	beq.n	eaee <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    eac0:	68fb      	ldr	r3, [r7, #12]
    eac2:	681b      	ldr	r3, [r3, #0]
    eac4:	681a      	ldr	r2, [r3, #0]
    eac6:	68bb      	ldr	r3, [r7, #8]
    eac8:	1c59      	adds	r1, r3, #1
    eaca:	60b9      	str	r1, [r7, #8]
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	4619      	mov	r1, r3
    ead0:	68f8      	ldr	r0, [r7, #12]
    ead2:	4790      	blx	r2
    ead4:	4603      	mov	r3, r0
    ead6:	2b00      	cmp	r3, #0
    ead8:	bf14      	ite	ne
    eada:	2301      	movne	r3, #1
    eadc:	2300      	moveq	r3, #0
    eade:	b2db      	uxtb	r3, r3
    eae0:	2b00      	cmp	r3, #0
    eae2:	d003      	beq.n	eaec <_ZN5Print5writeEPKhj+0x50>
    eae4:	697b      	ldr	r3, [r7, #20]
    eae6:	3301      	adds	r3, #1
    eae8:	617b      	str	r3, [r7, #20]
  while (size--) {
    eaea:	e7df      	b.n	eaac <_ZN5Print5writeEPKhj+0x10>
    else break;
    eaec:	bf00      	nop
  }
  return n;
    eaee:	697b      	ldr	r3, [r7, #20]
}
    eaf0:	4618      	mov	r0, r3
    eaf2:	3718      	adds	r7, #24
    eaf4:	46bd      	mov	sp, r7
    eaf6:	bd80      	pop	{r7, pc}

0000eaf8 <hri_port_read_DIR_reg>:
{
    eaf8:	b480      	push	{r7}
    eafa:	b083      	sub	sp, #12
    eafc:	af00      	add	r7, sp, #0
    eafe:	6078      	str	r0, [r7, #4]
    eb00:	460b      	mov	r3, r1
    eb02:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    eb04:	78fb      	ldrb	r3, [r7, #3]
    eb06:	687a      	ldr	r2, [r7, #4]
    eb08:	01db      	lsls	r3, r3, #7
    eb0a:	4413      	add	r3, r2
    eb0c:	681b      	ldr	r3, [r3, #0]
}
    eb0e:	4618      	mov	r0, r3
    eb10:	370c      	adds	r7, #12
    eb12:	46bd      	mov	sp, r7
    eb14:	bc80      	pop	{r7}
    eb16:	4770      	bx	lr

0000eb18 <hri_port_read_OUT_reg>:
{
    eb18:	b480      	push	{r7}
    eb1a:	b083      	sub	sp, #12
    eb1c:	af00      	add	r7, sp, #0
    eb1e:	6078      	str	r0, [r7, #4]
    eb20:	460b      	mov	r3, r1
    eb22:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    eb24:	78fb      	ldrb	r3, [r7, #3]
    eb26:	687a      	ldr	r2, [r7, #4]
    eb28:	01db      	lsls	r3, r3, #7
    eb2a:	4413      	add	r3, r2
    eb2c:	3310      	adds	r3, #16
    eb2e:	681b      	ldr	r3, [r3, #0]
}
    eb30:	4618      	mov	r0, r3
    eb32:	370c      	adds	r7, #12
    eb34:	46bd      	mov	sp, r7
    eb36:	bc80      	pop	{r7}
    eb38:	4770      	bx	lr

0000eb3a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    eb3a:	b480      	push	{r7}
    eb3c:	b083      	sub	sp, #12
    eb3e:	af00      	add	r7, sp, #0
    eb40:	6078      	str	r0, [r7, #4]
    eb42:	460b      	mov	r3, r1
    eb44:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    eb46:	78fb      	ldrb	r3, [r7, #3]
    eb48:	687a      	ldr	r2, [r7, #4]
    eb4a:	01db      	lsls	r3, r3, #7
    eb4c:	4413      	add	r3, r2
    eb4e:	3320      	adds	r3, #32
    eb50:	681b      	ldr	r3, [r3, #0]
}
    eb52:	4618      	mov	r0, r3
    eb54:	370c      	adds	r7, #12
    eb56:	46bd      	mov	sp, r7
    eb58:	bc80      	pop	{r7}
    eb5a:	4770      	bx	lr

0000eb5c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    eb5c:	b580      	push	{r7, lr}
    eb5e:	b086      	sub	sp, #24
    eb60:	af00      	add	r7, sp, #0
    eb62:	4603      	mov	r3, r0
    eb64:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    eb66:	f107 030c 	add.w	r3, r7, #12
    eb6a:	4618      	mov	r0, r3
    eb6c:	4b13      	ldr	r3, [pc, #76]	; (ebbc <_gpio_get_level+0x60>)
    eb6e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    eb70:	79fb      	ldrb	r3, [r7, #7]
    eb72:	4619      	mov	r1, r3
    eb74:	4812      	ldr	r0, [pc, #72]	; (ebc0 <_gpio_get_level+0x64>)
    eb76:	4b13      	ldr	r3, [pc, #76]	; (ebc4 <_gpio_get_level+0x68>)
    eb78:	4798      	blx	r3
    eb7a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    eb7c:	79fb      	ldrb	r3, [r7, #7]
    eb7e:	4619      	mov	r1, r3
    eb80:	480f      	ldr	r0, [pc, #60]	; (ebc0 <_gpio_get_level+0x64>)
    eb82:	4b11      	ldr	r3, [pc, #68]	; (ebc8 <_gpio_get_level+0x6c>)
    eb84:	4798      	blx	r3
    eb86:	4602      	mov	r2, r0
    eb88:	697b      	ldr	r3, [r7, #20]
    eb8a:	43db      	mvns	r3, r3
    eb8c:	4013      	ands	r3, r2
    eb8e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    eb90:	79fb      	ldrb	r3, [r7, #7]
    eb92:	4619      	mov	r1, r3
    eb94:	480a      	ldr	r0, [pc, #40]	; (ebc0 <_gpio_get_level+0x64>)
    eb96:	4b0d      	ldr	r3, [pc, #52]	; (ebcc <_gpio_get_level+0x70>)
    eb98:	4798      	blx	r3
    eb9a:	4602      	mov	r2, r0
    eb9c:	697b      	ldr	r3, [r7, #20]
    eb9e:	4013      	ands	r3, r2
    eba0:	693a      	ldr	r2, [r7, #16]
    eba2:	4313      	orrs	r3, r2
    eba4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    eba6:	f107 030c 	add.w	r3, r7, #12
    ebaa:	4618      	mov	r0, r3
    ebac:	4b08      	ldr	r3, [pc, #32]	; (ebd0 <_gpio_get_level+0x74>)
    ebae:	4798      	blx	r3

	return tmp;
    ebb0:	693b      	ldr	r3, [r7, #16]
}
    ebb2:	4618      	mov	r0, r3
    ebb4:	3718      	adds	r7, #24
    ebb6:	46bd      	mov	sp, r7
    ebb8:	bd80      	pop	{r7, pc}
    ebba:	bf00      	nop
    ebbc:	0000b00d 	.word	0x0000b00d
    ebc0:	41008000 	.word	0x41008000
    ebc4:	0000eaf9 	.word	0x0000eaf9
    ebc8:	0000eb3b 	.word	0x0000eb3b
    ebcc:	0000eb19 	.word	0x0000eb19
    ebd0:	0000b033 	.word	0x0000b033

0000ebd4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    ebd4:	b580      	push	{r7, lr}
    ebd6:	b082      	sub	sp, #8
    ebd8:	af00      	add	r7, sp, #0
    ebda:	4603      	mov	r3, r0
    ebdc:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    ebde:	79fb      	ldrb	r3, [r7, #7]
    ebe0:	115b      	asrs	r3, r3, #5
    ebe2:	b2db      	uxtb	r3, r3
    ebe4:	4618      	mov	r0, r3
    ebe6:	4b09      	ldr	r3, [pc, #36]	; (ec0c <gpio_get_pin_level+0x38>)
    ebe8:	4798      	blx	r3
    ebea:	4601      	mov	r1, r0
    ebec:	79fb      	ldrb	r3, [r7, #7]
    ebee:	f003 031f 	and.w	r3, r3, #31
    ebf2:	2201      	movs	r2, #1
    ebf4:	fa02 f303 	lsl.w	r3, r2, r3
    ebf8:	400b      	ands	r3, r1
    ebfa:	2b00      	cmp	r3, #0
    ebfc:	bf14      	ite	ne
    ebfe:	2301      	movne	r3, #1
    ec00:	2300      	moveq	r3, #0
    ec02:	b2db      	uxtb	r3, r3
}
    ec04:	4618      	mov	r0, r3
    ec06:	3708      	adds	r7, #8
    ec08:	46bd      	mov	sp, r7
    ec0a:	bd80      	pop	{r7, pc}
    ec0c:	0000eb5d 	.word	0x0000eb5d

0000ec10 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    ec10:	b480      	push	{r7}
    ec12:	b083      	sub	sp, #12
    ec14:	af00      	add	r7, sp, #0
    ec16:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    ec18:	4b06      	ldr	r3, [pc, #24]	; (ec34 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ec1a:	681b      	ldr	r3, [r3, #0]
    ec1c:	2201      	movs	r2, #1
    ec1e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    ec20:	4b04      	ldr	r3, [pc, #16]	; (ec34 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ec22:	681b      	ldr	r3, [r3, #0]
    ec24:	2200      	movs	r2, #0
    ec26:	705a      	strb	r2, [r3, #1]
}
    ec28:	bf00      	nop
    ec2a:	370c      	adds	r7, #12
    ec2c:	46bd      	mov	sp, r7
    ec2e:	bc80      	pop	{r7}
    ec30:	4770      	bx	lr
    ec32:	bf00      	nop
    ec34:	20001878 	.word	0x20001878

0000ec38 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    ec38:	b580      	push	{r7, lr}
    ec3a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    ec3c:	2040      	movs	r0, #64	; 0x40
    ec3e:	4b0a      	ldr	r3, [pc, #40]	; (ec68 <_ZL10USBPluggedv+0x30>)
    ec40:	4798      	blx	r3
    ec42:	4603      	mov	r3, r0
    ec44:	2b00      	cmp	r3, #0
    ec46:	d004      	beq.n	ec52 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    ec48:	4b08      	ldr	r3, [pc, #32]	; (ec6c <_ZL10USBPluggedv+0x34>)
    ec4a:	681b      	ldr	r3, [r3, #0]
    ec4c:	2201      	movs	r2, #1
    ec4e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    ec50:	e007      	b.n	ec62 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    ec52:	4b06      	ldr	r3, [pc, #24]	; (ec6c <_ZL10USBPluggedv+0x34>)
    ec54:	681b      	ldr	r3, [r3, #0]
    ec56:	2200      	movs	r2, #0
    ec58:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    ec5a:	4b04      	ldr	r3, [pc, #16]	; (ec6c <_ZL10USBPluggedv+0x34>)
    ec5c:	681b      	ldr	r3, [r3, #0]
    ec5e:	2200      	movs	r2, #0
    ec60:	701a      	strb	r2, [r3, #0]
}
    ec62:	bf00      	nop
    ec64:	bd80      	pop	{r7, pc}
    ec66:	bf00      	nop
    ec68:	0000ebd5 	.word	0x0000ebd5
    ec6c:	20001878 	.word	0x20001878

0000ec70 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    ec70:	b480      	push	{r7}
    ec72:	b083      	sub	sp, #12
    ec74:	af00      	add	r7, sp, #0
    ec76:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    ec78:	4a04      	ldr	r2, [pc, #16]	; (ec8c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    ec7a:	687b      	ldr	r3, [r7, #4]
    ec7c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    ec7e:	687b      	ldr	r3, [r7, #4]
    ec80:	4618      	mov	r0, r3
    ec82:	370c      	adds	r7, #12
    ec84:	46bd      	mov	sp, r7
    ec86:	bc80      	pop	{r7}
    ec88:	4770      	bx	lr
    ec8a:	bf00      	nop
    ec8c:	20001878 	.word	0x20001878

0000ec90 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    ec90:	b480      	push	{r7}
    ec92:	b083      	sub	sp, #12
    ec94:	af00      	add	r7, sp, #0
    ec96:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    ec98:	687b      	ldr	r3, [r7, #4]
    ec9a:	4618      	mov	r0, r3
    ec9c:	370c      	adds	r7, #12
    ec9e:	46bd      	mov	sp, r7
    eca0:	bc80      	pop	{r7}
    eca2:	4770      	bx	lr

0000eca4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    eca4:	b580      	push	{r7, lr}
    eca6:	b082      	sub	sp, #8
    eca8:	af00      	add	r7, sp, #0
    ecaa:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    ecac:	491e      	ldr	r1, [pc, #120]	; (ed28 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    ecae:	2040      	movs	r0, #64	; 0x40
    ecb0:	4b1e      	ldr	r3, [pc, #120]	; (ed2c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    ecb2:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    ecb4:	481e      	ldr	r0, [pc, #120]	; (ed30 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ecb6:	4b1f      	ldr	r3, [pc, #124]	; (ed34 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    ecb8:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    ecba:	2040      	movs	r0, #64	; 0x40
    ecbc:	4b1e      	ldr	r3, [pc, #120]	; (ed38 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    ecbe:	4798      	blx	r3
    ecc0:	4603      	mov	r3, r0
    ecc2:	461a      	mov	r2, r3
    ecc4:	687b      	ldr	r3, [r7, #4]
    ecc6:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    ecc8:	687b      	ldr	r3, [r7, #4]
    ecca:	78db      	ldrb	r3, [r3, #3]
    eccc:	2b00      	cmp	r3, #0
    ecce:	d021      	beq.n	ed14 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    ecd0:	687b      	ldr	r3, [r7, #4]
    ecd2:	2200      	movs	r2, #0
    ecd4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    ecd6:	687b      	ldr	r3, [r7, #4]
    ecd8:	2201      	movs	r2, #1
    ecda:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    ecdc:	f44f 7216 	mov.w	r2, #600	; 0x258
    ece0:	4916      	ldr	r1, [pc, #88]	; (ed3c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    ece2:	4813      	ldr	r0, [pc, #76]	; (ed30 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ece4:	4b16      	ldr	r3, [pc, #88]	; (ed40 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    ece6:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    ece8:	4816      	ldr	r0, [pc, #88]	; (ed44 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    ecea:	4b17      	ldr	r3, [pc, #92]	; (ed48 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    ecec:	4798      	blx	r3
    ecee:	4603      	mov	r3, r0
    ecf0:	f083 0301 	eor.w	r3, r3, #1
    ecf4:	b2db      	uxtb	r3, r3
    ecf6:	2b00      	cmp	r3, #0
    ecf8:	d008      	beq.n	ed0c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    ecfa:	687b      	ldr	r3, [r7, #4]
    ecfc:	789b      	ldrb	r3, [r3, #2]
    ecfe:	b2db      	uxtb	r3, r3
    ed00:	2b00      	cmp	r3, #0
    ed02:	d0f1      	beq.n	ece8 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    ed04:	687b      	ldr	r3, [r7, #4]
    ed06:	2200      	movs	r2, #0
    ed08:	701a      	strb	r2, [r3, #0]
					return;
    ed0a:	e009      	b.n	ed20 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    ed0c:	4808      	ldr	r0, [pc, #32]	; (ed30 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    ed0e:	4b0f      	ldr	r3, [pc, #60]	; (ed4c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    ed10:	4798      	blx	r3
    ed12:	e005      	b.n	ed20 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    ed14:	687b      	ldr	r3, [r7, #4]
    ed16:	2200      	movs	r2, #0
    ed18:	701a      	strb	r2, [r3, #0]
			plugged=false;
    ed1a:	687b      	ldr	r3, [r7, #4]
    ed1c:	2200      	movs	r2, #0
    ed1e:	705a      	strb	r2, [r3, #1]
		}
		
}
    ed20:	3708      	adds	r7, #8
    ed22:	46bd      	mov	sp, r7
    ed24:	bd80      	pop	{r7, pc}
    ed26:	bf00      	nop
    ed28:	0000ec39 	.word	0x0000ec39
    ed2c:	000022f9 	.word	0x000022f9
    ed30:	20001818 	.word	0x20001818
    ed34:	0000e025 	.word	0x0000e025
    ed38:	0000ebd5 	.word	0x0000ebd5
    ed3c:	0000ec11 	.word	0x0000ec11
    ed40:	0000e16d 	.word	0x0000e16d
    ed44:	20001718 	.word	0x20001718
    ed48:	0000e63d 	.word	0x0000e63d
    ed4c:	0000e099 	.word	0x0000e099

0000ed50 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    ed50:	b580      	push	{r7, lr}
    ed52:	b082      	sub	sp, #8
    ed54:	af00      	add	r7, sp, #0
    ed56:	6078      	str	r0, [r7, #4]
    ed58:	6039      	str	r1, [r7, #0]
    ed5a:	687b      	ldr	r3, [r7, #4]
    ed5c:	2b01      	cmp	r3, #1
    ed5e:	d14c      	bne.n	edfa <_Z41__static_initialization_and_destruction_0ii+0xaa>
    ed60:	683b      	ldr	r3, [r7, #0]
    ed62:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ed66:	4293      	cmp	r3, r2
    ed68:	d147      	bne.n	edfa <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ed6a:	4926      	ldr	r1, [pc, #152]	; (ee04 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ed6c:	4826      	ldr	r0, [pc, #152]	; (ee08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ed6e:	4b27      	ldr	r3, [pc, #156]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed70:	4798      	blx	r3
    ed72:	4a27      	ldr	r2, [pc, #156]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed74:	4927      	ldr	r1, [pc, #156]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed76:	4824      	ldr	r0, [pc, #144]	; (ee08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ed78:	4b27      	ldr	r3, [pc, #156]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed7a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ed7c:	4927      	ldr	r1, [pc, #156]	; (ee1c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ed7e:	4828      	ldr	r0, [pc, #160]	; (ee20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ed80:	4b22      	ldr	r3, [pc, #136]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed82:	4798      	blx	r3
    ed84:	4a22      	ldr	r2, [pc, #136]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed86:	4923      	ldr	r1, [pc, #140]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed88:	4825      	ldr	r0, [pc, #148]	; (ee20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ed8a:	4b23      	ldr	r3, [pc, #140]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed8c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ed8e:	4925      	ldr	r1, [pc, #148]	; (ee24 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ed90:	4825      	ldr	r0, [pc, #148]	; (ee28 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ed92:	4b1e      	ldr	r3, [pc, #120]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ed94:	4798      	blx	r3
    ed96:	4a1e      	ldr	r2, [pc, #120]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ed98:	491e      	ldr	r1, [pc, #120]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ed9a:	4823      	ldr	r0, [pc, #140]	; (ee28 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ed9c:	4b1e      	ldr	r3, [pc, #120]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ed9e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    eda0:	4922      	ldr	r1, [pc, #136]	; (ee2c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    eda2:	4823      	ldr	r0, [pc, #140]	; (ee30 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    eda4:	4b19      	ldr	r3, [pc, #100]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eda6:	4798      	blx	r3
    eda8:	4a19      	ldr	r2, [pc, #100]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    edaa:	491a      	ldr	r1, [pc, #104]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    edac:	4820      	ldr	r0, [pc, #128]	; (ee30 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    edae:	4b1a      	ldr	r3, [pc, #104]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    edb0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    edb2:	4920      	ldr	r1, [pc, #128]	; (ee34 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    edb4:	4820      	ldr	r0, [pc, #128]	; (ee38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    edb6:	4b15      	ldr	r3, [pc, #84]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    edb8:	4798      	blx	r3
    edba:	4a15      	ldr	r2, [pc, #84]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    edbc:	4915      	ldr	r1, [pc, #84]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    edbe:	481e      	ldr	r0, [pc, #120]	; (ee38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    edc0:	4b15      	ldr	r3, [pc, #84]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    edc2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    edc4:	491d      	ldr	r1, [pc, #116]	; (ee3c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    edc6:	481e      	ldr	r0, [pc, #120]	; (ee40 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    edc8:	4b10      	ldr	r3, [pc, #64]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    edca:	4798      	blx	r3
    edcc:	4a10      	ldr	r2, [pc, #64]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    edce:	4911      	ldr	r1, [pc, #68]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    edd0:	481b      	ldr	r0, [pc, #108]	; (ee40 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    edd2:	4b11      	ldr	r3, [pc, #68]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    edd4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    edd6:	491b      	ldr	r1, [pc, #108]	; (ee44 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    edd8:	481b      	ldr	r0, [pc, #108]	; (ee48 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    edda:	4b0c      	ldr	r3, [pc, #48]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eddc:	4798      	blx	r3
    edde:	4a0c      	ldr	r2, [pc, #48]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ede0:	490c      	ldr	r1, [pc, #48]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ede2:	4819      	ldr	r0, [pc, #100]	; (ee48 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ede4:	4b0c      	ldr	r3, [pc, #48]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ede6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    ede8:	4918      	ldr	r1, [pc, #96]	; (ee4c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    edea:	4819      	ldr	r0, [pc, #100]	; (ee50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    edec:	4b07      	ldr	r3, [pc, #28]	; (ee0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    edee:	4798      	blx	r3
    edf0:	4a07      	ldr	r2, [pc, #28]	; (ee10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    edf2:	4908      	ldr	r1, [pc, #32]	; (ee14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    edf4:	4816      	ldr	r0, [pc, #88]	; (ee50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    edf6:	4b08      	ldr	r3, [pc, #32]	; (ee18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    edf8:	4798      	blx	r3
    edfa:	bf00      	nop
    edfc:	3708      	adds	r7, #8
    edfe:	46bd      	mov	sp, r7
    ee00:	bd80      	pop	{r7, pc}
    ee02:	bf00      	nop
    ee04:	2000a8d8 	.word	0x2000a8d8
    ee08:	20001778 	.word	0x20001778
    ee0c:	0000df39 	.word	0x0000df39
    ee10:	20000000 	.word	0x20000000
    ee14:	0000df71 	.word	0x0000df71
    ee18:	0000fc95 	.word	0x0000fc95
    ee1c:	2000a96c 	.word	0x2000a96c
    ee20:	20001798 	.word	0x20001798
    ee24:	2000aa90 	.word	0x2000aa90
    ee28:	200017b8 	.word	0x200017b8
    ee2c:	2000a98c 	.word	0x2000a98c
    ee30:	200017d8 	.word	0x200017d8
    ee34:	2000aa50 	.word	0x2000aa50
    ee38:	200017f8 	.word	0x200017f8
    ee3c:	2000aa70 	.word	0x2000aa70
    ee40:	20001818 	.word	0x20001818
    ee44:	2000a948 	.word	0x2000a948
    ee48:	20001838 	.word	0x20001838
    ee4c:	2000a9e8 	.word	0x2000a9e8
    ee50:	20001858 	.word	0x20001858

0000ee54 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    ee54:	b580      	push	{r7, lr}
    ee56:	af00      	add	r7, sp, #0
    ee58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ee5c:	2001      	movs	r0, #1
    ee5e:	4b01      	ldr	r3, [pc, #4]	; (ee64 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    ee60:	4798      	blx	r3
    ee62:	bd80      	pop	{r7, pc}
    ee64:	0000ed51 	.word	0x0000ed51

0000ee68 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ee68:	b480      	push	{r7}
    ee6a:	b083      	sub	sp, #12
    ee6c:	af00      	add	r7, sp, #0
    ee6e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ee70:	2300      	movs	r3, #0
	}
    ee72:	4618      	mov	r0, r3
    ee74:	370c      	adds	r7, #12
    ee76:	46bd      	mov	sp, r7
    ee78:	bc80      	pop	{r7}
    ee7a:	4770      	bx	lr

0000ee7c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ee7c:	b480      	push	{r7}
    ee7e:	af00      	add	r7, sp, #0
		}
    ee80:	bf00      	nop
    ee82:	46bd      	mov	sp, r7
    ee84:	bc80      	pop	{r7}
    ee86:	4770      	bx	lr

0000ee88 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
    ee88:	b510      	push	{r4, lr}
    ee8a:	4604      	mov	r4, r0
    ee8c:	4b06      	ldr	r3, [pc, #24]	; (eea8 <_ZN18Event_Logger_ClassD1Ev+0x20>)
    ee8e:	f840 3bb4 	str.w	r3, [r0], #180
    ee92:	4b06      	ldr	r3, [pc, #24]	; (eeac <_ZN18Event_Logger_ClassD1Ev+0x24>)
    ee94:	4798      	blx	r3
    ee96:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    ee9a:	4b05      	ldr	r3, [pc, #20]	; (eeb0 <_ZN18Event_Logger_ClassD1Ev+0x28>)
    ee9c:	4798      	blx	r3
    ee9e:	4620      	mov	r0, r4
    eea0:	4b04      	ldr	r3, [pc, #16]	; (eeb4 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
    eea2:	4798      	blx	r3
{
} //~Event_Logger_Class
    eea4:	4620      	mov	r0, r4
    eea6:	bd10      	pop	{r4, pc}
    eea8:	00010b80 	.word	0x00010b80
    eeac:	0000f291 	.word	0x0000f291
    eeb0:	0000f1ff 	.word	0x0000f1ff
    eeb4:	0000f97d 	.word	0x0000f97d

0000eeb8 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
    eeb8:	b510      	push	{r4, lr}
    eeba:	4604      	mov	r4, r0
    eebc:	4b11      	ldr	r3, [pc, #68]	; (ef04 <_ZN18Event_Logger_ClassC1Ev+0x4c>)
    eebe:	4798      	blx	r3
    eec0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    eec4:	4b10      	ldr	r3, [pc, #64]	; (ef08 <_ZN18Event_Logger_ClassC1Ev+0x50>)
    eec6:	4798      	blx	r3
    eec8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    eecc:	4b0f      	ldr	r3, [pc, #60]	; (ef0c <_ZN18Event_Logger_ClassC1Ev+0x54>)
    eece:	4798      	blx	r3
    eed0:	4b0f      	ldr	r3, [pc, #60]	; (ef10 <_ZN18Event_Logger_ClassC1Ev+0x58>)
    eed2:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
    eed4:	230a      	movs	r3, #10
    eed6:	f884 36f7 	strb.w	r3, [r4, #1783]	; 0x6f7
	cal=&staticClock;
    eeda:	4b0e      	ldr	r3, [pc, #56]	; (ef14 <_ZN18Event_Logger_ClassC1Ev+0x5c>)
    eedc:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
	logger_text=(char*)text_buffer_local;
    eee0:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
    eee4:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
	logger_module=(char*)module_buffer_local;
    eee8:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    eeec:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_number=(char*)number_buffer_local;
    eef0:	f503 7388 	add.w	r3, r3, #272	; 0x110
    eef4:	f8c4 3710 	str.w	r3, [r4, #1808]	; 0x710
	info_text=local_info_text;
    eef8:	4b07      	ldr	r3, [pc, #28]	; (ef18 <_ZN18Event_Logger_ClassC1Ev+0x60>)
    eefa:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
} //Event_Logger_Class
    eefe:	4620      	mov	r0, r4
    ef00:	bd10      	pop	{r4, pc}
    ef02:	bf00      	nop
    ef04:	0000f90d 	.word	0x0000f90d
    ef08:	0000f1fd 	.word	0x0000f1fd
    ef0c:	0000f241 	.word	0x0000f241
    ef10:	00010b80 	.word	0x00010b80
    ef14:	20001880 	.word	0x20001880
    ef18:	20000210 	.word	0x20000210

0000ef1c <_ZN18Event_Logger_Class9SaveEventEPh>:
	nullDateTime.time.hour = 0x0;
	nullDateTime.time.min  = 0x0;
	nullDateTime.time.sec  = 0x0;
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
    ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef20:	4604      	mov	r4, r0
    ef22:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
    ef24:	f8d0 05f4 	ldr.w	r0, [r0, #1524]	; 0x5f4
    ef28:	f504 66c0 	add.w	r6, r4, #1536	; 0x600
    ef2c:	6803      	ldr	r3, [r0, #0]
    ef2e:	681b      	ldr	r3, [r3, #0]
    ef30:	4631      	mov	r1, r6
    ef32:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
    ef34:	f204 67bc 	addw	r7, r4, #1724	; 0x6bc
    ef38:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
    ef3c:	681a      	ldr	r2, [r3, #0]
    ef3e:	685b      	ldr	r3, [r3, #4]
    ef40:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
    ef44:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
    ef46:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
    ef4a:	4629      	mov	r1, r5
    ef4c:	4640      	mov	r0, r8
    ef4e:	4b32      	ldr	r3, [pc, #200]	; (f018 <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
    ef50:	4798      	blx	r3
    ef52:	f884 06f8 	strb.w	r0, [r4, #1784]	; 0x6f8
	if (semiColonPosition>0)
    ef56:	b130      	cbz	r0, ef66 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
    ef58:	2807      	cmp	r0, #7
    ef5a:	dc2d      	bgt.n	efb8 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
    ef5c:	4602      	mov	r2, r0
    ef5e:	4629      	mov	r1, r5
    ef60:	4638      	mov	r0, r7
    ef62:	4b2e      	ldr	r3, [pc, #184]	; (f01c <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
    ef64:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
    ef66:	4628      	mov	r0, r5
    ef68:	4b2d      	ldr	r3, [pc, #180]	; (f020 <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
    ef6a:	4798      	blx	r3
    ef6c:	f884 0718 	strb.w	r0, [r4, #1816]	; 0x718
    ef70:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
    ef72:	2a33      	cmp	r2, #51	; 0x33
    ef74:	dd26      	ble.n	efc4 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
    ef76:	4629      	mov	r1, r5
    ef78:	4640      	mov	r0, r8
    ef7a:	4b2a      	ldr	r3, [pc, #168]	; (f024 <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
    ef7c:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
    ef7e:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
    ef82:	4429      	add	r1, r5
    ef84:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
    ef88:	f101 0230 	add.w	r2, r1, #48	; 0x30
    ef8c:	f8d1 e000 	ldr.w	lr, [r1]
    ef90:	684f      	ldr	r7, [r1, #4]
    ef92:	688d      	ldr	r5, [r1, #8]
    ef94:	68c8      	ldr	r0, [r1, #12]
    ef96:	f8c3 e000 	str.w	lr, [r3]
    ef9a:	605f      	str	r7, [r3, #4]
    ef9c:	609d      	str	r5, [r3, #8]
    ef9e:	60d8      	str	r0, [r3, #12]
    efa0:	3110      	adds	r1, #16
    efa2:	3310      	adds	r3, #16
    efa4:	4291      	cmp	r1, r2
    efa6:	d1f1      	bne.n	ef8c <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
    efa8:	8808      	ldrh	r0, [r1, #0]
    efaa:	788a      	ldrb	r2, [r1, #2]
    efac:	8018      	strh	r0, [r3, #0]
    efae:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
    efb0:	2333      	movs	r3, #51	; 0x33
    efb2:	f884 3718 	strb.w	r3, [r4, #1816]	; 0x718
    efb6:	e012      	b.n	efde <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
    efb8:	682a      	ldr	r2, [r5, #0]
    efba:	686b      	ldr	r3, [r5, #4]
    efbc:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
    efc0:	607b      	str	r3, [r7, #4]
    efc2:	e7d0      	b.n	ef66 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
    efc4:	f894 16f8 	ldrb.w	r1, [r4, #1784]	; 0x6f8
    efc8:	4429      	add	r1, r5
    efca:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
    efce:	4b13      	ldr	r3, [pc, #76]	; (f01c <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
    efd0:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
    efd2:	f894 3718 	ldrb.w	r3, [r4, #1816]	; 0x718
    efd6:	4423      	add	r3, r4
    efd8:	220a      	movs	r2, #10
    efda:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
    efde:	f8d4 05f4 	ldr.w	r0, [r4, #1524]	; 0x5f4
    efe2:	6803      	ldr	r3, [r0, #0]
    efe4:	685b      	ldr	r3, [r3, #4]
    efe6:	4631      	mov	r1, r6
    efe8:	4798      	blx	r3
    efea:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if (currentTimestamp>0)
    efee:	b978      	cbnz	r0, f010 <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
    eff0:	f04f 33ff 	mov.w	r3, #4294967295
    eff4:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
	}
	
	StackEventEntry(&entry,text_length+1);
    eff8:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    effc:	3201      	adds	r2, #1
    effe:	b2d2      	uxtb	r2, r2
    f000:	f504 61d7 	add.w	r1, r4, #1720	; 0x6b8
    f004:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    f008:	4b07      	ldr	r3, [pc, #28]	; (f028 <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
    f00a:	4798      	blx	r3
    f00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
    f010:	f8c4 06b8 	str.w	r0, [r4, #1720]	; 0x6b8
    f014:	e7f0      	b.n	eff8 <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
    f016:	bf00      	nop
    f018:	0000f221 	.word	0x0000f221
    f01c:	000101d5 	.word	0x000101d5
    f020:	000104c1 	.word	0x000104c1
    f024:	0000f201 	.word	0x0000f201
    f028:	0000f2b5 	.word	0x0000f2b5

0000f02c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh>:
	cal->GetDateTime(&currentDateTime);
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
	return currentTimestamp;
}

void Event_Logger_Class::SaveEventIndexResult(char *text,uint8_t index, uint8_t result){
    f02c:	b570      	push	{r4, r5, r6, lr}
    f02e:	4604      	mov	r4, r0
    f030:	460d      	mov	r5, r1
    f032:	4610      	mov	r0, r2
	task_result	=(TaskResult)result;
    f034:	f884 3704 	strb.w	r3, [r4, #1796]	; 0x704

	itoa(index,logger_number,10);
    f038:	220a      	movs	r2, #10
    f03a:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
    f03e:	4b20      	ldr	r3, [pc, #128]	; (f0c0 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x94>)
    f040:	4798      	blx	r3
	strcpy(logger_text,text);
    f042:	4629      	mov	r1, r5
    f044:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
    f048:	4b1e      	ldr	r3, [pc, #120]	; (f0c4 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x98>)
    f04a:	4798      	blx	r3
	logger_module=strcat(logger_text,logger_number);
    f04c:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
    f050:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
    f054:	4b1c      	ldr	r3, [pc, #112]	; (f0c8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x9c>)
    f056:	4798      	blx	r3
    f058:	4605      	mov	r5, r0
    f05a:	f8c4 070c 	str.w	r0, [r4, #1804]	; 0x70c
	switch (task_result)
    f05e:	f894 3704 	ldrb.w	r3, [r4, #1796]	; 0x704
    f062:	b173      	cbz	r3, f082 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x56>
    f064:	2b01      	cmp	r3, #1
    f066:	d01e      	beq.n	f0a6 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x7a>
		case FAILLED :
			logger_module=strcat(logger_module," FAILLED");
		
		break;
		default:
			logger_module=strcat(logger_module," UNKNOWN");
    f068:	4b18      	ldr	r3, [pc, #96]	; (f0cc <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
    f06a:	4798      	blx	r3
    f06c:	4606      	mov	r6, r0
    f06e:	182a      	adds	r2, r5, r0
    f070:	4b17      	ldr	r3, [pc, #92]	; (f0d0 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa4>)
    f072:	cb03      	ldmia	r3!, {r0, r1}
    f074:	51a8      	str	r0, [r5, r6]
    f076:	6051      	str	r1, [r2, #4]
    f078:	781b      	ldrb	r3, [r3, #0]
    f07a:	7213      	strb	r3, [r2, #8]
    f07c:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
		/* Your code here */
		break;
    f080:	e00b      	b.n	f09a <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
			logger_module=strcat(logger_module," SUCCESS");
    f082:	4b12      	ldr	r3, [pc, #72]	; (f0cc <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
    f084:	4798      	blx	r3
    f086:	4606      	mov	r6, r0
    f088:	182a      	adds	r2, r5, r0
    f08a:	4b12      	ldr	r3, [pc, #72]	; (f0d4 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa8>)
    f08c:	cb03      	ldmia	r3!, {r0, r1}
    f08e:	51a8      	str	r0, [r5, r6]
    f090:	6051      	str	r1, [r2, #4]
    f092:	781b      	ldrb	r3, [r3, #0]
    f094:	7213      	strb	r3, [r2, #8]
    f096:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
	
}

void Event_Logger_Class::SaveEvent(char const * text){
	
	SaveEvent((uint8_t*)text);
    f09a:	f8d4 170c 	ldr.w	r1, [r4, #1804]	; 0x70c
    f09e:	4620      	mov	r0, r4
    f0a0:	4b0d      	ldr	r3, [pc, #52]	; (f0d8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xac>)
    f0a2:	4798      	blx	r3
    f0a4:	bd70      	pop	{r4, r5, r6, pc}
			logger_module=strcat(logger_module," FAILLED");
    f0a6:	4b09      	ldr	r3, [pc, #36]	; (f0cc <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
    f0a8:	4798      	blx	r3
    f0aa:	4606      	mov	r6, r0
    f0ac:	182a      	adds	r2, r5, r0
    f0ae:	4b0b      	ldr	r3, [pc, #44]	; (f0dc <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xb0>)
    f0b0:	cb03      	ldmia	r3!, {r0, r1}
    f0b2:	51a8      	str	r0, [r5, r6]
    f0b4:	6051      	str	r1, [r2, #4]
    f0b6:	781b      	ldrb	r3, [r3, #0]
    f0b8:	7213      	strb	r3, [r2, #8]
    f0ba:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
		break;
    f0be:	e7ec      	b.n	f09a <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
    f0c0:	0000f62d 	.word	0x0000f62d
    f0c4:	000103e5 	.word	0x000103e5
    f0c8:	000103a5 	.word	0x000103a5
    f0cc:	000104c1 	.word	0x000104c1
    f0d0:	00010bb8 	.word	0x00010bb8
    f0d4:	00010ba0 	.word	0x00010ba0
    f0d8:	0000ef1d 	.word	0x0000ef1d
    f0dc:	00010bac 	.word	0x00010bac

0000f0e0 <_ZN18Event_Logger_Class9SaveEventEPKc>:
void Event_Logger_Class::SaveEvent(char const * text){
    f0e0:	b508      	push	{r3, lr}
	SaveEvent((uint8_t*)text);
    f0e2:	4b01      	ldr	r3, [pc, #4]	; (f0e8 <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
    f0e4:	4798      	blx	r3
    f0e6:	bd08      	pop	{r3, pc}
    f0e8:	0000ef1d 	.word	0x0000ef1d

0000f0ec <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
    f0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f0f0:	4c30      	ldr	r4, [pc, #192]	; (f1b4 <_GLOBAL__sub_I_local_info_text+0xc8>)
    f0f2:	f504 758c 	add.w	r5, r4, #280	; 0x118
    f0f6:	4930      	ldr	r1, [pc, #192]	; (f1b8 <_GLOBAL__sub_I_local_info_text+0xcc>)
    f0f8:	4628      	mov	r0, r5
    f0fa:	4f30      	ldr	r7, [pc, #192]	; (f1bc <_GLOBAL__sub_I_local_info_text+0xd0>)
    f0fc:	47b8      	blx	r7
    f0fe:	4e30      	ldr	r6, [pc, #192]	; (f1c0 <_GLOBAL__sub_I_local_info_text+0xd4>)
    f100:	f8df 80f4 	ldr.w	r8, [pc, #244]	; f1f8 <_GLOBAL__sub_I_local_info_text+0x10c>
    f104:	4632      	mov	r2, r6
    f106:	4641      	mov	r1, r8
    f108:	4628      	mov	r0, r5
    f10a:	4d2e      	ldr	r5, [pc, #184]	; (f1c4 <_GLOBAL__sub_I_local_info_text+0xd8>)
    f10c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    f10e:	f504 799c 	add.w	r9, r4, #312	; 0x138
    f112:	492d      	ldr	r1, [pc, #180]	; (f1c8 <_GLOBAL__sub_I_local_info_text+0xdc>)
    f114:	4648      	mov	r0, r9
    f116:	47b8      	blx	r7
    f118:	4632      	mov	r2, r6
    f11a:	4641      	mov	r1, r8
    f11c:	4648      	mov	r0, r9
    f11e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    f120:	f504 79ac 	add.w	r9, r4, #344	; 0x158
    f124:	4929      	ldr	r1, [pc, #164]	; (f1cc <_GLOBAL__sub_I_local_info_text+0xe0>)
    f126:	4648      	mov	r0, r9
    f128:	47b8      	blx	r7
    f12a:	4632      	mov	r2, r6
    f12c:	4641      	mov	r1, r8
    f12e:	4648      	mov	r0, r9
    f130:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f132:	f504 79bc 	add.w	r9, r4, #376	; 0x178
    f136:	4926      	ldr	r1, [pc, #152]	; (f1d0 <_GLOBAL__sub_I_local_info_text+0xe4>)
    f138:	4648      	mov	r0, r9
    f13a:	47b8      	blx	r7
    f13c:	4632      	mov	r2, r6
    f13e:	4641      	mov	r1, r8
    f140:	4648      	mov	r0, r9
    f142:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    f144:	f504 79cc 	add.w	r9, r4, #408	; 0x198
    f148:	4922      	ldr	r1, [pc, #136]	; (f1d4 <_GLOBAL__sub_I_local_info_text+0xe8>)
    f14a:	4648      	mov	r0, r9
    f14c:	47b8      	blx	r7
    f14e:	4632      	mov	r2, r6
    f150:	4641      	mov	r1, r8
    f152:	4648      	mov	r0, r9
    f154:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f156:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
    f15a:	491f      	ldr	r1, [pc, #124]	; (f1d8 <_GLOBAL__sub_I_local_info_text+0xec>)
    f15c:	4648      	mov	r0, r9
    f15e:	47b8      	blx	r7
    f160:	4632      	mov	r2, r6
    f162:	4641      	mov	r1, r8
    f164:	4648      	mov	r0, r9
    f166:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f168:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
    f16c:	491b      	ldr	r1, [pc, #108]	; (f1dc <_GLOBAL__sub_I_local_info_text+0xf0>)
    f16e:	4648      	mov	r0, r9
    f170:	47b8      	blx	r7
    f172:	4632      	mov	r2, r6
    f174:	4641      	mov	r1, r8
    f176:	4648      	mov	r0, r9
    f178:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    f17a:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
    f17e:	4918      	ldr	r1, [pc, #96]	; (f1e0 <_GLOBAL__sub_I_local_info_text+0xf4>)
    f180:	4648      	mov	r0, r9
    f182:	47b8      	blx	r7
    f184:	4632      	mov	r2, r6
    f186:	4641      	mov	r1, r8
    f188:	4648      	mov	r0, r9
    f18a:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
    f18c:	4915      	ldr	r1, [pc, #84]	; (f1e4 <_GLOBAL__sub_I_local_info_text+0xf8>)
    f18e:	4620      	mov	r0, r4
    f190:	4b15      	ldr	r3, [pc, #84]	; (f1e8 <_GLOBAL__sub_I_local_info_text+0xfc>)
    f192:	4798      	blx	r3
    f194:	4632      	mov	r2, r6
    f196:	4915      	ldr	r1, [pc, #84]	; (f1ec <_GLOBAL__sub_I_local_info_text+0x100>)
    f198:	4620      	mov	r0, r4
    f19a:	47a8      	blx	r5
 Event_Logger_Class	logger;
    f19c:	f504 7406 	add.w	r4, r4, #536	; 0x218
    f1a0:	4620      	mov	r0, r4
    f1a2:	4b13      	ldr	r3, [pc, #76]	; (f1f0 <_GLOBAL__sub_I_local_info_text+0x104>)
    f1a4:	4798      	blx	r3
    f1a6:	4632      	mov	r2, r6
    f1a8:	4912      	ldr	r1, [pc, #72]	; (f1f4 <_GLOBAL__sub_I_local_info_text+0x108>)
    f1aa:	4620      	mov	r0, r4
    f1ac:	47a8      	blx	r5
    f1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f1b2:	bf00      	nop
    f1b4:	20001880 	.word	0x20001880
    f1b8:	2000a8d8 	.word	0x2000a8d8
    f1bc:	0000df39 	.word	0x0000df39
    f1c0:	20000000 	.word	0x20000000
    f1c4:	0000fc95 	.word	0x0000fc95
    f1c8:	2000a96c 	.word	0x2000a96c
    f1cc:	2000aa90 	.word	0x2000aa90
    f1d0:	2000a98c 	.word	0x2000a98c
    f1d4:	2000aa50 	.word	0x2000aa50
    f1d8:	2000aa70 	.word	0x2000aa70
    f1dc:	2000a948 	.word	0x2000a948
    f1e0:	2000a9e8 	.word	0x2000a9e8
    f1e4:	2000aab0 	.word	0x2000aab0
    f1e8:	0000f941 	.word	0x0000f941
    f1ec:	0000f97d 	.word	0x0000f97d
    f1f0:	0000eeb9 	.word	0x0000eeb9
    f1f4:	0000ee89 	.word	0x0000ee89
    f1f8:	0000df71 	.word	0x0000df71

0000f1fc <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
    f1fc:	4770      	bx	lr

0000f1fe <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
    f1fe:	4770      	bx	lr

0000f200 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
    f200:	b538      	push	{r3, r4, r5, lr}
    f202:	4605      	mov	r5, r0
    f204:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
    f206:	4608      	mov	r0, r1
    f208:	4b04      	ldr	r3, [pc, #16]	; (f21c <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
    f20a:	4798      	blx	r3
    f20c:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
    f20e:	b2c0      	uxtb	r0, r0
    f210:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
    f212:	bfc4      	itt	gt
    f214:	230a      	movgt	r3, #10
    f216:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
    f21a:	bd38      	pop	{r3, r4, r5, pc}
    f21c:	000104c1 	.word	0x000104c1

0000f220 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
    f220:	7808      	ldrb	r0, [r1, #0]
    f222:	b148      	cbz	r0, f238 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
    f224:	283a      	cmp	r0, #58	; 0x3a
    f226:	d009      	beq.n	f23c <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
    f228:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
    f22a:	3301      	adds	r3, #1
    f22c:	b2db      	uxtb	r3, r3
    f22e:	5cc8      	ldrb	r0, [r1, r3]
    f230:	b118      	cbz	r0, f23a <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
    f232:	283a      	cmp	r0, #58	; 0x3a
    f234:	d1f9      	bne.n	f22a <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
    f236:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
    f238:	4770      	bx	lr
    f23a:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
    f23c:	2000      	movs	r0, #0
    f23e:	4770      	bx	lr

0000f240 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
    f240:	b510      	push	{r4, lr}
    f242:	4604      	mov	r4, r0
    f244:	4b0d      	ldr	r3, [pc, #52]	; (f27c <_ZN15DataLoger_ClassC1Ev+0x3c>)
    f246:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    f248:	f44f 7200 	mov.w	r2, #512	; 0x200
    f24c:	2100      	movs	r1, #0
    f24e:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
    f252:	4b0b      	ldr	r3, [pc, #44]	; (f280 <_ZN15DataLoger_ClassC1Ev+0x40>)
    f254:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    f256:	2300      	movs	r3, #0
    f258:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
    f25c:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
    f260:	230a      	movs	r3, #10
    f262:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
    f266:	4a07      	ldr	r2, [pc, #28]	; (f284 <_ZN15DataLoger_ClassC1Ev+0x44>)
    f268:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
    f26c:	4b06      	ldr	r3, [pc, #24]	; (f288 <_ZN15DataLoger_ClassC1Ev+0x48>)
    f26e:	4907      	ldr	r1, [pc, #28]	; (f28c <_ZN15DataLoger_ClassC1Ev+0x4c>)
    f270:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
    f274:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	
} //DataLoger_Class
    f278:	4620      	mov	r0, r4
    f27a:	bd10      	pop	{r4, pc}
    f27c:	0000f73b 	.word	0x0000f73b
    f280:	00010309 	.word	0x00010309
    f284:	200021b8 	.word	0x200021b8
    f288:	20001a98 	.word	0x20001a98
    f28c:	200031b8 	.word	0x200031b8

0000f290 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
    f290:	b510      	push	{r4, lr}
    f292:	4604      	mov	r4, r0
    f294:	4b01      	ldr	r3, [pc, #4]	; (f29c <_ZN15DataLoger_ClassD1Ev+0xc>)
    f296:	4798      	blx	r3
{
} //~DataLoger_Class
    f298:	4620      	mov	r0, r4
    f29a:	bd10      	pop	{r4, pc}
    f29c:	0000f779 	.word	0x0000f779

0000f2a0 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
    f2a0:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
    f2a4:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
    f2a6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f2aa:	bf94      	ite	ls
    f2ac:	2000      	movls	r0, #0
    f2ae:	2001      	movhi	r0, #1
    f2b0:	4770      	bx	lr
	...

0000f2b4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
    f2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2b6:	b087      	sub	sp, #28
    f2b8:	4604      	mov	r4, r0
    f2ba:	460e      	mov	r6, r1
	if (len==0xff)
    f2bc:	2aff      	cmp	r2, #255	; 0xff
    f2be:	d018      	beq.n	f2f2 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
    f2c0:	4615      	mov	r5, r2
		if (IsStackFull())
    f2c2:	4b29      	ldr	r3, [pc, #164]	; (f368 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
    f2c4:	4798      	blx	r3
    f2c6:	2800      	cmp	r0, #0
    f2c8:	d13b      	bne.n	f342 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
    f2ca:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
    f2ce:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
    f2d2:	f105 020c 	add.w	r2, r5, #12
    f2d6:	4631      	mov	r1, r6
    f2d8:	4418      	add	r0, r3
    f2da:	4b24      	ldr	r3, [pc, #144]	; (f36c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
    f2dc:	4798      	blx	r3
		stackValue+=12+len;
    f2de:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
    f2e2:	320c      	adds	r2, #12
    f2e4:	442a      	add	r2, r5
    f2e6:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
    f2ea:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
    f2ee:	b007      	add	sp, #28
    f2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
    f2f2:	466d      	mov	r5, sp
    f2f4:	4f1e      	ldr	r7, [pc, #120]	; (f370 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
    f2f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    f2f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    f2fa:	e897 0003 	ldmia.w	r7, {r0, r1}
    f2fe:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
    f302:	4668      	mov	r0, sp
    f304:	4b1b      	ldr	r3, [pc, #108]	; (f374 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
    f306:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
    f308:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
    f30c:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
    f310:	b2c2      	uxtb	r2, r0
    f312:	320d      	adds	r2, #13
    f314:	4631      	mov	r1, r6
    f316:	18e8      	adds	r0, r5, r3
    f318:	4b14      	ldr	r3, [pc, #80]	; (f36c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
    f31a:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
    f31c:	4d16      	ldr	r5, [pc, #88]	; (f378 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
    f31e:	4629      	mov	r1, r5
    f320:	4816      	ldr	r0, [pc, #88]	; (f37c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
    f322:	4b17      	ldr	r3, [pc, #92]	; (f380 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
    f324:	4798      	blx	r3
    f326:	4b17      	ldr	r3, [pc, #92]	; (f384 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
    f328:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
    f32c:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
    f330:	2100      	movs	r1, #0
    f332:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
    f336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f33a:	4628      	mov	r0, r5
    f33c:	4b12      	ldr	r3, [pc, #72]	; (f388 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
    f33e:	4798      	blx	r3
    f340:	e7d3      	b.n	f2ea <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
    f342:	4f0d      	ldr	r7, [pc, #52]	; (f378 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
    f344:	4639      	mov	r1, r7
    f346:	480d      	ldr	r0, [pc, #52]	; (f37c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
    f348:	4b0d      	ldr	r3, [pc, #52]	; (f380 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
    f34a:	4798      	blx	r3
    f34c:	4b0d      	ldr	r3, [pc, #52]	; (f384 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
    f34e:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
    f352:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
    f356:	2100      	movs	r1, #0
    f358:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
    f35c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f360:	4638      	mov	r0, r7
    f362:	4b09      	ldr	r3, [pc, #36]	; (f388 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
    f364:	4798      	blx	r3
    f366:	e7b0      	b.n	f2ca <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
    f368:	0000f2a1 	.word	0x0000f2a1
    f36c:	000101d5 	.word	0x000101d5
    f370:	00010b88 	.word	0x00010b88
    f374:	000104c1 	.word	0x000104c1
    f378:	200021b8 	.word	0x200021b8
    f37c:	200042c0 	.word	0x200042c0
    f380:	0000f419 	.word	0x0000f419
    f384:	200032b0 	.word	0x200032b0
    f388:	00010309 	.word	0x00010309

0000f38c <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    f38c:	4770      	bx	lr

0000f38e <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    f38e:	4770      	bx	lr

0000f390 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    f390:	b510      	push	{r4, lr}
    f392:	4604      	mov	r4, r0
    f394:	30c0      	adds	r0, #192	; 0xc0
    f396:	4b03      	ldr	r3, [pc, #12]	; (f3a4 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    f398:	4798      	blx	r3
    f39a:	4620      	mov	r0, r4
    f39c:	4b02      	ldr	r3, [pc, #8]	; (f3a8 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    f39e:	4798      	blx	r3
{
} //~MemoryManagment_Class
    f3a0:	4620      	mov	r0, r4
    f3a2:	bd10      	pop	{r4, pc}
    f3a4:	0000f58b 	.word	0x0000f58b
    f3a8:	0000f38f 	.word	0x0000f38f

0000f3ac <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    f3ac:	b538      	push	{r3, r4, r5, lr}
    f3ae:	4604      	mov	r4, r0
    f3b0:	4b14      	ldr	r3, [pc, #80]	; (f404 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
    f3b2:	4798      	blx	r3
    f3b4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f3b8:	4b13      	ldr	r3, [pc, #76]	; (f408 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    f3ba:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    f3bc:	f44f 7500 	mov.w	r5, #512	; 0x200
    f3c0:	462a      	mov	r2, r5
    f3c2:	2100      	movs	r1, #0
    f3c4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    f3c8:	4b10      	ldr	r3, [pc, #64]	; (f40c <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    f3ca:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    f3cc:	2300      	movs	r3, #0
    f3ce:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
    f3d2:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
    f3d6:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
    f3da:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
    f3de:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
    f3e2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
    f3e6:	490a      	ldr	r1, [pc, #40]	; (f410 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    f3e8:	f246 3214 	movw	r2, #25364	; 0x6314
    f3ec:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
    f3ee:	4a09      	ldr	r2, [pc, #36]	; (f414 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    f3f0:	6812      	ldr	r2, [r2, #0]
    f3f2:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
    f3f6:	f246 3118 	movw	r1, #25368	; 0x6318
    f3fa:	5062      	str	r2, [r4, r1]
	initiated=false;
    f3fc:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
    f400:	4620      	mov	r0, r4
    f402:	bd38      	pop	{r3, r4, r5, pc}
    f404:	0000f38d 	.word	0x0000f38d
    f408:	0000f589 	.word	0x0000f589
    f40c:	00010309 	.word	0x00010309
    f410:	200031c0 	.word	0x200031c0
    f414:	200031bc 	.word	0x200031bc

0000f418 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
		  return	w;
	  }

	  return	r;
  }
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
    f418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f41c:	4604      	mov	r4, r0
    f41e:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
    f420:	f246 3318 	movw	r3, #25368	; 0x6318
    f424:	58c3      	ldr	r3, [r0, r3]
    f426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f42a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    f42e:	d906      	bls.n	f43e <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
    f430:	4b14      	ldr	r3, [pc, #80]	; (f484 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f432:	681b      	ldr	r3, [r3, #0]
    f434:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
    f438:	f246 3218 	movw	r2, #25368	; 0x6318
    f43c:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
    f43e:	f246 3618 	movw	r6, #25368	; 0x6318
    f442:	59a1      	ldr	r1, [r4, r6]
    f444:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    f448:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
    f44a:	4d0f      	ldr	r5, [pc, #60]	; (f488 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
    f44c:	4628      	mov	r0, r5
    f44e:	4b0f      	ldr	r3, [pc, #60]	; (f48c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
    f450:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
    f452:	4628      	mov	r0, r5
    f454:	4f0e      	ldr	r7, [pc, #56]	; (f490 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
    f456:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
    f458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f45c:	59a2      	ldr	r2, [r4, r6]
    f45e:	4641      	mov	r1, r8
    f460:	4628      	mov	r0, r5
    f462:	4e0c      	ldr	r6, [pc, #48]	; (f494 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
    f464:	47b0      	blx	r6
    f466:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
    f468:	4628      	mov	r0, r5
    f46a:	47b8      	blx	r7
		   if (w==0)
    f46c:	b12e      	cbz	r6, f47a <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
    f46e:	4b05      	ldr	r3, [pc, #20]	; (f484 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
    f470:	6818      	ldr	r0, [r3, #0]
    f472:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
    f476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
    f47a:	f246 3318 	movw	r3, #25368	; 0x6318
    f47e:	58e0      	ldr	r0, [r4, r3]
    f480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f484:	200031bc 	.word	0x200031bc
    f488:	2000a5f0 	.word	0x2000a5f0
    f48c:	0000f78d 	.word	0x0000f78d
    f490:	0000f865 	.word	0x0000f865
    f494:	0000f7bd 	.word	0x0000f7bd

0000f498 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    f498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f49c:	4c2b      	ldr	r4, [pc, #172]	; (f54c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    f49e:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    f4a2:	492b      	ldr	r1, [pc, #172]	; (f550 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    f4a4:	4628      	mov	r0, r5
    f4a6:	4f2b      	ldr	r7, [pc, #172]	; (f554 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    f4a8:	47b8      	blx	r7
    f4aa:	4e2b      	ldr	r6, [pc, #172]	; (f558 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    f4ac:	f8df 80d4 	ldr.w	r8, [pc, #212]	; f584 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
    f4b0:	4632      	mov	r2, r6
    f4b2:	4641      	mov	r1, r8
    f4b4:	4628      	mov	r0, r5
    f4b6:	4d29      	ldr	r5, [pc, #164]	; (f55c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    f4b8:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    f4ba:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    f4be:	4928      	ldr	r1, [pc, #160]	; (f560 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    f4c0:	4648      	mov	r0, r9
    f4c2:	47b8      	blx	r7
    f4c4:	4632      	mov	r2, r6
    f4c6:	4641      	mov	r1, r8
    f4c8:	4648      	mov	r0, r9
    f4ca:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    f4cc:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    f4d0:	4924      	ldr	r1, [pc, #144]	; (f564 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    f4d2:	4648      	mov	r0, r9
    f4d4:	47b8      	blx	r7
    f4d6:	4632      	mov	r2, r6
    f4d8:	4641      	mov	r1, r8
    f4da:	4648      	mov	r0, r9
    f4dc:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f4de:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    f4e2:	4921      	ldr	r1, [pc, #132]	; (f568 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    f4e4:	4648      	mov	r0, r9
    f4e6:	47b8      	blx	r7
    f4e8:	4632      	mov	r2, r6
    f4ea:	4641      	mov	r1, r8
    f4ec:	4648      	mov	r0, r9
    f4ee:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    f4f0:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    f4f4:	491d      	ldr	r1, [pc, #116]	; (f56c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    f4f6:	4648      	mov	r0, r9
    f4f8:	47b8      	blx	r7
    f4fa:	4632      	mov	r2, r6
    f4fc:	4641      	mov	r1, r8
    f4fe:	4648      	mov	r0, r9
    f500:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f502:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    f506:	491a      	ldr	r1, [pc, #104]	; (f570 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
    f508:	4648      	mov	r0, r9
    f50a:	47b8      	blx	r7
    f50c:	4632      	mov	r2, r6
    f50e:	4641      	mov	r1, r8
    f510:	4648      	mov	r0, r9
    f512:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f514:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    f518:	4916      	ldr	r1, [pc, #88]	; (f574 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
    f51a:	4648      	mov	r0, r9
    f51c:	47b8      	blx	r7
    f51e:	4632      	mov	r2, r6
    f520:	4641      	mov	r1, r8
    f522:	4648      	mov	r0, r9
    f524:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    f526:	f1a4 0918 	sub.w	r9, r4, #24
    f52a:	4913      	ldr	r1, [pc, #76]	; (f578 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
    f52c:	4648      	mov	r0, r9
    f52e:	47b8      	blx	r7
    f530:	4632      	mov	r2, r6
    f532:	4641      	mov	r1, r8
    f534:	4648      	mov	r0, r9
    f536:	47a8      	blx	r5
    f538:	3408      	adds	r4, #8
    f53a:	4620      	mov	r0, r4
    f53c:	4b0f      	ldr	r3, [pc, #60]	; (f57c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
    f53e:	4798      	blx	r3
    f540:	4632      	mov	r2, r6
    f542:	490f      	ldr	r1, [pc, #60]	; (f580 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
    f544:	4620      	mov	r0, r4
    f546:	47a8      	blx	r5
    f548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f54c:	200042b8 	.word	0x200042b8
    f550:	2000a8d8 	.word	0x2000a8d8
    f554:	0000df39 	.word	0x0000df39
    f558:	20000000 	.word	0x20000000
    f55c:	0000fc95 	.word	0x0000fc95
    f560:	2000a96c 	.word	0x2000a96c
    f564:	2000aa90 	.word	0x2000aa90
    f568:	2000a98c 	.word	0x2000a98c
    f56c:	2000aa50 	.word	0x2000aa50
    f570:	2000aa70 	.word	0x2000aa70
    f574:	2000a948 	.word	0x2000a948
    f578:	2000a9e8 	.word	0x2000a9e8
    f57c:	0000f3ad 	.word	0x0000f3ad
    f580:	0000f391 	.word	0x0000f391
    f584:	0000df71 	.word	0x0000df71

0000f588 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    f588:	4770      	bx	lr

0000f58a <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    f58a:	4770      	bx	lr

0000f58c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    f58c:	b580      	push	{r7, lr}
    f58e:	b084      	sub	sp, #16
    f590:	af00      	add	r7, sp, #0
    f592:	60f8      	str	r0, [r7, #12]
    f594:	60b9      	str	r1, [r7, #8]
    f596:	4613      	mov	r3, r2
    f598:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f59a:	68fb      	ldr	r3, [r7, #12]
    f59c:	2b00      	cmp	r3, #0
    f59e:	d004      	beq.n	f5aa <io_write+0x1e>
    f5a0:	68bb      	ldr	r3, [r7, #8]
    f5a2:	2b00      	cmp	r3, #0
    f5a4:	d001      	beq.n	f5aa <io_write+0x1e>
    f5a6:	2301      	movs	r3, #1
    f5a8:	e000      	b.n	f5ac <io_write+0x20>
    f5aa:	2300      	movs	r3, #0
    f5ac:	f003 0301 	and.w	r3, r3, #1
    f5b0:	b2db      	uxtb	r3, r3
    f5b2:	2234      	movs	r2, #52	; 0x34
    f5b4:	4907      	ldr	r1, [pc, #28]	; (f5d4 <io_write+0x48>)
    f5b6:	4618      	mov	r0, r3
    f5b8:	4b07      	ldr	r3, [pc, #28]	; (f5d8 <io_write+0x4c>)
    f5ba:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    f5bc:	68fb      	ldr	r3, [r7, #12]
    f5be:	681b      	ldr	r3, [r3, #0]
    f5c0:	88fa      	ldrh	r2, [r7, #6]
    f5c2:	68b9      	ldr	r1, [r7, #8]
    f5c4:	68f8      	ldr	r0, [r7, #12]
    f5c6:	4798      	blx	r3
    f5c8:	4603      	mov	r3, r0
}
    f5ca:	4618      	mov	r0, r3
    f5cc:	3710      	adds	r7, #16
    f5ce:	46bd      	mov	sp, r7
    f5d0:	bd80      	pop	{r7, pc}
    f5d2:	bf00      	nop
    f5d4:	00010bc4 	.word	0x00010bc4
    f5d8:	00003825 	.word	0x00003825

0000f5dc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    f5dc:	b580      	push	{r7, lr}
    f5de:	b084      	sub	sp, #16
    f5e0:	af00      	add	r7, sp, #0
    f5e2:	60f8      	str	r0, [r7, #12]
    f5e4:	60b9      	str	r1, [r7, #8]
    f5e6:	4613      	mov	r3, r2
    f5e8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f5ea:	68fb      	ldr	r3, [r7, #12]
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	d004      	beq.n	f5fa <io_read+0x1e>
    f5f0:	68bb      	ldr	r3, [r7, #8]
    f5f2:	2b00      	cmp	r3, #0
    f5f4:	d001      	beq.n	f5fa <io_read+0x1e>
    f5f6:	2301      	movs	r3, #1
    f5f8:	e000      	b.n	f5fc <io_read+0x20>
    f5fa:	2300      	movs	r3, #0
    f5fc:	f003 0301 	and.w	r3, r3, #1
    f600:	b2db      	uxtb	r3, r3
    f602:	223d      	movs	r2, #61	; 0x3d
    f604:	4907      	ldr	r1, [pc, #28]	; (f624 <io_read+0x48>)
    f606:	4618      	mov	r0, r3
    f608:	4b07      	ldr	r3, [pc, #28]	; (f628 <io_read+0x4c>)
    f60a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    f60c:	68fb      	ldr	r3, [r7, #12]
    f60e:	685b      	ldr	r3, [r3, #4]
    f610:	88fa      	ldrh	r2, [r7, #6]
    f612:	68b9      	ldr	r1, [r7, #8]
    f614:	68f8      	ldr	r0, [r7, #12]
    f616:	4798      	blx	r3
    f618:	4603      	mov	r3, r0
}
    f61a:	4618      	mov	r0, r3
    f61c:	3710      	adds	r7, #16
    f61e:	46bd      	mov	sp, r7
    f620:	bd80      	pop	{r7, pc}
    f622:	bf00      	nop
    f624:	00010bc4 	.word	0x00010bc4
    f628:	00003825 	.word	0x00003825

0000f62c <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    f62c:	b580      	push	{r7, lr}
    f62e:	b084      	sub	sp, #16
    f630:	af00      	add	r7, sp, #0
    f632:	60f8      	str	r0, [r7, #12]
    f634:	60b9      	str	r1, [r7, #8]
    f636:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
    f638:	687a      	ldr	r2, [r7, #4]
    f63a:	68b9      	ldr	r1, [r7, #8]
    f63c:	68f8      	ldr	r0, [r7, #12]
    f63e:	4b03      	ldr	r3, [pc, #12]	; (f64c <itoa+0x20>)
    f640:	4798      	blx	r3
    f642:	4603      	mov	r3, r0
        }
    f644:	4618      	mov	r0, r3
    f646:	3710      	adds	r7, #16
    f648:	46bd      	mov	sp, r7
    f64a:	bd80      	pop	{r7, pc}
    f64c:	0000f651 	.word	0x0000f651

0000f650 <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
    f650:	b480      	push	{r7}
    f652:	b093      	sub	sp, #76	; 0x4c
    f654:	af00      	add	r7, sp, #0
    f656:	60f8      	str	r0, [r7, #12]
    f658:	60b9      	str	r1, [r7, #8]
    f65a:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    f65c:	f107 0310 	add.w	r3, r7, #16
    f660:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    f662:	68bb      	ldr	r3, [r7, #8]
    f664:	2b00      	cmp	r3, #0
    f666:	d101      	bne.n	f66c <ltoa+0x1c>
            {
                return 0;
    f668:	2300      	movs	r3, #0
    f66a:	e061      	b.n	f730 <ltoa+0xe0>
            }

            if (radix > 36 || radix <= 1)
    f66c:	687b      	ldr	r3, [r7, #4]
    f66e:	2b24      	cmp	r3, #36	; 0x24
    f670:	dc02      	bgt.n	f678 <ltoa+0x28>
    f672:	687b      	ldr	r3, [r7, #4]
    f674:	2b01      	cmp	r3, #1
    f676:	dc01      	bgt.n	f67c <ltoa+0x2c>
            {
                return 0;
    f678:	2300      	movs	r3, #0
    f67a:	e059      	b.n	f730 <ltoa+0xe0>
            }

            sign = (radix == 10 && value < 0);
    f67c:	687b      	ldr	r3, [r7, #4]
    f67e:	2b0a      	cmp	r3, #10
    f680:	d104      	bne.n	f68c <ltoa+0x3c>
    f682:	68fb      	ldr	r3, [r7, #12]
    f684:	2b00      	cmp	r3, #0
    f686:	da01      	bge.n	f68c <ltoa+0x3c>
    f688:	2301      	movs	r3, #1
    f68a:	e000      	b.n	f68e <ltoa+0x3e>
    f68c:	2300      	movs	r3, #0
    f68e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
    f690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f692:	2b00      	cmp	r3, #0
    f694:	d003      	beq.n	f69e <ltoa+0x4e>
            {
                v = -value;
    f696:	68fb      	ldr	r3, [r7, #12]
    f698:	425b      	negs	r3, r3
    f69a:	643b      	str	r3, [r7, #64]	; 0x40
    f69c:	e023      	b.n	f6e6 <ltoa+0x96>
            }
            else
            {
                v = (unsigned long)value;
    f69e:	68fb      	ldr	r3, [r7, #12]
    f6a0:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
    f6a2:	e020      	b.n	f6e6 <ltoa+0x96>
            {
                i = v % radix;
    f6a4:	687a      	ldr	r2, [r7, #4]
    f6a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f6a8:	fbb3 f1f2 	udiv	r1, r3, r2
    f6ac:	fb02 f201 	mul.w	r2, r2, r1
    f6b0:	1a9b      	subs	r3, r3, r2
    f6b2:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
    f6b4:	687b      	ldr	r3, [r7, #4]
    f6b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f6b8:	fbb2 f3f3 	udiv	r3, r2, r3
    f6bc:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    f6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6c0:	2b09      	cmp	r3, #9
    f6c2:	dc08      	bgt.n	f6d6 <ltoa+0x86>
                    *tp++ = i + '0';
    f6c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f6c6:	1c5a      	adds	r2, r3, #1
    f6c8:	647a      	str	r2, [r7, #68]	; 0x44
    f6ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f6cc:	b2d2      	uxtb	r2, r2
    f6ce:	3230      	adds	r2, #48	; 0x30
    f6d0:	b2d2      	uxtb	r2, r2
    f6d2:	701a      	strb	r2, [r3, #0]
    f6d4:	e007      	b.n	f6e6 <ltoa+0x96>
                else
                    *tp++ = i + 'a' - 10;
    f6d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f6d8:	1c5a      	adds	r2, r3, #1
    f6da:	647a      	str	r2, [r7, #68]	; 0x44
    f6dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f6de:	b2d2      	uxtb	r2, r2
    f6e0:	3257      	adds	r2, #87	; 0x57
    f6e2:	b2d2      	uxtb	r2, r2
    f6e4:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    f6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f6e8:	2b00      	cmp	r3, #0
    f6ea:	d1db      	bne.n	f6a4 <ltoa+0x54>
    f6ec:	f107 0310 	add.w	r3, r7, #16
    f6f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f6f2:	429a      	cmp	r2, r3
    f6f4:	d0d6      	beq.n	f6a4 <ltoa+0x54>
            }

            sp = string;
    f6f6:	68bb      	ldr	r3, [r7, #8]
    f6f8:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
    f6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f6fc:	2b00      	cmp	r3, #0
    f6fe:	d00e      	beq.n	f71e <ltoa+0xce>
                *sp++ = '-';
    f700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f702:	1c5a      	adds	r2, r3, #1
    f704:	63fa      	str	r2, [r7, #60]	; 0x3c
    f706:	222d      	movs	r2, #45	; 0x2d
    f708:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    f70a:	e008      	b.n	f71e <ltoa+0xce>
                *sp++ = *--tp;
    f70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f70e:	1c5a      	adds	r2, r3, #1
    f710:	63fa      	str	r2, [r7, #60]	; 0x3c
    f712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f714:	3a01      	subs	r2, #1
    f716:	647a      	str	r2, [r7, #68]	; 0x44
    f718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f71a:	7812      	ldrb	r2, [r2, #0]
    f71c:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    f71e:	f107 0310 	add.w	r3, r7, #16
    f722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f724:	429a      	cmp	r2, r3
    f726:	d8f1      	bhi.n	f70c <ltoa+0xbc>
            *sp = 0;
    f728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f72a:	2200      	movs	r2, #0
    f72c:	701a      	strb	r2, [r3, #0]

            return string;
    f72e:	68bb      	ldr	r3, [r7, #8]
        }
    f730:	4618      	mov	r0, r3
    f732:	374c      	adds	r7, #76	; 0x4c
    f734:	46bd      	mov	sp, r7
    f736:	bc80      	pop	{r7}
    f738:	4770      	bx	lr

0000f73a <_ZN13N25Q256_ClassC1Ev>:
	delay_us(1);
	QSPI_N25Q256_PORT_init();
}

// default constructor
N25Q256_Class::N25Q256_Class()
    f73a:	b480      	push	{r7}
    f73c:	b083      	sub	sp, #12
    f73e:	af00      	add	r7, sp, #0
    f740:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    f742:	687b      	ldr	r3, [r7, #4]
    f744:	4618      	mov	r0, r3
    f746:	370c      	adds	r7, #12
    f748:	46bd      	mov	sp, r7
    f74a:	bc80      	pop	{r7}
    f74c:	4770      	bx	lr
	...

0000f750 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    f750:	b480      	push	{r7}
    f752:	b083      	sub	sp, #12
    f754:	af00      	add	r7, sp, #0
    f756:	6078      	str	r0, [r7, #4]
    f758:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    f75a:	687b      	ldr	r3, [r7, #4]
    f75c:	683a      	ldr	r2, [r7, #0]
    f75e:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    f760:	687b      	ldr	r3, [r7, #4]
    f762:	4a04      	ldr	r2, [pc, #16]	; (f774 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    f764:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    f768:	687b      	ldr	r3, [r7, #4]
    f76a:	4618      	mov	r0, r3
    f76c:	370c      	adds	r7, #12
    f76e:	46bd      	mov	sp, r7
    f770:	bc80      	pop	{r7}
    f772:	4770      	bx	lr
    f774:	001fff00 	.word	0x001fff00

0000f778 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    f778:	b480      	push	{r7}
    f77a:	b083      	sub	sp, #12
    f77c:	af00      	add	r7, sp, #0
    f77e:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    f780:	687b      	ldr	r3, [r7, #4]
    f782:	4618      	mov	r0, r3
    f784:	370c      	adds	r7, #12
    f786:	46bd      	mov	sp, r7
    f788:	bc80      	pop	{r7}
    f78a:	4770      	bx	lr

0000f78c <_ZN13N25Q256_Class5EraseEm>:
	qspi_sync_enable(ptrQSPIDescriptor);
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}

uint32_t	N25Q256_Class::Erase(uint32_t add){
    f78c:	b580      	push	{r7, lr}
    f78e:	b084      	sub	sp, #16
    f790:	af00      	add	r7, sp, #0
    f792:	6078      	str	r0, [r7, #4]
    f794:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
    f796:	687b      	ldr	r3, [r7, #4]
    f798:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    f79c:	685b      	ldr	r3, [r3, #4]
    f79e:	689b      	ldr	r3, [r3, #8]
    f7a0:	687a      	ldr	r2, [r7, #4]
    f7a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
    f7a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f7aa:	6839      	ldr	r1, [r7, #0]
    f7ac:	4798      	blx	r3
    f7ae:	4603      	mov	r3, r0
    f7b0:	60fb      	str	r3, [r7, #12]
	return	e;
    f7b2:	68fb      	ldr	r3, [r7, #12]
}
    f7b4:	4618      	mov	r0, r3
    f7b6:	3710      	adds	r7, #16
    f7b8:	46bd      	mov	sp, r7
    f7ba:	bd80      	pop	{r7, pc}

0000f7bc <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    f7bc:	b590      	push	{r4, r7, lr}
    f7be:	b087      	sub	sp, #28
    f7c0:	af00      	add	r7, sp, #0
    f7c2:	60f8      	str	r0, [r7, #12]
    f7c4:	60b9      	str	r1, [r7, #8]
    f7c6:	607a      	str	r2, [r7, #4]
    f7c8:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    f7ca:	68fb      	ldr	r3, [r7, #12]
    f7cc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    f7d0:	685b      	ldr	r3, [r3, #4]
    f7d2:	685c      	ldr	r4, [r3, #4]
    f7d4:	68fb      	ldr	r3, [r7, #12]
    f7d6:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    f7da:	683b      	ldr	r3, [r7, #0]
    f7dc:	687a      	ldr	r2, [r7, #4]
    f7de:	68b9      	ldr	r1, [r7, #8]
    f7e0:	47a0      	blx	r4
    f7e2:	4603      	mov	r3, r0
    f7e4:	617b      	str	r3, [r7, #20]
	return	w;
    f7e6:	697b      	ldr	r3, [r7, #20]
}
    f7e8:	4618      	mov	r0, r3
    f7ea:	371c      	adds	r7, #28
    f7ec:	46bd      	mov	sp, r7
    f7ee:	bd90      	pop	{r4, r7, pc}

0000f7f0 <_ZN13N25Q256_Class9GetStatusEv>:
	xferDone=false;
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
	return	r;
}

uint8_t	N25Q256_Class::GetStatus(void){
    f7f0:	b580      	push	{r7, lr}
    f7f2:	b082      	sub	sp, #8
    f7f4:	af00      	add	r7, sp, #0
    f7f6:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
    f7f8:	687a      	ldr	r2, [r7, #4]
    f7fa:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    f7fe:	f043 0310 	orr.w	r3, r3, #16
    f802:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
    f806:	687a      	ldr	r2, [r7, #4]
    f808:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    f80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f810:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
    f814:	687a      	ldr	r2, [r7, #4]
    f816:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
    f81a:	f36f 1305 	bfc	r3, #4, #2
    f81e:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
    f822:	687b      	ldr	r3, [r7, #4]
    f824:	2205      	movs	r2, #5
    f826:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
    f82a:	687b      	ldr	r3, [r7, #4]
    f82c:	2201      	movs	r2, #1
    f82e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
    f832:	687b      	ldr	r3, [r7, #4]
    f834:	f203 2212 	addw	r2, r3, #530	; 0x212
    f838:	687b      	ldr	r3, [r7, #4]
    f83a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
    f83e:	687b      	ldr	r3, [r7, #4]
    f840:	685a      	ldr	r2, [r3, #4]
    f842:	687b      	ldr	r3, [r7, #4]
    f844:	f503 7305 	add.w	r3, r3, #532	; 0x214
    f848:	4619      	mov	r1, r3
    f84a:	4610      	mov	r0, r2
    f84c:	4b04      	ldr	r3, [pc, #16]	; (f860 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
    f84e:	4798      	blx	r3
		return status;
    f850:	687b      	ldr	r3, [r7, #4]
    f852:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
    f856:	4618      	mov	r0, r3
    f858:	3708      	adds	r7, #8
    f85a:	46bd      	mov	sp, r7
    f85c:	bd80      	pop	{r7, pc}
    f85e:	bf00      	nop
    f860:	00002745 	.word	0x00002745

0000f864 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
    f864:	b580      	push	{r7, lr}
    f866:	b082      	sub	sp, #8
    f868:	af00      	add	r7, sp, #0
    f86a:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
    f86c:	6878      	ldr	r0, [r7, #4]
    f86e:	4b0e      	ldr	r3, [pc, #56]	; (f8a8 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
    f870:	4798      	blx	r3
    f872:	4603      	mov	r3, r0
    f874:	461a      	mov	r2, r3
    f876:	687b      	ldr	r3, [r7, #4]
    f878:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
    f87c:	687b      	ldr	r3, [r7, #4]
    f87e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    f882:	f003 0301 	and.w	r3, r3, #1
    f886:	2b00      	cmp	r3, #0
    f888:	d000      	beq.n	f88c <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
    f88a:	e7ef      	b.n	f86c <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
    f88c:	687b      	ldr	r3, [r7, #4]
    f88e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    f892:	f003 0301 	and.w	r3, r3, #1
    f896:	2b00      	cmp	r3, #0
    f898:	bf0c      	ite	eq
    f89a:	2301      	moveq	r3, #1
    f89c:	2300      	movne	r3, #0
    f89e:	b2db      	uxtb	r3, r3
}
    f8a0:	4618      	mov	r0, r3
    f8a2:	3708      	adds	r7, #8
    f8a4:	46bd      	mov	sp, r7
    f8a6:	bd80      	pop	{r7, pc}
    f8a8:	0000f7f1 	.word	0x0000f7f1

0000f8ac <_Z41__static_initialization_and_destruction_0ii>:
		}
					
	}
	return	isOK;
}
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
    f8ac:	b580      	push	{r7, lr}
    f8ae:	b082      	sub	sp, #8
    f8b0:	af00      	add	r7, sp, #0
    f8b2:	6078      	str	r0, [r7, #4]
    f8b4:	6039      	str	r1, [r7, #0]
    f8b6:	687b      	ldr	r3, [r7, #4]
    f8b8:	2b01      	cmp	r3, #1
    f8ba:	d10d      	bne.n	f8d8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    f8bc:	683b      	ldr	r3, [r7, #0]
    f8be:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f8c2:	4293      	cmp	r3, r2
    f8c4:	d108      	bne.n	f8d8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    f8c6:	4906      	ldr	r1, [pc, #24]	; (f8e0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f8c8:	4806      	ldr	r0, [pc, #24]	; (f8e4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f8ca:	4b07      	ldr	r3, [pc, #28]	; (f8e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    f8cc:	4798      	blx	r3
    f8ce:	4a07      	ldr	r2, [pc, #28]	; (f8ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
    f8d0:	4907      	ldr	r1, [pc, #28]	; (f8f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f8d2:	4804      	ldr	r0, [pc, #16]	; (f8e4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f8d4:	4b07      	ldr	r3, [pc, #28]	; (f8f4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f8d6:	4798      	blx	r3
    f8d8:	bf00      	nop
    f8da:	3708      	adds	r7, #8
    f8dc:	46bd      	mov	sp, r7
    f8de:	bd80      	pop	{r7, pc}
    f8e0:	2000a968 	.word	0x2000a968
    f8e4:	2000a5f0 	.word	0x2000a5f0
    f8e8:	0000f751 	.word	0x0000f751
    f8ec:	20000000 	.word	0x20000000
    f8f0:	0000f779 	.word	0x0000f779
    f8f4:	0000fc95 	.word	0x0000fc95

0000f8f8 <_GLOBAL__sub_I_ptrN25Q256Class>:
    f8f8:	b580      	push	{r7, lr}
    f8fa:	af00      	add	r7, sp, #0
    f8fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f900:	2001      	movs	r0, #1
    f902:	4b01      	ldr	r3, [pc, #4]	; (f908 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    f904:	4798      	blx	r3
    f906:	bd80      	pop	{r7, pc}
    f908:	0000f8ad 	.word	0x0000f8ad

0000f90c <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
    f90c:	b580      	push	{r7, lr}
    f90e:	b082      	sub	sp, #8
    f910:	af00      	add	r7, sp, #0
    f912:	6078      	str	r0, [r7, #4]
    f914:	687b      	ldr	r3, [r7, #4]
    f916:	4618      	mov	r0, r3
    f918:	4b06      	ldr	r3, [pc, #24]	; (f934 <_ZN14Calendar_ClassC1Ev+0x28>)
    f91a:	4798      	blx	r3
    f91c:	4a06      	ldr	r2, [pc, #24]	; (f938 <_ZN14Calendar_ClassC1Ev+0x2c>)
    f91e:	687b      	ldr	r3, [r7, #4]
    f920:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
    f922:	4a06      	ldr	r2, [pc, #24]	; (f93c <_ZN14Calendar_ClassC1Ev+0x30>)
    f924:	687b      	ldr	r3, [r7, #4]
    f926:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    f928:	687b      	ldr	r3, [r7, #4]
    f92a:	4618      	mov	r0, r3
    f92c:	3708      	adds	r7, #8
    f92e:	46bd      	mov	sp, r7
    f930:	bd80      	pop	{r7, pc}
    f932:	bf00      	nop
    f934:	0000fc55 	.word	0x0000fc55
    f938:	00010bec 	.word	0x00010bec
    f93c:	2000a820 	.word	0x2000a820

0000f940 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    f940:	b580      	push	{r7, lr}
    f942:	b082      	sub	sp, #8
    f944:	af00      	add	r7, sp, #0
    f946:	6078      	str	r0, [r7, #4]
    f948:	6039      	str	r1, [r7, #0]
    f94a:	687b      	ldr	r3, [r7, #4]
    f94c:	4618      	mov	r0, r3
    f94e:	4b08      	ldr	r3, [pc, #32]	; (f970 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    f950:	4798      	blx	r3
    f952:	4a08      	ldr	r2, [pc, #32]	; (f974 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    f954:	687b      	ldr	r3, [r7, #4]
    f956:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    f958:	687b      	ldr	r3, [r7, #4]
    f95a:	683a      	ldr	r2, [r7, #0]
    f95c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
    f960:	4a05      	ldr	r2, [pc, #20]	; (f978 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    f962:	687b      	ldr	r3, [r7, #4]
    f964:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    f966:	687b      	ldr	r3, [r7, #4]
    f968:	4618      	mov	r0, r3
    f96a:	3708      	adds	r7, #8
    f96c:	46bd      	mov	sp, r7
    f96e:	bd80      	pop	{r7, pc}
    f970:	0000fc55 	.word	0x0000fc55
    f974:	00010bec 	.word	0x00010bec
    f978:	2000a820 	.word	0x2000a820

0000f97c <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    f97c:	b580      	push	{r7, lr}
    f97e:	b082      	sub	sp, #8
    f980:	af00      	add	r7, sp, #0
    f982:	6078      	str	r0, [r7, #4]
    f984:	4a05      	ldr	r2, [pc, #20]	; (f99c <_ZN14Calendar_ClassD1Ev+0x20>)
    f986:	687b      	ldr	r3, [r7, #4]
    f988:	601a      	str	r2, [r3, #0]
    f98a:	687b      	ldr	r3, [r7, #4]
    f98c:	4618      	mov	r0, r3
    f98e:	4b04      	ldr	r3, [pc, #16]	; (f9a0 <_ZN14Calendar_ClassD1Ev+0x24>)
    f990:	4798      	blx	r3
{
} //~Calendar_Class
    f992:	687b      	ldr	r3, [r7, #4]
    f994:	4618      	mov	r0, r3
    f996:	3708      	adds	r7, #8
    f998:	46bd      	mov	sp, r7
    f99a:	bd80      	pop	{r7, pc}
    f99c:	00010bec 	.word	0x00010bec
    f9a0:	0000fc75 	.word	0x0000fc75

0000f9a4 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    f9a4:	b580      	push	{r7, lr}
    f9a6:	b082      	sub	sp, #8
    f9a8:	af00      	add	r7, sp, #0
    f9aa:	6078      	str	r0, [r7, #4]
    f9ac:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    f9ae:	687b      	ldr	r3, [r7, #4]
    f9b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    f9b4:	6839      	ldr	r1, [r7, #0]
    f9b6:	4618      	mov	r0, r3
    f9b8:	4b03      	ldr	r3, [pc, #12]	; (f9c8 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    f9ba:	4798      	blx	r3
    f9bc:	4603      	mov	r3, r0
}
    f9be:	4618      	mov	r0, r3
    f9c0:	3708      	adds	r7, #8
    f9c2:	46bd      	mov	sp, r7
    f9c4:	bd80      	pop	{r7, pc}
    f9c6:	bf00      	nop
    f9c8:	00002111 	.word	0x00002111

0000f9cc <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    f9cc:	b480      	push	{r7}
    f9ce:	b083      	sub	sp, #12
    f9d0:	af00      	add	r7, sp, #0
    f9d2:	6078      	str	r0, [r7, #4]
    f9d4:	460b      	mov	r3, r1
    f9d6:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    f9d8:	887b      	ldrh	r3, [r7, #2]
    f9da:	f003 0303 	and.w	r3, r3, #3
    f9de:	2b00      	cmp	r3, #0
    f9e0:	d001      	beq.n	f9e6 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    f9e2:	2300      	movs	r3, #0
    f9e4:	e000      	b.n	f9e8 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    f9e6:	2301      	movs	r3, #1
	}
}
    f9e8:	4618      	mov	r0, r3
    f9ea:	370c      	adds	r7, #12
    f9ec:	46bd      	mov	sp, r7
    f9ee:	bc80      	pop	{r7}
    f9f0:	4770      	bx	lr
	...

0000f9f4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    f9f4:	b580      	push	{r7, lr}
    f9f6:	b086      	sub	sp, #24
    f9f8:	af00      	add	r7, sp, #0
    f9fa:	6078      	str	r0, [r7, #4]
    f9fc:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    f9fe:	2300      	movs	r3, #0
    fa00:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    fa02:	2300      	movs	r3, #0
    fa04:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    fa06:	683b      	ldr	r3, [r7, #0]
    fa08:	88db      	ldrh	r3, [r3, #6]
    fa0a:	b2da      	uxtb	r2, r3
    fa0c:	687b      	ldr	r3, [r7, #4]
    fa0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    fa12:	699b      	ldr	r3, [r3, #24]
    fa14:	b2db      	uxtb	r3, r3
    fa16:	1ad3      	subs	r3, r2, r3
    fa18:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    fa1a:	683b      	ldr	r3, [r7, #0]
    fa1c:	795b      	ldrb	r3, [r3, #5]
    fa1e:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    fa20:	683b      	ldr	r3, [r7, #0]
    fa22:	791b      	ldrb	r3, [r3, #4]
    fa24:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    fa26:	683b      	ldr	r3, [r7, #0]
    fa28:	789b      	ldrb	r3, [r3, #2]
    fa2a:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    fa2c:	683b      	ldr	r3, [r7, #0]
    fa2e:	785b      	ldrb	r3, [r3, #1]
    fa30:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    fa32:	683b      	ldr	r3, [r7, #0]
    fa34:	781b      	ldrb	r3, [r3, #0]
    fa36:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    fa38:	2300      	movs	r3, #0
    fa3a:	613b      	str	r3, [r7, #16]
    fa3c:	7bfa      	ldrb	r2, [r7, #15]
    fa3e:	693b      	ldr	r3, [r7, #16]
    fa40:	429a      	cmp	r2, r3
    fa42:	d91e      	bls.n	fa82 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    fa44:	687b      	ldr	r3, [r7, #4]
    fa46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    fa4a:	699b      	ldr	r3, [r3, #24]
    fa4c:	b29a      	uxth	r2, r3
    fa4e:	693b      	ldr	r3, [r7, #16]
    fa50:	b29b      	uxth	r3, r3
    fa52:	4413      	add	r3, r2
    fa54:	b29b      	uxth	r3, r3
    fa56:	4619      	mov	r1, r3
    fa58:	6878      	ldr	r0, [r7, #4]
    fa5a:	4b27      	ldr	r3, [pc, #156]	; (faf8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    fa5c:	4798      	blx	r3
    fa5e:	4603      	mov	r3, r0
    fa60:	2b00      	cmp	r3, #0
    fa62:	d006      	beq.n	fa72 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    fa64:	697b      	ldr	r3, [r7, #20]
    fa66:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    fa6a:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    fa6e:	617b      	str	r3, [r7, #20]
    fa70:	e003      	b.n	fa7a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    fa72:	697a      	ldr	r2, [r7, #20]
    fa74:	4b21      	ldr	r3, [pc, #132]	; (fafc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    fa76:	4413      	add	r3, r2
    fa78:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    fa7a:	693b      	ldr	r3, [r7, #16]
    fa7c:	3301      	adds	r3, #1
    fa7e:	613b      	str	r3, [r7, #16]
    fa80:	e7dc      	b.n	fa3c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    fa82:	2301      	movs	r3, #1
    fa84:	613b      	str	r3, [r7, #16]
    fa86:	7bba      	ldrb	r2, [r7, #14]
    fa88:	693b      	ldr	r3, [r7, #16]
    fa8a:	429a      	cmp	r2, r3
    fa8c:	d910      	bls.n	fab0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    fa8e:	683b      	ldr	r3, [r7, #0]
    fa90:	88db      	ldrh	r3, [r3, #6]
    fa92:	4619      	mov	r1, r3
    fa94:	693b      	ldr	r3, [r7, #16]
    fa96:	b2db      	uxtb	r3, r3
    fa98:	461a      	mov	r2, r3
    fa9a:	6878      	ldr	r0, [r7, #4]
    fa9c:	4b18      	ldr	r3, [pc, #96]	; (fb00 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    fa9e:	4798      	blx	r3
    faa0:	4602      	mov	r2, r0
    faa2:	697b      	ldr	r3, [r7, #20]
    faa4:	4413      	add	r3, r2
    faa6:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    faa8:	693b      	ldr	r3, [r7, #16]
    faaa:	3301      	adds	r3, #1
    faac:	613b      	str	r3, [r7, #16]
    faae:	e7ea      	b.n	fa86 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    fab0:	7b7b      	ldrb	r3, [r7, #13]
    fab2:	3b01      	subs	r3, #1
    fab4:	4a13      	ldr	r2, [pc, #76]	; (fb04 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    fab6:	fb02 f303 	mul.w	r3, r2, r3
    faba:	461a      	mov	r2, r3
    fabc:	697b      	ldr	r3, [r7, #20]
    fabe:	4413      	add	r3, r2
    fac0:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    fac2:	7b3b      	ldrb	r3, [r7, #12]
    fac4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    fac8:	fb02 f303 	mul.w	r3, r2, r3
    facc:	461a      	mov	r2, r3
    face:	697b      	ldr	r3, [r7, #20]
    fad0:	4413      	add	r3, r2
    fad2:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    fad4:	7afa      	ldrb	r2, [r7, #11]
    fad6:	4613      	mov	r3, r2
    fad8:	011b      	lsls	r3, r3, #4
    fada:	1a9b      	subs	r3, r3, r2
    fadc:	009b      	lsls	r3, r3, #2
    fade:	461a      	mov	r2, r3
    fae0:	697b      	ldr	r3, [r7, #20]
    fae2:	4413      	add	r3, r2
    fae4:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    fae6:	7abb      	ldrb	r3, [r7, #10]
    fae8:	697a      	ldr	r2, [r7, #20]
    faea:	4413      	add	r3, r2
    faec:	617b      	str	r3, [r7, #20]

	return tmp;
    faee:	697b      	ldr	r3, [r7, #20]
}
    faf0:	4618      	mov	r0, r3
    faf2:	3718      	adds	r7, #24
    faf4:	46bd      	mov	sp, r7
    faf6:	bd80      	pop	{r7, pc}
    faf8:	0000f9cd 	.word	0x0000f9cd
    fafc:	01e13380 	.word	0x01e13380
    fb00:	0000fb09 	.word	0x0000fb09
    fb04:	00015180 	.word	0x00015180

0000fb08 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    fb08:	b580      	push	{r7, lr}
    fb0a:	b086      	sub	sp, #24
    fb0c:	af00      	add	r7, sp, #0
    fb0e:	60f8      	str	r0, [r7, #12]
    fb10:	60b9      	str	r1, [r7, #8]
    fb12:	4613      	mov	r3, r2
    fb14:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    fb16:	2300      	movs	r3, #0
    fb18:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    fb1a:	68bb      	ldr	r3, [r7, #8]
    fb1c:	b29b      	uxth	r3, r3
    fb1e:	4619      	mov	r1, r3
    fb20:	68f8      	ldr	r0, [r7, #12]
    fb22:	4b2f      	ldr	r3, [pc, #188]	; (fbe0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    fb24:	4798      	blx	r3
    fb26:	4603      	mov	r3, r0
    fb28:	2b00      	cmp	r3, #0
    fb2a:	d028      	beq.n	fb7e <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    fb2c:	79fb      	ldrb	r3, [r7, #7]
    fb2e:	3b01      	subs	r3, #1
    fb30:	2b0b      	cmp	r3, #11
    fb32:	d84c      	bhi.n	fbce <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    fb34:	a201      	add	r2, pc, #4	; (adr r2, fb3c <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    fb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fb3a:	bf00      	nop
    fb3c:	0000fb6d 	.word	0x0000fb6d
    fb40:	0000fb73 	.word	0x0000fb73
    fb44:	0000fb6d 	.word	0x0000fb6d
    fb48:	0000fb79 	.word	0x0000fb79
    fb4c:	0000fb6d 	.word	0x0000fb6d
    fb50:	0000fb79 	.word	0x0000fb79
    fb54:	0000fb6d 	.word	0x0000fb6d
    fb58:	0000fb6d 	.word	0x0000fb6d
    fb5c:	0000fb79 	.word	0x0000fb79
    fb60:	0000fb6d 	.word	0x0000fb6d
    fb64:	0000fb79 	.word	0x0000fb79
    fb68:	0000fb6d 	.word	0x0000fb6d
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    fb6c:	4b1d      	ldr	r3, [pc, #116]	; (fbe4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    fb6e:	617b      	str	r3, [r7, #20]
			break;
    fb70:	e030      	b.n	fbd4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    fb72:	4b1d      	ldr	r3, [pc, #116]	; (fbe8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    fb74:	617b      	str	r3, [r7, #20]
			break;
    fb76:	e02d      	b.n	fbd4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    fb78:	4b1c      	ldr	r3, [pc, #112]	; (fbec <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    fb7a:	617b      	str	r3, [r7, #20]
			break;
    fb7c:	e02a      	b.n	fbd4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    fb7e:	79fb      	ldrb	r3, [r7, #7]
    fb80:	3b01      	subs	r3, #1
    fb82:	2b0b      	cmp	r3, #11
    fb84:	d825      	bhi.n	fbd2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    fb86:	a201      	add	r2, pc, #4	; (adr r2, fb8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    fb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fb8c:	0000fbbd 	.word	0x0000fbbd
    fb90:	0000fbc3 	.word	0x0000fbc3
    fb94:	0000fbbd 	.word	0x0000fbbd
    fb98:	0000fbc9 	.word	0x0000fbc9
    fb9c:	0000fbbd 	.word	0x0000fbbd
    fba0:	0000fbc9 	.word	0x0000fbc9
    fba4:	0000fbbd 	.word	0x0000fbbd
    fba8:	0000fbbd 	.word	0x0000fbbd
    fbac:	0000fbc9 	.word	0x0000fbc9
    fbb0:	0000fbbd 	.word	0x0000fbbd
    fbb4:	0000fbc9 	.word	0x0000fbc9
    fbb8:	0000fbbd 	.word	0x0000fbbd
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    fbbc:	4b09      	ldr	r3, [pc, #36]	; (fbe4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    fbbe:	617b      	str	r3, [r7, #20]
			break;
    fbc0:	e008      	b.n	fbd4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    fbc2:	4b0b      	ldr	r3, [pc, #44]	; (fbf0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    fbc4:	617b      	str	r3, [r7, #20]
			break;
    fbc6:	e005      	b.n	fbd4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    fbc8:	4b08      	ldr	r3, [pc, #32]	; (fbec <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    fbca:	617b      	str	r3, [r7, #20]
			break;
    fbcc:	e002      	b.n	fbd4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    fbce:	bf00      	nop
    fbd0:	e000      	b.n	fbd4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    fbd2:	bf00      	nop
		}
	}

	return sec_in_month;
    fbd4:	697b      	ldr	r3, [r7, #20]
}
    fbd6:	4618      	mov	r0, r3
    fbd8:	3718      	adds	r7, #24
    fbda:	46bd      	mov	sp, r7
    fbdc:	bd80      	pop	{r7, pc}
    fbde:	bf00      	nop
    fbe0:	0000f9cd 	.word	0x0000f9cd
    fbe4:	0028de80 	.word	0x0028de80
    fbe8:	00263b80 	.word	0x00263b80
    fbec:	00278d00 	.word	0x00278d00
    fbf0:	0024ea00 	.word	0x0024ea00

0000fbf4 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

    fbf4:	b580      	push	{r7, lr}
    fbf6:	b082      	sub	sp, #8
    fbf8:	af00      	add	r7, sp, #0
    fbfa:	6078      	str	r0, [r7, #4]
    fbfc:	6039      	str	r1, [r7, #0]
    fbfe:	687b      	ldr	r3, [r7, #4]
    fc00:	2b01      	cmp	r3, #1
    fc02:	d10d      	bne.n	fc20 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    fc04:	683b      	ldr	r3, [r7, #0]
    fc06:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fc0a:	4293      	cmp	r3, r2
    fc0c:	d108      	bne.n	fc20 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    fc0e:	4906      	ldr	r1, [pc, #24]	; (fc28 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    fc10:	4806      	ldr	r0, [pc, #24]	; (fc2c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fc12:	4b07      	ldr	r3, [pc, #28]	; (fc30 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    fc14:	4798      	blx	r3
    fc16:	4a07      	ldr	r2, [pc, #28]	; (fc34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    fc18:	4907      	ldr	r1, [pc, #28]	; (fc38 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    fc1a:	4804      	ldr	r0, [pc, #16]	; (fc2c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fc1c:	4b07      	ldr	r3, [pc, #28]	; (fc3c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    fc1e:	4798      	blx	r3
    fc20:	bf00      	nop
    fc22:	3708      	adds	r7, #8
    fc24:	46bd      	mov	sp, r7
    fc26:	bd80      	pop	{r7, pc}
    fc28:	2000aab0 	.word	0x2000aab0
    fc2c:	2000a828 	.word	0x2000a828
    fc30:	0000f941 	.word	0x0000f941
    fc34:	20000000 	.word	0x20000000
    fc38:	0000f97d 	.word	0x0000f97d
    fc3c:	0000fc95 	.word	0x0000fc95

0000fc40 <_GLOBAL__sub_I_ptrCalendarClass>:
    fc40:	b580      	push	{r7, lr}
    fc42:	af00      	add	r7, sp, #0
    fc44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fc48:	2001      	movs	r0, #1
    fc4a:	4b01      	ldr	r3, [pc, #4]	; (fc50 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    fc4c:	4798      	blx	r3
    fc4e:	bd80      	pop	{r7, pc}
    fc50:	0000fbf5 	.word	0x0000fbf5

0000fc54 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    fc54:	b480      	push	{r7}
    fc56:	b083      	sub	sp, #12
    fc58:	af00      	add	r7, sp, #0
    fc5a:	6078      	str	r0, [r7, #4]
    fc5c:	4a04      	ldr	r2, [pc, #16]	; (fc70 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    fc5e:	687b      	ldr	r3, [r7, #4]
    fc60:	601a      	str	r2, [r3, #0]
{
} //~D
    fc62:	687b      	ldr	r3, [r7, #4]
    fc64:	4618      	mov	r0, r3
    fc66:	370c      	adds	r7, #12
    fc68:	46bd      	mov	sp, r7
    fc6a:	bc80      	pop	{r7}
    fc6c:	4770      	bx	lr
    fc6e:	bf00      	nop
    fc70:	00010bfc 	.word	0x00010bfc

0000fc74 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    fc74:	b480      	push	{r7}
    fc76:	b083      	sub	sp, #12
    fc78:	af00      	add	r7, sp, #0
    fc7a:	6078      	str	r0, [r7, #4]
    fc7c:	4a04      	ldr	r2, [pc, #16]	; (fc90 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    fc7e:	687b      	ldr	r3, [r7, #4]
    fc80:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    fc82:	687b      	ldr	r3, [r7, #4]
    fc84:	4618      	mov	r0, r3
    fc86:	370c      	adds	r7, #12
    fc88:	46bd      	mov	sp, r7
    fc8a:	bc80      	pop	{r7}
    fc8c:	4770      	bx	lr
    fc8e:	bf00      	nop
    fc90:	00010bfc 	.word	0x00010bfc

0000fc94 <__aeabi_atexit>:
    fc94:	460b      	mov	r3, r1
    fc96:	4601      	mov	r1, r0
    fc98:	4618      	mov	r0, r3
    fc9a:	f000 ba5f 	b.w	1015c <__cxa_atexit>
    fc9e:	bf00      	nop

0000fca0 <__aeabi_frsub>:
    fca0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    fca4:	e002      	b.n	fcac <__addsf3>
    fca6:	bf00      	nop

0000fca8 <__aeabi_fsub>:
    fca8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000fcac <__addsf3>:
    fcac:	0042      	lsls	r2, r0, #1
    fcae:	bf1f      	itttt	ne
    fcb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    fcb4:	ea92 0f03 	teqne	r2, r3
    fcb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    fcbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    fcc0:	d06a      	beq.n	fd98 <__addsf3+0xec>
    fcc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    fcc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    fcca:	bfc1      	itttt	gt
    fccc:	18d2      	addgt	r2, r2, r3
    fcce:	4041      	eorgt	r1, r0
    fcd0:	4048      	eorgt	r0, r1
    fcd2:	4041      	eorgt	r1, r0
    fcd4:	bfb8      	it	lt
    fcd6:	425b      	neglt	r3, r3
    fcd8:	2b19      	cmp	r3, #25
    fcda:	bf88      	it	hi
    fcdc:	4770      	bxhi	lr
    fcde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    fce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    fce6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fcea:	bf18      	it	ne
    fcec:	4240      	negne	r0, r0
    fcee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    fcf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    fcf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    fcfa:	bf18      	it	ne
    fcfc:	4249      	negne	r1, r1
    fcfe:	ea92 0f03 	teq	r2, r3
    fd02:	d03f      	beq.n	fd84 <__addsf3+0xd8>
    fd04:	f1a2 0201 	sub.w	r2, r2, #1
    fd08:	fa41 fc03 	asr.w	ip, r1, r3
    fd0c:	eb10 000c 	adds.w	r0, r0, ip
    fd10:	f1c3 0320 	rsb	r3, r3, #32
    fd14:	fa01 f103 	lsl.w	r1, r1, r3
    fd18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    fd1c:	d502      	bpl.n	fd24 <__addsf3+0x78>
    fd1e:	4249      	negs	r1, r1
    fd20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    fd24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    fd28:	d313      	bcc.n	fd52 <__addsf3+0xa6>
    fd2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    fd2e:	d306      	bcc.n	fd3e <__addsf3+0x92>
    fd30:	0840      	lsrs	r0, r0, #1
    fd32:	ea4f 0131 	mov.w	r1, r1, rrx
    fd36:	f102 0201 	add.w	r2, r2, #1
    fd3a:	2afe      	cmp	r2, #254	; 0xfe
    fd3c:	d251      	bcs.n	fde2 <__addsf3+0x136>
    fd3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    fd42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    fd46:	bf08      	it	eq
    fd48:	f020 0001 	biceq.w	r0, r0, #1
    fd4c:	ea40 0003 	orr.w	r0, r0, r3
    fd50:	4770      	bx	lr
    fd52:	0049      	lsls	r1, r1, #1
    fd54:	eb40 0000 	adc.w	r0, r0, r0
    fd58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    fd5c:	f1a2 0201 	sub.w	r2, r2, #1
    fd60:	d1ed      	bne.n	fd3e <__addsf3+0x92>
    fd62:	fab0 fc80 	clz	ip, r0
    fd66:	f1ac 0c08 	sub.w	ip, ip, #8
    fd6a:	ebb2 020c 	subs.w	r2, r2, ip
    fd6e:	fa00 f00c 	lsl.w	r0, r0, ip
    fd72:	bfaa      	itet	ge
    fd74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    fd78:	4252      	neglt	r2, r2
    fd7a:	4318      	orrge	r0, r3
    fd7c:	bfbc      	itt	lt
    fd7e:	40d0      	lsrlt	r0, r2
    fd80:	4318      	orrlt	r0, r3
    fd82:	4770      	bx	lr
    fd84:	f092 0f00 	teq	r2, #0
    fd88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    fd8c:	bf06      	itte	eq
    fd8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    fd92:	3201      	addeq	r2, #1
    fd94:	3b01      	subne	r3, #1
    fd96:	e7b5      	b.n	fd04 <__addsf3+0x58>
    fd98:	ea4f 0341 	mov.w	r3, r1, lsl #1
    fd9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    fda0:	bf18      	it	ne
    fda2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    fda6:	d021      	beq.n	fdec <__addsf3+0x140>
    fda8:	ea92 0f03 	teq	r2, r3
    fdac:	d004      	beq.n	fdb8 <__addsf3+0x10c>
    fdae:	f092 0f00 	teq	r2, #0
    fdb2:	bf08      	it	eq
    fdb4:	4608      	moveq	r0, r1
    fdb6:	4770      	bx	lr
    fdb8:	ea90 0f01 	teq	r0, r1
    fdbc:	bf1c      	itt	ne
    fdbe:	2000      	movne	r0, #0
    fdc0:	4770      	bxne	lr
    fdc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    fdc6:	d104      	bne.n	fdd2 <__addsf3+0x126>
    fdc8:	0040      	lsls	r0, r0, #1
    fdca:	bf28      	it	cs
    fdcc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    fdd0:	4770      	bx	lr
    fdd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    fdd6:	bf3c      	itt	cc
    fdd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    fddc:	4770      	bxcc	lr
    fdde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    fde2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    fde6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    fdea:	4770      	bx	lr
    fdec:	ea7f 6222 	mvns.w	r2, r2, asr #24
    fdf0:	bf16      	itet	ne
    fdf2:	4608      	movne	r0, r1
    fdf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    fdf8:	4601      	movne	r1, r0
    fdfa:	0242      	lsls	r2, r0, #9
    fdfc:	bf06      	itte	eq
    fdfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    fe02:	ea90 0f01 	teqeq	r0, r1
    fe06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    fe0a:	4770      	bx	lr

0000fe0c <__aeabi_ui2f>:
    fe0c:	f04f 0300 	mov.w	r3, #0
    fe10:	e004      	b.n	fe1c <__aeabi_i2f+0x8>
    fe12:	bf00      	nop

0000fe14 <__aeabi_i2f>:
    fe14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    fe18:	bf48      	it	mi
    fe1a:	4240      	negmi	r0, r0
    fe1c:	ea5f 0c00 	movs.w	ip, r0
    fe20:	bf08      	it	eq
    fe22:	4770      	bxeq	lr
    fe24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    fe28:	4601      	mov	r1, r0
    fe2a:	f04f 0000 	mov.w	r0, #0
    fe2e:	e01c      	b.n	fe6a <__aeabi_l2f+0x2a>

0000fe30 <__aeabi_ul2f>:
    fe30:	ea50 0201 	orrs.w	r2, r0, r1
    fe34:	bf08      	it	eq
    fe36:	4770      	bxeq	lr
    fe38:	f04f 0300 	mov.w	r3, #0
    fe3c:	e00a      	b.n	fe54 <__aeabi_l2f+0x14>
    fe3e:	bf00      	nop

0000fe40 <__aeabi_l2f>:
    fe40:	ea50 0201 	orrs.w	r2, r0, r1
    fe44:	bf08      	it	eq
    fe46:	4770      	bxeq	lr
    fe48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    fe4c:	d502      	bpl.n	fe54 <__aeabi_l2f+0x14>
    fe4e:	4240      	negs	r0, r0
    fe50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fe54:	ea5f 0c01 	movs.w	ip, r1
    fe58:	bf02      	ittt	eq
    fe5a:	4684      	moveq	ip, r0
    fe5c:	4601      	moveq	r1, r0
    fe5e:	2000      	moveq	r0, #0
    fe60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    fe64:	bf08      	it	eq
    fe66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    fe6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    fe6e:	fabc f28c 	clz	r2, ip
    fe72:	3a08      	subs	r2, #8
    fe74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    fe78:	db10      	blt.n	fe9c <__aeabi_l2f+0x5c>
    fe7a:	fa01 fc02 	lsl.w	ip, r1, r2
    fe7e:	4463      	add	r3, ip
    fe80:	fa00 fc02 	lsl.w	ip, r0, r2
    fe84:	f1c2 0220 	rsb	r2, r2, #32
    fe88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    fe8c:	fa20 f202 	lsr.w	r2, r0, r2
    fe90:	eb43 0002 	adc.w	r0, r3, r2
    fe94:	bf08      	it	eq
    fe96:	f020 0001 	biceq.w	r0, r0, #1
    fe9a:	4770      	bx	lr
    fe9c:	f102 0220 	add.w	r2, r2, #32
    fea0:	fa01 fc02 	lsl.w	ip, r1, r2
    fea4:	f1c2 0220 	rsb	r2, r2, #32
    fea8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    feac:	fa21 f202 	lsr.w	r2, r1, r2
    feb0:	eb43 0002 	adc.w	r0, r3, r2
    feb4:	bf08      	it	eq
    feb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    feba:	4770      	bx	lr

0000febc <__aeabi_fmul>:
    febc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    fec0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    fec4:	bf1e      	ittt	ne
    fec6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    feca:	ea92 0f0c 	teqne	r2, ip
    fece:	ea93 0f0c 	teqne	r3, ip
    fed2:	d06f      	beq.n	ffb4 <__aeabi_fmul+0xf8>
    fed4:	441a      	add	r2, r3
    fed6:	ea80 0c01 	eor.w	ip, r0, r1
    feda:	0240      	lsls	r0, r0, #9
    fedc:	bf18      	it	ne
    fede:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    fee2:	d01e      	beq.n	ff22 <__aeabi_fmul+0x66>
    fee4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    fee8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    feec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    fef0:	fba0 3101 	umull	r3, r1, r0, r1
    fef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    fef8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    fefc:	bf3e      	ittt	cc
    fefe:	0049      	lslcc	r1, r1, #1
    ff00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    ff04:	005b      	lslcc	r3, r3, #1
    ff06:	ea40 0001 	orr.w	r0, r0, r1
    ff0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    ff0e:	2afd      	cmp	r2, #253	; 0xfd
    ff10:	d81d      	bhi.n	ff4e <__aeabi_fmul+0x92>
    ff12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ff16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ff1a:	bf08      	it	eq
    ff1c:	f020 0001 	biceq.w	r0, r0, #1
    ff20:	4770      	bx	lr
    ff22:	f090 0f00 	teq	r0, #0
    ff26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    ff2a:	bf08      	it	eq
    ff2c:	0249      	lsleq	r1, r1, #9
    ff2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    ff32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    ff36:	3a7f      	subs	r2, #127	; 0x7f
    ff38:	bfc2      	ittt	gt
    ff3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    ff3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    ff42:	4770      	bxgt	lr
    ff44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ff48:	f04f 0300 	mov.w	r3, #0
    ff4c:	3a01      	subs	r2, #1
    ff4e:	dc5d      	bgt.n	1000c <STACK_SIZE+0xc>
    ff50:	f112 0f19 	cmn.w	r2, #25
    ff54:	bfdc      	itt	le
    ff56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    ff5a:	4770      	bxle	lr
    ff5c:	f1c2 0200 	rsb	r2, r2, #0
    ff60:	0041      	lsls	r1, r0, #1
    ff62:	fa21 f102 	lsr.w	r1, r1, r2
    ff66:	f1c2 0220 	rsb	r2, r2, #32
    ff6a:	fa00 fc02 	lsl.w	ip, r0, r2
    ff6e:	ea5f 0031 	movs.w	r0, r1, rrx
    ff72:	f140 0000 	adc.w	r0, r0, #0
    ff76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    ff7a:	bf08      	it	eq
    ff7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    ff80:	4770      	bx	lr
    ff82:	f092 0f00 	teq	r2, #0
    ff86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    ff8a:	bf02      	ittt	eq
    ff8c:	0040      	lsleq	r0, r0, #1
    ff8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    ff92:	3a01      	subeq	r2, #1
    ff94:	d0f9      	beq.n	ff8a <__aeabi_fmul+0xce>
    ff96:	ea40 000c 	orr.w	r0, r0, ip
    ff9a:	f093 0f00 	teq	r3, #0
    ff9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    ffa2:	bf02      	ittt	eq
    ffa4:	0049      	lsleq	r1, r1, #1
    ffa6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    ffaa:	3b01      	subeq	r3, #1
    ffac:	d0f9      	beq.n	ffa2 <__aeabi_fmul+0xe6>
    ffae:	ea41 010c 	orr.w	r1, r1, ip
    ffb2:	e78f      	b.n	fed4 <__aeabi_fmul+0x18>
    ffb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    ffb8:	ea92 0f0c 	teq	r2, ip
    ffbc:	bf18      	it	ne
    ffbe:	ea93 0f0c 	teqne	r3, ip
    ffc2:	d00a      	beq.n	ffda <__aeabi_fmul+0x11e>
    ffc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    ffc8:	bf18      	it	ne
    ffca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    ffce:	d1d8      	bne.n	ff82 <__aeabi_fmul+0xc6>
    ffd0:	ea80 0001 	eor.w	r0, r0, r1
    ffd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    ffd8:	4770      	bx	lr
    ffda:	f090 0f00 	teq	r0, #0
    ffde:	bf17      	itett	ne
    ffe0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    ffe4:	4608      	moveq	r0, r1
    ffe6:	f091 0f00 	teqne	r1, #0
    ffea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    ffee:	d014      	beq.n	1001a <STACK_SIZE+0x1a>
    fff0:	ea92 0f0c 	teq	r2, ip
    fff4:	d101      	bne.n	fffa <__aeabi_fmul+0x13e>
    fff6:	0242      	lsls	r2, r0, #9
    fff8:	d10f      	bne.n	1001a <STACK_SIZE+0x1a>
    fffa:	ea93 0f0c 	teq	r3, ip
    fffe:	d103      	bne.n	10008 <STACK_SIZE+0x8>
   10000:	024b      	lsls	r3, r1, #9
   10002:	bf18      	it	ne
   10004:	4608      	movne	r0, r1
   10006:	d108      	bne.n	1001a <STACK_SIZE+0x1a>
   10008:	ea80 0001 	eor.w	r0, r0, r1
   1000c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10010:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10014:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10018:	4770      	bx	lr
   1001a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1001e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   10022:	4770      	bx	lr

00010024 <__aeabi_fdiv>:
   10024:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10028:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1002c:	bf1e      	ittt	ne
   1002e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   10032:	ea92 0f0c 	teqne	r2, ip
   10036:	ea93 0f0c 	teqne	r3, ip
   1003a:	d069      	beq.n	10110 <__aeabi_fdiv+0xec>
   1003c:	eba2 0203 	sub.w	r2, r2, r3
   10040:	ea80 0c01 	eor.w	ip, r0, r1
   10044:	0249      	lsls	r1, r1, #9
   10046:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1004a:	d037      	beq.n	100bc <__aeabi_fdiv+0x98>
   1004c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10050:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   10054:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   10058:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1005c:	428b      	cmp	r3, r1
   1005e:	bf38      	it	cc
   10060:	005b      	lslcc	r3, r3, #1
   10062:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   10066:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1006a:	428b      	cmp	r3, r1
   1006c:	bf24      	itt	cs
   1006e:	1a5b      	subcs	r3, r3, r1
   10070:	ea40 000c 	orrcs.w	r0, r0, ip
   10074:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   10078:	bf24      	itt	cs
   1007a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1007e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10082:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   10086:	bf24      	itt	cs
   10088:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1008c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10090:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   10094:	bf24      	itt	cs
   10096:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1009a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1009e:	011b      	lsls	r3, r3, #4
   100a0:	bf18      	it	ne
   100a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   100a6:	d1e0      	bne.n	1006a <__aeabi_fdiv+0x46>
   100a8:	2afd      	cmp	r2, #253	; 0xfd
   100aa:	f63f af50 	bhi.w	ff4e <__aeabi_fmul+0x92>
   100ae:	428b      	cmp	r3, r1
   100b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   100b4:	bf08      	it	eq
   100b6:	f020 0001 	biceq.w	r0, r0, #1
   100ba:	4770      	bx	lr
   100bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   100c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   100c4:	327f      	adds	r2, #127	; 0x7f
   100c6:	bfc2      	ittt	gt
   100c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   100cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   100d0:	4770      	bxgt	lr
   100d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   100d6:	f04f 0300 	mov.w	r3, #0
   100da:	3a01      	subs	r2, #1
   100dc:	e737      	b.n	ff4e <__aeabi_fmul+0x92>
   100de:	f092 0f00 	teq	r2, #0
   100e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   100e6:	bf02      	ittt	eq
   100e8:	0040      	lsleq	r0, r0, #1
   100ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   100ee:	3a01      	subeq	r2, #1
   100f0:	d0f9      	beq.n	100e6 <__aeabi_fdiv+0xc2>
   100f2:	ea40 000c 	orr.w	r0, r0, ip
   100f6:	f093 0f00 	teq	r3, #0
   100fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   100fe:	bf02      	ittt	eq
   10100:	0049      	lsleq	r1, r1, #1
   10102:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   10106:	3b01      	subeq	r3, #1
   10108:	d0f9      	beq.n	100fe <__aeabi_fdiv+0xda>
   1010a:	ea41 010c 	orr.w	r1, r1, ip
   1010e:	e795      	b.n	1003c <__aeabi_fdiv+0x18>
   10110:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   10114:	ea92 0f0c 	teq	r2, ip
   10118:	d108      	bne.n	1012c <__aeabi_fdiv+0x108>
   1011a:	0242      	lsls	r2, r0, #9
   1011c:	f47f af7d 	bne.w	1001a <STACK_SIZE+0x1a>
   10120:	ea93 0f0c 	teq	r3, ip
   10124:	f47f af70 	bne.w	10008 <STACK_SIZE+0x8>
   10128:	4608      	mov	r0, r1
   1012a:	e776      	b.n	1001a <STACK_SIZE+0x1a>
   1012c:	ea93 0f0c 	teq	r3, ip
   10130:	d104      	bne.n	1013c <__aeabi_fdiv+0x118>
   10132:	024b      	lsls	r3, r1, #9
   10134:	f43f af4c 	beq.w	ffd0 <__aeabi_fmul+0x114>
   10138:	4608      	mov	r0, r1
   1013a:	e76e      	b.n	1001a <STACK_SIZE+0x1a>
   1013c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   10140:	bf18      	it	ne
   10142:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   10146:	d1ca      	bne.n	100de <__aeabi_fdiv+0xba>
   10148:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1014c:	f47f af5c 	bne.w	10008 <STACK_SIZE+0x8>
   10150:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   10154:	f47f af3c 	bne.w	ffd0 <__aeabi_fmul+0x114>
   10158:	e75f      	b.n	1001a <STACK_SIZE+0x1a>
   1015a:	bf00      	nop

0001015c <__cxa_atexit>:
   1015c:	4613      	mov	r3, r2
   1015e:	460a      	mov	r2, r1
   10160:	4601      	mov	r1, r0
   10162:	2002      	movs	r0, #2
   10164:	f000 ba1a 	b.w	1059c <__register_exitproc>

00010168 <ffs>:
   10168:	b140      	cbz	r0, 1017c <ffs+0x14>
   1016a:	2300      	movs	r3, #0
   1016c:	fa40 f103 	asr.w	r1, r0, r3
   10170:	1c5a      	adds	r2, r3, #1
   10172:	07c9      	lsls	r1, r1, #31
   10174:	4613      	mov	r3, r2
   10176:	d5f9      	bpl.n	1016c <ffs+0x4>
   10178:	4610      	mov	r0, r2
   1017a:	4770      	bx	lr
   1017c:	4602      	mov	r2, r0
   1017e:	4610      	mov	r0, r2
   10180:	4770      	bx	lr
   10182:	bf00      	nop

00010184 <__libc_init_array>:
   10184:	b570      	push	{r4, r5, r6, lr}
   10186:	4e0f      	ldr	r6, [pc, #60]	; (101c4 <__libc_init_array+0x40>)
   10188:	4d0f      	ldr	r5, [pc, #60]	; (101c8 <__libc_init_array+0x44>)
   1018a:	1b76      	subs	r6, r6, r5
   1018c:	10b6      	asrs	r6, r6, #2
   1018e:	bf18      	it	ne
   10190:	2400      	movne	r4, #0
   10192:	d005      	beq.n	101a0 <__libc_init_array+0x1c>
   10194:	3401      	adds	r4, #1
   10196:	f855 3b04 	ldr.w	r3, [r5], #4
   1019a:	4798      	blx	r3
   1019c:	42a6      	cmp	r6, r4
   1019e:	d1f9      	bne.n	10194 <__libc_init_array+0x10>
   101a0:	4e0a      	ldr	r6, [pc, #40]	; (101cc <__libc_init_array+0x48>)
   101a2:	4d0b      	ldr	r5, [pc, #44]	; (101d0 <__libc_init_array+0x4c>)
   101a4:	1b76      	subs	r6, r6, r5
   101a6:	f000 fd2f 	bl	10c08 <_init>
   101aa:	10b6      	asrs	r6, r6, #2
   101ac:	bf18      	it	ne
   101ae:	2400      	movne	r4, #0
   101b0:	d006      	beq.n	101c0 <__libc_init_array+0x3c>
   101b2:	3401      	adds	r4, #1
   101b4:	f855 3b04 	ldr.w	r3, [r5], #4
   101b8:	4798      	blx	r3
   101ba:	42a6      	cmp	r6, r4
   101bc:	d1f9      	bne.n	101b2 <__libc_init_array+0x2e>
   101be:	bd70      	pop	{r4, r5, r6, pc}
   101c0:	bd70      	pop	{r4, r5, r6, pc}
   101c2:	bf00      	nop
   101c4:	00010c14 	.word	0x00010c14
   101c8:	00010c14 	.word	0x00010c14
   101cc:	00010c48 	.word	0x00010c48
   101d0:	00010c14 	.word	0x00010c14

000101d4 <memcpy>:
   101d4:	4684      	mov	ip, r0
   101d6:	ea41 0300 	orr.w	r3, r1, r0
   101da:	f013 0303 	ands.w	r3, r3, #3
   101de:	d16d      	bne.n	102bc <memcpy+0xe8>
   101e0:	3a40      	subs	r2, #64	; 0x40
   101e2:	d341      	bcc.n	10268 <memcpy+0x94>
   101e4:	f851 3b04 	ldr.w	r3, [r1], #4
   101e8:	f840 3b04 	str.w	r3, [r0], #4
   101ec:	f851 3b04 	ldr.w	r3, [r1], #4
   101f0:	f840 3b04 	str.w	r3, [r0], #4
   101f4:	f851 3b04 	ldr.w	r3, [r1], #4
   101f8:	f840 3b04 	str.w	r3, [r0], #4
   101fc:	f851 3b04 	ldr.w	r3, [r1], #4
   10200:	f840 3b04 	str.w	r3, [r0], #4
   10204:	f851 3b04 	ldr.w	r3, [r1], #4
   10208:	f840 3b04 	str.w	r3, [r0], #4
   1020c:	f851 3b04 	ldr.w	r3, [r1], #4
   10210:	f840 3b04 	str.w	r3, [r0], #4
   10214:	f851 3b04 	ldr.w	r3, [r1], #4
   10218:	f840 3b04 	str.w	r3, [r0], #4
   1021c:	f851 3b04 	ldr.w	r3, [r1], #4
   10220:	f840 3b04 	str.w	r3, [r0], #4
   10224:	f851 3b04 	ldr.w	r3, [r1], #4
   10228:	f840 3b04 	str.w	r3, [r0], #4
   1022c:	f851 3b04 	ldr.w	r3, [r1], #4
   10230:	f840 3b04 	str.w	r3, [r0], #4
   10234:	f851 3b04 	ldr.w	r3, [r1], #4
   10238:	f840 3b04 	str.w	r3, [r0], #4
   1023c:	f851 3b04 	ldr.w	r3, [r1], #4
   10240:	f840 3b04 	str.w	r3, [r0], #4
   10244:	f851 3b04 	ldr.w	r3, [r1], #4
   10248:	f840 3b04 	str.w	r3, [r0], #4
   1024c:	f851 3b04 	ldr.w	r3, [r1], #4
   10250:	f840 3b04 	str.w	r3, [r0], #4
   10254:	f851 3b04 	ldr.w	r3, [r1], #4
   10258:	f840 3b04 	str.w	r3, [r0], #4
   1025c:	f851 3b04 	ldr.w	r3, [r1], #4
   10260:	f840 3b04 	str.w	r3, [r0], #4
   10264:	3a40      	subs	r2, #64	; 0x40
   10266:	d2bd      	bcs.n	101e4 <memcpy+0x10>
   10268:	3230      	adds	r2, #48	; 0x30
   1026a:	d311      	bcc.n	10290 <memcpy+0xbc>
   1026c:	f851 3b04 	ldr.w	r3, [r1], #4
   10270:	f840 3b04 	str.w	r3, [r0], #4
   10274:	f851 3b04 	ldr.w	r3, [r1], #4
   10278:	f840 3b04 	str.w	r3, [r0], #4
   1027c:	f851 3b04 	ldr.w	r3, [r1], #4
   10280:	f840 3b04 	str.w	r3, [r0], #4
   10284:	f851 3b04 	ldr.w	r3, [r1], #4
   10288:	f840 3b04 	str.w	r3, [r0], #4
   1028c:	3a10      	subs	r2, #16
   1028e:	d2ed      	bcs.n	1026c <memcpy+0x98>
   10290:	320c      	adds	r2, #12
   10292:	d305      	bcc.n	102a0 <memcpy+0xcc>
   10294:	f851 3b04 	ldr.w	r3, [r1], #4
   10298:	f840 3b04 	str.w	r3, [r0], #4
   1029c:	3a04      	subs	r2, #4
   1029e:	d2f9      	bcs.n	10294 <memcpy+0xc0>
   102a0:	3204      	adds	r2, #4
   102a2:	d008      	beq.n	102b6 <memcpy+0xe2>
   102a4:	07d2      	lsls	r2, r2, #31
   102a6:	bf1c      	itt	ne
   102a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   102ac:	f800 3b01 	strbne.w	r3, [r0], #1
   102b0:	d301      	bcc.n	102b6 <memcpy+0xe2>
   102b2:	880b      	ldrh	r3, [r1, #0]
   102b4:	8003      	strh	r3, [r0, #0]
   102b6:	4660      	mov	r0, ip
   102b8:	4770      	bx	lr
   102ba:	bf00      	nop
   102bc:	2a08      	cmp	r2, #8
   102be:	d313      	bcc.n	102e8 <memcpy+0x114>
   102c0:	078b      	lsls	r3, r1, #30
   102c2:	d08d      	beq.n	101e0 <memcpy+0xc>
   102c4:	f010 0303 	ands.w	r3, r0, #3
   102c8:	d08a      	beq.n	101e0 <memcpy+0xc>
   102ca:	f1c3 0304 	rsb	r3, r3, #4
   102ce:	1ad2      	subs	r2, r2, r3
   102d0:	07db      	lsls	r3, r3, #31
   102d2:	bf1c      	itt	ne
   102d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   102d8:	f800 3b01 	strbne.w	r3, [r0], #1
   102dc:	d380      	bcc.n	101e0 <memcpy+0xc>
   102de:	f831 3b02 	ldrh.w	r3, [r1], #2
   102e2:	f820 3b02 	strh.w	r3, [r0], #2
   102e6:	e77b      	b.n	101e0 <memcpy+0xc>
   102e8:	3a04      	subs	r2, #4
   102ea:	d3d9      	bcc.n	102a0 <memcpy+0xcc>
   102ec:	3a01      	subs	r2, #1
   102ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   102f2:	f800 3b01 	strb.w	r3, [r0], #1
   102f6:	d2f9      	bcs.n	102ec <memcpy+0x118>
   102f8:	780b      	ldrb	r3, [r1, #0]
   102fa:	7003      	strb	r3, [r0, #0]
   102fc:	784b      	ldrb	r3, [r1, #1]
   102fe:	7043      	strb	r3, [r0, #1]
   10300:	788b      	ldrb	r3, [r1, #2]
   10302:	7083      	strb	r3, [r0, #2]
   10304:	4660      	mov	r0, ip
   10306:	4770      	bx	lr

00010308 <memset>:
   10308:	b470      	push	{r4, r5, r6}
   1030a:	0786      	lsls	r6, r0, #30
   1030c:	d046      	beq.n	1039c <memset+0x94>
   1030e:	1e54      	subs	r4, r2, #1
   10310:	2a00      	cmp	r2, #0
   10312:	d041      	beq.n	10398 <memset+0x90>
   10314:	b2ca      	uxtb	r2, r1
   10316:	4603      	mov	r3, r0
   10318:	e002      	b.n	10320 <memset+0x18>
   1031a:	f114 34ff 	adds.w	r4, r4, #4294967295
   1031e:	d33b      	bcc.n	10398 <memset+0x90>
   10320:	f803 2b01 	strb.w	r2, [r3], #1
   10324:	079d      	lsls	r5, r3, #30
   10326:	d1f8      	bne.n	1031a <memset+0x12>
   10328:	2c03      	cmp	r4, #3
   1032a:	d92e      	bls.n	1038a <memset+0x82>
   1032c:	b2cd      	uxtb	r5, r1
   1032e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10332:	2c0f      	cmp	r4, #15
   10334:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10338:	d919      	bls.n	1036e <memset+0x66>
   1033a:	f103 0210 	add.w	r2, r3, #16
   1033e:	4626      	mov	r6, r4
   10340:	3e10      	subs	r6, #16
   10342:	2e0f      	cmp	r6, #15
   10344:	f842 5c10 	str.w	r5, [r2, #-16]
   10348:	f842 5c0c 	str.w	r5, [r2, #-12]
   1034c:	f842 5c08 	str.w	r5, [r2, #-8]
   10350:	f842 5c04 	str.w	r5, [r2, #-4]
   10354:	f102 0210 	add.w	r2, r2, #16
   10358:	d8f2      	bhi.n	10340 <memset+0x38>
   1035a:	f1a4 0210 	sub.w	r2, r4, #16
   1035e:	f022 020f 	bic.w	r2, r2, #15
   10362:	f004 040f 	and.w	r4, r4, #15
   10366:	3210      	adds	r2, #16
   10368:	2c03      	cmp	r4, #3
   1036a:	4413      	add	r3, r2
   1036c:	d90d      	bls.n	1038a <memset+0x82>
   1036e:	461e      	mov	r6, r3
   10370:	4622      	mov	r2, r4
   10372:	3a04      	subs	r2, #4
   10374:	2a03      	cmp	r2, #3
   10376:	f846 5b04 	str.w	r5, [r6], #4
   1037a:	d8fa      	bhi.n	10372 <memset+0x6a>
   1037c:	1f22      	subs	r2, r4, #4
   1037e:	f022 0203 	bic.w	r2, r2, #3
   10382:	3204      	adds	r2, #4
   10384:	4413      	add	r3, r2
   10386:	f004 0403 	and.w	r4, r4, #3
   1038a:	b12c      	cbz	r4, 10398 <memset+0x90>
   1038c:	b2c9      	uxtb	r1, r1
   1038e:	441c      	add	r4, r3
   10390:	f803 1b01 	strb.w	r1, [r3], #1
   10394:	429c      	cmp	r4, r3
   10396:	d1fb      	bne.n	10390 <memset+0x88>
   10398:	bc70      	pop	{r4, r5, r6}
   1039a:	4770      	bx	lr
   1039c:	4614      	mov	r4, r2
   1039e:	4603      	mov	r3, r0
   103a0:	e7c2      	b.n	10328 <memset+0x20>
   103a2:	bf00      	nop

000103a4 <strcat>:
   103a4:	0783      	lsls	r3, r0, #30
   103a6:	b510      	push	{r4, lr}
   103a8:	4604      	mov	r4, r0
   103aa:	d110      	bne.n	103ce <strcat+0x2a>
   103ac:	6802      	ldr	r2, [r0, #0]
   103ae:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   103b2:	ea23 0302 	bic.w	r3, r3, r2
   103b6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   103ba:	d108      	bne.n	103ce <strcat+0x2a>
   103bc:	f850 2f04 	ldr.w	r2, [r0, #4]!
   103c0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   103c4:	ea23 0302 	bic.w	r3, r3, r2
   103c8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   103cc:	d0f6      	beq.n	103bc <strcat+0x18>
   103ce:	7803      	ldrb	r3, [r0, #0]
   103d0:	b11b      	cbz	r3, 103da <strcat+0x36>
   103d2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   103d6:	2b00      	cmp	r3, #0
   103d8:	d1fb      	bne.n	103d2 <strcat+0x2e>
   103da:	f000 f803 	bl	103e4 <strcpy>
   103de:	4620      	mov	r0, r4
   103e0:	bd10      	pop	{r4, pc}
   103e2:	bf00      	nop

000103e4 <strcpy>:
   103e4:	ea80 0201 	eor.w	r2, r0, r1
   103e8:	4684      	mov	ip, r0
   103ea:	f012 0f03 	tst.w	r2, #3
   103ee:	d14f      	bne.n	10490 <strcpy+0xac>
   103f0:	f011 0f03 	tst.w	r1, #3
   103f4:	d132      	bne.n	1045c <strcpy+0x78>
   103f6:	f84d 4d04 	str.w	r4, [sp, #-4]!
   103fa:	f011 0f04 	tst.w	r1, #4
   103fe:	f851 3b04 	ldr.w	r3, [r1], #4
   10402:	d00b      	beq.n	1041c <strcpy+0x38>
   10404:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   10408:	439a      	bics	r2, r3
   1040a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1040e:	bf04      	itt	eq
   10410:	f84c 3b04 	streq.w	r3, [ip], #4
   10414:	f851 3b04 	ldreq.w	r3, [r1], #4
   10418:	d116      	bne.n	10448 <strcpy+0x64>
   1041a:	bf00      	nop
   1041c:	f851 4b04 	ldr.w	r4, [r1], #4
   10420:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   10424:	439a      	bics	r2, r3
   10426:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1042a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1042e:	d10b      	bne.n	10448 <strcpy+0x64>
   10430:	f84c 3b04 	str.w	r3, [ip], #4
   10434:	43a2      	bics	r2, r4
   10436:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1043a:	bf04      	itt	eq
   1043c:	f851 3b04 	ldreq.w	r3, [r1], #4
   10440:	f84c 4b04 	streq.w	r4, [ip], #4
   10444:	d0ea      	beq.n	1041c <strcpy+0x38>
   10446:	4623      	mov	r3, r4
   10448:	f80c 3b01 	strb.w	r3, [ip], #1
   1044c:	f013 0fff 	tst.w	r3, #255	; 0xff
   10450:	ea4f 2333 	mov.w	r3, r3, ror #8
   10454:	d1f8      	bne.n	10448 <strcpy+0x64>
   10456:	f85d 4b04 	ldr.w	r4, [sp], #4
   1045a:	4770      	bx	lr
   1045c:	f011 0f01 	tst.w	r1, #1
   10460:	d006      	beq.n	10470 <strcpy+0x8c>
   10462:	f811 2b01 	ldrb.w	r2, [r1], #1
   10466:	f80c 2b01 	strb.w	r2, [ip], #1
   1046a:	2a00      	cmp	r2, #0
   1046c:	bf08      	it	eq
   1046e:	4770      	bxeq	lr
   10470:	f011 0f02 	tst.w	r1, #2
   10474:	d0bf      	beq.n	103f6 <strcpy+0x12>
   10476:	f831 2b02 	ldrh.w	r2, [r1], #2
   1047a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1047e:	bf16      	itet	ne
   10480:	f82c 2b02 	strhne.w	r2, [ip], #2
   10484:	f88c 2000 	strbeq.w	r2, [ip]
   10488:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1048c:	d1b3      	bne.n	103f6 <strcpy+0x12>
   1048e:	4770      	bx	lr
   10490:	f811 2b01 	ldrb.w	r2, [r1], #1
   10494:	f80c 2b01 	strb.w	r2, [ip], #1
   10498:	2a00      	cmp	r2, #0
   1049a:	d1f9      	bne.n	10490 <strcpy+0xac>
   1049c:	4770      	bx	lr
   1049e:	bf00      	nop
	...

000104c0 <strlen>:
   104c0:	f890 f000 	pld	[r0]
   104c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   104c8:	f020 0107 	bic.w	r1, r0, #7
   104cc:	f06f 0c00 	mvn.w	ip, #0
   104d0:	f010 0407 	ands.w	r4, r0, #7
   104d4:	f891 f020 	pld	[r1, #32]
   104d8:	f040 8049 	bne.w	1056e <strlen+0xae>
   104dc:	f04f 0400 	mov.w	r4, #0
   104e0:	f06f 0007 	mvn.w	r0, #7
   104e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   104e8:	f891 f040 	pld	[r1, #64]	; 0x40
   104ec:	f100 0008 	add.w	r0, r0, #8
   104f0:	fa82 f24c 	uadd8	r2, r2, ip
   104f4:	faa4 f28c 	sel	r2, r4, ip
   104f8:	fa83 f34c 	uadd8	r3, r3, ip
   104fc:	faa2 f38c 	sel	r3, r2, ip
   10500:	bb4b      	cbnz	r3, 10556 <strlen+0x96>
   10502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10506:	fa82 f24c 	uadd8	r2, r2, ip
   1050a:	f100 0008 	add.w	r0, r0, #8
   1050e:	faa4 f28c 	sel	r2, r4, ip
   10512:	fa83 f34c 	uadd8	r3, r3, ip
   10516:	faa2 f38c 	sel	r3, r2, ip
   1051a:	b9e3      	cbnz	r3, 10556 <strlen+0x96>
   1051c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10520:	fa82 f24c 	uadd8	r2, r2, ip
   10524:	f100 0008 	add.w	r0, r0, #8
   10528:	faa4 f28c 	sel	r2, r4, ip
   1052c:	fa83 f34c 	uadd8	r3, r3, ip
   10530:	faa2 f38c 	sel	r3, r2, ip
   10534:	b97b      	cbnz	r3, 10556 <strlen+0x96>
   10536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1053a:	f101 0120 	add.w	r1, r1, #32
   1053e:	fa82 f24c 	uadd8	r2, r2, ip
   10542:	f100 0008 	add.w	r0, r0, #8
   10546:	faa4 f28c 	sel	r2, r4, ip
   1054a:	fa83 f34c 	uadd8	r3, r3, ip
   1054e:	faa2 f38c 	sel	r3, r2, ip
   10552:	2b00      	cmp	r3, #0
   10554:	d0c6      	beq.n	104e4 <strlen+0x24>
   10556:	2a00      	cmp	r2, #0
   10558:	bf04      	itt	eq
   1055a:	3004      	addeq	r0, #4
   1055c:	461a      	moveq	r2, r3
   1055e:	ba12      	rev	r2, r2
   10560:	fab2 f282 	clz	r2, r2
   10564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1056c:	4770      	bx	lr
   1056e:	e9d1 2300 	ldrd	r2, r3, [r1]
   10572:	f004 0503 	and.w	r5, r4, #3
   10576:	f1c4 0000 	rsb	r0, r4, #0
   1057a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1057e:	f014 0f04 	tst.w	r4, #4
   10582:	f891 f040 	pld	[r1, #64]	; 0x40
   10586:	fa0c f505 	lsl.w	r5, ip, r5
   1058a:	ea62 0205 	orn	r2, r2, r5
   1058e:	bf1c      	itt	ne
   10590:	ea63 0305 	ornne	r3, r3, r5
   10594:	4662      	movne	r2, ip
   10596:	f04f 0400 	mov.w	r4, #0
   1059a:	e7a9      	b.n	104f0 <strlen+0x30>

0001059c <__register_exitproc>:
   1059c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   105a0:	4d2c      	ldr	r5, [pc, #176]	; (10654 <__register_exitproc+0xb8>)
   105a2:	4606      	mov	r6, r0
   105a4:	6828      	ldr	r0, [r5, #0]
   105a6:	4698      	mov	r8, r3
   105a8:	460f      	mov	r7, r1
   105aa:	4691      	mov	r9, r2
   105ac:	f000 f882 	bl	106b4 <__retarget_lock_acquire_recursive>
   105b0:	4b29      	ldr	r3, [pc, #164]	; (10658 <__register_exitproc+0xbc>)
   105b2:	681c      	ldr	r4, [r3, #0]
   105b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   105b8:	2b00      	cmp	r3, #0
   105ba:	d03e      	beq.n	1063a <__register_exitproc+0x9e>
   105bc:	685a      	ldr	r2, [r3, #4]
   105be:	2a1f      	cmp	r2, #31
   105c0:	dc1c      	bgt.n	105fc <__register_exitproc+0x60>
   105c2:	f102 0e01 	add.w	lr, r2, #1
   105c6:	b176      	cbz	r6, 105e6 <__register_exitproc+0x4a>
   105c8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   105cc:	2401      	movs	r4, #1
   105ce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   105d2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   105d6:	4094      	lsls	r4, r2
   105d8:	4320      	orrs	r0, r4
   105da:	2e02      	cmp	r6, #2
   105dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   105e0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   105e4:	d023      	beq.n	1062e <__register_exitproc+0x92>
   105e6:	3202      	adds	r2, #2
   105e8:	f8c3 e004 	str.w	lr, [r3, #4]
   105ec:	6828      	ldr	r0, [r5, #0]
   105ee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   105f2:	f000 f861 	bl	106b8 <__retarget_lock_release_recursive>
   105f6:	2000      	movs	r0, #0
   105f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   105fc:	4b17      	ldr	r3, [pc, #92]	; (1065c <__register_exitproc+0xc0>)
   105fe:	b30b      	cbz	r3, 10644 <__register_exitproc+0xa8>
   10600:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10604:	f7fe fc30 	bl	ee68 <malloc>
   10608:	4603      	mov	r3, r0
   1060a:	b1d8      	cbz	r0, 10644 <__register_exitproc+0xa8>
   1060c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10610:	6002      	str	r2, [r0, #0]
   10612:	2100      	movs	r1, #0
   10614:	6041      	str	r1, [r0, #4]
   10616:	460a      	mov	r2, r1
   10618:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1061c:	f04f 0e01 	mov.w	lr, #1
   10620:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10624:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10628:	2e00      	cmp	r6, #0
   1062a:	d0dc      	beq.n	105e6 <__register_exitproc+0x4a>
   1062c:	e7cc      	b.n	105c8 <__register_exitproc+0x2c>
   1062e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10632:	430c      	orrs	r4, r1
   10634:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10638:	e7d5      	b.n	105e6 <__register_exitproc+0x4a>
   1063a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1063e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10642:	e7bb      	b.n	105bc <__register_exitproc+0x20>
   10644:	6828      	ldr	r0, [r5, #0]
   10646:	f000 f837 	bl	106b8 <__retarget_lock_release_recursive>
   1064a:	f04f 30ff 	mov.w	r0, #4294967295
   1064e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10652:	bf00      	nop
   10654:	20000648 	.word	0x20000648
   10658:	00010c04 	.word	0x00010c04
   1065c:	0000ee69 	.word	0x0000ee69

00010660 <register_fini>:
   10660:	4b02      	ldr	r3, [pc, #8]	; (1066c <register_fini+0xc>)
   10662:	b113      	cbz	r3, 1066a <register_fini+0xa>
   10664:	4802      	ldr	r0, [pc, #8]	; (10670 <register_fini+0x10>)
   10666:	f000 b805 	b.w	10674 <atexit>
   1066a:	4770      	bx	lr
   1066c:	00000000 	.word	0x00000000
   10670:	00010681 	.word	0x00010681

00010674 <atexit>:
   10674:	2300      	movs	r3, #0
   10676:	4601      	mov	r1, r0
   10678:	461a      	mov	r2, r3
   1067a:	4618      	mov	r0, r3
   1067c:	f7ff bf8e 	b.w	1059c <__register_exitproc>

00010680 <__libc_fini_array>:
   10680:	b538      	push	{r3, r4, r5, lr}
   10682:	4c0a      	ldr	r4, [pc, #40]	; (106ac <__libc_fini_array+0x2c>)
   10684:	4d0a      	ldr	r5, [pc, #40]	; (106b0 <__libc_fini_array+0x30>)
   10686:	1b64      	subs	r4, r4, r5
   10688:	10a4      	asrs	r4, r4, #2
   1068a:	d00a      	beq.n	106a2 <__libc_fini_array+0x22>
   1068c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10690:	3b01      	subs	r3, #1
   10692:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10696:	3c01      	subs	r4, #1
   10698:	f855 3904 	ldr.w	r3, [r5], #-4
   1069c:	4798      	blx	r3
   1069e:	2c00      	cmp	r4, #0
   106a0:	d1f9      	bne.n	10696 <__libc_fini_array+0x16>
   106a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   106a6:	f000 bacf 	b.w	10c48 <_fini>
   106aa:	bf00      	nop
   106ac:	00010c58 	.word	0x00010c58
   106b0:	00010c54 	.word	0x00010c54

000106b4 <__retarget_lock_acquire_recursive>:
   106b4:	4770      	bx	lr
   106b6:	bf00      	nop

000106b8 <__retarget_lock_release_recursive>:
   106b8:	4770      	bx	lr
   106ba:	bf00      	nop
   106bc:	75646f4d 	.word	0x75646f4d
   106c0:	0020656c 	.word	0x0020656c
   106c4:	20495053 	.word	0x20495053
   106c8:	706d6554 	.word	0x706d6554
   106cc:	74617265 	.word	0x74617265
   106d0:	73657275 	.word	0x73657275
   106d4:	61745320 	.word	0x61745320
   106d8:	64657472 	.word	0x64657472
   106dc:	00000000 	.word	0x00000000
   106e0:	20495053 	.word	0x20495053
   106e4:	706d6554 	.word	0x706d6554
   106e8:	74617265 	.word	0x74617265
   106ec:	73657275 	.word	0x73657275
   106f0:	69614620 	.word	0x69614620
   106f4:	0064656c 	.word	0x0064656c
   106f8:	682f2e2e 	.word	0x682f2e2e
   106fc:	702f6c70 	.word	0x702f6c70
   10700:	2f74726f 	.word	0x2f74726f
   10704:	5f6c7068 	.word	0x5f6c7068
   10708:	6f697067 	.word	0x6f697067
   1070c:	7361625f 	.word	0x7361625f
   10710:	00682e65 	.word	0x00682e65
   10714:	682f2e2e 	.word	0x682f2e2e
   10718:	692f6c61 	.word	0x692f6c61
   1071c:	756c636e 	.word	0x756c636e
   10720:	682f6564 	.word	0x682f6564
   10724:	775f6c61 	.word	0x775f6c61
   10728:	682e7464 	.word	0x682e7464
   1072c:	00000000 	.word	0x00000000
   10730:	682f2e2e 	.word	0x682f2e2e
   10734:	732f6c61 	.word	0x732f6c61
   10738:	682f6372 	.word	0x682f6372
   1073c:	635f6c61 	.word	0x635f6c61
   10740:	6e656c61 	.word	0x6e656c61
   10744:	2e726164 	.word	0x2e726164
   10748:	00000063 	.word	0x00000063
   1074c:	682f2e2e 	.word	0x682f2e2e
   10750:	732f6c61 	.word	0x732f6c61
   10754:	682f6372 	.word	0x682f6372
   10758:	635f6c61 	.word	0x635f6c61
   1075c:	615f6e61 	.word	0x615f6e61
   10760:	636e7973 	.word	0x636e7973
   10764:	0000632e 	.word	0x0000632e
   10768:	682f2e2e 	.word	0x682f2e2e
   1076c:	732f6c61 	.word	0x732f6c61
   10770:	682f6372 	.word	0x682f6372
   10774:	635f6c61 	.word	0x635f6c61
   10778:	735f6372 	.word	0x735f6372
   1077c:	2e636e79 	.word	0x2e636e79
   10780:	00000063 	.word	0x00000063
   10784:	682f2e2e 	.word	0x682f2e2e
   10788:	732f6c61 	.word	0x732f6c61
   1078c:	682f6372 	.word	0x682f6372
   10790:	695f6c61 	.word	0x695f6c61
   10794:	6d5f6332 	.word	0x6d5f6332
   10798:	6e79735f 	.word	0x6e79735f
   1079c:	00632e63 	.word	0x00632e63
   107a0:	682f2e2e 	.word	0x682f2e2e
   107a4:	732f6c61 	.word	0x732f6c61
   107a8:	682f6372 	.word	0x682f6372
   107ac:	705f6c61 	.word	0x705f6c61
   107b0:	632e6d77 	.word	0x632e6d77
   107b4:	00000000 	.word	0x00000000
   107b8:	682f2e2e 	.word	0x682f2e2e
   107bc:	732f6c61 	.word	0x732f6c61
   107c0:	682f6372 	.word	0x682f6372
   107c4:	715f6c61 	.word	0x715f6c61
   107c8:	5f697073 	.word	0x5f697073
   107cc:	636e7973 	.word	0x636e7973
   107d0:	0000632e 	.word	0x0000632e
   107d4:	682f2e2e 	.word	0x682f2e2e
   107d8:	732f6c61 	.word	0x732f6c61
   107dc:	682f6372 	.word	0x682f6372
   107e0:	735f6c61 	.word	0x735f6c61
   107e4:	6d5f6970 	.word	0x6d5f6970
   107e8:	6e79735f 	.word	0x6e79735f
   107ec:	00632e63 	.word	0x00632e63
   107f0:	682f2e2e 	.word	0x682f2e2e
   107f4:	732f6c61 	.word	0x732f6c61
   107f8:	682f6372 	.word	0x682f6372
   107fc:	745f6c61 	.word	0x745f6c61
   10800:	72656d69 	.word	0x72656d69
   10804:	0000632e 	.word	0x0000632e
   10808:	682f2e2e 	.word	0x682f2e2e
   1080c:	752f6c61 	.word	0x752f6c61
   10810:	736c6974 	.word	0x736c6974
   10814:	6372732f 	.word	0x6372732f
   10818:	6974752f 	.word	0x6974752f
   1081c:	6c5f736c 	.word	0x6c5f736c
   10820:	2e747369 	.word	0x2e747369
   10824:	00000063 	.word	0x00000063

00010828 <_map>:
   10828:	00000000 00000040 00000001 00000021     ....@.......!...
   10838:	00000003 00000003 00000004 00000004     ................
   10848:	00000005 00000005 00000006 00000056     ............V...
   10858:	00000007 00000057 00000008 00000028     ....W.......(...
   10868:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   10878:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00010888 <user_mux_confs>:
   10888:	00020100 00000000 00000000 00000000     ................
	...

000108cc <channel_confs>:
   108cc:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001090c <interrupt_cfg>:
	...
   1098c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   1099c:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   109ac:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   109bc:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   109cc:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   109dc:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   109ec:	43000400 43000800 43000c00              ...C...C...C

000109f8 <sercomspi_regs>:
   109f8:	0020000c 00020000 00000000 01ff0001     .. .............
   10a08:	30000c04 02000000 00000000 ff001700     ...0............
   10a18:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   10a28:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   10a38:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   10a48:	43001400 43001800                       ...C...C

00010a50 <_usb_ep_cfgs>:
   10a50:	20000c24 00000000 00000040 20000c64     $.. ....@...d.. 
   10a60:	20000ca4 00400040 20000ce4 20000d24     ... @.@.... $.. 
   10a70:	00400040 20000d64 20000da4 00400040     @.@.d.. ... @.@.
   10a80:	20000de4 20000e24 00400040 00000804     ... $.. @.@.....
   10a90:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   10aa0:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   10ab0:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   10ac0:	7361625f 00682e65                       _base.h.

00010ac8 <n25q256a_interface>:
   10ac8:	0000b80d 0000b8b1 0000b9c1 0000bb79     ............y...
   10ad8:	0000bc09 752f2e2e 642f6273 63697665     ....../usb/devic
   10ae8:	73752f65 2e636462 00000063              e/usbdc.c...

00010af4 <_ZTV9CDC_Class>:
	...
   10afc:	0000e7b9 0000e899 0000e43d 0000e781     ........=.......
   10b0c:	0000e931 0000e745 0000e659 0000e6a9     1...E...Y.......
   10b1c:	0000e7a1 0000e801                       ........

00010b24 <_ZTV6Stream>:
	...
   10b2c:	0000ee7d 0000ea9d 0000e43d 0000e451     }.......=...Q...
   10b3c:	0000ee7d 0000ee7d 0000ee7d 2e257830     }...}...}...0x%.
   10b4c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   10b5c:	0066766f                                ovf.

00010b60 <_ZTV5Print>:
	...
   10b68:	0000ee7d 0000ea9d 0000e43d 0000e451     }.......=...Q...

00010b78 <_ZTV18Event_Logger_Class>:
	...
   10b80:	0000f9a5 0000f9f5 74696e49 696c6169     ........Initiali
   10b90:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   10ba0:	43555320 53534543 00000000 49414620      SUCCESS.... FAI
   10bb0:	44454c4c 00000000 4b4e5520 4e574f4e     LLED.... UNKNOWN
   10bc0:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   10bd0:	695f6c61 00632e6f 343a3631 38353a30     al_io.c.16:40:58
   10be0:	00000000                                ....

00010be4 <_ZTV14Calendar_Class>:
	...
   10bec:	0000f9a5 0000f9f5                       ........

00010bf4 <_ZTV17DateTimeLog_Class>:
	...
   10bfc:	0000ee7d 0000ee7d                       }...}...

00010c04 <_global_impure_ptr>:
   10c04:	20000220                                 .. 

00010c08 <_init>:
   10c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c0a:	bf00      	nop
   10c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c0e:	bc08      	pop	{r3}
   10c10:	469e      	mov	lr, r3
   10c12:	4770      	bx	lr

00010c14 <__init_array_start>:
   10c14:	00010661 	.word	0x00010661

00010c18 <__frame_dummy_init_array_entry>:
   10c18:	00000289 000003c5 00000785 0000da71     ............q...
   10c28:	0000dda1 0000e405 0000ea89 0000ee55     ............U...
   10c38:	0000f0ed 0000f499 0000f8f9 0000fc41     ............A...

00010c48 <_fini>:
   10c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c4a:	bf00      	nop
   10c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c4e:	bc08      	pop	{r3}
   10c50:	469e      	mov	lr, r3
   10c52:	4770      	bx	lr

00010c54 <__fini_array_start>:
   10c54:	00000265 	.word	0x00000265
